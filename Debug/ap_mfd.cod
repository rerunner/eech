; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	__vsprintf_s_l
PUBLIC	_sprintf
PUBLIC	_sprintf_s
PUBLIC	_atan2f
PUBLIC	_cosf
PUBLIC	_fabsf
PUBLIC	_fmodf
PUBLIC	_sinf
PUBLIC	_tanf
PUBLIC	?atan2@@YGMMM@Z					; atan2
PUBLIC	?cos@@YGMM@Z					; cos
PUBLIC	?fabs@@YGMM@Z					; fabs
PUBLIC	?fmod@@YGMMM@Z					; fmod
PUBLIC	?sin@@YGMM@Z					; sin
PUBLIC	?tan@@YGMM@Z					; tan
PUBLIC	?initialise_apache_mfd@@YGXXZ			; initialise_apache_mfd
PUBLIC	?deinitialise_apache_mfd@@YGXXZ			; deinitialise_apache_mfd
PUBLIC	?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode
PUBLIC	?draw_apache_mfd_on_cockpit@@YGXMMHHW4MFD_LOCATIONS@@@Z ; draw_apache_mfd_on_cockpit
PUBLIC	?draw_apache_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z ; draw_apache_mfd_on_texture
PUBLIC	?draw_apache_virtual_cockpit_ort_view@@YGXHH@Z	; draw_apache_virtual_cockpit_ort_view
PUBLIC	?draw_overlaid_apache_mfd@@YGXMMMW4MFD_LOCATIONS@@@Z ; draw_overlaid_apache_mfd
PUBLIC	?select_next_apache_tsd_ase_range@@YGXXZ	; select_next_apache_tsd_ase_range
PUBLIC	?select_previous_apache_tsd_ase_range@@YGXXZ	; select_previous_apache_tsd_ase_range
PUBLIC	?select_next_apache_tsd_declutter_level@@YGXXZ	; select_next_apache_tsd_declutter_level
PUBLIC	?select_previous_apache_tsd_declutter_level@@YGXXZ ; select_previous_apache_tsd_declutter_level
PUBLIC	?select_next_tsd_underlay_level@@YGXXZ		; select_next_tsd_underlay_level
PUBLIC	?select_next_apache_lhs_mfd@@YGXXZ		; select_next_apache_lhs_mfd
PUBLIC	?select_previous_apache_lhs_mfd@@YGXXZ		; select_previous_apache_lhs_mfd
PUBLIC	?select_next_apache_rhs_mfd@@YGXXZ		; select_next_apache_rhs_mfd
PUBLIC	?select_previous_apache_rhs_mfd@@YGXXZ		; select_previous_apache_rhs_mfd
PUBLIC	?select_apache_ground_radar_mfd@@YGXXZ		; select_apache_ground_radar_mfd
PUBLIC	?select_apache_air_radar_mfd@@YGXXZ		; select_apache_air_radar_mfd
PUBLIC	?select_apache_tads_mfd@@YGXXZ			; select_apache_tads_mfd
PUBLIC	?toggle_apache_ase_auto_page@@YGXXZ		; toggle_apache_ase_auto_page
PUBLIC	?auto_page_apache_ase_mfd@@YGXXZ		; auto_page_apache_ase_mfd
PUBLIC	?toggle_apache_lhs_mfd_on_off@@YGXXZ		; toggle_apache_lhs_mfd_on_off
PUBLIC	?toggle_apache_rhs_mfd_on_off@@YGXXZ		; toggle_apache_rhs_mfd_on_off
PUBLIC	?toggle_apache_ort_on_off@@YGXXZ		; toggle_apache_ort_on_off
PUBLIC	?get_apache_mfd_has_focus@@YGHW4MFD_LOCATIONS@@@Z ; get_apache_mfd_has_focus
PUBLIC	?get_apache_tads_display_visible@@YGHXZ		; get_apache_tads_display_visible
PUBLIC	?create_apache_pfz@@YGXH@Z			; create_apache_pfz
PUBLIC	?set_radar_zoomed@@YGXH@Z			; set_radar_zoomed
PUBLIC	?draw_apache_virtual_cockpit_ort_symbology@@YGXXZ ; draw_apache_virtual_cockpit_ort_symbology
PUBLIC	?apache_select_clicked_target@@YGXXZ		; apache_select_clicked_target
PUBLIC	?pointer_active@@YGHXZ				; pointer_active
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	?draw_alnum_weapons@@YGXXZ			; draw_alnum_weapons
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_04FPHGMDID@NF?$CFd@			; `string'
PUBLIC	??_C@_04IAKGOKGA@PF?$CFd@			; `string'
PUBLIC	??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	?__LINE__Var@?0??select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z@4JA ; `select_apache_mfd_mode'::`1'::__LINE__Var
PUBLIC	??_C@_0DJ@HPJGECJI@?$CImfd_mode?5?$DO?$DN?5MFD_MODE_OFF?$CJ?5?$CG?$CG?5?$CI@ ; `string'
PUBLIC	??_C@_0BL@JNKLHOPK@mfd_mode?5?$CB?$DN?5MFD_MODE_LLLTV@ ; `string'
PUBLIC	??_C@_0LL@EJDGJHNL@?$CIlocation?5?$DN?$DN?5MFD_LOCATION_PILOT@ ; `string'
PUBLIC	??_C@_0BF@EELNHMOM@Unknown?5MFD?5location@	; `string'
PUBLIC	??_C@_04LGBIGMFG@ZOOM@				; `string'
PUBLIC	??_C@_05LIPABGF@?$CF?40fm@			; `string'
PUBLIC	??_C@_06NBEADFGO@?$CF?40fKm@			; `string'
PUBLIC	??_C@_03MAMPKPPK@XXX@				; `string'
PUBLIC	?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA ; `display_radar_target_details'::`1'::__LINE__Var
PUBLIC	??_C@_05EMNNHGFM@radar@				; `string'
PUBLIC	??_C@_03NGNKAJPJ@?$CFdm@			; `string'
PUBLIC	??_C@_06OMCABMNO@?$CF?41fKm@			; `string'
PUBLIC	??_C@_06HCPKJKPH@NO?5LOS@			; `string'
PUBLIC	??_C@_04LMMJFDCN@AUTO@				; `string'
PUBLIC	??_C@_06KODELPLK@LOCKED@			; `string'
PUBLIC	??_C@_06GPMJGLEM@MARKED@			; `string'
PUBLIC	?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA ; `draw_radar_target_symbol'::`1'::__LINE__Var
PUBLIC	??_C@_06JJLAMBGK@target@			; `string'
PUBLIC	??_C@_0BA@IIPCKJML@source_position@		; `string'
PUBLIC	??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@ ; `string'
PUBLIC	??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA ; `draw_ground_radar_clutter'::`1'::__LINE__Var
PUBLIC	??_C@_0DD@KDAGALDF@get_local_entity_type?5?$CItarget?$CJ?5@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA ; `draw_ground_radar_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_03NIFPGLBG@ALL@				; `string'
PUBLIC	??_C@_03IBEFMGAI@LOW@				; `string'
PUBLIC	??_C@_06HMBFJLMK@MEDIUM@			; `string'
PUBLIC	??_C@_03FFIBGFCJ@MED@				; `string'
PUBLIC	??_C@_04PKDHFCJF@HIGH@				; `string'
PUBLIC	??_C@_04MGKDMHFC@MARK@				; `string'
PUBLIC	??_C@_03COBKBLOD@SGL@				; `string'
PUBLIC	?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA	; `draw_air_radar_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_05EJJKHDCK@ENEMY@				; `string'
PUBLIC	??_C@_0BL@MNOBOANG@Invalid?5field?5of?5view?5?$DN?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??set_eo_view_params@@YGXW4TARGET_ACQUISITION_SYSTEMS@@HHHHMM@Z@4JA ; `set_eo_view_params'::`1'::__LINE__Var
PUBLIC	??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@ ; `string'
PUBLIC	??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@ ; `string'
PUBLIC	??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z@4JA ; `draw_3d_eo_display'::`1'::__LINE__Var
PUBLIC	??_C@_02KMMHFIEO@eo@				; `string'
PUBLIC	?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA ; `draw_3d_eo_display_on_texture'::`1'::__LINE__Var
PUBLIC	??_C@_0BF@MDEHLDP@eo_3d_texture_screen@		; `string'
PUBLIC	??_C@_0BK@EPIBEIKA@d3d_can_render_to_texture@	; `string'
PUBLIC	?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA ; `draw_overlaid_3d_eo_display'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??draw_high_action_display@@YGXPAUENTITY@@H@Z@4JA ; `draw_high_action_display'::`1'::__LINE__Var
PUBLIC	??_C@_03GOOLIKIF@?$CF3d@			; `string'
PUBLIC	??_C@_03GLKEJMAA@?$CF4d@			; `string'
PUBLIC	??_C@_03JKJFCLEN@FCR@				; `string'
PUBLIC	??_C@_05FALJMMFP@R?$CF?41f@			; `string'
PUBLIC	??_C@_04DBODHFDK@TADS@				; `string'
PUBLIC	??_C@_07HOJAAJFI@L?$CF04?40f@			; `string'
PUBLIC	??_C@_04OKGDLNCL@NONE@				; `string'
PUBLIC	??_C@_05NFPLLMGK@A?$CF?41f@			; `string'
PUBLIC	??_C@_04BCEGOCOA@AX?4X@				; `string'
PUBLIC	??_C@_0L@FONJMCCD@NO?5ACQUIRE@			; `string'
PUBLIC	??_C@_09GGBOJENB@NO?5WEAPON@			; `string'
PUBLIC	??_C@_09JLFDDBCD@NO?5TARGET@			; `string'
PUBLIC	??_C@_0M@MFPJHMMF@INVALID?5TGT@			; `string'
PUBLIC	??_C@_09CPLEKEOP@SKR?5LIMIT@			; `string'
PUBLIC	??_C@_07KJHNDNDJ@MIN?5RNG@			; `string'
PUBLIC	??_C@_07EPBNJCNI@MAX?5RNG@			; `string'
PUBLIC	??_C@_0L@PDLCBABH@VALID?5LOCK@			; `string'
PUBLIC	??_C@_0BO@IMEMIMEA@Invalid?5weapon?5lock?5type?5?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_07CMBMBPC@LOAL?9HI@			; `string'
PUBLIC	??_C@_04EIHLKMGG@LOBL@				; `string'
PUBLIC	?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z@4JA ; `draw_2d_eo_display'::`1'::__LINE__Var
PUBLIC	??_C@_04MIGKMLBH@FLIR@				; `string'
PUBLIC	??_C@_03ENJJJDDH@DTV@				; `string'
PUBLIC	??_C@_03NFBNOOEB@DVO@				; `string'
PUBLIC	??_C@_08JFLECGBM@LO?5LIGHT@			; `string'
PUBLIC	??_C@_02ONPABID@LO@				; `string'
PUBLIC	??_C@_03FMKFNHMM@NAR@				; `string'
PUBLIC	??_C@_04KPGPJCNC@WIDE@				; `string'
PUBLIC	??_C@_01OCOKONAJ@L@				; `string'
PUBLIC	??_C@_01CPLAODJH@S@				; `string'
PUBLIC	?__LINE__Var@?0??apache_select_clicked_target@@YGXXZ@4JA ; `apache_select_clicked_target'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA ; `draw_tactical_situation_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_06LLLMNJMM@NO?5ACQ@			; `string'
PUBLIC	??_C@_08OIKHPJCN@FCR?1PF?$CFd@			; `string'
PUBLIC	??_C@_06NOICLIMH@IHADSS@			; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_03DGGJGKKM@GND@				; `string'
PUBLIC	??_C@_03KNFJGCC@AIR@				; `string'
PUBLIC	??_C@_03CIAFGHAC@2Km@				; `string'
PUBLIC	??_C@_03LFNCFPLL@5Km@				; `string'
PUBLIC	??_C@_04PJCLBGLO@10Km@				; `string'
PUBLIC	??_C@_04IJFFJMFM@25Km@				; `string'
PUBLIC	??_C@_03DBNGLLAD@TGT@				; `string'
PUBLIC	??_C@_03DIMJBCMI@NAV@				; `string'
PUBLIC	??_C@_06NEGNFKDO@?$CF?41fkm@			; `string'
PUBLIC	?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA ; `get_closest_missile'::`1'::__LINE__Var
PUBLIC	??_C@_06OEKOLKIL@source@			; `string'
PUBLIC	??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA ; `draw_aircraft_survivability_equipment_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@		; `string'
PUBLIC	??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@		; `string'
PUBLIC	??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@		; `string'
PUBLIC	??_C@_0L@DADPKEOI@IR?5JAM?5XXX@			; `string'
PUBLIC	??_C@_09OKBKNIAL@IR?5JAM?5ON@			; `string'
PUBLIC	??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@			; `string'
PUBLIC	??_C@_06CNPDBJMK@IR?5XXX@			; `string'
PUBLIC	??_C@_05JBLHJOBL@IR?5ON@			; `string'
PUBLIC	??_C@_06CCMEMHEJ@IR?5OFF@			; `string'
PUBLIC	??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@			; `string'
PUBLIC	??_C@_09OKIOJJOP@RD?5JAM?5ON@			; `string'
PUBLIC	??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@			; `string'
PUBLIC	??_C@_06JNKFDAHI@RD?5XXX@			; `string'
PUBLIC	??_C@_05BHAGAOGB@RD?5ON@			; `string'
PUBLIC	??_C@_06JCJCOOPL@RD?5OFF@			; `string'
PUBLIC	??_C@_08NKOLJMOI@AUTO?5C?1M@			; `string'
PUBLIC	??_C@_09NCCLNCCC@AUTO?5PAGE@			; `string'
PUBLIC	??_C@_08GHAEIHAP@CHAFF?3XX@			; `string'
PUBLIC	??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@		; `string'
PUBLIC	??_C@_04KJNFJKOK@C?3XX@				; `string'
PUBLIC	??_C@_06GNOFKMCG@C?3?$CF02d@			; `string'
PUBLIC	??_C@_08HGDOPGOH@FLARE?3XX@			; `string'
PUBLIC	??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@		; `string'
PUBLIC	??_C@_04GBDFBFJK@F?3XX@				; `string'
PUBLIC	??_C@_06DPNNIDIB@F?3?$CF02d@			; `string'
PUBLIC	?__LINE__Var@?0??draw_sprite@@YGXHHHHHH@Z@4JA	; `draw_sprite'::`1'::__LINE__Var
PUBLIC	??_C@_06EBODONHD@x?5?$DO?$DN?50@		; `string'
PUBLIC	??_C@_06OHJEOGMH@y?5?$DO?$DN?50@		; `string'
PUBLIC	??_C@_04OCCELDNI@?$CF04d@			; `string'
PUBLIC	??_C@_04OGKJMPGK@?$CF02d@			; `string'
PUBLIC	?__LINE__Var@?0??draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z@4JA ; `draw_large_weapon_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0P@MFMEIMLB@draw_large_mfd@		; `string'
PUBLIC	??_C@_04CPMKADPB@XXXX@				; `string'
PUBLIC	??_C@_05FOOOBDLP@CHAFF@				; `string'
PUBLIC	??_C@_03GPCJOALC@?$CF2d@			; `string'
PUBLIC	??_C@_02BAHDIOLJ@XX@				; `string'
PUBLIC	??_C@_05MLKBHMKD@FLARE@				; `string'
PUBLIC	??_C@_03KIGHCFHP@MAN@				; `string'
PUBLIC	??_C@_03NHPMNECN@ARM@				; `string'
PUBLIC	??_C@_04JMNPMIJD@SAFE@				; `string'
PUBLIC	??_C@_03MGGCNFDL@LRF@				; `string'
PUBLIC	??_C@_05MJCDDMFE@TRNGL@				; `string'
PUBLIC	??_C@_04EKDNBCDP@LOAL@				; `string'
PUBLIC	??_C@_05GPKGLDLB@SALVO@				; `string'
PUBLIC	??_C@_0CG@DKLMAF@more?5than?54?5hellfires?5on?5Apache@ ; `string'
PUBLIC	??_C@_0CJ@NDBFDPHK@?$CB?$CCmore?5than?54?5hellfires?5on?5Apac@ ; `string'
PUBLIC	??_C@_01DGKLNCNG@R@				; `string'
PUBLIC	??_C@_02MCEHGFCK@MP@				; `string'
PUBLIC	??_C@_02LENCMAPF@RC@				; `string'
PUBLIC	?__LINE__Var@?0??draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z@4JA ; `draw_weapon_display_mfd'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??print_system_message@@YGMPAD0HM@Z@4JA ; `print_system_message'::`1'::__LINE__Var
PUBLIC	??_C@_09FJJPPKDN@equipment@			; `string'
PUBLIC	??_C@_07FPLKDJGL@warning@			; `string'
PUBLIC	??_C@_02GIPFHKNO@OK@				; `string'
PUBLIC	??_C@_04OOEBCMBF@FAIL@				; `string'
PUBLIC	??_C@_05IHELJBBC@RADAR@				; `string'
PUBLIC	??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@		; `string'
PUBLIC	??_C@_0N@JDBOFCJG@RADAR?5JAMMER@		; `string'
PUBLIC	??_C@_09MILGCPFO@IR?5JAMMER@			; `string'
PUBLIC	??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@	; `string'
PUBLIC	??_C@_0P@OEDGDHNF@COMMUNICATIONS@		; `string'
PUBLIC	??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@	; `string'
PUBLIC	??_C@_04IDKCLELC@PNVS@				; `string'
PUBLIC	??_C@_0L@LMAEBBOE@STABILISER@			; `string'
PUBLIC	??_C@_0L@FFIGCBMA@MAIN?5ROTOR@			; `string'
PUBLIC	??_C@_07OHKEFPKJ@DAMAGED@			; `string'
PUBLIC	??_C@_0L@MCBINMPD@TAIL?5ROTOR@			; `string'
PUBLIC	??_C@_08KNAGGCOA@ENGINE?51@			; `string'
PUBLIC	??_C@_08IGCLDBCD@ENGINE?52@			; `string'
PUBLIC	??_C@_07DMOCMFND@FAILURE@			; `string'
PUBLIC	??_C@_07MNNJLJIF@PRI?5LOW@			; `string'
PUBLIC	??_C@_08JGIHBEEO@SEC?5FAIL@			; `string'
PUBLIC	??_C@_0L@POFMFPD@HYDRAULICS@			; `string'
PUBLIC	??_C@_0N@MMJNGGCF@OIL?5PRESSURE@		; `string'
PUBLIC	??_C@_04PCNCCNDP@USED@				; `string'
PUBLIC	??_C@_0BC@OIGEPKDA@FIRE?5EXTINGUISHER@		; `string'
PUBLIC	??_C@_06JNBMPGOL@TORQUE@			; `string'
PUBLIC	??_C@_04OHGLKFFN@?$CF03d@			; `string'
PUBLIC	??_C@_04DICABFLJ@FUEL@				; `string'
PUBLIC	??_C@_08GEGEOBAJ@?$CF04d?5lbs@			; `string'
PUBLIC	??_C@_08ICFKBODG@HYDR?5PSI@			; `string'
PUBLIC	??_C@_09KDIHCNHF@?$CF03d0?5psi@			; `string'
PUBLIC	??_C@_0L@OGFGIPGD@APU?5?$CF03d?$CF?$CF@		; `string'
PUBLIC	?__LINE__Var@?0??draw_apache_mfd_on_cockpit@@YGXMMHHW4MFD_LOCATIONS@@@Z@4JA ; `draw_apache_mfd_on_cockpit'::`1'::__LINE__Var
PUBLIC	??_C@_0JJ@KMOEPALN@?$CIlocation?5?$DN?$DN?5MFD_LOCATION_PILOT@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA	; `draw_pitch_ladder'::`1'::__LINE__Var
PUBLIC	??_C@_03NJMPCKOA@?$CFd0@			; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_03IAKIMNGC@R?$CFd@			; `string'
PUBLIC	??_C@_04FCMNJMCO@?$CFd?$CF?$CF@			; `string'
PUBLIC	?__LINE__Var@?0??display_waypoint_information@@YGXUREAL_COLOUR@@@Z@4JA ; `display_waypoint_information'::`1'::__LINE__Var
PUBLIC	??_C@_06JCIGMCHD@?$CFc?3?$CFdm@			; `string'
PUBLIC	??_C@_09EKFBJBJG@?$CFc?3?$CF?41fKm@		; `string'
PUBLIC	??_C@_07CFANIJPM@?$CFc?3?$CFdKm@		; `string'
PUBLIC	??_C@_06BAOIPBEF@?9?3?9?9?4?9@			; `string'
PUBLIC	??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@	; `string'
PUBLIC	??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@		; `string'
PUBLIC	?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA ; `draw_flight_display_mfd'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??draw_alnum_weapons@@YGXXZ@4JA	; `draw_alnum_weapons'::`1'::__LINE__Var
PUBLIC	??_C@_07ENBNJNMO@1234567@			; `string'
PUBLIC	??_C@_0M@ICPLLFPA@?$CFc?5?$CFc?5?$CFc?5?$CFc@	; `string'
PUBLIC	??_C@_09OFNPBAOE@FLIR?5FAIL@			; `string'
PUBLIC	??_C@_07NLIECAOG@TV?5FAIL@			; `string'
PUBLIC	??_C@_08GLLCGHEK@DVO?5FAIL@			; `string'
PUBLIC	??_C@_09OPNFHOOA@RECORDING@			; `string'
PUBLIC	??_C@_09PPEFEGGK@BORESIGHT@			; `string'
PUBLIC	??_C@_08PABMPDMO@SLAVE?5TG@			; `string'
PUBLIC	?__LINE__Var@?0??get_weapon_status@@YGPBDPADI@Z@4JA ; `get_weapon_status'::`1'::__LINE__Var
PUBLIC	??_C@_08HKMHFHNI@GUN?5FAIL@			; `string'
PUBLIC	??_C@_07MHIPJLIL@RNDS?$CF4d@			; `string'
PUBLIC	??_C@_07MPJLOAND@ROCKETS@			; `string'
PUBLIC	??_C@_03IFPDDAOD@MSL@				; `string'
PUBLIC	??_C@_06KBOCPCKB@TOF?$DN?$CFd@			; `string'
PUBLIC	??_C@_03HPMEOHJD@ATA@				; `string'
PUBLIC	??_C@_0O@MBLKLAJE@LASE?4?4?4TARGET@		; `string'
PUBLIC	??_C@_0L@FDACEBPE@IAT?5OFFSET@			; `string'
PUBLIC	??_C@_0N@LJGBJBPO@IAT?5TRACKING@		; `string'
PUBLIC	??_C@_0N@GKHMPBNK@TADS?5FORWARD@		; `string'
PUBLIC	??_C@_05HEBIGJOB@RFD?$DND@			; `string'
PUBLIC	?__LINE__Var@?0??draw_apache_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z@4JA ; `draw_apache_mfd_on_texture'::`1'::__LINE__Var
PUBLIC	??_C@_0BN@KPJGEEPP@location?5?$DN?$DN?5MFD_LOCATION_ORT@ ; `string'
PUBLIC	??_C@_0CG@IPIPCLFE@mfd_viewport_size?5?$DM?$DN?5mfd_textur@ ; `string'
PUBLIC	??_C@_0CJ@CEJBLLFD@Only?5pilot?8s?5MFDs?5support?5TADS?5@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_overlaid_apache_mfd@@YGXMMMW4MFD_LOCATIONS@@@Z@4JA ; `draw_overlaid_apache_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_0BG@CLGDNIGP@Invalid?5mfd?5mode?5?$DN?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??cycle_apache_mfd@@YGXHW4MFD_LOCATIONS@@@Z@4JA ; `cycle_apache_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0BO@MLBCHGI@next_mfd_mode?5?$CB?$DN?5oposite_mode@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3b83126f
PUBLIC	__real@3c000000
PUBLIC	__real@3c23d70a
PUBLIC	__real@3c8efa35
PUBLIC	__real@3ca3d70d
PUBLIC	__real@3cf5c28f
PUBLIC	__real@3d000000
PUBLIC	__real@3d23d70a
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3d7c0fc1
PUBLIC	__real@3d8f5c29
PUBLIC	__real@3d99999a
PUBLIC	__real@3da3d70a
PUBLIC	__real@3da3d70b
PUBLIC	__real@3db2b8c2
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e000000
PUBLIC	__real@3e0f5c2a
PUBLIC	__real@3e19999a
PUBLIC	__real@3e32b8c2
PUBLIC	__real@3e35c28f
PUBLIC	__real@3e3851ec
PUBLIC	__real@3e428f5c
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e4cccce
PUBLIC	__real@3e6147ae
PUBLIC	__real@3e666666
PUBLIC	__real@3e733333
PUBLIC	__real@3e800000
PUBLIC	__real@3e860a92
PUBLIC	__real@3e8f5c29
PUBLIC	__real@3e99999a
PUBLIC	__real@3e9eb852
PUBLIC	__real@3ea2eacf
PUBLIC	__real@3eae147b
PUBLIC	__real@3eae9e8d
PUBLIC	__real@3eb2b8c2
PUBLIC	__real@3eb33333
PUBLIC	__real@3ebd70a4
PUBLIC	__real@3ec00000
PUBLIC	__real@3ecccccd
PUBLIC	__real@3ed70a3d
PUBLIC	__real@3edf66f3
PUBLIC	__real@3ee66666
PUBLIC	__real@3f000000
PUBLIC	__real@3f00002000400080
PUBLIC	__real@3f060a92
PUBLIC	__real@3f066666
PUBLIC	__real@3f0a3d71
PUBLIC	__real@3f0ccccd
PUBLIC	__real@3f10000000000000
PUBLIC	__real@3f133333
PUBLIC	__real@3f19999a
PUBLIC	__real@3f22eacf
PUBLIC	__real@3f233333
PUBLIC	__real@3f23d70a
PUBLIC	__real@3f266666
PUBLIC	__real@3f2b851f
PUBLIC	__real@3f2e9e8d
PUBLIC	__real@3f333333
PUBLIC	__real@3f3851ec
PUBLIC	__real@3f3d70a4
PUBLIC	__real@3f3eb852
PUBLIC	__real@3f43a92a3d70a3d7
PUBLIC	__real@3f451eb8
PUBLIC	__real@3f4a3d71
PUBLIC	__real@3f4ac083
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f4eb852
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3f50a3d7
PUBLIC	__real@3f51eb85
PUBLIC	__real@3f566666
PUBLIC	__real@3f5999999999999a
PUBLIC	__real@3f59999a
PUBLIC	__real@3f5a3d71
PUBLIC	__real@3f5b645a
PUBLIC	__real@3f5c28f6
PUBLIC	__real@3f5ccccd
PUBLIC	__real@3f600000
PUBLIC	__real@3f60a3d7
PUBLIC	__real@3f61111111111111
PUBLIC	__real@3f6147ae
PUBLIC	__real@3f628f5c
PUBLIC	__real@3f63d70a
PUBLIC	__real@3f651eb8
PUBLIC	__real@3f666666
PUBLIC	__real@3f68f5c3
PUBLIC	__real@3f6c28f6
PUBLIC	__real@3f6e147b
PUBLIC	__real@3f700000
PUBLIC	__real@3f733333
PUBLIC	__real@3f74fdf4
PUBLIC	__real@3f770a3d
PUBLIC	__real@3f7851ec
PUBLIC	__real@3f789374cccccccd
PUBLIC	__real@3f7ae148
PUBLIC	__real@3f7c28f6
PUBLIC	__real@3f7eb852
PUBLIC	__real@3f800000
PUBLIC	__real@3f80624dd2f1a9fc
PUBLIC	__real@3f82f6e9
PUBLIC	__real@3f83a92a30553261
PUBLIC	__real@3f847ae147ae147b
PUBLIC	__real@3f8ccccd
PUBLIC	__real@3f90d0b8
PUBLIC	__real@3f947ae147ae147b
PUBLIC	__real@3f9999999999999a
PUBLIC	__real@3f9b573eab367a10
PUBLIC	__real@3f9eb851eb851eb8
PUBLIC	__real@3fa47ae147ae147b
PUBLIC	__real@3fa999999999999a
PUBLIC	__real@3fae9e8d
PUBLIC	__real@3faeb851eb851eb8
PUBLIC	__real@3fb3333333333333
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fbc28f5c28f5c29
PUBLIC	__real@3fc0000000000000
PUBLIC	__real@3fc1111111111111
PUBLIC	__real@3fc3333333333333
PUBLIC	__real@3fc6571848000000
PUBLIC	__real@3fc70a3d70a3d70a
PUBLIC	__real@3fc90fdb
PUBLIC	__real@3fc999999999999a
PUBLIC	__real@3fcc28f5c28f5c29
PUBLIC	__real@3fcccccd
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fd1111111111111
PUBLIC	__real@3fd3333333333333
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe0c15236000000
PUBLIC	__real@3fe999999999999a
PUBLIC	__real@3feb333333333333
PUBLIC	__real@3fec000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff0c09b332ccccd
PUBLIC	__real@3ff199999999999a
PUBLIC	__real@3ff5d3d193333333
PUBLIC	__real@3ff8000000000000
PUBLIC	__real@3ff85d84
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@400c4a32
PUBLIC	__real@400d1eb8
PUBLIC	__real@4010000000000000
PUBLIC	__real@4014000000000000
PUBLIC	__real@4016eb167e7d81e3
PUBLIC	__real@4018000000000000
PUBLIC	__real@401c000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@4026000000000000
PUBLIC	__real@4026eb1686b280e6
PUBLIC	__real@402a000000000000
PUBLIC	__real@4034000000000000
PUBLIC	__real@403504e6
PUBLIC	__real@4037000000000000
PUBLIC	__real@40400000
PUBLIC	__real@4040800000000000
PUBLIC	__real@404ca5dc00000000
PUBLIC	__real@4050400000000000
PUBLIC	__real@4051f948
PUBLIC	__real@4059000000000000
PUBLIC	__real@405e000000000000
PUBLIC	__real@405f400000000000
PUBLIC	__real@405fc00000000000
PUBLIC	__real@4060000000000000
PUBLIC	__real@40666666
PUBLIC	__real@4069000000000000
PUBLIC	__real@4072c00000000000
PUBLIC	__real@407e000000000000
PUBLIC	__real@40800000
PUBLIC	__real@4084000000000000
PUBLIC	__real@40845f306446f9b4
PUBLIC	__real@408f400000000000
PUBLIC	__real@4097700000000000
PUBLIC	__real@409f400000000000
PUBLIC	__real@40a00000
PUBLIC	__real@40a3880000000000
PUBLIC	__real@40c90fdb
PUBLIC	__real@40e48962
PUBLIC	__real@40f86a0000000000
PUBLIC	__real@41000000
PUBLIC	__real@41100000
PUBLIC	__real@41200000
PUBLIC	__real@4121999a
PUBLIC	__real@414ba583
PUBLIC	__real@41600000
PUBLIC	__real@41900000
PUBLIC	__real@42000000
PUBLIC	__real@420d6bd4
PUBLIC	__real@42480000
PUBLIC	__real@427ffefa
PUBLIC	__real@43000000
PUBLIC	__real@4344d9b3
PUBLIC	__real@43650000
PUBLIC	__real@437fffbe
PUBLIC	__real@43800000
PUBLIC	__real@43e30000
PUBLIC	__real@447a0000
PUBLIC	__real@44fa0000
PUBLIC	__real@459c4000
PUBLIC	__real@461c4000
PUBLIC	__real@46c35000
PUBLIC	__real@49742400
PUBLIC	__real@80000000
PUBLIC	__real@bc23d70a
PUBLIC	__real@bcf5c28f
PUBLIC	__real@bd23d70a
PUBLIC	__real@bd4ccccd
PUBLIC	__real@bd8f5c29
PUBLIC	__real@bd99999a
PUBLIC	__real@bda3d70a
PUBLIC	__real@bdb2b8c2
PUBLIC	__real@bdb851ec
PUBLIC	__real@bdcccccd
PUBLIC	__real@be0f5c29
PUBLIC	__real@be19999a
PUBLIC	__real@be23d70a
PUBLIC	__real@be32b8c2
PUBLIC	__real@be333333
PUBLIC	__real@be35c28f
PUBLIC	__real@be428f5c
PUBLIC	__real@be4ccccd
PUBLIC	__real@be6147ae
PUBLIC	__real@be666666
PUBLIC	__real@be800000
PUBLIC	__real@be860a92
PUBLIC	__real@be8a3d71
PUBLIC	__real@be8f5c29
PUBLIC	__real@be99999a
PUBLIC	__real@beae147b
PUBLIC	__real@beb2b8c2
PUBLIC	__real@beb33333
PUBLIC	__real@becccccd
PUBLIC	__real@bed70a3d
PUBLIC	__real@bedf66f3
PUBLIC	__real@bee66666
PUBLIC	__real@beeb851f
PUBLIC	__real@bf000000
PUBLIC	__real@bf051eb9
PUBLIC	__real@bf060a92
PUBLIC	__real@bf0ccccd
PUBLIC	__real@bf147ae2
PUBLIC	__real@bf19999a
PUBLIC	__real@bf2147ae
PUBLIC	__real@bf23d70b
PUBLIC	__real@bf266666
PUBLIC	__real@bf2ccccd
PUBLIC	__real@bf333333
PUBLIC	__real@bf333334
PUBLIC	__real@bf3851ec
PUBLIC	__real@bf3d70a4
PUBLIC	__real@bf400000
PUBLIC	__real@bf466666
PUBLIC	__real@bf4ac083
PUBLIC	__real@bf4b851f
PUBLIC	__real@bf4ccccd
PUBLIC	__real@bf533333
PUBLIC	__real@bf547ae1
PUBLIC	__real@bf58f5c3
PUBLIC	__real@bf59999a
PUBLIC	__real@bf600000
PUBLIC	__real@bf666666
PUBLIC	__real@bf68f5c3
PUBLIC	__real@bf6e147b
PUBLIC	__real@bf733333
PUBLIC	__real@bf73d70a
PUBLIC	__real@bf770a3d
PUBLIC	__real@bf7851ec
PUBLIC	__real@bf79999a
PUBLIC	__real@bf7ae148
PUBLIC	__real@bf800000
PUBLIC	__real@bf8ccccd
PUBLIC	__real@bfb999999999999a
PUBLIC	__real@bfc3333333333333
PUBLIC	__real@bfd6666666666666
PUBLIC	__real@bfd999999999999a
PUBLIC	__real@bfe0000000000000
PUBLIC	__real@bfe0c15236000000
PUBLIC	__real@bfe3333333333333
PUBLIC	__real@bfe6666673333333
PUBLIC	__real@bff199999999999a
PUBLIC	__real@c0000000
PUBLIC	__real@c0400000
PUBLIC	__real@c0800000
PUBLIC	__real@c08f400000000000
PUBLIC	__real@c0a00000
PUBLIC	__real@c0c00000
PUBLIC	__real@c0e00000
PUBLIC	__real@c1000000
PUBLIC	__real@c1400000
PUBLIC	__real@c1500000
PUBLIC	__real@c1800000
PUBLIC	__real@c1980000
PUBLIC	__real@c1c80000
PUBLIC	__real@c2180000
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp____stdio_common_vsprintf_s:PROC
EXTRN	_abs:PROC
EXTRN	_memset:PROC
EXTRN	_strcpy:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_atan2:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_fmod:PROC
EXTRN	_sin:PROC
EXTRN	_tan:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?query_TIR_active@@YAHXZ:PROC			; query_TIR_active
EXTRN	?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z:PROC	; get_3d_vector_magnitude
EXTRN	?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z:PROC ; normalise_3d_vector_given_magnitude
EXTRN	?get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z:PROC ; get_3d_unit_vector_dot_product
EXTRN	?get_3d_transformation_matrix@@YGXQAY02MMMM@Z:PROC ; get_3d_transformation_matrix
EXTRN	?get_2d_range@@YGMPBUVEC3D@@0@Z:PROC		; get_2d_range
EXTRN	?get_sqr_2d_range@@YGMPBUVEC3D@@0@Z:PROC	; get_sqr_2d_range
EXTRN	?get_approx_2d_range@@YGMPBUVEC3D@@0@Z:PROC	; get_approx_2d_range
EXTRN	?get_3d_range@@YGMPBUVEC3D@@0@Z:PROC		; get_3d_range
EXTRN	?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z:PROC ; create_system_texture_screen
EXTRN	?create_screen_for_system_texture@@YGPAUSCREEN@@H@Z:PROC ; create_screen_for_system_texture
EXTRN	?set_system_texture_screen@@YGXPAUSCREEN@@H@Z:PROC ; set_system_texture_screen
EXTRN	?destroy_screen@@YGHPAUSCREEN@@@Z:PROC		; destroy_screen
EXTRN	?lock_screen@@YGHPAUSCREEN@@@Z:PROC		; lock_screen
EXTRN	?unlock_screen@@YGHPAUSCREEN@@@Z:PROC		; unlock_screen
EXTRN	?set_active_screen@@YGHPAUSCREEN@@@Z:PROC	; set_active_screen
EXTRN	?set_3d_render_target@@YGHPAUSCREEN@@@Z:PROC	; set_3d_render_target
EXTRN	?finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z:PROC ; finalise_3d_render_target_texture
EXTRN	?set_block@@YGXHHHHUREAL_COLOUR@@@Z:PROC	; set_block
EXTRN	?draw_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC	; draw_line
EXTRN	?draw_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC ; draw_half_thick_line
EXTRN	?set_hatched_pattern@@YGXPAI@Z:PROC		; set_hatched_pattern
EXTRN	?set_d3d_transparency_on@@YGXXZ:PROC		; set_d3d_transparency_on
EXTRN	?set_d3d_transparency_off@@YGXXZ:PROC		; set_d3d_transparency_off
EXTRN	?set_d3d_zbuffer_comparison@@YGXH@Z:PROC	; set_d3d_zbuffer_comparison
EXTRN	?set_d3d_culling@@YGXH@Z:PROC			; set_d3d_culling
EXTRN	?set_d3d_texture_wrapping@@YGXHH@Z:PROC		; set_d3d_texture_wrapping
EXTRN	?set_d3d_texture_mag_filtering@@YGXH@Z:PROC	; set_d3d_texture_mag_filtering
EXTRN	?set_d3d_texture_min_filtering@@YGXH@Z:PROC	; set_d3d_texture_min_filtering
EXTRN	?set_d3d_texture_mip_filtering@@YGXH@Z:PROC	; set_d3d_texture_mip_filtering
EXTRN	?set_d3d_plain_renderstate@@YGXXZ:PROC		; set_d3d_plain_renderstate
EXTRN	?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z:PROC ; set_d3d_flat_shaded_textured_renderstate
EXTRN	?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z:PROC ; draw_wbuffered_plain_polygon
EXTRN	?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z:PROC ; draw_wbuffered_flat_shaded_textured_polygon
EXTRN	?get_system_texture_ptr@@YGPAUSCREEN@@H@Z:PROC	; get_system_texture_ptr
EXTRN	?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z:PROC ; flush_screen_texture_graphics
EXTRN	?blit_rgb_alpha_masked_sprite_zero_mask_value@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@@Z:PROC ; blit_rgb_alpha_masked_sprite_zero_mask_value
EXTRN	?blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@PAUSCREEN@@@Z:PROC ; blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture
EXTRN	?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z:PROC ; set_mono_font_type
EXTRN	?set_mono_font_rel_position@@YGXMM@Z:PROC	; set_mono_font_rel_position
EXTRN	?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z:PROC	; set_mono_font_colour
EXTRN	?get_mono_font_char_height@@YGMD@Z:PROC		; get_mono_font_char_height
EXTRN	?print_mono_font_char@@YGXD@Z:PROC		; print_mono_font_char
EXTRN	?get_mono_font_string_width@@YGMPBD@Z:PROC	; get_mono_font_string_width
EXTRN	?print_mono_font_string@@YGXPBD@Z:PROC		; print_mono_font_string
EXTRN	?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z:PROC ; draw_mono_sprite
EXTRN	?create_2d_environment@@YGPAUENV_2D@@XZ:PROC	; create_2d_environment
EXTRN	?destroy_2d_environment@@YGXPAUENV_2D@@@Z:PROC	; destroy_2d_environment
EXTRN	?set_2d_active_environment@@YGXPAUENV_2D@@@Z:PROC ; set_2d_active_environment
EXTRN	?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z:PROC	; set_2d_viewport
EXTRN	?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z:PROC ; set_2d_viewport_origin
EXTRN	?set_2d_window@@YGXPAUENV_2D@@MMMM@Z:PROC	; set_2d_window
EXTRN	?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z:PROC	; set_2d_window_rotation
EXTRN	?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z:PROC ; set_2d_instance_rotation
EXTRN	?set_2d_instance_position@@YGXPAUENV_2D@@MM@Z:PROC ; set_2d_instance_position
EXTRN	?reset_2d_instance@@YGXPAUENV_2D@@@Z:PROC	; reset_2d_instance
EXTRN	?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC	; draw_2d_line
EXTRN	?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC ; draw_2d_half_thick_line
EXTRN	?set_2d_mono_font_position@@YGXMM@Z:PROC	; set_2d_mono_font_position
EXTRN	?get_2d_world_position@@YGXMMPAM0@Z:PROC	; get_2d_world_position
EXTRN	?get_2d_int_screen_coordinates@@YGXMMPAH0@Z:PROC ; get_2d_int_screen_coordinates
EXTRN	?get_2d_float_screen_coordinates@@YGXMMPAM0@Z:PROC ; get_2d_float_screen_coordinates
EXTRN	?get_2d_float_screen_x_coordinate@@YGXMPAM@Z:PROC ; get_2d_float_screen_x_coordinate
EXTRN	?get_2d_float_screen_y_coordinate@@YGXMPAM@Z:PROC ; get_2d_float_screen_y_coordinate
EXTRN	?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z:PROC ; draw_2d_mono_sprite
EXTRN	?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z:PROC	; draw_2d_circle
EXTRN	?draw_2d_hatched_circle@@YGXMMMUREAL_COLOUR@@@Z:PROC ; draw_2d_hatched_circle
EXTRN	?set_3d_active_environment@@YGXPAUENV_3D@@@Z:PROC ; set_3d_active_environment
EXTRN	?begin_3d_scene@@YGHXZ:PROC			; begin_3d_scene
EXTRN	?end_3d_scene@@YGXXZ:PROC			; end_3d_scene
EXTRN	?get_position_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUVEC3D@@PAM1@Z:PROC ; get_position_3d_screen_coordinates
EXTRN	?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z:PROC ; get_3d_terrain_point_data
EXTRN	?get_local_entity_vec3d_magnitude@@YGMPAUENTITY@@W4VEC3D_TYPES@@@Z:PROC ; get_local_entity_vec3d_magnitude
EXTRN	?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_local_entity_target_point
EXTRN	?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z:PROC ; get_local_entity_weapon_count
EXTRN	?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z:PROC ; get_local_entity_weapon_hardpoint_info
EXTRN	?get_local_entity_weapon_available@@YGHPAUENTITY@@H@Z:PROC ; get_local_entity_weapon_available
EXTRN	?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z:PROC ; get_waypoint_display_position
EXTRN	?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z:PROC ; get_simple_session_weather_at_point
EXTRN	?get_local_entity_first_waypoint@@YGPAUENTITY@@PAU1@@Z:PROC ; get_local_entity_first_waypoint
EXTRN	?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z:PROC ; get_local_entity_current_waypoint
EXTRN	?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z:PROC ; set_main_3d_params
EXTRN	?set_pilots_full_screen_params@@YGXH@Z:PROC	; set_pilots_full_screen_params
EXTRN	?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z:PROC	; draw_main_3d_scene
EXTRN	?set_gunship_target@@YGXPAUENTITY@@@Z:PROC	; set_gunship_target
EXTRN	?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z:PROC ; get_target_display_name
EXTRN	?get_range_finder@@YG?AW4rangefinding_system@@XZ:PROC ; get_range_finder
EXTRN	?draw_tsd_terrain_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MH@Z:PROC ; draw_tsd_terrain_map
EXTRN	?draw_tsd_contour_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MHH@Z:PROC ; draw_tsd_contour_map
EXTRN	?Initialise_TSD_render_terrain@@YGXXZ:PROC	; Initialise_TSD_render_terrain
EXTRN	?laser_is_active@@YGHXZ:PROC			; laser_is_active
EXTRN	?eo_is_tracking_point@@YGHXZ:PROC		; eo_is_tracking_point
EXTRN	?eo_start_tracking@@YGXPAUVEC3D@@@Z:PROC	; eo_start_tracking
EXTRN	?get_range_to_target@@YGMXZ:PROC		; get_range_to_target
EXTRN	?is_using_eo_system@@YGHH@Z:PROC		; is_using_eo_system
EXTRN	?eo_is_locked@@YGHXZ:PROC			; eo_is_locked
EXTRN	?set_eo_slave_target@@YGXPAUENTITY@@@Z:PROC	; set_eo_slave_target
EXTRN	?update_pointer_position@@YGXXZ:PROC		; update_pointer_position
EXTRN	?is_holding_left_button@@YGHXZ:PROC		; is_holding_left_button
EXTRN	?is_holding_right_button@@YGHXZ:PROC		; is_holding_right_button
EXTRN	?draw_symbology_to_texture@@YGXPAUSCREEN@@HHHHHHHUREAL_COLOUR@@1P6GXH@Z@Z:PROC ; draw_symbology_to_texture
EXTRN	?get_pfz@@YGPAUpfz@@I@Z:PROC			; get_pfz
EXTRN	?get_nfz@@YGPAUpfz@@I@Z:PROC			; get_nfz
EXTRN	?add_pfz@@YGXPAUVEC3D@@000@Z:PROC		; add_pfz
EXTRN	?add_nfz@@YGXPAUVEC3D@@000@Z:PROC		; add_nfz
EXTRN	?relative_position_to_world_coordinate@@YGXPAUVEC3D@@0QAY02M@Z:PROC ; relative_position_to_world_coordinate
EXTRN	?world_coordinate_to_relative_position@@YGXPAUVEC3D@@0QAY02M@Z:PROC ; world_coordinate_to_relative_position
EXTRN	?get_gunship_target_valid_for_ground_radar@@YGHPAUENTITY@@@Z:PROC ; get_gunship_target_valid_for_ground_radar
EXTRN	?get_target_matches_ground_radar_declutter_criteria@@YGHPAUENTITY@@@Z:PROC ; get_target_matches_ground_radar_declutter_criteria
EXTRN	?update_common_ground_radar@@YGXH@Z:PROC	; update_common_ground_radar
EXTRN	?ground_radar_is_active@@YGHXZ:PROC		; ground_radar_is_active
EXTRN	?get_gunship_target_valid_for_air_radar@@YGHPAUENTITY@@@Z:PROC ; get_gunship_target_valid_for_air_radar
EXTRN	?get_target_matches_air_radar_declutter_criteria@@YGHPAUENTITY@@W4ENTITY_SIDES@@@Z:PROC ; get_target_matches_air_radar_declutter_criteria
EXTRN	?air_radar_is_active@@YGHXZ:PROC		; air_radar_is_active
EXTRN	?get_threat_id_number@@YGPADPAUENTITY@@@Z:PROC	; get_threat_id_number
EXTRN	?get_missile_flight_time@@YGMXZ:PROC		; get_missile_flight_time
EXTRN	?current_apache_eo_sensor_damaged@@YGHXZ:PROC	; current_apache_eo_sensor_damaged
EXTRN	?get_apache_display_radar_altitude@@YGHXZ:PROC	; get_apache_display_radar_altitude
EXTRN	?set_apache_lock_target@@YGXH@Z:PROC		; set_apache_lock_target
EXTRN	?get_hydraulic_pressure@@YGMXZ:PROC		; get_hydraulic_pressure
EXTRN	?get_digital_clock_values@@YGXMPAM00@Z:PROC	; get_digital_clock_values
EXTRN	?copy_export_mfd@@YGXPAUSCREEN@@0@Z:PROC	; copy_export_mfd
EXTRN	__ftol2_sse:PROC
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?random_number_seed@@3HA:DWORD			; random_number_seed
EXTRN	?sine_table@@3PAMA:BYTE				; sine_table
EXTRN	?d3d_can_render_to_texture@@3HA:DWORD		; d3d_can_render_to_texture
EXTRN	?sys_col_red@@3UREAL_COLOUR@@A:DWORD		; sys_col_red
EXTRN	?sys_col_white@@3UREAL_COLOUR@@A:DWORD		; sys_col_white
EXTRN	?video_screen@@3PAUSCREEN@@A:DWORD		; video_screen
EXTRN	?active_screen@@3PAUSCREEN@@A:DWORD		; active_screen
EXTRN	?command_line_dynamics_engine_startup@@3HA:DWORD ; command_line_dynamics_engine_startup
EXTRN	?command_line_mouse_look@@3HA:DWORD		; command_line_mouse_look
EXTRN	?command_line_high_res_mfd@@3HA:DWORD		; command_line_high_res_mfd
EXTRN	?command_line_tsd_enemy_colours@@3HA:DWORD	; command_line_tsd_enemy_colours
EXTRN	?command_line_colour_mfd@@3HA:DWORD		; command_line_colour_mfd
EXTRN	?command_line_export_mfd@@3HA:DWORD		; command_line_export_mfd
EXTRN	?global_mfd_size@@3MA:DWORD			; global_mfd_size
EXTRN	?graphics_files@@3PAUFILE_DATA@@A:BYTE		; graphics_files
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?global_options@@3UGLOBAL_OPTIONS_DATA@@A:BYTE	; global_options
EXTRN	?world_map@@3UWORLD_MAP_DATA@@A:BYTE		; world_map
EXTRN	?overload_invalid_list_type_message@@3PBDB:DWORD ; overload_invalid_list_type_message
EXTRN	?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_first_child
EXTRN	?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_parent
EXTRN	?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_child_succ
EXTRN	?fn_get_local_entity_attitude_matrix_ptr@@3PAP6GPAY122MPAUENTITY@@@ZA:BYTE ; fn_get_local_entity_attitude_matrix_ptr
EXTRN	?overload_invalid_char_type_message@@3PBDB:DWORD ; overload_invalid_char_type_message
EXTRN	?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA:BYTE ; fn_get_local_entity_char_value
EXTRN	?draw_eo_3d_scene@@3HA:DWORD			; draw_eo_3d_scene
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA:BYTE ; fn_get_local_entity_vec3d_ptr
EXTRN	?gunship_entity@@3PAUENTITY@@A:DWORD		; gunship_entity
EXTRN	?pilot_entity@@3PAUENTITY@@A:DWORD		; pilot_entity
EXTRN	?session_entity@@3PAUENTITY@@A:DWORD		; session_entity
EXTRN	?full_screen_width@@3MA:DWORD			; full_screen_width
EXTRN	?full_screen_height@@3MA:DWORD			; full_screen_height
EXTRN	?full_screen_y_min@@3MA:DWORD			; full_screen_y_min
EXTRN	?full_screen_x_mid@@3MA:DWORD			; full_screen_x_mid
EXTRN	?full_screen_y_mid@@3MA:DWORD			; full_screen_y_mid
EXTRN	?full_screen_x_max@@3MA:DWORD			; full_screen_x_max
EXTRN	?full_screen_y_max@@3MA:DWORD			; full_screen_y_max
EXTRN	?main_3d_env@@3PAUENV_3D@@A:DWORD		; main_3d_env
EXTRN	?main_vp@@3UVIEWPOINT@@A:BYTE			; main_vp
EXTRN	?view_mode@@3W4VIEW_MODES@@A:DWORD		; view_mode
EXTRN	?tsd_render_mode@@3W4TSD_RENDER_MODES@@A:DWORD	; tsd_render_mode
EXTRN	?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A:DWORD ; target_acquisition_system
EXTRN	?fire_extinguisher_used@@3HA:DWORD		; fire_extinguisher_used
EXTRN	?eo_low_light@@3HA:DWORD			; eo_low_light
EXTRN	?eo_ground_stabilised@@3HA:DWORD		; eo_ground_stabilised
EXTRN	?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A:DWORD ; eo_sensor
EXTRN	?eo_azimuth@@3MA:DWORD				; eo_azimuth
EXTRN	?eo_max_azimuth@@3MA:DWORD			; eo_max_azimuth
EXTRN	?eo_elevation@@3MA:DWORD			; eo_elevation
EXTRN	?eo_min_elevation@@3MA:DWORD			; eo_min_elevation
EXTRN	?eo_vp@@3UVIEWPOINT@@A:BYTE			; eo_vp
EXTRN	?display_mfd_layout_grid@@3HA:DWORD		; display_mfd_layout_grid
EXTRN	?large_eo_3d_texture_screen@@3PAUSCREEN@@A:DWORD ; large_eo_3d_texture_screen
EXTRN	?small_eo_3d_texture_screen@@3PAUSCREEN@@A:DWORD ; small_eo_3d_texture_screen
EXTRN	?pointer_position_x@@3MA:DWORD			; pointer_position_x
EXTRN	?pointer_position_y@@3MA:DWORD			; pointer_position_y
EXTRN	?clicked_position_x@@3MA:DWORD			; clicked_position_x
EXTRN	?clicked_position_y@@3MA:DWORD			; clicked_position_y
EXTRN	?current_pfz@@3IA:DWORD				; current_pfz
EXTRN	?next_free_pfz@@3IA:DWORD			; next_free_pfz
EXTRN	?next_free_nfz@@3IA:DWORD			; next_free_nfz
EXTRN	?ground_radar@@3URADAR_PARAMS@@A:BYTE		; ground_radar
EXTRN	?air_radar@@3URADAR_PARAMS@@A:BYTE		; air_radar
EXTRN	?radar_clutter_hatch_pattern@@3PAIA:BYTE	; radar_clutter_hatch_pattern
EXTRN	?large_display_target_symbol_selected_target@@3QBDB:BYTE ; large_display_target_symbol_selected_target
EXTRN	?large_display_target_symbol_selected_target_mask@@3QBDB:BYTE ; large_display_target_symbol_selected_target_mask
EXTRN	?small_display_target_symbol_selected_target@@3QBDB:BYTE ; small_display_target_symbol_selected_target
EXTRN	?small_display_target_symbol_selected_target_mask@@3QBDB:BYTE ; small_display_target_symbol_selected_target_mask
EXTRN	?large_display_target_symbols_los@@3PAPBDA:BYTE	; large_display_target_symbols_los
EXTRN	?large_display_target_symbols_los_mask@@3PAPBDA:BYTE ; large_display_target_symbols_los_mask
EXTRN	?large_display_target_symbols_no_los@@3PAPBDA:BYTE ; large_display_target_symbols_no_los
EXTRN	?large_display_target_symbols_no_los_mask@@3PAPBDA:BYTE ; large_display_target_symbols_no_los_mask
EXTRN	?small_display_target_symbols_los@@3PAPBDA:BYTE	; small_display_target_symbols_los
EXTRN	?small_display_target_symbols_los_mask@@3PAPBDA:BYTE ; small_display_target_symbols_los_mask
EXTRN	?small_display_target_symbols_no_los@@3PAPBDA:BYTE ; small_display_target_symbols_no_los
EXTRN	?small_display_target_symbols_no_los_mask@@3PAPBDA:BYTE ; small_display_target_symbols_no_los_mask
EXTRN	?weapon_lock_type@@3W4WEAPON_LOCK_TYPES@@A:DWORD ; weapon_lock_type
EXTRN	?rocket_salvo_size@@3HA:DWORD			; rocket_salvo_size
EXTRN	?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A:DWORD	; apache_damage
EXTRN	?apache_flir@@3UEO_PARAMS@@A:BYTE		; apache_flir
EXTRN	?apache_dtv@@3UEO_PARAMS@@A:BYTE		; apache_dtv
EXTRN	?apache_dvo@@3UEO_PARAMS@@A:BYTE		; apache_dvo
EXTRN	?APACHE_RADAR_SCAN_RANGE_500@@3MA:DWORD		; APACHE_RADAR_SCAN_RANGE_500
EXTRN	?APACHE_RADAR_SCAN_RANGE_1000@@3MA:DWORD	; APACHE_RADAR_SCAN_RANGE_1000
EXTRN	?APACHE_RADAR_SCAN_RANGE_2000@@3MA:DWORD	; APACHE_RADAR_SCAN_RANGE_2000
EXTRN	?APACHE_RADAR_SCAN_RANGE_4000@@3MA:DWORD	; APACHE_RADAR_SCAN_RANGE_4000
EXTRN	?APACHE_RADAR_SCAN_RANGE_8000@@3MA:DWORD	; APACHE_RADAR_SCAN_RANGE_8000
EXTRN	?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A:DWORD ; comanche_damage
EXTRN	?base_cockpit_graphics_file@@3W4GRAPHICS_FILE_SPECIFIERS@@A:DWORD ; base_cockpit_graphics_file
EXTRN	?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A:DWORD ; current_flight_dynamics
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?lhs_mfd_mode@@3W4MFD_MODES@@A DD 01H DUP (?)		; lhs_mfd_mode
?rhs_mfd_mode@@3W4MFD_MODES@@A DD 01H DUP (?)		; rhs_mfd_mode
?cpg_lhs_mfd_mode@@3W4MFD_MODES@@A DD 01H DUP (?)	; cpg_lhs_mfd_mode
?cpg_rhs_mfd_mode@@3W4MFD_MODES@@A DD 01H DUP (?)	; cpg_rhs_mfd_mode
?ort_mode@@3W4MFD_MODES@@A DD 01H DUP (?)		; ort_mode
?mfd_colours@@3PAUREAL_COLOUR@@A DD 014H DUP (?)	; mfd_colours
?text_display_colours@@3PAUREAL_COLOUR@@A DD 02H DUP (?) ; text_display_colours
?draw_line_func@@3P6GXMMMMUREAL_COLOUR@@@ZA DD 01H DUP (?) ; draw_line_func
?mfd_env@@3PAUENV_2D@@A DD 01H DUP (?)			; mfd_env
?mfd_viewport_size@@3MA DD 01H DUP (?)			; mfd_viewport_size
?mfd_viewport_x_org@@3MA DD 01H DUP (?)			; mfd_viewport_x_org
?mfd_viewport_y_org@@3MA DD 01H DUP (?)			; mfd_viewport_y_org
?mfd_viewport_x_min@@3MA DD 01H DUP (?)			; mfd_viewport_x_min
?mfd_viewport_y_min@@3MA DD 01H DUP (?)			; mfd_viewport_y_min
?mfd_viewport_x_max@@3MA DD 01H DUP (?)			; mfd_viewport_x_max
?mfd_viewport_y_max@@3MA DD 01H DUP (?)			; mfd_viewport_y_max
?draw_large_mfd@@3HA DD 01H DUP (?)			; draw_large_mfd
?mfd_texture_size@@3HA DD 01H DUP (?)			; mfd_texture_size
?mfd_viewport_texture_x_org@@3HA DD 01H DUP (?)		; mfd_viewport_texture_x_org
?mfd_viewport_texture_y_org@@3HA DD 01H DUP (?)		; mfd_viewport_texture_y_org
?i_translate_3d@@3MA DD 01H DUP (?)			; i_translate_3d
?j_translate_3d@@3MA DD 01H DUP (?)			; j_translate_3d
?i_scale_3d@@3MA DD 01H DUP (?)				; i_scale_3d
?j_scale_3d@@3MA DD 01H DUP (?)				; j_scale_3d
?lhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; lhs_mfd_texture_screen
?rhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; rhs_mfd_texture_screen
?cpg_lhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; cpg_lhs_mfd_texture_screen
?cpg_rhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; cpg_rhs_mfd_texture_screen
?ort_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; ort_texture_screen
?lhs_overlaid_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; lhs_overlaid_mfd_texture_screen
?rhs_overlaid_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; rhs_overlaid_mfd_texture_screen
?alnum_display_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; alnum_display_screen
?eo_3d_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; eo_3d_texture_screen
?off_mfd_colour@@3UREAL_COLOUR@@A DD 01H DUP (?)	; off_mfd_colour
?clear_mfd_colour@@3UREAL_COLOUR@@A DD 01H DUP (?)	; clear_mfd_colour
?clear_green_mfd_colour@@3UREAL_COLOUR@@A DD 01H DUP (?) ; clear_green_mfd_colour
?radar_zoomed@@3HA DD 01H DUP (?)			; radar_zoomed
?pilot_tsd_ase_range@@3MA DD 01H DUP (?)		; pilot_tsd_ase_range
?cpg_tsd_ase_range@@3MA DD 01H DUP (?)			; cpg_tsd_ase_range
?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A DD 01H DUP (?) ; pilot_tsd_declutter_level
?cpg_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A DD 01H DUP (?) ; cpg_tsd_declutter_level
?pilot_tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A DD 01H DUP (?) ; pilot_tsd_underlay
?cpg_tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A DD 01H DUP (?) ; cpg_tsd_underlay
?tsd_tads_underlay_active@@3FA DW 01H DUP (?)		; tsd_tads_underlay_active
	ALIGN	4

?tsd_threat_line_flash_timer@@3MA DD 01H DUP (?)	; tsd_threat_line_flash_timer
?tsd_draw_threat_line_status@@3HA DD 01H DUP (?)	; tsd_draw_threat_line_status
?tads_lase_flash_timer@@3MA DD 01H DUP (?)		; tads_lase_flash_timer
?tads_display_lase_status@@3HA DD 01H DUP (?)		; tads_display_lase_status
?ase_threat_line_flash_timer@@3MA DD 01H DUP (?)	; ase_threat_line_flash_timer
?ase_draw_threat_line_status@@3HA DD 01H DUP (?)	; ase_draw_threat_line_status
?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A DB 01cH DUP (?) ; weapon_sprite
?weapon_sprite_data@@3PAEA DD 01H DUP (?)		; weapon_sprite_data
?weapon_mask_data@@3PAEA DD 01H DUP (?)			; weapon_mask_data
?weapon_x_offset@@3HA DD 01H DUP (?)			; weapon_x_offset
?weapon_y_offset@@3HA DD 01H DUP (?)			; weapon_y_offset
?weapon_draw_on_texture@@3HA DD 01H DUP (?)		; weapon_draw_on_texture
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c2180000
CONST	SEGMENT
__real@c2180000 DD 0c2180000r			; -38
CONST	ENDS
;	COMDAT __real@c1c80000
CONST	SEGMENT
__real@c1c80000 DD 0c1c80000r			; -25
CONST	ENDS
;	COMDAT __real@c1980000
CONST	SEGMENT
__real@c1980000 DD 0c1980000r			; -19
CONST	ENDS
;	COMDAT __real@c1800000
CONST	SEGMENT
__real@c1800000 DD 0c1800000r			; -16
CONST	ENDS
;	COMDAT __real@c1500000
CONST	SEGMENT
__real@c1500000 DD 0c1500000r			; -13
CONST	ENDS
;	COMDAT __real@c1400000
CONST	SEGMENT
__real@c1400000 DD 0c1400000r			; -12
CONST	ENDS
;	COMDAT __real@c1000000
CONST	SEGMENT
__real@c1000000 DD 0c1000000r			; -8
CONST	ENDS
;	COMDAT __real@c0e00000
CONST	SEGMENT
__real@c0e00000 DD 0c0e00000r			; -7
CONST	ENDS
;	COMDAT __real@c0c00000
CONST	SEGMENT
__real@c0c00000 DD 0c0c00000r			; -6
CONST	ENDS
;	COMDAT __real@c0a00000
CONST	SEGMENT
__real@c0a00000 DD 0c0a00000r			; -5
CONST	ENDS
;	COMDAT __real@c08f400000000000
CONST	SEGMENT
__real@c08f400000000000 DQ 0c08f400000000000r	; -1000
CONST	ENDS
;	COMDAT __real@c0800000
CONST	SEGMENT
__real@c0800000 DD 0c0800000r			; -4
CONST	ENDS
;	COMDAT __real@c0400000
CONST	SEGMENT
__real@c0400000 DD 0c0400000r			; -3
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bff199999999999a
CONST	SEGMENT
__real@bff199999999999a DQ 0bff199999999999ar	; -1.1
CONST	ENDS
;	COMDAT __real@bfe6666673333333
CONST	SEGMENT
__real@bfe6666673333333 DQ 0bfe6666673333333r	; -0.7
CONST	ENDS
;	COMDAT __real@bfe3333333333333
CONST	SEGMENT
__real@bfe3333333333333 DQ 0bfe3333333333333r	; -0.6
CONST	ENDS
;	COMDAT __real@bfe0c15236000000
CONST	SEGMENT
__real@bfe0c15236000000 DQ 0bfe0c15236000000r	; -0.523599
CONST	ENDS
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
CONST	ENDS
;	COMDAT __real@bfd999999999999a
CONST	SEGMENT
__real@bfd999999999999a DQ 0bfd999999999999ar	; -0.4
CONST	ENDS
;	COMDAT __real@bfd6666666666666
CONST	SEGMENT
__real@bfd6666666666666 DQ 0bfd6666666666666r	; -0.35
CONST	ENDS
;	COMDAT __real@bfc3333333333333
CONST	SEGMENT
__real@bfc3333333333333 DQ 0bfc3333333333333r	; -0.15
CONST	ENDS
;	COMDAT __real@bfb999999999999a
CONST	SEGMENT
__real@bfb999999999999a DQ 0bfb999999999999ar	; -0.1
CONST	ENDS
;	COMDAT __real@bf8ccccd
CONST	SEGMENT
__real@bf8ccccd DD 0bf8ccccdr			; -1.1
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf7ae148
CONST	SEGMENT
__real@bf7ae148 DD 0bf7ae148r			; -0.98
CONST	ENDS
;	COMDAT __real@bf79999a
CONST	SEGMENT
__real@bf79999a DD 0bf79999ar			; -0.975
CONST	ENDS
;	COMDAT __real@bf7851ec
CONST	SEGMENT
__real@bf7851ec DD 0bf7851ecr			; -0.97
CONST	ENDS
;	COMDAT __real@bf770a3d
CONST	SEGMENT
__real@bf770a3d DD 0bf770a3dr			; -0.965
CONST	ENDS
;	COMDAT __real@bf73d70a
CONST	SEGMENT
__real@bf73d70a DD 0bf73d70ar			; -0.9525
CONST	ENDS
;	COMDAT __real@bf733333
CONST	SEGMENT
__real@bf733333 DD 0bf733333r			; -0.95
CONST	ENDS
;	COMDAT __real@bf6e147b
CONST	SEGMENT
__real@bf6e147b DD 0bf6e147br			; -0.93
CONST	ENDS
;	COMDAT __real@bf68f5c3
CONST	SEGMENT
__real@bf68f5c3 DD 0bf68f5c3r			; -0.91
CONST	ENDS
;	COMDAT __real@bf666666
CONST	SEGMENT
__real@bf666666 DD 0bf666666r			; -0.9
CONST	ENDS
;	COMDAT __real@bf600000
CONST	SEGMENT
__real@bf600000 DD 0bf600000r			; -0.875
CONST	ENDS
;	COMDAT __real@bf59999a
CONST	SEGMENT
__real@bf59999a DD 0bf59999ar			; -0.85
CONST	ENDS
;	COMDAT __real@bf58f5c3
CONST	SEGMENT
__real@bf58f5c3 DD 0bf58f5c3r			; -0.8475
CONST	ENDS
;	COMDAT __real@bf547ae1
CONST	SEGMENT
__real@bf547ae1 DD 0bf547ae1r			; -0.83
CONST	ENDS
;	COMDAT __real@bf533333
CONST	SEGMENT
__real@bf533333 DD 0bf533333r			; -0.825
CONST	ENDS
;	COMDAT __real@bf4ccccd
CONST	SEGMENT
__real@bf4ccccd DD 0bf4ccccdr			; -0.8
CONST	ENDS
;	COMDAT __real@bf4b851f
CONST	SEGMENT
__real@bf4b851f DD 0bf4b851fr			; -0.795
CONST	ENDS
;	COMDAT __real@bf4ac083
CONST	SEGMENT
__real@bf4ac083 DD 0bf4ac083r			; -0.792
CONST	ENDS
;	COMDAT __real@bf466666
CONST	SEGMENT
__real@bf466666 DD 0bf466666r			; -0.775
CONST	ENDS
;	COMDAT __real@bf400000
CONST	SEGMENT
__real@bf400000 DD 0bf400000r			; -0.75
CONST	ENDS
;	COMDAT __real@bf3d70a4
CONST	SEGMENT
__real@bf3d70a4 DD 0bf3d70a4r			; -0.74
CONST	ENDS
;	COMDAT __real@bf3851ec
CONST	SEGMENT
__real@bf3851ec DD 0bf3851ecr			; -0.72
CONST	ENDS
;	COMDAT __real@bf333334
CONST	SEGMENT
__real@bf333334 DD 0bf333334r			; -0.7
CONST	ENDS
;	COMDAT __real@bf333333
CONST	SEGMENT
__real@bf333333 DD 0bf333333r			; -0.7
CONST	ENDS
;	COMDAT __real@bf2ccccd
CONST	SEGMENT
__real@bf2ccccd DD 0bf2ccccdr			; -0.675
CONST	ENDS
;	COMDAT __real@bf266666
CONST	SEGMENT
__real@bf266666 DD 0bf266666r			; -0.65
CONST	ENDS
;	COMDAT __real@bf23d70b
CONST	SEGMENT
__real@bf23d70b DD 0bf23d70br			; -0.64
CONST	ENDS
;	COMDAT __real@bf2147ae
CONST	SEGMENT
__real@bf2147ae DD 0bf2147aer			; -0.63
CONST	ENDS
;	COMDAT __real@bf19999a
CONST	SEGMENT
__real@bf19999a DD 0bf19999ar			; -0.6
CONST	ENDS
;	COMDAT __real@bf147ae2
CONST	SEGMENT
__real@bf147ae2 DD 0bf147ae2r			; -0.58
CONST	ENDS
;	COMDAT __real@bf0ccccd
CONST	SEGMENT
__real@bf0ccccd DD 0bf0ccccdr			; -0.55
CONST	ENDS
;	COMDAT __real@bf060a92
CONST	SEGMENT
__real@bf060a92 DD 0bf060a92r			; -0.523599
CONST	ENDS
;	COMDAT __real@bf051eb9
CONST	SEGMENT
__real@bf051eb9 DD 0bf051eb9r			; -0.52
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@beeb851f
CONST	SEGMENT
__real@beeb851f DD 0beeb851fr			; -0.46
CONST	ENDS
;	COMDAT __real@bee66666
CONST	SEGMENT
__real@bee66666 DD 0bee66666r			; -0.45
CONST	ENDS
;	COMDAT __real@bedf66f3
CONST	SEGMENT
__real@bedf66f3 DD 0bedf66f3r			; -0.436332
CONST	ENDS
;	COMDAT __real@bed70a3d
CONST	SEGMENT
__real@bed70a3d DD 0bed70a3dr			; -0.42
CONST	ENDS
;	COMDAT __real@becccccd
CONST	SEGMENT
__real@becccccd DD 0becccccdr			; -0.4
CONST	ENDS
;	COMDAT __real@beb33333
CONST	SEGMENT
__real@beb33333 DD 0beb33333r			; -0.35
CONST	ENDS
;	COMDAT __real@beb2b8c2
CONST	SEGMENT
__real@beb2b8c2 DD 0beb2b8c2r			; -0.349066
CONST	ENDS
;	COMDAT __real@beae147b
CONST	SEGMENT
__real@beae147b DD 0beae147br			; -0.34
CONST	ENDS
;	COMDAT __real@be99999a
CONST	SEGMENT
__real@be99999a DD 0be99999ar			; -0.3
CONST	ENDS
;	COMDAT __real@be8f5c29
CONST	SEGMENT
__real@be8f5c29 DD 0be8f5c29r			; -0.28
CONST	ENDS
;	COMDAT __real@be8a3d71
CONST	SEGMENT
__real@be8a3d71 DD 0be8a3d71r			; -0.27
CONST	ENDS
;	COMDAT __real@be860a92
CONST	SEGMENT
__real@be860a92 DD 0be860a92r			; -0.261799
CONST	ENDS
;	COMDAT __real@be800000
CONST	SEGMENT
__real@be800000 DD 0be800000r			; -0.25
CONST	ENDS
;	COMDAT __real@be666666
CONST	SEGMENT
__real@be666666 DD 0be666666r			; -0.225
CONST	ENDS
;	COMDAT __real@be6147ae
CONST	SEGMENT
__real@be6147ae DD 0be6147aer			; -0.22
CONST	ENDS
;	COMDAT __real@be4ccccd
CONST	SEGMENT
__real@be4ccccd DD 0be4ccccdr			; -0.2
CONST	ENDS
;	COMDAT __real@be428f5c
CONST	SEGMENT
__real@be428f5c DD 0be428f5cr			; -0.19
CONST	ENDS
;	COMDAT __real@be35c28f
CONST	SEGMENT
__real@be35c28f DD 0be35c28fr			; -0.1775
CONST	ENDS
;	COMDAT __real@be333333
CONST	SEGMENT
__real@be333333 DD 0be333333r			; -0.175
CONST	ENDS
;	COMDAT __real@be32b8c2
CONST	SEGMENT
__real@be32b8c2 DD 0be32b8c2r			; -0.174533
CONST	ENDS
;	COMDAT __real@be23d70a
CONST	SEGMENT
__real@be23d70a DD 0be23d70ar			; -0.16
CONST	ENDS
;	COMDAT __real@be19999a
CONST	SEGMENT
__real@be19999a DD 0be19999ar			; -0.15
CONST	ENDS
;	COMDAT __real@be0f5c29
CONST	SEGMENT
__real@be0f5c29 DD 0be0f5c29r			; -0.14
CONST	ENDS
;	COMDAT __real@bdcccccd
CONST	SEGMENT
__real@bdcccccd DD 0bdcccccdr			; -0.1
CONST	ENDS
;	COMDAT __real@bdb851ec
CONST	SEGMENT
__real@bdb851ec DD 0bdb851ecr			; -0.09
CONST	ENDS
;	COMDAT __real@bdb2b8c2
CONST	SEGMENT
__real@bdb2b8c2 DD 0bdb2b8c2r			; -0.0872665
CONST	ENDS
;	COMDAT __real@bda3d70a
CONST	SEGMENT
__real@bda3d70a DD 0bda3d70ar			; -0.08
CONST	ENDS
;	COMDAT __real@bd99999a
CONST	SEGMENT
__real@bd99999a DD 0bd99999ar			; -0.075
CONST	ENDS
;	COMDAT __real@bd8f5c29
CONST	SEGMENT
__real@bd8f5c29 DD 0bd8f5c29r			; -0.07
CONST	ENDS
;	COMDAT __real@bd4ccccd
CONST	SEGMENT
__real@bd4ccccd DD 0bd4ccccdr			; -0.05
CONST	ENDS
;	COMDAT __real@bd23d70a
CONST	SEGMENT
__real@bd23d70a DD 0bd23d70ar			; -0.04
CONST	ENDS
;	COMDAT __real@bcf5c28f
CONST	SEGMENT
__real@bcf5c28f DD 0bcf5c28fr			; -0.03
CONST	ENDS
;	COMDAT __real@bc23d70a
CONST	SEGMENT
__real@bc23d70a DD 0bc23d70ar			; -0.01
CONST	ENDS
;	COMDAT __real@80000000
CONST	SEGMENT
__real@80000000 DD 080000000r			; -0
CONST	ENDS
;	COMDAT __real@49742400
CONST	SEGMENT
__real@49742400 DD 049742400r			; 1e+06
CONST	ENDS
;	COMDAT __real@46c35000
CONST	SEGMENT
__real@46c35000 DD 046c35000r			; 25000
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@459c4000
CONST	SEGMENT
__real@459c4000 DD 0459c4000r			; 5000
CONST	ENDS
;	COMDAT __real@44fa0000
CONST	SEGMENT
__real@44fa0000 DD 044fa0000r			; 2000
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@43e30000
CONST	SEGMENT
__real@43e30000 DD 043e30000r			; 454
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@437fffbe
CONST	SEGMENT
__real@437fffbe DD 0437fffber			; 255.999
CONST	ENDS
;	COMDAT __real@43650000
CONST	SEGMENT
__real@43650000 DD 043650000r			; 229
CONST	ENDS
;	COMDAT __real@4344d9b3
CONST	SEGMENT
__real@4344d9b3 DD 04344d9b3r			; 196.85
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@427ffefa
CONST	SEGMENT
__real@427ffefa DD 0427ffefar			; 63.999
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@420d6bd4
CONST	SEGMENT
__real@420d6bd4 DD 0420d6bd4r			; 35.3553
CONST	ENDS
;	COMDAT __real@42000000
CONST	SEGMENT
__real@42000000 DD 042000000r			; 32
CONST	ENDS
;	COMDAT __real@41900000
CONST	SEGMENT
__real@41900000 DD 041900000r			; 18
CONST	ENDS
;	COMDAT __real@41600000
CONST	SEGMENT
__real@41600000 DD 041600000r			; 14
CONST	ENDS
;	COMDAT __real@414ba583
CONST	SEGMENT
__real@414ba583 DD 0414ba583r			; 12.7279
CONST	ENDS
;	COMDAT __real@4121999a
CONST	SEGMENT
__real@4121999a DD 04121999ar			; 10.1
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40f86a0000000000
CONST	SEGMENT
__real@40f86a0000000000 DQ 040f86a0000000000r	; 100000
CONST	ENDS
;	COMDAT __real@40e48962
CONST	SEGMENT
__real@40e48962 DD 040e48962r			; 7.14177
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40a3880000000000
CONST	SEGMENT
__real@40a3880000000000 DQ 040a3880000000000r	; 2500
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@409f400000000000
CONST	SEGMENT
__real@409f400000000000 DQ 0409f400000000000r	; 2000
CONST	ENDS
;	COMDAT __real@4097700000000000
CONST	SEGMENT
__real@4097700000000000 DQ 04097700000000000r	; 1500
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@40845f306446f9b4
CONST	SEGMENT
__real@40845f306446f9b4 DQ 040845f306446f9b4r	; 651.899
CONST	ENDS
;	COMDAT __real@4084000000000000
CONST	SEGMENT
__real@4084000000000000 DQ 04084000000000000r	; 640
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@407e000000000000
CONST	SEGMENT
__real@407e000000000000 DQ 0407e000000000000r	; 480
CONST	ENDS
;	COMDAT __real@4072c00000000000
CONST	SEGMENT
__real@4072c00000000000 DQ 04072c00000000000r	; 300
CONST	ENDS
;	COMDAT __real@4069000000000000
CONST	SEGMENT
__real@4069000000000000 DQ 04069000000000000r	; 200
CONST	ENDS
;	COMDAT __real@40666666
CONST	SEGMENT
__real@40666666 DD 040666666r			; 3.6
CONST	ENDS
;	COMDAT __real@4060000000000000
CONST	SEGMENT
__real@4060000000000000 DQ 04060000000000000r	; 128
CONST	ENDS
;	COMDAT __real@405fc00000000000
CONST	SEGMENT
__real@405fc00000000000 DQ 0405fc00000000000r	; 127
CONST	ENDS
;	COMDAT __real@405f400000000000
CONST	SEGMENT
__real@405f400000000000 DQ 0405f400000000000r	; 125
CONST	ENDS
;	COMDAT __real@405e000000000000
CONST	SEGMENT
__real@405e000000000000 DQ 0405e000000000000r	; 120
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@4051f948
CONST	SEGMENT
__real@4051f948 DD 04051f948r			; 3.28084
CONST	ENDS
;	COMDAT __real@4050400000000000
CONST	SEGMENT
__real@4050400000000000 DQ 04050400000000000r	; 65
CONST	ENDS
;	COMDAT __real@404ca5dc00000000
CONST	SEGMENT
__real@404ca5dc00000000 DQ 0404ca5dc00000000r	; 57.2958
CONST	ENDS
;	COMDAT __real@4040800000000000
CONST	SEGMENT
__real@4040800000000000 DQ 04040800000000000r	; 33
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@4037000000000000
CONST	SEGMENT
__real@4037000000000000 DQ 04037000000000000r	; 23
CONST	ENDS
;	COMDAT __real@403504e6
CONST	SEGMENT
__real@403504e6 DD 0403504e6r			; 2.82842
CONST	ENDS
;	COMDAT __real@4034000000000000
CONST	SEGMENT
__real@4034000000000000 DQ 04034000000000000r	; 20
CONST	ENDS
;	COMDAT __real@402a000000000000
CONST	SEGMENT
__real@402a000000000000 DQ 0402a000000000000r	; 13
CONST	ENDS
;	COMDAT __real@4026eb1686b280e6
CONST	SEGMENT
__real@4026eb1686b280e6 DQ 04026eb1686b280e6r	; 11.4592
CONST	ENDS
;	COMDAT __real@4026000000000000
CONST	SEGMENT
__real@4026000000000000 DQ 04026000000000000r	; 11
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@401c000000000000
CONST	SEGMENT
__real@401c000000000000 DQ 0401c000000000000r	; 7
CONST	ENDS
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT __real@4016eb167e7d81e3
CONST	SEGMENT
__real@4016eb167e7d81e3 DQ 04016eb167e7d81e3r	; 5.72958
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@400d1eb8
CONST	SEGMENT
__real@400d1eb8 DD 0400d1eb8r			; 2.205
CONST	ENDS
;	COMDAT __real@400c4a32
CONST	SEGMENT
__real@400c4a32 DD 0400c4a32r			; 2.19203
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff85d84
CONST	SEGMENT
__real@3ff85d84 DD 03ff85d84r			; 1.94035
CONST	ENDS
;	COMDAT __real@3ff8000000000000
CONST	SEGMENT
__real@3ff8000000000000 DQ 03ff8000000000000r	; 1.5
CONST	ENDS
;	COMDAT __real@3ff5d3d193333333
CONST	SEGMENT
__real@3ff5d3d193333333 DQ 03ff5d3d193333333r	; 1.36421
CONST	ENDS
;	COMDAT __real@3ff199999999999a
CONST	SEGMENT
__real@3ff199999999999a DQ 03ff199999999999ar	; 1.1
CONST	ENDS
;	COMDAT __real@3ff0c09b332ccccd
CONST	SEGMENT
__real@3ff0c09b332ccccd DQ 03ff0c09b332ccccdr	; 1.04702
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fec000000000000
CONST	SEGMENT
__real@3fec000000000000 DQ 03fec000000000000r	; 0.875
CONST	ENDS
;	COMDAT __real@3feb333333333333
CONST	SEGMENT
__real@3feb333333333333 DQ 03feb333333333333r	; 0.85
CONST	ENDS
;	COMDAT __real@3fe999999999999a
CONST	SEGMENT
__real@3fe999999999999a DQ 03fe999999999999ar	; 0.8
CONST	ENDS
;	COMDAT __real@3fe0c15236000000
CONST	SEGMENT
__real@3fe0c15236000000 DQ 03fe0c15236000000r	; 0.523599
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd3333333333333
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
CONST	ENDS
;	COMDAT __real@3fd1111111111111
CONST	SEGMENT
__real@3fd1111111111111 DQ 03fd1111111111111r	; 0.266667
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fcccccd
CONST	SEGMENT
__real@3fcccccd DD 03fcccccdr			; 1.6
CONST	ENDS
;	COMDAT __real@3fcc28f5c28f5c29
CONST	SEGMENT
__real@3fcc28f5c28f5c29 DQ 03fcc28f5c28f5c29r	; 0.22
CONST	ENDS
;	COMDAT __real@3fc999999999999a
CONST	SEGMENT
__real@3fc999999999999a DQ 03fc999999999999ar	; 0.2
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3fc70a3d70a3d70a
CONST	SEGMENT
__real@3fc70a3d70a3d70a DQ 03fc70a3d70a3d70ar	; 0.18
CONST	ENDS
;	COMDAT __real@3fc6571848000000
CONST	SEGMENT
__real@3fc6571848000000 DQ 03fc6571848000000r	; 0.174533
CONST	ENDS
;	COMDAT __real@3fc3333333333333
CONST	SEGMENT
__real@3fc3333333333333 DQ 03fc3333333333333r	; 0.15
CONST	ENDS
;	COMDAT __real@3fc1111111111111
CONST	SEGMENT
__real@3fc1111111111111 DQ 03fc1111111111111r	; 0.133333
CONST	ENDS
;	COMDAT __real@3fc0000000000000
CONST	SEGMENT
__real@3fc0000000000000 DQ 03fc0000000000000r	; 0.125
CONST	ENDS
;	COMDAT __real@3fbc28f5c28f5c29
CONST	SEGMENT
__real@3fbc28f5c28f5c29 DQ 03fbc28f5c28f5c29r	; 0.11
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3fb3333333333333
CONST	SEGMENT
__real@3fb3333333333333 DQ 03fb3333333333333r	; 0.075
CONST	ENDS
;	COMDAT __real@3faeb851eb851eb8
CONST	SEGMENT
__real@3faeb851eb851eb8 DQ 03faeb851eb851eb8r	; 0.06
CONST	ENDS
;	COMDAT __real@3fae9e8d
CONST	SEGMENT
__real@3fae9e8d DD 03fae9e8dr			; 1.36421
CONST	ENDS
;	COMDAT __real@3fa999999999999a
CONST	SEGMENT
__real@3fa999999999999a DQ 03fa999999999999ar	; 0.05
CONST	ENDS
;	COMDAT __real@3fa47ae147ae147b
CONST	SEGMENT
__real@3fa47ae147ae147b DQ 03fa47ae147ae147br	; 0.04
CONST	ENDS
;	COMDAT __real@3f9eb851eb851eb8
CONST	SEGMENT
__real@3f9eb851eb851eb8 DQ 03f9eb851eb851eb8r	; 0.03
CONST	ENDS
;	COMDAT __real@3f9b573eab367a10
CONST	SEGMENT
__real@3f9b573eab367a10 DQ 03f9b573eab367a10r	; 0.0267
CONST	ENDS
;	COMDAT __real@3f9999999999999a
CONST	SEGMENT
__real@3f9999999999999a DQ 03f9999999999999ar	; 0.025
CONST	ENDS
;	COMDAT __real@3f947ae147ae147b
CONST	SEGMENT
__real@3f947ae147ae147b DQ 03f947ae147ae147br	; 0.02
CONST	ENDS
;	COMDAT __real@3f90d0b8
CONST	SEGMENT
__real@3f90d0b8 DD 03f90d0b8r			; 1.13137
CONST	ENDS
;	COMDAT __real@3f8ccccd
CONST	SEGMENT
__real@3f8ccccd DD 03f8ccccdr			; 1.1
CONST	ENDS
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT __real@3f83a92a30553261
CONST	SEGMENT
__real@3f83a92a30553261 DQ 03f83a92a30553261r	; 0.0096
CONST	ENDS
;	COMDAT __real@3f82f6e9
CONST	SEGMENT
__real@3f82f6e9 DD 03f82f6e9r			; 1.02316
CONST	ENDS
;	COMDAT __real@3f80624dd2f1a9fc
CONST	SEGMENT
__real@3f80624dd2f1a9fc DQ 03f80624dd2f1a9fcr	; 0.008
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7eb852
CONST	SEGMENT
__real@3f7eb852 DD 03f7eb852r			; 0.995
CONST	ENDS
;	COMDAT __real@3f7c28f6
CONST	SEGMENT
__real@3f7c28f6 DD 03f7c28f6r			; 0.985
CONST	ENDS
;	COMDAT __real@3f7ae148
CONST	SEGMENT
__real@3f7ae148 DD 03f7ae148r			; 0.98
CONST	ENDS
;	COMDAT __real@3f789374cccccccd
CONST	SEGMENT
__real@3f789374cccccccd DQ 03f789374cccccccdr	; 0.006
CONST	ENDS
;	COMDAT __real@3f7851ec
CONST	SEGMENT
__real@3f7851ec DD 03f7851ecr			; 0.97
CONST	ENDS
;	COMDAT __real@3f770a3d
CONST	SEGMENT
__real@3f770a3d DD 03f770a3dr			; 0.965
CONST	ENDS
;	COMDAT __real@3f74fdf4
CONST	SEGMENT
__real@3f74fdf4 DD 03f74fdf4r			; 0.957
CONST	ENDS
;	COMDAT __real@3f733333
CONST	SEGMENT
__real@3f733333 DD 03f733333r			; 0.95
CONST	ENDS
;	COMDAT __real@3f700000
CONST	SEGMENT
__real@3f700000 DD 03f700000r			; 0.9375
CONST	ENDS
;	COMDAT __real@3f6e147b
CONST	SEGMENT
__real@3f6e147b DD 03f6e147br			; 0.93
CONST	ENDS
;	COMDAT __real@3f6c28f6
CONST	SEGMENT
__real@3f6c28f6 DD 03f6c28f6r			; 0.9225
CONST	ENDS
;	COMDAT __real@3f68f5c3
CONST	SEGMENT
__real@3f68f5c3 DD 03f68f5c3r			; 0.91
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f651eb8
CONST	SEGMENT
__real@3f651eb8 DD 03f651eb8r			; 0.895
CONST	ENDS
;	COMDAT __real@3f63d70a
CONST	SEGMENT
__real@3f63d70a DD 03f63d70ar			; 0.89
CONST	ENDS
;	COMDAT __real@3f628f5c
CONST	SEGMENT
__real@3f628f5c DD 03f628f5cr			; 0.885
CONST	ENDS
;	COMDAT __real@3f6147ae
CONST	SEGMENT
__real@3f6147ae DD 03f6147aer			; 0.88
CONST	ENDS
;	COMDAT __real@3f61111111111111
CONST	SEGMENT
__real@3f61111111111111 DQ 03f61111111111111r	; 0.00208333
CONST	ENDS
;	COMDAT __real@3f60a3d7
CONST	SEGMENT
__real@3f60a3d7 DD 03f60a3d7r			; 0.8775
CONST	ENDS
;	COMDAT __real@3f600000
CONST	SEGMENT
__real@3f600000 DD 03f600000r			; 0.875
CONST	ENDS
;	COMDAT __real@3f5ccccd
CONST	SEGMENT
__real@3f5ccccd DD 03f5ccccdr			; 0.8625
CONST	ENDS
;	COMDAT __real@3f5c28f6
CONST	SEGMENT
__real@3f5c28f6 DD 03f5c28f6r			; 0.86
CONST	ENDS
;	COMDAT __real@3f5b645a
CONST	SEGMENT
__real@3f5b645a DD 03f5b645ar			; 0.857
CONST	ENDS
;	COMDAT __real@3f5a3d71
CONST	SEGMENT
__real@3f5a3d71 DD 03f5a3d71r			; 0.8525
CONST	ENDS
;	COMDAT __real@3f59999a
CONST	SEGMENT
__real@3f59999a DD 03f59999ar			; 0.85
CONST	ENDS
;	COMDAT __real@3f5999999999999a
CONST	SEGMENT
__real@3f5999999999999a DQ 03f5999999999999ar	; 0.0015625
CONST	ENDS
;	COMDAT __real@3f566666
CONST	SEGMENT
__real@3f566666 DD 03f566666r			; 0.8375
CONST	ENDS
;	COMDAT __real@3f51eb85
CONST	SEGMENT
__real@3f51eb85 DD 03f51eb85r			; 0.82
CONST	ENDS
;	COMDAT __real@3f50a3d7
CONST	SEGMENT
__real@3f50a3d7 DD 03f50a3d7r			; 0.815
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3f4eb852
CONST	SEGMENT
__real@3f4eb852 DD 03f4eb852r			; 0.8075
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f4ac083
CONST	SEGMENT
__real@3f4ac083 DD 03f4ac083r			; 0.792
CONST	ENDS
;	COMDAT __real@3f4a3d71
CONST	SEGMENT
__real@3f4a3d71 DD 03f4a3d71r			; 0.79
CONST	ENDS
;	COMDAT __real@3f451eb8
CONST	SEGMENT
__real@3f451eb8 DD 03f451eb8r			; 0.77
CONST	ENDS
;	COMDAT __real@3f43a92a3d70a3d7
CONST	SEGMENT
__real@3f43a92a3d70a3d7 DQ 03f43a92a3d70a3d7r	; 0.0006
CONST	ENDS
;	COMDAT __real@3f3eb852
CONST	SEGMENT
__real@3f3eb852 DD 03f3eb852r			; 0.745
CONST	ENDS
;	COMDAT __real@3f3d70a4
CONST	SEGMENT
__real@3f3d70a4 DD 03f3d70a4r			; 0.74
CONST	ENDS
;	COMDAT __real@3f3851ec
CONST	SEGMENT
__real@3f3851ec DD 03f3851ecr			; 0.72
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f2e9e8d
CONST	SEGMENT
__real@3f2e9e8d DD 03f2e9e8dr			; 0.682107
CONST	ENDS
;	COMDAT __real@3f2b851f
CONST	SEGMENT
__real@3f2b851f DD 03f2b851fr			; 0.67
CONST	ENDS
;	COMDAT __real@3f266666
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT __real@3f23d70a
CONST	SEGMENT
__real@3f23d70a DD 03f23d70ar			; 0.64
CONST	ENDS
;	COMDAT __real@3f233333
CONST	SEGMENT
__real@3f233333 DD 03f233333r			; 0.6375
CONST	ENDS
;	COMDAT __real@3f22eacf
CONST	SEGMENT
__real@3f22eacf DD 03f22eacfr			; 0.636395
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f133333
CONST	SEGMENT
__real@3f133333 DD 03f133333r			; 0.575
CONST	ENDS
;	COMDAT __real@3f10000000000000
CONST	SEGMENT
__real@3f10000000000000 DQ 03f10000000000000r	; 6.10352e-05
CONST	ENDS
;	COMDAT __real@3f0ccccd
CONST	SEGMENT
__real@3f0ccccd DD 03f0ccccdr			; 0.55
CONST	ENDS
;	COMDAT __real@3f0a3d71
CONST	SEGMENT
__real@3f0a3d71 DD 03f0a3d71r			; 0.54
CONST	ENDS
;	COMDAT __real@3f066666
CONST	SEGMENT
__real@3f066666 DD 03f066666r			; 0.525
CONST	ENDS
;	COMDAT __real@3f060a92
CONST	SEGMENT
__real@3f060a92 DD 03f060a92r			; 0.523599
CONST	ENDS
;	COMDAT __real@3f00002000400080
CONST	SEGMENT
__real@3f00002000400080 DQ 03f00002000400080r	; 3.05185e-05
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ee66666
CONST	SEGMENT
__real@3ee66666 DD 03ee66666r			; 0.45
CONST	ENDS
;	COMDAT __real@3edf66f3
CONST	SEGMENT
__real@3edf66f3 DD 03edf66f3r			; 0.436332
CONST	ENDS
;	COMDAT __real@3ed70a3d
CONST	SEGMENT
__real@3ed70a3d DD 03ed70a3dr			; 0.42
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3ec00000
CONST	SEGMENT
__real@3ec00000 DD 03ec00000r			; 0.375
CONST	ENDS
;	COMDAT __real@3ebd70a4
CONST	SEGMENT
__real@3ebd70a4 DD 03ebd70a4r			; 0.37
CONST	ENDS
;	COMDAT __real@3eb33333
CONST	SEGMENT
__real@3eb33333 DD 03eb33333r			; 0.35
CONST	ENDS
;	COMDAT __real@3eb2b8c2
CONST	SEGMENT
__real@3eb2b8c2 DD 03eb2b8c2r			; 0.349066
CONST	ENDS
;	COMDAT __real@3eae9e8d
CONST	SEGMENT
__real@3eae9e8d DD 03eae9e8dr			; 0.341053
CONST	ENDS
;	COMDAT __real@3eae147b
CONST	SEGMENT
__real@3eae147b DD 03eae147br			; 0.34
CONST	ENDS
;	COMDAT __real@3ea2eacf
CONST	SEGMENT
__real@3ea2eacf DD 03ea2eacfr			; 0.318198
CONST	ENDS
;	COMDAT __real@3e9eb852
CONST	SEGMENT
__real@3e9eb852 DD 03e9eb852r			; 0.31
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e8f5c29
CONST	SEGMENT
__real@3e8f5c29 DD 03e8f5c29r			; 0.28
CONST	ENDS
;	COMDAT __real@3e860a92
CONST	SEGMENT
__real@3e860a92 DD 03e860a92r			; 0.261799
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e733333
CONST	SEGMENT
__real@3e733333 DD 03e733333r			; 0.2375
CONST	ENDS
;	COMDAT __real@3e666666
CONST	SEGMENT
__real@3e666666 DD 03e666666r			; 0.225
CONST	ENDS
;	COMDAT __real@3e6147ae
CONST	SEGMENT
__real@3e6147ae DD 03e6147aer			; 0.22
CONST	ENDS
;	COMDAT __real@3e4cccce
CONST	SEGMENT
__real@3e4cccce DD 03e4ccccer			; 0.2
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e428f5c
CONST	SEGMENT
__real@3e428f5c DD 03e428f5cr			; 0.19
CONST	ENDS
;	COMDAT __real@3e3851ec
CONST	SEGMENT
__real@3e3851ec DD 03e3851ecr			; 0.18
CONST	ENDS
;	COMDAT __real@3e35c28f
CONST	SEGMENT
__real@3e35c28f DD 03e35c28fr			; 0.1775
CONST	ENDS
;	COMDAT __real@3e32b8c2
CONST	SEGMENT
__real@3e32b8c2 DD 03e32b8c2r			; 0.174533
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@3e0f5c2a
CONST	SEGMENT
__real@3e0f5c2a DD 03e0f5c2ar			; 0.14
CONST	ENDS
;	COMDAT __real@3e000000
CONST	SEGMENT
__real@3e000000 DD 03e000000r			; 0.125
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3db2b8c2
CONST	SEGMENT
__real@3db2b8c2 DD 03db2b8c2r			; 0.0872665
CONST	ENDS
;	COMDAT __real@3da3d70b
CONST	SEGMENT
__real@3da3d70b DD 03da3d70br			; 0.08
CONST	ENDS
;	COMDAT __real@3da3d70a
CONST	SEGMENT
__real@3da3d70a DD 03da3d70ar			; 0.08
CONST	ENDS
;	COMDAT __real@3d99999a
CONST	SEGMENT
__real@3d99999a DD 03d99999ar			; 0.075
CONST	ENDS
;	COMDAT __real@3d8f5c29
CONST	SEGMENT
__real@3d8f5c29 DD 03d8f5c29r			; 0.07
CONST	ENDS
;	COMDAT __real@3d7c0fc1
CONST	SEGMENT
__real@3d7c0fc1 DD 03d7c0fc1r			; 0.0615385
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3d23d70a
CONST	SEGMENT
__real@3d23d70a DD 03d23d70ar			; 0.04
CONST	ENDS
;	COMDAT __real@3d000000
CONST	SEGMENT
__real@3d000000 DD 03d000000r			; 0.03125
CONST	ENDS
;	COMDAT __real@3cf5c28f
CONST	SEGMENT
__real@3cf5c28f DD 03cf5c28fr			; 0.03
CONST	ENDS
;	COMDAT __real@3ca3d70d
CONST	SEGMENT
__real@3ca3d70d DD 03ca3d70dr			; 0.02
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3c000000
CONST	SEGMENT
__real@3c000000 DD 03c000000r			; 0.0078125
CONST	ENDS
;	COMDAT __real@3b83126f
CONST	SEGMENT
__real@3b83126f DD 03b83126fr			; 0.004
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MLBCHGI@next_mfd_mode?5?$CB?$DN?5oposite_mode@
CONST	SEGMENT
??_C@_0BO@MLBCHGI@next_mfd_mode?5?$CB?$DN?5oposite_mode@ DB 'next_mfd_mod'
	DB	'e != oposite_mode', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??cycle_apache_mfd@@YGXHW4MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??cycle_apache_mfd@@YGXHW4MFD_LOCATIONS@@@Z@4JA DD 030d5H ; `cycle_apache_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BG@CLGDNIGP@Invalid?5mfd?5mode?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BG@CLGDNIGP@Invalid?5mfd?5mode?5?$DN?5?$CFd@ DB 'Invalid mfd mode '
	DB	'= %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@ DB 'Invalid EO senso'
	DB	'r = %d', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_overlaid_apache_mfd@@YGXMMMW4MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_overlaid_apache_mfd@@YGXMMMW4MFD_LOCATIONS@@@Z@4JA DD 02d4bH ; `draw_overlaid_apache_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CJ@CEJBLLFD@Only?5pilot?8s?5MFDs?5support?5TADS?5@
CONST	SEGMENT
??_C@_0CJ@CEJBLLFD@Only?5pilot?8s?5MFDs?5support?5TADS?5@ DB 'Only pilot'''
	DB	's MFDs support TADS underlay!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@IPIPCLFE@mfd_viewport_size?5?$DM?$DN?5mfd_textur@
CONST	SEGMENT
??_C@_0CG@IPIPCLFE@mfd_viewport_size?5?$DM?$DN?5mfd_textur@ DB 'mfd_viewp'
	DB	'ort_size <= mfd_texture_size', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KPJGEEPP@location?5?$DN?$DN?5MFD_LOCATION_ORT@
CONST	SEGMENT
??_C@_0BN@KPJGEEPP@location?5?$DN?$DN?5MFD_LOCATION_ORT@ DB 'location == '
	DB	'MFD_LOCATION_ORT', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_apache_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_apache_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z@4JA DD 02b1dH ; `draw_apache_mfd_on_texture'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05HEBIGJOB@RFD?$DND@
CONST	SEGMENT
??_C@_05HEBIGJOB@RFD?$DND@ DB 'RFD=D', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GKHMPBNK@TADS?5FORWARD@
CONST	SEGMENT
??_C@_0N@GKHMPBNK@TADS?5FORWARD@ DB 'TADS FORWARD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LJGBJBPO@IAT?5TRACKING@
CONST	SEGMENT
??_C@_0N@LJGBJBPO@IAT?5TRACKING@ DB 'IAT TRACKING', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FDACEBPE@IAT?5OFFSET@
CONST	SEGMENT
??_C@_0L@FDACEBPE@IAT?5OFFSET@ DB 'IAT OFFSET', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MBLKLAJE@LASE?4?4?4TARGET@
CONST	SEGMENT
??_C@_0O@MBLKLAJE@LASE?4?4?4TARGET@ DB 'LASE...TARGET', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03HPMEOHJD@ATA@
CONST	SEGMENT
??_C@_03HPMEOHJD@ATA@ DB 'ATA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06KBOCPCKB@TOF?$DN?$CFd@
CONST	SEGMENT
??_C@_06KBOCPCKB@TOF?$DN?$CFd@ DB 'TOF=%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IFPDDAOD@MSL@
CONST	SEGMENT
??_C@_03IFPDDAOD@MSL@ DB 'MSL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07MPJLOAND@ROCKETS@
CONST	SEGMENT
??_C@_07MPJLOAND@ROCKETS@ DB 'ROCKETS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MHIPJLIL@RNDS?$CF4d@
CONST	SEGMENT
??_C@_07MHIPJLIL@RNDS?$CF4d@ DB 'RNDS%4d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HKMHFHNI@GUN?5FAIL@
CONST	SEGMENT
??_C@_08HKMHFHNI@GUN?5FAIL@ DB 'GUN FAIL', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_weapon_status@@YGPBDPADI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_weapon_status@@YGPBDPADI@Z@4JA DD 02a15H ; `get_weapon_status'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_08PABMPDMO@SLAVE?5TG@
CONST	SEGMENT
??_C@_08PABMPDMO@SLAVE?5TG@ DB 'SLAVE TG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PPEFEGGK@BORESIGHT@
CONST	SEGMENT
??_C@_09PPEFEGGK@BORESIGHT@ DB 'BORESIGHT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09OPNFHOOA@RECORDING@
CONST	SEGMENT
??_C@_09OPNFHOOA@RECORDING@ DB 'RECORDING', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GLLCGHEK@DVO?5FAIL@
CONST	SEGMENT
??_C@_08GLLCGHEK@DVO?5FAIL@ DB 'DVO FAIL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NLIECAOG@TV?5FAIL@
CONST	SEGMENT
??_C@_07NLIECAOG@TV?5FAIL@ DB 'TV FAIL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09OFNPBAOE@FLIR?5FAIL@
CONST	SEGMENT
??_C@_09OFNPBAOE@FLIR?5FAIL@ DB 'FLIR FAIL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ICPLLFPA@?$CFc?5?$CFc?5?$CFc?5?$CFc@
CONST	SEGMENT
??_C@_0M@ICPLLFPA@?$CFc?5?$CFc?5?$CFc?5?$CFc@ DB '%c %c %c %c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07ENBNJNMO@1234567@
CONST	SEGMENT
??_C@_07ENBNJNMO@1234567@ DB '1234567', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_alnum_weapons@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_alnum_weapons@@YGXXZ@4JA DD 0298fH ; `draw_alnum_weapons'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA DD 02977H ; `draw_flight_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@
CONST	SEGMENT
??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@ DB '--:--:--', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
CONST	SEGMENT
??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@ DB '%02d:%02d:%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BAOIPBEF@?9?3?9?9?4?9@
CONST	SEGMENT
??_C@_06BAOIPBEF@?9?3?9?9?4?9@ DB '-:--.-', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CFANIJPM@?$CFc?3?$CFdKm@
CONST	SEGMENT
??_C@_07CFANIJPM@?$CFc?3?$CFdKm@ DB '%c:%dKm', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EKFBJBJG@?$CFc?3?$CF?41fKm@
CONST	SEGMENT
??_C@_09EKFBJBJG@?$CFc?3?$CF?41fKm@ DB '%c:%.1fKm', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JCIGMCHD@?$CFc?3?$CFdm@
CONST	SEGMENT
??_C@_06JCIGMCHD@?$CFc?3?$CFdm@ DB '%c:%dm', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??display_waypoint_information@@YGXUREAL_COLOUR@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??display_waypoint_information@@YGXUREAL_COLOUR@@@Z@4JA DD 02904H ; `display_waypoint_information'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04FCMNJMCO@?$CFd?$CF?$CF@
CONST	SEGMENT
??_C@_04FCMNJMCO@?$CFd?$CF?$CF@ DB '%d%%', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IAKIMNGC@R?$CFd@
CONST	SEGMENT
??_C@_03IAKIMNGC@R?$CFd@ DB 'R%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NJMPCKOA@?$CFd0@
CONST	SEGMENT
??_C@_03NJMPCKOA@?$CFd0@ DB '%d0', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA DD 0265eH	; `draw_pitch_ladder'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0JJ@KMOEPALN@?$CIlocation?5?$DN?$DN?5MFD_LOCATION_PILOT@
CONST	SEGMENT
??_C@_0JJ@KMOEPALN@?$CIlocation?5?$DN?$DN?5MFD_LOCATION_PILOT@ DB '(locat'
	DB	'ion == MFD_LOCATION_PILOT_LHS) || (location == MFD_LOCATION_P'
	DB	'ILOT_RHS) || (location == MFD_LOCATION_CPG_LHS) || (location '
	DB	'== MFD_LOCATION_CPG_RHS)', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_apache_mfd_on_cockpit@@YGXMMHHW4MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_apache_mfd_on_cockpit@@YGXMMHHW4MFD_LOCATIONS@@@Z@4JA DD 024a8H ; `draw_apache_mfd_on_cockpit'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0L@OGFGIPGD@APU?5?$CF03d?$CF?$CF@
CONST	SEGMENT
??_C@_0L@OGFGIPGD@APU?5?$CF03d?$CF?$CF@ DB 'APU %03d%%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09KDIHCNHF@?$CF03d0?5psi@
CONST	SEGMENT
??_C@_09KDIHCNHF@?$CF03d0?5psi@ DB '%03d0 psi', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08ICFKBODG@HYDR?5PSI@
CONST	SEGMENT
??_C@_08ICFKBODG@HYDR?5PSI@ DB 'HYDR PSI', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GEGEOBAJ@?$CF04d?5lbs@
CONST	SEGMENT
??_C@_08GEGEOBAJ@?$CF04d?5lbs@ DB '%04d lbs', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04DICABFLJ@FUEL@
CONST	SEGMENT
??_C@_04DICABFLJ@FUEL@ DB 'FUEL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHGLKFFN@?$CF03d@
CONST	SEGMENT
??_C@_04OHGLKFFN@?$CF03d@ DB '%03d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JNBMPGOL@TORQUE@
CONST	SEGMENT
??_C@_06JNBMPGOL@TORQUE@ DB 'TORQUE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OIGEPKDA@FIRE?5EXTINGUISHER@
CONST	SEGMENT
??_C@_0BC@OIGEPKDA@FIRE?5EXTINGUISHER@ DB 'FIRE EXTINGUISHER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04PCNCCNDP@USED@
CONST	SEGMENT
??_C@_04PCNCCNDP@USED@ DB 'USED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MMJNGGCF@OIL?5PRESSURE@
CONST	SEGMENT
??_C@_0N@MMJNGGCF@OIL?5PRESSURE@ DB 'OIL PRESSURE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@POFMFPD@HYDRAULICS@
CONST	SEGMENT
??_C@_0L@POFMFPD@HYDRAULICS@ DB 'HYDRAULICS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JGIHBEEO@SEC?5FAIL@
CONST	SEGMENT
??_C@_08JGIHBEEO@SEC?5FAIL@ DB 'SEC FAIL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MNNJLJIF@PRI?5LOW@
CONST	SEGMENT
??_C@_07MNNJLJIF@PRI?5LOW@ DB 'PRI LOW', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DMOCMFND@FAILURE@
CONST	SEGMENT
??_C@_07DMOCMFND@FAILURE@ DB 'FAILURE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IGCLDBCD@ENGINE?52@
CONST	SEGMENT
??_C@_08IGCLDBCD@ENGINE?52@ DB 'ENGINE 2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KNAGGCOA@ENGINE?51@
CONST	SEGMENT
??_C@_08KNAGGCOA@ENGINE?51@ DB 'ENGINE 1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MCBINMPD@TAIL?5ROTOR@
CONST	SEGMENT
??_C@_0L@MCBINMPD@TAIL?5ROTOR@ DB 'TAIL ROTOR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OHKEFPKJ@DAMAGED@
CONST	SEGMENT
??_C@_07OHKEFPKJ@DAMAGED@ DB 'DAMAGED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FFIGCBMA@MAIN?5ROTOR@
CONST	SEGMENT
??_C@_0L@FFIGCBMA@MAIN?5ROTOR@ DB 'MAIN ROTOR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LMAEBBOE@STABILISER@
CONST	SEGMENT
??_C@_0L@LMAEBBOE@STABILISER@ DB 'STABILISER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04IDKCLELC@PNVS@
CONST	SEGMENT
??_C@_04IDKCLELC@PNVS@ DB 'PNVS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@
CONST	SEGMENT
??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@ DB 'RADAR WARNING SYSTEM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OEDGDHNF@COMMUNICATIONS@
CONST	SEGMENT
??_C@_0P@OEDGDHNF@COMMUNICATIONS@ DB 'COMMUNICATIONS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@
CONST	SEGMENT
??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@ DB 'NAVIGATION COMPUTER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MILGCPFO@IR?5JAMMER@
CONST	SEGMENT
??_C@_09MILGCPFO@IR?5JAMMER@ DB 'IR JAMMER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JDBOFCJG@RADAR?5JAMMER@
CONST	SEGMENT
??_C@_0N@JDBOFCJG@RADAR?5JAMMER@ DB 'RADAR JAMMER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@
CONST	SEGMENT
??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@ DB 'LASER DESIGNATOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05IHELJBBC@RADAR@
CONST	SEGMENT
??_C@_05IHELJBBC@RADAR@ DB 'RADAR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OOEBCMBF@FAIL@
CONST	SEGMENT
??_C@_04OOEBCMBF@FAIL@ DB 'FAIL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GIPFHKNO@OK@
CONST	SEGMENT
??_C@_02GIPFHKNO@OK@ DB 'OK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07FPLKDJGL@warning@
CONST	SEGMENT
??_C@_07FPLKDJGL@warning@ DB 'warning', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09FJJPPKDN@equipment@
CONST	SEGMENT
??_C@_09FJJPPKDN@equipment@ DB 'equipment', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??print_system_message@@YGMPAD0HM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??print_system_message@@YGMPAD0HM@Z@4JA DD 020dbH ; `print_system_message'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z@4JA DD 01fbeH ; `draw_weapon_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02LENCMAPF@RC@
CONST	SEGMENT
??_C@_02LENCMAPF@RC@ DB 'RC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MCEHGFCK@MP@
CONST	SEGMENT
??_C@_02MCEHGFCK@MP@ DB 'MP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DGKLNCNG@R@
CONST	SEGMENT
??_C@_01DGKLNCNG@R@ DB 'R', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@NDBFDPHK@?$CB?$CCmore?5than?54?5hellfires?5on?5Apac@
CONST	SEGMENT
??_C@_0CJ@NDBFDPHK@?$CB?$CCmore?5than?54?5hellfires?5on?5Apac@ DB '!"more'
	DB	' than 4 hellfires on Apache pylon"', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@DKLMAF@more?5than?54?5hellfires?5on?5Apache@
CONST	SEGMENT
??_C@_0CG@DKLMAF@more?5than?54?5hellfires?5on?5Apache@ DB 'more than 4 he'
	DB	'llfires on Apache pylon', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GPKGLDLB@SALVO@
CONST	SEGMENT
??_C@_05GPKGLDLB@SALVO@ DB 'SALVO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EKDNBCDP@LOAL@
CONST	SEGMENT
??_C@_04EKDNBCDP@LOAL@ DB 'LOAL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MJCDDMFE@TRNGL@
CONST	SEGMENT
??_C@_05MJCDDMFE@TRNGL@ DB 'TRNGL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MGGCNFDL@LRF@
CONST	SEGMENT
??_C@_03MGGCNFDL@LRF@ DB 'LRF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04JMNPMIJD@SAFE@
CONST	SEGMENT
??_C@_04JMNPMIJD@SAFE@ DB 'SAFE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NHPMNECN@ARM@
CONST	SEGMENT
??_C@_03NHPMNECN@ARM@ DB 'ARM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KIGHCFHP@MAN@
CONST	SEGMENT
??_C@_03KIGHCFHP@MAN@ DB 'MAN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MLKBHMKD@FLARE@
CONST	SEGMENT
??_C@_05MLKBHMKD@FLARE@ DB 'FLARE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BAHDIOLJ@XX@
CONST	SEGMENT
??_C@_02BAHDIOLJ@XX@ DB 'XX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GPCJOALC@?$CF2d@
CONST	SEGMENT
??_C@_03GPCJOALC@?$CF2d@ DB '%2d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FOOOBDLP@CHAFF@
CONST	SEGMENT
??_C@_05FOOOBDLP@CHAFF@ DB 'CHAFF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04CPMKADPB@XXXX@
CONST	SEGMENT
??_C@_04CPMKADPB@XXXX@ DB 'XXXX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MFMEIMLB@draw_large_mfd@
CONST	SEGMENT
??_C@_0P@MFMEIMLB@draw_large_mfd@ DB 'draw_large_mfd', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z@4JA DD 01db1H ; `draw_large_weapon_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04OGKJMPGK@?$CF02d@
CONST	SEGMENT
??_C@_04OGKJMPGK@?$CF02d@ DB '%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OCCELDNI@?$CF04d@
CONST	SEGMENT
??_C@_04OCCELDNI@?$CF04d@ DB '%04d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OHJEOGMH@y?5?$DO?$DN?50@
CONST	SEGMENT
??_C@_06OHJEOGMH@y?5?$DO?$DN?50@ DB 'y >= 0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBODONHD@x?5?$DO?$DN?50@
CONST	SEGMENT
??_C@_06EBODONHD@x?5?$DO?$DN?50@ DB 'x >= 0', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_sprite@@YGXHHHHHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_sprite@@YGXHHHHHH@Z@4JA DD 015f5H	; `draw_sprite'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06DPNNIDIB@F?3?$CF02d@
CONST	SEGMENT
??_C@_06DPNNIDIB@F?3?$CF02d@ DB 'F:%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GBDFBFJK@F?3XX@
CONST	SEGMENT
??_C@_04GBDFBFJK@F?3XX@ DB 'F:XX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@
CONST	SEGMENT
??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@ DB 'FLARE:%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HGDOPGOH@FLARE?3XX@
CONST	SEGMENT
??_C@_08HGDOPGOH@FLARE?3XX@ DB 'FLARE:XX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GNOFKMCG@C?3?$CF02d@
CONST	SEGMENT
??_C@_06GNOFKMCG@C?3?$CF02d@ DB 'C:%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KJNFJKOK@C?3XX@
CONST	SEGMENT
??_C@_04KJNFJKOK@C?3XX@ DB 'C:XX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@
CONST	SEGMENT
??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@ DB 'CHAFF:%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHAEIHAP@CHAFF?3XX@
CONST	SEGMENT
??_C@_08GHAEIHAP@CHAFF?3XX@ DB 'CHAFF:XX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09NCCLNCCC@AUTO?5PAGE@
CONST	SEGMENT
??_C@_09NCCLNCCC@AUTO?5PAGE@ DB 'AUTO PAGE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NKOLJMOI@AUTO?5C?1M@
CONST	SEGMENT
??_C@_08NKOLJMOI@AUTO?5C?1M@ DB 'AUTO C/M', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JCJCOOPL@RD?5OFF@
CONST	SEGMENT
??_C@_06JCJCOOPL@RD?5OFF@ DB 'RD OFF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BHAGAOGB@RD?5ON@
CONST	SEGMENT
??_C@_05BHAGAOGB@RD?5ON@ DB 'RD ON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JNKFDAHI@RD?5XXX@
CONST	SEGMENT
??_C@_06JNKFDAHI@RD?5XXX@ DB 'RD XXX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@
CONST	SEGMENT
??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@ DB 'RD JAM OFF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OKIOJJOP@RD?5JAM?5ON@
CONST	SEGMENT
??_C@_09OKIOJJOP@RD?5JAM?5ON@ DB 'RD JAM ON', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@
CONST	SEGMENT
??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@ DB 'RD JAM XXX', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06CCMEMHEJ@IR?5OFF@
CONST	SEGMENT
??_C@_06CCMEMHEJ@IR?5OFF@ DB 'IR OFF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JBLHJOBL@IR?5ON@
CONST	SEGMENT
??_C@_05JBLHJOBL@IR?5ON@ DB 'IR ON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNPDBJMK@IR?5XXX@
CONST	SEGMENT
??_C@_06CNPDBJMK@IR?5XXX@ DB 'IR XXX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@
CONST	SEGMENT
??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@ DB 'IR JAM OFF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OKBKNIAL@IR?5JAM?5ON@
CONST	SEGMENT
??_C@_09OKBKNIAL@IR?5JAM?5ON@ DB 'IR JAM ON', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DADPKEOI@IR?5JAM?5XXX@
CONST	SEGMENT
??_C@_0L@DADPKEOI@IR?5JAM?5XXX@ DB 'IR JAM XXX', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@
CONST	SEGMENT
??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@ DB 'LS MSL:%.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@
CONST	SEGMENT
??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@ DB 'RF MSL:%.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@
CONST	SEGMENT
??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@ DB 'IR MSL:%.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA DD 0136aH ; `draw_aircraft_survivability_equipment_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@
CONST	SEGMENT
??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@ DB '(threa'
	DB	't_type == THREAT_TYPE_RF_MISSILE) || (threat_type == THREAT_T'
	DB	'YPE_IR_MISSILE) || (threat_type == THREAT_TYPE_LASER_MISSILE)'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEKOLKIL@source@
CONST	SEGMENT
??_C@_06OEKOLKIL@source@ DB 'source', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA DD 01303H ; `get_closest_missile'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06NEGNFKDO@?$CF?41fkm@
CONST	SEGMENT
??_C@_06NEGNFKDO@?$CF?41fkm@ DB '%.1fkm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DIMJBCMI@NAV@
CONST	SEGMENT
??_C@_03DIMJBCMI@NAV@ DB 'NAV', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DBNGLLAD@TGT@
CONST	SEGMENT
??_C@_03DBNGLLAD@TGT@ DB 'TGT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IJFFJMFM@25Km@
CONST	SEGMENT
??_C@_04IJFFJMFM@25Km@ DB '25Km', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PJCLBGLO@10Km@
CONST	SEGMENT
??_C@_04PJCLBGLO@10Km@ DB '10Km', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LFNCFPLL@5Km@
CONST	SEGMENT
??_C@_03LFNCFPLL@5Km@ DB '5Km', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CIAFGHAC@2Km@
CONST	SEGMENT
??_C@_03CIAFGHAC@2Km@ DB '2Km', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KNFJGCC@AIR@
CONST	SEGMENT
??_C@_03KNFJGCC@AIR@ DB 'AIR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DGGJGKKM@GND@
CONST	SEGMENT
??_C@_03DGGJGKKM@GND@ DB 'GND', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06NOICLIMH@IHADSS@
CONST	SEGMENT
??_C@_06NOICLIMH@IHADSS@ DB 'IHADSS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OIKHPJCN@FCR?1PF?$CFd@
CONST	SEGMENT
??_C@_08OIKHPJCN@FCR?1PF?$CFd@ DB 'FCR/PF%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06LLLMNJMM@NO?5ACQ@
CONST	SEGMENT
??_C@_06LLLMNJMM@NO?5ACQ@ DB 'NO ACQ', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA DD 0ffdH ; `draw_tactical_situation_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??apache_select_clicked_target@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??apache_select_clicked_target@@YGXXZ@4JA DD 0fadH ; `apache_select_clicked_target'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_01CPLAODJH@S@
CONST	SEGMENT
??_C@_01CPLAODJH@S@ DB 'S', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01OCOKONAJ@L@
CONST	SEGMENT
??_C@_01OCOKONAJ@L@ DB 'L', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04KPGPJCNC@WIDE@
CONST	SEGMENT
??_C@_04KPGPJCNC@WIDE@ DB 'WIDE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FMKFNHMM@NAR@
CONST	SEGMENT
??_C@_03FMKFNHMM@NAR@ DB 'NAR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02ONPABID@LO@
CONST	SEGMENT
??_C@_02ONPABID@LO@ DB 'LO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08JFLECGBM@LO?5LIGHT@
CONST	SEGMENT
??_C@_08JFLECGBM@LO?5LIGHT@ DB 'LO LIGHT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NFBNOOEB@DVO@
CONST	SEGMENT
??_C@_03NFBNOOEB@DVO@ DB 'DVO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03ENJJJDDH@DTV@
CONST	SEGMENT
??_C@_03ENJJJDDH@DTV@ DB 'DTV', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MIGKMLBH@FLIR@
CONST	SEGMENT
??_C@_04MIGKMLBH@FLIR@ DB 'FLIR', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z@4JA DD 0e22H ; `draw_2d_eo_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04EIHLKMGG@LOBL@
CONST	SEGMENT
??_C@_04EIHLKMGG@LOBL@ DB 'LOBL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07CMBMBPC@LOAL?9HI@
CONST	SEGMENT
??_C@_07CMBMBPC@LOAL?9HI@ DB 'LOAL-HI', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IMEMIMEA@Invalid?5weapon?5lock?5type?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BO@IMEMIMEA@Invalid?5weapon?5lock?5type?5?$DN?5?$CFd@ DB 'Invalid '
	DB	'weapon lock type = %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PDLCBABH@VALID?5LOCK@
CONST	SEGMENT
??_C@_0L@PDLCBABH@VALID?5LOCK@ DB 'VALID LOCK', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07EPBNJCNI@MAX?5RNG@
CONST	SEGMENT
??_C@_07EPBNJCNI@MAX?5RNG@ DB 'MAX RNG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KJHNDNDJ@MIN?5RNG@
CONST	SEGMENT
??_C@_07KJHNDNDJ@MIN?5RNG@ DB 'MIN RNG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CPLEKEOP@SKR?5LIMIT@
CONST	SEGMENT
??_C@_09CPLEKEOP@SKR?5LIMIT@ DB 'SKR LIMIT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MFPJHMMF@INVALID?5TGT@
CONST	SEGMENT
??_C@_0M@MFPJHMMF@INVALID?5TGT@ DB 'INVALID TGT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JLFDDBCD@NO?5TARGET@
CONST	SEGMENT
??_C@_09JLFDDBCD@NO?5TARGET@ DB 'NO TARGET', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09GGBOJENB@NO?5WEAPON@
CONST	SEGMENT
??_C@_09GGBOJENB@NO?5WEAPON@ DB 'NO WEAPON', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FONJMCCD@NO?5ACQUIRE@
CONST	SEGMENT
??_C@_0L@FONJMCCD@NO?5ACQUIRE@ DB 'NO ACQUIRE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BCEGOCOA@AX?4X@
CONST	SEGMENT
??_C@_04BCEGOCOA@AX?4X@ DB 'AX.X', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NFPLLMGK@A?$CF?41f@
CONST	SEGMENT
??_C@_05NFPLLMGK@A?$CF?41f@ DB 'A%.1f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OKGDLNCL@NONE@
CONST	SEGMENT
??_C@_04OKGDLNCL@NONE@ DB 'NONE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07HOJAAJFI@L?$CF04?40f@
CONST	SEGMENT
??_C@_07HOJAAJFI@L?$CF04?40f@ DB 'L%04.0f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DBODHFDK@TADS@
CONST	SEGMENT
??_C@_04DBODHFDK@TADS@ DB 'TADS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FALJMMFP@R?$CF?41f@
CONST	SEGMENT
??_C@_05FALJMMFP@R?$CF?41f@ DB 'R%.1f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JKJFCLEN@FCR@
CONST	SEGMENT
??_C@_03JKJFCLEN@FCR@ DB 'FCR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GLKEJMAA@?$CF4d@
CONST	SEGMENT
??_C@_03GLKEJMAA@?$CF4d@ DB '%4d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GOOLIKIF@?$CF3d@
CONST	SEGMENT
??_C@_03GOOLIKIF@?$CF3d@ DB '%3d', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_high_action_display@@YGXPAUENTITY@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_high_action_display@@YGXPAUENTITY@@H@Z@4JA DD 0d60H ; `draw_high_action_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA DD 0ceeH ; `draw_overlaid_3d_eo_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BK@EPIBEIKA@d3d_can_render_to_texture@
CONST	SEGMENT
??_C@_0BK@EPIBEIKA@d3d_can_render_to_texture@ DB 'd3d_can_render_to_textu'
	DB	're', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
CONST	SEGMENT
??_C@_0BF@MDEHLDP@eo_3d_texture_screen@ DB 'eo_3d_texture_screen', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA DD 0c5bH ; `draw_3d_eo_display_on_texture'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02KMMHFIEO@eo@
CONST	SEGMENT
??_C@_02KMMHFIEO@eo@ DB 'eo', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z@4JA DD 0c44H ; `draw_3d_eo_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
CONST	SEGMENT
??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@ DB 'Invalid target'
	DB	' acquisition system = %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
CONST	SEGMENT
??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@ DB '('
	DB	'day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT'
	DB	'_TYPES)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
CONST	SEGMENT
??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@ DB '(weather_'
	DB	'mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LA'
	DB	'ST)', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??set_eo_view_params@@YGXW4TARGET_ACQUISITION_SYSTEMS@@HHHHMM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_eo_view_params@@YGXW4TARGET_ACQUISITION_SYSTEMS@@HHHHMM@Z@4JA DD 0bc2H ; `set_eo_view_params'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BL@MNOBOANG@Invalid?5field?5of?5view?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BL@MNOBOANG@Invalid?5field?5of?5view?5?$DN?5?$CFd@ DB 'Invalid fie'
	DB	'ld of view = %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05EJJKHDCK@ENEMY@
CONST	SEGMENT
??_C@_05EJJKHDCK@ENEMY@ DB 'ENEMY', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA DD 0992H	; `draw_air_radar_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_03COBKBLOD@SGL@
CONST	SEGMENT
??_C@_03COBKBLOD@SGL@ DB 'SGL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MGKDMHFC@MARK@
CONST	SEGMENT
??_C@_04MGKDMHFC@MARK@ DB 'MARK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PKDHFCJF@HIGH@
CONST	SEGMENT
??_C@_04PKDHFCJF@HIGH@ DB 'HIGH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FFIBGFCJ@MED@
CONST	SEGMENT
??_C@_03FFIBGFCJ@MED@ DB 'MED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06HMBFJLMK@MEDIUM@
CONST	SEGMENT
??_C@_06HMBFJLMK@MEDIUM@ DB 'MEDIUM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IBEFMGAI@LOW@
CONST	SEGMENT
??_C@_03IBEFMGAI@LOW@ DB 'LOW', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NIFPGLBG@ALL@
CONST	SEGMENT
??_C@_03NIFPGLBG@ALL@ DB 'ALL', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA DD 0863H ; `draw_ground_radar_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DD@KDAGALDF@get_local_entity_type?5?$CItarget?$CJ?5@
CONST	SEGMENT
??_C@_0DD@KDAGALDF@get_local_entity_type?5?$CItarget?$CJ?5@ DB 'get_local'
	DB	'_entity_type (target) == ENTITY_TYPE_CITY', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA DD 0830H ; `draw_ground_radar_clutter'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@
CONST	SEGMENT
??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@ DB '('
	DB	'target_symbol_type >= 0) && (target_symbol_type < NUM_TARGET_'
	DB	'SYMBOL_TYPES)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@
CONST	SEGMENT
??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@ DB '!get_local'
	DB	'_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IIPCKJML@source_position@
CONST	SEGMENT
??_C@_0BA@IIPCKJML@source_position@ DB 'source_position', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JJLAMBGK@target@
CONST	SEGMENT
??_C@_06JJLAMBGK@target@ DB 'target', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA DD 078bH ; `draw_radar_target_symbol'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06GPMJGLEM@MARKED@
CONST	SEGMENT
??_C@_06GPMJGLEM@MARKED@ DB 'MARKED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KODELPLK@LOCKED@
CONST	SEGMENT
??_C@_06KODELPLK@LOCKED@ DB 'LOCKED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LMMJFDCN@AUTO@
CONST	SEGMENT
??_C@_04LMMJFDCN@AUTO@ DB 'AUTO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06HCPKJKPH@NO?5LOS@
CONST	SEGMENT
??_C@_06HCPKJKPH@NO?5LOS@ DB 'NO LOS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OMCABMNO@?$CF?41fKm@
CONST	SEGMENT
??_C@_06OMCABMNO@?$CF?41fKm@ DB '%.1fKm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NGNKAJPJ@?$CFdm@
CONST	SEGMENT
??_C@_03NGNKAJPJ@?$CFdm@ DB '%dm', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05EMNNHGFM@radar@
CONST	SEGMENT
??_C@_05EMNNHGFM@radar@ DB 'radar', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA DD 06b9H ; `display_radar_target_details'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_03MAMPKPPK@XXX@
CONST	SEGMENT
??_C@_03MAMPKPPK@XXX@ DB 'XXX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06NBEADFGO@?$CF?40fKm@
CONST	SEGMENT
??_C@_06NBEADFGO@?$CF?40fKm@ DB '%.0fKm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LIPABGF@?$CF?40fm@
CONST	SEGMENT
??_C@_05LIPABGF@?$CF?40fm@ DB '%.0fm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LGBIGMFG@ZOOM@
CONST	SEGMENT
??_C@_04LGBIGMFG@ZOOM@ DB 'ZOOM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EELNHMOM@Unknown?5MFD?5location@
CONST	SEGMENT
??_C@_0BF@EELNHMOM@Unknown?5MFD?5location@ DB 'Unknown MFD location', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0LL@EJDGJHNL@?$CIlocation?5?$DN?$DN?5MFD_LOCATION_PILOT@
CONST	SEGMENT
??_C@_0LL@EJDGJHNL@?$CIlocation?5?$DN?$DN?5MFD_LOCATION_PILOT@ DB '(locat'
	DB	'ion == MFD_LOCATION_PILOT_LHS) || (location == MFD_LOCATION_P'
	DB	'ILOT_RHS) || (location == MFD_LOCATION_CPG_LHS) || (location '
	DB	'== MFD_LOCATION_CPG_RHS) || (location == MFD_LOCATION_ORT)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JNKLHOPK@mfd_mode?5?$CB?$DN?5MFD_MODE_LLLTV@
CONST	SEGMENT
??_C@_0BL@JNKLHOPK@mfd_mode?5?$CB?$DN?5MFD_MODE_LLLTV@ DB 'mfd_mode != MF'
	DB	'D_MODE_LLLTV', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@HPJGECJI@?$CImfd_mode?5?$DO?$DN?5MFD_MODE_OFF?$CJ?5?$CG?$CG?5?$CI@
CONST	SEGMENT
??_C@_0DJ@HPJGECJI@?$CImfd_mode?5?$DO?$DN?5MFD_MODE_OFF?$CJ?5?$CG?$CG?5?$CI@ DB '('
	DB	'mfd_mode >= MFD_MODE_OFF) && (mfd_mode < NUM_MFD_MODES)', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z@4JA DD 04aaH ; `select_apache_mfd_mode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_'
	DB	'mfd.c', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04IAKGOKGA@PF?$CFd@
CONST	SEGMENT
??_C@_04IAKGOKGA@PF?$CFd@ DB 'PF%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FPHGMDID@NF?$CFd@
CONST	SEGMENT
??_C@_04FPHGMDID@NF?$CFd@ DB 'NF%d', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
?large_tsd_ase_aircraft_datum@@3PADA DB 011H		; large_tsd_ase_aircraft_datum
	DB	025H
	DB	0f8H
	DB	0f8H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+7
?large_tsd_ase_aircraft_datum_mask@@3PADA DB 013H	; large_tsd_ase_aircraft_datum_mask
	DB	027H
	DB	0f7H
	DB	0f7H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+7
?small_tsd_ase_aircraft_datum@@3PADA DB 07H		; small_tsd_ase_aircraft_datum
	DB	0fH
	DB	0fdH
	DB	0fdH
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?small_tsd_ase_aircraft_datum_mask@@3PADA DB 09H	; small_tsd_ase_aircraft_datum_mask
	DB	011H
	DB	0fcH
	DB	0fcH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?large_tsd_waypoint_marker@@3PADA DB 0cH		; large_tsd_waypoint_marker
	DB	0dH
	DB	0fbH
	DB	0faH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
?small_tsd_waypoint_marker@@3PADA DB 09H		; small_tsd_waypoint_marker
	DB	09H
	DB	0fcH
	DB	0fcH
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	ORG $+3
?large_ase_missile@@3PADA DB 0bH			; large_ase_missile
	DB	09H
	DB	0fbH
	DB	0fcH
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	ORG $+1
?large_ase_missile_mask@@3PADA DB 0dH			; large_ase_missile_mask
	DB	0bH
	DB	0faH
	DB	0fbH
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	ORG $+1
?small_ase_missile@@3PADA DB 07H			; small_ase_missile
	DB	05H
	DB	0fdH
	DB	0feH
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
?small_ase_missile_mask@@3PADA DB 09H			; small_ase_missile_mask
	DB	07H
	DB	0fcH
	DB	0fdH
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	ORG $+5
?large_tsd_pointer_cross@@3PADA DB 013H			; large_tsd_pointer_cross
	DB	013H
	DB	0f7H
	DB	0f7H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+3
?large_tsd_pointer_cross_mask@@3PADA DB 013H		; large_tsd_pointer_cross_mask
	DB	013H
	DB	0f7H
	DB	0f7H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	ORG $+3
?large_display_moving_target_symbol@@3PADA DB 03H	; large_display_moving_target_symbol
	DB	03H
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	ORG $+3
?large_display_moving_target_symbol_mask@@3PADA DB 03H	; large_display_moving_target_symbol_mask
	DB	03H
	DB	0ffH
	DB	0ffH
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	ORG $+3
?large_engine_bar_marker@@3PADA DB 07H			; large_engine_bar_marker
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	ORG $+3
?small_engine_bar_marker@@3PADA DB 04H			; small_engine_bar_marker
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	ORG $+4
?hellfire_missile_data@@3PADA DB 0fH			; hellfire_missile_data
	DB	027H
	DB	0f9H
	DB	0edH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	ORG $+3
?inverted_hellfire_missile_data@@3PADA DB 0fH		; inverted_hellfire_missile_data
	DB	027H
	DB	0f9H
	DB	0edH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	ORG $+3
?stinger_missile_data@@3PADA DB 0fH			; stinger_missile_data
	DB	01fH
	DB	0f9H
	DB	0f1H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?inverted_stinger_missile_data@@3PADA DB 0fH		; inverted_stinger_missile_data
	DB	01fH
	DB	0f9H
	DB	0f1H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A DD 02H ; flir_light_levels
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A DD 01H ; flir_noise_levels
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
?dtv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A DD 02H ; dtv_light_levels
	DD	02H
	DD	02H
	DD	02H
	DD	01H
	DD	02H
	DD	01H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
?dtv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A DD 01H ; dtv_noise_levels
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
?dvo_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A DD 02H ; dvo_light_levels
	DD	02H
	DD	02H
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
?dvo_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A DD 01H ; dvo_noise_levels
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
?large_rate_of_climb_scale_pointer@@3PADA DB 05H	; large_rate_of_climb_scale_pointer
	DB	09H
	DB	0fbH
	DB	0fcH
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?small_rate_of_climb_scale_pointer@@3PADA DB 03H	; small_rate_of_climb_scale_pointer
	DB	05H
	DB	0fdH
	DB	0feH
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?cycle_apache_mfd@@YGXHW4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_next_mfd_mode$ = -12					; size = 4
_oposite_mode$ = -8					; size = 4
_change_mfd$ = -4					; size = 4
_forward$ = 8						; size = 4
_location$ = 12						; size = 4
?cycle_apache_mfd@@YGXHW4MFD_LOCATIONS@@@Z PROC		; cycle_apache_mfd, COMDAT

; 12501: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12502: 	mfd_modes*
; 12503: 		change_mfd;
; 12504: 
; 12505: 	mfd_modes
; 12506: 		oposite_mode,
; 12507: 		next_mfd_mode;
; 12508: 
; 12509: 	if (location == MFD_LOCATION_PILOT_LHS)

  00009	83 7d 0c 00	 cmp	 DWORD PTR _location$[ebp], 0
  0000d	75 11		 jne	 SHORT $LN2@cycle_apac

; 12510: 	{
; 12511: 		change_mfd = &lhs_mfd_mode;

  0000f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _change_mfd$[ebp], OFFSET ?lhs_mfd_mode@@3W4MFD_MODES@@A

; 12512: 		oposite_mode = rhs_mfd_mode;

  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A
  0001b	89 45 f8	 mov	 DWORD PTR _oposite_mode$[ebp], eax
  0001e	eb 3d		 jmp	 SHORT $LN3@cycle_apac
$LN2@cycle_apac:

; 12513: 	}
; 12514: 	else if (location == MFD_LOCATION_CPG_LHS)

  00020	83 7d 0c 02	 cmp	 DWORD PTR _location$[ebp], 2
  00024	75 11		 jne	 SHORT $LN4@cycle_apac

; 12515: 	{
; 12516: 		change_mfd = &cpg_lhs_mfd_mode;

  00026	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _change_mfd$[ebp], OFFSET ?cpg_lhs_mfd_mode@@3W4MFD_MODES@@A

; 12517: 		oposite_mode = cpg_rhs_mfd_mode;

  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?cpg_rhs_mfd_mode@@3W4MFD_MODES@@A
  00032	89 45 f8	 mov	 DWORD PTR _oposite_mode$[ebp], eax
  00035	eb 26		 jmp	 SHORT $LN3@cycle_apac
$LN4@cycle_apac:

; 12518: 	}
; 12519: 	else if (location == MFD_LOCATION_PILOT_RHS)

  00037	83 7d 0c 01	 cmp	 DWORD PTR _location$[ebp], 1
  0003b	75 11		 jne	 SHORT $LN6@cycle_apac

; 12520: 	{
; 12521: 		change_mfd = &rhs_mfd_mode;

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _change_mfd$[ebp], OFFSET ?rhs_mfd_mode@@3W4MFD_MODES@@A

; 12522: 		oposite_mode = lhs_mfd_mode;

  00044	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A
  00049	89 45 f8	 mov	 DWORD PTR _oposite_mode$[ebp], eax

; 12523: 	}
; 12524: 	else

  0004c	eb 0f		 jmp	 SHORT $LN3@cycle_apac
$LN6@cycle_apac:

; 12525: 	{
; 12526: 		change_mfd = &cpg_rhs_mfd_mode;

  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _change_mfd$[ebp], OFFSET ?cpg_rhs_mfd_mode@@3W4MFD_MODES@@A

; 12527: 		oposite_mode = cpg_lhs_mfd_mode;

  00055	a1 00 00 00 00	 mov	 eax, DWORD PTR ?cpg_lhs_mfd_mode@@3W4MFD_MODES@@A
  0005a	89 45 f8	 mov	 DWORD PTR _oposite_mode$[ebp], eax
$LN3@cycle_apac:

; 12528: 	}
; 12529: 
; 12530: 	if (forward)

  0005d	83 7d 08 00	 cmp	 DWORD PTR _forward$[ebp], 0
  00061	74 10		 je	 SHORT $LN8@cycle_apac

; 12531: 		next_mfd_mode = get_next_mfd_mode(*change_mfd);

  00063	8b 45 fc	 mov	 eax, DWORD PTR _change_mfd$[ebp]
  00066	8b 08		 mov	 ecx, DWORD PTR [eax]
  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 ?get_next_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z ; get_next_mfd_mode
  0006e	89 45 f4	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax

; 12532: 	else

  00071	eb 0e		 jmp	 SHORT $LN9@cycle_apac
$LN8@cycle_apac:

; 12533: 		next_mfd_mode = get_previous_mfd_mode(*change_mfd);

  00073	8b 45 fc	 mov	 eax, DWORD PTR _change_mfd$[ebp]
  00076	8b 08		 mov	 ecx, DWORD PTR [eax]
  00078	51		 push	 ecx
  00079	e8 00 00 00 00	 call	 ?get_previous_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z ; get_previous_mfd_mode
  0007e	89 45 f4	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax
$LN9@cycle_apac:

; 12534: 
; 12535: 	if (next_mfd_mode != MFD_MODE_DAMAGED)

  00081	83 7d f4 01	 cmp	 DWORD PTR _next_mfd_mode$[ebp], 1
  00085	74 48		 je	 SHORT $LN10@cycle_apac

; 12536: 	{
; 12537: 		if (next_mfd_mode == oposite_mode)

  00087	8b 45 f4	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]
  0008a	3b 45 f8	 cmp	 eax, DWORD PTR _oposite_mode$[ebp]
  0008d	75 20		 jne	 SHORT $LN11@cycle_apac

; 12538: 			if (forward)

  0008f	83 7d 08 00	 cmp	 DWORD PTR _forward$[ebp], 0
  00093	74 0e		 je	 SHORT $LN12@cycle_apac

; 12539: 				next_mfd_mode = get_next_mfd_mode(next_mfd_mode);

  00095	8b 45 f4	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?get_next_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z ; get_next_mfd_mode
  0009e	89 45 f4	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax

; 12540: 			else

  000a1	eb 0c		 jmp	 SHORT $LN11@cycle_apac
$LN12@cycle_apac:

; 12541: 				next_mfd_mode = get_previous_mfd_mode(next_mfd_mode);

  000a3	8b 45 f4	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ?get_previous_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z ; get_previous_mfd_mode
  000ac	89 45 f4	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax
$LN11@cycle_apac:

; 12542: 
; 12543: 		ASSERT (next_mfd_mode != oposite_mode);

  000af	8b 45 f4	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]
  000b2	3b 45 f8	 cmp	 eax, DWORD PTR _oposite_mode$[ebp]
  000b5	75 18		 jne	 SHORT $LN10@cycle_apac
  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??cycle_apache_mfd@@YGXHW4MFD_LOCATIONS@@@Z@4JA
  000bc	83 c0 2a	 add	 eax, 42			; 0000002aH
  000bf	50		 push	 eax
  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@MLBCHGI@next_mfd_mode?5?$CB?$DN?5oposite_mode@
  000ca	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@cycle_apac:

; 12544: 	}
; 12545: 
; 12546: 	select_apache_mfd_mode (next_mfd_mode, location);

  000cf	8b 45 0c	 mov	 eax, DWORD PTR _location$[ebp]
  000d2	50		 push	 eax
  000d3	8b 4d f4	 mov	 ecx, DWORD PTR _next_mfd_mode$[ebp]
  000d6	51		 push	 ecx
  000d7	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12547: }

  000dc	5f		 pop	 edi
  000dd	5e		 pop	 esi
  000de	5b		 pop	 ebx
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c2 08 00	 ret	 8
?cycle_apache_mfd@@YGXHW4MFD_LOCATIONS@@@Z ENDP		; cycle_apache_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?get_previous_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z
_TEXT	SEGMENT
tv64 = -72						; size = 4
_previous_mfd_mode$ = -4				; size = 4
_mfd_mode$ = 8						; size = 4
?get_previous_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z PROC	; get_previous_mfd_mode, COMDAT

; 12413: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12414: 	mfd_modes
; 12415: 		previous_mfd_mode = MFD_MODE_OFF;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 0

; 12416: 
; 12417: 	switch (mfd_mode)

  00010	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00013	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  00016	83 7d b8 0d	 cmp	 DWORD PTR tv64[ebp], 13	; 0000000dH
  0001a	77 7b		 ja	 SHORT $LN16@get_previo
  0001c	8b 4d b8	 mov	 ecx, DWORD PTR tv64[ebp]
  0001f	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN18@get_previo[ecx*4]
$LN4@get_previo:

; 12418: 	{
; 12419: 		case MFD_MODE_OFF:
; 12420: 		{
; 12421: 			previous_mfd_mode = MFD_MODE_TSD;

  00026	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 8

; 12422: 
; 12423: 			break;

  0002d	eb 79		 jmp	 SHORT $LN2@get_previo
$LN5@get_previo:

; 12424: 		}
; 12425: 		case MFD_MODE_DAMAGED:
; 12426: 		{
; 12427: 			previous_mfd_mode = MFD_MODE_DAMAGED;

  0002f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 1

; 12428: 
; 12429: 			break;

  00036	eb 70		 jmp	 SHORT $LN2@get_previo
$LN6@get_previo:

; 12430: 		}
; 12431: 		case MFD_MODE_GROUND_RADAR:
; 12432: 		case MFD_MODE_AIR_RADAR:
; 12433: 		{
; 12434: 			previous_mfd_mode = MFD_MODE_FLIGHT;

  00038	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 13 ; 0000000dH

; 12435: 
; 12436: 			break;

  0003f	eb 67		 jmp	 SHORT $LN2@get_previo
$LN7@get_previo:

; 12437: 		}
; 12438: 		case MFD_MODE_FLIR:
; 12439: 		case MFD_MODE_DTV:
; 12440: 		case MFD_MODE_DVO:
; 12441: 		{
; 12442: 			previous_mfd_mode = get_mfd_mode_for_radar();

  00041	e8 00 00 00 00	 call	 ?get_mfd_mode_for_radar@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_radar
  00046	89 45 fc	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax

; 12443: 
; 12444: 			break;

  00049	eb 5d		 jmp	 SHORT $LN2@get_previo
$LN8@get_previo:

; 12445: 		}
; 12446: 		case MFD_MODE_TSD:
; 12447: 		{
; 12448: 			if (tsd_tads_underlay_active)

  0004b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?tsd_tads_underlay_active@@3FA
  00052	85 c0		 test	 eax, eax
  00054	74 0a		 je	 SHORT $LN9@get_previo

; 12449: 				previous_mfd_mode = get_mfd_mode_for_radar();

  00056	e8 00 00 00 00	 call	 ?get_mfd_mode_for_radar@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_radar
  0005b	89 45 fc	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax

; 12450: 			else

  0005e	eb 08		 jmp	 SHORT $LN10@get_previo
$LN9@get_previo:

; 12451: 				previous_mfd_mode = get_mfd_mode_for_eo_sensor ();

  00060	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00065	89 45 fc	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax
$LN10@get_previo:

; 12452: 
; 12453: 			break;

  00068	eb 3e		 jmp	 SHORT $LN2@get_previo
$LN11@get_previo:

; 12454: 		}
; 12455: 		case MFD_MODE_ASE:
; 12456: 		{
; 12457: 			previous_mfd_mode = MFD_MODE_TSD;

  0006a	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 8

; 12458: 
; 12459: 			break;

  00071	eb 35		 jmp	 SHORT $LN2@get_previo
$LN12@get_previo:

; 12460: 		}
; 12461: 		case MFD_MODE_WEAPON:
; 12462: 		{
; 12463: 			previous_mfd_mode = MFD_MODE_ASE;

  00073	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 9

; 12464: 
; 12465: 			break;

  0007a	eb 2c		 jmp	 SHORT $LN2@get_previo
$LN13@get_previo:

; 12466: 		}
; 12467: 		case MFD_MODE_SYSTEM:
; 12468: 		{
; 12469: 			previous_mfd_mode = MFD_MODE_WEAPON;

  0007c	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 10 ; 0000000aH

; 12470: 
; 12471: 			break;

  00083	eb 23		 jmp	 SHORT $LN2@get_previo
$LN14@get_previo:

; 12472: 		}
; 12473: 		case MFD_MODE_ENGINE:
; 12474: 		{
; 12475: 			previous_mfd_mode = MFD_MODE_SYSTEM;

  00085	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 11 ; 0000000bH

; 12476: 
; 12477: 			break;

  0008c	eb 1a		 jmp	 SHORT $LN2@get_previo
$LN15@get_previo:

; 12478: 		}
; 12479: 		case MFD_MODE_FLIGHT:
; 12480: 		{
; 12481: 			previous_mfd_mode = MFD_MODE_ENGINE;

  0008e	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 12 ; 0000000cH

; 12482: 
; 12483: 			break;

  00095	eb 11		 jmp	 SHORT $LN2@get_previo
$LN16@get_previo:

; 12484: 		}
; 12485: 		default:
; 12486: 		{
; 12487: 			debug_fatal ("Invalid mfd mode = %d", mfd_mode);

  00097	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  0009a	50		 push	 eax
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@CLGDNIGP@Invalid?5mfd?5mode?5?$DN?5?$CFd@
  000a0	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000a5	83 c4 08	 add	 esp, 8
$LN2@get_previo:

; 12488: 
; 12489: 			break;
; 12490: 		}
; 12491: 	}
; 12492: 
; 12493: 	return (previous_mfd_mode);

  000a8	8b 45 fc	 mov	 eax, DWORD PTR _previous_mfd_mode$[ebp]

; 12494: }

  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	5b		 pop	 ebx
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c2 04 00	 ret	 4
$LN18@get_previo:
  000b4	00 00 00 00	 DD	 $LN4@get_previo
  000b8	00 00 00 00	 DD	 $LN5@get_previo
  000bc	00 00 00 00	 DD	 $LN6@get_previo
  000c0	00 00 00 00	 DD	 $LN6@get_previo
  000c4	00 00 00 00	 DD	 $LN7@get_previo
  000c8	00 00 00 00	 DD	 $LN7@get_previo
  000cc	00 00 00 00	 DD	 $LN7@get_previo
  000d0	00 00 00 00	 DD	 $LN16@get_previo
  000d4	00 00 00 00	 DD	 $LN8@get_previo
  000d8	00 00 00 00	 DD	 $LN11@get_previo
  000dc	00 00 00 00	 DD	 $LN12@get_previo
  000e0	00 00 00 00	 DD	 $LN13@get_previo
  000e4	00 00 00 00	 DD	 $LN14@get_previo
  000e8	00 00 00 00	 DD	 $LN15@get_previo
?get_previous_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z ENDP	; get_previous_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?get_next_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z
_TEXT	SEGMENT
tv64 = -72						; size = 4
_next_mfd_mode$ = -4					; size = 4
_mfd_mode$ = 8						; size = 4
?get_next_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z PROC	; get_next_mfd_mode, COMDAT

; 12325: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12326: 	mfd_modes
; 12327: 		next_mfd_mode;
; 12328: 
; 12329: 	switch (mfd_mode)

  00009	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  0000c	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  0000f	83 7d b8 0d	 cmp	 DWORD PTR tv64[ebp], 13	; 0000000dH
  00013	77 7a		 ja	 SHORT $LN16@get_next_m
  00015	8b 4d b8	 mov	 ecx, DWORD PTR tv64[ebp]
  00018	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN18@get_next_m[ecx*4]
$LN4@get_next_m:

; 12330: 	{
; 12331: 		case MFD_MODE_OFF:
; 12332: 		{
; 12333: 			next_mfd_mode = MFD_MODE_ENGINE;

  0001f	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 12 ; 0000000cH

; 12334: 
; 12335: 			break;

  00026	eb 78		 jmp	 SHORT $LN2@get_next_m
$LN5@get_next_m:

; 12336: 		}
; 12337: 		case MFD_MODE_DAMAGED:
; 12338: 		{
; 12339: 			next_mfd_mode = MFD_MODE_DAMAGED;

  00028	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 1

; 12340: 
; 12341: 			break;

  0002f	eb 6f		 jmp	 SHORT $LN2@get_next_m
$LN6@get_next_m:

; 12342: 		}
; 12343: 		case MFD_MODE_GROUND_RADAR:
; 12344: 		case MFD_MODE_AIR_RADAR:
; 12345: 		{
; 12346: 			if (tsd_tads_underlay_active)

  00031	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?tsd_tads_underlay_active@@3FA
  00038	85 c0		 test	 eax, eax
  0003a	74 09		 je	 SHORT $LN7@get_next_m

; 12347: 				next_mfd_mode = MFD_MODE_TSD;

  0003c	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 8

; 12348: 			else

  00043	eb 08		 jmp	 SHORT $LN8@get_next_m
$LN7@get_next_m:

; 12349: 				next_mfd_mode = get_mfd_mode_for_eo_sensor ();

  00045	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  0004a	89 45 fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax
$LN8@get_next_m:

; 12350: 
; 12351: 			break;

  0004d	eb 51		 jmp	 SHORT $LN2@get_next_m
$LN9@get_next_m:

; 12352: 		}
; 12353: 		case MFD_MODE_FLIR:
; 12354: 		case MFD_MODE_DTV:
; 12355: 		case MFD_MODE_DVO:
; 12356: 		{
; 12357: 			next_mfd_mode = MFD_MODE_TSD;

  0004f	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 8

; 12358: 
; 12359: 			break;

  00056	eb 48		 jmp	 SHORT $LN2@get_next_m
$LN10@get_next_m:

; 12360: 		}
; 12361: 		case MFD_MODE_TSD:
; 12362: 		{
; 12363: 			next_mfd_mode = MFD_MODE_ASE;

  00058	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 9

; 12364: 
; 12365: 			break;

  0005f	eb 3f		 jmp	 SHORT $LN2@get_next_m
$LN11@get_next_m:

; 12366: 		}
; 12367: 		case MFD_MODE_ASE:
; 12368: 		{
; 12369: 			next_mfd_mode = MFD_MODE_WEAPON;

  00061	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 10 ; 0000000aH

; 12370: 
; 12371: 			break;

  00068	eb 36		 jmp	 SHORT $LN2@get_next_m
$LN12@get_next_m:

; 12372: 		}
; 12373: 		case MFD_MODE_WEAPON:
; 12374: 		{
; 12375: 			next_mfd_mode = MFD_MODE_SYSTEM;

  0006a	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 11 ; 0000000bH

; 12376: 
; 12377: 			break;

  00071	eb 2d		 jmp	 SHORT $LN2@get_next_m
$LN13@get_next_m:

; 12378: 		}
; 12379: 		case MFD_MODE_SYSTEM:
; 12380: 		{
; 12381: 			next_mfd_mode = MFD_MODE_ENGINE;

  00073	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 12 ; 0000000cH

; 12382: 
; 12383: 			break;

  0007a	eb 24		 jmp	 SHORT $LN2@get_next_m
$LN14@get_next_m:

; 12384: 		}
; 12385: 		case MFD_MODE_ENGINE:
; 12386: 		{
; 12387: 			next_mfd_mode = MFD_MODE_FLIGHT;

  0007c	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 13 ; 0000000dH

; 12388: 
; 12389: 			break;

  00083	eb 1b		 jmp	 SHORT $LN2@get_next_m
$LN15@get_next_m:

; 12390: 		}
; 12391: 		case MFD_MODE_FLIGHT:
; 12392: 		{
; 12393: 			next_mfd_mode = get_mfd_mode_for_radar();

  00085	e8 00 00 00 00	 call	 ?get_mfd_mode_for_radar@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_radar
  0008a	89 45 fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax

; 12394: 
; 12395: 			break;

  0008d	eb 11		 jmp	 SHORT $LN2@get_next_m
$LN16@get_next_m:

; 12396: 		}
; 12397: 		default:
; 12398: 		{
; 12399: 			debug_fatal ("Invalid mfd mode = %d", mfd_mode);

  0008f	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00092	50		 push	 eax
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@CLGDNIGP@Invalid?5mfd?5mode?5?$DN?5?$CFd@
  00098	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0009d	83 c4 08	 add	 esp, 8
$LN2@get_next_m:

; 12400: 
; 12401: 			break;
; 12402: 		}
; 12403: 	}
; 12404: 
; 12405: 	return (next_mfd_mode);

  000a0	8b 45 fc	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]

; 12406: }

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 04 00	 ret	 4
$LN18@get_next_m:
  000ac	00 00 00 00	 DD	 $LN4@get_next_m
  000b0	00 00 00 00	 DD	 $LN5@get_next_m
  000b4	00 00 00 00	 DD	 $LN6@get_next_m
  000b8	00 00 00 00	 DD	 $LN6@get_next_m
  000bc	00 00 00 00	 DD	 $LN9@get_next_m
  000c0	00 00 00 00	 DD	 $LN9@get_next_m
  000c4	00 00 00 00	 DD	 $LN9@get_next_m
  000c8	00 00 00 00	 DD	 $LN16@get_next_m
  000cc	00 00 00 00	 DD	 $LN10@get_next_m
  000d0	00 00 00 00	 DD	 $LN11@get_next_m
  000d4	00 00 00 00	 DD	 $LN12@get_next_m
  000d8	00 00 00 00	 DD	 $LN13@get_next_m
  000dc	00 00 00 00	 DD	 $LN14@get_next_m
  000e0	00 00 00 00	 DD	 $LN15@get_next_m
?get_next_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z ENDP	; get_next_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?get_mfd_mode_for_radar@@YG?AW4MFD_MODES@@XZ
_TEXT	SEGMENT
?get_mfd_mode_for_radar@@YG?AW4MFD_MODES@@XZ PROC	; get_mfd_mode_for_radar, COMDAT

; 12198: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12199: 	if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_AIR_RADAR || air_radar_is_active())

  00009	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 2 ; target_acquisition_system
  00010	74 09		 je	 SHORT $LN3@get_mfd_mo
  00012	e8 00 00 00 00	 call	 ?air_radar_is_active@@YGHXZ ; air_radar_is_active
  00017	85 c0		 test	 eax, eax
  00019	74 07		 je	 SHORT $LN2@get_mfd_mo
$LN3@get_mfd_mo:

; 12200: 		return MFD_MODE_AIR_RADAR;

  0001b	b8 03 00 00 00	 mov	 eax, 3
  00020	eb 05		 jmp	 SHORT $LN1@get_mfd_mo
$LN2@get_mfd_mo:

; 12201: 
; 12202: 	return MFD_MODE_GROUND_RADAR;

  00022	b8 02 00 00 00	 mov	 eax, 2
$LN1@get_mfd_mo:

; 12203: }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?get_mfd_mode_for_radar@@YG?AW4MFD_MODES@@XZ ENDP	; get_mfd_mode_for_radar
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_translucent_mfd_background@@YGXMMMM@Z
_TEXT	SEGMENT
_specular$ = -264					; size = 4
_colour$ = -260						; size = 4
_quad$ = -256						; size = 256
_x_min$ = 8						; size = 4
_y_min$ = 12						; size = 4
_x_max$ = 16						; size = 4
_y_max$ = 20						; size = 4
?draw_translucent_mfd_background@@YGXMMMM@Z PROC	; draw_translucent_mfd_background, COMDAT

; 11526: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 48 01 00
	00		 sub	 esp, 328		; 00000148H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 11527: 	vertex
; 11528: 		quad[4];
; 11529: 
; 11530: 	real_colour
; 11531: 		colour,
; 11532: 		specular;
; 11533: 
; 11534: 	set_3d_active_environment (main_3d_env);

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 11535: 
; 11536: 	if (begin_3d_scene ())

  00017	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  0001c	85 c0		 test	 eax, eax
  0001e	0f 84 5a 02 00
	00		 je	 $LN2@draw_trans

; 11537: 	{
; 11538: 		colour.red = 0;

  00024	c6 85 fe fe ff
	ff 00		 mov	 BYTE PTR _colour$[ebp+2], 0

; 11539: 		colour.green = 0;

  0002b	c6 85 fd fe ff
	ff 00		 mov	 BYTE PTR _colour$[ebp+1], 0

; 11540: 		colour.blue = 0;

  00032	c6 85 fc fe ff
	ff 00		 mov	 BYTE PTR _colour$[ebp], 0

; 11541: 		colour.alpha = 64;

  00039	c6 85 ff fe ff
	ff 40		 mov	 BYTE PTR _colour$[ebp+3], 64 ; 00000040H

; 11542: 
; 11543: 		specular.red = 0;

  00040	c6 85 fa fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+2], 0

; 11544: 		specular.green = 0;

  00047	c6 85 f9 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+1], 0

; 11545: 		specular.blue = 0;

  0004e	c6 85 f8 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp], 0

; 11546: 		specular.alpha = 255;

  00055	c6 85 fb fe ff
	ff ff		 mov	 BYTE PTR _specular$[ebp+3], 255 ; 000000ffH

; 11547: 
; 11548: 		set_d3d_transparency_on ();

  0005c	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 11549: 
; 11550: 		set_d3d_zbuffer_comparison (FALSE);

  00061	6a 00		 push	 0
  00063	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 11551: 
; 11552: 		set_d3d_plain_renderstate ();

  00068	e8 00 00 00 00	 call	 ?set_d3d_plain_renderstate@@YGXXZ ; set_d3d_plain_renderstate

; 11553: 
; 11554: 		set_d3d_culling (FALSE);

  0006d	6a 00		 push	 0
  0006f	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 11555: 
; 11556: 		quad[0].i = x_min;

  00074	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00079	6b c8 00	 imul	 ecx, eax, 0
  0007c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00081	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 11557: 		quad[0].j = y_min;

  0008a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0008f	6b c8 00	 imul	 ecx, eax, 0
  00092	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  00097	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 11558: 		quad[0].z = 0.5;

  000a0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000a5	6b c8 00	 imul	 ecx, eax, 0
  000a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000b0	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 11559: 		quad[0].q = 0.5;

  000b9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000be	6b c8 00	 imul	 ecx, eax, 0
  000c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000c9	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 11560: 		quad[0].next_vertex = &quad[1];

  000d2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000d7	c1 e0 00	 shl	 eax, 0
  000da	8d 8c 05 00 ff
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  000e1	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000e6	6b c2 00	 imul	 eax, edx, 0
  000e9	89 8c 05 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], ecx

; 11561: 
; 11562: 		quad[1].i = x_max;

  000f0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000f5	c1 e0 00	 shl	 eax, 0
  000f8	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  000fd	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 11563: 		quad[1].j = y_min;

  00106	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0010b	c1 e0 00	 shl	 eax, 0
  0010e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  00113	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 11564: 		quad[1].z = 0.5;

  0011c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00121	c1 e0 00	 shl	 eax, 0
  00124	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0012c	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 11565: 		quad[1].q = 0.5;

  00135	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0013a	c1 e0 00	 shl	 eax, 0
  0013d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00145	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 11566: 		quad[1].next_vertex = &quad[2];

  0014e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00153	d1 e0		 shl	 eax, 1
  00155	8d 8c 05 00 ff
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  0015c	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00161	c1 e2 00	 shl	 edx, 0
  00164	89 8c 15 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+edx+40], ecx

; 11567: 
; 11568: 		quad[2].i = x_max;

  0016b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00170	d1 e0		 shl	 eax, 1
  00172	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00177	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 11569: 		quad[2].j = y_max;

  00180	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00185	d1 e0		 shl	 eax, 1
  00187	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  0018c	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 11570: 		quad[2].z = 0.5;

  00195	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0019a	d1 e0		 shl	 eax, 1
  0019c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001a4	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 11571: 		quad[2].q = 0.5;

  001ad	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001b2	d1 e0		 shl	 eax, 1
  001b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001bc	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 11572: 		quad[2].next_vertex = &quad[3];

  001c5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001ca	6b c8 03	 imul	 ecx, eax, 3
  001cd	8d 94 0d 00 ff
	ff ff		 lea	 edx, DWORD PTR _quad$[ebp+ecx]
  001d4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001d9	d1 e0		 shl	 eax, 1
  001db	89 94 05 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], edx

; 11573: 
; 11574: 		quad[3].i = x_min;

  001e2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001e7	6b c8 03	 imul	 ecx, eax, 3
  001ea	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  001ef	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 11575: 		quad[3].j = y_max;

  001f8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001fd	6b c8 03	 imul	 ecx, eax, 3
  00200	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  00205	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 11576: 		quad[3].z = 0.5;

  0020e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00213	6b c8 03	 imul	 ecx, eax, 3
  00216	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0021e	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 11577: 		quad[3].q = 0.5;

  00227	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0022c	6b c8 03	 imul	 ecx, eax, 3
  0022f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00237	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 11578: 		quad[3].next_vertex = NULL;

  00240	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00245	6b c8 03	 imul	 ecx, eax, 3
  00248	c7 84 0d 28 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$[ebp+ecx+40], 0

; 11579: 
; 11580: 		draw_wbuffered_plain_polygon (quad, colour, specular);

  00253	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _specular$[ebp]
  00259	50		 push	 eax
  0025a	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _colour$[ebp]
  00260	51		 push	 ecx
  00261	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR _quad$[ebp]
  00267	52		 push	 edx
  00268	e8 00 00 00 00	 call	 ?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_plain_polygon

; 11581: 
; 11582: 		set_d3d_transparency_off ();

  0026d	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 11583: 
; 11584: 		set_d3d_zbuffer_comparison (TRUE);

  00272	6a 01		 push	 1
  00274	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 11585: 
; 11586: 		end_3d_scene ();

  00279	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN2@draw_trans:

; 11587: 	}
; 11588: }

  0027e	5f		 pop	 edi
  0027f	5e		 pop	 esi
  00280	5b		 pop	 ebx
  00281	8b e5		 mov	 esp, ebp
  00283	5d		 pop	 ebp
  00284	c2 10 00	 ret	 16			; 00000010H
?draw_translucent_mfd_background@@YGXMMMM@Z ENDP	; draw_translucent_mfd_background
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_apache_tads_alnum_display@@YGXH@Z
_TEXT	SEGMENT
_line_height$1 = -96					; size = 4
_y$2 = -92						; size = 4
_x$3 = -88						; size = 4
_s$4 = -84						; size = 4
_buffer$5 = -80						; size = 80
_dummy$ = 8						; size = 4
?draw_apache_tads_alnum_display@@YGXH@Z PROC		; draw_apache_tads_alnum_display, COMDAT

; 10871: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 10872: 	draw_2d_line(-1.1, 1.1, 1.1, 1.1, sys_col_white);

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  0001b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00020	51		 push	 ecx
  00021	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  00029	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002e	51		 push	 ecx
  0002f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  00037	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003c	51		 push	 ecx
  0003d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  00045	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10873: 	draw_2d_line(-1.1, -1.1, -1.1, 1.1, sys_col_white);

  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  00054	50		 push	 eax
  00055	51		 push	 ecx
  00056	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  0005e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00063	51		 push	 ecx
  00064	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	51		 push	 ecx
  00072	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  0007a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007f	51		 push	 ecx
  00080	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  00088	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10874: 	draw_2d_line(-1.1, -1.1, -1.1, 1.1, sys_col_white);

  00092	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  00097	50		 push	 eax
  00098	51		 push	 ecx
  00099	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  000a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a6	51		 push	 ecx
  000a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  000af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b4	51		 push	 ecx
  000b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  000bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c2	51		 push	 ecx
  000c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  000cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10875: 	draw_2d_line(1.1, -1.1, 1.1, 1.1, sys_col_white);

  000d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  000da	50		 push	 eax
  000db	51		 push	 ecx
  000dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  000e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e9	51		 push	 ecx
  000ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  000f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f7	51		 push	 ecx
  000f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  00100	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00105	51		 push	 ecx
  00106	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  0010e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00113	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10876: 
; 10877: 	draw_2d_line(-0.6, -1.1, -0.6, 1.1, sys_col_white);

  00118	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  0011d	50		 push	 eax
  0011e	51		 push	 ecx
  0011f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  00127	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012c	51		 push	 ecx
  0012d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00135	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013a	51		 push	 ecx
  0013b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  00143	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00148	51		 push	 ecx
  00149	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00151	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00156	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10878: 	draw_2d_line(0.6, -1.1, 0.6, 1.1, sys_col_white);

  0015b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  00160	50		 push	 eax
  00161	51		 push	 ecx
  00162	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  0016a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016f	51		 push	 ecx
  00170	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00178	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017d	51		 push	 ecx
  0017e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  00186	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018b	51		 push	 ecx
  0018c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00194	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00199	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10879: 
; 10880: 	set_mono_font_colour(sys_col_white);

  0019e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  001a3	50		 push	 eax
  001a4	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 10881: 	set_mono_font_type(MONO_FONT_TYPE_5X9);

  001a9	6a 02		 push	 2
  001ab	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 10882: 
; 10883: 	// weapons
; 10884: 	draw_alnum_weapons();

  001b0	e8 00 00 00 00	 call	 ?draw_alnum_weapons@@YGXXZ ; draw_alnum_weapons

; 10885: 
; 10886: 	// text status displays
; 10887: 	{
; 10888: 		char buffer[80];
; 10889: 		const char *s = NULL;

  001b5	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _s$4[ebp], 0

; 10890: 		float x = -0.55;

  001bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  001c4	f3 0f 11 45 a8	 movss	 DWORD PTR _x$3[ebp], xmm0

; 10891: 		float y = 0.8;

  001c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  001d1	f3 0f 11 45 a4	 movss	 DWORD PTR _y$2[ebp], xmm0

; 10892: 		float line_height = 0.45;

  001d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  001de	f3 0f 11 45 a0	 movss	 DWORD PTR _line_height$1[ebp], xmm0

; 10893: 
; 10894: 		s = get_sight_status();

  001e3	e8 00 00 00 00	 call	 ?get_sight_status@@YGPBDXZ ; get_sight_status
  001e8	89 45 ac	 mov	 DWORD PTR _s$4[ebp], eax

; 10895: 		set_2d_mono_font_position(x, y);

  001eb	51		 push	 ecx
  001ec	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y$2[ebp]
  001f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f6	51		 push	 ecx
  001f7	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x$3[ebp]
  001fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00201	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10896: 		set_mono_font_rel_position(0, 0);

  00206	51		 push	 ecx
  00207	0f 57 c0	 xorps	 xmm0, xmm0
  0020a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020f	51		 push	 ecx
  00210	0f 57 c0	 xorps	 xmm0, xmm0
  00213	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00218	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10897: 		print_mono_font_string(s);

  0021d	8b 45 ac	 mov	 eax, DWORD PTR _s$4[ebp]
  00220	50		 push	 eax
  00221	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10898: 
; 10899: 		// weapon status
; 10900: 		s = get_weapon_status(buffer, sizeof(buffer));

  00226	6a 50		 push	 80			; 00000050H
  00228	8d 45 b0	 lea	 eax, DWORD PTR _buffer$5[ebp]
  0022b	50		 push	 eax
  0022c	e8 00 00 00 00	 call	 ?get_weapon_status@@YGPBDPADI@Z ; get_weapon_status
  00231	89 45 ac	 mov	 DWORD PTR _s$4[ebp], eax

; 10901: 		set_2d_mono_font_position(0.0, y);

  00234	51		 push	 ecx
  00235	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y$2[ebp]
  0023a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023f	51		 push	 ecx
  00240	0f 57 c0	 xorps	 xmm0, xmm0
  00243	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00248	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10902: 		print_mono_font_string(s);

  0024d	8b 45 ac	 mov	 eax, DWORD PTR _s$4[ebp]
  00250	50		 push	 eax
  00251	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10903: 
; 10904: 		y -= line_height;

  00256	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y$2[ebp]
  0025b	f3 0f 5c 45 a0	 subss	 xmm0, DWORD PTR _line_height$1[ebp]
  00260	f3 0f 11 45 a4	 movss	 DWORD PTR _y$2[ebp], xmm0

; 10905: 
; 10906: 		// tracker status
; 10907: 		s = get_tracker_status();

  00265	e8 00 00 00 00	 call	 ?get_tracker_status@@YGPBDXZ ; get_tracker_status
  0026a	89 45 ac	 mov	 DWORD PTR _s$4[ebp], eax

; 10908: 		set_2d_mono_font_position(x, y);

  0026d	51		 push	 ecx
  0026e	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y$2[ebp]
  00273	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00278	51		 push	 ecx
  00279	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x$3[ebp]
  0027e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00283	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10909: 		print_mono_font_string(s);

  00288	8b 45 ac	 mov	 eax, DWORD PTR _s$4[ebp]
  0028b	50		 push	 eax
  0028c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10910: 
; 10911: 		y -= line_height;

  00291	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y$2[ebp]
  00296	f3 0f 5c 45 a0	 subss	 xmm0, DWORD PTR _line_height$1[ebp]
  0029b	f3 0f 11 45 a4	 movss	 DWORD PTR _y$2[ebp], xmm0

; 10912: 
; 10913: 		// get spot tracker and range finder codes
; 10914: 		s = get_lst_and_lrf_codes_status();

  002a0	e8 00 00 00 00	 call	 ?get_lst_and_lrf_codes_status@@YGPBDXZ ; get_lst_and_lrf_codes_status
  002a5	89 45 ac	 mov	 DWORD PTR _s$4[ebp], eax

; 10915: 		set_2d_mono_font_position(x, y);

  002a8	51		 push	 ecx
  002a9	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y$2[ebp]
  002ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b3	51		 push	 ecx
  002b4	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x$3[ebp]
  002b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002be	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10916: 		print_mono_font_string(s);

  002c3	8b 45 ac	 mov	 eax, DWORD PTR _s$4[ebp]
  002c6	50		 push	 eax
  002c7	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10917: 	}
; 10918: }

  002cc	5f		 pop	 edi
  002cd	5e		 pop	 esi
  002ce	5b		 pop	 ebx
  002cf	8b e5		 mov	 esp, ebp
  002d1	5d		 pop	 ebp
  002d2	c2 04 00	 ret	 4
?draw_apache_tads_alnum_display@@YGXH@Z ENDP		; draw_apache_tads_alnum_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_apache_ort_symbology@@YGXH@Z
_TEXT	SEGMENT
tv64 = -68						; size = 4
_dummy$ = 8						; size = 4
?draw_apache_ort_symbology@@YGXH@Z PROC			; draw_apache_ort_symbology, COMDAT

; 10847: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10848: 	// TODO: check for damage
; 10849: 	switch (eo_sensor)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; eo_sensor
  0000e	89 45 bc	 mov	 DWORD PTR tv64[ebp], eax
  00011	83 7d bc 03	 cmp	 DWORD PTR tv64[ebp], 3
  00015	74 11		 je	 SHORT $LN4@draw_apach
  00017	83 7d bc 04	 cmp	 DWORD PTR tv64[ebp], 4
  0001b	74 19		 je	 SHORT $LN5@draw_apach
  0001d	83 7d bc 05	 cmp	 DWORD PTR tv64[ebp], 5
  00021	74 21		 je	 SHORT $LN6@draw_apach
  00023	e9 00 01 00 00	 jmp	 $LN2@draw_apach
$LN4@draw_apach:

; 10850: 	{
; 10851: 	case TARGET_ACQUISITION_SYSTEM_FLIR:
; 10852: 		draw_2d_flir_mfd(TRUE, TRUE);

  00028	6a 01		 push	 1
  0002a	6a 01		 push	 1
  0002c	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXHH@Z ; draw_2d_flir_mfd

; 10853: 		break;

  00031	e9 f2 00 00 00	 jmp	 $LN2@draw_apach
$LN5@draw_apach:

; 10854: 	case TARGET_ACQUISITION_SYSTEM_DTV:
; 10855: 		draw_2d_dtv_mfd(TRUE, TRUE);

  00036	6a 01		 push	 1
  00038	6a 01		 push	 1
  0003a	e8 00 00 00 00	 call	 ?draw_2d_dtv_mfd@@YGXHH@Z ; draw_2d_dtv_mfd

; 10856: 		break;

  0003f	e9 e4 00 00 00	 jmp	 $LN2@draw_apach
$LN6@draw_apach:

; 10857: 	case TARGET_ACQUISITION_SYSTEM_DVO:
; 10858: 		{
; 10859: 			// DVO doesn't have symbology over image, just a simple cross
; 10860: 			draw_2d_line (-1.00, 0.0, -0.10, 0.0, sys_col_white);

  00044	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  00049	50		 push	 eax
  0004a	51		 push	 ecx
  0004b	0f 57 c0	 xorps	 xmm0, xmm0
  0004e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00053	51		 push	 ecx
  00054	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  0005c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00061	51		 push	 ecx
  00062	0f 57 c0	 xorps	 xmm0, xmm0
  00065	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006a	51		 push	 ecx
  0006b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00073	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00078	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10861: 			draw_2d_line (0.10, 0.0, 1.00, 0.0, sys_col_white);

  0007d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  00082	50		 push	 eax
  00083	51		 push	 ecx
  00084	0f 57 c0	 xorps	 xmm0, xmm0
  00087	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008c	51		 push	 ecx
  0008d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00095	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009a	51		 push	 ecx
  0009b	0f 57 c0	 xorps	 xmm0, xmm0
  0009e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a3	51		 push	 ecx
  000a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  000ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10862: 			draw_2d_line (0.0, -1.00, 0.0, -0.10, sys_col_white);

  000b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  000bb	50		 push	 eax
  000bc	51		 push	 ecx
  000bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  000c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ca	51		 push	 ecx
  000cb	0f 57 c0	 xorps	 xmm0, xmm0
  000ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d3	51		 push	 ecx
  000d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e1	51		 push	 ecx
  000e2	0f 57 c0	 xorps	 xmm0, xmm0
  000e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ea	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10863: 			draw_2d_line (0.0, 0.10, 0.0, 1.00, sys_col_white);

  000ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_white@@3UREAL_COLOUR@@A ; sys_col_white
  000f4	50		 push	 eax
  000f5	51		 push	 ecx
  000f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00103	51		 push	 ecx
  00104	0f 57 c0	 xorps	 xmm0, xmm0
  00107	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010c	51		 push	 ecx
  0010d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00115	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011a	51		 push	 ecx
  0011b	0f 57 c0	 xorps	 xmm0, xmm0
  0011e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00123	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN2@draw_apach:

; 10864: 		}
; 10865: 
; 10866: 		break;
; 10867: 	}
; 10868: }

  00128	5f		 pop	 edi
  00129	5e		 pop	 esi
  0012a	5b		 pop	 ebx
  0012b	8b e5		 mov	 esp, ebp
  0012d	5d		 pop	 ebp
  0012e	c2 04 00	 ret	 4
?draw_apache_ort_symbology@@YGXH@Z ENDP			; draw_apache_ort_symbology
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?get_lst_and_lrf_codes_status@@YGPBDXZ
_TEXT	SEGMENT
?get_lst_and_lrf_codes_status@@YGPBDXZ PROC		; get_lst_and_lrf_codes_status, COMDAT

; 10833: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10834: #if 0  // enable this if we add laser spot tracker
; 10835: 	if (laser_spot_tracker_is_active())
; 10836: 		return "LST=C RFD=D";
; 10837: 	else
; 10838: #endif
; 10839: 
; 10840: 	if (!apache_damage.laser_designator)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  0000e	c1 e8 06	 shr	 eax, 6
  00011	83 e0 01	 and	 eax, 1
  00014	75 09		 jne	 SHORT $LN2@get_lst_an

; 10841: 		return "RFD=D";

  00016	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05HEBIGJOB@RFD?$DND@
  0001b	eb 07		 jmp	 SHORT $LN1@get_lst_an

; 10842: 	else

  0001d	eb 05		 jmp	 SHORT $LN1@get_lst_an
$LN2@get_lst_an:

; 10843: 		return "";

  0001f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
$LN1@get_lst_an:

; 10844: }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?get_lst_and_lrf_codes_status@@YGPBDXZ ENDP		; get_lst_and_lrf_codes_status
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?get_tracker_status@@YGPBDXZ
_TEXT	SEGMENT
?get_tracker_status@@YGPBDXZ PROC			; get_tracker_status, COMDAT

; 10814: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10815: 	if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_FLIR
; 10816: 		|| target_acquisition_system == TARGET_ACQUISITION_SYSTEM_DTV
; 10817: 		|| target_acquisition_system == TARGET_ACQUISITION_SYSTEM_DVO)

  00009	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 3 ; target_acquisition_system
  00010	74 12		 je	 SHORT $LN3@get_tracke
  00012	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 4 ; target_acquisition_system
  00019	74 09		 je	 SHORT $LN3@get_tracke
  0001b	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 5 ; target_acquisition_system
  00022	75 30		 jne	 SHORT $LN2@get_tracke
$LN3@get_tracke:

; 10818: 	{
; 10819: 		if (laser_is_active())

  00024	e8 00 00 00 00	 call	 ?laser_is_active@@YGHXZ	; laser_is_active
  00029	85 c0		 test	 eax, eax
  0002b	74 07		 je	 SHORT $LN4@get_tracke

; 10820: 			return "LASE...TARGET";

  0002d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0O@MBLKLAJE@LASE?4?4?4TARGET@
  00032	eb 25		 jmp	 SHORT $LN1@get_tracke
$LN4@get_tracke:

; 10821: 		if (eo_is_tracking_point())

  00034	e8 00 00 00 00	 call	 ?eo_is_tracking_point@@YGHXZ ; eo_is_tracking_point
  00039	85 c0		 test	 eax, eax
  0003b	74 07		 je	 SHORT $LN5@get_tracke

; 10822: 			return "IAT OFFSET";

  0003d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0L@FDACEBPE@IAT?5OFFSET@
  00042	eb 15		 jmp	 SHORT $LN1@get_tracke
$LN5@get_tracke:

; 10823: 		if (eo_is_locked())

  00044	e8 00 00 00 00	 call	 ?eo_is_locked@@YGHXZ	; eo_is_locked
  00049	85 c0		 test	 eax, eax
  0004b	74 07		 je	 SHORT $LN2@get_tracke

; 10824: 			return "IAT TRACKING";

  0004d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0N@LJGBJBPO@IAT?5TRACKING@
  00052	eb 05		 jmp	 SHORT $LN1@get_tracke
$LN2@get_tracke:

; 10825: 	}
; 10826: 
; 10827: 	return "TADS FORWARD";

  00054	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0N@GKHMPBNK@TADS?5FORWARD@
$LN1@get_tracke:

; 10828: 
; 10829: 	// TODO add Laser spot tracking if we implement tracking other units' lasers
; 10830: }

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?get_tracker_status@@YGPBDXZ ENDP			; get_tracker_status
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?get_sight_status@@YGPBDXZ
_TEXT	SEGMENT
tv64 = -68						; size = 4
?get_sight_status@@YGPBDXZ PROC				; get_sight_status, COMDAT

; 10741: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10742: 	// sight status
; 10743: 	switch (eo_sensor)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; eo_sensor
  0000e	89 45 bc	 mov	 DWORD PTR tv64[ebp], eax
  00011	83 7d bc 03	 cmp	 DWORD PTR tv64[ebp], 3
  00015	74 0e		 je	 SHORT $LN4@get_sight_
  00017	83 7d bc 04	 cmp	 DWORD PTR tv64[ebp], 4
  0001b	74 1e		 je	 SHORT $LN6@get_sight_
  0001d	83 7d bc 05	 cmp	 DWORD PTR tv64[ebp], 5
  00021	74 2e		 je	 SHORT $LN8@get_sight_
  00023	eb 40		 jmp	 SHORT $LN2@get_sight_
$LN4@get_sight_:

; 10744: 	{
; 10745: 	case TARGET_ACQUISITION_SYSTEM_FLIR:
; 10746: 		if (apache_damage.flir)

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  0002a	c1 e8 02	 shr	 eax, 2
  0002d	83 e0 01	 and	 eax, 1
  00030	74 07		 je	 SHORT $LN5@get_sight_

; 10747: 			return "FLIR FAIL";

  00032	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09OFNPBAOE@FLIR?5FAIL@
  00037	eb 67		 jmp	 SHORT $LN1@get_sight_
$LN5@get_sight_:

; 10748: 		break;

  00039	eb 2a		 jmp	 SHORT $LN2@get_sight_
$LN6@get_sight_:

; 10749: 	case TARGET_ACQUISITION_SYSTEM_DTV:
; 10750: 		if (apache_damage.dtv)

  0003b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  00040	c1 e8 03	 shr	 eax, 3
  00043	83 e0 01	 and	 eax, 1
  00046	74 07		 je	 SHORT $LN7@get_sight_

; 10751: 			return "TV FAIL";

  00048	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07NLIECAOG@TV?5FAIL@
  0004d	eb 51		 jmp	 SHORT $LN1@get_sight_
$LN7@get_sight_:

; 10752: 		break;

  0004f	eb 14		 jmp	 SHORT $LN2@get_sight_
$LN8@get_sight_:

; 10753: 	case TARGET_ACQUISITION_SYSTEM_DVO:
; 10754: 		if (apache_damage.dvo)

  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  00056	c1 e8 04	 shr	 eax, 4
  00059	83 e0 01	 and	 eax, 1
  0005c	74 07		 je	 SHORT $LN2@get_sight_

; 10755: 			return "DVO FAIL";

  0005e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08GLLCGHEK@DVO?5FAIL@
  00063	eb 3b		 jmp	 SHORT $LN1@get_sight_
$LN2@get_sight_:

; 10756: 		break;
; 10757: 	}
; 10758: 
; 10759: 	if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_FLIR
; 10760: 		|| target_acquisition_system == TARGET_ACQUISITION_SYSTEM_DTV
; 10761: 		|| target_acquisition_system == TARGET_ACQUISITION_SYSTEM_DVO)

  00065	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 3 ; target_acquisition_system
  0006c	74 12		 je	 SHORT $LN12@get_sight_
  0006e	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 4 ; target_acquisition_system
  00075	74 09		 je	 SHORT $LN12@get_sight_
  00077	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 5 ; target_acquisition_system
  0007e	75 1b		 jne	 SHORT $LN10@get_sight_
$LN12@get_sight_:

; 10762: 	{
; 10763: 		if (eo_is_locked())

  00080	e8 00 00 00 00	 call	 ?eo_is_locked@@YGHXZ	; eo_is_locked
  00085	85 c0		 test	 eax, eax
  00087	74 09		 je	 SHORT $LN13@get_sight_

; 10764: 			return "RECORDING";

  00089	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09OPNFHOOA@RECORDING@
  0008e	eb 10		 jmp	 SHORT $LN1@get_sight_

; 10765: 		else

  00090	eb 07		 jmp	 SHORT $LN14@get_sight_
$LN13@get_sight_:

; 10766: 			return "BORESIGHT";

  00092	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09PPEFEGGK@BORESIGHT@
  00097	eb 07		 jmp	 SHORT $LN1@get_sight_
$LN14@get_sight_:

; 10767: 	}
; 10768: 	else

  00099	eb 05		 jmp	 SHORT $LN1@get_sight_
$LN10@get_sight_:

; 10769: 		return "SLAVE TG";

  0009b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08PABMPDMO@SLAVE?5TG@
$LN1@get_sight_:

; 10770: }

  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
?get_sight_status@@YGPBDXZ ENDP				; get_sight_status
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_alnum_weapons@@YGXXZ
_TEXT	SEGMENT
tv78 = -184						; size = 4
tv208 = -180						; size = 4
tv201 = -180						; size = 4
tv184 = -180						; size = 4
tv177 = -180						; size = 4
tv165 = -180						; size = 4
tv142 = -180						; size = 4
tv138 = -180						; size = 4
tv132 = -180						; size = 4
tv70 = -180						; size = 4
tv164 = -177						; size = 1
tv159 = -177						; size = 1
_buffer$1 = -112					; size = 20
_line_height$2 = -92					; size = 4
_status$3 = -86						; size = 1
_type$4 = -85						; size = 1
_status$5 = -84						; size = 4
_right_side$6 = -80					; size = 4
_pylon_index$7 = -76					; size = 4
_damaged$8 = -72					; size = 4
_number$9 = -68						; size = 4
_weapon_sub_type$10 = -64				; size = 4
_string_width$ = -60					; size = 4
_y$ = -56						; size = 4
_x$ = -52						; size = 4
_j$ = -48						; size = 4
_i$ = -44						; size = 4
_selected_weapon$ = -40					; size = 4
_weapons_status$ = -36					; size = 32
_pylon$ = -4						; size = 4
?draw_alnum_weapons@@YGXXZ PROC				; draw_alnum_weapons, COMDAT

; 10639: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 10640: 	int pylon;
; 10641: 	char weapons_status[8][4];  // all missile positions.  two rows of eight missiles, two chars per missile
; 10642: 	int selected_weapon = get_local_entity_int_value(get_gunship_entity(), INT_TYPE_SELECTED_WEAPON);

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00013	74 0f		 je	 SHORT $LN30@draw_alnum
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv70[ebp], ecx
  00022	eb 24		 jmp	 SHORT $LN31@draw_alnum
$LN30@draw_alnum:
  00024	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_alnum_weapons@@YGXXZ@4JA
  0002a	83 c2 03	 add	 edx, 3
  0002d	52		 push	 edx
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003e	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN31@draw_alnum:
  00048	b9 01 00 00 00	 mov	 ecx, 1
  0004d	85 c9		 test	 ecx, ecx
  0004f	74 0c		 je	 SHORT $LN32@draw_alnum
  00051	c7 85 48 ff ff
	ff b8 00 00 00	 mov	 DWORD PTR tv78[ebp], 184 ; 000000b8H
  0005b	eb 24		 jmp	 SHORT $LN33@draw_alnum
$LN32@draw_alnum:
  0005d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_alnum_weapons@@YGXXZ@4JA
  00063	83 c2 03	 add	 edx, 3
  00066	52		 push	 edx
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00077	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN33@draw_alnum:
  00081	68 b8 00 00 00	 push	 184			; 000000b8H
  00086	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0008c	51		 push	 ecx
  0008d	69 95 4c ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv70[ebp], 1116
  00097	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR tv78[ebp]
  0009d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000a4	ff d1		 call	 ecx
  000a6	89 45 d8	 mov	 DWORD PTR _selected_weapon$[ebp], eax

; 10643: 	int i,j;
; 10644: 	float x, y;
; 10645: 	int string_width = get_mono_font_string_width("1234567");

  000a9	68 00 00 00 00	 push	 OFFSET ??_C@_07ENBNJNMO@1234567@
  000ae	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  000b3	e8 00 00 00 00	 call	 __ftol2_sse
  000b8	89 45 c4	 mov	 DWORD PTR _string_width$[ebp], eax

; 10646: 
; 10647: 	memset(weapons_status, ' ', sizeof(weapons_status));

  000bb	6a 20		 push	 32			; 00000020H
  000bd	6a 20		 push	 32			; 00000020H
  000bf	8d 45 dc	 lea	 eax, DWORD PTR _weapons_status$[ebp]
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 _memset
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10648: 
; 10649: 	for (pylon = APACHE_LHS_INNER_PYLON; pylon <= APACHE_RHS_OUTER_PYLON; pylon++)

  000cb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pylon$[ebp], 0
  000d2	eb 09		 jmp	 SHORT $LN4@draw_alnum
$LN2@draw_alnum:
  000d4	8b 45 fc	 mov	 eax, DWORD PTR _pylon$[ebp]
  000d7	83 c0 01	 add	 eax, 1
  000da	89 45 fc	 mov	 DWORD PTR _pylon$[ebp], eax
$LN4@draw_alnum:
  000dd	83 7d fc 03	 cmp	 DWORD PTR _pylon$[ebp], 3
  000e1	0f 8f e6 02 00
	00		 jg	 $LN3@draw_alnum

; 10650: 	{
; 10651: 		entity_sub_types weapon_sub_type;
; 10652: 		int number, damaged;
; 10653: 		int pylon_index = 0;

  000e7	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _pylon_index$7[ebp], 0

; 10654: 
; 10655: 		if (get_local_entity_weapon_hardpoint_info (get_gunship_entity (),

  000ee	8d 45 b8	 lea	 eax, DWORD PTR _damaged$8[ebp]
  000f1	50		 push	 eax
  000f2	8d 4d bc	 lea	 ecx, DWORD PTR _number$9[ebp]
  000f5	51		 push	 ecx
  000f6	8d 55 c0	 lea	 edx, DWORD PTR _weapon_sub_type$10[ebp]
  000f9	52		 push	 edx
  000fa	6a 00		 push	 0
  000fc	8b 45 fc	 mov	 eax, DWORD PTR _pylon$[ebp]
  000ff	50		 push	 eax
  00100	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00106	51		 push	 ecx
  00107	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  0010c	85 c0		 test	 eax, eax
  0010e	0f 84 b4 02 00
	00		 je	 $LN10@draw_alnum

; 10656: 			pylon, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON,
; 10657: 			&weapon_sub_type, &number, &damaged))
; 10658: 		{
; 10659: 			switch (pylon)

  00114	8b 45 fc	 mov	 eax, DWORD PTR _pylon$[ebp]
  00117	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv132[ebp], eax
  0011d	83 bd 4c ff ff
	ff 03		 cmp	 DWORD PTR tv132[ebp], 3
  00124	77 2f		 ja	 SHORT $LN5@draw_alnum
  00126	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv132[ebp]
  0012c	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@draw_alnum[ecx*4]
$LN16@draw_alnum:

; 10660: 			{
; 10661: 			case APACHE_LHS_OUTER_PYLON:
; 10662: 				pylon_index = 0;

  00133	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _pylon_index$7[ebp], 0

; 10663: 				break;

  0013a	eb 19		 jmp	 SHORT $LN5@draw_alnum
$LN17@draw_alnum:

; 10664: 			case APACHE_LHS_INNER_PYLON:
; 10665: 				pylon_index = 2;

  0013c	c7 45 b4 02 00
	00 00		 mov	 DWORD PTR _pylon_index$7[ebp], 2

; 10666: 				break;

  00143	eb 10		 jmp	 SHORT $LN5@draw_alnum
$LN18@draw_alnum:

; 10667: 			case APACHE_RHS_INNER_PYLON:
; 10668: 				pylon_index = 4;

  00145	c7 45 b4 04 00
	00 00		 mov	 DWORD PTR _pylon_index$7[ebp], 4

; 10669: 				break;

  0014c	eb 07		 jmp	 SHORT $LN5@draw_alnum
$LN19@draw_alnum:

; 10670: 			case APACHE_RHS_OUTER_PYLON:
; 10671: 				pylon_index = 6;

  0014e	c7 45 b4 06 00
	00 00		 mov	 DWORD PTR _pylon_index$7[ebp], 6
$LN5@draw_alnum:

; 10672: 				break;
; 10673: 			}
; 10674: 
; 10675: 			if ((weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AGM114L_LONGBOW_HELLFIRE) || (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AGM114K_HELLFIRE_II))

  00155	83 7d c0 2d	 cmp	 DWORD PTR _weapon_sub_type$10[ebp], 45 ; 0000002dH
  00159	74 0a		 je	 SHORT $LN21@draw_alnum
  0015b	83 7d c0 2e	 cmp	 DWORD PTR _weapon_sub_type$10[ebp], 46 ; 0000002eH
  0015f	0f 85 63 02 00
	00		 jne	 $LN10@draw_alnum
$LN21@draw_alnum:

; 10676: 			{
; 10677: 				// outer missiles are fired first, so need to know which side the pylon is on
; 10678: 				int right_side = pylon == APACHE_RHS_INNER_PYLON || pylon == APACHE_RHS_OUTER_PYLON;

  00165	83 7d fc 01	 cmp	 DWORD PTR _pylon$[ebp], 1
  00169	74 12		 je	 SHORT $LN34@draw_alnum
  0016b	83 7d fc 03	 cmp	 DWORD PTR _pylon$[ebp], 3
  0016f	74 0c		 je	 SHORT $LN34@draw_alnum
  00171	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv138[ebp], 0
  0017b	eb 0a		 jmp	 SHORT $LN35@draw_alnum
$LN34@draw_alnum:
  0017d	c7 85 4c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv138[ebp], 1
$LN35@draw_alnum:
  00187	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR tv138[ebp]
  0018d	89 45 b0	 mov	 DWORD PTR _right_side$6[ebp], eax

; 10679: 
; 10680: 				if (damaged || selected_weapon == ENTITY_SUB_TYPE_WEAPON_NO_WEAPON)

  00190	83 7d b8 00	 cmp	 DWORD PTR _damaged$8[ebp], 0
  00194	75 06		 jne	 SHORT $LN24@draw_alnum
  00196	83 7d d8 00	 cmp	 DWORD PTR _selected_weapon$[ebp], 0
  0019a	75 6e		 jne	 SHORT $LN22@draw_alnum
$LN24@draw_alnum:

; 10681: 				{
; 10682: 					char* status = damaged ? "FAIL" : "SAFE";

  0019c	83 7d b8 00	 cmp	 DWORD PTR _damaged$8[ebp], 0
  001a0	74 0c		 je	 SHORT $LN36@draw_alnum
  001a2	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv142[ebp], OFFSET ??_C@_04OOEBCMBF@FAIL@
  001ac	eb 0a		 jmp	 SHORT $LN37@draw_alnum
$LN36@draw_alnum:
  001ae	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv142[ebp], OFFSET ??_C@_04JMNPMIJD@SAFE@
$LN37@draw_alnum:
  001b8	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR tv142[ebp]
  001be	89 45 ac	 mov	 DWORD PTR _status$5[ebp], eax

; 10683: 					for (i=0; i<4; i++)

  001c1	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001c8	eb 09		 jmp	 SHORT $LN9@draw_alnum
$LN7@draw_alnum:
  001ca	8b 45 d4	 mov	 eax, DWORD PTR _i$[ebp]
  001cd	83 c0 01	 add	 eax, 1
  001d0	89 45 d4	 mov	 DWORD PTR _i$[ebp], eax
$LN9@draw_alnum:
  001d3	83 7d d4 04	 cmp	 DWORD PTR _i$[ebp], 4
  001d7	7d 2c		 jge	 SHORT $LN8@draw_alnum

; 10684: 					{
; 10685: 						weapons_status[pylon_index    ][i] = status[i];

  001d9	8b 45 b4	 mov	 eax, DWORD PTR _pylon_index$7[ebp]
  001dc	8d 4c 85 dc	 lea	 ecx, DWORD PTR _weapons_status$[ebp+eax*4]
  001e0	8b 55 ac	 mov	 edx, DWORD PTR _status$5[ebp]
  001e3	03 55 d4	 add	 edx, DWORD PTR _i$[ebp]
  001e6	8b 45 d4	 mov	 eax, DWORD PTR _i$[ebp]
  001e9	8a 12		 mov	 dl, BYTE PTR [edx]
  001eb	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 10686: 						weapons_status[pylon_index + 1][i] = status[i];

  001ee	8b 45 b4	 mov	 eax, DWORD PTR _pylon_index$7[ebp]
  001f1	8d 4c 85 e0	 lea	 ecx, DWORD PTR _weapons_status$[ebp+eax*4+4]
  001f5	8b 55 ac	 mov	 edx, DWORD PTR _status$5[ebp]
  001f8	03 55 d4	 add	 edx, DWORD PTR _i$[ebp]
  001fb	8b 45 d4	 mov	 eax, DWORD PTR _i$[ebp]
  001fe	8a 12		 mov	 dl, BYTE PTR [edx]
  00200	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 10687: 					}

  00203	eb c5		 jmp	 SHORT $LN7@draw_alnum
$LN8@draw_alnum:

; 10688: 				}
; 10689: 				else

  00205	e9 be 01 00 00	 jmp	 $LN10@draw_alnum
$LN22@draw_alnum:

; 10690: 				{
; 10691: 					// From AH-64A flight manual.  First letter is type (L for Laser, R for Radar), second is status (T for Tracking, R for Ready)
; 10692: 					char type = (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AGM114L_LONGBOW_HELLFIRE) ? 'R' : 'L';

  0020a	83 7d c0 2d	 cmp	 DWORD PTR _weapon_sub_type$10[ebp], 45 ; 0000002dH
  0020e	75 09		 jne	 SHORT $LN38@draw_alnum
  00210	c6 85 4f ff ff
	ff 52		 mov	 BYTE PTR tv159[ebp], 82	; 00000052H
  00217	eb 07		 jmp	 SHORT $LN39@draw_alnum
$LN38@draw_alnum:
  00219	c6 85 4f ff ff
	ff 4c		 mov	 BYTE PTR tv159[ebp], 76	; 0000004cH
$LN39@draw_alnum:
  00220	8a 85 4f ff ff
	ff		 mov	 al, BYTE PTR tv159[ebp]
  00226	88 45 ab	 mov	 BYTE PTR _type$4[ebp], al

; 10693: 					char status = ((type == 'L') && weapon_sub_type == selected_weapon && (weapon_lock_type == WEAPON_LOCK_VALID)) ? 'T' : 'R';

  00229	0f b6 45 ab	 movzx	 eax, BYTE PTR _type$4[ebp]
  0022d	83 f8 4c	 cmp	 eax, 76			; 0000004cH
  00230	75 1a		 jne	 SHORT $LN40@draw_alnum
  00232	8b 4d c0	 mov	 ecx, DWORD PTR _weapon_sub_type$10[ebp]
  00235	3b 4d d8	 cmp	 ecx, DWORD PTR _selected_weapon$[ebp]
  00238	75 12		 jne	 SHORT $LN40@draw_alnum
  0023a	83 3d 00 00 00
	00 09		 cmp	 DWORD PTR ?weapon_lock_type@@3W4WEAPON_LOCK_TYPES@@A, 9 ; weapon_lock_type
  00241	75 09		 jne	 SHORT $LN40@draw_alnum
  00243	c6 85 4f ff ff
	ff 54		 mov	 BYTE PTR tv164[ebp], 84	; 00000054H
  0024a	eb 07		 jmp	 SHORT $LN41@draw_alnum
$LN40@draw_alnum:
  0024c	c6 85 4f ff ff
	ff 52		 mov	 BYTE PTR tv164[ebp], 82	; 00000052H
$LN41@draw_alnum:
  00253	8a 95 4f ff ff
	ff		 mov	 dl, BYTE PTR tv164[ebp]
  00259	88 55 aa	 mov	 BYTE PTR _status$3[ebp], dl

; 10694: 
; 10695: 					switch (number)

  0025c	8b 45 bc	 mov	 eax, DWORD PTR _number$9[ebp]
  0025f	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv165[ebp], eax
  00265	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv165[ebp]
  0026b	83 e9 01	 sub	 ecx, 1
  0026e	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv165[ebp], ecx
  00274	83 bd 4c ff ff
	ff 03		 cmp	 DWORD PTR tv165[ebp], 3
  0027b	0f 87 47 01 00
	00		 ja	 $LN10@draw_alnum
  00281	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv165[ebp]
  00287	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN51@draw_alnum[edx*4]
$LN25@draw_alnum:

; 10696: 					{
; 10697: 					case 4:
; 10698: 						weapons_status[pylon_index + right_side][0] = type;

  0028e	8b 45 b4	 mov	 eax, DWORD PTR _pylon_index$7[ebp]
  00291	03 45 b0	 add	 eax, DWORD PTR _right_side$6[ebp]
  00294	8d 4c 85 dc	 lea	 ecx, DWORD PTR _weapons_status$[ebp+eax*4]
  00298	ba 01 00 00 00	 mov	 edx, 1
  0029d	6b c2 00	 imul	 eax, edx, 0
  002a0	8a 55 ab	 mov	 dl, BYTE PTR _type$4[ebp]
  002a3	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 10699: 						weapons_status[pylon_index + right_side][1] = status;

  002a6	8b 45 b4	 mov	 eax, DWORD PTR _pylon_index$7[ebp]
  002a9	03 45 b0	 add	 eax, DWORD PTR _right_side$6[ebp]
  002ac	8d 4c 85 dc	 lea	 ecx, DWORD PTR _weapons_status$[ebp+eax*4]
  002b0	ba 01 00 00 00	 mov	 edx, 1
  002b5	c1 e2 00	 shl	 edx, 0
  002b8	8a 45 aa	 mov	 al, BYTE PTR _status$3[ebp]
  002bb	88 04 11	 mov	 BYTE PTR [ecx+edx], al
$LN26@draw_alnum:

; 10700: 					case 3:
; 10701: 						weapons_status[pylon_index + !right_side][0] = type;

  002be	83 7d b0 00	 cmp	 DWORD PTR _right_side$6[ebp], 0
  002c2	75 0c		 jne	 SHORT $LN42@draw_alnum
  002c4	c7 85 4c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv177[ebp], 1
  002ce	eb 0a		 jmp	 SHORT $LN43@draw_alnum
$LN42@draw_alnum:
  002d0	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv177[ebp], 0
$LN43@draw_alnum:
  002da	8b 45 b4	 mov	 eax, DWORD PTR _pylon_index$7[ebp]
  002dd	03 85 4c ff ff
	ff		 add	 eax, DWORD PTR tv177[ebp]
  002e3	8d 4c 85 dc	 lea	 ecx, DWORD PTR _weapons_status$[ebp+eax*4]
  002e7	ba 01 00 00 00	 mov	 edx, 1
  002ec	6b c2 00	 imul	 eax, edx, 0
  002ef	8a 55 ab	 mov	 dl, BYTE PTR _type$4[ebp]
  002f2	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 10702: 						weapons_status[pylon_index + !right_side][1] = status;

  002f5	83 7d b0 00	 cmp	 DWORD PTR _right_side$6[ebp], 0
  002f9	75 0c		 jne	 SHORT $LN44@draw_alnum
  002fb	c7 85 4c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv184[ebp], 1
  00305	eb 0a		 jmp	 SHORT $LN45@draw_alnum
$LN44@draw_alnum:
  00307	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv184[ebp], 0
$LN45@draw_alnum:
  00311	8b 45 b4	 mov	 eax, DWORD PTR _pylon_index$7[ebp]
  00314	03 85 4c ff ff
	ff		 add	 eax, DWORD PTR tv184[ebp]
  0031a	8d 4c 85 dc	 lea	 ecx, DWORD PTR _weapons_status$[ebp+eax*4]
  0031e	ba 01 00 00 00	 mov	 edx, 1
  00323	c1 e2 00	 shl	 edx, 0
  00326	8a 45 aa	 mov	 al, BYTE PTR _status$3[ebp]
  00329	88 04 11	 mov	 BYTE PTR [ecx+edx], al
$LN27@draw_alnum:

; 10703: 					case 2:
; 10704: 						weapons_status[pylon_index + right_side][2] = type;

  0032c	8b 45 b4	 mov	 eax, DWORD PTR _pylon_index$7[ebp]
  0032f	03 45 b0	 add	 eax, DWORD PTR _right_side$6[ebp]
  00332	8d 4c 85 dc	 lea	 ecx, DWORD PTR _weapons_status$[ebp+eax*4]
  00336	ba 01 00 00 00	 mov	 edx, 1
  0033b	d1 e2		 shl	 edx, 1
  0033d	8a 45 ab	 mov	 al, BYTE PTR _type$4[ebp]
  00340	88 04 11	 mov	 BYTE PTR [ecx+edx], al

; 10705: 						weapons_status[pylon_index + right_side][3] = status;

  00343	8b 45 b4	 mov	 eax, DWORD PTR _pylon_index$7[ebp]
  00346	03 45 b0	 add	 eax, DWORD PTR _right_side$6[ebp]
  00349	8d 4c 85 dc	 lea	 ecx, DWORD PTR _weapons_status$[ebp+eax*4]
  0034d	ba 01 00 00 00	 mov	 edx, 1
  00352	6b c2 03	 imul	 eax, edx, 3
  00355	8a 55 aa	 mov	 dl, BYTE PTR _status$3[ebp]
  00358	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
$LN28@draw_alnum:

; 10706: 					case 1:
; 10707: 						weapons_status[pylon_index + !right_side][2] = type;

  0035b	83 7d b0 00	 cmp	 DWORD PTR _right_side$6[ebp], 0
  0035f	75 0c		 jne	 SHORT $LN46@draw_alnum
  00361	c7 85 4c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv201[ebp], 1
  0036b	eb 0a		 jmp	 SHORT $LN47@draw_alnum
$LN46@draw_alnum:
  0036d	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv201[ebp], 0
$LN47@draw_alnum:
  00377	8b 45 b4	 mov	 eax, DWORD PTR _pylon_index$7[ebp]
  0037a	03 85 4c ff ff
	ff		 add	 eax, DWORD PTR tv201[ebp]
  00380	8d 4c 85 dc	 lea	 ecx, DWORD PTR _weapons_status$[ebp+eax*4]
  00384	ba 01 00 00 00	 mov	 edx, 1
  00389	d1 e2		 shl	 edx, 1
  0038b	8a 45 ab	 mov	 al, BYTE PTR _type$4[ebp]
  0038e	88 04 11	 mov	 BYTE PTR [ecx+edx], al

; 10708: 						weapons_status[pylon_index + !right_side][3] = status;

  00391	83 7d b0 00	 cmp	 DWORD PTR _right_side$6[ebp], 0
  00395	75 0c		 jne	 SHORT $LN48@draw_alnum
  00397	c7 85 4c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv208[ebp], 1
  003a1	eb 0a		 jmp	 SHORT $LN49@draw_alnum
$LN48@draw_alnum:
  003a3	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv208[ebp], 0
$LN49@draw_alnum:
  003ad	8b 45 b4	 mov	 eax, DWORD PTR _pylon_index$7[ebp]
  003b0	03 85 4c ff ff
	ff		 add	 eax, DWORD PTR tv208[ebp]
  003b6	8d 4c 85 dc	 lea	 ecx, DWORD PTR _weapons_status$[ebp+eax*4]
  003ba	ba 01 00 00 00	 mov	 edx, 1
  003bf	6b c2 03	 imul	 eax, edx, 3
  003c2	8a 55 aa	 mov	 dl, BYTE PTR _status$3[ebp]
  003c5	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
$LN10@draw_alnum:

; 10709: 					}
; 10710: 				}
; 10711: 			}
; 10712: 		}
; 10713: 	}

  003c8	e9 07 fd ff ff	 jmp	 $LN2@draw_alnum
$LN3@draw_alnum:

; 10714: 
; 10715: 	// print the missiles statuses
; 10716: 	y = 0.8;

  003cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  003d5	f3 0f 11 45 c8	 movss	 DWORD PTR _y$[ebp], xmm0

; 10717: 	for (j = 0; j < 4; j++)

  003da	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  003e1	eb 09		 jmp	 SHORT $LN14@draw_alnum
$LN12@draw_alnum:
  003e3	8b 45 d0	 mov	 eax, DWORD PTR _j$[ebp]
  003e6	83 c0 01	 add	 eax, 1
  003e9	89 45 d0	 mov	 DWORD PTR _j$[ebp], eax
$LN14@draw_alnum:
  003ec	83 7d d0 04	 cmp	 DWORD PTR _j$[ebp], 4
  003f0	0f 8d 8c 01 00
	00		 jge	 $LN13@draw_alnum

; 10718: 	{
; 10719: 		float line_height = 0.45;

  003f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  003fe	f3 0f 11 45 a4	 movss	 DWORD PTR _line_height$2[ebp], xmm0

; 10720: 		char buffer[20];
; 10721: 
; 10722: 		// left side missiles
; 10723: 		x = -0.85;

  00403	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  0040b	f3 0f 11 45 cc	 movss	 DWORD PTR _x$[ebp], xmm0

; 10724: 		sprintf(buffer, "%c %c %c %c", weapons_status[0][j], weapons_status[1][j], weapons_status[2][j], weapons_status[3][j]);

  00410	b8 04 00 00 00	 mov	 eax, 4
  00415	6b c8 03	 imul	 ecx, eax, 3
  00418	8d 54 0d dc	 lea	 edx, DWORD PTR _weapons_status$[ebp+ecx]
  0041c	8b 45 d0	 mov	 eax, DWORD PTR _j$[ebp]
  0041f	0f b6 0c 02	 movzx	 ecx, BYTE PTR [edx+eax]
  00423	51		 push	 ecx
  00424	ba 04 00 00 00	 mov	 edx, 4
  00429	d1 e2		 shl	 edx, 1
  0042b	8d 44 15 dc	 lea	 eax, DWORD PTR _weapons_status$[ebp+edx]
  0042f	8b 4d d0	 mov	 ecx, DWORD PTR _j$[ebp]
  00432	0f b6 14 08	 movzx	 edx, BYTE PTR [eax+ecx]
  00436	52		 push	 edx
  00437	b8 04 00 00 00	 mov	 eax, 4
  0043c	c1 e0 00	 shl	 eax, 0
  0043f	8d 4c 05 dc	 lea	 ecx, DWORD PTR _weapons_status$[ebp+eax]
  00443	8b 55 d0	 mov	 edx, DWORD PTR _j$[ebp]
  00446	0f b6 04 11	 movzx	 eax, BYTE PTR [ecx+edx]
  0044a	50		 push	 eax
  0044b	b9 04 00 00 00	 mov	 ecx, 4
  00450	6b d1 00	 imul	 edx, ecx, 0
  00453	8d 44 15 dc	 lea	 eax, DWORD PTR _weapons_status$[ebp+edx]
  00457	8b 4d d0	 mov	 ecx, DWORD PTR _j$[ebp]
  0045a	0f b6 14 08	 movzx	 edx, BYTE PTR [eax+ecx]
  0045e	52		 push	 edx
  0045f	68 00 00 00 00	 push	 OFFSET ??_C@_0M@ICPLLFPA@?$CFc?5?$CFc?5?$CFc?5?$CFc@
  00464	8d 45 90	 lea	 eax, DWORD PTR _buffer$1[ebp]
  00467	50		 push	 eax
  00468	e8 00 00 00 00	 call	 _sprintf
  0046d	83 c4 18	 add	 esp, 24			; 00000018H

; 10725: 		set_2d_mono_font_position(x, y);

  00470	51		 push	 ecx
  00471	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00476	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047b	51		 push	 ecx
  0047c	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00481	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00486	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10726: 		set_mono_font_rel_position(-string_width / 2, 0);

  0048b	51		 push	 ecx
  0048c	0f 57 c0	 xorps	 xmm0, xmm0
  0048f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00494	8b 45 c4	 mov	 eax, DWORD PTR _string_width$[ebp]
  00497	f7 d8		 neg	 eax
  00499	99		 cdq
  0049a	2b c2		 sub	 eax, edx
  0049c	d1 f8		 sar	 eax, 1
  0049e	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  004a2	51		 push	 ecx
  004a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a8	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10727: 		print_mono_font_string(buffer);

  004ad	8d 45 90	 lea	 eax, DWORD PTR _buffer$1[ebp]
  004b0	50		 push	 eax
  004b1	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10728: 
; 10729: 		// right side missiles
; 10730: 		x = -x;

  004b6	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _x$[ebp]
  004bb	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  004c2	f3 0f 11 45 cc	 movss	 DWORD PTR _x$[ebp], xmm0

; 10731: 		sprintf(buffer, "%c %c %c %c", weapons_status[4][j], weapons_status[5][j], weapons_status[6][j], weapons_status[7][j]);

  004c7	b8 04 00 00 00	 mov	 eax, 4
  004cc	6b c8 07	 imul	 ecx, eax, 7
  004cf	8d 54 0d dc	 lea	 edx, DWORD PTR _weapons_status$[ebp+ecx]
  004d3	8b 45 d0	 mov	 eax, DWORD PTR _j$[ebp]
  004d6	0f b6 0c 02	 movzx	 ecx, BYTE PTR [edx+eax]
  004da	51		 push	 ecx
  004db	ba 04 00 00 00	 mov	 edx, 4
  004e0	6b c2 06	 imul	 eax, edx, 6
  004e3	8d 4c 05 dc	 lea	 ecx, DWORD PTR _weapons_status$[ebp+eax]
  004e7	8b 55 d0	 mov	 edx, DWORD PTR _j$[ebp]
  004ea	0f b6 04 11	 movzx	 eax, BYTE PTR [ecx+edx]
  004ee	50		 push	 eax
  004ef	b9 04 00 00 00	 mov	 ecx, 4
  004f4	6b d1 05	 imul	 edx, ecx, 5
  004f7	8d 44 15 dc	 lea	 eax, DWORD PTR _weapons_status$[ebp+edx]
  004fb	8b 4d d0	 mov	 ecx, DWORD PTR _j$[ebp]
  004fe	0f b6 14 08	 movzx	 edx, BYTE PTR [eax+ecx]
  00502	52		 push	 edx
  00503	b8 04 00 00 00	 mov	 eax, 4
  00508	c1 e0 02	 shl	 eax, 2
  0050b	8d 4c 05 dc	 lea	 ecx, DWORD PTR _weapons_status$[ebp+eax]
  0050f	8b 55 d0	 mov	 edx, DWORD PTR _j$[ebp]
  00512	0f b6 04 11	 movzx	 eax, BYTE PTR [ecx+edx]
  00516	50		 push	 eax
  00517	68 00 00 00 00	 push	 OFFSET ??_C@_0M@ICPLLFPA@?$CFc?5?$CFc?5?$CFc?5?$CFc@
  0051c	8d 4d 90	 lea	 ecx, DWORD PTR _buffer$1[ebp]
  0051f	51		 push	 ecx
  00520	e8 00 00 00 00	 call	 _sprintf
  00525	83 c4 18	 add	 esp, 24			; 00000018H

; 10732: 		set_2d_mono_font_position(x, y);

  00528	51		 push	 ecx
  00529	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0052e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00533	51		 push	 ecx
  00534	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00539	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10733: 		set_mono_font_rel_position(-string_width / 2, 0);

  00543	51		 push	 ecx
  00544	0f 57 c0	 xorps	 xmm0, xmm0
  00547	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0054c	8b 45 c4	 mov	 eax, DWORD PTR _string_width$[ebp]
  0054f	f7 d8		 neg	 eax
  00551	99		 cdq
  00552	2b c2		 sub	 eax, edx
  00554	d1 f8		 sar	 eax, 1
  00556	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0055a	51		 push	 ecx
  0055b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00560	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10734: 		print_mono_font_string(buffer);

  00565	8d 45 90	 lea	 eax, DWORD PTR _buffer$1[ebp]
  00568	50		 push	 eax
  00569	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10735: 
; 10736: 		y -= line_height;

  0056e	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00573	f3 0f 5c 45 a4	 subss	 xmm0, DWORD PTR _line_height$2[ebp]
  00578	f3 0f 11 45 c8	 movss	 DWORD PTR _y$[ebp], xmm0

; 10737: 	}

  0057d	e9 61 fe ff ff	 jmp	 $LN12@draw_alnum
$LN13@draw_alnum:

; 10738: }

  00582	5f		 pop	 edi
  00583	5e		 pop	 esi
  00584	5b		 pop	 ebx
  00585	8b e5		 mov	 esp, ebp
  00587	5d		 pop	 ebp
  00588	c3		 ret	 0
  00589	0f 1f 00	 npad	 3
$LN50@draw_alnum:
  0058c	00 00 00 00	 DD	 $LN17@draw_alnum
  00590	00 00 00 00	 DD	 $LN18@draw_alnum
  00594	00 00 00 00	 DD	 $LN16@draw_alnum
  00598	00 00 00 00	 DD	 $LN19@draw_alnum
$LN51@draw_alnum:
  0059c	00 00 00 00	 DD	 $LN28@draw_alnum
  005a0	00 00 00 00	 DD	 $LN27@draw_alnum
  005a4	00 00 00 00	 DD	 $LN26@draw_alnum
  005a8	00 00 00 00	 DD	 $LN25@draw_alnum
?draw_alnum_weapons@@YGXXZ ENDP				; draw_alnum_weapons
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_flight_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv143 = -76						; size = 4
tv81 = -72						; size = 4
tv73 = -68						; size = 4
?draw_flight_display_mfd@@YGXXZ PROC			; draw_flight_display_mfd, COMDAT

; 10615: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10616: 	set_mono_font_colour (MFD_COLOUR1);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00017	52		 push	 edx
  00018	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 10617: 
; 10618: 	draw_pitch_ladder ();

  0001d	e8 00 00 00 00	 call	 ?draw_pitch_ladder@@YGXXZ ; draw_pitch_ladder

; 10619: 
; 10620: 	draw_heading_scale (get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_HEADING));

  00022	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00029	74 0c		 je	 SHORT $LN4@draw_fligh
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	89 4d bc	 mov	 DWORD PTR tv73[ebp], ecx
  00035	eb 21		 jmp	 SHORT $LN5@draw_fligh
$LN4@draw_fligh:
  00037	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA
  0003d	83 c2 05	 add	 edx, 5
  00040	52		 push	 edx
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00051	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN5@draw_fligh:
  00058	b9 01 00 00 00	 mov	 ecx, 1
  0005d	85 c9		 test	 ecx, ecx
  0005f	74 09		 je	 SHORT $LN6@draw_fligh
  00061	c7 45 b8 34 00
	00 00		 mov	 DWORD PTR tv81[ebp], 52	; 00000034H
  00068	eb 21		 jmp	 SHORT $LN7@draw_fligh
$LN6@draw_fligh:
  0006a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA
  00070	83 c2 05	 add	 edx, 5
  00073	52		 push	 edx
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00084	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN7@draw_fligh:
  0008b	6a 34		 push	 52			; 00000034H
  0008d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00093	51		 push	 ecx
  00094	69 55 bc bc 02
	00 00		 imul	 edx, DWORD PTR tv73[ebp], 700
  0009b	8b 45 b8	 mov	 eax, DWORD PTR tv81[ebp]
  0009e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  000a5	ff d1		 call	 ecx
  000a7	d9 5d b4	 fstp	 DWORD PTR tv143[ebp]
  000aa	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR tv143[ebp]
  000af	51		 push	 ecx
  000b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b5	e8 00 00 00 00	 call	 ?draw_heading_scale@@YGXM@Z ; draw_heading_scale

; 10621: 
; 10622: 	display_true_airspeed ();

  000ba	e8 00 00 00 00	 call	 ?display_true_airspeed@@YGXXZ ; display_true_airspeed

; 10623: 
; 10624: 	display_altitude ();

  000bf	e8 00 00 00 00	 call	 ?display_altitude@@YGXXZ ; display_altitude

; 10625: 
; 10626: 	draw_rate_of_climb_scale ();

  000c4	e8 00 00 00 00	 call	 ?draw_rate_of_climb_scale@@YGXXZ ; draw_rate_of_climb_scale

; 10627: 
; 10628: 	display_engine_torque ();

  000c9	e8 00 00 00 00	 call	 ?display_engine_torque@@YGXXZ ; display_engine_torque

; 10629: 
; 10630: 	if (!apache_damage.navigation_computer)

  000ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  000d3	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  000d6	83 e0 01	 and	 eax, 1
  000d9	75 14		 jne	 SHORT $LN2@draw_fligh

; 10631: 		display_waypoint_information (MFD_COLOUR4);

  000db	b8 04 00 00 00	 mov	 eax, 4
  000e0	6b c8 03	 imul	 ecx, eax, 3
  000e3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000e9	52		 push	 edx
  000ea	e8 00 00 00 00	 call	 ?display_waypoint_information@@YGXUREAL_COLOUR@@@Z ; display_waypoint_information
$LN2@draw_fligh:

; 10632: }

  000ef	5f		 pop	 edi
  000f0	5e		 pop	 esi
  000f1	5b		 pop	 ebx
  000f2	8b e5		 mov	 esp, ebp
  000f4	5d		 pop	 ebp
  000f5	c3		 ret	 0
?draw_flight_display_mfd@@YGXXZ ENDP			; draw_flight_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?display_engine_torque@@YGXXZ
_TEXT	SEGMENT
_s$ = -20						; size = 20
?display_engine_torque@@YGXXZ PROC			; display_engine_torque, COMDAT

; 10453: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10454: 	char
; 10455: 		s[20];
; 10456: 
; 10457: 	sprintf (s, "%d%%", (int) current_flight_dynamics->combined_engine_torque.value);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0000e	f3 0f 2c 88 8c
	24 00 00	 cvttss2si ecx, DWORD PTR [eax+9356]
  00016	51		 push	 ecx
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_04FCMNJMCO@?$CFd?$CF?$CF@
  0001c	8d 55 ec	 lea	 edx, DWORD PTR _s$[ebp]
  0001f	52		 push	 edx
  00020	e8 00 00 00 00	 call	 _sprintf
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10458: 
; 10459: 	set_2d_mono_font_position (-1.0, 0.85);

  00028	51		 push	 ecx
  00029	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00031	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00036	51		 push	 ecx
  00037	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0003f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00044	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10460: 
; 10461: //	if (draw_main_display)
; 10462: 	{
; 10463: 		if (draw_large_mfd)

  00049	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00050	74 2a		 je	 SHORT $LN2@display_en

; 10464: 		{
; 10465: 			set_mono_font_type (MONO_FONT_TYPE_7X12);

  00052	6a 05		 push	 5
  00054	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 10466: 
; 10467: 			set_mono_font_rel_position (1.0, -4.0);

  00059	51		 push	 ecx
  0005a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  00062	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00067	51		 push	 ecx
  00068	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00070	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00075	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10468: 		}
; 10469: 		else

  0007a	eb 28		 jmp	 SHORT $LN3@display_en
$LN2@display_en:

; 10470: 		{
; 10471: 			set_mono_font_type (MONO_FONT_TYPE_5X9);

  0007c	6a 02		 push	 2
  0007e	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 10472: 
; 10473: 			set_mono_font_rel_position (1.0, -4.0);

  00083	51		 push	 ecx
  00084	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  0008c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00091	51		 push	 ecx
  00092	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0009a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN3@display_en:

; 10474: 		}
; 10475: 	}
; 10476: /*	else
; 10477: 	{
; 10478: 		if (draw_large_mfd)
; 10479: 		{
; 10480: 			set_mono_font_type (MONO_FONT_TYPE_7X12);
; 10481: 
; 10482: 			set_mono_font_rel_position (1.0, -4.0);
; 10483: 		}
; 10484: 		else
; 10485: 		{
; 10486: 			set_mono_font_type (MONO_FONT_TYPE_5X7);
; 10487: 
; 10488: 			set_mono_font_rel_position (1.0, -2.0);
; 10489: 		}
; 10490: 	}*/
; 10491: 
; 10492: 	print_mono_font_string (s);

  000a4	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10493: }

  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c3		 ret	 0
?display_engine_torque@@YGXXZ ENDP			; display_engine_torque
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_rate_of_climb_scale@@YGXXZ
_TEXT	SEGMENT
tv485 = -108						; size = 8
tv486 = -100						; size = 8
_x_adjust$ = -28					; size = 4
_y2$ = -24						; size = 4
_y1$ = -20						; size = 4
_y$ = -16						; size = 4
_x$ = -12						; size = 4
_rate_of_climb$ = -8					; size = 4
_radar_altitude$ = -4					; size = 4
?draw_rate_of_climb_scale@@YGXXZ PROC			; draw_rate_of_climb_scale, COMDAT

; 10329: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10330: 	float
; 10331: 		radar_altitude,
; 10332: 		rate_of_climb,
; 10333: 		x,
; 10334: 		y,
; 10335: 		y1,
; 10336: 		y2,
; 10337: 		x_adjust;
; 10338: 
; 10339: //	if (draw_main_display)
; 10340: 	{
; 10341: 		x_adjust = -0.05;

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  00011	f3 0f 11 45 e4	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10342: 	}
; 10343: /*	else
; 10344: 	{
; 10345: 		x_adjust = -0.85;
; 10346: 	}*/
; 10347: 
; 10348: 	//
; 10349: 	// draw scale
; 10350: 	//
; 10351: 
; 10352: 	draw_2d_line (CLIMB_SCALE_MAJOR_TICK_X1, (CLIMB_SCALE_FSD * +1.0) - 0.1, CLIMB_SCALE_MAJOR_TICK_X2, (CLIMB_SCALE_FSD * +1.0) - 0.1, MFD_COLOUR1);

  00016	b8 04 00 00 00	 mov	 eax, 4
  0001b	6b c8 00	 imul	 ecx, eax, 0
  0001e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00024	52		 push	 edx
  00025	51		 push	 ecx
  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f651eb8
  0003b	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00040	51		 push	 ecx
  00041	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00046	51		 push	 ecx
  00047	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0004f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00054	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  0005c	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00061	51		 push	 ecx
  00062	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00067	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10353: 	draw_2d_line (CLIMB_SCALE_MAJOR_TICK_X3, (CLIMB_SCALE_FSD * +1.0) - 0.1, CLIMB_SCALE_MAJOR_TICK_X4, (CLIMB_SCALE_FSD * +1.0) - 0.1, MFD_COLOUR1);

  0006c	b8 04 00 00 00	 mov	 eax, 4
  00071	6b c8 00	 imul	 ecx, eax, 0
  00074	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0007a	52		 push	 edx
  0007b	51		 push	 ecx
  0007c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00084	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00089	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7eb852
  00091	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00096	51		 push	 ecx
  00097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009c	51		 push	 ecx
  0009d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  000b2	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  000b7	51		 push	 ecx
  000b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10354: 
; 10355: 	draw_2d_line (CLIMB_SCALE_MAJOR_TICK_X1, (CLIMB_SCALE_FSD * +0.5) - 0.1, CLIMB_SCALE_MAJOR_TICK_X2, (CLIMB_SCALE_FSD * +0.5) - 0.1, MFD_COLOUR1);

  000c2	b8 04 00 00 00	 mov	 eax, 4
  000c7	6b c8 00	 imul	 ecx, eax, 0
  000ca	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000d0	52		 push	 edx
  000d1	51		 push	 ecx
  000d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4cccce
  000da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f651eb8
  000e7	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  000ec	51		 push	 ecx
  000ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f2	51		 push	 ecx
  000f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4cccce
  000fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00100	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00108	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0010d	51		 push	 ecx
  0010e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00113	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10356: 	draw_2d_line (CLIMB_SCALE_MAJOR_TICK_X3, (CLIMB_SCALE_FSD * +0.5) - 0.1, CLIMB_SCALE_MAJOR_TICK_X4, (CLIMB_SCALE_FSD * +0.5) - 0.1, MFD_COLOUR1);

  00118	b8 04 00 00 00	 mov	 eax, 4
  0011d	6b c8 00	 imul	 ecx, eax, 0
  00120	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00126	52		 push	 edx
  00127	51		 push	 ecx
  00128	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4cccce
  00130	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00135	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7eb852
  0013d	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00142	51		 push	 ecx
  00143	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00148	51		 push	 ecx
  00149	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4cccce
  00151	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00156	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  0015e	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00163	51		 push	 ecx
  00164	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00169	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10357: 
; 10358: 	draw_2d_line (CLIMB_SCALE_MINOR_TICK_X1, (CLIMB_SCALE_FSD * +0.4) - 0.1, CLIMB_SCALE_MINOR_TICK_X2, (CLIMB_SCALE_FSD * +0.4) - 0.1, MFD_COLOUR1);

  0016e	b8 04 00 00 00	 mov	 eax, 4
  00173	6b c8 00	 imul	 ecx, eax, 0
  00176	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0017c	52		 push	 edx
  0017d	51		 push	 ecx
  0017e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c2a
  00186	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f628f5c
  00193	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00198	51		 push	 ecx
  00199	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019e	51		 push	 ecx
  0019f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c2a
  001a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5b645a
  001b4	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  001b9	51		 push	 ecx
  001ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bf	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10359: 
; 10360: 	draw_2d_line (CLIMB_SCALE_MINOR_TICK_X1, (CLIMB_SCALE_FSD * +0.3) - 0.1, CLIMB_SCALE_MINOR_TICK_X2, (CLIMB_SCALE_FSD * +0.3) - 0.1, MFD_COLOUR1);

  001c4	b8 04 00 00 00	 mov	 eax, 4
  001c9	6b c8 00	 imul	 ecx, eax, 0
  001cc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001d2	52		 push	 edx
  001d3	51		 push	 ecx
  001d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70b
  001dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f628f5c
  001e9	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  001ee	51		 push	 ecx
  001ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f4	51		 push	 ecx
  001f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70b
  001fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00202	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5b645a
  0020a	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0020f	51		 push	 ecx
  00210	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00215	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10361: 
; 10362: 	draw_2d_line (CLIMB_SCALE_MINOR_TICK_X1, (CLIMB_SCALE_FSD * +0.2) - 0.1, CLIMB_SCALE_MINOR_TICK_X2, (CLIMB_SCALE_FSD * +0.2) - 0.1, MFD_COLOUR1);

  0021a	b8 04 00 00 00	 mov	 eax, 4
  0021f	6b c8 00	 imul	 ecx, eax, 0
  00222	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00228	52		 push	 edx
  00229	51		 push	 ecx
  0022a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ca3d70d
  00232	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00237	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f628f5c
  0023f	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00244	51		 push	 ecx
  00245	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024a	51		 push	 ecx
  0024b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ca3d70d
  00253	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00258	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5b645a
  00260	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00265	51		 push	 ecx
  00266	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10363: 
; 10364: 	draw_2d_line (CLIMB_SCALE_MINOR_TICK_X1, (CLIMB_SCALE_FSD * +0.1) - 0.1, CLIMB_SCALE_MINOR_TICK_X2, (CLIMB_SCALE_FSD * +0.1) - 0.1, MFD_COLOUR1);

  00270	b8 04 00 00 00	 mov	 eax, 4
  00275	6b c8 00	 imul	 ecx, eax, 0
  00278	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0027e	52		 push	 edx
  0027f	51		 push	 ecx
  00280	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  00288	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f628f5c
  00295	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0029a	51		 push	 ecx
  0029b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a0	51		 push	 ecx
  002a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  002a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5b645a
  002b6	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  002bb	51		 push	 ecx
  002bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10365: 
; 10366: 	draw_2d_line (CLIMB_SCALE_MAJOR_TICK_X1, (CLIMB_SCALE_FSD * +0.0) - 0.1, CLIMB_SCALE_MAJOR_TICK_X2, (CLIMB_SCALE_FSD * +0.0) - 0.1, MFD_COLOUR1);

  002c6	b8 04 00 00 00	 mov	 eax, 4
  002cb	6b c8 00	 imul	 ecx, eax, 0
  002ce	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002d4	52		 push	 edx
  002d5	51		 push	 ecx
  002d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  002de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f651eb8
  002eb	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  002f0	51		 push	 ecx
  002f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f6	51		 push	 ecx
  002f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  002ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00304	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  0030c	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00311	51		 push	 ecx
  00312	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00317	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10367: 	draw_2d_line (CLIMB_SCALE_MAJOR_TICK_X3, (CLIMB_SCALE_FSD * +0.0) - 0.1, CLIMB_SCALE_MAJOR_TICK_X4, (CLIMB_SCALE_FSD * +0.0) - 0.1, MFD_COLOUR1);

  0031c	b8 04 00 00 00	 mov	 eax, 4
  00321	6b c8 00	 imul	 ecx, eax, 0
  00324	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0032a	52		 push	 edx
  0032b	51		 push	 ecx
  0032c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  00334	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00339	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7eb852
  00341	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00346	51		 push	 ecx
  00347	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034c	51		 push	 ecx
  0034d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  00355	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  00362	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00367	51		 push	 ecx
  00368	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10368: 
; 10369: 	draw_2d_line (CLIMB_SCALE_MINOR_TICK_X1, (CLIMB_SCALE_FSD * -0.1) - 0.1, CLIMB_SCALE_MINOR_TICK_X2, (CLIMB_SCALE_FSD * -0.1) - 0.1, MFD_COLOUR1);

  00372	b8 04 00 00 00	 mov	 eax, 4
  00377	6b c8 00	 imul	 ecx, eax, 0
  0037a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00380	52		 push	 edx
  00381	51		 push	 ecx
  00382	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  0038a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f628f5c
  00397	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0039c	51		 push	 ecx
  0039d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a2	51		 push	 ecx
  003a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  003ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5b645a
  003b8	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  003bd	51		 push	 ecx
  003be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10370: 
; 10371: 	draw_2d_line (CLIMB_SCALE_MINOR_TICK_X1, (CLIMB_SCALE_FSD * -0.2) - 0.1, CLIMB_SCALE_MINOR_TICK_X2, (CLIMB_SCALE_FSD * -0.2) - 0.1, MFD_COLOUR1);

  003c8	b8 04 00 00 00	 mov	 eax, 4
  003cd	6b c8 00	 imul	 ecx, eax, 0
  003d0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003d6	52		 push	 edx
  003d7	51		 push	 ecx
  003d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be6147ae
  003e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f628f5c
  003ed	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  003f2	51		 push	 ecx
  003f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f8	51		 push	 ecx
  003f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be6147ae
  00401	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00406	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5b645a
  0040e	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00413	51		 push	 ecx
  00414	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00419	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10372: 
; 10373: 	draw_2d_line (CLIMB_SCALE_MINOR_TICK_X1, (CLIMB_SCALE_FSD * -0.3) - 0.1, CLIMB_SCALE_MINOR_TICK_X2, (CLIMB_SCALE_FSD * -0.3) - 0.1, MFD_COLOUR1);

  0041e	b8 04 00 00 00	 mov	 eax, 4
  00423	6b c8 00	 imul	 ecx, eax, 0
  00426	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0042c	52		 push	 edx
  0042d	51		 push	 ecx
  0042e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8f5c29
  00436	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0043b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f628f5c
  00443	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00448	51		 push	 ecx
  00449	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044e	51		 push	 ecx
  0044f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8f5c29
  00457	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0045c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5b645a
  00464	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00469	51		 push	 ecx
  0046a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10374: 
; 10375: 	draw_2d_line (CLIMB_SCALE_MINOR_TICK_X1, (CLIMB_SCALE_FSD * -0.4) - 0.1, CLIMB_SCALE_MINOR_TICK_X2, (CLIMB_SCALE_FSD * -0.4) - 0.1, MFD_COLOUR1);

  00474	b8 04 00 00 00	 mov	 eax, 4
  00479	6b c8 00	 imul	 ecx, eax, 0
  0047c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00482	52		 push	 edx
  00483	51		 push	 ecx
  00484	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beae147b
  0048c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00491	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f628f5c
  00499	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0049e	51		 push	 ecx
  0049f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a4	51		 push	 ecx
  004a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beae147b
  004ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5b645a
  004ba	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  004bf	51		 push	 ecx
  004c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10376: 
; 10377: 	draw_2d_line (CLIMB_SCALE_MAJOR_TICK_X1, (CLIMB_SCALE_FSD * -0.5) - 0.1, CLIMB_SCALE_MAJOR_TICK_X2, (CLIMB_SCALE_FSD * -0.5) - 0.1, MFD_COLOUR1);

  004ca	b8 04 00 00 00	 mov	 eax, 4
  004cf	6b c8 00	 imul	 ecx, eax, 0
  004d2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004d8	52		 push	 edx
  004d9	51		 push	 ecx
  004da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  004e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f651eb8
  004ef	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  004f4	51		 push	 ecx
  004f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fa	51		 push	 ecx
  004fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00503	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00508	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00510	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00515	51		 push	 ecx
  00516	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0051b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10378: 	draw_2d_line (CLIMB_SCALE_MAJOR_TICK_X3, (CLIMB_SCALE_FSD * -0.5) - 0.1, CLIMB_SCALE_MAJOR_TICK_X4, (CLIMB_SCALE_FSD * -0.5) - 0.1, MFD_COLOUR1);

  00520	b8 04 00 00 00	 mov	 eax, 4
  00525	6b c8 00	 imul	 ecx, eax, 0
  00528	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0052e	52		 push	 edx
  0052f	51		 push	 ecx
  00530	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00538	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7eb852
  00545	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0054a	51		 push	 ecx
  0054b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00550	51		 push	 ecx
  00551	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00559	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0055e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  00566	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0056b	51		 push	 ecx
  0056c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00571	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10379: 
; 10380: 	draw_2d_line (CLIMB_SCALE_MINOR_TICK_X3, (CLIMB_SCALE_FSD * -0.6) - 0.1, CLIMB_SCALE_MINOR_TICK_X4, (CLIMB_SCALE_FSD * -0.6) - 0.1, MFD_COLOUR1);

  00576	b8 04 00 00 00	 mov	 eax, 4
  0057b	6b c8 00	 imul	 ecx, eax, 0
  0057e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00584	52		 push	 edx
  00585	51		 push	 ecx
  00586	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beeb851f
  0058e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00593	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7c28f6
  0059b	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  005a0	51		 push	 ecx
  005a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a6	51		 push	 ecx
  005a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beeb851f
  005af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f74fdf4
  005bc	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  005c1	51		 push	 ecx
  005c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10381: 
; 10382: 	draw_2d_line (CLIMB_SCALE_MINOR_TICK_X3, (CLIMB_SCALE_FSD * -0.7) - 0.1, CLIMB_SCALE_MINOR_TICK_X4, (CLIMB_SCALE_FSD * -0.7) - 0.1, MFD_COLOUR1);

  005cc	b8 04 00 00 00	 mov	 eax, 4
  005d1	6b c8 00	 imul	 ecx, eax, 0
  005d4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005da	52		 push	 edx
  005db	51		 push	 ecx
  005dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf051eb9
  005e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7c28f6
  005f1	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  005f6	51		 push	 ecx
  005f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005fc	51		 push	 ecx
  005fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf051eb9
  00605	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0060a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f74fdf4
  00612	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00617	51		 push	 ecx
  00618	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0061d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10383: 
; 10384: 	draw_2d_line (CLIMB_SCALE_MINOR_TICK_X3, (CLIMB_SCALE_FSD * -0.8) - 0.1, CLIMB_SCALE_MINOR_TICK_X4, (CLIMB_SCALE_FSD * -0.8) - 0.1, MFD_COLOUR1);

  00622	b8 04 00 00 00	 mov	 eax, 4
  00627	6b c8 00	 imul	 ecx, eax, 0
  0062a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00630	52		 push	 edx
  00631	51		 push	 ecx
  00632	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf147ae2
  0063a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7c28f6
  00647	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0064c	51		 push	 ecx
  0064d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00652	51		 push	 ecx
  00653	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf147ae2
  0065b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00660	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f74fdf4
  00668	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0066d	51		 push	 ecx
  0066e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00673	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10385: 
; 10386: 	draw_2d_line (CLIMB_SCALE_MINOR_TICK_X3, (CLIMB_SCALE_FSD * -0.9) - 0.1, CLIMB_SCALE_MINOR_TICK_X4, (CLIMB_SCALE_FSD * -0.9) - 0.1, MFD_COLOUR1);

  00678	b8 04 00 00 00	 mov	 eax, 4
  0067d	6b c8 00	 imul	 ecx, eax, 0
  00680	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00686	52		 push	 edx
  00687	51		 push	 ecx
  00688	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf23d70b
  00690	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00695	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7c28f6
  0069d	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  006a2	51		 push	 ecx
  006a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a8	51		 push	 ecx
  006a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf23d70b
  006b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f74fdf4
  006be	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  006c3	51		 push	 ecx
  006c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10387: 
; 10388: 	draw_2d_line (CLIMB_SCALE_MAJOR_TICK_X1, (CLIMB_SCALE_FSD * -1.0) - 0.1, CLIMB_SCALE_MAJOR_TICK_X2, (CLIMB_SCALE_FSD * -1.0) - 0.1, MFD_COLOUR1);

  006ce	b8 04 00 00 00	 mov	 eax, 4
  006d3	6b c8 00	 imul	 ecx, eax, 0
  006d6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006dc	52		 push	 edx
  006dd	51		 push	 ecx
  006de	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333334
  006e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f651eb8
  006f3	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  006f8	51		 push	 ecx
  006f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006fe	51		 push	 ecx
  006ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333334
  00707	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0070c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00714	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00719	51		 push	 ecx
  0071a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0071f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10389: 	draw_2d_line (CLIMB_SCALE_MAJOR_TICK_X3, (CLIMB_SCALE_FSD * -1.0) - 0.1, CLIMB_SCALE_MAJOR_TICK_X4, (CLIMB_SCALE_FSD * -1.0) - 0.1, MFD_COLOUR1);

  00724	b8 04 00 00 00	 mov	 eax, 4
  00729	6b c8 00	 imul	 ecx, eax, 0
  0072c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00732	52		 push	 edx
  00733	51		 push	 ecx
  00734	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333334
  0073c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00741	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7eb852
  00749	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0074e	51		 push	 ecx
  0074f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00754	51		 push	 ecx
  00755	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333334
  0075d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00762	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  0076a	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0076f	51		 push	 ecx
  00770	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00775	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10390: 
; 10391: 	//
; 10392: 	// display analogue radar altitude
; 10393: 	//
; 10394: 
; 10395: 	radar_altitude = feet (current_flight_dynamics->radar_altitude.value);

  0077a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0077f	f3 0f 10 80 44
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9284]
  00787	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4051f948
  0078f	f3 0f 11 45 fc	 movss	 DWORD PTR _radar_altitude$[ebp], xmm0

; 10396: 
; 10397: 	if (radar_altitude <= 200.0)

  00794	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _radar_altitude$[ebp]
  00799	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4069000000000000
  007a1	66 0f 2f c8	 comisd	 xmm1, xmm0
  007a5	0f 82 ab 03 00
	00		 jb	 $LN4@draw_rate_

; 10398: 	{
; 10399: 		y1 = -CLIMB_SCALE_FSD - 0.1;

  007ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333334
  007b3	f3 0f 11 45 ec	 movss	 DWORD PTR _y1$[ebp], xmm0

; 10400: 
; 10401: 		y2 = -CLIMB_SCALE_FSD - 0.1 + radar_altitude * ((CLIMB_SCALE_FSD * 2.0) / 200.0);

  007b8	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _radar_altitude$[ebp]
  007bd	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f789374cccccccd
  007c5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfe6666673333333
  007cd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007d1	f3 0f 11 45 e8	 movss	 DWORD PTR _y2$[ebp], xmm0

; 10402: 
; 10403: 		get_2d_float_screen_coordinates (CLIMB_SCALE_MAJOR_TICK_X2, y1, &x, &y1);

  007d6	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  007d9	50		 push	 eax
  007da	8d 4d f4	 lea	 ecx, DWORD PTR _x$[ebp]
  007dd	51		 push	 ecx
  007de	51		 push	 ecx
  007df	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  007e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f651eb8
  007f1	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  007f6	51		 push	 ecx
  007f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007fc	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 10404: 
; 10405: 		get_2d_float_screen_coordinates (CLIMB_SCALE_MAJOR_TICK_X2, y2, &x, &y2);

  00801	8d 45 e8	 lea	 eax, DWORD PTR _y2$[ebp]
  00804	50		 push	 eax
  00805	8d 4d f4	 lea	 ecx, DWORD PTR _x$[ebp]
  00808	51		 push	 ecx
  00809	51		 push	 ecx
  0080a	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0080f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00814	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f651eb8
  0081c	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00821	51		 push	 ecx
  00822	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00827	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 10406: 
; 10407: 		if (draw_large_mfd)

  0082c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00833	0f 84 15 02 00
	00		 je	 $LN3@draw_rate_

; 10408: 		{
; 10409: 			draw_line (x + 1.0, y1, x + 1.0, y2, MFD_COLOUR1);

  00839	b8 04 00 00 00	 mov	 eax, 4
  0083e	6b c8 00	 imul	 ecx, eax, 0
  00841	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00847	52		 push	 edx
  00848	51		 push	 ecx
  00849	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0084e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00853	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00858	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00860	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00864	51		 push	 ecx
  00865	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0086a	51		 push	 ecx
  0086b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00870	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00875	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0087a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00882	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00886	51		 push	 ecx
  00887	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0088c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 10410: 			draw_line (x + 2.0, y1, x + 2.0, y2, MFD_COLOUR1);

  00891	b8 04 00 00 00	 mov	 eax, 4
  00896	6b c8 00	 imul	 ecx, eax, 0
  00899	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0089f	52		 push	 edx
  008a0	51		 push	 ecx
  008a1	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  008a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ab	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  008b0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  008b8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  008bc	51		 push	 ecx
  008bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c2	51		 push	 ecx
  008c3	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  008c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008cd	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  008d2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  008da	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  008de	51		 push	 ecx
  008df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e4	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 10411: 			draw_line (x + 3.0, y1, x + 3.0, y2, MFD_COLOUR1);

  008e9	b8 04 00 00 00	 mov	 eax, 4
  008ee	6b c8 00	 imul	 ecx, eax, 0
  008f1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008f7	52		 push	 edx
  008f8	51		 push	 ecx
  008f9	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  008fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00903	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00908	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00910	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00914	51		 push	 ecx
  00915	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0091a	51		 push	 ecx
  0091b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00920	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00925	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0092a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00932	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00936	51		 push	 ecx
  00937	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0093c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 10412: 			draw_line (x + 4.0, y1, x + 4.0, y2, MFD_COLOUR1);

  00941	b8 04 00 00 00	 mov	 eax, 4
  00946	6b c8 00	 imul	 ecx, eax, 0
  00949	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0094f	52		 push	 edx
  00950	51		 push	 ecx
  00951	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00956	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0095b	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00960	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  00968	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0096c	51		 push	 ecx
  0096d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00972	51		 push	 ecx
  00973	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00978	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0097d	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00982	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  0098a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0098e	51		 push	 ecx
  0098f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00994	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 10413: 			draw_line (x + 5.0, y1, x + 5.0, y2, MFD_COLOUR1);

  00999	b8 04 00 00 00	 mov	 eax, 4
  0099e	6b c8 00	 imul	 ecx, eax, 0
  009a1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009a7	52		 push	 edx
  009a8	51		 push	 ecx
  009a9	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  009ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b3	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  009b8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4014000000000000
  009c0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009c4	51		 push	 ecx
  009c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ca	51		 push	 ecx
  009cb	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  009d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009d5	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  009da	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4014000000000000
  009e2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009e6	51		 push	 ecx
  009e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ec	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 10414: 			draw_line (x + 6.0, y1, x + 6.0, y2, MFD_COLOUR1);

  009f1	b8 04 00 00 00	 mov	 eax, 4
  009f6	6b c8 00	 imul	 ecx, eax, 0
  009f9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009ff	52		 push	 edx
  00a00	51		 push	 ecx
  00a01	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00a06	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a0b	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00a10	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4018000000000000
  00a18	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a1c	51		 push	 ecx
  00a1d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a22	51		 push	 ecx
  00a23	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00a28	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a2d	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00a32	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4018000000000000
  00a3a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a3e	51		 push	 ecx
  00a3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a44	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 10415: 		}
; 10416: 		else

  00a49	e9 08 01 00 00	 jmp	 $LN4@draw_rate_
$LN3@draw_rate_:

; 10417: 		{
; 10418: 			draw_line (x + 1.0, y1, x + 1.0, y2, MFD_COLOUR1);

  00a4e	b8 04 00 00 00	 mov	 eax, 4
  00a53	6b c8 00	 imul	 ecx, eax, 0
  00a56	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a5c	52		 push	 edx
  00a5d	51		 push	 ecx
  00a5e	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00a63	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a68	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00a6d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00a75	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a79	51		 push	 ecx
  00a7a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a7f	51		 push	 ecx
  00a80	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00a85	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a8a	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00a8f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00a97	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a9b	51		 push	 ecx
  00a9c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa1	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 10419: 			draw_line (x + 2.0, y1, x + 2.0, y2, MFD_COLOUR1);

  00aa6	b8 04 00 00 00	 mov	 eax, 4
  00aab	6b c8 00	 imul	 ecx, eax, 0
  00aae	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ab4	52		 push	 edx
  00ab5	51		 push	 ecx
  00ab6	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00abb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac0	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00ac5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00acd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ad1	51		 push	 ecx
  00ad2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ad7	51		 push	 ecx
  00ad8	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00add	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ae2	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00ae7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00aef	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00af3	51		 push	 ecx
  00af4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00af9	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 10420: 			draw_line (x + 3.0, y1, x + 3.0, y2, MFD_COLOUR1);

  00afe	b8 04 00 00 00	 mov	 eax, 4
  00b03	6b c8 00	 imul	 ecx, eax, 0
  00b06	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b0c	52		 push	 edx
  00b0d	51		 push	 ecx
  00b0e	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00b13	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b18	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00b1d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00b25	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b29	51		 push	 ecx
  00b2a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b2f	51		 push	 ecx
  00b30	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00b35	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b3a	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00b3f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00b47	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b4b	51		 push	 ecx
  00b4c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b51	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN4@draw_rate_:

; 10421: 		}
; 10422: 	}
; 10423: 
; 10424: 	//
; 10425: 	// draw rate of climb scale pointer
; 10426: 	//
; 10427: 
; 10428: 	rate_of_climb = current_flight_dynamics->world_velocity_y.value;

  00b56	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00b5b	f3 0f 10 80 14
	21 00 00	 movss	 xmm0, DWORD PTR [eax+8468]
  00b63	f3 0f 11 45 f8	 movss	 DWORD PTR _rate_of_climb$[ebp], xmm0

; 10429: 
; 10430: 	rate_of_climb = feet_per_minute (rate_of_climb);

  00b68	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _rate_of_climb$[ebp]
  00b6d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4344d9b3
  00b75	f3 0f 11 45 f8	 movss	 DWORD PTR _rate_of_climb$[ebp], xmm0

; 10431: 
; 10432: 	rate_of_climb = bound (rate_of_climb, -1000.0, 1000.0);

  00b7a	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _rate_of_climb$[ebp]
  00b7f	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c08f400000000000
  00b87	66 0f 2f c8	 comisd	 xmm1, xmm0
  00b8b	76 0f		 jbe	 SHORT $LN10@draw_rate_
  00b8d	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c08f400000000000
  00b95	f2 0f 11 45 9c	 movsd	 QWORD PTR tv486[ebp], xmm0
  00b9a	eb 32		 jmp	 SHORT $LN11@draw_rate_
$LN10@draw_rate_:
  00b9c	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _rate_of_climb$[ebp]
  00ba1	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@408f400000000000
  00ba9	76 0f		 jbe	 SHORT $LN8@draw_rate_
  00bab	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@408f400000000000
  00bb3	f2 0f 11 45 94	 movsd	 QWORD PTR tv485[ebp], xmm0
  00bb8	eb 0a		 jmp	 SHORT $LN9@draw_rate_
$LN8@draw_rate_:
  00bba	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _rate_of_climb$[ebp]
  00bbf	f2 0f 11 45 94	 movsd	 QWORD PTR tv485[ebp], xmm0
$LN9@draw_rate_:
  00bc4	f2 0f 10 45 94	 movsd	 xmm0, QWORD PTR tv485[ebp]
  00bc9	f2 0f 11 45 9c	 movsd	 QWORD PTR tv486[ebp], xmm0
$LN11@draw_rate_:
  00bce	f2 0f 5a 45 9c	 cvtsd2ss xmm0, QWORD PTR tv486[ebp]
  00bd3	f3 0f 11 45 f8	 movss	 DWORD PTR _rate_of_climb$[ebp], xmm0

; 10433: 
; 10434: 	x = CLIMB_SCALE_MAJOR_TICK_X1;

  00bd8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00be0	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00be5	f3 0f 11 45 f4	 movss	 DWORD PTR _x$[ebp], xmm0

; 10435: 
; 10436: 	y = rate_of_climb * (CLIMB_SCALE_FSD / 1000.0) - 0.1;

  00bea	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _rate_of_climb$[ebp]
  00bef	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f43a92a3d70a3d7
  00bf7	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00bff	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c03	f3 0f 11 45 f0	 movss	 DWORD PTR _y$[ebp], xmm0

; 10437: 
; 10438: 	if (draw_large_mfd)

  00c08	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00c0f	74 31		 je	 SHORT $LN5@draw_rate_

; 10439: 	{
; 10440: 		draw_2d_mono_sprite (large_rate_of_climb_scale_pointer, x, y, MFD_COLOUR1);

  00c11	b8 04 00 00 00	 mov	 eax, 4
  00c16	6b c8 00	 imul	 ecx, eax, 0
  00c19	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c1f	52		 push	 edx
  00c20	51		 push	 ecx
  00c21	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y$[ebp]
  00c26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c2b	51		 push	 ecx
  00c2c	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00c31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c36	68 00 00 00 00	 push	 OFFSET ?large_rate_of_climb_scale_pointer@@3PADA
  00c3b	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 10441: 	}
; 10442: 	else

  00c40	eb 2f		 jmp	 SHORT $LN6@draw_rate_
$LN5@draw_rate_:

; 10443: 	{
; 10444: 		draw_2d_mono_sprite (small_rate_of_climb_scale_pointer, x, y, MFD_COLOUR1);

  00c42	b8 04 00 00 00	 mov	 eax, 4
  00c47	6b c8 00	 imul	 ecx, eax, 0
  00c4a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c50	52		 push	 edx
  00c51	51		 push	 ecx
  00c52	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y$[ebp]
  00c57	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c5c	51		 push	 ecx
  00c5d	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00c62	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c67	68 00 00 00 00	 push	 OFFSET ?small_rate_of_climb_scale_pointer@@3PADA
  00c6c	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN6@draw_rate_:

; 10445: 	}
; 10446: }

  00c71	5f		 pop	 edi
  00c72	5e		 pop	 esi
  00c73	5b		 pop	 ebx
  00c74	8b e5		 mov	 esp, ebp
  00c76	5d		 pop	 ebp
  00c77	c3		 ret	 0
?draw_rate_of_climb_scale@@YGXXZ ENDP			; draw_rate_of_climb_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?display_altitude@@YGXXZ
_TEXT	SEGMENT
_barometric_altitude$1 = -32				; size = 4
_s$ = -28						; size = 20
_width$ = -8						; size = 4
_radar_altitude$ = -4					; size = 4
?display_altitude@@YGXXZ PROC				; display_altitude, COMDAT

; 10211: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10212: 	float
; 10213: 		radar_altitude,
; 10214: 		width;
; 10215: 
; 10216: 	char
; 10217: 		s[20];
; 10218: 
; 10219: 	radar_altitude = feet (current_flight_dynamics->radar_altitude.value);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0000e	f3 0f 10 80 44
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9284]
  00016	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4051f948
  0001e	f3 0f 11 45 fc	 movss	 DWORD PTR _radar_altitude$[ebp], xmm0

; 10220: 
; 10221: 	if (radar_altitude <= 1500.0)

  00023	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _radar_altitude$[ebp]
  00028	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4097700000000000
  00030	66 0f 2f c8	 comisd	 xmm1, xmm0
  00034	72 19		 jb	 SHORT $LN2@display_al

; 10222: 	{
; 10223: 		sprintf (s, "R%d", get_apache_display_radar_altitude());

  00036	e8 00 00 00 00	 call	 ?get_apache_display_radar_altitude@@YGHXZ ; get_apache_display_radar_altitude
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_03IAKIMNGC@R?$CFd@
  00041	8d 45 e4	 lea	 eax, DWORD PTR _s$[ebp]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 _sprintf
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10224: 	}
; 10225: 	else

  0004d	eb 48		 jmp	 SHORT $LN3@display_al
$LN2@display_al:

; 10226: 	{
; 10227: 		int barometric_altitude = 10 * (int)((feet(current_flight_dynamics->barometric_altitude.value) + 5.0) / 10.0);

  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00054	f3 0f 10 80 2c
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9260]
  0005c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4051f948
  00064	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00068	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4014000000000000
  00070	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4024000000000000
  00078	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  0007c	6b d1 0a	 imul	 edx, ecx, 10
  0007f	89 55 e0	 mov	 DWORD PTR _barometric_altitude$1[ebp], edx

; 10228: 
; 10229: 		sprintf (s, "%d", (int) barometric_altitude);

  00082	8b 45 e0	 mov	 eax, DWORD PTR _barometric_altitude$1[ebp]
  00085	50		 push	 eax
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0008b	8d 4d e4	 lea	 ecx, DWORD PTR _s$[ebp]
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 _sprintf
  00094	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@display_al:

; 10230: 	}
; 10231: 
; 10232: 	width = get_mono_font_string_width (s);

  00097	8d 45 e4	 lea	 eax, DWORD PTR _s$[ebp]
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  000a0	d9 5d f8	 fstp	 DWORD PTR _width$[ebp]

; 10233: 
; 10234: //	if (draw_main_display)
; 10235: 	{
; 10236: 		set_2d_mono_font_position (1.0, 0.85);

  000a3	51		 push	 ecx
  000a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  000ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b1	51		 push	 ecx
  000b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bf	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10237: 
; 10238: 		if (draw_large_mfd)

  000c4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  000cb	74 3e		 je	 SHORT $LN4@display_al

; 10239: 		{
; 10240: 			set_mono_font_type (MONO_FONT_TYPE_7X12);

  000cd	6a 05		 push	 5
  000cf	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 10241: 
; 10242: 			set_mono_font_rel_position (-width - 2.0, -4.0);

  000d4	51		 push	 ecx
  000d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  000dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e2	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width$[ebp]
  000e7	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000ee	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000f2	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4000000000000000
  000fa	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000fe	51		 push	 ecx
  000ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00104	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10243: 		}
; 10244: 		else

  00109	eb 3c		 jmp	 SHORT $LN5@display_al
$LN4@display_al:

; 10245: 		{
; 10246: 			set_mono_font_type (MONO_FONT_TYPE_5X9);

  0010b	6a 02		 push	 2
  0010d	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 10247: 
; 10248: 			set_mono_font_rel_position (-width - 1.0, -4.0);

  00112	51		 push	 ecx
  00113	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  0011b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00120	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width$[ebp]
  00125	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0012c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00130	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00138	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0013c	51		 push	 ecx
  0013d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00142	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN5@display_al:

; 10249: 		}
; 10250: 	}
; 10251: /*	else
; 10252: 	{
; 10253: 		set_2d_mono_font_position (0.2, 0.6);
; 10254: 
; 10255: 		if (draw_large_mfd)
; 10256: 		{
; 10257: 			set_mono_font_type (MONO_FONT_TYPE_7X12);
; 10258: 
; 10259: 			set_mono_font_rel_position (-width - 2.0, -4.0);
; 10260: 		}
; 10261: 		else
; 10262: 		{
; 10263: 			set_mono_font_type (MONO_FONT_TYPE_5X7);
; 10264: 
; 10265: 			set_mono_font_rel_position (-width - 1.0, -2.0);
; 10266: 		}
; 10267: 	} */
; 10268: 
; 10269: 	print_mono_font_string (s);

  00147	8d 45 e4	 lea	 eax, DWORD PTR _s$[ebp]
  0014a	50		 push	 eax
  0014b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10270: }

  00150	5f		 pop	 edi
  00151	5e		 pop	 esi
  00152	5b		 pop	 ebx
  00153	8b e5		 mov	 esp, ebp
  00155	5d		 pop	 ebp
  00156	c3		 ret	 0
?display_altitude@@YGXXZ ENDP				; display_altitude
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?display_true_airspeed@@YGXXZ
_TEXT	SEGMENT
_s$ = -24						; size = 20
_true_airspeed$ = -4					; size = 4
?display_true_airspeed@@YGXXZ PROC			; display_true_airspeed, COMDAT

; 10157: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10158: 	float
; 10159: 		true_airspeed;
; 10160: 
; 10161: 	char
; 10162: 		s[20];
; 10163: 
; 10164: 	true_airspeed = current_flight_dynamics->velocity_z.value;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0000e	f3 0f 10 80 9c
	20 00 00	 movss	 xmm0, DWORD PTR [eax+8348]
  00016	f3 0f 11 45 fc	 movss	 DWORD PTR _true_airspeed$[ebp], xmm0

; 10165: 
; 10166: 	true_airspeed = knots (true_airspeed);

  0001b	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _true_airspeed$[ebp]
  00020	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ff85d84
  00028	f3 0f 11 45 fc	 movss	 DWORD PTR _true_airspeed$[ebp], xmm0

; 10167: 
; 10168: 	sprintf (s, "%d", (int) true_airspeed);

  0002d	f3 0f 2c 45 fc	 cvttss2si eax, DWORD PTR _true_airspeed$[ebp]
  00032	50		 push	 eax
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00038	8d 4d e8	 lea	 ecx, DWORD PTR _s$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 _sprintf
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10169: 
; 10170: 	set_2d_mono_font_position (-1.0, -0.1);

  00044	51		 push	 ecx
  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  0004d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00052	51		 push	 ecx
  00053	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0005b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00060	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10171: 
; 10172: //	if (draw_main_display)
; 10173: 	{
; 10174: 		if (draw_large_mfd)

  00065	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0006c	74 2a		 je	 SHORT $LN2@display_tr

; 10175: 		{
; 10176: 			set_mono_font_type (MONO_FONT_TYPE_7X12);

  0006e	6a 05		 push	 5
  00070	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 10177: 
; 10178: 			set_mono_font_rel_position (1.0, -4.0);

  00075	51		 push	 ecx
  00076	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  0007e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00083	51		 push	 ecx
  00084	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0008c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00091	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10179: 		}
; 10180: 		else

  00096	eb 28		 jmp	 SHORT $LN3@display_tr
$LN2@display_tr:

; 10181: 		{
; 10182: 			set_mono_font_type (MONO_FONT_TYPE_5X9);

  00098	6a 02		 push	 2
  0009a	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 10183: 
; 10184: 			set_mono_font_rel_position (1.0, -3.0);

  0009f	51		 push	 ecx
  000a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  000a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ad	51		 push	 ecx
  000ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bb	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN3@display_tr:

; 10185: 		}
; 10186: 	}
; 10187: /*	else
; 10188: 	{
; 10189: 		if (draw_large_mfd)
; 10190: 		{
; 10191: 			set_mono_font_type (MONO_FONT_TYPE_7X12);
; 10192: 
; 10193: 			set_mono_font_rel_position (1.0, -4.0);
; 10194: 		}
; 10195: 		else
; 10196: 		{
; 10197: 			set_mono_font_type (MONO_FONT_TYPE_5X7);
; 10198: 
; 10199: 			set_mono_font_rel_position (1.0, -2.0);
; 10200: 		}
; 10201: 	}*/
; 10202: 
; 10203: 	print_mono_font_string (s);

  000c0	8d 45 e8	 lea	 eax, DWORD PTR _s$[ebp]
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10204: }

  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
?display_true_airspeed@@YGXXZ ENDP			; display_true_airspeed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_pitch_ladder@@YGXXZ
_TEXT	SEGMENT
tv290 = -200						; size = 8
tv1740 = -192						; size = 8
tv1531 = -192						; size = 8
tv1413 = -192						; size = 8
tv1407 = -192						; size = 8
tv1399 = -192						; size = 8
tv355 = -192						; size = 4
tv291 = -192						; size = 8
tv85 = -192						; size = 4
tv1392 = -188						; size = 4
tv1386 = -188						; size = 4
tv419 = -188						; size = 4
tv347 = -188						; size = 4
tv77 = -188						; size = 4
_x_adjust$ = -120					; size = 4
_y_10_deg_step$ = -116					; size = 4
_x_10_deg_step$ = -112					; size = 4
_y_horizon$ = -108					; size = 4
_x_horizon$ = -104					; size = 4
_y_scale$ = -100					; size = 4
_x_scale$ = -96						; size = 4
_y$ = -92						; size = 4
_x$ = -88						; size = 4
_v$ = -84						; size = 4
_u$ = -80						; size = 4
_roll$ = -76						; size = 4
_pitch_bar_scale$ = -72					; size = 4
_tan_mod_pitch$ = -68					; size = 4
_mod_pitch$ = -64					; size = 4
_pitch$ = -60						; size = 4
_vp_size$ = -56						; size = 4
_roll_size$ = -52					; size = 4
_size$ = -48						; size = 4
_x_centre$ = -44					; size = 4
_y_adjust_below_line$ = -40				; size = 4
_y_adjust_above_line$ = -36				; size = 4
_loop$ = -32						; size = 4
_step_direction$ = -28					; size = 4
_int_pitch$ = -24					; size = 4
_s$ = -20						; size = 20
?draw_pitch_ladder@@YGXXZ PROC				; draw_pitch_ladder, COMDAT

; 9822 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 9823 : 	char
; 9824 : 		s[20];
; 9825 : 
; 9826 : 	int
; 9827 : 		int_pitch,
; 9828 : 		step_direction,
; 9829 : 		loop;
; 9830 : 
; 9831 : 	float
; 9832 : 		y_adjust_above_line,
; 9833 : 		y_adjust_below_line,
; 9834 : 		x_centre,
; 9835 : 		size,
; 9836 : 		roll_size,
; 9837 : 		vp_size,
; 9838 : 		pitch,
; 9839 : 		mod_pitch,
; 9840 : 		tan_mod_pitch,
; 9841 : 		pitch_bar_scale,
; 9842 : 		roll,
; 9843 : 		u,
; 9844 : 		v,
; 9845 : 		x,
; 9846 : 		y,
; 9847 : 		x_scale,
; 9848 : 		y_scale,
; 9849 : 		x_horizon,
; 9850 : 		y_horizon,
; 9851 : 		x_10_deg_step,
; 9852 : 		y_10_deg_step,
; 9853 : 		x_adjust;
; 9854 : 
; 9855 : 	if (draw_large_mfd)

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00013	74 23		 je	 SHORT $LN7@draw_pitch

; 9856 : 	{
; 9857 : 		set_mono_font_type (MONO_FONT_TYPE_6X10);

  00015	6a 04		 push	 4
  00017	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 9858 : 
; 9859 : 		y_adjust_above_line = -3.0;

  0001c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  00024	f3 0f 11 45 dc	 movss	 DWORD PTR _y_adjust_above_line$[ebp], xmm0

; 9860 : 		y_adjust_below_line = -3.0;

  00029	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  00031	f3 0f 11 45 d8	 movss	 DWORD PTR _y_adjust_below_line$[ebp], xmm0

; 9861 : 	}
; 9862 : 	else

  00036	eb 21		 jmp	 SHORT $LN8@draw_pitch
$LN7@draw_pitch:

; 9863 : 	{
; 9864 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  00038	6a 00		 push	 0
  0003a	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 9865 : 
; 9866 : 		y_adjust_above_line = -3.0;

  0003f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  00047	f3 0f 11 45 dc	 movss	 DWORD PTR _y_adjust_above_line$[ebp], xmm0

; 9867 : 		y_adjust_below_line = -1.0;

  0004c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00054	f3 0f 11 45 d8	 movss	 DWORD PTR _y_adjust_below_line$[ebp], xmm0
$LN8@draw_pitch:

; 9868 : 	}
; 9869 : 
; 9870 : 	x_centre = 0.0;

  00059	0f 57 c0	 xorps	 xmm0, xmm0
  0005c	f3 0f 11 45 d4	 movss	 DWORD PTR _x_centre$[ebp], xmm0

; 9871 : 	size = 0.6;

  00061	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00069	f3 0f 11 45 d0	 movss	 DWORD PTR _size$[ebp], xmm0

; 9872 : 	pitch_bar_scale = 0.6;

  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00076	f3 0f 11 45 b8	 movss	 DWORD PTR _pitch_bar_scale$[ebp], xmm0

; 9873 : 
; 9874 : 	get_2d_float_screen_coordinates (PITCH_DATUM_X, PITCH_DATUM_Y, &u, &v);

  0007b	8d 45 ac	 lea	 eax, DWORD PTR _v$[ebp]
  0007e	50		 push	 eax
  0007f	8d 4d b0	 lea	 ecx, DWORD PTR _u$[ebp]
  00082	51		 push	 ecx
  00083	51		 push	 ecx
  00084	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  0008c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00091	51		 push	 ecx
  00092	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  00097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009c	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 9875 : 
; 9876 : 	//
; 9877 : 	// roll
; 9878 : 	//
; 9879 : 
; 9880 : 	roll = get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_ROLL);

  000a1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  000a8	74 0f		 je	 SHORT $LN19@draw_pitch
  000aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000af	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b1	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv77[ebp], ecx
  000b7	eb 24		 jmp	 SHORT $LN20@draw_pitch
$LN19@draw_pitch:
  000b9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  000bf	83 c2 3a	 add	 edx, 58			; 0000003aH
  000c2	52		 push	 edx
  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  000c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000d3	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv77[ebp], 0
$LN20@draw_pitch:
  000dd	b9 01 00 00 00	 mov	 ecx, 1
  000e2	85 c9		 test	 ecx, ecx
  000e4	74 0c		 je	 SHORT $LN21@draw_pitch
  000e6	c7 85 40 ff ff
	ff 71 00 00 00	 mov	 DWORD PTR tv85[ebp], 113 ; 00000071H
  000f0	eb 24		 jmp	 SHORT $LN22@draw_pitch
$LN21@draw_pitch:
  000f2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  000f8	83 c2 3a	 add	 edx, 58			; 0000003aH
  000fb	52		 push	 edx
  000fc	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00101	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0010c	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv85[ebp], 0
$LN22@draw_pitch:
  00116	6a 71		 push	 113			; 00000071H
  00118	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0011e	51		 push	 ecx
  0011f	69 95 44 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv77[ebp], 700
  00129	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv85[ebp]
  0012f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00136	ff d1		 call	 ecx
  00138	d9 5d b4	 fstp	 DWORD PTR _roll$[ebp]

; 9881 : 
; 9882 : 	set_2d_instance_position (mfd_env, PITCH_DATUM_X, PITCH_DATUM_Y);

  0013b	51		 push	 ecx
  0013c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  00144	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00149	51		 push	 ecx
  0014a	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  0014f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00154	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00159	50		 push	 eax
  0015a	e8 00 00 00 00	 call	 ?set_2d_instance_position@@YGXPAUENV_2D@@MM@Z ; set_2d_instance_position

; 9883 : 	roll_size = size + 0.2;

  0015f	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  00164	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0016c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00170	f3 0f 11 45 cc	 movss	 DWORD PTR _roll_size$[ebp], xmm0

; 9884 : 
; 9885 : 	set_2d_instance_rotation (mfd_env, rad (0.0));

  00175	51		 push	 ecx
  00176	0f 57 c0	 xorps	 xmm0, xmm0
  00179	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00183	50		 push	 eax
  00184	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 9886 : 	draw_2d_line (0.0, roll_size, 0.0, roll_size - 0.05, MFD_COLOUR_CYAN);

  00189	b8 04 00 00 00	 mov	 eax, 4
  0018e	c1 e0 04	 shl	 eax, 4
  00191	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00197	51		 push	 ecx
  00198	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  0019d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  001a5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001a9	51		 push	 ecx
  001aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001af	51		 push	 ecx
  001b0	0f 57 c0	 xorps	 xmm0, xmm0
  001b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b8	51		 push	 ecx
  001b9	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  001be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c3	51		 push	 ecx
  001c4	0f 57 c0	 xorps	 xmm0, xmm0
  001c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cc	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9887 : 
; 9888 : 	set_2d_instance_rotation (mfd_env, rad (5.0));

  001d1	51		 push	 ecx
  001d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db2b8c2
  001da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001e4	50		 push	 eax
  001e5	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 9889 : 	draw_2d_line (0.0, roll_size, 0.0, roll_size - 0.025, MFD_COLOUR_CYAN);

  001ea	b8 04 00 00 00	 mov	 eax, 4
  001ef	c1 e0 04	 shl	 eax, 4
  001f2	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  001f8	51		 push	 ecx
  001f9	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  001fe	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9999999999999a
  00206	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0020a	51		 push	 ecx
  0020b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00210	51		 push	 ecx
  00211	0f 57 c0	 xorps	 xmm0, xmm0
  00214	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00219	51		 push	 ecx
  0021a	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  0021f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00224	51		 push	 ecx
  00225	0f 57 c0	 xorps	 xmm0, xmm0
  00228	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9890 : 	set_2d_instance_rotation (mfd_env, rad (-5.0));

  00232	51		 push	 ecx
  00233	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdb2b8c2
  0023b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00240	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00245	50		 push	 eax
  00246	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 9891 : 	draw_2d_line (0.0, roll_size, 0.0, roll_size - 0.025, MFD_COLOUR_CYAN);

  0024b	b8 04 00 00 00	 mov	 eax, 4
  00250	c1 e0 04	 shl	 eax, 4
  00253	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00259	51		 push	 ecx
  0025a	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  0025f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9999999999999a
  00267	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0026b	51		 push	 ecx
  0026c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00271	51		 push	 ecx
  00272	0f 57 c0	 xorps	 xmm0, xmm0
  00275	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027a	51		 push	 ecx
  0027b	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  00280	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00285	51		 push	 ecx
  00286	0f 57 c0	 xorps	 xmm0, xmm0
  00289	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9892 : 
; 9893 : 	set_2d_instance_rotation (mfd_env, rad (10.0));

  00293	51		 push	 ecx
  00294	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e32b8c2
  0029c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  002a6	50		 push	 eax
  002a7	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 9894 : 	draw_2d_line (0.0, roll_size, 0.0, roll_size - 0.05, MFD_COLOUR_CYAN);

  002ac	b8 04 00 00 00	 mov	 eax, 4
  002b1	c1 e0 04	 shl	 eax, 4
  002b4	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  002ba	51		 push	 ecx
  002bb	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  002c0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  002c8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002cc	51		 push	 ecx
  002cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d2	51		 push	 ecx
  002d3	0f 57 c0	 xorps	 xmm0, xmm0
  002d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002db	51		 push	 ecx
  002dc	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  002e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e6	51		 push	 ecx
  002e7	0f 57 c0	 xorps	 xmm0, xmm0
  002ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ef	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9895 : 	set_2d_instance_rotation (mfd_env, rad (-10.0));

  002f4	51		 push	 ecx
  002f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be32b8c2
  002fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00302	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00307	50		 push	 eax
  00308	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 9896 : 	draw_2d_line (0.0, roll_size, 0.0, roll_size - 0.05, MFD_COLOUR_CYAN);

  0030d	b8 04 00 00 00	 mov	 eax, 4
  00312	c1 e0 04	 shl	 eax, 4
  00315	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0031b	51		 push	 ecx
  0031c	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  00321	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  00329	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0032d	51		 push	 ecx
  0032e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00333	51		 push	 ecx
  00334	0f 57 c0	 xorps	 xmm0, xmm0
  00337	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033c	51		 push	 ecx
  0033d	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  00342	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00347	51		 push	 ecx
  00348	0f 57 c0	 xorps	 xmm0, xmm0
  0034b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00350	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9897 : 
; 9898 : 	set_2d_instance_rotation (mfd_env, rad (15.0));

  00355	51		 push	 ecx
  00356	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e860a92
  0035e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00363	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00368	50		 push	 eax
  00369	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 9899 : 	draw_2d_line (0.0, roll_size, 0.0, roll_size - 0.025, MFD_COLOUR_CYAN);

  0036e	b8 04 00 00 00	 mov	 eax, 4
  00373	c1 e0 04	 shl	 eax, 4
  00376	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0037c	51		 push	 ecx
  0037d	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  00382	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9999999999999a
  0038a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0038e	51		 push	 ecx
  0038f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00394	51		 push	 ecx
  00395	0f 57 c0	 xorps	 xmm0, xmm0
  00398	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039d	51		 push	 ecx
  0039e	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  003a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a8	51		 push	 ecx
  003a9	0f 57 c0	 xorps	 xmm0, xmm0
  003ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9900 : 	set_2d_instance_rotation (mfd_env, rad (-15.0));

  003b6	51		 push	 ecx
  003b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be860a92
  003bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  003c9	50		 push	 eax
  003ca	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 9901 : 	draw_2d_line (0.0, roll_size, 0.0, roll_size - 0.025, MFD_COLOUR_CYAN);

  003cf	b8 04 00 00 00	 mov	 eax, 4
  003d4	c1 e0 04	 shl	 eax, 4
  003d7	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  003dd	51		 push	 ecx
  003de	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  003e3	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9999999999999a
  003eb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003ef	51		 push	 ecx
  003f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f5	51		 push	 ecx
  003f6	0f 57 c0	 xorps	 xmm0, xmm0
  003f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003fe	51		 push	 ecx
  003ff	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  00404	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00409	51		 push	 ecx
  0040a	0f 57 c0	 xorps	 xmm0, xmm0
  0040d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00412	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9902 : 
; 9903 : 	set_2d_instance_rotation (mfd_env, rad (20.0));

  00417	51		 push	 ecx
  00418	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb2b8c2
  00420	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00425	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0042a	50		 push	 eax
  0042b	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 9904 : 	draw_2d_line (0.0, roll_size, 0.0, roll_size - 0.05, MFD_COLOUR_CYAN);

  00430	b8 04 00 00 00	 mov	 eax, 4
  00435	c1 e0 04	 shl	 eax, 4
  00438	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0043e	51		 push	 ecx
  0043f	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  00444	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  0044c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00450	51		 push	 ecx
  00451	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00456	51		 push	 ecx
  00457	0f 57 c0	 xorps	 xmm0, xmm0
  0045a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0045f	51		 push	 ecx
  00460	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  00465	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046a	51		 push	 ecx
  0046b	0f 57 c0	 xorps	 xmm0, xmm0
  0046e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00473	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9905 : 	set_2d_instance_rotation (mfd_env, rad (-20.0));

  00478	51		 push	 ecx
  00479	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb2b8c2
  00481	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00486	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0048b	50		 push	 eax
  0048c	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 9906 : 	draw_2d_line (0.0, roll_size, 0.0, roll_size - 0.05, MFD_COLOUR_CYAN);

  00491	b8 04 00 00 00	 mov	 eax, 4
  00496	c1 e0 04	 shl	 eax, 4
  00499	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0049f	51		 push	 ecx
  004a0	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  004a5	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  004ad	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004b1	51		 push	 ecx
  004b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b7	51		 push	 ecx
  004b8	0f 57 c0	 xorps	 xmm0, xmm0
  004bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c0	51		 push	 ecx
  004c1	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  004c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004cb	51		 push	 ecx
  004cc	0f 57 c0	 xorps	 xmm0, xmm0
  004cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9907 : 
; 9908 : 	set_2d_instance_rotation (mfd_env, rad (25.0));

  004d9	51		 push	 ecx
  004da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3edf66f3
  004e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  004ec	50		 push	 eax
  004ed	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 9909 : 	draw_2d_line (0.0, roll_size, 0.0, roll_size - 0.025, MFD_COLOUR_CYAN);

  004f2	b8 04 00 00 00	 mov	 eax, 4
  004f7	c1 e0 04	 shl	 eax, 4
  004fa	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00500	51		 push	 ecx
  00501	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  00506	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9999999999999a
  0050e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00512	51		 push	 ecx
  00513	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00518	51		 push	 ecx
  00519	0f 57 c0	 xorps	 xmm0, xmm0
  0051c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00521	51		 push	 ecx
  00522	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  00527	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0052c	51		 push	 ecx
  0052d	0f 57 c0	 xorps	 xmm0, xmm0
  00530	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00535	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9910 : 	set_2d_instance_rotation (mfd_env, rad (-25.0));

  0053a	51		 push	 ecx
  0053b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bedf66f3
  00543	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00548	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0054d	50		 push	 eax
  0054e	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 9911 : 	draw_2d_line (0.0, roll_size, 0.0, roll_size - 0.025, MFD_COLOUR_CYAN);

  00553	b8 04 00 00 00	 mov	 eax, 4
  00558	c1 e0 04	 shl	 eax, 4
  0055b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00561	51		 push	 ecx
  00562	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  00567	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9999999999999a
  0056f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00573	51		 push	 ecx
  00574	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00579	51		 push	 ecx
  0057a	0f 57 c0	 xorps	 xmm0, xmm0
  0057d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00582	51		 push	 ecx
  00583	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  00588	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0058d	51		 push	 ecx
  0058e	0f 57 c0	 xorps	 xmm0, xmm0
  00591	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00596	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9912 : 
; 9913 : 	set_2d_instance_rotation (mfd_env, rad (30.0));

  0059b	51		 push	 ecx
  0059c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f060a92
  005a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  005ae	50		 push	 eax
  005af	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 9914 : 	draw_2d_line (0.0, roll_size, 0.0, roll_size - 0.05, MFD_COLOUR_CYAN);

  005b4	b8 04 00 00 00	 mov	 eax, 4
  005b9	c1 e0 04	 shl	 eax, 4
  005bc	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  005c2	51		 push	 ecx
  005c3	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  005c8	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  005d0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005d4	51		 push	 ecx
  005d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005da	51		 push	 ecx
  005db	0f 57 c0	 xorps	 xmm0, xmm0
  005de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e3	51		 push	 ecx
  005e4	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  005e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ee	51		 push	 ecx
  005ef	0f 57 c0	 xorps	 xmm0, xmm0
  005f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9915 : 	set_2d_instance_rotation (mfd_env, rad (-30.0));

  005fc	51		 push	 ecx
  005fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf060a92
  00605	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0060a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0060f	50		 push	 eax
  00610	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 9916 : 	draw_2d_line (0.0, roll_size, 0.0, roll_size - 0.05, MFD_COLOUR_CYAN);

  00615	b8 04 00 00 00	 mov	 eax, 4
  0061a	c1 e0 04	 shl	 eax, 4
  0061d	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00623	51		 push	 ecx
  00624	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  00629	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  00631	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00635	51		 push	 ecx
  00636	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063b	51		 push	 ecx
  0063c	0f 57 c0	 xorps	 xmm0, xmm0
  0063f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00644	51		 push	 ecx
  00645	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  0064a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0064f	51		 push	 ecx
  00650	0f 57 c0	 xorps	 xmm0, xmm0
  00653	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00658	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9917 : 
; 9918 : 	set_2d_instance_rotation (mfd_env, bound (roll, rad (-30.0), rad (30.0)));

  0065d	f3 0f 5a 45 b4	 cvtss2sd xmm0, DWORD PTR _roll$[ebp]
  00662	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bfe0c15236000000
  0066a	66 0f 2f c8	 comisd	 xmm1, xmm0
  0066e	76 12		 jbe	 SHORT $LN25@draw_pitch
  00670	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bfe0c15236000000
  00678	f2 0f 11 85 40
	ff ff ff	 movsd	 QWORD PTR tv291[ebp], xmm0
  00680	eb 3e		 jmp	 SHORT $LN26@draw_pitch
$LN25@draw_pitch:
  00682	f3 0f 5a 45 b4	 cvtss2sd xmm0, DWORD PTR _roll$[ebp]
  00687	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fe0c15236000000
  0068f	76 12		 jbe	 SHORT $LN23@draw_pitch
  00691	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fe0c15236000000
  00699	f2 0f 11 85 38
	ff ff ff	 movsd	 QWORD PTR tv290[ebp], xmm0
  006a1	eb 0d		 jmp	 SHORT $LN24@draw_pitch
$LN23@draw_pitch:
  006a3	f3 0f 5a 45 b4	 cvtss2sd xmm0, DWORD PTR _roll$[ebp]
  006a8	f2 0f 11 85 38
	ff ff ff	 movsd	 QWORD PTR tv290[ebp], xmm0
$LN24@draw_pitch:
  006b0	f2 0f 10 85 38
	ff ff ff	 movsd	 xmm0, QWORD PTR tv290[ebp]
  006b8	f2 0f 11 85 40
	ff ff ff	 movsd	 QWORD PTR tv291[ebp], xmm0
$LN26@draw_pitch:
  006c0	f2 0f 5a 85 40
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv291[ebp]
  006c8	51		 push	 ecx
  006c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  006d3	50		 push	 eax
  006d4	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 9919 : 	draw_2d_line (0.0, roll_size - 0.075, 0.0, roll_size, MFD_COLOUR_CYAN);

  006d9	b8 04 00 00 00	 mov	 eax, 4
  006de	c1 e0 04	 shl	 eax, 4
  006e1	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  006e7	51		 push	 ecx
  006e8	51		 push	 ecx
  006e9	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  006ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f3	51		 push	 ecx
  006f4	0f 57 c0	 xorps	 xmm0, xmm0
  006f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006fc	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  00701	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb3333333333333
  00709	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0070d	51		 push	 ecx
  0070e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00713	51		 push	 ecx
  00714	0f 57 c0	 xorps	 xmm0, xmm0
  00717	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0071c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9920 : 
; 9921 : 
; 9922 : 	//
; 9923 : 	// set 2D environment
; 9924 : 	//
; 9925 : 
; 9926 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN * size, MFD_WINDOW_Y_MIN * size, MFD_WINDOW_X_MAX * size, MFD_WINDOW_Y_MAX * size);

  00721	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  00726	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff199999999999a
  0072e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00732	51		 push	 ecx
  00733	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00738	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  0073d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff199999999999a
  00745	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00749	51		 push	 ecx
  0074a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0074f	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  00754	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff199999999999a
  0075c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00760	51		 push	 ecx
  00761	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00766	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  0076b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff199999999999a
  00773	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00777	51		 push	 ecx
  00778	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00782	50		 push	 eax
  00783	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 9927 : 
; 9928 : 	vp_size = mfd_viewport_size * size * 0.5;

  00788	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00790	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _size$[ebp]
  00795	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00799	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  007a1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007a5	f3 0f 11 45 c8	 movss	 DWORD PTR _vp_size$[ebp], xmm0

; 9929 : 
; 9930 : 	set_2d_viewport (mfd_env, u - vp_size, v - vp_size, u + vp_size - 0.001, v + vp_size - 0.001);

  007aa	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _v$[ebp]
  007af	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _vp_size$[ebp]
  007b4	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  007b8	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  007c0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007c4	51		 push	 ecx
  007c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ca	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _u$[ebp]
  007cf	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _vp_size$[ebp]
  007d4	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  007d8	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  007e0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007e4	51		 push	 ecx
  007e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ea	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _v$[ebp]
  007ef	f3 0f 5c 45 c8	 subss	 xmm0, DWORD PTR _vp_size$[ebp]
  007f4	51		 push	 ecx
  007f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007fa	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _u$[ebp]
  007ff	f3 0f 5c 45 c8	 subss	 xmm0, DWORD PTR _vp_size$[ebp]
  00804	51		 push	 ecx
  00805	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0080a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0080f	50		 push	 eax
  00810	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9931 : 
; 9932 : 	//
; 9933 : 	// pitch
; 9934 : 	//
; 9935 : 
; 9936 : 	pitch = get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_PITCH);

  00815	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0081c	74 0f		 je	 SHORT $LN27@draw_pitch
  0081e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00823	8b 08		 mov	 ecx, DWORD PTR [eax]
  00825	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv347[ebp], ecx
  0082b	eb 24		 jmp	 SHORT $LN28@draw_pitch
$LN27@draw_pitch:
  0082d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  00833	83 c2 72	 add	 edx, 114		; 00000072H
  00836	52		 push	 edx
  00837	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0083c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00841	50		 push	 eax
  00842	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00847	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv347[ebp], 0
$LN28@draw_pitch:
  00851	b9 01 00 00 00	 mov	 ecx, 1
  00856	85 c9		 test	 ecx, ecx
  00858	74 0c		 je	 SHORT $LN29@draw_pitch
  0085a	c7 85 40 ff ff
	ff 54 00 00 00	 mov	 DWORD PTR tv355[ebp], 84 ; 00000054H
  00864	eb 24		 jmp	 SHORT $LN30@draw_pitch
$LN29@draw_pitch:
  00866	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  0086c	83 c2 72	 add	 edx, 114		; 00000072H
  0086f	52		 push	 edx
  00870	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00875	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0087a	50		 push	 eax
  0087b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00880	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv355[ebp], 0
$LN30@draw_pitch:
  0088a	6a 54		 push	 84			; 00000054H
  0088c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00892	51		 push	 ecx
  00893	69 95 44 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv347[ebp], 700
  0089d	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv355[ebp]
  008a3	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  008aa	ff d1		 call	 ecx
  008ac	d9 5d c4	 fstp	 DWORD PTR _pitch$[ebp]

; 9937 : 
; 9938 : 	mod_pitch = fmod (pitch, rad (10.0f));

  008af	51		 push	 ecx
  008b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e32b8c2
  008b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008bd	51		 push	 ecx
  008be	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  008c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c8	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  008cd	d9 5d c0	 fstp	 DWORD PTR _mod_pitch$[ebp]

; 9939 : 
; 9940 : 	tan_mod_pitch = -tan (mod_pitch);

  008d0	51		 push	 ecx
  008d1	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _mod_pitch$[ebp]
  008d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008db	e8 00 00 00 00	 call	 ?tan@@YGMM@Z		; tan
  008e0	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv1386[ebp]
  008e6	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1386[ebp]
  008ee	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  008f5	f3 0f 11 45 bc	 movss	 DWORD PTR _tan_mod_pitch$[ebp], xmm0

; 9941 : 
; 9942 : 	int_pitch = (int) (pitch * (1.0 / rad (10.0)));

  008fa	f3 0f 5a 45 c4	 cvtss2sd xmm0, DWORD PTR _pitch$[ebp]
  008ff	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4016eb167e7d81e3
  00907	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0090b	89 45 e8	 mov	 DWORD PTR _int_pitch$[ebp], eax

; 9943 : 
; 9944 : 	//
; 9945 : 	// get x and y scale factors
; 9946 : 	//
; 9947 : 
; 9948 : 	x_scale = -sin (roll) * 1.5 * pitch_bar_scale;

  0090e	51		 push	 ecx
  0090f	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00914	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00919	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  0091e	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv1392[ebp]
  00924	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1392[ebp]
  0092c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00933	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00937	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff8000000000000
  0093f	f3 0f 5a 4d b8	 cvtss2sd xmm1, DWORD PTR _pitch_bar_scale$[ebp]
  00944	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00948	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0094c	f3 0f 11 45 a0	 movss	 DWORD PTR _x_scale$[ebp], xmm0

; 9949 : 
; 9950 : 	y_scale = cos (roll) * 1.5 * pitch_bar_scale;

  00951	51		 push	 ecx
  00952	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00957	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0095c	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  00961	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv1399[ebp]
  00967	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1399[ebp]
  0096f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff8000000000000
  00977	f3 0f 5a 4d b8	 cvtss2sd xmm1, DWORD PTR _pitch_bar_scale$[ebp]
  0097c	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00980	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00984	f3 0f 11 45 9c	 movss	 DWORD PTR _y_scale$[ebp], xmm0

; 9951 : 
; 9952 : 	x_horizon = tan_mod_pitch * x_scale;

  00989	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _tan_mod_pitch$[ebp]
  0098e	f3 0f 59 45 a0	 mulss	 xmm0, DWORD PTR _x_scale$[ebp]
  00993	f3 0f 11 45 98	 movss	 DWORD PTR _x_horizon$[ebp], xmm0

; 9953 : 	y_horizon = tan_mod_pitch * y_scale;

  00998	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _tan_mod_pitch$[ebp]
  0099d	f3 0f 59 45 9c	 mulss	 xmm0, DWORD PTR _y_scale$[ebp]
  009a2	f3 0f 11 45 94	 movss	 DWORD PTR _y_horizon$[ebp], xmm0

; 9954 : 
; 9955 : 	x_10_deg_step = tan (rad (10.0)) * x_scale;

  009a7	83 ec 08	 sub	 esp, 8
  009aa	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fc6571848000000
  009b2	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  009b7	e8 00 00 00 00	 call	 _tan
  009bc	83 c4 08	 add	 esp, 8
  009bf	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv1407[ebp]
  009c5	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1407[ebp]
  009cd	f3 0f 5a 4d a0	 cvtss2sd xmm1, DWORD PTR _x_scale$[ebp]
  009d2	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  009d6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009da	f3 0f 11 45 90	 movss	 DWORD PTR _x_10_deg_step$[ebp], xmm0

; 9956 : 	y_10_deg_step = tan (rad (10.0)) * y_scale;

  009df	83 ec 08	 sub	 esp, 8
  009e2	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fc6571848000000
  009ea	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  009ef	e8 00 00 00 00	 call	 _tan
  009f4	83 c4 08	 add	 esp, 8
  009f7	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv1413[ebp]
  009fd	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1413[ebp]
  00a05	f3 0f 5a 4d 9c	 cvtss2sd xmm1, DWORD PTR _y_scale$[ebp]
  00a0a	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00a0e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a12	f3 0f 11 45 8c	 movss	 DWORD PTR _y_10_deg_step$[ebp], xmm0

; 9957 : 
; 9958 : 	////////////////////////////////////////
; 9959 : 	//
; 9960 : 	// draw pitch ladder
; 9961 : 	//
; 9962 : 	////////////////////////////////////////
; 9963 : 
; 9964 : 	step_direction = -1;

  00a17	c7 45 e4 ff ff
	ff ff		 mov	 DWORD PTR _step_direction$[ebp], -1

; 9965 : 
; 9966 : 	int_pitch = limit_pitch (int_pitch + 3, &step_direction);

  00a1e	8d 45 e4	 lea	 eax, DWORD PTR _step_direction$[ebp]
  00a21	50		 push	 eax
  00a22	8b 4d e8	 mov	 ecx, DWORD PTR _int_pitch$[ebp]
  00a25	83 c1 03	 add	 ecx, 3
  00a28	51		 push	 ecx
  00a29	e8 00 00 00 00	 call	 ?limit_pitch@@YGHHPAH@Z	; limit_pitch
  00a2e	89 45 e8	 mov	 DWORD PTR _int_pitch$[ebp], eax

; 9967 : 
; 9968 : 	x = x_horizon + x_10_deg_step * 3.0;

  00a31	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _x_horizon$[ebp]
  00a36	f3 0f 5a 4d 90	 cvtss2sd xmm1, DWORD PTR _x_10_deg_step$[ebp]
  00a3b	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4008000000000000
  00a43	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00a47	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a4b	f3 0f 11 45 a8	 movss	 DWORD PTR _x$[ebp], xmm0

; 9969 : 	y = y_horizon + y_10_deg_step * 3.0;

  00a50	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _y_horizon$[ebp]
  00a55	f3 0f 5a 4d 8c	 cvtss2sd xmm1, DWORD PTR _y_10_deg_step$[ebp]
  00a5a	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4008000000000000
  00a62	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00a66	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a6a	f3 0f 11 45 a4	 movss	 DWORD PTR _y$[ebp], xmm0

; 9970 : 
; 9971 : 	set_2d_instance_rotation (mfd_env, roll);

  00a6f	51		 push	 ecx
  00a70	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00a75	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a7a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a7f	50		 push	 eax
  00a80	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 9972 : 
; 9973 : 	for (loop = 0; loop < 7; loop++)

  00a85	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  00a8c	eb 09		 jmp	 SHORT $LN4@draw_pitch
$LN2@draw_pitch:
  00a8e	8b 45 e0	 mov	 eax, DWORD PTR _loop$[ebp]
  00a91	83 c0 01	 add	 eax, 1
  00a94	89 45 e0	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@draw_pitch:
  00a97	83 7d e0 07	 cmp	 DWORD PTR _loop$[ebp], 7
  00a9b	0f 8d 8e 0f 00
	00		 jge	 $LN3@draw_pitch

; 9974 : 	{
; 9975 : 		set_2d_instance_position (mfd_env, x, y);

  00aa1	51		 push	 ecx
  00aa2	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y$[ebp]
  00aa7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aac	51		 push	 ecx
  00aad	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00ab2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ab7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00abc	50		 push	 eax
  00abd	e8 00 00 00 00	 call	 ?set_2d_instance_position@@YGXPAUENV_2D@@MM@Z ; set_2d_instance_position

; 9976 : 
; 9977 : 		switch (int_pitch)

  00ac2	8b 45 e8	 mov	 eax, DWORD PTR _int_pitch$[ebp]
  00ac5	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv419[ebp], eax
  00acb	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR tv419[ebp]
  00ad1	83 c1 09	 add	 ecx, 9
  00ad4	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv419[ebp], ecx
  00ada	83 bd 44 ff ff
	ff 12		 cmp	 DWORD PTR tv419[ebp], 18 ; 00000012H
  00ae1	0f 87 12 0f 00
	00		 ja	 $LN5@draw_pitch
  00ae7	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR tv419[ebp]
  00aed	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN31@draw_pitch[edx]
  00af4	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN32@draw_pitch[eax*4]
$LN9@draw_pitch:

; 9978 : 		{
; 9979 : 			////////////////////////////////////////
; 9980 : 			case 0:
; 9981 : 			////////////////////////////////////////
; 9982 : 			{
; 9983 : 				set_mono_font_colour (MFD_COLOUR_RED);

  00afb	b8 04 00 00 00	 mov	 eax, 4
  00b00	6b c8 0f	 imul	 ecx, eax, 15
  00b03	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b09	52		 push	 edx
  00b0a	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 9984 : 				draw_2d_line (+PITCH_BAR_X7, +PITCH_BAR_Y7, -PITCH_BAR_X7, +PITCH_BAR_Y7, MFD_COLOUR_RED);

  00b0f	b8 04 00 00 00	 mov	 eax, 4
  00b14	6b c8 0f	 imul	 ecx, eax, 15
  00b17	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b1d	52		 push	 edx
  00b1e	0f 57 c0	 xorps	 xmm0, xmm0
  00b21	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00b26	51		 push	 ecx
  00b27	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b2c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  00b34	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00b39	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00b40	51		 push	 ecx
  00b41	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b46	0f 57 c0	 xorps	 xmm0, xmm0
  00b49	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00b4e	51		 push	 ecx
  00b4f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b54	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  00b5c	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00b61	51		 push	 ecx
  00b62	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b67	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9985 : 
; 9986 : 				break;

  00b6c	e9 88 0e 00 00	 jmp	 $LN5@draw_pitch
$LN10@draw_pitch:

; 9987 : 			}
; 9988 : 			////////////////////////////////////////
; 9989 : 			case 1:
; 9990 : 			case 2:
; 9991 : 			case 3:
; 9992 : 			case 4:
; 9993 : 			case 5:
; 9994 : 			case 6:
; 9995 : 			case 7:
; 9996 : 			case 8:
; 9997 : 			////////////////////////////////////////
; 9998 : 			{
; 9999 : 
; 10000: 				set_mono_font_colour (MFD_COLOUR_BLUE);

  00b71	b8 04 00 00 00	 mov	 eax, 4
  00b76	6b c8 0c	 imul	 ecx, eax, 12
  00b79	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b7f	52		 push	 edx
  00b80	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 10001: 
; 10002: 				if (step_direction == -1)

  00b85	83 7d e4 ff	 cmp	 DWORD PTR _step_direction$[ebp], -1
  00b89	0f 85 83 01 00
	00		 jne	 $LN11@draw_pitch

; 10003: 				{
; 10004: 					draw_2d_line (+PITCH_BAR_X1, +PITCH_BAR_Y1, +PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR_BLUE);

  00b8f	b8 04 00 00 00	 mov	 eax, 4
  00b94	6b c8 0c	 imul	 ecx, eax, 12
  00b97	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b9d	52		 push	 edx
  00b9e	0f 57 c0	 xorps	 xmm0, xmm0
  00ba1	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00ba6	51		 push	 ecx
  00ba7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  00bb4	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00bb9	51		 push	 ecx
  00bba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bbf	0f 57 c0	 xorps	 xmm0, xmm0
  00bc2	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00bc7	51		 push	 ecx
  00bc8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bcd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00bd5	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00bda	51		 push	 ecx
  00bdb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00be0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10005: 					draw_2d_line (-PITCH_BAR_X1, +PITCH_BAR_Y1, -PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR_BLUE);

  00be5	b8 04 00 00 00	 mov	 eax, 4
  00bea	6b c8 0c	 imul	 ecx, eax, 12
  00bed	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00bf3	52		 push	 edx
  00bf4	0f 57 c0	 xorps	 xmm0, xmm0
  00bf7	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00bfc	51		 push	 ecx
  00bfd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c02	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  00c0a	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00c0f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00c16	51		 push	 ecx
  00c17	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c1c	0f 57 c0	 xorps	 xmm0, xmm0
  00c1f	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00c24	51		 push	 ecx
  00c25	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c2a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00c32	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00c37	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00c3e	51		 push	 ecx
  00c3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c44	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10006: 
; 10007: 					draw_2d_line (+PITCH_BAR_X6, +PITCH_BAR_Y6, +PITCH_BAR_X8, +PITCH_BAR_Y8, MFD_COLOUR_BLUE);

  00c49	b8 04 00 00 00	 mov	 eax, 4
  00c4e	6b c8 0c	 imul	 ecx, eax, 12
  00c51	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c57	52		 push	 edx
  00c58	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  00c60	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00c65	51		 push	 ecx
  00c66	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c6b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  00c73	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00c78	51		 push	 ecx
  00c79	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c7e	0f 57 c0	 xorps	 xmm0, xmm0
  00c81	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00c86	51		 push	 ecx
  00c87	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c8c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  00c94	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00c99	51		 push	 ecx
  00c9a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c9f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10008: 					draw_2d_line (-PITCH_BAR_X6, +PITCH_BAR_Y6, -PITCH_BAR_X8, +PITCH_BAR_Y8, MFD_COLOUR_BLUE);

  00ca4	b8 04 00 00 00	 mov	 eax, 4
  00ca9	6b c8 0c	 imul	 ecx, eax, 12
  00cac	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00cb2	52		 push	 edx
  00cb3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  00cbb	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00cc0	51		 push	 ecx
  00cc1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cc6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  00cce	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00cd3	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00cda	51		 push	 ecx
  00cdb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ce0	0f 57 c0	 xorps	 xmm0, xmm0
  00ce3	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00ce8	51		 push	 ecx
  00ce9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  00cf6	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00cfb	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00d02	51		 push	 ecx
  00d03	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d08	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10009: 				}
; 10010: 				else

  00d0d	e9 b6 01 00 00	 jmp	 $LN12@draw_pitch
$LN11@draw_pitch:

; 10011: 				{
; 10012: 					draw_2d_line (-PITCH_BAR_X1, -PITCH_BAR_Y1, -PITCH_BAR_X6, -PITCH_BAR_Y6, MFD_COLOUR_BLUE);

  00d12	b8 04 00 00 00	 mov	 eax, 4
  00d17	6b c8 0c	 imul	 ecx, eax, 12
  00d1a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00d20	52		 push	 edx
  00d21	0f 57 c0	 xorps	 xmm0, xmm0
  00d24	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00d29	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00d30	51		 push	 ecx
  00d31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d36	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  00d3e	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00d43	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00d4a	51		 push	 ecx
  00d4b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d50	0f 57 c0	 xorps	 xmm0, xmm0
  00d53	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00d58	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00d5f	51		 push	 ecx
  00d60	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d65	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00d6d	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00d72	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00d79	51		 push	 ecx
  00d7a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d7f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10013: 					draw_2d_line (+PITCH_BAR_X1, -PITCH_BAR_Y1, +PITCH_BAR_X6, -PITCH_BAR_Y6, MFD_COLOUR_BLUE);

  00d84	b8 04 00 00 00	 mov	 eax, 4
  00d89	6b c8 0c	 imul	 ecx, eax, 12
  00d8c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00d92	52		 push	 edx
  00d93	0f 57 c0	 xorps	 xmm0, xmm0
  00d96	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00d9b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00da2	51		 push	 ecx
  00da3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00da8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  00db0	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00db5	51		 push	 ecx
  00db6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dbb	0f 57 c0	 xorps	 xmm0, xmm0
  00dbe	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00dc3	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00dca	51		 push	 ecx
  00dcb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dd0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00dd8	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00ddd	51		 push	 ecx
  00dde	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00de3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10014: 
; 10015: 					draw_2d_line (-PITCH_BAR_X6, -PITCH_BAR_Y6, -PITCH_BAR_X8, -PITCH_BAR_Y8, MFD_COLOUR_BLUE);

  00de8	b8 04 00 00 00	 mov	 eax, 4
  00ded	6b c8 0c	 imul	 ecx, eax, 12
  00df0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00df6	52		 push	 edx
  00df7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  00dff	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e04	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00e0b	51		 push	 ecx
  00e0c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e11	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  00e19	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e1e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00e25	51		 push	 ecx
  00e26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e2b	0f 57 c0	 xorps	 xmm0, xmm0
  00e2e	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e33	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00e3a	51		 push	 ecx
  00e3b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e40	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  00e48	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e4d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00e54	51		 push	 ecx
  00e55	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e5a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10016: 					draw_2d_line (+PITCH_BAR_X6, -PITCH_BAR_Y6, +PITCH_BAR_X8, -PITCH_BAR_Y8, MFD_COLOUR_BLUE);

  00e5f	b8 04 00 00 00	 mov	 eax, 4
  00e64	6b c8 0c	 imul	 ecx, eax, 12
  00e67	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e6d	52		 push	 edx
  00e6e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  00e76	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e7b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00e82	51		 push	 ecx
  00e83	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e88	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  00e90	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e95	51		 push	 ecx
  00e96	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e9b	0f 57 c0	 xorps	 xmm0, xmm0
  00e9e	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00ea3	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00eaa	51		 push	 ecx
  00eab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eb0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  00eb8	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00ebd	51		 push	 ecx
  00ebe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ec3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN12@draw_pitch:

; 10017: 				}
; 10018: 
; 10019: 				sprintf (s, "%d0", int_pitch);

  00ec8	8b 45 e8	 mov	 eax, DWORD PTR _int_pitch$[ebp]
  00ecb	50		 push	 eax
  00ecc	68 00 00 00 00	 push	 OFFSET ??_C@_03NJMPCKOA@?$CFd0@
  00ed1	8d 4d ec	 lea	 ecx, DWORD PTR _s$[ebp]
  00ed4	51		 push	 ecx
  00ed5	e8 00 00 00 00	 call	 _sprintf
  00eda	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10020: 
; 10021: 				x_adjust = get_mono_font_string_width (s) * -0.5;

  00edd	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  00ee0	50		 push	 eax
  00ee1	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00ee6	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv1531[ebp]
  00eec	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1531[ebp]
  00ef4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00efc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00f00	f3 0f 11 45 88	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10022: 
; 10023: 				set_2d_mono_font_position (+PITCH_BAR_X9, +PITCH_BAR_Y9);

  00f05	0f 57 c0	 xorps	 xmm0, xmm0
  00f08	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f0d	51		 push	 ecx
  00f0e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f13	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0a3d71
  00f1b	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f20	51		 push	 ecx
  00f21	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f26	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10024: 
; 10025: 				set_mono_font_rel_position (x_adjust, y_adjust_above_line);

  00f2b	51		 push	 ecx
  00f2c	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y_adjust_above_line$[ebp]
  00f31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f36	51		 push	 ecx
  00f37	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00f3c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f41	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10026: 
; 10027: 				print_mono_font_string (s);

  00f46	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  00f49	50		 push	 eax
  00f4a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10028: 
; 10029: 				set_2d_mono_font_position (-PITCH_BAR_X9, +PITCH_BAR_Y9);

  00f4f	0f 57 c0	 xorps	 xmm0, xmm0
  00f52	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f57	51		 push	 ecx
  00f58	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f5d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0a3d71
  00f65	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f6a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00f71	51		 push	 ecx
  00f72	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f77	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10030: 
; 10031: 				set_mono_font_rel_position (x_adjust, y_adjust_above_line);

  00f7c	51		 push	 ecx
  00f7d	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y_adjust_above_line$[ebp]
  00f82	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f87	51		 push	 ecx
  00f88	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00f8d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f92	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10032: 
; 10033: 				print_mono_font_string (s);

  00f97	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  00f9a	50		 push	 eax
  00f9b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10034: 
; 10035: 				break;

  00fa0	e9 54 0a 00 00	 jmp	 $LN5@draw_pitch
$LN13@draw_pitch:

; 10036: 			}
; 10037: 			////////////////////////////////////////
; 10038: 			case 9:
; 10039: 			////////////////////////////////////////
; 10040: 			{
; 10041: 				draw_2d_line (+PITCH_BAR_X1, +PITCH_BAR_Y1, +PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR_BLUE);

  00fa5	b8 04 00 00 00	 mov	 eax, 4
  00faa	6b c8 0c	 imul	 ecx, eax, 12
  00fad	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00fb3	52		 push	 edx
  00fb4	0f 57 c0	 xorps	 xmm0, xmm0
  00fb7	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00fbc	51		 push	 ecx
  00fbd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fc2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  00fca	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00fcf	51		 push	 ecx
  00fd0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fd5	0f 57 c0	 xorps	 xmm0, xmm0
  00fd8	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00fdd	51		 push	 ecx
  00fde	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fe3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00feb	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00ff0	51		 push	 ecx
  00ff1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ff6	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10042: 				draw_2d_line (-PITCH_BAR_X1, +PITCH_BAR_Y1, -PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR_BLUE);

  00ffb	b8 04 00 00 00	 mov	 eax, 4
  01000	6b c8 0c	 imul	 ecx, eax, 12
  01003	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01009	52		 push	 edx
  0100a	0f 57 c0	 xorps	 xmm0, xmm0
  0100d	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01012	51		 push	 ecx
  01013	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01018	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  01020	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01025	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0102c	51		 push	 ecx
  0102d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01032	0f 57 c0	 xorps	 xmm0, xmm0
  01035	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0103a	51		 push	 ecx
  0103b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01040	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  01048	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0104d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01054	51		 push	 ecx
  01055	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0105a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10043: 
; 10044: 				break;

  0105f	e9 95 09 00 00	 jmp	 $LN5@draw_pitch
$LN14@draw_pitch:

; 10045: 			}
; 10046: 			////////////////////////////////////////
; 10047: 			case -1:
; 10048: 			case -2:
; 10049: 			case -3:
; 10050: 			case -4:
; 10051: 			case -5:
; 10052: 			case -6:
; 10053: 			case -7:
; 10054: 			case -8:
; 10055: 			////////////////////////////////////////
; 10056: 			{
; 10057: 				set_mono_font_colour (MFD_COLOUR_RED);

  01064	b8 04 00 00 00	 mov	 eax, 4
  01069	6b c8 0f	 imul	 ecx, eax, 15
  0106c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01072	52		 push	 edx
  01073	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 10058: 				if (step_direction == -1)

  01078	83 7d e4 ff	 cmp	 DWORD PTR _step_direction$[ebp], -1
  0107c	0f 85 05 03 00
	00		 jne	 $LN15@draw_pitch

; 10059: 				{
; 10060: 					draw_2d_line (+PITCH_BAR_X1, +PITCH_BAR_Y1, +PITCH_BAR_X2, +PITCH_BAR_Y2, MFD_COLOUR_RED);

  01082	b8 04 00 00 00	 mov	 eax, 4
  01087	6b c8 0f	 imul	 ecx, eax, 15
  0108a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01090	52		 push	 edx
  01091	0f 57 c0	 xorps	 xmm0, xmm0
  01094	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01099	51		 push	 ecx
  0109a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0109f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e3851ec
  010a7	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  010ac	51		 push	 ecx
  010ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010b2	0f 57 c0	 xorps	 xmm0, xmm0
  010b5	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  010ba	51		 push	 ecx
  010bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  010c8	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  010cd	51		 push	 ecx
  010ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010d3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10061: 					draw_2d_line (-PITCH_BAR_X1, +PITCH_BAR_Y1, -PITCH_BAR_X2, +PITCH_BAR_Y2, MFD_COLOUR_RED);

  010d8	b8 04 00 00 00	 mov	 eax, 4
  010dd	6b c8 0f	 imul	 ecx, eax, 15
  010e0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  010e6	52		 push	 edx
  010e7	0f 57 c0	 xorps	 xmm0, xmm0
  010ea	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  010ef	51		 push	 ecx
  010f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e3851ec
  010fd	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01102	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01109	51		 push	 ecx
  0110a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0110f	0f 57 c0	 xorps	 xmm0, xmm0
  01112	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01117	51		 push	 ecx
  01118	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0111d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  01125	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0112a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01131	51		 push	 ecx
  01132	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01137	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10062: 
; 10063: 					draw_2d_line (+PITCH_BAR_X3, +PITCH_BAR_Y3, +PITCH_BAR_X4, +PITCH_BAR_Y4, MFD_COLOUR_RED);

  0113c	b8 04 00 00 00	 mov	 eax, 4
  01141	6b c8 0f	 imul	 ecx, eax, 15
  01144	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0114a	52		 push	 edx
  0114b	0f 57 c0	 xorps	 xmm0, xmm0
  0114e	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01153	51		 push	 ecx
  01154	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01159	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  01161	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01166	51		 push	 ecx
  01167	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0116c	0f 57 c0	 xorps	 xmm0, xmm0
  0116f	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01174	51		 push	 ecx
  01175	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0117a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  01182	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01187	51		 push	 ecx
  01188	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0118d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10064: 					draw_2d_line (-PITCH_BAR_X3, +PITCH_BAR_Y3, -PITCH_BAR_X4, +PITCH_BAR_Y4, MFD_COLOUR_RED);

  01192	b8 04 00 00 00	 mov	 eax, 4
  01197	6b c8 0f	 imul	 ecx, eax, 15
  0119a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  011a0	52		 push	 edx
  011a1	0f 57 c0	 xorps	 xmm0, xmm0
  011a4	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  011a9	51		 push	 ecx
  011aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  011b7	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  011bc	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  011c3	51		 push	 ecx
  011c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011c9	0f 57 c0	 xorps	 xmm0, xmm0
  011cc	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  011d1	51		 push	 ecx
  011d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  011df	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  011e4	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  011eb	51		 push	 ecx
  011ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011f1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10065: 
; 10066: 					draw_2d_line (+PITCH_BAR_X5, +PITCH_BAR_Y5, +PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR_RED);

  011f6	b8 04 00 00 00	 mov	 eax, 4
  011fb	6b c8 0f	 imul	 ecx, eax, 15
  011fe	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01204	52		 push	 edx
  01205	0f 57 c0	 xorps	 xmm0, xmm0
  01208	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0120d	51		 push	 ecx
  0120e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01213	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  0121b	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01220	51		 push	 ecx
  01221	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01226	0f 57 c0	 xorps	 xmm0, xmm0
  01229	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0122e	51		 push	 ecx
  0122f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01234	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eae147b
  0123c	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01241	51		 push	 ecx
  01242	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01247	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10067: 					draw_2d_line (-PITCH_BAR_X5, +PITCH_BAR_Y5, -PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR_RED);

  0124c	b8 04 00 00 00	 mov	 eax, 4
  01251	6b c8 0f	 imul	 ecx, eax, 15
  01254	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0125a	52		 push	 edx
  0125b	0f 57 c0	 xorps	 xmm0, xmm0
  0125e	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01263	51		 push	 ecx
  01264	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01269	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  01271	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01276	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0127d	51		 push	 ecx
  0127e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01283	0f 57 c0	 xorps	 xmm0, xmm0
  01286	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0128b	51		 push	 ecx
  0128c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01291	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eae147b
  01299	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0129e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  012a5	51		 push	 ecx
  012a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012ab	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10068: 
; 10069: 					draw_2d_line (+PITCH_BAR_X6, +PITCH_BAR_Y6, +PITCH_BAR_X8, -PITCH_BAR_Y8, MFD_COLOUR_RED);

  012b0	b8 04 00 00 00	 mov	 eax, 4
  012b5	6b c8 0f	 imul	 ecx, eax, 15
  012b8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  012be	52		 push	 edx
  012bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  012c7	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  012cc	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  012d3	51		 push	 ecx
  012d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  012e1	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  012e6	51		 push	 ecx
  012e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012ec	0f 57 c0	 xorps	 xmm0, xmm0
  012ef	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  012f4	51		 push	 ecx
  012f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  01302	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01307	51		 push	 ecx
  01308	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0130d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10070: 					draw_2d_line (-PITCH_BAR_X6, +PITCH_BAR_Y6, -PITCH_BAR_X8, -PITCH_BAR_Y8, MFD_COLOUR_RED);

  01312	b8 04 00 00 00	 mov	 eax, 4
  01317	6b c8 0f	 imul	 ecx, eax, 15
  0131a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01320	52		 push	 edx
  01321	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  01329	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0132e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01335	51		 push	 ecx
  01336	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0133b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  01343	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01348	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0134f	51		 push	 ecx
  01350	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01355	0f 57 c0	 xorps	 xmm0, xmm0
  01358	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0135d	51		 push	 ecx
  0135e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01363	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  0136b	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01370	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01377	51		 push	 ecx
  01378	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0137d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10071: 				}
; 10072: 				else

  01382	e9 54 03 00 00	 jmp	 $LN16@draw_pitch
$LN15@draw_pitch:

; 10073: 				{
; 10074: 					draw_2d_line (-PITCH_BAR_X1, -PITCH_BAR_Y1, -PITCH_BAR_X2, -PITCH_BAR_Y2, MFD_COLOUR_RED);

  01387	b8 04 00 00 00	 mov	 eax, 4
  0138c	6b c8 0f	 imul	 ecx, eax, 15
  0138f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01395	52		 push	 edx
  01396	0f 57 c0	 xorps	 xmm0, xmm0
  01399	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0139e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  013a5	51		 push	 ecx
  013a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e3851ec
  013b3	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  013b8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  013bf	51		 push	 ecx
  013c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013c5	0f 57 c0	 xorps	 xmm0, xmm0
  013c8	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  013cd	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  013d4	51		 push	 ecx
  013d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  013e2	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  013e7	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  013ee	51		 push	 ecx
  013ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013f4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10075: 					draw_2d_line (+PITCH_BAR_X1, -PITCH_BAR_Y1, +PITCH_BAR_X2, -PITCH_BAR_Y2, MFD_COLOUR_RED);

  013f9	b8 04 00 00 00	 mov	 eax, 4
  013fe	6b c8 0f	 imul	 ecx, eax, 15
  01401	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01407	52		 push	 edx
  01408	0f 57 c0	 xorps	 xmm0, xmm0
  0140b	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01410	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01417	51		 push	 ecx
  01418	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0141d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e3851ec
  01425	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0142a	51		 push	 ecx
  0142b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01430	0f 57 c0	 xorps	 xmm0, xmm0
  01433	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01438	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0143f	51		 push	 ecx
  01440	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01445	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0144d	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01452	51		 push	 ecx
  01453	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01458	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10076: 
; 10077: 					draw_2d_line (-PITCH_BAR_X3, -PITCH_BAR_Y3, -PITCH_BAR_X4, -PITCH_BAR_Y4, MFD_COLOUR_RED);

  0145d	b8 04 00 00 00	 mov	 eax, 4
  01462	6b c8 0f	 imul	 ecx, eax, 15
  01465	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0146b	52		 push	 edx
  0146c	0f 57 c0	 xorps	 xmm0, xmm0
  0146f	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01474	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0147b	51		 push	 ecx
  0147c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01481	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  01489	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0148e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01495	51		 push	 ecx
  01496	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0149b	0f 57 c0	 xorps	 xmm0, xmm0
  0149e	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  014a3	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  014aa	51		 push	 ecx
  014ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  014b8	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  014bd	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  014c4	51		 push	 ecx
  014c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014ca	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10078: 					draw_2d_line (+PITCH_BAR_X3, -PITCH_BAR_Y3, +PITCH_BAR_X4, -PITCH_BAR_Y4, MFD_COLOUR_RED);

  014cf	b8 04 00 00 00	 mov	 eax, 4
  014d4	6b c8 0f	 imul	 ecx, eax, 15
  014d7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  014dd	52		 push	 edx
  014de	0f 57 c0	 xorps	 xmm0, xmm0
  014e1	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  014e6	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  014ed	51		 push	 ecx
  014ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  014fb	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01500	51		 push	 ecx
  01501	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01506	0f 57 c0	 xorps	 xmm0, xmm0
  01509	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0150e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01515	51		 push	 ecx
  01516	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0151b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  01523	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01528	51		 push	 ecx
  01529	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0152e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10079: 
; 10080: 					draw_2d_line (-PITCH_BAR_X5, -PITCH_BAR_Y5, -PITCH_BAR_X6, -PITCH_BAR_Y6, MFD_COLOUR_RED);

  01533	b8 04 00 00 00	 mov	 eax, 4
  01538	6b c8 0f	 imul	 ecx, eax, 15
  0153b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01541	52		 push	 edx
  01542	0f 57 c0	 xorps	 xmm0, xmm0
  01545	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0154a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01551	51		 push	 ecx
  01552	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01557	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  0155f	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01564	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0156b	51		 push	 ecx
  0156c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01571	0f 57 c0	 xorps	 xmm0, xmm0
  01574	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01579	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01580	51		 push	 ecx
  01581	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01586	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eae147b
  0158e	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01593	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0159a	51		 push	 ecx
  0159b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015a0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10081: 					draw_2d_line (+PITCH_BAR_X5, -PITCH_BAR_Y5, +PITCH_BAR_X6, -PITCH_BAR_Y6, MFD_COLOUR_RED);

  015a5	b8 04 00 00 00	 mov	 eax, 4
  015aa	6b c8 0f	 imul	 ecx, eax, 15
  015ad	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  015b3	52		 push	 edx
  015b4	0f 57 c0	 xorps	 xmm0, xmm0
  015b7	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  015bc	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  015c3	51		 push	 ecx
  015c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  015d1	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  015d6	51		 push	 ecx
  015d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015dc	0f 57 c0	 xorps	 xmm0, xmm0
  015df	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  015e4	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  015eb	51		 push	 ecx
  015ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eae147b
  015f9	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  015fe	51		 push	 ecx
  015ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01604	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10082: 
; 10083: 					draw_2d_line (-PITCH_BAR_X6, -PITCH_BAR_Y6, -PITCH_BAR_X8, +PITCH_BAR_Y8, MFD_COLOUR_RED);

  01609	b8 04 00 00 00	 mov	 eax, 4
  0160e	6b c8 0f	 imul	 ecx, eax, 15
  01611	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01617	52		 push	 edx
  01618	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  01620	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01625	51		 push	 ecx
  01626	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0162b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  01633	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01638	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0163f	51		 push	 ecx
  01640	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01645	0f 57 c0	 xorps	 xmm0, xmm0
  01648	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0164d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01654	51		 push	 ecx
  01655	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0165a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  01662	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01667	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0166e	51		 push	 ecx
  0166f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01674	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10084: 					draw_2d_line (+PITCH_BAR_X6, -PITCH_BAR_Y6, +PITCH_BAR_X8, +PITCH_BAR_Y8, MFD_COLOUR_RED);

  01679	b8 04 00 00 00	 mov	 eax, 4
  0167e	6b c8 0f	 imul	 ecx, eax, 15
  01681	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01687	52		 push	 edx
  01688	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  01690	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01695	51		 push	 ecx
  01696	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0169b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  016a3	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  016a8	51		 push	 ecx
  016a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016ae	0f 57 c0	 xorps	 xmm0, xmm0
  016b1	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  016b6	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  016bd	51		 push	 ecx
  016be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  016cb	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  016d0	51		 push	 ecx
  016d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016d6	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN16@draw_pitch:

; 10085: 				}
; 10086: 
; 10087: 				sprintf (s, "%d0", abs(int_pitch));

  016db	8b 45 e8	 mov	 eax, DWORD PTR _int_pitch$[ebp]
  016de	50		 push	 eax
  016df	e8 00 00 00 00	 call	 _abs
  016e4	83 c4 04	 add	 esp, 4
  016e7	50		 push	 eax
  016e8	68 00 00 00 00	 push	 OFFSET ??_C@_03NJMPCKOA@?$CFd0@
  016ed	8d 4d ec	 lea	 ecx, DWORD PTR _s$[ebp]
  016f0	51		 push	 ecx
  016f1	e8 00 00 00 00	 call	 _sprintf
  016f6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10088: 
; 10089: 				x_adjust = get_mono_font_string_width (s) * -0.5;

  016f9	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  016fc	50		 push	 eax
  016fd	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01702	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv1740[ebp]
  01708	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1740[ebp]
  01710	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01718	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0171c	f3 0f 11 45 88	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10090: 
; 10091: 				set_2d_mono_font_position (+PITCH_BAR_X10, +PITCH_BAR_Y10);

  01721	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@80000000
  01729	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0172e	51		 push	 ecx
  0172f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01734	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0a3d71
  0173c	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01741	51		 push	 ecx
  01742	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01747	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10092: 
; 10093: 				set_mono_font_rel_position (x_adjust, y_adjust_below_line);

  0174c	51		 push	 ecx
  0174d	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _y_adjust_below_line$[ebp]
  01752	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01757	51		 push	 ecx
  01758	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0175d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01762	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10094: 
; 10095: 				print_mono_font_string (s);

  01767	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  0176a	50		 push	 eax
  0176b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10096: 
; 10097: 				set_2d_mono_font_position (-PITCH_BAR_X10, +PITCH_BAR_Y10);

  01770	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@80000000
  01778	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0177d	51		 push	 ecx
  0177e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01783	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0a3d71
  0178b	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01790	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01797	51		 push	 ecx
  01798	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0179d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10098: 
; 10099: 				set_mono_font_rel_position (x_adjust, y_adjust_below_line);

  017a2	51		 push	 ecx
  017a3	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _y_adjust_below_line$[ebp]
  017a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017ad	51		 push	 ecx
  017ae	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  017b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017b8	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10100: 
; 10101: 				print_mono_font_string (s);

  017bd	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  017c0	50		 push	 eax
  017c1	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10102: 
; 10103: 				break;

  017c6	e9 2e 02 00 00	 jmp	 $LN5@draw_pitch
$LN17@draw_pitch:

; 10104: 			}
; 10105: 			////////////////////////////////////////
; 10106: 			case -9:
; 10107: 			////////////////////////////////////////
; 10108: 			{
; 10109: 				draw_2d_line (+PITCH_BAR_X1, +PITCH_BAR_Y1, +PITCH_BAR_X2, +PITCH_BAR_Y2, MFD_COLOUR_RED);

  017cb	b8 04 00 00 00	 mov	 eax, 4
  017d0	6b c8 0f	 imul	 ecx, eax, 15
  017d3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  017d9	52		 push	 edx
  017da	0f 57 c0	 xorps	 xmm0, xmm0
  017dd	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  017e2	51		 push	 ecx
  017e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e3851ec
  017f0	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  017f5	51		 push	 ecx
  017f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017fb	0f 57 c0	 xorps	 xmm0, xmm0
  017fe	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01803	51		 push	 ecx
  01804	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01809	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  01811	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01816	51		 push	 ecx
  01817	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0181c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10110: 				draw_2d_line (-PITCH_BAR_X1, +PITCH_BAR_Y1, -PITCH_BAR_X2, +PITCH_BAR_Y2, MFD_COLOUR_RED);

  01821	b8 04 00 00 00	 mov	 eax, 4
  01826	6b c8 0f	 imul	 ecx, eax, 15
  01829	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0182f	52		 push	 edx
  01830	0f 57 c0	 xorps	 xmm0, xmm0
  01833	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01838	51		 push	 ecx
  01839	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0183e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e3851ec
  01846	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0184b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01852	51		 push	 ecx
  01853	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01858	0f 57 c0	 xorps	 xmm0, xmm0
  0185b	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01860	51		 push	 ecx
  01861	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01866	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0186e	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01873	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0187a	51		 push	 ecx
  0187b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01880	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10111: 
; 10112: 				draw_2d_line (+PITCH_BAR_X3, +PITCH_BAR_Y3, +PITCH_BAR_X4, +PITCH_BAR_Y4, MFD_COLOUR_RED);

  01885	b8 04 00 00 00	 mov	 eax, 4
  0188a	6b c8 0f	 imul	 ecx, eax, 15
  0188d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01893	52		 push	 edx
  01894	0f 57 c0	 xorps	 xmm0, xmm0
  01897	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0189c	51		 push	 ecx
  0189d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  018aa	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  018af	51		 push	 ecx
  018b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018b5	0f 57 c0	 xorps	 xmm0, xmm0
  018b8	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  018bd	51		 push	 ecx
  018be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  018cb	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  018d0	51		 push	 ecx
  018d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018d6	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10113: 				draw_2d_line (-PITCH_BAR_X3, +PITCH_BAR_Y3, -PITCH_BAR_X4, +PITCH_BAR_Y4, MFD_COLOUR_RED);

  018db	b8 04 00 00 00	 mov	 eax, 4
  018e0	6b c8 0f	 imul	 ecx, eax, 15
  018e3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  018e9	52		 push	 edx
  018ea	0f 57 c0	 xorps	 xmm0, xmm0
  018ed	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  018f2	51		 push	 ecx
  018f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  01900	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01905	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0190c	51		 push	 ecx
  0190d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01912	0f 57 c0	 xorps	 xmm0, xmm0
  01915	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0191a	51		 push	 ecx
  0191b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01920	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  01928	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0192d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01934	51		 push	 ecx
  01935	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0193a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10114: 
; 10115: 				draw_2d_line (+PITCH_BAR_X5, +PITCH_BAR_Y5, +PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR_RED);

  0193f	b8 04 00 00 00	 mov	 eax, 4
  01944	6b c8 0f	 imul	 ecx, eax, 15
  01947	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0194d	52		 push	 edx
  0194e	0f 57 c0	 xorps	 xmm0, xmm0
  01951	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01956	51		 push	 ecx
  01957	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0195c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  01964	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01969	51		 push	 ecx
  0196a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0196f	0f 57 c0	 xorps	 xmm0, xmm0
  01972	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01977	51		 push	 ecx
  01978	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0197d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eae147b
  01985	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0198a	51		 push	 ecx
  0198b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01990	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10116: 				draw_2d_line (-PITCH_BAR_X5, +PITCH_BAR_Y5, -PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR_RED);

  01995	b8 04 00 00 00	 mov	 eax, 4
  0199a	6b c8 0f	 imul	 ecx, eax, 15
  0199d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  019a3	52		 push	 edx
  019a4	0f 57 c0	 xorps	 xmm0, xmm0
  019a7	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  019ac	51		 push	 ecx
  019ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  019ba	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  019bf	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  019c6	51		 push	 ecx
  019c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019cc	0f 57 c0	 xorps	 xmm0, xmm0
  019cf	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  019d4	51		 push	 ecx
  019d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eae147b
  019e2	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  019e7	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  019ee	51		 push	 ecx
  019ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019f4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN5@draw_pitch:

; 10117: 
; 10118: 				break;
; 10119: 			}
; 10120: 		}
; 10121: 
; 10122: 		int_pitch = limit_pitch (int_pitch + step_direction, &step_direction);

  019f9	8d 45 e4	 lea	 eax, DWORD PTR _step_direction$[ebp]
  019fc	50		 push	 eax
  019fd	8b 4d e8	 mov	 ecx, DWORD PTR _int_pitch$[ebp]
  01a00	03 4d e4	 add	 ecx, DWORD PTR _step_direction$[ebp]
  01a03	51		 push	 ecx
  01a04	e8 00 00 00 00	 call	 ?limit_pitch@@YGHHPAH@Z	; limit_pitch
  01a09	89 45 e8	 mov	 DWORD PTR _int_pitch$[ebp], eax

; 10123: 
; 10124: 		x -= x_10_deg_step;

  01a0c	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x$[ebp]
  01a11	f3 0f 5c 45 90	 subss	 xmm0, DWORD PTR _x_10_deg_step$[ebp]
  01a16	f3 0f 11 45 a8	 movss	 DWORD PTR _x$[ebp], xmm0

; 10125: 		y -= y_10_deg_step;

  01a1b	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y$[ebp]
  01a20	f3 0f 5c 45 8c	 subss	 xmm0, DWORD PTR _y_10_deg_step$[ebp]
  01a25	f3 0f 11 45 a4	 movss	 DWORD PTR _y$[ebp], xmm0

; 10126: 	}

  01a2a	e9 5f f0 ff ff	 jmp	 $LN2@draw_pitch
$LN3@draw_pitch:

; 10127: 
; 10128: 	//
; 10129: 	// restore 2D environment
; 10130: 	//
; 10131: 
; 10132: 	set_mono_font_colour (MFD_COLOUR1);

  01a2f	b8 04 00 00 00	 mov	 eax, 4
  01a34	6b c8 00	 imul	 ecx, eax, 0
  01a37	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a3d	52		 push	 edx
  01a3e	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 10133: 
; 10134: 	reset_2d_instance (mfd_env);

  01a43	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01a48	50		 push	 eax
  01a49	e8 00 00 00 00	 call	 ?reset_2d_instance@@YGXPAUENV_2D@@@Z ; reset_2d_instance

; 10135: 
; 10136: 	// centre datum
; 10137: 
; 10138: 	draw_2d_line (-0.25, 0.0, -0.08, 0.0, MFD_COLOUR_CYAN);

  01a4e	b8 04 00 00 00	 mov	 eax, 4
  01a53	c1 e0 04	 shl	 eax, 4
  01a56	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  01a5c	51		 push	 ecx
  01a5d	51		 push	 ecx
  01a5e	0f 57 c0	 xorps	 xmm0, xmm0
  01a61	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a66	51		 push	 ecx
  01a67	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  01a6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a74	51		 push	 ecx
  01a75	0f 57 c0	 xorps	 xmm0, xmm0
  01a78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a7d	51		 push	 ecx
  01a7e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  01a86	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a8b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10139: 	draw_2d_line ( 0.25, 0.0,  0.08, 0.0, MFD_COLOUR_CYAN);

  01a90	b8 04 00 00 00	 mov	 eax, 4
  01a95	c1 e0 04	 shl	 eax, 4
  01a98	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  01a9e	51		 push	 ecx
  01a9f	51		 push	 ecx
  01aa0	0f 57 c0	 xorps	 xmm0, xmm0
  01aa3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aa8	51		 push	 ecx
  01aa9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  01ab1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ab6	51		 push	 ecx
  01ab7	0f 57 c0	 xorps	 xmm0, xmm0
  01aba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01abf	51		 push	 ecx
  01ac0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  01ac8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01acd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10140: 
; 10141: 	draw_2d_line (-0.08, 0.0, -0.04, -0.08, MFD_COLOUR_CYAN);

  01ad2	b8 04 00 00 00	 mov	 eax, 4
  01ad7	c1 e0 04	 shl	 eax, 4
  01ada	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  01ae0	51		 push	 ecx
  01ae1	51		 push	 ecx
  01ae2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  01aea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aef	51		 push	 ecx
  01af0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  01af8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01afd	51		 push	 ecx
  01afe	0f 57 c0	 xorps	 xmm0, xmm0
  01b01	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b06	51		 push	 ecx
  01b07	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  01b0f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b14	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10142: 	draw_2d_line ( 0.08, 0.0,  0.04, -0.08, MFD_COLOUR_CYAN);

  01b19	b8 04 00 00 00	 mov	 eax, 4
  01b1e	c1 e0 04	 shl	 eax, 4
  01b21	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  01b27	51		 push	 ecx
  01b28	51		 push	 ecx
  01b29	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  01b31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b36	51		 push	 ecx
  01b37	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  01b3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b44	51		 push	 ecx
  01b45	0f 57 c0	 xorps	 xmm0, xmm0
  01b48	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b4d	51		 push	 ecx
  01b4e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  01b56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b5b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10143: 
; 10144: 	draw_2d_line (0.0, 0.0, -0.04, -0.08, MFD_COLOUR_CYAN);

  01b60	b8 04 00 00 00	 mov	 eax, 4
  01b65	c1 e0 04	 shl	 eax, 4
  01b68	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  01b6e	51		 push	 ecx
  01b6f	51		 push	 ecx
  01b70	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  01b78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b7d	51		 push	 ecx
  01b7e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  01b86	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b8b	51		 push	 ecx
  01b8c	0f 57 c0	 xorps	 xmm0, xmm0
  01b8f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b94	51		 push	 ecx
  01b95	0f 57 c0	 xorps	 xmm0, xmm0
  01b98	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b9d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10145: 	draw_2d_line (0.0, 0.0,  0.04, -0.08, MFD_COLOUR_CYAN);

  01ba2	b8 04 00 00 00	 mov	 eax, 4
  01ba7	c1 e0 04	 shl	 eax, 4
  01baa	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  01bb0	51		 push	 ecx
  01bb1	51		 push	 ecx
  01bb2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  01bba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bbf	51		 push	 ecx
  01bc0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  01bc8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bcd	51		 push	 ecx
  01bce	0f 57 c0	 xorps	 xmm0, xmm0
  01bd1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bd6	51		 push	 ecx
  01bd7	0f 57 c0	 xorps	 xmm0, xmm0
  01bda	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bdf	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10146: 
; 10147: 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  01be4	51		 push	 ecx
  01be5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  01bed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bf2	51		 push	 ecx
  01bf3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  01bfb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c00	51		 push	 ecx
  01c01	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  01c09	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c0e	51		 push	 ecx
  01c0f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  01c17	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c1c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01c21	50		 push	 eax
  01c22	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 10148: 
; 10149: 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  01c27	51		 push	 ecx
  01c28	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  01c30	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c35	51		 push	 ecx
  01c36	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  01c3e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c43	51		 push	 ecx
  01c44	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  01c4c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c51	51		 push	 ecx
  01c52	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  01c5a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c5f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01c64	50		 push	 eax
  01c65	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 10150: }

  01c6a	5f		 pop	 edi
  01c6b	5e		 pop	 esi
  01c6c	5b		 pop	 ebx
  01c6d	8b e5		 mov	 esp, ebp
  01c6f	5d		 pop	 ebp
  01c70	c3		 ret	 0
  01c71	0f 1f 00	 npad	 3
$LN32@draw_pitch:
  01c74	00 00 00 00	 DD	 $LN17@draw_pitch
  01c78	00 00 00 00	 DD	 $LN14@draw_pitch
  01c7c	00 00 00 00	 DD	 $LN9@draw_pitch
  01c80	00 00 00 00	 DD	 $LN10@draw_pitch
  01c84	00 00 00 00	 DD	 $LN13@draw_pitch
$LN31@draw_pitch:
  01c88	00		 DB	 0
  01c89	01		 DB	 1
  01c8a	01		 DB	 1
  01c8b	01		 DB	 1
  01c8c	01		 DB	 1
  01c8d	01		 DB	 1
  01c8e	01		 DB	 1
  01c8f	01		 DB	 1
  01c90	01		 DB	 1
  01c91	02		 DB	 2
  01c92	03		 DB	 3
  01c93	03		 DB	 3
  01c94	03		 DB	 3
  01c95	03		 DB	 3
  01c96	03		 DB	 3
  01c97	03		 DB	 3
  01c98	03		 DB	 3
  01c99	03		 DB	 3
  01c9a	04		 DB	 4
?draw_pitch_ladder@@YGXXZ ENDP				; draw_pitch_ladder
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?limit_pitch@@YGHHPAH@Z
_TEXT	SEGMENT
_pitch$ = 8						; size = 4
_step_direction$ = 12					; size = 4
?limit_pitch@@YGHHPAH@Z PROC				; limit_pitch, COMDAT

; 9796 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 9797 : 	if (pitch > 9)

  00009	83 7d 08 09	 cmp	 DWORD PTR _pitch$[ebp], 9
  0000d	7e 1f		 jle	 SHORT $LN2@limit_pitc

; 9798 : 	{
; 9799 : 		pitch -= 18;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  00012	83 e8 12	 sub	 eax, 18			; 00000012H
  00015	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 9800 : 
; 9801 : 		pitch = -pitch;

  00018	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  0001b	f7 d8		 neg	 eax
  0001d	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 9802 : 
; 9803 : 		*step_direction = -(*step_direction);

  00020	8b 45 0c	 mov	 eax, DWORD PTR _step_direction$[ebp]
  00023	8b 08		 mov	 ecx, DWORD PTR [eax]
  00025	f7 d9		 neg	 ecx
  00027	8b 55 0c	 mov	 edx, DWORD PTR _step_direction$[ebp]
  0002a	89 0a		 mov	 DWORD PTR [edx], ecx
  0002c	eb 23		 jmp	 SHORT $LN3@limit_pitc
$LN2@limit_pitc:

; 9804 : 	}
; 9805 : 	else if (pitch < -9)

  0002e	83 7d 08 f7	 cmp	 DWORD PTR _pitch$[ebp], -9 ; fffffff7H
  00032	7d 1d		 jge	 SHORT $LN3@limit_pitc

; 9806 : 	{
; 9807 : 		pitch += 18;

  00034	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  00037	83 c0 12	 add	 eax, 18			; 00000012H
  0003a	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 9808 : 
; 9809 : 		pitch = -pitch;

  0003d	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  00040	f7 d8		 neg	 eax
  00042	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 9810 : 
; 9811 : 		*step_direction = -(*step_direction);

  00045	8b 45 0c	 mov	 eax, DWORD PTR _step_direction$[ebp]
  00048	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004a	f7 d9		 neg	 ecx
  0004c	8b 55 0c	 mov	 edx, DWORD PTR _step_direction$[ebp]
  0004f	89 0a		 mov	 DWORD PTR [edx], ecx
$LN3@limit_pitc:

; 9812 : 	}
; 9813 : 
; 9814 : 	return (pitch);

  00051	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]

; 9815 : }

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 08 00	 ret	 8
?limit_pitch@@YGHHPAH@Z ENDP				; limit_pitch
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_engine_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv2158 = -188						; size = 8
tv1895 = -188						; size = 8
tv1656 = -188						; size = 8
tv1614 = -188						; size = 8
tv1402 = -188						; size = 8
tv1189 = -188						; size = 8
tv976 = -188						; size = 8
tv776 = -188						; size = 8
tv743 = -188						; size = 8
tv558 = -188						; size = 8
tv525 = -188						; size = 8
tv319 = -188						; size = 8
tv89 = -188						; size = 8
tv3746 = -180						; size = 8
tv2159 = -180						; size = 8
tv1896 = -180						; size = 8
tv1657 = -180						; size = 8
tv1615 = -180						; size = 8
tv1403 = -180						; size = 8
tv1190 = -180						; size = 8
tv977 = -180						; size = 8
tv777 = -180						; size = 8
tv744 = -180						; size = 8
tv559 = -180						; size = 8
tv526 = -180						; size = 8
tv320 = -180						; size = 8
tv90 = -180						; size = 8
_digital_readout$ = -108				; size = 4
_bar_value$ = -104					; size = 4
_y3$ = -100						; size = 4
_y2$ = -96						; size = 4
_y1$ = -92						; size = 4
_x1$ = -88						; size = 4
_i$ = -84						; size = 4
_buffer$ = -80						; size = 80
?draw_engine_display_mfd@@YGXXZ PROC			; draw_engine_display_mfd, COMDAT

; 8565 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 8566 : 	char
; 8567 : 		buffer[80];
; 8568 : 
; 8569 : 	int
; 8570 : 		i;
; 8571 : 
; 8572 : 	float
; 8573 : 		x1,
; 8574 : 		y1,
; 8575 : 		y2,
; 8576 : 		y3,
; 8577 : 		bar_value,
; 8578 : 		digital_readout;
; 8579 : 
; 8580 : 
; 8581 : 	set_mono_font_colour (MFD_COLOUR1);

  0000c	b8 04 00 00 00	 mov	 eax, 4
  00011	6b c8 00	 imul	 ecx, eax, 0
  00014	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8582 : 
; 8583 : 	if (draw_large_mfd)

  00020	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00027	74 09		 je	 SHORT $LN2@draw_engin

; 8584 : 	{
; 8585 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  00029	6a 05		 push	 5
  0002b	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 8586 : 	}
; 8587 : 	else

  00030	eb 07		 jmp	 SHORT $LN3@draw_engin
$LN2@draw_engin:

; 8588 : 	{
; 8589 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  00032	6a 00		 push	 0
  00034	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN3@draw_engin:

; 8590 : 	}
; 8591 : 
; 8592 : 	////////////////////////////////////////
; 8593 : 	//
; 8594 : 	// engine torque
; 8595 : 	//
; 8596 : 	////////////////////////////////////////
; 8597 : 
; 8598 : 	set_2d_mono_font_position (-0.85, 0.85);

  00039	51		 push	 ecx
  0003a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00042	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00047	51		 push	 ecx
  00048	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  00050	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00055	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8599 : 
; 8600 : 	if (draw_large_mfd)

  0005a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00061	74 23		 je	 SHORT $LN4@draw_engin

; 8601 : 	{
; 8602 : 		set_mono_font_rel_position (-6.0, -16.0);

  00063	51		 push	 ecx
  00064	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1800000
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	51		 push	 ecx
  00072	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  0007a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8603 : 	}
; 8604 : 	else

  00084	eb 21		 jmp	 SHORT $LN5@draw_engin
$LN4@draw_engin:

; 8605 : 	{
; 8606 : 		set_mono_font_rel_position (-4.0, -7.0);

  00086	51		 push	 ecx
  00087	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0e00000
  0008f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00094	51		 push	 ecx
  00095	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  0009d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN5@draw_engin:

; 8607 : 	}
; 8608 : 
; 8609 : 	print_mono_font_string ("TORQUE");

  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_06JNBMPGOL@TORQUE@
  000ac	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8610 : 
; 8611 : 	//
; 8612 : 	// engine 1 torque
; 8613 : 	//
; 8614 : 
; 8615 : 	digital_readout = bound (current_flight_dynamics->left_engine_torque.value, 0.0, 120.0);

  000b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000b6	f3 0f 5a 80 ac
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7340]
  000be	0f 57 c9	 xorps	 xmm1, xmm1
  000c1	66 0f 2f c8	 comisd	 xmm1, xmm0
  000c5	76 0d		 jbe	 SHORT $LN67@draw_engin
  000c7	0f 57 c0	 xorps	 xmm0, xmm0
  000ca	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv90[ebp], xmm0
  000d2	eb 50		 jmp	 SHORT $LN68@draw_engin
$LN67@draw_engin:
  000d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000da	f3 0f 5a 81 ac
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7340]
  000e2	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  000ea	76 12		 jbe	 SHORT $LN65@draw_engin
  000ec	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  000f4	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv89[ebp], xmm0
  000fc	eb 16		 jmp	 SHORT $LN66@draw_engin
$LN65@draw_engin:
  000fe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00104	f3 0f 5a 82 ac
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7340]
  0010c	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv89[ebp], xmm0
$LN66@draw_engin:
  00114	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv89[ebp]
  0011c	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv90[ebp], xmm0
$LN68@draw_engin:
  00124	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv90[ebp]
  0012c	f3 0f 11 45 94	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 8616 : 
; 8617 : 	convert_float_to_int (digital_readout, &i);

  00131	8d 45 ac	 lea	 eax, DWORD PTR _i$[ebp]
  00134	50		 push	 eax
  00135	51		 push	 ecx
  00136	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  0013b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00140	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 8618 : 
; 8619 : 	sprintf (buffer, "%03d", i);

  00145	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  00148	50		 push	 eax
  00149	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  0014e	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00151	51		 push	 ecx
  00152	e8 00 00 00 00	 call	 _sprintf
  00157	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8620 : 
; 8621 : 	set_2d_mono_font_position (-0.85, -0.35);

  0015a	51		 push	 ecx
  0015b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  00163	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00168	51		 push	 ecx
  00169	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  00171	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00176	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8622 : 
; 8623 : 	if (draw_large_mfd)

  0017b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00182	74 23		 je	 SHORT $LN6@draw_engin

; 8624 : 	{
; 8625 : 		set_mono_font_rel_position (-13.0, 8.0);

  00184	51		 push	 ecx
  00185	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  0018d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00192	51		 push	 ecx
  00193	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1500000
  0019b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a0	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8626 : 	}
; 8627 : 	else

  001a5	eb 21		 jmp	 SHORT $LN7@draw_engin
$LN6@draw_engin:

; 8628 : 	{
; 8629 : 		set_mono_font_rel_position (-6.0, 3.0);

  001a7	51		 push	 ecx
  001a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  001b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b5	51		 push	 ecx
  001b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  001be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c3	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN7@draw_engin:

; 8630 : 	}
; 8631 : 
; 8632 : 	print_mono_font_string (buffer);

  001c8	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  001cb	50		 push	 eax
  001cc	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8633 : 
; 8634 : 	bar_value = digital_readout * 0.01;

  001d1	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _digital_readout$[ebp]
  001d6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  001de	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001e2	f3 0f 11 45 98	 movss	 DWORD PTR _bar_value$[ebp], xmm0

; 8635 : 
; 8636 : 	get_2d_float_screen_coordinates (-0.85, 0.85, &x1, &y1);

  001e7	8d 45 a4	 lea	 eax, DWORD PTR _y1$[ebp]
  001ea	50		 push	 eax
  001eb	8d 4d a8	 lea	 ecx, DWORD PTR _x1$[ebp]
  001ee	51		 push	 ecx
  001ef	51		 push	 ecx
  001f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  001f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fd	51		 push	 ecx
  001fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  00206	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020b	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 8637 : 	get_2d_float_screen_y_coordinate (-0.35, &y2);

  00210	8d 45 a0	 lea	 eax, DWORD PTR _y2$[ebp]
  00213	50		 push	 eax
  00214	51		 push	 ecx
  00215	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  0021d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00222	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8638 : 	get_2d_float_screen_y_coordinate (-0.35 + bar_value, &y3);

  00227	8d 45 9c	 lea	 eax, DWORD PTR _y3$[ebp]
  0022a	50		 push	 eax
  0022b	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _bar_value$[ebp]
  00230	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfd6666666666666
  00238	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0023c	51		 push	 ecx
  0023d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00242	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8639 : 
; 8640 : 	if (draw_large_mfd)

  00247	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0024e	0f 84 84 02 00
	00		 je	 $LN8@draw_engin

; 8641 : 	{
; 8642 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  00254	b8 04 00 00 00	 mov	 eax, 4
  00259	6b c8 00	 imul	 ecx, eax, 0
  0025c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00262	52		 push	 edx
  00263	51		 push	 ecx
  00264	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00269	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026e	51		 push	 ecx
  0026f	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00274	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00279	51		 push	 ecx
  0027a	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0027f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00284	51		 push	 ecx
  00285	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0028a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028f	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8643 : 		draw_line (x1 + 4.0, y1, x1 + 4.0, y2, MFD_COLOUR1);

  00294	b8 04 00 00 00	 mov	 eax, 4
  00299	6b c8 00	 imul	 ecx, eax, 0
  0029c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002a2	52		 push	 edx
  002a3	51		 push	 ecx
  002a4	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  002a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ae	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  002b3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  002bb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002bf	51		 push	 ecx
  002c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c5	51		 push	 ecx
  002c6	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  002cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d0	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  002d5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  002dd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002e1	51		 push	 ecx
  002e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e7	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8644 : 		draw_line (x1, y1, x1 + 4.0, y1, MFD_COLOUR1);

  002ec	b8 04 00 00 00	 mov	 eax, 4
  002f1	6b c8 00	 imul	 ecx, eax, 0
  002f4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002fa	52		 push	 edx
  002fb	51		 push	 ecx
  002fc	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00301	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00306	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0030b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  00313	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00317	51		 push	 ecx
  00318	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0031d	51		 push	 ecx
  0031e	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00323	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00328	51		 push	 ecx
  00329	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0032e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00333	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8645 : 		draw_line (x1, y2, x1 + 4.0, y2, MFD_COLOUR1);

  00338	b8 04 00 00 00	 mov	 eax, 4
  0033d	6b c8 00	 imul	 ecx, eax, 0
  00340	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00346	52		 push	 edx
  00347	51		 push	 ecx
  00348	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0034d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00352	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00357	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  0035f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00363	51		 push	 ecx
  00364	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00369	51		 push	 ecx
  0036a	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0036f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00374	51		 push	 ecx
  00375	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0037a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037f	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8646 : 
; 8647 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  00384	b8 04 00 00 00	 mov	 eax, 4
  00389	6b c8 00	 imul	 ecx, eax, 0
  0038c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00392	52		 push	 edx
  00393	51		 push	 ecx
  00394	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  00399	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039e	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  003a3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  003ab	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003af	51		 push	 ecx
  003b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b5	51		 push	 ecx
  003b6	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  003bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c0	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  003c5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  003cd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003d1	51		 push	 ecx
  003d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d7	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8648 : 		draw_line (x1 + 2.0, y2, x1 + 2.0, y3, MFD_COLOUR1);

  003dc	b8 04 00 00 00	 mov	 eax, 4
  003e1	6b c8 00	 imul	 ecx, eax, 0
  003e4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003ea	52		 push	 edx
  003eb	51		 push	 ecx
  003ec	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  003f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f6	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  003fb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00403	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00407	51		 push	 ecx
  00408	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040d	51		 push	 ecx
  0040e	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00413	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00418	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0041d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00425	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00429	51		 push	 ecx
  0042a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042f	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8649 : 		draw_line (x1 + 3.0, y2, x1 + 3.0, y3, MFD_COLOUR1);

  00434	b8 04 00 00 00	 mov	 eax, 4
  00439	6b c8 00	 imul	 ecx, eax, 0
  0043c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00442	52		 push	 edx
  00443	51		 push	 ecx
  00444	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  00449	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044e	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00453	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  0045b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0045f	51		 push	 ecx
  00460	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00465	51		 push	 ecx
  00466	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0046b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00470	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00475	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  0047d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00481	51		 push	 ecx
  00482	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00487	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8650 : 
; 8651 : 		draw_mono_sprite (large_engine_bar_marker, x1 + 5.0, y1 + 20.0, MFD_COLOUR1);

  0048c	b8 04 00 00 00	 mov	 eax, 4
  00491	6b c8 00	 imul	 ecx, eax, 0
  00494	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0049a	52		 push	 edx
  0049b	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  004a0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4034000000000000
  004a8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004ac	51		 push	 ecx
  004ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b2	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  004b7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4014000000000000
  004bf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004c3	51		 push	 ecx
  004c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c9	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  004ce	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 8652 : 	}
; 8653 : 	else

  004d3	e9 cf 01 00 00	 jmp	 $LN9@draw_engin
$LN8@draw_engin:

; 8654 : 	{
; 8655 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  004d8	b8 04 00 00 00	 mov	 eax, 4
  004dd	6b c8 00	 imul	 ecx, eax, 0
  004e0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004e6	52		 push	 edx
  004e7	51		 push	 ecx
  004e8	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  004ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f2	51		 push	 ecx
  004f3	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  004f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fd	51		 push	 ecx
  004fe	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00503	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00508	51		 push	 ecx
  00509	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0050e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00513	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8656 : 		draw_line (x1 + 2.0, y1, x1 + 2.0, y2, MFD_COLOUR1);

  00518	b8 04 00 00 00	 mov	 eax, 4
  0051d	6b c8 00	 imul	 ecx, eax, 0
  00520	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00526	52		 push	 edx
  00527	51		 push	 ecx
  00528	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0052d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00532	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00537	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0053f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00543	51		 push	 ecx
  00544	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00549	51		 push	 ecx
  0054a	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0054f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00554	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00559	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00561	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00565	51		 push	 ecx
  00566	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0056b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8657 : 		draw_line (x1, y1, x1 + 2.0, y1, MFD_COLOUR1);

  00570	b8 04 00 00 00	 mov	 eax, 4
  00575	6b c8 00	 imul	 ecx, eax, 0
  00578	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0057e	52		 push	 edx
  0057f	51		 push	 ecx
  00580	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00585	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0058a	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0058f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00597	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0059b	51		 push	 ecx
  0059c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a1	51		 push	 ecx
  005a2	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  005a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ac	51		 push	 ecx
  005ad	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  005b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b7	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8658 : 		draw_line (x1, y2, x1 + 2.0, y2, MFD_COLOUR1);

  005bc	b8 04 00 00 00	 mov	 eax, 4
  005c1	6b c8 00	 imul	 ecx, eax, 0
  005c4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005ca	52		 push	 edx
  005cb	51		 push	 ecx
  005cc	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  005d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d6	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  005db	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  005e3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005e7	51		 push	 ecx
  005e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ed	51		 push	 ecx
  005ee	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  005f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f8	51		 push	 ecx
  005f9	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  005fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00603	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8659 : 
; 8660 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  00608	b8 04 00 00 00	 mov	 eax, 4
  0060d	6b c8 00	 imul	 ecx, eax, 0
  00610	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00616	52		 push	 edx
  00617	51		 push	 ecx
  00618	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  0061d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00622	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00627	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0062f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00633	51		 push	 ecx
  00634	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00639	51		 push	 ecx
  0063a	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0063f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00644	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00649	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00651	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00655	51		 push	 ecx
  00656	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0065b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8661 : 
; 8662 : 		draw_mono_sprite (small_engine_bar_marker, x1 + 3.0, y1 + 11.0, MFD_COLOUR1);

  00660	b8 04 00 00 00	 mov	 eax, 4
  00665	6b c8 00	 imul	 ecx, eax, 0
  00668	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0066e	52		 push	 edx
  0066f	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  00674	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4026000000000000
  0067c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00680	51		 push	 ecx
  00681	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00686	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0068b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00693	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00697	51		 push	 ecx
  00698	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0069d	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  006a2	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN9@draw_engin:

; 8663 : 	}
; 8664 : 
; 8665 : 	//
; 8666 : 	// engine 2 torque
; 8667 : 	//
; 8668 : 
; 8669 : 	digital_readout = bound (current_flight_dynamics->right_engine_torque.value, 0.0, 120.0);

  006a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  006ac	f3 0f 5a 80 0c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7436]
  006b4	0f 57 c9	 xorps	 xmm1, xmm1
  006b7	66 0f 2f c8	 comisd	 xmm1, xmm0
  006bb	76 0d		 jbe	 SHORT $LN71@draw_engin
  006bd	0f 57 c0	 xorps	 xmm0, xmm0
  006c0	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv320[ebp], xmm0
  006c8	eb 50		 jmp	 SHORT $LN72@draw_engin
$LN71@draw_engin:
  006ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  006d0	f3 0f 5a 81 0c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7436]
  006d8	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  006e0	76 12		 jbe	 SHORT $LN69@draw_engin
  006e2	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  006ea	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv319[ebp], xmm0
  006f2	eb 16		 jmp	 SHORT $LN70@draw_engin
$LN69@draw_engin:
  006f4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  006fa	f3 0f 5a 82 0c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7436]
  00702	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv319[ebp], xmm0
$LN70@draw_engin:
  0070a	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv319[ebp]
  00712	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv320[ebp], xmm0
$LN72@draw_engin:
  0071a	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv320[ebp]
  00722	f3 0f 11 45 94	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 8670 : 
; 8671 : 	convert_float_to_int (digital_readout, &i);

  00727	8d 45 ac	 lea	 eax, DWORD PTR _i$[ebp]
  0072a	50		 push	 eax
  0072b	51		 push	 ecx
  0072c	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  00731	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00736	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 8672 : 
; 8673 : 	sprintf (buffer, "%03d", i);

  0073b	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  0073e	50		 push	 eax
  0073f	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  00744	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00747	51		 push	 ecx
  00748	e8 00 00 00 00	 call	 _sprintf
  0074d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8674 : 
; 8675 : 	set_2d_mono_font_position (-0.65 - 0.025, -0.35);

  00750	51		 push	 ecx
  00751	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  00759	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0075e	51		 push	 ecx
  0075f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2ccccd
  00767	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0076c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8676 : 
; 8677 : 	if (draw_large_mfd)

  00771	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00778	74 23		 je	 SHORT $LN10@draw_engin

; 8678 : 	{
; 8679 : 		set_mono_font_rel_position (-4.0, 8.0);

  0077a	51		 push	 ecx
  0077b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  00783	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00788	51		 push	 ecx
  00789	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  00791	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00796	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8680 : 	}
; 8681 : 	else

  0079b	eb 21		 jmp	 SHORT $LN11@draw_engin
$LN10@draw_engin:

; 8682 : 	{
; 8683 : 		set_mono_font_rel_position (-2.0, 3.0);

  0079d	51		 push	 ecx
  0079e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  007a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ab	51		 push	 ecx
  007ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  007b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b9	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN11@draw_engin:

; 8684 : 	}
; 8685 : 
; 8686 : 	print_mono_font_string (buffer);

  007be	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  007c1	50		 push	 eax
  007c2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8687 : 
; 8688 : 	bar_value = digital_readout * 0.01;

  007c7	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _digital_readout$[ebp]
  007cc	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  007d4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007d8	f3 0f 11 45 98	 movss	 DWORD PTR _bar_value$[ebp], xmm0

; 8689 : 
; 8690 : 	get_2d_float_screen_coordinates (-0.65 - 0.025, 0.85, &x1, &y1);

  007dd	8d 45 a4	 lea	 eax, DWORD PTR _y1$[ebp]
  007e0	50		 push	 eax
  007e1	8d 4d a8	 lea	 ecx, DWORD PTR _x1$[ebp]
  007e4	51		 push	 ecx
  007e5	51		 push	 ecx
  007e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  007ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f3	51		 push	 ecx
  007f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2ccccd
  007fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00801	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 8691 : 	get_2d_float_screen_y_coordinate (-0.35, &y2);

  00806	8d 45 a0	 lea	 eax, DWORD PTR _y2$[ebp]
  00809	50		 push	 eax
  0080a	51		 push	 ecx
  0080b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  00813	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00818	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8692 : 	get_2d_float_screen_y_coordinate (-0.35 + bar_value, &y3);

  0081d	8d 45 9c	 lea	 eax, DWORD PTR _y3$[ebp]
  00820	50		 push	 eax
  00821	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _bar_value$[ebp]
  00826	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfd6666666666666
  0082e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00832	51		 push	 ecx
  00833	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00838	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8693 : 
; 8694 : 	if (draw_large_mfd)

  0083d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00844	0f 84 84 02 00
	00		 je	 $LN12@draw_engin

; 8695 : 	{
; 8696 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  0084a	b8 04 00 00 00	 mov	 eax, 4
  0084f	6b c8 00	 imul	 ecx, eax, 0
  00852	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00858	52		 push	 edx
  00859	51		 push	 ecx
  0085a	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0085f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00864	51		 push	 ecx
  00865	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0086a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0086f	51		 push	 ecx
  00870	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00875	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0087a	51		 push	 ecx
  0087b	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00880	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00885	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8697 : 		draw_line (x1 + 4.0, y1, x1 + 4.0, y2, MFD_COLOUR1);

  0088a	b8 04 00 00 00	 mov	 eax, 4
  0088f	6b c8 00	 imul	 ecx, eax, 0
  00892	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00898	52		 push	 edx
  00899	51		 push	 ecx
  0089a	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0089f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a4	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  008a9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  008b1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  008b5	51		 push	 ecx
  008b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008bb	51		 push	 ecx
  008bc	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  008c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c6	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  008cb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  008d3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  008d7	51		 push	 ecx
  008d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008dd	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8698 : 		draw_line (x1, y1, x1 + 4.0, y1, MFD_COLOUR1);

  008e2	b8 04 00 00 00	 mov	 eax, 4
  008e7	6b c8 00	 imul	 ecx, eax, 0
  008ea	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008f0	52		 push	 edx
  008f1	51		 push	 ecx
  008f2	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  008f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008fc	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00901	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  00909	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0090d	51		 push	 ecx
  0090e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00913	51		 push	 ecx
  00914	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00919	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0091e	51		 push	 ecx
  0091f	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00924	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00929	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8699 : 		draw_line (x1, y2, x1 + 4.0, y2, MFD_COLOUR1);

  0092e	b8 04 00 00 00	 mov	 eax, 4
  00933	6b c8 00	 imul	 ecx, eax, 0
  00936	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0093c	52		 push	 edx
  0093d	51		 push	 ecx
  0093e	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00943	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00948	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0094d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  00955	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00959	51		 push	 ecx
  0095a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0095f	51		 push	 ecx
  00960	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00965	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0096a	51		 push	 ecx
  0096b	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00970	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00975	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8700 : 
; 8701 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  0097a	b8 04 00 00 00	 mov	 eax, 4
  0097f	6b c8 00	 imul	 ecx, eax, 0
  00982	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00988	52		 push	 edx
  00989	51		 push	 ecx
  0098a	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  0098f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00994	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00999	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  009a1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009a5	51		 push	 ecx
  009a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ab	51		 push	 ecx
  009ac	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  009b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b6	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  009bb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  009c3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009c7	51		 push	 ecx
  009c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009cd	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8702 : 		draw_line (x1 + 2.0, y2, x1 + 2.0, y3, MFD_COLOUR1);

  009d2	b8 04 00 00 00	 mov	 eax, 4
  009d7	6b c8 00	 imul	 ecx, eax, 0
  009da	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009e0	52		 push	 edx
  009e1	51		 push	 ecx
  009e2	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  009e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ec	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  009f1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  009f9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009fd	51		 push	 ecx
  009fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a03	51		 push	 ecx
  00a04	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00a09	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a0e	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00a13	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00a1b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a1f	51		 push	 ecx
  00a20	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a25	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8703 : 		draw_line (x1 + 3.0, y2, x1 + 3.0, y3, MFD_COLOUR1);

  00a2a	b8 04 00 00 00	 mov	 eax, 4
  00a2f	6b c8 00	 imul	 ecx, eax, 0
  00a32	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a38	52		 push	 edx
  00a39	51		 push	 ecx
  00a3a	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  00a3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a44	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00a49	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00a51	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a55	51		 push	 ecx
  00a56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a5b	51		 push	 ecx
  00a5c	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00a61	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a66	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00a6b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00a73	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a77	51		 push	 ecx
  00a78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a7d	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8704 : 
; 8705 : 		draw_mono_sprite (large_engine_bar_marker, x1 - 7.0, y1 + 20.0, MFD_COLOUR1);

  00a82	b8 04 00 00 00	 mov	 eax, 4
  00a87	6b c8 00	 imul	 ecx, eax, 0
  00a8a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a90	52		 push	 edx
  00a91	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  00a96	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4034000000000000
  00a9e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00aa2	51		 push	 ecx
  00aa3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa8	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00aad	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401c000000000000
  00ab5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ab9	51		 push	 ecx
  00aba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00abf	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  00ac4	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 8706 : 	}
; 8707 : 	else

  00ac9	e9 cf 01 00 00	 jmp	 $LN13@draw_engin
$LN12@draw_engin:

; 8708 : 	{
; 8709 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  00ace	b8 04 00 00 00	 mov	 eax, 4
  00ad3	6b c8 00	 imul	 ecx, eax, 0
  00ad6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00adc	52		 push	 edx
  00add	51		 push	 ecx
  00ade	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00ae3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ae8	51		 push	 ecx
  00ae9	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00aee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00af3	51		 push	 ecx
  00af4	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00af9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00afe	51		 push	 ecx
  00aff	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00b04	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b09	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8710 : 		draw_line (x1 + 2.0, y1, x1 + 2.0, y2, MFD_COLOUR1);

  00b0e	b8 04 00 00 00	 mov	 eax, 4
  00b13	6b c8 00	 imul	 ecx, eax, 0
  00b16	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b1c	52		 push	 edx
  00b1d	51		 push	 ecx
  00b1e	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00b23	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b28	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00b2d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00b35	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b39	51		 push	 ecx
  00b3a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b3f	51		 push	 ecx
  00b40	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00b45	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b4a	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00b4f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00b57	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b5b	51		 push	 ecx
  00b5c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b61	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8711 : 		draw_line (x1, y1, x1 + 2.0, y1, MFD_COLOUR1);

  00b66	b8 04 00 00 00	 mov	 eax, 4
  00b6b	6b c8 00	 imul	 ecx, eax, 0
  00b6e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b74	52		 push	 edx
  00b75	51		 push	 ecx
  00b76	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00b7b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b80	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00b85	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00b8d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b91	51		 push	 ecx
  00b92	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b97	51		 push	 ecx
  00b98	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00b9d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ba2	51		 push	 ecx
  00ba3	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00ba8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bad	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8712 : 		draw_line (x1, y2, x1 + 2.0, y2, MFD_COLOUR1);

  00bb2	b8 04 00 00 00	 mov	 eax, 4
  00bb7	6b c8 00	 imul	 ecx, eax, 0
  00bba	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00bc0	52		 push	 edx
  00bc1	51		 push	 ecx
  00bc2	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00bc7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bcc	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00bd1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00bd9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00bdd	51		 push	 ecx
  00bde	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00be3	51		 push	 ecx
  00be4	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00be9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bee	51		 push	 ecx
  00bef	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00bf4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bf9	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8713 : 
; 8714 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  00bfe	b8 04 00 00 00	 mov	 eax, 4
  00c03	6b c8 00	 imul	 ecx, eax, 0
  00c06	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c0c	52		 push	 edx
  00c0d	51		 push	 ecx
  00c0e	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  00c13	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c18	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00c1d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00c25	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c29	51		 push	 ecx
  00c2a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c2f	51		 push	 ecx
  00c30	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00c35	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c3a	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00c3f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00c47	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c4b	51		 push	 ecx
  00c4c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c51	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8715 : 
; 8716 : 		draw_mono_sprite (small_engine_bar_marker, x1 - 4.0, y1 + 11.0, MFD_COLOUR1);

  00c56	b8 04 00 00 00	 mov	 eax, 4
  00c5b	6b c8 00	 imul	 ecx, eax, 0
  00c5e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c64	52		 push	 edx
  00c65	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  00c6a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4026000000000000
  00c72	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c76	51		 push	 ecx
  00c77	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c7c	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00c81	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4010000000000000
  00c89	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c8d	51		 push	 ecx
  00c8e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c93	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  00c98	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN13@draw_engin:

; 8717 : 	}
; 8718 : 
; 8719 : 	////////////////////////////////////////
; 8720 : 	//
; 8721 : 	// engine temperature
; 8722 : 	//
; 8723 : 	////////////////////////////////////////
; 8724 : 
; 8725 : 	set_2d_mono_font_position (-0.35, 0.85);

  00c9d	51		 push	 ecx
  00c9e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00ca6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cab	51		 push	 ecx
  00cac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  00cb4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cb9	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8726 : 
; 8727 : 	if (draw_large_mfd)

  00cbe	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00cc5	74 23		 je	 SHORT $LN14@draw_engin

; 8728 : 	{
; 8729 : 		set_mono_font_rel_position (2.0, -16.0);

  00cc7	51		 push	 ecx
  00cc8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1800000
  00cd0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cd5	51		 push	 ecx
  00cd6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00cde	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ce3	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8730 : 	}
; 8731 : 	else

  00ce8	eb 1c		 jmp	 SHORT $LN15@draw_engin
$LN14@draw_engin:

; 8732 : 	{
; 8733 : 		set_mono_font_rel_position (0.0, -7.0);

  00cea	51		 push	 ecx
  00ceb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0e00000
  00cf3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cf8	51		 push	 ecx
  00cf9	0f 57 c0	 xorps	 xmm0, xmm0
  00cfc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d01	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN15@draw_engin:

; 8734 : 	}
; 8735 : 
; 8736 : 	print_mono_font_string ("TGT");

  00d06	68 00 00 00 00	 push	 OFFSET ??_C@_03DBNGLLAD@TGT@
  00d0b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8737 : 
; 8738 : 	//
; 8739 : 	// engine 1 temperature
; 8740 : 	//
; 8741 : 
; 8742 : 	digital_readout = bound (current_flight_dynamics->left_engine_temp.value, 0.0, 1000.0);

  00d10	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00d15	f3 0f 5a 80 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7364]
  00d1d	0f 57 c9	 xorps	 xmm1, xmm1
  00d20	66 0f 2f c8	 comisd	 xmm1, xmm0
  00d24	76 0d		 jbe	 SHORT $LN75@draw_engin
  00d26	0f 57 c0	 xorps	 xmm0, xmm0
  00d29	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv526[ebp], xmm0
  00d31	eb 50		 jmp	 SHORT $LN76@draw_engin
$LN75@draw_engin:
  00d33	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00d39	f3 0f 5a 81 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7364]
  00d41	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@408f400000000000
  00d49	76 12		 jbe	 SHORT $LN73@draw_engin
  00d4b	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@408f400000000000
  00d53	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv525[ebp], xmm0
  00d5b	eb 16		 jmp	 SHORT $LN74@draw_engin
$LN73@draw_engin:
  00d5d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00d63	f3 0f 5a 82 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7364]
  00d6b	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv525[ebp], xmm0
$LN74@draw_engin:
  00d73	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv525[ebp]
  00d7b	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv526[ebp], xmm0
$LN76@draw_engin:
  00d83	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv526[ebp]
  00d8b	f3 0f 11 45 94	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 8743 : 	convert_float_to_int (digital_readout * 0.1, &i);

  00d90	8d 45 ac	 lea	 eax, DWORD PTR _i$[ebp]
  00d93	50		 push	 eax
  00d94	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _digital_readout$[ebp]
  00d99	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00da1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00da5	51		 push	 ecx
  00da6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dab	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 8744 : 	sprintf (buffer, "%03d", i);

  00db0	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  00db3	50		 push	 eax
  00db4	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  00db9	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00dbc	51		 push	 ecx
  00dbd	e8 00 00 00 00	 call	 _sprintf
  00dc2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8745 : 
; 8746 : 	set_2d_mono_font_position (-0.35, -0.35);

  00dc5	51		 push	 ecx
  00dc6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  00dce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dd3	51		 push	 ecx
  00dd4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  00ddc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00de1	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8747 : 
; 8748 : 	if (draw_large_mfd)

  00de6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00ded	74 23		 je	 SHORT $LN16@draw_engin

; 8749 : 	{
; 8750 : 		set_mono_font_rel_position (-13.0, 8.0);

  00def	51		 push	 ecx
  00df0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  00df8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dfd	51		 push	 ecx
  00dfe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1500000
  00e06	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e0b	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8751 : 	}
; 8752 : 	else

  00e10	eb 21		 jmp	 SHORT $LN17@draw_engin
$LN16@draw_engin:

; 8753 : 	{
; 8754 : 		set_mono_font_rel_position (-6.0, 3.0);

  00e12	51		 push	 ecx
  00e13	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  00e1b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e20	51		 push	 ecx
  00e21	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  00e29	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e2e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN17@draw_engin:

; 8755 : 	}
; 8756 : 
; 8757 : 	print_mono_font_string (buffer);

  00e33	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  00e36	50		 push	 eax
  00e37	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8758 : 
; 8759 : 	digital_readout = bound (current_flight_dynamics->left_engine_temp.value * 0.125, 0.0, 125.0);

  00e3c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00e41	f3 0f 5a 80 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7364]
  00e49	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc0000000000000
  00e51	0f 57 c9	 xorps	 xmm1, xmm1
  00e54	66 0f 2f c8	 comisd	 xmm1, xmm0
  00e58	76 0d		 jbe	 SHORT $LN79@draw_engin
  00e5a	0f 57 c0	 xorps	 xmm0, xmm0
  00e5d	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv559[ebp], xmm0
  00e65	eb 60		 jmp	 SHORT $LN80@draw_engin
$LN79@draw_engin:
  00e67	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00e6d	f3 0f 5a 81 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7364]
  00e75	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc0000000000000
  00e7d	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405f400000000000
  00e85	76 12		 jbe	 SHORT $LN77@draw_engin
  00e87	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405f400000000000
  00e8f	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv558[ebp], xmm0
  00e97	eb 1e		 jmp	 SHORT $LN78@draw_engin
$LN77@draw_engin:
  00e99	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00e9f	f3 0f 5a 82 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7364]
  00ea7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc0000000000000
  00eaf	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv558[ebp], xmm0
$LN78@draw_engin:
  00eb7	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv558[ebp]
  00ebf	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv559[ebp], xmm0
$LN80@draw_engin:
  00ec7	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv559[ebp]
  00ecf	f3 0f 11 45 94	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 8760 : 	bar_value = digital_readout * 0.0096;

  00ed4	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _digital_readout$[ebp]
  00ed9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f83a92a30553261
  00ee1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ee5	f3 0f 11 45 98	 movss	 DWORD PTR _bar_value$[ebp], xmm0

; 8761 : 
; 8762 : 	get_2d_float_screen_coordinates (-0.35, 0.85, &x1, &y1);

  00eea	8d 45 a4	 lea	 eax, DWORD PTR _y1$[ebp]
  00eed	50		 push	 eax
  00eee	8d 4d a8	 lea	 ecx, DWORD PTR _x1$[ebp]
  00ef1	51		 push	 ecx
  00ef2	51		 push	 ecx
  00ef3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00efb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f00	51		 push	 ecx
  00f01	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  00f09	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f0e	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 8763 : 	get_2d_float_screen_y_coordinate (-0.35, &y2);

  00f13	8d 45 a0	 lea	 eax, DWORD PTR _y2$[ebp]
  00f16	50		 push	 eax
  00f17	51		 push	 ecx
  00f18	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  00f20	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f25	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8764 : 	get_2d_float_screen_y_coordinate (-0.35 + bar_value, &y3);

  00f2a	8d 45 9c	 lea	 eax, DWORD PTR _y3$[ebp]
  00f2d	50		 push	 eax
  00f2e	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _bar_value$[ebp]
  00f33	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfd6666666666666
  00f3b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00f3f	51		 push	 ecx
  00f40	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f45	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8765 : 
; 8766 : 	if (draw_large_mfd)

  00f4a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00f51	0f 84 84 02 00
	00		 je	 $LN18@draw_engin

; 8767 : 	{
; 8768 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  00f57	b8 04 00 00 00	 mov	 eax, 4
  00f5c	6b c8 00	 imul	 ecx, eax, 0
  00f5f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f65	52		 push	 edx
  00f66	51		 push	 ecx
  00f67	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00f6c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f71	51		 push	 ecx
  00f72	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00f77	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f7c	51		 push	 ecx
  00f7d	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00f82	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f87	51		 push	 ecx
  00f88	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00f8d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f92	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8769 : 		draw_line (x1 + 4.0, y1, x1 + 4.0, y2, MFD_COLOUR1);

  00f97	b8 04 00 00 00	 mov	 eax, 4
  00f9c	6b c8 00	 imul	 ecx, eax, 0
  00f9f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00fa5	52		 push	 edx
  00fa6	51		 push	 ecx
  00fa7	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00fac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fb1	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00fb6	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  00fbe	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00fc2	51		 push	 ecx
  00fc3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fc8	51		 push	 ecx
  00fc9	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00fce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fd3	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00fd8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  00fe0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00fe4	51		 push	 ecx
  00fe5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fea	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8770 : 		draw_line (x1, y1, x1 + 4.0, y1, MFD_COLOUR1);

  00fef	b8 04 00 00 00	 mov	 eax, 4
  00ff4	6b c8 00	 imul	 ecx, eax, 0
  00ff7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ffd	52		 push	 edx
  00ffe	51		 push	 ecx
  00fff	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01004	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01009	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0100e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  01016	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0101a	51		 push	 ecx
  0101b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01020	51		 push	 ecx
  01021	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01026	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0102b	51		 push	 ecx
  0102c	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01031	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01036	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8771 : 		draw_line (x1, y2, x1 + 4.0, y2, MFD_COLOUR1);

  0103b	b8 04 00 00 00	 mov	 eax, 4
  01040	6b c8 00	 imul	 ecx, eax, 0
  01043	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01049	52		 push	 edx
  0104a	51		 push	 ecx
  0104b	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01050	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01055	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0105a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  01062	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01066	51		 push	 ecx
  01067	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0106c	51		 push	 ecx
  0106d	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01072	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01077	51		 push	 ecx
  01078	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0107d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01082	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8772 : 
; 8773 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  01087	b8 04 00 00 00	 mov	 eax, 4
  0108c	6b c8 00	 imul	 ecx, eax, 0
  0108f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01095	52		 push	 edx
  01096	51		 push	 ecx
  01097	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  0109c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010a1	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  010a6	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  010ae	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  010b2	51		 push	 ecx
  010b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010b8	51		 push	 ecx
  010b9	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  010be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010c3	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  010c8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  010d0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  010d4	51		 push	 ecx
  010d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010da	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8774 : 		draw_line (x1 + 2.0, y2, x1 + 2.0, y3, MFD_COLOUR1);

  010df	b8 04 00 00 00	 mov	 eax, 4
  010e4	6b c8 00	 imul	 ecx, eax, 0
  010e7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  010ed	52		 push	 edx
  010ee	51		 push	 ecx
  010ef	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  010f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010f9	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  010fe	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01106	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0110a	51		 push	 ecx
  0110b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01110	51		 push	 ecx
  01111	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01116	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0111b	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01120	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01128	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0112c	51		 push	 ecx
  0112d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01132	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8775 : 		draw_line (x1 + 3.0, y2, x1 + 3.0, y3, MFD_COLOUR1);

  01137	b8 04 00 00 00	 mov	 eax, 4
  0113c	6b c8 00	 imul	 ecx, eax, 0
  0113f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01145	52		 push	 edx
  01146	51		 push	 ecx
  01147	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  0114c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01151	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01156	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  0115e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01162	51		 push	 ecx
  01163	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01168	51		 push	 ecx
  01169	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0116e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01173	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01178	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  01180	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01184	51		 push	 ecx
  01185	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0118a	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8776 : 
; 8777 : 		draw_mono_sprite (large_engine_bar_marker, x1 - 7.0, y1 + 23.0, MFD_COLOUR1);

  0118f	b8 04 00 00 00	 mov	 eax, 4
  01194	6b c8 00	 imul	 ecx, eax, 0
  01197	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0119d	52		 push	 edx
  0119e	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  011a3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4037000000000000
  011ab	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  011af	51		 push	 ecx
  011b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011b5	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  011ba	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401c000000000000
  011c2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  011c6	51		 push	 ecx
  011c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011cc	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  011d1	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 8778 : 	}
; 8779 : 	else

  011d6	e9 cf 01 00 00	 jmp	 $LN19@draw_engin
$LN18@draw_engin:

; 8780 : 	{
; 8781 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  011db	b8 04 00 00 00	 mov	 eax, 4
  011e0	6b c8 00	 imul	 ecx, eax, 0
  011e3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  011e9	52		 push	 edx
  011ea	51		 push	 ecx
  011eb	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  011f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011f5	51		 push	 ecx
  011f6	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  011fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01200	51		 push	 ecx
  01201	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01206	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0120b	51		 push	 ecx
  0120c	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01211	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01216	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8782 : 		draw_line (x1 + 2.0, y1, x1 + 2.0, y2, MFD_COLOUR1);

  0121b	b8 04 00 00 00	 mov	 eax, 4
  01220	6b c8 00	 imul	 ecx, eax, 0
  01223	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01229	52		 push	 edx
  0122a	51		 push	 ecx
  0122b	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01230	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01235	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0123a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01242	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01246	51		 push	 ecx
  01247	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0124c	51		 push	 ecx
  0124d	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01252	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01257	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0125c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01264	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01268	51		 push	 ecx
  01269	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0126e	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8783 : 		draw_line (x1, y1, x1 + 2.0, y1, MFD_COLOUR1);

  01273	b8 04 00 00 00	 mov	 eax, 4
  01278	6b c8 00	 imul	 ecx, eax, 0
  0127b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01281	52		 push	 edx
  01282	51		 push	 ecx
  01283	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01288	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0128d	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01292	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0129a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0129e	51		 push	 ecx
  0129f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012a4	51		 push	 ecx
  012a5	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  012aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012af	51		 push	 ecx
  012b0	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  012b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012ba	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8784 : 		draw_line (x1, y2, x1 + 2.0, y2, MFD_COLOUR1);

  012bf	b8 04 00 00 00	 mov	 eax, 4
  012c4	6b c8 00	 imul	 ecx, eax, 0
  012c7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  012cd	52		 push	 edx
  012ce	51		 push	 ecx
  012cf	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  012d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012d9	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  012de	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  012e6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  012ea	51		 push	 ecx
  012eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012f0	51		 push	 ecx
  012f1	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  012f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012fb	51		 push	 ecx
  012fc	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01301	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01306	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8785 : 
; 8786 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  0130b	b8 04 00 00 00	 mov	 eax, 4
  01310	6b c8 00	 imul	 ecx, eax, 0
  01313	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01319	52		 push	 edx
  0131a	51		 push	 ecx
  0131b	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  01320	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01325	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0132a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  01332	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01336	51		 push	 ecx
  01337	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0133c	51		 push	 ecx
  0133d	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01342	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01347	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0134c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  01354	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01358	51		 push	 ecx
  01359	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0135e	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8787 : 
; 8788 : 		draw_mono_sprite (small_engine_bar_marker, x1 + 3.0, y1 + 13.0, MFD_COLOUR1);

  01363	b8 04 00 00 00	 mov	 eax, 4
  01368	6b c8 00	 imul	 ecx, eax, 0
  0136b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01371	52		 push	 edx
  01372	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  01377	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@402a000000000000
  0137f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01383	51		 push	 ecx
  01384	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01389	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0138e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  01396	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0139a	51		 push	 ecx
  0139b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013a0	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  013a5	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN19@draw_engin:

; 8789 : 	}
; 8790 : 
; 8791 : 	//
; 8792 : 	// engine 2 temperature
; 8793 : 	//
; 8794 : 
; 8795 : 	digital_readout = bound (current_flight_dynamics->right_engine_temp.value, 0.0, 1000.0);

  013aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  013af	f3 0f 5a 80 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7460]
  013b7	0f 57 c9	 xorps	 xmm1, xmm1
  013ba	66 0f 2f c8	 comisd	 xmm1, xmm0
  013be	76 0d		 jbe	 SHORT $LN83@draw_engin
  013c0	0f 57 c0	 xorps	 xmm0, xmm0
  013c3	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv744[ebp], xmm0
  013cb	eb 50		 jmp	 SHORT $LN84@draw_engin
$LN83@draw_engin:
  013cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  013d3	f3 0f 5a 81 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7460]
  013db	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@408f400000000000
  013e3	76 12		 jbe	 SHORT $LN81@draw_engin
  013e5	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@408f400000000000
  013ed	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv743[ebp], xmm0
  013f5	eb 16		 jmp	 SHORT $LN82@draw_engin
$LN81@draw_engin:
  013f7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  013fd	f3 0f 5a 82 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7460]
  01405	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv743[ebp], xmm0
$LN82@draw_engin:
  0140d	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv743[ebp]
  01415	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv744[ebp], xmm0
$LN84@draw_engin:
  0141d	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv744[ebp]
  01425	f3 0f 11 45 94	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 8796 : 	convert_float_to_int (digital_readout * 0.1, &i);

  0142a	8d 45 ac	 lea	 eax, DWORD PTR _i$[ebp]
  0142d	50		 push	 eax
  0142e	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _digital_readout$[ebp]
  01433	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  0143b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0143f	51		 push	 ecx
  01440	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01445	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 8797 : 	sprintf (buffer, "%03d", i);

  0144a	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  0144d	50		 push	 eax
  0144e	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  01453	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  01456	51		 push	 ecx
  01457	e8 00 00 00 00	 call	 _sprintf
  0145c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8798 : 
; 8799 : 	set_2d_mono_font_position (-0.15 - 0.025, -0.35);

  0145f	51		 push	 ecx
  01460	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  01468	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0146d	51		 push	 ecx
  0146e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be333333
  01476	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0147b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8800 : 
; 8801 : 	if (draw_large_mfd)

  01480	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01487	74 23		 je	 SHORT $LN20@draw_engin

; 8802 : 	{
; 8803 : 		set_mono_font_rel_position (-4.0, 8.0);

  01489	51		 push	 ecx
  0148a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  01492	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01497	51		 push	 ecx
  01498	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  014a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014a5	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8804 : 	}
; 8805 : 	else

  014aa	eb 21		 jmp	 SHORT $LN21@draw_engin
$LN20@draw_engin:

; 8806 : 	{
; 8807 : 		set_mono_font_rel_position (-2.0, 3.0);

  014ac	51		 push	 ecx
  014ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  014b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014ba	51		 push	 ecx
  014bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  014c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014c8	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN21@draw_engin:

; 8808 : 	}
; 8809 : 
; 8810 : 	print_mono_font_string (buffer);

  014cd	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  014d0	50		 push	 eax
  014d1	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8811 : 
; 8812 : 	digital_readout = bound (current_flight_dynamics->right_engine_temp.value * 0.125, 0.0, 125.0);

  014d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  014db	f3 0f 5a 80 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7460]
  014e3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc0000000000000
  014eb	0f 57 c9	 xorps	 xmm1, xmm1
  014ee	66 0f 2f c8	 comisd	 xmm1, xmm0
  014f2	76 0d		 jbe	 SHORT $LN87@draw_engin
  014f4	0f 57 c0	 xorps	 xmm0, xmm0
  014f7	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv777[ebp], xmm0
  014ff	eb 60		 jmp	 SHORT $LN88@draw_engin
$LN87@draw_engin:
  01501	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01507	f3 0f 5a 81 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7460]
  0150f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc0000000000000
  01517	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405f400000000000
  0151f	76 12		 jbe	 SHORT $LN85@draw_engin
  01521	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405f400000000000
  01529	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv776[ebp], xmm0
  01531	eb 1e		 jmp	 SHORT $LN86@draw_engin
$LN85@draw_engin:
  01533	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01539	f3 0f 5a 82 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7460]
  01541	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc0000000000000
  01549	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv776[ebp], xmm0
$LN86@draw_engin:
  01551	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv776[ebp]
  01559	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv777[ebp], xmm0
$LN88@draw_engin:
  01561	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv777[ebp]
  01569	f3 0f 11 45 94	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 8813 : 	bar_value = digital_readout * 0.0096;

  0156e	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _digital_readout$[ebp]
  01573	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f83a92a30553261
  0157b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0157f	f3 0f 11 45 98	 movss	 DWORD PTR _bar_value$[ebp], xmm0

; 8814 : 
; 8815 : 	get_2d_float_screen_coordinates (-0.15 - 0.025, 0.85, &x1, &y1);

  01584	8d 45 a4	 lea	 eax, DWORD PTR _y1$[ebp]
  01587	50		 push	 eax
  01588	8d 4d a8	 lea	 ecx, DWORD PTR _x1$[ebp]
  0158b	51		 push	 ecx
  0158c	51		 push	 ecx
  0158d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  01595	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0159a	51		 push	 ecx
  0159b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be333333
  015a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015a8	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 8816 : 	get_2d_float_screen_y_coordinate (-0.35, &y2);

  015ad	8d 45 a0	 lea	 eax, DWORD PTR _y2$[ebp]
  015b0	50		 push	 eax
  015b1	51		 push	 ecx
  015b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  015ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015bf	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8817 : 	get_2d_float_screen_y_coordinate (-0.35 + bar_value, &y3);

  015c4	8d 45 9c	 lea	 eax, DWORD PTR _y3$[ebp]
  015c7	50		 push	 eax
  015c8	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _bar_value$[ebp]
  015cd	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfd6666666666666
  015d5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  015d9	51		 push	 ecx
  015da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015df	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8818 : 
; 8819 : 	if (draw_large_mfd)

  015e4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  015eb	0f 84 84 02 00
	00		 je	 $LN22@draw_engin

; 8820 : 	{
; 8821 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  015f1	b8 04 00 00 00	 mov	 eax, 4
  015f6	6b c8 00	 imul	 ecx, eax, 0
  015f9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  015ff	52		 push	 edx
  01600	51		 push	 ecx
  01601	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01606	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0160b	51		 push	 ecx
  0160c	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01611	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01616	51		 push	 ecx
  01617	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0161c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01621	51		 push	 ecx
  01622	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01627	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0162c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8822 : 		draw_line (x1 + 4.0, y1, x1 + 4.0, y2, MFD_COLOUR1);

  01631	b8 04 00 00 00	 mov	 eax, 4
  01636	6b c8 00	 imul	 ecx, eax, 0
  01639	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0163f	52		 push	 edx
  01640	51		 push	 ecx
  01641	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01646	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0164b	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01650	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  01658	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0165c	51		 push	 ecx
  0165d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01662	51		 push	 ecx
  01663	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01668	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0166d	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01672	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  0167a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0167e	51		 push	 ecx
  0167f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01684	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8823 : 		draw_line (x1, y1, x1 + 4.0, y1, MFD_COLOUR1);

  01689	b8 04 00 00 00	 mov	 eax, 4
  0168e	6b c8 00	 imul	 ecx, eax, 0
  01691	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01697	52		 push	 edx
  01698	51		 push	 ecx
  01699	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0169e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016a3	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  016a8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  016b0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  016b4	51		 push	 ecx
  016b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016ba	51		 push	 ecx
  016bb	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  016c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016c5	51		 push	 ecx
  016c6	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  016cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016d0	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8824 : 		draw_line (x1, y2, x1 + 4.0, y2, MFD_COLOUR1);

  016d5	b8 04 00 00 00	 mov	 eax, 4
  016da	6b c8 00	 imul	 ecx, eax, 0
  016dd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  016e3	52		 push	 edx
  016e4	51		 push	 ecx
  016e5	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  016ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016ef	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  016f4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  016fc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01700	51		 push	 ecx
  01701	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01706	51		 push	 ecx
  01707	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0170c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01711	51		 push	 ecx
  01712	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01717	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0171c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8825 : 
; 8826 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  01721	b8 04 00 00 00	 mov	 eax, 4
  01726	6b c8 00	 imul	 ecx, eax, 0
  01729	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0172f	52		 push	 edx
  01730	51		 push	 ecx
  01731	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  01736	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0173b	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01740	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  01748	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0174c	51		 push	 ecx
  0174d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01752	51		 push	 ecx
  01753	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01758	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0175d	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01762	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0176a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0176e	51		 push	 ecx
  0176f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01774	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8827 : 		draw_line (x1 + 2.0, y2, x1 + 2.0, y3, MFD_COLOUR1);

  01779	b8 04 00 00 00	 mov	 eax, 4
  0177e	6b c8 00	 imul	 ecx, eax, 0
  01781	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01787	52		 push	 edx
  01788	51		 push	 ecx
  01789	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  0178e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01793	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01798	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  017a0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  017a4	51		 push	 ecx
  017a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017aa	51		 push	 ecx
  017ab	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  017b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017b5	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  017ba	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  017c2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  017c6	51		 push	 ecx
  017c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017cc	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8828 : 		draw_line (x1 + 3.0, y2, x1 + 3.0, y3, MFD_COLOUR1);

  017d1	b8 04 00 00 00	 mov	 eax, 4
  017d6	6b c8 00	 imul	 ecx, eax, 0
  017d9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  017df	52		 push	 edx
  017e0	51		 push	 ecx
  017e1	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  017e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017eb	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  017f0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  017f8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  017fc	51		 push	 ecx
  017fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01802	51		 push	 ecx
  01803	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01808	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0180d	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01812	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  0181a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0181e	51		 push	 ecx
  0181f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01824	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8829 : 
; 8830 : 		draw_mono_sprite (large_engine_bar_marker, x1 + 5.0, y1 + 23.0, MFD_COLOUR1);

  01829	b8 04 00 00 00	 mov	 eax, 4
  0182e	6b c8 00	 imul	 ecx, eax, 0
  01831	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01837	52		 push	 edx
  01838	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  0183d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4037000000000000
  01845	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01849	51		 push	 ecx
  0184a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0184f	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01854	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4014000000000000
  0185c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01860	51		 push	 ecx
  01861	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01866	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  0186b	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 8831 : 	}
; 8832 : 	else

  01870	e9 cf 01 00 00	 jmp	 $LN23@draw_engin
$LN22@draw_engin:

; 8833 : 	{
; 8834 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  01875	b8 04 00 00 00	 mov	 eax, 4
  0187a	6b c8 00	 imul	 ecx, eax, 0
  0187d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01883	52		 push	 edx
  01884	51		 push	 ecx
  01885	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0188a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0188f	51		 push	 ecx
  01890	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01895	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0189a	51		 push	 ecx
  0189b	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  018a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018a5	51		 push	 ecx
  018a6	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  018ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018b0	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8835 : 		draw_line (x1 + 2.0, y1, x1 + 2.0, y2, MFD_COLOUR1);

  018b5	b8 04 00 00 00	 mov	 eax, 4
  018ba	6b c8 00	 imul	 ecx, eax, 0
  018bd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  018c3	52		 push	 edx
  018c4	51		 push	 ecx
  018c5	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  018ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018cf	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  018d4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  018dc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  018e0	51		 push	 ecx
  018e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018e6	51		 push	 ecx
  018e7	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  018ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018f1	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  018f6	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  018fe	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01902	51		 push	 ecx
  01903	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01908	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8836 : 		draw_line (x1, y1, x1 + 2.0, y1, MFD_COLOUR1);

  0190d	b8 04 00 00 00	 mov	 eax, 4
  01912	6b c8 00	 imul	 ecx, eax, 0
  01915	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0191b	52		 push	 edx
  0191c	51		 push	 ecx
  0191d	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01922	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01927	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0192c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01934	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01938	51		 push	 ecx
  01939	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0193e	51		 push	 ecx
  0193f	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01944	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01949	51		 push	 ecx
  0194a	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0194f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01954	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8837 : 		draw_line (x1, y2, x1 + 2.0, y2, MFD_COLOUR1);

  01959	b8 04 00 00 00	 mov	 eax, 4
  0195e	6b c8 00	 imul	 ecx, eax, 0
  01961	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01967	52		 push	 edx
  01968	51		 push	 ecx
  01969	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0196e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01973	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01978	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01980	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01984	51		 push	 ecx
  01985	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0198a	51		 push	 ecx
  0198b	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01990	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01995	51		 push	 ecx
  01996	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0199b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019a0	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8838 : 
; 8839 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  019a5	b8 04 00 00 00	 mov	 eax, 4
  019aa	6b c8 00	 imul	 ecx, eax, 0
  019ad	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  019b3	52		 push	 edx
  019b4	51		 push	 ecx
  019b5	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  019ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019bf	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  019c4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  019cc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  019d0	51		 push	 ecx
  019d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019d6	51		 push	 ecx
  019d7	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  019dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019e1	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  019e6	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  019ee	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  019f2	51		 push	 ecx
  019f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019f8	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8840 : 
; 8841 : 		draw_mono_sprite (small_engine_bar_marker, x1 - 4.0, y1 + 13.0, MFD_COLOUR1);

  019fd	b8 04 00 00 00	 mov	 eax, 4
  01a02	6b c8 00	 imul	 ecx, eax, 0
  01a05	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a0b	52		 push	 edx
  01a0c	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  01a11	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@402a000000000000
  01a19	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a1d	51		 push	 ecx
  01a1e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a23	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01a28	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4010000000000000
  01a30	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a34	51		 push	 ecx
  01a35	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a3a	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  01a3f	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN23@draw_engin:

; 8842 : 	}
; 8843 : 
; 8844 : 	////////////////////////////////////////
; 8845 : 	//
; 8846 : 	// engine and rotor rpm
; 8847 : 	//
; 8848 : 	////////////////////////////////////////
; 8849 : 
; 8850 : 	//
; 8851 : 	// engine 1 rpm
; 8852 : 	//
; 8853 : 
; 8854 : 	set_2d_mono_font_position (0.1, 0.85);

  01a44	51		 push	 ecx
  01a45	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  01a4d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a52	51		 push	 ecx
  01a53	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  01a5b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a60	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8855 : 
; 8856 : 	if (draw_large_mfd)

  01a65	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01a6c	74 4d		 je	 SHORT $LN24@draw_engin

; 8857 : 	{
; 8858 : 		set_mono_font_rel_position (-6.0, -16.0);

  01a6e	51		 push	 ecx
  01a6f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1800000
  01a77	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a7c	51		 push	 ecx
  01a7d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  01a85	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a8a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8859 : 
; 8860 : 		print_mono_font_char ('N');

  01a8f	6a 4e		 push	 78			; 0000004eH
  01a91	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 8861 : 
; 8862 : 		set_mono_font_rel_position (0.0, 2.0);

  01a96	51		 push	 ecx
  01a97	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  01a9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aa4	51		 push	 ecx
  01aa5	0f 57 c0	 xorps	 xmm0, xmm0
  01aa8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aad	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8863 : 
; 8864 : 		print_mono_font_char ('P');

  01ab2	6a 50		 push	 80			; 00000050H
  01ab4	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 8865 : 	}
; 8866 : 	else

  01ab9	eb 4b		 jmp	 SHORT $LN25@draw_engin
$LN24@draw_engin:

; 8867 : 	{
; 8868 : 		set_mono_font_rel_position (-2.0, -7.0);

  01abb	51		 push	 ecx
  01abc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0e00000
  01ac4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ac9	51		 push	 ecx
  01aca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  01ad2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ad7	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8869 : 
; 8870 : 		print_mono_font_char ('N');

  01adc	6a 4e		 push	 78			; 0000004eH
  01ade	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 8871 : 
; 8872 : 		set_mono_font_rel_position (0.0, 1.0);

  01ae3	51		 push	 ecx
  01ae4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01aec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01af1	51		 push	 ecx
  01af2	0f 57 c0	 xorps	 xmm0, xmm0
  01af5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01afa	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8873 : 
; 8874 : 		print_mono_font_char ('P');

  01aff	6a 50		 push	 80			; 00000050H
  01b01	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char
$LN25@draw_engin:

; 8875 : 	}
; 8876 : 
; 8877 : 	digital_readout = bound (current_flight_dynamics->left_engine_rpm.value, 0.0, 120.0);

  01b06	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01b0b	f3 0f 5a 80 7c
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7292]
  01b13	0f 57 c9	 xorps	 xmm1, xmm1
  01b16	66 0f 2f c8	 comisd	 xmm1, xmm0
  01b1a	76 0d		 jbe	 SHORT $LN91@draw_engin
  01b1c	0f 57 c0	 xorps	 xmm0, xmm0
  01b1f	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv977[ebp], xmm0
  01b27	eb 50		 jmp	 SHORT $LN92@draw_engin
$LN91@draw_engin:
  01b29	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01b2f	f3 0f 5a 81 7c
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7292]
  01b37	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  01b3f	76 12		 jbe	 SHORT $LN89@draw_engin
  01b41	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  01b49	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv976[ebp], xmm0
  01b51	eb 16		 jmp	 SHORT $LN90@draw_engin
$LN89@draw_engin:
  01b53	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01b59	f3 0f 5a 82 7c
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7292]
  01b61	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv976[ebp], xmm0
$LN90@draw_engin:
  01b69	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv976[ebp]
  01b71	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv977[ebp], xmm0
$LN92@draw_engin:
  01b79	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv977[ebp]
  01b81	f3 0f 11 45 94	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 8878 : 
; 8879 : 	convert_float_to_int (digital_readout, &i);

  01b86	8d 45 ac	 lea	 eax, DWORD PTR _i$[ebp]
  01b89	50		 push	 eax
  01b8a	51		 push	 ecx
  01b8b	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  01b90	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b95	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 8880 : 
; 8881 : 	sprintf (buffer, "%03d", i);

  01b9a	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  01b9d	50		 push	 eax
  01b9e	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  01ba3	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  01ba6	51		 push	 ecx
  01ba7	e8 00 00 00 00	 call	 _sprintf
  01bac	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8882 : 
; 8883 : 	set_2d_mono_font_position (0.1 + 0.05, -0.35);

  01baf	51		 push	 ecx
  01bb0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  01bb8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bbd	51		 push	 ecx
  01bbe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  01bc6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bcb	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8884 : 
; 8885 : 	if (draw_large_mfd)

  01bd0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01bd7	74 23		 je	 SHORT $LN26@draw_engin

; 8886 : 	{
; 8887 : 		set_mono_font_rel_position (-13.0, 8.0);

  01bd9	51		 push	 ecx
  01bda	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  01be2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01be7	51		 push	 ecx
  01be8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1500000
  01bf0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bf5	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8888 : 	}
; 8889 : 	else

  01bfa	eb 21		 jmp	 SHORT $LN27@draw_engin
$LN26@draw_engin:

; 8890 : 	{
; 8891 : 		set_mono_font_rel_position (-6.0, 3.0);

  01bfc	51		 push	 ecx
  01bfd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  01c05	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c0a	51		 push	 ecx
  01c0b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  01c13	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c18	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN27@draw_engin:

; 8892 : 	}
; 8893 : 
; 8894 : 	print_mono_font_string (buffer);

  01c1d	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  01c20	50		 push	 eax
  01c21	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8895 : 
; 8896 : 	bar_value = digital_readout * 0.01;

  01c26	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _digital_readout$[ebp]
  01c2b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  01c33	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c37	f3 0f 11 45 98	 movss	 DWORD PTR _bar_value$[ebp], xmm0

; 8897 : 
; 8898 : 	get_2d_float_screen_coordinates (0.1, 0.85, &x1, &y1);

  01c3c	8d 45 a4	 lea	 eax, DWORD PTR _y1$[ebp]
  01c3f	50		 push	 eax
  01c40	8d 4d a8	 lea	 ecx, DWORD PTR _x1$[ebp]
  01c43	51		 push	 ecx
  01c44	51		 push	 ecx
  01c45	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  01c4d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c52	51		 push	 ecx
  01c53	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  01c5b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c60	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 8899 : 	get_2d_float_screen_y_coordinate (-0.35, &y2);

  01c65	8d 45 a0	 lea	 eax, DWORD PTR _y2$[ebp]
  01c68	50		 push	 eax
  01c69	51		 push	 ecx
  01c6a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  01c72	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c77	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8900 : 	get_2d_float_screen_y_coordinate (-0.35 + bar_value, &y3);

  01c7c	8d 45 9c	 lea	 eax, DWORD PTR _y3$[ebp]
  01c7f	50		 push	 eax
  01c80	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _bar_value$[ebp]
  01c85	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfd6666666666666
  01c8d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c91	51		 push	 ecx
  01c92	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c97	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8901 : 
; 8902 : 	if (draw_large_mfd)

  01c9c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01ca3	0f 84 84 02 00
	00		 je	 $LN28@draw_engin

; 8903 : 	{
; 8904 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  01ca9	b8 04 00 00 00	 mov	 eax, 4
  01cae	6b c8 00	 imul	 ecx, eax, 0
  01cb1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01cb7	52		 push	 edx
  01cb8	51		 push	 ecx
  01cb9	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01cbe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cc3	51		 push	 ecx
  01cc4	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01cc9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cce	51		 push	 ecx
  01ccf	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01cd4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cd9	51		 push	 ecx
  01cda	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01cdf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ce4	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8905 : 		draw_line (x1 + 4.0, y1, x1 + 4.0, y2, MFD_COLOUR1);

  01ce9	b8 04 00 00 00	 mov	 eax, 4
  01cee	6b c8 00	 imul	 ecx, eax, 0
  01cf1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01cf7	52		 push	 edx
  01cf8	51		 push	 ecx
  01cf9	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01cfe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d03	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01d08	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  01d10	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d14	51		 push	 ecx
  01d15	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d1a	51		 push	 ecx
  01d1b	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01d20	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d25	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01d2a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  01d32	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d36	51		 push	 ecx
  01d37	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d3c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8906 : 		draw_line (x1, y1, x1 + 4.0, y1, MFD_COLOUR1);

  01d41	b8 04 00 00 00	 mov	 eax, 4
  01d46	6b c8 00	 imul	 ecx, eax, 0
  01d49	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01d4f	52		 push	 edx
  01d50	51		 push	 ecx
  01d51	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01d56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d5b	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01d60	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  01d68	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d6c	51		 push	 ecx
  01d6d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d72	51		 push	 ecx
  01d73	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01d78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d7d	51		 push	 ecx
  01d7e	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01d83	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d88	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8907 : 		draw_line (x1, y2, x1 + 4.0, y2, MFD_COLOUR1);

  01d8d	b8 04 00 00 00	 mov	 eax, 4
  01d92	6b c8 00	 imul	 ecx, eax, 0
  01d95	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01d9b	52		 push	 edx
  01d9c	51		 push	 ecx
  01d9d	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01da2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01da7	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01dac	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  01db4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01db8	51		 push	 ecx
  01db9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dbe	51		 push	 ecx
  01dbf	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01dc4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dc9	51		 push	 ecx
  01dca	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01dcf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dd4	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8908 : 
; 8909 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  01dd9	b8 04 00 00 00	 mov	 eax, 4
  01dde	6b c8 00	 imul	 ecx, eax, 0
  01de1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01de7	52		 push	 edx
  01de8	51		 push	 ecx
  01de9	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  01dee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01df3	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01df8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  01e00	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e04	51		 push	 ecx
  01e05	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e0a	51		 push	 ecx
  01e0b	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01e10	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e15	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01e1a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  01e22	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e26	51		 push	 ecx
  01e27	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e2c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8910 : 		draw_line (x1 + 2.0, y2, x1 + 2.0, y3, MFD_COLOUR1);

  01e31	b8 04 00 00 00	 mov	 eax, 4
  01e36	6b c8 00	 imul	 ecx, eax, 0
  01e39	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01e3f	52		 push	 edx
  01e40	51		 push	 ecx
  01e41	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  01e46	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e4b	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01e50	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01e58	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e5c	51		 push	 ecx
  01e5d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e62	51		 push	 ecx
  01e63	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01e68	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e6d	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01e72	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01e7a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e7e	51		 push	 ecx
  01e7f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e84	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8911 : 		draw_line (x1 + 3.0, y2, x1 + 3.0, y3, MFD_COLOUR1);

  01e89	b8 04 00 00 00	 mov	 eax, 4
  01e8e	6b c8 00	 imul	 ecx, eax, 0
  01e91	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01e97	52		 push	 edx
  01e98	51		 push	 ecx
  01e99	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  01e9e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ea3	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01ea8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  01eb0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01eb4	51		 push	 ecx
  01eb5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01eba	51		 push	 ecx
  01ebb	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01ec0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ec5	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01eca	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  01ed2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01ed6	51		 push	 ecx
  01ed7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01edc	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8912 : 
; 8913 : 		draw_mono_sprite (large_engine_bar_marker, x1 - 7.0, y1 + 20.0, MFD_COLOUR1);

  01ee1	b8 04 00 00 00	 mov	 eax, 4
  01ee6	6b c8 00	 imul	 ecx, eax, 0
  01ee9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01eef	52		 push	 edx
  01ef0	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  01ef5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4034000000000000
  01efd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01f01	51		 push	 ecx
  01f02	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f07	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01f0c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401c000000000000
  01f14	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01f18	51		 push	 ecx
  01f19	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f1e	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  01f23	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 8914 : 	}
; 8915 : 	else

  01f28	e9 cf 01 00 00	 jmp	 $LN29@draw_engin
$LN28@draw_engin:

; 8916 : 	{
; 8917 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  01f2d	b8 04 00 00 00	 mov	 eax, 4
  01f32	6b c8 00	 imul	 ecx, eax, 0
  01f35	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01f3b	52		 push	 edx
  01f3c	51		 push	 ecx
  01f3d	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01f42	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f47	51		 push	 ecx
  01f48	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01f4d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f52	51		 push	 ecx
  01f53	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01f58	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f5d	51		 push	 ecx
  01f5e	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01f63	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f68	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8918 : 		draw_line (x1 + 2.0, y1, x1 + 2.0, y2, MFD_COLOUR1);

  01f6d	b8 04 00 00 00	 mov	 eax, 4
  01f72	6b c8 00	 imul	 ecx, eax, 0
  01f75	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01f7b	52		 push	 edx
  01f7c	51		 push	 ecx
  01f7d	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01f82	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f87	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01f8c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01f94	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01f98	51		 push	 ecx
  01f99	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f9e	51		 push	 ecx
  01f9f	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01fa4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fa9	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01fae	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01fb6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01fba	51		 push	 ecx
  01fbb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fc0	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8919 : 		draw_line (x1, y1, x1 + 2.0, y1, MFD_COLOUR1);

  01fc5	b8 04 00 00 00	 mov	 eax, 4
  01fca	6b c8 00	 imul	 ecx, eax, 0
  01fcd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01fd3	52		 push	 edx
  01fd4	51		 push	 ecx
  01fd5	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01fda	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fdf	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01fe4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01fec	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01ff0	51		 push	 ecx
  01ff1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ff6	51		 push	 ecx
  01ff7	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01ffc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02001	51		 push	 ecx
  02002	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02007	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0200c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8920 : 		draw_line (x1, y2, x1 + 2.0, y2, MFD_COLOUR1);

  02011	b8 04 00 00 00	 mov	 eax, 4
  02016	6b c8 00	 imul	 ecx, eax, 0
  02019	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0201f	52		 push	 edx
  02020	51		 push	 ecx
  02021	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02026	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0202b	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02030	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02038	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0203c	51		 push	 ecx
  0203d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02042	51		 push	 ecx
  02043	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02048	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0204d	51		 push	 ecx
  0204e	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02053	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02058	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8921 : 
; 8922 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  0205d	b8 04 00 00 00	 mov	 eax, 4
  02062	6b c8 00	 imul	 ecx, eax, 0
  02065	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0206b	52		 push	 edx
  0206c	51		 push	 ecx
  0206d	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  02072	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02077	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0207c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02084	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02088	51		 push	 ecx
  02089	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0208e	51		 push	 ecx
  0208f	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02094	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02099	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0209e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  020a6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  020aa	51		 push	 ecx
  020ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020b0	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8923 : 
; 8924 : 		draw_mono_sprite (small_engine_bar_marker, x1 - 4.0, y1 + 11.0, MFD_COLOUR1);

  020b5	b8 04 00 00 00	 mov	 eax, 4
  020ba	6b c8 00	 imul	 ecx, eax, 0
  020bd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  020c3	52		 push	 edx
  020c4	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  020c9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4026000000000000
  020d1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  020d5	51		 push	 ecx
  020d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020db	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  020e0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4010000000000000
  020e8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  020ec	51		 push	 ecx
  020ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020f2	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  020f7	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN29@draw_engin:

; 8925 : 	}
; 8926 : 
; 8927 : 	//
; 8928 : 	// rotor rpm
; 8929 : 	//
; 8930 : 
; 8931 : 	set_2d_mono_font_position (0.25 - 0.0125, 0.85);

  020fc	51		 push	 ecx
  020fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  02105	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0210a	51		 push	 ecx
  0210b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e733333
  02113	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02118	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8932 : 
; 8933 : 	if (draw_large_mfd)

  0211d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02124	74 4d		 je	 SHORT $LN30@draw_engin

; 8934 : 	{
; 8935 : 		set_mono_font_rel_position (-6.0, -16.0);

  02126	51		 push	 ecx
  02127	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1800000
  0212f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02134	51		 push	 ecx
  02135	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  0213d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02142	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8936 : 
; 8937 : 		print_mono_font_char ('N');

  02147	6a 4e		 push	 78			; 0000004eH
  02149	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 8938 : 
; 8939 : 		set_mono_font_rel_position (0.0, 2.0);

  0214e	51		 push	 ecx
  0214f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02157	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0215c	51		 push	 ecx
  0215d	0f 57 c0	 xorps	 xmm0, xmm0
  02160	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02165	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8940 : 
; 8941 : 		print_mono_font_char ('R');

  0216a	6a 52		 push	 82			; 00000052H
  0216c	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 8942 : 	}
; 8943 : 	else

  02171	eb 4b		 jmp	 SHORT $LN31@draw_engin
$LN30@draw_engin:

; 8944 : 	{
; 8945 : 		set_mono_font_rel_position (-2.0, -7.0);

  02173	51		 push	 ecx
  02174	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0e00000
  0217c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02181	51		 push	 ecx
  02182	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  0218a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0218f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8946 : 
; 8947 : 		print_mono_font_char ('N');

  02194	6a 4e		 push	 78			; 0000004eH
  02196	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 8948 : 
; 8949 : 		set_mono_font_rel_position (0.0, 1.0);

  0219b	51		 push	 ecx
  0219c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  021a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021a9	51		 push	 ecx
  021aa	0f 57 c0	 xorps	 xmm0, xmm0
  021ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021b2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8950 : 
; 8951 : 		print_mono_font_char ('R');

  021b7	6a 52		 push	 82			; 00000052H
  021b9	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char
$LN31@draw_engin:

; 8952 : 	}
; 8953 : 
; 8954 : 	digital_readout = bound (current_flight_dynamics->main_rotor_rpm.value, 0.0, 125.0);

  021be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  021c3	f3 0f 5a 80 14
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7700]
  021cb	0f 57 c9	 xorps	 xmm1, xmm1
  021ce	66 0f 2f c8	 comisd	 xmm1, xmm0
  021d2	76 0d		 jbe	 SHORT $LN95@draw_engin
  021d4	0f 57 c0	 xorps	 xmm0, xmm0
  021d7	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv1190[ebp], xmm0
  021df	eb 50		 jmp	 SHORT $LN96@draw_engin
$LN95@draw_engin:
  021e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  021e7	f3 0f 5a 81 14
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7700]
  021ef	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405f400000000000
  021f7	76 12		 jbe	 SHORT $LN93@draw_engin
  021f9	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405f400000000000
  02201	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv1189[ebp], xmm0
  02209	eb 16		 jmp	 SHORT $LN94@draw_engin
$LN93@draw_engin:
  0220b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  02211	f3 0f 5a 82 14
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7700]
  02219	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv1189[ebp], xmm0
$LN94@draw_engin:
  02221	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1189[ebp]
  02229	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv1190[ebp], xmm0
$LN96@draw_engin:
  02231	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv1190[ebp]
  02239	f3 0f 11 45 94	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 8955 : 
; 8956 : 	convert_float_to_int (digital_readout, &i);

  0223e	8d 45 ac	 lea	 eax, DWORD PTR _i$[ebp]
  02241	50		 push	 eax
  02242	51		 push	 ecx
  02243	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  02248	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0224d	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 8957 : 
; 8958 : 	sprintf (buffer, "%03d", i);

  02252	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  02255	50		 push	 eax
  02256	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  0225b	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0225e	51		 push	 ecx
  0225f	e8 00 00 00 00	 call	 _sprintf
  02264	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8959 : 
; 8960 : 	set_2d_mono_font_position (0.25 - 0.0125, -0.15);

  02267	51		 push	 ecx
  02268	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  02270	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02275	51		 push	 ecx
  02276	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e733333
  0227e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02283	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8961 : 
; 8962 : 	if (draw_large_mfd)

  02288	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0228f	74 23		 je	 SHORT $LN32@draw_engin

; 8963 : 	{
; 8964 : 		set_mono_font_rel_position (-8.0, 8.0);

  02291	51		 push	 ecx
  02292	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  0229a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0229f	51		 push	 ecx
  022a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  022a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022ad	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8965 : 	}
; 8966 : 	else

  022b2	eb 21		 jmp	 SHORT $LN33@draw_engin
$LN32@draw_engin:

; 8967 : 	{
; 8968 : 		set_mono_font_rel_position (-4.0, 3.0);

  022b4	51		 push	 ecx
  022b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  022bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022c2	51		 push	 ecx
  022c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  022cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022d0	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN33@draw_engin:

; 8969 : 	}
; 8970 : 
; 8971 : 	print_mono_font_string (buffer);

  022d5	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  022d8	50		 push	 eax
  022d9	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8972 : 
; 8973 : 	bar_value = digital_readout * 0.008;

  022de	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _digital_readout$[ebp]
  022e3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f80624dd2f1a9fc
  022eb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  022ef	f3 0f 11 45 98	 movss	 DWORD PTR _bar_value$[ebp], xmm0

; 8974 : 
; 8975 : 	get_2d_float_screen_coordinates (0.25 - 0.0125, 0.85, &x1, &y1);

  022f4	8d 45 a4	 lea	 eax, DWORD PTR _y1$[ebp]
  022f7	50		 push	 eax
  022f8	8d 4d a8	 lea	 ecx, DWORD PTR _x1$[ebp]
  022fb	51		 push	 ecx
  022fc	51		 push	 ecx
  022fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  02305	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0230a	51		 push	 ecx
  0230b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e733333
  02313	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02318	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 8976 : 	get_2d_float_screen_y_coordinate (-0.15, &y2);

  0231d	8d 45 a0	 lea	 eax, DWORD PTR _y2$[ebp]
  02320	50		 push	 eax
  02321	51		 push	 ecx
  02322	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  0232a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0232f	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8977 : 	get_2d_float_screen_y_coordinate (-0.15 + bar_value, &y3);

  02334	8d 45 9c	 lea	 eax, DWORD PTR _y3$[ebp]
  02337	50		 push	 eax
  02338	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _bar_value$[ebp]
  0233d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfc3333333333333
  02345	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02349	51		 push	 ecx
  0234a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0234f	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8978 : 
; 8979 : 	if (draw_large_mfd)

  02354	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0235b	0f 84 84 02 00
	00		 je	 $LN34@draw_engin

; 8980 : 	{
; 8981 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  02361	b8 04 00 00 00	 mov	 eax, 4
  02366	6b c8 00	 imul	 ecx, eax, 0
  02369	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0236f	52		 push	 edx
  02370	51		 push	 ecx
  02371	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02376	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0237b	51		 push	 ecx
  0237c	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02381	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02386	51		 push	 ecx
  02387	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0238c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02391	51		 push	 ecx
  02392	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02397	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0239c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8982 : 		draw_line (x1 + 4.0, y1, x1 + 4.0, y2, MFD_COLOUR1);

  023a1	b8 04 00 00 00	 mov	 eax, 4
  023a6	6b c8 00	 imul	 ecx, eax, 0
  023a9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  023af	52		 push	 edx
  023b0	51		 push	 ecx
  023b1	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  023b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023bb	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  023c0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  023c8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  023cc	51		 push	 ecx
  023cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023d2	51		 push	 ecx
  023d3	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  023d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023dd	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  023e2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  023ea	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  023ee	51		 push	 ecx
  023ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023f4	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8983 : 		draw_line (x1, y1, x1 + 4.0, y1, MFD_COLOUR1);

  023f9	b8 04 00 00 00	 mov	 eax, 4
  023fe	6b c8 00	 imul	 ecx, eax, 0
  02401	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02407	52		 push	 edx
  02408	51		 push	 ecx
  02409	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0240e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02413	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02418	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  02420	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02424	51		 push	 ecx
  02425	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0242a	51		 push	 ecx
  0242b	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02430	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02435	51		 push	 ecx
  02436	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0243b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02440	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8984 : 		draw_line (x1, y2, x1 + 4.0, y2, MFD_COLOUR1);

  02445	b8 04 00 00 00	 mov	 eax, 4
  0244a	6b c8 00	 imul	 ecx, eax, 0
  0244d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02453	52		 push	 edx
  02454	51		 push	 ecx
  02455	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0245a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0245f	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02464	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  0246c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02470	51		 push	 ecx
  02471	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02476	51		 push	 ecx
  02477	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0247c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02481	51		 push	 ecx
  02482	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02487	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0248c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8985 : 
; 8986 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  02491	b8 04 00 00 00	 mov	 eax, 4
  02496	6b c8 00	 imul	 ecx, eax, 0
  02499	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0249f	52		 push	 edx
  024a0	51		 push	 ecx
  024a1	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  024a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024ab	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  024b0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  024b8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  024bc	51		 push	 ecx
  024bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024c2	51		 push	 ecx
  024c3	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  024c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024cd	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  024d2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  024da	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  024de	51		 push	 ecx
  024df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024e4	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8987 : 		draw_line (x1 + 2.0, y2, x1 + 2.0, y3, MFD_COLOUR1);

  024e9	b8 04 00 00 00	 mov	 eax, 4
  024ee	6b c8 00	 imul	 ecx, eax, 0
  024f1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  024f7	52		 push	 edx
  024f8	51		 push	 ecx
  024f9	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  024fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02503	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02508	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02510	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02514	51		 push	 ecx
  02515	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0251a	51		 push	 ecx
  0251b	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02520	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02525	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0252a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02532	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02536	51		 push	 ecx
  02537	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0253c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8988 : 		draw_line (x1 + 3.0, y2, x1 + 3.0, y3, MFD_COLOUR1);

  02541	b8 04 00 00 00	 mov	 eax, 4
  02546	6b c8 00	 imul	 ecx, eax, 0
  02549	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0254f	52		 push	 edx
  02550	51		 push	 ecx
  02551	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  02556	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0255b	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02560	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  02568	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0256c	51		 push	 ecx
  0256d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02572	51		 push	 ecx
  02573	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02578	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0257d	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02582	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  0258a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0258e	51		 push	 ecx
  0258f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02594	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8989 : 
; 8990 : 		draw_mono_sprite (large_engine_bar_marker, x1 - 7.0, y1 + 20.0, MFD_COLOUR1);

  02599	b8 04 00 00 00	 mov	 eax, 4
  0259e	6b c8 00	 imul	 ecx, eax, 0
  025a1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  025a7	52		 push	 edx
  025a8	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  025ad	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4034000000000000
  025b5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  025b9	51		 push	 ecx
  025ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025bf	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  025c4	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401c000000000000
  025cc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  025d0	51		 push	 ecx
  025d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025d6	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  025db	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 8991 : 	}
; 8992 : 	else

  025e0	e9 cf 01 00 00	 jmp	 $LN35@draw_engin
$LN34@draw_engin:

; 8993 : 	{
; 8994 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  025e5	b8 04 00 00 00	 mov	 eax, 4
  025ea	6b c8 00	 imul	 ecx, eax, 0
  025ed	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  025f3	52		 push	 edx
  025f4	51		 push	 ecx
  025f5	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  025fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025ff	51		 push	 ecx
  02600	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02605	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0260a	51		 push	 ecx
  0260b	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02610	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02615	51		 push	 ecx
  02616	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0261b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02620	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8995 : 		draw_line (x1 + 2.0, y1, x1 + 2.0, y2, MFD_COLOUR1);

  02625	b8 04 00 00 00	 mov	 eax, 4
  0262a	6b c8 00	 imul	 ecx, eax, 0
  0262d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02633	52		 push	 edx
  02634	51		 push	 ecx
  02635	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0263a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0263f	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02644	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0264c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02650	51		 push	 ecx
  02651	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02656	51		 push	 ecx
  02657	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0265c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02661	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02666	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0266e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02672	51		 push	 ecx
  02673	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02678	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8996 : 		draw_line (x1, y1, x1 + 2.0, y1, MFD_COLOUR1);

  0267d	b8 04 00 00 00	 mov	 eax, 4
  02682	6b c8 00	 imul	 ecx, eax, 0
  02685	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0268b	52		 push	 edx
  0268c	51		 push	 ecx
  0268d	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02692	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02697	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0269c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  026a4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  026a8	51		 push	 ecx
  026a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026ae	51		 push	 ecx
  026af	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  026b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026b9	51		 push	 ecx
  026ba	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  026bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026c4	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8997 : 		draw_line (x1, y2, x1 + 2.0, y2, MFD_COLOUR1);

  026c9	b8 04 00 00 00	 mov	 eax, 4
  026ce	6b c8 00	 imul	 ecx, eax, 0
  026d1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  026d7	52		 push	 edx
  026d8	51		 push	 ecx
  026d9	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  026de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026e3	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  026e8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  026f0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  026f4	51		 push	 ecx
  026f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026fa	51		 push	 ecx
  026fb	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02700	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02705	51		 push	 ecx
  02706	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0270b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02710	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8998 : 
; 8999 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  02715	b8 04 00 00 00	 mov	 eax, 4
  0271a	6b c8 00	 imul	 ecx, eax, 0
  0271d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02723	52		 push	 edx
  02724	51		 push	 ecx
  02725	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  0272a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0272f	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02734	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0273c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02740	51		 push	 ecx
  02741	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02746	51		 push	 ecx
  02747	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0274c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02751	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02756	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0275e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02762	51		 push	 ecx
  02763	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02768	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9000 : 
; 9001 : 		draw_mono_sprite (small_engine_bar_marker, x1 - 4.0, y1 + 11.0, MFD_COLOUR1);

  0276d	b8 04 00 00 00	 mov	 eax, 4
  02772	6b c8 00	 imul	 ecx, eax, 0
  02775	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0277b	52		 push	 edx
  0277c	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  02781	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4026000000000000
  02789	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0278d	51		 push	 ecx
  0278e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02793	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02798	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4010000000000000
  027a0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  027a4	51		 push	 ecx
  027a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027aa	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  027af	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN35@draw_engin:

; 9002 : 	}
; 9003 : 
; 9004 : 	//
; 9005 : 	// engine 2 rpm
; 9006 : 	//
; 9007 : 
; 9008 : 	set_2d_mono_font_position (0.4 - 0.025, 0.85);

  027b4	51		 push	 ecx
  027b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  027bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027c2	51		 push	 ecx
  027c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec00000
  027cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027d0	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9009 : 
; 9010 : 	if (draw_large_mfd)

  027d5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  027dc	74 4d		 je	 SHORT $LN36@draw_engin

; 9011 : 	{
; 9012 : 		set_mono_font_rel_position (-6.0, -16.0);

  027de	51		 push	 ecx
  027df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1800000
  027e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027ec	51		 push	 ecx
  027ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  027f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027fa	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9013 : 
; 9014 : 		print_mono_font_char ('N');

  027ff	6a 4e		 push	 78			; 0000004eH
  02801	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 9015 : 
; 9016 : 		set_mono_font_rel_position (0.0, 2.0);

  02806	51		 push	 ecx
  02807	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0280f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02814	51		 push	 ecx
  02815	0f 57 c0	 xorps	 xmm0, xmm0
  02818	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0281d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9017 : 
; 9018 : 		print_mono_font_char ('P');

  02822	6a 50		 push	 80			; 00000050H
  02824	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 9019 : 	}
; 9020 : 	else

  02829	eb 4b		 jmp	 SHORT $LN37@draw_engin
$LN36@draw_engin:

; 9021 : 	{
; 9022 : 		set_mono_font_rel_position (-2.0, -7.0);

  0282b	51		 push	 ecx
  0282c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0e00000
  02834	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02839	51		 push	 ecx
  0283a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  02842	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02847	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9023 : 
; 9024 : 		print_mono_font_char ('N');

  0284c	6a 4e		 push	 78			; 0000004eH
  0284e	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 9025 : 
; 9026 : 		set_mono_font_rel_position (0.0, 1.0);

  02853	51		 push	 ecx
  02854	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0285c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02861	51		 push	 ecx
  02862	0f 57 c0	 xorps	 xmm0, xmm0
  02865	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0286a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9027 : 
; 9028 : 		print_mono_font_char ('P');

  0286f	6a 50		 push	 80			; 00000050H
  02871	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char
$LN37@draw_engin:

; 9029 : 	}
; 9030 : 
; 9031 : 	digital_readout = bound (current_flight_dynamics->right_engine_rpm.value, 0.0, 120.0);

  02876	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0287b	f3 0f 5a 80 dc
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7388]
  02883	0f 57 c9	 xorps	 xmm1, xmm1
  02886	66 0f 2f c8	 comisd	 xmm1, xmm0
  0288a	76 0d		 jbe	 SHORT $LN99@draw_engin
  0288c	0f 57 c0	 xorps	 xmm0, xmm0
  0288f	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv1403[ebp], xmm0
  02897	eb 50		 jmp	 SHORT $LN100@draw_engin
$LN99@draw_engin:
  02899	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0289f	f3 0f 5a 81 dc
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7388]
  028a7	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  028af	76 12		 jbe	 SHORT $LN97@draw_engin
  028b1	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  028b9	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv1402[ebp], xmm0
  028c1	eb 16		 jmp	 SHORT $LN98@draw_engin
$LN97@draw_engin:
  028c3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  028c9	f3 0f 5a 82 dc
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7388]
  028d1	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv1402[ebp], xmm0
$LN98@draw_engin:
  028d9	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1402[ebp]
  028e1	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv1403[ebp], xmm0
$LN100@draw_engin:
  028e9	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv1403[ebp]
  028f1	f3 0f 11 45 94	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 9032 : 
; 9033 : 	convert_float_to_int (digital_readout, &i);

  028f6	8d 45 ac	 lea	 eax, DWORD PTR _i$[ebp]
  028f9	50		 push	 eax
  028fa	51		 push	 ecx
  028fb	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  02900	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02905	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 9034 : 
; 9035 : 	sprintf (buffer, "%03d", i);

  0290a	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  0290d	50		 push	 eax
  0290e	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  02913	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  02916	51		 push	 ecx
  02917	e8 00 00 00 00	 call	 _sprintf
  0291c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9036 : 
; 9037 : 	set_2d_mono_font_position (0.4 - 0.05, -0.35);

  0291f	51		 push	 ecx
  02920	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  02928	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0292d	51		 push	 ecx
  0292e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  02936	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0293b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9038 : 
; 9039 : 	if (draw_large_mfd)

  02940	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02947	74 23		 je	 SHORT $LN38@draw_engin

; 9040 : 	{
; 9041 : 		set_mono_font_rel_position (-4.0, 8.0);

  02949	51		 push	 ecx
  0294a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  02952	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02957	51		 push	 ecx
  02958	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  02960	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02965	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9042 : 	}
; 9043 : 	else

  0296a	eb 21		 jmp	 SHORT $LN39@draw_engin
$LN38@draw_engin:

; 9044 : 	{
; 9045 : 		set_mono_font_rel_position (-2.0, 3.0);

  0296c	51		 push	 ecx
  0296d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  02975	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0297a	51		 push	 ecx
  0297b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  02983	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02988	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN39@draw_engin:

; 9046 : 	}
; 9047 : 
; 9048 : 	print_mono_font_string (buffer);

  0298d	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  02990	50		 push	 eax
  02991	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9049 : 
; 9050 : 	bar_value = digital_readout * 0.01;

  02996	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _digital_readout$[ebp]
  0299b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  029a3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  029a7	f3 0f 11 45 98	 movss	 DWORD PTR _bar_value$[ebp], xmm0

; 9051 : 
; 9052 : 	get_2d_float_screen_coordinates (0.4 - 0.025, 0.85, &x1, &y1);

  029ac	8d 45 a4	 lea	 eax, DWORD PTR _y1$[ebp]
  029af	50		 push	 eax
  029b0	8d 4d a8	 lea	 ecx, DWORD PTR _x1$[ebp]
  029b3	51		 push	 ecx
  029b4	51		 push	 ecx
  029b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  029bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029c2	51		 push	 ecx
  029c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec00000
  029cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029d0	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 9053 : 	get_2d_float_screen_y_coordinate (-0.35, &y2);

  029d5	8d 45 a0	 lea	 eax, DWORD PTR _y2$[ebp]
  029d8	50		 push	 eax
  029d9	51		 push	 ecx
  029da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  029e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029e7	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 9054 : 	get_2d_float_screen_y_coordinate (-0.35 + bar_value, &y3);

  029ec	8d 45 9c	 lea	 eax, DWORD PTR _y3$[ebp]
  029ef	50		 push	 eax
  029f0	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _bar_value$[ebp]
  029f5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfd6666666666666
  029fd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02a01	51		 push	 ecx
  02a02	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a07	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 9055 : 
; 9056 : 	if (draw_large_mfd)

  02a0c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02a13	0f 84 84 02 00
	00		 je	 $LN40@draw_engin

; 9057 : 	{
; 9058 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  02a19	b8 04 00 00 00	 mov	 eax, 4
  02a1e	6b c8 00	 imul	 ecx, eax, 0
  02a21	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02a27	52		 push	 edx
  02a28	51		 push	 ecx
  02a29	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02a2e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a33	51		 push	 ecx
  02a34	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02a39	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a3e	51		 push	 ecx
  02a3f	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02a44	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a49	51		 push	 ecx
  02a4a	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02a4f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a54	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9059 : 		draw_line (x1 + 4.0, y1, x1 + 4.0, y2, MFD_COLOUR1);

  02a59	b8 04 00 00 00	 mov	 eax, 4
  02a5e	6b c8 00	 imul	 ecx, eax, 0
  02a61	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02a67	52		 push	 edx
  02a68	51		 push	 ecx
  02a69	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02a6e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a73	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02a78	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  02a80	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02a84	51		 push	 ecx
  02a85	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a8a	51		 push	 ecx
  02a8b	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02a90	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a95	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02a9a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  02aa2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02aa6	51		 push	 ecx
  02aa7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02aac	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9060 : 		draw_line (x1, y1, x1 + 4.0, y1, MFD_COLOUR1);

  02ab1	b8 04 00 00 00	 mov	 eax, 4
  02ab6	6b c8 00	 imul	 ecx, eax, 0
  02ab9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02abf	52		 push	 edx
  02ac0	51		 push	 ecx
  02ac1	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02ac6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02acb	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02ad0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  02ad8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02adc	51		 push	 ecx
  02add	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ae2	51		 push	 ecx
  02ae3	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02ae8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02aed	51		 push	 ecx
  02aee	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02af3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02af8	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9061 : 		draw_line (x1, y2, x1 + 4.0, y2, MFD_COLOUR1);

  02afd	b8 04 00 00 00	 mov	 eax, 4
  02b02	6b c8 00	 imul	 ecx, eax, 0
  02b05	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02b0b	52		 push	 edx
  02b0c	51		 push	 ecx
  02b0d	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02b12	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b17	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02b1c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  02b24	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02b28	51		 push	 ecx
  02b29	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b2e	51		 push	 ecx
  02b2f	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02b34	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b39	51		 push	 ecx
  02b3a	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02b3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b44	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9062 : 
; 9063 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  02b49	b8 04 00 00 00	 mov	 eax, 4
  02b4e	6b c8 00	 imul	 ecx, eax, 0
  02b51	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02b57	52		 push	 edx
  02b58	51		 push	 ecx
  02b59	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  02b5e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b63	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02b68	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02b70	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02b74	51		 push	 ecx
  02b75	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b7a	51		 push	 ecx
  02b7b	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02b80	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b85	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02b8a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02b92	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02b96	51		 push	 ecx
  02b97	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b9c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9064 : 		draw_line (x1 + 2.0, y2, x1 + 2.0, y3, MFD_COLOUR1);

  02ba1	b8 04 00 00 00	 mov	 eax, 4
  02ba6	6b c8 00	 imul	 ecx, eax, 0
  02ba9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02baf	52		 push	 edx
  02bb0	51		 push	 ecx
  02bb1	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  02bb6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02bbb	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02bc0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02bc8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02bcc	51		 push	 ecx
  02bcd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02bd2	51		 push	 ecx
  02bd3	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02bd8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02bdd	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02be2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02bea	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02bee	51		 push	 ecx
  02bef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02bf4	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9065 : 		draw_line (x1 + 3.0, y2, x1 + 3.0, y3, MFD_COLOUR1);

  02bf9	b8 04 00 00 00	 mov	 eax, 4
  02bfe	6b c8 00	 imul	 ecx, eax, 0
  02c01	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02c07	52		 push	 edx
  02c08	51		 push	 ecx
  02c09	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  02c0e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c13	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02c18	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  02c20	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02c24	51		 push	 ecx
  02c25	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c2a	51		 push	 ecx
  02c2b	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02c30	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c35	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02c3a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  02c42	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02c46	51		 push	 ecx
  02c47	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c4c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9066 : 
; 9067 : 		draw_mono_sprite (large_engine_bar_marker, x1 - 7.0, y1 + 20.0, MFD_COLOUR1);

  02c51	b8 04 00 00 00	 mov	 eax, 4
  02c56	6b c8 00	 imul	 ecx, eax, 0
  02c59	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02c5f	52		 push	 edx
  02c60	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  02c65	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4034000000000000
  02c6d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02c71	51		 push	 ecx
  02c72	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c77	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02c7c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401c000000000000
  02c84	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02c88	51		 push	 ecx
  02c89	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c8e	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  02c93	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 9068 : 	}
; 9069 : 	else

  02c98	e9 cf 01 00 00	 jmp	 $LN41@draw_engin
$LN40@draw_engin:

; 9070 : 	{
; 9071 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  02c9d	b8 04 00 00 00	 mov	 eax, 4
  02ca2	6b c8 00	 imul	 ecx, eax, 0
  02ca5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02cab	52		 push	 edx
  02cac	51		 push	 ecx
  02cad	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02cb2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02cb7	51		 push	 ecx
  02cb8	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02cbd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02cc2	51		 push	 ecx
  02cc3	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02cc8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ccd	51		 push	 ecx
  02cce	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02cd3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02cd8	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9072 : 		draw_line (x1 + 2.0, y1, x1 + 2.0, y2, MFD_COLOUR1);

  02cdd	b8 04 00 00 00	 mov	 eax, 4
  02ce2	6b c8 00	 imul	 ecx, eax, 0
  02ce5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02ceb	52		 push	 edx
  02cec	51		 push	 ecx
  02ced	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02cf2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02cf7	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02cfc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02d04	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02d08	51		 push	 ecx
  02d09	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d0e	51		 push	 ecx
  02d0f	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02d14	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d19	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02d1e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02d26	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02d2a	51		 push	 ecx
  02d2b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d30	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9073 : 		draw_line (x1, y1, x1 + 2.0, y1, MFD_COLOUR1);

  02d35	b8 04 00 00 00	 mov	 eax, 4
  02d3a	6b c8 00	 imul	 ecx, eax, 0
  02d3d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02d43	52		 push	 edx
  02d44	51		 push	 ecx
  02d45	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02d4a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d4f	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02d54	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02d5c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02d60	51		 push	 ecx
  02d61	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d66	51		 push	 ecx
  02d67	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02d6c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d71	51		 push	 ecx
  02d72	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02d77	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d7c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9074 : 		draw_line (x1, y2, x1 + 2.0, y2, MFD_COLOUR1);

  02d81	b8 04 00 00 00	 mov	 eax, 4
  02d86	6b c8 00	 imul	 ecx, eax, 0
  02d89	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02d8f	52		 push	 edx
  02d90	51		 push	 ecx
  02d91	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02d96	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d9b	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02da0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02da8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02dac	51		 push	 ecx
  02dad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02db2	51		 push	 ecx
  02db3	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02db8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02dbd	51		 push	 ecx
  02dbe	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02dc3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02dc8	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9075 : 
; 9076 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  02dcd	b8 04 00 00 00	 mov	 eax, 4
  02dd2	6b c8 00	 imul	 ecx, eax, 0
  02dd5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02ddb	52		 push	 edx
  02ddc	51		 push	 ecx
  02ddd	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  02de2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02de7	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02dec	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02df4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02df8	51		 push	 ecx
  02df9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02dfe	51		 push	 ecx
  02dff	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02e04	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e09	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02e0e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02e16	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02e1a	51		 push	 ecx
  02e1b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e20	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9077 : 
; 9078 : 		draw_mono_sprite (small_engine_bar_marker, x1 - 4.0, y1 + 11.0, MFD_COLOUR1);

  02e25	b8 04 00 00 00	 mov	 eax, 4
  02e2a	6b c8 00	 imul	 ecx, eax, 0
  02e2d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02e33	52		 push	 edx
  02e34	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  02e39	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4026000000000000
  02e41	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02e45	51		 push	 ecx
  02e46	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e4b	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02e50	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4010000000000000
  02e58	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02e5c	51		 push	 ecx
  02e5d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e62	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  02e67	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN41@draw_engin:

; 9079 : 	}
; 9080 : 
; 9081 : 	////////////////////////////////////////
; 9082 : 	//
; 9083 : 	// fuel
; 9084 : 	//
; 9085 : 	////////////////////////////////////////
; 9086 : 
; 9087 : 	set_2d_mono_font_position (-0.8, -0.75);

  02e6c	51		 push	 ecx
  02e6d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  02e75	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e7a	51		 push	 ecx
  02e7b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  02e83	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e88	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9088 : 
; 9089 : 	if (draw_large_mfd)

  02e8d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02e94	74 23		 je	 SHORT $LN42@draw_engin

; 9090 : 	{
; 9091 : 		set_mono_font_rel_position (2.0, -16.0);

  02e96	51		 push	 ecx
  02e97	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1800000
  02e9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ea4	51		 push	 ecx
  02ea5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02ead	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02eb2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9092 : 	}
; 9093 : 	else

  02eb7	eb 1c		 jmp	 SHORT $LN43@draw_engin
$LN42@draw_engin:

; 9094 : 	{
; 9095 : 		set_mono_font_rel_position (0.0, -7.0);

  02eb9	51		 push	 ecx
  02eba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0e00000
  02ec2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ec7	51		 push	 ecx
  02ec8	0f 57 c0	 xorps	 xmm0, xmm0
  02ecb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ed0	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN43@draw_engin:

; 9096 : 	}
; 9097 : 
; 9098 : 	print_mono_font_string ("FUEL");

  02ed5	68 00 00 00 00	 push	 OFFSET ??_C@_04DICABFLJ@FUEL@
  02eda	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9099 : 
; 9100 : 	digital_readout = bound (kilograms_to_pounds (current_flight_dynamics->fuel_weight.value), 0.0, 2500.0);

  02edf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  02ee4	f3 0f 10 80 a4
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9380]
  02eec	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  02ef4	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  02ef8	0f 57 c9	 xorps	 xmm1, xmm1
  02efb	66 0f 2f c8	 comisd	 xmm1, xmm0
  02eff	76 0d		 jbe	 SHORT $LN103@draw_engin
  02f01	0f 57 c0	 xorps	 xmm0, xmm0
  02f04	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv1615[ebp], xmm0
  02f0c	eb 68		 jmp	 SHORT $LN104@draw_engin
$LN103@draw_engin:
  02f0e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  02f14	f3 0f 10 81 a4
	24 00 00	 movss	 xmm0, DWORD PTR [ecx+9380]
  02f1c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  02f24	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  02f28	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@40a3880000000000
  02f30	76 12		 jbe	 SHORT $LN101@draw_engin
  02f32	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@40a3880000000000
  02f3a	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv1614[ebp], xmm0
  02f42	eb 22		 jmp	 SHORT $LN102@draw_engin
$LN101@draw_engin:
  02f44	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  02f4a	f3 0f 10 82 a4
	24 00 00	 movss	 xmm0, DWORD PTR [edx+9380]
  02f52	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  02f5a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  02f5e	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv1614[ebp], xmm0
$LN102@draw_engin:
  02f66	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1614[ebp]
  02f6e	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv1615[ebp], xmm0
$LN104@draw_engin:
  02f76	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv1615[ebp]
  02f7e	f3 0f 11 45 94	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 9101 : 	convert_float_to_int (digital_readout, &i);

  02f83	8d 45 ac	 lea	 eax, DWORD PTR _i$[ebp]
  02f86	50		 push	 eax
  02f87	51		 push	 ecx
  02f88	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  02f8d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02f92	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 9102 : 	sprintf (buffer, "%04d lbs", i);

  02f97	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  02f9a	50		 push	 eax
  02f9b	68 00 00 00 00	 push	 OFFSET ??_C@_08GEGEOBAJ@?$CF04d?5lbs@
  02fa0	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  02fa3	51		 push	 ecx
  02fa4	e8 00 00 00 00	 call	 _sprintf
  02fa9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9103 : 
; 9104 : 	set_2d_mono_font_position (-0.8, -0.7);

  02fac	51		 push	 ecx
  02fad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  02fb5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02fba	51		 push	 ecx
  02fbb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  02fc3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02fc8	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9105 : 
; 9106 : 	if (draw_large_mfd)

  02fcd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02fd4	74 23		 je	 SHORT $LN44@draw_engin

; 9107 : 	{
; 9108 : 		set_mono_font_rel_position (-12.0, 8.0);

  02fd6	51		 push	 ecx
  02fd7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  02fdf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02fe4	51		 push	 ecx
  02fe5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  02fed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ff2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9109 : 	}
; 9110 : 	else

  02ff7	eb 21		 jmp	 SHORT $LN45@draw_engin
$LN44@draw_engin:

; 9111 : 	{
; 9112 : 		set_mono_font_rel_position (-6.0, 3.0);

  02ff9	51		 push	 ecx
  02ffa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  03002	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03007	51		 push	 ecx
  03008	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  03010	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03015	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN45@draw_engin:

; 9113 : 	}
; 9114 : 
; 9115 : 	print_mono_font_string (buffer);

  0301a	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  0301d	50		 push	 eax
  0301e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9116 : 
; 9117 : 	////////////////////////////////////////
; 9118 : 	//
; 9119 : 	// NG RPM left engine
; 9120 : 	//
; 9121 : 	////////////////////////////////////////
; 9122 : 
; 9123 : 	set_2d_mono_font_position (0.65, 0.85);

  03023	51		 push	 ecx
  03024	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  0302c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03031	51		 push	 ecx
  03032	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  0303a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0303f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9124 : 
; 9125 : 	if (draw_large_mfd)

  03044	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0304b	74 4d		 je	 SHORT $LN46@draw_engin

; 9126 : 	{
; 9127 : 		set_mono_font_rel_position (-6.0, -16.0);

  0304d	51		 push	 ecx
  0304e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1800000
  03056	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0305b	51		 push	 ecx
  0305c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  03064	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03069	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9128 : 
; 9129 : 		print_mono_font_char ('N');

  0306e	6a 4e		 push	 78			; 0000004eH
  03070	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 9130 : 
; 9131 : 		set_mono_font_rel_position (0.0, 2.0);

  03075	51		 push	 ecx
  03076	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0307e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03083	51		 push	 ecx
  03084	0f 57 c0	 xorps	 xmm0, xmm0
  03087	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0308c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9132 : 
; 9133 : 		print_mono_font_char ('G');

  03091	6a 47		 push	 71			; 00000047H
  03093	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 9134 : 	}
; 9135 : 	else

  03098	eb 4b		 jmp	 SHORT $LN47@draw_engin
$LN46@draw_engin:

; 9136 : 	{
; 9137 : 		set_mono_font_rel_position (-2.0, -7.0);

  0309a	51		 push	 ecx
  0309b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0e00000
  030a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  030a8	51		 push	 ecx
  030a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  030b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  030b6	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9138 : 
; 9139 : 		print_mono_font_char ('N');

  030bb	6a 4e		 push	 78			; 0000004eH
  030bd	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 9140 : 
; 9141 : 		set_mono_font_rel_position (0.0, 1.0);

  030c2	51		 push	 ecx
  030c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  030cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  030d0	51		 push	 ecx
  030d1	0f 57 c0	 xorps	 xmm0, xmm0
  030d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  030d9	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9142 : 
; 9143 : 		print_mono_font_char ('G');

  030de	6a 47		 push	 71			; 00000047H
  030e0	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char
$LN47@draw_engin:

; 9144 : 	}
; 9145 : 
; 9146 : 	digital_readout = bound (current_flight_dynamics->left_engine_n1_rpm.value, 0.0, 120.0);

  030e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  030ea	f3 0f 5a 80 94
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7316]
  030f2	0f 57 c9	 xorps	 xmm1, xmm1
  030f5	66 0f 2f c8	 comisd	 xmm1, xmm0
  030f9	76 0d		 jbe	 SHORT $LN107@draw_engin
  030fb	0f 57 c0	 xorps	 xmm0, xmm0
  030fe	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv1657[ebp], xmm0
  03106	eb 50		 jmp	 SHORT $LN108@draw_engin
$LN107@draw_engin:
  03108	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0310e	f3 0f 5a 81 94
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7316]
  03116	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  0311e	76 12		 jbe	 SHORT $LN105@draw_engin
  03120	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  03128	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv1656[ebp], xmm0
  03130	eb 16		 jmp	 SHORT $LN106@draw_engin
$LN105@draw_engin:
  03132	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  03138	f3 0f 5a 82 94
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7316]
  03140	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv1656[ebp], xmm0
$LN106@draw_engin:
  03148	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1656[ebp]
  03150	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv1657[ebp], xmm0
$LN108@draw_engin:
  03158	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv1657[ebp]
  03160	f3 0f 11 45 94	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 9147 : 	convert_float_to_int (digital_readout, &i);

  03165	8d 45 ac	 lea	 eax, DWORD PTR _i$[ebp]
  03168	50		 push	 eax
  03169	51		 push	 ecx
  0316a	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  0316f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03174	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 9148 : 	sprintf (buffer, "%03d", i);

  03179	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  0317c	50		 push	 eax
  0317d	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  03182	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  03185	51		 push	 ecx
  03186	e8 00 00 00 00	 call	 _sprintf
  0318b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9149 : 
; 9150 : 	set_2d_mono_font_position (0.65 - 0.05, -0.35);

  0318e	51		 push	 ecx
  0318f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  03197	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0319c	51		 push	 ecx
  0319d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  031a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  031aa	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9151 : 
; 9152 : 	if (draw_large_mfd)

  031af	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  031b6	74 23		 je	 SHORT $LN48@draw_engin

; 9153 : 		set_mono_font_rel_position (-4.0, 8.0);

  031b8	51		 push	 ecx
  031b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  031c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  031c6	51		 push	 ecx
  031c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  031cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  031d4	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9154 : 	else

  031d9	eb 21		 jmp	 SHORT $LN49@draw_engin
$LN48@draw_engin:

; 9155 : 		set_mono_font_rel_position (-2.0, 3.0);

  031db	51		 push	 ecx
  031dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  031e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  031e9	51		 push	 ecx
  031ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  031f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  031f7	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN49@draw_engin:

; 9156 : 
; 9157 : 	print_mono_font_string (buffer);

  031fc	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  031ff	50		 push	 eax
  03200	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9158 : 
; 9159 : 	bar_value = current_flight_dynamics->left_engine_n1_rpm.value * 0.01;

  03205	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0320a	f3 0f 5a 80 94
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7316]
  03212	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  0321a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0321e	f3 0f 11 45 98	 movss	 DWORD PTR _bar_value$[ebp], xmm0

; 9160 : 
; 9161 : 	get_2d_float_screen_coordinates (0.65 - 0.0125, 0.85, &x1, &y1);

  03223	8d 45 a4	 lea	 eax, DWORD PTR _y1$[ebp]
  03226	50		 push	 eax
  03227	8d 4d a8	 lea	 ecx, DWORD PTR _x1$[ebp]
  0322a	51		 push	 ecx
  0322b	51		 push	 ecx
  0322c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  03234	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03239	51		 push	 ecx
  0323a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f233333
  03242	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03247	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 9162 : 	get_2d_float_screen_y_coordinate (-0.35, &y2);

  0324c	8d 45 a0	 lea	 eax, DWORD PTR _y2$[ebp]
  0324f	50		 push	 eax
  03250	51		 push	 ecx
  03251	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  03259	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0325e	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 9163 : 	get_2d_float_screen_y_coordinate (-0.35 + bar_value, &y3);

  03263	8d 45 9c	 lea	 eax, DWORD PTR _y3$[ebp]
  03266	50		 push	 eax
  03267	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _bar_value$[ebp]
  0326c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfd6666666666666
  03274	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03278	51		 push	 ecx
  03279	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0327e	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 9164 : 
; 9165 : 	if (draw_large_mfd)

  03283	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0328a	0f 84 cb 02 00
	00		 je	 $LN50@draw_engin

; 9166 : 	{
; 9167 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  03290	b8 04 00 00 00	 mov	 eax, 4
  03295	6b c8 00	 imul	 ecx, eax, 0
  03298	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0329e	52		 push	 edx
  0329f	51		 push	 ecx
  032a0	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  032a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  032aa	51		 push	 ecx
  032ab	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  032b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  032b5	51		 push	 ecx
  032b6	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  032bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  032c0	51		 push	 ecx
  032c1	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  032c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  032cb	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9168 : 		draw_line (x1 + 4.0, y1, x1 + 4.0, y2, MFD_COLOUR1);

  032d0	b8 04 00 00 00	 mov	 eax, 4
  032d5	6b c8 00	 imul	 ecx, eax, 0
  032d8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  032de	52		 push	 edx
  032df	51		 push	 ecx
  032e0	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  032e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  032ea	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  032ef	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  032f7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  032fb	51		 push	 ecx
  032fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03301	51		 push	 ecx
  03302	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  03307	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0330c	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03311	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  03319	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0331d	51		 push	 ecx
  0331e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03323	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9169 : 		draw_line (x1, y1, x1 + 4.0, y1, MFD_COLOUR1);

  03328	b8 04 00 00 00	 mov	 eax, 4
  0332d	6b c8 00	 imul	 ecx, eax, 0
  03330	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03336	52		 push	 edx
  03337	51		 push	 ecx
  03338	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0333d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03342	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03347	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  0334f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03353	51		 push	 ecx
  03354	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03359	51		 push	 ecx
  0335a	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0335f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03364	51		 push	 ecx
  03365	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0336a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0336f	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9170 : 		draw_line (x1, y2, x1 + 4.0, y2, MFD_COLOUR1);

  03374	b8 04 00 00 00	 mov	 eax, 4
  03379	6b c8 00	 imul	 ecx, eax, 0
  0337c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03382	52		 push	 edx
  03383	51		 push	 ecx
  03384	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03389	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0338e	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03393	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  0339b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0339f	51		 push	 ecx
  033a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  033a5	51		 push	 ecx
  033a6	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  033ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  033b0	51		 push	 ecx
  033b1	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  033b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  033bb	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9171 : 
; 9172 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  033c0	b8 04 00 00 00	 mov	 eax, 4
  033c5	6b c8 00	 imul	 ecx, eax, 0
  033c8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  033ce	52		 push	 edx
  033cf	51		 push	 ecx
  033d0	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  033d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  033da	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  033df	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  033e7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  033eb	51		 push	 ecx
  033ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  033f1	51		 push	 ecx
  033f2	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  033f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  033fc	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03401	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  03409	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0340d	51		 push	 ecx
  0340e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03413	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9173 : 		draw_line (x1 + 2.0, y2, x1 + 2.0, y3, MFD_COLOUR1);

  03418	b8 04 00 00 00	 mov	 eax, 4
  0341d	6b c8 00	 imul	 ecx, eax, 0
  03420	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03426	52		 push	 edx
  03427	51		 push	 ecx
  03428	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  0342d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03432	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03437	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0343f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03443	51		 push	 ecx
  03444	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03449	51		 push	 ecx
  0344a	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0344f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03454	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03459	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  03461	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03465	51		 push	 ecx
  03466	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0346b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9174 : 		draw_line (x1 + 3.0, y2, x1 + 3.0, y3, MFD_COLOUR1);

  03470	b8 04 00 00 00	 mov	 eax, 4
  03475	6b c8 00	 imul	 ecx, eax, 0
  03478	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0347e	52		 push	 edx
  0347f	51		 push	 ecx
  03480	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  03485	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0348a	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0348f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  03497	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0349b	51		 push	 ecx
  0349c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  034a1	51		 push	 ecx
  034a2	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  034a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  034ac	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  034b1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  034b9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  034bd	51		 push	 ecx
  034be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  034c3	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9175 : 
; 9176 : 		draw_mono_sprite (large_engine_bar_marker, x1 + 5.0, y1 + 20.0, MFD_COLOUR1);

  034c8	b8 04 00 00 00	 mov	 eax, 4
  034cd	6b c8 00	 imul	 ecx, eax, 0
  034d0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  034d6	52		 push	 edx
  034d7	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  034dc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4034000000000000
  034e4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  034e8	51		 push	 ecx
  034e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  034ee	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  034f3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4014000000000000
  034fb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  034ff	51		 push	 ecx
  03500	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03505	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  0350a	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 9177 : 		draw_mono_sprite (large_engine_bar_marker, x1 + 5.0, y1 + 65.0, MFD_COLOUR1);

  0350f	b8 04 00 00 00	 mov	 eax, 4
  03514	6b c8 00	 imul	 ecx, eax, 0
  03517	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0351d	52		 push	 edx
  0351e	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  03523	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4050400000000000
  0352b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0352f	51		 push	 ecx
  03530	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03535	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0353a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4014000000000000
  03542	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03546	51		 push	 ecx
  03547	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0354c	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  03551	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 9178 : 	}
; 9179 : 	else

  03556	e9 16 02 00 00	 jmp	 $LN51@draw_engin
$LN50@draw_engin:

; 9180 : 	{
; 9181 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  0355b	b8 04 00 00 00	 mov	 eax, 4
  03560	6b c8 00	 imul	 ecx, eax, 0
  03563	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03569	52		 push	 edx
  0356a	51		 push	 ecx
  0356b	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03570	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03575	51		 push	 ecx
  03576	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0357b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03580	51		 push	 ecx
  03581	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  03586	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0358b	51		 push	 ecx
  0358c	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  03591	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03596	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9182 : 		draw_line (x1 + 2.0, y1, x1 + 2.0, y2, MFD_COLOUR1);

  0359b	b8 04 00 00 00	 mov	 eax, 4
  035a0	6b c8 00	 imul	 ecx, eax, 0
  035a3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  035a9	52		 push	 edx
  035aa	51		 push	 ecx
  035ab	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  035b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  035b5	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  035ba	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  035c2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  035c6	51		 push	 ecx
  035c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  035cc	51		 push	 ecx
  035cd	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  035d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  035d7	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  035dc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  035e4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  035e8	51		 push	 ecx
  035e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  035ee	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9183 : 		draw_line (x1, y1, x1 + 2.0, y1, MFD_COLOUR1);

  035f3	b8 04 00 00 00	 mov	 eax, 4
  035f8	6b c8 00	 imul	 ecx, eax, 0
  035fb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03601	52		 push	 edx
  03602	51		 push	 ecx
  03603	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  03608	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0360d	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03612	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0361a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0361e	51		 push	 ecx
  0361f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03624	51		 push	 ecx
  03625	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0362a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0362f	51		 push	 ecx
  03630	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  03635	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0363a	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9184 : 		draw_line (x1, y2, x1 + 2.0, y2, MFD_COLOUR1);

  0363f	b8 04 00 00 00	 mov	 eax, 4
  03644	6b c8 00	 imul	 ecx, eax, 0
  03647	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0364d	52		 push	 edx
  0364e	51		 push	 ecx
  0364f	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03654	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03659	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0365e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  03666	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0366a	51		 push	 ecx
  0366b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03670	51		 push	 ecx
  03671	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03676	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0367b	51		 push	 ecx
  0367c	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  03681	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03686	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9185 : 
; 9186 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  0368b	b8 04 00 00 00	 mov	 eax, 4
  03690	6b c8 00	 imul	 ecx, eax, 0
  03693	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03699	52		 push	 edx
  0369a	51		 push	 ecx
  0369b	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  036a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  036a5	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  036aa	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  036b2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  036b6	51		 push	 ecx
  036b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  036bc	51		 push	 ecx
  036bd	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  036c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  036c7	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  036cc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  036d4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  036d8	51		 push	 ecx
  036d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  036de	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9187 : 
; 9188 : 		draw_mono_sprite (small_engine_bar_marker, x1 + 3.0, y1 + 11.0, MFD_COLOUR1);

  036e3	b8 04 00 00 00	 mov	 eax, 4
  036e8	6b c8 00	 imul	 ecx, eax, 0
  036eb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  036f1	52		 push	 edx
  036f2	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  036f7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4026000000000000
  036ff	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03703	51		 push	 ecx
  03704	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03709	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0370e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  03716	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0371a	51		 push	 ecx
  0371b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03720	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  03725	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 9189 : 		draw_mono_sprite (small_engine_bar_marker, x1 + 3.0, y1 + 33.0, MFD_COLOUR1);

  0372a	b8 04 00 00 00	 mov	 eax, 4
  0372f	6b c8 00	 imul	 ecx, eax, 0
  03732	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03738	52		 push	 edx
  03739	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  0373e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4040800000000000
  03746	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0374a	51		 push	 ecx
  0374b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03750	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03755	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  0375d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03761	51		 push	 ecx
  03762	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03767	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  0376c	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN51@draw_engin:

; 9190 : 	}
; 9191 : 
; 9192 : 	////////////////////////////////////////
; 9193 : 	//
; 9194 : 	// NG RPM right engine
; 9195 : 	//
; 9196 : 	////////////////////////////////////////
; 9197 : 
; 9198 : 	set_2d_mono_font_position (0.85, 0.85);

  03771	51		 push	 ecx
  03772	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  0377a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0377f	51		 push	 ecx
  03780	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  03788	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0378d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9199 : 
; 9200 : 	if (draw_large_mfd)

  03792	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  03799	74 4d		 je	 SHORT $LN52@draw_engin

; 9201 : 	{
; 9202 : 		set_mono_font_rel_position (-6.0, -16.0);

  0379b	51		 push	 ecx
  0379c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1800000
  037a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  037a9	51		 push	 ecx
  037aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  037b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  037b7	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9203 : 
; 9204 : 		print_mono_font_char ('N');

  037bc	6a 4e		 push	 78			; 0000004eH
  037be	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 9205 : 
; 9206 : 		set_mono_font_rel_position (0.0, 2.0);

  037c3	51		 push	 ecx
  037c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  037cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  037d1	51		 push	 ecx
  037d2	0f 57 c0	 xorps	 xmm0, xmm0
  037d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  037da	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9207 : 
; 9208 : 		print_mono_font_char ('G');

  037df	6a 47		 push	 71			; 00000047H
  037e1	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 9209 : 	}
; 9210 : 	else

  037e6	eb 4b		 jmp	 SHORT $LN53@draw_engin
$LN52@draw_engin:

; 9211 : 	{
; 9212 : 		set_mono_font_rel_position (-2.0, -7.0);

  037e8	51		 push	 ecx
  037e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0e00000
  037f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  037f6	51		 push	 ecx
  037f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  037ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03804	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9213 : 
; 9214 : 		print_mono_font_char ('N');

  03809	6a 4e		 push	 78			; 0000004eH
  0380b	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 9215 : 
; 9216 : 		set_mono_font_rel_position (0.0, 1.0);

  03810	51		 push	 ecx
  03811	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  03819	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0381e	51		 push	 ecx
  0381f	0f 57 c0	 xorps	 xmm0, xmm0
  03822	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03827	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9217 : 
; 9218 : 		print_mono_font_char ('G');

  0382c	6a 47		 push	 71			; 00000047H
  0382e	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char
$LN53@draw_engin:

; 9219 : 	}
; 9220 : 
; 9221 : 	digital_readout = bound (current_flight_dynamics->right_engine_n1_rpm.value, 0.0, 120.0);

  03833	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  03838	f3 0f 5a 80 f4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7412]
  03840	0f 57 c9	 xorps	 xmm1, xmm1
  03843	66 0f 2f c8	 comisd	 xmm1, xmm0
  03847	76 0d		 jbe	 SHORT $LN111@draw_engin
  03849	0f 57 c0	 xorps	 xmm0, xmm0
  0384c	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv1896[ebp], xmm0
  03854	eb 50		 jmp	 SHORT $LN112@draw_engin
$LN111@draw_engin:
  03856	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0385c	f3 0f 5a 81 f4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7412]
  03864	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  0386c	76 12		 jbe	 SHORT $LN109@draw_engin
  0386e	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  03876	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv1895[ebp], xmm0
  0387e	eb 16		 jmp	 SHORT $LN110@draw_engin
$LN109@draw_engin:
  03880	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  03886	f3 0f 5a 82 f4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7412]
  0388e	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv1895[ebp], xmm0
$LN110@draw_engin:
  03896	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1895[ebp]
  0389e	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv1896[ebp], xmm0
$LN112@draw_engin:
  038a6	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv1896[ebp]
  038ae	f3 0f 11 45 94	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 9222 : 	convert_float_to_int (digital_readout, &i);

  038b3	8d 45 ac	 lea	 eax, DWORD PTR _i$[ebp]
  038b6	50		 push	 eax
  038b7	51		 push	 ecx
  038b8	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  038bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  038c2	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 9223 : 	sprintf (buffer, "%03d", i);

  038c7	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  038ca	50		 push	 eax
  038cb	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  038d0	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  038d3	51		 push	 ecx
  038d4	e8 00 00 00 00	 call	 _sprintf
  038d9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9224 : 
; 9225 : 	set_2d_mono_font_position (0.85, -0.35);

  038dc	51		 push	 ecx
  038dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  038e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  038ea	51		 push	 ecx
  038eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  038f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  038f8	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9226 : 
; 9227 : 	if (draw_large_mfd)

  038fd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  03904	74 23		 je	 SHORT $LN54@draw_engin

; 9228 : 		set_mono_font_rel_position (-4.0, 8.0);

  03906	51		 push	 ecx
  03907	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  0390f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03914	51		 push	 ecx
  03915	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  0391d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03922	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9229 : 	else

  03927	eb 21		 jmp	 SHORT $LN55@draw_engin
$LN54@draw_engin:

; 9230 : 		set_mono_font_rel_position (-2.0, 3.0);

  03929	51		 push	 ecx
  0392a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  03932	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03937	51		 push	 ecx
  03938	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  03940	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03945	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN55@draw_engin:

; 9231 : 
; 9232 : 	print_mono_font_string (buffer);

  0394a	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  0394d	50		 push	 eax
  0394e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9233 : 
; 9234 : 	bar_value = current_flight_dynamics->right_engine_n1_rpm.value * 0.01;

  03953	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  03958	f3 0f 5a 80 f4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7412]
  03960	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  03968	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0396c	f3 0f 11 45 98	 movss	 DWORD PTR _bar_value$[ebp], xmm0

; 9235 : 
; 9236 : 	get_2d_float_screen_coordinates (0.85 - 0.0125, 0.85, &x1, &y1);

  03971	8d 45 a4	 lea	 eax, DWORD PTR _y1$[ebp]
  03974	50		 push	 eax
  03975	8d 4d a8	 lea	 ecx, DWORD PTR _x1$[ebp]
  03978	51		 push	 ecx
  03979	51		 push	 ecx
  0397a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  03982	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03987	51		 push	 ecx
  03988	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f566666
  03990	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03995	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 9237 : 	get_2d_float_screen_y_coordinate (-0.35, &y2);

  0399a	8d 45 a0	 lea	 eax, DWORD PTR _y2$[ebp]
  0399d	50		 push	 eax
  0399e	51		 push	 ecx
  0399f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  039a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  039ac	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 9238 : 	get_2d_float_screen_y_coordinate (-0.35 + bar_value, &y3);

  039b1	8d 45 9c	 lea	 eax, DWORD PTR _y3$[ebp]
  039b4	50		 push	 eax
  039b5	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _bar_value$[ebp]
  039ba	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfd6666666666666
  039c2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  039c6	51		 push	 ecx
  039c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  039cc	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 9239 : 
; 9240 : 	if (draw_large_mfd)

  039d1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  039d8	0f 84 cb 02 00
	00		 je	 $LN56@draw_engin

; 9241 : 	{
; 9242 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  039de	b8 04 00 00 00	 mov	 eax, 4
  039e3	6b c8 00	 imul	 ecx, eax, 0
  039e6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  039ec	52		 push	 edx
  039ed	51		 push	 ecx
  039ee	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  039f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  039f8	51		 push	 ecx
  039f9	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  039fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03a03	51		 push	 ecx
  03a04	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  03a09	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03a0e	51		 push	 ecx
  03a0f	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  03a14	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03a19	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9243 : 		draw_line (x1 + 4.0, y1, x1 + 4.0, y2, MFD_COLOUR1);

  03a1e	b8 04 00 00 00	 mov	 eax, 4
  03a23	6b c8 00	 imul	 ecx, eax, 0
  03a26	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03a2c	52		 push	 edx
  03a2d	51		 push	 ecx
  03a2e	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03a33	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03a38	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03a3d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  03a45	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03a49	51		 push	 ecx
  03a4a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03a4f	51		 push	 ecx
  03a50	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  03a55	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03a5a	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03a5f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  03a67	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03a6b	51		 push	 ecx
  03a6c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03a71	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9244 : 		draw_line (x1, y1, x1 + 4.0, y1, MFD_COLOUR1);

  03a76	b8 04 00 00 00	 mov	 eax, 4
  03a7b	6b c8 00	 imul	 ecx, eax, 0
  03a7e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03a84	52		 push	 edx
  03a85	51		 push	 ecx
  03a86	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  03a8b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03a90	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03a95	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  03a9d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03aa1	51		 push	 ecx
  03aa2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03aa7	51		 push	 ecx
  03aa8	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  03aad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03ab2	51		 push	 ecx
  03ab3	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  03ab8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03abd	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9245 : 		draw_line (x1, y2, x1 + 4.0, y2, MFD_COLOUR1);

  03ac2	b8 04 00 00 00	 mov	 eax, 4
  03ac7	6b c8 00	 imul	 ecx, eax, 0
  03aca	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03ad0	52		 push	 edx
  03ad1	51		 push	 ecx
  03ad2	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03ad7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03adc	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03ae1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  03ae9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03aed	51		 push	 ecx
  03aee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03af3	51		 push	 ecx
  03af4	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03af9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03afe	51		 push	 ecx
  03aff	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  03b04	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03b09	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9246 : 
; 9247 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  03b0e	b8 04 00 00 00	 mov	 eax, 4
  03b13	6b c8 00	 imul	 ecx, eax, 0
  03b16	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03b1c	52		 push	 edx
  03b1d	51		 push	 ecx
  03b1e	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  03b23	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03b28	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03b2d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  03b35	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03b39	51		 push	 ecx
  03b3a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03b3f	51		 push	 ecx
  03b40	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03b45	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03b4a	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03b4f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  03b57	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03b5b	51		 push	 ecx
  03b5c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03b61	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9248 : 		draw_line (x1 + 2.0, y2, x1 + 2.0, y3, MFD_COLOUR1);

  03b66	b8 04 00 00 00	 mov	 eax, 4
  03b6b	6b c8 00	 imul	 ecx, eax, 0
  03b6e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03b74	52		 push	 edx
  03b75	51		 push	 ecx
  03b76	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  03b7b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03b80	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03b85	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  03b8d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03b91	51		 push	 ecx
  03b92	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03b97	51		 push	 ecx
  03b98	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03b9d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03ba2	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03ba7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  03baf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03bb3	51		 push	 ecx
  03bb4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03bb9	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9249 : 		draw_line (x1 + 3.0, y2, x1 + 3.0, y3, MFD_COLOUR1);

  03bbe	b8 04 00 00 00	 mov	 eax, 4
  03bc3	6b c8 00	 imul	 ecx, eax, 0
  03bc6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03bcc	52		 push	 edx
  03bcd	51		 push	 ecx
  03bce	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  03bd3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03bd8	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03bdd	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  03be5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03be9	51		 push	 ecx
  03bea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03bef	51		 push	 ecx
  03bf0	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03bf5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03bfa	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03bff	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  03c07	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03c0b	51		 push	 ecx
  03c0c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03c11	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9250 : 
; 9251 : 		draw_mono_sprite (large_engine_bar_marker, x1 - 7.0, y1 + 20.0, MFD_COLOUR1);

  03c16	b8 04 00 00 00	 mov	 eax, 4
  03c1b	6b c8 00	 imul	 ecx, eax, 0
  03c1e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03c24	52		 push	 edx
  03c25	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  03c2a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4034000000000000
  03c32	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03c36	51		 push	 ecx
  03c37	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03c3c	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03c41	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401c000000000000
  03c49	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03c4d	51		 push	 ecx
  03c4e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03c53	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  03c58	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 9252 : 		draw_mono_sprite (large_engine_bar_marker, x1 - 7.0, y1 + 65.0, MFD_COLOUR1);

  03c5d	b8 04 00 00 00	 mov	 eax, 4
  03c62	6b c8 00	 imul	 ecx, eax, 0
  03c65	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03c6b	52		 push	 edx
  03c6c	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  03c71	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4050400000000000
  03c79	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03c7d	51		 push	 ecx
  03c7e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03c83	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03c88	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401c000000000000
  03c90	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03c94	51		 push	 ecx
  03c95	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03c9a	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  03c9f	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 9253 : 
; 9254 : 	}
; 9255 : 	else

  03ca4	e9 16 02 00 00	 jmp	 $LN57@draw_engin
$LN56@draw_engin:

; 9256 : 	{
; 9257 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  03ca9	b8 04 00 00 00	 mov	 eax, 4
  03cae	6b c8 00	 imul	 ecx, eax, 0
  03cb1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03cb7	52		 push	 edx
  03cb8	51		 push	 ecx
  03cb9	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03cbe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03cc3	51		 push	 ecx
  03cc4	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  03cc9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03cce	51		 push	 ecx
  03ccf	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  03cd4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03cd9	51		 push	 ecx
  03cda	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  03cdf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03ce4	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9258 : 		draw_line (x1 + 2.0, y1, x1 + 2.0, y2, MFD_COLOUR1);

  03ce9	b8 04 00 00 00	 mov	 eax, 4
  03cee	6b c8 00	 imul	 ecx, eax, 0
  03cf1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03cf7	52		 push	 edx
  03cf8	51		 push	 ecx
  03cf9	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03cfe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03d03	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03d08	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  03d10	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03d14	51		 push	 ecx
  03d15	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03d1a	51		 push	 ecx
  03d1b	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  03d20	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03d25	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03d2a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  03d32	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03d36	51		 push	 ecx
  03d37	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03d3c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9259 : 		draw_line (x1, y1, x1 + 2.0, y1, MFD_COLOUR1);

  03d41	b8 04 00 00 00	 mov	 eax, 4
  03d46	6b c8 00	 imul	 ecx, eax, 0
  03d49	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03d4f	52		 push	 edx
  03d50	51		 push	 ecx
  03d51	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  03d56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03d5b	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03d60	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  03d68	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03d6c	51		 push	 ecx
  03d6d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03d72	51		 push	 ecx
  03d73	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  03d78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03d7d	51		 push	 ecx
  03d7e	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  03d83	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03d88	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9260 : 		draw_line (x1, y2, x1 + 2.0, y2, MFD_COLOUR1);

  03d8d	b8 04 00 00 00	 mov	 eax, 4
  03d92	6b c8 00	 imul	 ecx, eax, 0
  03d95	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03d9b	52		 push	 edx
  03d9c	51		 push	 ecx
  03d9d	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03da2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03da7	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03dac	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  03db4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03db8	51		 push	 ecx
  03db9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03dbe	51		 push	 ecx
  03dbf	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03dc4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03dc9	51		 push	 ecx
  03dca	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  03dcf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03dd4	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9261 : 
; 9262 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  03dd9	b8 04 00 00 00	 mov	 eax, 4
  03dde	6b c8 00	 imul	 ecx, eax, 0
  03de1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03de7	52		 push	 edx
  03de8	51		 push	 ecx
  03de9	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  03dee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03df3	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03df8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  03e00	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03e04	51		 push	 ecx
  03e05	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03e0a	51		 push	 ecx
  03e0b	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03e10	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03e15	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03e1a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  03e22	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03e26	51		 push	 ecx
  03e27	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03e2c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9263 : 
; 9264 : 		draw_mono_sprite (small_engine_bar_marker, x1 - 4.0, y1 + 33.0, MFD_COLOUR1);

  03e31	b8 04 00 00 00	 mov	 eax, 4
  03e36	6b c8 00	 imul	 ecx, eax, 0
  03e39	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03e3f	52		 push	 edx
  03e40	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  03e45	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4040800000000000
  03e4d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03e51	51		 push	 ecx
  03e52	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03e57	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03e5c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4010000000000000
  03e64	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03e68	51		 push	 ecx
  03e69	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03e6e	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  03e73	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 9265 : 		draw_mono_sprite (small_engine_bar_marker, x1 - 4.0, y1 + 11.0, MFD_COLOUR1);

  03e78	b8 04 00 00 00	 mov	 eax, 4
  03e7d	6b c8 00	 imul	 ecx, eax, 0
  03e80	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03e86	52		 push	 edx
  03e87	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  03e8c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4026000000000000
  03e94	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03e98	51		 push	 ecx
  03e99	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03e9e	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03ea3	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4010000000000000
  03eab	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03eaf	51		 push	 ecx
  03eb0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03eb5	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  03eba	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN57@draw_engin:

; 9266 : 	}
; 9267 : 
; 9268 : 	// hydralic pressure
; 9269 : 
; 9270 : 	set_2d_mono_font_position (-0.25, -0.75);

  03ebf	51		 push	 ecx
  03ec0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  03ec8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03ecd	51		 push	 ecx
  03ece	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  03ed6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03edb	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9271 : 
; 9272 : 	if (draw_large_mfd)

  03ee0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  03ee7	74 23		 je	 SHORT $LN58@draw_engin

; 9273 : 	{
; 9274 : 		set_mono_font_rel_position (2.0, -16.0);

  03ee9	51		 push	 ecx
  03eea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1800000
  03ef2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03ef7	51		 push	 ecx
  03ef8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  03f00	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03f05	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9275 : 	}
; 9276 : 	else

  03f0a	eb 1c		 jmp	 SHORT $LN59@draw_engin
$LN58@draw_engin:

; 9277 : 	{
; 9278 : 		set_mono_font_rel_position (0.0, -7.0);

  03f0c	51		 push	 ecx
  03f0d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0e00000
  03f15	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03f1a	51		 push	 ecx
  03f1b	0f 57 c0	 xorps	 xmm0, xmm0
  03f1e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03f23	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN59@draw_engin:

; 9279 : 	}
; 9280 : 
; 9281 : 	print_mono_font_string ("HYDR PSI");

  03f28	68 00 00 00 00	 push	 OFFSET ??_C@_08ICFKBODG@HYDR?5PSI@
  03f2d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9282 : 
; 9283 : 	digital_readout = get_hydraulic_pressure() * (300.0 + ((int)(get_gunship_entity()) & 0xff) * 0.1);

  03f32	e8 00 00 00 00	 call	 ?get_hydraulic_pressure@@YGMXZ ; get_hydraulic_pressure
  03f37	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv3746[ebp]
  03f3d	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv3746[ebp]
  03f45	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  03f4a	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  03f4f	f2 0f 2a c8	 cvtsi2sd xmm1, eax
  03f53	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fb999999999999a
  03f5b	f2 0f 58 0d 00
	00 00 00	 addsd	 xmm1, QWORD PTR __real@4072c00000000000
  03f63	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  03f67	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03f6b	f3 0f 11 45 94	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 9284 : 	convert_float_to_int (digital_readout, &i);

  03f70	8d 45 ac	 lea	 eax, DWORD PTR _i$[ebp]
  03f73	50		 push	 eax
  03f74	51		 push	 ecx
  03f75	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  03f7a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03f7f	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 9285 : 	sprintf (buffer, "%03d0 psi", i);

  03f84	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  03f87	50		 push	 eax
  03f88	68 00 00 00 00	 push	 OFFSET ??_C@_09KDIHCNHF@?$CF03d0?5psi@
  03f8d	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  03f90	51		 push	 ecx
  03f91	e8 00 00 00 00	 call	 _sprintf
  03f96	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9286 : 
; 9287 : 	set_2d_mono_font_position (-0.25, -0.7);

  03f99	51		 push	 ecx
  03f9a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  03fa2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03fa7	51		 push	 ecx
  03fa8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  03fb0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03fb5	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9288 : 
; 9289 : 	if (draw_large_mfd)

  03fba	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  03fc1	74 23		 je	 SHORT $LN60@draw_engin

; 9290 : 	{
; 9291 : 		set_mono_font_rel_position (2.0, 8.0);

  03fc3	51		 push	 ecx
  03fc4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  03fcc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03fd1	51		 push	 ecx
  03fd2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  03fda	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03fdf	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9292 : 	}
; 9293 : 	else

  03fe4	eb 1c		 jmp	 SHORT $LN61@draw_engin
$LN60@draw_engin:

; 9294 : 	{
; 9295 : 		set_mono_font_rel_position (0.0, 3.0);

  03fe6	51		 push	 ecx
  03fe7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  03fef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03ff4	51		 push	 ecx
  03ff5	0f 57 c0	 xorps	 xmm0, xmm0
  03ff8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03ffd	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN61@draw_engin:

; 9296 : 	}
; 9297 : 
; 9298 : 	print_mono_font_string (buffer);

  04002	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  04005	50		 push	 eax
  04006	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9299 : 
; 9300 : #if 0
; 9301 : 	////////////////////////////////////////
; 9302 : 	//
; 9303 : 	// Throttles
; 9304 : 	//
; 9305 : 	////////////////////////////////////////
; 9306 : 
; 9307 : 	set_2d_mono_font_position (-0.25, -0.75);
; 9308 : 
; 9309 : 	if (draw_large_mfd)
; 9310 : 	{
; 9311 : 		set_mono_font_rel_position (2.0, -16.0);
; 9312 : 	}
; 9313 : 	else
; 9314 : 	{
; 9315 : 		set_mono_font_rel_position (0.0, -7.0);
; 9316 : 	}
; 9317 : 
; 9318 : 	print_mono_font_string ("THROTTLE");
; 9319 : 
; 9320 : 	digital_readout = bound (current_flight_dynamics->left_engine_n1_rpm.max, 0.0, 110.0);
; 9321 : 	convert_float_to_int (digital_readout, &i);
; 9322 : 
; 9323 : 	if (i < 60)
; 9324 : 		sprintf(buffer2, "OFF ");
; 9325 : 	else if (i == 60)
; 9326 : 		sprintf(buffer2, "IDLE");
; 9327 : 	else if (i == 110.0)
; 9328 : 		sprintf(buffer2, "FLY ");
; 9329 : 	else
; 9330 : 		sprintf(buffer2, "%03d%%", (i-60) * 2);
; 9331 : 
; 9332 : 	set_2d_mono_font_position (0.0, -0.75);
; 9333 : 
; 9334 : 	digital_readout = bound (current_flight_dynamics->right_engine_n1_rpm.max, 0.0, 110.0);
; 9335 : 	convert_float_to_int (digital_readout, &i);
; 9336 : 
; 9337 : 	if (i< 60)
; 9338 : 		sprintf(buffer, " %s OFF ", buffer2);
; 9339 : 	else if (i == 60)
; 9340 : 		sprintf(buffer, " %s IDLE", buffer2);
; 9341 : 	else if (i == 110.0)
; 9342 : 		sprintf(buffer, " %s FLY ", buffer2);
; 9343 : 	else
; 9344 : 		sprintf(buffer, " %s %03d%%", buffer2, (i-60) * 2);
; 9345 : 
; 9346 : 	x_adjust = get_mono_font_string_width (buffer) * -0.5;
; 9347 : 	set_mono_font_rel_position (x_adjust, 0.0);
; 9348 : 	print_mono_font_string (buffer);
; 9349 : 
; 9350 : #endif
; 9351 : 
; 9352 : 	////////////////////////////////////////
; 9353 : 
; 9354 : 	set_2d_mono_font_position (0.5, -0.75);

  0400b	51		 push	 ecx
  0400c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  04014	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04019	51		 push	 ecx
  0401a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  04022	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04027	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9355 : 
; 9356 : 	if (draw_large_mfd)

  0402c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  04033	74 23		 je	 SHORT $LN62@draw_engin

; 9357 : 	{
; 9358 : 		set_mono_font_rel_position (2.0, -16.0);

  04035	51		 push	 ecx
  04036	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1800000
  0403e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04043	51		 push	 ecx
  04044	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0404c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04051	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9359 : 	}
; 9360 : 	else

  04056	eb 1c		 jmp	 SHORT $LN63@draw_engin
$LN62@draw_engin:

; 9361 : 	{
; 9362 : 		set_mono_font_rel_position (0.0, -7.0);

  04058	51		 push	 ecx
  04059	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0e00000
  04061	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04066	51		 push	 ecx
  04067	0f 57 c0	 xorps	 xmm0, xmm0
  0406a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0406f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN63@draw_engin:

; 9363 : 	}
; 9364 : 
; 9365 : 	digital_readout = bound (current_flight_dynamics->apu_rpm.value + 0.5, 0.0, 100.0);

  04074	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  04079	f3 0f 5a 80 3c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7484]
  04081	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  04089	0f 57 c9	 xorps	 xmm1, xmm1
  0408c	66 0f 2f c8	 comisd	 xmm1, xmm0
  04090	76 0d		 jbe	 SHORT $LN115@draw_engin
  04092	0f 57 c0	 xorps	 xmm0, xmm0
  04095	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv2159[ebp], xmm0
  0409d	eb 60		 jmp	 SHORT $LN116@draw_engin
$LN115@draw_engin:
  0409f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  040a5	f3 0f 5a 81 3c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7484]
  040ad	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  040b5	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4059000000000000
  040bd	76 12		 jbe	 SHORT $LN113@draw_engin
  040bf	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4059000000000000
  040c7	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv2158[ebp], xmm0
  040cf	eb 1e		 jmp	 SHORT $LN114@draw_engin
$LN113@draw_engin:
  040d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  040d7	f3 0f 5a 82 3c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7484]
  040df	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  040e7	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv2158[ebp], xmm0
$LN114@draw_engin:
  040ef	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv2158[ebp]
  040f7	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv2159[ebp], xmm0
$LN116@draw_engin:
  040ff	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv2159[ebp]
  04107	f3 0f 11 45 94	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 9366 : 	convert_float_to_int (digital_readout, &i);

  0410c	8d 45 ac	 lea	 eax, DWORD PTR _i$[ebp]
  0410f	50		 push	 eax
  04110	51		 push	 ecx
  04111	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  04116	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0411b	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 9367 : 
; 9368 : 	sprintf(buffer, "APU %03d%%", i);

  04120	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  04123	50		 push	 eax
  04124	68 00 00 00 00	 push	 OFFSET ??_C@_0L@OGFGIPGD@APU?5?$CF03d?$CF?$CF@
  04129	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0412c	51		 push	 ecx
  0412d	e8 00 00 00 00	 call	 _sprintf
  04132	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9369 : 
; 9370 : 	print_mono_font_string (buffer);

  04135	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  04138	50		 push	 eax
  04139	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9371 : }

  0413e	5f		 pop	 edi
  0413f	5e		 pop	 esi
  04140	5b		 pop	 ebx
  04141	8b e5		 mov	 esp, ebp
  04143	5d		 pop	 ebp
  04144	c3		 ret	 0
?draw_engine_display_mfd@@YGXXZ ENDP			; draw_engine_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_system_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv269 = -84						; size = 4
tv260 = -84						; size = 4
tv253 = -84						; size = 4
tv246 = -84						; size = 4
tv237 = -84						; size = 4
tv233 = -84						; size = 4
tv226 = -84						; size = 4
tv217 = -84						; size = 4
tv208 = -84						; size = 4
tv199 = -84						; size = 4
tv190 = -84						; size = 4
_sec_dmg$1 = -16					; size = 4
_pri_dmg$2 = -12					; size = 4
_failure_msg$3 = -8					; size = 4
_y_adjust$ = -4						; size = 4
?draw_system_display_mfd@@YGXXZ PROC			; draw_system_display_mfd, COMDAT

; 8460 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8461 : 	float
; 8462 : 		y_adjust;
; 8463 : 
; 8464 : 	set_mono_font_colour (MFD_COLOUR1);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00017	52		 push	 edx
  00018	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8465 : 
; 8466 : 	if (draw_large_mfd)

  0001d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00024	74 16		 je	 SHORT $LN2@draw_syste

; 8467 : 	{
; 8468 : 		set_mono_font_type (MONO_FONT_TYPE_6X10);

  00026	6a 04		 push	 4
  00028	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 8469 : 
; 8470 : 		y_adjust = 2.0;

  0002d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00035	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 8471 : 	}
; 8472 : 	else

  0003a	eb 14		 jmp	 SHORT $LN3@draw_syste
$LN2@draw_syste:

; 8473 : 	{
; 8474 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  0003c	6a 00		 push	 0
  0003e	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 8475 : 
; 8476 : 		y_adjust = -2.0;

  00043	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  0004b	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN3@draw_syste:

; 8477 : 	}
; 8478 : 
; 8479 : 	y_adjust = print_system_message ("RADAR", "FAIL", apache_damage.radar, y_adjust);

  00050	51		 push	 ecx
  00051	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00056	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  00060	83 e0 01	 and	 eax, 1
  00063	50		 push	 eax
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_05IHELJBBC@RADAR@
  0006e	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  00073	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8480 : 
; 8481 : 	y_adjust = print_system_message ("FLIR", "FAIL", apache_damage.flir, y_adjust);

  00076	51		 push	 ecx
  00077	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0007c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00081	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  00086	c1 e8 02	 shr	 eax, 2
  00089	83 e0 01	 and	 eax, 1
  0008c	50		 push	 eax
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_04MIGKMLBH@FLIR@
  00097	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  0009c	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8482 : 
; 8483 : 	y_adjust = print_system_message ("DTV", "FAIL", apache_damage.dtv, y_adjust);

  0009f	51		 push	 ecx
  000a0	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  000af	c1 e8 03	 shr	 eax, 3
  000b2	83 e0 01	 and	 eax, 1
  000b5	50		 push	 eax
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_03ENJJJDDH@DTV@
  000c0	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  000c5	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8484 : 
; 8485 : 	y_adjust = print_system_message ("DVO", "FAIL", apache_damage.dvo, y_adjust);

  000c8	51		 push	 ecx
  000c9	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  000d8	c1 e8 04	 shr	 eax, 4
  000db	83 e0 01	 and	 eax, 1
  000de	50		 push	 eax
  000df	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_03NFBNOOEB@DVO@
  000e9	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  000ee	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8486 : 
; 8487 : 	y_adjust = print_system_message ("LASER DESIGNATOR", "FAIL", apache_damage.laser_designator, y_adjust);

  000f1	51		 push	 ecx
  000f2	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  00101	c1 e8 06	 shr	 eax, 6
  00104	83 e0 01	 and	 eax, 1
  00107	50		 push	 eax
  00108	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  0010d	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@
  00112	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  00117	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8488 : 
; 8489 : 	y_adjust = print_system_message ("RADAR JAMMER", "FAIL", apache_damage.radar_jammer, y_adjust);

  0011a	51		 push	 ecx
  0011b	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00120	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00125	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  0012a	c1 e8 07	 shr	 eax, 7
  0012d	83 e0 01	 and	 eax, 1
  00130	50		 push	 eax
  00131	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00136	68 00 00 00 00	 push	 OFFSET ??_C@_0N@JDBOFCJG@RADAR?5JAMMER@
  0013b	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  00140	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8490 : 
; 8491 : 	y_adjust = print_system_message ("IR JAMMER", "FAIL", apache_damage.infra_red_jammer, y_adjust);

  00143	51		 push	 ecx
  00144	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00149	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  00153	c1 e8 08	 shr	 eax, 8
  00156	83 e0 01	 and	 eax, 1
  00159	50		 push	 eax
  0015a	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  0015f	68 00 00 00 00	 push	 OFFSET ??_C@_09MILGCPFO@IR?5JAMMER@
  00164	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  00169	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8492 : 
; 8493 : 	y_adjust = print_system_message ("NAVIGATION COMPUTER", "FAIL", apache_damage.navigation_computer, y_adjust);

  0016c	51		 push	 ecx
  0016d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00172	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00177	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  0017c	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  0017f	83 e0 01	 and	 eax, 1
  00182	50		 push	 eax
  00183	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00188	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@
  0018d	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  00192	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8494 : 
; 8495 : 	y_adjust = print_system_message ("COMMUNICATIONS", "FAIL", apache_damage.communications, y_adjust);

  00195	51		 push	 ecx
  00196	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0019b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  001a5	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  001a8	83 e0 01	 and	 eax, 1
  001ab	50		 push	 eax
  001ac	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  001b1	68 00 00 00 00	 push	 OFFSET ??_C@_0P@OEDGDHNF@COMMUNICATIONS@
  001b6	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  001bb	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8496 : 
; 8497 : 	y_adjust = print_system_message ("RADAR WARNING SYSTEM", "FAIL", apache_damage.radar_warning_system, y_adjust);

  001be	51		 push	 ecx
  001bf	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  001c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  001ce	c1 e8 0d	 shr	 eax, 13			; 0000000dH
  001d1	83 e0 01	 and	 eax, 1
  001d4	50		 push	 eax
  001d5	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  001da	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@
  001df	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  001e4	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8498 : 
; 8499 : 	y_adjust = print_system_message ("IHADSS", "FAIL", apache_damage.ihadss, y_adjust);

  001e7	51		 push	 ecx
  001e8	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  001ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  001f7	c1 e8 0e	 shr	 eax, 14			; 0000000eH
  001fa	83 e0 01	 and	 eax, 1
  001fd	50		 push	 eax
  001fe	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00203	68 00 00 00 00	 push	 OFFSET ??_C@_06NOICLIMH@IHADSS@
  00208	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  0020d	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8500 : 
; 8501 : 	y_adjust = print_system_message ("PNVS", "FAIL", apache_damage.pnvs, y_adjust);

  00210	51		 push	 ecx
  00211	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00216	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  00220	c1 e8 12	 shr	 eax, 18			; 00000012H
  00223	83 e0 01	 and	 eax, 1
  00226	50		 push	 eax
  00227	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  0022c	68 00 00 00 00	 push	 OFFSET ??_C@_04IDKCLELC@PNVS@
  00231	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  00236	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8502 : 
; 8503 : 	y_adjust = print_system_message ("STABILISER", "FAIL", get_dynamics_damage_type (DYNAMICS_DAMAGE_STABILISER), y_adjust);

  00239	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0023e	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00244	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  0024a	74 09		 je	 SHORT $LN14@draw_syste
  0024c	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv190[ebp], 1
  00253	eb 07		 jmp	 SHORT $LN15@draw_syste
$LN14@draw_syste:
  00255	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv190[ebp], 0
$LN15@draw_syste:
  0025c	51		 push	 ecx
  0025d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00262	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00267	8b 55 ac	 mov	 edx, DWORD PTR tv190[ebp]
  0026a	52		 push	 edx
  0026b	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00270	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LMAEBBOE@STABILISER@
  00275	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  0027a	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8504 : 
; 8505 : 	y_adjust = print_system_message ("MAIN ROTOR", "FAIL", get_dynamics_damage_type (DYNAMICS_DAMAGE_MAIN_ROTOR), y_adjust);

  0027d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00282	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00288	83 e1 02	 and	 ecx, 2
  0028b	74 09		 je	 SHORT $LN16@draw_syste
  0028d	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv199[ebp], 1
  00294	eb 07		 jmp	 SHORT $LN17@draw_syste
$LN16@draw_syste:
  00296	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv199[ebp], 0
$LN17@draw_syste:
  0029d	51		 push	 ecx
  0029e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a8	8b 55 ac	 mov	 edx, DWORD PTR tv199[ebp]
  002ab	52		 push	 edx
  002ac	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  002b1	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FFIGCBMA@MAIN?5ROTOR@
  002b6	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  002bb	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8506 : 
; 8507 : 	y_adjust = print_system_message ("TAIL ROTOR", "DAMAGED", get_dynamics_damage_type (DYNAMICS_DAMAGE_TAIL_ROTOR), y_adjust);

  002be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002c3	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  002c9	83 e1 04	 and	 ecx, 4
  002cc	74 09		 je	 SHORT $LN18@draw_syste
  002ce	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv208[ebp], 1
  002d5	eb 07		 jmp	 SHORT $LN19@draw_syste
$LN18@draw_syste:
  002d7	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv208[ebp], 0
$LN19@draw_syste:
  002de	51		 push	 ecx
  002df	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e9	8b 55 ac	 mov	 edx, DWORD PTR tv208[ebp]
  002ec	52		 push	 edx
  002ed	68 00 00 00 00	 push	 OFFSET ??_C@_07OHKEFPKJ@DAMAGED@
  002f2	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MCBINMPD@TAIL?5ROTOR@
  002f7	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  002fc	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8508 : 
; 8509 : 	y_adjust = print_system_message ("ENGINE 1", "DAMAGED", get_dynamics_damage_type (DYNAMICS_DAMAGE_LEFT_ENGINE), y_adjust);

  002ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00304	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  0030a	83 e1 08	 and	 ecx, 8
  0030d	74 09		 je	 SHORT $LN20@draw_syste
  0030f	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv217[ebp], 1
  00316	eb 07		 jmp	 SHORT $LN21@draw_syste
$LN20@draw_syste:
  00318	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv217[ebp], 0
$LN21@draw_syste:
  0031f	51		 push	 ecx
  00320	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00325	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032a	8b 55 ac	 mov	 edx, DWORD PTR tv217[ebp]
  0032d	52		 push	 edx
  0032e	68 00 00 00 00	 push	 OFFSET ??_C@_07OHKEFPKJ@DAMAGED@
  00333	68 00 00 00 00	 push	 OFFSET ??_C@_08KNAGGCOA@ENGINE?51@
  00338	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  0033d	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8510 : 
; 8511 : 	y_adjust = print_system_message ("ENGINE 2", "DAMAGED", get_dynamics_damage_type (DYNAMICS_DAMAGE_RIGHT_ENGINE), y_adjust);

  00340	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00345	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  0034b	83 e1 10	 and	 ecx, 16			; 00000010H
  0034e	74 09		 je	 SHORT $LN22@draw_syste
  00350	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv226[ebp], 1
  00357	eb 07		 jmp	 SHORT $LN23@draw_syste
$LN22@draw_syste:
  00359	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv226[ebp], 0
$LN23@draw_syste:
  00360	51		 push	 ecx
  00361	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00366	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036b	8b 55 ac	 mov	 edx, DWORD PTR tv226[ebp]
  0036e	52		 push	 edx
  0036f	68 00 00 00 00	 push	 OFFSET ??_C@_07OHKEFPKJ@DAMAGED@
  00374	68 00 00 00 00	 push	 OFFSET ??_C@_08IGCLDBCD@ENGINE?52@
  00379	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  0037e	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8512 : 
; 8513 : 	{
; 8514 : 		char* failure_msg = "";

  00381	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _failure_msg$3[ebp], OFFSET ??_C@_00CNPNBAHC@@

; 8515 : 		int
; 8516 : 			pri_dmg = get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_HYDRAULICS),

  00388	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0038d	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00393	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  00399	74 09		 je	 SHORT $LN24@draw_syste
  0039b	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv233[ebp], 1
  003a2	eb 07		 jmp	 SHORT $LN25@draw_syste
$LN24@draw_syste:
  003a4	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv233[ebp], 0
$LN25@draw_syste:
  003ab	8b 55 ac	 mov	 edx, DWORD PTR tv233[ebp]
  003ae	89 55 f4	 mov	 DWORD PTR _pri_dmg$2[ebp], edx

; 8517 : 			sec_dmg = get_dynamics_damage_type (DYNAMICS_DAMAGE_SECONDARY_HYDRAULICS);

  003b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  003b6	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  003bc	81 e1 00 00 02
	00		 and	 ecx, 131072		; 00020000H
  003c2	74 09		 je	 SHORT $LN26@draw_syste
  003c4	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv237[ebp], 1
  003cb	eb 07		 jmp	 SHORT $LN27@draw_syste
$LN26@draw_syste:
  003cd	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv237[ebp], 0
$LN27@draw_syste:
  003d4	8b 55 ac	 mov	 edx, DWORD PTR tv237[ebp]
  003d7	89 55 f0	 mov	 DWORD PTR _sec_dmg$1[ebp], edx

; 8518 : 
; 8519 : 		if (pri_dmg && sec_dmg)

  003da	83 7d f4 00	 cmp	 DWORD PTR _pri_dmg$2[ebp], 0
  003de	74 0f		 je	 SHORT $LN4@draw_syste
  003e0	83 7d f0 00	 cmp	 DWORD PTR _sec_dmg$1[ebp], 0
  003e4	74 09		 je	 SHORT $LN4@draw_syste

; 8520 : 			failure_msg = "FAILURE";

  003e6	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _failure_msg$3[ebp], OFFSET ??_C@_07DMOCMFND@FAILURE@
  003ed	eb 1c		 jmp	 SHORT $LN8@draw_syste
$LN4@draw_syste:

; 8521 : 		else if (pri_dmg)

  003ef	83 7d f4 00	 cmp	 DWORD PTR _pri_dmg$2[ebp], 0
  003f3	74 09		 je	 SHORT $LN6@draw_syste

; 8522 : 			failure_msg = "PRI LOW";

  003f5	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _failure_msg$3[ebp], OFFSET ??_C@_07MNNJLJIF@PRI?5LOW@
  003fc	eb 0d		 jmp	 SHORT $LN8@draw_syste
$LN6@draw_syste:

; 8523 : 		else if (sec_dmg)

  003fe	83 7d f0 00	 cmp	 DWORD PTR _sec_dmg$1[ebp], 0
  00402	74 07		 je	 SHORT $LN8@draw_syste

; 8524 : 			failure_msg = "SEC FAIL";

  00404	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _failure_msg$3[ebp], OFFSET ??_C@_08JGIHBEEO@SEC?5FAIL@
$LN8@draw_syste:

; 8525 : 
; 8526 : 		y_adjust = print_system_message ("HYDRAULICS", failure_msg, pri_dmg || sec_dmg, y_adjust);

  0040b	83 7d f4 00	 cmp	 DWORD PTR _pri_dmg$2[ebp], 0
  0040f	75 0f		 jne	 SHORT $LN28@draw_syste
  00411	83 7d f0 00	 cmp	 DWORD PTR _sec_dmg$1[ebp], 0
  00415	75 09		 jne	 SHORT $LN28@draw_syste
  00417	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv246[ebp], 0
  0041e	eb 07		 jmp	 SHORT $LN29@draw_syste
$LN28@draw_syste:
  00420	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv246[ebp], 1
$LN29@draw_syste:
  00427	51		 push	 ecx
  00428	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0042d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00432	8b 45 ac	 mov	 eax, DWORD PTR tv246[ebp]
  00435	50		 push	 eax
  00436	8b 4d f8	 mov	 ecx, DWORD PTR _failure_msg$3[ebp]
  00439	51		 push	 ecx
  0043a	68 00 00 00 00	 push	 OFFSET ??_C@_0L@POFMFPD@HYDRAULICS@
  0043f	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  00444	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8527 : 	}
; 8528 : 
; 8529 : 	if (get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_OIL_PRESSURE))

  00447	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0044c	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00452	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  00458	74 09		 je	 SHORT $LN30@draw_syste
  0045a	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv253[ebp], 1
  00461	eb 07		 jmp	 SHORT $LN31@draw_syste
$LN30@draw_syste:
  00463	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv253[ebp], 0
$LN31@draw_syste:
  0046a	83 7d ac 00	 cmp	 DWORD PTR tv253[ebp], 0
  0046e	74 46		 je	 SHORT $LN9@draw_syste

; 8530 : 	{
; 8531 : 		y_adjust = print_system_message ("OIL PRESSURE", "LOW", get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_OIL_PRESSURE), y_adjust);

  00470	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00475	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  0047b	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  00481	74 09		 je	 SHORT $LN32@draw_syste
  00483	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv260[ebp], 1
  0048a	eb 07		 jmp	 SHORT $LN33@draw_syste
$LN32@draw_syste:
  0048c	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv260[ebp], 0
$LN33@draw_syste:
  00493	51		 push	 ecx
  00494	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00499	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0049e	8b 55 ac	 mov	 edx, DWORD PTR tv260[ebp]
  004a1	52		 push	 edx
  004a2	68 00 00 00 00	 push	 OFFSET ??_C@_03IBEFMGAI@LOW@
  004a7	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MMJNGGCF@OIL?5PRESSURE@
  004ac	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  004b1	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8532 : 	}
; 8533 : 	else

  004b4	eb 44		 jmp	 SHORT $LN10@draw_syste
$LN9@draw_syste:

; 8534 : 	{
; 8535 : 		y_adjust = print_system_message ("OIL PRESSURE", "HIGH", get_dynamics_damage_type (DYNAMICS_DAMAGE_HIGH_OIL_PRESSURE), y_adjust);

  004b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  004bb	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  004c1	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  004c7	74 09		 je	 SHORT $LN34@draw_syste
  004c9	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv269[ebp], 1
  004d0	eb 07		 jmp	 SHORT $LN35@draw_syste
$LN34@draw_syste:
  004d2	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv269[ebp], 0
$LN35@draw_syste:
  004d9	51		 push	 ecx
  004da	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  004df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e4	8b 55 ac	 mov	 edx, DWORD PTR tv269[ebp]
  004e7	52		 push	 edx
  004e8	68 00 00 00 00	 push	 OFFSET ??_C@_04PKDHFCJF@HIGH@
  004ed	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MMJNGGCF@OIL?5PRESSURE@
  004f2	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  004f7	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]
$LN10@draw_syste:

; 8536 : 	}
; 8537 : 
; 8538 : 	//
; 8539 : 	// fire extinguisher
; 8540 : 	//
; 8541 : 
; 8542 : 	if (draw_large_mfd)

  004fa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00501	74 14		 je	 SHORT $LN11@draw_syste

; 8543 : 	{
; 8544 : 		y_adjust += 14;

  00503	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00508	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41600000
  00510	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 8545 : 	}
; 8546 : 	else

  00515	eb 12		 jmp	 SHORT $LN12@draw_syste
$LN11@draw_syste:

; 8547 : 	{
; 8548 : 		y_adjust += 3;

  00517	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0051c	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40400000
  00524	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN12@draw_syste:

; 8549 : 	}
; 8550 : 
; 8551 : 	y_adjust = print_system_message ("FIRE EXTINGUISHER", "USED", fire_extinguisher_used, y_adjust);

  00529	51		 push	 ecx
  0052a	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0052f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00534	a1 00 00 00 00	 mov	 eax, DWORD PTR ?fire_extinguisher_used@@3HA ; fire_extinguisher_used
  00539	50		 push	 eax
  0053a	68 00 00 00 00	 push	 OFFSET ??_C@_04PCNCCNDP@USED@
  0053f	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OIGEPKDA@FIRE?5EXTINGUISHER@
  00544	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  00549	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8552 : }

  0054c	5f		 pop	 edi
  0054d	5e		 pop	 esi
  0054e	5b		 pop	 ebx
  0054f	8b e5		 mov	 esp, ebp
  00551	5d		 pop	 ebp
  00552	c3		 ret	 0
?draw_system_display_mfd@@YGXXZ ENDP			; draw_system_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?print_system_message@@YGMPAD0HM@Z
_TEXT	SEGMENT
tv152 = -76						; size = 4
_width$ = -8						; size = 4
_status$ = -4						; size = 4
_equipment$ = 8						; size = 4
_warning$ = 12						; size = 4
_fail$ = 16						; size = 4
_y_adjust$ = 20						; size = 4
?print_system_message@@YGMPAD0HM@Z PROC			; print_system_message, COMDAT

; 8411 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8412 : 	char
; 8413 : 		*status;
; 8414 : 
; 8415 : 	float
; 8416 : 		width;
; 8417 : 
; 8418 : 	ASSERT (equipment);

  00009	83 7d 08 00	 cmp	 DWORD PTR _equipment$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@print_syst
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_system_message@@YGMPAD0HM@Z@4JA
  00014	83 c0 07	 add	 eax, 7
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_09FJJPPKDN@equipment@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@print_syst:

; 8419 : 
; 8420 : 	ASSERT (warning);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _warning$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@print_syst
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_system_message@@YGMPAD0HM@Z@4JA
  00032	83 c0 09	 add	 eax, 9
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_07FPLKDJGL@warning@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@print_syst:

; 8421 : 
; 8422 : 	set_2d_mono_font_position (-0.8, 0.90);

  00045	51		 push	 ecx
  00046	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0004e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00053	51		 push	 ecx
  00054	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0005c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00061	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8423 : 
; 8424 : 	set_mono_font_rel_position (1.0, y_adjust);

  00066	51		 push	 ecx
  00067	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	51		 push	 ecx
  00072	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0007a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8425 : 
; 8426 : 	print_mono_font_string (equipment);

  00084	8b 45 08	 mov	 eax, DWORD PTR _equipment$[ebp]
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8427 : 
; 8428 : 	if (fail)

  0008d	83 7d 10 00	 cmp	 DWORD PTR _fail$[ebp], 0
  00091	74 08		 je	 SHORT $LN4@print_syst

; 8429 : 	{
; 8430 : 		status = warning;

  00093	8b 45 0c	 mov	 eax, DWORD PTR _warning$[ebp]
  00096	89 45 fc	 mov	 DWORD PTR _status$[ebp], eax

; 8431 : 	}
; 8432 : 	else

  00099	eb 07		 jmp	 SHORT $LN5@print_syst
$LN4@print_syst:

; 8433 : 	{
; 8434 : 		status = "OK";

  0009b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _status$[ebp], OFFSET ??_C@_02GIPFHKNO@OK@
$LN5@print_syst:

; 8435 : 	}
; 8436 : 
; 8437 : 	width = get_mono_font_string_width (status);

  000a2	8b 45 fc	 mov	 eax, DWORD PTR _status$[ebp]
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  000ab	d9 5d f8	 fstp	 DWORD PTR _width$[ebp]

; 8438 : 
; 8439 : 	set_2d_mono_font_position (0.8, 0.90);

  000ae	51		 push	 ecx
  000af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  000b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bc	51		 push	 ecx
  000bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  000c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ca	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8440 : 
; 8441 : 	set_mono_font_rel_position (-width, y_adjust);

  000cf	51		 push	 ecx
  000d0	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000da	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width$[ebp]
  000df	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000e6	51		 push	 ecx
  000e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ec	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8442 : 
; 8443 : 	print_mono_font_string (status);

  000f1	8b 45 fc	 mov	 eax, DWORD PTR _status$[ebp]
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8444 : 
; 8445 : 	y_adjust += get_mono_font_char_height ('X');

  000fa	6a 58		 push	 88			; 00000058H
  000fc	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  00101	d9 5d b4	 fstp	 DWORD PTR tv152[ebp]
  00104	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR tv152[ebp]
  00109	f3 0f 58 45 14	 addss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0010e	f3 0f 11 45 14	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 8446 : 
; 8447 : 	if (draw_large_mfd)

  00113	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0011a	74 12		 je	 SHORT $LN6@print_syst

; 8448 : 	{
; 8449 : 		y_adjust += 2;

  0011c	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00121	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40000000
  00129	f3 0f 11 45 14	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN6@print_syst:

; 8450 : 	}
; 8451 : 
; 8452 : 	return (y_adjust);

  0012e	d9 45 14	 fld	 DWORD PTR _y_adjust$[ebp]

; 8453 : }

  00131	5f		 pop	 edi
  00132	5e		 pop	 esi
  00133	5b		 pop	 ebx
  00134	8b e5		 mov	 esp, ebp
  00136	5d		 pop	 ebp
  00137	c2 10 00	 ret	 16			; 00000010H
?print_system_message@@YGMPAD0HM@Z ENDP			; print_system_message
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z
_TEXT	SEGMENT
tv84 = -168						; size = 4
tv140 = -164						; size = 4
tv78 = -164						; size = 4
tv132 = -160						; size = 4
tv71 = -160						; size = 4
_u$ = -92						; size = 4
_selected_weapon$ = -88					; size = 4
_en$ = -84						; size = 4
_buffer$ = -80						; size = 80
_location$ = 8						; size = 4
_draw_on_texture$ = 12					; size = 4
?draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z PROC	; draw_weapon_display_mfd, COMDAT

; 8126 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 8127 : 	char
; 8128 : 		buffer[80];
; 8129 : 
; 8130 : 	entity
; 8131 : 		*en;
; 8132 : 
; 8133 : 	entity_sub_types
; 8134 : 		selected_weapon;
; 8135 : 
; 8136 : 	float
; 8137 : 		u;
; 8138 : 
; 8139 : 	if (draw_large_mfd)

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00013	74 0e		 je	 SHORT $LN4@draw_weapo

; 8140 : 	{
; 8141 : 		draw_large_weapon_display_mfd (location);

  00015	8b 45 08	 mov	 eax, DWORD PTR _location$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z ; draw_large_weapon_display_mfd

; 8142 : 
; 8143 : 		return;

  0001e	e9 33 06 00 00	 jmp	 $LN1@draw_weapo
$LN4@draw_weapo:

; 8144 : 	}
; 8145 : 
; 8146 : 	////////////////////////////////////////
; 8147 : 	//
; 8148 : 	// select cockpit graphics wrt time of day - required here for hi-res virtual cockpits
; 8149 : 	//
; 8150 : 
; 8151 : 	switch (get_local_entity_int_value (get_session_entity (), INT_TYPE_DAY_SEGMENT_TYPE))

  00023	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  0002a	74 0f		 je	 SHORT $LN34@draw_weapo
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  00031	8b 08		 mov	 ecx, DWORD PTR [eax]
  00033	89 8d 60 ff ff
	ff		 mov	 DWORD PTR tv71[ebp], ecx
  00039	eb 20		 jmp	 SHORT $LN35@draw_weapo
$LN34@draw_weapo:
  0003b	68 d7 1f 00 00	 push	 8151			; 00001fd7H
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00045	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0004b	52		 push	 edx
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00051	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv71[ebp], 0
$LN35@draw_weapo:
  0005b	b8 01 00 00 00	 mov	 eax, 1
  00060	85 c0		 test	 eax, eax
  00062	74 0c		 je	 SHORT $LN36@draw_weapo
  00064	c7 85 5c ff ff
	ff 27 00 00 00	 mov	 DWORD PTR tv78[ebp], 39	; 00000027H
  0006e	eb 20		 jmp	 SHORT $LN37@draw_weapo
$LN36@draw_weapo:
  00070	68 d7 1f 00 00	 push	 8151			; 00001fd7H
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0007a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00086	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN37@draw_weapo:
  00090	6a 27		 push	 39			; 00000027H
  00092	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  00098	52		 push	 edx
  00099	69 85 60 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv71[ebp], 1116
  000a3	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR tv78[ebp]
  000a9	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  000b0	ff d2		 call	 edx
  000b2	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv84[ebp], eax
  000b8	83 bd 58 ff ff
	ff 03		 cmp	 DWORD PTR tv84[ebp], 3
  000bf	77 3b		 ja	 SHORT $LN2@draw_weapo
  000c1	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR tv84[ebp]
  000c7	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN42@draw_weapo[eax*4]
$LN5@draw_weapo:

; 8152 : 	{
; 8153 : 		case DAY_SEGMENT_TYPE_DAWN:
; 8154 : 		{
; 8155 : 			base_cockpit_graphics_file = GRAPHICS_COCKPITS_APACHE_LEVEL2_BASE;

  000ce	c7 05 00 00 00
	00 5c 00 00 00	 mov	 DWORD PTR ?base_cockpit_graphics_file@@3W4GRAPHICS_FILE_SPECIFIERS@@A, 92 ; base_cockpit_graphics_file, 0000005cH

; 8156 : 
; 8157 : 			break;

  000d8	eb 22		 jmp	 SHORT $LN2@draw_weapo
$LN6@draw_weapo:

; 8158 : 		}
; 8159 : 		case DAY_SEGMENT_TYPE_DAY:
; 8160 : 		{
; 8161 : 			base_cockpit_graphics_file = GRAPHICS_COCKPITS_APACHE_LEVEL1_BASE;

  000da	c7 05 00 00 00
	00 2d 00 00 00	 mov	 DWORD PTR ?base_cockpit_graphics_file@@3W4GRAPHICS_FILE_SPECIFIERS@@A, 45 ; base_cockpit_graphics_file, 0000002dH

; 8162 : 
; 8163 : 			break;

  000e4	eb 16		 jmp	 SHORT $LN2@draw_weapo
$LN7@draw_weapo:

; 8164 : 		}
; 8165 : 		case DAY_SEGMENT_TYPE_DUSK:
; 8166 : 		{
; 8167 : 			base_cockpit_graphics_file = GRAPHICS_COCKPITS_APACHE_LEVEL2_BASE;

  000e6	c7 05 00 00 00
	00 5c 00 00 00	 mov	 DWORD PTR ?base_cockpit_graphics_file@@3W4GRAPHICS_FILE_SPECIFIERS@@A, 92 ; base_cockpit_graphics_file, 0000005cH

; 8168 : 
; 8169 : 			break;

  000f0	eb 0a		 jmp	 SHORT $LN2@draw_weapo
$LN8@draw_weapo:

; 8170 : 		}
; 8171 : 		case DAY_SEGMENT_TYPE_NIGHT:
; 8172 : 		{
; 8173 : 			base_cockpit_graphics_file = GRAPHICS_COCKPITS_APACHE_LEVEL3_BASE;

  000f2	c7 05 00 00 00
	00 8b 00 00 00	 mov	 DWORD PTR ?base_cockpit_graphics_file@@3W4GRAPHICS_FILE_SPECIFIERS@@A, 139 ; base_cockpit_graphics_file, 0000008bH
$LN2@draw_weapo:

; 8174 : 
; 8175 : 			break;
; 8176 : 		}
; 8177 : 	}
; 8178 : 
; 8179 : 	#if DEMO_VERSION
; 8180 : 
; 8181 : 	base_cockpit_graphics_file = GRAPHICS_COCKPITS_APACHE_LEVEL1_BASE;
; 8182 : 
; 8183 : 	#endif
; 8184 : 
; 8185 : 	//
; 8186 : 	////////////////////////////////////////
; 8187 : 
; 8188 : 	weapon_draw_on_texture = draw_on_texture;

  000fc	8b 45 0c	 mov	 eax, DWORD PTR _draw_on_texture$[ebp]
  000ff	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_draw_on_texture@@3HA, eax

; 8189 : 
; 8190 : 	weapon_sprite_data = get_graphics_file_data (base_cockpit_graphics_file + GRAPHICS_COCKPITS_APACHE_WEAPONS_MFD_SPRITES);

  00104	a1 00 00 00 00	 mov	 eax, DWORD PTR ?base_cockpit_graphics_file@@3W4GRAPHICS_FILE_SPECIFIERS@@A ; base_cockpit_graphics_file
  00109	83 c0 2d	 add	 eax, 45			; 0000002dH
  0010c	6b c8 28	 imul	 ecx, eax, 40
  0010f	8b 91 1c 00 00
	00		 mov	 edx, DWORD PTR ?graphics_files@@3PAUFILE_DATA@@A[ecx+28]
  00115	89 15 00 00 00
	00		 mov	 DWORD PTR ?weapon_sprite_data@@3PAEA, edx

; 8191 : 
; 8192 : 	weapon_mask_data = get_graphics_file_data (base_cockpit_graphics_file + GRAPHICS_COCKPITS_APACHE_WEAPONS_MFD_SPRITES_MASK);

  0011b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?base_cockpit_graphics_file@@3W4GRAPHICS_FILE_SPECIFIERS@@A ; base_cockpit_graphics_file
  00120	83 c0 2e	 add	 eax, 46			; 0000002eH
  00123	6b c8 28	 imul	 ecx, eax, 40
  00126	8b 91 1c 00 00
	00		 mov	 edx, DWORD PTR ?graphics_files@@3PAUFILE_DATA@@A[ecx+28]
  0012c	89 15 00 00 00
	00		 mov	 DWORD PTR ?weapon_mask_data@@3PAEA, edx

; 8193 : 
; 8194 : 	weapon_sprite.mask_value = 0;

  00132	c6 05 18 00 00
	00 00		 mov	 BYTE PTR ?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A+24, 0

; 8195 : 
; 8196 : 	en = get_gunship_entity ();

  00139	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0013e	89 45 ac	 mov	 DWORD PTR _en$[ebp], eax

; 8197 : 
; 8198 : 	selected_weapon = get_local_entity_int_value (en, INT_TYPE_SELECTED_WEAPON);

  00141	83 7d ac 00	 cmp	 DWORD PTR _en$[ebp], 0
  00145	74 0d		 je	 SHORT $LN38@draw_weapo
  00147	8b 45 ac	 mov	 eax, DWORD PTR _en$[ebp]
  0014a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014c	89 8d 60 ff ff
	ff		 mov	 DWORD PTR tv132[ebp], ecx
  00152	eb 24		 jmp	 SHORT $LN39@draw_weapo
$LN38@draw_weapo:
  00154	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z@4JA
  0015a	83 c2 48	 add	 edx, 72			; 00000048H
  0015d	52		 push	 edx
  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00163	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00168	50		 push	 eax
  00169	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0016e	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv132[ebp], 0
$LN39@draw_weapo:
  00178	b9 01 00 00 00	 mov	 ecx, 1
  0017d	85 c9		 test	 ecx, ecx
  0017f	74 0c		 je	 SHORT $LN40@draw_weapo
  00181	c7 85 5c ff ff
	ff b8 00 00 00	 mov	 DWORD PTR tv140[ebp], 184 ; 000000b8H
  0018b	eb 24		 jmp	 SHORT $LN41@draw_weapo
$LN40@draw_weapo:
  0018d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z@4JA
  00193	83 c2 48	 add	 edx, 72			; 00000048H
  00196	52		 push	 edx
  00197	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0019c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  001a1	50		 push	 eax
  001a2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001a7	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv140[ebp], 0
$LN41@draw_weapo:
  001b1	68 b8 00 00 00	 push	 184			; 000000b8H
  001b6	8b 4d ac	 mov	 ecx, DWORD PTR _en$[ebp]
  001b9	51		 push	 ecx
  001ba	69 95 60 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv132[ebp], 1116
  001c4	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR tv140[ebp]
  001ca	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  001d1	ff d1		 call	 ecx
  001d3	89 45 a8	 mov	 DWORD PTR _selected_weapon$[ebp], eax

; 8199 : 
; 8200 : 	if (draw_large_mfd)

  001d6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  001dd	0f 84 27 02 00
	00		 je	 $LN9@draw_weapo

; 8201 : 	{
; 8202 : 		weapon_x_offset = (int) mfd_viewport_x_min + 38 - 4;

  001e3	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?mfd_viewport_x_min@@3MA
  001eb	83 c0 22	 add	 eax, 34			; 00000022H
  001ee	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_x_offset@@3HA, eax

; 8203 : 		weapon_y_offset = (int) mfd_viewport_y_min + 32 - 4;

  001f3	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?mfd_viewport_y_min@@3MA
  001fb	83 c0 1c	 add	 eax, 28			; 0000001cH
  001fe	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_y_offset@@3HA, eax

; 8204 : 
; 8205 : 		//
; 8206 : 		// helicopter
; 8207 : 		//
; 8208 : 
; 8209 : 		draw_sprite (4, 4, 4, 4, 256, 256);

  00203	68 00 01 00 00	 push	 256			; 00000100H
  00208	68 00 01 00 00	 push	 256			; 00000100H
  0020d	6a 04		 push	 4
  0020f	6a 04		 push	 4
  00211	6a 04		 push	 4
  00213	6a 04		 push	 4
  00215	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 8210 : 
; 8211 : 		//
; 8212 : 		// arm
; 8213 : 		//
; 8214 : 
; 8215 : 		if (selected_weapon != ENTITY_SUB_TYPE_WEAPON_NO_WEAPON)

  0021a	83 7d a8 00	 cmp	 DWORD PTR _selected_weapon$[ebp], 0
  0021e	74 14		 je	 SHORT $LN11@draw_weapo

; 8216 : 		{
; 8217 : 			draw_sprite (102, 116, 422, 3, 59, 22);

  00220	6a 16		 push	 22			; 00000016H
  00222	6a 3b		 push	 59			; 0000003bH
  00224	6a 03		 push	 3
  00226	68 a6 01 00 00	 push	 422			; 000001a6H
  0022b	6a 74		 push	 116			; 00000074H
  0022d	6a 66		 push	 102			; 00000066H
  0022f	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN11@draw_weapo:

; 8218 : 		}
; 8219 : 
; 8220 : 		//
; 8221 : 		// hardpoints
; 8222 : 		//
; 8223 : 
; 8224 : 		draw_weapon_hardpoint_info (APACHE_CHAIN_GUN_TURRET, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  00234	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  00237	50		 push	 eax
  00238	6a 00		 push	 0
  0023a	6a 06		 push	 6
  0023c	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8225 : 
; 8226 : 		draw_weapon_hardpoint_info (APACHE_LHS_WING_TIP_MOUNT, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  00241	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  00244	50		 push	 eax
  00245	6a 00		 push	 0
  00247	6a 04		 push	 4
  00249	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8227 : 
; 8228 : 		draw_weapon_hardpoint_info (APACHE_RHS_WING_TIP_MOUNT, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  0024e	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  00251	50		 push	 eax
  00252	6a 00		 push	 0
  00254	6a 05		 push	 5
  00256	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8229 : 
; 8230 : 		draw_weapon_hardpoint_info (APACHE_LHS_INNER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  0025b	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  0025e	50		 push	 eax
  0025f	6a 00		 push	 0
  00261	6a 00		 push	 0
  00263	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8231 : 
; 8232 : 		draw_weapon_hardpoint_info (APACHE_RHS_INNER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  00268	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  0026b	50		 push	 eax
  0026c	6a 00		 push	 0
  0026e	6a 01		 push	 1
  00270	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8233 : 
; 8234 : 		draw_weapon_hardpoint_info (APACHE_LHS_OUTER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  00275	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  00278	50		 push	 eax
  00279	6a 00		 push	 0
  0027b	6a 02		 push	 2
  0027d	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8235 : 
; 8236 : 		draw_weapon_hardpoint_info (APACHE_RHS_OUTER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  00282	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  00285	50		 push	 eax
  00286	6a 00		 push	 0
  00288	6a 03		 push	 3
  0028a	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8237 : 
; 8238 : 		draw_weapon_hardpoint_info (APACHE_CHAFF_DISPENSER, ENTITY_SUB_TYPE_WEAPON_CHAFF, selected_weapon);

  0028f	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  00292	50		 push	 eax
  00293	6a 43		 push	 67			; 00000043H
  00295	6a 07		 push	 7
  00297	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8239 : 
; 8240 : 		draw_weapon_hardpoint_info (APACHE_FLARE_DISPENSER, ENTITY_SUB_TYPE_WEAPON_FLARE, selected_weapon);

  0029c	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  0029f	50		 push	 eax
  002a0	6a 44		 push	 68			; 00000044H
  002a2	6a 07		 push	 7
  002a4	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8241 : 
; 8242 : 		//
; 8243 : 		// auto-countermeasures
; 8244 : 		//
; 8245 : 
; 8246 : 		if (get_global_auto_counter_measures ())

  002a9	83 3d 90 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+144, 0
  002b0	74 17		 je	 SHORT $LN12@draw_weapo

; 8247 : 		{
; 8248 : 			draw_sprite (108, 176, 520, 3, 47, 14);

  002b2	6a 0e		 push	 14			; 0000000eH
  002b4	6a 2f		 push	 47			; 0000002fH
  002b6	6a 03		 push	 3
  002b8	68 08 02 00 00	 push	 520			; 00000208H
  002bd	68 b0 00 00 00	 push	 176			; 000000b0H
  002c2	6a 6c		 push	 108			; 0000006cH
  002c4	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN12@draw_weapo:

; 8249 : 		}
; 8250 : 
; 8251 : 		//
; 8252 : 		// rocket salvo
; 8253 : 		//
; 8254 : 
; 8255 : 		if
; 8256 : 		(
; 8257 : 			get_local_entity_weapon_available (en, ENTITY_SUB_TYPE_WEAPON_HYDRA70_M255) ||

  002c9	6a 1e		 push	 30			; 0000001eH
  002cb	8b 45 ac	 mov	 eax, DWORD PTR _en$[ebp]
  002ce	50		 push	 eax
  002cf	e8 00 00 00 00	 call	 ?get_local_entity_weapon_available@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_available
  002d4	85 c0		 test	 eax, eax
  002d6	75 13		 jne	 SHORT $LN14@draw_weapo
  002d8	6a 1f		 push	 31			; 0000001fH
  002da	8b 45 ac	 mov	 eax, DWORD PTR _en$[ebp]
  002dd	50		 push	 eax
  002de	e8 00 00 00 00	 call	 ?get_local_entity_weapon_available@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_available
  002e3	85 c0		 test	 eax, eax
  002e5	0f 84 1a 01 00
	00		 je	 $LN16@draw_weapo
$LN14@draw_weapo:

; 8258 : 			get_local_entity_weapon_available (en, ENTITY_SUB_TYPE_WEAPON_HYDRA70_M261)
; 8259 : 		)
; 8260 : 		{
; 8261 : 			draw_sprite (66, 268, 264, 165, 98, 16);

  002eb	6a 10		 push	 16			; 00000010H
  002ed	6a 62		 push	 98			; 00000062H
  002ef	68 a5 00 00 00	 push	 165			; 000000a5H
  002f4	68 08 01 00 00	 push	 264			; 00000108H
  002f9	68 0c 01 00 00	 push	 268			; 0000010cH
  002fe	6a 42		 push	 66			; 00000042H
  00300	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 8262 : 
; 8263 : 			if (rocket_salvo_size == ROCKET_SALVO_SIZE_ALL)

  00305	81 3d 00 00 00
	00 e8 03 00 00	 cmp	 DWORD PTR ?rocket_salvo_size@@3HA, 1000 ; rocket_salvo_size, 000003e8H
  0030f	75 22		 jne	 SHORT $LN15@draw_weapo

; 8264 : 			{
; 8265 : 				draw_sprite (167, 268, 365, 165, 34, 16);

  00311	6a 10		 push	 16			; 00000010H
  00313	6a 22		 push	 34			; 00000022H
  00315	68 a5 00 00 00	 push	 165			; 000000a5H
  0031a	68 6d 01 00 00	 push	 365			; 0000016dH
  0031f	68 0c 01 00 00	 push	 268			; 0000010cH
  00324	68 a7 00 00 00	 push	 167			; 000000a7H
  00329	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 8266 : 			}
; 8267 : 			else

  0032e	e9 d2 00 00 00	 jmp	 $LN16@draw_weapo
$LN15@draw_weapo:

; 8268 : 			{
; 8269 : 				sprintf (buffer, "%02d", rocket_salvo_size);

  00333	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rocket_salvo_size@@3HA ; rocket_salvo_size
  00338	50		 push	 eax
  00339	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  0033e	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00341	51		 push	 ecx
  00342	e8 00 00 00 00	 call	 _sprintf
  00347	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8270 : 
; 8271 : 				if (buffer[0] == '0')

  0034a	b8 01 00 00 00	 mov	 eax, 1
  0034f	6b c8 00	 imul	 ecx, eax, 0
  00352	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  00357	83 fa 30	 cmp	 edx, 48			; 00000030H
  0035a	75 0f		 jne	 SHORT $LN17@draw_weapo

; 8272 : 				{
; 8273 : 					u = 364 + (9 * 10);

  0035c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43e30000
  00364	f3 0f 11 45 a4	 movss	 DWORD PTR _u$[ebp], xmm0

; 8274 : 				}
; 8275 : 				else

  00369	eb 21		 jmp	 SHORT $LN18@draw_weapo
$LN17@draw_weapo:

; 8276 : 				{
; 8277 : 					u = 364 + ((buffer[0] - '1') * 10);

  0036b	b8 01 00 00 00	 mov	 eax, 1
  00370	6b c8 00	 imul	 ecx, eax, 0
  00373	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  00378	83 ea 31	 sub	 edx, 49			; 00000031H
  0037b	6b c2 0a	 imul	 eax, edx, 10
  0037e	05 6c 01 00 00	 add	 eax, 364		; 0000016cH
  00383	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00387	f3 0f 11 45 a4	 movss	 DWORD PTR _u$[ebp], xmm0
$LN18@draw_weapo:

; 8278 : 				}
; 8279 : 
; 8280 : 				draw_sprite (167, 270, u, 32, 8, 12);

  0038c	6a 0c		 push	 12			; 0000000cH
  0038e	6a 08		 push	 8
  00390	6a 20		 push	 32			; 00000020H
  00392	f3 0f 2c 45 a4	 cvttss2si eax, DWORD PTR _u$[ebp]
  00397	50		 push	 eax
  00398	68 0e 01 00 00	 push	 270			; 0000010eH
  0039d	68 a7 00 00 00	 push	 167			; 000000a7H
  003a2	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 8281 : 
; 8282 : 				if (buffer[1] == '0')

  003a7	b8 01 00 00 00	 mov	 eax, 1
  003ac	c1 e0 00	 shl	 eax, 0
  003af	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  003b4	83 f9 30	 cmp	 ecx, 48			; 00000030H
  003b7	75 0f		 jne	 SHORT $LN19@draw_weapo

; 8283 : 				{
; 8284 : 					u = 364 + (9 * 10);

  003b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43e30000
  003c1	f3 0f 11 45 a4	 movss	 DWORD PTR _u$[ebp], xmm0

; 8285 : 				}
; 8286 : 				else

  003c6	eb 22		 jmp	 SHORT $LN20@draw_weapo
$LN19@draw_weapo:

; 8287 : 				{
; 8288 : 					u = 364 + ((buffer[1] - '1') * 10);

  003c8	b8 01 00 00 00	 mov	 eax, 1
  003cd	c1 e0 00	 shl	 eax, 0
  003d0	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  003d5	83 e9 31	 sub	 ecx, 49			; 00000031H
  003d8	6b d1 0a	 imul	 edx, ecx, 10
  003db	81 c2 6c 01 00
	00		 add	 edx, 364		; 0000016cH
  003e1	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  003e5	f3 0f 11 45 a4	 movss	 DWORD PTR _u$[ebp], xmm0
$LN20@draw_weapo:

; 8289 : 				}
; 8290 : 
; 8291 : 				draw_sprite (175, 270, u, 32, 8, 12);

  003ea	6a 0c		 push	 12			; 0000000cH
  003ec	6a 08		 push	 8
  003ee	6a 20		 push	 32			; 00000020H
  003f0	f3 0f 2c 45 a4	 cvttss2si eax, DWORD PTR _u$[ebp]
  003f5	50		 push	 eax
  003f6	68 0e 01 00 00	 push	 270			; 0000010eH
  003fb	68 af 00 00 00	 push	 175			; 000000afH
  00400	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN16@draw_weapo:

; 8292 : 			}
; 8293 : 		}
; 8294 : 	}
; 8295 : 	else

  00405	e9 4c 02 00 00	 jmp	 $LN28@draw_weapo
$LN9@draw_weapo:

; 8296 : 	{
; 8297 : 		if (draw_on_texture)

  0040a	83 7d 0c 00	 cmp	 DWORD PTR _draw_on_texture$[ebp], 0
  0040e	74 16		 je	 SHORT $LN21@draw_weapo

; 8298 : 		{
; 8299 : 			weapon_x_offset = 0 - 4;

  00410	c7 05 00 00 00
	00 fc ff ff ff	 mov	 DWORD PTR ?weapon_x_offset@@3HA, -4 ; fffffffcH

; 8300 : 			weapon_y_offset = 0 - 262 - 3;

  0041a	c7 05 00 00 00
	00 f7 fe ff ff	 mov	 DWORD PTR ?weapon_y_offset@@3HA, -265 ; fffffef7H

; 8301 : 		}
; 8302 : 		else

  00424	eb 22		 jmp	 SHORT $LN22@draw_weapo
$LN21@draw_weapo:

; 8303 : 		{
; 8304 : 			weapon_x_offset = (int) mfd_viewport_x_min - 4;

  00426	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?mfd_viewport_x_min@@3MA
  0042e	83 e8 04	 sub	 eax, 4
  00431	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_x_offset@@3HA, eax

; 8305 : 			weapon_y_offset = (int) mfd_viewport_y_min - 262 - 3;

  00436	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?mfd_viewport_y_min@@3MA
  0043e	2d 09 01 00 00	 sub	 eax, 265		; 00000109H
  00443	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_y_offset@@3HA, eax
$LN22@draw_weapo:

; 8306 : 		}
; 8307 : 
; 8308 : 		//
; 8309 : 		// helicopter
; 8310 : 		//
; 8311 : 
; 8312 : 		draw_sprite (4, 262 + 3, 4, 262, 128, 128);

  00448	68 80 00 00 00	 push	 128			; 00000080H
  0044d	68 80 00 00 00	 push	 128			; 00000080H
  00452	68 06 01 00 00	 push	 262			; 00000106H
  00457	6a 04		 push	 4
  00459	68 09 01 00 00	 push	 265			; 00000109H
  0045e	6a 04		 push	 4
  00460	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 8313 : 
; 8314 : 		//
; 8315 : 		// arm
; 8316 : 		//
; 8317 : 
; 8318 : 		if (selected_weapon != ENTITY_SUB_TYPE_WEAPON_NO_WEAPON)

  00465	83 7d a8 00	 cmp	 DWORD PTR _selected_weapon$[ebp], 0
  00469	74 1a		 je	 SHORT $LN23@draw_weapo

; 8319 : 		{
; 8320 : 			draw_sprite (53, 318, 213, 261, 29, 11);

  0046b	6a 0b		 push	 11			; 0000000bH
  0046d	6a 1d		 push	 29			; 0000001dH
  0046f	68 05 01 00 00	 push	 261			; 00000105H
  00474	68 d5 00 00 00	 push	 213			; 000000d5H
  00479	68 3e 01 00 00	 push	 318			; 0000013eH
  0047e	6a 35		 push	 53			; 00000035H
  00480	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN23@draw_weapo:

; 8321 : 		}
; 8322 : 
; 8323 : 		//
; 8324 : 		// hardpoints
; 8325 : 		//
; 8326 : 
; 8327 : 		draw_weapon_hardpoint_info (APACHE_CHAIN_GUN_TURRET, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  00485	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  00488	50		 push	 eax
  00489	6a 00		 push	 0
  0048b	6a 06		 push	 6
  0048d	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8328 : 
; 8329 : 		draw_weapon_hardpoint_info (APACHE_LHS_WING_TIP_MOUNT, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  00492	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  00495	50		 push	 eax
  00496	6a 00		 push	 0
  00498	6a 04		 push	 4
  0049a	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8330 : 
; 8331 : 		draw_weapon_hardpoint_info (APACHE_RHS_WING_TIP_MOUNT, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  0049f	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  004a2	50		 push	 eax
  004a3	6a 00		 push	 0
  004a5	6a 05		 push	 5
  004a7	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8332 : 
; 8333 : 		draw_weapon_hardpoint_info (APACHE_LHS_INNER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  004ac	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  004af	50		 push	 eax
  004b0	6a 00		 push	 0
  004b2	6a 00		 push	 0
  004b4	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8334 : 
; 8335 : 		draw_weapon_hardpoint_info (APACHE_RHS_INNER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  004b9	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  004bc	50		 push	 eax
  004bd	6a 00		 push	 0
  004bf	6a 01		 push	 1
  004c1	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8336 : 
; 8337 : 		draw_weapon_hardpoint_info (APACHE_LHS_OUTER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  004c6	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  004c9	50		 push	 eax
  004ca	6a 00		 push	 0
  004cc	6a 02		 push	 2
  004ce	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8338 : 
; 8339 : 		draw_weapon_hardpoint_info (APACHE_RHS_OUTER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  004d3	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  004d6	50		 push	 eax
  004d7	6a 00		 push	 0
  004d9	6a 03		 push	 3
  004db	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8340 : 
; 8341 : 		draw_weapon_hardpoint_info (APACHE_CHAFF_DISPENSER, ENTITY_SUB_TYPE_WEAPON_CHAFF, selected_weapon);

  004e0	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  004e3	50		 push	 eax
  004e4	6a 43		 push	 67			; 00000043H
  004e6	6a 07		 push	 7
  004e8	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8342 : 
; 8343 : 		draw_weapon_hardpoint_info (APACHE_FLARE_DISPENSER, ENTITY_SUB_TYPE_WEAPON_FLARE, selected_weapon);

  004ed	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  004f0	50		 push	 eax
  004f1	6a 44		 push	 68			; 00000044H
  004f3	6a 07		 push	 7
  004f5	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8344 : 
; 8345 : 		//
; 8346 : 		// auto-countermeasures
; 8347 : 		//
; 8348 : 
; 8349 : 		if (get_global_auto_counter_measures ())

  004fa	83 3d 90 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+144, 0
  00501	74 1a		 je	 SHORT $LN24@draw_weapo

; 8350 : 		{
; 8351 : 			draw_sprite (56, 347, 262, 261, 23, 7);

  00503	6a 07		 push	 7
  00505	6a 17		 push	 23			; 00000017H
  00507	68 05 01 00 00	 push	 261			; 00000105H
  0050c	68 06 01 00 00	 push	 262			; 00000106H
  00511	68 5b 01 00 00	 push	 347			; 0000015bH
  00516	6a 38		 push	 56			; 00000038H
  00518	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN24@draw_weapo:

; 8352 : 		}
; 8353 : 
; 8354 : 		//
; 8355 : 		// rocket salvo
; 8356 : 		//
; 8357 : 
; 8358 : 		if
; 8359 : 		(
; 8360 : 			get_local_entity_weapon_available (en, ENTITY_SUB_TYPE_WEAPON_HYDRA70_M255) ||

  0051d	6a 1e		 push	 30			; 0000001eH
  0051f	8b 45 ac	 mov	 eax, DWORD PTR _en$[ebp]
  00522	50		 push	 eax
  00523	e8 00 00 00 00	 call	 ?get_local_entity_weapon_available@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_available
  00528	85 c0		 test	 eax, eax
  0052a	75 13		 jne	 SHORT $LN26@draw_weapo
  0052c	6a 1f		 push	 31			; 0000001fH
  0052e	8b 45 ac	 mov	 eax, DWORD PTR _en$[ebp]
  00531	50		 push	 eax
  00532	e8 00 00 00 00	 call	 ?get_local_entity_weapon_available@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_available
  00537	85 c0		 test	 eax, eax
  00539	0f 84 17 01 00
	00		 je	 $LN28@draw_weapo
$LN26@draw_weapo:

; 8361 : 			get_local_entity_weapon_available (en, ENTITY_SUB_TYPE_WEAPON_HYDRA70_M261)
; 8362 : 		)
; 8363 : 		{
; 8364 : 			draw_sprite (34, 382 + 3, 133, 342, 49, 8);

  0053f	6a 08		 push	 8
  00541	6a 31		 push	 49			; 00000031H
  00543	68 56 01 00 00	 push	 342			; 00000156H
  00548	68 85 00 00 00	 push	 133			; 00000085H
  0054d	68 81 01 00 00	 push	 385			; 00000181H
  00552	6a 22		 push	 34			; 00000022H
  00554	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 8365 : 
; 8366 : 			if (rocket_salvo_size == ROCKET_SALVO_SIZE_ALL)

  00559	81 3d 00 00 00
	00 e8 03 00 00	 cmp	 DWORD PTR ?rocket_salvo_size@@3HA, 1000 ; rocket_salvo_size, 000003e8H
  00563	75 1f		 jne	 SHORT $LN27@draw_weapo

; 8367 : 			{
; 8368 : 				draw_sprite (84, 382 + 3, 183, 342, 18, 8);

  00565	6a 08		 push	 8
  00567	6a 12		 push	 18			; 00000012H
  00569	68 56 01 00 00	 push	 342			; 00000156H
  0056e	68 b7 00 00 00	 push	 183			; 000000b7H
  00573	68 81 01 00 00	 push	 385			; 00000181H
  00578	6a 54		 push	 84			; 00000054H
  0057a	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 8369 : 			}
; 8370 : 			else

  0057f	e9 d2 00 00 00	 jmp	 $LN28@draw_weapo
$LN27@draw_weapo:

; 8371 : 			{
; 8372 : 				sprintf (buffer, "%02d", rocket_salvo_size);

  00584	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rocket_salvo_size@@3HA ; rocket_salvo_size
  00589	50		 push	 eax
  0058a	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  0058f	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00592	51		 push	 ecx
  00593	e8 00 00 00 00	 call	 _sprintf
  00598	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8373 : 
; 8374 : 				if (buffer[0] == '0')

  0059b	b8 01 00 00 00	 mov	 eax, 1
  005a0	6b c8 00	 imul	 ecx, eax, 0
  005a3	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  005a8	83 fa 30	 cmp	 edx, 48			; 00000030H
  005ab	75 0f		 jne	 SHORT $LN29@draw_weapo

; 8375 : 				{
; 8376 : 					u = 184 + (9 * 5);

  005ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43650000
  005b5	f3 0f 11 45 a4	 movss	 DWORD PTR _u$[ebp], xmm0

; 8377 : 				}
; 8378 : 				else

  005ba	eb 21		 jmp	 SHORT $LN30@draw_weapo
$LN29@draw_weapo:

; 8379 : 				{
; 8380 : 					u = 184 + ((buffer[0] - '1') * 5);

  005bc	b8 01 00 00 00	 mov	 eax, 1
  005c1	6b c8 00	 imul	 ecx, eax, 0
  005c4	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  005c9	83 ea 31	 sub	 edx, 49			; 00000031H
  005cc	6b c2 05	 imul	 eax, edx, 5
  005cf	05 b8 00 00 00	 add	 eax, 184		; 000000b8H
  005d4	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  005d8	f3 0f 11 45 a4	 movss	 DWORD PTR _u$[ebp], xmm0
$LN30@draw_weapo:

; 8381 : 				}
; 8382 : 
; 8383 : 				draw_sprite (86, 383 + 3, u, 276, 4, 6);

  005dd	6a 06		 push	 6
  005df	6a 04		 push	 4
  005e1	68 14 01 00 00	 push	 276			; 00000114H
  005e6	f3 0f 2c 45 a4	 cvttss2si eax, DWORD PTR _u$[ebp]
  005eb	50		 push	 eax
  005ec	68 82 01 00 00	 push	 386			; 00000182H
  005f1	6a 56		 push	 86			; 00000056H
  005f3	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 8384 : 
; 8385 : 				if (buffer[1] == '0')

  005f8	b8 01 00 00 00	 mov	 eax, 1
  005fd	c1 e0 00	 shl	 eax, 0
  00600	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  00605	83 f9 30	 cmp	 ecx, 48			; 00000030H
  00608	75 0f		 jne	 SHORT $LN31@draw_weapo

; 8386 : 				{
; 8387 : 					u = 184 + (9 * 5);

  0060a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43650000
  00612	f3 0f 11 45 a4	 movss	 DWORD PTR _u$[ebp], xmm0

; 8388 : 				}
; 8389 : 				else

  00617	eb 22		 jmp	 SHORT $LN32@draw_weapo
$LN31@draw_weapo:

; 8390 : 				{
; 8391 : 					u = 184 + ((buffer[1] - '1') * 5);

  00619	b8 01 00 00 00	 mov	 eax, 1
  0061e	c1 e0 00	 shl	 eax, 0
  00621	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  00626	83 e9 31	 sub	 ecx, 49			; 00000031H
  00629	6b d1 05	 imul	 edx, ecx, 5
  0062c	81 c2 b8 00 00
	00		 add	 edx, 184		; 000000b8H
  00632	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00636	f3 0f 11 45 a4	 movss	 DWORD PTR _u$[ebp], xmm0
$LN32@draw_weapo:

; 8392 : 				}
; 8393 : 
; 8394 : 				draw_sprite (90, 383 + 3, u, 276, 4, 6);

  0063b	6a 06		 push	 6
  0063d	6a 04		 push	 4
  0063f	68 14 01 00 00	 push	 276			; 00000114H
  00644	f3 0f 2c 45 a4	 cvttss2si eax, DWORD PTR _u$[ebp]
  00649	50		 push	 eax
  0064a	68 82 01 00 00	 push	 386			; 00000182H
  0064f	6a 5a		 push	 90			; 0000005aH
  00651	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN28@draw_weapo:
$LN1@draw_weapo:

; 8395 : 			}
; 8396 : 		}
; 8397 : 	}
; 8398 : }

  00656	5f		 pop	 edi
  00657	5e		 pop	 esi
  00658	5b		 pop	 ebx
  00659	8b e5		 mov	 esp, ebp
  0065b	5d		 pop	 ebp
  0065c	c2 08 00	 ret	 8
  0065f	90		 npad	 1
$LN42@draw_weapo:
  00660	00 00 00 00	 DD	 $LN5@draw_weapo
  00664	00 00 00 00	 DD	 $LN6@draw_weapo
  00668	00 00 00 00	 DD	 $LN7@draw_weapo
  0066c	00 00 00 00	 DD	 $LN8@draw_weapo
?draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z ENDP	; draw_weapon_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv2165 = -304						; size = 8
tv2149 = -304						; size = 8
tv2051 = -304						; size = 8
tv1964 = -304						; size = 8
tv1946 = -304						; size = 8
tv1921 = -304						; size = 8
tv1887 = -304						; size = 8
tv1861 = -304						; size = 8
tv1831 = -304						; size = 8
tv1684 = -304						; size = 8
tv1669 = -304						; size = 8
tv1646 = -304						; size = 8
tv1631 = -304						; size = 8
tv1608 = -304						; size = 8
tv1593 = -304						; size = 8
tv679 = -304						; size = 4
tv83 = -304						; size = 4
tv1000 = -300						; size = 4
tv998 = -300						; size = 4
tv876 = -300						; size = 4
tv870 = -300						; size = 4
tv778 = -300						; size = 4
tv730 = -300						; size = 4
tv672 = -300						; size = 4
tv646 = -300						; size = 4
tv624 = -300						; size = 4
tv272 = -300						; size = 4
tv75 = -300						; size = 4
$T1 = -296						; size = 4
_y_offset$2 = -228					; size = 4
_y2$3 = -224						; size = 4
_x2$4 = -220						; size = 4
_y1$5 = -216						; size = 4
_x1$6 = -212						; size = 4
_height$7 = -208					; size = 4
_width$8 = -204						; size = 4
_tip$9 = -200						; size = 4
_left_tip$10 = -196					; size = 4
_selected$11 = -192					; size = 4
_text_colour$12 = -188					; size = 4
_selected$13 = -184					; size = 4
_missile_y$14 = -180					; size = 4
_missile_x$15 = -176					; size = 4
_last_offset$16 = -172					; size = 4
_i$17 = -168						; size = 4
_pylon_y$18 = -164					; size = 4
_pylon_x$19 = -160					; size = 4
_selected$20 = -156					; size = 4
_weapon_sub_type$ = -152				; size = 4
_pylon$ = -148						; size = 4
_selected_weapon$ = -144				; size = 4
_damaged$ = -140					; size = 4
_number$ = -136						; size = 4
_x_adjust$ = -132					; size = 4
_s_ptr$ = -128						; size = 4
_s$ = -124						; size = 80
_wing_tip_right$ = -44					; size = 4
_wing_tip_left$ = -40					; size = 4
_rear_wing$ = -36					; size = 4
_forward_wing$ = -32					; size = 4
_y3$ = -28						; size = 4
_y2$ = -24						; size = 4
_y1$ = -20						; size = 4
_x4$ = -16						; size = 4
_x3$ = -12						; size = 4
_x2$ = -8						; size = 4
_x1$ = -4						; size = 4
_location$ = 8						; size = 4
?draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z PROC ; draw_large_weapon_display_mfd, COMDAT

; 7601 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 7602 : 	float x1, x2, x3, x4, y1, y2, y3;
; 7603 : 	float forward_wing, rear_wing, wing_tip_left, wing_tip_right;
; 7604 : 	char s[80], *s_ptr;
; 7605 : 	float x_adjust;
; 7606 : 	int number, damaged, selected_weapon, pylon;
; 7607 : 	entity_sub_types weapon_sub_type;
; 7608 : 
; 7609 : 
; 7610 : 	ASSERT(draw_large_mfd);

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00013	75 18		 jne	 SHORT $LN16@draw_large
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 09	 add	 eax, 9
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MFMEIMLB@draw_large_mfd@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN16@draw_large:

; 7611 : 
; 7612 : 	selected_weapon = get_local_entity_int_value(get_gunship_entity (), INT_TYPE_SELECTED_WEAPON);

  0002d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00034	74 0f		 je	 SHORT $LN91@draw_large
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0003b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003d	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv75[ebp], ecx
  00043	eb 24		 jmp	 SHORT $LN92@draw_large
$LN91@draw_large:
  00045	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z@4JA
  0004b	83 c2 0b	 add	 edx, 11			; 0000000bH
  0004e	52		 push	 edx
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0005f	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv75[ebp], 0
$LN92@draw_large:
  00069	b9 01 00 00 00	 mov	 ecx, 1
  0006e	85 c9		 test	 ecx, ecx
  00070	74 0c		 je	 SHORT $LN93@draw_large
  00072	c7 85 d0 fe ff
	ff b8 00 00 00	 mov	 DWORD PTR tv83[ebp], 184 ; 000000b8H
  0007c	eb 24		 jmp	 SHORT $LN94@draw_large
$LN93@draw_large:
  0007e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z@4JA
  00084	83 c2 0b	 add	 edx, 11			; 0000000bH
  00087	52		 push	 edx
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00098	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv83[ebp], 0
$LN94@draw_large:
  000a2	68 b8 00 00 00	 push	 184			; 000000b8H
  000a7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000ad	51		 push	 ecx
  000ae	69 95 d4 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv75[ebp], 1116
  000b8	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR tv83[ebp]
  000be	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000c5	ff d1		 call	 ecx
  000c7	89 85 70 ff ff
	ff		 mov	 DWORD PTR _selected_weapon$[ebp], eax

; 7613 : 
; 7614 : 	set_mono_font_type (MONO_FONT_TYPE_7X12);

  000cd	6a 05		 push	 5
  000cf	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 7615 : 
; 7616 : 	// draw helicopter outline
; 7617 : 	// nose
; 7618 : 
; 7619 : 	get_2d_float_screen_coordinates (-0.25, 0.5, &x1, &y1);

  000d4	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  000d7	50		 push	 eax
  000d8	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  000db	51		 push	 ecx
  000dc	51		 push	 ecx
  000dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ea	51		 push	 ecx
  000eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  000f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f8	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 7620 : 	get_2d_float_screen_coordinates (-0.1, 0.525, &x2, &y2);

  000fd	8d 45 e8	 lea	 eax, DWORD PTR _y2$[ebp]
  00100	50		 push	 eax
  00101	8d 4d f8	 lea	 ecx, DWORD PTR _x2$[ebp]
  00104	51		 push	 ecx
  00105	51		 push	 ecx
  00106	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f066666
  0010e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00113	51		 push	 ecx
  00114	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  0011c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00121	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 7621 : 	get_2d_float_screen_coordinates (-0.075, 0.6, &x3, &y3);

  00126	8d 45 e4	 lea	 eax, DWORD PTR _y3$[ebp]
  00129	50		 push	 eax
  0012a	8d 4d f4	 lea	 ecx, DWORD PTR _x3$[ebp]
  0012d	51		 push	 ecx
  0012e	51		 push	 ecx
  0012f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00137	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013c	51		 push	 ecx
  0013d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00145	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014a	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 7622 : 	get_2d_float_screen_x_coordinate (0.075, &x4);

  0014f	8d 45 f0	 lea	 eax, DWORD PTR _x4$[ebp]
  00152	50		 push	 eax
  00153	51		 push	 ecx
  00154	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d99999a
  0015c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00161	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7623 : 
; 7624 : 	draw_line (x1, y1, x2, y2, MFD_COLOUR1);

  00166	b8 04 00 00 00	 mov	 eax, 4
  0016b	6b c8 00	 imul	 ecx, eax, 0
  0016e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00174	52		 push	 edx
  00175	51		 push	 ecx
  00176	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0017b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00180	51		 push	 ecx
  00181	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00186	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018b	51		 push	 ecx
  0018c	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00191	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00196	51		 push	 ecx
  00197	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0019c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a1	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7625 : 	draw_line (x2, y2, x3, y3, MFD_COLOUR1);

  001a6	b8 04 00 00 00	 mov	 eax, 4
  001ab	6b c8 00	 imul	 ecx, eax, 0
  001ae	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001b4	52		 push	 edx
  001b5	51		 push	 ecx
  001b6	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y3$[ebp]
  001bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c0	51		 push	 ecx
  001c1	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  001c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cb	51		 push	 ecx
  001cc	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  001d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d6	51		 push	 ecx
  001d7	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  001dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e1	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7626 : 	draw_line (x3, y3, x4, y3, MFD_COLOUR1);

  001e6	b8 04 00 00 00	 mov	 eax, 4
  001eb	6b c8 00	 imul	 ecx, eax, 0
  001ee	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001f4	52		 push	 edx
  001f5	51		 push	 ecx
  001f6	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y3$[ebp]
  001fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00200	51		 push	 ecx
  00201	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x4$[ebp]
  00206	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020b	51		 push	 ecx
  0020c	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y3$[ebp]
  00211	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00216	51		 push	 ecx
  00217	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  0021c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00221	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7627 : 
; 7628 : 	get_2d_float_screen_x_coordinate (0.1, &x3);

  00226	8d 45 f4	 lea	 eax, DWORD PTR _x3$[ebp]
  00229	50		 push	 eax
  0022a	51		 push	 ecx
  0022b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00233	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00238	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7629 : 	get_2d_float_screen_x_coordinate (0.25, &x2);

  0023d	8d 45 f8	 lea	 eax, DWORD PTR _x2$[ebp]
  00240	50		 push	 eax
  00241	51		 push	 ecx
  00242	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  0024a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024f	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7630 : 
; 7631 : 	draw_line (x4, y3, x3, y2, MFD_COLOUR1);

  00254	b8 04 00 00 00	 mov	 eax, 4
  00259	6b c8 00	 imul	 ecx, eax, 0
  0025c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00262	52		 push	 edx
  00263	51		 push	 ecx
  00264	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00269	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026e	51		 push	 ecx
  0026f	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  00274	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00279	51		 push	 ecx
  0027a	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y3$[ebp]
  0027f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00284	51		 push	 ecx
  00285	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x4$[ebp]
  0028a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028f	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7632 : 	draw_line (x3, y2, x2, y1, MFD_COLOUR1);

  00294	b8 04 00 00 00	 mov	 eax, 4
  00299	6b c8 00	 imul	 ecx, eax, 0
  0029c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002a2	52		 push	 edx
  002a3	51		 push	 ecx
  002a4	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  002a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ae	51		 push	 ecx
  002af	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  002b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b9	51		 push	 ecx
  002ba	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  002bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c4	51		 push	 ecx
  002c5	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  002ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002cf	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7633 : 
; 7634 : 	// body
; 7635 : 
; 7636 : 	get_2d_float_screen_y_coordinate (-0.1, &forward_wing);

  002d4	8d 45 e0	 lea	 eax, DWORD PTR _forward_wing$[ebp]
  002d7	50		 push	 eax
  002d8	51		 push	 ecx
  002d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  002e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e6	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 7637 : 	get_2d_float_screen_y_coordinate (-0.5, &rear_wing);

  002eb	8d 45 dc	 lea	 eax, DWORD PTR _rear_wing$[ebp]
  002ee	50		 push	 eax
  002ef	51		 push	 ecx
  002f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  002f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fd	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 7638 : 	get_2d_float_screen_x_coordinate (-0.97, &wing_tip_left);

  00302	8d 45 d8	 lea	 eax, DWORD PTR _wing_tip_left$[ebp]
  00305	50		 push	 eax
  00306	51		 push	 ecx
  00307	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7851ec
  0030f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00314	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7639 : 	get_2d_float_screen_x_coordinate (0.97, &wing_tip_right);

  00319	8d 45 d4	 lea	 eax, DWORD PTR _wing_tip_right$[ebp]
  0031c	50		 push	 eax
  0031d	51		 push	 ecx
  0031e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7851ec
  00326	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032b	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7640 : 
; 7641 : 	draw_line (x1, y1, x1, forward_wing, MFD_COLOUR1);

  00330	b8 04 00 00 00	 mov	 eax, 4
  00335	6b c8 00	 imul	 ecx, eax, 0
  00338	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0033e	52		 push	 edx
  0033f	51		 push	 ecx
  00340	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  00345	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034a	51		 push	 ecx
  0034b	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00350	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00355	51		 push	 ecx
  00356	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0035b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00360	51		 push	 ecx
  00361	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00366	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7642 : 	draw_line (x2, y1, x2, forward_wing, MFD_COLOUR1);

  00370	b8 04 00 00 00	 mov	 eax, 4
  00375	6b c8 00	 imul	 ecx, eax, 0
  00378	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0037e	52		 push	 edx
  0037f	51		 push	 ecx
  00380	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  00385	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038a	51		 push	 ecx
  0038b	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00390	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00395	51		 push	 ecx
  00396	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0039b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a0	51		 push	 ecx
  003a1	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  003a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ab	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7643 : 	draw_line (x1, forward_wing, wing_tip_left, forward_wing, MFD_COLOUR1);

  003b0	b8 04 00 00 00	 mov	 eax, 4
  003b5	6b c8 00	 imul	 ecx, eax, 0
  003b8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003be	52		 push	 edx
  003bf	51		 push	 ecx
  003c0	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  003c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ca	51		 push	 ecx
  003cb	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _wing_tip_left$[ebp]
  003d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d5	51		 push	 ecx
  003d6	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  003db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e0	51		 push	 ecx
  003e1	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  003e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003eb	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7644 : 	draw_line (x2, forward_wing, wing_tip_right, forward_wing, MFD_COLOUR1);

  003f0	b8 04 00 00 00	 mov	 eax, 4
  003f5	6b c8 00	 imul	 ecx, eax, 0
  003f8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003fe	52		 push	 edx
  003ff	51		 push	 ecx
  00400	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  00405	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040a	51		 push	 ecx
  0040b	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _wing_tip_right$[ebp]
  00410	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00415	51		 push	 ecx
  00416	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  0041b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00420	51		 push	 ecx
  00421	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00426	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7645 : 
; 7646 : 	draw_line (wing_tip_left, forward_wing, wing_tip_left, rear_wing, MFD_COLOUR1);

  00430	b8 04 00 00 00	 mov	 eax, 4
  00435	6b c8 00	 imul	 ecx, eax, 0
  00438	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0043e	52		 push	 edx
  0043f	51		 push	 ecx
  00440	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  00445	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044a	51		 push	 ecx
  0044b	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _wing_tip_left$[ebp]
  00450	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00455	51		 push	 ecx
  00456	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  0045b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00460	51		 push	 ecx
  00461	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _wing_tip_left$[ebp]
  00466	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7647 : 	draw_line (wing_tip_right, forward_wing, wing_tip_right, rear_wing, MFD_COLOUR1);

  00470	b8 04 00 00 00	 mov	 eax, 4
  00475	6b c8 00	 imul	 ecx, eax, 0
  00478	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0047e	52		 push	 edx
  0047f	51		 push	 ecx
  00480	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  00485	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0048a	51		 push	 ecx
  0048b	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _wing_tip_right$[ebp]
  00490	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00495	51		 push	 ecx
  00496	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  0049b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a0	51		 push	 ecx
  004a1	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _wing_tip_right$[ebp]
  004a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ab	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7648 : 	draw_line (x1, rear_wing, wing_tip_left, rear_wing, MFD_COLOUR1);

  004b0	b8 04 00 00 00	 mov	 eax, 4
  004b5	6b c8 00	 imul	 ecx, eax, 0
  004b8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004be	52		 push	 edx
  004bf	51		 push	 ecx
  004c0	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  004c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ca	51		 push	 ecx
  004cb	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _wing_tip_left$[ebp]
  004d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d5	51		 push	 ecx
  004d6	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  004db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e0	51		 push	 ecx
  004e1	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  004e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004eb	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7649 : 	draw_line (x2, rear_wing, wing_tip_right, rear_wing, MFD_COLOUR1);

  004f0	b8 04 00 00 00	 mov	 eax, 4
  004f5	6b c8 00	 imul	 ecx, eax, 0
  004f8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004fe	52		 push	 edx
  004ff	51		 push	 ecx
  00500	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  00505	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0050a	51		 push	 ecx
  0050b	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _wing_tip_right$[ebp]
  00510	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00515	51		 push	 ecx
  00516	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  0051b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00520	51		 push	 ecx
  00521	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00526	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0052b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7650 : 
; 7651 : 	get_2d_float_screen_y_coordinate (-0.8, &y2);

  00530	8d 45 e8	 lea	 eax, DWORD PTR _y2$[ebp]
  00533	50		 push	 eax
  00534	51		 push	 ecx
  00535	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0053d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00542	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 7652 : 
; 7653 : 	draw_line (x1, rear_wing, x1, y2, MFD_COLOUR1);

  00547	b8 04 00 00 00	 mov	 eax, 4
  0054c	6b c8 00	 imul	 ecx, eax, 0
  0054f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00555	52		 push	 edx
  00556	51		 push	 ecx
  00557	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0055c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00561	51		 push	 ecx
  00562	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00567	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0056c	51		 push	 ecx
  0056d	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  00572	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00577	51		 push	 ecx
  00578	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0057d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00582	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7654 : 	draw_line (x2, rear_wing, x2, y2, MFD_COLOUR1);

  00587	b8 04 00 00 00	 mov	 eax, 4
  0058c	6b c8 00	 imul	 ecx, eax, 0
  0058f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00595	52		 push	 edx
  00596	51		 push	 ecx
  00597	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0059c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a1	51		 push	 ecx
  005a2	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  005a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ac	51		 push	 ecx
  005ad	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  005b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b7	51		 push	 ecx
  005b8	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  005bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c2	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7655 : 	draw_line (x1, y2, x2, y2, MFD_COLOUR1);

  005c7	b8 04 00 00 00	 mov	 eax, 4
  005cc	6b c8 00	 imul	 ecx, eax, 0
  005cf	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005d5	52		 push	 edx
  005d6	51		 push	 ecx
  005d7	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  005dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e1	51		 push	 ecx
  005e2	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  005e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ec	51		 push	 ecx
  005ed	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  005f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f7	51		 push	 ecx
  005f8	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  005fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00602	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7656 : 
; 7657 : 
; 7658 : 	// cannon
; 7659 : 	if (get_local_entity_weapon_hardpoint_info (get_gunship_entity (),

  00607	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _damaged$[ebp]
  0060d	50		 push	 eax
  0060e	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _number$[ebp]
  00614	51		 push	 ecx
  00615	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  0061b	52		 push	 edx
  0061c	6a 00		 push	 0
  0061e	6a 06		 push	 6
  00620	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00625	50		 push	 eax
  00626	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  0062b	85 c0		 test	 eax, eax
  0062d	0f 84 01 05 00
	00		 je	 $LN17@draw_large

; 7660 : 		APACHE_CHAIN_GUN_TURRET, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON,
; 7661 : 		&weapon_sub_type, &number, &damaged))
; 7662 : 	{
; 7663 : 		int selected = (weapon_sub_type == selected_weapon) && !damaged;

  00633	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00639	3b 85 70 ff ff
	ff		 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  0063f	75 15		 jne	 SHORT $LN95@draw_large
  00641	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  00648	75 0c		 jne	 SHORT $LN95@draw_large
  0064a	c7 85 d4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv272[ebp], 1
  00654	eb 0a		 jmp	 SHORT $LN96@draw_large
$LN95@draw_large:
  00656	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv272[ebp], 0
$LN96@draw_large:
  00660	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv272[ebp]
  00666	89 8d 64 ff ff
	ff		 mov	 DWORD PTR _selected$20[ebp], ecx

; 7664 : 
; 7665 : 		get_2d_float_screen_coordinates (-0.01, 0.575, &x1, &y1);

  0066c	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  0066f	50		 push	 eax
  00670	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  00673	51		 push	 ecx
  00674	51		 push	 ecx
  00675	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f133333
  0067d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00682	51		 push	 ecx
  00683	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bc23d70a
  0068b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00690	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 7666 : 		get_2d_float_screen_x_coordinate (0.01, &x2);

  00695	8d 45 f8	 lea	 eax, DWORD PTR _x2$[ebp]
  00698	50		 push	 eax
  00699	51		 push	 ecx
  0069a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70a
  006a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a7	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7667 : 		get_2d_float_screen_y_coordinate (0.35, &y2);

  006ac	8d 45 e8	 lea	 eax, DWORD PTR _y2$[ebp]
  006af	50		 push	 eax
  006b0	51		 push	 ecx
  006b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  006b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006be	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 7668 : 		get_2d_float_screen_x_coordinate (-0.08, &x3);

  006c3	8d 45 f4	 lea	 eax, DWORD PTR _x3$[ebp]
  006c6	50		 push	 eax
  006c7	51		 push	 ecx
  006c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  006d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d5	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7669 : 		get_2d_float_screen_x_coordinate (0.08, &x4);

  006da	8d 45 f0	 lea	 eax, DWORD PTR _x4$[ebp]
  006dd	50		 push	 eax
  006de	51		 push	 ecx
  006df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  006e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ec	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7670 : 		get_2d_float_screen_y_coordinate (0.2, &y3);

  006f1	8d 45 e4	 lea	 eax, DWORD PTR _y3$[ebp]
  006f4	50		 push	 eax
  006f5	51		 push	 ecx
  006f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  006fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00703	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 7671 : 
; 7672 : 		if (selected)

  00708	83 bd 64 ff ff
	ff 00		 cmp	 DWORD PTR _selected$20[ebp], 0
  0070f	74 5d		 je	 SHORT $LN18@draw_large

; 7673 : 		{
; 7674 : 			set_block (x1, y1, x2, y2, MFD_COLOUR1);

  00711	b8 04 00 00 00	 mov	 eax, 4
  00716	6b c8 00	 imul	 ecx, eax, 0
  00719	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0071f	52		 push	 edx
  00720	f3 0f 2c 45 e8	 cvttss2si eax, DWORD PTR _y2$[ebp]
  00725	50		 push	 eax
  00726	f3 0f 2c 4d f8	 cvttss2si ecx, DWORD PTR _x2$[ebp]
  0072b	51		 push	 ecx
  0072c	f3 0f 2c 55 ec	 cvttss2si edx, DWORD PTR _y1$[ebp]
  00731	52		 push	 edx
  00732	f3 0f 2c 45 fc	 cvttss2si eax, DWORD PTR _x1$[ebp]
  00737	50		 push	 eax
  00738	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 7675 : 			set_block (x3, y2, x4, y3, MFD_COLOUR1);

  0073d	b8 04 00 00 00	 mov	 eax, 4
  00742	6b c8 00	 imul	 ecx, eax, 0
  00745	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0074b	52		 push	 edx
  0074c	f3 0f 2c 45 e4	 cvttss2si eax, DWORD PTR _y3$[ebp]
  00751	50		 push	 eax
  00752	f3 0f 2c 4d f0	 cvttss2si ecx, DWORD PTR _x4$[ebp]
  00757	51		 push	 ecx
  00758	f3 0f 2c 55 e8	 cvttss2si edx, DWORD PTR _y2$[ebp]
  0075d	52		 push	 edx
  0075e	f3 0f 2c 45 f4	 cvttss2si eax, DWORD PTR _x3$[ebp]
  00763	50		 push	 eax
  00764	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 7676 : 		}
; 7677 : 		else

  00769	e9 c0 01 00 00	 jmp	 $LN19@draw_large
$LN18@draw_large:

; 7678 : 		{
; 7679 : 			draw_line (x1, y1, x2, y1, MFD_COLOUR1);

  0076e	b8 04 00 00 00	 mov	 eax, 4
  00773	6b c8 00	 imul	 ecx, eax, 0
  00776	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0077c	52		 push	 edx
  0077d	51		 push	 ecx
  0077e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00783	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00788	51		 push	 ecx
  00789	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0078e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00793	51		 push	 ecx
  00794	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00799	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079e	51		 push	 ecx
  0079f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  007a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a9	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7680 : 			draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  007ae	b8 04 00 00 00	 mov	 eax, 4
  007b3	6b c8 00	 imul	 ecx, eax, 0
  007b6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007bc	52		 push	 edx
  007bd	51		 push	 ecx
  007be	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  007c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c8	51		 push	 ecx
  007c9	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  007ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d3	51		 push	 ecx
  007d4	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  007d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007de	51		 push	 ecx
  007df	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  007e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e9	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7681 : 			draw_line (x2, y1, x2, y2, MFD_COLOUR1);

  007ee	b8 04 00 00 00	 mov	 eax, 4
  007f3	6b c8 00	 imul	 ecx, eax, 0
  007f6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007fc	52		 push	 edx
  007fd	51		 push	 ecx
  007fe	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00803	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00808	51		 push	 ecx
  00809	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0080e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00813	51		 push	 ecx
  00814	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00819	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081e	51		 push	 ecx
  0081f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00824	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00829	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7682 : 			draw_line (x1, y2, x3, y2, MFD_COLOUR1);

  0082e	b8 04 00 00 00	 mov	 eax, 4
  00833	6b c8 00	 imul	 ecx, eax, 0
  00836	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0083c	52		 push	 edx
  0083d	51		 push	 ecx
  0083e	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00843	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00848	51		 push	 ecx
  00849	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  0084e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00853	51		 push	 ecx
  00854	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00859	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0085e	51		 push	 ecx
  0085f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00864	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00869	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7683 : 			draw_line (x2, y2, x4, y2, MFD_COLOUR1);

  0086e	b8 04 00 00 00	 mov	 eax, 4
  00873	6b c8 00	 imul	 ecx, eax, 0
  00876	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0087c	52		 push	 edx
  0087d	51		 push	 ecx
  0087e	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00883	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00888	51		 push	 ecx
  00889	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x4$[ebp]
  0088e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00893	51		 push	 ecx
  00894	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00899	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0089e	51		 push	 ecx
  0089f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  008a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a9	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7684 : 			draw_line (x3, y2, x3, y3, MFD_COLOUR1);

  008ae	b8 04 00 00 00	 mov	 eax, 4
  008b3	6b c8 00	 imul	 ecx, eax, 0
  008b6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008bc	52		 push	 edx
  008bd	51		 push	 ecx
  008be	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y3$[ebp]
  008c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c8	51		 push	 ecx
  008c9	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  008ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d3	51		 push	 ecx
  008d4	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  008d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008de	51		 push	 ecx
  008df	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  008e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e9	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7685 : 			draw_line (x4, y2, x4, y3, MFD_COLOUR1);

  008ee	b8 04 00 00 00	 mov	 eax, 4
  008f3	6b c8 00	 imul	 ecx, eax, 0
  008f6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008fc	52		 push	 edx
  008fd	51		 push	 ecx
  008fe	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y3$[ebp]
  00903	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00908	51		 push	 ecx
  00909	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x4$[ebp]
  0090e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00913	51		 push	 ecx
  00914	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00919	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0091e	51		 push	 ecx
  0091f	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x4$[ebp]
  00924	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00929	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN19@draw_large:

; 7686 : 		}
; 7687 : 
; 7688 : 		get_2d_float_screen_coordinates (-0.2, 0.2, &x1, &y1);

  0092e	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  00931	50		 push	 eax
  00932	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  00935	51		 push	 ecx
  00936	51		 push	 ecx
  00937	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0093f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00944	51		 push	 ecx
  00945	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  0094d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00952	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 7689 : 		get_2d_float_screen_coordinates (0.2, 0.05, &x2, &y2);

  00957	8d 45 e8	 lea	 eax, DWORD PTR _y2$[ebp]
  0095a	50		 push	 eax
  0095b	8d 4d f8	 lea	 ecx, DWORD PTR _x2$[ebp]
  0095e	51		 push	 ecx
  0095f	51		 push	 ecx
  00960	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  00968	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0096d	51		 push	 ecx
  0096e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00976	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0097b	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 7690 : 
; 7691 : 		set_mono_font_colour (MFD_COLOUR1);

  00980	b8 04 00 00 00	 mov	 eax, 4
  00985	6b c8 00	 imul	 ecx, eax, 0
  00988	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0098e	52		 push	 edx
  0098f	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7692 : 		draw_line (x1, y1, x2, y1, MFD_COLOUR1);

  00994	b8 04 00 00 00	 mov	 eax, 4
  00999	6b c8 00	 imul	 ecx, eax, 0
  0099c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009a2	52		 push	 edx
  009a3	51		 push	 ecx
  009a4	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  009a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ae	51		 push	 ecx
  009af	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  009b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b9	51		 push	 ecx
  009ba	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  009bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009c4	51		 push	 ecx
  009c5	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  009ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009cf	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7693 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  009d4	b8 04 00 00 00	 mov	 eax, 4
  009d9	6b c8 00	 imul	 ecx, eax, 0
  009dc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009e2	52		 push	 edx
  009e3	51		 push	 ecx
  009e4	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  009e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ee	51		 push	 ecx
  009ef	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  009f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009f9	51		 push	 ecx
  009fa	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  009ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a04	51		 push	 ecx
  00a05	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00a0a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a0f	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7694 : 		draw_line (x1, y2, x2, y2, MFD_COLOUR1);

  00a14	b8 04 00 00 00	 mov	 eax, 4
  00a19	6b c8 00	 imul	 ecx, eax, 0
  00a1c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a22	52		 push	 edx
  00a23	51		 push	 ecx
  00a24	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00a29	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a2e	51		 push	 ecx
  00a2f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00a34	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a39	51		 push	 ecx
  00a3a	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00a3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a44	51		 push	 ecx
  00a45	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00a4a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a4f	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7695 : 		draw_line (x2, y1, x2, y2, MFD_COLOUR1);

  00a54	b8 04 00 00 00	 mov	 eax, 4
  00a59	6b c8 00	 imul	 ecx, eax, 0
  00a5c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a62	52		 push	 edx
  00a63	51		 push	 ecx
  00a64	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00a69	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a6e	51		 push	 ecx
  00a6f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00a74	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a79	51		 push	 ecx
  00a7a	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00a7f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a84	51		 push	 ecx
  00a85	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00a8a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a8f	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7696 : 
; 7697 : 		set_2d_mono_font_position (0.0, 0.15);

  00a94	51		 push	 ecx
  00a95	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00a9d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa2	51		 push	 ecx
  00aa3	0f 57 c0	 xorps	 xmm0, xmm0
  00aa6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aab	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7698 : 
; 7699 : 		if (!damaged)

  00ab0	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  00ab7	75 1a		 jne	 SHORT $LN20@draw_large

; 7700 : 			sprintf (s, "%4d", number);

  00ab9	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _number$[ebp]
  00abf	50		 push	 eax
  00ac0	68 00 00 00 00	 push	 OFFSET ??_C@_03GLKEJMAA@?$CF4d@
  00ac5	8d 4d 84	 lea	 ecx, DWORD PTR _s$[ebp]
  00ac8	51		 push	 ecx
  00ac9	e8 00 00 00 00	 call	 _sprintf
  00ace	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7701 : 		else

  00ad1	eb 11		 jmp	 SHORT $LN21@draw_large
$LN20@draw_large:

; 7702 : 			sprintf (s, "XXXX");

  00ad3	68 00 00 00 00	 push	 OFFSET ??_C@_04CPMKADPB@XXXX@
  00ad8	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00adb	50		 push	 eax
  00adc	e8 00 00 00 00	 call	 _sprintf
  00ae1	83 c4 08	 add	 esp, 8
$LN21@draw_large:

; 7703 : 
; 7704 : 		x_adjust = get_mono_font_string_width (s) * -0.5;

  00ae4	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00ae7	50		 push	 eax
  00ae8	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00aed	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1593[ebp]
  00af3	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1593[ebp]
  00afb	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00b03	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b07	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7705 : 		set_mono_font_rel_position (x_adjust, 0.0);

  00b0f	51		 push	 ecx
  00b10	0f 57 c0	 xorps	 xmm0, xmm0
  00b13	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b18	51		 push	 ecx
  00b19	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00b21	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b26	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7706 : 		print_mono_font_string (s);

  00b2b	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00b2e	50		 push	 eax
  00b2f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN17@draw_large:

; 7707 : 	}
; 7708 : 
; 7709 : 	// Chaff
; 7710 : 	set_2d_mono_font_position (0.0, -0.2);

  00b34	51		 push	 ecx
  00b35	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00b3d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b42	51		 push	 ecx
  00b43	0f 57 c0	 xorps	 xmm0, xmm0
  00b46	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b4b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7711 : 
; 7712 : 	s_ptr = "CHAFF";

  00b50	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_05FOOOBDLP@CHAFF@

; 7713 : 
; 7714 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  00b57	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  00b5a	50		 push	 eax
  00b5b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00b60	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1608[ebp]
  00b66	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1608[ebp]
  00b6e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00b76	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b7a	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7715 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00b82	51		 push	 ecx
  00b83	0f 57 c0	 xorps	 xmm0, xmm0
  00b86	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b8b	51		 push	 ecx
  00b8c	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00b94	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b99	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7716 : 	print_mono_font_string (s_ptr);

  00b9e	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  00ba1	50		 push	 eax
  00ba2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7717 : 
; 7718 : 	set_2d_mono_font_position (0.0, -0.3);

  00ba7	51		 push	 ecx
  00ba8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  00bb0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bb5	51		 push	 ecx
  00bb6	0f 57 c0	 xorps	 xmm0, xmm0
  00bb9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bbe	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7719 : 
; 7720 : 	if (get_local_entity_weapon_hardpoint_info (get_gunship_entity (),

  00bc3	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _damaged$[ebp]
  00bc9	50		 push	 eax
  00bca	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _number$[ebp]
  00bd0	51		 push	 ecx
  00bd1	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00bd7	52		 push	 edx
  00bd8	6a 43		 push	 67			; 00000043H
  00bda	6a 07		 push	 7
  00bdc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00be1	50		 push	 eax
  00be2	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  00be7	85 c0		 test	 eax, eax
  00be9	0f 84 84 00 00
	00		 je	 $LN22@draw_large

; 7721 : 		APACHE_CHAFF_DISPENSER, ENTITY_SUB_TYPE_WEAPON_CHAFF,
; 7722 : 		&weapon_sub_type, &number, &damaged))
; 7723 : 	{
; 7724 : 		if (!damaged)

  00bef	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  00bf6	75 1a		 jne	 SHORT $LN23@draw_large

; 7725 : 			sprintf (s, "%2d", number);

  00bf8	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _number$[ebp]
  00bfe	50		 push	 eax
  00bff	68 00 00 00 00	 push	 OFFSET ??_C@_03GPCJOALC@?$CF2d@
  00c04	8d 4d 84	 lea	 ecx, DWORD PTR _s$[ebp]
  00c07	51		 push	 ecx
  00c08	e8 00 00 00 00	 call	 _sprintf
  00c0d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7726 : 		else

  00c10	eb 11		 jmp	 SHORT $LN24@draw_large
$LN23@draw_large:

; 7727 : 			sprintf (s, "XX");

  00c12	68 00 00 00 00	 push	 OFFSET ??_C@_02BAHDIOLJ@XX@
  00c17	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00c1a	50		 push	 eax
  00c1b	e8 00 00 00 00	 call	 _sprintf
  00c20	83 c4 08	 add	 esp, 8
$LN24@draw_large:

; 7728 : 
; 7729 : 		x_adjust = get_mono_font_string_width (s) * -0.5;

  00c23	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00c26	50		 push	 eax
  00c27	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00c2c	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1631[ebp]
  00c32	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1631[ebp]
  00c3a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00c42	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c46	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7730 : 		set_mono_font_rel_position (x_adjust, 0.0);

  00c4e	51		 push	 ecx
  00c4f	0f 57 c0	 xorps	 xmm0, xmm0
  00c52	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c57	51		 push	 ecx
  00c58	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00c60	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c65	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7731 : 		print_mono_font_string (s);

  00c6a	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00c6d	50		 push	 eax
  00c6e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN22@draw_large:

; 7732 : 	}
; 7733 : 
; 7734 : 	// Flares
; 7735 : 	set_2d_mono_font_position (0.0, -0.45);

  00c73	51		 push	 ecx
  00c74	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bee66666
  00c7c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c81	51		 push	 ecx
  00c82	0f 57 c0	 xorps	 xmm0, xmm0
  00c85	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c8a	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7736 : 
; 7737 : 	s_ptr = "FLARE";

  00c8f	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_05MLKBHMKD@FLARE@

; 7738 : 
; 7739 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  00c96	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  00c99	50		 push	 eax
  00c9a	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00c9f	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1646[ebp]
  00ca5	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1646[ebp]
  00cad	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00cb5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00cb9	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7740 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00cc1	51		 push	 ecx
  00cc2	0f 57 c0	 xorps	 xmm0, xmm0
  00cc5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cca	51		 push	 ecx
  00ccb	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00cd3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cd8	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7741 : 	print_mono_font_string (s_ptr);

  00cdd	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  00ce0	50		 push	 eax
  00ce1	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7742 : 
; 7743 : 	set_2d_mono_font_position (0.0, -0.55);

  00ce6	51		 push	 ecx
  00ce7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  00cef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cf4	51		 push	 ecx
  00cf5	0f 57 c0	 xorps	 xmm0, xmm0
  00cf8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cfd	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7744 : 
; 7745 : 	if (get_local_entity_weapon_hardpoint_info (get_gunship_entity (),

  00d02	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _damaged$[ebp]
  00d08	50		 push	 eax
  00d09	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _number$[ebp]
  00d0f	51		 push	 ecx
  00d10	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00d16	52		 push	 edx
  00d17	6a 44		 push	 68			; 00000044H
  00d19	6a 07		 push	 7
  00d1b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00d20	50		 push	 eax
  00d21	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  00d26	85 c0		 test	 eax, eax
  00d28	0f 84 84 00 00
	00		 je	 $LN25@draw_large

; 7746 : 		APACHE_FLARE_DISPENSER, ENTITY_SUB_TYPE_WEAPON_FLARE,
; 7747 : 		&weapon_sub_type, &number, &damaged))
; 7748 : 	{
; 7749 : 		if (!damaged)

  00d2e	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  00d35	75 1a		 jne	 SHORT $LN26@draw_large

; 7750 : 			sprintf (s, "%2d", number);

  00d37	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _number$[ebp]
  00d3d	50		 push	 eax
  00d3e	68 00 00 00 00	 push	 OFFSET ??_C@_03GPCJOALC@?$CF2d@
  00d43	8d 4d 84	 lea	 ecx, DWORD PTR _s$[ebp]
  00d46	51		 push	 ecx
  00d47	e8 00 00 00 00	 call	 _sprintf
  00d4c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7751 : 		else

  00d4f	eb 11		 jmp	 SHORT $LN27@draw_large
$LN26@draw_large:

; 7752 : 			sprintf (s, "XX");

  00d51	68 00 00 00 00	 push	 OFFSET ??_C@_02BAHDIOLJ@XX@
  00d56	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00d59	50		 push	 eax
  00d5a	e8 00 00 00 00	 call	 _sprintf
  00d5f	83 c4 08	 add	 esp, 8
$LN27@draw_large:

; 7753 : 
; 7754 : 		x_adjust = get_mono_font_string_width (s) * -0.5;

  00d62	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00d65	50		 push	 eax
  00d66	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00d6b	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1669[ebp]
  00d71	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1669[ebp]
  00d79	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00d81	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00d85	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7755 : 		set_mono_font_rel_position (x_adjust, 0.0);

  00d8d	51		 push	 ecx
  00d8e	0f 57 c0	 xorps	 xmm0, xmm0
  00d91	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d96	51		 push	 ecx
  00d97	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00d9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00da4	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7756 : 		print_mono_font_string (s);

  00da9	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00dac	50		 push	 eax
  00dad	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN25@draw_large:

; 7757 : 	}
; 7758 : 
; 7759 : 	// auto CM
; 7760 : 	set_2d_mono_font_position (0.0, -0.7);

  00db2	51		 push	 ecx
  00db3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00dbb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dc0	51		 push	 ecx
  00dc1	0f 57 c0	 xorps	 xmm0, xmm0
  00dc4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dc9	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7761 : 
; 7762 : 	if (get_global_auto_counter_measures ())

  00dce	83 3d 90 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+144, 0
  00dd5	74 09		 je	 SHORT $LN28@draw_large

; 7763 : 		s_ptr = "AUTO";

  00dd7	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_04LMMJFDCN@AUTO@

; 7764 : 	else

  00dde	eb 07		 jmp	 SHORT $LN29@draw_large
$LN28@draw_large:

; 7765 : 		s_ptr = "MAN";

  00de0	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_03KIGHCFHP@MAN@
$LN29@draw_large:

; 7766 : 
; 7767 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  00de7	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  00dea	50		 push	 eax
  00deb	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00df0	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1684[ebp]
  00df6	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1684[ebp]
  00dfe	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00e06	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00e0a	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7768 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00e12	51		 push	 ecx
  00e13	0f 57 c0	 xorps	 xmm0, xmm0
  00e16	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e1b	51		 push	 ecx
  00e1c	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00e24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e29	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7769 : 	print_mono_font_string (s_ptr);

  00e2e	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  00e31	50		 push	 eax
  00e32	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7770 : 
; 7771 : 	// master arm box
; 7772 : 
; 7773 : 	set_2d_mono_font_position (0.0, 0.89);

  00e37	51		 push	 ecx
  00e38	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f63d70a
  00e40	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e45	51		 push	 ecx
  00e46	0f 57 c0	 xorps	 xmm0, xmm0
  00e49	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e4e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7774 : 
; 7775 : 	if (selected_weapon != ENTITY_SUB_TYPE_WEAPON_NO_WEAPON)

  00e53	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _selected_weapon$[ebp], 0
  00e5a	0f 84 c5 03 00
	00		 je	 $LN30@draw_large

; 7776 : 	{
; 7777 : 		draw_box(-0.25, 0.7, 0.25, 1.0, TRUE, MFD_COLOUR1);

  00e60	b8 04 00 00 00	 mov	 eax, 4
  00e65	6b c8 00	 imul	 ecx, eax, 0
  00e68	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e6e	52		 push	 edx
  00e6f	6a 01		 push	 1
  00e71	51		 push	 ecx
  00e72	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00e7a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e7f	51		 push	 ecx
  00e80	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  00e88	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e8d	51		 push	 ecx
  00e8e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00e96	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e9b	51		 push	 ecx
  00e9c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  00ea4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ea9	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7778 : 
; 7779 : 		set_mono_font_colour (MFD_CLEAR_COLOUR);

  00eae	b8 04 00 00 00	 mov	 eax, 4
  00eb3	6b c8 13	 imul	 ecx, eax, 19
  00eb6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ebc	52		 push	 edx
  00ebd	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7780 : 		s_ptr = "ARM";

  00ec2	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_03NHPMNECN@ARM@

; 7781 : 
; 7782 : 		draw_box(-0.14, 0.93,-0.09, 1.00, TRUE, MFD_CLEAR_COLOUR);

  00ec9	b8 04 00 00 00	 mov	 eax, 4
  00ece	6b c8 13	 imul	 ecx, eax, 19
  00ed1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ed7	52		 push	 edx
  00ed8	6a 01		 push	 1
  00eda	51		 push	 ecx
  00edb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00ee3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ee8	51		 push	 ecx
  00ee9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdb851ec
  00ef1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ef6	51		 push	 ecx
  00ef7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  00eff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f04	51		 push	 ecx
  00f05	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  00f0d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f12	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7783 : 		draw_box(-0.03, 0.93, 0.03, 1.00, TRUE, MFD_CLEAR_COLOUR);

  00f17	b8 04 00 00 00	 mov	 eax, 4
  00f1c	6b c8 13	 imul	 ecx, eax, 19
  00f1f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f25	52		 push	 edx
  00f26	6a 01		 push	 1
  00f28	51		 push	 ecx
  00f29	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00f31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f36	51		 push	 ecx
  00f37	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3cf5c28f
  00f3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f44	51		 push	 ecx
  00f45	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  00f4d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f52	51		 push	 ecx
  00f53	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bcf5c28f
  00f5b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f60	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7784 : 		draw_box( 0.10, 0.93, 0.15, 1.00, TRUE, MFD_CLEAR_COLOUR);

  00f65	b8 04 00 00 00	 mov	 eax, 4
  00f6a	6b c8 13	 imul	 ecx, eax, 19
  00f6d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f73	52		 push	 edx
  00f74	6a 01		 push	 1
  00f76	51		 push	 ecx
  00f77	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00f7f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f84	51		 push	 ecx
  00f85	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00f8d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f92	51		 push	 ecx
  00f93	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  00f9b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fa0	51		 push	 ecx
  00fa1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00fa9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fae	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7785 : 		draw_box(-0.25, 0.93,-0.19, 0.88, TRUE, MFD_CLEAR_COLOUR);

  00fb3	b8 04 00 00 00	 mov	 eax, 4
  00fb8	6b c8 13	 imul	 ecx, eax, 19
  00fbb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00fc1	52		 push	 edx
  00fc2	6a 01		 push	 1
  00fc4	51		 push	 ecx
  00fc5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6147ae
  00fcd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fd2	51		 push	 ecx
  00fd3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be428f5c
  00fdb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fe0	51		 push	 ecx
  00fe1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  00fe9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fee	51		 push	 ecx
  00fef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  00ff7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ffc	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7786 : 		draw_box(-0.25, 0.77,-0.19, 0.82, TRUE, MFD_CLEAR_COLOUR);

  01001	b8 04 00 00 00	 mov	 eax, 4
  01006	6b c8 13	 imul	 ecx, eax, 19
  01009	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0100f	52		 push	 edx
  01010	6a 01		 push	 1
  01012	51		 push	 ecx
  01013	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f51eb85
  0101b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01020	51		 push	 ecx
  01021	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be428f5c
  01029	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0102e	51		 push	 ecx
  0102f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb8
  01037	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0103c	51		 push	 ecx
  0103d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  01045	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0104a	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7787 : 		draw_box( 0.25, 0.93, 0.19, 0.88, TRUE, MFD_CLEAR_COLOUR);

  0104f	b8 04 00 00 00	 mov	 eax, 4
  01054	6b c8 13	 imul	 ecx, eax, 19
  01057	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0105d	52		 push	 edx
  0105e	6a 01		 push	 1
  01060	51		 push	 ecx
  01061	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6147ae
  01069	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0106e	51		 push	 ecx
  0106f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e428f5c
  01077	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0107c	51		 push	 ecx
  0107d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  01085	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0108a	51		 push	 ecx
  0108b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  01093	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01098	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7788 : 		draw_box( 0.25, 0.77, 0.19, 0.82, TRUE, MFD_CLEAR_COLOUR);

  0109d	b8 04 00 00 00	 mov	 eax, 4
  010a2	6b c8 13	 imul	 ecx, eax, 19
  010a5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  010ab	52		 push	 edx
  010ac	6a 01		 push	 1
  010ae	51		 push	 ecx
  010af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f51eb85
  010b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010bc	51		 push	 ecx
  010bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e428f5c
  010c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010ca	51		 push	 ecx
  010cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb8
  010d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010d8	51		 push	 ecx
  010d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  010e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010e6	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7789 : 		draw_box(-0.14, 0.77,-0.09, 0.70, TRUE, MFD_CLEAR_COLOUR);

  010eb	b8 04 00 00 00	 mov	 eax, 4
  010f0	6b c8 13	 imul	 ecx, eax, 19
  010f3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  010f9	52		 push	 edx
  010fa	6a 01		 push	 1
  010fc	51		 push	 ecx
  010fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  01105	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0110a	51		 push	 ecx
  0110b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdb851ec
  01113	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01118	51		 push	 ecx
  01119	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb8
  01121	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01126	51		 push	 ecx
  01127	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  0112f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01134	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7790 : 		draw_box(-0.03, 0.77, 0.03, 0.70, TRUE, MFD_CLEAR_COLOUR);

  01139	b8 04 00 00 00	 mov	 eax, 4
  0113e	6b c8 13	 imul	 ecx, eax, 19
  01141	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01147	52		 push	 edx
  01148	6a 01		 push	 1
  0114a	51		 push	 ecx
  0114b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  01153	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01158	51		 push	 ecx
  01159	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3cf5c28f
  01161	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01166	51		 push	 ecx
  01167	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb8
  0116f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01174	51		 push	 ecx
  01175	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bcf5c28f
  0117d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01182	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7791 : 		draw_box( 0.10, 0.77, 0.15, 0.70, TRUE, MFD_CLEAR_COLOUR);

  01187	b8 04 00 00 00	 mov	 eax, 4
  0118c	6b c8 13	 imul	 ecx, eax, 19
  0118f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01195	52		 push	 edx
  01196	6a 01		 push	 1
  01198	51		 push	 ecx
  01199	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  011a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011a6	51		 push	 ecx
  011a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  011af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011b4	51		 push	 ecx
  011b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb8
  011bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011c2	51		 push	 ecx
  011c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  011cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011d0	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7792 : 
; 7793 : 		draw_box(-0.25, 0.7, 0.25, 1.0, FALSE, MFD_COLOUR1);

  011d5	b8 04 00 00 00	 mov	 eax, 4
  011da	6b c8 00	 imul	 ecx, eax, 0
  011dd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  011e3	52		 push	 edx
  011e4	6a 00		 push	 0
  011e6	51		 push	 ecx
  011e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  011ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011f4	51		 push	 ecx
  011f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  011fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01202	51		 push	 ecx
  01203	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  0120b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01210	51		 push	 ecx
  01211	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  01219	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0121e	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7794 : 	}
; 7795 : 	else

  01223	eb 55		 jmp	 SHORT $LN31@draw_large
$LN30@draw_large:

; 7796 : 	{
; 7797 : 		draw_box(-0.25, 0.7, 0.25, 1.0, FALSE, MFD_COLOUR1);

  01225	b8 04 00 00 00	 mov	 eax, 4
  0122a	6b c8 00	 imul	 ecx, eax, 0
  0122d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01233	52		 push	 edx
  01234	6a 00		 push	 0
  01236	51		 push	 ecx
  01237	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0123f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01244	51		 push	 ecx
  01245	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  0124d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01252	51		 push	 ecx
  01253	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  0125b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01260	51		 push	 ecx
  01261	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  01269	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0126e	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7798 : 		s_ptr = "SAFE";

  01273	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_04JMNPMIJD@SAFE@
$LN31@draw_large:

; 7799 : 	}
; 7800 : 
; 7801 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  0127a	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  0127d	50		 push	 eax
  0127e	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01283	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1831[ebp]
  01289	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1831[ebp]
  01291	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01299	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0129d	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7802 : 	set_mono_font_rel_position (x_adjust, 0.0);

  012a5	51		 push	 ecx
  012a6	0f 57 c0	 xorps	 xmm0, xmm0
  012a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012ae	51		 push	 ecx
  012af	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  012b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012bc	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7803 : 	print_mono_font_string (s_ptr);

  012c1	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  012c4	50		 push	 eax
  012c5	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7804 : 
; 7805 : 	// targeting system
; 7806 : 	draw_box(-0.85, 0.8, -0.4, 0.55, FALSE, MFD_COLOUR1);

  012ca	b8 04 00 00 00	 mov	 eax, 4
  012cf	6b c8 00	 imul	 ecx, eax, 0
  012d2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  012d8	52		 push	 edx
  012d9	6a 00		 push	 0
  012db	51		 push	 ecx
  012dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  012e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012e9	51		 push	 ecx
  012ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  012f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012f7	51		 push	 ecx
  012f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  01300	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01305	51		 push	 ecx
  01306	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  0130e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01313	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7807 : 
; 7808 : 	set_2d_mono_font_position (-0.63, 0.7);

  01318	51		 push	 ecx
  01319	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  01321	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01326	51		 push	 ecx
  01327	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  0132f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01334	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7809 : 	set_mono_font_colour (MFD_COLOUR1);

  01339	b8 04 00 00 00	 mov	 eax, 4
  0133e	6b c8 00	 imul	 ecx, eax, 0
  01341	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01347	52		 push	 edx
  01348	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7810 : 
; 7811 : 	switch (target_acquisition_system)

  0134d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; target_acquisition_system
  01352	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv624[ebp], eax
  01358	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv624[ebp]
  0135e	83 e9 01	 sub	 ecx, 1
  01361	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv624[ebp], ecx
  01367	83 bd d4 fe ff
	ff 07		 cmp	 DWORD PTR tv624[ebp], 7
  0136e	77 28		 ja	 SHORT $LN35@draw_large
  01370	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR tv624[ebp]
  01376	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN109@draw_large[edx*4]
$LN32@draw_large:

; 7812 : 	{
; 7813 : 	case TARGET_ACQUISITION_SYSTEM_GROUND_RADAR:
; 7814 : 	case TARGET_ACQUISITION_SYSTEM_AIR_RADAR:
; 7815 : 		s_ptr = "FCR";

  0137d	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_03JKJFCLEN@FCR@

; 7816 : 		break;

  01384	eb 19		 jmp	 SHORT $LN2@draw_large
$LN33@draw_large:

; 7817 : 	case TARGET_ACQUISITION_SYSTEM_FLIR:
; 7818 : 	case TARGET_ACQUISITION_SYSTEM_DTV:
; 7819 : 	case TARGET_ACQUISITION_SYSTEM_DVO:
; 7820 : 		s_ptr = "TADS";

  01386	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_04DBODHFDK@TADS@

; 7821 : 		break;

  0138d	eb 10		 jmp	 SHORT $LN2@draw_large
$LN34@draw_large:

; 7822 : 	case TARGET_ACQUISITION_SYSTEM_IHADSS:
; 7823 : 		s_ptr = "IHADSS";

  0138f	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_06NOICLIMH@IHADSS@

; 7824 : 		break;

  01396	eb 07		 jmp	 SHORT $LN2@draw_large
$LN35@draw_large:

; 7825 : 	case TARGET_ACQUISITION_SYSTEM_OFF:
; 7826 : 	default:
; 7827 : 		s_ptr = "NONE";

  01398	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_04OKGDLNCL@NONE@
$LN2@draw_large:

; 7828 : 		break;
; 7829 : 	}
; 7830 : 
; 7831 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  0139f	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  013a2	50		 push	 eax
  013a3	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  013a8	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1861[ebp]
  013ae	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1861[ebp]
  013b6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  013be	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  013c2	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7832 : 	set_mono_font_rel_position (x_adjust, 0.0);

  013ca	51		 push	 ecx
  013cb	0f 57 c0	 xorps	 xmm0, xmm0
  013ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013d3	51		 push	 ecx
  013d4	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  013dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013e1	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7833 : 	print_mono_font_string (s_ptr);

  013e6	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  013e9	50		 push	 eax
  013ea	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7834 : 
; 7835 : 	// range finding system
; 7836 : 	draw_box(0.85, 0.8, 0.4, 0.55, FALSE, MFD_COLOUR1);

  013ef	b8 04 00 00 00	 mov	 eax, 4
  013f4	6b c8 00	 imul	 ecx, eax, 0
  013f7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  013fd	52		 push	 edx
  013fe	6a 00		 push	 0
  01400	51		 push	 ecx
  01401	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  01409	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0140e	51		 push	 ecx
  0140f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  01417	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0141c	51		 push	 ecx
  0141d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  01425	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0142a	51		 push	 ecx
  0142b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  01433	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01438	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7837 : 
; 7838 : 	set_2d_mono_font_position (0.64, 0.7);

  0143d	51		 push	 ecx
  0143e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  01446	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0144b	51		 push	 ecx
  0144c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f23d70a
  01454	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01459	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7839 : 
; 7840 : 	switch (get_range_finder())

  0145e	e8 00 00 00 00	 call	 ?get_range_finder@@YG?AW4rangefinding_system@@XZ ; get_range_finder
  01463	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv646[ebp], eax
  01469	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR tv646[ebp], 0
  01470	74 0b		 je	 SHORT $LN36@draw_large
  01472	83 bd d4 fe ff
	ff 01		 cmp	 DWORD PTR tv646[ebp], 1
  01479	74 0b		 je	 SHORT $LN37@draw_large
  0147b	eb 12		 jmp	 SHORT $LN38@draw_large
$LN36@draw_large:

; 7841 : 	{
; 7842 : 	case RANGEFINDER_FCR:
; 7843 : 		s_ptr = "FCR";

  0147d	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_03JKJFCLEN@FCR@

; 7844 : 		break;

  01484	eb 10		 jmp	 SHORT $LN4@draw_large
$LN37@draw_large:

; 7845 : 	case RANGEFINDER_LASER:
; 7846 : 		s_ptr = "LRF";

  01486	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_03MGGCNFDL@LRF@

; 7847 : 		break;

  0148d	eb 07		 jmp	 SHORT $LN4@draw_large
$LN38@draw_large:

; 7848 : 	case RANGEFINDER_TRIANGULATION:
; 7849 : 	default:
; 7850 : 		s_ptr = "TRNGL";

  0148f	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_05MJCDDMFE@TRNGL@
$LN4@draw_large:

; 7851 : 		break;
; 7852 : 	}
; 7853 : 
; 7854 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  01496	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  01499	50		 push	 eax
  0149a	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0149f	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1887[ebp]
  014a5	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1887[ebp]
  014ad	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  014b5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  014b9	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7855 : 	set_mono_font_rel_position (x_adjust, 0.0);

  014c1	51		 push	 ecx
  014c2	0f 57 c0	 xorps	 xmm0, xmm0
  014c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014ca	51		 push	 ecx
  014cb	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  014d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014d8	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7856 : 	print_mono_font_string (s_ptr);

  014dd	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  014e0	50		 push	 eax
  014e1	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7857 : 
; 7858 : 	// launch mode
; 7859 : 	draw_box(-0.9, 0.45, -0.45, 0.2, FALSE, MFD_COLOUR1);

  014e6	b8 04 00 00 00	 mov	 eax, 4
  014eb	6b c8 00	 imul	 ecx, eax, 0
  014ee	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  014f4	52		 push	 edx
  014f5	6a 00		 push	 0
  014f7	51		 push	 ecx
  014f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  01500	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01505	51		 push	 ecx
  01506	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bee66666
  0150e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01513	51		 push	 ecx
  01514	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  0151c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01521	51		 push	 ecx
  01522	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  0152a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0152f	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7860 : 
; 7861 : 	set_2d_mono_font_position (-0.65, 0.35);

  01534	51		 push	 ecx
  01535	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  0153d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01542	51		 push	 ecx
  01543	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  0154b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01550	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7862 : 
; 7863 : 	if (get_local_entity_int_value (get_gunship_entity (), INT_TYPE_LOCK_ON_AFTER_LAUNCH))

  01555	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0155c	74 0f		 je	 SHORT $LN97@draw_large
  0155e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  01563	8b 08		 mov	 ecx, DWORD PTR [eax]
  01565	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv672[ebp], ecx
  0156b	eb 20		 jmp	 SHORT $LN98@draw_large
$LN97@draw_large:
  0156d	68 b7 1e 00 00	 push	 7863			; 00001eb7H
  01572	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01577	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0157d	52		 push	 edx
  0157e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01583	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv672[ebp], 0
$LN98@draw_large:
  0158d	b8 01 00 00 00	 mov	 eax, 1
  01592	85 c0		 test	 eax, eax
  01594	74 0c		 je	 SHORT $LN99@draw_large
  01596	c7 85 d0 fe ff
	ff 7e 00 00 00	 mov	 DWORD PTR tv679[ebp], 126 ; 0000007eH
  015a0	eb 20		 jmp	 SHORT $LN100@draw_large
$LN99@draw_large:
  015a2	68 b7 1e 00 00	 push	 7863			; 00001eb7H
  015a7	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  015ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  015b2	51		 push	 ecx
  015b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  015b8	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv679[ebp], 0
$LN100@draw_large:
  015c2	6a 7e		 push	 126			; 0000007eH
  015c4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  015ca	52		 push	 edx
  015cb	69 85 d4 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv672[ebp], 1116
  015d5	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR tv679[ebp]
  015db	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  015e2	ff d2		 call	 edx
  015e4	85 c0		 test	 eax, eax
  015e6	74 09		 je	 SHORT $LN39@draw_large

; 7864 : 		s_ptr = "LOAL";

  015e8	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_04EKDNBCDP@LOAL@

; 7865 : 	else

  015ef	eb 07		 jmp	 SHORT $LN40@draw_large
$LN39@draw_large:

; 7866 : 		s_ptr = "LOBL";

  015f1	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_04EIHLKMGG@LOBL@
$LN40@draw_large:

; 7867 : 
; 7868 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  015f8	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  015fb	50		 push	 eax
  015fc	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01601	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1921[ebp]
  01607	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1921[ebp]
  0160f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01617	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0161b	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7869 : 	set_mono_font_rel_position (x_adjust, 0.0);

  01623	51		 push	 ecx
  01624	0f 57 c0	 xorps	 xmm0, xmm0
  01627	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0162c	51		 push	 ecx
  0162d	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01635	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0163a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7870 : 	print_mono_font_string (s_ptr);

  0163f	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  01642	50		 push	 eax
  01643	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7871 : 
; 7872 : 	// rocket salve
; 7873 : 	draw_box(0.9, 0.45, 0.45, 0.2, FALSE, MFD_COLOUR1);

  01648	b8 04 00 00 00	 mov	 eax, 4
  0164d	6b c8 00	 imul	 ecx, eax, 0
  01650	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01656	52		 push	 edx
  01657	6a 00		 push	 0
  01659	51		 push	 ecx
  0165a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  01662	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01667	51		 push	 ecx
  01668	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  01670	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01675	51		 push	 ecx
  01676	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  0167e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01683	51		 push	 ecx
  01684	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0168c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01691	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7874 : 
; 7875 : 	set_2d_mono_font_position (0.67, 0.42);

  01696	51		 push	 ecx
  01697	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  0169f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016a4	51		 push	 ecx
  016a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f2b851f
  016ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016b2	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7876 : 	s_ptr = "SALVO";

  016b7	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_05GPKGLDLB@SALVO@

; 7877 : 
; 7878 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  016be	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  016c1	50		 push	 eax
  016c2	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  016c7	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1946[ebp]
  016cd	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1946[ebp]
  016d5	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  016dd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  016e1	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7879 : 	set_mono_font_rel_position (x_adjust, 0.0);

  016e9	51		 push	 ecx
  016ea	0f 57 c0	 xorps	 xmm0, xmm0
  016ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016f2	51		 push	 ecx
  016f3	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  016fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01700	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7880 : 	print_mono_font_string (s_ptr);

  01705	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  01708	50		 push	 eax
  01709	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7881 : 
; 7882 : 	set_2d_mono_font_position (0.67, 0.31);

  0170e	51		 push	 ecx
  0170f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e9eb852
  01717	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0171c	51		 push	 ecx
  0171d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f2b851f
  01725	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0172a	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7883 : 	if (rocket_salvo_size == ROCKET_SALVO_SIZE_ALL)

  0172f	81 3d 00 00 00
	00 e8 03 00 00	 cmp	 DWORD PTR ?rocket_salvo_size@@3HA, 1000 ; rocket_salvo_size, 000003e8H
  01739	75 13		 jne	 SHORT $LN41@draw_large

; 7884 : 		sprintf(s, "ALL");

  0173b	68 00 00 00 00	 push	 OFFSET ??_C@_03NIFPGLBG@ALL@
  01740	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  01743	50		 push	 eax
  01744	e8 00 00 00 00	 call	 _sprintf
  01749	83 c4 08	 add	 esp, 8

; 7885 : 	else

  0174c	eb 17		 jmp	 SHORT $LN42@draw_large
$LN41@draw_large:

; 7886 : 		sprintf(s, "%2d", rocket_salvo_size);

  0174e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rocket_salvo_size@@3HA ; rocket_salvo_size
  01753	50		 push	 eax
  01754	68 00 00 00 00	 push	 OFFSET ??_C@_03GPCJOALC@?$CF2d@
  01759	8d 4d 84	 lea	 ecx, DWORD PTR _s$[ebp]
  0175c	51		 push	 ecx
  0175d	e8 00 00 00 00	 call	 _sprintf
  01762	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN42@draw_large:

; 7887 : 
; 7888 : 	x_adjust = get_mono_font_string_width (s) * -0.6;

  01765	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  01768	50		 push	 eax
  01769	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0176e	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1964[ebp]
  01774	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1964[ebp]
  0177c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe3333333333333
  01784	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01788	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7889 : 	set_mono_font_rel_position (x_adjust, 0.0);

  01790	51		 push	 ecx
  01791	0f 57 c0	 xorps	 xmm0, xmm0
  01794	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01799	51		 push	 ecx
  0179a	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  017a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017a7	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7890 : 	print_mono_font_string (s);

  017ac	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  017af	50		 push	 eax
  017b0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7891 : 
; 7892 : 	// weapon pylons
; 7893 : 	for (pylon = APACHE_LHS_INNER_PYLON; pylon <= APACHE_RHS_WING_TIP_MOUNT; pylon++)

  017b5	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pylon$[ebp], 0
  017bf	eb 0f		 jmp	 SHORT $LN8@draw_large
$LN6@draw_large:
  017c1	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _pylon$[ebp]
  017c7	83 c0 01	 add	 eax, 1
  017ca	89 85 6c ff ff
	ff		 mov	 DWORD PTR _pylon$[ebp], eax
$LN8@draw_large:
  017d0	83 bd 6c ff ff
	ff 05		 cmp	 DWORD PTR _pylon$[ebp], 5
  017d7	0f 8f ae 0e 00
	00		 jg	 $LN7@draw_large

; 7894 : 	{
; 7895 : 		float pylon_x, pylon_y;
; 7896 : 
; 7897 : 		pylon_y = -0.35;

  017dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  017e5	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _pylon_y$18[ebp], xmm0

; 7898 : 		switch (pylon)

  017ed	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _pylon$[ebp]
  017f3	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv730[ebp], eax
  017f9	83 bd d4 fe ff
	ff 05		 cmp	 DWORD PTR tv730[ebp], 5
  01800	77 77		 ja	 SHORT $LN9@draw_large
  01802	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv730[ebp]
  01808	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN110@draw_large[ecx*4]
$LN43@draw_large:

; 7899 : 		{
; 7900 : 		case APACHE_LHS_INNER_PYLON:
; 7901 : 			pylon_x = -0.42;

  0180f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bed70a3d
  01817	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _pylon_x$19[ebp], xmm0

; 7902 : 			break;

  0181f	eb 58		 jmp	 SHORT $LN9@draw_large
$LN44@draw_large:

; 7903 : 		case APACHE_RHS_INNER_PYLON:
; 7904 : 			pylon_x = 0.42;

  01821	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  01829	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _pylon_x$19[ebp], xmm0

; 7905 : 			break;

  01831	eb 46		 jmp	 SHORT $LN9@draw_large
$LN45@draw_large:

; 7906 : 		case APACHE_LHS_OUTER_PYLON:
; 7907 : 			pylon_x = -0.74;

  01833	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3d70a4
  0183b	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _pylon_x$19[ebp], xmm0

; 7908 : 			break;

  01843	eb 34		 jmp	 SHORT $LN9@draw_large
$LN46@draw_large:

; 7909 : 		case APACHE_RHS_OUTER_PYLON:
; 7910 : 			pylon_x = 0.74;

  01845	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3d70a4
  0184d	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _pylon_x$19[ebp], xmm0

; 7911 : 			break;

  01855	eb 22		 jmp	 SHORT $LN9@draw_large
$LN47@draw_large:

; 7912 : 		case APACHE_LHS_WING_TIP_MOUNT:
; 7913 : 			pylon_x = -0.97;

  01857	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7851ec
  0185f	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _pylon_x$19[ebp], xmm0

; 7914 : 			break;

  01867	eb 10		 jmp	 SHORT $LN9@draw_large
$LN48@draw_large:

; 7915 : 		case APACHE_RHS_WING_TIP_MOUNT:
; 7916 : 			pylon_x = 0.97;

  01869	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7851ec
  01871	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _pylon_x$19[ebp], xmm0
$LN9@draw_large:

; 7917 : 			break;
; 7918 : 		}
; 7919 : 
; 7920 : 		if (get_local_entity_weapon_hardpoint_info (get_gunship_entity (),

  01879	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _damaged$[ebp]
  0187f	50		 push	 eax
  01880	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _number$[ebp]
  01886	51		 push	 ecx
  01887	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  0188d	52		 push	 edx
  0188e	6a 00		 push	 0
  01890	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _pylon$[ebp]
  01896	50		 push	 eax
  01897	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0189d	51		 push	 ecx
  0189e	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  018a3	85 c0		 test	 eax, eax
  018a5	0f 84 db 0d 00
	00		 je	 $LN86@draw_large

; 7921 : 			pylon, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON,
; 7922 : 			&weapon_sub_type, &number, &damaged))
; 7923 : 		{
; 7924 : 			if ((weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AGM114L_LONGBOW_HELLFIRE) || (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AGM114K_HELLFIRE_II))

  018ab	83 bd 68 ff ff
	ff 2d		 cmp	 DWORD PTR _weapon_sub_type$[ebp], 45 ; 0000002dH
  018b2	74 0d		 je	 SHORT $LN52@draw_large
  018b4	83 bd 68 ff ff
	ff 2e		 cmp	 DWORD PTR _weapon_sub_type$[ebp], 46 ; 0000002eH
  018bb	0f 85 d6 03 00
	00		 jne	 $LN50@draw_large
$LN52@draw_large:

; 7925 : 			{
; 7926 : 				int i;
; 7927 : 				float last_offset;  // is last missile on the left or right side of pylon
; 7928 : 
; 7929 : 				if (pylon == APACHE_LHS_INNER_PYLON || pylon == APACHE_LHS_OUTER_PYLON)

  018c1	83 bd 6c ff ff
	ff 00		 cmp	 DWORD PTR _pylon$[ebp], 0
  018c8	74 09		 je	 SHORT $LN55@draw_large
  018ca	83 bd 6c ff ff
	ff 02		 cmp	 DWORD PTR _pylon$[ebp], 2
  018d1	75 12		 jne	 SHORT $LN53@draw_large
$LN55@draw_large:

; 7930 : 					last_offset = 0.07;

  018d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d8f5c29
  018db	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _last_offset$16[ebp], xmm0

; 7931 : 				else

  018e3	eb 10		 jmp	 SHORT $LN54@draw_large
$LN53@draw_large:

; 7932 : 					last_offset = -0.07;

  018e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd8f5c29
  018ed	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _last_offset$16[ebp], xmm0
$LN54@draw_large:

; 7933 : 
; 7934 : 				for (i = 1; i <= number; i++)

  018f5	c7 85 58 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _i$17[ebp], 1
  018ff	eb 0f		 jmp	 SHORT $LN13@draw_large
$LN11@draw_large:
  01901	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _i$17[ebp]
  01907	83 c0 01	 add	 eax, 1
  0190a	89 85 58 ff ff
	ff		 mov	 DWORD PTR _i$17[ebp], eax
$LN13@draw_large:
  01910	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _i$17[ebp]
  01916	3b 85 78 ff ff
	ff		 cmp	 eax, DWORD PTR _number$[ebp]
  0191c	0f 8f 70 03 00
	00		 jg	 $LN12@draw_large

; 7935 : 				{
; 7936 : 					float missile_x, missile_y;
; 7937 : 
; 7938 : 					switch(i)

  01922	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _i$17[ebp]
  01928	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv778[ebp], eax
  0192e	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv778[ebp]
  01934	83 e9 01	 sub	 ecx, 1
  01937	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv778[ebp], ecx
  0193d	83 bd d4 fe ff
	ff 03		 cmp	 DWORD PTR tv778[ebp], 3
  01944	0f 87 eb 00 00
	00		 ja	 $LN60@draw_large
  0194a	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR tv778[ebp]
  01950	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN111@draw_large[edx*4]
$LN56@draw_large:

; 7939 : 					{
; 7940 : 						case 1:
; 7941 : 							missile_x = pylon_x + last_offset;

  01957	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  0195f	f3 0f 58 85 54
	ff ff ff	 addss	 xmm0, DWORD PTR _last_offset$16[ebp]
  01967	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _missile_x$15[ebp], xmm0

; 7942 : 							missile_y = pylon_y - 0.18;

  0196f	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  01977	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc70a3d70a3d70a
  0197f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01983	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _missile_y$14[ebp], xmm0

; 7943 : 							break;

  0198b	e9 c8 00 00 00	 jmp	 $LN14@draw_large
$LN57@draw_large:

; 7944 : 						case 2:
; 7945 : 							missile_x = pylon_x - last_offset;

  01990	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  01998	f3 0f 5c 85 54
	ff ff ff	 subss	 xmm0, DWORD PTR _last_offset$16[ebp]
  019a0	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _missile_x$15[ebp], xmm0

; 7946 : 							missile_y = pylon_y - 0.18;

  019a8	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  019b0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc70a3d70a3d70a
  019b8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  019bc	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _missile_y$14[ebp], xmm0

; 7947 : 							break;

  019c4	e9 8f 00 00 00	 jmp	 $LN14@draw_large
$LN58@draw_large:

; 7948 : 						case 3:
; 7949 : 							missile_x = pylon_x + last_offset;

  019c9	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  019d1	f3 0f 58 85 54
	ff ff ff	 addss	 xmm0, DWORD PTR _last_offset$16[ebp]
  019d9	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _missile_x$15[ebp], xmm0

; 7950 : 							missile_y = pylon_y + 0.22;

  019e1	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  019e9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fcc28f5c28f5c29
  019f1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  019f5	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _missile_y$14[ebp], xmm0

; 7951 : 							break;

  019fd	eb 59		 jmp	 SHORT $LN14@draw_large
$LN59@draw_large:

; 7952 : 						case 4:
; 7953 : 							missile_x = pylon_x - last_offset;

  019ff	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  01a07	f3 0f 5c 85 54
	ff ff ff	 subss	 xmm0, DWORD PTR _last_offset$16[ebp]
  01a0f	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _missile_x$15[ebp], xmm0

; 7954 : 							missile_y = pylon_y + 0.22;

  01a17	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  01a1f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fcc28f5c28f5c29
  01a27	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a2b	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _missile_y$14[ebp], xmm0

; 7955 : 							break;

  01a33	eb 23		 jmp	 SHORT $LN14@draw_large
$LN60@draw_large:

; 7956 : 						default:
; 7957 : 							ASSERT(!"more than 4 hellfires on Apache pylon");

  01a35	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CG@DKLMAF@more?5than?54?5hellfires?5on?5Apache@
  01a3a	85 c0		 test	 eax, eax
  01a3c	74 1a		 je	 SHORT $LN61@draw_large
  01a3e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z@4JA
  01a43	05 64 01 00 00	 add	 eax, 356		; 00000164H
  01a48	50		 push	 eax
  01a49	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01a4e	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@NDBFDPHK@?$CB?$CCmore?5than?54?5hellfires?5on?5Apac@
  01a53	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN61@draw_large:
$LN14@draw_large:

; 7958 : 					}
; 7959 : 
; 7960 : 					// remove wing
; 7961 : 					get_2d_float_screen_x_coordinate(missile_x + 0.06, &x1);

  01a58	8d 45 fc	 lea	 eax, DWORD PTR _x1$[ebp]
  01a5b	50		 push	 eax
  01a5c	f3 0f 5a 85 50
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _missile_x$15[ebp]
  01a64	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3faeb851eb851eb8
  01a6c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a70	51		 push	 ecx
  01a71	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a76	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7962 : 					get_2d_float_screen_x_coordinate(missile_x - 0.06, &x2);

  01a7b	8d 45 f8	 lea	 eax, DWORD PTR _x2$[ebp]
  01a7e	50		 push	 eax
  01a7f	f3 0f 5a 85 50
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _missile_x$15[ebp]
  01a87	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3faeb851eb851eb8
  01a8f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a93	51		 push	 ecx
  01a94	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a99	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7963 : 
; 7964 : 					if (missile_y > pylon_y)

  01a9e	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR _missile_y$14[ebp]
  01aa6	0f 2f 85 5c ff
	ff ff		 comiss	 xmm0, DWORD PTR _pylon_y$18[ebp]
  01aad	76 42		 jbe	 SHORT $LN62@draw_large

; 7965 : 						draw_line(x1, forward_wing, x2, forward_wing, MFD_CLEAR_COLOUR);

  01aaf	b8 04 00 00 00	 mov	 eax, 4
  01ab4	6b c8 13	 imul	 ecx, eax, 19
  01ab7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01abd	52		 push	 edx
  01abe	51		 push	 ecx
  01abf	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  01ac4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ac9	51		 push	 ecx
  01aca	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  01acf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ad4	51		 push	 ecx
  01ad5	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  01ada	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01adf	51		 push	 ecx
  01ae0	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01ae5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aea	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7966 : 					else

  01aef	eb 40		 jmp	 SHORT $LN63@draw_large
$LN62@draw_large:

; 7967 : 						draw_line(x1, rear_wing, x2, rear_wing, MFD_CLEAR_COLOUR);

  01af1	b8 04 00 00 00	 mov	 eax, 4
  01af6	6b c8 13	 imul	 ecx, eax, 19
  01af9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01aff	52		 push	 edx
  01b00	51		 push	 ecx
  01b01	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  01b06	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b0b	51		 push	 ecx
  01b0c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  01b11	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b16	51		 push	 ecx
  01b17	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  01b1c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b21	51		 push	 ecx
  01b22	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01b27	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b2c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN63@draw_large:

; 7968 : 
; 7969 : 					// draw missile
; 7970 : 					if ((weapon_sub_type == selected_weapon) && !damaged)

  01b31	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01b37	3b 85 70 ff ff
	ff		 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01b3d	75 54		 jne	 SHORT $LN64@draw_large
  01b3f	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  01b46	75 4b		 jne	 SHORT $LN64@draw_large

; 7971 : 					{
; 7972 : 						draw_2d_mono_sprite(inverted_hellfire_missile_data, missile_x, missile_y, MFD_COLOUR1);

  01b48	b8 04 00 00 00	 mov	 eax, 4
  01b4d	6b c8 00	 imul	 ecx, eax, 0
  01b50	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01b56	52		 push	 edx
  01b57	51		 push	 ecx
  01b58	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR _missile_y$14[ebp]
  01b60	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b65	51		 push	 ecx
  01b66	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _missile_x$15[ebp]
  01b6e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b73	68 00 00 00 00	 push	 OFFSET ?inverted_hellfire_missile_data@@3PADA
  01b78	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 7973 : 						set_mono_font_colour (MFD_CLEAR_COLOUR);

  01b7d	b8 04 00 00 00	 mov	 eax, 4
  01b82	6b c8 13	 imul	 ecx, eax, 19
  01b85	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01b8b	52		 push	 edx
  01b8c	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7974 : 					}
; 7975 : 					else

  01b91	eb 49		 jmp	 SHORT $LN65@draw_large
$LN64@draw_large:

; 7976 : 					{
; 7977 : 						draw_2d_mono_sprite(hellfire_missile_data, missile_x, missile_y, MFD_COLOUR1);

  01b93	b8 04 00 00 00	 mov	 eax, 4
  01b98	6b c8 00	 imul	 ecx, eax, 0
  01b9b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01ba1	52		 push	 edx
  01ba2	51		 push	 ecx
  01ba3	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR _missile_y$14[ebp]
  01bab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bb0	51		 push	 ecx
  01bb1	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _missile_x$15[ebp]
  01bb9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bbe	68 00 00 00 00	 push	 OFFSET ?hellfire_missile_data@@3PADA
  01bc3	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 7978 : 						set_mono_font_colour (MFD_COLOUR1);

  01bc8	b8 04 00 00 00	 mov	 eax, 4
  01bcd	6b c8 00	 imul	 ecx, eax, 0
  01bd0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01bd6	52		 push	 edx
  01bd7	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN65@draw_large:

; 7979 : 					}
; 7980 : 					set_mono_font_type (MONO_FONT_TYPE_7X12);

  01bdc	6a 05		 push	 5
  01bde	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 7981 : 					set_2d_mono_font_position (missile_x, missile_y-0.05);

  01be3	f3 0f 5a 85 4c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _missile_y$14[ebp]
  01beb	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  01bf3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01bf7	51		 push	 ecx
  01bf8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bfd	51		 push	 ecx
  01bfe	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _missile_x$15[ebp]
  01c06	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c0b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7982 : 
; 7983 : 					if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AGM114L_LONGBOW_HELLFIRE)

  01c10	83 bd 68 ff ff
	ff 2d		 cmp	 DWORD PTR _weapon_sub_type$[ebp], 45 ; 0000002dH
  01c17	75 13		 jne	 SHORT $LN66@draw_large

; 7984 : 						sprintf(s, "R");

  01c19	68 00 00 00 00	 push	 OFFSET ??_C@_01DGKLNCNG@R@
  01c1e	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  01c21	50		 push	 eax
  01c22	e8 00 00 00 00	 call	 _sprintf
  01c27	83 c4 08	 add	 esp, 8

; 7985 : 					else

  01c2a	eb 11		 jmp	 SHORT $LN67@draw_large
$LN66@draw_large:

; 7986 : 						sprintf(s, "L");

  01c2c	68 00 00 00 00	 push	 OFFSET ??_C@_01OCOKONAJ@L@
  01c31	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  01c34	50		 push	 eax
  01c35	e8 00 00 00 00	 call	 _sprintf
  01c3a	83 c4 08	 add	 esp, 8
$LN67@draw_large:

; 7987 : 
; 7988 : 					x_adjust = get_mono_font_string_width (s) * -0.4;

  01c3d	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  01c40	50		 push	 eax
  01c41	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01c46	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv2051[ebp]
  01c4c	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv2051[ebp]
  01c54	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfd999999999999a
  01c5c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c60	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7989 : 					set_mono_font_rel_position (x_adjust, 0.0);

  01c68	51		 push	 ecx
  01c69	0f 57 c0	 xorps	 xmm0, xmm0
  01c6c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c71	51		 push	 ecx
  01c72	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01c7a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c7f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7990 : 					print_mono_font_string (s);

  01c84	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  01c87	50		 push	 eax
  01c88	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7991 : 				}

  01c8d	e9 6f fc ff ff	 jmp	 $LN11@draw_large
$LN12@draw_large:

; 7992 : 			}
; 7993 : 			else if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_HYDRA70_M255 ||

  01c92	e9 21 08 00 00	 jmp	 $LN85@draw_large
$LN50@draw_large:
  01c97	83 bd 68 ff ff
	ff 1e		 cmp	 DWORD PTR _weapon_sub_type$[ebp], 30 ; 0000001eH
  01c9e	74 0d		 je	 SHORT $LN70@draw_large
  01ca0	83 bd 68 ff ff
	ff 1f		 cmp	 DWORD PTR _weapon_sub_type$[ebp], 31 ; 0000001fH
  01ca7	0f 85 52 04 00
	00		 jne	 $LN68@draw_large
$LN70@draw_large:

; 7994 : 					 weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_HYDRA70_M261)
; 7995 : 			{
; 7996 : 				int selected = (weapon_sub_type == selected_weapon) && !damaged;

  01cad	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01cb3	3b 85 70 ff ff
	ff		 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01cb9	75 15		 jne	 SHORT $LN101@draw_large
  01cbb	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  01cc2	75 0c		 jne	 SHORT $LN101@draw_large
  01cc4	c7 85 d4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv870[ebp], 1
  01cce	eb 0a		 jmp	 SHORT $LN102@draw_large
$LN101@draw_large:
  01cd0	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv870[ebp], 0
$LN102@draw_large:
  01cda	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv870[ebp]
  01ce0	89 8d 48 ff ff
	ff		 mov	 DWORD PTR _selected$13[ebp], ecx

; 7997 : 				rgb_colour text_colour = selected ? MFD_CLEAR_COLOUR : MFD_COLOUR1;

  01ce6	83 bd 48 ff ff
	ff 00		 cmp	 DWORD PTR _selected$13[ebp], 0
  01ced	74 16		 je	 SHORT $LN103@draw_large
  01cef	b8 04 00 00 00	 mov	 eax, 4
  01cf4	6b c8 13	 imul	 ecx, eax, 19
  01cf7	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?mfd_colours@@3PAUREAL_COLOUR@@A
  01cfd	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv876[ebp], ecx
  01d03	eb 13		 jmp	 SHORT $LN104@draw_large
$LN103@draw_large:
  01d05	ba 04 00 00 00	 mov	 edx, 4
  01d0a	6b c2 00	 imul	 eax, edx, 0
  01d0d	05 00 00 00 00	 add	 eax, OFFSET ?mfd_colours@@3PAUREAL_COLOUR@@A
  01d12	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv876[ebp], eax
$LN104@draw_large:
  01d18	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv876[ebp]
  01d1e	89 8d d8 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  01d24	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  01d2a	8b 02		 mov	 eax, DWORD PTR [edx]
  01d2c	89 85 44 ff ff
	ff		 mov	 DWORD PTR _text_colour$12[ebp], eax

; 7998 : 
; 7999 : 				set_mono_font_colour (text_colour);

  01d32	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _text_colour$12[ebp]
  01d38	50		 push	 eax
  01d39	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8000 : 
; 8001 : 				// remove wing under pod
; 8002 : 				get_2d_float_screen_x_coordinate(pylon_x + 0.11, &x1);

  01d3e	8d 45 fc	 lea	 eax, DWORD PTR _x1$[ebp]
  01d41	50		 push	 eax
  01d42	f3 0f 5a 85 60
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$19[ebp]
  01d4a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fbc28f5c28f5c29
  01d52	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d56	51		 push	 ecx
  01d57	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d5c	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 8003 : 				get_2d_float_screen_x_coordinate(pylon_x - 0.11, &x2);

  01d61	8d 45 f8	 lea	 eax, DWORD PTR _x2$[ebp]
  01d64	50		 push	 eax
  01d65	f3 0f 5a 85 60
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$19[ebp]
  01d6d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fbc28f5c28f5c29
  01d75	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d79	51		 push	 ecx
  01d7a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d7f	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 8004 : 
; 8005 : 				draw_line(x1, forward_wing, x2, forward_wing, MFD_CLEAR_COLOUR);

  01d84	b8 04 00 00 00	 mov	 eax, 4
  01d89	6b c8 13	 imul	 ecx, eax, 19
  01d8c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01d92	52		 push	 edx
  01d93	51		 push	 ecx
  01d94	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  01d99	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d9e	51		 push	 ecx
  01d9f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  01da4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01da9	51		 push	 ecx
  01daa	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  01daf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01db4	51		 push	 ecx
  01db5	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01dba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dbf	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8006 : 				draw_line(x1, rear_wing, x2, rear_wing, MFD_CLEAR_COLOUR);

  01dc4	b8 04 00 00 00	 mov	 eax, 4
  01dc9	6b c8 13	 imul	 ecx, eax, 19
  01dcc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01dd2	52		 push	 edx
  01dd3	51		 push	 ecx
  01dd4	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  01dd9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dde	51		 push	 ecx
  01ddf	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  01de4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01de9	51		 push	 ecx
  01dea	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  01def	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01df4	51		 push	 ecx
  01df5	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01dfa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dff	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8007 : 
; 8008 : 				// draw rocket pod
; 8009 : 				get_2d_float_screen_coordinates (pylon_x - 0.11, pylon_y + 0.3, &x1, &y1);

  01e04	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  01e07	50		 push	 eax
  01e08	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  01e0b	51		 push	 ecx
  01e0c	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  01e14	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd3333333333333
  01e1c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e20	51		 push	 ecx
  01e21	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e26	f3 0f 5a 85 60
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$19[ebp]
  01e2e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fbc28f5c28f5c29
  01e36	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e3a	51		 push	 ecx
  01e3b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e40	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 8010 : 				get_2d_float_screen_coordinates (pylon_x + 0.11, pylon_y - 0.3, &x2, &y2);

  01e45	8d 45 e8	 lea	 eax, DWORD PTR _y2$[ebp]
  01e48	50		 push	 eax
  01e49	8d 4d f8	 lea	 ecx, DWORD PTR _x2$[ebp]
  01e4c	51		 push	 ecx
  01e4d	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  01e55	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd3333333333333
  01e5d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e61	51		 push	 ecx
  01e62	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e67	f3 0f 5a 85 60
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$19[ebp]
  01e6f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fbc28f5c28f5c29
  01e77	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e7b	51		 push	 ecx
  01e7c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e81	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 8011 : 
; 8012 : 				if (selected)

  01e86	83 bd 48 ff ff
	ff 00		 cmp	 DWORD PTR _selected$13[ebp], 0
  01e8d	74 31		 je	 SHORT $LN71@draw_large

; 8013 : 					set_block (x1, y1, x2, y2, MFD_COLOUR1);

  01e8f	b8 04 00 00 00	 mov	 eax, 4
  01e94	6b c8 00	 imul	 ecx, eax, 0
  01e97	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01e9d	52		 push	 edx
  01e9e	f3 0f 2c 45 e8	 cvttss2si eax, DWORD PTR _y2$[ebp]
  01ea3	50		 push	 eax
  01ea4	f3 0f 2c 4d f8	 cvttss2si ecx, DWORD PTR _x2$[ebp]
  01ea9	51		 push	 ecx
  01eaa	f3 0f 2c 55 ec	 cvttss2si edx, DWORD PTR _y1$[ebp]
  01eaf	52		 push	 edx
  01eb0	f3 0f 2c 45 fc	 cvttss2si eax, DWORD PTR _x1$[ebp]
  01eb5	50		 push	 eax
  01eb6	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 8014 : 				else

  01ebb	e9 00 01 00 00	 jmp	 $LN72@draw_large
$LN71@draw_large:

; 8015 : 				{
; 8016 : 					draw_line (x1, y1, x2, y1, MFD_COLOUR1);

  01ec0	b8 04 00 00 00	 mov	 eax, 4
  01ec5	6b c8 00	 imul	 ecx, eax, 0
  01ec8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01ece	52		 push	 edx
  01ecf	51		 push	 ecx
  01ed0	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01ed5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01eda	51		 push	 ecx
  01edb	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  01ee0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ee5	51		 push	 ecx
  01ee6	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01eeb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ef0	51		 push	 ecx
  01ef1	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01ef6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01efb	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8017 : 					draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  01f00	b8 04 00 00 00	 mov	 eax, 4
  01f05	6b c8 00	 imul	 ecx, eax, 0
  01f08	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01f0e	52		 push	 edx
  01f0f	51		 push	 ecx
  01f10	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01f15	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f1a	51		 push	 ecx
  01f1b	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01f20	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f25	51		 push	 ecx
  01f26	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01f2b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f30	51		 push	 ecx
  01f31	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01f36	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f3b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8018 : 					draw_line (x1, y2, x2, y2, MFD_COLOUR1);

  01f40	b8 04 00 00 00	 mov	 eax, 4
  01f45	6b c8 00	 imul	 ecx, eax, 0
  01f48	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01f4e	52		 push	 edx
  01f4f	51		 push	 ecx
  01f50	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01f55	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f5a	51		 push	 ecx
  01f5b	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  01f60	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f65	51		 push	 ecx
  01f66	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01f6b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f70	51		 push	 ecx
  01f71	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01f76	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f7b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8019 : 					draw_line (x2, y1, x2, y2, MFD_COLOUR1);

  01f80	b8 04 00 00 00	 mov	 eax, 4
  01f85	6b c8 00	 imul	 ecx, eax, 0
  01f88	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01f8e	52		 push	 edx
  01f8f	51		 push	 ecx
  01f90	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01f95	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f9a	51		 push	 ecx
  01f9b	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  01fa0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fa5	51		 push	 ecx
  01fa6	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01fab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fb0	51		 push	 ecx
  01fb1	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  01fb6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fbb	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN72@draw_large:

; 8020 : 				}
; 8021 : 
; 8022 : 				set_mono_font_type (MONO_FONT_TYPE_7X12);

  01fc0	6a 05		 push	 5
  01fc2	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 8023 : 				set_2d_mono_font_position (pylon_x, pylon_y);

  01fc7	51		 push	 ecx
  01fc8	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_y$18[ebp]
  01fd0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fd5	51		 push	 ecx
  01fd6	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  01fde	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fe3	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8024 : 
; 8025 : 				if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_HYDRA70_M255)

  01fe8	83 bd 68 ff ff
	ff 1e		 cmp	 DWORD PTR _weapon_sub_type$[ebp], 30 ; 0000001eH
  01fef	75 13		 jne	 SHORT $LN73@draw_large

; 8026 : 					sprintf(s, "MP");

  01ff1	68 00 00 00 00	 push	 OFFSET ??_C@_02MCEHGFCK@MP@
  01ff6	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  01ff9	50		 push	 eax
  01ffa	e8 00 00 00 00	 call	 _sprintf
  01fff	83 c4 08	 add	 esp, 8

; 8027 : 				else

  02002	eb 11		 jmp	 SHORT $LN74@draw_large
$LN73@draw_large:

; 8028 : 					sprintf(s, "RC");

  02004	68 00 00 00 00	 push	 OFFSET ??_C@_02LENCMAPF@RC@
  02009	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  0200c	50		 push	 eax
  0200d	e8 00 00 00 00	 call	 _sprintf
  02012	83 c4 08	 add	 esp, 8
$LN74@draw_large:

; 8029 : 
; 8030 : 				x_adjust = get_mono_font_string_width (s) * -0.4;

  02015	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  02018	50		 push	 eax
  02019	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0201e	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv2149[ebp]
  02024	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv2149[ebp]
  0202c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfd999999999999a
  02034	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02038	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 8031 : 				set_mono_font_rel_position (x_adjust, 0.0);

  02040	51		 push	 ecx
  02041	0f 57 c0	 xorps	 xmm0, xmm0
  02044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02049	51		 push	 ecx
  0204a	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  02052	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02057	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8032 : 				print_mono_font_string (s);

  0205c	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  0205f	50		 push	 eax
  02060	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8033 : 
; 8034 : 				set_2d_mono_font_position (pylon_x, pylon_y - 0.1);

  02065	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  0206d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb999999999999a
  02075	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02079	51		 push	 ecx
  0207a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0207f	51		 push	 ecx
  02080	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  02088	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0208d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8035 : 				sprintf(s, "%2d", number);

  02092	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _number$[ebp]
  02098	50		 push	 eax
  02099	68 00 00 00 00	 push	 OFFSET ??_C@_03GPCJOALC@?$CF2d@
  0209e	8d 4d 84	 lea	 ecx, DWORD PTR _s$[ebp]
  020a1	51		 push	 ecx
  020a2	e8 00 00 00 00	 call	 _sprintf
  020a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8036 : 				x_adjust = get_mono_font_string_width (s) * -0.4;

  020aa	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  020ad	50		 push	 eax
  020ae	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  020b3	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv2165[ebp]
  020b9	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv2165[ebp]
  020c1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfd999999999999a
  020c9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  020cd	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 8037 : 				set_mono_font_rel_position (x_adjust, 0.0);

  020d5	51		 push	 ecx
  020d6	0f 57 c0	 xorps	 xmm0, xmm0
  020d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020de	51		 push	 ecx
  020df	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  020e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020ec	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8038 : 				print_mono_font_string (s);

  020f1	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  020f4	50		 push	 eax
  020f5	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
  020fa	e9 b9 03 00 00	 jmp	 $LN85@draw_large
$LN68@draw_large:

; 8039 : 			}
; 8040 : 			else if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AIM92_STINGER)

  020ff	83 bd 68 ff ff
	ff 24		 cmp	 DWORD PTR _weapon_sub_type$[ebp], 36 ; 00000024H
  02106	0f 85 ac 03 00
	00		 jne	 $LN85@draw_large

; 8041 : 			{
; 8042 : 				int selected = (weapon_sub_type == selected_weapon) && !damaged;

  0210c	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  02112	3b 85 70 ff ff
	ff		 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  02118	75 15		 jne	 SHORT $LN105@draw_large
  0211a	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  02121	75 0c		 jne	 SHORT $LN105@draw_large
  02123	c7 85 d4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv998[ebp], 1
  0212d	eb 0a		 jmp	 SHORT $LN106@draw_large
$LN105@draw_large:
  0212f	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv998[ebp], 0
$LN106@draw_large:
  02139	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv998[ebp]
  0213f	89 8d 40 ff ff
	ff		 mov	 DWORD PTR _selected$11[ebp], ecx

; 8043 : 				int left_tip = pylon == APACHE_LHS_WING_TIP_MOUNT;

  02145	83 bd 6c ff ff
	ff 04		 cmp	 DWORD PTR _pylon$[ebp], 4
  0214c	75 0c		 jne	 SHORT $LN107@draw_large
  0214e	c7 85 d4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1000[ebp], 1
  02158	eb 0a		 jmp	 SHORT $LN108@draw_large
$LN107@draw_large:
  0215a	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1000[ebp], 0
$LN108@draw_large:
  02164	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR tv1000[ebp]
  0216a	89 85 3c ff ff
	ff		 mov	 DWORD PTR _left_tip$10[ebp], eax

; 8044 : 				float tip;
; 8045 : 
; 8046 : 				if (number == 2)

  02170	83 bd 78 ff ff
	ff 02		 cmp	 DWORD PTR _number$[ebp], 2
  02177	0f 85 97 01 00
	00		 jne	 $LN80@draw_large

; 8047 : 				{
; 8048 : 					// remove wing drawing
; 8049 : 					if (left_tip)

  0217d	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR _left_tip$10[ebp], 0
  02184	74 3d		 je	 SHORT $LN77@draw_large

; 8050 : 					{
; 8051 : 						tip = wing_tip_left;

  02186	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _wing_tip_left$[ebp]
  0218b	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _tip$9[ebp], xmm0

; 8052 : 						get_2d_float_screen_x_coordinate(-0.93, &x1);

  02193	8d 45 fc	 lea	 eax, DWORD PTR _x1$[ebp]
  02196	50		 push	 eax
  02197	51		 push	 ecx
  02198	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6e147b
  021a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021a5	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 8053 : 						get_2d_float_screen_y_coordinate(-0.22, &y1);

  021aa	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  021ad	50		 push	 eax
  021ae	51		 push	 ecx
  021af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be6147ae
  021b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021bc	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8054 : 					}
; 8055 : 					else

  021c1	eb 3b		 jmp	 SHORT $LN78@draw_large
$LN77@draw_large:

; 8056 : 					{
; 8057 : 						tip = wing_tip_right;

  021c3	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _wing_tip_right$[ebp]
  021c8	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _tip$9[ebp], xmm0

; 8058 : 						get_2d_float_screen_x_coordinate(0.93, &x1);

  021d0	8d 45 fc	 lea	 eax, DWORD PTR _x1$[ebp]
  021d3	50		 push	 eax
  021d4	51		 push	 ecx
  021d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  021dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021e2	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 8059 : 						get_2d_float_screen_y_coordinate(-0.22, &y1);

  021e7	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  021ea	50		 push	 eax
  021eb	51		 push	 ecx
  021ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be6147ae
  021f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021f9	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate
$LN78@draw_large:

; 8060 : 					}
; 8061 : 					draw_line(x1, forward_wing, tip, forward_wing, MFD_CLEAR_COLOUR);

  021fe	b8 04 00 00 00	 mov	 eax, 4
  02203	6b c8 13	 imul	 ecx, eax, 19
  02206	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0220c	52		 push	 edx
  0220d	51		 push	 ecx
  0220e	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  02213	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02218	51		 push	 ecx
  02219	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _tip$9[ebp]
  02221	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02226	51		 push	 ecx
  02227	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  0222c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02231	51		 push	 ecx
  02232	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02237	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0223c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8062 : 					draw_line(tip, forward_wing, tip, y1, MFD_CLEAR_COLOUR);

  02241	b8 04 00 00 00	 mov	 eax, 4
  02246	6b c8 13	 imul	 ecx, eax, 19
  02249	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0224f	52		 push	 edx
  02250	51		 push	 ecx
  02251	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02256	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0225b	51		 push	 ecx
  0225c	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _tip$9[ebp]
  02264	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02269	51		 push	 ecx
  0226a	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  0226f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02274	51		 push	 ecx
  02275	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _tip$9[ebp]
  0227d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02282	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8063 : 
; 8064 : 					// draw missile
; 8065 : 					if (selected)

  02287	83 bd 40 ff ff
	ff 00		 cmp	 DWORD PTR _selected$11[ebp], 0
  0228e	74 43		 je	 SHORT $LN79@draw_large

; 8066 : 						draw_2d_mono_sprite(inverted_stinger_missile_data, pylon_x, pylon_y + 0.25, MFD_COLOUR1);

  02290	b8 04 00 00 00	 mov	 eax, 4
  02295	6b c8 00	 imul	 ecx, eax, 0
  02298	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0229e	52		 push	 edx
  0229f	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  022a7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  022af	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  022b3	51		 push	 ecx
  022b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022b9	51		 push	 ecx
  022ba	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  022c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022c7	68 00 00 00 00	 push	 OFFSET ?inverted_stinger_missile_data@@3PADA
  022cc	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 8067 : 					else

  022d1	eb 41		 jmp	 SHORT $LN80@draw_large
$LN79@draw_large:

; 8068 : 						draw_2d_mono_sprite(stinger_missile_data, pylon_x, pylon_y + 0.25, MFD_COLOUR1);

  022d3	b8 04 00 00 00	 mov	 eax, 4
  022d8	6b c8 00	 imul	 ecx, eax, 0
  022db	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  022e1	52		 push	 edx
  022e2	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  022ea	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  022f2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  022f6	51		 push	 ecx
  022f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022fc	51		 push	 ecx
  022fd	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  02305	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0230a	68 00 00 00 00	 push	 OFFSET ?stinger_missile_data@@3PADA
  0230f	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN80@draw_large:

; 8069 : 				}
; 8070 : 
; 8071 : 				if (number >= 1)

  02314	83 bd 78 ff ff
	ff 01		 cmp	 DWORD PTR _number$[ebp], 1
  0231b	0f 8c 97 01 00
	00		 jl	 $LN85@draw_large

; 8072 : 				{
; 8073 : 					// remove wing drawing
; 8074 : 					if (left_tip)

  02321	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR _left_tip$10[ebp], 0
  02328	74 3d		 je	 SHORT $LN82@draw_large

; 8075 : 					{
; 8076 : 						tip = wing_tip_left;

  0232a	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _wing_tip_left$[ebp]
  0232f	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _tip$9[ebp], xmm0

; 8077 : 						get_2d_float_screen_x_coordinate(-0.91, &x1);

  02337	8d 45 fc	 lea	 eax, DWORD PTR _x1$[ebp]
  0233a	50		 push	 eax
  0233b	51		 push	 ecx
  0233c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf68f5c3
  02344	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02349	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 8078 : 						get_2d_float_screen_y_coordinate(-0.27, &y1);

  0234e	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  02351	50		 push	 eax
  02352	51		 push	 ecx
  02353	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8a3d71
  0235b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02360	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8079 : 					}
; 8080 : 					else

  02365	eb 3b		 jmp	 SHORT $LN83@draw_large
$LN82@draw_large:

; 8081 : 					{
; 8082 : 						tip = wing_tip_right;

  02367	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _wing_tip_right$[ebp]
  0236c	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _tip$9[ebp], xmm0

; 8083 : 						get_2d_float_screen_x_coordinate(0.91, &x1);

  02374	8d 45 fc	 lea	 eax, DWORD PTR _x1$[ebp]
  02377	50		 push	 eax
  02378	51		 push	 ecx
  02379	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  02381	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02386	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 8084 : 						get_2d_float_screen_y_coordinate(-0.27, &y1);

  0238b	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  0238e	50		 push	 eax
  0238f	51		 push	 ecx
  02390	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8a3d71
  02398	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0239d	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate
$LN83@draw_large:

; 8085 : 					}
; 8086 : 					draw_line(x1, rear_wing, tip, rear_wing, MFD_CLEAR_COLOUR);

  023a2	b8 04 00 00 00	 mov	 eax, 4
  023a7	6b c8 13	 imul	 ecx, eax, 19
  023aa	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  023b0	52		 push	 edx
  023b1	51		 push	 ecx
  023b2	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  023b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023bc	51		 push	 ecx
  023bd	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _tip$9[ebp]
  023c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023ca	51		 push	 ecx
  023cb	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  023d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023d5	51		 push	 ecx
  023d6	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  023db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023e0	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8087 : 					draw_line(tip, rear_wing, tip, y1, MFD_CLEAR_COLOUR);

  023e5	b8 04 00 00 00	 mov	 eax, 4
  023ea	6b c8 13	 imul	 ecx, eax, 19
  023ed	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  023f3	52		 push	 edx
  023f4	51		 push	 ecx
  023f5	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  023fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023ff	51		 push	 ecx
  02400	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _tip$9[ebp]
  02408	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0240d	51		 push	 ecx
  0240e	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  02413	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02418	51		 push	 ecx
  02419	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _tip$9[ebp]
  02421	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02426	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8088 : 
; 8089 : 					// draw missile
; 8090 : 					if (selected)

  0242b	83 bd 40 ff ff
	ff 00		 cmp	 DWORD PTR _selected$11[ebp], 0
  02432	74 43		 je	 SHORT $LN84@draw_large

; 8091 : 						draw_2d_mono_sprite(inverted_stinger_missile_data, pylon_x, pylon_y - 0.05, MFD_COLOUR1);

  02434	b8 04 00 00 00	 mov	 eax, 4
  02439	6b c8 00	 imul	 ecx, eax, 0
  0243c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02442	52		 push	 edx
  02443	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  0244b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  02453	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02457	51		 push	 ecx
  02458	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0245d	51		 push	 ecx
  0245e	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  02466	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0246b	68 00 00 00 00	 push	 OFFSET ?inverted_stinger_missile_data@@3PADA
  02470	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 8092 : 					else

  02475	eb 41		 jmp	 SHORT $LN85@draw_large
$LN84@draw_large:

; 8093 : 						draw_2d_mono_sprite(stinger_missile_data, pylon_x, pylon_y - 0.05, MFD_COLOUR1);

  02477	b8 04 00 00 00	 mov	 eax, 4
  0247c	6b c8 00	 imul	 ecx, eax, 0
  0247f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02485	52		 push	 edx
  02486	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  0248e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  02496	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0249a	51		 push	 ecx
  0249b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024a0	51		 push	 ecx
  024a1	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  024a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024ae	68 00 00 00 00	 push	 OFFSET ?stinger_missile_data@@3PADA
  024b3	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN85@draw_large:

; 8094 : 				}
; 8095 : 			}
; 8096 : 
; 8097 : 			// if damaged, draw X across pylon
; 8098 : 			if (damaged)

  024b8	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  024bf	0f 84 c1 01 00
	00		 je	 $LN86@draw_large

; 8099 : 			{
; 8100 : 				float width, height = 0.7, x1, y1, x2, y2, y_offset = 0.0;

  024c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  024cd	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _height$7[ebp], xmm0
  024d5	0f 57 c0	 xorps	 xmm0, xmm0
  024d8	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _y_offset$2[ebp], xmm0

; 8101 : 
; 8102 : 				if (pylon == APACHE_LHS_WING_TIP_MOUNT || pylon == APACHE_RHS_WING_TIP_MOUNT)

  024e0	83 bd 6c ff ff
	ff 04		 cmp	 DWORD PTR _pylon$[ebp], 4
  024e7	74 09		 je	 SHORT $LN89@draw_large
  024e9	83 bd 6c ff ff
	ff 05		 cmp	 DWORD PTR _pylon$[ebp], 5
  024f0	75 22		 jne	 SHORT $LN87@draw_large
$LN89@draw_large:

; 8103 : 				{
; 8104 : 					// stingers are narrower and drawn more forward than other pylons
; 8105 : 					y_offset = 0.1;

  024f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  024fa	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _y_offset$2[ebp], xmm0

; 8106 : 					width = 0.125;

  02502	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  0250a	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _width$8[ebp], xmm0

; 8107 : 				}
; 8108 : 				else

  02512	eb 10		 jmp	 SHORT $LN88@draw_large
$LN87@draw_large:

; 8109 : 					width = 0.25;

  02514	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  0251c	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _width$8[ebp], xmm0
$LN88@draw_large:

; 8110 : 
; 8111 : 				get_2d_float_screen_coordinates(pylon_x - 0.5 * width, pylon_y - 0.5 * height, &x1, &y1);

  02524	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _y1$5[ebp]
  0252a	50		 push	 eax
  0252b	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _x1$6[ebp]
  02531	51		 push	 ecx
  02532	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  0253a	f3 0f 5a 8d 30
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _height$7[ebp]
  02542	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0254a	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0254e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02552	51		 push	 ecx
  02553	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02558	f3 0f 5a 85 60
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$19[ebp]
  02560	f3 0f 5a 8d 34
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _width$8[ebp]
  02568	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  02570	f2 0f 5c c1	 subsd	 xmm0, xmm1
  02574	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02578	51		 push	 ecx
  02579	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0257e	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 8112 : 				get_2d_float_screen_coordinates(pylon_x + 0.5 * width, pylon_y + y_offset + 0.5 * height, &x2, &y2);

  02583	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _y2$3[ebp]
  02589	50		 push	 eax
  0258a	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _x2$4[ebp]
  02590	51		 push	 ecx
  02591	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_y$18[ebp]
  02599	f3 0f 58 85 1c
	ff ff ff	 addss	 xmm0, DWORD PTR _y_offset$2[ebp]
  025a1	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  025a5	f3 0f 5a 8d 30
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _height$7[ebp]
  025ad	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  025b5	f2 0f 58 c1	 addsd	 xmm0, xmm1
  025b9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  025bd	51		 push	 ecx
  025be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025c3	f3 0f 5a 85 60
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$19[ebp]
  025cb	f3 0f 5a 8d 34
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _width$8[ebp]
  025d3	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  025db	f2 0f 58 c1	 addsd	 xmm0, xmm1
  025df	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  025e3	51		 push	 ecx
  025e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025e9	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 8113 : 
; 8114 : 				draw_half_thick_line(x1, y1, x2, y2, MFD_COLOUR1);

  025ee	b8 04 00 00 00	 mov	 eax, 4
  025f3	6b c8 00	 imul	 ecx, eax, 0
  025f6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  025fc	52		 push	 edx
  025fd	51		 push	 ecx
  025fe	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y2$3[ebp]
  02606	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0260b	51		 push	 ecx
  0260c	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _x2$4[ebp]
  02614	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02619	51		 push	 ecx
  0261a	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y1$5[ebp]
  02622	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02627	51		 push	 ecx
  02628	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _x1$6[ebp]
  02630	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02635	e8 00 00 00 00	 call	 ?draw_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_half_thick_line

; 8115 : 				draw_half_thick_line(x1, y2, x2, y1, MFD_COLOUR1);

  0263a	b8 04 00 00 00	 mov	 eax, 4
  0263f	6b c8 00	 imul	 ecx, eax, 0
  02642	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02648	52		 push	 edx
  02649	51		 push	 ecx
  0264a	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y1$5[ebp]
  02652	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02657	51		 push	 ecx
  02658	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _x2$4[ebp]
  02660	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02665	51		 push	 ecx
  02666	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y2$3[ebp]
  0266e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02673	51		 push	 ecx
  02674	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _x1$6[ebp]
  0267c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02681	e8 00 00 00 00	 call	 ?draw_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_half_thick_line
$LN86@draw_large:

; 8116 : 			}
; 8117 : 		}
; 8118 : 	}

  02686	e9 36 f1 ff ff	 jmp	 $LN6@draw_large
$LN7@draw_large:

; 8119 : }

  0268b	5f		 pop	 edi
  0268c	5e		 pop	 esi
  0268d	5b		 pop	 ebx
  0268e	8b e5		 mov	 esp, ebp
  02690	5d		 pop	 ebp
  02691	c2 04 00	 ret	 4
$LN109@draw_large:
  02694	00 00 00 00	 DD	 $LN32@draw_large
  02698	00 00 00 00	 DD	 $LN32@draw_large
  0269c	00 00 00 00	 DD	 $LN33@draw_large
  026a0	00 00 00 00	 DD	 $LN33@draw_large
  026a4	00 00 00 00	 DD	 $LN33@draw_large
  026a8	00 00 00 00	 DD	 $LN35@draw_large
  026ac	00 00 00 00	 DD	 $LN35@draw_large
  026b0	00 00 00 00	 DD	 $LN34@draw_large
$LN110@draw_large:
  026b4	00 00 00 00	 DD	 $LN43@draw_large
  026b8	00 00 00 00	 DD	 $LN44@draw_large
  026bc	00 00 00 00	 DD	 $LN45@draw_large
  026c0	00 00 00 00	 DD	 $LN46@draw_large
  026c4	00 00 00 00	 DD	 $LN47@draw_large
  026c8	00 00 00 00	 DD	 $LN48@draw_large
$LN111@draw_large:
  026cc	00 00 00 00	 DD	 $LN56@draw_large
  026d0	00 00 00 00	 DD	 $LN57@draw_large
  026d4	00 00 00 00	 DD	 $LN58@draw_large
  026d8	00 00 00 00	 DD	 $LN59@draw_large
?draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z ENDP ; draw_large_weapon_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_weapon_hardpoint_info@@YGXHHH@Z
_TEXT	SEGMENT
tv1576 = -176						; size = 4
tv1456 = -176						; size = 4
tv1441 = -176						; size = 4
tv1321 = -176						; size = 4
tv1288 = -176						; size = 4
tv1262 = -176						; size = 4
tv963 = -176						; size = 4
tv947 = -176						; size = 4
tv916 = -176						; size = 4
tv890 = -176						; size = 4
tv591 = -176						; size = 4
tv575 = -176						; size = 4
tv541 = -176						; size = 4
tv515 = -176						; size = 4
tv443 = -176						; size = 4
tv412 = -176						; size = 4
tv386 = -176						; size = 4
tv314 = -176						; size = 4
_weapon_sub_type$ = -108				; size = 4
_v$ = -104						; size = 4
_u$ = -100						; size = 4
_hardpoint_y$ = -96					; size = 4
_hardpoint_x$ = -92					; size = 4
_damaged$ = -88						; size = 4
_number$ = -84						; size = 4
_buffer$ = -80						; size = 80
_heading_depth$ = 8					; size = 4
_given_weapon$ = 12					; size = 4
_selected_weapon$ = 16					; size = 4
?draw_weapon_hardpoint_info@@YGXHHH@Z PROC		; draw_weapon_hardpoint_info, COMDAT

; 5656 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 5657 : 	char
; 5658 : 		buffer[80];
; 5659 : 
; 5660 : 	int
; 5661 : 		number,
; 5662 : 		damaged,
; 5663 : 		hardpoint_x,
; 5664 : 		hardpoint_y,
; 5665 : 		u,
; 5666 : 		v;
; 5667 : 
; 5668 : 	entity_sub_types
; 5669 : 		weapon_sub_type;
; 5670 : 
; 5671 : 	if (!get_local_entity_weapon_hardpoint_info (get_gunship_entity (), heading_depth, given_weapon, &weapon_sub_type, &number, &damaged))

  0000c	8d 45 a8	 lea	 eax, DWORD PTR _damaged$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d ac	 lea	 ecx, DWORD PTR _number$[ebp]
  00013	51		 push	 ecx
  00014	8d 55 94	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00017	52		 push	 edx
  00018	8b 45 0c	 mov	 eax, DWORD PTR _given_weapon$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _heading_depth$[ebp]
  0001f	51		 push	 ecx
  00020	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00026	52		 push	 edx
  00027	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  0002c	85 c0		 test	 eax, eax
  0002e	75 05		 jne	 SHORT $LN38@draw_weapo

; 5672 : 	{
; 5673 : 		return;

  00030	e9 12 24 00 00	 jmp	 $LN1@draw_weapo
$LN38@draw_weapo:

; 5674 : 	}
; 5675 : 
; 5676 : 	if (draw_large_mfd)

  00035	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0003c	74 05		 je	 SHORT $LN39@draw_weapo

; 5677 : 		return;

  0003e	e9 04 24 00 00	 jmp	 $LN1@draw_weapo
$LN39@draw_weapo:

; 5678 : 
; 5679 : 	////////////////////////////////////////////////////////////////////////////////
; 5680 : 	//
; 5681 : 	// Chain Gun
; 5682 : 	//
; 5683 : 	////////////////////////////////////////////////////////////////////////////////
; 5684 : 
; 5685 : 	if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_M230_30MM_ROUND)

  00043	83 7d 94 07	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 7
  00047	0f 85 43 04 00
	00		 jne	 $LN40@draw_weapo

; 5686 : 	{
; 5687 : 		if (draw_large_mfd)

  0004d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00054	0f 84 1c 02 00
	00		 je	 $LN41@draw_weapo

; 5688 : 		{
; 5689 : 			////////////////////////////////////////
; 5690 : 			//
; 5691 : 			// LARGE
; 5692 : 			//
; 5693 : 			////////////////////////////////////////
; 5694 : 
; 5695 : 			//
; 5696 : 			// chain gun
; 5697 : 			//
; 5698 : 
; 5699 : 			if (number == 0)

  0005a	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  0005e	75 2a		 jne	 SHORT $LN43@draw_weapo

; 5700 : 			{
; 5701 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  00060	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00063	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00066	75 20		 jne	 SHORT $LN45@draw_weapo
  00068	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0006c	75 1a		 jne	 SHORT $LN45@draw_weapo

; 5702 : 				{
; 5703 : 					draw_sprite (118, 200, 262, 134, 28, 27);

  0006e	6a 1b		 push	 27			; 0000001bH
  00070	6a 1c		 push	 28			; 0000001cH
  00072	68 86 00 00 00	 push	 134			; 00000086H
  00077	68 06 01 00 00	 push	 262			; 00000106H
  0007c	68 c8 00 00 00	 push	 200			; 000000c8H
  00081	6a 76		 push	 118			; 00000076H
  00083	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN45@draw_weapo:

; 5704 : 				}
; 5705 : 			}
; 5706 : 			else

  00088	eb 44		 jmp	 SHORT $LN44@draw_weapo
$LN43@draw_weapo:

; 5707 : 			{
; 5708 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  0008a	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0008d	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00090	75 22		 jne	 SHORT $LN46@draw_weapo
  00092	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00096	75 1c		 jne	 SHORT $LN46@draw_weapo

; 5709 : 				{
; 5710 : 					draw_sprite (118, 200, 292, 134, 28, 27);

  00098	6a 1b		 push	 27			; 0000001bH
  0009a	6a 1c		 push	 28			; 0000001cH
  0009c	68 86 00 00 00	 push	 134			; 00000086H
  000a1	68 24 01 00 00	 push	 292			; 00000124H
  000a6	68 c8 00 00 00	 push	 200			; 000000c8H
  000ab	6a 76		 push	 118			; 00000076H
  000ad	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5711 : 				}
; 5712 : 				else

  000b2	eb 1a		 jmp	 SHORT $LN44@draw_weapo
$LN46@draw_weapo:

; 5713 : 				{
; 5714 : 					draw_sprite (118, 200, 322, 134, 27, 27);

  000b4	6a 1b		 push	 27			; 0000001bH
  000b6	6a 1b		 push	 27			; 0000001bH
  000b8	68 86 00 00 00	 push	 134			; 00000086H
  000bd	68 42 01 00 00	 push	 322			; 00000142H
  000c2	68 c8 00 00 00	 push	 200			; 000000c8H
  000c7	6a 76		 push	 118			; 00000076H
  000c9	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN44@draw_weapo:

; 5715 : 				}
; 5716 : 			}
; 5717 : 
; 5718 : 			//
; 5719 : 			// digits
; 5720 : 			//
; 5721 : 
; 5722 : 			hardpoint_x = 115;

  000ce	c7 45 a4 73 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 115 ; 00000073H

; 5723 : 			hardpoint_y = 234;

  000d5	c7 45 a0 ea 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 234 ; 000000eaH

; 5724 : 
; 5725 : 			sprintf (buffer, "%04d", number);

  000dc	8b 45 ac	 mov	 eax, DWORD PTR _number$[ebp]
  000df	50		 push	 eax
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_04OCCELDNI@?$CF04d@
  000e5	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 _sprintf
  000ee	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5726 : 
; 5727 : 			if ((weapon_sub_type == selected_weapon) && (!damaged))

  000f1	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  000f4	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  000f7	75 0f		 jne	 SHORT $LN48@draw_weapo
  000f9	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  000fd	75 09		 jne	 SHORT $LN48@draw_weapo

; 5728 : 			{
; 5729 : 				v = 32;

  000ff	c7 45 98 20 00
	00 00		 mov	 DWORD PTR _v$[ebp], 32	; 00000020H

; 5730 : 			}
; 5731 : 			else

  00106	eb 07		 jmp	 SHORT $LN49@draw_weapo
$LN48@draw_weapo:

; 5732 : 			{
; 5733 : 				v = 47;

  00108	c7 45 98 2f 00
	00 00		 mov	 DWORD PTR _v$[ebp], 47	; 0000002fH
$LN49@draw_weapo:

; 5734 : 			}
; 5735 : 
; 5736 : 			if (buffer[0] == '0')

  0010f	b8 01 00 00 00	 mov	 eax, 1
  00114	6b c8 00	 imul	 ecx, eax, 0
  00117	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  0011c	83 fa 30	 cmp	 edx, 48			; 00000030H
  0011f	75 09		 jne	 SHORT $LN50@draw_weapo

; 5737 : 			{
; 5738 : 				u = 364 + (9 * 10);

  00121	c7 45 9c c6 01
	00 00		 mov	 DWORD PTR _u$[ebp], 454	; 000001c6H

; 5739 : 			}
; 5740 : 			else

  00128	eb 1b		 jmp	 SHORT $LN51@draw_weapo
$LN50@draw_weapo:

; 5741 : 			{
; 5742 : 				u = 364 + ((buffer[0] - '1') * 10);

  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	6b c8 00	 imul	 ecx, eax, 0
  00132	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  00137	83 ea 31	 sub	 edx, 49			; 00000031H
  0013a	6b c2 0a	 imul	 eax, edx, 10
  0013d	05 6c 01 00 00	 add	 eax, 364		; 0000016cH
  00142	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN51@draw_weapo:

; 5743 : 			}
; 5744 : 
; 5745 : 			draw_sprite (hardpoint_x, hardpoint_y, u, v, 8, 12);

  00145	6a 0c		 push	 12			; 0000000cH
  00147	6a 08		 push	 8
  00149	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  0014c	50		 push	 eax
  0014d	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  00150	51		 push	 ecx
  00151	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  00154	52		 push	 edx
  00155	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  00158	50		 push	 eax
  00159	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5746 : 
; 5747 : 			if (buffer[1] == '0')

  0015e	b8 01 00 00 00	 mov	 eax, 1
  00163	c1 e0 00	 shl	 eax, 0
  00166	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  0016b	83 f9 30	 cmp	 ecx, 48			; 00000030H
  0016e	75 09		 jne	 SHORT $LN52@draw_weapo

; 5748 : 			{
; 5749 : 				u = 364 + (9 * 10);

  00170	c7 45 9c c6 01
	00 00		 mov	 DWORD PTR _u$[ebp], 454	; 000001c6H

; 5750 : 			}
; 5751 : 			else

  00177	eb 1c		 jmp	 SHORT $LN53@draw_weapo
$LN52@draw_weapo:

; 5752 : 			{
; 5753 : 				u = 364 + ((buffer[1] - '1') * 10);

  00179	b8 01 00 00 00	 mov	 eax, 1
  0017e	c1 e0 00	 shl	 eax, 0
  00181	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  00186	83 e9 31	 sub	 ecx, 49			; 00000031H
  00189	6b d1 0a	 imul	 edx, ecx, 10
  0018c	81 c2 6c 01 00
	00		 add	 edx, 364		; 0000016cH
  00192	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN53@draw_weapo:

; 5754 : 			}
; 5755 : 
; 5756 : 			draw_sprite (hardpoint_x + 9, hardpoint_y, u, v, 8, 12);

  00195	6a 0c		 push	 12			; 0000000cH
  00197	6a 08		 push	 8
  00199	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  0019c	50		 push	 eax
  0019d	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  001a0	51		 push	 ecx
  001a1	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  001a4	52		 push	 edx
  001a5	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  001a8	83 c0 09	 add	 eax, 9
  001ab	50		 push	 eax
  001ac	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5757 : 
; 5758 : 			if (buffer[2] == '0')

  001b1	b8 01 00 00 00	 mov	 eax, 1
  001b6	d1 e0		 shl	 eax, 1
  001b8	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  001bd	83 f9 30	 cmp	 ecx, 48			; 00000030H
  001c0	75 09		 jne	 SHORT $LN54@draw_weapo

; 5759 : 			{
; 5760 : 				u = 364 + (9 * 10);

  001c2	c7 45 9c c6 01
	00 00		 mov	 DWORD PTR _u$[ebp], 454	; 000001c6H

; 5761 : 			}
; 5762 : 			else

  001c9	eb 1b		 jmp	 SHORT $LN55@draw_weapo
$LN54@draw_weapo:

; 5763 : 			{
; 5764 : 				u = 364 + ((buffer[2] - '1') * 10);

  001cb	b8 01 00 00 00	 mov	 eax, 1
  001d0	d1 e0		 shl	 eax, 1
  001d2	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  001d7	83 e9 31	 sub	 ecx, 49			; 00000031H
  001da	6b d1 0a	 imul	 edx, ecx, 10
  001dd	81 c2 6c 01 00
	00		 add	 edx, 364		; 0000016cH
  001e3	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN55@draw_weapo:

; 5765 : 			}
; 5766 : 
; 5767 : 			draw_sprite (hardpoint_x + 18, hardpoint_y, u, v, 8, 12);

  001e6	6a 0c		 push	 12			; 0000000cH
  001e8	6a 08		 push	 8
  001ea	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  001ed	50		 push	 eax
  001ee	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  001f1	51		 push	 ecx
  001f2	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  001f5	52		 push	 edx
  001f6	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  001f9	83 c0 12	 add	 eax, 18			; 00000012H
  001fc	50		 push	 eax
  001fd	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5768 : 
; 5769 : 			if (buffer[3] == '0')

  00202	b8 01 00 00 00	 mov	 eax, 1
  00207	6b c8 03	 imul	 ecx, eax, 3
  0020a	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  0020f	83 fa 30	 cmp	 edx, 48			; 00000030H
  00212	75 09		 jne	 SHORT $LN56@draw_weapo

; 5770 : 			{
; 5771 : 				u = 364 + (9 * 10);

  00214	c7 45 9c c6 01
	00 00		 mov	 DWORD PTR _u$[ebp], 454	; 000001c6H

; 5772 : 			}
; 5773 : 			else

  0021b	eb 1b		 jmp	 SHORT $LN57@draw_weapo
$LN56@draw_weapo:

; 5774 : 			{
; 5775 : 				u = 364 + ((buffer[3] - '1') * 10);

  0021d	b8 01 00 00 00	 mov	 eax, 1
  00222	6b c8 03	 imul	 ecx, eax, 3
  00225	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  0022a	83 ea 31	 sub	 edx, 49			; 00000031H
  0022d	6b c2 0a	 imul	 eax, edx, 10
  00230	05 6c 01 00 00	 add	 eax, 364		; 0000016cH
  00235	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN57@draw_weapo:

; 5776 : 			}
; 5777 : 
; 5778 : 			draw_sprite (hardpoint_x + 27, hardpoint_y, u, v, 8, 12);

  00238	6a 0c		 push	 12			; 0000000cH
  0023a	6a 08		 push	 8
  0023c	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  0023f	50		 push	 eax
  00240	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  00243	51		 push	 ecx
  00244	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  00247	52		 push	 edx
  00248	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  0024b	83 c0 1b	 add	 eax, 27			; 0000001bH
  0024e	50		 push	 eax
  0024f	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5779 : 
; 5780 : 			//
; 5781 : 			// damage cross
; 5782 : 			//
; 5783 : 
; 5784 : 			if (damaged)

  00254	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00258	74 17		 je	 SHORT $LN58@draw_weapo

; 5785 : 			{
; 5786 : 				draw_sprite (116, 203, 334, 61, 32, 32);

  0025a	6a 20		 push	 32			; 00000020H
  0025c	6a 20		 push	 32			; 00000020H
  0025e	6a 3d		 push	 61			; 0000003dH
  00260	68 4e 01 00 00	 push	 334			; 0000014eH
  00265	68 cb 00 00 00	 push	 203			; 000000cbH
  0026a	6a 74		 push	 116			; 00000074H
  0026c	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN58@draw_weapo:

; 5787 : 			}
; 5788 : 		}
; 5789 : 		else

  00271	e9 1a 02 00 00	 jmp	 $LN40@draw_weapo
$LN41@draw_weapo:

; 5790 : 		{
; 5791 : 			////////////////////////////////////////
; 5792 : 			//
; 5793 : 			// SMALL
; 5794 : 			//
; 5795 : 			////////////////////////////////////////
; 5796 : 
; 5797 : 			//
; 5798 : 			// chain gun
; 5799 : 			//
; 5800 : 
; 5801 : 			if (number == 0)

  00276	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  0027a	75 2a		 jne	 SHORT $LN59@draw_weapo

; 5802 : 			{
; 5803 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  0027c	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0027f	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00282	75 20		 jne	 SHORT $LN61@draw_weapo
  00284	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00288	75 1a		 jne	 SHORT $LN61@draw_weapo

; 5804 : 				{
; 5805 : 					draw_sprite (61, 360, 133, 327, 14, 13);

  0028a	6a 0d		 push	 13			; 0000000dH
  0028c	6a 0e		 push	 14			; 0000000eH
  0028e	68 47 01 00 00	 push	 327			; 00000147H
  00293	68 85 00 00 00	 push	 133			; 00000085H
  00298	68 68 01 00 00	 push	 360			; 00000168H
  0029d	6a 3d		 push	 61			; 0000003dH
  0029f	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN61@draw_weapo:

; 5806 : 				}
; 5807 : 			}
; 5808 : 			else

  002a4	eb 44		 jmp	 SHORT $LN60@draw_weapo
$LN59@draw_weapo:

; 5809 : 			{
; 5810 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  002a6	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  002a9	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  002ac	75 22		 jne	 SHORT $LN62@draw_weapo
  002ae	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  002b2	75 1c		 jne	 SHORT $LN62@draw_weapo

; 5811 : 				{
; 5812 : 					draw_sprite (61, 360, 148, 327, 14, 13);

  002b4	6a 0d		 push	 13			; 0000000dH
  002b6	6a 0e		 push	 14			; 0000000eH
  002b8	68 47 01 00 00	 push	 327			; 00000147H
  002bd	68 94 00 00 00	 push	 148			; 00000094H
  002c2	68 68 01 00 00	 push	 360			; 00000168H
  002c7	6a 3d		 push	 61			; 0000003dH
  002c9	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5813 : 				}
; 5814 : 				else

  002ce	eb 1a		 jmp	 SHORT $LN60@draw_weapo
$LN62@draw_weapo:

; 5815 : 				{
; 5816 : 					draw_sprite (61, 360, 163, 327, 13, 13);

  002d0	6a 0d		 push	 13			; 0000000dH
  002d2	6a 0d		 push	 13			; 0000000dH
  002d4	68 47 01 00 00	 push	 327			; 00000147H
  002d9	68 a3 00 00 00	 push	 163			; 000000a3H
  002de	68 68 01 00 00	 push	 360			; 00000168H
  002e3	6a 3d		 push	 61			; 0000003dH
  002e5	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN60@draw_weapo:

; 5817 : 				}
; 5818 : 			}
; 5819 : 
; 5820 : 			//
; 5821 : 			// digits
; 5822 : 			//
; 5823 : 
; 5824 : 			hardpoint_x = 60;

  002ea	c7 45 a4 3c 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 60 ; 0000003cH

; 5825 : 			hardpoint_y = 377;

  002f1	c7 45 a0 79 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 377 ; 00000179H

; 5826 : 
; 5827 : 			sprintf (buffer, "%04d", number);

  002f8	8b 45 ac	 mov	 eax, DWORD PTR _number$[ebp]
  002fb	50		 push	 eax
  002fc	68 00 00 00 00	 push	 OFFSET ??_C@_04OCCELDNI@?$CF04d@
  00301	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00304	51		 push	 ecx
  00305	e8 00 00 00 00	 call	 _sprintf
  0030a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5828 : 
; 5829 : 			if ((weapon_sub_type == selected_weapon) && (!damaged))

  0030d	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00310	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00313	75 0f		 jne	 SHORT $LN64@draw_weapo
  00315	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00319	75 09		 jne	 SHORT $LN64@draw_weapo

; 5830 : 			{
; 5831 : 				v = 276;

  0031b	c7 45 98 14 01
	00 00		 mov	 DWORD PTR _v$[ebp], 276	; 00000114H

; 5832 : 			}
; 5833 : 			else

  00322	eb 07		 jmp	 SHORT $LN65@draw_weapo
$LN64@draw_weapo:

; 5834 : 			{
; 5835 : 				v = 283;

  00324	c7 45 98 1b 01
	00 00		 mov	 DWORD PTR _v$[ebp], 283	; 0000011bH
$LN65@draw_weapo:

; 5836 : 			}
; 5837 : 
; 5838 : 			if (buffer[0] == '0')

  0032b	b8 01 00 00 00	 mov	 eax, 1
  00330	6b c8 00	 imul	 ecx, eax, 0
  00333	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  00338	83 fa 30	 cmp	 edx, 48			; 00000030H
  0033b	75 09		 jne	 SHORT $LN66@draw_weapo

; 5839 : 			{
; 5840 : 				u = 184 + (9 * 5);

  0033d	c7 45 9c e5 00
	00 00		 mov	 DWORD PTR _u$[ebp], 229	; 000000e5H

; 5841 : 			}
; 5842 : 			else

  00344	eb 1b		 jmp	 SHORT $LN67@draw_weapo
$LN66@draw_weapo:

; 5843 : 			{
; 5844 : 				u = 184 + ((buffer[0] - '1') * 5);

  00346	b8 01 00 00 00	 mov	 eax, 1
  0034b	6b c8 00	 imul	 ecx, eax, 0
  0034e	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  00353	83 ea 31	 sub	 edx, 49			; 00000031H
  00356	6b c2 05	 imul	 eax, edx, 5
  00359	05 b8 00 00 00	 add	 eax, 184		; 000000b8H
  0035e	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN67@draw_weapo:

; 5845 : 			}
; 5846 : 
; 5847 : 			draw_sprite (hardpoint_x, hardpoint_y, u, v, 4, 6);

  00361	6a 06		 push	 6
  00363	6a 04		 push	 4
  00365	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  00368	50		 push	 eax
  00369	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  0036c	51		 push	 ecx
  0036d	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  00370	52		 push	 edx
  00371	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  00374	50		 push	 eax
  00375	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5848 : 
; 5849 : 			if (buffer[1] == '0')

  0037a	b8 01 00 00 00	 mov	 eax, 1
  0037f	c1 e0 00	 shl	 eax, 0
  00382	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  00387	83 f9 30	 cmp	 ecx, 48			; 00000030H
  0038a	75 09		 jne	 SHORT $LN68@draw_weapo

; 5850 : 			{
; 5851 : 				u = 184 + (9 * 5);

  0038c	c7 45 9c e5 00
	00 00		 mov	 DWORD PTR _u$[ebp], 229	; 000000e5H

; 5852 : 			}
; 5853 : 			else

  00393	eb 1c		 jmp	 SHORT $LN69@draw_weapo
$LN68@draw_weapo:

; 5854 : 			{
; 5855 : 				u = 184 + ((buffer[1] - '1') * 5);

  00395	b8 01 00 00 00	 mov	 eax, 1
  0039a	c1 e0 00	 shl	 eax, 0
  0039d	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  003a2	83 e9 31	 sub	 ecx, 49			; 00000031H
  003a5	6b d1 05	 imul	 edx, ecx, 5
  003a8	81 c2 b8 00 00
	00		 add	 edx, 184		; 000000b8H
  003ae	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN69@draw_weapo:

; 5856 : 			}
; 5857 : 
; 5858 : 			draw_sprite (hardpoint_x + 4, hardpoint_y, u, v, 4, 6);

  003b1	6a 06		 push	 6
  003b3	6a 04		 push	 4
  003b5	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  003b8	50		 push	 eax
  003b9	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  003bc	51		 push	 ecx
  003bd	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  003c0	52		 push	 edx
  003c1	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  003c4	83 c0 04	 add	 eax, 4
  003c7	50		 push	 eax
  003c8	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5859 : 
; 5860 : 			if (buffer[2] == '0')

  003cd	b8 01 00 00 00	 mov	 eax, 1
  003d2	d1 e0		 shl	 eax, 1
  003d4	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  003d9	83 f9 30	 cmp	 ecx, 48			; 00000030H
  003dc	75 09		 jne	 SHORT $LN70@draw_weapo

; 5861 : 			{
; 5862 : 				u = 184 + (9 * 5);

  003de	c7 45 9c e5 00
	00 00		 mov	 DWORD PTR _u$[ebp], 229	; 000000e5H

; 5863 : 			}
; 5864 : 			else

  003e5	eb 1b		 jmp	 SHORT $LN71@draw_weapo
$LN70@draw_weapo:

; 5865 : 			{
; 5866 : 				u = 184 + ((buffer[2] - '1') * 5);

  003e7	b8 01 00 00 00	 mov	 eax, 1
  003ec	d1 e0		 shl	 eax, 1
  003ee	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  003f3	83 e9 31	 sub	 ecx, 49			; 00000031H
  003f6	6b d1 05	 imul	 edx, ecx, 5
  003f9	81 c2 b8 00 00
	00		 add	 edx, 184		; 000000b8H
  003ff	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN71@draw_weapo:

; 5867 : 			}
; 5868 : 
; 5869 : 			draw_sprite (hardpoint_x + 8, hardpoint_y, u, v, 4, 6);

  00402	6a 06		 push	 6
  00404	6a 04		 push	 4
  00406	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  00409	50		 push	 eax
  0040a	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  0040d	51		 push	 ecx
  0040e	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  00411	52		 push	 edx
  00412	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  00415	83 c0 08	 add	 eax, 8
  00418	50		 push	 eax
  00419	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5870 : 
; 5871 : 			if (buffer[3] == '0')

  0041e	b8 01 00 00 00	 mov	 eax, 1
  00423	6b c8 03	 imul	 ecx, eax, 3
  00426	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  0042b	83 fa 30	 cmp	 edx, 48			; 00000030H
  0042e	75 09		 jne	 SHORT $LN72@draw_weapo

; 5872 : 			{
; 5873 : 				u = 184 + (9 * 5);

  00430	c7 45 9c e5 00
	00 00		 mov	 DWORD PTR _u$[ebp], 229	; 000000e5H

; 5874 : 			}
; 5875 : 			else

  00437	eb 1b		 jmp	 SHORT $LN73@draw_weapo
$LN72@draw_weapo:

; 5876 : 			{
; 5877 : 				u = 184 + ((buffer[3] - '1') * 5);

  00439	b8 01 00 00 00	 mov	 eax, 1
  0043e	6b c8 03	 imul	 ecx, eax, 3
  00441	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  00446	83 ea 31	 sub	 edx, 49			; 00000031H
  00449	6b c2 05	 imul	 eax, edx, 5
  0044c	05 b8 00 00 00	 add	 eax, 184		; 000000b8H
  00451	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN73@draw_weapo:

; 5878 : 			}
; 5879 : 
; 5880 : 			draw_sprite (hardpoint_x + 12, hardpoint_y, u, v, 4, 6);

  00454	6a 06		 push	 6
  00456	6a 04		 push	 4
  00458	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  0045b	50		 push	 eax
  0045c	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  0045f	51		 push	 ecx
  00460	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  00463	52		 push	 edx
  00464	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  00467	83 c0 0c	 add	 eax, 12			; 0000000cH
  0046a	50		 push	 eax
  0046b	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5881 : 
; 5882 : 			//
; 5883 : 			// damage cross
; 5884 : 			//
; 5885 : 
; 5886 : 			if (damaged)

  00470	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00474	74 1a		 je	 SHORT $LN40@draw_weapo

; 5887 : 			{
; 5888 : 				draw_sprite (60, 361, 169, 290, 16, 16);

  00476	6a 10		 push	 16			; 00000010H
  00478	6a 10		 push	 16			; 00000010H
  0047a	68 22 01 00 00	 push	 290			; 00000122H
  0047f	68 a9 00 00 00	 push	 169			; 000000a9H
  00484	68 69 01 00 00	 push	 361			; 00000169H
  00489	6a 3c		 push	 60			; 0000003cH
  0048b	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN40@draw_weapo:

; 5889 : 			}
; 5890 : 		}
; 5891 : 	}
; 5892 : 
; 5893 : 	////////////////////////////////////////////////////////////////////////////////
; 5894 : 	//
; 5895 : 	// Hydras
; 5896 : 	//
; 5897 : 	////////////////////////////////////////////////////////////////////////////////
; 5898 : 
; 5899 : 	if ((weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_HYDRA70_M255) || (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_HYDRA70_M261))

  00490	83 7d 94 1e	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 30 ; 0000001eH
  00494	74 0a		 je	 SHORT $LN76@draw_weapo
  00496	83 7d 94 1f	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 31 ; 0000001fH
  0049a	0f 85 ba 06 00
	00		 jne	 $LN75@draw_weapo
$LN76@draw_weapo:

; 5900 : 	{
; 5901 : 		if (draw_large_mfd)

  004a0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  004a7	0f 84 4a 03 00
	00		 je	 $LN77@draw_weapo

; 5902 : 		{
; 5903 : 			////////////////////////////////////////
; 5904 : 			//
; 5905 : 			// LARGE
; 5906 : 			//
; 5907 : 			////////////////////////////////////////
; 5908 : 
; 5909 : 			//
; 5910 : 			// rocket pod
; 5911 : 			//
; 5912 : 
; 5913 : 			switch (heading_depth)

  004ad	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  004b0	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv314[ebp], eax
  004b6	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv314[ebp], 3
  004bd	77 4b		 ja	 SHORT $LN2@draw_weapo
  004bf	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv314[ebp]
  004c5	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN383@draw_weapo[ecx*4]
$LN79@draw_weapo:

; 5914 : 			{
; 5915 : 				case APACHE_LHS_INNER_PYLON:
; 5916 : 				{
; 5917 : 					hardpoint_x = 50;

  004cc	c7 45 a4 32 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 50 ; 00000032H

; 5918 : 					hardpoint_y = 177;

  004d3	c7 45 a0 b1 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 177 ; 000000b1H

; 5919 : 
; 5920 : 					break;

  004da	eb 2e		 jmp	 SHORT $LN2@draw_weapo
$LN80@draw_weapo:

; 5921 : 				}
; 5922 : 				case APACHE_RHS_INNER_PYLON:
; 5923 : 				{
; 5924 : 					hardpoint_x = 188;

  004dc	c7 45 a4 bc 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 188 ; 000000bcH

; 5925 : 					hardpoint_y = 177;

  004e3	c7 45 a0 b1 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 177 ; 000000b1H

; 5926 : 
; 5927 : 					break;

  004ea	eb 1e		 jmp	 SHORT $LN2@draw_weapo
$LN81@draw_weapo:

; 5928 : 				}
; 5929 : 				case APACHE_LHS_OUTER_PYLON:
; 5930 : 				{
; 5931 : 					hardpoint_x = 18;

  004ec	c7 45 a4 12 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 18 ; 00000012H

; 5932 : 					hardpoint_y = 177;

  004f3	c7 45 a0 b1 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 177 ; 000000b1H

; 5933 : 
; 5934 : 					break;

  004fa	eb 0e		 jmp	 SHORT $LN2@draw_weapo
$LN82@draw_weapo:

; 5935 : 				}
; 5936 : 				case APACHE_RHS_OUTER_PYLON:
; 5937 : 				{
; 5938 : 					hardpoint_x = 220;

  004fc	c7 45 a4 dc 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 220 ; 000000dcH

; 5939 : 					hardpoint_y = 177;

  00503	c7 45 a0 b1 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 177 ; 000000b1H
$LN2@draw_weapo:

; 5940 : 
; 5941 : 					break;
; 5942 : 				}
; 5943 : 			}
; 5944 : 
; 5945 : 			if (number == 0)

  0050a	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  0050e	75 45		 jne	 SHORT $LN83@draw_weapo

; 5946 : 			{
; 5947 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  00510	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00513	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00516	75 20		 jne	 SHORT $LN85@draw_weapo
  00518	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0051c	75 1a		 jne	 SHORT $LN85@draw_weapo

; 5948 : 				{
; 5949 : 					draw_sprite (hardpoint_x, hardpoint_y, 262, 99, 26, 33);

  0051e	6a 21		 push	 33			; 00000021H
  00520	6a 1a		 push	 26			; 0000001aH
  00522	6a 63		 push	 99			; 00000063H
  00524	68 06 01 00 00	 push	 262			; 00000106H
  00529	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0052c	50		 push	 eax
  0052d	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00530	51		 push	 ecx
  00531	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5950 : 				}
; 5951 : 				else

  00536	eb 18		 jmp	 SHORT $LN86@draw_weapo
$LN85@draw_weapo:

; 5952 : 				{
; 5953 : 					draw_sprite (hardpoint_x, hardpoint_y, 319, 99, 26, 33);

  00538	6a 21		 push	 33			; 00000021H
  0053a	6a 1a		 push	 26			; 0000001aH
  0053c	6a 63		 push	 99			; 00000063H
  0053e	68 3f 01 00 00	 push	 319			; 0000013fH
  00543	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00546	50		 push	 eax
  00547	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0054a	51		 push	 ecx
  0054b	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN86@draw_weapo:

; 5954 : 				}
; 5955 : 			}
; 5956 : 			else

  00550	e9 27 01 00 00	 jmp	 $LN84@draw_weapo
$LN83@draw_weapo:

; 5957 : 			{
; 5958 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  00555	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00558	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  0055b	75 20		 jne	 SHORT $LN87@draw_weapo
  0055d	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00561	75 1a		 jne	 SHORT $LN87@draw_weapo

; 5959 : 				{
; 5960 : 					draw_sprite (hardpoint_x, hardpoint_y, 291, 99, 26, 33);

  00563	6a 21		 push	 33			; 00000021H
  00565	6a 1a		 push	 26			; 0000001aH
  00567	6a 63		 push	 99			; 00000063H
  00569	68 23 01 00 00	 push	 291			; 00000123H
  0056e	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00571	50		 push	 eax
  00572	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00575	51		 push	 ecx
  00576	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5961 : 				}
; 5962 : 				else

  0057b	eb 18		 jmp	 SHORT $LN88@draw_weapo
$LN87@draw_weapo:

; 5963 : 				{
; 5964 : 					draw_sprite (hardpoint_x, hardpoint_y, 347, 99, 26, 33);

  0057d	6a 21		 push	 33			; 00000021H
  0057f	6a 1a		 push	 26			; 0000001aH
  00581	6a 63		 push	 99			; 00000063H
  00583	68 5b 01 00 00	 push	 347			; 0000015bH
  00588	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0058b	50		 push	 eax
  0058c	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0058f	51		 push	 ecx
  00590	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN88@draw_weapo:

; 5965 : 				}
; 5966 : 
; 5967 : 				//
; 5968 : 				// digits
; 5969 : 				//
; 5970 : 
; 5971 : 				hardpoint_x += 4;

  00595	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  00598	83 c0 04	 add	 eax, 4
  0059b	89 45 a4	 mov	 DWORD PTR _hardpoint_x$[ebp], eax

; 5972 : 				hardpoint_y += 14;

  0059e	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  005a1	83 c0 0e	 add	 eax, 14			; 0000000eH
  005a4	89 45 a0	 mov	 DWORD PTR _hardpoint_y$[ebp], eax

; 5973 : 
; 5974 : 				sprintf (buffer, "%02d", number);

  005a7	8b 45 ac	 mov	 eax, DWORD PTR _number$[ebp]
  005aa	50		 push	 eax
  005ab	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  005b0	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  005b3	51		 push	 ecx
  005b4	e8 00 00 00 00	 call	 _sprintf
  005b9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5975 : 
; 5976 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  005bc	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  005bf	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  005c2	75 0f		 jne	 SHORT $LN89@draw_weapo
  005c4	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  005c8	75 09		 jne	 SHORT $LN89@draw_weapo

; 5977 : 				{
; 5978 : 					v = 32;

  005ca	c7 45 98 20 00
	00 00		 mov	 DWORD PTR _v$[ebp], 32	; 00000020H

; 5979 : 				}
; 5980 : 				else

  005d1	eb 07		 jmp	 SHORT $LN90@draw_weapo
$LN89@draw_weapo:

; 5981 : 				{
; 5982 : 					v = 47;

  005d3	c7 45 98 2f 00
	00 00		 mov	 DWORD PTR _v$[ebp], 47	; 0000002fH
$LN90@draw_weapo:

; 5983 : 				}
; 5984 : 
; 5985 : 				if (buffer[0] == '0')

  005da	b8 01 00 00 00	 mov	 eax, 1
  005df	6b c8 00	 imul	 ecx, eax, 0
  005e2	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  005e7	83 fa 30	 cmp	 edx, 48			; 00000030H
  005ea	75 09		 jne	 SHORT $LN91@draw_weapo

; 5986 : 				{
; 5987 : 					u = 263 + (9 * 10);

  005ec	c7 45 9c 61 01
	00 00		 mov	 DWORD PTR _u$[ebp], 353	; 00000161H

; 5988 : 				}
; 5989 : 				else

  005f3	eb 1b		 jmp	 SHORT $LN92@draw_weapo
$LN91@draw_weapo:

; 5990 : 				{
; 5991 : 					u = 263 + ((buffer[0] - '1') * 10);

  005f5	b8 01 00 00 00	 mov	 eax, 1
  005fa	6b c8 00	 imul	 ecx, eax, 0
  005fd	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  00602	83 ea 31	 sub	 edx, 49			; 00000031H
  00605	6b c2 0a	 imul	 eax, edx, 10
  00608	05 07 01 00 00	 add	 eax, 263		; 00000107H
  0060d	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN92@draw_weapo:

; 5992 : 				}
; 5993 : 
; 5994 : 				draw_sprite (hardpoint_x, hardpoint_y, u, v, 8, 12);

  00610	6a 0c		 push	 12			; 0000000cH
  00612	6a 08		 push	 8
  00614	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  00617	50		 push	 eax
  00618	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  0061b	51		 push	 ecx
  0061c	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  0061f	52		 push	 edx
  00620	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  00623	50		 push	 eax
  00624	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5995 : 
; 5996 : 				if (buffer[1] == '0')

  00629	b8 01 00 00 00	 mov	 eax, 1
  0062e	c1 e0 00	 shl	 eax, 0
  00631	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  00636	83 f9 30	 cmp	 ecx, 48			; 00000030H
  00639	75 09		 jne	 SHORT $LN93@draw_weapo

; 5997 : 				{
; 5998 : 					u = 263 + (9 * 10);

  0063b	c7 45 9c 61 01
	00 00		 mov	 DWORD PTR _u$[ebp], 353	; 00000161H

; 5999 : 				}
; 6000 : 				else

  00642	eb 1c		 jmp	 SHORT $LN94@draw_weapo
$LN93@draw_weapo:

; 6001 : 				{
; 6002 : 					u = 263 + ((buffer[1] - '1') * 10);

  00644	b8 01 00 00 00	 mov	 eax, 1
  00649	c1 e0 00	 shl	 eax, 0
  0064c	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  00651	83 e9 31	 sub	 ecx, 49			; 00000031H
  00654	6b d1 0a	 imul	 edx, ecx, 10
  00657	81 c2 07 01 00
	00		 add	 edx, 263		; 00000107H
  0065d	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN94@draw_weapo:

; 6003 : 				}
; 6004 : 
; 6005 : 				draw_sprite (hardpoint_x + 8, hardpoint_y, u, v, 8, 12);

  00660	6a 0c		 push	 12			; 0000000cH
  00662	6a 08		 push	 8
  00664	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  00667	50		 push	 eax
  00668	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  0066b	51		 push	 ecx
  0066c	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  0066f	52		 push	 edx
  00670	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  00673	83 c0 08	 add	 eax, 8
  00676	50		 push	 eax
  00677	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN84@draw_weapo:

; 6006 : 			}
; 6007 : 
; 6008 : 			//
; 6009 : 			// damage cross
; 6010 : 			//
; 6011 : 
; 6012 : 			if (damaged)

  0067c	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00680	0f 84 87 00 00
	00		 je	 $LN95@draw_weapo

; 6013 : 			{
; 6014 : 				switch (heading_depth)

  00686	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  00689	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv386[ebp], eax
  0068f	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv386[ebp], 3
  00696	77 75		 ja	 SHORT $LN95@draw_weapo
  00698	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv386[ebp]
  0069e	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN384@draw_weapo[ecx*4]
$LN96@draw_weapo:

; 6015 : 				{
; 6016 : 					case APACHE_LHS_INNER_PYLON:
; 6017 : 					{
; 6018 : 						draw_sprite (47, 181, 334, 61, 32, 32);

  006a5	6a 20		 push	 32			; 00000020H
  006a7	6a 20		 push	 32			; 00000020H
  006a9	6a 3d		 push	 61			; 0000003dH
  006ab	68 4e 01 00 00	 push	 334			; 0000014eH
  006b0	68 b5 00 00 00	 push	 181			; 000000b5H
  006b5	6a 2f		 push	 47			; 0000002fH
  006b7	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6019 : 
; 6020 : 						break;

  006bc	eb 4f		 jmp	 SHORT $LN95@draw_weapo
$LN97@draw_weapo:

; 6021 : 					}
; 6022 : 					case APACHE_RHS_INNER_PYLON:
; 6023 : 					{
; 6024 : 						draw_sprite (185, 181, 334, 61, 32, 32);

  006be	6a 20		 push	 32			; 00000020H
  006c0	6a 20		 push	 32			; 00000020H
  006c2	6a 3d		 push	 61			; 0000003dH
  006c4	68 4e 01 00 00	 push	 334			; 0000014eH
  006c9	68 b5 00 00 00	 push	 181			; 000000b5H
  006ce	68 b9 00 00 00	 push	 185			; 000000b9H
  006d3	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6025 : 
; 6026 : 						break;

  006d8	eb 33		 jmp	 SHORT $LN95@draw_weapo
$LN98@draw_weapo:

; 6027 : 					}
; 6028 : 					case APACHE_LHS_OUTER_PYLON:
; 6029 : 					{
; 6030 : 						draw_sprite (15, 181, 334, 61, 32, 32);

  006da	6a 20		 push	 32			; 00000020H
  006dc	6a 20		 push	 32			; 00000020H
  006de	6a 3d		 push	 61			; 0000003dH
  006e0	68 4e 01 00 00	 push	 334			; 0000014eH
  006e5	68 b5 00 00 00	 push	 181			; 000000b5H
  006ea	6a 0f		 push	 15			; 0000000fH
  006ec	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6031 : 
; 6032 : 						break;

  006f1	eb 1a		 jmp	 SHORT $LN95@draw_weapo
$LN99@draw_weapo:

; 6033 : 					}
; 6034 : 					case APACHE_RHS_OUTER_PYLON:
; 6035 : 					{
; 6036 : 						draw_sprite (217, 181, 334, 61, 32, 32);

  006f3	6a 20		 push	 32			; 00000020H
  006f5	6a 20		 push	 32			; 00000020H
  006f7	6a 3d		 push	 61			; 0000003dH
  006f9	68 4e 01 00 00	 push	 334			; 0000014eH
  006fe	68 b5 00 00 00	 push	 181			; 000000b5H
  00703	68 d9 00 00 00	 push	 217			; 000000d9H
  00708	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN95@draw_weapo:

; 6037 : 
; 6038 : 						break;
; 6039 : 					}
; 6040 : 				}
; 6041 : 			}
; 6042 : 
; 6043 : 			//
; 6044 : 			// type
; 6045 : 			//
; 6046 : 
; 6047 : 			switch (heading_depth)

  0070d	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  00710	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv412[ebp], eax
  00716	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv412[ebp], 3
  0071d	77 4b		 ja	 SHORT $LN6@draw_weapo
  0071f	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv412[ebp]
  00725	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN385@draw_weapo[ecx*4]
$LN100@draw_weapo:

; 6048 : 			{
; 6049 : 				case APACHE_LHS_INNER_PYLON:
; 6050 : 				{
; 6051 : 					hardpoint_x = 47;

  0072c	c7 45 a4 2f 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 47 ; 0000002fH

; 6052 : 					hardpoint_y = 234;

  00733	c7 45 a0 ea 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 234 ; 000000eaH

; 6053 : 
; 6054 : 					break;

  0073a	eb 2e		 jmp	 SHORT $LN6@draw_weapo
$LN101@draw_weapo:

; 6055 : 				}
; 6056 : 				case APACHE_RHS_INNER_PYLON:
; 6057 : 				{
; 6058 : 					hardpoint_x = 185;

  0073c	c7 45 a4 b9 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 185 ; 000000b9H

; 6059 : 					hardpoint_y = 234;

  00743	c7 45 a0 ea 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 234 ; 000000eaH

; 6060 : 
; 6061 : 					break;

  0074a	eb 1e		 jmp	 SHORT $LN6@draw_weapo
$LN102@draw_weapo:

; 6062 : 				}
; 6063 : 				case APACHE_LHS_OUTER_PYLON:
; 6064 : 				{
; 6065 : 					hardpoint_x = 15;

  0074c	c7 45 a4 0f 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 15 ; 0000000fH

; 6066 : 					hardpoint_y = 234;

  00753	c7 45 a0 ea 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 234 ; 000000eaH

; 6067 : 
; 6068 : 					break;

  0075a	eb 0e		 jmp	 SHORT $LN6@draw_weapo
$LN103@draw_weapo:

; 6069 : 				}
; 6070 : 				case APACHE_RHS_OUTER_PYLON:
; 6071 : 				{
; 6072 : 					hardpoint_x = 217;

  0075c	c7 45 a4 d9 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 217 ; 000000d9H

; 6073 : 					hardpoint_y = 234;

  00763	c7 45 a0 ea 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 234 ; 000000eaH
$LN6@draw_weapo:

; 6074 : 
; 6075 : 					break;
; 6076 : 				}
; 6077 : 			}
; 6078 : 
; 6079 : 			if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_HYDRA70_M255)

  0076a	83 7d 94 1e	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 30 ; 0000001eH
  0076e	75 42		 jne	 SHORT $LN104@draw_weapo

; 6080 : 			{
; 6081 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  00770	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00773	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00776	75 20		 jne	 SHORT $LN106@draw_weapo
  00778	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0077c	75 1a		 jne	 SHORT $LN106@draw_weapo

; 6082 : 				{
; 6083 : 					draw_sprite (hardpoint_x, hardpoint_y, 262, 17, 31, 12);

  0077e	6a 0c		 push	 12			; 0000000cH
  00780	6a 1f		 push	 31			; 0000001fH
  00782	6a 11		 push	 17			; 00000011H
  00784	68 06 01 00 00	 push	 262			; 00000106H
  00789	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0078c	50		 push	 eax
  0078d	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00790	51		 push	 ecx
  00791	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6084 : 				}
; 6085 : 				else

  00796	eb 18		 jmp	 SHORT $LN107@draw_weapo
$LN106@draw_weapo:

; 6086 : 				{
; 6087 : 					draw_sprite (hardpoint_x, hardpoint_y, 342, 17, 31, 12);

  00798	6a 0c		 push	 12			; 0000000cH
  0079a	6a 1f		 push	 31			; 0000001fH
  0079c	6a 11		 push	 17			; 00000011H
  0079e	68 56 01 00 00	 push	 342			; 00000156H
  007a3	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  007a6	50		 push	 eax
  007a7	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  007aa	51		 push	 ecx
  007ab	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN107@draw_weapo:

; 6088 : 				}
; 6089 : 			}
; 6090 : 			else

  007b0	eb 40		 jmp	 SHORT $LN105@draw_weapo
$LN104@draw_weapo:

; 6091 : 			{
; 6092 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  007b2	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  007b5	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  007b8	75 20		 jne	 SHORT $LN108@draw_weapo
  007ba	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  007be	75 1a		 jne	 SHORT $LN108@draw_weapo

; 6093 : 				{
; 6094 : 					draw_sprite (hardpoint_x, hardpoint_y, 295, 17, 31, 12);

  007c0	6a 0c		 push	 12			; 0000000cH
  007c2	6a 1f		 push	 31			; 0000001fH
  007c4	6a 11		 push	 17			; 00000011H
  007c6	68 27 01 00 00	 push	 295			; 00000127H
  007cb	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  007ce	50		 push	 eax
  007cf	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  007d2	51		 push	 ecx
  007d3	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6095 : 				}
; 6096 : 				else

  007d8	eb 18		 jmp	 SHORT $LN105@draw_weapo
$LN108@draw_weapo:

; 6097 : 				{
; 6098 : 					draw_sprite (hardpoint_x, hardpoint_y, 375, 17, 31, 12);

  007da	6a 0c		 push	 12			; 0000000cH
  007dc	6a 1f		 push	 31			; 0000001fH
  007de	6a 11		 push	 17			; 00000011H
  007e0	68 77 01 00 00	 push	 375			; 00000177H
  007e5	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  007e8	50		 push	 eax
  007e9	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  007ec	51		 push	 ecx
  007ed	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN105@draw_weapo:

; 6099 : 				}
; 6100 : 			}
; 6101 : 		}
; 6102 : 		else

  007f2	e9 63 03 00 00	 jmp	 $LN75@draw_weapo
$LN77@draw_weapo:

; 6103 : 		{
; 6104 : 			////////////////////////////////////////
; 6105 : 			//
; 6106 : 			// SMALL
; 6107 : 			//
; 6108 : 			////////////////////////////////////////
; 6109 : 
; 6110 : 			//
; 6111 : 			// rocket pod
; 6112 : 			//
; 6113 : 
; 6114 : 			switch (heading_depth)

  007f7	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  007fa	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv443[ebp], eax
  00800	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv443[ebp], 3
  00807	77 4b		 ja	 SHORT $LN8@draw_weapo
  00809	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv443[ebp]
  0080f	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN386@draw_weapo[ecx*4]
$LN110@draw_weapo:

; 6115 : 			{
; 6116 : 				case APACHE_LHS_INNER_PYLON:
; 6117 : 				{
; 6118 : 					hardpoint_x = 27;

  00816	c7 45 a4 1b 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 27 ; 0000001bH

; 6119 : 					hardpoint_y = 348;

  0081d	c7 45 a0 5c 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 348 ; 0000015cH

; 6120 : 
; 6121 : 					break;

  00824	eb 2e		 jmp	 SHORT $LN8@draw_weapo
$LN111@draw_weapo:

; 6122 : 				}
; 6123 : 				case APACHE_RHS_INNER_PYLON:
; 6124 : 				{
; 6125 : 					hardpoint_x = 96;

  00826	c7 45 a4 60 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 96 ; 00000060H

; 6126 : 					hardpoint_y = 348;

  0082d	c7 45 a0 5c 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 348 ; 0000015cH

; 6127 : 
; 6128 : 					break;

  00834	eb 1e		 jmp	 SHORT $LN8@draw_weapo
$LN112@draw_weapo:

; 6129 : 				}
; 6130 : 				case APACHE_LHS_OUTER_PYLON:
; 6131 : 				{
; 6132 : 					hardpoint_x = 11;

  00836	c7 45 a4 0b 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 11 ; 0000000bH

; 6133 : 					hardpoint_y = 348;

  0083d	c7 45 a0 5c 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 348 ; 0000015cH

; 6134 : 
; 6135 : 					break;

  00844	eb 0e		 jmp	 SHORT $LN8@draw_weapo
$LN113@draw_weapo:

; 6136 : 				}
; 6137 : 				case APACHE_RHS_OUTER_PYLON:
; 6138 : 				{
; 6139 : 					hardpoint_x = 112;

  00846	c7 45 a4 70 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 112 ; 00000070H

; 6140 : 					hardpoint_y = 348;

  0084d	c7 45 a0 5c 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 348 ; 0000015cH
$LN8@draw_weapo:

; 6141 : 
; 6142 : 					break;
; 6143 : 				}
; 6144 : 			}
; 6145 : 
; 6146 : 			if (number == 0)

  00854	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  00858	75 4b		 jne	 SHORT $LN114@draw_weapo

; 6147 : 			{
; 6148 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  0085a	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0085d	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00860	75 23		 jne	 SHORT $LN116@draw_weapo
  00862	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00866	75 1d		 jne	 SHORT $LN116@draw_weapo

; 6149 : 				{
; 6150 : 					draw_sprite (hardpoint_x, hardpoint_y, 133, 309, 13, 17);

  00868	6a 11		 push	 17			; 00000011H
  0086a	6a 0d		 push	 13			; 0000000dH
  0086c	68 35 01 00 00	 push	 309			; 00000135H
  00871	68 85 00 00 00	 push	 133			; 00000085H
  00876	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00879	50		 push	 eax
  0087a	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0087d	51		 push	 ecx
  0087e	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6151 : 				}
; 6152 : 				else

  00883	eb 1b		 jmp	 SHORT $LN117@draw_weapo
$LN116@draw_weapo:

; 6153 : 				{
; 6154 : 					draw_sprite (hardpoint_x, hardpoint_y, 161, 309, 13, 17);

  00885	6a 11		 push	 17			; 00000011H
  00887	6a 0d		 push	 13			; 0000000dH
  00889	68 35 01 00 00	 push	 309			; 00000135H
  0088e	68 a1 00 00 00	 push	 161			; 000000a1H
  00893	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00896	50		 push	 eax
  00897	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0089a	51		 push	 ecx
  0089b	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN117@draw_weapo:

; 6155 : 				}
; 6156 : 			}
; 6157 : 			else

  008a0	e9 2d 01 00 00	 jmp	 $LN115@draw_weapo
$LN114@draw_weapo:

; 6158 : 			{
; 6159 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  008a5	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  008a8	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  008ab	75 23		 jne	 SHORT $LN118@draw_weapo
  008ad	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  008b1	75 1d		 jne	 SHORT $LN118@draw_weapo

; 6160 : 				{
; 6161 : 					draw_sprite (hardpoint_x, hardpoint_y, 147, 309, 13, 17);

  008b3	6a 11		 push	 17			; 00000011H
  008b5	6a 0d		 push	 13			; 0000000dH
  008b7	68 35 01 00 00	 push	 309			; 00000135H
  008bc	68 93 00 00 00	 push	 147			; 00000093H
  008c1	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  008c4	50		 push	 eax
  008c5	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  008c8	51		 push	 ecx
  008c9	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6162 : 				}
; 6163 : 				else

  008ce	eb 1b		 jmp	 SHORT $LN119@draw_weapo
$LN118@draw_weapo:

; 6164 : 				{
; 6165 : 					draw_sprite (hardpoint_x, hardpoint_y, 175, 309, 13, 17);

  008d0	6a 11		 push	 17			; 00000011H
  008d2	6a 0d		 push	 13			; 0000000dH
  008d4	68 35 01 00 00	 push	 309			; 00000135H
  008d9	68 af 00 00 00	 push	 175			; 000000afH
  008de	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  008e1	50		 push	 eax
  008e2	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  008e5	51		 push	 ecx
  008e6	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN119@draw_weapo:

; 6166 : 				}
; 6167 : 
; 6168 : 				//
; 6169 : 				// digits
; 6170 : 				//
; 6171 : 
; 6172 : 				hardpoint_x += 2;

  008eb	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  008ee	83 c0 02	 add	 eax, 2
  008f1	89 45 a4	 mov	 DWORD PTR _hardpoint_x$[ebp], eax

; 6173 : 				hardpoint_y += 7;

  008f4	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  008f7	83 c0 07	 add	 eax, 7
  008fa	89 45 a0	 mov	 DWORD PTR _hardpoint_y$[ebp], eax

; 6174 : 
; 6175 : 				sprintf (buffer, "%02d", number);

  008fd	8b 45 ac	 mov	 eax, DWORD PTR _number$[ebp]
  00900	50		 push	 eax
  00901	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  00906	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00909	51		 push	 ecx
  0090a	e8 00 00 00 00	 call	 _sprintf
  0090f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6176 : 
; 6177 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  00912	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00915	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00918	75 0f		 jne	 SHORT $LN120@draw_weapo
  0091a	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0091e	75 09		 jne	 SHORT $LN120@draw_weapo

; 6178 : 				{
; 6179 : 					v = 276;

  00920	c7 45 98 14 01
	00 00		 mov	 DWORD PTR _v$[ebp], 276	; 00000114H

; 6180 : 				}
; 6181 : 				else

  00927	eb 07		 jmp	 SHORT $LN121@draw_weapo
$LN120@draw_weapo:

; 6182 : 				{
; 6183 : 					v = 283;

  00929	c7 45 98 1b 01
	00 00		 mov	 DWORD PTR _v$[ebp], 283	; 0000011bH
$LN121@draw_weapo:

; 6184 : 				}
; 6185 : 
; 6186 : 				if (buffer[0] == '0')

  00930	b8 01 00 00 00	 mov	 eax, 1
  00935	6b c8 00	 imul	 ecx, eax, 0
  00938	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  0093d	83 fa 30	 cmp	 edx, 48			; 00000030H
  00940	75 09		 jne	 SHORT $LN122@draw_weapo

; 6187 : 				{
; 6188 : 					u = 133 + (9 * 5);

  00942	c7 45 9c b2 00
	00 00		 mov	 DWORD PTR _u$[ebp], 178	; 000000b2H

; 6189 : 				}
; 6190 : 				else

  00949	eb 1b		 jmp	 SHORT $LN123@draw_weapo
$LN122@draw_weapo:

; 6191 : 				{
; 6192 : 					u = 133 + ((buffer[0] - '1') * 5);

  0094b	b8 01 00 00 00	 mov	 eax, 1
  00950	6b c8 00	 imul	 ecx, eax, 0
  00953	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  00958	83 ea 31	 sub	 edx, 49			; 00000031H
  0095b	6b c2 05	 imul	 eax, edx, 5
  0095e	05 85 00 00 00	 add	 eax, 133		; 00000085H
  00963	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN123@draw_weapo:

; 6193 : 				}
; 6194 : 
; 6195 : 				draw_sprite (hardpoint_x, hardpoint_y, u, v, 4, 6);

  00966	6a 06		 push	 6
  00968	6a 04		 push	 4
  0096a	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  0096d	50		 push	 eax
  0096e	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  00971	51		 push	 ecx
  00972	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  00975	52		 push	 edx
  00976	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  00979	50		 push	 eax
  0097a	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6196 : 
; 6197 : 				if (buffer[1] == '0')

  0097f	b8 01 00 00 00	 mov	 eax, 1
  00984	c1 e0 00	 shl	 eax, 0
  00987	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  0098c	83 f9 30	 cmp	 ecx, 48			; 00000030H
  0098f	75 09		 jne	 SHORT $LN124@draw_weapo

; 6198 : 				{
; 6199 : 					u = 133 + (9 * 5);

  00991	c7 45 9c b2 00
	00 00		 mov	 DWORD PTR _u$[ebp], 178	; 000000b2H

; 6200 : 				}
; 6201 : 				else

  00998	eb 1c		 jmp	 SHORT $LN125@draw_weapo
$LN124@draw_weapo:

; 6202 : 				{
; 6203 : 					u = 133 + ((buffer[1] - '1') * 5);

  0099a	b8 01 00 00 00	 mov	 eax, 1
  0099f	c1 e0 00	 shl	 eax, 0
  009a2	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  009a7	83 e9 31	 sub	 ecx, 49			; 00000031H
  009aa	6b d1 05	 imul	 edx, ecx, 5
  009ad	81 c2 85 00 00
	00		 add	 edx, 133		; 00000085H
  009b3	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN125@draw_weapo:

; 6204 : 				}
; 6205 : 
; 6206 : 				draw_sprite (hardpoint_x + 4, hardpoint_y, u, v, 4, 6);

  009b6	6a 06		 push	 6
  009b8	6a 04		 push	 4
  009ba	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  009bd	50		 push	 eax
  009be	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  009c1	51		 push	 ecx
  009c2	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  009c5	52		 push	 edx
  009c6	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  009c9	83 c0 04	 add	 eax, 4
  009cc	50		 push	 eax
  009cd	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN115@draw_weapo:

; 6207 : 			}
; 6208 : 
; 6209 : 			//
; 6210 : 			// damage cross
; 6211 : 			//
; 6212 : 
; 6213 : 			if (damaged)

  009d2	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  009d6	0f 84 8d 00 00
	00		 je	 $LN126@draw_weapo

; 6214 : 			{
; 6215 : 				switch (heading_depth)

  009dc	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  009df	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv515[ebp], eax
  009e5	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv515[ebp], 3
  009ec	77 7b		 ja	 SHORT $LN126@draw_weapo
  009ee	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv515[ebp]
  009f4	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN387@draw_weapo[ecx*4]
$LN127@draw_weapo:

; 6216 : 				{
; 6217 : 					case APACHE_LHS_INNER_PYLON:
; 6218 : 					{
; 6219 : 						draw_sprite (26, 350, 169, 290, 16, 16);

  009fb	6a 10		 push	 16			; 00000010H
  009fd	6a 10		 push	 16			; 00000010H
  009ff	68 22 01 00 00	 push	 290			; 00000122H
  00a04	68 a9 00 00 00	 push	 169			; 000000a9H
  00a09	68 5e 01 00 00	 push	 350			; 0000015eH
  00a0e	6a 1a		 push	 26			; 0000001aH
  00a10	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6220 : 
; 6221 : 						break;

  00a15	eb 52		 jmp	 SHORT $LN126@draw_weapo
$LN128@draw_weapo:

; 6222 : 					}
; 6223 : 					case APACHE_RHS_INNER_PYLON:
; 6224 : 					{
; 6225 : 						draw_sprite (95, 350, 169, 290, 16, 16);

  00a17	6a 10		 push	 16			; 00000010H
  00a19	6a 10		 push	 16			; 00000010H
  00a1b	68 22 01 00 00	 push	 290			; 00000122H
  00a20	68 a9 00 00 00	 push	 169			; 000000a9H
  00a25	68 5e 01 00 00	 push	 350			; 0000015eH
  00a2a	6a 5f		 push	 95			; 0000005fH
  00a2c	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6226 : 
; 6227 : 						break;

  00a31	eb 36		 jmp	 SHORT $LN126@draw_weapo
$LN129@draw_weapo:

; 6228 : 					}
; 6229 : 					case APACHE_LHS_OUTER_PYLON:
; 6230 : 					{
; 6231 : 						draw_sprite (10, 350, 169, 290, 16, 16);

  00a33	6a 10		 push	 16			; 00000010H
  00a35	6a 10		 push	 16			; 00000010H
  00a37	68 22 01 00 00	 push	 290			; 00000122H
  00a3c	68 a9 00 00 00	 push	 169			; 000000a9H
  00a41	68 5e 01 00 00	 push	 350			; 0000015eH
  00a46	6a 0a		 push	 10			; 0000000aH
  00a48	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6232 : 
; 6233 : 						break;

  00a4d	eb 1a		 jmp	 SHORT $LN126@draw_weapo
$LN130@draw_weapo:

; 6234 : 					}
; 6235 : 					case APACHE_RHS_OUTER_PYLON:
; 6236 : 					{
; 6237 : 						draw_sprite (111, 350, 169, 290, 16, 16);

  00a4f	6a 10		 push	 16			; 00000010H
  00a51	6a 10		 push	 16			; 00000010H
  00a53	68 22 01 00 00	 push	 290			; 00000122H
  00a58	68 a9 00 00 00	 push	 169			; 000000a9H
  00a5d	68 5e 01 00 00	 push	 350			; 0000015eH
  00a62	6a 6f		 push	 111			; 0000006fH
  00a64	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN126@draw_weapo:

; 6238 : 
; 6239 : 						break;
; 6240 : 					}
; 6241 : 				}
; 6242 : 			}
; 6243 : 
; 6244 : 			//
; 6245 : 			// type
; 6246 : 			//
; 6247 : 
; 6248 : 			switch (heading_depth)

  00a69	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  00a6c	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv541[ebp], eax
  00a72	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv541[ebp], 3
  00a79	77 4b		 ja	 SHORT $LN12@draw_weapo
  00a7b	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv541[ebp]
  00a81	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN388@draw_weapo[ecx*4]
$LN131@draw_weapo:

; 6249 : 			{
; 6250 : 				case APACHE_LHS_INNER_PYLON:
; 6251 : 				{
; 6252 : 					hardpoint_x = 26;

  00a88	c7 45 a4 1a 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 26 ; 0000001aH

; 6253 : 					hardpoint_y = 377;

  00a8f	c7 45 a0 79 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 377 ; 00000179H

; 6254 : 
; 6255 : 					break;

  00a96	eb 2e		 jmp	 SHORT $LN12@draw_weapo
$LN132@draw_weapo:

; 6256 : 				}
; 6257 : 				case APACHE_RHS_INNER_PYLON:
; 6258 : 				{
; 6259 : 					hardpoint_x = 95;

  00a98	c7 45 a4 5f 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 95 ; 0000005fH

; 6260 : 					hardpoint_y = 377;

  00a9f	c7 45 a0 79 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 377 ; 00000179H

; 6261 : 
; 6262 : 					break;

  00aa6	eb 1e		 jmp	 SHORT $LN12@draw_weapo
$LN133@draw_weapo:

; 6263 : 				}
; 6264 : 				case APACHE_LHS_OUTER_PYLON:
; 6265 : 				{
; 6266 : 					hardpoint_x = 10;

  00aa8	c7 45 a4 0a 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 10 ; 0000000aH

; 6267 : 					hardpoint_y = 377;

  00aaf	c7 45 a0 79 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 377 ; 00000179H

; 6268 : 
; 6269 : 					break;

  00ab6	eb 0e		 jmp	 SHORT $LN12@draw_weapo
$LN134@draw_weapo:

; 6270 : 				}
; 6271 : 				case APACHE_RHS_OUTER_PYLON:
; 6272 : 				{
; 6273 : 					hardpoint_x = 111;

  00ab8	c7 45 a4 6f 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 111 ; 0000006fH

; 6274 : 					hardpoint_y = 377;

  00abf	c7 45 a0 79 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 377 ; 00000179H
$LN12@draw_weapo:

; 6275 : 
; 6276 : 					break;
; 6277 : 				}
; 6278 : 			}
; 6279 : 
; 6280 : 			if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_HYDRA70_M255)

  00ac6	83 7d 94 1e	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 30 ; 0000001eH
  00aca	75 48		 jne	 SHORT $LN135@draw_weapo

; 6281 : 			{
; 6282 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  00acc	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00acf	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00ad2	75 23		 jne	 SHORT $LN137@draw_weapo
  00ad4	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00ad8	75 1d		 jne	 SHORT $LN137@draw_weapo

; 6283 : 				{
; 6284 : 					draw_sprite (hardpoint_x, hardpoint_y, 133, 268, 15, 6);

  00ada	6a 06		 push	 6
  00adc	6a 0f		 push	 15			; 0000000fH
  00ade	68 0c 01 00 00	 push	 268			; 0000010cH
  00ae3	68 85 00 00 00	 push	 133			; 00000085H
  00ae8	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00aeb	50		 push	 eax
  00aec	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00aef	51		 push	 ecx
  00af0	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6285 : 				}
; 6286 : 				else

  00af5	eb 1b		 jmp	 SHORT $LN138@draw_weapo
$LN137@draw_weapo:

; 6287 : 				{
; 6288 : 					draw_sprite (hardpoint_x, hardpoint_y, 173, 268, 15, 6);

  00af7	6a 06		 push	 6
  00af9	6a 0f		 push	 15			; 0000000fH
  00afb	68 0c 01 00 00	 push	 268			; 0000010cH
  00b00	68 ad 00 00 00	 push	 173			; 000000adH
  00b05	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00b08	50		 push	 eax
  00b09	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00b0c	51		 push	 ecx
  00b0d	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN138@draw_weapo:

; 6289 : 				}
; 6290 : 			}
; 6291 : 			else

  00b12	eb 46		 jmp	 SHORT $LN75@draw_weapo
$LN135@draw_weapo:

; 6292 : 			{
; 6293 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  00b14	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00b17	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00b1a	75 23		 jne	 SHORT $LN139@draw_weapo
  00b1c	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00b20	75 1d		 jne	 SHORT $LN139@draw_weapo

; 6294 : 				{
; 6295 : 					draw_sprite (hardpoint_x, hardpoint_y, 149, 268, 15, 6);

  00b22	6a 06		 push	 6
  00b24	6a 0f		 push	 15			; 0000000fH
  00b26	68 0c 01 00 00	 push	 268			; 0000010cH
  00b2b	68 95 00 00 00	 push	 149			; 00000095H
  00b30	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00b33	50		 push	 eax
  00b34	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00b37	51		 push	 ecx
  00b38	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6296 : 				}
; 6297 : 				else

  00b3d	eb 1b		 jmp	 SHORT $LN75@draw_weapo
$LN139@draw_weapo:

; 6298 : 				{
; 6299 : 					draw_sprite (hardpoint_x, hardpoint_y, 189, 268, 15, 6);

  00b3f	6a 06		 push	 6
  00b41	6a 0f		 push	 15			; 0000000fH
  00b43	68 0c 01 00 00	 push	 268			; 0000010cH
  00b48	68 bd 00 00 00	 push	 189			; 000000bdH
  00b4d	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00b50	50		 push	 eax
  00b51	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00b54	51		 push	 ecx
  00b55	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN75@draw_weapo:

; 6300 : 				}
; 6301 : 			}
; 6302 : 		}
; 6303 : 	}
; 6304 : 
; 6305 : 	////////////////////////////////////////////////////////////////////////////////
; 6306 : 	//
; 6307 : 	// Hellfires
; 6308 : 	//
; 6309 : 	////////////////////////////////////////////////////////////////////////////////
; 6310 : 
; 6311 : 	if ((weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AGM114L_LONGBOW_HELLFIRE) || (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AGM114K_HELLFIRE_II))

  00b5a	83 7d 94 2d	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 45 ; 0000002dH
  00b5e	74 0a		 je	 SHORT $LN142@draw_weapo
  00b60	83 7d 94 2e	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 46 ; 0000002eH
  00b64	0f 85 00 0f 00
	00		 jne	 $LN141@draw_weapo
$LN142@draw_weapo:

; 6312 : 	{
; 6313 : 		if (draw_large_mfd)

  00b6a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00b71	0f 84 40 07 00
	00		 je	 $LN143@draw_weapo

; 6314 : 		{
; 6315 : 			////////////////////////////////////////
; 6316 : 			//
; 6317 : 			// LARGE
; 6318 : 			//
; 6319 : 			////////////////////////////////////////
; 6320 : 
; 6321 : 			//
; 6322 : 			// pylon
; 6323 : 			//
; 6324 : 
; 6325 : 			switch (heading_depth)

  00b77	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  00b7a	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv575[ebp], eax
  00b80	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv575[ebp], 3
  00b87	77 4b		 ja	 SHORT $LN14@draw_weapo
  00b89	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv575[ebp]
  00b8f	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN389@draw_weapo[ecx*4]
$LN145@draw_weapo:

; 6326 : 			{
; 6327 : 				case APACHE_LHS_INNER_PYLON:
; 6328 : 				{
; 6329 : 					hardpoint_x = 53;

  00b96	c7 45 a4 35 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 53 ; 00000035H

; 6330 : 					hardpoint_y = 177;

  00b9d	c7 45 a0 b1 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 177 ; 000000b1H

; 6331 : 
; 6332 : 					break;

  00ba4	eb 2e		 jmp	 SHORT $LN14@draw_weapo
$LN146@draw_weapo:

; 6333 : 				}
; 6334 : 				case APACHE_RHS_INNER_PYLON:
; 6335 : 				{
; 6336 : 					hardpoint_x = 191;

  00ba6	c7 45 a4 bf 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 191 ; 000000bfH

; 6337 : 					hardpoint_y = 177;

  00bad	c7 45 a0 b1 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 177 ; 000000b1H

; 6338 : 
; 6339 : 					break;

  00bb4	eb 1e		 jmp	 SHORT $LN14@draw_weapo
$LN147@draw_weapo:

; 6340 : 				}
; 6341 : 				case APACHE_LHS_OUTER_PYLON:
; 6342 : 				{
; 6343 : 					hardpoint_x = 21;

  00bb6	c7 45 a4 15 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 21 ; 00000015H

; 6344 : 					hardpoint_y = 177;

  00bbd	c7 45 a0 b1 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 177 ; 000000b1H

; 6345 : 
; 6346 : 					break;

  00bc4	eb 0e		 jmp	 SHORT $LN14@draw_weapo
$LN148@draw_weapo:

; 6347 : 				}
; 6348 : 				case APACHE_RHS_OUTER_PYLON:
; 6349 : 				{
; 6350 : 					hardpoint_x = 223;

  00bc6	c7 45 a4 df 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 223 ; 000000dfH

; 6351 : 					hardpoint_y = 177;

  00bcd	c7 45 a0 b1 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 177 ; 000000b1H
$LN14@draw_weapo:

; 6352 : 
; 6353 : 					break;
; 6354 : 				}
; 6355 : 			}
; 6356 : 
; 6357 : 			if ((weapon_sub_type == selected_weapon) && (!damaged))

  00bd4	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00bd7	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00bda	75 20		 jne	 SHORT $LN149@draw_weapo
  00bdc	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00be0	75 1a		 jne	 SHORT $LN149@draw_weapo

; 6358 : 			{
; 6359 : 				draw_sprite (hardpoint_x, hardpoint_y, 262, 79, 20, 18);

  00be2	6a 12		 push	 18			; 00000012H
  00be4	6a 14		 push	 20			; 00000014H
  00be6	6a 4f		 push	 79			; 0000004fH
  00be8	68 06 01 00 00	 push	 262			; 00000106H
  00bed	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00bf0	50		 push	 eax
  00bf1	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00bf4	51		 push	 ecx
  00bf5	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6360 : 			}
; 6361 : 			else

  00bfa	eb 18		 jmp	 SHORT $LN150@draw_weapo
$LN149@draw_weapo:

; 6362 : 			{
; 6363 : 				draw_sprite (hardpoint_x, hardpoint_y, 284, 79, 20, 18);

  00bfc	6a 12		 push	 18			; 00000012H
  00bfe	6a 14		 push	 20			; 00000014H
  00c00	6a 4f		 push	 79			; 0000004fH
  00c02	68 1c 01 00 00	 push	 284			; 0000011cH
  00c07	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00c0a	50		 push	 eax
  00c0b	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00c0e	51		 push	 ecx
  00c0f	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN150@draw_weapo:

; 6364 : 			}
; 6365 : 
; 6366 : 			//
; 6367 : 			// missiles
; 6368 : 			//
; 6369 : 
; 6370 : 			switch (heading_depth)

  00c14	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  00c17	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv591[ebp], eax
  00c1d	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv591[ebp], 3
  00c24	0f 87 12 05 00
	00		 ja	 $LN16@draw_weapo
  00c2a	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv591[ebp]
  00c30	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN390@draw_weapo[ecx*4]
$LN151@draw_weapo:

; 6371 : 			{
; 6372 : 				case APACHE_LHS_INNER_PYLON:
; 6373 : 				case APACHE_LHS_OUTER_PYLON:
; 6374 : 				{
; 6375 : 					if (number > 3)

  00c37	83 7d ac 03	 cmp	 DWORD PTR _number$[ebp], 3
  00c3b	7e 4e		 jle	 SHORT $LN152@draw_weapo

; 6376 : 					{
; 6377 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00c3d	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00c40	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00c43	75 26		 jne	 SHORT $LN154@draw_weapo
  00c45	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00c49	75 20		 jne	 SHORT $LN154@draw_weapo

; 6378 : 						{
; 6379 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 19, 280, 61, 16, 16);

  00c4b	6a 10		 push	 16			; 00000010H
  00c4d	6a 10		 push	 16			; 00000010H
  00c4f	6a 3d		 push	 61			; 0000003dH
  00c51	68 18 01 00 00	 push	 280			; 00000118H
  00c56	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00c59	83 c0 13	 add	 eax, 19			; 00000013H
  00c5c	50		 push	 eax
  00c5d	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00c60	83 e9 06	 sub	 ecx, 6
  00c63	51		 push	 ecx
  00c64	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6380 : 						}
; 6381 : 						else

  00c69	eb 1e		 jmp	 SHORT $LN155@draw_weapo
$LN154@draw_weapo:

; 6382 : 						{
; 6383 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 19, 316, 61, 16, 16);

  00c6b	6a 10		 push	 16			; 00000010H
  00c6d	6a 10		 push	 16			; 00000010H
  00c6f	6a 3d		 push	 61			; 0000003dH
  00c71	68 3c 01 00 00	 push	 316			; 0000013cH
  00c76	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00c79	83 c0 13	 add	 eax, 19			; 00000013H
  00c7c	50		 push	 eax
  00c7d	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00c80	83 e9 06	 sub	 ecx, 6
  00c83	51		 push	 ecx
  00c84	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN155@draw_weapo:

; 6384 : 						}
; 6385 : 					}
; 6386 : 					else

  00c89	eb 4c		 jmp	 SHORT $LN153@draw_weapo
$LN152@draw_weapo:

; 6387 : 					{
; 6388 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00c8b	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00c8e	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00c91	75 26		 jne	 SHORT $LN156@draw_weapo
  00c93	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00c97	75 20		 jne	 SHORT $LN156@draw_weapo

; 6389 : 						{
; 6390 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 19, 262, 61, 16, 16);

  00c99	6a 10		 push	 16			; 00000010H
  00c9b	6a 10		 push	 16			; 00000010H
  00c9d	6a 3d		 push	 61			; 0000003dH
  00c9f	68 06 01 00 00	 push	 262			; 00000106H
  00ca4	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00ca7	83 c0 13	 add	 eax, 19			; 00000013H
  00caa	50		 push	 eax
  00cab	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00cae	83 e9 06	 sub	 ecx, 6
  00cb1	51		 push	 ecx
  00cb2	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6391 : 						}
; 6392 : 						else

  00cb7	eb 1e		 jmp	 SHORT $LN153@draw_weapo
$LN156@draw_weapo:

; 6393 : 						{
; 6394 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 19, 298, 61, 16, 16);

  00cb9	6a 10		 push	 16			; 00000010H
  00cbb	6a 10		 push	 16			; 00000010H
  00cbd	6a 3d		 push	 61			; 0000003dH
  00cbf	68 2a 01 00 00	 push	 298			; 0000012aH
  00cc4	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00cc7	83 c0 13	 add	 eax, 19			; 00000013H
  00cca	50		 push	 eax
  00ccb	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00cce	83 e9 06	 sub	 ecx, 6
  00cd1	51		 push	 ecx
  00cd2	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN153@draw_weapo:

; 6395 : 						}
; 6396 : 					}
; 6397 : 
; 6398 : 					if (number > 2)

  00cd7	83 7d ac 02	 cmp	 DWORD PTR _number$[ebp], 2
  00cdb	7e 4e		 jle	 SHORT $LN158@draw_weapo

; 6399 : 					{
; 6400 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00cdd	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00ce0	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00ce3	75 26		 jne	 SHORT $LN160@draw_weapo
  00ce5	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00ce9	75 20		 jne	 SHORT $LN160@draw_weapo

; 6401 : 						{
; 6402 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 19, 280, 61, 16, 16);

  00ceb	6a 10		 push	 16			; 00000010H
  00ced	6a 10		 push	 16			; 00000010H
  00cef	6a 3d		 push	 61			; 0000003dH
  00cf1	68 18 01 00 00	 push	 280			; 00000118H
  00cf6	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00cf9	83 c0 13	 add	 eax, 19			; 00000013H
  00cfc	50		 push	 eax
  00cfd	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00d00	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00d03	51		 push	 ecx
  00d04	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6403 : 						}
; 6404 : 						else

  00d09	eb 1e		 jmp	 SHORT $LN161@draw_weapo
$LN160@draw_weapo:

; 6405 : 						{
; 6406 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 19, 316, 61, 16, 16);

  00d0b	6a 10		 push	 16			; 00000010H
  00d0d	6a 10		 push	 16			; 00000010H
  00d0f	6a 3d		 push	 61			; 0000003dH
  00d11	68 3c 01 00 00	 push	 316			; 0000013cH
  00d16	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00d19	83 c0 13	 add	 eax, 19			; 00000013H
  00d1c	50		 push	 eax
  00d1d	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00d20	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00d23	51		 push	 ecx
  00d24	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN161@draw_weapo:

; 6407 : 						}
; 6408 : 					}
; 6409 : 					else

  00d29	eb 4c		 jmp	 SHORT $LN159@draw_weapo
$LN158@draw_weapo:

; 6410 : 					{
; 6411 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00d2b	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00d2e	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00d31	75 26		 jne	 SHORT $LN162@draw_weapo
  00d33	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00d37	75 20		 jne	 SHORT $LN162@draw_weapo

; 6412 : 						{
; 6413 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 19, 262, 61, 16, 16);

  00d39	6a 10		 push	 16			; 00000010H
  00d3b	6a 10		 push	 16			; 00000010H
  00d3d	6a 3d		 push	 61			; 0000003dH
  00d3f	68 06 01 00 00	 push	 262			; 00000106H
  00d44	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00d47	83 c0 13	 add	 eax, 19			; 00000013H
  00d4a	50		 push	 eax
  00d4b	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00d4e	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00d51	51		 push	 ecx
  00d52	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6414 : 						}
; 6415 : 						else

  00d57	eb 1e		 jmp	 SHORT $LN159@draw_weapo
$LN162@draw_weapo:

; 6416 : 						{
; 6417 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 19, 298, 61, 16, 16);

  00d59	6a 10		 push	 16			; 00000010H
  00d5b	6a 10		 push	 16			; 00000010H
  00d5d	6a 3d		 push	 61			; 0000003dH
  00d5f	68 2a 01 00 00	 push	 298			; 0000012aH
  00d64	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00d67	83 c0 13	 add	 eax, 19			; 00000013H
  00d6a	50		 push	 eax
  00d6b	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00d6e	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00d71	51		 push	 ecx
  00d72	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN159@draw_weapo:

; 6418 : 						}
; 6419 : 					}
; 6420 : 
; 6421 : 					if (number > 1)

  00d77	83 7d ac 01	 cmp	 DWORD PTR _number$[ebp], 1
  00d7b	7e 4e		 jle	 SHORT $LN164@draw_weapo

; 6422 : 					{
; 6423 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00d7d	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00d80	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00d83	75 26		 jne	 SHORT $LN166@draw_weapo
  00d85	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00d89	75 20		 jne	 SHORT $LN166@draw_weapo

; 6424 : 						{
; 6425 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 35, 280, 61, 16, 16);

  00d8b	6a 10		 push	 16			; 00000010H
  00d8d	6a 10		 push	 16			; 00000010H
  00d8f	6a 3d		 push	 61			; 0000003dH
  00d91	68 18 01 00 00	 push	 280			; 00000118H
  00d96	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00d99	83 c0 23	 add	 eax, 35			; 00000023H
  00d9c	50		 push	 eax
  00d9d	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00da0	83 e9 06	 sub	 ecx, 6
  00da3	51		 push	 ecx
  00da4	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6426 : 						}
; 6427 : 						else

  00da9	eb 1e		 jmp	 SHORT $LN167@draw_weapo
$LN166@draw_weapo:

; 6428 : 						{
; 6429 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 35, 316, 61, 16, 16);

  00dab	6a 10		 push	 16			; 00000010H
  00dad	6a 10		 push	 16			; 00000010H
  00daf	6a 3d		 push	 61			; 0000003dH
  00db1	68 3c 01 00 00	 push	 316			; 0000013cH
  00db6	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00db9	83 c0 23	 add	 eax, 35			; 00000023H
  00dbc	50		 push	 eax
  00dbd	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00dc0	83 e9 06	 sub	 ecx, 6
  00dc3	51		 push	 ecx
  00dc4	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN167@draw_weapo:

; 6430 : 						}
; 6431 : 					}
; 6432 : 					else

  00dc9	eb 4c		 jmp	 SHORT $LN165@draw_weapo
$LN164@draw_weapo:

; 6433 : 					{
; 6434 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00dcb	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00dce	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00dd1	75 26		 jne	 SHORT $LN168@draw_weapo
  00dd3	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00dd7	75 20		 jne	 SHORT $LN168@draw_weapo

; 6435 : 						{
; 6436 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 35, 262, 61, 16, 16);

  00dd9	6a 10		 push	 16			; 00000010H
  00ddb	6a 10		 push	 16			; 00000010H
  00ddd	6a 3d		 push	 61			; 0000003dH
  00ddf	68 06 01 00 00	 push	 262			; 00000106H
  00de4	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00de7	83 c0 23	 add	 eax, 35			; 00000023H
  00dea	50		 push	 eax
  00deb	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00dee	83 e9 06	 sub	 ecx, 6
  00df1	51		 push	 ecx
  00df2	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6437 : 						}
; 6438 : 						else

  00df7	eb 1e		 jmp	 SHORT $LN165@draw_weapo
$LN168@draw_weapo:

; 6439 : 						{
; 6440 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 35, 298, 61, 16, 16);

  00df9	6a 10		 push	 16			; 00000010H
  00dfb	6a 10		 push	 16			; 00000010H
  00dfd	6a 3d		 push	 61			; 0000003dH
  00dff	68 2a 01 00 00	 push	 298			; 0000012aH
  00e04	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00e07	83 c0 23	 add	 eax, 35			; 00000023H
  00e0a	50		 push	 eax
  00e0b	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00e0e	83 e9 06	 sub	 ecx, 6
  00e11	51		 push	 ecx
  00e12	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN165@draw_weapo:

; 6441 : 						}
; 6442 : 					}
; 6443 : 
; 6444 : 					if (number > 0)

  00e17	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  00e1b	7e 4e		 jle	 SHORT $LN170@draw_weapo

; 6445 : 					{
; 6446 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00e1d	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00e20	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00e23	75 26		 jne	 SHORT $LN172@draw_weapo
  00e25	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00e29	75 20		 jne	 SHORT $LN172@draw_weapo

; 6447 : 						{
; 6448 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 35, 280, 61, 16, 16);

  00e2b	6a 10		 push	 16			; 00000010H
  00e2d	6a 10		 push	 16			; 00000010H
  00e2f	6a 3d		 push	 61			; 0000003dH
  00e31	68 18 01 00 00	 push	 280			; 00000118H
  00e36	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00e39	83 c0 23	 add	 eax, 35			; 00000023H
  00e3c	50		 push	 eax
  00e3d	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00e40	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00e43	51		 push	 ecx
  00e44	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6449 : 						}
; 6450 : 						else

  00e49	eb 1e		 jmp	 SHORT $LN173@draw_weapo
$LN172@draw_weapo:

; 6451 : 						{
; 6452 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 35, 316, 61, 16, 16);

  00e4b	6a 10		 push	 16			; 00000010H
  00e4d	6a 10		 push	 16			; 00000010H
  00e4f	6a 3d		 push	 61			; 0000003dH
  00e51	68 3c 01 00 00	 push	 316			; 0000013cH
  00e56	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00e59	83 c0 23	 add	 eax, 35			; 00000023H
  00e5c	50		 push	 eax
  00e5d	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00e60	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00e63	51		 push	 ecx
  00e64	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN173@draw_weapo:

; 6453 : 						}
; 6454 : 					}
; 6455 : 					else

  00e69	eb 4c		 jmp	 SHORT $LN171@draw_weapo
$LN170@draw_weapo:

; 6456 : 					{
; 6457 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00e6b	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00e6e	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00e71	75 26		 jne	 SHORT $LN174@draw_weapo
  00e73	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00e77	75 20		 jne	 SHORT $LN174@draw_weapo

; 6458 : 						{
; 6459 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 35, 262, 61, 16, 16);

  00e79	6a 10		 push	 16			; 00000010H
  00e7b	6a 10		 push	 16			; 00000010H
  00e7d	6a 3d		 push	 61			; 0000003dH
  00e7f	68 06 01 00 00	 push	 262			; 00000106H
  00e84	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00e87	83 c0 23	 add	 eax, 35			; 00000023H
  00e8a	50		 push	 eax
  00e8b	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00e8e	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00e91	51		 push	 ecx
  00e92	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6460 : 						}
; 6461 : 						else

  00e97	eb 1e		 jmp	 SHORT $LN171@draw_weapo
$LN174@draw_weapo:

; 6462 : 						{
; 6463 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 35, 298, 61, 16, 16);

  00e99	6a 10		 push	 16			; 00000010H
  00e9b	6a 10		 push	 16			; 00000010H
  00e9d	6a 3d		 push	 61			; 0000003dH
  00e9f	68 2a 01 00 00	 push	 298			; 0000012aH
  00ea4	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00ea7	83 c0 23	 add	 eax, 35			; 00000023H
  00eaa	50		 push	 eax
  00eab	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00eae	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00eb1	51		 push	 ecx
  00eb2	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN171@draw_weapo:

; 6464 : 						}
; 6465 : 					}
; 6466 : 
; 6467 : 					break;

  00eb7	e9 80 02 00 00	 jmp	 $LN16@draw_weapo
$LN176@draw_weapo:

; 6468 : 				}
; 6469 : 				case APACHE_RHS_INNER_PYLON:
; 6470 : 				case APACHE_RHS_OUTER_PYLON:
; 6471 : 				{
; 6472 : 					if (number > 3)

  00ebc	83 7d ac 03	 cmp	 DWORD PTR _number$[ebp], 3
  00ec0	7e 4e		 jle	 SHORT $LN177@draw_weapo

; 6473 : 					{
; 6474 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00ec2	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00ec5	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00ec8	75 26		 jne	 SHORT $LN179@draw_weapo
  00eca	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00ece	75 20		 jne	 SHORT $LN179@draw_weapo

; 6475 : 						{
; 6476 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 19, 280, 61, 16, 16);

  00ed0	6a 10		 push	 16			; 00000010H
  00ed2	6a 10		 push	 16			; 00000010H
  00ed4	6a 3d		 push	 61			; 0000003dH
  00ed6	68 18 01 00 00	 push	 280			; 00000118H
  00edb	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00ede	83 c0 13	 add	 eax, 19			; 00000013H
  00ee1	50		 push	 eax
  00ee2	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00ee5	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00ee8	51		 push	 ecx
  00ee9	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6477 : 						}
; 6478 : 						else

  00eee	eb 1e		 jmp	 SHORT $LN180@draw_weapo
$LN179@draw_weapo:

; 6479 : 						{
; 6480 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 19, 316, 61, 16, 16);

  00ef0	6a 10		 push	 16			; 00000010H
  00ef2	6a 10		 push	 16			; 00000010H
  00ef4	6a 3d		 push	 61			; 0000003dH
  00ef6	68 3c 01 00 00	 push	 316			; 0000013cH
  00efb	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00efe	83 c0 13	 add	 eax, 19			; 00000013H
  00f01	50		 push	 eax
  00f02	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00f05	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00f08	51		 push	 ecx
  00f09	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN180@draw_weapo:

; 6481 : 						}
; 6482 : 					}
; 6483 : 					else

  00f0e	eb 4c		 jmp	 SHORT $LN178@draw_weapo
$LN177@draw_weapo:

; 6484 : 					{
; 6485 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00f10	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00f13	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00f16	75 26		 jne	 SHORT $LN181@draw_weapo
  00f18	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00f1c	75 20		 jne	 SHORT $LN181@draw_weapo

; 6486 : 						{
; 6487 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 19, 262, 61, 16, 16);

  00f1e	6a 10		 push	 16			; 00000010H
  00f20	6a 10		 push	 16			; 00000010H
  00f22	6a 3d		 push	 61			; 0000003dH
  00f24	68 06 01 00 00	 push	 262			; 00000106H
  00f29	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00f2c	83 c0 13	 add	 eax, 19			; 00000013H
  00f2f	50		 push	 eax
  00f30	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00f33	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00f36	51		 push	 ecx
  00f37	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6488 : 						}
; 6489 : 						else

  00f3c	eb 1e		 jmp	 SHORT $LN178@draw_weapo
$LN181@draw_weapo:

; 6490 : 						{
; 6491 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 19, 298, 61, 16, 16);

  00f3e	6a 10		 push	 16			; 00000010H
  00f40	6a 10		 push	 16			; 00000010H
  00f42	6a 3d		 push	 61			; 0000003dH
  00f44	68 2a 01 00 00	 push	 298			; 0000012aH
  00f49	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00f4c	83 c0 13	 add	 eax, 19			; 00000013H
  00f4f	50		 push	 eax
  00f50	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00f53	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00f56	51		 push	 ecx
  00f57	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN178@draw_weapo:

; 6492 : 						}
; 6493 : 					}
; 6494 : 
; 6495 : 					if (number > 2)

  00f5c	83 7d ac 02	 cmp	 DWORD PTR _number$[ebp], 2
  00f60	7e 4e		 jle	 SHORT $LN183@draw_weapo

; 6496 : 					{
; 6497 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00f62	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00f65	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00f68	75 26		 jne	 SHORT $LN185@draw_weapo
  00f6a	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00f6e	75 20		 jne	 SHORT $LN185@draw_weapo

; 6498 : 						{
; 6499 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 19, 280, 61, 16, 16);

  00f70	6a 10		 push	 16			; 00000010H
  00f72	6a 10		 push	 16			; 00000010H
  00f74	6a 3d		 push	 61			; 0000003dH
  00f76	68 18 01 00 00	 push	 280			; 00000118H
  00f7b	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00f7e	83 c0 13	 add	 eax, 19			; 00000013H
  00f81	50		 push	 eax
  00f82	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00f85	83 e9 06	 sub	 ecx, 6
  00f88	51		 push	 ecx
  00f89	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6500 : 						}
; 6501 : 						else

  00f8e	eb 1e		 jmp	 SHORT $LN186@draw_weapo
$LN185@draw_weapo:

; 6502 : 						{
; 6503 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 19, 316, 61, 16, 16);

  00f90	6a 10		 push	 16			; 00000010H
  00f92	6a 10		 push	 16			; 00000010H
  00f94	6a 3d		 push	 61			; 0000003dH
  00f96	68 3c 01 00 00	 push	 316			; 0000013cH
  00f9b	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00f9e	83 c0 13	 add	 eax, 19			; 00000013H
  00fa1	50		 push	 eax
  00fa2	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00fa5	83 e9 06	 sub	 ecx, 6
  00fa8	51		 push	 ecx
  00fa9	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN186@draw_weapo:

; 6504 : 						}
; 6505 : 					}
; 6506 : 					else

  00fae	eb 4c		 jmp	 SHORT $LN184@draw_weapo
$LN183@draw_weapo:

; 6507 : 					{
; 6508 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00fb0	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00fb3	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00fb6	75 26		 jne	 SHORT $LN187@draw_weapo
  00fb8	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00fbc	75 20		 jne	 SHORT $LN187@draw_weapo

; 6509 : 						{
; 6510 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 19, 262, 61, 16, 16);

  00fbe	6a 10		 push	 16			; 00000010H
  00fc0	6a 10		 push	 16			; 00000010H
  00fc2	6a 3d		 push	 61			; 0000003dH
  00fc4	68 06 01 00 00	 push	 262			; 00000106H
  00fc9	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00fcc	83 c0 13	 add	 eax, 19			; 00000013H
  00fcf	50		 push	 eax
  00fd0	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00fd3	83 e9 06	 sub	 ecx, 6
  00fd6	51		 push	 ecx
  00fd7	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6511 : 						}
; 6512 : 						else

  00fdc	eb 1e		 jmp	 SHORT $LN184@draw_weapo
$LN187@draw_weapo:

; 6513 : 						{
; 6514 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 19, 298, 61, 16, 16);

  00fde	6a 10		 push	 16			; 00000010H
  00fe0	6a 10		 push	 16			; 00000010H
  00fe2	6a 3d		 push	 61			; 0000003dH
  00fe4	68 2a 01 00 00	 push	 298			; 0000012aH
  00fe9	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00fec	83 c0 13	 add	 eax, 19			; 00000013H
  00fef	50		 push	 eax
  00ff0	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00ff3	83 e9 06	 sub	 ecx, 6
  00ff6	51		 push	 ecx
  00ff7	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN184@draw_weapo:

; 6515 : 						}
; 6516 : 					}
; 6517 : 
; 6518 : 					if (number > 1)

  00ffc	83 7d ac 01	 cmp	 DWORD PTR _number$[ebp], 1
  01000	7e 4e		 jle	 SHORT $LN189@draw_weapo

; 6519 : 					{
; 6520 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01002	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01005	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01008	75 26		 jne	 SHORT $LN191@draw_weapo
  0100a	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0100e	75 20		 jne	 SHORT $LN191@draw_weapo

; 6521 : 						{
; 6522 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 35, 280, 61, 16, 16);

  01010	6a 10		 push	 16			; 00000010H
  01012	6a 10		 push	 16			; 00000010H
  01014	6a 3d		 push	 61			; 0000003dH
  01016	68 18 01 00 00	 push	 280			; 00000118H
  0101b	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0101e	83 c0 23	 add	 eax, 35			; 00000023H
  01021	50		 push	 eax
  01022	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01025	83 c1 0a	 add	 ecx, 10			; 0000000aH
  01028	51		 push	 ecx
  01029	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6523 : 						}
; 6524 : 						else

  0102e	eb 1e		 jmp	 SHORT $LN192@draw_weapo
$LN191@draw_weapo:

; 6525 : 						{
; 6526 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 35, 316, 61, 16, 16);

  01030	6a 10		 push	 16			; 00000010H
  01032	6a 10		 push	 16			; 00000010H
  01034	6a 3d		 push	 61			; 0000003dH
  01036	68 3c 01 00 00	 push	 316			; 0000013cH
  0103b	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0103e	83 c0 23	 add	 eax, 35			; 00000023H
  01041	50		 push	 eax
  01042	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01045	83 c1 0a	 add	 ecx, 10			; 0000000aH
  01048	51		 push	 ecx
  01049	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN192@draw_weapo:

; 6527 : 						}
; 6528 : 					}
; 6529 : 					else

  0104e	eb 4c		 jmp	 SHORT $LN190@draw_weapo
$LN189@draw_weapo:

; 6530 : 					{
; 6531 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01050	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01053	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01056	75 26		 jne	 SHORT $LN193@draw_weapo
  01058	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0105c	75 20		 jne	 SHORT $LN193@draw_weapo

; 6532 : 						{
; 6533 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 35, 262, 61, 16, 16);

  0105e	6a 10		 push	 16			; 00000010H
  01060	6a 10		 push	 16			; 00000010H
  01062	6a 3d		 push	 61			; 0000003dH
  01064	68 06 01 00 00	 push	 262			; 00000106H
  01069	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0106c	83 c0 23	 add	 eax, 35			; 00000023H
  0106f	50		 push	 eax
  01070	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01073	83 c1 0a	 add	 ecx, 10			; 0000000aH
  01076	51		 push	 ecx
  01077	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6534 : 						}
; 6535 : 						else

  0107c	eb 1e		 jmp	 SHORT $LN190@draw_weapo
$LN193@draw_weapo:

; 6536 : 						{
; 6537 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 35, 298, 61, 16, 16);

  0107e	6a 10		 push	 16			; 00000010H
  01080	6a 10		 push	 16			; 00000010H
  01082	6a 3d		 push	 61			; 0000003dH
  01084	68 2a 01 00 00	 push	 298			; 0000012aH
  01089	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0108c	83 c0 23	 add	 eax, 35			; 00000023H
  0108f	50		 push	 eax
  01090	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01093	83 c1 0a	 add	 ecx, 10			; 0000000aH
  01096	51		 push	 ecx
  01097	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN190@draw_weapo:

; 6538 : 						}
; 6539 : 					}
; 6540 : 
; 6541 : 					if (number > 0)

  0109c	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  010a0	7e 4e		 jle	 SHORT $LN195@draw_weapo

; 6542 : 					{
; 6543 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  010a2	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  010a5	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  010a8	75 26		 jne	 SHORT $LN197@draw_weapo
  010aa	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  010ae	75 20		 jne	 SHORT $LN197@draw_weapo

; 6544 : 						{
; 6545 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 35, 280, 61, 16, 16);

  010b0	6a 10		 push	 16			; 00000010H
  010b2	6a 10		 push	 16			; 00000010H
  010b4	6a 3d		 push	 61			; 0000003dH
  010b6	68 18 01 00 00	 push	 280			; 00000118H
  010bb	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  010be	83 c0 23	 add	 eax, 35			; 00000023H
  010c1	50		 push	 eax
  010c2	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  010c5	83 e9 06	 sub	 ecx, 6
  010c8	51		 push	 ecx
  010c9	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6546 : 						}
; 6547 : 						else

  010ce	eb 1e		 jmp	 SHORT $LN198@draw_weapo
$LN197@draw_weapo:

; 6548 : 						{
; 6549 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 35, 316, 61, 16, 16);

  010d0	6a 10		 push	 16			; 00000010H
  010d2	6a 10		 push	 16			; 00000010H
  010d4	6a 3d		 push	 61			; 0000003dH
  010d6	68 3c 01 00 00	 push	 316			; 0000013cH
  010db	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  010de	83 c0 23	 add	 eax, 35			; 00000023H
  010e1	50		 push	 eax
  010e2	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  010e5	83 e9 06	 sub	 ecx, 6
  010e8	51		 push	 ecx
  010e9	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN198@draw_weapo:

; 6550 : 						}
; 6551 : 					}
; 6552 : 					else

  010ee	eb 4c		 jmp	 SHORT $LN16@draw_weapo
$LN195@draw_weapo:

; 6553 : 					{
; 6554 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  010f0	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  010f3	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  010f6	75 26		 jne	 SHORT $LN199@draw_weapo
  010f8	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  010fc	75 20		 jne	 SHORT $LN199@draw_weapo

; 6555 : 						{
; 6556 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 35, 262, 61, 16, 16);

  010fe	6a 10		 push	 16			; 00000010H
  01100	6a 10		 push	 16			; 00000010H
  01102	6a 3d		 push	 61			; 0000003dH
  01104	68 06 01 00 00	 push	 262			; 00000106H
  01109	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0110c	83 c0 23	 add	 eax, 35			; 00000023H
  0110f	50		 push	 eax
  01110	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01113	83 e9 06	 sub	 ecx, 6
  01116	51		 push	 ecx
  01117	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6557 : 						}
; 6558 : 						else

  0111c	eb 1e		 jmp	 SHORT $LN16@draw_weapo
$LN199@draw_weapo:

; 6559 : 						{
; 6560 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 35, 298, 61, 16, 16);

  0111e	6a 10		 push	 16			; 00000010H
  01120	6a 10		 push	 16			; 00000010H
  01122	6a 3d		 push	 61			; 0000003dH
  01124	68 2a 01 00 00	 push	 298			; 0000012aH
  01129	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0112c	83 c0 23	 add	 eax, 35			; 00000023H
  0112f	50		 push	 eax
  01130	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01133	83 e9 06	 sub	 ecx, 6
  01136	51		 push	 ecx
  01137	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN16@draw_weapo:

; 6561 : 						}
; 6562 : 					}
; 6563 : 
; 6564 : 					break;
; 6565 : 				}
; 6566 : 			}
; 6567 : 
; 6568 : 			//
; 6569 : 			// damage cross
; 6570 : 			//
; 6571 : 
; 6572 : 			if (damaged)

  0113c	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01140	0f 84 87 00 00
	00		 je	 $LN201@draw_weapo

; 6573 : 			{
; 6574 : 				switch (heading_depth)

  01146	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  01149	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv890[ebp], eax
  0114f	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv890[ebp], 3
  01156	77 75		 ja	 SHORT $LN201@draw_weapo
  01158	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv890[ebp]
  0115e	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN391@draw_weapo[ecx*4]
$LN202@draw_weapo:

; 6575 : 				{
; 6576 : 					case APACHE_LHS_INNER_PYLON:
; 6577 : 					{
; 6578 : 						draw_sprite (47, 196, 334, 61, 32, 32);

  01165	6a 20		 push	 32			; 00000020H
  01167	6a 20		 push	 32			; 00000020H
  01169	6a 3d		 push	 61			; 0000003dH
  0116b	68 4e 01 00 00	 push	 334			; 0000014eH
  01170	68 c4 00 00 00	 push	 196			; 000000c4H
  01175	6a 2f		 push	 47			; 0000002fH
  01177	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6579 : 
; 6580 : 						break;

  0117c	eb 4f		 jmp	 SHORT $LN201@draw_weapo
$LN203@draw_weapo:

; 6581 : 					}
; 6582 : 					case APACHE_RHS_INNER_PYLON:
; 6583 : 					{
; 6584 : 						draw_sprite (185, 196, 334, 61, 32, 32);

  0117e	6a 20		 push	 32			; 00000020H
  01180	6a 20		 push	 32			; 00000020H
  01182	6a 3d		 push	 61			; 0000003dH
  01184	68 4e 01 00 00	 push	 334			; 0000014eH
  01189	68 c4 00 00 00	 push	 196			; 000000c4H
  0118e	68 b9 00 00 00	 push	 185			; 000000b9H
  01193	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6585 : 
; 6586 : 						break;

  01198	eb 33		 jmp	 SHORT $LN201@draw_weapo
$LN204@draw_weapo:

; 6587 : 					}
; 6588 : 					case APACHE_LHS_OUTER_PYLON:
; 6589 : 					{
; 6590 : 						draw_sprite (15, 196, 334, 61, 32, 32);

  0119a	6a 20		 push	 32			; 00000020H
  0119c	6a 20		 push	 32			; 00000020H
  0119e	6a 3d		 push	 61			; 0000003dH
  011a0	68 4e 01 00 00	 push	 334			; 0000014eH
  011a5	68 c4 00 00 00	 push	 196			; 000000c4H
  011aa	6a 0f		 push	 15			; 0000000fH
  011ac	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6591 : 
; 6592 : 						break;

  011b1	eb 1a		 jmp	 SHORT $LN201@draw_weapo
$LN205@draw_weapo:

; 6593 : 					}
; 6594 : 					case APACHE_RHS_OUTER_PYLON:
; 6595 : 					{
; 6596 : 						draw_sprite (217, 196, 334, 61, 32, 32);

  011b3	6a 20		 push	 32			; 00000020H
  011b5	6a 20		 push	 32			; 00000020H
  011b7	6a 3d		 push	 61			; 0000003dH
  011b9	68 4e 01 00 00	 push	 334			; 0000014eH
  011be	68 c4 00 00 00	 push	 196			; 000000c4H
  011c3	68 d9 00 00 00	 push	 217			; 000000d9H
  011c8	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN201@draw_weapo:

; 6597 : 
; 6598 : 						break;
; 6599 : 					}
; 6600 : 				}
; 6601 : 			}
; 6602 : 
; 6603 : 			//
; 6604 : 			// type
; 6605 : 			//
; 6606 : 
; 6607 : 			switch (heading_depth)

  011cd	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  011d0	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv916[ebp], eax
  011d6	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv916[ebp], 3
  011dd	77 4b		 ja	 SHORT $LN20@draw_weapo
  011df	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv916[ebp]
  011e5	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN392@draw_weapo[ecx*4]
$LN206@draw_weapo:

; 6608 : 			{
; 6609 : 				case APACHE_LHS_INNER_PYLON:
; 6610 : 				{
; 6611 : 					hardpoint_x = 47;

  011ec	c7 45 a4 2f 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 47 ; 0000002fH

; 6612 : 					hardpoint_y = 234;

  011f3	c7 45 a0 ea 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 234 ; 000000eaH

; 6613 : 
; 6614 : 					break;

  011fa	eb 2e		 jmp	 SHORT $LN20@draw_weapo
$LN207@draw_weapo:

; 6615 : 				}
; 6616 : 				case APACHE_RHS_INNER_PYLON:
; 6617 : 				{
; 6618 : 					hardpoint_x = 185;

  011fc	c7 45 a4 b9 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 185 ; 000000b9H

; 6619 : 					hardpoint_y = 234;

  01203	c7 45 a0 ea 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 234 ; 000000eaH

; 6620 : 
; 6621 : 					break;

  0120a	eb 1e		 jmp	 SHORT $LN20@draw_weapo
$LN208@draw_weapo:

; 6622 : 				}
; 6623 : 				case APACHE_LHS_OUTER_PYLON:
; 6624 : 				{
; 6625 : 					hardpoint_x = 15;

  0120c	c7 45 a4 0f 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 15 ; 0000000fH

; 6626 : 					hardpoint_y = 234;

  01213	c7 45 a0 ea 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 234 ; 000000eaH

; 6627 : 
; 6628 : 					break;

  0121a	eb 0e		 jmp	 SHORT $LN20@draw_weapo
$LN209@draw_weapo:

; 6629 : 				}
; 6630 : 				case APACHE_RHS_OUTER_PYLON:
; 6631 : 				{
; 6632 : 					hardpoint_x = 217;

  0121c	c7 45 a4 d9 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 217 ; 000000d9H

; 6633 : 					hardpoint_y = 234;

  01223	c7 45 a0 ea 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 234 ; 000000eaH
$LN20@draw_weapo:

; 6634 : 
; 6635 : 					break;
; 6636 : 				}
; 6637 : 			}
; 6638 : 
; 6639 : 			if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AGM114K_HELLFIRE_II)

  0122a	83 7d 94 2e	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 46 ; 0000002eH
  0122e	75 42		 jne	 SHORT $LN210@draw_weapo

; 6640 : 			{
; 6641 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  01230	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01233	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01236	75 20		 jne	 SHORT $LN212@draw_weapo
  01238	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0123c	75 1a		 jne	 SHORT $LN212@draw_weapo

; 6642 : 				{
; 6643 : 					draw_sprite (hardpoint_x, hardpoint_y, 262, 3, 31, 12);

  0123e	6a 0c		 push	 12			; 0000000cH
  01240	6a 1f		 push	 31			; 0000001fH
  01242	6a 03		 push	 3
  01244	68 06 01 00 00	 push	 262			; 00000106H
  01249	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0124c	50		 push	 eax
  0124d	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01250	51		 push	 ecx
  01251	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6644 : 				}
; 6645 : 				else

  01256	eb 18		 jmp	 SHORT $LN213@draw_weapo
$LN212@draw_weapo:

; 6646 : 				{
; 6647 : 					draw_sprite (hardpoint_x, hardpoint_y, 342, 3, 31, 12);

  01258	6a 0c		 push	 12			; 0000000cH
  0125a	6a 1f		 push	 31			; 0000001fH
  0125c	6a 03		 push	 3
  0125e	68 56 01 00 00	 push	 342			; 00000156H
  01263	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01266	50		 push	 eax
  01267	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0126a	51		 push	 ecx
  0126b	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN213@draw_weapo:

; 6648 : 				}
; 6649 : 			}
; 6650 : 			else

  01270	eb 40		 jmp	 SHORT $LN211@draw_weapo
$LN210@draw_weapo:

; 6651 : 			{
; 6652 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  01272	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01275	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01278	75 20		 jne	 SHORT $LN214@draw_weapo
  0127a	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0127e	75 1a		 jne	 SHORT $LN214@draw_weapo

; 6653 : 				{
; 6654 : 					draw_sprite (hardpoint_x, hardpoint_y, 295, 3, 31, 12);

  01280	6a 0c		 push	 12			; 0000000cH
  01282	6a 1f		 push	 31			; 0000001fH
  01284	6a 03		 push	 3
  01286	68 27 01 00 00	 push	 295			; 00000127H
  0128b	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0128e	50		 push	 eax
  0128f	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01292	51		 push	 ecx
  01293	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6655 : 				}
; 6656 : 				else

  01298	eb 18		 jmp	 SHORT $LN211@draw_weapo
$LN214@draw_weapo:

; 6657 : 				{
; 6658 : 					draw_sprite (hardpoint_x, hardpoint_y, 375, 3, 31, 12);

  0129a	6a 0c		 push	 12			; 0000000cH
  0129c	6a 1f		 push	 31			; 0000001fH
  0129e	6a 03		 push	 3
  012a0	68 77 01 00 00	 push	 375			; 00000177H
  012a5	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  012a8	50		 push	 eax
  012a9	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  012ac	51		 push	 ecx
  012ad	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN211@draw_weapo:

; 6659 : 				}
; 6660 : 			}
; 6661 : 		}
; 6662 : 		else

  012b2	e9 b3 07 00 00	 jmp	 $LN141@draw_weapo
$LN143@draw_weapo:

; 6663 : 		{
; 6664 : 			////////////////////////////////////////
; 6665 : 			//
; 6666 : 			// SMALL
; 6667 : 			//
; 6668 : 			////////////////////////////////////////
; 6669 : 
; 6670 : 			//
; 6671 : 			// pylon
; 6672 : 			//
; 6673 : 
; 6674 : 			switch (heading_depth)

  012b7	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  012ba	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv947[ebp], eax
  012c0	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv947[ebp], 3
  012c7	77 4b		 ja	 SHORT $LN22@draw_weapo
  012c9	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv947[ebp]
  012cf	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN393@draw_weapo[ecx*4]
$LN216@draw_weapo:

; 6675 : 			{
; 6676 : 				case APACHE_LHS_INNER_PYLON:
; 6677 : 				{
; 6678 : 					hardpoint_x = 29;

  012d6	c7 45 a4 1d 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 29 ; 0000001dH

; 6679 : 					hardpoint_y = 348;

  012dd	c7 45 a0 5c 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 348 ; 0000015cH

; 6680 : 
; 6681 : 					break;

  012e4	eb 2e		 jmp	 SHORT $LN22@draw_weapo
$LN217@draw_weapo:

; 6682 : 				}
; 6683 : 				case APACHE_RHS_INNER_PYLON:
; 6684 : 				{
; 6685 : 					hardpoint_x = 98;

  012e6	c7 45 a4 62 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 98 ; 00000062H

; 6686 : 					hardpoint_y = 348;

  012ed	c7 45 a0 5c 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 348 ; 0000015cH

; 6687 : 
; 6688 : 					break;

  012f4	eb 1e		 jmp	 SHORT $LN22@draw_weapo
$LN218@draw_weapo:

; 6689 : 				}
; 6690 : 				case APACHE_LHS_OUTER_PYLON:
; 6691 : 				{
; 6692 : 					hardpoint_x = 13;

  012f6	c7 45 a4 0d 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 13 ; 0000000dH

; 6693 : 					hardpoint_y = 348;

  012fd	c7 45 a0 5c 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 348 ; 0000015cH

; 6694 : 
; 6695 : 					break;

  01304	eb 0e		 jmp	 SHORT $LN22@draw_weapo
$LN219@draw_weapo:

; 6696 : 				}
; 6697 : 				case APACHE_RHS_OUTER_PYLON:
; 6698 : 				{
; 6699 : 					hardpoint_x = 114;

  01306	c7 45 a4 72 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 114 ; 00000072H

; 6700 : 					hardpoint_y = 348;

  0130d	c7 45 a0 5c 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 348 ; 0000015cH
$LN22@draw_weapo:

; 6701 : 
; 6702 : 					break;
; 6703 : 				}
; 6704 : 			}
; 6705 : 
; 6706 : 			if ((weapon_sub_type == selected_weapon) && (!damaged))

  01314	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01317	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  0131a	75 23		 jne	 SHORT $LN220@draw_weapo
  0131c	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01320	75 1d		 jne	 SHORT $LN220@draw_weapo

; 6707 : 			{
; 6708 : 				draw_sprite (hardpoint_x, hardpoint_y, 133, 299, 10, 9);

  01322	6a 09		 push	 9
  01324	6a 0a		 push	 10			; 0000000aH
  01326	68 2b 01 00 00	 push	 299			; 0000012bH
  0132b	68 85 00 00 00	 push	 133			; 00000085H
  01330	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01333	50		 push	 eax
  01334	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01337	51		 push	 ecx
  01338	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6709 : 			}
; 6710 : 			else

  0133d	eb 1b		 jmp	 SHORT $LN221@draw_weapo
$LN220@draw_weapo:

; 6711 : 			{
; 6712 : 				draw_sprite (hardpoint_x, hardpoint_y, 144, 299, 10, 9);

  0133f	6a 09		 push	 9
  01341	6a 0a		 push	 10			; 0000000aH
  01343	68 2b 01 00 00	 push	 299			; 0000012bH
  01348	68 90 00 00 00	 push	 144			; 00000090H
  0134d	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01350	50		 push	 eax
  01351	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01354	51		 push	 ecx
  01355	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN221@draw_weapo:

; 6713 : 			}
; 6714 : 
; 6715 : 			//
; 6716 : 			// missiles
; 6717 : 			//
; 6718 : 
; 6719 : 			switch (heading_depth)

  0135a	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  0135d	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv963[ebp], eax
  01363	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv963[ebp], 3
  0136a	0f 87 72 05 00
	00		 ja	 $LN24@draw_weapo
  01370	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv963[ebp]
  01376	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN394@draw_weapo[ecx*4]
$LN222@draw_weapo:

; 6720 : 			{
; 6721 : 				case APACHE_LHS_INNER_PYLON:
; 6722 : 				case APACHE_LHS_OUTER_PYLON:
; 6723 : 				{
; 6724 : 					if (number > 3)

  0137d	83 7d ac 03	 cmp	 DWORD PTR _number$[ebp], 3
  01381	7e 54		 jle	 SHORT $LN223@draw_weapo

; 6725 : 					{
; 6726 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01383	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01386	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01389	75 29		 jne	 SHORT $LN225@draw_weapo
  0138b	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0138f	75 23		 jne	 SHORT $LN225@draw_weapo

; 6727 : 						{
; 6728 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 10, 142, 290, 8, 8);

  01391	6a 08		 push	 8
  01393	6a 08		 push	 8
  01395	68 22 01 00 00	 push	 290			; 00000122H
  0139a	68 8e 00 00 00	 push	 142			; 0000008eH
  0139f	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  013a2	83 c0 0a	 add	 eax, 10			; 0000000aH
  013a5	50		 push	 eax
  013a6	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  013a9	83 e9 03	 sub	 ecx, 3
  013ac	51		 push	 ecx
  013ad	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6729 : 						}
; 6730 : 						else

  013b2	eb 21		 jmp	 SHORT $LN226@draw_weapo
$LN225@draw_weapo:

; 6731 : 						{
; 6732 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 10, 160, 290, 8, 8);

  013b4	6a 08		 push	 8
  013b6	6a 08		 push	 8
  013b8	68 22 01 00 00	 push	 290			; 00000122H
  013bd	68 a0 00 00 00	 push	 160			; 000000a0H
  013c2	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  013c5	83 c0 0a	 add	 eax, 10			; 0000000aH
  013c8	50		 push	 eax
  013c9	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  013cc	83 e9 03	 sub	 ecx, 3
  013cf	51		 push	 ecx
  013d0	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN226@draw_weapo:

; 6733 : 						}
; 6734 : 					}
; 6735 : 					else

  013d5	eb 52		 jmp	 SHORT $LN224@draw_weapo
$LN223@draw_weapo:

; 6736 : 					{
; 6737 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  013d7	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  013da	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  013dd	75 29		 jne	 SHORT $LN227@draw_weapo
  013df	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  013e3	75 23		 jne	 SHORT $LN227@draw_weapo

; 6738 : 						{
; 6739 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 10, 133, 290, 8, 8);

  013e5	6a 08		 push	 8
  013e7	6a 08		 push	 8
  013e9	68 22 01 00 00	 push	 290			; 00000122H
  013ee	68 85 00 00 00	 push	 133			; 00000085H
  013f3	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  013f6	83 c0 0a	 add	 eax, 10			; 0000000aH
  013f9	50		 push	 eax
  013fa	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  013fd	83 e9 03	 sub	 ecx, 3
  01400	51		 push	 ecx
  01401	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6740 : 						}
; 6741 : 						else

  01406	eb 21		 jmp	 SHORT $LN224@draw_weapo
$LN227@draw_weapo:

; 6742 : 						{
; 6743 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 10, 151, 290, 8, 8);

  01408	6a 08		 push	 8
  0140a	6a 08		 push	 8
  0140c	68 22 01 00 00	 push	 290			; 00000122H
  01411	68 97 00 00 00	 push	 151			; 00000097H
  01416	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01419	83 c0 0a	 add	 eax, 10			; 0000000aH
  0141c	50		 push	 eax
  0141d	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01420	83 e9 03	 sub	 ecx, 3
  01423	51		 push	 ecx
  01424	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN224@draw_weapo:

; 6744 : 						}
; 6745 : 					}
; 6746 : 
; 6747 : 					if (number > 2)

  01429	83 7d ac 02	 cmp	 DWORD PTR _number$[ebp], 2
  0142d	7e 54		 jle	 SHORT $LN229@draw_weapo

; 6748 : 					{
; 6749 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  0142f	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01432	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01435	75 29		 jne	 SHORT $LN231@draw_weapo
  01437	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0143b	75 23		 jne	 SHORT $LN231@draw_weapo

; 6750 : 						{
; 6751 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 10, 142, 290, 8, 8);

  0143d	6a 08		 push	 8
  0143f	6a 08		 push	 8
  01441	68 22 01 00 00	 push	 290			; 00000122H
  01446	68 8e 00 00 00	 push	 142			; 0000008eH
  0144b	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0144e	83 c0 0a	 add	 eax, 10			; 0000000aH
  01451	50		 push	 eax
  01452	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01455	83 c1 05	 add	 ecx, 5
  01458	51		 push	 ecx
  01459	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6752 : 						}
; 6753 : 						else

  0145e	eb 21		 jmp	 SHORT $LN232@draw_weapo
$LN231@draw_weapo:

; 6754 : 						{
; 6755 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 10, 160, 290, 8, 8);

  01460	6a 08		 push	 8
  01462	6a 08		 push	 8
  01464	68 22 01 00 00	 push	 290			; 00000122H
  01469	68 a0 00 00 00	 push	 160			; 000000a0H
  0146e	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01471	83 c0 0a	 add	 eax, 10			; 0000000aH
  01474	50		 push	 eax
  01475	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01478	83 c1 05	 add	 ecx, 5
  0147b	51		 push	 ecx
  0147c	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN232@draw_weapo:

; 6756 : 						}
; 6757 : 					}
; 6758 : 					else

  01481	eb 52		 jmp	 SHORT $LN230@draw_weapo
$LN229@draw_weapo:

; 6759 : 					{
; 6760 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01483	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01486	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01489	75 29		 jne	 SHORT $LN233@draw_weapo
  0148b	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0148f	75 23		 jne	 SHORT $LN233@draw_weapo

; 6761 : 						{
; 6762 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 10, 133, 290, 8, 8);

  01491	6a 08		 push	 8
  01493	6a 08		 push	 8
  01495	68 22 01 00 00	 push	 290			; 00000122H
  0149a	68 85 00 00 00	 push	 133			; 00000085H
  0149f	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  014a2	83 c0 0a	 add	 eax, 10			; 0000000aH
  014a5	50		 push	 eax
  014a6	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  014a9	83 c1 05	 add	 ecx, 5
  014ac	51		 push	 ecx
  014ad	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6763 : 						}
; 6764 : 						else

  014b2	eb 21		 jmp	 SHORT $LN230@draw_weapo
$LN233@draw_weapo:

; 6765 : 						{
; 6766 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 10, 151, 290, 8, 8);

  014b4	6a 08		 push	 8
  014b6	6a 08		 push	 8
  014b8	68 22 01 00 00	 push	 290			; 00000122H
  014bd	68 97 00 00 00	 push	 151			; 00000097H
  014c2	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  014c5	83 c0 0a	 add	 eax, 10			; 0000000aH
  014c8	50		 push	 eax
  014c9	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  014cc	83 c1 05	 add	 ecx, 5
  014cf	51		 push	 ecx
  014d0	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN230@draw_weapo:

; 6767 : 						}
; 6768 : 					}
; 6769 : 
; 6770 : 					if (number > 1)

  014d5	83 7d ac 01	 cmp	 DWORD PTR _number$[ebp], 1
  014d9	7e 54		 jle	 SHORT $LN235@draw_weapo

; 6771 : 					{
; 6772 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  014db	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  014de	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  014e1	75 29		 jne	 SHORT $LN237@draw_weapo
  014e3	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  014e7	75 23		 jne	 SHORT $LN237@draw_weapo

; 6773 : 						{
; 6774 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 18, 142, 290, 8, 8);

  014e9	6a 08		 push	 8
  014eb	6a 08		 push	 8
  014ed	68 22 01 00 00	 push	 290			; 00000122H
  014f2	68 8e 00 00 00	 push	 142			; 0000008eH
  014f7	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  014fa	83 c0 12	 add	 eax, 18			; 00000012H
  014fd	50		 push	 eax
  014fe	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01501	83 e9 03	 sub	 ecx, 3
  01504	51		 push	 ecx
  01505	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6775 : 						}
; 6776 : 						else

  0150a	eb 21		 jmp	 SHORT $LN238@draw_weapo
$LN237@draw_weapo:

; 6777 : 						{
; 6778 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 18, 160, 290, 8, 8);

  0150c	6a 08		 push	 8
  0150e	6a 08		 push	 8
  01510	68 22 01 00 00	 push	 290			; 00000122H
  01515	68 a0 00 00 00	 push	 160			; 000000a0H
  0151a	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0151d	83 c0 12	 add	 eax, 18			; 00000012H
  01520	50		 push	 eax
  01521	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01524	83 e9 03	 sub	 ecx, 3
  01527	51		 push	 ecx
  01528	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN238@draw_weapo:

; 6779 : 						}
; 6780 : 					}
; 6781 : 					else

  0152d	eb 52		 jmp	 SHORT $LN236@draw_weapo
$LN235@draw_weapo:

; 6782 : 					{
; 6783 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  0152f	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01532	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01535	75 29		 jne	 SHORT $LN239@draw_weapo
  01537	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0153b	75 23		 jne	 SHORT $LN239@draw_weapo

; 6784 : 						{
; 6785 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 18, 133, 290, 8, 8);

  0153d	6a 08		 push	 8
  0153f	6a 08		 push	 8
  01541	68 22 01 00 00	 push	 290			; 00000122H
  01546	68 85 00 00 00	 push	 133			; 00000085H
  0154b	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0154e	83 c0 12	 add	 eax, 18			; 00000012H
  01551	50		 push	 eax
  01552	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01555	83 e9 03	 sub	 ecx, 3
  01558	51		 push	 ecx
  01559	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6786 : 						}
; 6787 : 						else

  0155e	eb 21		 jmp	 SHORT $LN236@draw_weapo
$LN239@draw_weapo:

; 6788 : 						{
; 6789 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 18, 151, 290, 8, 8);

  01560	6a 08		 push	 8
  01562	6a 08		 push	 8
  01564	68 22 01 00 00	 push	 290			; 00000122H
  01569	68 97 00 00 00	 push	 151			; 00000097H
  0156e	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01571	83 c0 12	 add	 eax, 18			; 00000012H
  01574	50		 push	 eax
  01575	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01578	83 e9 03	 sub	 ecx, 3
  0157b	51		 push	 ecx
  0157c	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN236@draw_weapo:

; 6790 : 						}
; 6791 : 					}
; 6792 : 
; 6793 : 					if (number > 0)

  01581	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  01585	7e 54		 jle	 SHORT $LN241@draw_weapo

; 6794 : 					{
; 6795 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01587	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0158a	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  0158d	75 29		 jne	 SHORT $LN243@draw_weapo
  0158f	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01593	75 23		 jne	 SHORT $LN243@draw_weapo

; 6796 : 						{
; 6797 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 18, 142, 290, 8, 8);

  01595	6a 08		 push	 8
  01597	6a 08		 push	 8
  01599	68 22 01 00 00	 push	 290			; 00000122H
  0159e	68 8e 00 00 00	 push	 142			; 0000008eH
  015a3	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  015a6	83 c0 12	 add	 eax, 18			; 00000012H
  015a9	50		 push	 eax
  015aa	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  015ad	83 c1 05	 add	 ecx, 5
  015b0	51		 push	 ecx
  015b1	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6798 : 						}
; 6799 : 						else

  015b6	eb 21		 jmp	 SHORT $LN244@draw_weapo
$LN243@draw_weapo:

; 6800 : 						{
; 6801 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 18, 160, 290, 8, 8);

  015b8	6a 08		 push	 8
  015ba	6a 08		 push	 8
  015bc	68 22 01 00 00	 push	 290			; 00000122H
  015c1	68 a0 00 00 00	 push	 160			; 000000a0H
  015c6	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  015c9	83 c0 12	 add	 eax, 18			; 00000012H
  015cc	50		 push	 eax
  015cd	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  015d0	83 c1 05	 add	 ecx, 5
  015d3	51		 push	 ecx
  015d4	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN244@draw_weapo:

; 6802 : 						}
; 6803 : 					}
; 6804 : 					else

  015d9	eb 52		 jmp	 SHORT $LN242@draw_weapo
$LN241@draw_weapo:

; 6805 : 					{
; 6806 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  015db	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  015de	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  015e1	75 29		 jne	 SHORT $LN245@draw_weapo
  015e3	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  015e7	75 23		 jne	 SHORT $LN245@draw_weapo

; 6807 : 						{
; 6808 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 18, 133, 290, 8, 8);

  015e9	6a 08		 push	 8
  015eb	6a 08		 push	 8
  015ed	68 22 01 00 00	 push	 290			; 00000122H
  015f2	68 85 00 00 00	 push	 133			; 00000085H
  015f7	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  015fa	83 c0 12	 add	 eax, 18			; 00000012H
  015fd	50		 push	 eax
  015fe	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01601	83 c1 05	 add	 ecx, 5
  01604	51		 push	 ecx
  01605	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6809 : 						}
; 6810 : 						else

  0160a	eb 21		 jmp	 SHORT $LN242@draw_weapo
$LN245@draw_weapo:

; 6811 : 						{
; 6812 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 18, 151, 290, 8, 8);

  0160c	6a 08		 push	 8
  0160e	6a 08		 push	 8
  01610	68 22 01 00 00	 push	 290			; 00000122H
  01615	68 97 00 00 00	 push	 151			; 00000097H
  0161a	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0161d	83 c0 12	 add	 eax, 18			; 00000012H
  01620	50		 push	 eax
  01621	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01624	83 c1 05	 add	 ecx, 5
  01627	51		 push	 ecx
  01628	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN242@draw_weapo:

; 6813 : 						}
; 6814 : 					}
; 6815 : 
; 6816 : 					break;

  0162d	e9 b0 02 00 00	 jmp	 $LN24@draw_weapo
$LN247@draw_weapo:

; 6817 : 				}
; 6818 : 				case APACHE_RHS_INNER_PYLON:
; 6819 : 				case APACHE_RHS_OUTER_PYLON:
; 6820 : 				{
; 6821 : 					if (number > 3)

  01632	83 7d ac 03	 cmp	 DWORD PTR _number$[ebp], 3
  01636	7e 54		 jle	 SHORT $LN248@draw_weapo

; 6822 : 					{
; 6823 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01638	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0163b	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  0163e	75 29		 jne	 SHORT $LN250@draw_weapo
  01640	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01644	75 23		 jne	 SHORT $LN250@draw_weapo

; 6824 : 						{
; 6825 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 10, 142, 290, 8, 8);

  01646	6a 08		 push	 8
  01648	6a 08		 push	 8
  0164a	68 22 01 00 00	 push	 290			; 00000122H
  0164f	68 8e 00 00 00	 push	 142			; 0000008eH
  01654	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01657	83 c0 0a	 add	 eax, 10			; 0000000aH
  0165a	50		 push	 eax
  0165b	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0165e	83 c1 05	 add	 ecx, 5
  01661	51		 push	 ecx
  01662	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6826 : 						}
; 6827 : 						else

  01667	eb 21		 jmp	 SHORT $LN251@draw_weapo
$LN250@draw_weapo:

; 6828 : 						{
; 6829 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 10, 160, 290, 8, 8);

  01669	6a 08		 push	 8
  0166b	6a 08		 push	 8
  0166d	68 22 01 00 00	 push	 290			; 00000122H
  01672	68 a0 00 00 00	 push	 160			; 000000a0H
  01677	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0167a	83 c0 0a	 add	 eax, 10			; 0000000aH
  0167d	50		 push	 eax
  0167e	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01681	83 c1 05	 add	 ecx, 5
  01684	51		 push	 ecx
  01685	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN251@draw_weapo:

; 6830 : 						}
; 6831 : 					}
; 6832 : 					else

  0168a	eb 52		 jmp	 SHORT $LN249@draw_weapo
$LN248@draw_weapo:

; 6833 : 					{
; 6834 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  0168c	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0168f	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01692	75 29		 jne	 SHORT $LN252@draw_weapo
  01694	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01698	75 23		 jne	 SHORT $LN252@draw_weapo

; 6835 : 						{
; 6836 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 10, 133, 290, 8, 8);

  0169a	6a 08		 push	 8
  0169c	6a 08		 push	 8
  0169e	68 22 01 00 00	 push	 290			; 00000122H
  016a3	68 85 00 00 00	 push	 133			; 00000085H
  016a8	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  016ab	83 c0 0a	 add	 eax, 10			; 0000000aH
  016ae	50		 push	 eax
  016af	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  016b2	83 c1 05	 add	 ecx, 5
  016b5	51		 push	 ecx
  016b6	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6837 : 						}
; 6838 : 						else

  016bb	eb 21		 jmp	 SHORT $LN249@draw_weapo
$LN252@draw_weapo:

; 6839 : 						{
; 6840 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 10, 151, 290, 8, 8);

  016bd	6a 08		 push	 8
  016bf	6a 08		 push	 8
  016c1	68 22 01 00 00	 push	 290			; 00000122H
  016c6	68 97 00 00 00	 push	 151			; 00000097H
  016cb	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  016ce	83 c0 0a	 add	 eax, 10			; 0000000aH
  016d1	50		 push	 eax
  016d2	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  016d5	83 c1 05	 add	 ecx, 5
  016d8	51		 push	 ecx
  016d9	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN249@draw_weapo:

; 6841 : 						}
; 6842 : 					}
; 6843 : 
; 6844 : 					if (number > 2)

  016de	83 7d ac 02	 cmp	 DWORD PTR _number$[ebp], 2
  016e2	7e 54		 jle	 SHORT $LN254@draw_weapo

; 6845 : 					{
; 6846 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  016e4	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  016e7	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  016ea	75 29		 jne	 SHORT $LN256@draw_weapo
  016ec	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  016f0	75 23		 jne	 SHORT $LN256@draw_weapo

; 6847 : 						{
; 6848 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 10, 142, 290, 8, 8);

  016f2	6a 08		 push	 8
  016f4	6a 08		 push	 8
  016f6	68 22 01 00 00	 push	 290			; 00000122H
  016fb	68 8e 00 00 00	 push	 142			; 0000008eH
  01700	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01703	83 c0 0a	 add	 eax, 10			; 0000000aH
  01706	50		 push	 eax
  01707	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0170a	83 e9 03	 sub	 ecx, 3
  0170d	51		 push	 ecx
  0170e	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6849 : 						}
; 6850 : 						else

  01713	eb 21		 jmp	 SHORT $LN257@draw_weapo
$LN256@draw_weapo:

; 6851 : 						{
; 6852 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 10, 160, 290, 8, 8);

  01715	6a 08		 push	 8
  01717	6a 08		 push	 8
  01719	68 22 01 00 00	 push	 290			; 00000122H
  0171e	68 a0 00 00 00	 push	 160			; 000000a0H
  01723	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01726	83 c0 0a	 add	 eax, 10			; 0000000aH
  01729	50		 push	 eax
  0172a	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0172d	83 e9 03	 sub	 ecx, 3
  01730	51		 push	 ecx
  01731	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN257@draw_weapo:

; 6853 : 						}
; 6854 : 					}
; 6855 : 					else

  01736	eb 52		 jmp	 SHORT $LN255@draw_weapo
$LN254@draw_weapo:

; 6856 : 					{
; 6857 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01738	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0173b	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  0173e	75 29		 jne	 SHORT $LN258@draw_weapo
  01740	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01744	75 23		 jne	 SHORT $LN258@draw_weapo

; 6858 : 						{
; 6859 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 10, 133, 290, 8, 8);

  01746	6a 08		 push	 8
  01748	6a 08		 push	 8
  0174a	68 22 01 00 00	 push	 290			; 00000122H
  0174f	68 85 00 00 00	 push	 133			; 00000085H
  01754	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01757	83 c0 0a	 add	 eax, 10			; 0000000aH
  0175a	50		 push	 eax
  0175b	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0175e	83 e9 03	 sub	 ecx, 3
  01761	51		 push	 ecx
  01762	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6860 : 						}
; 6861 : 						else

  01767	eb 21		 jmp	 SHORT $LN255@draw_weapo
$LN258@draw_weapo:

; 6862 : 						{
; 6863 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 10, 151, 290, 8, 8);

  01769	6a 08		 push	 8
  0176b	6a 08		 push	 8
  0176d	68 22 01 00 00	 push	 290			; 00000122H
  01772	68 97 00 00 00	 push	 151			; 00000097H
  01777	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0177a	83 c0 0a	 add	 eax, 10			; 0000000aH
  0177d	50		 push	 eax
  0177e	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01781	83 e9 03	 sub	 ecx, 3
  01784	51		 push	 ecx
  01785	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN255@draw_weapo:

; 6864 : 						}
; 6865 : 					}
; 6866 : 
; 6867 : 					if (number > 1)

  0178a	83 7d ac 01	 cmp	 DWORD PTR _number$[ebp], 1
  0178e	7e 54		 jle	 SHORT $LN260@draw_weapo

; 6868 : 					{
; 6869 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01790	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01793	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01796	75 29		 jne	 SHORT $LN262@draw_weapo
  01798	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0179c	75 23		 jne	 SHORT $LN262@draw_weapo

; 6870 : 						{
; 6871 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 18, 142, 290, 8, 8);

  0179e	6a 08		 push	 8
  017a0	6a 08		 push	 8
  017a2	68 22 01 00 00	 push	 290			; 00000122H
  017a7	68 8e 00 00 00	 push	 142			; 0000008eH
  017ac	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  017af	83 c0 12	 add	 eax, 18			; 00000012H
  017b2	50		 push	 eax
  017b3	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  017b6	83 c1 05	 add	 ecx, 5
  017b9	51		 push	 ecx
  017ba	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6872 : 						}
; 6873 : 						else

  017bf	eb 21		 jmp	 SHORT $LN263@draw_weapo
$LN262@draw_weapo:

; 6874 : 						{
; 6875 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 18, 160, 290, 8, 8);

  017c1	6a 08		 push	 8
  017c3	6a 08		 push	 8
  017c5	68 22 01 00 00	 push	 290			; 00000122H
  017ca	68 a0 00 00 00	 push	 160			; 000000a0H
  017cf	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  017d2	83 c0 12	 add	 eax, 18			; 00000012H
  017d5	50		 push	 eax
  017d6	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  017d9	83 c1 05	 add	 ecx, 5
  017dc	51		 push	 ecx
  017dd	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN263@draw_weapo:

; 6876 : 						}
; 6877 : 					}
; 6878 : 					else

  017e2	eb 52		 jmp	 SHORT $LN261@draw_weapo
$LN260@draw_weapo:

; 6879 : 					{
; 6880 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  017e4	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  017e7	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  017ea	75 29		 jne	 SHORT $LN264@draw_weapo
  017ec	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  017f0	75 23		 jne	 SHORT $LN264@draw_weapo

; 6881 : 						{
; 6882 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 18, 133, 290, 8, 8);

  017f2	6a 08		 push	 8
  017f4	6a 08		 push	 8
  017f6	68 22 01 00 00	 push	 290			; 00000122H
  017fb	68 85 00 00 00	 push	 133			; 00000085H
  01800	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01803	83 c0 12	 add	 eax, 18			; 00000012H
  01806	50		 push	 eax
  01807	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0180a	83 c1 05	 add	 ecx, 5
  0180d	51		 push	 ecx
  0180e	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6883 : 						}
; 6884 : 						else

  01813	eb 21		 jmp	 SHORT $LN261@draw_weapo
$LN264@draw_weapo:

; 6885 : 						{
; 6886 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 18, 151, 290, 8, 8);

  01815	6a 08		 push	 8
  01817	6a 08		 push	 8
  01819	68 22 01 00 00	 push	 290			; 00000122H
  0181e	68 97 00 00 00	 push	 151			; 00000097H
  01823	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01826	83 c0 12	 add	 eax, 18			; 00000012H
  01829	50		 push	 eax
  0182a	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0182d	83 c1 05	 add	 ecx, 5
  01830	51		 push	 ecx
  01831	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN261@draw_weapo:

; 6887 : 						}
; 6888 : 					}
; 6889 : 
; 6890 : 					if (number > 0)

  01836	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  0183a	7e 54		 jle	 SHORT $LN266@draw_weapo

; 6891 : 					{
; 6892 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  0183c	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0183f	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01842	75 29		 jne	 SHORT $LN268@draw_weapo
  01844	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01848	75 23		 jne	 SHORT $LN268@draw_weapo

; 6893 : 						{
; 6894 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 18, 142, 290, 8, 8);

  0184a	6a 08		 push	 8
  0184c	6a 08		 push	 8
  0184e	68 22 01 00 00	 push	 290			; 00000122H
  01853	68 8e 00 00 00	 push	 142			; 0000008eH
  01858	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0185b	83 c0 12	 add	 eax, 18			; 00000012H
  0185e	50		 push	 eax
  0185f	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01862	83 e9 03	 sub	 ecx, 3
  01865	51		 push	 ecx
  01866	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6895 : 						}
; 6896 : 						else

  0186b	eb 21		 jmp	 SHORT $LN269@draw_weapo
$LN268@draw_weapo:

; 6897 : 						{
; 6898 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 18, 160, 290, 8, 8);

  0186d	6a 08		 push	 8
  0186f	6a 08		 push	 8
  01871	68 22 01 00 00	 push	 290			; 00000122H
  01876	68 a0 00 00 00	 push	 160			; 000000a0H
  0187b	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0187e	83 c0 12	 add	 eax, 18			; 00000012H
  01881	50		 push	 eax
  01882	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01885	83 e9 03	 sub	 ecx, 3
  01888	51		 push	 ecx
  01889	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN269@draw_weapo:

; 6899 : 						}
; 6900 : 					}
; 6901 : 					else

  0188e	eb 52		 jmp	 SHORT $LN24@draw_weapo
$LN266@draw_weapo:

; 6902 : 					{
; 6903 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01890	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01893	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01896	75 29		 jne	 SHORT $LN270@draw_weapo
  01898	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0189c	75 23		 jne	 SHORT $LN270@draw_weapo

; 6904 : 						{
; 6905 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 18, 133, 290, 8, 8);

  0189e	6a 08		 push	 8
  018a0	6a 08		 push	 8
  018a2	68 22 01 00 00	 push	 290			; 00000122H
  018a7	68 85 00 00 00	 push	 133			; 00000085H
  018ac	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  018af	83 c0 12	 add	 eax, 18			; 00000012H
  018b2	50		 push	 eax
  018b3	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  018b6	83 e9 03	 sub	 ecx, 3
  018b9	51		 push	 ecx
  018ba	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6906 : 						}
; 6907 : 						else

  018bf	eb 21		 jmp	 SHORT $LN24@draw_weapo
$LN270@draw_weapo:

; 6908 : 						{
; 6909 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 18, 151, 290, 8, 8);

  018c1	6a 08		 push	 8
  018c3	6a 08		 push	 8
  018c5	68 22 01 00 00	 push	 290			; 00000122H
  018ca	68 97 00 00 00	 push	 151			; 00000097H
  018cf	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  018d2	83 c0 12	 add	 eax, 18			; 00000012H
  018d5	50		 push	 eax
  018d6	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  018d9	83 e9 03	 sub	 ecx, 3
  018dc	51		 push	 ecx
  018dd	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN24@draw_weapo:

; 6910 : 						}
; 6911 : 					}
; 6912 : 
; 6913 : 					break;
; 6914 : 				}
; 6915 : 			}
; 6916 : 
; 6917 : 			//
; 6918 : 			// damage cross
; 6919 : 			//
; 6920 : 
; 6921 : 			if (damaged)

  018e2	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  018e6	0f 84 8d 00 00
	00		 je	 $LN272@draw_weapo

; 6922 : 			{
; 6923 : 				switch (heading_depth)

  018ec	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  018ef	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv1262[ebp], eax
  018f5	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv1262[ebp], 3
  018fc	77 7b		 ja	 SHORT $LN272@draw_weapo
  018fe	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv1262[ebp]
  01904	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN395@draw_weapo[ecx*4]
$LN273@draw_weapo:

; 6924 : 				{
; 6925 : 					case APACHE_LHS_INNER_PYLON:
; 6926 : 					{
; 6927 : 						draw_sprite (26, 358, 169, 290, 16, 16);

  0190b	6a 10		 push	 16			; 00000010H
  0190d	6a 10		 push	 16			; 00000010H
  0190f	68 22 01 00 00	 push	 290			; 00000122H
  01914	68 a9 00 00 00	 push	 169			; 000000a9H
  01919	68 66 01 00 00	 push	 358			; 00000166H
  0191e	6a 1a		 push	 26			; 0000001aH
  01920	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6928 : 
; 6929 : 						break;

  01925	eb 52		 jmp	 SHORT $LN272@draw_weapo
$LN274@draw_weapo:

; 6930 : 					}
; 6931 : 					case APACHE_RHS_INNER_PYLON:
; 6932 : 					{
; 6933 : 						draw_sprite (95, 358, 169, 290, 16, 16);

  01927	6a 10		 push	 16			; 00000010H
  01929	6a 10		 push	 16			; 00000010H
  0192b	68 22 01 00 00	 push	 290			; 00000122H
  01930	68 a9 00 00 00	 push	 169			; 000000a9H
  01935	68 66 01 00 00	 push	 358			; 00000166H
  0193a	6a 5f		 push	 95			; 0000005fH
  0193c	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6934 : 
; 6935 : 						break;

  01941	eb 36		 jmp	 SHORT $LN272@draw_weapo
$LN275@draw_weapo:

; 6936 : 					}
; 6937 : 					case APACHE_LHS_OUTER_PYLON:
; 6938 : 					{
; 6939 : 						draw_sprite (10, 358, 169, 290, 16, 16);

  01943	6a 10		 push	 16			; 00000010H
  01945	6a 10		 push	 16			; 00000010H
  01947	68 22 01 00 00	 push	 290			; 00000122H
  0194c	68 a9 00 00 00	 push	 169			; 000000a9H
  01951	68 66 01 00 00	 push	 358			; 00000166H
  01956	6a 0a		 push	 10			; 0000000aH
  01958	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6940 : 
; 6941 : 						break;

  0195d	eb 1a		 jmp	 SHORT $LN272@draw_weapo
$LN276@draw_weapo:

; 6942 : 					}
; 6943 : 					case APACHE_RHS_OUTER_PYLON:
; 6944 : 					{
; 6945 : 						draw_sprite (111, 358, 169, 290, 16, 16);

  0195f	6a 10		 push	 16			; 00000010H
  01961	6a 10		 push	 16			; 00000010H
  01963	68 22 01 00 00	 push	 290			; 00000122H
  01968	68 a9 00 00 00	 push	 169			; 000000a9H
  0196d	68 66 01 00 00	 push	 358			; 00000166H
  01972	6a 6f		 push	 111			; 0000006fH
  01974	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN272@draw_weapo:

; 6946 : 
; 6947 : 						break;
; 6948 : 					}
; 6949 : 				}
; 6950 : 			}
; 6951 : 
; 6952 : 			//
; 6953 : 			// type
; 6954 : 			//
; 6955 : 
; 6956 : 			switch (heading_depth)

  01979	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  0197c	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv1288[ebp], eax
  01982	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv1288[ebp], 3
  01989	77 4b		 ja	 SHORT $LN28@draw_weapo
  0198b	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv1288[ebp]
  01991	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN396@draw_weapo[ecx*4]
$LN277@draw_weapo:

; 6957 : 			{
; 6958 : 				case APACHE_LHS_INNER_PYLON:
; 6959 : 				{
; 6960 : 					hardpoint_x = 26;

  01998	c7 45 a4 1a 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 26 ; 0000001aH

; 6961 : 					hardpoint_y = 377;

  0199f	c7 45 a0 79 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 377 ; 00000179H

; 6962 : 
; 6963 : 					break;

  019a6	eb 2e		 jmp	 SHORT $LN28@draw_weapo
$LN278@draw_weapo:

; 6964 : 				}
; 6965 : 				case APACHE_RHS_INNER_PYLON:
; 6966 : 				{
; 6967 : 					hardpoint_x = 95;

  019a8	c7 45 a4 5f 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 95 ; 0000005fH

; 6968 : 					hardpoint_y = 377;

  019af	c7 45 a0 79 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 377 ; 00000179H

; 6969 : 
; 6970 : 					break;

  019b6	eb 1e		 jmp	 SHORT $LN28@draw_weapo
$LN279@draw_weapo:

; 6971 : 				}
; 6972 : 				case APACHE_LHS_OUTER_PYLON:
; 6973 : 				{
; 6974 : 					hardpoint_x = 10;

  019b8	c7 45 a4 0a 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 10 ; 0000000aH

; 6975 : 					hardpoint_y = 377;

  019bf	c7 45 a0 79 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 377 ; 00000179H

; 6976 : 
; 6977 : 					break;

  019c6	eb 0e		 jmp	 SHORT $LN28@draw_weapo
$LN280@draw_weapo:

; 6978 : 				}
; 6979 : 				case APACHE_RHS_OUTER_PYLON:
; 6980 : 				{
; 6981 : 					hardpoint_x = 111;

  019c8	c7 45 a4 6f 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 111 ; 0000006fH

; 6982 : 					hardpoint_y = 377;

  019cf	c7 45 a0 79 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 377 ; 00000179H
$LN28@draw_weapo:

; 6983 : 
; 6984 : 					break;
; 6985 : 				}
; 6986 : 			}
; 6987 : 
; 6988 : 			if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AGM114K_HELLFIRE_II)

  019d6	83 7d 94 2e	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 46 ; 0000002eH
  019da	75 48		 jne	 SHORT $LN281@draw_weapo

; 6989 : 			{
; 6990 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  019dc	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  019df	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  019e2	75 23		 jne	 SHORT $LN283@draw_weapo
  019e4	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  019e8	75 1d		 jne	 SHORT $LN283@draw_weapo

; 6991 : 				{
; 6992 : 					draw_sprite (hardpoint_x, hardpoint_y, 133, 261, 15, 6);

  019ea	6a 06		 push	 6
  019ec	6a 0f		 push	 15			; 0000000fH
  019ee	68 05 01 00 00	 push	 261			; 00000105H
  019f3	68 85 00 00 00	 push	 133			; 00000085H
  019f8	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  019fb	50		 push	 eax
  019fc	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  019ff	51		 push	 ecx
  01a00	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6993 : 				}
; 6994 : 				else

  01a05	eb 1b		 jmp	 SHORT $LN284@draw_weapo
$LN283@draw_weapo:

; 6995 : 				{
; 6996 : 					draw_sprite (hardpoint_x, hardpoint_y, 173, 261, 15, 6);

  01a07	6a 06		 push	 6
  01a09	6a 0f		 push	 15			; 0000000fH
  01a0b	68 05 01 00 00	 push	 261			; 00000105H
  01a10	68 ad 00 00 00	 push	 173			; 000000adH
  01a15	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01a18	50		 push	 eax
  01a19	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01a1c	51		 push	 ecx
  01a1d	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN284@draw_weapo:

; 6997 : 				}
; 6998 : 			}
; 6999 : 			else

  01a22	eb 46		 jmp	 SHORT $LN141@draw_weapo
$LN281@draw_weapo:

; 7000 : 			{
; 7001 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  01a24	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01a27	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01a2a	75 23		 jne	 SHORT $LN285@draw_weapo
  01a2c	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01a30	75 1d		 jne	 SHORT $LN285@draw_weapo

; 7002 : 				{
; 7003 : 					draw_sprite (hardpoint_x, hardpoint_y, 149, 261, 15, 6);

  01a32	6a 06		 push	 6
  01a34	6a 0f		 push	 15			; 0000000fH
  01a36	68 05 01 00 00	 push	 261			; 00000105H
  01a3b	68 95 00 00 00	 push	 149			; 00000095H
  01a40	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01a43	50		 push	 eax
  01a44	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01a47	51		 push	 ecx
  01a48	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7004 : 				}
; 7005 : 				else

  01a4d	eb 1b		 jmp	 SHORT $LN141@draw_weapo
$LN285@draw_weapo:

; 7006 : 				{
; 7007 : 					draw_sprite (hardpoint_x, hardpoint_y, 189, 261, 15, 6);

  01a4f	6a 06		 push	 6
  01a51	6a 0f		 push	 15			; 0000000fH
  01a53	68 05 01 00 00	 push	 261			; 00000105H
  01a58	68 bd 00 00 00	 push	 189			; 000000bdH
  01a5d	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01a60	50		 push	 eax
  01a61	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01a64	51		 push	 ecx
  01a65	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN141@draw_weapo:

; 7008 : 				}
; 7009 : 			}
; 7010 : 		}
; 7011 : 	}
; 7012 : 
; 7013 : 	////////////////////////////////////////////////////////////////////////////////
; 7014 : 	//
; 7015 : 	// Stingers
; 7016 : 	//
; 7017 : 	////////////////////////////////////////////////////////////////////////////////
; 7018 : 
; 7019 : 	if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AIM92_STINGER)

  01a6a	83 7d 94 24	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 36 ; 00000024H
  01a6e	0f 85 7b 05 00
	00		 jne	 $LN287@draw_weapo

; 7020 : 	{
; 7021 : 		if (draw_large_mfd)

  01a74	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01a7b	0f 84 ac 02 00
	00		 je	 $LN288@draw_weapo

; 7022 : 		{
; 7023 : 			////////////////////////////////////////
; 7024 : 			//
; 7025 : 			// LARGE
; 7026 : 			//
; 7027 : 			////////////////////////////////////////
; 7028 : 
; 7029 : 			//
; 7030 : 			// missiles
; 7031 : 			//
; 7032 : 
; 7033 : 			switch (heading_depth)

  01a81	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  01a84	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv1321[ebp], eax
  01a8a	83 bd 50 ff ff
	ff 04		 cmp	 DWORD PTR tv1321[ebp], 4
  01a91	74 12		 je	 SHORT $LN290@draw_weapo
  01a93	83 bd 50 ff ff
	ff 05		 cmp	 DWORD PTR tv1321[ebp], 5
  01a9a	0f 84 12 01 00
	00		 je	 $LN303@draw_weapo
  01aa0	e9 2d 02 00 00	 jmp	 $LN30@draw_weapo
$LN290@draw_weapo:

; 7034 : 			{
; 7035 : 				case APACHE_LHS_WING_TIP_MOUNT:
; 7036 : 				{
; 7037 : 					if (number > 1)

  01aa5	83 7d ac 01	 cmp	 DWORD PTR _number$[ebp], 1
  01aa9	7e 40		 jle	 SHORT $LN291@draw_weapo

; 7038 : 					{
; 7039 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01aab	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01aae	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01ab1	75 1f		 jne	 SHORT $LN293@draw_weapo
  01ab3	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01ab7	75 19		 jne	 SHORT $LN293@draw_weapo

; 7040 : 						{
; 7041 : 							draw_sprite (6, 144, 280, 61, 16, 16);

  01ab9	6a 10		 push	 16			; 00000010H
  01abb	6a 10		 push	 16			; 00000010H
  01abd	6a 3d		 push	 61			; 0000003dH
  01abf	68 18 01 00 00	 push	 280			; 00000118H
  01ac4	68 90 00 00 00	 push	 144			; 00000090H
  01ac9	6a 06		 push	 6
  01acb	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7042 : 						}
; 7043 : 						else

  01ad0	eb 17		 jmp	 SHORT $LN294@draw_weapo
$LN293@draw_weapo:

; 7044 : 						{
; 7045 : 							draw_sprite (6, 144, 316, 61, 16, 16);

  01ad2	6a 10		 push	 16			; 00000010H
  01ad4	6a 10		 push	 16			; 00000010H
  01ad6	6a 3d		 push	 61			; 0000003dH
  01ad8	68 3c 01 00 00	 push	 316			; 0000013cH
  01add	68 90 00 00 00	 push	 144			; 00000090H
  01ae2	6a 06		 push	 6
  01ae4	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN294@draw_weapo:

; 7046 : 						}
; 7047 : 					}
; 7048 : 					else

  01ae9	eb 3e		 jmp	 SHORT $LN292@draw_weapo
$LN291@draw_weapo:

; 7049 : 					{
; 7050 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01aeb	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01aee	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01af1	75 1f		 jne	 SHORT $LN295@draw_weapo
  01af3	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01af7	75 19		 jne	 SHORT $LN295@draw_weapo

; 7051 : 						{
; 7052 : 							draw_sprite (6, 144, 262, 61, 16, 16);

  01af9	6a 10		 push	 16			; 00000010H
  01afb	6a 10		 push	 16			; 00000010H
  01afd	6a 3d		 push	 61			; 0000003dH
  01aff	68 06 01 00 00	 push	 262			; 00000106H
  01b04	68 90 00 00 00	 push	 144			; 00000090H
  01b09	6a 06		 push	 6
  01b0b	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7053 : 						}
; 7054 : 						else

  01b10	eb 17		 jmp	 SHORT $LN292@draw_weapo
$LN295@draw_weapo:

; 7055 : 						{
; 7056 : 							draw_sprite (6, 144, 298, 61, 16, 16);

  01b12	6a 10		 push	 16			; 00000010H
  01b14	6a 10		 push	 16			; 00000010H
  01b16	6a 3d		 push	 61			; 0000003dH
  01b18	68 2a 01 00 00	 push	 298			; 0000012aH
  01b1d	68 90 00 00 00	 push	 144			; 00000090H
  01b22	6a 06		 push	 6
  01b24	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN292@draw_weapo:

; 7057 : 						}
; 7058 : 					}
; 7059 : 
; 7060 : 					if (number > 0)

  01b29	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  01b2d	7e 40		 jle	 SHORT $LN297@draw_weapo

; 7061 : 					{
; 7062 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01b2f	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01b32	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01b35	75 1f		 jne	 SHORT $LN299@draw_weapo
  01b37	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01b3b	75 19		 jne	 SHORT $LN299@draw_weapo

; 7063 : 						{
; 7064 : 							draw_sprite (6, 161, 280, 61, 16, 16);

  01b3d	6a 10		 push	 16			; 00000010H
  01b3f	6a 10		 push	 16			; 00000010H
  01b41	6a 3d		 push	 61			; 0000003dH
  01b43	68 18 01 00 00	 push	 280			; 00000118H
  01b48	68 a1 00 00 00	 push	 161			; 000000a1H
  01b4d	6a 06		 push	 6
  01b4f	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7065 : 						}
; 7066 : 						else

  01b54	eb 17		 jmp	 SHORT $LN300@draw_weapo
$LN299@draw_weapo:

; 7067 : 						{
; 7068 : 							draw_sprite (6, 161, 316, 61, 16, 16);

  01b56	6a 10		 push	 16			; 00000010H
  01b58	6a 10		 push	 16			; 00000010H
  01b5a	6a 3d		 push	 61			; 0000003dH
  01b5c	68 3c 01 00 00	 push	 316			; 0000013cH
  01b61	68 a1 00 00 00	 push	 161			; 000000a1H
  01b66	6a 06		 push	 6
  01b68	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN300@draw_weapo:

; 7069 : 						}
; 7070 : 					}
; 7071 : 					else

  01b6d	eb 3e		 jmp	 SHORT $LN298@draw_weapo
$LN297@draw_weapo:

; 7072 : 					{
; 7073 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01b6f	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01b72	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01b75	75 1f		 jne	 SHORT $LN301@draw_weapo
  01b77	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01b7b	75 19		 jne	 SHORT $LN301@draw_weapo

; 7074 : 						{
; 7075 : 							draw_sprite (6, 161, 262, 61, 16, 16);

  01b7d	6a 10		 push	 16			; 00000010H
  01b7f	6a 10		 push	 16			; 00000010H
  01b81	6a 3d		 push	 61			; 0000003dH
  01b83	68 06 01 00 00	 push	 262			; 00000106H
  01b88	68 a1 00 00 00	 push	 161			; 000000a1H
  01b8d	6a 06		 push	 6
  01b8f	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7076 : 						}
; 7077 : 						else

  01b94	eb 17		 jmp	 SHORT $LN298@draw_weapo
$LN301@draw_weapo:

; 7078 : 						{
; 7079 : 							draw_sprite (6, 161, 298, 61, 16, 16);

  01b96	6a 10		 push	 16			; 00000010H
  01b98	6a 10		 push	 16			; 00000010H
  01b9a	6a 3d		 push	 61			; 0000003dH
  01b9c	68 2a 01 00 00	 push	 298			; 0000012aH
  01ba1	68 a1 00 00 00	 push	 161			; 000000a1H
  01ba6	6a 06		 push	 6
  01ba8	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN298@draw_weapo:

; 7080 : 						}
; 7081 : 					}
; 7082 : 
; 7083 : 					break;

  01bad	e9 20 01 00 00	 jmp	 $LN30@draw_weapo
$LN303@draw_weapo:

; 7084 : 				}
; 7085 : 				case APACHE_RHS_WING_TIP_MOUNT:
; 7086 : 				{
; 7087 : 					if (number > 1)

  01bb2	83 7d ac 01	 cmp	 DWORD PTR _number$[ebp], 1
  01bb6	7e 46		 jle	 SHORT $LN304@draw_weapo

; 7088 : 					{
; 7089 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01bb8	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01bbb	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01bbe	75 22		 jne	 SHORT $LN306@draw_weapo
  01bc0	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01bc4	75 1c		 jne	 SHORT $LN306@draw_weapo

; 7090 : 						{
; 7091 : 							draw_sprite (242, 144, 280, 61, 16, 16);

  01bc6	6a 10		 push	 16			; 00000010H
  01bc8	6a 10		 push	 16			; 00000010H
  01bca	6a 3d		 push	 61			; 0000003dH
  01bcc	68 18 01 00 00	 push	 280			; 00000118H
  01bd1	68 90 00 00 00	 push	 144			; 00000090H
  01bd6	68 f2 00 00 00	 push	 242			; 000000f2H
  01bdb	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7092 : 						}
; 7093 : 						else

  01be0	eb 1a		 jmp	 SHORT $LN307@draw_weapo
$LN306@draw_weapo:

; 7094 : 						{
; 7095 : 							draw_sprite (242, 144, 316, 61, 16, 16);

  01be2	6a 10		 push	 16			; 00000010H
  01be4	6a 10		 push	 16			; 00000010H
  01be6	6a 3d		 push	 61			; 0000003dH
  01be8	68 3c 01 00 00	 push	 316			; 0000013cH
  01bed	68 90 00 00 00	 push	 144			; 00000090H
  01bf2	68 f2 00 00 00	 push	 242			; 000000f2H
  01bf7	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN307@draw_weapo:

; 7096 : 						}
; 7097 : 					}
; 7098 : 					else

  01bfc	eb 44		 jmp	 SHORT $LN305@draw_weapo
$LN304@draw_weapo:

; 7099 : 					{
; 7100 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01bfe	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01c01	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01c04	75 22		 jne	 SHORT $LN308@draw_weapo
  01c06	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01c0a	75 1c		 jne	 SHORT $LN308@draw_weapo

; 7101 : 						{
; 7102 : 							draw_sprite (242, 144, 262, 61, 16, 16);

  01c0c	6a 10		 push	 16			; 00000010H
  01c0e	6a 10		 push	 16			; 00000010H
  01c10	6a 3d		 push	 61			; 0000003dH
  01c12	68 06 01 00 00	 push	 262			; 00000106H
  01c17	68 90 00 00 00	 push	 144			; 00000090H
  01c1c	68 f2 00 00 00	 push	 242			; 000000f2H
  01c21	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7103 : 						}
; 7104 : 						else

  01c26	eb 1a		 jmp	 SHORT $LN305@draw_weapo
$LN308@draw_weapo:

; 7105 : 						{
; 7106 : 							draw_sprite (242, 144, 298, 61, 16, 16);

  01c28	6a 10		 push	 16			; 00000010H
  01c2a	6a 10		 push	 16			; 00000010H
  01c2c	6a 3d		 push	 61			; 0000003dH
  01c2e	68 2a 01 00 00	 push	 298			; 0000012aH
  01c33	68 90 00 00 00	 push	 144			; 00000090H
  01c38	68 f2 00 00 00	 push	 242			; 000000f2H
  01c3d	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN305@draw_weapo:

; 7107 : 						}
; 7108 : 					}
; 7109 : 
; 7110 : 					if (number > 0)

  01c42	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  01c46	7e 46		 jle	 SHORT $LN310@draw_weapo

; 7111 : 					{
; 7112 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01c48	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01c4b	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01c4e	75 22		 jne	 SHORT $LN312@draw_weapo
  01c50	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01c54	75 1c		 jne	 SHORT $LN312@draw_weapo

; 7113 : 						{
; 7114 : 							draw_sprite (242, 161, 280, 61, 16, 16);

  01c56	6a 10		 push	 16			; 00000010H
  01c58	6a 10		 push	 16			; 00000010H
  01c5a	6a 3d		 push	 61			; 0000003dH
  01c5c	68 18 01 00 00	 push	 280			; 00000118H
  01c61	68 a1 00 00 00	 push	 161			; 000000a1H
  01c66	68 f2 00 00 00	 push	 242			; 000000f2H
  01c6b	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7115 : 						}
; 7116 : 						else

  01c70	eb 1a		 jmp	 SHORT $LN313@draw_weapo
$LN312@draw_weapo:

; 7117 : 						{
; 7118 : 							draw_sprite (242, 161, 316, 61, 16, 16);

  01c72	6a 10		 push	 16			; 00000010H
  01c74	6a 10		 push	 16			; 00000010H
  01c76	6a 3d		 push	 61			; 0000003dH
  01c78	68 3c 01 00 00	 push	 316			; 0000013cH
  01c7d	68 a1 00 00 00	 push	 161			; 000000a1H
  01c82	68 f2 00 00 00	 push	 242			; 000000f2H
  01c87	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN313@draw_weapo:

; 7119 : 						}
; 7120 : 					}
; 7121 : 					else

  01c8c	eb 44		 jmp	 SHORT $LN30@draw_weapo
$LN310@draw_weapo:

; 7122 : 					{
; 7123 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01c8e	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01c91	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01c94	75 22		 jne	 SHORT $LN314@draw_weapo
  01c96	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01c9a	75 1c		 jne	 SHORT $LN314@draw_weapo

; 7124 : 						{
; 7125 : 							draw_sprite (242, 161, 262, 61, 16, 16);

  01c9c	6a 10		 push	 16			; 00000010H
  01c9e	6a 10		 push	 16			; 00000010H
  01ca0	6a 3d		 push	 61			; 0000003dH
  01ca2	68 06 01 00 00	 push	 262			; 00000106H
  01ca7	68 a1 00 00 00	 push	 161			; 000000a1H
  01cac	68 f2 00 00 00	 push	 242			; 000000f2H
  01cb1	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7126 : 						}
; 7127 : 						else

  01cb6	eb 1a		 jmp	 SHORT $LN30@draw_weapo
$LN314@draw_weapo:

; 7128 : 						{
; 7129 : 							draw_sprite (242, 161, 298, 61, 16, 16);

  01cb8	6a 10		 push	 16			; 00000010H
  01cba	6a 10		 push	 16			; 00000010H
  01cbc	6a 3d		 push	 61			; 0000003dH
  01cbe	68 2a 01 00 00	 push	 298			; 0000012aH
  01cc3	68 a1 00 00 00	 push	 161			; 000000a1H
  01cc8	68 f2 00 00 00	 push	 242			; 000000f2H
  01ccd	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN30@draw_weapo:

; 7130 : 						}
; 7131 : 					}
; 7132 : 
; 7133 : 					break;
; 7134 : 				}
; 7135 : 			}
; 7136 : 
; 7137 : 			//
; 7138 : 			// damage cross
; 7139 : 			//
; 7140 : 
; 7141 : 			if (damaged)

  01cd2	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01cd6	74 50		 je	 SHORT $LN316@draw_weapo

; 7142 : 			{
; 7143 : 				switch (heading_depth)

  01cd8	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  01cdb	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv1441[ebp], eax
  01ce1	83 bd 50 ff ff
	ff 04		 cmp	 DWORD PTR tv1441[ebp], 4
  01ce8	74 0b		 je	 SHORT $LN317@draw_weapo
  01cea	83 bd 50 ff ff
	ff 05		 cmp	 DWORD PTR tv1441[ebp], 5
  01cf1	74 1b		 je	 SHORT $LN318@draw_weapo
  01cf3	eb 33		 jmp	 SHORT $LN316@draw_weapo
$LN317@draw_weapo:

; 7144 : 				{
; 7145 : 					case APACHE_LHS_WING_TIP_MOUNT:
; 7146 : 					{
; 7147 : 						draw_sprite (6, 144, 368, 61, 17, 33);

  01cf5	6a 21		 push	 33			; 00000021H
  01cf7	6a 11		 push	 17			; 00000011H
  01cf9	6a 3d		 push	 61			; 0000003dH
  01cfb	68 70 01 00 00	 push	 368			; 00000170H
  01d00	68 90 00 00 00	 push	 144			; 00000090H
  01d05	6a 06		 push	 6
  01d07	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7148 : 
; 7149 : 						break;

  01d0c	eb 1a		 jmp	 SHORT $LN316@draw_weapo
$LN318@draw_weapo:

; 7150 : 					}
; 7151 : 					case APACHE_RHS_WING_TIP_MOUNT:
; 7152 : 					{
; 7153 : 						draw_sprite (241, 144, 368, 61, 17, 33);

  01d0e	6a 21		 push	 33			; 00000021H
  01d10	6a 11		 push	 17			; 00000011H
  01d12	6a 3d		 push	 61			; 0000003dH
  01d14	68 70 01 00 00	 push	 368			; 00000170H
  01d19	68 90 00 00 00	 push	 144			; 00000090H
  01d1e	68 f1 00 00 00	 push	 241			; 000000f1H
  01d23	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN316@draw_weapo:

; 7154 : 
; 7155 : 						break;
; 7156 : 					}
; 7157 : 				}
; 7158 : 			}
; 7159 : 		}
; 7160 : 		else

  01d28	e9 c2 02 00 00	 jmp	 $LN287@draw_weapo
$LN288@draw_weapo:

; 7161 : 		{
; 7162 : 			////////////////////////////////////////
; 7163 : 			//
; 7164 : 			// SMALL
; 7165 : 			//
; 7166 : 			////////////////////////////////////////
; 7167 : 
; 7168 : 			//
; 7169 : 			// missiles
; 7170 : 			//
; 7171 : 
; 7172 : 			switch (heading_depth)

  01d2d	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  01d30	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv1456[ebp], eax
  01d36	83 bd 50 ff ff
	ff 04		 cmp	 DWORD PTR tv1456[ebp], 4
  01d3d	74 12		 je	 SHORT $LN319@draw_weapo
  01d3f	83 bd 50 ff ff
	ff 05		 cmp	 DWORD PTR tv1456[ebp], 5
  01d46	0f 84 2a 01 00
	00		 je	 $LN332@draw_weapo
  01d4c	e9 45 02 00 00	 jmp	 $LN34@draw_weapo
$LN319@draw_weapo:

; 7173 : 			{
; 7174 : 				case APACHE_LHS_WING_TIP_MOUNT:
; 7175 : 				{
; 7176 : 					if (number > 1)

  01d51	83 7d ac 01	 cmp	 DWORD PTR _number$[ebp], 1
  01d55	7e 46		 jle	 SHORT $LN320@draw_weapo

; 7177 : 					{
; 7178 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01d57	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01d5a	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01d5d	75 22		 jne	 SHORT $LN322@draw_weapo
  01d5f	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01d63	75 1c		 jne	 SHORT $LN322@draw_weapo

; 7179 : 						{
; 7180 : 							draw_sprite (5, 332, 142, 290, 8, 8);

  01d65	6a 08		 push	 8
  01d67	6a 08		 push	 8
  01d69	68 22 01 00 00	 push	 290			; 00000122H
  01d6e	68 8e 00 00 00	 push	 142			; 0000008eH
  01d73	68 4c 01 00 00	 push	 332			; 0000014cH
  01d78	6a 05		 push	 5
  01d7a	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7181 : 						}
; 7182 : 						else

  01d7f	eb 1a		 jmp	 SHORT $LN323@draw_weapo
$LN322@draw_weapo:

; 7183 : 						{
; 7184 : 							draw_sprite (5, 332, 160, 290, 8, 8);

  01d81	6a 08		 push	 8
  01d83	6a 08		 push	 8
  01d85	68 22 01 00 00	 push	 290			; 00000122H
  01d8a	68 a0 00 00 00	 push	 160			; 000000a0H
  01d8f	68 4c 01 00 00	 push	 332			; 0000014cH
  01d94	6a 05		 push	 5
  01d96	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN323@draw_weapo:

; 7185 : 						}
; 7186 : 					}
; 7187 : 					else

  01d9b	eb 44		 jmp	 SHORT $LN321@draw_weapo
$LN320@draw_weapo:

; 7188 : 					{
; 7189 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01d9d	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01da0	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01da3	75 22		 jne	 SHORT $LN324@draw_weapo
  01da5	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01da9	75 1c		 jne	 SHORT $LN324@draw_weapo

; 7190 : 						{
; 7191 : 							draw_sprite (5, 332, 133, 290, 8, 8);

  01dab	6a 08		 push	 8
  01dad	6a 08		 push	 8
  01daf	68 22 01 00 00	 push	 290			; 00000122H
  01db4	68 85 00 00 00	 push	 133			; 00000085H
  01db9	68 4c 01 00 00	 push	 332			; 0000014cH
  01dbe	6a 05		 push	 5
  01dc0	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7192 : 						}
; 7193 : 						else

  01dc5	eb 1a		 jmp	 SHORT $LN321@draw_weapo
$LN324@draw_weapo:

; 7194 : 						{
; 7195 : 							draw_sprite (5, 332, 151, 290, 8, 8);

  01dc7	6a 08		 push	 8
  01dc9	6a 08		 push	 8
  01dcb	68 22 01 00 00	 push	 290			; 00000122H
  01dd0	68 97 00 00 00	 push	 151			; 00000097H
  01dd5	68 4c 01 00 00	 push	 332			; 0000014cH
  01dda	6a 05		 push	 5
  01ddc	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN321@draw_weapo:

; 7196 : 						}
; 7197 : 					}
; 7198 : 
; 7199 : 					if (number > 0)

  01de1	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  01de5	7e 46		 jle	 SHORT $LN326@draw_weapo

; 7200 : 					{
; 7201 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01de7	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01dea	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01ded	75 22		 jne	 SHORT $LN328@draw_weapo
  01def	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01df3	75 1c		 jne	 SHORT $LN328@draw_weapo

; 7202 : 						{
; 7203 : 							draw_sprite (5, 340, 142, 290, 8, 8);

  01df5	6a 08		 push	 8
  01df7	6a 08		 push	 8
  01df9	68 22 01 00 00	 push	 290			; 00000122H
  01dfe	68 8e 00 00 00	 push	 142			; 0000008eH
  01e03	68 54 01 00 00	 push	 340			; 00000154H
  01e08	6a 05		 push	 5
  01e0a	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7204 : 						}
; 7205 : 						else

  01e0f	eb 1a		 jmp	 SHORT $LN329@draw_weapo
$LN328@draw_weapo:

; 7206 : 						{
; 7207 : 							draw_sprite (5, 340, 160, 290, 8, 8);

  01e11	6a 08		 push	 8
  01e13	6a 08		 push	 8
  01e15	68 22 01 00 00	 push	 290			; 00000122H
  01e1a	68 a0 00 00 00	 push	 160			; 000000a0H
  01e1f	68 54 01 00 00	 push	 340			; 00000154H
  01e24	6a 05		 push	 5
  01e26	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN329@draw_weapo:

; 7208 : 						}
; 7209 : 					}
; 7210 : 					else

  01e2b	eb 44		 jmp	 SHORT $LN327@draw_weapo
$LN326@draw_weapo:

; 7211 : 					{
; 7212 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01e2d	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01e30	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01e33	75 22		 jne	 SHORT $LN330@draw_weapo
  01e35	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01e39	75 1c		 jne	 SHORT $LN330@draw_weapo

; 7213 : 						{
; 7214 : 							draw_sprite (5, 340, 133, 290, 8, 8);

  01e3b	6a 08		 push	 8
  01e3d	6a 08		 push	 8
  01e3f	68 22 01 00 00	 push	 290			; 00000122H
  01e44	68 85 00 00 00	 push	 133			; 00000085H
  01e49	68 54 01 00 00	 push	 340			; 00000154H
  01e4e	6a 05		 push	 5
  01e50	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7215 : 						}
; 7216 : 						else

  01e55	eb 1a		 jmp	 SHORT $LN327@draw_weapo
$LN330@draw_weapo:

; 7217 : 						{
; 7218 : 							draw_sprite (5, 340, 151, 290, 8, 8);

  01e57	6a 08		 push	 8
  01e59	6a 08		 push	 8
  01e5b	68 22 01 00 00	 push	 290			; 00000122H
  01e60	68 97 00 00 00	 push	 151			; 00000097H
  01e65	68 54 01 00 00	 push	 340			; 00000154H
  01e6a	6a 05		 push	 5
  01e6c	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN327@draw_weapo:

; 7219 : 						}
; 7220 : 					}
; 7221 : 
; 7222 : 					break;

  01e71	e9 20 01 00 00	 jmp	 $LN34@draw_weapo
$LN332@draw_weapo:

; 7223 : 				}
; 7224 : 				case APACHE_RHS_WING_TIP_MOUNT:
; 7225 : 				{
; 7226 : 					if (number > 1)

  01e76	83 7d ac 01	 cmp	 DWORD PTR _number$[ebp], 1
  01e7a	7e 46		 jle	 SHORT $LN333@draw_weapo

; 7227 : 					{
; 7228 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01e7c	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01e7f	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01e82	75 22		 jne	 SHORT $LN335@draw_weapo
  01e84	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01e88	75 1c		 jne	 SHORT $LN335@draw_weapo

; 7229 : 						{
; 7230 : 							draw_sprite (123, 332, 142, 290, 8, 8);

  01e8a	6a 08		 push	 8
  01e8c	6a 08		 push	 8
  01e8e	68 22 01 00 00	 push	 290			; 00000122H
  01e93	68 8e 00 00 00	 push	 142			; 0000008eH
  01e98	68 4c 01 00 00	 push	 332			; 0000014cH
  01e9d	6a 7b		 push	 123			; 0000007bH
  01e9f	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7231 : 						}
; 7232 : 						else

  01ea4	eb 1a		 jmp	 SHORT $LN336@draw_weapo
$LN335@draw_weapo:

; 7233 : 						{
; 7234 : 							draw_sprite (123, 332, 160, 290, 8, 8);

  01ea6	6a 08		 push	 8
  01ea8	6a 08		 push	 8
  01eaa	68 22 01 00 00	 push	 290			; 00000122H
  01eaf	68 a0 00 00 00	 push	 160			; 000000a0H
  01eb4	68 4c 01 00 00	 push	 332			; 0000014cH
  01eb9	6a 7b		 push	 123			; 0000007bH
  01ebb	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN336@draw_weapo:

; 7235 : 						}
; 7236 : 					}
; 7237 : 					else

  01ec0	eb 44		 jmp	 SHORT $LN334@draw_weapo
$LN333@draw_weapo:

; 7238 : 					{
; 7239 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01ec2	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01ec5	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01ec8	75 22		 jne	 SHORT $LN337@draw_weapo
  01eca	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01ece	75 1c		 jne	 SHORT $LN337@draw_weapo

; 7240 : 						{
; 7241 : 							draw_sprite (123, 332, 133, 290, 8, 8);

  01ed0	6a 08		 push	 8
  01ed2	6a 08		 push	 8
  01ed4	68 22 01 00 00	 push	 290			; 00000122H
  01ed9	68 85 00 00 00	 push	 133			; 00000085H
  01ede	68 4c 01 00 00	 push	 332			; 0000014cH
  01ee3	6a 7b		 push	 123			; 0000007bH
  01ee5	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7242 : 						}
; 7243 : 						else

  01eea	eb 1a		 jmp	 SHORT $LN334@draw_weapo
$LN337@draw_weapo:

; 7244 : 						{
; 7245 : 							draw_sprite (123, 332, 151, 290, 8, 8);

  01eec	6a 08		 push	 8
  01eee	6a 08		 push	 8
  01ef0	68 22 01 00 00	 push	 290			; 00000122H
  01ef5	68 97 00 00 00	 push	 151			; 00000097H
  01efa	68 4c 01 00 00	 push	 332			; 0000014cH
  01eff	6a 7b		 push	 123			; 0000007bH
  01f01	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN334@draw_weapo:

; 7246 : 						}
; 7247 : 					}
; 7248 : 
; 7249 : 					if (number > 0)

  01f06	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  01f0a	7e 46		 jle	 SHORT $LN339@draw_weapo

; 7250 : 					{
; 7251 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01f0c	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01f0f	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01f12	75 22		 jne	 SHORT $LN341@draw_weapo
  01f14	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01f18	75 1c		 jne	 SHORT $LN341@draw_weapo

; 7252 : 						{
; 7253 : 							draw_sprite (123, 340, 142, 290, 8, 8);

  01f1a	6a 08		 push	 8
  01f1c	6a 08		 push	 8
  01f1e	68 22 01 00 00	 push	 290			; 00000122H
  01f23	68 8e 00 00 00	 push	 142			; 0000008eH
  01f28	68 54 01 00 00	 push	 340			; 00000154H
  01f2d	6a 7b		 push	 123			; 0000007bH
  01f2f	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7254 : 						}
; 7255 : 						else

  01f34	eb 1a		 jmp	 SHORT $LN342@draw_weapo
$LN341@draw_weapo:

; 7256 : 						{
; 7257 : 							draw_sprite (123, 340, 160, 290, 8, 8);

  01f36	6a 08		 push	 8
  01f38	6a 08		 push	 8
  01f3a	68 22 01 00 00	 push	 290			; 00000122H
  01f3f	68 a0 00 00 00	 push	 160			; 000000a0H
  01f44	68 54 01 00 00	 push	 340			; 00000154H
  01f49	6a 7b		 push	 123			; 0000007bH
  01f4b	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN342@draw_weapo:

; 7258 : 						}
; 7259 : 					}
; 7260 : 					else

  01f50	eb 44		 jmp	 SHORT $LN34@draw_weapo
$LN339@draw_weapo:

; 7261 : 					{
; 7262 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01f52	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01f55	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01f58	75 22		 jne	 SHORT $LN343@draw_weapo
  01f5a	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01f5e	75 1c		 jne	 SHORT $LN343@draw_weapo

; 7263 : 						{
; 7264 : 							draw_sprite (123, 340, 133, 290, 8, 8);

  01f60	6a 08		 push	 8
  01f62	6a 08		 push	 8
  01f64	68 22 01 00 00	 push	 290			; 00000122H
  01f69	68 85 00 00 00	 push	 133			; 00000085H
  01f6e	68 54 01 00 00	 push	 340			; 00000154H
  01f73	6a 7b		 push	 123			; 0000007bH
  01f75	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7265 : 						}
; 7266 : 						else

  01f7a	eb 1a		 jmp	 SHORT $LN34@draw_weapo
$LN343@draw_weapo:

; 7267 : 						{
; 7268 : 							draw_sprite (123, 340, 151, 290, 8, 8);

  01f7c	6a 08		 push	 8
  01f7e	6a 08		 push	 8
  01f80	68 22 01 00 00	 push	 290			; 00000122H
  01f85	68 97 00 00 00	 push	 151			; 00000097H
  01f8a	68 54 01 00 00	 push	 340			; 00000154H
  01f8f	6a 7b		 push	 123			; 0000007bH
  01f91	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN34@draw_weapo:

; 7269 : 						}
; 7270 : 					}
; 7271 : 
; 7272 : 					break;
; 7273 : 				}
; 7274 : 			}
; 7275 : 
; 7276 : 			//
; 7277 : 			// damage cross
; 7278 : 			//
; 7279 : 
; 7280 : 			if (damaged)

  01f96	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01f9a	74 53		 je	 SHORT $LN287@draw_weapo

; 7281 : 			{
; 7282 : 				switch (heading_depth)

  01f9c	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  01f9f	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv1576[ebp], eax
  01fa5	83 bd 50 ff ff
	ff 04		 cmp	 DWORD PTR tv1576[ebp], 4
  01fac	74 0b		 je	 SHORT $LN346@draw_weapo
  01fae	83 bd 50 ff ff
	ff 05		 cmp	 DWORD PTR tv1576[ebp], 5
  01fb5	74 1e		 je	 SHORT $LN347@draw_weapo
  01fb7	eb 36		 jmp	 SHORT $LN287@draw_weapo
$LN346@draw_weapo:

; 7283 : 				{
; 7284 : 					case APACHE_LHS_WING_TIP_MOUNT:
; 7285 : 					{
; 7286 : 						draw_sprite (5, 332, 186, 290, 8, 17);

  01fb9	6a 11		 push	 17			; 00000011H
  01fbb	6a 08		 push	 8
  01fbd	68 22 01 00 00	 push	 290			; 00000122H
  01fc2	68 ba 00 00 00	 push	 186			; 000000baH
  01fc7	68 4c 01 00 00	 push	 332			; 0000014cH
  01fcc	6a 05		 push	 5
  01fce	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7287 : 
; 7288 : 						break;

  01fd3	eb 1a		 jmp	 SHORT $LN287@draw_weapo
$LN347@draw_weapo:

; 7289 : 					}
; 7290 : 					case APACHE_RHS_WING_TIP_MOUNT:
; 7291 : 					{
; 7292 : 						draw_sprite (122, 332, 186, 290, 8, 17);

  01fd5	6a 11		 push	 17			; 00000011H
  01fd7	6a 08		 push	 8
  01fd9	68 22 01 00 00	 push	 290			; 00000122H
  01fde	68 ba 00 00 00	 push	 186			; 000000baH
  01fe3	68 4c 01 00 00	 push	 332			; 0000014cH
  01fe8	6a 7a		 push	 122			; 0000007aH
  01fea	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN287@draw_weapo:

; 7293 : 
; 7294 : 						break;
; 7295 : 					}
; 7296 : 				}
; 7297 : 			}
; 7298 : 		}
; 7299 : 	}
; 7300 : 
; 7301 : 	////////////////////////////////////////////////////////////////////////////////
; 7302 : 	//
; 7303 : 	// Chaff
; 7304 : 	//
; 7305 : 	////////////////////////////////////////////////////////////////////////////////
; 7306 : 
; 7307 : 	if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_CHAFF)

  01fef	83 7d 94 43	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 67 ; 00000043H
  01ff3	0f 85 1c 02 00
	00		 jne	 $LN348@draw_weapo

; 7308 : 	{
; 7309 : 		if (draw_large_mfd)

  01ff9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02000	0f 84 07 01 00
	00		 je	 $LN349@draw_weapo

; 7310 : 		{
; 7311 : 			////////////////////////////////////////
; 7312 : 			//
; 7313 : 			// LARGE
; 7314 : 			//
; 7315 : 			////////////////////////////////////////
; 7316 : 
; 7317 : 			//
; 7318 : 			// digits
; 7319 : 			//
; 7320 : 
; 7321 : 			if ((number > 0) && (!damaged))

  02006	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  0200a	7e 26		 jle	 SHORT $LN351@draw_weapo
  0200c	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  02010	75 20		 jne	 SHORT $LN351@draw_weapo

; 7322 : 			{
; 7323 : 				draw_sprite (94, 160, 483, 3, 18, 14);

  02012	6a 0e		 push	 14			; 0000000eH
  02014	6a 12		 push	 18			; 00000012H
  02016	6a 03		 push	 3
  02018	68 e3 01 00 00	 push	 483			; 000001e3H
  0201d	68 a0 00 00 00	 push	 160			; 000000a0H
  02022	6a 5e		 push	 94			; 0000005eH
  02024	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7324 : 
; 7325 : 				v = 32;

  02029	c7 45 98 20 00
	00 00		 mov	 DWORD PTR _v$[ebp], 32	; 00000020H

; 7326 : 			}
; 7327 : 			else

  02030	eb 07		 jmp	 SHORT $LN352@draw_weapo
$LN351@draw_weapo:

; 7328 : 			{
; 7329 : 				v = 47;

  02032	c7 45 98 2f 00
	00 00		 mov	 DWORD PTR _v$[ebp], 47	; 0000002fH
$LN352@draw_weapo:

; 7330 : 			}
; 7331 : 
; 7332 : 			sprintf (buffer, "%02d", number);

  02039	8b 45 ac	 mov	 eax, DWORD PTR _number$[ebp]
  0203c	50		 push	 eax
  0203d	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  02042	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  02045	51		 push	 ecx
  02046	e8 00 00 00 00	 call	 _sprintf
  0204b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7333 : 
; 7334 : 			if (buffer[0] == '0')

  0204e	b8 01 00 00 00	 mov	 eax, 1
  02053	6b c8 00	 imul	 ecx, eax, 0
  02056	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  0205b	83 fa 30	 cmp	 edx, 48			; 00000030H
  0205e	75 09		 jne	 SHORT $LN353@draw_weapo

; 7335 : 			{
; 7336 : 				u = 364 + (9 * 10);

  02060	c7 45 9c c6 01
	00 00		 mov	 DWORD PTR _u$[ebp], 454	; 000001c6H

; 7337 : 			}
; 7338 : 			else

  02067	eb 1b		 jmp	 SHORT $LN354@draw_weapo
$LN353@draw_weapo:

; 7339 : 			{
; 7340 : 				u = 364 + ((buffer[0] - '1') * 10);

  02069	b8 01 00 00 00	 mov	 eax, 1
  0206e	6b c8 00	 imul	 ecx, eax, 0
  02071	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  02076	83 ea 31	 sub	 edx, 49			; 00000031H
  02079	6b c2 0a	 imul	 eax, edx, 10
  0207c	05 6c 01 00 00	 add	 eax, 364		; 0000016cH
  02081	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN354@draw_weapo:

; 7341 : 			}
; 7342 : 
; 7343 : 			draw_sprite (112, 161, u, v, 8, 12);

  02084	6a 0c		 push	 12			; 0000000cH
  02086	6a 08		 push	 8
  02088	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  0208b	50		 push	 eax
  0208c	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  0208f	51		 push	 ecx
  02090	68 a1 00 00 00	 push	 161			; 000000a1H
  02095	6a 70		 push	 112			; 00000070H
  02097	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7344 : 
; 7345 : 			if (buffer[1] == '0')

  0209c	b8 01 00 00 00	 mov	 eax, 1
  020a1	c1 e0 00	 shl	 eax, 0
  020a4	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  020a9	83 f9 30	 cmp	 ecx, 48			; 00000030H
  020ac	75 09		 jne	 SHORT $LN355@draw_weapo

; 7346 : 			{
; 7347 : 				u = 364 + (9 * 10);

  020ae	c7 45 9c c6 01
	00 00		 mov	 DWORD PTR _u$[ebp], 454	; 000001c6H

; 7348 : 			}
; 7349 : 			else

  020b5	eb 1c		 jmp	 SHORT $LN356@draw_weapo
$LN355@draw_weapo:

; 7350 : 			{
; 7351 : 				u = 364 + ((buffer[1] - '1') * 10);

  020b7	b8 01 00 00 00	 mov	 eax, 1
  020bc	c1 e0 00	 shl	 eax, 0
  020bf	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  020c4	83 e9 31	 sub	 ecx, 49			; 00000031H
  020c7	6b d1 0a	 imul	 edx, ecx, 10
  020ca	81 c2 6c 01 00
	00		 add	 edx, 364		; 0000016cH
  020d0	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN356@draw_weapo:

; 7352 : 			}
; 7353 : 
; 7354 : 			draw_sprite (121, 161, u, v, 8, 12);

  020d3	6a 0c		 push	 12			; 0000000cH
  020d5	6a 08		 push	 8
  020d7	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  020da	50		 push	 eax
  020db	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  020de	51		 push	 ecx
  020df	68 a1 00 00 00	 push	 161			; 000000a1H
  020e4	6a 79		 push	 121			; 00000079H
  020e6	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7355 : 
; 7356 : 			//
; 7357 : 			// damage cross
; 7358 : 			//
; 7359 : 
; 7360 : 			if (damaged)

  020eb	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  020ef	74 17		 je	 SHORT $LN357@draw_weapo

; 7361 : 			{
; 7362 : 				draw_sprite (96, 159, 387, 61, 33, 17);

  020f1	6a 11		 push	 17			; 00000011H
  020f3	6a 21		 push	 33			; 00000021H
  020f5	6a 3d		 push	 61			; 0000003dH
  020f7	68 83 01 00 00	 push	 387			; 00000183H
  020fc	68 9f 00 00 00	 push	 159			; 0000009fH
  02101	6a 60		 push	 96			; 00000060H
  02103	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN357@draw_weapo:

; 7363 : 			}
; 7364 : 		}
; 7365 : 		else

  02108	e9 08 01 00 00	 jmp	 $LN348@draw_weapo
$LN349@draw_weapo:

; 7366 : 		{
; 7367 : 			////////////////////////////////////////
; 7368 : 			//
; 7369 : 			// SMALL
; 7370 : 			//
; 7371 : 			////////////////////////////////////////
; 7372 : 
; 7373 : 			//
; 7374 : 			// digits
; 7375 : 			//
; 7376 : 
; 7377 : 			if ((number > 0) && (!damaged))

  0210d	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  02111	7e 29		 jle	 SHORT $LN358@draw_weapo
  02113	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  02117	75 23		 jne	 SHORT $LN358@draw_weapo

; 7378 : 			{
; 7379 : 				draw_sprite (49, 340, 243, 261, 9, 7);

  02119	6a 07		 push	 7
  0211b	6a 09		 push	 9
  0211d	68 05 01 00 00	 push	 261			; 00000105H
  02122	68 f3 00 00 00	 push	 243			; 000000f3H
  02127	68 54 01 00 00	 push	 340			; 00000154H
  0212c	6a 31		 push	 49			; 00000031H
  0212e	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7380 : 
; 7381 : 				v = 276;

  02133	c7 45 98 14 01
	00 00		 mov	 DWORD PTR _v$[ebp], 276	; 00000114H

; 7382 : 			}
; 7383 : 			else

  0213a	eb 07		 jmp	 SHORT $LN359@draw_weapo
$LN358@draw_weapo:

; 7384 : 			{
; 7385 : 				v = 283;

  0213c	c7 45 98 1b 01
	00 00		 mov	 DWORD PTR _v$[ebp], 283	; 0000011bH
$LN359@draw_weapo:

; 7386 : 			}
; 7387 : 
; 7388 : 			sprintf (buffer, "%02d", number);

  02143	8b 45 ac	 mov	 eax, DWORD PTR _number$[ebp]
  02146	50		 push	 eax
  02147	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  0214c	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0214f	51		 push	 ecx
  02150	e8 00 00 00 00	 call	 _sprintf
  02155	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7389 : 
; 7390 : 			if (buffer[0] == '0')

  02158	b8 01 00 00 00	 mov	 eax, 1
  0215d	6b c8 00	 imul	 ecx, eax, 0
  02160	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  02165	83 fa 30	 cmp	 edx, 48			; 00000030H
  02168	75 09		 jne	 SHORT $LN360@draw_weapo

; 7391 : 			{
; 7392 : 				u = 184 + (9 * 5);

  0216a	c7 45 9c e5 00
	00 00		 mov	 DWORD PTR _u$[ebp], 229	; 000000e5H

; 7393 : 			}
; 7394 : 			else

  02171	eb 1b		 jmp	 SHORT $LN361@draw_weapo
$LN360@draw_weapo:

; 7395 : 			{
; 7396 : 				u = 184 + ((buffer[0] - '1') * 5);

  02173	b8 01 00 00 00	 mov	 eax, 1
  02178	6b c8 00	 imul	 ecx, eax, 0
  0217b	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  02180	83 ea 31	 sub	 edx, 49			; 00000031H
  02183	6b c2 05	 imul	 eax, edx, 5
  02186	05 b8 00 00 00	 add	 eax, 184		; 000000b8H
  0218b	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN361@draw_weapo:

; 7397 : 			}
; 7398 : 
; 7399 : 			draw_sprite (58, 341, u, v, 4, 6);

  0218e	6a 06		 push	 6
  02190	6a 04		 push	 4
  02192	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  02195	50		 push	 eax
  02196	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  02199	51		 push	 ecx
  0219a	68 55 01 00 00	 push	 341			; 00000155H
  0219f	6a 3a		 push	 58			; 0000003aH
  021a1	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7400 : 
; 7401 : 			if (buffer[1] == '0')

  021a6	b8 01 00 00 00	 mov	 eax, 1
  021ab	c1 e0 00	 shl	 eax, 0
  021ae	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  021b3	83 f9 30	 cmp	 ecx, 48			; 00000030H
  021b6	75 09		 jne	 SHORT $LN362@draw_weapo

; 7402 : 			{
; 7403 : 				u = 184 + (9 * 5);

  021b8	c7 45 9c e5 00
	00 00		 mov	 DWORD PTR _u$[ebp], 229	; 000000e5H

; 7404 : 			}
; 7405 : 			else

  021bf	eb 1c		 jmp	 SHORT $LN363@draw_weapo
$LN362@draw_weapo:

; 7406 : 			{
; 7407 : 				u = 184 + ((buffer[1] - '1') * 5);

  021c1	b8 01 00 00 00	 mov	 eax, 1
  021c6	c1 e0 00	 shl	 eax, 0
  021c9	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  021ce	83 e9 31	 sub	 ecx, 49			; 00000031H
  021d1	6b d1 05	 imul	 edx, ecx, 5
  021d4	81 c2 b8 00 00
	00		 add	 edx, 184		; 000000b8H
  021da	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN363@draw_weapo:

; 7408 : 			}
; 7409 : 
; 7410 : 			draw_sprite (62, 341, u, v, 4, 6);

  021dd	6a 06		 push	 6
  021df	6a 04		 push	 4
  021e1	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  021e4	50		 push	 eax
  021e5	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  021e8	51		 push	 ecx
  021e9	68 55 01 00 00	 push	 341			; 00000155H
  021ee	6a 3e		 push	 62			; 0000003eH
  021f0	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7411 : 
; 7412 : 			//
; 7413 : 			// damage cross
; 7414 : 			//
; 7415 : 
; 7416 : 			if (damaged)

  021f5	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  021f9	74 1a		 je	 SHORT $LN348@draw_weapo

; 7417 : 			{
; 7418 : 				draw_sprite (49, 339, 196, 290, 17, 9);

  021fb	6a 09		 push	 9
  021fd	6a 11		 push	 17			; 00000011H
  021ff	68 22 01 00 00	 push	 290			; 00000122H
  02204	68 c4 00 00 00	 push	 196			; 000000c4H
  02209	68 53 01 00 00	 push	 339			; 00000153H
  0220e	6a 31		 push	 49			; 00000031H
  02210	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN348@draw_weapo:

; 7419 : 			}
; 7420 : 		}
; 7421 : 	}
; 7422 : 
; 7423 : 	////////////////////////////////////////////////////////////////////////////////
; 7424 : 	//
; 7425 : 	// Flare
; 7426 : 	//
; 7427 : 	////////////////////////////////////////////////////////////////////////////////
; 7428 : 
; 7429 : 	if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_FLARE)

  02215	83 7d 94 44	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 68 ; 00000044H
  02219	0f 85 28 02 00
	00		 jne	 $LN1@draw_weapo

; 7430 : 	{
; 7431 : 		if (draw_large_mfd)

  0221f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02226	0f 84 13 01 00
	00		 je	 $LN366@draw_weapo

; 7432 : 		{
; 7433 : 			////////////////////////////////////////
; 7434 : 			//
; 7435 : 			// LARGE
; 7436 : 			//
; 7437 : 			////////////////////////////////////////
; 7438 : 
; 7439 : 			//
; 7440 : 			// digits
; 7441 : 			//
; 7442 : 
; 7443 : 			if ((number > 0) && (!damaged))

  0222c	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  02230	7e 29		 jle	 SHORT $LN368@draw_weapo
  02232	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  02236	75 23		 jne	 SHORT $LN368@draw_weapo

; 7444 : 			{
; 7445 : 				draw_sprite (134, 160, 503, 3, 15, 14);

  02238	6a 0e		 push	 14			; 0000000eH
  0223a	6a 0f		 push	 15			; 0000000fH
  0223c	6a 03		 push	 3
  0223e	68 f7 01 00 00	 push	 503			; 000001f7H
  02243	68 a0 00 00 00	 push	 160			; 000000a0H
  02248	68 86 00 00 00	 push	 134			; 00000086H
  0224d	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7446 : 
; 7447 : 				v = 32;

  02252	c7 45 98 20 00
	00 00		 mov	 DWORD PTR _v$[ebp], 32	; 00000020H

; 7448 : 			}
; 7449 : 			else

  02259	eb 07		 jmp	 SHORT $LN369@draw_weapo
$LN368@draw_weapo:

; 7450 : 			{
; 7451 : 				v = 47;

  0225b	c7 45 98 2f 00
	00 00		 mov	 DWORD PTR _v$[ebp], 47	; 0000002fH
$LN369@draw_weapo:

; 7452 : 			}
; 7453 : 
; 7454 : 			sprintf (buffer, "%02d", number);

  02262	8b 45 ac	 mov	 eax, DWORD PTR _number$[ebp]
  02265	50		 push	 eax
  02266	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  0226b	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0226e	51		 push	 ecx
  0226f	e8 00 00 00 00	 call	 _sprintf
  02274	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7455 : 
; 7456 : 			if (buffer[0] == '0')

  02277	b8 01 00 00 00	 mov	 eax, 1
  0227c	6b c8 00	 imul	 ecx, eax, 0
  0227f	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  02284	83 fa 30	 cmp	 edx, 48			; 00000030H
  02287	75 09		 jne	 SHORT $LN370@draw_weapo

; 7457 : 			{
; 7458 : 				u = 364 + (9 * 10);

  02289	c7 45 9c c6 01
	00 00		 mov	 DWORD PTR _u$[ebp], 454	; 000001c6H

; 7459 : 			}
; 7460 : 			else

  02290	eb 1b		 jmp	 SHORT $LN371@draw_weapo
$LN370@draw_weapo:

; 7461 : 			{
; 7462 : 				u = 364 + ((buffer[0] - '1') * 10);

  02292	b8 01 00 00 00	 mov	 eax, 1
  02297	6b c8 00	 imul	 ecx, eax, 0
  0229a	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  0229f	83 ea 31	 sub	 edx, 49			; 00000031H
  022a2	6b c2 0a	 imul	 eax, edx, 10
  022a5	05 6c 01 00 00	 add	 eax, 364		; 0000016cH
  022aa	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN371@draw_weapo:

; 7463 : 			}
; 7464 : 
; 7465 : 			draw_sprite (149, 161, u, v, 8, 12);

  022ad	6a 0c		 push	 12			; 0000000cH
  022af	6a 08		 push	 8
  022b1	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  022b4	50		 push	 eax
  022b5	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  022b8	51		 push	 ecx
  022b9	68 a1 00 00 00	 push	 161			; 000000a1H
  022be	68 95 00 00 00	 push	 149			; 00000095H
  022c3	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7466 : 
; 7467 : 			if (buffer[1] == '0')

  022c8	b8 01 00 00 00	 mov	 eax, 1
  022cd	c1 e0 00	 shl	 eax, 0
  022d0	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  022d5	83 f9 30	 cmp	 ecx, 48			; 00000030H
  022d8	75 09		 jne	 SHORT $LN372@draw_weapo

; 7468 : 			{
; 7469 : 				u = 364 + (9 * 10);

  022da	c7 45 9c c6 01
	00 00		 mov	 DWORD PTR _u$[ebp], 454	; 000001c6H

; 7470 : 			}
; 7471 : 			else

  022e1	eb 1c		 jmp	 SHORT $LN373@draw_weapo
$LN372@draw_weapo:

; 7472 : 			{
; 7473 : 				u = 364 + ((buffer[1] - '1') * 10);

  022e3	b8 01 00 00 00	 mov	 eax, 1
  022e8	c1 e0 00	 shl	 eax, 0
  022eb	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  022f0	83 e9 31	 sub	 ecx, 49			; 00000031H
  022f3	6b d1 0a	 imul	 edx, ecx, 10
  022f6	81 c2 6c 01 00
	00		 add	 edx, 364		; 0000016cH
  022fc	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN373@draw_weapo:

; 7474 : 			}
; 7475 : 
; 7476 : 			draw_sprite (158, 161, u, v, 8, 12);

  022ff	6a 0c		 push	 12			; 0000000cH
  02301	6a 08		 push	 8
  02303	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  02306	50		 push	 eax
  02307	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  0230a	51		 push	 ecx
  0230b	68 a1 00 00 00	 push	 161			; 000000a1H
  02310	68 9e 00 00 00	 push	 158			; 0000009eH
  02315	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7477 : 
; 7478 : 			//
; 7479 : 			// damage cross
; 7480 : 			//
; 7481 : 
; 7482 : 			if (damaged)

  0231a	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0231e	74 1a		 je	 SHORT $LN374@draw_weapo

; 7483 : 			{
; 7484 : 				draw_sprite (135, 159, 387, 61, 33, 17);

  02320	6a 11		 push	 17			; 00000011H
  02322	6a 21		 push	 33			; 00000021H
  02324	6a 3d		 push	 61			; 0000003dH
  02326	68 83 01 00 00	 push	 387			; 00000183H
  0232b	68 9f 00 00 00	 push	 159			; 0000009fH
  02330	68 87 00 00 00	 push	 135			; 00000087H
  02335	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN374@draw_weapo:

; 7485 : 			}
; 7486 : 		}
; 7487 : 		else

  0233a	e9 08 01 00 00	 jmp	 $LN1@draw_weapo
$LN366@draw_weapo:

; 7488 : 		{
; 7489 : 			////////////////////////////////////////
; 7490 : 			//
; 7491 : 			// SMALL
; 7492 : 			//
; 7493 : 			////////////////////////////////////////
; 7494 : 
; 7495 : 			//
; 7496 : 			// digits
; 7497 : 			//
; 7498 : 
; 7499 : 			if ((number > 0) && (!damaged))

  0233f	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  02343	7e 29		 jle	 SHORT $LN375@draw_weapo
  02345	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  02349	75 23		 jne	 SHORT $LN375@draw_weapo

; 7500 : 			{
; 7501 : 				draw_sprite (69, 340, 253, 261, 8, 7);

  0234b	6a 07		 push	 7
  0234d	6a 08		 push	 8
  0234f	68 05 01 00 00	 push	 261			; 00000105H
  02354	68 fd 00 00 00	 push	 253			; 000000fdH
  02359	68 54 01 00 00	 push	 340			; 00000154H
  0235e	6a 45		 push	 69			; 00000045H
  02360	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7502 : 
; 7503 : 				v = 276;

  02365	c7 45 98 14 01
	00 00		 mov	 DWORD PTR _v$[ebp], 276	; 00000114H

; 7504 : 			}
; 7505 : 			else

  0236c	eb 07		 jmp	 SHORT $LN376@draw_weapo
$LN375@draw_weapo:

; 7506 : 			{
; 7507 : 				v = 283;

  0236e	c7 45 98 1b 01
	00 00		 mov	 DWORD PTR _v$[ebp], 283	; 0000011bH
$LN376@draw_weapo:

; 7508 : 			}
; 7509 : 
; 7510 : 			sprintf (buffer, "%02d", number);

  02375	8b 45 ac	 mov	 eax, DWORD PTR _number$[ebp]
  02378	50		 push	 eax
  02379	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  0237e	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  02381	51		 push	 ecx
  02382	e8 00 00 00 00	 call	 _sprintf
  02387	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7511 : 
; 7512 : 			if (buffer[0] == '0')

  0238a	b8 01 00 00 00	 mov	 eax, 1
  0238f	6b c8 00	 imul	 ecx, eax, 0
  02392	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  02397	83 fa 30	 cmp	 edx, 48			; 00000030H
  0239a	75 09		 jne	 SHORT $LN377@draw_weapo

; 7513 : 			{
; 7514 : 				u = 184 + (9 * 5);

  0239c	c7 45 9c e5 00
	00 00		 mov	 DWORD PTR _u$[ebp], 229	; 000000e5H

; 7515 : 			}
; 7516 : 			else

  023a3	eb 1b		 jmp	 SHORT $LN378@draw_weapo
$LN377@draw_weapo:

; 7517 : 			{
; 7518 : 				u = 184 + ((buffer[0] - '1') * 5);

  023a5	b8 01 00 00 00	 mov	 eax, 1
  023aa	6b c8 00	 imul	 ecx, eax, 0
  023ad	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  023b2	83 ea 31	 sub	 edx, 49			; 00000031H
  023b5	6b c2 05	 imul	 eax, edx, 5
  023b8	05 b8 00 00 00	 add	 eax, 184		; 000000b8H
  023bd	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN378@draw_weapo:

; 7519 : 			}
; 7520 : 
; 7521 : 			draw_sprite (77, 341, u, v, 4, 6);

  023c0	6a 06		 push	 6
  023c2	6a 04		 push	 4
  023c4	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  023c7	50		 push	 eax
  023c8	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  023cb	51		 push	 ecx
  023cc	68 55 01 00 00	 push	 341			; 00000155H
  023d1	6a 4d		 push	 77			; 0000004dH
  023d3	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7522 : 
; 7523 : 			if (buffer[1] == '0')

  023d8	b8 01 00 00 00	 mov	 eax, 1
  023dd	c1 e0 00	 shl	 eax, 0
  023e0	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  023e5	83 f9 30	 cmp	 ecx, 48			; 00000030H
  023e8	75 09		 jne	 SHORT $LN379@draw_weapo

; 7524 : 			{
; 7525 : 				u = 184 + (9 * 5);

  023ea	c7 45 9c e5 00
	00 00		 mov	 DWORD PTR _u$[ebp], 229	; 000000e5H

; 7526 : 			}
; 7527 : 			else

  023f1	eb 1c		 jmp	 SHORT $LN380@draw_weapo
$LN379@draw_weapo:

; 7528 : 			{
; 7529 : 				u = 184 + ((buffer[1] - '1') * 5);

  023f3	b8 01 00 00 00	 mov	 eax, 1
  023f8	c1 e0 00	 shl	 eax, 0
  023fb	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  02400	83 e9 31	 sub	 ecx, 49			; 00000031H
  02403	6b d1 05	 imul	 edx, ecx, 5
  02406	81 c2 b8 00 00
	00		 add	 edx, 184		; 000000b8H
  0240c	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN380@draw_weapo:

; 7530 : 			}
; 7531 : 
; 7532 : 			draw_sprite (81, 341, u, v, 4, 6);

  0240f	6a 06		 push	 6
  02411	6a 04		 push	 4
  02413	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  02416	50		 push	 eax
  02417	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  0241a	51		 push	 ecx
  0241b	68 55 01 00 00	 push	 341			; 00000155H
  02420	6a 51		 push	 81			; 00000051H
  02422	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7533 : 
; 7534 : 			//
; 7535 : 			// damage cross
; 7536 : 			//
; 7537 : 
; 7538 : 			if (damaged)

  02427	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0242b	74 1a		 je	 SHORT $LN1@draw_weapo

; 7539 : 			{
; 7540 : 				draw_sprite (69, 339, 196, 290, 17, 9);

  0242d	6a 09		 push	 9
  0242f	6a 11		 push	 17			; 00000011H
  02431	68 22 01 00 00	 push	 290			; 00000122H
  02436	68 c4 00 00 00	 push	 196			; 000000c4H
  0243b	68 53 01 00 00	 push	 339			; 00000153H
  02440	6a 45		 push	 69			; 00000045H
  02442	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN1@draw_weapo:

; 7541 : 			}
; 7542 : 		}
; 7543 : 	}
; 7544 : }

  02447	5f		 pop	 edi
  02448	5e		 pop	 esi
  02449	5b		 pop	 ebx
  0244a	8b e5		 mov	 esp, ebp
  0244c	5d		 pop	 ebp
  0244d	c2 0c 00	 ret	 12			; 0000000cH
$LN383@draw_weapo:
  02450	00 00 00 00	 DD	 $LN79@draw_weapo
  02454	00 00 00 00	 DD	 $LN80@draw_weapo
  02458	00 00 00 00	 DD	 $LN81@draw_weapo
  0245c	00 00 00 00	 DD	 $LN82@draw_weapo
$LN384@draw_weapo:
  02460	00 00 00 00	 DD	 $LN96@draw_weapo
  02464	00 00 00 00	 DD	 $LN97@draw_weapo
  02468	00 00 00 00	 DD	 $LN98@draw_weapo
  0246c	00 00 00 00	 DD	 $LN99@draw_weapo
$LN385@draw_weapo:
  02470	00 00 00 00	 DD	 $LN100@draw_weapo
  02474	00 00 00 00	 DD	 $LN101@draw_weapo
  02478	00 00 00 00	 DD	 $LN102@draw_weapo
  0247c	00 00 00 00	 DD	 $LN103@draw_weapo
$LN386@draw_weapo:
  02480	00 00 00 00	 DD	 $LN110@draw_weapo
  02484	00 00 00 00	 DD	 $LN111@draw_weapo
  02488	00 00 00 00	 DD	 $LN112@draw_weapo
  0248c	00 00 00 00	 DD	 $LN113@draw_weapo
$LN387@draw_weapo:
  02490	00 00 00 00	 DD	 $LN127@draw_weapo
  02494	00 00 00 00	 DD	 $LN128@draw_weapo
  02498	00 00 00 00	 DD	 $LN129@draw_weapo
  0249c	00 00 00 00	 DD	 $LN130@draw_weapo
$LN388@draw_weapo:
  024a0	00 00 00 00	 DD	 $LN131@draw_weapo
  024a4	00 00 00 00	 DD	 $LN132@draw_weapo
  024a8	00 00 00 00	 DD	 $LN133@draw_weapo
  024ac	00 00 00 00	 DD	 $LN134@draw_weapo
$LN389@draw_weapo:
  024b0	00 00 00 00	 DD	 $LN145@draw_weapo
  024b4	00 00 00 00	 DD	 $LN146@draw_weapo
  024b8	00 00 00 00	 DD	 $LN147@draw_weapo
  024bc	00 00 00 00	 DD	 $LN148@draw_weapo
$LN390@draw_weapo:
  024c0	00 00 00 00	 DD	 $LN151@draw_weapo
  024c4	00 00 00 00	 DD	 $LN176@draw_weapo
  024c8	00 00 00 00	 DD	 $LN151@draw_weapo
  024cc	00 00 00 00	 DD	 $LN176@draw_weapo
$LN391@draw_weapo:
  024d0	00 00 00 00	 DD	 $LN202@draw_weapo
  024d4	00 00 00 00	 DD	 $LN203@draw_weapo
  024d8	00 00 00 00	 DD	 $LN204@draw_weapo
  024dc	00 00 00 00	 DD	 $LN205@draw_weapo
$LN392@draw_weapo:
  024e0	00 00 00 00	 DD	 $LN206@draw_weapo
  024e4	00 00 00 00	 DD	 $LN207@draw_weapo
  024e8	00 00 00 00	 DD	 $LN208@draw_weapo
  024ec	00 00 00 00	 DD	 $LN209@draw_weapo
$LN393@draw_weapo:
  024f0	00 00 00 00	 DD	 $LN216@draw_weapo
  024f4	00 00 00 00	 DD	 $LN217@draw_weapo
  024f8	00 00 00 00	 DD	 $LN218@draw_weapo
  024fc	00 00 00 00	 DD	 $LN219@draw_weapo
$LN394@draw_weapo:
  02500	00 00 00 00	 DD	 $LN222@draw_weapo
  02504	00 00 00 00	 DD	 $LN247@draw_weapo
  02508	00 00 00 00	 DD	 $LN222@draw_weapo
  0250c	00 00 00 00	 DD	 $LN247@draw_weapo
$LN395@draw_weapo:
  02510	00 00 00 00	 DD	 $LN273@draw_weapo
  02514	00 00 00 00	 DD	 $LN274@draw_weapo
  02518	00 00 00 00	 DD	 $LN275@draw_weapo
  0251c	00 00 00 00	 DD	 $LN276@draw_weapo
$LN396@draw_weapo:
  02520	00 00 00 00	 DD	 $LN277@draw_weapo
  02524	00 00 00 00	 DD	 $LN278@draw_weapo
  02528	00 00 00 00	 DD	 $LN279@draw_weapo
  0252c	00 00 00 00	 DD	 $LN280@draw_weapo
?draw_weapon_hardpoint_info@@YGXHHH@Z ENDP		; draw_weapon_hardpoint_info
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_sprite@@YGXHHHHHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_u$ = 16						; size = 4
_v$ = 20						; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
?draw_sprite@@YGXHHHHHH@Z PROC				; draw_sprite, COMDAT

; 5621 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5622 : 	ASSERT (x >= 0);

  00009	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  0000d	7d 18		 jge	 SHORT $LN2@draw_sprit
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_sprite@@YGXHHHHHH@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06EBODONHD@x?5?$DO?$DN?50@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@draw_sprit:

; 5623 : 	ASSERT (y >= 0);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _y$[ebp], 0
  0002b	7d 18		 jge	 SHORT $LN3@draw_sprit
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_sprite@@YGXHHHHHH@Z@4JA
  00032	83 c0 02	 add	 eax, 2
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_06OHJEOGMH@y?5?$DO?$DN?50@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@draw_sprit:

; 5624 : 
; 5625 : 	weapon_sprite.x = weapon_x_offset + x;

  00045	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_x_offset@@3HA
  0004a	03 45 08	 add	 eax, DWORD PTR _x$[ebp]
  0004d	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A, eax

; 5626 : 
; 5627 : 	weapon_sprite.y = weapon_y_offset + y;

  00052	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_y_offset@@3HA
  00057	03 45 0c	 add	 eax, DWORD PTR _y$[ebp]
  0005a	a3 04 00 00 00	 mov	 DWORD PTR ?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A+4, eax

; 5628 : 
; 5629 : 	weapon_sprite.u = u;

  0005f	8b 45 10	 mov	 eax, DWORD PTR _u$[ebp]
  00062	a3 08 00 00 00	 mov	 DWORD PTR ?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A+8, eax

; 5630 : 
; 5631 : 	weapon_sprite.v = v;

  00067	8b 45 14	 mov	 eax, DWORD PTR _v$[ebp]
  0006a	a3 0c 00 00 00	 mov	 DWORD PTR ?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A+12, eax

; 5632 : 
; 5633 : 	weapon_sprite.width = width;

  0006f	8b 45 18	 mov	 eax, DWORD PTR _width$[ebp]
  00072	a3 10 00 00 00	 mov	 DWORD PTR ?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A+16, eax

; 5634 : 
; 5635 : 	weapon_sprite.height = height;

  00077	8b 45 1c	 mov	 eax, DWORD PTR _height$[ebp]
  0007a	a3 14 00 00 00	 mov	 DWORD PTR ?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A+20, eax

; 5636 : 
; 5637 : 	// JB 030311 Disable EEAH check
; 5638 : 	if (!weapon_sprite_data)

  0007f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?weapon_sprite_data@@3PAEA, 0
  00086	75 02		 jne	 SHORT $LN4@draw_sprit

; 5639 : 		return;

  00088	eb 40		 jmp	 SHORT $LN1@draw_sprit
$LN4@draw_sprit:

; 5640 : 
; 5641 : 	if (weapon_draw_on_texture)

  0008a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?weapon_draw_on_texture@@3HA, 0
  00091	74 20		 je	 SHORT $LN5@draw_sprit

; 5642 : 	{
; 5643 : 		blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture (weapon_sprite_data, weapon_mask_data, &weapon_sprite, video_screen);

  00093	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00098	50		 push	 eax
  00099	68 00 00 00 00	 push	 OFFSET ?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A
  0009e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_mask_data@@3PAEA
  000a4	51		 push	 ecx
  000a5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?weapon_sprite_data@@3PAEA
  000ab	52		 push	 edx
  000ac	e8 00 00 00 00	 call	 ?blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@PAUSCREEN@@@Z ; blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture

; 5644 : 	}
; 5645 : 	else

  000b1	eb 17		 jmp	 SHORT $LN1@draw_sprit
$LN5@draw_sprit:

; 5646 : 	{
; 5647 : 		blit_rgb_alpha_masked_sprite_zero_mask_value (weapon_sprite_data, weapon_mask_data, &weapon_sprite);

  000b3	68 00 00 00 00	 push	 OFFSET ?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A
  000b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_mask_data@@3PAEA
  000bd	50		 push	 eax
  000be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_sprite_data@@3PAEA
  000c4	51		 push	 ecx
  000c5	e8 00 00 00 00	 call	 ?blit_rgb_alpha_masked_sprite_zero_mask_value@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@@Z ; blit_rgb_alpha_masked_sprite_zero_mask_value
$LN1@draw_sprit:

; 5648 : 	}
; 5649 : }

  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c2 18 00	 ret	 24			; 00000018H
?draw_sprite@@YGXHHHHHH@Z ENDP				; draw_sprite
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_aircraft_survivability_equipment_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv1370 = -364						; size = 4
tv1076 = -360						; size = 4
tv1054 = -360						; size = 4
tv1026 = -360						; size = 4
tv1004 = -360						; size = 4
tv853 = -360						; size = 4
tv788 = -360						; size = 4
tv765 = -360						; size = 4
tv744 = -360						; size = 4
tv724 = -360						; size = 4
tv689 = -360						; size = 4
tv668 = -360						; size = 4
tv647 = -360						; size = 4
tv628 = -360						; size = 4
tv609 = -360						; size = 4
tv588 = -360						; size = 4
tv567 = -360						; size = 4
tv546 = -360						; size = 4
tv527 = -360						; size = 4
tv508 = -360						; size = 4
tv489 = -360						; size = 4
tv469 = -360						; size = 4
tv440 = -360						; size = 4
tv419 = -360						; size = 4
tv400 = -360						; size = 4
tv381 = -360						; size = 4
tv361 = -360						; size = 4
tv327 = -360						; size = 4
tv299 = -360						; size = 4
tv277 = -360						; size = 4
tv256 = -360						; size = 4
tv237 = -360						; size = 4
tv218 = -360						; size = 4
tv188 = -360						; size = 4
tv170 = -360						; size = 4
tv150 = -360						; size = 4
tv130 = -360						; size = 4
tv78 = -360						; size = 4
tv1069 = -356						; size = 4
tv1047 = -356						; size = 4
tv1019 = -356						; size = 4
tv997 = -356						; size = 4
tv845 = -356						; size = 4
tv780 = -356						; size = 4
tv757 = -356						; size = 4
tv736 = -356						; size = 4
tv716 = -356						; size = 4
tv681 = -356						; size = 4
tv660 = -356						; size = 4
tv640 = -356						; size = 4
tv621 = -356						; size = 4
tv601 = -356						; size = 4
tv581 = -356						; size = 4
tv559 = -356						; size = 4
tv539 = -356						; size = 4
tv520 = -356						; size = 4
tv501 = -356						; size = 4
tv481 = -356						; size = 4
tv461 = -356						; size = 4
tv432 = -356						; size = 4
tv412 = -356						; size = 4
tv393 = -356						; size = 4
tv373 = -356						; size = 4
tv353 = -356						; size = 4
tv319 = -356						; size = 4
tv291 = -356						; size = 4
tv269 = -356						; size = 4
tv249 = -356						; size = 4
tv230 = -356						; size = 4
tv210 = -356						; size = 4
tv181 = -356						; size = 4
tv162 = -356						; size = 4
tv142 = -356						; size = 4
tv90 = -356						; size = 4
tv70 = -356						; size = 4
_time_to_impact$1 = -288				; size = 4
_closest_missile$2 = -284				; size = 4
_dy$3 = -280						; size = 4
_dx$4 = -276						; size = 4
_air_scan_range$5 = -272				; size = 4
_draw_threat_line$6 = -268				; size = 4
_threat_type$7 = -264					; size = 4
_threat_position$8 = -260				; size = 4
_launched_weapon$9 = -256				; size = 4
_threat$10 = -252					; size = 4
_bg_colour$ = -248					; size = 4
_fg_colour$ = -244					; size = 4
_source_position$ = -240				; size = 4
_source_target$ = -236					; size = 4
_source$ = -232						; size = 4
_source_heading$ = -228					; size = 4
_y_adjust$ = -224					; size = 4
_width$ = -220						; size = 4
_scale$ = -216						; size = 4
_tsd_ase_range$ = -212					; size = 4
_source_side$ = -208					; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
?draw_aircraft_survivability_equipment_display_mfd@@YGXXZ PROC ; draw_aircraft_survivability_equipment_display_mfd, COMDAT

; 4970 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 6c 01 00
	00		 sub	 esp, 364		; 0000016cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 4971 : 	char
; 4972 : 		*s,
; 4973 : 		buffer[200];
; 4974 : 
; 4975 : 	entity_sides
; 4976 : 		source_side;
; 4977 : 
; 4978 : 	float
; 4979 : 		tsd_ase_range,
; 4980 : 		scale,
; 4981 : 		width,
; 4982 : 		y_adjust,
; 4983 : 		source_heading;
; 4984 : 
; 4985 : 	entity
; 4986 : 		*source,
; 4987 : 		*source_target;
; 4988 : 
; 4989 : 	vec3d
; 4990 : 		*source_position;
; 4991 : 
; 4992 : 	rgb_colour
; 4993 : 		fg_colour,
; 4994 : 		bg_colour;
; 4995 : 
; 4996 : 	source = get_gunship_entity ();

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00011	89 85 18 ff ff
	ff		 mov	 DWORD PTR _source$[ebp], eax

; 4997 : 
; 4998 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  00017	83 bd 18 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0001e	74 10		 je	 SHORT $LN104@draw_aircr
  00020	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]
  00028	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv70[ebp], ecx
  0002e	eb 24		 jmp	 SHORT $LN105@draw_aircr
$LN104@draw_aircr:
  00030	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00036	83 c2 1c	 add	 edx, 28			; 0000001cH
  00039	52		 push	 edx
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0004a	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN105@draw_aircr:
  00054	b9 01 00 00 00	 mov	 ecx, 1
  00059	85 c9		 test	 ecx, ecx
  0005b	74 0c		 je	 SHORT $LN106@draw_aircr
  0005d	c7 85 98 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv78[ebp], 187 ; 000000bbH
  00067	eb 24		 jmp	 SHORT $LN107@draw_aircr
$LN106@draw_aircr:
  00069	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  0006f	83 c2 1c	 add	 edx, 28			; 0000001cH
  00072	52		 push	 edx
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00078	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00083	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN107@draw_aircr:
  0008d	68 bb 00 00 00	 push	 187			; 000000bbH
  00092	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00098	51		 push	 ecx
  00099	69 95 9c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv70[ebp], 1116
  000a3	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv78[ebp]
  000a9	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000b0	ff d1		 call	 ecx
  000b2	89 85 30 ff ff
	ff		 mov	 DWORD PTR _source_side$[ebp], eax

; 4999 : 
; 5000 : 	source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  000b8	83 bd 18 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  000bf	74 10		 je	 SHORT $LN108@draw_aircr
  000c1	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  000c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c9	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  000cf	eb 24		 jmp	 SHORT $LN109@draw_aircr
$LN108@draw_aircr:
  000d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  000d7	83 c2 1e	 add	 edx, 30			; 0000001eH
  000da	52		 push	 edx
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000eb	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv90[ebp], 0
$LN109@draw_aircr:
  000f5	b9 01 00 00 00	 mov	 ecx, 1
  000fa	85 c9		 test	 ecx, ecx
  000fc	74 0c		 je	 SHORT $LN110@draw_aircr
  000fe	c7 85 98 fe ff
	ff 34 00 00 00	 mov	 DWORD PTR tv130[ebp], 52 ; 00000034H
  00108	eb 24		 jmp	 SHORT $LN111@draw_aircr
$LN110@draw_aircr:
  0010a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00110	83 c2 1e	 add	 edx, 30			; 0000001eH
  00113	52		 push	 edx
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00119	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00124	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv130[ebp], 0
$LN111@draw_aircr:
  0012e	6a 34		 push	 52			; 00000034H
  00130	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00136	51		 push	 ecx
  00137	69 95 9c fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv90[ebp], 700
  00141	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv130[ebp]
  00147	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0014e	ff d1		 call	 ecx
  00150	d9 9d 1c ff ff
	ff		 fstp	 DWORD PTR _source_heading$[ebp]

; 5001 : 
; 5002 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  00156	83 bd 18 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0015d	74 10		 je	 SHORT $LN112@draw_aircr
  0015f	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00165	8b 08		 mov	 ecx, DWORD PTR [eax]
  00167	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv142[ebp], ecx
  0016d	eb 24		 jmp	 SHORT $LN113@draw_aircr
$LN112@draw_aircr:
  0016f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00175	83 c2 20	 add	 edx, 32			; 00000020H
  00178	52		 push	 edx
  00179	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0017e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00183	50		 push	 eax
  00184	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00189	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv142[ebp], 0
$LN113@draw_aircr:
  00193	b9 01 00 00 00	 mov	 ecx, 1
  00198	85 c9		 test	 ecx, ecx
  0019a	74 0c		 je	 SHORT $LN114@draw_aircr
  0019c	c7 85 98 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv150[ebp], 8
  001a6	eb 24		 jmp	 SHORT $LN115@draw_aircr
$LN114@draw_aircr:
  001a8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  001ae	83 c2 20	 add	 edx, 32			; 00000020H
  001b1	52		 push	 edx
  001b2	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  001b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001bc	50		 push	 eax
  001bd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c2	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
$LN115@draw_aircr:
  001cc	6a 08		 push	 8
  001ce	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  001d4	51		 push	 ecx
  001d5	6b 95 9c fe ff
	ff 60		 imul	 edx, DWORD PTR tv142[ebp], 96
  001dc	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv150[ebp]
  001e2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  001e9	ff d1		 call	 ecx
  001eb	89 85 10 ff ff
	ff		 mov	 DWORD PTR _source_position$[ebp], eax

; 5003 : 
; 5004 : 	source_target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  001f1	83 bd 18 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  001f8	74 10		 je	 SHORT $LN116@draw_aircr
  001fa	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00200	8b 08		 mov	 ecx, DWORD PTR [eax]
  00202	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv162[ebp], ecx
  00208	eb 24		 jmp	 SHORT $LN117@draw_aircr
$LN116@draw_aircr:
  0020a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00210	83 c2 22	 add	 edx, 34			; 00000022H
  00213	52		 push	 edx
  00214	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00219	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0021e	50		 push	 eax
  0021f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00224	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv162[ebp], 0
$LN117@draw_aircr:
  0022e	b9 01 00 00 00	 mov	 ecx, 1
  00233	85 c9		 test	 ecx, ecx
  00235	74 0c		 je	 SHORT $LN118@draw_aircr
  00237	c7 85 98 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv170[ebp], 38 ; 00000026H
  00241	eb 24		 jmp	 SHORT $LN119@draw_aircr
$LN118@draw_aircr:
  00243	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00249	83 c2 22	 add	 edx, 34			; 00000022H
  0024c	52		 push	 edx
  0024d	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00252	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00257	50		 push	 eax
  00258	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0025d	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv170[ebp], 0
$LN119@draw_aircr:
  00267	6a 26		 push	 38			; 00000026H
  00269	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  0026f	51		 push	 ecx
  00270	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv162[ebp], 180
  0027a	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv170[ebp]
  00280	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00287	ff d1		 call	 ecx
  00289	89 85 14 ff ff
	ff		 mov	 DWORD PTR _source_target$[ebp], eax

; 5005 : 
; 5006 : 	if (get_local_entity_int_value (get_pilot_entity (), INT_TYPE_CREW_ROLE) == CREW_ROLE_PILOT)

  0028f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_entity@@3PAUENTITY@@A, 0 ; pilot_entity
  00296	74 0f		 je	 SHORT $LN120@draw_aircr
  00298	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  0029d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0029f	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv181[ebp], ecx
  002a5	eb 20		 jmp	 SHORT $LN121@draw_aircr
$LN120@draw_aircr:
  002a7	68 8e 13 00 00	 push	 5006			; 0000138eH
  002ac	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  002b1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002b7	52		 push	 edx
  002b8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002bd	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv181[ebp], 0
$LN121@draw_aircr:
  002c7	b8 01 00 00 00	 mov	 eax, 1
  002cc	85 c0		 test	 eax, eax
  002ce	74 0c		 je	 SHORT $LN122@draw_aircr
  002d0	c7 85 98 fe ff
	ff 23 00 00 00	 mov	 DWORD PTR tv188[ebp], 35 ; 00000023H
  002da	eb 20		 jmp	 SHORT $LN123@draw_aircr
$LN122@draw_aircr:
  002dc	68 8e 13 00 00	 push	 5006			; 0000138eH
  002e1	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  002e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  002ec	51		 push	 ecx
  002ed	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002f2	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv188[ebp], 0
$LN123@draw_aircr:
  002fc	6a 23		 push	 35			; 00000023H
  002fe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00304	52		 push	 edx
  00305	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv181[ebp], 1116
  0030f	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv188[ebp]
  00315	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0031c	ff d2		 call	 edx
  0031e	85 c0		 test	 eax, eax
  00320	75 12		 jne	 SHORT $LN12@draw_aircr

; 5007 : 		tsd_ase_range = pilot_tsd_ase_range;

  00322	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  0032a	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _tsd_ase_range$[ebp], xmm0

; 5008 : 	else

  00332	eb 10		 jmp	 SHORT $LN13@draw_aircr
$LN12@draw_aircr:

; 5009 : 		tsd_ase_range = cpg_tsd_ase_range;

  00334	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?cpg_tsd_ase_range@@3MA
  0033c	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _tsd_ase_range$[ebp], xmm0
$LN13@draw_aircr:

; 5010 : 
; 5011 : 	scale = RADIUS / tsd_ase_range;

  00344	f3 0f 5a 85 2c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _tsd_ase_range$[ebp]
  0034c	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fe999999999999a
  00354	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00358	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0035c	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _scale$[ebp], xmm0

; 5012 : 
; 5013 : 	////////////////////////////////////////
; 5014 : 	//
; 5015 : 	// threats
; 5016 : 	//
; 5017 : 	////////////////////////////////////////
; 5018 : 
; 5019 : 	{
; 5020 : 		entity
; 5021 : 			*threat,
; 5022 : 			*launched_weapon;
; 5023 : 
; 5024 : 		vec3d
; 5025 : 			*threat_position;
; 5026 : 
; 5027 : 		threat_types
; 5028 : 			threat_type;
; 5029 : 
; 5030 : 		int
; 5031 : 			draw_threat_line;
; 5032 : 
; 5033 : 		float
; 5034 : 			air_scan_range,
; 5035 : 			dx,
; 5036 : 			dy;
; 5037 : 
; 5038 : 		ase_threat_line_flash_timer -= get_delta_time ();

  00364	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ase_threat_line_flash_timer@@3MA
  0036c	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00374	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?ase_threat_line_flash_timer@@3MA, xmm0

; 5039 : 
; 5040 : 		if (ase_threat_line_flash_timer < 0.0)

  0037c	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ase_threat_line_flash_timer@@3MA
  00384	0f 57 c9	 xorps	 xmm1, xmm1
  00387	66 0f 2f c8	 comisd	 xmm1, xmm0
  0038b	76 1d		 jbe	 SHORT $LN14@draw_aircr

; 5041 : 		{
; 5042 : 			ase_threat_line_flash_timer = ASE_THREAT_LINE_FLASH_RATE;

  0038d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00395	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?ase_threat_line_flash_timer@@3MA, xmm0

; 5043 : 
; 5044 : 			ase_draw_threat_line_status ^= 1;

  0039d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ase_draw_threat_line_status@@3HA
  003a2	83 f0 01	 xor	 eax, 1
  003a5	a3 00 00 00 00	 mov	 DWORD PTR ?ase_draw_threat_line_status@@3HA, eax
$LN14@draw_aircr:

; 5045 : 		}
; 5046 : 
; 5047 : 		set_2d_window_rotation (mfd_env, source_heading);

  003aa	51		 push	 ecx
  003ab	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  003b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  003bd	50		 push	 eax
  003be	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 5048 : 
; 5049 : 		//
; 5050 : 		// display enemy SAM and AAA threat range circles
; 5051 : 		//
; 5052 : 		// (use the gunship target list so that threats which are not targetting the player are still visible)
; 5053 : 		//
; 5054 : 
; 5055 : 		threat = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  003c3	83 bd 18 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  003ca	74 10		 je	 SHORT $LN124@draw_aircr
  003cc	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  003d2	8b 08		 mov	 ecx, DWORD PTR [eax]
  003d4	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv210[ebp], ecx
  003da	eb 24		 jmp	 SHORT $LN125@draw_aircr
$LN124@draw_aircr:
  003dc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  003e2	83 c2 55	 add	 edx, 85			; 00000055H
  003e5	52		 push	 edx
  003e6	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  003eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003f0	50		 push	 eax
  003f1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003f6	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv210[ebp], 0
$LN125@draw_aircr:
  00400	b9 01 00 00 00	 mov	 ecx, 1
  00405	85 c9		 test	 ecx, ecx
  00407	74 0c		 je	 SHORT $LN126@draw_aircr
  00409	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv218[ebp], 18 ; 00000012H
  00413	eb 24		 jmp	 SHORT $LN127@draw_aircr
$LN126@draw_aircr:
  00415	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  0041b	83 c2 55	 add	 edx, 85			; 00000055H
  0041e	52		 push	 edx
  0041f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00424	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00429	50		 push	 eax
  0042a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0042f	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv218[ebp], 0
$LN127@draw_aircr:
  00439	6a 12		 push	 18			; 00000012H
  0043b	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00441	51		 push	 ecx
  00442	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv210[ebp], 180
  0044c	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv218[ebp]
  00452	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00459	ff d1		 call	 ecx
  0045b	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN2@draw_aircr:

; 5056 : 
; 5057 : 		while (threat)

  00461	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00468	0f 84 b3 04 00
	00		 je	 $LN3@draw_aircr

; 5058 : 		{
; 5059 : 			if (!get_local_entity_int_value (threat, INT_TYPE_GROUND_RADAR_CLUTTER))

  0046e	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00475	74 10		 je	 SHORT $LN128@draw_aircr
  00477	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  0047d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0047f	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv230[ebp], ecx
  00485	eb 20		 jmp	 SHORT $LN129@draw_aircr
$LN128@draw_aircr:
  00487	68 c3 13 00 00	 push	 5059			; 000013c3H
  0048c	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00491	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00497	52		 push	 edx
  00498	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0049d	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv230[ebp], 0
$LN129@draw_aircr:
  004a7	b8 01 00 00 00	 mov	 eax, 1
  004ac	85 c0		 test	 eax, eax
  004ae	74 0c		 je	 SHORT $LN130@draw_aircr
  004b0	c7 85 98 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv237[ebp], 66 ; 00000042H
  004ba	eb 20		 jmp	 SHORT $LN131@draw_aircr
$LN130@draw_aircr:
  004bc	68 c3 13 00 00	 push	 5059			; 000013c3H
  004c1	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  004c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  004cc	51		 push	 ecx
  004cd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004d2	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv237[ebp], 0
$LN131@draw_aircr:
  004dc	6a 42		 push	 66			; 00000042H
  004de	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  004e4	52		 push	 edx
  004e5	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv230[ebp], 1116
  004ef	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv237[ebp]
  004f5	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  004fc	ff d2		 call	 edx
  004fe	85 c0		 test	 eax, eax
  00500	0f 85 78 03 00
	00		 jne	 $LN20@draw_aircr

; 5060 : 			{
; 5061 : 				if (source_side != get_local_entity_int_value (threat, INT_TYPE_SIDE))

  00506	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0050d	74 10		 je	 SHORT $LN132@draw_aircr
  0050f	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00515	8b 08		 mov	 ecx, DWORD PTR [eax]
  00517	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv249[ebp], ecx
  0051d	eb 20		 jmp	 SHORT $LN133@draw_aircr
$LN132@draw_aircr:
  0051f	68 c5 13 00 00	 push	 5061			; 000013c5H
  00524	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00529	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0052f	52		 push	 edx
  00530	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00535	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv249[ebp], 0
$LN133@draw_aircr:
  0053f	b8 01 00 00 00	 mov	 eax, 1
  00544	85 c0		 test	 eax, eax
  00546	74 0c		 je	 SHORT $LN134@draw_aircr
  00548	c7 85 98 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv256[ebp], 187 ; 000000bbH
  00552	eb 20		 jmp	 SHORT $LN135@draw_aircr
$LN134@draw_aircr:
  00554	68 c5 13 00 00	 push	 5061			; 000013c5H
  00559	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0055e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00564	51		 push	 ecx
  00565	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0056a	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv256[ebp], 0
$LN135@draw_aircr:
  00574	68 bb 00 00 00	 push	 187			; 000000bbH
  00579	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  0057f	52		 push	 edx
  00580	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv249[ebp], 1116
  0058a	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv256[ebp]
  00590	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00597	ff d2		 call	 edx
  00599	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  0059f	0f 84 d9 02 00
	00		 je	 $LN20@draw_aircr

; 5062 : 				{
; 5063 : 					threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  005a5	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  005ac	74 10		 je	 SHORT $LN136@draw_aircr
  005ae	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  005b4	8b 08		 mov	 ecx, DWORD PTR [eax]
  005b6	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv269[ebp], ecx
  005bc	eb 24		 jmp	 SHORT $LN137@draw_aircr
$LN136@draw_aircr:
  005be	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  005c4	83 c2 5d	 add	 edx, 93			; 0000005dH
  005c7	52		 push	 edx
  005c8	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  005cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  005d2	50		 push	 eax
  005d3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005d8	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv269[ebp], 0
$LN137@draw_aircr:
  005e2	b9 01 00 00 00	 mov	 ecx, 1
  005e7	85 c9		 test	 ecx, ecx
  005e9	74 0c		 je	 SHORT $LN138@draw_aircr
  005eb	c7 85 98 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv277[ebp], 233 ; 000000e9H
  005f5	eb 24		 jmp	 SHORT $LN139@draw_aircr
$LN138@draw_aircr:
  005f7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  005fd	83 c2 5d	 add	 edx, 93			; 0000005dH
  00600	52		 push	 edx
  00601	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00606	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0060b	50		 push	 eax
  0060c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00611	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv277[ebp], 0
$LN139@draw_aircr:
  0061b	68 e9 00 00 00	 push	 233			; 000000e9H
  00620	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00626	51		 push	 ecx
  00627	69 95 9c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv269[ebp], 1116
  00631	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv277[ebp]
  00637	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  0063e	ff d1		 call	 ecx
  00640	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 5064 : 
; 5065 : 					if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA))

  00646	83 bd f8 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  0064d	74 0d		 je	 SHORT $LN18@draw_aircr
  0064f	83 bd f8 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$7[ebp], 6
  00656	0f 85 22 02 00
	00		 jne	 $LN20@draw_aircr
$LN18@draw_aircr:

; 5066 : 					{
; 5067 : 						threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  0065c	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00663	74 10		 je	 SHORT $LN140@draw_aircr
  00665	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  0066b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0066d	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv291[ebp], ecx
  00673	eb 24		 jmp	 SHORT $LN141@draw_aircr
$LN140@draw_aircr:
  00675	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  0067b	83 c2 61	 add	 edx, 97			; 00000061H
  0067e	52		 push	 edx
  0067f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00684	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00689	50		 push	 eax
  0068a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0068f	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv291[ebp], 0
$LN141@draw_aircr:
  00699	b9 01 00 00 00	 mov	 ecx, 1
  0069e	85 c9		 test	 ecx, ecx
  006a0	74 0c		 je	 SHORT $LN142@draw_aircr
  006a2	c7 85 98 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv299[ebp], 8
  006ac	eb 24		 jmp	 SHORT $LN143@draw_aircr
$LN142@draw_aircr:
  006ae	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  006b4	83 c2 61	 add	 edx, 97			; 00000061H
  006b7	52		 push	 edx
  006b8	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  006bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  006c2	50		 push	 eax
  006c3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006c8	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv299[ebp], 0
$LN143@draw_aircr:
  006d2	6a 08		 push	 8
  006d4	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  006da	51		 push	 ecx
  006db	6b 95 9c fe ff
	ff 60		 imul	 edx, DWORD PTR tv291[ebp], 96
  006e2	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv299[ebp]
  006e8	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  006ef	ff d1		 call	 ecx
  006f1	89 85 fc fe ff
	ff		 mov	 DWORD PTR _threat_position$8[ebp], eax

; 5068 : 
; 5069 : 						dx = (threat_position->x - source_position->x) * scale;

  006f7	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  006fd	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  00703	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00707	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0070b	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00713	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 5070 : 						dy = (threat_position->z - source_position->z) * scale;

  0071b	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  00721	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  00727	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0072c	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00731	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00739	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _dy$3[ebp], xmm0

; 5071 : 
; 5072 : 						air_scan_range = get_local_entity_float_value (threat, FLOAT_TYPE_AIR_SCAN_RANGE) * scale;

  00741	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00748	74 10		 je	 SHORT $LN144@draw_aircr
  0074a	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00750	8b 08		 mov	 ecx, DWORD PTR [eax]
  00752	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv319[ebp], ecx
  00758	eb 24		 jmp	 SHORT $LN145@draw_aircr
$LN144@draw_aircr:
  0075a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00760	83 c2 66	 add	 edx, 102		; 00000066H
  00763	52		 push	 edx
  00764	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00769	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0076e	50		 push	 eax
  0076f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00774	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv319[ebp], 0
$LN145@draw_aircr:
  0077e	b9 01 00 00 00	 mov	 ecx, 1
  00783	85 c9		 test	 ecx, ecx
  00785	74 0c		 je	 SHORT $LN146@draw_aircr
  00787	c7 85 98 fe ff
	ff 05 00 00 00	 mov	 DWORD PTR tv327[ebp], 5
  00791	eb 24		 jmp	 SHORT $LN147@draw_aircr
$LN146@draw_aircr:
  00793	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00799	83 c2 66	 add	 edx, 102		; 00000066H
  0079c	52		 push	 edx
  0079d	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  007a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  007a7	50		 push	 eax
  007a8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007ad	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv327[ebp], 0
$LN147@draw_aircr:
  007b7	6a 05		 push	 5
  007b9	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  007bf	51		 push	 ecx
  007c0	69 95 9c fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv319[ebp], 700
  007ca	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv327[ebp]
  007d0	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  007d7	ff d1		 call	 ecx
  007d9	d9 9d 94 fe ff
	ff		 fstp	 DWORD PTR tv1370[ebp]
  007df	f3 0f 10 85 94
	fe ff ff	 movss	 xmm0, DWORD PTR tv1370[ebp]
  007e7	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  007ef	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _air_scan_range$5[ebp], xmm0

; 5073 : 
; 5074 : 						if (threat_type == THREAT_TYPE_SAM)

  007f7	83 bd f8 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  007fe	75 40		 jne	 SHORT $LN19@draw_aircr

; 5075 : 							draw_2d_circle (dx, dy, air_scan_range, MFD_COLOUR_RED);

  00800	b8 04 00 00 00	 mov	 eax, 4
  00805	6b c8 0f	 imul	 ecx, eax, 15
  00808	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0080e	52		 push	 edx
  0080f	51		 push	 ecx
  00810	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _air_scan_range$5[ebp]
  00818	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081d	51		 push	 ecx
  0081e	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  00826	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0082b	51		 push	 ecx
  0082c	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  00834	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00839	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 5076 : 						else

  0083e	eb 3e		 jmp	 SHORT $LN20@draw_aircr
$LN19@draw_aircr:

; 5077 : 							draw_2d_circle (dx, dy, air_scan_range, MFD_COLOUR_YELLOW);

  00840	b8 04 00 00 00	 mov	 eax, 4
  00845	6b c8 0d	 imul	 ecx, eax, 13
  00848	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0084e	52		 push	 edx
  0084f	51		 push	 ecx
  00850	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _air_scan_range$5[ebp]
  00858	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0085d	51		 push	 ecx
  0085e	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  00866	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0086b	51		 push	 ecx
  0086c	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  00874	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00879	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle
$LN20@draw_aircr:

; 5078 : 					}
; 5079 : 				}
; 5080 : 			}
; 5081 : 
; 5082 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_GUNSHIP_TARGET);

  0087e	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00885	74 10		 je	 SHORT $LN148@draw_aircr
  00887	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  0088d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0088f	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv353[ebp], ecx
  00895	eb 24		 jmp	 SHORT $LN149@draw_aircr
$LN148@draw_aircr:
  00897	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  0089d	83 c2 70	 add	 edx, 112		; 00000070H
  008a0	52		 push	 edx
  008a1	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  008a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  008ab	50		 push	 eax
  008ac	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008b1	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv353[ebp], 0
$LN149@draw_aircr:
  008bb	b9 01 00 00 00	 mov	 ecx, 1
  008c0	85 c9		 test	 ecx, ecx
  008c2	74 0c		 je	 SHORT $LN150@draw_aircr
  008c4	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv361[ebp], 18 ; 00000012H
  008ce	eb 24		 jmp	 SHORT $LN151@draw_aircr
$LN150@draw_aircr:
  008d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  008d6	83 c2 70	 add	 edx, 112		; 00000070H
  008d9	52		 push	 edx
  008da	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  008df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  008e4	50		 push	 eax
  008e5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008ea	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv361[ebp], 0
$LN151@draw_aircr:
  008f4	6a 12		 push	 18			; 00000012H
  008f6	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  008fc	51		 push	 ecx
  008fd	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv353[ebp], 180
  00907	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv361[ebp]
  0090d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00914	ff d1		 call	 ecx
  00916	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 5083 : 		}

  0091c	e9 40 fb ff ff	 jmp	 $LN2@draw_aircr
$LN3@draw_aircr:

; 5084 : 
; 5085 : 		//
; 5086 : 		// display enemy SAM, AAA and AIRBORNE_RADAR threats
; 5087 : 		//
; 5088 : 
; 5089 : 		threat = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  00921	83 bd 18 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00928	74 10		 je	 SHORT $LN152@draw_aircr
  0092a	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00930	8b 08		 mov	 ecx, DWORD PTR [eax]
  00932	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv373[ebp], ecx
  00938	eb 24		 jmp	 SHORT $LN153@draw_aircr
$LN152@draw_aircr:
  0093a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00940	83 c2 77	 add	 edx, 119		; 00000077H
  00943	52		 push	 edx
  00944	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00949	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0094e	50		 push	 eax
  0094f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00954	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv373[ebp], 0
$LN153@draw_aircr:
  0095e	b9 01 00 00 00	 mov	 ecx, 1
  00963	85 c9		 test	 ecx, ecx
  00965	74 0c		 je	 SHORT $LN154@draw_aircr
  00967	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv381[ebp], 18 ; 00000012H
  00971	eb 24		 jmp	 SHORT $LN155@draw_aircr
$LN154@draw_aircr:
  00973	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00979	83 c2 77	 add	 edx, 119		; 00000077H
  0097c	52		 push	 edx
  0097d	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00982	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00987	50		 push	 eax
  00988	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0098d	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv381[ebp], 0
$LN155@draw_aircr:
  00997	6a 12		 push	 18			; 00000012H
  00999	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  0099f	51		 push	 ecx
  009a0	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv373[ebp], 180
  009aa	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv381[ebp]
  009b0	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  009b7	ff d1		 call	 ecx
  009b9	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN4@draw_aircr:

; 5090 : 
; 5091 : 		while (threat)

  009bf	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  009c6	0f 84 c3 02 00
	00		 je	 $LN5@draw_aircr

; 5092 : 		{
; 5093 : 			if (!get_local_entity_int_value (threat, INT_TYPE_GROUND_RADAR_CLUTTER))

  009cc	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  009d3	74 10		 je	 SHORT $LN156@draw_aircr
  009d5	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  009db	8b 08		 mov	 ecx, DWORD PTR [eax]
  009dd	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv393[ebp], ecx
  009e3	eb 20		 jmp	 SHORT $LN157@draw_aircr
$LN156@draw_aircr:
  009e5	68 e5 13 00 00	 push	 5093			; 000013e5H
  009ea	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  009ef	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  009f5	52		 push	 edx
  009f6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009fb	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv393[ebp], 0
$LN157@draw_aircr:
  00a05	b8 01 00 00 00	 mov	 eax, 1
  00a0a	85 c0		 test	 eax, eax
  00a0c	74 0c		 je	 SHORT $LN158@draw_aircr
  00a0e	c7 85 98 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv400[ebp], 66 ; 00000042H
  00a18	eb 20		 jmp	 SHORT $LN159@draw_aircr
$LN158@draw_aircr:
  00a1a	68 e5 13 00 00	 push	 5093			; 000013e5H
  00a1f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a24	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00a2a	51		 push	 ecx
  00a2b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a30	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv400[ebp], 0
$LN159@draw_aircr:
  00a3a	6a 42		 push	 66			; 00000042H
  00a3c	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00a42	52		 push	 edx
  00a43	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv393[ebp], 1116
  00a4d	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv400[ebp]
  00a53	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00a5a	ff d2		 call	 edx
  00a5c	85 c0		 test	 eax, eax
  00a5e	0f 85 82 01 00
	00		 jne	 $LN23@draw_aircr

; 5094 : 			{
; 5095 : 				if (source_side != get_local_entity_int_value (threat, INT_TYPE_SIDE))

  00a64	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00a6b	74 10		 je	 SHORT $LN160@draw_aircr
  00a6d	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00a73	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a75	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv412[ebp], ecx
  00a7b	eb 20		 jmp	 SHORT $LN161@draw_aircr
$LN160@draw_aircr:
  00a7d	68 e7 13 00 00	 push	 5095			; 000013e7H
  00a82	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a87	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00a8d	52		 push	 edx
  00a8e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a93	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv412[ebp], 0
$LN161@draw_aircr:
  00a9d	b8 01 00 00 00	 mov	 eax, 1
  00aa2	85 c0		 test	 eax, eax
  00aa4	74 0c		 je	 SHORT $LN162@draw_aircr
  00aa6	c7 85 98 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv419[ebp], 187 ; 000000bbH
  00ab0	eb 20		 jmp	 SHORT $LN163@draw_aircr
$LN162@draw_aircr:
  00ab2	68 e7 13 00 00	 push	 5095			; 000013e7H
  00ab7	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00abc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00ac2	51		 push	 ecx
  00ac3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ac8	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv419[ebp], 0
$LN163@draw_aircr:
  00ad2	68 bb 00 00 00	 push	 187			; 000000bbH
  00ad7	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00add	52		 push	 edx
  00ade	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv412[ebp], 1116
  00ae8	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv419[ebp]
  00aee	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00af5	ff d2		 call	 edx
  00af7	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  00afd	0f 84 e3 00 00
	00		 je	 $LN23@draw_aircr

; 5096 : 				{
; 5097 : 					threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  00b03	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00b0a	74 10		 je	 SHORT $LN164@draw_aircr
  00b0c	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00b12	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b14	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv432[ebp], ecx
  00b1a	eb 24		 jmp	 SHORT $LN165@draw_aircr
$LN164@draw_aircr:
  00b1c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00b22	83 c2 7f	 add	 edx, 127		; 0000007fH
  00b25	52		 push	 edx
  00b26	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b2b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00b30	50		 push	 eax
  00b31	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b36	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv432[ebp], 0
$LN165@draw_aircr:
  00b40	b9 01 00 00 00	 mov	 ecx, 1
  00b45	85 c9		 test	 ecx, ecx
  00b47	74 0c		 je	 SHORT $LN166@draw_aircr
  00b49	c7 85 98 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv440[ebp], 233 ; 000000e9H
  00b53	eb 24		 jmp	 SHORT $LN167@draw_aircr
$LN166@draw_aircr:
  00b55	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00b5b	83 c2 7f	 add	 edx, 127		; 0000007fH
  00b5e	52		 push	 edx
  00b5f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b64	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00b69	50		 push	 eax
  00b6a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b6f	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv440[ebp], 0
$LN167@draw_aircr:
  00b79	68 e9 00 00 00	 push	 233			; 000000e9H
  00b7e	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00b84	51		 push	 ecx
  00b85	69 95 9c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv432[ebp], 1116
  00b8f	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv440[ebp]
  00b95	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00b9c	ff d1		 call	 ecx
  00b9e	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 5098 : 
; 5099 : 					if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA) || (threat_type == THREAT_TYPE_AIRBORNE_RADAR))

  00ba4	83 bd f8 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  00bab	74 12		 je	 SHORT $LN24@draw_aircr
  00bad	83 bd f8 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$7[ebp], 6
  00bb4	74 09		 je	 SHORT $LN24@draw_aircr
  00bb6	83 bd f8 fe ff
	ff 04		 cmp	 DWORD PTR _threat_type$7[ebp], 4
  00bbd	75 27		 jne	 SHORT $LN23@draw_aircr
$LN24@draw_aircr:

; 5100 : 					{
; 5101 : 						draw_radar_target_symbol (threat, source_position, scale, FALSE, FALSE, TRUE);

  00bbf	6a 01		 push	 1
  00bc1	6a 00		 push	 0
  00bc3	6a 00		 push	 0
  00bc5	51		 push	 ecx
  00bc6	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00bce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bd3	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00bd9	50		 push	 eax
  00bda	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00be0	51		 push	 ecx
  00be1	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z ; draw_radar_target_symbol
$LN23@draw_aircr:

; 5102 : 					}
; 5103 : 				}
; 5104 : 			}
; 5105 : 
; 5106 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_GUNSHIP_TARGET);

  00be6	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00bed	74 10		 je	 SHORT $LN168@draw_aircr
  00bef	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00bf5	8b 08		 mov	 ecx, DWORD PTR [eax]
  00bf7	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv461[ebp], ecx
  00bfd	eb 27		 jmp	 SHORT $LN169@draw_aircr
$LN168@draw_aircr:
  00bff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00c05	81 c2 88 00 00
	00		 add	 edx, 136		; 00000088H
  00c0b	52		 push	 edx
  00c0c	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c11	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00c16	50		 push	 eax
  00c17	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c1c	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv461[ebp], 0
$LN169@draw_aircr:
  00c26	b9 01 00 00 00	 mov	 ecx, 1
  00c2b	85 c9		 test	 ecx, ecx
  00c2d	74 0c		 je	 SHORT $LN170@draw_aircr
  00c2f	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv469[ebp], 18 ; 00000012H
  00c39	eb 27		 jmp	 SHORT $LN171@draw_aircr
$LN170@draw_aircr:
  00c3b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00c41	81 c2 88 00 00
	00		 add	 edx, 136		; 00000088H
  00c47	52		 push	 edx
  00c48	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c4d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00c52	50		 push	 eax
  00c53	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c58	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv469[ebp], 0
$LN171@draw_aircr:
  00c62	6a 12		 push	 18			; 00000012H
  00c64	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00c6a	51		 push	 ecx
  00c6b	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv461[ebp], 180
  00c75	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv469[ebp]
  00c7b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00c82	ff d1		 call	 ecx
  00c84	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 5107 : 		}

  00c8a	e9 30 fd ff ff	 jmp	 $LN4@draw_aircr
$LN5@draw_aircr:

; 5108 : 
; 5109 : 		//
; 5110 : 		// draw threat line if gunship is targetted (flash if missile fired)
; 5111 : 		//
; 5112 : 
; 5113 : 		threat = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  00c8f	83 bd 18 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00c96	74 10		 je	 SHORT $LN172@draw_aircr
  00c98	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00c9e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ca0	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv481[ebp], ecx
  00ca6	eb 27		 jmp	 SHORT $LN173@draw_aircr
$LN172@draw_aircr:
  00ca8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00cae	81 c2 8f 00 00
	00		 add	 edx, 143		; 0000008fH
  00cb4	52		 push	 edx
  00cb5	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00cba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00cbf	50		 push	 eax
  00cc0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00cc5	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv481[ebp], 0
$LN173@draw_aircr:
  00ccf	b9 01 00 00 00	 mov	 ecx, 1
  00cd4	85 c9		 test	 ecx, ecx
  00cd6	74 0c		 je	 SHORT $LN174@draw_aircr
  00cd8	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv489[ebp], 18 ; 00000012H
  00ce2	eb 27		 jmp	 SHORT $LN175@draw_aircr
$LN174@draw_aircr:
  00ce4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00cea	81 c2 8f 00 00
	00		 add	 edx, 143		; 0000008fH
  00cf0	52		 push	 edx
  00cf1	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00cf6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00cfb	50		 push	 eax
  00cfc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d01	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv489[ebp], 0
$LN175@draw_aircr:
  00d0b	6a 12		 push	 18			; 00000012H
  00d0d	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00d13	51		 push	 ecx
  00d14	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv481[ebp], 180
  00d1e	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv489[ebp]
  00d24	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00d2b	ff d1		 call	 ecx
  00d2d	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN6@draw_aircr:

; 5114 : 
; 5115 : 		while (threat)

  00d33	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00d3a	0f 84 be 07 00
	00		 je	 $LN7@draw_aircr

; 5116 : 		{
; 5117 : 			if (!get_local_entity_int_value (threat, INT_TYPE_GROUND_RADAR_CLUTTER))

  00d40	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00d47	74 10		 je	 SHORT $LN176@draw_aircr
  00d49	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00d4f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d51	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv501[ebp], ecx
  00d57	eb 20		 jmp	 SHORT $LN177@draw_aircr
$LN176@draw_aircr:
  00d59	68 fd 13 00 00	 push	 5117			; 000013fdH
  00d5e	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d63	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00d69	52		 push	 edx
  00d6a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d6f	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv501[ebp], 0
$LN177@draw_aircr:
  00d79	b8 01 00 00 00	 mov	 eax, 1
  00d7e	85 c0		 test	 eax, eax
  00d80	74 0c		 je	 SHORT $LN178@draw_aircr
  00d82	c7 85 98 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv508[ebp], 66 ; 00000042H
  00d8c	eb 20		 jmp	 SHORT $LN179@draw_aircr
$LN178@draw_aircr:
  00d8e	68 fd 13 00 00	 push	 5117			; 000013fdH
  00d93	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d98	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00d9e	51		 push	 ecx
  00d9f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00da4	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv508[ebp], 0
$LN179@draw_aircr:
  00dae	6a 42		 push	 66			; 00000042H
  00db0	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00db6	52		 push	 edx
  00db7	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv501[ebp], 1116
  00dc1	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv508[ebp]
  00dc7	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00dce	ff d2		 call	 edx
  00dd0	85 c0		 test	 eax, eax
  00dd2	0f 85 7d 06 00
	00		 jne	 $LN33@draw_aircr

; 5118 : 			{
; 5119 : 				if (source_side != get_local_entity_int_value (threat, INT_TYPE_SIDE))

  00dd8	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00ddf	74 10		 je	 SHORT $LN180@draw_aircr
  00de1	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00de7	8b 08		 mov	 ecx, DWORD PTR [eax]
  00de9	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv520[ebp], ecx
  00def	eb 20		 jmp	 SHORT $LN181@draw_aircr
$LN180@draw_aircr:
  00df1	68 ff 13 00 00	 push	 5119			; 000013ffH
  00df6	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00dfb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00e01	52		 push	 edx
  00e02	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e07	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv520[ebp], 0
$LN181@draw_aircr:
  00e11	b8 01 00 00 00	 mov	 eax, 1
  00e16	85 c0		 test	 eax, eax
  00e18	74 0c		 je	 SHORT $LN182@draw_aircr
  00e1a	c7 85 98 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv527[ebp], 187 ; 000000bbH
  00e24	eb 20		 jmp	 SHORT $LN183@draw_aircr
$LN182@draw_aircr:
  00e26	68 ff 13 00 00	 push	 5119			; 000013ffH
  00e2b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e30	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00e36	51		 push	 ecx
  00e37	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e3c	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv527[ebp], 0
$LN183@draw_aircr:
  00e46	68 bb 00 00 00	 push	 187			; 000000bbH
  00e4b	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00e51	52		 push	 edx
  00e52	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv520[ebp], 1116
  00e5c	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv527[ebp]
  00e62	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00e69	ff d2		 call	 edx
  00e6b	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  00e71	0f 84 de 05 00
	00		 je	 $LN33@draw_aircr

; 5120 : 				{
; 5121 : 					if (get_local_entity_int_value (threat, INT_TYPE_RADAR_ON))

  00e77	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00e7e	74 10		 je	 SHORT $LN184@draw_aircr
  00e80	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00e86	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e88	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv539[ebp], ecx
  00e8e	eb 20		 jmp	 SHORT $LN185@draw_aircr
$LN184@draw_aircr:
  00e90	68 01 14 00 00	 push	 5121			; 00001401H
  00e95	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e9a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00ea0	52		 push	 edx
  00ea1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ea6	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv539[ebp], 0
$LN185@draw_aircr:
  00eb0	b8 01 00 00 00	 mov	 eax, 1
  00eb5	85 c0		 test	 eax, eax
  00eb7	74 0c		 je	 SHORT $LN186@draw_aircr
  00eb9	c7 85 98 fe ff
	ff a9 00 00 00	 mov	 DWORD PTR tv546[ebp], 169 ; 000000a9H
  00ec3	eb 20		 jmp	 SHORT $LN187@draw_aircr
$LN186@draw_aircr:
  00ec5	68 01 14 00 00	 push	 5121			; 00001401H
  00eca	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ecf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00ed5	51		 push	 ecx
  00ed6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00edb	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv546[ebp], 0
$LN187@draw_aircr:
  00ee5	68 a9 00 00 00	 push	 169			; 000000a9H
  00eea	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00ef0	52		 push	 edx
  00ef1	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv539[ebp], 1116
  00efb	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv546[ebp]
  00f01	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00f08	ff d2		 call	 edx
  00f0a	85 c0		 test	 eax, eax
  00f0c	0f 84 43 05 00
	00		 je	 $LN33@draw_aircr

; 5122 : 					{
; 5123 : 						threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  00f12	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00f19	74 10		 je	 SHORT $LN188@draw_aircr
  00f1b	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00f21	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f23	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv559[ebp], ecx
  00f29	eb 27		 jmp	 SHORT $LN189@draw_aircr
$LN188@draw_aircr:
  00f2b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00f31	81 c2 99 00 00
	00		 add	 edx, 153		; 00000099H
  00f37	52		 push	 edx
  00f38	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f3d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00f42	50		 push	 eax
  00f43	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f48	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv559[ebp], 0
$LN189@draw_aircr:
  00f52	b9 01 00 00 00	 mov	 ecx, 1
  00f57	85 c9		 test	 ecx, ecx
  00f59	74 0c		 je	 SHORT $LN190@draw_aircr
  00f5b	c7 85 98 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv567[ebp], 233 ; 000000e9H
  00f65	eb 27		 jmp	 SHORT $LN191@draw_aircr
$LN190@draw_aircr:
  00f67	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00f6d	81 c2 99 00 00
	00		 add	 edx, 153		; 00000099H
  00f73	52		 push	 edx
  00f74	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f79	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00f7e	50		 push	 eax
  00f7f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f84	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv567[ebp], 0
$LN191@draw_aircr:
  00f8e	68 e9 00 00 00	 push	 233			; 000000e9H
  00f93	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00f99	51		 push	 ecx
  00f9a	69 95 9c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv559[ebp], 1116
  00fa4	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv567[ebp]
  00faa	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00fb1	ff d1		 call	 ecx
  00fb3	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 5124 : 
; 5125 : 						if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA) || (threat_type == THREAT_TYPE_AIRBORNE_RADAR))

  00fb9	83 bd f8 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  00fc0	74 16		 je	 SHORT $LN29@draw_aircr
  00fc2	83 bd f8 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$7[ebp], 6
  00fc9	74 0d		 je	 SHORT $LN29@draw_aircr
  00fcb	83 bd f8 fe ff
	ff 04		 cmp	 DWORD PTR _threat_type$7[ebp], 4
  00fd2	0f 85 7d 04 00
	00		 jne	 $LN33@draw_aircr
$LN29@draw_aircr:

; 5126 : 						{
; 5127 : 							if (get_local_entity_parent (threat, LIST_TYPE_TARGET) == source)

  00fd8	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00fdf	74 10		 je	 SHORT $LN192@draw_aircr
  00fe1	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00fe7	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fe9	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv581[ebp], ecx
  00fef	eb 20		 jmp	 SHORT $LN193@draw_aircr
$LN192@draw_aircr:
  00ff1	68 07 14 00 00	 push	 5127			; 00001407H
  00ff6	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ffb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01001	52		 push	 edx
  01002	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01007	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv581[ebp], 0
$LN193@draw_aircr:
  01011	b8 01 00 00 00	 mov	 eax, 1
  01016	85 c0		 test	 eax, eax
  01018	74 0c		 je	 SHORT $LN194@draw_aircr
  0101a	c7 85 98 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv588[ebp], 38 ; 00000026H
  01024	eb 20		 jmp	 SHORT $LN195@draw_aircr
$LN194@draw_aircr:
  01026	68 07 14 00 00	 push	 5127			; 00001407H
  0102b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01030	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01036	51		 push	 ecx
  01037	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0103c	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv588[ebp], 0
$LN195@draw_aircr:
  01046	6a 26		 push	 38			; 00000026H
  01048	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  0104e	52		 push	 edx
  0104f	69 85 9c fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv581[ebp], 180
  01059	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv588[ebp]
  0105f	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  01066	ff d2		 call	 edx
  01068	3b 85 18 ff ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  0106e	0f 85 e1 03 00
	00		 jne	 $LN33@draw_aircr

; 5128 : 							{
; 5129 : 								draw_threat_line = TRUE;

  01074	c7 85 f4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _draw_threat_line$6[ebp], 1

; 5130 : 
; 5131 : 								launched_weapon = get_local_entity_first_child (threat, LIST_TYPE_LAUNCHED_WEAPON);

  0107e	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  01085	74 10		 je	 SHORT $LN196@draw_aircr
  01087	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  0108d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0108f	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv601[ebp], ecx
  01095	eb 27		 jmp	 SHORT $LN197@draw_aircr
$LN196@draw_aircr:
  01097	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  0109d	81 c2 a1 00 00
	00		 add	 edx, 161		; 000000a1H
  010a3	52		 push	 edx
  010a4	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  010a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  010ae	50		 push	 eax
  010af	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  010b4	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv601[ebp], 0
$LN197@draw_aircr:
  010be	b9 01 00 00 00	 mov	 ecx, 1
  010c3	85 c9		 test	 ecx, ecx
  010c5	74 0c		 je	 SHORT $LN198@draw_aircr
  010c7	c7 85 98 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv609[ebp], 24 ; 00000018H
  010d1	eb 27		 jmp	 SHORT $LN199@draw_aircr
$LN198@draw_aircr:
  010d3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  010d9	81 c2 a1 00 00
	00		 add	 edx, 161		; 000000a1H
  010df	52		 push	 edx
  010e0	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  010e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  010ea	50		 push	 eax
  010eb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  010f0	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv609[ebp], 0
$LN199@draw_aircr:
  010fa	6a 18		 push	 24			; 00000018H
  010fc	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  01102	51		 push	 ecx
  01103	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv601[ebp], 180
  0110d	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv609[ebp]
  01113	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0111a	ff d1		 call	 ecx
  0111c	89 85 00 ff ff
	ff		 mov	 DWORD PTR _launched_weapon$9[ebp], eax
$LN8@draw_aircr:

; 5132 : 
; 5133 : 								while (launched_weapon)

  01122	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  01129	0f 84 ec 01 00
	00		 je	 $LN9@draw_aircr

; 5134 : 								{
; 5135 : 									if (get_local_entity_int_value (launched_weapon, INT_TYPE_WEAPON_GUIDANCE_TYPE) != WEAPON_GUIDANCE_TYPE_NONE)

  0112f	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  01136	74 10		 je	 SHORT $LN200@draw_aircr
  01138	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$9[ebp]
  0113e	8b 08		 mov	 ecx, DWORD PTR [eax]
  01140	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv621[ebp], ecx
  01146	eb 20		 jmp	 SHORT $LN201@draw_aircr
$LN200@draw_aircr:
  01148	68 0f 14 00 00	 push	 5135			; 0000140fH
  0114d	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01152	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01158	52		 push	 edx
  01159	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0115e	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv621[ebp], 0
$LN201@draw_aircr:
  01168	b8 01 00 00 00	 mov	 eax, 1
  0116d	85 c0		 test	 eax, eax
  0116f	74 0c		 je	 SHORT $LN202@draw_aircr
  01171	c7 85 98 fe ff
	ff 07 01 00 00	 mov	 DWORD PTR tv628[ebp], 263 ; 00000107H
  0117b	eb 20		 jmp	 SHORT $LN203@draw_aircr
$LN202@draw_aircr:
  0117d	68 0f 14 00 00	 push	 5135			; 0000140fH
  01182	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01187	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0118d	51		 push	 ecx
  0118e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01193	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv628[ebp], 0
$LN203@draw_aircr:
  0119d	68 07 01 00 00	 push	 263			; 00000107H
  011a2	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$9[ebp]
  011a8	52		 push	 edx
  011a9	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv621[ebp], 1116
  011b3	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv628[ebp]
  011b9	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  011c0	ff d2		 call	 edx
  011c2	85 c0		 test	 eax, eax
  011c4	0f 84 a8 00 00
	00		 je	 $LN32@draw_aircr

; 5136 : 									{
; 5137 : 										if (get_local_entity_parent (launched_weapon, LIST_TYPE_TARGET) == source)

  011ca	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  011d1	74 10		 je	 SHORT $LN204@draw_aircr
  011d3	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$9[ebp]
  011d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  011db	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv640[ebp], ecx
  011e1	eb 20		 jmp	 SHORT $LN205@draw_aircr
$LN204@draw_aircr:
  011e3	68 11 14 00 00	 push	 5137			; 00001411H
  011e8	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  011ed	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  011f3	52		 push	 edx
  011f4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  011f9	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv640[ebp], 0
$LN205@draw_aircr:
  01203	b8 01 00 00 00	 mov	 eax, 1
  01208	85 c0		 test	 eax, eax
  0120a	74 0c		 je	 SHORT $LN206@draw_aircr
  0120c	c7 85 98 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv647[ebp], 38 ; 00000026H
  01216	eb 20		 jmp	 SHORT $LN207@draw_aircr
$LN206@draw_aircr:
  01218	68 11 14 00 00	 push	 5137			; 00001411H
  0121d	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01222	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01228	51		 push	 ecx
  01229	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0122e	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv647[ebp], 0
$LN207@draw_aircr:
  01238	6a 26		 push	 38			; 00000026H
  0123a	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$9[ebp]
  01240	52		 push	 edx
  01241	69 85 9c fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv640[ebp], 180
  0124b	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv647[ebp]
  01251	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  01258	ff d2		 call	 edx
  0125a	3b 85 18 ff ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  01260	75 10		 jne	 SHORT $LN32@draw_aircr

; 5138 : 										{
; 5139 : 											draw_threat_line = ase_draw_threat_line_status;

  01262	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ase_draw_threat_line_status@@3HA
  01267	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _draw_threat_line$6[ebp], eax

; 5140 : 
; 5141 : 											break;

  0126d	e9 a9 00 00 00	 jmp	 $LN9@draw_aircr
$LN32@draw_aircr:

; 5142 : 										}
; 5143 : 									}
; 5144 : 
; 5145 : 									launched_weapon = get_local_entity_child_succ (launched_weapon, LIST_TYPE_LAUNCHED_WEAPON);

  01272	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  01279	74 10		 je	 SHORT $LN208@draw_aircr
  0127b	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$9[ebp]
  01281	8b 08		 mov	 ecx, DWORD PTR [eax]
  01283	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv660[ebp], ecx
  01289	eb 27		 jmp	 SHORT $LN209@draw_aircr
$LN208@draw_aircr:
  0128b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  01291	81 c2 af 00 00
	00		 add	 edx, 175		; 000000afH
  01297	52		 push	 edx
  01298	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0129d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  012a2	50		 push	 eax
  012a3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  012a8	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv660[ebp], 0
$LN209@draw_aircr:
  012b2	b9 01 00 00 00	 mov	 ecx, 1
  012b7	85 c9		 test	 ecx, ecx
  012b9	74 0c		 je	 SHORT $LN210@draw_aircr
  012bb	c7 85 98 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv668[ebp], 24 ; 00000018H
  012c5	eb 27		 jmp	 SHORT $LN211@draw_aircr
$LN210@draw_aircr:
  012c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  012cd	81 c2 af 00 00
	00		 add	 edx, 175		; 000000afH
  012d3	52		 push	 edx
  012d4	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  012d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  012de	50		 push	 eax
  012df	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  012e4	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv668[ebp], 0
$LN211@draw_aircr:
  012ee	6a 18		 push	 24			; 00000018H
  012f0	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _launched_weapon$9[ebp]
  012f6	51		 push	 ecx
  012f7	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv660[ebp], 180
  01301	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv668[ebp]
  01307	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0130e	ff d1		 call	 ecx
  01310	89 85 00 ff ff
	ff		 mov	 DWORD PTR _launched_weapon$9[ebp], eax

; 5146 : 								}

  01316	e9 07 fe ff ff	 jmp	 $LN8@draw_aircr
$LN9@draw_aircr:

; 5147 : 
; 5148 : 								if (draw_threat_line)

  0131b	83 bd f4 fe ff
	ff 00		 cmp	 DWORD PTR _draw_threat_line$6[ebp], 0
  01322	0f 84 2d 01 00
	00		 je	 $LN33@draw_aircr

; 5149 : 								{
; 5150 : 									threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  01328	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0132f	74 10		 je	 SHORT $LN212@draw_aircr
  01331	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  01337	8b 08		 mov	 ecx, DWORD PTR [eax]
  01339	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv681[ebp], ecx
  0133f	eb 27		 jmp	 SHORT $LN213@draw_aircr
$LN212@draw_aircr:
  01341	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  01347	81 c2 b4 00 00
	00		 add	 edx, 180		; 000000b4H
  0134d	52		 push	 edx
  0134e	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01353	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01358	50		 push	 eax
  01359	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0135e	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv681[ebp], 0
$LN213@draw_aircr:
  01368	b9 01 00 00 00	 mov	 ecx, 1
  0136d	85 c9		 test	 ecx, ecx
  0136f	74 0c		 je	 SHORT $LN214@draw_aircr
  01371	c7 85 98 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv689[ebp], 8
  0137b	eb 27		 jmp	 SHORT $LN215@draw_aircr
$LN214@draw_aircr:
  0137d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  01383	81 c2 b4 00 00
	00		 add	 edx, 180		; 000000b4H
  01389	52		 push	 edx
  0138a	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0138f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  01394	50		 push	 eax
  01395	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0139a	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv689[ebp], 0
$LN215@draw_aircr:
  013a4	6a 08		 push	 8
  013a6	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  013ac	51		 push	 ecx
  013ad	6b 95 9c fe ff
	ff 60		 imul	 edx, DWORD PTR tv681[ebp], 96
  013b4	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv689[ebp]
  013ba	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  013c1	ff d1		 call	 ecx
  013c3	89 85 fc fe ff
	ff		 mov	 DWORD PTR _threat_position$8[ebp], eax

; 5151 : 
; 5152 : 									dx = (threat_position->x - source_position->x) * scale;

  013c9	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  013cf	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  013d5	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  013d9	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  013dd	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  013e5	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 5153 : 									dy = (threat_position->z - source_position->z) * scale;

  013ed	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  013f3	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  013f9	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  013fe	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  01403	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0140b	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _dy$3[ebp], xmm0

; 5154 : 
; 5155 : 									draw_2d_line (0.0, 0.0, dx, dy, MFD_COLOUR1);

  01413	b8 04 00 00 00	 mov	 eax, 4
  01418	6b c8 00	 imul	 ecx, eax, 0
  0141b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01421	52		 push	 edx
  01422	51		 push	 ecx
  01423	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  0142b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01430	51		 push	 ecx
  01431	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  01439	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0143e	51		 push	 ecx
  0143f	0f 57 c0	 xorps	 xmm0, xmm0
  01442	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01447	51		 push	 ecx
  01448	0f 57 c0	 xorps	 xmm0, xmm0
  0144b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01450	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN33@draw_aircr:

; 5156 : 								}
; 5157 : 							}
; 5158 : 						}
; 5159 : 					}
; 5160 : 				}
; 5161 : 			}
; 5162 : 
; 5163 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_GUNSHIP_TARGET);

  01455	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0145c	74 10		 je	 SHORT $LN216@draw_aircr
  0145e	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  01464	8b 08		 mov	 ecx, DWORD PTR [eax]
  01466	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv716[ebp], ecx
  0146c	eb 27		 jmp	 SHORT $LN217@draw_aircr
$LN216@draw_aircr:
  0146e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  01474	81 c2 c1 00 00
	00		 add	 edx, 193		; 000000c1H
  0147a	52		 push	 edx
  0147b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01480	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01485	50		 push	 eax
  01486	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0148b	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv716[ebp], 0
$LN217@draw_aircr:
  01495	b9 01 00 00 00	 mov	 ecx, 1
  0149a	85 c9		 test	 ecx, ecx
  0149c	74 0c		 je	 SHORT $LN218@draw_aircr
  0149e	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv724[ebp], 18 ; 00000012H
  014a8	eb 27		 jmp	 SHORT $LN219@draw_aircr
$LN218@draw_aircr:
  014aa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  014b0	81 c2 c1 00 00
	00		 add	 edx, 193		; 000000c1H
  014b6	52		 push	 edx
  014b7	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  014bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  014c1	50		 push	 eax
  014c2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  014c7	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv724[ebp], 0
$LN219@draw_aircr:
  014d1	6a 12		 push	 18			; 00000012H
  014d3	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  014d9	51		 push	 ecx
  014da	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv716[ebp], 180
  014e4	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv724[ebp]
  014ea	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  014f1	ff d1		 call	 ecx
  014f3	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 5164 : 		}

  014f9	e9 35 f8 ff ff	 jmp	 $LN6@draw_aircr
$LN7@draw_aircr:

; 5165 : 
; 5166 : 		//
; 5167 : 		// draw incoming missiles
; 5168 : 		//
; 5169 : 
; 5170 : 		threat = get_local_entity_first_child (source, LIST_TYPE_TARGET);

  014fe	83 bd 18 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01505	74 10		 je	 SHORT $LN220@draw_aircr
  01507	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0150d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0150f	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv736[ebp], ecx
  01515	eb 27		 jmp	 SHORT $LN221@draw_aircr
$LN220@draw_aircr:
  01517	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  0151d	81 c2 c8 00 00
	00		 add	 edx, 200		; 000000c8H
  01523	52		 push	 edx
  01524	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01529	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0152e	50		 push	 eax
  0152f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01534	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv736[ebp], 0
$LN221@draw_aircr:
  0153e	b9 01 00 00 00	 mov	 ecx, 1
  01543	85 c9		 test	 ecx, ecx
  01545	74 0c		 je	 SHORT $LN222@draw_aircr
  01547	c7 85 98 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv744[ebp], 38 ; 00000026H
  01551	eb 27		 jmp	 SHORT $LN223@draw_aircr
$LN222@draw_aircr:
  01553	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  01559	81 c2 c8 00 00
	00		 add	 edx, 200		; 000000c8H
  0155f	52		 push	 edx
  01560	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01565	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0156a	50		 push	 eax
  0156b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01570	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv744[ebp], 0
$LN223@draw_aircr:
  0157a	6a 26		 push	 38			; 00000026H
  0157c	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  01582	51		 push	 ecx
  01583	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv736[ebp], 180
  0158d	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv744[ebp]
  01593	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0159a	ff d1		 call	 ecx
  0159c	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN10@draw_aircr:

; 5171 : 
; 5172 : 		while (threat)

  015a2	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  015a9	0f 84 a7 03 00
	00		 je	 $LN11@draw_aircr

; 5173 : 		{
; 5174 : 			threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  015af	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  015b6	74 10		 je	 SHORT $LN224@draw_aircr
  015b8	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  015be	8b 08		 mov	 ecx, DWORD PTR [eax]
  015c0	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv757[ebp], ecx
  015c6	eb 27		 jmp	 SHORT $LN225@draw_aircr
$LN224@draw_aircr:
  015c8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  015ce	81 c2 cc 00 00
	00		 add	 edx, 204		; 000000ccH
  015d4	52		 push	 edx
  015d5	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  015da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  015df	50		 push	 eax
  015e0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  015e5	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv757[ebp], 0
$LN225@draw_aircr:
  015ef	b9 01 00 00 00	 mov	 ecx, 1
  015f4	85 c9		 test	 ecx, ecx
  015f6	74 0c		 je	 SHORT $LN226@draw_aircr
  015f8	c7 85 98 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv765[ebp], 233 ; 000000e9H
  01602	eb 27		 jmp	 SHORT $LN227@draw_aircr
$LN226@draw_aircr:
  01604	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  0160a	81 c2 cc 00 00
	00		 add	 edx, 204		; 000000ccH
  01610	52		 push	 edx
  01611	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01616	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0161b	50		 push	 eax
  0161c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01621	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv765[ebp], 0
$LN227@draw_aircr:
  0162b	68 e9 00 00 00	 push	 233			; 000000e9H
  01630	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  01636	51		 push	 ecx
  01637	69 95 9c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv757[ebp], 1116
  01641	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv765[ebp]
  01647	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  0164e	ff d1		 call	 ecx
  01650	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 5175 : 
; 5176 : 			if ((threat_type == THREAT_TYPE_RF_MISSILE) || (threat_type == THREAT_TYPE_IR_MISSILE) || (threat_type == THREAT_TYPE_LASER_MISSILE))

  01656	83 bd f8 fe ff
	ff 01		 cmp	 DWORD PTR _threat_type$7[ebp], 1
  0165d	74 16		 je	 SHORT $LN35@draw_aircr
  0165f	83 bd f8 fe ff
	ff 02		 cmp	 DWORD PTR _threat_type$7[ebp], 2
  01666	74 0d		 je	 SHORT $LN35@draw_aircr
  01668	83 bd f8 fe ff
	ff 03		 cmp	 DWORD PTR _threat_type$7[ebp], 3
  0166f	0f 85 38 02 00
	00		 jne	 $LN41@draw_aircr
$LN35@draw_aircr:

; 5177 : 			{
; 5178 : 				threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  01675	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0167c	74 10		 je	 SHORT $LN228@draw_aircr
  0167e	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  01684	8b 08		 mov	 ecx, DWORD PTR [eax]
  01686	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv780[ebp], ecx
  0168c	eb 27		 jmp	 SHORT $LN229@draw_aircr
$LN228@draw_aircr:
  0168e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  01694	81 c2 d0 00 00
	00		 add	 edx, 208		; 000000d0H
  0169a	52		 push	 edx
  0169b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  016a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  016a5	50		 push	 eax
  016a6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  016ab	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv780[ebp], 0
$LN229@draw_aircr:
  016b5	b9 01 00 00 00	 mov	 ecx, 1
  016ba	85 c9		 test	 ecx, ecx
  016bc	74 0c		 je	 SHORT $LN230@draw_aircr
  016be	c7 85 98 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv788[ebp], 8
  016c8	eb 27		 jmp	 SHORT $LN231@draw_aircr
$LN230@draw_aircr:
  016ca	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  016d0	81 c2 d0 00 00
	00		 add	 edx, 208		; 000000d0H
  016d6	52		 push	 edx
  016d7	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  016dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  016e1	50		 push	 eax
  016e2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  016e7	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv788[ebp], 0
$LN231@draw_aircr:
  016f1	6a 08		 push	 8
  016f3	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  016f9	51		 push	 ecx
  016fa	6b 95 9c fe ff
	ff 60		 imul	 edx, DWORD PTR tv780[ebp], 96
  01701	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv788[ebp]
  01707	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0170e	ff d1		 call	 ecx
  01710	89 85 fc fe ff
	ff		 mov	 DWORD PTR _threat_position$8[ebp], eax

; 5179 : 
; 5180 : 				dx = (threat_position->x - source_position->x) * scale;

  01716	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  0171c	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01722	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01726	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0172a	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01732	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 5181 : 				dy = (threat_position->z - source_position->z) * scale;

  0173a	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  01740	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01746	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0174b	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  01750	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01758	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _dy$3[ebp], xmm0

; 5182 : 
; 5183 : 				if (threat_type == THREAT_TYPE_RF_MISSILE)

  01760	83 bd f8 fe ff
	ff 01		 cmp	 DWORD PTR _threat_type$7[ebp], 1
  01767	75 2a		 jne	 SHORT $LN36@draw_aircr

; 5184 : 				{
; 5185 : 					fg_colour = MFD_COLOUR_YELLOW;

  01769	b8 04 00 00 00	 mov	 eax, 4
  0176e	6b c8 0d	 imul	 ecx, eax, 13
  01771	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01777	89 95 0c ff ff
	ff		 mov	 DWORD PTR _fg_colour$[ebp], edx

; 5186 : 					bg_colour = MFD_COLOUR_DARK_YELLOW;

  0177d	b8 04 00 00 00	 mov	 eax, 4
  01782	6b c8 0e	 imul	 ecx, eax, 14
  01785	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0178b	89 95 08 ff ff
	ff		 mov	 DWORD PTR _bg_colour$[ebp], edx
  01791	eb 5b		 jmp	 SHORT $LN39@draw_aircr
$LN36@draw_aircr:

; 5187 : 				}
; 5188 : 				else if (threat_type == THREAT_TYPE_IR_MISSILE)

  01793	83 bd f8 fe ff
	ff 02		 cmp	 DWORD PTR _threat_type$7[ebp], 2
  0179a	75 2a		 jne	 SHORT $LN38@draw_aircr

; 5189 : 				{
; 5190 : 					fg_colour = MFD_COLOUR_RED;

  0179c	b8 04 00 00 00	 mov	 eax, 4
  017a1	6b c8 0f	 imul	 ecx, eax, 15
  017a4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  017aa	89 95 0c ff ff
	ff		 mov	 DWORD PTR _fg_colour$[ebp], edx

; 5191 : 					bg_colour = MFD_COLOUR_DARK_RED;

  017b0	b8 04 00 00 00	 mov	 eax, 4
  017b5	6b c8 12	 imul	 ecx, eax, 18
  017b8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  017be	89 95 08 ff ff
	ff		 mov	 DWORD PTR _bg_colour$[ebp], edx

; 5192 : 				}
; 5193 : 				else

  017c4	eb 28		 jmp	 SHORT $LN39@draw_aircr
$LN38@draw_aircr:

; 5194 : 				{
; 5195 : 					fg_colour = MFD_COLOUR_BLUE;

  017c6	b8 04 00 00 00	 mov	 eax, 4
  017cb	6b c8 0c	 imul	 ecx, eax, 12
  017ce	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  017d4	89 95 0c ff ff
	ff		 mov	 DWORD PTR _fg_colour$[ebp], edx

; 5196 : 					bg_colour = MFD_COLOUR_DARK_BLUE;

  017da	b8 04 00 00 00	 mov	 eax, 4
  017df	6b c8 11	 imul	 ecx, eax, 17
  017e2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  017e8	89 95 08 ff ff
	ff		 mov	 DWORD PTR _bg_colour$[ebp], edx
$LN39@draw_aircr:

; 5197 : 				}
; 5198 : 
; 5199 : 				if (draw_large_mfd)

  017ee	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  017f5	74 5c		 je	 SHORT $LN40@draw_aircr

; 5200 : 				{
; 5201 : 					draw_2d_mono_sprite (large_ase_missile_mask, dx, dy, bg_colour);

  017f7	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _bg_colour$[ebp]
  017fd	50		 push	 eax
  017fe	51		 push	 ecx
  017ff	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  01807	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0180c	51		 push	 ecx
  0180d	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  01815	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0181a	68 00 00 00 00	 push	 OFFSET ?large_ase_missile_mask@@3PADA
  0181f	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 5202 : 
; 5203 : 					draw_2d_mono_sprite (large_ase_missile, dx, dy, fg_colour);

  01824	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _fg_colour$[ebp]
  0182a	50		 push	 eax
  0182b	51		 push	 ecx
  0182c	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  01834	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01839	51		 push	 ecx
  0183a	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  01842	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01847	68 00 00 00 00	 push	 OFFSET ?large_ase_missile@@3PADA
  0184c	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 5204 : 				}
; 5205 : 				else

  01851	eb 5a		 jmp	 SHORT $LN41@draw_aircr
$LN40@draw_aircr:

; 5206 : 				{
; 5207 : 					draw_2d_mono_sprite (small_ase_missile_mask, dx, dy, bg_colour);

  01853	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _bg_colour$[ebp]
  01859	50		 push	 eax
  0185a	51		 push	 ecx
  0185b	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  01863	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01868	51		 push	 ecx
  01869	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  01871	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01876	68 00 00 00 00	 push	 OFFSET ?small_ase_missile_mask@@3PADA
  0187b	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 5208 : 
; 5209 : 					draw_2d_mono_sprite (small_ase_missile, dx, dy, fg_colour);

  01880	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _fg_colour$[ebp]
  01886	50		 push	 eax
  01887	51		 push	 ecx
  01888	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  01890	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01895	51		 push	 ecx
  01896	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  0189e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018a3	68 00 00 00 00	 push	 OFFSET ?small_ase_missile@@3PADA
  018a8	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN41@draw_aircr:

; 5210 : 				}
; 5211 : 			}
; 5212 : 
; 5213 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_TARGET);

  018ad	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  018b4	74 10		 je	 SHORT $LN232@draw_aircr
  018b6	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  018bc	8b 08		 mov	 ecx, DWORD PTR [eax]
  018be	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv845[ebp], ecx
  018c4	eb 27		 jmp	 SHORT $LN233@draw_aircr
$LN232@draw_aircr:
  018c6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  018cc	81 c2 f3 00 00
	00		 add	 edx, 243		; 000000f3H
  018d2	52		 push	 edx
  018d3	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  018d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  018dd	50		 push	 eax
  018de	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  018e3	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv845[ebp], 0
$LN233@draw_aircr:
  018ed	b9 01 00 00 00	 mov	 ecx, 1
  018f2	85 c9		 test	 ecx, ecx
  018f4	74 0c		 je	 SHORT $LN234@draw_aircr
  018f6	c7 85 98 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv853[ebp], 38 ; 00000026H
  01900	eb 27		 jmp	 SHORT $LN235@draw_aircr
$LN234@draw_aircr:
  01902	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  01908	81 c2 f3 00 00
	00		 add	 edx, 243		; 000000f3H
  0190e	52		 push	 edx
  0190f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01914	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01919	50		 push	 eax
  0191a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0191f	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv853[ebp], 0
$LN235@draw_aircr:
  01929	6a 26		 push	 38			; 00000026H
  0192b	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  01931	51		 push	 ecx
  01932	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv845[ebp], 180
  0193c	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv853[ebp]
  01942	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01949	ff d1		 call	 ecx
  0194b	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 5214 : 		}

  01951	e9 4c fc ff ff	 jmp	 $LN10@draw_aircr
$LN11@draw_aircr:

; 5215 : 
; 5216 : 		set_2d_window_rotation (mfd_env, 0.0);

  01956	51		 push	 ecx
  01957	0f 57 c0	 xorps	 xmm0, xmm0
  0195a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0195f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01964	50		 push	 eax
  01965	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 5217 : 	}
; 5218 : 
; 5219 : 	////////////////////////////////////////
; 5220 : 	//
; 5221 : 	// aircraft datum symbol
; 5222 : 	//
; 5223 : 	////////////////////////////////////////
; 5224 : 
; 5225 : 	if (draw_large_mfd)

  0196a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01971	74 58		 je	 SHORT $LN42@draw_aircr

; 5226 : 	{
; 5227 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum_mask, 0.0, 0.0, MFD_COLOUR6);

  01973	b8 04 00 00 00	 mov	 eax, 4
  01978	6b c8 05	 imul	 ecx, eax, 5
  0197b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01981	52		 push	 edx
  01982	51		 push	 ecx
  01983	0f 57 c0	 xorps	 xmm0, xmm0
  01986	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0198b	51		 push	 ecx
  0198c	0f 57 c0	 xorps	 xmm0, xmm0
  0198f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01994	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum_mask@@3PADA
  01999	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 5228 : 
; 5229 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum, 0.0, 0.0, MFD_COLOUR1);

  0199e	b8 04 00 00 00	 mov	 eax, 4
  019a3	6b c8 00	 imul	 ecx, eax, 0
  019a6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  019ac	52		 push	 edx
  019ad	51		 push	 ecx
  019ae	0f 57 c0	 xorps	 xmm0, xmm0
  019b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019b6	51		 push	 ecx
  019b7	0f 57 c0	 xorps	 xmm0, xmm0
  019ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019bf	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum@@3PADA
  019c4	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 5230 : 	}
; 5231 : 	else

  019c9	eb 56		 jmp	 SHORT $LN43@draw_aircr
$LN42@draw_aircr:

; 5232 : 	{
; 5233 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum_mask, 0.0, 0.0, MFD_COLOUR6);

  019cb	b8 04 00 00 00	 mov	 eax, 4
  019d0	6b c8 05	 imul	 ecx, eax, 5
  019d3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  019d9	52		 push	 edx
  019da	51		 push	 ecx
  019db	0f 57 c0	 xorps	 xmm0, xmm0
  019de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019e3	51		 push	 ecx
  019e4	0f 57 c0	 xorps	 xmm0, xmm0
  019e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019ec	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum_mask@@3PADA
  019f1	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 5234 : 
; 5235 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum, 0.0, 0.0, MFD_COLOUR1);

  019f6	b8 04 00 00 00	 mov	 eax, 4
  019fb	6b c8 00	 imul	 ecx, eax, 0
  019fe	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a04	52		 push	 edx
  01a05	51		 push	 ecx
  01a06	0f 57 c0	 xorps	 xmm0, xmm0
  01a09	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a0e	51		 push	 ecx
  01a0f	0f 57 c0	 xorps	 xmm0, xmm0
  01a12	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a17	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum@@3PADA
  01a1c	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN43@draw_aircr:

; 5236 : 	}
; 5237 : 
; 5238 : 	set_mono_font_colour (MFD_COLOUR1);

  01a21	b8 04 00 00 00	 mov	 eax, 4
  01a26	6b c8 00	 imul	 ecx, eax, 0
  01a29	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a2f	52		 push	 edx
  01a30	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5239 : 
; 5240 : 	if (draw_large_mfd)

  01a35	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01a3c	74 09		 je	 SHORT $LN44@draw_aircr

; 5241 : 	{
; 5242 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  01a3e	6a 05		 push	 5
  01a40	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 5243 : 	}
; 5244 : 	else

  01a45	eb 07		 jmp	 SHORT $LN45@draw_aircr
$LN44@draw_aircr:

; 5245 : 	{
; 5246 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  01a47	6a 01		 push	 1
  01a49	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN45@draw_aircr:

; 5247 : 	}
; 5248 : 
; 5249 : 	////////////////////////////////////////
; 5250 : 	//
; 5251 : 	// text
; 5252 : 	//
; 5253 : 	////////////////////////////////////////
; 5254 : 
; 5255 : 	//
; 5256 : 	// closest incoming missile
; 5257 : 	//
; 5258 : 
; 5259 : 	{
; 5260 : 		entity
; 5261 : 			*closest_missile;
; 5262 : 
; 5263 : 		float
; 5264 : 			time_to_impact;
; 5265 : 
; 5266 : 		if (draw_large_mfd)

  01a4e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01a55	74 12		 je	 SHORT $LN46@draw_aircr

; 5267 : 		{
; 5268 : 			y_adjust = 5.0;

  01a57	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  01a5f	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5269 : 		}
; 5270 : 		else

  01a67	eb 10		 jmp	 SHORT $LN47@draw_aircr
$LN46@draw_aircr:

; 5271 : 		{
; 5272 : 			y_adjust = 2.0;

  01a69	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  01a71	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN47@draw_aircr:

; 5273 : 		}
; 5274 : 
; 5275 : 		set_mono_font_colour(MFD_COLOUR1);

  01a79	b8 04 00 00 00	 mov	 eax, 4
  01a7e	6b c8 00	 imul	 ecx, eax, 0
  01a81	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a87	52		 push	 edx
  01a88	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5276 : 		set_2d_mono_font_position (-0.8, 1.0);

  01a8d	51		 push	 ecx
  01a8e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01a96	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a9b	51		 push	 ecx
  01a9c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  01aa4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aa9	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5277 : 
; 5278 : 		set_mono_font_rel_position (1.0, y_adjust);

  01aae	51		 push	 ecx
  01aaf	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01ab7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01abc	51		 push	 ecx
  01abd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01ac5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aca	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5279 : 
; 5280 : 		closest_missile = get_closest_missile (source, source_position, THREAT_TYPE_IR_MISSILE, &time_to_impact);

  01acf	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _time_to_impact$1[ebp]
  01ad5	50		 push	 eax
  01ad6	6a 02		 push	 2
  01ad8	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01ade	51		 push	 ecx
  01adf	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01ae5	52		 push	 edx
  01ae6	e8 00 00 00 00	 call	 ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ; get_closest_missile
  01aeb	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _closest_missile$2[ebp], eax

; 5281 : 
; 5282 : 		if (closest_missile)

  01af1	83 bd e4 fe ff
	ff 00		 cmp	 DWORD PTR _closest_missile$2[ebp], 0
  01af8	0f 84 9d 00 00
	00		 je	 $LN48@draw_aircr

; 5283 : 		{
; 5284 : 			sprintf (buffer, "IR MSL:%.1f", time_to_impact);

  01afe	f3 0f 5a 85 e0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _time_to_impact$1[ebp]
  01b06	83 ec 08	 sub	 esp, 8
  01b09	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01b0e	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@
  01b13	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01b19	50		 push	 eax
  01b1a	e8 00 00 00 00	 call	 _sprintf
  01b1f	83 c4 10	 add	 esp, 16			; 00000010H

; 5285 : 
; 5286 : 			print_mono_font_string (buffer);

  01b22	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01b28	50		 push	 eax
  01b29	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5287 : 
; 5288 : 			if (draw_large_mfd)

  01b2e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01b35	74 12		 je	 SHORT $LN49@draw_aircr

; 5289 : 			{
; 5290 : 				y_adjust = 2.0;

  01b37	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  01b3f	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5291 : 			}
; 5292 : 			else

  01b47	eb 10		 jmp	 SHORT $LN50@draw_aircr
$LN49@draw_aircr:

; 5293 : 			{
; 5294 : 				y_adjust = 2.0;

  01b49	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  01b51	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN50@draw_aircr:

; 5295 : 			}
; 5296 : 
; 5297 : 			set_2d_mono_font_position (-0.8, 0.9);

  01b59	51		 push	 ecx
  01b5a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01b62	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b67	51		 push	 ecx
  01b68	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  01b70	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b75	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5298 : 
; 5299 : 			set_mono_font_rel_position (1.0, y_adjust);

  01b7a	51		 push	 ecx
  01b7b	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01b83	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b88	51		 push	 ecx
  01b89	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01b91	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b96	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN48@draw_aircr:

; 5300 : 		}
; 5301 : 
; 5302 : 		closest_missile = get_closest_missile (source, source_position, THREAT_TYPE_RF_MISSILE, &time_to_impact);

  01b9b	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _time_to_impact$1[ebp]
  01ba1	50		 push	 eax
  01ba2	6a 01		 push	 1
  01ba4	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01baa	51		 push	 ecx
  01bab	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01bb1	52		 push	 edx
  01bb2	e8 00 00 00 00	 call	 ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ; get_closest_missile
  01bb7	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _closest_missile$2[ebp], eax

; 5303 : 
; 5304 : 		if (closest_missile)

  01bbd	83 bd e4 fe ff
	ff 00		 cmp	 DWORD PTR _closest_missile$2[ebp], 0
  01bc4	0f 84 9d 00 00
	00		 je	 $LN51@draw_aircr

; 5305 : 		{
; 5306 : 			sprintf (buffer, "RF MSL:%.1f", time_to_impact);

  01bca	f3 0f 5a 85 e0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _time_to_impact$1[ebp]
  01bd2	83 ec 08	 sub	 esp, 8
  01bd5	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01bda	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@
  01bdf	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01be5	50		 push	 eax
  01be6	e8 00 00 00 00	 call	 _sprintf
  01beb	83 c4 10	 add	 esp, 16			; 00000010H

; 5307 : 
; 5308 : 			print_mono_font_string (buffer);

  01bee	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01bf4	50		 push	 eax
  01bf5	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5309 : 
; 5310 : 			if (draw_large_mfd)

  01bfa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01c01	74 12		 je	 SHORT $LN52@draw_aircr

; 5311 : 			{
; 5312 : 				y_adjust = -2.0;

  01c03	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  01c0b	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5313 : 			}
; 5314 : 			else

  01c13	eb 10		 jmp	 SHORT $LN53@draw_aircr
$LN52@draw_aircr:

; 5315 : 			{
; 5316 : 				y_adjust = 3.0;

  01c15	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  01c1d	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN53@draw_aircr:

; 5317 : 			}
; 5318 : 
; 5319 : 			set_2d_mono_font_position (-0.8, 0.8);

  01c25	51		 push	 ecx
  01c26	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  01c2e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c33	51		 push	 ecx
  01c34	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  01c3c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c41	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5320 : 
; 5321 : 			set_mono_font_rel_position (1.0, y_adjust);

  01c46	51		 push	 ecx
  01c47	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01c4f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c54	51		 push	 ecx
  01c55	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01c5d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c62	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN51@draw_aircr:

; 5322 : 		}
; 5323 : 
; 5324 : 		closest_missile = get_closest_missile (source, source_position, THREAT_TYPE_LASER_MISSILE, &time_to_impact);

  01c67	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _time_to_impact$1[ebp]
  01c6d	50		 push	 eax
  01c6e	6a 03		 push	 3
  01c70	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01c76	51		 push	 ecx
  01c77	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01c7d	52		 push	 edx
  01c7e	e8 00 00 00 00	 call	 ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ; get_closest_missile
  01c83	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _closest_missile$2[ebp], eax

; 5325 : 
; 5326 : 		if (closest_missile)

  01c89	83 bd e4 fe ff
	ff 00		 cmp	 DWORD PTR _closest_missile$2[ebp], 0
  01c90	74 30		 je	 SHORT $LN54@draw_aircr

; 5327 : 		{
; 5328 : 			sprintf (buffer, "LS MSL:%.1f", time_to_impact);

  01c92	f3 0f 5a 85 e0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _time_to_impact$1[ebp]
  01c9a	83 ec 08	 sub	 esp, 8
  01c9d	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01ca2	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@
  01ca7	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01cad	50		 push	 eax
  01cae	e8 00 00 00 00	 call	 _sprintf
  01cb3	83 c4 10	 add	 esp, 16			; 00000010H

; 5329 : 
; 5330 : 			print_mono_font_string (buffer);

  01cb6	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01cbc	50		 push	 eax
  01cbd	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN54@draw_aircr:

; 5331 : 		}
; 5332 : 	}
; 5333 : 
; 5334 : 	//
; 5335 : 	// ASE range
; 5336 : 	//
; 5337 : 
; 5338 : 	if (tsd_ase_range == TSD_ASE_RANGE_2000)

  01cc2	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  01cca	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  01cd1	9f		 lahf
  01cd2	f6 c4 44	 test	 ah, 68			; 00000044H
  01cd5	7a 09		 jp	 SHORT $LN55@draw_aircr

; 5339 : 	{
; 5340 : 		s = "2Km";

  01cd7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03CIAFGHAC@2Km@
  01cde	eb 61		 jmp	 SHORT $LN62@draw_aircr
$LN55@draw_aircr:

; 5341 : 	}
; 5342 : 	else if (tsd_ase_range == TSD_ASE_RANGE_5000)

  01ce0	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  01ce8	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  01cef	9f		 lahf
  01cf0	f6 c4 44	 test	 ah, 68			; 00000044H
  01cf3	7a 09		 jp	 SHORT $LN57@draw_aircr

; 5343 : 	{
; 5344 : 		s = "5Km";

  01cf5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03LFNCFPLL@5Km@
  01cfc	eb 43		 jmp	 SHORT $LN62@draw_aircr
$LN57@draw_aircr:

; 5345 : 	}
; 5346 : 	else if (tsd_ase_range == TSD_ASE_RANGE_10000)

  01cfe	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  01d06	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  01d0d	9f		 lahf
  01d0e	f6 c4 44	 test	 ah, 68			; 00000044H
  01d11	7a 09		 jp	 SHORT $LN59@draw_aircr

; 5347 : 	{
; 5348 : 		s = "10Km";

  01d13	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04PJCLBGLO@10Km@
  01d1a	eb 25		 jmp	 SHORT $LN62@draw_aircr
$LN59@draw_aircr:

; 5349 : 	}
; 5350 : 	else if (tsd_ase_range == TSD_ASE_RANGE_25000)

  01d1c	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  01d24	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  01d2b	9f		 lahf
  01d2c	f6 c4 44	 test	 ah, 68			; 00000044H
  01d2f	7a 09		 jp	 SHORT $LN61@draw_aircr

; 5351 : 	{
; 5352 : 		s = "25Km";

  01d31	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04IJFFJMFM@25Km@

; 5353 : 	}
; 5354 : 	else

  01d38	eb 07		 jmp	 SHORT $LN62@draw_aircr
$LN61@draw_aircr:

; 5355 : 	{
; 5356 : 		s = "XXX";

  01d3a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN62@draw_aircr:

; 5357 : 	}
; 5358 : 
; 5359 : 	width = get_mono_font_string_width (s);

  01d41	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  01d44	50		 push	 eax
  01d45	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01d4a	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 5360 : 
; 5361 : 	if (draw_large_mfd)

  01d50	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01d57	74 12		 je	 SHORT $LN63@draw_aircr

; 5362 : 	{
; 5363 : 		y_adjust = 5.0;

  01d59	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  01d61	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5364 : 	}
; 5365 : 	else

  01d69	eb 10		 jmp	 SHORT $LN64@draw_aircr
$LN63@draw_aircr:

; 5366 : 	{
; 5367 : 		y_adjust = 2.0;

  01d6b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  01d73	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN64@draw_aircr:

; 5368 : 	}
; 5369 : 
; 5370 : 	set_2d_mono_font_position (0.8, 1.0);

  01d7b	51		 push	 ecx
  01d7c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01d84	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d89	51		 push	 ecx
  01d8a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  01d92	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d97	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5371 : 
; 5372 : 	set_mono_font_rel_position (-width, y_adjust);

  01d9c	51		 push	 ecx
  01d9d	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01da5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01daa	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  01db2	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01db9	51		 push	 ecx
  01dba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dbf	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5373 : 
; 5374 : 	print_mono_font_string (s);

  01dc4	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  01dc7	50		 push	 eax
  01dc8	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5375 : 
; 5376 : 	//
; 5377 : 	// jammers
; 5378 : 	//
; 5379 : 
; 5380 : 	if (draw_large_mfd)

  01dcd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01dd4	0f 84 d2 00 00
	00		 je	 $LN65@draw_aircr

; 5381 : 	{
; 5382 : 		if (apache_damage.infra_red_jammer)

  01dda	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  01ddf	c1 e8 08	 shr	 eax, 8
  01de2	83 e0 01	 and	 eax, 1
  01de5	74 0c		 je	 SHORT $LN67@draw_aircr

; 5383 : 		{
; 5384 : 			s = "IR JAM XXX";

  01de7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@DADPKEOI@IR?5JAM?5XXX@

; 5385 : 		}
; 5386 : 		else

  01dee	e9 a4 00 00 00	 jmp	 $LN70@draw_aircr
$LN67@draw_aircr:

; 5387 : 		{
; 5388 : 			if (get_local_entity_int_value (source, INT_TYPE_INFRA_RED_JAMMER_ON))

  01df3	83 bd 18 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01dfa	74 10		 je	 SHORT $LN236@draw_aircr
  01dfc	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01e02	8b 08		 mov	 ecx, DWORD PTR [eax]
  01e04	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv997[ebp], ecx
  01e0a	eb 20		 jmp	 SHORT $LN237@draw_aircr
$LN236@draw_aircr:
  01e0c	68 0c 15 00 00	 push	 5388			; 0000150cH
  01e11	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01e16	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01e1c	52		 push	 edx
  01e1d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01e22	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv997[ebp], 0
$LN237@draw_aircr:
  01e2c	b8 01 00 00 00	 mov	 eax, 1
  01e31	85 c0		 test	 eax, eax
  01e33	74 0c		 je	 SHORT $LN238@draw_aircr
  01e35	c7 85 98 fe ff
	ff 68 00 00 00	 mov	 DWORD PTR tv1004[ebp], 104 ; 00000068H
  01e3f	eb 20		 jmp	 SHORT $LN239@draw_aircr
$LN238@draw_aircr:
  01e41	68 0c 15 00 00	 push	 5388			; 0000150cH
  01e46	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01e4b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01e51	51		 push	 ecx
  01e52	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01e57	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1004[ebp], 0
$LN239@draw_aircr:
  01e61	6a 68		 push	 104			; 00000068H
  01e63	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01e69	52		 push	 edx
  01e6a	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv997[ebp], 1116
  01e74	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv1004[ebp]
  01e7a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01e81	ff d2		 call	 edx
  01e83	85 c0		 test	 eax, eax
  01e85	74 09		 je	 SHORT $LN69@draw_aircr

; 5389 : 			{
; 5390 : 				s = "IR JAM ON";

  01e87	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_09OKBKNIAL@IR?5JAM?5ON@

; 5391 : 			}
; 5392 : 			else

  01e8e	eb 07		 jmp	 SHORT $LN70@draw_aircr
$LN69@draw_aircr:

; 5393 : 			{
; 5394 : 				s = "IR JAM OFF";

  01e90	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@
$LN70@draw_aircr:

; 5395 : 			}
; 5396 : 		}
; 5397 : 
; 5398 : 		y_adjust = -25.0;

  01e97	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  01e9f	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5399 : 	}
; 5400 : 	else

  01ea7	e9 cd 00 00 00	 jmp	 $LN66@draw_aircr
$LN65@draw_aircr:

; 5401 : 	{
; 5402 : 		if (apache_damage.infra_red_jammer)

  01eac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  01eb1	c1 e8 08	 shr	 eax, 8
  01eb4	83 e0 01	 and	 eax, 1
  01eb7	74 0c		 je	 SHORT $LN71@draw_aircr

; 5403 : 		{
; 5404 : 			s = "IR XXX";

  01eb9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06CNPDBJMK@IR?5XXX@

; 5405 : 		}
; 5406 : 		else

  01ec0	e9 a4 00 00 00	 jmp	 $LN74@draw_aircr
$LN71@draw_aircr:

; 5407 : 		{
; 5408 : 			if (get_local_entity_int_value (source, INT_TYPE_INFRA_RED_JAMMER_ON))

  01ec5	83 bd 18 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01ecc	74 10		 je	 SHORT $LN240@draw_aircr
  01ece	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01ed4	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ed6	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv1019[ebp], ecx
  01edc	eb 20		 jmp	 SHORT $LN241@draw_aircr
$LN240@draw_aircr:
  01ede	68 20 15 00 00	 push	 5408			; 00001520H
  01ee3	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01ee8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01eee	52		 push	 edx
  01eef	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01ef4	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1019[ebp], 0
$LN241@draw_aircr:
  01efe	b8 01 00 00 00	 mov	 eax, 1
  01f03	85 c0		 test	 eax, eax
  01f05	74 0c		 je	 SHORT $LN242@draw_aircr
  01f07	c7 85 98 fe ff
	ff 68 00 00 00	 mov	 DWORD PTR tv1026[ebp], 104 ; 00000068H
  01f11	eb 20		 jmp	 SHORT $LN243@draw_aircr
$LN242@draw_aircr:
  01f13	68 20 15 00 00	 push	 5408			; 00001520H
  01f18	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01f1d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01f23	51		 push	 ecx
  01f24	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01f29	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1026[ebp], 0
$LN243@draw_aircr:
  01f33	6a 68		 push	 104			; 00000068H
  01f35	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01f3b	52		 push	 edx
  01f3c	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1019[ebp], 1116
  01f46	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv1026[ebp]
  01f4c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01f53	ff d2		 call	 edx
  01f55	85 c0		 test	 eax, eax
  01f57	74 09		 je	 SHORT $LN73@draw_aircr

; 5409 : 			{
; 5410 : 				s = "IR ON";

  01f59	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_05JBLHJOBL@IR?5ON@

; 5411 : 			}
; 5412 : 			else

  01f60	eb 07		 jmp	 SHORT $LN74@draw_aircr
$LN73@draw_aircr:

; 5413 : 			{
; 5414 : 				s = "IR OFF";

  01f62	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06CCMEMHEJ@IR?5OFF@
$LN74@draw_aircr:

; 5415 : 			}
; 5416 : 		}
; 5417 : 
; 5418 : 		y_adjust = -12.0;

  01f69	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  01f71	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN66@draw_aircr:

; 5419 : 	}
; 5420 : 
; 5421 : 	set_2d_mono_font_position (-0.8, -1.0);

  01f79	51		 push	 ecx
  01f7a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01f82	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f87	51		 push	 ecx
  01f88	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  01f90	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f95	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5422 : 
; 5423 : 	set_mono_font_rel_position (1.0, y_adjust);

  01f9a	51		 push	 ecx
  01f9b	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01fa3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fa8	51		 push	 ecx
  01fa9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01fb1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fb6	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5424 : 
; 5425 : 	print_mono_font_string (s);

  01fbb	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  01fbe	50		 push	 eax
  01fbf	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5426 : 
; 5427 : 	if (draw_large_mfd)

  01fc4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01fcb	0f 84 d5 00 00
	00		 je	 $LN75@draw_aircr

; 5428 : 	{
; 5429 : 		if (apache_damage.radar_jammer)

  01fd1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  01fd6	c1 e8 07	 shr	 eax, 7
  01fd9	83 e0 01	 and	 eax, 1
  01fdc	74 0c		 je	 SHORT $LN77@draw_aircr

; 5430 : 		{
; 5431 : 			s = "RD JAM XXX";

  01fde	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@

; 5432 : 		}
; 5433 : 		else

  01fe5	e9 a7 00 00 00	 jmp	 $LN80@draw_aircr
$LN77@draw_aircr:

; 5434 : 		{
; 5435 : 			if (get_local_entity_int_value (source, INT_TYPE_RADAR_JAMMER_ON))

  01fea	83 bd 18 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01ff1	74 10		 je	 SHORT $LN244@draw_aircr
  01ff3	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01ff9	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ffb	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv1047[ebp], ecx
  02001	eb 20		 jmp	 SHORT $LN245@draw_aircr
$LN244@draw_aircr:
  02003	68 3b 15 00 00	 push	 5435			; 0000153bH
  02008	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0200d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02013	52		 push	 edx
  02014	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02019	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1047[ebp], 0
$LN245@draw_aircr:
  02023	b8 01 00 00 00	 mov	 eax, 1
  02028	85 c0		 test	 eax, eax
  0202a	74 0c		 je	 SHORT $LN246@draw_aircr
  0202c	c7 85 98 fe ff
	ff a8 00 00 00	 mov	 DWORD PTR tv1054[ebp], 168 ; 000000a8H
  02036	eb 20		 jmp	 SHORT $LN247@draw_aircr
$LN246@draw_aircr:
  02038	68 3b 15 00 00	 push	 5435			; 0000153bH
  0203d	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  02042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  02048	51		 push	 ecx
  02049	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0204e	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1054[ebp], 0
$LN247@draw_aircr:
  02058	68 a8 00 00 00	 push	 168			; 000000a8H
  0205d	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  02063	52		 push	 edx
  02064	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1047[ebp], 1116
  0206e	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv1054[ebp]
  02074	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0207b	ff d2		 call	 edx
  0207d	85 c0		 test	 eax, eax
  0207f	74 09		 je	 SHORT $LN79@draw_aircr

; 5436 : 			{
; 5437 : 				s = "RD JAM ON";

  02081	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_09OKIOJJOP@RD?5JAM?5ON@

; 5438 : 			}
; 5439 : 			else

  02088	eb 07		 jmp	 SHORT $LN80@draw_aircr
$LN79@draw_aircr:

; 5440 : 			{
; 5441 : 				s = "RD JAM OFF";

  0208a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@
$LN80@draw_aircr:

; 5442 : 			}
; 5443 : 		}
; 5444 : 
; 5445 : 		y_adjust = -12.0;

  02091	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  02099	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5446 : 	}
; 5447 : 	else

  020a1	e9 d0 00 00 00	 jmp	 $LN76@draw_aircr
$LN75@draw_aircr:

; 5448 : 	{
; 5449 : 		if (apache_damage.radar_jammer)

  020a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  020ab	c1 e8 07	 shr	 eax, 7
  020ae	83 e0 01	 and	 eax, 1
  020b1	74 0c		 je	 SHORT $LN81@draw_aircr

; 5450 : 		{
; 5451 : 			s = "RD XXX";

  020b3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06JNKFDAHI@RD?5XXX@

; 5452 : 		}
; 5453 : 		else

  020ba	e9 a7 00 00 00	 jmp	 $LN84@draw_aircr
$LN81@draw_aircr:

; 5454 : 		{
; 5455 : 			if (get_local_entity_int_value (source, INT_TYPE_RADAR_JAMMER_ON))

  020bf	83 bd 18 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  020c6	74 10		 je	 SHORT $LN248@draw_aircr
  020c8	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  020ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  020d0	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv1069[ebp], ecx
  020d6	eb 20		 jmp	 SHORT $LN249@draw_aircr
$LN248@draw_aircr:
  020d8	68 4f 15 00 00	 push	 5455			; 0000154fH
  020dd	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  020e2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  020e8	52		 push	 edx
  020e9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  020ee	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1069[ebp], 0
$LN249@draw_aircr:
  020f8	b8 01 00 00 00	 mov	 eax, 1
  020fd	85 c0		 test	 eax, eax
  020ff	74 0c		 je	 SHORT $LN250@draw_aircr
  02101	c7 85 98 fe ff
	ff a8 00 00 00	 mov	 DWORD PTR tv1076[ebp], 168 ; 000000a8H
  0210b	eb 20		 jmp	 SHORT $LN251@draw_aircr
$LN250@draw_aircr:
  0210d	68 4f 15 00 00	 push	 5455			; 0000154fH
  02112	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  02117	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0211d	51		 push	 ecx
  0211e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02123	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1076[ebp], 0
$LN251@draw_aircr:
  0212d	68 a8 00 00 00	 push	 168			; 000000a8H
  02132	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  02138	52		 push	 edx
  02139	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1069[ebp], 1116
  02143	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv1076[ebp]
  02149	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  02150	ff d2		 call	 edx
  02152	85 c0		 test	 eax, eax
  02154	74 09		 je	 SHORT $LN83@draw_aircr

; 5456 : 			{
; 5457 : 				s = "RD ON";

  02156	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_05BHAGAOGB@RD?5ON@

; 5458 : 			}
; 5459 : 			else

  0215d	eb 07		 jmp	 SHORT $LN84@draw_aircr
$LN83@draw_aircr:

; 5460 : 			{
; 5461 : 				s = "RD OFF";

  0215f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06JCJCOOPL@RD?5OFF@
$LN84@draw_aircr:

; 5462 : 			}
; 5463 : 		}
; 5464 : 
; 5465 : 		y_adjust = -5.0;

  02166	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  0216e	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN76@draw_aircr:

; 5466 : 	}
; 5467 : 
; 5468 : 	set_2d_mono_font_position (-0.8, -1.0);

  02176	51		 push	 ecx
  02177	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0217f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02184	51		 push	 ecx
  02185	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0218d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02192	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5469 : 
; 5470 : 	set_mono_font_rel_position (1.0, y_adjust);

  02197	51		 push	 ecx
  02198	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  021a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021a5	51		 push	 ecx
  021a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  021ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021b3	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5471 : 
; 5472 : 	print_mono_font_string (s);

  021b8	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  021bb	50		 push	 eax
  021bc	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5473 : 
; 5474 : 	//
; 5475 : 	// auto-countermeasures
; 5476 : 	//
; 5477 : 
; 5478 : 	if (get_global_auto_counter_measures() || get_global_ase_auto_page())

  021c1	83 3d 90 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+144, 0
  021c8	75 0d		 jne	 SHORT $LN86@draw_aircr
  021ca	83 3d 64 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868, 0
  021d1	0f 84 0d 01 00
	00		 je	 $LN90@draw_aircr
$LN86@draw_aircr:

; 5479 : 	{
; 5480 : 
; 5481 : 		if (draw_large_mfd)

  021d7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  021de	74 12		 je	 SHORT $LN87@draw_aircr

; 5482 : 		{
; 5483 : 			y_adjust = -38.0;

  021e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2180000
  021e8	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5484 : 		}
; 5485 : 		else

  021f0	eb 10		 jmp	 SHORT $LN88@draw_aircr
$LN87@draw_aircr:

; 5486 : 		{
; 5487 : 			y_adjust = -19.0;

  021f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1980000
  021fa	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN88@draw_aircr:

; 5488 : 		}
; 5489 : 
; 5490 : 		if (get_global_auto_counter_measures())

  02202	83 3d 90 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+144, 0
  02209	74 68		 je	 SHORT $LN89@draw_aircr

; 5491 : 		{
; 5492 : 			s = "AUTO C/M";

  0220b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_08NKOLJMOI@AUTO?5C?1M@

; 5493 : 			width = get_mono_font_string_width (s);

  02212	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02215	50		 push	 eax
  02216	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0221b	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 5494 : 
; 5495 : 			set_2d_mono_font_position (0.8, -1.0);

  02221	51		 push	 ecx
  02222	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0222a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0222f	51		 push	 ecx
  02230	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  02238	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0223d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5496 : 			set_mono_font_rel_position (-width, y_adjust);

  02242	51		 push	 ecx
  02243	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0224b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02250	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  02258	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0225f	51		 push	 ecx
  02260	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02265	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5497 : 
; 5498 : 			print_mono_font_string(s);

  0226a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0226d	50		 push	 eax
  0226e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN89@draw_aircr:

; 5499 : 		}
; 5500 : 
; 5501 : 		if (get_global_ase_auto_page())

  02273	83 3d 64 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868, 0
  0227a	74 68		 je	 SHORT $LN90@draw_aircr

; 5502 : 		{
; 5503 : 			s = "AUTO PAGE";

  0227c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_09NCCLNCCC@AUTO?5PAGE@

; 5504 : 			width = get_mono_font_string_width (s);

  02283	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02286	50		 push	 eax
  02287	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0228c	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 5505 : 
; 5506 : 			set_2d_mono_font_position (0.9, 0.9);

  02292	51		 push	 ecx
  02293	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0229b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022a0	51		 push	 ecx
  022a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  022a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022ae	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5507 : 			set_mono_font_rel_position (-width, 5.0);

  022b3	51		 push	 ecx
  022b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  022bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022c1	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  022c9	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  022d0	51		 push	 ecx
  022d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022d6	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5508 : 
; 5509 : 			print_mono_font_string (s);

  022db	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  022de	50		 push	 eax
  022df	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN90@draw_aircr:

; 5510 : 		}
; 5511 : 	}
; 5512 : 
; 5513 : 	//
; 5514 : 	// chaff
; 5515 : 	//
; 5516 : 
; 5517 : 	if (draw_large_mfd)

  022e4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  022eb	74 58		 je	 SHORT $LN91@draw_aircr

; 5518 : 	{
; 5519 : 		if (apache_damage.chaff_dispenser)

  022ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  022f2	c1 e8 1d	 shr	 eax, 29			; 0000001dH
  022f5	83 e0 01	 and	 eax, 1
  022f8	74 16		 je	 SHORT $LN93@draw_aircr

; 5520 : 		{
; 5521 : 			sprintf (buffer, "CHAFF:XX");

  022fa	68 00 00 00 00	 push	 OFFSET ??_C@_08GHAEIHAP@CHAFF?3XX@
  022ff	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02305	50		 push	 eax
  02306	e8 00 00 00 00	 call	 _sprintf
  0230b	83 c4 08	 add	 esp, 8

; 5522 : 		}
; 5523 : 		else

  0230e	eb 23		 jmp	 SHORT $LN94@draw_aircr
$LN93@draw_aircr:

; 5524 : 		{
; 5525 : 			sprintf (buffer, "CHAFF:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_CHAFF));

  02310	6a 43		 push	 67			; 00000043H
  02312	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  02318	50		 push	 eax
  02319	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  0231e	50		 push	 eax
  0231f	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@
  02324	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0232a	51		 push	 ecx
  0232b	e8 00 00 00 00	 call	 _sprintf
  02330	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN94@draw_aircr:

; 5526 : 		}
; 5527 : 
; 5528 : 		y_adjust = -25.0;

  02333	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  0233b	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5529 : 	}
; 5530 : 	else

  02343	eb 56		 jmp	 SHORT $LN92@draw_aircr
$LN91@draw_aircr:

; 5531 : 	{
; 5532 : 		if (apache_damage.chaff_dispenser)

  02345	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  0234a	c1 e8 1d	 shr	 eax, 29			; 0000001dH
  0234d	83 e0 01	 and	 eax, 1
  02350	74 16		 je	 SHORT $LN95@draw_aircr

; 5533 : 		{
; 5534 : 			sprintf (buffer, "C:XX");

  02352	68 00 00 00 00	 push	 OFFSET ??_C@_04KJNFJKOK@C?3XX@
  02357	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0235d	50		 push	 eax
  0235e	e8 00 00 00 00	 call	 _sprintf
  02363	83 c4 08	 add	 esp, 8

; 5535 : 		}
; 5536 : 		else

  02366	eb 23		 jmp	 SHORT $LN96@draw_aircr
$LN95@draw_aircr:

; 5537 : 		{
; 5538 : 			sprintf (buffer, "C:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_CHAFF));

  02368	6a 43		 push	 67			; 00000043H
  0236a	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  02370	50		 push	 eax
  02371	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  02376	50		 push	 eax
  02377	68 00 00 00 00	 push	 OFFSET ??_C@_06GNOFKMCG@C?3?$CF02d@
  0237c	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  02382	51		 push	 ecx
  02383	e8 00 00 00 00	 call	 _sprintf
  02388	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN96@draw_aircr:

; 5539 : 		}
; 5540 : 
; 5541 : 		y_adjust = -12.0;

  0238b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  02393	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN92@draw_aircr:

; 5542 : 	}
; 5543 : 
; 5544 : 	width = get_mono_font_string_width (buffer);

  0239b	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  023a1	50		 push	 eax
  023a2	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  023a7	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 5545 : 
; 5546 : 	set_2d_mono_font_position (0.8, -1.0);

  023ad	51		 push	 ecx
  023ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  023b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023bb	51		 push	 ecx
  023bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  023c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023c9	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5547 : 
; 5548 : 	set_mono_font_rel_position (-width, y_adjust);

  023ce	51		 push	 ecx
  023cf	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  023d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023dc	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  023e4	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  023eb	51		 push	 ecx
  023ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023f1	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5549 : 
; 5550 : 	print_mono_font_string (buffer);

  023f6	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  023fc	50		 push	 eax
  023fd	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5551 : 
; 5552 : 	//
; 5553 : 	// flares
; 5554 : 	//
; 5555 : 
; 5556 : 	if (draw_large_mfd)

  02402	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02409	74 58		 je	 SHORT $LN97@draw_aircr

; 5557 : 	{
; 5558 : 		if (apache_damage.flare_dispenser)

  0240b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  02410	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02413	83 e0 01	 and	 eax, 1
  02416	74 16		 je	 SHORT $LN99@draw_aircr

; 5559 : 		{
; 5560 : 			sprintf (buffer, "FLARE:XX");

  02418	68 00 00 00 00	 push	 OFFSET ??_C@_08HGDOPGOH@FLARE?3XX@
  0241d	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02423	50		 push	 eax
  02424	e8 00 00 00 00	 call	 _sprintf
  02429	83 c4 08	 add	 esp, 8

; 5561 : 		}
; 5562 : 		else

  0242c	eb 23		 jmp	 SHORT $LN100@draw_aircr
$LN99@draw_aircr:

; 5563 : 		{
; 5564 : 			sprintf (buffer, "FLARE:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_FLARE));

  0242e	6a 44		 push	 68			; 00000044H
  02430	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  02436	50		 push	 eax
  02437	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  0243c	50		 push	 eax
  0243d	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@
  02442	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  02448	51		 push	 ecx
  02449	e8 00 00 00 00	 call	 _sprintf
  0244e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN100@draw_aircr:

; 5565 : 		}
; 5566 : 
; 5567 : 		y_adjust = -12.0;

  02451	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  02459	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5568 : 	}
; 5569 : 	else

  02461	eb 56		 jmp	 SHORT $LN98@draw_aircr
$LN97@draw_aircr:

; 5570 : 	{
; 5571 : 		if (apache_damage.flare_dispenser)

  02463	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  02468	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0246b	83 e0 01	 and	 eax, 1
  0246e	74 16		 je	 SHORT $LN101@draw_aircr

; 5572 : 		{
; 5573 : 			sprintf (buffer, "F:XX");

  02470	68 00 00 00 00	 push	 OFFSET ??_C@_04GBDFBFJK@F?3XX@
  02475	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0247b	50		 push	 eax
  0247c	e8 00 00 00 00	 call	 _sprintf
  02481	83 c4 08	 add	 esp, 8

; 5574 : 		}
; 5575 : 		else

  02484	eb 23		 jmp	 SHORT $LN102@draw_aircr
$LN101@draw_aircr:

; 5576 : 		{
; 5577 : 			sprintf (buffer, "F:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_FLARE));

  02486	6a 44		 push	 68			; 00000044H
  02488	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0248e	50		 push	 eax
  0248f	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  02494	50		 push	 eax
  02495	68 00 00 00 00	 push	 OFFSET ??_C@_06DPNNIDIB@F?3?$CF02d@
  0249a	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  024a0	51		 push	 ecx
  024a1	e8 00 00 00 00	 call	 _sprintf
  024a6	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN102@draw_aircr:

; 5578 : 		}
; 5579 : 
; 5580 : 		y_adjust = -5.0;

  024a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  024b1	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN98@draw_aircr:

; 5581 : 	}
; 5582 : 
; 5583 : 	width = get_mono_font_string_width (buffer);

  024b9	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  024bf	50		 push	 eax
  024c0	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  024c5	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 5584 : 
; 5585 : 	set_2d_mono_font_position (0.8, -1.0);

  024cb	51		 push	 ecx
  024cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  024d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024d9	51		 push	 ecx
  024da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  024e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024e7	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5586 : 
; 5587 : 	set_mono_font_rel_position (-width, y_adjust);

  024ec	51		 push	 ecx
  024ed	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  024f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024fa	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  02502	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  02509	51		 push	 ecx
  0250a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0250f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5588 : 
; 5589 : 	print_mono_font_string (buffer);

  02514	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0251a	50		 push	 eax
  0251b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5590 : }

  02520	5f		 pop	 edi
  02521	5e		 pop	 esi
  02522	5b		 pop	 ebx
  02523	8b e5		 mov	 esp, ebp
  02525	5d		 pop	 ebp
  02526	c3		 ret	 0
?draw_aircraft_survivability_equipment_display_mfd@@YGXXZ ENDP ; draw_aircraft_survivability_equipment_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z
_TEXT	SEGMENT
tv253 = -128						; size = 4
tv190 = -128						; size = 4
tv167 = -128						; size = 4
tv146 = -128						; size = 4
tv95 = -128						; size = 4
tv245 = -124						; size = 4
tv223 = -124						; size = 4
tv182 = -124						; size = 4
tv159 = -124						; size = 4
tv139 = -124						; size = 4
tv87 = -124						; size = 4
$T1 = -120						; size = 4
_attitude$ = -52					; size = 4
_uvec_threat_to_target$ = -48				; size = 12
_threat_position$ = -36					; size = 4
_cos_error$ = -32					; size = 4
_length$ = -28						; size = 4
_time_to_impact$ = -24					; size = 4
_threat_velocity$ = -20					; size = 4
_threat_range$ = -16					; size = 4
_overshot$ = -12					; size = 4
_closest_missile$ = -8					; size = 4
_threat$ = -4						; size = 4
_source$ = 8						; size = 4
_source_position$ = 12					; size = 4
_threat_type$ = 16					; size = 4
_closest_missile_time_to_impact$ = 20			; size = 4
?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z PROC ; get_closest_missile, COMDAT

; 4867 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 4868 : 	entity
; 4869 : 		*threat,
; 4870 : 		*closest_missile;
; 4871 : 
; 4872 : 	int
; 4873 : 		overshot;
; 4874 : 
; 4875 : 	float
; 4876 : 		threat_range,
; 4877 : 		threat_velocity,
; 4878 : 		time_to_impact,
; 4879 : 		length,
; 4880 : 		cos_error;
; 4881 : 
; 4882 : 	vec3d
; 4883 : 		*threat_position,
; 4884 : 		uvec_threat_to_target;
; 4885 : 
; 4886 : 	matrix3x3
; 4887 : 		*attitude;
; 4888 : 
; 4889 : 	ASSERT (source);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _source$[ebp], 0
  00010	75 18		 jne	 SHORT $LN4@get_closes
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00017	83 c0 16	 add	 eax, 22			; 00000016H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06OEKOLKIL@source@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_closes:

; 4890 : 
; 4891 : 	ASSERT (source_position);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _source_position$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN5@get_closes
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00035	83 c0 18	 add	 eax, 24			; 00000018H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IIPCKJML@source_position@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@get_closes:

; 4892 : 
; 4893 : 	ASSERT ((threat_type == THREAT_TYPE_RF_MISSILE) || (threat_type == THREAT_TYPE_IR_MISSILE) || (threat_type == THREAT_TYPE_LASER_MISSILE));

  00048	83 7d 10 01	 cmp	 DWORD PTR _threat_type$[ebp], 1
  0004c	74 24		 je	 SHORT $LN6@get_closes
  0004e	83 7d 10 02	 cmp	 DWORD PTR _threat_type$[ebp], 2
  00052	74 1e		 je	 SHORT $LN6@get_closes
  00054	83 7d 10 03	 cmp	 DWORD PTR _threat_type$[ebp], 3
  00058	74 18		 je	 SHORT $LN6@get_closes
  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  0005f	83 c0 1a	 add	 eax, 26			; 0000001aH
  00062	50		 push	 eax
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@
  0006d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_closes:

; 4894 : 
; 4895 : 	closest_missile = NULL;

  00072	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _closest_missile$[ebp], 0

; 4896 : 
; 4897 : 	*closest_missile_time_to_impact = 1000000.0;

  00079	8b 45 14	 mov	 eax, DWORD PTR _closest_missile_time_to_impact$[ebp]
  0007c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@49742400
  00084	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 4898 : 
; 4899 : 	threat = get_local_entity_first_child (get_gunship_entity (), LIST_TYPE_TARGET);

  00088	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0008f	74 0c		 je	 SHORT $LN15@get_closes
  00091	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00096	8b 08		 mov	 ecx, DWORD PTR [eax]
  00098	89 4d 84	 mov	 DWORD PTR tv87[ebp], ecx
  0009b	eb 21		 jmp	 SHORT $LN16@get_closes
$LN15@get_closes:
  0009d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  000a3	83 c2 20	 add	 edx, 32			; 00000020H
  000a6	52		 push	 edx
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b7	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$LN16@get_closes:
  000be	b9 01 00 00 00	 mov	 ecx, 1
  000c3	85 c9		 test	 ecx, ecx
  000c5	74 09		 je	 SHORT $LN17@get_closes
  000c7	c7 45 80 26 00
	00 00		 mov	 DWORD PTR tv95[ebp], 38	; 00000026H
  000ce	eb 21		 jmp	 SHORT $LN18@get_closes
$LN17@get_closes:
  000d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  000d6	83 c2 20	 add	 edx, 32			; 00000020H
  000d9	52		 push	 edx
  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  000df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ea	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv95[ebp], 0
$LN18@get_closes:
  000f1	6a 26		 push	 38			; 00000026H
  000f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000f9	51		 push	 ecx
  000fa	69 55 84 b4 00
	00 00		 imul	 edx, DWORD PTR tv87[ebp], 180
  00101	8b 45 80	 mov	 eax, DWORD PTR tv95[ebp]
  00104	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0010b	ff d1		 call	 ecx
  0010d	89 45 fc	 mov	 DWORD PTR _threat$[ebp], eax
$LN2@get_closes:

; 4900 : 
; 4901 : 	while (threat)

  00110	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  00114	0f 84 74 03 00
	00		 je	 $LN3@get_closes

; 4902 : 	{
; 4903 : 		if (get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE) == threat_type)

  0011a	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0011e	74 0a		 je	 SHORT $LN19@get_closes
  00120	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  00123	8b 08		 mov	 ecx, DWORD PTR [eax]
  00125	89 4d 84	 mov	 DWORD PTR tv139[ebp], ecx
  00128	eb 1d		 jmp	 SHORT $LN20@get_closes
$LN19@get_closes:
  0012a	68 27 13 00 00	 push	 4903			; 00001327H
  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00134	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0013a	52		 push	 edx
  0013b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00140	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv139[ebp], 0
$LN20@get_closes:
  00147	b8 01 00 00 00	 mov	 eax, 1
  0014c	85 c0		 test	 eax, eax
  0014e	74 09		 je	 SHORT $LN21@get_closes
  00150	c7 45 80 e9 00
	00 00		 mov	 DWORD PTR tv146[ebp], 233 ; 000000e9H
  00157	eb 1d		 jmp	 SHORT $LN22@get_closes
$LN21@get_closes:
  00159	68 27 13 00 00	 push	 4903			; 00001327H
  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00163	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00169	51		 push	 ecx
  0016a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0016f	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv146[ebp], 0
$LN22@get_closes:
  00176	68 e9 00 00 00	 push	 233			; 000000e9H
  0017b	8b 55 fc	 mov	 edx, DWORD PTR _threat$[ebp]
  0017e	52		 push	 edx
  0017f	69 45 84 5c 04
	00 00		 imul	 eax, DWORD PTR tv139[ebp], 1116
  00186	8b 4d 80	 mov	 ecx, DWORD PTR tv146[ebp]
  00189	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00190	ff d2		 call	 edx
  00192	3b 45 10	 cmp	 eax, DWORD PTR _threat_type$[ebp]
  00195	0f 85 6e 02 00
	00		 jne	 $LN13@get_closes

; 4904 : 		{
; 4905 : 			threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  0019b	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0019f	74 0a		 je	 SHORT $LN23@get_closes
  001a1	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  001a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a6	89 4d 84	 mov	 DWORD PTR tv159[ebp], ecx
  001a9	eb 21		 jmp	 SHORT $LN24@get_closes
$LN23@get_closes:
  001ab	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  001b1	83 c2 26	 add	 edx, 38			; 00000026H
  001b4	52		 push	 edx
  001b5	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001bf	50		 push	 eax
  001c0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c5	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv159[ebp], 0
$LN24@get_closes:
  001cc	b9 01 00 00 00	 mov	 ecx, 1
  001d1	85 c9		 test	 ecx, ecx
  001d3	74 09		 je	 SHORT $LN25@get_closes
  001d5	c7 45 80 08 00
	00 00		 mov	 DWORD PTR tv167[ebp], 8
  001dc	eb 21		 jmp	 SHORT $LN26@get_closes
$LN25@get_closes:
  001de	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  001e4	83 c2 26	 add	 edx, 38			; 00000026H
  001e7	52		 push	 edx
  001e8	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001f2	50		 push	 eax
  001f3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001f8	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv167[ebp], 0
$LN26@get_closes:
  001ff	6a 08		 push	 8
  00201	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00204	51		 push	 ecx
  00205	6b 55 84 60	 imul	 edx, DWORD PTR tv159[ebp], 96
  00209	8b 45 80	 mov	 eax, DWORD PTR tv167[ebp]
  0020c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00213	ff d1		 call	 ecx
  00215	89 45 dc	 mov	 DWORD PTR _threat_position$[ebp], eax

; 4906 : 
; 4907 : 			threat_range = get_3d_range (source_position, threat_position);

  00218	8b 45 dc	 mov	 eax, DWORD PTR _threat_position$[ebp]
  0021b	50		 push	 eax
  0021c	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  0021f	51		 push	 ecx
  00220	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  00225	d9 5d f0	 fstp	 DWORD PTR _threat_range$[ebp]

; 4908 : 
; 4909 : 			threat_velocity = get_local_entity_float_value (threat, FLOAT_TYPE_VELOCITY);

  00228	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0022c	74 0a		 je	 SHORT $LN27@get_closes
  0022e	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  00231	8b 08		 mov	 ecx, DWORD PTR [eax]
  00233	89 4d 84	 mov	 DWORD PTR tv182[ebp], ecx
  00236	eb 21		 jmp	 SHORT $LN28@get_closes
$LN27@get_closes:
  00238	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  0023e	83 c2 2a	 add	 edx, 42			; 0000002aH
  00241	52		 push	 edx
  00242	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00247	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0024c	50		 push	 eax
  0024d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00252	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv182[ebp], 0
$LN28@get_closes:
  00259	b9 01 00 00 00	 mov	 ecx, 1
  0025e	85 c9		 test	 ecx, ecx
  00260	74 09		 je	 SHORT $LN29@get_closes
  00262	c7 45 80 93 00
	00 00		 mov	 DWORD PTR tv190[ebp], 147 ; 00000093H
  00269	eb 21		 jmp	 SHORT $LN30@get_closes
$LN29@get_closes:
  0026b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00271	83 c2 2a	 add	 edx, 42			; 0000002aH
  00274	52		 push	 edx
  00275	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0027a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0027f	50		 push	 eax
  00280	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00285	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv190[ebp], 0
$LN30@get_closes:
  0028c	68 93 00 00 00	 push	 147			; 00000093H
  00291	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00294	51		 push	 ecx
  00295	69 55 84 bc 02
	00 00		 imul	 edx, DWORD PTR tv182[ebp], 700
  0029c	8b 45 80	 mov	 eax, DWORD PTR tv190[ebp]
  0029f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  002a6	ff d1		 call	 ecx
  002a8	d9 5d ec	 fstp	 DWORD PTR _threat_velocity$[ebp]

; 4910 : 
; 4911 : 			time_to_impact = threat_range / max (threat_velocity, 1.0f);

  002ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002b3	f3 0f 11 45 88	 movss	 DWORD PTR $T1[ebp], xmm0
  002b8	8d 45 88	 lea	 eax, DWORD PTR $T1[ebp]
  002bb	50		 push	 eax
  002bc	8d 4d ec	 lea	 ecx, DWORD PTR _threat_velocity$[ebp]
  002bf	51		 push	 ecx
  002c0	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  002c5	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _threat_range$[ebp]
  002ca	f3 0f 5e 00	 divss	 xmm0, DWORD PTR [eax]
  002ce	f3 0f 11 45 e8	 movss	 DWORD PTR _time_to_impact$[ebp], xmm0

; 4912 : 
; 4913 : 			//
; 4914 : 			// guard against 'overshot target' to prevent spurious indications
; 4915 : 			//
; 4916 : 
; 4917 : 			overshot = FALSE;

  002d3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _overshot$[ebp], 0

; 4918 : 
; 4919 : 			if (time_to_impact < 1.0)

  002da	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _time_to_impact$[ebp]
  002df	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  002e7	66 0f 2f c8	 comisd	 xmm1, xmm0
  002eb	0f 86 f3 00 00
	00		 jbe	 $LN10@get_closes

; 4920 : 			{
; 4921 : 				uvec_threat_to_target.x = source_position->x - threat_position->x;

  002f1	8b 45 0c	 mov	 eax, DWORD PTR _source_position$[ebp]
  002f4	8b 4d dc	 mov	 ecx, DWORD PTR _threat_position$[ebp]
  002f7	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002fb	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  002ff	f3 0f 11 45 d0	 movss	 DWORD PTR _uvec_threat_to_target$[ebp], xmm0

; 4922 : 				uvec_threat_to_target.y = source_position->y - threat_position->y;

  00304	8b 45 0c	 mov	 eax, DWORD PTR _source_position$[ebp]
  00307	8b 4d dc	 mov	 ecx, DWORD PTR _threat_position$[ebp]
  0030a	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0030f	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00314	f3 0f 11 45 d4	 movss	 DWORD PTR _uvec_threat_to_target$[ebp+4], xmm0

; 4923 : 				uvec_threat_to_target.z = source_position->z - threat_position->z;

  00319	8b 45 0c	 mov	 eax, DWORD PTR _source_position$[ebp]
  0031c	8b 4d dc	 mov	 ecx, DWORD PTR _threat_position$[ebp]
  0031f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00324	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00329	f3 0f 11 45 d8	 movss	 DWORD PTR _uvec_threat_to_target$[ebp+8], xmm0

; 4924 : 
; 4925 : 				length = get_3d_vector_magnitude (&uvec_threat_to_target);

  0032e	8d 45 d0	 lea	 eax, DWORD PTR _uvec_threat_to_target$[ebp]
  00331	50		 push	 eax
  00332	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  00337	d9 5d e4	 fstp	 DWORD PTR _length$[ebp]

; 4926 : 
; 4927 : 				if (length > 1.0)

  0033a	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  0033f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  00347	0f 86 90 00 00
	00		 jbe	 $LN9@get_closes

; 4928 : 				{
; 4929 : 					normalise_3d_vector_given_magnitude (&uvec_threat_to_target, length);

  0034d	51		 push	 ecx
  0034e	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _length$[ebp]
  00353	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00358	8d 45 d0	 lea	 eax, DWORD PTR _uvec_threat_to_target$[ebp]
  0035b	50		 push	 eax
  0035c	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 4930 : 
; 4931 : 					attitude = get_local_entity_attitude_matrix_ptr (threat);

  00361	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  00365	74 0a		 je	 SHORT $LN31@get_closes
  00367	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  0036a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0036c	89 4d 84	 mov	 DWORD PTR tv223[ebp], ecx
  0036f	eb 21		 jmp	 SHORT $LN32@get_closes
$LN31@get_closes:
  00371	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00377	83 c2 40	 add	 edx, 64			; 00000040H
  0037a	52		 push	 edx
  0037b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00380	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00385	50		 push	 eax
  00386	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0038b	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv223[ebp], 0
$LN32@get_closes:
  00392	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00395	51		 push	 ecx
  00396	8b 55 84	 mov	 edx, DWORD PTR tv223[ebp]
  00399	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_attitude_matrix_ptr@@3PAP6GPAY122MPAUENTITY@@@ZA[edx*4]
  003a0	ff d0		 call	 eax
  003a2	89 45 cc	 mov	 DWORD PTR _attitude$[ebp], eax

; 4932 : 
; 4933 : 					cos_error = get_3d_unit_vector_dot_product ((vec3d *) &((*attitude) [2][0]), &uvec_threat_to_target);

  003a5	8d 45 d0	 lea	 eax, DWORD PTR _uvec_threat_to_target$[ebp]
  003a8	50		 push	 eax
  003a9	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  003ae	d1 e1		 shl	 ecx, 1
  003b0	03 4d cc	 add	 ecx, DWORD PTR _attitude$[ebp]
  003b3	ba 04 00 00 00	 mov	 edx, 4
  003b8	6b c2 00	 imul	 eax, edx, 0
  003bb	03 c8		 add	 ecx, eax
  003bd	51		 push	 ecx
  003be	e8 00 00 00 00	 call	 ?get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z ; get_3d_unit_vector_dot_product
  003c3	d9 5d e0	 fstp	 DWORD PTR _cos_error$[ebp]

; 4934 : 
; 4935 : 					if (cos_error < 0.0)

  003c6	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _cos_error$[ebp]
  003cb	0f 57 c9	 xorps	 xmm1, xmm1
  003ce	66 0f 2f c8	 comisd	 xmm1, xmm0
  003d2	76 07		 jbe	 SHORT $LN11@get_closes

; 4936 : 					{
; 4937 : 						overshot = TRUE;

  003d4	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _overshot$[ebp], 1
$LN11@get_closes:

; 4938 : 					}
; 4939 : 				}
; 4940 : 				else

  003db	eb 07		 jmp	 SHORT $LN10@get_closes
$LN9@get_closes:

; 4941 : 				{
; 4942 : 					overshot = TRUE;

  003dd	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _overshot$[ebp], 1
$LN10@get_closes:

; 4943 : 				}
; 4944 : 			}
; 4945 : 
; 4946 : 			if (!overshot)

  003e4	83 7d f4 00	 cmp	 DWORD PTR _overshot$[ebp], 0
  003e8	75 1f		 jne	 SHORT $LN13@get_closes

; 4947 : 			{
; 4948 : 				if (time_to_impact < *closest_missile_time_to_impact)

  003ea	8b 45 14	 mov	 eax, DWORD PTR _closest_missile_time_to_impact$[ebp]
  003ed	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  003f1	0f 2f 45 e8	 comiss	 xmm0, DWORD PTR _time_to_impact$[ebp]
  003f5	76 12		 jbe	 SHORT $LN13@get_closes

; 4949 : 				{
; 4950 : 					closest_missile = threat;

  003f7	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  003fa	89 45 f8	 mov	 DWORD PTR _closest_missile$[ebp], eax

; 4951 : 
; 4952 : 					*closest_missile_time_to_impact = time_to_impact;

  003fd	8b 45 14	 mov	 eax, DWORD PTR _closest_missile_time_to_impact$[ebp]
  00400	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _time_to_impact$[ebp]
  00405	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
$LN13@get_closes:

; 4953 : 				}
; 4954 : 			}
; 4955 : 		}
; 4956 : 
; 4957 : 		threat = get_local_entity_child_succ (threat, LIST_TYPE_TARGET);

  00409	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0040d	74 0a		 je	 SHORT $LN33@get_closes
  0040f	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  00412	8b 08		 mov	 ecx, DWORD PTR [eax]
  00414	89 4d 84	 mov	 DWORD PTR tv245[ebp], ecx
  00417	eb 21		 jmp	 SHORT $LN34@get_closes
$LN33@get_closes:
  00419	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  0041f	83 c2 5a	 add	 edx, 90			; 0000005aH
  00422	52		 push	 edx
  00423	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00428	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0042d	50		 push	 eax
  0042e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00433	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv245[ebp], 0
$LN34@get_closes:
  0043a	b9 01 00 00 00	 mov	 ecx, 1
  0043f	85 c9		 test	 ecx, ecx
  00441	74 09		 je	 SHORT $LN35@get_closes
  00443	c7 45 80 26 00
	00 00		 mov	 DWORD PTR tv253[ebp], 38 ; 00000026H
  0044a	eb 21		 jmp	 SHORT $LN36@get_closes
$LN35@get_closes:
  0044c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00452	83 c2 5a	 add	 edx, 90			; 0000005aH
  00455	52		 push	 edx
  00456	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0045b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00460	50		 push	 eax
  00461	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00466	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv253[ebp], 0
$LN36@get_closes:
  0046d	6a 26		 push	 38			; 00000026H
  0046f	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00472	51		 push	 ecx
  00473	69 55 84 b4 00
	00 00		 imul	 edx, DWORD PTR tv245[ebp], 180
  0047a	8b 45 80	 mov	 eax, DWORD PTR tv253[ebp]
  0047d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00484	ff d1		 call	 ecx
  00486	89 45 fc	 mov	 DWORD PTR _threat$[ebp], eax

; 4958 : 	}

  00489	e9 82 fc ff ff	 jmp	 $LN2@get_closes
$LN3@get_closes:

; 4959 : 
; 4960 : 	return (closest_missile);

  0048e	8b 45 f8	 mov	 eax, DWORD PTR _closest_missile$[ebp]

; 4961 : }

  00491	5f		 pop	 edi
  00492	5e		 pop	 esi
  00493	5b		 pop	 ebx
  00494	8b e5		 mov	 esp, ebp
  00496	5d		 pop	 ebp
  00497	c2 10 00	 ret	 16			; 00000010H
?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ENDP ; get_closest_missile
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_tactical_situation_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv1835 = -428						; size = 4
tv85 = -428						; size = 4
tv1106 = -424						; size = 4
tv1071 = -424						; size = 4
tv1050 = -424						; size = 4
tv1029 = -424						; size = 4
tv1010 = -424						; size = 4
tv991 = -424						; size = 4
tv970 = -424						; size = 4
tv949 = -424						; size = 4
tv928 = -424						; size = 4
tv909 = -424						; size = 4
tv890 = -424						; size = 4
tv871 = -424						; size = 4
tv837 = -424						; size = 4
tv803 = -424						; size = 4
tv784 = -424						; size = 4
tv764 = -424						; size = 4
tv737 = -424						; size = 4
tv677 = -424						; size = 4
tv655 = -424						; size = 4
tv634 = -424						; size = 4
tv615 = -424						; size = 4
tv596 = -424						; size = 4
tv559 = -424						; size = 4
tv538 = -424						; size = 4
tv469 = -424						; size = 4
tv416 = -424						; size = 4
tv199 = -424						; size = 4
tv179 = -424						; size = 4
tv159 = -424						; size = 4
tv139 = -424						; size = 4
tv78 = -424						; size = 4
tv1162 = -420						; size = 4
tv1149 = -420						; size = 4
tv1098 = -420						; size = 4
tv1063 = -420						; size = 4
tv1042 = -420						; size = 4
tv1022 = -420						; size = 4
tv1003 = -420						; size = 4
tv983 = -420						; size = 4
tv963 = -420						; size = 4
tv941 = -420						; size = 4
tv921 = -420						; size = 4
tv902 = -420						; size = 4
tv883 = -420						; size = 4
tv863 = -420						; size = 4
tv829 = -420						; size = 4
tv796 = -420						; size = 4
tv776 = -420						; size = 4
tv756 = -420						; size = 4
tv697 = -420						; size = 4
tv669 = -420						; size = 4
tv647 = -420						; size = 4
tv627 = -420						; size = 4
tv608 = -420						; size = 4
tv588 = -420						; size = 4
tv551 = -420						; size = 4
tv530 = -420						; size = 4
tv461 = -420						; size = 4
tv408 = -420						; size = 4
tv206 = -420						; size = 4
tv191 = -420						; size = 4
tv171 = -420						; size = 4
tv151 = -420						; size = 4
tv131 = -420						; size = 4
tv89 = -420						; size = 4
tv87 = -420						; size = 4
tv70 = -420						; size = 4
_target_range$1 = -352					; size = 4
_rangefinder$2 = -348					; size = 4
_dy$3 = -344						; size = 4
_dx$4 = -340						; size = 4
_air_scan_range$5 = -336				; size = 4
_draw_threat_line$6 = -332				; size = 4
_threat_type$7 = -328					; size = 4
_target_position$8 = -324				; size = 4
_launched_weapon$9 = -320				; size = 4
_target$10 = -316					; size = 4
_waypoint_colour$11 = -312				; size = 4
_wp2_rel_position$12 = -308				; size = 12
_wp1_rel_position$13 = -296				; size = 12
_wp2$14 = -284						; size = 4
_wp1$15 = -280						; size = 4
_radius$16 = -276					; size = 4
_tsd_basic_colour$ = -272				; size = 4
_tsd_declutter_level$ = -268				; size = 4
_tsd_underlay$ = -264					; size = 4
_is_pilot$ = -260					; size = 4
_source_position$ = -256				; size = 4
_source_target$ = -252					; size = 4
_source$ = -248						; size = 4
_source_heading$ = -244					; size = 4
_tsd_ase_range$ = -240					; size = 4
_y_adjust$ = -236					; size = 4
_width$ = -232						; size = 4
_y_origin$ = -228					; size = 4
_x_origin$ = -224					; size = 4
_scale$ = -220						; size = 4
_v$ = -216						; size = 4
_u$ = -212						; size = 4
_source_side$ = -208					; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
?draw_tactical_situation_display_mfd@@YGXXZ PROC	; draw_tactical_situation_display_mfd, COMDAT

; 4093 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ac 01 00
	00		 sub	 esp, 428		; 000001acH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 4094 : 	char
; 4095 : 		*s,
; 4096 : 		buffer[200];
; 4097 : 
; 4098 : 	entity_sides
; 4099 : 		source_side;
; 4100 : 
; 4101 : 	float
; 4102 : 		u,
; 4103 : 		v,
; 4104 : 		scale,
; 4105 : 		x_origin,
; 4106 : 		y_origin,
; 4107 : 		width,
; 4108 : 		y_adjust,
; 4109 : 		tsd_ase_range,
; 4110 : 		source_heading;
; 4111 : 
; 4112 : 	entity
; 4113 : 		*source,
; 4114 : 		*source_target;
; 4115 : 
; 4116 : 	vec3d
; 4117 : 		*source_position;
; 4118 : 
; 4119 : 	int
; 4120 : 		is_pilot = (get_local_entity_int_value (get_pilot_entity (), INT_TYPE_CREW_ROLE) == CREW_ROLE_PILOT);

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_entity@@3PAUENTITY@@A, 0 ; pilot_entity
  00013	74 0f		 je	 SHORT $LN123@draw_tacti
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv70[ebp], ecx
  00022	eb 24		 jmp	 SHORT $LN124@draw_tacti
$LN123@draw_tacti:
  00024	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  0002a	83 c2 1b	 add	 edx, 27			; 0000001bH
  0002d	52		 push	 edx
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003e	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN124@draw_tacti:
  00048	b9 01 00 00 00	 mov	 ecx, 1
  0004d	85 c9		 test	 ecx, ecx
  0004f	74 0c		 je	 SHORT $LN125@draw_tacti
  00051	c7 85 58 fe ff
	ff 23 00 00 00	 mov	 DWORD PTR tv78[ebp], 35	; 00000023H
  0005b	eb 24		 jmp	 SHORT $LN126@draw_tacti
$LN125@draw_tacti:
  0005d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00063	83 c2 1b	 add	 edx, 27			; 0000001bH
  00066	52		 push	 edx
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00077	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN126@draw_tacti:
  00081	6a 23		 push	 35			; 00000023H
  00083	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00089	51		 push	 ecx
  0008a	69 95 5c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv70[ebp], 1116
  00094	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv78[ebp]
  0009a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000a1	ff d1		 call	 ecx
  000a3	85 c0		 test	 eax, eax
  000a5	75 0c		 jne	 SHORT $LN127@draw_tacti
  000a7	c7 85 54 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv85[ebp], 1
  000b1	eb 0a		 jmp	 SHORT $LN128@draw_tacti
$LN127@draw_tacti:
  000b3	c7 85 54 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv85[ebp], 0
$LN128@draw_tacti:
  000bd	8b 95 54 fe ff
	ff		 mov	 edx, DWORD PTR tv85[ebp]
  000c3	89 95 fc fe ff
	ff		 mov	 DWORD PTR _is_pilot$[ebp], edx

; 4121 : 
; 4122 : 	tsd_underlay_levels
; 4123 : 		tsd_underlay = is_pilot ? pilot_tsd_underlay : cpg_tsd_underlay;

  000c9	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _is_pilot$[ebp], 0
  000d0	74 0d		 je	 SHORT $LN129@draw_tacti
  000d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A
  000d7	89 85 5c fe ff
	ff		 mov	 DWORD PTR tv87[ebp], eax
  000dd	eb 0c		 jmp	 SHORT $LN130@draw_tacti
$LN129@draw_tacti:
  000df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?cpg_tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A
  000e5	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv87[ebp], ecx
$LN130@draw_tacti:
  000eb	8b 95 5c fe ff
	ff		 mov	 edx, DWORD PTR tv87[ebp]
  000f1	89 95 f8 fe ff
	ff		 mov	 DWORD PTR _tsd_underlay$[ebp], edx

; 4124 : 
; 4125 : 	tsd_declutter_levels
; 4126 : 		tsd_declutter_level = is_pilot ? pilot_tsd_declutter_level : cpg_tsd_declutter_level;

  000f7	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _is_pilot$[ebp], 0
  000fe	74 0d		 je	 SHORT $LN131@draw_tacti
  00100	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A
  00105	89 85 5c fe ff
	ff		 mov	 DWORD PTR tv89[ebp], eax
  0010b	eb 0c		 jmp	 SHORT $LN132@draw_tacti
$LN131@draw_tacti:
  0010d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?cpg_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A
  00113	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv89[ebp], ecx
$LN132@draw_tacti:
  00119	8b 95 5c fe ff
	ff		 mov	 edx, DWORD PTR tv89[ebp]
  0011f	89 95 f4 fe ff
	ff		 mov	 DWORD PTR _tsd_declutter_level$[ebp], edx

; 4127 : 
; 4128 : 	rgb_colour tsd_basic_colour = MFD_COLOUR2;

  00125	b8 04 00 00 00	 mov	 eax, 4
  0012a	c1 e0 00	 shl	 eax, 0
  0012d	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00133	89 8d f0 fe ff
	ff		 mov	 DWORD PTR _tsd_basic_colour$[ebp], ecx

; 4129 : 
; 4130 : 
; 4131 : 	source = get_gunship_entity ();

  00139	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0013e	89 85 08 ff ff
	ff		 mov	 DWORD PTR _source$[ebp], eax

; 4132 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  00144	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0014b	74 10		 je	 SHORT $LN133@draw_tacti
  0014d	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00153	8b 08		 mov	 ecx, DWORD PTR [eax]
  00155	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv131[ebp], ecx
  0015b	eb 24		 jmp	 SHORT $LN134@draw_tacti
$LN133@draw_tacti:
  0015d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00163	83 c2 27	 add	 edx, 39			; 00000027H
  00166	52		 push	 edx
  00167	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0016c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00171	50		 push	 eax
  00172	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00177	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv131[ebp], 0
$LN134@draw_tacti:
  00181	b9 01 00 00 00	 mov	 ecx, 1
  00186	85 c9		 test	 ecx, ecx
  00188	74 0c		 je	 SHORT $LN135@draw_tacti
  0018a	c7 85 58 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv139[ebp], 187 ; 000000bbH
  00194	eb 24		 jmp	 SHORT $LN136@draw_tacti
$LN135@draw_tacti:
  00196	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  0019c	83 c2 27	 add	 edx, 39			; 00000027H
  0019f	52		 push	 edx
  001a0	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  001a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  001aa	50		 push	 eax
  001ab	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001b0	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv139[ebp], 0
$LN136@draw_tacti:
  001ba	68 bb 00 00 00	 push	 187			; 000000bbH
  001bf	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  001c5	51		 push	 ecx
  001c6	69 95 5c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv131[ebp], 1116
  001d0	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv139[ebp]
  001d6	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  001dd	ff d1		 call	 ecx
  001df	89 85 30 ff ff
	ff		 mov	 DWORD PTR _source_side$[ebp], eax

; 4133 : 	source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  001e5	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  001ec	74 10		 je	 SHORT $LN137@draw_tacti
  001ee	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  001f4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f6	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv151[ebp], ecx
  001fc	eb 24		 jmp	 SHORT $LN138@draw_tacti
$LN137@draw_tacti:
  001fe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00204	83 c2 28	 add	 edx, 40			; 00000028H
  00207	52		 push	 edx
  00208	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0020d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00212	50		 push	 eax
  00213	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00218	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv151[ebp], 0
$LN138@draw_tacti:
  00222	b9 01 00 00 00	 mov	 ecx, 1
  00227	85 c9		 test	 ecx, ecx
  00229	74 0c		 je	 SHORT $LN139@draw_tacti
  0022b	c7 85 58 fe ff
	ff 34 00 00 00	 mov	 DWORD PTR tv159[ebp], 52 ; 00000034H
  00235	eb 24		 jmp	 SHORT $LN140@draw_tacti
$LN139@draw_tacti:
  00237	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  0023d	83 c2 28	 add	 edx, 40			; 00000028H
  00240	52		 push	 edx
  00241	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00246	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0024b	50		 push	 eax
  0024c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00251	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv159[ebp], 0
$LN140@draw_tacti:
  0025b	6a 34		 push	 52			; 00000034H
  0025d	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00263	51		 push	 ecx
  00264	69 95 5c fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv151[ebp], 700
  0026e	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv159[ebp]
  00274	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0027b	ff d1		 call	 ecx
  0027d	d9 9d 0c ff ff
	ff		 fstp	 DWORD PTR _source_heading$[ebp]

; 4134 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  00283	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0028a	74 10		 je	 SHORT $LN141@draw_tacti
  0028c	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00292	8b 08		 mov	 ecx, DWORD PTR [eax]
  00294	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv171[ebp], ecx
  0029a	eb 24		 jmp	 SHORT $LN142@draw_tacti
$LN141@draw_tacti:
  0029c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  002a2	83 c2 29	 add	 edx, 41			; 00000029H
  002a5	52		 push	 edx
  002a6	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  002ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002b0	50		 push	 eax
  002b1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002b6	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv171[ebp], 0
$LN142@draw_tacti:
  002c0	b9 01 00 00 00	 mov	 ecx, 1
  002c5	85 c9		 test	 ecx, ecx
  002c7	74 0c		 je	 SHORT $LN143@draw_tacti
  002c9	c7 85 58 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv179[ebp], 8
  002d3	eb 24		 jmp	 SHORT $LN144@draw_tacti
$LN143@draw_tacti:
  002d5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  002db	83 c2 29	 add	 edx, 41			; 00000029H
  002de	52		 push	 edx
  002df	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  002e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  002e9	50		 push	 eax
  002ea	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002ef	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv179[ebp], 0
$LN144@draw_tacti:
  002f9	6a 08		 push	 8
  002fb	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00301	51		 push	 ecx
  00302	6b 95 5c fe ff
	ff 60		 imul	 edx, DWORD PTR tv171[ebp], 96
  00309	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv179[ebp]
  0030f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00316	ff d1		 call	 ecx
  00318	89 85 00 ff ff
	ff		 mov	 DWORD PTR _source_position$[ebp], eax

; 4135 : 	source_target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  0031e	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00325	74 10		 je	 SHORT $LN145@draw_tacti
  00327	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0032d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0032f	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv191[ebp], ecx
  00335	eb 24		 jmp	 SHORT $LN146@draw_tacti
$LN145@draw_tacti:
  00337	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  0033d	83 c2 2a	 add	 edx, 42			; 0000002aH
  00340	52		 push	 edx
  00341	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00346	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0034b	50		 push	 eax
  0034c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00351	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv191[ebp], 0
$LN146@draw_tacti:
  0035b	b9 01 00 00 00	 mov	 ecx, 1
  00360	85 c9		 test	 ecx, ecx
  00362	74 0c		 je	 SHORT $LN147@draw_tacti
  00364	c7 85 58 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv199[ebp], 38 ; 00000026H
  0036e	eb 24		 jmp	 SHORT $LN148@draw_tacti
$LN147@draw_tacti:
  00370	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00376	83 c2 2a	 add	 edx, 42			; 0000002aH
  00379	52		 push	 edx
  0037a	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0037f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00384	50		 push	 eax
  00385	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0038a	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv199[ebp], 0
$LN148@draw_tacti:
  00394	6a 26		 push	 38			; 00000026H
  00396	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  0039c	51		 push	 ecx
  0039d	69 95 5c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv191[ebp], 180
  003a7	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv199[ebp]
  003ad	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  003b4	ff d1		 call	 ecx
  003b6	89 85 04 ff ff
	ff		 mov	 DWORD PTR _source_target$[ebp], eax

; 4136 : 
; 4137 : 	tsd_ase_range = is_pilot ? pilot_tsd_ase_range : cpg_tsd_ase_range;

  003bc	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _is_pilot$[ebp], 0
  003c3	74 12		 je	 SHORT $LN149@draw_tacti
  003c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  003cd	f3 0f 11 85 5c
	fe ff ff	 movss	 DWORD PTR tv206[ebp], xmm0
  003d5	eb 10		 jmp	 SHORT $LN150@draw_tacti
$LN149@draw_tacti:
  003d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?cpg_tsd_ase_range@@3MA
  003df	f3 0f 11 85 5c
	fe ff ff	 movss	 DWORD PTR tv206[ebp], xmm0
$LN150@draw_tacti:
  003e7	f3 0f 10 85 5c
	fe ff ff	 movss	 xmm0, DWORD PTR tv206[ebp]
  003ef	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _tsd_ase_range$[ebp], xmm0

; 4138 : 	scale = RADIUS / tsd_ase_range;

  003f7	f3 0f 5a 85 10
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _tsd_ase_range$[ebp]
  003ff	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff5d3d193333333
  00407	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0040b	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0040f	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _scale$[ebp], xmm0

; 4139 : 
; 4140 : 	//
; 4141 : 	// match ground radar origin
; 4142 : 	//
; 4143 : 
; 4144 : 	if (draw_large_mfd)

  00417	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0041e	74 1d		 je	 SHORT $LN18@draw_tacti

; 4145 : 	{
; 4146 : 		x_origin = 0.0;

  00420	0f 57 c0	 xorps	 xmm0, xmm0
  00423	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _x_origin$[ebp], xmm0

; 4147 : 		y_origin = -0.65;

  0042b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  00433	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _y_origin$[ebp], xmm0

; 4148 : 	}
; 4149 : 	else

  0043b	eb 1b		 jmp	 SHORT $LN19@draw_tacti
$LN18@draw_tacti:

; 4150 : 	{
; 4151 : 		x_origin = 0.0;

  0043d	0f 57 c0	 xorps	 xmm0, xmm0
  00440	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _x_origin$[ebp], xmm0

; 4152 : 		y_origin = -0.70;

  00448	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00450	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _y_origin$[ebp], xmm0
$LN19@draw_tacti:

; 4153 : 	}
; 4154 : 
; 4155 : 	get_2d_float_screen_coordinates (x_origin, y_origin, &u, &v);

  00458	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _v$[ebp]
  0045e	50		 push	 eax
  0045f	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _u$[ebp]
  00465	51		 push	 ecx
  00466	51		 push	 ecx
  00467	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  0046f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00474	51		 push	 ecx
  00475	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  0047d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00482	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 4156 : 
; 4157 : 	u -= mfd_viewport_x_min;

  00487	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  0048f	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00497	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _u$[ebp], xmm0

; 4158 : 	v -= mfd_viewport_y_min;

  0049f	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  004a7	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  004af	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _v$[ebp], xmm0

; 4159 : 
; 4160 : 	////////////////////////////////////////
; 4161 : 	//
; 4162 : 	//VJ 030423 TSD RENDER MOD
; 4163 : 	//
; 4164 : 	////////////////////////////////////////
; 4165 : 
; 4166 : 	if (tsd_underlay == TSD_UNDERLAY_MAP && !apache_damage.navigation_computer)

  004b7	83 bd f8 fe ff
	ff 01		 cmp	 DWORD PTR _tsd_underlay$[ebp], 1
  004be	0f 85 dc 00 00
	00		 jne	 $LN20@draw_tacti
  004c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  004c9	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  004cc	83 e0 01	 and	 eax, 1
  004cf	0f 85 cb 00 00
	00		 jne	 $LN20@draw_tacti

; 4167 : 	{
; 4168 : 		if (tsd_render_mode != TSD_RENDER_CONTOUR_MODE)

  004d5	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  004dc	74 68		 je	 SHORT $LN21@draw_tacti

; 4169 : 		{
; 4170 : 			tsd_basic_colour = MFD_COLOUR_DARK_BLUE;

  004de	b8 04 00 00 00	 mov	 eax, 4
  004e3	6b c8 11	 imul	 ecx, eax, 17
  004e6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004ec	89 95 f0 fe ff
	ff		 mov	 DWORD PTR _tsd_basic_colour$[ebp], edx

; 4171 : 			draw_tsd_terrain_map (mfd_env, -y_origin, tsd_ase_range, scale, source_position, source_heading, FALSE);

  004f2	6a 00		 push	 0
  004f4	51		 push	 ecx
  004f5	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  004fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00502	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00508	50		 push	 eax
  00509	51		 push	 ecx
  0050a	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00512	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00517	51		 push	 ecx
  00518	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  00520	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00525	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  0052d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00534	51		 push	 ecx
  00535	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00540	51		 push	 ecx
  00541	e8 00 00 00 00	 call	 ?draw_tsd_terrain_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MH@Z ; draw_tsd_terrain_map
$LN21@draw_tacti:

; 4172 : 		}
; 4173 : 
; 4174 : //VJ 030423 TSD render mod, added mfd_env
; 4175 : 		draw_tsd_contour_map (mfd_env, -y_origin, tsd_ase_range, scale, source_position, source_heading, draw_large_mfd, FALSE);

  00546	6a 00		 push	 0
  00548	a1 00 00 00 00	 mov	 eax, DWORD PTR ?draw_large_mfd@@3HA
  0054d	50		 push	 eax
  0054e	51		 push	 ecx
  0054f	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  00557	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0055c	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  00562	51		 push	 ecx
  00563	51		 push	 ecx
  00564	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  0056c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00571	51		 push	 ecx
  00572	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  0057a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057f	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  00587	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0058e	51		 push	 ecx
  0058f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00594	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0059a	52		 push	 edx
  0059b	e8 00 00 00 00	 call	 ?draw_tsd_contour_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MHH@Z ; draw_tsd_contour_map
$LN20@draw_tacti:

; 4176 : 	}
; 4177 : 
; 4178 : 	////////////////////////////////////////
; 4179 : 	//
; 4180 : 	// radar scan
; 4181 : 	//
; 4182 : 	////////////////////////////////////////
; 4183 : 
; 4184 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)

  005a0	83 bd f4 fe ff
	ff 02		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 2
  005a7	0f 84 0a 04 00
	00		 je	 $LN27@draw_tacti

; 4185 : 	{
; 4186 : 		float
; 4187 : 			radius;
; 4188 : 
; 4189 : 		if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_GROUND_RADAR)

  005ad	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 1 ; target_acquisition_system
  005b4	0f 85 bd 01 00
	00		 jne	 $LN23@draw_tacti

; 4190 : 		{
; 4191 : 			set_2d_viewport_origin (mfd_env, u, v);

  005ba	51		 push	 ecx
  005bb	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  005c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c8	51		 push	 ecx
  005c9	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  005d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  005db	50		 push	 eax
  005dc	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 4192 : 
; 4193 : 			radius = ground_radar.scan_range * scale;

  005e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A
  005e9	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  005f1	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _radius$16[ebp], xmm0

; 4194 : 
; 4195 : 			set_2d_window_rotation (mfd_env, -ground_radar.scan_datum);

  005f9	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  00601	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00608	51		 push	 ecx
  00609	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0060e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00613	50		 push	 eax
  00614	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 4196 : 
; 4197 : 			draw_radar_arc (ground_radar.scan_arc_size, radius, tsd_basic_colour);

  00619	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _tsd_basic_colour$[ebp]
  0061f	50		 push	 eax
  00620	51		 push	 ecx
  00621	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _radius$16[ebp]
  00629	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0062e	51		 push	 ecx
  0062f	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  00637	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063c	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 4198 : 
; 4199 : 			set_2d_window_rotation (mfd_env, -(ground_radar.scan_datum - (ground_radar.scan_arc_size * 0.5)));

  00641	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  00649	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  00651	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00659	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0065d	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00664	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00668	51		 push	 ecx
  00669	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0066e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00673	50		 push	 eax
  00674	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 4200 : 
; 4201 : 			draw_2d_line (0.0, 0.0, 0.0, radius, tsd_basic_colour);

  00679	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _tsd_basic_colour$[ebp]
  0067f	50		 push	 eax
  00680	51		 push	 ecx
  00681	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _radius$16[ebp]
  00689	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0068e	51		 push	 ecx
  0068f	0f 57 c0	 xorps	 xmm0, xmm0
  00692	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00697	51		 push	 ecx
  00698	0f 57 c0	 xorps	 xmm0, xmm0
  0069b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a0	51		 push	 ecx
  006a1	0f 57 c0	 xorps	 xmm0, xmm0
  006a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4202 : 
; 4203 : 			set_2d_window_rotation (mfd_env, -(ground_radar.scan_datum + (ground_radar.scan_arc_size * 0.5)));

  006ae	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  006b6	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  006be	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  006c6	f2 0f 58 c1	 addsd	 xmm0, xmm1
  006ca	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  006d1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006d5	51		 push	 ecx
  006d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  006e0	50		 push	 eax
  006e1	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 4204 : 
; 4205 : 			draw_2d_line (0.0, 0.0, 0.0, radius, tsd_basic_colour);

  006e6	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _tsd_basic_colour$[ebp]
  006ec	50		 push	 eax
  006ed	51		 push	 ecx
  006ee	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _radius$16[ebp]
  006f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006fb	51		 push	 ecx
  006fc	0f 57 c0	 xorps	 xmm0, xmm0
  006ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00704	51		 push	 ecx
  00705	0f 57 c0	 xorps	 xmm0, xmm0
  00708	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0070d	51		 push	 ecx
  0070e	0f 57 c0	 xorps	 xmm0, xmm0
  00711	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00716	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4206 : 
; 4207 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  0071b	51		 push	 ecx
  0071c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00724	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00729	51		 push	 ecx
  0072a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00732	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00737	51		 push	 ecx
  00738	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00740	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00745	51		 push	 ecx
  00746	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0074e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00753	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00758	50		 push	 eax
  00759	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 4208 : 
; 4209 : 			set_2d_window_rotation (mfd_env, 0.0);

  0075e	51		 push	 ecx
  0075f	0f 57 c0	 xorps	 xmm0, xmm0
  00762	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00767	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0076c	50		 push	 eax
  0076d	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
  00772	e9 40 02 00 00	 jmp	 $LN27@draw_tacti
$LN23@draw_tacti:

; 4210 : 		}
; 4211 : 		else if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_AIR_RADAR)

  00777	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 2 ; target_acquisition_system
  0077e	0f 85 33 02 00
	00		 jne	 $LN27@draw_tacti

; 4212 : 		{
; 4213 : 			set_2d_viewport_origin (mfd_env, u, v);

  00784	51		 push	 ecx
  00785	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  0078d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00792	51		 push	 ecx
  00793	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  0079b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  007a5	50		 push	 eax
  007a6	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 4214 : 
; 4215 : 			radius = air_radar.scan_range * scale;

  007ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A
  007b3	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  007bb	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _radius$16[ebp], xmm0

; 4216 : 
; 4217 : 			if (air_radar.scan_arc_size == APACHE_RADAR_SCAN_ARC_SIZE_360)

  007c3	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  007cb	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@40c90fdb
  007d2	9f		 lahf
  007d3	f6 c4 44	 test	 ah, 68			; 00000044H
  007d6	7a 31		 jp	 SHORT $LN26@draw_tacti

; 4218 : 			{
; 4219 : 				draw_2d_circle (0.0, 0.0, radius, tsd_basic_colour);

  007d8	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _tsd_basic_colour$[ebp]
  007de	50		 push	 eax
  007df	51		 push	 ecx
  007e0	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _radius$16[ebp]
  007e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ed	51		 push	 ecx
  007ee	0f 57 c0	 xorps	 xmm0, xmm0
  007f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f6	51		 push	 ecx
  007f7	0f 57 c0	 xorps	 xmm0, xmm0
  007fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ff	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 4220 : 			}
; 4221 : 			else

  00804	e9 ae 01 00 00	 jmp	 $LN27@draw_tacti
$LN26@draw_tacti:

; 4222 : 			{
; 4223 : 				set_2d_window_rotation (mfd_env, -air_radar.scan_datum);

  00809	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  00811	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00818	51		 push	 ecx
  00819	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00823	50		 push	 eax
  00824	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 4224 : 
; 4225 : 				draw_radar_arc (air_radar.scan_arc_size, radius, tsd_basic_colour);

  00829	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _tsd_basic_colour$[ebp]
  0082f	50		 push	 eax
  00830	51		 push	 ecx
  00831	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _radius$16[ebp]
  00839	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0083e	51		 push	 ecx
  0083f	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  00847	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0084c	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 4226 : 
; 4227 : 				draw_2d_line (0.0, 0.0, 0.0, radius, tsd_basic_colour);

  00851	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _tsd_basic_colour$[ebp]
  00857	50		 push	 eax
  00858	51		 push	 ecx
  00859	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _radius$16[ebp]
  00861	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00866	51		 push	 ecx
  00867	0f 57 c0	 xorps	 xmm0, xmm0
  0086a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0086f	51		 push	 ecx
  00870	0f 57 c0	 xorps	 xmm0, xmm0
  00873	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00878	51		 push	 ecx
  00879	0f 57 c0	 xorps	 xmm0, xmm0
  0087c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00881	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4228 : 
; 4229 : 				set_2d_window_rotation (mfd_env, -(air_radar.scan_datum - (air_radar.scan_arc_size * 0.5)));

  00886	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  0088e	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  00896	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0089e	f2 0f 5c c1	 subsd	 xmm0, xmm1
  008a2	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  008a9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  008ad	51		 push	 ecx
  008ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  008b8	50		 push	 eax
  008b9	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 4230 : 
; 4231 : 				draw_2d_line (0.0, 0.0, 0.0, radius, tsd_basic_colour);

  008be	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _tsd_basic_colour$[ebp]
  008c4	50		 push	 eax
  008c5	51		 push	 ecx
  008c6	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _radius$16[ebp]
  008ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d3	51		 push	 ecx
  008d4	0f 57 c0	 xorps	 xmm0, xmm0
  008d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008dc	51		 push	 ecx
  008dd	0f 57 c0	 xorps	 xmm0, xmm0
  008e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e5	51		 push	 ecx
  008e6	0f 57 c0	 xorps	 xmm0, xmm0
  008e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ee	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4232 : 
; 4233 : 				set_2d_window_rotation (mfd_env, -(air_radar.scan_datum + (air_radar.scan_arc_size * 0.5)));

  008f3	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  008fb	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  00903	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0090b	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0090f	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00916	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0091a	51		 push	 ecx
  0091b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00920	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00925	50		 push	 eax
  00926	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 4234 : 
; 4235 : 				draw_2d_line (0.0, 0.0, 0.0, radius, tsd_basic_colour);

  0092b	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _tsd_basic_colour$[ebp]
  00931	50		 push	 eax
  00932	51		 push	 ecx
  00933	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _radius$16[ebp]
  0093b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00940	51		 push	 ecx
  00941	0f 57 c0	 xorps	 xmm0, xmm0
  00944	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00949	51		 push	 ecx
  0094a	0f 57 c0	 xorps	 xmm0, xmm0
  0094d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00952	51		 push	 ecx
  00953	0f 57 c0	 xorps	 xmm0, xmm0
  00956	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0095b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4236 : 
; 4237 : 				set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00960	51		 push	 ecx
  00961	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00969	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0096e	51		 push	 ecx
  0096f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00977	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0097c	51		 push	 ecx
  0097d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00985	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0098a	51		 push	 ecx
  0098b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00993	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00998	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0099d	50		 push	 eax
  0099e	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 4238 : 
; 4239 : 				set_2d_window_rotation (mfd_env, 0.0);

  009a3	51		 push	 ecx
  009a4	0f 57 c0	 xorps	 xmm0, xmm0
  009a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  009b1	50		 push	 eax
  009b2	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN27@draw_tacti:

; 4240 : 			}
; 4241 : 		}
; 4242 : 	}
; 4243 : 
; 4244 : 	////////////////////////////////////////
; 4245 : 	//
; 4246 : 	// waypoint route
; 4247 : 	//
; 4248 : 	////////////////////////////////////////
; 4249 : 
; 4250 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_TARGET && !apache_damage.navigation_computer)

  009b7	83 bd f4 fe ff
	ff 01		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 1
  009be	0f 84 e9 07 00
	00		 je	 $LN30@draw_tacti
  009c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  009c9	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  009cc	83 e0 01	 and	 eax, 1
  009cf	0f 85 d8 07 00
	00		 jne	 $LN30@draw_tacti

; 4251 : 	{
; 4252 : 		entity
; 4253 : 			*wp1,
; 4254 : 			*wp2;
; 4255 : 
; 4256 : 		vec3d
; 4257 : 			wp1_rel_position,
; 4258 : 			wp2_rel_position;
; 4259 : 
; 4260 : 		rgb_colour waypoint_colour = MFD_COLOUR_YELLOW;

  009d5	b8 04 00 00 00	 mov	 eax, 4
  009da	6b c8 0d	 imul	 ecx, eax, 13
  009dd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009e3	89 95 c8 fe ff
	ff		 mov	 DWORD PTR _waypoint_colour$11[ebp], edx

; 4261 : 
; 4262 : 		if (tsd_underlay == TSD_UNDERLAY_MAP)

  009e9	83 bd f8 fe ff
	ff 01		 cmp	 DWORD PTR _tsd_underlay$[ebp], 1
  009f0	75 0c		 jne	 SHORT $LN29@draw_tacti

; 4263 : 			waypoint_colour = tsd_basic_colour;

  009f2	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _tsd_basic_colour$[ebp]
  009f8	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _waypoint_colour$11[ebp], eax
$LN29@draw_tacti:

; 4264 : 
; 4265 : 		wp1 = get_local_entity_first_waypoint (source);

  009fe	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00a04	50		 push	 eax
  00a05	e8 00 00 00 00	 call	 ?get_local_entity_first_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_first_waypoint
  00a0a	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _wp1$15[ebp], eax

; 4266 : 
; 4267 : 		if (wp1)

  00a10	83 bd e8 fe ff
	ff 00		 cmp	 DWORD PTR _wp1$15[ebp], 0
  00a17	0f 84 90 07 00
	00		 je	 $LN30@draw_tacti

; 4268 : 		{
; 4269 : 			set_2d_viewport_origin (mfd_env, u, v);

  00a1d	51		 push	 ecx
  00a1e	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  00a26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a2b	51		 push	 ecx
  00a2c	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  00a34	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a39	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a3e	50		 push	 eax
  00a3f	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 4270 : 
; 4271 : 			set_2d_window_rotation (mfd_env, source_heading);

  00a44	51		 push	 ecx
  00a45	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  00a4d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a52	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a57	50		 push	 eax
  00a58	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 4272 : 
; 4273 : 			//
; 4274 : 			// waypoint route
; 4275 : 			//
; 4276 : 
; 4277 : 			get_waypoint_display_position (source, wp1, &wp1_rel_position);

  00a5d	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _wp1_rel_position$13[ebp]
  00a63	50		 push	 eax
  00a64	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$15[ebp]
  00a6a	51		 push	 ecx
  00a6b	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  00a71	52		 push	 edx
  00a72	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 4278 : 
; 4279 : 			wp1_rel_position.x = (wp1_rel_position.x - source_position->x) * scale;

  00a77	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00a7d	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$13[ebp]
  00a85	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00a89	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00a91	f3 0f 11 85 d8
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$13[ebp], xmm0

; 4280 : 			wp1_rel_position.z = (wp1_rel_position.z - source_position->z) * scale;

  00a99	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00a9f	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$13[ebp+8]
  00aa7	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00aac	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00ab4	f3 0f 11 85 e0
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$13[ebp+8], xmm0

; 4281 : 
; 4282 : 			wp2 = get_local_entity_child_succ (wp1, LIST_TYPE_WAYPOINT);

  00abc	83 bd e8 fe ff
	ff 00		 cmp	 DWORD PTR _wp1$15[ebp], 0
  00ac3	74 10		 je	 SHORT $LN151@draw_tacti
  00ac5	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _wp1$15[ebp]
  00acb	8b 08		 mov	 ecx, DWORD PTR [eax]
  00acd	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv408[ebp], ecx
  00ad3	eb 27		 jmp	 SHORT $LN152@draw_tacti
$LN151@draw_tacti:
  00ad5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00adb	81 c2 bd 00 00
	00		 add	 edx, 189		; 000000bdH
  00ae1	52		 push	 edx
  00ae2	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ae7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00aec	50		 push	 eax
  00aed	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00af2	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv408[ebp], 0
$LN152@draw_tacti:
  00afc	b9 01 00 00 00	 mov	 ecx, 1
  00b01	85 c9		 test	 ecx, ecx
  00b03	74 0c		 je	 SHORT $LN153@draw_tacti
  00b05	c7 85 58 fe ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv416[ebp], 44 ; 0000002cH
  00b0f	eb 27		 jmp	 SHORT $LN154@draw_tacti
$LN153@draw_tacti:
  00b11	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00b17	81 c2 bd 00 00
	00		 add	 edx, 189		; 000000bdH
  00b1d	52		 push	 edx
  00b1e	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b23	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00b28	50		 push	 eax
  00b29	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b2e	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv416[ebp], 0
$LN154@draw_tacti:
  00b38	6a 2c		 push	 44			; 0000002cH
  00b3a	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$15[ebp]
  00b40	51		 push	 ecx
  00b41	69 95 5c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv408[ebp], 180
  00b4b	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv416[ebp]
  00b51	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00b58	ff d1		 call	 ecx
  00b5a	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _wp2$14[ebp], eax
$LN2@draw_tacti:

; 4283 : 
; 4284 : 			while (wp2)

  00b60	83 bd e4 fe ff
	ff 00		 cmp	 DWORD PTR _wp2$14[ebp], 0
  00b67	0f 84 70 02 00
	00		 je	 $LN3@draw_tacti

; 4285 : 			{
; 4286 : 				get_waypoint_display_position (source, wp2, &wp2_rel_position);

  00b6d	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _wp2_rel_position$12[ebp]
  00b73	50		 push	 eax
  00b74	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _wp2$14[ebp]
  00b7a	51		 push	 ecx
  00b7b	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  00b81	52		 push	 edx
  00b82	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 4287 : 
; 4288 : 				wp2_rel_position.x = (wp2_rel_position.x - source_position->x) * scale;

  00b87	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00b8d	f3 0f 10 85 cc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$12[ebp]
  00b95	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00b99	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00ba1	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR _wp2_rel_position$12[ebp], xmm0

; 4289 : 				wp2_rel_position.z = (wp2_rel_position.z - source_position->z) * scale;

  00ba9	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00baf	f3 0f 10 85 d4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$12[ebp+8]
  00bb7	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00bbc	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00bc4	f3 0f 11 85 d4
	fe ff ff	 movss	 DWORD PTR _wp2_rel_position$12[ebp+8], xmm0

; 4290 : //VJ 030423 TSD render mod
; 4291 : 				if (draw_large_mfd)

  00bcc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00bd3	0f 84 98 00 00
	00		 je	 $LN31@draw_tacti

; 4292 : 				{
; 4293 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  00bd9	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  00be0	75 46		 jne	 SHORT $LN33@draw_tacti

; 4294 : 						draw_2d_half_thick_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, waypoint_colour);  // 2

  00be2	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _waypoint_colour$11[ebp]
  00be8	50		 push	 eax
  00be9	51		 push	 ecx
  00bea	f3 0f 10 85 d4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$12[ebp+8]
  00bf2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bf7	51		 push	 ecx
  00bf8	f3 0f 10 85 cc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$12[ebp]
  00c00	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c05	51		 push	 ecx
  00c06	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$13[ebp+8]
  00c0e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c13	51		 push	 ecx
  00c14	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$13[ebp]
  00c1c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c21	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 4295 : 					else

  00c26	eb 44		 jmp	 SHORT $LN34@draw_tacti
$LN33@draw_tacti:

; 4296 : 						draw_2d_half_thick_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, waypoint_colour);  // 5

  00c28	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _waypoint_colour$11[ebp]
  00c2e	50		 push	 eax
  00c2f	51		 push	 ecx
  00c30	f3 0f 10 85 d4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$12[ebp+8]
  00c38	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c3d	51		 push	 ecx
  00c3e	f3 0f 10 85 cc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$12[ebp]
  00c46	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c4b	51		 push	 ecx
  00c4c	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$13[ebp+8]
  00c54	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c59	51		 push	 ecx
  00c5a	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$13[ebp]
  00c62	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c67	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN34@draw_tacti:

; 4297 : 				}
; 4298 : 				else

  00c6c	e9 93 00 00 00	 jmp	 $LN36@draw_tacti
$LN31@draw_tacti:

; 4299 : 				{
; 4300 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  00c71	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  00c78	75 46		 jne	 SHORT $LN35@draw_tacti

; 4301 : 						draw_2d_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, waypoint_colour);

  00c7a	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _waypoint_colour$11[ebp]
  00c80	50		 push	 eax
  00c81	51		 push	 ecx
  00c82	f3 0f 10 85 d4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$12[ebp+8]
  00c8a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c8f	51		 push	 ecx
  00c90	f3 0f 10 85 cc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$12[ebp]
  00c98	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c9d	51		 push	 ecx
  00c9e	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$13[ebp+8]
  00ca6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cab	51		 push	 ecx
  00cac	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$13[ebp]
  00cb4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cb9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4302 : 					else

  00cbe	eb 44		 jmp	 SHORT $LN36@draw_tacti
$LN35@draw_tacti:

; 4303 : 						draw_2d_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, waypoint_colour);

  00cc0	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _waypoint_colour$11[ebp]
  00cc6	50		 push	 eax
  00cc7	51		 push	 ecx
  00cc8	f3 0f 10 85 d4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$12[ebp+8]
  00cd0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cd5	51		 push	 ecx
  00cd6	f3 0f 10 85 cc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$12[ebp]
  00cde	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ce3	51		 push	 ecx
  00ce4	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$13[ebp+8]
  00cec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cf1	51		 push	 ecx
  00cf2	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$13[ebp]
  00cfa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cff	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN36@draw_tacti:

; 4304 : 				}
; 4305 : 				wp1 = wp2;

  00d04	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _wp2$14[ebp]
  00d0a	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _wp1$15[ebp], eax

; 4306 : 
; 4307 : 				wp1_rel_position = wp2_rel_position;

  00d10	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _wp2_rel_position$12[ebp]
  00d16	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _wp1_rel_position$13[ebp], eax
  00d1c	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _wp2_rel_position$12[ebp+4]
  00d22	89 8d dc fe ff
	ff		 mov	 DWORD PTR _wp1_rel_position$13[ebp+4], ecx
  00d28	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _wp2_rel_position$12[ebp+8]
  00d2e	89 95 e0 fe ff
	ff		 mov	 DWORD PTR _wp1_rel_position$13[ebp+8], edx

; 4308 : 
; 4309 : 				wp2 = get_local_entity_child_succ (wp1, LIST_TYPE_WAYPOINT);

  00d34	83 bd e8 fe ff
	ff 00		 cmp	 DWORD PTR _wp1$15[ebp], 0
  00d3b	74 10		 je	 SHORT $LN155@draw_tacti
  00d3d	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _wp1$15[ebp]
  00d43	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d45	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv461[ebp], ecx
  00d4b	eb 27		 jmp	 SHORT $LN156@draw_tacti
$LN155@draw_tacti:
  00d4d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00d53	81 c2 d8 00 00
	00		 add	 edx, 216		; 000000d8H
  00d59	52		 push	 edx
  00d5a	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d5f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00d64	50		 push	 eax
  00d65	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d6a	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv461[ebp], 0
$LN156@draw_tacti:
  00d74	b9 01 00 00 00	 mov	 ecx, 1
  00d79	85 c9		 test	 ecx, ecx
  00d7b	74 0c		 je	 SHORT $LN157@draw_tacti
  00d7d	c7 85 58 fe ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv469[ebp], 44 ; 0000002cH
  00d87	eb 27		 jmp	 SHORT $LN158@draw_tacti
$LN157@draw_tacti:
  00d89	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00d8f	81 c2 d8 00 00
	00		 add	 edx, 216		; 000000d8H
  00d95	52		 push	 edx
  00d96	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d9b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00da0	50		 push	 eax
  00da1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00da6	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv469[ebp], 0
$LN158@draw_tacti:
  00db0	6a 2c		 push	 44			; 0000002cH
  00db2	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$15[ebp]
  00db8	51		 push	 ecx
  00db9	69 95 5c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv461[ebp], 180
  00dc3	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv469[ebp]
  00dc9	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00dd0	ff d1		 call	 ecx
  00dd2	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _wp2$14[ebp], eax

; 4310 : 			}

  00dd8	e9 83 fd ff ff	 jmp	 $LN2@draw_tacti
$LN3@draw_tacti:

; 4311 : 
; 4312 : 			//
; 4313 : 			// waypoint markers
; 4314 : 			//
; 4315 : 
; 4316 : 			if (tsd_underlay == TSD_UNDERLAY_MAP)

  00ddd	83 bd f8 fe ff
	ff 01		 cmp	 DWORD PTR _tsd_underlay$[ebp], 1
  00de4	75 16		 jne	 SHORT $LN37@draw_tacti

; 4317 : 				set_mono_font_colour (MFD_COLOUR_BLUE);

  00de6	b8 04 00 00 00	 mov	 eax, 4
  00deb	6b c8 0c	 imul	 ecx, eax, 12
  00dee	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00df4	52		 push	 edx
  00df5	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4318 : 			else

  00dfa	eb 14		 jmp	 SHORT $LN38@draw_tacti
$LN37@draw_tacti:

; 4319 : 				set_mono_font_colour (MFD_COLOUR6);

  00dfc	b8 04 00 00 00	 mov	 eax, 4
  00e01	6b c8 05	 imul	 ecx, eax, 5
  00e04	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e0a	52		 push	 edx
  00e0b	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN38@draw_tacti:

; 4320 : 
; 4321 : 			if (draw_large_mfd)

  00e10	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00e17	74 09		 je	 SHORT $LN39@draw_tacti

; 4322 : 			{
; 4323 : 				set_mono_font_type (MONO_FONT_TYPE_7X12);

  00e19	6a 05		 push	 5
  00e1b	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 4324 : 			}
; 4325 : 			else

  00e20	eb 07		 jmp	 SHORT $LN40@draw_tacti
$LN39@draw_tacti:

; 4326 : 			{
; 4327 : 				set_mono_font_type (MONO_FONT_TYPE_5X7);

  00e22	6a 01		 push	 1
  00e24	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN40@draw_tacti:

; 4328 : 			}
; 4329 : 
; 4330 : 			wp1 = get_local_entity_first_waypoint (source);

  00e29	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00e2f	50		 push	 eax
  00e30	e8 00 00 00 00	 call	 ?get_local_entity_first_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_first_waypoint
  00e35	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _wp1$15[ebp], eax
$LN4@draw_tacti:

; 4331 : 
; 4332 : 			while (wp1)

  00e3b	83 bd e8 fe ff
	ff 00		 cmp	 DWORD PTR _wp1$15[ebp], 0
  00e42	0f 84 0e 03 00
	00		 je	 $LN5@draw_tacti

; 4333 : 			{
; 4334 : 				get_waypoint_display_position (source, wp1, &wp1_rel_position);

  00e48	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _wp1_rel_position$13[ebp]
  00e4e	50		 push	 eax
  00e4f	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$15[ebp]
  00e55	51		 push	 ecx
  00e56	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  00e5c	52		 push	 edx
  00e5d	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 4335 : 
; 4336 : 				wp1_rel_position.x = (wp1_rel_position.x - source_position->x) * scale;

  00e62	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00e68	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$13[ebp]
  00e70	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00e74	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00e7c	f3 0f 11 85 d8
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$13[ebp], xmm0

; 4337 : 				wp1_rel_position.z = (wp1_rel_position.z - source_position->z) * scale;

  00e84	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00e8a	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$13[ebp+8]
  00e92	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00e97	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00e9f	f3 0f 11 85 e0
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$13[ebp+8], xmm0

; 4338 : 
; 4339 : 				if (draw_large_mfd)

  00ea7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00eae	0f 84 ac 00 00
	00		 je	 $LN41@draw_tacti

; 4340 : 				{
; 4341 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  00eb4	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  00ebb	75 2f		 jne	 SHORT $LN43@draw_tacti

; 4342 : 						draw_2d_mono_sprite (large_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, waypoint_colour); // 2

  00ebd	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _waypoint_colour$11[ebp]
  00ec3	50		 push	 eax
  00ec4	51		 push	 ecx
  00ec5	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$13[ebp+8]
  00ecd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ed2	51		 push	 ecx
  00ed3	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$13[ebp]
  00edb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ee0	68 00 00 00 00	 push	 OFFSET ?large_tsd_waypoint_marker@@3PADA
  00ee5	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4343 : 					else

  00eea	eb 2d		 jmp	 SHORT $LN44@draw_tacti
$LN43@draw_tacti:

; 4344 : 						draw_2d_mono_sprite (large_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, waypoint_colour);  // 5

  00eec	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _waypoint_colour$11[ebp]
  00ef2	50		 push	 eax
  00ef3	51		 push	 ecx
  00ef4	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$13[ebp+8]
  00efc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f01	51		 push	 ecx
  00f02	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$13[ebp]
  00f0a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f0f	68 00 00 00 00	 push	 OFFSET ?large_tsd_waypoint_marker@@3PADA
  00f14	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN44@draw_tacti:

; 4345 : 
; 4346 : 					set_2d_mono_font_position (wp1_rel_position.x, wp1_rel_position.z);

  00f19	51		 push	 ecx
  00f1a	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$13[ebp+8]
  00f22	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f27	51		 push	 ecx
  00f28	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$13[ebp]
  00f30	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f35	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4347 : 
; 4348 : 					set_mono_font_rel_position (-2.0, -4.0);

  00f3a	51		 push	 ecx
  00f3b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  00f43	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f48	51		 push	 ecx
  00f49	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00f51	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f56	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4349 : 				}
; 4350 : 				else

  00f5b	e9 a7 00 00 00	 jmp	 $LN42@draw_tacti
$LN41@draw_tacti:

; 4351 : 				{
; 4352 : //VJ 030423 TSD render mod
; 4353 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  00f60	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  00f67	75 2f		 jne	 SHORT $LN45@draw_tacti

; 4354 : 						draw_2d_mono_sprite (small_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, waypoint_colour);

  00f69	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _waypoint_colour$11[ebp]
  00f6f	50		 push	 eax
  00f70	51		 push	 ecx
  00f71	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$13[ebp+8]
  00f79	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f7e	51		 push	 ecx
  00f7f	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$13[ebp]
  00f87	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f8c	68 00 00 00 00	 push	 OFFSET ?small_tsd_waypoint_marker@@3PADA
  00f91	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4355 : 					else

  00f96	eb 2d		 jmp	 SHORT $LN46@draw_tacti
$LN45@draw_tacti:

; 4356 : 						draw_2d_mono_sprite (small_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, waypoint_colour);

  00f98	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _waypoint_colour$11[ebp]
  00f9e	50		 push	 eax
  00f9f	51		 push	 ecx
  00fa0	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$13[ebp+8]
  00fa8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fad	51		 push	 ecx
  00fae	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$13[ebp]
  00fb6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fbb	68 00 00 00 00	 push	 OFFSET ?small_tsd_waypoint_marker@@3PADA
  00fc0	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN46@draw_tacti:

; 4357 : 
; 4358 : 					set_2d_mono_font_position (wp1_rel_position.x, wp1_rel_position.z);

  00fc5	51		 push	 ecx
  00fc6	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$13[ebp+8]
  00fce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fd3	51		 push	 ecx
  00fd4	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$13[ebp]
  00fdc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fe1	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4359 : 
; 4360 : 					set_mono_font_rel_position (-2.0, -2.0);

  00fe6	51		 push	 ecx
  00fe7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00fef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ff4	51		 push	 ecx
  00ff5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00ffd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01002	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN42@draw_tacti:

; 4361 : 				}
; 4362 : 
; 4363 : 				print_mono_font_char (get_local_entity_char_value (wp1, CHAR_TYPE_TAG));

  01007	83 bd e8 fe ff
	ff 00		 cmp	 DWORD PTR _wp1$15[ebp], 0
  0100e	74 10		 je	 SHORT $LN159@draw_tacti
  01010	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _wp1$15[ebp]
  01016	8b 08		 mov	 ecx, DWORD PTR [eax]
  01018	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv530[ebp], ecx
  0101e	eb 27		 jmp	 SHORT $LN160@draw_tacti
$LN159@draw_tacti:
  01020	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01026	81 c2 0e 01 00
	00		 add	 edx, 270		; 0000010eH
  0102c	52		 push	 edx
  0102d	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01037	50		 push	 eax
  01038	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0103d	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv530[ebp], 0
$LN160@draw_tacti:
  01047	b9 01 00 00 00	 mov	 ecx, 1
  0104c	85 c9		 test	 ecx, ecx
  0104e	74 0c		 je	 SHORT $LN161@draw_tacti
  01050	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv538[ebp], 0
  0105a	eb 27		 jmp	 SHORT $LN162@draw_tacti
$LN161@draw_tacti:
  0105c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01062	81 c2 0e 01 00
	00		 add	 edx, 270		; 0000010eH
  01068	52		 push	 edx
  01069	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0106e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  01073	50		 push	 eax
  01074	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01079	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv538[ebp], 0
$LN162@draw_tacti:
  01083	6a 00		 push	 0
  01085	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$15[ebp]
  0108b	51		 push	 ecx
  0108c	8b 95 58 fe ff
	ff		 mov	 edx, DWORD PTR tv538[ebp]
  01092	c1 e2 02	 shl	 edx, 2
  01095	8b 85 5c fe ff
	ff		 mov	 eax, DWORD PTR tv530[ebp]
  0109b	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[edx+eax*8]
  010a2	ff d1		 call	 ecx
  010a4	0f b6 d0	 movzx	 edx, al
  010a7	52		 push	 edx
  010a8	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 4364 : 
; 4365 : 				wp1 = get_local_entity_child_succ (wp1, LIST_TYPE_WAYPOINT);

  010ad	83 bd e8 fe ff
	ff 00		 cmp	 DWORD PTR _wp1$15[ebp], 0
  010b4	74 10		 je	 SHORT $LN163@draw_tacti
  010b6	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _wp1$15[ebp]
  010bc	8b 08		 mov	 ecx, DWORD PTR [eax]
  010be	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv551[ebp], ecx
  010c4	eb 27		 jmp	 SHORT $LN164@draw_tacti
$LN163@draw_tacti:
  010c6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  010cc	81 c2 10 01 00
	00		 add	 edx, 272		; 00000110H
  010d2	52		 push	 edx
  010d3	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  010d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  010dd	50		 push	 eax
  010de	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  010e3	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv551[ebp], 0
$LN164@draw_tacti:
  010ed	b9 01 00 00 00	 mov	 ecx, 1
  010f2	85 c9		 test	 ecx, ecx
  010f4	74 0c		 je	 SHORT $LN165@draw_tacti
  010f6	c7 85 58 fe ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv559[ebp], 44 ; 0000002cH
  01100	eb 27		 jmp	 SHORT $LN166@draw_tacti
$LN165@draw_tacti:
  01102	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01108	81 c2 10 01 00
	00		 add	 edx, 272		; 00000110H
  0110e	52		 push	 edx
  0110f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01114	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01119	50		 push	 eax
  0111a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0111f	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv559[ebp], 0
$LN166@draw_tacti:
  01129	6a 2c		 push	 44			; 0000002cH
  0112b	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$15[ebp]
  01131	51		 push	 ecx
  01132	69 95 5c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv551[ebp], 180
  0113c	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv559[ebp]
  01142	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01149	ff d1		 call	 ecx
  0114b	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _wp1$15[ebp], eax

; 4366 : 			}

  01151	e9 e5 fc ff ff	 jmp	 $LN4@draw_tacti
$LN5@draw_tacti:

; 4367 : 
; 4368 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  01156	51		 push	 ecx
  01157	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0115f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01164	51		 push	 ecx
  01165	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0116d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01172	51		 push	 ecx
  01173	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0117b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01180	51		 push	 ecx
  01181	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  01189	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0118e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01193	50		 push	 eax
  01194	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 4369 : 
; 4370 : 			set_2d_window_rotation (mfd_env, 0.0);

  01199	51		 push	 ecx
  0119a	0f 57 c0	 xorps	 xmm0, xmm0
  0119d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  011a7	50		 push	 eax
  011a8	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN30@draw_tacti:

; 4371 : 		}
; 4372 : 	}
; 4373 : 
; 4374 : 	////////////////////////////////////////
; 4375 : 	//
; 4376 : 	// targets
; 4377 : 	//
; 4378 : 	////////////////////////////////////////
; 4379 : 
; 4380 : 	{
; 4381 : 		entity
; 4382 : 			*target,
; 4383 : 			*launched_weapon;
; 4384 : 
; 4385 : 		vec3d
; 4386 : 			*target_position;
; 4387 : 
; 4388 : 		threat_types
; 4389 : 			threat_type;
; 4390 : 
; 4391 : 		int
; 4392 : 			draw_threat_line;
; 4393 : 
; 4394 : 		float
; 4395 : 			air_scan_range,
; 4396 : 			dx,
; 4397 : 			dy;
; 4398 : 
; 4399 : 		if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)

  011ad	83 bd f4 fe ff
	ff 02		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 2
  011b4	0f 84 2d 11 00
	00		 je	 $LN47@draw_tacti

; 4400 : 		{
; 4401 : 			draw_pfzs();

  011ba	e8 00 00 00 00	 call	 ?draw_pfzs@@YGXXZ	; draw_pfzs

; 4402 : 
; 4403 : 			tsd_threat_line_flash_timer -= get_delta_time ();

  011bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_threat_line_flash_timer@@3MA
  011c7	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  011cf	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_threat_line_flash_timer@@3MA, xmm0

; 4404 : 
; 4405 : 			if (tsd_threat_line_flash_timer < 0.0)

  011d7	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?tsd_threat_line_flash_timer@@3MA
  011df	0f 57 c9	 xorps	 xmm1, xmm1
  011e2	66 0f 2f c8	 comisd	 xmm1, xmm0
  011e6	76 1d		 jbe	 SHORT $LN48@draw_tacti

; 4406 : 			{
; 4407 : 				tsd_threat_line_flash_timer = TSD_THREAT_LINE_FLASH_RATE;

  011e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  011f0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_threat_line_flash_timer@@3MA, xmm0

; 4408 : 
; 4409 : 				tsd_draw_threat_line_status ^= 1;

  011f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tsd_draw_threat_line_status@@3HA
  011fd	83 f0 01	 xor	 eax, 1
  01200	a3 00 00 00 00	 mov	 DWORD PTR ?tsd_draw_threat_line_status@@3HA, eax
$LN48@draw_tacti:

; 4410 : 			}
; 4411 : 
; 4412 : 			set_2d_viewport_origin (mfd_env, u, v);

  01205	51		 push	 ecx
  01206	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  0120e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01213	51		 push	 ecx
  01214	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  0121c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01221	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01226	50		 push	 eax
  01227	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 4413 : 
; 4414 : 			set_2d_window_rotation (mfd_env, source_heading);

  0122c	51		 push	 ecx
  0122d	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  01235	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0123a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0123f	50		 push	 eax
  01240	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 4415 : 
; 4416 : 			//
; 4417 : 			// display enemy SAM and AAA threat range circles
; 4418 : 			//
; 4419 : 
; 4420 : 			target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  01245	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0124c	74 10		 je	 SHORT $LN167@draw_tacti
  0124e	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01254	8b 08		 mov	 ecx, DWORD PTR [eax]
  01256	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv588[ebp], ecx
  0125c	eb 27		 jmp	 SHORT $LN168@draw_tacti
$LN167@draw_tacti:
  0125e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01264	81 c2 47 01 00
	00		 add	 edx, 327		; 00000147H
  0126a	52		 push	 edx
  0126b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01270	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01275	50		 push	 eax
  01276	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0127b	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv588[ebp], 0
$LN168@draw_tacti:
  01285	b9 01 00 00 00	 mov	 ecx, 1
  0128a	85 c9		 test	 ecx, ecx
  0128c	74 0c		 je	 SHORT $LN169@draw_tacti
  0128e	c7 85 58 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv596[ebp], 18 ; 00000012H
  01298	eb 27		 jmp	 SHORT $LN170@draw_tacti
$LN169@draw_tacti:
  0129a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  012a0	81 c2 47 01 00
	00		 add	 edx, 327		; 00000147H
  012a6	52		 push	 edx
  012a7	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  012ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  012b1	50		 push	 eax
  012b2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  012b7	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv596[ebp], 0
$LN170@draw_tacti:
  012c1	6a 12		 push	 18			; 00000012H
  012c3	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  012c9	51		 push	 ecx
  012ca	69 95 5c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv588[ebp], 180
  012d4	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv596[ebp]
  012da	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  012e1	ff d1		 call	 ecx
  012e3	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _target$10[ebp], eax
$LN6@draw_tacti:

; 4421 : 
; 4422 : 			while (target)

  012e9	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _target$10[ebp], 0
  012f0	0f 84 82 04 00
	00		 je	 $LN7@draw_tacti

; 4423 : 			{
; 4424 : 				if (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  012f6	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _target$10[ebp], 0
  012fd	74 10		 je	 SHORT $LN171@draw_tacti
  012ff	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _target$10[ebp]
  01305	8b 08		 mov	 ecx, DWORD PTR [eax]
  01307	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv608[ebp], ecx
  0130d	eb 20		 jmp	 SHORT $LN172@draw_tacti
$LN171@draw_tacti:
  0130f	68 48 11 00 00	 push	 4424			; 00001148H
  01314	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01319	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0131f	52		 push	 edx
  01320	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01325	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv608[ebp], 0
$LN172@draw_tacti:
  0132f	b8 01 00 00 00	 mov	 eax, 1
  01334	85 c0		 test	 eax, eax
  01336	74 0c		 je	 SHORT $LN173@draw_tacti
  01338	c7 85 58 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv615[ebp], 66 ; 00000042H
  01342	eb 20		 jmp	 SHORT $LN174@draw_tacti
$LN173@draw_tacti:
  01344	68 48 11 00 00	 push	 4424			; 00001148H
  01349	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0134e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01354	51		 push	 ecx
  01355	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0135a	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv615[ebp], 0
$LN174@draw_tacti:
  01364	6a 42		 push	 66			; 00000042H
  01366	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR _target$10[ebp]
  0136c	52		 push	 edx
  0136d	69 85 5c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv608[ebp], 1116
  01377	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR tv615[ebp]
  0137d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01384	ff d2		 call	 edx
  01386	85 c0		 test	 eax, eax
  01388	0f 85 41 03 00
	00		 jne	 $LN51@draw_tacti

; 4425 : 				{
; 4426 : 					if (source_side != get_local_entity_int_value (target, INT_TYPE_SIDE))

  0138e	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _target$10[ebp], 0
  01395	74 10		 je	 SHORT $LN175@draw_tacti
  01397	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _target$10[ebp]
  0139d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0139f	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv627[ebp], ecx
  013a5	eb 20		 jmp	 SHORT $LN176@draw_tacti
$LN175@draw_tacti:
  013a7	68 4a 11 00 00	 push	 4426			; 0000114aH
  013ac	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  013b1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  013b7	52		 push	 edx
  013b8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  013bd	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv627[ebp], 0
$LN176@draw_tacti:
  013c7	b8 01 00 00 00	 mov	 eax, 1
  013cc	85 c0		 test	 eax, eax
  013ce	74 0c		 je	 SHORT $LN177@draw_tacti
  013d0	c7 85 58 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv634[ebp], 187 ; 000000bbH
  013da	eb 20		 jmp	 SHORT $LN178@draw_tacti
$LN177@draw_tacti:
  013dc	68 4a 11 00 00	 push	 4426			; 0000114aH
  013e1	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  013e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  013ec	51		 push	 ecx
  013ed	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  013f2	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv634[ebp], 0
$LN178@draw_tacti:
  013fc	68 bb 00 00 00	 push	 187			; 000000bbH
  01401	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR _target$10[ebp]
  01407	52		 push	 edx
  01408	69 85 5c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv627[ebp], 1116
  01412	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR tv634[ebp]
  01418	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0141f	ff d2		 call	 edx
  01421	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  01427	0f 84 a2 02 00
	00		 je	 $LN51@draw_tacti

; 4427 : 					{
; 4428 : 						threat_type = (threat_types) get_local_entity_int_value (target, INT_TYPE_THREAT_TYPE);

  0142d	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _target$10[ebp], 0
  01434	74 10		 je	 SHORT $LN179@draw_tacti
  01436	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _target$10[ebp]
  0143c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0143e	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv647[ebp], ecx
  01444	eb 27		 jmp	 SHORT $LN180@draw_tacti
$LN179@draw_tacti:
  01446	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  0144c	81 c2 4f 01 00
	00		 add	 edx, 335		; 0000014fH
  01452	52		 push	 edx
  01453	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01458	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0145d	50		 push	 eax
  0145e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01463	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv647[ebp], 0
$LN180@draw_tacti:
  0146d	b9 01 00 00 00	 mov	 ecx, 1
  01472	85 c9		 test	 ecx, ecx
  01474	74 0c		 je	 SHORT $LN181@draw_tacti
  01476	c7 85 58 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv655[ebp], 233 ; 000000e9H
  01480	eb 27		 jmp	 SHORT $LN182@draw_tacti
$LN181@draw_tacti:
  01482	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01488	81 c2 4f 01 00
	00		 add	 edx, 335		; 0000014fH
  0148e	52		 push	 edx
  0148f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01494	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01499	50		 push	 eax
  0149a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0149f	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv655[ebp], 0
$LN182@draw_tacti:
  014a9	68 e9 00 00 00	 push	 233			; 000000e9H
  014ae	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _target$10[ebp]
  014b4	51		 push	 ecx
  014b5	69 95 5c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv647[ebp], 1116
  014bf	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv655[ebp]
  014c5	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  014cc	ff d1		 call	 ecx
  014ce	89 85 b8 fe ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 4429 : 
; 4430 : 						if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA))

  014d4	83 bd b8 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  014db	74 0d		 je	 SHORT $LN52@draw_tacti
  014dd	83 bd b8 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$7[ebp], 6
  014e4	0f 85 e5 01 00
	00		 jne	 $LN51@draw_tacti
$LN52@draw_tacti:

; 4431 : 						{
; 4432 : 							target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  014ea	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _target$10[ebp], 0
  014f1	74 10		 je	 SHORT $LN183@draw_tacti
  014f3	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _target$10[ebp]
  014f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  014fb	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv669[ebp], ecx
  01501	eb 27		 jmp	 SHORT $LN184@draw_tacti
$LN183@draw_tacti:
  01503	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01509	81 c2 53 01 00
	00		 add	 edx, 339		; 00000153H
  0150f	52		 push	 edx
  01510	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01515	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0151a	50		 push	 eax
  0151b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01520	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv669[ebp], 0
$LN184@draw_tacti:
  0152a	b9 01 00 00 00	 mov	 ecx, 1
  0152f	85 c9		 test	 ecx, ecx
  01531	74 0c		 je	 SHORT $LN185@draw_tacti
  01533	c7 85 58 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv677[ebp], 8
  0153d	eb 27		 jmp	 SHORT $LN186@draw_tacti
$LN185@draw_tacti:
  0153f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01545	81 c2 53 01 00
	00		 add	 edx, 339		; 00000153H
  0154b	52		 push	 edx
  0154c	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01551	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  01556	50		 push	 eax
  01557	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0155c	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv677[ebp], 0
$LN186@draw_tacti:
  01566	6a 08		 push	 8
  01568	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _target$10[ebp]
  0156e	51		 push	 ecx
  0156f	6b 95 5c fe ff
	ff 60		 imul	 edx, DWORD PTR tv669[ebp], 96
  01576	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv677[ebp]
  0157c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  01583	ff d1		 call	 ecx
  01585	89 85 bc fe ff
	ff		 mov	 DWORD PTR _target_position$8[ebp], eax

; 4433 : 
; 4434 : 							dx = (target_position->x - source_position->x) * scale;

  0158b	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _target_position$8[ebp]
  01591	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01597	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0159b	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0159f	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  015a7	f3 0f 11 85 ac
	fe ff ff	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 4435 : 							dy = (target_position->z - source_position->z) * scale;

  015af	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _target_position$8[ebp]
  015b5	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  015bb	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  015c0	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  015c5	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  015cd	f3 0f 11 85 a8
	fe ff ff	 movss	 DWORD PTR _dy$3[ebp], xmm0

; 4436 : 
; 4437 : 							air_scan_range = get_local_entity_float_value (target, FLOAT_TYPE_AIR_SCAN_RANGE) * scale;

  015d5	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _target$10[ebp], 0
  015dc	74 10		 je	 SHORT $LN187@draw_tacti
  015de	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _target$10[ebp]
  015e4	8b 08		 mov	 ecx, DWORD PTR [eax]
  015e6	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv697[ebp], ecx
  015ec	eb 27		 jmp	 SHORT $LN188@draw_tacti
$LN187@draw_tacti:
  015ee	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  015f4	81 c2 58 01 00
	00		 add	 edx, 344		; 00000158H
  015fa	52		 push	 edx
  015fb	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01600	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01605	50		 push	 eax
  01606	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0160b	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv697[ebp], 0
$LN188@draw_tacti:
  01615	b9 01 00 00 00	 mov	 ecx, 1
  0161a	85 c9		 test	 ecx, ecx
  0161c	74 0c		 je	 SHORT $LN189@draw_tacti
  0161e	c7 85 58 fe ff
	ff 05 00 00 00	 mov	 DWORD PTR tv737[ebp], 5
  01628	eb 27		 jmp	 SHORT $LN190@draw_tacti
$LN189@draw_tacti:
  0162a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01630	81 c2 58 01 00
	00		 add	 edx, 344		; 00000158H
  01636	52		 push	 edx
  01637	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0163c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  01641	50		 push	 eax
  01642	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01647	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv737[ebp], 0
$LN190@draw_tacti:
  01651	6a 05		 push	 5
  01653	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _target$10[ebp]
  01659	51		 push	 ecx
  0165a	69 95 5c fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv697[ebp], 700
  01664	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv737[ebp]
  0166a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  01671	ff d1		 call	 ecx
  01673	d9 9d 54 fe ff
	ff		 fstp	 DWORD PTR tv1835[ebp]
  01679	f3 0f 10 85 54
	fe ff ff	 movss	 xmm0, DWORD PTR tv1835[ebp]
  01681	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01689	f3 0f 11 85 b0
	fe ff ff	 movss	 DWORD PTR _air_scan_range$5[ebp], xmm0

; 4438 : 
; 4439 : 							draw_2d_circle (dx, dy, air_scan_range, MFD_COLOUR_DARK_RED);

  01691	b8 04 00 00 00	 mov	 eax, 4
  01696	6b c8 12	 imul	 ecx, eax, 18
  01699	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0169f	52		 push	 edx
  016a0	51		 push	 ecx
  016a1	f3 0f 10 85 b0
	fe ff ff	 movss	 xmm0, DWORD PTR _air_scan_range$5[ebp]
  016a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016ae	51		 push	 ecx
  016af	f3 0f 10 85 a8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  016b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016bc	51		 push	 ecx
  016bd	f3 0f 10 85 ac
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  016c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016ca	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle
$LN51@draw_tacti:

; 4440 : 						}
; 4441 : 					}
; 4442 : 				}
; 4443 : 
; 4444 : 				target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  016cf	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _target$10[ebp], 0
  016d6	74 10		 je	 SHORT $LN191@draw_tacti
  016d8	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _target$10[ebp]
  016de	8b 08		 mov	 ecx, DWORD PTR [eax]
  016e0	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv756[ebp], ecx
  016e6	eb 27		 jmp	 SHORT $LN192@draw_tacti
$LN191@draw_tacti:
  016e8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  016ee	81 c2 5f 01 00
	00		 add	 edx, 351		; 0000015fH
  016f4	52		 push	 edx
  016f5	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  016fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  016ff	50		 push	 eax
  01700	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01705	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv756[ebp], 0
$LN192@draw_tacti:
  0170f	b9 01 00 00 00	 mov	 ecx, 1
  01714	85 c9		 test	 ecx, ecx
  01716	74 0c		 je	 SHORT $LN193@draw_tacti
  01718	c7 85 58 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv764[ebp], 18 ; 00000012H
  01722	eb 27		 jmp	 SHORT $LN194@draw_tacti
$LN193@draw_tacti:
  01724	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  0172a	81 c2 5f 01 00
	00		 add	 edx, 351		; 0000015fH
  01730	52		 push	 edx
  01731	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01736	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0173b	50		 push	 eax
  0173c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01741	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv764[ebp], 0
$LN194@draw_tacti:
  0174b	6a 12		 push	 18			; 00000012H
  0174d	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _target$10[ebp]
  01753	51		 push	 ecx
  01754	69 95 5c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv756[ebp], 180
  0175e	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv764[ebp]
  01764	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0176b	ff d1		 call	 ecx
  0176d	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _target$10[ebp], eax

; 4445 : 			}

  01773	e9 71 fb ff ff	 jmp	 $LN6@draw_tacti
$LN7@draw_tacti:

; 4446 : 
; 4447 : 			//
; 4448 : 			// display all gunship targets (do not show ground radar clutter)
; 4449 : 			//
; 4450 : 
; 4451 : 			target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  01778	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0177f	74 10		 je	 SHORT $LN195@draw_tacti
  01781	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01787	8b 08		 mov	 ecx, DWORD PTR [eax]
  01789	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv776[ebp], ecx
  0178f	eb 27		 jmp	 SHORT $LN196@draw_tacti
$LN195@draw_tacti:
  01791	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01797	81 c2 66 01 00
	00		 add	 edx, 358		; 00000166H
  0179d	52		 push	 edx
  0179e	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  017a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  017a8	50		 push	 eax
  017a9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  017ae	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv776[ebp], 0
$LN196@draw_tacti:
  017b8	b9 01 00 00 00	 mov	 ecx, 1
  017bd	85 c9		 test	 ecx, ecx
  017bf	74 0c		 je	 SHORT $LN197@draw_tacti
  017c1	c7 85 58 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv784[ebp], 18 ; 00000012H
  017cb	eb 27		 jmp	 SHORT $LN198@draw_tacti
$LN197@draw_tacti:
  017cd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  017d3	81 c2 66 01 00
	00		 add	 edx, 358		; 00000166H
  017d9	52		 push	 edx
  017da	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  017df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  017e4	50		 push	 eax
  017e5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  017ea	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv784[ebp], 0
$LN198@draw_tacti:
  017f4	6a 12		 push	 18			; 00000012H
  017f6	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  017fc	51		 push	 ecx
  017fd	69 95 5c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv776[ebp], 180
  01807	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv784[ebp]
  0180d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01814	ff d1		 call	 ecx
  01816	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _target$10[ebp], eax
$LN8@draw_tacti:

; 4452 : 
; 4453 : 			while (target)

  0181c	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _target$10[ebp], 0
  01823	0f 84 96 01 00
	00		 je	 $LN9@draw_tacti

; 4454 : 			{
; 4455 : 				if (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  01829	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _target$10[ebp], 0
  01830	74 10		 je	 SHORT $LN199@draw_tacti
  01832	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _target$10[ebp]
  01838	8b 08		 mov	 ecx, DWORD PTR [eax]
  0183a	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv796[ebp], ecx
  01840	eb 20		 jmp	 SHORT $LN200@draw_tacti
$LN199@draw_tacti:
  01842	68 67 11 00 00	 push	 4455			; 00001167H
  01847	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0184c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01852	52		 push	 edx
  01853	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01858	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv796[ebp], 0
$LN200@draw_tacti:
  01862	b8 01 00 00 00	 mov	 eax, 1
  01867	85 c0		 test	 eax, eax
  01869	74 0c		 je	 SHORT $LN201@draw_tacti
  0186b	c7 85 58 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv803[ebp], 66 ; 00000042H
  01875	eb 20		 jmp	 SHORT $LN202@draw_tacti
$LN201@draw_tacti:
  01877	68 67 11 00 00	 push	 4455			; 00001167H
  0187c	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01881	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01887	51		 push	 ecx
  01888	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0188d	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv803[ebp], 0
$LN202@draw_tacti:
  01897	6a 42		 push	 66			; 00000042H
  01899	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR _target$10[ebp]
  0189f	52		 push	 edx
  018a0	69 85 5c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv796[ebp], 1116
  018aa	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR tv803[ebp]
  018b0	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  018b7	ff d2		 call	 edx
  018b9	85 c0		 test	 eax, eax
  018bb	75 59		 jne	 SHORT $LN55@draw_tacti

; 4456 : 				{
; 4457 : 					//VJ 030423 TSD render mod
; 4458 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  018bd	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  018c4	75 29		 jne	 SHORT $LN54@draw_tacti

; 4459 : 						draw_radar_target_symbol (target, source_position, scale, FALSE, FALSE, FALSE);

  018c6	6a 00		 push	 0
  018c8	6a 00		 push	 0
  018ca	6a 00		 push	 0
  018cc	51		 push	 ecx
  018cd	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  018d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018da	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  018e0	50		 push	 eax
  018e1	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _target$10[ebp]
  018e7	51		 push	 ecx
  018e8	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z ; draw_radar_target_symbol

; 4460 : 					else

  018ed	eb 27		 jmp	 SHORT $LN55@draw_tacti
$LN54@draw_tacti:

; 4461 : 						draw_radar_target_symbol (target, source_position, scale, FALSE, TRUE, FALSE);

  018ef	6a 00		 push	 0
  018f1	6a 01		 push	 1
  018f3	6a 00		 push	 0
  018f5	51		 push	 ecx
  018f6	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  018fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01903	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  01909	50		 push	 eax
  0190a	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _target$10[ebp]
  01910	51		 push	 ecx
  01911	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z ; draw_radar_target_symbol
$LN55@draw_tacti:

; 4462 : 				}
; 4463 : 
; 4464 : 				target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  01916	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _target$10[ebp], 0
  0191d	74 10		 je	 SHORT $LN203@draw_tacti
  0191f	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _target$10[ebp]
  01925	8b 08		 mov	 ecx, DWORD PTR [eax]
  01927	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv829[ebp], ecx
  0192d	eb 27		 jmp	 SHORT $LN204@draw_tacti
$LN203@draw_tacti:
  0192f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01935	81 c2 73 01 00
	00		 add	 edx, 371		; 00000173H
  0193b	52		 push	 edx
  0193c	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01941	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01946	50		 push	 eax
  01947	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0194c	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv829[ebp], 0
$LN204@draw_tacti:
  01956	b9 01 00 00 00	 mov	 ecx, 1
  0195b	85 c9		 test	 ecx, ecx
  0195d	74 0c		 je	 SHORT $LN205@draw_tacti
  0195f	c7 85 58 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv837[ebp], 18 ; 00000012H
  01969	eb 27		 jmp	 SHORT $LN206@draw_tacti
$LN205@draw_tacti:
  0196b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01971	81 c2 73 01 00
	00		 add	 edx, 371		; 00000173H
  01977	52		 push	 edx
  01978	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0197d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01982	50		 push	 eax
  01983	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01988	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv837[ebp], 0
$LN206@draw_tacti:
  01992	6a 12		 push	 18			; 00000012H
  01994	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _target$10[ebp]
  0199a	51		 push	 ecx
  0199b	69 95 5c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv829[ebp], 180
  019a5	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv837[ebp]
  019ab	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  019b2	ff d1		 call	 ecx
  019b4	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _target$10[ebp], eax

; 4465 : 			}

  019ba	e9 5d fe ff ff	 jmp	 $LN8@draw_tacti
$LN9@draw_tacti:

; 4466 : 
; 4467 : 			//
; 4468 : 			// draw selected target last
; 4469 : 			//
; 4470 : 
; 4471 : 			if (source_target)

  019bf	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _source_target$[ebp], 0
  019c6	74 59		 je	 SHORT $LN58@draw_tacti

; 4472 : 			{
; 4473 : 				//VJ 030423 TSD render mod
; 4474 : 				if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  019c8	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  019cf	75 29		 jne	 SHORT $LN57@draw_tacti

; 4475 : 					draw_radar_target_symbol (source_target, source_position, scale, TRUE, FALSE, FALSE);

  019d1	6a 00		 push	 0
  019d3	6a 00		 push	 0
  019d5	6a 01		 push	 1
  019d7	51		 push	 ecx
  019d8	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  019e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019e5	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  019eb	50		 push	 eax
  019ec	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _source_target$[ebp]
  019f2	51		 push	 ecx
  019f3	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z ; draw_radar_target_symbol

; 4476 : 				else

  019f8	eb 27		 jmp	 SHORT $LN58@draw_tacti
$LN57@draw_tacti:

; 4477 : 					draw_radar_target_symbol (source_target, source_position, scale, TRUE, TRUE, FALSE);

  019fa	6a 00		 push	 0
  019fc	6a 01		 push	 1
  019fe	6a 01		 push	 1
  01a00	51		 push	 ecx
  01a01	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  01a09	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a0e	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  01a14	50		 push	 eax
  01a15	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _source_target$[ebp]
  01a1b	51		 push	 ecx
  01a1c	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z ; draw_radar_target_symbol
$LN58@draw_tacti:

; 4478 : 			}
; 4479 : 
; 4480 : 			//
; 4481 : 			// draw threat line if gunship is targetted (flash if missile fired)
; 4482 : 			//
; 4483 : 
; 4484 : 			target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  01a21	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01a28	74 10		 je	 SHORT $LN207@draw_tacti
  01a2a	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01a30	8b 08		 mov	 ecx, DWORD PTR [eax]
  01a32	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv863[ebp], ecx
  01a38	eb 27		 jmp	 SHORT $LN208@draw_tacti
$LN207@draw_tacti:
  01a3a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01a40	81 c2 87 01 00
	00		 add	 edx, 391		; 00000187H
  01a46	52		 push	 edx
  01a47	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01a4c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01a51	50		 push	 eax
  01a52	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01a57	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv863[ebp], 0
$LN208@draw_tacti:
  01a61	b9 01 00 00 00	 mov	 ecx, 1
  01a66	85 c9		 test	 ecx, ecx
  01a68	74 0c		 je	 SHORT $LN209@draw_tacti
  01a6a	c7 85 58 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv871[ebp], 18 ; 00000012H
  01a74	eb 27		 jmp	 SHORT $LN210@draw_tacti
$LN209@draw_tacti:
  01a76	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01a7c	81 c2 87 01 00
	00		 add	 edx, 391		; 00000187H
  01a82	52		 push	 edx
  01a83	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01a88	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01a8d	50		 push	 eax
  01a8e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01a93	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv871[ebp], 0
$LN210@draw_tacti:
  01a9d	6a 12		 push	 18			; 00000012H
  01a9f	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  01aa5	51		 push	 ecx
  01aa6	69 95 5c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv863[ebp], 180
  01ab0	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv871[ebp]
  01ab6	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01abd	ff d1		 call	 ecx
  01abf	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _target$10[ebp], eax
$LN10@draw_tacti:

; 4485 : 
; 4486 : 			while (target)

  01ac5	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _target$10[ebp], 0
  01acc	0f 84 be 07 00
	00		 je	 $LN11@draw_tacti

; 4487 : 			{
; 4488 : 				if (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  01ad2	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _target$10[ebp], 0
  01ad9	74 10		 je	 SHORT $LN211@draw_tacti
  01adb	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _target$10[ebp]
  01ae1	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ae3	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv883[ebp], ecx
  01ae9	eb 20		 jmp	 SHORT $LN212@draw_tacti
$LN211@draw_tacti:
  01aeb	68 88 11 00 00	 push	 4488			; 00001188H
  01af0	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01af5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01afb	52		 push	 edx
  01afc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01b01	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv883[ebp], 0
$LN212@draw_tacti:
  01b0b	b8 01 00 00 00	 mov	 eax, 1
  01b10	85 c0		 test	 eax, eax
  01b12	74 0c		 je	 SHORT $LN213@draw_tacti
  01b14	c7 85 58 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv890[ebp], 66 ; 00000042H
  01b1e	eb 20		 jmp	 SHORT $LN214@draw_tacti
$LN213@draw_tacti:
  01b20	68 88 11 00 00	 push	 4488			; 00001188H
  01b25	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01b2a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01b30	51		 push	 ecx
  01b31	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01b36	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv890[ebp], 0
$LN214@draw_tacti:
  01b40	6a 42		 push	 66			; 00000042H
  01b42	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR _target$10[ebp]
  01b48	52		 push	 edx
  01b49	69 85 5c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv883[ebp], 1116
  01b53	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR tv890[ebp]
  01b59	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01b60	ff d2		 call	 edx
  01b62	85 c0		 test	 eax, eax
  01b64	0f 85 7d 06 00
	00		 jne	 $LN67@draw_tacti

; 4489 : 				{
; 4490 : 					if (source_side != get_local_entity_int_value (target, INT_TYPE_SIDE))

  01b6a	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _target$10[ebp], 0
  01b71	74 10		 je	 SHORT $LN215@draw_tacti
  01b73	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _target$10[ebp]
  01b79	8b 08		 mov	 ecx, DWORD PTR [eax]
  01b7b	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv902[ebp], ecx
  01b81	eb 20		 jmp	 SHORT $LN216@draw_tacti
$LN215@draw_tacti:
  01b83	68 8a 11 00 00	 push	 4490			; 0000118aH
  01b88	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01b8d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01b93	52		 push	 edx
  01b94	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01b99	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv902[ebp], 0
$LN216@draw_tacti:
  01ba3	b8 01 00 00 00	 mov	 eax, 1
  01ba8	85 c0		 test	 eax, eax
  01baa	74 0c		 je	 SHORT $LN217@draw_tacti
  01bac	c7 85 58 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv909[ebp], 187 ; 000000bbH
  01bb6	eb 20		 jmp	 SHORT $LN218@draw_tacti
$LN217@draw_tacti:
  01bb8	68 8a 11 00 00	 push	 4490			; 0000118aH
  01bbd	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01bc2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01bc8	51		 push	 ecx
  01bc9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01bce	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv909[ebp], 0
$LN218@draw_tacti:
  01bd8	68 bb 00 00 00	 push	 187			; 000000bbH
  01bdd	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR _target$10[ebp]
  01be3	52		 push	 edx
  01be4	69 85 5c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv902[ebp], 1116
  01bee	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR tv909[ebp]
  01bf4	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01bfb	ff d2		 call	 edx
  01bfd	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  01c03	0f 84 de 05 00
	00		 je	 $LN67@draw_tacti

; 4491 : 					{
; 4492 : 						if (get_local_entity_int_value (target, INT_TYPE_RADAR_ON))

  01c09	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _target$10[ebp], 0
  01c10	74 10		 je	 SHORT $LN219@draw_tacti
  01c12	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _target$10[ebp]
  01c18	8b 08		 mov	 ecx, DWORD PTR [eax]
  01c1a	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv921[ebp], ecx
  01c20	eb 20		 jmp	 SHORT $LN220@draw_tacti
$LN219@draw_tacti:
  01c22	68 8c 11 00 00	 push	 4492			; 0000118cH
  01c27	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01c2c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01c32	52		 push	 edx
  01c33	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01c38	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv921[ebp], 0
$LN220@draw_tacti:
  01c42	b8 01 00 00 00	 mov	 eax, 1
  01c47	85 c0		 test	 eax, eax
  01c49	74 0c		 je	 SHORT $LN221@draw_tacti
  01c4b	c7 85 58 fe ff
	ff a9 00 00 00	 mov	 DWORD PTR tv928[ebp], 169 ; 000000a9H
  01c55	eb 20		 jmp	 SHORT $LN222@draw_tacti
$LN221@draw_tacti:
  01c57	68 8c 11 00 00	 push	 4492			; 0000118cH
  01c5c	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01c61	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01c67	51		 push	 ecx
  01c68	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01c6d	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv928[ebp], 0
$LN222@draw_tacti:
  01c77	68 a9 00 00 00	 push	 169			; 000000a9H
  01c7c	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR _target$10[ebp]
  01c82	52		 push	 edx
  01c83	69 85 5c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv921[ebp], 1116
  01c8d	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR tv928[ebp]
  01c93	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01c9a	ff d2		 call	 edx
  01c9c	85 c0		 test	 eax, eax
  01c9e	0f 84 43 05 00
	00		 je	 $LN67@draw_tacti

; 4493 : 						{
; 4494 : 							threat_type = (threat_types) get_local_entity_int_value (target, INT_TYPE_THREAT_TYPE);

  01ca4	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _target$10[ebp], 0
  01cab	74 10		 je	 SHORT $LN223@draw_tacti
  01cad	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _target$10[ebp]
  01cb3	8b 08		 mov	 ecx, DWORD PTR [eax]
  01cb5	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv941[ebp], ecx
  01cbb	eb 27		 jmp	 SHORT $LN224@draw_tacti
$LN223@draw_tacti:
  01cbd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01cc3	81 c2 91 01 00
	00		 add	 edx, 401		; 00000191H
  01cc9	52		 push	 edx
  01cca	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01ccf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01cd4	50		 push	 eax
  01cd5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01cda	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv941[ebp], 0
$LN224@draw_tacti:
  01ce4	b9 01 00 00 00	 mov	 ecx, 1
  01ce9	85 c9		 test	 ecx, ecx
  01ceb	74 0c		 je	 SHORT $LN225@draw_tacti
  01ced	c7 85 58 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv949[ebp], 233 ; 000000e9H
  01cf7	eb 27		 jmp	 SHORT $LN226@draw_tacti
$LN225@draw_tacti:
  01cf9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01cff	81 c2 91 01 00
	00		 add	 edx, 401		; 00000191H
  01d05	52		 push	 edx
  01d06	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01d0b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01d10	50		 push	 eax
  01d11	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01d16	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv949[ebp], 0
$LN226@draw_tacti:
  01d20	68 e9 00 00 00	 push	 233			; 000000e9H
  01d25	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _target$10[ebp]
  01d2b	51		 push	 ecx
  01d2c	69 95 5c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv941[ebp], 1116
  01d36	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv949[ebp]
  01d3c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  01d43	ff d1		 call	 ecx
  01d45	89 85 b8 fe ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 4495 : 
; 4496 : 							if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA) || (threat_type == THREAT_TYPE_AIRBORNE_RADAR))

  01d4b	83 bd b8 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  01d52	74 16		 je	 SHORT $LN63@draw_tacti
  01d54	83 bd b8 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$7[ebp], 6
  01d5b	74 0d		 je	 SHORT $LN63@draw_tacti
  01d5d	83 bd b8 fe ff
	ff 04		 cmp	 DWORD PTR _threat_type$7[ebp], 4
  01d64	0f 85 7d 04 00
	00		 jne	 $LN67@draw_tacti
$LN63@draw_tacti:

; 4497 : 							{
; 4498 : 								if (get_local_entity_parent (target, LIST_TYPE_TARGET) == source)

  01d6a	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _target$10[ebp], 0
  01d71	74 10		 je	 SHORT $LN227@draw_tacti
  01d73	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _target$10[ebp]
  01d79	8b 08		 mov	 ecx, DWORD PTR [eax]
  01d7b	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv963[ebp], ecx
  01d81	eb 20		 jmp	 SHORT $LN228@draw_tacti
$LN227@draw_tacti:
  01d83	68 92 11 00 00	 push	 4498			; 00001192H
  01d88	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01d8d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01d93	52		 push	 edx
  01d94	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01d99	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv963[ebp], 0
$LN228@draw_tacti:
  01da3	b8 01 00 00 00	 mov	 eax, 1
  01da8	85 c0		 test	 eax, eax
  01daa	74 0c		 je	 SHORT $LN229@draw_tacti
  01dac	c7 85 58 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv970[ebp], 38 ; 00000026H
  01db6	eb 20		 jmp	 SHORT $LN230@draw_tacti
$LN229@draw_tacti:
  01db8	68 92 11 00 00	 push	 4498			; 00001192H
  01dbd	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01dc2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01dc8	51		 push	 ecx
  01dc9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01dce	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv970[ebp], 0
$LN230@draw_tacti:
  01dd8	6a 26		 push	 38			; 00000026H
  01dda	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR _target$10[ebp]
  01de0	52		 push	 edx
  01de1	69 85 5c fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv963[ebp], 180
  01deb	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR tv970[ebp]
  01df1	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  01df8	ff d2		 call	 edx
  01dfa	3b 85 08 ff ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  01e00	0f 85 e1 03 00
	00		 jne	 $LN67@draw_tacti

; 4499 : 								{
; 4500 : 									draw_threat_line = TRUE;

  01e06	c7 85 b4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _draw_threat_line$6[ebp], 1

; 4501 : 
; 4502 : 									launched_weapon = get_local_entity_first_child (target, LIST_TYPE_LAUNCHED_WEAPON);

  01e10	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _target$10[ebp], 0
  01e17	74 10		 je	 SHORT $LN231@draw_tacti
  01e19	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _target$10[ebp]
  01e1f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01e21	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv983[ebp], ecx
  01e27	eb 27		 jmp	 SHORT $LN232@draw_tacti
$LN231@draw_tacti:
  01e29	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01e2f	81 c2 99 01 00
	00		 add	 edx, 409		; 00000199H
  01e35	52		 push	 edx
  01e36	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01e3b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01e40	50		 push	 eax
  01e41	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01e46	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv983[ebp], 0
$LN232@draw_tacti:
  01e50	b9 01 00 00 00	 mov	 ecx, 1
  01e55	85 c9		 test	 ecx, ecx
  01e57	74 0c		 je	 SHORT $LN233@draw_tacti
  01e59	c7 85 58 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv991[ebp], 24 ; 00000018H
  01e63	eb 27		 jmp	 SHORT $LN234@draw_tacti
$LN233@draw_tacti:
  01e65	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01e6b	81 c2 99 01 00
	00		 add	 edx, 409		; 00000199H
  01e71	52		 push	 edx
  01e72	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01e77	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01e7c	50		 push	 eax
  01e7d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01e82	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv991[ebp], 0
$LN234@draw_tacti:
  01e8c	6a 18		 push	 24			; 00000018H
  01e8e	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _target$10[ebp]
  01e94	51		 push	 ecx
  01e95	69 95 5c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv983[ebp], 180
  01e9f	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv991[ebp]
  01ea5	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01eac	ff d1		 call	 ecx
  01eae	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _launched_weapon$9[ebp], eax
$LN12@draw_tacti:

; 4503 : 
; 4504 : 									while (launched_weapon)

  01eb4	83 bd c0 fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  01ebb	0f 84 ec 01 00
	00		 je	 $LN13@draw_tacti

; 4505 : 									{
; 4506 : 										if (get_local_entity_int_value (launched_weapon, INT_TYPE_WEAPON_GUIDANCE_TYPE) != WEAPON_GUIDANCE_TYPE_NONE)

  01ec1	83 bd c0 fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  01ec8	74 10		 je	 SHORT $LN235@draw_tacti
  01eca	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$9[ebp]
  01ed0	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ed2	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv1003[ebp], ecx
  01ed8	eb 20		 jmp	 SHORT $LN236@draw_tacti
$LN235@draw_tacti:
  01eda	68 9a 11 00 00	 push	 4506			; 0000119aH
  01edf	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01ee4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01eea	52		 push	 edx
  01eeb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01ef0	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1003[ebp], 0
$LN236@draw_tacti:
  01efa	b8 01 00 00 00	 mov	 eax, 1
  01eff	85 c0		 test	 eax, eax
  01f01	74 0c		 je	 SHORT $LN237@draw_tacti
  01f03	c7 85 58 fe ff
	ff 07 01 00 00	 mov	 DWORD PTR tv1010[ebp], 263 ; 00000107H
  01f0d	eb 20		 jmp	 SHORT $LN238@draw_tacti
$LN237@draw_tacti:
  01f0f	68 9a 11 00 00	 push	 4506			; 0000119aH
  01f14	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01f19	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01f1f	51		 push	 ecx
  01f20	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01f25	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1010[ebp], 0
$LN238@draw_tacti:
  01f2f	68 07 01 00 00	 push	 263			; 00000107H
  01f34	8b 95 c0 fe ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$9[ebp]
  01f3a	52		 push	 edx
  01f3b	69 85 5c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1003[ebp], 1116
  01f45	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR tv1010[ebp]
  01f4b	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01f52	ff d2		 call	 edx
  01f54	85 c0		 test	 eax, eax
  01f56	0f 84 a8 00 00
	00		 je	 $LN66@draw_tacti

; 4507 : 										{
; 4508 : 											if (get_local_entity_parent (launched_weapon, LIST_TYPE_TARGET) == source)

  01f5c	83 bd c0 fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  01f63	74 10		 je	 SHORT $LN239@draw_tacti
  01f65	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$9[ebp]
  01f6b	8b 08		 mov	 ecx, DWORD PTR [eax]
  01f6d	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv1022[ebp], ecx
  01f73	eb 20		 jmp	 SHORT $LN240@draw_tacti
$LN239@draw_tacti:
  01f75	68 9c 11 00 00	 push	 4508			; 0000119cH
  01f7a	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01f7f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01f85	52		 push	 edx
  01f86	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01f8b	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1022[ebp], 0
$LN240@draw_tacti:
  01f95	b8 01 00 00 00	 mov	 eax, 1
  01f9a	85 c0		 test	 eax, eax
  01f9c	74 0c		 je	 SHORT $LN241@draw_tacti
  01f9e	c7 85 58 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv1029[ebp], 38 ; 00000026H
  01fa8	eb 20		 jmp	 SHORT $LN242@draw_tacti
$LN241@draw_tacti:
  01faa	68 9c 11 00 00	 push	 4508			; 0000119cH
  01faf	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  01fb4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01fba	51		 push	 ecx
  01fbb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01fc0	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1029[ebp], 0
$LN242@draw_tacti:
  01fca	6a 26		 push	 38			; 00000026H
  01fcc	8b 95 c0 fe ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$9[ebp]
  01fd2	52		 push	 edx
  01fd3	69 85 5c fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv1022[ebp], 180
  01fdd	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR tv1029[ebp]
  01fe3	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  01fea	ff d2		 call	 edx
  01fec	3b 85 08 ff ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  01ff2	75 10		 jne	 SHORT $LN66@draw_tacti

; 4509 : 											{
; 4510 : 												draw_threat_line = tsd_draw_threat_line_status;

  01ff4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tsd_draw_threat_line_status@@3HA
  01ff9	89 85 b4 fe ff
	ff		 mov	 DWORD PTR _draw_threat_line$6[ebp], eax

; 4511 : 
; 4512 : 												break;

  01fff	e9 a9 00 00 00	 jmp	 $LN13@draw_tacti
$LN66@draw_tacti:

; 4513 : 											}
; 4514 : 										}
; 4515 : 
; 4516 : 										launched_weapon = get_local_entity_child_succ (launched_weapon, LIST_TYPE_LAUNCHED_WEAPON);

  02004	83 bd c0 fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  0200b	74 10		 je	 SHORT $LN243@draw_tacti
  0200d	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$9[ebp]
  02013	8b 08		 mov	 ecx, DWORD PTR [eax]
  02015	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv1042[ebp], ecx
  0201b	eb 27		 jmp	 SHORT $LN244@draw_tacti
$LN243@draw_tacti:
  0201d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  02023	81 c2 a7 01 00
	00		 add	 edx, 423		; 000001a7H
  02029	52		 push	 edx
  0202a	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0202f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02034	50		 push	 eax
  02035	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0203a	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1042[ebp], 0
$LN244@draw_tacti:
  02044	b9 01 00 00 00	 mov	 ecx, 1
  02049	85 c9		 test	 ecx, ecx
  0204b	74 0c		 je	 SHORT $LN245@draw_tacti
  0204d	c7 85 58 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv1050[ebp], 24 ; 00000018H
  02057	eb 27		 jmp	 SHORT $LN246@draw_tacti
$LN245@draw_tacti:
  02059	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  0205f	81 c2 a7 01 00
	00		 add	 edx, 423		; 000001a7H
  02065	52		 push	 edx
  02066	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0206b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  02070	50		 push	 eax
  02071	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02076	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1050[ebp], 0
$LN246@draw_tacti:
  02080	6a 18		 push	 24			; 00000018H
  02082	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _launched_weapon$9[ebp]
  02088	51		 push	 ecx
  02089	69 95 5c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv1042[ebp], 180
  02093	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv1050[ebp]
  02099	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  020a0	ff d1		 call	 ecx
  020a2	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _launched_weapon$9[ebp], eax

; 4517 : 									}

  020a8	e9 07 fe ff ff	 jmp	 $LN12@draw_tacti
$LN13@draw_tacti:

; 4518 : 
; 4519 : 									if (draw_threat_line)

  020ad	83 bd b4 fe ff
	ff 00		 cmp	 DWORD PTR _draw_threat_line$6[ebp], 0
  020b4	0f 84 2d 01 00
	00		 je	 $LN67@draw_tacti

; 4520 : 									{
; 4521 : 										target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  020ba	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _target$10[ebp], 0
  020c1	74 10		 je	 SHORT $LN247@draw_tacti
  020c3	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _target$10[ebp]
  020c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  020cb	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv1063[ebp], ecx
  020d1	eb 27		 jmp	 SHORT $LN248@draw_tacti
$LN247@draw_tacti:
  020d3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  020d9	81 c2 ac 01 00
	00		 add	 edx, 428		; 000001acH
  020df	52		 push	 edx
  020e0	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  020e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  020ea	50		 push	 eax
  020eb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  020f0	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1063[ebp], 0
$LN248@draw_tacti:
  020fa	b9 01 00 00 00	 mov	 ecx, 1
  020ff	85 c9		 test	 ecx, ecx
  02101	74 0c		 je	 SHORT $LN249@draw_tacti
  02103	c7 85 58 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv1071[ebp], 8
  0210d	eb 27		 jmp	 SHORT $LN250@draw_tacti
$LN249@draw_tacti:
  0210f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  02115	81 c2 ac 01 00
	00		 add	 edx, 428		; 000001acH
  0211b	52		 push	 edx
  0211c	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  02121	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  02126	50		 push	 eax
  02127	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0212c	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1071[ebp], 0
$LN250@draw_tacti:
  02136	6a 08		 push	 8
  02138	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _target$10[ebp]
  0213e	51		 push	 ecx
  0213f	6b 95 5c fe ff
	ff 60		 imul	 edx, DWORD PTR tv1063[ebp], 96
  02146	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv1071[ebp]
  0214c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  02153	ff d1		 call	 ecx
  02155	89 85 bc fe ff
	ff		 mov	 DWORD PTR _target_position$8[ebp], eax

; 4522 : 
; 4523 : 										dx = (target_position->x - source_position->x) * scale;

  0215b	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _target_position$8[ebp]
  02161	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  02167	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0216b	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0216f	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  02177	f3 0f 11 85 ac
	fe ff ff	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 4524 : 										dy = (target_position->z - source_position->z) * scale;

  0217f	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _target_position$8[ebp]
  02185	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  0218b	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  02190	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  02195	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0219d	f3 0f 11 85 a8
	fe ff ff	 movss	 DWORD PTR _dy$3[ebp], xmm0

; 4525 : 
; 4526 : 										draw_2d_line (0.0, 0.0, dx, dy, MFD_COLOUR1);

  021a5	b8 04 00 00 00	 mov	 eax, 4
  021aa	6b c8 00	 imul	 ecx, eax, 0
  021ad	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  021b3	52		 push	 edx
  021b4	51		 push	 ecx
  021b5	f3 0f 10 85 a8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  021bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021c2	51		 push	 ecx
  021c3	f3 0f 10 85 ac
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  021cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021d0	51		 push	 ecx
  021d1	0f 57 c0	 xorps	 xmm0, xmm0
  021d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021d9	51		 push	 ecx
  021da	0f 57 c0	 xorps	 xmm0, xmm0
  021dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021e2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN67@draw_tacti:

; 4527 : 									}
; 4528 : 								}
; 4529 : 							}
; 4530 : 						}
; 4531 : 					}
; 4532 : 				}
; 4533 : 
; 4534 : 				target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  021e7	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _target$10[ebp], 0
  021ee	74 10		 je	 SHORT $LN251@draw_tacti
  021f0	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _target$10[ebp]
  021f6	8b 08		 mov	 ecx, DWORD PTR [eax]
  021f8	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv1098[ebp], ecx
  021fe	eb 27		 jmp	 SHORT $LN252@draw_tacti
$LN251@draw_tacti:
  02200	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  02206	81 c2 b9 01 00
	00		 add	 edx, 441		; 000001b9H
  0220c	52		 push	 edx
  0220d	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  02212	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02217	50		 push	 eax
  02218	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0221d	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1098[ebp], 0
$LN252@draw_tacti:
  02227	b9 01 00 00 00	 mov	 ecx, 1
  0222c	85 c9		 test	 ecx, ecx
  0222e	74 0c		 je	 SHORT $LN253@draw_tacti
  02230	c7 85 58 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv1106[ebp], 18 ; 00000012H
  0223a	eb 27		 jmp	 SHORT $LN254@draw_tacti
$LN253@draw_tacti:
  0223c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  02242	81 c2 b9 01 00
	00		 add	 edx, 441		; 000001b9H
  02248	52		 push	 edx
  02249	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0224e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  02253	50		 push	 eax
  02254	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02259	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1106[ebp], 0
$LN254@draw_tacti:
  02263	6a 12		 push	 18			; 00000012H
  02265	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _target$10[ebp]
  0226b	51		 push	 ecx
  0226c	69 95 5c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv1098[ebp], 180
  02276	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv1106[ebp]
  0227c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  02283	ff d1		 call	 ecx
  02285	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _target$10[ebp], eax

; 4535 : 			}

  0228b	e9 35 f8 ff ff	 jmp	 $LN10@draw_tacti
$LN11@draw_tacti:

; 4536 : 
; 4537 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  02290	51		 push	 ecx
  02291	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  02299	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0229e	51		 push	 ecx
  0229f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  022a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022ac	51		 push	 ecx
  022ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  022b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022ba	51		 push	 ecx
  022bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  022c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  022cd	50		 push	 eax
  022ce	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 4538 : 
; 4539 : 			set_2d_window_rotation (mfd_env, 0.0);

  022d3	51		 push	 ecx
  022d4	0f 57 c0	 xorps	 xmm0, xmm0
  022d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  022e1	50		 push	 eax
  022e2	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN47@draw_tacti:

; 4540 : 		}
; 4541 : 	}
; 4542 : 
; 4543 : 	////////////////////////////////////////
; 4544 : 	//
; 4545 : 	// aircraft datum symbol
; 4546 : 	//
; 4547 : 	////////////////////////////////////////
; 4548 : 
; 4549 : 	if (draw_large_mfd)

  022e7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  022ee	74 6c		 je	 SHORT $LN68@draw_tacti

; 4550 : 	{
; 4551 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum_mask, x_origin, y_origin, MFD_COLOUR_DARK_BLUE);  // 6

  022f0	b8 04 00 00 00	 mov	 eax, 4
  022f5	6b c8 11	 imul	 ecx, eax, 17
  022f8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  022fe	52		 push	 edx
  022ff	51		 push	 ecx
  02300	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  02308	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0230d	51		 push	 ecx
  0230e	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  02316	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0231b	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum_mask@@3PADA
  02320	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4552 : 
; 4553 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum, x_origin, y_origin, MFD_COLOUR_BLUE);  // 1

  02325	b8 04 00 00 00	 mov	 eax, 4
  0232a	6b c8 0c	 imul	 ecx, eax, 12
  0232d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02333	52		 push	 edx
  02334	51		 push	 ecx
  02335	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  0233d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02342	51		 push	 ecx
  02343	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  0234b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02350	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum@@3PADA
  02355	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4554 : 	}
; 4555 : 	else

  0235a	eb 6a		 jmp	 SHORT $LN69@draw_tacti
$LN68@draw_tacti:

; 4556 : 	{
; 4557 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum_mask, x_origin, y_origin, MFD_COLOUR_DARK_BLUE);

  0235c	b8 04 00 00 00	 mov	 eax, 4
  02361	6b c8 11	 imul	 ecx, eax, 17
  02364	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0236a	52		 push	 edx
  0236b	51		 push	 ecx
  0236c	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  02374	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02379	51		 push	 ecx
  0237a	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  02382	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02387	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum_mask@@3PADA
  0238c	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4558 : 
; 4559 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum, x_origin, y_origin, MFD_COLOUR_BLUE);

  02391	b8 04 00 00 00	 mov	 eax, 4
  02396	6b c8 0c	 imul	 ecx, eax, 12
  02399	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0239f	52		 push	 edx
  023a0	51		 push	 ecx
  023a1	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  023a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023ae	51		 push	 ecx
  023af	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  023b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023bc	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum@@3PADA
  023c1	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN69@draw_tacti:

; 4560 : 	}
; 4561 : 
; 4562 : 	////////////////////////////////////////
; 4563 : 	//
; 4564 : 	// text
; 4565 : 	//
; 4566 : 	////////////////////////////////////////
; 4567 : 
; 4568 : 	set_mono_font_colour (tsd_basic_colour);

  023c6	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _tsd_basic_colour$[ebp]
  023cc	50		 push	 eax
  023cd	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4569 : 
; 4570 : 	if (draw_large_mfd)

  023d2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  023d9	74 09		 je	 SHORT $LN70@draw_tacti

; 4571 : 	{
; 4572 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  023db	6a 05		 push	 5
  023dd	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 4573 : 	}
; 4574 : 	else

  023e2	eb 07		 jmp	 SHORT $LN71@draw_tacti
$LN70@draw_tacti:

; 4575 : 	{
; 4576 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  023e4	6a 01		 push	 1
  023e6	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN71@draw_tacti:

; 4577 : 	}
; 4578 : 
; 4579 : 	//
; 4580 : 	// sensor type
; 4581 : 	//
; 4582 : 
; 4583 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)

  023eb	83 bd f4 fe ff
	ff 02		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 2
  023f2	0f 84 d0 01 00
	00		 je	 $LN72@draw_tacti

; 4584 : 	{
; 4585 : 		switch (target_acquisition_system)

  023f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; target_acquisition_system
  023fd	89 85 5c fe ff
	ff		 mov	 DWORD PTR tv1149[ebp], eax
  02403	83 bd 5c fe ff
	ff 08		 cmp	 DWORD PTR tv1149[ebp], 8
  0240a	77 62		 ja	 SHORT $LN79@draw_tacti
  0240c	8b 8d 5c fe ff
	ff		 mov	 ecx, DWORD PTR tv1149[ebp]
  02412	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN255@draw_tacti[ecx*4]
$LN73@draw_tacti:

; 4586 : 		{
; 4587 : 			case TARGET_ACQUISITION_SYSTEM_OFF:
; 4588 : 			{
; 4589 : 				s = "NO ACQ";

  02419	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06LLLMNJMM@NO?5ACQ@

; 4590 : 
; 4591 : 				break;

  02420	eb 53		 jmp	 SHORT $LN14@draw_tacti
$LN74@draw_tacti:

; 4592 : 			}
; 4593 : 			case TARGET_ACQUISITION_SYSTEM_GROUND_RADAR:
; 4594 : 			case TARGET_ACQUISITION_SYSTEM_AIR_RADAR:
; 4595 : 			{
; 4596 : 				if (current_pfz != NO_PFZ)

  02422	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?current_pfz@@3IA, -1 ; current_pfz
  02429	74 28		 je	 SHORT $LN75@draw_tacti

; 4597 : 				{
; 4598 : 					sprintf(buffer, "FCR/PF%d", current_pfz+1);

  0242b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pfz@@3IA ; current_pfz
  02430	83 c0 01	 add	 eax, 1
  02433	50		 push	 eax
  02434	68 00 00 00 00	 push	 OFFSET ??_C@_08OIKHPJCN@FCR?1PF?$CFd@
  02439	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0243f	51		 push	 ecx
  02440	e8 00 00 00 00	 call	 _sprintf
  02445	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4599 : 					s = buffer;

  02448	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0244e	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 4600 : 				}
; 4601 : 				else

  02451	eb 07		 jmp	 SHORT $LN76@draw_tacti
$LN75@draw_tacti:

; 4602 : 					s = "FCR";

  02453	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03JKJFCLEN@FCR@
$LN76@draw_tacti:

; 4603 : 
; 4604 : 				break;

  0245a	eb 19		 jmp	 SHORT $LN14@draw_tacti
$LN77@draw_tacti:

; 4605 : 			}
; 4606 : 			case TARGET_ACQUISITION_SYSTEM_FLIR:
; 4607 : 			case TARGET_ACQUISITION_SYSTEM_DTV:
; 4608 : 			case TARGET_ACQUISITION_SYSTEM_DVO:
; 4609 : 			{
; 4610 : 				s = "TADS";

  0245c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04DBODHFDK@TADS@

; 4611 : 
; 4612 : 				break;

  02463	eb 10		 jmp	 SHORT $LN14@draw_tacti
$LN78@draw_tacti:

; 4613 : 			}
; 4614 : 			case TARGET_ACQUISITION_SYSTEM_IHADSS:
; 4615 : 			{
; 4616 : 				s = "IHADSS";

  02465	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06NOICLIMH@IHADSS@

; 4617 : 
; 4618 : 				break;

  0246c	eb 07		 jmp	 SHORT $LN14@draw_tacti
$LN79@draw_tacti:

; 4619 : 			}
; 4620 : 			default:
; 4621 : 			{
; 4622 : 				s = "XXX";

  0246e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN14@draw_tacti:

; 4623 : 
; 4624 : 				break;
; 4625 : 			}
; 4626 : 		}
; 4627 : 
; 4628 : 		if (draw_large_mfd)

  02475	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0247c	74 12		 je	 SHORT $LN80@draw_tacti

; 4629 : 		{
; 4630 : 			y_adjust = 5.0;

  0247e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  02486	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4631 : 		}
; 4632 : 		else

  0248e	eb 10		 jmp	 SHORT $LN81@draw_tacti
$LN80@draw_tacti:

; 4633 : 		{
; 4634 : 			y_adjust = 2.0;

  02490	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02498	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN81@draw_tacti:

; 4635 : 		}
; 4636 : 
; 4637 : 		set_2d_mono_font_position (-0.8, 1.0);

  024a0	51		 push	 ecx
  024a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  024a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024ae	51		 push	 ecx
  024af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  024b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024bc	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4638 : 
; 4639 : 		set_mono_font_rel_position (1.0, y_adjust);

  024c1	51		 push	 ecx
  024c2	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  024ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024cf	51		 push	 ecx
  024d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  024d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024dd	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4640 : 
; 4641 : 		print_mono_font_string (s);

  024e2	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  024e5	50		 push	 eax
  024e6	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4642 : 
; 4643 : 		switch (target_acquisition_system)

  024eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; target_acquisition_system
  024f0	89 85 5c fe ff
	ff		 mov	 DWORD PTR tv1162[ebp], eax
  024f6	83 bd 5c fe ff
	ff 08		 cmp	 DWORD PTR tv1162[ebp], 8
  024fd	77 4c		 ja	 SHORT $LN89@draw_tacti
  024ff	8b 8d 5c fe ff
	ff		 mov	 ecx, DWORD PTR tv1162[ebp]
  02505	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN256@draw_tacti[ecx*4]
$LN82@draw_tacti:

; 4644 : 		{
; 4645 : 			case TARGET_ACQUISITION_SYSTEM_OFF:
; 4646 : 			{
; 4647 : 				s = "";

  0250c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_00CNPNBAHC@@

; 4648 : 
; 4649 : 				break;

  02513	eb 3d		 jmp	 SHORT $LN16@draw_tacti
$LN83@draw_tacti:

; 4650 : 			}
; 4651 : 			case TARGET_ACQUISITION_SYSTEM_GROUND_RADAR:
; 4652 : 			{
; 4653 : 				s = "GND";

  02515	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03DGGJGKKM@GND@

; 4654 : 
; 4655 : 				break;

  0251c	eb 34		 jmp	 SHORT $LN16@draw_tacti
$LN84@draw_tacti:

; 4656 : 			}
; 4657 : 			case TARGET_ACQUISITION_SYSTEM_AIR_RADAR:
; 4658 : 			{
; 4659 : 				s = "AIR";

  0251e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03KNFJGCC@AIR@

; 4660 : 
; 4661 : 				break;

  02525	eb 2b		 jmp	 SHORT $LN16@draw_tacti
$LN85@draw_tacti:

; 4662 : 			}
; 4663 : 			case TARGET_ACQUISITION_SYSTEM_FLIR:
; 4664 : 			{
; 4665 : 				s = "FLIR";

  02527	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04MIGKMLBH@FLIR@

; 4666 : 
; 4667 : 				break;

  0252e	eb 22		 jmp	 SHORT $LN16@draw_tacti
$LN86@draw_tacti:

; 4668 : 			}
; 4669 : 			case TARGET_ACQUISITION_SYSTEM_DTV:
; 4670 : 			{
; 4671 : 				s = "DTV";

  02530	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03ENJJJDDH@DTV@

; 4672 : 
; 4673 : 				break;

  02537	eb 19		 jmp	 SHORT $LN16@draw_tacti
$LN87@draw_tacti:

; 4674 : 			}
; 4675 : 			case TARGET_ACQUISITION_SYSTEM_DVO:
; 4676 : 			{
; 4677 : 				s = "DVO";

  02539	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03NFBNOOEB@DVO@

; 4678 : 
; 4679 : 				break;

  02540	eb 10		 jmp	 SHORT $LN16@draw_tacti
$LN88@draw_tacti:

; 4680 : 			}
; 4681 : 			case TARGET_ACQUISITION_SYSTEM_IHADSS:
; 4682 : 			{
; 4683 : 				s = "";

  02542	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_00CNPNBAHC@@

; 4684 : 
; 4685 : 				break;

  02549	eb 07		 jmp	 SHORT $LN16@draw_tacti
$LN89@draw_tacti:

; 4686 : 			}
; 4687 : 			default:
; 4688 : 			{
; 4689 : 				s = "XXX";

  0254b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN16@draw_tacti:

; 4690 : 
; 4691 : 				break;
; 4692 : 			}
; 4693 : 		}
; 4694 : 
; 4695 : 		if (draw_large_mfd)

  02552	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02559	74 12		 je	 SHORT $LN90@draw_tacti

; 4696 : 		{
; 4697 : 			y_adjust = 2.0;

  0255b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02563	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4698 : 		}
; 4699 : 		else

  0256b	eb 10		 jmp	 SHORT $LN91@draw_tacti
$LN90@draw_tacti:

; 4700 : 		{
; 4701 : 			y_adjust = 2.0;

  0256d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02575	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN91@draw_tacti:

; 4702 : 		}
; 4703 : 
; 4704 : 		set_2d_mono_font_position (-0.8, 0.9);

  0257d	51		 push	 ecx
  0257e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  02586	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0258b	51		 push	 ecx
  0258c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  02594	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02599	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4705 : 
; 4706 : 		set_mono_font_rel_position (1.0, y_adjust);

  0259e	51		 push	 ecx
  0259f	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  025a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025ac	51		 push	 ecx
  025ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  025b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025ba	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4707 : 
; 4708 : 		print_mono_font_string (s);

  025bf	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  025c2	50		 push	 eax
  025c3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN72@draw_tacti:

; 4709 : 	}
; 4710 : 
; 4711 : 	//
; 4712 : 	// TSD range
; 4713 : 	//
; 4714 : 
; 4715 : 	if (tsd_ase_range == TSD_ASE_RANGE_2000)

  025c8	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  025d0	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  025d7	9f		 lahf
  025d8	f6 c4 44	 test	 ah, 68			; 00000044H
  025db	7a 09		 jp	 SHORT $LN92@draw_tacti

; 4716 : 	{
; 4717 : 		s = "2Km";

  025dd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03CIAFGHAC@2Km@
  025e4	eb 61		 jmp	 SHORT $LN99@draw_tacti
$LN92@draw_tacti:

; 4718 : 	}
; 4719 : 	else if (tsd_ase_range == TSD_ASE_RANGE_5000)

  025e6	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  025ee	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  025f5	9f		 lahf
  025f6	f6 c4 44	 test	 ah, 68			; 00000044H
  025f9	7a 09		 jp	 SHORT $LN94@draw_tacti

; 4720 : 	{
; 4721 : 		s = "5Km";

  025fb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03LFNCFPLL@5Km@
  02602	eb 43		 jmp	 SHORT $LN99@draw_tacti
$LN94@draw_tacti:

; 4722 : 	}
; 4723 : 	else if (tsd_ase_range == TSD_ASE_RANGE_10000)

  02604	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  0260c	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  02613	9f		 lahf
  02614	f6 c4 44	 test	 ah, 68			; 00000044H
  02617	7a 09		 jp	 SHORT $LN96@draw_tacti

; 4724 : 	{
; 4725 : 		s = "10Km";

  02619	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04PJCLBGLO@10Km@
  02620	eb 25		 jmp	 SHORT $LN99@draw_tacti
$LN96@draw_tacti:

; 4726 : 	}
; 4727 : 	else if (tsd_ase_range == TSD_ASE_RANGE_25000)

  02622	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  0262a	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  02631	9f		 lahf
  02632	f6 c4 44	 test	 ah, 68			; 00000044H
  02635	7a 09		 jp	 SHORT $LN98@draw_tacti

; 4728 : 	{
; 4729 : 		s = "25Km";

  02637	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04IJFFJMFM@25Km@

; 4730 : 	}
; 4731 : 	else

  0263e	eb 07		 jmp	 SHORT $LN99@draw_tacti
$LN98@draw_tacti:

; 4732 : 	{
; 4733 : 		s = "XXX";

  02640	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN99@draw_tacti:

; 4734 : 	}
; 4735 : 
; 4736 : 	width = get_mono_font_string_width (s);

  02647	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0264a	50		 push	 eax
  0264b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02650	d9 9d 18 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 4737 : 
; 4738 : 	if (draw_large_mfd)

  02656	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0265d	74 12		 je	 SHORT $LN100@draw_tacti

; 4739 : 	{
; 4740 : 		y_adjust = 5.0;

  0265f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  02667	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4741 : 	}
; 4742 : 	else

  0266f	eb 10		 jmp	 SHORT $LN101@draw_tacti
$LN100@draw_tacti:

; 4743 : 	{
; 4744 : 		y_adjust = 2.0;

  02671	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02679	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN101@draw_tacti:

; 4745 : 	}
; 4746 : 
; 4747 : 	set_2d_mono_font_position (0.8, 1.0);

  02681	51		 push	 ecx
  02682	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0268a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0268f	51		 push	 ecx
  02690	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  02698	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0269d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4748 : 
; 4749 : 	set_mono_font_rel_position (-width, y_adjust);

  026a2	51		 push	 ecx
  026a3	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  026ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026b0	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  026b8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  026bf	51		 push	 ecx
  026c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026c5	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4750 : 
; 4751 : 	print_mono_font_string (s);

  026ca	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  026cd	50		 push	 eax
  026ce	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4752 : 
; 4753 : 	//
; 4754 : 	// TSD declutter level
; 4755 : 	//
; 4756 : 
; 4757 : 	if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_ALL)

  026d3	83 bd f4 fe ff
	ff 00		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 0
  026da	75 09		 jne	 SHORT $LN102@draw_tacti

; 4758 : 	{
; 4759 : 		s = "ALL";

  026dc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03NIFPGLBG@ALL@
  026e3	eb 2b		 jmp	 SHORT $LN107@draw_tacti
$LN102@draw_tacti:

; 4760 : 	}
; 4761 : 	else if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  026e5	83 bd f4 fe ff
	ff 01		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 1
  026ec	75 09		 jne	 SHORT $LN104@draw_tacti

; 4762 : 	{
; 4763 : 		s = "TGT";

  026ee	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03DBNGLLAD@TGT@
  026f5	eb 19		 jmp	 SHORT $LN107@draw_tacti
$LN104@draw_tacti:

; 4764 : 	}
; 4765 : 	else if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_NAVIGATION)

  026f7	83 bd f4 fe ff
	ff 02		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 2
  026fe	75 09		 jne	 SHORT $LN106@draw_tacti

; 4766 : 	{
; 4767 : 		s = "NAV";

  02700	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03DIMJBCMI@NAV@

; 4768 : 	}
; 4769 : 	else

  02707	eb 07		 jmp	 SHORT $LN107@draw_tacti
$LN106@draw_tacti:

; 4770 : 	{
; 4771 : 		s = "XXX";

  02709	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN107@draw_tacti:

; 4772 : 	}
; 4773 : 
; 4774 : 	width = get_mono_font_string_width (s);

  02710	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02713	50		 push	 eax
  02714	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02719	d9 9d 18 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 4775 : 
; 4776 : 	if (draw_large_mfd)

  0271f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02726	74 12		 je	 SHORT $LN108@draw_tacti

; 4777 : 	{
; 4778 : 		y_adjust = 2.0;

  02728	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02730	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4779 : 	}
; 4780 : 	else

  02738	eb 10		 jmp	 SHORT $LN109@draw_tacti
$LN108@draw_tacti:

; 4781 : 	{
; 4782 : 		y_adjust = 2.0;

  0273a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02742	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN109@draw_tacti:

; 4783 : 	}
; 4784 : 
; 4785 : 	set_2d_mono_font_position (0.8, 0.9);

  0274a	51		 push	 ecx
  0274b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  02753	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02758	51		 push	 ecx
  02759	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  02761	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02766	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4786 : 
; 4787 : 	set_mono_font_rel_position (-width, y_adjust);

  0276b	51		 push	 ecx
  0276c	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02774	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02779	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  02781	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  02788	51		 push	 ecx
  02789	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0278e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4788 : 
; 4789 : 	print_mono_font_string (s);

  02793	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02796	50		 push	 eax
  02797	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4790 : 
; 4791 : 	//
; 4792 : 	// target range
; 4793 : 	//
; 4794 : 
; 4795 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)

  0279c	83 bd f4 fe ff
	ff 02		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 2
  027a3	0f 84 09 01 00
	00		 je	 $LN111@draw_tacti

; 4796 : 	{
; 4797 : 		if (source_target)

  027a9	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _source_target$[ebp], 0
  027b0	0f 84 fc 00 00
	00		 je	 $LN111@draw_tacti

; 4798 : 		{
; 4799 : 			rangefinding_system rangefinder = get_range_finder();

  027b6	e8 00 00 00 00	 call	 ?get_range_finder@@YG?AW4rangefinding_system@@XZ ; get_range_finder
  027bb	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _rangefinder$2[ebp], eax

; 4800 : 
; 4801 : 			float
; 4802 : 				target_range = get_range_to_target();

  027c1	e8 00 00 00 00	 call	 ?get_range_to_target@@YGMXZ ; get_range_to_target
  027c6	d9 9d a0 fe ff
	ff		 fstp	 DWORD PTR _target_range$1[ebp]

; 4803 : 
; 4804 : 			if (rangefinder == RANGEFINDER_LASER)

  027cc	83 bd a4 fe ff
	ff 01		 cmp	 DWORD PTR _rangefinder$2[ebp], 1
  027d3	75 1f		 jne	 SHORT $LN112@draw_tacti

; 4805 : 				sprintf (buffer, "%dm", (int) target_range);

  027d5	f3 0f 2c 85 a0
	fe ff ff	 cvttss2si eax, DWORD PTR _target_range$1[ebp]
  027dd	50		 push	 eax
  027de	68 00 00 00 00	 push	 OFFSET ??_C@_03NGNKAJPJ@?$CFdm@
  027e3	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  027e9	51		 push	 ecx
  027ea	e8 00 00 00 00	 call	 _sprintf
  027ef	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4806 : 			else

  027f2	eb 2c		 jmp	 SHORT $LN113@draw_tacti
$LN112@draw_tacti:

; 4807 : 				sprintf (buffer, "%.1fkm", target_range * (1.0 / 1000.0));

  027f4	f3 0f 5a 85 a0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$1[ebp]
  027fc	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  02804	83 ec 08	 sub	 esp, 8
  02807	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0280c	68 00 00 00 00	 push	 OFFSET ??_C@_06NEGNFKDO@?$CF?41fkm@
  02811	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02817	50		 push	 eax
  02818	e8 00 00 00 00	 call	 _sprintf
  0281d	83 c4 10	 add	 esp, 16			; 00000010H
$LN113@draw_tacti:

; 4808 : 
; 4809 : 			width = get_mono_font_string_width (buffer);

  02820	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02826	50		 push	 eax
  02827	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0282c	d9 9d 18 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 4810 : 
; 4811 : 			if (draw_large_mfd)

  02832	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02839	74 12		 je	 SHORT $LN114@draw_tacti

; 4812 : 			{
; 4813 : 				y_adjust = -12.0;

  0283b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  02843	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4814 : 			}
; 4815 : 			else

  0284b	eb 10		 jmp	 SHORT $LN115@draw_tacti
$LN114@draw_tacti:

; 4816 : 			{
; 4817 : 				y_adjust = -5.0;

  0284d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  02855	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN115@draw_tacti:

; 4818 : 			}
; 4819 : 
; 4820 : 			set_2d_mono_font_position (0.8, -1.0);

  0285d	51		 push	 ecx
  0285e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02866	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0286b	51		 push	 ecx
  0286c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  02874	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02879	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4821 : 
; 4822 : 			set_mono_font_rel_position (-width, y_adjust);

  0287e	51		 push	 ecx
  0287f	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02887	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0288c	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  02894	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0289b	51		 push	 ecx
  0289c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  028a1	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4823 : 
; 4824 : 			print_mono_font_string (buffer);

  028a6	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  028ac	50		 push	 eax
  028ad	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN111@draw_tacti:

; 4825 : 		}
; 4826 : 	}
; 4827 : 
; 4828 : 	//
; 4829 : 	// waypoint information
; 4830 : 	//
; 4831 : 
; 4832 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_TARGET && !apache_damage.navigation_computer)

  028b2	83 bd f4 fe ff
	ff 01		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 1
  028b9	74 38		 je	 SHORT $LN118@draw_tacti
  028bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  028c0	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  028c3	83 e0 01	 and	 eax, 1
  028c6	75 2b		 jne	 SHORT $LN118@draw_tacti

; 4833 : 	{
; 4834 : 		if (tsd_underlay == TSD_UNDERLAY_MAP)

  028c8	83 bd f8 fe ff
	ff 01		 cmp	 DWORD PTR _tsd_underlay$[ebp], 1
  028cf	75 0e		 jne	 SHORT $LN117@draw_tacti

; 4835 : 			display_waypoint_information (tsd_basic_colour);

  028d1	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _tsd_basic_colour$[ebp]
  028d7	50		 push	 eax
  028d8	e8 00 00 00 00	 call	 ?display_waypoint_information@@YGXUREAL_COLOUR@@@Z ; display_waypoint_information

; 4836 : 		else

  028dd	eb 14		 jmp	 SHORT $LN118@draw_tacti
$LN117@draw_tacti:

; 4837 : 			display_waypoint_information (MFD_COLOUR4);

  028df	b8 04 00 00 00	 mov	 eax, 4
  028e4	6b c8 03	 imul	 ecx, eax, 3
  028e7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  028ed	52		 push	 edx
  028ee	e8 00 00 00 00	 call	 ?display_waypoint_information@@YGXUREAL_COLOUR@@@Z ; display_waypoint_information
$LN118@draw_tacti:

; 4838 : 	}
; 4839 : 
; 4840 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)

  028f3	83 bd f4 fe ff
	ff 02		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 2
  028fa	0f 84 18 01 00
	00		 je	 $LN121@draw_tacti

; 4841 : 	{
; 4842 : 		// pointer
; 4843 : 		draw_2d_mono_sprite (large_tsd_pointer_cross_mask, pointer_position_x, pointer_position_y, MFD_COLOUR4);

  02900	b8 04 00 00 00	 mov	 eax, 4
  02905	6b c8 03	 imul	 ecx, eax, 3
  02908	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0290e	52		 push	 edx
  0290f	51		 push	 ecx
  02910	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pointer_position_y@@3MA
  02918	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0291d	51		 push	 ecx
  0291e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pointer_position_x@@3MA
  02926	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0292b	68 00 00 00 00	 push	 OFFSET ?large_tsd_pointer_cross_mask@@3PADA
  02930	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4844 : 		draw_2d_mono_sprite (large_tsd_pointer_cross, pointer_position_x, pointer_position_y, MFD_COLOUR1);

  02935	b8 04 00 00 00	 mov	 eax, 4
  0293a	6b c8 00	 imul	 ecx, eax, 0
  0293d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02943	52		 push	 edx
  02944	51		 push	 ecx
  02945	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pointer_position_y@@3MA
  0294d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02952	51		 push	 ecx
  02953	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pointer_position_x@@3MA
  0295b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02960	68 00 00 00 00	 push	 OFFSET ?large_tsd_pointer_cross@@3PADA
  02965	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4845 : 
; 4846 : 
; 4847 : 		if (is_holding_left_button())   // is creating a pfz

  0296a	e8 00 00 00 00	 call	 ?is_holding_left_button@@YGHXZ ; is_holding_left_button
  0296f	85 c0		 test	 eax, eax
  02971	74 4e		 je	 SHORT $LN120@draw_tacti

; 4848 : 			draw_box(clicked_position_x, clicked_position_y, pointer_position_x, pointer_position_y, FALSE, MFD_COLOUR_RED);

  02973	b8 04 00 00 00	 mov	 eax, 4
  02978	6b c8 0f	 imul	 ecx, eax, 15
  0297b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02981	52		 push	 edx
  02982	6a 00		 push	 0
  02984	51		 push	 ecx
  02985	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pointer_position_y@@3MA
  0298d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02992	51		 push	 ecx
  02993	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pointer_position_x@@3MA
  0299b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029a0	51		 push	 ecx
  029a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?clicked_position_y@@3MA
  029a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029ae	51		 push	 ecx
  029af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?clicked_position_x@@3MA
  029b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029bc	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box
$LN120@draw_tacti:

; 4849 : 		if (is_holding_right_button())  // is creating a nfz

  029c1	e8 00 00 00 00	 call	 ?is_holding_right_button@@YGHXZ ; is_holding_right_button
  029c6	85 c0		 test	 eax, eax
  029c8	74 4e		 je	 SHORT $LN121@draw_tacti

; 4850 : 			draw_box(clicked_position_x, clicked_position_y, pointer_position_x, pointer_position_y, FALSE, MFD_COLOUR_BLUE);

  029ca	b8 04 00 00 00	 mov	 eax, 4
  029cf	6b c8 0c	 imul	 ecx, eax, 12
  029d2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  029d8	52		 push	 edx
  029d9	6a 00		 push	 0
  029db	51		 push	 ecx
  029dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pointer_position_y@@3MA
  029e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029e9	51		 push	 ecx
  029ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pointer_position_x@@3MA
  029f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029f7	51		 push	 ecx
  029f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?clicked_position_y@@3MA
  02a00	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a05	51		 push	 ecx
  02a06	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?clicked_position_x@@3MA
  02a0e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a13	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box
$LN121@draw_tacti:

; 4851 : 	}
; 4852 : }

  02a18	5f		 pop	 edi
  02a19	5e		 pop	 esi
  02a1a	5b		 pop	 ebx
  02a1b	8b e5		 mov	 esp, ebp
  02a1d	5d		 pop	 ebp
  02a1e	c3		 ret	 0
  02a1f	90		 npad	 1
$LN255@draw_tacti:
  02a20	00 00 00 00	 DD	 $LN73@draw_tacti
  02a24	00 00 00 00	 DD	 $LN74@draw_tacti
  02a28	00 00 00 00	 DD	 $LN74@draw_tacti
  02a2c	00 00 00 00	 DD	 $LN77@draw_tacti
  02a30	00 00 00 00	 DD	 $LN77@draw_tacti
  02a34	00 00 00 00	 DD	 $LN77@draw_tacti
  02a38	00 00 00 00	 DD	 $LN79@draw_tacti
  02a3c	00 00 00 00	 DD	 $LN79@draw_tacti
  02a40	00 00 00 00	 DD	 $LN78@draw_tacti
$LN256@draw_tacti:
  02a44	00 00 00 00	 DD	 $LN82@draw_tacti
  02a48	00 00 00 00	 DD	 $LN83@draw_tacti
  02a4c	00 00 00 00	 DD	 $LN84@draw_tacti
  02a50	00 00 00 00	 DD	 $LN85@draw_tacti
  02a54	00 00 00 00	 DD	 $LN86@draw_tacti
  02a58	00 00 00 00	 DD	 $LN87@draw_tacti
  02a5c	00 00 00 00	 DD	 $LN89@draw_tacti
  02a60	00 00 00 00	 DD	 $LN89@draw_tacti
  02a64	00 00 00 00	 DD	 $LN88@draw_tacti
?draw_tactical_situation_display_mfd@@YGXXZ ENDP	; draw_tactical_situation_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_2d_dvo_mfd@@YGXHH@Z
_TEXT	SEGMENT
_valid_3d$ = 8						; size = 4
_scaled_3d$ = 12					; size = 4
?draw_2d_dvo_mfd@@YGXHH@Z PROC				; draw_2d_dvo_mfd, COMDAT

; 3991 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3992 : 	draw_2d_eo_display (&apache_dvo, TARGET_ACQUISITION_SYSTEM_DVO, apache_damage.dvo, valid_3d, scaled_3d);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _scaled_3d$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _valid_3d$[ebp]
  00010	51		 push	 ecx
  00011	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  00017	c1 ea 04	 shr	 edx, 4
  0001a	83 e2 01	 and	 edx, 1
  0001d	52		 push	 edx
  0001e	6a 05		 push	 5
  00020	68 00 00 00 00	 push	 OFFSET ?apache_dvo@@3UEO_PARAMS@@A ; apache_dvo
  00025	e8 00 00 00 00	 call	 ?draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z ; draw_2d_eo_display

; 3993 : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?draw_2d_dvo_mfd@@YGXHH@Z ENDP				; draw_2d_dvo_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_3d_dvo_mfd@@YGXW4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_location$ = 8						; size = 4
?draw_3d_dvo_mfd@@YGXW4MFD_LOCATIONS@@@Z PROC		; draw_3d_dvo_mfd, COMDAT

; 3979 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3980 : 	if (!apache_damage.dvo)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  0000e	c1 e8 04	 shr	 eax, 4
  00011	83 e0 01	 and	 eax, 1
  00014	75 10		 jne	 SHORT $LN1@draw_3d_dv

; 3981 : 	{
; 3982 : 		draw_3d_eo_display (&apache_dvo, TARGET_ACQUISITION_SYSTEM_DVO, location);

  00016	8b 45 08	 mov	 eax, DWORD PTR _location$[ebp]
  00019	50		 push	 eax
  0001a	6a 05		 push	 5
  0001c	68 00 00 00 00	 push	 OFFSET ?apache_dvo@@3UEO_PARAMS@@A ; apache_dvo
  00021	e8 00 00 00 00	 call	 ?draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z ; draw_3d_eo_display
$LN1@draw_3d_dv:

; 3983 : 	}
; 3984 : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?draw_3d_dvo_mfd@@YGXW4MFD_LOCATIONS@@@Z ENDP		; draw_3d_dvo_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_2d_dtv_mfd@@YGXHH@Z
_TEXT	SEGMENT
_valid_3d$ = 8						; size = 4
_scaled_3d$ = 12					; size = 4
?draw_2d_dtv_mfd@@YGXHH@Z PROC				; draw_2d_dtv_mfd, COMDAT

; 3964 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3965 : 	draw_2d_eo_display (&apache_dtv, TARGET_ACQUISITION_SYSTEM_DTV, apache_damage.dtv, valid_3d, scaled_3d);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _scaled_3d$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _valid_3d$[ebp]
  00010	51		 push	 ecx
  00011	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  00017	c1 ea 03	 shr	 edx, 3
  0001a	83 e2 01	 and	 edx, 1
  0001d	52		 push	 edx
  0001e	6a 04		 push	 4
  00020	68 00 00 00 00	 push	 OFFSET ?apache_dtv@@3UEO_PARAMS@@A ; apache_dtv
  00025	e8 00 00 00 00	 call	 ?draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z ; draw_2d_eo_display

; 3966 : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?draw_2d_dtv_mfd@@YGXHH@Z ENDP				; draw_2d_dtv_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_3d_dtv_mfd@@YGXW4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_location$ = 8						; size = 4
?draw_3d_dtv_mfd@@YGXW4MFD_LOCATIONS@@@Z PROC		; draw_3d_dtv_mfd, COMDAT

; 3952 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3953 : 	if (!apache_damage.dtv)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  0000e	c1 e8 03	 shr	 eax, 3
  00011	83 e0 01	 and	 eax, 1
  00014	75 10		 jne	 SHORT $LN1@draw_3d_dt

; 3954 : 	{
; 3955 : 		draw_3d_eo_display (&apache_dtv, TARGET_ACQUISITION_SYSTEM_DTV, location);

  00016	8b 45 08	 mov	 eax, DWORD PTR _location$[ebp]
  00019	50		 push	 eax
  0001a	6a 04		 push	 4
  0001c	68 00 00 00 00	 push	 OFFSET ?apache_dtv@@3UEO_PARAMS@@A ; apache_dtv
  00021	e8 00 00 00 00	 call	 ?draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z ; draw_3d_eo_display
$LN1@draw_3d_dt:

; 3956 : 	}
; 3957 : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?draw_3d_dtv_mfd@@YGXW4MFD_LOCATIONS@@@Z ENDP		; draw_3d_dtv_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_2d_flir_mfd@@YGXHH@Z
_TEXT	SEGMENT
_valid_3d$ = 8						; size = 4
_scaled_3d$ = 12					; size = 4
?draw_2d_flir_mfd@@YGXHH@Z PROC				; draw_2d_flir_mfd, COMDAT

; 3937 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3938 : 	draw_2d_eo_display (&apache_flir, TARGET_ACQUISITION_SYSTEM_FLIR, apache_damage.flir, valid_3d, scaled_3d);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _scaled_3d$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _valid_3d$[ebp]
  00010	51		 push	 ecx
  00011	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  00017	c1 ea 02	 shr	 edx, 2
  0001a	83 e2 01	 and	 edx, 1
  0001d	52		 push	 edx
  0001e	6a 03		 push	 3
  00020	68 00 00 00 00	 push	 OFFSET ?apache_flir@@3UEO_PARAMS@@A ; apache_flir
  00025	e8 00 00 00 00	 call	 ?draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z ; draw_2d_eo_display

; 3939 : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?draw_2d_flir_mfd@@YGXHH@Z ENDP				; draw_2d_flir_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_3d_flir_mfd@@YGXW4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_location$ = 8						; size = 4
?draw_3d_flir_mfd@@YGXW4MFD_LOCATIONS@@@Z PROC		; draw_3d_flir_mfd, COMDAT

; 3925 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3926 : 	if (!apache_damage.flir)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  0000e	c1 e8 02	 shr	 eax, 2
  00011	83 e0 01	 and	 eax, 1
  00014	75 10		 jne	 SHORT $LN1@draw_3d_fl

; 3927 : 	{
; 3928 : 		draw_3d_eo_display (&apache_flir, TARGET_ACQUISITION_SYSTEM_FLIR, location);

  00016	8b 45 08	 mov	 eax, DWORD PTR _location$[ebp]
  00019	50		 push	 eax
  0001a	6a 03		 push	 3
  0001c	68 00 00 00 00	 push	 OFFSET ?apache_flir@@3UEO_PARAMS@@A ; apache_flir
  00021	e8 00 00 00 00	 call	 ?draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z ; draw_3d_eo_display
$LN1@draw_3d_fl:

; 3929 : 	}
; 3930 : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?draw_3d_flir_mfd@@YGXW4MFD_LOCATIONS@@@Z ENDP		; draw_3d_flir_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z
_TEXT	SEGMENT
tv83 = -172						; size = 4
tv585 = -168						; size = 4
tv213 = -168						; size = 4
tv166 = -168						; size = 4
tv132 = -168						; size = 4
tv75 = -168						; size = 4
_visibility$ = -100					; size = 4
_tmp$ = -96						; size = 48
_target_point$ = -48					; size = 12
_target$ = -36						; size = 4
_source$ = -32						; size = 4
_y$ = -28						; size = 4
_x$ = -24						; size = 4
_j$ = -20						; size = 4
_i$ = -16						; size = 4
_y_adjust$ = -12					; size = 4
_width$ = -8						; size = 4
_s$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
_damaged$ = 16						; size = 4
_valid_3d$ = 20						; size = 4
_scaled_3d$ = 24					; size = 4
?draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z PROC ; draw_2d_eo_display, COMDAT

; 3618 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3619 : 	const char
; 3620 : 		*s;
; 3621 : 
; 3622 : 	float
; 3623 : 		width,
; 3624 : 		y_adjust,
; 3625 : 		i,
; 3626 : 		j,
; 3627 : 		x,
; 3628 : 		y;
; 3629 : 
; 3630 : 	entity
; 3631 : 		*source,
; 3632 : 		*target;
; 3633 : 
; 3634 : 	vec3d
; 3635 : 		target_point;
; 3636 : 
; 3637 : 	viewpoint
; 3638 : 		tmp;
; 3639 : 
; 3640 : 	object_3d_visibility
; 3641 : 		visibility;
; 3642 : 
; 3643 : 	ASSERT (eo);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  00010	75 18		 jne	 SHORT $LN6@draw_2d_eo
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z@4JA
  00017	83 c0 19	 add	 eax, 25			; 00000019H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@draw_2d_eo:

; 3644 : 
; 3645 : 
; 3646 : 	source = get_gunship_entity ();

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0002f	89 45 e0	 mov	 DWORD PTR _source$[ebp], eax

; 3647 : 	target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  00032	83 7d e0 00	 cmp	 DWORD PTR _source$[ebp], 0
  00036	74 0d		 je	 SHORT $LN39@draw_2d_eo
  00038	8b 45 e0	 mov	 eax, DWORD PTR _source$[ebp]
  0003b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003d	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv75[ebp], ecx
  00043	eb 24		 jmp	 SHORT $LN40@draw_2d_eo
$LN39@draw_2d_eo:
  00045	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z@4JA
  0004b	83 c2 1d	 add	 edx, 29			; 0000001dH
  0004e	52		 push	 edx
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0005f	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv75[ebp], 0
$LN40@draw_2d_eo:
  00069	b9 01 00 00 00	 mov	 ecx, 1
  0006e	85 c9		 test	 ecx, ecx
  00070	74 0c		 je	 SHORT $LN41@draw_2d_eo
  00072	c7 85 54 ff ff
	ff 26 00 00 00	 mov	 DWORD PTR tv83[ebp], 38	; 00000026H
  0007c	eb 24		 jmp	 SHORT $LN42@draw_2d_eo
$LN41@draw_2d_eo:
  0007e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z@4JA
  00084	83 c2 1d	 add	 edx, 29			; 0000001dH
  00087	52		 push	 edx
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00098	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv83[ebp], 0
$LN42@draw_2d_eo:
  000a2	6a 26		 push	 38			; 00000026H
  000a4	8b 4d e0	 mov	 ecx, DWORD PTR _source$[ebp]
  000a7	51		 push	 ecx
  000a8	69 95 58 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv75[ebp], 180
  000b2	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR tv83[ebp]
  000b8	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  000bf	ff d1		 call	 ecx
  000c1	89 45 dc	 mov	 DWORD PTR _target$[ebp], eax

; 3648 : 
; 3649 : 	////////////////////////////////////////
; 3650 : 	//
; 3651 : 	// text
; 3652 : 	//
; 3653 : 	////////////////////////////////////////
; 3654 : 
; 3655 : 	set_mono_font_colour (MFD_COLOUR1);

  000c4	b8 04 00 00 00	 mov	 eax, 4
  000c9	6b c8 00	 imul	 ecx, eax, 0
  000cc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000d2	52		 push	 edx
  000d3	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 3656 : 
; 3657 : 	if (draw_large_mfd)

  000d8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  000df	74 09		 je	 SHORT $LN7@draw_2d_eo

; 3658 : 	{
; 3659 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  000e1	6a 05		 push	 5
  000e3	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 3660 : 	}
; 3661 : 	else

  000e8	eb 07		 jmp	 SHORT $LN8@draw_2d_eo
$LN7@draw_2d_eo:

; 3662 : 	{
; 3663 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  000ea	6a 01		 push	 1
  000ec	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN8@draw_2d_eo:

; 3664 : 	}
; 3665 : 
; 3666 : 	//
; 3667 : 	// sensor type
; 3668 : 	//
; 3669 : 
; 3670 : 	if (draw_large_mfd)

  000f1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  000f8	74 0f		 je	 SHORT $LN9@draw_2d_eo

; 3671 : 	{
; 3672 : 		y_adjust = 5.0;

  000fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  00102	f3 0f 11 45 f4	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3673 : 	}
; 3674 : 	else

  00107	eb 0d		 jmp	 SHORT $LN10@draw_2d_eo
$LN9@draw_2d_eo:

; 3675 : 	{
; 3676 : 		y_adjust = 2.0;

  00109	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00111	f3 0f 11 45 f4	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN10@draw_2d_eo:

; 3677 : 	}
; 3678 : 
; 3679 : 	set_2d_mono_font_position (-0.85, 1.0);

  00116	51		 push	 ecx
  00117	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0011f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00124	51		 push	 ecx
  00125	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  0012d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00132	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3680 : 
; 3681 : 	set_mono_font_rel_position (1.0, y_adjust);

  00137	51		 push	 ecx
  00138	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0013d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00142	51		 push	 ecx
  00143	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0014b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00150	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3682 : 
; 3683 : 	switch (system)

  00155	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  00158	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv132[ebp], eax
  0015e	83 bd 58 ff ff
	ff 03		 cmp	 DWORD PTR tv132[ebp], 3
  00165	74 14		 je	 SHORT $LN11@draw_2d_eo
  00167	83 bd 58 ff ff
	ff 04		 cmp	 DWORD PTR tv132[ebp], 4
  0016e	74 17		 je	 SHORT $LN12@draw_2d_eo
  00170	83 bd 58 ff ff
	ff 05		 cmp	 DWORD PTR tv132[ebp], 5
  00177	74 1a		 je	 SHORT $LN13@draw_2d_eo
  00179	eb 24		 jmp	 SHORT $LN14@draw_2d_eo
$LN11@draw_2d_eo:

; 3684 : 	{
; 3685 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 3686 : 		{
; 3687 : 			print_mono_font_string ("FLIR");

  0017b	68 00 00 00 00	 push	 OFFSET ??_C@_04MIGKMLBH@FLIR@
  00180	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3688 : 
; 3689 : 			break;

  00185	eb 22		 jmp	 SHORT $LN2@draw_2d_eo
$LN12@draw_2d_eo:

; 3690 : 		}
; 3691 : 		case TARGET_ACQUISITION_SYSTEM_DTV:
; 3692 : 		{
; 3693 : 			print_mono_font_string ("DTV");

  00187	68 00 00 00 00	 push	 OFFSET ??_C@_03ENJJJDDH@DTV@
  0018c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3694 : 
; 3695 : 			break;

  00191	eb 16		 jmp	 SHORT $LN2@draw_2d_eo
$LN13@draw_2d_eo:

; 3696 : 		}
; 3697 : 		case TARGET_ACQUISITION_SYSTEM_DVO:
; 3698 : 		{
; 3699 : 			print_mono_font_string ("DVO");

  00193	68 00 00 00 00	 push	 OFFSET ??_C@_03NFBNOOEB@DVO@
  00198	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3700 : 
; 3701 : 			break;

  0019d	eb 0a		 jmp	 SHORT $LN2@draw_2d_eo
$LN14@draw_2d_eo:

; 3702 : 		}
; 3703 : 		default:
; 3704 : 		{
; 3705 : 			print_mono_font_string ("XXX");

  0019f	68 00 00 00 00	 push	 OFFSET ??_C@_03MAMPKPPK@XXX@
  001a4	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN2@draw_2d_eo:

; 3706 : 
; 3707 : 			break;
; 3708 : 		}
; 3709 : 	}
; 3710 : 
; 3711 : 	//
; 3712 : 	// damaged
; 3713 : 	//
; 3714 : 
; 3715 : 	if (damaged)

  001a9	83 7d 10 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  001ad	0f 84 9d 00 00
	00		 je	 $LN15@draw_2d_eo

; 3716 : 	{
; 3717 : 		draw_2d_line (-0.5, -0.5,  0.5, 0.5, MFD_COLOUR1);

  001b3	b8 04 00 00 00	 mov	 eax, 4
  001b8	6b c8 00	 imul	 ecx, eax, 0
  001bb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001c1	52		 push	 edx
  001c2	51		 push	 ecx
  001c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d0	51		 push	 ecx
  001d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001de	51		 push	 ecx
  001df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  001e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ec	51		 push	 ecx
  001ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  001f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fa	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3718 : 		draw_2d_line ( 0.5, -0.5, -0.5, 0.5, MFD_COLOUR1);

  001ff	b8 04 00 00 00	 mov	 eax, 4
  00204	6b c8 00	 imul	 ecx, eax, 0
  00207	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0020d	52		 push	 edx
  0020e	51		 push	 ecx
  0020f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00217	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021c	51		 push	 ecx
  0021d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00225	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022a	51		 push	 ecx
  0022b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00233	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00238	51		 push	 ecx
  00239	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00241	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00246	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3719 : 
; 3720 : 		return;

  0024b	e9 dc 08 00 00	 jmp	 $LN1@draw_2d_eo
$LN15@draw_2d_eo:

; 3721 : 	}
; 3722 : 
; 3723 : 	if (eo_low_light)

  00250	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_low_light@@3HA, 0 ; eo_low_light
  00257	0f 84 82 00 00
	00		 je	 $LN18@draw_2d_eo

; 3724 : 	{
; 3725 : 		set_2d_mono_font_position (-0.8, 0.9);

  0025d	51		 push	 ecx
  0025e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  00266	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026b	51		 push	 ecx
  0026c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00274	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00279	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3726 : 
; 3727 : 		if (draw_large_mfd)

  0027e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00285	74 2d		 je	 SHORT $LN17@draw_2d_eo

; 3728 : 		{
; 3729 : 			set_mono_font_rel_position (1.0, 2.0);

  00287	51		 push	 ecx
  00288	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00290	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00295	51		 push	 ecx
  00296	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0029e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a3	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3730 : 
; 3731 : 			print_mono_font_string ("LO LIGHT");

  002a8	68 00 00 00 00	 push	 OFFSET ??_C@_08JFLECGBM@LO?5LIGHT@
  002ad	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3732 : 		}
; 3733 : 		else

  002b2	eb 2b		 jmp	 SHORT $LN18@draw_2d_eo
$LN17@draw_2d_eo:

; 3734 : 		{
; 3735 : 			set_mono_font_rel_position (1.0, 2.0);

  002b4	51		 push	 ecx
  002b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  002bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c2	51		 push	 ecx
  002c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d0	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3736 : 
; 3737 : 			print_mono_font_string ("LO");

  002d5	68 00 00 00 00	 push	 OFFSET ??_C@_02ONPABID@LO@
  002da	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN18@draw_2d_eo:

; 3738 : 		}
; 3739 : 	}
; 3740 : 
; 3741 : 	//
; 3742 : 	// field of view
; 3743 : 	//
; 3744 : 
; 3745 : 	switch (eo->field_of_view)

  002df	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  002e2	8b 08		 mov	 ecx, DWORD PTR [eax]
  002e4	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv166[ebp], ecx
  002ea	83 bd 58 ff ff
	ff 03		 cmp	 DWORD PTR tv166[ebp], 3
  002f1	77 31		 ja	 SHORT $LN23@draw_2d_eo
  002f3	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR tv166[ebp]
  002f9	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN45@draw_2d_eo[edx*4]
$LN19@draw_2d_eo:

; 3746 : 	{
; 3747 : 		case EO_FOV_ZOOM:
; 3748 : 			s = "ZOOM";

  00300	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04LGBIGMFG@ZOOM@

; 3749 : 			break;

  00307	eb 22		 jmp	 SHORT $LN4@draw_2d_eo
$LN20@draw_2d_eo:

; 3750 : 		case EO_FOV_NARROW:
; 3751 : 			s = "NAR";

  00309	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03FMKFNHMM@NAR@

; 3752 : 			break;

  00310	eb 19		 jmp	 SHORT $LN4@draw_2d_eo
$LN21@draw_2d_eo:

; 3753 : 		case EO_FOV_MEDIUM:
; 3754 : 			s = "MED";

  00312	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03FFIBGFCJ@MED@

; 3755 : 			break;

  00319	eb 10		 jmp	 SHORT $LN4@draw_2d_eo
$LN22@draw_2d_eo:

; 3756 : 		case EO_FOV_WIDE:
; 3757 : 			s = "WIDE";

  0031b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04KPGPJCNC@WIDE@

; 3758 : 			break;

  00322	eb 07		 jmp	 SHORT $LN4@draw_2d_eo
$LN23@draw_2d_eo:

; 3759 : 		default:
; 3760 : 			s = "XXX";

  00324	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN4@draw_2d_eo:

; 3761 : 			break;
; 3762 : 	}
; 3763 : 
; 3764 : 	width = get_mono_font_string_width (s);

  0032b	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0032e	50		 push	 eax
  0032f	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00334	d9 5d f8	 fstp	 DWORD PTR _width$[ebp]

; 3765 : 
; 3766 : 	if (draw_large_mfd)

  00337	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0033e	74 0f		 je	 SHORT $LN24@draw_2d_eo

; 3767 : 	{
; 3768 : 		y_adjust = 5.0;

  00340	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  00348	f3 0f 11 45 f4	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3769 : 	}
; 3770 : 	else

  0034d	eb 0d		 jmp	 SHORT $LN25@draw_2d_eo
$LN24@draw_2d_eo:

; 3771 : 	{
; 3772 : 		y_adjust = 2.0;

  0034f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00357	f3 0f 11 45 f4	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN25@draw_2d_eo:

; 3773 : 	}
; 3774 : 
; 3775 : 	set_2d_mono_font_position (0.85, 1.0);

  0035c	51		 push	 ecx
  0035d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00365	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036a	51		 push	 ecx
  0036b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00373	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00378	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3776 : 
; 3777 : 	set_mono_font_rel_position (-width, y_adjust);

  0037d	51		 push	 ecx
  0037e	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00383	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00388	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width$[ebp]
  0038d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00394	51		 push	 ecx
  00395	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3778 : 
; 3779 : 	print_mono_font_string (s);

  0039f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  003a2	50		 push	 eax
  003a3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3780 : 
; 3781 : 	//
; 3782 : 	// locked
; 3783 : 	//
; 3784 : 
; 3785 : 	if (eo_is_locked())

  003a8	e8 00 00 00 00	 call	 ?eo_is_locked@@YGHXZ	; eo_is_locked
  003ad	85 c0		 test	 eax, eax
  003af	74 63		 je	 SHORT $LN26@draw_2d_eo

; 3786 : 	{
; 3787 : 		width = get_mono_font_string_width ("LOCKED");

  003b1	68 00 00 00 00	 push	 OFFSET ??_C@_06KODELPLK@LOCKED@
  003b6	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  003bb	d9 5d f8	 fstp	 DWORD PTR _width$[ebp]

; 3788 : 		set_2d_mono_font_position (0.0, -0.6);

  003be	51		 push	 ecx
  003bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  003c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003cc	51		 push	 ecx
  003cd	0f 57 c0	 xorps	 xmm0, xmm0
  003d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d5	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3789 : 		set_mono_font_rel_position (-width * 0.5, 0);

  003da	51		 push	 ecx
  003db	0f 57 c0	 xorps	 xmm0, xmm0
  003de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e3	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width$[ebp]
  003e8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  003ef	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  003f3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  003fb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003ff	51		 push	 ecx
  00400	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00405	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3790 : 		print_mono_font_string ("LOCKED");

  0040a	68 00 00 00 00	 push	 OFFSET ??_C@_06KODELPLK@LOCKED@
  0040f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN26@draw_2d_eo:

; 3791 : 	}
; 3792 : 
; 3793 : 	if (laser_is_active())

  00414	e8 00 00 00 00	 call	 ?laser_is_active@@YGHXZ	; laser_is_active
  00419	85 c0		 test	 eax, eax
  0041b	0f 84 91 00 00
	00		 je	 $LN29@draw_2d_eo

; 3794 : 	{
; 3795 : 		tads_lase_flash_timer -= get_delta_time();

  00421	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tads_lase_flash_timer@@3MA
  00429	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00431	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tads_lase_flash_timer@@3MA, xmm0

; 3796 : 
; 3797 : 		if (tads_lase_flash_timer < 0.0)

  00439	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?tads_lase_flash_timer@@3MA
  00441	0f 57 c9	 xorps	 xmm1, xmm1
  00444	66 0f 2f c8	 comisd	 xmm1, xmm0
  00448	76 1d		 jbe	 SHORT $LN28@draw_2d_eo

; 3798 : 		{
; 3799 : 			tads_lase_flash_timer = TADS_LASE_FLASH_RATE;

  0044a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00452	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tads_lase_flash_timer@@3MA, xmm0

; 3800 : 
; 3801 : 			tads_display_lase_status ^= 1;

  0045a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tads_display_lase_status@@3HA
  0045f	83 f0 01	 xor	 eax, 1
  00462	a3 00 00 00 00	 mov	 DWORD PTR ?tads_display_lase_status@@3HA, eax
$LN28@draw_2d_eo:

; 3802 : 		}
; 3803 : 
; 3804 : 		if (tads_display_lase_status)

  00467	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?tads_display_lase_status@@3HA, 0
  0046e	74 42		 je	 SHORT $LN29@draw_2d_eo

; 3805 : 		{
; 3806 : 			set_2d_mono_font_position (0.2, -0.25);

  00470	51		 push	 ecx
  00471	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  00479	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047e	51		 push	 ecx
  0047f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00487	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0048c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3807 : 			set_mono_font_rel_position (0, 0);

  00491	51		 push	 ecx
  00492	0f 57 c0	 xorps	 xmm0, xmm0
  00495	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0049a	51		 push	 ecx
  0049b	0f 57 c0	 xorps	 xmm0, xmm0
  0049e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a3	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3808 : 			print_mono_font_string ("L");

  004a8	68 00 00 00 00	 push	 OFFSET ??_C@_01OCOKONAJ@L@
  004ad	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN29@draw_2d_eo:

; 3809 : 		}
; 3810 : 	}
; 3811 : 
; 3812 : // added ground stabi by GCsDriver  08-12-2007
; 3813 : 	//
; 3814 : 	// 030418 loke
; 3815 : 	// draw an indication if ground stablisation is enabled
; 3816 : 	//
; 3817 : 
; 3818 : 	if (eo_ground_stabilised)

  004b2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_ground_stabilised@@3HA, 0 ; eo_ground_stabilised
  004b9	74 7f		 je	 SHORT $LN30@draw_2d_eo

; 3819 : 	{
; 3820 : 		if (draw_large_mfd) // Jabberwock 031107 Designated targets - moved the stab indicator one line up, sorry!

  004bb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  004c2	74 0f		 je	 SHORT $LN31@draw_2d_eo

; 3821 : 		{
; 3822 : 			y_adjust = -38.0;

  004c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2180000
  004cc	f3 0f 11 45 f4	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3823 : 		}
; 3824 : 		else

  004d1	eb 0d		 jmp	 SHORT $LN32@draw_2d_eo
$LN31@draw_2d_eo:

; 3825 : 		{
; 3826 : 			y_adjust = -19.0;

  004d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1980000
  004db	f3 0f 11 45 f4	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN32@draw_2d_eo:

; 3827 : 		}
; 3828 : 
; 3829 : 		width = get_mono_font_string_width ("S");

  004e0	68 00 00 00 00	 push	 OFFSET ??_C@_01CPLAODJH@S@
  004e5	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  004ea	d9 5d f8	 fstp	 DWORD PTR _width$[ebp]

; 3830 : 
; 3831 : 		set_2d_mono_font_position (1.0, -1.0);

  004ed	51		 push	 ecx
  004ee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  004f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fb	51		 push	 ecx
  004fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00504	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00509	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3832 : 
; 3833 : 		set_mono_font_rel_position (-width, y_adjust);

  0050e	51		 push	 ecx
  0050f	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00514	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00519	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width$[ebp]
  0051e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00525	51		 push	 ecx
  00526	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0052b	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3834 : 
; 3835 : 		print_mono_font_string ("S");

  00530	68 00 00 00 00	 push	 OFFSET ??_C@_01CPLAODJH@S@
  00535	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN30@draw_2d_eo:

; 3836 : 	}
; 3837 : 
; 3838 : 	draw_high_action_display (target, scaled_3d ? 0 : 2);

  0053a	83 7d 18 00	 cmp	 DWORD PTR _scaled_3d$[ebp], 0
  0053e	74 0c		 je	 SHORT $LN43@draw_2d_eo
  00540	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv213[ebp], 0
  0054a	eb 0a		 jmp	 SHORT $LN44@draw_2d_eo
$LN43@draw_2d_eo:
  0054c	c7 85 58 ff ff
	ff 02 00 00 00	 mov	 DWORD PTR tv213[ebp], 2
$LN44@draw_2d_eo:
  00556	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR tv213[ebp]
  0055c	50		 push	 eax
  0055d	8b 4d dc	 mov	 ecx, DWORD PTR _target$[ebp]
  00560	51		 push	 ecx
  00561	e8 00 00 00 00	 call	 ?draw_high_action_display@@YGXPAUENTITY@@H@Z ; draw_high_action_display

; 3839 : 
; 3840 : 	////////////////////////////////////////
; 3841 : 	//
; 3842 : 	// draw heading scale
; 3843 : 	//
; 3844 : 	////////////////////////////////////////
; 3845 : 
; 3846 : 	draw_heading_scale (get_heading_from_attitude_matrix (eo_vp.attitude));

  00566	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0056b	d1 e0		 shl	 eax, 1
  0056d	b9 04 00 00 00	 mov	 ecx, 4
  00572	d1 e1		 shl	 ecx, 1
  00574	51		 push	 ecx
  00575	f3 0f 10 84 08
	0c 00 00 00	 movss	 xmm0, DWORD PTR ?eo_vp@@3UVIEWPOINT@@A[eax+ecx+12]
  0057e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00583	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00588	d1 e2		 shl	 edx, 1
  0058a	b8 04 00 00 00	 mov	 eax, 4
  0058f	6b c8 00	 imul	 ecx, eax, 0
  00592	51		 push	 ecx
  00593	f3 0f 10 84 0a
	0c 00 00 00	 movss	 xmm0, DWORD PTR ?eo_vp@@3UVIEWPOINT@@A[edx+ecx+12]
  0059c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a1	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  005a6	d9 9d 58 ff ff
	ff		 fstp	 DWORD PTR tv585[ebp]
  005ac	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR tv585[ebp]
  005b4	51		 push	 ecx
  005b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ba	e8 00 00 00 00	 call	 ?draw_heading_scale@@YGXM@Z ; draw_heading_scale

; 3847 : 
; 3848 : 	////////////////////////////////////////
; 3849 : 	//
; 3850 : 	// line graphics
; 3851 : 	//
; 3852 : 	////////////////////////////////////////
; 3853 : 
; 3854 : 	//
; 3855 : 	// datum
; 3856 : 	//
; 3857 : 
; 3858 : 	{
; 3859 : 		draw_2d_line (-0.200, 0.0, -0.050, 0.0, MFD_COLOUR1);

  005bf	b8 04 00 00 00	 mov	 eax, 4
  005c4	6b c8 00	 imul	 ecx, eax, 0
  005c7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005cd	52		 push	 edx
  005ce	51		 push	 ecx
  005cf	0f 57 c0	 xorps	 xmm0, xmm0
  005d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d7	51		 push	 ecx
  005d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  005e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e5	51		 push	 ecx
  005e6	0f 57 c0	 xorps	 xmm0, xmm0
  005e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ee	51		 push	 ecx
  005ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  005f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005fc	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3860 : 		draw_2d_line (0.050, 0.0, 0.20, 0.0, MFD_COLOUR1);

  00601	b8 04 00 00 00	 mov	 eax, 4
  00606	6b c8 00	 imul	 ecx, eax, 0
  00609	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0060f	52		 push	 edx
  00610	51		 push	 ecx
  00611	0f 57 c0	 xorps	 xmm0, xmm0
  00614	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00619	51		 push	 ecx
  0061a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00622	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00627	51		 push	 ecx
  00628	0f 57 c0	 xorps	 xmm0, xmm0
  0062b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00630	51		 push	 ecx
  00631	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  00639	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3861 : 		draw_2d_line (0.0, -0.200, 0.0, -0.050, MFD_COLOUR1);

  00643	b8 04 00 00 00	 mov	 eax, 4
  00648	6b c8 00	 imul	 ecx, eax, 0
  0064b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00651	52		 push	 edx
  00652	51		 push	 ecx
  00653	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  0065b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00660	51		 push	 ecx
  00661	0f 57 c0	 xorps	 xmm0, xmm0
  00664	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00669	51		 push	 ecx
  0066a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00672	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00677	51		 push	 ecx
  00678	0f 57 c0	 xorps	 xmm0, xmm0
  0067b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00680	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3862 : 		draw_2d_line (0.0, 0.050, 0.0, 0.20, MFD_COLOUR1);

  00685	b8 04 00 00 00	 mov	 eax, 4
  0068a	6b c8 00	 imul	 ecx, eax, 0
  0068d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00693	52		 push	 edx
  00694	51		 push	 ecx
  00695	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0069d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a2	51		 push	 ecx
  006a3	0f 57 c0	 xorps	 xmm0, xmm0
  006a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ab	51		 push	 ecx
  006ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  006b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b9	51		 push	 ecx
  006ba	0f 57 c0	 xorps	 xmm0, xmm0
  006bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3863 : 	}
; 3864 : 
; 3865 : 	//
; 3866 : 	// target gates
; 3867 : 	//
; 3868 : 
; 3869 : 	if (target)

  006c7	83 7d dc 00	 cmp	 DWORD PTR _target$[ebp], 0
  006cb	0f 84 5b 04 00
	00		 je	 $LN34@draw_2d_eo

; 3870 : 	{
; 3871 : 		if (valid_3d)

  006d1	83 7d 14 00	 cmp	 DWORD PTR _valid_3d$[ebp], 0
  006d5	0f 84 51 04 00
	00		 je	 $LN34@draw_2d_eo

; 3872 : 		{
; 3873 : 			tmp = main_vp;

  006db	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  006e0	be 00 00 00 00	 mov	 esi, OFFSET ?main_vp@@3UVIEWPOINT@@A ; main_vp
  006e5	8d 7d a0	 lea	 edi, DWORD PTR _tmp$[ebp]
  006e8	f3 a5		 rep movsd

; 3874 : 
; 3875 : 			main_vp = eo_vp;

  006ea	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  006ef	be 00 00 00 00	 mov	 esi, OFFSET ?eo_vp@@3UVIEWPOINT@@A ; eo_vp
  006f4	bf 00 00 00 00	 mov	 edi, OFFSET ?main_vp@@3UVIEWPOINT@@A ; main_vp
  006f9	f3 a5		 rep movsd

; 3876 : 
; 3877 : 			get_local_entity_target_point (target, &target_point);

  006fb	8d 45 d0	 lea	 eax, DWORD PTR _target_point$[ebp]
  006fe	50		 push	 eax
  006ff	8b 4d dc	 mov	 ecx, DWORD PTR _target$[ebp]
  00702	51		 push	 ecx
  00703	e8 00 00 00 00	 call	 ?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_local_entity_target_point

; 3878 : 
; 3879 : 			visibility = get_position_3d_screen_coordinates (&target_point, &i, &j);

  00708	8d 45 ec	 lea	 eax, DWORD PTR _j$[ebp]
  0070b	50		 push	 eax
  0070c	8d 4d f0	 lea	 ecx, DWORD PTR _i$[ebp]
  0070f	51		 push	 ecx
  00710	8d 55 d0	 lea	 edx, DWORD PTR _target_point$[ebp]
  00713	52		 push	 edx
  00714	e8 00 00 00 00	 call	 ?get_position_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUVEC3D@@PAM1@Z ; get_position_3d_screen_coordinates
  00719	89 45 9c	 mov	 DWORD PTR _visibility$[ebp], eax

; 3880 : 
; 3881 : 			//debug_log("i: %d, j: %d", i, j);
; 3882 : //			debug_log("i: %.2f, i: %.2f", i, j);
; 3883 : 
; 3884 : 			if ((visibility == OBJECT_3D_COMPLETELY_VISIBLE) || (visibility == OBJECT_3D_PARTIALLY_VISIBLE))

  0071c	83 7d 9c 01	 cmp	 DWORD PTR _visibility$[ebp], 1
  00720	74 0a		 je	 SHORT $LN36@draw_2d_eo
  00722	83 7d 9c 02	 cmp	 DWORD PTR _visibility$[ebp], 2
  00726	0f 85 f1 03 00
	00		 jne	 $LN35@draw_2d_eo
$LN36@draw_2d_eo:

; 3885 : 			{
; 3886 : 				if (scaled_3d)

  0072c	83 7d 18 00	 cmp	 DWORD PTR _scaled_3d$[ebp], 0
  00730	74 48		 je	 SHORT $LN37@draw_2d_eo

; 3887 : 				{
; 3888 : 					i -= i_translate_3d;

  00732	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _i$[ebp]
  00737	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?i_translate_3d@@3MA
  0073f	f3 0f 11 45 f0	 movss	 DWORD PTR _i$[ebp], xmm0

; 3889 : 					j -= j_translate_3d;

  00744	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _j$[ebp]
  00749	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?j_translate_3d@@3MA
  00751	f3 0f 11 45 ec	 movss	 DWORD PTR _j$[ebp], xmm0

; 3890 : 
; 3891 : 					i *= i_scale_3d;

  00756	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _i$[ebp]
  0075b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?i_scale_3d@@3MA
  00763	f3 0f 11 45 f0	 movss	 DWORD PTR _i$[ebp], xmm0

; 3892 : 					j *= j_scale_3d;

  00768	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _j$[ebp]
  0076d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?j_scale_3d@@3MA
  00775	f3 0f 11 45 ec	 movss	 DWORD PTR _j$[ebp], xmm0
$LN37@draw_2d_eo:

; 3893 : 				}
; 3894 : 
; 3895 : 				get_2d_world_position (i, j, &x, &y);

  0077a	8d 45 e4	 lea	 eax, DWORD PTR _y$[ebp]
  0077d	50		 push	 eax
  0077e	8d 4d e8	 lea	 ecx, DWORD PTR _x$[ebp]
  00781	51		 push	 ecx
  00782	51		 push	 ecx
  00783	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _j$[ebp]
  00788	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078d	51		 push	 ecx
  0078e	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _i$[ebp]
  00793	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00798	e8 00 00 00 00	 call	 ?get_2d_world_position@@YGXMMPAM0@Z ; get_2d_world_position

; 3896 : 
; 3897 : //				debug_log("x: %.2f, y: %.2f", x, y);
; 3898 : 
; 3899 : 				draw_2d_line (x - 0.20, y + 0.20, x - 0.15, y + 0.20, MFD_COLOUR1);

  0079d	b8 04 00 00 00	 mov	 eax, 4
  007a2	6b c8 00	 imul	 ecx, eax, 0
  007a5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007ab	52		 push	 edx
  007ac	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  007b1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  007b9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007bd	51		 push	 ecx
  007be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c3	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  007c8	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  007d0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007d4	51		 push	 ecx
  007d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007da	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  007df	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  007e7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007eb	51		 push	 ecx
  007ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f1	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  007f6	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  007fe	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00802	51		 push	 ecx
  00803	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00808	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3900 : 				draw_2d_line (x + 0.20, y + 0.20, x + 0.15, y + 0.20, MFD_COLOUR1);

  0080d	b8 04 00 00 00	 mov	 eax, 4
  00812	6b c8 00	 imul	 ecx, eax, 0
  00815	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0081b	52		 push	 edx
  0081c	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00821	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00829	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0082d	51		 push	 ecx
  0082e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00833	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00838	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  00840	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00844	51		 push	 ecx
  00845	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0084a	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  0084f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00857	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0085b	51		 push	 ecx
  0085c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00861	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00866	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0086e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00872	51		 push	 ecx
  00873	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00878	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3901 : 				draw_2d_line (x - 0.20, y - 0.20, x - 0.15, y - 0.20, MFD_COLOUR1);

  0087d	b8 04 00 00 00	 mov	 eax, 4
  00882	6b c8 00	 imul	 ecx, eax, 0
  00885	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0088b	52		 push	 edx
  0088c	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00891	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00899	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0089d	51		 push	 ecx
  0089e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a3	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  008a8	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  008b0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  008b4	51		 push	 ecx
  008b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ba	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  008bf	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  008c7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  008cb	51		 push	 ecx
  008cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d1	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  008d6	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  008de	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  008e2	51		 push	 ecx
  008e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3902 : 				draw_2d_line (x + 0.20, y - 0.20, x + 0.15, y - 0.20, MFD_COLOUR1);

  008ed	b8 04 00 00 00	 mov	 eax, 4
  008f2	6b c8 00	 imul	 ecx, eax, 0
  008f5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008fb	52		 push	 edx
  008fc	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00901	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00909	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0090d	51		 push	 ecx
  0090e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00913	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00918	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  00920	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00924	51		 push	 ecx
  00925	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0092a	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  0092f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00937	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0093b	51		 push	 ecx
  0093c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00941	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00946	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0094e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00952	51		 push	 ecx
  00953	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00958	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3903 : 				draw_2d_line (x - 0.20, y + 0.20, x - 0.20, y + 0.15, MFD_COLOUR1);

  0095d	b8 04 00 00 00	 mov	 eax, 4
  00962	6b c8 00	 imul	 ecx, eax, 0
  00965	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0096b	52		 push	 edx
  0096c	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00971	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  00979	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0097d	51		 push	 ecx
  0097e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00983	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00988	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00990	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00994	51		 push	 ecx
  00995	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0099a	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  0099f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  009a7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009ab	51		 push	 ecx
  009ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b1	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  009b6	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  009be	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009c2	51		 push	 ecx
  009c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009c8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3904 : 				draw_2d_line (x - 0.20, y - 0.20, x - 0.20, y - 0.15, MFD_COLOUR1);

  009cd	b8 04 00 00 00	 mov	 eax, 4
  009d2	6b c8 00	 imul	 ecx, eax, 0
  009d5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009db	52		 push	 edx
  009dc	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  009e1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  009e9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009ed	51		 push	 ecx
  009ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009f3	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  009f8	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00a00	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a04	51		 push	 ecx
  00a05	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a0a	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00a0f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00a17	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a1b	51		 push	 ecx
  00a1c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a21	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00a26	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00a2e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a32	51		 push	 ecx
  00a33	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a38	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3905 : 				draw_2d_line (x + 0.20, y + 0.20, x + 0.20, y + 0.15, MFD_COLOUR1);

  00a3d	b8 04 00 00 00	 mov	 eax, 4
  00a42	6b c8 00	 imul	 ecx, eax, 0
  00a45	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a4b	52		 push	 edx
  00a4c	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00a51	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  00a59	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a5d	51		 push	 ecx
  00a5e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a63	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00a68	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00a70	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a74	51		 push	 ecx
  00a75	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a7a	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00a7f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00a87	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a8b	51		 push	 ecx
  00a8c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a91	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00a96	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00a9e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00aa2	51		 push	 ecx
  00aa3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3906 : 				draw_2d_line (x + 0.20, y - 0.20, x + 0.20, y - 0.15, MFD_COLOUR1);

  00aad	b8 04 00 00 00	 mov	 eax, 4
  00ab2	6b c8 00	 imul	 ecx, eax, 0
  00ab5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00abb	52		 push	 edx
  00abc	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00ac1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  00ac9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00acd	51		 push	 ecx
  00ace	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ad3	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00ad8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00ae0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ae4	51		 push	 ecx
  00ae5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aea	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00aef	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00af7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00afb	51		 push	 ecx
  00afc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b01	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00b06	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00b0e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b12	51		 push	 ecx
  00b13	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b18	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN35@draw_2d_eo:

; 3907 : 			}
; 3908 : 
; 3909 : 			main_vp = tmp;

  00b1d	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00b22	8d 75 a0	 lea	 esi, DWORD PTR _tmp$[ebp]
  00b25	bf 00 00 00 00	 mov	 edi, OFFSET ?main_vp@@3UVIEWPOINT@@A ; main_vp
  00b2a	f3 a5		 rep movsd
$LN34@draw_2d_eo:
$LN1@draw_2d_eo:

; 3910 : 		}
; 3911 : 	}
; 3912 : }

  00b2c	5f		 pop	 edi
  00b2d	5e		 pop	 esi
  00b2e	5b		 pop	 ebx
  00b2f	8b e5		 mov	 esp, ebp
  00b31	5d		 pop	 ebp
  00b32	c2 14 00	 ret	 20			; 00000014H
  00b35	0f 1f 00	 npad	 3
$LN45@draw_2d_eo:
  00b38	00 00 00 00	 DD	 $LN19@draw_2d_eo
  00b3c	00 00 00 00	 DD	 $LN20@draw_2d_eo
  00b40	00 00 00 00	 DD	 $LN21@draw_2d_eo
  00b44	00 00 00 00	 DD	 $LN22@draw_2d_eo
?draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z ENDP ; draw_2d_eo_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z
_TEXT	SEGMENT
tv149 = -96						; size = 4
tv89 = -96						; size = 4
tv161 = -92						; size = 4
tv141 = -92						; size = 4
tv81 = -92						; size = 4
tv70 = -92						; size = 4
_day_segment_type$ = -24				; size = 4
_weather_mode$ = -20					; size = 4
_position$ = -16					; size = 4
_noise_level$ = -12					; size = 4
_light_level$ = -8					; size = 4
_zoom$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_size$ = 24						; size = 4
?draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z PROC ; draw_overlaid_3d_eo_display, COMDAT

; 3310 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3311 : 	float
; 3312 : 		zoom;
; 3313 : 
; 3314 : 	display_3d_light_levels
; 3315 : 		light_level;
; 3316 : 
; 3317 : 	display_3d_noise_levels
; 3318 : 		noise_level;
; 3319 : 
; 3320 : 	vec3d
; 3321 : 		*position;
; 3322 : 
; 3323 : 	weathermodes
; 3324 : 		weather_mode;
; 3325 : 
; 3326 : 	day_segment_types
; 3327 : 		day_segment_type;
; 3328 : 
; 3329 : 	ASSERT (eo);

  00009	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN6@draw_overl
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  00014	83 c0 13	 add	 eax, 19			; 00000013H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@draw_overl:

; 3330 : 
; 3331 : 	switch (eo->field_of_view)

  00027	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	89 4d a4	 mov	 DWORD PTR tv70[ebp], ecx
  0002f	83 7d a4 03	 cmp	 DWORD PTR tv70[ebp], 3
  00033	77 46		 ja	 SHORT $LN11@draw_overl
  00035	8b 55 a4	 mov	 edx, DWORD PTR tv70[ebp]
  00038	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN29@draw_overl[edx*4]
$LN7@draw_overl:

; 3332 : 	{
; 3333 : 		case EO_FOV_ZOOM:
; 3334 : 		{
; 3335 : 			zoom = 1.0 / 128.0;

  0003f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c000000
  00047	f3 0f 11 45 fc	 movss	 DWORD PTR _zoom$[ebp], xmm0

; 3336 : 
; 3337 : 			break;

  0004c	eb 40		 jmp	 SHORT $LN2@draw_overl
$LN8@draw_overl:

; 3338 : 		}
; 3339 : 		case EO_FOV_NARROW:
; 3340 : 		{
; 3341 : 			zoom = 1.0 / 32.0;

  0004e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d000000
  00056	f3 0f 11 45 fc	 movss	 DWORD PTR _zoom$[ebp], xmm0

; 3342 : 
; 3343 : 			break;

  0005b	eb 31		 jmp	 SHORT $LN2@draw_overl
$LN9@draw_overl:

; 3344 : 		}
; 3345 : 		case EO_FOV_MEDIUM:
; 3346 : 		{
; 3347 : 			zoom = 1.0 / 8.0;

  0005d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  00065	f3 0f 11 45 fc	 movss	 DWORD PTR _zoom$[ebp], xmm0

; 3348 : 
; 3349 : 			break;

  0006a	eb 22		 jmp	 SHORT $LN2@draw_overl
$LN10@draw_overl:

; 3350 : 		}
; 3351 : 		case EO_FOV_WIDE:
; 3352 : 		{
; 3353 : 			zoom = 1.0;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00074	f3 0f 11 45 fc	 movss	 DWORD PTR _zoom$[ebp], xmm0

; 3354 : 
; 3355 : 			break;

  00079	eb 13		 jmp	 SHORT $LN2@draw_overl
$LN11@draw_overl:

; 3356 : 		}
; 3357 : 		default:
; 3358 : 		{
; 3359 : 			debug_fatal ("Invalid field of view = %d", eo->field_of_view);

  0007b	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  0007e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00080	51		 push	 ecx
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@MNOBOANG@Invalid?5field?5of?5view?5?$DN?5?$CFd@
  00086	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0008b	83 c4 08	 add	 esp, 8
$LN2@draw_overl:

; 3360 : 
; 3361 : 			break;
; 3362 : 		}
; 3363 : 	}
; 3364 : 
; 3365 : 	position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  0008e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00095	74 0c		 je	 SHORT $LN21@draw_overl
  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	89 4d a4	 mov	 DWORD PTR tv81[ebp], ecx
  000a1	eb 21		 jmp	 SHORT $LN22@draw_overl
$LN21@draw_overl:
  000a3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  000a9	83 c2 37	 add	 edx, 55			; 00000037H
  000ac	52		 push	 edx
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  000b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000bd	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN22@draw_overl:
  000c4	b9 01 00 00 00	 mov	 ecx, 1
  000c9	85 c9		 test	 ecx, ecx
  000cb	74 09		 je	 SHORT $LN23@draw_overl
  000cd	c7 45 a0 08 00
	00 00		 mov	 DWORD PTR tv89[ebp], 8
  000d4	eb 21		 jmp	 SHORT $LN24@draw_overl
$LN23@draw_overl:
  000d6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  000dc	83 c2 37	 add	 edx, 55			; 00000037H
  000df	52		 push	 edx
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000ea	50		 push	 eax
  000eb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000f0	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv89[ebp], 0
$LN24@draw_overl:
  000f7	6a 08		 push	 8
  000f9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000ff	51		 push	 ecx
  00100	6b 55 a4 60	 imul	 edx, DWORD PTR tv81[ebp], 96
  00104	8b 45 a0	 mov	 eax, DWORD PTR tv89[ebp]
  00107	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0010e	ff d1		 call	 ecx
  00110	89 45 f0	 mov	 DWORD PTR _position$[ebp], eax

; 3366 : 
; 3367 : 	weather_mode = get_simple_session_weather_at_point (position);

  00113	8b 45 f0	 mov	 eax, DWORD PTR _position$[ebp]
  00116	50		 push	 eax
  00117	e8 00 00 00 00	 call	 ?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z ; get_simple_session_weather_at_point
  0011c	89 45 ec	 mov	 DWORD PTR _weather_mode$[ebp], eax

; 3368 : 
; 3369 : 	ASSERT ((weather_mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LAST));

  0011f	83 7d ec 00	 cmp	 DWORD PTR _weather_mode$[ebp], 0
  00123	7e 06		 jle	 SHORT $LN13@draw_overl
  00125	83 7d ec 05	 cmp	 DWORD PTR _weather_mode$[ebp], 5
  00129	7c 18		 jl	 SHORT $LN12@draw_overl
$LN13@draw_overl:
  0012b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  00130	83 c0 3b	 add	 eax, 59			; 0000003bH
  00133	50		 push	 eax
  00134	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00139	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
  0013e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN12@draw_overl:

; 3370 : 
; 3371 : 	day_segment_type = (day_segment_types) get_local_entity_int_value (get_session_entity (), INT_TYPE_DAY_SEGMENT_TYPE);

  00143	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  0014a	74 0c		 je	 SHORT $LN25@draw_overl
  0014c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  00151	8b 08		 mov	 ecx, DWORD PTR [eax]
  00153	89 4d a4	 mov	 DWORD PTR tv141[ebp], ecx
  00156	eb 21		 jmp	 SHORT $LN26@draw_overl
$LN25@draw_overl:
  00158	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  0015e	83 c2 3d	 add	 edx, 61			; 0000003dH
  00161	52		 push	 edx
  00162	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00167	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0016c	50		 push	 eax
  0016d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00172	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv141[ebp], 0
$LN26@draw_overl:
  00179	b9 01 00 00 00	 mov	 ecx, 1
  0017e	85 c9		 test	 ecx, ecx
  00180	74 09		 je	 SHORT $LN27@draw_overl
  00182	c7 45 a0 27 00
	00 00		 mov	 DWORD PTR tv149[ebp], 39 ; 00000027H
  00189	eb 21		 jmp	 SHORT $LN28@draw_overl
$LN27@draw_overl:
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  00191	83 c2 3d	 add	 edx, 61			; 0000003dH
  00194	52		 push	 edx
  00195	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0019a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0019f	50		 push	 eax
  001a0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001a5	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv149[ebp], 0
$LN28@draw_overl:
  001ac	6a 27		 push	 39			; 00000027H
  001ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  001b4	51		 push	 ecx
  001b5	69 55 a4 5c 04
	00 00		 imul	 edx, DWORD PTR tv141[ebp], 1116
  001bc	8b 45 a0	 mov	 eax, DWORD PTR tv149[ebp]
  001bf	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  001c6	ff d1		 call	 ecx
  001c8	89 45 e8	 mov	 DWORD PTR _day_segment_type$[ebp], eax

; 3372 : 
; 3373 : 	ASSERT ((day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT_TYPES));

  001cb	83 7d e8 00	 cmp	 DWORD PTR _day_segment_type$[ebp], 0
  001cf	7c 06		 jl	 SHORT $LN15@draw_overl
  001d1	83 7d e8 04	 cmp	 DWORD PTR _day_segment_type$[ebp], 4
  001d5	7c 18		 jl	 SHORT $LN14@draw_overl
$LN15@draw_overl:
  001d7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  001dc	83 c0 3f	 add	 eax, 63			; 0000003fH
  001df	50		 push	 eax
  001e0	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  001e5	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
  001ea	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN14@draw_overl:

; 3374 : 
; 3375 : 	switch (system)

  001ef	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  001f2	89 45 a4	 mov	 DWORD PTR tv161[ebp], eax
  001f5	83 7d a4 03	 cmp	 DWORD PTR tv161[ebp], 3
  001f9	74 0e		 je	 SHORT $LN16@draw_overl
  001fb	83 7d a4 04	 cmp	 DWORD PTR tv161[ebp], 4
  001ff	74 30		 je	 SHORT $LN17@draw_overl
  00201	83 7d a4 05	 cmp	 DWORD PTR tv161[ebp], 5
  00205	74 52		 je	 SHORT $LN18@draw_overl
  00207	eb 78		 jmp	 SHORT $LN19@draw_overl
$LN16@draw_overl:

; 3376 : 	{
; 3377 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 3378 : 		{
; 3379 : 			light_level = flir_light_levels[weather_mode][day_segment_type];

  00209	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0020c	c1 e0 04	 shl	 eax, 4
  0020f	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00212	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  00219	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 3380 : 
; 3381 : 			noise_level = flir_noise_levels[weather_mode][day_segment_type];

  0021c	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0021f	c1 e0 04	 shl	 eax, 4
  00222	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00225	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  0022c	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 3382 : 
; 3383 : 			break;

  0022f	eb 61		 jmp	 SHORT $LN4@draw_overl
$LN17@draw_overl:

; 3384 : 		}
; 3385 : 		case TARGET_ACQUISITION_SYSTEM_DTV:
; 3386 : 		{
; 3387 : 			light_level = dtv_light_levels[weather_mode][day_segment_type];

  00231	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00234	c1 e0 04	 shl	 eax, 4
  00237	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  0023a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  00241	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 3388 : 
; 3389 : 			noise_level = dtv_noise_levels[weather_mode][day_segment_type];

  00244	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00247	c1 e0 04	 shl	 eax, 4
  0024a	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  0024d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  00254	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 3390 : 
; 3391 : 			break;

  00257	eb 39		 jmp	 SHORT $LN4@draw_overl
$LN18@draw_overl:

; 3392 : 		}
; 3393 : 		case TARGET_ACQUISITION_SYSTEM_DVO:
; 3394 : 		{
; 3395 : 			light_level = dvo_light_levels[weather_mode][day_segment_type];

  00259	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0025c	c1 e0 04	 shl	 eax, 4
  0025f	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00262	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dvo_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  00269	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 3396 : 
; 3397 : 			noise_level = dvo_noise_levels[weather_mode][day_segment_type];

  0026c	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0026f	c1 e0 04	 shl	 eax, 4
  00272	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00275	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dvo_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  0027c	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 3398 : 
; 3399 : 			break;

  0027f	eb 11		 jmp	 SHORT $LN4@draw_overl
$LN19@draw_overl:

; 3400 : 		}
; 3401 : 		default:
; 3402 : 		{
; 3403 : 			debug_fatal ("Invalid target acquisition system = %d", system);

  00281	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  00284	50		 push	 eax
  00285	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
  0028a	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0028f	83 c4 08	 add	 esp, 8
$LN4@draw_overl:

; 3404 : 
; 3405 : 			break;
; 3406 : 		}
; 3407 : 	}
; 3408 : 
; 3409 : 	set_main_3d_params (DISPLAY_3D_TINT_GREEN, light_level, noise_level, x, y, size, size, rad (59.99) * zoom, rad (59.99) * zoom);

  00292	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  00297	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  0029f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002a3	51		 push	 ecx
  002a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a9	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  002ae	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  002b6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ba	51		 push	 ecx
  002bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c0	51		 push	 ecx
  002c1	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _size$[ebp]
  002c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002cb	51		 push	 ecx
  002cc	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _size$[ebp]
  002d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d6	51		 push	 ecx
  002d7	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y$[ebp]
  002dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e1	51		 push	 ecx
  002e2	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x$[ebp]
  002e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ec	8b 45 f4	 mov	 eax, DWORD PTR _noise_level$[ebp]
  002ef	50		 push	 eax
  002f0	8b 4d f8	 mov	 ecx, DWORD PTR _light_level$[ebp]
  002f3	51		 push	 ecx
  002f4	6a 03		 push	 3
  002f6	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params

; 3410 : 
; 3411 : 	draw_eo_3d_scene = TRUE;

  002fb	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 1 ; draw_eo_3d_scene

; 3412 : 
; 3413 : 	draw_main_3d_scene (&eo_vp);

  00305	68 00 00 00 00	 push	 OFFSET ?eo_vp@@3UVIEWPOINT@@A ; eo_vp
  0030a	e8 00 00 00 00	 call	 ?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z ; draw_main_3d_scene

; 3414 : 
; 3415 : 	draw_eo_3d_scene = FALSE;

  0030f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 0 ; draw_eo_3d_scene

; 3416 : }

  00319	5f		 pop	 edi
  0031a	5e		 pop	 esi
  0031b	5b		 pop	 ebx
  0031c	8b e5		 mov	 esp, ebp
  0031e	5d		 pop	 ebp
  0031f	c2 14 00	 ret	 20			; 00000014H
  00322	66 90		 npad	 2
$LN29@draw_overl:
  00324	00 00 00 00	 DD	 $LN7@draw_overl
  00328	00 00 00 00	 DD	 $LN8@draw_overl
  0032c	00 00 00 00	 DD	 $LN9@draw_overl
  00330	00 00 00 00	 DD	 $LN10@draw_overl
?draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z ENDP ; draw_overlaid_3d_eo_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z
_TEXT	SEGMENT
tv163 = -100						; size = 4
tv135 = -100						; size = 4
tv175 = -96						; size = 4
tv155 = -96						; size = 4
tv95 = -96						; size = 4
tv80 = -96						; size = 4
_tint$ = -28						; size = 4
_day_segment_type$ = -24				; size = 4
_weather_mode$ = -20					; size = 4
_position$ = -16					; size = 4
_noise_level$ = -12					; size = 4
_light_level$ = -8					; size = 4
_fov$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
?draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z PROC ; draw_3d_eo_display_on_texture, COMDAT

; 3163 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3164 : 	float
; 3165 : 		fov;
; 3166 : 
; 3167 : 	display_3d_light_levels
; 3168 : 		light_level;
; 3169 : 
; 3170 : 	display_3d_noise_levels
; 3171 : 		noise_level;
; 3172 : 
; 3173 : 	vec3d
; 3174 : 		*position;
; 3175 : 
; 3176 : 	weathermodes
; 3177 : 		weather_mode;
; 3178 : 
; 3179 : 	day_segment_types
; 3180 : 		day_segment_type;
; 3181 : 
; 3182 : 	display_3d_tints
; 3183 : 		tint;
; 3184 : 
; 3185 : 	ASSERT (eo);

  00009	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN6@draw_3d_eo
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00014	83 c0 16	 add	 eax, 22			; 00000016H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@draw_3d_eo:

; 3186 : 
; 3187 : 	ASSERT (eo_3d_texture_screen);

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, 0
  0002e	75 18		 jne	 SHORT $LN7@draw_3d_eo
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00035	83 c0 18	 add	 eax, 24			; 00000018H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@draw_3d_eo:

; 3188 : 
; 3189 : 	ASSERT (d3d_can_render_to_texture);

  00048	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  0004f	75 18		 jne	 SHORT $LN8@draw_3d_eo
  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00056	83 c0 1a	 add	 eax, 26			; 0000001aH
  00059	50		 push	 eax
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@EPIBEIKA@d3d_can_render_to_texture@
  00064	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@draw_3d_eo:

; 3190 : 
; 3191 : 	switch (eo->field_of_view)

  00069	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	89 4d a0	 mov	 DWORD PTR tv80[ebp], ecx
  00071	83 7d a0 03	 cmp	 DWORD PTR tv80[ebp], 3
  00075	0f 87 9a 00 00
	00		 ja	 $LN21@draw_3d_eo
  0007b	8b 55 a0	 mov	 edx, DWORD PTR tv80[ebp]
  0007e	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN39@draw_3d_eo[edx*4]
$LN9@draw_3d_eo:

; 3192 : 	{
; 3193 : 		case EO_FOV_ZOOM:
; 3194 : 		{
; 3195 : 			if (system == TARGET_ACQUISITION_SYSTEM_FLIR)

  00085	83 7d 0c 03	 cmp	 DWORD PTR _system$[ebp], 3
  00089	75 0f		 jne	 SHORT $LN10@draw_3d_eo

; 3196 : 				fov = 1.6;

  0008b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fcccccd
  00093	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0

; 3197 : 			else  // DTV

  00098	eb 0d		 jmp	 SHORT $LN11@draw_3d_eo
$LN10@draw_3d_eo:

; 3198 : 				fov = 0.45;

  0009a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  000a2	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0
$LN11@draw_3d_eo:

; 3199 : 
; 3200 : 			break;

  000a7	eb 7f		 jmp	 SHORT $LN2@draw_3d_eo
$LN12@draw_3d_eo:

; 3201 : 		}
; 3202 : 		case EO_FOV_NARROW:
; 3203 : 		{
; 3204 : 			if (system == TARGET_ACQUISITION_SYSTEM_FLIR)

  000a9	83 7d 0c 03	 cmp	 DWORD PTR _system$[ebp], 3
  000ad	75 0f		 jne	 SHORT $LN13@draw_3d_eo

; 3205 : 				fov = 3.6;

  000af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40666666
  000b7	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0

; 3206 : 			else  // DTV

  000bc	eb 0d		 jmp	 SHORT $LN14@draw_3d_eo
$LN13@draw_3d_eo:

; 3207 : 				fov = 0.9;

  000be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  000c6	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0
$LN14@draw_3d_eo:

; 3208 : 
; 3209 : 			break;

  000cb	eb 5b		 jmp	 SHORT $LN2@draw_3d_eo
$LN15@draw_3d_eo:

; 3210 : 		}
; 3211 : 		case EO_FOV_MEDIUM:
; 3212 : 		{
; 3213 : 			if (system == TARGET_ACQUISITION_SYSTEM_FLIR)

  000cd	83 7d 0c 03	 cmp	 DWORD PTR _system$[ebp], 3
  000d1	75 0f		 jne	 SHORT $LN16@draw_3d_eo

; 3214 : 				fov = 10.1;

  000d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@4121999a
  000db	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0

; 3215 : 			else  // DTV or DVO

  000e0	eb 0d		 jmp	 SHORT $LN17@draw_3d_eo
$LN16@draw_3d_eo:

; 3216 : 				fov = 4.0;

  000e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  000ea	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0
$LN17@draw_3d_eo:

; 3217 : 
; 3218 : 			break;

  000ef	eb 37		 jmp	 SHORT $LN2@draw_3d_eo
$LN18@draw_3d_eo:

; 3219 : 		}
; 3220 : 		case EO_FOV_WIDE:
; 3221 : 		{
; 3222 : 			if (system == TARGET_ACQUISITION_SYSTEM_FLIR)

  000f1	83 7d 0c 03	 cmp	 DWORD PTR _system$[ebp], 3
  000f5	75 0f		 jne	 SHORT $LN19@draw_3d_eo

; 3223 : 				fov = 50.0;

  000f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  000ff	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0

; 3224 : 			else  // DVO

  00104	eb 0d		 jmp	 SHORT $LN20@draw_3d_eo
$LN19@draw_3d_eo:

; 3225 : 				fov = 18.0;

  00106	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41900000
  0010e	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0
$LN20@draw_3d_eo:

; 3226 : 
; 3227 : 			break;

  00113	eb 13		 jmp	 SHORT $LN2@draw_3d_eo
$LN21@draw_3d_eo:

; 3228 : 		}
; 3229 : 		default:
; 3230 : 		{
; 3231 : 			debug_fatal ("Invalid field of view = %d", eo->field_of_view);

  00115	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  00118	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011a	51		 push	 ecx
  0011b	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@MNOBOANG@Invalid?5field?5of?5view?5?$DN?5?$CFd@
  00120	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00125	83 c4 08	 add	 esp, 8
$LN2@draw_3d_eo:

; 3232 : 
; 3233 : 			break;
; 3234 : 		}
; 3235 : 	}
; 3236 : 	position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00128	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0012f	74 0c		 je	 SHORT $LN31@draw_3d_eo
  00131	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00136	8b 08		 mov	 ecx, DWORD PTR [eax]
  00138	89 4d a0	 mov	 DWORD PTR tv95[ebp], ecx
  0013b	eb 21		 jmp	 SHORT $LN32@draw_3d_eo
$LN31@draw_3d_eo:
  0013d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00143	83 c2 49	 add	 edx, 73			; 00000049H
  00146	52		 push	 edx
  00147	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0014c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00151	50		 push	 eax
  00152	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00157	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv95[ebp], 0
$LN32@draw_3d_eo:
  0015e	b9 01 00 00 00	 mov	 ecx, 1
  00163	85 c9		 test	 ecx, ecx
  00165	74 09		 je	 SHORT $LN33@draw_3d_eo
  00167	c7 45 9c 08 00
	00 00		 mov	 DWORD PTR tv135[ebp], 8
  0016e	eb 21		 jmp	 SHORT $LN34@draw_3d_eo
$LN33@draw_3d_eo:
  00170	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00176	83 c2 49	 add	 edx, 73			; 00000049H
  00179	52		 push	 edx
  0017a	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0017f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00184	50		 push	 eax
  00185	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0018a	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv135[ebp], 0
$LN34@draw_3d_eo:
  00191	6a 08		 push	 8
  00193	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00199	51		 push	 ecx
  0019a	6b 55 a0 60	 imul	 edx, DWORD PTR tv95[ebp], 96
  0019e	8b 45 9c	 mov	 eax, DWORD PTR tv135[ebp]
  001a1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  001a8	ff d1		 call	 ecx
  001aa	89 45 f0	 mov	 DWORD PTR _position$[ebp], eax

; 3237 : 
; 3238 : 	weather_mode = get_simple_session_weather_at_point (position);

  001ad	8b 45 f0	 mov	 eax, DWORD PTR _position$[ebp]
  001b0	50		 push	 eax
  001b1	e8 00 00 00 00	 call	 ?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z ; get_simple_session_weather_at_point
  001b6	89 45 ec	 mov	 DWORD PTR _weather_mode$[ebp], eax

; 3239 : 
; 3240 : 	ASSERT ((weather_mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LAST));

  001b9	83 7d ec 00	 cmp	 DWORD PTR _weather_mode$[ebp], 0
  001bd	7e 06		 jle	 SHORT $LN23@draw_3d_eo
  001bf	83 7d ec 05	 cmp	 DWORD PTR _weather_mode$[ebp], 5
  001c3	7c 18		 jl	 SHORT $LN22@draw_3d_eo
$LN23@draw_3d_eo:
  001c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  001ca	83 c0 4d	 add	 eax, 77			; 0000004dH
  001cd	50		 push	 eax
  001ce	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  001d3	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
  001d8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN22@draw_3d_eo:

; 3241 : 
; 3242 : 	day_segment_type = (day_segment_types) get_local_entity_int_value (get_session_entity (), INT_TYPE_DAY_SEGMENT_TYPE);

  001dd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  001e4	74 0c		 je	 SHORT $LN35@draw_3d_eo
  001e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  001eb	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ed	89 4d a0	 mov	 DWORD PTR tv155[ebp], ecx
  001f0	eb 21		 jmp	 SHORT $LN36@draw_3d_eo
$LN35@draw_3d_eo:
  001f2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  001f8	83 c2 4f	 add	 edx, 79			; 0000004fH
  001fb	52		 push	 edx
  001fc	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00201	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00206	50		 push	 eax
  00207	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0020c	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv155[ebp], 0
$LN36@draw_3d_eo:
  00213	b9 01 00 00 00	 mov	 ecx, 1
  00218	85 c9		 test	 ecx, ecx
  0021a	74 09		 je	 SHORT $LN37@draw_3d_eo
  0021c	c7 45 9c 27 00
	00 00		 mov	 DWORD PTR tv163[ebp], 39 ; 00000027H
  00223	eb 21		 jmp	 SHORT $LN38@draw_3d_eo
$LN37@draw_3d_eo:
  00225	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  0022b	83 c2 4f	 add	 edx, 79			; 0000004fH
  0022e	52		 push	 edx
  0022f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00234	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00239	50		 push	 eax
  0023a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0023f	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv163[ebp], 0
$LN38@draw_3d_eo:
  00246	6a 27		 push	 39			; 00000027H
  00248	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  0024e	51		 push	 ecx
  0024f	69 55 a0 5c 04
	00 00		 imul	 edx, DWORD PTR tv155[ebp], 1116
  00256	8b 45 9c	 mov	 eax, DWORD PTR tv163[ebp]
  00259	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00260	ff d1		 call	 ecx
  00262	89 45 e8	 mov	 DWORD PTR _day_segment_type$[ebp], eax

; 3243 : 
; 3244 : 	ASSERT ((day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT_TYPES));

  00265	83 7d e8 00	 cmp	 DWORD PTR _day_segment_type$[ebp], 0
  00269	7c 06		 jl	 SHORT $LN25@draw_3d_eo
  0026b	83 7d e8 04	 cmp	 DWORD PTR _day_segment_type$[ebp], 4
  0026f	7c 18		 jl	 SHORT $LN24@draw_3d_eo
$LN25@draw_3d_eo:
  00271	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00276	83 c0 51	 add	 eax, 81			; 00000051H
  00279	50		 push	 eax
  0027a	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0027f	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
  00284	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN24@draw_3d_eo:

; 3245 : 
; 3246 : 	switch (system)

  00289	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  0028c	89 45 a0	 mov	 DWORD PTR tv175[ebp], eax
  0028f	83 7d a0 03	 cmp	 DWORD PTR tv175[ebp], 3
  00293	74 11		 je	 SHORT $LN26@draw_3d_eo
  00295	83 7d a0 04	 cmp	 DWORD PTR tv175[ebp], 4
  00299	74 3a		 je	 SHORT $LN27@draw_3d_eo
  0029b	83 7d a0 05	 cmp	 DWORD PTR tv175[ebp], 5
  0029f	74 63		 je	 SHORT $LN28@draw_3d_eo
  002a1	e9 8d 00 00 00	 jmp	 $LN29@draw_3d_eo
$LN26@draw_3d_eo:

; 3247 : 	{
; 3248 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 3249 : 		{
; 3250 : 			light_level = flir_light_levels[weather_mode][day_segment_type];

  002a6	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  002a9	c1 e0 04	 shl	 eax, 4
  002ac	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  002af	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  002b6	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 3251 : 
; 3252 : 			noise_level = flir_noise_levels[weather_mode][day_segment_type];

  002b9	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  002bc	c1 e0 04	 shl	 eax, 4
  002bf	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  002c2	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  002c9	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 3253 : 
; 3254 : 			tint = DISPLAY_3D_TINT_GREEN;

  002cc	c7 45 e4 03 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 3

; 3255 : 
; 3256 : 			break;

  002d3	eb 6f		 jmp	 SHORT $LN4@draw_3d_eo
$LN27@draw_3d_eo:

; 3257 : 		}
; 3258 : 		case TARGET_ACQUISITION_SYSTEM_DTV:
; 3259 : 		{
; 3260 : 			light_level = dtv_light_levels[weather_mode][day_segment_type];

  002d5	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  002d8	c1 e0 04	 shl	 eax, 4
  002db	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  002de	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  002e5	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 3261 : 
; 3262 : 			noise_level = dtv_noise_levels[weather_mode][day_segment_type];

  002e8	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  002eb	c1 e0 04	 shl	 eax, 4
  002ee	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  002f1	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  002f8	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 3263 : 
; 3264 : 			tint = DISPLAY_3D_TINT_GREEN_VISUAL;

  002fb	c7 45 e4 04 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 4

; 3265 : 
; 3266 : 			break;

  00302	eb 40		 jmp	 SHORT $LN4@draw_3d_eo
$LN28@draw_3d_eo:

; 3267 : 		}
; 3268 : 		case TARGET_ACQUISITION_SYSTEM_DVO:
; 3269 : 		{
; 3270 : 			light_level = dvo_light_levels[weather_mode][day_segment_type];

  00304	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00307	c1 e0 04	 shl	 eax, 4
  0030a	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  0030d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dvo_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  00314	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 3271 : 
; 3272 : 			noise_level = dvo_noise_levels[weather_mode][day_segment_type];

  00317	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0031a	c1 e0 04	 shl	 eax, 4
  0031d	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00320	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dvo_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  00327	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 3273 : 
; 3274 : 			tint = DISPLAY_3D_TINT_GREEN_VISUAL;

  0032a	c7 45 e4 04 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 4

; 3275 : 
; 3276 : 			break;

  00331	eb 11		 jmp	 SHORT $LN4@draw_3d_eo
$LN29@draw_3d_eo:

; 3277 : 		}
; 3278 : 		default:
; 3279 : 		{
; 3280 : 			debug_fatal ("Invalid target acquisition system = %d", system);

  00333	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  00336	50		 push	 eax
  00337	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
  0033c	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00341	83 c4 08	 add	 esp, 8
$LN4@draw_3d_eo:

; 3281 : 
; 3282 : 			break;
; 3283 : 		}
; 3284 : 	}
; 3285 : 
; 3286 : 	set_3d_render_target (eo_3d_texture_screen);

  00344	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00349	50		 push	 eax
  0034a	e8 00 00 00 00	 call	 ?set_3d_render_target@@YGHPAUSCREEN@@@Z ; set_3d_render_target

; 3287 : 
; 3288 : 	set_active_screen (eo_3d_texture_screen);

  0034f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00354	50		 push	 eax
  00355	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 3289 : 
; 3290 : 	set_main_3d_params (tint, light_level, noise_level, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_size, mfd_viewport_size, rad (fov), rad(fov));

  0035a	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fov$[ebp]
  0035f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00367	51		 push	 ecx
  00368	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fov$[ebp]
  00372	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  0037a	51		 push	 ecx
  0037b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00380	51		 push	 ecx
  00381	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00389	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038e	51		 push	 ecx
  0038f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00397	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039c	51		 push	 ecx
  0039d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  003a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003aa	51		 push	 ecx
  003ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  003b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b8	8b 45 f4	 mov	 eax, DWORD PTR _noise_level$[ebp]
  003bb	50		 push	 eax
  003bc	8b 4d f8	 mov	 ecx, DWORD PTR _light_level$[ebp]
  003bf	51		 push	 ecx
  003c0	8b 55 e4	 mov	 edx, DWORD PTR _tint$[ebp]
  003c3	52		 push	 edx
  003c4	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params

; 3291 : 
; 3292 : 	draw_eo_3d_scene = TRUE;

  003c9	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 1 ; draw_eo_3d_scene

; 3293 : 
; 3294 : 	draw_main_3d_scene (&eo_vp);

  003d3	68 00 00 00 00	 push	 OFFSET ?eo_vp@@3UVIEWPOINT@@A ; eo_vp
  003d8	e8 00 00 00 00	 call	 ?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z ; draw_main_3d_scene

; 3295 : 
; 3296 : 	draw_eo_3d_scene = FALSE;

  003dd	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 0 ; draw_eo_3d_scene

; 3297 : 
; 3298 : 	finalise_3d_render_target_texture (eo_3d_texture_screen);

  003e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  003ec	50		 push	 eax
  003ed	e8 00 00 00 00	 call	 ?finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z ; finalise_3d_render_target_texture

; 3299 : 
; 3300 : 	set_3d_render_target (video_screen);

  003f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  003f7	50		 push	 eax
  003f8	e8 00 00 00 00	 call	 ?set_3d_render_target@@YGHPAUSCREEN@@@Z ; set_3d_render_target

; 3301 : 
; 3302 : 	set_active_screen (video_screen);

  003fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00402	50		 push	 eax
  00403	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 3303 : }

  00408	5f		 pop	 edi
  00409	5e		 pop	 esi
  0040a	5b		 pop	 ebx
  0040b	8b e5		 mov	 esp, ebp
  0040d	5d		 pop	 ebp
  0040e	c2 08 00	 ret	 8
  00411	0f 1f 00	 npad	 3
$LN39@draw_3d_eo:
  00414	00 00 00 00	 DD	 $LN9@draw_3d_eo
  00418	00 00 00 00	 DD	 $LN12@draw_3d_eo
  0041c	00 00 00 00	 DD	 $LN15@draw_3d_eo
  00420	00 00 00 00	 DD	 $LN18@draw_3d_eo
?draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ENDP ; draw_3d_eo_display_on_texture
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv140 = -72						; size = 4
_fov$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
_location$ = 16						; size = 4
?draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z PROC ; draw_3d_eo_display, COMDAT

; 3140 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3141 : 	float
; 3142 : 		fov = 18.0;

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41900000
  00011	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0

; 3143 : 
; 3144 : 	ASSERT (eo);

  00016	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  0001a	75 18		 jne	 SHORT $LN2@draw_3d_eo
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z@4JA
  00021	83 c0 04	 add	 eax, 4
  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  0002f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@draw_3d_eo:

; 3145 : 
; 3146 : 	fov = rad(get_eo_sensor_fov(eo, system));

  00034	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  00037	50		 push	 eax
  00038	8b 4d 08	 mov	 ecx, DWORD PTR _eo$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 ?get_eo_sensor_fov@@YGMPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; get_eo_sensor_fov
  00041	d9 5d b8	 fstp	 DWORD PTR tv140[ebp]
  00044	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR tv140[ebp]
  00049	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00051	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0

; 3147 : 
; 3148 : 	if (draw_large_mfd)

  00056	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0005d	74 55		 je	 SHORT $LN3@draw_3d_eo

; 3149 : 		set_eo_view_params(system, mfd_viewport_x_min - 1.5, mfd_viewport_y_min - 1.5, MFD_VIEWPORT_LARGE_SIZE, MFD_VIEWPORT_LARGE_SIZE, fov, fov);

  0005f	51		 push	 ecx
  00060	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fov$[ebp]
  00065	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006a	51		 push	 ecx
  0006b	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fov$[ebp]
  00070	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00075	68 00 01 00 00	 push	 256			; 00000100H
  0007a	68 00 01 00 00	 push	 256			; 00000100H
  0007f	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00087	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff8000000000000
  0008f	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00093	50		 push	 eax
  00094	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0009c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff8000000000000
  000a4	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  000a8	51		 push	 ecx
  000a9	8b 55 0c	 mov	 edx, DWORD PTR _system$[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 ?set_eo_view_params@@YGXW4TARGET_ACQUISITION_SYSTEMS@@HHHHMM@Z ; set_eo_view_params

; 3150 : 	else

  000b2	eb 53		 jmp	 SHORT $LN4@draw_3d_eo
$LN3@draw_3d_eo:

; 3151 : 		set_eo_view_params(system, mfd_viewport_x_min - 1.5, mfd_viewport_y_min - 1.5, 128.0, 128.0, fov, fov);

  000b4	51		 push	 ecx
  000b5	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fov$[ebp]
  000ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bf	51		 push	 ecx
  000c0	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fov$[ebp]
  000c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ca	68 80 00 00 00	 push	 128			; 00000080H
  000cf	68 80 00 00 00	 push	 128			; 00000080H
  000d4	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  000dc	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff8000000000000
  000e4	f2 0f 2c c0	 cvttsd2si eax, xmm0
  000e8	50		 push	 eax
  000e9	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  000f1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff8000000000000
  000f9	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  000fd	51		 push	 ecx
  000fe	8b 55 0c	 mov	 edx, DWORD PTR _system$[ebp]
  00101	52		 push	 edx
  00102	e8 00 00 00 00	 call	 ?set_eo_view_params@@YGXW4TARGET_ACQUISITION_SYSTEMS@@HHHHMM@Z ; set_eo_view_params
$LN4@draw_3d_eo:

; 3152 : 
; 3153 : 	draw_eo_3d_scene = TRUE;

  00107	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 1 ; draw_eo_3d_scene

; 3154 : 	draw_main_3d_scene (&eo_vp);

  00111	68 00 00 00 00	 push	 OFFSET ?eo_vp@@3UVIEWPOINT@@A ; eo_vp
  00116	e8 00 00 00 00	 call	 ?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z ; draw_main_3d_scene

; 3155 : 	draw_eo_3d_scene = FALSE;

  0011b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 0 ; draw_eo_3d_scene

; 3156 : }

  00125	5f		 pop	 edi
  00126	5e		 pop	 esi
  00127	5b		 pop	 ebx
  00128	8b e5		 mov	 esp, ebp
  0012a	5d		 pop	 ebp
  0012b	c2 0c 00	 ret	 12			; 0000000cH
?draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z ENDP ; draw_3d_eo_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?set_eo_view_params@@YGXW4TARGET_ACQUISITION_SYSTEMS@@HHHHMM@Z
_TEXT	SEGMENT
tv138 = -96						; size = 4
tv78 = -96						; size = 4
tv150 = -92						; size = 4
tv130 = -92						; size = 4
tv70 = -92						; size = 4
_tint$ = -24						; size = 4
_day_segment_type$ = -20				; size = 4
_weather_mode$ = -16					; size = 4
_position$ = -12					; size = 4
_noise_level$ = -8					; size = 4
_light_level$ = -4					; size = 4
_system$ = 8						; size = 4
_x_min$ = 12						; size = 4
_y_min$ = 16						; size = 4
_x_max$ = 20						; size = 4
_y_max$ = 24						; size = 4
_xfov$ = 28						; size = 4
_yfov$ = 32						; size = 4
?set_eo_view_params@@YGXW4TARGET_ACQUISITION_SYSTEMS@@HHHHMM@Z PROC ; set_eo_view_params, COMDAT

; 3010 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3011 : 	display_3d_light_levels
; 3012 : 		light_level;
; 3013 : 
; 3014 : 	display_3d_noise_levels
; 3015 : 		noise_level;
; 3016 : 
; 3017 : 	vec3d
; 3018 : 		*position;
; 3019 : 
; 3020 : 	weathermodes
; 3021 : 		weather_mode;
; 3022 : 
; 3023 : 	day_segment_types
; 3024 : 		day_segment_type;
; 3025 : 
; 3026 : 	display_3d_tints
; 3027 : 		tint;
; 3028 : 
; 3029 : 	position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00010	74 0c		 je	 SHORT $LN13@set_eo_vie
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d a4	 mov	 DWORD PTR tv70[ebp], ecx
  0001c	eb 21		 jmp	 SHORT $LN14@set_eo_vie
$LN13@set_eo_vie:
  0001e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_eo_view_params@@YGXW4TARGET_ACQUISITION_SYSTEMS@@HHHHMM@Z@4JA
  00024	83 c2 13	 add	 edx, 19			; 00000013H
  00027	52		 push	 edx
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00038	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN14@set_eo_vie:
  0003f	b9 01 00 00 00	 mov	 ecx, 1
  00044	85 c9		 test	 ecx, ecx
  00046	74 09		 je	 SHORT $LN15@set_eo_vie
  00048	c7 45 a0 08 00
	00 00		 mov	 DWORD PTR tv78[ebp], 8
  0004f	eb 21		 jmp	 SHORT $LN16@set_eo_vie
$LN15@set_eo_vie:
  00051	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_eo_view_params@@YGXW4TARGET_ACQUISITION_SYSTEMS@@HHHHMM@Z@4JA
  00057	83 c2 13	 add	 edx, 19			; 00000013H
  0005a	52		 push	 edx
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006b	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN16@set_eo_vie:
  00072	6a 08		 push	 8
  00074	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0007a	51		 push	 ecx
  0007b	6b 55 a4 60	 imul	 edx, DWORD PTR tv70[ebp], 96
  0007f	8b 45 a0	 mov	 eax, DWORD PTR tv78[ebp]
  00082	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00089	ff d1		 call	 ecx
  0008b	89 45 f4	 mov	 DWORD PTR _position$[ebp], eax

; 3030 : 
; 3031 : 	weather_mode = get_simple_session_weather_at_point (position);

  0008e	8b 45 f4	 mov	 eax, DWORD PTR _position$[ebp]
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z ; get_simple_session_weather_at_point
  00097	89 45 f0	 mov	 DWORD PTR _weather_mode$[ebp], eax

; 3032 : 	ASSERT ((weather_mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LAST));

  0009a	83 7d f0 00	 cmp	 DWORD PTR _weather_mode$[ebp], 0
  0009e	7e 06		 jle	 SHORT $LN5@set_eo_vie
  000a0	83 7d f0 05	 cmp	 DWORD PTR _weather_mode$[ebp], 5
  000a4	7c 18		 jl	 SHORT $LN4@set_eo_vie
$LN5@set_eo_vie:
  000a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_eo_view_params@@YGXW4TARGET_ACQUISITION_SYSTEMS@@HHHHMM@Z@4JA
  000ab	83 c0 16	 add	 eax, 22			; 00000016H
  000ae	50		 push	 eax
  000af	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
  000b9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@set_eo_vie:

; 3033 : 
; 3034 : 	day_segment_type = (day_segment_types) get_local_entity_int_value (get_session_entity (), INT_TYPE_DAY_SEGMENT_TYPE);

  000be	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  000c5	74 0c		 je	 SHORT $LN17@set_eo_vie
  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  000cc	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ce	89 4d a4	 mov	 DWORD PTR tv130[ebp], ecx
  000d1	eb 21		 jmp	 SHORT $LN18@set_eo_vie
$LN17@set_eo_vie:
  000d3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_eo_view_params@@YGXW4TARGET_ACQUISITION_SYSTEMS@@HHHHMM@Z@4JA
  000d9	83 c2 18	 add	 edx, 24			; 00000018H
  000dc	52		 push	 edx
  000dd	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000e7	50		 push	 eax
  000e8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ed	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN18@set_eo_vie:
  000f4	b9 01 00 00 00	 mov	 ecx, 1
  000f9	85 c9		 test	 ecx, ecx
  000fb	74 09		 je	 SHORT $LN19@set_eo_vie
  000fd	c7 45 a0 27 00
	00 00		 mov	 DWORD PTR tv138[ebp], 39 ; 00000027H
  00104	eb 21		 jmp	 SHORT $LN20@set_eo_vie
$LN19@set_eo_vie:
  00106	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??set_eo_view_params@@YGXW4TARGET_ACQUISITION_SYSTEMS@@HHHHMM@Z@4JA
  0010c	83 c2 18	 add	 edx, 24			; 00000018H
  0010f	52		 push	 edx
  00110	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00115	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0011a	50		 push	 eax
  0011b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00120	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv138[ebp], 0
$LN20@set_eo_vie:
  00127	6a 27		 push	 39			; 00000027H
  00129	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  0012f	51		 push	 ecx
  00130	69 55 a4 5c 04
	00 00		 imul	 edx, DWORD PTR tv130[ebp], 1116
  00137	8b 45 a0	 mov	 eax, DWORD PTR tv138[ebp]
  0013a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00141	ff d1		 call	 ecx
  00143	89 45 ec	 mov	 DWORD PTR _day_segment_type$[ebp], eax

; 3035 : 	ASSERT ((day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT_TYPES));

  00146	83 7d ec 00	 cmp	 DWORD PTR _day_segment_type$[ebp], 0
  0014a	7c 06		 jl	 SHORT $LN7@set_eo_vie
  0014c	83 7d ec 04	 cmp	 DWORD PTR _day_segment_type$[ebp], 4
  00150	7c 18		 jl	 SHORT $LN6@set_eo_vie
$LN7@set_eo_vie:
  00152	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_eo_view_params@@YGXW4TARGET_ACQUISITION_SYSTEMS@@HHHHMM@Z@4JA
  00157	83 c0 19	 add	 eax, 25			; 00000019H
  0015a	50		 push	 eax
  0015b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00160	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
  00165	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@set_eo_vie:

; 3036 : 
; 3037 : 	switch (system)

  0016a	8b 45 08	 mov	 eax, DWORD PTR _system$[ebp]
  0016d	89 45 a4	 mov	 DWORD PTR tv150[ebp], eax
  00170	83 7d a4 03	 cmp	 DWORD PTR tv150[ebp], 3
  00174	74 11		 je	 SHORT $LN8@set_eo_vie
  00176	83 7d a4 04	 cmp	 DWORD PTR tv150[ebp], 4
  0017a	74 3a		 je	 SHORT $LN9@set_eo_vie
  0017c	83 7d a4 05	 cmp	 DWORD PTR tv150[ebp], 5
  00180	74 63		 je	 SHORT $LN10@set_eo_vie
  00182	e9 8d 00 00 00	 jmp	 $LN11@set_eo_vie
$LN8@set_eo_vie:

; 3038 : 	{
; 3039 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 3040 : 		{
; 3041 : 			light_level = flir_light_levels[weather_mode][day_segment_type];

  00187	8b 45 f0	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0018a	c1 e0 04	 shl	 eax, 4
  0018d	8b 4d ec	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00190	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  00197	89 55 fc	 mov	 DWORD PTR _light_level$[ebp], edx

; 3042 : 			noise_level = flir_noise_levels[weather_mode][day_segment_type];

  0019a	8b 45 f0	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0019d	c1 e0 04	 shl	 eax, 4
  001a0	8b 4d ec	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  001a3	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  001aa	89 55 f8	 mov	 DWORD PTR _noise_level$[ebp], edx

; 3043 : 			tint = DISPLAY_3D_TINT_GREEN;

  001ad	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 3

; 3044 : 
; 3045 : 			break;

  001b4	eb 6f		 jmp	 SHORT $LN2@set_eo_vie
$LN9@set_eo_vie:

; 3046 : 		}
; 3047 : 		case TARGET_ACQUISITION_SYSTEM_DTV:
; 3048 : 		{
; 3049 : 			light_level = dtv_light_levels[weather_mode][day_segment_type];

  001b6	8b 45 f0	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  001b9	c1 e0 04	 shl	 eax, 4
  001bc	8b 4d ec	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  001bf	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  001c6	89 55 fc	 mov	 DWORD PTR _light_level$[ebp], edx

; 3050 : 			noise_level = dtv_noise_levels[weather_mode][day_segment_type];

  001c9	8b 45 f0	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  001cc	c1 e0 04	 shl	 eax, 4
  001cf	8b 4d ec	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  001d2	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  001d9	89 55 f8	 mov	 DWORD PTR _noise_level$[ebp], edx

; 3051 : 			tint = DISPLAY_3D_TINT_GREEN_VISUAL;

  001dc	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 4

; 3052 : 
; 3053 : 			break;

  001e3	eb 40		 jmp	 SHORT $LN2@set_eo_vie
$LN10@set_eo_vie:

; 3054 : 		}
; 3055 : 		case TARGET_ACQUISITION_SYSTEM_DVO:
; 3056 : 		{
; 3057 : 			light_level = dvo_light_levels[weather_mode][day_segment_type];

  001e5	8b 45 f0	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  001e8	c1 e0 04	 shl	 eax, 4
  001eb	8b 4d ec	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  001ee	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dvo_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  001f5	89 55 fc	 mov	 DWORD PTR _light_level$[ebp], edx

; 3058 : 			noise_level = dvo_noise_levels[weather_mode][day_segment_type];

  001f8	8b 45 f0	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  001fb	c1 e0 04	 shl	 eax, 4
  001fe	8b 4d ec	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00201	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dvo_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  00208	89 55 f8	 mov	 DWORD PTR _noise_level$[ebp], edx

; 3059 : 			tint = DISPLAY_3D_TINT_CLEAR;

  0020b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 0

; 3060 : 
; 3061 : 			break;

  00212	eb 11		 jmp	 SHORT $LN2@set_eo_vie
$LN11@set_eo_vie:

; 3062 : 		}
; 3063 : 		default:
; 3064 : 		{
; 3065 : 			debug_fatal ("Invalid target acquisition system = %d", system);

  00214	8b 45 08	 mov	 eax, DWORD PTR _system$[ebp]
  00217	50		 push	 eax
  00218	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
  0021d	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00222	83 c4 08	 add	 esp, 8
$LN2@set_eo_vie:

; 3066 : 
; 3067 : 			break;
; 3068 : 		}
; 3069 : 	}
; 3070 : 
; 3071 : 	set_main_3d_params (tint, light_level, noise_level, x_min, y_min, x_max, y_max, xfov, yfov);

  00225	51		 push	 ecx
  00226	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _yfov$[ebp]
  0022b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00230	51		 push	 ecx
  00231	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _xfov$[ebp]
  00236	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023b	f3 0f 2a 45 18	 cvtsi2ss xmm0, DWORD PTR _y_max$[ebp]
  00240	51		 push	 ecx
  00241	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00246	f3 0f 2a 45 14	 cvtsi2ss xmm0, DWORD PTR _x_max$[ebp]
  0024b	51		 push	 ecx
  0024c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00251	f3 0f 2a 45 10	 cvtsi2ss xmm0, DWORD PTR _y_min$[ebp]
  00256	51		 push	 ecx
  00257	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025c	f3 0f 2a 45 0c	 cvtsi2ss xmm0, DWORD PTR _x_min$[ebp]
  00261	51		 push	 ecx
  00262	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00267	8b 45 f8	 mov	 eax, DWORD PTR _noise_level$[ebp]
  0026a	50		 push	 eax
  0026b	8b 4d fc	 mov	 ecx, DWORD PTR _light_level$[ebp]
  0026e	51		 push	 ecx
  0026f	8b 55 e8	 mov	 edx, DWORD PTR _tint$[ebp]
  00272	52		 push	 edx
  00273	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params

; 3072 : }

  00278	5f		 pop	 edi
  00279	5e		 pop	 esi
  0027a	5b		 pop	 ebx
  0027b	8b e5		 mov	 esp, ebp
  0027d	5d		 pop	 ebp
  0027e	c2 1c 00	 ret	 28			; 0000001cH
?set_eo_view_params@@YGXW4TARGET_ACQUISITION_SYSTEMS@@HHHHMM@Z ENDP ; set_eo_view_params
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?get_eo_sensor_fov@@YGMPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z
_TEXT	SEGMENT
tv65 = -72						; size = 4
_fov$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
?get_eo_sensor_fov@@YGMPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z PROC ; get_eo_sensor_fov, COMDAT

; 2952 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2953 : 	float fov = 10.0;

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00011	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0

; 2954 : 
; 2955 : 	switch (eo->field_of_view)

  00016	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	89 4d b8	 mov	 DWORD PTR tv65[ebp], ecx
  0001e	83 7d b8 03	 cmp	 DWORD PTR tv65[ebp], 3
  00022	0f 87 9a 00 00
	00		 ja	 $LN16@get_eo_sen
  00028	8b 55 b8	 mov	 edx, DWORD PTR tv65[ebp]
  0002b	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN18@get_eo_sen[edx*4]
$LN4@get_eo_sen:

; 2956 : 	{
; 2957 : 		case EO_FOV_ZOOM:
; 2958 : 		{
; 2959 : 			if (system == TARGET_ACQUISITION_SYSTEM_FLIR)

  00032	83 7d 0c 03	 cmp	 DWORD PTR _system$[ebp], 3
  00036	75 0f		 jne	 SHORT $LN5@get_eo_sen

; 2960 : 				fov = 1.6 * ONE_OVER_SQRT2;

  00038	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f90d0b8
  00040	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0

; 2961 : 			else  // DTV

  00045	eb 0d		 jmp	 SHORT $LN6@get_eo_sen
$LN5@get_eo_sen:

; 2962 : 				fov = 0.45 * ONE_OVER_SQRT2;

  00047	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ea2eacf
  0004f	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0
$LN6@get_eo_sen:

; 2963 : 
; 2964 : 			break;

  00054	eb 7f		 jmp	 SHORT $LN2@get_eo_sen
$LN7@get_eo_sen:

; 2965 : 		}
; 2966 : 		case EO_FOV_NARROW:
; 2967 : 		{
; 2968 : 			if (system == TARGET_ACQUISITION_SYSTEM_FLIR)

  00056	83 7d 0c 03	 cmp	 DWORD PTR _system$[ebp], 3
  0005a	75 0f		 jne	 SHORT $LN8@get_eo_sen

; 2969 : 				fov = 3.1 * ONE_OVER_SQRT2;

  0005c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@400c4a32
  00064	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0

; 2970 : 			else  // DTV

  00069	eb 0d		 jmp	 SHORT $LN9@get_eo_sen
$LN8@get_eo_sen:

; 2971 : 				fov = 0.9 * ONE_OVER_SQRT2;

  0006b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f22eacf
  00073	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0
$LN9@get_eo_sen:

; 2972 : 
; 2973 : 			break;

  00078	eb 5b		 jmp	 SHORT $LN2@get_eo_sen
$LN10@get_eo_sen:

; 2974 : 		}
; 2975 : 		case EO_FOV_MEDIUM:
; 2976 : 		{
; 2977 : 			if (system == TARGET_ACQUISITION_SYSTEM_FLIR)

  0007a	83 7d 0c 03	 cmp	 DWORD PTR _system$[ebp], 3
  0007e	75 0f		 jne	 SHORT $LN11@get_eo_sen

; 2978 : 				fov = 10.1 * ONE_OVER_SQRT2;

  00080	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40e48962
  00088	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0

; 2979 : 			else  // DTV or DVO

  0008d	eb 0d		 jmp	 SHORT $LN12@get_eo_sen
$LN11@get_eo_sen:

; 2980 : 				fov = 4.0 * ONE_OVER_SQRT2;

  0008f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@403504e6
  00097	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0
$LN12@get_eo_sen:

; 2981 : 
; 2982 : 			break;

  0009c	eb 37		 jmp	 SHORT $LN2@get_eo_sen
$LN13@get_eo_sen:

; 2983 : 		}
; 2984 : 		case EO_FOV_WIDE:
; 2985 : 		{
; 2986 : 			if (system == TARGET_ACQUISITION_SYSTEM_FLIR)

  0009e	83 7d 0c 03	 cmp	 DWORD PTR _system$[ebp], 3
  000a2	75 0f		 jne	 SHORT $LN14@get_eo_sen

; 2987 : 				fov = 50.0 * ONE_OVER_SQRT2;

  000a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@420d6bd4
  000ac	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0

; 2988 : 			else  // DVO

  000b1	eb 0d		 jmp	 SHORT $LN15@get_eo_sen
$LN14@get_eo_sen:

; 2989 : 				fov = 18.0 * ONE_OVER_SQRT2;

  000b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@414ba583
  000bb	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0
$LN15@get_eo_sen:

; 2990 : 
; 2991 : 			break;

  000c0	eb 13		 jmp	 SHORT $LN2@get_eo_sen
$LN16@get_eo_sen:

; 2992 : 		}
; 2993 : 		default:
; 2994 : 		{
; 2995 : 			debug_fatal ("Invalid field of view = %d", eo->field_of_view);

  000c2	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  000c5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c7	51		 push	 ecx
  000c8	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@MNOBOANG@Invalid?5field?5of?5view?5?$DN?5?$CFd@
  000cd	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000d2	83 c4 08	 add	 esp, 8
$LN2@get_eo_sen:

; 2996 : 
; 2997 : 			break;
; 2998 : 		}
; 2999 : 	}
; 3000 : 
; 3001 : 	return fov;

  000d5	d9 45 fc	 fld	 DWORD PTR _fov$[ebp]

; 3002 : }

  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 08 00	 ret	 8
  000e1	0f 1f 00	 npad	 3
$LN18@get_eo_sen:
  000e4	00 00 00 00	 DD	 $LN4@get_eo_sen
  000e8	00 00 00 00	 DD	 $LN7@get_eo_sen
  000ec	00 00 00 00	 DD	 $LN10@get_eo_sen
  000f0	00 00 00 00	 DD	 $LN13@get_eo_sen
?get_eo_sensor_fov@@YGMPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ENDP ; get_eo_sensor_fov
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_air_radar_mfd@@YGXXZ
_TEXT	SEGMENT
tv459 = -108						; size = 4
tv438 = -108						; size = 4
tv372 = -108						; size = 4
tv347 = -108						; size = 4
tv195 = -108						; size = 4
tv174 = -108						; size = 4
tv130 = -108						; size = 4
tv78 = -108						; size = 4
tv451 = -104						; size = 4
tv430 = -104						; size = 4
tv364 = -104						; size = 4
tv339 = -104						; size = 4
tv187 = -104						; size = 4
tv166 = -104						; size = 4
tv90 = -104						; size = 4
tv70 = -104						; size = 4
_target_position$ = -36					; size = 4
_source_position$ = -32					; size = 4
_target$ = -28						; size = 4
_source$ = -24						; size = 4
_y_adjust$ = -20					; size = 4
_target_range$ = -16					; size = 4
_scale$ = -12						; size = 4
_source_heading$ = -8					; size = 4
_source_side$ = -4					; size = 4
?draw_air_radar_mfd@@YGXXZ PROC				; draw_air_radar_mfd, COMDAT

; 2450 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2451 : 	entity_sides
; 2452 : 		source_side;
; 2453 : 
; 2454 : 	float
; 2455 : 		source_heading,
; 2456 : 		scale,
; 2457 : 		target_range,
; 2458 : 		y_adjust;
; 2459 : 
; 2460 : 	entity
; 2461 : 		*source,
; 2462 : 		*target;
; 2463 : 
; 2464 : 	vec3d
; 2465 : 		*source_position,
; 2466 : 		*target_position;
; 2467 : 
; 2468 : 	source = get_gunship_entity ();

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0000e	89 45 e8	 mov	 DWORD PTR _source$[ebp], eax

; 2469 : 
; 2470 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  00011	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  00015	74 0a		 je	 SHORT $LN25@draw_air_r
  00017	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 4d 98	 mov	 DWORD PTR tv70[ebp], ecx
  0001f	eb 21		 jmp	 SHORT $LN26@draw_air_r
$LN25@draw_air_r:
  00021	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00027	83 c2 14	 add	 edx, 20			; 00000014H
  0002a	52		 push	 edx
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003b	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN26@draw_air_r:
  00042	b9 01 00 00 00	 mov	 ecx, 1
  00047	85 c9		 test	 ecx, ecx
  00049	74 09		 je	 SHORT $LN27@draw_air_r
  0004b	c7 45 94 08 00
	00 00		 mov	 DWORD PTR tv78[ebp], 8
  00052	eb 21		 jmp	 SHORT $LN28@draw_air_r
$LN27@draw_air_r:
  00054	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  0005a	83 c2 14	 add	 edx, 20			; 00000014H
  0005d	52		 push	 edx
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006e	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN28@draw_air_r:
  00075	6a 08		 push	 8
  00077	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  0007a	51		 push	 ecx
  0007b	6b 55 98 60	 imul	 edx, DWORD PTR tv70[ebp], 96
  0007f	8b 45 94	 mov	 eax, DWORD PTR tv78[ebp]
  00082	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00089	ff d1		 call	 ecx
  0008b	89 45 e0	 mov	 DWORD PTR _source_position$[ebp], eax

; 2471 : 
; 2472 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  0008e	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  00092	74 0a		 je	 SHORT $LN29@draw_air_r
  00094	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  00097	8b 08		 mov	 ecx, DWORD PTR [eax]
  00099	89 4d 98	 mov	 DWORD PTR tv90[ebp], ecx
  0009c	eb 21		 jmp	 SHORT $LN30@draw_air_r
$LN29@draw_air_r:
  0009e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  000a4	83 c2 16	 add	 edx, 22			; 00000016H
  000a7	52		 push	 edx
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b8	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN30@draw_air_r:
  000bf	b9 01 00 00 00	 mov	 ecx, 1
  000c4	85 c9		 test	 ecx, ecx
  000c6	74 09		 je	 SHORT $LN31@draw_air_r
  000c8	c7 45 94 bb 00
	00 00		 mov	 DWORD PTR tv130[ebp], 187 ; 000000bbH
  000cf	eb 21		 jmp	 SHORT $LN32@draw_air_r
$LN31@draw_air_r:
  000d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  000d7	83 c2 16	 add	 edx, 22			; 00000016H
  000da	52		 push	 edx
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000eb	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN32@draw_air_r:
  000f2	68 bb 00 00 00	 push	 187			; 000000bbH
  000f7	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  000fa	51		 push	 ecx
  000fb	69 55 98 5c 04
	00 00		 imul	 edx, DWORD PTR tv90[ebp], 1116
  00102	8b 45 94	 mov	 eax, DWORD PTR tv130[ebp]
  00105	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  0010c	ff d1		 call	 ecx
  0010e	89 45 fc	 mov	 DWORD PTR _source_side$[ebp], eax

; 2473 : 
; 2474 : 	////////////////////////////////////////
; 2475 : 	//
; 2476 : 	// text
; 2477 : 	//
; 2478 : 	////////////////////////////////////////
; 2479 : 
; 2480 : 	set_mono_font_colour (MFD_COLOUR1);

  00111	b8 04 00 00 00	 mov	 eax, 4
  00116	6b c8 00	 imul	 ecx, eax, 0
  00119	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0011f	52		 push	 edx
  00120	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 2481 : 
; 2482 : 	if (draw_large_mfd)

  00125	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0012c	74 09		 je	 SHORT $LN4@draw_air_r

; 2483 : 	{
; 2484 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  0012e	6a 05		 push	 5
  00130	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 2485 : 	}
; 2486 : 	else

  00135	eb 07		 jmp	 SHORT $LN5@draw_air_r
$LN4@draw_air_r:

; 2487 : 	{
; 2488 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  00137	6a 01		 push	 1
  00139	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN5@draw_air_r:

; 2489 : 	}
; 2490 : 
; 2491 : 	//
; 2492 : 	// declutter status
; 2493 : 	//
; 2494 : 
; 2495 : 	if (draw_large_mfd)

  0013e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00145	74 0f		 je	 SHORT $LN6@draw_air_r

; 2496 : 	{
; 2497 : 		y_adjust = 5.0;

  00147	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  0014f	f3 0f 11 45 ec	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2498 : 	}
; 2499 : 	else

  00154	eb 0d		 jmp	 SHORT $LN7@draw_air_r
$LN6@draw_air_r:

; 2500 : 	{
; 2501 : 		y_adjust = 2.0;

  00156	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0015e	f3 0f 11 45 ec	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN7@draw_air_r:

; 2502 : 	}
; 2503 : 
; 2504 : 	set_2d_mono_font_position (-0.8, 1.0);

  00163	51		 push	 ecx
  00164	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0016c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00171	51		 push	 ecx
  00172	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0017a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2505 : 
; 2506 : 	set_mono_font_rel_position (1.0, y_adjust);

  00184	51		 push	 ecx
  00185	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0018a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018f	51		 push	 ecx
  00190	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00198	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2507 : 
; 2508 : 	if (air_radar.show_allied_targets)

  001a2	83 3d 1c 00 00
	00 00		 cmp	 DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+28, 0
  001a9	74 0c		 je	 SHORT $LN8@draw_air_r

; 2509 : 	{
; 2510 : 		print_mono_font_string ("ALL");

  001ab	68 00 00 00 00	 push	 OFFSET ??_C@_03NIFPGLBG@ALL@
  001b0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2511 : 	}
; 2512 : 	else

  001b5	eb 0a		 jmp	 SHORT $LN9@draw_air_r
$LN8@draw_air_r:

; 2513 : 	{
; 2514 : 		print_mono_font_string ("ENEMY");

  001b7	68 00 00 00 00	 push	 OFFSET ??_C@_05EJJKHDCK@ENEMY@
  001bc	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN9@draw_air_r:

; 2515 : 	}
; 2516 : 
; 2517 : 	if (air_radar.sweep_mode == RADAR_SWEEP_MODE_SINGLE_ACTIVE || air_radar.sweep_mode == RADAR_SWEEP_MODE_SINGLE_INACTIVE)

  001c1	83 3d 28 00 00
	00 02		 cmp	 DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+40, 2
  001c8	74 09		 je	 SHORT $LN11@draw_air_r
  001ca	83 3d 28 00 00
	00 01		 cmp	 DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+40, 1
  001d1	75 49		 jne	 SHORT $LN10@draw_air_r
$LN11@draw_air_r:

; 2518 : 	{
; 2519 : 		set_2d_mono_font_position (-0.8, 0.8);

  001d3	51		 push	 ecx
  001d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  001dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e1	51		 push	 ecx
  001e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  001ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ef	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2520 : 		set_mono_font_rel_position (1.0, y_adjust);

  001f4	51		 push	 ecx
  001f5	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  001fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ff	51		 push	 ecx
  00200	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00208	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2521 : 		print_mono_font_string ("SGL");

  00212	68 00 00 00 00	 push	 OFFSET ??_C@_03COBKBLOD@SGL@
  00217	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN10@draw_air_r:

; 2522 : 	}
; 2523 : 
; 2524 : 	//
; 2525 : 	// scan range
; 2526 : 	//
; 2527 : 
; 2528 : 	display_radar_scan_range (air_radar.scan_range, FALSE);

  0021c	6a 00		 push	 0
  0021e	51		 push	 ecx
  0021f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A
  00227	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022c	e8 00 00 00 00	 call	 ?display_radar_scan_range@@YGXMH@Z ; display_radar_scan_range

; 2529 : 
; 2530 : 	//
; 2531 : 	// target details
; 2532 : 	//
; 2533 : 
; 2534 : 	if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_AIR_RADAR)

  00231	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 2 ; target_acquisition_system
  00238	0f 85 3a 01 00
	00		 jne	 $LN12@draw_air_r

; 2535 : 	{
; 2536 : 		target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  0023e	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  00242	74 0a		 je	 SHORT $LN33@draw_air_r
  00244	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  00247	8b 08		 mov	 ecx, DWORD PTR [eax]
  00249	89 4d 98	 mov	 DWORD PTR tv166[ebp], ecx
  0024c	eb 21		 jmp	 SHORT $LN34@draw_air_r
$LN33@draw_air_r:
  0024e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00254	83 c2 56	 add	 edx, 86			; 00000056H
  00257	52		 push	 edx
  00258	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0025d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00262	50		 push	 eax
  00263	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00268	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv166[ebp], 0
$LN34@draw_air_r:
  0026f	b9 01 00 00 00	 mov	 ecx, 1
  00274	85 c9		 test	 ecx, ecx
  00276	74 09		 je	 SHORT $LN35@draw_air_r
  00278	c7 45 94 26 00
	00 00		 mov	 DWORD PTR tv174[ebp], 38 ; 00000026H
  0027f	eb 21		 jmp	 SHORT $LN36@draw_air_r
$LN35@draw_air_r:
  00281	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00287	83 c2 56	 add	 edx, 86			; 00000056H
  0028a	52		 push	 edx
  0028b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00290	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00295	50		 push	 eax
  00296	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0029b	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv174[ebp], 0
$LN36@draw_air_r:
  002a2	6a 26		 push	 38			; 00000026H
  002a4	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  002a7	51		 push	 ecx
  002a8	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv166[ebp], 180
  002af	8b 45 94	 mov	 eax, DWORD PTR tv174[ebp]
  002b2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  002b9	ff d1		 call	 ecx
  002bb	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax

; 2537 : 
; 2538 : 		if (target)

  002be	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  002c2	0f 84 8f 00 00
	00		 je	 $LN13@draw_air_r

; 2539 : 		{
; 2540 : 			target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  002c8	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  002cc	74 0a		 je	 SHORT $LN37@draw_air_r
  002ce	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  002d1	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d3	89 4d 98	 mov	 DWORD PTR tv187[ebp], ecx
  002d6	eb 21		 jmp	 SHORT $LN38@draw_air_r
$LN37@draw_air_r:
  002d8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  002de	83 c2 5a	 add	 edx, 90			; 0000005aH
  002e1	52		 push	 edx
  002e2	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  002e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002ec	50		 push	 eax
  002ed	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002f2	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv187[ebp], 0
$LN38@draw_air_r:
  002f9	b9 01 00 00 00	 mov	 ecx, 1
  002fe	85 c9		 test	 ecx, ecx
  00300	74 09		 je	 SHORT $LN39@draw_air_r
  00302	c7 45 94 08 00
	00 00		 mov	 DWORD PTR tv195[ebp], 8
  00309	eb 21		 jmp	 SHORT $LN40@draw_air_r
$LN39@draw_air_r:
  0030b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00311	83 c2 5a	 add	 edx, 90			; 0000005aH
  00314	52		 push	 edx
  00315	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0031a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0031f	50		 push	 eax
  00320	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00325	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv195[ebp], 0
$LN40@draw_air_r:
  0032c	6a 08		 push	 8
  0032e	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  00331	51		 push	 ecx
  00332	6b 55 98 60	 imul	 edx, DWORD PTR tv187[ebp], 96
  00336	8b 45 94	 mov	 eax, DWORD PTR tv195[ebp]
  00339	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00340	ff d1		 call	 ecx
  00342	89 45 dc	 mov	 DWORD PTR _target_position$[ebp], eax

; 2541 : 
; 2542 : 			target_range = get_3d_range (source_position, target_position);

  00345	8b 45 dc	 mov	 eax, DWORD PTR _target_position$[ebp]
  00348	50		 push	 eax
  00349	8b 4d e0	 mov	 ecx, DWORD PTR _source_position$[ebp]
  0034c	51		 push	 ecx
  0034d	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  00352	d9 5d f0	 fstp	 DWORD PTR _target_range$[ebp]

; 2543 : 		}
; 2544 : 		else

  00355	eb 08		 jmp	 SHORT $LN14@draw_air_r
$LN13@draw_air_r:

; 2545 : 		{
; 2546 : 			target_range = 0.0;

  00357	0f 57 c0	 xorps	 xmm0, xmm0
  0035a	f3 0f 11 45 f0	 movss	 DWORD PTR _target_range$[ebp], xmm0
$LN14@draw_air_r:

; 2547 : 		}
; 2548 : 
; 2549 : 		display_radar_target_details (target, target_range, &air_radar);

  0035f	68 00 00 00 00	 push	 OFFSET ?air_radar@@3URADAR_PARAMS@@A ; air_radar
  00364	51		 push	 ecx
  00365	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _target_range$[ebp]
  0036a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036f	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  00372	50		 push	 eax
  00373	e8 00 00 00 00	 call	 ?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z ; display_radar_target_details
$LN12@draw_air_r:

; 2550 : 	}
; 2551 : 
; 2552 : 	////////////////////////////////////////
; 2553 : 	//
; 2554 : 	// line graphics
; 2555 : 	//
; 2556 : 	////////////////////////////////////////
; 2557 : 
; 2558 : 	//
; 2559 : 	// datum markers
; 2560 : 	//
; 2561 : 
; 2562 : 	draw_2d_line ( 0.00,  TICK1,  0.00,  TICK2, MFD_COLOUR4);

  00378	b8 04 00 00 00	 mov	 eax, 4
  0037d	6b c8 03	 imul	 ecx, eax, 3
  00380	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00386	52		 push	 edx
  00387	51		 push	 ecx
  00388	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ac083
  00390	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00395	51		 push	 ecx
  00396	0f 57 c0	 xorps	 xmm0, xmm0
  00399	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039e	51		 push	 ecx
  0039f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3851ec
  003a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ac	51		 push	 ecx
  003ad	0f 57 c0	 xorps	 xmm0, xmm0
  003b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2563 : 	draw_2d_line ( TICK1,  0.00,  TICK2,  0.00, MFD_COLOUR4);

  003ba	b8 04 00 00 00	 mov	 eax, 4
  003bf	6b c8 03	 imul	 ecx, eax, 3
  003c2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003c8	52		 push	 edx
  003c9	51		 push	 ecx
  003ca	0f 57 c0	 xorps	 xmm0, xmm0
  003cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d2	51		 push	 ecx
  003d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ac083
  003db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e0	51		 push	 ecx
  003e1	0f 57 c0	 xorps	 xmm0, xmm0
  003e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e9	51		 push	 ecx
  003ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3851ec
  003f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2564 : 	draw_2d_line ( 0.00, -TICK1,  0.00, -TICK2, MFD_COLOUR4);

  003fc	b8 04 00 00 00	 mov	 eax, 4
  00401	6b c8 03	 imul	 ecx, eax, 3
  00404	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0040a	52		 push	 edx
  0040b	51		 push	 ecx
  0040c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ac083
  00414	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00419	51		 push	 ecx
  0041a	0f 57 c0	 xorps	 xmm0, xmm0
  0041d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00422	51		 push	 ecx
  00423	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3851ec
  0042b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00430	51		 push	 ecx
  00431	0f 57 c0	 xorps	 xmm0, xmm0
  00434	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00439	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2565 : 	draw_2d_line (-TICK1,  0.00, -TICK2,  0.00, MFD_COLOUR4);

  0043e	b8 04 00 00 00	 mov	 eax, 4
  00443	6b c8 03	 imul	 ecx, eax, 3
  00446	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0044c	52		 push	 edx
  0044d	51		 push	 ecx
  0044e	0f 57 c0	 xorps	 xmm0, xmm0
  00451	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00456	51		 push	 ecx
  00457	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ac083
  0045f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00464	51		 push	 ecx
  00465	0f 57 c0	 xorps	 xmm0, xmm0
  00468	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046d	51		 push	 ecx
  0046e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3851ec
  00476	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2566 : 
; 2567 : 	//
; 2568 : 	// range markers
; 2569 : 	//
; 2570 : 
; 2571 : 	draw_2d_circle (0.0, 0.0, RADIUS * 0.25, MFD_COLOUR4);

  00480	b8 04 00 00 00	 mov	 eax, 4
  00485	6b c8 03	 imul	 ecx, eax, 3
  00488	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0048e	52		 push	 edx
  0048f	51		 push	 ecx
  00490	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00498	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0049d	51		 push	 ecx
  0049e	0f 57 c0	 xorps	 xmm0, xmm0
  004a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a6	51		 push	 ecx
  004a7	0f 57 c0	 xorps	 xmm0, xmm0
  004aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004af	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2572 : 	draw_2d_circle (0.0, 0.0, RADIUS * 0.50, MFD_COLOUR4);

  004b4	b8 04 00 00 00	 mov	 eax, 4
  004b9	6b c8 03	 imul	 ecx, eax, 3
  004bc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004c2	52		 push	 edx
  004c3	51		 push	 ecx
  004c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  004cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d1	51		 push	 ecx
  004d2	0f 57 c0	 xorps	 xmm0, xmm0
  004d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004da	51		 push	 ecx
  004db	0f 57 c0	 xorps	 xmm0, xmm0
  004de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e3	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2573 : 	draw_2d_circle (0.0, 0.0, RADIUS * 0.75, MFD_COLOUR4);

  004e8	b8 04 00 00 00	 mov	 eax, 4
  004ed	6b c8 03	 imul	 ecx, eax, 3
  004f0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004f6	52		 push	 edx
  004f7	51		 push	 ecx
  004f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00500	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00505	51		 push	 ecx
  00506	0f 57 c0	 xorps	 xmm0, xmm0
  00509	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0050e	51		 push	 ecx
  0050f	0f 57 c0	 xorps	 xmm0, xmm0
  00512	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00517	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2574 : 
; 2575 : 	//
; 2576 : 	// scan limits
; 2577 : 	//
; 2578 : 
; 2579 : 	if (air_radar.scan_arc_size == APACHE_RADAR_SCAN_ARC_SIZE_360)

  0051c	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  00524	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@40c90fdb
  0052b	9f		 lahf
  0052c	f6 c4 44	 test	 ah, 68			; 00000044H
  0052f	7a 39		 jp	 SHORT $LN15@draw_air_r

; 2580 : 	{
; 2581 : 		draw_2d_circle (0.0, 0.0, RADIUS, MFD_COLOUR1);

  00531	b8 04 00 00 00	 mov	 eax, 4
  00536	6b c8 00	 imul	 ecx, eax, 0
  00539	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0053f	52		 push	 edx
  00540	51		 push	 ecx
  00541	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00549	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0054e	51		 push	 ecx
  0054f	0f 57 c0	 xorps	 xmm0, xmm0
  00552	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00557	51		 push	 ecx
  00558	0f 57 c0	 xorps	 xmm0, xmm0
  0055b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00560	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2582 : 	}
; 2583 : 	else

  00565	e9 ab 01 00 00	 jmp	 $LN16@draw_air_r
$LN15@draw_air_r:

; 2584 : 	{
; 2585 : 		draw_2d_circle (0.0, 0.0, RADIUS, MFD_COLOUR4);

  0056a	b8 04 00 00 00	 mov	 eax, 4
  0056f	6b c8 03	 imul	 ecx, eax, 3
  00572	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00578	52		 push	 edx
  00579	51		 push	 ecx
  0057a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00582	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00587	51		 push	 ecx
  00588	0f 57 c0	 xorps	 xmm0, xmm0
  0058b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00590	51		 push	 ecx
  00591	0f 57 c0	 xorps	 xmm0, xmm0
  00594	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00599	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2586 : 
; 2587 : 		set_2d_window_rotation (mfd_env, -air_radar.scan_datum);

  0059e	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  005a6	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  005ad	51		 push	 ecx
  005ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  005b8	50		 push	 eax
  005b9	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2588 : 
; 2589 : 		draw_radar_arc (air_radar.scan_arc_size, RADIUS, MFD_COLOUR1);

  005be	b8 04 00 00 00	 mov	 eax, 4
  005c3	6b c8 00	 imul	 ecx, eax, 0
  005c6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005cc	52		 push	 edx
  005cd	51		 push	 ecx
  005ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  005d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005db	51		 push	 ecx
  005dc	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  005e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e9	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 2590 : 
; 2591 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  005ee	b8 04 00 00 00	 mov	 eax, 4
  005f3	6b c8 00	 imul	 ecx, eax, 0
  005f6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005fc	52		 push	 edx
  005fd	51		 push	 ecx
  005fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00606	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0060b	51		 push	 ecx
  0060c	0f 57 c0	 xorps	 xmm0, xmm0
  0060f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00614	51		 push	 ecx
  00615	0f 57 c0	 xorps	 xmm0, xmm0
  00618	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0061d	51		 push	 ecx
  0061e	0f 57 c0	 xorps	 xmm0, xmm0
  00621	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00626	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2592 : 
; 2593 : 		set_2d_window_rotation (mfd_env, -(air_radar.scan_datum - (air_radar.scan_arc_size * 0.5)));

  0062b	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  00633	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  0063b	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00643	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00647	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  0064e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00652	51		 push	 ecx
  00653	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00658	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0065d	50		 push	 eax
  0065e	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2594 : 
; 2595 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  00663	b8 04 00 00 00	 mov	 eax, 4
  00668	6b c8 00	 imul	 ecx, eax, 0
  0066b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00671	52		 push	 edx
  00672	51		 push	 ecx
  00673	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  0067b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00680	51		 push	 ecx
  00681	0f 57 c0	 xorps	 xmm0, xmm0
  00684	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00689	51		 push	 ecx
  0068a	0f 57 c0	 xorps	 xmm0, xmm0
  0068d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00692	51		 push	 ecx
  00693	0f 57 c0	 xorps	 xmm0, xmm0
  00696	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0069b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2596 : 
; 2597 : 		set_2d_window_rotation (mfd_env, -(air_radar.scan_datum + (air_radar.scan_arc_size * 0.5)));

  006a0	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  006a8	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  006b0	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  006b8	f2 0f 58 c1	 addsd	 xmm0, xmm1
  006bc	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  006c3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006c7	51		 push	 ecx
  006c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  006d2	50		 push	 eax
  006d3	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2598 : 
; 2599 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  006d8	b8 04 00 00 00	 mov	 eax, 4
  006dd	6b c8 00	 imul	 ecx, eax, 0
  006e0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006e6	52		 push	 edx
  006e7	51		 push	 ecx
  006e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  006f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f5	51		 push	 ecx
  006f6	0f 57 c0	 xorps	 xmm0, xmm0
  006f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006fe	51		 push	 ecx
  006ff	0f 57 c0	 xorps	 xmm0, xmm0
  00702	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00707	51		 push	 ecx
  00708	0f 57 c0	 xorps	 xmm0, xmm0
  0070b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00710	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN16@draw_air_r:

; 2600 : 	}
; 2601 : 
; 2602 : 	//
; 2603 : 	// sweep
; 2604 : 	//
; 2605 : 
; 2606 : 	if (air_radar_is_active())

  00715	e8 00 00 00 00	 call	 ?air_radar_is_active@@YGHXZ ; air_radar_is_active
  0071a	85 c0		 test	 eax, eax
  0071c	74 65		 je	 SHORT $LN17@draw_air_r

; 2607 : 	{
; 2608 : 		set_2d_window_rotation (mfd_env, -(air_radar.scan_datum + air_radar.sweep_offset));

  0071e	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  00726	f3 0f 58 05 0c
	00 00 00	 addss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+12
  0072e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00735	51		 push	 ecx
  00736	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0073b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00740	50		 push	 eax
  00741	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2609 : 
; 2610 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  00746	b8 04 00 00 00	 mov	 eax, 4
  0074b	6b c8 00	 imul	 ecx, eax, 0
  0074e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00754	52		 push	 edx
  00755	51		 push	 ecx
  00756	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  0075e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00763	51		 push	 ecx
  00764	0f 57 c0	 xorps	 xmm0, xmm0
  00767	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0076c	51		 push	 ecx
  0076d	0f 57 c0	 xorps	 xmm0, xmm0
  00770	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00775	51		 push	 ecx
  00776	0f 57 c0	 xorps	 xmm0, xmm0
  00779	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN17@draw_air_r:

; 2611 : 	}
; 2612 : 
; 2613 : 	set_2d_window_rotation (mfd_env, 0.0);

  00783	51		 push	 ecx
  00784	0f 57 c0	 xorps	 xmm0, xmm0
  00787	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00791	50		 push	 eax
  00792	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2614 : 
; 2615 : 	////////////////////////////////////////
; 2616 : 	//
; 2617 : 	// draw targets
; 2618 : 	//
; 2619 : 	////////////////////////////////////////
; 2620 : 
; 2621 : 	if (!apache_damage.radar && air_radar_is_active())

  00797	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  0079c	83 e0 01	 and	 eax, 1
  0079f	0f 85 e8 02 00
	00		 jne	 $LN18@draw_air_r
  007a5	e8 00 00 00 00	 call	 ?air_radar_is_active@@YGHXZ ; air_radar_is_active
  007aa	85 c0		 test	 eax, eax
  007ac	0f 84 db 02 00
	00		 je	 $LN18@draw_air_r

; 2622 : 	{
; 2623 : 		source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  007b2	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  007b6	74 0a		 je	 SHORT $LN41@draw_air_r
  007b8	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  007bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  007bd	89 4d 98	 mov	 DWORD PTR tv339[ebp], ecx
  007c0	eb 24		 jmp	 SHORT $LN42@draw_air_r
$LN41@draw_air_r:
  007c2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  007c8	81 c2 ad 00 00
	00		 add	 edx, 173		; 000000adH
  007ce	52		 push	 edx
  007cf	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  007d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  007d9	50		 push	 eax
  007da	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007df	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv339[ebp], 0
$LN42@draw_air_r:
  007e6	b9 01 00 00 00	 mov	 ecx, 1
  007eb	85 c9		 test	 ecx, ecx
  007ed	74 09		 je	 SHORT $LN43@draw_air_r
  007ef	c7 45 94 34 00
	00 00		 mov	 DWORD PTR tv347[ebp], 52 ; 00000034H
  007f6	eb 24		 jmp	 SHORT $LN44@draw_air_r
$LN43@draw_air_r:
  007f8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  007fe	81 c2 ad 00 00
	00		 add	 edx, 173		; 000000adH
  00804	52		 push	 edx
  00805	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0080a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0080f	50		 push	 eax
  00810	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00815	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv347[ebp], 0
$LN44@draw_air_r:
  0081c	6a 34		 push	 52			; 00000034H
  0081e	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  00821	51		 push	 ecx
  00822	69 55 98 bc 02
	00 00		 imul	 edx, DWORD PTR tv339[ebp], 700
  00829	8b 45 94	 mov	 eax, DWORD PTR tv347[ebp]
  0082c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00833	ff d1		 call	 ecx
  00835	d9 5d f8	 fstp	 DWORD PTR _source_heading$[ebp]

; 2624 : 
; 2625 : 		set_2d_window_rotation (mfd_env, source_heading);

  00838	51		 push	 ecx
  00839	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  0083e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00843	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00848	50		 push	 eax
  00849	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2626 : 
; 2627 : 		scale = RADIUS / air_radar.scan_range;

  0084e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A
  00856	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fe999999999999a
  0085e	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00862	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00866	f3 0f 11 45 f4	 movss	 DWORD PTR _scale$[ebp], xmm0

; 2628 : 
; 2629 : 		target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  0086b	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  0086f	74 0a		 je	 SHORT $LN45@draw_air_r
  00871	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  00874	8b 08		 mov	 ecx, DWORD PTR [eax]
  00876	89 4d 98	 mov	 DWORD PTR tv364[ebp], ecx
  00879	eb 24		 jmp	 SHORT $LN46@draw_air_r
$LN45@draw_air_r:
  0087b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00881	81 c2 b3 00 00
	00		 add	 edx, 179		; 000000b3H
  00887	52		 push	 edx
  00888	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0088d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00892	50		 push	 eax
  00893	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00898	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv364[ebp], 0
$LN46@draw_air_r:
  0089f	b9 01 00 00 00	 mov	 ecx, 1
  008a4	85 c9		 test	 ecx, ecx
  008a6	74 09		 je	 SHORT $LN47@draw_air_r
  008a8	c7 45 94 12 00
	00 00		 mov	 DWORD PTR tv372[ebp], 18 ; 00000012H
  008af	eb 24		 jmp	 SHORT $LN48@draw_air_r
$LN47@draw_air_r:
  008b1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  008b7	81 c2 b3 00 00
	00		 add	 edx, 179		; 000000b3H
  008bd	52		 push	 edx
  008be	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  008c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  008c8	50		 push	 eax
  008c9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008ce	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv372[ebp], 0
$LN48@draw_air_r:
  008d5	6a 12		 push	 18			; 00000012H
  008d7	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  008da	51		 push	 ecx
  008db	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv364[ebp], 180
  008e2	8b 45 94	 mov	 eax, DWORD PTR tv372[ebp]
  008e5	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  008ec	ff d1		 call	 ecx
  008ee	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax
$LN2@draw_air_r:

; 2630 : 
; 2631 : 		while (target)

  008f1	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  008f5	0f 84 c7 00 00
	00		 je	 $LN3@draw_air_r

; 2632 : 		{
; 2633 : 			if (get_gunship_target_valid_for_air_radar (target))

  008fb	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  008fe	50		 push	 eax
  008ff	e8 00 00 00 00	 call	 ?get_gunship_target_valid_for_air_radar@@YGHPAUENTITY@@@Z ; get_gunship_target_valid_for_air_radar
  00904	85 c0		 test	 eax, eax
  00906	74 2f		 je	 SHORT $LN20@draw_air_r

; 2634 : 			{
; 2635 : 				if (get_target_matches_air_radar_declutter_criteria (target, source_side))

  00908	8b 45 fc	 mov	 eax, DWORD PTR _source_side$[ebp]
  0090b	50		 push	 eax
  0090c	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  0090f	51		 push	 ecx
  00910	e8 00 00 00 00	 call	 ?get_target_matches_air_radar_declutter_criteria@@YGHPAUENTITY@@W4ENTITY_SIDES@@@Z ; get_target_matches_air_radar_declutter_criteria
  00915	85 c0		 test	 eax, eax
  00917	74 1e		 je	 SHORT $LN20@draw_air_r

; 2636 : 				{
; 2637 : 					draw_radar_target_symbol (target, source_position, scale, FALSE, FALSE, FALSE);

  00919	6a 00		 push	 0
  0091b	6a 00		 push	 0
  0091d	6a 00		 push	 0
  0091f	51		 push	 ecx
  00920	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00925	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0092a	8b 45 e0	 mov	 eax, DWORD PTR _source_position$[ebp]
  0092d	50		 push	 eax
  0092e	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  00931	51		 push	 ecx
  00932	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z ; draw_radar_target_symbol
$LN20@draw_air_r:

; 2638 : 				}
; 2639 : 			}
; 2640 : 
; 2641 : 			target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  00937	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  0093b	74 0a		 je	 SHORT $LN49@draw_air_r
  0093d	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  00940	8b 08		 mov	 ecx, DWORD PTR [eax]
  00942	89 4d 98	 mov	 DWORD PTR tv430[ebp], ecx
  00945	eb 24		 jmp	 SHORT $LN50@draw_air_r
$LN49@draw_air_r:
  00947	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  0094d	81 c2 bf 00 00
	00		 add	 edx, 191		; 000000bfH
  00953	52		 push	 edx
  00954	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00959	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0095e	50		 push	 eax
  0095f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00964	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv430[ebp], 0
$LN50@draw_air_r:
  0096b	b9 01 00 00 00	 mov	 ecx, 1
  00970	85 c9		 test	 ecx, ecx
  00972	74 09		 je	 SHORT $LN51@draw_air_r
  00974	c7 45 94 12 00
	00 00		 mov	 DWORD PTR tv438[ebp], 18 ; 00000012H
  0097b	eb 24		 jmp	 SHORT $LN52@draw_air_r
$LN51@draw_air_r:
  0097d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00983	81 c2 bf 00 00
	00		 add	 edx, 191		; 000000bfH
  00989	52		 push	 edx
  0098a	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0098f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00994	50		 push	 eax
  00995	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0099a	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv438[ebp], 0
$LN52@draw_air_r:
  009a1	6a 12		 push	 18			; 00000012H
  009a3	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  009a6	51		 push	 ecx
  009a7	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv430[ebp], 180
  009ae	8b 45 94	 mov	 eax, DWORD PTR tv438[ebp]
  009b1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  009b8	ff d1		 call	 ecx
  009ba	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax

; 2642 : 		}

  009bd	e9 2f ff ff ff	 jmp	 $LN2@draw_air_r
$LN3@draw_air_r:

; 2643 : 
; 2644 : 		//
; 2645 : 		// draw selected target last
; 2646 : 		//
; 2647 : 
; 2648 : 		if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_AIR_RADAR)

  009c2	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 2 ; target_acquisition_system
  009c9	0f 85 aa 00 00
	00		 jne	 $LN22@draw_air_r

; 2649 : 		{
; 2650 : 			target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  009cf	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  009d3	74 0a		 je	 SHORT $LN53@draw_air_r
  009d5	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  009d8	8b 08		 mov	 ecx, DWORD PTR [eax]
  009da	89 4d 98	 mov	 DWORD PTR tv451[ebp], ecx
  009dd	eb 24		 jmp	 SHORT $LN54@draw_air_r
$LN53@draw_air_r:
  009df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  009e5	81 c2 c8 00 00
	00		 add	 edx, 200		; 000000c8H
  009eb	52		 push	 edx
  009ec	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  009f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  009f6	50		 push	 eax
  009f7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009fc	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv451[ebp], 0
$LN54@draw_air_r:
  00a03	b9 01 00 00 00	 mov	 ecx, 1
  00a08	85 c9		 test	 ecx, ecx
  00a0a	74 09		 je	 SHORT $LN55@draw_air_r
  00a0c	c7 45 94 26 00
	00 00		 mov	 DWORD PTR tv459[ebp], 38 ; 00000026H
  00a13	eb 24		 jmp	 SHORT $LN56@draw_air_r
$LN55@draw_air_r:
  00a15	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00a1b	81 c2 c8 00 00
	00		 add	 edx, 200		; 000000c8H
  00a21	52		 push	 edx
  00a22	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a27	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00a2c	50		 push	 eax
  00a2d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a32	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv459[ebp], 0
$LN56@draw_air_r:
  00a39	6a 26		 push	 38			; 00000026H
  00a3b	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  00a3e	51		 push	 ecx
  00a3f	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv451[ebp], 180
  00a46	8b 45 94	 mov	 eax, DWORD PTR tv459[ebp]
  00a49	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00a50	ff d1		 call	 ecx
  00a52	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax

; 2651 : 
; 2652 : 			if (target)

  00a55	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  00a59	74 1e		 je	 SHORT $LN22@draw_air_r

; 2653 : 			{
; 2654 : 				draw_radar_target_symbol (target, source_position, scale, TRUE, FALSE, FALSE);

  00a5b	6a 00		 push	 0
  00a5d	6a 00		 push	 0
  00a5f	6a 01		 push	 1
  00a61	51		 push	 ecx
  00a62	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00a67	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a6c	8b 45 e0	 mov	 eax, DWORD PTR _source_position$[ebp]
  00a6f	50		 push	 eax
  00a70	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  00a73	51		 push	 ecx
  00a74	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z ; draw_radar_target_symbol
$LN22@draw_air_r:

; 2655 : 			}
; 2656 : 		}
; 2657 : 
; 2658 : 		set_2d_window_rotation (mfd_env, 0.0);

  00a79	51		 push	 ecx
  00a7a	0f 57 c0	 xorps	 xmm0, xmm0
  00a7d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a82	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a87	50		 push	 eax
  00a88	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN18@draw_air_r:

; 2659 : 	}
; 2660 : 
; 2661 : 	////////////////////////////////////////
; 2662 : 	//
; 2663 : 	// damaged
; 2664 : 	//
; 2665 : 	////////////////////////////////////////
; 2666 : 
; 2667 : 	if (apache_damage.radar)

  00a8d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  00a92	83 e0 01	 and	 eax, 1
  00a95	0f 84 98 00 00
	00		 je	 $LN23@draw_air_r

; 2668 : 	{
; 2669 : 		draw_2d_line (-0.5, -0.5,  0.5, 0.5, MFD_COLOUR1);

  00a9b	b8 04 00 00 00	 mov	 eax, 4
  00aa0	6b c8 00	 imul	 ecx, eax, 0
  00aa3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00aa9	52		 push	 edx
  00aaa	51		 push	 ecx
  00aab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00ab3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ab8	51		 push	 ecx
  00ab9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00ac1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac6	51		 push	 ecx
  00ac7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00acf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ad4	51		 push	 ecx
  00ad5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00add	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ae2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2670 : 		draw_2d_line ( 0.5, -0.5, -0.5, 0.5, MFD_COLOUR1);

  00ae7	b8 04 00 00 00	 mov	 eax, 4
  00aec	6b c8 00	 imul	 ecx, eax, 0
  00aef	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00af5	52		 push	 edx
  00af6	51		 push	 ecx
  00af7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00aff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b04	51		 push	 ecx
  00b05	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00b0d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b12	51		 push	 ecx
  00b13	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00b1b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b20	51		 push	 ecx
  00b21	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00b29	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b2e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN23@draw_air_r:

; 2671 : 	}
; 2672 : }

  00b33	5f		 pop	 edi
  00b34	5e		 pop	 esi
  00b35	5b		 pop	 ebx
  00b36	8b e5		 mov	 esp, ebp
  00b38	5d		 pop	 ebp
  00b39	c3		 ret	 0
?draw_air_radar_mfd@@YGXXZ ENDP				; draw_air_radar_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_ground_radar_mfd@@YGXXZ
_TEXT	SEGMENT
tv706 = -112						; size = 4
tv524 = -108						; size = 4
tv490 = -108						; size = 4
tv469 = -108						; size = 4
tv349 = -108						; size = 4
tv327 = -108						; size = 4
tv241 = -108						; size = 4
tv217 = -108						; size = 4
tv198 = -108						; size = 4
tv153 = -108						; size = 4
tv130 = -108						; size = 4
tv78 = -108						; size = 4
tv516 = -104						; size = 4
tv482 = -104						; size = 4
tv461 = -104						; size = 4
tv341 = -104						; size = 4
tv287 = -104						; size = 4
tv265 = -104						; size = 4
tv233 = -104						; size = 4
tv210 = -104						; size = 4
tv190 = -104						; size = 4
tv145 = -104						; size = 4
tv90 = -104						; size = 4
tv70 = -104						; size = 4
_source_position$ = -36					; size = 4
_selected_target$ = -32					; size = 4
_target$ = -28						; size = 4
_source$ = -24						; size = 4
_scale$ = -20						; size = 4
_source_heading$ = -16					; size = 4
_v$ = -12						; size = 4
_u$ = -8						; size = 4
_y_adjust$ = -4						; size = 4
?draw_ground_radar_mfd@@YGXXZ PROC			; draw_ground_radar_mfd, COMDAT

; 2147 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2148 : 	float
; 2149 : 		y_adjust,
; 2150 : 		u,
; 2151 : 		v,
; 2152 : 		source_heading,
; 2153 : 		scale;
; 2154 : 
; 2155 : 	entity
; 2156 : 		*source,
; 2157 : 		*target,
; 2158 : 		*selected_target;
; 2159 : 
; 2160 : 	vec3d
; 2161 : 		*source_position;
; 2162 : 
; 2163 : 	source = get_gunship_entity ();

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0000e	89 45 e8	 mov	 DWORD PTR _source$[ebp], eax

; 2164 : 
; 2165 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  00011	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  00015	74 0a		 je	 SHORT $LN37@draw_groun
  00017	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 4d 98	 mov	 DWORD PTR tv70[ebp], ecx
  0001f	eb 21		 jmp	 SHORT $LN38@draw_groun
$LN37@draw_groun:
  00021	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00027	83 c2 12	 add	 edx, 18			; 00000012H
  0002a	52		 push	 edx
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003b	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN38@draw_groun:
  00042	b9 01 00 00 00	 mov	 ecx, 1
  00047	85 c9		 test	 ecx, ecx
  00049	74 09		 je	 SHORT $LN39@draw_groun
  0004b	c7 45 94 08 00
	00 00		 mov	 DWORD PTR tv78[ebp], 8
  00052	eb 21		 jmp	 SHORT $LN40@draw_groun
$LN39@draw_groun:
  00054	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  0005a	83 c2 12	 add	 edx, 18			; 00000012H
  0005d	52		 push	 edx
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006e	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN40@draw_groun:
  00075	6a 08		 push	 8
  00077	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  0007a	51		 push	 ecx
  0007b	6b 55 98 60	 imul	 edx, DWORD PTR tv70[ebp], 96
  0007f	8b 45 94	 mov	 eax, DWORD PTR tv78[ebp]
  00082	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00089	ff d1		 call	 ecx
  0008b	89 45 dc	 mov	 DWORD PTR _source_position$[ebp], eax

; 2166 : 
; 2167 : 	source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  0008e	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  00092	74 0a		 je	 SHORT $LN41@draw_groun
  00094	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  00097	8b 08		 mov	 ecx, DWORD PTR [eax]
  00099	89 4d 98	 mov	 DWORD PTR tv90[ebp], ecx
  0009c	eb 21		 jmp	 SHORT $LN42@draw_groun
$LN41@draw_groun:
  0009e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  000a4	83 c2 14	 add	 edx, 20			; 00000014H
  000a7	52		 push	 edx
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b8	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN42@draw_groun:
  000bf	b9 01 00 00 00	 mov	 ecx, 1
  000c4	85 c9		 test	 ecx, ecx
  000c6	74 09		 je	 SHORT $LN43@draw_groun
  000c8	c7 45 94 34 00
	00 00		 mov	 DWORD PTR tv130[ebp], 52 ; 00000034H
  000cf	eb 21		 jmp	 SHORT $LN44@draw_groun
$LN43@draw_groun:
  000d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  000d7	83 c2 14	 add	 edx, 20			; 00000014H
  000da	52		 push	 edx
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000eb	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN44@draw_groun:
  000f2	6a 34		 push	 52			; 00000034H
  000f4	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  000f7	51		 push	 ecx
  000f8	69 55 98 bc 02
	00 00		 imul	 edx, DWORD PTR tv90[ebp], 700
  000ff	8b 45 94	 mov	 eax, DWORD PTR tv130[ebp]
  00102	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00109	ff d1		 call	 ecx
  0010b	d9 5d f0	 fstp	 DWORD PTR _source_heading$[ebp]

; 2168 : 
; 2169 : 	scale = RADIUS / ground_radar.scan_range;

  0010e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A
  00116	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff5d3d193333333
  0011e	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00122	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00126	f3 0f 11 45 ec	 movss	 DWORD PTR _scale$[ebp], xmm0

; 2170 : 
; 2171 : 	selected_target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  0012b	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  0012f	74 0a		 je	 SHORT $LN45@draw_groun
  00131	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  00134	8b 08		 mov	 ecx, DWORD PTR [eax]
  00136	89 4d 98	 mov	 DWORD PTR tv145[ebp], ecx
  00139	eb 21		 jmp	 SHORT $LN46@draw_groun
$LN45@draw_groun:
  0013b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00141	83 c2 18	 add	 edx, 24			; 00000018H
  00144	52		 push	 edx
  00145	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0014a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0014f	50		 push	 eax
  00150	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00155	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv145[ebp], 0
$LN46@draw_groun:
  0015c	b9 01 00 00 00	 mov	 ecx, 1
  00161	85 c9		 test	 ecx, ecx
  00163	74 09		 je	 SHORT $LN47@draw_groun
  00165	c7 45 94 26 00
	00 00		 mov	 DWORD PTR tv153[ebp], 38 ; 00000026H
  0016c	eb 21		 jmp	 SHORT $LN48@draw_groun
$LN47@draw_groun:
  0016e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00174	83 c2 18	 add	 edx, 24			; 00000018H
  00177	52		 push	 edx
  00178	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0017d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00182	50		 push	 eax
  00183	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00188	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv153[ebp], 0
$LN48@draw_groun:
  0018f	6a 26		 push	 38			; 00000026H
  00191	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  00194	51		 push	 ecx
  00195	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv145[ebp], 180
  0019c	8b 45 94	 mov	 eax, DWORD PTR tv153[ebp]
  0019f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  001a6	ff d1		 call	 ecx
  001a8	89 45 e0	 mov	 DWORD PTR _selected_target$[ebp], eax

; 2172 : 
; 2173 : 	if (!selected_target)

  001ab	83 7d e0 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  001af	75 0a		 jne	 SHORT $LN8@draw_groun

; 2174 : 		radar_zoomed = FALSE;

  001b1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?radar_zoomed@@3HA, 0
$LN8@draw_groun:

; 2175 : 
; 2176 : 	if (radar_zoomed)

  001bb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?radar_zoomed@@3HA, 0
  001c2	74 21		 je	 SHORT $LN9@draw_groun

; 2177 : 		get_2d_float_screen_coordinates (0.0, 0.0, &u, &v);

  001c4	8d 45 f4	 lea	 eax, DWORD PTR _v$[ebp]
  001c7	50		 push	 eax
  001c8	8d 4d f8	 lea	 ecx, DWORD PTR _u$[ebp]
  001cb	51		 push	 ecx
  001cc	51		 push	 ecx
  001cd	0f 57 c0	 xorps	 xmm0, xmm0
  001d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d5	51		 push	 ecx
  001d6	0f 57 c0	 xorps	 xmm0, xmm0
  001d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001de	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 2178 : 	else

  001e3	eb 53		 jmp	 SHORT $LN12@draw_groun
$LN9@draw_groun:

; 2179 : 		if (draw_large_mfd)

  001e5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  001ec	74 26		 je	 SHORT $LN11@draw_groun

; 2180 : 			get_2d_float_screen_coordinates (0.0, -0.65, &u, &v);

  001ee	8d 45 f4	 lea	 eax, DWORD PTR _v$[ebp]
  001f1	50		 push	 eax
  001f2	8d 4d f8	 lea	 ecx, DWORD PTR _u$[ebp]
  001f5	51		 push	 ecx
  001f6	51		 push	 ecx
  001f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  001ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00204	51		 push	 ecx
  00205	0f 57 c0	 xorps	 xmm0, xmm0
  00208	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020d	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 2181 : 		else

  00212	eb 24		 jmp	 SHORT $LN12@draw_groun
$LN11@draw_groun:

; 2182 : 			get_2d_float_screen_coordinates (0.0, -0.7, &u, &v);

  00214	8d 45 f4	 lea	 eax, DWORD PTR _v$[ebp]
  00217	50		 push	 eax
  00218	8d 4d f8	 lea	 ecx, DWORD PTR _u$[ebp]
  0021b	51		 push	 ecx
  0021c	51		 push	 ecx
  0021d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00225	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022a	51		 push	 ecx
  0022b	0f 57 c0	 xorps	 xmm0, xmm0
  0022e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00233	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates
$LN12@draw_groun:

; 2183 : 
; 2184 : 	u -= mfd_viewport_x_min;

  00238	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _u$[ebp]
  0023d	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00245	f3 0f 11 45 f8	 movss	 DWORD PTR _u$[ebp], xmm0

; 2185 : 	v -= mfd_viewport_y_min;

  0024a	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v$[ebp]
  0024f	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00257	f3 0f 11 45 f4	 movss	 DWORD PTR _v$[ebp], xmm0

; 2186 : 
; 2187 : 	////////////////////////////////////////
; 2188 : 	//
; 2189 : 	// draw radar clutter
; 2190 : 	//
; 2191 : 	////////////////////////////////////////
; 2192 : 
; 2193 : 	if (!apache_damage.radar)

  0025c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  00261	83 e0 01	 and	 eax, 1
  00264	0f 85 38 02 00
	00		 jne	 $LN13@draw_groun

; 2194 : 	{
; 2195 : 		set_hatched_pattern (radar_clutter_hatch_pattern);

  0026a	68 00 00 00 00	 push	 OFFSET ?radar_clutter_hatch_pattern@@3PAIA ; radar_clutter_hatch_pattern
  0026f	e8 00 00 00 00	 call	 ?set_hatched_pattern@@YGXPAI@Z ; set_hatched_pattern

; 2196 : 
; 2197 : 		set_2d_viewport_origin (mfd_env, u, v);

  00274	51		 push	 ecx
  00275	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v$[ebp]
  0027a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027f	51		 push	 ecx
  00280	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _u$[ebp]
  00285	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0028f	50		 push	 eax
  00290	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 2198 : 
; 2199 : 		set_2d_window_rotation (mfd_env, source_heading);

  00295	51		 push	 ecx
  00296	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  0029b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  002a5	50		 push	 eax
  002a6	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2200 : 
; 2201 : 		target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  002ab	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  002af	74 0a		 je	 SHORT $LN49@draw_groun
  002b1	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  002b4	8b 08		 mov	 ecx, DWORD PTR [eax]
  002b6	89 4d 98	 mov	 DWORD PTR tv190[ebp], ecx
  002b9	eb 21		 jmp	 SHORT $LN50@draw_groun
$LN49@draw_groun:
  002bb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  002c1	83 c2 36	 add	 edx, 54			; 00000036H
  002c4	52		 push	 edx
  002c5	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  002ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002cf	50		 push	 eax
  002d0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002d5	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv190[ebp], 0
$LN50@draw_groun:
  002dc	b9 01 00 00 00	 mov	 ecx, 1
  002e1	85 c9		 test	 ecx, ecx
  002e3	74 09		 je	 SHORT $LN51@draw_groun
  002e5	c7 45 94 12 00
	00 00		 mov	 DWORD PTR tv198[ebp], 18 ; 00000012H
  002ec	eb 21		 jmp	 SHORT $LN52@draw_groun
$LN51@draw_groun:
  002ee	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  002f4	83 c2 36	 add	 edx, 54			; 00000036H
  002f7	52		 push	 edx
  002f8	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  002fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00302	50		 push	 eax
  00303	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00308	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv198[ebp], 0
$LN52@draw_groun:
  0030f	6a 12		 push	 18			; 00000012H
  00311	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  00314	51		 push	 ecx
  00315	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv190[ebp], 180
  0031c	8b 45 94	 mov	 eax, DWORD PTR tv198[ebp]
  0031f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00326	ff d1		 call	 ecx
  00328	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax
$LN2@draw_groun:

; 2202 : 
; 2203 : 		while (target)

  0032b	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  0032f	0f 84 16 01 00
	00		 je	 $LN3@draw_groun

; 2204 : 		{
; 2205 : 			if (get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  00335	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  00339	74 0a		 je	 SHORT $LN53@draw_groun
  0033b	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  0033e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00340	89 4d 98	 mov	 DWORD PTR tv210[ebp], ecx
  00343	eb 1d		 jmp	 SHORT $LN54@draw_groun
$LN53@draw_groun:
  00345	68 9d 08 00 00	 push	 2205			; 0000089dH
  0034a	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0034f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00355	52		 push	 edx
  00356	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0035b	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv210[ebp], 0
$LN54@draw_groun:
  00362	b8 01 00 00 00	 mov	 eax, 1
  00367	85 c0		 test	 eax, eax
  00369	74 09		 je	 SHORT $LN55@draw_groun
  0036b	c7 45 94 42 00
	00 00		 mov	 DWORD PTR tv217[ebp], 66 ; 00000042H
  00372	eb 1d		 jmp	 SHORT $LN56@draw_groun
$LN55@draw_groun:
  00374	68 9d 08 00 00	 push	 2205			; 0000089dH
  00379	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0037e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00384	51		 push	 ecx
  00385	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0038a	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv217[ebp], 0
$LN56@draw_groun:
  00391	6a 42		 push	 66			; 00000042H
  00393	8b 55 e4	 mov	 edx, DWORD PTR _target$[ebp]
  00396	52		 push	 edx
  00397	69 45 98 5c 04
	00 00		 imul	 eax, DWORD PTR tv210[ebp], 1116
  0039e	8b 4d 94	 mov	 ecx, DWORD PTR tv217[ebp]
  003a1	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  003a8	ff d2		 call	 edx
  003aa	85 c0		 test	 eax, eax
  003ac	74 18		 je	 SHORT $LN14@draw_groun

; 2206 : 			{
; 2207 : 				draw_ground_radar_clutter (target, source_position, scale);

  003ae	51		 push	 ecx
  003af	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _scale$[ebp]
  003b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b9	8b 45 dc	 mov	 eax, DWORD PTR _source_position$[ebp]
  003bc	50		 push	 eax
  003bd	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  003c0	51		 push	 ecx
  003c1	e8 00 00 00 00	 call	 ?draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z ; draw_ground_radar_clutter
$LN14@draw_groun:

; 2208 : 			}
; 2209 : 
; 2210 : 			target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  003c6	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  003ca	74 0a		 je	 SHORT $LN57@draw_groun
  003cc	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  003cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  003d1	89 4d 98	 mov	 DWORD PTR tv233[ebp], ecx
  003d4	eb 21		 jmp	 SHORT $LN58@draw_groun
$LN57@draw_groun:
  003d6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  003dc	83 c2 3f	 add	 edx, 63			; 0000003fH
  003df	52		 push	 edx
  003e0	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  003e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003ea	50		 push	 eax
  003eb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003f0	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv233[ebp], 0
$LN58@draw_groun:
  003f7	b9 01 00 00 00	 mov	 ecx, 1
  003fc	85 c9		 test	 ecx, ecx
  003fe	74 09		 je	 SHORT $LN59@draw_groun
  00400	c7 45 94 12 00
	00 00		 mov	 DWORD PTR tv241[ebp], 18 ; 00000012H
  00407	eb 21		 jmp	 SHORT $LN60@draw_groun
$LN59@draw_groun:
  00409	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  0040f	83 c2 3f	 add	 edx, 63			; 0000003fH
  00412	52		 push	 edx
  00413	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00418	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0041d	50		 push	 eax
  0041e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00423	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv241[ebp], 0
$LN60@draw_groun:
  0042a	6a 12		 push	 18			; 00000012H
  0042c	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  0042f	51		 push	 ecx
  00430	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv233[ebp], 180
  00437	8b 45 94	 mov	 eax, DWORD PTR tv241[ebp]
  0043a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00441	ff d1		 call	 ecx
  00443	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax

; 2211 : 		}

  00446	e9 e0 fe ff ff	 jmp	 $LN2@draw_groun
$LN3@draw_groun:

; 2212 : 
; 2213 : 		set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  0044b	51		 push	 ecx
  0044c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00454	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00459	51		 push	 ecx
  0045a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00462	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00467	51		 push	 ecx
  00468	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00470	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00475	51		 push	 ecx
  00476	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0047e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00483	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00488	50		 push	 eax
  00489	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 2214 : 
; 2215 : 		set_2d_window_rotation (mfd_env, 0.0);

  0048e	51		 push	 ecx
  0048f	0f 57 c0	 xorps	 xmm0, xmm0
  00492	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00497	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0049c	50		 push	 eax
  0049d	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN13@draw_groun:

; 2216 : 	}
; 2217 : 
; 2218 : 	////////////////////////////////////////
; 2219 : 	//
; 2220 : 	// text
; 2221 : 	//
; 2222 : 	////////////////////////////////////////
; 2223 : 
; 2224 : 	set_mono_font_colour (MFD_COLOUR1);

  004a2	b8 04 00 00 00	 mov	 eax, 4
  004a7	6b c8 00	 imul	 ecx, eax, 0
  004aa	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004b0	52		 push	 edx
  004b1	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 2225 : 
; 2226 : 	if (draw_large_mfd)

  004b6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  004bd	74 09		 je	 SHORT $LN15@draw_groun

; 2227 : 	{
; 2228 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  004bf	6a 05		 push	 5
  004c1	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 2229 : 	}
; 2230 : 	else

  004c6	eb 07		 jmp	 SHORT $LN16@draw_groun
$LN15@draw_groun:

; 2231 : 	{
; 2232 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  004c8	6a 01		 push	 1
  004ca	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN16@draw_groun:

; 2233 : 	}
; 2234 : 
; 2235 : 	//
; 2236 : 	// declutter status
; 2237 : 	//
; 2238 : 
; 2239 : 	if (draw_large_mfd)

  004cf	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  004d6	74 0f		 je	 SHORT $LN17@draw_groun

; 2240 : 	{
; 2241 : 		y_adjust = 5.0;

  004d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  004e0	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2242 : 	}
; 2243 : 	else

  004e5	eb 0d		 jmp	 SHORT $LN18@draw_groun
$LN17@draw_groun:

; 2244 : 	{
; 2245 : 		y_adjust = 2.0;

  004e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  004ef	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN18@draw_groun:

; 2246 : 	}
; 2247 : 
; 2248 : 	set_2d_mono_font_position (-0.9, 1.0);

  004f4	51		 push	 ecx
  004f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00502	51		 push	 ecx
  00503	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  0050b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00510	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2249 : 
; 2250 : 	set_mono_font_rel_position (1.0, y_adjust);

  00515	51		 push	 ecx
  00516	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0051b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00520	51		 push	 ecx
  00521	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00529	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0052e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2251 : 
; 2252 : 	switch (ground_radar.target_priority_type)

  00533	a1 2c 00 00 00	 mov	 eax, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+44
  00538	89 45 98	 mov	 DWORD PTR tv265[ebp], eax
  0053b	83 7d 98 04	 cmp	 DWORD PTR tv265[ebp], 4
  0053f	77 59		 ja	 SHORT $LN4@draw_groun
  00541	8b 4d 98	 mov	 ecx, DWORD PTR tv265[ebp]
  00544	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN81@draw_groun[ecx*4]
$LN19@draw_groun:

; 2253 : 	{
; 2254 : 		case TARGET_PRIORITY_UNKNOWN:
; 2255 : 		{
; 2256 : 			print_mono_font_string ("ALL");

  0054b	68 00 00 00 00	 push	 OFFSET ??_C@_03NIFPGLBG@ALL@
  00550	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2257 : 
; 2258 : 			break;

  00555	eb 43		 jmp	 SHORT $LN4@draw_groun
$LN20@draw_groun:

; 2259 : 		}
; 2260 : 		case TARGET_PRIORITY_LOW:
; 2261 : 		{
; 2262 : 			print_mono_font_string ("LOW");

  00557	68 00 00 00 00	 push	 OFFSET ??_C@_03IBEFMGAI@LOW@
  0055c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2263 : 
; 2264 : 			break;

  00561	eb 37		 jmp	 SHORT $LN4@draw_groun
$LN21@draw_groun:

; 2265 : 		}
; 2266 : 		case TARGET_PRIORITY_MEDIUM:
; 2267 : 		{
; 2268 : 			if (draw_large_mfd)

  00563	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0056a	74 0c		 je	 SHORT $LN22@draw_groun

; 2269 : 			{
; 2270 : 				print_mono_font_string ("MEDIUM");

  0056c	68 00 00 00 00	 push	 OFFSET ??_C@_06HMBFJLMK@MEDIUM@
  00571	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2271 : 			}
; 2272 : 			else

  00576	eb 0a		 jmp	 SHORT $LN23@draw_groun
$LN22@draw_groun:

; 2273 : 			{
; 2274 : 				print_mono_font_string ("MED");

  00578	68 00 00 00 00	 push	 OFFSET ??_C@_03FFIBGFCJ@MED@
  0057d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN23@draw_groun:

; 2275 : 			}
; 2276 : 
; 2277 : 			break;

  00582	eb 16		 jmp	 SHORT $LN4@draw_groun
$LN24@draw_groun:

; 2278 : 		}
; 2279 : 		case TARGET_PRIORITY_HIGH:
; 2280 : 		{
; 2281 : 			print_mono_font_string ("HIGH");

  00584	68 00 00 00 00	 push	 OFFSET ??_C@_04PKDHFCJF@HIGH@
  00589	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2282 : 
; 2283 : 			break;

  0058e	eb 0a		 jmp	 SHORT $LN4@draw_groun
$LN25@draw_groun:

; 2284 : 		}
; 2285 : 		// Jabberwock 031107 Designated targets
; 2286 : 		case TARGET_PRIORITY_DESIGNATED:
; 2287 : 		{
; 2288 : 			print_mono_font_string ("MARK");

  00590	68 00 00 00 00	 push	 OFFSET ??_C@_04MGKDMHFC@MARK@
  00595	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN4@draw_groun:

; 2289 : 
; 2290 : 			break;
; 2291 : 		}
; 2292 : 		// Jabberwock 031107 ends
; 2293 : 	}
; 2294 : 
; 2295 : 	if (ground_radar.sweep_mode == RADAR_SWEEP_MODE_SINGLE_ACTIVE || ground_radar.sweep_mode == RADAR_SWEEP_MODE_SINGLE_INACTIVE)

  0059a	83 3d 28 00 00
	00 02		 cmp	 DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+40, 2
  005a1	74 09		 je	 SHORT $LN27@draw_groun
  005a3	83 3d 28 00 00
	00 01		 cmp	 DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+40, 1
  005aa	75 2b		 jne	 SHORT $LN26@draw_groun
$LN27@draw_groun:

; 2296 : 	{
; 2297 : 		set_2d_mono_font_position (-0.9, 0.8);

  005ac	51		 push	 ecx
  005ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  005b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ba	51		 push	 ecx
  005bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  005c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c8	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2298 : 		print_mono_font_string ("SGL");

  005cd	68 00 00 00 00	 push	 OFFSET ??_C@_03COBKBLOD@SGL@
  005d2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN26@draw_groun:

; 2299 : 	}
; 2300 : 
; 2301 : 	//
; 2302 : 	// scan range
; 2303 : 	//
; 2304 : 
; 2305 : 	display_radar_scan_range (ground_radar.scan_range, TRUE);

  005d7	6a 01		 push	 1
  005d9	51		 push	 ecx
  005da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A
  005e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e7	e8 00 00 00 00	 call	 ?display_radar_scan_range@@YGXMH@Z ; display_radar_scan_range

; 2306 : 
; 2307 : 	////////////////////////////////////////
; 2308 : 	//
; 2309 : 	// draw heading scale
; 2310 : 	//
; 2311 : 	////////////////////////////////////////
; 2312 : 
; 2313 : 	draw_heading_scale (get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_HEADING));

  005ec	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  005f3	74 0c		 je	 SHORT $LN61@draw_groun
  005f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  005fa	8b 08		 mov	 ecx, DWORD PTR [eax]
  005fc	89 4d 98	 mov	 DWORD PTR tv287[ebp], ecx
  005ff	eb 24		 jmp	 SHORT $LN62@draw_groun
$LN61@draw_groun:
  00601	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00607	81 c2 a6 00 00
	00		 add	 edx, 166		; 000000a6H
  0060d	52		 push	 edx
  0060e	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00613	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00618	50		 push	 eax
  00619	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0061e	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv287[ebp], 0
$LN62@draw_groun:
  00625	b9 01 00 00 00	 mov	 ecx, 1
  0062a	85 c9		 test	 ecx, ecx
  0062c	74 09		 je	 SHORT $LN63@draw_groun
  0062e	c7 45 94 34 00
	00 00		 mov	 DWORD PTR tv327[ebp], 52 ; 00000034H
  00635	eb 24		 jmp	 SHORT $LN64@draw_groun
$LN63@draw_groun:
  00637	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  0063d	81 c2 a6 00 00
	00		 add	 edx, 166		; 000000a6H
  00643	52		 push	 edx
  00644	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00649	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0064e	50		 push	 eax
  0064f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00654	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv327[ebp], 0
$LN64@draw_groun:
  0065b	6a 34		 push	 52			; 00000034H
  0065d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00663	51		 push	 ecx
  00664	69 55 98 bc 02
	00 00		 imul	 edx, DWORD PTR tv287[ebp], 700
  0066b	8b 45 94	 mov	 eax, DWORD PTR tv327[ebp]
  0066e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00675	ff d1		 call	 ecx
  00677	d9 5d 90	 fstp	 DWORD PTR tv706[ebp]
  0067a	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR tv706[ebp]
  0067f	51		 push	 ecx
  00680	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00685	e8 00 00 00 00	 call	 ?draw_heading_scale@@YGXM@Z ; draw_heading_scale

; 2314 : 
; 2315 : 	////////////////////////////////////////
; 2316 : 	//
; 2317 : 	// draw field of regard and view boxes
; 2318 : 	//
; 2319 : 	////////////////////////////////////////
; 2320 : 
; 2321 : 	target = get_local_entity_parent (get_gunship_entity (), LIST_TYPE_TARGET);

  0068a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00691	74 0c		 je	 SHORT $LN65@draw_groun
  00693	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00698	8b 08		 mov	 ecx, DWORD PTR [eax]
  0069a	89 4d 98	 mov	 DWORD PTR tv341[ebp], ecx
  0069d	eb 24		 jmp	 SHORT $LN66@draw_groun
$LN65@draw_groun:
  0069f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  006a5	81 c2 ae 00 00
	00		 add	 edx, 174		; 000000aeH
  006ab	52		 push	 edx
  006ac	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  006b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  006b6	50		 push	 eax
  006b7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006bc	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv341[ebp], 0
$LN66@draw_groun:
  006c3	b9 01 00 00 00	 mov	 ecx, 1
  006c8	85 c9		 test	 ecx, ecx
  006ca	74 09		 je	 SHORT $LN67@draw_groun
  006cc	c7 45 94 26 00
	00 00		 mov	 DWORD PTR tv349[ebp], 38 ; 00000026H
  006d3	eb 24		 jmp	 SHORT $LN68@draw_groun
$LN67@draw_groun:
  006d5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  006db	81 c2 ae 00 00
	00		 add	 edx, 174		; 000000aeH
  006e1	52		 push	 edx
  006e2	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  006e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  006ec	50		 push	 eax
  006ed	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006f2	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv349[ebp], 0
$LN68@draw_groun:
  006f9	6a 26		 push	 38			; 00000026H
  006fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00701	51		 push	 ecx
  00702	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv341[ebp], 180
  00709	8b 45 94	 mov	 eax, DWORD PTR tv349[ebp]
  0070c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00713	ff d1		 call	 ecx
  00715	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax

; 2322 : 	draw_high_action_display(target, 1);

  00718	6a 01		 push	 1
  0071a	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  0071d	50		 push	 eax
  0071e	e8 00 00 00 00	 call	 ?draw_high_action_display@@YGXPAUENTITY@@H@Z ; draw_high_action_display

; 2323 : 
; 2324 : 	////////////////////////////////////////
; 2325 : 	//
; 2326 : 	// line graphics
; 2327 : 	//
; 2328 : 	////////////////////////////////////////
; 2329 : 
; 2330 : 	set_2d_viewport_origin (mfd_env, u, v);

  00723	51		 push	 ecx
  00724	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v$[ebp]
  00729	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0072e	51		 push	 ecx
  0072f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _u$[ebp]
  00734	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00739	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0073e	50		 push	 eax
  0073f	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 2331 : 
; 2332 : 	//
; 2333 : 	// max scan limits
; 2334 : 	//
; 2335 : 
; 2336 : 	if (!radar_zoomed)

  00744	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?radar_zoomed@@3HA, 0
  0074b	0f 85 00 03 00
	00		 jne	 $LN28@draw_groun

; 2337 : 	{
; 2338 : 		draw_2d_line (0.0, 0.0, -0.965, 0.965, MFD_COLOUR4);

  00751	b8 04 00 00 00	 mov	 eax, 4
  00756	6b c8 03	 imul	 ecx, eax, 3
  00759	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0075f	52		 push	 edx
  00760	51		 push	 ecx
  00761	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f770a3d
  00769	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0076e	51		 push	 ecx
  0076f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf770a3d
  00777	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077c	51		 push	 ecx
  0077d	0f 57 c0	 xorps	 xmm0, xmm0
  00780	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00785	51		 push	 ecx
  00786	0f 57 c0	 xorps	 xmm0, xmm0
  00789	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2339 : 
; 2340 : 		draw_2d_line (0.0, 0.0, 0.965, 0.965, MFD_COLOUR4);

  00793	b8 04 00 00 00	 mov	 eax, 4
  00798	6b c8 03	 imul	 ecx, eax, 3
  0079b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007a1	52		 push	 edx
  007a2	51		 push	 ecx
  007a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f770a3d
  007ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b0	51		 push	 ecx
  007b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f770a3d
  007b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007be	51		 push	 ecx
  007bf	0f 57 c0	 xorps	 xmm0, xmm0
  007c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c7	51		 push	 ecx
  007c8	0f 57 c0	 xorps	 xmm0, xmm0
  007cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2341 : 
; 2342 : 		draw_radar_arc (APACHE_RADAR_SCAN_ARC_SIZE_90, RADIUS, MFD_COLOUR4);

  007d5	b8 04 00 00 00	 mov	 eax, 4
  007da	6b c8 03	 imul	 ecx, eax, 3
  007dd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007e3	52		 push	 edx
  007e4	51		 push	 ecx
  007e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fae9e8d
  007ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f2	51		 push	 ecx
  007f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  007fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00800	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 2343 : 
; 2344 : 		//
; 2345 : 		// scan limits and range markers
; 2346 : 		//
; 2347 : 
; 2348 : 		set_2d_window_rotation (mfd_env, -ground_radar.scan_datum);

  00805	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  0080d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00814	51		 push	 ecx
  00815	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0081f	50		 push	 eax
  00820	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2349 : 
; 2350 : 		draw_radar_arc (ground_radar.scan_arc_size, RADIUS, MFD_COLOUR1);

  00825	b8 04 00 00 00	 mov	 eax, 4
  0082a	6b c8 00	 imul	 ecx, eax, 0
  0082d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00833	52		 push	 edx
  00834	51		 push	 ecx
  00835	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fae9e8d
  0083d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00842	51		 push	 ecx
  00843	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  0084b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00850	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 2351 : 
; 2352 : 		draw_radar_arc (ground_radar.scan_arc_size, RADIUS * 0.25, MFD_COLOUR4);

  00855	b8 04 00 00 00	 mov	 eax, 4
  0085a	6b c8 03	 imul	 ecx, eax, 3
  0085d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00863	52		 push	 edx
  00864	51		 push	 ecx
  00865	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eae9e8d
  0086d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00872	51		 push	 ecx
  00873	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  0087b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00880	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 2353 : 		draw_radar_arc (ground_radar.scan_arc_size, RADIUS * 0.50, MFD_COLOUR4);

  00885	b8 04 00 00 00	 mov	 eax, 4
  0088a	6b c8 03	 imul	 ecx, eax, 3
  0088d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00893	52		 push	 edx
  00894	51		 push	 ecx
  00895	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f2e9e8d
  0089d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a2	51		 push	 ecx
  008a3	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  008ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008b0	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 2354 : 		draw_radar_arc (ground_radar.scan_arc_size, RADIUS * 0.75, MFD_COLOUR4);

  008b5	b8 04 00 00 00	 mov	 eax, 4
  008ba	6b c8 03	 imul	 ecx, eax, 3
  008bd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008c3	52		 push	 edx
  008c4	51		 push	 ecx
  008c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f82f6e9
  008cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d2	51		 push	 ecx
  008d3	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  008db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e0	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 2355 : 
; 2356 : 		set_2d_window_rotation (mfd_env, -(ground_radar.scan_datum - (ground_radar.scan_arc_size * 0.5)));

  008e5	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  008ed	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  008f5	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  008fd	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00901	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00908	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0090c	51		 push	 ecx
  0090d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00912	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00917	50		 push	 eax
  00918	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2357 : 
; 2358 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  0091d	b8 04 00 00 00	 mov	 eax, 4
  00922	6b c8 00	 imul	 ecx, eax, 0
  00925	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0092b	52		 push	 edx
  0092c	51		 push	 ecx
  0092d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fae9e8d
  00935	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0093a	51		 push	 ecx
  0093b	0f 57 c0	 xorps	 xmm0, xmm0
  0093e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00943	51		 push	 ecx
  00944	0f 57 c0	 xorps	 xmm0, xmm0
  00947	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0094c	51		 push	 ecx
  0094d	0f 57 c0	 xorps	 xmm0, xmm0
  00950	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00955	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2359 : 
; 2360 : 		set_2d_window_rotation (mfd_env, -(ground_radar.scan_datum + (ground_radar.scan_arc_size * 0.5)));

  0095a	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  00962	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  0096a	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00972	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00976	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  0097d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00981	51		 push	 ecx
  00982	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00987	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0098c	50		 push	 eax
  0098d	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2361 : 
; 2362 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  00992	b8 04 00 00 00	 mov	 eax, 4
  00997	6b c8 00	 imul	 ecx, eax, 0
  0099a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009a0	52		 push	 edx
  009a1	51		 push	 ecx
  009a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fae9e8d
  009aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009af	51		 push	 ecx
  009b0	0f 57 c0	 xorps	 xmm0, xmm0
  009b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b8	51		 push	 ecx
  009b9	0f 57 c0	 xorps	 xmm0, xmm0
  009bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009c1	51		 push	 ecx
  009c2	0f 57 c0	 xorps	 xmm0, xmm0
  009c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ca	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2363 : 
; 2364 : 		//
; 2365 : 		// sweep
; 2366 : 		//
; 2367 : 
; 2368 : 		if (ground_radar_is_active())

  009cf	e8 00 00 00 00	 call	 ?ground_radar_is_active@@YGHXZ ; ground_radar_is_active
  009d4	85 c0		 test	 eax, eax
  009d6	74 65		 je	 SHORT $LN29@draw_groun

; 2369 : 		{
; 2370 : 			set_2d_window_rotation (mfd_env, -(ground_radar.scan_datum + ground_radar.sweep_offset));

  009d8	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  009e0	f3 0f 58 05 0c
	00 00 00	 addss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+12
  009e8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  009ef	51		 push	 ecx
  009f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  009fa	50		 push	 eax
  009fb	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2371 : 
; 2372 : 			draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  00a00	b8 04 00 00 00	 mov	 eax, 4
  00a05	6b c8 00	 imul	 ecx, eax, 0
  00a08	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a0e	52		 push	 edx
  00a0f	51		 push	 ecx
  00a10	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fae9e8d
  00a18	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a1d	51		 push	 ecx
  00a1e	0f 57 c0	 xorps	 xmm0, xmm0
  00a21	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a26	51		 push	 ecx
  00a27	0f 57 c0	 xorps	 xmm0, xmm0
  00a2a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a2f	51		 push	 ecx
  00a30	0f 57 c0	 xorps	 xmm0, xmm0
  00a33	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a38	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN29@draw_groun:

; 2373 : 		}
; 2374 : 
; 2375 : 		set_2d_window_rotation (mfd_env, 0.0);

  00a3d	51		 push	 ecx
  00a3e	0f 57 c0	 xorps	 xmm0, xmm0
  00a41	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a46	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a4b	50		 push	 eax
  00a4c	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN28@draw_groun:

; 2376 : 	}
; 2377 : 
; 2378 : 	////////////////////////////////////////
; 2379 : 	//
; 2380 : 	// targets
; 2381 : 	//
; 2382 : 	////////////////////////////////////////
; 2383 : 
; 2384 : 	if (!apache_damage.radar)

  00a51	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  00a56	83 e0 01	 and	 eax, 1
  00a59	0f 85 46 02 00
	00		 jne	 $LN30@draw_groun

; 2385 : 	{
; 2386 : 		set_2d_window_rotation (mfd_env, source_heading);

  00a5f	51		 push	 ecx
  00a60	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  00a65	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a6a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a6f	50		 push	 eax
  00a70	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2387 : 
; 2388 : 		target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  00a75	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  00a79	74 0a		 je	 SHORT $LN69@draw_groun
  00a7b	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  00a7e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a80	89 4d 98	 mov	 DWORD PTR tv461[ebp], ecx
  00a83	eb 24		 jmp	 SHORT $LN70@draw_groun
$LN69@draw_groun:
  00a85	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00a8b	81 c2 f1 00 00
	00		 add	 edx, 241		; 000000f1H
  00a91	52		 push	 edx
  00a92	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a97	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00a9c	50		 push	 eax
  00a9d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00aa2	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv461[ebp], 0
$LN70@draw_groun:
  00aa9	b9 01 00 00 00	 mov	 ecx, 1
  00aae	85 c9		 test	 ecx, ecx
  00ab0	74 09		 je	 SHORT $LN71@draw_groun
  00ab2	c7 45 94 12 00
	00 00		 mov	 DWORD PTR tv469[ebp], 18 ; 00000012H
  00ab9	eb 24		 jmp	 SHORT $LN72@draw_groun
$LN71@draw_groun:
  00abb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00ac1	81 c2 f1 00 00
	00		 add	 edx, 241		; 000000f1H
  00ac7	52		 push	 edx
  00ac8	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00acd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00ad2	50		 push	 eax
  00ad3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ad8	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv469[ebp], 0
$LN72@draw_groun:
  00adf	6a 12		 push	 18			; 00000012H
  00ae1	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  00ae4	51		 push	 ecx
  00ae5	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv461[ebp], 180
  00aec	8b 45 94	 mov	 eax, DWORD PTR tv469[ebp]
  00aef	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00af6	ff d1		 call	 ecx
  00af8	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax

; 2389 : 
; 2390 : 		if (radar_zoomed)

  00afb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?radar_zoomed@@3HA, 0
  00b02	0f 84 90 00 00
	00		 je	 $LN31@draw_groun

; 2391 : 		{
; 2392 : 			// in zoomed mode centre radar on selected target
; 2393 : 			source_position = get_local_entity_vec3d_ptr(selected_target, VEC3D_TYPE_POSITION);

  00b08	83 7d e0 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00b0c	74 0a		 je	 SHORT $LN73@draw_groun
  00b0e	8b 45 e0	 mov	 eax, DWORD PTR _selected_target$[ebp]
  00b11	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b13	89 4d 98	 mov	 DWORD PTR tv482[ebp], ecx
  00b16	eb 24		 jmp	 SHORT $LN74@draw_groun
$LN73@draw_groun:
  00b18	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00b1e	81 c2 f6 00 00
	00		 add	 edx, 246		; 000000f6H
  00b24	52		 push	 edx
  00b25	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b2a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00b2f	50		 push	 eax
  00b30	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b35	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv482[ebp], 0
$LN74@draw_groun:
  00b3c	b9 01 00 00 00	 mov	 ecx, 1
  00b41	85 c9		 test	 ecx, ecx
  00b43	74 09		 je	 SHORT $LN75@draw_groun
  00b45	c7 45 94 08 00
	00 00		 mov	 DWORD PTR tv490[ebp], 8
  00b4c	eb 24		 jmp	 SHORT $LN76@draw_groun
$LN75@draw_groun:
  00b4e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00b54	81 c2 f6 00 00
	00		 add	 edx, 246		; 000000f6H
  00b5a	52		 push	 edx
  00b5b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b60	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00b65	50		 push	 eax
  00b66	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b6b	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv490[ebp], 0
$LN76@draw_groun:
  00b72	6a 08		 push	 8
  00b74	8b 4d e0	 mov	 ecx, DWORD PTR _selected_target$[ebp]
  00b77	51		 push	 ecx
  00b78	6b 55 98 60	 imul	 edx, DWORD PTR tv482[ebp], 96
  00b7c	8b 45 94	 mov	 eax, DWORD PTR tv490[ebp]
  00b7f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00b86	ff d1		 call	 ecx
  00b88	89 45 dc	 mov	 DWORD PTR _source_position$[ebp], eax

; 2394 : 			scale = 0.004;  // 1/250 ==  250m in each axis direction from selected target

  00b8b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3b83126f
  00b93	f3 0f 11 45 ec	 movss	 DWORD PTR _scale$[ebp], xmm0
$LN31@draw_groun:

; 2395 : 		}
; 2396 : 
; 2397 : 		while (target)

  00b98	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  00b9c	0f 84 cb 00 00
	00		 je	 $LN7@draw_groun

; 2398 : 		{
; 2399 : 			if (target != selected_target && get_gunship_target_valid_for_ground_radar (target))

  00ba2	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  00ba5	3b 45 e0	 cmp	 eax, DWORD PTR _selected_target$[ebp]
  00ba8	74 38		 je	 SHORT $LN33@draw_groun
  00baa	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  00bad	50		 push	 eax
  00bae	e8 00 00 00 00	 call	 ?get_gunship_target_valid_for_ground_radar@@YGHPAUENTITY@@@Z ; get_gunship_target_valid_for_ground_radar
  00bb3	85 c0		 test	 eax, eax
  00bb5	74 2b		 je	 SHORT $LN33@draw_groun

; 2400 : 			{
; 2401 : 				if (get_target_matches_ground_radar_declutter_criteria (target))

  00bb7	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  00bba	50		 push	 eax
  00bbb	e8 00 00 00 00	 call	 ?get_target_matches_ground_radar_declutter_criteria@@YGHPAUENTITY@@@Z ; get_target_matches_ground_radar_declutter_criteria
  00bc0	85 c0		 test	 eax, eax
  00bc2	74 1e		 je	 SHORT $LN33@draw_groun

; 2402 : 					draw_radar_target_symbol (target, source_position, scale, FALSE, FALSE, FALSE);

  00bc4	6a 00		 push	 0
  00bc6	6a 00		 push	 0
  00bc8	6a 00		 push	 0
  00bca	51		 push	 ecx
  00bcb	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00bd0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bd5	8b 45 dc	 mov	 eax, DWORD PTR _source_position$[ebp]
  00bd8	50		 push	 eax
  00bd9	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  00bdc	51		 push	 ecx
  00bdd	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z ; draw_radar_target_symbol
$LN33@draw_groun:

; 2403 : 			}
; 2404 : 
; 2405 : 			target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  00be2	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  00be6	74 0a		 je	 SHORT $LN77@draw_groun
  00be8	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  00beb	8b 08		 mov	 ecx, DWORD PTR [eax]
  00bed	89 4d 98	 mov	 DWORD PTR tv516[ebp], ecx
  00bf0	eb 24		 jmp	 SHORT $LN78@draw_groun
$LN77@draw_groun:
  00bf2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00bf8	81 c2 02 01 00
	00		 add	 edx, 258		; 00000102H
  00bfe	52		 push	 edx
  00bff	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c04	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00c09	50		 push	 eax
  00c0a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c0f	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv516[ebp], 0
$LN78@draw_groun:
  00c16	b9 01 00 00 00	 mov	 ecx, 1
  00c1b	85 c9		 test	 ecx, ecx
  00c1d	74 09		 je	 SHORT $LN79@draw_groun
  00c1f	c7 45 94 12 00
	00 00		 mov	 DWORD PTR tv524[ebp], 18 ; 00000012H
  00c26	eb 24		 jmp	 SHORT $LN80@draw_groun
$LN79@draw_groun:
  00c28	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00c2e	81 c2 02 01 00
	00		 add	 edx, 258		; 00000102H
  00c34	52		 push	 edx
  00c35	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c3a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00c3f	50		 push	 eax
  00c40	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c45	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv524[ebp], 0
$LN80@draw_groun:
  00c4c	6a 12		 push	 18			; 00000012H
  00c4e	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  00c51	51		 push	 ecx
  00c52	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv516[ebp], 180
  00c59	8b 45 94	 mov	 eax, DWORD PTR tv524[ebp]
  00c5c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00c63	ff d1		 call	 ecx
  00c65	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax

; 2406 : 		}

  00c68	e9 2b ff ff ff	 jmp	 $LN31@draw_groun
$LN7@draw_groun:

; 2407 : 
; 2408 : 		//
; 2409 : 		// draw selected target last
; 2410 : 		//
; 2411 : 
; 2412 : 		if (selected_target)

  00c6d	83 7d e0 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00c71	74 1e		 je	 SHORT $LN34@draw_groun

; 2413 : 			draw_radar_target_symbol (selected_target, source_position, scale, TRUE, FALSE, FALSE);

  00c73	6a 00		 push	 0
  00c75	6a 00		 push	 0
  00c77	6a 01		 push	 1
  00c79	51		 push	 ecx
  00c7a	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00c7f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c84	8b 45 dc	 mov	 eax, DWORD PTR _source_position$[ebp]
  00c87	50		 push	 eax
  00c88	8b 4d e0	 mov	 ecx, DWORD PTR _selected_target$[ebp]
  00c8b	51		 push	 ecx
  00c8c	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z ; draw_radar_target_symbol
$LN34@draw_groun:

; 2414 : 
; 2415 : 		set_2d_window_rotation (mfd_env, 0.0);

  00c91	51		 push	 ecx
  00c92	0f 57 c0	 xorps	 xmm0, xmm0
  00c95	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c9a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00c9f	50		 push	 eax
  00ca0	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN30@draw_groun:

; 2416 : 	}
; 2417 : 
; 2418 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00ca5	51		 push	 ecx
  00ca6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00cae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cb3	51		 push	 ecx
  00cb4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00cbc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cc1	51		 push	 ecx
  00cc2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00cca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ccf	51		 push	 ecx
  00cd0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00cd8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cdd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00ce2	50		 push	 eax
  00ce3	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 2419 : 
; 2420 : 	////////////////////////////////////////
; 2421 : 	//
; 2422 : 	// damaged
; 2423 : 	//
; 2424 : 	////////////////////////////////////////
; 2425 : 
; 2426 : 	if (apache_damage.radar)

  00ce8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  00ced	83 e0 01	 and	 eax, 1
  00cf0	0f 84 98 00 00
	00		 je	 $LN35@draw_groun

; 2427 : 	{
; 2428 : 		draw_2d_line (-0.5, -0.5,  0.5, 0.5, MFD_COLOUR1);

  00cf6	b8 04 00 00 00	 mov	 eax, 4
  00cfb	6b c8 00	 imul	 ecx, eax, 0
  00cfe	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00d04	52		 push	 edx
  00d05	51		 push	 ecx
  00d06	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00d0e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d13	51		 push	 ecx
  00d14	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00d1c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d21	51		 push	 ecx
  00d22	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00d2a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d2f	51		 push	 ecx
  00d30	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00d38	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d3d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2429 : 		draw_2d_line ( 0.5, -0.5, -0.5, 0.5, MFD_COLOUR1);

  00d42	b8 04 00 00 00	 mov	 eax, 4
  00d47	6b c8 00	 imul	 ecx, eax, 0
  00d4a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00d50	52		 push	 edx
  00d51	51		 push	 ecx
  00d52	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00d5a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d5f	51		 push	 ecx
  00d60	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00d68	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d6d	51		 push	 ecx
  00d6e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00d76	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d7b	51		 push	 ecx
  00d7c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00d84	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d89	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN35@draw_groun:

; 2430 : 	}
; 2431 : }

  00d8e	5f		 pop	 edi
  00d8f	5e		 pop	 esi
  00d90	5b		 pop	 ebx
  00d91	8b e5		 mov	 esp, ebp
  00d93	5d		 pop	 ebp
  00d94	c3		 ret	 0
  00d95	0f 1f 00	 npad	 3
$LN81@draw_groun:
  00d98	00 00 00 00	 DD	 $LN19@draw_groun
  00d9c	00 00 00 00	 DD	 $LN20@draw_groun
  00da0	00 00 00 00	 DD	 $LN21@draw_groun
  00da4	00 00 00 00	 DD	 $LN24@draw_groun
  00da8	00 00 00 00	 DD	 $LN25@draw_groun
?draw_ground_radar_mfd@@YGXXZ ENDP			; draw_ground_radar_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z
_TEXT	SEGMENT
tv180 = -100						; size = 4
tv160 = -100						; size = 4
tv132 = -100						; size = 4
tv172 = -96						; size = 4
tv152 = -96						; size = 4
tv92 = -96						; size = 4
tv80 = -96						; size = 4
$T1 = -92						; size = 4
_bounding_box_max$ = -24				; size = 4
_bounding_box_min$ = -20				; size = 4
_target_position$ = -16					; size = 4
_radius$ = -12						; size = 4
_dy$ = -8						; size = 4
_dx$ = -4						; size = 4
_target$ = 8						; size = 4
_source_position$ = 12					; size = 4
_scale$ = 16						; size = 4
?draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z PROC ; draw_ground_radar_clutter, COMDAT

; 2096 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2097 : 	float
; 2098 : 		dx,
; 2099 : 		dy,
; 2100 : 		radius;
; 2101 : 
; 2102 : 	vec3d
; 2103 : 		*target_position,
; 2104 : 		*bounding_box_min,
; 2105 : 		*bounding_box_max;
; 2106 : 
; 2107 : 	ASSERT (target);

  00009	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@draw_groun
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00014	83 c0 0b	 add	 eax, 11			; 0000000bH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@draw_groun:

; 2108 : 
; 2109 : 	ASSERT (source_position);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _source_position$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@draw_groun
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00032	83 c0 0d	 add	 eax, 13			; 0000000dH
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IIPCKJML@source_position@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@draw_groun:

; 2110 : 
; 2111 : 	ASSERT (get_local_entity_type (target) == ENTITY_TYPE_CITY);

  00045	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00049	74 0a		 je	 SHORT $LN7@draw_groun
  0004b	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	89 4d a0	 mov	 DWORD PTR tv80[ebp], ecx
  00053	eb 21		 jmp	 SHORT $LN8@draw_groun
$LN7@draw_groun:
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  0005b	83 c2 0f	 add	 edx, 15			; 0000000fH
  0005e	52		 push	 edx
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006f	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN8@draw_groun:
  00076	83 7d a0 05	 cmp	 DWORD PTR tv80[ebp], 5
  0007a	74 18		 je	 SHORT $LN4@draw_groun
  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00081	83 c0 0f	 add	 eax, 15			; 0000000fH
  00084	50		 push	 eax
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@KDAGALDF@get_local_entity_type?5?$CItarget?$CJ?5@
  0008f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_groun:

; 2112 : 
; 2113 : 	target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00094	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00098	74 0a		 je	 SHORT $LN9@draw_groun
  0009a	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0009d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009f	89 4d a0	 mov	 DWORD PTR tv92[ebp], ecx
  000a2	eb 21		 jmp	 SHORT $LN10@draw_groun
$LN9@draw_groun:
  000a4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  000aa	83 c2 11	 add	 edx, 17			; 00000011H
  000ad	52		 push	 edx
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  000b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000be	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv92[ebp], 0
$LN10@draw_groun:
  000c5	b9 01 00 00 00	 mov	 ecx, 1
  000ca	85 c9		 test	 ecx, ecx
  000cc	74 09		 je	 SHORT $LN11@draw_groun
  000ce	c7 45 9c 08 00
	00 00		 mov	 DWORD PTR tv132[ebp], 8
  000d5	eb 21		 jmp	 SHORT $LN12@draw_groun
$LN11@draw_groun:
  000d7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  000dd	83 c2 11	 add	 edx, 17			; 00000011H
  000e0	52		 push	 edx
  000e1	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000eb	50		 push	 eax
  000ec	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000f1	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
$LN12@draw_groun:
  000f8	6a 08		 push	 8
  000fa	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  000fd	51		 push	 ecx
  000fe	6b 55 a0 60	 imul	 edx, DWORD PTR tv92[ebp], 96
  00102	8b 45 9c	 mov	 eax, DWORD PTR tv132[ebp]
  00105	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0010c	ff d1		 call	 ecx
  0010e	89 45 f0	 mov	 DWORD PTR _target_position$[ebp], eax

; 2114 : 
; 2115 : 	dx = (target_position->x - source_position->x) * scale;

  00111	8b 45 f0	 mov	 eax, DWORD PTR _target_position$[ebp]
  00114	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  00117	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0011b	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0011f	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00124	f3 0f 11 45 fc	 movss	 DWORD PTR _dx$[ebp], xmm0

; 2116 : 	dy = (target_position->z - source_position->z) * scale;

  00129	8b 45 f0	 mov	 eax, DWORD PTR _target_position$[ebp]
  0012c	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  0012f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00134	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00139	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0013e	f3 0f 11 45 f8	 movss	 DWORD PTR _dy$[ebp], xmm0

; 2117 : 
; 2118 : 	bounding_box_min = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_BOUNDING_BOX_MIN);

  00143	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00147	74 0a		 je	 SHORT $LN13@draw_groun
  00149	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0014c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014e	89 4d a0	 mov	 DWORD PTR tv152[ebp], ecx
  00151	eb 21		 jmp	 SHORT $LN14@draw_groun
$LN13@draw_groun:
  00153	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00159	83 c2 16	 add	 edx, 22			; 00000016H
  0015c	52		 push	 edx
  0015d	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00162	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00167	50		 push	 eax
  00168	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0016d	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv152[ebp], 0
$LN14@draw_groun:
  00174	b9 01 00 00 00	 mov	 ecx, 1
  00179	85 c9		 test	 ecx, ecx
  0017b	74 09		 je	 SHORT $LN15@draw_groun
  0017d	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv160[ebp], 1
  00184	eb 21		 jmp	 SHORT $LN16@draw_groun
$LN15@draw_groun:
  00186	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  0018c	83 c2 16	 add	 edx, 22			; 00000016H
  0018f	52		 push	 edx
  00190	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00195	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001a0	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv160[ebp], 0
$LN16@draw_groun:
  001a7	6a 01		 push	 1
  001a9	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  001ac	51		 push	 ecx
  001ad	6b 55 a0 60	 imul	 edx, DWORD PTR tv152[ebp], 96
  001b1	8b 45 9c	 mov	 eax, DWORD PTR tv160[ebp]
  001b4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  001bb	ff d1		 call	 ecx
  001bd	89 45 ec	 mov	 DWORD PTR _bounding_box_min$[ebp], eax

; 2119 : 	bounding_box_max = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_BOUNDING_BOX_MAX);

  001c0	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  001c4	74 0a		 je	 SHORT $LN17@draw_groun
  001c6	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  001c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001cb	89 4d a0	 mov	 DWORD PTR tv172[ebp], ecx
  001ce	eb 21		 jmp	 SHORT $LN18@draw_groun
$LN17@draw_groun:
  001d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  001d6	83 c2 17	 add	 edx, 23			; 00000017H
  001d9	52		 push	 edx
  001da	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  001df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001e4	50		 push	 eax
  001e5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001ea	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv172[ebp], 0
$LN18@draw_groun:
  001f1	b9 01 00 00 00	 mov	 ecx, 1
  001f6	85 c9		 test	 ecx, ecx
  001f8	74 09		 je	 SHORT $LN19@draw_groun
  001fa	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv180[ebp], 0
  00201	eb 21		 jmp	 SHORT $LN20@draw_groun
$LN19@draw_groun:
  00203	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00209	83 c2 17	 add	 edx, 23			; 00000017H
  0020c	52		 push	 edx
  0020d	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00212	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00217	50		 push	 eax
  00218	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0021d	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv180[ebp], 0
$LN20@draw_groun:
  00224	6a 00		 push	 0
  00226	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00229	51		 push	 ecx
  0022a	6b 55 a0 60	 imul	 edx, DWORD PTR tv172[ebp], 96
  0022e	8b 45 9c	 mov	 eax, DWORD PTR tv180[ebp]
  00231	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00238	ff d1		 call	 ecx
  0023a	89 45 e8	 mov	 DWORD PTR _bounding_box_max$[ebp], eax

; 2120 : 
; 2121 : 	radius = get_approx_2d_range (bounding_box_min, bounding_box_max);

  0023d	8b 45 e8	 mov	 eax, DWORD PTR _bounding_box_max$[ebp]
  00240	50		 push	 eax
  00241	8b 4d ec	 mov	 ecx, DWORD PTR _bounding_box_min$[ebp]
  00244	51		 push	 ecx
  00245	e8 00 00 00 00	 call	 ?get_approx_2d_range@@YGMPBUVEC3D@@0@Z ; get_approx_2d_range
  0024a	d9 5d f4	 fstp	 DWORD PTR _radius$[ebp]

; 2122 : 
; 2123 : 	//
; 2124 : 	// radius check to ignore oil pipelines and overly large city blocks
; 2125 : 	//
; 2126 : 
; 2127 : 	if (radius < 2000.0)

  0024d	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _radius$[ebp]
  00252	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@409f400000000000
  0025a	66 0f 2f c8	 comisd	 xmm1, xmm0
  0025e	76 5d		 jbe	 SHORT $LN5@draw_groun

; 2128 : 	{
; 2129 : 		radius = max (50.0f, radius);

  00260	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  00268	f3 0f 11 45 a4	 movss	 DWORD PTR $T1[ebp], xmm0
  0026d	8d 45 f4	 lea	 eax, DWORD PTR _radius$[ebp]
  00270	50		 push	 eax
  00271	8d 4d a4	 lea	 ecx, DWORD PTR $T1[ebp]
  00274	51		 push	 ecx
  00275	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0027a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0027e	f3 0f 11 45 f4	 movss	 DWORD PTR _radius$[ebp], xmm0

; 2130 : 
; 2131 : 		draw_2d_hatched_circle (dx, dy, radius * scale, MFD_COLOUR5);

  00283	b8 04 00 00 00	 mov	 eax, 4
  00288	c1 e0 02	 shl	 eax, 2
  0028b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00291	51		 push	 ecx
  00292	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _radius$[ebp]
  00297	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0029c	51		 push	 ecx
  0029d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a2	51		 push	 ecx
  002a3	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  002a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ad	51		 push	 ecx
  002ae	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _dx$[ebp]
  002b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b8	e8 00 00 00 00	 call	 ?draw_2d_hatched_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_hatched_circle
$LN5@draw_groun:

; 2132 : 	}
; 2133 : }

  002bd	5f		 pop	 edi
  002be	5e		 pop	 esi
  002bf	5b		 pop	 ebx
  002c0	8b e5		 mov	 esp, ebp
  002c2	5d		 pop	 ebp
  002c3	c2 0c 00	 ret	 12			; 0000000cH
?draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z ENDP ; draw_ground_radar_clutter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z
_TEXT	SEGMENT
tv560 = -116						; size = 8
tv377 = -116						; size = 4
tv295 = -116						; size = 4
tv257 = -116						; size = 4
tv219 = -116						; size = 4
tv193 = -116						; size = 4
tv165 = -116						; size = 4
tv145 = -116						; size = 4
tv88 = -116						; size = 4
tv370 = -112						; size = 4
tv288 = -112						; size = 4
tv250 = -112						; size = 4
tv212 = -112						; size = 4
tv185 = -112						; size = 4
tv157 = -112						; size = 4
tv137 = -112						; size = 4
tv80 = -112						; size = 4
_x_offset$1 = -44					; size = 4
_id$2 = -40						; size = 4
_target_true_velocity$3 = -36				; size = 4
_target_position$ = -32					; size = 4
_dy$ = -28						; size = 4
_dx$ = -24						; size = 4
_source$ = -20						; size = 4
_source_side$ = -16					; size = 4
_target_symbol_background_colour$ = -12			; size = 4
_target_symbol_colour$ = -8				; size = 4
_target_symbol_type$ = -4				; size = 4
_target$ = 8						; size = 4
_source_position$ = 12					; size = 4
_scale$ = 16						; size = 4
_selected_target$ = 20					; size = 4
_display_on_tsd$ = 24					; size = 4
_display_on_ase$ = 28					; size = 4
?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z PROC ; draw_radar_target_symbol, COMDAT

; 1931 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1932 : 	target_symbol_types
; 1933 : 		target_symbol_type;
; 1934 : 
; 1935 : 	rgb_colour
; 1936 : 		target_symbol_colour,
; 1937 : 		target_symbol_background_colour;
; 1938 : 
; 1939 : //VJ 030423 TSD render mod
; 1940 : 	entity_sides
; 1941 : 		source_side;
; 1942 : 	entity
; 1943 : 		*source;
; 1944 : 
; 1945 : 	float
; 1946 : 		dx,
; 1947 : 		dy;
; 1948 : 
; 1949 : 	vec3d
; 1950 : 		*target_position;
; 1951 : 
; 1952 : 	ASSERT (target);

  00009	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@draw_radar
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA
  00014	83 c0 15	 add	 eax, 21			; 00000015H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@draw_radar:

; 1953 : 
; 1954 : 	ASSERT (source_position);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _source_position$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@draw_radar
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA
  00032	83 c0 17	 add	 eax, 23			; 00000017H
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IIPCKJML@source_position@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@draw_radar:

; 1955 : 
; 1956 : 	ASSERT (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER));

  00045	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00049	74 0a		 je	 SHORT $LN29@draw_radar
  0004b	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	89 4d 90	 mov	 DWORD PTR tv80[ebp], ecx
  00053	eb 21		 jmp	 SHORT $LN30@draw_radar
$LN29@draw_radar:
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA
  0005b	83 c2 19	 add	 edx, 25			; 00000019H
  0005e	52		 push	 edx
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006f	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN30@draw_radar:
  00076	b9 01 00 00 00	 mov	 ecx, 1
  0007b	85 c9		 test	 ecx, ecx
  0007d	74 09		 je	 SHORT $LN31@draw_radar
  0007f	c7 45 8c 42 00
	00 00		 mov	 DWORD PTR tv88[ebp], 66	; 00000042H
  00086	eb 21		 jmp	 SHORT $LN32@draw_radar
$LN31@draw_radar:
  00088	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA
  0008e	83 c2 19	 add	 edx, 25			; 00000019H
  00091	52		 push	 edx
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a2	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$LN32@draw_radar:
  000a9	6a 42		 push	 66			; 00000042H
  000ab	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  000ae	51		 push	 ecx
  000af	69 55 90 5c 04
	00 00		 imul	 edx, DWORD PTR tv80[ebp], 1116
  000b6	8b 45 8c	 mov	 eax, DWORD PTR tv88[ebp]
  000b9	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000c0	ff d1		 call	 ecx
  000c2	85 c0		 test	 eax, eax
  000c4	74 18		 je	 SHORT $LN4@draw_radar
  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA
  000cb	83 c0 19	 add	 eax, 25			; 00000019H
  000ce	50		 push	 eax
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@
  000d9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_radar:

; 1957 : 
; 1958 : //VJ 030423 TSD render mod
; 1959 : 	source = get_gunship_entity ();

  000de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000e3	89 45 ec	 mov	 DWORD PTR _source$[ebp], eax

; 1960 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  000e6	83 7d ec 00	 cmp	 DWORD PTR _source$[ebp], 0
  000ea	74 0a		 je	 SHORT $LN33@draw_radar
  000ec	8b 45 ec	 mov	 eax, DWORD PTR _source$[ebp]
  000ef	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f1	89 4d 90	 mov	 DWORD PTR tv137[ebp], ecx
  000f4	eb 21		 jmp	 SHORT $LN34@draw_radar
$LN33@draw_radar:
  000f6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA
  000fc	83 c2 1d	 add	 edx, 29			; 0000001dH
  000ff	52		 push	 edx
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00110	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$LN34@draw_radar:
  00117	b9 01 00 00 00	 mov	 ecx, 1
  0011c	85 c9		 test	 ecx, ecx
  0011e	74 09		 je	 SHORT $LN35@draw_radar
  00120	c7 45 8c bb 00
	00 00		 mov	 DWORD PTR tv145[ebp], 187 ; 000000bbH
  00127	eb 21		 jmp	 SHORT $LN36@draw_radar
$LN35@draw_radar:
  00129	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA
  0012f	83 c2 1d	 add	 edx, 29			; 0000001dH
  00132	52		 push	 edx
  00133	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00138	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0013d	50		 push	 eax
  0013e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00143	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv145[ebp], 0
$LN36@draw_radar:
  0014a	68 bb 00 00 00	 push	 187			; 000000bbH
  0014f	8b 4d ec	 mov	 ecx, DWORD PTR _source$[ebp]
  00152	51		 push	 ecx
  00153	69 55 90 5c 04
	00 00		 imul	 edx, DWORD PTR tv137[ebp], 1116
  0015a	8b 45 8c	 mov	 eax, DWORD PTR tv145[ebp]
  0015d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00164	ff d1		 call	 ecx
  00166	89 45 f0	 mov	 DWORD PTR _source_side$[ebp], eax

; 1961 : 
; 1962 : 	target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00169	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0016d	74 0a		 je	 SHORT $LN37@draw_radar
  0016f	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00172	8b 08		 mov	 ecx, DWORD PTR [eax]
  00174	89 4d 90	 mov	 DWORD PTR tv157[ebp], ecx
  00177	eb 21		 jmp	 SHORT $LN38@draw_radar
$LN37@draw_radar:
  00179	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA
  0017f	83 c2 1f	 add	 edx, 31			; 0000001fH
  00182	52		 push	 edx
  00183	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00188	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0018d	50		 push	 eax
  0018e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00193	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv157[ebp], 0
$LN38@draw_radar:
  0019a	b9 01 00 00 00	 mov	 ecx, 1
  0019f	85 c9		 test	 ecx, ecx
  001a1	74 09		 je	 SHORT $LN39@draw_radar
  001a3	c7 45 8c 08 00
	00 00		 mov	 DWORD PTR tv165[ebp], 8
  001aa	eb 21		 jmp	 SHORT $LN40@draw_radar
$LN39@draw_radar:
  001ac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA
  001b2	83 c2 1f	 add	 edx, 31			; 0000001fH
  001b5	52		 push	 edx
  001b6	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  001bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001c0	50		 push	 eax
  001c1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c6	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv165[ebp], 0
$LN40@draw_radar:
  001cd	6a 08		 push	 8
  001cf	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  001d2	51		 push	 ecx
  001d3	6b 55 90 60	 imul	 edx, DWORD PTR tv157[ebp], 96
  001d7	8b 45 8c	 mov	 eax, DWORD PTR tv165[ebp]
  001da	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  001e1	ff d1		 call	 ecx
  001e3	89 45 e0	 mov	 DWORD PTR _target_position$[ebp], eax

; 1963 : 
; 1964 : 	dx = (target_position->x - source_position->x) * scale;

  001e6	8b 45 e0	 mov	 eax, DWORD PTR _target_position$[ebp]
  001e9	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  001ec	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001f0	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  001f4	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  001f9	f3 0f 11 45 e8	 movss	 DWORD PTR _dx$[ebp], xmm0

; 1965 : 	dy = (target_position->z - source_position->z) * scale;

  001fe	8b 45 e0	 mov	 eax, DWORD PTR _target_position$[ebp]
  00201	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  00204	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00209	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0020e	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00213	f3 0f 11 45 e4	 movss	 DWORD PTR _dy$[ebp], xmm0

; 1966 : 
; 1967 : 	target_symbol_type = (target_symbol_types) get_local_entity_int_value (target, INT_TYPE_TARGET_SYMBOL_TYPE);

  00218	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0021c	74 0a		 je	 SHORT $LN41@draw_radar
  0021e	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00221	8b 08		 mov	 ecx, DWORD PTR [eax]
  00223	89 4d 90	 mov	 DWORD PTR tv185[ebp], ecx
  00226	eb 21		 jmp	 SHORT $LN42@draw_radar
$LN41@draw_radar:
  00228	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA
  0022e	83 c2 24	 add	 edx, 36			; 00000024H
  00231	52		 push	 edx
  00232	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00237	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0023c	50		 push	 eax
  0023d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00242	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv185[ebp], 0
$LN42@draw_radar:
  00249	b9 01 00 00 00	 mov	 ecx, 1
  0024e	85 c9		 test	 ecx, ecx
  00250	74 09		 je	 SHORT $LN43@draw_radar
  00252	c7 45 8c d5 00
	00 00		 mov	 DWORD PTR tv193[ebp], 213 ; 000000d5H
  00259	eb 21		 jmp	 SHORT $LN44@draw_radar
$LN43@draw_radar:
  0025b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA
  00261	83 c2 24	 add	 edx, 36			; 00000024H
  00264	52		 push	 edx
  00265	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0026a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0026f	50		 push	 eax
  00270	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00275	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv193[ebp], 0
$LN44@draw_radar:
  0027c	68 d5 00 00 00	 push	 213			; 000000d5H
  00281	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00284	51		 push	 ecx
  00285	69 55 90 5c 04
	00 00		 imul	 edx, DWORD PTR tv185[ebp], 1116
  0028c	8b 45 8c	 mov	 eax, DWORD PTR tv193[ebp]
  0028f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00296	ff d1		 call	 ecx
  00298	89 45 fc	 mov	 DWORD PTR _target_symbol_type$[ebp], eax

; 1968 : 
; 1969 : 	ASSERT ((target_symbol_type >= 0) && (target_symbol_type < NUM_TARGET_SYMBOL_TYPES));

  0029b	83 7d fc 00	 cmp	 DWORD PTR _target_symbol_type$[ebp], 0
  0029f	7c 06		 jl	 SHORT $LN6@draw_radar
  002a1	83 7d fc 08	 cmp	 DWORD PTR _target_symbol_type$[ebp], 8
  002a5	7c 18		 jl	 SHORT $LN5@draw_radar
$LN6@draw_radar:
  002a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA
  002ac	83 c0 26	 add	 eax, 38			; 00000026H
  002af	50		 push	 eax
  002b0	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  002b5	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@
  002ba	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@draw_radar:

; 1970 : 
; 1971 : 	// figure out correct colours to use
; 1972 : //VJ 030423 TSD render mod
; 1973 : 	if (display_on_tsd)

  002bf	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  002c3	0f 84 f9 00 00
	00		 je	 $LN7@draw_radar

; 1974 : 	{
; 1975 : 		//VJ 030511 TSD render mod, treat enemy colours as cheat
; 1976 : 		if (command_line_tsd_enemy_colours)

  002c9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_tsd_enemy_colours@@3HA, 0 ; command_line_tsd_enemy_colours
  002d0	0f 84 c5 00 00
	00		 je	 $LN9@draw_radar

; 1977 : 		{
; 1978 : 			if (source_side == get_local_entity_int_value (target, INT_TYPE_SIDE))

  002d6	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  002da	74 0a		 je	 SHORT $LN45@draw_radar
  002dc	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  002df	8b 08		 mov	 ecx, DWORD PTR [eax]
  002e1	89 4d 90	 mov	 DWORD PTR tv212[ebp], ecx
  002e4	eb 1d		 jmp	 SHORT $LN46@draw_radar
$LN45@draw_radar:
  002e6	68 ba 07 00 00	 push	 1978			; 000007baH
  002eb	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  002f0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002f6	52		 push	 edx
  002f7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002fc	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv212[ebp], 0
$LN46@draw_radar:
  00303	b8 01 00 00 00	 mov	 eax, 1
  00308	85 c0		 test	 eax, eax
  0030a	74 09		 je	 SHORT $LN47@draw_radar
  0030c	c7 45 8c bb 00
	00 00		 mov	 DWORD PTR tv219[ebp], 187 ; 000000bbH
  00313	eb 1d		 jmp	 SHORT $LN48@draw_radar
$LN47@draw_radar:
  00315	68 ba 07 00 00	 push	 1978			; 000007baH
  0031a	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0031f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00325	51		 push	 ecx
  00326	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0032b	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv219[ebp], 0
$LN48@draw_radar:
  00332	68 bb 00 00 00	 push	 187			; 000000bbH
  00337	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  0033a	52		 push	 edx
  0033b	69 45 90 5c 04
	00 00		 imul	 eax, DWORD PTR tv212[ebp], 1116
  00342	8b 4d 8c	 mov	 ecx, DWORD PTR tv219[ebp]
  00345	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0034c	ff d2		 call	 edx
  0034e	39 45 f0	 cmp	 DWORD PTR _source_side$[ebp], eax
  00351	75 24		 jne	 SHORT $LN11@draw_radar

; 1979 : 			{
; 1980 : 				target_symbol_colour = MFD_COLOUR_BLUE;

  00353	b8 04 00 00 00	 mov	 eax, 4
  00358	6b c8 0c	 imul	 ecx, eax, 12
  0035b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00361	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx

; 1981 : 				target_symbol_background_colour = MFD_COLOUR_DARK_BLUE;

  00364	b8 04 00 00 00	 mov	 eax, 4
  00369	6b c8 11	 imul	 ecx, eax, 17
  0036c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00372	89 55 f4	 mov	 DWORD PTR _target_symbol_background_colour$[ebp], edx

; 1982 : 			}
; 1983 : 			else

  00375	eb 22		 jmp	 SHORT $LN12@draw_radar
$LN11@draw_radar:

; 1984 : 			{
; 1985 : 				target_symbol_colour = MFD_COLOUR_RED;

  00377	b8 04 00 00 00	 mov	 eax, 4
  0037c	6b c8 0f	 imul	 ecx, eax, 15
  0037f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00385	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx

; 1986 : 				target_symbol_background_colour = MFD_COLOUR_DARK_RED;

  00388	b8 04 00 00 00	 mov	 eax, 4
  0038d	6b c8 12	 imul	 ecx, eax, 18
  00390	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00396	89 55 f4	 mov	 DWORD PTR _target_symbol_background_colour$[ebp], edx
$LN12@draw_radar:

; 1987 : 			}
; 1988 : 		}
; 1989 : 		else

  00399	eb 22		 jmp	 SHORT $LN10@draw_radar
$LN9@draw_radar:

; 1990 : 		{
; 1991 : 				target_symbol_colour = MFD_COLOUR_RED;

  0039b	b8 04 00 00 00	 mov	 eax, 4
  003a0	6b c8 0f	 imul	 ecx, eax, 15
  003a3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003a9	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx

; 1992 : 				target_symbol_background_colour = MFD_COLOUR_DARK_RED;

  003ac	b8 04 00 00 00	 mov	 eax, 4
  003b1	6b c8 12	 imul	 ecx, eax, 18
  003b4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003ba	89 55 f4	 mov	 DWORD PTR _target_symbol_background_colour$[ebp], edx
$LN10@draw_radar:

; 1993 : 		}

  003bd	e9 f1 00 00 00	 jmp	 $LN14@draw_radar
$LN7@draw_radar:

; 1994 : 
; 1995 : 	}
; 1996 : 	else if (display_on_ase)

  003c2	83 7d 1c 00	 cmp	 DWORD PTR _display_on_ase$[ebp], 0
  003c6	0f 84 c5 00 00
	00		 je	 $LN13@draw_radar

; 1997 : 	{
; 1998 : 		if (get_local_entity_int_value (target, INT_TYPE_THREAT_TYPE) == THREAT_TYPE_AAA)

  003cc	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  003d0	74 0a		 je	 SHORT $LN49@draw_radar
  003d2	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  003d5	8b 08		 mov	 ecx, DWORD PTR [eax]
  003d7	89 4d 90	 mov	 DWORD PTR tv250[ebp], ecx
  003da	eb 1d		 jmp	 SHORT $LN50@draw_radar
$LN49@draw_radar:
  003dc	68 ce 07 00 00	 push	 1998			; 000007ceH
  003e1	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  003e6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003ec	52		 push	 edx
  003ed	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003f2	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv250[ebp], 0
$LN50@draw_radar:
  003f9	b8 01 00 00 00	 mov	 eax, 1
  003fe	85 c0		 test	 eax, eax
  00400	74 09		 je	 SHORT $LN51@draw_radar
  00402	c7 45 8c e9 00
	00 00		 mov	 DWORD PTR tv257[ebp], 233 ; 000000e9H
  00409	eb 1d		 jmp	 SHORT $LN52@draw_radar
$LN51@draw_radar:
  0040b	68 ce 07 00 00	 push	 1998			; 000007ceH
  00410	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00415	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0041b	51		 push	 ecx
  0041c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00421	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv257[ebp], 0
$LN52@draw_radar:
  00428	68 e9 00 00 00	 push	 233			; 000000e9H
  0042d	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00430	52		 push	 edx
  00431	69 45 90 5c 04
	00 00		 imul	 eax, DWORD PTR tv250[ebp], 1116
  00438	8b 4d 8c	 mov	 ecx, DWORD PTR tv257[ebp]
  0043b	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00442	ff d2		 call	 edx
  00444	83 f8 06	 cmp	 eax, 6
  00447	75 24		 jne	 SHORT $LN15@draw_radar

; 1999 : 		{
; 2000 : 			target_symbol_colour = MFD_COLOUR_YELLOW;

  00449	b8 04 00 00 00	 mov	 eax, 4
  0044e	6b c8 0d	 imul	 ecx, eax, 13
  00451	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00457	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx

; 2001 : 			target_symbol_background_colour = MFD_COLOUR_DARK_YELLOW;

  0045a	b8 04 00 00 00	 mov	 eax, 4
  0045f	6b c8 0e	 imul	 ecx, eax, 14
  00462	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00468	89 55 f4	 mov	 DWORD PTR _target_symbol_background_colour$[ebp], edx

; 2002 : 		}
; 2003 : 		else

  0046b	eb 22		 jmp	 SHORT $LN16@draw_radar
$LN15@draw_radar:

; 2004 : 		{
; 2005 : 			target_symbol_colour = MFD_COLOUR_RED;

  0046d	b8 04 00 00 00	 mov	 eax, 4
  00472	6b c8 0f	 imul	 ecx, eax, 15
  00475	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0047b	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx

; 2006 : 			target_symbol_background_colour = MFD_COLOUR_DARK_RED;

  0047e	b8 04 00 00 00	 mov	 eax, 4
  00483	6b c8 12	 imul	 ecx, eax, 18
  00486	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0048c	89 55 f4	 mov	 DWORD PTR _target_symbol_background_colour$[ebp], edx
$LN16@draw_radar:

; 2007 : 		}
; 2008 : 
; 2009 : 		// display type number
; 2010 : 	}
; 2011 : 	else

  0048f	eb 22		 jmp	 SHORT $LN14@draw_radar
$LN13@draw_radar:

; 2012 : 	{
; 2013 : 		target_symbol_colour = MFD_COLOUR1;

  00491	b8 04 00 00 00	 mov	 eax, 4
  00496	6b c8 00	 imul	 ecx, eax, 0
  00499	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0049f	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx

; 2014 : 		target_symbol_background_colour = MFD_COLOUR4;

  004a2	b8 04 00 00 00	 mov	 eax, 4
  004a7	6b c8 03	 imul	 ecx, eax, 3
  004aa	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004b0	89 55 f4	 mov	 DWORD PTR _target_symbol_background_colour$[ebp], edx
$LN14@draw_radar:

; 2015 : 	}
; 2016 : 
; 2017 : 	// draw marker
; 2018 : 	if (draw_large_mfd)

  004b3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  004ba	0f 84 6f 02 00
	00		 je	 $LN17@draw_radar

; 2019 : 	{
; 2020 : 		if (get_local_entity_int_value (target, INT_TYPE_GUNSHIP_RADAR_LOS_CLEAR))

  004c0	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  004c4	74 0a		 je	 SHORT $LN53@draw_radar
  004c6	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  004c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  004cb	89 4d 90	 mov	 DWORD PTR tv288[ebp], ecx
  004ce	eb 1d		 jmp	 SHORT $LN54@draw_radar
$LN53@draw_radar:
  004d0	68 e4 07 00 00	 push	 2020			; 000007e4H
  004d5	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  004da	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  004e0	52		 push	 edx
  004e1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004e6	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv288[ebp], 0
$LN54@draw_radar:
  004ed	b8 01 00 00 00	 mov	 eax, 1
  004f2	85 c0		 test	 eax, eax
  004f4	74 09		 je	 SHORT $LN55@draw_radar
  004f6	c7 45 8c 50 00
	00 00		 mov	 DWORD PTR tv295[ebp], 80 ; 00000050H
  004fd	eb 1d		 jmp	 SHORT $LN56@draw_radar
$LN55@draw_radar:
  004ff	68 e4 07 00 00	 push	 2020			; 000007e4H
  00504	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00509	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0050f	51		 push	 ecx
  00510	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00515	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv295[ebp], 0
$LN56@draw_radar:
  0051c	6a 50		 push	 80			; 00000050H
  0051e	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00521	52		 push	 edx
  00522	69 45 90 5c 04
	00 00		 imul	 eax, DWORD PTR tv288[ebp], 1116
  00529	8b 4d 8c	 mov	 ecx, DWORD PTR tv295[ebp]
  0052c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00533	ff d2		 call	 edx
  00535	85 c0		 test	 eax, eax
  00537	0f 84 c6 00 00
	00		 je	 $LN19@draw_radar

; 2021 : 		{
; 2022 : 			float target_true_velocity;
; 2023 : 
; 2024 : 			draw_2d_mono_sprite (large_display_target_symbols_los_mask[target_symbol_type], dx, dy, target_symbol_background_colour);

  0053d	8b 45 f4	 mov	 eax, DWORD PTR _target_symbol_background_colour$[ebp]
  00540	50		 push	 eax
  00541	51		 push	 ecx
  00542	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00547	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0054c	51		 push	 ecx
  0054d	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00552	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00557	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  0055a	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_los_mask@@3PAPBDA[ecx*4]
  00561	52		 push	 edx
  00562	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2025 : 			draw_2d_mono_sprite (large_display_target_symbols_los[target_symbol_type], dx, dy, target_symbol_colour);

  00567	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  0056a	50		 push	 eax
  0056b	51		 push	 ecx
  0056c	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00571	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00576	51		 push	 ecx
  00577	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0057c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00581	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  00584	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_los@@3PAPBDA[ecx*4]
  0058b	52		 push	 edx
  0058c	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2026 : 
; 2027 : 			// draw moving target mark if target is moving
; 2028 : 			target_true_velocity = get_local_entity_vec3d_magnitude (target, VEC3D_TYPE_MOTION_VECTOR);

  00591	6a 06		 push	 6
  00593	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00596	50		 push	 eax
  00597	e8 00 00 00 00	 call	 ?get_local_entity_vec3d_magnitude@@YGMPAUENTITY@@W4VEC3D_TYPES@@@Z ; get_local_entity_vec3d_magnitude
  0059c	d9 5d dc	 fstp	 DWORD PTR _target_true_velocity$3[ebp]

; 2029 : 			if (target_true_velocity > 2.0)

  0059f	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _target_true_velocity$3[ebp]
  005a4	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4000000000000000
  005ac	76 53		 jbe	 SHORT $LN21@draw_radar

; 2030 : 			{
; 2031 : 				draw_2d_mono_sprite (large_display_moving_target_symbol, dx, dy, MFD_BACKGROUND_COLOUR);

  005ae	b8 04 00 00 00	 mov	 eax, 4
  005b3	6b c8 09	 imul	 ecx, eax, 9
  005b6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005bc	52		 push	 edx
  005bd	51		 push	 ecx
  005be	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  005c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c8	51		 push	 ecx
  005c9	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  005ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d3	68 00 00 00 00	 push	 OFFSET ?large_display_moving_target_symbol@@3PADA
  005d8	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2032 : 				draw_2d_mono_sprite (large_display_moving_target_symbol_mask, dx, dy, target_symbol_background_colour);

  005dd	8b 45 f4	 mov	 eax, DWORD PTR _target_symbol_background_colour$[ebp]
  005e0	50		 push	 eax
  005e1	51		 push	 ecx
  005e2	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  005e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ec	51		 push	 ecx
  005ed	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  005f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f7	68 00 00 00 00	 push	 OFFSET ?large_display_moving_target_symbol_mask@@3PADA
  005fc	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN21@draw_radar:

; 2033 : 			}
; 2034 : 		}
; 2035 : 		else

  00601	eb 54		 jmp	 SHORT $LN20@draw_radar
$LN19@draw_radar:

; 2036 : 		{
; 2037 : 			draw_2d_mono_sprite (large_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, target_symbol_background_colour);

  00603	8b 45 f4	 mov	 eax, DWORD PTR _target_symbol_background_colour$[ebp]
  00606	50		 push	 eax
  00607	51		 push	 ecx
  00608	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0060d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00612	51		 push	 ecx
  00613	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00618	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0061d	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  00620	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_no_los_mask@@3PAPBDA[ecx*4]
  00627	52		 push	 edx
  00628	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2038 : 			draw_2d_mono_sprite (large_display_target_symbols_no_los[target_symbol_type], dx, dy, target_symbol_colour);

  0062d	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  00630	50		 push	 eax
  00631	51		 push	 ecx
  00632	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00637	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063c	51		 push	 ecx
  0063d	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00642	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00647	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  0064a	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_no_los@@3PAPBDA[ecx*4]
  00651	52		 push	 edx
  00652	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN20@draw_radar:

; 2039 : 		}
; 2040 : 
; 2041 : 		if (display_on_ase)

  00657	83 7d 1c 00	 cmp	 DWORD PTR _display_on_ase$[ebp], 0
  0065b	74 7f		 je	 SHORT $LN23@draw_radar

; 2042 : 		{
; 2043 : 			// display threat radar ID below symbol
; 2044 : 			char* id = get_threat_id_number(target);

  0065d	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00660	50		 push	 eax
  00661	e8 00 00 00 00	 call	 ?get_threat_id_number@@YGPADPAUENTITY@@@Z ; get_threat_id_number
  00666	89 45 d8	 mov	 DWORD PTR _id$2[ebp], eax

; 2045 : 
; 2046 : 			if (id)

  00669	83 7d d8 00	 cmp	 DWORD PTR _id$2[ebp], 0
  0066d	74 6d		 je	 SHORT $LN23@draw_radar

; 2047 : 			{
; 2048 : 				float x_offset = get_mono_font_string_width(id) * -0.5;

  0066f	8b 45 d8	 mov	 eax, DWORD PTR _id$2[ebp]
  00672	50		 push	 eax
  00673	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00678	dd 5d 8c	 fstp	 QWORD PTR tv560[ebp]
  0067b	f2 0f 10 45 8c	 movsd	 xmm0, QWORD PTR tv560[ebp]
  00680	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00688	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0068c	f3 0f 11 45 d4	 movss	 DWORD PTR _x_offset$1[ebp], xmm0

; 2049 : 
; 2050 : 				set_mono_font_colour(target_symbol_colour);

  00691	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  00694	50		 push	 eax
  00695	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 2051 : 				set_2d_mono_font_position (dx, dy);

  0069a	51		 push	 ecx
  0069b	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  006a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a5	51		 push	 ecx
  006a6	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  006ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b0	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2052 : 				set_mono_font_rel_position (x_offset, 10.0);

  006b5	51		 push	 ecx
  006b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  006be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c3	51		 push	 ecx
  006c4	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x_offset$1[ebp]
  006c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ce	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2053 : 
; 2054 : 				print_mono_font_string(id);

  006d3	8b 45 d8	 mov	 eax, DWORD PTR _id$2[ebp]
  006d6	50		 push	 eax
  006d7	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN23@draw_radar:

; 2055 : 			}
; 2056 : 		}
; 2057 : 
; 2058 : 		if (selected_target)

  006dc	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  006e0	74 48		 je	 SHORT $LN24@draw_radar

; 2059 : 		{
; 2060 : 			draw_2d_mono_sprite (large_display_target_symbol_selected_target_mask, dx, dy, target_symbol_background_colour);

  006e2	8b 45 f4	 mov	 eax, DWORD PTR _target_symbol_background_colour$[ebp]
  006e5	50		 push	 eax
  006e6	51		 push	 ecx
  006e7	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  006ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f1	51		 push	 ecx
  006f2	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  006f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006fc	68 00 00 00 00	 push	 OFFSET ?large_display_target_symbol_selected_target_mask@@3QBDB ; large_display_target_symbol_selected_target_mask
  00701	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2061 : 			draw_2d_mono_sprite (large_display_target_symbol_selected_target, dx, dy, target_symbol_colour);

  00706	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  00709	50		 push	 eax
  0070a	51		 push	 ecx
  0070b	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00710	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00715	51		 push	 ecx
  00716	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0071b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00720	68 00 00 00 00	 push	 OFFSET ?large_display_target_symbol_selected_target@@3QBDB ; large_display_target_symbol_selected_target
  00725	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN24@draw_radar:

; 2062 : 		}
; 2063 : 	}
; 2064 : 	else

  0072a	e9 71 01 00 00	 jmp	 $LN27@draw_radar
$LN17@draw_radar:

; 2065 : 	{
; 2066 : 		if (get_local_entity_int_value (target, INT_TYPE_GUNSHIP_RADAR_LOS_CLEAR))

  0072f	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00733	74 0a		 je	 SHORT $LN57@draw_radar
  00735	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00738	8b 08		 mov	 ecx, DWORD PTR [eax]
  0073a	89 4d 90	 mov	 DWORD PTR tv370[ebp], ecx
  0073d	eb 1d		 jmp	 SHORT $LN58@draw_radar
$LN57@draw_radar:
  0073f	68 12 08 00 00	 push	 2066			; 00000812H
  00744	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00749	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0074f	52		 push	 edx
  00750	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00755	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv370[ebp], 0
$LN58@draw_radar:
  0075c	b8 01 00 00 00	 mov	 eax, 1
  00761	85 c0		 test	 eax, eax
  00763	74 09		 je	 SHORT $LN59@draw_radar
  00765	c7 45 8c 50 00
	00 00		 mov	 DWORD PTR tv377[ebp], 80 ; 00000050H
  0076c	eb 1d		 jmp	 SHORT $LN60@draw_radar
$LN59@draw_radar:
  0076e	68 12 08 00 00	 push	 2066			; 00000812H
  00773	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00778	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0077e	51		 push	 ecx
  0077f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00784	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv377[ebp], 0
$LN60@draw_radar:
  0078b	6a 50		 push	 80			; 00000050H
  0078d	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00790	52		 push	 edx
  00791	69 45 90 5c 04
	00 00		 imul	 eax, DWORD PTR tv370[ebp], 1116
  00798	8b 4d 8c	 mov	 ecx, DWORD PTR tv377[ebp]
  0079b	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  007a2	ff d2		 call	 edx
  007a4	85 c0		 test	 eax, eax
  007a6	74 56		 je	 SHORT $LN25@draw_radar

; 2067 : 		{
; 2068 : 			draw_2d_mono_sprite (small_display_target_symbols_los_mask[target_symbol_type], dx, dy, target_symbol_background_colour);

  007a8	8b 45 f4	 mov	 eax, DWORD PTR _target_symbol_background_colour$[ebp]
  007ab	50		 push	 eax
  007ac	51		 push	 ecx
  007ad	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  007b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b7	51		 push	 ecx
  007b8	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  007bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c2	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  007c5	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_los_mask@@3PAPBDA[ecx*4]
  007cc	52		 push	 edx
  007cd	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2069 : 			draw_2d_mono_sprite (small_display_target_symbols_los[target_symbol_type], dx, dy, target_symbol_colour);

  007d2	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  007d5	50		 push	 eax
  007d6	51		 push	 ecx
  007d7	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  007dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e1	51		 push	 ecx
  007e2	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  007e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ec	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  007ef	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_los@@3PAPBDA[ecx*4]
  007f6	52		 push	 edx
  007f7	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2070 : 		}
; 2071 : 		else

  007fc	eb 54		 jmp	 SHORT $LN26@draw_radar
$LN25@draw_radar:

; 2072 : 		{
; 2073 : 			draw_2d_mono_sprite (small_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, target_symbol_background_colour);

  007fe	8b 45 f4	 mov	 eax, DWORD PTR _target_symbol_background_colour$[ebp]
  00801	50		 push	 eax
  00802	51		 push	 ecx
  00803	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00808	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0080d	51		 push	 ecx
  0080e	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00813	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00818	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  0081b	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_no_los_mask@@3PAPBDA[ecx*4]
  00822	52		 push	 edx
  00823	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2074 : 			draw_2d_mono_sprite (small_display_target_symbols_no_los[target_symbol_type], dx, dy, target_symbol_colour);

  00828	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  0082b	50		 push	 eax
  0082c	51		 push	 ecx
  0082d	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00832	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00837	51		 push	 ecx
  00838	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0083d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00842	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  00845	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_no_los@@3PAPBDA[ecx*4]
  0084c	52		 push	 edx
  0084d	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN26@draw_radar:

; 2075 : 		}
; 2076 : 
; 2077 : 		if (selected_target)

  00852	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00856	74 48		 je	 SHORT $LN27@draw_radar

; 2078 : 		{
; 2079 : 			draw_2d_mono_sprite (small_display_target_symbol_selected_target_mask, dx, dy, target_symbol_background_colour);

  00858	8b 45 f4	 mov	 eax, DWORD PTR _target_symbol_background_colour$[ebp]
  0085b	50		 push	 eax
  0085c	51		 push	 ecx
  0085d	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00862	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00867	51		 push	 ecx
  00868	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0086d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00872	68 00 00 00 00	 push	 OFFSET ?small_display_target_symbol_selected_target_mask@@3QBDB ; small_display_target_symbol_selected_target_mask
  00877	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2080 : 			draw_2d_mono_sprite (small_display_target_symbol_selected_target, dx, dy, target_symbol_colour);

  0087c	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  0087f	50		 push	 eax
  00880	51		 push	 ecx
  00881	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00886	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0088b	51		 push	 ecx
  0088c	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00891	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00896	68 00 00 00 00	 push	 OFFSET ?small_display_target_symbol_selected_target@@3QBDB ; small_display_target_symbol_selected_target
  0089b	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN27@draw_radar:

; 2081 : 		}
; 2082 : 	}
; 2083 : }

  008a0	5f		 pop	 edi
  008a1	5e		 pop	 esi
  008a2	5b		 pop	 ebx
  008a3	8b e5		 mov	 esp, ebp
  008a5	5d		 pop	 ebp
  008a6	c2 18 00	 ret	 24			; 00000018H
?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z ENDP ; draw_radar_target_symbol
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z
_TEXT	SEGMENT
tv90 = -108						; size = 4
_index$1 = -40						; size = 4
_index$2 = -36						; size = 4
_y2$ = -32						; size = 4
_x2$ = -28						; size = 4
_y1$ = -24						; size = 4
_x1$ = -20						; size = 4
_cos_theta$ = -16					; size = 4
_sin_theta$ = -12					; size = 4
_theta$ = -8						; size = 4
_num_segments$ = -4					; size = 4
_arc_size$ = 8						; size = 4
_radius$ = 12						; size = 4
_colour$ = 16						; size = 4
?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z PROC		; draw_radar_arc, COMDAT

; 1884 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1885 : 	int
; 1886 : 		num_segments;
; 1887 : 
; 1888 : 	float
; 1889 : 		theta,
; 1890 : 		sin_theta,
; 1891 : 		cos_theta,
; 1892 : 		x1,
; 1893 : 		y1,
; 1894 : 		x2,
; 1895 : 		y2;
; 1896 : 
; 1897 : 	num_segments = (int) (arc_size * (1.0 / APACHE_RADAR_SCAN_ARC_SEGMENT_SIZE));

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _arc_size$[ebp]
  0000e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4026eb1686b280e6
  00016	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0001a	89 45 fc	 mov	 DWORD PTR _num_segments$[ebp], eax

; 1898 : 
; 1899 : 	if (num_segments > 0)

  0001d	83 7d fc 00	 cmp	 DWORD PTR _num_segments$[ebp], 0
  00021	0f 8e 9f 01 00
	00		 jle	 $LN3@draw_radar

; 1900 : 	{
; 1901 : 		theta = arc_size * 0.5;

  00027	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _arc_size$[ebp]
  0002c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00034	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00038	f3 0f 11 45 f8	 movss	 DWORD PTR _theta$[ebp], xmm0

; 1902 : 
; 1903 : 		sine_cosine (theta, &sin_theta, &cos_theta);

  0003d	8d 45 dc	 lea	 eax, DWORD PTR _index$2[ebp]
  00040	50		 push	 eax
  00041	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _theta$[ebp]
  00046	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@40845f306446f9b4
  0004e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00052	51		 push	 ecx
  00053	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00058	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  0005d	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  00060	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00065	89 45 dc	 mov	 DWORD PTR _index$2[ebp], eax
  00068	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  0006b	f3 0f 10 04 85
	00 00 00 00	 movss	 xmm0, DWORD PTR ?sine_table@@3PAMA[eax*4]
  00074	f3 0f 11 45 f4	 movss	 DWORD PTR _sin_theta$[ebp], xmm0
  00079	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  0007c	05 00 04 00 00	 add	 eax, 1024		; 00000400H
  00081	89 45 dc	 mov	 DWORD PTR _index$2[ebp], eax
  00084	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  00087	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0008c	89 45 dc	 mov	 DWORD PTR _index$2[ebp], eax
  0008f	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  00092	f3 0f 10 04 85
	00 00 00 00	 movss	 xmm0, DWORD PTR ?sine_table@@3PAMA[eax*4]
  0009b	f3 0f 11 45 f0	 movss	 DWORD PTR _cos_theta$[ebp], xmm0

; 1904 : 
; 1905 : 		x1 = -radius * sin_theta;

  000a0	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
  000a5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000ac	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _sin_theta$[ebp]
  000b1	f3 0f 11 45 ec	 movss	 DWORD PTR _x1$[ebp], xmm0

; 1906 : 		y1 = radius * cos_theta;

  000b6	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
  000bb	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _cos_theta$[ebp]
  000c0	f3 0f 11 45 e8	 movss	 DWORD PTR _y1$[ebp], xmm0
$LN2@draw_radar:

; 1907 : 
; 1908 : 		while (num_segments--)

  000c5	8b 45 fc	 mov	 eax, DWORD PTR _num_segments$[ebp]
  000c8	89 45 94	 mov	 DWORD PTR tv90[ebp], eax
  000cb	8b 4d fc	 mov	 ecx, DWORD PTR _num_segments$[ebp]
  000ce	83 e9 01	 sub	 ecx, 1
  000d1	89 4d fc	 mov	 DWORD PTR _num_segments$[ebp], ecx
  000d4	83 7d 94 00	 cmp	 DWORD PTR tv90[ebp], 0
  000d8	0f 84 e8 00 00
	00		 je	 $LN3@draw_radar

; 1909 : 		{
; 1910 : 			theta -= APACHE_RADAR_SCAN_ARC_SEGMENT_SIZE;

  000de	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _theta$[ebp]
  000e3	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3db2b8c2
  000eb	f3 0f 11 45 f8	 movss	 DWORD PTR _theta$[ebp], xmm0

; 1911 : 
; 1912 : 			sine_cosine (theta, &sin_theta, &cos_theta);

  000f0	8d 45 d8	 lea	 eax, DWORD PTR _index$1[ebp]
  000f3	50		 push	 eax
  000f4	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _theta$[ebp]
  000f9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@40845f306446f9b4
  00101	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00105	51		 push	 ecx
  00106	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010b	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00110	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  00113	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00118	89 45 d8	 mov	 DWORD PTR _index$1[ebp], eax
  0011b	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  0011e	f3 0f 10 04 85
	00 00 00 00	 movss	 xmm0, DWORD PTR ?sine_table@@3PAMA[eax*4]
  00127	f3 0f 11 45 f4	 movss	 DWORD PTR _sin_theta$[ebp], xmm0
  0012c	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  0012f	05 00 04 00 00	 add	 eax, 1024		; 00000400H
  00134	89 45 d8	 mov	 DWORD PTR _index$1[ebp], eax
  00137	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  0013a	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0013f	89 45 d8	 mov	 DWORD PTR _index$1[ebp], eax
  00142	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  00145	f3 0f 10 04 85
	00 00 00 00	 movss	 xmm0, DWORD PTR ?sine_table@@3PAMA[eax*4]
  0014e	f3 0f 11 45 f0	 movss	 DWORD PTR _cos_theta$[ebp], xmm0

; 1913 : 
; 1914 : 			x2 = -radius * sin_theta;

  00153	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
  00158	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0015f	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _sin_theta$[ebp]
  00164	f3 0f 11 45 e4	 movss	 DWORD PTR _x2$[ebp], xmm0

; 1915 : 			y2 = radius * cos_theta;

  00169	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
  0016e	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _cos_theta$[ebp]
  00173	f3 0f 11 45 e0	 movss	 DWORD PTR _y2$[ebp], xmm0

; 1916 : 
; 1917 : 			draw_2d_line (x1, y1, x2, y2, colour);

  00178	8b 45 10	 mov	 eax, DWORD PTR _colour$[ebp]
  0017b	50		 push	 eax
  0017c	51		 push	 ecx
  0017d	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00182	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00187	51		 push	 ecx
  00188	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0018d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00192	51		 push	 ecx
  00193	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00198	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019d	51		 push	 ecx
  0019e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x1$[ebp]
  001a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1918 : 
; 1919 : 			x1 = x2;

  001ad	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x2$[ebp]
  001b2	f3 0f 11 45 ec	 movss	 DWORD PTR _x1$[ebp], xmm0

; 1920 : 			y1 = y2;

  001b7	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  001bc	f3 0f 11 45 e8	 movss	 DWORD PTR _y1$[ebp], xmm0

; 1921 : 		}

  001c1	e9 ff fe ff ff	 jmp	 $LN2@draw_radar
$LN3@draw_radar:

; 1922 : 	}
; 1923 : }

  001c6	5f		 pop	 edi
  001c7	5e		 pop	 esi
  001c8	5b		 pop	 ebx
  001c9	8b e5		 mov	 esp, ebp
  001cb	5d		 pop	 ebp
  001cc	c2 0c 00	 ret	 12			; 0000000cH
?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ENDP		; draw_radar_arc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z
_TEXT	SEGMENT
tv214 = -284						; size = 4
tv195 = -284						; size = 4
tv149 = -284						; size = 4
tv207 = -280						; size = 4
tv187 = -280						; size = 4
tv142 = -280						; size = 4
_width$ = -212						; size = 4
_y_adjust$ = -208					; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
_target$ = 8						; size = 4
_target_range$ = 12					; size = 4
_radar$ = 16						; size = 4
?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z PROC ; display_radar_target_details, COMDAT

; 1721 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1722 : 	const char
; 1723 : 		*s;
; 1724 : 	char
; 1725 : 		buffer[200];
; 1726 : 
; 1727 : 	float
; 1728 : 		y_adjust,
; 1729 : 		width;
; 1730 : 
; 1731 : 	ASSERT (radar);

  0000c	83 7d 10 00	 cmp	 DWORD PTR _radar$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@display_ra
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA
  00017	83 c0 0a	 add	 eax, 10			; 0000000aH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_05EMNNHGFM@radar@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@display_ra:

; 1732 : 
; 1733 : 	if (apache_damage.radar)

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  0002f	83 e0 01	 and	 eax, 1
  00032	74 05		 je	 SHORT $LN3@display_ra

; 1734 : 	{
; 1735 : 		return;

  00034	e9 5f 05 00 00	 jmp	 $LN1@display_ra
$LN3@display_ra:

; 1736 : 	}
; 1737 : 
; 1738 : 	if (draw_large_mfd)

  00039	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00040	74 12		 je	 SHORT $LN4@display_ra

; 1739 : 	{
; 1740 : 		y_adjust = -12.0;

  00042	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  0004a	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1741 : 	}
; 1742 : 	else

  00052	eb 10		 jmp	 SHORT $LN5@display_ra
$LN4@display_ra:

; 1743 : 	{
; 1744 : 		y_adjust = -5.0;

  00054	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  0005c	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN5@display_ra:

; 1745 : 	}
; 1746 : 
; 1747 : 	//
; 1748 : 	// name
; 1749 : 	//
; 1750 : 
; 1751 : 	s = get_target_display_name (target, buffer, draw_large_mfd);

  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?draw_large_mfd@@3HA
  00069	50		 push	 eax
  0006a	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00070	51		 push	 ecx
  00071	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00074	52		 push	 edx
  00075	e8 00 00 00 00	 call	 ?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z ; get_target_display_name
  0007a	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1752 : 
; 1753 : 	if (s)

  0007d	83 7d fc 00	 cmp	 DWORD PTR _s$[ebp], 0
  00081	74 4b		 je	 SHORT $LN6@display_ra

; 1754 : 	{
; 1755 : 		set_2d_mono_font_position (-0.8, -1.0);

  00083	51		 push	 ecx
  00084	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0008c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00091	51		 push	 ecx
  00092	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0009a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1756 : 
; 1757 : 		set_mono_font_rel_position (1.0, y_adjust);

  000a4	51		 push	 ecx
  000a5	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b2	51		 push	 ecx
  000b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c0	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1758 : 
; 1759 : 		print_mono_font_string (s);

  000c5	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN6@display_ra:

; 1760 : 	}
; 1761 : 
; 1762 : 	if (target)

  000ce	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  000d2	0f 84 e9 01 00
	00		 je	 $LN10@display_ra

; 1763 : 	{
; 1764 : 		//
; 1765 : 		// range
; 1766 : 		//
; 1767 : 
; 1768 : 		if ((target_range < 1000.0) && (!apache_damage.laser_designator))

  000d8	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  000dd	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  000e5	66 0f 2f c8	 comisd	 xmm1, xmm0
  000e9	76 29		 jbe	 SHORT $LN8@display_ra
  000eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  000f0	c1 e8 06	 shr	 eax, 6
  000f3	83 e0 01	 and	 eax, 1
  000f6	75 1c		 jne	 SHORT $LN8@display_ra

; 1769 : 		{
; 1770 : 			sprintf (buffer, "%dm", (int) target_range);

  000f8	f3 0f 2c 45 0c	 cvttss2si eax, DWORD PTR _target_range$[ebp]
  000fd	50		 push	 eax
  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_03NGNKAJPJ@?$CFdm@
  00103	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00109	51		 push	 ecx
  0010a	e8 00 00 00 00	 call	 _sprintf
  0010f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1771 : 		}
; 1772 : 		else

  00112	eb 29		 jmp	 SHORT $LN9@display_ra
$LN8@display_ra:

; 1773 : 		{
; 1774 : 			sprintf (buffer, "%.1fKm", target_range * (1.0 / 1000.0));

  00114	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  00119	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00121	83 ec 08	 sub	 esp, 8
  00124	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00129	68 00 00 00 00	 push	 OFFSET ??_C@_06OMCABMNO@?$CF?41fKm@
  0012e	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 _sprintf
  0013a	83 c4 10	 add	 esp, 16			; 00000010H
$LN9@display_ra:

; 1775 : 		}
; 1776 : 
; 1777 : 		width = get_mono_font_string_width (buffer);

  0013d	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00149	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 1778 : 
; 1779 : 		set_2d_mono_font_position (0.8, -1.0);

  0014f	51		 push	 ecx
  00150	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00158	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015d	51		 push	 ecx
  0015e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00166	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1780 : 
; 1781 : 		set_mono_font_rel_position (-width, y_adjust);

  00170	51		 push	 ecx
  00171	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00179	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017e	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00186	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0018d	51		 push	 ecx
  0018e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00193	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1782 : 
; 1783 : 		print_mono_font_string (buffer);

  00198	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0019e	50		 push	 eax
  0019f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1784 : 
; 1785 : 		//
; 1786 : 		// no line of sight
; 1787 : 		//
; 1788 : 
; 1789 : 		if (!get_local_entity_int_value (target, INT_TYPE_GUNSHIP_RADAR_LOS_CLEAR))

  001a4	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  001a8	74 0d		 je	 SHORT $LN23@display_ra
  001aa	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  001ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  001af	89 8d e8 fe ff
	ff		 mov	 DWORD PTR tv142[ebp], ecx
  001b5	eb 20		 jmp	 SHORT $LN24@display_ra
$LN23@display_ra:
  001b7	68 fd 06 00 00	 push	 1789			; 000006fdH
  001bc	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  001c1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001c7	52		 push	 edx
  001c8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001cd	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv142[ebp], 0
$LN24@display_ra:
  001d7	b8 01 00 00 00	 mov	 eax, 1
  001dc	85 c0		 test	 eax, eax
  001de	74 0c		 je	 SHORT $LN25@display_ra
  001e0	c7 85 e4 fe ff
	ff 50 00 00 00	 mov	 DWORD PTR tv149[ebp], 80 ; 00000050H
  001ea	eb 20		 jmp	 SHORT $LN26@display_ra
$LN25@display_ra:
  001ec	68 fd 06 00 00	 push	 1789			; 000006fdH
  001f1	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  001f6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  001fc	51		 push	 ecx
  001fd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00202	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv149[ebp], 0
$LN26@display_ra:
  0020c	6a 50		 push	 80			; 00000050H
  0020e	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00211	52		 push	 edx
  00212	69 85 e8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv142[ebp], 1116
  0021c	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR tv149[ebp]
  00222	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00229	ff d2		 call	 edx
  0022b	85 c0		 test	 eax, eax
  0022d	0f 85 8e 00 00
	00		 jne	 $LN10@display_ra

; 1790 : 		{
; 1791 : 			if (draw_large_mfd)

  00233	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0023a	74 12		 je	 SHORT $LN11@display_ra

; 1792 : 			{
; 1793 : 				y_adjust = -25.0;

  0023c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  00244	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1794 : 			}
; 1795 : 			else

  0024c	eb 10		 jmp	 SHORT $LN12@display_ra
$LN11@display_ra:

; 1796 : 			{
; 1797 : 				y_adjust = -12.0;

  0024e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  00256	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN12@display_ra:

; 1798 : 			}
; 1799 : 
; 1800 : 			width = get_mono_font_string_width ("NO LOS");

  0025e	68 00 00 00 00	 push	 OFFSET ??_C@_06HCPKJKPH@NO?5LOS@
  00263	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00268	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 1801 : 
; 1802 : 			set_2d_mono_font_position (0.8, -1.0);

  0026e	51		 push	 ecx
  0026f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00277	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027c	51		 push	 ecx
  0027d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00285	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028a	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1803 : 
; 1804 : 			set_mono_font_rel_position (-width, y_adjust);

  0028f	51		 push	 ecx
  00290	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00298	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029d	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  002a5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  002ac	51		 push	 ecx
  002ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1805 : 
; 1806 : 			print_mono_font_string ("NO LOS");

  002b7	68 00 00 00 00	 push	 OFFSET ??_C@_06HCPKJKPH@NO?5LOS@
  002bc	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN10@display_ra:

; 1807 : 		}
; 1808 : 	}
; 1809 : 
; 1810 : 	//
; 1811 : 	// auto
; 1812 : 	//
; 1813 : 
; 1814 : 	if (radar->auto_target)

  002c1	8b 45 10	 mov	 eax, DWORD PTR _radar$[ebp]
  002c4	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  002c8	74 77		 je	 SHORT $LN13@display_ra

; 1815 : 	{
; 1816 : 		if (draw_large_mfd)

  002ca	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  002d1	74 12		 je	 SHORT $LN14@display_ra

; 1817 : 		{
; 1818 : 			y_adjust = 18.0;

  002d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41900000
  002db	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1819 : 		}
; 1820 : 		else

  002e3	eb 10		 jmp	 SHORT $LN15@display_ra
$LN14@display_ra:

; 1821 : 		{
; 1822 : 			y_adjust = 9.0;

  002e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41100000
  002ed	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN15@display_ra:

; 1823 : 		}
; 1824 : 
; 1825 : 		set_2d_mono_font_position (-0.9, 1.0);

  002f5	51		 push	 ecx
  002f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00303	51		 push	 ecx
  00304	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  0030c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00311	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1826 : 
; 1827 : 		set_mono_font_rel_position (1.0, y_adjust);

  00316	51		 push	 ecx
  00317	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0031f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00324	51		 push	 ecx
  00325	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0032d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00332	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1828 : 
; 1829 : 		print_mono_font_string ("AUTO");

  00337	68 00 00 00 00	 push	 OFFSET ??_C@_04LMMJFDCN@AUTO@
  0033c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN13@display_ra:

; 1830 : 	}
; 1831 : 
; 1832 : 	//
; 1833 : 	// locked
; 1834 : 	//
; 1835 : 
; 1836 : 	if (radar->target_locked)

  00341	8b 45 10	 mov	 eax, DWORD PTR _radar$[ebp]
  00344	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00348	74 77		 je	 SHORT $LN16@display_ra

; 1837 : 	{
; 1838 : 		if (draw_large_mfd)

  0034a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00351	74 12		 je	 SHORT $LN17@display_ra

; 1839 : 		{
; 1840 : 			y_adjust = -25.0;

  00353	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  0035b	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1841 : 		}
; 1842 : 		else

  00363	eb 10		 jmp	 SHORT $LN18@display_ra
$LN17@display_ra:

; 1843 : 		{
; 1844 : 			y_adjust = -12.0;

  00365	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  0036d	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN18@display_ra:

; 1845 : 		}
; 1846 : 
; 1847 : 		set_2d_mono_font_position (-0.8, -1.0);

  00375	51		 push	 ecx
  00376	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0037e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00383	51		 push	 ecx
  00384	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0038c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00391	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1848 : 
; 1849 : 		set_mono_font_rel_position (1.0, y_adjust);

  00396	51		 push	 ecx
  00397	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0039f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a4	51		 push	 ecx
  003a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1850 : 
; 1851 : 		print_mono_font_string ("LOCKED");

  003b7	68 00 00 00 00	 push	 OFFSET ??_C@_06KODELPLK@LOCKED@
  003bc	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN16@display_ra:

; 1852 : 	}
; 1853 : // Jabberwock 031107 Designated targets
; 1854 : 
; 1855 : 	target = get_local_entity_parent (get_gunship_entity (), LIST_TYPE_TARGET);

  003c1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  003c8	74 0f		 je	 SHORT $LN27@display_ra
  003ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  003cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  003d1	89 8d e8 fe ff
	ff		 mov	 DWORD PTR tv187[ebp], ecx
  003d7	eb 27		 jmp	 SHORT $LN28@display_ra
$LN27@display_ra:
  003d9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA
  003df	81 c2 86 00 00
	00		 add	 edx, 134		; 00000086H
  003e5	52		 push	 edx
  003e6	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  003eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003f0	50		 push	 eax
  003f1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003f6	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv187[ebp], 0
$LN28@display_ra:
  00400	b9 01 00 00 00	 mov	 ecx, 1
  00405	85 c9		 test	 ecx, ecx
  00407	74 0c		 je	 SHORT $LN29@display_ra
  00409	c7 85 e4 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv195[ebp], 38 ; 00000026H
  00413	eb 27		 jmp	 SHORT $LN30@display_ra
$LN29@display_ra:
  00415	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA
  0041b	81 c2 86 00 00
	00		 add	 edx, 134		; 00000086H
  00421	52		 push	 edx
  00422	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00427	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0042c	50		 push	 eax
  0042d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00432	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv195[ebp], 0
$LN30@display_ra:
  0043c	6a 26		 push	 38			; 00000026H
  0043e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00444	51		 push	 ecx
  00445	69 95 e8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv187[ebp], 180
  0044f	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR tv195[ebp]
  00455	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0045c	ff d1		 call	 ecx
  0045e	89 45 08	 mov	 DWORD PTR _target$[ebp], eax

; 1856 : 
; 1857 : 	if (target && get_local_entity_parent (target, LIST_TYPE_DESIGNATED_TARGET))

  00461	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00465	0f 84 2d 01 00
	00		 je	 $LN19@display_ra
  0046b	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0046f	74 0d		 je	 SHORT $LN31@display_ra
  00471	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00474	8b 08		 mov	 ecx, DWORD PTR [eax]
  00476	89 8d e8 fe ff
	ff		 mov	 DWORD PTR tv207[ebp], ecx
  0047c	eb 20		 jmp	 SHORT $LN32@display_ra
$LN31@display_ra:
  0047e	68 41 07 00 00	 push	 1857			; 00000741H
  00483	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00488	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0048e	52		 push	 edx
  0048f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00494	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv207[ebp], 0
$LN32@display_ra:
  0049e	b8 01 00 00 00	 mov	 eax, 1
  004a3	85 c0		 test	 eax, eax
  004a5	74 0c		 je	 SHORT $LN33@display_ra
  004a7	c7 85 e4 fe ff
	ff 0a 00 00 00	 mov	 DWORD PTR tv214[ebp], 10 ; 0000000aH
  004b1	eb 20		 jmp	 SHORT $LN34@display_ra
$LN33@display_ra:
  004b3	68 41 07 00 00	 push	 1857			; 00000741H
  004b8	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  004bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  004c3	51		 push	 ecx
  004c4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004c9	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv214[ebp], 0
$LN34@display_ra:
  004d3	6a 0a		 push	 10			; 0000000aH
  004d5	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  004d8	52		 push	 edx
  004d9	69 85 e8 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv207[ebp], 180
  004e3	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR tv214[ebp]
  004e9	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  004f0	ff d2		 call	 edx
  004f2	85 c0		 test	 eax, eax
  004f4	0f 84 9e 00 00
	00		 je	 $LN19@display_ra

; 1858 : 	{
; 1859 : 		if (draw_large_mfd)

  004fa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00501	74 12		 je	 SHORT $LN20@display_ra

; 1860 : 		{
; 1861 : 			y_adjust = -25.0;

  00503	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  0050b	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1862 : 		}
; 1863 : 		else

  00513	eb 10		 jmp	 SHORT $LN21@display_ra
$LN20@display_ra:

; 1864 : 		{
; 1865 : 			y_adjust = -12.0;

  00515	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  0051d	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN21@display_ra:

; 1866 : 		}
; 1867 : 
; 1868 : 		width = get_mono_font_string_width ("MARKED");

  00525	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  0052a	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0052f	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 1869 : 
; 1870 : 		set_2d_mono_font_position (1.0, -1.0);

  00535	51		 push	 ecx
  00536	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0053e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00543	51		 push	 ecx
  00544	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0054c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00551	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1871 : 
; 1872 : 		set_mono_font_rel_position (-width -1.0, y_adjust);

  00556	51		 push	 ecx
  00557	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0055f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00564	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  0056c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00573	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00577	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0057f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00583	51		 push	 ecx
  00584	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00589	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1873 : 
; 1874 : 		print_mono_font_string ("MARKED");

  0058e	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  00593	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN19@display_ra:
$LN1@display_ra:

; 1875 : 	}
; 1876 : // Jabberwock 031107 ends
; 1877 : }

  00598	5f		 pop	 edi
  00599	5e		 pop	 esi
  0059a	5b		 pop	 ebx
  0059b	8b e5		 mov	 esp, ebp
  0059d	5d		 pop	 ebp
  0059e	c2 0c 00	 ret	 12			; 0000000cH
?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z ENDP ; display_radar_target_details
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?display_radar_scan_range@@YGXMH@Z
_TEXT	SEGMENT
_y_adjust$ = -16					; size = 4
_width$ = -12						; size = 4
_s$ = -8						; size = 8
_scan_range$ = 8					; size = 4
_ground_radar$ = 12					; size = 4
?display_radar_scan_range@@YGXMH@Z PROC			; display_radar_scan_range, COMDAT

; 1662 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1663 : //VJ 030807 radar range adjustable
; 1664 : 	char
; 1665 : 		s[8];
; 1666 : 
; 1667 : 	float
; 1668 : 		width,
; 1669 : 		y_adjust;
; 1670 : 
; 1671 : 	if (ground_radar && radar_zoomed)

  00009	83 7d 0c 00	 cmp	 DWORD PTR _ground_radar$[ebp], 0
  0000d	74 1f		 je	 SHORT $LN2@display_ra
  0000f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?radar_zoomed@@3HA, 0
  00016	74 16		 je	 SHORT $LN2@display_ra

; 1672 : 		sprintf(s, "ZOOM");

  00018	68 00 00 00 00	 push	 OFFSET ??_C@_04LGBIGMFG@ZOOM@
  0001d	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _sprintf
  00026	83 c4 08	 add	 esp, 8
  00029	e9 53 01 00 00	 jmp	 $LN13@display_ra
$LN2@display_ra:

; 1673 : 	else if (scan_range == APACHE_RADAR_SCAN_RANGE_500)

  0002e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  00033	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?APACHE_RADAR_SCAN_RANGE_500@@3MA
  0003a	9f		 lahf
  0003b	f6 c4 44	 test	 ah, 68			; 00000044H
  0003e	7a 26		 jp	 SHORT $LN4@display_ra

; 1674 : 	{
; 1675 : 		sprintf(s,"%.0fm",APACHE_RADAR_SCAN_RANGE_500);

  00040	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?APACHE_RADAR_SCAN_RANGE_500@@3MA
  00048	83 ec 08	 sub	 esp, 8
  0004b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_05LIPABGF@?$CF?40fm@
  00055	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 _sprintf
  0005e	83 c4 10	 add	 esp, 16			; 00000010H
  00061	e9 1b 01 00 00	 jmp	 $LN13@display_ra
$LN4@display_ra:

; 1676 : 	}
; 1677 : 	else if (scan_range == APACHE_RADAR_SCAN_RANGE_1000)

  00066	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  0006b	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?APACHE_RADAR_SCAN_RANGE_1000@@3MA
  00072	9f		 lahf
  00073	f6 c4 44	 test	 ah, 68			; 00000044H
  00076	7a 32		 jp	 SHORT $LN6@display_ra

; 1678 : 	{
; 1679 : 		sprintf(s,"%.0fKm",APACHE_RADAR_SCAN_RANGE_1000/1000);

  00078	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?APACHE_RADAR_SCAN_RANGE_1000@@3MA
  00080	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  00088	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0008c	83 ec 08	 sub	 esp, 8
  0008f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_06NBEADFGO@?$CF?40fKm@
  00099	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 _sprintf
  000a2	83 c4 10	 add	 esp, 16			; 00000010H
  000a5	e9 d7 00 00 00	 jmp	 $LN13@display_ra
$LN6@display_ra:

; 1680 : 	}
; 1681 : 	else if (scan_range == APACHE_RADAR_SCAN_RANGE_2000)

  000aa	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  000af	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?APACHE_RADAR_SCAN_RANGE_2000@@3MA
  000b6	9f		 lahf
  000b7	f6 c4 44	 test	 ah, 68			; 00000044H
  000ba	7a 32		 jp	 SHORT $LN8@display_ra

; 1682 : 	{
; 1683 : 		sprintf(s,"%.0fKm",APACHE_RADAR_SCAN_RANGE_2000/1000);

  000bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?APACHE_RADAR_SCAN_RANGE_2000@@3MA
  000c4	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  000cc	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000d0	83 ec 08	 sub	 esp, 8
  000d3	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000d8	68 00 00 00 00	 push	 OFFSET ??_C@_06NBEADFGO@?$CF?40fKm@
  000dd	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 _sprintf
  000e6	83 c4 10	 add	 esp, 16			; 00000010H
  000e9	e9 93 00 00 00	 jmp	 $LN13@display_ra
$LN8@display_ra:

; 1684 : 	}
; 1685 : 	else if (scan_range == APACHE_RADAR_SCAN_RANGE_4000)

  000ee	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  000f3	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?APACHE_RADAR_SCAN_RANGE_4000@@3MA
  000fa	9f		 lahf
  000fb	f6 c4 44	 test	 ah, 68			; 00000044H
  000fe	7a 2f		 jp	 SHORT $LN10@display_ra

; 1686 : 	{
; 1687 : 		sprintf(s,"%.0fKm",APACHE_RADAR_SCAN_RANGE_4000/1000);

  00100	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?APACHE_RADAR_SCAN_RANGE_4000@@3MA
  00108	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  00110	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00114	83 ec 08	 sub	 esp, 8
  00117	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0011c	68 00 00 00 00	 push	 OFFSET ??_C@_06NBEADFGO@?$CF?40fKm@
  00121	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 _sprintf
  0012a	83 c4 10	 add	 esp, 16			; 00000010H
  0012d	eb 52		 jmp	 SHORT $LN13@display_ra
$LN10@display_ra:

; 1688 : 	}
; 1689 : 	else if (scan_range == APACHE_RADAR_SCAN_RANGE_8000)

  0012f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  00134	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?APACHE_RADAR_SCAN_RANGE_8000@@3MA
  0013b	9f		 lahf
  0013c	f6 c4 44	 test	 ah, 68			; 00000044H
  0013f	7a 2f		 jp	 SHORT $LN12@display_ra

; 1690 : 	{
; 1691 : 		sprintf(s,"%.0fKm",APACHE_RADAR_SCAN_RANGE_8000/1000);

  00141	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?APACHE_RADAR_SCAN_RANGE_8000@@3MA
  00149	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  00151	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00155	83 ec 08	 sub	 esp, 8
  00158	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0015d	68 00 00 00 00	 push	 OFFSET ??_C@_06NBEADFGO@?$CF?40fKm@
  00162	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  00165	50		 push	 eax
  00166	e8 00 00 00 00	 call	 _sprintf
  0016b	83 c4 10	 add	 esp, 16			; 00000010H

; 1692 : 	}
; 1693 : 	else

  0016e	eb 11		 jmp	 SHORT $LN13@display_ra
$LN12@display_ra:

; 1694 : 	{
; 1695 : 		sprintf(s,"XXX");

  00170	68 00 00 00 00	 push	 OFFSET ??_C@_03MAMPKPPK@XXX@
  00175	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  00178	50		 push	 eax
  00179	e8 00 00 00 00	 call	 _sprintf
  0017e	83 c4 08	 add	 esp, 8
$LN13@display_ra:

; 1696 : 	}
; 1697 : 
; 1698 : 	width = get_mono_font_string_width (s);

  00181	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  00184	50		 push	 eax
  00185	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0018a	d9 5d f4	 fstp	 DWORD PTR _width$[ebp]

; 1699 : 
; 1700 : 	if (draw_large_mfd)

  0018d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00194	74 0f		 je	 SHORT $LN14@display_ra

; 1701 : 	{
; 1702 : 		y_adjust = 5.0;

  00196	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  0019e	f3 0f 11 45 f0	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1703 : 	}
; 1704 : 	else

  001a3	eb 0d		 jmp	 SHORT $LN15@display_ra
$LN14@display_ra:

; 1705 : 	{
; 1706 : 		y_adjust = 2.0;

  001a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  001ad	f3 0f 11 45 f0	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN15@display_ra:

; 1707 : 	}
; 1708 : 
; 1709 : 	set_2d_mono_font_position (0.9, 1.0);

  001b2	51		 push	 ecx
  001b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c0	51		 push	 ecx
  001c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  001c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ce	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1710 : 
; 1711 : 	set_mono_font_rel_position (-width, y_adjust);

  001d3	51		 push	 ecx
  001d4	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  001d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001de	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _width$[ebp]
  001e3	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001ea	51		 push	 ecx
  001eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f0	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1712 : 
; 1713 : 	print_mono_font_string (s);

  001f5	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  001f8	50		 push	 eax
  001f9	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1714 : }

  001fe	5f		 pop	 edi
  001ff	5e		 pop	 esi
  00200	5b		 pop	 ebx
  00201	8b e5		 mov	 esp, ebp
  00203	5d		 pop	 ebp
  00204	c2 08 00	 ret	 8
?display_radar_scan_range@@YGXMH@Z ENDP			; display_radar_scan_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_field_of_regard_and_view_boxes@@YGXXZ
_TEXT	SEGMENT
_y$ = -8						; size = 4
_x$ = -4						; size = 4
?draw_field_of_regard_and_view_boxes@@YGXXZ PROC	; draw_field_of_regard_and_view_boxes, COMDAT

; 1592 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1593 : 	float
; 1594 : 		x,
; 1595 : 		y;
; 1596 : 
; 1597 : 	if (draw_large_mfd)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00010	0f 84 93 05 00
	00		 je	 $LN2@draw_field

; 1598 : 	{
; 1599 : 		draw_2d_line (-0.3000, -0.7750,  0.3000, -0.7750, MFD_COLOUR1);

  00016	b8 04 00 00 00	 mov	 eax, 4
  0001b	6b c8 00	 imul	 ecx, eax, 0
  0001e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00024	52		 push	 edx
  00025	51		 push	 ecx
  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf466666
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	51		 push	 ecx
  00034	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  0003c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00041	51		 push	 ecx
  00042	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf466666
  0004a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004f	51		 push	 ecx
  00050	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  00058	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1600 : 		draw_2d_line (-0.3000, -1.0000,  0.3000, -1.0000, MFD_COLOUR1);

  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	6b c8 00	 imul	 ecx, eax, 0
  0006a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00070	52		 push	 edx
  00071	51		 push	 ecx
  00072	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0007a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007f	51		 push	 ecx
  00080	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00088	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008d	51		 push	 ecx
  0008e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00096	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009b	51		 push	 ecx
  0009c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  000a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1601 : 		draw_2d_line (-0.3000, -0.7750, -0.3000, -1.0000, MFD_COLOUR1);

  000ae	b8 04 00 00 00	 mov	 eax, 4
  000b3	6b c8 00	 imul	 ecx, eax, 0
  000b6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000bc	52		 push	 edx
  000bd	51		 push	 ecx
  000be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cb	51		 push	 ecx
  000cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  000d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d9	51		 push	 ecx
  000da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf466666
  000e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e7	51		 push	 ecx
  000e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  000f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1602 : 		draw_2d_line ( 0.3000, -0.7750,  0.3000, -1.0000, MFD_COLOUR1);

  000fa	b8 04 00 00 00	 mov	 eax, 4
  000ff	6b c8 00	 imul	 ecx, eax, 0
  00102	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00108	52		 push	 edx
  00109	51		 push	 ecx
  0010a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00112	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00117	51		 push	 ecx
  00118	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00120	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00125	51		 push	 ecx
  00126	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf466666
  0012e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00133	51		 push	 ecx
  00134	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  0013c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00141	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1603 : 
; 1604 : 		draw_2d_line ( 0.0000, -0.7750,  0.0000, -0.7950, MFD_COLOUR1);

  00146	b8 04 00 00 00	 mov	 eax, 4
  0014b	6b c8 00	 imul	 ecx, eax, 0
  0014e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00154	52		 push	 edx
  00155	51		 push	 ecx
  00156	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4b851f
  0015e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00163	51		 push	 ecx
  00164	0f 57 c0	 xorps	 xmm0, xmm0
  00167	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016c	51		 push	 ecx
  0016d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf466666
  00175	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017a	51		 push	 ecx
  0017b	0f 57 c0	 xorps	 xmm0, xmm0
  0017e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00183	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1605 : 		draw_2d_line (-0.2250, -0.7750, -0.2250, -0.7950, MFD_COLOUR1);

  00188	b8 04 00 00 00	 mov	 eax, 4
  0018d	6b c8 00	 imul	 ecx, eax, 0
  00190	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00196	52		 push	 edx
  00197	51		 push	 ecx
  00198	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4b851f
  001a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a5	51		 push	 ecx
  001a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be666666
  001ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b3	51		 push	 ecx
  001b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf466666
  001bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c1	51		 push	 ecx
  001c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be666666
  001ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cf	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1606 : 		draw_2d_line ( 0.2250, -0.7750,  0.2250, -0.7950, MFD_COLOUR1);

  001d4	b8 04 00 00 00	 mov	 eax, 4
  001d9	6b c8 00	 imul	 ecx, eax, 0
  001dc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001e2	52		 push	 edx
  001e3	51		 push	 ecx
  001e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4b851f
  001ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f1	51		 push	 ecx
  001f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e666666
  001fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ff	51		 push	 ecx
  00200	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf466666
  00208	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020d	51		 push	 ecx
  0020e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e666666
  00216	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1607 : 
; 1608 : 		draw_2d_line ( 0.0000, -0.9800,  0.0000, -1.0000, MFD_COLOUR1);

  00220	b8 04 00 00 00	 mov	 eax, 4
  00225	6b c8 00	 imul	 ecx, eax, 0
  00228	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0022e	52		 push	 edx
  0022f	51		 push	 ecx
  00230	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00238	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023d	51		 push	 ecx
  0023e	0f 57 c0	 xorps	 xmm0, xmm0
  00241	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00246	51		 push	 ecx
  00247	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  0024f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00254	51		 push	 ecx
  00255	0f 57 c0	 xorps	 xmm0, xmm0
  00258	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1609 : 		draw_2d_line (-0.2250, -0.9800, -0.2250, -1.0000, MFD_COLOUR1);

  00262	b8 04 00 00 00	 mov	 eax, 4
  00267	6b c8 00	 imul	 ecx, eax, 0
  0026a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00270	52		 push	 edx
  00271	51		 push	 ecx
  00272	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0027a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027f	51		 push	 ecx
  00280	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be666666
  00288	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028d	51		 push	 ecx
  0028e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00296	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029b	51		 push	 ecx
  0029c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be666666
  002a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1610 : 		draw_2d_line ( 0.2250, -0.9800,  0.2250, -1.0000, MFD_COLOUR1);

  002ae	b8 04 00 00 00	 mov	 eax, 4
  002b3	6b c8 00	 imul	 ecx, eax, 0
  002b6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002bc	52		 push	 edx
  002bd	51		 push	 ecx
  002be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  002c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002cb	51		 push	 ecx
  002cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e666666
  002d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d9	51		 push	 ecx
  002da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  002e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e7	51		 push	 ecx
  002e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e666666
  002f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1611 : 
; 1612 : 		draw_2d_line (-0.3000, -0.8500, -0.2800, -0.8500, MFD_COLOUR1);

  002fa	b8 04 00 00 00	 mov	 eax, 4
  002ff	6b c8 00	 imul	 ecx, eax, 0
  00302	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00308	52		 push	 edx
  00309	51		 push	 ecx
  0030a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  00312	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00317	51		 push	 ecx
  00318	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8f5c29
  00320	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00325	51		 push	 ecx
  00326	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  0032e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00333	51		 push	 ecx
  00334	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  0033c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00341	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1613 : 		draw_2d_line ( 0.3000, -0.8500,  0.2800, -0.8500, MFD_COLOUR1);

  00346	b8 04 00 00 00	 mov	 eax, 4
  0034b	6b c8 00	 imul	 ecx, eax, 0
  0034e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00354	52		 push	 edx
  00355	51		 push	 ecx
  00356	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  0035e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00363	51		 push	 ecx
  00364	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8f5c29
  0036c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00371	51		 push	 ecx
  00372	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  0037a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037f	51		 push	 ecx
  00380	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00388	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1614 : 
; 1615 : 		x = eo_azimuth / eo_max_azimuth * 0.3;

  00392	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  0039a	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_max_azimuth@@3MA
  003a2	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  003a6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd3333333333333
  003ae	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003b2	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0

; 1616 : 		y = (eo_elevation / eo_min_elevation * -0.15) - 0.85;

  003b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  003bf	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_min_elevation@@3MA
  003c7	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  003cb	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfc3333333333333
  003d3	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3feb333333333333
  003db	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003df	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0

; 1617 : 
; 1618 : 		draw_2d_line (x - 0.0400, y - 0.0300, x + 0.0400, y - 0.0300, MFD_COLOUR1);

  003e4	b8 04 00 00 00	 mov	 eax, 4
  003e9	6b c8 00	 imul	 ecx, eax, 0
  003ec	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003f2	52		 push	 edx
  003f3	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  003f8	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  00400	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00404	51		 push	 ecx
  00405	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040a	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0040f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00417	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0041b	51		 push	 ecx
  0041c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00421	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00426	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  0042e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00432	51		 push	 ecx
  00433	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00438	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0043d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00445	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00449	51		 push	 ecx
  0044a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1619 : 		draw_2d_line (x - 0.0400, y + 0.0300, x + 0.0400, y + 0.0300, MFD_COLOUR1);

  00454	b8 04 00 00 00	 mov	 eax, 4
  00459	6b c8 00	 imul	 ecx, eax, 0
  0045c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00462	52		 push	 edx
  00463	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00468	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  00470	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00474	51		 push	 ecx
  00475	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047a	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0047f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00487	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0048b	51		 push	 ecx
  0048c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00491	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00496	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  0049e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004a2	51		 push	 ecx
  004a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a8	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  004ad	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  004b5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004b9	51		 push	 ecx
  004ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004bf	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1620 : 		draw_2d_line (x - 0.0400, y - 0.0300, x - 0.0400, y + 0.0300, MFD_COLOUR1);

  004c4	b8 04 00 00 00	 mov	 eax, 4
  004c9	6b c8 00	 imul	 ecx, eax, 0
  004cc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004d2	52		 push	 edx
  004d3	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  004d8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  004e0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004e4	51		 push	 ecx
  004e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ea	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  004ef	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  004f7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004fb	51		 push	 ecx
  004fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00501	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00506	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  0050e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00512	51		 push	 ecx
  00513	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00518	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0051d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00525	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00529	51		 push	 ecx
  0052a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0052f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1621 : 		draw_2d_line (x + 0.0400, y - 0.0300, x + 0.0400, y + 0.0300, MFD_COLOUR1);

  00534	b8 04 00 00 00	 mov	 eax, 4
  00539	6b c8 00	 imul	 ecx, eax, 0
  0053c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00542	52		 push	 edx
  00543	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00548	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  00550	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00554	51		 push	 ecx
  00555	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0055a	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0055f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00567	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0056b	51		 push	 ecx
  0056c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00571	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00576	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  0057e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00582	51		 push	 ecx
  00583	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00588	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0058d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00595	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00599	51		 push	 ecx
  0059a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1622 : 	}
; 1623 : 	else

  005a4	e9 8e 05 00 00	 jmp	 $LN3@draw_field
$LN2@draw_field:

; 1624 : 	{
; 1625 : 		draw_2d_line (-0.2000, -0.8250,  0.2000, -0.8250, MFD_COLOUR1);

  005a9	b8 04 00 00 00	 mov	 eax, 4
  005ae	6b c8 00	 imul	 ecx, eax, 0
  005b1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005b7	52		 push	 edx
  005b8	51		 push	 ecx
  005b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf533333
  005c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c6	51		 push	 ecx
  005c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  005cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d4	51		 push	 ecx
  005d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf533333
  005dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e2	51		 push	 ecx
  005e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  005eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1626 : 		draw_2d_line (-0.2000, -0.9750,  0.2000, -0.9750, MFD_COLOUR1);

  005f5	b8 04 00 00 00	 mov	 eax, 4
  005fa	6b c8 00	 imul	 ecx, eax, 0
  005fd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00603	52		 push	 edx
  00604	51		 push	 ecx
  00605	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf79999a
  0060d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00612	51		 push	 ecx
  00613	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0061b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00620	51		 push	 ecx
  00621	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf79999a
  00629	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0062e	51		 push	 ecx
  0062f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00637	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1627 : 		draw_2d_line (-0.2000, -0.8250, -0.2000, -0.9750, MFD_COLOUR1);

  00641	b8 04 00 00 00	 mov	 eax, 4
  00646	6b c8 00	 imul	 ecx, eax, 0
  00649	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0064f	52		 push	 edx
  00650	51		 push	 ecx
  00651	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf79999a
  00659	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0065e	51		 push	 ecx
  0065f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00667	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0066c	51		 push	 ecx
  0066d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf533333
  00675	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0067a	51		 push	 ecx
  0067b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00683	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00688	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1628 : 		draw_2d_line ( 0.2000, -0.8250,  0.2000, -0.9750, MFD_COLOUR1);

  0068d	b8 04 00 00 00	 mov	 eax, 4
  00692	6b c8 00	 imul	 ecx, eax, 0
  00695	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0069b	52		 push	 edx
  0069c	51		 push	 ecx
  0069d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf79999a
  006a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006aa	51		 push	 ecx
  006ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  006b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b8	51		 push	 ecx
  006b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf533333
  006c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c6	51		 push	 ecx
  006c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  006cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1629 : 
; 1630 : 		draw_2d_line ( 0.0000, -0.8250,  0.0000, -0.8475, MFD_COLOUR1);

  006d9	b8 04 00 00 00	 mov	 eax, 4
  006de	6b c8 00	 imul	 ecx, eax, 0
  006e1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006e7	52		 push	 edx
  006e8	51		 push	 ecx
  006e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf58f5c3
  006f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f6	51		 push	 ecx
  006f7	0f 57 c0	 xorps	 xmm0, xmm0
  006fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ff	51		 push	 ecx
  00700	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf533333
  00708	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0070d	51		 push	 ecx
  0070e	0f 57 c0	 xorps	 xmm0, xmm0
  00711	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00716	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1631 : 		draw_2d_line (-0.1500, -0.8250, -0.1500, -0.8475, MFD_COLOUR1);

  0071b	b8 04 00 00 00	 mov	 eax, 4
  00720	6b c8 00	 imul	 ecx, eax, 0
  00723	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00729	52		 push	 edx
  0072a	51		 push	 ecx
  0072b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf58f5c3
  00733	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00738	51		 push	 ecx
  00739	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  00741	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00746	51		 push	 ecx
  00747	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf533333
  0074f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00754	51		 push	 ecx
  00755	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  0075d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00762	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1632 : 		draw_2d_line ( 0.1500, -0.8250,  0.1500, -0.8475, MFD_COLOUR1);

  00767	b8 04 00 00 00	 mov	 eax, 4
  0076c	6b c8 00	 imul	 ecx, eax, 0
  0076f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00775	52		 push	 edx
  00776	51		 push	 ecx
  00777	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf58f5c3
  0077f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00784	51		 push	 ecx
  00785	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  0078d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00792	51		 push	 ecx
  00793	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf533333
  0079b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a0	51		 push	 ecx
  007a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  007a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ae	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1633 : 
; 1634 : 		draw_2d_line ( 0.0000, -0.9525,  0.0000, -0.9750, MFD_COLOUR1);

  007b3	b8 04 00 00 00	 mov	 eax, 4
  007b8	6b c8 00	 imul	 ecx, eax, 0
  007bb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007c1	52		 push	 edx
  007c2	51		 push	 ecx
  007c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf79999a
  007cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d0	51		 push	 ecx
  007d1	0f 57 c0	 xorps	 xmm0, xmm0
  007d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d9	51		 push	 ecx
  007da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf73d70a
  007e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e7	51		 push	 ecx
  007e8	0f 57 c0	 xorps	 xmm0, xmm0
  007eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1635 : 		draw_2d_line (-0.1500, -0.9525, -0.1500, -0.9750, MFD_COLOUR1);

  007f5	b8 04 00 00 00	 mov	 eax, 4
  007fa	6b c8 00	 imul	 ecx, eax, 0
  007fd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00803	52		 push	 edx
  00804	51		 push	 ecx
  00805	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf79999a
  0080d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00812	51		 push	 ecx
  00813	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  0081b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00820	51		 push	 ecx
  00821	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf73d70a
  00829	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0082e	51		 push	 ecx
  0082f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  00837	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0083c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1636 : 		draw_2d_line ( 0.1500, -0.9525,  0.1500, -0.9750, MFD_COLOUR1);

  00841	b8 04 00 00 00	 mov	 eax, 4
  00846	6b c8 00	 imul	 ecx, eax, 0
  00849	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0084f	52		 push	 edx
  00850	51		 push	 ecx
  00851	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf79999a
  00859	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0085e	51		 push	 ecx
  0085f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00867	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0086c	51		 push	 ecx
  0086d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf73d70a
  00875	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0087a	51		 push	 ecx
  0087b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00883	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00888	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1637 : 
; 1638 : 		draw_2d_line (-0.2000, -0.8750, -0.1775, -0.8750, MFD_COLOUR1);

  0088d	b8 04 00 00 00	 mov	 eax, 4
  00892	6b c8 00	 imul	 ecx, eax, 0
  00895	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0089b	52		 push	 edx
  0089c	51		 push	 ecx
  0089d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf600000
  008a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008aa	51		 push	 ecx
  008ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be35c28f
  008b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008b8	51		 push	 ecx
  008b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf600000
  008c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c6	51		 push	 ecx
  008c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  008cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1639 : 		draw_2d_line ( 0.2000, -0.8750,  0.1775, -0.8750, MFD_COLOUR1);

  008d9	b8 04 00 00 00	 mov	 eax, 4
  008de	6b c8 00	 imul	 ecx, eax, 0
  008e1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008e7	52		 push	 edx
  008e8	51		 push	 ecx
  008e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf600000
  008f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f6	51		 push	 ecx
  008f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e35c28f
  008ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00904	51		 push	 ecx
  00905	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf600000
  0090d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00912	51		 push	 ecx
  00913	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0091b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00920	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1640 : 
; 1641 : 		x = eo_azimuth / eo_max_azimuth * 0.2;

  00925	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  0092d	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_max_azimuth@@3MA
  00935	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00939	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00941	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00945	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0

; 1642 : 		y = (eo_elevation / eo_min_elevation * -0.1) - 0.875;

  0094a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  00952	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_min_elevation@@3MA
  0095a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0095e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfb999999999999a
  00966	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fec000000000000
  0096e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00972	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0

; 1643 : 
; 1644 : 		draw_2d_line (x - 0.0267, y - 0.0200, x + 0.0267, y - 0.0200, MFD_COLOUR1);

  00977	b8 04 00 00 00	 mov	 eax, 4
  0097c	6b c8 00	 imul	 ecx, eax, 0
  0097f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00985	52		 push	 edx
  00986	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  0098b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00993	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00997	51		 push	 ecx
  00998	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0099d	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  009a2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9b573eab367a10
  009aa	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009ae	51		 push	 ecx
  009af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b4	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  009b9	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  009c1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009c5	51		 push	 ecx
  009c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009cb	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  009d0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9b573eab367a10
  009d8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009dc	51		 push	 ecx
  009dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009e2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1645 : 		draw_2d_line (x - 0.0267, y + 0.0200, x + 0.0267, y + 0.0200, MFD_COLOUR1);

  009e7	b8 04 00 00 00	 mov	 eax, 4
  009ec	6b c8 00	 imul	 ecx, eax, 0
  009ef	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009f5	52		 push	 edx
  009f6	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  009fb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00a03	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a07	51		 push	 ecx
  00a08	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a0d	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00a12	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9b573eab367a10
  00a1a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a1e	51		 push	 ecx
  00a1f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a24	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00a29	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00a31	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a35	51		 push	 ecx
  00a36	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a3b	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00a40	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9b573eab367a10
  00a48	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a4c	51		 push	 ecx
  00a4d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a52	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1646 : 		draw_2d_line (x - 0.0267, y - 0.0200, x - 0.0267, y + 0.0200, MFD_COLOUR1);

  00a57	b8 04 00 00 00	 mov	 eax, 4
  00a5c	6b c8 00	 imul	 ecx, eax, 0
  00a5f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a65	52		 push	 edx
  00a66	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00a6b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00a73	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a77	51		 push	 ecx
  00a78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a7d	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00a82	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9b573eab367a10
  00a8a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a8e	51		 push	 ecx
  00a8f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a94	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00a99	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00aa1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00aa5	51		 push	 ecx
  00aa6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aab	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00ab0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9b573eab367a10
  00ab8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00abc	51		 push	 ecx
  00abd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1647 : 		draw_2d_line (x + 0.0267, y - 0.0200, x + 0.0267, y + 0.0200, MFD_COLOUR1);

  00ac7	b8 04 00 00 00	 mov	 eax, 4
  00acc	6b c8 00	 imul	 ecx, eax, 0
  00acf	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ad5	52		 push	 edx
  00ad6	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00adb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00ae3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ae7	51		 push	 ecx
  00ae8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aed	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00af2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9b573eab367a10
  00afa	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00afe	51		 push	 ecx
  00aff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b04	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00b09	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00b11	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b15	51		 push	 ecx
  00b16	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b1b	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00b20	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9b573eab367a10
  00b28	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b2c	51		 push	 ecx
  00b2d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b32	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN3@draw_field:

; 1648 : 	}
; 1649 : }

  00b37	5f		 pop	 edi
  00b38	5e		 pop	 esi
  00b39	5b		 pop	 ebx
  00b3a	8b e5		 mov	 esp, ebp
  00b3c	5d		 pop	 ebp
  00b3d	c3		 ret	 0
?draw_field_of_regard_and_view_boxes@@YGXXZ ENDP	; draw_field_of_regard_and_view_boxes
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_heading_scale@@YGXM@Z
_TEXT	SEGMENT
tv209 = -144						; size = 4
tv206 = -144						; size = 4
tv167 = -144						; size = 4
_tick_type$ = -76					; size = 4
_int_heading_step_10$ = -72				; size = 4
_loop$ = -68						; size = 4
_mod_heading_step_10$ = -64				; size = 4
_heading_step_10$ = -60					; size = 4
_x$ = -56						; size = 4
_mfd_vp_x_max$ = -52					; size = 4
_mfd_vp_x_min$ = -48					; size = 4
_tick_datum_bottom$ = -44				; size = 4
_tick_datum_top$ = -40					; size = 4
_tick_30_deg_bottom$ = -36				; size = 4
_tick_30_deg_top$ = -32					; size = 4
_tick_10_deg_bottom$ = -28				; size = 4
_tick_10_deg_top$ = -24					; size = 4
_y_adjust$ = -20					; size = 4
_x_adjust_double$ = -16					; size = 4
_x_adjust_single$ = -12					; size = 4
_heading_tick_x_spacing$ = -8				; size = 4
_heading_width_ratio$ = -4				; size = 4
_heading$ = 8						; size = 4
?draw_heading_scale@@YGXM@Z PROC			; draw_heading_scale, COMDAT

; 1375 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1376 : 	float
; 1377 : 		heading_width_ratio,
; 1378 : 		heading_tick_x_spacing,
; 1379 : 		x_adjust_single,
; 1380 : 		x_adjust_double,
; 1381 : 		y_adjust,
; 1382 : 		tick_10_deg_top,
; 1383 : 		tick_10_deg_bottom,
; 1384 : 		tick_30_deg_top,
; 1385 : 		tick_30_deg_bottom,
; 1386 : 		tick_datum_top,
; 1387 : 		tick_datum_bottom,
; 1388 : 		mfd_vp_x_min,
; 1389 : 		mfd_vp_x_max,
; 1390 : 		x,
; 1391 : 		heading_step_10,
; 1392 : 		mod_heading_step_10;
; 1393 : 
; 1394 : 	int
; 1395 : 		loop,
; 1396 : 		int_heading_step_10,
; 1397 : 		tick_type;
; 1398 : 
; 1399 : 	//
; 1400 : 	// sort large and small mfd differences
; 1401 : 	//
; 1402 : 
; 1403 : 	if (draw_large_mfd)

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00013	0f 84 9b 00 00
	00		 je	 $LN7@draw_headi

; 1404 : 	{
; 1405 : 		set_mono_font_type (MONO_FONT_TYPE_5X9);

  00019	6a 02		 push	 2
  0001b	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1406 : 
; 1407 : 		heading_width_ratio		= 0.4;

  00020	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  00028	f3 0f 11 45 fc	 movss	 DWORD PTR _heading_width_ratio$[ebp], xmm0

; 1408 : 
; 1409 : 		heading_tick_x_spacing	= 0.4 / 6.5;

  0002d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d7c0fc1
  00035	f3 0f 11 45 f8	 movss	 DWORD PTR _heading_tick_x_spacing$[ebp], xmm0

; 1410 : 
; 1411 : 		x_adjust_single  			= -2.0;

  0003a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00042	f3 0f 11 45 f4	 movss	 DWORD PTR _x_adjust_single$[ebp], xmm0

; 1412 : 		x_adjust_double  			= -5.0;

  00047	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  0004f	f3 0f 11 45 f0	 movss	 DWORD PTR _x_adjust_double$[ebp], xmm0

; 1413 : 		y_adjust			  			= -8.0;

  00054	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  0005c	f3 0f 11 45 ec	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1414 : 
; 1415 : 		tick_10_deg_top			= 0.9375 - 0.015;

  00061	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6c28f6
  00069	f3 0f 11 45 e8	 movss	 DWORD PTR _tick_10_deg_top$[ebp], xmm0

; 1416 : 		tick_10_deg_bottom  		= 0.9375 - 0.015 - 0.045;

  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f60a3d7
  00076	f3 0f 11 45 e4	 movss	 DWORD PTR _tick_10_deg_bottom$[ebp], xmm0

; 1417 : 		tick_30_deg_top	  		= 0.9375;

  0007b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f700000
  00083	f3 0f 11 45 e0	 movss	 DWORD PTR _tick_30_deg_top$[ebp], xmm0

; 1418 : 		tick_30_deg_bottom  		= 0.9375 - 0.075;

  00088	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5ccccd
  00090	f3 0f 11 45 dc	 movss	 DWORD PTR _tick_30_deg_bottom$[ebp], xmm0

; 1419 : 		tick_datum_top		  		= 0.9375 - 0.075 - 0.010;

  00095	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5a3d71
  0009d	f3 0f 11 45 d8	 movss	 DWORD PTR _tick_datum_top$[ebp], xmm0

; 1420 : 		tick_datum_bottom	  		= 0.9375 - 0.075 - 0.010 - 0.045;

  000a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4eb852
  000aa	f3 0f 11 45 d4	 movss	 DWORD PTR _tick_datum_bottom$[ebp], xmm0

; 1421 : 	}
; 1422 : 	else

  000af	e9 96 00 00 00	 jmp	 $LN8@draw_headi
$LN7@draw_headi:

; 1423 : 	{
; 1424 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  000b4	6a 00		 push	 0
  000b6	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1425 : 
; 1426 : 		heading_width_ratio		= 0.3;

  000bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  000c3	f3 0f 11 45 fc	 movss	 DWORD PTR _heading_width_ratio$[ebp], xmm0

; 1427 : 
; 1428 : 		heading_tick_x_spacing	= 0.4 / 5.0;

  000c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  000d0	f3 0f 11 45 f8	 movss	 DWORD PTR _heading_tick_x_spacing$[ebp], xmm0

; 1429 : 
; 1430 : 		x_adjust_single			= -1.0;

  000d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000dd	f3 0f 11 45 f4	 movss	 DWORD PTR _x_adjust_single$[ebp], xmm0

; 1431 : 		x_adjust_double  			= -3.0;

  000e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  000ea	f3 0f 11 45 f0	 movss	 DWORD PTR _x_adjust_double$[ebp], xmm0

; 1432 : 		y_adjust			  			= -6.0;

  000ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  000f7	f3 0f 11 45 ec	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1433 : 
; 1434 : 		tick_10_deg_top  			= 0.875 - 0.015;

  000fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5c28f6
  00104	f3 0f 11 45 e8	 movss	 DWORD PTR _tick_10_deg_top$[ebp], xmm0

; 1435 : 		tick_10_deg_bottom 		= 0.875 - 0.015 - 0.045;

  00109	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f50a3d7
  00111	f3 0f 11 45 e4	 movss	 DWORD PTR _tick_10_deg_bottom$[ebp], xmm0

; 1436 : 		tick_30_deg_top	  		= 0.875;

  00116	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f600000
  0011e	f3 0f 11 45 e0	 movss	 DWORD PTR _tick_30_deg_top$[ebp], xmm0

; 1437 : 		tick_30_deg_bottom  		= 0.875 - 0.075;

  00123	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  0012b	f3 0f 11 45 dc	 movss	 DWORD PTR _tick_30_deg_bottom$[ebp], xmm0

; 1438 : 		tick_datum_top		  		= 0.875 - 0.075 - 0.010;

  00130	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4a3d71
  00138	f3 0f 11 45 d8	 movss	 DWORD PTR _tick_datum_top$[ebp], xmm0

; 1439 : 		tick_datum_bottom	  		= 0.875 - 0.075 - 0.010 - 0.045;

  0013d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3eb852
  00145	f3 0f 11 45 d4	 movss	 DWORD PTR _tick_datum_bottom$[ebp], xmm0
$LN8@draw_headi:

; 1440 : 	}
; 1441 : 
; 1442 : 	//
; 1443 : 	// adjust 2D environment for heading scale clipping
; 1444 : 	//
; 1445 : 	heading_width_ratio = 0.5;

  0014a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00152	f3 0f 11 45 fc	 movss	 DWORD PTR _heading_width_ratio$[ebp], xmm0

; 1446 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN * heading_width_ratio, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX * heading_width_ratio, MFD_WINDOW_Y_MAX);

  00157	51		 push	 ecx
  00158	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  00160	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00165	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _heading_width_ratio$[ebp]
  0016a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff199999999999a
  00172	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00176	51		 push	 ecx
  00177	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017c	51		 push	 ecx
  0017d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  00185	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018a	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _heading_width_ratio$[ebp]
  0018f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff199999999999a
  00197	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0019b	51		 push	 ecx
  0019c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001a6	50		 push	 eax
  001a7	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 1447 : 
; 1448 : 	mfd_vp_x_min = mfd_viewport_x_org - (mfd_viewport_size * (heading_width_ratio * 0.5));

  001ac	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  001b4	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  001bc	f3 0f 5a 55 fc	 cvtss2sd xmm2, DWORD PTR _heading_width_ratio$[ebp]
  001c1	f2 0f 59 15 00
	00 00 00	 mulsd	 xmm2, QWORD PTR __real@3fe0000000000000
  001c9	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  001cd	f2 0f 5c c1	 subsd	 xmm0, xmm1
  001d1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001d5	f3 0f 11 45 d0	 movss	 DWORD PTR _mfd_vp_x_min$[ebp], xmm0

; 1449 : 
; 1450 : 	mfd_vp_x_max = mfd_viewport_x_org + (mfd_viewport_size * (heading_width_ratio * 0.5)) - 0.001;

  001da	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  001e2	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  001ea	f3 0f 5a 55 fc	 cvtss2sd xmm2, DWORD PTR _heading_width_ratio$[ebp]
  001ef	f2 0f 59 15 00
	00 00 00	 mulsd	 xmm2, QWORD PTR __real@3fe0000000000000
  001f7	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  001fb	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001ff	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00207	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0020b	f3 0f 11 45 cc	 movss	 DWORD PTR _mfd_vp_x_max$[ebp], xmm0

; 1451 : 
; 1452 : 	set_2d_viewport (mfd_env, mfd_vp_x_min, mfd_viewport_y_min, mfd_vp_x_max, mfd_viewport_y_max);

  00210	51		 push	 ecx
  00211	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00219	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021e	51		 push	 ecx
  0021f	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _mfd_vp_x_max$[ebp]
  00224	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00229	51		 push	 ecx
  0022a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00232	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00237	51		 push	 ecx
  00238	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _mfd_vp_x_min$[ebp]
  0023d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00242	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00247	50		 push	 eax
  00248	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1453 : 
; 1454 : 	//
; 1455 : 	// draw heading datum tick
; 1456 : 	//
; 1457 : 
; 1458 : 	draw_2d_line (0.0, tick_datum_top, 0.0, tick_datum_bottom, MFD_COLOUR1);

  0024d	b8 04 00 00 00	 mov	 eax, 4
  00252	6b c8 00	 imul	 ecx, eax, 0
  00255	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0025b	52		 push	 edx
  0025c	51		 push	 ecx
  0025d	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _tick_datum_bottom$[ebp]
  00262	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00267	51		 push	 ecx
  00268	0f 57 c0	 xorps	 xmm0, xmm0
  0026b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00270	51		 push	 ecx
  00271	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _tick_datum_top$[ebp]
  00276	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027b	51		 push	 ecx
  0027c	0f 57 c0	 xorps	 xmm0, xmm0
  0027f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00284	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1459 : 
; 1460 : 	//
; 1461 : 	// draw heading scale
; 1462 : 	//
; 1463 : 
; 1464 : 	heading_step_10 = deg (heading * 0.1);

  00289	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _heading$[ebp]
  0028e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00296	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@404ca5dc00000000
  0029e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002a2	f3 0f 11 45 c4	 movss	 DWORD PTR _heading_step_10$[ebp], xmm0

; 1465 : 
; 1466 : 	int_heading_step_10 = (int) heading_step_10;

  002a7	f3 0f 2c 45 c4	 cvttss2si eax, DWORD PTR _heading_step_10$[ebp]
  002ac	89 45 b8	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax

; 1467 : 
; 1468 : 	mod_heading_step_10 = heading_step_10 - (float) int_heading_step_10;

  002af	f3 0f 2a 45 b8	 cvtsi2ss xmm0, DWORD PTR _int_heading_step_10$[ebp]
  002b4	f3 0f 10 4d c4	 movss	 xmm1, DWORD PTR _heading_step_10$[ebp]
  002b9	f3 0f 5c c8	 subss	 xmm1, xmm0
  002bd	f3 0f 11 4d c0	 movss	 DWORD PTR _mod_heading_step_10$[ebp], xmm1

; 1469 : 
; 1470 : 	int_heading_step_10 -= 10;

  002c2	8b 45 b8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  002c5	83 e8 0a	 sub	 eax, 10			; 0000000aH
  002c8	89 45 b8	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax

; 1471 : 
; 1472 : 	if (int_heading_step_10 < 0)

  002cb	79 09		 jns	 SHORT $LN9@draw_headi

; 1473 : 	{
; 1474 : 		int_heading_step_10 += 36;

  002cd	8b 45 b8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  002d0	83 c0 24	 add	 eax, 36			; 00000024H
  002d3	89 45 b8	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax
$LN9@draw_headi:

; 1475 : 	}
; 1476 : 
; 1477 : 	// tick type:-
; 1478 : 	//
; 1479 : 	//		0 = long tick (30 degs)
; 1480 : 	//		1 = short tick (10 degs)
; 1481 : 	//		2 = short tick (20 degs)
; 1482 : 
; 1483 : 	tick_type = int_heading_step_10 % 3;

  002d6	8b 45 b8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  002d9	99		 cdq
  002da	b9 03 00 00 00	 mov	 ecx, 3
  002df	f7 f9		 idiv	 ecx
  002e1	89 55 b4	 mov	 DWORD PTR _tick_type$[ebp], edx

; 1484 : 
; 1485 : 	x = - (10.0 + mod_heading_step_10) * heading_tick_x_spacing;

  002e4	f3 0f 5a 45 c0	 cvtss2sd xmm0, DWORD PTR _mod_heading_step_10$[ebp]
  002e9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4024000000000000
  002f1	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  002f8	f3 0f 5a 4d f8	 cvtss2sd xmm1, DWORD PTR _heading_tick_x_spacing$[ebp]
  002fd	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00301	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00305	f3 0f 11 45 c8	 movss	 DWORD PTR _x$[ebp], xmm0

; 1486 : 
; 1487 : 	for (loop = 0; loop <= 20; loop++)

  0030a	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  00311	eb 09		 jmp	 SHORT $LN4@draw_headi
$LN2@draw_headi:
  00313	8b 45 bc	 mov	 eax, DWORD PTR _loop$[ebp]
  00316	83 c0 01	 add	 eax, 1
  00319	89 45 bc	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@draw_headi:
  0031c	83 7d bc 14	 cmp	 DWORD PTR _loop$[ebp], 20 ; 00000014H
  00320	0f 8f 4a 02 00
	00		 jg	 $LN3@draw_headi

; 1488 : 	{
; 1489 : 		if (tick_type == 0)

  00326	83 7d b4 00	 cmp	 DWORD PTR _tick_type$[ebp], 0
  0032a	0f 85 92 01 00
	00		 jne	 $LN10@draw_headi

; 1490 : 		{
; 1491 : 			draw_2d_line (x, tick_30_deg_top, x, tick_30_deg_bottom, MFD_COLOUR1);

  00330	b8 04 00 00 00	 mov	 eax, 4
  00335	6b c8 00	 imul	 ecx, eax, 0
  00338	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0033e	52		 push	 edx
  0033f	51		 push	 ecx
  00340	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _tick_30_deg_bottom$[ebp]
  00345	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034a	51		 push	 ecx
  0034b	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00350	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00355	51		 push	 ecx
  00356	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _tick_30_deg_top$[ebp]
  0035b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00360	51		 push	 ecx
  00361	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00366	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1492 : 
; 1493 : 			set_2d_mono_font_position (x, tick_30_deg_top);

  00370	51		 push	 ecx
  00371	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _tick_30_deg_top$[ebp]
  00376	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037b	51		 push	 ecx
  0037c	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00381	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00386	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1494 : 
; 1495 : 			switch (int_heading_step_10)

  0038b	8b 45 b8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  0038e	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv167[ebp], eax
  00394	83 bd 70 ff ff
	ff 1b		 cmp	 DWORD PTR tv167[ebp], 27 ; 0000001bH
  0039b	0f 87 ad 00 00
	00		 ja	 $LN16@draw_headi
  003a1	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR tv167[ebp]
  003a7	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN24@draw_headi[ecx]
  003ae	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN25@draw_headi[edx*4]
$LN12@draw_headi:

; 1496 : 			{
; 1497 : 				////////////////////////////////////////
; 1498 : 				case 0:
; 1499 : 				////////////////////////////////////////
; 1500 : 				{
; 1501 : 					set_mono_font_rel_position (x_adjust_single, y_adjust);

  003b5	51		 push	 ecx
  003b6	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  003bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c0	51		 push	 ecx
  003c1	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  003c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003cb	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1502 : 
; 1503 : 					print_mono_font_char ('N');

  003d0	6a 4e		 push	 78			; 0000004eH
  003d2	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 1504 : 
; 1505 : 					break;

  003d7	e9 e4 00 00 00	 jmp	 $LN5@draw_headi
$LN13@draw_headi:

; 1506 : 				}
; 1507 : 				////////////////////////////////////////
; 1508 : 				case 9:
; 1509 : 				////////////////////////////////////////
; 1510 : 				{
; 1511 : 					set_mono_font_rel_position (x_adjust_single, y_adjust);

  003dc	51		 push	 ecx
  003dd	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  003e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e7	51		 push	 ecx
  003e8	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  003ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1512 : 
; 1513 : 					print_mono_font_char ('E');

  003f7	6a 45		 push	 69			; 00000045H
  003f9	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 1514 : 
; 1515 : 					break;

  003fe	e9 bd 00 00 00	 jmp	 $LN5@draw_headi
$LN14@draw_headi:

; 1516 : 				}
; 1517 : 				////////////////////////////////////////
; 1518 : 				case 18:
; 1519 : 				////////////////////////////////////////
; 1520 : 				{
; 1521 : 					set_mono_font_rel_position (x_adjust_single, y_adjust);

  00403	51		 push	 ecx
  00404	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00409	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040e	51		 push	 ecx
  0040f	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  00414	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00419	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1522 : 
; 1523 : 					print_mono_font_char ('S');

  0041e	6a 53		 push	 83			; 00000053H
  00420	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 1524 : 
; 1525 : 					break;

  00425	e9 96 00 00 00	 jmp	 $LN5@draw_headi
$LN15@draw_headi:

; 1526 : 				}
; 1527 : 				////////////////////////////////////////
; 1528 : 				case 27:
; 1529 : 				////////////////////////////////////////
; 1530 : 				{
; 1531 : 					set_mono_font_rel_position (x_adjust_single, y_adjust);

  0042a	51		 push	 ecx
  0042b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00430	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00435	51		 push	 ecx
  00436	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  0043b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00440	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1532 : 
; 1533 : 					print_mono_font_char ('W');

  00445	6a 57		 push	 87			; 00000057H
  00447	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 1534 : 
; 1535 : 					break;

  0044c	eb 72		 jmp	 SHORT $LN5@draw_headi
$LN16@draw_headi:

; 1536 : 				}
; 1537 : 				////////////////////////////////////////
; 1538 : 				default:
; 1539 : 				////////////////////////////////////////
; 1540 : 				{
; 1541 : 					if (int_heading_step_10 < 10)

  0044e	83 7d b8 0a	 cmp	 DWORD PTR _int_heading_step_10$[ebp], 10 ; 0000000aH
  00452	7d 29		 jge	 SHORT $LN17@draw_headi

; 1542 : 					{
; 1543 : 						set_mono_font_rel_position (x_adjust_single, y_adjust);

  00454	51		 push	 ecx
  00455	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0045a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0045f	51		 push	 ecx
  00460	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  00465	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1544 : 
; 1545 : 						print_mono_font_char ('0' + int_heading_step_10);

  0046f	8b 45 b8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  00472	83 c0 30	 add	 eax, 48			; 00000030H
  00475	50		 push	 eax
  00476	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 1546 : 					}
; 1547 : 					else

  0047b	eb 43		 jmp	 SHORT $LN18@draw_headi
$LN17@draw_headi:

; 1548 : 					{
; 1549 : 						set_mono_font_rel_position (x_adjust_double, y_adjust);

  0047d	51		 push	 ecx
  0047e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00483	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00488	51		 push	 ecx
  00489	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x_adjust_double$[ebp]
  0048e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00493	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1550 : 
; 1551 : 						print_mono_font_char ('0' + int_heading_step_10 / 10);

  00498	8b 45 b8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  0049b	99		 cdq
  0049c	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  004a1	f7 f9		 idiv	 ecx
  004a3	83 c0 30	 add	 eax, 48			; 00000030H
  004a6	50		 push	 eax
  004a7	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 1552 : 
; 1553 : 						print_mono_font_char ('0' + int_heading_step_10 % 10);

  004ac	8b 45 b8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  004af	99		 cdq
  004b0	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  004b5	f7 f9		 idiv	 ecx
  004b7	83 c2 30	 add	 edx, 48			; 00000030H
  004ba	52		 push	 edx
  004bb	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char
$LN18@draw_headi:
$LN5@draw_headi:

; 1554 : 					}
; 1555 : 
; 1556 : 					break;
; 1557 : 				}
; 1558 : 			}
; 1559 : 		}
; 1560 : 		else

  004c0	eb 40		 jmp	 SHORT $LN11@draw_headi
$LN10@draw_headi:

; 1561 : 		{
; 1562 : 			draw_2d_line (x, tick_10_deg_top, x, tick_10_deg_bottom, MFD_COLOUR1);

  004c2	b8 04 00 00 00	 mov	 eax, 4
  004c7	6b c8 00	 imul	 ecx, eax, 0
  004ca	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004d0	52		 push	 edx
  004d1	51		 push	 ecx
  004d2	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _tick_10_deg_bottom$[ebp]
  004d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004dc	51		 push	 ecx
  004dd	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  004e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e7	51		 push	 ecx
  004e8	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _tick_10_deg_top$[ebp]
  004ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f2	51		 push	 ecx
  004f3	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  004f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN11@draw_headi:

; 1563 : 		}
; 1564 : 
; 1565 : 		int_heading_step_10 = (++int_heading_step_10 == 36) ? 0 : int_heading_step_10;

  00502	8b 45 b8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  00505	83 c0 01	 add	 eax, 1
  00508	89 45 b8	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax
  0050b	83 7d b8 24	 cmp	 DWORD PTR _int_heading_step_10$[ebp], 36 ; 00000024H
  0050f	75 0c		 jne	 SHORT $LN20@draw_headi
  00511	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv206[ebp], 0
  0051b	eb 09		 jmp	 SHORT $LN21@draw_headi
$LN20@draw_headi:
  0051d	8b 4d b8	 mov	 ecx, DWORD PTR _int_heading_step_10$[ebp]
  00520	89 8d 70 ff ff
	ff		 mov	 DWORD PTR tv206[ebp], ecx
$LN21@draw_headi:
  00526	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR tv206[ebp]
  0052c	89 55 b8	 mov	 DWORD PTR _int_heading_step_10$[ebp], edx

; 1566 : 
; 1567 : 		tick_type = (++tick_type == 3) ? 0 : tick_type;

  0052f	8b 45 b4	 mov	 eax, DWORD PTR _tick_type$[ebp]
  00532	83 c0 01	 add	 eax, 1
  00535	89 45 b4	 mov	 DWORD PTR _tick_type$[ebp], eax
  00538	83 7d b4 03	 cmp	 DWORD PTR _tick_type$[ebp], 3
  0053c	75 0c		 jne	 SHORT $LN22@draw_headi
  0053e	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv209[ebp], 0
  00548	eb 09		 jmp	 SHORT $LN23@draw_headi
$LN22@draw_headi:
  0054a	8b 4d b4	 mov	 ecx, DWORD PTR _tick_type$[ebp]
  0054d	89 8d 70 ff ff
	ff		 mov	 DWORD PTR tv209[ebp], ecx
$LN23@draw_headi:
  00553	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR tv209[ebp]
  00559	89 55 b4	 mov	 DWORD PTR _tick_type$[ebp], edx

; 1568 : 
; 1569 : 		x += heading_tick_x_spacing;

  0055c	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00561	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _heading_tick_x_spacing$[ebp]
  00566	f3 0f 11 45 c8	 movss	 DWORD PTR _x$[ebp], xmm0

; 1570 : 	}

  0056b	e9 a3 fd ff ff	 jmp	 $LN2@draw_headi
$LN3@draw_headi:

; 1571 : 
; 1572 : 	//
; 1573 : 	// restore 2D environment
; 1574 : 	//
; 1575 : 
; 1576 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  00570	51		 push	 ecx
  00571	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  00579	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057e	51		 push	 ecx
  0057f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  00587	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0058c	51		 push	 ecx
  0058d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  00595	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059a	51		 push	 ecx
  0059b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  005a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  005ad	50		 push	 eax
  005ae	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 1577 : 
; 1578 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  005b3	51		 push	 ecx
  005b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  005bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c1	51		 push	 ecx
  005c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  005ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005cf	51		 push	 ecx
  005d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  005d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005dd	51		 push	 ecx
  005de	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  005e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  005f0	50		 push	 eax
  005f1	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1579 : }

  005f6	5f		 pop	 edi
  005f7	5e		 pop	 esi
  005f8	5b		 pop	 ebx
  005f9	8b e5		 mov	 esp, ebp
  005fb	5d		 pop	 ebp
  005fc	c2 04 00	 ret	 4
  005ff	90		 npad	 1
$LN25@draw_headi:
  00600	00 00 00 00	 DD	 $LN12@draw_headi
  00604	00 00 00 00	 DD	 $LN13@draw_headi
  00608	00 00 00 00	 DD	 $LN14@draw_headi
  0060c	00 00 00 00	 DD	 $LN15@draw_headi
  00610	00 00 00 00	 DD	 $LN16@draw_headi
$LN24@draw_headi:
  00614	00		 DB	 0
  00615	04		 DB	 4
  00616	04		 DB	 4
  00617	04		 DB	 4
  00618	04		 DB	 4
  00619	04		 DB	 4
  0061a	04		 DB	 4
  0061b	04		 DB	 4
  0061c	04		 DB	 4
  0061d	01		 DB	 1
  0061e	04		 DB	 4
  0061f	04		 DB	 4
  00620	04		 DB	 4
  00621	04		 DB	 4
  00622	04		 DB	 4
  00623	04		 DB	 4
  00624	04		 DB	 4
  00625	04		 DB	 4
  00626	02		 DB	 2
  00627	04		 DB	 4
  00628	04		 DB	 4
  00629	04		 DB	 4
  0062a	04		 DB	 4
  0062b	04		 DB	 4
  0062c	04		 DB	 4
  0062d	04		 DB	 4
  0062e	04		 DB	 4
  0062f	03		 DB	 3
?draw_heading_scale@@YGXM@Z ENDP			; draw_heading_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_damaged_mfd@@YGXXZ
_TEXT	SEGMENT
_y$ = -36						; size = 4
_x_right$ = -32						; size = 4
_x_left$ = -28						; size = 4
_x_delta$ = -24						; size = 4
_x_centre$ = -20					; size = 4
_col$ = -16						; size = 4
_i$ = -12						; size = 4
_max_lines$ = -8					; size = 4
_count$ = -4						; size = 4
?draw_damaged_mfd@@YGXXZ PROC				; draw_damaged_mfd, COMDAT

; 1314 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1315 : 	int
; 1316 : 		count,
; 1317 : 		max_lines,
; 1318 : 		i;
; 1319 : 
; 1320 : 	rgb_colour
; 1321 : 		col;
; 1322 : 
; 1323 : 	float
; 1324 : 		x_centre,
; 1325 : 		x_delta,
; 1326 : 		x_left,
; 1327 : 		x_right,
; 1328 : 		y;
; 1329 : 
; 1330 : 	col.r = 0;

  00009	c6 45 f2 00	 mov	 BYTE PTR _col$[ebp+2], 0

; 1331 : 	col.g = 0;

  0000d	c6 45 f1 00	 mov	 BYTE PTR _col$[ebp+1], 0

; 1332 : 	col.b = 0;

  00011	c6 45 f0 00	 mov	 BYTE PTR _col$[ebp], 0

; 1333 : 	col.a = 255;

  00015	c6 45 f3 ff	 mov	 BYTE PTR _col$[ebp+3], 255 ; 000000ffH

; 1334 : 
; 1335 : 	if (draw_large_mfd)

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00020	74 09		 je	 SHORT $LN5@draw_damag

; 1336 : 	{
; 1337 : 		max_lines = 150;

  00022	c7 45 f8 96 00
	00 00		 mov	 DWORD PTR _max_lines$[ebp], 150 ; 00000096H

; 1338 : 	}
; 1339 : 	else

  00029	eb 07		 jmp	 SHORT $LN6@draw_damag
$LN5@draw_damag:

; 1340 : 	{
; 1341 : 		max_lines = 75;

  0002b	c7 45 f8 4b 00
	00 00		 mov	 DWORD PTR _max_lines$[ebp], 75 ; 0000004bH
$LN6@draw_damag:

; 1342 : 	}
; 1343 : 
; 1344 : 	for (count = 0; count < max_lines; count++)

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00039	eb 09		 jmp	 SHORT $LN4@draw_damag
$LN2@draw_damag:
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0003e	83 c0 01	 add	 eax, 1
  00041	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@draw_damag:
  00044	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00047	3b 45 f8	 cmp	 eax, DWORD PTR _max_lines$[ebp]
  0004a	0f 8d 71 01 00
	00		 jge	 $LN3@draw_damag

; 1345 : 	{
; 1346 : 		convert_float_to_int (frand1 () * 127.0, &i);

  00050	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  0005a	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0005f	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00064	8d 4d f4	 lea	 ecx, DWORD PTR _i$[ebp]
  00067	51		 push	 ecx
  00068	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  0006e	c1 fa 10	 sar	 edx, 16			; 00000010H
  00071	81 e2 ff 7f 00
	00		 and	 edx, 32767		; 00007fffH
  00077	f2 0f 2a c2	 cvtsi2sd xmm0, edx
  0007b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00083	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@405fc00000000000
  0008b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0008f	51		 push	 ecx
  00090	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00095	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 1347 : 
; 1348 : 		col.g = i + 128;

  0009a	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0009d	05 80 00 00 00	 add	 eax, 128		; 00000080H
  000a2	88 45 f1	 mov	 BYTE PTR _col$[ebp+1], al

; 1349 : 
; 1350 : 		x_centre = sfrand1 ();

  000a5	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  000af	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000b4	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  000b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  000bf	c1 f9 10	 sar	 ecx, 16			; 00000010H
  000c2	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  000c8	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  000ce	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  000d2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  000da	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000de	f3 0f 11 45 ec	 movss	 DWORD PTR _x_centre$[ebp], xmm0

; 1351 : 
; 1352 : 		x_delta = (frand1 () * 0.5) + 0.25;

  000e3	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  000ed	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000f2	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  000f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  000fd	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00100	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00106	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  0010a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00112	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0011a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  00122	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00126	f3 0f 11 45 e8	 movss	 DWORD PTR _x_delta$[ebp], xmm0

; 1353 : 
; 1354 : 		x_left = x_centre - x_delta;

  0012b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  00130	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _x_delta$[ebp]
  00135	f3 0f 11 45 e4	 movss	 DWORD PTR _x_left$[ebp], xmm0

; 1355 : 
; 1356 : 		x_right = x_centre + x_delta;

  0013a	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  0013f	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _x_delta$[ebp]
  00144	f3 0f 11 45 e0	 movss	 DWORD PTR _x_right$[ebp], xmm0

; 1357 : 
; 1358 : 		y = sfrand1 ();

  00149	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00153	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00158	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  0015d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00163	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00166	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  0016c	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  00172	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00176	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  0017e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00182	f3 0f 11 45 dc	 movss	 DWORD PTR _y$[ebp], xmm0

; 1359 : 
; 1360 : 		draw_2d_line (x_left, y, x_right, y, col);

  00187	8b 45 f0	 mov	 eax, DWORD PTR _col$[ebp]
  0018a	50		 push	 eax
  0018b	51		 push	 ecx
  0018c	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y$[ebp]
  00191	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00196	51		 push	 ecx
  00197	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x_right$[ebp]
  0019c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a1	51		 push	 ecx
  001a2	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y$[ebp]
  001a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ac	51		 push	 ecx
  001ad	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x_left$[ebp]
  001b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1361 : 	}

  001bc	e9 7a fe ff ff	 jmp	 $LN2@draw_damag
$LN3@draw_damag:

; 1362 : }

  001c1	5f		 pop	 edi
  001c2	5e		 pop	 esi
  001c3	5b		 pop	 ebx
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
?draw_damaged_mfd@@YGXXZ ENDP				; draw_damaged_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_layout_grid@@YGXXZ
_TEXT	SEGMENT
_y$ = -8						; size = 4
_x$ = -4						; size = 4
?draw_layout_grid@@YGXXZ PROC				; draw_layout_grid, COMDAT

; 1284 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1285 : 	float
; 1286 : 		x,
; 1287 : 		y;
; 1288 : 
; 1289 : 	if (display_mfd_layout_grid)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?display_mfd_layout_grid@@3HA, 0 ; display_mfd_layout_grid
  00010	0f 84 ee 00 00
	00		 je	 $LN6@draw_layou

; 1290 : 	{
; 1291 : 		for (x = -1.0; x <= 1.0; x += 0.1)

  00016	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0001e	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0
  00023	eb 16		 jmp	 SHORT $LN4@draw_layou
$LN2@draw_layou:
  00025	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0002a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00032	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00036	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0
$LN4@draw_layou:
  0003b	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00040	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00048	66 0f 2f c8	 comisd	 xmm1, xmm0
  0004c	72 3f		 jb	 SHORT $LN3@draw_layou

; 1292 : 		{
; 1293 : 			draw_2d_line (x, -1.0, x, 1.0, sys_col_red);

  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  00053	50		 push	 eax
  00054	51		 push	 ecx
  00055	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0005d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00062	51		 push	 ecx
  00063	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00068	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006d	51		 push	 ecx
  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00076	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007b	51		 push	 ecx
  0007c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00081	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00086	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1294 : 		}

  0008b	eb 98		 jmp	 SHORT $LN2@draw_layou
$LN3@draw_layou:

; 1295 : 
; 1296 : 		for (y = -1.0; y <= 1.0; y += 0.1)

  0008d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00095	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0
  0009a	eb 16		 jmp	 SHORT $LN7@draw_layou
$LN5@draw_layou:
  0009c	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  000a1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  000a9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ad	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0
$LN7@draw_layou:
  000b2	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  000b7	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000bf	66 0f 2f c8	 comisd	 xmm1, xmm0
  000c3	72 3f		 jb	 SHORT $LN6@draw_layou

; 1297 : 		{
; 1298 : 			draw_2d_line (-1.0, y, 1.0, y, sys_col_red);

  000c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  000ca	50		 push	 eax
  000cb	51		 push	 ecx
  000cc	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d6	51		 push	 ecx
  000d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e4	51		 push	 ecx
  000e5	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ef	51		 push	 ecx
  000f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1299 : 		}

  00102	eb 98		 jmp	 SHORT $LN5@draw_layou
$LN6@draw_layou:

; 1300 : 	}
; 1301 : }

  00104	5f		 pop	 edi
  00105	5e		 pop	 esi
  00106	5b		 pop	 ebx
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c3		 ret	 0
?draw_layout_grid@@YGXXZ ENDP				; draw_layout_grid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?pointer_active@@YGHXZ
_TEXT	SEGMENT
?pointer_active@@YGHXZ PROC				; pointer_active, COMDAT

; 1009 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1010 : 	if (lhs_mfd_mode != MFD_MODE_TSD && rhs_mfd_mode != MFD_MODE_TSD)

  00009	83 3d 00 00 00
	00 08		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 8
  00010	74 0d		 je	 SHORT $LN2@pointer_ac
  00012	83 3d 00 00 00
	00 08		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 8
  00019	74 04		 je	 SHORT $LN2@pointer_ac

; 1011 : 		return FALSE;

  0001b	33 c0		 xor	 eax, eax
  0001d	eb 24		 jmp	 SHORT $LN1@pointer_ac
$LN2@pointer_ac:

; 1012 : 
; 1013 : 	if ((command_line_mouse_look == MOUSELOOK_ON
; 1014 : 		 || command_line_mouse_look == MOUSELOOK_INTERNAL)
; 1015 : 		&& !query_TIR_active())

  0001f	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?command_line_mouse_look@@3HA, 3 ; command_line_mouse_look
  00026	74 09		 je	 SHORT $LN4@pointer_ac
  00028	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?command_line_mouse_look@@3HA, 1 ; command_line_mouse_look
  0002f	75 0d		 jne	 SHORT $LN3@pointer_ac
$LN4@pointer_ac:
  00031	e8 00 00 00 00	 call	 ?query_TIR_active@@YAHXZ ; query_TIR_active
  00036	85 c0		 test	 eax, eax
  00038	75 04		 jne	 SHORT $LN3@pointer_ac

; 1016 : 	{
; 1017 : 		return FALSE;

  0003a	33 c0		 xor	 eax, eax
  0003c	eb 05		 jmp	 SHORT $LN1@pointer_ac
$LN3@pointer_ac:

; 1018 : 	}
; 1019 : 
; 1020 : 	return TRUE;

  0003e	b8 01 00 00 00	 mov	 eax, 1
$LN1@pointer_ac:

; 1021 : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?pointer_active@@YGHXZ ENDP				; pointer_active
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_bordered_box@@YGXMMMMUREAL_COLOUR@@0@Z
_TEXT	SEGMENT
_inner_y2$ = -32					; size = 4
_inner_y1$ = -28					; size = 4
_inner_x2$ = -24					; size = 4
_inner_x1$ = -20					; size = 4
_y2$ = -16						; size = 4
_y1$ = -12						; size = 4
_x2$ = -8						; size = 4
_x1$ = -4						; size = 4
_x1_c$ = 8						; size = 4
_y1_c$ = 12						; size = 4
_x2_c$ = 16						; size = 4
_y2_c$ = 20						; size = 4
_fill_colour$ = 24					; size = 4
_border_colour$ = 28					; size = 4
?draw_bordered_box@@YGXMMMMUREAL_COLOUR@@0@Z PROC	; draw_bordered_box, COMDAT

; 7551 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7552 : 	int x1, x2, y1, y2;
; 7553 : 	int inner_x1, inner_x2, inner_y1, inner_y2;
; 7554 : 
; 7555 : 	get_2d_int_screen_coordinates (min(x1_c, x2_c), max(y1_c, y2_c), &x1, &y1);

  00009	8d 45 f4	 lea	 eax, DWORD PTR _y1$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  00010	51		 push	 ecx
  00011	8d 55 14	 lea	 edx, DWORD PTR _y2_c$[ebp]
  00014	52		 push	 edx
  00015	8d 45 0c	 lea	 eax, DWORD PTR _y1_c$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0001e	51		 push	 ecx
  0001f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00023	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00028	8d 4d 10	 lea	 ecx, DWORD PTR _x2_c$[ebp]
  0002b	51		 push	 ecx
  0002c	8d 55 08	 lea	 edx, DWORD PTR _x1_c$[ebp]
  0002f	52		 push	 edx
  00030	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00035	51		 push	 ecx
  00036	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0003a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003f	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 7556 : 	get_2d_int_screen_coordinates (max(x1_c, x2_c), min(y1_c, y2_c), &x2, &y2);

  00044	8d 45 f0	 lea	 eax, DWORD PTR _y2$[ebp]
  00047	50		 push	 eax
  00048	8d 4d f8	 lea	 ecx, DWORD PTR _x2$[ebp]
  0004b	51		 push	 ecx
  0004c	8d 55 14	 lea	 edx, DWORD PTR _y2_c$[ebp]
  0004f	52		 push	 edx
  00050	8d 45 0c	 lea	 eax, DWORD PTR _y1_c$[ebp]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00059	51		 push	 ecx
  0005a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0005e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00063	8d 4d 10	 lea	 ecx, DWORD PTR _x2_c$[ebp]
  00066	51		 push	 ecx
  00067	8d 55 08	 lea	 edx, DWORD PTR _x1_c$[ebp]
  0006a	52		 push	 edx
  0006b	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00070	51		 push	 ecx
  00071	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00075	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007a	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 7557 : 
; 7558 : 	inner_x1 = x1+1;

  0007f	8b 45 fc	 mov	 eax, DWORD PTR _x1$[ebp]
  00082	83 c0 01	 add	 eax, 1
  00085	89 45 ec	 mov	 DWORD PTR _inner_x1$[ebp], eax

; 7559 : 	inner_x2 = x2-1;

  00088	8b 45 f8	 mov	 eax, DWORD PTR _x2$[ebp]
  0008b	83 e8 01	 sub	 eax, 1
  0008e	89 45 e8	 mov	 DWORD PTR _inner_x2$[ebp], eax

; 7560 : 	inner_y1 = y1+1;

  00091	8b 45 f4	 mov	 eax, DWORD PTR _y1$[ebp]
  00094	83 c0 01	 add	 eax, 1
  00097	89 45 e4	 mov	 DWORD PTR _inner_y1$[ebp], eax

; 7561 : 	inner_y2 = y2-1;

  0009a	8b 45 f0	 mov	 eax, DWORD PTR _y2$[ebp]
  0009d	83 e8 01	 sub	 eax, 1
  000a0	89 45 e0	 mov	 DWORD PTR _inner_y2$[ebp], eax

; 7562 : 
; 7563 : 	if (inner_x1 < inner_x2 && inner_y1 < inner_y2)

  000a3	8b 45 ec	 mov	 eax, DWORD PTR _inner_x1$[ebp]
  000a6	3b 45 e8	 cmp	 eax, DWORD PTR _inner_x2$[ebp]
  000a9	7d 25		 jge	 SHORT $LN2@draw_borde
  000ab	8b 45 e4	 mov	 eax, DWORD PTR _inner_y1$[ebp]
  000ae	3b 45 e0	 cmp	 eax, DWORD PTR _inner_y2$[ebp]
  000b1	7d 1d		 jge	 SHORT $LN2@draw_borde

; 7564 : 		set_block(inner_x1 * 2, inner_y1, inner_x2 * 2, inner_y2, fill_colour);

  000b3	8b 45 18	 mov	 eax, DWORD PTR _fill_colour$[ebp]
  000b6	50		 push	 eax
  000b7	8b 4d e0	 mov	 ecx, DWORD PTR _inner_y2$[ebp]
  000ba	51		 push	 ecx
  000bb	8b 55 e8	 mov	 edx, DWORD PTR _inner_x2$[ebp]
  000be	d1 e2		 shl	 edx, 1
  000c0	52		 push	 edx
  000c1	8b 45 e4	 mov	 eax, DWORD PTR _inner_y1$[ebp]
  000c4	50		 push	 eax
  000c5	8b 4d ec	 mov	 ecx, DWORD PTR _inner_x1$[ebp]
  000c8	d1 e1		 shl	 ecx, 1
  000ca	51		 push	 ecx
  000cb	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block
$LN2@draw_borde:

; 7565 : 
; 7566 : 	draw_line(x1, y1, x2, y1, border_colour);

  000d0	8b 45 1c	 mov	 eax, DWORD PTR _border_colour$[ebp]
  000d3	50		 push	 eax
  000d4	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _y1$[ebp]
  000d9	51		 push	 ecx
  000da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000df	f3 0f 2a 45 f8	 cvtsi2ss xmm0, DWORD PTR _x2$[ebp]
  000e4	51		 push	 ecx
  000e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ea	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _y1$[ebp]
  000ef	51		 push	 ecx
  000f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f5	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _x1$[ebp]
  000fa	51		 push	 ecx
  000fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00100	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7567 : 	draw_line(x1, y1, x1, y2, border_colour);

  00105	8b 45 1c	 mov	 eax, DWORD PTR _border_colour$[ebp]
  00108	50		 push	 eax
  00109	f3 0f 2a 45 f0	 cvtsi2ss xmm0, DWORD PTR _y2$[ebp]
  0010e	51		 push	 ecx
  0010f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00114	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _x1$[ebp]
  00119	51		 push	 ecx
  0011a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011f	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _y1$[ebp]
  00124	51		 push	 ecx
  00125	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012a	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _x1$[ebp]
  0012f	51		 push	 ecx
  00130	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00135	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7568 : 	draw_line(x1, y2, x2, y2, border_colour);

  0013a	8b 45 1c	 mov	 eax, DWORD PTR _border_colour$[ebp]
  0013d	50		 push	 eax
  0013e	f3 0f 2a 45 f0	 cvtsi2ss xmm0, DWORD PTR _y2$[ebp]
  00143	51		 push	 ecx
  00144	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00149	f3 0f 2a 45 f8	 cvtsi2ss xmm0, DWORD PTR _x2$[ebp]
  0014e	51		 push	 ecx
  0014f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00154	f3 0f 2a 45 f0	 cvtsi2ss xmm0, DWORD PTR _y2$[ebp]
  00159	51		 push	 ecx
  0015a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015f	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _x1$[ebp]
  00164	51		 push	 ecx
  00165	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016a	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7569 : 	draw_line(x2, y1, x2, y2, border_colour);

  0016f	8b 45 1c	 mov	 eax, DWORD PTR _border_colour$[ebp]
  00172	50		 push	 eax
  00173	f3 0f 2a 45 f0	 cvtsi2ss xmm0, DWORD PTR _y2$[ebp]
  00178	51		 push	 ecx
  00179	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017e	f3 0f 2a 45 f8	 cvtsi2ss xmm0, DWORD PTR _x2$[ebp]
  00183	51		 push	 ecx
  00184	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00189	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _y1$[ebp]
  0018e	51		 push	 ecx
  0018f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00194	f3 0f 2a 45 f8	 cvtsi2ss xmm0, DWORD PTR _x2$[ebp]
  00199	51		 push	 ecx
  0019a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019f	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7570 : }

  001a4	5f		 pop	 edi
  001a5	5e		 pop	 esi
  001a6	5b		 pop	 ebx
  001a7	8b e5		 mov	 esp, ebp
  001a9	5d		 pop	 ebp
  001aa	c2 18 00	 ret	 24			; 00000018H
?draw_bordered_box@@YGXMMMMUREAL_COLOUR@@0@Z ENDP	; draw_bordered_box
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_y_max$1 = -32						; size = 4
_y_min$2 = -28						; size = 4
_x_max$3 = -24						; size = 4
_x_min$4 = -20						; size = 4
_y2$ = -16						; size = 4
_y1$ = -12						; size = 4
_x2$ = -8						; size = 4
_x1$ = -4						; size = 4
_x1_c$ = 8						; size = 4
_y1_c$ = 12						; size = 4
_x2_c$ = 16						; size = 4
_y2_c$ = 20						; size = 4
_filled$ = 24						; size = 4
_colour$ = 28						; size = 4
?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z PROC		; draw_box, COMDAT

; 7573 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7574 : 	float x1, x2, y1, y2;
; 7575 : 
; 7576 : 	get_2d_float_screen_coordinates (x1_c, y1_c, &x1, &y1);

  00009	8d 45 f4	 lea	 eax, DWORD PTR _y1$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  00010	51		 push	 ecx
  00011	51		 push	 ecx
  00012	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y1_c$[ebp]
  00017	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001c	51		 push	 ecx
  0001d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x1_c$[ebp]
  00022	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00027	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 7577 : 	get_2d_float_screen_coordinates (x2_c, y2_c, &x2, &y2);

  0002c	8d 45 f0	 lea	 eax, DWORD PTR _y2$[ebp]
  0002f	50		 push	 eax
  00030	8d 4d f8	 lea	 ecx, DWORD PTR _x2$[ebp]
  00033	51		 push	 ecx
  00034	51		 push	 ecx
  00035	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y2_c$[ebp]
  0003a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003f	51		 push	 ecx
  00040	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x2_c$[ebp]
  00045	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004a	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 7578 : 
; 7579 : 	if (filled)

  0004f	83 7d 18 00	 cmp	 DWORD PTR _filled$[ebp], 0
  00053	74 7e		 je	 SHORT $LN2@draw_box

; 7580 : 	{
; 7581 : 		float x_min = min(x1, x2), x_max = max(x1, x2);

  00055	8d 45 f8	 lea	 eax, DWORD PTR _x2$[ebp]
  00058	50		 push	 eax
  00059	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  0005c	51		 push	 ecx
  0005d	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00062	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00066	f3 0f 11 45 ec	 movss	 DWORD PTR _x_min$4[ebp], xmm0
  0006b	8d 45 f8	 lea	 eax, DWORD PTR _x2$[ebp]
  0006e	50		 push	 eax
  0006f	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  00072	51		 push	 ecx
  00073	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00078	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0007c	f3 0f 11 45 e8	 movss	 DWORD PTR _x_max$3[ebp], xmm0

; 7582 : 		float y_min = min(y1, y2), y_max = max(y1, y2);

  00081	8d 45 f0	 lea	 eax, DWORD PTR _y2$[ebp]
  00084	50		 push	 eax
  00085	8d 4d f4	 lea	 ecx, DWORD PTR _y1$[ebp]
  00088	51		 push	 ecx
  00089	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  0008e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00092	f3 0f 11 45 e4	 movss	 DWORD PTR _y_min$2[ebp], xmm0
  00097	8d 45 f0	 lea	 eax, DWORD PTR _y2$[ebp]
  0009a	50		 push	 eax
  0009b	8d 4d f4	 lea	 ecx, DWORD PTR _y1$[ebp]
  0009e	51		 push	 ecx
  0009f	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  000a4	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000a8	f3 0f 11 45 e0	 movss	 DWORD PTR _y_max$1[ebp], xmm0

; 7583 : 
; 7584 : 		// set block likes to have its smallest arguments first
; 7585 : 		set_block(x_min, y_min, x_max, y_max, colour);

  000ad	8b 45 1c	 mov	 eax, DWORD PTR _colour$[ebp]
  000b0	50		 push	 eax
  000b1	f3 0f 2c 4d e0	 cvttss2si ecx, DWORD PTR _y_max$1[ebp]
  000b6	51		 push	 ecx
  000b7	f3 0f 2c 55 e8	 cvttss2si edx, DWORD PTR _x_max$3[ebp]
  000bc	52		 push	 edx
  000bd	f3 0f 2c 45 e4	 cvttss2si eax, DWORD PTR _y_min$2[ebp]
  000c2	50		 push	 eax
  000c3	f3 0f 2c 4d ec	 cvttss2si ecx, DWORD PTR _x_min$4[ebp]
  000c8	51		 push	 ecx
  000c9	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 7586 : 	}
; 7587 : 	else

  000ce	e9 d4 00 00 00	 jmp	 $LN3@draw_box
$LN2@draw_box:

; 7588 : 	{
; 7589 : 		draw_line(x1, y1, x2, y1, colour);

  000d3	8b 45 1c	 mov	 eax, DWORD PTR _colour$[ebp]
  000d6	50		 push	 eax
  000d7	51		 push	 ecx
  000d8	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  000dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e2	51		 push	 ecx
  000e3	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  000e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ed	51		 push	 ecx
  000ee	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  000f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f8	51		 push	 ecx
  000f9	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  000fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00103	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7590 : 		draw_line(x1, y1, x1, y2, colour);

  00108	8b 45 1c	 mov	 eax, DWORD PTR _colour$[ebp]
  0010b	50		 push	 eax
  0010c	51		 push	 ecx
  0010d	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00112	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00117	51		 push	 ecx
  00118	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0011d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00122	51		 push	 ecx
  00123	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00128	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012d	51		 push	 ecx
  0012e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00133	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00138	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7591 : 		draw_line(x1, y2, x2, y2, colour);

  0013d	8b 45 1c	 mov	 eax, DWORD PTR _colour$[ebp]
  00140	50		 push	 eax
  00141	51		 push	 ecx
  00142	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00147	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014c	51		 push	 ecx
  0014d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00152	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00157	51		 push	 ecx
  00158	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0015d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00162	51		 push	 ecx
  00163	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00168	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016d	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7592 : 		draw_line(x2, y1, x2, y2, colour);

  00172	8b 45 1c	 mov	 eax, DWORD PTR _colour$[ebp]
  00175	50		 push	 eax
  00176	51		 push	 ecx
  00177	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0017c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00181	51		 push	 ecx
  00182	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00187	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018c	51		 push	 ecx
  0018d	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00192	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00197	51		 push	 ecx
  00198	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0019d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a2	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN3@draw_box:

; 7593 : 	}
; 7594 : }

  001a7	5f		 pop	 edi
  001a8	5e		 pop	 esi
  001a9	5b		 pop	 ebx
  001aa	8b e5		 mov	 esp, ebp
  001ac	5d		 pop	 ebp
  001ad	c2 18 00	 ret	 24			; 00000018H
?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ENDP		; draw_box
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_pfzs@@YGXXZ
_TEXT	SEGMENT
tv76 = -116						; size = 4
tv69 = -112						; size = 4
_scale$ = -44						; size = 4
_rotation_matrix$ = -40					; size = 36
_i$ = -4						; size = 4
?draw_pfzs@@YGXXZ PROC					; draw_pfzs, COMDAT

; 714  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 715  : 	unsigned i;
; 716  : 	matrix3x3 rotation_matrix;
; 717  : 	float scale;
; 718  : 
; 719  : 	if (get_local_entity_int_value (get_pilot_entity (), INT_TYPE_CREW_ROLE) == CREW_ROLE_PILOT)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_entity@@3PAUENTITY@@A, 0 ; pilot_entity
  00010	74 0c		 je	 SHORT $LN13@draw_pfzs
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d 90	 mov	 DWORD PTR tv69[ebp], ecx
  0001c	eb 1d		 jmp	 SHORT $LN14@draw_pfzs
$LN13@draw_pfzs:
  0001e	68 cf 02 00 00	 push	 719			; 000002cfH
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00028	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00034	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN14@draw_pfzs:
  0003b	b8 01 00 00 00	 mov	 eax, 1
  00040	85 c0		 test	 eax, eax
  00042	74 09		 je	 SHORT $LN15@draw_pfzs
  00044	c7 45 8c 23 00
	00 00		 mov	 DWORD PTR tv76[ebp], 35	; 00000023H
  0004b	eb 1d		 jmp	 SHORT $LN16@draw_pfzs
$LN15@draw_pfzs:
  0004d	68 cf 02 00 00	 push	 719			; 000002cfH
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00063	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN16@draw_pfzs:
  0006a	6a 23		 push	 35			; 00000023H
  0006c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00072	52		 push	 edx
  00073	69 45 90 5c 04
	00 00		 imul	 eax, DWORD PTR tv69[ebp], 1116
  0007a	8b 4d 8c	 mov	 ecx, DWORD PTR tv76[ebp]
  0007d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00084	ff d2		 call	 edx
  00086	85 c0		 test	 eax, eax
  00088	75 1f		 jne	 SHORT $LN8@draw_pfzs

; 720  : 		scale = RADIUS / pilot_tsd_ase_range;

  0008a	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  00092	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff5d3d193333333
  0009a	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0009e	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  000a2	f3 0f 11 45 d4	 movss	 DWORD PTR _scale$[ebp], xmm0

; 721  : 	else

  000a7	eb 1d		 jmp	 SHORT $LN9@draw_pfzs
$LN8@draw_pfzs:

; 722  : 		scale = RADIUS / cpg_tsd_ase_range;

  000a9	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?cpg_tsd_ase_range@@3MA
  000b1	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff5d3d193333333
  000b9	f2 0f 5e c8	 divsd	 xmm1, xmm0
  000bd	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  000c1	f3 0f 11 45 d4	 movss	 DWORD PTR _scale$[ebp], xmm0
$LN9@draw_pfzs:

; 723  : 
; 724  : 	get_3d_transformation_matrix(rotation_matrix, -current_flight_dynamics->heading.value, 0.0, 0.0);

  000c6	51		 push	 ecx
  000c7	0f 57 c0	 xorps	 xmm0, xmm0
  000ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cf	51		 push	 ecx
  000d0	0f 57 c0	 xorps	 xmm0, xmm0
  000d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000dd	f3 0f 10 80 8c
	21 00 00	 movss	 xmm0, DWORD PTR [eax+8588]
  000e5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000ec	51		 push	 ecx
  000ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f2	8d 4d d8	 lea	 ecx, DWORD PTR _rotation_matrix$[ebp]
  000f5	51		 push	 ecx
  000f6	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 725  : 
; 726  : 	for (i=0; i < next_free_nfz; i++)

  000fb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00102	eb 09		 jmp	 SHORT $LN4@draw_pfzs
$LN2@draw_pfzs:
  00104	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00107	83 c0 01	 add	 eax, 1
  0010a	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@draw_pfzs:
  0010d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00110	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?next_free_nfz@@3IA ; next_free_nfz
  00116	73 1c		 jae	 SHORT $LN3@draw_pfzs

; 727  : 		draw_pfz(i, TRUE, rotation_matrix, scale);

  00118	51		 push	 ecx
  00119	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _scale$[ebp]
  0011e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00123	8d 45 d8	 lea	 eax, DWORD PTR _rotation_matrix$[ebp]
  00126	50		 push	 eax
  00127	6a 01		 push	 1
  00129	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0012c	51		 push	 ecx
  0012d	e8 00 00 00 00	 call	 ?draw_pfz@@YGXHHQAY02MM@Z ; draw_pfz
  00132	eb d0		 jmp	 SHORT $LN2@draw_pfzs
$LN3@draw_pfzs:

; 728  : 
; 729  : 	for (i=0; i < next_free_pfz; i++)

  00134	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0013b	eb 09		 jmp	 SHORT $LN7@draw_pfzs
$LN5@draw_pfzs:
  0013d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00140	83 c0 01	 add	 eax, 1
  00143	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN7@draw_pfzs:
  00146	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00149	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?next_free_pfz@@3IA ; next_free_pfz
  0014f	73 27		 jae	 SHORT $LN6@draw_pfzs

; 730  : 		if (i != current_pfz)  // draw current PFZ last

  00151	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00154	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?current_pfz@@3IA ; current_pfz
  0015a	74 1a		 je	 SHORT $LN10@draw_pfzs

; 731  : 			draw_pfz(i, FALSE, rotation_matrix, scale);

  0015c	51		 push	 ecx
  0015d	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00162	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00167	8d 45 d8	 lea	 eax, DWORD PTR _rotation_matrix$[ebp]
  0016a	50		 push	 eax
  0016b	6a 00		 push	 0
  0016d	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00170	51		 push	 ecx
  00171	e8 00 00 00 00	 call	 ?draw_pfz@@YGXHHQAY02MM@Z ; draw_pfz
$LN10@draw_pfzs:

; 732  : 
; 733  : 	if (current_pfz != NO_PFZ)

  00176	eb c5		 jmp	 SHORT $LN5@draw_pfzs
$LN6@draw_pfzs:
  00178	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?current_pfz@@3IA, -1 ; current_pfz
  0017f	74 1d		 je	 SHORT $LN11@draw_pfzs

; 734  : 		draw_pfz(current_pfz, FALSE, rotation_matrix, scale);

  00181	51		 push	 ecx
  00182	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00187	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018c	8d 45 d8	 lea	 eax, DWORD PTR _rotation_matrix$[ebp]
  0018f	50		 push	 eax
  00190	6a 00		 push	 0
  00192	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_pfz@@3IA ; current_pfz
  00198	51		 push	 ecx
  00199	e8 00 00 00 00	 call	 ?draw_pfz@@YGXHHQAY02MM@Z ; draw_pfz
$LN11@draw_pfzs:

; 735  : }

  0019e	5f		 pop	 edi
  0019f	5e		 pop	 esi
  001a0	5b		 pop	 ebx
  001a1	8b e5		 mov	 esp, ebp
  001a3	5d		 pop	 ebp
  001a4	c3		 ret	 0
?draw_pfzs@@YGXXZ ENDP					; draw_pfzs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_pfz@@YGXHHQAY02MM@Z
_TEXT	SEGMENT
tv285 = -152						; size = 8
_current_zone$ = -80					; size = 4
_pfz_colour$ = -76					; size = 4
_s$ = -72						; size = 20
_centre_y$ = -52					; size = 4
_centre_x$ = -48					; size = 4
_y4$ = -44						; size = 4
_y3$ = -40						; size = 4
_y2$ = -36						; size = 4
_y1$ = -32						; size = 4
_x4$ = -28						; size = 4
_x3$ = -24						; size = 4
_x2$ = -20						; size = 4
_x1$ = -16						; size = 4
_relative_coord$ = -12					; size = 12
_pfz_number$ = 8					; size = 4
_is_nfz$ = 12						; size = 4
_rotation_matrix$ = 16					; size = 4
_scale$ = 20						; size = 4
?draw_pfz@@YGXHHQAY02MM@Z PROC				; draw_pfz, COMDAT

; 651  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 652  : 	vec3d relative_coord;
; 653  : 	float x1, x2, x3, x4, y1, y2, y3, y4, centre_x, centre_y;
; 654  : 	char s[20];
; 655  : 	rgb_colour pfz_colour;
; 656  : 	pfz* current_zone;
; 657  : 
; 658  : 	if (is_nfz)

  0000c	83 7d 0c 00	 cmp	 DWORD PTR _is_nfz$[ebp], 0
  00010	74 1f		 je	 SHORT $LN2@draw_pfz

; 659  : 	{
; 660  : 		current_zone = get_nfz(pfz_number);

  00012	8b 45 08	 mov	 eax, DWORD PTR _pfz_number$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?get_nfz@@YGPAUpfz@@I@Z	; get_nfz
  0001b	89 45 b0	 mov	 DWORD PTR _current_zone$[ebp], eax

; 661  : 		pfz_colour = MFD_COLOUR_BLUE;

  0001e	b8 04 00 00 00	 mov	 eax, 4
  00023	6b c8 0c	 imul	 ecx, eax, 12
  00026	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0002c	89 55 b4	 mov	 DWORD PTR _pfz_colour$[ebp], edx

; 662  : 	}
; 663  : 	else

  0002f	eb 3b		 jmp	 SHORT $LN5@draw_pfz
$LN2@draw_pfz:

; 664  : 	{
; 665  : 		current_zone = get_pfz(pfz_number);

  00031	8b 45 08	 mov	 eax, DWORD PTR _pfz_number$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?get_pfz@@YGPAUpfz@@I@Z	; get_pfz
  0003a	89 45 b0	 mov	 DWORD PTR _current_zone$[ebp], eax

; 666  : 
; 667  : 		if (pfz_number == current_pfz)

  0003d	8b 45 08	 mov	 eax, DWORD PTR _pfz_number$[ebp]
  00040	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?current_pfz@@3IA ; current_pfz
  00046	75 13		 jne	 SHORT $LN4@draw_pfz

; 668  : 			pfz_colour = MFD_COLOUR_RED;

  00048	b8 04 00 00 00	 mov	 eax, 4
  0004d	6b c8 0f	 imul	 ecx, eax, 15
  00050	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00056	89 55 b4	 mov	 DWORD PTR _pfz_colour$[ebp], edx

; 669  : 		else

  00059	eb 11		 jmp	 SHORT $LN5@draw_pfz
$LN4@draw_pfz:

; 670  : 			pfz_colour = MFD_COLOUR_DARK_RED;

  0005b	b8 04 00 00 00	 mov	 eax, 4
  00060	6b c8 12	 imul	 ecx, eax, 18
  00063	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00069	89 55 b4	 mov	 DWORD PTR _pfz_colour$[ebp], edx
$LN5@draw_pfz:

; 671  : 	}
; 672  : 
; 673  : 	// get coordinates and draw box
; 674  : 	world_coordinate_to_relative_position(&current_zone->corner1, &relative_coord, rotation_matrix);

  0006c	8b 45 10	 mov	 eax, DWORD PTR _rotation_matrix$[ebp]
  0006f	50		 push	 eax
  00070	8d 4d f4	 lea	 ecx, DWORD PTR _relative_coord$[ebp]
  00073	51		 push	 ecx
  00074	8b 55 b0	 mov	 edx, DWORD PTR _current_zone$[ebp]
  00077	52		 push	 edx
  00078	e8 00 00 00 00	 call	 ?world_coordinate_to_relative_position@@YGXPAUVEC3D@@0QAY02M@Z ; world_coordinate_to_relative_position

; 675  : 	get_tsd_coordinate_from_relative_vec (&relative_coord, &x1, &y1, scale);

  0007d	51		 push	 ecx
  0007e	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00083	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00088	8d 45 e0	 lea	 eax, DWORD PTR _y1$[ebp]
  0008b	50		 push	 eax
  0008c	8d 4d f0	 lea	 ecx, DWORD PTR _x1$[ebp]
  0008f	51		 push	 ecx
  00090	8d 55 f4	 lea	 edx, DWORD PTR _relative_coord$[ebp]
  00093	52		 push	 edx
  00094	e8 00 00 00 00	 call	 ?get_tsd_coordinate_from_relative_vec@@YGXPAUVEC3D@@PAM1M@Z ; get_tsd_coordinate_from_relative_vec

; 676  : 
; 677  : 	world_coordinate_to_relative_position(&current_zone->corner2, &relative_coord, rotation_matrix);

  00099	8b 45 10	 mov	 eax, DWORD PTR _rotation_matrix$[ebp]
  0009c	50		 push	 eax
  0009d	8d 4d f4	 lea	 ecx, DWORD PTR _relative_coord$[ebp]
  000a0	51		 push	 ecx
  000a1	8b 55 b0	 mov	 edx, DWORD PTR _current_zone$[ebp]
  000a4	83 c2 0c	 add	 edx, 12			; 0000000cH
  000a7	52		 push	 edx
  000a8	e8 00 00 00 00	 call	 ?world_coordinate_to_relative_position@@YGXPAUVEC3D@@0QAY02M@Z ; world_coordinate_to_relative_position

; 678  : 	get_tsd_coordinate_from_relative_vec (&relative_coord, &x2, &y2, scale);

  000ad	51		 push	 ecx
  000ae	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _scale$[ebp]
  000b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b8	8d 45 dc	 lea	 eax, DWORD PTR _y2$[ebp]
  000bb	50		 push	 eax
  000bc	8d 4d ec	 lea	 ecx, DWORD PTR _x2$[ebp]
  000bf	51		 push	 ecx
  000c0	8d 55 f4	 lea	 edx, DWORD PTR _relative_coord$[ebp]
  000c3	52		 push	 edx
  000c4	e8 00 00 00 00	 call	 ?get_tsd_coordinate_from_relative_vec@@YGXPAUVEC3D@@PAM1M@Z ; get_tsd_coordinate_from_relative_vec

; 679  : 
; 680  : 	world_coordinate_to_relative_position(&current_zone->corner3, &relative_coord, rotation_matrix);

  000c9	8b 45 10	 mov	 eax, DWORD PTR _rotation_matrix$[ebp]
  000cc	50		 push	 eax
  000cd	8d 4d f4	 lea	 ecx, DWORD PTR _relative_coord$[ebp]
  000d0	51		 push	 ecx
  000d1	8b 55 b0	 mov	 edx, DWORD PTR _current_zone$[ebp]
  000d4	83 c2 18	 add	 edx, 24			; 00000018H
  000d7	52		 push	 edx
  000d8	e8 00 00 00 00	 call	 ?world_coordinate_to_relative_position@@YGXPAUVEC3D@@0QAY02M@Z ; world_coordinate_to_relative_position

; 681  : 	get_tsd_coordinate_from_relative_vec (&relative_coord, &x3, &y3, scale);

  000dd	51		 push	 ecx
  000de	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _scale$[ebp]
  000e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e8	8d 45 d8	 lea	 eax, DWORD PTR _y3$[ebp]
  000eb	50		 push	 eax
  000ec	8d 4d e8	 lea	 ecx, DWORD PTR _x3$[ebp]
  000ef	51		 push	 ecx
  000f0	8d 55 f4	 lea	 edx, DWORD PTR _relative_coord$[ebp]
  000f3	52		 push	 edx
  000f4	e8 00 00 00 00	 call	 ?get_tsd_coordinate_from_relative_vec@@YGXPAUVEC3D@@PAM1M@Z ; get_tsd_coordinate_from_relative_vec

; 682  : 
; 683  : 	world_coordinate_to_relative_position(&current_zone->corner4, &relative_coord, rotation_matrix);

  000f9	8b 45 10	 mov	 eax, DWORD PTR _rotation_matrix$[ebp]
  000fc	50		 push	 eax
  000fd	8d 4d f4	 lea	 ecx, DWORD PTR _relative_coord$[ebp]
  00100	51		 push	 ecx
  00101	8b 55 b0	 mov	 edx, DWORD PTR _current_zone$[ebp]
  00104	83 c2 24	 add	 edx, 36			; 00000024H
  00107	52		 push	 edx
  00108	e8 00 00 00 00	 call	 ?world_coordinate_to_relative_position@@YGXPAUVEC3D@@0QAY02M@Z ; world_coordinate_to_relative_position

; 684  : 	get_tsd_coordinate_from_relative_vec (&relative_coord, &x4, &y4, scale);

  0010d	51		 push	 ecx
  0010e	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00113	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00118	8d 45 d4	 lea	 eax, DWORD PTR _y4$[ebp]
  0011b	50		 push	 eax
  0011c	8d 4d e4	 lea	 ecx, DWORD PTR _x4$[ebp]
  0011f	51		 push	 ecx
  00120	8d 55 f4	 lea	 edx, DWORD PTR _relative_coord$[ebp]
  00123	52		 push	 edx
  00124	e8 00 00 00 00	 call	 ?get_tsd_coordinate_from_relative_vec@@YGXPAUVEC3D@@PAM1M@Z ; get_tsd_coordinate_from_relative_vec

; 685  : 
; 686  : 	draw_2d_line(x1, y1, x2, y2, pfz_colour);

  00129	8b 45 b4	 mov	 eax, DWORD PTR _pfz_colour$[ebp]
  0012c	50		 push	 eax
  0012d	51		 push	 ecx
  0012e	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00133	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00138	51		 push	 ecx
  00139	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0013e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00143	51		 push	 ecx
  00144	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00149	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014e	51		 push	 ecx
  0014f	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00154	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00159	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 687  : 	draw_2d_line(x2, y2, x3, y3, pfz_colour);

  0015e	8b 45 b4	 mov	 eax, DWORD PTR _pfz_colour$[ebp]
  00161	50		 push	 eax
  00162	51		 push	 ecx
  00163	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _y3$[ebp]
  00168	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016d	51		 push	 ecx
  0016e	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _x3$[ebp]
  00173	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00178	51		 push	 ecx
  00179	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0017e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00183	51		 push	 ecx
  00184	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00189	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 688  : 	draw_2d_line(x3, y3, x4, y4, pfz_colour);

  00193	8b 45 b4	 mov	 eax, DWORD PTR _pfz_colour$[ebp]
  00196	50		 push	 eax
  00197	51		 push	 ecx
  00198	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _y4$[ebp]
  0019d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a2	51		 push	 ecx
  001a3	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x4$[ebp]
  001a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ad	51		 push	 ecx
  001ae	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _y3$[ebp]
  001b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b8	51		 push	 ecx
  001b9	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _x3$[ebp]
  001be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 689  : 	draw_2d_line(x4, y4, x1, y1, pfz_colour);

  001c8	8b 45 b4	 mov	 eax, DWORD PTR _pfz_colour$[ebp]
  001cb	50		 push	 eax
  001cc	51		 push	 ecx
  001cd	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y1$[ebp]
  001d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d7	51		 push	 ecx
  001d8	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x1$[ebp]
  001dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e2	51		 push	 ecx
  001e3	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _y4$[ebp]
  001e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ed	51		 push	 ecx
  001ee	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x4$[ebp]
  001f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 690  : 
; 691  : 	// PFZ laber
; 692  : 	set_mono_font_colour(pfz_colour);

  001fd	8b 45 b4	 mov	 eax, DWORD PTR _pfz_colour$[ebp]
  00200	50		 push	 eax
  00201	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 693  : 
; 694  : 	if (draw_large_mfd)

  00206	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0020d	74 09		 je	 SHORT $LN6@draw_pfz

; 695  : 		set_mono_font_type (MONO_FONT_TYPE_6X10);

  0020f	6a 04		 push	 4
  00211	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 696  : 	else

  00216	eb 07		 jmp	 SHORT $LN7@draw_pfz
$LN6@draw_pfz:

; 697  : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  00218	6a 00		 push	 0
  0021a	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN7@draw_pfz:

; 698  : 
; 699  : 	if (is_nfz)

  0021f	83 7d 0c 00	 cmp	 DWORD PTR _is_nfz$[ebp], 0
  00223	74 1a		 je	 SHORT $LN8@draw_pfz

; 700  : 		sprintf(s, "NF%d", pfz_number+1);

  00225	8b 45 08	 mov	 eax, DWORD PTR _pfz_number$[ebp]
  00228	83 c0 01	 add	 eax, 1
  0022b	50		 push	 eax
  0022c	68 00 00 00 00	 push	 OFFSET ??_C@_04FPHGMDID@NF?$CFd@
  00231	8d 4d b8	 lea	 ecx, DWORD PTR _s$[ebp]
  00234	51		 push	 ecx
  00235	e8 00 00 00 00	 call	 _sprintf
  0023a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 701  : 	else

  0023d	eb 18		 jmp	 SHORT $LN9@draw_pfz
$LN8@draw_pfz:

; 702  : 		sprintf(s, "PF%d", pfz_number+1);

  0023f	8b 45 08	 mov	 eax, DWORD PTR _pfz_number$[ebp]
  00242	83 c0 01	 add	 eax, 1
  00245	50		 push	 eax
  00246	68 00 00 00 00	 push	 OFFSET ??_C@_04IAKGOKGA@PF?$CFd@
  0024b	8d 4d b8	 lea	 ecx, DWORD PTR _s$[ebp]
  0024e	51		 push	 ecx
  0024f	e8 00 00 00 00	 call	 _sprintf
  00254	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@draw_pfz:

; 703  : 
; 704  : 	centre_x = (x1 + x3) * 0.5;

  00257	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0025c	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _x3$[ebp]
  00261	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00265	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0026d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00271	f3 0f 11 45 d0	 movss	 DWORD PTR _centre_x$[ebp], xmm0

; 705  : 	centre_y = (y1 + y3) * 0.5;

  00276	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0027b	f3 0f 58 45 d8	 addss	 xmm0, DWORD PTR _y3$[ebp]
  00280	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00284	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0028c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00290	f3 0f 11 45 cc	 movss	 DWORD PTR _centre_y$[ebp], xmm0

; 706  : 
; 707  : 	set_2d_mono_font_position (centre_x, centre_y);

  00295	51		 push	 ecx
  00296	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _centre_y$[ebp]
  0029b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a0	51		 push	 ecx
  002a1	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _centre_x$[ebp]
  002a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ab	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 708  : 	set_mono_font_rel_position (-0.5 * get_mono_font_string_width(s), -4.0);

  002b0	51		 push	 ecx
  002b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  002b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002be	8d 45 b8	 lea	 eax, DWORD PTR _s$[ebp]
  002c1	50		 push	 eax
  002c2	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  002c7	dd 9d 68 ff ff
	ff		 fstp	 QWORD PTR tv285[ebp]
  002cd	f2 0f 10 85 68
	ff ff ff	 movsd	 xmm0, QWORD PTR tv285[ebp]
  002d5	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  002dd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002e1	51		 push	 ecx
  002e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e7	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 709  : 
; 710  : 	print_mono_font_string (s);

  002ec	8d 45 b8	 lea	 eax, DWORD PTR _s$[ebp]
  002ef	50		 push	 eax
  002f0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 711  : }

  002f5	5f		 pop	 edi
  002f6	5e		 pop	 esi
  002f7	5b		 pop	 ebx
  002f8	8b e5		 mov	 esp, ebp
  002fa	5d		 pop	 ebp
  002fb	c2 10 00	 ret	 16			; 00000010H
?draw_pfz@@YGXHHQAY02MM@Z ENDP				; draw_pfz
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?get_tsd_coordinate_from_relative_vec@@YGXPAUVEC3D@@PAM1M@Z
_TEXT	SEGMENT
_y_origin$ = -8						; size = 4
_x_origin$ = -4						; size = 4
_vec$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_scale$ = 20						; size = 4
?get_tsd_coordinate_from_relative_vec@@YGXPAUVEC3D@@PAM1M@Z PROC ; get_tsd_coordinate_from_relative_vec, COMDAT

; 632  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 633  : 	float x_origin, y_origin;
; 634  : 
; 635  : 	// match ground radar origin
; 636  : 	x_origin = 0.0;

  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	f3 0f 11 45 fc	 movss	 DWORD PTR _x_origin$[ebp], xmm0

; 637  : 	if (draw_large_mfd)

  00011	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00018	74 0f		 je	 SHORT $LN2@get_tsd_co

; 638  : 		y_origin = -0.65;

  0001a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  00022	f3 0f 11 45 f8	 movss	 DWORD PTR _y_origin$[ebp], xmm0

; 639  : 	else

  00027	eb 0d		 jmp	 SHORT $LN3@get_tsd_co
$LN2@get_tsd_co:

; 640  : 		y_origin = -0.70;

  00029	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00031	f3 0f 11 45 f8	 movss	 DWORD PTR _y_origin$[ebp], xmm0
$LN3@get_tsd_co:

; 641  : 
; 642  : 	*x = vec->x * scale;

  00036	8b 45 08	 mov	 eax, DWORD PTR _vec$[ebp]
  00039	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0003d	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00042	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  00045	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 643  : 	*y = vec->z * scale;

  00049	8b 45 08	 mov	 eax, DWORD PTR _vec$[ebp]
  0004c	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00051	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00056	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  00059	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 644  : 
; 645  : 	*x += x_origin;

  0005d	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00060	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00064	f3 0f 58 45 fc	 addss	 xmm0, DWORD PTR _x_origin$[ebp]
  00069	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0006c	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 646  : 	*y += y_origin;

  00070	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00073	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00077	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _y_origin$[ebp]
  0007c	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  0007f	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 647  : }

  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 10 00	 ret	 16			; 00000010H
?get_tsd_coordinate_from_relative_vec@@YGXPAUVEC3D@@PAM1M@Z ENDP ; get_tsd_coordinate_from_relative_vec
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?get_relative_vec_from_tsd_coordinate@@YG?AUVEC3D@@MMM@Z
_TEXT	SEGMENT
_position$ = -28					; size = 12
_rel_y$ = -16						; size = 4
_rel_x$ = -12						; size = 4
_y_origin$ = -8						; size = 4
_x_origin$ = -4						; size = 4
$T1 = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_scale$ = 20						; size = 4
?get_relative_vec_from_tsd_coordinate@@YG?AUVEC3D@@MMM@Z PROC ; get_relative_vec_from_tsd_coordinate, COMDAT

; 609  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 610  : 	float x_origin, y_origin;
; 611  : 	float rel_x, rel_y;
; 612  : 	vec3d position;
; 613  : 
; 614  : 	// match ground radar origin
; 615  : 	x_origin = 0.0;

  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	f3 0f 11 45 fc	 movss	 DWORD PTR _x_origin$[ebp], xmm0

; 616  : 	if (draw_large_mfd)

  00011	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00018	74 0f		 je	 SHORT $LN2@get_relati

; 617  : 		y_origin = -0.65;

  0001a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  00022	f3 0f 11 45 f8	 movss	 DWORD PTR _y_origin$[ebp], xmm0

; 618  : 	else

  00027	eb 0d		 jmp	 SHORT $LN3@get_relati
$LN2@get_relati:

; 619  : 		y_origin = -0.70;

  00029	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00031	f3 0f 11 45 f8	 movss	 DWORD PTR _y_origin$[ebp], xmm0
$LN3@get_relati:

; 620  : 
; 621  : 	rel_x = x - x_origin;

  00036	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _x$[ebp]
  0003b	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _x_origin$[ebp]
  00040	f3 0f 11 45 f4	 movss	 DWORD PTR _rel_x$[ebp], xmm0

; 622  : 	rel_y = y - y_origin;

  00045	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _y$[ebp]
  0004a	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _y_origin$[ebp]
  0004f	f3 0f 11 45 f0	 movss	 DWORD PTR _rel_y$[ebp], xmm0

; 623  : 
; 624  : 	position.x = rel_x / scale;

  00054	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _rel_x$[ebp]
  00059	f3 0f 5e 45 14	 divss	 xmm0, DWORD PTR _scale$[ebp]
  0005e	f3 0f 11 45 e4	 movss	 DWORD PTR _position$[ebp], xmm0

; 625  : 	position.y = 0.0;

  00063	0f 57 c0	 xorps	 xmm0, xmm0
  00066	f3 0f 11 45 e8	 movss	 DWORD PTR _position$[ebp+4], xmm0

; 626  : 	position.z = rel_y / scale;  // yes, y coordinates in MFD translates to Z-coordinates in 3D

  0006b	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _rel_y$[ebp]
  00070	f3 0f 5e 45 14	 divss	 xmm0, DWORD PTR _scale$[ebp]
  00075	f3 0f 11 45 ec	 movss	 DWORD PTR _position$[ebp+8], xmm0

; 627  : 
; 628  : 	return position;

  0007a	8b 45 08	 mov	 eax, DWORD PTR $T1[ebp]
  0007d	8b 4d e4	 mov	 ecx, DWORD PTR _position$[ebp]
  00080	89 08		 mov	 DWORD PTR [eax], ecx
  00082	8b 55 e8	 mov	 edx, DWORD PTR _position$[ebp+4]
  00085	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00088	8b 4d ec	 mov	 ecx, DWORD PTR _position$[ebp+8]
  0008b	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0008e	8b 45 08	 mov	 eax, DWORD PTR $T1[ebp]

; 629  : }

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 10 00	 ret	 16			; 00000010H
?get_relative_vec_from_tsd_coordinate@@YG?AUVEC3D@@MMM@Z ENDP ; get_relative_vec_from_tsd_coordinate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ
_TEXT	SEGMENT
_mfd_mode$ = -4						; size = 4
?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ PROC	; get_mfd_mode_for_eo_sensor, COMDAT

; 12173: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12174: 	mfd_modes
; 12175: 		mfd_mode;
; 12176: 
; 12177: 	if (eo_sensor == TARGET_ACQUISITION_SYSTEM_FLIR)

  00009	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 3 ; eo_sensor
  00010	75 09		 jne	 SHORT $LN2@get_mfd_mo

; 12178: 	{
; 12179: 		mfd_mode = MFD_MODE_FLIR;

  00012	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 4
  00019	eb 37		 jmp	 SHORT $LN3@get_mfd_mo
$LN2@get_mfd_mo:

; 12180: 	}
; 12181: 	else if (eo_sensor == TARGET_ACQUISITION_SYSTEM_DTV)

  0001b	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 4 ; eo_sensor
  00022	75 09		 jne	 SHORT $LN4@get_mfd_mo

; 12182: 	{
; 12183: 		mfd_mode = MFD_MODE_DTV;

  00024	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 5
  0002b	eb 25		 jmp	 SHORT $LN3@get_mfd_mo
$LN4@get_mfd_mo:

; 12184: 	}
; 12185: 	else if (eo_sensor == TARGET_ACQUISITION_SYSTEM_DVO)

  0002d	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 5 ; eo_sensor
  00034	75 09		 jne	 SHORT $LN6@get_mfd_mo

; 12186: 	{
; 12187: 		mfd_mode = MFD_MODE_DVO;

  00036	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 6

; 12188: 	}
; 12189: 	else

  0003d	eb 13		 jmp	 SHORT $LN3@get_mfd_mo
$LN6@get_mfd_mo:

; 12190: 	{
; 12191: 		debug_fatal ("Invalid EO sensor = %d", eo_sensor);

  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; eo_sensor
  00044	50		 push	 eax
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@
  0004a	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0004f	83 c4 08	 add	 esp, 8
$LN3@get_mfd_mo:

; 12192: 	}
; 12193: 
; 12194: 	return (mfd_mode);

  00052	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]

; 12195: }

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ENDP	; get_mfd_mode_for_eo_sensor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?get_weapon_status@@YGPBDPADI@Z
_TEXT	SEGMENT
tv78 = -84						; size = 4
tv84 = -80						; size = 4
tv70 = -80						; size = 4
_flight_time$1 = -12					; size = 4
_number$2 = -8						; size = 4
_selected_weapon$ = -4					; size = 4
_buffer$ = 8						; size = 4
_buffer_len$ = 12					; size = 4
?get_weapon_status@@YGPBDPADI@Z PROC			; get_weapon_status, COMDAT

; 10773: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10774: 	int selected_weapon = get_local_entity_int_value(get_gunship_entity(), INT_TYPE_SELECTED_WEAPON);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00010	74 0c		 je	 SHORT $LN11@get_weapon
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d b0	 mov	 DWORD PTR tv70[ebp], ecx
  0001c	eb 21		 jmp	 SHORT $LN12@get_weapon
$LN11@get_weapon:
  0001e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_weapon_status@@YGPBDPADI@Z@4JA
  00024	83 c2 01	 add	 edx, 1
  00027	52		 push	 edx
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00038	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN12@get_weapon:
  0003f	b9 01 00 00 00	 mov	 ecx, 1
  00044	85 c9		 test	 ecx, ecx
  00046	74 09		 je	 SHORT $LN13@get_weapon
  00048	c7 45 ac b8 00
	00 00		 mov	 DWORD PTR tv78[ebp], 184 ; 000000b8H
  0004f	eb 21		 jmp	 SHORT $LN14@get_weapon
$LN13@get_weapon:
  00051	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_weapon_status@@YGPBDPADI@Z@4JA
  00057	83 c2 01	 add	 edx, 1
  0005a	52		 push	 edx
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006b	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN14@get_weapon:
  00072	68 b8 00 00 00	 push	 184			; 000000b8H
  00077	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0007d	51		 push	 ecx
  0007e	69 55 b0 5c 04
	00 00		 imul	 edx, DWORD PTR tv70[ebp], 1116
  00085	8b 45 ac	 mov	 eax, DWORD PTR tv78[ebp]
  00088	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  0008f	ff d1		 call	 ecx
  00091	89 45 fc	 mov	 DWORD PTR _selected_weapon$[ebp], eax

; 10775: 
; 10776: 	switch (selected_weapon)

  00094	8b 45 fc	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  00097	89 45 b0	 mov	 DWORD PTR tv84[ebp], eax
  0009a	8b 4d b0	 mov	 ecx, DWORD PTR tv84[ebp]
  0009d	83 e9 07	 sub	 ecx, 7
  000a0	89 4d b0	 mov	 DWORD PTR tv84[ebp], ecx
  000a3	83 7d b0 27	 cmp	 DWORD PTR tv84[ebp], 39	; 00000027H
  000a7	0f 87 b6 00 00
	00		 ja	 $LN2@get_weapon
  000ad	8b 55 b0	 mov	 edx, DWORD PTR tv84[ebp]
  000b0	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN15@get_weapon[edx]
  000b7	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN16@get_weapon[eax*4]
$LN4@get_weapon:

; 10777: 	{
; 10778: 	case ENTITY_SUB_TYPE_WEAPON_M230_30MM_ROUND:
; 10779: 		{
; 10780: 			int number = get_local_entity_weapon_count (get_gunship_entity (), selected_weapon);

  000be	8b 45 fc	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  000c1	50		 push	 eax
  000c2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000c8	51		 push	 ecx
  000c9	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  000ce	89 45 f8	 mov	 DWORD PTR _number$2[ebp], eax

; 10781: 			if (apache_damage.gun_jammed)

  000d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  000d6	c1 e8 13	 shr	 eax, 19			; 00000013H
  000d9	83 e0 01	 and	 eax, 1
  000dc	74 0a		 je	 SHORT $LN5@get_weapon

; 10782: 				return "GUN FAIL";

  000de	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08HKMHFHNI@GUN?5FAIL@
  000e3	e9 80 00 00 00	 jmp	 $LN1@get_weapon
$LN5@get_weapon:

; 10783: 
; 10784: 			snprintf(buffer, buffer_len, "RNDS%4d", number);

  000e8	8b 45 f8	 mov	 eax, DWORD PTR _number$2[ebp]
  000eb	50		 push	 eax
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_07MHIPJLIL@RNDS?$CF4d@
  000f1	8b 4d 0c	 mov	 ecx, DWORD PTR _buffer_len$[ebp]
  000f4	51		 push	 ecx
  000f5	8b 55 08	 mov	 edx, DWORD PTR _buffer$[ebp]
  000f8	52		 push	 edx
  000f9	e8 00 00 00 00	 call	 _sprintf_s
  000fe	83 c4 10	 add	 esp, 16			; 00000010H

; 10785: 			return buffer;

  00101	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00104	eb 62		 jmp	 SHORT $LN1@get_weapon

; 10786: 		}
; 10787: 		break;

  00106	eb 5b		 jmp	 SHORT $LN2@get_weapon
$LN6@get_weapon:

; 10788: 	case ENTITY_SUB_TYPE_WEAPON_HYDRA70_M261:
; 10789: 	case ENTITY_SUB_TYPE_WEAPON_HYDRA70_M255:
; 10790: 		return "ROCKETS";

  00108	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07MPJLOAND@ROCKETS@
  0010d	eb 59		 jmp	 SHORT $LN1@get_weapon

; 10791: 		break;

  0010f	eb 52		 jmp	 SHORT $LN2@get_weapon
$LN7@get_weapon:

; 10792: 	case ENTITY_SUB_TYPE_WEAPON_AGM114L_LONGBOW_HELLFIRE:
; 10793: 	case ENTITY_SUB_TYPE_WEAPON_AGM114K_HELLFIRE_II:
; 10794: 		{
; 10795: 			float flight_time;
; 10796: 
; 10797: 			flight_time = get_missile_flight_time();

  00111	e8 00 00 00 00	 call	 ?get_missile_flight_time@@YGMXZ ; get_missile_flight_time
  00116	d9 5d f4	 fstp	 DWORD PTR _flight_time$1[ebp]

; 10798: 			if (flight_time <= 0.0)  // no missiles in flight

  00119	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _flight_time$1[ebp]
  0011e	0f 57 c9	 xorps	 xmm1, xmm1
  00121	66 0f 2f c8	 comisd	 xmm1, xmm0
  00125	72 07		 jb	 SHORT $LN8@get_weapon

; 10799: 				return "MSL";

  00127	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03IFPDDAOD@MSL@
  0012c	eb 3a		 jmp	 SHORT $LN1@get_weapon
$LN8@get_weapon:

; 10800: 
; 10801: 			snprintf(buffer, buffer_len, "TOF=%d", (int)(flight_time + 0.5));

  0012e	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _flight_time$1[ebp]
  00133	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0013b	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0013f	50		 push	 eax
  00140	68 00 00 00 00	 push	 OFFSET ??_C@_06KBOCPCKB@TOF?$DN?$CFd@
  00145	8b 4d 0c	 mov	 ecx, DWORD PTR _buffer_len$[ebp]
  00148	51		 push	 ecx
  00149	8b 55 08	 mov	 edx, DWORD PTR _buffer$[ebp]
  0014c	52		 push	 edx
  0014d	e8 00 00 00 00	 call	 _sprintf_s
  00152	83 c4 10	 add	 esp, 16			; 00000010H

; 10802: 			return buffer;

  00155	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00158	eb 0e		 jmp	 SHORT $LN1@get_weapon

; 10803: 		}
; 10804: 		break;

  0015a	eb 07		 jmp	 SHORT $LN2@get_weapon
$LN9@get_weapon:

; 10805: 	case ENTITY_SUB_TYPE_WEAPON_AIM92_STINGER:
; 10806: 		return "ATA";

  0015c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03HPMEOHJD@ATA@
  00161	eb 05		 jmp	 SHORT $LN1@get_weapon
$LN2@get_weapon:

; 10807: 		break;
; 10808: 	}
; 10809: 
; 10810: 	return "";

  00163	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
$LN1@get_weapon:

; 10811: }

  00168	5f		 pop	 edi
  00169	5e		 pop	 esi
  0016a	5b		 pop	 ebx
  0016b	8b e5		 mov	 esp, ebp
  0016d	5d		 pop	 ebp
  0016e	c2 08 00	 ret	 8
  00171	0f 1f 00	 npad	 3
$LN16@get_weapon:
  00174	00 00 00 00	 DD	 $LN4@get_weapon
  00178	00 00 00 00	 DD	 $LN6@get_weapon
  0017c	00 00 00 00	 DD	 $LN9@get_weapon
  00180	00 00 00 00	 DD	 $LN7@get_weapon
  00184	00 00 00 00	 DD	 $LN2@get_weapon
$LN15@get_weapon:
  00188	00		 DB	 0
  00189	04		 DB	 4
  0018a	04		 DB	 4
  0018b	04		 DB	 4
  0018c	04		 DB	 4
  0018d	04		 DB	 4
  0018e	04		 DB	 4
  0018f	04		 DB	 4
  00190	04		 DB	 4
  00191	04		 DB	 4
  00192	04		 DB	 4
  00193	04		 DB	 4
  00194	04		 DB	 4
  00195	04		 DB	 4
  00196	04		 DB	 4
  00197	04		 DB	 4
  00198	04		 DB	 4
  00199	04		 DB	 4
  0019a	04		 DB	 4
  0019b	04		 DB	 4
  0019c	04		 DB	 4
  0019d	04		 DB	 4
  0019e	04		 DB	 4
  0019f	01		 DB	 1
  001a0	01		 DB	 1
  001a1	04		 DB	 4
  001a2	04		 DB	 4
  001a3	04		 DB	 4
  001a4	04		 DB	 4
  001a5	02		 DB	 2
  001a6	04		 DB	 4
  001a7	04		 DB	 4
  001a8	04		 DB	 4
  001a9	04		 DB	 4
  001aa	04		 DB	 4
  001ab	04		 DB	 4
  001ac	04		 DB	 4
  001ad	04		 DB	 4
  001ae	03		 DB	 3
  001af	03		 DB	 3
?get_weapon_status@@YGPBDPADI@Z ENDP			; get_weapon_status
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?display_waypoint_information@@YGXUREAL_COLOUR@@@Z
_TEXT	SEGMENT
tv221 = -200						; size = 4
tv192 = -200						; size = 4
tv156 = -200						; size = 4
tv90 = -200						; size = 4
tv213 = -196						; size = 4
tv184 = -196						; size = 4
tv148 = -196						; size = 4
tv82 = -196						; size = 4
_seconds$1 = -128					; size = 4
_minutes$2 = -124					; size = 4
_hours$3 = -120						; size = 4
_time_to_go$4 = -116					; size = 4
_f$5 = -112						; size = 4
_i$6 = -108						; size = 4
_waypoint_range$ = -104					; size = 4
_waypoint_position$ = -100				; size = 12
_gunship_position$ = -88				; size = 4
_wp$ = -84						; size = 4
_buffer$ = -80						; size = 80
_box_colour$ = 8					; size = 4
?display_waypoint_information@@YGXUREAL_COLOUR@@@Z PROC	; display_waypoint_information, COMDAT

; 10500: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 10501: 	char
; 10502: 		buffer[80];
; 10503: 
; 10504: 	entity
; 10505: 		*wp;
; 10506: 
; 10507: 	vec3d
; 10508: 		*gunship_position,
; 10509: 		waypoint_position;
; 10510: 
; 10511: 	float
; 10512: 		waypoint_range;
; 10513: 
; 10514: 	wp = get_local_entity_current_waypoint (get_gunship_entity ());

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  00017	89 45 ac	 mov	 DWORD PTR _wp$[ebp], eax

; 10515: 
; 10516: 	draw_box(-0.98, -0.75, -0.35, -1.0, FALSE, box_colour);

  0001a	8b 45 08	 mov	 eax, DWORD PTR _box_colour$[ebp]
  0001d	50		 push	 eax
  0001e	6a 00		 push	 0
  00020	51		 push	 ecx
  00021	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00029	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002e	51		 push	 ecx
  0002f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  00037	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003c	51		 push	 ecx
  0003d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  00045	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004a	51		 push	 ecx
  0004b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00053	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00058	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 10517: 
; 10518: 	if (wp)

  0005d	83 7d ac 00	 cmp	 DWORD PTR _wp$[ebp], 0
  00061	0f 84 89 04 00
	00		 je	 $LN2@display_wa

; 10519: 	{
; 10520: 		if (draw_large_mfd)

  00067	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0006e	74 09		 je	 SHORT $LN3@display_wa

; 10521: 		{
; 10522: 			set_mono_font_type (MONO_FONT_TYPE_7X12);

  00070	6a 05		 push	 5
  00072	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 10523: 		}
; 10524: 		else

  00077	eb 07		 jmp	 SHORT $LN4@display_wa
$LN3@display_wa:

; 10525: 		{
; 10526: 			set_mono_font_type (MONO_FONT_TYPE_5X7);

  00079	6a 01		 push	 1
  0007b	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN4@display_wa:

; 10527: 		}
; 10528: 
; 10529: 		gunship_position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00080	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00087	74 0f		 je	 SHORT $LN14@display_wa
  00089	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0008e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00090	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv82[ebp], ecx
  00096	eb 24		 jmp	 SHORT $LN15@display_wa
$LN14@display_wa:
  00098	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXUREAL_COLOUR@@@Z@4JA
  0009e	83 c2 1d	 add	 edx, 29			; 0000001dH
  000a1	52		 push	 edx
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b2	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv82[ebp], 0
$LN15@display_wa:
  000bc	b9 01 00 00 00	 mov	 ecx, 1
  000c1	85 c9		 test	 ecx, ecx
  000c3	74 0c		 je	 SHORT $LN16@display_wa
  000c5	c7 85 38 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv90[ebp], 8
  000cf	eb 24		 jmp	 SHORT $LN17@display_wa
$LN16@display_wa:
  000d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXUREAL_COLOUR@@@Z@4JA
  000d7	83 c2 1d	 add	 edx, 29			; 0000001dH
  000da	52		 push	 edx
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000eb	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv90[ebp], 0
$LN17@display_wa:
  000f5	6a 08		 push	 8
  000f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000fd	51		 push	 ecx
  000fe	6b 95 3c ff ff
	ff 60		 imul	 edx, DWORD PTR tv82[ebp], 96
  00105	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR tv90[ebp]
  0010b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00112	ff d1		 call	 ecx
  00114	89 45 a8	 mov	 DWORD PTR _gunship_position$[ebp], eax

; 10530: 
; 10531: 		get_waypoint_display_position (get_gunship_entity (), wp, &waypoint_position);

  00117	8d 45 9c	 lea	 eax, DWORD PTR _waypoint_position$[ebp]
  0011a	50		 push	 eax
  0011b	8b 4d ac	 mov	 ecx, DWORD PTR _wp$[ebp]
  0011e	51		 push	 ecx
  0011f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00125	52		 push	 edx
  00126	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 10532: 
; 10533: 		//
; 10534: 		// waypoint id & range
; 10535: 		//
; 10536: 
; 10537: 		waypoint_range = get_2d_range (gunship_position, &waypoint_position);

  0012b	8d 45 9c	 lea	 eax, DWORD PTR _waypoint_position$[ebp]
  0012e	50		 push	 eax
  0012f	8b 4d a8	 mov	 ecx, DWORD PTR _gunship_position$[ebp]
  00132	51		 push	 ecx
  00133	e8 00 00 00 00	 call	 ?get_2d_range@@YGMPBUVEC3D@@0@Z ; get_2d_range
  00138	d9 5d 98	 fstp	 DWORD PTR _waypoint_range$[ebp]

; 10538: 
; 10539: 		if (!comanche_damage.navigation_computer)

  0013b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00140	c1 e8 07	 shr	 eax, 7
  00143	83 e0 01	 and	 eax, 1
  00146	0f 85 7a 02 00
	00		 jne	 $LN5@display_wa

; 10540: 		{
; 10541: 			if (waypoint_range < 1000.0)

  0014c	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _waypoint_range$[ebp]
  00151	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  00159	66 0f 2f c8	 comisd	 xmm1, xmm0
  0015d	0f 86 ae 00 00
	00		 jbe	 $LN7@display_wa

; 10542: 			{
; 10543: 				sprintf (buffer, "%c:%dm", get_local_entity_char_value (wp, CHAR_TYPE_TAG), (int) waypoint_range);

  00163	83 7d ac 00	 cmp	 DWORD PTR _wp$[ebp], 0
  00167	74 0d		 je	 SHORT $LN18@display_wa
  00169	8b 45 ac	 mov	 eax, DWORD PTR _wp$[ebp]
  0016c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016e	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv148[ebp], ecx
  00174	eb 24		 jmp	 SHORT $LN19@display_wa
$LN18@display_wa:
  00176	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXUREAL_COLOUR@@@Z@4JA
  0017c	83 c2 2b	 add	 edx, 43			; 0000002bH
  0017f	52		 push	 edx
  00180	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00185	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0018a	50		 push	 eax
  0018b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00190	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv148[ebp], 0
$LN19@display_wa:
  0019a	b9 01 00 00 00	 mov	 ecx, 1
  0019f	85 c9		 test	 ecx, ecx
  001a1	74 0c		 je	 SHORT $LN20@display_wa
  001a3	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv156[ebp], 0
  001ad	eb 24		 jmp	 SHORT $LN21@display_wa
$LN20@display_wa:
  001af	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXUREAL_COLOUR@@@Z@4JA
  001b5	83 c2 2b	 add	 edx, 43			; 0000002bH
  001b8	52		 push	 edx
  001b9	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  001be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  001c3	50		 push	 eax
  001c4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c9	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv156[ebp], 0
$LN21@display_wa:
  001d3	f3 0f 2c 4d 98	 cvttss2si ecx, DWORD PTR _waypoint_range$[ebp]
  001d8	51		 push	 ecx
  001d9	6a 00		 push	 0
  001db	8b 55 ac	 mov	 edx, DWORD PTR _wp$[ebp]
  001de	52		 push	 edx
  001df	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR tv156[ebp]
  001e5	c1 e0 02	 shl	 eax, 2
  001e8	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR tv148[ebp]
  001ee	8b 94 c8 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[eax+ecx*8]
  001f5	ff d2		 call	 edx
  001f7	0f b6 c0	 movzx	 eax, al
  001fa	50		 push	 eax
  001fb	68 00 00 00 00	 push	 OFFSET ??_C@_06JCIGMCHD@?$CFc?3?$CFdm@
  00200	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00203	51		 push	 ecx
  00204	e8 00 00 00 00	 call	 _sprintf
  00209	83 c4 10	 add	 esp, 16			; 00000010H
  0020c	e9 b3 01 00 00	 jmp	 $LN10@display_wa
$LN7@display_wa:

; 10544: 			}
; 10545: 			else if (waypoint_range < 100000.0)

  00211	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _waypoint_range$[ebp]
  00216	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40f86a0000000000
  0021e	66 0f 2f c8	 comisd	 xmm1, xmm0
  00222	0f 86 e7 00 00
	00		 jbe	 $LN9@display_wa

; 10546: 			{
; 10547: 				int
; 10548: 					i;
; 10549: 
; 10550: 				float
; 10551: 					f;
; 10552: 
; 10553: 				//
; 10554: 				// this is required to prevent rounding errors around the 100Km mark
; 10555: 				//
; 10556: 
; 10557: 				i = (int) waypoint_range * (1.0 / 100.0);

  00228	f3 0f 2c 45 98	 cvttss2si eax, DWORD PTR _waypoint_range$[ebp]
  0022d	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00231	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  00239	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  0023d	89 4d 94	 mov	 DWORD PTR _i$6[ebp], ecx

; 10558: 
; 10559: 				f = (float) i * (1.0 / 10.0);

  00240	f3 0f 2a 45 94	 cvtsi2ss xmm0, DWORD PTR _i$6[ebp]
  00245	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00249	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00251	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00255	f3 0f 11 45 90	 movss	 DWORD PTR _f$5[ebp], xmm0

; 10560: 
; 10561: 				sprintf (buffer, "%c:%.1fKm", get_local_entity_char_value (wp, CHAR_TYPE_TAG), f);

  0025a	83 7d ac 00	 cmp	 DWORD PTR _wp$[ebp], 0
  0025e	74 0d		 je	 SHORT $LN22@display_wa
  00260	8b 45 ac	 mov	 eax, DWORD PTR _wp$[ebp]
  00263	8b 08		 mov	 ecx, DWORD PTR [eax]
  00265	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv184[ebp], ecx
  0026b	eb 24		 jmp	 SHORT $LN23@display_wa
$LN22@display_wa:
  0026d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXUREAL_COLOUR@@@Z@4JA
  00273	83 c2 3d	 add	 edx, 61			; 0000003dH
  00276	52		 push	 edx
  00277	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0027c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00281	50		 push	 eax
  00282	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00287	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv184[ebp], 0
$LN23@display_wa:
  00291	b9 01 00 00 00	 mov	 ecx, 1
  00296	85 c9		 test	 ecx, ecx
  00298	74 0c		 je	 SHORT $LN24@display_wa
  0029a	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv192[ebp], 0
  002a4	eb 24		 jmp	 SHORT $LN25@display_wa
$LN24@display_wa:
  002a6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXUREAL_COLOUR@@@Z@4JA
  002ac	83 c2 3d	 add	 edx, 61			; 0000003dH
  002af	52		 push	 edx
  002b0	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  002b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  002ba	50		 push	 eax
  002bb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002c0	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv192[ebp], 0
$LN25@display_wa:
  002ca	f3 0f 5a 45 90	 cvtss2sd xmm0, DWORD PTR _f$5[ebp]
  002cf	83 ec 08	 sub	 esp, 8
  002d2	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  002d7	6a 00		 push	 0
  002d9	8b 4d ac	 mov	 ecx, DWORD PTR _wp$[ebp]
  002dc	51		 push	 ecx
  002dd	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR tv192[ebp]
  002e3	c1 e2 02	 shl	 edx, 2
  002e6	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR tv184[ebp]
  002ec	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[edx+eax*8]
  002f3	ff d1		 call	 ecx
  002f5	0f b6 d0	 movzx	 edx, al
  002f8	52		 push	 edx
  002f9	68 00 00 00 00	 push	 OFFSET ??_C@_09EKFBJBJG@?$CFc?3?$CF?41fKm@
  002fe	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  00301	50		 push	 eax
  00302	e8 00 00 00 00	 call	 _sprintf
  00307	83 c4 14	 add	 esp, 20			; 00000014H

; 10562: 			}
; 10563: 			else

  0030a	e9 b5 00 00 00	 jmp	 $LN10@display_wa
$LN9@display_wa:

; 10564: 			{
; 10565: 				sprintf (buffer, "%c:%dKm", get_local_entity_char_value (wp, CHAR_TYPE_TAG), (int) (waypoint_range * (1.0 / 1000.0)));

  0030f	83 7d ac 00	 cmp	 DWORD PTR _wp$[ebp], 0
  00313	74 0d		 je	 SHORT $LN26@display_wa
  00315	8b 45 ac	 mov	 eax, DWORD PTR _wp$[ebp]
  00318	8b 08		 mov	 ecx, DWORD PTR [eax]
  0031a	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv213[ebp], ecx
  00320	eb 24		 jmp	 SHORT $LN27@display_wa
$LN26@display_wa:
  00322	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXUREAL_COLOUR@@@Z@4JA
  00328	83 c2 41	 add	 edx, 65			; 00000041H
  0032b	52		 push	 edx
  0032c	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00331	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00336	50		 push	 eax
  00337	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0033c	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv213[ebp], 0
$LN27@display_wa:
  00346	b9 01 00 00 00	 mov	 ecx, 1
  0034b	85 c9		 test	 ecx, ecx
  0034d	74 0c		 je	 SHORT $LN28@display_wa
  0034f	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv221[ebp], 0
  00359	eb 24		 jmp	 SHORT $LN29@display_wa
$LN28@display_wa:
  0035b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXUREAL_COLOUR@@@Z@4JA
  00361	83 c2 41	 add	 edx, 65			; 00000041H
  00364	52		 push	 edx
  00365	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0036a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  0036f	50		 push	 eax
  00370	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00375	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv221[ebp], 0
$LN29@display_wa:
  0037f	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _waypoint_range$[ebp]
  00384	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0038c	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  00390	51		 push	 ecx
  00391	6a 00		 push	 0
  00393	8b 55 ac	 mov	 edx, DWORD PTR _wp$[ebp]
  00396	52		 push	 edx
  00397	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR tv221[ebp]
  0039d	c1 e0 02	 shl	 eax, 2
  003a0	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR tv213[ebp]
  003a6	8b 94 c8 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[eax+ecx*8]
  003ad	ff d2		 call	 edx
  003af	0f b6 c0	 movzx	 eax, al
  003b2	50		 push	 eax
  003b3	68 00 00 00 00	 push	 OFFSET ??_C@_07CFANIJPM@?$CFc?3?$CFdKm@
  003b8	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  003bb	51		 push	 ecx
  003bc	e8 00 00 00 00	 call	 _sprintf
  003c1	83 c4 10	 add	 esp, 16			; 00000010H
$LN10@display_wa:

; 10566: 			}
; 10567: 		}
; 10568: 		else

  003c4	eb 11		 jmp	 SHORT $LN6@display_wa
$LN5@display_wa:

; 10569: 		{
; 10570: 			sprintf (buffer, "-:--.-");

  003c6	68 00 00 00 00	 push	 OFFSET ??_C@_06BAOIPBEF@?9?3?9?9?4?9@
  003cb	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  003ce	50		 push	 eax
  003cf	e8 00 00 00 00	 call	 _sprintf
  003d4	83 c4 08	 add	 esp, 8
$LN6@display_wa:

; 10571: 		}
; 10572: 
; 10573: 		set_2d_mono_font_position (-0.95, -0.8);

  003d7	51		 push	 ecx
  003d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  003e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e5	51		 push	 ecx
  003e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  003ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f3	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10574: 
; 10575: 		set_mono_font_rel_position (1.0, 0.0);

  003f8	51		 push	 ecx
  003f9	0f 57 c0	 xorps	 xmm0, xmm0
  003fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00401	51		 push	 ecx
  00402	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0040a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10576: 
; 10577: 		print_mono_font_string (buffer);

  00414	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  00417	50		 push	 eax
  00418	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10578: 
; 10579: 		//
; 10580: 		// time to go
; 10581: 		//
; 10582: 
; 10583: 		if ((current_flight_dynamics->velocity_z.value > 0.1) && (!comanche_damage.navigation_computer))

  0041d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00422	f3 0f 5a 80 9c
	20 00 00	 cvtss2sd xmm0, DWORD PTR [eax+8348]
  0042a	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fb999999999999a
  00432	76 65		 jbe	 SHORT $LN11@display_wa
  00434	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00439	c1 e8 07	 shr	 eax, 7
  0043c	83 e0 01	 and	 eax, 1
  0043f	75 58		 jne	 SHORT $LN11@display_wa

; 10584: 		{
; 10585: 			float
; 10586: 				time_to_go,
; 10587: 				hours,
; 10588: 				minutes,
; 10589: 				seconds;
; 10590: 
; 10591: 			time_to_go = waypoint_range / current_flight_dynamics->velocity_z.value;

  00441	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00446	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _waypoint_range$[ebp]
  0044b	f3 0f 5e 80 9c
	20 00 00	 divss	 xmm0, DWORD PTR [eax+8348]
  00453	f3 0f 11 45 8c	 movss	 DWORD PTR _time_to_go$4[ebp], xmm0

; 10592: 
; 10593: 			get_digital_clock_values (time_to_go, &hours, &minutes, &seconds);

  00458	8d 45 80	 lea	 eax, DWORD PTR _seconds$1[ebp]
  0045b	50		 push	 eax
  0045c	8d 4d 84	 lea	 ecx, DWORD PTR _minutes$2[ebp]
  0045f	51		 push	 ecx
  00460	8d 55 88	 lea	 edx, DWORD PTR _hours$3[ebp]
  00463	52		 push	 edx
  00464	51		 push	 ecx
  00465	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _time_to_go$4[ebp]
  0046a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046f	e8 00 00 00 00	 call	 ?get_digital_clock_values@@YGXMPAM00@Z ; get_digital_clock_values

; 10594: 
; 10595: 			sprintf (buffer, "%02d:%02d:%02d", (int) hours, (int) minutes, (int) seconds);

  00474	f3 0f 2c 45 80	 cvttss2si eax, DWORD PTR _seconds$1[ebp]
  00479	50		 push	 eax
  0047a	f3 0f 2c 4d 84	 cvttss2si ecx, DWORD PTR _minutes$2[ebp]
  0047f	51		 push	 ecx
  00480	f3 0f 2c 55 88	 cvttss2si edx, DWORD PTR _hours$3[ebp]
  00485	52		 push	 edx
  00486	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
  0048b	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  0048e	50		 push	 eax
  0048f	e8 00 00 00 00	 call	 _sprintf
  00494	83 c4 14	 add	 esp, 20			; 00000014H

; 10596: 		}
; 10597: 		else

  00497	eb 11		 jmp	 SHORT $LN12@display_wa
$LN11@display_wa:

; 10598: 		{
; 10599: 			strcpy (buffer, "--:--:--");

  00499	68 00 00 00 00	 push	 OFFSET ??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@
  0049e	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  004a1	50		 push	 eax
  004a2	e8 00 00 00 00	 call	 _strcpy
  004a7	83 c4 08	 add	 esp, 8
$LN12@display_wa:

; 10600: 		}
; 10601: 
; 10602: 		set_2d_mono_font_position (-0.95, -0.9);

  004aa	51		 push	 ecx
  004ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  004b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b8	51		 push	 ecx
  004b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  004c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c6	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10603: 
; 10604: 		set_mono_font_rel_position (1.0, 0.0);

  004cb	51		 push	 ecx
  004cc	0f 57 c0	 xorps	 xmm0, xmm0
  004cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d4	51		 push	 ecx
  004d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10605: 
; 10606: 		print_mono_font_string (buffer);

  004e7	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  004ea	50		 push	 eax
  004eb	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN2@display_wa:

; 10607: 	}
; 10608: }

  004f0	5f		 pop	 edi
  004f1	5e		 pop	 esi
  004f2	5b		 pop	 ebx
  004f3	8b e5		 mov	 esp, ebp
  004f5	5d		 pop	 ebp
  004f6	c2 04 00	 ret	 4
?display_waypoint_information@@YGXUREAL_COLOUR@@@Z ENDP	; display_waypoint_information
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_high_action_display@@YGXPAUENTITY@@H@Z
_TEXT	SEGMENT
tv293 = -304						; size = 4
tv168 = -304						; size = 4
tv149 = -304						; size = 4
tv481 = -300						; size = 4
tv286 = -300						; size = 4
tv260 = -300						; size = 4
tv221 = -300						; size = 4
tv161 = -300						; size = 4
tv141 = -300						; size = 4
_altitude$1 = -232					; size = 4
_airspeed$2 = -228					; size = 4
_bg_colour$3 = -224					; size = 4
_width$ = -220						; size = 4
_x_adjust$ = -216					; size = 4
_target_range$ = -212					; size = 4
_rangefinder$ = -208					; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
_target$ = 8						; size = 4
_fill_boxes$ = 12					; size = 4
?draw_high_action_display@@YGXPAUENTITY@@H@Z PROC	; draw_high_action_display, COMDAT

; 3424 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3425 : 	const char* s;
; 3426 : 	char buffer[200];
; 3427 : 
; 3428 : 	rangefinding_system rangefinder = get_range_finder();

  0000c	e8 00 00 00 00	 call	 ?get_range_finder@@YG?AW4rangefinding_system@@XZ ; get_range_finder
  00011	89 85 30 ff ff
	ff		 mov	 DWORD PTR _rangefinder$[ebp], eax

; 3429 : 
; 3430 : 	float target_range = get_range_to_target();

  00017	e8 00 00 00 00	 call	 ?get_range_to_target@@YGMXZ ; get_range_to_target
  0001c	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _target_range$[ebp]

; 3431 : 	int x_adjust, width;
; 3432 : 
; 3433 : 	if (draw_large_mfd)

  00022	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00029	74 09		 je	 SHORT $LN6@draw_high_

; 3434 : 		set_mono_font_type (MONO_FONT_TYPE_5X9);

  0002b	6a 02		 push	 2
  0002d	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 3435 : 	else

  00032	eb 07		 jmp	 SHORT $LN7@draw_high_
$LN6@draw_high_:

; 3436 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  00034	6a 00		 push	 0
  00036	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN7@draw_high_:

; 3437 : 
; 3438 : 	if (fill_boxes == 2)

  0003b	83 7d 0c 02	 cmp	 DWORD PTR _fill_boxes$[ebp], 2
  0003f	0f 85 c7 00 00
	00		 jne	 $LN8@draw_high_

; 3439 : 	{
; 3440 : 		rgb_colour bg_colour;
; 3441 : 
; 3442 : 		set_rgb_colour (bg_colour, 0, 40, 0, 255);

  00045	c6 85 22 ff ff
	ff 00		 mov	 BYTE PTR _bg_colour$3[ebp+2], 0
  0004c	c6 85 21 ff ff
	ff 28		 mov	 BYTE PTR _bg_colour$3[ebp+1], 40 ; 00000028H
  00053	c6 85 20 ff ff
	ff 00		 mov	 BYTE PTR _bg_colour$3[ebp], 0
  0005a	c6 85 23 ff ff
	ff ff		 mov	 BYTE PTR _bg_colour$3[ebp+3], 255 ; 000000ffH

; 3443 : 
; 3444 : 		draw_bordered_box(-0.98, -1.0, -0.35, -0.8, bg_colour, MFD_COLOUR1);

  00061	b8 04 00 00 00	 mov	 eax, 4
  00066	6b c8 00	 imul	 ecx, eax, 0
  00069	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0006f	52		 push	 edx
  00070	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _bg_colour$3[ebp]
  00076	50		 push	 eax
  00077	51		 push	 ecx
  00078	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00080	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00085	51		 push	 ecx
  00086	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  0008e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00093	51		 push	 ecx
  00094	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0009c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a1	51		 push	 ecx
  000a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  000aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000af	e8 00 00 00 00	 call	 ?draw_bordered_box@@YGXMMMMUREAL_COLOUR@@0@Z ; draw_bordered_box

; 3445 : 		draw_bordered_box(0.98, -1.0, 0.35, -0.8, bg_colour, MFD_COLOUR1);

  000b4	b8 04 00 00 00	 mov	 eax, 4
  000b9	6b c8 00	 imul	 ecx, eax, 0
  000bc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000c2	52		 push	 edx
  000c3	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _bg_colour$3[ebp]
  000c9	50		 push	 eax
  000ca	51		 push	 ecx
  000cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  000d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d8	51		 push	 ecx
  000d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  000e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e6	51		 push	 ecx
  000e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f4	51		 push	 ecx
  000f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7ae148
  000fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00102	e8 00 00 00 00	 call	 ?draw_bordered_box@@YGXMMMMUREAL_COLOUR@@0@Z ; draw_bordered_box
  00107	e9 a6 00 00 00	 jmp	 $LN10@draw_high_
$LN8@draw_high_:

; 3446 : 	}
; 3447 : 	else if (fill_boxes == 1)

  0010c	83 7d 0c 01	 cmp	 DWORD PTR _fill_boxes$[ebp], 1
  00110	0f 85 9c 00 00
	00		 jne	 $LN10@draw_high_

; 3448 : 	{
; 3449 : 		draw_box(-0.98, -1.0, -0.35, -0.8, FALSE, MFD_COLOUR1);

  00116	b8 04 00 00 00	 mov	 eax, 4
  0011b	6b c8 00	 imul	 ecx, eax, 0
  0011e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00124	52		 push	 edx
  00125	6a 00		 push	 0
  00127	51		 push	 ecx
  00128	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00130	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00135	51		 push	 ecx
  00136	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  0013e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00143	51		 push	 ecx
  00144	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0014c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00151	51		 push	 ecx
  00152	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  0015a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015f	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 3450 : 		draw_box(0.98, -1.0, 0.35, -0.8, FALSE, MFD_COLOUR1);

  00164	b8 04 00 00 00	 mov	 eax, 4
  00169	6b c8 00	 imul	 ecx, eax, 0
  0016c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00172	52		 push	 edx
  00173	6a 00		 push	 0
  00175	51		 push	 ecx
  00176	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0017e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00183	51		 push	 ecx
  00184	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  0018c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00191	51		 push	 ecx
  00192	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0019a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019f	51		 push	 ecx
  001a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7ae148
  001a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ad	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box
$LN10@draw_high_:

; 3451 : 	}
; 3452 : 
; 3453 : // Jabberwock 031107 Designated targets
; 3454 : 	target = get_local_entity_parent (get_gunship_entity (), LIST_TYPE_TARGET);

  001b2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  001b9	74 0f		 je	 SHORT $LN36@draw_high_
  001bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  001c0	8b 08		 mov	 ecx, DWORD PTR [eax]
  001c2	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv141[ebp], ecx
  001c8	eb 24		 jmp	 SHORT $LN37@draw_high_
$LN36@draw_high_:
  001ca	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_high_action_display@@YGXPAUENTITY@@H@Z@4JA
  001d0	83 c2 1e	 add	 edx, 30			; 0000001eH
  001d3	52		 push	 edx
  001d4	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  001d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001de	50		 push	 eax
  001df	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001e4	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv141[ebp], 0
$LN37@draw_high_:
  001ee	b9 01 00 00 00	 mov	 ecx, 1
  001f3	85 c9		 test	 ecx, ecx
  001f5	74 0c		 je	 SHORT $LN38@draw_high_
  001f7	c7 85 d0 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv149[ebp], 38 ; 00000026H
  00201	eb 24		 jmp	 SHORT $LN39@draw_high_
$LN38@draw_high_:
  00203	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_high_action_display@@YGXPAUENTITY@@H@Z@4JA
  00209	83 c2 1e	 add	 edx, 30			; 0000001eH
  0020c	52		 push	 edx
  0020d	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00212	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00217	50		 push	 eax
  00218	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0021d	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv149[ebp], 0
$LN39@draw_high_:
  00227	6a 26		 push	 38			; 00000026H
  00229	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0022f	51		 push	 ecx
  00230	69 95 d4 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv141[ebp], 180
  0023a	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR tv149[ebp]
  00240	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00247	ff d1		 call	 ecx
  00249	89 45 08	 mov	 DWORD PTR _target$[ebp], eax

; 3455 : 
; 3456 : 	if (target && get_local_entity_parent (target, LIST_TYPE_DESIGNATED_TARGET) == get_gunship_entity())

  0024c	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00250	0f 84 d1 00 00
	00		 je	 $LN11@draw_high_
  00256	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0025a	74 0d		 je	 SHORT $LN40@draw_high_
  0025c	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0025f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00261	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv161[ebp], ecx
  00267	eb 20		 jmp	 SHORT $LN41@draw_high_
$LN40@draw_high_:
  00269	68 80 0d 00 00	 push	 3456			; 00000d80H
  0026e	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00273	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00279	52		 push	 edx
  0027a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0027f	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv161[ebp], 0
$LN41@draw_high_:
  00289	b8 01 00 00 00	 mov	 eax, 1
  0028e	85 c0		 test	 eax, eax
  00290	74 0c		 je	 SHORT $LN42@draw_high_
  00292	c7 85 d0 fe ff
	ff 0a 00 00 00	 mov	 DWORD PTR tv168[ebp], 10 ; 0000000aH
  0029c	eb 20		 jmp	 SHORT $LN43@draw_high_
$LN42@draw_high_:
  0029e	68 80 0d 00 00	 push	 3456			; 00000d80H
  002a3	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  002a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  002ae	51		 push	 ecx
  002af	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002b4	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv168[ebp], 0
$LN43@draw_high_:
  002be	6a 0a		 push	 10			; 0000000aH
  002c0	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  002c3	52		 push	 edx
  002c4	69 85 d4 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv161[ebp], 180
  002ce	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR tv168[ebp]
  002d4	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  002db	ff d2		 call	 edx
  002dd	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  002e3	75 42		 jne	 SHORT $LN11@draw_high_

; 3457 : 	{
; 3458 : 		set_2d_mono_font_position (0.7, -0.7);

  002e5	51		 push	 ecx
  002e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  002ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f3	51		 push	 ecx
  002f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  002fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00301	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3459 : 		set_mono_font_rel_position (0, 0);

  00306	51		 push	 ecx
  00307	0f 57 c0	 xorps	 xmm0, xmm0
  0030a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030f	51		 push	 ecx
  00310	0f 57 c0	 xorps	 xmm0, xmm0
  00313	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00318	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3460 : 		print_mono_font_string ("MARKED");

  0031d	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  00322	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN11@draw_high_:

; 3461 : 	}
; 3462 : // Jabberwock 031107 ends
; 3463 : 
; 3464 : 	//
; 3465 : 	// target name
; 3466 : 	//
; 3467 : 
; 3468 : 	s = get_target_display_name (target, buffer, draw_large_mfd);

  00327	a1 00 00 00 00	 mov	 eax, DWORD PTR ?draw_large_mfd@@3HA
  0032c	50		 push	 eax
  0032d	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00333	51		 push	 ecx
  00334	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00337	52		 push	 edx
  00338	e8 00 00 00 00	 call	 ?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z ; get_target_display_name
  0033d	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 3469 : 
; 3470 : 	if (s)

  00340	83 7d fc 00	 cmp	 DWORD PTR _s$[ebp], 0
  00344	74 65		 je	 SHORT $LN12@draw_high_

; 3471 : 	{
; 3472 : 		width = get_mono_font_string_width (s);

  00346	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00349	50		 push	 eax
  0034a	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0034f	e8 00 00 00 00	 call	 __ftol2_sse
  00354	89 85 24 ff ff
	ff		 mov	 DWORD PTR _width$[ebp], eax

; 3473 : 		set_2d_mono_font_position (0.0, -0.7);

  0035a	51		 push	 ecx
  0035b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00363	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00368	51		 push	 ecx
  00369	0f 57 c0	 xorps	 xmm0, xmm0
  0036c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00371	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3474 : 		set_mono_font_rel_position (-width * 0.5, 0);

  00376	51		 push	 ecx
  00377	0f 57 c0	 xorps	 xmm0, xmm0
  0037a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037f	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _width$[ebp]
  00385	f7 d8		 neg	 eax
  00387	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  0038b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00393	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00397	51		 push	 ecx
  00398	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3475 : 		print_mono_font_string (s);

  003a2	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  003a5	50		 push	 eax
  003a6	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN12@draw_high_:

; 3476 : 	}
; 3477 : 
; 3478 : 	// airspeed and altitude
; 3479 : 	{
; 3480 : 		int airspeed = (int)knots(current_flight_dynamics->velocity_z.value);

  003ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  003b0	f3 0f 10 80 9c
	20 00 00	 movss	 xmm0, DWORD PTR [eax+8348]
  003b8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ff85d84
  003c0	f3 0f 2c c8	 cvttss2si ecx, xmm0
  003c4	89 8d 1c ff ff
	ff		 mov	 DWORD PTR _airspeed$2[ebp], ecx

; 3481 : 		int altitude = get_apache_display_radar_altitude();

  003ca	e8 00 00 00 00	 call	 ?get_apache_display_radar_altitude@@YGHXZ ; get_apache_display_radar_altitude
  003cf	89 85 18 ff ff
	ff		 mov	 DWORD PTR _altitude$1[ebp], eax

; 3482 : 
; 3483 : 		sprintf(buffer, "%3d", airspeed);

  003d5	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _airspeed$2[ebp]
  003db	50		 push	 eax
  003dc	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  003e1	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  003e7	51		 push	 ecx
  003e8	e8 00 00 00 00	 call	 _sprintf
  003ed	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3484 : 		set_2d_mono_font_position (-0.7, -0.72);

  003f0	51		 push	 ecx
  003f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3851ec
  003f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003fe	51		 push	 ecx
  003ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00407	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3485 : 		set_mono_font_rel_position (0, 0);

  00411	51		 push	 ecx
  00412	0f 57 c0	 xorps	 xmm0, xmm0
  00415	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0041a	51		 push	 ecx
  0041b	0f 57 c0	 xorps	 xmm0, xmm0
  0041e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00423	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3486 : 		print_mono_font_string (buffer);

  00428	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0042e	50		 push	 eax
  0042f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3487 : 
; 3488 : 		if (altitude < 1500.0)

  00434	f2 0f 2a 85 18
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR _altitude$1[ebp]
  0043c	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4097700000000000
  00444	66 0f 2f c8	 comisd	 xmm1, xmm0
  00448	76 5f		 jbe	 SHORT $LN13@draw_high_

; 3489 : 		{
; 3490 : 			sprintf(buffer, "%4d", altitude);

  0044a	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _altitude$1[ebp]
  00450	50		 push	 eax
  00451	68 00 00 00 00	 push	 OFFSET ??_C@_03GLKEJMAA@?$CF4d@
  00456	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0045c	51		 push	 ecx
  0045d	e8 00 00 00 00	 call	 _sprintf
  00462	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3491 : 			set_2d_mono_font_position (0.4, -0.72);

  00465	51		 push	 ecx
  00466	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3851ec
  0046e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00473	51		 push	 ecx
  00474	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  0047c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00481	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3492 : 			set_mono_font_rel_position (0, 0);

  00486	51		 push	 ecx
  00487	0f 57 c0	 xorps	 xmm0, xmm0
  0048a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0048f	51		 push	 ecx
  00490	0f 57 c0	 xorps	 xmm0, xmm0
  00493	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00498	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3493 : 			print_mono_font_string (buffer);

  0049d	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  004a3	50		 push	 eax
  004a4	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN13@draw_high_:

; 3494 : 		}
; 3495 : 	}
; 3496 : 
; 3497 : 	// lower left box:
; 3498 : 	// rang finder    range
; 3499 : 	// targeting status
; 3500 : 
; 3501 : 	switch (rangefinder)

  004a9	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _rangefinder$[ebp]
  004af	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv221[ebp], eax
  004b5	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR tv221[ebp], 0
  004bc	74 17		 je	 SHORT $LN14@draw_high_
  004be	83 bd d4 fe ff
	ff 01		 cmp	 DWORD PTR tv221[ebp], 1
  004c5	74 46		 je	 SHORT $LN15@draw_high_
  004c7	83 bd d4 fe ff
	ff 02		 cmp	 DWORD PTR tv221[ebp], 2
  004ce	74 6a		 je	 SHORT $LN16@draw_high_
  004d0	e9 d2 00 00 00	 jmp	 $LN2@draw_high_
$LN14@draw_high_:

; 3502 : 	{
; 3503 : 	case RANGEFINDER_FCR:
; 3504 : 		s = "FCR";

  004d5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03JKJFCLEN@FCR@

; 3505 : 		sprintf(buffer, "R%.1f", target_range * 0.001);

  004dc	f3 0f 5a 85 2c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  004e4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  004ec	83 ec 08	 sub	 esp, 8
  004ef	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  004f4	68 00 00 00 00	 push	 OFFSET ??_C@_05FALJMMFP@R?$CF?41f@
  004f9	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  004ff	50		 push	 eax
  00500	e8 00 00 00 00	 call	 _sprintf
  00505	83 c4 10	 add	 esp, 16			; 00000010H

; 3506 : 		break;

  00508	e9 9a 00 00 00	 jmp	 $LN2@draw_high_
$LN15@draw_high_:

; 3507 : 	case RANGEFINDER_LASER:
; 3508 : 		s = "TADS";

  0050d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04DBODHFDK@TADS@

; 3509 : 		sprintf(buffer, "L%04.0f", target_range);

  00514	f3 0f 5a 85 2c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  0051c	83 ec 08	 sub	 esp, 8
  0051f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00524	68 00 00 00 00	 push	 OFFSET ??_C@_07HOJAAJFI@L?$CF04?40f@
  00529	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0052f	50		 push	 eax
  00530	e8 00 00 00 00	 call	 _sprintf
  00535	83 c4 10	 add	 esp, 16			; 00000010H

; 3510 : 		break;

  00538	eb 6d		 jmp	 SHORT $LN2@draw_high_
$LN16@draw_high_:

; 3511 : 	case RANGEFINDER_TRIANGULATION:
; 3512 : 		if (target_acquisition_system != TARGET_ACQUISITION_SYSTEM_OFF)

  0053a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 0 ; target_acquisition_system
  00541	74 09		 je	 SHORT $LN17@draw_high_

; 3513 : 			s = "TADS";

  00543	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04DBODHFDK@TADS@

; 3514 : 		else

  0054a	eb 07		 jmp	 SHORT $LN18@draw_high_
$LN17@draw_high_:

; 3515 : 			s = "NONE";

  0054c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04OKGDLNCL@NONE@
$LN18@draw_high_:

; 3516 : 
; 3517 : 		if (target_range > 0.0)

  00553	f3 0f 5a 85 2c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  0055b	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00563	76 2e		 jbe	 SHORT $LN19@draw_high_

; 3518 : 			sprintf(buffer, "A%.1f", target_range * 0.001);

  00565	f3 0f 5a 85 2c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  0056d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00575	83 ec 08	 sub	 esp, 8
  00578	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0057d	68 00 00 00 00	 push	 OFFSET ??_C@_05NFPLLMGK@A?$CF?41f@
  00582	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00588	50		 push	 eax
  00589	e8 00 00 00 00	 call	 _sprintf
  0058e	83 c4 10	 add	 esp, 16			; 00000010H

; 3519 : 		else

  00591	eb 14		 jmp	 SHORT $LN20@draw_high_
$LN19@draw_high_:

; 3520 : 			sprintf(buffer, "AX.X");

  00593	68 00 00 00 00	 push	 OFFSET ??_C@_04BCEGOCOA@AX?4X@
  00598	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0059e	50		 push	 eax
  0059f	e8 00 00 00 00	 call	 _sprintf
  005a4	83 c4 08	 add	 esp, 8
$LN20@draw_high_:
$LN2@draw_high_:

; 3521 : 
; 3522 : 		break;
; 3523 : 	}
; 3524 : 
; 3525 : 	set_2d_mono_font_position (-0.95, -0.83);

  005a7	51		 push	 ecx
  005a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf547ae1
  005b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b5	51		 push	 ecx
  005b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  005be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c3	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3526 : 	x_adjust = 0; //get_mono_font_string_width (s) * -0.5;

  005c8	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _x_adjust$[ebp], 0

; 3527 : 	set_mono_font_rel_position (x_adjust, 0);

  005d2	51		 push	 ecx
  005d3	0f 57 c0	 xorps	 xmm0, xmm0
  005d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005db	f3 0f 2a 85 28
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _x_adjust$[ebp]
  005e3	51		 push	 ecx
  005e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e9	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3528 : 	print_mono_font_string (s);

  005ee	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  005f1	50		 push	 eax
  005f2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3529 : 
; 3530 : 	set_2d_mono_font_position (-0.40, -0.83);

  005f7	51		 push	 ecx
  005f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf547ae1
  00600	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00605	51		 push	 ecx
  00606	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  0060e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00613	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3531 : 	x_adjust = -get_mono_font_string_width (buffer); // * 0.5;

  00618	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0061e	50		 push	 eax
  0061f	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00624	d9 9d d4 fe ff
	ff		 fstp	 DWORD PTR tv481[ebp]
  0062a	f3 0f 10 85 d4
	fe ff ff	 movss	 xmm0, DWORD PTR tv481[ebp]
  00632	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00639	f3 0f 2c c8	 cvttss2si ecx, xmm0
  0063d	89 8d 28 ff ff
	ff		 mov	 DWORD PTR _x_adjust$[ebp], ecx

; 3532 : 	set_mono_font_rel_position (x_adjust, 0);

  00643	51		 push	 ecx
  00644	0f 57 c0	 xorps	 xmm0, xmm0
  00647	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0064c	f3 0f 2a 85 28
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _x_adjust$[ebp]
  00654	51		 push	 ecx
  00655	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0065a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3533 : 	print_mono_font_string (buffer);

  0065f	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00665	50		 push	 eax
  00666	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3534 : 
; 3535 : 	// targeting status
; 3536 : 
; 3537 : 	switch (weapon_lock_type)

  0066b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_lock_type@@3W4WEAPON_LOCK_TYPES@@A ; weapon_lock_type
  00670	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv260[ebp], eax
  00676	83 bd d4 fe ff
	ff 09		 cmp	 DWORD PTR tv260[ebp], 9
  0067d	77 70		 ja	 SHORT $LN32@draw_high_
  0067f	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv260[ebp]
  00685	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN48@draw_high_[ecx*4]
$LN21@draw_high_:

; 3538 : 	{
; 3539 : 		case WEAPON_LOCK_NO_ACQUIRE:
; 3540 : 			s = "NO ACQUIRE";

  0068c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@FONJMCCD@NO?5ACQUIRE@

; 3541 : 			break;

  00693	eb 6d		 jmp	 SHORT $LN4@draw_high_
$LN22@draw_high_:

; 3542 : 		case WEAPON_LOCK_NO_WEAPON:
; 3543 : 			s = "NO WEAPON";

  00695	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_09GGBOJENB@NO?5WEAPON@

; 3544 : 			break;

  0069c	eb 64		 jmp	 SHORT $LN4@draw_high_
$LN23@draw_high_:

; 3545 : 		case WEAPON_LOCK_NO_TARGET:
; 3546 : 			s = "NO TARGET";

  0069e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_09JLFDDBCD@NO?5TARGET@

; 3547 : 			break;

  006a5	eb 5b		 jmp	 SHORT $LN4@draw_high_
$LN24@draw_high_:

; 3548 : 		case WEAPON_LOCK_INVALID_TARGET:
; 3549 : 			s = "INVALID TGT";

  006a7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0M@MFPJHMMF@INVALID?5TGT@

; 3550 : 			break;

  006ae	eb 52		 jmp	 SHORT $LN4@draw_high_
$LN25@draw_high_:

; 3551 : 		case WEAPON_LOCK_SEEKER_LIMIT:
; 3552 : 			s = "SKR LIMIT";

  006b0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_09CPLEKEOP@SKR?5LIMIT@

; 3553 : 			break;

  006b7	eb 49		 jmp	 SHORT $LN4@draw_high_
$LN26@draw_high_:

; 3554 : 		case WEAPON_LOCK_NO_LOS:
; 3555 : 			s = "NO LOS";

  006b9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06HCPKJKPH@NO?5LOS@

; 3556 : 			break;

  006c0	eb 40		 jmp	 SHORT $LN4@draw_high_
$LN27@draw_high_:

; 3557 : 		case WEAPON_LOCK_MIN_RANGE:
; 3558 : 			if (rangefinder != RANGEFINDER_TRIANGULATION)

  006c2	83 bd 30 ff ff
	ff 02		 cmp	 DWORD PTR _rangefinder$[ebp], 2
  006c9	74 09		 je	 SHORT $LN28@draw_high_

; 3559 : 			{
; 3560 : 				s = "MIN RNG";

  006cb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_07KJHNDNDJ@MIN?5RNG@

; 3561 : 				break;

  006d2	eb 2e		 jmp	 SHORT $LN4@draw_high_
$LN28@draw_high_:

; 3562 : 			}
; 3563 : 		case WEAPON_LOCK_MAX_RANGE:
; 3564 : 			if (rangefinder != RANGEFINDER_TRIANGULATION)

  006d4	83 bd 30 ff ff
	ff 02		 cmp	 DWORD PTR _rangefinder$[ebp], 2
  006db	74 09		 je	 SHORT $LN30@draw_high_

; 3565 : 			{
; 3566 : 				s = "MAX RNG";

  006dd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_07EPBNJCNI@MAX?5RNG@

; 3567 : 				break;

  006e4	eb 1c		 jmp	 SHORT $LN4@draw_high_
$LN30@draw_high_:

; 3568 : 			}
; 3569 : 		case WEAPON_LOCK_NO_BORESIGHT:
; 3570 : 		case WEAPON_LOCK_VALID:
; 3571 : 			s = "VALID LOCK";

  006e6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@PDLCBABH@VALID?5LOCK@

; 3572 : 			break;

  006ed	eb 13		 jmp	 SHORT $LN4@draw_high_
$LN32@draw_high_:

; 3573 : 		default:
; 3574 : 			debug_fatal ("Invalid weapon lock type = %d", weapon_lock_type);

  006ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_lock_type@@3W4WEAPON_LOCK_TYPES@@A ; weapon_lock_type
  006f4	50		 push	 eax
  006f5	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@IMEMIMEA@Invalid?5weapon?5lock?5type?5?$DN?5?$CFd@
  006fa	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  006ff	83 c4 08	 add	 esp, 8
$LN4@draw_high_:

; 3575 : 			break;
; 3576 : 	}
; 3577 : 
; 3578 : 	set_2d_mono_font_position (-0.95, -0.83);

  00702	51		 push	 ecx
  00703	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf547ae1
  0070b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00710	51		 push	 ecx
  00711	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  00719	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0071e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3579 : 	x_adjust = 0; //get_mono_font_string_width (s) * -0.5;

  00723	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _x_adjust$[ebp], 0

; 3580 : 	set_mono_font_rel_position (x_adjust, 10);

  0072d	51		 push	 ecx
  0072e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00736	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0073b	f3 0f 2a 85 28
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _x_adjust$[ebp]
  00743	51		 push	 ecx
  00744	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00749	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3581 : 	print_mono_font_string (s);

  0074e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00751	50		 push	 eax
  00752	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3582 : 
; 3583 : 	// lower right box:
; 3584 : 	// weapon type
; 3585 : 	// launch mode
; 3586 : 
; 3587 : 	s = get_weapon_status(buffer, sizeof(buffer));

  00757	68 c8 00 00 00	 push	 200			; 000000c8H
  0075c	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00762	50		 push	 eax
  00763	e8 00 00 00 00	 call	 ?get_weapon_status@@YGPBDPADI@Z ; get_weapon_status
  00768	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 3588 : 
; 3589 : 	set_2d_mono_font_position (0.37, -0.83);

  0076b	51		 push	 ecx
  0076c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf547ae1
  00774	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00779	51		 push	 ecx
  0077a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ebd70a4
  00782	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00787	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3590 : 	x_adjust = 0; //get_mono_font_string_width (s) * -0.5;

  0078c	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _x_adjust$[ebp], 0

; 3591 : 	set_mono_font_rel_position (x_adjust, 0);

  00796	51		 push	 ecx
  00797	0f 57 c0	 xorps	 xmm0, xmm0
  0079a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079f	f3 0f 2a 85 28
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _x_adjust$[ebp]
  007a7	51		 push	 ecx
  007a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ad	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3592 : 	print_mono_font_string (s);

  007b2	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  007b5	50		 push	 eax
  007b6	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3593 : 
; 3594 : 	if (get_local_entity_int_value (get_gunship_entity (), INT_TYPE_LOCK_ON_AFTER_LAUNCH))

  007bb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  007c2	74 0f		 je	 SHORT $LN44@draw_high_
  007c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  007c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  007cb	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv286[ebp], ecx
  007d1	eb 20		 jmp	 SHORT $LN45@draw_high_
$LN44@draw_high_:
  007d3	68 0a 0e 00 00	 push	 3594			; 00000e0aH
  007d8	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  007dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  007e3	52		 push	 edx
  007e4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007e9	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv286[ebp], 0
$LN45@draw_high_:
  007f3	b8 01 00 00 00	 mov	 eax, 1
  007f8	85 c0		 test	 eax, eax
  007fa	74 0c		 je	 SHORT $LN46@draw_high_
  007fc	c7 85 d0 fe ff
	ff 7e 00 00 00	 mov	 DWORD PTR tv293[ebp], 126 ; 0000007eH
  00806	eb 20		 jmp	 SHORT $LN47@draw_high_
$LN46@draw_high_:
  00808	68 0a 0e 00 00	 push	 3594			; 00000e0aH
  0080d	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00812	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00818	51		 push	 ecx
  00819	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0081e	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv293[ebp], 0
$LN47@draw_high_:
  00828	6a 7e		 push	 126			; 0000007eH
  0082a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00830	52		 push	 edx
  00831	69 85 d4 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv286[ebp], 1116
  0083b	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR tv293[ebp]
  00841	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00848	ff d2		 call	 edx
  0084a	85 c0		 test	 eax, eax
  0084c	74 09		 je	 SHORT $LN33@draw_high_

; 3595 : 		s = "LOAL-HI";

  0084e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_07CMBMBPC@LOAL?9HI@

; 3596 : 	else

  00855	eb 07		 jmp	 SHORT $LN34@draw_high_
$LN33@draw_high_:

; 3597 : 		s = "LOBL";

  00857	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04EIHLKMGG@LOBL@
$LN34@draw_high_:

; 3598 : 
; 3599 : 	set_2d_mono_font_position (0.37, -0.83);

  0085e	51		 push	 ecx
  0085f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf547ae1
  00867	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0086c	51		 push	 ecx
  0086d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ebd70a4
  00875	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0087a	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3600 : 	x_adjust = 0; //get_mono_font_string_width (s) * -0.5;

  0087f	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _x_adjust$[ebp], 0

; 3601 : 	set_mono_font_rel_position (x_adjust, 9);

  00889	51		 push	 ecx
  0088a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41100000
  00892	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00897	f3 0f 2a 85 28
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _x_adjust$[ebp]
  0089f	51		 push	 ecx
  008a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a5	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3602 : 	print_mono_font_string (s);

  008aa	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  008ad	50		 push	 eax
  008ae	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3603 : 
; 3604 : 	////////////////////////////////////////
; 3605 : 	//
; 3606 : 	// draw field of regard and view boxes
; 3607 : 	//
; 3608 : 	////////////////////////////////////////
; 3609 : 
; 3610 : 	draw_field_of_regard_and_view_boxes ();

  008b3	e8 00 00 00 00	 call	 ?draw_field_of_regard_and_view_boxes@@YGXXZ ; draw_field_of_regard_and_view_boxes

; 3611 : }

  008b8	5f		 pop	 edi
  008b9	5e		 pop	 esi
  008ba	5b		 pop	 ebx
  008bb	8b e5		 mov	 esp, ebp
  008bd	5d		 pop	 ebp
  008be	c2 08 00	 ret	 8
  008c1	0f 1f 00	 npad	 3
$LN48@draw_high_:
  008c4	00 00 00 00	 DD	 $LN21@draw_high_
  008c8	00 00 00 00	 DD	 $LN22@draw_high_
  008cc	00 00 00 00	 DD	 $LN23@draw_high_
  008d0	00 00 00 00	 DD	 $LN24@draw_high_
  008d4	00 00 00 00	 DD	 $LN25@draw_high_
  008d8	00 00 00 00	 DD	 $LN26@draw_high_
  008dc	00 00 00 00	 DD	 $LN30@draw_high_
  008e0	00 00 00 00	 DD	 $LN27@draw_high_
  008e4	00 00 00 00	 DD	 $LN28@draw_high_
  008e8	00 00 00 00	 DD	 $LN30@draw_high_
?draw_high_action_display@@YGXPAUENTITY@@H@Z ENDP	; draw_high_action_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?apache_select_clicked_target@@YGXXZ
_TEXT	SEGMENT
tv85 = -196						; size = 4
tv285 = -192						; size = 8
tv278 = -192						; size = 8
tv230 = -192						; size = 4
tv206 = -192						; size = 4
tv185 = -192						; size = 4
tv166 = -192						; size = 4
tv78 = -192						; size = 4
tv222 = -188						; size = 4
tv198 = -188						; size = 4
tv178 = -188						; size = 4
tv158 = -188						; size = 4
tv129 = -188						; size = 4
tv70 = -188						; size = 4
$T1 = -184						; size = 12
$T2 = -172						; size = 12
_raw$3 = -96						; size = 4
_range_sqr$4 = -92					; size = 4
_target_position$5 = -88				; size = 4
_scale$ = -84						; size = 4
_tsd_ase_range$ = -80					; size = 4
_selection_range_limit_sqr$ = -76			; size = 4
_is_pilot$ = -72					; size = 4
_relative_position$ = -68				; size = 12
_position$ = -56					; size = 12
_rotation_matrix$ = -44					; size = 36
_best_target$ = -8					; size = 4
_target$ = -4						; size = 4
?apache_select_clicked_target@@YGXXZ PROC		; apache_select_clicked_target, COMDAT

; 4013 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 4014 : 	entity
; 4015 : 		*target,
; 4016 : 		*best_target = NULL;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _best_target$[ebp], 0

; 4017 : 
; 4018 : 	matrix3x3
; 4019 : 		rotation_matrix;
; 4020 : 
; 4021 : 	vec3d
; 4022 : 		position,
; 4023 : 		relative_position;
; 4024 : 
; 4025 : 	int
; 4026 : 		is_pilot = (get_local_entity_int_value (get_pilot_entity (), INT_TYPE_CREW_ROLE) == CREW_ROLE_PILOT);

  00013	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_entity@@3PAUENTITY@@A, 0 ; pilot_entity
  0001a	74 0f		 je	 SHORT $LN14@apache_sel
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00021	8b 08		 mov	 ecx, DWORD PTR [eax]
  00023	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], ecx
  00029	eb 24		 jmp	 SHORT $LN15@apache_sel
$LN14@apache_sel:
  0002b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??apache_select_clicked_target@@YGXXZ@4JA
  00031	83 c2 0d	 add	 edx, 13			; 0000000dH
  00034	52		 push	 edx
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00045	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN15@apache_sel:
  0004f	b9 01 00 00 00	 mov	 ecx, 1
  00054	85 c9		 test	 ecx, ecx
  00056	74 0c		 je	 SHORT $LN16@apache_sel
  00058	c7 85 40 ff ff
	ff 23 00 00 00	 mov	 DWORD PTR tv78[ebp], 35	; 00000023H
  00062	eb 24		 jmp	 SHORT $LN17@apache_sel
$LN16@apache_sel:
  00064	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??apache_select_clicked_target@@YGXXZ@4JA
  0006a	83 c2 0d	 add	 edx, 13			; 0000000dH
  0006d	52		 push	 edx
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00073	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007e	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN17@apache_sel:
  00088	6a 23		 push	 35			; 00000023H
  0008a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00090	51		 push	 ecx
  00091	69 95 44 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv70[ebp], 1116
  0009b	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv78[ebp]
  000a1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000a8	ff d1		 call	 ecx
  000aa	85 c0		 test	 eax, eax
  000ac	75 0c		 jne	 SHORT $LN18@apache_sel
  000ae	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv85[ebp], 1
  000b8	eb 0a		 jmp	 SHORT $LN19@apache_sel
$LN18@apache_sel:
  000ba	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv85[ebp], 0
$LN19@apache_sel:
  000c4	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR tv85[ebp]
  000ca	89 55 b8	 mov	 DWORD PTR _is_pilot$[ebp], edx

; 4027 : 
; 4028 : 	float
; 4029 : 		selection_range_limit_sqr,
; 4030 : 		tsd_ase_range,
; 4031 : 		scale;
; 4032 : 
; 4033 : 
; 4034 : 	if (fabs(pointer_position_x - clicked_position_x) > 0.05
; 4035 : 		|| fabs(pointer_position_y - clicked_position_y) > 0.05)

  000cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pointer_position_x@@3MA
  000d5	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?clicked_position_x@@3MA
  000dd	51		 push	 ecx
  000de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e3	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  000e8	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv278[ebp]
  000ee	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv278[ebp]
  000f6	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fa999999999999a
  000fe	77 33		 ja	 SHORT $LN5@apache_sel
  00100	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pointer_position_y@@3MA
  00108	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?clicked_position_y@@3MA
  00110	51		 push	 ecx
  00111	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00116	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0011b	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv285[ebp]
  00121	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv285[ebp]
  00129	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fa999999999999a
  00131	76 05		 jbe	 SHORT $LN4@apache_sel
$LN5@apache_sel:

; 4036 : 	{
; 4037 : 		return;

  00133	e9 4b 04 00 00	 jmp	 $LN1@apache_sel
$LN4@apache_sel:

; 4038 : 	}
; 4039 : 
; 4040 : 	tsd_ase_range = is_pilot ? pilot_tsd_ase_range : cpg_tsd_ase_range;

  00138	83 7d b8 00	 cmp	 DWORD PTR _is_pilot$[ebp], 0
  0013c	74 12		 je	 SHORT $LN20@apache_sel
  0013e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  00146	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR tv129[ebp], xmm0
  0014e	eb 10		 jmp	 SHORT $LN21@apache_sel
$LN20@apache_sel:
  00150	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?cpg_tsd_ase_range@@3MA
  00158	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR tv129[ebp], xmm0
$LN21@apache_sel:
  00160	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv129[ebp]
  00168	f3 0f 11 45 b0	 movss	 DWORD PTR _tsd_ase_range$[ebp], xmm0

; 4041 : 	scale = RADIUS / tsd_ase_range;

  0016d	f3 0f 5a 45 b0	 cvtss2sd xmm0, DWORD PTR _tsd_ase_range$[ebp]
  00172	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff5d3d193333333
  0017a	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0017e	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00182	f3 0f 11 45 ac	 movss	 DWORD PTR _scale$[ebp], xmm0

; 4042 : 	selection_range_limit_sqr = (tsd_ase_range * 0.05);

  00187	f3 0f 5a 45 b0	 cvtss2sd xmm0, DWORD PTR _tsd_ase_range$[ebp]
  0018c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fa999999999999a
  00194	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00198	f3 0f 11 45 b4	 movss	 DWORD PTR _selection_range_limit_sqr$[ebp], xmm0

; 4043 : 	selection_range_limit_sqr *= selection_range_limit_sqr;

  0019d	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _selection_range_limit_sqr$[ebp]
  001a2	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _selection_range_limit_sqr$[ebp]
  001a7	f3 0f 11 45 b4	 movss	 DWORD PTR _selection_range_limit_sqr$[ebp], xmm0

; 4044 : 
; 4045 : 	get_3d_transformation_matrix(rotation_matrix, current_flight_dynamics->heading.value, 0.0, 0.0);

  001ac	51		 push	 ecx
  001ad	0f 57 c0	 xorps	 xmm0, xmm0
  001b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b5	51		 push	 ecx
  001b6	0f 57 c0	 xorps	 xmm0, xmm0
  001b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  001c3	51		 push	 ecx
  001c4	f3 0f 10 80 8c
	21 00 00	 movss	 xmm0, DWORD PTR [eax+8588]
  001cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d1	8d 4d d4	 lea	 ecx, DWORD PTR _rotation_matrix$[ebp]
  001d4	51		 push	 ecx
  001d5	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 4046 : 
; 4047 : 	relative_position = get_relative_vec_from_tsd_coordinate(clicked_position_x, clicked_position_y, scale);

  001da	51		 push	 ecx
  001db	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _scale$[ebp]
  001e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e5	51		 push	 ecx
  001e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?clicked_position_y@@3MA
  001ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f3	51		 push	 ecx
  001f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?clicked_position_x@@3MA
  001fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00201	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00207	50		 push	 eax
  00208	e8 00 00 00 00	 call	 ?get_relative_vec_from_tsd_coordinate@@YG?AUVEC3D@@MMM@Z ; get_relative_vec_from_tsd_coordinate
  0020d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0020f	89 8d 54 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  00215	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00218	89 95 58 ff ff
	ff		 mov	 DWORD PTR $T2[ebp+4], edx
  0021e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00221	89 85 5c ff ff
	ff		 mov	 DWORD PTR $T2[ebp+8], eax
  00227	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  0022d	89 4d bc	 mov	 DWORD PTR _relative_position$[ebp], ecx
  00230	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp+4]
  00236	89 55 c0	 mov	 DWORD PTR _relative_position$[ebp+4], edx
  00239	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp+8]
  0023f	89 45 c4	 mov	 DWORD PTR _relative_position$[ebp+8], eax

; 4048 : 	relative_position_to_world_coordinate(&relative_position, &position, rotation_matrix);

  00242	8d 45 d4	 lea	 eax, DWORD PTR _rotation_matrix$[ebp]
  00245	50		 push	 eax
  00246	8d 4d c8	 lea	 ecx, DWORD PTR _position$[ebp]
  00249	51		 push	 ecx
  0024a	8d 55 bc	 lea	 edx, DWORD PTR _relative_position$[ebp]
  0024d	52		 push	 edx
  0024e	e8 00 00 00 00	 call	 ?relative_position_to_world_coordinate@@YGXPAUVEC3D@@0QAY02M@Z ; relative_position_to_world_coordinate

; 4049 : 
; 4050 : 	// find target which best corresponds with clicked position
; 4051 : 	target = get_local_entity_first_child (get_gunship_entity(), LIST_TYPE_GUNSHIP_TARGET);

  00253	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0025a	74 0f		 je	 SHORT $LN22@apache_sel
  0025c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00261	8b 08		 mov	 ecx, DWORD PTR [eax]
  00263	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv158[ebp], ecx
  00269	eb 24		 jmp	 SHORT $LN23@apache_sel
$LN22@apache_sel:
  0026b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??apache_select_clicked_target@@YGXXZ@4JA
  00271	83 c2 26	 add	 edx, 38			; 00000026H
  00274	52		 push	 edx
  00275	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0027a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0027f	50		 push	 eax
  00280	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00285	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv158[ebp], 0
$LN23@apache_sel:
  0028f	b9 01 00 00 00	 mov	 ecx, 1
  00294	85 c9		 test	 ecx, ecx
  00296	74 0c		 je	 SHORT $LN24@apache_sel
  00298	c7 85 40 ff ff
	ff 12 00 00 00	 mov	 DWORD PTR tv166[ebp], 18 ; 00000012H
  002a2	eb 24		 jmp	 SHORT $LN25@apache_sel
$LN24@apache_sel:
  002a4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??apache_select_clicked_target@@YGXXZ@4JA
  002aa	83 c2 26	 add	 edx, 38			; 00000026H
  002ad	52		 push	 edx
  002ae	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  002b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  002b8	50		 push	 eax
  002b9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002be	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv166[ebp], 0
$LN25@apache_sel:
  002c8	6a 12		 push	 18			; 00000012H
  002ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  002d0	51		 push	 ecx
  002d1	69 95 44 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv158[ebp], 180
  002db	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv166[ebp]
  002e1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  002e8	ff d1		 call	 ecx
  002ea	89 45 fc	 mov	 DWORD PTR _target$[ebp], eax
$LN2@apache_sel:

; 4052 : 	while (target)

  002ed	83 7d fc 00	 cmp	 DWORD PTR _target$[ebp], 0
  002f1	0f 84 e0 01 00
	00		 je	 $LN3@apache_sel

; 4053 : 	{
; 4054 : 		if (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  002f7	83 7d fc 00	 cmp	 DWORD PTR _target$[ebp], 0
  002fb	74 0d		 je	 SHORT $LN26@apache_sel
  002fd	8b 45 fc	 mov	 eax, DWORD PTR _target$[ebp]
  00300	8b 08		 mov	 ecx, DWORD PTR [eax]
  00302	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv178[ebp], ecx
  00308	eb 20		 jmp	 SHORT $LN27@apache_sel
$LN26@apache_sel:
  0030a	68 d6 0f 00 00	 push	 4054			; 00000fd6H
  0030f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00314	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0031a	52		 push	 edx
  0031b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00320	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv178[ebp], 0
$LN27@apache_sel:
  0032a	b8 01 00 00 00	 mov	 eax, 1
  0032f	85 c0		 test	 eax, eax
  00331	74 0c		 je	 SHORT $LN28@apache_sel
  00333	c7 85 40 ff ff
	ff 42 00 00 00	 mov	 DWORD PTR tv185[ebp], 66 ; 00000042H
  0033d	eb 20		 jmp	 SHORT $LN29@apache_sel
$LN28@apache_sel:
  0033f	68 d6 0f 00 00	 push	 4054			; 00000fd6H
  00344	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00349	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0034f	51		 push	 ecx
  00350	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00355	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv185[ebp], 0
$LN29@apache_sel:
  0035f	6a 42		 push	 66			; 00000042H
  00361	8b 55 fc	 mov	 edx, DWORD PTR _target$[ebp]
  00364	52		 push	 edx
  00365	69 85 44 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv178[ebp], 1116
  0036f	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR tv185[ebp]
  00375	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0037c	ff d2		 call	 edx
  0037e	85 c0		 test	 eax, eax
  00380	0f 85 ba 00 00
	00		 jne	 $LN7@apache_sel

; 4055 : 		{
; 4056 : 			vec3d*
; 4057 : 				target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00386	83 7d fc 00	 cmp	 DWORD PTR _target$[ebp], 0
  0038a	74 0d		 je	 SHORT $LN30@apache_sel
  0038c	8b 45 fc	 mov	 eax, DWORD PTR _target$[ebp]
  0038f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00391	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv198[ebp], ecx
  00397	eb 24		 jmp	 SHORT $LN31@apache_sel
$LN30@apache_sel:
  00399	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??apache_select_clicked_target@@YGXXZ@4JA
  0039f	83 c2 2c	 add	 edx, 44			; 0000002cH
  003a2	52		 push	 edx
  003a3	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  003a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003ad	50		 push	 eax
  003ae	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003b3	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv198[ebp], 0
$LN31@apache_sel:
  003bd	b9 01 00 00 00	 mov	 ecx, 1
  003c2	85 c9		 test	 ecx, ecx
  003c4	74 0c		 je	 SHORT $LN32@apache_sel
  003c6	c7 85 40 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv206[ebp], 8
  003d0	eb 24		 jmp	 SHORT $LN33@apache_sel
$LN32@apache_sel:
  003d2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??apache_select_clicked_target@@YGXXZ@4JA
  003d8	83 c2 2c	 add	 edx, 44			; 0000002cH
  003db	52		 push	 edx
  003dc	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  003e1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  003e6	50		 push	 eax
  003e7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003ec	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv206[ebp], 0
$LN33@apache_sel:
  003f6	6a 08		 push	 8
  003f8	8b 4d fc	 mov	 ecx, DWORD PTR _target$[ebp]
  003fb	51		 push	 ecx
  003fc	6b 95 44 ff ff
	ff 60		 imul	 edx, DWORD PTR tv198[ebp], 96
  00403	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv206[ebp]
  00409	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00410	ff d1		 call	 ecx
  00412	89 45 a8	 mov	 DWORD PTR _target_position$5[ebp], eax

; 4058 : 
; 4059 : 			float range_sqr = get_sqr_2d_range(&position, target_position);

  00415	8b 45 a8	 mov	 eax, DWORD PTR _target_position$5[ebp]
  00418	50		 push	 eax
  00419	8d 4d c8	 lea	 ecx, DWORD PTR _position$[ebp]
  0041c	51		 push	 ecx
  0041d	e8 00 00 00 00	 call	 ?get_sqr_2d_range@@YGMPBUVEC3D@@0@Z ; get_sqr_2d_range
  00422	d9 5d a4	 fstp	 DWORD PTR _range_sqr$4[ebp]

; 4060 : 
; 4061 : 			if (range_sqr < selection_range_limit_sqr)

  00425	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _selection_range_limit_sqr$[ebp]
  0042a	0f 2f 45 a4	 comiss	 xmm0, DWORD PTR _range_sqr$4[ebp]
  0042e	76 10		 jbe	 SHORT $LN7@apache_sel

; 4062 : 			{
; 4063 : 				best_target = target;

  00430	8b 45 fc	 mov	 eax, DWORD PTR _target$[ebp]
  00433	89 45 f8	 mov	 DWORD PTR _best_target$[ebp], eax

; 4064 : 				selection_range_limit_sqr = range_sqr;

  00436	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _range_sqr$4[ebp]
  0043b	f3 0f 11 45 b4	 movss	 DWORD PTR _selection_range_limit_sqr$[ebp], xmm0
$LN7@apache_sel:

; 4065 : 			}
; 4066 : 		}
; 4067 : 
; 4068 : 		target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  00440	83 7d fc 00	 cmp	 DWORD PTR _target$[ebp], 0
  00444	74 0d		 je	 SHORT $LN34@apache_sel
  00446	8b 45 fc	 mov	 eax, DWORD PTR _target$[ebp]
  00449	8b 08		 mov	 ecx, DWORD PTR [eax]
  0044b	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv222[ebp], ecx
  00451	eb 24		 jmp	 SHORT $LN35@apache_sel
$LN34@apache_sel:
  00453	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??apache_select_clicked_target@@YGXXZ@4JA
  00459	83 c2 37	 add	 edx, 55			; 00000037H
  0045c	52		 push	 edx
  0045d	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00462	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00467	50		 push	 eax
  00468	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0046d	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv222[ebp], 0
$LN35@apache_sel:
  00477	b9 01 00 00 00	 mov	 ecx, 1
  0047c	85 c9		 test	 ecx, ecx
  0047e	74 0c		 je	 SHORT $LN36@apache_sel
  00480	c7 85 40 ff ff
	ff 12 00 00 00	 mov	 DWORD PTR tv230[ebp], 18 ; 00000012H
  0048a	eb 24		 jmp	 SHORT $LN37@apache_sel
$LN36@apache_sel:
  0048c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??apache_select_clicked_target@@YGXXZ@4JA
  00492	83 c2 37	 add	 edx, 55			; 00000037H
  00495	52		 push	 edx
  00496	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0049b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  004a0	50		 push	 eax
  004a1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004a6	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv230[ebp], 0
$LN37@apache_sel:
  004b0	6a 12		 push	 18			; 00000012H
  004b2	8b 4d fc	 mov	 ecx, DWORD PTR _target$[ebp]
  004b5	51		 push	 ecx
  004b6	69 95 44 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv222[ebp], 180
  004c0	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv230[ebp]
  004c6	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  004cd	ff d1		 call	 ecx
  004cf	89 45 fc	 mov	 DWORD PTR _target$[ebp], eax

; 4069 : 	}

  004d2	e9 16 fe ff ff	 jmp	 $LN2@apache_sel
$LN3@apache_sel:

; 4070 : 
; 4071 : 	if (best_target)

  004d7	83 7d f8 00	 cmp	 DWORD PTR _best_target$[ebp], 0
  004db	74 28		 je	 SHORT $LN8@apache_sel

; 4072 : 	{
; 4073 : 		if (is_using_eo_system(FALSE))

  004dd	6a 00		 push	 0
  004df	e8 00 00 00 00	 call	 ?is_using_eo_system@@YGHH@Z ; is_using_eo_system
  004e4	85 c0		 test	 eax, eax
  004e6	74 0b		 je	 SHORT $LN10@apache_sel

; 4074 : 			set_eo_slave_target(best_target);

  004e8	8b 45 f8	 mov	 eax, DWORD PTR _best_target$[ebp]
  004eb	50		 push	 eax
  004ec	e8 00 00 00 00	 call	 ?set_eo_slave_target@@YGXPAUENTITY@@@Z ; set_eo_slave_target

; 4075 : 		else

  004f1	eb 10		 jmp	 SHORT $LN11@apache_sel
$LN10@apache_sel:

; 4076 : 		{
; 4077 : 			set_gunship_target(best_target);

  004f3	8b 45 f8	 mov	 eax, DWORD PTR _best_target$[ebp]
  004f6	50		 push	 eax
  004f7	e8 00 00 00 00	 call	 ?set_gunship_target@@YGXPAUENTITY@@@Z ; set_gunship_target

; 4078 : 			set_apache_lock_target(1);

  004fc	6a 01		 push	 1
  004fe	e8 00 00 00 00	 call	 ?set_apache_lock_target@@YGXH@Z ; set_apache_lock_target
$LN11@apache_sel:

; 4079 : 		}

  00503	eb 7e		 jmp	 SHORT $LN12@apache_sel
$LN8@apache_sel:

; 4080 : 	}
; 4081 : 	// didn't find any target under pointer, but if using EO do a point lock on position
; 4082 : 	else if (is_using_eo_system(FALSE) && point_inside_map_area(&position))

  00505	6a 00		 push	 0
  00507	e8 00 00 00 00	 call	 ?is_using_eo_system@@YGHH@Z ; is_using_eo_system
  0050c	85 c0		 test	 eax, eax
  0050e	74 73		 je	 SHORT $LN12@apache_sel
  00510	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _position$[ebp]
  00515	0f 2f 05 24 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+36
  0051c	72 65		 jb	 SHORT $LN12@apache_sel
  0051e	f3 0f 10 05 3c
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+60
  00526	0f 2f 45 c8	 comiss	 xmm0, DWORD PTR _position$[ebp]
  0052a	72 57		 jb	 SHORT $LN12@apache_sel
  0052c	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _position$[ebp+8]
  00531	0f 2f 05 2c 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+44
  00538	72 49		 jb	 SHORT $LN12@apache_sel
  0053a	f3 0f 10 05 44
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+68
  00542	0f 2f 45 d0	 comiss	 xmm0, DWORD PTR _position$[ebp+8]
  00546	72 3b		 jb	 SHORT $LN12@apache_sel

; 4083 : 	{
; 4084 : 		helicopter *raw = (helicopter *) get_local_entity_data(get_gunship_entity());

  00548	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0054d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00550	89 4d a0	 mov	 DWORD PTR _raw$3[ebp], ecx

; 4085 : 
; 4086 : 		position.y = get_3d_terrain_point_data(position.x, position.z, &raw->ac.terrain_info);

  00553	8b 45 a0	 mov	 eax, DWORD PTR _raw$3[ebp]
  00556	05 54 01 00 00	 add	 eax, 340		; 00000154H
  0055b	50		 push	 eax
  0055c	51		 push	 ecx
  0055d	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _position$[ebp+8]
  00562	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00567	51		 push	 ecx
  00568	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _position$[ebp]
  0056d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00572	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  00577	d9 5d cc	 fstp	 DWORD PTR _position$[ebp+4]

; 4087 : 
; 4088 : 		eo_start_tracking(&position);

  0057a	8d 45 c8	 lea	 eax, DWORD PTR _position$[ebp]
  0057d	50		 push	 eax
  0057e	e8 00 00 00 00	 call	 ?eo_start_tracking@@YGXPAUVEC3D@@@Z ; eo_start_tracking
$LN12@apache_sel:
$LN1@apache_sel:

; 4089 : 	}
; 4090 : }

  00583	5f		 pop	 edi
  00584	5e		 pop	 esi
  00585	5b		 pop	 ebx
  00586	8b e5		 mov	 esp, ebp
  00588	5d		 pop	 ebp
  00589	c3		 ret	 0
?apache_select_clicked_target@@YGXXZ ENDP		; apache_select_clicked_target
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_apache_virtual_cockpit_ort_symbology@@YGXXZ
_TEXT	SEGMENT
_symbology_colour$ = -24				; size = 4
_background_colour$ = -20				; size = 4
_mfd_screen_y_max$ = -16				; size = 4
_mfd_screen_x_max$ = -12				; size = 4
_mfd_screen_y_min$ = -8					; size = 4
_mfd_screen_x_min$ = -4					; size = 4
?draw_apache_virtual_cockpit_ort_symbology@@YGXXZ PROC	; draw_apache_virtual_cockpit_ort_symbology, COMDAT

; 10921: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10922: 	int
; 10923: 		mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max;
; 10924: 
; 10925: 	rgb_colour
; 10926: 		background_colour,
; 10927: 		symbology_colour;
; 10928: 
; 10929: 	set_3d_active_environment (main_3d_env);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 10930: 
; 10931: 	//
; 10932: 	// set up MFD 2D environment
; 10933: 	//
; 10934: 
; 10935: 	set_2d_active_environment (mfd_env);

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 10936: 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  0001f	51		 push	 ecx
  00020	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  00028	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002d	51		 push	 ecx
  0002e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  00036	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003b	51		 push	 ecx
  0003c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  00044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00049	51		 push	 ecx
  0004a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  00052	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00057	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 10937: 
; 10938: 	draw_large_mfd = TRUE;

  00062	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 1

; 10939: 	mfd_viewport_size = MFD_VIEWPORT_LARGE_SIZE;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  00074	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 10940: 
; 10941: 	mfd_viewport_x_org = MFD_VIEWPORT_LARGE_SIZE * 0.5;

  0007c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  00084	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 10942: 	mfd_viewport_y_org = MFD_VIEWPORT_LARGE_SIZE * 0.5;

  0008c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  00094	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 10943: 
; 10944: 	mfd_viewport_x_min = 0.0;

  0009c	0f 57 c0	 xorps	 xmm0, xmm0
  0009f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 10945: 	mfd_viewport_y_min = 0.0;

  000a7	0f 57 c0	 xorps	 xmm0, xmm0
  000aa	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 10946: 
; 10947: 	mfd_viewport_x_max = MFD_VIEWPORT_LARGE_SIZE - 0.001;

  000b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437fffbe
  000ba	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 10948: 	mfd_viewport_y_max = MFD_VIEWPORT_LARGE_SIZE - 0.001;

  000c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437fffbe
  000ca	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 10949: 
; 10950: 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  000d2	51		 push	 ecx
  000d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  000db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e0	51		 push	 ecx
  000e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  000e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ee	51		 push	 ecx
  000ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  000f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fc	51		 push	 ecx
  000fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00105	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 10951: 
; 10952: 	mfd_screen_x_min = full_screen_x_mid - ((256.0 / (640.0 * 2.0)) * full_screen_width);

  00115	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_x_mid@@3MA
  0011d	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?full_screen_width@@3MA
  00125	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fc999999999999a
  0012d	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00131	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00135	89 45 fc	 mov	 DWORD PTR _mfd_screen_x_min$[ebp], eax

; 10953: 	mfd_screen_y_min = full_screen_y_mid - ((256.0 / (480.0 * 2.0)) * full_screen_height);

  00138	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_y_mid@@3MA
  00140	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?full_screen_height@@3MA
  00148	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fd1111111111111
  00150	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00154	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00158	89 45 f8	 mov	 DWORD PTR _mfd_screen_y_min$[ebp], eax

; 10954: 
; 10955: 	mfd_screen_x_max = full_screen_x_mid + ((256.0 / (640.0 * 2.0)) * full_screen_width) - 0.001;

  0015b	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_x_mid@@3MA
  00163	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?full_screen_width@@3MA
  0016b	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fc999999999999a
  00173	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00177	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0017f	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00183	89 45 f4	 mov	 DWORD PTR _mfd_screen_x_max$[ebp], eax

; 10956: 	mfd_screen_y_max = full_screen_y_mid + ((256.0 / (480.0 * 2.0)) * full_screen_height) - 0.001;

  00186	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_y_mid@@3MA
  0018e	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?full_screen_height@@3MA
  00196	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fd1111111111111
  0019e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001a2	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001aa	f2 0f 2c c0	 cvttsd2si eax, xmm0
  001ae	89 45 f0	 mov	 DWORD PTR _mfd_screen_y_max$[ebp], eax

; 10957: 
; 10958: 	i_translate_3d = mfd_screen_x_min;

  001b1	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  001b6	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?i_translate_3d@@3MA, xmm0

; 10959: 	j_translate_3d = mfd_screen_y_min;

  001be	f3 0f 2a 45 f8	 cvtsi2ss xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  001c3	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?j_translate_3d@@3MA, xmm0

; 10960: 
; 10961: 	i_scale_3d = 640.0 / full_screen_width;

  001cb	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  001d3	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4084000000000000
  001db	f2 0f 5e c8	 divsd	 xmm1, xmm0
  001df	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  001e3	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?i_scale_3d@@3MA, xmm0

; 10962: 	j_scale_3d = 480.0 / full_screen_height;

  001eb	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  001f3	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@407e000000000000
  001fb	f2 0f 5e c8	 divsd	 xmm1, xmm0
  001ff	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00203	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?j_scale_3d@@3MA, xmm0

; 10963: 
; 10964: 	if (eo_sensor == TARGET_ACQUISITION_SYSTEM_DVO)

  0020b	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 5 ; eo_sensor
  00212	75 12		 jne	 SHORT $LN2@draw_apach

; 10965: 	{
; 10966: 		set_rgb_colour(symbology_colour, 160, 160, 160, 192);

  00214	c6 45 ea a0	 mov	 BYTE PTR _symbology_colour$[ebp+2], 160 ; 000000a0H
  00218	c6 45 e9 a0	 mov	 BYTE PTR _symbology_colour$[ebp+1], 160 ; 000000a0H
  0021c	c6 45 e8 a0	 mov	 BYTE PTR _symbology_colour$[ebp], 160 ; 000000a0H
  00220	c6 45 eb c0	 mov	 BYTE PTR _symbology_colour$[ebp+3], 192 ; 000000c0H

; 10967: 	}
; 10968: 	else

  00224	eb 10		 jmp	 SHORT $LN3@draw_apach
$LN2@draw_apach:

; 10969: 	{
; 10970: 		set_rgb_colour(symbology_colour, 96, 192, 96, 255);

  00226	c6 45 ea 60	 mov	 BYTE PTR _symbology_colour$[ebp+2], 96 ; 00000060H
  0022a	c6 45 e9 c0	 mov	 BYTE PTR _symbology_colour$[ebp+1], 192 ; 000000c0H
  0022e	c6 45 e8 60	 mov	 BYTE PTR _symbology_colour$[ebp], 96 ; 00000060H
  00232	c6 45 eb ff	 mov	 BYTE PTR _symbology_colour$[ebp+3], 255 ; 000000ffH
$LN3@draw_apach:

; 10971: 	}
; 10972: 	set_rgb_colour(background_colour, 255, 255, 255, 0);

  00236	c6 45 ee ff	 mov	 BYTE PTR _background_colour$[ebp+2], 255 ; 000000ffH
  0023a	c6 45 ed ff	 mov	 BYTE PTR _background_colour$[ebp+1], 255 ; 000000ffH
  0023e	c6 45 ec ff	 mov	 BYTE PTR _background_colour$[ebp], 255 ; 000000ffH
  00242	c6 45 ef 00	 mov	 BYTE PTR _background_colour$[ebp+3], 0

; 10973: 
; 10974: 	set_system_texture_screen (rhs_mfd_texture_screen, TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD);

  00246	68 f9 00 00 00	 push	 249			; 000000f9H
  0024b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rhs_mfd_texture_screen@@3PAUSCREEN@@A
  00250	50		 push	 eax
  00251	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 10975: 
; 10976: 	draw_symbology_to_texture(

  00256	68 00 00 00 00	 push	 OFFSET ?draw_apache_ort_symbology@@YGXH@Z ; draw_apache_ort_symbology
  0025b	8b 45 ec	 mov	 eax, DWORD PTR _background_colour$[ebp]
  0025e	50		 push	 eax
  0025f	8b 4d e8	 mov	 ecx, DWORD PTR _symbology_colour$[ebp]
  00262	51		 push	 ecx
  00263	8b 55 f0	 mov	 edx, DWORD PTR _mfd_screen_y_max$[ebp]
  00266	52		 push	 edx
  00267	8b 45 f4	 mov	 eax, DWORD PTR _mfd_screen_x_max$[ebp]
  0026a	50		 push	 eax
  0026b	8b 4d f8	 mov	 ecx, DWORD PTR _mfd_screen_y_min$[ebp]
  0026e	51		 push	 ecx
  0026f	8b 55 fc	 mov	 edx, DWORD PTR _mfd_screen_x_min$[ebp]
  00272	52		 push	 edx
  00273	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?mfd_viewport_size@@3MA
  0027b	50		 push	 eax
  0027c	f3 0f 2c 0d 00
	00 00 00	 cvttss2si ecx, DWORD PTR ?mfd_viewport_size@@3MA
  00284	51		 push	 ecx
  00285	68 f9 00 00 00	 push	 249			; 000000f9H
  0028a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?rhs_mfd_texture_screen@@3PAUSCREEN@@A
  00290	52		 push	 edx
  00291	e8 00 00 00 00	 call	 ?draw_symbology_to_texture@@YGXPAUSCREEN@@HHHHHHHUREAL_COLOUR@@1P6GXH@Z@Z ; draw_symbology_to_texture

; 10977: 		rhs_mfd_texture_screen,
; 10978: 		TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD,
; 10979: 		mfd_viewport_size,
; 10980: 		mfd_viewport_size,
; 10981: 		mfd_screen_x_min,
; 10982: 		mfd_screen_y_min,
; 10983: 		mfd_screen_x_max,
; 10984: 		mfd_screen_y_max,
; 10985: 		symbology_colour,
; 10986: 		background_colour,
; 10987: 		draw_apache_ort_symbology);
; 10988: 
; 10989: 
; 10990: 	// Draw alphanumerical display part of ORT view	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);
; 10991: 
; 10992: 	mfd_viewport_x_org = ALNUM_DISPLAY_WIDTH * 0.5;

  00296	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  0029e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 10993: 	mfd_viewport_y_org = ALNUM_DISPLAY_HEIGHT * 0.5;

  002a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42000000
  002ae	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 10994: 
; 10995: 	mfd_viewport_x_min = 0.0;

  002b6	0f 57 c0	 xorps	 xmm0, xmm0
  002b9	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 10996: 	mfd_viewport_y_min = 0.0;

  002c1	0f 57 c0	 xorps	 xmm0, xmm0
  002c4	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 10997: 
; 10998: 	mfd_viewport_x_max = ALNUM_DISPLAY_WIDTH - 0.001;

  002cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437fffbe
  002d4	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 10999: 	mfd_viewport_y_max = ALNUM_DISPLAY_HEIGHT - 0.001;

  002dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@427ffefa
  002e4	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 11000: 
; 11001: 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  002ec	51		 push	 ecx
  002ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  002f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fa	51		 push	 ecx
  002fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00303	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00308	51		 push	 ecx
  00309	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00311	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00316	51		 push	 ecx
  00317	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0031f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00324	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00329	50		 push	 eax
  0032a	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 11002: 
; 11003: 	mfd_screen_x_min = full_screen_x_mid - ((256.0 / (640.0 * 2.0)) * full_screen_width);

  0032f	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_x_mid@@3MA
  00337	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?full_screen_width@@3MA
  0033f	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fc999999999999a
  00347	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0034b	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0034f	89 45 fc	 mov	 DWORD PTR _mfd_screen_x_min$[ebp], eax

; 11004: 	mfd_screen_y_min = full_screen_y_max - ((128.0 / (480.0 * 2.0)) * full_screen_height);

  00352	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_y_max@@3MA
  0035a	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?full_screen_height@@3MA
  00362	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fc1111111111111
  0036a	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0036e	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00372	89 45 f8	 mov	 DWORD PTR _mfd_screen_y_min$[ebp], eax

; 11005: 
; 11006: 	mfd_screen_x_max = full_screen_x_mid + ((256.0 / (640.0 * 2.0)) * full_screen_width) - 0.001;

  00375	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_x_mid@@3MA
  0037d	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?full_screen_width@@3MA
  00385	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fc999999999999a
  0038d	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00391	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00399	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0039d	89 45 f4	 mov	 DWORD PTR _mfd_screen_x_max$[ebp], eax

; 11007: 	mfd_screen_y_max = full_screen_y_max - 0.001;

  003a0	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_y_max@@3MA
  003a8	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  003b0	f2 0f 2c c0	 cvttsd2si eax, xmm0
  003b4	89 45 f0	 mov	 DWORD PTR _mfd_screen_y_max$[ebp], eax

; 11008: 
; 11009: 	set_rgb_colour(symbology_colour, 220, 64, 64, 255);

  003b7	c6 45 ea dc	 mov	 BYTE PTR _symbology_colour$[ebp+2], 220 ; 000000dcH
  003bb	c6 45 e9 40	 mov	 BYTE PTR _symbology_colour$[ebp+1], 64 ; 00000040H
  003bf	c6 45 e8 40	 mov	 BYTE PTR _symbology_colour$[ebp], 64 ; 00000040H
  003c3	c6 45 eb ff	 mov	 BYTE PTR _symbology_colour$[ebp+3], 255 ; 000000ffH

; 11010: 	set_rgb_colour(background_colour, 0, 0, 0, 255);

  003c7	c6 45 ee 00	 mov	 BYTE PTR _background_colour$[ebp+2], 0
  003cb	c6 45 ed 00	 mov	 BYTE PTR _background_colour$[ebp+1], 0
  003cf	c6 45 ec 00	 mov	 BYTE PTR _background_colour$[ebp], 0
  003d3	c6 45 ef ff	 mov	 BYTE PTR _background_colour$[ebp+3], 255 ; 000000ffH

; 11011: 
; 11012: 	draw_symbology_to_texture(

  003d7	68 00 00 00 00	 push	 OFFSET ?draw_apache_tads_alnum_display@@YGXH@Z ; draw_apache_tads_alnum_display
  003dc	8b 45 ec	 mov	 eax, DWORD PTR _background_colour$[ebp]
  003df	50		 push	 eax
  003e0	8b 4d e8	 mov	 ecx, DWORD PTR _symbology_colour$[ebp]
  003e3	51		 push	 ecx
  003e4	8b 55 f0	 mov	 edx, DWORD PTR _mfd_screen_y_max$[ebp]
  003e7	52		 push	 edx
  003e8	8b 45 f4	 mov	 eax, DWORD PTR _mfd_screen_x_max$[ebp]
  003eb	50		 push	 eax
  003ec	8b 4d f8	 mov	 ecx, DWORD PTR _mfd_screen_y_min$[ebp]
  003ef	51		 push	 ecx
  003f0	8b 55 fc	 mov	 edx, DWORD PTR _mfd_screen_x_min$[ebp]
  003f3	52		 push	 edx
  003f4	6a 40		 push	 64			; 00000040H
  003f6	68 00 01 00 00	 push	 256			; 00000100H
  003fb	68 0b 09 00 00	 push	 2315			; 0000090bH
  00400	a1 00 00 00 00	 mov	 eax, DWORD PTR ?alnum_display_screen@@3PAUSCREEN@@A
  00405	50		 push	 eax
  00406	e8 00 00 00 00	 call	 ?draw_symbology_to_texture@@YGXPAUSCREEN@@HHHHHHHUREAL_COLOUR@@1P6GXH@Z@Z ; draw_symbology_to_texture

; 11013: 		alnum_display_screen,
; 11014: 		TEXTURE_INDEX_AVCKPT_ALNUM_DISPLAY,
; 11015: 		ALNUM_DISPLAY_WIDTH,
; 11016: 		ALNUM_DISPLAY_HEIGHT,
; 11017: 		mfd_screen_x_min,
; 11018: 		mfd_screen_y_min,
; 11019: 		mfd_screen_x_max,
; 11020: 		mfd_screen_y_max,
; 11021: 		symbology_colour,
; 11022: 		background_colour,
; 11023: 		draw_apache_tads_alnum_display);
; 11024: }

  0040b	5f		 pop	 edi
  0040c	5e		 pop	 esi
  0040d	5b		 pop	 ebx
  0040e	8b e5		 mov	 esp, ebp
  00410	5d		 pop	 ebp
  00411	c3		 ret	 0
?draw_apache_virtual_cockpit_ort_symbology@@YGXXZ ENDP	; draw_apache_virtual_cockpit_ort_symbology
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?set_radar_zoomed@@YGXH@Z
_TEXT	SEGMENT
_zoomed$ = 8						; size = 4
?set_radar_zoomed@@YGXH@Z PROC				; set_radar_zoomed, COMDAT

; 2140 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2141 : 	radar_zoomed = zoomed;

  00009	8b 45 08	 mov	 eax, DWORD PTR _zoomed$[ebp]
  0000c	a3 00 00 00 00	 mov	 DWORD PTR ?radar_zoomed@@3HA, eax

; 2142 : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?set_radar_zoomed@@YGXH@Z ENDP				; set_radar_zoomed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?create_apache_pfz@@YGXH@Z
_TEXT	SEGMENT
tv212 = -268						; size = 8
tv204 = -268						; size = 8
tv76 = -268						; size = 4
tv69 = -264						; size = 4
$T1 = -260						; size = 12
$T2 = -248						; size = 12
$T3 = -236						; size = 12
$T4 = -224						; size = 12
$T5 = -212						; size = 12
$T6 = -200						; size = 12
$T7 = -188						; size = 12
$T8 = -176						; size = 12
_scale$ = -100						; size = 4
_position4$ = -96					; size = 12
_position3$ = -84					; size = 12
_position2$ = -72					; size = 12
_position1$ = -60					; size = 12
_relative_position$ = -48				; size = 12
_rotation_matrix$ = -36					; size = 36
_is_nfz$ = 8						; size = 4
?create_apache_pfz@@YGXH@Z PROC				; create_apache_pfz, COMDAT

; 739  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 740  : 	matrix3x3 rotation_matrix;
; 741  : 	vec3d relative_position;
; 742  : 	vec3d position1, position2, position3, position4;
; 743  : 	float scale;
; 744  : 
; 745  : 	if (get_local_entity_int_value (get_pilot_entity (), INT_TYPE_CREW_ROLE) == CREW_ROLE_PILOT)

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_entity@@3PAUENTITY@@A, 0 ; pilot_entity
  00013	74 0f		 je	 SHORT $LN10@create_apa
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 8d f8 fe ff
	ff		 mov	 DWORD PTR tv69[ebp], ecx
  00022	eb 20		 jmp	 SHORT $LN11@create_apa
$LN10@create_apa:
  00024	68 e9 02 00 00	 push	 745			; 000002e9H
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0002e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00034	52		 push	 edx
  00035	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003a	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv69[ebp], 0
$LN11@create_apa:
  00044	b8 01 00 00 00	 mov	 eax, 1
  00049	85 c0		 test	 eax, eax
  0004b	74 0c		 je	 SHORT $LN12@create_apa
  0004d	c7 85 f4 fe ff
	ff 23 00 00 00	 mov	 DWORD PTR tv76[ebp], 35	; 00000023H
  00057	eb 20		 jmp	 SHORT $LN13@create_apa
$LN12@create_apa:
  00059	68 e9 02 00 00	 push	 745			; 000002e9H
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00063	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006f	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv76[ebp], 0
$LN13@create_apa:
  00079	6a 23		 push	 35			; 00000023H
  0007b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00081	52		 push	 edx
  00082	69 85 f8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv69[ebp], 1116
  0008c	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR tv76[ebp]
  00092	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00099	ff d2		 call	 edx
  0009b	85 c0		 test	 eax, eax
  0009d	75 1f		 jne	 SHORT $LN2@create_apa

; 746  : 		scale = RADIUS / pilot_tsd_ase_range;

  0009f	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  000a7	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff5d3d193333333
  000af	f2 0f 5e c8	 divsd	 xmm1, xmm0
  000b3	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  000b7	f3 0f 11 45 9c	 movss	 DWORD PTR _scale$[ebp], xmm0

; 747  : 	else

  000bc	eb 1d		 jmp	 SHORT $LN3@create_apa
$LN2@create_apa:

; 748  : 		scale = RADIUS / cpg_tsd_ase_range;

  000be	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?cpg_tsd_ase_range@@3MA
  000c6	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff5d3d193333333
  000ce	f2 0f 5e c8	 divsd	 xmm1, xmm0
  000d2	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  000d6	f3 0f 11 45 9c	 movss	 DWORD PTR _scale$[ebp], xmm0
$LN3@create_apa:

; 749  : 
; 750  : 	// don't create too small pfzs
; 751  : 	if (fabs(pointer_position_x - clicked_position_x) < 0.05
; 752  : 		|| fabs(pointer_position_y - clicked_position_y) < 0.05)

  000db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pointer_position_x@@3MA
  000e3	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?clicked_position_x@@3MA
  000eb	51		 push	 ecx
  000ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f1	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  000f6	dd 9d f4 fe ff
	ff		 fstp	 QWORD PTR tv204[ebp]
  000fc	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fa999999999999a
  00104	66 0f 2f 85 f4
	fe ff ff	 comisd	 xmm0, QWORD PTR tv204[ebp]
  0010c	77 33		 ja	 SHORT $LN5@create_apa
  0010e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pointer_position_y@@3MA
  00116	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?clicked_position_y@@3MA
  0011e	51		 push	 ecx
  0011f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00124	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00129	dd 9d f4 fe ff
	ff		 fstp	 QWORD PTR tv212[ebp]
  0012f	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fa999999999999a
  00137	66 0f 2f 85 f4
	fe ff ff	 comisd	 xmm0, QWORD PTR tv212[ebp]
  0013f	76 05		 jbe	 SHORT $LN4@create_apa
$LN5@create_apa:

; 753  : 		return;

  00141	e9 61 02 00 00	 jmp	 $LN1@create_apa
$LN4@create_apa:

; 754  : 
; 755  : 	get_3d_transformation_matrix(rotation_matrix, current_flight_dynamics->heading.value, 0.0, 0.0);

  00146	51		 push	 ecx
  00147	0f 57 c0	 xorps	 xmm0, xmm0
  0014a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014f	51		 push	 ecx
  00150	0f 57 c0	 xorps	 xmm0, xmm0
  00153	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00158	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0015d	51		 push	 ecx
  0015e	f3 0f 10 80 8c
	21 00 00	 movss	 xmm0, DWORD PTR [eax+8588]
  00166	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016b	8d 4d dc	 lea	 ecx, DWORD PTR _rotation_matrix$[ebp]
  0016e	51		 push	 ecx
  0016f	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 756  : 
; 757  : 	relative_position = get_relative_vec_from_tsd_coordinate(pointer_position_x, pointer_position_y, scale);

  00174	51		 push	 ecx
  00175	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _scale$[ebp]
  0017a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017f	51		 push	 ecx
  00180	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pointer_position_y@@3MA
  00188	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018d	51		 push	 ecx
  0018e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pointer_position_x@@3MA
  00196	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019b	8d 85 44 ff ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  001a1	50		 push	 eax
  001a2	e8 00 00 00 00	 call	 ?get_relative_vec_from_tsd_coordinate@@YG?AUVEC3D@@MMM@Z ; get_relative_vec_from_tsd_coordinate
  001a7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a9	89 8d 50 ff ff
	ff		 mov	 DWORD PTR $T8[ebp], ecx
  001af	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001b2	89 95 54 ff ff
	ff		 mov	 DWORD PTR $T8[ebp+4], edx
  001b8	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  001bb	89 85 58 ff ff
	ff		 mov	 DWORD PTR $T8[ebp+8], eax
  001c1	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR $T8[ebp]
  001c7	89 4d d0	 mov	 DWORD PTR _relative_position$[ebp], ecx
  001ca	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR $T8[ebp+4]
  001d0	89 55 d4	 mov	 DWORD PTR _relative_position$[ebp+4], edx
  001d3	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR $T8[ebp+8]
  001d9	89 45 d8	 mov	 DWORD PTR _relative_position$[ebp+8], eax

; 758  : 	relative_position_to_world_coordinate(&relative_position, &position1, rotation_matrix);

  001dc	8d 45 dc	 lea	 eax, DWORD PTR _rotation_matrix$[ebp]
  001df	50		 push	 eax
  001e0	8d 4d c4	 lea	 ecx, DWORD PTR _position1$[ebp]
  001e3	51		 push	 ecx
  001e4	8d 55 d0	 lea	 edx, DWORD PTR _relative_position$[ebp]
  001e7	52		 push	 edx
  001e8	e8 00 00 00 00	 call	 ?relative_position_to_world_coordinate@@YGXPAUVEC3D@@0QAY02M@Z ; relative_position_to_world_coordinate

; 759  : 
; 760  : 	relative_position = get_relative_vec_from_tsd_coordinate(pointer_position_x, clicked_position_y, scale);

  001ed	51		 push	 ecx
  001ee	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _scale$[ebp]
  001f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f8	51		 push	 ecx
  001f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?clicked_position_y@@3MA
  00201	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00206	51		 push	 ecx
  00207	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pointer_position_x@@3MA
  0020f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00214	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  0021a	50		 push	 eax
  0021b	e8 00 00 00 00	 call	 ?get_relative_vec_from_tsd_coordinate@@YG?AUVEC3D@@MMM@Z ; get_relative_vec_from_tsd_coordinate
  00220	8b 08		 mov	 ecx, DWORD PTR [eax]
  00222	89 8d 38 ff ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  00228	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0022b	89 95 3c ff ff
	ff		 mov	 DWORD PTR $T6[ebp+4], edx
  00231	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00234	89 85 40 ff ff
	ff		 mov	 DWORD PTR $T6[ebp+8], eax
  0023a	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR $T6[ebp]
  00240	89 4d d0	 mov	 DWORD PTR _relative_position$[ebp], ecx
  00243	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR $T6[ebp+4]
  00249	89 55 d4	 mov	 DWORD PTR _relative_position$[ebp+4], edx
  0024c	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR $T6[ebp+8]
  00252	89 45 d8	 mov	 DWORD PTR _relative_position$[ebp+8], eax

; 761  : 	relative_position_to_world_coordinate(&relative_position, &position2, rotation_matrix);

  00255	8d 45 dc	 lea	 eax, DWORD PTR _rotation_matrix$[ebp]
  00258	50		 push	 eax
  00259	8d 4d b8	 lea	 ecx, DWORD PTR _position2$[ebp]
  0025c	51		 push	 ecx
  0025d	8d 55 d0	 lea	 edx, DWORD PTR _relative_position$[ebp]
  00260	52		 push	 edx
  00261	e8 00 00 00 00	 call	 ?relative_position_to_world_coordinate@@YGXPAUVEC3D@@0QAY02M@Z ; relative_position_to_world_coordinate

; 762  : 
; 763  : 	relative_position = get_relative_vec_from_tsd_coordinate(clicked_position_x, clicked_position_y, scale);

  00266	51		 push	 ecx
  00267	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _scale$[ebp]
  0026c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00271	51		 push	 ecx
  00272	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?clicked_position_y@@3MA
  0027a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027f	51		 push	 ecx
  00280	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?clicked_position_x@@3MA
  00288	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028d	8d 85 14 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00293	50		 push	 eax
  00294	e8 00 00 00 00	 call	 ?get_relative_vec_from_tsd_coordinate@@YG?AUVEC3D@@MMM@Z ; get_relative_vec_from_tsd_coordinate
  00299	8b 08		 mov	 ecx, DWORD PTR [eax]
  0029b	89 8d 20 ff ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  002a1	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  002a4	89 95 24 ff ff
	ff		 mov	 DWORD PTR $T4[ebp+4], edx
  002aa	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  002ad	89 85 28 ff ff
	ff		 mov	 DWORD PTR $T4[ebp+8], eax
  002b3	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR $T4[ebp]
  002b9	89 4d d0	 mov	 DWORD PTR _relative_position$[ebp], ecx
  002bc	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR $T4[ebp+4]
  002c2	89 55 d4	 mov	 DWORD PTR _relative_position$[ebp+4], edx
  002c5	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR $T4[ebp+8]
  002cb	89 45 d8	 mov	 DWORD PTR _relative_position$[ebp+8], eax

; 764  : 	relative_position_to_world_coordinate(&relative_position, &position3, rotation_matrix);

  002ce	8d 45 dc	 lea	 eax, DWORD PTR _rotation_matrix$[ebp]
  002d1	50		 push	 eax
  002d2	8d 4d ac	 lea	 ecx, DWORD PTR _position3$[ebp]
  002d5	51		 push	 ecx
  002d6	8d 55 d0	 lea	 edx, DWORD PTR _relative_position$[ebp]
  002d9	52		 push	 edx
  002da	e8 00 00 00 00	 call	 ?relative_position_to_world_coordinate@@YGXPAUVEC3D@@0QAY02M@Z ; relative_position_to_world_coordinate

; 765  : 
; 766  : 	relative_position = get_relative_vec_from_tsd_coordinate(clicked_position_x, pointer_position_y, scale);

  002df	51		 push	 ecx
  002e0	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _scale$[ebp]
  002e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ea	51		 push	 ecx
  002eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pointer_position_y@@3MA
  002f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f8	51		 push	 ecx
  002f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?clicked_position_x@@3MA
  00301	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00306	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0030c	50		 push	 eax
  0030d	e8 00 00 00 00	 call	 ?get_relative_vec_from_tsd_coordinate@@YG?AUVEC3D@@MMM@Z ; get_relative_vec_from_tsd_coordinate
  00312	8b 08		 mov	 ecx, DWORD PTR [eax]
  00314	89 8d 08 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  0031a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0031d	89 95 0c ff ff
	ff		 mov	 DWORD PTR $T2[ebp+4], edx
  00323	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00326	89 85 10 ff ff
	ff		 mov	 DWORD PTR $T2[ebp+8], eax
  0032c	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00332	89 4d d0	 mov	 DWORD PTR _relative_position$[ebp], ecx
  00335	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp+4]
  0033b	89 55 d4	 mov	 DWORD PTR _relative_position$[ebp+4], edx
  0033e	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp+8]
  00344	89 45 d8	 mov	 DWORD PTR _relative_position$[ebp+8], eax

; 767  : 	relative_position_to_world_coordinate(&relative_position, &position4, rotation_matrix);

  00347	8d 45 dc	 lea	 eax, DWORD PTR _rotation_matrix$[ebp]
  0034a	50		 push	 eax
  0034b	8d 4d a0	 lea	 ecx, DWORD PTR _position4$[ebp]
  0034e	51		 push	 ecx
  0034f	8d 55 d0	 lea	 edx, DWORD PTR _relative_position$[ebp]
  00352	52		 push	 edx
  00353	e8 00 00 00 00	 call	 ?relative_position_to_world_coordinate@@YGXPAUVEC3D@@0QAY02M@Z ; relative_position_to_world_coordinate

; 768  : 
; 769  : 	if (is_nfz)

  00358	83 7d 08 00	 cmp	 DWORD PTR _is_nfz$[ebp], 0
  0035c	74 17		 je	 SHORT $LN6@create_apa

; 770  : 		add_nfz(&position1, &position2, &position3, &position4);

  0035e	8d 45 a0	 lea	 eax, DWORD PTR _position4$[ebp]
  00361	50		 push	 eax
  00362	8d 4d ac	 lea	 ecx, DWORD PTR _position3$[ebp]
  00365	51		 push	 ecx
  00366	8d 55 b8	 lea	 edx, DWORD PTR _position2$[ebp]
  00369	52		 push	 edx
  0036a	8d 45 c4	 lea	 eax, DWORD PTR _position1$[ebp]
  0036d	50		 push	 eax
  0036e	e8 00 00 00 00	 call	 ?add_nfz@@YGXPAUVEC3D@@000@Z ; add_nfz

; 771  : 	else

  00373	eb 22		 jmp	 SHORT $LN7@create_apa
$LN6@create_apa:

; 772  : 	{
; 773  : 		add_pfz(&position1, &position2, &position3, &position4);

  00375	8d 45 a0	 lea	 eax, DWORD PTR _position4$[ebp]
  00378	50		 push	 eax
  00379	8d 4d ac	 lea	 ecx, DWORD PTR _position3$[ebp]
  0037c	51		 push	 ecx
  0037d	8d 55 b8	 lea	 edx, DWORD PTR _position2$[ebp]
  00380	52		 push	 edx
  00381	8d 45 c4	 lea	 eax, DWORD PTR _position1$[ebp]
  00384	50		 push	 eax
  00385	e8 00 00 00 00	 call	 ?add_pfz@@YGXPAUVEC3D@@000@Z ; add_pfz

; 774  : 		current_pfz = next_free_pfz - 1;

  0038a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?next_free_pfz@@3IA ; next_free_pfz
  0038f	83 e8 01	 sub	 eax, 1
  00392	a3 00 00 00 00	 mov	 DWORD PTR ?current_pfz@@3IA, eax ; current_pfz
$LN7@create_apa:

; 775  : 	}
; 776  : 
; 777  : 	if (!ground_radar_is_active())

  00397	e8 00 00 00 00	 call	 ?ground_radar_is_active@@YGHXZ ; ground_radar_is_active
  0039c	85 c0		 test	 eax, eax
  0039e	75 07		 jne	 SHORT $LN8@create_apa

; 778  : 		update_common_ground_radar (TRUE);  // to make suretarget list is correct with new restrictions

  003a0	6a 01		 push	 1
  003a2	e8 00 00 00 00	 call	 ?update_common_ground_radar@@YGXH@Z ; update_common_ground_radar
$LN8@create_apa:
$LN1@create_apa:

; 779  : }

  003a7	5f		 pop	 edi
  003a8	5e		 pop	 esi
  003a9	5b		 pop	 ebx
  003aa	8b e5		 mov	 esp, ebp
  003ac	5d		 pop	 ebp
  003ad	c2 04 00	 ret	 4
?create_apache_pfz@@YGXH@Z ENDP				; create_apache_pfz
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?get_apache_tads_display_visible@@YGHXZ
_TEXT	SEGMENT
tv70 = -68						; size = 4
?get_apache_tads_display_visible@@YGHXZ PROC		; get_apache_tads_display_visible, COMDAT

; 13083: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 13084: 	return

  00009	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 4
  00010	74 36		 je	 SHORT $LN3@get_apache
  00012	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 5
  00019	74 2d		 je	 SHORT $LN3@get_apache
  0001b	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 6
  00022	74 24		 je	 SHORT $LN3@get_apache
  00024	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 4
  0002b	74 1b		 je	 SHORT $LN3@get_apache
  0002d	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 5
  00034	74 12		 je	 SHORT $LN3@get_apache
  00036	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 6
  0003d	74 09		 je	 SHORT $LN3@get_apache
  0003f	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
  00046	eb 07		 jmp	 SHORT $LN4@get_apache
$LN3@get_apache:
  00048	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv70[ebp], 1
$LN4@get_apache:
  0004f	8b 45 bc	 mov	 eax, DWORD PTR tv70[ebp]

; 13085: 	(
; 13086: 		(lhs_mfd_mode == MFD_MODE_FLIR) ||
; 13087: 		(lhs_mfd_mode == MFD_MODE_DTV) ||
; 13088: 		(lhs_mfd_mode == MFD_MODE_DVO) ||
; 13089: 		(rhs_mfd_mode == MFD_MODE_FLIR) ||
; 13090: 		(rhs_mfd_mode == MFD_MODE_DTV) ||
; 13091: 		(rhs_mfd_mode == MFD_MODE_DVO)
; 13092: 	);
; 13093: }

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
?get_apache_tads_display_visible@@YGHXZ ENDP		; get_apache_tads_display_visible
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?get_apache_mfd_has_focus@@YGHW4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv78 = -76						; size = 4
tv76 = -76						; size = 4
tv74 = -76						; size = 4
tv72 = -76						; size = 4
tv70 = -76						; size = 4
tv68 = -76						; size = 4
_mfd_mode$ = -8						; size = 4
_result$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?get_apache_mfd_has_focus@@YGHW4MFD_LOCATIONS@@@Z PROC	; get_apache_mfd_has_focus, COMDAT

; 13007: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 13008: 	int
; 13009: 		result;
; 13010: 
; 13011: 	mfd_modes
; 13012: 		mfd_mode;
; 13013: 
; 13014: 	if (mfd_location == MFD_LOCATION_PILOT_LHS)

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	75 0a		 jne	 SHORT $LN4@get_apache

; 13015: 		mfd_mode = lhs_mfd_mode;

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A
  00014	89 45 f8	 mov	 DWORD PTR _mfd_mode$[ebp], eax
  00017	eb 2e		 jmp	 SHORT $LN5@get_apache
$LN4@get_apache:

; 13016: 	else if (mfd_location == MFD_LOCATION_PILOT_RHS)

  00019	83 7d 08 01	 cmp	 DWORD PTR _mfd_location$[ebp], 1
  0001d	75 0a		 jne	 SHORT $LN6@get_apache

; 13017: 		mfd_mode = rhs_mfd_mode;

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A
  00024	89 45 f8	 mov	 DWORD PTR _mfd_mode$[ebp], eax
  00027	eb 1e		 jmp	 SHORT $LN5@get_apache
$LN6@get_apache:

; 13018: 	else if (mfd_location == MFD_LOCATION_CPG_LHS)

  00029	83 7d 08 02	 cmp	 DWORD PTR _mfd_location$[ebp], 2
  0002d	75 0a		 jne	 SHORT $LN8@get_apache

; 13019: 		mfd_mode = cpg_lhs_mfd_mode;

  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?cpg_lhs_mfd_mode@@3W4MFD_MODES@@A
  00034	89 45 f8	 mov	 DWORD PTR _mfd_mode$[ebp], eax
  00037	eb 0e		 jmp	 SHORT $LN5@get_apache
$LN8@get_apache:

; 13020: 	else if (mfd_location == MFD_LOCATION_CPG_RHS)

  00039	83 7d 08 03	 cmp	 DWORD PTR _mfd_location$[ebp], 3
  0003d	75 08		 jne	 SHORT $LN5@get_apache

; 13021: 		mfd_mode = cpg_rhs_mfd_mode;

  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?cpg_rhs_mfd_mode@@3W4MFD_MODES@@A
  00044	89 45 f8	 mov	 DWORD PTR _mfd_mode$[ebp], eax
$LN5@get_apache:

; 13022: 
; 13023: 	switch (target_acquisition_system)

  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; target_acquisition_system
  0004c	89 45 b4	 mov	 DWORD PTR tv68[ebp], eax
  0004f	8b 4d b4	 mov	 ecx, DWORD PTR tv68[ebp]
  00052	83 e9 01	 sub	 ecx, 1
  00055	89 4d b4	 mov	 DWORD PTR tv68[ebp], ecx
  00058	83 7d b4 04	 cmp	 DWORD PTR tv68[ebp], 4
  0005c	0f 87 a0 00 00
	00		 ja	 $LN16@get_apache
  00062	8b 55 b4	 mov	 edx, DWORD PTR tv68[ebp]
  00065	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN28@get_apache[edx*4]
$LN11@get_apache:

; 13024: 	{
; 13025: 		////////////////////////////////////////
; 13026: 		case TARGET_ACQUISITION_SYSTEM_GROUND_RADAR:
; 13027: 		////////////////////////////////////////
; 13028: 		{
; 13029: 			result = (mfd_mode == MFD_MODE_GROUND_RADAR);

  0006c	83 7d f8 02	 cmp	 DWORD PTR _mfd_mode$[ebp], 2
  00070	75 09		 jne	 SHORT $LN18@get_apache
  00072	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv70[ebp], 1
  00079	eb 07		 jmp	 SHORT $LN19@get_apache
$LN18@get_apache:
  0007b	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN19@get_apache:
  00082	8b 45 b4	 mov	 eax, DWORD PTR tv70[ebp]
  00085	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 13030: 
; 13031: 			break;

  00088	eb 7f		 jmp	 SHORT $LN2@get_apache
$LN12@get_apache:

; 13032: 		}
; 13033: 		////////////////////////////////////////
; 13034: 		case TARGET_ACQUISITION_SYSTEM_AIR_RADAR:
; 13035: 		////////////////////////////////////////
; 13036: 		{
; 13037: 			result = (mfd_mode == MFD_MODE_AIR_RADAR);

  0008a	83 7d f8 03	 cmp	 DWORD PTR _mfd_mode$[ebp], 3
  0008e	75 09		 jne	 SHORT $LN20@get_apache
  00090	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv72[ebp], 1
  00097	eb 07		 jmp	 SHORT $LN21@get_apache
$LN20@get_apache:
  00099	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$LN21@get_apache:
  000a0	8b 45 b4	 mov	 eax, DWORD PTR tv72[ebp]
  000a3	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 13038: 
; 13039: 			break;

  000a6	eb 61		 jmp	 SHORT $LN2@get_apache
$LN13@get_apache:

; 13040: 		}
; 13041: 		////////////////////////////////////////
; 13042: 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 13043: 		////////////////////////////////////////
; 13044: 		{
; 13045: 			result = (mfd_mode == MFD_MODE_FLIR);

  000a8	83 7d f8 04	 cmp	 DWORD PTR _mfd_mode$[ebp], 4
  000ac	75 09		 jne	 SHORT $LN22@get_apache
  000ae	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv74[ebp], 1
  000b5	eb 07		 jmp	 SHORT $LN23@get_apache
$LN22@get_apache:
  000b7	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN23@get_apache:
  000be	8b 45 b4	 mov	 eax, DWORD PTR tv74[ebp]
  000c1	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 13046: 
; 13047: 			break;

  000c4	eb 43		 jmp	 SHORT $LN2@get_apache
$LN14@get_apache:

; 13048: 		}
; 13049: 		////////////////////////////////////////
; 13050: 		case TARGET_ACQUISITION_SYSTEM_DTV:
; 13051: 		////////////////////////////////////////
; 13052: 		{
; 13053: 			result = (mfd_mode == MFD_MODE_DTV);

  000c6	83 7d f8 05	 cmp	 DWORD PTR _mfd_mode$[ebp], 5
  000ca	75 09		 jne	 SHORT $LN24@get_apache
  000cc	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  000d3	eb 07		 jmp	 SHORT $LN25@get_apache
$LN24@get_apache:
  000d5	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN25@get_apache:
  000dc	8b 45 b4	 mov	 eax, DWORD PTR tv76[ebp]
  000df	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 13054: 
; 13055: 			break;

  000e2	eb 25		 jmp	 SHORT $LN2@get_apache
$LN15@get_apache:

; 13056: 		}
; 13057: 		////////////////////////////////////////
; 13058: 		case TARGET_ACQUISITION_SYSTEM_DVO:
; 13059: 		////////////////////////////////////////
; 13060: 		{
; 13061: 			result = (mfd_mode == MFD_MODE_DVO);

  000e4	83 7d f8 06	 cmp	 DWORD PTR _mfd_mode$[ebp], 6
  000e8	75 09		 jne	 SHORT $LN26@get_apache
  000ea	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv78[ebp], 1
  000f1	eb 07		 jmp	 SHORT $LN27@get_apache
$LN26@get_apache:
  000f3	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN27@get_apache:
  000fa	8b 45 b4	 mov	 eax, DWORD PTR tv78[ebp]
  000fd	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 13062: 
; 13063: 			break;

  00100	eb 07		 jmp	 SHORT $LN2@get_apache
$LN16@get_apache:

; 13064: 		}
; 13065: 		////////////////////////////////////////
; 13066: 		default:
; 13067: 		////////////////////////////////////////
; 13068: 		{
; 13069: 			result = FALSE;

  00102	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0
$LN2@get_apache:

; 13070: 
; 13071: 			break;
; 13072: 		}
; 13073: 	}
; 13074: 
; 13075: 	return (result);

  00109	8b 45 fc	 mov	 eax, DWORD PTR _result$[ebp]

; 13076: }

  0010c	5f		 pop	 edi
  0010d	5e		 pop	 esi
  0010e	5b		 pop	 ebx
  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c2 04 00	 ret	 4
  00115	0f 1f 00	 npad	 3
$LN28@get_apache:
  00118	00 00 00 00	 DD	 $LN11@get_apache
  0011c	00 00 00 00	 DD	 $LN12@get_apache
  00120	00 00 00 00	 DD	 $LN13@get_apache
  00124	00 00 00 00	 DD	 $LN14@get_apache
  00128	00 00 00 00	 DD	 $LN15@get_apache
?get_apache_mfd_has_focus@@YGHW4MFD_LOCATIONS@@@Z ENDP	; get_apache_mfd_has_focus
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?toggle_apache_ort_on_off@@YGXXZ
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv69 = -68						; size = 4
?toggle_apache_ort_on_off@@YGXXZ PROC			; toggle_apache_ort_on_off, COMDAT

; 12992: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12993: 	if (get_local_entity_int_value (get_pilot_entity (), INT_TYPE_CREW_ROLE) != CREW_ROLE_CO_PILOT)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_entity@@3PAUENTITY@@A, 0 ; pilot_entity
  00010	74 0c		 je	 SHORT $LN6@toggle_apa
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d bc	 mov	 DWORD PTR tv69[ebp], ecx
  0001c	eb 1d		 jmp	 SHORT $LN7@toggle_apa
$LN6@toggle_apa:
  0001e	68 c1 32 00 00	 push	 12993			; 000032c1H
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00028	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00034	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN7@toggle_apa:
  0003b	b8 01 00 00 00	 mov	 eax, 1
  00040	85 c0		 test	 eax, eax
  00042	74 09		 je	 SHORT $LN8@toggle_apa
  00044	c7 45 b8 23 00
	00 00		 mov	 DWORD PTR tv76[ebp], 35	; 00000023H
  0004b	eb 1d		 jmp	 SHORT $LN9@toggle_apa
$LN8@toggle_apa:
  0004d	68 c1 32 00 00	 push	 12993			; 000032c1H
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00063	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN9@toggle_apa:
  0006a	6a 23		 push	 35			; 00000023H
  0006c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00072	52		 push	 edx
  00073	69 45 bc 5c 04
	00 00		 imul	 eax, DWORD PTR tv69[ebp], 1116
  0007a	8b 4d b8	 mov	 ecx, DWORD PTR tv76[ebp]
  0007d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00084	ff d2		 call	 edx
  00086	83 f8 01	 cmp	 eax, 1
  00089	74 02		 je	 SHORT $LN2@toggle_apa

; 12994: 		return;

  0008b	eb 21		 jmp	 SHORT $LN1@toggle_apa
$LN2@toggle_apa:

; 12995: 
; 12996: 	if (ort_mode != MFD_MODE_OFF)

  0008d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ort_mode@@3W4MFD_MODES@@A, 0
  00094	74 0b		 je	 SHORT $LN3@toggle_apa

; 12997: 		select_apache_mfd_mode (MFD_MODE_OFF, MFD_LOCATION_ORT);

  00096	6a 04		 push	 4
  00098	6a 00		 push	 0
  0009a	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12998: 	else

  0009f	eb 0d		 jmp	 SHORT $LN1@toggle_apa
$LN3@toggle_apa:

; 12999: 		select_apache_mfd_mode (get_mfd_mode_for_eo_sensor(), MFD_LOCATION_ORT);

  000a1	6a 04		 push	 4
  000a3	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode
$LN1@toggle_apa:

; 13000: }

  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c3		 ret	 0
?toggle_apache_ort_on_off@@YGXXZ ENDP			; toggle_apache_ort_on_off
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?toggle_apache_rhs_mfd_on_off@@YGXXZ
_TEXT	SEGMENT
tv76 = -80						; size = 4
tv69 = -76						; size = 4
_mfd_mode$ = -8						; size = 4
_location$ = -4						; size = 4
?toggle_apache_rhs_mfd_on_off@@YGXXZ PROC		; toggle_apache_rhs_mfd_on_off, COMDAT

; 12966: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12967: 	mfd_locations location;
; 12968: 	mfd_modes mfd_mode;
; 12969: 
; 12970: 	if (get_local_entity_int_value (get_pilot_entity (), INT_TYPE_CREW_ROLE) == CREW_ROLE_PILOT)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_entity@@3PAUENTITY@@A, 0 ; pilot_entity
  00010	74 0c		 je	 SHORT $LN7@toggle_apa
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d b4	 mov	 DWORD PTR tv69[ebp], ecx
  0001c	eb 1d		 jmp	 SHORT $LN8@toggle_apa
$LN7@toggle_apa:
  0001e	68 aa 32 00 00	 push	 12970			; 000032aaH
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00028	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00034	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN8@toggle_apa:
  0003b	b8 01 00 00 00	 mov	 eax, 1
  00040	85 c0		 test	 eax, eax
  00042	74 09		 je	 SHORT $LN9@toggle_apa
  00044	c7 45 b0 23 00
	00 00		 mov	 DWORD PTR tv76[ebp], 35	; 00000023H
  0004b	eb 1d		 jmp	 SHORT $LN10@toggle_apa
$LN9@toggle_apa:
  0004d	68 aa 32 00 00	 push	 12970			; 000032aaH
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00063	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN10@toggle_apa:
  0006a	6a 23		 push	 35			; 00000023H
  0006c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00072	52		 push	 edx
  00073	69 45 b4 5c 04
	00 00		 imul	 eax, DWORD PTR tv69[ebp], 1116
  0007a	8b 4d b0	 mov	 ecx, DWORD PTR tv76[ebp]
  0007d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00084	ff d2		 call	 edx
  00086	85 c0		 test	 eax, eax
  00088	75 11		 jne	 SHORT $LN2@toggle_apa

; 12971: 	{
; 12972: 		location = MFD_LOCATION_PILOT_RHS;

  0008a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _location$[ebp], 1

; 12973: 		mfd_mode = rhs_mfd_mode;

  00091	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A
  00096	89 45 f8	 mov	 DWORD PTR _mfd_mode$[ebp], eax

; 12974: 	}
; 12975: 	else

  00099	eb 0f		 jmp	 SHORT $LN3@toggle_apa
$LN2@toggle_apa:

; 12976: 	{
; 12977: 		location = MFD_LOCATION_CPG_RHS;

  0009b	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _location$[ebp], 3

; 12978: 		mfd_mode = cpg_rhs_mfd_mode;

  000a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?cpg_rhs_mfd_mode@@3W4MFD_MODES@@A
  000a7	89 45 f8	 mov	 DWORD PTR _mfd_mode$[ebp], eax
$LN3@toggle_apa:

; 12979: 	}
; 12980: 
; 12981: 	if (mfd_mode != MFD_MODE_OFF)

  000aa	83 7d f8 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  000ae	74 0d		 je	 SHORT $LN4@toggle_apa

; 12982: 		select_apache_mfd_mode (MFD_MODE_OFF, location);

  000b0	8b 45 fc	 mov	 eax, DWORD PTR _location$[ebp]
  000b3	50		 push	 eax
  000b4	6a 00		 push	 0
  000b6	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12983: 	else

  000bb	eb 0b		 jmp	 SHORT $LN1@toggle_apa
$LN4@toggle_apa:

; 12984: 		select_apache_mfd_mode (MFD_MODE_FLIGHT, location);

  000bd	8b 45 fc	 mov	 eax, DWORD PTR _location$[ebp]
  000c0	50		 push	 eax
  000c1	6a 0d		 push	 13			; 0000000dH
  000c3	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode
$LN1@toggle_apa:

; 12985: }

  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	5b		 pop	 ebx
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
?toggle_apache_rhs_mfd_on_off@@YGXXZ ENDP		; toggle_apache_rhs_mfd_on_off
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?toggle_apache_lhs_mfd_on_off@@YGXXZ
_TEXT	SEGMENT
tv76 = -80						; size = 4
tv69 = -76						; size = 4
_mfd_mode$ = -8						; size = 4
_location$ = -4						; size = 4
?toggle_apache_lhs_mfd_on_off@@YGXXZ PROC		; toggle_apache_lhs_mfd_on_off, COMDAT

; 12940: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12941: 	mfd_locations location;
; 12942: 	mfd_modes mfd_mode;
; 12943: 
; 12944: 	if (get_local_entity_int_value (get_pilot_entity (), INT_TYPE_CREW_ROLE) == CREW_ROLE_PILOT)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_entity@@3PAUENTITY@@A, 0 ; pilot_entity
  00010	74 0c		 je	 SHORT $LN7@toggle_apa
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d b4	 mov	 DWORD PTR tv69[ebp], ecx
  0001c	eb 1d		 jmp	 SHORT $LN8@toggle_apa
$LN7@toggle_apa:
  0001e	68 90 32 00 00	 push	 12944			; 00003290H
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00028	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00034	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN8@toggle_apa:
  0003b	b8 01 00 00 00	 mov	 eax, 1
  00040	85 c0		 test	 eax, eax
  00042	74 09		 je	 SHORT $LN9@toggle_apa
  00044	c7 45 b0 23 00
	00 00		 mov	 DWORD PTR tv76[ebp], 35	; 00000023H
  0004b	eb 1d		 jmp	 SHORT $LN10@toggle_apa
$LN9@toggle_apa:
  0004d	68 90 32 00 00	 push	 12944			; 00003290H
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00063	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN10@toggle_apa:
  0006a	6a 23		 push	 35			; 00000023H
  0006c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00072	52		 push	 edx
  00073	69 45 b4 5c 04
	00 00		 imul	 eax, DWORD PTR tv69[ebp], 1116
  0007a	8b 4d b0	 mov	 ecx, DWORD PTR tv76[ebp]
  0007d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00084	ff d2		 call	 edx
  00086	85 c0		 test	 eax, eax
  00088	75 11		 jne	 SHORT $LN2@toggle_apa

; 12945: 	{
; 12946: 		location = MFD_LOCATION_PILOT_LHS;

  0008a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _location$[ebp], 0

; 12947: 		mfd_mode = lhs_mfd_mode;

  00091	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A
  00096	89 45 f8	 mov	 DWORD PTR _mfd_mode$[ebp], eax

; 12948: 	}
; 12949: 	else

  00099	eb 0f		 jmp	 SHORT $LN3@toggle_apa
$LN2@toggle_apa:

; 12950: 	{
; 12951: 		location = MFD_LOCATION_CPG_LHS;

  0009b	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _location$[ebp], 2

; 12952: 		mfd_mode = cpg_lhs_mfd_mode;

  000a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?cpg_lhs_mfd_mode@@3W4MFD_MODES@@A
  000a7	89 45 f8	 mov	 DWORD PTR _mfd_mode$[ebp], eax
$LN3@toggle_apa:

; 12953: 	}
; 12954: 
; 12955: 	if (mfd_mode != MFD_MODE_OFF)

  000aa	83 7d f8 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  000ae	74 0d		 je	 SHORT $LN4@toggle_apa

; 12956: 		select_apache_mfd_mode (MFD_MODE_OFF, location);

  000b0	8b 45 fc	 mov	 eax, DWORD PTR _location$[ebp]
  000b3	50		 push	 eax
  000b4	6a 00		 push	 0
  000b6	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12957: 	else

  000bb	eb 0b		 jmp	 SHORT $LN1@toggle_apa
$LN4@toggle_apa:

; 12958: 		select_apache_mfd_mode (MFD_MODE_ENGINE, location);

  000bd	8b 45 fc	 mov	 eax, DWORD PTR _location$[ebp]
  000c0	50		 push	 eax
  000c1	6a 0c		 push	 12			; 0000000cH
  000c3	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode
$LN1@toggle_apa:

; 12959: }

  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	5b		 pop	 ebx
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
?toggle_apache_lhs_mfd_on_off@@YGXXZ ENDP		; toggle_apache_lhs_mfd_on_off
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?auto_page_apache_ase_mfd@@YGXXZ
_TEXT	SEGMENT
?auto_page_apache_ase_mfd@@YGXXZ PROC			; auto_page_apache_ase_mfd, COMDAT

; 12826: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12827: 	if (!get_global_ase_auto_page ())

  00009	83 3d 64 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868, 0
  00010	75 05		 jne	 SHORT $LN2@auto_page_

; 12828: 	{
; 12829: 		return;

  00012	e9 1d 01 00 00	 jmp	 $LN1@auto_page_
$LN2@auto_page_:

; 12830: 	}
; 12831: 
; 12832: 	////////////////////////////////////////
; 12833: 	//
; 12834: 	// select viewed large MFD
; 12835: 	//
; 12836: 	////////////////////////////////////////
; 12837: 
; 12838: 	if (get_view_mode () == VIEW_MODE_COCKPIT_PANEL_SPECIAL_APACHE_LHS_MFD)

  00017	83 3d 00 00 00
	00 1c		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 28 ; view_mode, 0000001cH
  0001e	75 1b		 jne	 SHORT $LN3@auto_page_

; 12839: 	{
; 12840: 		if (!apache_damage.lh_mfd)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  00025	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  00028	83 e0 01	 and	 eax, 1
  0002b	75 0e		 jne	 SHORT $LN3@auto_page_

; 12841: 		{
; 12842: 			select_apache_mfd_mode (MFD_MODE_ASE, MFD_LOCATION_LHS);

  0002d	6a 00		 push	 0
  0002f	6a 09		 push	 9
  00031	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12843: 
; 12844: 			return;

  00036	e9 f9 00 00 00	 jmp	 $LN1@auto_page_
$LN3@auto_page_:

; 12845: 		}
; 12846: 	}
; 12847: 
; 12848: 	if (get_view_mode () == VIEW_MODE_COCKPIT_PANEL_SPECIAL_APACHE_RHS_MFD)

  0003b	83 3d 00 00 00
	00 1d		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 29 ; view_mode, 0000001dH
  00042	75 1b		 jne	 SHORT $LN5@auto_page_

; 12849: 	{
; 12850: 		if (!apache_damage.rh_mfd)

  00044	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  00049	c1 e8 11	 shr	 eax, 17			; 00000011H
  0004c	83 e0 01	 and	 eax, 1
  0004f	75 0e		 jne	 SHORT $LN5@auto_page_

; 12851: 		{
; 12852: 			select_apache_mfd_mode (MFD_MODE_ASE, MFD_LOCATION_RHS);

  00051	6a 01		 push	 1
  00053	6a 09		 push	 9
  00055	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12853: 
; 12854: 			return;

  0005a	e9 d5 00 00 00	 jmp	 $LN1@auto_page_
$LN5@auto_page_:

; 12855: 		}
; 12856: 	}
; 12857: 
; 12858: 	////////////////////////////////////////
; 12859: 	//
; 12860: 	// check if already displayed
; 12861: 	//
; 12862: 	////////////////////////////////////////
; 12863: 
; 12864: 	if (lhs_mfd_mode == MFD_MODE_ASE)

  0005f	83 3d 00 00 00
	00 09		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 9
  00066	75 05		 jne	 SHORT $LN7@auto_page_

; 12865: 	{
; 12866: 		return;

  00068	e9 c7 00 00 00	 jmp	 $LN1@auto_page_
$LN7@auto_page_:

; 12867: 	}
; 12868: 
; 12869: 	if (rhs_mfd_mode == MFD_MODE_ASE)

  0006d	83 3d 00 00 00
	00 09		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 9
  00074	75 05		 jne	 SHORT $LN8@auto_page_

; 12870: 	{
; 12871: 		return;

  00076	e9 b9 00 00 00	 jmp	 $LN1@auto_page_
$LN8@auto_page_:

; 12872: 	}
; 12873: 
; 12874: 	////////////////////////////////////////
; 12875: 	//
; 12876: 	// select undamaged off MFD
; 12877: 	//
; 12878: 	////////////////////////////////////////
; 12879: 
; 12880: 	if ((lhs_mfd_mode == MFD_MODE_OFF) && (!apache_damage.lh_mfd))

  0007b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 0
  00082	75 1b		 jne	 SHORT $LN9@auto_page_
  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  00089	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  0008c	83 e0 01	 and	 eax, 1
  0008f	75 0e		 jne	 SHORT $LN9@auto_page_

; 12881: 	{
; 12882: 		select_apache_mfd_mode (MFD_MODE_ASE, MFD_LOCATION_LHS);

  00091	6a 00		 push	 0
  00093	6a 09		 push	 9
  00095	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12883: 
; 12884: 		return;

  0009a	e9 95 00 00 00	 jmp	 $LN1@auto_page_
$LN9@auto_page_:

; 12885: 	}
; 12886: 
; 12887: 	if ((rhs_mfd_mode == MFD_MODE_OFF) && (!apache_damage.rh_mfd))

  0009f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 0
  000a6	75 18		 jne	 SHORT $LN10@auto_page_
  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  000ad	c1 e8 11	 shr	 eax, 17			; 00000011H
  000b0	83 e0 01	 and	 eax, 1
  000b3	75 0b		 jne	 SHORT $LN10@auto_page_

; 12888: 	{
; 12889: 		select_apache_mfd_mode (MFD_MODE_ASE, MFD_LOCATION_RHS);

  000b5	6a 01		 push	 1
  000b7	6a 09		 push	 9
  000b9	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12890: 
; 12891: 		return;

  000be	eb 74		 jmp	 SHORT $LN1@auto_page_
$LN10@auto_page_:

; 12892: 	}
; 12893: 
; 12894: 	////////////////////////////////////////
; 12895: 	//
; 12896: 	// select unfocused MFD
; 12897: 	//
; 12898: 	////////////////////////////////////////
; 12899: 
; 12900: 	if ((!get_apache_mfd_has_focus (MFD_LOCATION_LHS)) && (!apache_damage.lh_mfd))

  000c0	6a 00		 push	 0
  000c2	e8 00 00 00 00	 call	 ?get_apache_mfd_has_focus@@YGHW4MFD_LOCATIONS@@@Z ; get_apache_mfd_has_focus
  000c7	85 c0		 test	 eax, eax
  000c9	75 18		 jne	 SHORT $LN11@auto_page_
  000cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  000d0	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  000d3	83 e0 01	 and	 eax, 1
  000d6	75 0b		 jne	 SHORT $LN11@auto_page_

; 12901: 	{
; 12902: 		select_apache_mfd_mode (MFD_MODE_ASE, MFD_LOCATION_LHS);

  000d8	6a 00		 push	 0
  000da	6a 09		 push	 9
  000dc	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12903: 
; 12904: 		return;

  000e1	eb 51		 jmp	 SHORT $LN1@auto_page_
$LN11@auto_page_:

; 12905: 	}
; 12906: 
; 12907: 	if ((!get_apache_mfd_has_focus (MFD_LOCATION_RHS)) && (!apache_damage.rh_mfd))

  000e3	6a 01		 push	 1
  000e5	e8 00 00 00 00	 call	 ?get_apache_mfd_has_focus@@YGHW4MFD_LOCATIONS@@@Z ; get_apache_mfd_has_focus
  000ea	85 c0		 test	 eax, eax
  000ec	75 18		 jne	 SHORT $LN12@auto_page_
  000ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  000f3	c1 e8 11	 shr	 eax, 17			; 00000011H
  000f6	83 e0 01	 and	 eax, 1
  000f9	75 0b		 jne	 SHORT $LN12@auto_page_

; 12908: 	{
; 12909: 		select_apache_mfd_mode (MFD_MODE_ASE, MFD_LOCATION_RHS);

  000fb	6a 01		 push	 1
  000fd	6a 09		 push	 9
  000ff	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12910: 
; 12911: 		return;

  00104	eb 2e		 jmp	 SHORT $LN1@auto_page_
$LN12@auto_page_:

; 12912: 	}
; 12913: 
; 12914: 	////////////////////////////////////////
; 12915: 	//
; 12916: 	// select undamaged MFD
; 12917: 	//
; 12918: 	////////////////////////////////////////
; 12919: 
; 12920: 	if (!apache_damage.lh_mfd)

  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  0010b	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  0010e	83 e0 01	 and	 eax, 1
  00111	75 0b		 jne	 SHORT $LN13@auto_page_

; 12921: 	{
; 12922: 		select_apache_mfd_mode (MFD_MODE_ASE, MFD_LOCATION_LHS);

  00113	6a 00		 push	 0
  00115	6a 09		 push	 9
  00117	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12923: 
; 12924: 		return;

  0011c	eb 16		 jmp	 SHORT $LN1@auto_page_
$LN13@auto_page_:

; 12925: 	}
; 12926: 
; 12927: 	if (!apache_damage.rh_mfd)

  0011e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  00123	c1 e8 11	 shr	 eax, 17			; 00000011H
  00126	83 e0 01	 and	 eax, 1
  00129	75 09		 jne	 SHORT $LN1@auto_page_

; 12928: 	{
; 12929: 		select_apache_mfd_mode (MFD_MODE_ASE, MFD_LOCATION_RHS);

  0012b	6a 01		 push	 1
  0012d	6a 09		 push	 9
  0012f	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode
$LN1@auto_page_:

; 12930: 
; 12931: 		return;
; 12932: 	}
; 12933: }

  00134	5f		 pop	 edi
  00135	5e		 pop	 esi
  00136	5b		 pop	 ebx
  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c3		 ret	 0
?auto_page_apache_ase_mfd@@YGXXZ ENDP			; auto_page_apache_ase_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?toggle_apache_ase_auto_page@@YGXXZ
_TEXT	SEGMENT
?toggle_apache_ase_auto_page@@YGXXZ PROC		; toggle_apache_ase_auto_page, COMDAT

; 12817: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12818: 	set_global_ase_auto_page (get_global_ase_auto_page () ^ 1);

  00009	a1 64 03 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868
  0000e	83 f0 01	 xor	 eax, 1
  00011	a3 64 03 00 00	 mov	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868, eax

; 12819: }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?toggle_apache_ase_auto_page@@YGXXZ ENDP		; toggle_apache_ase_auto_page
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?select_apache_tads_mfd@@YGXXZ
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv69 = -68						; size = 4
?select_apache_tads_mfd@@YGXXZ PROC			; select_apache_tads_mfd, COMDAT

; 12741: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12742: 	// co-pilot has ORT as TADS display, doesn't need to use a MFD
; 12743: 	if (get_local_entity_int_value (get_pilot_entity (), INT_TYPE_CREW_ROLE) == CREW_ROLE_CO_PILOT)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_entity@@3PAUENTITY@@A, 0 ; pilot_entity
  00010	74 0c		 je	 SHORT $LN17@select_apa
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d bc	 mov	 DWORD PTR tv69[ebp], ecx
  0001c	eb 1d		 jmp	 SHORT $LN18@select_apa
$LN17@select_apa:
  0001e	68 c7 31 00 00	 push	 12743			; 000031c7H
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00028	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00034	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN18@select_apa:
  0003b	b8 01 00 00 00	 mov	 eax, 1
  00040	85 c0		 test	 eax, eax
  00042	74 09		 je	 SHORT $LN19@select_apa
  00044	c7 45 b8 23 00
	00 00		 mov	 DWORD PTR tv76[ebp], 35	; 00000023H
  0004b	eb 1d		 jmp	 SHORT $LN20@select_apa
$LN19@select_apa:
  0004d	68 c7 31 00 00	 push	 12743			; 000031c7H
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00063	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN20@select_apa:
  0006a	6a 23		 push	 35			; 00000023H
  0006c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00072	52		 push	 edx
  00073	69 45 bc 5c 04
	00 00		 imul	 eax, DWORD PTR tv69[ebp], 1116
  0007a	8b 4d b8	 mov	 ecx, DWORD PTR tv76[ebp]
  0007d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00084	ff d2		 call	 edx
  00086	83 f8 01	 cmp	 eax, 1
  00089	75 05		 jne	 SHORT $LN2@select_apa

; 12744: 		return;

  0008b	e9 3f 01 00 00	 jmp	 $LN1@select_apa
$LN2@select_apa:

; 12745: 
; 12746: 	if (get_view_mode () == VIEW_MODE_COCKPIT_PANEL_SPECIAL_APACHE_LHS_MFD)

  00090	83 3d 00 00 00
	00 1c		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 28 ; view_mode, 0000001cH
  00097	75 1f		 jne	 SHORT $LN3@select_apa

; 12747: 	{
; 12748: 		if (!apache_damage.lh_mfd)

  00099	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  0009e	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  000a1	83 e0 01	 and	 eax, 1
  000a4	75 12		 jne	 SHORT $LN3@select_apa

; 12749: 		{
; 12750: 			select_apache_mfd_mode (get_mfd_mode_for_eo_sensor (), MFD_LOCATION_LHS);

  000a6	6a 00		 push	 0
  000a8	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12751: 
; 12752: 			return;

  000b3	e9 17 01 00 00	 jmp	 $LN1@select_apa
$LN3@select_apa:

; 12753: 		}
; 12754: 	}
; 12755: 
; 12756: 	if (get_view_mode () == VIEW_MODE_COCKPIT_PANEL_SPECIAL_APACHE_RHS_MFD)

  000b8	83 3d 00 00 00
	00 1d		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 29 ; view_mode, 0000001dH
  000bf	75 1f		 jne	 SHORT $LN5@select_apa

; 12757: 	{
; 12758: 		if (!apache_damage.rh_mfd)

  000c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  000c6	c1 e8 11	 shr	 eax, 17			; 00000011H
  000c9	83 e0 01	 and	 eax, 1
  000cc	75 12		 jne	 SHORT $LN5@select_apa

; 12759: 		{
; 12760: 			select_apache_mfd_mode (get_mfd_mode_for_eo_sensor (), MFD_LOCATION_RHS);

  000ce	6a 01		 push	 1
  000d0	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12761: 
; 12762: 			return;

  000db	e9 ef 00 00 00	 jmp	 $LN1@select_apa
$LN5@select_apa:

; 12763: 		}
; 12764: 	}
; 12765: 
; 12766: 	if (tsd_tads_underlay_active)

  000e0	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?tsd_tads_underlay_active@@3FA
  000e7	85 c0		 test	 eax, eax
  000e9	74 0a		 je	 SHORT $LN7@select_apa

; 12767: 		pilot_tsd_underlay = TSD_UNDERLAY_NONE;

  000eb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pilot_tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 0
$LN7@select_apa:

; 12768: 
; 12769: 	if ((lhs_mfd_mode == MFD_MODE_FLIR) || (lhs_mfd_mode == MFD_MODE_DTV) || (lhs_mfd_mode == MFD_MODE_DVO))

  000f5	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 4
  000fc	74 12		 je	 SHORT $LN9@select_apa
  000fe	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 5
  00105	74 09		 je	 SHORT $LN9@select_apa
  00107	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 6
  0010e	75 12		 jne	 SHORT $LN8@select_apa
$LN9@select_apa:

; 12770: 	{
; 12771: 		select_apache_mfd_mode (get_mfd_mode_for_eo_sensor (), MFD_LOCATION_LHS);

  00110	6a 00		 push	 0
  00112	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00117	50		 push	 eax
  00118	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12772: 
; 12773: 		return;

  0011d	e9 ad 00 00 00	 jmp	 $LN1@select_apa
$LN8@select_apa:

; 12774: 	}
; 12775: 
; 12776: 	if ((rhs_mfd_mode == MFD_MODE_FLIR) || (rhs_mfd_mode == MFD_MODE_DTV) || (rhs_mfd_mode == MFD_MODE_DVO))

  00122	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 4
  00129	74 12		 je	 SHORT $LN11@select_apa
  0012b	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 5
  00132	74 09		 je	 SHORT $LN11@select_apa
  00134	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 6
  0013b	75 12		 jne	 SHORT $LN10@select_apa
$LN11@select_apa:

; 12777: 	{
; 12778: 		select_apache_mfd_mode (get_mfd_mode_for_eo_sensor (), MFD_LOCATION_RHS);

  0013d	6a 01		 push	 1
  0013f	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00144	50		 push	 eax
  00145	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12779: 
; 12780: 		return;

  0014a	e9 80 00 00 00	 jmp	 $LN1@select_apa
$LN10@select_apa:

; 12781: 	}
; 12782: 
; 12783: 	if ((lhs_mfd_mode == MFD_MODE_OFF) && (!apache_damage.lh_mfd))

  0014f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 0
  00156	75 1c		 jne	 SHORT $LN12@select_apa
  00158	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  0015d	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  00160	83 e0 01	 and	 eax, 1
  00163	75 0f		 jne	 SHORT $LN12@select_apa

; 12784: 	{
; 12785: 		select_apache_mfd_mode (get_mfd_mode_for_eo_sensor (), MFD_LOCATION_LHS);

  00165	6a 00		 push	 0
  00167	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  0016c	50		 push	 eax
  0016d	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12786: 
; 12787: 		return;

  00172	eb 5b		 jmp	 SHORT $LN1@select_apa
$LN12@select_apa:

; 12788: 	}
; 12789: 
; 12790: 	if ((rhs_mfd_mode == MFD_MODE_OFF) && (!apache_damage.rh_mfd))

  00174	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 0
  0017b	75 1c		 jne	 SHORT $LN13@select_apa
  0017d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  00182	c1 e8 11	 shr	 eax, 17			; 00000011H
  00185	83 e0 01	 and	 eax, 1
  00188	75 0f		 jne	 SHORT $LN13@select_apa

; 12791: 	{
; 12792: 		select_apache_mfd_mode (get_mfd_mode_for_eo_sensor (), MFD_LOCATION_RHS);

  0018a	6a 01		 push	 1
  0018c	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00191	50		 push	 eax
  00192	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12793: 
; 12794: 		return;

  00197	eb 36		 jmp	 SHORT $LN1@select_apa
$LN13@select_apa:

; 12795: 	}
; 12796: 
; 12797: 	if (!apache_damage.lh_mfd)

  00199	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  0019e	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  001a1	83 e0 01	 and	 eax, 1
  001a4	75 0f		 jne	 SHORT $LN14@select_apa

; 12798: 	{
; 12799: 		select_apache_mfd_mode (get_mfd_mode_for_eo_sensor (), MFD_LOCATION_LHS);

  001a6	6a 00		 push	 0
  001a8	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  001ad	50		 push	 eax
  001ae	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12800: 
; 12801: 		return;

  001b3	eb 1a		 jmp	 SHORT $LN1@select_apa
$LN14@select_apa:

; 12802: 	}
; 12803: 
; 12804: 	if (!apache_damage.rh_mfd)

  001b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  001ba	c1 e8 11	 shr	 eax, 17			; 00000011H
  001bd	83 e0 01	 and	 eax, 1
  001c0	75 0d		 jne	 SHORT $LN1@select_apa

; 12805: 	{
; 12806: 		select_apache_mfd_mode (get_mfd_mode_for_eo_sensor (), MFD_LOCATION_RHS);

  001c2	6a 01		 push	 1
  001c4	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  001c9	50		 push	 eax
  001ca	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode
$LN1@select_apa:

; 12807: 
; 12808: 		return;
; 12809: 	}
; 12810: }

  001cf	5f		 pop	 edi
  001d0	5e		 pop	 esi
  001d1	5b		 pop	 ebx
  001d2	8b e5		 mov	 esp, ebp
  001d4	5d		 pop	 ebp
  001d5	c3		 ret	 0
?select_apache_tads_mfd@@YGXXZ ENDP			; select_apache_tads_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?select_apache_air_radar_mfd@@YGXXZ
_TEXT	SEGMENT
?select_apache_air_radar_mfd@@YGXXZ PROC		; select_apache_air_radar_mfd, COMDAT

; 12662: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12663: 	if (get_view_mode () == VIEW_MODE_COCKPIT_PANEL_SPECIAL_APACHE_LHS_MFD)

  00009	83 3d 00 00 00
	00 1c		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 28 ; view_mode, 0000001cH
  00010	75 1b		 jne	 SHORT $LN2@select_apa

; 12664: 	{
; 12665: 		if (!apache_damage.lh_mfd)

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  00017	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  0001a	83 e0 01	 and	 eax, 1
  0001d	75 0e		 jne	 SHORT $LN2@select_apa

; 12666: 		{
; 12667: 			select_apache_mfd_mode (MFD_MODE_AIR_RADAR, MFD_LOCATION_LHS);

  0001f	6a 00		 push	 0
  00021	6a 03		 push	 3
  00023	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12668: 
; 12669: 			return;

  00028	e9 db 00 00 00	 jmp	 $LN1@select_apa
$LN2@select_apa:

; 12670: 		}
; 12671: 	}
; 12672: 
; 12673: 	if (get_view_mode () == VIEW_MODE_COCKPIT_PANEL_SPECIAL_APACHE_RHS_MFD)

  0002d	83 3d 00 00 00
	00 1d		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 29 ; view_mode, 0000001dH
  00034	75 1b		 jne	 SHORT $LN4@select_apa

; 12674: 	{
; 12675: 		if (!apache_damage.rh_mfd)

  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  0003b	c1 e8 11	 shr	 eax, 17			; 00000011H
  0003e	83 e0 01	 and	 eax, 1
  00041	75 0e		 jne	 SHORT $LN4@select_apa

; 12676: 		{
; 12677: 			select_apache_mfd_mode (MFD_MODE_AIR_RADAR, MFD_LOCATION_RHS);

  00043	6a 01		 push	 1
  00045	6a 03		 push	 3
  00047	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12678: 
; 12679: 			return;

  0004c	e9 b7 00 00 00	 jmp	 $LN1@select_apa
$LN4@select_apa:

; 12680: 		}
; 12681: 	}
; 12682: 
; 12683: 	if (lhs_mfd_mode == MFD_MODE_AIR_RADAR)

  00051	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 3
  00058	75 05		 jne	 SHORT $LN6@select_apa

; 12684: 	{
; 12685: 		return;

  0005a	e9 a9 00 00 00	 jmp	 $LN1@select_apa
$LN6@select_apa:

; 12686: 	}
; 12687: 
; 12688: 	if (rhs_mfd_mode == MFD_MODE_AIR_RADAR)

  0005f	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 3
  00066	75 05		 jne	 SHORT $LN7@select_apa

; 12689: 	{
; 12690: 		return;

  00068	e9 9b 00 00 00	 jmp	 $LN1@select_apa
$LN7@select_apa:

; 12691: 	}
; 12692: 
; 12693: 	if (lhs_mfd_mode == MFD_MODE_GROUND_RADAR)

  0006d	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 2
  00074	75 0e		 jne	 SHORT $LN8@select_apa

; 12694: 	{
; 12695: 		select_apache_mfd_mode (MFD_MODE_AIR_RADAR, MFD_LOCATION_LHS);

  00076	6a 00		 push	 0
  00078	6a 03		 push	 3
  0007a	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12696: 
; 12697: 		return;

  0007f	e9 84 00 00 00	 jmp	 $LN1@select_apa
$LN8@select_apa:

; 12698: 	}
; 12699: 
; 12700: 	if (rhs_mfd_mode == MFD_MODE_GROUND_RADAR)

  00084	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 2
  0008b	75 0b		 jne	 SHORT $LN9@select_apa

; 12701: 	{
; 12702: 		select_apache_mfd_mode (MFD_MODE_AIR_RADAR, MFD_LOCATION_RHS);

  0008d	6a 01		 push	 1
  0008f	6a 03		 push	 3
  00091	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12703: 
; 12704: 		return;

  00096	eb 70		 jmp	 SHORT $LN1@select_apa
$LN9@select_apa:

; 12705: 	}
; 12706: 
; 12707: 	if ((lhs_mfd_mode == MFD_MODE_OFF) && (!apache_damage.lh_mfd))

  00098	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 0
  0009f	75 18		 jne	 SHORT $LN10@select_apa
  000a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  000a6	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  000a9	83 e0 01	 and	 eax, 1
  000ac	75 0b		 jne	 SHORT $LN10@select_apa

; 12708: 	{
; 12709: 		select_apache_mfd_mode (MFD_MODE_AIR_RADAR, MFD_LOCATION_LHS);

  000ae	6a 00		 push	 0
  000b0	6a 03		 push	 3
  000b2	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12710: 
; 12711: 		return;

  000b7	eb 4f		 jmp	 SHORT $LN1@select_apa
$LN10@select_apa:

; 12712: 	}
; 12713: 
; 12714: 	if ((rhs_mfd_mode == MFD_MODE_OFF) && (!apache_damage.rh_mfd))

  000b9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 0
  000c0	75 18		 jne	 SHORT $LN11@select_apa
  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  000c7	c1 e8 11	 shr	 eax, 17			; 00000011H
  000ca	83 e0 01	 and	 eax, 1
  000cd	75 0b		 jne	 SHORT $LN11@select_apa

; 12715: 	{
; 12716: 		select_apache_mfd_mode (MFD_MODE_AIR_RADAR, MFD_LOCATION_RHS);

  000cf	6a 01		 push	 1
  000d1	6a 03		 push	 3
  000d3	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12717: 
; 12718: 		return;

  000d8	eb 2e		 jmp	 SHORT $LN1@select_apa
$LN11@select_apa:

; 12719: 	}
; 12720: 
; 12721: 	if (!apache_damage.lh_mfd)

  000da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  000df	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  000e2	83 e0 01	 and	 eax, 1
  000e5	75 0b		 jne	 SHORT $LN12@select_apa

; 12722: 	{
; 12723: 		select_apache_mfd_mode (MFD_MODE_AIR_RADAR, MFD_LOCATION_LHS);

  000e7	6a 00		 push	 0
  000e9	6a 03		 push	 3
  000eb	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12724: 
; 12725: 		return;

  000f0	eb 16		 jmp	 SHORT $LN1@select_apa
$LN12@select_apa:

; 12726: 	}
; 12727: 
; 12728: 	if (!apache_damage.rh_mfd)

  000f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  000f7	c1 e8 11	 shr	 eax, 17			; 00000011H
  000fa	83 e0 01	 and	 eax, 1
  000fd	75 09		 jne	 SHORT $LN1@select_apa

; 12729: 	{
; 12730: 		select_apache_mfd_mode (MFD_MODE_AIR_RADAR, MFD_LOCATION_RHS);

  000ff	6a 01		 push	 1
  00101	6a 03		 push	 3
  00103	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode
$LN1@select_apa:

; 12731: 
; 12732: 		return;
; 12733: 	}
; 12734: }

  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	5b		 pop	 ebx
  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c3		 ret	 0
?select_apache_air_radar_mfd@@YGXXZ ENDP		; select_apache_air_radar_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?select_apache_ground_radar_mfd@@YGXXZ
_TEXT	SEGMENT
?select_apache_ground_radar_mfd@@YGXXZ PROC		; select_apache_ground_radar_mfd, COMDAT

; 12590: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12591: 	if (get_view_mode () == VIEW_MODE_COCKPIT_PANEL_SPECIAL_APACHE_LHS_MFD)

  00009	83 3d 00 00 00
	00 1c		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 28 ; view_mode, 0000001cH
  00010	75 1b		 jne	 SHORT $LN2@select_apa

; 12592: 	{
; 12593: 		if (!apache_damage.lh_mfd)

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  00017	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  0001a	83 e0 01	 and	 eax, 1
  0001d	75 0e		 jne	 SHORT $LN2@select_apa

; 12594: 		{
; 12595: 			select_apache_mfd_mode (MFD_MODE_GROUND_RADAR, MFD_LOCATION_LHS);

  0001f	6a 00		 push	 0
  00021	6a 02		 push	 2
  00023	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12596: 
; 12597: 			return;

  00028	e9 d6 00 00 00	 jmp	 $LN1@select_apa
$LN2@select_apa:

; 12598: 		}
; 12599: 	}
; 12600: 
; 12601: 	if (get_view_mode () == VIEW_MODE_COCKPIT_PANEL_SPECIAL_APACHE_RHS_MFD)

  0002d	83 3d 00 00 00
	00 1d		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 29 ; view_mode, 0000001dH
  00034	75 1b		 jne	 SHORT $LN4@select_apa

; 12602: 	{
; 12603: 		if (!apache_damage.rh_mfd)

  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  0003b	c1 e8 11	 shr	 eax, 17			; 00000011H
  0003e	83 e0 01	 and	 eax, 1
  00041	75 0e		 jne	 SHORT $LN4@select_apa

; 12604: 		{
; 12605: 			select_apache_mfd_mode (MFD_MODE_GROUND_RADAR, MFD_LOCATION_RHS);

  00043	6a 01		 push	 1
  00045	6a 02		 push	 2
  00047	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12606: 
; 12607: 			return;

  0004c	e9 b2 00 00 00	 jmp	 $LN1@select_apa
$LN4@select_apa:

; 12608: 		}
; 12609: 	}
; 12610: 
; 12611: 	if (lhs_mfd_mode == MFD_MODE_GROUND_RADAR || rhs_mfd_mode == MFD_MODE_GROUND_RADAR)

  00051	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 2
  00058	74 09		 je	 SHORT $LN7@select_apa
  0005a	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 2
  00061	75 05		 jne	 SHORT $LN6@select_apa
$LN7@select_apa:

; 12612: 		return;

  00063	e9 9b 00 00 00	 jmp	 $LN1@select_apa
$LN6@select_apa:

; 12613: 
; 12614: 	if (lhs_mfd_mode == MFD_MODE_AIR_RADAR)

  00068	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 3
  0006f	75 0e		 jne	 SHORT $LN8@select_apa

; 12615: 	{
; 12616: 		select_apache_mfd_mode (MFD_MODE_GROUND_RADAR, MFD_LOCATION_LHS);

  00071	6a 00		 push	 0
  00073	6a 02		 push	 2
  00075	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12617: 
; 12618: 		return;

  0007a	e9 84 00 00 00	 jmp	 $LN1@select_apa
$LN8@select_apa:

; 12619: 	}
; 12620: 
; 12621: 	if (rhs_mfd_mode == MFD_MODE_AIR_RADAR)

  0007f	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 3
  00086	75 0b		 jne	 SHORT $LN9@select_apa

; 12622: 	{
; 12623: 		select_apache_mfd_mode (MFD_MODE_GROUND_RADAR, MFD_LOCATION_RHS);

  00088	6a 01		 push	 1
  0008a	6a 02		 push	 2
  0008c	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12624: 
; 12625: 		return;

  00091	eb 70		 jmp	 SHORT $LN1@select_apa
$LN9@select_apa:

; 12626: 	}
; 12627: 
; 12628: 	if ((lhs_mfd_mode == MFD_MODE_OFF) && (!apache_damage.lh_mfd))

  00093	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 0
  0009a	75 18		 jne	 SHORT $LN10@select_apa
  0009c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  000a1	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  000a4	83 e0 01	 and	 eax, 1
  000a7	75 0b		 jne	 SHORT $LN10@select_apa

; 12629: 	{
; 12630: 		select_apache_mfd_mode (MFD_MODE_GROUND_RADAR, MFD_LOCATION_LHS);

  000a9	6a 00		 push	 0
  000ab	6a 02		 push	 2
  000ad	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12631: 
; 12632: 		return;

  000b2	eb 4f		 jmp	 SHORT $LN1@select_apa
$LN10@select_apa:

; 12633: 	}
; 12634: 
; 12635: 	if ((rhs_mfd_mode == MFD_MODE_OFF) && (!apache_damage.rh_mfd))

  000b4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 0
  000bb	75 18		 jne	 SHORT $LN11@select_apa
  000bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  000c2	c1 e8 11	 shr	 eax, 17			; 00000011H
  000c5	83 e0 01	 and	 eax, 1
  000c8	75 0b		 jne	 SHORT $LN11@select_apa

; 12636: 	{
; 12637: 		select_apache_mfd_mode (MFD_MODE_GROUND_RADAR, MFD_LOCATION_RHS);

  000ca	6a 01		 push	 1
  000cc	6a 02		 push	 2
  000ce	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12638: 
; 12639: 		return;

  000d3	eb 2e		 jmp	 SHORT $LN1@select_apa
$LN11@select_apa:

; 12640: 	}
; 12641: 
; 12642: 	if (!apache_damage.lh_mfd)

  000d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  000da	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  000dd	83 e0 01	 and	 eax, 1
  000e0	75 0b		 jne	 SHORT $LN12@select_apa

; 12643: 	{
; 12644: 		select_apache_mfd_mode (MFD_MODE_GROUND_RADAR, MFD_LOCATION_LHS);

  000e2	6a 00		 push	 0
  000e4	6a 02		 push	 2
  000e6	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 12645: 
; 12646: 		return;

  000eb	eb 16		 jmp	 SHORT $LN1@select_apa
$LN12@select_apa:

; 12647: 	}
; 12648: 
; 12649: 	if (!apache_damage.rh_mfd)

  000ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  000f2	c1 e8 11	 shr	 eax, 17			; 00000011H
  000f5	83 e0 01	 and	 eax, 1
  000f8	75 09		 jne	 SHORT $LN1@select_apa

; 12650: 	{
; 12651: 		select_apache_mfd_mode (MFD_MODE_GROUND_RADAR, MFD_LOCATION_RHS);

  000fa	6a 01		 push	 1
  000fc	6a 02		 push	 2
  000fe	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode
$LN1@select_apa:

; 12652: 
; 12653: 		return;
; 12654: 	}
; 12655: }

  00103	5f		 pop	 edi
  00104	5e		 pop	 esi
  00105	5b		 pop	 ebx
  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c3		 ret	 0
?select_apache_ground_radar_mfd@@YGXXZ ENDP		; select_apache_ground_radar_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?select_previous_apache_rhs_mfd@@YGXXZ
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv69 = -68						; size = 4
?select_previous_apache_rhs_mfd@@YGXXZ PROC		; select_previous_apache_rhs_mfd, COMDAT

; 12578: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12579: 	if (get_local_entity_int_value (get_pilot_entity (), INT_TYPE_CREW_ROLE) == CREW_ROLE_PILOT)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_entity@@3PAUENTITY@@A, 0 ; pilot_entity
  00010	74 0c		 je	 SHORT $LN5@select_pre
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d bc	 mov	 DWORD PTR tv69[ebp], ecx
  0001c	eb 1d		 jmp	 SHORT $LN6@select_pre
$LN5@select_pre:
  0001e	68 23 31 00 00	 push	 12579			; 00003123H
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00028	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00034	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN6@select_pre:
  0003b	b8 01 00 00 00	 mov	 eax, 1
  00040	85 c0		 test	 eax, eax
  00042	74 09		 je	 SHORT $LN7@select_pre
  00044	c7 45 b8 23 00
	00 00		 mov	 DWORD PTR tv76[ebp], 35	; 00000023H
  0004b	eb 1d		 jmp	 SHORT $LN8@select_pre
$LN7@select_pre:
  0004d	68 23 31 00 00	 push	 12579			; 00003123H
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00063	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN8@select_pre:
  0006a	6a 23		 push	 35			; 00000023H
  0006c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00072	52		 push	 edx
  00073	69 45 bc 5c 04
	00 00		 imul	 eax, DWORD PTR tv69[ebp], 1116
  0007a	8b 4d b8	 mov	 ecx, DWORD PTR tv76[ebp]
  0007d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00084	ff d2		 call	 edx
  00086	85 c0		 test	 eax, eax
  00088	75 0b		 jne	 SHORT $LN2@select_pre

; 12580: 		cycle_apache_mfd(FALSE, MFD_LOCATION_PILOT_RHS);

  0008a	6a 01		 push	 1
  0008c	6a 00		 push	 0
  0008e	e8 00 00 00 00	 call	 ?cycle_apache_mfd@@YGXHW4MFD_LOCATIONS@@@Z ; cycle_apache_mfd

; 12581: 	else

  00093	eb 09		 jmp	 SHORT $LN1@select_pre
$LN2@select_pre:

; 12582: 		cycle_apache_mfd(FALSE, MFD_LOCATION_CPG_RHS);

  00095	6a 03		 push	 3
  00097	6a 00		 push	 0
  00099	e8 00 00 00 00	 call	 ?cycle_apache_mfd@@YGXHW4MFD_LOCATIONS@@@Z ; cycle_apache_mfd
$LN1@select_pre:

; 12583: }

  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
?select_previous_apache_rhs_mfd@@YGXXZ ENDP		; select_previous_apache_rhs_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?select_next_apache_rhs_mfd@@YGXXZ
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv69 = -68						; size = 4
?select_next_apache_rhs_mfd@@YGXXZ PROC			; select_next_apache_rhs_mfd, COMDAT

; 12570: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12571: 	if (get_local_entity_int_value (get_pilot_entity (), INT_TYPE_CREW_ROLE) == CREW_ROLE_PILOT)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_entity@@3PAUENTITY@@A, 0 ; pilot_entity
  00010	74 0c		 je	 SHORT $LN5@select_nex
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d bc	 mov	 DWORD PTR tv69[ebp], ecx
  0001c	eb 1d		 jmp	 SHORT $LN6@select_nex
$LN5@select_nex:
  0001e	68 1b 31 00 00	 push	 12571			; 0000311bH
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00028	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00034	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN6@select_nex:
  0003b	b8 01 00 00 00	 mov	 eax, 1
  00040	85 c0		 test	 eax, eax
  00042	74 09		 je	 SHORT $LN7@select_nex
  00044	c7 45 b8 23 00
	00 00		 mov	 DWORD PTR tv76[ebp], 35	; 00000023H
  0004b	eb 1d		 jmp	 SHORT $LN8@select_nex
$LN7@select_nex:
  0004d	68 1b 31 00 00	 push	 12571			; 0000311bH
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00063	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN8@select_nex:
  0006a	6a 23		 push	 35			; 00000023H
  0006c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00072	52		 push	 edx
  00073	69 45 bc 5c 04
	00 00		 imul	 eax, DWORD PTR tv69[ebp], 1116
  0007a	8b 4d b8	 mov	 ecx, DWORD PTR tv76[ebp]
  0007d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00084	ff d2		 call	 edx
  00086	85 c0		 test	 eax, eax
  00088	75 0b		 jne	 SHORT $LN2@select_nex

; 12572: 		cycle_apache_mfd(TRUE, MFD_LOCATION_PILOT_RHS);

  0008a	6a 01		 push	 1
  0008c	6a 01		 push	 1
  0008e	e8 00 00 00 00	 call	 ?cycle_apache_mfd@@YGXHW4MFD_LOCATIONS@@@Z ; cycle_apache_mfd

; 12573: 	else

  00093	eb 09		 jmp	 SHORT $LN1@select_nex
$LN2@select_nex:

; 12574: 		cycle_apache_mfd(TRUE, MFD_LOCATION_CPG_RHS);

  00095	6a 03		 push	 3
  00097	6a 01		 push	 1
  00099	e8 00 00 00 00	 call	 ?cycle_apache_mfd@@YGXHW4MFD_LOCATIONS@@@Z ; cycle_apache_mfd
$LN1@select_nex:

; 12575: }

  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
?select_next_apache_rhs_mfd@@YGXXZ ENDP			; select_next_apache_rhs_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?select_previous_apache_lhs_mfd@@YGXXZ
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv69 = -68						; size = 4
?select_previous_apache_lhs_mfd@@YGXXZ PROC		; select_previous_apache_lhs_mfd, COMDAT

; 12562: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12563: 	if (get_local_entity_int_value (get_pilot_entity (), INT_TYPE_CREW_ROLE) == CREW_ROLE_PILOT)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_entity@@3PAUENTITY@@A, 0 ; pilot_entity
  00010	74 0c		 je	 SHORT $LN5@select_pre
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d bc	 mov	 DWORD PTR tv69[ebp], ecx
  0001c	eb 1d		 jmp	 SHORT $LN6@select_pre
$LN5@select_pre:
  0001e	68 13 31 00 00	 push	 12563			; 00003113H
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00028	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00034	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN6@select_pre:
  0003b	b8 01 00 00 00	 mov	 eax, 1
  00040	85 c0		 test	 eax, eax
  00042	74 09		 je	 SHORT $LN7@select_pre
  00044	c7 45 b8 23 00
	00 00		 mov	 DWORD PTR tv76[ebp], 35	; 00000023H
  0004b	eb 1d		 jmp	 SHORT $LN8@select_pre
$LN7@select_pre:
  0004d	68 13 31 00 00	 push	 12563			; 00003113H
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00063	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN8@select_pre:
  0006a	6a 23		 push	 35			; 00000023H
  0006c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00072	52		 push	 edx
  00073	69 45 bc 5c 04
	00 00		 imul	 eax, DWORD PTR tv69[ebp], 1116
  0007a	8b 4d b8	 mov	 ecx, DWORD PTR tv76[ebp]
  0007d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00084	ff d2		 call	 edx
  00086	85 c0		 test	 eax, eax
  00088	75 0b		 jne	 SHORT $LN2@select_pre

; 12564: 		cycle_apache_mfd(FALSE, MFD_LOCATION_PILOT_LHS);

  0008a	6a 00		 push	 0
  0008c	6a 00		 push	 0
  0008e	e8 00 00 00 00	 call	 ?cycle_apache_mfd@@YGXHW4MFD_LOCATIONS@@@Z ; cycle_apache_mfd

; 12565: 	else

  00093	eb 09		 jmp	 SHORT $LN1@select_pre
$LN2@select_pre:

; 12566: 		cycle_apache_mfd(FALSE, MFD_LOCATION_CPG_LHS);

  00095	6a 02		 push	 2
  00097	6a 00		 push	 0
  00099	e8 00 00 00 00	 call	 ?cycle_apache_mfd@@YGXHW4MFD_LOCATIONS@@@Z ; cycle_apache_mfd
$LN1@select_pre:

; 12567: }

  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
?select_previous_apache_lhs_mfd@@YGXXZ ENDP		; select_previous_apache_lhs_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?select_next_apache_lhs_mfd@@YGXXZ
_TEXT	SEGMENT
tv76 = -72						; size = 4
tv69 = -68						; size = 4
?select_next_apache_lhs_mfd@@YGXXZ PROC			; select_next_apache_lhs_mfd, COMDAT

; 12554: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12555: 	if (get_local_entity_int_value (get_pilot_entity (), INT_TYPE_CREW_ROLE) == CREW_ROLE_PILOT)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_entity@@3PAUENTITY@@A, 0 ; pilot_entity
  00010	74 0c		 je	 SHORT $LN5@select_nex
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d bc	 mov	 DWORD PTR tv69[ebp], ecx
  0001c	eb 1d		 jmp	 SHORT $LN6@select_nex
$LN5@select_nex:
  0001e	68 0b 31 00 00	 push	 12555			; 0000310bH
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00028	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00034	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN6@select_nex:
  0003b	b8 01 00 00 00	 mov	 eax, 1
  00040	85 c0		 test	 eax, eax
  00042	74 09		 je	 SHORT $LN7@select_nex
  00044	c7 45 b8 23 00
	00 00		 mov	 DWORD PTR tv76[ebp], 35	; 00000023H
  0004b	eb 1d		 jmp	 SHORT $LN8@select_nex
$LN7@select_nex:
  0004d	68 0b 31 00 00	 push	 12555			; 0000310bH
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00063	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN8@select_nex:
  0006a	6a 23		 push	 35			; 00000023H
  0006c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00072	52		 push	 edx
  00073	69 45 bc 5c 04
	00 00		 imul	 eax, DWORD PTR tv69[ebp], 1116
  0007a	8b 4d b8	 mov	 ecx, DWORD PTR tv76[ebp]
  0007d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00084	ff d2		 call	 edx
  00086	85 c0		 test	 eax, eax
  00088	75 0b		 jne	 SHORT $LN2@select_nex

; 12556: 		cycle_apache_mfd(TRUE, MFD_LOCATION_PILOT_LHS);

  0008a	6a 00		 push	 0
  0008c	6a 01		 push	 1
  0008e	e8 00 00 00 00	 call	 ?cycle_apache_mfd@@YGXHW4MFD_LOCATIONS@@@Z ; cycle_apache_mfd

; 12557: 	else

  00093	eb 09		 jmp	 SHORT $LN1@select_nex
$LN2@select_nex:

; 12558: 		cycle_apache_mfd(TRUE, MFD_LOCATION_CPG_LHS);

  00095	6a 02		 push	 2
  00097	6a 01		 push	 1
  00099	e8 00 00 00 00	 call	 ?cycle_apache_mfd@@YGXHW4MFD_LOCATIONS@@@Z ; cycle_apache_mfd
$LN1@select_nex:

; 12559: }

  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
?select_next_apache_lhs_mfd@@YGXXZ ENDP			; select_next_apache_lhs_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?select_next_tsd_underlay_level@@YGXXZ
_TEXT	SEGMENT
tv76 = -76						; size = 4
tv89 = -72						; size = 4
tv69 = -72						; size = 4
_tads_active$1 = -4					; size = 4
?select_next_tsd_underlay_level@@YGXXZ PROC		; select_next_tsd_underlay_level, COMDAT

; 12294: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12295: 	if (get_local_entity_int_value (get_pilot_entity (), INT_TYPE_CREW_ROLE) == CREW_ROLE_PILOT)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_entity@@3PAUENTITY@@A, 0 ; pilot_entity
  00010	74 0c		 je	 SHORT $LN11@select_nex
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d b8	 mov	 DWORD PTR tv69[ebp], ecx
  0001c	eb 1d		 jmp	 SHORT $LN12@select_nex
$LN11@select_nex:
  0001e	68 07 30 00 00	 push	 12295			; 00003007H
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00028	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00034	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN12@select_nex:
  0003b	b8 01 00 00 00	 mov	 eax, 1
  00040	85 c0		 test	 eax, eax
  00042	74 09		 je	 SHORT $LN13@select_nex
  00044	c7 45 b4 23 00
	00 00		 mov	 DWORD PTR tv76[ebp], 35	; 00000023H
  0004b	eb 1d		 jmp	 SHORT $LN14@select_nex
$LN13@select_nex:
  0004d	68 07 30 00 00	 push	 12295			; 00003007H
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00063	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN14@select_nex:
  0006a	6a 23		 push	 35			; 00000023H
  0006c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00072	52		 push	 edx
  00073	69 45 b8 5c 04
	00 00		 imul	 eax, DWORD PTR tv69[ebp], 1116
  0007a	8b 4d b4	 mov	 ecx, DWORD PTR tv76[ebp]
  0007d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00084	ff d2		 call	 edx
  00086	85 c0		 test	 eax, eax
  00088	0f 85 88 00 00
	00		 jne	 $LN2@select_nex

; 12296: 	{
; 12297: 		int tads_active = (lhs_mfd_mode == MFD_MODE_DVO
; 12298: 			 || lhs_mfd_mode == MFD_MODE_DTV
; 12299: 			 || lhs_mfd_mode == MFD_MODE_FLIR
; 12300: 			 || rhs_mfd_mode == MFD_MODE_DVO
; 12301: 			 || rhs_mfd_mode == MFD_MODE_DTV
; 12302: 			 || rhs_mfd_mode == MFD_MODE_FLIR);

  0008e	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 6
  00095	74 36		 je	 SHORT $LN15@select_nex
  00097	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 5
  0009e	74 2d		 je	 SHORT $LN15@select_nex
  000a0	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 4
  000a7	74 24		 je	 SHORT $LN15@select_nex
  000a9	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 6
  000b0	74 1b		 je	 SHORT $LN15@select_nex
  000b2	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 5
  000b9	74 12		 je	 SHORT $LN15@select_nex
  000bb	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 4
  000c2	74 09		 je	 SHORT $LN15@select_nex
  000c4	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv89[ebp], 0
  000cb	eb 07		 jmp	 SHORT $LN16@select_nex
$LN15@select_nex:
  000cd	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv89[ebp], 1
$LN16@select_nex:
  000d4	8b 45 b8	 mov	 eax, DWORD PTR tv89[ebp]
  000d7	89 45 fc	 mov	 DWORD PTR _tads_active$1[ebp], eax

; 12303: 
; 12304: 		if (pilot_tsd_underlay == TSD_UNDERLAY_NONE)

  000da	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 0
  000e1	75 0c		 jne	 SHORT $LN4@select_nex

; 12305: 			pilot_tsd_underlay = TSD_UNDERLAY_MAP;

  000e3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?pilot_tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 1
  000ed	eb 25		 jmp	 SHORT $LN5@select_nex
$LN4@select_nex:

; 12306: 		else if (pilot_tsd_underlay == TSD_UNDERLAY_MAP && !tads_active)

  000ef	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?pilot_tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 1
  000f6	75 12		 jne	 SHORT $LN6@select_nex
  000f8	83 7d fc 00	 cmp	 DWORD PTR _tads_active$1[ebp], 0
  000fc	75 0c		 jne	 SHORT $LN6@select_nex

; 12307: 			pilot_tsd_underlay = TSD_UNDERLAY_TADS;

  000fe	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?pilot_tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 2

; 12308: 		else

  00108	eb 0a		 jmp	 SHORT $LN5@select_nex
$LN6@select_nex:

; 12309: 			pilot_tsd_underlay = TSD_UNDERLAY_NONE;

  0010a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pilot_tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 0
$LN5@select_nex:

; 12310: 	}
; 12311: 	else  // co-pilot.  doesn't have tads underlay (co-pilot can just use ORT for TADS instead)

  00114	eb 1f		 jmp	 SHORT $LN1@select_nex
$LN2@select_nex:

; 12312: 	{
; 12313: 		if (cpg_tsd_underlay == TSD_UNDERLAY_NONE)

  00116	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?cpg_tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 0
  0011d	75 0c		 jne	 SHORT $LN8@select_nex

; 12314: 			cpg_tsd_underlay = TSD_UNDERLAY_MAP;

  0011f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?cpg_tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 1

; 12315: 		else

  00129	eb 0a		 jmp	 SHORT $LN1@select_nex
$LN8@select_nex:

; 12316: 			cpg_tsd_underlay = TSD_UNDERLAY_NONE;

  0012b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?cpg_tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 0
$LN1@select_nex:

; 12317: 	}
; 12318: }

  00135	5f		 pop	 edi
  00136	5e		 pop	 esi
  00137	5b		 pop	 ebx
  00138	8b e5		 mov	 esp, ebp
  0013a	5d		 pop	 ebp
  0013b	c3		 ret	 0
?select_next_tsd_underlay_level@@YGXXZ ENDP		; select_next_tsd_underlay_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?select_previous_apache_tsd_declutter_level@@YGXXZ
_TEXT	SEGMENT
tv76 = -76						; size = 4
tv69 = -72						; size = 4
_tsd_declutter_level$ = -4				; size = 4
?select_previous_apache_tsd_declutter_level@@YGXXZ PROC	; select_previous_apache_tsd_declutter_level, COMDAT

; 12273: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12274: 	tsd_declutter_levels *tsd_declutter_level;
; 12275: 
; 12276: 	if (get_local_entity_int_value (get_pilot_entity (), INT_TYPE_CREW_ROLE) == CREW_ROLE_PILOT)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_entity@@3PAUENTITY@@A, 0 ; pilot_entity
  00010	74 0c		 je	 SHORT $LN9@select_pre
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d b8	 mov	 DWORD PTR tv69[ebp], ecx
  0001c	eb 1d		 jmp	 SHORT $LN10@select_pre
$LN9@select_pre:
  0001e	68 f4 2f 00 00	 push	 12276			; 00002ff4H
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00028	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00034	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN10@select_pre:
  0003b	b8 01 00 00 00	 mov	 eax, 1
  00040	85 c0		 test	 eax, eax
  00042	74 09		 je	 SHORT $LN11@select_pre
  00044	c7 45 b4 23 00
	00 00		 mov	 DWORD PTR tv76[ebp], 35	; 00000023H
  0004b	eb 1d		 jmp	 SHORT $LN12@select_pre
$LN11@select_pre:
  0004d	68 f4 2f 00 00	 push	 12276			; 00002ff4H
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00063	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN12@select_pre:
  0006a	6a 23		 push	 35			; 00000023H
  0006c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00072	52		 push	 edx
  00073	69 45 b8 5c 04
	00 00		 imul	 eax, DWORD PTR tv69[ebp], 1116
  0007a	8b 4d b4	 mov	 ecx, DWORD PTR tv76[ebp]
  0007d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00084	ff d2		 call	 edx
  00086	85 c0		 test	 eax, eax
  00088	75 09		 jne	 SHORT $LN2@select_pre

; 12277: 		tsd_declutter_level = &pilot_tsd_declutter_level;

  0008a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _tsd_declutter_level$[ebp], OFFSET ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A

; 12278: 	else

  00091	eb 07		 jmp	 SHORT $LN3@select_pre
$LN2@select_pre:

; 12279: 		tsd_declutter_level = &cpg_tsd_declutter_level;

  00093	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _tsd_declutter_level$[ebp], OFFSET ?cpg_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A
$LN3@select_pre:

; 12280: 
; 12281: 	if (*tsd_declutter_level == TSD_DECLUTTER_LEVEL_ALL)

  0009a	8b 45 fc	 mov	 eax, DWORD PTR _tsd_declutter_level$[ebp]
  0009d	83 38 00	 cmp	 DWORD PTR [eax], 0
  000a0	75 0b		 jne	 SHORT $LN4@select_pre

; 12282: 		*tsd_declutter_level = TSD_DECLUTTER_LEVEL_NAVIGATION;

  000a2	8b 45 fc	 mov	 eax, DWORD PTR _tsd_declutter_level$[ebp]
  000a5	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
  000ab	eb 1c		 jmp	 SHORT $LN1@select_pre
$LN4@select_pre:

; 12283: 	else if (*tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  000ad	8b 45 fc	 mov	 eax, DWORD PTR _tsd_declutter_level$[ebp]
  000b0	83 38 01	 cmp	 DWORD PTR [eax], 1
  000b3	75 0b		 jne	 SHORT $LN6@select_pre

; 12284: 		*tsd_declutter_level = TSD_DECLUTTER_LEVEL_ALL;

  000b5	8b 45 fc	 mov	 eax, DWORD PTR _tsd_declutter_level$[ebp]
  000b8	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 12285: 	else

  000be	eb 09		 jmp	 SHORT $LN1@select_pre
$LN6@select_pre:

; 12286: 		*tsd_declutter_level = TSD_DECLUTTER_LEVEL_TARGET;

  000c0	8b 45 fc	 mov	 eax, DWORD PTR _tsd_declutter_level$[ebp]
  000c3	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
$LN1@select_pre:

; 12287: }

  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
?select_previous_apache_tsd_declutter_level@@YGXXZ ENDP	; select_previous_apache_tsd_declutter_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?select_next_apache_tsd_declutter_level@@YGXXZ
_TEXT	SEGMENT
tv76 = -76						; size = 4
tv69 = -72						; size = 4
_tsd_declutter_level$ = -4				; size = 4
?select_next_apache_tsd_declutter_level@@YGXXZ PROC	; select_next_apache_tsd_declutter_level, COMDAT

; 12252: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12253: 	tsd_declutter_levels *tsd_declutter_level;
; 12254: 
; 12255: 	if (get_local_entity_int_value (get_pilot_entity (), INT_TYPE_CREW_ROLE) == CREW_ROLE_PILOT)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_entity@@3PAUENTITY@@A, 0 ; pilot_entity
  00010	74 0c		 je	 SHORT $LN9@select_nex
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d b8	 mov	 DWORD PTR tv69[ebp], ecx
  0001c	eb 1d		 jmp	 SHORT $LN10@select_nex
$LN9@select_nex:
  0001e	68 df 2f 00 00	 push	 12255			; 00002fdfH
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00028	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00034	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN10@select_nex:
  0003b	b8 01 00 00 00	 mov	 eax, 1
  00040	85 c0		 test	 eax, eax
  00042	74 09		 je	 SHORT $LN11@select_nex
  00044	c7 45 b4 23 00
	00 00		 mov	 DWORD PTR tv76[ebp], 35	; 00000023H
  0004b	eb 1d		 jmp	 SHORT $LN12@select_nex
$LN11@select_nex:
  0004d	68 df 2f 00 00	 push	 12255			; 00002fdfH
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00063	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN12@select_nex:
  0006a	6a 23		 push	 35			; 00000023H
  0006c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00072	52		 push	 edx
  00073	69 45 b8 5c 04
	00 00		 imul	 eax, DWORD PTR tv69[ebp], 1116
  0007a	8b 4d b4	 mov	 ecx, DWORD PTR tv76[ebp]
  0007d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00084	ff d2		 call	 edx
  00086	85 c0		 test	 eax, eax
  00088	75 09		 jne	 SHORT $LN2@select_nex

; 12256: 		tsd_declutter_level = &pilot_tsd_declutter_level;

  0008a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _tsd_declutter_level$[ebp], OFFSET ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A

; 12257: 	else

  00091	eb 07		 jmp	 SHORT $LN3@select_nex
$LN2@select_nex:

; 12258: 		tsd_declutter_level = &cpg_tsd_declutter_level;

  00093	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _tsd_declutter_level$[ebp], OFFSET ?cpg_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A
$LN3@select_nex:

; 12259: 
; 12260: 	if (*tsd_declutter_level == TSD_DECLUTTER_LEVEL_ALL)

  0009a	8b 45 fc	 mov	 eax, DWORD PTR _tsd_declutter_level$[ebp]
  0009d	83 38 00	 cmp	 DWORD PTR [eax], 0
  000a0	75 0b		 jne	 SHORT $LN4@select_nex

; 12261: 		*tsd_declutter_level = TSD_DECLUTTER_LEVEL_TARGET;

  000a2	8b 45 fc	 mov	 eax, DWORD PTR _tsd_declutter_level$[ebp]
  000a5	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
  000ab	eb 1c		 jmp	 SHORT $LN1@select_nex
$LN4@select_nex:

; 12262: 	else if (*tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  000ad	8b 45 fc	 mov	 eax, DWORD PTR _tsd_declutter_level$[ebp]
  000b0	83 38 01	 cmp	 DWORD PTR [eax], 1
  000b3	75 0b		 jne	 SHORT $LN6@select_nex

; 12263: 		*tsd_declutter_level = TSD_DECLUTTER_LEVEL_NAVIGATION;

  000b5	8b 45 fc	 mov	 eax, DWORD PTR _tsd_declutter_level$[ebp]
  000b8	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2

; 12264: 	else

  000be	eb 09		 jmp	 SHORT $LN1@select_nex
$LN6@select_nex:

; 12265: 		*tsd_declutter_level = TSD_DECLUTTER_LEVEL_ALL;

  000c0	8b 45 fc	 mov	 eax, DWORD PTR _tsd_declutter_level$[ebp]
  000c3	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN1@select_nex:

; 12266: }

  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
?select_next_apache_tsd_declutter_level@@YGXXZ ENDP	; select_next_apache_tsd_declutter_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?select_previous_apache_tsd_ase_range@@YGXXZ
_TEXT	SEGMENT
tv76 = -76						; size = 4
tv69 = -72						; size = 4
_tsd_ase_range$ = -4					; size = 4
?select_previous_apache_tsd_ase_range@@YGXXZ PROC	; select_previous_apache_tsd_ase_range, COMDAT

; 12231: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12232: 	float *tsd_ase_range;
; 12233: 
; 12234: 	if (get_local_entity_int_value (get_pilot_entity (), INT_TYPE_CREW_ROLE) == CREW_ROLE_PILOT)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_entity@@3PAUENTITY@@A, 0 ; pilot_entity
  00010	74 0c		 je	 SHORT $LN10@select_pre
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d b8	 mov	 DWORD PTR tv69[ebp], ecx
  0001c	eb 1d		 jmp	 SHORT $LN11@select_pre
$LN10@select_pre:
  0001e	68 ca 2f 00 00	 push	 12234			; 00002fcaH
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00028	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00034	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN11@select_pre:
  0003b	b8 01 00 00 00	 mov	 eax, 1
  00040	85 c0		 test	 eax, eax
  00042	74 09		 je	 SHORT $LN12@select_pre
  00044	c7 45 b4 23 00
	00 00		 mov	 DWORD PTR tv76[ebp], 35	; 00000023H
  0004b	eb 1d		 jmp	 SHORT $LN13@select_pre
$LN12@select_pre:
  0004d	68 ca 2f 00 00	 push	 12234			; 00002fcaH
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00063	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN13@select_pre:
  0006a	6a 23		 push	 35			; 00000023H
  0006c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00072	52		 push	 edx
  00073	69 45 b8 5c 04
	00 00		 imul	 eax, DWORD PTR tv69[ebp], 1116
  0007a	8b 4d b4	 mov	 ecx, DWORD PTR tv76[ebp]
  0007d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00084	ff d2		 call	 edx
  00086	85 c0		 test	 eax, eax
  00088	75 09		 jne	 SHORT $LN2@select_pre

; 12235: 		tsd_ase_range = &pilot_tsd_ase_range;

  0008a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _tsd_ase_range$[ebp], OFFSET ?pilot_tsd_ase_range@@3MA

; 12236: 	else

  00091	eb 07		 jmp	 SHORT $LN3@select_pre
$LN2@select_pre:

; 12237: 		tsd_ase_range = &cpg_tsd_ase_range;

  00093	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _tsd_ase_range$[ebp], OFFSET ?cpg_tsd_ase_range@@3MA
$LN3@select_pre:

; 12238: 
; 12239: 	if (*tsd_ase_range == TSD_ASE_RANGE_25000)

  0009a	8b 45 fc	 mov	 eax, DWORD PTR _tsd_ase_range$[ebp]
  0009d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000a1	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  000a8	9f		 lahf
  000a9	f6 c4 44	 test	 ah, 68			; 00000044H
  000ac	7a 11		 jp	 SHORT $LN4@select_pre

; 12240: 		*tsd_ase_range = TSD_ASE_RANGE_10000;

  000ae	8b 45 fc	 mov	 eax, DWORD PTR _tsd_ase_range$[ebp]
  000b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
  000b9	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  000bd	eb 48		 jmp	 SHORT $LN8@select_pre
$LN4@select_pre:

; 12241: 	else if (*tsd_ase_range == TSD_ASE_RANGE_10000)

  000bf	8b 45 fc	 mov	 eax, DWORD PTR _tsd_ase_range$[ebp]
  000c2	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000c6	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  000cd	9f		 lahf
  000ce	f6 c4 44	 test	 ah, 68			; 00000044H
  000d1	7a 11		 jp	 SHORT $LN6@select_pre

; 12242: 		*tsd_ase_range = TSD_ASE_RANGE_5000;

  000d3	8b 45 fc	 mov	 eax, DWORD PTR _tsd_ase_range$[ebp]
  000d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  000de	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  000e2	eb 23		 jmp	 SHORT $LN8@select_pre
$LN6@select_pre:

; 12243: 	else if (*tsd_ase_range == TSD_ASE_RANGE_5000)

  000e4	8b 45 fc	 mov	 eax, DWORD PTR _tsd_ase_range$[ebp]
  000e7	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000eb	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  000f2	9f		 lahf
  000f3	f6 c4 44	 test	 ah, 68			; 00000044H
  000f6	7a 0f		 jp	 SHORT $LN8@select_pre

; 12244: 		*tsd_ase_range = TSD_ASE_RANGE_2000;

  000f8	8b 45 fc	 mov	 eax, DWORD PTR _tsd_ase_range$[ebp]
  000fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44fa0000
  00103	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
$LN8@select_pre:

; 12245: }

  00107	5f		 pop	 edi
  00108	5e		 pop	 esi
  00109	5b		 pop	 ebx
  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c3		 ret	 0
?select_previous_apache_tsd_ase_range@@YGXXZ ENDP	; select_previous_apache_tsd_ase_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?select_next_apache_tsd_ase_range@@YGXXZ
_TEXT	SEGMENT
tv76 = -76						; size = 4
tv69 = -72						; size = 4
_tsd_ase_range$ = -4					; size = 4
?select_next_apache_tsd_ase_range@@YGXXZ PROC		; select_next_apache_tsd_ase_range, COMDAT

; 12210: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12211: 	float *tsd_ase_range;
; 12212: 
; 12213: 	if (get_local_entity_int_value (get_pilot_entity (), INT_TYPE_CREW_ROLE) == CREW_ROLE_PILOT)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_entity@@3PAUENTITY@@A, 0 ; pilot_entity
  00010	74 0c		 je	 SHORT $LN10@select_nex
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d b8	 mov	 DWORD PTR tv69[ebp], ecx
  0001c	eb 1d		 jmp	 SHORT $LN11@select_nex
$LN10@select_nex:
  0001e	68 b5 2f 00 00	 push	 12213			; 00002fb5H
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00028	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00034	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN11@select_nex:
  0003b	b8 01 00 00 00	 mov	 eax, 1
  00040	85 c0		 test	 eax, eax
  00042	74 09		 je	 SHORT $LN12@select_nex
  00044	c7 45 b4 23 00
	00 00		 mov	 DWORD PTR tv76[ebp], 35	; 00000023H
  0004b	eb 1d		 jmp	 SHORT $LN13@select_nex
$LN12@select_nex:
  0004d	68 b5 2f 00 00	 push	 12213			; 00002fb5H
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00063	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN13@select_nex:
  0006a	6a 23		 push	 35			; 00000023H
  0006c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00072	52		 push	 edx
  00073	69 45 b8 5c 04
	00 00		 imul	 eax, DWORD PTR tv69[ebp], 1116
  0007a	8b 4d b4	 mov	 ecx, DWORD PTR tv76[ebp]
  0007d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00084	ff d2		 call	 edx
  00086	85 c0		 test	 eax, eax
  00088	75 09		 jne	 SHORT $LN2@select_nex

; 12214: 		tsd_ase_range = &pilot_tsd_ase_range;

  0008a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _tsd_ase_range$[ebp], OFFSET ?pilot_tsd_ase_range@@3MA

; 12215: 	else

  00091	eb 07		 jmp	 SHORT $LN3@select_nex
$LN2@select_nex:

; 12216: 		tsd_ase_range = &cpg_tsd_ase_range;

  00093	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _tsd_ase_range$[ebp], OFFSET ?cpg_tsd_ase_range@@3MA
$LN3@select_nex:

; 12217: 
; 12218: 	if (*tsd_ase_range == TSD_ASE_RANGE_2000)

  0009a	8b 45 fc	 mov	 eax, DWORD PTR _tsd_ase_range$[ebp]
  0009d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000a1	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  000a8	9f		 lahf
  000a9	f6 c4 44	 test	 ah, 68			; 00000044H
  000ac	7a 11		 jp	 SHORT $LN4@select_nex

; 12219: 		*tsd_ase_range = TSD_ASE_RANGE_5000;

  000ae	8b 45 fc	 mov	 eax, DWORD PTR _tsd_ase_range$[ebp]
  000b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  000b9	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  000bd	eb 48		 jmp	 SHORT $LN8@select_nex
$LN4@select_nex:

; 12220: 	else if (*tsd_ase_range == TSD_ASE_RANGE_5000)

  000bf	8b 45 fc	 mov	 eax, DWORD PTR _tsd_ase_range$[ebp]
  000c2	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000c6	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  000cd	9f		 lahf
  000ce	f6 c4 44	 test	 ah, 68			; 00000044H
  000d1	7a 11		 jp	 SHORT $LN6@select_nex

; 12221: 		*tsd_ase_range = TSD_ASE_RANGE_10000;

  000d3	8b 45 fc	 mov	 eax, DWORD PTR _tsd_ase_range$[ebp]
  000d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
  000de	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  000e2	eb 23		 jmp	 SHORT $LN8@select_nex
$LN6@select_nex:

; 12222: 	else if (*tsd_ase_range == TSD_ASE_RANGE_10000)

  000e4	8b 45 fc	 mov	 eax, DWORD PTR _tsd_ase_range$[ebp]
  000e7	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000eb	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  000f2	9f		 lahf
  000f3	f6 c4 44	 test	 ah, 68			; 00000044H
  000f6	7a 0f		 jp	 SHORT $LN8@select_nex

; 12223: 		*tsd_ase_range = TSD_ASE_RANGE_25000;

  000f8	8b 45 fc	 mov	 eax, DWORD PTR _tsd_ase_range$[ebp]
  000fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@46c35000
  00103	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
$LN8@select_nex:

; 12224: }

  00107	5f		 pop	 edi
  00108	5e		 pop	 esi
  00109	5b		 pop	 ebx
  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c3		 ret	 0
?select_next_apache_tsd_ase_range@@YGXXZ ENDP		; select_next_apache_tsd_ase_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_overlaid_apache_mfd@@YGXMMMW4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv188 = -388						; size = 4
tv95 = -388						; size = 4
_specular$1 = -320					; size = 4
_colour$2 = -316					; size = 4
_quad$3 = -312						; size = 256
_org_offset$4 = -56					; size = 4
_scaley$5 = -52						; size = 4
_scalex$6 = -48						; size = 4
_mfd_screen_y_max$ = -44				; size = 4
_mfd_screen_x_max$ = -40				; size = 4
_mfd_screen_y_min$ = -36				; size = 4
_mfd_screen_x_min$ = -32				; size = 4
_mfd_screen_y_org$ = -28				; size = 4
_mfd_screen_x_org$ = -24				; size = 4
_mfd_screen_half_size$ = -20				; size = 4
_mfd_screen_size$ = -16					; size = 4
_texture_index$ = -12					; size = 4
_mfd_texture_screen$ = -8				; size = 4
_mfd_mode$ = -4						; size = 4
_x_org$ = 8						; size = 4
_y_org$ = 12						; size = 4
_size$ = 16						; size = 4
_location$ = 20						; size = 4
?draw_overlaid_apache_mfd@@YGXMMMW4MFD_LOCATIONS@@@Z PROC ; draw_overlaid_apache_mfd, COMDAT

; 11595: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 01 00
	00		 sub	 esp, 388		; 00000184H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 11596: 	mfd_modes
; 11597: 		*mfd_mode;
; 11598: 
; 11599: 	screen
; 11600: 		*mfd_texture_screen;
; 11601: 
; 11602: 	texture_index_numbers
; 11603: 		texture_index;
; 11604: 
; 11605: 	float
; 11606: 		mfd_screen_size,
; 11607: 		mfd_screen_half_size,
; 11608: 		mfd_screen_x_org,
; 11609: 		mfd_screen_y_org,
; 11610: 		mfd_screen_x_min,
; 11611: 		mfd_screen_y_min,
; 11612: 		mfd_screen_x_max,
; 11613: 		mfd_screen_y_max;
; 11614: 
; 11615: 	ASSERT ((location == MFD_LOCATION_PILOT_LHS) || (location == MFD_LOCATION_PILOT_RHS)

  0000c	83 7d 14 00	 cmp	 DWORD PTR _location$[ebp], 0
  00010	74 2a		 je	 SHORT $LN4@draw_overl
  00012	83 7d 14 01	 cmp	 DWORD PTR _location$[ebp], 1
  00016	74 24		 je	 SHORT $LN4@draw_overl
  00018	83 7d 14 02	 cmp	 DWORD PTR _location$[ebp], 2
  0001c	74 1e		 je	 SHORT $LN4@draw_overl
  0001e	83 7d 14 03	 cmp	 DWORD PTR _location$[ebp], 3
  00022	74 18		 je	 SHORT $LN4@draw_overl
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_apache_mfd@@YGXMMMW4MFD_LOCATIONS@@@Z@4JA
  00029	83 c0 15	 add	 eax, 21			; 00000015H
  0002c	50		 push	 eax
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0JJ@KMOEPALN@?$CIlocation?5?$DN?$DN?5MFD_LOCATION_PILOT@
  00037	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_overl:

; 11616: 			|| (location == MFD_LOCATION_CPG_LHS) || (location == MFD_LOCATION_CPG_RHS));
; 11617: 
; 11618: 	update_pointer_position();

  0003c	e8 00 00 00 00	 call	 ?update_pointer_position@@YGXXZ ; update_pointer_position

; 11619: 
; 11620: 	if (location == MFD_LOCATION_LHS)

  00041	83 7d 14 00	 cmp	 DWORD PTR _location$[ebp], 0
  00045	75 18		 jne	 SHORT $LN5@draw_overl

; 11621: 	{
; 11622: 		mfd_mode = &lhs_mfd_mode;

  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], OFFSET ?lhs_mfd_mode@@3W4MFD_MODES@@A

; 11623: 
; 11624: 		mfd_texture_screen = lhs_overlaid_mfd_texture_screen;

  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lhs_overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  00053	89 45 f8	 mov	 DWORD PTR _mfd_texture_screen$[ebp], eax

; 11625: 
; 11626: 		texture_index = LHS_OVERLAID_MFD_TEXTURE_INDEX;

  00056	c7 45 f4 54 06
	00 00		 mov	 DWORD PTR _texture_index$[ebp], 1620 ; 00000654H

; 11627: 	}
; 11628: 	else

  0005d	eb 16		 jmp	 SHORT $LN6@draw_overl
$LN5@draw_overl:

; 11629: 	{
; 11630: 		mfd_mode = &rhs_mfd_mode;

  0005f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], OFFSET ?rhs_mfd_mode@@3W4MFD_MODES@@A

; 11631: 
; 11632: 		mfd_texture_screen = rhs_overlaid_mfd_texture_screen;

  00066	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rhs_overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  0006b	89 45 f8	 mov	 DWORD PTR _mfd_texture_screen$[ebp], eax

; 11633: 
; 11634: 		texture_index = RHS_OVERLAID_MFD_TEXTURE_INDEX;

  0006e	c7 45 f4 57 06
	00 00		 mov	 DWORD PTR _texture_index$[ebp], 1623 ; 00000657H
$LN6@draw_overl:

; 11635: 	}
; 11636: 
; 11637: 	if (*mfd_mode == MFD_MODE_OFF)

  00075	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00078	83 38 00	 cmp	 DWORD PTR [eax], 0
  0007b	75 05		 jne	 SHORT $LN7@draw_overl

; 11638: 	{
; 11639: 		return;

  0007d	e9 37 10 00 00	 jmp	 $LN1@draw_overl
$LN7@draw_overl:

; 11640: 	}
; 11641: 
; 11642: 	////////////////////////////////////////
; 11643: 	//
; 11644: 	// scale position and size wrt screen resolution
; 11645: 	//
; 11646: 	////////////////////////////////////////
; 11647: 
; 11648: /*	if (get_global_unscaled_displays ())
; 11649: 	{
; 11650: 		float
; 11651: 			org_offset;
; 11652: 
; 11653: 		mfd_screen_size = size;
; 11654: 
; 11655: 		mfd_screen_half_size = mfd_screen_size * 0.5;
; 11656: 
; 11657: 		mfd_screen_x_org = x_org * full_screen_width * (1.0 / 640.0);
; 11658: 		mfd_screen_y_org = y_org * full_screen_height * (1.0 / 480.0);
; 11659: 
; 11660: 		org_offset = ((size * full_screen_width * (1.0 / 640.0)) - size) * 0.5;
; 11661: 
; 11662: 		if (location == MFD_LOCATION_LHS)
; 11663: 		{
; 11664: 			mfd_screen_x_org -= org_offset;
; 11665: 		}
; 11666: 		else
; 11667: 		{
; 11668: 			mfd_screen_x_org += org_offset;
; 11669: 		}
; 11670: 
; 11671: 		mfd_screen_y_org += org_offset;
; 11672: 
; 11673: 		mfd_screen_x_min = mfd_screen_x_org - mfd_screen_half_size;
; 11674: 		mfd_screen_y_min = mfd_screen_y_org - mfd_screen_half_size;
; 11675: 		mfd_screen_x_max = mfd_screen_x_org + mfd_screen_half_size - 0.001;
; 11676: 		mfd_screen_y_max = mfd_screen_y_org + mfd_screen_half_size - 0.001;
; 11677: 	}
; 11678: 	else*/
; 11679: 	{
; 11680: 		float
; 11681: 			scalex,
; 11682: 			scaley,
; 11683: 			org_offset;
; 11684: 
; 11685: 		scalex = full_screen_width * (1.0 / 640.0);

  00082	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  0008a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f5999999999999a
  00092	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00096	f3 0f 11 45 d0	 movss	 DWORD PTR _scalex$6[ebp], xmm0

; 11686: 		scaley = full_screen_height * (1.0 / 480.0);

  0009b	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  000a3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f61111111111111
  000ab	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000af	f3 0f 11 45 cc	 movss	 DWORD PTR _scaley$5[ebp], xmm0

; 11687: 
; 11688: 		mfd_screen_size = size * global_mfd_size * scalex;

  000b4	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _size$[ebp]
  000b9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?global_mfd_size@@3MA
  000c1	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _scalex$6[ebp]
  000c6	f3 0f 11 45 f0	 movss	 DWORD PTR _mfd_screen_size$[ebp], xmm0

; 11689: 		mfd_screen_half_size = mfd_screen_size * 0.5;

  000cb	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _mfd_screen_size$[ebp]
  000d0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  000d8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000dc	f3 0f 11 45 ec	 movss	 DWORD PTR _mfd_screen_half_size$[ebp], xmm0

; 11690: 
; 11691: 		mfd_screen_x_org = x_org * scalex;

  000e1	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_org$[ebp]
  000e6	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _scalex$6[ebp]
  000eb	f3 0f 11 45 e8	 movss	 DWORD PTR _mfd_screen_x_org$[ebp], xmm0

; 11692: 		mfd_screen_y_org = y_org * scaley;

  000f0	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_org$[ebp]
  000f5	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _scaley$5[ebp]
  000fa	f3 0f 11 45 e4	 movss	 DWORD PTR _mfd_screen_y_org$[ebp], xmm0

; 11693: 
; 11694: 		org_offset = size * scalex * 0.5 - mfd_screen_half_size;

  000ff	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _size$[ebp]
  00104	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _scalex$6[ebp]
  00109	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0010d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00115	f3 0f 5a 4d ec	 cvtss2sd xmm1, DWORD PTR _mfd_screen_half_size$[ebp]
  0011a	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0011e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00122	f3 0f 11 45 c8	 movss	 DWORD PTR _org_offset$4[ebp], xmm0

; 11695: 		mfd_screen_x_org += location == MFD_LOCATION_LHS ? -org_offset : org_offset;

  00127	83 7d 14 00	 cmp	 DWORD PTR _location$[ebp], 0
  0012b	75 16		 jne	 SHORT $LN46@draw_overl
  0012d	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _org_offset$4[ebp]
  00132	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00139	f3 0f 11 85 7c
	fe ff ff	 movss	 DWORD PTR tv95[ebp], xmm0
  00141	eb 0d		 jmp	 SHORT $LN47@draw_overl
$LN46@draw_overl:
  00143	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _org_offset$4[ebp]
  00148	f3 0f 11 85 7c
	fe ff ff	 movss	 DWORD PTR tv95[ebp], xmm0
$LN47@draw_overl:
  00150	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _mfd_screen_x_org$[ebp]
  00155	f3 0f 58 85 7c
	fe ff ff	 addss	 xmm0, DWORD PTR tv95[ebp]
  0015d	f3 0f 11 45 e8	 movss	 DWORD PTR _mfd_screen_x_org$[ebp], xmm0

; 11696: 		mfd_screen_y_org += size * scaley * 0.5 - mfd_screen_half_size;

  00162	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _size$[ebp]
  00167	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _scaley$5[ebp]
  0016c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00170	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00178	f3 0f 5a 4d ec	 cvtss2sd xmm1, DWORD PTR _mfd_screen_half_size$[ebp]
  0017d	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00181	f3 0f 5a 4d e4	 cvtss2sd xmm1, DWORD PTR _mfd_screen_y_org$[ebp]
  00186	f2 0f 58 c8	 addsd	 xmm1, xmm0
  0018a	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0018e	f3 0f 11 45 e4	 movss	 DWORD PTR _mfd_screen_y_org$[ebp], xmm0

; 11697: 
; 11698: 		mfd_screen_x_min = mfd_screen_x_org - mfd_screen_half_size;

  00193	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _mfd_screen_x_org$[ebp]
  00198	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _mfd_screen_half_size$[ebp]
  0019d	f3 0f 11 45 e0	 movss	 DWORD PTR _mfd_screen_x_min$[ebp], xmm0

; 11699: 		mfd_screen_y_min = mfd_screen_y_org - mfd_screen_half_size;

  001a2	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _mfd_screen_y_org$[ebp]
  001a7	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _mfd_screen_half_size$[ebp]
  001ac	f3 0f 11 45 dc	 movss	 DWORD PTR _mfd_screen_y_min$[ebp], xmm0

; 11700: 		mfd_screen_x_max = mfd_screen_x_org + mfd_screen_half_size - 0.001;

  001b1	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _mfd_screen_x_org$[ebp]
  001b6	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _mfd_screen_half_size$[ebp]
  001bb	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001bf	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001c7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001cb	f3 0f 11 45 d8	 movss	 DWORD PTR _mfd_screen_x_max$[ebp], xmm0

; 11701: 		mfd_screen_y_max = mfd_screen_y_org + mfd_screen_half_size - 0.001;

  001d0	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _mfd_screen_y_org$[ebp]
  001d5	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _mfd_screen_half_size$[ebp]
  001da	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001de	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001e6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001ea	f3 0f 11 45 d4	 movss	 DWORD PTR _mfd_screen_y_max$[ebp], xmm0

; 11702: 	}
; 11703: 
; 11704: 	//
; 11705: 	// translate & scale values (EO 3D display does not match texture)
; 11706: 	//
; 11707: 
; 11708: 	i_translate_3d = mfd_screen_x_min;

  001ef	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  001f4	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?i_translate_3d@@3MA, xmm0

; 11709: 	j_translate_3d = mfd_screen_y_min;

  001fc	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00201	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?j_translate_3d@@3MA, xmm0

; 11710: 
; 11711: 	i_scale_3d = mfd_texture_size / mfd_screen_size;

  00209	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_texture_size@@3HA
  00211	f3 0f 5e 45 f0	 divss	 xmm0, DWORD PTR _mfd_screen_size$[ebp]
  00216	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?i_scale_3d@@3MA, xmm0

; 11712: 	j_scale_3d = mfd_texture_size / mfd_screen_size;

  0021e	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_texture_size@@3HA
  00226	f3 0f 5e 45 f0	 divss	 xmm0, DWORD PTR _mfd_screen_size$[ebp]
  0022b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?j_scale_3d@@3MA, xmm0

; 11713: 
; 11714: 	////////////////////////////////////////
; 11715: 	//
; 11716: 	// set up MFD 2D environment
; 11717: 	//
; 11718: 	////////////////////////////////////////
; 11719: 
; 11720: 	set_2d_active_environment (mfd_env);

  00233	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00238	50		 push	 eax
  00239	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 11721: 
; 11722: 	//
; 11723: 	// window
; 11724: 	//
; 11725: 
; 11726: 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  0023e	51		 push	 ecx
  0023f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  00247	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024c	51		 push	 ecx
  0024d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  00255	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025a	51		 push	 ecx
  0025b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  00263	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00268	51		 push	 ecx
  00269	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  00271	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00276	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0027b	50		 push	 eax
  0027c	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 11727: 
; 11728: 	//
; 11729: 	// viewport
; 11730: 	//
; 11731: 
; 11732: 	if (draw_large_mfd)

  00281	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00288	74 12		 je	 SHORT $LN8@draw_overl

; 11733: 		mfd_viewport_size = MFD_VIEWPORT_LARGE_SIZE;

  0028a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  00292	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 11734: 	else

  0029a	eb 10		 jmp	 SHORT $LN9@draw_overl
$LN8@draw_overl:

; 11735: 		mfd_viewport_size = MFD_VIEWPORT_SMALL_SIZE;

  0029c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  002a4	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0
$LN9@draw_overl:

; 11736: 
; 11737: 	ASSERT (mfd_viewport_size <= mfd_texture_size);

  002ac	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_texture_size@@3HA
  002b4	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  002bb	73 1a		 jae	 SHORT $LN10@draw_overl
  002bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_apache_mfd@@YGXMMMW4MFD_LOCATIONS@@@Z@4JA
  002c2	05 8e 00 00 00	 add	 eax, 142		; 0000008eH
  002c7	50		 push	 eax
  002c8	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  002cd	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@IPIPCLFE@mfd_viewport_size?5?$DM?$DN?5mfd_textur@
  002d2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@draw_overl:

; 11738: 
; 11739: 	mfd_viewport_x_org = mfd_viewport_texture_x_org;

  002d7	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_viewport_texture_x_org@@3HA
  002df	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 11740: 
; 11741: 	mfd_viewport_y_org = mfd_viewport_texture_y_org;

  002e7	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_viewport_texture_y_org@@3HA
  002ef	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 11742: 
; 11743: 	mfd_viewport_x_min = mfd_viewport_x_org - (mfd_viewport_size * 0.5);

  002f7	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  002ff	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00307	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0030f	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00313	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00317	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 11744: 
; 11745: 	mfd_viewport_y_min = mfd_viewport_y_org - (mfd_viewport_size * 0.5);

  0031f	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_org@@3MA
  00327	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  0032f	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00337	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0033b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0033f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 11746: 
; 11747: 	mfd_viewport_x_max = mfd_viewport_x_org + (mfd_viewport_size * 0.5) - 0.001;

  00347	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  0034f	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00357	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0035f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00363	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0036b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0036f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 11748: 
; 11749: 	mfd_viewport_y_max = mfd_viewport_y_org + (mfd_viewport_size * 0.5) - 0.001;

  00377	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_org@@3MA
  0037f	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00387	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0038f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00393	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0039b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0039f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 11750: 
; 11751: 	////////////////////////////////////////
; 11752: 	//
; 11753: 	// draw MFD display
; 11754: 	//
; 11755: 	////////////////////////////////////////
; 11756: 
; 11757: 	switch (*mfd_mode)

  003a7	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  003aa	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ac	89 8d 7c fe ff
	ff		 mov	 DWORD PTR tv188[ebp], ecx
  003b2	83 bd 7c fe ff
	ff 0d		 cmp	 DWORD PTR tv188[ebp], 13 ; 0000000dH
  003b9	0f 87 9c 09 00
	00		 ja	 $LN2@draw_overl
  003bf	8b 95 7c fe ff
	ff		 mov	 edx, DWORD PTR tv188[ebp]
  003c5	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN48@draw_overl[edx*4]
$LN11@draw_overl:

; 11758: 	{
; 11759: 		////////////////////////////////////////
; 11760: 		case MFD_MODE_OFF:
; 11761: 		////////////////////////////////////////
; 11762: 		{
; 11763: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  003cc	51		 push	 ecx
  003cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  003d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003da	51		 push	 ecx
  003db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  003e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e8	51		 push	 ecx
  003e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  003f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f6	51		 push	 ecx
  003f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  003ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00404	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00409	50		 push	 eax
  0040a	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 11764: 
; 11765: 			set_active_screen (mfd_texture_screen);

  0040f	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00412	50		 push	 eax
  00413	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11766: 
; 11767: 			if (lock_screen (mfd_texture_screen))

  00418	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0041b	50		 push	 eax
  0041c	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00421	85 c0		 test	 eax, eax
  00423	74 3a		 je	 SHORT $LN12@draw_overl

; 11768: 			{
; 11769: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00425	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0042a	50		 push	 eax
  0042b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00431	83 e9 01	 sub	 ecx, 1
  00434	51		 push	 ecx
  00435	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  0043b	83 ea 01	 sub	 edx, 1
  0043e	52		 push	 edx
  0043f	6a 00		 push	 0
  00441	6a 00		 push	 0
  00443	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11770: 
; 11771: 				draw_layout_grid ();

  00448	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11772: 
; 11773: 				flush_screen_texture_graphics (mfd_texture_screen);

  0044d	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00450	50		 push	 eax
  00451	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11774: 
; 11775: 				unlock_screen (mfd_texture_screen);

  00456	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00459	50		 push	 eax
  0045a	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN12@draw_overl:

; 11776: 			}
; 11777: 
; 11778: 			break;

  0045f	e9 f7 08 00 00	 jmp	 $LN2@draw_overl
$LN13@draw_overl:

; 11779: 		}
; 11780: 		////////////////////////////////////////
; 11781: 		case MFD_MODE_DAMAGED:
; 11782: 		////////////////////////////////////////
; 11783: 		{
; 11784: 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00464	51		 push	 ecx
  00465	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  0046a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046f	51		 push	 ecx
  00470	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00475	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047a	51		 push	 ecx
  0047b	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00480	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00485	51		 push	 ecx
  00486	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  0048b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00490	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 11785: 
; 11786: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00495	51		 push	 ecx
  00496	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0049e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a3	51		 push	 ecx
  004a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  004ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b1	51		 push	 ecx
  004b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  004ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004bf	51		 push	 ecx
  004c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  004c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  004d2	50		 push	 eax
  004d3	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 11787: 
; 11788: 			set_active_screen (mfd_texture_screen);

  004d8	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  004db	50		 push	 eax
  004dc	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11789: 
; 11790: 			if (lock_screen (mfd_texture_screen))

  004e1	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  004e4	50		 push	 eax
  004e5	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  004ea	85 c0		 test	 eax, eax
  004ec	74 3f		 je	 SHORT $LN14@draw_overl

; 11791: 			{
; 11792: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  004ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  004f3	50		 push	 eax
  004f4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  004fa	83 e9 01	 sub	 ecx, 1
  004fd	51		 push	 ecx
  004fe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00504	83 ea 01	 sub	 edx, 1
  00507	52		 push	 edx
  00508	6a 00		 push	 0
  0050a	6a 00		 push	 0
  0050c	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11793: 
; 11794: 				draw_layout_grid ();

  00511	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11795: 
; 11796: 				draw_damaged_mfd ();

  00516	e8 00 00 00 00	 call	 ?draw_damaged_mfd@@YGXXZ ; draw_damaged_mfd

; 11797: 
; 11798: 				flush_screen_texture_graphics (mfd_texture_screen);

  0051b	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0051e	50		 push	 eax
  0051f	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11799: 
; 11800: 				unlock_screen (mfd_texture_screen);

  00524	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00527	50		 push	 eax
  00528	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN14@draw_overl:

; 11801: 			}
; 11802: 
; 11803: 			break;

  0052d	e9 29 08 00 00	 jmp	 $LN2@draw_overl
$LN15@draw_overl:

; 11804: 		}
; 11805: 		////////////////////////////////////////
; 11806: 		case MFD_MODE_GROUND_RADAR:
; 11807: 		////////////////////////////////////////
; 11808: 		{
; 11809: 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00532	51		 push	 ecx
  00533	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00538	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053d	51		 push	 ecx
  0053e	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00543	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00548	51		 push	 ecx
  00549	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  0054e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00553	51		 push	 ecx
  00554	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00559	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0055e	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 11810: 
; 11811: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00563	51		 push	 ecx
  00564	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0056c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00571	51		 push	 ecx
  00572	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0057a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057f	51		 push	 ecx
  00580	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00588	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0058d	51		 push	 ecx
  0058e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00596	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  005a0	50		 push	 eax
  005a1	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 11812: 
; 11813: 			set_active_screen (mfd_texture_screen);

  005a6	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  005a9	50		 push	 eax
  005aa	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11814: 
; 11815: 			if (lock_screen (mfd_texture_screen))

  005af	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  005b2	50		 push	 eax
  005b3	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  005b8	85 c0		 test	 eax, eax
  005ba	74 3f		 je	 SHORT $LN16@draw_overl

; 11816: 			{
; 11817: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  005bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  005c1	50		 push	 eax
  005c2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  005c8	83 e9 01	 sub	 ecx, 1
  005cb	51		 push	 ecx
  005cc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  005d2	83 ea 01	 sub	 edx, 1
  005d5	52		 push	 edx
  005d6	6a 00		 push	 0
  005d8	6a 00		 push	 0
  005da	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11818: 
; 11819: 				draw_layout_grid ();

  005df	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11820: 
; 11821: 				draw_ground_radar_mfd ();

  005e4	e8 00 00 00 00	 call	 ?draw_ground_radar_mfd@@YGXXZ ; draw_ground_radar_mfd

; 11822: 
; 11823: 				flush_screen_texture_graphics (mfd_texture_screen);

  005e9	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  005ec	50		 push	 eax
  005ed	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11824: 
; 11825: 				unlock_screen (mfd_texture_screen);

  005f2	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  005f5	50		 push	 eax
  005f6	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN16@draw_overl:

; 11826: 			}
; 11827: 
; 11828: 			break;

  005fb	e9 5b 07 00 00	 jmp	 $LN2@draw_overl
$LN17@draw_overl:

; 11829: 		}
; 11830: 		////////////////////////////////////////
; 11831: 		case MFD_MODE_AIR_RADAR:
; 11832: 		////////////////////////////////////////
; 11833: 		{
; 11834: 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00600	51		 push	 ecx
  00601	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00606	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0060b	51		 push	 ecx
  0060c	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00611	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00616	51		 push	 ecx
  00617	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  0061c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00621	51		 push	 ecx
  00622	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00627	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0062c	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 11835: 
; 11836: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00631	51		 push	 ecx
  00632	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0063a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063f	51		 push	 ecx
  00640	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00648	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0064d	51		 push	 ecx
  0064e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00656	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0065b	51		 push	 ecx
  0065c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00664	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00669	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0066e	50		 push	 eax
  0066f	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 11837: 
; 11838: 			set_active_screen (mfd_texture_screen);

  00674	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00677	50		 push	 eax
  00678	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11839: 
; 11840: 			if (lock_screen (mfd_texture_screen))

  0067d	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00680	50		 push	 eax
  00681	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00686	85 c0		 test	 eax, eax
  00688	74 3f		 je	 SHORT $LN18@draw_overl

; 11841: 			{
; 11842: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  0068a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0068f	50		 push	 eax
  00690	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00696	83 e9 01	 sub	 ecx, 1
  00699	51		 push	 ecx
  0069a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  006a0	83 ea 01	 sub	 edx, 1
  006a3	52		 push	 edx
  006a4	6a 00		 push	 0
  006a6	6a 00		 push	 0
  006a8	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11843: 
; 11844: 				draw_layout_grid ();

  006ad	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11845: 
; 11846: 				draw_air_radar_mfd ();

  006b2	e8 00 00 00 00	 call	 ?draw_air_radar_mfd@@YGXXZ ; draw_air_radar_mfd

; 11847: 
; 11848: 				flush_screen_texture_graphics (mfd_texture_screen);

  006b7	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  006ba	50		 push	 eax
  006bb	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11849: 
; 11850: 				unlock_screen (mfd_texture_screen);

  006c0	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  006c3	50		 push	 eax
  006c4	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN18@draw_overl:

; 11851: 			}
; 11852: 
; 11853: 			break;

  006c9	e9 8d 06 00 00	 jmp	 $LN2@draw_overl
$LN19@draw_overl:

; 11854: 		}
; 11855: 		////////////////////////////////////////
; 11856: 		case MFD_MODE_FLIR:
; 11857: 		case MFD_MODE_DTV:
; 11858: 		case MFD_MODE_DVO:
; 11859: 		////////////////////////////////////////
; 11860: 		{
; 11861: 			if (!apache_damage.flir)

  006ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  006d3	c1 e8 02	 shr	 eax, 2
  006d6	83 e0 01	 and	 eax, 1
  006d9	0f 85 9d 00 00
	00		 jne	 $LN20@draw_overl

; 11862: 			{
; 11863: 				if (*mfd_mode == MFD_MODE_FLIR)

  006df	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  006e2	83 38 04	 cmp	 DWORD PTR [eax], 4
  006e5	75 2f		 jne	 SHORT $LN22@draw_overl

; 11864: 					draw_overlaid_3d_eo_display (&apache_flir, TARGET_ACQUISITION_SYSTEM_FLIR, mfd_screen_x_min, mfd_screen_y_min, mfd_screen_size);

  006e7	51		 push	 ecx
  006e8	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _mfd_screen_size$[ebp]
  006ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f2	51		 push	 ecx
  006f3	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  006f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006fd	51		 push	 ecx
  006fe	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00703	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00708	6a 03		 push	 3
  0070a	68 00 00 00 00	 push	 OFFSET ?apache_flir@@3UEO_PARAMS@@A ; apache_flir
  0070f	e8 00 00 00 00	 call	 ?draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z ; draw_overlaid_3d_eo_display
  00714	eb 64		 jmp	 SHORT $LN25@draw_overl
$LN22@draw_overl:

; 11865: 				else if (*mfd_mode == MFD_MODE_DTV)

  00716	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00719	83 38 05	 cmp	 DWORD PTR [eax], 5
  0071c	75 2f		 jne	 SHORT $LN24@draw_overl

; 11866: 					draw_overlaid_3d_eo_display (&apache_dtv, TARGET_ACQUISITION_SYSTEM_DTV, mfd_screen_x_min, mfd_screen_y_min, mfd_screen_size);

  0071e	51		 push	 ecx
  0071f	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _mfd_screen_size$[ebp]
  00724	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00729	51		 push	 ecx
  0072a	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  0072f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00734	51		 push	 ecx
  00735	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  0073a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0073f	6a 04		 push	 4
  00741	68 00 00 00 00	 push	 OFFSET ?apache_dtv@@3UEO_PARAMS@@A ; apache_dtv
  00746	e8 00 00 00 00	 call	 ?draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z ; draw_overlaid_3d_eo_display

; 11867: 				else

  0074b	eb 2d		 jmp	 SHORT $LN25@draw_overl
$LN24@draw_overl:

; 11868: 					draw_overlaid_3d_eo_display (&apache_dvo, TARGET_ACQUISITION_SYSTEM_DVO, mfd_screen_x_min, mfd_screen_y_min, mfd_screen_size);

  0074d	51		 push	 ecx
  0074e	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _mfd_screen_size$[ebp]
  00753	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00758	51		 push	 ecx
  00759	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  0075e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00763	51		 push	 ecx
  00764	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00769	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0076e	6a 05		 push	 5
  00770	68 00 00 00 00	 push	 OFFSET ?apache_dvo@@3UEO_PARAMS@@A ; apache_dvo
  00775	e8 00 00 00 00	 call	 ?draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z ; draw_overlaid_3d_eo_display
$LN25@draw_overl:

; 11869: 			}
; 11870: 			else

  0077a	eb 31		 jmp	 SHORT $LN21@draw_overl
$LN20@draw_overl:

; 11871: 				draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  0077c	51		 push	 ecx
  0077d	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00782	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00787	51		 push	 ecx
  00788	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  0078d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00792	51		 push	 ecx
  00793	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00798	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079d	51		 push	 ecx
  0079e	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  007a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a8	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background
$LN21@draw_overl:

; 11872: 
; 11873: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  007ad	51		 push	 ecx
  007ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  007b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007bb	51		 push	 ecx
  007bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  007c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c9	51		 push	 ecx
  007ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  007d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d7	51		 push	 ecx
  007d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  007e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  007ea	50		 push	 eax
  007eb	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 11874: 			set_active_screen (mfd_texture_screen);

  007f0	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  007f3	50		 push	 eax
  007f4	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11875: 
; 11876: 			if (lock_screen (mfd_texture_screen))

  007f9	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  007fc	50		 push	 eax
  007fd	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00802	85 c0		 test	 eax, eax
  00804	74 69		 je	 SHORT $LN26@draw_overl

; 11877: 			{
; 11878: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00806	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0080b	50		 push	 eax
  0080c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00812	83 e9 01	 sub	 ecx, 1
  00815	51		 push	 ecx
  00816	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  0081c	83 ea 01	 sub	 edx, 1
  0081f	52		 push	 edx
  00820	6a 00		 push	 0
  00822	6a 00		 push	 0
  00824	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11879: 
; 11880: 				draw_layout_grid ();

  00829	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11881: 
; 11882: 				if (*mfd_mode == MFD_MODE_FLIR)

  0082e	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00831	83 38 04	 cmp	 DWORD PTR [eax], 4
  00834	75 0b		 jne	 SHORT $LN27@draw_overl

; 11883: 					draw_2d_flir_mfd (TRUE, TRUE);

  00836	6a 01		 push	 1
  00838	6a 01		 push	 1
  0083a	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXHH@Z ; draw_2d_flir_mfd
  0083f	eb 1c		 jmp	 SHORT $LN30@draw_overl
$LN27@draw_overl:

; 11884: 				else if (*mfd_mode == MFD_MODE_DTV)

  00841	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00844	83 38 05	 cmp	 DWORD PTR [eax], 5
  00847	75 0b		 jne	 SHORT $LN29@draw_overl

; 11885: 					draw_2d_dtv_mfd (TRUE, TRUE);

  00849	6a 01		 push	 1
  0084b	6a 01		 push	 1
  0084d	e8 00 00 00 00	 call	 ?draw_2d_dtv_mfd@@YGXHH@Z ; draw_2d_dtv_mfd

; 11886: 				else

  00852	eb 09		 jmp	 SHORT $LN30@draw_overl
$LN29@draw_overl:

; 11887: 					draw_2d_dvo_mfd (TRUE, TRUE);

  00854	6a 01		 push	 1
  00856	6a 01		 push	 1
  00858	e8 00 00 00 00	 call	 ?draw_2d_dvo_mfd@@YGXHH@Z ; draw_2d_dvo_mfd
$LN30@draw_overl:

; 11888: 
; 11889: 				flush_screen_texture_graphics (mfd_texture_screen);

  0085d	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00860	50		 push	 eax
  00861	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11890: 				unlock_screen (mfd_texture_screen);

  00866	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00869	50		 push	 eax
  0086a	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN26@draw_overl:

; 11891: 			}
; 11892: 
; 11893: 			set_pilots_full_screen_params (FALSE);

  0086f	6a 00		 push	 0
  00871	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params

; 11894: 
; 11895: 			break;

  00876	e9 e0 04 00 00	 jmp	 $LN2@draw_overl
$LN31@draw_overl:

; 11896: 		}
; 11897: 		////////////////////////////////////////
; 11898: 		case MFD_MODE_TSD:
; 11899: 		////////////////////////////////////////
; 11900: 		{
; 11901: 
; 11902: /*			if (tsd_tads_underlay_active)
; 11903: 			{
; 11904: 				if (eo_sensor == TARGET_ACQUISITION_SYSTEM_FLIR)
; 11905: 					draw_overlaid_3d_eo_display (&apache_flir, TARGET_ACQUISITION_SYSTEM_FLIR, mfd_screen_x_min, mfd_screen_y_min, mfd_screen_size);
; 11906: 				else
; 11907: 					draw_overlaid_3d_eo_display (&apache_dtv, TARGET_ACQUISITION_SYSTEM_DTV, mfd_screen_x_min, mfd_screen_y_min, mfd_screen_size);
; 11908: 			}
; 11909: 			else */
; 11910: 				draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  0087b	51		 push	 ecx
  0087c	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00881	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00886	51		 push	 ecx
  00887	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  0088c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00891	51		 push	 ecx
  00892	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00897	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0089c	51		 push	 ecx
  0089d	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  008a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a7	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 11911: 
; 11912: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  008ac	51		 push	 ecx
  008ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  008b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ba	51		 push	 ecx
  008bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  008c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c8	51		 push	 ecx
  008c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  008d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d6	51		 push	 ecx
  008d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  008df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  008e9	50		 push	 eax
  008ea	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 11913: 			set_active_screen (mfd_texture_screen);

  008ef	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  008f2	50		 push	 eax
  008f3	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11914: 
; 11915: 			if (lock_screen (mfd_texture_screen))

  008f8	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  008fb	50		 push	 eax
  008fc	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00901	85 c0		 test	 eax, eax
  00903	74 3a		 je	 SHORT $LN32@draw_overl

; 11916: 			{
; 11917: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_green_mfd_colour);

  00905	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_green_mfd_colour@@3UREAL_COLOUR@@A
  0090a	50		 push	 eax
  0090b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00911	83 e9 01	 sub	 ecx, 1
  00914	51		 push	 ecx
  00915	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  0091b	83 ea 01	 sub	 edx, 1
  0091e	52		 push	 edx
  0091f	6a 00		 push	 0
  00921	6a 00		 push	 0
  00923	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11918: 
; 11919: 				draw_tactical_situation_display_mfd ();

  00928	e8 00 00 00 00	 call	 ?draw_tactical_situation_display_mfd@@YGXXZ ; draw_tactical_situation_display_mfd

; 11920: 
; 11921: 				flush_screen_texture_graphics (mfd_texture_screen);

  0092d	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00930	50		 push	 eax
  00931	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11922: 
; 11923: 				unlock_screen (mfd_texture_screen);

  00936	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00939	50		 push	 eax
  0093a	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN32@draw_overl:

; 11924: 			}
; 11925: 
; 11926: 			if (tsd_tads_underlay_active)

  0093f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?tsd_tads_underlay_active@@3FA
  00946	85 c0		 test	 eax, eax
  00948	74 07		 je	 SHORT $LN33@draw_overl

; 11927: 				set_pilots_full_screen_params (FALSE);

  0094a	6a 00		 push	 0
  0094c	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params
$LN33@draw_overl:

; 11928: 
; 11929: 			break;

  00951	e9 05 04 00 00	 jmp	 $LN2@draw_overl
$LN34@draw_overl:

; 11930: 		}
; 11931: 		////////////////////////////////////////
; 11932: 		case MFD_MODE_ASE:
; 11933: 		////////////////////////////////////////
; 11934: 		{
; 11935: 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00956	51		 push	 ecx
  00957	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  0095c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00961	51		 push	 ecx
  00962	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00967	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0096c	51		 push	 ecx
  0096d	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00972	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00977	51		 push	 ecx
  00978	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  0097d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00982	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 11936: 
; 11937: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00987	51		 push	 ecx
  00988	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00990	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00995	51		 push	 ecx
  00996	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0099e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009a3	51		 push	 ecx
  009a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  009ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b1	51		 push	 ecx
  009b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  009ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009bf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  009c4	50		 push	 eax
  009c5	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 11938: 
; 11939: 			set_active_screen (mfd_texture_screen);

  009ca	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  009cd	50		 push	 eax
  009ce	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11940: 
; 11941: 			if (lock_screen (mfd_texture_screen))

  009d3	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  009d6	50		 push	 eax
  009d7	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  009dc	85 c0		 test	 eax, eax
  009de	74 3f		 je	 SHORT $LN35@draw_overl

; 11942: 			{
; 11943: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_green_mfd_colour);

  009e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_green_mfd_colour@@3UREAL_COLOUR@@A
  009e5	50		 push	 eax
  009e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  009ec	83 e9 01	 sub	 ecx, 1
  009ef	51		 push	 ecx
  009f0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  009f6	83 ea 01	 sub	 edx, 1
  009f9	52		 push	 edx
  009fa	6a 00		 push	 0
  009fc	6a 00		 push	 0
  009fe	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11944: 
; 11945: 				draw_layout_grid ();

  00a03	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11946: 
; 11947: 				draw_aircraft_survivability_equipment_display_mfd ();

  00a08	e8 00 00 00 00	 call	 ?draw_aircraft_survivability_equipment_display_mfd@@YGXXZ ; draw_aircraft_survivability_equipment_display_mfd

; 11948: 
; 11949: 				flush_screen_texture_graphics (mfd_texture_screen);

  00a0d	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00a10	50		 push	 eax
  00a11	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11950: 
; 11951: 				unlock_screen (mfd_texture_screen);

  00a16	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00a19	50		 push	 eax
  00a1a	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN35@draw_overl:

; 11952: 			}
; 11953: 
; 11954: 			break;

  00a1f	e9 37 03 00 00	 jmp	 $LN2@draw_overl
$LN36@draw_overl:

; 11955: 		}
; 11956: 		////////////////////////////////////////
; 11957: 		case MFD_MODE_WEAPON:
; 11958: 		////////////////////////////////////////
; 11959: 		{
; 11960: 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00a24	51		 push	 ecx
  00a25	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00a2a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a2f	51		 push	 ecx
  00a30	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00a35	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a3a	51		 push	 ecx
  00a3b	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00a40	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a45	51		 push	 ecx
  00a46	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00a4b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a50	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 11961: 
; 11962: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00a55	51		 push	 ecx
  00a56	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00a5e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a63	51		 push	 ecx
  00a64	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00a6c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a71	51		 push	 ecx
  00a72	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00a7a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a7f	51		 push	 ecx
  00a80	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00a88	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a8d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a92	50		 push	 eax
  00a93	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 11963: 
; 11964: 			set_active_screen (mfd_texture_screen);

  00a98	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00a9b	50		 push	 eax
  00a9c	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11965: 
; 11966: 			if (lock_screen (mfd_texture_screen))

  00aa1	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00aa4	50		 push	 eax
  00aa5	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00aaa	85 c0		 test	 eax, eax
  00aac	74 43		 je	 SHORT $LN37@draw_overl

; 11967: 			{
; 11968: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00aae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00ab3	50		 push	 eax
  00ab4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00aba	83 e9 01	 sub	 ecx, 1
  00abd	51		 push	 ecx
  00abe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00ac4	83 ea 01	 sub	 edx, 1
  00ac7	52		 push	 edx
  00ac8	6a 00		 push	 0
  00aca	6a 00		 push	 0
  00acc	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11969: 
; 11970: 				draw_layout_grid ();

  00ad1	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11971: 
; 11972: 				draw_weapon_display_mfd (MFD_LOCATION_DONT_CARE, TRUE);

  00ad6	6a 01		 push	 1
  00ad8	6a ff		 push	 -1
  00ada	e8 00 00 00 00	 call	 ?draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z ; draw_weapon_display_mfd

; 11973: 
; 11974: 				flush_screen_texture_graphics (mfd_texture_screen);

  00adf	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00ae2	50		 push	 eax
  00ae3	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11975: 
; 11976: 				unlock_screen (mfd_texture_screen);

  00ae8	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00aeb	50		 push	 eax
  00aec	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN37@draw_overl:

; 11977: 			}
; 11978: 
; 11979: 			break;

  00af1	e9 65 02 00 00	 jmp	 $LN2@draw_overl
$LN38@draw_overl:

; 11980: 		}
; 11981: 		////////////////////////////////////////
; 11982: 		case MFD_MODE_SYSTEM:
; 11983: 		////////////////////////////////////////
; 11984: 		{
; 11985: 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00af6	51		 push	 ecx
  00af7	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00afc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b01	51		 push	 ecx
  00b02	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00b07	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b0c	51		 push	 ecx
  00b0d	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00b12	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b17	51		 push	 ecx
  00b18	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00b1d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b22	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 11986: 
; 11987: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00b27	51		 push	 ecx
  00b28	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00b30	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b35	51		 push	 ecx
  00b36	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00b3e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b43	51		 push	 ecx
  00b44	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00b4c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b51	51		 push	 ecx
  00b52	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00b5a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b5f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00b64	50		 push	 eax
  00b65	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 11988: 
; 11989: 			set_active_screen (mfd_texture_screen);

  00b6a	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00b6d	50		 push	 eax
  00b6e	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11990: 
; 11991: 			if (lock_screen (mfd_texture_screen))

  00b73	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00b76	50		 push	 eax
  00b77	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00b7c	85 c0		 test	 eax, eax
  00b7e	74 3f		 je	 SHORT $LN39@draw_overl

; 11992: 			{
; 11993: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00b80	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00b85	50		 push	 eax
  00b86	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00b8c	83 e9 01	 sub	 ecx, 1
  00b8f	51		 push	 ecx
  00b90	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00b96	83 ea 01	 sub	 edx, 1
  00b99	52		 push	 edx
  00b9a	6a 00		 push	 0
  00b9c	6a 00		 push	 0
  00b9e	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11994: 
; 11995: 				draw_layout_grid ();

  00ba3	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11996: 
; 11997: 				draw_system_display_mfd ();

  00ba8	e8 00 00 00 00	 call	 ?draw_system_display_mfd@@YGXXZ ; draw_system_display_mfd

; 11998: 
; 11999: 				flush_screen_texture_graphics (mfd_texture_screen);

  00bad	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00bb0	50		 push	 eax
  00bb1	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 12000: 
; 12001: 				unlock_screen (mfd_texture_screen);

  00bb6	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00bb9	50		 push	 eax
  00bba	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN39@draw_overl:

; 12002: 			}
; 12003: 
; 12004: 			break;

  00bbf	e9 97 01 00 00	 jmp	 $LN2@draw_overl
$LN40@draw_overl:

; 12005: 		}
; 12006: 		////////////////////////////////////////
; 12007: 		case MFD_MODE_ENGINE:
; 12008: 		////////////////////////////////////////
; 12009: 		{
; 12010: 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00bc4	51		 push	 ecx
  00bc5	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00bca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bcf	51		 push	 ecx
  00bd0	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00bd5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bda	51		 push	 ecx
  00bdb	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00be0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00be5	51		 push	 ecx
  00be6	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00beb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bf0	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 12011: 
; 12012: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00bf5	51		 push	 ecx
  00bf6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00bfe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c03	51		 push	 ecx
  00c04	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00c0c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c11	51		 push	 ecx
  00c12	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00c1a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c1f	51		 push	 ecx
  00c20	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00c28	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c2d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00c32	50		 push	 eax
  00c33	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 12013: 
; 12014: 			set_active_screen (mfd_texture_screen);

  00c38	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00c3b	50		 push	 eax
  00c3c	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 12015: 
; 12016: 			if (lock_screen (mfd_texture_screen))

  00c41	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00c44	50		 push	 eax
  00c45	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00c4a	85 c0		 test	 eax, eax
  00c4c	74 3f		 je	 SHORT $LN41@draw_overl

; 12017: 			{
; 12018: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00c4e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00c53	50		 push	 eax
  00c54	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00c5a	83 e9 01	 sub	 ecx, 1
  00c5d	51		 push	 ecx
  00c5e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00c64	83 ea 01	 sub	 edx, 1
  00c67	52		 push	 edx
  00c68	6a 00		 push	 0
  00c6a	6a 00		 push	 0
  00c6c	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 12019: 
; 12020: 				draw_layout_grid ();

  00c71	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 12021: 
; 12022: 				draw_engine_display_mfd ();

  00c76	e8 00 00 00 00	 call	 ?draw_engine_display_mfd@@YGXXZ ; draw_engine_display_mfd

; 12023: 
; 12024: 				flush_screen_texture_graphics (mfd_texture_screen);

  00c7b	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00c7e	50		 push	 eax
  00c7f	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 12025: 
; 12026: 				unlock_screen (mfd_texture_screen);

  00c84	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00c87	50		 push	 eax
  00c88	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN41@draw_overl:

; 12027: 			}
; 12028: 
; 12029: 			break;

  00c8d	e9 c9 00 00 00	 jmp	 $LN2@draw_overl
$LN42@draw_overl:

; 12030: 		}
; 12031: 		////////////////////////////////////////
; 12032: 		case MFD_MODE_FLIGHT:
; 12033: 		////////////////////////////////////////
; 12034: 		{
; 12035: 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00c92	51		 push	 ecx
  00c93	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00c98	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c9d	51		 push	 ecx
  00c9e	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00ca3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ca8	51		 push	 ecx
  00ca9	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00cae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cb3	51		 push	 ecx
  00cb4	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00cb9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cbe	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 12036: 
; 12037: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00cc3	51		 push	 ecx
  00cc4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00ccc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cd1	51		 push	 ecx
  00cd2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00cda	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cdf	51		 push	 ecx
  00ce0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00ce8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ced	51		 push	 ecx
  00cee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00cf6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cfb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00d00	50		 push	 eax
  00d01	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 12038: 
; 12039: 			set_active_screen (mfd_texture_screen);

  00d06	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00d09	50		 push	 eax
  00d0a	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 12040: 
; 12041: 			if (lock_screen (mfd_texture_screen))

  00d0f	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00d12	50		 push	 eax
  00d13	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00d18	85 c0		 test	 eax, eax
  00d1a	74 3f		 je	 SHORT $LN43@draw_overl

; 12042: 			{
; 12043: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_green_mfd_colour);

  00d1c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_green_mfd_colour@@3UREAL_COLOUR@@A
  00d21	50		 push	 eax
  00d22	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00d28	83 e9 01	 sub	 ecx, 1
  00d2b	51		 push	 ecx
  00d2c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00d32	83 ea 01	 sub	 edx, 1
  00d35	52		 push	 edx
  00d36	6a 00		 push	 0
  00d38	6a 00		 push	 0
  00d3a	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 12044: 
; 12045: 				draw_layout_grid ();

  00d3f	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 12046: 
; 12047: 				draw_flight_display_mfd();

  00d44	e8 00 00 00 00	 call	 ?draw_flight_display_mfd@@YGXXZ ; draw_flight_display_mfd

; 12048: 
; 12049: 				flush_screen_texture_graphics (mfd_texture_screen);

  00d49	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00d4c	50		 push	 eax
  00d4d	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 12050: 
; 12051: 				unlock_screen (mfd_texture_screen);

  00d52	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00d55	50		 push	 eax
  00d56	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN43@draw_overl:
$LN2@draw_overl:

; 12052: 			}
; 12053: 
; 12054: 			break;
; 12055: 		}
; 12056: 	}
; 12057: 
; 12058: 	set_active_screen (video_screen);

  00d5b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00d60	50		 push	 eax
  00d61	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 12059: 
; 12060: 	////////////////////////////////////////
; 12061: 	//
; 12062: 	// render MFD to screen
; 12063: 	//
; 12064: 	////////////////////////////////////////
; 12065: 	{
; 12066: 		vertex
; 12067: 			quad[4];
; 12068: 
; 12069: 		real_colour
; 12070: 			colour,
; 12071: 			specular;
; 12072: 
; 12073: 		set_3d_active_environment (main_3d_env);

  00d66	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  00d6b	50		 push	 eax
  00d6c	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 12074: 
; 12075: 		if (begin_3d_scene ())

  00d71	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  00d76	85 c0		 test	 eax, eax
  00d78	0f 84 3b 03 00
	00		 je	 $LN44@draw_overl

; 12076: 		{
; 12077: 			set_d3d_transparency_on ();

  00d7e	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 12078: 
; 12079: 			set_d3d_zbuffer_comparison (FALSE);

  00d83	6a 00		 push	 0
  00d85	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 12080: 
; 12081: 			set_d3d_culling (FALSE);

  00d8a	6a 00		 push	 0
  00d8c	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 12082: 
; 12083: 			set_d3d_texture_wrapping (0, FALSE);

  00d91	6a 00		 push	 0
  00d93	6a 00		 push	 0
  00d95	e8 00 00 00 00	 call	 ?set_d3d_texture_wrapping@@YGXHH@Z ; set_d3d_texture_wrapping

; 12084: 
; 12085: /*			if ((application_video_width == 640) || (get_global_unscaled_displays ()))
; 12086: 			{
; 12087: 				set_d3d_texture_mag_filtering (FALSE);
; 12088: 				set_d3d_texture_min_filtering (FALSE);
; 12089: 				set_d3d_texture_mip_filtering (FALSE);
; 12090: 			}
; 12091: 			else */
; 12092: 			{
; 12093: 				set_d3d_texture_mag_filtering (TRUE);

  00d9a	6a 01		 push	 1
  00d9c	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 12094: 				set_d3d_texture_min_filtering (TRUE);

  00da1	6a 01		 push	 1
  00da3	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 12095: 				set_d3d_texture_mip_filtering (FALSE);

  00da8	6a 00		 push	 0
  00daa	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering

; 12096: 			}
; 12097: 
; 12098: 			set_d3d_flat_shaded_textured_renderstate (get_system_texture_ptr (texture_index));

  00daf	8b 45 f4	 mov	 eax, DWORD PTR _texture_index$[ebp]
  00db2	50		 push	 eax
  00db3	e8 00 00 00 00	 call	 ?get_system_texture_ptr@@YGPAUSCREEN@@H@Z ; get_system_texture_ptr
  00db8	50		 push	 eax
  00db9	e8 00 00 00 00	 call	 ?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z ; set_d3d_flat_shaded_textured_renderstate

; 12099: 
; 12100: 			////////////////////////////////////////
; 12101: 			//
; 12102: 
; 12103: 			colour.red	 			= 255;

  00dbe	c6 85 c6 fe ff
	ff ff		 mov	 BYTE PTR _colour$2[ebp+2], 255 ; 000000ffH

; 12104: 			colour.green			= 255;

  00dc5	c6 85 c5 fe ff
	ff ff		 mov	 BYTE PTR _colour$2[ebp+1], 255 ; 000000ffH

; 12105: 			colour.blue	 			= 255;

  00dcc	c6 85 c4 fe ff
	ff ff		 mov	 BYTE PTR _colour$2[ebp], 255 ; 000000ffH

; 12106: 			colour.alpha  			= 255;

  00dd3	c6 85 c7 fe ff
	ff ff		 mov	 BYTE PTR _colour$2[ebp+3], 255 ; 000000ffH

; 12107: 
; 12108: 			specular.red 			= 0;

  00dda	c6 85 c2 fe ff
	ff 00		 mov	 BYTE PTR _specular$1[ebp+2], 0

; 12109: 			specular.green	 		= 0;

  00de1	c6 85 c1 fe ff
	ff 00		 mov	 BYTE PTR _specular$1[ebp+1], 0

; 12110: 			specular.blue 			= 0;

  00de8	c6 85 c0 fe ff
	ff 00		 mov	 BYTE PTR _specular$1[ebp], 0

; 12111: 			specular.alpha	  		= 255;

  00def	c6 85 c3 fe ff
	ff ff		 mov	 BYTE PTR _specular$1[ebp+3], 255 ; 000000ffH

; 12112: 
; 12113: 			quad[0].i 				= mfd_screen_x_min;

  00df6	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00dfb	6b c8 00	 imul	 ecx, eax, 0
  00dfe	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00e03	f3 0f 11 84 0d
	d8 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+16], xmm0

; 12114: 			quad[0].j  				= mfd_screen_y_min;

  00e0c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e11	6b c8 00	 imul	 ecx, eax, 0
  00e14	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00e19	f3 0f 11 84 0d
	dc fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+20], xmm0

; 12115: 			quad[0].z  				= 0.5;

  00e22	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e27	6b c8 00	 imul	 ecx, eax, 0
  00e2a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00e32	f3 0f 11 84 0d
	d0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+8], xmm0

; 12116: 			quad[0].q  				= 0.5;

  00e3b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e40	6b c8 00	 imul	 ecx, eax, 0
  00e43	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00e4b	f3 0f 11 84 0d
	d4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+12], xmm0

; 12117: 			quad[0].u  				= 0.0;

  00e54	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e59	6b c8 00	 imul	 ecx, eax, 0
  00e5c	0f 57 c0	 xorps	 xmm0, xmm0
  00e5f	f3 0f 11 84 0d
	e0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+24], xmm0

; 12118: 			quad[0].v				= 0.0;

  00e68	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e6d	6b c8 00	 imul	 ecx, eax, 0
  00e70	0f 57 c0	 xorps	 xmm0, xmm0
  00e73	f3 0f 11 84 0d
	e4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+28], xmm0

; 12119: 
; 12120: 			quad[1].i  				= mfd_screen_x_max;

  00e7c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e81	c1 e0 00	 shl	 eax, 0
  00e84	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00e89	f3 0f 11 84 05
	d8 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+16], xmm0

; 12121: 			quad[1].j  				= mfd_screen_y_min;

  00e92	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e97	c1 e0 00	 shl	 eax, 0
  00e9a	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00e9f	f3 0f 11 84 05
	dc fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+20], xmm0

; 12122: 			quad[1].z  				= 0.5;

  00ea8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00ead	c1 e0 00	 shl	 eax, 0
  00eb0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00eb8	f3 0f 11 84 05
	d0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+8], xmm0

; 12123: 			quad[1].q  				= 0.5;

  00ec1	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00ec6	c1 e0 00	 shl	 eax, 0
  00ec9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00ed1	f3 0f 11 84 05
	d4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+12], xmm0

; 12124: 			quad[1].u  				= 1.0;

  00eda	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00edf	c1 e0 00	 shl	 eax, 0
  00ee2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00eea	f3 0f 11 84 05
	e0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+24], xmm0

; 12125: 			quad[1].v  				= 0.0;

  00ef3	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00ef8	c1 e0 00	 shl	 eax, 0
  00efb	0f 57 c0	 xorps	 xmm0, xmm0
  00efe	f3 0f 11 84 05
	e4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+28], xmm0

; 12126: 
; 12127: 			quad[2].i				= mfd_screen_x_max;

  00f07	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f0c	d1 e0		 shl	 eax, 1
  00f0e	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00f13	f3 0f 11 84 05
	d8 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+16], xmm0

; 12128: 			quad[2].j  				= mfd_screen_y_max;

  00f1c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f21	d1 e0		 shl	 eax, 1
  00f23	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00f28	f3 0f 11 84 05
	dc fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+20], xmm0

; 12129: 			quad[2].z  				= 0.5;

  00f31	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f36	d1 e0		 shl	 eax, 1
  00f38	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00f40	f3 0f 11 84 05
	d0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+8], xmm0

; 12130: 			quad[2].q  				= 0.5;

  00f49	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f4e	d1 e0		 shl	 eax, 1
  00f50	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00f58	f3 0f 11 84 05
	d4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+12], xmm0

; 12131: 			quad[2].u  				= 1.0;

  00f61	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f66	d1 e0		 shl	 eax, 1
  00f68	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00f70	f3 0f 11 84 05
	e0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+24], xmm0

; 12132: 			quad[2].v  				= 1.0;

  00f79	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f7e	d1 e0		 shl	 eax, 1
  00f80	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00f88	f3 0f 11 84 05
	e4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+28], xmm0

; 12133: 
; 12134: 			quad[3].i  				= mfd_screen_x_min;

  00f91	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f96	6b c8 03	 imul	 ecx, eax, 3
  00f99	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00f9e	f3 0f 11 84 0d
	d8 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+16], xmm0

; 12135: 			quad[3].j  				= mfd_screen_y_max;

  00fa7	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00fac	6b c8 03	 imul	 ecx, eax, 3
  00faf	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00fb4	f3 0f 11 84 0d
	dc fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+20], xmm0

; 12136: 			quad[3].z  				= 0.5;

  00fbd	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00fc2	6b c8 03	 imul	 ecx, eax, 3
  00fc5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00fcd	f3 0f 11 84 0d
	d0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+8], xmm0

; 12137: 			quad[3].q  				= 0.5;

  00fd6	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00fdb	6b c8 03	 imul	 ecx, eax, 3
  00fde	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00fe6	f3 0f 11 84 0d
	d4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+12], xmm0

; 12138: 			quad[3].u				= 0.0;

  00fef	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00ff4	6b c8 03	 imul	 ecx, eax, 3
  00ff7	0f 57 c0	 xorps	 xmm0, xmm0
  00ffa	f3 0f 11 84 0d
	e0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+24], xmm0

; 12139: 			quad[3].v				= 1.0;

  01003	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01008	6b c8 03	 imul	 ecx, eax, 3
  0100b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01013	f3 0f 11 84 0d
	e4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+28], xmm0

; 12140: 
; 12141: 			quad[0].next_vertex	= &quad[1];

  0101c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01021	c1 e0 00	 shl	 eax, 0
  01024	8d 8c 05 c8 fe
	ff ff		 lea	 ecx, DWORD PTR _quad$3[ebp+eax]
  0102b	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  01030	6b c2 00	 imul	 eax, edx, 0
  01033	89 8c 05 f0 fe
	ff ff		 mov	 DWORD PTR _quad$3[ebp+eax+40], ecx

; 12142: 			quad[1].next_vertex	= &quad[2];

  0103a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0103f	d1 e0		 shl	 eax, 1
  01041	8d 8c 05 c8 fe
	ff ff		 lea	 ecx, DWORD PTR _quad$3[ebp+eax]
  01048	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0104d	c1 e2 00	 shl	 edx, 0
  01050	89 8c 15 f0 fe
	ff ff		 mov	 DWORD PTR _quad$3[ebp+edx+40], ecx

; 12143: 			quad[2].next_vertex	= &quad[3];

  01057	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0105c	6b c8 03	 imul	 ecx, eax, 3
  0105f	8d 94 0d c8 fe
	ff ff		 lea	 edx, DWORD PTR _quad$3[ebp+ecx]
  01066	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0106b	d1 e0		 shl	 eax, 1
  0106d	89 94 05 f0 fe
	ff ff		 mov	 DWORD PTR _quad$3[ebp+eax+40], edx

; 12144: 			quad[3].next_vertex	= NULL;

  01074	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01079	6b c8 03	 imul	 ecx, eax, 3
  0107c	c7 84 0d f0 fe
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$3[ebp+ecx+40], 0

; 12145: 
; 12146: 			//
; 12147: 			////////////////////////////////////////
; 12148: 
; 12149: 			draw_wbuffered_flat_shaded_textured_polygon (quad, colour, specular);

  01087	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _specular$1[ebp]
  0108d	50		 push	 eax
  0108e	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _colour$2[ebp]
  01094	51		 push	 ecx
  01095	8d 95 c8 fe ff
	ff		 lea	 edx, DWORD PTR _quad$3[ebp]
  0109b	52		 push	 edx
  0109c	e8 00 00 00 00	 call	 ?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_flat_shaded_textured_polygon

; 12150: 
; 12151: 			set_d3d_transparency_off ();

  010a1	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 12152: 
; 12153: 			set_d3d_zbuffer_comparison (TRUE);

  010a6	6a 01		 push	 1
  010a8	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 12154: 
; 12155: 			set_d3d_culling (TRUE);

  010ad	6a 01		 push	 1
  010af	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 12156: 
; 12157: 			end_3d_scene ();

  010b4	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN44@draw_overl:
$LN1@draw_overl:

; 12158: 		}
; 12159: 	}
; 12160: }

  010b9	5f		 pop	 edi
  010ba	5e		 pop	 esi
  010bb	5b		 pop	 ebx
  010bc	8b e5		 mov	 esp, ebp
  010be	5d		 pop	 ebp
  010bf	c2 10 00	 ret	 16			; 00000010H
  010c2	66 90		 npad	 2
$LN48@draw_overl:
  010c4	00 00 00 00	 DD	 $LN11@draw_overl
  010c8	00 00 00 00	 DD	 $LN13@draw_overl
  010cc	00 00 00 00	 DD	 $LN15@draw_overl
  010d0	00 00 00 00	 DD	 $LN17@draw_overl
  010d4	00 00 00 00	 DD	 $LN19@draw_overl
  010d8	00 00 00 00	 DD	 $LN19@draw_overl
  010dc	00 00 00 00	 DD	 $LN19@draw_overl
  010e0	00 00 00 00	 DD	 $LN2@draw_overl
  010e4	00 00 00 00	 DD	 $LN31@draw_overl
  010e8	00 00 00 00	 DD	 $LN34@draw_overl
  010ec	00 00 00 00	 DD	 $LN36@draw_overl
  010f0	00 00 00 00	 DD	 $LN38@draw_overl
  010f4	00 00 00 00	 DD	 $LN40@draw_overl
  010f8	00 00 00 00	 DD	 $LN42@draw_overl
?draw_overlaid_apache_mfd@@YGXMMMW4MFD_LOCATIONS@@@Z ENDP ; draw_overlaid_apache_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_apache_virtual_cockpit_ort_view@@YGXHH@Z
_TEXT	SEGMENT
tv138 = -88						; size = 4
tv65 = -88						; size = 4
_damaged$ = -20						; size = 4
_black$ = -16						; size = 4
_system$ = -12						; size = 4
_eo$ = -8						; size = 4
_fov$ = -4						; size = 4
_x_min$ = 8						; size = 4
_x_max$ = 12						; size = 4
?draw_apache_virtual_cockpit_ort_view@@YGXHH@Z PROC	; draw_apache_virtual_cockpit_ort_view, COMDAT

; 3079 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3080 : 	float
; 3081 : 		fov;
; 3082 : 
; 3083 : 	eo_params*
; 3084 : 		eo;
; 3085 : 
; 3086 : 	target_acquisition_systems
; 3087 : 		system;
; 3088 : 
; 3089 : 	rgb_colour
; 3090 : 		black;
; 3091 : 
; 3092 : 	int
; 3093 : 		damaged = FALSE;

  00009	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _damaged$[ebp], 0

; 3094 : 
; 3095 : 	switch (get_mfd_mode_for_eo_sensor())

  00010	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00015	89 45 a8	 mov	 DWORD PTR tv65[ebp], eax
  00018	83 7d a8 05	 cmp	 DWORD PTR tv65[ebp], 5
  0001c	74 24		 je	 SHORT $LN5@draw_apach
  0001e	83 7d a8 06	 cmp	 DWORD PTR tv65[ebp], 6
  00022	74 3c		 je	 SHORT $LN6@draw_apach

; 3096 : 	{
; 3097 : 	default:
; 3098 : 	case MFD_MODE_FLIR:
; 3099 : 		eo = &apache_flir;

  00024	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _eo$[ebp], OFFSET ?apache_flir@@3UEO_PARAMS@@A ; apache_flir

; 3100 : 		system = TARGET_ACQUISITION_SYSTEM_FLIR;

  0002b	c7 45 f4 03 00
	00 00		 mov	 DWORD PTR _system$[ebp], 3

; 3101 : 		damaged = apache_damage.flir;

  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  00037	c1 e8 02	 shr	 eax, 2
  0003a	83 e0 01	 and	 eax, 1
  0003d	89 45 ec	 mov	 DWORD PTR _damaged$[ebp], eax

; 3102 : 		break;

  00040	eb 3a		 jmp	 SHORT $LN2@draw_apach
$LN5@draw_apach:

; 3103 : 	case MFD_MODE_DTV:
; 3104 : 		eo = &apache_dtv;

  00042	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _eo$[ebp], OFFSET ?apache_dtv@@3UEO_PARAMS@@A ; apache_dtv

; 3105 : 		system = TARGET_ACQUISITION_SYSTEM_DTV;

  00049	c7 45 f4 04 00
	00 00		 mov	 DWORD PTR _system$[ebp], 4

; 3106 : 		damaged = apache_damage.dtv;

  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  00055	c1 e8 03	 shr	 eax, 3
  00058	83 e0 01	 and	 eax, 1
  0005b	89 45 ec	 mov	 DWORD PTR _damaged$[ebp], eax

; 3107 : 		break;

  0005e	eb 1c		 jmp	 SHORT $LN2@draw_apach
$LN6@draw_apach:

; 3108 : 	case MFD_MODE_DVO:
; 3109 : 		eo = &apache_dvo;

  00060	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _eo$[ebp], OFFSET ?apache_dvo@@3UEO_PARAMS@@A ; apache_dvo

; 3110 : 		system = TARGET_ACQUISITION_SYSTEM_DVO;

  00067	c7 45 f4 05 00
	00 00		 mov	 DWORD PTR _system$[ebp], 5

; 3111 : 		damaged = apache_damage.dvo;

  0006e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  00073	c1 e8 04	 shr	 eax, 4
  00076	83 e0 01	 and	 eax, 1
  00079	89 45 ec	 mov	 DWORD PTR _damaged$[ebp], eax
$LN2@draw_apach:

; 3112 : 		break;
; 3113 : 	}
; 3114 : 
; 3115 : 	black.r = 0;

  0007c	c6 45 f2 00	 mov	 BYTE PTR _black$[ebp+2], 0

; 3116 : 	black.g = 0;

  00080	c6 45 f1 00	 mov	 BYTE PTR _black$[ebp+1], 0

; 3117 : 	black.b = 0;

  00084	c6 45 f0 00	 mov	 BYTE PTR _black$[ebp], 0

; 3118 : 	black.a = 255;

  00088	c6 45 f3 ff	 mov	 BYTE PTR _black$[ebp+3], 255 ; 000000ffH

; 3119 : 
; 3120 : 	// clear background, since we won't be drawing the 3D view over the entire screen
; 3121 : 	set_block(0, 0, full_screen_x_max, full_screen_y_max, black);

  0008c	8b 45 f0	 mov	 eax, DWORD PTR _black$[ebp]
  0008f	50		 push	 eax
  00090	f3 0f 2c 0d 00
	00 00 00	 cvttss2si ecx, DWORD PTR ?full_screen_y_max@@3MA
  00098	51		 push	 ecx
  00099	f3 0f 2c 15 00
	00 00 00	 cvttss2si edx, DWORD PTR ?full_screen_x_max@@3MA
  000a1	52		 push	 edx
  000a2	6a 00		 push	 0
  000a4	6a 00		 push	 0
  000a6	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 3122 : 
; 3123 : 	if (!damaged)

  000ab	83 7d ec 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  000af	75 79		 jne	 SHORT $LN7@draw_apach

; 3124 : 	{
; 3125 : 		fov = rad(get_eo_sensor_fov(eo, system));

  000b1	8b 45 f4	 mov	 eax, DWORD PTR _system$[ebp]
  000b4	50		 push	 eax
  000b5	8b 4d f8	 mov	 ecx, DWORD PTR _eo$[ebp]
  000b8	51		 push	 ecx
  000b9	e8 00 00 00 00	 call	 ?get_eo_sensor_fov@@YGMPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; get_eo_sensor_fov
  000be	d9 5d a8	 fstp	 DWORD PTR tv138[ebp]
  000c1	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR tv138[ebp]
  000c6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  000ce	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0

; 3126 : 
; 3127 : 		set_eo_view_params(system, x_min, full_screen_y_min, x_max, full_screen_y_max, fov, fov);

  000d3	51		 push	 ecx
  000d4	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fov$[ebp]
  000d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000de	51		 push	 ecx
  000df	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fov$[ebp]
  000e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e9	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?full_screen_y_max@@3MA
  000f1	50		 push	 eax
  000f2	8b 4d 0c	 mov	 ecx, DWORD PTR _x_max$[ebp]
  000f5	51		 push	 ecx
  000f6	f3 0f 2c 15 00
	00 00 00	 cvttss2si edx, DWORD PTR ?full_screen_y_min@@3MA
  000fe	52		 push	 edx
  000ff	8b 45 08	 mov	 eax, DWORD PTR _x_min$[ebp]
  00102	50		 push	 eax
  00103	8b 4d f4	 mov	 ecx, DWORD PTR _system$[ebp]
  00106	51		 push	 ecx
  00107	e8 00 00 00 00	 call	 ?set_eo_view_params@@YGXW4TARGET_ACQUISITION_SYSTEMS@@HHHHMM@Z ; set_eo_view_params

; 3128 : 
; 3129 : 		draw_eo_3d_scene = TRUE;

  0010c	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 1 ; draw_eo_3d_scene

; 3130 : 		draw_main_3d_scene (&eo_vp);

  00116	68 00 00 00 00	 push	 OFFSET ?eo_vp@@3UVIEWPOINT@@A ; eo_vp
  0011b	e8 00 00 00 00	 call	 ?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z ; draw_main_3d_scene

; 3131 : 		draw_eo_3d_scene = FALSE;

  00120	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 0 ; draw_eo_3d_scene
$LN7@draw_apach:

; 3132 : 	}
; 3133 : }

  0012a	5f		 pop	 edi
  0012b	5e		 pop	 esi
  0012c	5b		 pop	 ebx
  0012d	8b e5		 mov	 esp, ebp
  0012f	5d		 pop	 ebp
  00130	c2 08 00	 ret	 8
?draw_apache_virtual_cockpit_ort_view@@YGXHH@Z ENDP	; draw_apache_virtual_cockpit_ort_view
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_apache_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv85 = -108						; size = 4
tv78 = -104						; size = 4
tv482 = -100						; size = 4
tv295 = -100						; size = 4
tv240 = -100						; size = 4
tv143 = -100						; size = 4
tv70 = -100						; size = 4
_width$1 = -32						; size = 4
_damaged$2 = -28					; size = 4
_width$3 = -24						; size = 4
_use_3d_texture$4 = -20					; size = 4
_is_pilot$ = -16					; size = 4
_export_screen$ = -12					; size = 4
_mfd_texture_screen$ = -8				; size = 4
_mfd_mode$ = -4						; size = 4
_location$ = 8						; size = 4
?draw_apache_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z PROC ; draw_apache_mfd_on_texture, COMDAT

; 11037: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 11038: 	mfd_modes
; 11039: 		*mfd_mode;
; 11040: 
; 11041: 	screen
; 11042: 		*mfd_texture_screen,
; 11043: 		*export_screen;
; 11044: 
; 11045: 	int
; 11046: 		is_pilot = (get_local_entity_int_value (get_pilot_entity (), INT_TYPE_CREW_ROLE) == CREW_ROLE_PILOT);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_entity@@3PAUENTITY@@A, 0 ; pilot_entity
  00010	74 0c		 je	 SHORT $LN100@draw_apach
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d 9c	 mov	 DWORD PTR tv70[ebp], ecx
  0001c	eb 21		 jmp	 SHORT $LN101@draw_apach
$LN100@draw_apach:
  0001e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_apache_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z@4JA
  00024	83 c2 09	 add	 edx, 9
  00027	52		 push	 edx
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00038	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN101@draw_apach:
  0003f	b9 01 00 00 00	 mov	 ecx, 1
  00044	85 c9		 test	 ecx, ecx
  00046	74 09		 je	 SHORT $LN102@draw_apach
  00048	c7 45 98 23 00
	00 00		 mov	 DWORD PTR tv78[ebp], 35	; 00000023H
  0004f	eb 21		 jmp	 SHORT $LN103@draw_apach
$LN102@draw_apach:
  00051	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_apache_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z@4JA
  00057	83 c2 09	 add	 edx, 9
  0005a	52		 push	 edx
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006b	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN103@draw_apach:
  00072	6a 23		 push	 35			; 00000023H
  00074	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  0007a	51		 push	 ecx
  0007b	69 55 9c 5c 04
	00 00		 imul	 edx, DWORD PTR tv70[ebp], 1116
  00082	8b 45 98	 mov	 eax, DWORD PTR tv78[ebp]
  00085	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  0008c	ff d1		 call	 ecx
  0008e	85 c0		 test	 eax, eax
  00090	75 09		 jne	 SHORT $LN104@draw_apach
  00092	c7 45 94 01 00
	00 00		 mov	 DWORD PTR tv85[ebp], 1
  00099	eb 07		 jmp	 SHORT $LN105@draw_apach
$LN104@draw_apach:
  0009b	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv85[ebp], 0
$LN105@draw_apach:
  000a2	8b 55 94	 mov	 edx, DWORD PTR tv85[ebp]
  000a5	89 55 f0	 mov	 DWORD PTR _is_pilot$[ebp], edx

; 11047: 
; 11048: 	ASSERT ((location == MFD_LOCATION_PILOT_LHS) || (location == MFD_LOCATION_PILOT_RHS)

  000a8	83 7d 08 00	 cmp	 DWORD PTR _location$[ebp], 0
  000ac	74 30		 je	 SHORT $LN8@draw_apach
  000ae	83 7d 08 01	 cmp	 DWORD PTR _location$[ebp], 1
  000b2	74 2a		 je	 SHORT $LN8@draw_apach
  000b4	83 7d 08 02	 cmp	 DWORD PTR _location$[ebp], 2
  000b8	74 24		 je	 SHORT $LN8@draw_apach
  000ba	83 7d 08 03	 cmp	 DWORD PTR _location$[ebp], 3
  000be	74 1e		 je	 SHORT $LN8@draw_apach
  000c0	83 7d 08 04	 cmp	 DWORD PTR _location$[ebp], 4
  000c4	74 18		 je	 SHORT $LN8@draw_apach
  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_apache_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z@4JA
  000cb	83 c0 0d	 add	 eax, 13			; 0000000dH
  000ce	50		 push	 eax
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_0LL@EJDGJHNL@?$CIlocation?5?$DN?$DN?5MFD_LOCATION_PILOT@
  000d9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@draw_apach:

; 11049: 			|| (location == MFD_LOCATION_CPG_LHS) || (location == MFD_LOCATION_CPG_RHS)
; 11050: 			|| (location == MFD_LOCATION_ORT));
; 11051: 
; 11052: 	update_pointer_position();

  000de	e8 00 00 00 00	 call	 ?update_pointer_position@@YGXXZ ; update_pointer_position

; 11053: 
; 11054: 	if (location == MFD_LOCATION_PILOT_LHS)

  000e3	83 7d 08 00	 cmp	 DWORD PTR _location$[ebp], 0
  000e7	75 22		 jne	 SHORT $LN9@draw_apach

; 11055: 	{
; 11056: 		mfd_mode = &lhs_mfd_mode;

  000e9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], OFFSET ?lhs_mfd_mode@@3W4MFD_MODES@@A

; 11057: 		mfd_texture_screen = lhs_mfd_texture_screen;

  000f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lhs_mfd_texture_screen@@3PAUSCREEN@@A
  000f5	89 45 f8	 mov	 DWORD PTR _mfd_texture_screen$[ebp], eax

; 11058: 		set_system_texture_screen (mfd_texture_screen, TEXTURE_INDEX_AVCKPT_DISPLAY_LHS_MFD);

  000f8	68 f8 00 00 00	 push	 248			; 000000f8H
  000fd	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00100	50		 push	 eax
  00101	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen
  00106	e9 23 01 00 00	 jmp	 $LN21@draw_apach
$LN9@draw_apach:

; 11059: 	}
; 11060: 	else if (location == MFD_LOCATION_PILOT_RHS)

  0010b	83 7d 08 01	 cmp	 DWORD PTR _location$[ebp], 1
  0010f	75 22		 jne	 SHORT $LN11@draw_apach

; 11061: 	{
; 11062: 		mfd_mode = &rhs_mfd_mode;

  00111	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], OFFSET ?rhs_mfd_mode@@3W4MFD_MODES@@A

; 11063: 		mfd_texture_screen = rhs_mfd_texture_screen;

  00118	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rhs_mfd_texture_screen@@3PAUSCREEN@@A
  0011d	89 45 f8	 mov	 DWORD PTR _mfd_texture_screen$[ebp], eax

; 11064: 		set_system_texture_screen (mfd_texture_screen, TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD);

  00120	68 f9 00 00 00	 push	 249			; 000000f9H
  00125	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00128	50		 push	 eax
  00129	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen
  0012e	e9 fb 00 00 00	 jmp	 $LN21@draw_apach
$LN11@draw_apach:

; 11065: 	}
; 11066: 	else if (location == MFD_LOCATION_CPG_LHS)

  00133	83 7d 08 02	 cmp	 DWORD PTR _location$[ebp], 2
  00137	75 22		 jne	 SHORT $LN13@draw_apach

; 11067: 	{
; 11068: 		mfd_mode = &cpg_lhs_mfd_mode;

  00139	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], OFFSET ?cpg_lhs_mfd_mode@@3W4MFD_MODES@@A

; 11069: 		mfd_texture_screen = cpg_lhs_mfd_texture_screen;

  00140	a1 00 00 00 00	 mov	 eax, DWORD PTR ?cpg_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  00145	89 45 f8	 mov	 DWORD PTR _mfd_texture_screen$[ebp], eax

; 11070: 		set_system_texture_screen (mfd_texture_screen, TEXTURE_INDEX_AVCKPT_DISPLAY_CPG_LHS_MFD);

  00148	68 08 09 00 00	 push	 2312			; 00000908H
  0014d	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen
  00156	e9 d3 00 00 00	 jmp	 $LN21@draw_apach
$LN13@draw_apach:

; 11071: 	}
; 11072: 	else if (location == MFD_LOCATION_CPG_RHS)

  0015b	83 7d 08 03	 cmp	 DWORD PTR _location$[ebp], 3
  0015f	75 22		 jne	 SHORT $LN15@draw_apach

; 11073: 	{
; 11074: 		mfd_mode = &cpg_rhs_mfd_mode;

  00161	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], OFFSET ?cpg_rhs_mfd_mode@@3W4MFD_MODES@@A

; 11075: 		mfd_texture_screen = cpg_rhs_mfd_texture_screen;

  00168	a1 00 00 00 00	 mov	 eax, DWORD PTR ?cpg_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  0016d	89 45 f8	 mov	 DWORD PTR _mfd_texture_screen$[ebp], eax

; 11076: 		set_system_texture_screen (mfd_texture_screen, TEXTURE_INDEX_AVCKPT_DISPLAY_CPG_RHS_MFD);

  00170	68 09 09 00 00	 push	 2313			; 00000909H
  00175	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00178	50		 push	 eax
  00179	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 11077: 	}
; 11078: 	else

  0017e	e9 ab 00 00 00	 jmp	 $LN21@draw_apach
$LN15@draw_apach:

; 11079: 	{
; 11080: 		int use_3d_texture = ort_mode != MFD_MODE_DAMAGED && ort_mode != MFD_MODE_OFF && !current_apache_eo_sensor_damaged();

  00183	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?ort_mode@@3W4MFD_MODES@@A, 1
  0018a	74 1b		 je	 SHORT $LN106@draw_apach
  0018c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ort_mode@@3W4MFD_MODES@@A, 0
  00193	74 12		 je	 SHORT $LN106@draw_apach
  00195	e8 00 00 00 00	 call	 ?current_apache_eo_sensor_damaged@@YGHXZ ; current_apache_eo_sensor_damaged
  0019a	85 c0		 test	 eax, eax
  0019c	75 09		 jne	 SHORT $LN106@draw_apach
  0019e	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv143[ebp], 1
  001a5	eb 07		 jmp	 SHORT $LN107@draw_apach
$LN106@draw_apach:
  001a7	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv143[ebp], 0
$LN107@draw_apach:
  001ae	8b 45 9c	 mov	 eax, DWORD PTR tv143[ebp]
  001b1	89 45 ec	 mov	 DWORD PTR _use_3d_texture$4[ebp], eax

; 11081: 		ASSERT(location == MFD_LOCATION_ORT);

  001b4	83 7d 08 04	 cmp	 DWORD PTR _location$[ebp], 4
  001b8	74 18		 je	 SHORT $LN17@draw_apach
  001ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_apache_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z@4JA
  001bf	83 c0 2c	 add	 eax, 44			; 0000002cH
  001c2	50		 push	 eax
  001c3	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  001c8	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@KPJGEEPP@location?5?$DN?$DN?5MFD_LOCATION_ORT@
  001cd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN17@draw_apach:

; 11082: 
; 11083: 		if (use_3d_texture)

  001d2	83 7d ec 00	 cmp	 DWORD PTR _use_3d_texture$4[ebp], 0
  001d6	74 14		 je	 SHORT $LN18@draw_apach

; 11084: 		{
; 11085: 			ort_mode = get_mfd_mode_for_eo_sensor();

  001d8	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  001dd	a3 00 00 00 00	 mov	 DWORD PTR ?ort_mode@@3W4MFD_MODES@@A, eax

; 11086: 			mfd_texture_screen = eo_3d_texture_screen;

  001e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  001e7	89 45 f8	 mov	 DWORD PTR _mfd_texture_screen$[ebp], eax

; 11087: 		}
; 11088: 		else

  001ea	eb 08		 jmp	 SHORT $LN19@draw_apach
$LN18@draw_apach:

; 11089: 			mfd_texture_screen = ort_texture_screen;

  001ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ort_texture_screen@@3PAUSCREEN@@A
  001f1	89 45 f8	 mov	 DWORD PTR _mfd_texture_screen$[ebp], eax
$LN19@draw_apach:

; 11090: 		mfd_mode = &ort_mode;

  001f4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], OFFSET ?ort_mode@@3W4MFD_MODES@@A

; 11091: 
; 11092: 		set_system_texture_screen (mfd_texture_screen, TEXTURE_INDEX_AVCKPT_DISPLAY_ORT);

  001fb	68 0a 09 00 00	 push	 2314			; 0000090aH
  00200	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00203	50		 push	 eax
  00204	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 11093: 
; 11094: 		if (use_3d_texture)

  00209	83 7d ec 00	 cmp	 DWORD PTR _use_3d_texture$4[ebp], 0
  0020d	74 1f		 je	 SHORT $LN21@draw_apach

; 11095: 			if (cpg_lhs_mfd_mode == ort_mode || cpg_rhs_mfd_mode == ort_mode)

  0020f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?cpg_lhs_mfd_mode@@3W4MFD_MODES@@A
  00214	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?ort_mode@@3W4MFD_MODES@@A
  0021a	74 0d		 je	 SHORT $LN22@draw_apach
  0021c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?cpg_rhs_mfd_mode@@3W4MFD_MODES@@A
  00221	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?ort_mode@@3W4MFD_MODES@@A
  00227	75 05		 jne	 SHORT $LN21@draw_apach
$LN22@draw_apach:

; 11096: 			{
; 11097: 				// use same texture as MFD if it also shows TADS
; 11098: 				return;

  00229	e9 51 09 00 00	 jmp	 $LN1@draw_apach
$LN21@draw_apach:

; 11099: 			}
; 11100: 	}
; 11101: 
; 11102: 	if (is_pilot
; 11103: 		&& pilot_tsd_underlay == TSD_UNDERLAY_TADS
; 11104: 		&& (d3d_can_render_to_texture)
; 11105: 		&& !current_apache_eo_sensor_damaged()
; 11106: 		&& (lhs_mfd_mode == MFD_MODE_TSD

  0022e	83 7d f0 00	 cmp	 DWORD PTR _is_pilot$[ebp], 0
  00232	74 3a		 je	 SHORT $LN23@draw_apach
  00234	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?pilot_tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 2
  0023b	75 31		 jne	 SHORT $LN23@draw_apach
  0023d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  00244	74 28		 je	 SHORT $LN23@draw_apach
  00246	e8 00 00 00 00	 call	 ?current_apache_eo_sensor_damaged@@YGHXZ ; current_apache_eo_sensor_damaged
  0024b	85 c0		 test	 eax, eax
  0024d	75 1f		 jne	 SHORT $LN23@draw_apach
  0024f	83 3d 00 00 00
	00 08		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 8
  00256	74 09		 je	 SHORT $LN25@draw_apach
  00258	83 3d 00 00 00
	00 08		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 8
  0025f	75 0d		 jne	 SHORT $LN23@draw_apach
$LN25@draw_apach:

; 11107: 			|| rhs_mfd_mode == MFD_MODE_TSD))
; 11108: 		tsd_tads_underlay_active = TRUE;

  00261	b8 01 00 00 00	 mov	 eax, 1
  00266	66 a3 00 00 00
	00		 mov	 WORD PTR ?tsd_tads_underlay_active@@3FA, ax

; 11109: 	else

  0026c	eb 08		 jmp	 SHORT $LN24@draw_apach
$LN23@draw_apach:

; 11110: 		tsd_tads_underlay_active = FALSE;

  0026e	33 c0		 xor	 eax, eax
  00270	66 a3 00 00 00
	00		 mov	 WORD PTR ?tsd_tads_underlay_active@@3FA, ax
$LN24@draw_apach:

; 11111: 
; 11112: 	////////////////////////////////////////
; 11113: 	//
; 11114: 	// set up MFD 2D environment
; 11115: 	//
; 11116: 	////////////////////////////////////////
; 11117: 
; 11118: 	set_2d_active_environment (mfd_env);

  00276	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0027b	50		 push	 eax
  0027c	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 11119: 
; 11120: 	//
; 11121: 	// window
; 11122: 	//
; 11123: 
; 11124: 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  00281	51		 push	 ecx
  00282	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  0028a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028f	51		 push	 ecx
  00290	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  00298	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029d	51		 push	 ecx
  0029e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  002a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ab	51		 push	 ecx
  002ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  002b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  002be	50		 push	 eax
  002bf	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 11125: 
; 11126: 	//
; 11127: 	// viewport
; 11128: 	//
; 11129: 
; 11130: 	ASSERT (mfd_viewport_size <= mfd_texture_size);

  002c4	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_texture_size@@3HA
  002cc	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  002d3	73 18		 jae	 SHORT $LN26@draw_apach
  002d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_apache_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z@4JA
  002da	83 c0 5d	 add	 eax, 93			; 0000005dH
  002dd	50		 push	 eax
  002de	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  002e3	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@IPIPCLFE@mfd_viewport_size?5?$DM?$DN?5mfd_textur@
  002e8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN26@draw_apach:

; 11131: 
; 11132: 	mfd_viewport_x_org = mfd_viewport_texture_x_org;

  002ed	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_viewport_texture_x_org@@3HA
  002f5	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 11133: 
; 11134: 	mfd_viewport_y_org = mfd_viewport_texture_y_org;

  002fd	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_viewport_texture_y_org@@3HA
  00305	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 11135: 
; 11136: 	mfd_viewport_x_min = mfd_viewport_x_org - (mfd_viewport_size * 0.5);

  0030d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  00315	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  0031d	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00325	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00329	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0032d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 11137: 
; 11138: 	mfd_viewport_y_min = mfd_viewport_y_org - (mfd_viewport_size * 0.5);

  00335	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_org@@3MA
  0033d	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00345	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0034d	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00351	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00355	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 11139: 
; 11140: 	mfd_viewport_x_max = mfd_viewport_x_org + (mfd_viewport_size * 0.5) - 0.001;

  0035d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  00365	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  0036d	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00375	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00379	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00381	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00385	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 11141: 
; 11142: 	mfd_viewport_y_max = mfd_viewport_y_org + (mfd_viewport_size * 0.5) - 0.001;

  0038d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_org@@3MA
  00395	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  0039d	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  003a5	f2 0f 58 c1	 addsd	 xmm0, xmm1
  003a9	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  003b1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003b5	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 11143: 
; 11144: 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  003bd	51		 push	 ecx
  003be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  003c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003cb	51		 push	 ecx
  003cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  003d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d9	51		 push	 ecx
  003da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  003e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e7	51		 push	 ecx
  003e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  003f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  003fa	50		 push	 eax
  003fb	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 11145: 
; 11146: 	if (*mfd_mode == MFD_MODE_AIR_RADAR && target_acquisition_system == TARGET_ACQUISITION_SYSTEM_GROUND_RADAR)

  00400	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00403	83 38 03	 cmp	 DWORD PTR [eax], 3
  00406	75 14		 jne	 SHORT $LN27@draw_apach
  00408	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 1 ; target_acquisition_system
  0040f	75 0b		 jne	 SHORT $LN27@draw_apach

; 11147: 		*mfd_mode = MFD_MODE_GROUND_RADAR;

  00411	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00414	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
  0041a	eb 1a		 jmp	 SHORT $LN29@draw_apach
$LN27@draw_apach:

; 11148: 	else if (*mfd_mode == MFD_MODE_GROUND_RADAR && target_acquisition_system == TARGET_ACQUISITION_SYSTEM_AIR_RADAR)

  0041c	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  0041f	83 38 02	 cmp	 DWORD PTR [eax], 2
  00422	75 12		 jne	 SHORT $LN29@draw_apach
  00424	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 2 ; target_acquisition_system
  0042b	75 09		 jne	 SHORT $LN29@draw_apach

; 11149: 		*mfd_mode = MFD_MODE_AIR_RADAR;

  0042d	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00430	c7 00 03 00 00
	00		 mov	 DWORD PTR [eax], 3
$LN29@draw_apach:

; 11150: 
; 11151: 	////////////////////////////////////////
; 11152: 	//
; 11153: 	// draw MFD display
; 11154: 	//
; 11155: 	////////////////////////////////////////
; 11156: 
; 11157: 	switch (*mfd_mode)

  00436	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00439	8b 08		 mov	 ecx, DWORD PTR [eax]
  0043b	89 4d 9c	 mov	 DWORD PTR tv240[ebp], ecx
  0043e	83 7d 9c 0d	 cmp	 DWORD PTR tv240[ebp], 13 ; 0000000dH
  00442	0f 87 a7 06 00
	00		 ja	 $LN2@draw_apach
  00448	8b 55 9c	 mov	 edx, DWORD PTR tv240[ebp]
  0044b	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN108@draw_apach[edx*4]
$LN30@draw_apach:

; 11158: 	{
; 11159: 		////////////////////////////////////////
; 11160: 		case MFD_MODE_OFF:
; 11161: 		////////////////////////////////////////
; 11162: 		{
; 11163: 			set_active_screen (mfd_texture_screen);

  00452	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00455	50		 push	 eax
  00456	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11164: 
; 11165: 			if (lock_screen (mfd_texture_screen))

  0045b	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0045e	50		 push	 eax
  0045f	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00464	85 c0		 test	 eax, eax
  00466	74 53		 je	 SHORT $LN31@draw_apach

; 11166: 			{
; 11167: 				int width;
; 11168: 				if (location == MFD_LOCATION_ORT)

  00468	83 7d 08 04	 cmp	 DWORD PTR _location$[ebp], 4
  0046c	75 0e		 jne	 SHORT $LN32@draw_apach

; 11169: 					width = mfd_texture_size * 2 - 1;

  0046e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  00473	8d 4c 00 ff	 lea	 ecx, DWORD PTR [eax+eax-1]
  00477	89 4d e8	 mov	 DWORD PTR _width$3[ebp], ecx

; 11170: 				else

  0047a	eb 0b		 jmp	 SHORT $LN33@draw_apach
$LN32@draw_apach:

; 11171: 					width = mfd_texture_size - 1;

  0047c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  00481	83 e8 01	 sub	 eax, 1
  00484	89 45 e8	 mov	 DWORD PTR _width$3[ebp], eax
$LN33@draw_apach:

; 11172: 
; 11173: 				set_block (0, 0, width, mfd_texture_size - 1, off_mfd_colour);

  00487	a1 00 00 00 00	 mov	 eax, DWORD PTR ?off_mfd_colour@@3UREAL_COLOUR@@A
  0048c	50		 push	 eax
  0048d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00493	83 e9 01	 sub	 ecx, 1
  00496	51		 push	 ecx
  00497	8b 55 e8	 mov	 edx, DWORD PTR _width$3[ebp]
  0049a	52		 push	 edx
  0049b	6a 00		 push	 0
  0049d	6a 00		 push	 0
  0049f	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11174: 
; 11175: 				draw_layout_grid ();

  004a4	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11176: 
; 11177: 				flush_screen_texture_graphics (mfd_texture_screen);

  004a9	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  004ac	50		 push	 eax
  004ad	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11178: 
; 11179: 				unlock_screen (mfd_texture_screen);

  004b2	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  004b5	50		 push	 eax
  004b6	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN31@draw_apach:

; 11180: 			}
; 11181: 
; 11182: 			break;

  004bb	e9 2f 06 00 00	 jmp	 $LN2@draw_apach
$LN34@draw_apach:

; 11183: 		}
; 11184: 		////////////////////////////////////////
; 11185: 		case MFD_MODE_DAMAGED:
; 11186: 		////////////////////////////////////////
; 11187: 		{
; 11188: 			set_active_screen (mfd_texture_screen);

  004c0	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  004c3	50		 push	 eax
  004c4	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11189: 
; 11190: 			if (lock_screen (mfd_texture_screen))

  004c9	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  004cc	50		 push	 eax
  004cd	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  004d2	85 c0		 test	 eax, eax
  004d4	74 3f		 je	 SHORT $LN35@draw_apach

; 11191: 			{
; 11192: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  004d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  004db	50		 push	 eax
  004dc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  004e2	83 e9 01	 sub	 ecx, 1
  004e5	51		 push	 ecx
  004e6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  004ec	83 ea 01	 sub	 edx, 1
  004ef	52		 push	 edx
  004f0	6a 00		 push	 0
  004f2	6a 00		 push	 0
  004f4	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11193: 
; 11194: 				draw_layout_grid ();

  004f9	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11195: 
; 11196: 				draw_damaged_mfd ();

  004fe	e8 00 00 00 00	 call	 ?draw_damaged_mfd@@YGXXZ ; draw_damaged_mfd

; 11197: 
; 11198: 				flush_screen_texture_graphics (mfd_texture_screen);

  00503	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00506	50		 push	 eax
  00507	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11199: 
; 11200: 				unlock_screen (mfd_texture_screen);

  0050c	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0050f	50		 push	 eax
  00510	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN35@draw_apach:

; 11201: 			}
; 11202: 
; 11203: 			break;

  00515	e9 d5 05 00 00	 jmp	 $LN2@draw_apach
$LN36@draw_apach:

; 11204: 		}
; 11205: 		////////////////////////////////////////
; 11206: 		case MFD_MODE_GROUND_RADAR:
; 11207: 		////////////////////////////////////////
; 11208: 		{
; 11209: 			set_active_screen (mfd_texture_screen);

  0051a	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0051d	50		 push	 eax
  0051e	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11210: 
; 11211: 			if (lock_screen (mfd_texture_screen))

  00523	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00526	50		 push	 eax
  00527	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0052c	85 c0		 test	 eax, eax
  0052e	74 3f		 je	 SHORT $LN37@draw_apach

; 11212: 			{
; 11213: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00530	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00535	50		 push	 eax
  00536	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  0053c	83 e9 01	 sub	 ecx, 1
  0053f	51		 push	 ecx
  00540	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00546	83 ea 01	 sub	 edx, 1
  00549	52		 push	 edx
  0054a	6a 00		 push	 0
  0054c	6a 00		 push	 0
  0054e	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11214: 
; 11215: 				draw_layout_grid ();

  00553	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11216: 
; 11217: 				draw_ground_radar_mfd ();

  00558	e8 00 00 00 00	 call	 ?draw_ground_radar_mfd@@YGXXZ ; draw_ground_radar_mfd

; 11218: 
; 11219: 				flush_screen_texture_graphics (mfd_texture_screen);

  0055d	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00560	50		 push	 eax
  00561	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11220: 
; 11221: 				unlock_screen (mfd_texture_screen);

  00566	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00569	50		 push	 eax
  0056a	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN37@draw_apach:

; 11222: 			}
; 11223: 
; 11224: 			break;

  0056f	e9 7b 05 00 00	 jmp	 $LN2@draw_apach
$LN38@draw_apach:

; 11225: 		}
; 11226: 		////////////////////////////////////////
; 11227: 		case MFD_MODE_AIR_RADAR:
; 11228: 		////////////////////////////////////////
; 11229: 		{
; 11230: 			set_active_screen (mfd_texture_screen);

  00574	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00577	50		 push	 eax
  00578	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11231: 
; 11232: 			if (lock_screen (mfd_texture_screen))

  0057d	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00580	50		 push	 eax
  00581	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00586	85 c0		 test	 eax, eax
  00588	74 3f		 je	 SHORT $LN39@draw_apach

; 11233: 			{
; 11234: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  0058a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0058f	50		 push	 eax
  00590	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00596	83 e9 01	 sub	 ecx, 1
  00599	51		 push	 ecx
  0059a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  005a0	83 ea 01	 sub	 edx, 1
  005a3	52		 push	 edx
  005a4	6a 00		 push	 0
  005a6	6a 00		 push	 0
  005a8	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11235: 
; 11236: 				draw_layout_grid ();

  005ad	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11237: 
; 11238: 				draw_air_radar_mfd ();

  005b2	e8 00 00 00 00	 call	 ?draw_air_radar_mfd@@YGXXZ ; draw_air_radar_mfd

; 11239: 
; 11240: 				flush_screen_texture_graphics (mfd_texture_screen);

  005b7	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  005ba	50		 push	 eax
  005bb	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11241: 
; 11242: 				unlock_screen (mfd_texture_screen);

  005c0	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  005c3	50		 push	 eax
  005c4	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN39@draw_apach:

; 11243: 			}
; 11244: 
; 11245: 			break;

  005c9	e9 21 05 00 00	 jmp	 $LN2@draw_apach
$LN40@draw_apach:

; 11246: 		}
; 11247: 		////////////////////////////////////////
; 11248: 		case MFD_MODE_FLIR:
; 11249: 		case MFD_MODE_DTV:
; 11250: 		case MFD_MODE_DVO:
; 11251: 		////////////////////////////////////////
; 11252: 		{
; 11253: 			int damaged;
; 11254: 
; 11255: 			switch (eo_sensor)

  005ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; eo_sensor
  005d3	89 45 9c	 mov	 DWORD PTR tv295[ebp], eax
  005d6	83 7d 9c 03	 cmp	 DWORD PTR tv295[ebp], 3
  005da	74 0e		 je	 SHORT $LN41@draw_apach
  005dc	83 7d 9c 04	 cmp	 DWORD PTR tv295[ebp], 4
  005e0	74 21		 je	 SHORT $LN42@draw_apach
  005e2	83 7d 9c 05	 cmp	 DWORD PTR tv295[ebp], 5
  005e6	74 34		 je	 SHORT $LN43@draw_apach
  005e8	eb 69		 jmp	 SHORT $LN4@draw_apach
$LN41@draw_apach:

; 11256: 			{
; 11257: 			case TARGET_ACQUISITION_SYSTEM_FLIR:
; 11258: 				*mfd_mode = MFD_MODE_FLIR;

  005ea	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  005ed	c7 00 04 00 00
	00		 mov	 DWORD PTR [eax], 4

; 11259: 				damaged = apache_damage.flir;

  005f3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  005f8	c1 e8 02	 shr	 eax, 2
  005fb	83 e0 01	 and	 eax, 1
  005fe	89 45 e4	 mov	 DWORD PTR _damaged$2[ebp], eax

; 11260: 				break;

  00601	eb 50		 jmp	 SHORT $LN4@draw_apach
$LN42@draw_apach:

; 11261: 			case TARGET_ACQUISITION_SYSTEM_DTV:
; 11262: 				*mfd_mode = MFD_MODE_DTV;

  00603	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00606	c7 00 05 00 00
	00		 mov	 DWORD PTR [eax], 5

; 11263: 				damaged = apache_damage.dtv;

  0060c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  00611	c1 e8 03	 shr	 eax, 3
  00614	83 e0 01	 and	 eax, 1
  00617	89 45 e4	 mov	 DWORD PTR _damaged$2[ebp], eax

; 11264: 				break;

  0061a	eb 37		 jmp	 SHORT $LN4@draw_apach
$LN43@draw_apach:

; 11265: 			case TARGET_ACQUISITION_SYSTEM_DVO:
; 11266: 				ASSERT(location == MFD_LOCATION_ORT);  // only ORT can view DVO

  0061c	83 7d 08 04	 cmp	 DWORD PTR _location$[ebp], 4
  00620	74 1a		 je	 SHORT $LN44@draw_apach
  00622	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_apache_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z@4JA
  00627	05 e5 00 00 00	 add	 eax, 229		; 000000e5H
  0062c	50		 push	 eax
  0062d	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00632	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@KPJGEEPP@location?5?$DN?$DN?5MFD_LOCATION_ORT@
  00637	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN44@draw_apach:

; 11267: 				*mfd_mode = MFD_MODE_DVO;

  0063c	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  0063f	c7 00 06 00 00
	00		 mov	 DWORD PTR [eax], 6

; 11268: 				damaged = apache_damage.dvo;

  00645	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  0064a	c1 e8 04	 shr	 eax, 4
  0064d	83 e0 01	 and	 eax, 1
  00650	89 45 e4	 mov	 DWORD PTR _damaged$2[ebp], eax
$LN4@draw_apach:

; 11269: 				break;
; 11270: 			}
; 11271: 
; 11272: 			if ((d3d_can_render_to_texture) && !damaged)

  00653	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  0065a	0f 84 4b 01 00
	00		 je	 $LN45@draw_apach
  00660	83 7d e4 00	 cmp	 DWORD PTR _damaged$2[ebp], 0
  00664	0f 85 41 01 00
	00		 jne	 $LN45@draw_apach

; 11273: 			{
; 11274: 				ASSERT (eo_3d_texture_screen);

  0066a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, 0
  00671	75 1a		 jne	 SHORT $LN47@draw_apach
  00673	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_apache_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z@4JA
  00678	05 ed 00 00 00	 add	 eax, 237		; 000000edH
  0067d	50		 push	 eax
  0067e	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00683	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
  00688	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN47@draw_apach:

; 11275: 
; 11276: 				if (location == MFD_LOCATION_PILOT_LHS)

  0068d	83 7d 08 00	 cmp	 DWORD PTR _location$[ebp], 0
  00691	75 12		 jne	 SHORT $LN48@draw_apach

; 11277: 					set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_AVCKPT_DISPLAY_LHS_MFD);

  00693	68 f8 00 00 00	 push	 248			; 000000f8H
  00698	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0069d	50		 push	 eax
  0069e	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen
  006a3	eb 5e		 jmp	 SHORT $LN56@draw_apach
$LN48@draw_apach:

; 11278: 				else if (location == MFD_LOCATION_PILOT_RHS)

  006a5	83 7d 08 01	 cmp	 DWORD PTR _location$[ebp], 1
  006a9	75 12		 jne	 SHORT $LN50@draw_apach

; 11279: 					set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD);

  006ab	68 f9 00 00 00	 push	 249			; 000000f9H
  006b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  006b5	50		 push	 eax
  006b6	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen
  006bb	eb 46		 jmp	 SHORT $LN56@draw_apach
$LN50@draw_apach:

; 11280: 				else if (location == MFD_LOCATION_CPG_LHS)

  006bd	83 7d 08 02	 cmp	 DWORD PTR _location$[ebp], 2
  006c1	75 12		 jne	 SHORT $LN52@draw_apach

; 11281: 					set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_AVCKPT_DISPLAY_CPG_LHS_MFD);

  006c3	68 08 09 00 00	 push	 2312			; 00000908H
  006c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  006cd	50		 push	 eax
  006ce	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen
  006d3	eb 2e		 jmp	 SHORT $LN56@draw_apach
$LN52@draw_apach:

; 11282: 				else if (location == MFD_LOCATION_CPG_RHS)

  006d5	83 7d 08 03	 cmp	 DWORD PTR _location$[ebp], 3
  006d9	75 12		 jne	 SHORT $LN54@draw_apach

; 11283: 					set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_AVCKPT_DISPLAY_CPG_RHS_MFD);

  006db	68 09 09 00 00	 push	 2313			; 00000909H
  006e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  006e5	50		 push	 eax
  006e6	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen
  006eb	eb 16		 jmp	 SHORT $LN56@draw_apach
$LN54@draw_apach:

; 11284: 				else if (location == MFD_LOCATION_ORT)

  006ed	83 7d 08 04	 cmp	 DWORD PTR _location$[ebp], 4
  006f1	75 10		 jne	 SHORT $LN56@draw_apach

; 11285: 					set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_AVCKPT_DISPLAY_ORT);

  006f3	68 0a 09 00 00	 push	 2314			; 0000090aH
  006f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  006fd	50		 push	 eax
  006fe	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen
$LN56@draw_apach:

; 11286: 
; 11287: 				if (*mfd_mode == MFD_MODE_FLIR)

  00703	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00706	83 38 04	 cmp	 DWORD PTR [eax], 4
  00709	75 0e		 jne	 SHORT $LN57@draw_apach

; 11288: 					draw_3d_eo_display_on_texture (&apache_flir, TARGET_ACQUISITION_SYSTEM_FLIR);

  0070b	6a 03		 push	 3
  0070d	68 00 00 00 00	 push	 OFFSET ?apache_flir@@3UEO_PARAMS@@A ; apache_flir
  00712	e8 00 00 00 00	 call	 ?draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display_on_texture
  00717	eb 22		 jmp	 SHORT $LN60@draw_apach
$LN57@draw_apach:

; 11289: 				else if (*mfd_mode == MFD_MODE_DTV)

  00719	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  0071c	83 38 05	 cmp	 DWORD PTR [eax], 5
  0071f	75 0e		 jne	 SHORT $LN59@draw_apach

; 11290: 					draw_3d_eo_display_on_texture (&apache_dtv, TARGET_ACQUISITION_SYSTEM_DTV);

  00721	6a 04		 push	 4
  00723	68 00 00 00 00	 push	 OFFSET ?apache_dtv@@3UEO_PARAMS@@A ; apache_dtv
  00728	e8 00 00 00 00	 call	 ?draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display_on_texture

; 11291: 				else

  0072d	eb 0c		 jmp	 SHORT $LN60@draw_apach
$LN59@draw_apach:

; 11292: 					draw_3d_eo_display_on_texture (&apache_dvo, TARGET_ACQUISITION_SYSTEM_DVO);

  0072f	6a 05		 push	 5
  00731	68 00 00 00 00	 push	 OFFSET ?apache_dvo@@3UEO_PARAMS@@A ; apache_dvo
  00736	e8 00 00 00 00	 call	 ?draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display_on_texture
$LN60@draw_apach:

; 11293: 
; 11294: 				set_active_screen (eo_3d_texture_screen);

  0073b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00740	50		 push	 eax
  00741	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11295: 
; 11296: 				if (lock_screen (eo_3d_texture_screen))

  00746	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0074b	50		 push	 eax
  0074c	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00751	85 c0		 test	 eax, eax
  00753	74 4a		 je	 SHORT $LN61@draw_apach

; 11297: 				{
; 11298: 					draw_layout_grid ();

  00755	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11299: 
; 11300: 					if (*mfd_mode == MFD_MODE_FLIR)

  0075a	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  0075d	83 38 04	 cmp	 DWORD PTR [eax], 4
  00760	75 0b		 jne	 SHORT $LN62@draw_apach

; 11301: 						draw_2d_flir_mfd (TRUE, FALSE);

  00762	6a 00		 push	 0
  00764	6a 01		 push	 1
  00766	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXHH@Z ; draw_2d_flir_mfd
  0076b	eb 1c		 jmp	 SHORT $LN65@draw_apach
$LN62@draw_apach:

; 11302: 					else if (*mfd_mode == MFD_MODE_DTV)

  0076d	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00770	83 38 05	 cmp	 DWORD PTR [eax], 5
  00773	75 0b		 jne	 SHORT $LN64@draw_apach

; 11303: 						draw_2d_dtv_mfd (TRUE, FALSE);

  00775	6a 00		 push	 0
  00777	6a 01		 push	 1
  00779	e8 00 00 00 00	 call	 ?draw_2d_dtv_mfd@@YGXHH@Z ; draw_2d_dtv_mfd

; 11304: 					else

  0077e	eb 09		 jmp	 SHORT $LN65@draw_apach
$LN64@draw_apach:

; 11305: 						draw_2d_dvo_mfd (TRUE, FALSE);

  00780	6a 00		 push	 0
  00782	6a 01		 push	 1
  00784	e8 00 00 00 00	 call	 ?draw_2d_dvo_mfd@@YGXHH@Z ; draw_2d_dvo_mfd
$LN65@draw_apach:

; 11306: 
; 11307: 					flush_screen_texture_graphics (eo_3d_texture_screen);

  00789	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0078e	50		 push	 eax
  0078f	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11308: 					unlock_screen (eo_3d_texture_screen);

  00794	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00799	50		 push	 eax
  0079a	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN61@draw_apach:

; 11309: 				}
; 11310: 
; 11311: 				set_pilots_full_screen_params (FALSE);

  0079f	6a 00		 push	 0
  007a1	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params

; 11312: 			}
; 11313: 			else

  007a6	e9 9c 00 00 00	 jmp	 $LN66@draw_apach
$LN45@draw_apach:

; 11314: 			{
; 11315: 				set_active_screen (mfd_texture_screen);

  007ab	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  007ae	50		 push	 eax
  007af	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11316: 
; 11317: 				if (lock_screen (mfd_texture_screen))

  007b4	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  007b7	50		 push	 eax
  007b8	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  007bd	85 c0		 test	 eax, eax
  007bf	0f 84 82 00 00
	00		 je	 $LN66@draw_apach

; 11318: 				{
; 11319: 					int width;
; 11320: 					if (location == MFD_LOCATION_ORT)

  007c5	83 7d 08 04	 cmp	 DWORD PTR _location$[ebp], 4
  007c9	75 0e		 jne	 SHORT $LN67@draw_apach

; 11321: 						width = mfd_texture_size * 2 - 1;

  007cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  007d0	8d 4c 00 ff	 lea	 ecx, DWORD PTR [eax+eax-1]
  007d4	89 4d e0	 mov	 DWORD PTR _width$1[ebp], ecx

; 11322: 					else

  007d7	eb 0b		 jmp	 SHORT $LN68@draw_apach
$LN67@draw_apach:

; 11323: 						width = mfd_texture_size - 1;

  007d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  007de	83 e8 01	 sub	 eax, 1
  007e1	89 45 e0	 mov	 DWORD PTR _width$1[ebp], eax
$LN68@draw_apach:

; 11324: 
; 11325: 					set_block (0, 0, width, mfd_texture_size - 1, clear_mfd_colour);

  007e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  007e9	50		 push	 eax
  007ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  007f0	83 e9 01	 sub	 ecx, 1
  007f3	51		 push	 ecx
  007f4	8b 55 e0	 mov	 edx, DWORD PTR _width$1[ebp]
  007f7	52		 push	 edx
  007f8	6a 00		 push	 0
  007fa	6a 00		 push	 0
  007fc	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11326: 
; 11327: 					draw_layout_grid ();

  00801	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11328: 
; 11329: 					if (*mfd_mode == MFD_MODE_FLIR)

  00806	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00809	83 38 04	 cmp	 DWORD PTR [eax], 4
  0080c	75 0b		 jne	 SHORT $LN69@draw_apach

; 11330: 						draw_2d_flir_mfd (FALSE, FALSE);

  0080e	6a 00		 push	 0
  00810	6a 00		 push	 0
  00812	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXHH@Z ; draw_2d_flir_mfd
  00817	eb 1c		 jmp	 SHORT $LN72@draw_apach
$LN69@draw_apach:

; 11331: 					else if (*mfd_mode == MFD_MODE_DTV)

  00819	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  0081c	83 38 05	 cmp	 DWORD PTR [eax], 5
  0081f	75 0b		 jne	 SHORT $LN71@draw_apach

; 11332: 						draw_2d_dtv_mfd (FALSE, FALSE);

  00821	6a 00		 push	 0
  00823	6a 00		 push	 0
  00825	e8 00 00 00 00	 call	 ?draw_2d_dtv_mfd@@YGXHH@Z ; draw_2d_dtv_mfd

; 11333: 					else

  0082a	eb 09		 jmp	 SHORT $LN72@draw_apach
$LN71@draw_apach:

; 11334: 						draw_2d_dvo_mfd (FALSE, FALSE);

  0082c	6a 00		 push	 0
  0082e	6a 00		 push	 0
  00830	e8 00 00 00 00	 call	 ?draw_2d_dvo_mfd@@YGXHH@Z ; draw_2d_dvo_mfd
$LN72@draw_apach:

; 11335: 
; 11336: 					flush_screen_texture_graphics (mfd_texture_screen);

  00835	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00838	50		 push	 eax
  00839	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11337: 
; 11338: 					unlock_screen (mfd_texture_screen);

  0083e	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00841	50		 push	 eax
  00842	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN66@draw_apach:

; 11339: 				}
; 11340: 			}
; 11341: 
; 11342: 			break;

  00847	e9 a3 02 00 00	 jmp	 $LN2@draw_apach
$LN73@draw_apach:

; 11343: 		}
; 11344: 		////////////////////////////////////////
; 11345: 		case MFD_MODE_TSD:
; 11346: 		////////////////////////////////////////
; 11347: 		{
; 11348: 			if (tsd_tads_underlay_active)

  0084c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?tsd_tads_underlay_active@@3FA
  00853	85 c0		 test	 eax, eax
  00855	74 68		 je	 SHORT $LN74@draw_apach

; 11349: 			{
; 11350: 				if (location == MFD_LOCATION_PILOT_LHS)

  00857	83 7d 08 00	 cmp	 DWORD PTR _location$[ebp], 0
  0085b	75 12		 jne	 SHORT $LN75@draw_apach

; 11351: 					set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_AVCKPT_DISPLAY_LHS_MFD);

  0085d	68 f8 00 00 00	 push	 248			; 000000f8H
  00862	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00867	50		 push	 eax
  00868	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen
  0086d	eb 25		 jmp	 SHORT $LN78@draw_apach
$LN75@draw_apach:

; 11352: 				else if (location == MFD_LOCATION_PILOT_RHS)

  0086f	83 7d 08 01	 cmp	 DWORD PTR _location$[ebp], 1
  00873	75 12		 jne	 SHORT $LN77@draw_apach

; 11353: 					set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD);

  00875	68 f9 00 00 00	 push	 249			; 000000f9H
  0087a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0087f	50		 push	 eax
  00880	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 11354: 				else

  00885	eb 0d		 jmp	 SHORT $LN78@draw_apach
$LN77@draw_apach:

; 11355: 					debug_fatal("Only pilot's MFDs support TADS underlay!");

  00887	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@CEJBLLFD@Only?5pilot?8s?5MFDs?5support?5TADS?5@
  0088c	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00891	83 c4 04	 add	 esp, 4
$LN78@draw_apach:

; 11356: 
; 11357: 				if (eo_sensor == TARGET_ACQUISITION_SYSTEM_FLIR)

  00894	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 3 ; eo_sensor
  0089b	75 0e		 jne	 SHORT $LN79@draw_apach

; 11358: 					draw_3d_eo_display_on_texture (&apache_flir, TARGET_ACQUISITION_SYSTEM_FLIR);

  0089d	6a 03		 push	 3
  0089f	68 00 00 00 00	 push	 OFFSET ?apache_flir@@3UEO_PARAMS@@A ; apache_flir
  008a4	e8 00 00 00 00	 call	 ?draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display_on_texture

; 11359: 				else

  008a9	eb 0c		 jmp	 SHORT $LN80@draw_apach
$LN79@draw_apach:

; 11360: 					draw_3d_eo_display_on_texture (&apache_dtv, TARGET_ACQUISITION_SYSTEM_DTV);

  008ab	6a 04		 push	 4
  008ad	68 00 00 00 00	 push	 OFFSET ?apache_dtv@@3UEO_PARAMS@@A ; apache_dtv
  008b2	e8 00 00 00 00	 call	 ?draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display_on_texture
$LN80@draw_apach:

; 11361: 
; 11362: 				mfd_texture_screen = eo_3d_texture_screen;

  008b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  008bc	89 45 f8	 mov	 DWORD PTR _mfd_texture_screen$[ebp], eax
$LN74@draw_apach:

; 11363: 			}
; 11364: 
; 11365: 			set_active_screen (mfd_texture_screen);

  008bf	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  008c2	50		 push	 eax
  008c3	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11366: 
; 11367: 			if (lock_screen (mfd_texture_screen))

  008c8	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  008cb	50		 push	 eax
  008cc	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  008d1	85 c0		 test	 eax, eax
  008d3	74 45		 je	 SHORT $LN81@draw_apach

; 11368: 			{
; 11369: 				if (!tsd_tads_underlay_active)

  008d5	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?tsd_tads_underlay_active@@3FA
  008dc	85 c0		 test	 eax, eax
  008de	75 23		 jne	 SHORT $LN82@draw_apach

; 11370: 					set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_green_mfd_colour);

  008e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_green_mfd_colour@@3UREAL_COLOUR@@A
  008e5	50		 push	 eax
  008e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  008ec	83 e9 01	 sub	 ecx, 1
  008ef	51		 push	 ecx
  008f0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  008f6	83 ea 01	 sub	 edx, 1
  008f9	52		 push	 edx
  008fa	6a 00		 push	 0
  008fc	6a 00		 push	 0
  008fe	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block
$LN82@draw_apach:

; 11371: 
; 11372: 				draw_tactical_situation_display_mfd ();

  00903	e8 00 00 00 00	 call	 ?draw_tactical_situation_display_mfd@@YGXXZ ; draw_tactical_situation_display_mfd

; 11373: 
; 11374: 				flush_screen_texture_graphics (mfd_texture_screen);

  00908	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0090b	50		 push	 eax
  0090c	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11375: 
; 11376: 				unlock_screen (mfd_texture_screen);

  00911	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00914	50		 push	 eax
  00915	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN81@draw_apach:

; 11377: 			}
; 11378: 
; 11379: 			if (tsd_tads_underlay_active)

  0091a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?tsd_tads_underlay_active@@3FA
  00921	85 c0		 test	 eax, eax
  00923	74 07		 je	 SHORT $LN83@draw_apach

; 11380: 				set_pilots_full_screen_params (FALSE);

  00925	6a 00		 push	 0
  00927	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params
$LN83@draw_apach:

; 11381: 
; 11382: 			break;

  0092c	e9 be 01 00 00	 jmp	 $LN2@draw_apach
$LN84@draw_apach:

; 11383: 		}
; 11384: 		////////////////////////////////////////
; 11385: 		case MFD_MODE_ASE:
; 11386: 		////////////////////////////////////////
; 11387: 		{
; 11388: 			set_active_screen (mfd_texture_screen);

  00931	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00934	50		 push	 eax
  00935	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11389: 
; 11390: 			if (lock_screen (mfd_texture_screen))

  0093a	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0093d	50		 push	 eax
  0093e	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00943	85 c0		 test	 eax, eax
  00945	74 3f		 je	 SHORT $LN85@draw_apach

; 11391: 			{
; 11392: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_green_mfd_colour);

  00947	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_green_mfd_colour@@3UREAL_COLOUR@@A
  0094c	50		 push	 eax
  0094d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00953	83 e9 01	 sub	 ecx, 1
  00956	51		 push	 ecx
  00957	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  0095d	83 ea 01	 sub	 edx, 1
  00960	52		 push	 edx
  00961	6a 00		 push	 0
  00963	6a 00		 push	 0
  00965	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11393: 
; 11394: 				draw_layout_grid ();

  0096a	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11395: 
; 11396: 				draw_aircraft_survivability_equipment_display_mfd ();

  0096f	e8 00 00 00 00	 call	 ?draw_aircraft_survivability_equipment_display_mfd@@YGXXZ ; draw_aircraft_survivability_equipment_display_mfd

; 11397: 
; 11398: 				flush_screen_texture_graphics (mfd_texture_screen);

  00974	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00977	50		 push	 eax
  00978	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11399: 
; 11400: 				unlock_screen (mfd_texture_screen);

  0097d	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00980	50		 push	 eax
  00981	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN85@draw_apach:

; 11401: 			}
; 11402: 
; 11403: 			break;

  00986	e9 64 01 00 00	 jmp	 $LN2@draw_apach
$LN86@draw_apach:

; 11404: 		}
; 11405: 		////////////////////////////////////////
; 11406: 		case MFD_MODE_WEAPON:
; 11407: 		////////////////////////////////////////
; 11408: 		{
; 11409: 			set_active_screen (mfd_texture_screen);

  0098b	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0098e	50		 push	 eax
  0098f	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11410: 
; 11411: 			if (lock_screen (mfd_texture_screen))

  00994	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00997	50		 push	 eax
  00998	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0099d	85 c0		 test	 eax, eax
  0099f	74 43		 je	 SHORT $LN87@draw_apach

; 11412: 			{
; 11413: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  009a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  009a6	50		 push	 eax
  009a7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  009ad	83 e9 01	 sub	 ecx, 1
  009b0	51		 push	 ecx
  009b1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  009b7	83 ea 01	 sub	 edx, 1
  009ba	52		 push	 edx
  009bb	6a 00		 push	 0
  009bd	6a 00		 push	 0
  009bf	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11414: 
; 11415: 				draw_layout_grid ();

  009c4	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11416: 
; 11417: 				draw_weapon_display_mfd (MFD_LOCATION_DONT_CARE, TRUE);

  009c9	6a 01		 push	 1
  009cb	6a ff		 push	 -1
  009cd	e8 00 00 00 00	 call	 ?draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z ; draw_weapon_display_mfd

; 11418: 
; 11419: 				flush_screen_texture_graphics (mfd_texture_screen);

  009d2	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  009d5	50		 push	 eax
  009d6	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11420: 
; 11421: 				unlock_screen (mfd_texture_screen);

  009db	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  009de	50		 push	 eax
  009df	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN87@draw_apach:

; 11422: 			}
; 11423: 
; 11424: 			break;

  009e4	e9 06 01 00 00	 jmp	 $LN2@draw_apach
$LN88@draw_apach:

; 11425: 		}
; 11426: 		////////////////////////////////////////
; 11427: 		case MFD_MODE_SYSTEM:
; 11428: 		////////////////////////////////////////
; 11429: 		{
; 11430: 			set_active_screen (mfd_texture_screen);

  009e9	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  009ec	50		 push	 eax
  009ed	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11431: 
; 11432: 			if (lock_screen (mfd_texture_screen))

  009f2	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  009f5	50		 push	 eax
  009f6	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  009fb	85 c0		 test	 eax, eax
  009fd	74 3f		 je	 SHORT $LN89@draw_apach

; 11433: 			{
; 11434: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  009ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00a04	50		 push	 eax
  00a05	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00a0b	83 e9 01	 sub	 ecx, 1
  00a0e	51		 push	 ecx
  00a0f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00a15	83 ea 01	 sub	 edx, 1
  00a18	52		 push	 edx
  00a19	6a 00		 push	 0
  00a1b	6a 00		 push	 0
  00a1d	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11435: 
; 11436: 				draw_layout_grid ();

  00a22	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11437: 
; 11438: 				draw_system_display_mfd ();

  00a27	e8 00 00 00 00	 call	 ?draw_system_display_mfd@@YGXXZ ; draw_system_display_mfd

; 11439: 
; 11440: 				flush_screen_texture_graphics (mfd_texture_screen);

  00a2c	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00a2f	50		 push	 eax
  00a30	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11441: 
; 11442: 				unlock_screen (mfd_texture_screen);

  00a35	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00a38	50		 push	 eax
  00a39	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN89@draw_apach:

; 11443: 			}
; 11444: 
; 11445: 			break;

  00a3e	e9 ac 00 00 00	 jmp	 $LN2@draw_apach
$LN90@draw_apach:

; 11446: 		}
; 11447: 		////////////////////////////////////////
; 11448: 		case MFD_MODE_ENGINE:
; 11449: 		////////////////////////////////////////
; 11450: 		{
; 11451: 			set_active_screen (mfd_texture_screen);

  00a43	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00a46	50		 push	 eax
  00a47	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11452: 
; 11453: 			if (lock_screen (mfd_texture_screen))

  00a4c	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00a4f	50		 push	 eax
  00a50	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00a55	85 c0		 test	 eax, eax
  00a57	74 3f		 je	 SHORT $LN91@draw_apach

; 11454: 			{
; 11455: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00a59	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00a5e	50		 push	 eax
  00a5f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00a65	83 e9 01	 sub	 ecx, 1
  00a68	51		 push	 ecx
  00a69	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00a6f	83 ea 01	 sub	 edx, 1
  00a72	52		 push	 edx
  00a73	6a 00		 push	 0
  00a75	6a 00		 push	 0
  00a77	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11456: 
; 11457: 				draw_layout_grid ();

  00a7c	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11458: 
; 11459: 				draw_engine_display_mfd ();

  00a81	e8 00 00 00 00	 call	 ?draw_engine_display_mfd@@YGXXZ ; draw_engine_display_mfd

; 11460: 
; 11461: 				flush_screen_texture_graphics (mfd_texture_screen);

  00a86	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00a89	50		 push	 eax
  00a8a	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11462: 
; 11463: 				unlock_screen (mfd_texture_screen);

  00a8f	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00a92	50		 push	 eax
  00a93	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN91@draw_apach:

; 11464: 			}
; 11465: 
; 11466: 			break;

  00a98	eb 55		 jmp	 SHORT $LN2@draw_apach
$LN92@draw_apach:

; 11467: 		}
; 11468: 		////////////////////////////////////////
; 11469: 		case MFD_MODE_FLIGHT:
; 11470: 		////////////////////////////////////////
; 11471: 		{
; 11472: 			set_active_screen (mfd_texture_screen);

  00a9a	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00a9d	50		 push	 eax
  00a9e	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11473: 
; 11474: 			if (lock_screen (mfd_texture_screen))

  00aa3	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00aa6	50		 push	 eax
  00aa7	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00aac	85 c0		 test	 eax, eax
  00aae	74 3f		 je	 SHORT $LN93@draw_apach

; 11475: 			{
; 11476: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_green_mfd_colour);

  00ab0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_green_mfd_colour@@3UREAL_COLOUR@@A
  00ab5	50		 push	 eax
  00ab6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00abc	83 e9 01	 sub	 ecx, 1
  00abf	51		 push	 ecx
  00ac0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00ac6	83 ea 01	 sub	 edx, 1
  00ac9	52		 push	 edx
  00aca	6a 00		 push	 0
  00acc	6a 00		 push	 0
  00ace	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11477: 
; 11478: 				draw_layout_grid ();

  00ad3	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11479: 
; 11480: 				draw_flight_display_mfd();

  00ad8	e8 00 00 00 00	 call	 ?draw_flight_display_mfd@@YGXXZ ; draw_flight_display_mfd

; 11481: 
; 11482: 				flush_screen_texture_graphics (mfd_texture_screen);

  00add	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00ae0	50		 push	 eax
  00ae1	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11483: 
; 11484: 				unlock_screen (mfd_texture_screen);

  00ae6	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00ae9	50		 push	 eax
  00aea	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN93@draw_apach:
$LN2@draw_apach:

; 11485: 			}
; 11486: 
; 11487: 			break;
; 11488: 		}
; 11489: 	}
; 11490: 	set_active_screen (video_screen);

  00aef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00af4	50		 push	 eax
  00af5	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11491: 	if(command_line_export_mfd)

  00afa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_export_mfd@@3HA, 0 ; command_line_export_mfd
  00b01	74 7c		 je	 SHORT $LN6@draw_apach

; 11492: 	{
; 11493: 		switch(location)

  00b03	8b 45 08	 mov	 eax, DWORD PTR _location$[ebp]
  00b06	89 45 9c	 mov	 DWORD PTR tv482[ebp], eax
  00b09	83 7d 9c 03	 cmp	 DWORD PTR tv482[ebp], 3
  00b0d	77 70		 ja	 SHORT $LN6@draw_apach
  00b0f	8b 4d 9c	 mov	 ecx, DWORD PTR tv482[ebp]
  00b12	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN109@draw_apach[ecx*4]
$LN95@draw_apach:

; 11494: 		{
; 11495: 		case MFD_LOCATION_PILOT_LHS:
; 11496: 			export_screen=create_screen_for_system_texture (TEXTURE_INDEX_AVCKPT_DISPLAY_LHS_MFD);

  00b19	68 f8 00 00 00	 push	 248			; 000000f8H
  00b1e	e8 00 00 00 00	 call	 ?create_screen_for_system_texture@@YGPAUSCREEN@@H@Z ; create_screen_for_system_texture
  00b23	89 45 f4	 mov	 DWORD PTR _export_screen$[ebp], eax

; 11497: 			copy_export_mfd(export_screen,NULL);

  00b26	6a 00		 push	 0
  00b28	8b 45 f4	 mov	 eax, DWORD PTR _export_screen$[ebp]
  00b2b	50		 push	 eax
  00b2c	e8 00 00 00 00	 call	 ?copy_export_mfd@@YGXPAUSCREEN@@0@Z ; copy_export_mfd

; 11498: 			break;

  00b31	eb 4c		 jmp	 SHORT $LN6@draw_apach
$LN96@draw_apach:

; 11499: 		case MFD_LOCATION_PILOT_RHS:
; 11500: 			export_screen=create_screen_for_system_texture (TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD);

  00b33	68 f9 00 00 00	 push	 249			; 000000f9H
  00b38	e8 00 00 00 00	 call	 ?create_screen_for_system_texture@@YGPAUSCREEN@@H@Z ; create_screen_for_system_texture
  00b3d	89 45 f4	 mov	 DWORD PTR _export_screen$[ebp], eax

; 11501: 			copy_export_mfd(NULL,export_screen);

  00b40	8b 45 f4	 mov	 eax, DWORD PTR _export_screen$[ebp]
  00b43	50		 push	 eax
  00b44	6a 00		 push	 0
  00b46	e8 00 00 00 00	 call	 ?copy_export_mfd@@YGXPAUSCREEN@@0@Z ; copy_export_mfd

; 11502: 			break;

  00b4b	eb 32		 jmp	 SHORT $LN6@draw_apach
$LN97@draw_apach:

; 11503: 		case MFD_LOCATION_CPG_LHS:
; 11504: 			export_screen=create_screen_for_system_texture (TEXTURE_INDEX_AVCKPT_DISPLAY_CPG_LHS_MFD);

  00b4d	68 08 09 00 00	 push	 2312			; 00000908H
  00b52	e8 00 00 00 00	 call	 ?create_screen_for_system_texture@@YGPAUSCREEN@@H@Z ; create_screen_for_system_texture
  00b57	89 45 f4	 mov	 DWORD PTR _export_screen$[ebp], eax

; 11505: 			copy_export_mfd(export_screen,NULL);

  00b5a	6a 00		 push	 0
  00b5c	8b 45 f4	 mov	 eax, DWORD PTR _export_screen$[ebp]
  00b5f	50		 push	 eax
  00b60	e8 00 00 00 00	 call	 ?copy_export_mfd@@YGXPAUSCREEN@@0@Z ; copy_export_mfd

; 11506: 			break;

  00b65	eb 18		 jmp	 SHORT $LN6@draw_apach
$LN98@draw_apach:

; 11507: 		case MFD_LOCATION_CPG_RHS:
; 11508: 			export_screen=create_screen_for_system_texture (TEXTURE_INDEX_AVCKPT_DISPLAY_CPG_RHS_MFD);

  00b67	68 09 09 00 00	 push	 2313			; 00000909H
  00b6c	e8 00 00 00 00	 call	 ?create_screen_for_system_texture@@YGPAUSCREEN@@H@Z ; create_screen_for_system_texture
  00b71	89 45 f4	 mov	 DWORD PTR _export_screen$[ebp], eax

; 11509: 			copy_export_mfd(NULL,export_screen);

  00b74	8b 45 f4	 mov	 eax, DWORD PTR _export_screen$[ebp]
  00b77	50		 push	 eax
  00b78	6a 00		 push	 0
  00b7a	e8 00 00 00 00	 call	 ?copy_export_mfd@@YGXPAUSCREEN@@0@Z ; copy_export_mfd
$LN6@draw_apach:
$LN1@draw_apach:

; 11510: 			break;
; 11511: 		}
; 11512: 	}
; 11513: }

  00b7f	5f		 pop	 edi
  00b80	5e		 pop	 esi
  00b81	5b		 pop	 ebx
  00b82	8b e5		 mov	 esp, ebp
  00b84	5d		 pop	 ebp
  00b85	c2 04 00	 ret	 4
$LN108@draw_apach:
  00b88	00 00 00 00	 DD	 $LN30@draw_apach
  00b8c	00 00 00 00	 DD	 $LN34@draw_apach
  00b90	00 00 00 00	 DD	 $LN36@draw_apach
  00b94	00 00 00 00	 DD	 $LN38@draw_apach
  00b98	00 00 00 00	 DD	 $LN40@draw_apach
  00b9c	00 00 00 00	 DD	 $LN40@draw_apach
  00ba0	00 00 00 00	 DD	 $LN40@draw_apach
  00ba4	00 00 00 00	 DD	 $LN2@draw_apach
  00ba8	00 00 00 00	 DD	 $LN73@draw_apach
  00bac	00 00 00 00	 DD	 $LN84@draw_apach
  00bb0	00 00 00 00	 DD	 $LN86@draw_apach
  00bb4	00 00 00 00	 DD	 $LN88@draw_apach
  00bb8	00 00 00 00	 DD	 $LN90@draw_apach
  00bbc	00 00 00 00	 DD	 $LN92@draw_apach
$LN109@draw_apach:
  00bc0	00 00 00 00	 DD	 $LN95@draw_apach
  00bc4	00 00 00 00	 DD	 $LN96@draw_apach
  00bc8	00 00 00 00	 DD	 $LN97@draw_apach
  00bcc	00 00 00 00	 DD	 $LN98@draw_apach
?draw_apache_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z ENDP ; draw_apache_mfd_on_texture
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?draw_apache_mfd_on_cockpit@@YGXMMHHW4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv231 = -352						; size = 4
_y_max$1 = -284						; size = 4
_x_max$2 = -280						; size = 4
_y_min$3 = -276						; size = 4
_x_min$4 = -272						; size = 4
_specular$5 = -268					; size = 4
_colour$6 = -264					; size = 4
_quad$7 = -260						; size = 256
_mfd_mode$ = -4						; size = 4
_x_org$ = 8						; size = 4
_y_org$ = 12						; size = 4
_large_mfd$ = 16					; size = 4
_draw_translucent_background$ = 20			; size = 4
_location$ = 24						; size = 4
?draw_apache_mfd_on_cockpit@@YGXMMHHW4MFD_LOCATIONS@@@Z PROC ; draw_apache_mfd_on_cockpit, COMDAT

; 9384 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 60 01 00
	00		 sub	 esp, 352		; 00000160H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 9385 : 	mfd_modes
; 9386 : 		*mfd_mode;
; 9387 : 
; 9388 : 	ASSERT ((location == MFD_LOCATION_PILOT_LHS) || (location == MFD_LOCATION_PILOT_RHS)

  0000c	83 7d 18 00	 cmp	 DWORD PTR _location$[ebp], 0
  00010	74 2a		 je	 SHORT $LN4@draw_apach
  00012	83 7d 18 01	 cmp	 DWORD PTR _location$[ebp], 1
  00016	74 24		 je	 SHORT $LN4@draw_apach
  00018	83 7d 18 02	 cmp	 DWORD PTR _location$[ebp], 2
  0001c	74 1e		 je	 SHORT $LN4@draw_apach
  0001e	83 7d 18 03	 cmp	 DWORD PTR _location$[ebp], 3
  00022	74 18		 je	 SHORT $LN4@draw_apach
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_apache_mfd_on_cockpit@@YGXMMHHW4MFD_LOCATIONS@@@Z@4JA
  00029	83 c0 05	 add	 eax, 5
  0002c	50		 push	 eax
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0JJ@KMOEPALN@?$CIlocation?5?$DN?$DN?5MFD_LOCATION_PILOT@
  00037	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_apach:

; 9389 : 			|| (location == MFD_LOCATION_CPG_LHS) || (location == MFD_LOCATION_CPG_RHS));
; 9390 : 
; 9391 : 	update_pointer_position();

  0003c	e8 00 00 00 00	 call	 ?update_pointer_position@@YGXXZ ; update_pointer_position

; 9392 : 
; 9393 : 	if (location == MFD_LOCATION_PILOT_LHS)

  00041	83 7d 18 00	 cmp	 DWORD PTR _location$[ebp], 0
  00045	75 09		 jne	 SHORT $LN5@draw_apach

; 9394 : 		mfd_mode = &lhs_mfd_mode;

  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], OFFSET ?lhs_mfd_mode@@3W4MFD_MODES@@A
  0004e	eb 25		 jmp	 SHORT $LN10@draw_apach
$LN5@draw_apach:

; 9395 : 	else if (location == MFD_LOCATION_PILOT_RHS)

  00050	83 7d 18 01	 cmp	 DWORD PTR _location$[ebp], 1
  00054	75 09		 jne	 SHORT $LN7@draw_apach

; 9396 : 		mfd_mode = &rhs_mfd_mode;

  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], OFFSET ?rhs_mfd_mode@@3W4MFD_MODES@@A
  0005d	eb 16		 jmp	 SHORT $LN10@draw_apach
$LN7@draw_apach:

; 9397 : 	else if (location == MFD_LOCATION_CPG_LHS)

  0005f	83 7d 18 02	 cmp	 DWORD PTR _location$[ebp], 2
  00063	75 09		 jne	 SHORT $LN9@draw_apach

; 9398 : 		mfd_mode = &cpg_lhs_mfd_mode;

  00065	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], OFFSET ?cpg_lhs_mfd_mode@@3W4MFD_MODES@@A

; 9399 : 	else

  0006c	eb 07		 jmp	 SHORT $LN10@draw_apach
$LN9@draw_apach:

; 9400 : 		mfd_mode = &cpg_rhs_mfd_mode;

  0006e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], OFFSET ?cpg_rhs_mfd_mode@@3W4MFD_MODES@@A
$LN10@draw_apach:

; 9401 : 
; 9402 : 	////////////////////////////////////////
; 9403 : 	//
; 9404 : 	// set up MFD 2D environment
; 9405 : 	//
; 9406 : 	////////////////////////////////////////
; 9407 : 
; 9408 : 	set_2d_active_environment (mfd_env);

  00075	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 9409 : 
; 9410 : 	//
; 9411 : 	// window
; 9412 : 	//
; 9413 : 
; 9414 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  00080	51		 push	 ecx
  00081	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  00089	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008e	51		 push	 ecx
  0008f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  00097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009c	51		 push	 ecx
  0009d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  000a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000aa	51		 push	 ecx
  000ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  000b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 9415 : 
; 9416 : 	//
; 9417 : 	// viewport
; 9418 : 	//
; 9419 : 
; 9420 : 	draw_large_mfd = large_mfd;

  000c3	8b 45 10	 mov	 eax, DWORD PTR _large_mfd$[ebp]
  000c6	a3 00 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, eax

; 9421 : 
; 9422 : 	if (draw_large_mfd)

  000cb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  000d2	74 12		 je	 SHORT $LN11@draw_apach

; 9423 : 	{
; 9424 : 		mfd_viewport_size = MFD_VIEWPORT_LARGE_SIZE;

  000d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  000dc	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 9425 : 	}
; 9426 : 	else

  000e4	eb 10		 jmp	 SHORT $LN12@draw_apach
$LN11@draw_apach:

; 9427 : 	{
; 9428 : 		mfd_viewport_size = MFD_VIEWPORT_SMALL_SIZE;

  000e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  000ee	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0
$LN12@draw_apach:

; 9429 : 	}
; 9430 : 
; 9431 : 	mfd_viewport_x_org = x_org;

  000f6	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_org$[ebp]
  000fb	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 9432 : 
; 9433 : 	mfd_viewport_y_org = y_org;

  00103	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_org$[ebp]
  00108	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 9434 : 
; 9435 : 	mfd_viewport_x_min = mfd_viewport_x_org - (mfd_viewport_size * 0.5);

  00110	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  00118	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00120	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00128	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0012c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00130	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 9436 : 
; 9437 : 	mfd_viewport_y_min = mfd_viewport_y_org - (mfd_viewport_size * 0.5);

  00138	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_org@@3MA
  00140	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00148	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00150	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00154	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00158	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 9438 : 
; 9439 : 	mfd_viewport_x_max = mfd_viewport_x_org + (mfd_viewport_size * 0.5) - 0.001;

  00160	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  00168	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00170	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00178	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0017c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00184	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00188	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 9440 : 
; 9441 : 	mfd_viewport_y_max = mfd_viewport_y_org + (mfd_viewport_size * 0.5) - 0.001;

  00190	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_org@@3MA
  00198	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  001a0	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  001a8	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001ac	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001b4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001b8	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 9442 : 
; 9443 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  001c0	51		 push	 ecx
  001c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  001c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ce	51		 push	 ecx
  001cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  001d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001dc	51		 push	 ecx
  001dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  001e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ea	51		 push	 ecx
  001eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  001f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001fd	50		 push	 eax
  001fe	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9444 : 
; 9445 : 	////////////////////////////////////////
; 9446 : 	//
; 9447 : 	// draw translucent background
; 9448 : 	//
; 9449 : 	////////////////////////////////////////
; 9450 : 
; 9451 : 	if (draw_translucent_background)

  00203	83 7d 14 00	 cmp	 DWORD PTR _draw_translucent_background$[ebp], 0
  00207	0f 84 28 03 00
	00		 je	 $LN17@draw_apach

; 9452 : 	{
; 9453 : 		if (!draw_large_mfd)

  0020d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00214	0f 85 1b 03 00
	00		 jne	 $LN17@draw_apach

; 9454 : 		{
; 9455 : 			if
; 9456 : 			(
; 9457 : 				(*mfd_mode == MFD_MODE_DAMAGED) ||
; 9458 : 				(*mfd_mode == MFD_MODE_GROUND_RADAR) ||
; 9459 : 				(*mfd_mode == MFD_MODE_AIR_RADAR) ||
; 9460 : 				(*mfd_mode == MFD_MODE_TSD) ||
; 9461 : 				(*mfd_mode == MFD_MODE_ASE) ||
; 9462 : 				(*mfd_mode == MFD_MODE_WEAPON) ||
; 9463 : 				(*mfd_mode == MFD_MODE_SYSTEM) ||

  0021a	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  0021d	83 38 01	 cmp	 DWORD PTR [eax], 1
  00220	74 3c		 je	 SHORT $LN16@draw_apach
  00222	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00225	83 38 02	 cmp	 DWORD PTR [eax], 2
  00228	74 34		 je	 SHORT $LN16@draw_apach
  0022a	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  0022d	83 38 03	 cmp	 DWORD PTR [eax], 3
  00230	74 2c		 je	 SHORT $LN16@draw_apach
  00232	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00235	83 38 08	 cmp	 DWORD PTR [eax], 8
  00238	74 24		 je	 SHORT $LN16@draw_apach
  0023a	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  0023d	83 38 09	 cmp	 DWORD PTR [eax], 9
  00240	74 1c		 je	 SHORT $LN16@draw_apach
  00242	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00245	83 38 0a	 cmp	 DWORD PTR [eax], 10	; 0000000aH
  00248	74 14		 je	 SHORT $LN16@draw_apach
  0024a	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  0024d	83 38 0b	 cmp	 DWORD PTR [eax], 11	; 0000000bH
  00250	74 0c		 je	 SHORT $LN16@draw_apach
  00252	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00255	83 38 0c	 cmp	 DWORD PTR [eax], 12	; 0000000cH
  00258	0f 85 d7 02 00
	00		 jne	 $LN17@draw_apach
$LN16@draw_apach:

; 9464 : 				(*mfd_mode == MFD_MODE_ENGINE)
; 9465 : 			)
; 9466 : 			{
; 9467 : 				vertex
; 9468 : 					quad[4];
; 9469 : 
; 9470 : 				real_colour
; 9471 : 					colour,
; 9472 : 					specular;
; 9473 : 
; 9474 : 				float
; 9475 : 					x_min,
; 9476 : 					y_min,
; 9477 : 					x_max,
; 9478 : 					y_max;
; 9479 : 
; 9480 : 				if (begin_3d_scene ())

  0025e	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  00263	85 c0		 test	 eax, eax
  00265	0f 84 ca 02 00
	00		 je	 $LN17@draw_apach

; 9481 : 				{
; 9482 : 					colour.red = 0;

  0026b	c6 85 fa fe ff
	ff 00		 mov	 BYTE PTR _colour$6[ebp+2], 0

; 9483 : 					colour.green = 0;

  00272	c6 85 f9 fe ff
	ff 00		 mov	 BYTE PTR _colour$6[ebp+1], 0

; 9484 : 					colour.blue = 0;

  00279	c6 85 f8 fe ff
	ff 00		 mov	 BYTE PTR _colour$6[ebp], 0

; 9485 : 					colour.alpha = 64;

  00280	c6 85 fb fe ff
	ff 40		 mov	 BYTE PTR _colour$6[ebp+3], 64 ; 00000040H

; 9486 : 
; 9487 : 					specular.red = 0;

  00287	c6 85 f6 fe ff
	ff 00		 mov	 BYTE PTR _specular$5[ebp+2], 0

; 9488 : 					specular.green = 0;

  0028e	c6 85 f5 fe ff
	ff 00		 mov	 BYTE PTR _specular$5[ebp+1], 0

; 9489 : 					specular.blue = 0;

  00295	c6 85 f4 fe ff
	ff 00		 mov	 BYTE PTR _specular$5[ebp], 0

; 9490 : 					specular.alpha = 255;

  0029c	c6 85 f7 fe ff
	ff ff		 mov	 BYTE PTR _specular$5[ebp+3], 255 ; 000000ffH

; 9491 : 
; 9492 : 					set_d3d_transparency_on ();

  002a3	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 9493 : 
; 9494 : 					set_d3d_zbuffer_comparison (FALSE);

  002a8	6a 00		 push	 0
  002aa	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 9495 : 
; 9496 : 					set_d3d_plain_renderstate ();

  002af	e8 00 00 00 00	 call	 ?set_d3d_plain_renderstate@@YGXXZ ; set_d3d_plain_renderstate

; 9497 : 
; 9498 : 					set_d3d_culling (FALSE);

  002b4	6a 00		 push	 0
  002b6	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 9499 : 
; 9500 : 					//
; 9501 : 					// match co-ordinates with small EO 3D display
; 9502 : 					//
; 9503 : 
; 9504 : 					x_min = mfd_viewport_x_min;

  002bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  002c3	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _x_min$4[ebp], xmm0

; 9505 : 					y_min = mfd_viewport_y_min;

  002cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  002d3	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _y_min$3[ebp], xmm0

; 9506 : 					x_max = x_min + 128.0;

  002db	f3 0f 5a 85 f0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _x_min$4[ebp]
  002e3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4060000000000000
  002eb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ef	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _x_max$2[ebp], xmm0

; 9507 : 					y_max = y_min + 128.0;

  002f7	f3 0f 5a 85 ec
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_min$3[ebp]
  002ff	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4060000000000000
  00307	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0030b	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR _y_max$1[ebp], xmm0

; 9508 : 
; 9509 : 					quad[0].i = x_min;

  00313	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00318	6b c8 00	 imul	 ecx, eax, 0
  0031b	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$4[ebp]
  00323	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+16], xmm0

; 9510 : 					quad[0].j = y_min;

  0032c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00331	6b c8 00	 imul	 ecx, eax, 0
  00334	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _y_min$3[ebp]
  0033c	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+20], xmm0

; 9511 : 					quad[0].z = 0.5;

  00345	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0034a	6b c8 00	 imul	 ecx, eax, 0
  0034d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00355	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+8], xmm0

; 9512 : 					quad[0].q = 0.5;

  0035e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00363	6b c8 00	 imul	 ecx, eax, 0
  00366	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0036e	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+12], xmm0

; 9513 : 					quad[0].next_vertex = &quad[1];

  00377	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0037c	c1 e0 00	 shl	 eax, 0
  0037f	8d 8c 05 fc fe
	ff ff		 lea	 ecx, DWORD PTR _quad$7[ebp+eax]
  00386	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0038b	6b c2 00	 imul	 eax, edx, 0
  0038e	89 8c 05 24 ff
	ff ff		 mov	 DWORD PTR _quad$7[ebp+eax+40], ecx

; 9514 : 
; 9515 : 					quad[1].i = x_max;

  00395	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0039a	c1 e0 00	 shl	 eax, 0
  0039d	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$2[ebp]
  003a5	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+16], xmm0

; 9516 : 					quad[1].j = y_min;

  003ae	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003b3	c1 e0 00	 shl	 eax, 0
  003b6	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _y_min$3[ebp]
  003be	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+20], xmm0

; 9517 : 					quad[1].z = 0.5;

  003c7	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003cc	c1 e0 00	 shl	 eax, 0
  003cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  003d7	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+8], xmm0

; 9518 : 					quad[1].q = 0.5;

  003e0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003e5	c1 e0 00	 shl	 eax, 0
  003e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  003f0	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+12], xmm0

; 9519 : 					quad[1].next_vertex = &quad[2];

  003f9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003fe	d1 e0		 shl	 eax, 1
  00400	8d 8c 05 fc fe
	ff ff		 lea	 ecx, DWORD PTR _quad$7[ebp+eax]
  00407	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0040c	c1 e2 00	 shl	 edx, 0
  0040f	89 8c 15 24 ff
	ff ff		 mov	 DWORD PTR _quad$7[ebp+edx+40], ecx

; 9520 : 
; 9521 : 					quad[2].i = x_max;

  00416	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0041b	d1 e0		 shl	 eax, 1
  0041d	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$2[ebp]
  00425	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+16], xmm0

; 9522 : 					quad[2].j = y_max;

  0042e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00433	d1 e0		 shl	 eax, 1
  00435	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _y_max$1[ebp]
  0043d	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+20], xmm0

; 9523 : 					quad[2].z = 0.5;

  00446	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0044b	d1 e0		 shl	 eax, 1
  0044d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00455	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+8], xmm0

; 9524 : 					quad[2].q = 0.5;

  0045e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00463	d1 e0		 shl	 eax, 1
  00465	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0046d	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+12], xmm0

; 9525 : 					quad[2].next_vertex = &quad[3];

  00476	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0047b	6b c8 03	 imul	 ecx, eax, 3
  0047e	8d 94 0d fc fe
	ff ff		 lea	 edx, DWORD PTR _quad$7[ebp+ecx]
  00485	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0048a	d1 e0		 shl	 eax, 1
  0048c	89 94 05 24 ff
	ff ff		 mov	 DWORD PTR _quad$7[ebp+eax+40], edx

; 9526 : 
; 9527 : 					quad[3].i = x_min;

  00493	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00498	6b c8 03	 imul	 ecx, eax, 3
  0049b	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$4[ebp]
  004a3	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+16], xmm0

; 9528 : 					quad[3].j = y_max;

  004ac	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004b1	6b c8 03	 imul	 ecx, eax, 3
  004b4	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _y_max$1[ebp]
  004bc	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+20], xmm0

; 9529 : 					quad[3].z = 0.5;

  004c5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004ca	6b c8 03	 imul	 ecx, eax, 3
  004cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  004d5	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+8], xmm0

; 9530 : 					quad[3].q = 0.5;

  004de	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004e3	6b c8 03	 imul	 ecx, eax, 3
  004e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  004ee	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+12], xmm0

; 9531 : 					quad[3].next_vertex = NULL;

  004f7	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004fc	6b c8 03	 imul	 ecx, eax, 3
  004ff	c7 84 0d 24 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$7[ebp+ecx+40], 0

; 9532 : 
; 9533 : 					draw_wbuffered_plain_polygon (quad, colour, specular);

  0050a	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _specular$5[ebp]
  00510	50		 push	 eax
  00511	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _colour$6[ebp]
  00517	51		 push	 ecx
  00518	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _quad$7[ebp]
  0051e	52		 push	 edx
  0051f	e8 00 00 00 00	 call	 ?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_plain_polygon

; 9534 : 
; 9535 : 					set_d3d_transparency_off ();

  00524	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 9536 : 
; 9537 : 					set_d3d_zbuffer_comparison (TRUE);

  00529	6a 01		 push	 1
  0052b	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 9538 : 
; 9539 : 					end_3d_scene ();

  00530	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN17@draw_apach:

; 9540 : 				}
; 9541 : 			}
; 9542 : 		}
; 9543 : 	}
; 9544 : 
; 9545 : 	////////////////////////////////////////
; 9546 : 	//
; 9547 : 	// draw MFD
; 9548 : 	//
; 9549 : 	////////////////////////////////////////
; 9550 : 
; 9551 : 	switch (*mfd_mode)

  00535	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00538	8b 08		 mov	 ecx, DWORD PTR [eax]
  0053a	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv231[ebp], ecx
  00540	83 bd a0 fe ff
	ff 0c		 cmp	 DWORD PTR tv231[ebp], 12 ; 0000000cH
  00547	0f 87 13 02 00
	00		 ja	 $LN2@draw_apach
  0054d	8b 95 a0 fe ff
	ff		 mov	 edx, DWORD PTR tv231[ebp]
  00553	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN43@draw_apach[edx*4]
$LN18@draw_apach:

; 9552 : 	{
; 9553 : 		////////////////////////////////////////
; 9554 : 		case MFD_MODE_OFF:
; 9555 : 		////////////////////////////////////////
; 9556 : 		{
; 9557 : 			if (lock_screen (active_screen))

  0055a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0055f	50		 push	 eax
  00560	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00565	85 c0		 test	 eax, eax
  00567	74 10		 je	 SHORT $LN19@draw_apach

; 9558 : 			{
; 9559 : 				draw_layout_grid ();

  00569	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9560 : 
; 9561 : 				unlock_screen (active_screen);

  0056e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00573	50		 push	 eax
  00574	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN19@draw_apach:

; 9562 : 			}
; 9563 : 
; 9564 : 			break;

  00579	e9 e2 01 00 00	 jmp	 $LN2@draw_apach
$LN20@draw_apach:

; 9565 : 		}
; 9566 : 		////////////////////////////////////////
; 9567 : 		case MFD_MODE_DAMAGED:
; 9568 : 		////////////////////////////////////////
; 9569 : 		{
; 9570 : 			if (lock_screen (active_screen))

  0057e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00583	50		 push	 eax
  00584	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00589	85 c0		 test	 eax, eax
  0058b	74 15		 je	 SHORT $LN21@draw_apach

; 9571 : 			{
; 9572 : 				draw_layout_grid ();

  0058d	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9573 : 
; 9574 : 				draw_damaged_mfd ();

  00592	e8 00 00 00 00	 call	 ?draw_damaged_mfd@@YGXXZ ; draw_damaged_mfd

; 9575 : 
; 9576 : 				unlock_screen (active_screen);

  00597	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0059c	50		 push	 eax
  0059d	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN21@draw_apach:

; 9577 : 			}
; 9578 : 
; 9579 : 			break;

  005a2	e9 b9 01 00 00	 jmp	 $LN2@draw_apach
$LN22@draw_apach:

; 9580 : 		}
; 9581 : 		////////////////////////////////////////
; 9582 : 		case MFD_MODE_GROUND_RADAR:
; 9583 : 		////////////////////////////////////////
; 9584 : 		{
; 9585 : 			if (lock_screen (active_screen))

  005a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  005ac	50		 push	 eax
  005ad	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  005b2	85 c0		 test	 eax, eax
  005b4	74 15		 je	 SHORT $LN23@draw_apach

; 9586 : 			{
; 9587 : 				draw_layout_grid ();

  005b6	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9588 : 
; 9589 : 				draw_ground_radar_mfd ();

  005bb	e8 00 00 00 00	 call	 ?draw_ground_radar_mfd@@YGXXZ ; draw_ground_radar_mfd

; 9590 : 
; 9591 : 				unlock_screen (active_screen);

  005c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  005c5	50		 push	 eax
  005c6	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN23@draw_apach:

; 9592 : 			}
; 9593 : 
; 9594 : 			break;

  005cb	e9 90 01 00 00	 jmp	 $LN2@draw_apach
$LN24@draw_apach:

; 9595 : 		}
; 9596 : 		////////////////////////////////////////
; 9597 : 		case MFD_MODE_AIR_RADAR:
; 9598 : 		////////////////////////////////////////
; 9599 : 		{
; 9600 : 			if (lock_screen (active_screen))

  005d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  005d5	50		 push	 eax
  005d6	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  005db	85 c0		 test	 eax, eax
  005dd	74 15		 je	 SHORT $LN25@draw_apach

; 9601 : 			{
; 9602 : 				draw_layout_grid ();

  005df	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9603 : 
; 9604 : 				draw_air_radar_mfd ();

  005e4	e8 00 00 00 00	 call	 ?draw_air_radar_mfd@@YGXXZ ; draw_air_radar_mfd

; 9605 : 
; 9606 : 				unlock_screen (active_screen);

  005e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  005ee	50		 push	 eax
  005ef	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN25@draw_apach:

; 9607 : 			}
; 9608 : 
; 9609 : 			break;

  005f4	e9 67 01 00 00	 jmp	 $LN2@draw_apach
$LN26@draw_apach:

; 9610 : 		}
; 9611 : 		////////////////////////////////////////
; 9612 : 		case MFD_MODE_FLIR:
; 9613 : 		////////////////////////////////////////
; 9614 : 		{
; 9615 : 			draw_3d_flir_mfd (location);

  005f9	8b 45 18	 mov	 eax, DWORD PTR _location$[ebp]
  005fc	50		 push	 eax
  005fd	e8 00 00 00 00	 call	 ?draw_3d_flir_mfd@@YGXW4MFD_LOCATIONS@@@Z ; draw_3d_flir_mfd

; 9616 : 
; 9617 : 			if (lock_screen (active_screen))

  00602	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00607	50		 push	 eax
  00608	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0060d	85 c0		 test	 eax, eax
  0060f	74 19		 je	 SHORT $LN27@draw_apach

; 9618 : 			{
; 9619 : 				draw_layout_grid ();

  00611	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9620 : 
; 9621 : 				draw_2d_flir_mfd (TRUE, FALSE);

  00616	6a 00		 push	 0
  00618	6a 01		 push	 1
  0061a	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXHH@Z ; draw_2d_flir_mfd

; 9622 : 
; 9623 : 				unlock_screen (active_screen);

  0061f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00624	50		 push	 eax
  00625	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN27@draw_apach:

; 9624 : 			}
; 9625 : 
; 9626 : 			break;

  0062a	e9 31 01 00 00	 jmp	 $LN2@draw_apach
$LN28@draw_apach:

; 9627 : 		}
; 9628 : 		////////////////////////////////////////
; 9629 : 		case MFD_MODE_DTV:
; 9630 : 		////////////////////////////////////////
; 9631 : 		{
; 9632 : 			draw_3d_dtv_mfd (location);

  0062f	8b 45 18	 mov	 eax, DWORD PTR _location$[ebp]
  00632	50		 push	 eax
  00633	e8 00 00 00 00	 call	 ?draw_3d_dtv_mfd@@YGXW4MFD_LOCATIONS@@@Z ; draw_3d_dtv_mfd

; 9633 : 
; 9634 : 			if (lock_screen (active_screen))

  00638	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0063d	50		 push	 eax
  0063e	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00643	85 c0		 test	 eax, eax
  00645	74 19		 je	 SHORT $LN29@draw_apach

; 9635 : 			{
; 9636 : 				draw_layout_grid ();

  00647	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9637 : 
; 9638 : 				draw_2d_dtv_mfd (TRUE, FALSE);

  0064c	6a 00		 push	 0
  0064e	6a 01		 push	 1
  00650	e8 00 00 00 00	 call	 ?draw_2d_dtv_mfd@@YGXHH@Z ; draw_2d_dtv_mfd

; 9639 : 
; 9640 : 				unlock_screen (active_screen);

  00655	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0065a	50		 push	 eax
  0065b	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN29@draw_apach:

; 9641 : 			}
; 9642 : 
; 9643 : 			break;

  00660	e9 fb 00 00 00	 jmp	 $LN2@draw_apach
$LN30@draw_apach:

; 9644 : 		}
; 9645 : 		////////////////////////////////////////
; 9646 : 		case MFD_MODE_DVO:
; 9647 : 		////////////////////////////////////////
; 9648 : 		{
; 9649 : 			draw_3d_dvo_mfd (location);

  00665	8b 45 18	 mov	 eax, DWORD PTR _location$[ebp]
  00668	50		 push	 eax
  00669	e8 00 00 00 00	 call	 ?draw_3d_dvo_mfd@@YGXW4MFD_LOCATIONS@@@Z ; draw_3d_dvo_mfd

; 9650 : 
; 9651 : 			if (lock_screen (active_screen))

  0066e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00673	50		 push	 eax
  00674	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00679	85 c0		 test	 eax, eax
  0067b	74 19		 je	 SHORT $LN31@draw_apach

; 9652 : 			{
; 9653 : 				draw_layout_grid ();

  0067d	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9654 : 
; 9655 : 				draw_2d_dvo_mfd (TRUE, FALSE);

  00682	6a 00		 push	 0
  00684	6a 01		 push	 1
  00686	e8 00 00 00 00	 call	 ?draw_2d_dvo_mfd@@YGXHH@Z ; draw_2d_dvo_mfd

; 9656 : 
; 9657 : 				unlock_screen (active_screen);

  0068b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00690	50		 push	 eax
  00691	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN31@draw_apach:

; 9658 : 			}
; 9659 : 
; 9660 : 			break;

  00696	e9 c5 00 00 00	 jmp	 $LN2@draw_apach
$LN32@draw_apach:

; 9661 : 		}
; 9662 : 		////////////////////////////////////////
; 9663 : 		case MFD_MODE_TSD:
; 9664 : 		////////////////////////////////////////
; 9665 : 		{
; 9666 : 			if (lock_screen (active_screen))

  0069b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  006a0	50		 push	 eax
  006a1	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  006a6	85 c0		 test	 eax, eax
  006a8	74 15		 je	 SHORT $LN33@draw_apach

; 9667 : 			{
; 9668 : 				draw_layout_grid ();

  006aa	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9669 : 
; 9670 : 				draw_tactical_situation_display_mfd ();

  006af	e8 00 00 00 00	 call	 ?draw_tactical_situation_display_mfd@@YGXXZ ; draw_tactical_situation_display_mfd

; 9671 : 
; 9672 : 				unlock_screen (active_screen);

  006b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  006b9	50		 push	 eax
  006ba	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN33@draw_apach:

; 9673 : 			}
; 9674 : 
; 9675 : 			break;

  006bf	e9 9c 00 00 00	 jmp	 $LN2@draw_apach
$LN34@draw_apach:

; 9676 : 		}
; 9677 : 		////////////////////////////////////////
; 9678 : 		case MFD_MODE_ASE:
; 9679 : 		////////////////////////////////////////
; 9680 : 		{
; 9681 : 			if (lock_screen (active_screen))

  006c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  006c9	50		 push	 eax
  006ca	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  006cf	85 c0		 test	 eax, eax
  006d1	74 15		 je	 SHORT $LN35@draw_apach

; 9682 : 			{
; 9683 : 				draw_layout_grid ();

  006d3	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9684 : 
; 9685 : 				draw_aircraft_survivability_equipment_display_mfd ();

  006d8	e8 00 00 00 00	 call	 ?draw_aircraft_survivability_equipment_display_mfd@@YGXXZ ; draw_aircraft_survivability_equipment_display_mfd

; 9686 : 
; 9687 : 				unlock_screen (active_screen);

  006dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  006e2	50		 push	 eax
  006e3	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN35@draw_apach:

; 9688 : 			}
; 9689 : 
; 9690 : 			break;

  006e8	eb 76		 jmp	 SHORT $LN2@draw_apach
$LN36@draw_apach:

; 9691 : 		}
; 9692 : 		////////////////////////////////////////
; 9693 : 		case MFD_MODE_WEAPON:
; 9694 : 		////////////////////////////////////////
; 9695 : 		{
; 9696 : 			if (lock_screen (active_screen))

  006ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  006ef	50		 push	 eax
  006f0	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  006f5	85 c0		 test	 eax, eax
  006f7	74 1b		 je	 SHORT $LN37@draw_apach

; 9697 : 			{
; 9698 : 				draw_layout_grid ();

  006f9	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9699 : 
; 9700 : 				draw_weapon_display_mfd (location, FALSE);

  006fe	6a 00		 push	 0
  00700	8b 45 18	 mov	 eax, DWORD PTR _location$[ebp]
  00703	50		 push	 eax
  00704	e8 00 00 00 00	 call	 ?draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z ; draw_weapon_display_mfd

; 9701 : 
; 9702 : 				unlock_screen (active_screen);

  00709	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0070e	50		 push	 eax
  0070f	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN37@draw_apach:

; 9703 : 			}
; 9704 : 
; 9705 : 			break;

  00714	eb 4a		 jmp	 SHORT $LN2@draw_apach
$LN38@draw_apach:

; 9706 : 		}
; 9707 : 		////////////////////////////////////////
; 9708 : 		case MFD_MODE_SYSTEM:
; 9709 : 		////////////////////////////////////////
; 9710 : 		{
; 9711 : 			if (lock_screen (active_screen))

  00716	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0071b	50		 push	 eax
  0071c	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00721	85 c0		 test	 eax, eax
  00723	74 15		 je	 SHORT $LN39@draw_apach

; 9712 : 			{
; 9713 : 				draw_layout_grid ();

  00725	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9714 : 
; 9715 : 				draw_system_display_mfd ();

  0072a	e8 00 00 00 00	 call	 ?draw_system_display_mfd@@YGXXZ ; draw_system_display_mfd

; 9716 : 
; 9717 : 				unlock_screen (active_screen);

  0072f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00734	50		 push	 eax
  00735	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN39@draw_apach:

; 9718 : 			}
; 9719 : 
; 9720 : 			break;

  0073a	eb 24		 jmp	 SHORT $LN2@draw_apach
$LN40@draw_apach:

; 9721 : 		}
; 9722 : 		////////////////////////////////////////
; 9723 : 		case MFD_MODE_ENGINE:
; 9724 : 		////////////////////////////////////////
; 9725 : 		{
; 9726 : 			if (lock_screen (active_screen))

  0073c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00741	50		 push	 eax
  00742	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00747	85 c0		 test	 eax, eax
  00749	74 15		 je	 SHORT $LN41@draw_apach

; 9727 : 			{
; 9728 : 				draw_layout_grid ();

  0074b	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9729 : 
; 9730 : 				draw_engine_display_mfd ();

  00750	e8 00 00 00 00	 call	 ?draw_engine_display_mfd@@YGXXZ ; draw_engine_display_mfd

; 9731 : 
; 9732 : 				unlock_screen (active_screen);

  00755	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0075a	50		 push	 eax
  0075b	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN41@draw_apach:
$LN2@draw_apach:

; 9733 : 			}
; 9734 : 
; 9735 : 			break;
; 9736 : 		}
; 9737 : 	}
; 9738 : }

  00760	5f		 pop	 edi
  00761	5e		 pop	 esi
  00762	5b		 pop	 ebx
  00763	8b e5		 mov	 esp, ebp
  00765	5d		 pop	 ebp
  00766	c2 14 00	 ret	 20			; 00000014H
  00769	0f 1f 00	 npad	 3
$LN43@draw_apach:
  0076c	00 00 00 00	 DD	 $LN18@draw_apach
  00770	00 00 00 00	 DD	 $LN20@draw_apach
  00774	00 00 00 00	 DD	 $LN22@draw_apach
  00778	00 00 00 00	 DD	 $LN24@draw_apach
  0077c	00 00 00 00	 DD	 $LN26@draw_apach
  00780	00 00 00 00	 DD	 $LN28@draw_apach
  00784	00 00 00 00	 DD	 $LN30@draw_apach
  00788	00 00 00 00	 DD	 $LN2@draw_apach
  0078c	00 00 00 00	 DD	 $LN32@draw_apach
  00790	00 00 00 00	 DD	 $LN34@draw_apach
  00794	00 00 00 00	 DD	 $LN36@draw_apach
  00798	00 00 00 00	 DD	 $LN38@draw_apach
  0079c	00 00 00 00	 DD	 $LN40@draw_apach
?draw_apache_mfd_on_cockpit@@YGXMMHHW4MFD_LOCATIONS@@@Z ENDP ; draw_apache_mfd_on_cockpit
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv87 = -72						; size = 4
tv80 = -68						; size = 4
_mfd_mode$ = 8						; size = 4
_location$ = 12						; size = 4
?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z PROC ; select_apache_mfd_mode, COMDAT

; 1194 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1195 : 	ASSERT ((mfd_mode >= MFD_MODE_OFF) && (mfd_mode < NUM_MFD_MODES));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@select_apa
  0000f	83 7d 08 0e	 cmp	 DWORD PTR _mfd_mode$[ebp], 14 ; 0000000eH
  00013	7c 18		 jl	 SHORT $LN2@select_apa
$LN3@select_apa:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 01	 add	 eax, 1
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@HPJGECJI@?$CImfd_mode?5?$DO?$DN?5MFD_MODE_OFF?$CJ?5?$CG?$CG?5?$CI@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_apa:

; 1196 : 
; 1197 : 	ASSERT (mfd_mode != MFD_MODE_LLLTV);

  0002d	83 7d 08 07	 cmp	 DWORD PTR _mfd_mode$[ebp], 7
  00031	75 18		 jne	 SHORT $LN4@select_apa
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z@4JA
  00038	83 c0 03	 add	 eax, 3
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@JNKLHOPK@mfd_mode?5?$CB?$DN?5MFD_MODE_LLLTV@
  00046	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@select_apa:

; 1198 : 
; 1199 : 	if (get_local_entity_int_value (get_pilot_entity (), INT_TYPE_CREW_ROLE) == CREW_ROLE_CO_PILOT)

  0004b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_entity@@3PAUENTITY@@A, 0 ; pilot_entity
  00052	74 0c		 je	 SHORT $LN33@select_apa
  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  00059	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005b	89 4d bc	 mov	 DWORD PTR tv80[ebp], ecx
  0005e	eb 1d		 jmp	 SHORT $LN34@select_apa
$LN33@select_apa:
  00060	68 af 04 00 00	 push	 1199			; 000004afH
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00070	52		 push	 edx
  00071	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00076	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN34@select_apa:
  0007d	b8 01 00 00 00	 mov	 eax, 1
  00082	85 c0		 test	 eax, eax
  00084	74 09		 je	 SHORT $LN35@select_apa
  00086	c7 45 b8 23 00
	00 00		 mov	 DWORD PTR tv87[ebp], 35	; 00000023H
  0008d	eb 1d		 jmp	 SHORT $LN36@select_apa
$LN35@select_apa:
  0008f	68 af 04 00 00	 push	 1199			; 000004afH
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00099	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0009f	51		 push	 ecx
  000a0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a5	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$LN36@select_apa:
  000ac	6a 23		 push	 35			; 00000023H
  000ae	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pilot_entity@@3PAUENTITY@@A ; pilot_entity
  000b4	52		 push	 edx
  000b5	69 45 bc 5c 04
	00 00		 imul	 eax, DWORD PTR tv80[ebp], 1116
  000bc	8b 4d b8	 mov	 ecx, DWORD PTR tv87[ebp]
  000bf	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  000c6	ff d2		 call	 edx
  000c8	83 f8 01	 cmp	 eax, 1
  000cb	75 1c		 jne	 SHORT $LN5@select_apa

; 1200 : 	{
; 1201 : 		if (location == MFD_LOCATION_PILOT_LHS)

  000cd	83 7d 0c 00	 cmp	 DWORD PTR _location$[ebp], 0
  000d1	75 09		 jne	 SHORT $LN6@select_apa

; 1202 : 			location = MFD_LOCATION_CPG_LHS;

  000d3	c7 45 0c 02 00
	00 00		 mov	 DWORD PTR _location$[ebp], 2
  000da	eb 0d		 jmp	 SHORT $LN5@select_apa
$LN6@select_apa:

; 1203 : 		else if (location == MFD_LOCATION_PILOT_RHS)

  000dc	83 7d 0c 01	 cmp	 DWORD PTR _location$[ebp], 1
  000e0	75 07		 jne	 SHORT $LN5@select_apa

; 1204 : 			location = MFD_LOCATION_CPG_RHS;

  000e2	c7 45 0c 03 00
	00 00		 mov	 DWORD PTR _location$[ebp], 3
$LN5@select_apa:

; 1205 : 	}
; 1206 : 
; 1207 : 	ASSERT ((location == MFD_LOCATION_PILOT_LHS) || (location == MFD_LOCATION_PILOT_RHS)

  000e9	83 7d 0c 00	 cmp	 DWORD PTR _location$[ebp], 0
  000ed	74 30		 je	 SHORT $LN9@select_apa
  000ef	83 7d 0c 01	 cmp	 DWORD PTR _location$[ebp], 1
  000f3	74 2a		 je	 SHORT $LN9@select_apa
  000f5	83 7d 0c 02	 cmp	 DWORD PTR _location$[ebp], 2
  000f9	74 24		 je	 SHORT $LN9@select_apa
  000fb	83 7d 0c 03	 cmp	 DWORD PTR _location$[ebp], 3
  000ff	74 1e		 je	 SHORT $LN9@select_apa
  00101	83 7d 0c 04	 cmp	 DWORD PTR _location$[ebp], 4
  00105	74 18		 je	 SHORT $LN9@select_apa
  00107	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z@4JA
  0010c	83 c0 0f	 add	 eax, 15			; 0000000fH
  0010f	50		 push	 eax
  00110	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GBPDOEAK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00115	68 00 00 00 00	 push	 OFFSET ??_C@_0LL@EJDGJHNL@?$CIlocation?5?$DN?$DN?5MFD_LOCATION_PILOT@
  0011a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@select_apa:

; 1208 : 			|| (location == MFD_LOCATION_CPG_LHS) || (location == MFD_LOCATION_CPG_RHS)
; 1209 : 			|| (location == MFD_LOCATION_ORT));
; 1210 : 
; 1211 : 	// don't let both a MFD show TADS, and have TADS as TSD underlay for pilot (co-pilot can't have TADS as underlay)
; 1212 : 	if (((location == MFD_LOCATION_PILOT_LHS) || (location == MFD_LOCATION_PILOT_RHS))
; 1213 : 		&&
; 1214 : 		(mfd_mode == MFD_MODE_DVO
; 1215 : 		 || mfd_mode == MFD_MODE_DTV
; 1216 : 		 || mfd_mode == MFD_MODE_FLIR)
; 1217 : 		&& pilot_tsd_underlay == TSD_UNDERLAY_TADS)

  0011f	83 7d 0c 00	 cmp	 DWORD PTR _location$[ebp], 0
  00123	74 06		 je	 SHORT $LN11@select_apa
  00125	83 7d 0c 01	 cmp	 DWORD PTR _location$[ebp], 1
  00129	75 25		 jne	 SHORT $LN10@select_apa
$LN11@select_apa:
  0012b	83 7d 08 06	 cmp	 DWORD PTR _mfd_mode$[ebp], 6
  0012f	74 0c		 je	 SHORT $LN12@select_apa
  00131	83 7d 08 05	 cmp	 DWORD PTR _mfd_mode$[ebp], 5
  00135	74 06		 je	 SHORT $LN12@select_apa
  00137	83 7d 08 04	 cmp	 DWORD PTR _mfd_mode$[ebp], 4
  0013b	75 13		 jne	 SHORT $LN10@select_apa
$LN12@select_apa:
  0013d	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?pilot_tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 2
  00144	75 0a		 jne	 SHORT $LN10@select_apa

; 1218 : 	{
; 1219 : 		pilot_tsd_underlay = TSD_UNDERLAY_NONE;

  00146	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pilot_tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 0
$LN10@select_apa:

; 1220 : 	}
; 1221 : 
; 1222 : 	if (location == MFD_LOCATION_PILOT_LHS)

  00150	83 7d 0c 00	 cmp	 DWORD PTR _location$[ebp], 0
  00154	75 3b		 jne	 SHORT $LN13@select_apa

; 1223 : 	{
; 1224 : 		if ((mfd_mode == MFD_MODE_DAMAGED) && (lhs_mfd_mode == MFD_MODE_OFF))

  00156	83 7d 08 01	 cmp	 DWORD PTR _mfd_mode$[ebp], 1
  0015a	75 0e		 jne	 SHORT $LN15@select_apa
  0015c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 0
  00163	75 05		 jne	 SHORT $LN15@select_apa

; 1225 : 			return;

  00165	e9 0f 01 00 00	 jmp	 $LN1@select_apa
$LN15@select_apa:

; 1226 : 
; 1227 : 		if (apache_damage.lh_mfd && mfd_mode != MFD_MODE_OFF)

  0016a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  0016f	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  00172	83 e0 01	 and	 eax, 1
  00175	74 0d		 je	 SHORT $LN16@select_apa
  00177	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  0017b	74 07		 je	 SHORT $LN16@select_apa

; 1228 : 			mfd_mode = MFD_MODE_DAMAGED;

  0017d	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 1
$LN16@select_apa:

; 1229 : 
; 1230 : 		lhs_mfd_mode = mfd_mode;

  00184	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00187	a3 00 00 00 00	 mov	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, eax
  0018c	e9 e8 00 00 00	 jmp	 $LN1@select_apa
$LN13@select_apa:

; 1231 : 	}
; 1232 : 	else if (location == MFD_LOCATION_PILOT_RHS)

  00191	83 7d 0c 01	 cmp	 DWORD PTR _location$[ebp], 1
  00195	75 3b		 jne	 SHORT $LN17@select_apa

; 1233 : 	{
; 1234 : 		if ((mfd_mode == MFD_MODE_DAMAGED) && (rhs_mfd_mode == MFD_MODE_OFF))

  00197	83 7d 08 01	 cmp	 DWORD PTR _mfd_mode$[ebp], 1
  0019b	75 0e		 jne	 SHORT $LN19@select_apa
  0019d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 0
  001a4	75 05		 jne	 SHORT $LN19@select_apa

; 1235 : 			return;

  001a6	e9 ce 00 00 00	 jmp	 $LN1@select_apa
$LN19@select_apa:

; 1236 : 
; 1237 : 		if (apache_damage.rh_mfd && mfd_mode != MFD_MODE_OFF)

  001ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  001b0	c1 e8 11	 shr	 eax, 17			; 00000011H
  001b3	83 e0 01	 and	 eax, 1
  001b6	74 0d		 je	 SHORT $LN20@select_apa
  001b8	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  001bc	74 07		 je	 SHORT $LN20@select_apa

; 1238 : 			mfd_mode = MFD_MODE_DAMAGED;

  001be	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 1
$LN20@select_apa:

; 1239 : 
; 1240 : 		rhs_mfd_mode = mfd_mode;

  001c5	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  001c8	a3 00 00 00 00	 mov	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, eax
  001cd	e9 a7 00 00 00	 jmp	 $LN1@select_apa
$LN17@select_apa:

; 1241 : 	}
; 1242 : 	else if (location == MFD_LOCATION_CPG_LHS)

  001d2	83 7d 0c 02	 cmp	 DWORD PTR _location$[ebp], 2
  001d6	75 38		 jne	 SHORT $LN21@select_apa

; 1243 : 	{
; 1244 : 		if ((mfd_mode == MFD_MODE_DAMAGED) && (cpg_lhs_mfd_mode == MFD_MODE_OFF))

  001d8	83 7d 08 01	 cmp	 DWORD PTR _mfd_mode$[ebp], 1
  001dc	75 0e		 jne	 SHORT $LN23@select_apa
  001de	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?cpg_lhs_mfd_mode@@3W4MFD_MODES@@A, 0
  001e5	75 05		 jne	 SHORT $LN23@select_apa

; 1245 : 			return;

  001e7	e9 8d 00 00 00	 jmp	 $LN1@select_apa
$LN23@select_apa:

; 1246 : 
; 1247 : 		if (apache_damage.cpg_lh_mfd && mfd_mode != MFD_MODE_OFF)

  001ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  001f1	c1 e8 10	 shr	 eax, 16			; 00000010H
  001f4	83 e0 01	 and	 eax, 1
  001f7	74 0d		 je	 SHORT $LN24@select_apa
  001f9	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  001fd	74 07		 je	 SHORT $LN24@select_apa

; 1248 : 			mfd_mode = MFD_MODE_DAMAGED;

  001ff	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 1
$LN24@select_apa:

; 1249 : 
; 1250 : 		cpg_lhs_mfd_mode = mfd_mode;

  00206	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00209	a3 00 00 00 00	 mov	 DWORD PTR ?cpg_lhs_mfd_mode@@3W4MFD_MODES@@A, eax
  0020e	eb 69		 jmp	 SHORT $LN1@select_apa
$LN21@select_apa:

; 1251 : 	}
; 1252 : 	else if (location == MFD_LOCATION_CPG_RHS)

  00210	83 7d 0c 03	 cmp	 DWORD PTR _location$[ebp], 3
  00214	75 35		 jne	 SHORT $LN25@select_apa

; 1253 : 	{
; 1254 : 		if ((mfd_mode == MFD_MODE_DAMAGED) && (cpg_rhs_mfd_mode == MFD_MODE_OFF))

  00216	83 7d 08 01	 cmp	 DWORD PTR _mfd_mode$[ebp], 1
  0021a	75 0b		 jne	 SHORT $LN27@select_apa
  0021c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?cpg_rhs_mfd_mode@@3W4MFD_MODES@@A, 0
  00223	75 02		 jne	 SHORT $LN27@select_apa

; 1255 : 			return;

  00225	eb 52		 jmp	 SHORT $LN1@select_apa
$LN27@select_apa:

; 1256 : 
; 1257 : 		if (apache_damage.cpg_rh_mfd && mfd_mode != MFD_MODE_OFF)

  00227	a1 00 00 00 00	 mov	 eax, DWORD PTR ?apache_damage@@3TAPACHE_DAMAGE_FLAGS@@A ; apache_damage
  0022c	c1 e8 15	 shr	 eax, 21			; 00000015H
  0022f	83 e0 01	 and	 eax, 1
  00232	74 0d		 je	 SHORT $LN28@select_apa
  00234	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  00238	74 07		 je	 SHORT $LN28@select_apa

; 1258 : 			mfd_mode = MFD_MODE_DAMAGED;

  0023a	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 1
$LN28@select_apa:

; 1259 : 
; 1260 : 		cpg_rhs_mfd_mode = mfd_mode;

  00241	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00244	a3 00 00 00 00	 mov	 DWORD PTR ?cpg_rhs_mfd_mode@@3W4MFD_MODES@@A, eax
  00249	eb 2e		 jmp	 SHORT $LN1@select_apa
$LN25@select_apa:

; 1261 : 	}
; 1262 : 	else if (location == MFD_LOCATION_ORT)

  0024b	83 7d 0c 04	 cmp	 DWORD PTR _location$[ebp], 4
  0024f	75 1b		 jne	 SHORT $LN29@select_apa

; 1263 : 	{
; 1264 : 		if ((mfd_mode == MFD_MODE_DAMAGED) && (ort_mode == MFD_MODE_OFF))

  00251	83 7d 08 01	 cmp	 DWORD PTR _mfd_mode$[ebp], 1
  00255	75 0b		 jne	 SHORT $LN31@select_apa
  00257	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ort_mode@@3W4MFD_MODES@@A, 0
  0025e	75 02		 jne	 SHORT $LN31@select_apa

; 1265 : 			return;

  00260	eb 17		 jmp	 SHORT $LN1@select_apa
$LN31@select_apa:

; 1266 : 
; 1267 : 		ort_mode = mfd_mode;

  00262	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00265	a3 00 00 00 00	 mov	 DWORD PTR ?ort_mode@@3W4MFD_MODES@@A, eax

; 1268 : 	}
; 1269 : 	else

  0026a	eb 0d		 jmp	 SHORT $LN1@select_apa
$LN29@select_apa:

; 1270 : 		debug_fatal("Unknown MFD location");

  0026c	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@EELNHMOM@Unknown?5MFD?5location@
  00271	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00276	83 c4 04	 add	 esp, 4
$LN1@select_apa:

; 1271 : }

  00279	5f		 pop	 edi
  0027a	5e		 pop	 esi
  0027b	5b		 pop	 ebx
  0027c	8b e5		 mov	 esp, ebp
  0027e	5d		 pop	 ebp
  0027f	c2 08 00	 ret	 8
?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ENDP ; select_apache_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?deinitialise_apache_mfd@@YGXXZ
_TEXT	SEGMENT
?deinitialise_apache_mfd@@YGXXZ PROC			; deinitialise_apache_mfd, COMDAT

; 1174 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1175 : 	destroy_2d_environment (mfd_env);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?destroy_2d_environment@@YGXPAUENV_2D@@@Z ; destroy_2d_environment

; 1176 : 
; 1177 : 	destroy_screen (lhs_mfd_texture_screen);

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lhs_mfd_texture_screen@@3PAUSCREEN@@A
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 1178 : 	destroy_screen (rhs_mfd_texture_screen);

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rhs_mfd_texture_screen@@3PAUSCREEN@@A
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 1179 : 	destroy_screen (cpg_lhs_mfd_texture_screen);

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?cpg_lhs_mfd_texture_screen@@3PAUSCREEN@@A
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 1180 : 	destroy_screen (cpg_rhs_mfd_texture_screen);

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?cpg_rhs_mfd_texture_screen@@3PAUSCREEN@@A
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 1181 : 	destroy_screen (ort_texture_screen);

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ort_texture_screen@@3PAUSCREEN@@A
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 1182 : 
; 1183 : 	destroy_screen (lhs_overlaid_mfd_texture_screen);

  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lhs_overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 1184 : 	destroy_screen (rhs_overlaid_mfd_texture_screen);

  00056	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rhs_overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 1185 : 
; 1186 : 	destroy_screen (alnum_display_screen);

  00061	a1 00 00 00 00	 mov	 eax, DWORD PTR ?alnum_display_screen@@3PAUSCREEN@@A
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 1187 : }

  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
?deinitialise_apache_mfd@@YGXXZ ENDP			; deinitialise_apache_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\apache\ap_mfd.c
;	COMDAT ?initialise_apache_mfd@@YGXXZ
_TEXT	SEGMENT
tv81 = -68						; size = 4
?initialise_apache_mfd@@YGXXZ PROC			; initialise_apache_mfd, COMDAT

; 1029 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1030 : 	if (command_line_dynamics_engine_startup)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_dynamics_engine_startup@@3HA, 0 ; command_line_dynamics_engine_startup
  00010	74 14		 je	 SHORT $LN4@initialise

; 1031 : 	{
; 1032 : 		select_apache_mfd_mode (MFD_MODE_OFF, MFD_LOCATION_LHS);

  00012	6a 00		 push	 0
  00014	6a 00		 push	 0
  00016	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 1033 : 		select_apache_mfd_mode (MFD_MODE_OFF, MFD_LOCATION_RHS);

  0001b	6a 01		 push	 1
  0001d	6a 00		 push	 0
  0001f	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 1034 : 	}
; 1035 : 	else

  00024	eb 12		 jmp	 SHORT $LN5@initialise
$LN4@initialise:

; 1036 : 	{
; 1037 : 		select_apache_mfd_mode (MFD_MODE_ENGINE, MFD_LOCATION_LHS);

  00026	6a 00		 push	 0
  00028	6a 0c		 push	 12			; 0000000cH
  0002a	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 1038 : 		select_apache_mfd_mode (MFD_MODE_TSD, MFD_LOCATION_RHS);

  0002f	6a 01		 push	 1
  00031	6a 08		 push	 8
  00033	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode
$LN5@initialise:

; 1039 : 	}
; 1040 : 
; 1041 : 	select_apache_mfd_mode (MFD_MODE_WEAPON, MFD_LOCATION_CPG_LHS);

  00038	6a 02		 push	 2
  0003a	6a 0a		 push	 10			; 0000000aH
  0003c	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 1042 : 	select_apache_mfd_mode (MFD_MODE_TSD, MFD_LOCATION_CPG_RHS);

  00041	6a 03		 push	 3
  00043	6a 08		 push	 8
  00045	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 1043 : 	select_apache_mfd_mode (MFD_MODE_FLIR, MFD_LOCATION_ORT);

  0004a	6a 04		 push	 4
  0004c	6a 04		 push	 4
  0004e	e8 00 00 00 00	 call	 ?select_apache_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_apache_mfd_mode

; 1044 : 
; 1045 : 	pilot_tsd_ase_range = TSD_ASE_RANGE_5000;

  00053	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  0005b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0

; 1046 : 	cpg_tsd_ase_range = TSD_ASE_RANGE_5000;

  00063	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  0006b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?cpg_tsd_ase_range@@3MA, xmm0

; 1047 : 
; 1048 : 	pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_ALL;

  00073	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0

; 1049 : 	cpg_tsd_declutter_level = TSD_DECLUTTER_LEVEL_TARGET;

  0007d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?cpg_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1

; 1050 : 
; 1051 : 	pilot_tsd_underlay = TSD_UNDERLAY_NONE;

  00087	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pilot_tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 0

; 1052 : 	cpg_tsd_underlay = TSD_UNDERLAY_NONE;

  00091	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?cpg_tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 0

; 1053 : 
; 1054 : 	current_pfz = NO_PFZ;

  0009b	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?current_pfz@@3IA, -1 ; current_pfz

; 1055 : 	next_free_pfz = 0;

  000a5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?next_free_pfz@@3IA, 0 ; next_free_pfz

; 1056 : 	next_free_nfz = 0;

  000af	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?next_free_nfz@@3IA, 0 ; next_free_nfz

; 1057 : 
; 1058 : 	radar_zoomed = FALSE;

  000b9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?radar_zoomed@@3HA, 0

; 1059 : 
; 1060 : 	tads_lase_flash_timer = TADS_LASE_FLASH_RATE;

  000c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000cb	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tads_lase_flash_timer@@3MA, xmm0

; 1061 : 	tads_display_lase_status = FALSE;

  000d3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tads_display_lase_status@@3HA, 0

; 1062 : 
; 1063 : 	tsd_threat_line_flash_timer = TSD_THREAT_LINE_FLASH_RATE;

  000dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  000e5	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_threat_line_flash_timer@@3MA, xmm0

; 1064 : 	tsd_draw_threat_line_status = 0;

  000ed	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tsd_draw_threat_line_status@@3HA, 0

; 1065 : 
; 1066 : 	ase_threat_line_flash_timer = ASE_THREAT_LINE_FLASH_RATE;

  000f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  000ff	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?ase_threat_line_flash_timer@@3MA, xmm0

; 1067 : 	ase_draw_threat_line_status = 0;

  00107	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ase_draw_threat_line_status@@3HA, 0

; 1068 : 
; 1069 : 	mfd_env = create_2d_environment ();

  00111	e8 00 00 00 00	 call	 ?create_2d_environment@@YGPAUENV_2D@@XZ ; create_2d_environment
  00116	a3 00 00 00 00	 mov	 DWORD PTR ?mfd_env@@3PAUENV_2D@@A, eax

; 1070 : 
; 1071 : 
; 1072 : 	if (!command_line_high_res_mfd)

  0011b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_high_res_mfd@@3HA, 0 ; command_line_high_res_mfd
  00122	75 2e		 jne	 SHORT $LN6@initialise

; 1073 : 	{
; 1074 : 		switch (get_view_mode ())

  00124	a1 00 00 00 00	 mov	 eax, DWORD PTR ?view_mode@@3W4VIEW_MODES@@A ; view_mode
  00129	89 45 bc	 mov	 DWORD PTR tv81[ebp], eax
  0012c	83 7d bc 26	 cmp	 DWORD PTR tv81[ebp], 38	; 00000026H
  00130	7c 14		 jl	 SHORT $LN9@initialise
  00132	83 7d bc 29	 cmp	 DWORD PTR tv81[ebp], 41	; 00000029H
  00136	7e 02		 jle	 SHORT $LN8@initialise
  00138	eb 0c		 jmp	 SHORT $LN9@initialise
$LN8@initialise:

; 1075 : 		{
; 1076 : 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY:
; 1077 : 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY:
; 1078 : 		case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY:
; 1079 : 		case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY:
; 1080 : 			draw_large_mfd = TRUE;

  0013a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 1

; 1081 : 			break;

  00144	eb 0a		 jmp	 SHORT $LN2@initialise
$LN9@initialise:

; 1082 : 		default:
; 1083 : 			draw_large_mfd = FALSE;

  00146	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 0
$LN2@initialise:

; 1084 : 			break;
; 1085 : 		}
; 1086 : 	}
; 1087 : 	else

  00150	eb 0a		 jmp	 SHORT $LN7@initialise
$LN6@initialise:

; 1088 : 		draw_large_mfd = TRUE;

  00152	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 1
$LN7@initialise:

; 1089 : 
; 1090 : 	if (draw_large_mfd)

  0015c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00163	74 30		 je	 SHORT $LN10@initialise

; 1091 : 	{
; 1092 : 		mfd_viewport_size = MFD_VIEWPORT_LARGE_SIZE;

  00165	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  0016d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 1093 : 		mfd_texture_size = MFD_TEXTURE_LARGE_SIZE;

  00175	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?mfd_texture_size@@3HA, 256 ; 00000100H

; 1094 : 		eo_3d_texture_screen = large_eo_3d_texture_screen;

  0017f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_eo_3d_texture_screen@@3PAUSCREEN@@A ; large_eo_3d_texture_screen
  00184	a3 00 00 00 00	 mov	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, eax

; 1095 : 		draw_line_func = draw_2d_half_thick_line;

  00189	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_line_func@@3P6GXMMMMUREAL_COLOUR@@@ZA, OFFSET ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 1096 : 	}
; 1097 : 	else

  00193	eb 2e		 jmp	 SHORT $LN11@initialise
$LN10@initialise:

; 1098 : 	{
; 1099 : 		mfd_viewport_size = MFD_VIEWPORT_SMALL_SIZE;

  00195	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  0019d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 1100 : 		mfd_texture_size = MFD_TEXTURE_SMALL_SIZE;

  001a5	c7 05 00 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?mfd_texture_size@@3HA, 128 ; 00000080H

; 1101 : 		eo_3d_texture_screen = small_eo_3d_texture_screen;

  001af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_eo_3d_texture_screen@@3PAUSCREEN@@A ; small_eo_3d_texture_screen
  001b4	a3 00 00 00 00	 mov	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, eax

; 1102 : 		draw_line_func = draw_2d_line;

  001b9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_line_func@@3P6GXMMMMUREAL_COLOUR@@@ZA, OFFSET ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN11@initialise:

; 1103 : 	}
; 1104 : 	mfd_viewport_texture_x_org = mfd_texture_size / 2;

  001c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  001c8	99		 cdq
  001c9	2b c2		 sub	 eax, edx
  001cb	d1 f8		 sar	 eax, 1
  001cd	a3 00 00 00 00	 mov	 DWORD PTR ?mfd_viewport_texture_x_org@@3HA, eax

; 1105 : 	mfd_viewport_texture_y_org = mfd_texture_size / 2;

  001d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  001d7	99		 cdq
  001d8	2b c2		 sub	 eax, edx
  001da	d1 f8		 sar	 eax, 1
  001dc	a3 00 00 00 00	 mov	 DWORD PTR ?mfd_viewport_texture_y_org@@3HA, eax

; 1106 : 
; 1107 : 	lhs_mfd_texture_screen = create_system_texture_screen (mfd_texture_size, mfd_texture_size, TEXTURE_INDEX_AVCKPT_DISPLAY_LHS_MFD, TEXTURE_TYPE_SINGLEALPHA);

  001e1	6a 02		 push	 2
  001e3	68 f8 00 00 00	 push	 248			; 000000f8H
  001e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  001ed	50		 push	 eax
  001ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  001fa	a3 00 00 00 00	 mov	 DWORD PTR ?lhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 1108 : 	rhs_mfd_texture_screen = create_system_texture_screen (mfd_texture_size, mfd_texture_size, TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD, TEXTURE_TYPE_SINGLEALPHA);

  001ff	6a 02		 push	 2
  00201	68 f9 00 00 00	 push	 249			; 000000f9H
  00206	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  0020b	50		 push	 eax
  0020c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00212	51		 push	 ecx
  00213	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  00218	a3 00 00 00 00	 mov	 DWORD PTR ?rhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 1109 : 	cpg_lhs_mfd_texture_screen = create_system_texture_screen (mfd_texture_size, mfd_texture_size, TEXTURE_INDEX_AVCKPT_DISPLAY_CPG_LHS_MFD, TEXTURE_TYPE_SINGLEALPHA);

  0021d	6a 02		 push	 2
  0021f	68 08 09 00 00	 push	 2312			; 00000908H
  00224	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  00229	50		 push	 eax
  0022a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00230	51		 push	 ecx
  00231	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  00236	a3 00 00 00 00	 mov	 DWORD PTR ?cpg_lhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 1110 : 	cpg_rhs_mfd_texture_screen = create_system_texture_screen (mfd_texture_size, mfd_texture_size, TEXTURE_INDEX_AVCKPT_DISPLAY_CPG_RHS_MFD, TEXTURE_TYPE_SINGLEALPHA);

  0023b	6a 02		 push	 2
  0023d	68 09 09 00 00	 push	 2313			; 00000909H
  00242	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  00247	50		 push	 eax
  00248	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  0024e	51		 push	 ecx
  0024f	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  00254	a3 00 00 00 00	 mov	 DWORD PTR ?cpg_rhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 1111 : 	ort_texture_screen = create_system_texture_screen (mfd_texture_size, mfd_texture_size, TEXTURE_INDEX_AVCKPT_DISPLAY_ORT, TEXTURE_TYPE_SCREEN);

  00259	6a 04		 push	 4
  0025b	68 0a 09 00 00	 push	 2314			; 0000090aH
  00260	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  00265	50		 push	 eax
  00266	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  0026c	51		 push	 ecx
  0026d	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  00272	a3 00 00 00 00	 mov	 DWORD PTR ?ort_texture_screen@@3PAUSCREEN@@A, eax

; 1112 : 
; 1113 : 	lhs_overlaid_mfd_texture_screen = create_system_texture_screen (mfd_texture_size, mfd_texture_size, LHS_OVERLAID_MFD_TEXTURE_INDEX, TEXTURE_TYPE_SINGLEALPHA);

  00277	6a 02		 push	 2
  00279	68 54 06 00 00	 push	 1620			; 00000654H
  0027e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  00283	50		 push	 eax
  00284	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  0028a	51		 push	 ecx
  0028b	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  00290	a3 00 00 00 00	 mov	 DWORD PTR ?lhs_overlaid_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 1114 : 	rhs_overlaid_mfd_texture_screen = create_system_texture_screen (mfd_texture_size, mfd_texture_size, RHS_OVERLAID_MFD_TEXTURE_INDEX, TEXTURE_TYPE_SINGLEALPHA);

  00295	6a 02		 push	 2
  00297	68 57 06 00 00	 push	 1623			; 00000657H
  0029c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  002a1	50		 push	 eax
  002a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  002a8	51		 push	 ecx
  002a9	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  002ae	a3 00 00 00 00	 mov	 DWORD PTR ?rhs_overlaid_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 1115 : 	alnum_display_screen = create_system_texture_screen(ALNUM_DISPLAY_WIDTH, ALNUM_DISPLAY_HEIGHT, TEXTURE_INDEX_AVCKPT_ALNUM_DISPLAY, TEXTURE_TYPE_NOALPHA);

  002b3	6a 01		 push	 1
  002b5	68 0b 09 00 00	 push	 2315			; 0000090bH
  002ba	6a 40		 push	 64			; 00000040H
  002bc	68 00 01 00 00	 push	 256			; 00000100H
  002c1	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  002c6	a3 00 00 00 00	 mov	 DWORD PTR ?alnum_display_screen@@3PAUSCREEN@@A, eax

; 1116 : 
; 1117 : 	set_rgb_colour (MFD_COLOUR1,   0, 255,   0, 255);

  002cb	b8 04 00 00 00	 mov	 eax, 4
  002d0	6b c8 00	 imul	 ecx, eax, 0
  002d3	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  002da	b8 04 00 00 00	 mov	 eax, 4
  002df	6b c8 00	 imul	 ecx, eax, 0
  002e2	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  002e9	b8 04 00 00 00	 mov	 eax, 4
  002ee	6b c8 00	 imul	 ecx, eax, 0
  002f1	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  002f8	b8 04 00 00 00	 mov	 eax, 4
  002fd	6b c8 00	 imul	 ecx, eax, 0
  00300	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1118 : 	set_rgb_colour (MFD_COLOUR2,   0, 200,   0, 255);

  00307	b8 04 00 00 00	 mov	 eax, 4
  0030c	c1 e0 00	 shl	 eax, 0
  0030f	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  00316	b8 04 00 00 00	 mov	 eax, 4
  0031b	c1 e0 00	 shl	 eax, 0
  0031e	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  00325	b8 04 00 00 00	 mov	 eax, 4
  0032a	c1 e0 00	 shl	 eax, 0
  0032d	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00334	b8 04 00 00 00	 mov	 eax, 4
  00339	c1 e0 00	 shl	 eax, 0
  0033c	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 1119 : 	set_rgb_colour (MFD_COLOUR3,   0, 176,   0, 255);

  00343	b8 04 00 00 00	 mov	 eax, 4
  00348	d1 e0		 shl	 eax, 1
  0034a	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  00351	b8 04 00 00 00	 mov	 eax, 4
  00356	d1 e0		 shl	 eax, 1
  00358	c6 80 01 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 176 ; 000000b0H
  0035f	b8 04 00 00 00	 mov	 eax, 4
  00364	d1 e0		 shl	 eax, 1
  00366	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  0036d	b8 04 00 00 00	 mov	 eax, 4
  00372	d1 e0		 shl	 eax, 1
  00374	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 1120 : 	set_rgb_colour (MFD_COLOUR4,   0, 151,   0, 255);

  0037b	b8 04 00 00 00	 mov	 eax, 4
  00380	6b c8 03	 imul	 ecx, eax, 3
  00383	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  0038a	b8 04 00 00 00	 mov	 eax, 4
  0038f	6b c8 03	 imul	 ecx, eax, 3
  00392	c6 81 01 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 151 ; 00000097H
  00399	b8 04 00 00 00	 mov	 eax, 4
  0039e	6b c8 03	 imul	 ecx, eax, 3
  003a1	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  003a8	b8 04 00 00 00	 mov	 eax, 4
  003ad	6b c8 03	 imul	 ecx, eax, 3
  003b0	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1121 : 	set_rgb_colour (MFD_COLOUR5,   0, 149,   0, 255);

  003b7	b8 04 00 00 00	 mov	 eax, 4
  003bc	c1 e0 02	 shl	 eax, 2
  003bf	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  003c6	b8 04 00 00 00	 mov	 eax, 4
  003cb	c1 e0 02	 shl	 eax, 2
  003ce	c6 80 01 00 00
	00 95		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 149 ; 00000095H
  003d5	b8 04 00 00 00	 mov	 eax, 4
  003da	c1 e0 02	 shl	 eax, 2
  003dd	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  003e4	b8 04 00 00 00	 mov	 eax, 4
  003e9	c1 e0 02	 shl	 eax, 2
  003ec	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 1122 : 	set_rgb_colour (MFD_COLOUR6,  40,  68,  56, 255);

  003f3	b8 04 00 00 00	 mov	 eax, 4
  003f8	6b c8 05	 imul	 ecx, eax, 5
  003fb	c6 81 02 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 40 ; 00000028H
  00402	b8 04 00 00 00	 mov	 eax, 4
  00407	6b c8 05	 imul	 ecx, eax, 5
  0040a	c6 81 01 00 00
	00 44		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 68 ; 00000044H
  00411	b8 04 00 00 00	 mov	 eax, 4
  00416	6b c8 05	 imul	 ecx, eax, 5
  00419	c6 81 00 00 00
	00 38		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 56 ; 00000038H
  00420	b8 04 00 00 00	 mov	 eax, 4
  00425	6b c8 05	 imul	 ecx, eax, 5
  00428	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1123 : 
; 1124 : 	set_rgb_colour (clear_green_mfd_colour, 10, 30, 15, 255);

  0042f	c6 05 02 00 00
	00 0a		 mov	 BYTE PTR ?clear_green_mfd_colour@@3UREAL_COLOUR@@A+2, 10 ; 0000000aH
  00436	c6 05 01 00 00
	00 1e		 mov	 BYTE PTR ?clear_green_mfd_colour@@3UREAL_COLOUR@@A+1, 30 ; 0000001eH
  0043d	c6 05 00 00 00
	00 0f		 mov	 BYTE PTR ?clear_green_mfd_colour@@3UREAL_COLOUR@@A, 15 ; 0000000fH
  00444	c6 05 03 00 00
	00 ff		 mov	 BYTE PTR ?clear_green_mfd_colour@@3UREAL_COLOUR@@A+3, 255 ; 000000ffH

; 1125 : 	set_rgb_colour (off_mfd_colour, 10, 20, 15, 255);

  0044b	c6 05 02 00 00
	00 0a		 mov	 BYTE PTR ?off_mfd_colour@@3UREAL_COLOUR@@A+2, 10 ; 0000000aH
  00452	c6 05 01 00 00
	00 14		 mov	 BYTE PTR ?off_mfd_colour@@3UREAL_COLOUR@@A+1, 20 ; 00000014H
  00459	c6 05 00 00 00
	00 0f		 mov	 BYTE PTR ?off_mfd_colour@@3UREAL_COLOUR@@A, 15 ; 0000000fH
  00460	c6 05 03 00 00
	00 ff		 mov	 BYTE PTR ?off_mfd_colour@@3UREAL_COLOUR@@A+3, 255 ; 000000ffH

; 1126 : 
; 1127 : 	clear_mfd_colour=clear_green_mfd_colour;

  00467	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_green_mfd_colour@@3UREAL_COLOUR@@A
  0046c	a3 00 00 00 00	 mov	 DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A, eax

; 1128 : 
; 1129 : 	//VJ 030423 TSd render mod
; 1130 : 	set_rgb_colour (MFD_COLOUR1,              0, 255,   0, 255);

  00471	b8 04 00 00 00	 mov	 eax, 4
  00476	6b c8 00	 imul	 ecx, eax, 0
  00479	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  00480	b8 04 00 00 00	 mov	 eax, 4
  00485	6b c8 00	 imul	 ecx, eax, 0
  00488	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  0048f	b8 04 00 00 00	 mov	 eax, 4
  00494	6b c8 00	 imul	 ecx, eax, 0
  00497	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  0049e	b8 04 00 00 00	 mov	 eax, 4
  004a3	6b c8 00	 imul	 ecx, eax, 0
  004a6	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1131 : 	set_rgb_colour (MFD_COLOUR2,              0, 200,   0, 255);

  004ad	b8 04 00 00 00	 mov	 eax, 4
  004b2	c1 e0 00	 shl	 eax, 0
  004b5	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  004bc	b8 04 00 00 00	 mov	 eax, 4
  004c1	c1 e0 00	 shl	 eax, 0
  004c4	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  004cb	b8 04 00 00 00	 mov	 eax, 4
  004d0	c1 e0 00	 shl	 eax, 0
  004d3	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  004da	b8 04 00 00 00	 mov	 eax, 4
  004df	c1 e0 00	 shl	 eax, 0
  004e2	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 1132 : 	set_rgb_colour (MFD_COLOUR3,              0, 176,   0, 255);

  004e9	b8 04 00 00 00	 mov	 eax, 4
  004ee	d1 e0		 shl	 eax, 1
  004f0	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  004f7	b8 04 00 00 00	 mov	 eax, 4
  004fc	d1 e0		 shl	 eax, 1
  004fe	c6 80 01 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 176 ; 000000b0H
  00505	b8 04 00 00 00	 mov	 eax, 4
  0050a	d1 e0		 shl	 eax, 1
  0050c	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00513	b8 04 00 00 00	 mov	 eax, 4
  00518	d1 e0		 shl	 eax, 1
  0051a	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 1133 : 	set_rgb_colour (MFD_COLOUR4,              0, 151,   0, 255);

  00521	b8 04 00 00 00	 mov	 eax, 4
  00526	6b c8 03	 imul	 ecx, eax, 3
  00529	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  00530	b8 04 00 00 00	 mov	 eax, 4
  00535	6b c8 03	 imul	 ecx, eax, 3
  00538	c6 81 01 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 151 ; 00000097H
  0053f	b8 04 00 00 00	 mov	 eax, 4
  00544	6b c8 03	 imul	 ecx, eax, 3
  00547	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  0054e	b8 04 00 00 00	 mov	 eax, 4
  00553	6b c8 03	 imul	 ecx, eax, 3
  00556	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1134 : 	set_rgb_colour (MFD_COLOUR5,              0, 128,   0, 255);

  0055d	b8 04 00 00 00	 mov	 eax, 4
  00562	c1 e0 02	 shl	 eax, 2
  00565	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  0056c	b8 04 00 00 00	 mov	 eax, 4
  00571	c1 e0 02	 shl	 eax, 2
  00574	c6 80 01 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 128 ; 00000080H
  0057b	b8 04 00 00 00	 mov	 eax, 4
  00580	c1 e0 02	 shl	 eax, 2
  00583	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  0058a	b8 04 00 00 00	 mov	 eax, 4
  0058f	c1 e0 02	 shl	 eax, 2
  00592	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 1135 : 	set_rgb_colour (MFD_COLOUR6,             40,  68,  56, 255);

  00599	b8 04 00 00 00	 mov	 eax, 4
  0059e	6b c8 05	 imul	 ecx, eax, 5
  005a1	c6 81 02 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 40 ; 00000028H
  005a8	b8 04 00 00 00	 mov	 eax, 4
  005ad	6b c8 05	 imul	 ecx, eax, 5
  005b0	c6 81 01 00 00
	00 44		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 68 ; 00000044H
  005b7	b8 04 00 00 00	 mov	 eax, 4
  005bc	6b c8 05	 imul	 ecx, eax, 5
  005bf	c6 81 00 00 00
	00 38		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 56 ; 00000038H
  005c6	b8 04 00 00 00	 mov	 eax, 4
  005cb	6b c8 05	 imul	 ecx, eax, 5
  005ce	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1136 : 	set_rgb_colour (MFD_CONTOUR_COLOUR,     255, 100,   0, 255);

  005d5	b8 04 00 00 00	 mov	 eax, 4
  005da	6b c8 06	 imul	 ecx, eax, 6
  005dd	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  005e4	b8 04 00 00 00	 mov	 eax, 4
  005e9	6b c8 06	 imul	 ecx, eax, 6
  005ec	c6 81 01 00 00
	00 64		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 100 ; 00000064H
  005f3	b8 04 00 00 00	 mov	 eax, 4
  005f8	6b c8 06	 imul	 ecx, eax, 6
  005fb	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00602	b8 04 00 00 00	 mov	 eax, 4
  00607	6b c8 06	 imul	 ecx, eax, 6
  0060a	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1137 : 	set_rgb_colour (MFD_RIVER_COLOUR,        50,  75, 225, 255);

  00611	b8 04 00 00 00	 mov	 eax, 4
  00616	6b c8 07	 imul	 ecx, eax, 7
  00619	c6 81 02 00 00
	00 32		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 50 ; 00000032H
  00620	b8 04 00 00 00	 mov	 eax, 4
  00625	6b c8 07	 imul	 ecx, eax, 7
  00628	c6 81 01 00 00
	00 4b		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 75 ; 0000004bH
  0062f	b8 04 00 00 00	 mov	 eax, 4
  00634	6b c8 07	 imul	 ecx, eax, 7
  00637	c6 81 00 00 00
	00 e1		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 225 ; 000000e1H
  0063e	b8 04 00 00 00	 mov	 eax, 4
  00643	6b c8 07	 imul	 ecx, eax, 7
  00646	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1138 : 	set_rgb_colour (MFD_ROAD_COLOUR,        255, 200,   0, 255);

  0064d	b8 04 00 00 00	 mov	 eax, 4
  00652	c1 e0 03	 shl	 eax, 3
  00655	c6 80 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 255 ; 000000ffH
  0065c	b8 04 00 00 00	 mov	 eax, 4
  00661	c1 e0 03	 shl	 eax, 3
  00664	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  0066b	b8 04 00 00 00	 mov	 eax, 4
  00670	c1 e0 03	 shl	 eax, 3
  00673	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  0067a	b8 04 00 00 00	 mov	 eax, 4
  0067f	c1 e0 03	 shl	 eax, 3
  00682	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 1139 : 	set_rgb_colour (MFD_BACKGROUND_COLOUR,   15,  24,  16, 255);

  00689	b8 04 00 00 00	 mov	 eax, 4
  0068e	6b c8 09	 imul	 ecx, eax, 9
  00691	c6 81 02 00 00
	00 0f		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 15 ; 0000000fH
  00698	b8 04 00 00 00	 mov	 eax, 4
  0069d	6b c8 09	 imul	 ecx, eax, 9
  006a0	c6 81 01 00 00
	00 18		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 24 ; 00000018H
  006a7	b8 04 00 00 00	 mov	 eax, 4
  006ac	6b c8 09	 imul	 ecx, eax, 9
  006af	c6 81 00 00 00
	00 10		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 16 ; 00000010H
  006b6	b8 04 00 00 00	 mov	 eax, 4
  006bb	6b c8 09	 imul	 ecx, eax, 9
  006be	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1140 : 	set_rgb_colour (MFD_CLEAR_COLOUR,         0,   0,   0,   0);

  006c5	b8 04 00 00 00	 mov	 eax, 4
  006ca	6b c8 13	 imul	 ecx, eax, 19
  006cd	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  006d4	b8 04 00 00 00	 mov	 eax, 4
  006d9	6b c8 13	 imul	 ecx, eax, 19
  006dc	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 0
  006e3	b8 04 00 00 00	 mov	 eax, 4
  006e8	6b c8 13	 imul	 ecx, eax, 19
  006eb	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  006f2	b8 04 00 00 00	 mov	 eax, 4
  006f7	6b c8 13	 imul	 ecx, eax, 19
  006fa	c6 81 03 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 0

; 1141 : 
; 1142 : 	if (command_line_colour_mfd)

  00701	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_colour_mfd@@3HA, 0 ; command_line_colour_mfd
  00708	0f 84 a9 01 00
	00		 je	 $LN12@initialise

; 1143 : 	{
; 1144 : 		set_rgb_colour (MFD_COLOUR_BLUE,          60, 160, 255,  255);

  0070e	b8 04 00 00 00	 mov	 eax, 4
  00713	6b c8 0c	 imul	 ecx, eax, 12
  00716	c6 81 02 00 00
	00 3c		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 60 ; 0000003cH
  0071d	b8 04 00 00 00	 mov	 eax, 4
  00722	6b c8 0c	 imul	 ecx, eax, 12
  00725	c6 81 01 00 00
	00 a0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 160 ; 000000a0H
  0072c	b8 04 00 00 00	 mov	 eax, 4
  00731	6b c8 0c	 imul	 ecx, eax, 12
  00734	c6 81 00 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 255 ; 000000ffH
  0073b	b8 04 00 00 00	 mov	 eax, 4
  00740	6b c8 0c	 imul	 ecx, eax, 12
  00743	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1145 : 		set_rgb_colour (MFD_COLOUR_DARK_BLUE,	   0,   0,  96,  255);

  0074a	b8 04 00 00 00	 mov	 eax, 4
  0074f	6b c8 11	 imul	 ecx, eax, 17
  00752	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  00759	b8 04 00 00 00	 mov	 eax, 4
  0075e	6b c8 11	 imul	 ecx, eax, 17
  00761	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 0
  00768	b8 04 00 00 00	 mov	 eax, 4
  0076d	6b c8 11	 imul	 ecx, eax, 17
  00770	c6 81 00 00 00
	00 60		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 96 ; 00000060H
  00777	b8 04 00 00 00	 mov	 eax, 4
  0077c	6b c8 11	 imul	 ecx, eax, 17
  0077f	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1146 : 		set_rgb_colour (MFD_COLOUR_YELLOW,       230, 230,  40,  255);

  00786	b8 04 00 00 00	 mov	 eax, 4
  0078b	6b c8 0d	 imul	 ecx, eax, 13
  0078e	c6 81 02 00 00
	00 e6		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 230 ; 000000e6H
  00795	b8 04 00 00 00	 mov	 eax, 4
  0079a	6b c8 0d	 imul	 ecx, eax, 13
  0079d	c6 81 01 00 00
	00 e6		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 230 ; 000000e6H
  007a4	b8 04 00 00 00	 mov	 eax, 4
  007a9	6b c8 0d	 imul	 ecx, eax, 13
  007ac	c6 81 00 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 40 ; 00000028H
  007b3	b8 04 00 00 00	 mov	 eax, 4
  007b8	6b c8 0d	 imul	 ecx, eax, 13
  007bb	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1147 : 		set_rgb_colour (MFD_COLOUR_DARK_YELLOW,  165, 165,  30,  255);

  007c2	b8 04 00 00 00	 mov	 eax, 4
  007c7	6b c8 0e	 imul	 ecx, eax, 14
  007ca	c6 81 02 00 00
	00 a5		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 165 ; 000000a5H
  007d1	b8 04 00 00 00	 mov	 eax, 4
  007d6	6b c8 0e	 imul	 ecx, eax, 14
  007d9	c6 81 01 00 00
	00 a5		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 165 ; 000000a5H
  007e0	b8 04 00 00 00	 mov	 eax, 4
  007e5	6b c8 0e	 imul	 ecx, eax, 14
  007e8	c6 81 00 00 00
	00 1e		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 30 ; 0000001eH
  007ef	b8 04 00 00 00	 mov	 eax, 4
  007f4	6b c8 0e	 imul	 ecx, eax, 14
  007f7	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1148 : 		set_rgb_colour (MFD_COLOUR_RED,          210,  90,  60,  255);

  007fe	b8 04 00 00 00	 mov	 eax, 4
  00803	6b c8 0f	 imul	 ecx, eax, 15
  00806	c6 81 02 00 00
	00 d2		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 210 ; 000000d2H
  0080d	b8 04 00 00 00	 mov	 eax, 4
  00812	6b c8 0f	 imul	 ecx, eax, 15
  00815	c6 81 01 00 00
	00 5a		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 90 ; 0000005aH
  0081c	b8 04 00 00 00	 mov	 eax, 4
  00821	6b c8 0f	 imul	 ecx, eax, 15
  00824	c6 81 00 00 00
	00 3c		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 60 ; 0000003cH
  0082b	b8 04 00 00 00	 mov	 eax, 4
  00830	6b c8 0f	 imul	 ecx, eax, 15
  00833	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1149 : 		set_rgb_colour (MFD_COLOUR_DARK_RED,	 148,  32,   0,  255);

  0083a	b8 04 00 00 00	 mov	 eax, 4
  0083f	6b c8 12	 imul	 ecx, eax, 18
  00842	c6 81 02 00 00
	00 94		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 148 ; 00000094H
  00849	b8 04 00 00 00	 mov	 eax, 4
  0084e	6b c8 12	 imul	 ecx, eax, 18
  00851	c6 81 01 00 00
	00 20		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 32 ; 00000020H
  00858	b8 04 00 00 00	 mov	 eax, 4
  0085d	6b c8 12	 imul	 ecx, eax, 18
  00860	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00867	b8 04 00 00 00	 mov	 eax, 4
  0086c	6b c8 12	 imul	 ecx, eax, 18
  0086f	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1150 : 		set_rgb_colour (MFD_COLOUR_CYAN,          60, 255, 230,  255);

  00876	b8 04 00 00 00	 mov	 eax, 4
  0087b	c1 e0 04	 shl	 eax, 4
  0087e	c6 80 02 00 00
	00 3c		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 60 ; 0000003cH
  00885	b8 04 00 00 00	 mov	 eax, 4
  0088a	c1 e0 04	 shl	 eax, 4
  0088d	c6 80 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 255 ; 000000ffH
  00894	b8 04 00 00 00	 mov	 eax, 4
  00899	c1 e0 04	 shl	 eax, 4
  0089c	c6 80 00 00 00
	00 e6		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 230 ; 000000e6H
  008a3	b8 04 00 00 00	 mov	 eax, 4
  008a8	c1 e0 04	 shl	 eax, 4
  008ab	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 1151 : 	}
; 1152 : 	else

  008b2	e9 a8 00 00 00	 jmp	 $LN13@initialise
$LN12@initialise:

; 1153 : 	{
; 1154 : 		MFD_COLOUR_BLUE = MFD_COLOUR1;

  008b7	b8 04 00 00 00	 mov	 eax, 4
  008bc	6b c8 00	 imul	 ecx, eax, 0
  008bf	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008c5	b8 04 00 00 00	 mov	 eax, 4
  008ca	6b c8 0c	 imul	 ecx, eax, 12
  008cd	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 1155 : 		MFD_COLOUR_DARK_BLUE = MFD_COLOUR5;

  008d3	b8 04 00 00 00	 mov	 eax, 4
  008d8	c1 e0 02	 shl	 eax, 2
  008db	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  008e1	ba 04 00 00 00	 mov	 edx, 4
  008e6	6b c2 11	 imul	 eax, edx, 17
  008e9	89 88 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], ecx

; 1156 : 		MFD_COLOUR_YELLOW = MFD_COLOUR1;

  008ef	b8 04 00 00 00	 mov	 eax, 4
  008f4	6b c8 00	 imul	 ecx, eax, 0
  008f7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008fd	b8 04 00 00 00	 mov	 eax, 4
  00902	6b c8 0d	 imul	 ecx, eax, 13
  00905	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 1157 : 		MFD_COLOUR_RED = MFD_COLOUR1;

  0090b	b8 04 00 00 00	 mov	 eax, 4
  00910	6b c8 00	 imul	 ecx, eax, 0
  00913	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00919	b8 04 00 00 00	 mov	 eax, 4
  0091e	6b c8 0f	 imul	 ecx, eax, 15
  00921	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 1158 : 		MFD_COLOUR_DARK_RED = MFD_COLOUR5;

  00927	b8 04 00 00 00	 mov	 eax, 4
  0092c	c1 e0 02	 shl	 eax, 2
  0092f	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00935	ba 04 00 00 00	 mov	 edx, 4
  0093a	6b c2 12	 imul	 eax, edx, 18
  0093d	89 88 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], ecx

; 1159 : 		MFD_COLOUR_CYAN = MFD_COLOUR1;

  00943	b8 04 00 00 00	 mov	 eax, 4
  00948	6b c8 00	 imul	 ecx, eax, 0
  0094b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00951	b8 04 00 00 00	 mov	 eax, 4
  00956	c1 e0 04	 shl	 eax, 4
  00959	89 90 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], edx
$LN13@initialise:

; 1160 : 	}
; 1161 : 
; 1162 : 	set_rgb_colour (TEXT_COLOUR1,           254, 204,   1, 255);

  0095f	b8 04 00 00 00	 mov	 eax, 4
  00964	6b c8 00	 imul	 ecx, eax, 0
  00967	c6 81 02 00 00
	00 fe		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx+2], 254 ; 000000feH
  0096e	b8 04 00 00 00	 mov	 eax, 4
  00973	6b c8 00	 imul	 ecx, eax, 0
  00976	c6 81 01 00 00
	00 cc		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx+1], 204 ; 000000ccH
  0097d	b8 04 00 00 00	 mov	 eax, 4
  00982	6b c8 00	 imul	 ecx, eax, 0
  00985	c6 81 00 00 00
	00 01		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx], 1
  0098c	b8 04 00 00 00	 mov	 eax, 4
  00991	6b c8 00	 imul	 ecx, eax, 0
  00994	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1163 : 	set_rgb_colour (TEXT_BACKGROUND_COLOUR,  66,  35,  11, 255);

  0099b	b8 04 00 00 00	 mov	 eax, 4
  009a0	c1 e0 00	 shl	 eax, 0
  009a3	c6 80 02 00 00
	00 42		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax+2], 66 ; 00000042H
  009aa	b8 04 00 00 00	 mov	 eax, 4
  009af	c1 e0 00	 shl	 eax, 0
  009b2	c6 80 01 00 00
	00 23		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax+1], 35 ; 00000023H
  009b9	b8 04 00 00 00	 mov	 eax, 4
  009be	c1 e0 00	 shl	 eax, 0
  009c1	c6 80 00 00 00
	00 0b		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax], 11 ; 0000000bH
  009c8	b8 04 00 00 00	 mov	 eax, 4
  009cd	c1 e0 00	 shl	 eax, 0
  009d0	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 1164 : 
; 1165 :    Initialise_TSD_render_terrain();

  009d7	e8 00 00 00 00	 call	 ?Initialise_TSD_render_terrain@@YGXXZ ; Initialise_TSD_render_terrain

; 1166 : 
; 1167 : }

  009dc	5f		 pop	 edi
  009dd	5e		 pop	 esi
  009de	5b		 pop	 ebx
  009df	8b e5		 mov	 esp, ebp
  009e1	5d		 pop	 ebp
  009e2	c3		 ret	 0
?initialise_apache_mfd@@YGXXZ ENDP			; initialise_apache_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?tan@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?tan@@YGMM@Z PROC					; tan, COMDAT

; 299  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 300  : 	return (_CSTD tanf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _tanf
  00019	83 c4 04	 add	 esp, 4

; 301  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?tan@@YGMM@Z ENDP					; tan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sin@@YGMM@Z PROC					; sin, COMDAT

; 284  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 285  : 	return (_CSTD sinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sinf
  00019	83 c4 04	 add	 esp, 4

; 286  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sin@@YGMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fmod@@YGMMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
__Yx$ = 12						; size = 4
?fmod@@YGMMM@Z PROC					; fmod, COMDAT

; 143  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 144  : 	return (_CSTD fmodf(_Xx, _Yx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _fmodf
  00024	83 c4 08	 add	 esp, 8

; 145  : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?fmod@@YGMMM@Z ENDP					; fmod
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fabs@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?fabs@@YGMM@Z PROC					; fabs, COMDAT

; 112  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 113  : 	return (_CSTD fabsf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _fabsf
  00019	83 c4 04	 add	 esp, 4

; 114  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?fabs@@YGMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?cos@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?cos@@YGMM@Z PROC					; cos, COMDAT

; 77   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 78   : 	return (_CSTD cosf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _cosf
  00019	83 c4 04	 add	 esp, 4

; 79   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?cos@@YGMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan2@@YGMMM@Z
_TEXT	SEGMENT
__Yx$ = 8						; size = 4
__Xx$ = 12						; size = 4
?atan2@@YGMMM@Z PROC					; atan2, COMDAT

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return (_CSTD atan2f(_Yx, _Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _atan2f
  00024	83 c4 08	 add	 esp, 8

; 58   : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?atan2@@YGMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _tanf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_tanf	PROC						; COMDAT

; 764  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 765  :             return (float)tan(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _tan
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 766  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_tanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 750  :             return (float)sin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 751  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fmodf
_TEXT	SEGMENT
tv74 = -68						; size = 4
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
_fmodf	PROC						; COMDAT

; 690  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 691  :             return (float)fmod(_X, _Y);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _fmod
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 692  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_fmodf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 671  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 672  :             return (float)fabs(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _fabs
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 673  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 648  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 649  :             return (float)cos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _cos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 650  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv74 = -68						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 633  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 634  :             return (float)atan2(_Y, _X);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _atan2
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 635  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf_s
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_sprintf_s PROC						; COMDAT

; 1841 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1842 :             int _Result;
; 1843 :             va_list _ArgList;
; 1844 :             __crt_va_start(_ArgList, _Format);

  00009	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1845 :             _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  0001c	52		 push	 edx
  0001d	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __vsprintf_s_l
  00026	83 c4 14	 add	 esp, 20			; 00000014H
  00029	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1846 :             __crt_va_end(_ArgList);

  0002c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1847 :             return _Result;

  00033	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1848 :         }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_sprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_s_l
_TEXT	SEGMENT
tv73 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsprintf_s_l PROC					; COMDAT

; 1497 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1498 :         int const _Result = __stdio_common_vsprintf_s(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00025	52		 push	 edx
  00026	8b 00		 mov	 eax, DWORD PTR [eax]
  00028	50		 push	 eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf_s
  0002f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00032	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1499 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1500 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1501 : 
; 1502 :         return _Result < 0 ? -1 : _Result;

  00035	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00039	7d 09		 jge	 SHORT $LN3@vsprintf_s
  0003b	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv73[ebp], -1
  00042	eb 06		 jmp	 SHORT $LN4@vsprintf_s
$LN3@vsprintf_s:
  00044	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00047	89 45 b8	 mov	 DWORD PTR tv73[ebp], eax
$LN4@vsprintf_s:
  0004a	8b 45 b8	 mov	 eax, DWORD PTR tv73[ebp]

; 1503 :     }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
__vsprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
