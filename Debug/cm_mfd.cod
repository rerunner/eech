; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BL@LMEENCLB@COMANCHE_MAIN_MFD_MODE_OFF@	; `string'
PUBLIC	??_C@_0BP@OBPLLEL@COMANCHE_MAIN_MFD_MODE_DAMAGED@ ; `string'
PUBLIC	??_C@_0CE@BAGKBDCO@COMANCHE_MAIN_MFD_MODE_GROUND_R@ ; `string'
PUBLIC	??_C@_0CB@NPPLLCFE@COMANCHE_MAIN_MFD_MODE_AIR_RADA@ ; `string'
PUBLIC	??_C@_0BM@FNKGDNDG@COMANCHE_MAIN_MFD_MODE_FLIR@	; `string'
PUBLIC	??_C@_0BL@DOCFDAPP@COMANCHE_MAIN_MFD_MODE_DTV@	; `string'
PUBLIC	??_C@_0BL@KGKBENIJ@COMANCHE_MAIN_MFD_MODE_DVO@	; `string'
PUBLIC	??_C@_0BL@BDIHABDG@COMANCHE_MAIN_MFD_MODE_TSD@	; `string'
PUBLIC	??_C@_0BL@GNFLJHNK@COMANCHE_MAIN_MFD_MODE_ASE@	; `string'
PUBLIC	??_C@_0BO@LIJHGNEM@COMANCHE_MAIN_MFD_MODE_WEAPON@ ; `string'
PUBLIC	??_C@_0BO@ILDEAOBP@COMANCHE_MAIN_MFD_MODE_SYSTEM@ ; `string'
PUBLIC	??_C@_0BO@GCHGEOCB@COMANCHE_MAIN_MFD_MODE_ENGINE@ ; `string'
PUBLIC	??_C@_0BO@BGONGDEH@COMANCHE_MAIN_MFD_MODE_FLIGHT@ ; `string'
PUBLIC	??_C@_0BP@BGOEFDGB@COMANCHE_MAIN_MFD_MODE_MISSION@ ; `string'
PUBLIC	??_C@_0CF@GKLKKOOE@COMANCHE_MAIN_MFD_LOCATION_PILO@ ; `string'
PUBLIC	??_C@_0CF@NKHMIOEI@COMANCHE_MAIN_MFD_LOCATION_PILO@ ; `string'
PUBLIC	??_C@_0CI@KDPADHEA@COMANCHE_MAIN_MFD_LOCATION_CO_P@ ; `string'
PUBLIC	??_C@_0CI@BDDGBHOM@COMANCHE_MAIN_MFD_LOCATION_CO_P@ ; `string'
PUBLIC	??_C@_0BL@LKGEDHBJ@COMANCHE_SIDE_MFD_MODE_OFF@	; `string'
PUBLIC	??_C@_0BP@FFAOBJHN@COMANCHE_SIDE_MFD_MODE_DAMAGED@ ; `string'
PUBLIC	??_C@_0BO@HHJLEGPD@COMANCHE_SIDE_MFD_MODE_WEAPON@ ; `string'
PUBLIC	??_C@_0BO@EEDICFKA@COMANCHE_SIDE_MFD_MODE_SYSTEM@ ; `string'
PUBLIC	??_C@_0BO@KNHKGFJO@COMANCHE_SIDE_MFD_MODE_ENGINE@ ; `string'
PUBLIC	??_C@_0BO@NJOBEIPI@COMANCHE_SIDE_MFD_MODE_FLIGHT@ ; `string'
PUBLIC	??_C@_0CF@DKDCHHAJ@COMANCHE_SIDE_MFD_LOCATION_PILO@ ; `string'
PUBLIC	??_C@_0CF@IKPEFHKF@COMANCHE_SIDE_MFD_LOCATION_PILO@ ; `string'
PUBLIC	??_C@_0CI@LBFDABKH@COMANCHE_SIDE_MFD_LOCATION_CO_P@ ; `string'
PUBLIC	??_C@_0CI@BJFCBAL@COMANCHE_SIDE_MFD_LOCATION_CO_P@ ; `string'
_BSS	SEGMENT
?pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A DD 01H DUP (?) ; pilot_lhs_main_mfd_mode
?pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A DD 01H DUP (?) ; pilot_rhs_main_mfd_mode
?co_pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A DD 01H DUP (?) ; co_pilot_lhs_main_mfd_mode
?co_pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A DD 01H DUP (?) ; co_pilot_rhs_main_mfd_mode
?pilot_lhs_side_mfd_mode@@3W4COMANCHE_SIDE_MFD_MODES@@A DD 01H DUP (?) ; pilot_lhs_side_mfd_mode
?pilot_rhs_side_mfd_mode@@3W4COMANCHE_SIDE_MFD_MODES@@A DD 01H DUP (?) ; pilot_rhs_side_mfd_mode
?co_pilot_lhs_side_mfd_mode@@3W4COMANCHE_SIDE_MFD_MODES@@A DD 01H DUP (?) ; co_pilot_lhs_side_mfd_mode
?co_pilot_rhs_side_mfd_mode@@3W4COMANCHE_SIDE_MFD_MODES@@A DD 01H DUP (?) ; co_pilot_rhs_side_mfd_mode
_BSS	ENDS
;	COMDAT ??_C@_0CI@BJFCBAL@COMANCHE_SIDE_MFD_LOCATION_CO_P@
CONST	SEGMENT
??_C@_0CI@BJFCBAL@COMANCHE_SIDE_MFD_LOCATION_CO_P@ DB 'COMANCHE_SIDE_MFD_'
	DB	'LOCATION_CO_PILOT_RHS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@LBFDABKH@COMANCHE_SIDE_MFD_LOCATION_CO_P@
CONST	SEGMENT
??_C@_0CI@LBFDABKH@COMANCHE_SIDE_MFD_LOCATION_CO_P@ DB 'COMANCHE_SIDE_MFD'
	DB	'_LOCATION_CO_PILOT_LHS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@IKPEFHKF@COMANCHE_SIDE_MFD_LOCATION_PILO@
CONST	SEGMENT
??_C@_0CF@IKPEFHKF@COMANCHE_SIDE_MFD_LOCATION_PILO@ DB 'COMANCHE_SIDE_MFD'
	DB	'_LOCATION_PILOT_RHS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DKDCHHAJ@COMANCHE_SIDE_MFD_LOCATION_PILO@
CONST	SEGMENT
??_C@_0CF@DKDCHHAJ@COMANCHE_SIDE_MFD_LOCATION_PILO@ DB 'COMANCHE_SIDE_MFD'
	DB	'_LOCATION_PILOT_LHS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NJOBEIPI@COMANCHE_SIDE_MFD_MODE_FLIGHT@
CONST	SEGMENT
??_C@_0BO@NJOBEIPI@COMANCHE_SIDE_MFD_MODE_FLIGHT@ DB 'COMANCHE_SIDE_MFD_M'
	DB	'ODE_FLIGHT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KNHKGFJO@COMANCHE_SIDE_MFD_MODE_ENGINE@
CONST	SEGMENT
??_C@_0BO@KNHKGFJO@COMANCHE_SIDE_MFD_MODE_ENGINE@ DB 'COMANCHE_SIDE_MFD_M'
	DB	'ODE_ENGINE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EEDICFKA@COMANCHE_SIDE_MFD_MODE_SYSTEM@
CONST	SEGMENT
??_C@_0BO@EEDICFKA@COMANCHE_SIDE_MFD_MODE_SYSTEM@ DB 'COMANCHE_SIDE_MFD_M'
	DB	'ODE_SYSTEM', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@HHJLEGPD@COMANCHE_SIDE_MFD_MODE_WEAPON@
CONST	SEGMENT
??_C@_0BO@HHJLEGPD@COMANCHE_SIDE_MFD_MODE_WEAPON@ DB 'COMANCHE_SIDE_MFD_M'
	DB	'ODE_WEAPON', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@FFAOBJHN@COMANCHE_SIDE_MFD_MODE_DAMAGED@
CONST	SEGMENT
??_C@_0BP@FFAOBJHN@COMANCHE_SIDE_MFD_MODE_DAMAGED@ DB 'COMANCHE_SIDE_MFD_'
	DB	'MODE_DAMAGED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LKGEDHBJ@COMANCHE_SIDE_MFD_MODE_OFF@
CONST	SEGMENT
??_C@_0BL@LKGEDHBJ@COMANCHE_SIDE_MFD_MODE_OFF@ DB 'COMANCHE_SIDE_MFD_MODE'
	DB	'_OFF', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BDDGBHOM@COMANCHE_MAIN_MFD_LOCATION_CO_P@
CONST	SEGMENT
??_C@_0CI@BDDGBHOM@COMANCHE_MAIN_MFD_LOCATION_CO_P@ DB 'COMANCHE_MAIN_MFD'
	DB	'_LOCATION_CO_PILOT_RHS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KDPADHEA@COMANCHE_MAIN_MFD_LOCATION_CO_P@
CONST	SEGMENT
??_C@_0CI@KDPADHEA@COMANCHE_MAIN_MFD_LOCATION_CO_P@ DB 'COMANCHE_MAIN_MFD'
	DB	'_LOCATION_CO_PILOT_LHS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@NKHMIOEI@COMANCHE_MAIN_MFD_LOCATION_PILO@
CONST	SEGMENT
??_C@_0CF@NKHMIOEI@COMANCHE_MAIN_MFD_LOCATION_PILO@ DB 'COMANCHE_MAIN_MFD'
	DB	'_LOCATION_PILOT_RHS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@GKLKKOOE@COMANCHE_MAIN_MFD_LOCATION_PILO@
CONST	SEGMENT
??_C@_0CF@GKLKKOOE@COMANCHE_MAIN_MFD_LOCATION_PILO@ DB 'COMANCHE_MAIN_MFD'
	DB	'_LOCATION_PILOT_LHS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BGOEFDGB@COMANCHE_MAIN_MFD_MODE_MISSION@
CONST	SEGMENT
??_C@_0BP@BGOEFDGB@COMANCHE_MAIN_MFD_MODE_MISSION@ DB 'COMANCHE_MAIN_MFD_'
	DB	'MODE_MISSION', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BGONGDEH@COMANCHE_MAIN_MFD_MODE_FLIGHT@
CONST	SEGMENT
??_C@_0BO@BGONGDEH@COMANCHE_MAIN_MFD_MODE_FLIGHT@ DB 'COMANCHE_MAIN_MFD_M'
	DB	'ODE_FLIGHT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GCHGEOCB@COMANCHE_MAIN_MFD_MODE_ENGINE@
CONST	SEGMENT
??_C@_0BO@GCHGEOCB@COMANCHE_MAIN_MFD_MODE_ENGINE@ DB 'COMANCHE_MAIN_MFD_M'
	DB	'ODE_ENGINE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@ILDEAOBP@COMANCHE_MAIN_MFD_MODE_SYSTEM@
CONST	SEGMENT
??_C@_0BO@ILDEAOBP@COMANCHE_MAIN_MFD_MODE_SYSTEM@ DB 'COMANCHE_MAIN_MFD_M'
	DB	'ODE_SYSTEM', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LIJHGNEM@COMANCHE_MAIN_MFD_MODE_WEAPON@
CONST	SEGMENT
??_C@_0BO@LIJHGNEM@COMANCHE_MAIN_MFD_MODE_WEAPON@ DB 'COMANCHE_MAIN_MFD_M'
	DB	'ODE_WEAPON', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@GNFLJHNK@COMANCHE_MAIN_MFD_MODE_ASE@
CONST	SEGMENT
??_C@_0BL@GNFLJHNK@COMANCHE_MAIN_MFD_MODE_ASE@ DB 'COMANCHE_MAIN_MFD_MODE'
	DB	'_ASE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BDIHABDG@COMANCHE_MAIN_MFD_MODE_TSD@
CONST	SEGMENT
??_C@_0BL@BDIHABDG@COMANCHE_MAIN_MFD_MODE_TSD@ DB 'COMANCHE_MAIN_MFD_MODE'
	DB	'_TSD', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KGKBENIJ@COMANCHE_MAIN_MFD_MODE_DVO@
CONST	SEGMENT
??_C@_0BL@KGKBENIJ@COMANCHE_MAIN_MFD_MODE_DVO@ DB 'COMANCHE_MAIN_MFD_MODE'
	DB	'_DVO', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DOCFDAPP@COMANCHE_MAIN_MFD_MODE_DTV@
CONST	SEGMENT
??_C@_0BL@DOCFDAPP@COMANCHE_MAIN_MFD_MODE_DTV@ DB 'COMANCHE_MAIN_MFD_MODE'
	DB	'_DTV', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FNKGDNDG@COMANCHE_MAIN_MFD_MODE_FLIR@
CONST	SEGMENT
??_C@_0BM@FNKGDNDG@COMANCHE_MAIN_MFD_MODE_FLIR@ DB 'COMANCHE_MAIN_MFD_MOD'
	DB	'E_FLIR', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NPPLLCFE@COMANCHE_MAIN_MFD_MODE_AIR_RADA@
CONST	SEGMENT
??_C@_0CB@NPPLLCFE@COMANCHE_MAIN_MFD_MODE_AIR_RADA@ DB 'COMANCHE_MAIN_MFD'
	DB	'_MODE_AIR_RADAR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@BAGKBDCO@COMANCHE_MAIN_MFD_MODE_GROUND_R@
CONST	SEGMENT
??_C@_0CE@BAGKBDCO@COMANCHE_MAIN_MFD_MODE_GROUND_R@ DB 'COMANCHE_MAIN_MFD'
	DB	'_MODE_GROUND_RADAR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OBPLLEL@COMANCHE_MAIN_MFD_MODE_DAMAGED@
CONST	SEGMENT
??_C@_0BP@OBPLLEL@COMANCHE_MAIN_MFD_MODE_DAMAGED@ DB 'COMANCHE_MAIN_MFD_M'
	DB	'ODE_DAMAGED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LMEENCLB@COMANCHE_MAIN_MFD_MODE_OFF@
CONST	SEGMENT
??_C@_0BL@LMEENCLB@COMANCHE_MAIN_MFD_MODE_OFF@ DB 'COMANCHE_MAIN_MFD_MODE'
	DB	'_OFF', 00H					; `string'
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	_atan2f
PUBLIC	_cosf
PUBLIC	_fmodf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	_tanf
PUBLIC	?atan2@@YGMMM@Z					; atan2
PUBLIC	?cos@@YGMM@Z					; cos
PUBLIC	?fmod@@YGMMM@Z					; fmod
PUBLIC	?sin@@YGMM@Z					; sin
PUBLIC	?sqrt@@YGMM@Z					; sqrt
PUBLIC	?tan@@YGMM@Z					; tan
PUBLIC	?initialise_comanche_mfd@@YGXXZ			; initialise_comanche_mfd
PUBLIC	?deinitialise_comanche_mfd@@YGXXZ		; deinitialise_comanche_mfd
PUBLIC	?draw_comanche_mfd@@YGXXZ			; draw_comanche_mfd
PUBLIC	?set_comanche_text_display_text@@YGXPAD0@Z	; set_comanche_text_display_text
PUBLIC	?draw_comanche_full_screen_display@@YGXXZ	; draw_comanche_full_screen_display
PUBLIC	?draw_overlaid_comanche_mfd@@YGXXZ		; draw_overlaid_comanche_mfd
PUBLIC	?get_comanche_main_mfd_has_focus@@YGHW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; get_comanche_main_mfd_has_focus
PUBLIC	?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode
PUBLIC	?select_comanche_side_mfd_mode@@YGXW4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ; select_comanche_side_mfd_mode
PUBLIC	?select_next_comanche_side_mfd@@YGXW4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ; select_next_comanche_side_mfd
PUBLIC	?select_next_comanche_main_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_next_comanche_main_mfd
PUBLIC	?select_previous_comanche_main_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_previous_comanche_main_mfd
PUBLIC	?toggle_comanche_main_mfd_on_off@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; toggle_comanche_main_mfd_on_off
PUBLIC	?toggle_comanche_side_mfd_on_off@@YGXW4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ; toggle_comanche_side_mfd_on_off
PUBLIC	?select_next_comanche_pilot_tsd_ase_range@@YGXXZ ; select_next_comanche_pilot_tsd_ase_range
PUBLIC	?select_next_comanche_co_pilot_tsd_ase_range@@YGXXZ ; select_next_comanche_co_pilot_tsd_ase_range
PUBLIC	?select_previous_comanche_pilot_tsd_ase_range@@YGXXZ ; select_previous_comanche_pilot_tsd_ase_range
PUBLIC	?select_previous_comanche_co_pilot_tsd_ase_range@@YGXXZ ; select_previous_comanche_co_pilot_tsd_ase_range
PUBLIC	?select_next_comanche_pilot_tsd_declutter_level@@YGXXZ ; select_next_comanche_pilot_tsd_declutter_level
PUBLIC	?select_next_comanche_co_pilot_tsd_declutter_level@@YGXXZ ; select_next_comanche_co_pilot_tsd_declutter_level
PUBLIC	?select_previous_comanche_pilot_tsd_declutter_level@@YGXXZ ; select_previous_comanche_pilot_tsd_declutter_level
PUBLIC	?select_previous_comanche_co_pilot_tsd_declutter_level@@YGXXZ ; select_previous_comanche_co_pilot_tsd_declutter_level
PUBLIC	?toggle_comanche_ase_auto_page@@YGXXZ		; toggle_comanche_ase_auto_page
PUBLIC	?auto_page_comanche_ase_main_mfd@@YGXXZ		; auto_page_comanche_ase_main_mfd
PUBLIC	?select_comanche_ground_radar_main_mfd@@YGXXZ	; select_comanche_ground_radar_main_mfd
PUBLIC	?select_comanche_air_radar_main_mfd@@YGXXZ	; select_comanche_air_radar_main_mfd
PUBLIC	?select_comanche_tads_main_mfd@@YGXXZ		; select_comanche_tads_main_mfd
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z@4JA ; `transform_mfd_screen_co_ords_to_mfd_texture_co_ords'::`1'::__LINE__Var
PUBLIC	??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_01KBJDNOO@i@				; `string'
PUBLIC	??_C@_01CBDEGOCN@j@				; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_03GOOLIKIF@?$CF3d@			; `string'
PUBLIC	??_C@_04OGKJMPGK@?$CF02d@			; `string'
PUBLIC	??_C@_04HPNJOLEN@?$CF3do@			; `string'
PUBLIC	?__LINE__Var@?0??draw_heading_scale@@YGXMH@Z@4JA ; `draw_heading_scale'::`1'::__LINE__Var
PUBLIC	??_C@_04OHGLKFFN@?$CF03d@			; `string'
PUBLIC	?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA ; `display_navigation_info'::`1'::__LINE__Var
PUBLIC	??_C@_06JCIGMCHD@?$CFc?3?$CFdm@			; `string'
PUBLIC	??_C@_09EKFBJBJG@?$CFc?3?$CF?41fKm@		; `string'
PUBLIC	??_C@_07CFANIJPM@?$CFc?3?$CFdKm@		; `string'
PUBLIC	??_C@_06BAOIPBEF@?9?3?9?9?4?9@			; `string'
PUBLIC	??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@	; `string'
PUBLIC	??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@		; `string'
PUBLIC	??_C@_05KABNCBHK@?$CFd?0?$CFd@			; `string'
PUBLIC	??_C@_05MDNKIPAL@?$CFd?5lb@			; `string'
PUBLIC	??_C@_05LIPABGF@?$CF?40fm@			; `string'
PUBLIC	??_C@_06NBEADFGO@?$CF?40fKm@			; `string'
PUBLIC	??_C@_03MAMPKPPK@XXX@				; `string'
PUBLIC	?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA ; `display_radar_target_details'::`1'::__LINE__Var
PUBLIC	??_C@_05EMNNHGFM@radar@				; `string'
PUBLIC	??_C@_03NGNKAJPJ@?$CFdm@			; `string'
PUBLIC	??_C@_06OMCABMNO@?$CF?41fKm@			; `string'
PUBLIC	??_C@_06HCPKJKPH@NO?5LOS@			; `string'
PUBLIC	??_C@_04LMMJFDCN@AUTO@				; `string'
PUBLIC	??_C@_06KODELPLK@LOCKED@			; `string'
PUBLIC	??_C@_06GPMJGLEM@MARKED@			; `string'
PUBLIC	?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA ; `draw_radar_target_symbol'::`1'::__LINE__Var
PUBLIC	??_C@_06JJLAMBGK@target@			; `string'
PUBLIC	??_C@_0BA@IIPCKJML@source_position@		; `string'
PUBLIC	??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@ ; `string'
PUBLIC	??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA ; `draw_ground_radar_clutter'::`1'::__LINE__Var
PUBLIC	??_C@_0DD@KDAGALDF@get_local_entity_type?5?$CItarget?$CJ?5@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA ; `draw_ground_radar_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_03NIFPGLBG@ALL@				; `string'
PUBLIC	??_C@_03IBEFMGAI@LOW@				; `string'
PUBLIC	??_C@_06HMBFJLMK@MEDIUM@			; `string'
PUBLIC	??_C@_03FFIBGFCJ@MED@				; `string'
PUBLIC	??_C@_04PKDHFCJF@HIGH@				; `string'
PUBLIC	??_C@_04MGKDMHFC@MARK@				; `string'
PUBLIC	?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA	; `draw_air_radar_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_05EJJKHDCK@ENEMY@				; `string'
PUBLIC	?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA ; `draw_3d_eo_display'::`1'::__LINE__Var
PUBLIC	??_C@_02KMMHFIEO@eo@				; `string'
PUBLIC	??_C@_0BF@MDEHLDP@eo_3d_texture_screen@		; `string'
PUBLIC	??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@ ; `string'
PUBLIC	??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@ ; `string'
PUBLIC	??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA ; `draw_full_screen_3d_eo_display'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA ; `draw_2d_eo_display'::`1'::__LINE__Var
PUBLIC	??_C@_04MIGKMLBH@FLIR@				; `string'
PUBLIC	??_C@_03ENJJJDDH@DTV@				; `string'
PUBLIC	??_C@_03NFBNOOEB@DVO@				; `string'
PUBLIC	??_C@_08JFLECGBM@LO?5LIGHT@			; `string'
PUBLIC	??_C@_02ONPABID@LO@				; `string'
PUBLIC	??_C@_04GGBPDDBN@?$CF?41f@			; `string'
PUBLIC	??_C@_01CPLAODJH@S@				; `string'
PUBLIC	??_C@_06BLLIFECI@?$CF3d?5FT@			; `string'
PUBLIC	??_C@_07FGFCMGOE@?$CF3d?5KTS@			; `string'
PUBLIC	??_C@_09ICGCKLLB@LOW?5LIGHT@			; `string'
PUBLIC	??_C@_0L@CPHGBHEJ@CP?1G?5ID?4?4?4@		; `string'
PUBLIC	??_C@_0BD@PMDJPBGC@?$CFc?$CF04d?5M?5?5?5?$CF3d?5KPH@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_heading_scale_tsd@@YGXMH@Z@4JA ; `draw_heading_scale_tsd'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA ; `draw_tactical_situation_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0DA@GBKBAHOG@comanche_main_mfd_location_vali@ ; `string'
PUBLIC	??_C@_06LLLMNJMM@NO?5ACQ@			; `string'
PUBLIC	??_C@_03JKJFCLEN@FCR@				; `string'
PUBLIC	??_C@_04DBODHFDK@TADS@				; `string'
PUBLIC	??_C@_05BDMPLNHB@HIDSS@				; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_03DGGJGKKM@GND@				; `string'
PUBLIC	??_C@_03KNFJGCC@AIR@				; `string'
PUBLIC	??_C@_03CIAFGHAC@2Km@				; `string'
PUBLIC	??_C@_03LFNCFPLL@5Km@				; `string'
PUBLIC	??_C@_04PJCLBGLO@10Km@				; `string'
PUBLIC	??_C@_04IJFFJMFM@25Km@				; `string'
PUBLIC	??_C@_03DBNGLLAD@TGT@				; `string'
PUBLIC	??_C@_03DIMJBCMI@NAV@				; `string'
PUBLIC	?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA ; `get_closest_missile'::`1'::__LINE__Var
PUBLIC	??_C@_06OEKOLKIL@source@			; `string'
PUBLIC	??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA ; `draw_aircraft_survivability_equipment_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@		; `string'
PUBLIC	??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@		; `string'
PUBLIC	??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@		; `string'
PUBLIC	??_C@_0L@DADPKEOI@IR?5JAM?5XXX@			; `string'
PUBLIC	??_C@_09OKBKNIAL@IR?5JAM?5ON@			; `string'
PUBLIC	??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@			; `string'
PUBLIC	??_C@_06CNPDBJMK@IR?5XXX@			; `string'
PUBLIC	??_C@_05JBLHJOBL@IR?5ON@			; `string'
PUBLIC	??_C@_06CCMEMHEJ@IR?5OFF@			; `string'
PUBLIC	??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@			; `string'
PUBLIC	??_C@_09OKIOJJOP@RD?5JAM?5ON@			; `string'
PUBLIC	??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@			; `string'
PUBLIC	??_C@_06JNKFDAHI@RD?5XXX@			; `string'
PUBLIC	??_C@_05BHAGAOGB@RD?5ON@			; `string'
PUBLIC	??_C@_06JCJCOOPL@RD?5OFF@			; `string'
PUBLIC	??_C@_08GHAEIHAP@CHAFF?3XX@			; `string'
PUBLIC	??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@		; `string'
PUBLIC	??_C@_04KJNFJKOK@C?3XX@				; `string'
PUBLIC	??_C@_06GNOFKMCG@C?3?$CF02d@			; `string'
PUBLIC	??_C@_08HGDOPGOH@FLARE?3XX@			; `string'
PUBLIC	??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@		; `string'
PUBLIC	??_C@_04GBDFBFJK@F?3XX@				; `string'
PUBLIC	??_C@_06DPNNIDIB@F?3?$CF02d@			; `string'
PUBLIC	?__LINE__Var@?0??draw_weapon_display_mfd@@YGXXZ@4JA ; `draw_weapon_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_03NHPMNECN@ARM@				; `string'
PUBLIC	??_C@_03CBNMOHKF@C?1M@				; `string'
PUBLIC	??_C@_0L@GPHKKCOA@CHAFFx?$CF02d@		; `string'
PUBLIC	??_C@_06CPHFAHEB@Cx?$CF02d@			; `string'
PUBLIC	??_C@_08FGBJBHLJ@CHAFFxXX@			; `string'
PUBLIC	??_C@_04JIMIAKFM@CxXX@				; `string'
PUBLIC	??_C@_0L@NONPILJE@FLAREx?$CF02d@		; `string'
PUBLIC	??_C@_06HNENCIOG@Fx?$CF02d@			; `string'
PUBLIC	??_C@_08EHCDGGFB@FLARExXX@			; `string'
PUBLIC	??_C@_04FACIIFCM@FxXX@				; `string'
PUBLIC	??_C@_07MPAMKEAB@?$CFsx?$CF03d@			; `string'
PUBLIC	??_C@_05HGDIBGHI@x?$CF02d@			; `string'
PUBLIC	??_C@_0BB@FAFOJLKK@ROCKET?5SALVOxALL@		; `string'
PUBLIC	??_C@_0BC@CEPGDBDN@ROCKET?5SALVOx?$CF02d@	; `string'
PUBLIC	?__LINE__Var@?0??draw_weapon_display_side_mfd@@YGXXZ@4JA ; `draw_weapon_display_side_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_08BLEPAFKM@CHFx?$CF02d@			; `string'
PUBLIC	??_C@_06JNIOEKKK@CHFxXX@			; `string'
PUBLIC	??_C@_08EGADPGME@FLRx?$CF02d@			; `string'
PUBLIC	??_C@_06MBEHBGFJ@FLRxXX@			; `string'
PUBLIC	?__LINE__Var@?0??print_main_mfd_system_message@@YGMPAD0HM@Z@4JA ; `print_main_mfd_system_message'::`1'::__LINE__Var
PUBLIC	??_C@_09FJJPPKDN@equipment@			; `string'
PUBLIC	??_C@_07FPLKDJGL@warning@			; `string'
PUBLIC	??_C@_02GIPFHKNO@OK@				; `string'
PUBLIC	??_C@_04OOEBCMBF@FAIL@				; `string'
PUBLIC	??_C@_05IHELJBBC@RADAR@				; `string'
PUBLIC	??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@		; `string'
PUBLIC	??_C@_0N@JDBOFCJG@RADAR?5JAMMER@		; `string'
PUBLIC	??_C@_09MILGCPFO@IR?5JAMMER@			; `string'
PUBLIC	??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@	; `string'
PUBLIC	??_C@_0P@OEDGDHNF@COMMUNICATIONS@		; `string'
PUBLIC	??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@	; `string'
PUBLIC	??_C@_04IDKCLELC@PNVS@				; `string'
PUBLIC	??_C@_0L@LMAEBBOE@STABILISER@			; `string'
PUBLIC	??_C@_0L@FFIGCBMA@MAIN?5ROTOR@			; `string'
PUBLIC	??_C@_07OHKEFPKJ@DAMAGED@			; `string'
PUBLIC	??_C@_0L@MCBINMPD@TAIL?5ROTOR@			; `string'
PUBLIC	??_C@_08ICMALC@L?5ENGINE@			; `string'
PUBLIC	??_C@_03KMHDAHAO@SPU@				; `string'
PUBLIC	??_C@_08GEIAFJFB@R?5ENGINE@			; `string'
PUBLIC	??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@		; `string'
PUBLIC	??_C@_0N@MMJNGGCF@OIL?5PRESSURE@		; `string'
PUBLIC	?__LINE__Var@?0??print_side_mfd_system_message@@YGMPAD0HM@Z@4JA ; `print_side_mfd_system_message'::`1'::__LINE__Var
PUBLIC	??_C@_09OPLGMBDG@LASER?5DES@			; `string'
PUBLIC	??_C@_09GHHHIMHM@RADAR?5JAM@			; `string'
PUBLIC	??_C@_08LDOFABDJ@NAV?5COMP@			; `string'
PUBLIC	??_C@_05JNPIHJOC@COMMS@				; `string'
PUBLIC	??_C@_0L@LICEJPGO@RADAR?5WARN@			; `string'
PUBLIC	??_C@_04BMBAGHMP@DMGD@				; `string'
PUBLIC	??_C@_09DAHIHAFG@HYD?5PRESS@			; `string'
PUBLIC	??_C@_09KNIBDCOL@OIL?5PRESS@			; `string'
PUBLIC	??_C@_08HFKNNLAF@FUEL?5QTY@			; `string'
PUBLIC	??_C@_07MGEFOJJP@?$CF04d?5lb@			; `string'
PUBLIC	??_C@_08PLAGFMEO@THROTTLE@			; `string'
PUBLIC	??_C@_04LMJCBFEL@OFF?5@				; `string'
PUBLIC	??_C@_04IMMGDCFE@IDLE@				; `string'
PUBLIC	??_C@_04MJEFHDBD@FLY?5@				; `string'
PUBLIC	??_C@_06HPNMMHPJ@?$CF03d?$CF?$CF@		; `string'
PUBLIC	??_C@_09PEMPOEMF@?5?$CFs?5?5OFF?5@		; `string'
PUBLIC	??_C@_09MEJLMDNK@?5?$CFs?5?5IDLE@		; `string'
PUBLIC	??_C@_09IBBIICJN@?5?$CFs?5?5FLY?5@		; `string'
PUBLIC	??_C@_0M@BAGGPIOL@?5?$CFs?5?5?$CF03d?$CF?$CF@	; `string'
PUBLIC	??_C@_0L@BAMMPCGJ@SPU?5?$CF03d?$CF?$CF@		; `string'
PUBLIC	??_C@_02PCDHLJPB@NR@				; `string'
PUBLIC	??_C@_02MAABNLHD@NP@				; `string'
PUBLIC	??_C@_02MFICFPOF@NG@				; `string'
PUBLIC	??_C@_02MIKLMMJE@TQ@				; `string'
PUBLIC	??_C@_02NEDDHJED@TG@				; `string'
PUBLIC	??_C@_02LLHBHPMO@LB@				; `string'
PUBLIC	??_C@_04OCCELDNI@?$CF04d@			; `string'
PUBLIC	?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA	; `draw_pitch_ladder'::`1'::__LINE__Var
PUBLIC	??_C@_03NJMPCKOA@?$CFd0@			; `string'
PUBLIC	?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA ; `draw_flight_display_mfd'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??draw_flight_display_side_mfd@@YGXXZ@4JA ; `draw_flight_display_side_mfd'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??print_mono_font_max_length_string@@YGXPAD@Z@4JA ; `print_mono_font_max_length_string'::`1'::__LINE__Var
PUBLIC	??_C@_01LKDEMHDF@s@				; `string'
PUBLIC	??_C@_05KEIIKJGB@?$CF?431s@			; `string'
PUBLIC	?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA ; `get_player_rank_and_name'::`1'::__LINE__Var
PUBLIC	??_C@_02LFNMGJAP@en@				; `string'
PUBLIC	??_C@_06HOHPNJLC@buffer@			; `string'
PUBLIC	??_C@_05DNIIFBMG@?$CFs?5?$CFs@			; `string'
PUBLIC	?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA ; `print_target_position'::`1'::__LINE__Var
PUBLIC	??_C@_08OAGMDKAF@position@			; `string'
PUBLIC	??_C@_0CA@NPMPDHNJ@?5?5?5?5?5?5?5?$DM?$CF03d?0?$CF03d?$DO?5?$CF6?41fKm?5?$CF3d?$HP@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA ; `draw_mission_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0N@DBEHAMGN@FLIGHT?5GROUP@		; `string'
PUBLIC	??_C@_07MLNBPDHK@company@			; `string'
PUBLIC	??_C@_03DKEJHHJP@?$CFs?3@			; `string'
PUBLIC	??_C@_0N@CPCKCPHJ@?$CFc?$CFs?51?9?$CFd?5?$CFs@	; `string'
PUBLIC	??_C@_09JGJHKNML@?$CFc1?9?$CFd?5?$CFs@		; `string'
PUBLIC	??_C@_09EKFLINLD@?$CFc?$CFs?51?9?$CFd@		; `string'
PUBLIC	??_C@_06IAHIIHDD@?$CFc1?9?$CFd@			; `string'
PUBLIC	??_C@_0N@JBFLAFMH@FORMATION?3?$CFs@		; `string'
PUBLIC	??_C@_0DJ@FHGBBPHP@get_local_entity_int_value?5?$CItas@ ; `string'
PUBLIC	??_C@_07PPFPLHID@MISSION@			; `string'
PUBLIC	??_C@_09FCABHDEH@TYPE?5?5?3?$CFs@		; `string'
PUBLIC	??_C@_09MMJDMDOM@OBJECT?3?$CFs@			; `string'
PUBLIC	??_C@_09NFLHCPML@STATUS?3?$CFs@			; `string'
PUBLIC	??_C@_09MDEJFDEL@START?5?3?$CFs@		; `string'
PUBLIC	??_C@_09HDLDOKLK@END?5?5?5?3?$CFs@		; `string'
PUBLIC	??_C@_0BK@MIBJHEEL@COUNT?5?3Kills?$DN?$CFd?5Losses?$DN?$CFd@ ; `string'
PUBLIC	??_C@_0CL@NLIKEJAC@TIME?5?5?3MT?$DN?$CF02d?3?$CF02d?3?$CF02d?5MD?$DN?$CF02@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_main_mfd@@YGXPAUSCREEN@@PAW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA ; `draw_main_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0L@DHCAJMOH@mfd_screen@			; `string'
PUBLIC	??_C@_0CF@FODDHBHE@comanche_main_mfd_mode_valid?5?$CI?$CK@ ; `string'
PUBLIC	??_C@_0CM@LICEEPAH@comanche_main_mfd_location_vali@ ; `string'
PUBLIC	??_C@_0BL@EJABPDDO@Invalid?5main?5MFD?5mode?5?$DN?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_side_mfd@@YGXPAUSCREEN@@W4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA ; `draw_side_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0CE@MAAALHOP@comanche_side_mfd_mode_valid?5?$CIm@ ; `string'
PUBLIC	??_C@_0CM@KFPJDBMG@comanche_side_mfd_location_vali@ ; `string'
PUBLIC	??_C@_0BL@JBAKPIAB@Invalid?5side?5MFD?5mode?5?$DN?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_text_display@@YGXPAUSCREEN@@@Z@4JA ; `draw_text_display'::`1'::__LINE__Var
PUBLIC	??_C@_0M@CPFKEDIA@text_screen@			; `string'
PUBLIC	?__LINE__Var@?0??initialise_comanche_mfd@@YGXXZ@4JA ; `initialise_comanche_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0DA@KDAIMOAB@num_main_weapon_line_points_wit@ ; `string'
PUBLIC	??_C@_0DH@OOPGJMJB@?$CInum_main_weapon_line_points_wi@ ; `string'
PUBLIC	??_C@_0DD@IMKGINEB@num_main_weapon_line_points_wit@ ; `string'
PUBLIC	??_C@_0DK@NKPFIOED@?$CInum_main_weapon_line_points_wi@ ; `string'
PUBLIC	??_C@_0DA@MADCCJGI@num_side_weapon_line_points_wit@ ; `string'
PUBLIC	??_C@_0DH@IOPOLEHA@?$CInum_side_weapon_line_points_wi@ ; `string'
PUBLIC	??_C@_0DD@BMJDMBBE@num_side_weapon_line_points_wit@ ; `string'
PUBLIC	??_C@_0DK@CBFDBCCM@?$CInum_side_weapon_line_points_wi@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_comanche_mfd@@YGXXZ@4JA	; `draw_comanche_mfd'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??set_comanche_text_display_text@@YGXPAD0@Z@4JA ; `set_comanche_text_display_text'::`1'::__LINE__Var
PUBLIC	??_C@_02JAFEPHFG@s1@				; `string'
PUBLIC	??_C@_02LLHJKEJF@s2@				; `string'
PUBLIC	??_C@_0BH@KFJLEDAI@Invalid?5view?5mode?5?$DN?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_overlaid_main_mfd@@YGXPAUSCREEN@@W4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA ; `draw_overlaid_main_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0CE@ENKIGGJP@comanche_main_mfd_mode_valid?5?$CIm@ ; `string'
PUBLIC	?__LINE__Var@?0??get_comanche_main_mfd_has_focus@@YGHW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA ; `get_comanche_main_mfd_has_focus'::`1'::__LINE__Var
PUBLIC	??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??get_default_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA ; `get_default_main_mfd_mode'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_default_side_mfd_mode@@YG?AW4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA ; `get_default_side_mfd_mode'::`1'::__LINE__Var
PUBLIC	??_C@_0DA@KGKPBMFE@comanche_side_mfd_location_vali@ ; `string'
PUBLIC	?__LINE__Var@?0??get_main_mfd_damage@@YGHW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA ; `get_main_mfd_damage'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_side_mfd_damage@@YGHW4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA ; `get_side_mfd_damage'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA ; `select_comanche_main_mfd_mode'::`1'::__LINE__Var
PUBLIC	??_C@_0CI@FGMPFPHJ@comanche_main_mfd_mode_valid?5?$CIm@ ; `string'
PUBLIC	??_C@_07DCHAPOBD@?$CFs?5?$DN?5?$CFs@		; `string'
PUBLIC	??_C@_0BN@OAODKMFN@default_mfd_mode?5?$CB?$DN?5mfd_mode@ ; `string'
PUBLIC	?__LINE__Var@?0??select_comanche_side_mfd_mode@@YGXW4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA ; `select_comanche_side_mfd_mode'::`1'::__LINE__Var
PUBLIC	??_C@_0CI@EEGMGJJO@comanche_side_mfd_mode_valid?5?$CIm@ ; `string'
PUBLIC	?__LINE__Var@?0??get_next_side_mfd_mode@@YG?AW4COMANCHE_SIDE_MFD_MODES@@W42@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA ; `get_next_side_mfd_mode'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_next_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W42@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA ; `get_next_main_mfd_mode'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_previous_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W42@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA ; `get_previous_main_mfd_mode'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??select_next_comanche_side_mfd@@YGXW4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA ; `select_next_comanche_side_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0CA@HJLHJBNK@next_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_ptr2@ ; `string'
PUBLIC	?__LINE__Var@?0??select_next_comanche_main_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA ; `select_next_comanche_main_mfd'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??select_previous_comanche_main_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA ; `select_previous_comanche_main_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0CE@NJOBHOGM@previous_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_@ ; `string'
PUBLIC	?__LINE__Var@?0??toggle_comanche_main_mfd_on_off@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA ; `toggle_comanche_main_mfd_on_off'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??toggle_comanche_side_mfd_on_off@@YGXW4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA ; `toggle_comanche_side_mfd_on_off'::`1'::__LINE__Var
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3a83126f
PUBLIC	__real@3c23d70a
PUBLIC	__real@3ccccccd
PUBLIC	__real@3cf5c28f
PUBLIC	__real@3d0f5c29
PUBLIC	__real@3d23d70a
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3d75c28f
PUBLIC	__real@3d75c290
PUBLIC	__real@3d7c0fc1
PUBLIC	__real@3d99999a
PUBLIC	__real@3d9f49f5
PUBLIC	__real@3da3d70a
PUBLIC	__real@3db2b8c2
PUBLIC	__real@3db851eb
PUBLIC	__real@3db851ec
PUBLIC	__real@3dcccccd
PUBLIC	__real@3de66666
PUBLIC	__real@3df5c28f
PUBLIC	__real@3e000000
PUBLIC	__real@3e0a3d70
PUBLIC	__real@3e0a3d71
PUBLIC	__real@3e0f5c29
PUBLIC	__real@3e19999a
PUBLIC	__real@3e23d70a
PUBLIC	__real@3e2e147b
PUBLIC	__real@3e32b8c2
PUBLIC	__real@3e333333
PUBLIC	__real@3e3851ec
PUBLIC	__real@3e428f5c
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e59999a
PUBLIC	__real@3e6147ae
PUBLIC	__real@3e6b851f
PUBLIC	__real@3e75c28f
PUBLIC	__real@3e800000
PUBLIC	__real@3e851eb8
PUBLIC	__real@3e87ae14
PUBLIC	__real@3e8a3d71
PUBLIC	__real@3e8ccccd
PUBLIC	__real@3e8f5c29
PUBLIC	__real@3e947ae1
PUBLIC	__real@3e99999a
PUBLIC	__real@3ea3d70a
PUBLIC	__real@3eaaa64c
PUBLIC	__real@3eae9e8d
PUBLIC	__real@3eb2b8c2
PUBLIC	__real@3eb33333
PUBLIC	__real@3ebd70a4
PUBLIC	__real@3ec28f5c
PUBLIC	__real@3ecccccd
PUBLIC	__real@3ed1eb85
PUBLIC	__real@3ed9999a
PUBLIC	__real@3edc28f6
PUBLIC	__real@3ee66666
PUBLIC	__real@3ee66667
PUBLIC	__real@3eeb851f
PUBLIC	__real@3ef5c28f
PUBLIC	__real@3efae148
PUBLIC	__real@3f000000
PUBLIC	__real@3f00002000400080
PUBLIC	__real@3f051eb8
PUBLIC	__real@3f060a92
PUBLIC	__real@3f0ccccd
PUBLIC	__real@3f10000000000000
PUBLIC	__real@3f11eb85
PUBLIC	__real@3f11eb86
PUBLIC	__real@3f147ae1
PUBLIC	__real@3f19999a
PUBLIC	__real@3f1a36e2eb1c432d
PUBLIC	__real@3f1c28f6
PUBLIC	__real@3f2147ae
PUBLIC	__real@3f233333
PUBLIC	__real@3f266666
PUBLIC	__real@3f2ccccd
PUBLIC	__real@3f2e9e8d
PUBLIC	__real@3f333333
PUBLIC	__real@3f3eb852
PUBLIC	__real@3f400000
PUBLIC	__real@3f43d70a
PUBLIC	__real@3f451eb9
PUBLIC	__real@3f466666
PUBLIC	__real@3f490fdb
PUBLIC	__real@3f4a3d71
PUBLIC	__real@3f4b851f
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f500000
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3f50a3d7
PUBLIC	__real@3f547ae1
PUBLIC	__real@3f570a3d
PUBLIC	__real@3f576c8b
PUBLIC	__real@3f5999999999999a
PUBLIC	__real@3f59999a
PUBLIC	__real@3f5c28f6
PUBLIC	__real@3f5d70a4
PUBLIC	__real@3f600000
PUBLIC	__real@3f666666
PUBLIC	__real@3f68f5c3
PUBLIC	__real@3f6bd70a
PUBLIC	__real@3f6ccccd
PUBLIC	__real@3f770a3d
PUBLIC	__real@3f7fbe77
PUBLIC	__real@3f800000
PUBLIC	__real@3f82f6e9
PUBLIC	__real@3f847ae147ae147b
PUBLIC	__real@3f860a92
PUBLIC	__real@3f947ae147ae147b
PUBLIC	__real@3f9999999999999a
PUBLIC	__real@3f9eb851eb851eb8
PUBLIC	__real@3fa1eb851eb851ec
PUBLIC	__real@3fa47ae147ae147b
PUBLIC	__real@3fa999999999999a
PUBLIC	__real@3fae9e8d
PUBLIC	__real@3fb1eb851eb851ec
PUBLIC	__real@3fb3333333333333
PUBLIC	__real@3fb3333340000000
PUBLIC	__real@3fb3e93ea0000000
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fc0a3d70a3d70a4
PUBLIC	__real@3fc3333333333333
PUBLIC	__real@3fc3333340000000
PUBLIC	__real@3fc6571848000000
PUBLIC	__real@3fc70a3d70a3d70a
PUBLIC	__real@3fc90fdb
PUBLIC	__real@3fc999999999999a
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fd0a3d70a3d70a4
PUBLIC	__real@3fd3333333333333
PUBLIC	__real@3fd51eb851eb851f
PUBLIC	__real@3fd6666666666666
PUBLIC	__real@3fd893011c000000
PUBLIC	__real@3fdbecde5a000000
PUBLIC	__real@3fdeb851eb851eb8
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe3333333333333
PUBLIC	__real@3fe6666660000000
PUBLIC	__real@3fe8000000000000
PUBLIC	__real@3feb333333333333
PUBLIC	__real@3feff7ced916872b
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff0c09b332ccccd
PUBLIC	__real@3ff0c15236000000
PUBLIC	__real@3ff5d3d193333333
PUBLIC	__real@3ff8000000000000
PUBLIC	__real@3ff85d84
PUBLIC	__real@3ff921fb51000000
PUBLIC	__real@3fff0bb080000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@400921fb51000000
PUBLIC	__real@400d1eb8
PUBLIC	__real@4010000000000000
PUBLIC	__real@4014000000000000
PUBLIC	__real@4016eb167e7d81e3
PUBLIC	__real@401921fb51000000
PUBLIC	__real@401c000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@4026eb1686b280e6
PUBLIC	__real@402a000000000000
PUBLIC	__real@4034000000000000
PUBLIC	__real@40400000
PUBLIC	__real@4044000000000000
PUBLIC	__real@404ca5dc00000000
PUBLIC	__real@4051f948
PUBLIC	__real@4059000000000000
PUBLIC	__real@405b800000000000
PUBLIC	__real@405e000000000000
PUBLIC	__real@405fc00000000000
PUBLIC	__real@4061a00000000000
PUBLIC	__real@40666666
PUBLIC	__real@4069000000000000
PUBLIC	__real@406e600000000000
PUBLIC	__real@4070000000000000
PUBLIC	__real@4072800000000000
PUBLIC	__real@4072c00000000000
PUBLIC	__real@4078d00000000000
PUBLIC	__real@407e000000000000
PUBLIC	__real@407f300000000000
PUBLIC	__real@407f400000000000
PUBLIC	__real@40800000
PUBLIC	__real@4084000000000000
PUBLIC	__real@40845f306446f9b4
PUBLIC	__real@408f380000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@409f400000000000
PUBLIC	__real@40a00000
PUBLIC	__real@40c3878000000000
PUBLIC	__real@40c90fdb
PUBLIC	__real@40f86a0000000000
PUBLIC	__real@41100000
PUBLIC	__real@41200000
PUBLIC	__real@41900000
PUBLIC	__real@41980000
PUBLIC	__real@42480000
PUBLIC	__real@42652ee0
PUBLIC	__real@43000000
PUBLIC	__real@437fffbe
PUBLIC	__real@43800000
PUBLIC	__real@43960000
PUBLIC	__real@43fa0000
PUBLIC	__real@447a0000
PUBLIC	__real@44fa0000
PUBLIC	__real@459c4000
PUBLIC	__real@461c4000
PUBLIC	__real@46c35000
PUBLIC	__real@49742400
PUBLIC	__real@80000000
PUBLIC	__real@bca3d70a
PUBLIC	__real@bccccccd
PUBLIC	__real@bcf5c28f
PUBLIC	__real@bd0f5c29
PUBLIC	__real@bd12a305
PUBLIC	__real@bd4ccccd
PUBLIC	__real@bd6ecbfb
PUBLIC	__real@bd99999a
PUBLIC	__real@bda3d70a
PUBLIC	__real@bda57a78
PUBLIC	__real@bdcccccd
PUBLIC	__real@bde147ae
PUBLIC	__real@be0f5c29
PUBLIC	__real@be23d70a
PUBLIC	__real@be2e147b
PUBLIC	__real@be32b8c2
PUBLIC	__real@be4ccccd
PUBLIC	__real@be53a92a
PUBLIC	__real@be6ab368
PUBLIC	__real@be6b851f
PUBLIC	__real@be75c28f
PUBLIC	__real@be800000
PUBLIC	__real@be80ded3
PUBLIC	__real@be851eb8
PUBLIC	__real@be947ae1
PUBLIC	__real@be99999a
PUBLIC	__real@bea3d70a
PUBLIC	__real@beaaa64c
PUBLIC	__real@beb2b8c2
PUBLIC	__real@beb33333
PUBLIC	__real@beb851ec
PUBLIC	__real@bebd70a4
PUBLIC	__real@bec147ae
PUBLIC	__real@bec28f5c
PUBLIC	__real@becccccd
PUBLIC	__real@bed1eb85
PUBLIC	__real@bed851ec
PUBLIC	__real@bedc28f6
PUBLIC	__real@bee66666
PUBLIC	__real@beeb851f
PUBLIC	__real@beed3a07
PUBLIC	__real@bef5c28f
PUBLIC	__real@befae148
PUBLIC	__real@bf000000
PUBLIC	__real@bf051eb8
PUBLIC	__real@bf060a92
PUBLIC	__real@bf0c5d64
PUBLIC	__real@bf0ccccd
PUBLIC	__real@bf0f5c29
PUBLIC	__real@bf11eb85
PUBLIC	__real@bf11eb86
PUBLIC	__real@bf121ff3
PUBLIC	__real@bf147ae1
PUBLIC	__real@bf17e282
PUBLIC	__real@bf19999a
PUBLIC	__real@bf2147ae
PUBLIC	__real@bf23d70a
PUBLIC	__real@bf28f5c3
PUBLIC	__real@bf2bf259
PUBLIC	__real@bf2ccccd
PUBLIC	__real@bf30a3d7
PUBLIC	__real@bf333333
PUBLIC	__real@bf381d7e
PUBLIC	__real@bf3851ec
PUBLIC	__real@bf3d70a4
PUBLIC	__real@bf3de00d
PUBLIC	__real@bf400000
PUBLIC	__real@bf428f5c
PUBLIC	__real@bf43a29c
PUBLIC	__real@bf43d70a
PUBLIC	__real@bf451eb8
PUBLIC	__real@bf451eb9
PUBLIC	__real@bf47ae14
PUBLIC	__real@bf47ae15
PUBLIC	__real@bf490fdb
PUBLIC	__real@bf4a3d70
PUBLIC	__real@bf4ccccd
PUBLIC	__real@bf4e147b
PUBLIC	__real@bf4f5c28
PUBLIC	__real@bf4f5c29
PUBLIC	__real@bf533333
PUBLIC	__real@bf547ae1
PUBLIC	__real@bf570a3e
PUBLIC	__real@bf576c8b
PUBLIC	__real@bf59999a
PUBLIC	__real@bf5ae148
PUBLIC	__real@bf5c28f6
PUBLIC	__real@bf5eb852
PUBLIC	__real@bf6147ae
PUBLIC	__real@bf63d70a
PUBLIC	__real@bf63d70b
PUBLIC	__real@bf666666
PUBLIC	__real@bf69999a
PUBLIC	__real@bf6b851f
PUBLIC	__real@bf6e147b
PUBLIC	__real@bf6f5c29
PUBLIC	__real@bf70a3d7
PUBLIC	__real@bf733333
PUBLIC	__real@bf770a3d
PUBLIC	__real@bf7ae148
PUBLIC	__real@bf800000
PUBLIC	__real@bf860a92
PUBLIC	__real@bfc3333333333333
PUBLIC	__real@bfc90fdb
PUBLIC	__real@bfc999999999999a
PUBLIC	__real@bfd893011c000000
PUBLIC	__real@bfe0000000000000
PUBLIC	__real@bfec28f5c0000000
PUBLIC	__real@bff0000000000000
PUBLIC	__real@bff0c15236000000
PUBLIC	__real@bff921fb51000000
PUBLIC	__real@c0000000
PUBLIC	__real@c00921fb51000000
PUBLIC	__real@c024000000000000
PUBLIC	__real@c034000000000000
PUBLIC	__real@c0400000
PUBLIC	__real@c0800000
PUBLIC	__real@c0a00000
PUBLIC	__real@c0c00000
PUBLIC	__real@c1000000
PUBLIC	__real@c1400000
PUBLIC	__real@c1980000
PUBLIC	__real@c1c80000
PUBLIC	__real@c2180000
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	_strcmp:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__strncpy:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_atan2:PROC
EXTRN	_cos:PROC
EXTRN	_fmod:PROC
EXTRN	_sin:PROC
EXTRN	_sqrt:PROC
EXTRN	_tan:PROC
EXTRN	__imp__ceil:PROC
EXTRN	__imp__floor:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ:PROC ; debug_colour_log
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
EXTRN	?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z:PROC	; get_3d_vector_magnitude
EXTRN	?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z:PROC ; normalise_3d_vector_given_magnitude
EXTRN	?get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z:PROC ; get_3d_unit_vector_dot_product
EXTRN	?get_3d_transformation_matrix@@YGXQAY02MMMM@Z:PROC ; get_3d_transformation_matrix
EXTRN	?multiply_transpose_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z:PROC ; multiply_transpose_matrix3x3_vec3d
EXTRN	?multiply_matrix3x3_matrix3x3@@YGXQAY02MQAY02$$CBM1@Z:PROC ; multiply_matrix3x3_matrix3x3
EXTRN	?get_2d_range@@YGMPBUVEC3D@@0@Z:PROC		; get_2d_range
EXTRN	?get_approx_2d_range@@YGMPBUVEC3D@@0@Z:PROC	; get_approx_2d_range
EXTRN	?get_3d_range@@YGMPBUVEC3D@@0@Z:PROC		; get_3d_range
EXTRN	?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z:PROC ; create_user_texture_screen
EXTRN	?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z:PROC ; create_system_texture_screen
EXTRN	?set_system_texture_screen@@YGXPAUSCREEN@@H@Z:PROC ; set_system_texture_screen
EXTRN	?destroy_screen@@YGHPAUSCREEN@@@Z:PROC		; destroy_screen
EXTRN	?lock_screen@@YGHPAUSCREEN@@@Z:PROC		; lock_screen
EXTRN	?unlock_screen@@YGHPAUSCREEN@@@Z:PROC		; unlock_screen
EXTRN	?set_active_screen@@YGHPAUSCREEN@@@Z:PROC	; set_active_screen
EXTRN	?set_3d_render_target@@YGHPAUSCREEN@@@Z:PROC	; set_3d_render_target
EXTRN	?finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z:PROC ; finalise_3d_render_target_texture
EXTRN	?set_block@@YGXHHHHUREAL_COLOUR@@@Z:PROC	; set_block
EXTRN	?draw_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC	; draw_line
EXTRN	?set_hatched_pattern@@YGXPAI@Z:PROC		; set_hatched_pattern
EXTRN	?set_d3d_transparency_on@@YGXXZ:PROC		; set_d3d_transparency_on
EXTRN	?set_d3d_transparency_off@@YGXXZ:PROC		; set_d3d_transparency_off
EXTRN	?set_d3d_zbuffer_comparison@@YGXH@Z:PROC	; set_d3d_zbuffer_comparison
EXTRN	?set_d3d_culling@@YGXH@Z:PROC			; set_d3d_culling
EXTRN	?set_d3d_texture_wrapping@@YGXHH@Z:PROC		; set_d3d_texture_wrapping
EXTRN	?set_d3d_texture_mag_filtering@@YGXH@Z:PROC	; set_d3d_texture_mag_filtering
EXTRN	?set_d3d_texture_min_filtering@@YGXH@Z:PROC	; set_d3d_texture_min_filtering
EXTRN	?set_d3d_texture_mip_filtering@@YGXH@Z:PROC	; set_d3d_texture_mip_filtering
EXTRN	?set_d3d_plain_renderstate@@YGXXZ:PROC		; set_d3d_plain_renderstate
EXTRN	?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z:PROC ; set_d3d_flat_shaded_textured_renderstate
EXTRN	?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z:PROC ; draw_wbuffered_plain_polygon
EXTRN	?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z:PROC ; draw_wbuffered_flat_shaded_textured_polygon
EXTRN	?get_system_texture_ptr@@YGPAUSCREEN@@H@Z:PROC	; get_system_texture_ptr
EXTRN	?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z:PROC ; flush_screen_texture_graphics
EXTRN	?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z:PROC ; set_mono_font_type
EXTRN	?set_mono_font_position@@YGXMM@Z:PROC		; set_mono_font_position
EXTRN	?set_mono_font_rel_position@@YGXMM@Z:PROC	; set_mono_font_rel_position
EXTRN	?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z:PROC	; set_mono_font_colour
EXTRN	?get_mono_font_char_height@@YGMD@Z:PROC		; get_mono_font_char_height
EXTRN	?print_mono_font_char@@YGXD@Z:PROC		; print_mono_font_char
EXTRN	?get_mono_font_string_width@@YGMPBD@Z:PROC	; get_mono_font_string_width
EXTRN	?print_mono_font_string@@YGXPBD@Z:PROC		; print_mono_font_string
EXTRN	?create_2d_environment@@YGPAUENV_2D@@XZ:PROC	; create_2d_environment
EXTRN	?destroy_2d_environment@@YGXPAUENV_2D@@@Z:PROC	; destroy_2d_environment
EXTRN	?set_2d_active_environment@@YGXPAUENV_2D@@@Z:PROC ; set_2d_active_environment
EXTRN	?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z:PROC	; set_2d_viewport
EXTRN	?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z:PROC ; set_2d_viewport_origin
EXTRN	?set_2d_window@@YGXPAUENV_2D@@MMMM@Z:PROC	; set_2d_window
EXTRN	?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z:PROC	; set_2d_window_rotation
EXTRN	?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z:PROC ; set_2d_instance_rotation
EXTRN	?set_2d_instance_position@@YGXPAUENV_2D@@MM@Z:PROC ; set_2d_instance_position
EXTRN	?reset_2d_instance@@YGXPAUENV_2D@@@Z:PROC	; reset_2d_instance
EXTRN	?set_2d_pixel@@YGXMMUREAL_COLOUR@@@Z:PROC	; set_2d_pixel
EXTRN	?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC	; draw_2d_line
EXTRN	?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC ; draw_2d_half_thick_line
EXTRN	?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z:PROC ; draw_2d_filled_triangle
EXTRN	?set_2d_mono_font_position@@YGXMM@Z:PROC	; set_2d_mono_font_position
EXTRN	?get_2d_world_position@@YGXMMPAM0@Z:PROC	; get_2d_world_position
EXTRN	?get_2d_int_screen_coordinates@@YGXMMPAH0@Z:PROC ; get_2d_int_screen_coordinates
EXTRN	?get_2d_float_screen_coordinates@@YGXMMPAM0@Z:PROC ; get_2d_float_screen_coordinates
EXTRN	?get_2d_float_screen_x_coordinate@@YGXMPAM@Z:PROC ; get_2d_float_screen_x_coordinate
EXTRN	?get_2d_float_screen_y_coordinate@@YGXMPAM@Z:PROC ; get_2d_float_screen_y_coordinate
EXTRN	?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z:PROC ; draw_2d_mono_sprite
EXTRN	?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z:PROC	; draw_2d_circle
EXTRN	?draw_2d_hatched_area@@YGXMMMMUREAL_COLOUR@@@Z:PROC ; draw_2d_hatched_area
EXTRN	?draw_2d_hatched_circle@@YGXMMMUREAL_COLOUR@@@Z:PROC ; draw_2d_hatched_circle
EXTRN	?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z:PROC	; draw_2d_box
EXTRN	?set_3d_active_environment@@YGXPAUENV_3D@@@Z:PROC ; set_3d_active_environment
EXTRN	?get_object_3d_number_of_poly_lines@@YGHH@Z:PROC ; get_object_3d_number_of_poly_lines
EXTRN	?get_object_3d_poly_line_data@@YGXHPAUVEC3D@@@Z:PROC ; get_object_3d_poly_line_data
EXTRN	?begin_3d_scene@@YGHXZ:PROC			; begin_3d_scene
EXTRN	?end_3d_scene@@YGXXZ:PROC			; end_3d_scene
EXTRN	?get_position_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUVEC3D@@PAM1@Z:PROC ; get_position_3d_screen_coordinates
EXTRN	?get_local_entity_vec3d_magnitude@@YGMPAUENTITY@@W4VEC3D_TYPES@@@Z:PROC ; get_local_entity_vec3d_magnitude
EXTRN	?get_local_entity_target_bearing@@YGMPAUENTITY@@0PAM@Z:PROC ; get_local_entity_target_bearing
EXTRN	?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_local_entity_target_point
EXTRN	?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z:PROC ; get_local_entity_weapon_count
EXTRN	?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z:PROC ; get_local_entity_weapon_hardpoint_info
EXTRN	?get_comanche_stub_wings_attached@@YGHPAUENTITY@@@Z:PROC ; get_comanche_stub_wings_attached
EXTRN	?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z:PROC ; get_waypoint_display_position
EXTRN	?get_keysite_entity_mfd_display_name@@YGXPAUENTITY@@PAD@Z:PROC ; get_keysite_entity_mfd_display_name
EXTRN	?get_player_task@@YGPAUENTITY@@PAU1@@Z:PROC	; get_player_task
EXTRN	?get_local_sector_entity@@YGPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_local_sector_entity
EXTRN	?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z:PROC ; get_simple_session_weather_at_point
EXTRN	?get_task_estimated_route_duration@@YGMPAUENTITY@@@Z:PROC ; get_task_estimated_route_duration
EXTRN	?get_task_objective_mfd_display_string@@YGXPAUENTITY@@PAD@Z:PROC ; get_task_objective_mfd_display_string
EXTRN	?get_local_entity_first_waypoint@@YGPAUENTITY@@PAU1@@Z:PROC ; get_local_entity_first_waypoint
EXTRN	?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z:PROC ; get_local_entity_current_waypoint
EXTRN	?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z:PROC ; set_main_3d_params
EXTRN	?set_pilots_full_screen_params@@YGXH@Z:PROC	; set_pilots_full_screen_params
EXTRN	?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z:PROC	; draw_main_3d_scene
EXTRN	?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z:PROC ; get_target_display_name
EXTRN	?get_range_finder@@YG?AW4rangefinding_system@@XZ:PROC ; get_range_finder
EXTRN	?draw_tsd_terrain_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MH@Z:PROC ; draw_tsd_terrain_map
EXTRN	?draw_tsd_contour_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MHH@Z:PROC ; draw_tsd_contour_map
EXTRN	?Initialise_TSD_render_terrain@@YGXXZ:PROC	; Initialise_TSD_render_terrain
EXTRN	?convert_linear_view_value@@YGMPAUEO_PARAMS_DYNAMIC_MOVE@@@Z:PROC ; convert_linear_view_value
EXTRN	?get_eo_tracking_point@@YGPAUVEC3D@@XZ:PROC	; get_eo_tracking_point
EXTRN	?get_range_to_target@@YGMXZ:PROC		; get_range_to_target
EXTRN	?eo_is_locked@@YGHXZ:PROC			; eo_is_locked
EXTRN	?get_gunship_target_valid_for_ground_radar@@YGHPAUENTITY@@@Z:PROC ; get_gunship_target_valid_for_ground_radar
EXTRN	?get_target_matches_ground_radar_declutter_criteria@@YGHPAUENTITY@@@Z:PROC ; get_target_matches_ground_radar_declutter_criteria
EXTRN	?ground_radar_is_active@@YGHXZ:PROC		; ground_radar_is_active
EXTRN	?get_gunship_target_valid_for_air_radar@@YGHPAUENTITY@@@Z:PROC ; get_gunship_target_valid_for_air_radar
EXTRN	?get_target_matches_air_radar_declutter_criteria@@YGHPAUENTITY@@W4ENTITY_SIDES@@@Z:PROC ; get_target_matches_air_radar_declutter_criteria
EXTRN	?air_radar_is_active@@YGHXZ:PROC		; air_radar_is_active
EXTRN	?get_comanche_eo_relative_centred_viewpoint@@YGXPAUVIEWPOINT@@@Z:PROC ; get_comanche_eo_relative_centred_viewpoint
EXTRN	?get_crew_role@@YG?AW4CREW_ROLES@@XZ:PROC	; get_crew_role
EXTRN	?get_digital_clock_values@@YGXMPAM00@Z:PROC	; get_digital_clock_values
EXTRN	?get_digital_clock_int_values@@YGXMPAH00@Z:PROC	; get_digital_clock_int_values
EXTRN	?get_untranslated_pilot_rank_short_name@@YGPBDH@Z:PROC ; get_untranslated_pilot_rank_short_name
EXTRN	?copy_export_mfd@@YGXPAUSCREEN@@0@Z:PROC	; copy_export_mfd
EXTRN	__chkstk:PROC
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?random_number_seed@@3HA:DWORD			; random_number_seed
EXTRN	?sine_table@@3PAMA:BYTE				; sine_table
EXTRN	?application_video_width@@3HA:DWORD		; application_video_width
EXTRN	?d3d_can_render_to_texture@@3HA:DWORD		; d3d_can_render_to_texture
EXTRN	?sys_col_red@@3UREAL_COLOUR@@A:DWORD		; sys_col_red
EXTRN	?video_screen@@3PAUSCREEN@@A:DWORD		; video_screen
EXTRN	?command_line_dynamics_engine_startup@@3HA:DWORD ; command_line_dynamics_engine_startup
EXTRN	?command_line_high_res_mfd@@3HA:DWORD		; command_line_high_res_mfd
EXTRN	?command_line_tsd_enemy_colours@@3HA:DWORD	; command_line_tsd_enemy_colours
EXTRN	?command_line_colour_mfd@@3HA:DWORD		; command_line_colour_mfd
EXTRN	?command_line_export_mfd@@3HA:DWORD		; command_line_export_mfd
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?formation_display_names@@3PAPBDA:BYTE		; formation_display_names
EXTRN	?task_status_names@@3PAPBDA:BYTE		; task_status_names
EXTRN	?global_options@@3UGLOBAL_OPTIONS_DATA@@A:BYTE	; global_options
EXTRN	?world_map@@3UWORLD_MAP_DATA@@A:BYTE		; world_map
EXTRN	?overload_invalid_list_type_message@@3PBDB:DWORD ; overload_invalid_list_type_message
EXTRN	?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_first_child
EXTRN	?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_parent
EXTRN	?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_child_succ
EXTRN	?fn_get_local_entity_attitude_matrix_ptr@@3PAP6GPAY122MPAUENTITY@@@ZA:BYTE ; fn_get_local_entity_attitude_matrix_ptr
EXTRN	?overload_invalid_char_type_message@@3PBDB:DWORD ; overload_invalid_char_type_message
EXTRN	?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA:BYTE ; fn_get_local_entity_char_value
EXTRN	?draw_eo_3d_scene@@3HA:DWORD			; draw_eo_3d_scene
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_ptr_type_message@@3PBDB:DWORD	; overload_invalid_ptr_type_message
EXTRN	?fn_get_local_entity_ptr_value@@3PAY0BE@P6GPAXPAUENTITY@@W4PTR_TYPES@@@ZA:BYTE ; fn_get_local_entity_ptr_value
EXTRN	?overload_invalid_string_type_message@@3PBDB:DWORD ; overload_invalid_string_type_message
EXTRN	?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA:BYTE ; fn_get_local_entity_string
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA:BYTE ; fn_get_local_entity_vec3d
EXTRN	?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA:BYTE ; fn_get_local_entity_vec3d_ptr
EXTRN	?entities@@3PAUENTITY@@A:DWORD			; entities
EXTRN	?weapon_database@@3PAUWEAPON_DATA@@A:BYTE	; weapon_database
EXTRN	?gunship_entity@@3PAUENTITY@@A:DWORD		; gunship_entity
EXTRN	?session_entity@@3PAUENTITY@@A:DWORD		; session_entity
EXTRN	?full_screen_width@@3MA:DWORD			; full_screen_width
EXTRN	?full_screen_height@@3MA:DWORD			; full_screen_height
EXTRN	?main_3d_env@@3PAUENV_3D@@A:DWORD		; main_3d_env
EXTRN	?main_vp@@3UVIEWPOINT@@A:BYTE			; main_vp
EXTRN	?view_mode@@3W4VIEW_MODES@@A:DWORD		; view_mode
EXTRN	?tsd_render_mode@@3W4TSD_RENDER_MODES@@A:DWORD	; tsd_render_mode
EXTRN	?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A:DWORD ; target_acquisition_system
EXTRN	?eo_low_light@@3HA:DWORD			; eo_low_light
EXTRN	?eo_ground_stabilised@@3HA:DWORD		; eo_ground_stabilised
EXTRN	?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A:DWORD ; eo_sensor
EXTRN	?eo_azimuth@@3MA:DWORD				; eo_azimuth
EXTRN	?eo_max_azimuth@@3MA:DWORD			; eo_max_azimuth
EXTRN	?eo_elevation@@3MA:DWORD			; eo_elevation
EXTRN	?eo_min_elevation@@3MA:DWORD			; eo_min_elevation
EXTRN	?eo_vp@@3UVIEWPOINT@@A:BYTE			; eo_vp
EXTRN	?display_mfd_layout_grid@@3HA:DWORD		; display_mfd_layout_grid
EXTRN	?large_eo_3d_texture_screen@@3PAUSCREEN@@A:DWORD ; large_eo_3d_texture_screen
EXTRN	?small_eo_3d_texture_screen@@3PAUSCREEN@@A:DWORD ; small_eo_3d_texture_screen
EXTRN	?ground_radar@@3URADAR_PARAMS@@A:BYTE		; ground_radar
EXTRN	?air_radar@@3URADAR_PARAMS@@A:BYTE		; air_radar
EXTRN	?radar_clutter_hatch_pattern@@3PAIA:BYTE	; radar_clutter_hatch_pattern
EXTRN	?large_display_target_symbol_selected_target@@3QBDB:BYTE ; large_display_target_symbol_selected_target
EXTRN	?large_display_target_symbol_selected_target_mask@@3QBDB:BYTE ; large_display_target_symbol_selected_target_mask
EXTRN	?small_display_target_symbol_selected_target@@3QBDB:BYTE ; small_display_target_symbol_selected_target
EXTRN	?small_display_target_symbol_selected_target_mask@@3QBDB:BYTE ; small_display_target_symbol_selected_target_mask
EXTRN	?large_display_target_symbols_los@@3PAPBDA:BYTE	; large_display_target_symbols_los
EXTRN	?large_display_target_symbols_los_mask@@3PAPBDA:BYTE ; large_display_target_symbols_los_mask
EXTRN	?large_display_target_symbols_no_los@@3PAPBDA:BYTE ; large_display_target_symbols_no_los
EXTRN	?large_display_target_symbols_no_los_mask@@3PAPBDA:BYTE ; large_display_target_symbols_no_los_mask
EXTRN	?small_display_target_symbols_los@@3PAPBDA:BYTE	; small_display_target_symbols_los
EXTRN	?small_display_target_symbols_los_mask@@3PAPBDA:BYTE ; small_display_target_symbols_los_mask
EXTRN	?small_display_target_symbols_no_los@@3PAPBDA:BYTE ; small_display_target_symbols_no_los
EXTRN	?small_display_target_symbols_no_los_mask@@3PAPBDA:BYTE ; small_display_target_symbols_no_los_mask
EXTRN	?rocket_salvo_size@@3HA:DWORD			; rocket_salvo_size
EXTRN	?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A:DWORD ; comanche_damage
EXTRN	?comanche_flir@@3UEO_PARAMS_DYNAMIC_MOVE@@A:BYTE ; comanche_flir
EXTRN	?comanche_dtv@@3UEO_PARAMS_DYNAMIC_MOVE@@A:BYTE	; comanche_dtv
EXTRN	?comanche_dvo@@3UEO_PARAMS_DYNAMIC_MOVE@@A:BYTE	; comanche_dvo
EXTRN	?COMANCHE_RADAR_SCAN_RANGE_500@@3MA:DWORD	; COMANCHE_RADAR_SCAN_RANGE_500
EXTRN	?COMANCHE_RADAR_SCAN_RANGE_1000@@3MA:DWORD	; COMANCHE_RADAR_SCAN_RANGE_1000
EXTRN	?COMANCHE_RADAR_SCAN_RANGE_2000@@3MA:DWORD	; COMANCHE_RADAR_SCAN_RANGE_2000
EXTRN	?COMANCHE_RADAR_SCAN_RANGE_4000@@3MA:DWORD	; COMANCHE_RADAR_SCAN_RANGE_4000
EXTRN	?COMANCHE_RADAR_SCAN_RANGE_8000@@3MA:DWORD	; COMANCHE_RADAR_SCAN_RANGE_8000
EXTRN	?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A:DWORD ; virtual_cockpit_inst3d
EXTRN	?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A:DWORD ; current_flight_dynamics
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?mfd_colours@@3PAUREAL_COLOUR@@A DD 014H DUP (?)	; mfd_colours
?clear_mfd_colour@@3UREAL_COLOUR@@A DD 01H DUP (?)	; clear_mfd_colour
?text_display_colours@@3PAUREAL_COLOUR@@A DD 02H DUP (?) ; text_display_colours
?display_mask@@3HA DD 01H DUP (?)			; display_mask
?mfd_env@@3PAUENV_2D@@A DD 01H DUP (?)			; mfd_env
?int_mfd_viewport_size@@3HA DD 01H DUP (?)		; int_mfd_viewport_size
?mfd_viewport_size@@3MA DD 01H DUP (?)			; mfd_viewport_size
?mfd_viewport_x_org@@3MA DD 01H DUP (?)			; mfd_viewport_x_org
?mfd_viewport_y_org@@3MA DD 01H DUP (?)			; mfd_viewport_y_org
?mfd_viewport_x_min@@3MA DD 01H DUP (?)			; mfd_viewport_x_min
?mfd_viewport_y_min@@3MA DD 01H DUP (?)			; mfd_viewport_y_min
?mfd_viewport_x_max@@3MA DD 01H DUP (?)			; mfd_viewport_x_max
?mfd_viewport_y_max@@3MA DD 01H DUP (?)			; mfd_viewport_y_max
?mfd_screen_x_min@@3MA DD 01H DUP (?)			; mfd_screen_x_min
?mfd_screen_y_min@@3MA DD 01H DUP (?)			; mfd_screen_y_min
?mfd_screen_x_max@@3MA DD 01H DUP (?)			; mfd_screen_x_max
?mfd_screen_y_max@@3MA DD 01H DUP (?)			; mfd_screen_y_max
?mfd_screen_width@@3MA DD 01H DUP (?)			; mfd_screen_width
?mfd_screen_height@@3MA DD 01H DUP (?)			; mfd_screen_height
?mfd_screen_x_scale@@3MA DD 01H DUP (?)			; mfd_screen_x_scale
?mfd_screen_y_scale@@3MA DD 01H DUP (?)			; mfd_screen_y_scale
?draw_large_mfd@@3HA DD 01H DUP (?)			; draw_large_mfd
?draw_main_display@@3HA DD 01H DUP (?)			; draw_main_display
?pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; pilot_lhs_main_mfd_texture_screen
?pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; pilot_rhs_main_mfd_texture_screen
?pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; pilot_lhs_side_mfd_texture_screen
?pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; pilot_rhs_side_mfd_texture_screen
?pilot_text_display_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; pilot_text_display_texture_screen
?co_pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; co_pilot_lhs_main_mfd_texture_screen
?co_pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; co_pilot_rhs_main_mfd_texture_screen
?co_pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; co_pilot_lhs_side_mfd_texture_screen
?co_pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; co_pilot_rhs_side_mfd_texture_screen
?co_pilot_text_display_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; co_pilot_text_display_texture_screen
?large_pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_pilot_lhs_main_mfd_texture_screen
?large_pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_pilot_rhs_main_mfd_texture_screen
?large_pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_pilot_lhs_side_mfd_texture_screen
?large_pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_pilot_rhs_side_mfd_texture_screen
?large_pilot_text_display_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_pilot_text_display_texture_screen
?large_co_pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_co_pilot_lhs_main_mfd_texture_screen
?large_co_pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_co_pilot_rhs_main_mfd_texture_screen
?large_co_pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_co_pilot_lhs_side_mfd_texture_screen
?large_co_pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_co_pilot_rhs_side_mfd_texture_screen
?large_co_pilot_text_display_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_co_pilot_text_display_texture_screen
?small_pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_pilot_lhs_main_mfd_texture_screen
?small_pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_pilot_rhs_main_mfd_texture_screen
?small_pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_pilot_lhs_side_mfd_texture_screen
?small_pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_pilot_rhs_side_mfd_texture_screen
?small_pilot_text_display_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_pilot_text_display_texture_screen
?small_co_pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_co_pilot_lhs_main_mfd_texture_screen
?small_co_pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_co_pilot_rhs_main_mfd_texture_screen
?small_co_pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_co_pilot_lhs_side_mfd_texture_screen
?small_co_pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_co_pilot_rhs_side_mfd_texture_screen
?small_co_pilot_text_display_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_co_pilot_text_display_texture_screen
?eo_3d_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; eo_3d_texture_screen
?full_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; full_mfd_texture_screen
?text_display_line1@@3PADA DB 012H DUP (?)		; text_display_line1
	ALIGN	4

?text_display_line2@@3PADA DB 012H DUP (?)		; text_display_line2
	ALIGN	4

?pilot_tsd_ase_range@@3MA DD 01H DUP (?)		; pilot_tsd_ase_range
?co_pilot_tsd_ase_range@@3MA DD 01H DUP (?)		; co_pilot_tsd_ase_range
?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A DD 01H DUP (?) ; pilot_tsd_declutter_level
?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A DD 01H DUP (?) ; co_pilot_tsd_declutter_level
?pilot_tsd_threat_line_flash_timer@@3MA DD 01H DUP (?)	; pilot_tsd_threat_line_flash_timer
?co_pilot_tsd_threat_line_flash_timer@@3MA DD 01H DUP (?) ; co_pilot_tsd_threat_line_flash_timer
?pilot_tsd_draw_threat_line_status@@3HA DD 01H DUP (?)	; pilot_tsd_draw_threat_line_status
?co_pilot_tsd_draw_threat_line_status@@3HA DD 01H DUP (?) ; co_pilot_tsd_draw_threat_line_status
?pilot_ase_threat_line_flash_timer@@3MA DD 01H DUP (?)	; pilot_ase_threat_line_flash_timer
?co_pilot_ase_threat_line_flash_timer@@3MA DD 01H DUP (?) ; co_pilot_ase_threat_line_flash_timer
?pilot_ase_draw_threat_line_status@@3HA DD 01H DUP (?)	; pilot_ase_draw_threat_line_status
?co_pilot_ase_draw_threat_line_status@@3HA DD 01H DUP (?) ; co_pilot_ase_draw_threat_line_status
?main_horizon_mask@@3PADA DD 01H DUP (?)		; main_horizon_mask
?side_horizon_mask@@3PADA DD 01H DUP (?)		; side_horizon_mask
?num_main_weapon_line_points_with_stub_wings@@3HA DD 01H DUP (?) ; num_main_weapon_line_points_with_stub_wings
?num_side_weapon_line_points_with_stub_wings@@3HA DD 01H DUP (?) ; num_side_weapon_line_points_with_stub_wings
?num_main_weapon_line_points_without_stub_wings@@3HA DD 01H DUP (?) ; num_main_weapon_line_points_without_stub_wings
?num_side_weapon_line_points_without_stub_wings@@3HA DD 01H DUP (?) ; num_side_weapon_line_points_without_stub_wings
?main_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A DD 01H DUP (?) ; main_weapon_line_points_with_stub_wings
?side_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A DD 01H DUP (?) ; side_weapon_line_points_with_stub_wings
?main_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A DD 01H DUP (?) ; main_weapon_line_points_without_stub_wings
?side_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A DD 01H DUP (?) ; side_weapon_line_points_without_stub_wings
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c2180000
CONST	SEGMENT
__real@c2180000 DD 0c2180000r			; -38
CONST	ENDS
;	COMDAT __real@c1c80000
CONST	SEGMENT
__real@c1c80000 DD 0c1c80000r			; -25
CONST	ENDS
;	COMDAT __real@c1980000
CONST	SEGMENT
__real@c1980000 DD 0c1980000r			; -19
CONST	ENDS
;	COMDAT __real@c1400000
CONST	SEGMENT
__real@c1400000 DD 0c1400000r			; -12
CONST	ENDS
;	COMDAT __real@c1000000
CONST	SEGMENT
__real@c1000000 DD 0c1000000r			; -8
CONST	ENDS
;	COMDAT __real@c0c00000
CONST	SEGMENT
__real@c0c00000 DD 0c0c00000r			; -6
CONST	ENDS
;	COMDAT __real@c0a00000
CONST	SEGMENT
__real@c0a00000 DD 0c0a00000r			; -5
CONST	ENDS
;	COMDAT __real@c0800000
CONST	SEGMENT
__real@c0800000 DD 0c0800000r			; -4
CONST	ENDS
;	COMDAT __real@c0400000
CONST	SEGMENT
__real@c0400000 DD 0c0400000r			; -3
CONST	ENDS
;	COMDAT __real@c034000000000000
CONST	SEGMENT
__real@c034000000000000 DQ 0c034000000000000r	; -20
CONST	ENDS
;	COMDAT __real@c024000000000000
CONST	SEGMENT
__real@c024000000000000 DQ 0c024000000000000r	; -10
CONST	ENDS
;	COMDAT __real@c00921fb51000000
CONST	SEGMENT
__real@c00921fb51000000 DQ 0c00921fb51000000r	; -3.14159
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bff921fb51000000
CONST	SEGMENT
__real@bff921fb51000000 DQ 0bff921fb51000000r	; -1.5708
CONST	ENDS
;	COMDAT __real@bff0c15236000000
CONST	SEGMENT
__real@bff0c15236000000 DQ 0bff0c15236000000r	; -1.0472
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bfec28f5c0000000
CONST	SEGMENT
__real@bfec28f5c0000000 DQ 0bfec28f5c0000000r	; -0.88
CONST	ENDS
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
CONST	ENDS
;	COMDAT __real@bfd893011c000000
CONST	SEGMENT
__real@bfd893011c000000 DQ 0bfd893011c000000r	; -0.383972
CONST	ENDS
;	COMDAT __real@bfc999999999999a
CONST	SEGMENT
__real@bfc999999999999a DQ 0bfc999999999999ar	; -0.2
CONST	ENDS
;	COMDAT __real@bfc90fdb
CONST	SEGMENT
__real@bfc90fdb DD 0bfc90fdbr			; -1.5708
CONST	ENDS
;	COMDAT __real@bfc3333333333333
CONST	SEGMENT
__real@bfc3333333333333 DQ 0bfc3333333333333r	; -0.15
CONST	ENDS
;	COMDAT __real@bf860a92
CONST	SEGMENT
__real@bf860a92 DD 0bf860a92r			; -1.0472
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf7ae148
CONST	SEGMENT
__real@bf7ae148 DD 0bf7ae148r			; -0.98
CONST	ENDS
;	COMDAT __real@bf770a3d
CONST	SEGMENT
__real@bf770a3d DD 0bf770a3dr			; -0.965
CONST	ENDS
;	COMDAT __real@bf733333
CONST	SEGMENT
__real@bf733333 DD 0bf733333r			; -0.95
CONST	ENDS
;	COMDAT __real@bf70a3d7
CONST	SEGMENT
__real@bf70a3d7 DD 0bf70a3d7r			; -0.94
CONST	ENDS
;	COMDAT __real@bf6f5c29
CONST	SEGMENT
__real@bf6f5c29 DD 0bf6f5c29r			; -0.935
CONST	ENDS
;	COMDAT __real@bf6e147b
CONST	SEGMENT
__real@bf6e147b DD 0bf6e147br			; -0.93
CONST	ENDS
;	COMDAT __real@bf6b851f
CONST	SEGMENT
__real@bf6b851f DD 0bf6b851fr			; -0.92
CONST	ENDS
;	COMDAT __real@bf69999a
CONST	SEGMENT
__real@bf69999a DD 0bf69999ar			; -0.9125
CONST	ENDS
;	COMDAT __real@bf666666
CONST	SEGMENT
__real@bf666666 DD 0bf666666r			; -0.9
CONST	ENDS
;	COMDAT __real@bf63d70b
CONST	SEGMENT
__real@bf63d70b DD 0bf63d70br			; -0.89
CONST	ENDS
;	COMDAT __real@bf63d70a
CONST	SEGMENT
__real@bf63d70a DD 0bf63d70ar			; -0.89
CONST	ENDS
;	COMDAT __real@bf6147ae
CONST	SEGMENT
__real@bf6147ae DD 0bf6147aer			; -0.88
CONST	ENDS
;	COMDAT __real@bf5eb852
CONST	SEGMENT
__real@bf5eb852 DD 0bf5eb852r			; -0.87
CONST	ENDS
;	COMDAT __real@bf5c28f6
CONST	SEGMENT
__real@bf5c28f6 DD 0bf5c28f6r			; -0.86
CONST	ENDS
;	COMDAT __real@bf5ae148
CONST	SEGMENT
__real@bf5ae148 DD 0bf5ae148r			; -0.855
CONST	ENDS
;	COMDAT __real@bf59999a
CONST	SEGMENT
__real@bf59999a DD 0bf59999ar			; -0.85
CONST	ENDS
;	COMDAT __real@bf576c8b
CONST	SEGMENT
__real@bf576c8b DD 0bf576c8br			; -0.8415
CONST	ENDS
;	COMDAT __real@bf570a3e
CONST	SEGMENT
__real@bf570a3e DD 0bf570a3er			; -0.84
CONST	ENDS
;	COMDAT __real@bf547ae1
CONST	SEGMENT
__real@bf547ae1 DD 0bf547ae1r			; -0.83
CONST	ENDS
;	COMDAT __real@bf533333
CONST	SEGMENT
__real@bf533333 DD 0bf533333r			; -0.825
CONST	ENDS
;	COMDAT __real@bf4f5c29
CONST	SEGMENT
__real@bf4f5c29 DD 0bf4f5c29r			; -0.81
CONST	ENDS
;	COMDAT __real@bf4f5c28
CONST	SEGMENT
__real@bf4f5c28 DD 0bf4f5c28r			; -0.81
CONST	ENDS
;	COMDAT __real@bf4e147b
CONST	SEGMENT
__real@bf4e147b DD 0bf4e147br			; -0.805
CONST	ENDS
;	COMDAT __real@bf4ccccd
CONST	SEGMENT
__real@bf4ccccd DD 0bf4ccccdr			; -0.8
CONST	ENDS
;	COMDAT __real@bf4a3d70
CONST	SEGMENT
__real@bf4a3d70 DD 0bf4a3d70r			; -0.79
CONST	ENDS
;	COMDAT __real@bf490fdb
CONST	SEGMENT
__real@bf490fdb DD 0bf490fdbr			; -0.785398
CONST	ENDS
;	COMDAT __real@bf47ae15
CONST	SEGMENT
__real@bf47ae15 DD 0bf47ae15r			; -0.78
CONST	ENDS
;	COMDAT __real@bf47ae14
CONST	SEGMENT
__real@bf47ae14 DD 0bf47ae14r			; -0.78
CONST	ENDS
;	COMDAT __real@bf451eb9
CONST	SEGMENT
__real@bf451eb9 DD 0bf451eb9r			; -0.77
CONST	ENDS
;	COMDAT __real@bf451eb8
CONST	SEGMENT
__real@bf451eb8 DD 0bf451eb8r			; -0.77
CONST	ENDS
;	COMDAT __real@bf43d70a
CONST	SEGMENT
__real@bf43d70a DD 0bf43d70ar			; -0.765
CONST	ENDS
;	COMDAT __real@bf43a29c
CONST	SEGMENT
__real@bf43a29c DD 0bf43a29cr			; -0.7642
CONST	ENDS
;	COMDAT __real@bf428f5c
CONST	SEGMENT
__real@bf428f5c DD 0bf428f5cr			; -0.76
CONST	ENDS
;	COMDAT __real@bf400000
CONST	SEGMENT
__real@bf400000 DD 0bf400000r			; -0.75
CONST	ENDS
;	COMDAT __real@bf3de00d
CONST	SEGMENT
__real@bf3de00d DD 0bf3de00dr			; -0.7417
CONST	ENDS
;	COMDAT __real@bf3d70a4
CONST	SEGMENT
__real@bf3d70a4 DD 0bf3d70a4r			; -0.74
CONST	ENDS
;	COMDAT __real@bf3851ec
CONST	SEGMENT
__real@bf3851ec DD 0bf3851ecr			; -0.72
CONST	ENDS
;	COMDAT __real@bf381d7e
CONST	SEGMENT
__real@bf381d7e DD 0bf381d7er			; -0.7192
CONST	ENDS
;	COMDAT __real@bf333333
CONST	SEGMENT
__real@bf333333 DD 0bf333333r			; -0.7
CONST	ENDS
;	COMDAT __real@bf30a3d7
CONST	SEGMENT
__real@bf30a3d7 DD 0bf30a3d7r			; -0.69
CONST	ENDS
;	COMDAT __real@bf2ccccd
CONST	SEGMENT
__real@bf2ccccd DD 0bf2ccccdr			; -0.675
CONST	ENDS
;	COMDAT __real@bf2bf259
CONST	SEGMENT
__real@bf2bf259 DD 0bf2bf259r			; -0.671667
CONST	ENDS
;	COMDAT __real@bf28f5c3
CONST	SEGMENT
__real@bf28f5c3 DD 0bf28f5c3r			; -0.66
CONST	ENDS
;	COMDAT __real@bf23d70a
CONST	SEGMENT
__real@bf23d70a DD 0bf23d70ar			; -0.64
CONST	ENDS
;	COMDAT __real@bf2147ae
CONST	SEGMENT
__real@bf2147ae DD 0bf2147aer			; -0.63
CONST	ENDS
;	COMDAT __real@bf19999a
CONST	SEGMENT
__real@bf19999a DD 0bf19999ar			; -0.6
CONST	ENDS
;	COMDAT __real@bf17e282
CONST	SEGMENT
__real@bf17e282 DD 0bf17e282r			; -0.5933
CONST	ENDS
;	COMDAT __real@bf147ae1
CONST	SEGMENT
__real@bf147ae1 DD 0bf147ae1r			; -0.58
CONST	ENDS
;	COMDAT __real@bf121ff3
CONST	SEGMENT
__real@bf121ff3 DD 0bf121ff3r			; -0.5708
CONST	ENDS
;	COMDAT __real@bf11eb86
CONST	SEGMENT
__real@bf11eb86 DD 0bf11eb86r			; -0.57
CONST	ENDS
;	COMDAT __real@bf11eb85
CONST	SEGMENT
__real@bf11eb85 DD 0bf11eb85r			; -0.57
CONST	ENDS
;	COMDAT __real@bf0f5c29
CONST	SEGMENT
__real@bf0f5c29 DD 0bf0f5c29r			; -0.56
CONST	ENDS
;	COMDAT __real@bf0ccccd
CONST	SEGMENT
__real@bf0ccccd DD 0bf0ccccdr			; -0.55
CONST	ENDS
;	COMDAT __real@bf0c5d64
CONST	SEGMENT
__real@bf0c5d64 DD 0bf0c5d64r			; -0.5483
CONST	ENDS
;	COMDAT __real@bf060a92
CONST	SEGMENT
__real@bf060a92 DD 0bf060a92r			; -0.523599
CONST	ENDS
;	COMDAT __real@bf051eb8
CONST	SEGMENT
__real@bf051eb8 DD 0bf051eb8r			; -0.52
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@befae148
CONST	SEGMENT
__real@befae148 DD 0befae148r			; -0.49
CONST	ENDS
;	COMDAT __real@bef5c28f
CONST	SEGMENT
__real@bef5c28f DD 0bef5c28fr			; -0.48
CONST	ENDS
;	COMDAT __real@beed3a07
CONST	SEGMENT
__real@beed3a07 DD 0beed3a07r			; -0.463333
CONST	ENDS
;	COMDAT __real@beeb851f
CONST	SEGMENT
__real@beeb851f DD 0beeb851fr			; -0.46
CONST	ENDS
;	COMDAT __real@bee66666
CONST	SEGMENT
__real@bee66666 DD 0bee66666r			; -0.45
CONST	ENDS
;	COMDAT __real@bedc28f6
CONST	SEGMENT
__real@bedc28f6 DD 0bedc28f6r			; -0.43
CONST	ENDS
;	COMDAT __real@bed851ec
CONST	SEGMENT
__real@bed851ec DD 0bed851ecr			; -0.4225
CONST	ENDS
;	COMDAT __real@bed1eb85
CONST	SEGMENT
__real@bed1eb85 DD 0bed1eb85r			; -0.41
CONST	ENDS
;	COMDAT __real@becccccd
CONST	SEGMENT
__real@becccccd DD 0becccccdr			; -0.4
CONST	ENDS
;	COMDAT __real@bec28f5c
CONST	SEGMENT
__real@bec28f5c DD 0bec28f5cr			; -0.38
CONST	ENDS
;	COMDAT __real@bec147ae
CONST	SEGMENT
__real@bec147ae DD 0bec147aer			; -0.3775
CONST	ENDS
;	COMDAT __real@bebd70a4
CONST	SEGMENT
__real@bebd70a4 DD 0bebd70a4r			; -0.37
CONST	ENDS
;	COMDAT __real@beb851ec
CONST	SEGMENT
__real@beb851ec DD 0beb851ecr			; -0.36
CONST	ENDS
;	COMDAT __real@beb33333
CONST	SEGMENT
__real@beb33333 DD 0beb33333r			; -0.35
CONST	ENDS
;	COMDAT __real@beb2b8c2
CONST	SEGMENT
__real@beb2b8c2 DD 0beb2b8c2r			; -0.349066
CONST	ENDS
;	COMDAT __real@beaaa64c
CONST	SEGMENT
__real@beaaa64c DD 0beaaa64cr			; -0.3333
CONST	ENDS
;	COMDAT __real@bea3d70a
CONST	SEGMENT
__real@bea3d70a DD 0bea3d70ar			; -0.32
CONST	ENDS
;	COMDAT __real@be99999a
CONST	SEGMENT
__real@be99999a DD 0be99999ar			; -0.3
CONST	ENDS
;	COMDAT __real@be947ae1
CONST	SEGMENT
__real@be947ae1 DD 0be947ae1r			; -0.29
CONST	ENDS
;	COMDAT __real@be851eb8
CONST	SEGMENT
__real@be851eb8 DD 0be851eb8r			; -0.26
CONST	ENDS
;	COMDAT __real@be80ded3
CONST	SEGMENT
__real@be80ded3 DD 0be80ded3r			; -0.2517
CONST	ENDS
;	COMDAT __real@be800000
CONST	SEGMENT
__real@be800000 DD 0be800000r			; -0.25
CONST	ENDS
;	COMDAT __real@be75c28f
CONST	SEGMENT
__real@be75c28f DD 0be75c28fr			; -0.24
CONST	ENDS
;	COMDAT __real@be6b851f
CONST	SEGMENT
__real@be6b851f DD 0be6b851fr			; -0.23
CONST	ENDS
;	COMDAT __real@be6ab368
CONST	SEGMENT
__real@be6ab368 DD 0be6ab368r			; -0.2292
CONST	ENDS
;	COMDAT __real@be53a92a
CONST	SEGMENT
__real@be53a92a DD 0be53a92ar			; -0.2067
CONST	ENDS
;	COMDAT __real@be4ccccd
CONST	SEGMENT
__real@be4ccccd DD 0be4ccccdr			; -0.2
CONST	ENDS
;	COMDAT __real@be32b8c2
CONST	SEGMENT
__real@be32b8c2 DD 0be32b8c2r			; -0.174533
CONST	ENDS
;	COMDAT __real@be2e147b
CONST	SEGMENT
__real@be2e147b DD 0be2e147br			; -0.17
CONST	ENDS
;	COMDAT __real@be23d70a
CONST	SEGMENT
__real@be23d70a DD 0be23d70ar			; -0.16
CONST	ENDS
;	COMDAT __real@be0f5c29
CONST	SEGMENT
__real@be0f5c29 DD 0be0f5c29r			; -0.14
CONST	ENDS
;	COMDAT __real@bde147ae
CONST	SEGMENT
__real@bde147ae DD 0bde147aer			; -0.11
CONST	ENDS
;	COMDAT __real@bdcccccd
CONST	SEGMENT
__real@bdcccccd DD 0bdcccccdr			; -0.1
CONST	ENDS
;	COMDAT __real@bda57a78
CONST	SEGMENT
__real@bda57a78 DD 0bda57a78r			; -0.0808
CONST	ENDS
;	COMDAT __real@bda3d70a
CONST	SEGMENT
__real@bda3d70a DD 0bda3d70ar			; -0.08
CONST	ENDS
;	COMDAT __real@bd99999a
CONST	SEGMENT
__real@bd99999a DD 0bd99999ar			; -0.075
CONST	ENDS
;	COMDAT __real@bd6ecbfb
CONST	SEGMENT
__real@bd6ecbfb DD 0bd6ecbfbr			; -0.0583
CONST	ENDS
;	COMDAT __real@bd4ccccd
CONST	SEGMENT
__real@bd4ccccd DD 0bd4ccccdr			; -0.05
CONST	ENDS
;	COMDAT __real@bd12a305
CONST	SEGMENT
__real@bd12a305 DD 0bd12a305r			; -0.0358
CONST	ENDS
;	COMDAT __real@bd0f5c29
CONST	SEGMENT
__real@bd0f5c29 DD 0bd0f5c29r			; -0.035
CONST	ENDS
;	COMDAT __real@bcf5c28f
CONST	SEGMENT
__real@bcf5c28f DD 0bcf5c28fr			; -0.03
CONST	ENDS
;	COMDAT __real@bccccccd
CONST	SEGMENT
__real@bccccccd DD 0bccccccdr			; -0.025
CONST	ENDS
;	COMDAT __real@bca3d70a
CONST	SEGMENT
__real@bca3d70a DD 0bca3d70ar			; -0.02
CONST	ENDS
;	COMDAT __real@80000000
CONST	SEGMENT
__real@80000000 DD 080000000r			; -0
CONST	ENDS
;	COMDAT __real@49742400
CONST	SEGMENT
__real@49742400 DD 049742400r			; 1e+06
CONST	ENDS
;	COMDAT __real@46c35000
CONST	SEGMENT
__real@46c35000 DD 046c35000r			; 25000
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@459c4000
CONST	SEGMENT
__real@459c4000 DD 0459c4000r			; 5000
CONST	ENDS
;	COMDAT __real@44fa0000
CONST	SEGMENT
__real@44fa0000 DD 044fa0000r			; 2000
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
CONST	ENDS
;	COMDAT __real@43960000
CONST	SEGMENT
__real@43960000 DD 043960000r			; 300
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@437fffbe
CONST	SEGMENT
__real@437fffbe DD 0437fffber			; 255.999
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@42652ee0
CONST	SEGMENT
__real@42652ee0 DD 042652ee0r			; 57.2958
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@41980000
CONST	SEGMENT
__real@41980000 DD 041980000r			; 19
CONST	ENDS
;	COMDAT __real@41900000
CONST	SEGMENT
__real@41900000 DD 041900000r			; 18
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@40f86a0000000000
CONST	SEGMENT
__real@40f86a0000000000 DQ 040f86a0000000000r	; 100000
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40c3878000000000
CONST	SEGMENT
__real@40c3878000000000 DQ 040c3878000000000r	; 9999
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@409f400000000000
CONST	SEGMENT
__real@409f400000000000 DQ 0409f400000000000r	; 2000
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@408f380000000000
CONST	SEGMENT
__real@408f380000000000 DQ 0408f380000000000r	; 999
CONST	ENDS
;	COMDAT __real@40845f306446f9b4
CONST	SEGMENT
__real@40845f306446f9b4 DQ 040845f306446f9b4r	; 651.899
CONST	ENDS
;	COMDAT __real@4084000000000000
CONST	SEGMENT
__real@4084000000000000 DQ 04084000000000000r	; 640
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@407f400000000000
CONST	SEGMENT
__real@407f400000000000 DQ 0407f400000000000r	; 500
CONST	ENDS
;	COMDAT __real@407f300000000000
CONST	SEGMENT
__real@407f300000000000 DQ 0407f300000000000r	; 499
CONST	ENDS
;	COMDAT __real@407e000000000000
CONST	SEGMENT
__real@407e000000000000 DQ 0407e000000000000r	; 480
CONST	ENDS
;	COMDAT __real@4078d00000000000
CONST	SEGMENT
__real@4078d00000000000 DQ 04078d00000000000r	; 397
CONST	ENDS
;	COMDAT __real@4072c00000000000
CONST	SEGMENT
__real@4072c00000000000 DQ 04072c00000000000r	; 300
CONST	ENDS
;	COMDAT __real@4072800000000000
CONST	SEGMENT
__real@4072800000000000 DQ 04072800000000000r	; 296
CONST	ENDS
;	COMDAT __real@4070000000000000
CONST	SEGMENT
__real@4070000000000000 DQ 04070000000000000r	; 256
CONST	ENDS
;	COMDAT __real@406e600000000000
CONST	SEGMENT
__real@406e600000000000 DQ 0406e600000000000r	; 243
CONST	ENDS
;	COMDAT __real@4069000000000000
CONST	SEGMENT
__real@4069000000000000 DQ 04069000000000000r	; 200
CONST	ENDS
;	COMDAT __real@40666666
CONST	SEGMENT
__real@40666666 DD 040666666r			; 3.6
CONST	ENDS
;	COMDAT __real@4061a00000000000
CONST	SEGMENT
__real@4061a00000000000 DQ 04061a00000000000r	; 141
CONST	ENDS
;	COMDAT __real@405fc00000000000
CONST	SEGMENT
__real@405fc00000000000 DQ 0405fc00000000000r	; 127
CONST	ENDS
;	COMDAT __real@405e000000000000
CONST	SEGMENT
__real@405e000000000000 DQ 0405e000000000000r	; 120
CONST	ENDS
;	COMDAT __real@405b800000000000
CONST	SEGMENT
__real@405b800000000000 DQ 0405b800000000000r	; 110
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@4051f948
CONST	SEGMENT
__real@4051f948 DD 04051f948r			; 3.28084
CONST	ENDS
;	COMDAT __real@404ca5dc00000000
CONST	SEGMENT
__real@404ca5dc00000000 DQ 0404ca5dc00000000r	; 57.2958
CONST	ENDS
;	COMDAT __real@4044000000000000
CONST	SEGMENT
__real@4044000000000000 DQ 04044000000000000r	; 40
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@4034000000000000
CONST	SEGMENT
__real@4034000000000000 DQ 04034000000000000r	; 20
CONST	ENDS
;	COMDAT __real@402a000000000000
CONST	SEGMENT
__real@402a000000000000 DQ 0402a000000000000r	; 13
CONST	ENDS
;	COMDAT __real@4026eb1686b280e6
CONST	SEGMENT
__real@4026eb1686b280e6 DQ 04026eb1686b280e6r	; 11.4592
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@401c000000000000
CONST	SEGMENT
__real@401c000000000000 DQ 0401c000000000000r	; 7
CONST	ENDS
;	COMDAT __real@401921fb51000000
CONST	SEGMENT
__real@401921fb51000000 DQ 0401921fb51000000r	; 6.28319
CONST	ENDS
;	COMDAT __real@4016eb167e7d81e3
CONST	SEGMENT
__real@4016eb167e7d81e3 DQ 04016eb167e7d81e3r	; 5.72958
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@400d1eb8
CONST	SEGMENT
__real@400d1eb8 DD 0400d1eb8r			; 2.205
CONST	ENDS
;	COMDAT __real@400921fb51000000
CONST	SEGMENT
__real@400921fb51000000 DQ 0400921fb51000000r	; 3.14159
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3fff0bb080000000
CONST	SEGMENT
__real@3fff0bb080000000 DQ 03fff0bb080000000r	; 1.94035
CONST	ENDS
;	COMDAT __real@3ff921fb51000000
CONST	SEGMENT
__real@3ff921fb51000000 DQ 03ff921fb51000000r	; 1.5708
CONST	ENDS
;	COMDAT __real@3ff85d84
CONST	SEGMENT
__real@3ff85d84 DD 03ff85d84r			; 1.94035
CONST	ENDS
;	COMDAT __real@3ff8000000000000
CONST	SEGMENT
__real@3ff8000000000000 DQ 03ff8000000000000r	; 1.5
CONST	ENDS
;	COMDAT __real@3ff5d3d193333333
CONST	SEGMENT
__real@3ff5d3d193333333 DQ 03ff5d3d193333333r	; 1.36421
CONST	ENDS
;	COMDAT __real@3ff0c15236000000
CONST	SEGMENT
__real@3ff0c15236000000 DQ 03ff0c15236000000r	; 1.0472
CONST	ENDS
;	COMDAT __real@3ff0c09b332ccccd
CONST	SEGMENT
__real@3ff0c09b332ccccd DQ 03ff0c09b332ccccdr	; 1.04702
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3feff7ced916872b
CONST	SEGMENT
__real@3feff7ced916872b DQ 03feff7ced916872br	; 0.999
CONST	ENDS
;	COMDAT __real@3feb333333333333
CONST	SEGMENT
__real@3feb333333333333 DQ 03feb333333333333r	; 0.85
CONST	ENDS
;	COMDAT __real@3fe8000000000000
CONST	SEGMENT
__real@3fe8000000000000 DQ 03fe8000000000000r	; 0.75
CONST	ENDS
;	COMDAT __real@3fe6666660000000
CONST	SEGMENT
__real@3fe6666660000000 DQ 03fe6666660000000r	; 0.7
CONST	ENDS
;	COMDAT __real@3fe3333333333333
CONST	SEGMENT
__real@3fe3333333333333 DQ 03fe3333333333333r	; 0.6
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fdeb851eb851eb8
CONST	SEGMENT
__real@3fdeb851eb851eb8 DQ 03fdeb851eb851eb8r	; 0.48
CONST	ENDS
;	COMDAT __real@3fdbecde5a000000
CONST	SEGMENT
__real@3fdbecde5a000000 DQ 03fdbecde5a000000r	; 0.436332
CONST	ENDS
;	COMDAT __real@3fd893011c000000
CONST	SEGMENT
__real@3fd893011c000000 DQ 03fd893011c000000r	; 0.383972
CONST	ENDS
;	COMDAT __real@3fd6666666666666
CONST	SEGMENT
__real@3fd6666666666666 DQ 03fd6666666666666r	; 0.35
CONST	ENDS
;	COMDAT __real@3fd51eb851eb851f
CONST	SEGMENT
__real@3fd51eb851eb851f DQ 03fd51eb851eb851fr	; 0.33
CONST	ENDS
;	COMDAT __real@3fd3333333333333
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
CONST	ENDS
;	COMDAT __real@3fd0a3d70a3d70a4
CONST	SEGMENT
__real@3fd0a3d70a3d70a4 DQ 03fd0a3d70a3d70a4r	; 0.26
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fc999999999999a
CONST	SEGMENT
__real@3fc999999999999a DQ 03fc999999999999ar	; 0.2
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3fc70a3d70a3d70a
CONST	SEGMENT
__real@3fc70a3d70a3d70a DQ 03fc70a3d70a3d70ar	; 0.18
CONST	ENDS
;	COMDAT __real@3fc6571848000000
CONST	SEGMENT
__real@3fc6571848000000 DQ 03fc6571848000000r	; 0.174533
CONST	ENDS
;	COMDAT __real@3fc3333340000000
CONST	SEGMENT
__real@3fc3333340000000 DQ 03fc3333340000000r	; 0.15
CONST	ENDS
;	COMDAT __real@3fc3333333333333
CONST	SEGMENT
__real@3fc3333333333333 DQ 03fc3333333333333r	; 0.15
CONST	ENDS
;	COMDAT __real@3fc0a3d70a3d70a4
CONST	SEGMENT
__real@3fc0a3d70a3d70a4 DQ 03fc0a3d70a3d70a4r	; 0.13
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3fb3e93ea0000000
CONST	SEGMENT
__real@3fb3e93ea0000000 DQ 03fb3e93ea0000000r	; 0.0777778
CONST	ENDS
;	COMDAT __real@3fb3333340000000
CONST	SEGMENT
__real@3fb3333340000000 DQ 03fb3333340000000r	; 0.075
CONST	ENDS
;	COMDAT __real@3fb3333333333333
CONST	SEGMENT
__real@3fb3333333333333 DQ 03fb3333333333333r	; 0.075
CONST	ENDS
;	COMDAT __real@3fb1eb851eb851ec
CONST	SEGMENT
__real@3fb1eb851eb851ec DQ 03fb1eb851eb851ecr	; 0.07
CONST	ENDS
;	COMDAT __real@3fae9e8d
CONST	SEGMENT
__real@3fae9e8d DD 03fae9e8dr			; 1.36421
CONST	ENDS
;	COMDAT __real@3fa999999999999a
CONST	SEGMENT
__real@3fa999999999999a DQ 03fa999999999999ar	; 0.05
CONST	ENDS
;	COMDAT __real@3fa47ae147ae147b
CONST	SEGMENT
__real@3fa47ae147ae147b DQ 03fa47ae147ae147br	; 0.04
CONST	ENDS
;	COMDAT __real@3fa1eb851eb851ec
CONST	SEGMENT
__real@3fa1eb851eb851ec DQ 03fa1eb851eb851ecr	; 0.035
CONST	ENDS
;	COMDAT __real@3f9eb851eb851eb8
CONST	SEGMENT
__real@3f9eb851eb851eb8 DQ 03f9eb851eb851eb8r	; 0.03
CONST	ENDS
;	COMDAT __real@3f9999999999999a
CONST	SEGMENT
__real@3f9999999999999a DQ 03f9999999999999ar	; 0.025
CONST	ENDS
;	COMDAT __real@3f947ae147ae147b
CONST	SEGMENT
__real@3f947ae147ae147b DQ 03f947ae147ae147br	; 0.02
CONST	ENDS
;	COMDAT __real@3f860a92
CONST	SEGMENT
__real@3f860a92 DD 03f860a92r			; 1.0472
CONST	ENDS
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT __real@3f82f6e9
CONST	SEGMENT
__real@3f82f6e9 DD 03f82f6e9r			; 1.02316
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7fbe77
CONST	SEGMENT
__real@3f7fbe77 DD 03f7fbe77r			; 0.999
CONST	ENDS
;	COMDAT __real@3f770a3d
CONST	SEGMENT
__real@3f770a3d DD 03f770a3dr			; 0.965
CONST	ENDS
;	COMDAT __real@3f6ccccd
CONST	SEGMENT
__real@3f6ccccd DD 03f6ccccdr			; 0.925
CONST	ENDS
;	COMDAT __real@3f6bd70a
CONST	SEGMENT
__real@3f6bd70a DD 03f6bd70ar			; 0.92125
CONST	ENDS
;	COMDAT __real@3f68f5c3
CONST	SEGMENT
__real@3f68f5c3 DD 03f68f5c3r			; 0.91
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f600000
CONST	SEGMENT
__real@3f600000 DD 03f600000r			; 0.875
CONST	ENDS
;	COMDAT __real@3f5d70a4
CONST	SEGMENT
__real@3f5d70a4 DD 03f5d70a4r			; 0.865
CONST	ENDS
;	COMDAT __real@3f5c28f6
CONST	SEGMENT
__real@3f5c28f6 DD 03f5c28f6r			; 0.86
CONST	ENDS
;	COMDAT __real@3f59999a
CONST	SEGMENT
__real@3f59999a DD 03f59999ar			; 0.85
CONST	ENDS
;	COMDAT __real@3f5999999999999a
CONST	SEGMENT
__real@3f5999999999999a DQ 03f5999999999999ar	; 0.0015625
CONST	ENDS
;	COMDAT __real@3f576c8b
CONST	SEGMENT
__real@3f576c8b DD 03f576c8br			; 0.8415
CONST	ENDS
;	COMDAT __real@3f570a3d
CONST	SEGMENT
__real@3f570a3d DD 03f570a3dr			; 0.84
CONST	ENDS
;	COMDAT __real@3f547ae1
CONST	SEGMENT
__real@3f547ae1 DD 03f547ae1r			; 0.83
CONST	ENDS
;	COMDAT __real@3f50a3d7
CONST	SEGMENT
__real@3f50a3d7 DD 03f50a3d7r			; 0.815
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3f500000
CONST	SEGMENT
__real@3f500000 DD 03f500000r			; 0.8125
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f4b851f
CONST	SEGMENT
__real@3f4b851f DD 03f4b851fr			; 0.795
CONST	ENDS
;	COMDAT __real@3f4a3d71
CONST	SEGMENT
__real@3f4a3d71 DD 03f4a3d71r			; 0.79
CONST	ENDS
;	COMDAT __real@3f490fdb
CONST	SEGMENT
__real@3f490fdb DD 03f490fdbr			; 0.785398
CONST	ENDS
;	COMDAT __real@3f466666
CONST	SEGMENT
__real@3f466666 DD 03f466666r			; 0.775
CONST	ENDS
;	COMDAT __real@3f451eb9
CONST	SEGMENT
__real@3f451eb9 DD 03f451eb9r			; 0.77
CONST	ENDS
;	COMDAT __real@3f43d70a
CONST	SEGMENT
__real@3f43d70a DD 03f43d70ar			; 0.765
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f3eb852
CONST	SEGMENT
__real@3f3eb852 DD 03f3eb852r			; 0.745
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f2e9e8d
CONST	SEGMENT
__real@3f2e9e8d DD 03f2e9e8dr			; 0.682107
CONST	ENDS
;	COMDAT __real@3f2ccccd
CONST	SEGMENT
__real@3f2ccccd DD 03f2ccccdr			; 0.675
CONST	ENDS
;	COMDAT __real@3f266666
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT __real@3f233333
CONST	SEGMENT
__real@3f233333 DD 03f233333r			; 0.6375
CONST	ENDS
;	COMDAT __real@3f2147ae
CONST	SEGMENT
__real@3f2147ae DD 03f2147aer			; 0.63
CONST	ENDS
;	COMDAT __real@3f1c28f6
CONST	SEGMENT
__real@3f1c28f6 DD 03f1c28f6r			; 0.61
CONST	ENDS
;	COMDAT __real@3f1a36e2eb1c432d
CONST	SEGMENT
__real@3f1a36e2eb1c432d DQ 03f1a36e2eb1c432dr	; 0.0001
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f147ae1
CONST	SEGMENT
__real@3f147ae1 DD 03f147ae1r			; 0.58
CONST	ENDS
;	COMDAT __real@3f11eb86
CONST	SEGMENT
__real@3f11eb86 DD 03f11eb86r			; 0.57
CONST	ENDS
;	COMDAT __real@3f11eb85
CONST	SEGMENT
__real@3f11eb85 DD 03f11eb85r			; 0.57
CONST	ENDS
;	COMDAT __real@3f10000000000000
CONST	SEGMENT
__real@3f10000000000000 DQ 03f10000000000000r	; 6.10352e-05
CONST	ENDS
;	COMDAT __real@3f0ccccd
CONST	SEGMENT
__real@3f0ccccd DD 03f0ccccdr			; 0.55
CONST	ENDS
;	COMDAT __real@3f060a92
CONST	SEGMENT
__real@3f060a92 DD 03f060a92r			; 0.523599
CONST	ENDS
;	COMDAT __real@3f051eb8
CONST	SEGMENT
__real@3f051eb8 DD 03f051eb8r			; 0.52
CONST	ENDS
;	COMDAT __real@3f00002000400080
CONST	SEGMENT
__real@3f00002000400080 DQ 03f00002000400080r	; 3.05185e-05
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3efae148
CONST	SEGMENT
__real@3efae148 DD 03efae148r			; 0.49
CONST	ENDS
;	COMDAT __real@3ef5c28f
CONST	SEGMENT
__real@3ef5c28f DD 03ef5c28fr			; 0.48
CONST	ENDS
;	COMDAT __real@3eeb851f
CONST	SEGMENT
__real@3eeb851f DD 03eeb851fr			; 0.46
CONST	ENDS
;	COMDAT __real@3ee66667
CONST	SEGMENT
__real@3ee66667 DD 03ee66667r			; 0.45
CONST	ENDS
;	COMDAT __real@3ee66666
CONST	SEGMENT
__real@3ee66666 DD 03ee66666r			; 0.45
CONST	ENDS
;	COMDAT __real@3edc28f6
CONST	SEGMENT
__real@3edc28f6 DD 03edc28f6r			; 0.43
CONST	ENDS
;	COMDAT __real@3ed9999a
CONST	SEGMENT
__real@3ed9999a DD 03ed9999ar			; 0.425
CONST	ENDS
;	COMDAT __real@3ed1eb85
CONST	SEGMENT
__real@3ed1eb85 DD 03ed1eb85r			; 0.41
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3ec28f5c
CONST	SEGMENT
__real@3ec28f5c DD 03ec28f5cr			; 0.38
CONST	ENDS
;	COMDAT __real@3ebd70a4
CONST	SEGMENT
__real@3ebd70a4 DD 03ebd70a4r			; 0.37
CONST	ENDS
;	COMDAT __real@3eb33333
CONST	SEGMENT
__real@3eb33333 DD 03eb33333r			; 0.35
CONST	ENDS
;	COMDAT __real@3eb2b8c2
CONST	SEGMENT
__real@3eb2b8c2 DD 03eb2b8c2r			; 0.349066
CONST	ENDS
;	COMDAT __real@3eae9e8d
CONST	SEGMENT
__real@3eae9e8d DD 03eae9e8dr			; 0.341053
CONST	ENDS
;	COMDAT __real@3eaaa64c
CONST	SEGMENT
__real@3eaaa64c DD 03eaaa64cr			; 0.3333
CONST	ENDS
;	COMDAT __real@3ea3d70a
CONST	SEGMENT
__real@3ea3d70a DD 03ea3d70ar			; 0.32
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e947ae1
CONST	SEGMENT
__real@3e947ae1 DD 03e947ae1r			; 0.29
CONST	ENDS
;	COMDAT __real@3e8f5c29
CONST	SEGMENT
__real@3e8f5c29 DD 03e8f5c29r			; 0.28
CONST	ENDS
;	COMDAT __real@3e8ccccd
CONST	SEGMENT
__real@3e8ccccd DD 03e8ccccdr			; 0.275
CONST	ENDS
;	COMDAT __real@3e8a3d71
CONST	SEGMENT
__real@3e8a3d71 DD 03e8a3d71r			; 0.27
CONST	ENDS
;	COMDAT __real@3e87ae14
CONST	SEGMENT
__real@3e87ae14 DD 03e87ae14r			; 0.265
CONST	ENDS
;	COMDAT __real@3e851eb8
CONST	SEGMENT
__real@3e851eb8 DD 03e851eb8r			; 0.26
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e75c28f
CONST	SEGMENT
__real@3e75c28f DD 03e75c28fr			; 0.24
CONST	ENDS
;	COMDAT __real@3e6b851f
CONST	SEGMENT
__real@3e6b851f DD 03e6b851fr			; 0.23
CONST	ENDS
;	COMDAT __real@3e6147ae
CONST	SEGMENT
__real@3e6147ae DD 03e6147aer			; 0.22
CONST	ENDS
;	COMDAT __real@3e59999a
CONST	SEGMENT
__real@3e59999a DD 03e59999ar			; 0.2125
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e428f5c
CONST	SEGMENT
__real@3e428f5c DD 03e428f5cr			; 0.19
CONST	ENDS
;	COMDAT __real@3e3851ec
CONST	SEGMENT
__real@3e3851ec DD 03e3851ecr			; 0.18
CONST	ENDS
;	COMDAT __real@3e333333
CONST	SEGMENT
__real@3e333333 DD 03e333333r			; 0.175
CONST	ENDS
;	COMDAT __real@3e32b8c2
CONST	SEGMENT
__real@3e32b8c2 DD 03e32b8c2r			; 0.174533
CONST	ENDS
;	COMDAT __real@3e2e147b
CONST	SEGMENT
__real@3e2e147b DD 03e2e147br			; 0.17
CONST	ENDS
;	COMDAT __real@3e23d70a
CONST	SEGMENT
__real@3e23d70a DD 03e23d70ar			; 0.16
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@3e0f5c29
CONST	SEGMENT
__real@3e0f5c29 DD 03e0f5c29r			; 0.14
CONST	ENDS
;	COMDAT __real@3e0a3d71
CONST	SEGMENT
__real@3e0a3d71 DD 03e0a3d71r			; 0.135
CONST	ENDS
;	COMDAT __real@3e0a3d70
CONST	SEGMENT
__real@3e0a3d70 DD 03e0a3d70r			; 0.135
CONST	ENDS
;	COMDAT __real@3e000000
CONST	SEGMENT
__real@3e000000 DD 03e000000r			; 0.125
CONST	ENDS
;	COMDAT __real@3df5c28f
CONST	SEGMENT
__real@3df5c28f DD 03df5c28fr			; 0.12
CONST	ENDS
;	COMDAT __real@3de66666
CONST	SEGMENT
__real@3de66666 DD 03de66666r			; 0.1125
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3db851ec
CONST	SEGMENT
__real@3db851ec DD 03db851ecr			; 0.09
CONST	ENDS
;	COMDAT __real@3db851eb
CONST	SEGMENT
__real@3db851eb DD 03db851ebr			; 0.09
CONST	ENDS
;	COMDAT __real@3db2b8c2
CONST	SEGMENT
__real@3db2b8c2 DD 03db2b8c2r			; 0.0872665
CONST	ENDS
;	COMDAT __real@3da3d70a
CONST	SEGMENT
__real@3da3d70a DD 03da3d70ar			; 0.08
CONST	ENDS
;	COMDAT __real@3d9f49f5
CONST	SEGMENT
__real@3d9f49f5 DD 03d9f49f5r			; 0.0777778
CONST	ENDS
;	COMDAT __real@3d99999a
CONST	SEGMENT
__real@3d99999a DD 03d99999ar			; 0.075
CONST	ENDS
;	COMDAT __real@3d7c0fc1
CONST	SEGMENT
__real@3d7c0fc1 DD 03d7c0fc1r			; 0.0615385
CONST	ENDS
;	COMDAT __real@3d75c290
CONST	SEGMENT
__real@3d75c290 DD 03d75c290r			; 0.06
CONST	ENDS
;	COMDAT __real@3d75c28f
CONST	SEGMENT
__real@3d75c28f DD 03d75c28fr			; 0.06
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3d23d70a
CONST	SEGMENT
__real@3d23d70a DD 03d23d70ar			; 0.04
CONST	ENDS
;	COMDAT __real@3d0f5c29
CONST	SEGMENT
__real@3d0f5c29 DD 03d0f5c29r			; 0.035
CONST	ENDS
;	COMDAT __real@3cf5c28f
CONST	SEGMENT
__real@3cf5c28f DD 03cf5c28fr			; 0.03
CONST	ENDS
;	COMDAT __real@3ccccccd
CONST	SEGMENT
__real@3ccccccd DD 03ccccccdr			; 0.025
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??toggle_comanche_side_mfd_on_off@@YGXW4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??toggle_comanche_side_mfd_on_off@@YGXW4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA DD 03b65H ; `toggle_comanche_side_mfd_on_off'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??toggle_comanche_main_mfd_on_off@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??toggle_comanche_main_mfd_on_off@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA DD 03b53H ; `toggle_comanche_main_mfd_on_off'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CE@NJOBHOGM@previous_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_@
CONST	SEGMENT
??_C@_0CE@NJOBHOGM@previous_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_@ DB 'previo'
	DB	'us_mfd_mode != *mfd_mode_ptr2', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??select_previous_comanche_main_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_previous_comanche_main_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA DD 03b33H ; `select_previous_comanche_main_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??select_next_comanche_main_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_next_comanche_main_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA DD 03b13H ; `select_next_comanche_main_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CA@HJLHJBNK@next_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_ptr2@
CONST	SEGMENT
??_C@_0CA@HJLHJBNK@next_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_ptr2@ DB 'next_m'
	DB	'fd_mode != *mfd_mode_ptr2', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??select_next_comanche_side_mfd@@YGXW4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_next_comanche_side_mfd@@YGXW4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA DD 03af7H ; `select_next_comanche_side_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_previous_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W42@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_previous_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W42@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA DD 03a88H ; `get_previous_main_mfd_mode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_next_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W42@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_next_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W42@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA DD 03a0bH ; `get_next_main_mfd_mode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_next_side_mfd_mode@@YG?AW4COMANCHE_SIDE_MFD_MODES@@W42@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_next_side_mfd_mode@@YG?AW4COMANCHE_SIDE_MFD_MODES@@W42@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA DD 039ebH ; `get_next_side_mfd_mode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CI@EEGMGJJO@comanche_side_mfd_mode_valid?5?$CIm@
CONST	SEGMENT
??_C@_0CI@EEGMGJJO@comanche_side_mfd_mode_valid?5?$CIm@ DB 'comanche_side'
	DB	'_mfd_mode_valid (mfd_mode)', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??select_comanche_side_mfd_mode@@YGXW4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_comanche_side_mfd_mode@@YGXW4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA DD 039c2H ; `select_comanche_side_mfd_mode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BN@OAODKMFN@default_mfd_mode?5?$CB?$DN?5mfd_mode@
CONST	SEGMENT
??_C@_0BN@OAODKMFN@default_mfd_mode?5?$CB?$DN?5mfd_mode@ DB 'default_mfd_'
	DB	'mode != mfd_mode', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCHAPOBD@?$CFs?5?$DN?5?$CFs@
CONST	SEGMENT
??_C@_07DCHAPOBD@?$CFs?5?$DN?5?$CFs@ DB '%s = %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FGMPFPHJ@comanche_main_mfd_mode_valid?5?$CIm@
CONST	SEGMENT
??_C@_0CI@FGMPFPHJ@comanche_main_mfd_mode_valid?5?$CIm@ DB 'comanche_main'
	DB	'_mfd_mode_valid (mfd_mode)', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA DD 0398fH ; `select_comanche_main_mfd_mode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_side_mfd_damage@@YGHW4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_side_mfd_damage@@YGHW4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA DD 0395dH ; `get_side_mfd_damage'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_main_mfd_damage@@YGHW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_main_mfd_damage@@YGHW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA DD 0392bH ; `get_main_mfd_damage'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DA@KGKPBMFE@comanche_side_mfd_location_vali@
CONST	SEGMENT
??_C@_0DA@KGKPBMFE@comanche_side_mfd_location_vali@ DB 'comanche_side_mfd'
	DB	'_location_valid (mfd_location)', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_default_side_mfd_mode@@YG?AW4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_default_side_mfd_mode@@YG?AW4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA DD 038f9H ; `get_default_side_mfd_mode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_default_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_default_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA DD 038c7H ; `get_default_main_mfd_mode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@ DB 'Invalid EO senso'
	DB	'r = %d', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_comanche_main_mfd_has_focus@@YGHW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_comanche_main_mfd_has_focus@@YGHW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA DD 0385bH ; `get_comanche_main_mfd_has_focus'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CE@ENKIGGJP@comanche_main_mfd_mode_valid?5?$CIm@
CONST	SEGMENT
??_C@_0CE@ENKIGGJP@comanche_main_mfd_mode_valid?5?$CIm@ DB 'comanche_main'
	DB	'_mfd_mode_valid (mode)', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_overlaid_main_mfd@@YGXPAUSCREEN@@W4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_overlaid_main_mfd@@YGXPAUSCREEN@@W4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA DD 03565H ; `draw_overlaid_main_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BH@KFJLEDAI@Invalid?5view?5mode?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BH@KFJLEDAI@Invalid?5view?5mode?5?$DN?5?$CFd@ DB 'Invalid view mod'
	DB	'e = %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02LLHJKEJF@s2@
CONST	SEGMENT
??_C@_02LLHJKEJF@s2@ DB 's2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JAFEPHFG@s1@
CONST	SEGMENT
??_C@_02JAFEPHFG@s1@ DB 's1', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??set_comanche_text_display_text@@YGXPAD0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_comanche_text_display_text@@YGXPAD0@Z@4JA DD 033c3H ; `set_comanche_text_display_text'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_comanche_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_comanche_mfd@@YGXXZ@4JA DD 03208H	; `draw_comanche_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DK@CBFDBCCM@?$CInum_side_weapon_line_points_wi@
CONST	SEGMENT
??_C@_0DK@CBFDBCCM@?$CInum_side_weapon_line_points_wi@ DB '(num_side_weap'
	DB	'on_line_points_without_stub_wings & 1) == 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@BMJDMBBE@num_side_weapon_line_points_wit@
CONST	SEGMENT
??_C@_0DD@BMJDMBBE@num_side_weapon_line_points_wit@ DB 'num_side_weapon_l'
	DB	'ine_points_without_stub_wings > 0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@IOPOLEHA@?$CInum_side_weapon_line_points_wi@
CONST	SEGMENT
??_C@_0DH@IOPOLEHA@?$CInum_side_weapon_line_points_wi@ DB '(num_side_weap'
	DB	'on_line_points_with_stub_wings & 1) == 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@MADCCJGI@num_side_weapon_line_points_wit@
CONST	SEGMENT
??_C@_0DA@MADCCJGI@num_side_weapon_line_points_wit@ DB 'num_side_weapon_l'
	DB	'ine_points_with_stub_wings > 0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@NKPFIOED@?$CInum_main_weapon_line_points_wi@
CONST	SEGMENT
??_C@_0DK@NKPFIOED@?$CInum_main_weapon_line_points_wi@ DB '(num_main_weap'
	DB	'on_line_points_without_stub_wings & 1) == 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@IMKGINEB@num_main_weapon_line_points_wit@
CONST	SEGMENT
??_C@_0DD@IMKGINEB@num_main_weapon_line_points_wit@ DB 'num_main_weapon_l'
	DB	'ine_points_without_stub_wings > 0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@OOPGJMJB@?$CInum_main_weapon_line_points_wi@
CONST	SEGMENT
??_C@_0DH@OOPGJMJB@?$CInum_main_weapon_line_points_wi@ DB '(num_main_weap'
	DB	'on_line_points_with_stub_wings & 1) == 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@KDAIMOAB@num_main_weapon_line_points_wit@
CONST	SEGMENT
??_C@_0DA@KDAIMOAB@num_main_weapon_line_points_wit@ DB 'num_main_weapon_l'
	DB	'ine_points_with_stub_wings > 0', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??initialise_comanche_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??initialise_comanche_mfd@@YGXXZ@4JA DD 030e1H ; `initialise_comanche_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0M@CPFKEDIA@text_screen@
CONST	SEGMENT
??_C@_0M@CPFKEDIA@text_screen@ DB 'text_screen', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_text_display@@YGXPAUSCREEN@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_text_display@@YGXPAUSCREEN@@@Z@4JA DD 0306cH ; `draw_text_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BL@JBAKPIAB@Invalid?5side?5MFD?5mode?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BL@JBAKPIAB@Invalid?5side?5MFD?5mode?5?$DN?5?$CFd@ DB 'Invalid sid'
	DB	'e MFD mode = %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@KFPJDBMG@comanche_side_mfd_location_vali@
CONST	SEGMENT
??_C@_0CM@KFPJDBMG@comanche_side_mfd_location_vali@ DB 'comanche_side_mfd'
	DB	'_location_valid (location)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MAAALHOP@comanche_side_mfd_mode_valid?5?$CIm@
CONST	SEGMENT
??_C@_0CE@MAAALHOP@comanche_side_mfd_mode_valid?5?$CIm@ DB 'comanche_side'
	DB	'_mfd_mode_valid (mode)', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_side_mfd@@YGXPAUSCREEN@@W4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_side_mfd@@YGXPAUSCREEN@@W4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA DD 03014H ; `draw_side_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BL@EJABPDDO@Invalid?5main?5MFD?5mode?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BL@EJABPDDO@Invalid?5main?5MFD?5mode?5?$DN?5?$CFd@ DB 'Invalid mai'
	DB	'n MFD mode = %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@LICEEPAH@comanche_main_mfd_location_vali@
CONST	SEGMENT
??_C@_0CM@LICEEPAH@comanche_main_mfd_location_vali@ DB 'comanche_main_mfd'
	DB	'_location_valid (location)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@FODDHBHE@comanche_main_mfd_mode_valid?5?$CI?$CK@
CONST	SEGMENT
??_C@_0CF@FODDHBHE@comanche_main_mfd_mode_valid?5?$CI?$CK@ DB 'comanche_m'
	DB	'ain_mfd_mode_valid (*mode)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DHCAJMOH@mfd_screen@
CONST	SEGMENT
??_C@_0L@DHCAJMOH@mfd_screen@ DB 'mfd_screen', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_main_mfd@@YGXPAUSCREEN@@PAW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_main_mfd@@YGXPAUSCREEN@@PAW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA DD 02f72H ; `draw_main_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CL@NLIKEJAC@TIME?5?5?3MT?$DN?$CF02d?3?$CF02d?3?$CF02d?5MD?$DN?$CF02@
CONST	SEGMENT
??_C@_0CL@NLIKEJAC@TIME?5?5?3MT?$DN?$CF02d?3?$CF02d?3?$CF02d?5MD?$DN?$CF02@ DB 'T'
	DB	'IME  :MT=%02d:%02d:%02d MD=%02d:%02d:%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MIBJHEEL@COUNT?5?3Kills?$DN?$CFd?5Losses?$DN?$CFd@
CONST	SEGMENT
??_C@_0BK@MIBJHEEL@COUNT?5?3Kills?$DN?$CFd?5Losses?$DN?$CFd@ DB 'COUNT :K'
	DB	'ills=%d Losses=%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09HDLDOKLK@END?5?5?5?3?$CFs@
CONST	SEGMENT
??_C@_09HDLDOKLK@END?5?5?5?3?$CFs@ DB 'END   :%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MDEJFDEL@START?5?3?$CFs@
CONST	SEGMENT
??_C@_09MDEJFDEL@START?5?3?$CFs@ DB 'START :%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NFLHCPML@STATUS?3?$CFs@
CONST	SEGMENT
??_C@_09NFLHCPML@STATUS?3?$CFs@ DB 'STATUS:%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MMJDMDOM@OBJECT?3?$CFs@
CONST	SEGMENT
??_C@_09MMJDMDOM@OBJECT?3?$CFs@ DB 'OBJECT:%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FCABHDEH@TYPE?5?5?3?$CFs@
CONST	SEGMENT
??_C@_09FCABHDEH@TYPE?5?5?3?$CFs@ DB 'TYPE  :%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07PPFPLHID@MISSION@
CONST	SEGMENT
??_C@_07PPFPLHID@MISSION@ DB 'MISSION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@FHGBBPHP@get_local_entity_int_value?5?$CItas@
CONST	SEGMENT
??_C@_0DJ@FHGBBPHP@get_local_entity_int_value?5?$CItas@ DB 'get_local_ent'
	DB	'ity_int_value (task, INT_TYPE_VISIBLE_TASK)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JBFLAFMH@FORMATION?3?$CFs@
CONST	SEGMENT
??_C@_0N@JBFLAFMH@FORMATION?3?$CFs@ DB 'FORMATION:%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06IAHIIHDD@?$CFc1?9?$CFd@
CONST	SEGMENT
??_C@_06IAHIIHDD@?$CFc1?9?$CFd@ DB '%c1-%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EKFLINLD@?$CFc?$CFs?51?9?$CFd@
CONST	SEGMENT
??_C@_09EKFLINLD@?$CFc?$CFs?51?9?$CFd@ DB '%c%s 1-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JGJHKNML@?$CFc1?9?$CFd?5?$CFs@
CONST	SEGMENT
??_C@_09JGJHKNML@?$CFc1?9?$CFd?5?$CFs@ DB '%c1-%d %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CPCKCPHJ@?$CFc?$CFs?51?9?$CFd?5?$CFs@
CONST	SEGMENT
??_C@_0N@CPCKCPHJ@?$CFc?$CFs?51?9?$CFd?5?$CFs@ DB '%c%s 1-%d %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03DKEJHHJP@?$CFs?3@
CONST	SEGMENT
??_C@_03DKEJHHJP@?$CFs?3@ DB '%s:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07MLNBPDHK@company@
CONST	SEGMENT
??_C@_07MLNBPDHK@company@ DB 'company', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DBEHAMGN@FLIGHT?5GROUP@
CONST	SEGMENT
??_C@_0N@DBEHAMGN@FLIGHT?5GROUP@ DB 'FLIGHT GROUP', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA DD 02d7aH ; `draw_mission_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CA@NPMPDHNJ@?5?5?5?5?5?5?5?$DM?$CF03d?0?$CF03d?$DO?5?$CF6?41fKm?5?$CF3d?$HP@
CONST	SEGMENT
??_C@_0CA@NPMPDHNJ@?5?5?5?5?5?5?5?$DM?$CF03d?0?$CF03d?$DO?5?$CF6?41fKm?5?$CF3d?$HP@ DB ' '
	DB	'      <%03d,%03d> %6.1fKm %3d', 07fH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08OAGMDKAF@position@
CONST	SEGMENT
??_C@_08OAGMDKAF@position@ DB 'position', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA DD 02d4dH ; `print_target_position'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05DNIIFBMG@?$CFs?5?$CFs@
CONST	SEGMENT
??_C@_05DNIIFBMG@?$CFs?5?$CFs@ DB '%s %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HOHPNJLC@buffer@
CONST	SEGMENT
??_C@_06HOHPNJLC@buffer@ DB 'buffer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02LFNMGJAP@en@
CONST	SEGMENT
??_C@_02LFNMGJAP@en@ DB 'en', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA DD 02d1cH ; `get_player_rank_and_name'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05KEIIKJGB@?$CF?431s@
CONST	SEGMENT
??_C@_05KEIIKJGB@?$CF?431s@ DB '%.31s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01LKDEMHDF@s@
CONST	SEGMENT
??_C@_01LKDEMHDF@s@ DB 's', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??print_mono_font_max_length_string@@YGXPAD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??print_mono_font_max_length_string@@YGXPAD@Z@4JA DD 02d0cH ; `print_mono_font_max_length_string'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_flight_display_side_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_flight_display_side_mfd@@YGXXZ@4JA DD 02cf5H ; `draw_flight_display_side_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA DD 02ce2H ; `draw_flight_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_03NJMPCKOA@?$CFd0@
CONST	SEGMENT
??_C@_03NJMPCKOA@?$CFd0@ DB '%d0', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA DD 02980H	; `draw_pitch_ladder'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04OCCELDNI@?$CF04d@
CONST	SEGMENT
??_C@_04OCCELDNI@?$CF04d@ DB '%04d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02LLHBHPMO@LB@
CONST	SEGMENT
??_C@_02LLHBHPMO@LB@ DB 'LB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02NEDDHJED@TG@
CONST	SEGMENT
??_C@_02NEDDHJED@TG@ DB 'TG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MIKLMMJE@TQ@
CONST	SEGMENT
??_C@_02MIKLMMJE@TQ@ DB 'TQ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MFICFPOF@NG@
CONST	SEGMENT
??_C@_02MFICFPOF@NG@ DB 'NG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MAABNLHD@NP@
CONST	SEGMENT
??_C@_02MAABNLHD@NP@ DB 'NP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PCDHLJPB@NR@
CONST	SEGMENT
??_C@_02PCDHLJPB@NR@ DB 'NR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BAMMPCGJ@SPU?5?$CF03d?$CF?$CF@
CONST	SEGMENT
??_C@_0L@BAMMPCGJ@SPU?5?$CF03d?$CF?$CF@ DB 'SPU %03d%%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BAGGPIOL@?5?$CFs?5?5?$CF03d?$CF?$CF@
CONST	SEGMENT
??_C@_0M@BAGGPIOL@?5?$CFs?5?5?$CF03d?$CF?$CF@ DB ' %s  %03d%%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09IBBIICJN@?5?$CFs?5?5FLY?5@
CONST	SEGMENT
??_C@_09IBBIICJN@?5?$CFs?5?5FLY?5@ DB ' %s  FLY ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MEJLMDNK@?5?$CFs?5?5IDLE@
CONST	SEGMENT
??_C@_09MEJLMDNK@?5?$CFs?5?5IDLE@ DB ' %s  IDLE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PEMPOEMF@?5?$CFs?5?5OFF?5@
CONST	SEGMENT
??_C@_09PEMPOEMF@?5?$CFs?5?5OFF?5@ DB ' %s  OFF ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HPNMMHPJ@?$CF03d?$CF?$CF@
CONST	SEGMENT
??_C@_06HPNMMHPJ@?$CF03d?$CF?$CF@ DB '%03d%%', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04MJEFHDBD@FLY?5@
CONST	SEGMENT
??_C@_04MJEFHDBD@FLY?5@ DB 'FLY ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IMMGDCFE@IDLE@
CONST	SEGMENT
??_C@_04IMMGDCFE@IDLE@ DB 'IDLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LMJCBFEL@OFF?5@
CONST	SEGMENT
??_C@_04LMJCBFEL@OFF?5@ DB 'OFF ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08PLAGFMEO@THROTTLE@
CONST	SEGMENT
??_C@_08PLAGFMEO@THROTTLE@ DB 'THROTTLE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MGEFOJJP@?$CF04d?5lb@
CONST	SEGMENT
??_C@_07MGEFOJJP@?$CF04d?5lb@ DB '%04d lb', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HFKNNLAF@FUEL?5QTY@
CONST	SEGMENT
??_C@_08HFKNNLAF@FUEL?5QTY@ DB 'FUEL QTY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09KNIBDCOL@OIL?5PRESS@
CONST	SEGMENT
??_C@_09KNIBDCOL@OIL?5PRESS@ DB 'OIL PRESS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09DAHIHAFG@HYD?5PRESS@
CONST	SEGMENT
??_C@_09DAHIHAFG@HYD?5PRESS@ DB 'HYD PRESS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BMBAGHMP@DMGD@
CONST	SEGMENT
??_C@_04BMBAGHMP@DMGD@ DB 'DMGD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LICEJPGO@RADAR?5WARN@
CONST	SEGMENT
??_C@_0L@LICEJPGO@RADAR?5WARN@ DB 'RADAR WARN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05JNPIHJOC@COMMS@
CONST	SEGMENT
??_C@_05JNPIHJOC@COMMS@ DB 'COMMS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08LDOFABDJ@NAV?5COMP@
CONST	SEGMENT
??_C@_08LDOFABDJ@NAV?5COMP@ DB 'NAV COMP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09GHHHIMHM@RADAR?5JAM@
CONST	SEGMENT
??_C@_09GHHHIMHM@RADAR?5JAM@ DB 'RADAR JAM', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OPLGMBDG@LASER?5DES@
CONST	SEGMENT
??_C@_09OPLGMBDG@LASER?5DES@ DB 'LASER DES', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??print_side_mfd_system_message@@YGMPAD0HM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??print_side_mfd_system_message@@YGMPAD0HM@Z@4JA DD 024b6H ; `print_side_mfd_system_message'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0N@MMJNGGCF@OIL?5PRESSURE@
CONST	SEGMENT
??_C@_0N@MMJNGGCF@OIL?5PRESSURE@ DB 'OIL PRESSURE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@
CONST	SEGMENT
??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@ DB 'HYDRAULIC PRESSURE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GEIAFJFB@R?5ENGINE@
CONST	SEGMENT
??_C@_08GEIAFJFB@R?5ENGINE@ DB 'R ENGINE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KMHDAHAO@SPU@
CONST	SEGMENT
??_C@_03KMHDAHAO@SPU@ DB 'SPU', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08ICMALC@L?5ENGINE@
CONST	SEGMENT
??_C@_08ICMALC@L?5ENGINE@ DB 'L ENGINE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MCBINMPD@TAIL?5ROTOR@
CONST	SEGMENT
??_C@_0L@MCBINMPD@TAIL?5ROTOR@ DB 'TAIL ROTOR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OHKEFPKJ@DAMAGED@
CONST	SEGMENT
??_C@_07OHKEFPKJ@DAMAGED@ DB 'DAMAGED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FFIGCBMA@MAIN?5ROTOR@
CONST	SEGMENT
??_C@_0L@FFIGCBMA@MAIN?5ROTOR@ DB 'MAIN ROTOR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LMAEBBOE@STABILISER@
CONST	SEGMENT
??_C@_0L@LMAEBBOE@STABILISER@ DB 'STABILISER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04IDKCLELC@PNVS@
CONST	SEGMENT
??_C@_04IDKCLELC@PNVS@ DB 'PNVS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@
CONST	SEGMENT
??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@ DB 'RADAR WARNING SYSTEM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OEDGDHNF@COMMUNICATIONS@
CONST	SEGMENT
??_C@_0P@OEDGDHNF@COMMUNICATIONS@ DB 'COMMUNICATIONS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@
CONST	SEGMENT
??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@ DB 'NAVIGATION COMPUTER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MILGCPFO@IR?5JAMMER@
CONST	SEGMENT
??_C@_09MILGCPFO@IR?5JAMMER@ DB 'IR JAMMER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JDBOFCJG@RADAR?5JAMMER@
CONST	SEGMENT
??_C@_0N@JDBOFCJG@RADAR?5JAMMER@ DB 'RADAR JAMMER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@
CONST	SEGMENT
??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@ DB 'LASER DESIGNATOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05IHELJBBC@RADAR@
CONST	SEGMENT
??_C@_05IHELJBBC@RADAR@ DB 'RADAR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OOEBCMBF@FAIL@
CONST	SEGMENT
??_C@_04OOEBCMBF@FAIL@ DB 'FAIL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GIPFHKNO@OK@
CONST	SEGMENT
??_C@_02GIPFHKNO@OK@ DB 'OK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07FPLKDJGL@warning@
CONST	SEGMENT
??_C@_07FPLKDJGL@warning@ DB 'warning', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09FJJPPKDN@equipment@
CONST	SEGMENT
??_C@_09FJJPPKDN@equipment@ DB 'equipment', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??print_main_mfd_system_message@@YGMPAD0HM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??print_main_mfd_system_message@@YGMPAD0HM@Z@4JA DD 0243cH ; `print_main_mfd_system_message'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06MBEHBGFJ@FLRxXX@
CONST	SEGMENT
??_C@_06MBEHBGFJ@FLRxXX@ DB 'FLRxXX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EGADPGME@FLRx?$CF02d@
CONST	SEGMENT
??_C@_08EGADPGME@FLRx?$CF02d@ DB 'FLRx%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JNIOEKKK@CHFxXX@
CONST	SEGMENT
??_C@_06JNIOEKKK@CHFxXX@ DB 'CHFxXX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BLEPAFKM@CHFx?$CF02d@
CONST	SEGMENT
??_C@_08BLEPAFKM@CHFx?$CF02d@ DB 'CHFx%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_weapon_display_side_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_weapon_display_side_mfd@@YGXXZ@4JA DD 01fc5H ; `draw_weapon_display_side_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BC@CEPGDBDN@ROCKET?5SALVOx?$CF02d@
CONST	SEGMENT
??_C@_0BC@CEPGDBDN@ROCKET?5SALVOx?$CF02d@ DB 'ROCKET SALVOx%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FAFOJLKK@ROCKET?5SALVOxALL@
CONST	SEGMENT
??_C@_0BB@FAFOJLKK@ROCKET?5SALVOxALL@ DB 'ROCKET SALVOxALL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05HGDIBGHI@x?$CF02d@
CONST	SEGMENT
??_C@_05HGDIBGHI@x?$CF02d@ DB 'x%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MPAMKEAB@?$CFsx?$CF03d@
CONST	SEGMENT
??_C@_07MPAMKEAB@?$CFsx?$CF03d@ DB '%sx%03d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04FACIIFCM@FxXX@
CONST	SEGMENT
??_C@_04FACIIFCM@FxXX@ DB 'FxXX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08EHCDGGFB@FLARExXX@
CONST	SEGMENT
??_C@_08EHCDGGFB@FLARExXX@ DB 'FLARExXX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HNENCIOG@Fx?$CF02d@
CONST	SEGMENT
??_C@_06HNENCIOG@Fx?$CF02d@ DB 'Fx%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NONPILJE@FLAREx?$CF02d@
CONST	SEGMENT
??_C@_0L@NONPILJE@FLAREx?$CF02d@ DB 'FLAREx%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04JIMIAKFM@CxXX@
CONST	SEGMENT
??_C@_04JIMIAKFM@CxXX@ DB 'CxXX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08FGBJBHLJ@CHAFFxXX@
CONST	SEGMENT
??_C@_08FGBJBHLJ@CHAFFxXX@ DB 'CHAFFxXX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CPHFAHEB@Cx?$CF02d@
CONST	SEGMENT
??_C@_06CPHFAHEB@Cx?$CF02d@ DB 'Cx%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GPHKKCOA@CHAFFx?$CF02d@
CONST	SEGMENT
??_C@_0L@GPHKKCOA@CHAFFx?$CF02d@ DB 'CHAFFx%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03CBNMOHKF@C?1M@
CONST	SEGMENT
??_C@_03CBNMOHKF@C?1M@ DB 'C/M', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NHPMNECN@ARM@
CONST	SEGMENT
??_C@_03NHPMNECN@ARM@ DB 'ARM', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_weapon_display_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_weapon_display_mfd@@YGXXZ@4JA DD 01b54H ; `draw_weapon_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06DPNNIDIB@F?3?$CF02d@
CONST	SEGMENT
??_C@_06DPNNIDIB@F?3?$CF02d@ DB 'F:%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GBDFBFJK@F?3XX@
CONST	SEGMENT
??_C@_04GBDFBFJK@F?3XX@ DB 'F:XX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@
CONST	SEGMENT
??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@ DB 'FLARE:%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HGDOPGOH@FLARE?3XX@
CONST	SEGMENT
??_C@_08HGDOPGOH@FLARE?3XX@ DB 'FLARE:XX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GNOFKMCG@C?3?$CF02d@
CONST	SEGMENT
??_C@_06GNOFKMCG@C?3?$CF02d@ DB 'C:%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KJNFJKOK@C?3XX@
CONST	SEGMENT
??_C@_04KJNFJKOK@C?3XX@ DB 'C:XX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@
CONST	SEGMENT
??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@ DB 'CHAFF:%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHAEIHAP@CHAFF?3XX@
CONST	SEGMENT
??_C@_08GHAEIHAP@CHAFF?3XX@ DB 'CHAFF:XX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JCJCOOPL@RD?5OFF@
CONST	SEGMENT
??_C@_06JCJCOOPL@RD?5OFF@ DB 'RD OFF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BHAGAOGB@RD?5ON@
CONST	SEGMENT
??_C@_05BHAGAOGB@RD?5ON@ DB 'RD ON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JNKFDAHI@RD?5XXX@
CONST	SEGMENT
??_C@_06JNKFDAHI@RD?5XXX@ DB 'RD XXX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@
CONST	SEGMENT
??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@ DB 'RD JAM OFF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OKIOJJOP@RD?5JAM?5ON@
CONST	SEGMENT
??_C@_09OKIOJJOP@RD?5JAM?5ON@ DB 'RD JAM ON', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@
CONST	SEGMENT
??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@ DB 'RD JAM XXX', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06CCMEMHEJ@IR?5OFF@
CONST	SEGMENT
??_C@_06CCMEMHEJ@IR?5OFF@ DB 'IR OFF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JBLHJOBL@IR?5ON@
CONST	SEGMENT
??_C@_05JBLHJOBL@IR?5ON@ DB 'IR ON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNPDBJMK@IR?5XXX@
CONST	SEGMENT
??_C@_06CNPDBJMK@IR?5XXX@ DB 'IR XXX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@
CONST	SEGMENT
??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@ DB 'IR JAM OFF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OKBKNIAL@IR?5JAM?5ON@
CONST	SEGMENT
??_C@_09OKBKNIAL@IR?5JAM?5ON@ DB 'IR JAM ON', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DADPKEOI@IR?5JAM?5XXX@
CONST	SEGMENT
??_C@_0L@DADPKEOI@IR?5JAM?5XXX@ DB 'IR JAM XXX', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@
CONST	SEGMENT
??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@ DB 'LS MSL:%.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@
CONST	SEGMENT
??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@ DB 'RF MSL:%.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@
CONST	SEGMENT
??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@ DB 'IR MSL:%.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA DD 018aeH ; `draw_aircraft_survivability_equipment_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@
CONST	SEGMENT
??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@ DB '(threa'
	DB	't_type == THREAT_TYPE_RF_MISSILE) || (threat_type == THREAT_T'
	DB	'YPE_IR_MISSILE) || (threat_type == THREAT_TYPE_LASER_MISSILE)'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEKOLKIL@source@
CONST	SEGMENT
??_C@_06OEKOLKIL@source@ DB 'source', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA DD 01847H ; `get_closest_missile'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_03DIMJBCMI@NAV@
CONST	SEGMENT
??_C@_03DIMJBCMI@NAV@ DB 'NAV', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DBNGLLAD@TGT@
CONST	SEGMENT
??_C@_03DBNGLLAD@TGT@ DB 'TGT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IJFFJMFM@25Km@
CONST	SEGMENT
??_C@_04IJFFJMFM@25Km@ DB '25Km', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PJCLBGLO@10Km@
CONST	SEGMENT
??_C@_04PJCLBGLO@10Km@ DB '10Km', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LFNCFPLL@5Km@
CONST	SEGMENT
??_C@_03LFNCFPLL@5Km@ DB '5Km', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CIAFGHAC@2Km@
CONST	SEGMENT
??_C@_03CIAFGHAC@2Km@ DB '2Km', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KNFJGCC@AIR@
CONST	SEGMENT
??_C@_03KNFJGCC@AIR@ DB 'AIR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DGGJGKKM@GND@
CONST	SEGMENT
??_C@_03DGGJGKKM@GND@ DB 'GND', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05BDMPLNHB@HIDSS@
CONST	SEGMENT
??_C@_05BDMPLNHB@HIDSS@ DB 'HIDSS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04DBODHFDK@TADS@
CONST	SEGMENT
??_C@_04DBODHFDK@TADS@ DB 'TADS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JKJFCLEN@FCR@
CONST	SEGMENT
??_C@_03JKJFCLEN@FCR@ DB 'FCR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06LLLMNJMM@NO?5ACQ@
CONST	SEGMENT
??_C@_06LLLMNJMM@NO?5ACQ@ DB 'NO ACQ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@GBKBAHOG@comanche_main_mfd_location_vali@
CONST	SEGMENT
??_C@_0DA@GBKBAHOG@comanche_main_mfd_location_vali@ DB 'comanche_main_mfd'
	DB	'_location_valid (mfd_location)', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA DD 0149cH ; `draw_tactical_situation_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_heading_scale_tsd@@YGXMH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_heading_scale_tsd@@YGXMH@Z@4JA DD 0137dH ; `draw_heading_scale_tsd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BD@PMDJPBGC@?$CFc?$CF04d?5M?5?5?5?$CF3d?5KPH@
CONST	SEGMENT
??_C@_0BD@PMDJPBGC@?$CFc?$CF04d?5M?5?5?5?$CF3d?5KPH@ DB '%c%04d M   %3d K'
	DB	'PH', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CPHGBHEJ@CP?1G?5ID?4?4?4@
CONST	SEGMENT
??_C@_0L@CPHGBHEJ@CP?1G?5ID?4?4?4@ DB 'CP/G ID...', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09ICGCKLLB@LOW?5LIGHT@
CONST	SEGMENT
??_C@_09ICGCKLLB@LOW?5LIGHT@ DB 'LOW LIGHT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07FGFCMGOE@?$CF3d?5KTS@
CONST	SEGMENT
??_C@_07FGFCMGOE@?$CF3d?5KTS@ DB '%3d KTS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BLLIFECI@?$CF3d?5FT@
CONST	SEGMENT
??_C@_06BLLIFECI@?$CF3d?5FT@ DB '%3d FT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S@
CONST	SEGMENT
??_C@_01CPLAODJH@S@ DB 'S', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04GGBPDDBN@?$CF?41f@
CONST	SEGMENT
??_C@_04GGBPDDBN@?$CF?41f@ DB '%.1f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02ONPABID@LO@
CONST	SEGMENT
??_C@_02ONPABID@LO@ DB 'LO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08JFLECGBM@LO?5LIGHT@
CONST	SEGMENT
??_C@_08JFLECGBM@LO?5LIGHT@ DB 'LO LIGHT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NFBNOOEB@DVO@
CONST	SEGMENT
??_C@_03NFBNOOEB@DVO@ DB 'DVO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03ENJJJDDH@DTV@
CONST	SEGMENT
??_C@_03ENJJJDDH@DTV@ DB 'DTV', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MIGKMLBH@FLIR@
CONST	SEGMENT
??_C@_04MIGKMLBH@FLIR@ DB 'FLIR', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA DD 0d7eH ; `draw_2d_eo_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA DD 0cdbH ; `draw_full_screen_3d_eo_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
CONST	SEGMENT
??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@ DB 'Invalid target'
	DB	' acquisition system = %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
CONST	SEGMENT
??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@ DB '('
	DB	'day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT'
	DB	'_TYPES)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
CONST	SEGMENT
??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@ DB '(weather_'
	DB	'mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LA'
	DB	'ST)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
CONST	SEGMENT
??_C@_0BF@MDEHLDP@eo_3d_texture_screen@ DB 'eo_3d_texture_screen', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KMMHFIEO@eo@
CONST	SEGMENT
??_C@_02KMMHFIEO@eo@ DB 'eo', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA DD 0c1fH ; `draw_3d_eo_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05EJJKHDCK@ENEMY@
CONST	SEGMENT
??_C@_05EJJKHDCK@ENEMY@ DB 'ENEMY', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA DD 09fdH	; `draw_air_radar_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04MGKDMHFC@MARK@
CONST	SEGMENT
??_C@_04MGKDMHFC@MARK@ DB 'MARK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PKDHFCJF@HIGH@
CONST	SEGMENT
??_C@_04PKDHFCJF@HIGH@ DB 'HIGH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FFIBGFCJ@MED@
CONST	SEGMENT
??_C@_03FFIBGFCJ@MED@ DB 'MED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06HMBFJLMK@MEDIUM@
CONST	SEGMENT
??_C@_06HMBFJLMK@MEDIUM@ DB 'MEDIUM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IBEFMGAI@LOW@
CONST	SEGMENT
??_C@_03IBEFMGAI@LOW@ DB 'LOW', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NIFPGLBG@ALL@
CONST	SEGMENT
??_C@_03NIFPGLBG@ALL@ DB 'ALL', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA DD 08bfH ; `draw_ground_radar_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DD@KDAGALDF@get_local_entity_type?5?$CItarget?$CJ?5@
CONST	SEGMENT
??_C@_0DD@KDAGALDF@get_local_entity_type?5?$CItarget?$CJ?5@ DB 'get_local'
	DB	'_entity_type (target) == ENTITY_TYPE_CITY', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA DD 0891H ; `draw_ground_radar_clutter'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@
CONST	SEGMENT
??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@ DB '('
	DB	'target_symbol_type >= 0) && (target_symbol_type < NUM_TARGET_'
	DB	'SYMBOL_TYPES)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@
CONST	SEGMENT
??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@ DB '!get_local'
	DB	'_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IIPCKJML@source_position@
CONST	SEGMENT
??_C@_0BA@IIPCKJML@source_position@ DB 'source_position', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JJLAMBGK@target@
CONST	SEGMENT
??_C@_06JJLAMBGK@target@ DB 'target', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA DD 07e2H ; `draw_radar_target_symbol'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06GPMJGLEM@MARKED@
CONST	SEGMENT
??_C@_06GPMJGLEM@MARKED@ DB 'MARKED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KODELPLK@LOCKED@
CONST	SEGMENT
??_C@_06KODELPLK@LOCKED@ DB 'LOCKED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LMMJFDCN@AUTO@
CONST	SEGMENT
??_C@_04LMMJFDCN@AUTO@ DB 'AUTO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06HCPKJKPH@NO?5LOS@
CONST	SEGMENT
??_C@_06HCPKJKPH@NO?5LOS@ DB 'NO LOS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OMCABMNO@?$CF?41fKm@
CONST	SEGMENT
??_C@_06OMCABMNO@?$CF?41fKm@ DB '%.1fKm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NGNKAJPJ@?$CFdm@
CONST	SEGMENT
??_C@_03NGNKAJPJ@?$CFdm@ DB '%dm', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05EMNNHGFM@radar@
CONST	SEGMENT
??_C@_05EMNNHGFM@radar@ DB 'radar', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA DD 06fcH ; `display_radar_target_details'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_03MAMPKPPK@XXX@
CONST	SEGMENT
??_C@_03MAMPKPPK@XXX@ DB 'XXX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06NBEADFGO@?$CF?40fKm@
CONST	SEGMENT
??_C@_06NBEADFGO@?$CF?40fKm@ DB '%.0fKm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LIPABGF@?$CF?40fm@
CONST	SEGMENT
??_C@_05LIPABGF@?$CF?40fm@ DB '%.0fm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MDNKIPAL@?$CFd?5lb@
CONST	SEGMENT
??_C@_05MDNKIPAL@?$CFd?5lb@ DB '%d lb', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KABNCBHK@?$CFd?0?$CFd@
CONST	SEGMENT
??_C@_05KABNCBHK@?$CFd?0?$CFd@ DB '%d,%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@
CONST	SEGMENT
??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@ DB '--:--:--', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
CONST	SEGMENT
??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@ DB '%02d:%02d:%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BAOIPBEF@?9?3?9?9?4?9@
CONST	SEGMENT
??_C@_06BAOIPBEF@?9?3?9?9?4?9@ DB '-:--.-', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CFANIJPM@?$CFc?3?$CFdKm@
CONST	SEGMENT
??_C@_07CFANIJPM@?$CFc?3?$CFdKm@ DB '%c:%dKm', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EKFBJBJG@?$CFc?3?$CF?41fKm@
CONST	SEGMENT
??_C@_09EKFBJBJG@?$CFc?3?$CF?41fKm@ DB '%c:%.1fKm', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JCIGMCHD@?$CFc?3?$CFdm@
CONST	SEGMENT
??_C@_06JCIGMCHD@?$CFc?3?$CFdm@ DB '%c:%dm', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA DD 0607H ; `display_navigation_info'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04OHGLKFFN@?$CF03d@
CONST	SEGMENT
??_C@_04OHGLKFFN@?$CF03d@ DB '%03d', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_heading_scale@@YGXMH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_heading_scale@@YGXMH@Z@4JA DD 0516H ; `draw_heading_scale'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04HPNJOLEN@?$CF3do@
CONST	SEGMENT
??_C@_04HPNJOLEN@?$CF3do@ DB '%3do', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OGKJMPGK@?$CF02d@
CONST	SEGMENT
??_C@_04OGKJMPGK@?$CF02d@ DB '%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GOOLIKIF@?$CF3d@
CONST	SEGMENT
??_C@_03GOOLIKIF@?$CF3d@ DB '%3d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CBDEGOCN@j@
CONST	SEGMENT
??_C@_01CBDEGOCN@j@ DB 'j', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01KBJDNOO@i@
CONST	SEGMENT
??_C@_01KBJDNOO@i@ DB 'i', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\gunships\avionics\comanche\c'
	DB	'm_mfd.c', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z@4JA DD 02dbH ; `transform_mfd_screen_co_ords_to_mfd_texture_co_ords'::`1'::__LINE__Var
_DATA	ENDS
_DATA	SEGMENT
?comanche_main_mfd_mode_names@@3PAPADA DD FLAT:??_C@_0BL@LMEENCLB@COMANCHE_MAIN_MFD_MODE_OFF@ ; comanche_main_mfd_mode_names
	DD	FLAT:??_C@_0BP@OBPLLEL@COMANCHE_MAIN_MFD_MODE_DAMAGED@
	DD	FLAT:??_C@_0CE@BAGKBDCO@COMANCHE_MAIN_MFD_MODE_GROUND_R@
	DD	FLAT:??_C@_0CB@NPPLLCFE@COMANCHE_MAIN_MFD_MODE_AIR_RADA@
	DD	FLAT:??_C@_0BM@FNKGDNDG@COMANCHE_MAIN_MFD_MODE_FLIR@
	DD	FLAT:??_C@_0BL@DOCFDAPP@COMANCHE_MAIN_MFD_MODE_DTV@
	DD	FLAT:??_C@_0BL@KGKBENIJ@COMANCHE_MAIN_MFD_MODE_DVO@
	DD	FLAT:??_C@_0BL@BDIHABDG@COMANCHE_MAIN_MFD_MODE_TSD@
	DD	FLAT:??_C@_0BL@GNFLJHNK@COMANCHE_MAIN_MFD_MODE_ASE@
	DD	FLAT:??_C@_0BO@LIJHGNEM@COMANCHE_MAIN_MFD_MODE_WEAPON@
	DD	FLAT:??_C@_0BO@ILDEAOBP@COMANCHE_MAIN_MFD_MODE_SYSTEM@
	DD	FLAT:??_C@_0BO@GCHGEOCB@COMANCHE_MAIN_MFD_MODE_ENGINE@
	DD	FLAT:??_C@_0BO@BGONGDEH@COMANCHE_MAIN_MFD_MODE_FLIGHT@
	DD	FLAT:??_C@_0BP@BGOEFDGB@COMANCHE_MAIN_MFD_MODE_MISSION@
?comanche_main_mfd_location_names@@3PAPADA DD FLAT:??_C@_0CF@GKLKKOOE@COMANCHE_MAIN_MFD_LOCATION_PILO@ ; comanche_main_mfd_location_names
	DD	FLAT:??_C@_0CF@NKHMIOEI@COMANCHE_MAIN_MFD_LOCATION_PILO@
	DD	FLAT:??_C@_0CI@KDPADHEA@COMANCHE_MAIN_MFD_LOCATION_CO_P@
	DD	FLAT:??_C@_0CI@BDDGBHOM@COMANCHE_MAIN_MFD_LOCATION_CO_P@
?comanche_side_mfd_mode_names@@3PAPADA DD FLAT:??_C@_0BL@LKGEDHBJ@COMANCHE_SIDE_MFD_MODE_OFF@ ; comanche_side_mfd_mode_names
	DD	FLAT:??_C@_0BP@FFAOBJHN@COMANCHE_SIDE_MFD_MODE_DAMAGED@
	DD	FLAT:??_C@_0BO@HHJLEGPD@COMANCHE_SIDE_MFD_MODE_WEAPON@
	DD	FLAT:??_C@_0BO@EEDICFKA@COMANCHE_SIDE_MFD_MODE_SYSTEM@
	DD	FLAT:??_C@_0BO@KNHKGFJO@COMANCHE_SIDE_MFD_MODE_ENGINE@
	DD	FLAT:??_C@_0BO@NJOBEIPI@COMANCHE_SIDE_MFD_MODE_FLIGHT@
?comanche_side_mfd_location_names@@3PAPADA DD FLAT:??_C@_0CF@DKDCHHAJ@COMANCHE_SIDE_MFD_LOCATION_PILO@ ; comanche_side_mfd_location_names
	DD	FLAT:??_C@_0CF@IKPEFHKF@COMANCHE_SIDE_MFD_LOCATION_PILO@
	DD	FLAT:??_C@_0CI@LBFDABKH@COMANCHE_SIDE_MFD_LOCATION_CO_P@
	DD	FLAT:??_C@_0CI@BJFCBAL@COMANCHE_SIDE_MFD_LOCATION_CO_P@
?main_mfd_mode_ptrs@@3PAPAW4COMANCHE_MAIN_MFD_MODES@@A DD FLAT:?pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A ; main_mfd_mode_ptrs
	DD	FLAT:?pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A
	DD	FLAT:?co_pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A
	DD	FLAT:?co_pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A
?opposite_main_mfd_mode_ptrs@@3PAPAW4COMANCHE_MAIN_MFD_MODES@@A DD FLAT:?pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A ; opposite_main_mfd_mode_ptrs
	DD	FLAT:?pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A
	DD	FLAT:?co_pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A
	DD	FLAT:?co_pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A
?opposite_main_mfd_locations@@3PAW4COMANCHE_MAIN_MFD_LOCATIONS@@A DD 01H ; opposite_main_mfd_locations
	DD	00H
	DD	03H
	DD	02H
?side_mfd_mode_ptrs@@3PAPAW4COMANCHE_SIDE_MFD_MODES@@A DD FLAT:?pilot_lhs_side_mfd_mode@@3W4COMANCHE_SIDE_MFD_MODES@@A ; side_mfd_mode_ptrs
	DD	FLAT:?pilot_rhs_side_mfd_mode@@3W4COMANCHE_SIDE_MFD_MODES@@A
	DD	FLAT:?co_pilot_lhs_side_mfd_mode@@3W4COMANCHE_SIDE_MFD_MODES@@A
	DD	FLAT:?co_pilot_rhs_side_mfd_mode@@3W4COMANCHE_SIDE_MFD_MODES@@A
?opposite_side_mfd_mode_ptrs@@3PAPAW4COMANCHE_SIDE_MFD_MODES@@A DD FLAT:?pilot_rhs_side_mfd_mode@@3W4COMANCHE_SIDE_MFD_MODES@@A ; opposite_side_mfd_mode_ptrs
	DD	FLAT:?pilot_lhs_side_mfd_mode@@3W4COMANCHE_SIDE_MFD_MODES@@A
	DD	FLAT:?co_pilot_rhs_side_mfd_mode@@3W4COMANCHE_SIDE_MFD_MODES@@A
	DD	FLAT:?co_pilot_lhs_side_mfd_mode@@3W4COMANCHE_SIDE_MFD_MODES@@A
?large_tsd_ase_aircraft_datum@@3PADA DB 011H		; large_tsd_ase_aircraft_datum
	DB	025H
	DB	0f8H
	DB	0f8H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+7
?large_tsd_ase_aircraft_datum_mask@@3PADA DB 013H	; large_tsd_ase_aircraft_datum_mask
	DB	027H
	DB	0f7H
	DB	0f7H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+7
?small_tsd_ase_aircraft_datum@@3PADA DB 07H		; small_tsd_ase_aircraft_datum
	DB	0fH
	DB	0fdH
	DB	0fdH
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?small_tsd_ase_aircraft_datum_mask@@3PADA DB 09H	; small_tsd_ase_aircraft_datum_mask
	DB	011H
	DB	0fcH
	DB	0fcH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?large_tsd_waypoint_marker@@3PADA DB 0cH		; large_tsd_waypoint_marker
	DB	0dH
	DB	0fbH
	DB	0faH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
?small_tsd_waypoint_marker@@3PADA DB 09H		; small_tsd_waypoint_marker
	DB	09H
	DB	0fcH
	DB	0fcH
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	ORG $+3
?large_ase_missile@@3PADA DB 0bH			; large_ase_missile
	DB	09H
	DB	0fbH
	DB	0fcH
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	ORG $+1
?large_ase_missile_mask@@3PADA DB 0dH			; large_ase_missile_mask
	DB	0bH
	DB	0faH
	DB	0fbH
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	ORG $+1
?small_ase_missile@@3PADA DB 07H			; small_ase_missile
	DB	05H
	DB	0fdH
	DB	0feH
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
?small_ase_missile_mask@@3PADA DB 09H			; small_ase_missile_mask
	DB	07H
	DB	0fcH
	DB	0fdH
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	ORG $+1
?large_right_carat@@3PADA DB 05H			; large_right_carat
	DB	09H
	DB	0fcH
	DB	0fcH
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?large_open_right_carat@@3PADA DB 05H			; large_open_right_carat
	DB	09H
	DB	0fcH
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?large_left_carat@@3PADA DB 05H				; large_left_carat
	DB	09H
	DB	00H
	DB	0fcH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+3
?large_open_left_carat@@3PADA DB 05H			; large_open_left_carat
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+7
?large_command_heading_carat@@3PADA DB 0bH		; large_command_heading_carat
	DB	06H
	DB	0fbH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	ORG $+2
?small_command_heading_carat@@3PADA DB 07H		; small_command_heading_carat
	DB	04H
	DB	0fdH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A DD 02H ; flir_light_levels
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A DD 01H ; flir_noise_levels
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
?dtv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A DD 02H ; dtv_light_levels
	DD	02H
	DD	02H
	DD	02H
	DD	01H
	DD	02H
	DD	01H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
?dtv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A DD 01H ; dtv_noise_levels
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
?dvo_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A DD 02H ; dvo_light_levels
	DD	02H
	DD	02H
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
?dvo_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A DD 01H ; dvo_noise_levels
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?get_previous_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W41@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
_previous_mfd_mode$ = -4				; size = 4
_mfd_mode$ = 8						; size = 4
_mfd_location$ = 12					; size = 4
?get_previous_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W41@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z PROC ; get_previous_main_mfd_mode, COMDAT

; 14984: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 14985: 	comanche_main_mfd_modes
; 14986: 		previous_mfd_mode;
; 14987: 
; 14988: 	ASSERT (comanche_main_mfd_mode_valid (mfd_mode));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@get_previo
  0000f	83 7d 08 0e	 cmp	 DWORD PTR _mfd_mode$[ebp], 14 ; 0000000eH
  00013	7c 18		 jl	 SHORT $LN4@get_previo
$LN5@get_previo:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_previous_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W42@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FGMPFPHJ@comanche_main_mfd_mode_valid?5?$CIm@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_previo:

; 14989: 
; 14990: 	ASSERT (comanche_main_mfd_location_valid (mfd_location));

  0002d	83 7d 0c 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  00031	7c 06		 jl	 SHORT $LN7@get_previo
  00033	83 7d 0c 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00037	7c 18		 jl	 SHORT $LN6@get_previo
$LN7@get_previo:
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_previous_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W42@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0003e	83 c0 06	 add	 eax, 6
  00041	50		 push	 eax
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@GBKBAHOG@comanche_main_mfd_location_vali@
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_previo:

; 14991: 
; 14992: 	switch (mfd_mode)

  00051	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00054	89 45 b8	 mov	 DWORD PTR tv76[ebp], eax
  00057	83 7d b8 0d	 cmp	 DWORD PTR tv76[ebp], 13	; 0000000dH
  0005b	77 72		 ja	 SHORT $LN2@get_previo
  0005d	8b 4d b8	 mov	 ecx, DWORD PTR tv76[ebp]
  00060	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN20@get_previo[ecx*4]
$LN8@get_previo:

; 14993: 	{
; 14994: 		////////////////////////////////////////
; 14995: 		case COMANCHE_MAIN_MFD_MODE_OFF:
; 14996: 		////////////////////////////////////////
; 14997: 		{
; 14998: 			previous_mfd_mode = get_default_main_mfd_mode (mfd_location);

  00067	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?get_default_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; get_default_main_mfd_mode
  00070	89 45 fc	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax

; 14999: 
; 15000: 			break;

  00073	eb 5a		 jmp	 SHORT $LN2@get_previo
$LN9@get_previo:

; 15001: 		}
; 15002: 		////////////////////////////////////////
; 15003: 		case COMANCHE_MAIN_MFD_MODE_DAMAGED:
; 15004: 		////////////////////////////////////////
; 15005: 		{
; 15006: 			previous_mfd_mode = COMANCHE_MAIN_MFD_MODE_DAMAGED;

  00075	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 1

; 15007: 
; 15008: 			break;

  0007c	eb 51		 jmp	 SHORT $LN2@get_previo
$LN10@get_previo:

; 15009: 		}
; 15010: 		////////////////////////////////////////
; 15011: 		case COMANCHE_MAIN_MFD_MODE_GROUND_RADAR:
; 15012: 		case COMANCHE_MAIN_MFD_MODE_AIR_RADAR:
; 15013: 		////////////////////////////////////////
; 15014: 		{
; 15015: 			previous_mfd_mode = COMANCHE_MAIN_MFD_MODE_MISSION;

  0007e	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 13 ; 0000000dH

; 15016: 
; 15017: 			break;

  00085	eb 48		 jmp	 SHORT $LN2@get_previo
$LN11@get_previo:

; 15018: 		}
; 15019: 		////////////////////////////////////////
; 15020: 		case COMANCHE_MAIN_MFD_MODE_FLIR:
; 15021: 		case COMANCHE_MAIN_MFD_MODE_DTV:
; 15022: 		case COMANCHE_MAIN_MFD_MODE_DVO:
; 15023: 		////////////////////////////////////////
; 15024: 		{
; 15025: 			previous_mfd_mode = get_mfd_mode_for_radar();

  00087	e8 00 00 00 00	 call	 ?get_mfd_mode_for_radar@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ ; get_mfd_mode_for_radar
  0008c	89 45 fc	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax

; 15026: 
; 15027: 			break;

  0008f	eb 3e		 jmp	 SHORT $LN2@get_previo
$LN12@get_previo:

; 15028: 		}
; 15029: 		////////////////////////////////////////
; 15030: 		case COMANCHE_MAIN_MFD_MODE_TSD:
; 15031: 		////////////////////////////////////////
; 15032: 		{
; 15033: 			previous_mfd_mode = get_main_mfd_mode_for_eo_sensor ();

  00091	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  00096	89 45 fc	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax

; 15034: 
; 15035: 			break;

  00099	eb 34		 jmp	 SHORT $LN2@get_previo
$LN13@get_previo:

; 15036: 		}
; 15037: 		////////////////////////////////////////
; 15038: 		case COMANCHE_MAIN_MFD_MODE_ASE:
; 15039: 		////////////////////////////////////////
; 15040: 		{
; 15041: 			previous_mfd_mode = COMANCHE_MAIN_MFD_MODE_TSD;

  0009b	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 7

; 15042: 
; 15043: 			break;

  000a2	eb 2b		 jmp	 SHORT $LN2@get_previo
$LN14@get_previo:

; 15044: 		}
; 15045: 		////////////////////////////////////////
; 15046: 		case COMANCHE_MAIN_MFD_MODE_WEAPON:
; 15047: 		////////////////////////////////////////
; 15048: 		{
; 15049: 			previous_mfd_mode = COMANCHE_MAIN_MFD_MODE_ASE;

  000a4	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 8

; 15050: 
; 15051: 			break;

  000ab	eb 22		 jmp	 SHORT $LN2@get_previo
$LN15@get_previo:

; 15052: 		}
; 15053: 		////////////////////////////////////////
; 15054: 		case COMANCHE_MAIN_MFD_MODE_SYSTEM:
; 15055: 		////////////////////////////////////////
; 15056: 		{
; 15057: 			previous_mfd_mode = COMANCHE_MAIN_MFD_MODE_WEAPON;

  000ad	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 9

; 15058: 
; 15059: 			break;

  000b4	eb 19		 jmp	 SHORT $LN2@get_previo
$LN16@get_previo:

; 15060: 		}
; 15061: 		////////////////////////////////////////
; 15062: 		case COMANCHE_MAIN_MFD_MODE_ENGINE:
; 15063: 		////////////////////////////////////////
; 15064: 		{
; 15065: 			previous_mfd_mode = COMANCHE_MAIN_MFD_MODE_SYSTEM;

  000b6	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 10 ; 0000000aH

; 15066: 
; 15067: 			break;

  000bd	eb 10		 jmp	 SHORT $LN2@get_previo
$LN17@get_previo:

; 15068: 		}
; 15069: 		////////////////////////////////////////
; 15070: 		case COMANCHE_MAIN_MFD_MODE_FLIGHT:
; 15071: 		////////////////////////////////////////
; 15072: 		{
; 15073: 			previous_mfd_mode = COMANCHE_MAIN_MFD_MODE_ENGINE;

  000bf	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 11 ; 0000000bH

; 15074: 
; 15075: 			break;

  000c6	eb 07		 jmp	 SHORT $LN2@get_previo
$LN18@get_previo:

; 15076: 		}
; 15077: 		////////////////////////////////////////
; 15078: 		case COMANCHE_MAIN_MFD_MODE_MISSION:
; 15079: 		////////////////////////////////////////
; 15080: 		{
; 15081: 			previous_mfd_mode = COMANCHE_MAIN_MFD_MODE_FLIGHT;

  000c8	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 12 ; 0000000cH
$LN2@get_previo:

; 15082: 
; 15083: 			break;
; 15084: 		}
; 15085: 	}
; 15086: 
; 15087: 	return (previous_mfd_mode);

  000cf	8b 45 fc	 mov	 eax, DWORD PTR _previous_mfd_mode$[ebp]

; 15088: }

  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
  000db	90		 npad	 1
$LN20@get_previo:
  000dc	00 00 00 00	 DD	 $LN8@get_previo
  000e0	00 00 00 00	 DD	 $LN9@get_previo
  000e4	00 00 00 00	 DD	 $LN10@get_previo
  000e8	00 00 00 00	 DD	 $LN10@get_previo
  000ec	00 00 00 00	 DD	 $LN11@get_previo
  000f0	00 00 00 00	 DD	 $LN11@get_previo
  000f4	00 00 00 00	 DD	 $LN11@get_previo
  000f8	00 00 00 00	 DD	 $LN12@get_previo
  000fc	00 00 00 00	 DD	 $LN13@get_previo
  00100	00 00 00 00	 DD	 $LN14@get_previo
  00104	00 00 00 00	 DD	 $LN15@get_previo
  00108	00 00 00 00	 DD	 $LN16@get_previo
  0010c	00 00 00 00	 DD	 $LN17@get_previo
  00110	00 00 00 00	 DD	 $LN18@get_previo
?get_previous_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W41@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ENDP ; get_previous_main_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?get_next_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W41@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
_next_mfd_mode$ = -4					; size = 4
_mfd_mode$ = 8						; size = 4
_mfd_location$ = 12					; size = 4
?get_next_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W41@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z PROC ; get_next_main_mfd_mode, COMDAT

; 14859: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 14860: 	comanche_main_mfd_modes
; 14861: 		next_mfd_mode;
; 14862: 
; 14863: 	ASSERT (comanche_main_mfd_mode_valid (mfd_mode));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@get_next_m
  0000f	83 7d 08 0e	 cmp	 DWORD PTR _mfd_mode$[ebp], 14 ; 0000000eH
  00013	7c 18		 jl	 SHORT $LN4@get_next_m
$LN5@get_next_m:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_next_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W42@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FGMPFPHJ@comanche_main_mfd_mode_valid?5?$CIm@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_next_m:

; 14864: 
; 14865: 	ASSERT (comanche_main_mfd_location_valid (mfd_location));

  0002d	83 7d 0c 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  00031	7c 06		 jl	 SHORT $LN7@get_next_m
  00033	83 7d 0c 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00037	7c 18		 jl	 SHORT $LN6@get_next_m
$LN7@get_next_m:
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_next_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W42@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0003e	83 c0 06	 add	 eax, 6
  00041	50		 push	 eax
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@GBKBAHOG@comanche_main_mfd_location_vali@
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_next_m:

; 14866: 
; 14867: 	switch (mfd_mode)

  00051	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00054	89 45 b8	 mov	 DWORD PTR tv76[ebp], eax
  00057	83 7d b8 0d	 cmp	 DWORD PTR tv76[ebp], 13	; 0000000dH
  0005b	0f 87 84 00 00
	00		 ja	 $LN2@get_next_m
  00061	8b 4d b8	 mov	 ecx, DWORD PTR tv76[ebp]
  00064	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN22@get_next_m[ecx*4]
$LN8@get_next_m:

; 14868: 	{
; 14869: 		////////////////////////////////////////
; 14870: 		case COMANCHE_MAIN_MFD_MODE_OFF:
; 14871: 		////////////////////////////////////////
; 14872: 		{
; 14873: 			next_mfd_mode = get_default_main_mfd_mode (mfd_location);

  0006b	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ?get_default_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; get_default_main_mfd_mode
  00074	89 45 fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax

; 14874: 
; 14875: 			break;

  00077	eb 6c		 jmp	 SHORT $LN2@get_next_m
$LN9@get_next_m:

; 14876: 		}
; 14877: 		////////////////////////////////////////
; 14878: 		case COMANCHE_MAIN_MFD_MODE_DAMAGED:
; 14879: 		////////////////////////////////////////
; 14880: 		{
; 14881: 			next_mfd_mode = COMANCHE_MAIN_MFD_MODE_DAMAGED;

  00079	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 1

; 14882: 
; 14883: 			break;

  00080	eb 63		 jmp	 SHORT $LN2@get_next_m
$LN10@get_next_m:

; 14884: 		}
; 14885: 		////////////////////////////////////////
; 14886: 		case COMANCHE_MAIN_MFD_MODE_GROUND_RADAR:
; 14887: 		case COMANCHE_MAIN_MFD_MODE_AIR_RADAR:
; 14888: 		////////////////////////////////////////
; 14889: 		{
; 14890: 			next_mfd_mode = get_main_mfd_mode_for_eo_sensor ();

  00082	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  00087	89 45 fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax

; 14891: 
; 14892: 			break;

  0008a	eb 59		 jmp	 SHORT $LN2@get_next_m
$LN11@get_next_m:

; 14893: 		}
; 14894: 		////////////////////////////////////////
; 14895: 		case COMANCHE_MAIN_MFD_MODE_FLIR:
; 14896: 		////////////////////////////////////////
; 14897: 		{
; 14898: 			next_mfd_mode = COMANCHE_MAIN_MFD_MODE_TSD;

  0008c	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 7

; 14899: 
; 14900: 			break;

  00093	eb 50		 jmp	 SHORT $LN2@get_next_m
$LN12@get_next_m:

; 14901: 		}
; 14902: 		////////////////////////////////////////
; 14903: 		case COMANCHE_MAIN_MFD_MODE_DTV:
; 14904: 		////////////////////////////////////////
; 14905: 		{
; 14906: 			next_mfd_mode = COMANCHE_MAIN_MFD_MODE_TSD;

  00095	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 7

; 14907: 
; 14908: 			break;

  0009c	eb 47		 jmp	 SHORT $LN2@get_next_m
$LN13@get_next_m:

; 14909: 		}
; 14910: 		////////////////////////////////////////
; 14911: 		case COMANCHE_MAIN_MFD_MODE_DVO:
; 14912: 		////////////////////////////////////////
; 14913: 		{
; 14914: 			next_mfd_mode = COMANCHE_MAIN_MFD_MODE_TSD;

  0009e	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 7

; 14915: 
; 14916: 			break;

  000a5	eb 3e		 jmp	 SHORT $LN2@get_next_m
$LN14@get_next_m:

; 14917: 		}
; 14918: 		////////////////////////////////////////
; 14919: 		case COMANCHE_MAIN_MFD_MODE_TSD:
; 14920: 		////////////////////////////////////////
; 14921: 		{
; 14922: 			next_mfd_mode = COMANCHE_MAIN_MFD_MODE_ASE;

  000a7	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 8

; 14923: 
; 14924: 			break;

  000ae	eb 35		 jmp	 SHORT $LN2@get_next_m
$LN15@get_next_m:

; 14925: 		}
; 14926: 		////////////////////////////////////////
; 14927: 		case COMANCHE_MAIN_MFD_MODE_ASE:
; 14928: 		////////////////////////////////////////
; 14929: 		{
; 14930: 			next_mfd_mode = COMANCHE_MAIN_MFD_MODE_WEAPON;

  000b0	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 9

; 14931: 
; 14932: 			break;

  000b7	eb 2c		 jmp	 SHORT $LN2@get_next_m
$LN16@get_next_m:

; 14933: 		}
; 14934: 		////////////////////////////////////////
; 14935: 		case COMANCHE_MAIN_MFD_MODE_WEAPON:
; 14936: 		////////////////////////////////////////
; 14937: 		{
; 14938: 			next_mfd_mode = COMANCHE_MAIN_MFD_MODE_SYSTEM;

  000b9	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 10 ; 0000000aH

; 14939: 
; 14940: 			break;

  000c0	eb 23		 jmp	 SHORT $LN2@get_next_m
$LN17@get_next_m:

; 14941: 		}
; 14942: 		////////////////////////////////////////
; 14943: 		case COMANCHE_MAIN_MFD_MODE_SYSTEM:
; 14944: 		////////////////////////////////////////
; 14945: 		{
; 14946: 			next_mfd_mode = COMANCHE_MAIN_MFD_MODE_ENGINE;

  000c2	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 11 ; 0000000bH

; 14947: 
; 14948: 			break;

  000c9	eb 1a		 jmp	 SHORT $LN2@get_next_m
$LN18@get_next_m:

; 14949: 		}
; 14950: 		////////////////////////////////////////
; 14951: 		case COMANCHE_MAIN_MFD_MODE_ENGINE:
; 14952: 		////////////////////////////////////////
; 14953: 		{
; 14954: 			next_mfd_mode = COMANCHE_MAIN_MFD_MODE_FLIGHT;

  000cb	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 12 ; 0000000cH

; 14955: 
; 14956: 			break;

  000d2	eb 11		 jmp	 SHORT $LN2@get_next_m
$LN19@get_next_m:

; 14957: 		}
; 14958: 		////////////////////////////////////////
; 14959: 		case COMANCHE_MAIN_MFD_MODE_FLIGHT:
; 14960: 		////////////////////////////////////////
; 14961: 		{
; 14962: 			next_mfd_mode = COMANCHE_MAIN_MFD_MODE_MISSION;

  000d4	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 13 ; 0000000dH

; 14963: 
; 14964: 			break;

  000db	eb 08		 jmp	 SHORT $LN2@get_next_m
$LN20@get_next_m:

; 14965: 		}
; 14966: 		////////////////////////////////////////
; 14967: 		case COMANCHE_MAIN_MFD_MODE_MISSION:
; 14968: 		////////////////////////////////////////
; 14969: 		{
; 14970: 			next_mfd_mode = get_mfd_mode_for_radar();

  000dd	e8 00 00 00 00	 call	 ?get_mfd_mode_for_radar@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ ; get_mfd_mode_for_radar
  000e2	89 45 fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax
$LN2@get_next_m:

; 14971: 
; 14972: 			break;
; 14973: 		}
; 14974: 	}
; 14975: 
; 14976: 	return (next_mfd_mode);

  000e5	8b 45 fc	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]

; 14977: }

  000e8	5f		 pop	 edi
  000e9	5e		 pop	 esi
  000ea	5b		 pop	 ebx
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c2 08 00	 ret	 8
  000f1	0f 1f 00	 npad	 3
$LN22@get_next_m:
  000f4	00 00 00 00	 DD	 $LN8@get_next_m
  000f8	00 00 00 00	 DD	 $LN9@get_next_m
  000fc	00 00 00 00	 DD	 $LN10@get_next_m
  00100	00 00 00 00	 DD	 $LN10@get_next_m
  00104	00 00 00 00	 DD	 $LN11@get_next_m
  00108	00 00 00 00	 DD	 $LN12@get_next_m
  0010c	00 00 00 00	 DD	 $LN13@get_next_m
  00110	00 00 00 00	 DD	 $LN14@get_next_m
  00114	00 00 00 00	 DD	 $LN15@get_next_m
  00118	00 00 00 00	 DD	 $LN16@get_next_m
  0011c	00 00 00 00	 DD	 $LN17@get_next_m
  00120	00 00 00 00	 DD	 $LN18@get_next_m
  00124	00 00 00 00	 DD	 $LN19@get_next_m
  00128	00 00 00 00	 DD	 $LN20@get_next_m
?get_next_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W41@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ENDP ; get_next_main_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?get_next_side_mfd_mode@@YG?AW4COMANCHE_SIDE_MFD_MODES@@W41@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_next_mfd_mode$ = -4					; size = 4
_mfd_mode$ = 8						; size = 4
_mfd_location$ = 12					; size = 4
?get_next_side_mfd_mode@@YG?AW4COMANCHE_SIDE_MFD_MODES@@W41@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z PROC ; get_next_side_mfd_mode, COMDAT

; 14827: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 14828: 	comanche_side_mfd_modes
; 14829: 		next_mfd_mode;
; 14830: 
; 14831: 	ASSERT (comanche_side_mfd_mode_valid (mfd_mode));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@get_next_s
  0000f	83 7d 08 06	 cmp	 DWORD PTR _mfd_mode$[ebp], 6
  00013	7c 18		 jl	 SHORT $LN2@get_next_s
$LN3@get_next_s:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_next_side_mfd_mode@@YG?AW4COMANCHE_SIDE_MFD_MODES@@W42@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@EEGMGJJO@comanche_side_mfd_mode_valid?5?$CIm@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_next_s:

; 14832: 	ASSERT (comanche_side_mfd_location_valid (mfd_location));

  0002d	83 7d 0c 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  00031	7c 06		 jl	 SHORT $LN5@get_next_s
  00033	83 7d 0c 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00037	7c 18		 jl	 SHORT $LN4@get_next_s
$LN5@get_next_s:
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_next_side_mfd_mode@@YG?AW4COMANCHE_SIDE_MFD_MODES@@W42@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA
  0003e	83 c0 05	 add	 eax, 5
  00041	50		 push	 eax
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@KGKPBMFE@comanche_side_mfd_location_vali@
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_next_s:

; 14833: 
; 14834: 	next_mfd_mode = mfd_mode = (comanche_side_mfd_modes) ((int) mfd_mode + 1);

  00051	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00054	83 c0 01	 add	 eax, 1
  00057	89 45 08	 mov	 DWORD PTR _mfd_mode$[ebp], eax
  0005a	8b 4d 08	 mov	 ecx, DWORD PTR _mfd_mode$[ebp]
  0005d	89 4d fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], ecx

; 14835: 
; 14836: 	if (get_side_mfd_damage(mfd_location))

  00060	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ?get_side_mfd_damage@@YGHW4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ; get_side_mfd_damage
  00069	85 c0		 test	 eax, eax
  0006b	74 18		 je	 SHORT $LN6@get_next_s

; 14837: 	{
; 14838: 		if (mfd_mode == COMANCHE_SIDE_MFD_MODE_DAMAGED)

  0006d	83 7d 08 01	 cmp	 DWORD PTR _mfd_mode$[ebp], 1
  00071	75 09		 jne	 SHORT $LN8@get_next_s

; 14839: 			next_mfd_mode = COMANCHE_SIDE_MFD_MODE_OFF;

  00073	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 0

; 14840: 		else

  0007a	eb 07		 jmp	 SHORT $LN9@get_next_s
$LN8@get_next_s:

; 14841: 			next_mfd_mode = COMANCHE_SIDE_MFD_MODE_DAMAGED;

  0007c	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 1
$LN9@get_next_s:

; 14842: 	}
; 14843: 	else

  00083	eb 1e		 jmp	 SHORT $LN7@get_next_s
$LN6@get_next_s:

; 14844: 	{
; 14845: 		if (next_mfd_mode == NUM_COMANCHE_SIDE_MFD_MODES)

  00085	83 7d fc 06	 cmp	 DWORD PTR _next_mfd_mode$[ebp], 6
  00089	75 09		 jne	 SHORT $LN10@get_next_s

; 14846: 			next_mfd_mode = COMANCHE_SIDE_MFD_MODE_OFF;

  0008b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 0
  00092	eb 0f		 jmp	 SHORT $LN7@get_next_s
$LN10@get_next_s:

; 14847: 		else if (next_mfd_mode == COMANCHE_SIDE_MFD_MODE_DAMAGED)

  00094	83 7d fc 01	 cmp	 DWORD PTR _next_mfd_mode$[ebp], 1
  00098	75 09		 jne	 SHORT $LN7@get_next_s

; 14848: 			next_mfd_mode = (comanche_side_mfd_modes) ((int) next_mfd_mode + 1);

  0009a	8b 45 fc	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]
  0009d	83 c0 01	 add	 eax, 1
  000a0	89 45 fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax
$LN7@get_next_s:

; 14849: 	}
; 14850: 
; 14851: 	return next_mfd_mode;

  000a3	8b 45 fc	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]

; 14852: }

  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c2 08 00	 ret	 8
?get_next_side_mfd_mode@@YG?AW4COMANCHE_SIDE_MFD_MODES@@W41@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ENDP ; get_next_side_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?get_side_mfd_damage@@YGHW4COMANCHE_SIDE_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_damage$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?get_side_mfd_damage@@YGHW4COMANCHE_SIDE_MFD_LOCATIONS@@@Z PROC ; get_side_mfd_damage, COMDAT

; 14685: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 14686: 	int
; 14687: 		damage;
; 14688: 
; 14689: 	ASSERT (comanche_side_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@get_side_m
  0000f	83 7d 08 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00013	7c 18		 jl	 SHORT $LN4@get_side_m
$LN5@get_side_m:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_side_mfd_damage@@YGHW4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@KGKPBMFE@comanche_side_mfd_location_vali@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_side_m:

; 14690: 
; 14691: 	switch (mfd_location)

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	89 45 b8	 mov	 DWORD PTR tv70[ebp], eax
  00033	83 7d b8 03	 cmp	 DWORD PTR tv70[ebp], 3
  00037	77 48		 ja	 SHORT $LN2@get_side_m
  00039	8b 4d b8	 mov	 ecx, DWORD PTR tv70[ebp]
  0003c	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN11@get_side_m[ecx*4]
$LN6@get_side_m:

; 14692: 	{
; 14693: 		////////////////////////////////////////
; 14694: 		case COMANCHE_SIDE_MFD_LOCATION_PILOT_LHS:
; 14695: 		////////////////////////////////////////
; 14696: 		{
; 14697: 			damage = comanche_damage.pilot_lh_side_mfd;

  00043	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00048	c1 e8 0e	 shr	 eax, 14			; 0000000eH
  0004b	83 e0 01	 and	 eax, 1
  0004e	89 45 fc	 mov	 DWORD PTR _damage$[ebp], eax

; 14698: 
; 14699: 			break;

  00051	eb 2e		 jmp	 SHORT $LN2@get_side_m
$LN7@get_side_m:

; 14700: 		}
; 14701: 		////////////////////////////////////////
; 14702: 		case COMANCHE_SIDE_MFD_LOCATION_PILOT_RHS:
; 14703: 		////////////////////////////////////////
; 14704: 		{
; 14705: 			damage = comanche_damage.pilot_rh_side_mfd;

  00053	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00058	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  0005b	83 e0 01	 and	 eax, 1
  0005e	89 45 fc	 mov	 DWORD PTR _damage$[ebp], eax

; 14706: 
; 14707: 			break;

  00061	eb 1e		 jmp	 SHORT $LN2@get_side_m
$LN8@get_side_m:

; 14708: 		}
; 14709: 		////////////////////////////////////////
; 14710: 		case COMANCHE_SIDE_MFD_LOCATION_CO_PILOT_LHS:
; 14711: 		////////////////////////////////////////
; 14712: 		{
; 14713: 			damage = comanche_damage.co_pilot_lh_side_mfd;

  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00068	c1 e8 12	 shr	 eax, 18			; 00000012H
  0006b	83 e0 01	 and	 eax, 1
  0006e	89 45 fc	 mov	 DWORD PTR _damage$[ebp], eax

; 14714: 
; 14715: 			break;

  00071	eb 0e		 jmp	 SHORT $LN2@get_side_m
$LN9@get_side_m:

; 14716: 		}
; 14717: 		////////////////////////////////////////
; 14718: 		case COMANCHE_SIDE_MFD_LOCATION_CO_PILOT_RHS:
; 14719: 		////////////////////////////////////////
; 14720: 		{
; 14721: 			damage = comanche_damage.co_pilot_rh_side_mfd;

  00073	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00078	c1 e8 13	 shr	 eax, 19			; 00000013H
  0007b	83 e0 01	 and	 eax, 1
  0007e	89 45 fc	 mov	 DWORD PTR _damage$[ebp], eax
$LN2@get_side_m:

; 14722: 
; 14723: 			break;
; 14724: 		}
; 14725: 	}
; 14726: 
; 14727: 	return (damage);

  00081	8b 45 fc	 mov	 eax, DWORD PTR _damage$[ebp]

; 14728: }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 04 00	 ret	 4
  0008d	0f 1f 00	 npad	 3
$LN11@get_side_m:
  00090	00 00 00 00	 DD	 $LN6@get_side_m
  00094	00 00 00 00	 DD	 $LN7@get_side_m
  00098	00 00 00 00	 DD	 $LN8@get_side_m
  0009c	00 00 00 00	 DD	 $LN9@get_side_m
?get_side_mfd_damage@@YGHW4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ENDP ; get_side_mfd_damage
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?get_main_mfd_damage@@YGHW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_damage$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?get_main_mfd_damage@@YGHW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z PROC ; get_main_mfd_damage, COMDAT

; 14635: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 14636: 	int
; 14637: 		damage;
; 14638: 
; 14639: 	ASSERT (comanche_main_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@get_main_m
  0000f	83 7d 08 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00013	7c 18		 jl	 SHORT $LN4@get_main_m
$LN5@get_main_m:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_main_mfd_damage@@YGHW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@GBKBAHOG@comanche_main_mfd_location_vali@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_main_m:

; 14640: 
; 14641: 	switch (mfd_location)

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	89 45 b8	 mov	 DWORD PTR tv70[ebp], eax
  00033	83 7d b8 03	 cmp	 DWORD PTR tv70[ebp], 3
  00037	77 48		 ja	 SHORT $LN2@get_main_m
  00039	8b 4d b8	 mov	 ecx, DWORD PTR tv70[ebp]
  0003c	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN11@get_main_m[ecx*4]
$LN6@get_main_m:

; 14642: 	{
; 14643: 		////////////////////////////////////////
; 14644: 		case COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS:
; 14645: 		////////////////////////////////////////
; 14646: 		{
; 14647: 			damage = comanche_damage.pilot_lh_main_mfd;

  00043	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00048	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  0004b	83 e0 01	 and	 eax, 1
  0004e	89 45 fc	 mov	 DWORD PTR _damage$[ebp], eax

; 14648: 
; 14649: 			break;

  00051	eb 2e		 jmp	 SHORT $LN2@get_main_m
$LN7@get_main_m:

; 14650: 		}
; 14651: 		////////////////////////////////////////
; 14652: 		case COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS:
; 14653: 		////////////////////////////////////////
; 14654: 		{
; 14655: 			damage = comanche_damage.pilot_rh_main_mfd;

  00053	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00058	c1 e8 0d	 shr	 eax, 13			; 0000000dH
  0005b	83 e0 01	 and	 eax, 1
  0005e	89 45 fc	 mov	 DWORD PTR _damage$[ebp], eax

; 14656: 
; 14657: 			break;

  00061	eb 1e		 jmp	 SHORT $LN2@get_main_m
$LN8@get_main_m:

; 14658: 		}
; 14659: 		////////////////////////////////////////
; 14660: 		case COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_LHS:
; 14661: 		////////////////////////////////////////
; 14662: 		{
; 14663: 			damage = comanche_damage.co_pilot_lh_main_mfd;

  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00068	c1 e8 10	 shr	 eax, 16			; 00000010H
  0006b	83 e0 01	 and	 eax, 1
  0006e	89 45 fc	 mov	 DWORD PTR _damage$[ebp], eax

; 14664: 
; 14665: 			break;

  00071	eb 0e		 jmp	 SHORT $LN2@get_main_m
$LN9@get_main_m:

; 14666: 		}
; 14667: 		////////////////////////////////////////
; 14668: 		case COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_RHS:
; 14669: 		////////////////////////////////////////
; 14670: 		{
; 14671: 			damage = comanche_damage.co_pilot_rh_main_mfd;

  00073	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00078	c1 e8 11	 shr	 eax, 17			; 00000011H
  0007b	83 e0 01	 and	 eax, 1
  0007e	89 45 fc	 mov	 DWORD PTR _damage$[ebp], eax
$LN2@get_main_m:

; 14672: 
; 14673: 			break;
; 14674: 		}
; 14675: 	}
; 14676: 
; 14677: 	return (damage);

  00081	8b 45 fc	 mov	 eax, DWORD PTR _damage$[ebp]

; 14678: }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 04 00	 ret	 4
  0008d	0f 1f 00	 npad	 3
$LN11@get_main_m:
  00090	00 00 00 00	 DD	 $LN6@get_main_m
  00094	00 00 00 00	 DD	 $LN7@get_main_m
  00098	00 00 00 00	 DD	 $LN8@get_main_m
  0009c	00 00 00 00	 DD	 $LN9@get_main_m
?get_main_mfd_damage@@YGHW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ENDP ; get_main_mfd_damage
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?get_default_side_mfd_mode@@YG?AW4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_mfd_mode$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?get_default_side_mfd_mode@@YG?AW4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z PROC ; get_default_side_mfd_mode, COMDAT

; 14585: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 14586: 	comanche_side_mfd_modes
; 14587: 		mfd_mode;
; 14588: 
; 14589: 	ASSERT (comanche_side_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@get_defaul
  0000f	83 7d 08 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00013	7c 18		 jl	 SHORT $LN4@get_defaul
$LN5@get_defaul:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_default_side_mfd_mode@@YG?AW4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@KGKPBMFE@comanche_side_mfd_location_vali@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_defaul:

; 14590: 
; 14591: 	switch (mfd_location)

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	89 45 b8	 mov	 DWORD PTR tv70[ebp], eax
  00033	83 7d b8 03	 cmp	 DWORD PTR tv70[ebp], 3
  00037	77 2c		 ja	 SHORT $LN2@get_defaul
  00039	8b 4d b8	 mov	 ecx, DWORD PTR tv70[ebp]
  0003c	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN11@get_defaul[ecx*4]
$LN6@get_defaul:

; 14592: 	{
; 14593: 		////////////////////////////////////////
; 14594: 		case COMANCHE_SIDE_MFD_LOCATION_PILOT_LHS:
; 14595: 		////////////////////////////////////////
; 14596: 		{
; 14597: 			mfd_mode = COMANCHE_SIDE_MFD_MODE_ENGINE;

  00043	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 4

; 14598: 
; 14599: 			break;

  0004a	eb 19		 jmp	 SHORT $LN2@get_defaul
$LN7@get_defaul:

; 14600: 		}
; 14601: 		////////////////////////////////////////
; 14602: 		case COMANCHE_SIDE_MFD_LOCATION_PILOT_RHS:
; 14603: 		////////////////////////////////////////
; 14604: 		{
; 14605: 			mfd_mode = COMANCHE_SIDE_MFD_MODE_FLIGHT;

  0004c	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 5

; 14606: 
; 14607: 			break;

  00053	eb 10		 jmp	 SHORT $LN2@get_defaul
$LN8@get_defaul:

; 14608: 		}
; 14609: 		////////////////////////////////////////
; 14610: 		case COMANCHE_SIDE_MFD_LOCATION_CO_PILOT_LHS:
; 14611: 		////////////////////////////////////////
; 14612: 		{
; 14613: 			mfd_mode = COMANCHE_SIDE_MFD_MODE_SYSTEM;

  00055	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 3

; 14614: 
; 14615: 			break;

  0005c	eb 07		 jmp	 SHORT $LN2@get_defaul
$LN9@get_defaul:

; 14616: 		}
; 14617: 		////////////////////////////////////////
; 14618: 		case COMANCHE_SIDE_MFD_LOCATION_CO_PILOT_RHS:
; 14619: 		////////////////////////////////////////
; 14620: 		{
; 14621: 			mfd_mode = COMANCHE_SIDE_MFD_MODE_WEAPON;

  0005e	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 2
$LN2@get_defaul:

; 14622: 
; 14623: 			break;
; 14624: 		}
; 14625: 	}
; 14626: 
; 14627: 	return (mfd_mode);

  00065	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]

; 14628: }

  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
  00071	0f 1f 00	 npad	 3
$LN11@get_defaul:
  00074	00 00 00 00	 DD	 $LN6@get_defaul
  00078	00 00 00 00	 DD	 $LN7@get_defaul
  0007c	00 00 00 00	 DD	 $LN8@get_defaul
  00080	00 00 00 00	 DD	 $LN9@get_defaul
?get_default_side_mfd_mode@@YG?AW4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ENDP ; get_default_side_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?get_default_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_mfd_mode$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?get_default_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z PROC ; get_default_main_mfd_mode, COMDAT

; 14535: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 14536: 	comanche_main_mfd_modes
; 14537: 		mfd_mode;
; 14538: 
; 14539: 	ASSERT (comanche_main_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@get_defaul
  0000f	83 7d 08 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00013	7c 18		 jl	 SHORT $LN4@get_defaul
$LN5@get_defaul:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_default_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@GBKBAHOG@comanche_main_mfd_location_vali@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_defaul:

; 14540: 
; 14541: 	switch (mfd_location)

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	89 45 b8	 mov	 DWORD PTR tv70[ebp], eax
  00033	83 7d b8 03	 cmp	 DWORD PTR tv70[ebp], 3
  00037	77 2c		 ja	 SHORT $LN2@get_defaul
  00039	8b 4d b8	 mov	 ecx, DWORD PTR tv70[ebp]
  0003c	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN11@get_defaul[ecx*4]
$LN6@get_defaul:

; 14542: 	{
; 14543: 		////////////////////////////////////////
; 14544: 		case COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS:
; 14545: 		////////////////////////////////////////
; 14546: 		{
; 14547: 			mfd_mode = COMANCHE_MAIN_MFD_MODE_ENGINE;

  00043	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 11 ; 0000000bH

; 14548: 
; 14549: 			break;

  0004a	eb 19		 jmp	 SHORT $LN2@get_defaul
$LN7@get_defaul:

; 14550: 		}
; 14551: 		////////////////////////////////////////
; 14552: 		case COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS:
; 14553: 		////////////////////////////////////////
; 14554: 		{
; 14555: 			mfd_mode = COMANCHE_MAIN_MFD_MODE_TSD;

  0004c	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 7

; 14556: 
; 14557: 			break;

  00053	eb 10		 jmp	 SHORT $LN2@get_defaul
$LN8@get_defaul:

; 14558: 		}
; 14559: 		////////////////////////////////////////
; 14560: 		case COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_LHS:
; 14561: 		////////////////////////////////////////
; 14562: 		{
; 14563: 			mfd_mode = COMANCHE_MAIN_MFD_MODE_ENGINE;

  00055	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 11 ; 0000000bH

; 14564: 
; 14565: 			break;

  0005c	eb 07		 jmp	 SHORT $LN2@get_defaul
$LN9@get_defaul:

; 14566: 		}
; 14567: 		////////////////////////////////////////
; 14568: 		case COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_RHS:
; 14569: 		////////////////////////////////////////
; 14570: 		{
; 14571: 			mfd_mode = COMANCHE_MAIN_MFD_MODE_TSD;

  0005e	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 7
$LN2@get_defaul:

; 14572: 
; 14573: 			break;
; 14574: 		}
; 14575: 	}
; 14576: 
; 14577: 	return (mfd_mode);

  00065	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]

; 14578: }

  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
  00071	0f 1f 00	 npad	 3
$LN11@get_defaul:
  00074	00 00 00 00	 DD	 $LN6@get_defaul
  00078	00 00 00 00	 DD	 $LN7@get_defaul
  0007c	00 00 00 00	 DD	 $LN8@get_defaul
  00080	00 00 00 00	 DD	 $LN9@get_defaul
?get_default_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ENDP ; get_default_main_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?get_mfd_mode_for_radar@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ
_TEXT	SEGMENT
?get_mfd_mode_for_radar@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ PROC ; get_mfd_mode_for_radar, COMDAT

; 14523: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 14524: 	if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_AIR_RADAR || air_radar_is_active())

  00009	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 2 ; target_acquisition_system
  00010	74 09		 je	 SHORT $LN3@get_mfd_mo
  00012	e8 00 00 00 00	 call	 ?air_radar_is_active@@YGHXZ ; air_radar_is_active
  00017	85 c0		 test	 eax, eax
  00019	74 07		 je	 SHORT $LN2@get_mfd_mo
$LN3@get_mfd_mo:

; 14525: 		return COMANCHE_MAIN_MFD_MODE_AIR_RADAR;

  0001b	b8 03 00 00 00	 mov	 eax, 3
  00020	eb 05		 jmp	 SHORT $LN1@get_mfd_mo
$LN2@get_mfd_mo:

; 14526: 
; 14527: 	return COMANCHE_MAIN_MFD_MODE_GROUND_RADAR;

  00022	b8 02 00 00 00	 mov	 eax, 2
$LN1@get_mfd_mo:

; 14528: }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?get_mfd_mode_for_radar@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ ENDP ; get_mfd_mode_for_radar
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_overlaid_main_mfd@@YGXPAUSCREEN@@W4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv140 = -356						; size = 4
tv90 = -356						; size = 4
_width$1 = -288						; size = 4
_specular$2 = -284					; size = 4
_colour$3 = -280					; size = 4
_quad$4 = -276						; size = 256
_store_background_colour$5 = -20			; size = 4
_store_road_colour$6 = -16				; size = 4
_store_river_colour$7 = -12				; size = 4
_store_contour_colour$8 = -8				; size = 4
_border_size$ = -4					; size = 4
_mfd_screen$ = 8					; size = 4
_mode$ = 12						; size = 4
_location$ = 16						; size = 4
?draw_overlaid_main_mfd@@YGXPAUSCREEN@@W4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z PROC ; draw_overlaid_main_mfd, COMDAT

; 13669: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 64 01 00
	00		 sub	 esp, 356		; 00000164H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 13670: 	float
; 13671: 		border_size;
; 13672: 
; 13673: 	ASSERT (mfd_screen);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _mfd_screen$[ebp], 0
  00010	75 18		 jne	 SHORT $LN6@draw_overl
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_main_mfd@@YGXPAUSCREEN@@W4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  00017	83 c0 04	 add	 eax, 4
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DHCAJMOH@mfd_screen@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@draw_overl:

; 13674: 
; 13675: 	ASSERT (comanche_main_mfd_mode_valid (mode));

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _mode$[ebp], 0
  0002e	7c 06		 jl	 SHORT $LN8@draw_overl
  00030	83 7d 0c 0e	 cmp	 DWORD PTR _mode$[ebp], 14 ; 0000000eH
  00034	7c 18		 jl	 SHORT $LN7@draw_overl
$LN8@draw_overl:
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_main_mfd@@YGXPAUSCREEN@@W4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0003b	83 c0 06	 add	 eax, 6
  0003e	50		 push	 eax
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@ENKIGGJP@comanche_main_mfd_mode_valid?5?$CIm@
  00049	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@draw_overl:

; 13676: 
; 13677: 	ASSERT (comanche_main_mfd_location_valid (location));

  0004e	83 7d 10 00	 cmp	 DWORD PTR _location$[ebp], 0
  00052	7c 06		 jl	 SHORT $LN10@draw_overl
  00054	83 7d 10 04	 cmp	 DWORD PTR _location$[ebp], 4
  00058	7c 18		 jl	 SHORT $LN9@draw_overl
$LN10@draw_overl:
  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_main_mfd@@YGXPAUSCREEN@@W4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0005f	83 c0 08	 add	 eax, 8
  00062	50		 push	 eax
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@LICEEPAH@comanche_main_mfd_location_vali@
  0006d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@draw_overl:

; 13678: 
; 13679: 	if (mode == COMANCHE_MAIN_MFD_MODE_OFF)

  00072	83 7d 0c 00	 cmp	 DWORD PTR _mode$[ebp], 0
  00076	75 05		 jne	 SHORT $LN11@draw_overl

; 13680: 	{
; 13681: 		return;

  00078	e9 38 13 00 00	 jmp	 $LN1@draw_overl
$LN11@draw_overl:

; 13682: 	}
; 13683: 
; 13684: 	////////////////////////////////////////
; 13685: 	//
; 13686: 	// scale position and size wrt screen resolution
; 13687: 	//
; 13688: 	////////////////////////////////////////
; 13689: 
; 13690: 	border_size = 4.0 * full_screen_width * (1.0 / 640.0);

  0007d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  00085	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4010000000000000
  0008d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f5999999999999a
  00095	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00099	f3 0f 11 45 fc	 movss	 DWORD PTR _border_size$[ebp], xmm0

; 13691: 
; 13692: 	if (get_global_unscaled_displays ())

  0009e	83 3d 74 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+884, 0
  000a5	74 12		 je	 SHORT $LN12@draw_overl

; 13693: 	{
; 13694: 		mfd_screen_width = mfd_viewport_size;

  000a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  000af	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_width@@3MA, xmm0

; 13695: 	}
; 13696: 	else

  000b7	eb 1c		 jmp	 SHORT $LN13@draw_overl
$LN12@draw_overl:

; 13697: 	{
; 13698: 		mfd_screen_width = full_screen_width * (128.0 / 640.0);

  000b9	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  000c1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc999999999999a
  000c9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000cd	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_width@@3MA, xmm0
$LN13@draw_overl:

; 13699: 	}
; 13700: 
; 13701: 	mfd_screen_height = mfd_screen_width;

  000d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_width@@3MA
  000dd	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_height@@3MA, xmm0

; 13702: 
; 13703: 	switch (location)

  000e5	8b 45 10	 mov	 eax, DWORD PTR _location$[ebp]
  000e8	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  000ee	83 bd 9c fe ff
	ff 03		 cmp	 DWORD PTR tv90[ebp], 3
  000f5	77 73		 ja	 SHORT $LN2@draw_overl
  000f7	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  000fd	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN58@draw_overl[ecx*4]
$LN14@draw_overl:

; 13704: 	{
; 13705: 		////////////////////////////////////////
; 13706: 		case COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS:
; 13707: 		case COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_LHS:
; 13708: 		////////////////////////////////////////
; 13709: 		{
; 13710: 			mfd_screen_x_min = border_size;

  00104	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _border_size$[ebp]
  00109	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_min@@3MA, xmm0

; 13711: 			mfd_screen_y_min = full_screen_height - border_size - mfd_screen_height;

  00111	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?full_screen_height@@3MA
  00119	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _border_size$[ebp]
  0011e	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_height@@3MA
  00126	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_min@@3MA, xmm0

; 13712: 
; 13713: 			break;

  0012e	eb 3a		 jmp	 SHORT $LN2@draw_overl
$LN15@draw_overl:

; 13714: 		}
; 13715: 		////////////////////////////////////////
; 13716: 		case COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS:
; 13717: 		case COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_RHS:
; 13718: 		////////////////////////////////////////
; 13719: 		{
; 13720: 			mfd_screen_x_min = full_screen_width - border_size - mfd_screen_width;

  00130	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?full_screen_width@@3MA
  00138	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _border_size$[ebp]
  0013d	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_width@@3MA
  00145	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_min@@3MA, xmm0

; 13721: 			mfd_screen_y_min = full_screen_height - border_size - mfd_screen_height;

  0014d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?full_screen_height@@3MA
  00155	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _border_size$[ebp]
  0015a	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_height@@3MA
  00162	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_min@@3MA, xmm0
$LN2@draw_overl:

; 13722: 
; 13723: 			break;
; 13724: 		}
; 13725: 	}
; 13726: 
; 13727: 	mfd_screen_x_max = mfd_screen_x_min + mfd_screen_width - 0.0001;

  0016a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00172	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?mfd_screen_width@@3MA
  0017a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0017e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f1a36e2eb1c432d
  00186	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0018a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_max@@3MA, xmm0

; 13728: 	mfd_screen_y_max = mfd_screen_y_min + mfd_screen_height - 0.0001;

  00192	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  0019a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?mfd_screen_height@@3MA
  001a2	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001a6	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f1a36e2eb1c432d
  001ae	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001b2	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_max@@3MA, xmm0

; 13729: 
; 13730: 	mfd_screen_x_scale = mfd_viewport_size / mfd_screen_width;

  001ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  001c2	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?mfd_screen_width@@3MA
  001ca	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_scale@@3MA, xmm0

; 13731: 	mfd_screen_y_scale = mfd_viewport_size / mfd_screen_height;

  001d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  001da	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?mfd_screen_height@@3MA
  001e2	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_scale@@3MA, xmm0

; 13732: 
; 13733: 	draw_main_display = TRUE;

  001ea	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_main_display@@3HA, 1

; 13734: 
; 13735: 	////////////////////////////////////////
; 13736: 	//
; 13737: 	// draw MFD display
; 13738: 	//
; 13739: 	////////////////////////////////////////
; 13740: 
; 13741: 	switch (mode)

  001f4	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  001f7	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv140[ebp], eax
  001fd	83 bd 9c fe ff
	ff 0d		 cmp	 DWORD PTR tv140[ebp], 13 ; 0000000dH
  00204	0f 87 a7 0d 00
	00		 ja	 $LN50@draw_overl
  0020a	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv140[ebp]
  00210	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN59@draw_overl[ecx*4]
$LN16@draw_overl:

; 13742: 	{
; 13743: 		////////////////////////////////////////
; 13744: 		case COMANCHE_MAIN_MFD_MODE_OFF:
; 13745: 		////////////////////////////////////////
; 13746: 		{
; 13747: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00217	51		 push	 ecx
  00218	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00220	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00225	51		 push	 ecx
  00226	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0022e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00233	51		 push	 ecx
  00234	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0023c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00241	51		 push	 ecx
  00242	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0024a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00254	50		 push	 eax
  00255	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 13748: 
; 13749: 			set_active_screen (mfd_screen);

  0025a	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0025d	50		 push	 eax
  0025e	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 13750: 
; 13751: 			if (lock_screen (mfd_screen))

  00263	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00266	50		 push	 eax
  00267	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0026c	85 c0		 test	 eax, eax
  0026e	74 3a		 je	 SHORT $LN17@draw_overl

; 13752: 			{
; 13753: 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00270	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00275	50		 push	 eax
  00276	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  0027c	83 e9 01	 sub	 ecx, 1
  0027f	51		 push	 ecx
  00280	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00286	83 ea 01	 sub	 edx, 1
  00289	52		 push	 edx
  0028a	6a 00		 push	 0
  0028c	6a 00		 push	 0
  0028e	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 13754: 
; 13755: 				draw_layout_grid ();

  00293	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 13756: 
; 13757: 				flush_screen_texture_graphics (mfd_screen);

  00298	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0029b	50		 push	 eax
  0029c	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 13758: 
; 13759: 				unlock_screen (mfd_screen);

  002a1	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  002a4	50		 push	 eax
  002a5	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN17@draw_overl:

; 13760: 			}
; 13761: 
; 13762: 			break;

  002aa	e9 13 0d 00 00	 jmp	 $LN4@draw_overl
$LN18@draw_overl:

; 13763: 		}
; 13764: 		////////////////////////////////////////
; 13765: 		case COMANCHE_MAIN_MFD_MODE_DAMAGED:
; 13766: 		////////////////////////////////////////
; 13767: 		{
; 13768: 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  002af	51		 push	 ecx
  002b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  002b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002bd	51		 push	 ecx
  002be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  002c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002cb	51		 push	 ecx
  002cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  002d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d9	51		 push	 ecx
  002da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  002e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e7	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 13769: 
; 13770: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  002ec	51		 push	 ecx
  002ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  002f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fa	51		 push	 ecx
  002fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00303	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00308	51		 push	 ecx
  00309	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00311	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00316	51		 push	 ecx
  00317	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0031f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00324	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00329	50		 push	 eax
  0032a	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 13771: 
; 13772: 			set_active_screen (mfd_screen);

  0032f	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00332	50		 push	 eax
  00333	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 13773: 
; 13774: 			if (lock_screen (mfd_screen))

  00338	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0033b	50		 push	 eax
  0033c	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00341	85 c0		 test	 eax, eax
  00343	74 3f		 je	 SHORT $LN19@draw_overl

; 13775: 			{
; 13776: 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00345	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0034a	50		 push	 eax
  0034b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00351	83 e9 01	 sub	 ecx, 1
  00354	51		 push	 ecx
  00355	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  0035b	83 ea 01	 sub	 edx, 1
  0035e	52		 push	 edx
  0035f	6a 00		 push	 0
  00361	6a 00		 push	 0
  00363	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 13777: 
; 13778: 				draw_layout_grid ();

  00368	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 13779: 
; 13780: 				draw_damaged_mfd ();

  0036d	e8 00 00 00 00	 call	 ?draw_damaged_mfd@@YGXXZ ; draw_damaged_mfd

; 13781: 
; 13782: 				flush_screen_texture_graphics (mfd_screen);

  00372	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00375	50		 push	 eax
  00376	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 13783: 
; 13784: 				unlock_screen (mfd_screen);

  0037b	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0037e	50		 push	 eax
  0037f	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN19@draw_overl:

; 13785: 			}
; 13786: 
; 13787: 			break;

  00384	e9 39 0c 00 00	 jmp	 $LN4@draw_overl
$LN20@draw_overl:

; 13788: 		}
; 13789: 		////////////////////////////////////////
; 13790: 		case COMANCHE_MAIN_MFD_MODE_GROUND_RADAR:
; 13791: 		////////////////////////////////////////
; 13792: 		{
; 13793: 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00389	51		 push	 ecx
  0038a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00392	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00397	51		 push	 ecx
  00398	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  003a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a5	51		 push	 ecx
  003a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  003ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b3	51		 push	 ecx
  003b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  003bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c1	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 13794: 
; 13795: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  003c6	51		 push	 ecx
  003c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  003cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d4	51		 push	 ecx
  003d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  003dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e2	51		 push	 ecx
  003e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  003eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f0	51		 push	 ecx
  003f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  003f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00403	50		 push	 eax
  00404	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 13796: 
; 13797: 			set_active_screen (mfd_screen);

  00409	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0040c	50		 push	 eax
  0040d	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 13798: 
; 13799: 			if (lock_screen (mfd_screen))

  00412	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00415	50		 push	 eax
  00416	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0041b	85 c0		 test	 eax, eax
  0041d	74 3f		 je	 SHORT $LN21@draw_overl

; 13800: 			{
; 13801: 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  0041f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00424	50		 push	 eax
  00425	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  0042b	83 e9 01	 sub	 ecx, 1
  0042e	51		 push	 ecx
  0042f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00435	83 ea 01	 sub	 edx, 1
  00438	52		 push	 edx
  00439	6a 00		 push	 0
  0043b	6a 00		 push	 0
  0043d	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 13802: 
; 13803: 				draw_layout_grid ();

  00442	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 13804: 
; 13805: 				draw_ground_radar_mfd ();

  00447	e8 00 00 00 00	 call	 ?draw_ground_radar_mfd@@YGXXZ ; draw_ground_radar_mfd

; 13806: 
; 13807: 				flush_screen_texture_graphics (mfd_screen);

  0044c	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0044f	50		 push	 eax
  00450	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 13808: 
; 13809: 				unlock_screen (mfd_screen);

  00455	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00458	50		 push	 eax
  00459	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN21@draw_overl:

; 13810: 			}
; 13811: 
; 13812: 			break;

  0045e	e9 5f 0b 00 00	 jmp	 $LN4@draw_overl
$LN22@draw_overl:

; 13813: 		}
; 13814: 		////////////////////////////////////////
; 13815: 		case COMANCHE_MAIN_MFD_MODE_AIR_RADAR:
; 13816: 		////////////////////////////////////////
; 13817: 		{
; 13818: 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00463	51		 push	 ecx
  00464	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  0046c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00471	51		 push	 ecx
  00472	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  0047a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047f	51		 push	 ecx
  00480	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00488	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0048d	51		 push	 ecx
  0048e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00496	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0049b	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 13819: 
; 13820: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  004a0	51		 push	 ecx
  004a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  004a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ae	51		 push	 ecx
  004af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  004b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004bc	51		 push	 ecx
  004bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  004c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ca	51		 push	 ecx
  004cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  004d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  004dd	50		 push	 eax
  004de	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 13821: 
; 13822: 			set_active_screen (mfd_screen);

  004e3	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  004e6	50		 push	 eax
  004e7	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 13823: 
; 13824: 			if (lock_screen (mfd_screen))

  004ec	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  004ef	50		 push	 eax
  004f0	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  004f5	85 c0		 test	 eax, eax
  004f7	74 3f		 je	 SHORT $LN23@draw_overl

; 13825: 			{
; 13826: 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  004f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  004fe	50		 push	 eax
  004ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00505	83 e9 01	 sub	 ecx, 1
  00508	51		 push	 ecx
  00509	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  0050f	83 ea 01	 sub	 edx, 1
  00512	52		 push	 edx
  00513	6a 00		 push	 0
  00515	6a 00		 push	 0
  00517	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 13827: 
; 13828: 				draw_layout_grid ();

  0051c	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 13829: 
; 13830: 				draw_air_radar_mfd ();

  00521	e8 00 00 00 00	 call	 ?draw_air_radar_mfd@@YGXXZ ; draw_air_radar_mfd

; 13831: 
; 13832: 				flush_screen_texture_graphics (mfd_screen);

  00526	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00529	50		 push	 eax
  0052a	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 13833: 
; 13834: 				unlock_screen (mfd_screen);

  0052f	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00532	50		 push	 eax
  00533	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN23@draw_overl:

; 13835: 			}
; 13836: 
; 13837: 			break;

  00538	e9 85 0a 00 00	 jmp	 $LN4@draw_overl
$LN24@draw_overl:

; 13838: 		}
; 13839: 		////////////////////////////////////////
; 13840: 		case COMANCHE_MAIN_MFD_MODE_FLIR:
; 13841: 		////////////////////////////////////////
; 13842: 		{
; 13843: 			if (!comanche_damage.flir)

  0053d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00542	d1 e8		 shr	 eax, 1
  00544	83 e0 01	 and	 eax, 1
  00547	75 0e		 jne	 SHORT $LN25@draw_overl

; 13844: 			{
; 13845: 				draw_full_screen_3d_eo_display (&comanche_flir, TARGET_ACQUISITION_SYSTEM_FLIR);

  00549	6a 03		 push	 3
  0054b	68 00 00 00 00	 push	 OFFSET ?comanche_flir@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; comanche_flir
  00550	e8 00 00 00 00	 call	 ?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_full_screen_3d_eo_display

; 13846: 			}
; 13847: 			else

  00555	eb 3d		 jmp	 SHORT $LN26@draw_overl
$LN25@draw_overl:

; 13848: 			{
; 13849: 				draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00557	51		 push	 ecx
  00558	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00560	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00565	51		 push	 ecx
  00566	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  0056e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00573	51		 push	 ecx
  00574	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  0057c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00581	51		 push	 ecx
  00582	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  0058a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0058f	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background
$LN26@draw_overl:

; 13850: 			}
; 13851: 
; 13852: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00594	51		 push	 ecx
  00595	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0059d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a2	51		 push	 ecx
  005a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  005ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b0	51		 push	 ecx
  005b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  005b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005be	51		 push	 ecx
  005bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  005c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  005d1	50		 push	 eax
  005d2	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 13853: 
; 13854: 			set_active_screen (mfd_screen);

  005d7	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  005da	50		 push	 eax
  005db	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 13855: 
; 13856: 			if (lock_screen (mfd_screen))

  005e0	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  005e3	50		 push	 eax
  005e4	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  005e9	85 c0		 test	 eax, eax
  005eb	74 41		 je	 SHORT $LN27@draw_overl

; 13857: 			{
; 13858: 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  005ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  005f2	50		 push	 eax
  005f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  005f9	83 e9 01	 sub	 ecx, 1
  005fc	51		 push	 ecx
  005fd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00603	83 ea 01	 sub	 edx, 1
  00606	52		 push	 edx
  00607	6a 00		 push	 0
  00609	6a 00		 push	 0
  0060b	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 13859: 
; 13860: 				draw_layout_grid ();

  00610	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 13861: 
; 13862: 				draw_2d_flir_mfd (TRUE);

  00615	6a 01		 push	 1
  00617	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXH@Z ; draw_2d_flir_mfd

; 13863: 
; 13864: 				flush_screen_texture_graphics (mfd_screen);

  0061c	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0061f	50		 push	 eax
  00620	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 13865: 
; 13866: 				unlock_screen (mfd_screen);

  00625	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00628	50		 push	 eax
  00629	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN27@draw_overl:

; 13867: 			}
; 13868: 
; 13869: 			set_pilots_full_screen_params (FALSE);

  0062e	6a 00		 push	 0
  00630	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params

; 13870: 
; 13871: 			break;

  00635	e9 88 09 00 00	 jmp	 $LN4@draw_overl
$LN28@draw_overl:

; 13872: 		}
; 13873: 		////////////////////////////////////////
; 13874: 		case COMANCHE_MAIN_MFD_MODE_DTV:
; 13875: 		////////////////////////////////////////
; 13876: 		{
; 13877: 			if (!comanche_damage.dtv)

  0063a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  0063f	c1 e8 02	 shr	 eax, 2
  00642	83 e0 01	 and	 eax, 1
  00645	75 0e		 jne	 SHORT $LN29@draw_overl

; 13878: 			{
; 13879: 				draw_full_screen_3d_eo_display (&comanche_dtv, TARGET_ACQUISITION_SYSTEM_DTV);

  00647	6a 04		 push	 4
  00649	68 00 00 00 00	 push	 OFFSET ?comanche_dtv@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; comanche_dtv
  0064e	e8 00 00 00 00	 call	 ?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_full_screen_3d_eo_display

; 13880: 			}
; 13881: 			else

  00653	eb 3d		 jmp	 SHORT $LN30@draw_overl
$LN29@draw_overl:

; 13882: 			{
; 13883: 				draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00655	51		 push	 ecx
  00656	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  0065e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00663	51		 push	 ecx
  00664	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  0066c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00671	51		 push	 ecx
  00672	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  0067a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0067f	51		 push	 ecx
  00680	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00688	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0068d	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background
$LN30@draw_overl:

; 13884: 			}
; 13885: 
; 13886: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00692	51		 push	 ecx
  00693	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0069b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a0	51		 push	 ecx
  006a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  006a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ae	51		 push	 ecx
  006af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  006b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006bc	51		 push	 ecx
  006bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  006c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  006cf	50		 push	 eax
  006d0	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 13887: 
; 13888: 			set_active_screen (mfd_screen);

  006d5	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  006d8	50		 push	 eax
  006d9	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 13889: 
; 13890: 			if (lock_screen (mfd_screen))

  006de	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  006e1	50		 push	 eax
  006e2	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  006e7	85 c0		 test	 eax, eax
  006e9	74 41		 je	 SHORT $LN31@draw_overl

; 13891: 			{
; 13892: 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  006eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  006f0	50		 push	 eax
  006f1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  006f7	83 e9 01	 sub	 ecx, 1
  006fa	51		 push	 ecx
  006fb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00701	83 ea 01	 sub	 edx, 1
  00704	52		 push	 edx
  00705	6a 00		 push	 0
  00707	6a 00		 push	 0
  00709	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 13893: 
; 13894: 				draw_layout_grid ();

  0070e	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 13895: 
; 13896: 				draw_2d_dtv_mfd (TRUE);

  00713	6a 01		 push	 1
  00715	e8 00 00 00 00	 call	 ?draw_2d_dtv_mfd@@YGXH@Z ; draw_2d_dtv_mfd

; 13897: 
; 13898: 				flush_screen_texture_graphics (mfd_screen);

  0071a	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0071d	50		 push	 eax
  0071e	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 13899: 
; 13900: 				unlock_screen (mfd_screen);

  00723	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00726	50		 push	 eax
  00727	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN31@draw_overl:

; 13901: 			}
; 13902: 
; 13903: 			set_pilots_full_screen_params (FALSE);

  0072c	6a 00		 push	 0
  0072e	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params

; 13904: 
; 13905: 			break;

  00733	e9 8a 08 00 00	 jmp	 $LN4@draw_overl
$LN32@draw_overl:

; 13906: 		}
; 13907: 		////////////////////////////////////////
; 13908: 		case COMANCHE_MAIN_MFD_MODE_DVO:
; 13909: 		////////////////////////////////////////
; 13910: 		{
; 13911: 			if (!comanche_damage.dvo)

  00738	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  0073d	c1 e8 03	 shr	 eax, 3
  00740	83 e0 01	 and	 eax, 1
  00743	75 0e		 jne	 SHORT $LN33@draw_overl

; 13912: 			{
; 13913: 				draw_full_screen_3d_eo_display (&comanche_dvo, TARGET_ACQUISITION_SYSTEM_DVO);

  00745	6a 05		 push	 5
  00747	68 00 00 00 00	 push	 OFFSET ?comanche_dvo@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; comanche_dvo
  0074c	e8 00 00 00 00	 call	 ?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_full_screen_3d_eo_display

; 13914: 			}
; 13915: 			else

  00751	eb 3d		 jmp	 SHORT $LN34@draw_overl
$LN33@draw_overl:

; 13916: 			{
; 13917: 				draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00753	51		 push	 ecx
  00754	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  0075c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00761	51		 push	 ecx
  00762	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  0076a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0076f	51		 push	 ecx
  00770	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00778	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077d	51		 push	 ecx
  0077e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00786	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078b	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background
$LN34@draw_overl:

; 13918: 			}
; 13919: 
; 13920: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00790	51		 push	 ecx
  00791	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00799	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079e	51		 push	 ecx
  0079f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  007a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ac	51		 push	 ecx
  007ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  007b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ba	51		 push	 ecx
  007bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  007c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  007cd	50		 push	 eax
  007ce	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 13921: 
; 13922: 			set_active_screen (mfd_screen);

  007d3	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  007d6	50		 push	 eax
  007d7	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 13923: 
; 13924: 			if (lock_screen (mfd_screen))

  007dc	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  007df	50		 push	 eax
  007e0	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  007e5	85 c0		 test	 eax, eax
  007e7	74 41		 je	 SHORT $LN35@draw_overl

; 13925: 			{
; 13926: 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  007e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  007ee	50		 push	 eax
  007ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  007f5	83 e9 01	 sub	 ecx, 1
  007f8	51		 push	 ecx
  007f9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  007ff	83 ea 01	 sub	 edx, 1
  00802	52		 push	 edx
  00803	6a 00		 push	 0
  00805	6a 00		 push	 0
  00807	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 13927: 
; 13928: 				draw_layout_grid ();

  0080c	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 13929: 
; 13930: 				draw_2d_dvo_mfd (TRUE);

  00811	6a 01		 push	 1
  00813	e8 00 00 00 00	 call	 ?draw_2d_dvo_mfd@@YGXH@Z ; draw_2d_dvo_mfd

; 13931: 
; 13932: 				flush_screen_texture_graphics (mfd_screen);

  00818	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0081b	50		 push	 eax
  0081c	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 13933: 
; 13934: 				unlock_screen (mfd_screen);

  00821	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00824	50		 push	 eax
  00825	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN35@draw_overl:

; 13935: 			}
; 13936: 
; 13937: 			set_pilots_full_screen_params (FALSE);

  0082a	6a 00		 push	 0
  0082c	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params

; 13938: 
; 13939: 			break;

  00831	e9 8c 07 00 00	 jmp	 $LN4@draw_overl
$LN36@draw_overl:

; 13940: 		}
; 13941: 		////////////////////////////////////////
; 13942: 		case COMANCHE_MAIN_MFD_MODE_TSD:
; 13943: 		////////////////////////////////////////
; 13944: 		{
; 13945: 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00836	51		 push	 ecx
  00837	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  0083f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00844	51		 push	 ecx
  00845	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  0084d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00852	51		 push	 ecx
  00853	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  0085b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00860	51		 push	 ecx
  00861	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00869	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0086e	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 13946: 
; 13947: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00873	51		 push	 ecx
  00874	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0087c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00881	51		 push	 ecx
  00882	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0088a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0088f	51		 push	 ecx
  00890	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00898	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0089d	51		 push	 ecx
  0089e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  008a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  008b0	50		 push	 eax
  008b1	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 13948: 
; 13949: 			set_active_screen (mfd_screen);

  008b6	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  008b9	50		 push	 eax
  008ba	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 13950: 
; 13951: 			if (lock_screen (mfd_screen))

  008bf	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  008c2	50		 push	 eax
  008c3	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  008c8	85 c0		 test	 eax, eax
  008ca	0f 84 5d 01 00
	00		 je	 $LN37@draw_overl

; 13952: 			{
; 13953: 				rgb_colour
; 13954: 					store_contour_colour,
; 13955: 					store_river_colour,
; 13956: 					store_road_colour;
; 13957: 
; 13958: 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  008d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  008d5	50		 push	 eax
  008d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  008dc	83 e9 01	 sub	 ecx, 1
  008df	51		 push	 ecx
  008e0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  008e6	83 ea 01	 sub	 edx, 1
  008e9	52		 push	 edx
  008ea	6a 00		 push	 0
  008ec	6a 00		 push	 0
  008ee	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 13959: 
; 13960: 				draw_layout_grid ();

  008f3	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 13961: 
; 13962: 				store_contour_colour	= MFD_CONTOUR_COLOUR;

  008f8	b8 04 00 00 00	 mov	 eax, 4
  008fd	6b c8 06	 imul	 ecx, eax, 6
  00900	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00906	89 55 f8	 mov	 DWORD PTR _store_contour_colour$8[ebp], edx

; 13963: 				store_river_colour	= MFD_RIVER_COLOUR;

  00909	b8 04 00 00 00	 mov	 eax, 4
  0090e	6b c8 07	 imul	 ecx, eax, 7
  00911	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00917	89 55 f4	 mov	 DWORD PTR _store_river_colour$7[ebp], edx

; 13964: 				store_road_colour		= MFD_ROAD_COLOUR;

  0091a	b8 04 00 00 00	 mov	 eax, 4
  0091f	c1 e0 03	 shl	 eax, 3
  00922	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00928	89 4d f0	 mov	 DWORD PTR _store_road_colour$6[ebp], ecx

; 13965: 
; 13966: 				set_rgb_colour (MFD_CONTOUR_COLOUR,   0, 151,   0, 255);

  0092b	b8 04 00 00 00	 mov	 eax, 4
  00930	6b c8 06	 imul	 ecx, eax, 6
  00933	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  0093a	b8 04 00 00 00	 mov	 eax, 4
  0093f	6b c8 06	 imul	 ecx, eax, 6
  00942	c6 81 01 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 151 ; 00000097H
  00949	b8 04 00 00 00	 mov	 eax, 4
  0094e	6b c8 06	 imul	 ecx, eax, 6
  00951	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00958	b8 04 00 00 00	 mov	 eax, 4
  0095d	6b c8 06	 imul	 ecx, eax, 6
  00960	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 13967: 				set_rgb_colour (MFD_RIVER_COLOUR,     0, 176,   0, 255);

  00967	b8 04 00 00 00	 mov	 eax, 4
  0096c	6b c8 07	 imul	 ecx, eax, 7
  0096f	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  00976	b8 04 00 00 00	 mov	 eax, 4
  0097b	6b c8 07	 imul	 ecx, eax, 7
  0097e	c6 81 01 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 176 ; 000000b0H
  00985	b8 04 00 00 00	 mov	 eax, 4
  0098a	6b c8 07	 imul	 ecx, eax, 7
  0098d	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00994	b8 04 00 00 00	 mov	 eax, 4
  00999	6b c8 07	 imul	 ecx, eax, 7
  0099c	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 13968: 				set_rgb_colour (MFD_ROAD_COLOUR,      0, 200,   0, 255);

  009a3	b8 04 00 00 00	 mov	 eax, 4
  009a8	c1 e0 03	 shl	 eax, 3
  009ab	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  009b2	b8 04 00 00 00	 mov	 eax, 4
  009b7	c1 e0 03	 shl	 eax, 3
  009ba	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  009c1	b8 04 00 00 00	 mov	 eax, 4
  009c6	c1 e0 03	 shl	 eax, 3
  009c9	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  009d0	b8 04 00 00 00	 mov	 eax, 4
  009d5	c1 e0 03	 shl	 eax, 3
  009d8	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 13969: 
; 13970: 				draw_tactical_situation_display_mfd (location);

  009df	8b 45 10	 mov	 eax, DWORD PTR _location$[ebp]
  009e2	50		 push	 eax
  009e3	e8 00 00 00 00	 call	 ?draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; draw_tactical_situation_display_mfd

; 13971: 
; 13972: 				MFD_CONTOUR_COLOUR	= store_contour_colour;

  009e8	b8 04 00 00 00	 mov	 eax, 4
  009ed	6b c8 06	 imul	 ecx, eax, 6
  009f0	8b 55 f8	 mov	 edx, DWORD PTR _store_contour_colour$8[ebp]
  009f3	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 13973: 				MFD_RIVER_COLOUR		= store_river_colour;

  009f9	b8 04 00 00 00	 mov	 eax, 4
  009fe	6b c8 07	 imul	 ecx, eax, 7
  00a01	8b 55 f4	 mov	 edx, DWORD PTR _store_river_colour$7[ebp]
  00a04	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 13974: 				MFD_ROAD_COLOUR		= store_road_colour;

  00a0a	b8 04 00 00 00	 mov	 eax, 4
  00a0f	c1 e0 03	 shl	 eax, 3
  00a12	8b 4d f0	 mov	 ecx, DWORD PTR _store_road_colour$6[ebp]
  00a15	89 88 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], ecx

; 13975: 
; 13976: 				flush_screen_texture_graphics (mfd_screen);

  00a1b	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00a1e	50		 push	 eax
  00a1f	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 13977: 
; 13978: 				unlock_screen (mfd_screen);

  00a24	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00a27	50		 push	 eax
  00a28	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN37@draw_overl:

; 13979: 			}
; 13980: 
; 13981: 			break;

  00a2d	e9 90 05 00 00	 jmp	 $LN4@draw_overl
$LN38@draw_overl:

; 13982: 		}
; 13983: 		////////////////////////////////////////
; 13984: 		case COMANCHE_MAIN_MFD_MODE_ASE:
; 13985: 		////////////////////////////////////////
; 13986: 		{
; 13987: 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00a32	51		 push	 ecx
  00a33	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00a3b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a40	51		 push	 ecx
  00a41	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00a49	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a4e	51		 push	 ecx
  00a4f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00a57	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a5c	51		 push	 ecx
  00a5d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00a65	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a6a	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 13988: 
; 13989: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00a6f	51		 push	 ecx
  00a70	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00a78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a7d	51		 push	 ecx
  00a7e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00a86	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a8b	51		 push	 ecx
  00a8c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00a94	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a99	51		 push	 ecx
  00a9a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00aa2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00aac	50		 push	 eax
  00aad	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 13990: 
; 13991: 			set_active_screen (mfd_screen);

  00ab2	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00ab5	50		 push	 eax
  00ab6	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 13992: 
; 13993: 			if (lock_screen (mfd_screen))

  00abb	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00abe	50		 push	 eax
  00abf	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00ac4	85 c0		 test	 eax, eax
  00ac6	74 43		 je	 SHORT $LN39@draw_overl

; 13994: 			{
; 13995: 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00ac8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00acd	50		 push	 eax
  00ace	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00ad4	83 e9 01	 sub	 ecx, 1
  00ad7	51		 push	 ecx
  00ad8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00ade	83 ea 01	 sub	 edx, 1
  00ae1	52		 push	 edx
  00ae2	6a 00		 push	 0
  00ae4	6a 00		 push	 0
  00ae6	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 13996: 
; 13997: 				draw_layout_grid ();

  00aeb	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 13998: 
; 13999: 				draw_aircraft_survivability_equipment_display_mfd (location);

  00af0	8b 45 10	 mov	 eax, DWORD PTR _location$[ebp]
  00af3	50		 push	 eax
  00af4	e8 00 00 00 00	 call	 ?draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; draw_aircraft_survivability_equipment_display_mfd

; 14000: 
; 14001: 				flush_screen_texture_graphics (mfd_screen);

  00af9	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00afc	50		 push	 eax
  00afd	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 14002: 
; 14003: 				unlock_screen (mfd_screen);

  00b02	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00b05	50		 push	 eax
  00b06	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN39@draw_overl:

; 14004: 			}
; 14005: 
; 14006: 			break;

  00b0b	e9 b2 04 00 00	 jmp	 $LN4@draw_overl
$LN40@draw_overl:

; 14007: 		}
; 14008: 		////////////////////////////////////////
; 14009: 		case COMANCHE_MAIN_MFD_MODE_WEAPON:
; 14010: 		////////////////////////////////////////
; 14011: 		{
; 14012: 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00b10	51		 push	 ecx
  00b11	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00b19	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b1e	51		 push	 ecx
  00b1f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00b27	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b2c	51		 push	 ecx
  00b2d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00b35	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b3a	51		 push	 ecx
  00b3b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00b43	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b48	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 14013: 
; 14014: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00b4d	51		 push	 ecx
  00b4e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00b56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b5b	51		 push	 ecx
  00b5c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00b64	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b69	51		 push	 ecx
  00b6a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00b72	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b77	51		 push	 ecx
  00b78	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00b80	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b85	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00b8a	50		 push	 eax
  00b8b	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 14015: 
; 14016: 			set_active_screen (mfd_screen);

  00b90	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00b93	50		 push	 eax
  00b94	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 14017: 
; 14018: 			if (lock_screen (mfd_screen))

  00b99	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00b9c	50		 push	 eax
  00b9d	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00ba2	85 c0		 test	 eax, eax
  00ba4	74 3f		 je	 SHORT $LN41@draw_overl

; 14019: 			{
; 14020: 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00ba6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00bab	50		 push	 eax
  00bac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00bb2	83 e9 01	 sub	 ecx, 1
  00bb5	51		 push	 ecx
  00bb6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00bbc	83 ea 01	 sub	 edx, 1
  00bbf	52		 push	 edx
  00bc0	6a 00		 push	 0
  00bc2	6a 00		 push	 0
  00bc4	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 14021: 
; 14022: 				draw_layout_grid ();

  00bc9	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 14023: 
; 14024: 				draw_weapon_display_mfd ();

  00bce	e8 00 00 00 00	 call	 ?draw_weapon_display_mfd@@YGXXZ ; draw_weapon_display_mfd

; 14025: 
; 14026: 				flush_screen_texture_graphics (mfd_screen);

  00bd3	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00bd6	50		 push	 eax
  00bd7	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 14027: 
; 14028: 				unlock_screen (mfd_screen);

  00bdc	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00bdf	50		 push	 eax
  00be0	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN41@draw_overl:

; 14029: 			}
; 14030: 
; 14031: 			break;

  00be5	e9 d8 03 00 00	 jmp	 $LN4@draw_overl
$LN42@draw_overl:

; 14032: 		}
; 14033: 		////////////////////////////////////////
; 14034: 		case COMANCHE_MAIN_MFD_MODE_SYSTEM:
; 14035: 		////////////////////////////////////////
; 14036: 		{
; 14037: 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00bea	51		 push	 ecx
  00beb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00bf3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bf8	51		 push	 ecx
  00bf9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00c01	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c06	51		 push	 ecx
  00c07	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00c0f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c14	51		 push	 ecx
  00c15	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00c1d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c22	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 14038: 
; 14039: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00c27	51		 push	 ecx
  00c28	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00c30	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c35	51		 push	 ecx
  00c36	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00c3e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c43	51		 push	 ecx
  00c44	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00c4c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c51	51		 push	 ecx
  00c52	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00c5a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c5f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00c64	50		 push	 eax
  00c65	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 14040: 
; 14041: 			set_active_screen (mfd_screen);

  00c6a	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00c6d	50		 push	 eax
  00c6e	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 14042: 
; 14043: 			if (lock_screen (mfd_screen))

  00c73	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00c76	50		 push	 eax
  00c77	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00c7c	85 c0		 test	 eax, eax
  00c7e	74 3f		 je	 SHORT $LN43@draw_overl

; 14044: 			{
; 14045: 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00c80	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00c85	50		 push	 eax
  00c86	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00c8c	83 e9 01	 sub	 ecx, 1
  00c8f	51		 push	 ecx
  00c90	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00c96	83 ea 01	 sub	 edx, 1
  00c99	52		 push	 edx
  00c9a	6a 00		 push	 0
  00c9c	6a 00		 push	 0
  00c9e	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 14046: 
; 14047: 				draw_layout_grid ();

  00ca3	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 14048: 
; 14049: 				draw_system_display_mfd ();

  00ca8	e8 00 00 00 00	 call	 ?draw_system_display_mfd@@YGXXZ ; draw_system_display_mfd

; 14050: 
; 14051: 				flush_screen_texture_graphics (mfd_screen);

  00cad	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00cb0	50		 push	 eax
  00cb1	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 14052: 
; 14053: 				unlock_screen (mfd_screen);

  00cb6	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00cb9	50		 push	 eax
  00cba	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN43@draw_overl:

; 14054: 			}
; 14055: 
; 14056: 			break;

  00cbf	e9 fe 02 00 00	 jmp	 $LN4@draw_overl
$LN44@draw_overl:

; 14057: 		}
; 14058: 		////////////////////////////////////////
; 14059: 		case COMANCHE_MAIN_MFD_MODE_ENGINE:
; 14060: 		////////////////////////////////////////
; 14061: 		{
; 14062: 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00cc4	51		 push	 ecx
  00cc5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00ccd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cd2	51		 push	 ecx
  00cd3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00cdb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ce0	51		 push	 ecx
  00ce1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00ce9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cee	51		 push	 ecx
  00cef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00cf7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cfc	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 14063: 
; 14064: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00d01	51		 push	 ecx
  00d02	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00d0a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d0f	51		 push	 ecx
  00d10	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00d18	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d1d	51		 push	 ecx
  00d1e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00d26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d2b	51		 push	 ecx
  00d2c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00d34	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d39	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00d3e	50		 push	 eax
  00d3f	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 14065: 
; 14066: 			set_active_screen (mfd_screen);

  00d44	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00d47	50		 push	 eax
  00d48	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 14067: 
; 14068: 			if (lock_screen (mfd_screen))

  00d4d	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00d50	50		 push	 eax
  00d51	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00d56	85 c0		 test	 eax, eax
  00d58	74 3f		 je	 SHORT $LN45@draw_overl

; 14069: 			{
; 14070: 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00d5a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00d5f	50		 push	 eax
  00d60	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00d66	83 e9 01	 sub	 ecx, 1
  00d69	51		 push	 ecx
  00d6a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00d70	83 ea 01	 sub	 edx, 1
  00d73	52		 push	 edx
  00d74	6a 00		 push	 0
  00d76	6a 00		 push	 0
  00d78	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 14071: 
; 14072: 				draw_layout_grid ();

  00d7d	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 14073: 
; 14074: 				draw_engine_display_mfd ();

  00d82	e8 00 00 00 00	 call	 ?draw_engine_display_mfd@@YGXXZ ; draw_engine_display_mfd

; 14075: 
; 14076: 				flush_screen_texture_graphics (mfd_screen);

  00d87	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00d8a	50		 push	 eax
  00d8b	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 14077: 
; 14078: 				unlock_screen (mfd_screen);

  00d90	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00d93	50		 push	 eax
  00d94	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN45@draw_overl:

; 14079: 			}
; 14080: 
; 14081: 			break;

  00d99	e9 24 02 00 00	 jmp	 $LN4@draw_overl
$LN46@draw_overl:

; 14082: 		}
; 14083: 		////////////////////////////////////////
; 14084: 		case COMANCHE_MAIN_MFD_MODE_FLIGHT:
; 14085: 		////////////////////////////////////////
; 14086: 		{
; 14087: 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00d9e	51		 push	 ecx
  00d9f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00da7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dac	51		 push	 ecx
  00dad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00db5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dba	51		 push	 ecx
  00dbb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00dc3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dc8	51		 push	 ecx
  00dc9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00dd1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dd6	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 14088: 
; 14089: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00ddb	51		 push	 ecx
  00ddc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00de4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00de9	51		 push	 ecx
  00dea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00df2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00df7	51		 push	 ecx
  00df8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00e00	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e05	51		 push	 ecx
  00e06	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00e0e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e13	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00e18	50		 push	 eax
  00e19	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 14090: 
; 14091: 			set_active_screen (mfd_screen);

  00e1e	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00e21	50		 push	 eax
  00e22	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 14092: 
; 14093: 			if (lock_screen (mfd_screen))

  00e27	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00e2a	50		 push	 eax
  00e2b	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00e30	85 c0		 test	 eax, eax
  00e32	0f 84 9d 00 00
	00		 je	 $LN47@draw_overl

; 14094: 			{
; 14095: 				rgb_colour
; 14096: 					store_background_colour;
; 14097: 
; 14098: 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00e38	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00e3d	50		 push	 eax
  00e3e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00e44	83 e9 01	 sub	 ecx, 1
  00e47	51		 push	 ecx
  00e48	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00e4e	83 ea 01	 sub	 edx, 1
  00e51	52		 push	 edx
  00e52	6a 00		 push	 0
  00e54	6a 00		 push	 0
  00e56	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 14099: 
; 14100: 				draw_layout_grid ();

  00e5b	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 14101: 
; 14102: 				store_background_colour = MFD_BACKGROUND_COLOUR;

  00e60	b8 04 00 00 00	 mov	 eax, 4
  00e65	6b c8 09	 imul	 ecx, eax, 9
  00e68	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e6e	89 55 ec	 mov	 DWORD PTR _store_background_colour$5[ebp], edx

; 14103: 
; 14104: 				set_rgb_colour (MFD_BACKGROUND_COLOUR, 255, 255, 255, 0);

  00e71	b8 04 00 00 00	 mov	 eax, 4
  00e76	6b c8 09	 imul	 ecx, eax, 9
  00e79	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  00e80	b8 04 00 00 00	 mov	 eax, 4
  00e85	6b c8 09	 imul	 ecx, eax, 9
  00e88	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  00e8f	b8 04 00 00 00	 mov	 eax, 4
  00e94	6b c8 09	 imul	 ecx, eax, 9
  00e97	c6 81 00 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 255 ; 000000ffH
  00e9e	b8 04 00 00 00	 mov	 eax, 4
  00ea3	6b c8 09	 imul	 ecx, eax, 9
  00ea6	c6 81 03 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 0

; 14105: 
; 14106: 				draw_flight_display_mfd ();

  00ead	e8 00 00 00 00	 call	 ?draw_flight_display_mfd@@YGXXZ ; draw_flight_display_mfd

; 14107: 
; 14108: 				MFD_BACKGROUND_COLOUR = store_background_colour;

  00eb2	b8 04 00 00 00	 mov	 eax, 4
  00eb7	6b c8 09	 imul	 ecx, eax, 9
  00eba	8b 55 ec	 mov	 edx, DWORD PTR _store_background_colour$5[ebp]
  00ebd	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 14109: 
; 14110: 				flush_screen_texture_graphics (mfd_screen);

  00ec3	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00ec6	50		 push	 eax
  00ec7	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 14111: 
; 14112: 				unlock_screen (mfd_screen);

  00ecc	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00ecf	50		 push	 eax
  00ed0	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN47@draw_overl:

; 14113: 			}
; 14114: 
; 14115: 			break;

  00ed5	e9 e8 00 00 00	 jmp	 $LN4@draw_overl
$LN48@draw_overl:

; 14116: 		}
; 14117: 		////////////////////////////////////////
; 14118: 		case COMANCHE_MAIN_MFD_MODE_MISSION:
; 14119: 		////////////////////////////////////////
; 14120: 		{
; 14121: 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00eda	51		 push	 ecx
  00edb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00ee3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ee8	51		 push	 ecx
  00ee9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00ef1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ef6	51		 push	 ecx
  00ef7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00eff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f04	51		 push	 ecx
  00f05	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00f0d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f12	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 14122: 
; 14123: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00f17	51		 push	 ecx
  00f18	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00f20	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f25	51		 push	 ecx
  00f26	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00f2e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f33	51		 push	 ecx
  00f34	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00f3c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f41	51		 push	 ecx
  00f42	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00f4a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f4f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00f54	50		 push	 eax
  00f55	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 14124: 
; 14125: 			set_active_screen (mfd_screen);

  00f5a	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00f5d	50		 push	 eax
  00f5e	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 14126: 
; 14127: 			if (lock_screen (mfd_screen))

  00f63	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00f66	50		 push	 eax
  00f67	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00f6c	85 c0		 test	 eax, eax
  00f6e	74 3f		 je	 SHORT $LN49@draw_overl

; 14128: 			{
; 14129: 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00f70	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00f75	50		 push	 eax
  00f76	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00f7c	83 e9 01	 sub	 ecx, 1
  00f7f	51		 push	 ecx
  00f80	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00f86	83 ea 01	 sub	 edx, 1
  00f89	52		 push	 edx
  00f8a	6a 00		 push	 0
  00f8c	6a 00		 push	 0
  00f8e	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 14130: 
; 14131: 				draw_layout_grid ();

  00f93	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 14132: 
; 14133: 				draw_mission_display_mfd ();

  00f98	e8 00 00 00 00	 call	 ?draw_mission_display_mfd@@YGXXZ ; draw_mission_display_mfd

; 14134: 
; 14135: 				flush_screen_texture_graphics (mfd_screen);

  00f9d	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00fa0	50		 push	 eax
  00fa1	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 14136: 
; 14137: 				unlock_screen (mfd_screen);

  00fa6	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00fa9	50		 push	 eax
  00faa	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN49@draw_overl:

; 14138: 			}
; 14139: 
; 14140: 			break;

  00faf	eb 11		 jmp	 SHORT $LN4@draw_overl
$LN50@draw_overl:

; 14141: 		}
; 14142: 		////////////////////////////////////////
; 14143: 		default:
; 14144: 		////////////////////////////////////////
; 14145: 		{
; 14146: 			debug_fatal ("Invalid main MFD mode = %d", mode);

  00fb1	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  00fb4	50		 push	 eax
  00fb5	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@EJABPDDO@Invalid?5main?5MFD?5mode?5?$DN?5?$CFd@
  00fba	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00fbf	83 c4 08	 add	 esp, 8
$LN4@draw_overl:

; 14147: 
; 14148: 			break;
; 14149: 		}
; 14150: 	}
; 14151: 
; 14152: 	set_active_screen (video_screen);

  00fc2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00fc7	50		 push	 eax
  00fc8	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 14153: 
; 14154: 	////////////////////////////////////////
; 14155: 	//
; 14156: 	// render MFD to screen
; 14157: 	//
; 14158: 	////////////////////////////////////////
; 14159: 	{
; 14160: 		vertex
; 14161: 			quad[4];
; 14162: 
; 14163: 		real_colour
; 14164: 			colour,
; 14165: 			specular;
; 14166: 
; 14167: 		set_3d_active_environment (main_3d_env);

  00fcd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  00fd2	50		 push	 eax
  00fd3	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 14168: 
; 14169: 		if (begin_3d_scene ())

  00fd8	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  00fdd	85 c0		 test	 eax, eax
  00fdf	0f 84 d0 03 00
	00		 je	 $LN51@draw_overl

; 14170: 		{
; 14171: 			set_d3d_transparency_on ();

  00fe5	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 14172: 
; 14173: 			set_d3d_zbuffer_comparison (FALSE);

  00fea	6a 00		 push	 0
  00fec	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 14174: 
; 14175: 			set_d3d_culling (FALSE);

  00ff1	6a 00		 push	 0
  00ff3	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 14176: 
; 14177: 			set_d3d_texture_wrapping (0, FALSE);

  00ff8	6a 00		 push	 0
  00ffa	6a 00		 push	 0
  00ffc	e8 00 00 00 00	 call	 ?set_d3d_texture_wrapping@@YGXHH@Z ; set_d3d_texture_wrapping

; 14178: 
; 14179: 			{
; 14180: 				int
; 14181: 					width;
; 14182: 
; 14183:    			if (application_video_width >= 1280)

  01001	81 3d 00 00 00
	00 00 05 00 00	 cmp	 DWORD PTR ?application_video_width@@3HA, 1280 ; application_video_width, 00000500H
  0100b	7c 0c		 jl	 SHORT $LN52@draw_overl

; 14184: 				{
; 14185: 					width = 1280;

  0100d	c7 85 e0 fe ff
	ff 00 05 00 00	 mov	 DWORD PTR _width$1[ebp], 1280 ; 00000500H

; 14186: 				}
; 14187: 				else

  01017	eb 0a		 jmp	 SHORT $LN53@draw_overl
$LN52@draw_overl:

; 14188: 				{
; 14189: 					width = 640;

  01019	c7 85 e0 fe ff
	ff 80 02 00 00	 mov	 DWORD PTR _width$1[ebp], 640 ; 00000280H
$LN53@draw_overl:

; 14190: 				}
; 14191: 
; 14192: 				if ((application_video_width == width) || (get_global_unscaled_displays ()))

  01023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_video_width@@3HA ; application_video_width
  01028	3b 85 e0 fe ff
	ff		 cmp	 eax, DWORD PTR _width$1[ebp]
  0102e	74 09		 je	 SHORT $LN56@draw_overl
  01030	83 3d 74 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+884, 0
  01037	74 17		 je	 SHORT $LN54@draw_overl
$LN56@draw_overl:

; 14193: 				{
; 14194: 					set_d3d_texture_mag_filtering (FALSE);

  01039	6a 00		 push	 0
  0103b	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 14195: 					set_d3d_texture_min_filtering (FALSE);

  01040	6a 00		 push	 0
  01042	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 14196: 					set_d3d_texture_mip_filtering (FALSE);

  01047	6a 00		 push	 0
  01049	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering

; 14197: 				}
; 14198: 				else

  0104e	eb 15		 jmp	 SHORT $LN55@draw_overl
$LN54@draw_overl:

; 14199: 				{
; 14200: 					set_d3d_texture_mag_filtering (TRUE);

  01050	6a 01		 push	 1
  01052	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 14201: 					set_d3d_texture_min_filtering (TRUE);

  01057	6a 01		 push	 1
  01059	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 14202: 					set_d3d_texture_mip_filtering (FALSE);

  0105e	6a 00		 push	 0
  01060	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering
$LN55@draw_overl:

; 14203: 				}
; 14204: 			}
; 14205: 
; 14206: 			set_d3d_flat_shaded_textured_renderstate (mfd_screen);

  01065	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  01068	50		 push	 eax
  01069	e8 00 00 00 00	 call	 ?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z ; set_d3d_flat_shaded_textured_renderstate

; 14207: 
; 14208:       	////////////////////////////////////////
; 14209:       	//
; 14210: 
; 14211: 			colour.red				= MFD_COLOUR1.r;

  0106e	b8 04 00 00 00	 mov	 eax, 4
  01073	6b c8 00	 imul	 ecx, eax, 0
  01076	8a 91 02 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2]
  0107c	88 95 ea fe ff
	ff		 mov	 BYTE PTR _colour$3[ebp+2], dl

; 14212: 			colour.green			= MFD_COLOUR1.g;

  01082	b8 04 00 00 00	 mov	 eax, 4
  01087	6b c8 00	 imul	 ecx, eax, 0
  0108a	8a 91 01 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1]
  01090	88 95 e9 fe ff
	ff		 mov	 BYTE PTR _colour$3[ebp+1], dl

; 14213: 			colour.blue				= MFD_COLOUR1.b;

  01096	b8 04 00 00 00	 mov	 eax, 4
  0109b	6b c8 00	 imul	 ecx, eax, 0
  0109e	8a 91 00 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  010a4	88 95 e8 fe ff
	ff		 mov	 BYTE PTR _colour$3[ebp], dl

; 14214: 			colour.alpha			= MFD_COLOUR1.a;

  010aa	b8 04 00 00 00	 mov	 eax, 4
  010af	6b c8 00	 imul	 ecx, eax, 0
  010b2	8a 91 03 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3]
  010b8	88 95 eb fe ff
	ff		 mov	 BYTE PTR _colour$3[ebp+3], dl

; 14215: 
; 14216: 			specular.red			= 0;

  010be	c6 85 e6 fe ff
	ff 00		 mov	 BYTE PTR _specular$2[ebp+2], 0

; 14217: 			specular.green			= 0;

  010c5	c6 85 e5 fe ff
	ff 00		 mov	 BYTE PTR _specular$2[ebp+1], 0

; 14218: 			specular.blue			= 0;

  010cc	c6 85 e4 fe ff
	ff 00		 mov	 BYTE PTR _specular$2[ebp], 0

; 14219: 			specular.alpha			= 255;

  010d3	c6 85 e7 fe ff
	ff ff		 mov	 BYTE PTR _specular$2[ebp+3], 255 ; 000000ffH

; 14220: 
; 14221: 			quad[0].i				= mfd_screen_x_min;

  010da	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  010df	6b c8 00	 imul	 ecx, eax, 0
  010e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  010ea	f3 0f 11 84 0d
	fc fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+16], xmm0

; 14222: 			quad[0].j	  			= mfd_screen_y_min;

  010f3	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  010f8	6b c8 00	 imul	 ecx, eax, 0
  010fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  01103	f3 0f 11 84 0d
	00 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+20], xmm0

; 14223: 			quad[0].z	  			= 0.5;

  0110c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01111	6b c8 00	 imul	 ecx, eax, 0
  01114	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0111c	f3 0f 11 84 0d
	f4 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+8], xmm0

; 14224: 			quad[0].q	  			= 0.5;

  01125	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0112a	6b c8 00	 imul	 ecx, eax, 0
  0112d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  01135	f3 0f 11 84 0d
	f8 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+12], xmm0

; 14225: 			quad[0].u	  			= 0.0;

  0113e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01143	6b c8 00	 imul	 ecx, eax, 0
  01146	0f 57 c0	 xorps	 xmm0, xmm0
  01149	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+24], xmm0

; 14226: 			quad[0].v	  			= 0.0;

  01152	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01157	6b c8 00	 imul	 ecx, eax, 0
  0115a	0f 57 c0	 xorps	 xmm0, xmm0
  0115d	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+28], xmm0

; 14227: 
; 14228: 			quad[1].i				= mfd_screen_x_max;

  01166	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0116b	c1 e0 00	 shl	 eax, 0
  0116e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  01176	f3 0f 11 84 05
	fc fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+16], xmm0

; 14229: 			quad[1].j  				= mfd_screen_y_min;

  0117f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01184	c1 e0 00	 shl	 eax, 0
  01187	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  0118f	f3 0f 11 84 05
	00 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+20], xmm0

; 14230: 			quad[1].z  				= 0.5;

  01198	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0119d	c1 e0 00	 shl	 eax, 0
  011a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  011a8	f3 0f 11 84 05
	f4 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+8], xmm0

; 14231: 			quad[1].q  				= 0.5;

  011b1	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  011b6	c1 e0 00	 shl	 eax, 0
  011b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  011c1	f3 0f 11 84 05
	f8 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+12], xmm0

; 14232: 			quad[1].u  				= 1.0;

  011ca	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  011cf	c1 e0 00	 shl	 eax, 0
  011d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  011da	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+24], xmm0

; 14233: 			quad[1].v  				= 0.0;

  011e3	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  011e8	c1 e0 00	 shl	 eax, 0
  011eb	0f 57 c0	 xorps	 xmm0, xmm0
  011ee	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+28], xmm0

; 14234: 
; 14235: 			quad[2].i				= mfd_screen_x_max;

  011f7	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  011fc	d1 e0		 shl	 eax, 1
  011fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  01206	f3 0f 11 84 05
	fc fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+16], xmm0

; 14236: 			quad[2].j 				= mfd_screen_y_max;

  0120f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01214	d1 e0		 shl	 eax, 1
  01216	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  0121e	f3 0f 11 84 05
	00 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+20], xmm0

; 14237: 			quad[2].z  				= 0.5;

  01227	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0122c	d1 e0		 shl	 eax, 1
  0122e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  01236	f3 0f 11 84 05
	f4 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+8], xmm0

; 14238: 			quad[2].q  				= 0.5;

  0123f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01244	d1 e0		 shl	 eax, 1
  01246	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0124e	f3 0f 11 84 05
	f8 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+12], xmm0

; 14239: 			quad[2].u  				= 1.0;

  01257	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0125c	d1 e0		 shl	 eax, 1
  0125e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01266	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+24], xmm0

; 14240: 			quad[2].v  				= 1.0;

  0126f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01274	d1 e0		 shl	 eax, 1
  01276	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0127e	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+28], xmm0

; 14241: 
; 14242: 			quad[3].i				= mfd_screen_x_min;

  01287	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0128c	6b c8 03	 imul	 ecx, eax, 3
  0128f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  01297	f3 0f 11 84 0d
	fc fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+16], xmm0

; 14243: 			quad[3].j				= mfd_screen_y_max;

  012a0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  012a5	6b c8 03	 imul	 ecx, eax, 3
  012a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  012b0	f3 0f 11 84 0d
	00 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+20], xmm0

; 14244: 			quad[3].z				= 0.5;

  012b9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  012be	6b c8 03	 imul	 ecx, eax, 3
  012c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  012c9	f3 0f 11 84 0d
	f4 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+8], xmm0

; 14245: 			quad[3].q				= 0.5;

  012d2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  012d7	6b c8 03	 imul	 ecx, eax, 3
  012da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  012e2	f3 0f 11 84 0d
	f8 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+12], xmm0

; 14246: 			quad[3].u				= 0.0;

  012eb	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  012f0	6b c8 03	 imul	 ecx, eax, 3
  012f3	0f 57 c0	 xorps	 xmm0, xmm0
  012f6	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+24], xmm0

; 14247: 			quad[3].v				= 1.0;

  012ff	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01304	6b c8 03	 imul	 ecx, eax, 3
  01307	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0130f	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+28], xmm0

; 14248: 
; 14249: 			quad[0].next_vertex	= &quad[1];

  01318	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0131d	c1 e0 00	 shl	 eax, 0
  01320	8d 8c 05 ec fe
	ff ff		 lea	 ecx, DWORD PTR _quad$4[ebp+eax]
  01327	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0132c	6b c2 00	 imul	 eax, edx, 0
  0132f	89 8c 05 14 ff
	ff ff		 mov	 DWORD PTR _quad$4[ebp+eax+40], ecx

; 14250: 			quad[1].next_vertex	= &quad[2];

  01336	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0133b	d1 e0		 shl	 eax, 1
  0133d	8d 8c 05 ec fe
	ff ff		 lea	 ecx, DWORD PTR _quad$4[ebp+eax]
  01344	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  01349	c1 e2 00	 shl	 edx, 0
  0134c	89 8c 15 14 ff
	ff ff		 mov	 DWORD PTR _quad$4[ebp+edx+40], ecx

; 14251: 			quad[2].next_vertex	= &quad[3];

  01353	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01358	6b c8 03	 imul	 ecx, eax, 3
  0135b	8d 94 0d ec fe
	ff ff		 lea	 edx, DWORD PTR _quad$4[ebp+ecx]
  01362	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01367	d1 e0		 shl	 eax, 1
  01369	89 94 05 14 ff
	ff ff		 mov	 DWORD PTR _quad$4[ebp+eax+40], edx

; 14252: 			quad[3].next_vertex	= NULL;

  01370	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01375	6b c8 03	 imul	 ecx, eax, 3
  01378	c7 84 0d 14 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$4[ebp+ecx+40], 0

; 14253: 
; 14254:       	//
; 14255:       	////////////////////////////////////////
; 14256: 
; 14257: 			draw_wbuffered_flat_shaded_textured_polygon (quad, colour, specular);

  01383	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _specular$2[ebp]
  01389	50		 push	 eax
  0138a	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _colour$3[ebp]
  01390	51		 push	 ecx
  01391	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR _quad$4[ebp]
  01397	52		 push	 edx
  01398	e8 00 00 00 00	 call	 ?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_flat_shaded_textured_polygon

; 14258: 
; 14259: 			set_d3d_transparency_off ();

  0139d	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 14260: 
; 14261: 			set_d3d_zbuffer_comparison (TRUE);

  013a2	6a 01		 push	 1
  013a4	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 14262: 
; 14263: 			set_d3d_culling (TRUE);

  013a9	6a 01		 push	 1
  013ab	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 14264: 
; 14265: 			end_3d_scene ();

  013b0	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN51@draw_overl:
$LN1@draw_overl:

; 14266: 		}
; 14267: 	}
; 14268: }

  013b5	5f		 pop	 edi
  013b6	5e		 pop	 esi
  013b7	5b		 pop	 ebx
  013b8	8b e5		 mov	 esp, ebp
  013ba	5d		 pop	 ebp
  013bb	c2 0c 00	 ret	 12			; 0000000cH
  013be	66 90		 npad	 2
$LN58@draw_overl:
  013c0	00 00 00 00	 DD	 $LN14@draw_overl
  013c4	00 00 00 00	 DD	 $LN15@draw_overl
  013c8	00 00 00 00	 DD	 $LN14@draw_overl
  013cc	00 00 00 00	 DD	 $LN15@draw_overl
$LN59@draw_overl:
  013d0	00 00 00 00	 DD	 $LN16@draw_overl
  013d4	00 00 00 00	 DD	 $LN18@draw_overl
  013d8	00 00 00 00	 DD	 $LN20@draw_overl
  013dc	00 00 00 00	 DD	 $LN22@draw_overl
  013e0	00 00 00 00	 DD	 $LN24@draw_overl
  013e4	00 00 00 00	 DD	 $LN28@draw_overl
  013e8	00 00 00 00	 DD	 $LN32@draw_overl
  013ec	00 00 00 00	 DD	 $LN36@draw_overl
  013f0	00 00 00 00	 DD	 $LN38@draw_overl
  013f4	00 00 00 00	 DD	 $LN40@draw_overl
  013f8	00 00 00 00	 DD	 $LN42@draw_overl
  013fc	00 00 00 00	 DD	 $LN44@draw_overl
  01400	00 00 00 00	 DD	 $LN46@draw_overl
  01404	00 00 00 00	 DD	 $LN48@draw_overl
?draw_overlaid_main_mfd@@YGXPAUSCREEN@@W4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ENDP ; draw_overlaid_main_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_translucent_mfd_background@@YGXMMMM@Z
_TEXT	SEGMENT
_specular$ = -264					; size = 4
_colour$ = -260						; size = 4
_quad$ = -256						; size = 256
_x_min$ = 8						; size = 4
_y_min$ = 12						; size = 4
_x_max$ = 16						; size = 4
_y_max$ = 20						; size = 4
?draw_translucent_mfd_background@@YGXMMMM@Z PROC	; draw_translucent_mfd_background, COMDAT

; 13600: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 48 01 00
	00		 sub	 esp, 328		; 00000148H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 13601: 	vertex
; 13602: 		quad[4];
; 13603: 
; 13604: 	real_colour
; 13605: 		colour,
; 13606: 		specular;
; 13607: 
; 13608: 	set_3d_active_environment (main_3d_env);

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 13609: 
; 13610: 	if (begin_3d_scene ())

  00017	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  0001c	85 c0		 test	 eax, eax
  0001e	0f 84 5a 02 00
	00		 je	 $LN2@draw_trans

; 13611: 	{
; 13612: 		colour.red = 0;

  00024	c6 85 fe fe ff
	ff 00		 mov	 BYTE PTR _colour$[ebp+2], 0

; 13613: 		colour.green = 0;

  0002b	c6 85 fd fe ff
	ff 00		 mov	 BYTE PTR _colour$[ebp+1], 0

; 13614: 		colour.blue = 0;

  00032	c6 85 fc fe ff
	ff 00		 mov	 BYTE PTR _colour$[ebp], 0

; 13615: 		colour.alpha = 64;

  00039	c6 85 ff fe ff
	ff 40		 mov	 BYTE PTR _colour$[ebp+3], 64 ; 00000040H

; 13616: 
; 13617: 		specular.red = 0;

  00040	c6 85 fa fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+2], 0

; 13618: 		specular.green = 0;

  00047	c6 85 f9 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+1], 0

; 13619: 		specular.blue = 0;

  0004e	c6 85 f8 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp], 0

; 13620: 		specular.alpha = 255;

  00055	c6 85 fb fe ff
	ff ff		 mov	 BYTE PTR _specular$[ebp+3], 255 ; 000000ffH

; 13621: 
; 13622: 		set_d3d_transparency_on ();

  0005c	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 13623: 
; 13624: 		set_d3d_zbuffer_comparison (FALSE);

  00061	6a 00		 push	 0
  00063	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 13625: 
; 13626: 		set_d3d_plain_renderstate ();

  00068	e8 00 00 00 00	 call	 ?set_d3d_plain_renderstate@@YGXXZ ; set_d3d_plain_renderstate

; 13627: 
; 13628: 		set_d3d_culling (FALSE);

  0006d	6a 00		 push	 0
  0006f	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 13629: 
; 13630: 		quad[0].i = x_min;

  00074	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00079	6b c8 00	 imul	 ecx, eax, 0
  0007c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00081	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 13631: 		quad[0].j = y_min;

  0008a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0008f	6b c8 00	 imul	 ecx, eax, 0
  00092	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  00097	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 13632: 		quad[0].z = 0.5;

  000a0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000a5	6b c8 00	 imul	 ecx, eax, 0
  000a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000b0	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 13633: 		quad[0].q = 0.5;

  000b9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000be	6b c8 00	 imul	 ecx, eax, 0
  000c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000c9	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 13634: 		quad[0].next_vertex = &quad[1];

  000d2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000d7	c1 e0 00	 shl	 eax, 0
  000da	8d 8c 05 00 ff
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  000e1	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000e6	6b c2 00	 imul	 eax, edx, 0
  000e9	89 8c 05 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], ecx

; 13635: 
; 13636: 		quad[1].i = x_max;

  000f0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000f5	c1 e0 00	 shl	 eax, 0
  000f8	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  000fd	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 13637: 		quad[1].j = y_min;

  00106	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0010b	c1 e0 00	 shl	 eax, 0
  0010e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  00113	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 13638: 		quad[1].z = 0.5;

  0011c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00121	c1 e0 00	 shl	 eax, 0
  00124	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0012c	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 13639: 		quad[1].q = 0.5;

  00135	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0013a	c1 e0 00	 shl	 eax, 0
  0013d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00145	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 13640: 		quad[1].next_vertex = &quad[2];

  0014e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00153	d1 e0		 shl	 eax, 1
  00155	8d 8c 05 00 ff
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  0015c	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00161	c1 e2 00	 shl	 edx, 0
  00164	89 8c 15 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+edx+40], ecx

; 13641: 
; 13642: 		quad[2].i = x_max;

  0016b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00170	d1 e0		 shl	 eax, 1
  00172	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00177	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 13643: 		quad[2].j = y_max;

  00180	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00185	d1 e0		 shl	 eax, 1
  00187	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  0018c	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 13644: 		quad[2].z = 0.5;

  00195	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0019a	d1 e0		 shl	 eax, 1
  0019c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001a4	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 13645: 		quad[2].q = 0.5;

  001ad	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001b2	d1 e0		 shl	 eax, 1
  001b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001bc	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 13646: 		quad[2].next_vertex = &quad[3];

  001c5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001ca	6b c8 03	 imul	 ecx, eax, 3
  001cd	8d 94 0d 00 ff
	ff ff		 lea	 edx, DWORD PTR _quad$[ebp+ecx]
  001d4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001d9	d1 e0		 shl	 eax, 1
  001db	89 94 05 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], edx

; 13647: 
; 13648: 		quad[3].i = x_min;

  001e2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001e7	6b c8 03	 imul	 ecx, eax, 3
  001ea	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  001ef	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 13649: 		quad[3].j = y_max;

  001f8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001fd	6b c8 03	 imul	 ecx, eax, 3
  00200	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  00205	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 13650: 		quad[3].z = 0.5;

  0020e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00213	6b c8 03	 imul	 ecx, eax, 3
  00216	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0021e	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 13651: 		quad[3].q = 0.5;

  00227	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0022c	6b c8 03	 imul	 ecx, eax, 3
  0022f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00237	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 13652: 		quad[3].next_vertex = NULL;

  00240	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00245	6b c8 03	 imul	 ecx, eax, 3
  00248	c7 84 0d 28 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$[ebp+ecx+40], 0

; 13653: 
; 13654: 		draw_wbuffered_plain_polygon (quad, colour, specular);

  00253	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _specular$[ebp]
  00259	50		 push	 eax
  0025a	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _colour$[ebp]
  00260	51		 push	 ecx
  00261	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR _quad$[ebp]
  00267	52		 push	 edx
  00268	e8 00 00 00 00	 call	 ?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_plain_polygon

; 13655: 
; 13656: 		set_d3d_transparency_off ();

  0026d	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 13657: 
; 13658: 		set_d3d_zbuffer_comparison (TRUE);

  00272	6a 01		 push	 1
  00274	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 13659: 
; 13660: 		end_3d_scene ();

  00279	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN2@draw_trans:

; 13661: 	}
; 13662: }

  0027e	5f		 pop	 edi
  0027f	5e		 pop	 esi
  00280	5b		 pop	 ebx
  00281	8b e5		 mov	 esp, ebp
  00283	5d		 pop	 ebp
  00284	c2 10 00	 ret	 16			; 00000010H
?draw_translucent_mfd_background@@YGXMMMM@Z ENDP	; draw_translucent_mfd_background
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?initalize_horizon_mask@@YGXHPAPAD@Z
_TEXT	SEGMENT
tv211 = -112						; size = 4
tv216 = -108						; size = 4
_x_limit$1 = -40					; size = 4
_height_val$2 = -36					; size = 4
_semi_begin$ = -32					; size = 4
_semi_radius$ = -28					; size = 4
_side_border_width$ = -24				; size = 4
_height$ = -20						; size = 4
_horizon_mask$ = -16					; size = 4
_row$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_width$ = 8						; size = 4
_mask$ = 12						; size = 4
?initalize_horizon_mask@@YGXHPAPAD@Z PROC		; initalize_horizon_mask, COMDAT

; 12451: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12452: 	int i,j;
; 12453: 	char *row;
; 12454: 	char* horizon_mask;
; 12455: 	int height = LARGE_MFD_VIEWPORT_SIZE * 0.62;

  00009	c7 45 ec 9e 00
	00 00		 mov	 DWORD PTR _height$[ebp], 158 ; 0000009eH

; 12456: 	int side_border_width = LARGE_MFD_VIEWPORT_SIZE * 0.175;

  00010	c7 45 e8 2c 00
	00 00		 mov	 DWORD PTR _side_border_width$[ebp], 44 ; 0000002cH

; 12457: 	int semi_radius = ((width - 2*side_border_width) / 2);

  00017	8b 45 e8	 mov	 eax, DWORD PTR _side_border_width$[ebp]
  0001a	d1 e0		 shl	 eax, 1
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  0001f	2b c8		 sub	 ecx, eax
  00021	8b c1		 mov	 eax, ecx
  00023	99		 cdq
  00024	2b c2		 sub	 eax, edx
  00026	d1 f8		 sar	 eax, 1
  00028	89 45 e4	 mov	 DWORD PTR _semi_radius$[ebp], eax

; 12458: 	int semi_begin = height - 2 - semi_radius;

  0002b	8b 45 ec	 mov	 eax, DWORD PTR _height$[ebp]
  0002e	83 e8 02	 sub	 eax, 2
  00031	2b 45 e4	 sub	 eax, DWORD PTR _semi_radius$[ebp]
  00034	89 45 e0	 mov	 DWORD PTR _semi_begin$[ebp], eax

; 12459: 
; 12460: 	if (*mask)

  00037	8b 45 0c	 mov	 eax, DWORD PTR _mask$[ebp]
  0003a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0003d	74 0b		 je	 SHORT $LN8@initalize_

; 12461: 		safe_free(*mask);

  0003f	8b 45 0c	 mov	 eax, DWORD PTR _mask$[ebp]
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free
$LN8@initalize_:

; 12462: 	horizon_mask = (char *) safe_malloc((width * height) + 4);

  0004a	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  0004d	0f af 45 ec	 imul	 eax, DWORD PTR _height$[ebp]
  00051	83 c0 04	 add	 eax, 4
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0005a	89 45 f0	 mov	 DWORD PTR _horizon_mask$[ebp], eax

; 12463: 	*mask = horizon_mask;

  0005d	8b 45 0c	 mov	 eax, DWORD PTR _mask$[ebp]
  00060	8b 4d f0	 mov	 ecx, DWORD PTR _horizon_mask$[ebp]
  00063	89 08		 mov	 DWORD PTR [eax], ecx

; 12464: 
; 12465: 	horizon_mask[0] = width;

  00065	b8 01 00 00 00	 mov	 eax, 1
  0006a	6b c8 00	 imul	 ecx, eax, 0
  0006d	8b 55 f0	 mov	 edx, DWORD PTR _horizon_mask$[ebp]
  00070	8a 45 08	 mov	 al, BYTE PTR _width$[ebp]
  00073	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 12466: 	horizon_mask[1] = height;

  00076	b8 01 00 00 00	 mov	 eax, 1
  0007b	c1 e0 00	 shl	 eax, 0
  0007e	8b 4d f0	 mov	 ecx, DWORD PTR _horizon_mask$[ebp]
  00081	8a 55 ec	 mov	 dl, BYTE PTR _height$[ebp]
  00084	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 12467: 	horizon_mask[2] = -(width / 2);

  00087	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  0008a	99		 cdq
  0008b	2b c2		 sub	 eax, edx
  0008d	d1 f8		 sar	 eax, 1
  0008f	f7 d8		 neg	 eax
  00091	b9 01 00 00 00	 mov	 ecx, 1
  00096	d1 e1		 shl	 ecx, 1
  00098	8b 55 f0	 mov	 edx, DWORD PTR _horizon_mask$[ebp]
  0009b	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 12468: 	horizon_mask[3] = 0;

  0009e	b8 01 00 00 00	 mov	 eax, 1
  000a3	6b c8 03	 imul	 ecx, eax, 3
  000a6	8b 55 f0	 mov	 edx, DWORD PTR _horizon_mask$[ebp]
  000a9	c6 04 0a 00	 mov	 BYTE PTR [edx+ecx], 0

; 12469: 
; 12470: 	for (i = 0; i < height; i++)

  000ad	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000b4	eb 09		 jmp	 SHORT $LN4@initalize_
$LN2@initalize_:
  000b6	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000b9	83 c0 01	 add	 eax, 1
  000bc	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@initalize_:
  000bf	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000c2	3b 45 ec	 cmp	 eax, DWORD PTR _height$[ebp]
  000c5	0f 8d 18 01 00
	00		 jge	 $LN3@initalize_

; 12471: 	{
; 12472: 		row = &horizon_mask[4 + (i*width)];

  000cb	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000ce	0f af 45 08	 imul	 eax, DWORD PTR _width$[ebp]
  000d2	8b 4d f0	 mov	 ecx, DWORD PTR _horizon_mask$[ebp]
  000d5	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  000d9	89 55 f4	 mov	 DWORD PTR _row$[ebp], edx

; 12473: 		for (j = 0; j < width; j++)

  000dc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  000e3	eb 09		 jmp	 SHORT $LN7@initalize_
$LN5@initalize_:
  000e5	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  000e8	83 c0 01	 add	 eax, 1
  000eb	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax
$LN7@initalize_:
  000ee	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  000f1	3b 45 08	 cmp	 eax, DWORD PTR _width$[ebp]
  000f4	0f 8d e4 00 00
	00		 jge	 $LN6@initalize_

; 12474: 		{
; 12475: 			if (i < 2 || i >= semi_begin + semi_radius)

  000fa	83 7d fc 02	 cmp	 DWORD PTR _i$[ebp], 2
  000fe	7c 0b		 jl	 SHORT $LN10@initalize_
  00100	8b 45 e0	 mov	 eax, DWORD PTR _semi_begin$[ebp]
  00103	03 45 e4	 add	 eax, DWORD PTR _semi_radius$[ebp]
  00106	39 45 fc	 cmp	 DWORD PTR _i$[ebp], eax
  00109	7c 0b		 jl	 SHORT $LN9@initalize_
$LN10@initalize_:

; 12476: 			{
; 12477: 				row[j] = 1;

  0010b	8b 45 f4	 mov	 eax, DWORD PTR _row$[ebp]
  0010e	03 45 f8	 add	 eax, DWORD PTR _j$[ebp]
  00111	c6 00 01	 mov	 BYTE PTR [eax], 1

; 12478: 				continue;

  00114	eb cf		 jmp	 SHORT $LN5@initalize_
$LN9@initalize_:

; 12479: 			}
; 12480: 
; 12481: 			if (i < semi_begin)

  00116	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00119	3b 45 e0	 cmp	 eax, DWORD PTR _semi_begin$[ebp]
  0011c	7d 2c		 jge	 SHORT $LN11@initalize_

; 12482: 			{
; 12483: 				if (j < side_border_width || j >= (width - side_border_width))

  0011e	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  00121	3b 45 e8	 cmp	 eax, DWORD PTR _side_border_width$[ebp]
  00124	7c 0b		 jl	 SHORT $LN15@initalize_
  00126	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  00129	2b 45 e8	 sub	 eax, DWORD PTR _side_border_width$[ebp]
  0012c	39 45 f8	 cmp	 DWORD PTR _j$[ebp], eax
  0012f	7c 0b		 jl	 SHORT $LN13@initalize_
$LN15@initalize_:

; 12484: 					row[j] = 1;

  00131	8b 45 f4	 mov	 eax, DWORD PTR _row$[ebp]
  00134	03 45 f8	 add	 eax, DWORD PTR _j$[ebp]
  00137	c6 00 01	 mov	 BYTE PTR [eax], 1

; 12485: 				else

  0013a	eb 09		 jmp	 SHORT $LN14@initalize_
$LN13@initalize_:

; 12486: 					row[j] = 0;

  0013c	8b 45 f4	 mov	 eax, DWORD PTR _row$[ebp]
  0013f	03 45 f8	 add	 eax, DWORD PTR _j$[ebp]
  00142	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN14@initalize_:

; 12487: 			}
; 12488: 			else

  00145	e9 8f 00 00 00	 jmp	 $LN17@initalize_
$LN11@initalize_:

; 12489: 			{
; 12490: 				float height_val = ((float)i - semi_begin);

  0014a	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _i$[ebp]
  0014f	f3 0f 2a 4d e0	 cvtsi2ss xmm1, DWORD PTR _semi_begin$[ebp]
  00154	f3 0f 5c c1	 subss	 xmm0, xmm1
  00158	f3 0f 11 45 dc	 movss	 DWORD PTR _height_val$2[ebp], xmm0

; 12491: 				float x_limit = side_border_width + semi_radius - sqrt((semi_radius * semi_radius) - (height_val * height_val));

  0015d	8b 45 e8	 mov	 eax, DWORD PTR _side_border_width$[ebp]
  00160	03 45 e4	 add	 eax, DWORD PTR _semi_radius$[ebp]
  00163	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00167	8b 4d e4	 mov	 ecx, DWORD PTR _semi_radius$[ebp]
  0016a	0f af 4d e4	 imul	 ecx, DWORD PTR _semi_radius$[ebp]
  0016e	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  00172	f3 0f 10 55 dc	 movss	 xmm2, DWORD PTR _height_val$2[ebp]
  00177	f3 0f 59 55 dc	 mulss	 xmm2, DWORD PTR _height_val$2[ebp]
  0017c	f3 0f 5c ca	 subss	 xmm1, xmm2
  00180	51		 push	 ecx
  00181	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00186	f3 0f 11 45 94	 movss	 DWORD PTR tv216[ebp], xmm0
  0018b	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  00190	d9 5d 90	 fstp	 DWORD PTR tv211[ebp]
  00193	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR tv216[ebp]
  00198	f3 0f 5c 45 90	 subss	 xmm0, DWORD PTR tv211[ebp]
  0019d	f3 0f 11 45 d8	 movss	 DWORD PTR _x_limit$1[ebp], xmm0

; 12492: 
; 12493: 				if (j < x_limit || j >= (width - x_limit))

  001a2	f3 0f 2a 45 f8	 cvtsi2ss xmm0, DWORD PTR _j$[ebp]
  001a7	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _x_limit$1[ebp]
  001ac	0f 2f c8	 comiss	 xmm1, xmm0
  001af	77 14		 ja	 SHORT $LN18@initalize_
  001b1	f3 0f 2a 45 f8	 cvtsi2ss xmm0, DWORD PTR _j$[ebp]
  001b6	f3 0f 2a 4d 08	 cvtsi2ss xmm1, DWORD PTR _width$[ebp]
  001bb	f3 0f 5c 4d d8	 subss	 xmm1, DWORD PTR _x_limit$1[ebp]
  001c0	0f 2f c1	 comiss	 xmm0, xmm1
  001c3	72 0b		 jb	 SHORT $LN16@initalize_
$LN18@initalize_:

; 12494: 					row[j] = 1;

  001c5	8b 45 f4	 mov	 eax, DWORD PTR _row$[ebp]
  001c8	03 45 f8	 add	 eax, DWORD PTR _j$[ebp]
  001cb	c6 00 01	 mov	 BYTE PTR [eax], 1

; 12495: 				else

  001ce	eb 09		 jmp	 SHORT $LN17@initalize_
$LN16@initalize_:

; 12496: 					row[j] = 0;

  001d0	8b 45 f4	 mov	 eax, DWORD PTR _row$[ebp]
  001d3	03 45 f8	 add	 eax, DWORD PTR _j$[ebp]
  001d6	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN17@initalize_:

; 12497: 			}
; 12498: 		}

  001d9	e9 07 ff ff ff	 jmp	 $LN5@initalize_
$LN6@initalize_:

; 12499: 	}

  001de	e9 d3 fe ff ff	 jmp	 $LN2@initalize_
$LN3@initalize_:

; 12500: }

  001e3	5f		 pop	 edi
  001e4	5e		 pop	 esi
  001e5	5b		 pop	 ebx
  001e6	8b e5		 mov	 esp, ebp
  001e8	5d		 pop	 ebp
  001e9	c2 08 00	 ret	 8
?initalize_horizon_mask@@YGXHPAPAD@Z ENDP		; initalize_horizon_mask
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_text_display@@YGXPAUSCREEN@@@Z
_TEXT	SEGMENT
_text_screen$ = 8					; size = 4
?draw_text_display@@YGXPAUSCREEN@@@Z PROC		; draw_text_display, COMDAT

; 12396: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12397: 	ASSERT (text_screen);

  00009	83 7d 08 00	 cmp	 DWORD PTR _text_screen$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@draw_text_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_text_display@@YGXPAUSCREEN@@@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CPFKEDIA@text_screen@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@draw_text_:

; 12398: 
; 12399: 	set_active_screen (text_screen);

  00027	8b 45 08	 mov	 eax, DWORD PTR _text_screen$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 12400: 
; 12401: 	if (lock_screen (text_screen))

  00030	8b 45 08	 mov	 eax, DWORD PTR _text_screen$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00039	85 c0		 test	 eax, eax
  0003b	0f 84 a6 01 00
	00		 je	 $LN3@draw_text_

; 12402: 	{
; 12403: 		set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, TEXT_BACKGROUND_COLOUR);

  00041	b8 04 00 00 00	 mov	 eax, 4
  00046	c1 e0 00	 shl	 eax, 0
  00049	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax]
  0004f	51		 push	 ecx
  00050	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00056	83 ea 01	 sub	 edx, 1
  00059	52		 push	 edx
  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?int_mfd_viewport_size@@3HA
  0005f	83 e8 01	 sub	 eax, 1
  00062	50		 push	 eax
  00063	6a 00		 push	 0
  00065	6a 00		 push	 0
  00067	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 12404: 
; 12405: 		draw_layout_grid ();

  0006c	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 12406: 
; 12407: 		set_mono_font_colour (TEXT_COLOUR1);

  00071	b8 04 00 00 00	 mov	 eax, 4
  00076	6b c8 00	 imul	 ecx, eax, 0
  00079	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx]
  0007f	52		 push	 edx
  00080	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 12408: 
; 12409: 		if (draw_large_mfd)

  00085	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0008c	0f 84 a4 00 00
	00		 je	 $LN4@draw_text_

; 12410: 		{
; 12411: 			set_mono_font_type (MONO_FONT_TYPE_7X12);

  00092	6a 05		 push	 5
  00094	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 12412: 
; 12413: 			set_2d_mono_font_position (-1.0, 1.0);

  00099	51		 push	 ecx
  0009a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a7	51		 push	 ecx
  000a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b5	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 12414: 
; 12415: 			set_mono_font_rel_position (3.0, 5.0);

  000ba	51		 push	 ecx
  000bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  000c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c8	51		 push	 ecx
  000c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  000d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d6	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 12416: 
; 12417: 			print_mono_font_string (text_display_line1);

  000db	68 00 00 00 00	 push	 OFFSET ?text_display_line1@@3PADA
  000e0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 12418: 
; 12419: 			set_2d_mono_font_position (-1.0, 1.0);

  000e5	51		 push	 ecx
  000e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f3	51		 push	 ecx
  000f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00101	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 12420: 
; 12421: 			set_mono_font_rel_position (3.0, 19.0);

  00106	51		 push	 ecx
  00107	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41980000
  0010f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00114	51		 push	 ecx
  00115	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  0011d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00122	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 12422: 
; 12423: 			print_mono_font_string (text_display_line2);

  00127	68 00 00 00 00	 push	 OFFSET ?text_display_line2@@3PADA
  0012c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 12424: 		}
; 12425: 		else

  00131	e9 9f 00 00 00	 jmp	 $LN5@draw_text_
$LN4@draw_text_:

; 12426: 		{
; 12427: 			set_mono_font_type (MONO_FONT_TYPE_3X6);

  00136	6a 00		 push	 0
  00138	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 12428: 
; 12429: 			set_2d_mono_font_position (-1.0, 1.0);

  0013d	51		 push	 ecx
  0013e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00146	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014b	51		 push	 ecx
  0014c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00154	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00159	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 12430: 
; 12431: 			set_mono_font_rel_position (2.0, 3.0);

  0015e	51		 push	 ecx
  0015f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  00167	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016c	51		 push	 ecx
  0016d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00175	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 12432: 
; 12433: 			print_mono_font_string (text_display_line1);

  0017f	68 00 00 00 00	 push	 OFFSET ?text_display_line1@@3PADA
  00184	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 12434: 
; 12435: 			set_2d_mono_font_position (-1.0, 1.0);

  00189	51		 push	 ecx
  0018a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00192	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00197	51		 push	 ecx
  00198	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  001a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a5	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 12436: 
; 12437: 			set_mono_font_rel_position (2.0, 10.0);

  001aa	51		 push	 ecx
  001ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  001b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b8	51		 push	 ecx
  001b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  001c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c6	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 12438: 
; 12439: 			print_mono_font_string (text_display_line2);

  001cb	68 00 00 00 00	 push	 OFFSET ?text_display_line2@@3PADA
  001d0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN5@draw_text_:

; 12440: 		}
; 12441: 
; 12442: 		flush_screen_texture_graphics (text_screen);

  001d5	8b 45 08	 mov	 eax, DWORD PTR _text_screen$[ebp]
  001d8	50		 push	 eax
  001d9	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 12443: 
; 12444: 		unlock_screen (text_screen);

  001de	8b 45 08	 mov	 eax, DWORD PTR _text_screen$[ebp]
  001e1	50		 push	 eax
  001e2	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN3@draw_text_:

; 12445: 	}
; 12446: 
; 12447: 	set_active_screen (video_screen);

  001e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  001ec	50		 push	 eax
  001ed	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 12448: }

  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	5b		 pop	 ebx
  001f5	8b e5		 mov	 esp, ebp
  001f7	5d		 pop	 ebp
  001f8	c2 04 00	 ret	 4
?draw_text_display@@YGXPAUSCREEN@@@Z ENDP		; draw_text_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_side_mfd@@YGXPAUSCREEN@@W4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv94 = -68						; size = 4
_mfd_screen$ = 8					; size = 4
_mode$ = 12						; size = 4
_location$ = 16						; size = 4
?draw_side_mfd@@YGXPAUSCREEN@@W4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z PROC ; draw_side_mfd, COMDAT

; 12308: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12309: 	ASSERT (mfd_screen);

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_screen$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN4@draw_side_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_side_mfd@@YGXPAUSCREEN@@W4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DHCAJMOH@mfd_screen@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_side_:

; 12310: 
; 12311: 	ASSERT (comanche_side_mfd_mode_valid (mode));

  00027	83 7d 0c 00	 cmp	 DWORD PTR _mode$[ebp], 0
  0002b	7c 06		 jl	 SHORT $LN6@draw_side_
  0002d	83 7d 0c 06	 cmp	 DWORD PTR _mode$[ebp], 6
  00031	7c 18		 jl	 SHORT $LN5@draw_side_
$LN6@draw_side_:
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_side_mfd@@YGXPAUSCREEN@@W4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA
  00038	83 c0 03	 add	 eax, 3
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@MAAALHOP@comanche_side_mfd_mode_valid?5?$CIm@
  00046	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@draw_side_:

; 12312: 
; 12313: 	ASSERT (comanche_side_mfd_location_valid (location));

  0004b	83 7d 10 00	 cmp	 DWORD PTR _location$[ebp], 0
  0004f	7c 06		 jl	 SHORT $LN8@draw_side_
  00051	83 7d 10 04	 cmp	 DWORD PTR _location$[ebp], 4
  00055	7c 18		 jl	 SHORT $LN7@draw_side_
$LN8@draw_side_:
  00057	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_side_mfd@@YGXPAUSCREEN@@W4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA
  0005c	83 c0 05	 add	 eax, 5
  0005f	50		 push	 eax
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@KFPJDBMG@comanche_side_mfd_location_vali@
  0006a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@draw_side_:

; 12314: 
; 12315: 	draw_main_display = FALSE;

  0006f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_main_display@@3HA, 0

; 12316: 
; 12317: 	set_active_screen (mfd_screen);

  00079	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 12318: 
; 12319: 	if (lock_screen (mfd_screen))

  00082	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0008b	85 c0		 test	 eax, eax
  0008d	0f 84 8e 00 00
	00		 je	 $LN9@draw_side_

; 12320: 	{
; 12321: 		set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, MFD_BACKGROUND_COLOUR);

  00093	b8 04 00 00 00	 mov	 eax, 4
  00098	6b c8 09	 imul	 ecx, eax, 9
  0009b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000a1	52		 push	 edx
  000a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?int_mfd_viewport_size@@3HA
  000a7	83 e8 01	 sub	 eax, 1
  000aa	50		 push	 eax
  000ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  000b1	83 e9 01	 sub	 ecx, 1
  000b4	51		 push	 ecx
  000b5	6a 00		 push	 0
  000b7	6a 00		 push	 0
  000b9	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 12322: 
; 12323: 		draw_layout_grid ();

  000be	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 12324: 
; 12325: 		switch (mode)

  000c3	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  000c6	89 45 bc	 mov	 DWORD PTR tv94[ebp], eax
  000c9	83 7d bc 05	 cmp	 DWORD PTR tv94[ebp], 5
  000cd	77 2f		 ja	 SHORT $LN16@draw_side_
  000cf	8b 4d bc	 mov	 ecx, DWORD PTR tv94[ebp]
  000d2	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN18@draw_side_[ecx*4]
$LN10@draw_side_:

; 12326: 		{
; 12327: 			////////////////////////////////////////
; 12328: 			case COMANCHE_SIDE_MFD_MODE_OFF:
; 12329: 			////////////////////////////////////////
; 12330: 			{
; 12331: 				break;

  000d9	eb 34		 jmp	 SHORT $LN2@draw_side_
$LN11@draw_side_:

; 12332: 			}
; 12333: 			////////////////////////////////////////
; 12334: 			case COMANCHE_SIDE_MFD_MODE_DAMAGED:
; 12335: 			////////////////////////////////////////
; 12336: 			{
; 12337: 				draw_damaged_side_mfd ();

  000db	e8 00 00 00 00	 call	 ?draw_damaged_side_mfd@@YGXXZ ; draw_damaged_side_mfd

; 12338: 
; 12339: 				break;

  000e0	eb 2d		 jmp	 SHORT $LN2@draw_side_
$LN12@draw_side_:

; 12340: 			}
; 12341: 			////////////////////////////////////////
; 12342: 			case COMANCHE_SIDE_MFD_MODE_WEAPON:
; 12343: 			////////////////////////////////////////
; 12344: 			{
; 12345: 				draw_weapon_display_side_mfd ();

  000e2	e8 00 00 00 00	 call	 ?draw_weapon_display_side_mfd@@YGXXZ ; draw_weapon_display_side_mfd

; 12346: 
; 12347: 				break;

  000e7	eb 26		 jmp	 SHORT $LN2@draw_side_
$LN13@draw_side_:

; 12348: 			}
; 12349: 			////////////////////////////////////////
; 12350: 			case COMANCHE_SIDE_MFD_MODE_SYSTEM:
; 12351: 			////////////////////////////////////////
; 12352: 			{
; 12353: 				draw_system_display_side_mfd ();

  000e9	e8 00 00 00 00	 call	 ?draw_system_display_side_mfd@@YGXXZ ; draw_system_display_side_mfd

; 12354: 
; 12355: 				break;

  000ee	eb 1f		 jmp	 SHORT $LN2@draw_side_
$LN14@draw_side_:

; 12356: 			}
; 12357: 			////////////////////////////////////////
; 12358: 			case COMANCHE_SIDE_MFD_MODE_ENGINE:
; 12359: 			////////////////////////////////////////
; 12360: 			{
; 12361: 				draw_engine_display_side_mfd ();

  000f0	e8 00 00 00 00	 call	 ?draw_engine_display_side_mfd@@YGXXZ ; draw_engine_display_side_mfd

; 12362: 
; 12363: 				break;

  000f5	eb 18		 jmp	 SHORT $LN2@draw_side_
$LN15@draw_side_:

; 12364: 			}
; 12365: 			////////////////////////////////////////
; 12366: 			case COMANCHE_SIDE_MFD_MODE_FLIGHT:
; 12367: 			////////////////////////////////////////
; 12368: 			{
; 12369: 				draw_flight_display_side_mfd ();

  000f7	e8 00 00 00 00	 call	 ?draw_flight_display_side_mfd@@YGXXZ ; draw_flight_display_side_mfd

; 12370: 
; 12371: 				break;

  000fc	eb 11		 jmp	 SHORT $LN2@draw_side_
$LN16@draw_side_:

; 12372: 			}
; 12373: 			////////////////////////////////////////
; 12374: 			default:
; 12375: 			////////////////////////////////////////
; 12376: 			{
; 12377: 				debug_fatal ("Invalid side MFD mode = %d", mode);

  000fe	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  00101	50		 push	 eax
  00102	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@JBAKPIAB@Invalid?5side?5MFD?5mode?5?$DN?5?$CFd@
  00107	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0010c	83 c4 08	 add	 esp, 8
$LN2@draw_side_:

; 12378: 
; 12379: 				break;
; 12380: 			}
; 12381: 		}
; 12382: 
; 12383: 		flush_screen_texture_graphics (mfd_screen);

  0010f	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 12384: 
; 12385: 		unlock_screen (mfd_screen);

  00118	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN9@draw_side_:

; 12386: 	}
; 12387: 
; 12388: 	set_active_screen (video_screen);

  00121	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00126	50		 push	 eax
  00127	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 12389: }

  0012c	5f		 pop	 edi
  0012d	5e		 pop	 esi
  0012e	5b		 pop	 ebx
  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c2 0c 00	 ret	 12			; 0000000cH
  00135	0f 1f 00	 npad	 3
$LN18@draw_side_:
  00138	00 00 00 00	 DD	 $LN10@draw_side_
  0013c	00 00 00 00	 DD	 $LN11@draw_side_
  00140	00 00 00 00	 DD	 $LN12@draw_side_
  00144	00 00 00 00	 DD	 $LN13@draw_side_
  00148	00 00 00 00	 DD	 $LN14@draw_side_
  0014c	00 00 00 00	 DD	 $LN15@draw_side_
?draw_side_mfd@@YGXPAUSCREEN@@W4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ENDP ; draw_side_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_main_mfd@@YGXPAUSCREEN@@PAW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv134 = -68						; size = 4
_mfd_screen$ = 8					; size = 4
_mode$ = 12						; size = 4
_location$ = 16						; size = 4
?draw_main_mfd@@YGXPAUSCREEN@@PAW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z PROC ; draw_main_mfd, COMDAT

; 12146: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12147: 	ASSERT (mfd_screen);

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_screen$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN4@draw_main_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_main_mfd@@YGXPAUSCREEN@@PAW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DHCAJMOH@mfd_screen@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_main_:

; 12148: 
; 12149: 	ASSERT (comanche_main_mfd_mode_valid (*mode));

  00027	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	7c 08		 jl	 SHORT $LN6@draw_main_
  0002f	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  00032	83 38 0e	 cmp	 DWORD PTR [eax], 14	; 0000000eH
  00035	7c 18		 jl	 SHORT $LN5@draw_main_
$LN6@draw_main_:
  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_main_mfd@@YGXPAUSCREEN@@PAW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0003c	83 c0 03	 add	 eax, 3
  0003f	50		 push	 eax
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@FODDHBHE@comanche_main_mfd_mode_valid?5?$CI?$CK@
  0004a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@draw_main_:

; 12150: 
; 12151: 	ASSERT (comanche_main_mfd_location_valid (location));

  0004f	83 7d 10 00	 cmp	 DWORD PTR _location$[ebp], 0
  00053	7c 06		 jl	 SHORT $LN8@draw_main_
  00055	83 7d 10 04	 cmp	 DWORD PTR _location$[ebp], 4
  00059	7c 18		 jl	 SHORT $LN7@draw_main_
$LN8@draw_main_:
  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_main_mfd@@YGXPAUSCREEN@@PAW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  00060	83 c0 05	 add	 eax, 5
  00063	50		 push	 eax
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@LICEEPAH@comanche_main_mfd_location_vali@
  0006e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@draw_main_:

; 12152: 
; 12153: 	if ((get_undamaged_eo_display_mode (*mode) && d3d_can_render_to_texture))

  00073	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  00076	8b 08		 mov	 ecx, DWORD PTR [eax]
  00078	51		 push	 ecx
  00079	e8 00 00 00 00	 call	 ?get_undamaged_eo_display_mode@@YGHW4COMANCHE_MAIN_MFD_MODES@@@Z ; get_undamaged_eo_display_mode
  0007e	85 c0		 test	 eax, eax
  00080	74 0e		 je	 SHORT $LN9@draw_main_
  00082	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  00089	74 05		 je	 SHORT $LN9@draw_main_

; 12154: 	{
; 12155: 		return;

  0008b	e9 3b 01 00 00	 jmp	 $LN1@draw_main_
$LN9@draw_main_:

; 12156: 	}
; 12157: 
; 12158: 	draw_main_display = TRUE;

  00090	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_main_display@@3HA, 1

; 12159: 
; 12160: 	set_active_screen (mfd_screen);

  0009a	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 12161: 
; 12162: 	if (lock_screen (mfd_screen))

  000a3	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  000ac	85 c0		 test	 eax, eax
  000ae	0f 84 0c 01 00
	00		 je	 $LN10@draw_main_

; 12163: 	{
; 12164: 		set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, MFD_BACKGROUND_COLOUR);

  000b4	b8 04 00 00 00	 mov	 eax, 4
  000b9	6b c8 09	 imul	 ecx, eax, 9
  000bc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000c2	52		 push	 edx
  000c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?int_mfd_viewport_size@@3HA
  000c8	83 e8 01	 sub	 eax, 1
  000cb	50		 push	 eax
  000cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  000d2	83 e9 01	 sub	 ecx, 1
  000d5	51		 push	 ecx
  000d6	6a 00		 push	 0
  000d8	6a 00		 push	 0
  000da	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 12165: 
; 12166: 		draw_layout_grid ();

  000df	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 12167: 
; 12168: 		if (*mode == COMANCHE_MAIN_MFD_MODE_AIR_RADAR && target_acquisition_system == TARGET_ACQUISITION_SYSTEM_GROUND_RADAR)

  000e4	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  000e7	83 38 03	 cmp	 DWORD PTR [eax], 3
  000ea	75 14		 jne	 SHORT $LN11@draw_main_
  000ec	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 1 ; target_acquisition_system
  000f3	75 0b		 jne	 SHORT $LN11@draw_main_

; 12169: 			*mode = COMANCHE_MAIN_MFD_MODE_GROUND_RADAR;

  000f5	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  000f8	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
  000fe	eb 1a		 jmp	 SHORT $LN12@draw_main_
$LN11@draw_main_:

; 12170: 		else if (*mode == COMANCHE_MAIN_MFD_MODE_GROUND_RADAR && target_acquisition_system == TARGET_ACQUISITION_SYSTEM_AIR_RADAR)

  00100	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  00103	83 38 02	 cmp	 DWORD PTR [eax], 2
  00106	75 12		 jne	 SHORT $LN12@draw_main_
  00108	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 2 ; target_acquisition_system
  0010f	75 09		 jne	 SHORT $LN12@draw_main_

; 12171: 			*mode = COMANCHE_MAIN_MFD_MODE_AIR_RADAR;

  00111	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  00114	c7 00 03 00 00
	00		 mov	 DWORD PTR [eax], 3
$LN12@draw_main_:

; 12172: 
; 12173: 		switch (*mode)

  0011a	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  0011d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011f	89 4d bc	 mov	 DWORD PTR tv134[ebp], ecx
  00122	83 7d bc 0d	 cmp	 DWORD PTR tv134[ebp], 13 ; 0000000dH
  00126	77 75		 ja	 SHORT $LN28@draw_main_
  00128	8b 55 bc	 mov	 edx, DWORD PTR tv134[ebp]
  0012b	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN30@draw_main_[edx*4]
$LN14@draw_main_:

; 12174: 		{
; 12175: 			////////////////////////////////////////
; 12176: 			case COMANCHE_MAIN_MFD_MODE_OFF:
; 12177: 			////////////////////////////////////////
; 12178: 			{
; 12179: 				break;

  00132	eb 7a		 jmp	 SHORT $LN2@draw_main_
$LN15@draw_main_:

; 12180: 			}
; 12181: 			////////////////////////////////////////
; 12182: 			case COMANCHE_MAIN_MFD_MODE_DAMAGED:
; 12183: 			////////////////////////////////////////
; 12184: 			{
; 12185: 				draw_damaged_mfd ();

  00134	e8 00 00 00 00	 call	 ?draw_damaged_mfd@@YGXXZ ; draw_damaged_mfd

; 12186: 
; 12187: 				break;

  00139	eb 73		 jmp	 SHORT $LN2@draw_main_
$LN16@draw_main_:

; 12188: 			}
; 12189: 			////////////////////////////////////////
; 12190: 			case COMANCHE_MAIN_MFD_MODE_GROUND_RADAR:
; 12191: 			////////////////////////////////////////
; 12192: 			{
; 12193: 				draw_ground_radar_mfd ();

  0013b	e8 00 00 00 00	 call	 ?draw_ground_radar_mfd@@YGXXZ ; draw_ground_radar_mfd

; 12194: 
; 12195: 				break;

  00140	eb 6c		 jmp	 SHORT $LN2@draw_main_
$LN17@draw_main_:

; 12196: 			}
; 12197: 			////////////////////////////////////////
; 12198: 			case COMANCHE_MAIN_MFD_MODE_AIR_RADAR:
; 12199: 			////////////////////////////////////////
; 12200: 			{
; 12201: 				draw_air_radar_mfd ();

  00142	e8 00 00 00 00	 call	 ?draw_air_radar_mfd@@YGXXZ ; draw_air_radar_mfd

; 12202: 
; 12203: 				break;

  00147	eb 65		 jmp	 SHORT $LN2@draw_main_
$LN18@draw_main_:

; 12204: 			}
; 12205: 			////////////////////////////////////////
; 12206: 			case COMANCHE_MAIN_MFD_MODE_FLIR:
; 12207: 			////////////////////////////////////////
; 12208: 			{
; 12209: 				draw_2d_flir_mfd (FALSE);

  00149	6a 00		 push	 0
  0014b	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXH@Z ; draw_2d_flir_mfd

; 12210: 
; 12211: 				break;

  00150	eb 5c		 jmp	 SHORT $LN2@draw_main_
$LN19@draw_main_:

; 12212: 			}
; 12213: 			////////////////////////////////////////
; 12214: 			case COMANCHE_MAIN_MFD_MODE_DTV:
; 12215: 			////////////////////////////////////////
; 12216: 			{
; 12217: 				draw_2d_dtv_mfd (FALSE);

  00152	6a 00		 push	 0
  00154	e8 00 00 00 00	 call	 ?draw_2d_dtv_mfd@@YGXH@Z ; draw_2d_dtv_mfd

; 12218: 
; 12219: 				break;

  00159	eb 53		 jmp	 SHORT $LN2@draw_main_
$LN20@draw_main_:

; 12220: 			}
; 12221: 			////////////////////////////////////////
; 12222: 			case COMANCHE_MAIN_MFD_MODE_DVO:
; 12223: 			////////////////////////////////////////
; 12224: 			{
; 12225: 				draw_2d_dvo_mfd (FALSE);

  0015b	6a 00		 push	 0
  0015d	e8 00 00 00 00	 call	 ?draw_2d_dvo_mfd@@YGXH@Z ; draw_2d_dvo_mfd

; 12226: 
; 12227: 				break;

  00162	eb 4a		 jmp	 SHORT $LN2@draw_main_
$LN21@draw_main_:

; 12228: 			}
; 12229: 			////////////////////////////////////////
; 12230: 			case COMANCHE_MAIN_MFD_MODE_TSD:
; 12231: 			////////////////////////////////////////
; 12232: 			{
; 12233: 				draw_tactical_situation_display_mfd (location);

  00164	8b 45 10	 mov	 eax, DWORD PTR _location$[ebp]
  00167	50		 push	 eax
  00168	e8 00 00 00 00	 call	 ?draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; draw_tactical_situation_display_mfd

; 12234: 
; 12235: 				break;

  0016d	eb 3f		 jmp	 SHORT $LN2@draw_main_
$LN22@draw_main_:

; 12236: 			}
; 12237: 			////////////////////////////////////////
; 12238: 			case COMANCHE_MAIN_MFD_MODE_ASE:
; 12239: 			////////////////////////////////////////
; 12240: 			{
; 12241: 				draw_aircraft_survivability_equipment_display_mfd (location);

  0016f	8b 45 10	 mov	 eax, DWORD PTR _location$[ebp]
  00172	50		 push	 eax
  00173	e8 00 00 00 00	 call	 ?draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; draw_aircraft_survivability_equipment_display_mfd

; 12242: 
; 12243: 				break;

  00178	eb 34		 jmp	 SHORT $LN2@draw_main_
$LN23@draw_main_:

; 12244: 			}
; 12245: 			////////////////////////////////////////
; 12246: 			case COMANCHE_MAIN_MFD_MODE_WEAPON:
; 12247: 			////////////////////////////////////////
; 12248: 			{
; 12249: 				draw_weapon_display_mfd ();

  0017a	e8 00 00 00 00	 call	 ?draw_weapon_display_mfd@@YGXXZ ; draw_weapon_display_mfd

; 12250: 
; 12251: 				break;

  0017f	eb 2d		 jmp	 SHORT $LN2@draw_main_
$LN24@draw_main_:

; 12252: 			}
; 12253: 			////////////////////////////////////////
; 12254: 			case COMANCHE_MAIN_MFD_MODE_SYSTEM:
; 12255: 			////////////////////////////////////////
; 12256: 			{
; 12257: 				draw_system_display_mfd ();

  00181	e8 00 00 00 00	 call	 ?draw_system_display_mfd@@YGXXZ ; draw_system_display_mfd

; 12258: 
; 12259: 				break;

  00186	eb 26		 jmp	 SHORT $LN2@draw_main_
$LN25@draw_main_:

; 12260: 			}
; 12261: 			////////////////////////////////////////
; 12262: 			case COMANCHE_MAIN_MFD_MODE_ENGINE:
; 12263: 			////////////////////////////////////////
; 12264: 			{
; 12265: 				draw_engine_display_mfd ();

  00188	e8 00 00 00 00	 call	 ?draw_engine_display_mfd@@YGXXZ ; draw_engine_display_mfd

; 12266: 
; 12267: 				break;

  0018d	eb 1f		 jmp	 SHORT $LN2@draw_main_
$LN26@draw_main_:

; 12268: 			}
; 12269: 			////////////////////////////////////////
; 12270: 			case COMANCHE_MAIN_MFD_MODE_FLIGHT:
; 12271: 			////////////////////////////////////////
; 12272: 			{
; 12273: 				draw_flight_display_mfd ();

  0018f	e8 00 00 00 00	 call	 ?draw_flight_display_mfd@@YGXXZ ; draw_flight_display_mfd

; 12274: 
; 12275: 				break;

  00194	eb 18		 jmp	 SHORT $LN2@draw_main_
$LN27@draw_main_:

; 12276: 			}
; 12277: 			////////////////////////////////////////
; 12278: 			case COMANCHE_MAIN_MFD_MODE_MISSION:
; 12279: 			////////////////////////////////////////
; 12280: 			{
; 12281: 				draw_mission_display_mfd ();

  00196	e8 00 00 00 00	 call	 ?draw_mission_display_mfd@@YGXXZ ; draw_mission_display_mfd

; 12282: 
; 12283: 				break;

  0019b	eb 11		 jmp	 SHORT $LN2@draw_main_
$LN28@draw_main_:

; 12284: 			}
; 12285: 			////////////////////////////////////////
; 12286: 			default:
; 12287: 			////////////////////////////////////////
; 12288: 			{
; 12289: 				debug_fatal ("Invalid main MFD mode = %d", mode);

  0019d	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  001a0	50		 push	 eax
  001a1	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@EJABPDDO@Invalid?5main?5MFD?5mode?5?$DN?5?$CFd@
  001a6	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  001ab	83 c4 08	 add	 esp, 8
$LN2@draw_main_:

; 12290: 
; 12291: 				break;
; 12292: 			}
; 12293: 		}
; 12294: 
; 12295: 		flush_screen_texture_graphics (mfd_screen);

  001ae	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  001b1	50		 push	 eax
  001b2	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 12296: 
; 12297: 		unlock_screen (mfd_screen);

  001b7	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  001ba	50		 push	 eax
  001bb	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN10@draw_main_:

; 12298: 	}
; 12299: 
; 12300: 	set_active_screen (video_screen);

  001c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  001c5	50		 push	 eax
  001c6	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen
$LN1@draw_main_:

; 12301: }

  001cb	5f		 pop	 edi
  001cc	5e		 pop	 esi
  001cd	5b		 pop	 ebx
  001ce	8b e5		 mov	 esp, ebp
  001d0	5d		 pop	 ebp
  001d1	c2 0c 00	 ret	 12			; 0000000cH
$LN30@draw_main_:
  001d4	00 00 00 00	 DD	 $LN14@draw_main_
  001d8	00 00 00 00	 DD	 $LN15@draw_main_
  001dc	00 00 00 00	 DD	 $LN16@draw_main_
  001e0	00 00 00 00	 DD	 $LN17@draw_main_
  001e4	00 00 00 00	 DD	 $LN18@draw_main_
  001e8	00 00 00 00	 DD	 $LN19@draw_main_
  001ec	00 00 00 00	 DD	 $LN20@draw_main_
  001f0	00 00 00 00	 DD	 $LN21@draw_main_
  001f4	00 00 00 00	 DD	 $LN22@draw_main_
  001f8	00 00 00 00	 DD	 $LN23@draw_main_
  001fc	00 00 00 00	 DD	 $LN24@draw_main_
  00200	00 00 00 00	 DD	 $LN25@draw_main_
  00204	00 00 00 00	 DD	 $LN26@draw_main_
  00208	00 00 00 00	 DD	 $LN27@draw_main_
?draw_main_mfd@@YGXPAUSCREEN@@PAW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ENDP ; draw_main_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_mission_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv813 = -4112						; size = 4
tv400 = -4112						; size = 4
tv327 = -4112						; size = 4
tv805 = -4108						; size = 4
tv392 = -4108						; size = 4
tv319 = -4108						; size = 4
tv1457 = -4104						; size = 8
tv1210 = -4104						; size = 8
tv1002 = -4104						; size = 8
tv902 = -4104						; size = 4
tv843 = -4104						; size = 4
tv792 = -4104						; size = 4
tv752 = -4104						; size = 4
tv681 = -4104						; size = 4
tv648 = -4104						; size = 4
tv609 = -4104						; size = 4
tv579 = -4104						; size = 4
tv509 = -4104						; size = 4
tv473 = -4104						; size = 4
tv453 = -4104						; size = 4
tv425 = -4104						; size = 4
tv379 = -4104						; size = 4
tv353 = -4104						; size = 4
tv306 = -4104						; size = 4
tv278 = -4104						; size = 4
tv259 = -4104						; size = 4
tv233 = -4104						; size = 4
tv207 = -4104						; size = 4
tv141 = -4104						; size = 4
tv894 = -4100						; size = 4
tv835 = -4100						; size = 4
tv784 = -4100						; size = 4
tv744 = -4100						; size = 4
tv673 = -4100						; size = 4
tv640 = -4100						; size = 4
tv601 = -4100						; size = 4
tv571 = -4100						; size = 4
tv501 = -4100						; size = 4
tv465 = -4100						; size = 4
tv445 = -4100						; size = 4
tv417 = -4100						; size = 4
tv371 = -4100						; size = 4
tv345 = -4100						; size = 4
tv298 = -4100						; size = 4
tv271 = -4100						; size = 4
tv251 = -4100						; size = 4
tv225 = -4100						; size = 4
tv199 = -4100						; size = 4
tv133 = -4100						; size = 4
_buffer$1 = -3584					; size = 1024
_buffer$2 = -2560					; size = 1024
_buffer$3 = -1536					; size = 1024
_objective$ = -512					; size = 4
_keysite$ = -508					; size = 4
_task$ = -504						; size = 4
_member$ = -500						; size = 4
_company$ = -496					; size = 4
_group$ = -492						; size = 4
_en$ = -488						; size = 4
_estimated_time$ = -484					; size = 4
_mission_time$ = -480					; size = 4
_time$ = -476						; size = 4
_x_max$ = -472						; size = 4
_x_mid$ = -468						; size = 4
_x_min$ = -464						; size = 4
_y_adjust$ = -460					; size = 4
_x_adjust$ = -456					; size = 4
_char_height$ = -452					; size = 4
_estimated_seconds$ = -448				; size = 4
_estimated_minutes$ = -444				; size = 4
_estimated_hours$ = -440				; size = 4
_mission_seconds$ = -436				; size = 4
_mission_minutes$ = -432				; size = 4
_mission_hours$ = -428					; size = 4
_seconds$ = -424					; size = 4
_minutes$ = -420					; size = 4
_hours$ = -416						; size = 4
_status_name$ = -412					; size = 4
_formation$ = -408					; size = 4
_s2$ = -404						; size = 200
_s1$ = -204						; size = 200
_c$ = -1						; size = 1
?draw_mission_display_mfd@@YGXXZ PROC			; draw_mission_display_mfd, COMDAT

; 11642: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 10 10 00 00	 mov	 eax, 4112		; 00001010H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi

; 11643: 	char
; 11644: 		c,
; 11645: 		s1[200],
; 11646: 		s2[200];
; 11647: 
; 11648: 	int
; 11649: 		formation,
; 11650: 		status_name,
; 11651: 		hours,
; 11652: 		minutes,
; 11653: 		seconds,
; 11654: 		mission_hours,
; 11655: 		mission_minutes,
; 11656: 		mission_seconds,
; 11657: 		estimated_hours,
; 11658: 		estimated_minutes,
; 11659: 		estimated_seconds;
; 11660: 
; 11661: 	float
; 11662: 		char_height,
; 11663: 		x_adjust,
; 11664: 		y_adjust,
; 11665: 		x_min,
; 11666: 		x_mid,
; 11667: 		x_max,
; 11668: 		time,
; 11669: 		mission_time,
; 11670: 		estimated_time;
; 11671: 
; 11672: 	entity
; 11673: 		*en,
; 11674: 		*group,
; 11675: 		*company,
; 11676: 		*member,
; 11677: 		*task,
; 11678: 		*keysite,
; 11679: 		*objective;
; 11680: 
; 11681: 	en = get_gunship_entity ();

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00015	89 85 18 fe ff
	ff		 mov	 DWORD PTR _en$[ebp], eax

; 11682: 
; 11683: 	get_2d_float_screen_y_coordinate (1.0, &y_adjust);

  0001b	8d 85 34 fe ff
	ff		 lea	 eax, DWORD PTR _y_adjust$[ebp]
  00021	50		 push	 eax
  00022	51		 push	 ecx
  00023	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0002b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00030	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 11684: 
; 11685: 	get_2d_float_screen_x_coordinate (-1.0, &x_min);

  00035	8d 85 30 fe ff
	ff		 lea	 eax, DWORD PTR _x_min$[ebp]
  0003b	50		 push	 eax
  0003c	51		 push	 ecx
  0003d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00045	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004a	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 11686: 
; 11687: 	get_2d_float_screen_x_coordinate (0.0, &x_mid);

  0004f	8d 85 2c fe ff
	ff		 lea	 eax, DWORD PTR _x_mid$[ebp]
  00055	50		 push	 eax
  00056	51		 push	 ecx
  00057	0f 57 c0	 xorps	 xmm0, xmm0
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 11688: 
; 11689: 	get_2d_float_screen_x_coordinate (1.0, &x_max);

  00064	8d 85 28 fe ff
	ff		 lea	 eax, DWORD PTR _x_max$[ebp]
  0006a	50		 push	 eax
  0006b	51		 push	 ecx
  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00074	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00079	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 11690: 
; 11691: 	if (draw_large_mfd)

  0007e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00085	74 5d		 je	 SHORT $LN4@draw_missi

; 11692: 	{
; 11693: 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  00087	6a 05		 push	 5
  00089	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 11694: 
; 11695: 		y_adjust += 3.0;

  0008e	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  00096	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  0009e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000a2	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 11696: 
; 11697: 		x_min += 3.0;

  000aa	f3 0f 5a 85 30
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _x_min$[ebp]
  000b2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  000ba	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000be	f3 0f 11 85 30
	fe ff ff	 movss	 DWORD PTR _x_min$[ebp], xmm0

; 11698: 
; 11699: 		x_max -= 3.0;

  000c6	f3 0f 5a 85 28
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _x_max$[ebp]
  000ce	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4008000000000000
  000d6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000da	f3 0f 11 85 28
	fe ff ff	 movss	 DWORD PTR _x_max$[ebp], xmm0

; 11700: 	}
; 11701: 	else

  000e2	eb 5b		 jmp	 SHORT $LN5@draw_missi
$LN4@draw_missi:

; 11702: 	{
; 11703: 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  000e4	6a 00		 push	 0
  000e6	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 11704: 
; 11705: 		y_adjust += 2.0;

  000eb	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  000f3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  000fb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ff	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 11706: 
; 11707: 		x_min += 2.0;

  00107	f3 0f 5a 85 30
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _x_min$[ebp]
  0010f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00117	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0011b	f3 0f 11 85 30
	fe ff ff	 movss	 DWORD PTR _x_min$[ebp], xmm0

; 11708: 
; 11709: 		x_max -= 2.0;

  00123	f3 0f 5a 85 28
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _x_max$[ebp]
  0012b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4000000000000000
  00133	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00137	f3 0f 11 85 28
	fe ff ff	 movss	 DWORD PTR _x_max$[ebp], xmm0
$LN5@draw_missi:

; 11710: 	}
; 11711: 
; 11712: 	char_height = get_mono_font_char_height ('X');

  0013f	6a 58		 push	 88			; 00000058H
  00141	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  00146	d9 9d 3c fe ff
	ff		 fstp	 DWORD PTR _char_height$[ebp]

; 11713: 
; 11714: 	////////////////////////////////////////
; 11715: 	//
; 11716: 	// flight group
; 11717: 	//
; 11718: 	////////////////////////////////////////
; 11719: 
; 11720: 	group = get_local_entity_parent (en, LIST_TYPE_MEMBER);

  0014c	83 bd 18 fe ff
	ff 00		 cmp	 DWORD PTR _en$[ebp], 0
  00153	74 10		 je	 SHORT $LN35@draw_missi
  00155	8b 85 18 fe ff
	ff		 mov	 eax, DWORD PTR _en$[ebp]
  0015b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015d	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv133[ebp], ecx
  00163	eb 24		 jmp	 SHORT $LN36@draw_missi
$LN35@draw_missi:
  00165	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  0016b	83 c2 4e	 add	 edx, 78			; 0000004eH
  0016e	52		 push	 edx
  0016f	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00174	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00179	50		 push	 eax
  0017a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0017f	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv133[ebp], 0
$LN36@draw_missi:
  00189	b9 01 00 00 00	 mov	 ecx, 1
  0018e	85 c9		 test	 ecx, ecx
  00190	74 0c		 je	 SHORT $LN37@draw_missi
  00192	c7 85 f8 ef ff
	ff 19 00 00 00	 mov	 DWORD PTR tv141[ebp], 25 ; 00000019H
  0019c	eb 24		 jmp	 SHORT $LN38@draw_missi
$LN37@draw_missi:
  0019e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  001a4	83 c2 4e	 add	 edx, 78			; 0000004eH
  001a7	52		 push	 edx
  001a8	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001b8	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv141[ebp], 0
$LN38@draw_missi:
  001c2	6a 19		 push	 25			; 00000019H
  001c4	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR _en$[ebp]
  001ca	51		 push	 ecx
  001cb	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv133[ebp], 180
  001d5	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv141[ebp]
  001db	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  001e2	ff d1		 call	 ecx
  001e4	89 85 14 fe ff
	ff		 mov	 DWORD PTR _group$[ebp], eax

; 11721: 
; 11722: 	if (group)

  001ea	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  001f1	0f 84 3a 0b 00
	00		 je	 $LN6@draw_missi

; 11723: 	{
; 11724: 		//
; 11725: 		// title
; 11726: 		//
; 11727: 
; 11728: 		set_mono_font_colour (MFD_COLOUR_WHITE);

  001f7	b8 04 00 00 00	 mov	 eax, 4
  001fc	6b c8 13	 imul	 ecx, eax, 19
  001ff	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00205	52		 push	 edx
  00206	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 11729: 
; 11730: 		draw_line (x_min, y_adjust, x_max, y_adjust, MFD_COLOUR_WHITE);

  0020b	b8 04 00 00 00	 mov	 eax, 4
  00210	6b c8 13	 imul	 ecx, eax, 19
  00213	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00219	52		 push	 edx
  0021a	51		 push	 ecx
  0021b	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00223	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00228	51		 push	 ecx
  00229	f3 0f 10 85 28
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00231	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00236	51		 push	 ecx
  00237	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0023f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00244	51		 push	 ecx
  00245	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0024d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00252	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 11731: 
; 11732: 		y_adjust += 2.0;

  00257	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  0025f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00267	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0026b	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 11733: 
; 11734: 		x_adjust = get_mono_font_string_width ("FLIGHT GROUP") * 0.5;

  00273	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DBEHAMGN@FLIGHT?5GROUP@
  00278	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0027d	dd 9d f8 ef ff
	ff		 fstp	 QWORD PTR tv1002[ebp]
  00283	f2 0f 10 85 f8
	ef ff ff	 movsd	 xmm0, QWORD PTR tv1002[ebp]
  0028b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00293	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00297	f3 0f 11 85 38
	fe ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 11735: 
; 11736: 		set_mono_font_position (x_mid - x_adjust, y_adjust);

  0029f	51		 push	 ecx
  002a0	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ad	f3 0f 10 85 2c
	fe ff ff	 movss	 xmm0, DWORD PTR _x_mid$[ebp]
  002b5	f3 0f 5c 85 38
	fe ff ff	 subss	 xmm0, DWORD PTR _x_adjust$[ebp]
  002bd	51		 push	 ecx
  002be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c3	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 11737: 
; 11738: 		print_mono_font_string ("FLIGHT GROUP");

  002c8	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DBEHAMGN@FLIGHT?5GROUP@
  002cd	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 11739: 
; 11740: 		y_adjust += char_height;

  002d2	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002da	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  002e2	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 11741: 
; 11742: 		if (draw_large_mfd)

  002ea	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  002f1	74 1c		 je	 SHORT $LN7@draw_missi

; 11743: 		{
; 11744: 			y_adjust -= 1.0;

  002f3	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  002fb	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00303	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00307	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN7@draw_missi:

; 11745: 		}
; 11746: 
; 11747: 		draw_line (x_min, y_adjust, x_max, y_adjust, MFD_COLOUR_WHITE);

  0030f	b8 04 00 00 00	 mov	 eax, 4
  00314	6b c8 13	 imul	 ecx, eax, 19
  00317	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0031d	52		 push	 edx
  0031e	51		 push	 ecx
  0031f	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00327	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032c	51		 push	 ecx
  0032d	f3 0f 10 85 28
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00335	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033a	51		 push	 ecx
  0033b	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00343	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00348	51		 push	 ecx
  00349	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00351	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00356	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 11748: 
; 11749: 		if (draw_large_mfd)

  0035b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00362	74 1e		 je	 SHORT $LN8@draw_missi

; 11750: 		{
; 11751: 			y_adjust += 3.0;

  00364	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  0036c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00374	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00378	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 11752: 		}
; 11753: 		else

  00380	eb 1c		 jmp	 SHORT $LN9@draw_missi
$LN8@draw_missi:

; 11754: 		{
; 11755: 			y_adjust += 2.0;

  00382	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  0038a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00392	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00396	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN9@draw_missi:

; 11756: 		}
; 11757: 
; 11758: 		set_mono_font_colour (MFD_COLOUR_RED);

  0039e	b8 04 00 00 00	 mov	 eax, 4
  003a3	6b c8 0f	 imul	 ecx, eax, 15
  003a6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003ac	52		 push	 edx
  003ad	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 11759: 
; 11760: 		//
; 11761: 		// division name
; 11762: 		//
; 11763: 
; 11764: 		if (get_global_current_language () != LANGUAGE_RUSSIAN)

  003b2	83 3d 04 00 00
	00 05		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+4, 5
  003b9	0f 84 b4 01 00
	00		 je	 $LN10@draw_missi

; 11765: 		{
; 11766: 			company = get_local_entity_parent (group, LIST_TYPE_DIVISION);

  003bf	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  003c6	74 10		 je	 SHORT $LN39@draw_missi
  003c8	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR _group$[ebp]
  003ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  003d0	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv199[ebp], ecx
  003d6	eb 24		 jmp	 SHORT $LN40@draw_missi
$LN39@draw_missi:
  003d8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  003de	83 c2 7c	 add	 edx, 124		; 0000007cH
  003e1	52		 push	 edx
  003e2	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  003e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003ec	50		 push	 eax
  003ed	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003f2	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv199[ebp], 0
$LN40@draw_missi:
  003fc	b9 01 00 00 00	 mov	 ecx, 1
  00401	85 c9		 test	 ecx, ecx
  00403	74 0c		 je	 SHORT $LN41@draw_missi
  00405	c7 85 f8 ef ff
	ff 0b 00 00 00	 mov	 DWORD PTR tv207[ebp], 11 ; 0000000bH
  0040f	eb 24		 jmp	 SHORT $LN42@draw_missi
$LN41@draw_missi:
  00411	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00417	83 c2 7c	 add	 edx, 124		; 0000007cH
  0041a	52		 push	 edx
  0041b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00420	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00425	50		 push	 eax
  00426	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0042b	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv207[ebp], 0
$LN42@draw_missi:
  00435	6a 0b		 push	 11			; 0000000bH
  00437	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  0043d	51		 push	 ecx
  0043e	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv199[ebp], 180
  00448	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv207[ebp]
  0044e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00455	ff d1		 call	 ecx
  00457	89 85 10 fe ff
	ff		 mov	 DWORD PTR _company$[ebp], eax

; 11767: 
; 11768: 			ASSERT (company);

  0045d	83 bd 10 fe ff
	ff 00		 cmp	 DWORD PTR _company$[ebp], 0
  00464	75 18		 jne	 SHORT $LN11@draw_missi
  00466	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  0046b	83 c0 7e	 add	 eax, 126		; 0000007eH
  0046e	50		 push	 eax
  0046f	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00474	68 00 00 00 00	 push	 OFFSET ??_C@_07MLNBPDHK@company@
  00479	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN11@draw_missi:

; 11769: 
; 11770: 			sprintf (s1, "%s:", get_local_entity_string (company, STRING_TYPE_DIVISION_NAME));

  0047e	83 bd 10 fe ff
	ff 00		 cmp	 DWORD PTR _company$[ebp], 0
  00485	74 10		 je	 SHORT $LN43@draw_missi
  00487	8b 85 10 fe ff
	ff		 mov	 eax, DWORD PTR _company$[ebp]
  0048d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0048f	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv225[ebp], ecx
  00495	eb 27		 jmp	 SHORT $LN44@draw_missi
$LN43@draw_missi:
  00497	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  0049d	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H
  004a3	52		 push	 edx
  004a4	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  004a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  004ae	50		 push	 eax
  004af	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004b4	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv225[ebp], 0
$LN44@draw_missi:
  004be	b9 01 00 00 00	 mov	 ecx, 1
  004c3	85 c9		 test	 ecx, ecx
  004c5	74 0c		 je	 SHORT $LN45@draw_missi
  004c7	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv233[ebp], 0
  004d1	eb 27		 jmp	 SHORT $LN46@draw_missi
$LN45@draw_missi:
  004d3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  004d9	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H
  004df	52		 push	 edx
  004e0	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  004e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  004ea	50		 push	 eax
  004eb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004f0	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv233[ebp], 0
$LN46@draw_missi:
  004fa	6a 00		 push	 0
  004fc	8b 8d 10 fe ff
	ff		 mov	 ecx, DWORD PTR _company$[ebp]
  00502	51		 push	 ecx
  00503	6b 95 fc ef ff
	ff 34		 imul	 edx, DWORD PTR tv225[ebp], 52
  0050a	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv233[ebp]
  00510	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  00517	ff d1		 call	 ecx
  00519	50		 push	 eax
  0051a	68 00 00 00 00	 push	 OFFSET ??_C@_03DKEJHHJP@?$CFs?3@
  0051f	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _s1$[ebp]
  00525	52		 push	 edx
  00526	e8 00 00 00 00	 call	 _sprintf
  0052b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 11771: 
; 11772: 			set_mono_font_position (x_min, y_adjust);

  0052e	51		 push	 ecx
  0052f	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00537	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053c	51		 push	 ecx
  0053d	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00545	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0054a	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 11773: 
; 11774: 			print_mono_font_max_length_string (s1);

  0054f	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  00555	50		 push	 eax
  00556	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 11775: 
; 11776: 			y_adjust += char_height;

  0055b	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00563	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  0056b	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN10@draw_missi:

; 11777: 		}
; 11778: 
; 11779: 		//
; 11780: 		// members (callsign, players' rank and name, group leader)
; 11781: 		//
; 11782: 
; 11783: 		member = get_local_entity_first_child (group, LIST_TYPE_MEMBER);

  00573	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  0057a	74 10		 je	 SHORT $LN47@draw_missi
  0057c	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR _group$[ebp]
  00582	8b 08		 mov	 ecx, DWORD PTR [eax]
  00584	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv251[ebp], ecx
  0058a	eb 27		 jmp	 SHORT $LN48@draw_missi
$LN47@draw_missi:
  0058c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00592	81 c2 8d 00 00
	00		 add	 edx, 141		; 0000008dH
  00598	52		 push	 edx
  00599	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0059e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  005a3	50		 push	 eax
  005a4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005a9	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv251[ebp], 0
$LN48@draw_missi:
  005b3	b9 01 00 00 00	 mov	 ecx, 1
  005b8	85 c9		 test	 ecx, ecx
  005ba	74 0c		 je	 SHORT $LN49@draw_missi
  005bc	c7 85 f8 ef ff
	ff 19 00 00 00	 mov	 DWORD PTR tv259[ebp], 25 ; 00000019H
  005c6	eb 27		 jmp	 SHORT $LN50@draw_missi
$LN49@draw_missi:
  005c8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  005ce	81 c2 8d 00 00
	00		 add	 edx, 141		; 0000008dH
  005d4	52		 push	 edx
  005d5	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  005da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  005df	50		 push	 eax
  005e0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005e5	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv259[ebp], 0
$LN50@draw_missi:
  005ef	6a 19		 push	 25			; 00000019H
  005f1	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  005f7	51		 push	 ecx
  005f8	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv251[ebp], 180
  00602	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv259[ebp]
  00608	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0060f	ff d1		 call	 ecx
  00611	89 85 0c fe ff
	ff		 mov	 DWORD PTR _member$[ebp], eax
$LN2@draw_missi:

; 11784: 
; 11785: 		while (member)

  00617	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  0061e	0f 84 f2 05 00
	00		 je	 $LN3@draw_missi

; 11786: 		{
; 11787: 			if (get_local_entity_int_value (member, INT_TYPE_GROUP_LEADER))

  00624	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  0062b	74 10		 je	 SHORT $LN51@draw_missi
  0062d	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  00633	8b 08		 mov	 ecx, DWORD PTR [eax]
  00635	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv271[ebp], ecx
  0063b	eb 20		 jmp	 SHORT $LN52@draw_missi
$LN51@draw_missi:
  0063d	68 0b 2e 00 00	 push	 11787			; 00002e0bH
  00642	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00647	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0064d	52		 push	 edx
  0064e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00653	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv271[ebp], 0
$LN52@draw_missi:
  0065d	b8 01 00 00 00	 mov	 eax, 1
  00662	85 c0		 test	 eax, eax
  00664	74 0c		 je	 SHORT $LN53@draw_missi
  00666	c7 85 f8 ef ff
	ff 48 00 00 00	 mov	 DWORD PTR tv278[ebp], 72 ; 00000048H
  00670	eb 20		 jmp	 SHORT $LN54@draw_missi
$LN53@draw_missi:
  00672	68 0b 2e 00 00	 push	 11787			; 00002e0bH
  00677	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0067c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00682	51		 push	 ecx
  00683	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00688	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv278[ebp], 0
$LN54@draw_missi:
  00692	6a 48		 push	 72			; 00000048H
  00694	8b 95 0c fe ff
	ff		 mov	 edx, DWORD PTR _member$[ebp]
  0069a	52		 push	 edx
  0069b	69 85 fc ef ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv271[ebp], 1116
  006a5	8b 8d f8 ef ff
	ff		 mov	 ecx, DWORD PTR tv278[ebp]
  006ab	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  006b2	ff d2		 call	 edx
  006b4	85 c0		 test	 eax, eax
  006b6	74 06		 je	 SHORT $LN12@draw_missi

; 11788: 			{
; 11789: 				c = '>';

  006b8	c6 45 ff 3e	 mov	 BYTE PTR _c$[ebp], 62	; 0000003eH

; 11790: 			}
; 11791: 			else

  006bc	eb 04		 jmp	 SHORT $LN13@draw_missi
$LN12@draw_missi:

; 11792: 			{
; 11793: 				c = ' ';

  006be	c6 45 ff 20	 mov	 BYTE PTR _c$[ebp], 32	; 00000020H
$LN13@draw_missi:

; 11794: 			}
; 11795: 
; 11796: 			if (get_player_rank_and_name (member, s2))

  006c2	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _s2$[ebp]
  006c8	50		 push	 eax
  006c9	8b 8d 0c fe ff
	ff		 mov	 ecx, DWORD PTR _member$[ebp]
  006cf	51		 push	 ecx
  006d0	e8 00 00 00 00	 call	 ?get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z ; get_player_rank_and_name
  006d5	85 c0		 test	 eax, eax
  006d7	0f 84 2f 02 00
	00		 je	 $LN14@draw_missi

; 11797: 			{
; 11798: 				if (get_global_current_language () != LANGUAGE_RUSSIAN)

  006dd	83 3d 04 00 00
	00 05		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+4, 5
  006e4	0f 84 5e 01 00
	00		 je	 $LN16@draw_missi

; 11799: 				{
; 11800: 					sprintf

  006ea	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  006f1	74 10		 je	 SHORT $LN55@draw_missi
  006f3	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  006f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  006fb	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv298[ebp], ecx
  00701	eb 27		 jmp	 SHORT $LN56@draw_missi
$LN55@draw_missi:
  00703	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00709	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  0070f	52		 push	 edx
  00710	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00715	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0071a	50		 push	 eax
  0071b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00720	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv298[ebp], 0
$LN56@draw_missi:
  0072a	b9 01 00 00 00	 mov	 ecx, 1
  0072f	85 c9		 test	 ecx, ecx
  00731	74 0c		 je	 SHORT $LN57@draw_missi
  00733	c7 85 f8 ef ff
	ff 4a 00 00 00	 mov	 DWORD PTR tv306[ebp], 74 ; 0000004aH
  0073d	eb 27		 jmp	 SHORT $LN58@draw_missi
$LN57@draw_missi:
  0073f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00745	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  0074b	52		 push	 edx
  0074c	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00751	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00756	50		 push	 eax
  00757	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0075c	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv306[ebp], 0
$LN58@draw_missi:
  00766	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  0076d	74 10		 je	 SHORT $LN59@draw_missi
  0076f	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  00775	8b 11		 mov	 edx, DWORD PTR [ecx]
  00777	89 95 f4 ef ff
	ff		 mov	 DWORD PTR tv319[ebp], edx
  0077d	eb 26		 jmp	 SHORT $LN60@draw_missi
$LN59@draw_missi:
  0077f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00784	05 a3 00 00 00	 add	 eax, 163		; 000000a3H
  00789	50		 push	 eax
  0078a	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0078f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00795	51		 push	 ecx
  00796	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0079b	c7 85 f4 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv319[ebp], 0
$LN60@draw_missi:
  007a5	ba 01 00 00 00	 mov	 edx, 1
  007aa	85 d2		 test	 edx, edx
  007ac	74 0c		 je	 SHORT $LN61@draw_missi
  007ae	c7 85 f0 ef ff
	ff 04 00 00 00	 mov	 DWORD PTR tv327[ebp], 4
  007b8	eb 26		 jmp	 SHORT $LN62@draw_missi
$LN61@draw_missi:
  007ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  007bf	05 a3 00 00 00	 add	 eax, 163		; 000000a3H
  007c4	50		 push	 eax
  007c5	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  007ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  007d0	51		 push	 ecx
  007d1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007d6	c7 85 f0 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv327[ebp], 0
$LN62@draw_missi:
  007e0	8d 95 6c fe ff
	ff		 lea	 edx, DWORD PTR _s2$[ebp]
  007e6	52		 push	 edx
  007e7	6a 4a		 push	 74			; 0000004aH
  007e9	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  007ef	50		 push	 eax
  007f0	69 8d fc ef ff
	ff 5c 04 00 00	 imul	 ecx, DWORD PTR tv298[ebp], 1116
  007fa	8b 95 f8 ef ff
	ff		 mov	 edx, DWORD PTR tv306[ebp]
  00800	8b 84 91 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[ecx+edx*4]
  00807	ff d0		 call	 eax
  00809	50		 push	 eax
  0080a	6a 04		 push	 4
  0080c	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  00812	51		 push	 ecx
  00813	6b 95 f4 ef ff
	ff 34		 imul	 edx, DWORD PTR tv319[ebp], 52
  0081a	8b 85 f0 ef ff
	ff		 mov	 eax, DWORD PTR tv327[ebp]
  00820	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  00827	ff d1		 call	 ecx
  00829	50		 push	 eax
  0082a	0f b6 55 ff	 movzx	 edx, BYTE PTR _c$[ebp]
  0082e	52		 push	 edx
  0082f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CPCKCPHJ@?$CFc?$CFs?51?9?$CFd?5?$CFs@
  00834	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  0083a	50		 push	 eax
  0083b	e8 00 00 00 00	 call	 _sprintf
  00840	83 c4 18	 add	 esp, 24			; 00000018H

; 11801: 					(
; 11802: 						s1,
; 11803: 						"%c%s 1-%d %s",
; 11804: 						c,
; 11805: 						get_local_entity_string (group, STRING_TYPE_GROUP_CALLSIGN),
; 11806: 						get_local_entity_int_value (member, INT_TYPE_GROUP_MEMBER_ID),
; 11807: 						s2
; 11808: 					);
; 11809: 				}
; 11810: 				else

  00843	e9 bf 00 00 00	 jmp	 $LN17@draw_missi
$LN16@draw_missi:

; 11811: 				{
; 11812: 					sprintf

  00848	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  0084f	74 10		 je	 SHORT $LN63@draw_missi
  00851	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  00857	8b 08		 mov	 ecx, DWORD PTR [eax]
  00859	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv345[ebp], ecx
  0085f	eb 27		 jmp	 SHORT $LN64@draw_missi
$LN63@draw_missi:
  00861	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00867	81 c2 af 00 00
	00		 add	 edx, 175		; 000000afH
  0086d	52		 push	 edx
  0086e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00873	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00878	50		 push	 eax
  00879	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0087e	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv345[ebp], 0
$LN64@draw_missi:
  00888	b9 01 00 00 00	 mov	 ecx, 1
  0088d	85 c9		 test	 ecx, ecx
  0088f	74 0c		 je	 SHORT $LN65@draw_missi
  00891	c7 85 f8 ef ff
	ff 4a 00 00 00	 mov	 DWORD PTR tv353[ebp], 74 ; 0000004aH
  0089b	eb 27		 jmp	 SHORT $LN66@draw_missi
$LN65@draw_missi:
  0089d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  008a3	81 c2 af 00 00
	00		 add	 edx, 175		; 000000afH
  008a9	52		 push	 edx
  008aa	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  008af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  008b4	50		 push	 eax
  008b5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008ba	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv353[ebp], 0
$LN66@draw_missi:
  008c4	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR _s2$[ebp]
  008ca	51		 push	 ecx
  008cb	6a 4a		 push	 74			; 0000004aH
  008cd	8b 95 0c fe ff
	ff		 mov	 edx, DWORD PTR _member$[ebp]
  008d3	52		 push	 edx
  008d4	69 85 fc ef ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv345[ebp], 1116
  008de	8b 8d f8 ef ff
	ff		 mov	 ecx, DWORD PTR tv353[ebp]
  008e4	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  008eb	ff d2		 call	 edx
  008ed	50		 push	 eax
  008ee	0f b6 45 ff	 movzx	 eax, BYTE PTR _c$[ebp]
  008f2	50		 push	 eax
  008f3	68 00 00 00 00	 push	 OFFSET ??_C@_09JGJHKNML@?$CFc1?9?$CFd?5?$CFs@
  008f8	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _s1$[ebp]
  008fe	51		 push	 ecx
  008ff	e8 00 00 00 00	 call	 _sprintf
  00904	83 c4 14	 add	 esp, 20			; 00000014H
$LN17@draw_missi:

; 11813: 					(
; 11814: 						s1,
; 11815: 						"%c1-%d %s",
; 11816: 						c,
; 11817: 						get_local_entity_int_value (member, INT_TYPE_GROUP_MEMBER_ID),
; 11818: 						s2
; 11819: 					);
; 11820: 				}
; 11821: 			}
; 11822: 			else

  00907	e9 1c 02 00 00	 jmp	 $LN19@draw_missi
$LN14@draw_missi:

; 11823: 			{
; 11824: 				if (get_global_current_language () != LANGUAGE_RUSSIAN)

  0090c	83 3d 04 00 00
	00 05		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+4, 5
  00913	0f 84 57 01 00
	00		 je	 $LN18@draw_missi

; 11825: 				{
; 11826: 					sprintf

  00919	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  00920	74 10		 je	 SHORT $LN67@draw_missi
  00922	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  00928	8b 08		 mov	 ecx, DWORD PTR [eax]
  0092a	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv371[ebp], ecx
  00930	eb 27		 jmp	 SHORT $LN68@draw_missi
$LN67@draw_missi:
  00932	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00938	81 c2 be 00 00
	00		 add	 edx, 190		; 000000beH
  0093e	52		 push	 edx
  0093f	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00944	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00949	50		 push	 eax
  0094a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0094f	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv371[ebp], 0
$LN68@draw_missi:
  00959	b9 01 00 00 00	 mov	 ecx, 1
  0095e	85 c9		 test	 ecx, ecx
  00960	74 0c		 je	 SHORT $LN69@draw_missi
  00962	c7 85 f8 ef ff
	ff 4a 00 00 00	 mov	 DWORD PTR tv379[ebp], 74 ; 0000004aH
  0096c	eb 27		 jmp	 SHORT $LN70@draw_missi
$LN69@draw_missi:
  0096e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00974	81 c2 be 00 00
	00		 add	 edx, 190		; 000000beH
  0097a	52		 push	 edx
  0097b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00980	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00985	50		 push	 eax
  00986	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0098b	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv379[ebp], 0
$LN70@draw_missi:
  00995	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  0099c	74 10		 je	 SHORT $LN71@draw_missi
  0099e	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  009a4	8b 11		 mov	 edx, DWORD PTR [ecx]
  009a6	89 95 f4 ef ff
	ff		 mov	 DWORD PTR tv392[ebp], edx
  009ac	eb 26		 jmp	 SHORT $LN72@draw_missi
$LN71@draw_missi:
  009ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  009b3	05 bd 00 00 00	 add	 eax, 189		; 000000bdH
  009b8	50		 push	 eax
  009b9	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  009be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  009c4	51		 push	 ecx
  009c5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009ca	c7 85 f4 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv392[ebp], 0
$LN72@draw_missi:
  009d4	ba 01 00 00 00	 mov	 edx, 1
  009d9	85 d2		 test	 edx, edx
  009db	74 0c		 je	 SHORT $LN73@draw_missi
  009dd	c7 85 f0 ef ff
	ff 04 00 00 00	 mov	 DWORD PTR tv400[ebp], 4
  009e7	eb 26		 jmp	 SHORT $LN74@draw_missi
$LN73@draw_missi:
  009e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  009ee	05 bd 00 00 00	 add	 eax, 189		; 000000bdH
  009f3	50		 push	 eax
  009f4	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  009f9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  009ff	51		 push	 ecx
  00a00	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a05	c7 85 f0 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv400[ebp], 0
$LN74@draw_missi:
  00a0f	6a 4a		 push	 74			; 0000004aH
  00a11	8b 95 0c fe ff
	ff		 mov	 edx, DWORD PTR _member$[ebp]
  00a17	52		 push	 edx
  00a18	69 85 fc ef ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv371[ebp], 1116
  00a22	8b 8d f8 ef ff
	ff		 mov	 ecx, DWORD PTR tv379[ebp]
  00a28	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00a2f	ff d2		 call	 edx
  00a31	50		 push	 eax
  00a32	6a 04		 push	 4
  00a34	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR _group$[ebp]
  00a3a	50		 push	 eax
  00a3b	6b 8d f4 ef ff
	ff 34		 imul	 ecx, DWORD PTR tv392[ebp], 52
  00a42	8b 95 f0 ef ff
	ff		 mov	 edx, DWORD PTR tv400[ebp]
  00a48	8b 84 91 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[ecx+edx*4]
  00a4f	ff d0		 call	 eax
  00a51	50		 push	 eax
  00a52	0f b6 4d ff	 movzx	 ecx, BYTE PTR _c$[ebp]
  00a56	51		 push	 ecx
  00a57	68 00 00 00 00	 push	 OFFSET ??_C@_09EKFLINLD@?$CFc?$CFs?51?9?$CFd@
  00a5c	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _s1$[ebp]
  00a62	52		 push	 edx
  00a63	e8 00 00 00 00	 call	 _sprintf
  00a68	83 c4 14	 add	 esp, 20			; 00000014H

; 11827: 					(
; 11828: 						s1,
; 11829: 						"%c%s 1-%d",
; 11830: 						c,
; 11831: 						get_local_entity_string (group, STRING_TYPE_GROUP_CALLSIGN),
; 11832: 						get_local_entity_int_value (member, INT_TYPE_GROUP_MEMBER_ID)
; 11833: 					);
; 11834: 				}
; 11835: 				else

  00a6b	e9 b8 00 00 00	 jmp	 $LN19@draw_missi
$LN18@draw_missi:

; 11836: 				{
; 11837: 					sprintf

  00a70	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  00a77	74 10		 je	 SHORT $LN75@draw_missi
  00a79	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  00a7f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a81	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv417[ebp], ecx
  00a87	eb 27		 jmp	 SHORT $LN76@draw_missi
$LN75@draw_missi:
  00a89	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00a8f	81 c2 c8 00 00
	00		 add	 edx, 200		; 000000c8H
  00a95	52		 push	 edx
  00a96	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a9b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00aa0	50		 push	 eax
  00aa1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00aa6	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv417[ebp], 0
$LN76@draw_missi:
  00ab0	b9 01 00 00 00	 mov	 ecx, 1
  00ab5	85 c9		 test	 ecx, ecx
  00ab7	74 0c		 je	 SHORT $LN77@draw_missi
  00ab9	c7 85 f8 ef ff
	ff 4a 00 00 00	 mov	 DWORD PTR tv425[ebp], 74 ; 0000004aH
  00ac3	eb 27		 jmp	 SHORT $LN78@draw_missi
$LN77@draw_missi:
  00ac5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00acb	81 c2 c8 00 00
	00		 add	 edx, 200		; 000000c8H
  00ad1	52		 push	 edx
  00ad2	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ad7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00adc	50		 push	 eax
  00add	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ae2	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv425[ebp], 0
$LN78@draw_missi:
  00aec	6a 4a		 push	 74			; 0000004aH
  00aee	8b 8d 0c fe ff
	ff		 mov	 ecx, DWORD PTR _member$[ebp]
  00af4	51		 push	 ecx
  00af5	69 95 fc ef ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv417[ebp], 1116
  00aff	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv425[ebp]
  00b05	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00b0c	ff d1		 call	 ecx
  00b0e	50		 push	 eax
  00b0f	0f b6 55 ff	 movzx	 edx, BYTE PTR _c$[ebp]
  00b13	52		 push	 edx
  00b14	68 00 00 00 00	 push	 OFFSET ??_C@_06IAHIIHDD@?$CFc1?9?$CFd@
  00b19	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  00b1f	50		 push	 eax
  00b20	e8 00 00 00 00	 call	 _sprintf
  00b25	83 c4 10	 add	 esp, 16			; 00000010H
$LN19@draw_missi:

; 11838: 					(
; 11839: 						s1,
; 11840: 						"%c1-%d",
; 11841: 						c,
; 11842: 						get_local_entity_int_value (member, INT_TYPE_GROUP_MEMBER_ID)
; 11843: 					);
; 11844: 				}
; 11845: 			}
; 11846: 
; 11847: 			set_mono_font_position (x_min, y_adjust);

  00b28	51		 push	 ecx
  00b29	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00b31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b36	51		 push	 ecx
  00b37	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00b3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b44	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 11848: 
; 11849: 			print_mono_font_max_length_string (s1);

  00b49	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  00b4f	50		 push	 eax
  00b50	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 11850: 
; 11851: 			y_adjust += char_height;

  00b55	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00b5d	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  00b65	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 11852: 
; 11853: 			member = get_local_entity_child_succ (member, LIST_TYPE_MEMBER);

  00b6d	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  00b74	74 10		 je	 SHORT $LN79@draw_missi
  00b76	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  00b7c	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b7e	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv445[ebp], ecx
  00b84	eb 27		 jmp	 SHORT $LN80@draw_missi
$LN79@draw_missi:
  00b86	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00b8c	81 c2 d3 00 00
	00		 add	 edx, 211		; 000000d3H
  00b92	52		 push	 edx
  00b93	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b98	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00b9d	50		 push	 eax
  00b9e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ba3	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv445[ebp], 0
$LN80@draw_missi:
  00bad	b9 01 00 00 00	 mov	 ecx, 1
  00bb2	85 c9		 test	 ecx, ecx
  00bb4	74 0c		 je	 SHORT $LN81@draw_missi
  00bb6	c7 85 f8 ef ff
	ff 19 00 00 00	 mov	 DWORD PTR tv453[ebp], 25 ; 00000019H
  00bc0	eb 27		 jmp	 SHORT $LN82@draw_missi
$LN81@draw_missi:
  00bc2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00bc8	81 c2 d3 00 00
	00		 add	 edx, 211		; 000000d3H
  00bce	52		 push	 edx
  00bcf	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00bd4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00bd9	50		 push	 eax
  00bda	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00bdf	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv453[ebp], 0
$LN82@draw_missi:
  00be9	6a 19		 push	 25			; 00000019H
  00beb	8b 8d 0c fe ff
	ff		 mov	 ecx, DWORD PTR _member$[ebp]
  00bf1	51		 push	 ecx
  00bf2	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv445[ebp], 180
  00bfc	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv453[ebp]
  00c02	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00c09	ff d1		 call	 ecx
  00c0b	89 85 0c fe ff
	ff		 mov	 DWORD PTR _member$[ebp], eax

; 11854: 		}

  00c11	e9 01 fa ff ff	 jmp	 $LN2@draw_missi
$LN3@draw_missi:

; 11855: 
; 11856: 		//
; 11857: 		// formation
; 11858: 		//
; 11859: 
; 11860: 		formation = get_local_entity_int_value (group, INT_TYPE_GROUP_FORMATION);

  00c16	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  00c1d	74 10		 je	 SHORT $LN83@draw_missi
  00c1f	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR _group$[ebp]
  00c25	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c27	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv465[ebp], ecx
  00c2d	eb 27		 jmp	 SHORT $LN84@draw_missi
$LN83@draw_missi:
  00c2f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00c35	81 c2 da 00 00
	00		 add	 edx, 218		; 000000daH
  00c3b	52		 push	 edx
  00c3c	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c41	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00c46	50		 push	 eax
  00c47	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c4c	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv465[ebp], 0
$LN84@draw_missi:
  00c56	b9 01 00 00 00	 mov	 ecx, 1
  00c5b	85 c9		 test	 ecx, ecx
  00c5d	74 0c		 je	 SHORT $LN85@draw_missi
  00c5f	c7 85 f8 ef ff
	ff 47 00 00 00	 mov	 DWORD PTR tv473[ebp], 71 ; 00000047H
  00c69	eb 27		 jmp	 SHORT $LN86@draw_missi
$LN85@draw_missi:
  00c6b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00c71	81 c2 da 00 00
	00		 add	 edx, 218		; 000000daH
  00c77	52		 push	 edx
  00c78	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c7d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00c82	50		 push	 eax
  00c83	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c88	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv473[ebp], 0
$LN86@draw_missi:
  00c92	6a 47		 push	 71			; 00000047H
  00c94	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  00c9a	51		 push	 ecx
  00c9b	69 95 fc ef ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv465[ebp], 1116
  00ca5	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv473[ebp]
  00cab	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00cb2	ff d1		 call	 ecx
  00cb4	89 85 68 fe ff
	ff		 mov	 DWORD PTR _formation$[ebp], eax

; 11861: 
; 11862: 		sprintf (s1, "FORMATION:%s", formation_display_names[formation]);

  00cba	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _formation$[ebp]
  00cc0	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?formation_display_names@@3PAPBDA[eax*4]
  00cc7	51		 push	 ecx
  00cc8	68 00 00 00 00	 push	 OFFSET ??_C@_0N@JBFLAFMH@FORMATION?3?$CFs@
  00ccd	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _s1$[ebp]
  00cd3	52		 push	 edx
  00cd4	e8 00 00 00 00	 call	 _sprintf
  00cd9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 11863: 
; 11864: 		set_mono_font_position (x_min, y_adjust);

  00cdc	51		 push	 ecx
  00cdd	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00ce5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cea	51		 push	 ecx
  00ceb	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00cf3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cf8	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 11865: 
; 11866: 		print_mono_font_max_length_string (s1);

  00cfd	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  00d03	50		 push	 eax
  00d04	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 11867: 
; 11868: 		y_adjust += char_height + 2.0;

  00d09	f3 0f 5a 85 3c
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _char_height$[ebp]
  00d11	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00d19	f3 0f 5a 8d 34
	fe ff ff	 cvtss2sd xmm1, DWORD PTR _y_adjust$[ebp]
  00d21	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00d25	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00d29	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN6@draw_missi:

; 11869: 	}
; 11870: 
; 11871: 	////////////////////////////////////////
; 11872: 	//
; 11873: 	// mission
; 11874: 	//
; 11875: 	////////////////////////////////////////
; 11876: 
; 11877: 	task = get_player_task (NULL);

  00d31	6a 00		 push	 0
  00d33	e8 00 00 00 00	 call	 ?get_player_task@@YGPAUENTITY@@PAU1@@Z ; get_player_task
  00d38	89 85 08 fe ff
	ff		 mov	 DWORD PTR _task$[ebp], eax

; 11878: 
; 11879: 	if (task)

  00d3e	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  00d45	0f 84 ae 0c 00
	00		 je	 $LN20@draw_missi

; 11880: 	{
; 11881: 		ASSERT (get_local_entity_int_value (task, INT_TYPE_VISIBLE_TASK));

  00d4b	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  00d52	74 10		 je	 SHORT $LN87@draw_missi
  00d54	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  00d5a	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d5c	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv501[ebp], ecx
  00d62	eb 27		 jmp	 SHORT $LN88@draw_missi
$LN87@draw_missi:
  00d64	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00d6a	81 c2 ef 00 00
	00		 add	 edx, 239		; 000000efH
  00d70	52		 push	 edx
  00d71	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d76	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00d7b	50		 push	 eax
  00d7c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d81	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv501[ebp], 0
$LN88@draw_missi:
  00d8b	b9 01 00 00 00	 mov	 ecx, 1
  00d90	85 c9		 test	 ecx, ecx
  00d92	74 0c		 je	 SHORT $LN89@draw_missi
  00d94	c7 85 f8 ef ff
	ff fa 00 00 00	 mov	 DWORD PTR tv509[ebp], 250 ; 000000faH
  00d9e	eb 27		 jmp	 SHORT $LN90@draw_missi
$LN89@draw_missi:
  00da0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00da6	81 c2 ef 00 00
	00		 add	 edx, 239		; 000000efH
  00dac	52		 push	 edx
  00dad	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00db2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00db7	50		 push	 eax
  00db8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00dbd	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv509[ebp], 0
$LN90@draw_missi:
  00dc7	68 fa 00 00 00	 push	 250			; 000000faH
  00dcc	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  00dd2	51		 push	 ecx
  00dd3	69 95 fc ef ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv501[ebp], 1116
  00ddd	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv509[ebp]
  00de3	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00dea	ff d1		 call	 ecx
  00dec	85 c0		 test	 eax, eax
  00dee	75 1a		 jne	 SHORT $LN21@draw_missi
  00df0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00df5	05 ef 00 00 00	 add	 eax, 239		; 000000efH
  00dfa	50		 push	 eax
  00dfb	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e00	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@FHGBBPHP@get_local_entity_int_value?5?$CItas@
  00e05	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN21@draw_missi:

; 11882: 
; 11883: 		//
; 11884: 		// title
; 11885: 		//
; 11886: 
; 11887: 		set_mono_font_colour (MFD_COLOUR_WHITE);

  00e0a	b8 04 00 00 00	 mov	 eax, 4
  00e0f	6b c8 13	 imul	 ecx, eax, 19
  00e12	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e18	52		 push	 edx
  00e19	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 11888: 
; 11889: 		draw_line (x_min, y_adjust, x_max, y_adjust, MFD_COLOUR_WHITE);

  00e1e	b8 04 00 00 00	 mov	 eax, 4
  00e23	6b c8 13	 imul	 ecx, eax, 19
  00e26	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e2c	52		 push	 edx
  00e2d	51		 push	 ecx
  00e2e	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00e36	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e3b	51		 push	 ecx
  00e3c	f3 0f 10 85 28
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00e44	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e49	51		 push	 ecx
  00e4a	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00e52	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e57	51		 push	 ecx
  00e58	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00e60	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e65	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 11890: 
; 11891: 		y_adjust += 2.0;

  00e6a	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  00e72	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00e7a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00e7e	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 11892: 
; 11893: 		x_adjust = get_mono_font_string_width ("MISSION") * 0.5;

  00e86	68 00 00 00 00	 push	 OFFSET ??_C@_07PPFPLHID@MISSION@
  00e8b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00e90	dd 9d f8 ef ff
	ff		 fstp	 QWORD PTR tv1210[ebp]
  00e96	f2 0f 10 85 f8
	ef ff ff	 movsd	 xmm0, QWORD PTR tv1210[ebp]
  00e9e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00ea6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00eaa	f3 0f 11 85 38
	fe ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 11894: 
; 11895: 		set_mono_font_position (x_mid - x_adjust, y_adjust);

  00eb2	51		 push	 ecx
  00eb3	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00ebb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ec0	f3 0f 10 85 2c
	fe ff ff	 movss	 xmm0, DWORD PTR _x_mid$[ebp]
  00ec8	f3 0f 5c 85 38
	fe ff ff	 subss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00ed0	51		 push	 ecx
  00ed1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ed6	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 11896: 
; 11897: 		print_mono_font_string ("MISSION");

  00edb	68 00 00 00 00	 push	 OFFSET ??_C@_07PPFPLHID@MISSION@
  00ee0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 11898: 
; 11899: 		y_adjust += char_height;

  00ee5	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00eed	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  00ef5	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 11900: 
; 11901: 		if (draw_large_mfd)

  00efd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00f04	74 1c		 je	 SHORT $LN22@draw_missi

; 11902: 		{
; 11903: 			y_adjust -= 1.0;

  00f06	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  00f0e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00f16	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00f1a	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN22@draw_missi:

; 11904: 		}
; 11905: 
; 11906: 		draw_line (x_min, y_adjust, x_max, y_adjust, MFD_COLOUR_WHITE);

  00f22	b8 04 00 00 00	 mov	 eax, 4
  00f27	6b c8 13	 imul	 ecx, eax, 19
  00f2a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f30	52		 push	 edx
  00f31	51		 push	 ecx
  00f32	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00f3a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f3f	51		 push	 ecx
  00f40	f3 0f 10 85 28
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00f48	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f4d	51		 push	 ecx
  00f4e	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00f56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f5b	51		 push	 ecx
  00f5c	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00f64	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f69	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 11907: 
; 11908: 		if (draw_large_mfd)

  00f6e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00f75	74 1e		 je	 SHORT $LN23@draw_missi

; 11909: 		{
; 11910: 			y_adjust += 3.0;

  00f77	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  00f7f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00f87	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00f8b	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 11911: 		}
; 11912: 		else

  00f93	eb 1c		 jmp	 SHORT $LN24@draw_missi
$LN23@draw_missi:

; 11913: 		{
; 11914: 			y_adjust += 2.0;

  00f95	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  00f9d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00fa5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00fa9	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN24@draw_missi:

; 11915: 		}
; 11916: 
; 11917: 		set_mono_font_colour (MFD_COLOUR_RED);

  00fb1	b8 04 00 00 00	 mov	 eax, 4
  00fb6	6b c8 0f	 imul	 ecx, eax, 15
  00fb9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00fbf	52		 push	 edx
  00fc0	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 11918: 
; 11919: 		//
; 11920: 		// type
; 11921: 		//
; 11922: 
; 11923: 		sprintf (s1, "TYPE  :%s", get_local_entity_string (task, STRING_TYPE_SHORT_DISPLAY_NAME));

  00fc5	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  00fcc	74 10		 je	 SHORT $LN91@draw_missi
  00fce	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  00fd4	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fd6	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv571[ebp], ecx
  00fdc	eb 27		 jmp	 SHORT $LN92@draw_missi
$LN91@draw_missi:
  00fde	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00fe4	81 c2 19 01 00
	00		 add	 edx, 281		; 00000119H
  00fea	52		 push	 edx
  00feb	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ff0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00ff5	50		 push	 eax
  00ff6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ffb	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv571[ebp], 0
$LN92@draw_missi:
  01005	b9 01 00 00 00	 mov	 ecx, 1
  0100a	85 c9		 test	 ecx, ecx
  0100c	74 0c		 je	 SHORT $LN93@draw_missi
  0100e	c7 85 f8 ef ff
	ff 0c 00 00 00	 mov	 DWORD PTR tv579[ebp], 12 ; 0000000cH
  01018	eb 27		 jmp	 SHORT $LN94@draw_missi
$LN93@draw_missi:
  0101a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01020	81 c2 19 01 00
	00		 add	 edx, 281		; 00000119H
  01026	52		 push	 edx
  01027	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0102c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  01031	50		 push	 eax
  01032	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01037	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv579[ebp], 0
$LN94@draw_missi:
  01041	6a 0c		 push	 12			; 0000000cH
  01043	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  01049	51		 push	 ecx
  0104a	6b 95 fc ef ff
	ff 34		 imul	 edx, DWORD PTR tv571[ebp], 52
  01051	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv579[ebp]
  01057	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  0105e	ff d1		 call	 ecx
  01060	50		 push	 eax
  01061	68 00 00 00 00	 push	 OFFSET ??_C@_09FCABHDEH@TYPE?5?5?3?$CFs@
  01066	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _s1$[ebp]
  0106c	52		 push	 edx
  0106d	e8 00 00 00 00	 call	 _sprintf
  01072	83 c4 0c	 add	 esp, 12			; 0000000cH

; 11924: 
; 11925: 		set_mono_font_position (x_min, y_adjust);

  01075	51		 push	 ecx
  01076	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0107e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01083	51		 push	 ecx
  01084	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0108c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01091	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 11926: 
; 11927: 		print_mono_font_max_length_string (s1);

  01096	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  0109c	50		 push	 eax
  0109d	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 11928: 
; 11929: 		y_adjust += char_height;

  010a2	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  010aa	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  010b2	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 11930: 
; 11931: 		if (draw_large_mfd)

  010ba	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  010c1	74 1c		 je	 SHORT $LN25@draw_missi

; 11932: 		{
; 11933: 			y_adjust += 2.0;

  010c3	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  010cb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  010d3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  010d7	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN25@draw_missi:

; 11934: 		}
; 11935: 
; 11936: 		//
; 11937: 		// objective
; 11938: 		//
; 11939: 
; 11940: 		objective = get_local_entity_parent (task, LIST_TYPE_TASK_DEPENDENT);

  010df	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  010e6	74 10		 je	 SHORT $LN95@draw_missi
  010e8	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  010ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  010f0	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv601[ebp], ecx
  010f6	eb 27		 jmp	 SHORT $LN96@draw_missi
$LN95@draw_missi:
  010f8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  010fe	81 c2 2a 01 00
	00		 add	 edx, 298		; 0000012aH
  01104	52		 push	 edx
  01105	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0110a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0110f	50		 push	 eax
  01110	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01115	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv601[ebp], 0
$LN96@draw_missi:
  0111f	b9 01 00 00 00	 mov	 ecx, 1
  01124	85 c9		 test	 ecx, ecx
  01126	74 0c		 je	 SHORT $LN97@draw_missi
  01128	c7 85 f8 ef ff
	ff 27 00 00 00	 mov	 DWORD PTR tv609[ebp], 39 ; 00000027H
  01132	eb 27		 jmp	 SHORT $LN98@draw_missi
$LN97@draw_missi:
  01134	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  0113a	81 c2 2a 01 00
	00		 add	 edx, 298		; 0000012aH
  01140	52		 push	 edx
  01141	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01146	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0114b	50		 push	 eax
  0114c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01151	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv609[ebp], 0
$LN98@draw_missi:
  0115b	6a 27		 push	 39			; 00000027H
  0115d	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  01163	51		 push	 ecx
  01164	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv601[ebp], 180
  0116e	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv609[ebp]
  01174	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0117b	ff d1		 call	 ecx
  0117d	89 85 00 fe ff
	ff		 mov	 DWORD PTR _objective$[ebp], eax

; 11941: 
; 11942: 		if (objective)

  01183	83 bd 00 fe ff
	ff 00		 cmp	 DWORD PTR _objective$[ebp], 0
  0118a	0f 84 e4 00 00
	00		 je	 $LN27@draw_missi

; 11943: 		{
; 11944: 			char
; 11945: 				buffer[1024];
; 11946: 
; 11947: 			get_task_objective_mfd_display_string (task, buffer);

  01190	8d 85 00 fa ff
	ff		 lea	 eax, DWORD PTR _buffer$3[ebp]
  01196	50		 push	 eax
  01197	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  0119d	51		 push	 ecx
  0119e	e8 00 00 00 00	 call	 ?get_task_objective_mfd_display_string@@YGXPAUENTITY@@PAD@Z ; get_task_objective_mfd_display_string

; 11948: 
; 11949: 			sprintf (s1, "OBJECT:%s", buffer);

  011a3	8d 85 00 fa ff
	ff		 lea	 eax, DWORD PTR _buffer$3[ebp]
  011a9	50		 push	 eax
  011aa	68 00 00 00 00	 push	 OFFSET ??_C@_09MMJDMDOM@OBJECT?3?$CFs@
  011af	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _s1$[ebp]
  011b5	51		 push	 ecx
  011b6	e8 00 00 00 00	 call	 _sprintf
  011bb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 11950: 
; 11951: 			set_mono_font_position (x_min, y_adjust);

  011be	51		 push	 ecx
  011bf	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  011c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011cc	51		 push	 ecx
  011cd	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  011d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011da	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 11952: 
; 11953: 			print_mono_font_max_length_string (s1);

  011df	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  011e5	50		 push	 eax
  011e6	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 11954: 
; 11955: 			y_adjust += char_height;

  011eb	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  011f3	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  011fb	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 11956: 
; 11957: 			set_mono_font_position (x_min, y_adjust);

  01203	51		 push	 ecx
  01204	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0120c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01211	51		 push	 ecx
  01212	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0121a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0121f	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 11958: 
; 11959: 			print_target_position (en, objective);

  01224	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _objective$[ebp]
  0122a	50		 push	 eax
  0122b	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR _en$[ebp]
  01231	51		 push	 ecx
  01232	e8 00 00 00 00	 call	 ?print_target_position@@YGXPAUENTITY@@0@Z ; print_target_position

; 11960: 
; 11961: 			y_adjust += char_height;

  01237	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0123f	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  01247	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 11962: 
; 11963: 			if (draw_large_mfd)

  0124f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01256	74 1c		 je	 SHORT $LN27@draw_missi

; 11964: 			{
; 11965: 				y_adjust += 2.0;

  01258	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01260	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01268	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0126c	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN27@draw_missi:

; 11966: 			}
; 11967: 		}
; 11968: 
; 11969: 		//
; 11970: 		// status
; 11971: 		//
; 11972: 
; 11973: 		status_name = get_local_entity_int_value (task, INT_TYPE_TASK_COMPLETED);

  01274	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  0127b	74 10		 je	 SHORT $LN99@draw_missi
  0127d	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  01283	8b 08		 mov	 ecx, DWORD PTR [eax]
  01285	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv640[ebp], ecx
  0128b	eb 27		 jmp	 SHORT $LN100@draw_missi
$LN99@draw_missi:
  0128d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01293	81 c2 4b 01 00
	00		 add	 edx, 331		; 0000014bH
  01299	52		 push	 edx
  0129a	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0129f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  012a4	50		 push	 eax
  012a5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  012aa	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv640[ebp], 0
$LN100@draw_missi:
  012b4	b9 01 00 00 00	 mov	 ecx, 1
  012b9	85 c9		 test	 ecx, ecx
  012bb	74 0c		 je	 SHORT $LN101@draw_missi
  012bd	c7 85 f8 ef ff
	ff d9 00 00 00	 mov	 DWORD PTR tv648[ebp], 217 ; 000000d9H
  012c7	eb 27		 jmp	 SHORT $LN102@draw_missi
$LN101@draw_missi:
  012c9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  012cf	81 c2 4b 01 00
	00		 add	 edx, 331		; 0000014bH
  012d5	52		 push	 edx
  012d6	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  012db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  012e0	50		 push	 eax
  012e1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  012e6	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv648[ebp], 0
$LN102@draw_missi:
  012f0	68 d9 00 00 00	 push	 217			; 000000d9H
  012f5	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  012fb	51		 push	 ecx
  012fc	69 95 fc ef ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv640[ebp], 1116
  01306	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv648[ebp]
  0130c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  01313	ff d1		 call	 ecx
  01315	89 85 64 fe ff
	ff		 mov	 DWORD PTR _status_name$[ebp], eax

; 11974: 
; 11975: 		sprintf (s1, "STATUS:%s", task_status_names[status_name]);

  0131b	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _status_name$[ebp]
  01321	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?task_status_names@@3PAPBDA[eax*4]
  01328	51		 push	 ecx
  01329	68 00 00 00 00	 push	 OFFSET ??_C@_09NFLHCPML@STATUS?3?$CFs@
  0132e	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _s1$[ebp]
  01334	52		 push	 edx
  01335	e8 00 00 00 00	 call	 _sprintf
  0133a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 11976: 
; 11977: 		set_mono_font_position (x_min, y_adjust);

  0133d	51		 push	 ecx
  0133e	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01346	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0134b	51		 push	 ecx
  0134c	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  01354	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01359	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 11978: 
; 11979: 		print_mono_font_max_length_string (s1);

  0135e	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  01364	50		 push	 eax
  01365	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 11980: 
; 11981: 		y_adjust += char_height;

  0136a	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01372	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  0137a	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 11982: 
; 11983: 		if (draw_large_mfd)

  01382	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01389	74 1c		 je	 SHORT $LN28@draw_missi

; 11984: 		{
; 11985: 			y_adjust += 2.0;

  0138b	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01393	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0139b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0139f	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN28@draw_missi:

; 11986: 		}
; 11987: 
; 11988: 		//
; 11989: 		// start base
; 11990: 		//
; 11991: 
; 11992: 		keysite = get_local_entity_parent (task, LIST_TYPE_ASSIGNED_TASK);

  013a7	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  013ae	74 10		 je	 SHORT $LN103@draw_missi
  013b0	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  013b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  013b8	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv673[ebp], ecx
  013be	eb 27		 jmp	 SHORT $LN104@draw_missi
$LN103@draw_missi:
  013c0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  013c6	81 c2 5e 01 00
	00		 add	 edx, 350		; 0000015eH
  013cc	52		 push	 edx
  013cd	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  013d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  013d7	50		 push	 eax
  013d8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  013dd	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv673[ebp], 0
$LN104@draw_missi:
  013e7	b9 01 00 00 00	 mov	 ecx, 1
  013ec	85 c9		 test	 ecx, ecx
  013ee	74 0c		 je	 SHORT $LN105@draw_missi
  013f0	c7 85 f8 ef ff
	ff 03 00 00 00	 mov	 DWORD PTR tv681[ebp], 3
  013fa	eb 27		 jmp	 SHORT $LN106@draw_missi
$LN105@draw_missi:
  013fc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01402	81 c2 5e 01 00
	00		 add	 edx, 350		; 0000015eH
  01408	52		 push	 edx
  01409	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0140e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01413	50		 push	 eax
  01414	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01419	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv681[ebp], 0
$LN106@draw_missi:
  01423	6a 03		 push	 3
  01425	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  0142b	51		 push	 ecx
  0142c	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv673[ebp], 180
  01436	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv681[ebp]
  0143c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01443	ff d1		 call	 ecx
  01445	89 85 04 fe ff
	ff		 mov	 DWORD PTR _keysite$[ebp], eax

; 11993: 
; 11994: 		if (keysite)

  0144b	83 bd 04 fe ff
	ff 00		 cmp	 DWORD PTR _keysite$[ebp], 0
  01452	0f 84 e4 00 00
	00		 je	 $LN30@draw_missi

; 11995: 		{
; 11996: 			char
; 11997: 				buffer[1024];
; 11998: 
; 11999: 			get_keysite_entity_mfd_display_name (keysite, buffer);

  01458	8d 85 00 f6 ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  0145e	50		 push	 eax
  0145f	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR _keysite$[ebp]
  01465	51		 push	 ecx
  01466	e8 00 00 00 00	 call	 ?get_keysite_entity_mfd_display_name@@YGXPAUENTITY@@PAD@Z ; get_keysite_entity_mfd_display_name

; 12000: 
; 12001: 			sprintf (s1, "START :%s", buffer);

  0146b	8d 85 00 f6 ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  01471	50		 push	 eax
  01472	68 00 00 00 00	 push	 OFFSET ??_C@_09MDEJFDEL@START?5?3?$CFs@
  01477	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _s1$[ebp]
  0147d	51		 push	 ecx
  0147e	e8 00 00 00 00	 call	 _sprintf
  01483	83 c4 0c	 add	 esp, 12			; 0000000cH

; 12002: 
; 12003: 			set_mono_font_position (x_min, y_adjust);

  01486	51		 push	 ecx
  01487	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0148f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01494	51		 push	 ecx
  01495	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0149d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014a2	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 12004: 
; 12005: 			print_mono_font_max_length_string (s1);

  014a7	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  014ad	50		 push	 eax
  014ae	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 12006: 
; 12007: 			y_adjust += char_height;

  014b3	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  014bb	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  014c3	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 12008: 
; 12009: 			set_mono_font_position (x_min, y_adjust);

  014cb	51		 push	 ecx
  014cc	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  014d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014d9	51		 push	 ecx
  014da	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  014e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014e7	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 12010: 
; 12011: 			print_target_position (en, keysite);

  014ec	8b 85 04 fe ff
	ff		 mov	 eax, DWORD PTR _keysite$[ebp]
  014f2	50		 push	 eax
  014f3	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR _en$[ebp]
  014f9	51		 push	 ecx
  014fa	e8 00 00 00 00	 call	 ?print_target_position@@YGXPAUENTITY@@0@Z ; print_target_position

; 12012: 
; 12013: 			y_adjust += char_height;

  014ff	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01507	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  0150f	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 12014: 
; 12015: 			if (draw_large_mfd)

  01517	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0151e	74 1c		 je	 SHORT $LN30@draw_missi

; 12016: 			{
; 12017: 				y_adjust += 2.0;

  01520	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01528	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01530	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01534	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN30@draw_missi:

; 12018: 			}
; 12019: 		}
; 12020: 
; 12021: 		//
; 12022: 		// end base
; 12023: 		//
; 12024: 
; 12025: 		keysite = (entity *) get_local_entity_ptr_value (task, PTR_TYPE_RETURN_KEYSITE);

  0153c	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  01543	74 10		 je	 SHORT $LN107@draw_missi
  01545	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  0154b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0154d	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv744[ebp], ecx
  01553	eb 27		 jmp	 SHORT $LN108@draw_missi
$LN107@draw_missi:
  01555	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  0155b	81 c2 7f 01 00
	00		 add	 edx, 383		; 0000017fH
  01561	52		 push	 edx
  01562	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01567	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0156c	50		 push	 eax
  0156d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01572	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv744[ebp], 0
$LN108@draw_missi:
  0157c	b9 01 00 00 00	 mov	 ecx, 1
  01581	85 c9		 test	 ecx, ecx
  01583	74 0c		 je	 SHORT $LN109@draw_missi
  01585	c7 85 f8 ef ff
	ff 08 00 00 00	 mov	 DWORD PTR tv752[ebp], 8
  0158f	eb 27		 jmp	 SHORT $LN110@draw_missi
$LN109@draw_missi:
  01591	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01597	81 c2 7f 01 00
	00		 add	 edx, 383		; 0000017fH
  0159d	52		 push	 edx
  0159e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  015a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_ptr_type_message@@3PBDB ; overload_invalid_ptr_type_message
  015a8	50		 push	 eax
  015a9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  015ae	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv752[ebp], 0
$LN110@draw_missi:
  015b8	6a 08		 push	 8
  015ba	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  015c0	51		 push	 ecx
  015c1	6b 95 fc ef ff
	ff 50		 imul	 edx, DWORD PTR tv744[ebp], 80
  015c8	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv752[ebp]
  015ce	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_ptr_value@@3PAY0BE@P6GPAXPAUENTITY@@W4PTR_TYPES@@@ZA[edx+eax*4]
  015d5	ff d1		 call	 ecx
  015d7	89 85 04 fe ff
	ff		 mov	 DWORD PTR _keysite$[ebp], eax

; 12026: 
; 12027: 		if (keysite)

  015dd	83 bd 04 fe ff
	ff 00		 cmp	 DWORD PTR _keysite$[ebp], 0
  015e4	0f 84 e4 00 00
	00		 je	 $LN32@draw_missi

; 12028: 		{
; 12029: 			char
; 12030: 				buffer[1024];
; 12031: 
; 12032: 			get_keysite_entity_mfd_display_name (keysite, buffer);

  015ea	8d 85 00 f2 ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  015f0	50		 push	 eax
  015f1	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR _keysite$[ebp]
  015f7	51		 push	 ecx
  015f8	e8 00 00 00 00	 call	 ?get_keysite_entity_mfd_display_name@@YGXPAUENTITY@@PAD@Z ; get_keysite_entity_mfd_display_name

; 12033: 
; 12034: 			sprintf (s1, "END   :%s", buffer);

  015fd	8d 85 00 f2 ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  01603	50		 push	 eax
  01604	68 00 00 00 00	 push	 OFFSET ??_C@_09HDLDOKLK@END?5?5?5?3?$CFs@
  01609	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _s1$[ebp]
  0160f	51		 push	 ecx
  01610	e8 00 00 00 00	 call	 _sprintf
  01615	83 c4 0c	 add	 esp, 12			; 0000000cH

; 12035: 
; 12036: 			set_mono_font_position (x_min, y_adjust);

  01618	51		 push	 ecx
  01619	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01621	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01626	51		 push	 ecx
  01627	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0162f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01634	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 12037: 
; 12038: 			print_mono_font_max_length_string (s1);

  01639	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  0163f	50		 push	 eax
  01640	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 12039: 
; 12040: 			y_adjust += char_height;

  01645	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0164d	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  01655	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 12041: 
; 12042: 			set_mono_font_position (x_min, y_adjust);

  0165d	51		 push	 ecx
  0165e	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01666	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0166b	51		 push	 ecx
  0166c	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  01674	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01679	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 12043: 
; 12044: 			print_target_position (en, keysite);

  0167e	8b 85 04 fe ff
	ff		 mov	 eax, DWORD PTR _keysite$[ebp]
  01684	50		 push	 eax
  01685	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR _en$[ebp]
  0168b	51		 push	 ecx
  0168c	e8 00 00 00 00	 call	 ?print_target_position@@YGXPAUENTITY@@0@Z ; print_target_position

; 12045: 
; 12046: 			y_adjust += char_height;

  01691	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01699	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  016a1	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 12047: 
; 12048: 			if (draw_large_mfd)

  016a9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  016b0	74 1c		 je	 SHORT $LN32@draw_missi

; 12049: 			{
; 12050: 				y_adjust += 2.0;

  016b2	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  016ba	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  016c2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  016c6	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN32@draw_missi:

; 12051: 			}
; 12052: 		}
; 12053: 
; 12054: 		//
; 12055: 		// count (kills and losses)
; 12056: 		//
; 12057: 
; 12058: 		sprintf

  016ce	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  016d5	74 10		 je	 SHORT $LN111@draw_missi
  016d7	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  016dd	8b 08		 mov	 ecx, DWORD PTR [eax]
  016df	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv784[ebp], ecx
  016e5	eb 27		 jmp	 SHORT $LN112@draw_missi
$LN111@draw_missi:
  016e7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  016ed	81 c2 a5 01 00
	00		 add	 edx, 421		; 000001a5H
  016f3	52		 push	 edx
  016f4	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  016f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  016fe	50		 push	 eax
  016ff	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01704	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv784[ebp], 0
$LN112@draw_missi:
  0170e	b9 01 00 00 00	 mov	 ecx, 1
  01713	85 c9		 test	 ecx, ecx
  01715	74 0c		 je	 SHORT $LN113@draw_missi
  01717	c7 85 f8 ef ff
	ff 7f 00 00 00	 mov	 DWORD PTR tv792[ebp], 127 ; 0000007fH
  01721	eb 27		 jmp	 SHORT $LN114@draw_missi
$LN113@draw_missi:
  01723	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01729	81 c2 a5 01 00
	00		 add	 edx, 421		; 000001a5H
  0172f	52		 push	 edx
  01730	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01735	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0173a	50		 push	 eax
  0173b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01740	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv792[ebp], 0
$LN114@draw_missi:
  0174a	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  01751	74 10		 je	 SHORT $LN115@draw_missi
  01753	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  01759	8b 11		 mov	 edx, DWORD PTR [ecx]
  0175b	89 95 f4 ef ff
	ff		 mov	 DWORD PTR tv805[ebp], edx
  01761	eb 26		 jmp	 SHORT $LN116@draw_missi
$LN115@draw_missi:
  01763	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01768	05 a4 01 00 00	 add	 eax, 420		; 000001a4H
  0176d	50		 push	 eax
  0176e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01773	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01779	51		 push	 ecx
  0177a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0177f	c7 85 f4 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv805[ebp], 0
$LN116@draw_missi:
  01789	ba 01 00 00 00	 mov	 edx, 1
  0178e	85 d2		 test	 edx, edx
  01790	74 0c		 je	 SHORT $LN117@draw_missi
  01792	c7 85 f0 ef ff
	ff 72 00 00 00	 mov	 DWORD PTR tv813[ebp], 114 ; 00000072H
  0179c	eb 26		 jmp	 SHORT $LN118@draw_missi
$LN117@draw_missi:
  0179e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  017a3	05 a4 01 00 00	 add	 eax, 420		; 000001a4H
  017a8	50		 push	 eax
  017a9	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  017ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  017b4	51		 push	 ecx
  017b5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  017ba	c7 85 f0 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv813[ebp], 0
$LN118@draw_missi:
  017c4	6a 7f		 push	 127			; 0000007fH
  017c6	8b 95 08 fe ff
	ff		 mov	 edx, DWORD PTR _task$[ebp]
  017cc	52		 push	 edx
  017cd	69 85 fc ef ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv784[ebp], 1116
  017d7	8b 8d f8 ef ff
	ff		 mov	 ecx, DWORD PTR tv792[ebp]
  017dd	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  017e4	ff d2		 call	 edx
  017e6	50		 push	 eax
  017e7	6a 72		 push	 114			; 00000072H
  017e9	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  017ef	50		 push	 eax
  017f0	69 8d f4 ef ff
	ff 5c 04 00 00	 imul	 ecx, DWORD PTR tv805[ebp], 1116
  017fa	8b 95 f0 ef ff
	ff		 mov	 edx, DWORD PTR tv813[ebp]
  01800	8b 84 91 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[ecx+edx*4]
  01807	ff d0		 call	 eax
  01809	50		 push	 eax
  0180a	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@MIBJHEEL@COUNT?5?3Kills?$DN?$CFd?5Losses?$DN?$CFd@
  0180f	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _s1$[ebp]
  01815	51		 push	 ecx
  01816	e8 00 00 00 00	 call	 _sprintf
  0181b	83 c4 10	 add	 esp, 16			; 00000010H

; 12059: 		(
; 12060: 			s1,
; 12061: 			"COUNT :Kills=%d Losses=%d",
; 12062: 			get_local_entity_int_value (task, INT_TYPE_KILLS),
; 12063: 			get_local_entity_int_value (task, INT_TYPE_LOSSES)
; 12064: 		);
; 12065: 
; 12066: 		set_mono_font_position (x_min, y_adjust);

  0181e	51		 push	 ecx
  0181f	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01827	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0182c	51		 push	 ecx
  0182d	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  01835	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0183a	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 12067: 
; 12068: 		print_mono_font_max_length_string (s1);

  0183f	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  01845	50		 push	 eax
  01846	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 12069: 
; 12070: 		y_adjust += char_height;

  0184b	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01853	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  0185b	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 12071: 
; 12072: 		if (draw_large_mfd)

  01863	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0186a	74 1c		 je	 SHORT $LN33@draw_missi

; 12073: 		{
; 12074: 			y_adjust += 2.0;

  0186c	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01874	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0187c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01880	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN33@draw_missi:

; 12075: 		}
; 12076: 
; 12077: 		//
; 12078: 		// time
; 12079: 		//
; 12080: 
; 12081: 		mission_time = get_local_entity_float_value (task, FLOAT_TYPE_ELAPSED_MISSION_TIME);

  01888	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  0188f	74 10		 je	 SHORT $LN119@draw_missi
  01891	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  01897	8b 08		 mov	 ecx, DWORD PTR [eax]
  01899	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv835[ebp], ecx
  0189f	eb 27		 jmp	 SHORT $LN120@draw_missi
$LN119@draw_missi:
  018a1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  018a7	81 c2 b7 01 00
	00		 add	 edx, 439		; 000001b7H
  018ad	52		 push	 edx
  018ae	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  018b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  018b8	50		 push	 eax
  018b9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  018be	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv835[ebp], 0
$LN120@draw_missi:
  018c8	b9 01 00 00 00	 mov	 ecx, 1
  018cd	85 c9		 test	 ecx, ecx
  018cf	74 0c		 je	 SHORT $LN121@draw_missi
  018d1	c7 85 f8 ef ff
	ff 22 00 00 00	 mov	 DWORD PTR tv843[ebp], 34 ; 00000022H
  018db	eb 27		 jmp	 SHORT $LN122@draw_missi
$LN121@draw_missi:
  018dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  018e3	81 c2 b7 01 00
	00		 add	 edx, 439		; 000001b7H
  018e9	52		 push	 edx
  018ea	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  018ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  018f4	50		 push	 eax
  018f5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  018fa	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv843[ebp], 0
$LN122@draw_missi:
  01904	6a 22		 push	 34			; 00000022H
  01906	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  0190c	51		 push	 ecx
  0190d	69 95 fc ef ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv835[ebp], 700
  01917	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv843[ebp]
  0191d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  01924	ff d1		 call	 ecx
  01926	d9 9d 20 fe ff
	ff		 fstp	 DWORD PTR _mission_time$[ebp]

; 12082: 
; 12083: 		get_digital_clock_int_values (mission_time, &mission_hours, &mission_minutes, &mission_seconds);

  0192c	8d 85 4c fe ff
	ff		 lea	 eax, DWORD PTR _mission_seconds$[ebp]
  01932	50		 push	 eax
  01933	8d 8d 50 fe ff
	ff		 lea	 ecx, DWORD PTR _mission_minutes$[ebp]
  01939	51		 push	 ecx
  0193a	8d 95 54 fe ff
	ff		 lea	 edx, DWORD PTR _mission_hours$[ebp]
  01940	52		 push	 edx
  01941	51		 push	 ecx
  01942	f3 0f 10 85 20
	fe ff ff	 movss	 xmm0, DWORD PTR _mission_time$[ebp]
  0194a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0194f	e8 00 00 00 00	 call	 ?get_digital_clock_int_values@@YGXMPAH00@Z ; get_digital_clock_int_values

; 12084: 
; 12085: 		estimated_time = get_task_estimated_route_duration (task);

  01954	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  0195a	50		 push	 eax
  0195b	e8 00 00 00 00	 call	 ?get_task_estimated_route_duration@@YGMPAUENTITY@@@Z ; get_task_estimated_route_duration
  01960	d9 9d 1c fe ff
	ff		 fstp	 DWORD PTR _estimated_time$[ebp]

; 12086: 
; 12087: 		get_digital_clock_int_values (estimated_time, &estimated_hours, &estimated_minutes, &estimated_seconds);

  01966	8d 85 40 fe ff
	ff		 lea	 eax, DWORD PTR _estimated_seconds$[ebp]
  0196c	50		 push	 eax
  0196d	8d 8d 44 fe ff
	ff		 lea	 ecx, DWORD PTR _estimated_minutes$[ebp]
  01973	51		 push	 ecx
  01974	8d 95 48 fe ff
	ff		 lea	 edx, DWORD PTR _estimated_hours$[ebp]
  0197a	52		 push	 edx
  0197b	51		 push	 ecx
  0197c	f3 0f 10 85 1c
	fe ff ff	 movss	 xmm0, DWORD PTR _estimated_time$[ebp]
  01984	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01989	e8 00 00 00 00	 call	 ?get_digital_clock_int_values@@YGXMPAH00@Z ; get_digital_clock_int_values

; 12088: 
; 12089: 		sprintf

  0198e	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR _estimated_seconds$[ebp]
  01994	50		 push	 eax
  01995	8b 8d 44 fe ff
	ff		 mov	 ecx, DWORD PTR _estimated_minutes$[ebp]
  0199b	51		 push	 ecx
  0199c	8b 95 48 fe ff
	ff		 mov	 edx, DWORD PTR _estimated_hours$[ebp]
  019a2	52		 push	 edx
  019a3	8b 85 4c fe ff
	ff		 mov	 eax, DWORD PTR _mission_seconds$[ebp]
  019a9	50		 push	 eax
  019aa	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _mission_minutes$[ebp]
  019b0	51		 push	 ecx
  019b1	8b 95 54 fe ff
	ff		 mov	 edx, DWORD PTR _mission_hours$[ebp]
  019b7	52		 push	 edx
  019b8	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@NLIKEJAC@TIME?5?5?3MT?$DN?$CF02d?3?$CF02d?3?$CF02d?5MD?$DN?$CF02@
  019bd	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  019c3	50		 push	 eax
  019c4	e8 00 00 00 00	 call	 _sprintf
  019c9	83 c4 20	 add	 esp, 32			; 00000020H

; 12090: 		(
; 12091: 			s1,
; 12092: 			"TIME  :MT=%02d:%02d:%02d MD=%02d:%02d:%02d",
; 12093: 			mission_hours,
; 12094: 			mission_minutes,
; 12095: 			mission_seconds,
; 12096: 			estimated_hours,
; 12097: 			estimated_minutes,
; 12098: 			estimated_seconds
; 12099: 		);
; 12100: 
; 12101: 		set_mono_font_position (x_min, y_adjust);

  019cc	51		 push	 ecx
  019cd	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  019d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019da	51		 push	 ecx
  019db	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  019e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019e8	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 12102: 
; 12103: 		print_mono_font_max_length_string (s1);

  019ed	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  019f3	50		 push	 eax
  019f4	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string
$LN20@draw_missi:

; 12104: 	}
; 12105: 
; 12106: 	////////////////////////////////////////
; 12107: 	//
; 12108: 	// time of day
; 12109: 	//
; 12110: 	////////////////////////////////////////
; 12111: 
; 12112: 	set_mono_font_colour (MFD_COLOUR_WHITE);

  019f9	b8 04 00 00 00	 mov	 eax, 4
  019fe	6b c8 13	 imul	 ecx, eax, 19
  01a01	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a07	52		 push	 edx
  01a08	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 12113: 
; 12114: 	get_2d_float_screen_y_coordinate (-0.9, &y_adjust);

  01a0d	8d 85 34 fe ff
	ff		 lea	 eax, DWORD PTR _y_adjust$[ebp]
  01a13	50		 push	 eax
  01a14	51		 push	 ecx
  01a15	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  01a1d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a22	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 12115: 
; 12116: 	y_adjust -= 2.0;

  01a27	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01a2f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4000000000000000
  01a37	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a3b	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 12117: 
; 12118: 	draw_line (x_min, y_adjust, x_max, y_adjust, MFD_COLOUR_WHITE);

  01a43	b8 04 00 00 00	 mov	 eax, 4
  01a48	6b c8 13	 imul	 ecx, eax, 19
  01a4b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a51	52		 push	 edx
  01a52	51		 push	 ecx
  01a53	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01a5b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a60	51		 push	 ecx
  01a61	f3 0f 10 85 28
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  01a69	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a6e	51		 push	 ecx
  01a6f	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01a77	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a7c	51		 push	 ecx
  01a7d	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  01a85	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a8a	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 12119: 
; 12120: 	y_adjust += 2.0;

  01a8f	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01a97	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01a9f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01aa3	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 12121: 
; 12122: 	time = get_local_entity_float_value (get_session_entity (), FLOAT_TYPE_TIME_OF_DAY);

  01aab	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  01ab2	74 0f		 je	 SHORT $LN123@draw_missi
  01ab4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  01ab9	8b 08		 mov	 ecx, DWORD PTR [eax]
  01abb	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv894[ebp], ecx
  01ac1	eb 27		 jmp	 SHORT $LN124@draw_missi
$LN123@draw_missi:
  01ac3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01ac9	81 c2 e0 01 00
	00		 add	 edx, 480		; 000001e0H
  01acf	52		 push	 edx
  01ad0	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01ad5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01ada	50		 push	 eax
  01adb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01ae0	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv894[ebp], 0
$LN124@draw_missi:
  01aea	b9 01 00 00 00	 mov	 ecx, 1
  01aef	85 c9		 test	 ecx, ecx
  01af1	74 0c		 je	 SHORT $LN125@draw_missi
  01af3	c7 85 f8 ef ff
	ff 8e 00 00 00	 mov	 DWORD PTR tv902[ebp], 142 ; 0000008eH
  01afd	eb 27		 jmp	 SHORT $LN126@draw_missi
$LN125@draw_missi:
  01aff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01b05	81 c2 e0 01 00
	00		 add	 edx, 480		; 000001e0H
  01b0b	52		 push	 edx
  01b0c	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01b11	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  01b16	50		 push	 eax
  01b17	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01b1c	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv902[ebp], 0
$LN126@draw_missi:
  01b26	68 8e 00 00 00	 push	 142			; 0000008eH
  01b2b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  01b31	51		 push	 ecx
  01b32	69 95 fc ef ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv894[ebp], 700
  01b3c	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv902[ebp]
  01b42	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  01b49	ff d1		 call	 ecx
  01b4b	d9 9d 24 fe ff
	ff		 fstp	 DWORD PTR _time$[ebp]

; 12123: 
; 12124: 	get_digital_clock_int_values (time, &hours, &minutes, &seconds);

  01b51	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR _seconds$[ebp]
  01b57	50		 push	 eax
  01b58	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR _minutes$[ebp]
  01b5e	51		 push	 ecx
  01b5f	8d 95 60 fe ff
	ff		 lea	 edx, DWORD PTR _hours$[ebp]
  01b65	52		 push	 edx
  01b66	51		 push	 ecx
  01b67	f3 0f 10 85 24
	fe ff ff	 movss	 xmm0, DWORD PTR _time$[ebp]
  01b6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b74	e8 00 00 00 00	 call	 ?get_digital_clock_int_values@@YGXMPAH00@Z ; get_digital_clock_int_values

; 12125: 
; 12126: 	sprintf (s1, "%02d:%02d:%02d", hours, minutes, seconds);

  01b79	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR _seconds$[ebp]
  01b7f	50		 push	 eax
  01b80	8b 8d 5c fe ff
	ff		 mov	 ecx, DWORD PTR _minutes$[ebp]
  01b86	51		 push	 ecx
  01b87	8b 95 60 fe ff
	ff		 mov	 edx, DWORD PTR _hours$[ebp]
  01b8d	52		 push	 edx
  01b8e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
  01b93	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  01b99	50		 push	 eax
  01b9a	e8 00 00 00 00	 call	 _sprintf
  01b9f	83 c4 14	 add	 esp, 20			; 00000014H

; 12127: 
; 12128: 	x_adjust = get_mono_font_string_width (s1) * 0.5;

  01ba2	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  01ba8	50		 push	 eax
  01ba9	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01bae	dd 9d f8 ef ff
	ff		 fstp	 QWORD PTR tv1457[ebp]
  01bb4	f2 0f 10 85 f8
	ef ff ff	 movsd	 xmm0, QWORD PTR tv1457[ebp]
  01bbc	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  01bc4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01bc8	f3 0f 11 85 38
	fe ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 12129: 
; 12130: 	set_mono_font_position (x_mid - x_adjust, y_adjust);

  01bd0	51		 push	 ecx
  01bd1	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01bd9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bde	f3 0f 10 85 2c
	fe ff ff	 movss	 xmm0, DWORD PTR _x_mid$[ebp]
  01be6	f3 0f 5c 85 38
	fe ff ff	 subss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01bee	51		 push	 ecx
  01bef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bf4	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 12131: 
; 12132: 	print_mono_font_string (s1);

  01bf9	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  01bff	50		 push	 eax
  01c00	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 12133: }

  01c05	5f		 pop	 edi
  01c06	5e		 pop	 esi
  01c07	5b		 pop	 ebx
  01c08	8b e5		 mov	 esp, ebp
  01c0a	5d		 pop	 ebp
  01c0b	c3		 ret	 0
?draw_mission_display_mfd@@YGXXZ ENDP			; draw_mission_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?print_target_position@@YGXPAUENTITY@@0@Z
_TEXT	SEGMENT
tv88 = -172						; size = 4
tv193 = -168						; size = 4
tv80 = -168						; size = 4
_position$ = -100					; size = 4
_range$ = -96						; size = 4
_bearing$ = -92						; size = 4
_z_sector$ = -88					; size = 4
_x_sector$ = -84					; size = 4
_s$ = -80						; size = 80
_source$ = 8						; size = 4
_target$ = 12						; size = 4
?print_target_position@@YGXPAUENTITY@@0@Z PROC		; print_target_position, COMDAT

; 11597: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 11598: 	char
; 11599: 		s[80];
; 11600: 
; 11601: 	int
; 11602: 		x_sector,
; 11603: 		z_sector,
; 11604: 		bearing;
; 11605: 
; 11606: 	float
; 11607: 		range;
; 11608: 
; 11609: 	vec3d
; 11610: 		*position;
; 11611: 
; 11612: 	ASSERT (source);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _source$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@print_targ
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
  00017	83 c0 0f	 add	 eax, 15			; 0000000fH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06OEKOLKIL@source@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@print_targ:

; 11613: 
; 11614: 	ASSERT (target);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN3@print_targ
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
  00035	83 c0 11	 add	 eax, 17			; 00000011H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@print_targ:

; 11615: 
; 11616: 	position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00048	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  0004c	74 0d		 je	 SHORT $LN7@print_targ
  0004e	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  00051	8b 08		 mov	 ecx, DWORD PTR [eax]
  00053	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv80[ebp], ecx
  00059	eb 24		 jmp	 SHORT $LN8@print_targ
$LN7@print_targ:
  0005b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
  00061	83 c2 13	 add	 edx, 19			; 00000013H
  00064	52		 push	 edx
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00075	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv80[ebp], 0
$LN8@print_targ:
  0007f	b9 01 00 00 00	 mov	 ecx, 1
  00084	85 c9		 test	 ecx, ecx
  00086	74 0c		 je	 SHORT $LN9@print_targ
  00088	c7 85 54 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv88[ebp], 8
  00092	eb 24		 jmp	 SHORT $LN10@print_targ
$LN9@print_targ:
  00094	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
  0009a	83 c2 13	 add	 edx, 19			; 00000013H
  0009d	52		 push	 edx
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ae	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv88[ebp], 0
$LN10@print_targ:
  000b8	6a 08		 push	 8
  000ba	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  000bd	51		 push	 ecx
  000be	6b 95 58 ff ff
	ff 60		 imul	 edx, DWORD PTR tv80[ebp], 96
  000c5	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR tv88[ebp]
  000cb	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000d2	ff d1		 call	 ecx
  000d4	89 45 9c	 mov	 DWORD PTR _position$[ebp], eax

; 11617: 
; 11618: 	ASSERT (position);

  000d7	83 7d 9c 00	 cmp	 DWORD PTR _position$[ebp], 0
  000db	75 18		 jne	 SHORT $LN4@print_targ
  000dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
  000e2	83 c0 15	 add	 eax, 21			; 00000015H
  000e5	50		 push	 eax
  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000eb	68 00 00 00 00	 push	 OFFSET ??_C@_08OAGMDKAF@position@
  000f0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@print_targ:

; 11619: 
; 11620: 	get_x_sector (x_sector, position->x);

  000f5	8d 45 ac	 lea	 eax, DWORD PTR _x_sector$[ebp]
  000f8	50		 push	 eax
  000f9	8b 4d 9c	 mov	 ecx, DWORD PTR _position$[ebp]
  000fc	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00100	51		 push	 ecx
  00101	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00106	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  0010b	8b 45 ac	 mov	 eax, DWORD PTR _x_sector$[ebp]
  0010e	99		 cdq
  0010f	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  00115	89 45 ac	 mov	 DWORD PTR _x_sector$[ebp], eax

; 11621: 	get_z_sector (z_sector, position->z);

  00118	8d 45 a8	 lea	 eax, DWORD PTR _z_sector$[ebp]
  0011b	50		 push	 eax
  0011c	8b 4d 9c	 mov	 ecx, DWORD PTR _position$[ebp]
  0011f	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00124	51		 push	 ecx
  00125	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012a	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  0012f	8b 45 a8	 mov	 eax, DWORD PTR _z_sector$[ebp]
  00132	99		 cdq
  00133	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  00139	89 45 a8	 mov	 DWORD PTR _z_sector$[ebp], eax

; 11622: 
; 11623: 	bearing = (int) (deg (get_local_entity_target_bearing (source, target, &range)));

  0013c	8d 45 a0	 lea	 eax, DWORD PTR _range$[ebp]
  0013f	50		 push	 eax
  00140	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  00143	51		 push	 ecx
  00144	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  00147	52		 push	 edx
  00148	e8 00 00 00 00	 call	 ?get_local_entity_target_bearing@@YGMPAUENTITY@@0PAM@Z ; get_local_entity_target_bearing
  0014d	d9 9d 58 ff ff
	ff		 fstp	 DWORD PTR tv193[ebp]
  00153	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR tv193[ebp]
  0015b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  00163	f3 0f 2c c0	 cvttss2si eax, xmm0
  00167	89 45 a4	 mov	 DWORD PTR _bearing$[ebp], eax

; 11624: 
; 11625: 	if (bearing == 0)

  0016a	83 7d a4 00	 cmp	 DWORD PTR _bearing$[ebp], 0
  0016e	75 07		 jne	 SHORT $LN5@print_targ

; 11626: 	{
; 11627: 		bearing = 360;

  00170	c7 45 a4 68 01
	00 00		 mov	 DWORD PTR _bearing$[ebp], 360 ; 00000168H
$LN5@print_targ:

; 11628: 	}
; 11629: 
; 11630: 	range *= (float) (1.0 / 1000.0);

  00177	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _range$[ebp]
  0017c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3a83126f
  00184	f3 0f 11 45 a0	 movss	 DWORD PTR _range$[ebp], xmm0

; 11631: 
; 11632: 	sprintf (s, "       <%03d,%03d> %6.1fKm %3d\x7f", x_sector, z_sector, range, bearing);

  00189	8b 45 a4	 mov	 eax, DWORD PTR _bearing$[ebp]
  0018c	50		 push	 eax
  0018d	f3 0f 5a 45 a0	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  00192	83 ec 08	 sub	 esp, 8
  00195	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0019a	8b 4d a8	 mov	 ecx, DWORD PTR _z_sector$[ebp]
  0019d	51		 push	 ecx
  0019e	8b 55 ac	 mov	 edx, DWORD PTR _x_sector$[ebp]
  001a1	52		 push	 edx
  001a2	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NPMPDHNJ@?5?5?5?5?5?5?5?$DM?$CF03d?0?$CF03d?$DO?5?$CF6?41fKm?5?$CF3d?$HP@
  001a7	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  001aa	50		 push	 eax
  001ab	e8 00 00 00 00	 call	 _sprintf
  001b0	83 c4 1c	 add	 esp, 28			; 0000001cH

; 11633: 
; 11634: 	print_mono_font_max_length_string (s);

  001b3	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 11635: }

  001bc	5f		 pop	 edi
  001bd	5e		 pop	 esi
  001be	5b		 pop	 ebx
  001bf	8b e5		 mov	 esp, ebp
  001c1	5d		 pop	 ebp
  001c2	c2 08 00	 ret	 8
?print_target_position@@YGXPAUENTITY@@0@Z ENDP		; print_target_position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z
_TEXT	SEGMENT
tv222 = -84						; size = 4
tv201 = -84						; size = 4
tv179 = -84						; size = 4
tv158 = -84						; size = 4
tv139 = -84						; size = 4
tv86 = -84						; size = 4
tv214 = -80						; size = 4
tv193 = -80						; size = 4
tv171 = -80						; size = 4
tv151 = -80						; size = 4
tv131 = -80						; size = 4
tv79 = -80						; size = 4
_aircrew$ = -12						; size = 4
_name$ = -8						; size = 4
_rank$ = -4						; size = 4
_en$ = 8						; size = 4
_buffer$ = 12						; size = 4
?get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z PROC	; get_player_rank_and_name, COMDAT

; 11548: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 11549: 	const char
; 11550: 		*rank,
; 11551: 		*name;
; 11552: 
; 11553: 	entity
; 11554: 		*aircrew;
; 11555: 
; 11556: 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN4@get_player
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  00014	83 c0 08	 add	 eax, 8
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_player:

; 11557: 
; 11558: 	ASSERT (buffer);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN5@get_player
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  00032	83 c0 0a	 add	 eax, 10			; 0000000aH
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_06HOHPNJLC@buffer@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@get_player:

; 11559: 
; 11560: 	if (get_local_entity_int_value (en, INT_TYPE_PLAYER) != ENTITY_PLAYER_AI)

  00045	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00049	74 0a		 je	 SHORT $LN11@get_player
  0004b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	89 4d b0	 mov	 DWORD PTR tv79[ebp], ecx
  00053	eb 1d		 jmp	 SHORT $LN12@get_player
$LN11@get_player:
  00055	68 28 2d 00 00	 push	 11560			; 00002d28H
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00065	52		 push	 edx
  00066	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006b	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$LN12@get_player:
  00072	b8 01 00 00 00	 mov	 eax, 1
  00077	85 c0		 test	 eax, eax
  00079	74 09		 je	 SHORT $LN13@get_player
  0007b	c7 45 ac 9c 00
	00 00		 mov	 DWORD PTR tv86[ebp], 156 ; 0000009cH
  00082	eb 1d		 jmp	 SHORT $LN14@get_player
$LN13@get_player:
  00084	68 28 2d 00 00	 push	 11560			; 00002d28H
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0008e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0009a	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
$LN14@get_player:
  000a1	68 9c 00 00 00	 push	 156			; 0000009cH
  000a6	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  000a9	52		 push	 edx
  000aa	69 45 b0 5c 04
	00 00		 imul	 eax, DWORD PTR tv79[ebp], 1116
  000b1	8b 4d ac	 mov	 ecx, DWORD PTR tv86[ebp]
  000b4	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  000bb	ff d2		 call	 edx
  000bd	85 c0		 test	 eax, eax
  000bf	0f 84 e7 02 00
	00		 je	 $LN6@get_player

; 11561: 	{
; 11562: 		aircrew = get_local_entity_first_child (en, LIST_TYPE_AIRCREW);

  000c5	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  000c9	74 0a		 je	 SHORT $LN15@get_player
  000cb	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d0	89 4d b0	 mov	 DWORD PTR tv131[ebp], ecx
  000d3	eb 21		 jmp	 SHORT $LN16@get_player
$LN15@get_player:
  000d5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  000db	83 c2 0e	 add	 edx, 14			; 0000000eH
  000de	52		 push	 edx
  000df	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ef	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv131[ebp], 0
$LN16@get_player:
  000f6	b9 01 00 00 00	 mov	 ecx, 1
  000fb	85 c9		 test	 ecx, ecx
  000fd	74 09		 je	 SHORT $LN17@get_player
  000ff	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv139[ebp], 1
  00106	eb 21		 jmp	 SHORT $LN18@get_player
$LN17@get_player:
  00108	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  0010e	83 c2 0e	 add	 edx, 14			; 0000000eH
  00111	52		 push	 edx
  00112	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00117	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00122	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv139[ebp], 0
$LN18@get_player:
  00129	6a 01		 push	 1
  0012b	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0012e	51		 push	 ecx
  0012f	69 55 b0 b4 00
	00 00		 imul	 edx, DWORD PTR tv131[ebp], 180
  00136	8b 45 ac	 mov	 eax, DWORD PTR tv139[ebp]
  00139	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00140	ff d1		 call	 ecx
  00142	89 45 f4	 mov	 DWORD PTR _aircrew$[ebp], eax
$LN2@get_player:

; 11563: 
; 11564: 		while (aircrew)

  00145	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  00149	0f 84 03 01 00
	00		 je	 $LN3@get_player

; 11565: 		{
; 11566: 			if (get_local_entity_int_value (aircrew, INT_TYPE_ENTITY_SUB_TYPE) == ENTITY_SUB_TYPE_PILOT_PILOT)

  0014f	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  00153	74 0a		 je	 SHORT $LN19@get_player
  00155	8b 45 f4	 mov	 eax, DWORD PTR _aircrew$[ebp]
  00158	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015a	89 4d b0	 mov	 DWORD PTR tv151[ebp], ecx
  0015d	eb 1d		 jmp	 SHORT $LN20@get_player
$LN19@get_player:
  0015f	68 2e 2d 00 00	 push	 11566			; 00002d2eH
  00164	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00169	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0016f	52		 push	 edx
  00170	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00175	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv151[ebp], 0
$LN20@get_player:
  0017c	b8 01 00 00 00	 mov	 eax, 1
  00181	85 c0		 test	 eax, eax
  00183	74 09		 je	 SHORT $LN21@get_player
  00185	c7 45 ac 34 00
	00 00		 mov	 DWORD PTR tv158[ebp], 52 ; 00000034H
  0018c	eb 1d		 jmp	 SHORT $LN22@get_player
$LN21@get_player:
  0018e	68 2e 2d 00 00	 push	 11566			; 00002d2eH
  00193	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00198	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0019e	51		 push	 ecx
  0019f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001a4	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv158[ebp], 0
$LN22@get_player:
  001ab	6a 34		 push	 52			; 00000034H
  001ad	8b 55 f4	 mov	 edx, DWORD PTR _aircrew$[ebp]
  001b0	52		 push	 edx
  001b1	69 45 b0 5c 04
	00 00		 imul	 eax, DWORD PTR tv151[ebp], 1116
  001b8	8b 4d ac	 mov	 ecx, DWORD PTR tv158[ebp]
  001bb	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  001c2	ff d2		 call	 edx
  001c4	85 c0		 test	 eax, eax
  001c6	75 05		 jne	 SHORT $LN7@get_player

; 11567: 			{
; 11568: 				break;

  001c8	e9 85 00 00 00	 jmp	 $LN3@get_player
$LN7@get_player:

; 11569: 			}
; 11570: 
; 11571: 			aircrew = get_local_entity_child_succ (aircrew, LIST_TYPE_AIRCREW);

  001cd	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  001d1	74 0a		 je	 SHORT $LN23@get_player
  001d3	8b 45 f4	 mov	 eax, DWORD PTR _aircrew$[ebp]
  001d6	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d8	89 4d b0	 mov	 DWORD PTR tv171[ebp], ecx
  001db	eb 21		 jmp	 SHORT $LN24@get_player
$LN23@get_player:
  001dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  001e3	83 c2 17	 add	 edx, 23			; 00000017H
  001e6	52		 push	 edx
  001e7	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001f1	50		 push	 eax
  001f2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001f7	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv171[ebp], 0
$LN24@get_player:
  001fe	b9 01 00 00 00	 mov	 ecx, 1
  00203	85 c9		 test	 ecx, ecx
  00205	74 09		 je	 SHORT $LN25@get_player
  00207	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv179[ebp], 1
  0020e	eb 21		 jmp	 SHORT $LN26@get_player
$LN25@get_player:
  00210	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  00216	83 c2 17	 add	 edx, 23			; 00000017H
  00219	52		 push	 edx
  0021a	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0021f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00224	50		 push	 eax
  00225	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0022a	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv179[ebp], 0
$LN26@get_player:
  00231	6a 01		 push	 1
  00233	8b 4d f4	 mov	 ecx, DWORD PTR _aircrew$[ebp]
  00236	51		 push	 ecx
  00237	69 55 b0 b4 00
	00 00		 imul	 edx, DWORD PTR tv171[ebp], 180
  0023e	8b 45 ac	 mov	 eax, DWORD PTR tv179[ebp]
  00241	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00248	ff d1		 call	 ecx
  0024a	89 45 f4	 mov	 DWORD PTR _aircrew$[ebp], eax

; 11572: 		}

  0024d	e9 f3 fe ff ff	 jmp	 $LN2@get_player
$LN3@get_player:

; 11573: 
; 11574: 		if (aircrew)

  00252	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  00256	0f 84 50 01 00
	00		 je	 $LN6@get_player

; 11575: 		{
; 11576: 			rank = get_untranslated_pilot_rank_short_name (get_local_entity_int_value (aircrew, INT_TYPE_PILOT_RANK));

  0025c	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  00260	74 0a		 je	 SHORT $LN27@get_player
  00262	8b 45 f4	 mov	 eax, DWORD PTR _aircrew$[ebp]
  00265	8b 08		 mov	 ecx, DWORD PTR [eax]
  00267	89 4d b0	 mov	 DWORD PTR tv193[ebp], ecx
  0026a	eb 21		 jmp	 SHORT $LN28@get_player
$LN27@get_player:
  0026c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  00272	83 c2 1c	 add	 edx, 28			; 0000001cH
  00275	52		 push	 edx
  00276	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0027b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00280	50		 push	 eax
  00281	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00286	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv193[ebp], 0
$LN28@get_player:
  0028d	b9 01 00 00 00	 mov	 ecx, 1
  00292	85 c9		 test	 ecx, ecx
  00294	74 09		 je	 SHORT $LN29@get_player
  00296	c7 45 ac 9a 00
	00 00		 mov	 DWORD PTR tv201[ebp], 154 ; 0000009aH
  0029d	eb 21		 jmp	 SHORT $LN30@get_player
$LN29@get_player:
  0029f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  002a5	83 c2 1c	 add	 edx, 28			; 0000001cH
  002a8	52		 push	 edx
  002a9	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  002ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  002b3	50		 push	 eax
  002b4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002b9	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv201[ebp], 0
$LN30@get_player:
  002c0	68 9a 00 00 00	 push	 154			; 0000009aH
  002c5	8b 4d f4	 mov	 ecx, DWORD PTR _aircrew$[ebp]
  002c8	51		 push	 ecx
  002c9	69 55 b0 5c 04
	00 00		 imul	 edx, DWORD PTR tv193[ebp], 1116
  002d0	8b 45 ac	 mov	 eax, DWORD PTR tv201[ebp]
  002d3	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  002da	ff d1		 call	 ecx
  002dc	50		 push	 eax
  002dd	e8 00 00 00 00	 call	 ?get_untranslated_pilot_rank_short_name@@YGPBDH@Z ; get_untranslated_pilot_rank_short_name
  002e2	89 45 fc	 mov	 DWORD PTR _rank$[ebp], eax

; 11577: 
; 11578: 			name = get_local_entity_string (aircrew, STRING_TYPE_PILOTS_NAME);

  002e5	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  002e9	74 0a		 je	 SHORT $LN31@get_player
  002eb	8b 45 f4	 mov	 eax, DWORD PTR _aircrew$[ebp]
  002ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f0	89 4d b0	 mov	 DWORD PTR tv214[ebp], ecx
  002f3	eb 21		 jmp	 SHORT $LN32@get_player
$LN31@get_player:
  002f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  002fb	83 c2 1e	 add	 edx, 30			; 0000001eH
  002fe	52		 push	 edx
  002ff	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00304	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00309	50		 push	 eax
  0030a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0030f	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv214[ebp], 0
$LN32@get_player:
  00316	b9 01 00 00 00	 mov	 ecx, 1
  0031b	85 c9		 test	 ecx, ecx
  0031d	74 09		 je	 SHORT $LN33@get_player
  0031f	c7 45 ac 0a 00
	00 00		 mov	 DWORD PTR tv222[ebp], 10 ; 0000000aH
  00326	eb 21		 jmp	 SHORT $LN34@get_player
$LN33@get_player:
  00328	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  0032e	83 c2 1e	 add	 edx, 30			; 0000001eH
  00331	52		 push	 edx
  00332	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00337	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  0033c	50		 push	 eax
  0033d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00342	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv222[ebp], 0
$LN34@get_player:
  00349	6a 0a		 push	 10			; 0000000aH
  0034b	8b 4d f4	 mov	 ecx, DWORD PTR _aircrew$[ebp]
  0034e	51		 push	 ecx
  0034f	6b 55 b0 34	 imul	 edx, DWORD PTR tv214[ebp], 52
  00353	8b 45 ac	 mov	 eax, DWORD PTR tv222[ebp]
  00356	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  0035d	ff d1		 call	 ecx
  0035f	89 45 f8	 mov	 DWORD PTR _name$[ebp], eax

; 11579: 
; 11580: 			if ((rank && strlen (rank)) && (name && strlen (name)))

  00362	83 7d fc 00	 cmp	 DWORD PTR _rank$[ebp], 0
  00366	74 44		 je	 SHORT $LN6@get_player
  00368	8b 45 fc	 mov	 eax, DWORD PTR _rank$[ebp]
  0036b	50		 push	 eax
  0036c	e8 00 00 00 00	 call	 _strlen
  00371	83 c4 04	 add	 esp, 4
  00374	85 c0		 test	 eax, eax
  00376	74 34		 je	 SHORT $LN6@get_player
  00378	83 7d f8 00	 cmp	 DWORD PTR _name$[ebp], 0
  0037c	74 2e		 je	 SHORT $LN6@get_player
  0037e	8b 45 f8	 mov	 eax, DWORD PTR _name$[ebp]
  00381	50		 push	 eax
  00382	e8 00 00 00 00	 call	 _strlen
  00387	83 c4 04	 add	 esp, 4
  0038a	85 c0		 test	 eax, eax
  0038c	74 1e		 je	 SHORT $LN6@get_player

; 11581: 			{
; 11582: 				sprintf (buffer, "%s %s", rank, name);

  0038e	8b 45 f8	 mov	 eax, DWORD PTR _name$[ebp]
  00391	50		 push	 eax
  00392	8b 4d fc	 mov	 ecx, DWORD PTR _rank$[ebp]
  00395	51		 push	 ecx
  00396	68 00 00 00 00	 push	 OFFSET ??_C@_05DNIIFBMG@?$CFs?5?$CFs@
  0039b	8b 55 0c	 mov	 edx, DWORD PTR _buffer$[ebp]
  0039e	52		 push	 edx
  0039f	e8 00 00 00 00	 call	 _sprintf
  003a4	83 c4 10	 add	 esp, 16			; 00000010H

; 11583: 
; 11584: 				return (buffer);

  003a7	8b 45 0c	 mov	 eax, DWORD PTR _buffer$[ebp]
  003aa	eb 02		 jmp	 SHORT $LN1@get_player
$LN6@get_player:

; 11585: 			}
; 11586: 		}
; 11587: 	}
; 11588: 
; 11589: 	return (NULL);

  003ac	33 c0		 xor	 eax, eax
$LN1@get_player:

; 11590: }

  003ae	5f		 pop	 edi
  003af	5e		 pop	 esi
  003b0	5b		 pop	 ebx
  003b1	8b e5		 mov	 esp, ebp
  003b3	5d		 pop	 ebp
  003b4	c2 08 00	 ret	 8
?get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z ENDP	; get_player_rank_and_name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?print_mono_font_max_length_string@@YGXPAD@Z
_TEXT	SEGMENT
_buffer$ = -200						; size = 200
_s$ = 8							; size = 4
?print_mono_font_max_length_string@@YGXPAD@Z PROC	; print_mono_font_max_length_string, COMDAT

; 11532: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 11533: 	char
; 11534: 		buffer[200];
; 11535: 
; 11536: 	ASSERT (s);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _s$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@print_mono
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_mono_font_max_length_string@@YGXPAD@Z@4JA
  00017	83 c0 04	 add	 eax, 4
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_01LKDEMHDF@s@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@print_mono:

; 11537: 
; 11538: 	sprintf (buffer, "%.31s", s);

  0002a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_05KEIIKJGB@?$CF?431s@
  00033	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 _sprintf
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 11539: 
; 11540: 	print_mono_font_string (buffer);

  00042	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 11541: }

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
?print_mono_font_max_length_string@@YGXPAD@Z ENDP	; print_mono_font_max_length_string
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_flight_display_side_mfd@@YGXXZ
_TEXT	SEGMENT
tv138 = -76						; size = 4
tv82 = -72						; size = 4
tv74 = -68						; size = 4
?draw_flight_display_side_mfd@@YGXXZ PROC		; draw_flight_display_side_mfd, COMDAT

; 11509: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 11510: 	set_mono_font_colour (MFD_COLOUR1);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00017	52		 push	 edx
  00018	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 11511: 
; 11512: 	draw_pitch_ladder ();

  0001d	e8 00 00 00 00	 call	 ?draw_pitch_ladder@@YGXXZ ; draw_pitch_ladder

; 11513: 	draw_heading_scale (get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_HEADING), TRUE);

  00022	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00029	74 0c		 je	 SHORT $LN3@draw_fligh
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	89 4d bc	 mov	 DWORD PTR tv74[ebp], ecx
  00035	eb 21		 jmp	 SHORT $LN4@draw_fligh
$LN3@draw_fligh:
  00037	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_flight_display_side_mfd@@YGXXZ@4JA
  0003d	83 c2 04	 add	 edx, 4
  00040	52		 push	 edx
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00051	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@draw_fligh:
  00058	b9 01 00 00 00	 mov	 ecx, 1
  0005d	85 c9		 test	 ecx, ecx
  0005f	74 09		 je	 SHORT $LN5@draw_fligh
  00061	c7 45 b8 34 00
	00 00		 mov	 DWORD PTR tv82[ebp], 52	; 00000034H
  00068	eb 21		 jmp	 SHORT $LN6@draw_fligh
$LN5@draw_fligh:
  0006a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_flight_display_side_mfd@@YGXXZ@4JA
  00070	83 c2 04	 add	 edx, 4
  00073	52		 push	 edx
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00084	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$LN6@draw_fligh:
  0008b	6a 01		 push	 1
  0008d	6a 34		 push	 52			; 00000034H
  0008f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00095	51		 push	 ecx
  00096	69 55 bc bc 02
	00 00		 imul	 edx, DWORD PTR tv74[ebp], 700
  0009d	8b 45 b8	 mov	 eax, DWORD PTR tv82[ebp]
  000a0	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  000a7	ff d1		 call	 ecx
  000a9	d9 5d b4	 fstp	 DWORD PTR tv138[ebp]
  000ac	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR tv138[ebp]
  000b1	51		 push	 ecx
  000b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b7	e8 00 00 00 00	 call	 ?draw_heading_scale@@YGXMH@Z ; draw_heading_scale

; 11514: 
; 11515: 	draw_airspeed_scale();

  000bc	e8 00 00 00 00	 call	 ?draw_airspeed_scale@@YGXXZ ; draw_airspeed_scale

; 11516: 	draw_radar_altitude_scale();

  000c1	e8 00 00 00 00	 call	 ?draw_radar_altitude_scale@@YGXXZ ; draw_radar_altitude_scale

; 11517: 
; 11518: 	draw_torque_scale();

  000c6	e8 00 00 00 00	 call	 ?draw_torque_scale@@YGXXZ ; draw_torque_scale

; 11519: }

  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c3		 ret	 0
?draw_flight_display_side_mfd@@YGXXZ ENDP		; draw_flight_display_side_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_flight_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv138 = -76						; size = 4
tv82 = -72						; size = 4
tv74 = -68						; size = 4
?draw_flight_display_mfd@@YGXXZ PROC			; draw_flight_display_mfd, COMDAT

; 11490: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 11491: 	set_mono_font_colour (MFD_COLOUR1);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00017	52		 push	 edx
  00018	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 11492: 
; 11493: 	draw_pitch_ladder ();

  0001d	e8 00 00 00 00	 call	 ?draw_pitch_ladder@@YGXXZ ; draw_pitch_ladder

; 11494: 	draw_heading_scale (get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_HEADING), TRUE);

  00022	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00029	74 0c		 je	 SHORT $LN3@draw_fligh
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	89 4d bc	 mov	 DWORD PTR tv74[ebp], ecx
  00035	eb 21		 jmp	 SHORT $LN4@draw_fligh
$LN3@draw_fligh:
  00037	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA
  0003d	83 c2 04	 add	 edx, 4
  00040	52		 push	 edx
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00051	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@draw_fligh:
  00058	b9 01 00 00 00	 mov	 ecx, 1
  0005d	85 c9		 test	 ecx, ecx
  0005f	74 09		 je	 SHORT $LN5@draw_fligh
  00061	c7 45 b8 34 00
	00 00		 mov	 DWORD PTR tv82[ebp], 52	; 00000034H
  00068	eb 21		 jmp	 SHORT $LN6@draw_fligh
$LN5@draw_fligh:
  0006a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA
  00070	83 c2 04	 add	 edx, 4
  00073	52		 push	 edx
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00084	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$LN6@draw_fligh:
  0008b	6a 01		 push	 1
  0008d	6a 34		 push	 52			; 00000034H
  0008f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00095	51		 push	 ecx
  00096	69 55 bc bc 02
	00 00		 imul	 edx, DWORD PTR tv74[ebp], 700
  0009d	8b 45 b8	 mov	 eax, DWORD PTR tv82[ebp]
  000a0	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  000a7	ff d1		 call	 ecx
  000a9	d9 5d b4	 fstp	 DWORD PTR tv138[ebp]
  000ac	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR tv138[ebp]
  000b1	51		 push	 ecx
  000b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b7	e8 00 00 00 00	 call	 ?draw_heading_scale@@YGXMH@Z ; draw_heading_scale

; 11495: 
; 11496: 	draw_airspeed_scale();

  000bc	e8 00 00 00 00	 call	 ?draw_airspeed_scale@@YGXXZ ; draw_airspeed_scale

; 11497: 	draw_radar_altitude_scale();

  000c1	e8 00 00 00 00	 call	 ?draw_radar_altitude_scale@@YGXXZ ; draw_radar_altitude_scale

; 11498: 	draw_barometric_altitude_scale();

  000c6	e8 00 00 00 00	 call	 ?draw_barometric_altitude_scale@@YGXXZ ; draw_barometric_altitude_scale

; 11499: 
; 11500: 	draw_torque_scale();

  000cb	e8 00 00 00 00	 call	 ?draw_torque_scale@@YGXXZ ; draw_torque_scale

; 11501: 	display_navigation_info();

  000d0	e8 00 00 00 00	 call	 ?display_navigation_info@@YGXXZ ; display_navigation_info

; 11502: }

  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	5b		 pop	 ebx
  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c3		 ret	 0
?draw_flight_display_mfd@@YGXXZ ENDP			; draw_flight_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_pitch_ladder@@YGXXZ
_TEXT	SEGMENT
tv980 = -332						; size = 8
tv801 = -332						; size = 8
tv781 = -332						; size = 8
tv763 = -332						; size = 8
tv1441 = -324						; size = 8
tv1242 = -324						; size = 8
tv1236 = -324						; size = 8
tv1228 = -324						; size = 8
tv981 = -324						; size = 8
tv802 = -324						; size = 8
tv782 = -324						; size = 8
tv764 = -324						; size = 8
tv239 = -324						; size = 4
tv128 = -324						; size = 4
tv1669 = -320						; size = 4
tv1641 = -320						; size = 4
tv1603 = -320						; size = 4
tv1221 = -320						; size = 4
tv1215 = -320						; size = 4
tv1203 = -320						; size = 4
tv408 = -320						; size = 4
tv231 = -320						; size = 4
tv224 = -320						; size = 4
tv88 = -320						; size = 4
_pitch_y$1 = -252					; size = 4
_buffer$2 = -248					; size = 8
_y_adjust$3 = -240					; size = 4
_x_adjust$4 = -236					; size = 4
_i$5 = -232						; size = 4
_x_tick$6 = -228					; size = 4
_x_half_tick$7 = -224					; size = 4
_x_end$8 = -220						; size = 4
_y_coarse_step$9 = -216					; size = 4
_y_fine_step$10 = -212					; size = 4
_y_coarse_height$11 = -208				; size = 4
_y_fine_height$12 = -204				; size = 4
_current_y$13 = -200					; size = 4
_right_colour$14 = -196					; size = 4
_left_colour$15 = -192					; size = 4
_tmp$16 = -188						; size = 4
_end_x$17 = -184					; size = 4
_start_x$18 = -180					; size = 4
_right_y$19 = -176					; size = 4
_left_y$20 = -172					; size = 4
_incline$21 = -168					; size = 4
_inverted$22 = -164					; size = 4
_tan_pitch$23 = -160					; size = 4
_y_horizon_abs$24 = -156				; size = 4
_x_horizon_abs$25 = -152				; size = 4
_ground_colour$ = -148					; size = 4
_sky_colour$ = -144					; size = 4
_x_adjust$ = -140					; size = 4
_y_10_deg_step$ = -136					; size = 4
_x_10_deg_step$ = -132					; size = 4
_y_horizon$ = -128					; size = 4
_x_horizon$ = -124					; size = 4
_y_scale$ = -120					; size = 4
_x_scale$ = -116					; size = 4
_lower_edge$ = -112					; size = 4
_upper_edge$ = -108					; size = 4
_right_edge$ = -104					; size = 4
_left_edge$ = -100					; size = 4
_y$ = -96						; size = 4
_x$ = -92						; size = 4
_v$ = -88						; size = 4
_u$ = -84						; size = 4
_roll$ = -80						; size = 4
_pitch_bar_scale$ = -76					; size = 4
_tan_mod_pitch$ = -72					; size = 4
_mod_pitch$ = -68					; size = 4
_pitch$ = -64						; size = 4
_vp_size$ = -60						; size = 4
_vsize$ = -56						; size = 4
_size$ = -52						; size = 4
_y_centre$ = -48					; size = 4
_x_centre$ = -44					; size = 4
_y_adjust_below_line$ = -40				; size = 4
_y_adjust_above_line$ = -36				; size = 4
_loop$ = -32						; size = 4
_step_direction$ = -28					; size = 4
_int_pitch$ = -24					; size = 4
_s$ = -20						; size = 20
?draw_pitch_ladder@@YGXXZ PROC				; draw_pitch_ladder, COMDAT

; 10624: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 4c 01 00
	00		 sub	 esp, 332		; 0000014cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 10625: 	char
; 10626: 		s[20];
; 10627: 
; 10628: 	int
; 10629: 		int_pitch,
; 10630: 		step_direction,
; 10631: 		loop;
; 10632: 
; 10633: 	float
; 10634: 		y_adjust_above_line,
; 10635: 		y_adjust_below_line,
; 10636: 		x_centre,
; 10637: 		y_centre = 0.1,

  0000c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00014	f3 0f 11 45 d0	 movss	 DWORD PTR _y_centre$[ebp], xmm0

; 10638: 		size,
; 10639: 		vsize,
; 10640: 		vp_size,
; 10641: 		pitch,
; 10642: 		mod_pitch,
; 10643: 		tan_mod_pitch,
; 10644: 		pitch_bar_scale,
; 10645: 		roll,
; 10646: 		u,
; 10647: 		v,
; 10648: 		x,
; 10649: 		y,
; 10650: 		left_edge,
; 10651: 		right_edge,
; 10652: 		upper_edge,
; 10653: 		lower_edge,
; 10654: 		x_scale,
; 10655: 		y_scale,
; 10656: 		x_horizon,
; 10657: 		y_horizon,
; 10658: 		x_10_deg_step,
; 10659: 		y_10_deg_step,
; 10660: 		x_adjust;
; 10661: 
; 10662: 	rgb_colour
; 10663: 		sky_colour,
; 10664: 		ground_colour;
; 10665: 
; 10666: 	if (command_line_colour_mfd)

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_colour_mfd@@3HA, 0 ; command_line_colour_mfd
  00020	74 3a		 je	 SHORT $LN16@draw_pitch

; 10667: 	{
; 10668: 		sky_colour.red = 0;

  00022	c6 85 72 ff ff
	ff 00		 mov	 BYTE PTR _sky_colour$[ebp+2], 0

; 10669: 		sky_colour.green = 120;

  00029	c6 85 71 ff ff
	ff 78		 mov	 BYTE PTR _sky_colour$[ebp+1], 120 ; 00000078H

; 10670: 		sky_colour.blue = 200;

  00030	c6 85 70 ff ff
	ff c8		 mov	 BYTE PTR _sky_colour$[ebp], 200 ; 000000c8H

; 10671: 		sky_colour.alpha = 225;

  00037	c6 85 73 ff ff
	ff e1		 mov	 BYTE PTR _sky_colour$[ebp+3], 225 ; 000000e1H

; 10672: 
; 10673: 		ground_colour.red = 220;

  0003e	c6 85 6e ff ff
	ff dc		 mov	 BYTE PTR _ground_colour$[ebp+2], 220 ; 000000dcH

; 10674: 		ground_colour.green = 180;

  00045	c6 85 6d ff ff
	ff b4		 mov	 BYTE PTR _ground_colour$[ebp+1], 180 ; 000000b4H

; 10675: 		ground_colour.blue = 100;

  0004c	c6 85 6c ff ff
	ff 64		 mov	 BYTE PTR _ground_colour$[ebp], 100 ; 00000064H

; 10676: 		ground_colour.alpha = 255;

  00053	c6 85 6f ff ff
	ff ff		 mov	 BYTE PTR _ground_colour$[ebp+3], 255 ; 000000ffH

; 10677: 	}
; 10678: 	else

  0005a	eb 28		 jmp	 SHORT $LN17@draw_pitch
$LN16@draw_pitch:

; 10679: 	{
; 10680: 		sky_colour = MFD_COLOUR2;

  0005c	b8 04 00 00 00	 mov	 eax, 4
  00061	c1 e0 00	 shl	 eax, 0
  00064	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0006a	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _sky_colour$[ebp], ecx

; 10681: 		ground_colour = MFD_COLOUR5;

  00070	b8 04 00 00 00	 mov	 eax, 4
  00075	c1 e0 02	 shl	 eax, 2
  00078	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0007e	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _ground_colour$[ebp], ecx
$LN17@draw_pitch:

; 10682: 	}
; 10683: 
; 10684: 	if (draw_large_mfd)

  00084	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0008b	74 23		 je	 SHORT $LN18@draw_pitch

; 10685: 	{
; 10686: 		set_mono_font_type (MONO_FONT_TYPE_5X9);

  0008d	6a 02		 push	 2
  0008f	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 10687: 
; 10688: 		y_adjust_above_line = -3.0;

  00094	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  0009c	f3 0f 11 45 dc	 movss	 DWORD PTR _y_adjust_above_line$[ebp], xmm0

; 10689: 		y_adjust_below_line = -3.0;

  000a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  000a9	f3 0f 11 45 d8	 movss	 DWORD PTR _y_adjust_below_line$[ebp], xmm0

; 10690: 	}
; 10691: 	else

  000ae	eb 21		 jmp	 SHORT $LN19@draw_pitch
$LN18@draw_pitch:

; 10692: 	{
; 10693: 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  000b0	6a 00		 push	 0
  000b2	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 10694: 
; 10695: 		y_adjust_above_line = -3.0;

  000b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  000bf	f3 0f 11 45 dc	 movss	 DWORD PTR _y_adjust_above_line$[ebp], xmm0

; 10696: 		y_adjust_below_line = -1.0;

  000c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000cc	f3 0f 11 45 d8	 movss	 DWORD PTR _y_adjust_below_line$[ebp], xmm0
$LN19@draw_pitch:

; 10697: 	}
; 10698: 
; 10699: 	if (draw_main_display)

  000d1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_main_display@@3HA, 0
  000d8	74 0a		 je	 SHORT $LN20@draw_pitch

; 10700: 		x_centre = 0.0;

  000da	0f 57 c0	 xorps	 xmm0, xmm0
  000dd	f3 0f 11 45 d4	 movss	 DWORD PTR _x_centre$[ebp], xmm0

; 10701: 	else

  000e2	eb 0d		 jmp	 SHORT $LN21@draw_pitch
$LN20@draw_pitch:

; 10702: 		x_centre = -0.4;

  000e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  000ec	f3 0f 11 45 d4	 movss	 DWORD PTR _x_centre$[ebp], xmm0
$LN21@draw_pitch:

; 10703: 
; 10704: 	size = 0.4;

  000f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  000f9	f3 0f 11 45 cc	 movss	 DWORD PTR _size$[ebp], xmm0

; 10705: 	pitch_bar_scale = 0.6;

  000fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00106	f3 0f 11 45 b4	 movss	 DWORD PTR _pitch_bar_scale$[ebp], xmm0

; 10706: 
; 10707: 	vsize = size * 1.5;

  0010b	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  00110	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff8000000000000
  00118	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0011c	f3 0f 11 45 c8	 movss	 DWORD PTR _vsize$[ebp], xmm0

; 10708: 
; 10709: 	//
; 10710: 	//
; 10711: 
; 10712: 	get_2d_float_screen_coordinates (PITCH_DATUM_X, PITCH_DATUM_Y, &u, &v);

  00121	8d 45 a8	 lea	 eax, DWORD PTR _v$[ebp]
  00124	50		 push	 eax
  00125	8d 4d ac	 lea	 ecx, DWORD PTR _u$[ebp]
  00128	51		 push	 ecx
  00129	51		 push	 ecx
  0012a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00132	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00137	51		 push	 ecx
  00138	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  0013d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00142	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 10713: 	roll = get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_ROLL);

  00147	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0014e	74 0f		 je	 SHORT $LN42@draw_pitch
  00150	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00155	8b 08		 mov	 ecx, DWORD PTR [eax]
  00157	89 8d c0 fe ff
	ff		 mov	 DWORD PTR tv88[ebp], ecx
  0015d	eb 24		 jmp	 SHORT $LN43@draw_pitch
$LN42@draw_pitch:
  0015f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  00165	83 c2 59	 add	 edx, 89			; 00000059H
  00168	52		 push	 edx
  00169	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0016e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00173	50		 push	 eax
  00174	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00179	c7 85 c0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv88[ebp], 0
$LN43@draw_pitch:
  00183	b9 01 00 00 00	 mov	 ecx, 1
  00188	85 c9		 test	 ecx, ecx
  0018a	74 0c		 je	 SHORT $LN44@draw_pitch
  0018c	c7 85 bc fe ff
	ff 71 00 00 00	 mov	 DWORD PTR tv128[ebp], 113 ; 00000071H
  00196	eb 24		 jmp	 SHORT $LN45@draw_pitch
$LN44@draw_pitch:
  00198	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  0019e	83 c2 59	 add	 edx, 89			; 00000059H
  001a1	52		 push	 edx
  001a2	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  001a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  001ac	50		 push	 eax
  001ad	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001b2	c7 85 bc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv128[ebp], 0
$LN45@draw_pitch:
  001bc	6a 71		 push	 113			; 00000071H
  001be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  001c4	51		 push	 ecx
  001c5	69 95 c0 fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv88[ebp], 700
  001cf	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR tv128[ebp]
  001d5	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  001dc	ff d1		 call	 ecx
  001de	d9 5d b0	 fstp	 DWORD PTR _roll$[ebp]

; 10714: 
; 10715: //	set_2d_instance_position (mfd_env, PITCH_DATUM_X, PITCH_DATUM_Y - size);
; 10716: 
; 10717: 	//
; 10718: 	// set 2D environment
; 10719: 	//
; 10720: 
; 10721: 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN * size, MFD_WINDOW_Y_MIN * size, MFD_WINDOW_X_MAX * size, MFD_WINDOW_Y_MAX * size);

  001e1	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  001e6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3feff7ced916872b
  001ee	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001f2	51		 push	 ecx
  001f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f8	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  001fd	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3feff7ced916872b
  00205	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00209	51		 push	 ecx
  0020a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020f	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  00214	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff0000000000000
  0021c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00220	51		 push	 ecx
  00221	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00226	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  0022b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff0000000000000
  00233	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00237	51		 push	 ecx
  00238	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00242	50		 push	 eax
  00243	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 10722: 
; 10723: 	vp_size = mfd_viewport_size * size * 0.5;

  00248	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00250	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _size$[ebp]
  00255	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00259	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00261	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00265	f3 0f 11 45 c4	 movss	 DWORD PTR _vp_size$[ebp], xmm0

; 10724: 	set_2d_viewport (mfd_env, u - (vp_size * 1.5), v - vp_size, u + (vp_size * 1.5) - 0.001, v + (2.0 * vp_size) - 0.001);

  0026a	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _v$[ebp]
  0026f	f3 0f 5a 4d c4	 cvtss2sd xmm1, DWORD PTR _vp_size$[ebp]
  00274	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4000000000000000
  0027c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00280	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00288	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0028c	51		 push	 ecx
  0028d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00292	f3 0f 5a 45 ac	 cvtss2sd xmm0, DWORD PTR _u$[ebp]
  00297	f3 0f 5a 4d c4	 cvtss2sd xmm1, DWORD PTR _vp_size$[ebp]
  0029c	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3ff8000000000000
  002a4	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002a8	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  002b0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002b4	51		 push	 ecx
  002b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ba	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _v$[ebp]
  002bf	f3 0f 5c 45 c4	 subss	 xmm0, DWORD PTR _vp_size$[ebp]
  002c4	51		 push	 ecx
  002c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ca	f3 0f 5a 45 ac	 cvtss2sd xmm0, DWORD PTR _u$[ebp]
  002cf	f3 0f 5a 4d c4	 cvtss2sd xmm1, DWORD PTR _vp_size$[ebp]
  002d4	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3ff8000000000000
  002dc	f2 0f 5c c1	 subsd	 xmm0, xmm1
  002e0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002e4	51		 push	 ecx
  002e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  002ef	50		 push	 eax
  002f0	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 10725: 
; 10726: 	upper_edge = 0.5 * size;

  002f5	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  002fa	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00302	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00306	f3 0f 11 45 94	 movss	 DWORD PTR _upper_edge$[ebp], xmm0

; 10727: 	left_edge = -(size * 0.75);

  0030b	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  00310	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe8000000000000
  00318	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  0031f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00323	f3 0f 11 45 9c	 movss	 DWORD PTR _left_edge$[ebp], xmm0

; 10728: 	right_edge = (size * 0.75);

  00328	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  0032d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe8000000000000
  00335	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00339	f3 0f 11 45 98	 movss	 DWORD PTR _right_edge$[ebp], xmm0

; 10729: 	lower_edge = -size;

  0033e	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  00343	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0034a	f3 0f 11 45 90	 movss	 DWORD PTR _lower_edge$[ebp], xmm0

; 10730: 
; 10731: //	set_2d_viewport (mfd_env, u + left_edge, v + upper_edge, u + right_edge, v + lower_edge);
; 10732: 
; 10733: 
; 10734: 	//
; 10735: 	// pitch
; 10736: 	//
; 10737: 
; 10738: 	{
; 10739: 		float
; 10740: 			x_horizon_abs,
; 10741: 			y_horizon_abs,
; 10742: 			tan_pitch;
; 10743: 
; 10744: 		int inverted = (roll < -rad(90)) || (roll > rad(90));

  0034f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfc90fdb
  00357	0f 2f 45 b0	 comiss	 xmm0, DWORD PTR _roll$[ebp]
  0035b	77 1a		 ja	 SHORT $LN46@draw_pitch
  0035d	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00362	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3fc90fdb
  00369	77 0c		 ja	 SHORT $LN46@draw_pitch
  0036b	c7 85 c0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv224[ebp], 0
  00375	eb 0a		 jmp	 SHORT $LN47@draw_pitch
$LN46@draw_pitch:
  00377	c7 85 c0 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv224[ebp], 1
$LN47@draw_pitch:
  00381	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR tv224[ebp]
  00387	89 85 5c ff ff
	ff		 mov	 DWORD PTR _inverted$22[ebp], eax

; 10745: 
; 10746: 		pitch = get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_PITCH);

  0038d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00394	74 0f		 je	 SHORT $LN48@draw_pitch
  00396	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0039b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0039d	89 8d c0 fe ff
	ff		 mov	 DWORD PTR tv231[ebp], ecx
  003a3	eb 24		 jmp	 SHORT $LN49@draw_pitch
$LN48@draw_pitch:
  003a5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  003ab	83 c2 7a	 add	 edx, 122		; 0000007aH
  003ae	52		 push	 edx
  003af	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  003b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003b9	50		 push	 eax
  003ba	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003bf	c7 85 c0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv231[ebp], 0
$LN49@draw_pitch:
  003c9	b9 01 00 00 00	 mov	 ecx, 1
  003ce	85 c9		 test	 ecx, ecx
  003d0	74 0c		 je	 SHORT $LN50@draw_pitch
  003d2	c7 85 bc fe ff
	ff 54 00 00 00	 mov	 DWORD PTR tv239[ebp], 84 ; 00000054H
  003dc	eb 24		 jmp	 SHORT $LN51@draw_pitch
$LN50@draw_pitch:
  003de	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  003e4	83 c2 7a	 add	 edx, 122		; 0000007aH
  003e7	52		 push	 edx
  003e8	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  003ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  003f2	50		 push	 eax
  003f3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003f8	c7 85 bc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv239[ebp], 0
$LN51@draw_pitch:
  00402	6a 54		 push	 84			; 00000054H
  00404	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0040a	51		 push	 ecx
  0040b	69 95 c0 fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv231[ebp], 700
  00415	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR tv239[ebp]
  0041b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00422	ff d1		 call	 ecx
  00424	d9 5d c0	 fstp	 DWORD PTR _pitch$[ebp]

; 10747: 		tan_pitch = -tan(pitch);

  00427	51		 push	 ecx
  00428	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  0042d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00432	e8 00 00 00 00	 call	 ?tan@@YGMM@Z		; tan
  00437	d9 9d c0 fe ff
	ff		 fstp	 DWORD PTR tv1203[ebp]
  0043d	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR tv1203[ebp]
  00445	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0044c	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _tan_pitch$23[ebp], xmm0

; 10748: 		mod_pitch = fmod (pitch, rad (10.0f));

  00454	51		 push	 ecx
  00455	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e32b8c2
  0045d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00462	51		 push	 ecx
  00463	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  00468	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046d	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  00472	d9 5d bc	 fstp	 DWORD PTR _mod_pitch$[ebp]

; 10749: 		tan_mod_pitch = -tan (mod_pitch);

  00475	51		 push	 ecx
  00476	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _mod_pitch$[ebp]
  0047b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00480	e8 00 00 00 00	 call	 ?tan@@YGMM@Z		; tan
  00485	d9 9d c0 fe ff
	ff		 fstp	 DWORD PTR tv1215[ebp]
  0048b	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR tv1215[ebp]
  00493	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0049a	f3 0f 11 45 b8	 movss	 DWORD PTR _tan_mod_pitch$[ebp], xmm0

; 10750: 		int_pitch = (int) (pitch * (1.0 / rad (10.0)));

  0049f	f3 0f 5a 45 c0	 cvtss2sd xmm0, DWORD PTR _pitch$[ebp]
  004a4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4016eb167e7d81e3
  004ac	f2 0f 2c c0	 cvttsd2si eax, xmm0
  004b0	89 45 e8	 mov	 DWORD PTR _int_pitch$[ebp], eax

; 10751: 
; 10752: 		//
; 10753: 		// get x and y scale factors
; 10754: 		//
; 10755: 
; 10756: 		x_scale = -sin (roll) * 1.5 * pitch_bar_scale;

  004b3	51		 push	 ecx
  004b4	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  004b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004be	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  004c3	d9 9d c0 fe ff
	ff		 fstp	 DWORD PTR tv1221[ebp]
  004c9	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR tv1221[ebp]
  004d1	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  004d8	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  004dc	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff8000000000000
  004e4	f3 0f 5a 4d b4	 cvtss2sd xmm1, DWORD PTR _pitch_bar_scale$[ebp]
  004e9	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  004ed	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004f1	f3 0f 11 45 8c	 movss	 DWORD PTR _x_scale$[ebp], xmm0

; 10757: 		y_scale = cos (roll) * 1.5 * pitch_bar_scale;

  004f6	51		 push	 ecx
  004f7	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  004fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00501	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  00506	dd 9d bc fe ff
	ff		 fstp	 QWORD PTR tv1228[ebp]
  0050c	f2 0f 10 85 bc
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1228[ebp]
  00514	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff8000000000000
  0051c	f3 0f 5a 4d b4	 cvtss2sd xmm1, DWORD PTR _pitch_bar_scale$[ebp]
  00521	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00525	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00529	f3 0f 11 45 88	 movss	 DWORD PTR _y_scale$[ebp], xmm0

; 10758: 
; 10759: 		x_horizon = tan_mod_pitch * x_scale;

  0052e	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _tan_mod_pitch$[ebp]
  00533	f3 0f 59 45 8c	 mulss	 xmm0, DWORD PTR _x_scale$[ebp]
  00538	f3 0f 11 45 84	 movss	 DWORD PTR _x_horizon$[ebp], xmm0

; 10760: 		y_horizon = tan_mod_pitch * y_scale;

  0053d	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _tan_mod_pitch$[ebp]
  00542	f3 0f 59 45 88	 mulss	 xmm0, DWORD PTR _y_scale$[ebp]
  00547	f3 0f 11 45 80	 movss	 DWORD PTR _y_horizon$[ebp], xmm0

; 10761: 
; 10762: 		x_10_deg_step = tan (rad (10.0)) * x_scale;

  0054c	83 ec 08	 sub	 esp, 8
  0054f	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fc6571848000000
  00557	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0055c	e8 00 00 00 00	 call	 _tan
  00561	83 c4 08	 add	 esp, 8
  00564	dd 9d bc fe ff
	ff		 fstp	 QWORD PTR tv1236[ebp]
  0056a	f2 0f 10 85 bc
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1236[ebp]
  00572	f3 0f 5a 4d 8c	 cvtss2sd xmm1, DWORD PTR _x_scale$[ebp]
  00577	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0057b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0057f	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_10_deg_step$[ebp], xmm0

; 10763: 		y_10_deg_step = tan (rad (10.0)) * y_scale;

  00587	83 ec 08	 sub	 esp, 8
  0058a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fc6571848000000
  00592	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00597	e8 00 00 00 00	 call	 _tan
  0059c	83 c4 08	 add	 esp, 8
  0059f	dd 9d bc fe ff
	ff		 fstp	 QWORD PTR tv1242[ebp]
  005a5	f2 0f 10 85 bc
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1242[ebp]
  005ad	f3 0f 5a 4d 88	 cvtss2sd xmm1, DWORD PTR _y_scale$[ebp]
  005b2	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  005b6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005ba	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _y_10_deg_step$[ebp], xmm0

; 10764: 
; 10765: 		x_horizon_abs = tan_pitch * x_scale;

  005c2	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _tan_pitch$23[ebp]
  005ca	f3 0f 59 45 8c	 mulss	 xmm0, DWORD PTR _x_scale$[ebp]
  005cf	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _x_horizon_abs$25[ebp], xmm0

; 10766: 		y_horizon_abs = tan_pitch * y_scale;

  005d7	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _tan_pitch$23[ebp]
  005df	f3 0f 59 45 88	 mulss	 xmm0, DWORD PTR _y_scale$[ebp]
  005e4	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _y_horizon_abs$24[ebp], xmm0

; 10767: 
; 10768: 		// draw horizon
; 10769: 		set_2d_pixel(x_horizon_abs, y_horizon_abs, MFD_COLOUR1);

  005ec	b8 04 00 00 00	 mov	 eax, 4
  005f1	6b c8 00	 imul	 ecx, eax, 0
  005f4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005fa	52		 push	 edx
  005fb	51		 push	 ecx
  005fc	f3 0f 10 85 64
	ff ff ff	 movss	 xmm0, DWORD PTR _y_horizon_abs$24[ebp]
  00604	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00609	51		 push	 ecx
  0060a	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  00612	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00617	e8 00 00 00 00	 call	 ?set_2d_pixel@@YGXMMUREAL_COLOUR@@@Z ; set_2d_pixel

; 10770: 		if (roll != -rad(90) && roll != rad(90))

  0061c	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00621	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@bfc90fdb
  00628	9f		 lahf
  00629	f6 c4 44	 test	 ah, 68			; 00000044H
  0062c	0f 8b 58 03 00
	00		 jnp	 $LN22@draw_pitch
  00632	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00637	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@3fc90fdb
  0063e	9f		 lahf
  0063f	f6 c4 44	 test	 ah, 68			; 00000044H
  00642	0f 8b 42 03 00
	00		 jnp	 $LN22@draw_pitch

; 10771: 		{
; 10772: 			float incline = tan(roll);

  00648	51		 push	 ecx
  00649	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  0064e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00653	e8 00 00 00 00	 call	 ?tan@@YGMM@Z		; tan
  00658	d9 9d 58 ff ff
	ff		 fstp	 DWORD PTR _incline$21[ebp]

; 10773: 			float left_y, right_y;
; 10774: 			float start_x = -1.0, end_x = 1.0;

  0065e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00666	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _start_x$18[ebp], xmm0
  0066e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00676	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _end_x$17[ebp], xmm0

; 10775: 
; 10776: 			left_y = (x_horizon_abs - left_edge) * -incline;

  0067e	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  00686	f3 0f 5c 45 9c	 subss	 xmm0, DWORD PTR _left_edge$[ebp]
  0068b	f3 0f 10 8d 58
	ff ff ff	 movss	 xmm1, DWORD PTR _incline$21[ebp]
  00693	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  0069a	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0069e	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _left_y$20[ebp], xmm0

; 10777: 			right_y = (right_edge - x_horizon_abs) * incline;

  006a6	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _right_edge$[ebp]
  006ab	f3 0f 5c 85 68
	ff ff ff	 subss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  006b3	f3 0f 59 85 58
	ff ff ff	 mulss	 xmm0, DWORD PTR _incline$21[ebp]
  006bb	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _right_y$19[ebp], xmm0

; 10778: 
; 10779: 			if (incline < 0.0)

  006c3	f3 0f 5a 85 58
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _incline$21[ebp]
  006cb	0f 57 c9	 xorps	 xmm1, xmm1
  006ce	66 0f 2f c8	 comisd	 xmm1, xmm0
  006d2	76 50		 jbe	 SHORT $LN24@draw_pitch

; 10780: 			{
; 10781: 				// find where horizon intersects top and bottom
; 10782: 				start_x = x_horizon_abs + ((1 - y_horizon_abs) / incline);

  006d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  006dc	f3 0f 5c 85 64
	ff ff ff	 subss	 xmm0, DWORD PTR _y_horizon_abs$24[ebp]
  006e4	f3 0f 5e 85 58
	ff ff ff	 divss	 xmm0, DWORD PTR _incline$21[ebp]
  006ec	f3 0f 58 85 68
	ff ff ff	 addss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  006f4	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _start_x$18[ebp], xmm0

; 10783: 				end_x = x_horizon_abs + ((-2 - y_horizon_abs) / incline);

  006fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00704	f3 0f 5c 85 64
	ff ff ff	 subss	 xmm0, DWORD PTR _y_horizon_abs$24[ebp]
  0070c	f3 0f 5e 85 58
	ff ff ff	 divss	 xmm0, DWORD PTR _incline$21[ebp]
  00714	f3 0f 58 85 68
	ff ff ff	 addss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  0071c	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _end_x$17[ebp], xmm0
$LN24@draw_pitch:

; 10784: 			}
; 10785: 
; 10786: 			draw_2d_line(left_edge, left_y, right_edge, right_y, sys_col_red);

  00724	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  00729	50		 push	 eax
  0072a	51		 push	 ecx
  0072b	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _right_y$19[ebp]
  00733	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00738	51		 push	 ecx
  00739	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _right_edge$[ebp]
  0073e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00743	51		 push	 ecx
  00744	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _left_y$20[ebp]
  0074c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00751	51		 push	 ecx
  00752	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _left_edge$[ebp]
  00757	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0075c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10787: 
; 10788: 			left_y = y_horizon_abs + (1.0 + x_horizon_abs) * -incline;

  00761	f3 0f 5a 85 64
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_horizon_abs$24[ebp]
  00769	f3 0f 5a 8d 68
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _x_horizon_abs$25[ebp]
  00771	f2 0f 58 0d 00
	00 00 00	 addsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00779	f3 0f 10 95 58
	ff ff ff	 movss	 xmm2, DWORD PTR _incline$21[ebp]
  00781	0f 57 15 00 00
	00 00		 xorps	 xmm2, DWORD PTR __xmm@80000000800000008000000080000000
  00788	f3 0f 5a d2	 cvtss2sd xmm2, xmm2
  0078c	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00790	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00794	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00798	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _left_y$20[ebp], xmm0

; 10789: 			right_y = y_horizon_abs + (1.0 - x_horizon_abs) * incline;

  007a0	f3 0f 5a 85 64
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_horizon_abs$24[ebp]
  007a8	f3 0f 5a 8d 68
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _x_horizon_abs$25[ebp]
  007b0	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3ff0000000000000
  007b8	f2 0f 5c d1	 subsd	 xmm2, xmm1
  007bc	f3 0f 5a 8d 58
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _incline$21[ebp]
  007c4	f2 0f 59 d1	 mulsd	 xmm2, xmm1
  007c8	f2 0f 58 c2	 addsd	 xmm0, xmm2
  007cc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007d0	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _right_y$19[ebp], xmm0

; 10790: 
; 10791: 			if (inverted)

  007d8	83 bd 5c ff ff
	ff 00		 cmp	 DWORD PTR _inverted$22[ebp], 0
  007df	74 24		 je	 SHORT $LN25@draw_pitch

; 10792: 			{
; 10793: 				rgb_colour tmp = sky_colour;

  007e1	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _sky_colour$[ebp]
  007e7	89 85 44 ff ff
	ff		 mov	 DWORD PTR _tmp$16[ebp], eax

; 10794: 				sky_colour = ground_colour;

  007ed	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _ground_colour$[ebp]
  007f3	89 85 70 ff ff
	ff		 mov	 DWORD PTR _sky_colour$[ebp], eax

; 10795: 				ground_colour = tmp;

  007f9	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _tmp$16[ebp]
  007ff	89 85 6c ff ff
	ff		 mov	 DWORD PTR _ground_colour$[ebp], eax
$LN25@draw_pitch:

; 10796: 			}
; 10797: 
; 10798: 			draw_2d_filled_triangle(-1.0, left_y, -1.0, 1.0, 1.0, right_y, sky_colour);

  00805	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _sky_colour$[ebp]
  0080b	50		 push	 eax
  0080c	51		 push	 ecx
  0080d	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _right_y$19[ebp]
  00815	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081a	51		 push	 ecx
  0081b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00823	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00828	51		 push	 ecx
  00829	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00831	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00836	51		 push	 ecx
  00837	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0083f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00844	51		 push	 ecx
  00845	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _left_y$20[ebp]
  0084d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00852	51		 push	 ecx
  00853	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0085b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00860	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 10799: 			draw_2d_filled_triangle(start_x, 1.0, 1.0, 1.0, 1.0, right_y, sky_colour);

  00865	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _sky_colour$[ebp]
  0086b	50		 push	 eax
  0086c	51		 push	 ecx
  0086d	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _right_y$19[ebp]
  00875	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0087a	51		 push	 ecx
  0087b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00883	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00888	51		 push	 ecx
  00889	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00891	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00896	51		 push	 ecx
  00897	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0089f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a4	51		 push	 ecx
  008a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  008ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008b2	51		 push	 ecx
  008b3	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR _start_x$18[ebp]
  008bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c0	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 10800: 
; 10801: 			draw_2d_filled_triangle(-1.0, left_y, end_x, -2.0, -1.0, -2.0, ground_colour);

  008c5	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _ground_colour$[ebp]
  008cb	50		 push	 eax
  008cc	51		 push	 ecx
  008cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  008d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008da	51		 push	 ecx
  008db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  008e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e8	51		 push	 ecx
  008e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  008f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f6	51		 push	 ecx
  008f7	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR _end_x$17[ebp]
  008ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00904	51		 push	 ecx
  00905	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _left_y$20[ebp]
  0090d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00912	51		 push	 ecx
  00913	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0091b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00920	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 10802: 			draw_2d_filled_triangle(-1.0, left_y, 1.0, right_y, 1.0, -2.0, ground_colour);

  00925	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _ground_colour$[ebp]
  0092b	50		 push	 eax
  0092c	51		 push	 ecx
  0092d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00935	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0093a	51		 push	 ecx
  0093b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00943	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00948	51		 push	 ecx
  00949	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _right_y$19[ebp]
  00951	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00956	51		 push	 ecx
  00957	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0095f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00964	51		 push	 ecx
  00965	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _left_y$20[ebp]
  0096d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00972	51		 push	 ecx
  00973	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0097b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00980	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 10803: 		}
; 10804: 		else  // 90 degree bank

  00985	e9 cc 01 00 00	 jmp	 $LN23@draw_pitch
$LN22@draw_pitch:

; 10805: 		{
; 10806: 			rgb_colour
; 10807: 				*left_colour,
; 10808: 				*right_colour;
; 10809: 
; 10810: 			if (roll == rad(90))

  0098a	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  0098f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@3fc90fdb
  00996	9f		 lahf
  00997	f6 c4 44	 test	 ah, 68			; 00000044H
  0099a	7a 1a		 jp	 SHORT $LN26@draw_pitch

; 10811: 			{
; 10812: 				left_colour = &ground_colour;

  0099c	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _ground_colour$[ebp]
  009a2	89 85 40 ff ff
	ff		 mov	 DWORD PTR _left_colour$15[ebp], eax

; 10813: 				right_colour = &sky_colour;

  009a8	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _sky_colour$[ebp]
  009ae	89 85 3c ff ff
	ff		 mov	 DWORD PTR _right_colour$14[ebp], eax

; 10814: 			}
; 10815: 			else

  009b4	eb 18		 jmp	 SHORT $LN27@draw_pitch
$LN26@draw_pitch:

; 10816: 			{
; 10817: 				left_colour = &sky_colour;

  009b6	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _sky_colour$[ebp]
  009bc	89 85 40 ff ff
	ff		 mov	 DWORD PTR _left_colour$15[ebp], eax

; 10818: 				right_colour = &ground_colour;

  009c2	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _ground_colour$[ebp]
  009c8	89 85 3c ff ff
	ff		 mov	 DWORD PTR _right_colour$14[ebp], eax
$LN27@draw_pitch:

; 10819: 			}
; 10820: 
; 10821: 			draw_2d_filled_triangle(x_horizon_abs, 1.0, 1.0, 1.0, 1.0, -1.0, *right_colour);

  009ce	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _right_colour$14[ebp]
  009d4	8b 08		 mov	 ecx, DWORD PTR [eax]
  009d6	51		 push	 ecx
  009d7	51		 push	 ecx
  009d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  009e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009e5	51		 push	 ecx
  009e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  009ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009f3	51		 push	 ecx
  009f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  009fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a01	51		 push	 ecx
  00a02	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a0a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a0f	51		 push	 ecx
  00a10	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a18	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a1d	51		 push	 ecx
  00a1e	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  00a26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a2b	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 10822: 			draw_2d_filled_triangle(1.0, -1.0, x_horizon_abs, -1.0, x_horizon_abs, 1.0, *right_colour);

  00a30	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _right_colour$14[ebp]
  00a36	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a38	51		 push	 ecx
  00a39	51		 push	 ecx
  00a3a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a42	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a47	51		 push	 ecx
  00a48	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  00a50	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a55	51		 push	 ecx
  00a56	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00a5e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a63	51		 push	 ecx
  00a64	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  00a6c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a71	51		 push	 ecx
  00a72	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00a7a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a7f	51		 push	 ecx
  00a80	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a88	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a8d	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 10823: 
; 10824: 			draw_2d_filled_triangle(-1.0, 1.0, x_horizon_abs, 1.0, x_horizon_abs, -1.0, *left_colour);

  00a92	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _left_colour$15[ebp]
  00a98	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a9a	51		 push	 ecx
  00a9b	51		 push	 ecx
  00a9c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00aa4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa9	51		 push	 ecx
  00aaa	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  00ab2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ab7	51		 push	 ecx
  00ab8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00ac0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac5	51		 push	 ecx
  00ac6	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  00ace	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ad3	51		 push	 ecx
  00ad4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00adc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ae1	51		 push	 ecx
  00ae2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00aea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aef	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 10825: 			draw_2d_filled_triangle(x_horizon_abs, -1.0, -1.0, -1.0, -1.0, 1.0, *left_colour);

  00af4	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _left_colour$15[ebp]
  00afa	8b 08		 mov	 ecx, DWORD PTR [eax]
  00afc	51		 push	 ecx
  00afd	51		 push	 ecx
  00afe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00b06	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b0b	51		 push	 ecx
  00b0c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00b14	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b19	51		 push	 ecx
  00b1a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00b22	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b27	51		 push	 ecx
  00b28	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00b30	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b35	51		 push	 ecx
  00b36	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00b3e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b43	51		 push	 ecx
  00b44	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$25[ebp]
  00b4c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b51	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle
$LN23@draw_pitch:

; 10826: 		}
; 10827: 
; 10828: 		////////////////////////////////////////
; 10829: 		//
; 10830: 		// draw pitch ladder
; 10831: 		//
; 10832: 		////////////////////////////////////////
; 10833: 
; 10834: 		step_direction = -1;

  00b56	c7 45 e4 ff ff
	ff ff		 mov	 DWORD PTR _step_direction$[ebp], -1

; 10835: 
; 10836: 		int_pitch = limit_pitch (int_pitch + 3, &step_direction);

  00b5d	8d 45 e4	 lea	 eax, DWORD PTR _step_direction$[ebp]
  00b60	50		 push	 eax
  00b61	8b 4d e8	 mov	 ecx, DWORD PTR _int_pitch$[ebp]
  00b64	83 c1 03	 add	 ecx, 3
  00b67	51		 push	 ecx
  00b68	e8 00 00 00 00	 call	 ?limit_pitch@@YGHHPAH@Z	; limit_pitch
  00b6d	89 45 e8	 mov	 DWORD PTR _int_pitch$[ebp], eax

; 10837: 
; 10838: 		x = x_horizon + x_10_deg_step * 3.0;

  00b70	f3 0f 5a 45 84	 cvtss2sd xmm0, DWORD PTR _x_horizon$[ebp]
  00b75	f3 0f 5a 8d 7c
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _x_10_deg_step$[ebp]
  00b7d	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4008000000000000
  00b85	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00b89	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b8d	f3 0f 11 45 a4	 movss	 DWORD PTR _x$[ebp], xmm0

; 10839: 		y = y_horizon + y_10_deg_step * 3.0;

  00b92	f3 0f 5a 45 80	 cvtss2sd xmm0, DWORD PTR _y_horizon$[ebp]
  00b97	f3 0f 5a 8d 78
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _y_10_deg_step$[ebp]
  00b9f	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4008000000000000
  00ba7	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00bab	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00baf	f3 0f 11 45 a0	 movss	 DWORD PTR _y$[ebp], xmm0

; 10840: 
; 10841: 		set_2d_instance_rotation (mfd_env, roll);

  00bb4	51		 push	 ecx
  00bb5	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00bba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bbf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00bc4	50		 push	 eax
  00bc5	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 10842: 
; 10843: 		for (loop = 0; loop < 7; loop++)

  00bca	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  00bd1	eb 09		 jmp	 SHORT $LN4@draw_pitch
$LN2@draw_pitch:
  00bd3	8b 45 e0	 mov	 eax, DWORD PTR _loop$[ebp]
  00bd6	83 c0 01	 add	 eax, 1
  00bd9	89 45 e0	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@draw_pitch:
  00bdc	83 7d e0 07	 cmp	 DWORD PTR _loop$[ebp], 7
  00be0	0f 8d 2b 05 00
	00		 jge	 $LN3@draw_pitch

; 10844: 		{
; 10845: 			set_2d_instance_position (mfd_env, x, y);

  00be6	51		 push	 ecx
  00be7	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y$[ebp]
  00bec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bf1	51		 push	 ecx
  00bf2	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00bf7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bfc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00c01	50		 push	 eax
  00c02	e8 00 00 00 00	 call	 ?set_2d_instance_position@@YGXPAUENV_2D@@MM@Z ; set_2d_instance_position

; 10846: 
; 10847: 			switch (int_pitch)

  00c07	8b 45 e8	 mov	 eax, DWORD PTR _int_pitch$[ebp]
  00c0a	89 85 c0 fe ff
	ff		 mov	 DWORD PTR tv408[ebp], eax
  00c10	83 bd c0 fe ff
	ff f7		 cmp	 DWORD PTR tv408[ebp], -9 ; fffffff7H
  00c17	0f 84 8a 02 00
	00		 je	 $LN31@draw_pitch
  00c1d	83 bd c0 fe ff
	ff 00		 cmp	 DWORD PTR tv408[ebp], 0
  00c24	74 0f		 je	 SHORT $LN28@draw_pitch
  00c26	83 bd c0 fe ff
	ff 09		 cmp	 DWORD PTR tv408[ebp], 9
  00c2d	0f 84 b5 01 00
	00		 je	 $LN30@draw_pitch
  00c33	eb 69		 jmp	 SHORT $LN29@draw_pitch
$LN28@draw_pitch:

; 10848: 			{
; 10849: 				////////////////////////////////////////
; 10850: 				case 0:
; 10851: 				////////////////////////////////////////
; 10852: 				{
; 10853: 					draw_2d_line (-PITCH_BAR_X3, PITCH_BAR_Y3, PITCH_BAR_X3, -PITCH_BAR_Y3, MFD_COLOUR1);

  00c35	b8 04 00 00 00	 mov	 eax, 4
  00c3a	6b c8 00	 imul	 ecx, eax, 0
  00c3d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c43	52		 push	 edx
  00c44	0f 57 c0	 xorps	 xmm0, xmm0
  00c47	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00c4c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00c53	51		 push	 ecx
  00c54	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c59	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00c61	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00c66	51		 push	 ecx
  00c67	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c6c	0f 57 c0	 xorps	 xmm0, xmm0
  00c6f	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00c74	51		 push	 ecx
  00c75	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c7a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00c82	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00c87	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00c8e	51		 push	 ecx
  00c8f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c94	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10854: 
; 10855: 					break;

  00c99	e9 37 04 00 00	 jmp	 $LN5@draw_pitch
$LN29@draw_pitch:

; 10856: 				}
; 10857: 				////////////////////////////////////////
; 10858: 				default:
; 10859: 				////////////////////////////////////////
; 10860: 				{
; 10861: 					draw_2d_line (-PITCH_BAR_X3, PITCH_BAR_Y3, PITCH_BAR_X3, -PITCH_BAR_Y3, MFD_COLOUR1);

  00c9e	b8 04 00 00 00	 mov	 eax, 4
  00ca3	6b c8 00	 imul	 ecx, eax, 0
  00ca6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00cac	52		 push	 edx
  00cad	0f 57 c0	 xorps	 xmm0, xmm0
  00cb0	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00cb5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00cbc	51		 push	 ecx
  00cbd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cc2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00cca	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00ccf	51		 push	 ecx
  00cd0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cd5	0f 57 c0	 xorps	 xmm0, xmm0
  00cd8	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00cdd	51		 push	 ecx
  00cde	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ce3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00ceb	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00cf0	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00cf7	51		 push	 ecx
  00cf8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cfd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10862: 
; 10863: 					sprintf (s, "%d0", int_pitch);

  00d02	8b 45 e8	 mov	 eax, DWORD PTR _int_pitch$[ebp]
  00d05	50		 push	 eax
  00d06	68 00 00 00 00	 push	 OFFSET ??_C@_03NJMPCKOA@?$CFd0@
  00d0b	8d 4d ec	 lea	 ecx, DWORD PTR _s$[ebp]
  00d0e	51		 push	 ecx
  00d0f	e8 00 00 00 00	 call	 _sprintf
  00d14	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10864: 					x_adjust = get_mono_font_string_width (s) * -0.5;

  00d17	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  00d1a	50		 push	 eax
  00d1b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00d20	dd 9d bc fe ff
	ff		 fstp	 QWORD PTR tv1441[ebp]
  00d26	f2 0f 10 85 bc
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1441[ebp]
  00d2e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00d36	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00d3a	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10865: 
; 10866: 					set_2d_mono_font_position (+PITCH_BAR_X4, +PITCH_BAR_Y4);

  00d42	0f 57 c0	 xorps	 xmm0, xmm0
  00d45	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00d4a	51		 push	 ecx
  00d4b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d50	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6b851f
  00d58	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00d5d	51		 push	 ecx
  00d5e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d63	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10867: 					set_mono_font_rel_position (x_adjust, y_adjust_above_line);

  00d68	51		 push	 ecx
  00d69	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y_adjust_above_line$[ebp]
  00d6e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d73	51		 push	 ecx
  00d74	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00d7c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d81	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10868: 					print_mono_font_string (s);

  00d86	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  00d89	50		 push	 eax
  00d8a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10869: 
; 10870: 					set_2d_mono_font_position (-PITCH_BAR_X4, +PITCH_BAR_Y4);

  00d8f	0f 57 c0	 xorps	 xmm0, xmm0
  00d92	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00d97	51		 push	 ecx
  00d98	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d9d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6b851f
  00da5	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00daa	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00db1	51		 push	 ecx
  00db2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00db7	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10871: 					set_mono_font_rel_position (x_adjust, y_adjust_above_line);

  00dbc	51		 push	 ecx
  00dbd	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y_adjust_above_line$[ebp]
  00dc2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dc7	51		 push	 ecx
  00dc8	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00dd0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dd5	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10872: 					print_mono_font_string (s);

  00dda	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  00ddd	50		 push	 eax
  00dde	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10873: 
; 10874: 					break;

  00de3	e9 ed 02 00 00	 jmp	 $LN5@draw_pitch
$LN30@draw_pitch:

; 10875: 				}
; 10876: 				////////////////////////////////////////
; 10877: 				case 9:
; 10878: 				////////////////////////////////////////
; 10879: 				{
; 10880: 					draw_2d_line (+PITCH_BAR_X1, +PITCH_BAR_Y1, +PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR1);

  00de8	b8 04 00 00 00	 mov	 eax, 4
  00ded	6b c8 00	 imul	 ecx, eax, 0
  00df0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00df6	52		 push	 edx
  00df7	0f 57 c0	 xorps	 xmm0, xmm0
  00dfa	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00dff	51		 push	 ecx
  00e00	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e05	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00e0d	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e12	51		 push	 ecx
  00e13	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e18	0f 57 c0	 xorps	 xmm0, xmm0
  00e1b	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e20	51		 push	 ecx
  00e21	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e26	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  00e2e	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e33	51		 push	 ecx
  00e34	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e39	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10881: 					draw_2d_line (-PITCH_BAR_X1, +PITCH_BAR_Y1, -PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR1);

  00e3e	b8 04 00 00 00	 mov	 eax, 4
  00e43	6b c8 00	 imul	 ecx, eax, 0
  00e46	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e4c	52		 push	 edx
  00e4d	0f 57 c0	 xorps	 xmm0, xmm0
  00e50	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e55	51		 push	 ecx
  00e56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e5b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00e63	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e68	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00e6f	51		 push	 ecx
  00e70	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e75	0f 57 c0	 xorps	 xmm0, xmm0
  00e78	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e7d	51		 push	 ecx
  00e7e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e83	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  00e8b	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e90	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00e97	51		 push	 ecx
  00e98	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e9d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10882: 
; 10883: 					break;

  00ea2	e9 2e 02 00 00	 jmp	 $LN5@draw_pitch
$LN31@draw_pitch:

; 10884: 				}
; 10885: 				////////////////////////////////////////
; 10886: 				case -9:
; 10887: 				////////////////////////////////////////
; 10888: 				{
; 10889: 					draw_2d_line (+PITCH_BAR_X1, +PITCH_BAR_Y1, +PITCH_BAR_X2, +PITCH_BAR_Y2, MFD_COLOUR1);

  00ea7	b8 04 00 00 00	 mov	 eax, 4
  00eac	6b c8 00	 imul	 ecx, eax, 0
  00eaf	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00eb5	52		 push	 edx
  00eb6	0f 57 c0	 xorps	 xmm0, xmm0
  00eb9	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00ebe	51		 push	 ecx
  00ebf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ec4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e23d70a
  00ecc	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00ed1	51		 push	 ecx
  00ed2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ed7	0f 57 c0	 xorps	 xmm0, xmm0
  00eda	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00edf	51		 push	 ecx
  00ee0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ee5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  00eed	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00ef2	51		 push	 ecx
  00ef3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ef8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10890: 					draw_2d_line (-PITCH_BAR_X1, +PITCH_BAR_Y1, -PITCH_BAR_X2, +PITCH_BAR_Y2, MFD_COLOUR1);

  00efd	b8 04 00 00 00	 mov	 eax, 4
  00f02	6b c8 00	 imul	 ecx, eax, 0
  00f05	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f0b	52		 push	 edx
  00f0c	0f 57 c0	 xorps	 xmm0, xmm0
  00f0f	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f14	51		 push	 ecx
  00f15	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f1a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e23d70a
  00f22	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f27	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00f2e	51		 push	 ecx
  00f2f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f34	0f 57 c0	 xorps	 xmm0, xmm0
  00f37	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f3c	51		 push	 ecx
  00f3d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f42	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  00f4a	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f4f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00f56	51		 push	 ecx
  00f57	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f5c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10891: 
; 10892: 					draw_2d_line (+PITCH_BAR_X3, +PITCH_BAR_Y3, +PITCH_BAR_X4, +PITCH_BAR_Y4, MFD_COLOUR1);

  00f61	b8 04 00 00 00	 mov	 eax, 4
  00f66	6b c8 00	 imul	 ecx, eax, 0
  00f69	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f6f	52		 push	 edx
  00f70	0f 57 c0	 xorps	 xmm0, xmm0
  00f73	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f78	51		 push	 ecx
  00f79	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f7e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6b851f
  00f86	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f8b	51		 push	 ecx
  00f8c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f91	0f 57 c0	 xorps	 xmm0, xmm0
  00f94	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f99	51		 push	 ecx
  00f9a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f9f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00fa7	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00fac	51		 push	 ecx
  00fad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fb2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10893: 					draw_2d_line (-PITCH_BAR_X3, +PITCH_BAR_Y3, -PITCH_BAR_X4, +PITCH_BAR_Y4, MFD_COLOUR1);

  00fb7	b8 04 00 00 00	 mov	 eax, 4
  00fbc	6b c8 00	 imul	 ecx, eax, 0
  00fbf	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00fc5	52		 push	 edx
  00fc6	0f 57 c0	 xorps	 xmm0, xmm0
  00fc9	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00fce	51		 push	 ecx
  00fcf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fd4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6b851f
  00fdc	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00fe1	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00fe8	51		 push	 ecx
  00fe9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fee	0f 57 c0	 xorps	 xmm0, xmm0
  00ff1	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00ff6	51		 push	 ecx
  00ff7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ffc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  01004	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01009	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01010	51		 push	 ecx
  01011	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01016	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10894: 
; 10895: 					draw_2d_line (+PITCH_BAR_X5, +PITCH_BAR_Y5, +PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR1);

  0101b	b8 04 00 00 00	 mov	 eax, 4
  01020	6b c8 00	 imul	 ecx, eax, 0
  01023	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01029	52		 push	 edx
  0102a	0f 57 c0	 xorps	 xmm0, xmm0
  0102d	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01032	51		 push	 ecx
  01033	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01038	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  01040	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01045	51		 push	 ecx
  01046	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0104b	0f 57 c0	 xorps	 xmm0, xmm0
  0104e	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01053	51		 push	 ecx
  01054	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01059	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e87ae14
  01061	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01066	51		 push	 ecx
  01067	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0106c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10896: 					draw_2d_line (-PITCH_BAR_X5, +PITCH_BAR_Y5, -PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR1);

  01071	b8 04 00 00 00	 mov	 eax, 4
  01076	6b c8 00	 imul	 ecx, eax, 0
  01079	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0107f	52		 push	 edx
  01080	0f 57 c0	 xorps	 xmm0, xmm0
  01083	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01088	51		 push	 ecx
  01089	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0108e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  01096	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0109b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  010a2	51		 push	 ecx
  010a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010a8	0f 57 c0	 xorps	 xmm0, xmm0
  010ab	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  010b0	51		 push	 ecx
  010b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e87ae14
  010be	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  010c3	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  010ca	51		 push	 ecx
  010cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010d0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN5@draw_pitch:

; 10897: 
; 10898: 					break;
; 10899: 				}
; 10900: 			}
; 10901: 
; 10902: 			int_pitch = limit_pitch (int_pitch + step_direction, &step_direction);

  010d5	8d 45 e4	 lea	 eax, DWORD PTR _step_direction$[ebp]
  010d8	50		 push	 eax
  010d9	8b 4d e8	 mov	 ecx, DWORD PTR _int_pitch$[ebp]
  010dc	03 4d e4	 add	 ecx, DWORD PTR _step_direction$[ebp]
  010df	51		 push	 ecx
  010e0	e8 00 00 00 00	 call	 ?limit_pitch@@YGHHPAH@Z	; limit_pitch
  010e5	89 45 e8	 mov	 DWORD PTR _int_pitch$[ebp], eax

; 10903: 
; 10904: 			x -= x_10_deg_step;

  010e8	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _x$[ebp]
  010ed	f3 0f 5c 85 7c
	ff ff ff	 subss	 xmm0, DWORD PTR _x_10_deg_step$[ebp]
  010f5	f3 0f 11 45 a4	 movss	 DWORD PTR _x$[ebp], xmm0

; 10905: 			y -= y_10_deg_step;

  010fa	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y$[ebp]
  010ff	f3 0f 5c 85 78
	ff ff ff	 subss	 xmm0, DWORD PTR _y_10_deg_step$[ebp]
  01107	f3 0f 11 45 a0	 movss	 DWORD PTR _y$[ebp], xmm0

; 10906: 		}

  0110c	e9 c2 fa ff ff	 jmp	 $LN2@draw_pitch
$LN3@draw_pitch:

; 10907: 	}
; 10908: 
; 10909: 	//
; 10910: 	// restore 2D environment
; 10911: 	//
; 10912: 
; 10913: 	reset_2d_instance (mfd_env);

  01111	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01116	50		 push	 eax
  01117	e8 00 00 00 00	 call	 ?reset_2d_instance@@YGXPAUENV_2D@@@Z ; reset_2d_instance

; 10914: 
; 10915: 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  0111c	51		 push	 ecx
  0111d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  01125	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0112a	51		 push	 ecx
  0112b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  01133	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01138	51		 push	 ecx
  01139	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01141	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01146	51		 push	 ecx
  01147	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0114f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01154	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01159	50		 push	 eax
  0115a	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 10916: 
; 10917: 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  0115f	51		 push	 ecx
  01160	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  01168	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0116d	51		 push	 ecx
  0116e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  01176	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0117b	51		 push	 ecx
  0117c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  01184	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01189	51		 push	 ecx
  0118a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  01192	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01197	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0119c	50		 push	 eax
  0119d	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 10918: 
; 10919: 	if (draw_main_display)

  011a2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_main_display@@3HA, 0
  011a9	74 35		 je	 SHORT $LN32@draw_pitch

; 10920: 		draw_2d_mono_sprite (main_horizon_mask, x_centre, 0.41 + PITCH_DATUM_Y, MFD_BACKGROUND_COLOUR);

  011ab	b8 04 00 00 00	 mov	 eax, 4
  011b0	6b c8 09	 imul	 ecx, eax, 9
  011b3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  011b9	52		 push	 edx
  011ba	51		 push	 ecx
  011bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f1c28f6
  011c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011c8	51		 push	 ecx
  011c9	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  011ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_horizon_mask@@3PADA
  011d8	50		 push	 eax
  011d9	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 10921: 	else

  011de	eb 33		 jmp	 SHORT $LN33@draw_pitch
$LN32@draw_pitch:

; 10922: 		draw_2d_mono_sprite (side_horizon_mask, x_centre, 0.41 + PITCH_DATUM_Y, MFD_BACKGROUND_COLOUR);

  011e0	b8 04 00 00 00	 mov	 eax, 4
  011e5	6b c8 09	 imul	 ecx, eax, 9
  011e8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  011ee	52		 push	 edx
  011ef	51		 push	 ecx
  011f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f1c28f6
  011f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011fd	51		 push	 ecx
  011fe	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  01203	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01208	a1 00 00 00 00	 mov	 eax, DWORD PTR ?side_horizon_mask@@3PADA
  0120d	50		 push	 eax
  0120e	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN33@draw_pitch:

; 10923: 
; 10924: 	// pitch scale
; 10925: 	if (draw_main_display)

  01213	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_main_display@@3HA, 0
  0121a	0f 84 76 07 00
	00		 je	 $LN34@draw_pitch

; 10926: 	{
; 10927: 		float
; 10928: 			current_y,
; 10929: 			y_fine_height = 0.24,    // -10 to 10 degrees

  01220	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e75c28f
  01228	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _y_fine_height$12[ebp], xmm0

; 10930: 			y_coarse_height = 0.12,  // above 10 and below 10

  01230	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  01238	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_coarse_height$11[ebp], xmm0

; 10931: 			y_fine_step = y_fine_height / 4,

  01240	f3 0f 10 85 34
	ff ff ff	 movss	 xmm0, DWORD PTR _y_fine_height$12[ebp]
  01248	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40800000
  01250	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _y_fine_step$10[ebp], xmm0

; 10932: 			y_coarse_step = y_coarse_height / 2,

  01258	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_coarse_height$11[ebp]
  01260	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  01268	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_coarse_step$9[ebp], xmm0

; 10933: 			x_end = -0.41,

  01270	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bed1eb85
  01278	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _x_end$8[ebp], xmm0

; 10934: 			x_half_tick = x_end - 0.02,

  01280	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x_end$8[ebp]
  01288	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  01290	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01294	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _x_half_tick$7[ebp], xmm0

; 10935: 			x_tick = x_end - 0.04;

  0129c	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x_end$8[ebp]
  012a4	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  012ac	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  012b0	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _x_tick$6[ebp], xmm0

; 10936: 
; 10937: 		int i;
; 10938: 
; 10939: 		float x_adjust, y_adjust;
; 10940: 		char buffer[8];
; 10941: 
; 10942: 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  012b8	6a 01		 push	 1
  012ba	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 10943: 		y_adjust = -2.0;

  012bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  012c7	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _y_adjust$3[ebp], xmm0

; 10944: 
; 10945: 		current_y = y_centre + y_coarse_height + y_fine_height + y_coarse_step;

  012cf	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  012d4	f3 0f 58 85 30
	ff ff ff	 addss	 xmm0, DWORD PTR _y_coarse_height$11[ebp]
  012dc	f3 0f 58 85 34
	ff ff ff	 addss	 xmm0, DWORD PTR _y_fine_height$12[ebp]
  012e4	f3 0f 58 85 28
	ff ff ff	 addss	 xmm0, DWORD PTR _y_coarse_step$9[ebp]
  012ec	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _current_y$13[ebp], xmm0

; 10946: 		for (i = 3; i >= 1; i--)

  012f4	c7 85 18 ff ff
	ff 03 00 00 00	 mov	 DWORD PTR _i$5[ebp], 3
  012fe	eb 0f		 jmp	 SHORT $LN9@draw_pitch
$LN7@draw_pitch:
  01300	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  01306	83 e8 01	 sub	 eax, 1
  01309	89 85 18 ff ff
	ff		 mov	 DWORD PTR _i$5[ebp], eax
$LN9@draw_pitch:
  0130f	83 bd 18 ff ff
	ff 01		 cmp	 DWORD PTR _i$5[ebp], 1
  01316	0f 8c 03 01 00
	00		 jl	 $LN8@draw_pitch

; 10947: 		{
; 10948: 			current_y -= y_coarse_step;

  0131c	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  01324	f3 0f 5c 85 28
	ff ff ff	 subss	 xmm0, DWORD PTR _y_coarse_step$9[ebp]
  0132c	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _current_y$13[ebp], xmm0

; 10949: 			draw_2d_line(x_tick, current_y, x_end, current_y, MFD_COLOUR1);

  01334	b8 04 00 00 00	 mov	 eax, 4
  01339	6b c8 00	 imul	 ecx, eax, 0
  0133c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01342	52		 push	 edx
  01343	51		 push	 ecx
  01344	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  0134c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01351	51		 push	 ecx
  01352	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _x_end$8[ebp]
  0135a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0135f	51		 push	 ecx
  01360	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  01368	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0136d	51		 push	 ecx
  0136e	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_tick$6[ebp]
  01376	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0137b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10950: 
; 10951: 			sprintf(buffer, "%d", i);

  01380	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  01386	50		 push	 eax
  01387	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0138c	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$2[ebp]
  01392	51		 push	 ecx
  01393	e8 00 00 00 00	 call	 _sprintf
  01398	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10952: 			x_adjust = get_mono_font_string_width(buffer) + 1;

  0139b	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  013a1	50		 push	 eax
  013a2	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  013a7	d9 9d c0 fe ff
	ff		 fstp	 DWORD PTR tv1603[ebp]
  013ad	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR tv1603[ebp]
  013b5	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  013bd	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _x_adjust$4[ebp], xmm0

; 10953: 
; 10954: 			set_2d_mono_font_position (x_tick, current_y);

  013c5	51		 push	 ecx
  013c6	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  013ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013d3	51		 push	 ecx
  013d4	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_tick$6[ebp]
  013dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013e1	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10955: 			set_mono_font_rel_position (-x_adjust, y_adjust);

  013e6	51		 push	 ecx
  013e7	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$3[ebp]
  013ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013f4	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$4[ebp]
  013fc	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01403	51		 push	 ecx
  01404	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01409	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10956: 			print_mono_font_string(buffer);

  0140e	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  01414	50		 push	 eax
  01415	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10957: 		}

  0141a	e9 e1 fe ff ff	 jmp	 $LN7@draw_pitch
$LN8@draw_pitch:

; 10958: 
; 10959: 		for (i = 0; i < 7; i++)

  0141f	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$5[ebp], 0
  01429	eb 0f		 jmp	 SHORT $LN12@draw_pitch
$LN10@draw_pitch:
  0142b	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  01431	83 c0 01	 add	 eax, 1
  01434	89 85 18 ff ff
	ff		 mov	 DWORD PTR _i$5[ebp], eax
$LN12@draw_pitch:
  0143a	83 bd 18 ff ff
	ff 07		 cmp	 DWORD PTR _i$5[ebp], 7
  01441	0f 8d cd 00 00
	00		 jge	 $LN11@draw_pitch

; 10960: 		{
; 10961: 			current_y -= y_fine_step;

  01447	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  0144f	f3 0f 5c 85 2c
	ff ff ff	 subss	 xmm0, DWORD PTR _y_fine_step$10[ebp]
  01457	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _current_y$13[ebp], xmm0

; 10962: 			if ((i % 2) != 0)

  0145f	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  01465	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0146a	79 05		 jns	 SHORT $LN68@draw_pitch
  0146c	48		 dec	 eax
  0146d	83 c8 fe	 or	 eax, -2			; fffffffeH
  01470	40		 inc	 eax
$LN68@draw_pitch:
  01471	85 c0		 test	 eax, eax
  01473	74 4e		 je	 SHORT $LN35@draw_pitch

; 10963: 				draw_2d_line(x_tick, current_y, x_end, current_y, MFD_COLOUR1);

  01475	b8 04 00 00 00	 mov	 eax, 4
  0147a	6b c8 00	 imul	 ecx, eax, 0
  0147d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01483	52		 push	 edx
  01484	51		 push	 ecx
  01485	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  0148d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01492	51		 push	 ecx
  01493	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _x_end$8[ebp]
  0149b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014a0	51		 push	 ecx
  014a1	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  014a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014ae	51		 push	 ecx
  014af	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_tick$6[ebp]
  014b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014bc	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10964: 			else

  014c1	eb 4c		 jmp	 SHORT $LN36@draw_pitch
$LN35@draw_pitch:

; 10965: 				draw_2d_line(x_half_tick, current_y, x_end, current_y, MFD_COLOUR1);

  014c3	b8 04 00 00 00	 mov	 eax, 4
  014c8	6b c8 00	 imul	 ecx, eax, 0
  014cb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  014d1	52		 push	 edx
  014d2	51		 push	 ecx
  014d3	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  014db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014e0	51		 push	 ecx
  014e1	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _x_end$8[ebp]
  014e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014ee	51		 push	 ecx
  014ef	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  014f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014fc	51		 push	 ecx
  014fd	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _x_half_tick$7[ebp]
  01505	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0150a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN36@draw_pitch:

; 10966: 		}

  0150f	e9 17 ff ff ff	 jmp	 $LN10@draw_pitch
$LN11@draw_pitch:

; 10967: 
; 10968: 		sprintf(buffer, "%d", 0);

  01514	6a 00		 push	 0
  01516	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0151b	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  01521	50		 push	 eax
  01522	e8 00 00 00 00	 call	 _sprintf
  01527	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10969: 		x_adjust = get_mono_font_string_width(buffer) + 1;

  0152a	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  01530	50		 push	 eax
  01531	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01536	d9 9d c0 fe ff
	ff		 fstp	 DWORD PTR tv1641[ebp]
  0153c	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR tv1641[ebp]
  01544	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  0154c	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _x_adjust$4[ebp], xmm0

; 10970: 
; 10971: 		set_2d_mono_font_position (x_tick, y_centre);

  01554	51		 push	 ecx
  01555	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  0155a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0155f	51		 push	 ecx
  01560	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_tick$6[ebp]
  01568	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0156d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10972: 		set_mono_font_rel_position (-x_adjust, y_adjust);

  01572	51		 push	 ecx
  01573	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$3[ebp]
  0157b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01580	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$4[ebp]
  01588	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0158f	51		 push	 ecx
  01590	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01595	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10973: 		print_mono_font_string(buffer);

  0159a	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  015a0	50		 push	 eax
  015a1	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10974: 
; 10975: 		current_y -= y_fine_step;

  015a6	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  015ae	f3 0f 5c 85 2c
	ff ff ff	 subss	 xmm0, DWORD PTR _y_fine_step$10[ebp]
  015b6	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _current_y$13[ebp], xmm0

; 10976: 		for (i = -1; i >= -3; i--)

  015be	c7 85 18 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _i$5[ebp], -1
  015c8	eb 0f		 jmp	 SHORT $LN15@draw_pitch
$LN13@draw_pitch:
  015ca	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  015d0	83 e8 01	 sub	 eax, 1
  015d3	89 85 18 ff ff
	ff		 mov	 DWORD PTR _i$5[ebp], eax
$LN15@draw_pitch:
  015d9	83 bd 18 ff ff
	ff fd		 cmp	 DWORD PTR _i$5[ebp], -3	; fffffffdH
  015e0	0f 8c 03 01 00
	00		 jl	 $LN14@draw_pitch

; 10977: 		{
; 10978: 			draw_2d_line(x_tick, current_y, x_end, current_y, MFD_COLOUR1);

  015e6	b8 04 00 00 00	 mov	 eax, 4
  015eb	6b c8 00	 imul	 ecx, eax, 0
  015ee	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  015f4	52		 push	 edx
  015f5	51		 push	 ecx
  015f6	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  015fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01603	51		 push	 ecx
  01604	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _x_end$8[ebp]
  0160c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01611	51		 push	 ecx
  01612	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  0161a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0161f	51		 push	 ecx
  01620	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_tick$6[ebp]
  01628	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0162d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10979: 
; 10980: 			sprintf(buffer, "%d", i);

  01632	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  01638	50		 push	 eax
  01639	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0163e	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$2[ebp]
  01644	51		 push	 ecx
  01645	e8 00 00 00 00	 call	 _sprintf
  0164a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10981: 			x_adjust = get_mono_font_string_width(buffer) + 1;

  0164d	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  01653	50		 push	 eax
  01654	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01659	d9 9d c0 fe ff
	ff		 fstp	 DWORD PTR tv1669[ebp]
  0165f	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR tv1669[ebp]
  01667	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  0166f	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _x_adjust$4[ebp], xmm0

; 10982: 
; 10983: 			set_2d_mono_font_position (x_tick, current_y);

  01677	51		 push	 ecx
  01678	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  01680	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01685	51		 push	 ecx
  01686	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_tick$6[ebp]
  0168e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01693	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10984: 			set_mono_font_rel_position (-x_adjust, y_adjust);

  01698	51		 push	 ecx
  01699	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$3[ebp]
  016a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016a6	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$4[ebp]
  016ae	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  016b5	51		 push	 ecx
  016b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016bb	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10985: 			print_mono_font_string(buffer);

  016c0	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  016c6	50		 push	 eax
  016c7	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10986: 			current_y -= y_coarse_step;

  016cc	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _current_y$13[ebp]
  016d4	f3 0f 5c 85 28
	ff ff ff	 subss	 xmm0, DWORD PTR _y_coarse_step$9[ebp]
  016dc	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _current_y$13[ebp], xmm0

; 10987: 		}

  016e4	e9 e1 fe ff ff	 jmp	 $LN13@draw_pitch
$LN14@draw_pitch:

; 10988: 
; 10989: 		// draw marker
; 10990: 
; 10991: 		{
; 10992: 			float
; 10993: 				pitch_y;
; 10994: 
; 10995: 			pitch_y = bound(deg(pitch), -10.0, 10.0) * y_fine_height * 0.1;

  016e9	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  016ee	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  016f6	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  016fa	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c024000000000000
  01702	66 0f 2f c8	 comisd	 xmm1, xmm0
  01706	76 12		 jbe	 SHORT $LN54@draw_pitch
  01708	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c024000000000000
  01710	f2 0f 11 85 bc
	fe ff ff	 movsd	 QWORD PTR tv764[ebp], xmm0
  01718	eb 56		 jmp	 SHORT $LN55@draw_pitch
$LN54@draw_pitch:
  0171a	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  0171f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  01727	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0172b	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4024000000000000
  01733	76 12		 jbe	 SHORT $LN52@draw_pitch
  01735	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4024000000000000
  0173d	f2 0f 11 85 b4
	fe ff ff	 movsd	 QWORD PTR tv763[ebp], xmm0
  01745	eb 19		 jmp	 SHORT $LN53@draw_pitch
$LN52@draw_pitch:
  01747	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  0174c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  01754	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01758	f2 0f 11 85 b4
	fe ff ff	 movsd	 QWORD PTR tv763[ebp], xmm0
$LN53@draw_pitch:
  01760	f2 0f 10 85 b4
	fe ff ff	 movsd	 xmm0, QWORD PTR tv763[ebp]
  01768	f2 0f 11 85 bc
	fe ff ff	 movsd	 QWORD PTR tv764[ebp], xmm0
$LN55@draw_pitch:
  01770	f3 0f 5a 85 34
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_fine_height$12[ebp]
  01778	f2 0f 59 85 bc
	fe ff ff	 mulsd	 xmm0, QWORD PTR tv764[ebp]
  01780	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  01788	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0178c	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _pitch_y$1[ebp], xmm0

; 10996: 			if (pitch < rad(-10))

  01794	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be32b8c2
  0179c	0f 2f 45 c0	 comiss	 xmm0, DWORD PTR _pitch$[ebp]
  017a0	0f 86 cf 00 00
	00		 jbe	 $LN37@draw_pitch

; 10997: 				pitch_y += bound(deg(pitch) + 10.0, -20.0, 0.0) * y_coarse_height * 0.05;

  017a6	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  017ab	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  017b3	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  017b7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4024000000000000
  017bf	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c034000000000000
  017c7	66 0f 2f c8	 comisd	 xmm1, xmm0
  017cb	76 12		 jbe	 SHORT $LN58@draw_pitch
  017cd	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c034000000000000
  017d5	f2 0f 11 85 bc
	fe ff ff	 movsd	 QWORD PTR tv782[ebp], xmm0
  017dd	eb 61		 jmp	 SHORT $LN59@draw_pitch
$LN58@draw_pitch:
  017df	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  017e4	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  017ec	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  017f0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4024000000000000
  017f8	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  01800	76 0d		 jbe	 SHORT $LN56@draw_pitch
  01802	0f 57 c0	 xorps	 xmm0, xmm0
  01805	f2 0f 11 85 b4
	fe ff ff	 movsd	 QWORD PTR tv781[ebp], xmm0
  0180d	eb 21		 jmp	 SHORT $LN57@draw_pitch
$LN56@draw_pitch:
  0180f	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  01814	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  0181c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01820	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4024000000000000
  01828	f2 0f 11 85 b4
	fe ff ff	 movsd	 QWORD PTR tv781[ebp], xmm0
$LN57@draw_pitch:
  01830	f2 0f 10 85 b4
	fe ff ff	 movsd	 xmm0, QWORD PTR tv781[ebp]
  01838	f2 0f 11 85 bc
	fe ff ff	 movsd	 QWORD PTR tv782[ebp], xmm0
$LN59@draw_pitch:
  01840	f3 0f 5a 85 30
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_coarse_height$11[ebp]
  01848	f2 0f 59 85 bc
	fe ff ff	 mulsd	 xmm0, QWORD PTR tv782[ebp]
  01850	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fa999999999999a
  01858	f3 0f 5a 8d 04
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _pitch_y$1[ebp]
  01860	f2 0f 58 c8	 addsd	 xmm1, xmm0
  01864	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  01868	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _pitch_y$1[ebp], xmm0
  01870	e9 d7 00 00 00	 jmp	 $LN39@draw_pitch
$LN37@draw_pitch:

; 10998: 			else if (pitch > rad(10))

  01875	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  0187a	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3e32b8c2
  01881	0f 86 c5 00 00
	00		 jbe	 $LN39@draw_pitch

; 10999: 				pitch_y += bound(deg(pitch) - 10.0, 0.0, 20.0) * y_coarse_height * 0.05;

  01887	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  0188c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  01894	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01898	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4024000000000000
  018a0	0f 57 c9	 xorps	 xmm1, xmm1
  018a3	66 0f 2f c8	 comisd	 xmm1, xmm0
  018a7	76 0d		 jbe	 SHORT $LN62@draw_pitch
  018a9	0f 57 c0	 xorps	 xmm0, xmm0
  018ac	f2 0f 11 85 bc
	fe ff ff	 movsd	 QWORD PTR tv802[ebp], xmm0
  018b4	eb 66		 jmp	 SHORT $LN63@draw_pitch
$LN62@draw_pitch:
  018b6	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  018bb	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  018c3	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  018c7	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4024000000000000
  018cf	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4034000000000000
  018d7	76 12		 jbe	 SHORT $LN60@draw_pitch
  018d9	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4034000000000000
  018e1	f2 0f 11 85 b4
	fe ff ff	 movsd	 QWORD PTR tv801[ebp], xmm0
  018e9	eb 21		 jmp	 SHORT $LN61@draw_pitch
$LN60@draw_pitch:
  018eb	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  018f0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  018f8	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  018fc	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4024000000000000
  01904	f2 0f 11 85 b4
	fe ff ff	 movsd	 QWORD PTR tv801[ebp], xmm0
$LN61@draw_pitch:
  0190c	f2 0f 10 85 b4
	fe ff ff	 movsd	 xmm0, QWORD PTR tv801[ebp]
  01914	f2 0f 11 85 bc
	fe ff ff	 movsd	 QWORD PTR tv802[ebp], xmm0
$LN63@draw_pitch:
  0191c	f3 0f 5a 85 30
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_coarse_height$11[ebp]
  01924	f2 0f 59 85 bc
	fe ff ff	 mulsd	 xmm0, QWORD PTR tv802[ebp]
  0192c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fa999999999999a
  01934	f3 0f 5a 8d 04
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _pitch_y$1[ebp]
  0193c	f2 0f 58 c8	 addsd	 xmm1, xmm0
  01940	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  01944	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _pitch_y$1[ebp], xmm0
$LN39@draw_pitch:

; 11000: 
; 11001: 			pitch_y += y_centre;

  0194c	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _pitch_y$1[ebp]
  01954	f3 0f 58 45 d0	 addss	 xmm0, DWORD PTR _y_centre$[ebp]
  01959	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _pitch_y$1[ebp], xmm0

; 11002: 
; 11003: 			draw_2d_mono_sprite(large_right_carat, x_end, pitch_y, MFD_COLOUR1);

  01961	b8 04 00 00 00	 mov	 eax, 4
  01966	6b c8 00	 imul	 ecx, eax, 0
  01969	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0196f	52		 push	 edx
  01970	51		 push	 ecx
  01971	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _pitch_y$1[ebp]
  01979	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0197e	51		 push	 ecx
  0197f	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _x_end$8[ebp]
  01987	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0198c	68 00 00 00 00	 push	 OFFSET ?large_right_carat@@3PADA
  01991	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN34@draw_pitch:

; 11004: 		}
; 11005: 	}
; 11006: 
; 11007: 
; 11008: 	//
; 11009: 	// roll
; 11010: 	//
; 11011: 
; 11012: 	if (draw_main_display)

  01996	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_main_display@@3HA, 0
  0199d	0f 84 20 06 00
	00		 je	 $LN40@draw_pitch

; 11013: 	{
; 11014: 		set_2d_instance_position (mfd_env, PITCH_DATUM_X, PITCH_DATUM_Y - size);

  019a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  019ab	f3 0f 5c 45 cc	 subss	 xmm0, DWORD PTR _size$[ebp]
  019b0	51		 push	 ecx
  019b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019b6	51		 push	 ecx
  019b7	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  019bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  019c6	50		 push	 eax
  019c7	e8 00 00 00 00	 call	 ?set_2d_instance_position@@YGXPAUENV_2D@@MM@Z ; set_2d_instance_position

; 11015: 
; 11016: 		set_2d_instance_rotation (mfd_env, rad (0.0));

  019cc	51		 push	 ecx
  019cd	0f 57 c0	 xorps	 xmm0, xmm0
  019d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  019da	50		 push	 eax
  019db	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 11017: 		draw_2d_line (0.0, -size, 0.0, -size - 0.05, MFD_COLOUR1);

  019e0	b8 04 00 00 00	 mov	 eax, 4
  019e5	6b c8 00	 imul	 ecx, eax, 0
  019e8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  019ee	52		 push	 edx
  019ef	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  019f4	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  019fb	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  019ff	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  01a07	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a0b	51		 push	 ecx
  01a0c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a11	51		 push	 ecx
  01a12	0f 57 c0	 xorps	 xmm0, xmm0
  01a15	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a1a	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01a1f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01a26	51		 push	 ecx
  01a27	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a2c	51		 push	 ecx
  01a2d	0f 57 c0	 xorps	 xmm0, xmm0
  01a30	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a35	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 11018: 
; 11019: 		set_2d_instance_rotation (mfd_env, rad (10.0));

  01a3a	51		 push	 ecx
  01a3b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e32b8c2
  01a43	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a48	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01a4d	50		 push	 eax
  01a4e	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 11020: 		draw_2d_line (0.0, -size, 0.0, -size - 0.025, MFD_COLOUR1);

  01a53	b8 04 00 00 00	 mov	 eax, 4
  01a58	6b c8 00	 imul	 ecx, eax, 0
  01a5b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a61	52		 push	 edx
  01a62	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01a67	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01a6e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01a72	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9999999999999a
  01a7a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a7e	51		 push	 ecx
  01a7f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a84	51		 push	 ecx
  01a85	0f 57 c0	 xorps	 xmm0, xmm0
  01a88	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a8d	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01a92	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01a99	51		 push	 ecx
  01a9a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a9f	51		 push	 ecx
  01aa0	0f 57 c0	 xorps	 xmm0, xmm0
  01aa3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aa8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 11021: 		set_2d_instance_rotation (mfd_env, rad (-10.0));

  01aad	51		 push	 ecx
  01aae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be32b8c2
  01ab6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01abb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01ac0	50		 push	 eax
  01ac1	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 11022: 		draw_2d_line (0.0, -size, 0.0, -size - 0.025, MFD_COLOUR1);

  01ac6	b8 04 00 00 00	 mov	 eax, 4
  01acb	6b c8 00	 imul	 ecx, eax, 0
  01ace	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01ad4	52		 push	 edx
  01ad5	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01ada	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01ae1	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01ae5	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9999999999999a
  01aed	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01af1	51		 push	 ecx
  01af2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01af7	51		 push	 ecx
  01af8	0f 57 c0	 xorps	 xmm0, xmm0
  01afb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b00	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01b05	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01b0c	51		 push	 ecx
  01b0d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b12	51		 push	 ecx
  01b13	0f 57 c0	 xorps	 xmm0, xmm0
  01b16	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b1b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 11023: 
; 11024: 		set_2d_instance_rotation (mfd_env, rad (20.0));

  01b20	51		 push	 ecx
  01b21	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb2b8c2
  01b29	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b2e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01b33	50		 push	 eax
  01b34	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 11025: 		draw_2d_line (0.0, -size, 0.0, -size - 0.025, MFD_COLOUR1);

  01b39	b8 04 00 00 00	 mov	 eax, 4
  01b3e	6b c8 00	 imul	 ecx, eax, 0
  01b41	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01b47	52		 push	 edx
  01b48	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01b4d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01b54	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01b58	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9999999999999a
  01b60	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b64	51		 push	 ecx
  01b65	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b6a	51		 push	 ecx
  01b6b	0f 57 c0	 xorps	 xmm0, xmm0
  01b6e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b73	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01b78	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01b7f	51		 push	 ecx
  01b80	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b85	51		 push	 ecx
  01b86	0f 57 c0	 xorps	 xmm0, xmm0
  01b89	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b8e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 11026: 		set_2d_instance_rotation (mfd_env, rad (-20.0));

  01b93	51		 push	 ecx
  01b94	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb2b8c2
  01b9c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ba1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01ba6	50		 push	 eax
  01ba7	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 11027: 		draw_2d_line (0.0, -size, 0.0, -size - 0.025, MFD_COLOUR1);

  01bac	b8 04 00 00 00	 mov	 eax, 4
  01bb1	6b c8 00	 imul	 ecx, eax, 0
  01bb4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01bba	52		 push	 edx
  01bbb	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01bc0	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01bc7	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01bcb	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9999999999999a
  01bd3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01bd7	51		 push	 ecx
  01bd8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bdd	51		 push	 ecx
  01bde	0f 57 c0	 xorps	 xmm0, xmm0
  01be1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01be6	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01beb	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01bf2	51		 push	 ecx
  01bf3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bf8	51		 push	 ecx
  01bf9	0f 57 c0	 xorps	 xmm0, xmm0
  01bfc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c01	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 11028: 
; 11029: 		set_2d_instance_rotation (mfd_env, rad (30.0));

  01c06	51		 push	 ecx
  01c07	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f060a92
  01c0f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c14	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01c19	50		 push	 eax
  01c1a	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 11030: 		draw_2d_line (0.0, -size, 0.0, -size - 0.05, MFD_COLOUR1);

  01c1f	b8 04 00 00 00	 mov	 eax, 4
  01c24	6b c8 00	 imul	 ecx, eax, 0
  01c27	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01c2d	52		 push	 edx
  01c2e	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01c33	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01c3a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01c3e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  01c46	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c4a	51		 push	 ecx
  01c4b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c50	51		 push	 ecx
  01c51	0f 57 c0	 xorps	 xmm0, xmm0
  01c54	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c59	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01c5e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01c65	51		 push	 ecx
  01c66	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c6b	51		 push	 ecx
  01c6c	0f 57 c0	 xorps	 xmm0, xmm0
  01c6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c74	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 11031: 		set_2d_instance_rotation (mfd_env, rad (-30.0));

  01c79	51		 push	 ecx
  01c7a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf060a92
  01c82	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c87	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01c8c	50		 push	 eax
  01c8d	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 11032: 		draw_2d_line (0.0, -size, 0.0, -size - 0.05, MFD_COLOUR1);

  01c92	b8 04 00 00 00	 mov	 eax, 4
  01c97	6b c8 00	 imul	 ecx, eax, 0
  01c9a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01ca0	52		 push	 edx
  01ca1	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01ca6	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01cad	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01cb1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  01cb9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01cbd	51		 push	 ecx
  01cbe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cc3	51		 push	 ecx
  01cc4	0f 57 c0	 xorps	 xmm0, xmm0
  01cc7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ccc	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01cd1	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01cd8	51		 push	 ecx
  01cd9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cde	51		 push	 ecx
  01cdf	0f 57 c0	 xorps	 xmm0, xmm0
  01ce2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ce7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 11033: 
; 11034: 		set_2d_instance_rotation (mfd_env, rad (45.0));

  01cec	51		 push	 ecx
  01ced	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f490fdb
  01cf5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cfa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01cff	50		 push	 eax
  01d00	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 11035: 		draw_2d_line (0.0, -size, 0.0, -size - 0.05, MFD_COLOUR1);

  01d05	b8 04 00 00 00	 mov	 eax, 4
  01d0a	6b c8 00	 imul	 ecx, eax, 0
  01d0d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01d13	52		 push	 edx
  01d14	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01d19	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01d20	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01d24	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  01d2c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d30	51		 push	 ecx
  01d31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d36	51		 push	 ecx
  01d37	0f 57 c0	 xorps	 xmm0, xmm0
  01d3a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d3f	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01d44	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01d4b	51		 push	 ecx
  01d4c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d51	51		 push	 ecx
  01d52	0f 57 c0	 xorps	 xmm0, xmm0
  01d55	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d5a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 11036: 		set_2d_instance_rotation (mfd_env, rad (-45.0));

  01d5f	51		 push	 ecx
  01d60	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf490fdb
  01d68	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d6d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01d72	50		 push	 eax
  01d73	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 11037: 		draw_2d_line (0.0, -size, 0.0, -size - 0.05, MFD_COLOUR1);

  01d78	b8 04 00 00 00	 mov	 eax, 4
  01d7d	6b c8 00	 imul	 ecx, eax, 0
  01d80	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01d86	52		 push	 edx
  01d87	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01d8c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01d93	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01d97	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  01d9f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01da3	51		 push	 ecx
  01da4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01da9	51		 push	 ecx
  01daa	0f 57 c0	 xorps	 xmm0, xmm0
  01dad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01db2	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01db7	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01dbe	51		 push	 ecx
  01dbf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dc4	51		 push	 ecx
  01dc5	0f 57 c0	 xorps	 xmm0, xmm0
  01dc8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dcd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 11038: 
; 11039: 		set_2d_instance_rotation (mfd_env, rad (60.0));

  01dd2	51		 push	 ecx
  01dd3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f860a92
  01ddb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01de0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01de5	50		 push	 eax
  01de6	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 11040: 		draw_2d_line (0.0, -size, 0.0, -size - 0.05, MFD_COLOUR1);

  01deb	b8 04 00 00 00	 mov	 eax, 4
  01df0	6b c8 00	 imul	 ecx, eax, 0
  01df3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01df9	52		 push	 edx
  01dfa	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01dff	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01e06	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01e0a	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  01e12	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e16	51		 push	 ecx
  01e17	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e1c	51		 push	 ecx
  01e1d	0f 57 c0	 xorps	 xmm0, xmm0
  01e20	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e25	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01e2a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01e31	51		 push	 ecx
  01e32	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e37	51		 push	 ecx
  01e38	0f 57 c0	 xorps	 xmm0, xmm0
  01e3b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e40	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 11041: 		set_2d_instance_rotation (mfd_env, rad (-60.0));

  01e45	51		 push	 ecx
  01e46	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf860a92
  01e4e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e53	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01e58	50		 push	 eax
  01e59	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 11042: 		draw_2d_line (0.0, -size, 0.0, -size - 0.05, MFD_COLOUR1);

  01e5e	b8 04 00 00 00	 mov	 eax, 4
  01e63	6b c8 00	 imul	 ecx, eax, 0
  01e66	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01e6c	52		 push	 edx
  01e6d	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01e72	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01e79	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01e7d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  01e85	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e89	51		 push	 ecx
  01e8a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e8f	51		 push	 ecx
  01e90	0f 57 c0	 xorps	 xmm0, xmm0
  01e93	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e98	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01e9d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01ea4	51		 push	 ecx
  01ea5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01eaa	51		 push	 ecx
  01eab	0f 57 c0	 xorps	 xmm0, xmm0
  01eae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01eb3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 11043: 
; 11044: 		set_2d_instance_rotation (mfd_env, bound (roll, rad(-60.0), rad(60.0)));

  01eb8	f3 0f 5a 45 b0	 cvtss2sd xmm0, DWORD PTR _roll$[ebp]
  01ebd	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bff0c15236000000
  01ec5	66 0f 2f c8	 comisd	 xmm1, xmm0
  01ec9	76 12		 jbe	 SHORT $LN66@draw_pitch
  01ecb	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff0c15236000000
  01ed3	f2 0f 11 85 bc
	fe ff ff	 movsd	 QWORD PTR tv981[ebp], xmm0
  01edb	eb 3e		 jmp	 SHORT $LN67@draw_pitch
$LN66@draw_pitch:
  01edd	f3 0f 5a 45 b0	 cvtss2sd xmm0, DWORD PTR _roll$[ebp]
  01ee2	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0c15236000000
  01eea	76 12		 jbe	 SHORT $LN64@draw_pitch
  01eec	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0c15236000000
  01ef4	f2 0f 11 85 b4
	fe ff ff	 movsd	 QWORD PTR tv980[ebp], xmm0
  01efc	eb 0d		 jmp	 SHORT $LN65@draw_pitch
$LN64@draw_pitch:
  01efe	f3 0f 5a 45 b0	 cvtss2sd xmm0, DWORD PTR _roll$[ebp]
  01f03	f2 0f 11 85 b4
	fe ff ff	 movsd	 QWORD PTR tv980[ebp], xmm0
$LN65@draw_pitch:
  01f0b	f2 0f 10 85 b4
	fe ff ff	 movsd	 xmm0, QWORD PTR tv980[ebp]
  01f13	f2 0f 11 85 bc
	fe ff ff	 movsd	 QWORD PTR tv981[ebp], xmm0
$LN67@draw_pitch:
  01f1b	f2 0f 5a 85 bc
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv981[ebp]
  01f23	51		 push	 ecx
  01f24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f29	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01f2e	50		 push	 eax
  01f2f	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 11045: 		draw_2d_filled_triangle(0.0, -size, -0.035, -size + 0.075, 0.035, -size + 0.075, MFD_COLOUR4);

  01f34	b8 04 00 00 00	 mov	 eax, 4
  01f39	6b c8 03	 imul	 ecx, eax, 3
  01f3c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01f42	52		 push	 edx
  01f43	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01f48	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01f4f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01f53	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb3333333333333
  01f5b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01f5f	51		 push	 ecx
  01f60	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f65	51		 push	 ecx
  01f66	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  01f6e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f73	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01f78	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01f7f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01f83	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb3333333333333
  01f8b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01f8f	51		 push	 ecx
  01f90	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f95	51		 push	 ecx
  01f96	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd0f5c29
  01f9e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fa3	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _size$[ebp]
  01fa8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01faf	51		 push	 ecx
  01fb0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fb5	51		 push	 ecx
  01fb6	0f 57 c0	 xorps	 xmm0, xmm0
  01fb9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fbe	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle
$LN40@draw_pitch:

; 11046: 	}
; 11047: 
; 11048: 	//
; 11049: 	// restore 2D environment
; 11050: 	//
; 11051: 
; 11052: 	reset_2d_instance (mfd_env);

  01fc3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01fc8	50		 push	 eax
  01fc9	e8 00 00 00 00	 call	 ?reset_2d_instance@@YGXPAUENV_2D@@@Z ; reset_2d_instance

; 11053: 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  01fce	51		 push	 ecx
  01fcf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  01fd7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fdc	51		 push	 ecx
  01fdd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  01fe5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fea	51		 push	 ecx
  01feb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01ff3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ff8	51		 push	 ecx
  01ff9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02001	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0200b	50		 push	 eax
  0200c	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 11054: 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  02011	51		 push	 ecx
  02012	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0201a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0201f	51		 push	 ecx
  02020	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  02028	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0202d	51		 push	 ecx
  0202e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  02036	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0203b	51		 push	 ecx
  0203c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  02044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02049	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0204e	50		 push	 eax
  0204f	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 11055: 
; 11056: 	// datum
; 11057: 	draw_2d_line(x_centre, 0.0, x_centre + 0.05, -0.05, MFD_COLOUR6);

  02054	b8 04 00 00 00	 mov	 eax, 4
  02059	6b c8 05	 imul	 ecx, eax, 5
  0205c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02062	52		 push	 edx
  02063	51		 push	 ecx
  02064	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  0206c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02071	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  02076	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa999999999999a
  0207e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02082	51		 push	 ecx
  02083	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02088	51		 push	 ecx
  02089	0f 57 c0	 xorps	 xmm0, xmm0
  0208c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02091	51		 push	 ecx
  02092	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  02097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0209c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 11058: 	draw_2d_line(x_centre, 0.0, x_centre - 0.05, -0.05, MFD_COLOUR6);

  020a1	b8 04 00 00 00	 mov	 eax, 4
  020a6	6b c8 05	 imul	 ecx, eax, 5
  020a9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  020af	52		 push	 edx
  020b0	51		 push	 ecx
  020b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  020b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020be	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  020c3	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  020cb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  020cf	51		 push	 ecx
  020d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020d5	51		 push	 ecx
  020d6	0f 57 c0	 xorps	 xmm0, xmm0
  020d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020de	51		 push	 ecx
  020df	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  020e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020e9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 11059: 
; 11060: 	draw_2d_line(x_centre + 0.05, -0.05, x_centre + 0.10, 0.0, MFD_COLOUR6);

  020ee	b8 04 00 00 00	 mov	 eax, 4
  020f3	6b c8 05	 imul	 ecx, eax, 5
  020f6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  020fc	52		 push	 edx
  020fd	51		 push	 ecx
  020fe	0f 57 c0	 xorps	 xmm0, xmm0
  02101	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02106	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  0210b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  02113	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02117	51		 push	 ecx
  02118	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0211d	51		 push	 ecx
  0211e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  02126	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0212b	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  02130	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa999999999999a
  02138	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0213c	51		 push	 ecx
  0213d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02142	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 11061: 	draw_2d_line(x_centre - 0.05, -0.05, x_centre - 0.10, 0.0, MFD_COLOUR6);

  02147	b8 04 00 00 00	 mov	 eax, 4
  0214c	6b c8 05	 imul	 ecx, eax, 5
  0214f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02155	52		 push	 edx
  02156	51		 push	 ecx
  02157	0f 57 c0	 xorps	 xmm0, xmm0
  0215a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0215f	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  02164	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb999999999999a
  0216c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02170	51		 push	 ecx
  02171	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02176	51		 push	 ecx
  02177	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  0217f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02184	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  02189	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  02191	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02195	51		 push	 ecx
  02196	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0219b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 11062: 
; 11063: 	draw_2d_line(x_centre + 0.10, 0.0, x_centre + 0.20, 0.0, MFD_COLOUR6);

  021a0	b8 04 00 00 00	 mov	 eax, 4
  021a5	6b c8 05	 imul	 ecx, eax, 5
  021a8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  021ae	52		 push	 edx
  021af	51		 push	 ecx
  021b0	0f 57 c0	 xorps	 xmm0, xmm0
  021b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021b8	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  021bd	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  021c5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  021c9	51		 push	 ecx
  021ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021cf	51		 push	 ecx
  021d0	0f 57 c0	 xorps	 xmm0, xmm0
  021d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021d8	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  021dd	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  021e5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  021e9	51		 push	 ecx
  021ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021ef	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 11064: 	draw_2d_line(x_centre - 0.10, 0.0, x_centre - 0.20, 0.0, MFD_COLOUR6);

  021f4	b8 04 00 00 00	 mov	 eax, 4
  021f9	6b c8 05	 imul	 ecx, eax, 5
  021fc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02202	52		 push	 edx
  02203	51		 push	 ecx
  02204	0f 57 c0	 xorps	 xmm0, xmm0
  02207	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0220c	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  02211	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  02219	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0221d	51		 push	 ecx
  0221e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02223	51		 push	 ecx
  02224	0f 57 c0	 xorps	 xmm0, xmm0
  02227	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0222c	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _x_centre$[ebp]
  02231	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb999999999999a
  02239	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0223d	51		 push	 ecx
  0223e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02243	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 11065: }

  02248	5f		 pop	 edi
  02249	5e		 pop	 esi
  0224a	5b		 pop	 ebx
  0224b	8b e5		 mov	 esp, ebp
  0224d	5d		 pop	 ebp
  0224e	c3		 ret	 0
?draw_pitch_ladder@@YGXXZ ENDP				; draw_pitch_ladder
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?limit_pitch@@YGHHPAH@Z
_TEXT	SEGMENT
_pitch$ = 8						; size = 4
_step_direction$ = 12					; size = 4
?limit_pitch@@YGHHPAH@Z PROC				; limit_pitch, COMDAT

; 10598: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10599: 	if (pitch > 9)

  00009	83 7d 08 09	 cmp	 DWORD PTR _pitch$[ebp], 9
  0000d	7e 1f		 jle	 SHORT $LN2@limit_pitc

; 10600: 	{
; 10601: 		pitch -= 18;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  00012	83 e8 12	 sub	 eax, 18			; 00000012H
  00015	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 10602: 
; 10603: 		pitch = -pitch;

  00018	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  0001b	f7 d8		 neg	 eax
  0001d	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 10604: 
; 10605: 		*step_direction = -(*step_direction);

  00020	8b 45 0c	 mov	 eax, DWORD PTR _step_direction$[ebp]
  00023	8b 08		 mov	 ecx, DWORD PTR [eax]
  00025	f7 d9		 neg	 ecx
  00027	8b 55 0c	 mov	 edx, DWORD PTR _step_direction$[ebp]
  0002a	89 0a		 mov	 DWORD PTR [edx], ecx
  0002c	eb 23		 jmp	 SHORT $LN3@limit_pitc
$LN2@limit_pitc:

; 10606: 	}
; 10607: 	else if (pitch < -9)

  0002e	83 7d 08 f7	 cmp	 DWORD PTR _pitch$[ebp], -9 ; fffffff7H
  00032	7d 1d		 jge	 SHORT $LN3@limit_pitc

; 10608: 	{
; 10609: 		pitch += 18;

  00034	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  00037	83 c0 12	 add	 eax, 18			; 00000012H
  0003a	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 10610: 
; 10611: 		pitch = -pitch;

  0003d	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  00040	f7 d8		 neg	 eax
  00042	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 10612: 
; 10613: 		*step_direction = -(*step_direction);

  00045	8b 45 0c	 mov	 eax, DWORD PTR _step_direction$[ebp]
  00048	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004a	f7 d9		 neg	 ecx
  0004c	8b 55 0c	 mov	 edx, DWORD PTR _step_direction$[ebp]
  0004f	89 0a		 mov	 DWORD PTR [edx], ecx
$LN3@limit_pitc:

; 10614: 	}
; 10615: 
; 10616: 	return (pitch);

  00051	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]

; 10617: }

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 08 00	 ret	 8
?limit_pitch@@YGHHPAH@Z ENDP				; limit_pitch
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_engine_display_side_mfd@@YGXXZ
_TEXT	SEGMENT
tv529 = -180						; size = 8
tv482 = -180						; size = 8
tv435 = -180						; size = 8
tv388 = -180						; size = 8
tv341 = -180						; size = 8
tv294 = -180						; size = 8
tv247 = -180						; size = 8
tv154 = -180						; size = 8
tv1082 = -172						; size = 8
tv1056 = -172						; size = 8
tv1032 = -172						; size = 8
tv1006 = -172						; size = 8
tv982 = -172						; size = 8
tv956 = -172						; size = 8
tv932 = -172						; size = 8
tv906 = -172						; size = 8
tv882 = -172						; size = 8
tv856 = -172						; size = 8
tv832 = -172						; size = 8
tv806 = -172						; size = 8
tv782 = -172						; size = 8
tv756 = -172						; size = 8
tv660 = -172						; size = 8
tv631 = -172						; size = 8
tv618 = -172						; size = 8
tv530 = -172						; size = 8
tv483 = -172						; size = 8
tv436 = -172						; size = 8
tv389 = -172						; size = 8
tv342 = -172						; size = 8
tv295 = -172						; size = 8
tv248 = -172						; size = 8
tv155 = -172						; size = 8
tv605 = -168						; size = 4
_fvalue$ = -100						; size = 4
_x_adjust$ = -96					; size = 4
_bottom_edge$ = -92					; size = 4
_centre_x$ = -88					; size = 4
_ivalue$ = -84						; size = 4
_s$ = -80						; size = 80
?draw_engine_display_side_mfd@@YGXXZ PROC		; draw_engine_display_side_mfd, COMDAT

; 10119: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 10120: 	char
; 10121: 		s[80];
; 10122: 
; 10123: 	int
; 10124: 		ivalue;
; 10125: 
; 10126: 	float
; 10127: 		centre_x,
; 10128: 		bottom_edge,
; 10129: 		x_adjust,
; 10130: 		fvalue;
; 10131: 
; 10132: 	set_mono_font_colour (MFD_COLOUR1);

  0000c	b8 04 00 00 00	 mov	 eax, 4
  00011	6b c8 00	 imul	 ecx, eax, 0
  00014	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 10133: 
; 10134: 	if (draw_large_mfd)

  00020	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00027	74 09		 je	 SHORT $LN2@draw_engin

; 10135: 	{
; 10136: 		set_mono_font_type (MONO_FONT_TYPE_5X9);

  00029	6a 02		 push	 2
  0002b	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 10137: 	}
; 10138: 	else

  00030	eb 07		 jmp	 SHORT $LN3@draw_engin
$LN2@draw_engin:

; 10139: 	{
; 10140: 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  00032	6a 00		 push	 0
  00034	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN3@draw_engin:

; 10141: 	}
; 10142: 
; 10143: 	////////////////////////////////////////
; 10144: 
; 10145: 	set_2d_mono_font_position (-0.6 - 0.4, 0.9);

  00039	51		 push	 ecx
  0003a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  00042	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00047	51		 push	 ecx
  00048	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00050	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00055	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10146: 
; 10147: 	set_mono_font_rel_position (1.0, 0.0);

  0005a	51		 push	 ecx
  0005b	0f 57 c0	 xorps	 xmm0, xmm0
  0005e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00063	51		 push	 ecx
  00064	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10148: 
; 10149: 	print_mono_font_string ("L ENGINE");

  00076	68 00 00 00 00	 push	 OFFSET ??_C@_08ICMALC@L?5ENGINE@
  0007b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10150: 
; 10151: 	set_2d_mono_font_position (0.6 - 0.4, 0.9);

  00080	51		 push	 ecx
  00081	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  00089	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008e	51		 push	 ecx
  0008f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10152: 
; 10153: 	x_adjust = -get_mono_font_string_width ("R ENGINE");

  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_08GEIAFJFB@R?5ENGINE@
  000a6	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  000ab	d9 9d 58 ff ff
	ff		 fstp	 DWORD PTR tv605[ebp]
  000b1	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR tv605[ebp]
  000b9	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000c0	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10154: 
; 10155: 	set_mono_font_rel_position (x_adjust, 0.0);

  000c5	51		 push	 ecx
  000c6	0f 57 c0	 xorps	 xmm0, xmm0
  000c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ce	51		 push	 ecx
  000cf	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  000d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d9	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10156: 
; 10157: 	print_mono_font_string ("R ENGINE");

  000de	68 00 00 00 00	 push	 OFFSET ??_C@_08GEIAFJFB@R?5ENGINE@
  000e3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10158: 
; 10159: 	////////////////////////////////////////
; 10160: 
; 10161: 	set_2d_mono_font_position (0.0 - 0.4, -0.6);

  000e8	51		 push	 ecx
  000e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  000f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f6	51		 push	 ecx
  000f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  000ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00104	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10162: 
; 10163: 	x_adjust = get_mono_font_string_width ("FUEL QTY") * -0.5;

  00109	68 00 00 00 00	 push	 OFFSET ??_C@_08HFKNNLAF@FUEL?5QTY@
  0010e	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00113	dd 9d 54 ff ff
	ff		 fstp	 QWORD PTR tv618[ebp]
  00119	f2 0f 10 85 54
	ff ff ff	 movsd	 xmm0, QWORD PTR tv618[ebp]
  00121	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00129	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0012d	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10164: 
; 10165: 	set_mono_font_rel_position (x_adjust, 0.0);

  00132	51		 push	 ecx
  00133	0f 57 c0	 xorps	 xmm0, xmm0
  00136	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013b	51		 push	 ecx
  0013c	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00141	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00146	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10166: 
; 10167: 	print_mono_font_string ("FUEL QTY");

  0014b	68 00 00 00 00	 push	 OFFSET ??_C@_08HFKNNLAF@FUEL?5QTY@
  00150	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10168: 
; 10169: 	set_2d_mono_font_position (0.0 - 0.4, -0.7);

  00155	51		 push	 ecx
  00156	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  0015e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00163	51		 push	 ecx
  00164	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  0016c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00171	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10170: 
; 10171: 	x_adjust = get_mono_font_string_width ("LB") * -0.5;

  00176	68 00 00 00 00	 push	 OFFSET ??_C@_02LLHBHPMO@LB@
  0017b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00180	dd 9d 54 ff ff
	ff		 fstp	 QWORD PTR tv631[ebp]
  00186	f2 0f 10 85 54
	ff ff ff	 movsd	 xmm0, QWORD PTR tv631[ebp]
  0018e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00196	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0019a	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10172: 
; 10173: 	set_mono_font_rel_position (x_adjust, 0.0);

  0019f	51		 push	 ecx
  001a0	0f 57 c0	 xorps	 xmm0, xmm0
  001a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a8	51		 push	 ecx
  001a9	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  001ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b3	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10174: 
; 10175: 	print_mono_font_string ("LB");

  001b8	68 00 00 00 00	 push	 OFFSET ??_C@_02LLHBHPMO@LB@
  001bd	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10176: 
; 10177: 	set_2d_mono_font_position (0.0 - 0.4, -0.8);

  001c2	51		 push	 ecx
  001c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  001cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d0	51		 push	 ecx
  001d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  001d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001de	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10178: 
; 10179: 	fvalue = bound (kilograms_to_pounds (current_flight_dynamics->fuel_weight.value), 0.0, 9999.0);

  001e3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  001e8	f3 0f 10 80 a4
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9380]
  001f0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  001f8	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001fc	0f 57 c9	 xorps	 xmm1, xmm1
  001ff	66 0f 2f c8	 comisd	 xmm1, xmm0
  00203	76 0d		 jbe	 SHORT $LN7@draw_engin
  00205	0f 57 c0	 xorps	 xmm0, xmm0
  00208	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv155[ebp], xmm0
  00210	eb 68		 jmp	 SHORT $LN8@draw_engin
$LN7@draw_engin:
  00212	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00218	f3 0f 10 81 a4
	24 00 00	 movss	 xmm0, DWORD PTR [ecx+9380]
  00220	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  00228	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0022c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@40c3878000000000
  00234	76 12		 jbe	 SHORT $LN5@draw_engin
  00236	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@40c3878000000000
  0023e	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv154[ebp], xmm0
  00246	eb 22		 jmp	 SHORT $LN6@draw_engin
$LN5@draw_engin:
  00248	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0024e	f3 0f 10 82 a4
	24 00 00	 movss	 xmm0, DWORD PTR [edx+9380]
  00256	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  0025e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00262	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv154[ebp], xmm0
$LN6@draw_engin:
  0026a	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv154[ebp]
  00272	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv155[ebp], xmm0
$LN8@draw_engin:
  0027a	f2 0f 5a 85 54
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv155[ebp]
  00282	f3 0f 11 45 9c	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 10180: 
; 10181: 	convert_float_to_int (fvalue, &ivalue);

  00287	8d 45 ac	 lea	 eax, DWORD PTR _ivalue$[ebp]
  0028a	50		 push	 eax
  0028b	51		 push	 ecx
  0028c	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  00291	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00296	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 10182: 
; 10183: 	sprintf (s, "%04d", ivalue);

  0029b	8b 45 ac	 mov	 eax, DWORD PTR _ivalue$[ebp]
  0029e	50		 push	 eax
  0029f	68 00 00 00 00	 push	 OFFSET ??_C@_04OCCELDNI@?$CF04d@
  002a4	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  002a7	51		 push	 ecx
  002a8	e8 00 00 00 00	 call	 _sprintf
  002ad	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10184: 
; 10185: 	x_adjust = get_mono_font_string_width (s) * -0.5;

  002b0	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  002b3	50		 push	 eax
  002b4	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  002b9	dd 9d 54 ff ff
	ff		 fstp	 QWORD PTR tv660[ebp]
  002bf	f2 0f 10 85 54
	ff ff ff	 movsd	 xmm0, QWORD PTR tv660[ebp]
  002c7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  002cf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002d3	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10186: 
; 10187: 	set_mono_font_rel_position (x_adjust, 0.0);

  002d8	51		 push	 ecx
  002d9	0f 57 c0	 xorps	 xmm0, xmm0
  002dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e1	51		 push	 ecx
  002e2	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  002e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ec	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10188: 
; 10189: 	print_mono_font_string (s);

  002f1	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  002f4	50		 push	 eax
  002f5	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10190: 
; 10191: 	////////////////////////////////////////
; 10192: 
; 10193: 	draw_2d_line (-0.6000 - 0.000 - 0.4, 0.3333, -0.5500 + 0.015 - 0.4, 0.3333, MFD_COLOUR1);

  002fa	b8 04 00 00 00	 mov	 eax, 4
  002ff	6b c8 00	 imul	 ecx, eax, 0
  00302	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00308	52		 push	 edx
  00309	51		 push	 ecx
  0030a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  00312	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00317	51		 push	 ecx
  00318	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6f5c29
  00320	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00325	51		 push	 ecx
  00326	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  0032e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00333	51		 push	 ecx
  00334	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0033c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00341	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10194: 	draw_2d_line (-0.4750 - 0.015 - 0.4, 0.3333, -0.3792 + 0.015 - 0.4, 0.3333, MFD_COLOUR1);

  00346	b8 04 00 00 00	 mov	 eax, 4
  0034b	6b c8 00	 imul	 ecx, eax, 0
  0034e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00354	52		 push	 edx
  00355	51		 push	 ecx
  00356	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  0035e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00363	51		 push	 ecx
  00364	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf43a29c
  0036c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00371	51		 push	 ecx
  00372	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  0037a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037f	51		 push	 ecx
  00380	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf63d70a
  00388	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10195: 	draw_2d_line (-0.3042 - 0.015 - 0.4, 0.3333, -0.2083 + 0.015 - 0.4, 0.3333, MFD_COLOUR1);

  00392	b8 04 00 00 00	 mov	 eax, 4
  00397	6b c8 00	 imul	 ecx, eax, 0
  0039a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003a0	52		 push	 edx
  003a1	51		 push	 ecx
  003a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  003aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003af	51		 push	 ecx
  003b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf17e282
  003b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bd	51		 push	 ecx
  003be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  003c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003cb	51		 push	 ecx
  003cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf381d7e
  003d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10196: 	draw_2d_line (-0.1333 - 0.015 - 0.4, 0.3333, -0.0375 + 0.015 - 0.4, 0.3333, MFD_COLOUR1);

  003de	b8 04 00 00 00	 mov	 eax, 4
  003e3	6b c8 00	 imul	 ecx, eax, 0
  003e6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003ec	52		 push	 edx
  003ed	51		 push	 ecx
  003ee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  003f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003fb	51		 push	 ecx
  003fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bed851ec
  00404	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00409	51		 push	 ecx
  0040a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  00412	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00417	51		 push	 ecx
  00418	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0c5d64
  00420	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00425	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10197: 
; 10198: 	draw_2d_line ( 0.6000 + 0.000 - 0.4, 0.3333,  0.5500 - 0.015 - 0.4, 0.3333, MFD_COLOUR1);

  0042a	b8 04 00 00 00	 mov	 eax, 4
  0042f	6b c8 00	 imul	 ecx, eax, 0
  00432	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00438	52		 push	 edx
  00439	51		 push	 ecx
  0043a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  00442	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00447	51		 push	 ecx
  00448	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0a3d71
  00450	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00455	51		 push	 ecx
  00456	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  0045e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00463	51		 push	 ecx
  00464	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0046c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00471	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10199: 	draw_2d_line ( 0.4750 + 0.015 - 0.4, 0.3333,  0.3792 - 0.015 - 0.4, 0.3333, MFD_COLOUR1);

  00476	b8 04 00 00 00	 mov	 eax, 4
  0047b	6b c8 00	 imul	 ecx, eax, 0
  0047e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00484	52		 push	 edx
  00485	51		 push	 ecx
  00486	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  0048e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00493	51		 push	 ecx
  00494	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd12a305
  0049c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a1	51		 push	 ecx
  004a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  004aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004af	51		 push	 ecx
  004b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db851ec
  004b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004bd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10200: 	draw_2d_line ( 0.3042 + 0.015 - 0.4, 0.3333,  0.2083 - 0.015 - 0.4, 0.3333, MFD_COLOUR1);

  004c2	b8 04 00 00 00	 mov	 eax, 4
  004c7	6b c8 00	 imul	 ecx, eax, 0
  004ca	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004d0	52		 push	 edx
  004d1	51		 push	 ecx
  004d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  004da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004df	51		 push	 ecx
  004e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be53a92a
  004e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ed	51		 push	 ecx
  004ee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  004f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fb	51		 push	 ecx
  004fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda57a78
  00504	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00509	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10201: 	draw_2d_line ( 0.1333 + 0.015 - 0.4, 0.3333,  0.0375 - 0.015 - 0.4, 0.3333, MFD_COLOUR1);

  0050e	b8 04 00 00 00	 mov	 eax, 4
  00513	6b c8 00	 imul	 ecx, eax, 0
  00516	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0051c	52		 push	 edx
  0051d	51		 push	 ecx
  0051e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  00526	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0052b	51		 push	 ecx
  0052c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bec147ae
  00534	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00539	51		 push	 ecx
  0053a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  00542	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00547	51		 push	 ecx
  00548	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be80ded3
  00550	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00555	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10202: 
; 10203: 	////////////////////////////////////////
; 10204: 
; 10205: 	//
; 10206: 	// Nr
; 10207: 	//
; 10208: 
; 10209: 	#define X_ORG	((float) (0.0f - 0.4f))
; 10210: 	#define Y_ORG	((float) (0.5f))
; 10211: 	#define WIDTH	((float) (0.045f))
; 10212: 	#define HEIGHT	((float) (1.0f))
; 10213: 
; 10214: 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 10215: 	// as a constant as a function parameter will use a double (even though
; 10216: 	// definition is available and says const float), which causes later parameters
; 10217: 	// to be wrong
; 10218: 	centre_x = X_ORG;

  0055a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00562	f3 0f 11 45 a8	 movss	 DWORD PTR _centre_x$[ebp], xmm0

; 10219: 	bottom_edge = (Y_ORG - HEIGHT);

  00567	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0056f	f3 0f 11 45 a4	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 10220: 
; 10221: 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  00574	51		 push	 ecx
  00575	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  0057d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00582	51		 push	 ecx
  00583	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  0058b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00590	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10222: 
; 10223: 	x_adjust = get_mono_font_string_width ("NR") * -0.5;

  00595	68 00 00 00 00	 push	 OFFSET ??_C@_02PCDHLJPB@NR@
  0059a	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0059f	dd 9d 54 ff ff
	ff		 fstp	 QWORD PTR tv756[ebp]
  005a5	f2 0f 10 85 54
	ff ff ff	 movsd	 xmm0, QWORD PTR tv756[ebp]
  005ad	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  005b5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005b9	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10224: 
; 10225: 	set_mono_font_rel_position (x_adjust, 0.0);

  005be	51		 push	 ecx
  005bf	0f 57 c0	 xorps	 xmm0, xmm0
  005c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c7	51		 push	 ecx
  005c8	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  005cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10226: 
; 10227: 	print_mono_font_string ("NR");

  005d7	68 00 00 00 00	 push	 OFFSET ??_C@_02PCDHLJPB@NR@
  005dc	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10228: 
; 10229: 	////////////////////////////////////////
; 10230: 
; 10231: 	fvalue = bound (current_flight_dynamics->main_rotor_rpm.value, 0.0, 120.0);

  005e1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  005e6	f3 0f 5a 80 14
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7700]
  005ee	0f 57 c9	 xorps	 xmm1, xmm1
  005f1	66 0f 2f c8	 comisd	 xmm1, xmm0
  005f5	76 0d		 jbe	 SHORT $LN11@draw_engin
  005f7	0f 57 c0	 xorps	 xmm0, xmm0
  005fa	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv248[ebp], xmm0
  00602	eb 50		 jmp	 SHORT $LN12@draw_engin
$LN11@draw_engin:
  00604	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0060a	f3 0f 5a 81 14
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7700]
  00612	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  0061a	76 12		 jbe	 SHORT $LN9@draw_engin
  0061c	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  00624	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv247[ebp], xmm0
  0062c	eb 16		 jmp	 SHORT $LN10@draw_engin
$LN9@draw_engin:
  0062e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00634	f3 0f 5a 82 14
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7700]
  0063c	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv247[ebp], xmm0
$LN10@draw_engin:
  00644	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv247[ebp]
  0064c	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv248[ebp], xmm0
$LN12@draw_engin:
  00654	f2 0f 5a 85 54
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv248[ebp]
  0065c	f3 0f 11 45 9c	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 10232: 
; 10233: 	convert_float_to_int (fvalue, &ivalue);

  00661	8d 45 ac	 lea	 eax, DWORD PTR _ivalue$[ebp]
  00664	50		 push	 eax
  00665	51		 push	 ecx
  00666	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  0066b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00670	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 10234: 
; 10235: 	sprintf (s, "%03d", ivalue);

  00675	8b 45 ac	 mov	 eax, DWORD PTR _ivalue$[ebp]
  00678	50		 push	 eax
  00679	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  0067e	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00681	51		 push	 ecx
  00682	e8 00 00 00 00	 call	 _sprintf
  00687	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10236: 
; 10237: 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  0068a	51		 push	 ecx
  0068b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00693	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00698	51		 push	 ecx
  00699	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  006a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a6	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10238: 
; 10239: 	x_adjust = get_mono_font_string_width (s) * -0.5;

  006ab	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  006ae	50		 push	 eax
  006af	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  006b4	dd 9d 54 ff ff
	ff		 fstp	 QWORD PTR tv782[ebp]
  006ba	f2 0f 10 85 54
	ff ff ff	 movsd	 xmm0, QWORD PTR tv782[ebp]
  006c2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  006ca	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006ce	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10240: 
; 10241: 	set_mono_font_rel_position (x_adjust, 0.0);

  006d3	51		 push	 ecx
  006d4	0f 57 c0	 xorps	 xmm0, xmm0
  006d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006dc	51		 push	 ecx
  006dd	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  006e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006e7	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10242: 
; 10243: 	print_mono_font_string (s);

  006ec	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  006ef	50		 push	 eax
  006f0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10244: 
; 10245: 	////////////////////////////////////////
; 10246: 
; 10247: 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 120.0);

  006f5	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  006fa	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@405e000000000000
  00702	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00706	51		 push	 ecx
  00707	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0070c	51		 push	 ecx
  0070d	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  00712	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00717	51		 push	 ecx
  00718	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bec147ae
  00720	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00725	51		 push	 ecx
  00726	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0072e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00733	51		 push	 ecx
  00734	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bed851ec
  0073c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00741	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 10248: 
; 10249: 	#undef X_ORG
; 10250: 	#undef Y_ORG
; 10251: 	#undef WIDTH
; 10252: 	#undef HEIGHT
; 10253: 
; 10254: 	//
; 10255: 	// NG1
; 10256: 	//
; 10257: 
; 10258: 	#define X_ORG	((float) (-0.1708 - 0.4))
; 10259: 	#define Y_ORG	((float) (0.5))
; 10260: 	#define WIDTH	((float) (0.045))
; 10261: 	#define HEIGHT	((float) (1.0))
; 10262: 
; 10263: 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 10264: 	// as a constant as a function parameter will use a double (even though
; 10265: 	// definition is available and says const float), which causes later parameters
; 10266: 	// to be wrong
; 10267: 	bottom_edge = (Y_ORG - HEIGHT);

  00746	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0074e	f3 0f 11 45 a4	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 10268: 
; 10269: 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  00753	51		 push	 ecx
  00754	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  0075c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00761	51		 push	 ecx
  00762	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf121ff3
  0076a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0076f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10270: 
; 10271: 	x_adjust = get_mono_font_string_width ("NG") * -0.5;

  00774	68 00 00 00 00	 push	 OFFSET ??_C@_02MFICFPOF@NG@
  00779	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0077e	dd 9d 54 ff ff
	ff		 fstp	 QWORD PTR tv806[ebp]
  00784	f2 0f 10 85 54
	ff ff ff	 movsd	 xmm0, QWORD PTR tv806[ebp]
  0078c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00794	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00798	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10272: 
; 10273: 	set_mono_font_rel_position (x_adjust, 0.0);

  0079d	51		 push	 ecx
  0079e	0f 57 c0	 xorps	 xmm0, xmm0
  007a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a6	51		 push	 ecx
  007a7	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  007ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b1	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10274: 
; 10275: 	print_mono_font_string ("NG");

  007b6	68 00 00 00 00	 push	 OFFSET ??_C@_02MFICFPOF@NG@
  007bb	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10276: 
; 10277: 	////////////////////////////////////////
; 10278: 
; 10279: 	fvalue = bound (current_flight_dynamics->left_engine_n1_rpm.value, 0.0, 120.0);

  007c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  007c5	f3 0f 5a 80 94
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7316]
  007cd	0f 57 c9	 xorps	 xmm1, xmm1
  007d0	66 0f 2f c8	 comisd	 xmm1, xmm0
  007d4	76 0d		 jbe	 SHORT $LN15@draw_engin
  007d6	0f 57 c0	 xorps	 xmm0, xmm0
  007d9	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv295[ebp], xmm0
  007e1	eb 50		 jmp	 SHORT $LN16@draw_engin
$LN15@draw_engin:
  007e3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  007e9	f3 0f 5a 81 94
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7316]
  007f1	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  007f9	76 12		 jbe	 SHORT $LN13@draw_engin
  007fb	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  00803	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv294[ebp], xmm0
  0080b	eb 16		 jmp	 SHORT $LN14@draw_engin
$LN13@draw_engin:
  0080d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00813	f3 0f 5a 82 94
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7316]
  0081b	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv294[ebp], xmm0
$LN14@draw_engin:
  00823	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv294[ebp]
  0082b	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv295[ebp], xmm0
$LN16@draw_engin:
  00833	f2 0f 5a 85 54
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv295[ebp]
  0083b	f3 0f 11 45 9c	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 10280: 
; 10281: 	convert_float_to_int (fvalue, &ivalue);

  00840	8d 45 ac	 lea	 eax, DWORD PTR _ivalue$[ebp]
  00843	50		 push	 eax
  00844	51		 push	 ecx
  00845	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  0084a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0084f	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 10282: 
; 10283: 	sprintf (s, "%03d", ivalue);

  00854	8b 45 ac	 mov	 eax, DWORD PTR _ivalue$[ebp]
  00857	50		 push	 eax
  00858	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  0085d	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00860	51		 push	 ecx
  00861	e8 00 00 00 00	 call	 _sprintf
  00866	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10284: 
; 10285: 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  00869	51		 push	 ecx
  0086a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00872	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00877	51		 push	 ecx
  00878	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf121ff3
  00880	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00885	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10286: 
; 10287: 	x_adjust = get_mono_font_string_width (s) * -0.5;

  0088a	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  0088d	50		 push	 eax
  0088e	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00893	dd 9d 54 ff ff
	ff		 fstp	 QWORD PTR tv832[ebp]
  00899	f2 0f 10 85 54
	ff ff ff	 movsd	 xmm0, QWORD PTR tv832[ebp]
  008a1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  008a9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  008ad	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10288: 
; 10289: 	set_mono_font_rel_position (x_adjust, 0.0);

  008b2	51		 push	 ecx
  008b3	0f 57 c0	 xorps	 xmm0, xmm0
  008b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008bb	51		 push	 ecx
  008bc	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  008c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c6	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10290: 
; 10291: 	print_mono_font_string (s);

  008cb	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  008ce	50		 push	 eax
  008cf	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10292: 
; 10293: 	////////////////////////////////////////
; 10294: 
; 10295: 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 120.0);

  008d4	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  008d9	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@405e000000000000
  008e1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  008e5	51		 push	 ecx
  008e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008eb	51		 push	 ecx
  008ec	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  008f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f6	51		 push	 ecx
  008f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0c5d64
  008ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00904	51		 push	 ecx
  00905	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0090d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00912	51		 push	 ecx
  00913	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf17e282
  0091b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00920	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 10296: 
; 10297: 	#undef X_ORG
; 10298: 	#undef Y_ORG
; 10299: 	#undef WIDTH
; 10300: 	#undef HEIGHT
; 10301: 
; 10302: 	//
; 10303: 	// NG2
; 10304: 	//
; 10305: 
; 10306: 	#define X_ORG	((float) (0.1708 - 0.4))
; 10307: 	#define Y_ORG	((float) (0.5))
; 10308: 	#define WIDTH	((float) (0.045))
; 10309: 	#define HEIGHT	((float) (1.0))
; 10310: 
; 10311: 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 10312: 	// as a constant as a function parameter will use a double (even though
; 10313: 	// definition is available and says const float), which causes later parameters
; 10314: 	// to be wrong
; 10315: 	bottom_edge = (Y_ORG - HEIGHT);

  00925	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0092d	f3 0f 11 45 a4	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 10316: 
; 10317: 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  00932	51		 push	 ecx
  00933	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  0093b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00940	51		 push	 ecx
  00941	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be6ab368
  00949	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0094e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10318: 
; 10319: 	x_adjust = get_mono_font_string_width ("NG") * -0.5;

  00953	68 00 00 00 00	 push	 OFFSET ??_C@_02MFICFPOF@NG@
  00958	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0095d	dd 9d 54 ff ff
	ff		 fstp	 QWORD PTR tv856[ebp]
  00963	f2 0f 10 85 54
	ff ff ff	 movsd	 xmm0, QWORD PTR tv856[ebp]
  0096b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00973	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00977	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10320: 
; 10321: 	set_mono_font_rel_position (x_adjust, 0.0);

  0097c	51		 push	 ecx
  0097d	0f 57 c0	 xorps	 xmm0, xmm0
  00980	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00985	51		 push	 ecx
  00986	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0098b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00990	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10322: 
; 10323: 	print_mono_font_string ("NG");

  00995	68 00 00 00 00	 push	 OFFSET ??_C@_02MFICFPOF@NG@
  0099a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10324: 
; 10325: 	////////////////////////////////////////
; 10326: 
; 10327: 	fvalue = bound (current_flight_dynamics->right_engine_n1_rpm.value, 0.0, 120.0);

  0099f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  009a4	f3 0f 5a 80 f4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7412]
  009ac	0f 57 c9	 xorps	 xmm1, xmm1
  009af	66 0f 2f c8	 comisd	 xmm1, xmm0
  009b3	76 0d		 jbe	 SHORT $LN19@draw_engin
  009b5	0f 57 c0	 xorps	 xmm0, xmm0
  009b8	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv342[ebp], xmm0
  009c0	eb 50		 jmp	 SHORT $LN20@draw_engin
$LN19@draw_engin:
  009c2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  009c8	f3 0f 5a 81 f4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7412]
  009d0	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  009d8	76 12		 jbe	 SHORT $LN17@draw_engin
  009da	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  009e2	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv341[ebp], xmm0
  009ea	eb 16		 jmp	 SHORT $LN18@draw_engin
$LN17@draw_engin:
  009ec	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  009f2	f3 0f 5a 82 f4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7412]
  009fa	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv341[ebp], xmm0
$LN18@draw_engin:
  00a02	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv341[ebp]
  00a0a	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv342[ebp], xmm0
$LN20@draw_engin:
  00a12	f2 0f 5a 85 54
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv342[ebp]
  00a1a	f3 0f 11 45 9c	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 10328: 
; 10329: 	convert_float_to_int (fvalue, &ivalue);

  00a1f	8d 45 ac	 lea	 eax, DWORD PTR _ivalue$[ebp]
  00a22	50		 push	 eax
  00a23	51		 push	 ecx
  00a24	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  00a29	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a2e	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 10330: 
; 10331: 	sprintf (s, "%03d", ivalue);

  00a33	8b 45 ac	 mov	 eax, DWORD PTR _ivalue$[ebp]
  00a36	50		 push	 eax
  00a37	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  00a3c	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00a3f	51		 push	 ecx
  00a40	e8 00 00 00 00	 call	 _sprintf
  00a45	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10332: 
; 10333: 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  00a48	51		 push	 ecx
  00a49	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00a51	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a56	51		 push	 ecx
  00a57	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be6ab368
  00a5f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a64	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10334: 
; 10335: 	x_adjust = get_mono_font_string_width (s) * -0.5;

  00a69	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00a6c	50		 push	 eax
  00a6d	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00a72	dd 9d 54 ff ff
	ff		 fstp	 QWORD PTR tv882[ebp]
  00a78	f2 0f 10 85 54
	ff ff ff	 movsd	 xmm0, QWORD PTR tv882[ebp]
  00a80	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00a88	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a8c	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10336: 
; 10337: 	set_mono_font_rel_position (x_adjust, 0.0);

  00a91	51		 push	 ecx
  00a92	0f 57 c0	 xorps	 xmm0, xmm0
  00a95	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a9a	51		 push	 ecx
  00a9b	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00aa0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa5	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10338: 
; 10339: 	print_mono_font_string (s);

  00aaa	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00aad	50		 push	 eax
  00aae	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10340: 
; 10341: 	////////////////////////////////////////
; 10342: 
; 10343: 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 120.0);

  00ab3	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  00ab8	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@405e000000000000
  00ac0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ac4	51		 push	 ecx
  00ac5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aca	51		 push	 ecx
  00acb	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  00ad0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ad5	51		 push	 ecx
  00ad6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be53a92a
  00ade	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ae3	51		 push	 ecx
  00ae4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00aec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00af1	51		 push	 ecx
  00af2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be80ded3
  00afa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aff	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 10344: 
; 10345: 	#undef X_ORG
; 10346: 	#undef Y_ORG
; 10347: 	#undef WIDTH
; 10348: 	#undef HEIGHT
; 10349: 
; 10350: 	//
; 10351: 	// TQ1
; 10352: 	//
; 10353: 
; 10354: 	#define X_ORG	((float) (-0.3417 - 0.4))
; 10355: 	#define Y_ORG	((float) (0.5))
; 10356: 	#define WIDTH	((float) (0.045))
; 10357: 	#define HEIGHT	((float) (1.0))
; 10358: 
; 10359: 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 10360: 	// as a constant as a function parameter will use a double (even though
; 10361: 	// definition is available and says const float), which causes later parameters
; 10362: 	// to be wrong
; 10363: 	bottom_edge = (Y_ORG - HEIGHT);

  00b04	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00b0c	f3 0f 11 45 a4	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 10364: 
; 10365: 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  00b11	51		 push	 ecx
  00b12	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00b1a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b1f	51		 push	 ecx
  00b20	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3de00d
  00b28	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b2d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10366: 
; 10367: 	x_adjust = get_mono_font_string_width ("TQ") * -0.5;

  00b32	68 00 00 00 00	 push	 OFFSET ??_C@_02MIKLMMJE@TQ@
  00b37	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00b3c	dd 9d 54 ff ff
	ff		 fstp	 QWORD PTR tv906[ebp]
  00b42	f2 0f 10 85 54
	ff ff ff	 movsd	 xmm0, QWORD PTR tv906[ebp]
  00b4a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00b52	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b56	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10368: 
; 10369: 	set_mono_font_rel_position (x_adjust, 0.0);

  00b5b	51		 push	 ecx
  00b5c	0f 57 c0	 xorps	 xmm0, xmm0
  00b5f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b64	51		 push	 ecx
  00b65	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00b6a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b6f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10370: 
; 10371: 	print_mono_font_string ("TQ");

  00b74	68 00 00 00 00	 push	 OFFSET ??_C@_02MIKLMMJE@TQ@
  00b79	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10372: 
; 10373: 	////////////////////////////////////////
; 10374: 
; 10375: 	fvalue = bound (current_flight_dynamics->left_engine_torque.value, 0.0, 120.0);

  00b7e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00b83	f3 0f 5a 80 ac
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7340]
  00b8b	0f 57 c9	 xorps	 xmm1, xmm1
  00b8e	66 0f 2f c8	 comisd	 xmm1, xmm0
  00b92	76 0d		 jbe	 SHORT $LN23@draw_engin
  00b94	0f 57 c0	 xorps	 xmm0, xmm0
  00b97	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv389[ebp], xmm0
  00b9f	eb 50		 jmp	 SHORT $LN24@draw_engin
$LN23@draw_engin:
  00ba1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00ba7	f3 0f 5a 81 ac
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7340]
  00baf	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  00bb7	76 12		 jbe	 SHORT $LN21@draw_engin
  00bb9	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  00bc1	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv388[ebp], xmm0
  00bc9	eb 16		 jmp	 SHORT $LN22@draw_engin
$LN21@draw_engin:
  00bcb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00bd1	f3 0f 5a 82 ac
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7340]
  00bd9	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv388[ebp], xmm0
$LN22@draw_engin:
  00be1	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv388[ebp]
  00be9	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv389[ebp], xmm0
$LN24@draw_engin:
  00bf1	f2 0f 5a 85 54
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv389[ebp]
  00bf9	f3 0f 11 45 9c	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 10376: 
; 10377: 	convert_float_to_int (fvalue, &ivalue);

  00bfe	8d 45 ac	 lea	 eax, DWORD PTR _ivalue$[ebp]
  00c01	50		 push	 eax
  00c02	51		 push	 ecx
  00c03	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  00c08	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c0d	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 10378: 
; 10379: 	sprintf (s, "%03d", ivalue);

  00c12	8b 45 ac	 mov	 eax, DWORD PTR _ivalue$[ebp]
  00c15	50		 push	 eax
  00c16	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  00c1b	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00c1e	51		 push	 ecx
  00c1f	e8 00 00 00 00	 call	 _sprintf
  00c24	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10380: 
; 10381: 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  00c27	51		 push	 ecx
  00c28	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00c30	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c35	51		 push	 ecx
  00c36	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3de00d
  00c3e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c43	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10382: 
; 10383: 	x_adjust = get_mono_font_string_width (s) * -0.5;

  00c48	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00c4b	50		 push	 eax
  00c4c	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00c51	dd 9d 54 ff ff
	ff		 fstp	 QWORD PTR tv932[ebp]
  00c57	f2 0f 10 85 54
	ff ff ff	 movsd	 xmm0, QWORD PTR tv932[ebp]
  00c5f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00c67	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c6b	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10384: 
; 10385: 	set_mono_font_rel_position (x_adjust, 0.0);

  00c70	51		 push	 ecx
  00c71	0f 57 c0	 xorps	 xmm0, xmm0
  00c74	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c79	51		 push	 ecx
  00c7a	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00c7f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c84	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10386: 
; 10387: 	print_mono_font_string (s);

  00c89	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00c8c	50		 push	 eax
  00c8d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10388: 
; 10389: 	////////////////////////////////////////
; 10390: 
; 10391: 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 120.0);

  00c92	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  00c97	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@405e000000000000
  00c9f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ca3	51		 push	 ecx
  00ca4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ca9	51		 push	 ecx
  00caa	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  00caf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cb4	51		 push	 ecx
  00cb5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf381d7e
  00cbd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cc2	51		 push	 ecx
  00cc3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00ccb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cd0	51		 push	 ecx
  00cd1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf43a29c
  00cd9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cde	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 10392: 
; 10393: 	#undef X_ORG
; 10394: 	#undef Y_ORG
; 10395: 	#undef WIDTH
; 10396: 	#undef HEIGHT
; 10397: 
; 10398: 	//
; 10399: 	// TQ2
; 10400: 	//
; 10401: 
; 10402: 	#define X_ORG	((float) (0.3417 - 0.4))
; 10403: 	#define Y_ORG	((float) (0.5))
; 10404: 	#define WIDTH	((float) (0.045))
; 10405: 	#define HEIGHT	((float) (1.0))
; 10406: 
; 10407: 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 10408: 	// as a constant as a function parameter will use a double (even though
; 10409: 	// definition is available and says const float), which causes later parameters
; 10410: 	// to be wrong
; 10411: 	bottom_edge = (Y_ORG - HEIGHT);

  00ce3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00ceb	f3 0f 11 45 a4	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 10412: 
; 10413: 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  00cf0	51		 push	 ecx
  00cf1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00cf9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cfe	51		 push	 ecx
  00cff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd6ecbfb
  00d07	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d0c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10414: 
; 10415: 	x_adjust = get_mono_font_string_width ("TQ") * -0.5;

  00d11	68 00 00 00 00	 push	 OFFSET ??_C@_02MIKLMMJE@TQ@
  00d16	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00d1b	dd 9d 54 ff ff
	ff		 fstp	 QWORD PTR tv956[ebp]
  00d21	f2 0f 10 85 54
	ff ff ff	 movsd	 xmm0, QWORD PTR tv956[ebp]
  00d29	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00d31	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00d35	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10416: 
; 10417: 	set_mono_font_rel_position (x_adjust, 0.0);

  00d3a	51		 push	 ecx
  00d3b	0f 57 c0	 xorps	 xmm0, xmm0
  00d3e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d43	51		 push	 ecx
  00d44	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00d49	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d4e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10418: 
; 10419: 	print_mono_font_string ("TQ");

  00d53	68 00 00 00 00	 push	 OFFSET ??_C@_02MIKLMMJE@TQ@
  00d58	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10420: 
; 10421: 	////////////////////////////////////////
; 10422: 
; 10423: 	fvalue = bound (current_flight_dynamics->right_engine_torque.value, 0.0, 120.0);

  00d5d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00d62	f3 0f 5a 80 0c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7436]
  00d6a	0f 57 c9	 xorps	 xmm1, xmm1
  00d6d	66 0f 2f c8	 comisd	 xmm1, xmm0
  00d71	76 0d		 jbe	 SHORT $LN27@draw_engin
  00d73	0f 57 c0	 xorps	 xmm0, xmm0
  00d76	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv436[ebp], xmm0
  00d7e	eb 50		 jmp	 SHORT $LN28@draw_engin
$LN27@draw_engin:
  00d80	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00d86	f3 0f 5a 81 0c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7436]
  00d8e	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  00d96	76 12		 jbe	 SHORT $LN25@draw_engin
  00d98	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  00da0	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv435[ebp], xmm0
  00da8	eb 16		 jmp	 SHORT $LN26@draw_engin
$LN25@draw_engin:
  00daa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00db0	f3 0f 5a 82 0c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7436]
  00db8	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv435[ebp], xmm0
$LN26@draw_engin:
  00dc0	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv435[ebp]
  00dc8	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv436[ebp], xmm0
$LN28@draw_engin:
  00dd0	f2 0f 5a 85 54
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv436[ebp]
  00dd8	f3 0f 11 45 9c	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 10424: 
; 10425: 	convert_float_to_int (fvalue, &ivalue);

  00ddd	8d 45 ac	 lea	 eax, DWORD PTR _ivalue$[ebp]
  00de0	50		 push	 eax
  00de1	51		 push	 ecx
  00de2	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  00de7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dec	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 10426: 
; 10427: 	sprintf (s, "%03d", ivalue);

  00df1	8b 45 ac	 mov	 eax, DWORD PTR _ivalue$[ebp]
  00df4	50		 push	 eax
  00df5	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  00dfa	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00dfd	51		 push	 ecx
  00dfe	e8 00 00 00 00	 call	 _sprintf
  00e03	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10428: 
; 10429: 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  00e06	51		 push	 ecx
  00e07	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00e0f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e14	51		 push	 ecx
  00e15	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd6ecbfb
  00e1d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e22	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10430: 
; 10431: 	x_adjust = get_mono_font_string_width (s) * -0.5;

  00e27	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00e2a	50		 push	 eax
  00e2b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00e30	dd 9d 54 ff ff
	ff		 fstp	 QWORD PTR tv982[ebp]
  00e36	f2 0f 10 85 54
	ff ff ff	 movsd	 xmm0, QWORD PTR tv982[ebp]
  00e3e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00e46	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00e4a	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10432: 
; 10433: 	set_mono_font_rel_position (x_adjust, 0.0);

  00e4f	51		 push	 ecx
  00e50	0f 57 c0	 xorps	 xmm0, xmm0
  00e53	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e58	51		 push	 ecx
  00e59	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00e5e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e63	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10434: 
; 10435: 	print_mono_font_string (s);

  00e68	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00e6b	50		 push	 eax
  00e6c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10436: 
; 10437: 	////////////////////////////////////////
; 10438: 
; 10439: 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 120.0);

  00e71	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  00e76	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@405e000000000000
  00e7e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00e82	51		 push	 ecx
  00e83	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e88	51		 push	 ecx
  00e89	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  00e8e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e93	51		 push	 ecx
  00e94	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd12a305
  00e9c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ea1	51		 push	 ecx
  00ea2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00eaa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eaf	51		 push	 ecx
  00eb0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda57a78
  00eb8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ebd	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 10440: 
; 10441: 	#undef X_ORG
; 10442: 	#undef Y_ORG
; 10443: 	#undef WIDTH
; 10444: 	#undef HEIGHT
; 10445: 
; 10446: 	//
; 10447: 	// TGT1
; 10448: 	//
; 10449: 
; 10450: 	#define X_ORG	((float) (-0.5125 - 0.4))
; 10451: 	#define Y_ORG	((float) (0.5))
; 10452: 	#define WIDTH	((float) (0.045))
; 10453: 	#define HEIGHT	((float) (0.8333))
; 10454: 
; 10455: 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 10456: 	// as a constant as a function parameter will use a double (even though
; 10457: 	// definition is available and says const float), which causes later parameters
; 10458: 	// to be wrong
; 10459: 	bottom_edge = (Y_ORG - HEIGHT);

  00ec2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beaaa64c
  00eca	f3 0f 11 45 a4	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 10460: 
; 10461: 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  00ecf	51		 push	 ecx
  00ed0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00ed8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00edd	51		 push	 ecx
  00ede	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf69999a
  00ee6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eeb	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10462: 
; 10463: 	x_adjust = get_mono_font_string_width ("TG") * -0.5;

  00ef0	68 00 00 00 00	 push	 OFFSET ??_C@_02NEDDHJED@TG@
  00ef5	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00efa	dd 9d 54 ff ff
	ff		 fstp	 QWORD PTR tv1006[ebp]
  00f00	f2 0f 10 85 54
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1006[ebp]
  00f08	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00f10	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00f14	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10464: 
; 10465: 	set_mono_font_rel_position (x_adjust, 0.0);

  00f19	51		 push	 ecx
  00f1a	0f 57 c0	 xorps	 xmm0, xmm0
  00f1d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f22	51		 push	 ecx
  00f23	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00f28	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f2d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10466: 
; 10467: 	print_mono_font_string ("TG");

  00f32	68 00 00 00 00	 push	 OFFSET ??_C@_02NEDDHJED@TG@
  00f37	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10468: 
; 10469: 	////////////////////////////////////////
; 10470: 
; 10471: 	fvalue = bound (current_flight_dynamics->left_engine_temp.value, 0.0, 999.0);

  00f3c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00f41	f3 0f 5a 80 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7364]
  00f49	0f 57 c9	 xorps	 xmm1, xmm1
  00f4c	66 0f 2f c8	 comisd	 xmm1, xmm0
  00f50	76 0d		 jbe	 SHORT $LN31@draw_engin
  00f52	0f 57 c0	 xorps	 xmm0, xmm0
  00f55	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv483[ebp], xmm0
  00f5d	eb 50		 jmp	 SHORT $LN32@draw_engin
$LN31@draw_engin:
  00f5f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00f65	f3 0f 5a 81 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7364]
  00f6d	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@408f380000000000
  00f75	76 12		 jbe	 SHORT $LN29@draw_engin
  00f77	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@408f380000000000
  00f7f	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv482[ebp], xmm0
  00f87	eb 16		 jmp	 SHORT $LN30@draw_engin
$LN29@draw_engin:
  00f89	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00f8f	f3 0f 5a 82 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7364]
  00f97	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv482[ebp], xmm0
$LN30@draw_engin:
  00f9f	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv482[ebp]
  00fa7	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv483[ebp], xmm0
$LN32@draw_engin:
  00faf	f2 0f 5a 85 54
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv483[ebp]
  00fb7	f3 0f 11 45 9c	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 10472: 
; 10473: 	convert_float_to_int (fvalue, &ivalue);

  00fbc	8d 45 ac	 lea	 eax, DWORD PTR _ivalue$[ebp]
  00fbf	50		 push	 eax
  00fc0	51		 push	 ecx
  00fc1	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  00fc6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fcb	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 10474: 
; 10475: 	sprintf (s, "%03d", ivalue);

  00fd0	8b 45 ac	 mov	 eax, DWORD PTR _ivalue$[ebp]
  00fd3	50		 push	 eax
  00fd4	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  00fd9	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00fdc	51		 push	 ecx
  00fdd	e8 00 00 00 00	 call	 _sprintf
  00fe2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10476: 
; 10477: 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  00fe5	51		 push	 ecx
  00fe6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00fee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ff3	51		 push	 ecx
  00ff4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf69999a
  00ffc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01001	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10478: 
; 10479: 	x_adjust = get_mono_font_string_width (s) * -0.5;

  01006	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01009	50		 push	 eax
  0100a	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0100f	dd 9d 54 ff ff
	ff		 fstp	 QWORD PTR tv1032[ebp]
  01015	f2 0f 10 85 54
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1032[ebp]
  0101d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01025	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01029	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10480: 
; 10481: 	set_mono_font_rel_position (x_adjust, 0.0);

  0102e	51		 push	 ecx
  0102f	0f 57 c0	 xorps	 xmm0, xmm0
  01032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01037	51		 push	 ecx
  01038	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0103d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01042	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10482: 
; 10483: 	print_mono_font_string (s);

  01047	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  0104a	50		 push	 eax
  0104b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10484: 
; 10485: 	////////////////////////////////////////
; 10486: 
; 10487: 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 1000.0);

  01050	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  01055	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@408f400000000000
  0105d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01061	51		 push	 ecx
  01062	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01067	51		 push	 ecx
  01068	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  0106d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01072	51		 push	 ecx
  01073	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf63d70b
  0107b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01080	51		 push	 ecx
  01081	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  01089	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0108e	51		 push	 ecx
  0108f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6f5c29
  01097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0109c	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 10488: 
; 10489: 	#undef X_ORG
; 10490: 	#undef Y_ORG
; 10491: 	#undef WIDTH
; 10492: 	#undef HEIGHT
; 10493: 
; 10494: 	//
; 10495: 	// TGT2
; 10496: 	//
; 10497: 
; 10498: 	#define X_ORG	((float) (0.5125 - 0.4))
; 10499: 	#define Y_ORG	((float) (0.5))
; 10500: 	#define WIDTH	((float) (0.045))
; 10501: 	#define HEIGHT	((float) (0.8333))
; 10502: 
; 10503: 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 10504: 	// as a constant as a function parameter will use a double (even though
; 10505: 	// definition is available and says const float), which causes later parameters
; 10506: 	// to be wrong
; 10507: 	bottom_edge = (Y_ORG - HEIGHT);

  010a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beaaa64c
  010a9	f3 0f 11 45 a4	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 10508: 
; 10509: 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  010ae	51		 push	 ecx
  010af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  010b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010bc	51		 push	 ecx
  010bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3de66666
  010c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010ca	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10510: 
; 10511: 	x_adjust = get_mono_font_string_width ("TG") * -0.5;

  010cf	68 00 00 00 00	 push	 OFFSET ??_C@_02NEDDHJED@TG@
  010d4	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  010d9	dd 9d 54 ff ff
	ff		 fstp	 QWORD PTR tv1056[ebp]
  010df	f2 0f 10 85 54
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1056[ebp]
  010e7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  010ef	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  010f3	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10512: 
; 10513: 	set_mono_font_rel_position (x_adjust, 0.0);

  010f8	51		 push	 ecx
  010f9	0f 57 c0	 xorps	 xmm0, xmm0
  010fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01101	51		 push	 ecx
  01102	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01107	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0110c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10514: 
; 10515: 	print_mono_font_string ("TG");

  01111	68 00 00 00 00	 push	 OFFSET ??_C@_02NEDDHJED@TG@
  01116	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10516: 
; 10517: 	////////////////////////////////////////
; 10518: 
; 10519: 	fvalue = bound (current_flight_dynamics->right_engine_temp.value, 0.0, 999.0);

  0111b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01120	f3 0f 5a 80 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7460]
  01128	0f 57 c9	 xorps	 xmm1, xmm1
  0112b	66 0f 2f c8	 comisd	 xmm1, xmm0
  0112f	76 0d		 jbe	 SHORT $LN35@draw_engin
  01131	0f 57 c0	 xorps	 xmm0, xmm0
  01134	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv530[ebp], xmm0
  0113c	eb 50		 jmp	 SHORT $LN36@draw_engin
$LN35@draw_engin:
  0113e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01144	f3 0f 5a 81 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7460]
  0114c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@408f380000000000
  01154	76 12		 jbe	 SHORT $LN33@draw_engin
  01156	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@408f380000000000
  0115e	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv529[ebp], xmm0
  01166	eb 16		 jmp	 SHORT $LN34@draw_engin
$LN33@draw_engin:
  01168	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0116e	f3 0f 5a 82 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7460]
  01176	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv529[ebp], xmm0
$LN34@draw_engin:
  0117e	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv529[ebp]
  01186	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv530[ebp], xmm0
$LN36@draw_engin:
  0118e	f2 0f 5a 85 54
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv530[ebp]
  01196	f3 0f 11 45 9c	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 10520: 
; 10521: 	convert_float_to_int (fvalue, &ivalue);

  0119b	8d 45 ac	 lea	 eax, DWORD PTR _ivalue$[ebp]
  0119e	50		 push	 eax
  0119f	51		 push	 ecx
  011a0	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  011a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011aa	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 10522: 
; 10523: 	sprintf (s, "%03d", ivalue);

  011af	8b 45 ac	 mov	 eax, DWORD PTR _ivalue$[ebp]
  011b2	50		 push	 eax
  011b3	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  011b8	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  011bb	51		 push	 ecx
  011bc	e8 00 00 00 00	 call	 _sprintf
  011c1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10524: 
; 10525: 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  011c4	51		 push	 ecx
  011c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  011cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011d2	51		 push	 ecx
  011d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3de66666
  011db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011e0	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10526: 
; 10527: 	x_adjust = get_mono_font_string_width (s) * -0.5;

  011e5	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  011e8	50		 push	 eax
  011e9	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  011ee	dd 9d 54 ff ff
	ff		 fstp	 QWORD PTR tv1082[ebp]
  011f4	f2 0f 10 85 54
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1082[ebp]
  011fc	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01204	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01208	f3 0f 11 45 a0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10528: 
; 10529: 	set_mono_font_rel_position (x_adjust, 0.0);

  0120d	51		 push	 ecx
  0120e	0f 57 c0	 xorps	 xmm0, xmm0
  01211	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01216	51		 push	 ecx
  01217	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0121c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01221	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10530: 
; 10531: 	print_mono_font_string (s);

  01226	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01229	50		 push	 eax
  0122a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10532: 
; 10533: 	////////////////////////////////////////
; 10534: 
; 10535: 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 1000.0);

  0122f	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  01234	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@408f400000000000
  0123c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01240	51		 push	 ecx
  01241	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01246	51		 push	 ecx
  01247	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  0124c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01251	51		 push	 ecx
  01252	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0a3d70
  0125a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0125f	51		 push	 ecx
  01260	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  01268	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0126d	51		 push	 ecx
  0126e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db851eb
  01276	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0127b	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 10536: 
; 10537: 	#undef X_ORG
; 10538: 	#undef Y_ORG
; 10539: 	#undef WIDTH
; 10540: 	#undef HEIGHT
; 10541: }

  01280	5f		 pop	 edi
  01281	5e		 pop	 esi
  01282	5b		 pop	 ebx
  01283	8b e5		 mov	 esp, ebp
  01285	5d		 pop	 ebp
  01286	c3		 ret	 0
?draw_engine_display_side_mfd@@YGXXZ ENDP		; draw_engine_display_side_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_engine_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv726 = -188						; size = 8
tv679 = -188						; size = 8
tv632 = -188						; size = 8
tv585 = -188						; size = 8
tv538 = -188						; size = 8
tv491 = -188						; size = 8
tv444 = -188						; size = 8
tv397 = -188						; size = 8
tv350 = -188						; size = 8
tv264 = -188						; size = 8
tv216 = -188						; size = 8
tv183 = -188						; size = 8
tv146 = -188						; size = 8
tv1467 = -180						; size = 8
tv1441 = -180						; size = 8
tv1417 = -180						; size = 8
tv1391 = -180						; size = 8
tv1367 = -180						; size = 8
tv1341 = -180						; size = 8
tv1317 = -180						; size = 8
tv1291 = -180						; size = 8
tv1267 = -180						; size = 8
tv1241 = -180						; size = 8
tv1217 = -180						; size = 8
tv1191 = -180						; size = 8
tv1167 = -180						; size = 8
tv1141 = -180						; size = 8
tv1117 = -180						; size = 8
tv1091 = -180						; size = 8
tv1067 = -180						; size = 8
tv1041 = -180						; size = 8
tv929 = -180						; size = 8
tv877 = -180						; size = 8
tv863 = -180						; size = 8
tv830 = -180						; size = 8
tv727 = -180						; size = 8
tv680 = -180						; size = 8
tv633 = -180						; size = 8
tv586 = -180						; size = 8
tv539 = -180						; size = 8
tv492 = -180						; size = 8
tv445 = -180						; size = 8
tv398 = -180						; size = 8
tv351 = -180						; size = 8
tv265 = -180						; size = 8
tv217 = -180						; size = 8
tv184 = -180						; size = 8
tv147 = -180						; size = 8
tv817 = -176						; size = 4
_fvalue$ = -108						; size = 4
_x_adjust$ = -104					; size = 4
_bottom_edge$ = -100					; size = 4
_ivalue$ = -96						; size = 4
_s2$ = -92						; size = 10
_s$ = -80						; size = 80
?draw_engine_display_mfd@@YGXXZ PROC			; draw_engine_display_mfd, COMDAT

; 9537 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 9538 : 	char
; 9539 : 		s[80], s2[10];
; 9540 : 
; 9541 : 	int
; 9542 : 		ivalue;
; 9543 : 
; 9544 : 	float
; 9545 : 		bottom_edge,
; 9546 : 		x_adjust,
; 9547 : 		fvalue;
; 9548 : 
; 9549 : 	set_mono_font_colour (MFD_COLOUR1);

  0000c	b8 04 00 00 00	 mov	 eax, 4
  00011	6b c8 00	 imul	 ecx, eax, 0
  00014	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 9550 : 
; 9551 : 	if (draw_large_mfd)

  00020	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00027	74 09		 je	 SHORT $LN2@draw_engin

; 9552 : 	{
; 9553 : 		set_mono_font_type (MONO_FONT_TYPE_6X10);

  00029	6a 04		 push	 4
  0002b	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 9554 : 	}
; 9555 : 	else

  00030	eb 07		 jmp	 SHORT $LN3@draw_engin
$LN2@draw_engin:

; 9556 : 	{
; 9557 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  00032	6a 00		 push	 0
  00034	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN3@draw_engin:

; 9558 : 	}
; 9559 : 
; 9560 : 	////////////////////////////////////////
; 9561 : 
; 9562 : 	set_2d_mono_font_position (-0.8, 0.9);

  00039	51		 push	 ecx
  0003a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  00042	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00047	51		 push	 ecx
  00048	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00050	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00055	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9563 : 
; 9564 : 	set_mono_font_rel_position (1.0, 0.0);

  0005a	51		 push	 ecx
  0005b	0f 57 c0	 xorps	 xmm0, xmm0
  0005e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00063	51		 push	 ecx
  00064	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9565 : 
; 9566 : 	print_mono_font_string ("L ENGINE");

  00076	68 00 00 00 00	 push	 OFFSET ??_C@_08ICMALC@L?5ENGINE@
  0007b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9567 : 
; 9568 : 	set_2d_mono_font_position (0.8, 0.9);

  00080	51		 push	 ecx
  00081	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  00089	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008e	51		 push	 ecx
  0008f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9569 : 
; 9570 : 	x_adjust = -get_mono_font_string_width ("R ENGINE");

  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_08GEIAFJFB@R?5ENGINE@
  000a6	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  000ab	d9 9d 50 ff ff
	ff		 fstp	 DWORD PTR tv817[ebp]
  000b1	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR tv817[ebp]
  000b9	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000c0	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 9571 : 
; 9572 : 	set_mono_font_rel_position (x_adjust, 0.0);

  000c5	51		 push	 ecx
  000c6	0f 57 c0	 xorps	 xmm0, xmm0
  000c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ce	51		 push	 ecx
  000cf	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  000d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d9	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9573 : 
; 9574 : 	print_mono_font_string ("R ENGINE");

  000de	68 00 00 00 00	 push	 OFFSET ??_C@_08GEIAFJFB@R?5ENGINE@
  000e3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9575 : 
; 9576 : 	////////////////////////////////////////
; 9577 : 
; 9578 : 	set_2d_mono_font_position (-0.7, -0.6);

  000e8	51		 push	 ecx
  000e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  000f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f6	51		 push	 ecx
  000f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  000ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00104	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9579 : 
; 9580 : 	x_adjust = get_mono_font_string_width ("FUEL QTY") * -0.5;

  00109	68 00 00 00 00	 push	 OFFSET ??_C@_08HFKNNLAF@FUEL?5QTY@
  0010e	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00113	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv830[ebp]
  00119	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv830[ebp]
  00121	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00129	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0012d	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 9581 : 
; 9582 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00132	51		 push	 ecx
  00133	0f 57 c0	 xorps	 xmm0, xmm0
  00136	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013b	51		 push	 ecx
  0013c	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00141	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00146	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9583 : 
; 9584 : 	print_mono_font_string ("FUEL QTY");

  0014b	68 00 00 00 00	 push	 OFFSET ??_C@_08HFKNNLAF@FUEL?5QTY@
  00150	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9585 : 
; 9586 : 	set_2d_mono_font_position (-0.7, -0.7);

  00155	51		 push	 ecx
  00156	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  0015e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00163	51		 push	 ecx
  00164	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  0016c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00171	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9587 : 
; 9588 : /*	x_adjust = get_mono_font_string_width ("LB") * -0.5;
; 9589 : 
; 9590 : 	set_mono_font_rel_position (x_adjust, 0.0);
; 9591 : 
; 9592 : 	print_mono_font_string ("LB"); */
; 9593 : 
; 9594 : 	set_2d_mono_font_position (-0.7, -0.7);

  00176	51		 push	 ecx
  00177	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  0017f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00184	51		 push	 ecx
  00185	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  0018d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00192	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9595 : 
; 9596 : 	fvalue = bound (kilograms_to_pounds (current_flight_dynamics->fuel_weight.value), 0.0, 9999.0);

  00197	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0019c	f3 0f 10 80 a4
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9380]
  001a4	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  001ac	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001b0	0f 57 c9	 xorps	 xmm1, xmm1
  001b3	66 0f 2f c8	 comisd	 xmm1, xmm0
  001b7	76 0d		 jbe	 SHORT $LN19@draw_engin
  001b9	0f 57 c0	 xorps	 xmm0, xmm0
  001bc	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv147[ebp], xmm0
  001c4	eb 68		 jmp	 SHORT $LN20@draw_engin
$LN19@draw_engin:
  001c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  001cc	f3 0f 10 81 a4
	24 00 00	 movss	 xmm0, DWORD PTR [ecx+9380]
  001d4	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  001dc	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001e0	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@40c3878000000000
  001e8	76 12		 jbe	 SHORT $LN17@draw_engin
  001ea	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@40c3878000000000
  001f2	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv146[ebp], xmm0
  001fa	eb 22		 jmp	 SHORT $LN18@draw_engin
$LN17@draw_engin:
  001fc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00202	f3 0f 10 82 a4
	24 00 00	 movss	 xmm0, DWORD PTR [edx+9380]
  0020a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  00212	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00216	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv146[ebp], xmm0
$LN18@draw_engin:
  0021e	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv146[ebp]
  00226	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv147[ebp], xmm0
$LN20@draw_engin:
  0022e	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv147[ebp]
  00236	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 9597 : 
; 9598 : 	convert_float_to_int (fvalue, &ivalue);

  0023b	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  0023e	50		 push	 eax
  0023f	51		 push	 ecx
  00240	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  00245	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024a	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 9599 : 
; 9600 : 	sprintf (s, "%04d lb", ivalue);

  0024f	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  00252	50		 push	 eax
  00253	68 00 00 00 00	 push	 OFFSET ??_C@_07MGEFOJJP@?$CF04d?5lb@
  00258	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  0025b	51		 push	 ecx
  0025c	e8 00 00 00 00	 call	 _sprintf
  00261	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9601 : 
; 9602 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  00264	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00267	50		 push	 eax
  00268	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0026d	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv863[ebp]
  00273	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv863[ebp]
  0027b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00283	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00287	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 9603 : 
; 9604 : 	set_mono_font_rel_position (x_adjust, 0.0);

  0028c	51		 push	 ecx
  0028d	0f 57 c0	 xorps	 xmm0, xmm0
  00290	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00295	51		 push	 ecx
  00296	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0029b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a0	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9605 : 
; 9606 : 	print_mono_font_string (s);

  002a5	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  002a8	50		 push	 eax
  002a9	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9607 : 
; 9608 : 	////////////////////////////////////////
; 9609 : 
; 9610 : 	set_2d_mono_font_position (0.0, -0.6);

  002ae	51		 push	 ecx
  002af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  002b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002bc	51		 push	 ecx
  002bd	0f 57 c0	 xorps	 xmm0, xmm0
  002c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c5	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9611 : 
; 9612 : 	x_adjust = get_mono_font_string_width ("THROTTLE") * -0.5;

  002ca	68 00 00 00 00	 push	 OFFSET ??_C@_08PLAGFMEO@THROTTLE@
  002cf	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  002d4	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv877[ebp]
  002da	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv877[ebp]
  002e2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  002ea	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ee	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 9613 : 
; 9614 : 	set_mono_font_rel_position (x_adjust, 0.0);

  002f3	51		 push	 ecx
  002f4	0f 57 c0	 xorps	 xmm0, xmm0
  002f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fc	51		 push	 ecx
  002fd	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00302	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00307	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9615 : 
; 9616 : 	print_mono_font_string ("THROTTLE");

  0030c	68 00 00 00 00	 push	 OFFSET ??_C@_08PLAGFMEO@THROTTLE@
  00311	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9617 : 
; 9618 : //	set_2d_mono_font_position (0.0, -0.7);
; 9619 : 
; 9620 : 	fvalue = bound (current_flight_dynamics->left_engine_n1_rpm.max, 0.0, 110.0);

  00316	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0031b	f3 0f 5a 80 a0
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7328]
  00323	0f 57 c9	 xorps	 xmm1, xmm1
  00326	66 0f 2f c8	 comisd	 xmm1, xmm0
  0032a	76 0d		 jbe	 SHORT $LN23@draw_engin
  0032c	0f 57 c0	 xorps	 xmm0, xmm0
  0032f	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv184[ebp], xmm0
  00337	eb 50		 jmp	 SHORT $LN24@draw_engin
$LN23@draw_engin:
  00339	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0033f	f3 0f 5a 81 a0
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7328]
  00347	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405b800000000000
  0034f	76 12		 jbe	 SHORT $LN21@draw_engin
  00351	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405b800000000000
  00359	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv183[ebp], xmm0
  00361	eb 16		 jmp	 SHORT $LN22@draw_engin
$LN21@draw_engin:
  00363	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00369	f3 0f 5a 82 a0
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7328]
  00371	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv183[ebp], xmm0
$LN22@draw_engin:
  00379	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv183[ebp]
  00381	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv184[ebp], xmm0
$LN24@draw_engin:
  00389	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv184[ebp]
  00391	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 9621 : 	convert_float_to_int (fvalue, &ivalue);

  00396	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  00399	50		 push	 eax
  0039a	51		 push	 ecx
  0039b	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  003a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a5	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 9622 : 
; 9623 : 	if (ivalue < 60)

  003aa	83 7d a0 3c	 cmp	 DWORD PTR _ivalue$[ebp], 60 ; 0000003cH
  003ae	7d 13		 jge	 SHORT $LN4@draw_engin

; 9624 : 		sprintf(s2, "OFF ");

  003b0	68 00 00 00 00	 push	 OFFSET ??_C@_04LMJCBFEL@OFF?5@
  003b5	8d 45 a4	 lea	 eax, DWORD PTR _s2$[ebp]
  003b8	50		 push	 eax
  003b9	e8 00 00 00 00	 call	 _sprintf
  003be	83 c4 08	 add	 esp, 8
  003c1	eb 58		 jmp	 SHORT $LN9@draw_engin
$LN4@draw_engin:

; 9625 : 	else if (ivalue == 60)

  003c3	83 7d a0 3c	 cmp	 DWORD PTR _ivalue$[ebp], 60 ; 0000003cH
  003c7	75 13		 jne	 SHORT $LN6@draw_engin

; 9626 : 		sprintf(s2, "IDLE");

  003c9	68 00 00 00 00	 push	 OFFSET ??_C@_04IMMGDCFE@IDLE@
  003ce	8d 45 a4	 lea	 eax, DWORD PTR _s2$[ebp]
  003d1	50		 push	 eax
  003d2	e8 00 00 00 00	 call	 _sprintf
  003d7	83 c4 08	 add	 esp, 8
  003da	eb 3f		 jmp	 SHORT $LN9@draw_engin
$LN6@draw_engin:

; 9627 : 	else if (ivalue == 110.0)

  003dc	f2 0f 2a 45 a0	 cvtsi2sd xmm0, DWORD PTR _ivalue$[ebp]
  003e1	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@405b800000000000
  003e9	9f		 lahf
  003ea	f6 c4 44	 test	 ah, 68			; 00000044H
  003ed	7a 13		 jp	 SHORT $LN8@draw_engin

; 9628 : 		sprintf(s2, "FLY ");

  003ef	68 00 00 00 00	 push	 OFFSET ??_C@_04MJEFHDBD@FLY?5@
  003f4	8d 45 a4	 lea	 eax, DWORD PTR _s2$[ebp]
  003f7	50		 push	 eax
  003f8	e8 00 00 00 00	 call	 _sprintf
  003fd	83 c4 08	 add	 esp, 8

; 9629 : 	else

  00400	eb 19		 jmp	 SHORT $LN9@draw_engin
$LN8@draw_engin:

; 9630 : 		sprintf(s2, "%03d%%", (ivalue-60) * 2);

  00402	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  00405	8d 4c 00 88	 lea	 ecx, DWORD PTR [eax+eax-120]
  00409	51		 push	 ecx
  0040a	68 00 00 00 00	 push	 OFFSET ??_C@_06HPNMMHPJ@?$CF03d?$CF?$CF@
  0040f	8d 55 a4	 lea	 edx, DWORD PTR _s2$[ebp]
  00412	52		 push	 edx
  00413	e8 00 00 00 00	 call	 _sprintf
  00418	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@draw_engin:

; 9631 : 
; 9632 : 	/*
; 9633 : 	x_adjust = get_mono_font_string_width (s) * -0.5;
; 9634 : 	set_mono_font_rel_position (x_adjust, 0.0);
; 9635 : 	print_mono_font_string (s);
; 9636 : 	*/
; 9637 : 
; 9638 : 	set_2d_mono_font_position (0.0, -0.7);

  0041b	51		 push	 ecx
  0041c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00424	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00429	51		 push	 ecx
  0042a	0f 57 c0	 xorps	 xmm0, xmm0
  0042d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00432	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9639 : 
; 9640 : 	fvalue = bound (current_flight_dynamics->right_engine_n1_rpm.max, 0.0, 110.0);

  00437	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0043c	f3 0f 5a 80 00
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7424]
  00444	0f 57 c9	 xorps	 xmm1, xmm1
  00447	66 0f 2f c8	 comisd	 xmm1, xmm0
  0044b	76 0d		 jbe	 SHORT $LN27@draw_engin
  0044d	0f 57 c0	 xorps	 xmm0, xmm0
  00450	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv217[ebp], xmm0
  00458	eb 50		 jmp	 SHORT $LN28@draw_engin
$LN27@draw_engin:
  0045a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00460	f3 0f 5a 81 00
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7424]
  00468	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405b800000000000
  00470	76 12		 jbe	 SHORT $LN25@draw_engin
  00472	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405b800000000000
  0047a	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv216[ebp], xmm0
  00482	eb 16		 jmp	 SHORT $LN26@draw_engin
$LN25@draw_engin:
  00484	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0048a	f3 0f 5a 82 00
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7424]
  00492	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv216[ebp], xmm0
$LN26@draw_engin:
  0049a	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv216[ebp]
  004a2	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv217[ebp], xmm0
$LN28@draw_engin:
  004aa	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv217[ebp]
  004b2	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 9641 : 	convert_float_to_int (fvalue, &ivalue);

  004b7	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  004ba	50		 push	 eax
  004bb	51		 push	 ecx
  004bc	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  004c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c6	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 9642 : 
; 9643 : 	if (ivalue < 60)

  004cb	83 7d a0 3c	 cmp	 DWORD PTR _ivalue$[ebp], 60 ; 0000003cH
  004cf	7d 17		 jge	 SHORT $LN10@draw_engin

; 9644 : 		sprintf(s, " %s  OFF ", s2);

  004d1	8d 45 a4	 lea	 eax, DWORD PTR _s2$[ebp]
  004d4	50		 push	 eax
  004d5	68 00 00 00 00	 push	 OFFSET ??_C@_09PEMPOEMF@?5?$CFs?5?5OFF?5@
  004da	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  004dd	51		 push	 ecx
  004de	e8 00 00 00 00	 call	 _sprintf
  004e3	83 c4 0c	 add	 esp, 12			; 0000000cH
  004e6	eb 64		 jmp	 SHORT $LN15@draw_engin
$LN10@draw_engin:

; 9645 : 	else if (ivalue == 60)

  004e8	83 7d a0 3c	 cmp	 DWORD PTR _ivalue$[ebp], 60 ; 0000003cH
  004ec	75 17		 jne	 SHORT $LN12@draw_engin

; 9646 : 		sprintf(s, " %s  IDLE", s2);

  004ee	8d 45 a4	 lea	 eax, DWORD PTR _s2$[ebp]
  004f1	50		 push	 eax
  004f2	68 00 00 00 00	 push	 OFFSET ??_C@_09MEJLMDNK@?5?$CFs?5?5IDLE@
  004f7	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  004fa	51		 push	 ecx
  004fb	e8 00 00 00 00	 call	 _sprintf
  00500	83 c4 0c	 add	 esp, 12			; 0000000cH
  00503	eb 47		 jmp	 SHORT $LN15@draw_engin
$LN12@draw_engin:

; 9647 : 	else if (ivalue == 110.0)

  00505	f2 0f 2a 45 a0	 cvtsi2sd xmm0, DWORD PTR _ivalue$[ebp]
  0050a	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@405b800000000000
  00512	9f		 lahf
  00513	f6 c4 44	 test	 ah, 68			; 00000044H
  00516	7a 17		 jp	 SHORT $LN14@draw_engin

; 9648 : 		sprintf(s, " %s  FLY ", s2);

  00518	8d 45 a4	 lea	 eax, DWORD PTR _s2$[ebp]
  0051b	50		 push	 eax
  0051c	68 00 00 00 00	 push	 OFFSET ??_C@_09IBBIICJN@?5?$CFs?5?5FLY?5@
  00521	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00524	51		 push	 ecx
  00525	e8 00 00 00 00	 call	 _sprintf
  0052a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9649 : 	else

  0052d	eb 1d		 jmp	 SHORT $LN15@draw_engin
$LN14@draw_engin:

; 9650 : 		sprintf(s, " %s  %03d%%", s2, (ivalue-60) * 2);

  0052f	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  00532	8d 4c 00 88	 lea	 ecx, DWORD PTR [eax+eax-120]
  00536	51		 push	 ecx
  00537	8d 55 a4	 lea	 edx, DWORD PTR _s2$[ebp]
  0053a	52		 push	 edx
  0053b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BAGGPIOL@?5?$CFs?5?5?$CF03d?$CF?$CF@
  00540	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00543	50		 push	 eax
  00544	e8 00 00 00 00	 call	 _sprintf
  00549	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@draw_engin:

; 9651 : 
; 9652 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  0054c	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  0054f	50		 push	 eax
  00550	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00555	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv929[ebp]
  0055b	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv929[ebp]
  00563	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0056b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0056f	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 9653 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00574	51		 push	 ecx
  00575	0f 57 c0	 xorps	 xmm0, xmm0
  00578	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057d	51		 push	 ecx
  0057e	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00583	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00588	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9654 : 	print_mono_font_string (s);

  0058d	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00590	50		 push	 eax
  00591	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9655 : 
; 9656 : 	////////////////////////////////////////
; 9657 : 
; 9658 : 	set_2d_mono_font_position (0.5, -0.6);

  00596	51		 push	 ecx
  00597	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  0059f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a4	51		 push	 ecx
  005a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  005ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b2	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9659 : 
; 9660 : 	fvalue = bound (current_flight_dynamics->apu_rpm.value + 0.5, 0.0, 100.0);

  005b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  005bc	f3 0f 5a 80 3c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7484]
  005c4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  005cc	0f 57 c9	 xorps	 xmm1, xmm1
  005cf	66 0f 2f c8	 comisd	 xmm1, xmm0
  005d3	76 0d		 jbe	 SHORT $LN31@draw_engin
  005d5	0f 57 c0	 xorps	 xmm0, xmm0
  005d8	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv265[ebp], xmm0
  005e0	eb 60		 jmp	 SHORT $LN32@draw_engin
$LN31@draw_engin:
  005e2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  005e8	f3 0f 5a 81 3c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7484]
  005f0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  005f8	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4059000000000000
  00600	76 12		 jbe	 SHORT $LN29@draw_engin
  00602	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4059000000000000
  0060a	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv264[ebp], xmm0
  00612	eb 1e		 jmp	 SHORT $LN30@draw_engin
$LN29@draw_engin:
  00614	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0061a	f3 0f 5a 82 3c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7484]
  00622	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0062a	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv264[ebp], xmm0
$LN30@draw_engin:
  00632	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv264[ebp]
  0063a	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv265[ebp], xmm0
$LN32@draw_engin:
  00642	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv265[ebp]
  0064a	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 9661 : 	convert_float_to_int (fvalue, &ivalue);

  0064f	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  00652	50		 push	 eax
  00653	51		 push	 ecx
  00654	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  00659	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0065e	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 9662 : 
; 9663 : 	sprintf(s, "SPU %03d%%", ivalue);

  00663	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  00666	50		 push	 eax
  00667	68 00 00 00 00	 push	 OFFSET ??_C@_0L@BAMMPCGJ@SPU?5?$CF03d?$CF?$CF@
  0066c	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  0066f	51		 push	 ecx
  00670	e8 00 00 00 00	 call	 _sprintf
  00675	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9664 : 
; 9665 : 	print_mono_font_string (s);

  00678	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  0067b	50		 push	 eax
  0067c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9666 : 
; 9667 : 	////////////////////////////////////////
; 9668 : 
; 9669 : 	draw_2d_line (-0.7500 - 0.02, 0.3333, -0.6500 + 0.02, 0.3333, MFD_COLOUR1);

  00681	b8 04 00 00 00	 mov	 eax, 4
  00686	6b c8 00	 imul	 ecx, eax, 0
  00689	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0068f	52		 push	 edx
  00690	51		 push	 ecx
  00691	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  00699	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0069e	51		 push	 ecx
  0069f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  006a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ac	51		 push	 ecx
  006ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  006b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ba	51		 push	 ecx
  006bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf451eb8
  006c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9670 : 	draw_2d_line (-0.5500 - 0.02, 0.3333, -0.4500 + 0.02, 0.3333, MFD_COLOUR1);

  006cd	b8 04 00 00 00	 mov	 eax, 4
  006d2	6b c8 00	 imul	 ecx, eax, 0
  006d5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006db	52		 push	 edx
  006dc	51		 push	 ecx
  006dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  006e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ea	51		 push	 ecx
  006eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bedc28f6
  006f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f8	51		 push	 ecx
  006f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  00701	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00706	51		 push	 ecx
  00707	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf11eb85
  0070f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00714	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9671 : 	draw_2d_line (-0.3500 - 0.02, 0.3333, -0.2500 + 0.02, 0.3333, MFD_COLOUR1);

  00719	b8 04 00 00 00	 mov	 eax, 4
  0071e	6b c8 00	 imul	 ecx, eax, 0
  00721	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00727	52		 push	 edx
  00728	51		 push	 ecx
  00729	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  00731	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00736	51		 push	 ecx
  00737	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be6b851f
  0073f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00744	51		 push	 ecx
  00745	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  0074d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00752	51		 push	 ecx
  00753	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bebd70a4
  0075b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00760	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9672 : 	draw_2d_line (-0.1500 - 0.02, 0.3333, -0.0500 + 0.02, 0.3333, MFD_COLOUR1);

  00765	b8 04 00 00 00	 mov	 eax, 4
  0076a	6b c8 00	 imul	 ecx, eax, 0
  0076d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00773	52		 push	 edx
  00774	51		 push	 ecx
  00775	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  0077d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00782	51		 push	 ecx
  00783	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bcf5c28f
  0078b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00790	51		 push	 ecx
  00791	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  00799	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079e	51		 push	 ecx
  0079f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be2e147b
  007a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ac	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9673 : 
; 9674 : 	draw_2d_line ( 0.7500 + 0.00, 0.3333,  0.6500 - 0.02, 0.3333, MFD_COLOUR1);

  007b1	b8 04 00 00 00	 mov	 eax, 4
  007b6	6b c8 00	 imul	 ecx, eax, 0
  007b9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007bf	52		 push	 edx
  007c0	51		 push	 ecx
  007c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  007c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ce	51		 push	 ecx
  007cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f2147ae
  007d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007dc	51		 push	 ecx
  007dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  007e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ea	51		 push	 ecx
  007eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f400000
  007f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9675 : 	draw_2d_line ( 0.5500 + 0.02, 0.3333,  0.4500 - 0.02, 0.3333, MFD_COLOUR1);

  007fd	b8 04 00 00 00	 mov	 eax, 4
  00802	6b c8 00	 imul	 ecx, eax, 0
  00805	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0080b	52		 push	 edx
  0080c	51		 push	 ecx
  0080d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  00815	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081a	51		 push	 ecx
  0081b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3edc28f6
  00823	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00828	51		 push	 ecx
  00829	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  00831	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00836	51		 push	 ecx
  00837	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f11eb85
  0083f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00844	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9676 : 	draw_2d_line ( 0.3500 + 0.02, 0.3333,  0.2500 - 0.02, 0.3333, MFD_COLOUR1);

  00849	b8 04 00 00 00	 mov	 eax, 4
  0084e	6b c8 00	 imul	 ecx, eax, 0
  00851	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00857	52		 push	 edx
  00858	51		 push	 ecx
  00859	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  00861	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00866	51		 push	 ecx
  00867	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6b851f
  0086f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00874	51		 push	 ecx
  00875	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  0087d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00882	51		 push	 ecx
  00883	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ebd70a4
  0088b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00890	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9677 : 	draw_2d_line ( 0.1500 + 0.02, 0.3333,  0.0500 - 0.02, 0.3333, MFD_COLOUR1);

  00895	b8 04 00 00 00	 mov	 eax, 4
  0089a	6b c8 00	 imul	 ecx, eax, 0
  0089d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008a3	52		 push	 edx
  008a4	51		 push	 ecx
  008a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  008ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008b2	51		 push	 ecx
  008b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3cf5c28f
  008bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c0	51		 push	 ecx
  008c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaaa64c
  008c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ce	51		 push	 ecx
  008cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e2e147b
  008d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008dc	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9678 : 
; 9679 : 	////////////////////////////////////////
; 9680 : 
; 9681 : 	//
; 9682 : 	// Nr
; 9683 : 	//
; 9684 : 
; 9685 : 	#define X_ORG	((float) (0.0))
; 9686 : 	#define Y_ORG	((float) (0.5))
; 9687 : 	#define WIDTH	((float) (0.06))
; 9688 : 	#define HEIGHT	((float) (1.0))
; 9689 : 
; 9690 : 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 9691 : 	// as a constant as a function parameter will use a double (even though
; 9692 : 	// definition is available and says float), which causes later parameters
; 9693 : 	// to be wrong
; 9694 : 	bottom_edge = (Y_ORG - HEIGHT);

  008e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  008e9	f3 0f 11 45 9c	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 9695 : 
; 9696 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  008ee	51		 push	 ecx
  008ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  008f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008fc	51		 push	 ecx
  008fd	0f 57 c0	 xorps	 xmm0, xmm0
  00900	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00905	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9697 : 
; 9698 : 	x_adjust = get_mono_font_string_width ("NR") * -0.5;

  0090a	68 00 00 00 00	 push	 OFFSET ??_C@_02PCDHLJPB@NR@
  0090f	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00914	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1041[ebp]
  0091a	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1041[ebp]
  00922	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0092a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0092e	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 9699 : 
; 9700 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00933	51		 push	 ecx
  00934	0f 57 c0	 xorps	 xmm0, xmm0
  00937	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0093c	51		 push	 ecx
  0093d	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00942	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00947	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9701 : 
; 9702 : 	print_mono_font_string ("NR");

  0094c	68 00 00 00 00	 push	 OFFSET ??_C@_02PCDHLJPB@NR@
  00951	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9703 : 
; 9704 : 	////////////////////////////////////////
; 9705 : 
; 9706 : 	fvalue = bound (current_flight_dynamics->main_rotor_rpm.value, 0.0, 120.0);

  00956	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0095b	f3 0f 5a 80 14
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7700]
  00963	0f 57 c9	 xorps	 xmm1, xmm1
  00966	66 0f 2f c8	 comisd	 xmm1, xmm0
  0096a	76 0d		 jbe	 SHORT $LN35@draw_engin
  0096c	0f 57 c0	 xorps	 xmm0, xmm0
  0096f	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv351[ebp], xmm0
  00977	eb 50		 jmp	 SHORT $LN36@draw_engin
$LN35@draw_engin:
  00979	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0097f	f3 0f 5a 81 14
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7700]
  00987	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  0098f	76 12		 jbe	 SHORT $LN33@draw_engin
  00991	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  00999	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv350[ebp], xmm0
  009a1	eb 16		 jmp	 SHORT $LN34@draw_engin
$LN33@draw_engin:
  009a3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  009a9	f3 0f 5a 82 14
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7700]
  009b1	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv350[ebp], xmm0
$LN34@draw_engin:
  009b9	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv350[ebp]
  009c1	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv351[ebp], xmm0
$LN36@draw_engin:
  009c9	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv351[ebp]
  009d1	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 9707 : 
; 9708 : 	convert_float_to_int (fvalue, &ivalue);

  009d6	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  009d9	50		 push	 eax
  009da	51		 push	 ecx
  009db	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  009e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009e5	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 9709 : 
; 9710 : 	sprintf (s, "%03d", ivalue);

  009ea	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  009ed	50		 push	 eax
  009ee	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  009f3	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  009f6	51		 push	 ecx
  009f7	e8 00 00 00 00	 call	 _sprintf
  009fc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9711 : 
; 9712 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  009ff	51		 push	 ecx
  00a00	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00a08	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a0d	51		 push	 ecx
  00a0e	0f 57 c0	 xorps	 xmm0, xmm0
  00a11	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a16	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9713 : 
; 9714 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  00a1b	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00a1e	50		 push	 eax
  00a1f	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00a24	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1067[ebp]
  00a2a	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1067[ebp]
  00a32	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00a3a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a3e	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 9715 : 
; 9716 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00a43	51		 push	 ecx
  00a44	0f 57 c0	 xorps	 xmm0, xmm0
  00a47	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a4c	51		 push	 ecx
  00a4d	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00a52	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a57	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9717 : 
; 9718 : 	print_mono_font_string (s);

  00a5c	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00a5f	50		 push	 eax
  00a60	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9719 : 
; 9720 : 	////////////////////////////////////////
; 9721 : 
; 9722 : 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 120.0);

  00a65	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  00a6a	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@405e000000000000
  00a72	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a76	51		 push	 ecx
  00a77	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a7c	51		 push	 ecx
  00a7d	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  00a82	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a87	51		 push	 ecx
  00a88	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3cf5c28f
  00a90	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a95	51		 push	 ecx
  00a96	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00a9e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa3	51		 push	 ecx
  00aa4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bcf5c28f
  00aac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ab1	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 9723 : 
; 9724 : 	#undef X_ORG
; 9725 : 	#undef Y_ORG
; 9726 : 	#undef WIDTH
; 9727 : 	#undef HEIGHT
; 9728 : 
; 9729 : 	//
; 9730 : 	// Np1
; 9731 : 	//
; 9732 : 
; 9733 : 	#define X_ORG	((float) (-0.2))
; 9734 : 	#define Y_ORG	((float) (0.5))
; 9735 : 	#define WIDTH	((float)	(0.06))
; 9736 : 	#define HEIGHT	((float) (1.0))
; 9737 : 
; 9738 : 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 9739 : 	// as a constant as a function parameter will use a double (even though
; 9740 : 	// definition is available and says const float), which causes later parameters
; 9741 : 	// to be wrong
; 9742 : 	bottom_edge = (Y_ORG - HEIGHT);

  00ab6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00abe	f3 0f 11 45 9c	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 9743 : 
; 9744 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  00ac3	51		 push	 ecx
  00ac4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00acc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ad1	51		 push	 ecx
  00ad2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00ada	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00adf	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9745 : 
; 9746 : 	x_adjust = get_mono_font_string_width ("NP") * -0.5;

  00ae4	68 00 00 00 00	 push	 OFFSET ??_C@_02MAABNLHD@NP@
  00ae9	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00aee	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1091[ebp]
  00af4	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1091[ebp]
  00afc	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00b04	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b08	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 9747 : 
; 9748 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00b0d	51		 push	 ecx
  00b0e	0f 57 c0	 xorps	 xmm0, xmm0
  00b11	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b16	51		 push	 ecx
  00b17	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00b1c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b21	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9749 : 
; 9750 : 	print_mono_font_string ("NP");

  00b26	68 00 00 00 00	 push	 OFFSET ??_C@_02MAABNLHD@NP@
  00b2b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9751 : 
; 9752 : 	////////////////////////////////////////
; 9753 : 
; 9754 : 	fvalue = bound (current_flight_dynamics->left_engine_rpm.value, 0.0, 120.0);

  00b30	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00b35	f3 0f 5a 80 7c
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7292]
  00b3d	0f 57 c9	 xorps	 xmm1, xmm1
  00b40	66 0f 2f c8	 comisd	 xmm1, xmm0
  00b44	76 0d		 jbe	 SHORT $LN39@draw_engin
  00b46	0f 57 c0	 xorps	 xmm0, xmm0
  00b49	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv398[ebp], xmm0
  00b51	eb 50		 jmp	 SHORT $LN40@draw_engin
$LN39@draw_engin:
  00b53	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00b59	f3 0f 5a 81 7c
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7292]
  00b61	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  00b69	76 12		 jbe	 SHORT $LN37@draw_engin
  00b6b	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  00b73	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv397[ebp], xmm0
  00b7b	eb 16		 jmp	 SHORT $LN38@draw_engin
$LN37@draw_engin:
  00b7d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00b83	f3 0f 5a 82 7c
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7292]
  00b8b	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv397[ebp], xmm0
$LN38@draw_engin:
  00b93	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv397[ebp]
  00b9b	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv398[ebp], xmm0
$LN40@draw_engin:
  00ba3	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv398[ebp]
  00bab	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 9755 : 
; 9756 : 	convert_float_to_int (fvalue, &ivalue);

  00bb0	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  00bb3	50		 push	 eax
  00bb4	51		 push	 ecx
  00bb5	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  00bba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bbf	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 9757 : 
; 9758 : 	sprintf (s, "%03d", ivalue);

  00bc4	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  00bc7	50		 push	 eax
  00bc8	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  00bcd	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00bd0	51		 push	 ecx
  00bd1	e8 00 00 00 00	 call	 _sprintf
  00bd6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9759 : 
; 9760 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  00bd9	51		 push	 ecx
  00bda	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00be2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00be7	51		 push	 ecx
  00be8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00bf0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bf5	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9761 : 
; 9762 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  00bfa	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00bfd	50		 push	 eax
  00bfe	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00c03	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1117[ebp]
  00c09	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1117[ebp]
  00c11	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00c19	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c1d	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 9763 : 
; 9764 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00c22	51		 push	 ecx
  00c23	0f 57 c0	 xorps	 xmm0, xmm0
  00c26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c2b	51		 push	 ecx
  00c2c	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00c31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c36	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9765 : 
; 9766 : 	print_mono_font_string (s);

  00c3b	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00c3e	50		 push	 eax
  00c3f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9767 : 
; 9768 : 	////////////////////////////////////////
; 9769 : 
; 9770 : 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 120.0);

  00c44	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  00c49	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@405e000000000000
  00c51	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c55	51		 push	 ecx
  00c56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c5b	51		 push	 ecx
  00c5c	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  00c61	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c66	51		 push	 ecx
  00c67	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be2e147b
  00c6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c74	51		 push	 ecx
  00c75	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00c7d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c82	51		 push	 ecx
  00c83	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be6b851f
  00c8b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c90	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 9771 : 
; 9772 : 	#undef X_ORG
; 9773 : 	#undef Y_ORG
; 9774 : 	#undef WIDTH
; 9775 : 	#undef HEIGHT
; 9776 : 
; 9777 : 	//
; 9778 : 	// Np2
; 9779 : 	//
; 9780 : 
; 9781 : 	#define X_ORG	((float) (0.2))
; 9782 : 	#define Y_ORG	((float) (0.5))
; 9783 : 	#define WIDTH	((float) (0.06))
; 9784 : 	#define HEIGHT	((float) (1.0))
; 9785 : 
; 9786 : 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 9787 : 	// as a constant as a function parameter will use a double (even though
; 9788 : 	// definition is available and says const float), which causes later parameters
; 9789 : 	// to be wrong
; 9790 : 	bottom_edge = (Y_ORG - HEIGHT);

  00c95	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00c9d	f3 0f 11 45 9c	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 9791 : 
; 9792 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  00ca2	51		 push	 ecx
  00ca3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00cab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cb0	51		 push	 ecx
  00cb1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00cb9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cbe	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9793 : 
; 9794 : 	x_adjust = get_mono_font_string_width ("NP") * -0.5;

  00cc3	68 00 00 00 00	 push	 OFFSET ??_C@_02MAABNLHD@NP@
  00cc8	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00ccd	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1141[ebp]
  00cd3	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1141[ebp]
  00cdb	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00ce3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ce7	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 9795 : 
; 9796 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00cec	51		 push	 ecx
  00ced	0f 57 c0	 xorps	 xmm0, xmm0
  00cf0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cf5	51		 push	 ecx
  00cf6	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00cfb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d00	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9797 : 
; 9798 : 	print_mono_font_string ("NP");

  00d05	68 00 00 00 00	 push	 OFFSET ??_C@_02MAABNLHD@NP@
  00d0a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9799 : 
; 9800 : 	////////////////////////////////////////
; 9801 : 
; 9802 : 	fvalue = bound (current_flight_dynamics->right_engine_rpm.value, 0.0, 120.0);

  00d0f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00d14	f3 0f 5a 80 dc
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7388]
  00d1c	0f 57 c9	 xorps	 xmm1, xmm1
  00d1f	66 0f 2f c8	 comisd	 xmm1, xmm0
  00d23	76 0d		 jbe	 SHORT $LN43@draw_engin
  00d25	0f 57 c0	 xorps	 xmm0, xmm0
  00d28	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv445[ebp], xmm0
  00d30	eb 50		 jmp	 SHORT $LN44@draw_engin
$LN43@draw_engin:
  00d32	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00d38	f3 0f 5a 81 dc
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7388]
  00d40	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  00d48	76 12		 jbe	 SHORT $LN41@draw_engin
  00d4a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  00d52	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv444[ebp], xmm0
  00d5a	eb 16		 jmp	 SHORT $LN42@draw_engin
$LN41@draw_engin:
  00d5c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00d62	f3 0f 5a 82 dc
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7388]
  00d6a	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv444[ebp], xmm0
$LN42@draw_engin:
  00d72	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv444[ebp]
  00d7a	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv445[ebp], xmm0
$LN44@draw_engin:
  00d82	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv445[ebp]
  00d8a	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 9803 : 
; 9804 : 	convert_float_to_int (fvalue, &ivalue);

  00d8f	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  00d92	50		 push	 eax
  00d93	51		 push	 ecx
  00d94	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  00d99	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d9e	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 9805 : 
; 9806 : 	sprintf (s, "%03d", ivalue);

  00da3	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  00da6	50		 push	 eax
  00da7	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  00dac	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00daf	51		 push	 ecx
  00db0	e8 00 00 00 00	 call	 _sprintf
  00db5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9807 : 
; 9808 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  00db8	51		 push	 ecx
  00db9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00dc1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dc6	51		 push	 ecx
  00dc7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00dcf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dd4	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9809 : 
; 9810 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  00dd9	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00ddc	50		 push	 eax
  00ddd	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00de2	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1167[ebp]
  00de8	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1167[ebp]
  00df0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00df8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00dfc	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 9811 : 
; 9812 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00e01	51		 push	 ecx
  00e02	0f 57 c0	 xorps	 xmm0, xmm0
  00e05	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e0a	51		 push	 ecx
  00e0b	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00e10	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e15	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9813 : 
; 9814 : 	print_mono_font_string (s);

  00e1a	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00e1d	50		 push	 eax
  00e1e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9815 : 
; 9816 : 	////////////////////////////////////////
; 9817 : 
; 9818 : 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 120.0);

  00e23	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  00e28	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@405e000000000000
  00e30	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00e34	51		 push	 ecx
  00e35	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e3a	51		 push	 ecx
  00e3b	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  00e40	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e45	51		 push	 ecx
  00e46	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6b851f
  00e4e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e53	51		 push	 ecx
  00e54	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00e5c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e61	51		 push	 ecx
  00e62	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e2e147b
  00e6a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e6f	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 9819 : 
; 9820 : 	#undef X_ORG
; 9821 : 	#undef Y_ORG
; 9822 : 	#undef WIDTH
; 9823 : 	#undef HEIGHT
; 9824 : 
; 9825 : 	//
; 9826 : 	// NG1
; 9827 : 	//
; 9828 : 
; 9829 : 	#define X_ORG	((float) (-0.4))
; 9830 : 	#define Y_ORG	((float) (0.5))
; 9831 : 	#define WIDTH	((float) (0.06))
; 9832 : 	#define HEIGHT	((float) (1.0))
; 9833 : 
; 9834 : 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 9835 : 	// as a constant as a function parameter will use a double (even though
; 9836 : 	// definition is available and says const float), which causes later parameters
; 9837 : 	// to be wrong
; 9838 : 	bottom_edge = (Y_ORG - HEIGHT);

  00e74	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00e7c	f3 0f 11 45 9c	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 9839 : 
; 9840 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  00e81	51		 push	 ecx
  00e82	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00e8a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e8f	51		 push	 ecx
  00e90	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00e98	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e9d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9841 : 
; 9842 : 	x_adjust = get_mono_font_string_width ("NG") * -0.5;

  00ea2	68 00 00 00 00	 push	 OFFSET ??_C@_02MFICFPOF@NG@
  00ea7	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00eac	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1191[ebp]
  00eb2	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1191[ebp]
  00eba	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00ec2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ec6	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 9843 : 
; 9844 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00ecb	51		 push	 ecx
  00ecc	0f 57 c0	 xorps	 xmm0, xmm0
  00ecf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ed4	51		 push	 ecx
  00ed5	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00eda	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00edf	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9845 : 
; 9846 : 	print_mono_font_string ("NG");

  00ee4	68 00 00 00 00	 push	 OFFSET ??_C@_02MFICFPOF@NG@
  00ee9	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9847 : 
; 9848 : 	////////////////////////////////////////
; 9849 : 
; 9850 : 	fvalue = bound (current_flight_dynamics->left_engine_n1_rpm.value, 0.0, 120.0);

  00eee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00ef3	f3 0f 5a 80 94
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7316]
  00efb	0f 57 c9	 xorps	 xmm1, xmm1
  00efe	66 0f 2f c8	 comisd	 xmm1, xmm0
  00f02	76 0d		 jbe	 SHORT $LN47@draw_engin
  00f04	0f 57 c0	 xorps	 xmm0, xmm0
  00f07	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv492[ebp], xmm0
  00f0f	eb 50		 jmp	 SHORT $LN48@draw_engin
$LN47@draw_engin:
  00f11	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00f17	f3 0f 5a 81 94
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7316]
  00f1f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  00f27	76 12		 jbe	 SHORT $LN45@draw_engin
  00f29	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  00f31	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv491[ebp], xmm0
  00f39	eb 16		 jmp	 SHORT $LN46@draw_engin
$LN45@draw_engin:
  00f3b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00f41	f3 0f 5a 82 94
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7316]
  00f49	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv491[ebp], xmm0
$LN46@draw_engin:
  00f51	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv491[ebp]
  00f59	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv492[ebp], xmm0
$LN48@draw_engin:
  00f61	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv492[ebp]
  00f69	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 9851 : 
; 9852 : 	convert_float_to_int (fvalue, &ivalue);

  00f6e	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  00f71	50		 push	 eax
  00f72	51		 push	 ecx
  00f73	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  00f78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f7d	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 9853 : 
; 9854 : 	sprintf (s, "%03d", ivalue);

  00f82	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  00f85	50		 push	 eax
  00f86	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  00f8b	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00f8e	51		 push	 ecx
  00f8f	e8 00 00 00 00	 call	 _sprintf
  00f94	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9855 : 
; 9856 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  00f97	51		 push	 ecx
  00f98	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00fa0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fa5	51		 push	 ecx
  00fa6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00fae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fb3	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9857 : 
; 9858 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  00fb8	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00fbb	50		 push	 eax
  00fbc	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00fc1	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1217[ebp]
  00fc7	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1217[ebp]
  00fcf	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00fd7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00fdb	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 9859 : 
; 9860 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00fe0	51		 push	 ecx
  00fe1	0f 57 c0	 xorps	 xmm0, xmm0
  00fe4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fe9	51		 push	 ecx
  00fea	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00fef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ff4	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9861 : 
; 9862 : 	print_mono_font_string (s);

  00ff9	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00ffc	50		 push	 eax
  00ffd	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9863 : 
; 9864 : 	////////////////////////////////////////
; 9865 : 
; 9866 : 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 120.0);

  01002	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  01007	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@405e000000000000
  0100f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01013	51		 push	 ecx
  01014	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01019	51		 push	 ecx
  0101a	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  0101f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01024	51		 push	 ecx
  01025	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bebd70a4
  0102d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01032	51		 push	 ecx
  01033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0103b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01040	51		 push	 ecx
  01041	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bedc28f6
  01049	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0104e	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 9867 : 
; 9868 : 	#undef X_ORG
; 9869 : 	#undef Y_ORG
; 9870 : 	#undef WIDTH
; 9871 : 	#undef HEIGHT
; 9872 : 
; 9873 : 	//
; 9874 : 	// NG2
; 9875 : 	//
; 9876 : 
; 9877 : 	#define X_ORG	((float) (0.4))
; 9878 : 	#define Y_ORG	((float) (0.5))
; 9879 : 	#define WIDTH	((float) (0.06))
; 9880 : 	#define HEIGHT	((float) (1.0))
; 9881 : 
; 9882 : 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 9883 : 	// as a constant as a function parameter will use a double (even though
; 9884 : 	// definition is available and says const float), which causes later parameters
; 9885 : 	// to be wrong
; 9886 : 	bottom_edge = (Y_ORG - HEIGHT);

  01053	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0105b	f3 0f 11 45 9c	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 9887 : 
; 9888 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  01060	51		 push	 ecx
  01061	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  01069	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0106e	51		 push	 ecx
  0106f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  01077	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0107c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9889 : 
; 9890 : 	x_adjust = get_mono_font_string_width ("NG") * -0.5;

  01081	68 00 00 00 00	 push	 OFFSET ??_C@_02MFICFPOF@NG@
  01086	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0108b	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1241[ebp]
  01091	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1241[ebp]
  01099	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  010a1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  010a5	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 9891 : 
; 9892 : 	set_mono_font_rel_position (x_adjust, 0.0);

  010aa	51		 push	 ecx
  010ab	0f 57 c0	 xorps	 xmm0, xmm0
  010ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010b3	51		 push	 ecx
  010b4	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  010b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010be	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9893 : 
; 9894 : 	print_mono_font_string ("NG");

  010c3	68 00 00 00 00	 push	 OFFSET ??_C@_02MFICFPOF@NG@
  010c8	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9895 : 
; 9896 : 	////////////////////////////////////////
; 9897 : 
; 9898 : 	fvalue = bound (current_flight_dynamics->right_engine_n1_rpm.value, 0.0, 120.0);

  010cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  010d2	f3 0f 5a 80 f4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7412]
  010da	0f 57 c9	 xorps	 xmm1, xmm1
  010dd	66 0f 2f c8	 comisd	 xmm1, xmm0
  010e1	76 0d		 jbe	 SHORT $LN51@draw_engin
  010e3	0f 57 c0	 xorps	 xmm0, xmm0
  010e6	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv539[ebp], xmm0
  010ee	eb 50		 jmp	 SHORT $LN52@draw_engin
$LN51@draw_engin:
  010f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  010f6	f3 0f 5a 81 f4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7412]
  010fe	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  01106	76 12		 jbe	 SHORT $LN49@draw_engin
  01108	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  01110	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv538[ebp], xmm0
  01118	eb 16		 jmp	 SHORT $LN50@draw_engin
$LN49@draw_engin:
  0111a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01120	f3 0f 5a 82 f4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7412]
  01128	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv538[ebp], xmm0
$LN50@draw_engin:
  01130	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv538[ebp]
  01138	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv539[ebp], xmm0
$LN52@draw_engin:
  01140	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv539[ebp]
  01148	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 9899 : 
; 9900 : 	convert_float_to_int (fvalue, &ivalue);

  0114d	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  01150	50		 push	 eax
  01151	51		 push	 ecx
  01152	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  01157	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0115c	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 9901 : 
; 9902 : 	sprintf (s, "%03d", ivalue);

  01161	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  01164	50		 push	 eax
  01165	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  0116a	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  0116d	51		 push	 ecx
  0116e	e8 00 00 00 00	 call	 _sprintf
  01173	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9903 : 
; 9904 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  01176	51		 push	 ecx
  01177	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  0117f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01184	51		 push	 ecx
  01185	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  0118d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01192	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9905 : 
; 9906 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  01197	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  0119a	50		 push	 eax
  0119b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  011a0	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1267[ebp]
  011a6	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1267[ebp]
  011ae	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  011b6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  011ba	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 9907 : 
; 9908 : 	set_mono_font_rel_position (x_adjust, 0.0);

  011bf	51		 push	 ecx
  011c0	0f 57 c0	 xorps	 xmm0, xmm0
  011c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011c8	51		 push	 ecx
  011c9	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  011ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011d3	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9909 : 
; 9910 : 	print_mono_font_string (s);

  011d8	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  011db	50		 push	 eax
  011dc	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9911 : 
; 9912 : 	////////////////////////////////////////
; 9913 : 
; 9914 : 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 120.0);

  011e1	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  011e6	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@405e000000000000
  011ee	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  011f2	51		 push	 ecx
  011f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011f8	51		 push	 ecx
  011f9	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  011fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01203	51		 push	 ecx
  01204	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3edc28f6
  0120c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01211	51		 push	 ecx
  01212	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0121a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0121f	51		 push	 ecx
  01220	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ebd70a4
  01228	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0122d	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 9915 : 
; 9916 : 	#undef X_ORG
; 9917 : 	#undef Y_ORG
; 9918 : 	#undef WIDTH
; 9919 : 	#undef HEIGHT
; 9920 : 
; 9921 : 	//
; 9922 : 	// TQ1
; 9923 : 	//
; 9924 : 
; 9925 : 	#define X_ORG	((float) (-0.6))
; 9926 : 	#define Y_ORG	((float) (0.5))
; 9927 : 	#define WIDTH	((float) (0.06))
; 9928 : 	#define HEIGHT	((float) (1.0))
; 9929 : 
; 9930 : 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 9931 : 	// as a constant as a function parameter will use a double (even though
; 9932 : 	// definition is available and says const float), which causes later parameters
; 9933 : 	// to be wrong
; 9934 : 	bottom_edge = (Y_ORG - HEIGHT);

  01232	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0123a	f3 0f 11 45 9c	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 9935 : 
; 9936 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  0123f	51		 push	 ecx
  01240	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  01248	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0124d	51		 push	 ecx
  0124e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  01256	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0125b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9937 : 
; 9938 : 	x_adjust = get_mono_font_string_width ("TQ") * -0.5;

  01260	68 00 00 00 00	 push	 OFFSET ??_C@_02MIKLMMJE@TQ@
  01265	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0126a	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1291[ebp]
  01270	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1291[ebp]
  01278	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01280	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01284	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 9939 : 
; 9940 : 	set_mono_font_rel_position (x_adjust, 0.0);

  01289	51		 push	 ecx
  0128a	0f 57 c0	 xorps	 xmm0, xmm0
  0128d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01292	51		 push	 ecx
  01293	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01298	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0129d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9941 : 
; 9942 : 	print_mono_font_string ("TQ");

  012a2	68 00 00 00 00	 push	 OFFSET ??_C@_02MIKLMMJE@TQ@
  012a7	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9943 : 
; 9944 : 	////////////////////////////////////////
; 9945 : 
; 9946 : 	fvalue = bound (current_flight_dynamics->left_engine_torque.value, 0.0, 120.0);

  012ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  012b1	f3 0f 5a 80 ac
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7340]
  012b9	0f 57 c9	 xorps	 xmm1, xmm1
  012bc	66 0f 2f c8	 comisd	 xmm1, xmm0
  012c0	76 0d		 jbe	 SHORT $LN55@draw_engin
  012c2	0f 57 c0	 xorps	 xmm0, xmm0
  012c5	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv586[ebp], xmm0
  012cd	eb 50		 jmp	 SHORT $LN56@draw_engin
$LN55@draw_engin:
  012cf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  012d5	f3 0f 5a 81 ac
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7340]
  012dd	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  012e5	76 12		 jbe	 SHORT $LN53@draw_engin
  012e7	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  012ef	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv585[ebp], xmm0
  012f7	eb 16		 jmp	 SHORT $LN54@draw_engin
$LN53@draw_engin:
  012f9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  012ff	f3 0f 5a 82 ac
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7340]
  01307	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv585[ebp], xmm0
$LN54@draw_engin:
  0130f	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv585[ebp]
  01317	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv586[ebp], xmm0
$LN56@draw_engin:
  0131f	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv586[ebp]
  01327	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 9947 : 
; 9948 : 	convert_float_to_int (fvalue, &ivalue);

  0132c	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  0132f	50		 push	 eax
  01330	51		 push	 ecx
  01331	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  01336	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0133b	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 9949 : 
; 9950 : 	sprintf (s, "%03d", ivalue);

  01340	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  01343	50		 push	 eax
  01344	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  01349	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  0134c	51		 push	 ecx
  0134d	e8 00 00 00 00	 call	 _sprintf
  01352	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9951 : 
; 9952 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  01355	51		 push	 ecx
  01356	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  0135e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01363	51		 push	 ecx
  01364	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  0136c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01371	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9953 : 
; 9954 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  01376	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01379	50		 push	 eax
  0137a	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0137f	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1317[ebp]
  01385	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1317[ebp]
  0138d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01395	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01399	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 9955 : 
; 9956 : 	set_mono_font_rel_position (x_adjust, 0.0);

  0139e	51		 push	 ecx
  0139f	0f 57 c0	 xorps	 xmm0, xmm0
  013a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013a7	51		 push	 ecx
  013a8	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  013ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013b2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9957 : 
; 9958 : 	print_mono_font_string (s);

  013b7	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  013ba	50		 push	 eax
  013bb	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9959 : 
; 9960 : 	////////////////////////////////////////
; 9961 : 
; 9962 : 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 120.0);

  013c0	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  013c5	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@405e000000000000
  013cd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  013d1	51		 push	 ecx
  013d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013d7	51		 push	 ecx
  013d8	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  013dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013e2	51		 push	 ecx
  013e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf11eb86
  013eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013f0	51		 push	 ecx
  013f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  013f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013fe	51		 push	 ecx
  013ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  01407	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0140c	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 9963 : 
; 9964 : 	#undef X_ORG
; 9965 : 	#undef Y_ORG
; 9966 : 	#undef WIDTH
; 9967 : 	#undef HEIGHT
; 9968 : 
; 9969 : 	//
; 9970 : 	// TQ2
; 9971 : 	//
; 9972 : 
; 9973 : 	#define X_ORG	((float) (0.6))
; 9974 : 	#define Y_ORG	((float) (0.5))
; 9975 : 	#define WIDTH	((float) (0.06))
; 9976 : 	#define HEIGHT	((float) (1.0))
; 9977 : 
; 9978 : 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 9979 : 	// as a constant as a function parameter will use a double (even though
; 9980 : 	// definition is available and says const float), which causes later parameters
; 9981 : 	// to be wrong
; 9982 : 	bottom_edge = (Y_ORG - HEIGHT);

  01411	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  01419	f3 0f 11 45 9c	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 9983 : 
; 9984 : 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  0141e	51		 push	 ecx
  0141f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  01427	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0142c	51		 push	 ecx
  0142d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  01435	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0143a	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9985 : 
; 9986 : 	x_adjust = get_mono_font_string_width ("TQ") * -0.5;

  0143f	68 00 00 00 00	 push	 OFFSET ??_C@_02MIKLMMJE@TQ@
  01444	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01449	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1341[ebp]
  0144f	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1341[ebp]
  01457	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0145f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01463	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 9987 : 
; 9988 : 	set_mono_font_rel_position (x_adjust, 0.0);

  01468	51		 push	 ecx
  01469	0f 57 c0	 xorps	 xmm0, xmm0
  0146c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01471	51		 push	 ecx
  01472	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01477	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0147c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9989 : 
; 9990 : 	print_mono_font_string ("TQ");

  01481	68 00 00 00 00	 push	 OFFSET ??_C@_02MIKLMMJE@TQ@
  01486	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9991 : 
; 9992 : 	////////////////////////////////////////
; 9993 : 
; 9994 : 	fvalue = bound (current_flight_dynamics->right_engine_torque.value, 0.0, 120.0);

  0148b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01490	f3 0f 5a 80 0c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7436]
  01498	0f 57 c9	 xorps	 xmm1, xmm1
  0149b	66 0f 2f c8	 comisd	 xmm1, xmm0
  0149f	76 0d		 jbe	 SHORT $LN59@draw_engin
  014a1	0f 57 c0	 xorps	 xmm0, xmm0
  014a4	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv633[ebp], xmm0
  014ac	eb 50		 jmp	 SHORT $LN60@draw_engin
$LN59@draw_engin:
  014ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  014b4	f3 0f 5a 81 0c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7436]
  014bc	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  014c4	76 12		 jbe	 SHORT $LN57@draw_engin
  014c6	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  014ce	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv632[ebp], xmm0
  014d6	eb 16		 jmp	 SHORT $LN58@draw_engin
$LN57@draw_engin:
  014d8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  014de	f3 0f 5a 82 0c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7436]
  014e6	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv632[ebp], xmm0
$LN58@draw_engin:
  014ee	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv632[ebp]
  014f6	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv633[ebp], xmm0
$LN60@draw_engin:
  014fe	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv633[ebp]
  01506	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 9995 : 
; 9996 : 	convert_float_to_int (fvalue, &ivalue);

  0150b	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  0150e	50		 push	 eax
  0150f	51		 push	 ecx
  01510	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  01515	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0151a	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 9997 : 
; 9998 : 	sprintf (s, "%03d", ivalue);

  0151f	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  01522	50		 push	 eax
  01523	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  01528	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  0152b	51		 push	 ecx
  0152c	e8 00 00 00 00	 call	 _sprintf
  01531	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9999 : 
; 10000: 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  01534	51		 push	 ecx
  01535	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  0153d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01542	51		 push	 ecx
  01543	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  0154b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01550	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10001: 
; 10002: 	x_adjust = get_mono_font_string_width (s) * -0.5;

  01555	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01558	50		 push	 eax
  01559	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0155e	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1367[ebp]
  01564	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1367[ebp]
  0156c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01574	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01578	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10003: 
; 10004: 	set_mono_font_rel_position (x_adjust, 0.0);

  0157d	51		 push	 ecx
  0157e	0f 57 c0	 xorps	 xmm0, xmm0
  01581	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01586	51		 push	 ecx
  01587	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0158c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01591	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10005: 
; 10006: 	print_mono_font_string (s);

  01596	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01599	50		 push	 eax
  0159a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10007: 
; 10008: 	////////////////////////////////////////
; 10009: 
; 10010: 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 120.0);

  0159f	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  015a4	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@405e000000000000
  015ac	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  015b0	51		 push	 ecx
  015b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015b6	51		 push	 ecx
  015b7	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  015bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015c1	51		 push	 ecx
  015c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f2147ae
  015ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015cf	51		 push	 ecx
  015d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  015d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015dd	51		 push	 ecx
  015de	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f11eb86
  015e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015eb	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 10011: 
; 10012: 	#undef X_ORG
; 10013: 	#undef Y_ORG
; 10014: 	#undef WIDTH
; 10015: 	#undef HEIGHT
; 10016: 
; 10017: 	//
; 10018: 	// TGT1
; 10019: 	//
; 10020: 
; 10021: 	#define X_ORG	((float) (-0.8))
; 10022: 	#define Y_ORG	((float) (0.5))
; 10023: 	#define WIDTH	((float) (0.06))
; 10024: 	#define HEIGHT	((float) (0.8333))
; 10025: 
; 10026: 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 10027: 	// as a constant as a function parameter will use a double (even though
; 10028: 	// definition is available and says const float), which causes later parameters
; 10029: 	// to be wrong
; 10030: 	bottom_edge = (Y_ORG - HEIGHT);

  015f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beaaa64c
  015f8	f3 0f 11 45 9c	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 10031: 
; 10032: 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  015fd	51		 push	 ecx
  015fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  01606	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0160b	51		 push	 ecx
  0160c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  01614	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01619	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10033: 
; 10034: 	x_adjust = get_mono_font_string_width ("TG") * -0.5;

  0161e	68 00 00 00 00	 push	 OFFSET ??_C@_02NEDDHJED@TG@
  01623	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01628	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1391[ebp]
  0162e	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1391[ebp]
  01636	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0163e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01642	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10035: 
; 10036: 	set_mono_font_rel_position (x_adjust, 0.0);

  01647	51		 push	 ecx
  01648	0f 57 c0	 xorps	 xmm0, xmm0
  0164b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01650	51		 push	 ecx
  01651	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01656	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0165b	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10037: 
; 10038: 	print_mono_font_string ("TG");

  01660	68 00 00 00 00	 push	 OFFSET ??_C@_02NEDDHJED@TG@
  01665	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10039: 
; 10040: 	////////////////////////////////////////
; 10041: 
; 10042: 	fvalue = bound (current_flight_dynamics->left_engine_temp.value, 0.0, 999.0);

  0166a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0166f	f3 0f 5a 80 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7364]
  01677	0f 57 c9	 xorps	 xmm1, xmm1
  0167a	66 0f 2f c8	 comisd	 xmm1, xmm0
  0167e	76 0d		 jbe	 SHORT $LN63@draw_engin
  01680	0f 57 c0	 xorps	 xmm0, xmm0
  01683	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv680[ebp], xmm0
  0168b	eb 50		 jmp	 SHORT $LN64@draw_engin
$LN63@draw_engin:
  0168d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01693	f3 0f 5a 81 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7364]
  0169b	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@408f380000000000
  016a3	76 12		 jbe	 SHORT $LN61@draw_engin
  016a5	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@408f380000000000
  016ad	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv679[ebp], xmm0
  016b5	eb 16		 jmp	 SHORT $LN62@draw_engin
$LN61@draw_engin:
  016b7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  016bd	f3 0f 5a 82 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7364]
  016c5	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv679[ebp], xmm0
$LN62@draw_engin:
  016cd	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv679[ebp]
  016d5	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv680[ebp], xmm0
$LN64@draw_engin:
  016dd	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv680[ebp]
  016e5	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 10043: 
; 10044: 	convert_float_to_int (fvalue, &ivalue);

  016ea	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  016ed	50		 push	 eax
  016ee	51		 push	 ecx
  016ef	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  016f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016f9	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 10045: 
; 10046: 	sprintf (s, "%03d", ivalue);

  016fe	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  01701	50		 push	 eax
  01702	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  01707	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  0170a	51		 push	 ecx
  0170b	e8 00 00 00 00	 call	 _sprintf
  01710	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10047: 
; 10048: 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  01713	51		 push	 ecx
  01714	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  0171c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01721	51		 push	 ecx
  01722	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0172a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0172f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10049: 
; 10050: 	x_adjust = get_mono_font_string_width (s) * -0.5;

  01734	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01737	50		 push	 eax
  01738	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0173d	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1417[ebp]
  01743	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1417[ebp]
  0174b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01753	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01757	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10051: 
; 10052: 	set_mono_font_rel_position (x_adjust, 0.0);

  0175c	51		 push	 ecx
  0175d	0f 57 c0	 xorps	 xmm0, xmm0
  01760	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01765	51		 push	 ecx
  01766	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0176b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01770	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10053: 
; 10054: 	print_mono_font_string (s);

  01775	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01778	50		 push	 eax
  01779	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10055: 
; 10056: 	////////////////////////////////////////
; 10057: 
; 10058: 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 1000.0);

  0177e	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  01783	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@408f400000000000
  0178b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0178f	51		 push	 ecx
  01790	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01795	51		 push	 ecx
  01796	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  0179b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017a0	51		 push	 ecx
  017a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf451eb9
  017a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017ae	51		 push	 ecx
  017af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  017b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017bc	51		 push	 ecx
  017bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf547ae1
  017c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017ca	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 10059: 
; 10060: 	#undef X_ORG
; 10061: 	#undef Y_ORG
; 10062: 	#undef WIDTH
; 10063: 	#undef HEIGHT
; 10064: 
; 10065: 	//
; 10066: 	// TGT2
; 10067: 	//
; 10068: 
; 10069: 	#define X_ORG	((float) (0.8))
; 10070: 	#define Y_ORG	((float) (0.5))
; 10071: 	#define WIDTH	((float) (0.06))
; 10072: 	#define HEIGHT	((float) (0.8333))
; 10073: 
; 10074: 	// seems to be a compiler bug, have to use a float variable for this value, sending it
; 10075: 	// as a constant as a function parameter will use a double (even though
; 10076: 	// definition is available and says const float), which causes later parameters
; 10077: 	// to be wrong
; 10078: 	bottom_edge = (Y_ORG - HEIGHT);

  017cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beaaa64c
  017d7	f3 0f 11 45 9c	 movss	 DWORD PTR _bottom_edge$[ebp], xmm0

; 10079: 
; 10080: 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.2);

  017dc	51		 push	 ecx
  017dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  017e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017ea	51		 push	 ecx
  017eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  017f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017f8	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10081: 
; 10082: 	x_adjust = get_mono_font_string_width ("TG") * -0.5;

  017fd	68 00 00 00 00	 push	 OFFSET ??_C@_02NEDDHJED@TG@
  01802	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01807	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1441[ebp]
  0180d	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1441[ebp]
  01815	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0181d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01821	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10083: 
; 10084: 	set_mono_font_rel_position (x_adjust, 0.0);

  01826	51		 push	 ecx
  01827	0f 57 c0	 xorps	 xmm0, xmm0
  0182a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0182f	51		 push	 ecx
  01830	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01835	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0183a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10085: 
; 10086: 	print_mono_font_string ("TG");

  0183f	68 00 00 00 00	 push	 OFFSET ??_C@_02NEDDHJED@TG@
  01844	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10087: 
; 10088: 	////////////////////////////////////////
; 10089: 
; 10090: 	fvalue = bound (current_flight_dynamics->right_engine_temp.value, 0.0, 999.0);

  01849	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0184e	f3 0f 5a 80 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7460]
  01856	0f 57 c9	 xorps	 xmm1, xmm1
  01859	66 0f 2f c8	 comisd	 xmm1, xmm0
  0185d	76 0d		 jbe	 SHORT $LN67@draw_engin
  0185f	0f 57 c0	 xorps	 xmm0, xmm0
  01862	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv727[ebp], xmm0
  0186a	eb 50		 jmp	 SHORT $LN68@draw_engin
$LN67@draw_engin:
  0186c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01872	f3 0f 5a 81 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7460]
  0187a	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@408f380000000000
  01882	76 12		 jbe	 SHORT $LN65@draw_engin
  01884	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@408f380000000000
  0188c	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv726[ebp], xmm0
  01894	eb 16		 jmp	 SHORT $LN66@draw_engin
$LN65@draw_engin:
  01896	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0189c	f3 0f 5a 82 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7460]
  018a4	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv726[ebp], xmm0
$LN66@draw_engin:
  018ac	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv726[ebp]
  018b4	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv727[ebp], xmm0
$LN68@draw_engin:
  018bc	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv727[ebp]
  018c4	f3 0f 11 45 94	 movss	 DWORD PTR _fvalue$[ebp], xmm0

; 10091: 
; 10092: 	convert_float_to_int (fvalue, &ivalue);

  018c9	8d 45 a0	 lea	 eax, DWORD PTR _ivalue$[ebp]
  018cc	50		 push	 eax
  018cd	51		 push	 ecx
  018ce	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fvalue$[ebp]
  018d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018d8	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 10093: 
; 10094: 	sprintf (s, "%03d", ivalue);

  018dd	8b 45 a0	 mov	 eax, DWORD PTR _ivalue$[ebp]
  018e0	50		 push	 eax
  018e1	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  018e6	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  018e9	51		 push	 ecx
  018ea	e8 00 00 00 00	 call	 _sprintf
  018ef	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10095: 
; 10096: 	set_2d_mono_font_position (X_ORG, Y_ORG + 0.1);

  018f2	51		 push	 ecx
  018f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  018fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01900	51		 push	 ecx
  01901	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  01909	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0190e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10097: 
; 10098: 	x_adjust = get_mono_font_string_width (s) * -0.5;

  01913	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01916	50		 push	 eax
  01917	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0191c	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR tv1467[ebp]
  01922	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1467[ebp]
  0192a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01932	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01936	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10099: 
; 10100: 	set_mono_font_rel_position (x_adjust, 0.0);

  0193b	51		 push	 ecx
  0193c	0f 57 c0	 xorps	 xmm0, xmm0
  0193f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01944	51		 push	 ecx
  01945	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0194a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0194f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10101: 
; 10102: 	print_mono_font_string (s);

  01954	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01957	50		 push	 eax
  01958	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10103: 
; 10104: 	////////////////////////////////////////
; 10105: 
; 10106: 	draw_engine_bar(X_ORG - (WIDTH * 0.5), Y_ORG, X_ORG + (WIDTH * 0.5), bottom_edge, fvalue / 1000.0);

  0195d	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _fvalue$[ebp]
  01962	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@408f400000000000
  0196a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0196e	51		 push	 ecx
  0196f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01974	51		 push	 ecx
  01975	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _bottom_edge$[ebp]
  0197a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0197f	51		 push	 ecx
  01980	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f547ae1
  01988	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0198d	51		 push	 ecx
  0198e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  01996	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0199b	51		 push	 ecx
  0199c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb9
  019a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019a9	e8 00 00 00 00	 call	 ?draw_engine_bar@@YGXMMMMM@Z ; draw_engine_bar

; 10107: 
; 10108: 	#undef X_ORG
; 10109: 	#undef Y_ORG
; 10110: 	#undef WIDTH
; 10111: 	#undef HEIGHT
; 10112: }

  019ae	5f		 pop	 edi
  019af	5e		 pop	 esi
  019b0	5b		 pop	 ebx
  019b1	8b e5		 mov	 esp, ebp
  019b3	5d		 pop	 ebp
  019b4	c3		 ret	 0
?draw_engine_display_mfd@@YGXXZ ENDP			; draw_engine_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_engine_bar@@YGXMMMMM@Z
_TEXT	SEGMENT
_y2$ = -16						; size = 4
_y1$ = -12						; size = 4
_x2$ = -8						; size = 4
_x1$ = -4						; size = 4
_f_x1$ = 8						; size = 4
_f_y1$ = 12						; size = 4
_f_x2$ = 16						; size = 4
_f_y2$ = 20						; size = 4
_fvalue$ = 24						; size = 4
?draw_engine_bar@@YGXMMMMM@Z PROC			; draw_engine_bar, COMDAT

; 9526 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 9527 : 	int x1, x2, y1, y2;
; 9528 : 
; 9529 : 	draw_2d_box(f_x1, f_y1, f_x2, f_y2, FALSE, FALSE, MFD_COLOUR1);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00017	52		 push	 edx
  00018	6a 00		 push	 0
  0001a	6a 00		 push	 0
  0001c	51		 push	 ecx
  0001d	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _f_y2$[ebp]
  00022	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00027	51		 push	 ecx
  00028	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _f_x2$[ebp]
  0002d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00032	51		 push	 ecx
  00033	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f_y1$[ebp]
  00038	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003d	51		 push	 ecx
  0003e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _f_x1$[ebp]
  00043	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00048	e8 00 00 00 00	 call	 ?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z ; draw_2d_box

; 9530 : 
; 9531 : 	get_2d_int_screen_coordinates (f_x1, f_y2 + (fvalue * (f_y1 - f_y2)), &x1, &y1);

  0004d	8d 45 f4	 lea	 eax, DWORD PTR _y1$[ebp]
  00050	50		 push	 eax
  00051	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  00054	51		 push	 ecx
  00055	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f_y1$[ebp]
  0005a	f3 0f 5c 45 14	 subss	 xmm0, DWORD PTR _f_y2$[ebp]
  0005f	f3 0f 59 45 18	 mulss	 xmm0, DWORD PTR _fvalue$[ebp]
  00064	f3 0f 58 45 14	 addss	 xmm0, DWORD PTR _f_y2$[ebp]
  00069	51		 push	 ecx
  0006a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006f	51		 push	 ecx
  00070	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _f_x1$[ebp]
  00075	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007a	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 9532 : 	get_2d_int_screen_coordinates (f_x2, f_y2, &x2, &y2);

  0007f	8d 45 f0	 lea	 eax, DWORD PTR _y2$[ebp]
  00082	50		 push	 eax
  00083	8d 4d f8	 lea	 ecx, DWORD PTR _x2$[ebp]
  00086	51		 push	 ecx
  00087	51		 push	 ecx
  00088	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _f_y2$[ebp]
  0008d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00092	51		 push	 ecx
  00093	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _f_x2$[ebp]
  00098	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009d	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 9533 : 	set_block (x1, y1, x2, y2, MFD_COLOUR1);

  000a2	b8 04 00 00 00	 mov	 eax, 4
  000a7	6b c8 00	 imul	 ecx, eax, 0
  000aa	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000b0	52		 push	 edx
  000b1	8b 45 f0	 mov	 eax, DWORD PTR _y2$[ebp]
  000b4	50		 push	 eax
  000b5	8b 4d f8	 mov	 ecx, DWORD PTR _x2$[ebp]
  000b8	51		 push	 ecx
  000b9	8b 55 f4	 mov	 edx, DWORD PTR _y1$[ebp]
  000bc	52		 push	 edx
  000bd	8b 45 fc	 mov	 eax, DWORD PTR _x1$[ebp]
  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9534 : }

  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi
  000c8	5b		 pop	 ebx
  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c2 14 00	 ret	 20			; 00000014H
?draw_engine_bar@@YGXMMMMM@Z ENDP			; draw_engine_bar
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_system_display_side_mfd@@YGXXZ
_TEXT	SEGMENT
tv257 = -72						; size = 4
tv248 = -72						; size = 4
tv241 = -72						; size = 4
tv234 = -72						; size = 4
tv225 = -72						; size = 4
tv216 = -72						; size = 4
tv207 = -72						; size = 4
tv198 = -72						; size = 4
tv189 = -72						; size = 4
tv180 = -72						; size = 4
_y_adjust$ = -4						; size = 4
?draw_system_display_side_mfd@@YGXXZ PROC		; draw_system_display_side_mfd, COMDAT

; 9446 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 9447 : 	float
; 9448 : 		y_adjust;
; 9449 : 
; 9450 : 	if (draw_large_mfd)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00010	74 11		 je	 SHORT $LN2@draw_syste

; 9451 : 	{
; 9452 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  00012	6a 05		 push	 5
  00014	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 9453 : 
; 9454 : 		y_adjust = 0.0;

  00019	0f 57 c0	 xorps	 xmm0, xmm0
  0001c	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 9455 : 	}
; 9456 : 	else

  00021	eb 0f		 jmp	 SHORT $LN3@draw_syste
$LN2@draw_syste:

; 9457 : 	{
; 9458 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  00023	6a 00		 push	 0
  00025	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 9459 : 
; 9460 : 		y_adjust = 0.0;

  0002a	0f 57 c0	 xorps	 xmm0, xmm0
  0002d	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN3@draw_syste:

; 9461 : 	}
; 9462 : 
; 9463 : 	y_adjust = print_side_mfd_system_message ("RADAR", "FAIL", comanche_damage.radar, y_adjust);

  00032	51		 push	 ecx
  00033	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00038	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00042	83 e0 01	 and	 eax, 1
  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_05IHELJBBC@RADAR@
  00050	e8 00 00 00 00	 call	 ?print_side_mfd_system_message@@YGMPAD0HM@Z ; print_side_mfd_system_message
  00055	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9464 : 
; 9465 : 	y_adjust = print_side_mfd_system_message ("FLIR", "FAIL", comanche_damage.flir, y_adjust);

  00058	51		 push	 ecx
  00059	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0005e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00068	d1 e8		 shr	 eax, 1
  0006a	83 e0 01	 and	 eax, 1
  0006d	50		 push	 eax
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_04MIGKMLBH@FLIR@
  00078	e8 00 00 00 00	 call	 ?print_side_mfd_system_message@@YGMPAD0HM@Z ; print_side_mfd_system_message
  0007d	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9466 : 
; 9467 : 	y_adjust = print_side_mfd_system_message ("DTV", "FAIL", comanche_damage.dtv, y_adjust);

  00080	51		 push	 ecx
  00081	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00086	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00090	c1 e8 02	 shr	 eax, 2
  00093	83 e0 01	 and	 eax, 1
  00096	50		 push	 eax
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_03ENJJJDDH@DTV@
  000a1	e8 00 00 00 00	 call	 ?print_side_mfd_system_message@@YGMPAD0HM@Z ; print_side_mfd_system_message
  000a6	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9468 : 
; 9469 : 	//DVO REMOVED//
; 9470 : 	/*
; 9471 : 	y_adjust = print_side_mfd_system_message ("DVO", "FAIL", comanche_damage.dvo, y_adjust);
; 9472 : 	*/
; 9473 : 	//DVO REMOVED//
; 9474 : 
; 9475 : 	y_adjust = print_side_mfd_system_message ("LASER DES", "FAIL", comanche_damage.laser_designator, y_adjust);

  000a9	51		 push	 ecx
  000aa	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  000b9	c1 e8 04	 shr	 eax, 4
  000bc	83 e0 01	 and	 eax, 1
  000bf	50		 push	 eax
  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_09OPLGMBDG@LASER?5DES@
  000ca	e8 00 00 00 00	 call	 ?print_side_mfd_system_message@@YGMPAD0HM@Z ; print_side_mfd_system_message
  000cf	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9476 : 
; 9477 : 	y_adjust = print_side_mfd_system_message ("RADAR JAM", "FAIL", comanche_damage.radar_jammer, y_adjust);

  000d2	51		 push	 ecx
  000d3	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  000e2	c1 e8 05	 shr	 eax, 5
  000e5	83 e0 01	 and	 eax, 1
  000e8	50		 push	 eax
  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_09GHHHIMHM@RADAR?5JAM@
  000f3	e8 00 00 00 00	 call	 ?print_side_mfd_system_message@@YGMPAD0HM@Z ; print_side_mfd_system_message
  000f8	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9478 : 
; 9479 : 	y_adjust = print_side_mfd_system_message ("IR JAMMER", "FAIL", comanche_damage.infra_red_jammer, y_adjust);

  000fb	51		 push	 ecx
  000fc	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00101	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  0010b	c1 e8 06	 shr	 eax, 6
  0010e	83 e0 01	 and	 eax, 1
  00111	50		 push	 eax
  00112	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00117	68 00 00 00 00	 push	 OFFSET ??_C@_09MILGCPFO@IR?5JAMMER@
  0011c	e8 00 00 00 00	 call	 ?print_side_mfd_system_message@@YGMPAD0HM@Z ; print_side_mfd_system_message
  00121	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9480 : 
; 9481 : 	y_adjust = print_side_mfd_system_message ("NAV COMP", "FAIL", comanche_damage.navigation_computer, y_adjust);

  00124	51		 push	 ecx
  00125	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0012a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00134	c1 e8 07	 shr	 eax, 7
  00137	83 e0 01	 and	 eax, 1
  0013a	50		 push	 eax
  0013b	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00140	68 00 00 00 00	 push	 OFFSET ??_C@_08LDOFABDJ@NAV?5COMP@
  00145	e8 00 00 00 00	 call	 ?print_side_mfd_system_message@@YGMPAD0HM@Z ; print_side_mfd_system_message
  0014a	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9482 : 
; 9483 : 	y_adjust = print_side_mfd_system_message ("COMMS", "FAIL", comanche_damage.communications, y_adjust);

  0014d	51		 push	 ecx
  0014e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00153	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00158	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  0015d	c1 e8 08	 shr	 eax, 8
  00160	83 e0 01	 and	 eax, 1
  00163	50		 push	 eax
  00164	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00169	68 00 00 00 00	 push	 OFFSET ??_C@_05JNPIHJOC@COMMS@
  0016e	e8 00 00 00 00	 call	 ?print_side_mfd_system_message@@YGMPAD0HM@Z ; print_side_mfd_system_message
  00173	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9484 : 
; 9485 : 	y_adjust = print_side_mfd_system_message ("RADAR WARN", "FAIL", comanche_damage.radar_warning_system, y_adjust);

  00176	51		 push	 ecx
  00177	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0017c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00181	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00186	c1 e8 09	 shr	 eax, 9
  00189	83 e0 01	 and	 eax, 1
  0018c	50		 push	 eax
  0018d	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00192	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LICEJPGO@RADAR?5WARN@
  00197	e8 00 00 00 00	 call	 ?print_side_mfd_system_message@@YGMPAD0HM@Z ; print_side_mfd_system_message
  0019c	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9486 : 
; 9487 : 	y_adjust = print_side_mfd_system_message ("HIDSS", "FAIL", comanche_damage.hidss, y_adjust);

  0019f	51		 push	 ecx
  001a0	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  001a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  001af	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  001b2	83 e0 01	 and	 eax, 1
  001b5	50		 push	 eax
  001b6	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  001bb	68 00 00 00 00	 push	 OFFSET ??_C@_05BDMPLNHB@HIDSS@
  001c0	e8 00 00 00 00	 call	 ?print_side_mfd_system_message@@YGMPAD0HM@Z ; print_side_mfd_system_message
  001c5	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9488 : 
; 9489 : 	y_adjust = print_side_mfd_system_message ("PNVS", "FAIL", comanche_damage.pnvs, y_adjust);

  001c8	51		 push	 ecx
  001c9	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  001ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  001d8	c1 e8 14	 shr	 eax, 20			; 00000014H
  001db	83 e0 01	 and	 eax, 1
  001de	50		 push	 eax
  001df	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  001e4	68 00 00 00 00	 push	 OFFSET ??_C@_04IDKCLELC@PNVS@
  001e9	e8 00 00 00 00	 call	 ?print_side_mfd_system_message@@YGMPAD0HM@Z ; print_side_mfd_system_message
  001ee	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9490 : 
; 9491 : 	y_adjust = print_side_mfd_system_message ("STABILISER", "FAIL", get_dynamics_damage_type (DYNAMICS_DAMAGE_STABILISER), y_adjust);

  001f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  001f6	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  001fc	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  00202	74 09		 je	 SHORT $LN7@draw_syste
  00204	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv180[ebp], 1
  0020b	eb 07		 jmp	 SHORT $LN8@draw_syste
$LN7@draw_syste:
  0020d	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv180[ebp], 0
$LN8@draw_syste:
  00214	51		 push	 ecx
  00215	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0021a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021f	8b 55 b8	 mov	 edx, DWORD PTR tv180[ebp]
  00222	52		 push	 edx
  00223	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00228	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LMAEBBOE@STABILISER@
  0022d	e8 00 00 00 00	 call	 ?print_side_mfd_system_message@@YGMPAD0HM@Z ; print_side_mfd_system_message
  00232	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9492 : 
; 9493 : 	y_adjust = print_side_mfd_system_message ("MAIN ROTOR", "FAIL", get_dynamics_damage_type (DYNAMICS_DAMAGE_MAIN_ROTOR), y_adjust);

  00235	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0023a	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00240	83 e1 02	 and	 ecx, 2
  00243	74 09		 je	 SHORT $LN9@draw_syste
  00245	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv189[ebp], 1
  0024c	eb 07		 jmp	 SHORT $LN10@draw_syste
$LN9@draw_syste:
  0024e	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv189[ebp], 0
$LN10@draw_syste:
  00255	51		 push	 ecx
  00256	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0025b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00260	8b 55 b8	 mov	 edx, DWORD PTR tv189[ebp]
  00263	52		 push	 edx
  00264	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00269	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FFIGCBMA@MAIN?5ROTOR@
  0026e	e8 00 00 00 00	 call	 ?print_side_mfd_system_message@@YGMPAD0HM@Z ; print_side_mfd_system_message
  00273	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9494 : 
; 9495 : 	y_adjust = print_side_mfd_system_message ("TAIL ROTOR", "DMGD", get_dynamics_damage_type (DYNAMICS_DAMAGE_TAIL_ROTOR), y_adjust);

  00276	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0027b	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00281	83 e1 04	 and	 ecx, 4
  00284	74 09		 je	 SHORT $LN11@draw_syste
  00286	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv198[ebp], 1
  0028d	eb 07		 jmp	 SHORT $LN12@draw_syste
$LN11@draw_syste:
  0028f	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv198[ebp], 0
$LN12@draw_syste:
  00296	51		 push	 ecx
  00297	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0029c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a1	8b 55 b8	 mov	 edx, DWORD PTR tv198[ebp]
  002a4	52		 push	 edx
  002a5	68 00 00 00 00	 push	 OFFSET ??_C@_04BMBAGHMP@DMGD@
  002aa	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MCBINMPD@TAIL?5ROTOR@
  002af	e8 00 00 00 00	 call	 ?print_side_mfd_system_message@@YGMPAD0HM@Z ; print_side_mfd_system_message
  002b4	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9496 : 
; 9497 : 	y_adjust = print_side_mfd_system_message ("L ENGINE", "DMGD", get_dynamics_damage_type (DYNAMICS_DAMAGE_LEFT_ENGINE), y_adjust);

  002b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002bc	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  002c2	83 e1 08	 and	 ecx, 8
  002c5	74 09		 je	 SHORT $LN13@draw_syste
  002c7	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv207[ebp], 1
  002ce	eb 07		 jmp	 SHORT $LN14@draw_syste
$LN13@draw_syste:
  002d0	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv207[ebp], 0
$LN14@draw_syste:
  002d7	51		 push	 ecx
  002d8	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e2	8b 55 b8	 mov	 edx, DWORD PTR tv207[ebp]
  002e5	52		 push	 edx
  002e6	68 00 00 00 00	 push	 OFFSET ??_C@_04BMBAGHMP@DMGD@
  002eb	68 00 00 00 00	 push	 OFFSET ??_C@_08ICMALC@L?5ENGINE@
  002f0	e8 00 00 00 00	 call	 ?print_side_mfd_system_message@@YGMPAD0HM@Z ; print_side_mfd_system_message
  002f5	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9498 : 
; 9499 : 	y_adjust = print_side_mfd_system_message ("SPU", "DMGD", get_dynamics_damage_type (DYNAMICS_DAMAGE_APU), y_adjust);

  002f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002fd	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00303	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  00309	74 09		 je	 SHORT $LN15@draw_syste
  0030b	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv216[ebp], 1
  00312	eb 07		 jmp	 SHORT $LN16@draw_syste
$LN15@draw_syste:
  00314	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv216[ebp], 0
$LN16@draw_syste:
  0031b	51		 push	 ecx
  0031c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00321	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00326	8b 55 b8	 mov	 edx, DWORD PTR tv216[ebp]
  00329	52		 push	 edx
  0032a	68 00 00 00 00	 push	 OFFSET ??_C@_04BMBAGHMP@DMGD@
  0032f	68 00 00 00 00	 push	 OFFSET ??_C@_03KMHDAHAO@SPU@
  00334	e8 00 00 00 00	 call	 ?print_side_mfd_system_message@@YGMPAD0HM@Z ; print_side_mfd_system_message
  00339	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9500 : 
; 9501 : 	y_adjust = print_side_mfd_system_message ("R ENGINE", "DMGD", get_dynamics_damage_type (DYNAMICS_DAMAGE_RIGHT_ENGINE), y_adjust);

  0033c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00341	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00347	83 e1 10	 and	 ecx, 16			; 00000010H
  0034a	74 09		 je	 SHORT $LN17@draw_syste
  0034c	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv225[ebp], 1
  00353	eb 07		 jmp	 SHORT $LN18@draw_syste
$LN17@draw_syste:
  00355	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv225[ebp], 0
$LN18@draw_syste:
  0035c	51		 push	 ecx
  0035d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00362	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00367	8b 55 b8	 mov	 edx, DWORD PTR tv225[ebp]
  0036a	52		 push	 edx
  0036b	68 00 00 00 00	 push	 OFFSET ??_C@_04BMBAGHMP@DMGD@
  00370	68 00 00 00 00	 push	 OFFSET ??_C@_08GEIAFJFB@R?5ENGINE@
  00375	e8 00 00 00 00	 call	 ?print_side_mfd_system_message@@YGMPAD0HM@Z ; print_side_mfd_system_message
  0037a	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9502 : 
; 9503 : 	y_adjust = print_side_mfd_system_message ("HYD PRESS", "LOW", get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_HYDRAULICS), y_adjust);

  0037d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00382	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00388	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  0038e	74 09		 je	 SHORT $LN19@draw_syste
  00390	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv234[ebp], 1
  00397	eb 07		 jmp	 SHORT $LN20@draw_syste
$LN19@draw_syste:
  00399	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv234[ebp], 0
$LN20@draw_syste:
  003a0	51		 push	 ecx
  003a1	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  003a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ab	8b 55 b8	 mov	 edx, DWORD PTR tv234[ebp]
  003ae	52		 push	 edx
  003af	68 00 00 00 00	 push	 OFFSET ??_C@_03IBEFMGAI@LOW@
  003b4	68 00 00 00 00	 push	 OFFSET ??_C@_09DAHIHAFG@HYD?5PRESS@
  003b9	e8 00 00 00 00	 call	 ?print_side_mfd_system_message@@YGMPAD0HM@Z ; print_side_mfd_system_message
  003be	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9504 : 
; 9505 : 	if (get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_OIL_PRESSURE))

  003c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  003c6	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  003cc	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  003d2	74 09		 je	 SHORT $LN21@draw_syste
  003d4	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv241[ebp], 1
  003db	eb 07		 jmp	 SHORT $LN22@draw_syste
$LN21@draw_syste:
  003dd	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv241[ebp], 0
$LN22@draw_syste:
  003e4	83 7d b8 00	 cmp	 DWORD PTR tv241[ebp], 0
  003e8	74 46		 je	 SHORT $LN4@draw_syste

; 9506 : 	{
; 9507 : 		y_adjust = print_side_mfd_system_message ("OIL PRESS", "LOW", get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_OIL_PRESSURE), y_adjust);

  003ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  003ef	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  003f5	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  003fb	74 09		 je	 SHORT $LN23@draw_syste
  003fd	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv248[ebp], 1
  00404	eb 07		 jmp	 SHORT $LN24@draw_syste
$LN23@draw_syste:
  00406	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv248[ebp], 0
$LN24@draw_syste:
  0040d	51		 push	 ecx
  0040e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00413	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00418	8b 55 b8	 mov	 edx, DWORD PTR tv248[ebp]
  0041b	52		 push	 edx
  0041c	68 00 00 00 00	 push	 OFFSET ??_C@_03IBEFMGAI@LOW@
  00421	68 00 00 00 00	 push	 OFFSET ??_C@_09KNIBDCOL@OIL?5PRESS@
  00426	e8 00 00 00 00	 call	 ?print_side_mfd_system_message@@YGMPAD0HM@Z ; print_side_mfd_system_message
  0042b	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9508 : 	}
; 9509 : 	else

  0042e	eb 44		 jmp	 SHORT $LN5@draw_syste
$LN4@draw_syste:

; 9510 : 	{
; 9511 : 		y_adjust = print_side_mfd_system_message ("OIL PRESS", "HIGH", get_dynamics_damage_type (DYNAMICS_DAMAGE_HIGH_OIL_PRESSURE), y_adjust);

  00430	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00435	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  0043b	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  00441	74 09		 je	 SHORT $LN25@draw_syste
  00443	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv257[ebp], 1
  0044a	eb 07		 jmp	 SHORT $LN26@draw_syste
$LN25@draw_syste:
  0044c	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv257[ebp], 0
$LN26@draw_syste:
  00453	51		 push	 ecx
  00454	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00459	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0045e	8b 55 b8	 mov	 edx, DWORD PTR tv257[ebp]
  00461	52		 push	 edx
  00462	68 00 00 00 00	 push	 OFFSET ??_C@_04PKDHFCJF@HIGH@
  00467	68 00 00 00 00	 push	 OFFSET ??_C@_09KNIBDCOL@OIL?5PRESS@
  0046c	e8 00 00 00 00	 call	 ?print_side_mfd_system_message@@YGMPAD0HM@Z ; print_side_mfd_system_message
  00471	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]
$LN5@draw_syste:

; 9512 : 	}
; 9513 : }

  00474	5f		 pop	 edi
  00475	5e		 pop	 esi
  00476	5b		 pop	 ebx
  00477	8b e5		 mov	 esp, ebp
  00479	5d		 pop	 ebp
  0047a	c3		 ret	 0
?draw_system_display_side_mfd@@YGXXZ ENDP		; draw_system_display_side_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?print_side_mfd_system_message@@YGMPAD0HM@Z
_TEXT	SEGMENT
tv160 = -76						; size = 4
_width$ = -8						; size = 4
_status$ = -4						; size = 4
_equipment$ = 8						; size = 4
_warning$ = 12						; size = 4
_fail$ = 16						; size = 4
_y_adjust$ = 20						; size = 4
?print_side_mfd_system_message@@YGMPAD0HM@Z PROC	; print_side_mfd_system_message, COMDAT

; 9398 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 9399 : 	char
; 9400 : 		*status;
; 9401 : 
; 9402 : 	float
; 9403 : 		width;
; 9404 : 
; 9405 : 	ASSERT (equipment);

  00009	83 7d 08 00	 cmp	 DWORD PTR _equipment$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@print_side
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_side_mfd_system_message@@YGMPAD0HM@Z@4JA
  00014	83 c0 07	 add	 eax, 7
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_09FJJPPKDN@equipment@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@print_side:

; 9406 : 
; 9407 : 	ASSERT (warning);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _warning$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@print_side
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_side_mfd_system_message@@YGMPAD0HM@Z@4JA
  00032	83 c0 09	 add	 eax, 9
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_07FPLKDJGL@warning@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@print_side:

; 9408 : 
; 9409 : 	if (fail)

  00045	83 7d 10 00	 cmp	 DWORD PTR _fail$[ebp], 0
  00049	74 1c		 je	 SHORT $LN4@print_side

; 9410 : 	{
; 9411 : 		set_mono_font_colour (MFD_COLOUR_RED);

  0004b	b8 04 00 00 00	 mov	 eax, 4
  00050	6b c8 0f	 imul	 ecx, eax, 15
  00053	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00059	52		 push	 edx
  0005a	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 9412 : 
; 9413 : 		status = warning;

  0005f	8b 45 0c	 mov	 eax, DWORD PTR _warning$[ebp]
  00062	89 45 fc	 mov	 DWORD PTR _status$[ebp], eax

; 9414 : 	}
; 9415 : 	else

  00065	eb 1b		 jmp	 SHORT $LN5@print_side
$LN4@print_side:

; 9416 : 	{
; 9417 : 		set_mono_font_colour (MFD_COLOUR_WHITE);

  00067	b8 04 00 00 00	 mov	 eax, 4
  0006c	6b c8 13	 imul	 ecx, eax, 19
  0006f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00075	52		 push	 edx
  00076	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 9418 : 
; 9419 : 		status = "OK";

  0007b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _status$[ebp], OFFSET ??_C@_02GIPFHKNO@OK@
$LN5@print_side:

; 9420 : 	}
; 9421 : 
; 9422 : 	set_2d_mono_font_position (-0.9, 0.9);

  00082	51		 push	 ecx
  00083	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0008b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00090	51		 push	 ecx
  00091	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  00099	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9423 : 
; 9424 : 	set_mono_font_rel_position (1.0, y_adjust);

  000a3	51		 push	 ecx
  000a4	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ae	51		 push	 ecx
  000af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bc	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9425 : 
; 9426 : 	print_mono_font_string (equipment);

  000c1	8b 45 08	 mov	 eax, DWORD PTR _equipment$[ebp]
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9427 : 
; 9428 : 	width = get_mono_font_string_width (status);

  000ca	8b 45 fc	 mov	 eax, DWORD PTR _status$[ebp]
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  000d3	d9 5d f8	 fstp	 DWORD PTR _width$[ebp]

; 9429 : 
; 9430 : 	set_2d_mono_font_position (0.1, 0.9);

  000d6	51		 push	 ecx
  000d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  000df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e4	51		 push	 ecx
  000e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  000ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f2	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9431 : 
; 9432 : 	set_mono_font_rel_position (-width, y_adjust);

  000f7	51		 push	 ecx
  000f8	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00102	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width$[ebp]
  00107	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0010e	51		 push	 ecx
  0010f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00114	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9433 : 
; 9434 : 	print_mono_font_string (status);

  00119	8b 45 fc	 mov	 eax, DWORD PTR _status$[ebp]
  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9435 : 
; 9436 : 	y_adjust += get_mono_font_char_height ('X');

  00122	6a 58		 push	 88			; 00000058H
  00124	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  00129	d9 5d b4	 fstp	 DWORD PTR tv160[ebp]
  0012c	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR tv160[ebp]
  00131	f3 0f 58 45 14	 addss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00136	f3 0f 11 45 14	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 9437 : 
; 9438 : 	return (y_adjust);

  0013b	d9 45 14	 fld	 DWORD PTR _y_adjust$[ebp]

; 9439 : }

  0013e	5f		 pop	 edi
  0013f	5e		 pop	 esi
  00140	5b		 pop	 ebx
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c2 10 00	 ret	 16			; 00000010H
?print_side_mfd_system_message@@YGMPAD0HM@Z ENDP	; print_side_mfd_system_message
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_system_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv257 = -72						; size = 4
tv248 = -72						; size = 4
tv241 = -72						; size = 4
tv234 = -72						; size = 4
tv225 = -72						; size = 4
tv216 = -72						; size = 4
tv207 = -72						; size = 4
tv198 = -72						; size = 4
tv189 = -72						; size = 4
tv180 = -72						; size = 4
_y_adjust$ = -4						; size = 4
?draw_system_display_mfd@@YGXXZ PROC			; draw_system_display_mfd, COMDAT

; 9324 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 9325 : 	float
; 9326 : 		y_adjust;
; 9327 : 
; 9328 : 	if (draw_large_mfd)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00010	74 11		 je	 SHORT $LN2@draw_syste

; 9329 : 	{
; 9330 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  00012	6a 05		 push	 5
  00014	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 9331 : 
; 9332 : 		y_adjust = 0.0;

  00019	0f 57 c0	 xorps	 xmm0, xmm0
  0001c	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 9333 : 	}
; 9334 : 	else

  00021	eb 0f		 jmp	 SHORT $LN3@draw_syste
$LN2@draw_syste:

; 9335 : 	{
; 9336 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  00023	6a 00		 push	 0
  00025	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 9337 : 
; 9338 : 		y_adjust = 0.0;

  0002a	0f 57 c0	 xorps	 xmm0, xmm0
  0002d	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN3@draw_syste:

; 9339 : 	}
; 9340 : 
; 9341 : 	y_adjust = print_main_mfd_system_message ("RADAR", "FAIL", comanche_damage.radar, y_adjust);

  00032	51		 push	 ecx
  00033	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00038	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00042	83 e0 01	 and	 eax, 1
  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_05IHELJBBC@RADAR@
  00050	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  00055	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9342 : 
; 9343 : 	y_adjust = print_main_mfd_system_message ("FLIR", "FAIL", comanche_damage.flir, y_adjust);

  00058	51		 push	 ecx
  00059	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0005e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00068	d1 e8		 shr	 eax, 1
  0006a	83 e0 01	 and	 eax, 1
  0006d	50		 push	 eax
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_04MIGKMLBH@FLIR@
  00078	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  0007d	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9344 : 
; 9345 : 	y_adjust = print_main_mfd_system_message ("DTV", "FAIL", comanche_damage.dtv, y_adjust);

  00080	51		 push	 ecx
  00081	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00086	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00090	c1 e8 02	 shr	 eax, 2
  00093	83 e0 01	 and	 eax, 1
  00096	50		 push	 eax
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_03ENJJJDDH@DTV@
  000a1	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  000a6	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9346 : 
; 9347 : 	//DVO REMOVED//
; 9348 : 	/*
; 9349 : 	y_adjust = print_main_mfd_system_message ("DVO", "FAIL", comanche_damage.dvo, y_adjust);
; 9350 : 	*/
; 9351 : 	//DVO REMOVED//
; 9352 : 
; 9353 : 	y_adjust = print_main_mfd_system_message ("LASER DESIGNATOR", "FAIL", comanche_damage.laser_designator, y_adjust);

  000a9	51		 push	 ecx
  000aa	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  000b9	c1 e8 04	 shr	 eax, 4
  000bc	83 e0 01	 and	 eax, 1
  000bf	50		 push	 eax
  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@
  000ca	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  000cf	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9354 : 
; 9355 : 	y_adjust = print_main_mfd_system_message ("RADAR JAMMER", "FAIL", comanche_damage.radar_jammer, y_adjust);

  000d2	51		 push	 ecx
  000d3	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  000e2	c1 e8 05	 shr	 eax, 5
  000e5	83 e0 01	 and	 eax, 1
  000e8	50		 push	 eax
  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_0N@JDBOFCJG@RADAR?5JAMMER@
  000f3	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  000f8	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9356 : 
; 9357 : 	y_adjust = print_main_mfd_system_message ("IR JAMMER", "FAIL", comanche_damage.infra_red_jammer, y_adjust);

  000fb	51		 push	 ecx
  000fc	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00101	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  0010b	c1 e8 06	 shr	 eax, 6
  0010e	83 e0 01	 and	 eax, 1
  00111	50		 push	 eax
  00112	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00117	68 00 00 00 00	 push	 OFFSET ??_C@_09MILGCPFO@IR?5JAMMER@
  0011c	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  00121	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9358 : 
; 9359 : 	y_adjust = print_main_mfd_system_message ("NAVIGATION COMPUTER", "FAIL", comanche_damage.navigation_computer, y_adjust);

  00124	51		 push	 ecx
  00125	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0012a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00134	c1 e8 07	 shr	 eax, 7
  00137	83 e0 01	 and	 eax, 1
  0013a	50		 push	 eax
  0013b	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00140	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@
  00145	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  0014a	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9360 : 
; 9361 : 	y_adjust = print_main_mfd_system_message ("COMMUNICATIONS", "FAIL", comanche_damage.communications, y_adjust);

  0014d	51		 push	 ecx
  0014e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00153	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00158	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  0015d	c1 e8 08	 shr	 eax, 8
  00160	83 e0 01	 and	 eax, 1
  00163	50		 push	 eax
  00164	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00169	68 00 00 00 00	 push	 OFFSET ??_C@_0P@OEDGDHNF@COMMUNICATIONS@
  0016e	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  00173	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9362 : 
; 9363 : 	y_adjust = print_main_mfd_system_message ("RADAR WARNING SYSTEM", "FAIL", comanche_damage.radar_warning_system, y_adjust);

  00176	51		 push	 ecx
  00177	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0017c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00181	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00186	c1 e8 09	 shr	 eax, 9
  00189	83 e0 01	 and	 eax, 1
  0018c	50		 push	 eax
  0018d	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00192	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@
  00197	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  0019c	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9364 : 
; 9365 : 	y_adjust = print_main_mfd_system_message ("HIDSS", "FAIL", comanche_damage.hidss, y_adjust);

  0019f	51		 push	 ecx
  001a0	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  001a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  001af	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  001b2	83 e0 01	 and	 eax, 1
  001b5	50		 push	 eax
  001b6	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  001bb	68 00 00 00 00	 push	 OFFSET ??_C@_05BDMPLNHB@HIDSS@
  001c0	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  001c5	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9366 : 
; 9367 : 	y_adjust = print_main_mfd_system_message ("PNVS", "FAIL", comanche_damage.pnvs, y_adjust);

  001c8	51		 push	 ecx
  001c9	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  001ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  001d8	c1 e8 14	 shr	 eax, 20			; 00000014H
  001db	83 e0 01	 and	 eax, 1
  001de	50		 push	 eax
  001df	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  001e4	68 00 00 00 00	 push	 OFFSET ??_C@_04IDKCLELC@PNVS@
  001e9	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  001ee	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9368 : 
; 9369 : 	y_adjust = print_main_mfd_system_message ("STABILISER", "FAIL", get_dynamics_damage_type (DYNAMICS_DAMAGE_STABILISER), y_adjust);

  001f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  001f6	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  001fc	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  00202	74 09		 je	 SHORT $LN7@draw_syste
  00204	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv180[ebp], 1
  0020b	eb 07		 jmp	 SHORT $LN8@draw_syste
$LN7@draw_syste:
  0020d	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv180[ebp], 0
$LN8@draw_syste:
  00214	51		 push	 ecx
  00215	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0021a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021f	8b 55 b8	 mov	 edx, DWORD PTR tv180[ebp]
  00222	52		 push	 edx
  00223	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00228	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LMAEBBOE@STABILISER@
  0022d	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  00232	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9370 : 
; 9371 : 	y_adjust = print_main_mfd_system_message ("MAIN ROTOR", "FAIL", get_dynamics_damage_type (DYNAMICS_DAMAGE_MAIN_ROTOR), y_adjust);

  00235	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0023a	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00240	83 e1 02	 and	 ecx, 2
  00243	74 09		 je	 SHORT $LN9@draw_syste
  00245	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv189[ebp], 1
  0024c	eb 07		 jmp	 SHORT $LN10@draw_syste
$LN9@draw_syste:
  0024e	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv189[ebp], 0
$LN10@draw_syste:
  00255	51		 push	 ecx
  00256	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0025b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00260	8b 55 b8	 mov	 edx, DWORD PTR tv189[ebp]
  00263	52		 push	 edx
  00264	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00269	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FFIGCBMA@MAIN?5ROTOR@
  0026e	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  00273	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9372 : 
; 9373 : 	y_adjust = print_main_mfd_system_message ("TAIL ROTOR", "DAMAGED", get_dynamics_damage_type (DYNAMICS_DAMAGE_TAIL_ROTOR), y_adjust);

  00276	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0027b	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00281	83 e1 04	 and	 ecx, 4
  00284	74 09		 je	 SHORT $LN11@draw_syste
  00286	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv198[ebp], 1
  0028d	eb 07		 jmp	 SHORT $LN12@draw_syste
$LN11@draw_syste:
  0028f	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv198[ebp], 0
$LN12@draw_syste:
  00296	51		 push	 ecx
  00297	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0029c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a1	8b 55 b8	 mov	 edx, DWORD PTR tv198[ebp]
  002a4	52		 push	 edx
  002a5	68 00 00 00 00	 push	 OFFSET ??_C@_07OHKEFPKJ@DAMAGED@
  002aa	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MCBINMPD@TAIL?5ROTOR@
  002af	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  002b4	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9374 : 
; 9375 : 	y_adjust = print_main_mfd_system_message ("L ENGINE", "DAMAGED", get_dynamics_damage_type (DYNAMICS_DAMAGE_LEFT_ENGINE), y_adjust);

  002b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002bc	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  002c2	83 e1 08	 and	 ecx, 8
  002c5	74 09		 je	 SHORT $LN13@draw_syste
  002c7	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv207[ebp], 1
  002ce	eb 07		 jmp	 SHORT $LN14@draw_syste
$LN13@draw_syste:
  002d0	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv207[ebp], 0
$LN14@draw_syste:
  002d7	51		 push	 ecx
  002d8	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e2	8b 55 b8	 mov	 edx, DWORD PTR tv207[ebp]
  002e5	52		 push	 edx
  002e6	68 00 00 00 00	 push	 OFFSET ??_C@_07OHKEFPKJ@DAMAGED@
  002eb	68 00 00 00 00	 push	 OFFSET ??_C@_08ICMALC@L?5ENGINE@
  002f0	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  002f5	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9376 : 
; 9377 : 	y_adjust = print_main_mfd_system_message ("SPU", "DAMAGED", get_dynamics_damage_type (DYNAMICS_DAMAGE_APU), y_adjust);

  002f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002fd	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00303	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  00309	74 09		 je	 SHORT $LN15@draw_syste
  0030b	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv216[ebp], 1
  00312	eb 07		 jmp	 SHORT $LN16@draw_syste
$LN15@draw_syste:
  00314	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv216[ebp], 0
$LN16@draw_syste:
  0031b	51		 push	 ecx
  0031c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00321	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00326	8b 55 b8	 mov	 edx, DWORD PTR tv216[ebp]
  00329	52		 push	 edx
  0032a	68 00 00 00 00	 push	 OFFSET ??_C@_07OHKEFPKJ@DAMAGED@
  0032f	68 00 00 00 00	 push	 OFFSET ??_C@_03KMHDAHAO@SPU@
  00334	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  00339	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9378 : 
; 9379 : 	y_adjust = print_main_mfd_system_message ("R ENGINE", "DAMAGED", get_dynamics_damage_type (DYNAMICS_DAMAGE_RIGHT_ENGINE), y_adjust);

  0033c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00341	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00347	83 e1 10	 and	 ecx, 16			; 00000010H
  0034a	74 09		 je	 SHORT $LN17@draw_syste
  0034c	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv225[ebp], 1
  00353	eb 07		 jmp	 SHORT $LN18@draw_syste
$LN17@draw_syste:
  00355	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv225[ebp], 0
$LN18@draw_syste:
  0035c	51		 push	 ecx
  0035d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00362	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00367	8b 55 b8	 mov	 edx, DWORD PTR tv225[ebp]
  0036a	52		 push	 edx
  0036b	68 00 00 00 00	 push	 OFFSET ??_C@_07OHKEFPKJ@DAMAGED@
  00370	68 00 00 00 00	 push	 OFFSET ??_C@_08GEIAFJFB@R?5ENGINE@
  00375	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  0037a	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9380 : 
; 9381 : 	y_adjust = print_main_mfd_system_message ("HYDRAULIC PRESSURE", "LOW", get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_HYDRAULICS), y_adjust);

  0037d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00382	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00388	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  0038e	74 09		 je	 SHORT $LN19@draw_syste
  00390	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv234[ebp], 1
  00397	eb 07		 jmp	 SHORT $LN20@draw_syste
$LN19@draw_syste:
  00399	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv234[ebp], 0
$LN20@draw_syste:
  003a0	51		 push	 ecx
  003a1	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  003a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ab	8b 55 b8	 mov	 edx, DWORD PTR tv234[ebp]
  003ae	52		 push	 edx
  003af	68 00 00 00 00	 push	 OFFSET ??_C@_03IBEFMGAI@LOW@
  003b4	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@
  003b9	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  003be	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9382 : 
; 9383 : 	if (get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_OIL_PRESSURE))

  003c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  003c6	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  003cc	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  003d2	74 09		 je	 SHORT $LN21@draw_syste
  003d4	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv241[ebp], 1
  003db	eb 07		 jmp	 SHORT $LN22@draw_syste
$LN21@draw_syste:
  003dd	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv241[ebp], 0
$LN22@draw_syste:
  003e4	83 7d b8 00	 cmp	 DWORD PTR tv241[ebp], 0
  003e8	74 46		 je	 SHORT $LN4@draw_syste

; 9384 : 	{
; 9385 : 		y_adjust = print_main_mfd_system_message ("OIL PRESSURE", "LOW", get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_OIL_PRESSURE), y_adjust);

  003ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  003ef	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  003f5	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  003fb	74 09		 je	 SHORT $LN23@draw_syste
  003fd	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv248[ebp], 1
  00404	eb 07		 jmp	 SHORT $LN24@draw_syste
$LN23@draw_syste:
  00406	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv248[ebp], 0
$LN24@draw_syste:
  0040d	51		 push	 ecx
  0040e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00413	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00418	8b 55 b8	 mov	 edx, DWORD PTR tv248[ebp]
  0041b	52		 push	 edx
  0041c	68 00 00 00 00	 push	 OFFSET ??_C@_03IBEFMGAI@LOW@
  00421	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MMJNGGCF@OIL?5PRESSURE@
  00426	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  0042b	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 9386 : 	}
; 9387 : 	else

  0042e	eb 44		 jmp	 SHORT $LN5@draw_syste
$LN4@draw_syste:

; 9388 : 	{
; 9389 : 		y_adjust = print_main_mfd_system_message ("OIL PRESSURE", "HIGH", get_dynamics_damage_type (DYNAMICS_DAMAGE_HIGH_OIL_PRESSURE), y_adjust);

  00430	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00435	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  0043b	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  00441	74 09		 je	 SHORT $LN25@draw_syste
  00443	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv257[ebp], 1
  0044a	eb 07		 jmp	 SHORT $LN26@draw_syste
$LN25@draw_syste:
  0044c	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv257[ebp], 0
$LN26@draw_syste:
  00453	51		 push	 ecx
  00454	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00459	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0045e	8b 55 b8	 mov	 edx, DWORD PTR tv257[ebp]
  00461	52		 push	 edx
  00462	68 00 00 00 00	 push	 OFFSET ??_C@_04PKDHFCJF@HIGH@
  00467	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MMJNGGCF@OIL?5PRESSURE@
  0046c	e8 00 00 00 00	 call	 ?print_main_mfd_system_message@@YGMPAD0HM@Z ; print_main_mfd_system_message
  00471	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]
$LN5@draw_syste:

; 9390 : 	}
; 9391 : }

  00474	5f		 pop	 edi
  00475	5e		 pop	 esi
  00476	5b		 pop	 ebx
  00477	8b e5		 mov	 esp, ebp
  00479	5d		 pop	 ebp
  0047a	c3		 ret	 0
?draw_system_display_mfd@@YGXXZ ENDP			; draw_system_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?print_main_mfd_system_message@@YGMPAD0HM@Z
_TEXT	SEGMENT
tv160 = -76						; size = 4
_width$ = -8						; size = 4
_status$ = -4						; size = 4
_equipment$ = 8						; size = 4
_warning$ = 12						; size = 4
_fail$ = 16						; size = 4
_y_adjust$ = 20						; size = 4
?print_main_mfd_system_message@@YGMPAD0HM@Z PROC	; print_main_mfd_system_message, COMDAT

; 9276 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 9277 : 	char
; 9278 : 		*status;
; 9279 : 
; 9280 : 	float
; 9281 : 		width;
; 9282 : 
; 9283 : 	ASSERT (equipment);

  00009	83 7d 08 00	 cmp	 DWORD PTR _equipment$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@print_main
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_main_mfd_system_message@@YGMPAD0HM@Z@4JA
  00014	83 c0 07	 add	 eax, 7
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_09FJJPPKDN@equipment@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@print_main:

; 9284 : 
; 9285 : 	ASSERT (warning);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _warning$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@print_main
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_main_mfd_system_message@@YGMPAD0HM@Z@4JA
  00032	83 c0 09	 add	 eax, 9
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_07FPLKDJGL@warning@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@print_main:

; 9286 : 
; 9287 : 	if (fail)

  00045	83 7d 10 00	 cmp	 DWORD PTR _fail$[ebp], 0
  00049	74 1c		 je	 SHORT $LN4@print_main

; 9288 : 	{
; 9289 : 		set_mono_font_colour (MFD_COLOUR_RED);

  0004b	b8 04 00 00 00	 mov	 eax, 4
  00050	6b c8 0f	 imul	 ecx, eax, 15
  00053	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00059	52		 push	 edx
  0005a	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 9290 : 
; 9291 : 		status = warning;

  0005f	8b 45 0c	 mov	 eax, DWORD PTR _warning$[ebp]
  00062	89 45 fc	 mov	 DWORD PTR _status$[ebp], eax

; 9292 : 	}
; 9293 : 	else

  00065	eb 1b		 jmp	 SHORT $LN5@print_main
$LN4@print_main:

; 9294 : 	{
; 9295 : 		set_mono_font_colour (MFD_COLOUR_WHITE);

  00067	b8 04 00 00 00	 mov	 eax, 4
  0006c	6b c8 13	 imul	 ecx, eax, 19
  0006f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00075	52		 push	 edx
  00076	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 9296 : 
; 9297 : 		status = "OK";

  0007b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _status$[ebp], OFFSET ??_C@_02GIPFHKNO@OK@
$LN5@print_main:

; 9298 : 	}
; 9299 : 
; 9300 : 	set_2d_mono_font_position (-0.9, 0.92125);

  00082	51		 push	 ecx
  00083	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6bd70a
  0008b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00090	51		 push	 ecx
  00091	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  00099	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9301 : 
; 9302 : 	set_mono_font_rel_position (1.0, y_adjust);

  000a3	51		 push	 ecx
  000a4	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ae	51		 push	 ecx
  000af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bc	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9303 : 
; 9304 : 	print_mono_font_string (equipment);

  000c1	8b 45 08	 mov	 eax, DWORD PTR _equipment$[ebp]
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9305 : 
; 9306 : 	width = get_mono_font_string_width (status);

  000ca	8b 45 fc	 mov	 eax, DWORD PTR _status$[ebp]
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  000d3	d9 5d f8	 fstp	 DWORD PTR _width$[ebp]

; 9307 : 
; 9308 : 	set_2d_mono_font_position (0.9, 0.92125);

  000d6	51		 push	 ecx
  000d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6bd70a
  000df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e4	51		 push	 ecx
  000e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  000ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f2	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9309 : 
; 9310 : 	set_mono_font_rel_position (-width, y_adjust);

  000f7	51		 push	 ecx
  000f8	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00102	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width$[ebp]
  00107	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0010e	51		 push	 ecx
  0010f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00114	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9311 : 
; 9312 : 	print_mono_font_string (status);

  00119	8b 45 fc	 mov	 eax, DWORD PTR _status$[ebp]
  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9313 : 
; 9314 : 	y_adjust += get_mono_font_char_height ('X');

  00122	6a 58		 push	 88			; 00000058H
  00124	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  00129	d9 5d b4	 fstp	 DWORD PTR tv160[ebp]
  0012c	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR tv160[ebp]
  00131	f3 0f 58 45 14	 addss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00136	f3 0f 11 45 14	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 9315 : 
; 9316 : 	return (y_adjust);

  0013b	d9 45 14	 fld	 DWORD PTR _y_adjust$[ebp]

; 9317 : }

  0013e	5f		 pop	 edi
  0013f	5e		 pop	 esi
  00140	5b		 pop	 ebx
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c2 10 00	 ret	 16			; 00000010H
?print_main_mfd_system_message@@YGMPAD0HM@Z ENDP	; print_main_mfd_system_message
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_weapon_display_side_mfd@@YGXXZ
_TEXT	SEGMENT
tv2656 = -192						; size = 8
tv2554 = -192						; size = 8
tv2328 = -192						; size = 8
tv2102 = -192						; size = 8
tv1876 = -192						; size = 8
tv1690 = -192						; size = 8
tv1497 = -192						; size = 8
tv1484 = -192						; size = 8
tv1469 = -192						; size = 8
tv1456 = -192						; size = 8
tv1439 = -192						; size = 8
tv1426 = -192						; size = 8
tv78 = -192						; size = 4
tv2537 = -188						; size = 4
tv2311 = -188						; size = 4
tv2085 = -188						; size = 4
tv1859 = -188						; size = 4
tv1663 = -188						; size = 4
tv1655 = -188						; size = 4
tv1644 = -188						; size = 4
tv1586 = -188						; size = 4
tv1578 = -188						; size = 4
tv1567 = -188						; size = 4
tv70 = -188						; size = 4
_selected_weapon$ = -120				; size = 4
_weapon_sub_type$ = -116				; size = 4
_en$ = -112						; size = 4
_y_adjust$ = -108					; size = 4
_x_adjust$ = -104					; size = 4
_stub_wings_attached$ = -100				; size = 4
_damaged$ = -96						; size = 4
_number$ = -92						; size = 4
_result$ = -88						; size = 4
_i$ = -84						; size = 4
_s$ = -80						; size = 80
?draw_weapon_display_side_mfd@@YGXXZ PROC		; draw_weapon_display_side_mfd, COMDAT

; 8133 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 8134 : 	char
; 8135 : 		s[80];
; 8136 : 
; 8137 : 	int
; 8138 : 		i,
; 8139 : 		result,
; 8140 : 		number,
; 8141 : 		damaged,
; 8142 : 		stub_wings_attached;
; 8143 : 
; 8144 : 	float
; 8145 : 		x_adjust,
; 8146 : 		y_adjust;
; 8147 : 
; 8148 : 	entity
; 8149 : 		*en;
; 8150 : 
; 8151 : 	entity_sub_types
; 8152 : 		weapon_sub_type,
; 8153 : 		selected_weapon;
; 8154 : 
; 8155 : 	en = get_gunship_entity ();

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00011	89 45 90	 mov	 DWORD PTR _en$[ebp], eax

; 8156 : 
; 8157 : 	selected_weapon = get_local_entity_int_value (en, INT_TYPE_SELECTED_WEAPON);

  00014	83 7d 90 00	 cmp	 DWORD PTR _en$[ebp], 0
  00018	74 0d		 je	 SHORT $LN133@draw_weapo
  0001a	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], ecx
  00025	eb 24		 jmp	 SHORT $LN134@draw_weapo
$LN133@draw_weapo:
  00027	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_weapon_display_side_mfd@@YGXXZ@4JA
  0002d	83 c2 18	 add	 edx, 24			; 00000018H
  00030	52		 push	 edx
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00041	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN134@draw_weapo:
  0004b	b9 01 00 00 00	 mov	 ecx, 1
  00050	85 c9		 test	 ecx, ecx
  00052	74 0c		 je	 SHORT $LN135@draw_weapo
  00054	c7 85 40 ff ff
	ff b8 00 00 00	 mov	 DWORD PTR tv78[ebp], 184 ; 000000b8H
  0005e	eb 24		 jmp	 SHORT $LN136@draw_weapo
$LN135@draw_weapo:
  00060	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_weapon_display_side_mfd@@YGXXZ@4JA
  00066	83 c2 18	 add	 edx, 24			; 00000018H
  00069	52		 push	 edx
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007a	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN136@draw_weapo:
  00084	68 b8 00 00 00	 push	 184			; 000000b8H
  00089	8b 4d 90	 mov	 ecx, DWORD PTR _en$[ebp]
  0008c	51		 push	 ecx
  0008d	69 95 44 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv70[ebp], 1116
  00097	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv78[ebp]
  0009d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000a4	ff d1		 call	 ecx
  000a6	89 45 88	 mov	 DWORD PTR _selected_weapon$[ebp], eax

; 8158 : 
; 8159 : 	////////////////////////////////////////
; 8160 : 	//
; 8161 : 	// draw outline
; 8162 : 	//
; 8163 : 	////////////////////////////////////////
; 8164 : 
; 8165 : 	stub_wings_attached = get_comanche_stub_wings_attached (get_gunship_entity ());

  000a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ?get_comanche_stub_wings_attached@@YGHPAUENTITY@@@Z ; get_comanche_stub_wings_attached
  000b4	89 45 9c	 mov	 DWORD PTR _stub_wings_attached$[ebp], eax

; 8166 : 
; 8167 : 	if (stub_wings_attached)

  000b7	83 7d 9c 00	 cmp	 DWORD PTR _stub_wings_attached$[ebp], 0
  000bb	0f 84 45 01 00
	00		 je	 $LN10@draw_weapo

; 8168 : 	{
; 8169 : 		if (draw_large_mfd)

  000c1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  000c8	0f 84 9c 00 00
	00		 je	 $LN12@draw_weapo

; 8170 : 		{
; 8171 : 			i = 0;

  000ce	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
$LN2@draw_weapo:

; 8172 : 
; 8173 : 			while (i < num_side_weapon_line_points_with_stub_wings)

  000d5	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  000d8	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?num_side_weapon_line_points_with_stub_wings@@3HA
  000de	0f 8d 81 00 00
	00		 jge	 $LN3@draw_weapo

; 8174 : 			{
; 8175 : 				draw_2d_half_thick_line

  000e4	b8 04 00 00 00	 mov	 eax, 4
  000e9	6b c8 13	 imul	 ecx, eax, 19
  000ec	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000f2	52		 push	 edx
  000f3	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  000f6	83 c0 01	 add	 eax, 1
  000f9	6b c8 0c	 imul	 ecx, eax, 12
  000fc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?side_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  00102	51		 push	 ecx
  00103	f3 0f 10 44 0a
	04		 movss	 xmm0, DWORD PTR [edx+ecx+4]
  00109	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010e	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  00111	83 c0 01	 add	 eax, 1
  00114	6b c8 0c	 imul	 ecx, eax, 12
  00117	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?side_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  0011d	51		 push	 ecx
  0011e	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00123	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00128	6b 45 ac 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  0012c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?side_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  00132	51		 push	 ecx
  00133	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  00139	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013e	6b 55 ac 0c	 imul	 edx, DWORD PTR _i$[ebp], 12
  00142	a1 00 00 00 00	 mov	 eax, DWORD PTR ?side_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  00147	51		 push	 ecx
  00148	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  0014d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00152	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 8176 : 				(
; 8177 : 					side_weapon_line_points_with_stub_wings[i].x,
; 8178 : 					side_weapon_line_points_with_stub_wings[i].y,
; 8179 : 					side_weapon_line_points_with_stub_wings[i + 1].x,
; 8180 : 					side_weapon_line_points_with_stub_wings[i + 1].y,
; 8181 : 					MFD_COLOUR_WHITE
; 8182 : 				);
; 8183 : 
; 8184 : 				i += 2;

  00157	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  0015a	83 c0 02	 add	 eax, 2
  0015d	89 45 ac	 mov	 DWORD PTR _i$[ebp], eax

; 8185 : 			}

  00160	e9 70 ff ff ff	 jmp	 $LN2@draw_weapo
$LN3@draw_weapo:

; 8186 : 		}
; 8187 : 		else

  00165	e9 97 00 00 00	 jmp	 $LN5@draw_weapo
$LN12@draw_weapo:

; 8188 : 		{
; 8189 : 			i = 0;

  0016a	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
$LN4@draw_weapo:

; 8190 : 
; 8191 : 			while (i < num_side_weapon_line_points_with_stub_wings)

  00171	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  00174	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?num_side_weapon_line_points_with_stub_wings@@3HA
  0017a	0f 8d 81 00 00
	00		 jge	 $LN5@draw_weapo

; 8192 : 			{
; 8193 : 				draw_2d_line

  00180	b8 04 00 00 00	 mov	 eax, 4
  00185	6b c8 13	 imul	 ecx, eax, 19
  00188	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0018e	52		 push	 edx
  0018f	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  00192	83 c0 01	 add	 eax, 1
  00195	6b c8 0c	 imul	 ecx, eax, 12
  00198	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?side_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  0019e	51		 push	 ecx
  0019f	f3 0f 10 44 0a
	04		 movss	 xmm0, DWORD PTR [edx+ecx+4]
  001a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001aa	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  001ad	83 c0 01	 add	 eax, 1
  001b0	6b c8 0c	 imul	 ecx, eax, 12
  001b3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?side_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  001b9	51		 push	 ecx
  001ba	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  001bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c4	6b 45 ac 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  001c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?side_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  001ce	51		 push	 ecx
  001cf	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  001d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001da	6b 55 ac 0c	 imul	 edx, DWORD PTR _i$[ebp], 12
  001de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?side_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  001e3	51		 push	 ecx
  001e4	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  001e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ee	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 8194 : 				(
; 8195 : 					side_weapon_line_points_with_stub_wings[i].x,
; 8196 : 					side_weapon_line_points_with_stub_wings[i].y,
; 8197 : 					side_weapon_line_points_with_stub_wings[i + 1].x,
; 8198 : 					side_weapon_line_points_with_stub_wings[i + 1].y,
; 8199 : 					MFD_COLOUR_WHITE
; 8200 : 				);
; 8201 : 
; 8202 : 				i += 2;

  001f3	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  001f6	83 c0 02	 add	 eax, 2
  001f9	89 45 ac	 mov	 DWORD PTR _i$[ebp], eax

; 8203 : 			}

  001fc	e9 70 ff ff ff	 jmp	 $LN4@draw_weapo
$LN5@draw_weapo:

; 8204 : 		}
; 8205 : 	}
; 8206 : 	else

  00201	e9 40 01 00 00	 jmp	 $LN9@draw_weapo
$LN10@draw_weapo:

; 8207 : 	{
; 8208 : 		if (draw_large_mfd)

  00206	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0020d	0f 84 9c 00 00
	00		 je	 $LN14@draw_weapo

; 8209 : 		{
; 8210 : 			i = 0;

  00213	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
$LN6@draw_weapo:

; 8211 : 
; 8212 : 			while (i < num_side_weapon_line_points_without_stub_wings)

  0021a	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  0021d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?num_side_weapon_line_points_without_stub_wings@@3HA
  00223	0f 8d 81 00 00
	00		 jge	 $LN7@draw_weapo

; 8213 : 			{
; 8214 : 				draw_2d_half_thick_line

  00229	b8 04 00 00 00	 mov	 eax, 4
  0022e	6b c8 13	 imul	 ecx, eax, 19
  00231	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00237	52		 push	 edx
  00238	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  0023b	83 c0 01	 add	 eax, 1
  0023e	6b c8 0c	 imul	 ecx, eax, 12
  00241	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?side_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00247	51		 push	 ecx
  00248	f3 0f 10 44 0a
	04		 movss	 xmm0, DWORD PTR [edx+ecx+4]
  0024e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00253	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  00256	83 c0 01	 add	 eax, 1
  00259	6b c8 0c	 imul	 ecx, eax, 12
  0025c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?side_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00262	51		 push	 ecx
  00263	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00268	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026d	6b 45 ac 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00271	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?side_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00277	51		 push	 ecx
  00278	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  0027e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00283	6b 55 ac 0c	 imul	 edx, DWORD PTR _i$[ebp], 12
  00287	a1 00 00 00 00	 mov	 eax, DWORD PTR ?side_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  0028c	51		 push	 ecx
  0028d	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00292	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00297	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 8215 : 				(
; 8216 : 					side_weapon_line_points_without_stub_wings[i].x,
; 8217 : 					side_weapon_line_points_without_stub_wings[i].y,
; 8218 : 					side_weapon_line_points_without_stub_wings[i + 1].x,
; 8219 : 					side_weapon_line_points_without_stub_wings[i + 1].y,
; 8220 : 					MFD_COLOUR_WHITE
; 8221 : 				);
; 8222 : 
; 8223 : 				i += 2;

  0029c	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  0029f	83 c0 02	 add	 eax, 2
  002a2	89 45 ac	 mov	 DWORD PTR _i$[ebp], eax

; 8224 : 			}

  002a5	e9 70 ff ff ff	 jmp	 $LN6@draw_weapo
$LN7@draw_weapo:

; 8225 : 		}
; 8226 : 		else

  002aa	e9 97 00 00 00	 jmp	 $LN9@draw_weapo
$LN14@draw_weapo:

; 8227 : 		{
; 8228 : 			i = 0;

  002af	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
$LN8@draw_weapo:

; 8229 : 
; 8230 : 			while (i < num_side_weapon_line_points_without_stub_wings)

  002b6	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  002b9	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?num_side_weapon_line_points_without_stub_wings@@3HA
  002bf	0f 8d 81 00 00
	00		 jge	 $LN9@draw_weapo

; 8231 : 			{
; 8232 : 				draw_2d_line

  002c5	b8 04 00 00 00	 mov	 eax, 4
  002ca	6b c8 13	 imul	 ecx, eax, 19
  002cd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002d3	52		 push	 edx
  002d4	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  002d7	83 c0 01	 add	 eax, 1
  002da	6b c8 0c	 imul	 ecx, eax, 12
  002dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?side_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  002e3	51		 push	 ecx
  002e4	f3 0f 10 44 0a
	04		 movss	 xmm0, DWORD PTR [edx+ecx+4]
  002ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ef	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  002f2	83 c0 01	 add	 eax, 1
  002f5	6b c8 0c	 imul	 ecx, eax, 12
  002f8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?side_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  002fe	51		 push	 ecx
  002ff	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00304	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00309	6b 45 ac 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  0030d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?side_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00313	51		 push	 ecx
  00314	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  0031a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0031f	6b 55 ac 0c	 imul	 edx, DWORD PTR _i$[ebp], 12
  00323	a1 00 00 00 00	 mov	 eax, DWORD PTR ?side_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00328	51		 push	 ecx
  00329	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  0032e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00333	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 8233 : 				(
; 8234 : 					side_weapon_line_points_without_stub_wings[i].x,
; 8235 : 					side_weapon_line_points_without_stub_wings[i].y,
; 8236 : 					side_weapon_line_points_without_stub_wings[i + 1].x,
; 8237 : 					side_weapon_line_points_without_stub_wings[i + 1].y,
; 8238 : 					MFD_COLOUR_WHITE
; 8239 : 				);
; 8240 : 
; 8241 : 				i += 2;

  00338	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  0033b	83 c0 02	 add	 eax, 2
  0033e	89 45 ac	 mov	 DWORD PTR _i$[ebp], eax

; 8242 : 			}

  00341	e9 70 ff ff ff	 jmp	 $LN8@draw_weapo
$LN9@draw_weapo:

; 8243 : 		}
; 8244 : 	}
; 8245 : 
; 8246 : 	////////////////////////////////////////
; 8247 : 	//
; 8248 : 	// arm
; 8249 : 	//
; 8250 : 	////////////////////////////////////////
; 8251 : 
; 8252 : 	if (selected_weapon != ENTITY_SUB_TYPE_WEAPON_NO_WEAPON)

  00346	83 7d 88 00	 cmp	 DWORD PTR _selected_weapon$[ebp], 0
  0034a	74 16		 je	 SHORT $LN16@draw_weapo

; 8253 : 	{
; 8254 : 		set_mono_font_colour (MFD_COLOUR_RED);

  0034c	b8 04 00 00 00	 mov	 eax, 4
  00351	6b c8 0f	 imul	 ecx, eax, 15
  00354	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0035a	52		 push	 edx
  0035b	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8255 : 	}
; 8256 : 	else

  00360	eb 14		 jmp	 SHORT $LN17@draw_weapo
$LN16@draw_weapo:

; 8257 : 	{
; 8258 : 		set_mono_font_colour (MFD_COLOUR_WHITE);

  00362	b8 04 00 00 00	 mov	 eax, 4
  00367	6b c8 13	 imul	 ecx, eax, 19
  0036a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00370	52		 push	 edx
  00371	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN17@draw_weapo:

; 8259 : 	}
; 8260 : 
; 8261 : 	if (draw_large_mfd)

  00376	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0037d	74 76		 je	 SHORT $LN18@draw_weapo

; 8262 : 	{
; 8263 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  0037f	6a 05		 push	 5
  00381	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 8264 : 
; 8265 : 		set_2d_mono_font_position (-0.4, 0.5);

  00386	51		 push	 ecx
  00387	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0038f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00394	51		 push	 ecx
  00395	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  0039d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a2	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8266 : 
; 8267 : 		x_adjust = get_mono_font_string_width ("ARM") * -0.5;

  003a7	68 00 00 00 00	 push	 OFFSET ??_C@_03NHPMNECN@ARM@
  003ac	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  003b1	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv1426[ebp]
  003b7	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1426[ebp]
  003bf	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  003c7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003cb	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 8268 : 
; 8269 : 		set_mono_font_rel_position (x_adjust, 0.0);

  003d0	51		 push	 ecx
  003d1	0f 57 c0	 xorps	 xmm0, xmm0
  003d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d9	51		 push	 ecx
  003da	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  003df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e4	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8270 : 
; 8271 : 		print_mono_font_string ("ARM");

  003e9	68 00 00 00 00	 push	 OFFSET ??_C@_03NHPMNECN@ARM@
  003ee	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8272 : 	}
; 8273 : 	else

  003f3	eb 74		 jmp	 SHORT $LN19@draw_weapo
$LN18@draw_weapo:

; 8274 : 	{
; 8275 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  003f5	6a 01		 push	 1
  003f7	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 8276 : 
; 8277 : 		set_2d_mono_font_position (-0.4, 0.5);

  003fc	51		 push	 ecx
  003fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00405	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040a	51		 push	 ecx
  0040b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00413	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00418	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8278 : 
; 8279 : 		x_adjust = get_mono_font_string_width ("ARM") * -0.5;

  0041d	68 00 00 00 00	 push	 OFFSET ??_C@_03NHPMNECN@ARM@
  00422	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00427	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv1439[ebp]
  0042d	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1439[ebp]
  00435	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0043d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00441	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 8280 : 
; 8281 : 		set_mono_font_rel_position (x_adjust, 0.0);

  00446	51		 push	 ecx
  00447	0f 57 c0	 xorps	 xmm0, xmm0
  0044a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044f	51		 push	 ecx
  00450	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00455	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0045a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8282 : 
; 8283 : 		print_mono_font_string ("ARM");

  0045f	68 00 00 00 00	 push	 OFFSET ??_C@_03NHPMNECN@ARM@
  00464	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN19@draw_weapo:

; 8284 : 	}
; 8285 : 
; 8286 : 	////////////////////////////////////////
; 8287 : 	//
; 8288 : 	// auto-counter measures
; 8289 : 	//
; 8290 : 	////////////////////////////////////////
; 8291 : 
; 8292 : 	if (get_global_auto_counter_measures ())

  00469	83 3d 90 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+144, 0
  00470	74 16		 je	 SHORT $LN20@draw_weapo

; 8293 : 	{
; 8294 : 		set_mono_font_colour (MFD_COLOUR_WHITE);

  00472	b8 04 00 00 00	 mov	 eax, 4
  00477	6b c8 13	 imul	 ecx, eax, 19
  0047a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00480	52		 push	 edx
  00481	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8295 : 	}
; 8296 : 	else

  00486	eb 14		 jmp	 SHORT $LN21@draw_weapo
$LN20@draw_weapo:

; 8297 : 	{
; 8298 : 		set_mono_font_colour (MFD_COLOUR_WHITE);

  00488	b8 04 00 00 00	 mov	 eax, 4
  0048d	6b c8 13	 imul	 ecx, eax, 19
  00490	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00496	52		 push	 edx
  00497	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN21@draw_weapo:

; 8299 : 	}
; 8300 : 
; 8301 : 	if (draw_large_mfd)

  0049c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  004a3	0f 84 e8 00 00
	00		 je	 $LN22@draw_weapo

; 8302 : 	{
; 8303 : 		set_mono_font_type (MONO_FONT_TYPE_6X10);

  004a9	6a 04		 push	 4
  004ab	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 8304 : 
; 8305 : 		set_2d_mono_font_position (-0.4, 0.3);

  004b0	51		 push	 ecx
  004b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  004b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004be	51		 push	 ecx
  004bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  004c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004cc	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8306 : 
; 8307 : 		x_adjust = get_mono_font_string_width ("AUTO") * -0.5;

  004d1	68 00 00 00 00	 push	 OFFSET ??_C@_04LMMJFDCN@AUTO@
  004d6	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  004db	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv1456[ebp]
  004e1	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1456[ebp]
  004e9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  004f1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004f5	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 8308 : 
; 8309 : 		set_mono_font_rel_position (x_adjust, 0.0);

  004fa	51		 push	 ecx
  004fb	0f 57 c0	 xorps	 xmm0, xmm0
  004fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00503	51		 push	 ecx
  00504	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00509	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0050e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8310 : 
; 8311 : 		print_mono_font_string ("AUTO");

  00513	68 00 00 00 00	 push	 OFFSET ??_C@_04LMMJFDCN@AUTO@
  00518	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8312 : 
; 8313 : 		set_2d_mono_font_position (-0.4, 0.3);

  0051d	51		 push	 ecx
  0051e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00526	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0052b	51		 push	 ecx
  0052c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00534	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00539	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8314 : 
; 8315 : 		x_adjust = get_mono_font_string_width ("C/M") * -0.5;

  0053e	68 00 00 00 00	 push	 OFFSET ??_C@_03CBNMOHKF@C?1M@
  00543	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00548	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv1469[ebp]
  0054e	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1469[ebp]
  00556	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0055e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00562	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 8316 : 
; 8317 : 		set_mono_font_rel_position (x_adjust, get_mono_font_char_height ('X'));

  00567	6a 58		 push	 88			; 00000058H
  00569	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  0056e	51		 push	 ecx
  0056f	d9 1c 24	 fstp	 DWORD PTR [esp]
  00572	51		 push	 ecx
  00573	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00578	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8318 : 
; 8319 : 		print_mono_font_string ("C/M");

  00582	68 00 00 00 00	 push	 OFFSET ??_C@_03CBNMOHKF@C?1M@
  00587	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8320 : 	}
; 8321 : 	else

  0058c	e9 e3 00 00 00	 jmp	 $LN23@draw_weapo
$LN22@draw_weapo:

; 8322 : 	{
; 8323 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  00591	6a 01		 push	 1
  00593	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 8324 : 
; 8325 : 		set_2d_mono_font_position (-0.4, 0.3);

  00598	51		 push	 ecx
  00599	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  005a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a6	51		 push	 ecx
  005a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  005af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b4	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8326 : 
; 8327 : 		x_adjust = get_mono_font_string_width ("AUTO") * -0.5;

  005b9	68 00 00 00 00	 push	 OFFSET ??_C@_04LMMJFDCN@AUTO@
  005be	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  005c3	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv1484[ebp]
  005c9	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1484[ebp]
  005d1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  005d9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005dd	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 8328 : 
; 8329 : 		set_mono_font_rel_position (x_adjust, 0.0);

  005e2	51		 push	 ecx
  005e3	0f 57 c0	 xorps	 xmm0, xmm0
  005e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005eb	51		 push	 ecx
  005ec	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  005f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f6	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8330 : 
; 8331 : 		print_mono_font_string ("AUTO");

  005fb	68 00 00 00 00	 push	 OFFSET ??_C@_04LMMJFDCN@AUTO@
  00600	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8332 : 
; 8333 : 		set_2d_mono_font_position (-0.4, 0.3);

  00605	51		 push	 ecx
  00606	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  0060e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00613	51		 push	 ecx
  00614	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  0061c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00621	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8334 : 
; 8335 : 		x_adjust = get_mono_font_string_width ("C/M") * -0.5;

  00626	68 00 00 00 00	 push	 OFFSET ??_C@_03CBNMOHKF@C?1M@
  0062b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00630	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv1497[ebp]
  00636	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1497[ebp]
  0063e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00646	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0064a	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 8336 : 
; 8337 : 		set_mono_font_rel_position (x_adjust, get_mono_font_char_height ('X'));

  0064f	6a 58		 push	 88			; 00000058H
  00651	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  00656	51		 push	 ecx
  00657	d9 1c 24	 fstp	 DWORD PTR [esp]
  0065a	51		 push	 ecx
  0065b	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00660	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00665	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8338 : 
; 8339 : 		print_mono_font_string ("C/M");

  0066a	68 00 00 00 00	 push	 OFFSET ??_C@_03CBNMOHKF@C?1M@
  0066f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN23@draw_weapo:

; 8340 : 	}
; 8341 : 
; 8342 : 	////////////////////////////////////////
; 8343 : 	//
; 8344 : 	// chaff and flares
; 8345 : 	//
; 8346 : 	////////////////////////////////////////
; 8347 : 
; 8348 : 	if (draw_large_mfd)

  00674	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0067b	74 16		 je	 SHORT $LN24@draw_weapo

; 8349 : 	{
; 8350 : 		set_mono_font_type (MONO_FONT_TYPE_6X10);

  0067d	6a 04		 push	 4
  0067f	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 8351 : 
; 8352 : 		y_adjust = -6.0;

  00684	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  0068c	f3 0f 11 45 94	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 8353 : 	}
; 8354 : 	else

  00691	eb 14		 jmp	 SHORT $LN25@draw_weapo
$LN24@draw_weapo:

; 8355 : 	{
; 8356 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  00693	6a 00		 push	 0
  00695	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 8357 : 
; 8358 : 		y_adjust = -4.0;

  0069a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  006a2	f3 0f 11 45 94	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN25@draw_weapo:

; 8359 : 	}
; 8360 : 
; 8361 : 	//
; 8362 : 	// lh chaff
; 8363 : 	//
; 8364 : 
; 8365 : 	result = get_local_entity_weapon_hardpoint_info (en, COMANCHE_LHS_CHAFF_DISPENSER, ENTITY_SUB_TYPE_WEAPON_CHAFF, &weapon_sub_type, &number, &damaged);

  006a7	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  006aa	50		 push	 eax
  006ab	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  006ae	51		 push	 ecx
  006af	8d 55 8c	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  006b2	52		 push	 edx
  006b3	6a 43		 push	 67			; 00000043H
  006b5	6a 02		 push	 2
  006b7	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  006ba	50		 push	 eax
  006bb	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  006c0	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 8366 : 
; 8367 : 	if (result)

  006c3	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  006c7	0f 84 ca 00 00
	00		 je	 $LN34@draw_weapo

; 8368 : 	{
; 8369 : 		set_2d_mono_font_position (-0.55 - 0.4, 0.7);

  006cd	51		 push	 ecx
  006ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  006d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006db	51		 push	 ecx
  006dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  006e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006e9	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8370 : 
; 8371 : 		if (!damaged)

  006ee	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  006f2	75 70		 jne	 SHORT $LN27@draw_weapo

; 8372 : 		{
; 8373 : 			if (number > 0)

  006f4	83 7d a4 00	 cmp	 DWORD PTR _number$[ebp], 0
  006f8	7e 16		 jle	 SHORT $LN29@draw_weapo

; 8374 : 			{
; 8375 : 				set_mono_font_colour (MFD_COLOUR_WHITE);

  006fa	b8 04 00 00 00	 mov	 eax, 4
  006ff	6b c8 13	 imul	 ecx, eax, 19
  00702	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00708	52		 push	 edx
  00709	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8376 : 			}
; 8377 : 			else

  0070e	eb 14		 jmp	 SHORT $LN30@draw_weapo
$LN29@draw_weapo:

; 8378 : 			{
; 8379 : 				set_mono_font_colour (MFD_COLOUR_WHITE);

  00710	b8 04 00 00 00	 mov	 eax, 4
  00715	6b c8 13	 imul	 ecx, eax, 19
  00718	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0071e	52		 push	 edx
  0071f	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN30@draw_weapo:

; 8380 : 			}
; 8381 : 
; 8382 : 			if (draw_large_mfd)

  00724	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0072b	74 17		 je	 SHORT $LN31@draw_weapo

; 8383 : 			{
; 8384 : 				sprintf (s, "CHFx%02d", number);

  0072d	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  00730	50		 push	 eax
  00731	68 00 00 00 00	 push	 OFFSET ??_C@_08BLEPAFKM@CHFx?$CF02d@
  00736	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00739	51		 push	 ecx
  0073a	e8 00 00 00 00	 call	 _sprintf
  0073f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8385 : 			}
; 8386 : 			else

  00742	eb 15		 jmp	 SHORT $LN32@draw_weapo
$LN31@draw_weapo:

; 8387 : 			{
; 8388 : 				sprintf (s, "Cx%02d", number);

  00744	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  00747	50		 push	 eax
  00748	68 00 00 00 00	 push	 OFFSET ??_C@_06CPHFAHEB@Cx?$CF02d@
  0074d	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00750	51		 push	 ecx
  00751	e8 00 00 00 00	 call	 _sprintf
  00756	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN32@draw_weapo:

; 8389 : 			}
; 8390 : 
; 8391 : 			print_mono_font_string (s);

  00759	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  0075c	50		 push	 eax
  0075d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8392 : 		}
; 8393 : 		else

  00762	eb 33		 jmp	 SHORT $LN34@draw_weapo
$LN27@draw_weapo:

; 8394 : 		{
; 8395 : 			set_mono_font_colour (MFD_COLOUR_WHITE);

  00764	b8 04 00 00 00	 mov	 eax, 4
  00769	6b c8 13	 imul	 ecx, eax, 19
  0076c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00772	52		 push	 edx
  00773	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8396 : 
; 8397 : 			if (draw_large_mfd)

  00778	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0077f	74 0c		 je	 SHORT $LN33@draw_weapo

; 8398 : 			{
; 8399 : 				print_mono_font_string ("CHFxXX");

  00781	68 00 00 00 00	 push	 OFFSET ??_C@_06JNIOEKKK@CHFxXX@
  00786	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8400 : 			}
; 8401 : 			else

  0078b	eb 0a		 jmp	 SHORT $LN34@draw_weapo
$LN33@draw_weapo:

; 8402 : 			{
; 8403 : 				print_mono_font_string ("CxXX");

  0078d	68 00 00 00 00	 push	 OFFSET ??_C@_04JIMIAKFM@CxXX@
  00792	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN34@draw_weapo:

; 8404 : 			}
; 8405 : 		}
; 8406 : 	}
; 8407 : 
; 8408 : 	//
; 8409 : 	// lh flare
; 8410 : 	//
; 8411 : 
; 8412 : 	result = get_local_entity_weapon_hardpoint_info (en, COMANCHE_LHS_FLARE_DISPENSER, ENTITY_SUB_TYPE_WEAPON_FLARE, &weapon_sub_type, &number, &damaged);

  00797	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  0079a	50		 push	 eax
  0079b	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  0079e	51		 push	 ecx
  0079f	8d 55 8c	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  007a2	52		 push	 edx
  007a3	6a 44		 push	 68			; 00000044H
  007a5	6a 02		 push	 2
  007a7	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  007aa	50		 push	 eax
  007ab	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  007b0	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 8413 : 
; 8414 : 	if (result)

  007b3	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  007b7	0f 84 ca 00 00
	00		 je	 $LN43@draw_weapo

; 8415 : 	{
; 8416 : 		set_2d_mono_font_position (-0.55 - 0.4, 0.6);

  007bd	51		 push	 ecx
  007be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  007c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007cb	51		 push	 ecx
  007cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  007d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d9	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8417 : 
; 8418 : 		if (!damaged)

  007de	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  007e2	75 70		 jne	 SHORT $LN36@draw_weapo

; 8419 : 		{
; 8420 : 			if (number > 0)

  007e4	83 7d a4 00	 cmp	 DWORD PTR _number$[ebp], 0
  007e8	7e 16		 jle	 SHORT $LN38@draw_weapo

; 8421 : 			{
; 8422 : 				set_mono_font_colour (MFD_COLOUR_WHITE);

  007ea	b8 04 00 00 00	 mov	 eax, 4
  007ef	6b c8 13	 imul	 ecx, eax, 19
  007f2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007f8	52		 push	 edx
  007f9	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8423 : 			}
; 8424 : 			else

  007fe	eb 14		 jmp	 SHORT $LN39@draw_weapo
$LN38@draw_weapo:

; 8425 : 			{
; 8426 : 				set_mono_font_colour (MFD_COLOUR_WHITE);

  00800	b8 04 00 00 00	 mov	 eax, 4
  00805	6b c8 13	 imul	 ecx, eax, 19
  00808	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0080e	52		 push	 edx
  0080f	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN39@draw_weapo:

; 8427 : 			}
; 8428 : 
; 8429 : 			if (draw_large_mfd)

  00814	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0081b	74 17		 je	 SHORT $LN40@draw_weapo

; 8430 : 			{
; 8431 : 				sprintf (s, "FLRx%02d", number);

  0081d	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  00820	50		 push	 eax
  00821	68 00 00 00 00	 push	 OFFSET ??_C@_08EGADPGME@FLRx?$CF02d@
  00826	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00829	51		 push	 ecx
  0082a	e8 00 00 00 00	 call	 _sprintf
  0082f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8432 : 			}
; 8433 : 			else

  00832	eb 15		 jmp	 SHORT $LN41@draw_weapo
$LN40@draw_weapo:

; 8434 : 			{
; 8435 : 				sprintf (s, "Fx%02d", number);

  00834	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  00837	50		 push	 eax
  00838	68 00 00 00 00	 push	 OFFSET ??_C@_06HNENCIOG@Fx?$CF02d@
  0083d	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00840	51		 push	 ecx
  00841	e8 00 00 00 00	 call	 _sprintf
  00846	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN41@draw_weapo:

; 8436 : 			}
; 8437 : 
; 8438 : 			print_mono_font_string (s);

  00849	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  0084c	50		 push	 eax
  0084d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8439 : 		}
; 8440 : 		else

  00852	eb 33		 jmp	 SHORT $LN43@draw_weapo
$LN36@draw_weapo:

; 8441 : 		{
; 8442 : 			set_mono_font_colour (MFD_COLOUR_WHITE);

  00854	b8 04 00 00 00	 mov	 eax, 4
  00859	6b c8 13	 imul	 ecx, eax, 19
  0085c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00862	52		 push	 edx
  00863	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8443 : 
; 8444 : 			if (draw_large_mfd)

  00868	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0086f	74 0c		 je	 SHORT $LN42@draw_weapo

; 8445 : 			{
; 8446 : 				print_mono_font_string ("FLRxXX");

  00871	68 00 00 00 00	 push	 OFFSET ??_C@_06MBEHBGFJ@FLRxXX@
  00876	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8447 : 			}
; 8448 : 			else

  0087b	eb 0a		 jmp	 SHORT $LN43@draw_weapo
$LN42@draw_weapo:

; 8449 : 			{
; 8450 : 				print_mono_font_string ("FxXX");

  0087d	68 00 00 00 00	 push	 OFFSET ??_C@_04FACIIFCM@FxXX@
  00882	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN43@draw_weapo:

; 8451 : 			}
; 8452 : 		}
; 8453 : 	}
; 8454 : 
; 8455 : 	//
; 8456 : 	// rh chaff
; 8457 : 	//
; 8458 : 
; 8459 : 	result = get_local_entity_weapon_hardpoint_info (en, COMANCHE_RHS_CHAFF_DISPENSER, ENTITY_SUB_TYPE_WEAPON_CHAFF, &weapon_sub_type, &number, &damaged);

  00887	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  0088a	50		 push	 eax
  0088b	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  0088e	51		 push	 ecx
  0088f	8d 55 8c	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00892	52		 push	 edx
  00893	6a 43		 push	 67			; 00000043H
  00895	6a 03		 push	 3
  00897	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  0089a	50		 push	 eax
  0089b	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  008a0	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 8460 : 
; 8461 : 	if (result)

  008a3	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  008a7	0f 84 87 01 00
	00		 je	 $LN52@draw_weapo

; 8462 : 	{
; 8463 : 		set_2d_mono_font_position (0.55 - 0.4, 0.7);

  008ad	51		 push	 ecx
  008ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  008b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008bb	51		 push	 ecx
  008bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  008c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c9	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8464 : 
; 8465 : 		if (!damaged)

  008ce	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  008d2	0f 85 af 00 00
	00		 jne	 $LN45@draw_weapo

; 8466 : 		{
; 8467 : 			if (number > 0)

  008d8	83 7d a4 00	 cmp	 DWORD PTR _number$[ebp], 0
  008dc	7e 16		 jle	 SHORT $LN47@draw_weapo

; 8468 : 			{
; 8469 : 				set_mono_font_colour (MFD_COLOUR_WHITE);

  008de	b8 04 00 00 00	 mov	 eax, 4
  008e3	6b c8 13	 imul	 ecx, eax, 19
  008e6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008ec	52		 push	 edx
  008ed	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8470 : 			}
; 8471 : 			else

  008f2	eb 14		 jmp	 SHORT $LN48@draw_weapo
$LN47@draw_weapo:

; 8472 : 			{
; 8473 : 				set_mono_font_colour (MFD_COLOUR_WHITE);

  008f4	b8 04 00 00 00	 mov	 eax, 4
  008f9	6b c8 13	 imul	 ecx, eax, 19
  008fc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00902	52		 push	 edx
  00903	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN48@draw_weapo:

; 8474 : 			}
; 8475 : 
; 8476 : 			if (draw_large_mfd)

  00908	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0090f	74 17		 je	 SHORT $LN49@draw_weapo

; 8477 : 			{
; 8478 : 				sprintf (s, "CHFx%02d", number);

  00911	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  00914	50		 push	 eax
  00915	68 00 00 00 00	 push	 OFFSET ??_C@_08BLEPAFKM@CHFx?$CF02d@
  0091a	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  0091d	51		 push	 ecx
  0091e	e8 00 00 00 00	 call	 _sprintf
  00923	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8479 : 			}
; 8480 : 			else

  00926	eb 15		 jmp	 SHORT $LN50@draw_weapo
$LN49@draw_weapo:

; 8481 : 			{
; 8482 : 				sprintf (s, "Cx%02d", number);

  00928	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  0092b	50		 push	 eax
  0092c	68 00 00 00 00	 push	 OFFSET ??_C@_06CPHFAHEB@Cx?$CF02d@
  00931	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00934	51		 push	 ecx
  00935	e8 00 00 00 00	 call	 _sprintf
  0093a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN50@draw_weapo:

; 8483 : 			}
; 8484 : 
; 8485 : 			x_adjust = -get_mono_font_string_width (s);

  0093d	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00940	50		 push	 eax
  00941	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00946	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv1567[ebp]
  0094c	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1567[ebp]
  00954	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0095b	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 8486 : 
; 8487 : 			set_mono_font_rel_position (x_adjust, 0.0);

  00960	51		 push	 ecx
  00961	0f 57 c0	 xorps	 xmm0, xmm0
  00964	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00969	51		 push	 ecx
  0096a	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0096f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00974	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8488 : 
; 8489 : 			print_mono_font_string (s);

  00979	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  0097c	50		 push	 eax
  0097d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8490 : 		}
; 8491 : 		else

  00982	e9 ad 00 00 00	 jmp	 $LN52@draw_weapo
$LN45@draw_weapo:

; 8492 : 		{
; 8493 : 			set_mono_font_colour (MFD_COLOUR_WHITE);

  00987	b8 04 00 00 00	 mov	 eax, 4
  0098c	6b c8 13	 imul	 ecx, eax, 19
  0098f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00995	52		 push	 edx
  00996	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8494 : 
; 8495 : 			if (draw_large_mfd)

  0099b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  009a2	74 49		 je	 SHORT $LN51@draw_weapo

; 8496 : 			{
; 8497 : 				x_adjust = -get_mono_font_string_width ("CHFxXX");

  009a4	68 00 00 00 00	 push	 OFFSET ??_C@_06JNIOEKKK@CHFxXX@
  009a9	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  009ae	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv1578[ebp]
  009b4	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1578[ebp]
  009bc	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  009c3	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 8498 : 
; 8499 : 				set_mono_font_rel_position (x_adjust, 0.0);

  009c8	51		 push	 ecx
  009c9	0f 57 c0	 xorps	 xmm0, xmm0
  009cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009d1	51		 push	 ecx
  009d2	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  009d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009dc	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8500 : 
; 8501 : 				print_mono_font_string ("CHFxXX");

  009e1	68 00 00 00 00	 push	 OFFSET ??_C@_06JNIOEKKK@CHFxXX@
  009e6	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8502 : 			}
; 8503 : 			else

  009eb	eb 47		 jmp	 SHORT $LN52@draw_weapo
$LN51@draw_weapo:

; 8504 : 			{
; 8505 : 				x_adjust = -get_mono_font_string_width ("CxXX");

  009ed	68 00 00 00 00	 push	 OFFSET ??_C@_04JIMIAKFM@CxXX@
  009f2	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  009f7	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv1586[ebp]
  009fd	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1586[ebp]
  00a05	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00a0c	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 8506 : 
; 8507 : 				set_mono_font_rel_position (x_adjust, 0.0);

  00a11	51		 push	 ecx
  00a12	0f 57 c0	 xorps	 xmm0, xmm0
  00a15	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a1a	51		 push	 ecx
  00a1b	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00a20	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a25	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8508 : 
; 8509 : 				print_mono_font_string ("CxXX");

  00a2a	68 00 00 00 00	 push	 OFFSET ??_C@_04JIMIAKFM@CxXX@
  00a2f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN52@draw_weapo:

; 8510 : 			}
; 8511 : 		}
; 8512 : 	}
; 8513 : 
; 8514 : 	//
; 8515 : 	// rh flare
; 8516 : 	//
; 8517 : 
; 8518 : 	result = get_local_entity_weapon_hardpoint_info (en, COMANCHE_RHS_FLARE_DISPENSER, ENTITY_SUB_TYPE_WEAPON_FLARE, &weapon_sub_type, &number, &damaged);

  00a34	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  00a37	50		 push	 eax
  00a38	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  00a3b	51		 push	 ecx
  00a3c	8d 55 8c	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00a3f	52		 push	 edx
  00a40	6a 44		 push	 68			; 00000044H
  00a42	6a 03		 push	 3
  00a44	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  00a47	50		 push	 eax
  00a48	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  00a4d	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 8519 : 
; 8520 : 	if (result)

  00a50	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  00a54	0f 84 87 01 00
	00		 je	 $LN61@draw_weapo

; 8521 : 	{
; 8522 : 		set_2d_mono_font_position (0.55 - 0.4, 0.6);

  00a5a	51		 push	 ecx
  00a5b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00a63	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a68	51		 push	 ecx
  00a69	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00a71	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a76	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8523 : 
; 8524 : 		if (!damaged)

  00a7b	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00a7f	0f 85 af 00 00
	00		 jne	 $LN54@draw_weapo

; 8525 : 		{
; 8526 : 			if (number > 0)

  00a85	83 7d a4 00	 cmp	 DWORD PTR _number$[ebp], 0
  00a89	7e 16		 jle	 SHORT $LN56@draw_weapo

; 8527 : 			{
; 8528 : 				set_mono_font_colour (MFD_COLOUR_WHITE);

  00a8b	b8 04 00 00 00	 mov	 eax, 4
  00a90	6b c8 13	 imul	 ecx, eax, 19
  00a93	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a99	52		 push	 edx
  00a9a	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8529 : 			}
; 8530 : 			else

  00a9f	eb 14		 jmp	 SHORT $LN57@draw_weapo
$LN56@draw_weapo:

; 8531 : 			{
; 8532 : 				set_mono_font_colour (MFD_COLOUR_WHITE);

  00aa1	b8 04 00 00 00	 mov	 eax, 4
  00aa6	6b c8 13	 imul	 ecx, eax, 19
  00aa9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00aaf	52		 push	 edx
  00ab0	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN57@draw_weapo:

; 8533 : 			}
; 8534 : 
; 8535 : 			if (draw_large_mfd)

  00ab5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00abc	74 17		 je	 SHORT $LN58@draw_weapo

; 8536 : 			{
; 8537 : 				sprintf (s, "FLRx%02d", number);

  00abe	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  00ac1	50		 push	 eax
  00ac2	68 00 00 00 00	 push	 OFFSET ??_C@_08EGADPGME@FLRx?$CF02d@
  00ac7	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00aca	51		 push	 ecx
  00acb	e8 00 00 00 00	 call	 _sprintf
  00ad0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8538 : 			}
; 8539 : 			else

  00ad3	eb 15		 jmp	 SHORT $LN59@draw_weapo
$LN58@draw_weapo:

; 8540 : 			{
; 8541 : 				sprintf (s, "Fx%02d", number);

  00ad5	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  00ad8	50		 push	 eax
  00ad9	68 00 00 00 00	 push	 OFFSET ??_C@_06HNENCIOG@Fx?$CF02d@
  00ade	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00ae1	51		 push	 ecx
  00ae2	e8 00 00 00 00	 call	 _sprintf
  00ae7	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN59@draw_weapo:

; 8542 : 			}
; 8543 : 
; 8544 : 			x_adjust = -get_mono_font_string_width (s);

  00aea	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00aed	50		 push	 eax
  00aee	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00af3	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv1644[ebp]
  00af9	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1644[ebp]
  00b01	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00b08	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 8545 : 
; 8546 : 			set_mono_font_rel_position (x_adjust, 0.0);

  00b0d	51		 push	 ecx
  00b0e	0f 57 c0	 xorps	 xmm0, xmm0
  00b11	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b16	51		 push	 ecx
  00b17	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00b1c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b21	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8547 : 
; 8548 : 			print_mono_font_string (s);

  00b26	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00b29	50		 push	 eax
  00b2a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8549 : 		}
; 8550 : 		else

  00b2f	e9 ad 00 00 00	 jmp	 $LN61@draw_weapo
$LN54@draw_weapo:

; 8551 : 		{
; 8552 : 			set_mono_font_colour (MFD_COLOUR_WHITE);

  00b34	b8 04 00 00 00	 mov	 eax, 4
  00b39	6b c8 13	 imul	 ecx, eax, 19
  00b3c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b42	52		 push	 edx
  00b43	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8553 : 
; 8554 : 			if (draw_large_mfd)

  00b48	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00b4f	74 49		 je	 SHORT $LN60@draw_weapo

; 8555 : 			{
; 8556 : 				x_adjust = -get_mono_font_string_width ("FLRxXX");

  00b51	68 00 00 00 00	 push	 OFFSET ??_C@_06MBEHBGFJ@FLRxXX@
  00b56	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00b5b	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv1655[ebp]
  00b61	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1655[ebp]
  00b69	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00b70	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 8557 : 
; 8558 : 				set_mono_font_rel_position (x_adjust, 0.0);

  00b75	51		 push	 ecx
  00b76	0f 57 c0	 xorps	 xmm0, xmm0
  00b79	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b7e	51		 push	 ecx
  00b7f	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00b84	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b89	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8559 : 
; 8560 : 				print_mono_font_string ("FLRxXX");

  00b8e	68 00 00 00 00	 push	 OFFSET ??_C@_06MBEHBGFJ@FLRxXX@
  00b93	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8561 : 			}
; 8562 : 			else

  00b98	eb 47		 jmp	 SHORT $LN61@draw_weapo
$LN60@draw_weapo:

; 8563 : 			{
; 8564 : 				x_adjust = -get_mono_font_string_width ("FxXX");

  00b9a	68 00 00 00 00	 push	 OFFSET ??_C@_04FACIIFCM@FxXX@
  00b9f	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00ba4	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv1663[ebp]
  00baa	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1663[ebp]
  00bb2	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00bb9	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 8565 : 
; 8566 : 				set_mono_font_rel_position (x_adjust, 0.0);

  00bbe	51		 push	 ecx
  00bbf	0f 57 c0	 xorps	 xmm0, xmm0
  00bc2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bc7	51		 push	 ecx
  00bc8	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00bcd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bd2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8567 : 
; 8568 : 				print_mono_font_string ("FxXX");

  00bd7	68 00 00 00 00	 push	 OFFSET ??_C@_04FACIIFCM@FxXX@
  00bdc	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN61@draw_weapo:

; 8569 : 			}
; 8570 : 		}
; 8571 : 	}
; 8572 : 
; 8573 : 	////////////////////////////////////////
; 8574 : 	//
; 8575 : 	// cannon
; 8576 : 	//
; 8577 : 	////////////////////////////////////////
; 8578 : 
; 8579 : 	result = get_local_entity_weapon_hardpoint_info (en, COMANCHE_CANNON_TURRET, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  00be1	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  00be4	50		 push	 eax
  00be5	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  00be8	51		 push	 ecx
  00be9	8d 55 8c	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00bec	52		 push	 edx
  00bed	6a 00		 push	 0
  00bef	6a 04		 push	 4
  00bf1	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  00bf4	50		 push	 eax
  00bf5	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  00bfa	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 8580 : 
; 8581 : 	if (result)

  00bfd	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  00c01	0f 84 16 02 00
	00		 je	 $LN68@draw_weapo

; 8582 : 	{
; 8583 : 		//
; 8584 : 		// selected weapon
; 8585 : 		//
; 8586 : 
; 8587 : 		if (weapon_sub_type == selected_weapon)

  00c07	8b 45 8c	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00c0a	3b 45 88	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00c0d	75 16		 jne	 SHORT $LN63@draw_weapo

; 8588 : 		{
; 8589 : 			set_mono_font_colour (MFD_COLOUR_RED);

  00c0f	b8 04 00 00 00	 mov	 eax, 4
  00c14	6b c8 0f	 imul	 ecx, eax, 15
  00c17	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c1d	52		 push	 edx
  00c1e	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8590 : 		}
; 8591 : 		else

  00c23	eb 14		 jmp	 SHORT $LN64@draw_weapo
$LN63@draw_weapo:

; 8592 : 		{
; 8593 : 			set_mono_font_colour (MFD_COLOUR_WHITE);

  00c25	b8 04 00 00 00	 mov	 eax, 4
  00c2a	6b c8 13	 imul	 ecx, eax, 19
  00c2d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c33	52		 push	 edx
  00c34	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN64@draw_weapo:

; 8594 : 		}
; 8595 : 
; 8596 : 		//
; 8597 : 		// weapon name and number
; 8598 : 		//
; 8599 : 
; 8600 : 		sprintf (s, "%sx%03d", weapon_database[weapon_sub_type].mfd_name, number);

  00c39	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  00c3c	50		 push	 eax
  00c3d	69 4d 8c e0 00
	00 00		 imul	 ecx, DWORD PTR _weapon_sub_type$[ebp], 224
  00c44	8b 91 08 00 00
	00		 mov	 edx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+8]
  00c4a	52		 push	 edx
  00c4b	68 00 00 00 00	 push	 OFFSET ??_C@_07MPAMKEAB@?$CFsx?$CF03d@
  00c50	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00c53	50		 push	 eax
  00c54	e8 00 00 00 00	 call	 _sprintf
  00c59	83 c4 10	 add	 esp, 16			; 00000010H

; 8601 : 
; 8602 : 		set_2d_mono_font_position (-0.4, -0.0);

  00c5c	51		 push	 ecx
  00c5d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@80000000
  00c65	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c6a	51		 push	 ecx
  00c6b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00c73	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c78	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8603 : 
; 8604 : 		x_adjust = get_mono_font_string_width (s) * -0.5;

  00c7d	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00c80	50		 push	 eax
  00c81	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00c86	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv1690[ebp]
  00c8c	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1690[ebp]
  00c94	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00c9c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ca0	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 8605 : 
; 8606 : 		set_mono_font_rel_position (x_adjust, 0.0);

  00ca5	51		 push	 ecx
  00ca6	0f 57 c0	 xorps	 xmm0, xmm0
  00ca9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cae	51		 push	 ecx
  00caf	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00cb4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cb9	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8607 : 
; 8608 : 		print_mono_font_string (s);

  00cbe	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00cc1	50		 push	 eax
  00cc2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8609 : 
; 8610 : 		//
; 8611 : 		// lines
; 8612 : 		//
; 8613 : 
; 8614 : 		if (draw_large_mfd)

  00cc7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00cce	0f 84 a7 00 00
	00		 je	 $LN65@draw_weapo

; 8615 : 		{
; 8616 : 			if (damaged)

  00cd4	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00cd8	0f 84 98 00 00
	00		 je	 $LN67@draw_weapo

; 8617 : 			{
; 8618 : 				draw_2d_half_thick_line (0.0 - 0.05 - 0.4, 0.07 - 0.03, 0.0 + 0.05 - 0.4, 0.07 + 0.03, MFD_COLOUR_WHITE);

  00cde	b8 04 00 00 00	 mov	 eax, 4
  00ce3	6b c8 13	 imul	 ecx, eax, 19
  00ce6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00cec	52		 push	 edx
  00ced	51		 push	 ecx
  00cee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00cf6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cfb	51		 push	 ecx
  00cfc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  00d04	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d09	51		 push	 ecx
  00d0a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  00d12	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d17	51		 push	 ecx
  00d18	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bee66666
  00d20	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d25	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 8619 : 
; 8620 : 				draw_2d_half_thick_line (0.0 + 0.05 - 0.4, 0.07 - 0.03, 0.0 - 0.05 - 0.4, 0.07 + 0.03, MFD_COLOUR_WHITE);

  00d2a	b8 04 00 00 00	 mov	 eax, 4
  00d2f	6b c8 13	 imul	 ecx, eax, 19
  00d32	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00d38	52		 push	 edx
  00d39	51		 push	 ecx
  00d3a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00d42	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d47	51		 push	 ecx
  00d48	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bee66666
  00d50	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d55	51		 push	 ecx
  00d56	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  00d5e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d63	51		 push	 ecx
  00d64	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  00d6c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d71	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN67@draw_weapo:

; 8621 : 			}
; 8622 : 		}
; 8623 : 		else

  00d76	e9 a2 00 00 00	 jmp	 $LN68@draw_weapo
$LN65@draw_weapo:

; 8624 : 		{
; 8625 : 			if (damaged)

  00d7b	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00d7f	0f 84 98 00 00
	00		 je	 $LN68@draw_weapo

; 8626 : 			{
; 8627 : 				draw_2d_line (0.0 - 0.05 - 0.4, 0.07 - 0.03, 0.0 + 0.05 - 0.4, 0.07 + 0.03, MFD_COLOUR_WHITE);

  00d85	b8 04 00 00 00	 mov	 eax, 4
  00d8a	6b c8 13	 imul	 ecx, eax, 19
  00d8d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00d93	52		 push	 edx
  00d94	51		 push	 ecx
  00d95	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00d9d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00da2	51		 push	 ecx
  00da3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  00dab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00db0	51		 push	 ecx
  00db1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  00db9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dbe	51		 push	 ecx
  00dbf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bee66666
  00dc7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dcc	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 8628 : 
; 8629 : 				draw_2d_line (0.0 + 0.05 - 0.4, 0.07 - 0.03, 0.0 - 0.05 - 0.4, 0.07 + 0.03, MFD_COLOUR_WHITE);

  00dd1	b8 04 00 00 00	 mov	 eax, 4
  00dd6	6b c8 13	 imul	 ecx, eax, 19
  00dd9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ddf	52		 push	 edx
  00de0	51		 push	 ecx
  00de1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00de9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dee	51		 push	 ecx
  00def	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bee66666
  00df7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dfc	51		 push	 ecx
  00dfd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  00e05	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e0a	51		 push	 ecx
  00e0b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  00e13	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e18	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN68@draw_weapo:

; 8630 : 			}
; 8631 : 		}
; 8632 : 	}
; 8633 : 
; 8634 : 	////////////////////////////////////////
; 8635 : 	//
; 8636 : 	// lh bay door inner pylon
; 8637 : 	//
; 8638 : 	////////////////////////////////////////
; 8639 : 
; 8640 : 	result = get_local_entity_weapon_hardpoint_info (en, COMANCHE_LHS_BAY_DOOR_INNER, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  00e1d	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  00e20	50		 push	 eax
  00e21	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  00e24	51		 push	 ecx
  00e25	8d 55 8c	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00e28	52		 push	 edx
  00e29	6a 00		 push	 0
  00e2b	6a 05		 push	 5
  00e2d	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  00e30	50		 push	 eax
  00e31	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  00e36	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 8641 : 
; 8642 : 	if (result)

  00e39	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  00e3d	0f 84 10 03 00
	00		 je	 $LN75@draw_weapo

; 8643 : 	{
; 8644 : 		//
; 8645 : 		// selected weapon
; 8646 : 		//
; 8647 : 
; 8648 : 		if (weapon_sub_type == selected_weapon)

  00e43	8b 45 8c	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00e46	3b 45 88	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00e49	75 16		 jne	 SHORT $LN70@draw_weapo

; 8649 : 		{
; 8650 : 			set_mono_font_colour (MFD_COLOUR_RED);

  00e4b	b8 04 00 00 00	 mov	 eax, 4
  00e50	6b c8 0f	 imul	 ecx, eax, 15
  00e53	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e59	52		 push	 edx
  00e5a	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8651 : 		}
; 8652 : 		else

  00e5f	eb 14		 jmp	 SHORT $LN71@draw_weapo
$LN70@draw_weapo:

; 8653 : 		{
; 8654 : 			set_mono_font_colour (MFD_COLOUR_WHITE);

  00e61	b8 04 00 00 00	 mov	 eax, 4
  00e66	6b c8 13	 imul	 ecx, eax, 19
  00e69	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e6f	52		 push	 edx
  00e70	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN71@draw_weapo:

; 8655 : 		}
; 8656 : 
; 8657 : 		//
; 8658 : 		// number
; 8659 : 		//
; 8660 : 
; 8661 : 		sprintf (s, "x%02d", number);

  00e75	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  00e78	50		 push	 eax
  00e79	68 00 00 00 00	 push	 OFFSET ??_C@_05HGDIBGHI@x?$CF02d@
  00e7e	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00e81	51		 push	 ecx
  00e82	e8 00 00 00 00	 call	 _sprintf
  00e87	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8662 : 
; 8663 : 		set_2d_mono_font_position (-0.24 - 0.4, -0.1);

  00e8a	51		 push	 ecx
  00e8b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  00e93	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e98	51		 push	 ecx
  00e99	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf23d70a
  00ea1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ea6	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8664 : 
; 8665 : 		set_mono_font_rel_position (0.0, get_mono_font_char_height ('X'));

  00eab	6a 58		 push	 88			; 00000058H
  00ead	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  00eb2	51		 push	 ecx
  00eb3	d9 1c 24	 fstp	 DWORD PTR [esp]
  00eb6	51		 push	 ecx
  00eb7	0f 57 c0	 xorps	 xmm0, xmm0
  00eba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ebf	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8666 : 
; 8667 : 		print_mono_font_string (s);

  00ec4	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00ec7	50		 push	 eax
  00ec8	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8668 : 
; 8669 : 		//
; 8670 : 		// lines
; 8671 : 		//
; 8672 : 
; 8673 : 		if (draw_large_mfd)

  00ecd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00ed4	0f 84 3f 01 00
	00		 je	 $LN72@draw_weapo

; 8674 : 		{
; 8675 : 			draw_2d_half_thick_line (-0.29 - 0.4, 0.19, -0.29 - 0.4, -0.16, MFD_COLOUR_WHITE);

  00eda	b8 04 00 00 00	 mov	 eax, 4
  00edf	6b c8 13	 imul	 ecx, eax, 19
  00ee2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ee8	52		 push	 edx
  00ee9	51		 push	 ecx
  00eea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  00ef2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ef7	51		 push	 ecx
  00ef8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf30a3d7
  00f00	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f05	51		 push	 ecx
  00f06	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e428f5c
  00f0e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f13	51		 push	 ecx
  00f14	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf30a3d7
  00f1c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f21	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 8676 : 
; 8677 : 			draw_2d_half_thick_line (-0.26 - 0.4, -0.16, -0.29 - 0.4, -0.16, MFD_COLOUR_WHITE);

  00f26	b8 04 00 00 00	 mov	 eax, 4
  00f2b	6b c8 13	 imul	 ecx, eax, 19
  00f2e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f34	52		 push	 edx
  00f35	51		 push	 ecx
  00f36	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  00f3e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f43	51		 push	 ecx
  00f44	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf30a3d7
  00f4c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f51	51		 push	 ecx
  00f52	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  00f5a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f5f	51		 push	 ecx
  00f60	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf28f5c3
  00f68	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f6d	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 8678 : 
; 8679 : 			if (damaged)

  00f72	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00f76	0f 84 98 00 00
	00		 je	 $LN74@draw_weapo

; 8680 : 			{
; 8681 : 				draw_2d_half_thick_line (-0.29 - 0.03 - 0.4, 0.225 - 0.05, -0.29 + 0.03 - 0.4, 0.225 + 0.05, MFD_COLOUR_WHITE);

  00f7c	b8 04 00 00 00	 mov	 eax, 4
  00f81	6b c8 13	 imul	 ecx, eax, 19
  00f84	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f8a	52		 push	 edx
  00f8b	51		 push	 ecx
  00f8c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8ccccd
  00f94	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f99	51		 push	 ecx
  00f9a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf28f5c3
  00fa2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fa7	51		 push	 ecx
  00fa8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e333333
  00fb0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fb5	51		 push	 ecx
  00fb6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3851ec
  00fbe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fc3	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 8682 : 
; 8683 : 				draw_2d_half_thick_line (-0.29 + 0.03 - 0.4, 0.225 - 0.05, -0.29 - 0.03 - 0.4, 0.225 + 0.05, MFD_COLOUR_WHITE);

  00fc8	b8 04 00 00 00	 mov	 eax, 4
  00fcd	6b c8 13	 imul	 ecx, eax, 19
  00fd0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00fd6	52		 push	 edx
  00fd7	51		 push	 ecx
  00fd8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8ccccd
  00fe0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fe5	51		 push	 ecx
  00fe6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3851ec
  00fee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ff3	51		 push	 ecx
  00ff4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e333333
  00ffc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01001	51		 push	 ecx
  01002	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf28f5c3
  0100a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0100f	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN74@draw_weapo:

; 8684 : 			}
; 8685 : 		}
; 8686 : 		else

  01014	e9 3a 01 00 00	 jmp	 $LN75@draw_weapo
$LN72@draw_weapo:

; 8687 : 		{
; 8688 : 			draw_2d_line (-0.29 - 0.4, 0.19, -0.29 - 0.4, -0.16, MFD_COLOUR_WHITE);

  01019	b8 04 00 00 00	 mov	 eax, 4
  0101e	6b c8 13	 imul	 ecx, eax, 19
  01021	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01027	52		 push	 edx
  01028	51		 push	 ecx
  01029	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  01031	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01036	51		 push	 ecx
  01037	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf30a3d7
  0103f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01044	51		 push	 ecx
  01045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e428f5c
  0104d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01052	51		 push	 ecx
  01053	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf30a3d7
  0105b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01060	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 8689 : 
; 8690 : 			draw_2d_line (-0.26 - 0.4, -0.16, -0.29 - 0.4, -0.16, MFD_COLOUR_WHITE);

  01065	b8 04 00 00 00	 mov	 eax, 4
  0106a	6b c8 13	 imul	 ecx, eax, 19
  0106d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01073	52		 push	 edx
  01074	51		 push	 ecx
  01075	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  0107d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01082	51		 push	 ecx
  01083	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf30a3d7
  0108b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01090	51		 push	 ecx
  01091	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  01099	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0109e	51		 push	 ecx
  0109f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf28f5c3
  010a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010ac	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 8691 : 
; 8692 : 			if (damaged)

  010b1	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  010b5	0f 84 98 00 00
	00		 je	 $LN75@draw_weapo

; 8693 : 			{
; 8694 : 				draw_2d_line (-0.29 - 0.03 - 0.4, 0.225 - 0.05, -0.29 + 0.03 - 0.4, 0.225 + 0.05, MFD_COLOUR_WHITE);

  010bb	b8 04 00 00 00	 mov	 eax, 4
  010c0	6b c8 13	 imul	 ecx, eax, 19
  010c3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  010c9	52		 push	 edx
  010ca	51		 push	 ecx
  010cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8ccccd
  010d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010d8	51		 push	 ecx
  010d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf28f5c3
  010e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010e6	51		 push	 ecx
  010e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e333333
  010ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010f4	51		 push	 ecx
  010f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3851ec
  010fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01102	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 8695 : 
; 8696 : 				draw_2d_line (-0.29 + 0.03 - 0.4, 0.225 - 0.05, -0.29 - 0.03 - 0.4, 0.225 + 0.05, MFD_COLOUR_WHITE);

  01107	b8 04 00 00 00	 mov	 eax, 4
  0110c	6b c8 13	 imul	 ecx, eax, 19
  0110f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01115	52		 push	 edx
  01116	51		 push	 ecx
  01117	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8ccccd
  0111f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01124	51		 push	 ecx
  01125	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3851ec
  0112d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01132	51		 push	 ecx
  01133	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e333333
  0113b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01140	51		 push	 ecx
  01141	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf28f5c3
  01149	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0114e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN75@draw_weapo:

; 8697 : 			}
; 8698 : 		}
; 8699 : 	}
; 8700 : 
; 8701 : 	////////////////////////////////////////
; 8702 : 	//
; 8703 : 	// rh bay door inner pylon
; 8704 : 	//
; 8705 : 	////////////////////////////////////////
; 8706 : 
; 8707 : 	result = get_local_entity_weapon_hardpoint_info (en, COMANCHE_RHS_BAY_DOOR_INNER, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  01153	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  01156	50		 push	 eax
  01157	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  0115a	51		 push	 ecx
  0115b	8d 55 8c	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  0115e	52		 push	 edx
  0115f	6a 00		 push	 0
  01161	6a 08		 push	 8
  01163	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  01166	50		 push	 eax
  01167	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  0116c	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 8708 : 
; 8709 : 	if (result)

  0116f	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  01173	0f 84 c4 03 00
	00		 je	 $LN82@draw_weapo

; 8710 : 	{
; 8711 : 		//
; 8712 : 		// selected weapon
; 8713 : 		//
; 8714 : 
; 8715 : 		if (weapon_sub_type == selected_weapon)

  01179	8b 45 8c	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0117c	3b 45 88	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  0117f	75 16		 jne	 SHORT $LN77@draw_weapo

; 8716 : 		{
; 8717 : 			set_mono_font_colour (MFD_COLOUR_RED);

  01181	b8 04 00 00 00	 mov	 eax, 4
  01186	6b c8 0f	 imul	 ecx, eax, 15
  01189	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0118f	52		 push	 edx
  01190	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8718 : 		}
; 8719 : 		else

  01195	eb 14		 jmp	 SHORT $LN78@draw_weapo
$LN77@draw_weapo:

; 8720 : 		{
; 8721 : 			set_mono_font_colour (MFD_COLOUR_WHITE);

  01197	b8 04 00 00 00	 mov	 eax, 4
  0119c	6b c8 13	 imul	 ecx, eax, 19
  0119f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  011a5	52		 push	 edx
  011a6	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN78@draw_weapo:

; 8722 : 		}
; 8723 : 
; 8724 : 		//
; 8725 : 		// number
; 8726 : 		//
; 8727 : 
; 8728 : 		sprintf (s, "x%02d", number);

  011ab	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  011ae	50		 push	 eax
  011af	68 00 00 00 00	 push	 OFFSET ??_C@_05HGDIBGHI@x?$CF02d@
  011b4	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  011b7	51		 push	 ecx
  011b8	e8 00 00 00 00	 call	 _sprintf
  011bd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8729 : 
; 8730 : 		set_2d_mono_font_position (0.24 - 0.4, -0.1);

  011c0	51		 push	 ecx
  011c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  011c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011ce	51		 push	 ecx
  011cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  011d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011dc	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8731 : 
; 8732 : 		x_adjust = -get_mono_font_string_width (s) + 1.0;

  011e1	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  011e4	50		 push	 eax
  011e5	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  011ea	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv1859[ebp]
  011f0	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1859[ebp]
  011f8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  011ff	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01203	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0120b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0120f	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 8733 : 
; 8734 : 		set_mono_font_rel_position (x_adjust, get_mono_font_char_height ('X'));

  01214	6a 58		 push	 88			; 00000058H
  01216	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  0121b	51		 push	 ecx
  0121c	d9 1c 24	 fstp	 DWORD PTR [esp]
  0121f	51		 push	 ecx
  01220	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01225	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0122a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8735 : 
; 8736 : 		print_mono_font_string (s);

  0122f	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01232	50		 push	 eax
  01233	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8737 : 
; 8738 : 		//
; 8739 : 		// weapon name
; 8740 : 		//
; 8741 : 
; 8742 : 		set_2d_mono_font_position (-0.4, -0.1);

  01238	51		 push	 ecx
  01239	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  01241	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01246	51		 push	 ecx
  01247	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  0124f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01254	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8743 : 
; 8744 : 		x_adjust = get_mono_font_string_width (weapon_database[weapon_sub_type].mfd_name) * -0.5;

  01259	69 45 8c e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  01260	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  01266	51		 push	 ecx
  01267	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0126c	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv1876[ebp]
  01272	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1876[ebp]
  0127a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01282	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01286	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 8745 : 
; 8746 : 		set_mono_font_rel_position (x_adjust, 0.0);

  0128b	51		 push	 ecx
  0128c	0f 57 c0	 xorps	 xmm0, xmm0
  0128f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01294	51		 push	 ecx
  01295	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0129a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0129f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8747 : 
; 8748 : 		print_mono_font_string (weapon_database[weapon_sub_type].mfd_name);

  012a4	69 45 8c e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  012ab	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  012b1	51		 push	 ecx
  012b2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8749 : 
; 8750 : 		//
; 8751 : 		// lines
; 8752 : 		//
; 8753 : 
; 8754 : 		if (draw_large_mfd)

  012b7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  012be	0f 84 3f 01 00
	00		 je	 $LN79@draw_weapo

; 8755 : 		{
; 8756 : 			draw_2d_half_thick_line (0.29 - 0.4, 0.19, 0.29 - 0.4, -0.16, MFD_COLOUR_WHITE);

  012c4	b8 04 00 00 00	 mov	 eax, 4
  012c9	6b c8 13	 imul	 ecx, eax, 19
  012cc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  012d2	52		 push	 edx
  012d3	51		 push	 ecx
  012d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  012dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012e1	51		 push	 ecx
  012e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bde147ae
  012ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012ef	51		 push	 ecx
  012f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e428f5c
  012f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012fd	51		 push	 ecx
  012fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bde147ae
  01306	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0130b	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 8757 : 
; 8758 : 			draw_2d_half_thick_line (0.26 - 0.4, -0.16, 0.29 - 0.4, -0.16, MFD_COLOUR_WHITE);

  01310	b8 04 00 00 00	 mov	 eax, 4
  01315	6b c8 13	 imul	 ecx, eax, 19
  01318	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0131e	52		 push	 edx
  0131f	51		 push	 ecx
  01320	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  01328	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0132d	51		 push	 ecx
  0132e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bde147ae
  01336	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0133b	51		 push	 ecx
  0133c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  01344	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01349	51		 push	 ecx
  0134a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  01352	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01357	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 8759 : 
; 8760 : 			if (damaged)

  0135c	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01360	0f 84 98 00 00
	00		 je	 $LN81@draw_weapo

; 8761 : 			{
; 8762 : 				draw_2d_half_thick_line (0.29 - 0.03 - 0.4, 0.225 - 0.05, 0.29 + 0.03 - 0.4, 0.225 + 0.05, MFD_COLOUR_WHITE);

  01366	b8 04 00 00 00	 mov	 eax, 4
  0136b	6b c8 13	 imul	 ecx, eax, 19
  0136e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01374	52		 push	 edx
  01375	51		 push	 ecx
  01376	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8ccccd
  0137e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01383	51		 push	 ecx
  01384	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  0138c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01391	51		 push	 ecx
  01392	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e333333
  0139a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0139f	51		 push	 ecx
  013a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  013a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013ad	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 8763 : 
; 8764 : 				draw_2d_half_thick_line (0.29 + 0.03 - 0.4, 0.225 - 0.05, 0.29 - 0.03 - 0.4, 0.225 + 0.05, MFD_COLOUR_WHITE);

  013b2	b8 04 00 00 00	 mov	 eax, 4
  013b7	6b c8 13	 imul	 ecx, eax, 19
  013ba	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  013c0	52		 push	 edx
  013c1	51		 push	 ecx
  013c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8ccccd
  013ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013cf	51		 push	 ecx
  013d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  013d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013dd	51		 push	 ecx
  013de	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e333333
  013e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013eb	51		 push	 ecx
  013ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  013f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013f9	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN81@draw_weapo:

; 8765 : 			}
; 8766 : 		}
; 8767 : 		else

  013fe	e9 3a 01 00 00	 jmp	 $LN82@draw_weapo
$LN79@draw_weapo:

; 8768 : 		{
; 8769 : 			draw_2d_line (0.29 - 0.4, 0.19, 0.29 - 0.4, -0.16, MFD_COLOUR_WHITE);

  01403	b8 04 00 00 00	 mov	 eax, 4
  01408	6b c8 13	 imul	 ecx, eax, 19
  0140b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01411	52		 push	 edx
  01412	51		 push	 ecx
  01413	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  0141b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01420	51		 push	 ecx
  01421	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bde147ae
  01429	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0142e	51		 push	 ecx
  0142f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e428f5c
  01437	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0143c	51		 push	 ecx
  0143d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bde147ae
  01445	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0144a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 8770 : 
; 8771 : 			draw_2d_line (0.26 - 0.4, -0.16, 0.29 - 0.4, -0.16, MFD_COLOUR_WHITE);

  0144f	b8 04 00 00 00	 mov	 eax, 4
  01454	6b c8 13	 imul	 ecx, eax, 19
  01457	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0145d	52		 push	 edx
  0145e	51		 push	 ecx
  0145f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  01467	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0146c	51		 push	 ecx
  0146d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bde147ae
  01475	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0147a	51		 push	 ecx
  0147b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  01483	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01488	51		 push	 ecx
  01489	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  01491	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01496	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 8772 : 
; 8773 : 			if (damaged)

  0149b	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0149f	0f 84 98 00 00
	00		 je	 $LN82@draw_weapo

; 8774 : 			{
; 8775 : 				draw_2d_line (0.29 - 0.03 - 0.4, 0.225 - 0.05, 0.29 + 0.03 - 0.4, 0.225 + 0.05, MFD_COLOUR_WHITE);

  014a5	b8 04 00 00 00	 mov	 eax, 4
  014aa	6b c8 13	 imul	 ecx, eax, 19
  014ad	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  014b3	52		 push	 edx
  014b4	51		 push	 ecx
  014b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8ccccd
  014bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014c2	51		 push	 ecx
  014c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  014cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014d0	51		 push	 ecx
  014d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e333333
  014d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014de	51		 push	 ecx
  014df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  014e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014ec	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 8776 : 
; 8777 : 				draw_2d_line (0.29 + 0.03 - 0.4, 0.225 - 0.05, 0.29 - 0.03 - 0.4, 0.225 + 0.05, MFD_COLOUR_WHITE);

  014f1	b8 04 00 00 00	 mov	 eax, 4
  014f6	6b c8 13	 imul	 ecx, eax, 19
  014f9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  014ff	52		 push	 edx
  01500	51		 push	 ecx
  01501	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8ccccd
  01509	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0150e	51		 push	 ecx
  0150f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  01517	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0151c	51		 push	 ecx
  0151d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e333333
  01525	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0152a	51		 push	 ecx
  0152b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  01533	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01538	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN82@draw_weapo:

; 8778 : 			}
; 8779 : 		}
; 8780 : 	}
; 8781 : 
; 8782 : 	////////////////////////////////////////
; 8783 : 	//
; 8784 : 	// lh bay door middle pylon
; 8785 : 	//
; 8786 : 	////////////////////////////////////////
; 8787 : 
; 8788 : 	result = get_local_entity_weapon_hardpoint_info (en, COMANCHE_LHS_BAY_DOOR_MIDDLE, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  0153d	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  01540	50		 push	 eax
  01541	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  01544	51		 push	 ecx
  01545	8d 55 8c	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  01548	52		 push	 edx
  01549	6a 00		 push	 0
  0154b	6a 06		 push	 6
  0154d	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  01550	50		 push	 eax
  01551	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  01556	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 8789 : 
; 8790 : 	if (result)

  01559	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  0155d	0f 84 10 03 00
	00		 je	 $LN89@draw_weapo

; 8791 : 	{
; 8792 : 		//
; 8793 : 		// selected weapon
; 8794 : 		//
; 8795 : 
; 8796 : 		if (weapon_sub_type == selected_weapon)

  01563	8b 45 8c	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01566	3b 45 88	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01569	75 16		 jne	 SHORT $LN84@draw_weapo

; 8797 : 		{
; 8798 : 			set_mono_font_colour (MFD_COLOUR_RED);

  0156b	b8 04 00 00 00	 mov	 eax, 4
  01570	6b c8 0f	 imul	 ecx, eax, 15
  01573	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01579	52		 push	 edx
  0157a	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8799 : 		}
; 8800 : 		else

  0157f	eb 14		 jmp	 SHORT $LN85@draw_weapo
$LN84@draw_weapo:

; 8801 : 		{
; 8802 : 			set_mono_font_colour (MFD_COLOUR_WHITE);

  01581	b8 04 00 00 00	 mov	 eax, 4
  01586	6b c8 13	 imul	 ecx, eax, 19
  01589	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0158f	52		 push	 edx
  01590	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN85@draw_weapo:

; 8803 : 		}
; 8804 : 
; 8805 : 		//
; 8806 : 		// number
; 8807 : 		//
; 8808 : 
; 8809 : 		sprintf (s, "x%02d", number);

  01595	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  01598	50		 push	 eax
  01599	68 00 00 00 00	 push	 OFFSET ??_C@_05HGDIBGHI@x?$CF02d@
  0159e	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  015a1	51		 push	 ecx
  015a2	e8 00 00 00 00	 call	 _sprintf
  015a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8810 : 
; 8811 : 		set_2d_mono_font_position (-0.24 - 0.4, -0.3);

  015aa	51		 push	 ecx
  015ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  015b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015b8	51		 push	 ecx
  015b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf23d70a
  015c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015c6	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8812 : 
; 8813 : 		set_mono_font_rel_position (0.0, get_mono_font_char_height ('X'));

  015cb	6a 58		 push	 88			; 00000058H
  015cd	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  015d2	51		 push	 ecx
  015d3	d9 1c 24	 fstp	 DWORD PTR [esp]
  015d6	51		 push	 ecx
  015d7	0f 57 c0	 xorps	 xmm0, xmm0
  015da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015df	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8814 : 
; 8815 : 		print_mono_font_string (s);

  015e4	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  015e7	50		 push	 eax
  015e8	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8816 : 
; 8817 : 		//
; 8818 : 		// lines
; 8819 : 		//
; 8820 : 
; 8821 : 		if (draw_large_mfd)

  015ed	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  015f4	0f 84 3f 01 00
	00		 je	 $LN86@draw_weapo

; 8822 : 		{
; 8823 : 			draw_2d_half_thick_line (-0.38 - 0.4, 0.17, -0.38 - 0.4, -0.36, MFD_COLOUR_WHITE);

  015fa	b8 04 00 00 00	 mov	 eax, 4
  015ff	6b c8 13	 imul	 ecx, eax, 19
  01602	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01608	52		 push	 edx
  01609	51		 push	 ecx
  0160a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb851ec
  01612	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01617	51		 push	 ecx
  01618	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  01620	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01625	51		 push	 ecx
  01626	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e2e147b
  0162e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01633	51		 push	 ecx
  01634	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  0163c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01641	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 8824 : 
; 8825 : 			draw_2d_half_thick_line (-0.26 - 0.4, -0.36, -0.38 - 0.4, -0.36, MFD_COLOUR_WHITE);

  01646	b8 04 00 00 00	 mov	 eax, 4
  0164b	6b c8 13	 imul	 ecx, eax, 19
  0164e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01654	52		 push	 edx
  01655	51		 push	 ecx
  01656	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb851ec
  0165e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01663	51		 push	 ecx
  01664	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  0166c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01671	51		 push	 ecx
  01672	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb851ec
  0167a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0167f	51		 push	 ecx
  01680	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf28f5c3
  01688	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0168d	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 8826 : 
; 8827 : 			if (damaged)

  01692	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01696	0f 84 98 00 00
	00		 je	 $LN88@draw_weapo

; 8828 : 			{
; 8829 : 				draw_2d_half_thick_line (-0.38 - 0.03 - 0.4, 0.2 - 0.05, -0.38 + 0.03 - 0.4, 0.2 + 0.05, MFD_COLOUR_WHITE);

  0169c	b8 04 00 00 00	 mov	 eax, 4
  016a1	6b c8 13	 imul	 ecx, eax, 19
  016a4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  016aa	52		 push	 edx
  016ab	51		 push	 ecx
  016ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  016b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016b9	51		 push	 ecx
  016ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  016c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016c7	51		 push	 ecx
  016c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  016d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016d5	51		 push	 ecx
  016d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4f5c29
  016de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016e3	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 8830 : 
; 8831 : 				draw_2d_half_thick_line (-0.38 + 0.03 - 0.4, 0.2 - 0.05, -0.38 - 0.03 - 0.4, 0.2 + 0.05, MFD_COLOUR_WHITE);

  016e8	b8 04 00 00 00	 mov	 eax, 4
  016ed	6b c8 13	 imul	 ecx, eax, 19
  016f0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  016f6	52		 push	 edx
  016f7	51		 push	 ecx
  016f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  01700	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01705	51		 push	 ecx
  01706	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4f5c29
  0170e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01713	51		 push	 ecx
  01714	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  0171c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01721	51		 push	 ecx
  01722	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  0172a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0172f	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN88@draw_weapo:

; 8832 : 			}
; 8833 : 		}
; 8834 : 		else

  01734	e9 3a 01 00 00	 jmp	 $LN89@draw_weapo
$LN86@draw_weapo:

; 8835 : 		{
; 8836 : 			draw_2d_line (-0.38 - 0.4, 0.17, -0.38 - 0.4, -0.36, MFD_COLOUR_WHITE);

  01739	b8 04 00 00 00	 mov	 eax, 4
  0173e	6b c8 13	 imul	 ecx, eax, 19
  01741	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01747	52		 push	 edx
  01748	51		 push	 ecx
  01749	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb851ec
  01751	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01756	51		 push	 ecx
  01757	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  0175f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01764	51		 push	 ecx
  01765	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e2e147b
  0176d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01772	51		 push	 ecx
  01773	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  0177b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01780	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 8837 : 
; 8838 : 			draw_2d_line (-0.26 - 0.4, -0.36, -0.38 - 0.4, -0.36, MFD_COLOUR_WHITE);

  01785	b8 04 00 00 00	 mov	 eax, 4
  0178a	6b c8 13	 imul	 ecx, eax, 19
  0178d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01793	52		 push	 edx
  01794	51		 push	 ecx
  01795	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb851ec
  0179d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017a2	51		 push	 ecx
  017a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  017ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017b0	51		 push	 ecx
  017b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb851ec
  017b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017be	51		 push	 ecx
  017bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf28f5c3
  017c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017cc	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 8839 : 
; 8840 : 			if (damaged)

  017d1	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  017d5	0f 84 98 00 00
	00		 je	 $LN89@draw_weapo

; 8841 : 			{
; 8842 : 				draw_2d_line (-0.38 - 0.03 - 0.4, 0.2 - 0.05, -0.38 + 0.03 - 0.4, 0.2 + 0.05, MFD_COLOUR_WHITE);

  017db	b8 04 00 00 00	 mov	 eax, 4
  017e0	6b c8 13	 imul	 ecx, eax, 19
  017e3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  017e9	52		 push	 edx
  017ea	51		 push	 ecx
  017eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  017f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017f8	51		 push	 ecx
  017f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  01801	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01806	51		 push	 ecx
  01807	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  0180f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01814	51		 push	 ecx
  01815	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4f5c29
  0181d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01822	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 8843 : 
; 8844 : 				draw_2d_line (-0.38 + 0.03 - 0.4, 0.2 - 0.05, -0.38 - 0.03 - 0.4, 0.2 + 0.05, MFD_COLOUR_WHITE);

  01827	b8 04 00 00 00	 mov	 eax, 4
  0182c	6b c8 13	 imul	 ecx, eax, 19
  0182f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01835	52		 push	 edx
  01836	51		 push	 ecx
  01837	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  0183f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01844	51		 push	 ecx
  01845	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4f5c29
  0184d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01852	51		 push	 ecx
  01853	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  0185b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01860	51		 push	 ecx
  01861	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  01869	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0186e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN89@draw_weapo:

; 8845 : 			}
; 8846 : 		}
; 8847 : 	}
; 8848 : 
; 8849 : 	////////////////////////////////////////
; 8850 : 	//
; 8851 : 	// rh bay door middle pylon
; 8852 : 	//
; 8853 : 	////////////////////////////////////////
; 8854 : 
; 8855 : 	result = get_local_entity_weapon_hardpoint_info (en, COMANCHE_RHS_BAY_DOOR_MIDDLE, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  01873	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  01876	50		 push	 eax
  01877	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  0187a	51		 push	 ecx
  0187b	8d 55 8c	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  0187e	52		 push	 edx
  0187f	6a 00		 push	 0
  01881	6a 09		 push	 9
  01883	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  01886	50		 push	 eax
  01887	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  0188c	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 8856 : 
; 8857 : 	if (result)

  0188f	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  01893	0f 84 c4 03 00
	00		 je	 $LN96@draw_weapo

; 8858 : 	{
; 8859 : 		//
; 8860 : 		// selected weapon
; 8861 : 		//
; 8862 : 
; 8863 : 		if (weapon_sub_type == selected_weapon)

  01899	8b 45 8c	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0189c	3b 45 88	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  0189f	75 16		 jne	 SHORT $LN91@draw_weapo

; 8864 : 		{
; 8865 : 			set_mono_font_colour (MFD_COLOUR_RED);

  018a1	b8 04 00 00 00	 mov	 eax, 4
  018a6	6b c8 0f	 imul	 ecx, eax, 15
  018a9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  018af	52		 push	 edx
  018b0	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8866 : 		}
; 8867 : 		else

  018b5	eb 14		 jmp	 SHORT $LN92@draw_weapo
$LN91@draw_weapo:

; 8868 : 		{
; 8869 : 			set_mono_font_colour (MFD_COLOUR_WHITE);

  018b7	b8 04 00 00 00	 mov	 eax, 4
  018bc	6b c8 13	 imul	 ecx, eax, 19
  018bf	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  018c5	52		 push	 edx
  018c6	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN92@draw_weapo:

; 8870 : 		}
; 8871 : 
; 8872 : 		//
; 8873 : 		// number
; 8874 : 		//
; 8875 : 
; 8876 : 		sprintf (s, "x%02d", number);

  018cb	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  018ce	50		 push	 eax
  018cf	68 00 00 00 00	 push	 OFFSET ??_C@_05HGDIBGHI@x?$CF02d@
  018d4	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  018d7	51		 push	 ecx
  018d8	e8 00 00 00 00	 call	 _sprintf
  018dd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8877 : 
; 8878 : 		set_2d_mono_font_position (0.24 - 0.4, -0.3);

  018e0	51		 push	 ecx
  018e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  018e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018ee	51		 push	 ecx
  018ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  018f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018fc	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8879 : 
; 8880 : 		x_adjust = -get_mono_font_string_width (s) + 1.0;

  01901	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01904	50		 push	 eax
  01905	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0190a	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv2085[ebp]
  01910	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv2085[ebp]
  01918	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0191f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01923	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0192b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0192f	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 8881 : 
; 8882 : 		set_mono_font_rel_position (x_adjust, get_mono_font_char_height ('X'));

  01934	6a 58		 push	 88			; 00000058H
  01936	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  0193b	51		 push	 ecx
  0193c	d9 1c 24	 fstp	 DWORD PTR [esp]
  0193f	51		 push	 ecx
  01940	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01945	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0194a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8883 : 
; 8884 : 		print_mono_font_string (s);

  0194f	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01952	50		 push	 eax
  01953	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8885 : 
; 8886 : 		//
; 8887 : 		// weapon name
; 8888 : 		//
; 8889 : 
; 8890 : 		set_2d_mono_font_position (-0.4, -0.3);

  01958	51		 push	 ecx
  01959	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  01961	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01966	51		 push	 ecx
  01967	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  0196f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01974	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8891 : 
; 8892 : 		x_adjust = get_mono_font_string_width (weapon_database[weapon_sub_type].mfd_name) * -0.5;

  01979	69 45 8c e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  01980	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  01986	51		 push	 ecx
  01987	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0198c	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv2102[ebp]
  01992	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv2102[ebp]
  0199a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  019a2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  019a6	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 8893 : 
; 8894 : 		set_mono_font_rel_position (x_adjust, 0.0);

  019ab	51		 push	 ecx
  019ac	0f 57 c0	 xorps	 xmm0, xmm0
  019af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019b4	51		 push	 ecx
  019b5	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  019ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019bf	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8895 : 
; 8896 : 		print_mono_font_string (weapon_database[weapon_sub_type].mfd_name);

  019c4	69 45 8c e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  019cb	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  019d1	51		 push	 ecx
  019d2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8897 : 
; 8898 : 		//
; 8899 : 		// lines
; 8900 : 		//
; 8901 : 
; 8902 : 		if (draw_large_mfd)

  019d7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  019de	0f 84 3f 01 00
	00		 je	 $LN93@draw_weapo

; 8903 : 		{
; 8904 : 			draw_2d_half_thick_line (0.38 - 0.4, 0.17, 0.38 - 0.4, -0.36, MFD_COLOUR_WHITE);

  019e4	b8 04 00 00 00	 mov	 eax, 4
  019e9	6b c8 13	 imul	 ecx, eax, 19
  019ec	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  019f2	52		 push	 edx
  019f3	51		 push	 ecx
  019f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb851ec
  019fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a01	51		 push	 ecx
  01a02	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  01a0a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a0f	51		 push	 ecx
  01a10	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e2e147b
  01a18	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a1d	51		 push	 ecx
  01a1e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  01a26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a2b	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 8905 : 
; 8906 : 			draw_2d_half_thick_line (0.26 - 0.4, -0.36, 0.38 - 0.4, -0.36, MFD_COLOUR_WHITE);

  01a30	b8 04 00 00 00	 mov	 eax, 4
  01a35	6b c8 13	 imul	 ecx, eax, 19
  01a38	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a3e	52		 push	 edx
  01a3f	51		 push	 ecx
  01a40	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb851ec
  01a48	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a4d	51		 push	 ecx
  01a4e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  01a56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a5b	51		 push	 ecx
  01a5c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb851ec
  01a64	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a69	51		 push	 ecx
  01a6a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  01a72	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a77	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 8907 : 
; 8908 : 			if (damaged)

  01a7c	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01a80	0f 84 98 00 00
	00		 je	 $LN95@draw_weapo

; 8909 : 			{
; 8910 : 				draw_2d_half_thick_line (0.38 - 0.03 - 0.4, 0.2 - 0.05, 0.38 + 0.03 - 0.4, 0.2 + 0.05, MFD_COLOUR_WHITE);

  01a86	b8 04 00 00 00	 mov	 eax, 4
  01a8b	6b c8 13	 imul	 ecx, eax, 19
  01a8e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a94	52		 push	 edx
  01a95	51		 push	 ecx
  01a96	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  01a9e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aa3	51		 push	 ecx
  01aa4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70a
  01aac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ab1	51		 push	 ecx
  01ab2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  01aba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01abf	51		 push	 ecx
  01ac0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  01ac8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01acd	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 8911 : 
; 8912 : 				draw_2d_half_thick_line (0.38 + 0.03 - 0.4, 0.2 - 0.05, 0.38 - 0.03 - 0.4, 0.2 + 0.05, MFD_COLOUR_WHITE);

  01ad2	b8 04 00 00 00	 mov	 eax, 4
  01ad7	6b c8 13	 imul	 ecx, eax, 19
  01ada	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01ae0	52		 push	 edx
  01ae1	51		 push	 ecx
  01ae2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  01aea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aef	51		 push	 ecx
  01af0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  01af8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01afd	51		 push	 ecx
  01afe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  01b06	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b0b	51		 push	 ecx
  01b0c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70a
  01b14	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b19	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN95@draw_weapo:

; 8913 : 			}
; 8914 : 		}
; 8915 : 		else

  01b1e	e9 3a 01 00 00	 jmp	 $LN96@draw_weapo
$LN93@draw_weapo:

; 8916 : 		{
; 8917 : 			draw_2d_line (0.38 - 0.4, 0.17, 0.38 - 0.4, -0.36, MFD_COLOUR_WHITE);

  01b23	b8 04 00 00 00	 mov	 eax, 4
  01b28	6b c8 13	 imul	 ecx, eax, 19
  01b2b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01b31	52		 push	 edx
  01b32	51		 push	 ecx
  01b33	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb851ec
  01b3b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b40	51		 push	 ecx
  01b41	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  01b49	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b4e	51		 push	 ecx
  01b4f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e2e147b
  01b57	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b5c	51		 push	 ecx
  01b5d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  01b65	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b6a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 8918 : 
; 8919 : 			draw_2d_line (0.26 - 0.4, -0.36, 0.38 - 0.4, -0.36, MFD_COLOUR_WHITE);

  01b6f	b8 04 00 00 00	 mov	 eax, 4
  01b74	6b c8 13	 imul	 ecx, eax, 19
  01b77	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01b7d	52		 push	 edx
  01b7e	51		 push	 ecx
  01b7f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb851ec
  01b87	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b8c	51		 push	 ecx
  01b8d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  01b95	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b9a	51		 push	 ecx
  01b9b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb851ec
  01ba3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ba8	51		 push	 ecx
  01ba9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  01bb1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bb6	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 8920 : 
; 8921 : 			if (damaged)

  01bbb	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01bbf	0f 84 98 00 00
	00		 je	 $LN96@draw_weapo

; 8922 : 			{
; 8923 : 				draw_2d_line (0.38 - 0.03 - 0.4, 0.2 - 0.05, 0.38 + 0.03 - 0.4, 0.2 + 0.05, MFD_COLOUR_WHITE);

  01bc5	b8 04 00 00 00	 mov	 eax, 4
  01bca	6b c8 13	 imul	 ecx, eax, 19
  01bcd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01bd3	52		 push	 edx
  01bd4	51		 push	 ecx
  01bd5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  01bdd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01be2	51		 push	 ecx
  01be3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70a
  01beb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bf0	51		 push	 ecx
  01bf1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  01bf9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bfe	51		 push	 ecx
  01bff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  01c07	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c0c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 8924 : 
; 8925 : 				draw_2d_line (0.38 + 0.03 - 0.4, 0.2 - 0.05, 0.38 - 0.03 - 0.4, 0.2 + 0.05, MFD_COLOUR_WHITE);

  01c11	b8 04 00 00 00	 mov	 eax, 4
  01c16	6b c8 13	 imul	 ecx, eax, 19
  01c19	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01c1f	52		 push	 edx
  01c20	51		 push	 ecx
  01c21	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  01c29	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c2e	51		 push	 ecx
  01c2f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  01c37	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c3c	51		 push	 ecx
  01c3d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  01c45	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c4a	51		 push	 ecx
  01c4b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70a
  01c53	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c58	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN96@draw_weapo:

; 8926 : 			}
; 8927 : 		}
; 8928 : 	}
; 8929 : 
; 8930 : 	////////////////////////////////////////
; 8931 : 	//
; 8932 : 	// lh bay door outer pylon
; 8933 : 	//
; 8934 : 	////////////////////////////////////////
; 8935 : 
; 8936 : 	result = get_local_entity_weapon_hardpoint_info (en, COMANCHE_LHS_BAY_DOOR_OUTER, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  01c5d	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  01c60	50		 push	 eax
  01c61	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  01c64	51		 push	 ecx
  01c65	8d 55 8c	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  01c68	52		 push	 edx
  01c69	6a 00		 push	 0
  01c6b	6a 07		 push	 7
  01c6d	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  01c70	50		 push	 eax
  01c71	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  01c76	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 8937 : 
; 8938 : 	if (result)

  01c79	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  01c7d	0f 84 10 03 00
	00		 je	 $LN103@draw_weapo

; 8939 : 	{
; 8940 : 		//
; 8941 : 		// selected weapon
; 8942 : 		//
; 8943 : 
; 8944 : 		if (weapon_sub_type == selected_weapon)

  01c83	8b 45 8c	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01c86	3b 45 88	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01c89	75 16		 jne	 SHORT $LN98@draw_weapo

; 8945 : 		{
; 8946 : 			set_mono_font_colour (MFD_COLOUR_RED);

  01c8b	b8 04 00 00 00	 mov	 eax, 4
  01c90	6b c8 0f	 imul	 ecx, eax, 15
  01c93	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01c99	52		 push	 edx
  01c9a	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8947 : 		}
; 8948 : 		else

  01c9f	eb 14		 jmp	 SHORT $LN99@draw_weapo
$LN98@draw_weapo:

; 8949 : 		{
; 8950 : 			set_mono_font_colour (MFD_COLOUR_WHITE);

  01ca1	b8 04 00 00 00	 mov	 eax, 4
  01ca6	6b c8 13	 imul	 ecx, eax, 19
  01ca9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01caf	52		 push	 edx
  01cb0	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN99@draw_weapo:

; 8951 : 		}
; 8952 : 
; 8953 : 		//
; 8954 : 		// number
; 8955 : 		//
; 8956 : 
; 8957 : 		sprintf (s, "x%02d", number);

  01cb5	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  01cb8	50		 push	 eax
  01cb9	68 00 00 00 00	 push	 OFFSET ??_C@_05HGDIBGHI@x?$CF02d@
  01cbe	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  01cc1	51		 push	 ecx
  01cc2	e8 00 00 00 00	 call	 _sprintf
  01cc7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8958 : 
; 8959 : 		set_2d_mono_font_position (-0.24 - 0.4, -0.5);

  01cca	51		 push	 ecx
  01ccb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  01cd3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cd8	51		 push	 ecx
  01cd9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf23d70a
  01ce1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ce6	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8960 : 
; 8961 : 		set_mono_font_rel_position (0.0, get_mono_font_char_height ('X'));

  01ceb	6a 58		 push	 88			; 00000058H
  01ced	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  01cf2	51		 push	 ecx
  01cf3	d9 1c 24	 fstp	 DWORD PTR [esp]
  01cf6	51		 push	 ecx
  01cf7	0f 57 c0	 xorps	 xmm0, xmm0
  01cfa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cff	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8962 : 
; 8963 : 		print_mono_font_string (s);

  01d04	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01d07	50		 push	 eax
  01d08	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8964 : 
; 8965 : 		//
; 8966 : 		// lines
; 8967 : 		//
; 8968 : 
; 8969 : 		if (draw_large_mfd)

  01d0d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01d14	0f 84 3f 01 00
	00		 je	 $LN100@draw_weapo

; 8970 : 		{
; 8971 : 			draw_2d_half_thick_line (-0.46 - 0.4, 0.14, -0.46 - 0.4, -0.56, MFD_COLOUR_WHITE);

  01d1a	b8 04 00 00 00	 mov	 eax, 4
  01d1f	6b c8 13	 imul	 ecx, eax, 19
  01d22	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01d28	52		 push	 edx
  01d29	51		 push	 ecx
  01d2a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  01d32	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d37	51		 push	 ecx
  01d38	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5c28f6
  01d40	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d45	51		 push	 ecx
  01d46	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  01d4e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d53	51		 push	 ecx
  01d54	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5c28f6
  01d5c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d61	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 8972 : 
; 8973 : 			draw_2d_half_thick_line (-0.26 - 0.4, -0.56, -0.46 - 0.4, -0.56, MFD_COLOUR_WHITE);

  01d66	b8 04 00 00 00	 mov	 eax, 4
  01d6b	6b c8 13	 imul	 ecx, eax, 19
  01d6e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01d74	52		 push	 edx
  01d75	51		 push	 ecx
  01d76	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  01d7e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d83	51		 push	 ecx
  01d84	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5c28f6
  01d8c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d91	51		 push	 ecx
  01d92	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  01d9a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d9f	51		 push	 ecx
  01da0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf28f5c3
  01da8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dad	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 8974 : 
; 8975 : 			if (damaged)

  01db2	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01db6	0f 84 98 00 00
	00		 je	 $LN102@draw_weapo

; 8976 : 			{
; 8977 : 				draw_2d_half_thick_line (-0.46 - 0.03 - 0.4, 0.17 - 0.05, -0.46 + 0.03 - 0.4, 0.17 + 0.05, MFD_COLOUR_WHITE);

  01dbc	b8 04 00 00 00	 mov	 eax, 4
  01dc1	6b c8 13	 imul	 ecx, eax, 19
  01dc4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01dca	52		 push	 edx
  01dcb	51		 push	 ecx
  01dcc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  01dd4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dd9	51		 push	 ecx
  01dda	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf547ae1
  01de2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01de7	51		 push	 ecx
  01de8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  01df0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01df5	51		 push	 ecx
  01df6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf63d70a
  01dfe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e03	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 8978 : 
; 8979 : 				draw_2d_half_thick_line (-0.46 + 0.03 - 0.4, 0.17 - 0.05, -0.46 - 0.03 - 0.4, 0.17 + 0.05, MFD_COLOUR_WHITE);

  01e08	b8 04 00 00 00	 mov	 eax, 4
  01e0d	6b c8 13	 imul	 ecx, eax, 19
  01e10	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01e16	52		 push	 edx
  01e17	51		 push	 ecx
  01e18	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  01e20	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e25	51		 push	 ecx
  01e26	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf63d70a
  01e2e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e33	51		 push	 ecx
  01e34	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  01e3c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e41	51		 push	 ecx
  01e42	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf547ae1
  01e4a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e4f	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN102@draw_weapo:

; 8980 : 			}
; 8981 : 		}
; 8982 : 		else

  01e54	e9 3a 01 00 00	 jmp	 $LN103@draw_weapo
$LN100@draw_weapo:

; 8983 : 		{
; 8984 : 			draw_2d_line (-0.46 - 0.4, 0.14, -0.46 - 0.4, -0.56, MFD_COLOUR_WHITE);

  01e59	b8 04 00 00 00	 mov	 eax, 4
  01e5e	6b c8 13	 imul	 ecx, eax, 19
  01e61	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01e67	52		 push	 edx
  01e68	51		 push	 ecx
  01e69	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  01e71	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e76	51		 push	 ecx
  01e77	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5c28f6
  01e7f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e84	51		 push	 ecx
  01e85	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  01e8d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e92	51		 push	 ecx
  01e93	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5c28f6
  01e9b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ea0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 8985 : 
; 8986 : 			draw_2d_line (-0.26 - 0.4, -0.56, -0.46 - 0.4, -0.56, MFD_COLOUR_WHITE);

  01ea5	b8 04 00 00 00	 mov	 eax, 4
  01eaa	6b c8 13	 imul	 ecx, eax, 19
  01ead	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01eb3	52		 push	 edx
  01eb4	51		 push	 ecx
  01eb5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  01ebd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ec2	51		 push	 ecx
  01ec3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5c28f6
  01ecb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ed0	51		 push	 ecx
  01ed1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  01ed9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ede	51		 push	 ecx
  01edf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf28f5c3
  01ee7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01eec	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 8987 : 
; 8988 : 			if (damaged)

  01ef1	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01ef5	0f 84 98 00 00
	00		 je	 $LN103@draw_weapo

; 8989 : 			{
; 8990 : 				draw_2d_line (-0.46 - 0.03 - 0.4, 0.17 - 0.05, -0.46 + 0.03 - 0.4, 0.17 + 0.05, MFD_COLOUR_WHITE);

  01efb	b8 04 00 00 00	 mov	 eax, 4
  01f00	6b c8 13	 imul	 ecx, eax, 19
  01f03	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01f09	52		 push	 edx
  01f0a	51		 push	 ecx
  01f0b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  01f13	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f18	51		 push	 ecx
  01f19	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf547ae1
  01f21	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f26	51		 push	 ecx
  01f27	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  01f2f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f34	51		 push	 ecx
  01f35	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf63d70a
  01f3d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f42	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 8991 : 
; 8992 : 				draw_2d_line (-0.46 + 0.03 - 0.4, 0.17 - 0.05, -0.46 - 0.03 - 0.4, 0.17 + 0.05, MFD_COLOUR_WHITE);

  01f47	b8 04 00 00 00	 mov	 eax, 4
  01f4c	6b c8 13	 imul	 ecx, eax, 19
  01f4f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01f55	52		 push	 edx
  01f56	51		 push	 ecx
  01f57	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  01f5f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f64	51		 push	 ecx
  01f65	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf63d70a
  01f6d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f72	51		 push	 ecx
  01f73	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  01f7b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f80	51		 push	 ecx
  01f81	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf547ae1
  01f89	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f8e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN103@draw_weapo:

; 8993 : 			}
; 8994 : 		}
; 8995 : 	}
; 8996 : 
; 8997 : 	////////////////////////////////////////
; 8998 : 	//
; 8999 : 	// rh bay door outer pylon
; 9000 : 	//
; 9001 : 	////////////////////////////////////////
; 9002 : 
; 9003 : 	result = get_local_entity_weapon_hardpoint_info (en, COMANCHE_RHS_BAY_DOOR_OUTER, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  01f93	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  01f96	50		 push	 eax
  01f97	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  01f9a	51		 push	 ecx
  01f9b	8d 55 8c	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  01f9e	52		 push	 edx
  01f9f	6a 00		 push	 0
  01fa1	6a 0a		 push	 10			; 0000000aH
  01fa3	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  01fa6	50		 push	 eax
  01fa7	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  01fac	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 9004 : 
; 9005 : 	if (result)

  01faf	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  01fb3	0f 84 c4 03 00
	00		 je	 $LN110@draw_weapo

; 9006 : 	{
; 9007 : 		//
; 9008 : 		// selected weapon
; 9009 : 		//
; 9010 : 
; 9011 : 		if (weapon_sub_type == selected_weapon)

  01fb9	8b 45 8c	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01fbc	3b 45 88	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01fbf	75 16		 jne	 SHORT $LN105@draw_weapo

; 9012 : 		{
; 9013 : 			set_mono_font_colour (MFD_COLOUR_RED);

  01fc1	b8 04 00 00 00	 mov	 eax, 4
  01fc6	6b c8 0f	 imul	 ecx, eax, 15
  01fc9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01fcf	52		 push	 edx
  01fd0	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 9014 : 		}
; 9015 : 		else

  01fd5	eb 14		 jmp	 SHORT $LN106@draw_weapo
$LN105@draw_weapo:

; 9016 : 		{
; 9017 : 			set_mono_font_colour (MFD_COLOUR_WHITE);

  01fd7	b8 04 00 00 00	 mov	 eax, 4
  01fdc	6b c8 13	 imul	 ecx, eax, 19
  01fdf	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01fe5	52		 push	 edx
  01fe6	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN106@draw_weapo:

; 9018 : 		}
; 9019 : 
; 9020 : 		//
; 9021 : 		// number
; 9022 : 		//
; 9023 : 
; 9024 : 		sprintf (s, "x%02d", number);

  01feb	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  01fee	50		 push	 eax
  01fef	68 00 00 00 00	 push	 OFFSET ??_C@_05HGDIBGHI@x?$CF02d@
  01ff4	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  01ff7	51		 push	 ecx
  01ff8	e8 00 00 00 00	 call	 _sprintf
  01ffd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9025 : 
; 9026 : 		set_2d_mono_font_position (0.24 - 0.4, -0.5);

  02000	51		 push	 ecx
  02001	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  02009	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0200e	51		 push	 ecx
  0200f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  02017	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0201c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9027 : 
; 9028 : 		x_adjust = -get_mono_font_string_width (s) + 1.0;

  02021	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  02024	50		 push	 eax
  02025	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0202a	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv2311[ebp]
  02030	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv2311[ebp]
  02038	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0203f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  02043	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0204b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0204f	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 9029 : 
; 9030 : 		set_mono_font_rel_position (x_adjust, get_mono_font_char_height ('X'));

  02054	6a 58		 push	 88			; 00000058H
  02056	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  0205b	51		 push	 ecx
  0205c	d9 1c 24	 fstp	 DWORD PTR [esp]
  0205f	51		 push	 ecx
  02060	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  02065	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0206a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9031 : 
; 9032 : 		print_mono_font_string (s);

  0206f	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  02072	50		 push	 eax
  02073	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9033 : 
; 9034 : 		//
; 9035 : 		// weapon name
; 9036 : 		//
; 9037 : 
; 9038 : 		set_2d_mono_font_position (-0.4, -0.5);

  02078	51		 push	 ecx
  02079	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  02081	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02086	51		 push	 ecx
  02087	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  0208f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02094	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9039 : 
; 9040 : 		x_adjust = get_mono_font_string_width (weapon_database[weapon_sub_type].mfd_name) * -0.5;

  02099	69 45 8c e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  020a0	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  020a6	51		 push	 ecx
  020a7	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  020ac	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv2328[ebp]
  020b2	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv2328[ebp]
  020ba	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  020c2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  020c6	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 9041 : 
; 9042 : 		set_mono_font_rel_position (x_adjust, 0.0);

  020cb	51		 push	 ecx
  020cc	0f 57 c0	 xorps	 xmm0, xmm0
  020cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020d4	51		 push	 ecx
  020d5	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  020da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020df	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9043 : 
; 9044 : 		print_mono_font_string (weapon_database[weapon_sub_type].mfd_name);

  020e4	69 45 8c e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  020eb	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  020f1	51		 push	 ecx
  020f2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9045 : 
; 9046 : 		//
; 9047 : 		// lines
; 9048 : 		//
; 9049 : 
; 9050 : 		if (draw_large_mfd)

  020f7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  020fe	0f 84 3f 01 00
	00		 je	 $LN107@draw_weapo

; 9051 : 		{
; 9052 : 			draw_2d_half_thick_line (0.46 - 0.4, 0.14, 0.46 - 0.4, -0.56, MFD_COLOUR_WHITE);

  02104	b8 04 00 00 00	 mov	 eax, 4
  02109	6b c8 13	 imul	 ecx, eax, 19
  0210c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02112	52		 push	 edx
  02113	51		 push	 ecx
  02114	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  0211c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02121	51		 push	 ecx
  02122	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d75c28f
  0212a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0212f	51		 push	 ecx
  02130	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  02138	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0213d	51		 push	 ecx
  0213e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d75c28f
  02146	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0214b	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 9053 : 
; 9054 : 			draw_2d_half_thick_line (0.26 - 0.4, -0.56, 0.46 - 0.4, -0.56, MFD_COLOUR_WHITE);

  02150	b8 04 00 00 00	 mov	 eax, 4
  02155	6b c8 13	 imul	 ecx, eax, 19
  02158	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0215e	52		 push	 edx
  0215f	51		 push	 ecx
  02160	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  02168	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0216d	51		 push	 ecx
  0216e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d75c28f
  02176	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0217b	51		 push	 ecx
  0217c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  02184	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02189	51		 push	 ecx
  0218a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  02192	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02197	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 9055 : 
; 9056 : 			if (damaged)

  0219c	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  021a0	0f 84 98 00 00
	00		 je	 $LN109@draw_weapo

; 9057 : 			{
; 9058 : 				draw_2d_half_thick_line (0.46 - 0.03 - 0.4, 0.17 - 0.05, 0.46 + 0.03 - 0.4, 0.17 + 0.05, MFD_COLOUR_WHITE);

  021a6	b8 04 00 00 00	 mov	 eax, 4
  021ab	6b c8 13	 imul	 ecx, eax, 19
  021ae	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  021b4	52		 push	 edx
  021b5	51		 push	 ecx
  021b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  021be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021c3	51		 push	 ecx
  021c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db851ec
  021cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021d1	51		 push	 ecx
  021d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  021da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021df	51		 push	 ecx
  021e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3cf5c28f
  021e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021ed	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 9059 : 
; 9060 : 				draw_2d_half_thick_line (0.46 + 0.03 - 0.4, 0.17 - 0.05, 0.46 - 0.03 - 0.4, 0.17 + 0.05, MFD_COLOUR_WHITE);

  021f2	b8 04 00 00 00	 mov	 eax, 4
  021f7	6b c8 13	 imul	 ecx, eax, 19
  021fa	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02200	52		 push	 edx
  02201	51		 push	 ecx
  02202	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  0220a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0220f	51		 push	 ecx
  02210	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3cf5c28f
  02218	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0221d	51		 push	 ecx
  0221e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  02226	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0222b	51		 push	 ecx
  0222c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db851ec
  02234	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02239	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN109@draw_weapo:

; 9061 : 			}
; 9062 : 		}
; 9063 : 		else

  0223e	e9 3a 01 00 00	 jmp	 $LN110@draw_weapo
$LN107@draw_weapo:

; 9064 : 		{
; 9065 : 			draw_2d_line (0.46 - 0.4, 0.14, 0.46 - 0.4, -0.56, MFD_COLOUR_WHITE);

  02243	b8 04 00 00 00	 mov	 eax, 4
  02248	6b c8 13	 imul	 ecx, eax, 19
  0224b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02251	52		 push	 edx
  02252	51		 push	 ecx
  02253	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  0225b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02260	51		 push	 ecx
  02261	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d75c28f
  02269	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0226e	51		 push	 ecx
  0226f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  02277	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0227c	51		 push	 ecx
  0227d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d75c28f
  02285	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0228a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9066 : 
; 9067 : 			draw_2d_line (0.26 - 0.4, -0.56, 0.46 - 0.4, -0.56, MFD_COLOUR_WHITE);

  0228f	b8 04 00 00 00	 mov	 eax, 4
  02294	6b c8 13	 imul	 ecx, eax, 19
  02297	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0229d	52		 push	 edx
  0229e	51		 push	 ecx
  0229f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  022a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022ac	51		 push	 ecx
  022ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d75c28f
  022b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022ba	51		 push	 ecx
  022bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  022c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022c8	51		 push	 ecx
  022c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  022d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022d6	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9068 : 
; 9069 : 			if (damaged)

  022db	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  022df	0f 84 98 00 00
	00		 je	 $LN110@draw_weapo

; 9070 : 			{
; 9071 : 				draw_2d_line (0.46 - 0.03 - 0.4, 0.17 - 0.05, 0.46 + 0.03 - 0.4, 0.17 + 0.05, MFD_COLOUR_WHITE);

  022e5	b8 04 00 00 00	 mov	 eax, 4
  022ea	6b c8 13	 imul	 ecx, eax, 19
  022ed	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  022f3	52		 push	 edx
  022f4	51		 push	 ecx
  022f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  022fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02302	51		 push	 ecx
  02303	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db851ec
  0230b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02310	51		 push	 ecx
  02311	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  02319	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0231e	51		 push	 ecx
  0231f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3cf5c28f
  02327	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0232c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9072 : 
; 9073 : 				draw_2d_line (0.46 + 0.03 - 0.4, 0.17 - 0.05, 0.46 - 0.03 - 0.4, 0.17 + 0.05, MFD_COLOUR_WHITE);

  02331	b8 04 00 00 00	 mov	 eax, 4
  02336	6b c8 13	 imul	 ecx, eax, 19
  02339	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0233f	52		 push	 edx
  02340	51		 push	 ecx
  02341	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  02349	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0234e	51		 push	 ecx
  0234f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3cf5c28f
  02357	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0235c	51		 push	 ecx
  0235d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  02365	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0236a	51		 push	 ecx
  0236b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db851ec
  02373	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02378	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN110@draw_weapo:

; 9074 : 			}
; 9075 : 		}
; 9076 : 	}
; 9077 : 
; 9078 : 	////////////////////////////////////////
; 9079 : 	//
; 9080 : 	// lh stub wing pylon
; 9081 : 	//
; 9082 : 	////////////////////////////////////////
; 9083 : 
; 9084 : 	if (stub_wings_attached)

  0237d	83 7d 9c 00	 cmp	 DWORD PTR _stub_wings_attached$[ebp], 0
  02381	0f 84 36 03 00
	00		 je	 $LN118@draw_weapo

; 9085 : 	{
; 9086 : 		result = get_local_entity_weapon_hardpoint_info (en, COMANCHE_LHS_STUB_WING, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  02387	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  0238a	50		 push	 eax
  0238b	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  0238e	51		 push	 ecx
  0238f	8d 55 8c	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  02392	52		 push	 edx
  02393	6a 00		 push	 0
  02395	6a 00		 push	 0
  02397	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  0239a	50		 push	 eax
  0239b	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  023a0	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 9087 : 
; 9088 : 		if (result)

  023a3	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  023a7	0f 84 10 03 00
	00		 je	 $LN118@draw_weapo

; 9089 : 		{
; 9090 : 			//
; 9091 : 			// selected weapon
; 9092 : 			//
; 9093 : 
; 9094 : 			if (weapon_sub_type == selected_weapon)

  023ad	8b 45 8c	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  023b0	3b 45 88	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  023b3	75 16		 jne	 SHORT $LN113@draw_weapo

; 9095 : 			{
; 9096 : 				set_mono_font_colour (MFD_COLOUR_RED);

  023b5	b8 04 00 00 00	 mov	 eax, 4
  023ba	6b c8 0f	 imul	 ecx, eax, 15
  023bd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  023c3	52		 push	 edx
  023c4	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 9097 : 			}
; 9098 : 			else

  023c9	eb 14		 jmp	 SHORT $LN114@draw_weapo
$LN113@draw_weapo:

; 9099 : 			{
; 9100 : 				set_mono_font_colour (MFD_COLOUR_WHITE);

  023cb	b8 04 00 00 00	 mov	 eax, 4
  023d0	6b c8 13	 imul	 ecx, eax, 19
  023d3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  023d9	52		 push	 edx
  023da	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN114@draw_weapo:

; 9101 : 			}
; 9102 : 
; 9103 : 			//
; 9104 : 			// number
; 9105 : 			//
; 9106 : 
; 9107 : 			sprintf (s, "x%02d", number);

  023df	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  023e2	50		 push	 eax
  023e3	68 00 00 00 00	 push	 OFFSET ??_C@_05HGDIBGHI@x?$CF02d@
  023e8	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  023eb	51		 push	 ecx
  023ec	e8 00 00 00 00	 call	 _sprintf
  023f1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9108 : 
; 9109 : 			set_2d_mono_font_position (-0.24 - 0.4, -0.7);

  023f4	51		 push	 ecx
  023f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  023fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02402	51		 push	 ecx
  02403	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf23d70a
  0240b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02410	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9110 : 
; 9111 : 			set_mono_font_rel_position (0.0, get_mono_font_char_height ('X'));

  02415	6a 58		 push	 88			; 00000058H
  02417	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  0241c	51		 push	 ecx
  0241d	d9 1c 24	 fstp	 DWORD PTR [esp]
  02420	51		 push	 ecx
  02421	0f 57 c0	 xorps	 xmm0, xmm0
  02424	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02429	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9112 : 
; 9113 : 			print_mono_font_string (s);

  0242e	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  02431	50		 push	 eax
  02432	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9114 : 
; 9115 : 			//
; 9116 : 			// lines
; 9117 : 			//
; 9118 : 
; 9119 : 			if (draw_large_mfd)

  02437	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0243e	0f 84 3f 01 00
	00		 je	 $LN115@draw_weapo

; 9120 : 			{
; 9121 : 				draw_2d_half_thick_line (-0.55 - 0.4, 0.29, -0.55 - 0.4, -0.76, MFD_COLOUR_WHITE);

  02444	b8 04 00 00 00	 mov	 eax, 4
  02449	6b c8 13	 imul	 ecx, eax, 19
  0244c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02452	52		 push	 edx
  02453	51		 push	 ecx
  02454	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf428f5c
  0245c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02461	51		 push	 ecx
  02462	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  0246a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0246f	51		 push	 ecx
  02470	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e947ae1
  02478	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0247d	51		 push	 ecx
  0247e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  02486	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0248b	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 9122 : 
; 9123 : 				draw_2d_half_thick_line (-0.26 - 0.4, -0.76, -0.55 - 0.4, -0.76, MFD_COLOUR_WHITE);

  02490	b8 04 00 00 00	 mov	 eax, 4
  02495	6b c8 13	 imul	 ecx, eax, 19
  02498	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0249e	52		 push	 edx
  0249f	51		 push	 ecx
  024a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf428f5c
  024a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024ad	51		 push	 ecx
  024ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  024b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024bb	51		 push	 ecx
  024bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf428f5c
  024c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024c9	51		 push	 ecx
  024ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf28f5c3
  024d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024d7	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 9124 : 
; 9125 : 				if (damaged)

  024dc	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  024e0	0f 84 98 00 00
	00		 je	 $LN117@draw_weapo

; 9126 : 				{
; 9127 : 					draw_2d_half_thick_line (-0.55 - 0.03 - 0.4, 0.33 - 0.05, -0.55 + 0.03 - 0.4, 0.33 + 0.05, MFD_COLOUR_WHITE);

  024e6	b8 04 00 00 00	 mov	 eax, 4
  024eb	6b c8 13	 imul	 ecx, eax, 19
  024ee	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  024f4	52		 push	 edx
  024f5	51		 push	 ecx
  024f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec28f5c
  024fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02503	51		 push	 ecx
  02504	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6b851f
  0250c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02511	51		 push	 ecx
  02512	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8f5c29
  0251a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0251f	51		 push	 ecx
  02520	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  02528	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0252d	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 9128 : 
; 9129 : 					draw_2d_half_thick_line (-0.55 + 0.03 - 0.4, 0.33 - 0.05, -0.55 - 0.03 - 0.4, 0.33 + 0.05, MFD_COLOUR_WHITE);

  02532	b8 04 00 00 00	 mov	 eax, 4
  02537	6b c8 13	 imul	 ecx, eax, 19
  0253a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02540	52		 push	 edx
  02541	51		 push	 ecx
  02542	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec28f5c
  0254a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0254f	51		 push	 ecx
  02550	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  02558	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0255d	51		 push	 ecx
  0255e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8f5c29
  02566	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0256b	51		 push	 ecx
  0256c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6b851f
  02574	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02579	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN117@draw_weapo:

; 9130 : 				}
; 9131 : 			}
; 9132 : 			else

  0257e	e9 3a 01 00 00	 jmp	 $LN118@draw_weapo
$LN115@draw_weapo:

; 9133 : 			{
; 9134 : 				draw_2d_line (-0.55 - 0.4, 0.29, -0.55 - 0.4, -0.76, MFD_COLOUR_WHITE);

  02583	b8 04 00 00 00	 mov	 eax, 4
  02588	6b c8 13	 imul	 ecx, eax, 19
  0258b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02591	52		 push	 edx
  02592	51		 push	 ecx
  02593	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf428f5c
  0259b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025a0	51		 push	 ecx
  025a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  025a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025ae	51		 push	 ecx
  025af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e947ae1
  025b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025bc	51		 push	 ecx
  025bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  025c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025ca	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9135 : 
; 9136 : 				draw_2d_line (-0.26 - 0.4, -0.76, -0.55 - 0.4, -0.76, MFD_COLOUR_WHITE);

  025cf	b8 04 00 00 00	 mov	 eax, 4
  025d4	6b c8 13	 imul	 ecx, eax, 19
  025d7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  025dd	52		 push	 edx
  025de	51		 push	 ecx
  025df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf428f5c
  025e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025ec	51		 push	 ecx
  025ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  025f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025fa	51		 push	 ecx
  025fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf428f5c
  02603	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02608	51		 push	 ecx
  02609	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf28f5c3
  02611	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02616	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9137 : 
; 9138 : 				if (damaged)

  0261b	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0261f	0f 84 98 00 00
	00		 je	 $LN118@draw_weapo

; 9139 : 				{
; 9140 : 					draw_2d_line (-0.55 - 0.03 - 0.4, 0.33 - 0.05, -0.55 + 0.03 - 0.4, 0.33 + 0.05, MFD_COLOUR_WHITE);

  02625	b8 04 00 00 00	 mov	 eax, 4
  0262a	6b c8 13	 imul	 ecx, eax, 19
  0262d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02633	52		 push	 edx
  02634	51		 push	 ecx
  02635	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec28f5c
  0263d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02642	51		 push	 ecx
  02643	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6b851f
  0264b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02650	51		 push	 ecx
  02651	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8f5c29
  02659	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0265e	51		 push	 ecx
  0265f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  02667	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0266c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9141 : 
; 9142 : 					draw_2d_line (-0.55 + 0.03 - 0.4, 0.33 - 0.05, -0.55 - 0.03 - 0.4, 0.33 + 0.05, MFD_COLOUR_WHITE);

  02671	b8 04 00 00 00	 mov	 eax, 4
  02676	6b c8 13	 imul	 ecx, eax, 19
  02679	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0267f	52		 push	 edx
  02680	51		 push	 ecx
  02681	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec28f5c
  02689	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0268e	51		 push	 ecx
  0268f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  02697	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0269c	51		 push	 ecx
  0269d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8f5c29
  026a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026aa	51		 push	 ecx
  026ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6b851f
  026b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026b8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN118@draw_weapo:

; 9143 : 				}
; 9144 : 			}
; 9145 : 		}
; 9146 : 	}
; 9147 : 
; 9148 : 	////////////////////////////////////////
; 9149 : 	//
; 9150 : 	// rh stub wing pylon
; 9151 : 	//
; 9152 : 	////////////////////////////////////////
; 9153 : 
; 9154 : 	if (stub_wings_attached)

  026bd	83 7d 9c 00	 cmp	 DWORD PTR _stub_wings_attached$[ebp], 0
  026c1	0f 84 ea 03 00
	00		 je	 $LN126@draw_weapo

; 9155 : 	{
; 9156 : 		result = get_local_entity_weapon_hardpoint_info (en, COMANCHE_RHS_STUB_WING, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  026c7	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  026ca	50		 push	 eax
  026cb	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  026ce	51		 push	 ecx
  026cf	8d 55 8c	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  026d2	52		 push	 edx
  026d3	6a 00		 push	 0
  026d5	6a 01		 push	 1
  026d7	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  026da	50		 push	 eax
  026db	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  026e0	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 9157 : 
; 9158 : 		if (result)

  026e3	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  026e7	0f 84 c4 03 00
	00		 je	 $LN126@draw_weapo

; 9159 : 		{
; 9160 : 			//
; 9161 : 			// selected weapon
; 9162 : 			//
; 9163 : 
; 9164 : 			if (weapon_sub_type == selected_weapon)

  026ed	8b 45 8c	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  026f0	3b 45 88	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  026f3	75 16		 jne	 SHORT $LN121@draw_weapo

; 9165 : 			{
; 9166 : 				set_mono_font_colour (MFD_COLOUR_RED);

  026f5	b8 04 00 00 00	 mov	 eax, 4
  026fa	6b c8 0f	 imul	 ecx, eax, 15
  026fd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02703	52		 push	 edx
  02704	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 9167 : 			}
; 9168 : 			else

  02709	eb 14		 jmp	 SHORT $LN122@draw_weapo
$LN121@draw_weapo:

; 9169 : 			{
; 9170 : 				set_mono_font_colour (MFD_COLOUR_WHITE);

  0270b	b8 04 00 00 00	 mov	 eax, 4
  02710	6b c8 13	 imul	 ecx, eax, 19
  02713	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02719	52		 push	 edx
  0271a	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN122@draw_weapo:

; 9171 : 			}
; 9172 : 
; 9173 : 			//
; 9174 : 			// number
; 9175 : 			//
; 9176 : 
; 9177 : 			sprintf (s, "x%02d", number);

  0271f	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  02722	50		 push	 eax
  02723	68 00 00 00 00	 push	 OFFSET ??_C@_05HGDIBGHI@x?$CF02d@
  02728	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  0272b	51		 push	 ecx
  0272c	e8 00 00 00 00	 call	 _sprintf
  02731	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9178 : 
; 9179 : 			set_2d_mono_font_position (0.24 - 0.4, -0.7);

  02734	51		 push	 ecx
  02735	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  0273d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02742	51		 push	 ecx
  02743	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  0274b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02750	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9180 : 
; 9181 : 			x_adjust = -get_mono_font_string_width (s) + 1.0;

  02755	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  02758	50		 push	 eax
  02759	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0275e	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv2537[ebp]
  02764	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv2537[ebp]
  0276c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  02773	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  02777	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0277f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02783	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 9182 : 
; 9183 : 			set_mono_font_rel_position (x_adjust, get_mono_font_char_height ('X'));

  02788	6a 58		 push	 88			; 00000058H
  0278a	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  0278f	51		 push	 ecx
  02790	d9 1c 24	 fstp	 DWORD PTR [esp]
  02793	51		 push	 ecx
  02794	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  02799	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0279e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9184 : 
; 9185 : 			print_mono_font_string (s);

  027a3	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  027a6	50		 push	 eax
  027a7	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9186 : 
; 9187 : 			//
; 9188 : 			// weapon name
; 9189 : 			//
; 9190 : 
; 9191 : 			set_2d_mono_font_position (-0.4, -0.7);

  027ac	51		 push	 ecx
  027ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  027b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027ba	51		 push	 ecx
  027bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  027c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027c8	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9192 : 
; 9193 : 			x_adjust = get_mono_font_string_width (weapon_database[weapon_sub_type].mfd_name) * -0.5;

  027cd	69 45 8c e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  027d4	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  027da	51		 push	 ecx
  027db	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  027e0	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv2554[ebp]
  027e6	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv2554[ebp]
  027ee	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  027f6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  027fa	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 9194 : 
; 9195 : 			set_mono_font_rel_position (x_adjust, 0.0);

  027ff	51		 push	 ecx
  02800	0f 57 c0	 xorps	 xmm0, xmm0
  02803	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02808	51		 push	 ecx
  02809	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0280e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02813	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9196 : 
; 9197 : 			print_mono_font_string (weapon_database[weapon_sub_type].mfd_name);

  02818	69 45 8c e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  0281f	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  02825	51		 push	 ecx
  02826	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9198 : 
; 9199 : 			//
; 9200 : 			// lines
; 9201 : 			//
; 9202 : 
; 9203 : 			if (draw_large_mfd)

  0282b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02832	0f 84 3f 01 00
	00		 je	 $LN123@draw_weapo

; 9204 : 			{
; 9205 : 				draw_2d_half_thick_line (0.55 - 0.4, 0.29, 0.55 - 0.4, -0.76, MFD_COLOUR_WHITE);

  02838	b8 04 00 00 00	 mov	 eax, 4
  0283d	6b c8 13	 imul	 ecx, eax, 19
  02840	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02846	52		 push	 edx
  02847	51		 push	 ecx
  02848	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf428f5c
  02850	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02855	51		 push	 ecx
  02856	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  0285e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02863	51		 push	 ecx
  02864	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e947ae1
  0286c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02871	51		 push	 ecx
  02872	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  0287a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0287f	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 9206 : 
; 9207 : 				draw_2d_half_thick_line (0.26 - 0.4, -0.76, 0.55 - 0.4, -0.76, MFD_COLOUR_WHITE);

  02884	b8 04 00 00 00	 mov	 eax, 4
  02889	6b c8 13	 imul	 ecx, eax, 19
  0288c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02892	52		 push	 edx
  02893	51		 push	 ecx
  02894	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf428f5c
  0289c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  028a1	51		 push	 ecx
  028a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  028aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  028af	51		 push	 ecx
  028b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf428f5c
  028b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  028bd	51		 push	 ecx
  028be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  028c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  028cb	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 9208 : 
; 9209 : 				if (damaged)

  028d0	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  028d4	0f 84 98 00 00
	00		 je	 $LN125@draw_weapo

; 9210 : 				{
; 9211 : 					draw_2d_half_thick_line (0.55 - 0.03 - 0.4, 0.33 - 0.05, 0.55 + 0.03 - 0.4, 0.33 + 0.05, MFD_COLOUR_WHITE);

  028da	b8 04 00 00 00	 mov	 eax, 4
  028df	6b c8 13	 imul	 ecx, eax, 19
  028e2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  028e8	52		 push	 edx
  028e9	51		 push	 ecx
  028ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec28f5c
  028f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  028f7	51		 push	 ecx
  028f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e3851ec
  02900	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02905	51		 push	 ecx
  02906	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8f5c29
  0290e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02913	51		 push	 ecx
  02914	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  0291c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02921	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 9212 : 
; 9213 : 					draw_2d_half_thick_line (0.55 + 0.03 - 0.4, 0.33 - 0.05, 0.55 - 0.03 - 0.4, 0.33 + 0.05, MFD_COLOUR_WHITE);

  02926	b8 04 00 00 00	 mov	 eax, 4
  0292b	6b c8 13	 imul	 ecx, eax, 19
  0292e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02934	52		 push	 edx
  02935	51		 push	 ecx
  02936	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec28f5c
  0293e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02943	51		 push	 ecx
  02944	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  0294c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02951	51		 push	 ecx
  02952	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8f5c29
  0295a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0295f	51		 push	 ecx
  02960	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e3851ec
  02968	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0296d	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN125@draw_weapo:

; 9214 : 				}
; 9215 : 			}
; 9216 : 			else

  02972	e9 3a 01 00 00	 jmp	 $LN126@draw_weapo
$LN123@draw_weapo:

; 9217 : 			{
; 9218 : 				draw_2d_line (0.55 - 0.4, 0.29, 0.55 - 0.4, -0.76, MFD_COLOUR_WHITE);

  02977	b8 04 00 00 00	 mov	 eax, 4
  0297c	6b c8 13	 imul	 ecx, eax, 19
  0297f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02985	52		 push	 edx
  02986	51		 push	 ecx
  02987	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf428f5c
  0298f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02994	51		 push	 ecx
  02995	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  0299d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029a2	51		 push	 ecx
  029a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e947ae1
  029ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029b0	51		 push	 ecx
  029b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  029b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029be	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9219 : 
; 9220 : 				draw_2d_line (0.26 - 0.4, -0.76, 0.55 - 0.4, -0.76, MFD_COLOUR_WHITE);

  029c3	b8 04 00 00 00	 mov	 eax, 4
  029c8	6b c8 13	 imul	 ecx, eax, 19
  029cb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  029d1	52		 push	 edx
  029d2	51		 push	 ecx
  029d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf428f5c
  029db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029e0	51		 push	 ecx
  029e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  029e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029ee	51		 push	 ecx
  029ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf428f5c
  029f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029fc	51		 push	 ecx
  029fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  02a05	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a0a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9221 : 
; 9222 : 				if (damaged)

  02a0f	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  02a13	0f 84 98 00 00
	00		 je	 $LN126@draw_weapo

; 9223 : 				{
; 9224 : 					draw_2d_line (0.55 - 0.03 - 0.4, 0.33 - 0.05, 0.55 + 0.03 - 0.4, 0.33 + 0.05, MFD_COLOUR_WHITE);

  02a19	b8 04 00 00 00	 mov	 eax, 4
  02a1e	6b c8 13	 imul	 ecx, eax, 19
  02a21	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02a27	52		 push	 edx
  02a28	51		 push	 ecx
  02a29	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec28f5c
  02a31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a36	51		 push	 ecx
  02a37	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e3851ec
  02a3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a44	51		 push	 ecx
  02a45	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8f5c29
  02a4d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a52	51		 push	 ecx
  02a53	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  02a5b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a60	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9225 : 
; 9226 : 					draw_2d_line (0.55 + 0.03 - 0.4, 0.33 - 0.05, 0.55 - 0.03 - 0.4, 0.33 + 0.05, MFD_COLOUR_WHITE);

  02a65	b8 04 00 00 00	 mov	 eax, 4
  02a6a	6b c8 13	 imul	 ecx, eax, 19
  02a6d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02a73	52		 push	 edx
  02a74	51		 push	 ecx
  02a75	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec28f5c
  02a7d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a82	51		 push	 ecx
  02a83	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  02a8b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a90	51		 push	 ecx
  02a91	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8f5c29
  02a99	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a9e	51		 push	 ecx
  02a9f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e3851ec
  02aa7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02aac	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN126@draw_weapo:

; 9227 : 				}
; 9228 : 			}
; 9229 : 		}
; 9230 : 	}
; 9231 : 
; 9232 : 	////////////////////////////////////////
; 9233 : 	//
; 9234 : 	// rocket salvo
; 9235 : 	//
; 9236 : 	////////////////////////////////////////
; 9237 : 
; 9238 : 	if ((selected_weapon == ENTITY_SUB_TYPE_WEAPON_HYDRA70_M255) || (selected_weapon == ENTITY_SUB_TYPE_WEAPON_HYDRA70_M261))

  02ab1	83 7d 88 1e	 cmp	 DWORD PTR _selected_weapon$[ebp], 30 ; 0000001eH
  02ab5	74 06		 je	 SHORT $LN129@draw_weapo
  02ab7	83 7d 88 1f	 cmp	 DWORD PTR _selected_weapon$[ebp], 31 ; 0000001fH
  02abb	75 16		 jne	 SHORT $LN127@draw_weapo
$LN129@draw_weapo:

; 9239 : 	{
; 9240 : 		set_mono_font_colour (MFD_COLOUR_RED);

  02abd	b8 04 00 00 00	 mov	 eax, 4
  02ac2	6b c8 0f	 imul	 ecx, eax, 15
  02ac5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02acb	52		 push	 edx
  02acc	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 9241 : 	}
; 9242 : 	else

  02ad1	eb 14		 jmp	 SHORT $LN128@draw_weapo
$LN127@draw_weapo:

; 9243 : 	{
; 9244 : 		set_mono_font_colour (MFD_COLOUR_WHITE);

  02ad3	b8 04 00 00 00	 mov	 eax, 4
  02ad8	6b c8 13	 imul	 ecx, eax, 19
  02adb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02ae1	52		 push	 edx
  02ae2	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN128@draw_weapo:

; 9245 : 	}
; 9246 : 
; 9247 : 	set_2d_mono_font_position (-0.4, -0.9);

  02ae7	51		 push	 ecx
  02ae8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  02af0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02af5	51		 push	 ecx
  02af6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  02afe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b03	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9248 : 
; 9249 : 	if (rocket_salvo_size == ROCKET_SALVO_SIZE_ALL)

  02b08	81 3d 00 00 00
	00 e8 03 00 00	 cmp	 DWORD PTR ?rocket_salvo_size@@3HA, 1000 ; rocket_salvo_size, 000003e8H
  02b12	75 13		 jne	 SHORT $LN130@draw_weapo

; 9250 : 	{
; 9251 : 		sprintf (s, "ROCKET SALVOxALL");

  02b14	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FAFOJLKK@ROCKET?5SALVOxALL@
  02b19	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  02b1c	50		 push	 eax
  02b1d	e8 00 00 00 00	 call	 _sprintf
  02b22	83 c4 08	 add	 esp, 8

; 9252 : 	}
; 9253 : 	else

  02b25	eb 17		 jmp	 SHORT $LN131@draw_weapo
$LN130@draw_weapo:

; 9254 : 	{
; 9255 : 		sprintf (s, "ROCKET SALVOx%02d", rocket_salvo_size);

  02b27	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rocket_salvo_size@@3HA ; rocket_salvo_size
  02b2c	50		 push	 eax
  02b2d	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CEPGDBDN@ROCKET?5SALVOx?$CF02d@
  02b32	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  02b35	51		 push	 ecx
  02b36	e8 00 00 00 00	 call	 _sprintf
  02b3b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN131@draw_weapo:

; 9256 : 	}
; 9257 : 
; 9258 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  02b3e	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  02b41	50		 push	 eax
  02b42	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02b47	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv2656[ebp]
  02b4d	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv2656[ebp]
  02b55	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  02b5d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02b61	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 9259 : 
; 9260 : 	set_mono_font_rel_position (x_adjust, 0.0);

  02b66	51		 push	 ecx
  02b67	0f 57 c0	 xorps	 xmm0, xmm0
  02b6a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b6f	51		 push	 ecx
  02b70	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  02b75	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b7a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9261 : 
; 9262 : 	print_mono_font_string (s);

  02b7f	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  02b82	50		 push	 eax
  02b83	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9263 : }

  02b88	5f		 pop	 edi
  02b89	5e		 pop	 esi
  02b8a	5b		 pop	 ebx
  02b8b	8b e5		 mov	 esp, ebp
  02b8d	5d		 pop	 ebp
  02b8e	c3		 ret	 0
?draw_weapon_display_side_mfd@@YGXXZ ENDP		; draw_weapon_display_side_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_weapon_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv2656 = -192						; size = 8
tv2554 = -192						; size = 8
tv2328 = -192						; size = 8
tv2102 = -192						; size = 8
tv1876 = -192						; size = 8
tv1690 = -192						; size = 8
tv1497 = -192						; size = 8
tv1484 = -192						; size = 8
tv1469 = -192						; size = 8
tv1456 = -192						; size = 8
tv1439 = -192						; size = 8
tv1426 = -192						; size = 8
tv78 = -192						; size = 4
tv2537 = -188						; size = 4
tv2311 = -188						; size = 4
tv2085 = -188						; size = 4
tv1859 = -188						; size = 4
tv1663 = -188						; size = 4
tv1655 = -188						; size = 4
tv1644 = -188						; size = 4
tv1586 = -188						; size = 4
tv1578 = -188						; size = 4
tv1567 = -188						; size = 4
tv70 = -188						; size = 4
_selected_weapon$ = -120				; size = 4
_weapon_sub_type$ = -116				; size = 4
_en$ = -112						; size = 4
_y_adjust$ = -108					; size = 4
_x_adjust$ = -104					; size = 4
_stub_wings_attached$ = -100				; size = 4
_damaged$ = -96						; size = 4
_number$ = -92						; size = 4
_result$ = -88						; size = 4
_i$ = -84						; size = 4
_s$ = -80						; size = 80
?draw_weapon_display_mfd@@YGXXZ PROC			; draw_weapon_display_mfd, COMDAT

; 6996 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 6997 : 	char
; 6998 : 		s[80];
; 6999 : 
; 7000 : 	int
; 7001 : 		i,
; 7002 : 		result,
; 7003 : 		number,
; 7004 : 		damaged,
; 7005 : 		stub_wings_attached;
; 7006 : 
; 7007 : 	float
; 7008 : 		x_adjust,
; 7009 : 		y_adjust;
; 7010 : 
; 7011 : 	entity
; 7012 : 		*en;
; 7013 : 
; 7014 : 	entity_sub_types
; 7015 : 		weapon_sub_type,
; 7016 : 		selected_weapon;
; 7017 : 
; 7018 : 	en = get_gunship_entity ();

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00011	89 45 90	 mov	 DWORD PTR _en$[ebp], eax

; 7019 : 
; 7020 : 	selected_weapon = get_local_entity_int_value (en, INT_TYPE_SELECTED_WEAPON);

  00014	83 7d 90 00	 cmp	 DWORD PTR _en$[ebp], 0
  00018	74 0d		 je	 SHORT $LN133@draw_weapo
  0001a	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], ecx
  00025	eb 24		 jmp	 SHORT $LN134@draw_weapo
$LN133@draw_weapo:
  00027	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_weapon_display_mfd@@YGXXZ@4JA
  0002d	83 c2 18	 add	 edx, 24			; 00000018H
  00030	52		 push	 edx
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00041	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN134@draw_weapo:
  0004b	b9 01 00 00 00	 mov	 ecx, 1
  00050	85 c9		 test	 ecx, ecx
  00052	74 0c		 je	 SHORT $LN135@draw_weapo
  00054	c7 85 40 ff ff
	ff b8 00 00 00	 mov	 DWORD PTR tv78[ebp], 184 ; 000000b8H
  0005e	eb 24		 jmp	 SHORT $LN136@draw_weapo
$LN135@draw_weapo:
  00060	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_weapon_display_mfd@@YGXXZ@4JA
  00066	83 c2 18	 add	 edx, 24			; 00000018H
  00069	52		 push	 edx
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007a	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN136@draw_weapo:
  00084	68 b8 00 00 00	 push	 184			; 000000b8H
  00089	8b 4d 90	 mov	 ecx, DWORD PTR _en$[ebp]
  0008c	51		 push	 ecx
  0008d	69 95 44 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv70[ebp], 1116
  00097	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv78[ebp]
  0009d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000a4	ff d1		 call	 ecx
  000a6	89 45 88	 mov	 DWORD PTR _selected_weapon$[ebp], eax

; 7021 : 
; 7022 : 	////////////////////////////////////////
; 7023 : 	//
; 7024 : 	// draw outline
; 7025 : 	//
; 7026 : 	////////////////////////////////////////
; 7027 : 
; 7028 : 	stub_wings_attached = get_comanche_stub_wings_attached (get_gunship_entity ());

  000a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ?get_comanche_stub_wings_attached@@YGHPAUENTITY@@@Z ; get_comanche_stub_wings_attached
  000b4	89 45 9c	 mov	 DWORD PTR _stub_wings_attached$[ebp], eax

; 7029 : 
; 7030 : 	if (stub_wings_attached)

  000b7	83 7d 9c 00	 cmp	 DWORD PTR _stub_wings_attached$[ebp], 0
  000bb	0f 84 45 01 00
	00		 je	 $LN10@draw_weapo

; 7031 : 	{
; 7032 : 		if (draw_large_mfd)

  000c1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  000c8	0f 84 9c 00 00
	00		 je	 $LN12@draw_weapo

; 7033 : 		{
; 7034 : 			i = 0;

  000ce	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
$LN2@draw_weapo:

; 7035 : 
; 7036 : 			while (i < num_main_weapon_line_points_with_stub_wings)

  000d5	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  000d8	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?num_main_weapon_line_points_with_stub_wings@@3HA
  000de	0f 8d 81 00 00
	00		 jge	 $LN3@draw_weapo

; 7037 : 			{
; 7038 : 				draw_2d_half_thick_line

  000e4	b8 04 00 00 00	 mov	 eax, 4
  000e9	6b c8 13	 imul	 ecx, eax, 19
  000ec	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000f2	52		 push	 edx
  000f3	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  000f6	83 c0 01	 add	 eax, 1
  000f9	6b c8 0c	 imul	 ecx, eax, 12
  000fc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?main_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  00102	51		 push	 ecx
  00103	f3 0f 10 44 0a
	04		 movss	 xmm0, DWORD PTR [edx+ecx+4]
  00109	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010e	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  00111	83 c0 01	 add	 eax, 1
  00114	6b c8 0c	 imul	 ecx, eax, 12
  00117	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?main_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  0011d	51		 push	 ecx
  0011e	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00123	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00128	6b 45 ac 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  0012c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?main_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  00132	51		 push	 ecx
  00133	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  00139	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013e	6b 55 ac 0c	 imul	 edx, DWORD PTR _i$[ebp], 12
  00142	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  00147	51		 push	 ecx
  00148	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  0014d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00152	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 7039 : 				(
; 7040 : 					main_weapon_line_points_with_stub_wings[i].x,
; 7041 : 					main_weapon_line_points_with_stub_wings[i].y,
; 7042 : 					main_weapon_line_points_with_stub_wings[i + 1].x,
; 7043 : 					main_weapon_line_points_with_stub_wings[i + 1].y,
; 7044 : 					MFD_COLOUR_WHITE
; 7045 : 				);
; 7046 : 
; 7047 : 				i += 2;

  00157	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  0015a	83 c0 02	 add	 eax, 2
  0015d	89 45 ac	 mov	 DWORD PTR _i$[ebp], eax

; 7048 : 			}

  00160	e9 70 ff ff ff	 jmp	 $LN2@draw_weapo
$LN3@draw_weapo:

; 7049 : 		}
; 7050 : 		else

  00165	e9 97 00 00 00	 jmp	 $LN5@draw_weapo
$LN12@draw_weapo:

; 7051 : 		{
; 7052 : 			i = 0;

  0016a	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
$LN4@draw_weapo:

; 7053 : 
; 7054 : 			while (i < num_main_weapon_line_points_with_stub_wings)

  00171	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  00174	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?num_main_weapon_line_points_with_stub_wings@@3HA
  0017a	0f 8d 81 00 00
	00		 jge	 $LN5@draw_weapo

; 7055 : 			{
; 7056 : 				draw_2d_line

  00180	b8 04 00 00 00	 mov	 eax, 4
  00185	6b c8 13	 imul	 ecx, eax, 19
  00188	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0018e	52		 push	 edx
  0018f	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  00192	83 c0 01	 add	 eax, 1
  00195	6b c8 0c	 imul	 ecx, eax, 12
  00198	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?main_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  0019e	51		 push	 ecx
  0019f	f3 0f 10 44 0a
	04		 movss	 xmm0, DWORD PTR [edx+ecx+4]
  001a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001aa	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  001ad	83 c0 01	 add	 eax, 1
  001b0	6b c8 0c	 imul	 ecx, eax, 12
  001b3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?main_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  001b9	51		 push	 ecx
  001ba	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  001bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c4	6b 45 ac 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  001c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?main_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  001ce	51		 push	 ecx
  001cf	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  001d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001da	6b 55 ac 0c	 imul	 edx, DWORD PTR _i$[ebp], 12
  001de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  001e3	51		 push	 ecx
  001e4	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  001e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ee	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7057 : 				(
; 7058 : 					main_weapon_line_points_with_stub_wings[i].x,
; 7059 : 					main_weapon_line_points_with_stub_wings[i].y,
; 7060 : 					main_weapon_line_points_with_stub_wings[i + 1].x,
; 7061 : 					main_weapon_line_points_with_stub_wings[i + 1].y,
; 7062 : 					MFD_COLOUR_WHITE
; 7063 : 				);
; 7064 : 
; 7065 : 				i += 2;

  001f3	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  001f6	83 c0 02	 add	 eax, 2
  001f9	89 45 ac	 mov	 DWORD PTR _i$[ebp], eax

; 7066 : 			}

  001fc	e9 70 ff ff ff	 jmp	 $LN4@draw_weapo
$LN5@draw_weapo:

; 7067 : 		}
; 7068 : 	}
; 7069 : 	else

  00201	e9 40 01 00 00	 jmp	 $LN9@draw_weapo
$LN10@draw_weapo:

; 7070 : 	{
; 7071 : 		if (draw_large_mfd)

  00206	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0020d	0f 84 9c 00 00
	00		 je	 $LN14@draw_weapo

; 7072 : 		{
; 7073 : 			i = 0;

  00213	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
$LN6@draw_weapo:

; 7074 : 
; 7075 : 			while (i < num_main_weapon_line_points_without_stub_wings)

  0021a	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  0021d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?num_main_weapon_line_points_without_stub_wings@@3HA
  00223	0f 8d 81 00 00
	00		 jge	 $LN7@draw_weapo

; 7076 : 			{
; 7077 : 				draw_2d_half_thick_line

  00229	b8 04 00 00 00	 mov	 eax, 4
  0022e	6b c8 13	 imul	 ecx, eax, 19
  00231	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00237	52		 push	 edx
  00238	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  0023b	83 c0 01	 add	 eax, 1
  0023e	6b c8 0c	 imul	 ecx, eax, 12
  00241	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?main_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00247	51		 push	 ecx
  00248	f3 0f 10 44 0a
	04		 movss	 xmm0, DWORD PTR [edx+ecx+4]
  0024e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00253	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  00256	83 c0 01	 add	 eax, 1
  00259	6b c8 0c	 imul	 ecx, eax, 12
  0025c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?main_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00262	51		 push	 ecx
  00263	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00268	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026d	6b 45 ac 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00271	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?main_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00277	51		 push	 ecx
  00278	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  0027e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00283	6b 55 ac 0c	 imul	 edx, DWORD PTR _i$[ebp], 12
  00287	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  0028c	51		 push	 ecx
  0028d	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00292	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00297	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 7078 : 				(
; 7079 : 					main_weapon_line_points_without_stub_wings[i].x,
; 7080 : 					main_weapon_line_points_without_stub_wings[i].y,
; 7081 : 					main_weapon_line_points_without_stub_wings[i + 1].x,
; 7082 : 					main_weapon_line_points_without_stub_wings[i + 1].y,
; 7083 : 					MFD_COLOUR_WHITE
; 7084 : 				);
; 7085 : 
; 7086 : 				i += 2;

  0029c	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  0029f	83 c0 02	 add	 eax, 2
  002a2	89 45 ac	 mov	 DWORD PTR _i$[ebp], eax

; 7087 : 			}

  002a5	e9 70 ff ff ff	 jmp	 $LN6@draw_weapo
$LN7@draw_weapo:

; 7088 : 		}
; 7089 : 		else

  002aa	e9 97 00 00 00	 jmp	 $LN9@draw_weapo
$LN14@draw_weapo:

; 7090 : 		{
; 7091 : 			i = 0;

  002af	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
$LN8@draw_weapo:

; 7092 : 
; 7093 : 			while (i < num_main_weapon_line_points_without_stub_wings)

  002b6	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  002b9	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?num_main_weapon_line_points_without_stub_wings@@3HA
  002bf	0f 8d 81 00 00
	00		 jge	 $LN9@draw_weapo

; 7094 : 			{
; 7095 : 				draw_2d_line

  002c5	b8 04 00 00 00	 mov	 eax, 4
  002ca	6b c8 13	 imul	 ecx, eax, 19
  002cd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002d3	52		 push	 edx
  002d4	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  002d7	83 c0 01	 add	 eax, 1
  002da	6b c8 0c	 imul	 ecx, eax, 12
  002dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?main_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  002e3	51		 push	 ecx
  002e4	f3 0f 10 44 0a
	04		 movss	 xmm0, DWORD PTR [edx+ecx+4]
  002ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ef	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  002f2	83 c0 01	 add	 eax, 1
  002f5	6b c8 0c	 imul	 ecx, eax, 12
  002f8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?main_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  002fe	51		 push	 ecx
  002ff	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00304	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00309	6b 45 ac 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  0030d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?main_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00313	51		 push	 ecx
  00314	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  0031a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0031f	6b 55 ac 0c	 imul	 edx, DWORD PTR _i$[ebp], 12
  00323	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00328	51		 push	 ecx
  00329	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  0032e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00333	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7096 : 				(
; 7097 : 					main_weapon_line_points_without_stub_wings[i].x,
; 7098 : 					main_weapon_line_points_without_stub_wings[i].y,
; 7099 : 					main_weapon_line_points_without_stub_wings[i + 1].x,
; 7100 : 					main_weapon_line_points_without_stub_wings[i + 1].y,
; 7101 : 					MFD_COLOUR_WHITE
; 7102 : 				);
; 7103 : 
; 7104 : 				i += 2;

  00338	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  0033b	83 c0 02	 add	 eax, 2
  0033e	89 45 ac	 mov	 DWORD PTR _i$[ebp], eax

; 7105 : 			}

  00341	e9 70 ff ff ff	 jmp	 $LN8@draw_weapo
$LN9@draw_weapo:

; 7106 : 		}
; 7107 : 	}
; 7108 : 
; 7109 : 	////////////////////////////////////////
; 7110 : 	//
; 7111 : 	// arm
; 7112 : 	//
; 7113 : 	////////////////////////////////////////
; 7114 : 
; 7115 : 	if (selected_weapon != ENTITY_SUB_TYPE_WEAPON_NO_WEAPON)

  00346	83 7d 88 00	 cmp	 DWORD PTR _selected_weapon$[ebp], 0
  0034a	74 16		 je	 SHORT $LN16@draw_weapo

; 7116 : 	{
; 7117 : 		set_mono_font_colour (MFD_COLOUR_RED);

  0034c	b8 04 00 00 00	 mov	 eax, 4
  00351	6b c8 0f	 imul	 ecx, eax, 15
  00354	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0035a	52		 push	 edx
  0035b	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7118 : 	}
; 7119 : 	else

  00360	eb 14		 jmp	 SHORT $LN17@draw_weapo
$LN16@draw_weapo:

; 7120 : 	{
; 7121 : 		set_mono_font_colour (MFD_COLOUR_WHITE);

  00362	b8 04 00 00 00	 mov	 eax, 4
  00367	6b c8 13	 imul	 ecx, eax, 19
  0036a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00370	52		 push	 edx
  00371	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN17@draw_weapo:

; 7122 : 	}
; 7123 : 
; 7124 : 	if (draw_large_mfd)

  00376	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0037d	74 71		 je	 SHORT $LN18@draw_weapo

; 7125 : 	{
; 7126 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  0037f	6a 05		 push	 5
  00381	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 7127 : 
; 7128 : 		set_2d_mono_font_position (0.0, 0.5);

  00386	51		 push	 ecx
  00387	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0038f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00394	51		 push	 ecx
  00395	0f 57 c0	 xorps	 xmm0, xmm0
  00398	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7129 : 
; 7130 : 		x_adjust = get_mono_font_string_width ("ARM") * -0.5;

  003a2	68 00 00 00 00	 push	 OFFSET ??_C@_03NHPMNECN@ARM@
  003a7	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  003ac	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv1426[ebp]
  003b2	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1426[ebp]
  003ba	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  003c2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003c6	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7131 : 
; 7132 : 		set_mono_font_rel_position (x_adjust, 0.0);

  003cb	51		 push	 ecx
  003cc	0f 57 c0	 xorps	 xmm0, xmm0
  003cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d4	51		 push	 ecx
  003d5	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  003da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003df	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7133 : 
; 7134 : 		print_mono_font_string ("ARM");

  003e4	68 00 00 00 00	 push	 OFFSET ??_C@_03NHPMNECN@ARM@
  003e9	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7135 : 	}
; 7136 : 	else

  003ee	eb 6f		 jmp	 SHORT $LN19@draw_weapo
$LN18@draw_weapo:

; 7137 : 	{
; 7138 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  003f0	6a 01		 push	 1
  003f2	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 7139 : 
; 7140 : 		set_2d_mono_font_position (0.0, 0.5);

  003f7	51		 push	 ecx
  003f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00400	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00405	51		 push	 ecx
  00406	0f 57 c0	 xorps	 xmm0, xmm0
  00409	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7141 : 
; 7142 : 		x_adjust = get_mono_font_string_width ("ARM") * -0.5;

  00413	68 00 00 00 00	 push	 OFFSET ??_C@_03NHPMNECN@ARM@
  00418	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0041d	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv1439[ebp]
  00423	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1439[ebp]
  0042b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00433	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00437	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7143 : 
; 7144 : 		set_mono_font_rel_position (x_adjust, 0.0);

  0043c	51		 push	 ecx
  0043d	0f 57 c0	 xorps	 xmm0, xmm0
  00440	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00445	51		 push	 ecx
  00446	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0044b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00450	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7145 : 
; 7146 : 		print_mono_font_string ("ARM");

  00455	68 00 00 00 00	 push	 OFFSET ??_C@_03NHPMNECN@ARM@
  0045a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN19@draw_weapo:

; 7147 : 	}
; 7148 : 
; 7149 : 	////////////////////////////////////////
; 7150 : 	//
; 7151 : 	// auto-counter measures
; 7152 : 	//
; 7153 : 	////////////////////////////////////////
; 7154 : 
; 7155 : 	if (get_global_auto_counter_measures ())

  0045f	83 3d 90 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+144, 0
  00466	74 16		 je	 SHORT $LN20@draw_weapo

; 7156 : 	{
; 7157 : 		set_mono_font_colour (MFD_COLOUR_WHITE);

  00468	b8 04 00 00 00	 mov	 eax, 4
  0046d	6b c8 13	 imul	 ecx, eax, 19
  00470	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00476	52		 push	 edx
  00477	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7158 : 	}
; 7159 : 	else

  0047c	eb 14		 jmp	 SHORT $LN21@draw_weapo
$LN20@draw_weapo:

; 7160 : 	{
; 7161 : 		set_mono_font_colour (MFD_COLOUR_WHITE);

  0047e	b8 04 00 00 00	 mov	 eax, 4
  00483	6b c8 13	 imul	 ecx, eax, 19
  00486	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0048c	52		 push	 edx
  0048d	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN21@draw_weapo:

; 7162 : 	}
; 7163 : 
; 7164 : 	if (draw_large_mfd)

  00492	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00499	0f 84 de 00 00
	00		 je	 $LN22@draw_weapo

; 7165 : 	{
; 7166 : 		set_mono_font_type (MONO_FONT_TYPE_6X10);

  0049f	6a 04		 push	 4
  004a1	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 7167 : 
; 7168 : 		set_2d_mono_font_position (0.0, 0.3);

  004a6	51		 push	 ecx
  004a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  004af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b4	51		 push	 ecx
  004b5	0f 57 c0	 xorps	 xmm0, xmm0
  004b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004bd	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7169 : 
; 7170 : 		x_adjust = get_mono_font_string_width ("AUTO") * -0.5;

  004c2	68 00 00 00 00	 push	 OFFSET ??_C@_04LMMJFDCN@AUTO@
  004c7	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  004cc	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv1456[ebp]
  004d2	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1456[ebp]
  004da	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  004e2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004e6	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7171 : 
; 7172 : 		set_mono_font_rel_position (x_adjust, 0.0);

  004eb	51		 push	 ecx
  004ec	0f 57 c0	 xorps	 xmm0, xmm0
  004ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f4	51		 push	 ecx
  004f5	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  004fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ff	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7173 : 
; 7174 : 		print_mono_font_string ("AUTO");

  00504	68 00 00 00 00	 push	 OFFSET ??_C@_04LMMJFDCN@AUTO@
  00509	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7175 : 
; 7176 : 		set_2d_mono_font_position (0.0, 0.3);

  0050e	51		 push	 ecx
  0050f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00517	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0051c	51		 push	 ecx
  0051d	0f 57 c0	 xorps	 xmm0, xmm0
  00520	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00525	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7177 : 
; 7178 : 		x_adjust = get_mono_font_string_width ("C/M") * -0.5;

  0052a	68 00 00 00 00	 push	 OFFSET ??_C@_03CBNMOHKF@C?1M@
  0052f	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00534	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv1469[ebp]
  0053a	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1469[ebp]
  00542	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0054a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0054e	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7179 : 
; 7180 : 		set_mono_font_rel_position (x_adjust, get_mono_font_char_height ('X'));

  00553	6a 58		 push	 88			; 00000058H
  00555	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  0055a	51		 push	 ecx
  0055b	d9 1c 24	 fstp	 DWORD PTR [esp]
  0055e	51		 push	 ecx
  0055f	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00564	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00569	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7181 : 
; 7182 : 		print_mono_font_string ("C/M");

  0056e	68 00 00 00 00	 push	 OFFSET ??_C@_03CBNMOHKF@C?1M@
  00573	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7183 : 	}
; 7184 : 	else

  00578	e9 d9 00 00 00	 jmp	 $LN23@draw_weapo
$LN22@draw_weapo:

; 7185 : 	{
; 7186 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  0057d	6a 01		 push	 1
  0057f	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 7187 : 
; 7188 : 		set_2d_mono_font_position (0.0, 0.3);

  00584	51		 push	 ecx
  00585	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  0058d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00592	51		 push	 ecx
  00593	0f 57 c0	 xorps	 xmm0, xmm0
  00596	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7189 : 
; 7190 : 		x_adjust = get_mono_font_string_width ("AUTO") * -0.5;

  005a0	68 00 00 00 00	 push	 OFFSET ??_C@_04LMMJFDCN@AUTO@
  005a5	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  005aa	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv1484[ebp]
  005b0	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1484[ebp]
  005b8	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  005c0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005c4	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7191 : 
; 7192 : 		set_mono_font_rel_position (x_adjust, 0.0);

  005c9	51		 push	 ecx
  005ca	0f 57 c0	 xorps	 xmm0, xmm0
  005cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d2	51		 push	 ecx
  005d3	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  005d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005dd	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7193 : 
; 7194 : 		print_mono_font_string ("AUTO");

  005e2	68 00 00 00 00	 push	 OFFSET ??_C@_04LMMJFDCN@AUTO@
  005e7	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7195 : 
; 7196 : 		set_2d_mono_font_position (0.0, 0.3);

  005ec	51		 push	 ecx
  005ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  005f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005fa	51		 push	 ecx
  005fb	0f 57 c0	 xorps	 xmm0, xmm0
  005fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00603	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7197 : 
; 7198 : 		x_adjust = get_mono_font_string_width ("C/M") * -0.5;

  00608	68 00 00 00 00	 push	 OFFSET ??_C@_03CBNMOHKF@C?1M@
  0060d	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00612	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv1497[ebp]
  00618	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1497[ebp]
  00620	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00628	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0062c	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7199 : 
; 7200 : 		set_mono_font_rel_position (x_adjust, get_mono_font_char_height ('X'));

  00631	6a 58		 push	 88			; 00000058H
  00633	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  00638	51		 push	 ecx
  00639	d9 1c 24	 fstp	 DWORD PTR [esp]
  0063c	51		 push	 ecx
  0063d	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00642	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00647	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7201 : 
; 7202 : 		print_mono_font_string ("C/M");

  0064c	68 00 00 00 00	 push	 OFFSET ??_C@_03CBNMOHKF@C?1M@
  00651	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN23@draw_weapo:

; 7203 : 	}
; 7204 : 
; 7205 : 	////////////////////////////////////////
; 7206 : 	//
; 7207 : 	// chaff and flares
; 7208 : 	//
; 7209 : 	////////////////////////////////////////
; 7210 : 
; 7211 : 	if (draw_large_mfd)

  00656	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0065d	74 16		 je	 SHORT $LN24@draw_weapo

; 7212 : 	{
; 7213 : 		set_mono_font_type (MONO_FONT_TYPE_6X10);

  0065f	6a 04		 push	 4
  00661	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 7214 : 
; 7215 : 		y_adjust = -6.0;

  00666	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  0066e	f3 0f 11 45 94	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7216 : 	}
; 7217 : 	else

  00673	eb 14		 jmp	 SHORT $LN25@draw_weapo
$LN24@draw_weapo:

; 7218 : 	{
; 7219 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  00675	6a 00		 push	 0
  00677	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 7220 : 
; 7221 : 		y_adjust = -4.0;

  0067c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  00684	f3 0f 11 45 94	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN25@draw_weapo:

; 7222 : 	}
; 7223 : 
; 7224 : 	//
; 7225 : 	// lh chaff
; 7226 : 	//
; 7227 : 
; 7228 : 	result = get_local_entity_weapon_hardpoint_info (en, COMANCHE_LHS_CHAFF_DISPENSER, ENTITY_SUB_TYPE_WEAPON_CHAFF, &weapon_sub_type, &number, &damaged);

  00689	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  0068c	50		 push	 eax
  0068d	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  00690	51		 push	 ecx
  00691	8d 55 8c	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00694	52		 push	 edx
  00695	6a 43		 push	 67			; 00000043H
  00697	6a 02		 push	 2
  00699	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  0069c	50		 push	 eax
  0069d	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  006a2	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 7229 : 
; 7230 : 	if (result)

  006a5	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  006a9	0f 84 ca 00 00
	00		 je	 $LN34@draw_weapo

; 7231 : 	{
; 7232 : 		set_2d_mono_font_position (-0.675, 0.7);

  006af	51		 push	 ecx
  006b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  006b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006bd	51		 push	 ecx
  006be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2ccccd
  006c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006cb	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7233 : 
; 7234 : 		if (!damaged)

  006d0	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  006d4	75 70		 jne	 SHORT $LN27@draw_weapo

; 7235 : 		{
; 7236 : 			if (number > 0)

  006d6	83 7d a4 00	 cmp	 DWORD PTR _number$[ebp], 0
  006da	7e 16		 jle	 SHORT $LN29@draw_weapo

; 7237 : 			{
; 7238 : 				set_mono_font_colour (MFD_COLOUR_WHITE);

  006dc	b8 04 00 00 00	 mov	 eax, 4
  006e1	6b c8 13	 imul	 ecx, eax, 19
  006e4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006ea	52		 push	 edx
  006eb	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7239 : 			}
; 7240 : 			else

  006f0	eb 14		 jmp	 SHORT $LN30@draw_weapo
$LN29@draw_weapo:

; 7241 : 			{
; 7242 : 				set_mono_font_colour (MFD_COLOUR_WHITE);

  006f2	b8 04 00 00 00	 mov	 eax, 4
  006f7	6b c8 13	 imul	 ecx, eax, 19
  006fa	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00700	52		 push	 edx
  00701	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN30@draw_weapo:

; 7243 : 			}
; 7244 : 
; 7245 : 			if (draw_large_mfd)

  00706	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0070d	74 17		 je	 SHORT $LN31@draw_weapo

; 7246 : 			{
; 7247 : 				sprintf (s, "CHAFFx%02d", number);

  0070f	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  00712	50		 push	 eax
  00713	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GPHKKCOA@CHAFFx?$CF02d@
  00718	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  0071b	51		 push	 ecx
  0071c	e8 00 00 00 00	 call	 _sprintf
  00721	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7248 : 			}
; 7249 : 			else

  00724	eb 15		 jmp	 SHORT $LN32@draw_weapo
$LN31@draw_weapo:

; 7250 : 			{
; 7251 : 				sprintf (s, "Cx%02d", number);

  00726	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  00729	50		 push	 eax
  0072a	68 00 00 00 00	 push	 OFFSET ??_C@_06CPHFAHEB@Cx?$CF02d@
  0072f	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00732	51		 push	 ecx
  00733	e8 00 00 00 00	 call	 _sprintf
  00738	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN32@draw_weapo:

; 7252 : 			}
; 7253 : 
; 7254 : 			print_mono_font_string (s);

  0073b	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  0073e	50		 push	 eax
  0073f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7255 : 		}
; 7256 : 		else

  00744	eb 33		 jmp	 SHORT $LN34@draw_weapo
$LN27@draw_weapo:

; 7257 : 		{
; 7258 : 			set_mono_font_colour (MFD_COLOUR_WHITE);

  00746	b8 04 00 00 00	 mov	 eax, 4
  0074b	6b c8 13	 imul	 ecx, eax, 19
  0074e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00754	52		 push	 edx
  00755	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7259 : 
; 7260 : 			if (draw_large_mfd)

  0075a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00761	74 0c		 je	 SHORT $LN33@draw_weapo

; 7261 : 			{
; 7262 : 				print_mono_font_string ("CHAFFxXX");

  00763	68 00 00 00 00	 push	 OFFSET ??_C@_08FGBJBHLJ@CHAFFxXX@
  00768	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7263 : 			}
; 7264 : 			else

  0076d	eb 0a		 jmp	 SHORT $LN34@draw_weapo
$LN33@draw_weapo:

; 7265 : 			{
; 7266 : 				print_mono_font_string ("CxXX");

  0076f	68 00 00 00 00	 push	 OFFSET ??_C@_04JIMIAKFM@CxXX@
  00774	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN34@draw_weapo:

; 7267 : 			}
; 7268 : 		}
; 7269 : 	}
; 7270 : 
; 7271 : 	//
; 7272 : 	// lh flare
; 7273 : 	//
; 7274 : 
; 7275 : 	result = get_local_entity_weapon_hardpoint_info (en, COMANCHE_LHS_FLARE_DISPENSER, ENTITY_SUB_TYPE_WEAPON_FLARE, &weapon_sub_type, &number, &damaged);

  00779	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  0077c	50		 push	 eax
  0077d	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  00780	51		 push	 ecx
  00781	8d 55 8c	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00784	52		 push	 edx
  00785	6a 44		 push	 68			; 00000044H
  00787	6a 02		 push	 2
  00789	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  0078c	50		 push	 eax
  0078d	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  00792	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 7276 : 
; 7277 : 	if (result)

  00795	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  00799	0f 84 ca 00 00
	00		 je	 $LN43@draw_weapo

; 7278 : 	{
; 7279 : 		set_2d_mono_font_position (-0.675, 0.6);

  0079f	51		 push	 ecx
  007a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  007a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ad	51		 push	 ecx
  007ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2ccccd
  007b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007bb	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7280 : 
; 7281 : 		if (!damaged)

  007c0	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  007c4	75 70		 jne	 SHORT $LN36@draw_weapo

; 7282 : 		{
; 7283 : 			if (number > 0)

  007c6	83 7d a4 00	 cmp	 DWORD PTR _number$[ebp], 0
  007ca	7e 16		 jle	 SHORT $LN38@draw_weapo

; 7284 : 			{
; 7285 : 				set_mono_font_colour (MFD_COLOUR_WHITE);

  007cc	b8 04 00 00 00	 mov	 eax, 4
  007d1	6b c8 13	 imul	 ecx, eax, 19
  007d4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007da	52		 push	 edx
  007db	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7286 : 			}
; 7287 : 			else

  007e0	eb 14		 jmp	 SHORT $LN39@draw_weapo
$LN38@draw_weapo:

; 7288 : 			{
; 7289 : 				set_mono_font_colour (MFD_COLOUR_WHITE);

  007e2	b8 04 00 00 00	 mov	 eax, 4
  007e7	6b c8 13	 imul	 ecx, eax, 19
  007ea	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007f0	52		 push	 edx
  007f1	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN39@draw_weapo:

; 7290 : 			}
; 7291 : 
; 7292 : 			if (draw_large_mfd)

  007f6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  007fd	74 17		 je	 SHORT $LN40@draw_weapo

; 7293 : 			{
; 7294 : 				sprintf (s, "FLAREx%02d", number);

  007ff	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  00802	50		 push	 eax
  00803	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NONPILJE@FLAREx?$CF02d@
  00808	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  0080b	51		 push	 ecx
  0080c	e8 00 00 00 00	 call	 _sprintf
  00811	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7295 : 			}
; 7296 : 			else

  00814	eb 15		 jmp	 SHORT $LN41@draw_weapo
$LN40@draw_weapo:

; 7297 : 			{
; 7298 : 				sprintf (s, "Fx%02d", number);

  00816	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  00819	50		 push	 eax
  0081a	68 00 00 00 00	 push	 OFFSET ??_C@_06HNENCIOG@Fx?$CF02d@
  0081f	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00822	51		 push	 ecx
  00823	e8 00 00 00 00	 call	 _sprintf
  00828	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN41@draw_weapo:

; 7299 : 			}
; 7300 : 
; 7301 : 			print_mono_font_string (s);

  0082b	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  0082e	50		 push	 eax
  0082f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7302 : 		}
; 7303 : 		else

  00834	eb 33		 jmp	 SHORT $LN43@draw_weapo
$LN36@draw_weapo:

; 7304 : 		{
; 7305 : 			set_mono_font_colour (MFD_COLOUR_WHITE);

  00836	b8 04 00 00 00	 mov	 eax, 4
  0083b	6b c8 13	 imul	 ecx, eax, 19
  0083e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00844	52		 push	 edx
  00845	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7306 : 
; 7307 : 			if (draw_large_mfd)

  0084a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00851	74 0c		 je	 SHORT $LN42@draw_weapo

; 7308 : 			{
; 7309 : 				print_mono_font_string ("FLARExXX");

  00853	68 00 00 00 00	 push	 OFFSET ??_C@_08EHCDGGFB@FLARExXX@
  00858	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7310 : 			}
; 7311 : 			else

  0085d	eb 0a		 jmp	 SHORT $LN43@draw_weapo
$LN42@draw_weapo:

; 7312 : 			{
; 7313 : 				print_mono_font_string ("FxXX");

  0085f	68 00 00 00 00	 push	 OFFSET ??_C@_04FACIIFCM@FxXX@
  00864	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN43@draw_weapo:

; 7314 : 			}
; 7315 : 		}
; 7316 : 	}
; 7317 : 
; 7318 : 	//
; 7319 : 	// rh chaff
; 7320 : 	//
; 7321 : 
; 7322 : 	result = get_local_entity_weapon_hardpoint_info (en, COMANCHE_RHS_CHAFF_DISPENSER, ENTITY_SUB_TYPE_WEAPON_CHAFF, &weapon_sub_type, &number, &damaged);

  00869	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  0086c	50		 push	 eax
  0086d	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  00870	51		 push	 ecx
  00871	8d 55 8c	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00874	52		 push	 edx
  00875	6a 43		 push	 67			; 00000043H
  00877	6a 03		 push	 3
  00879	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  0087c	50		 push	 eax
  0087d	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  00882	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 7323 : 
; 7324 : 	if (result)

  00885	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  00889	0f 84 87 01 00
	00		 je	 $LN52@draw_weapo

; 7325 : 	{
; 7326 : 		set_2d_mono_font_position (0.675, 0.7);

  0088f	51		 push	 ecx
  00890	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00898	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0089d	51		 push	 ecx
  0089e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f2ccccd
  008a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ab	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7327 : 
; 7328 : 		if (!damaged)

  008b0	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  008b4	0f 85 af 00 00
	00		 jne	 $LN45@draw_weapo

; 7329 : 		{
; 7330 : 			if (number > 0)

  008ba	83 7d a4 00	 cmp	 DWORD PTR _number$[ebp], 0
  008be	7e 16		 jle	 SHORT $LN47@draw_weapo

; 7331 : 			{
; 7332 : 				set_mono_font_colour (MFD_COLOUR_WHITE);

  008c0	b8 04 00 00 00	 mov	 eax, 4
  008c5	6b c8 13	 imul	 ecx, eax, 19
  008c8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008ce	52		 push	 edx
  008cf	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7333 : 			}
; 7334 : 			else

  008d4	eb 14		 jmp	 SHORT $LN48@draw_weapo
$LN47@draw_weapo:

; 7335 : 			{
; 7336 : 				set_mono_font_colour (MFD_COLOUR_WHITE);

  008d6	b8 04 00 00 00	 mov	 eax, 4
  008db	6b c8 13	 imul	 ecx, eax, 19
  008de	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008e4	52		 push	 edx
  008e5	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN48@draw_weapo:

; 7337 : 			}
; 7338 : 
; 7339 : 			if (draw_large_mfd)

  008ea	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  008f1	74 17		 je	 SHORT $LN49@draw_weapo

; 7340 : 			{
; 7341 : 				sprintf (s, "CHAFFx%02d", number);

  008f3	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  008f6	50		 push	 eax
  008f7	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GPHKKCOA@CHAFFx?$CF02d@
  008fc	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  008ff	51		 push	 ecx
  00900	e8 00 00 00 00	 call	 _sprintf
  00905	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7342 : 			}
; 7343 : 			else

  00908	eb 15		 jmp	 SHORT $LN50@draw_weapo
$LN49@draw_weapo:

; 7344 : 			{
; 7345 : 				sprintf (s, "Cx%02d", number);

  0090a	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  0090d	50		 push	 eax
  0090e	68 00 00 00 00	 push	 OFFSET ??_C@_06CPHFAHEB@Cx?$CF02d@
  00913	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00916	51		 push	 ecx
  00917	e8 00 00 00 00	 call	 _sprintf
  0091c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN50@draw_weapo:

; 7346 : 			}
; 7347 : 
; 7348 : 			x_adjust = -get_mono_font_string_width (s);

  0091f	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00922	50		 push	 eax
  00923	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00928	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv1567[ebp]
  0092e	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1567[ebp]
  00936	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0093d	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7349 : 
; 7350 : 			set_mono_font_rel_position (x_adjust, 0.0);

  00942	51		 push	 ecx
  00943	0f 57 c0	 xorps	 xmm0, xmm0
  00946	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0094b	51		 push	 ecx
  0094c	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00951	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00956	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7351 : 
; 7352 : 			print_mono_font_string (s);

  0095b	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  0095e	50		 push	 eax
  0095f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7353 : 		}
; 7354 : 		else

  00964	e9 ad 00 00 00	 jmp	 $LN52@draw_weapo
$LN45@draw_weapo:

; 7355 : 		{
; 7356 : 			set_mono_font_colour (MFD_COLOUR_WHITE);

  00969	b8 04 00 00 00	 mov	 eax, 4
  0096e	6b c8 13	 imul	 ecx, eax, 19
  00971	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00977	52		 push	 edx
  00978	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7357 : 
; 7358 : 			if (draw_large_mfd)

  0097d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00984	74 49		 je	 SHORT $LN51@draw_weapo

; 7359 : 			{
; 7360 : 				x_adjust = -get_mono_font_string_width ("CHAFFxXX");

  00986	68 00 00 00 00	 push	 OFFSET ??_C@_08FGBJBHLJ@CHAFFxXX@
  0098b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00990	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv1578[ebp]
  00996	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1578[ebp]
  0099e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  009a5	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7361 : 
; 7362 : 				set_mono_font_rel_position (x_adjust, 0.0);

  009aa	51		 push	 ecx
  009ab	0f 57 c0	 xorps	 xmm0, xmm0
  009ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b3	51		 push	 ecx
  009b4	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  009b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009be	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7363 : 
; 7364 : 				print_mono_font_string ("CHAFFxXX");

  009c3	68 00 00 00 00	 push	 OFFSET ??_C@_08FGBJBHLJ@CHAFFxXX@
  009c8	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7365 : 			}
; 7366 : 			else

  009cd	eb 47		 jmp	 SHORT $LN52@draw_weapo
$LN51@draw_weapo:

; 7367 : 			{
; 7368 : 				x_adjust = -get_mono_font_string_width ("CxXX");

  009cf	68 00 00 00 00	 push	 OFFSET ??_C@_04JIMIAKFM@CxXX@
  009d4	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  009d9	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv1586[ebp]
  009df	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1586[ebp]
  009e7	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  009ee	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7369 : 
; 7370 : 				set_mono_font_rel_position (x_adjust, 0.0);

  009f3	51		 push	 ecx
  009f4	0f 57 c0	 xorps	 xmm0, xmm0
  009f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009fc	51		 push	 ecx
  009fd	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00a02	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a07	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7371 : 
; 7372 : 				print_mono_font_string ("CxXX");

  00a0c	68 00 00 00 00	 push	 OFFSET ??_C@_04JIMIAKFM@CxXX@
  00a11	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN52@draw_weapo:

; 7373 : 			}
; 7374 : 		}
; 7375 : 	}
; 7376 : 
; 7377 : 	//
; 7378 : 	// rh flare
; 7379 : 	//
; 7380 : 
; 7381 : 	result = get_local_entity_weapon_hardpoint_info (en, COMANCHE_RHS_FLARE_DISPENSER, ENTITY_SUB_TYPE_WEAPON_FLARE, &weapon_sub_type, &number, &damaged);

  00a16	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  00a19	50		 push	 eax
  00a1a	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  00a1d	51		 push	 ecx
  00a1e	8d 55 8c	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00a21	52		 push	 edx
  00a22	6a 44		 push	 68			; 00000044H
  00a24	6a 03		 push	 3
  00a26	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  00a29	50		 push	 eax
  00a2a	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  00a2f	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 7382 : 
; 7383 : 	if (result)

  00a32	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  00a36	0f 84 87 01 00
	00		 je	 $LN61@draw_weapo

; 7384 : 	{
; 7385 : 		set_2d_mono_font_position (0.675, 0.6);

  00a3c	51		 push	 ecx
  00a3d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00a45	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a4a	51		 push	 ecx
  00a4b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f2ccccd
  00a53	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a58	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7386 : 
; 7387 : 		if (!damaged)

  00a5d	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00a61	0f 85 af 00 00
	00		 jne	 $LN54@draw_weapo

; 7388 : 		{
; 7389 : 			if (number > 0)

  00a67	83 7d a4 00	 cmp	 DWORD PTR _number$[ebp], 0
  00a6b	7e 16		 jle	 SHORT $LN56@draw_weapo

; 7390 : 			{
; 7391 : 				set_mono_font_colour (MFD_COLOUR_WHITE);

  00a6d	b8 04 00 00 00	 mov	 eax, 4
  00a72	6b c8 13	 imul	 ecx, eax, 19
  00a75	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a7b	52		 push	 edx
  00a7c	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7392 : 			}
; 7393 : 			else

  00a81	eb 14		 jmp	 SHORT $LN57@draw_weapo
$LN56@draw_weapo:

; 7394 : 			{
; 7395 : 				set_mono_font_colour (MFD_COLOUR_WHITE);

  00a83	b8 04 00 00 00	 mov	 eax, 4
  00a88	6b c8 13	 imul	 ecx, eax, 19
  00a8b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a91	52		 push	 edx
  00a92	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN57@draw_weapo:

; 7396 : 			}
; 7397 : 
; 7398 : 			if (draw_large_mfd)

  00a97	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00a9e	74 17		 je	 SHORT $LN58@draw_weapo

; 7399 : 			{
; 7400 : 				sprintf (s, "FLAREx%02d", number);

  00aa0	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  00aa3	50		 push	 eax
  00aa4	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NONPILJE@FLAREx?$CF02d@
  00aa9	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00aac	51		 push	 ecx
  00aad	e8 00 00 00 00	 call	 _sprintf
  00ab2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7401 : 			}
; 7402 : 			else

  00ab5	eb 15		 jmp	 SHORT $LN59@draw_weapo
$LN58@draw_weapo:

; 7403 : 			{
; 7404 : 				sprintf (s, "Fx%02d", number);

  00ab7	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  00aba	50		 push	 eax
  00abb	68 00 00 00 00	 push	 OFFSET ??_C@_06HNENCIOG@Fx?$CF02d@
  00ac0	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00ac3	51		 push	 ecx
  00ac4	e8 00 00 00 00	 call	 _sprintf
  00ac9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN59@draw_weapo:

; 7405 : 			}
; 7406 : 
; 7407 : 			x_adjust = -get_mono_font_string_width (s);

  00acc	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00acf	50		 push	 eax
  00ad0	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00ad5	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv1644[ebp]
  00adb	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1644[ebp]
  00ae3	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00aea	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7408 : 
; 7409 : 			set_mono_font_rel_position (x_adjust, 0.0);

  00aef	51		 push	 ecx
  00af0	0f 57 c0	 xorps	 xmm0, xmm0
  00af3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00af8	51		 push	 ecx
  00af9	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00afe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b03	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7410 : 
; 7411 : 			print_mono_font_string (s);

  00b08	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00b0b	50		 push	 eax
  00b0c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7412 : 		}
; 7413 : 		else

  00b11	e9 ad 00 00 00	 jmp	 $LN61@draw_weapo
$LN54@draw_weapo:

; 7414 : 		{
; 7415 : 			set_mono_font_colour (MFD_COLOUR_WHITE);

  00b16	b8 04 00 00 00	 mov	 eax, 4
  00b1b	6b c8 13	 imul	 ecx, eax, 19
  00b1e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b24	52		 push	 edx
  00b25	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7416 : 
; 7417 : 			if (draw_large_mfd)

  00b2a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00b31	74 49		 je	 SHORT $LN60@draw_weapo

; 7418 : 			{
; 7419 : 				x_adjust = -get_mono_font_string_width ("FLARExXX");

  00b33	68 00 00 00 00	 push	 OFFSET ??_C@_08EHCDGGFB@FLARExXX@
  00b38	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00b3d	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv1655[ebp]
  00b43	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1655[ebp]
  00b4b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00b52	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7420 : 
; 7421 : 				set_mono_font_rel_position (x_adjust, 0.0);

  00b57	51		 push	 ecx
  00b58	0f 57 c0	 xorps	 xmm0, xmm0
  00b5b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b60	51		 push	 ecx
  00b61	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00b66	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b6b	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7422 : 
; 7423 : 				print_mono_font_string ("FLARExXX");

  00b70	68 00 00 00 00	 push	 OFFSET ??_C@_08EHCDGGFB@FLARExXX@
  00b75	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7424 : 			}
; 7425 : 			else

  00b7a	eb 47		 jmp	 SHORT $LN61@draw_weapo
$LN60@draw_weapo:

; 7426 : 			{
; 7427 : 				x_adjust = -get_mono_font_string_width ("FxXX");

  00b7c	68 00 00 00 00	 push	 OFFSET ??_C@_04FACIIFCM@FxXX@
  00b81	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00b86	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv1663[ebp]
  00b8c	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1663[ebp]
  00b94	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00b9b	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7428 : 
; 7429 : 				set_mono_font_rel_position (x_adjust, 0.0);

  00ba0	51		 push	 ecx
  00ba1	0f 57 c0	 xorps	 xmm0, xmm0
  00ba4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ba9	51		 push	 ecx
  00baa	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00baf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bb4	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7430 : 
; 7431 : 				print_mono_font_string ("FxXX");

  00bb9	68 00 00 00 00	 push	 OFFSET ??_C@_04FACIIFCM@FxXX@
  00bbe	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN61@draw_weapo:

; 7432 : 			}
; 7433 : 		}
; 7434 : 	}
; 7435 : 
; 7436 : 	////////////////////////////////////////
; 7437 : 	//
; 7438 : 	// cannon
; 7439 : 	//
; 7440 : 	////////////////////////////////////////
; 7441 : 
; 7442 : 	result = get_local_entity_weapon_hardpoint_info (en, COMANCHE_CANNON_TURRET, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  00bc3	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  00bc6	50		 push	 eax
  00bc7	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  00bca	51		 push	 ecx
  00bcb	8d 55 8c	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00bce	52		 push	 edx
  00bcf	6a 00		 push	 0
  00bd1	6a 04		 push	 4
  00bd3	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  00bd6	50		 push	 eax
  00bd7	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  00bdc	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 7443 : 
; 7444 : 	if (result)

  00bdf	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  00be3	0f 84 11 02 00
	00		 je	 $LN68@draw_weapo

; 7445 : 	{
; 7446 : 		//
; 7447 : 		// selected weapon
; 7448 : 		//
; 7449 : 
; 7450 : 		if (weapon_sub_type == selected_weapon)

  00be9	8b 45 8c	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00bec	3b 45 88	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00bef	75 16		 jne	 SHORT $LN63@draw_weapo

; 7451 : 		{
; 7452 : 			set_mono_font_colour (MFD_COLOUR_RED);

  00bf1	b8 04 00 00 00	 mov	 eax, 4
  00bf6	6b c8 0f	 imul	 ecx, eax, 15
  00bf9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00bff	52		 push	 edx
  00c00	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7453 : 		}
; 7454 : 		else

  00c05	eb 14		 jmp	 SHORT $LN64@draw_weapo
$LN63@draw_weapo:

; 7455 : 		{
; 7456 : 			set_mono_font_colour (MFD_COLOUR_WHITE);

  00c07	b8 04 00 00 00	 mov	 eax, 4
  00c0c	6b c8 13	 imul	 ecx, eax, 19
  00c0f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c15	52		 push	 edx
  00c16	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN64@draw_weapo:

; 7457 : 		}
; 7458 : 
; 7459 : 		//
; 7460 : 		// weapon name and number
; 7461 : 		//
; 7462 : 
; 7463 : 		sprintf (s, "%sx%03d", weapon_database[weapon_sub_type].mfd_name, number);

  00c1b	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  00c1e	50		 push	 eax
  00c1f	69 4d 8c e0 00
	00 00		 imul	 ecx, DWORD PTR _weapon_sub_type$[ebp], 224
  00c26	8b 91 08 00 00
	00		 mov	 edx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+8]
  00c2c	52		 push	 edx
  00c2d	68 00 00 00 00	 push	 OFFSET ??_C@_07MPAMKEAB@?$CFsx?$CF03d@
  00c32	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00c35	50		 push	 eax
  00c36	e8 00 00 00 00	 call	 _sprintf
  00c3b	83 c4 10	 add	 esp, 16			; 00000010H

; 7464 : 
; 7465 : 		set_2d_mono_font_position (0.0, -0.0);

  00c3e	51		 push	 ecx
  00c3f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@80000000
  00c47	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c4c	51		 push	 ecx
  00c4d	0f 57 c0	 xorps	 xmm0, xmm0
  00c50	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c55	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7466 : 
; 7467 : 		x_adjust = get_mono_font_string_width (s) * -0.5;

  00c5a	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00c5d	50		 push	 eax
  00c5e	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00c63	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv1690[ebp]
  00c69	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1690[ebp]
  00c71	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00c79	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c7d	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7468 : 
; 7469 : 		set_mono_font_rel_position (x_adjust, 0.0);

  00c82	51		 push	 ecx
  00c83	0f 57 c0	 xorps	 xmm0, xmm0
  00c86	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c8b	51		 push	 ecx
  00c8c	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00c91	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c96	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7470 : 
; 7471 : 		print_mono_font_string (s);

  00c9b	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00c9e	50		 push	 eax
  00c9f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7472 : 
; 7473 : 		//
; 7474 : 		// lines
; 7475 : 		//
; 7476 : 
; 7477 : 		if (draw_large_mfd)

  00ca4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00cab	0f 84 a7 00 00
	00		 je	 $LN65@draw_weapo

; 7478 : 		{
; 7479 : 			if (damaged)

  00cb1	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00cb5	0f 84 98 00 00
	00		 je	 $LN67@draw_weapo

; 7480 : 			{
; 7481 : 				draw_2d_half_thick_line (0.0 - 0.05, 0.07 - 0.03, 0.0 + 0.05, 0.07 + 0.03, MFD_COLOUR_WHITE);

  00cbb	b8 04 00 00 00	 mov	 eax, 4
  00cc0	6b c8 13	 imul	 ecx, eax, 19
  00cc3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00cc9	52		 push	 edx
  00cca	51		 push	 ecx
  00ccb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00cd3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cd8	51		 push	 ecx
  00cd9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  00ce1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ce6	51		 push	 ecx
  00ce7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  00cef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cf4	51		 push	 ecx
  00cf5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  00cfd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d02	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 7482 : 
; 7483 : 				draw_2d_half_thick_line (0.0 + 0.05, 0.07 - 0.03, 0.0 - 0.05, 0.07 + 0.03, MFD_COLOUR_WHITE);

  00d07	b8 04 00 00 00	 mov	 eax, 4
  00d0c	6b c8 13	 imul	 ecx, eax, 19
  00d0f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00d15	52		 push	 edx
  00d16	51		 push	 ecx
  00d17	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00d1f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d24	51		 push	 ecx
  00d25	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  00d2d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d32	51		 push	 ecx
  00d33	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  00d3b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d40	51		 push	 ecx
  00d41	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  00d49	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d4e	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN67@draw_weapo:

; 7484 : 			}
; 7485 : 		}
; 7486 : 		else

  00d53	e9 a2 00 00 00	 jmp	 $LN68@draw_weapo
$LN65@draw_weapo:

; 7487 : 		{
; 7488 : 			if (damaged)

  00d58	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00d5c	0f 84 98 00 00
	00		 je	 $LN68@draw_weapo

; 7489 : 			{
; 7490 : 				draw_2d_line (0.0 - 0.05, 0.07 - 0.03, 0.0 + 0.05, 0.07 + 0.03, MFD_COLOUR_WHITE);

  00d62	b8 04 00 00 00	 mov	 eax, 4
  00d67	6b c8 13	 imul	 ecx, eax, 19
  00d6a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00d70	52		 push	 edx
  00d71	51		 push	 ecx
  00d72	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00d7a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d7f	51		 push	 ecx
  00d80	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  00d88	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d8d	51		 push	 ecx
  00d8e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  00d96	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d9b	51		 push	 ecx
  00d9c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  00da4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00da9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7491 : 
; 7492 : 				draw_2d_line (0.0 + 0.05, 0.07 - 0.03, 0.0 - 0.05, 0.07 + 0.03, MFD_COLOUR_WHITE);

  00dae	b8 04 00 00 00	 mov	 eax, 4
  00db3	6b c8 13	 imul	 ecx, eax, 19
  00db6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00dbc	52		 push	 edx
  00dbd	51		 push	 ecx
  00dbe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00dc6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dcb	51		 push	 ecx
  00dcc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  00dd4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dd9	51		 push	 ecx
  00dda	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  00de2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00de7	51		 push	 ecx
  00de8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  00df0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00df5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN68@draw_weapo:

; 7493 : 			}
; 7494 : 		}
; 7495 : 	}
; 7496 : 
; 7497 : 	////////////////////////////////////////
; 7498 : 	//
; 7499 : 	// lh bay door inner pylon
; 7500 : 	//
; 7501 : 	////////////////////////////////////////
; 7502 : 
; 7503 : 	result = get_local_entity_weapon_hardpoint_info (en, COMANCHE_LHS_BAY_DOOR_INNER, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  00dfa	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  00dfd	50		 push	 eax
  00dfe	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  00e01	51		 push	 ecx
  00e02	8d 55 8c	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00e05	52		 push	 edx
  00e06	6a 00		 push	 0
  00e08	6a 05		 push	 5
  00e0a	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  00e0d	50		 push	 eax
  00e0e	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  00e13	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 7504 : 
; 7505 : 	if (result)

  00e16	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  00e1a	0f 84 10 03 00
	00		 je	 $LN75@draw_weapo

; 7506 : 	{
; 7507 : 		//
; 7508 : 		// selected weapon
; 7509 : 		//
; 7510 : 
; 7511 : 		if (weapon_sub_type == selected_weapon)

  00e20	8b 45 8c	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00e23	3b 45 88	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00e26	75 16		 jne	 SHORT $LN70@draw_weapo

; 7512 : 		{
; 7513 : 			set_mono_font_colour (MFD_COLOUR_RED);

  00e28	b8 04 00 00 00	 mov	 eax, 4
  00e2d	6b c8 0f	 imul	 ecx, eax, 15
  00e30	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e36	52		 push	 edx
  00e37	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7514 : 		}
; 7515 : 		else

  00e3c	eb 14		 jmp	 SHORT $LN71@draw_weapo
$LN70@draw_weapo:

; 7516 : 		{
; 7517 : 			set_mono_font_colour (MFD_COLOUR_WHITE);

  00e3e	b8 04 00 00 00	 mov	 eax, 4
  00e43	6b c8 13	 imul	 ecx, eax, 19
  00e46	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e4c	52		 push	 edx
  00e4d	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN71@draw_weapo:

; 7518 : 		}
; 7519 : 
; 7520 : 		//
; 7521 : 		// number
; 7522 : 		//
; 7523 : 
; 7524 : 		sprintf (s, "x%02d", number);

  00e52	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  00e55	50		 push	 eax
  00e56	68 00 00 00 00	 push	 OFFSET ??_C@_05HGDIBGHI@x?$CF02d@
  00e5b	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00e5e	51		 push	 ecx
  00e5f	e8 00 00 00 00	 call	 _sprintf
  00e64	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7525 : 
; 7526 : 		set_2d_mono_font_position (-0.24, -0.1);

  00e67	51		 push	 ecx
  00e68	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  00e70	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e75	51		 push	 ecx
  00e76	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be75c28f
  00e7e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e83	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7527 : 
; 7528 : 		set_mono_font_rel_position (0.0, get_mono_font_char_height ('X'));

  00e88	6a 58		 push	 88			; 00000058H
  00e8a	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  00e8f	51		 push	 ecx
  00e90	d9 1c 24	 fstp	 DWORD PTR [esp]
  00e93	51		 push	 ecx
  00e94	0f 57 c0	 xorps	 xmm0, xmm0
  00e97	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e9c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7529 : 
; 7530 : 		print_mono_font_string (s);

  00ea1	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00ea4	50		 push	 eax
  00ea5	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7531 : 
; 7532 : 		//
; 7533 : 		// lines
; 7534 : 		//
; 7535 : 
; 7536 : 		if (draw_large_mfd)

  00eaa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00eb1	0f 84 3f 01 00
	00		 je	 $LN72@draw_weapo

; 7537 : 		{
; 7538 : 			draw_2d_half_thick_line (-0.29, 0.19, -0.29, -0.16, MFD_COLOUR_WHITE);

  00eb7	b8 04 00 00 00	 mov	 eax, 4
  00ebc	6b c8 13	 imul	 ecx, eax, 19
  00ebf	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ec5	52		 push	 edx
  00ec6	51		 push	 ecx
  00ec7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  00ecf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ed4	51		 push	 ecx
  00ed5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be947ae1
  00edd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ee2	51		 push	 ecx
  00ee3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e428f5c
  00eeb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ef0	51		 push	 ecx
  00ef1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be947ae1
  00ef9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00efe	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 7539 : 
; 7540 : 			draw_2d_half_thick_line (-0.26, -0.16, -0.29, -0.16, MFD_COLOUR_WHITE);

  00f03	b8 04 00 00 00	 mov	 eax, 4
  00f08	6b c8 13	 imul	 ecx, eax, 19
  00f0b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f11	52		 push	 edx
  00f12	51		 push	 ecx
  00f13	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  00f1b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f20	51		 push	 ecx
  00f21	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be947ae1
  00f29	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f2e	51		 push	 ecx
  00f2f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  00f37	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f3c	51		 push	 ecx
  00f3d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be851eb8
  00f45	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f4a	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 7541 : 
; 7542 : 			if (damaged)

  00f4f	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00f53	0f 84 98 00 00
	00		 je	 $LN74@draw_weapo

; 7543 : 			{
; 7544 : 				draw_2d_half_thick_line (-0.29 - 0.03, 0.225 - 0.05, -0.29 + 0.03, 0.225 + 0.05, MFD_COLOUR_WHITE);

  00f59	b8 04 00 00 00	 mov	 eax, 4
  00f5e	6b c8 13	 imul	 ecx, eax, 19
  00f61	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f67	52		 push	 edx
  00f68	51		 push	 ecx
  00f69	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8ccccd
  00f71	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f76	51		 push	 ecx
  00f77	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be851eb8
  00f7f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f84	51		 push	 ecx
  00f85	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e333333
  00f8d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f92	51		 push	 ecx
  00f93	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bea3d70a
  00f9b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fa0	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 7545 : 
; 7546 : 				draw_2d_half_thick_line (-0.29 + 0.03, 0.225 - 0.05, -0.29 - 0.03, 0.225 + 0.05, MFD_COLOUR_WHITE);

  00fa5	b8 04 00 00 00	 mov	 eax, 4
  00faa	6b c8 13	 imul	 ecx, eax, 19
  00fad	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00fb3	52		 push	 edx
  00fb4	51		 push	 ecx
  00fb5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8ccccd
  00fbd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fc2	51		 push	 ecx
  00fc3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bea3d70a
  00fcb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fd0	51		 push	 ecx
  00fd1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e333333
  00fd9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fde	51		 push	 ecx
  00fdf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be851eb8
  00fe7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fec	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN74@draw_weapo:

; 7547 : 			}
; 7548 : 		}
; 7549 : 		else

  00ff1	e9 3a 01 00 00	 jmp	 $LN75@draw_weapo
$LN72@draw_weapo:

; 7550 : 		{
; 7551 : 			draw_2d_line (-0.29, 0.19, -0.29, -0.16, MFD_COLOUR_WHITE);

  00ff6	b8 04 00 00 00	 mov	 eax, 4
  00ffb	6b c8 13	 imul	 ecx, eax, 19
  00ffe	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01004	52		 push	 edx
  01005	51		 push	 ecx
  01006	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  0100e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01013	51		 push	 ecx
  01014	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be947ae1
  0101c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01021	51		 push	 ecx
  01022	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e428f5c
  0102a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0102f	51		 push	 ecx
  01030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be947ae1
  01038	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0103d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7552 : 
; 7553 : 			draw_2d_line (-0.26, -0.16, -0.29, -0.16, MFD_COLOUR_WHITE);

  01042	b8 04 00 00 00	 mov	 eax, 4
  01047	6b c8 13	 imul	 ecx, eax, 19
  0104a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01050	52		 push	 edx
  01051	51		 push	 ecx
  01052	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  0105a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0105f	51		 push	 ecx
  01060	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be947ae1
  01068	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0106d	51		 push	 ecx
  0106e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  01076	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0107b	51		 push	 ecx
  0107c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be851eb8
  01084	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01089	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7554 : 
; 7555 : 			if (damaged)

  0108e	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01092	0f 84 98 00 00
	00		 je	 $LN75@draw_weapo

; 7556 : 			{
; 7557 : 				draw_2d_line (-0.29 - 0.03, 0.225 - 0.05, -0.29 + 0.03, 0.225 + 0.05, MFD_COLOUR_WHITE);

  01098	b8 04 00 00 00	 mov	 eax, 4
  0109d	6b c8 13	 imul	 ecx, eax, 19
  010a0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  010a6	52		 push	 edx
  010a7	51		 push	 ecx
  010a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8ccccd
  010b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010b5	51		 push	 ecx
  010b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be851eb8
  010be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010c3	51		 push	 ecx
  010c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e333333
  010cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010d1	51		 push	 ecx
  010d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bea3d70a
  010da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010df	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7558 : 
; 7559 : 				draw_2d_line (-0.29 + 0.03, 0.225 - 0.05, -0.29 - 0.03, 0.225 + 0.05, MFD_COLOUR_WHITE);

  010e4	b8 04 00 00 00	 mov	 eax, 4
  010e9	6b c8 13	 imul	 ecx, eax, 19
  010ec	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  010f2	52		 push	 edx
  010f3	51		 push	 ecx
  010f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8ccccd
  010fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01101	51		 push	 ecx
  01102	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bea3d70a
  0110a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0110f	51		 push	 ecx
  01110	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e333333
  01118	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0111d	51		 push	 ecx
  0111e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be851eb8
  01126	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0112b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN75@draw_weapo:

; 7560 : 			}
; 7561 : 		}
; 7562 : 	}
; 7563 : 
; 7564 : 	////////////////////////////////////////
; 7565 : 	//
; 7566 : 	// rh bay door inner pylon
; 7567 : 	//
; 7568 : 	////////////////////////////////////////
; 7569 : 
; 7570 : 	result = get_local_entity_weapon_hardpoint_info (en, COMANCHE_RHS_BAY_DOOR_INNER, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  01130	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  01133	50		 push	 eax
  01134	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  01137	51		 push	 ecx
  01138	8d 55 8c	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  0113b	52		 push	 edx
  0113c	6a 00		 push	 0
  0113e	6a 08		 push	 8
  01140	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  01143	50		 push	 eax
  01144	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  01149	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 7571 : 
; 7572 : 	if (result)

  0114c	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  01150	0f 84 bf 03 00
	00		 je	 $LN82@draw_weapo

; 7573 : 	{
; 7574 : 		//
; 7575 : 		// selected weapon
; 7576 : 		//
; 7577 : 
; 7578 : 		if (weapon_sub_type == selected_weapon)

  01156	8b 45 8c	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01159	3b 45 88	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  0115c	75 16		 jne	 SHORT $LN77@draw_weapo

; 7579 : 		{
; 7580 : 			set_mono_font_colour (MFD_COLOUR_RED);

  0115e	b8 04 00 00 00	 mov	 eax, 4
  01163	6b c8 0f	 imul	 ecx, eax, 15
  01166	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0116c	52		 push	 edx
  0116d	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7581 : 		}
; 7582 : 		else

  01172	eb 14		 jmp	 SHORT $LN78@draw_weapo
$LN77@draw_weapo:

; 7583 : 		{
; 7584 : 			set_mono_font_colour (MFD_COLOUR_WHITE);

  01174	b8 04 00 00 00	 mov	 eax, 4
  01179	6b c8 13	 imul	 ecx, eax, 19
  0117c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01182	52		 push	 edx
  01183	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN78@draw_weapo:

; 7585 : 		}
; 7586 : 
; 7587 : 		//
; 7588 : 		// number
; 7589 : 		//
; 7590 : 
; 7591 : 		sprintf (s, "x%02d", number);

  01188	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  0118b	50		 push	 eax
  0118c	68 00 00 00 00	 push	 OFFSET ??_C@_05HGDIBGHI@x?$CF02d@
  01191	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  01194	51		 push	 ecx
  01195	e8 00 00 00 00	 call	 _sprintf
  0119a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7592 : 
; 7593 : 		set_2d_mono_font_position (0.24, -0.1);

  0119d	51		 push	 ecx
  0119e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  011a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011ab	51		 push	 ecx
  011ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e75c28f
  011b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011b9	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7594 : 
; 7595 : 		x_adjust = -get_mono_font_string_width (s) + 1.0;

  011be	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  011c1	50		 push	 eax
  011c2	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  011c7	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv1859[ebp]
  011cd	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1859[ebp]
  011d5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  011dc	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  011e0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  011e8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  011ec	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7596 : 
; 7597 : 		set_mono_font_rel_position (x_adjust, get_mono_font_char_height ('X'));

  011f1	6a 58		 push	 88			; 00000058H
  011f3	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  011f8	51		 push	 ecx
  011f9	d9 1c 24	 fstp	 DWORD PTR [esp]
  011fc	51		 push	 ecx
  011fd	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01202	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01207	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7598 : 
; 7599 : 		print_mono_font_string (s);

  0120c	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  0120f	50		 push	 eax
  01210	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7600 : 
; 7601 : 		//
; 7602 : 		// weapon name
; 7603 : 		//
; 7604 : 
; 7605 : 		set_2d_mono_font_position (0.0, -0.1);

  01215	51		 push	 ecx
  01216	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  0121e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01223	51		 push	 ecx
  01224	0f 57 c0	 xorps	 xmm0, xmm0
  01227	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0122c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7606 : 
; 7607 : 		x_adjust = get_mono_font_string_width (weapon_database[weapon_sub_type].mfd_name) * -0.5;

  01231	69 45 8c e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  01238	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  0123e	51		 push	 ecx
  0123f	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01244	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv1876[ebp]
  0124a	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1876[ebp]
  01252	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0125a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0125e	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7608 : 
; 7609 : 		set_mono_font_rel_position (x_adjust, 0.0);

  01263	51		 push	 ecx
  01264	0f 57 c0	 xorps	 xmm0, xmm0
  01267	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0126c	51		 push	 ecx
  0126d	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01272	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01277	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7610 : 
; 7611 : 		print_mono_font_string (weapon_database[weapon_sub_type].mfd_name);

  0127c	69 45 8c e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  01283	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  01289	51		 push	 ecx
  0128a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7612 : 
; 7613 : 		//
; 7614 : 		// lines
; 7615 : 		//
; 7616 : 
; 7617 : 		if (draw_large_mfd)

  0128f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01296	0f 84 3f 01 00
	00		 je	 $LN79@draw_weapo

; 7618 : 		{
; 7619 : 			draw_2d_half_thick_line (0.29, 0.19, 0.29, -0.16, MFD_COLOUR_WHITE);

  0129c	b8 04 00 00 00	 mov	 eax, 4
  012a1	6b c8 13	 imul	 ecx, eax, 19
  012a4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  012aa	52		 push	 edx
  012ab	51		 push	 ecx
  012ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  012b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012b9	51		 push	 ecx
  012ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e947ae1
  012c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012c7	51		 push	 ecx
  012c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e428f5c
  012d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012d5	51		 push	 ecx
  012d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e947ae1
  012de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012e3	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 7620 : 
; 7621 : 			draw_2d_half_thick_line (0.26, -0.16, 0.29, -0.16, MFD_COLOUR_WHITE);

  012e8	b8 04 00 00 00	 mov	 eax, 4
  012ed	6b c8 13	 imul	 ecx, eax, 19
  012f0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  012f6	52		 push	 edx
  012f7	51		 push	 ecx
  012f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  01300	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01305	51		 push	 ecx
  01306	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e947ae1
  0130e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01313	51		 push	 ecx
  01314	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  0131c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01321	51		 push	 ecx
  01322	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e851eb8
  0132a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0132f	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 7622 : 
; 7623 : 			if (damaged)

  01334	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01338	0f 84 98 00 00
	00		 je	 $LN81@draw_weapo

; 7624 : 			{
; 7625 : 				draw_2d_half_thick_line (0.29 - 0.03, 0.225 - 0.05, 0.29 + 0.03, 0.225 + 0.05, MFD_COLOUR_WHITE);

  0133e	b8 04 00 00 00	 mov	 eax, 4
  01343	6b c8 13	 imul	 ecx, eax, 19
  01346	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0134c	52		 push	 edx
  0134d	51		 push	 ecx
  0134e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8ccccd
  01356	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0135b	51		 push	 ecx
  0135c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ea3d70a
  01364	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01369	51		 push	 ecx
  0136a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e333333
  01372	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01377	51		 push	 ecx
  01378	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e851eb8
  01380	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01385	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 7626 : 
; 7627 : 				draw_2d_half_thick_line (0.29 + 0.03, 0.225 - 0.05, 0.29 - 0.03, 0.225 + 0.05, MFD_COLOUR_WHITE);

  0138a	b8 04 00 00 00	 mov	 eax, 4
  0138f	6b c8 13	 imul	 ecx, eax, 19
  01392	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01398	52		 push	 edx
  01399	51		 push	 ecx
  0139a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8ccccd
  013a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013a7	51		 push	 ecx
  013a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e851eb8
  013b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013b5	51		 push	 ecx
  013b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e333333
  013be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013c3	51		 push	 ecx
  013c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ea3d70a
  013cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013d1	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN81@draw_weapo:

; 7628 : 			}
; 7629 : 		}
; 7630 : 		else

  013d6	e9 3a 01 00 00	 jmp	 $LN82@draw_weapo
$LN79@draw_weapo:

; 7631 : 		{
; 7632 : 			draw_2d_line (0.29, 0.19, 0.29, -0.16, MFD_COLOUR_WHITE);

  013db	b8 04 00 00 00	 mov	 eax, 4
  013e0	6b c8 13	 imul	 ecx, eax, 19
  013e3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  013e9	52		 push	 edx
  013ea	51		 push	 ecx
  013eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  013f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013f8	51		 push	 ecx
  013f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e947ae1
  01401	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01406	51		 push	 ecx
  01407	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e428f5c
  0140f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01414	51		 push	 ecx
  01415	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e947ae1
  0141d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01422	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7633 : 
; 7634 : 			draw_2d_line (0.26, -0.16, 0.29, -0.16, MFD_COLOUR_WHITE);

  01427	b8 04 00 00 00	 mov	 eax, 4
  0142c	6b c8 13	 imul	 ecx, eax, 19
  0142f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01435	52		 push	 edx
  01436	51		 push	 ecx
  01437	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  0143f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01444	51		 push	 ecx
  01445	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e947ae1
  0144d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01452	51		 push	 ecx
  01453	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  0145b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01460	51		 push	 ecx
  01461	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e851eb8
  01469	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0146e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7635 : 
; 7636 : 			if (damaged)

  01473	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01477	0f 84 98 00 00
	00		 je	 $LN82@draw_weapo

; 7637 : 			{
; 7638 : 				draw_2d_line (0.29 - 0.03, 0.225 - 0.05, 0.29 + 0.03, 0.225 + 0.05, MFD_COLOUR_WHITE);

  0147d	b8 04 00 00 00	 mov	 eax, 4
  01482	6b c8 13	 imul	 ecx, eax, 19
  01485	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0148b	52		 push	 edx
  0148c	51		 push	 ecx
  0148d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8ccccd
  01495	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0149a	51		 push	 ecx
  0149b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ea3d70a
  014a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014a8	51		 push	 ecx
  014a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e333333
  014b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014b6	51		 push	 ecx
  014b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e851eb8
  014bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014c4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7639 : 
; 7640 : 				draw_2d_line (0.29 + 0.03, 0.225 - 0.05, 0.29 - 0.03, 0.225 + 0.05, MFD_COLOUR_WHITE);

  014c9	b8 04 00 00 00	 mov	 eax, 4
  014ce	6b c8 13	 imul	 ecx, eax, 19
  014d1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  014d7	52		 push	 edx
  014d8	51		 push	 ecx
  014d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8ccccd
  014e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014e6	51		 push	 ecx
  014e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e851eb8
  014ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014f4	51		 push	 ecx
  014f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e333333
  014fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01502	51		 push	 ecx
  01503	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ea3d70a
  0150b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01510	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN82@draw_weapo:

; 7641 : 			}
; 7642 : 		}
; 7643 : 	}
; 7644 : 
; 7645 : 	////////////////////////////////////////
; 7646 : 	//
; 7647 : 	// lh bay door middle pylon
; 7648 : 	//
; 7649 : 	////////////////////////////////////////
; 7650 : 
; 7651 : 	result = get_local_entity_weapon_hardpoint_info (en, COMANCHE_LHS_BAY_DOOR_MIDDLE, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  01515	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  01518	50		 push	 eax
  01519	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  0151c	51		 push	 ecx
  0151d	8d 55 8c	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  01520	52		 push	 edx
  01521	6a 00		 push	 0
  01523	6a 06		 push	 6
  01525	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  01528	50		 push	 eax
  01529	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  0152e	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 7652 : 
; 7653 : 	if (result)

  01531	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  01535	0f 84 10 03 00
	00		 je	 $LN89@draw_weapo

; 7654 : 	{
; 7655 : 		//
; 7656 : 		// selected weapon
; 7657 : 		//
; 7658 : 
; 7659 : 		if (weapon_sub_type == selected_weapon)

  0153b	8b 45 8c	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0153e	3b 45 88	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01541	75 16		 jne	 SHORT $LN84@draw_weapo

; 7660 : 		{
; 7661 : 			set_mono_font_colour (MFD_COLOUR_RED);

  01543	b8 04 00 00 00	 mov	 eax, 4
  01548	6b c8 0f	 imul	 ecx, eax, 15
  0154b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01551	52		 push	 edx
  01552	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7662 : 		}
; 7663 : 		else

  01557	eb 14		 jmp	 SHORT $LN85@draw_weapo
$LN84@draw_weapo:

; 7664 : 		{
; 7665 : 			set_mono_font_colour (MFD_COLOUR_WHITE);

  01559	b8 04 00 00 00	 mov	 eax, 4
  0155e	6b c8 13	 imul	 ecx, eax, 19
  01561	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01567	52		 push	 edx
  01568	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN85@draw_weapo:

; 7666 : 		}
; 7667 : 
; 7668 : 		//
; 7669 : 		// number
; 7670 : 		//
; 7671 : 
; 7672 : 		sprintf (s, "x%02d", number);

  0156d	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  01570	50		 push	 eax
  01571	68 00 00 00 00	 push	 OFFSET ??_C@_05HGDIBGHI@x?$CF02d@
  01576	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  01579	51		 push	 ecx
  0157a	e8 00 00 00 00	 call	 _sprintf
  0157f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7673 : 
; 7674 : 		set_2d_mono_font_position (-0.24, -0.3);

  01582	51		 push	 ecx
  01583	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  0158b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01590	51		 push	 ecx
  01591	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be75c28f
  01599	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0159e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7675 : 
; 7676 : 		set_mono_font_rel_position (0.0, get_mono_font_char_height ('X'));

  015a3	6a 58		 push	 88			; 00000058H
  015a5	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  015aa	51		 push	 ecx
  015ab	d9 1c 24	 fstp	 DWORD PTR [esp]
  015ae	51		 push	 ecx
  015af	0f 57 c0	 xorps	 xmm0, xmm0
  015b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015b7	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7677 : 
; 7678 : 		print_mono_font_string (s);

  015bc	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  015bf	50		 push	 eax
  015c0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7679 : 
; 7680 : 		//
; 7681 : 		// lines
; 7682 : 		//
; 7683 : 
; 7684 : 		if (draw_large_mfd)

  015c5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  015cc	0f 84 3f 01 00
	00		 je	 $LN86@draw_weapo

; 7685 : 		{
; 7686 : 			draw_2d_half_thick_line (-0.38, 0.17, -0.38, -0.36, MFD_COLOUR_WHITE);

  015d2	b8 04 00 00 00	 mov	 eax, 4
  015d7	6b c8 13	 imul	 ecx, eax, 19
  015da	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  015e0	52		 push	 edx
  015e1	51		 push	 ecx
  015e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb851ec
  015ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015ef	51		 push	 ecx
  015f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bec28f5c
  015f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015fd	51		 push	 ecx
  015fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e2e147b
  01606	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0160b	51		 push	 ecx
  0160c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bec28f5c
  01614	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01619	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 7687 : 
; 7688 : 			draw_2d_half_thick_line (-0.26, -0.36, -0.38, -0.36, MFD_COLOUR_WHITE);

  0161e	b8 04 00 00 00	 mov	 eax, 4
  01623	6b c8 13	 imul	 ecx, eax, 19
  01626	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0162c	52		 push	 edx
  0162d	51		 push	 ecx
  0162e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb851ec
  01636	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0163b	51		 push	 ecx
  0163c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bec28f5c
  01644	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01649	51		 push	 ecx
  0164a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb851ec
  01652	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01657	51		 push	 ecx
  01658	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be851eb8
  01660	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01665	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 7689 : 
; 7690 : 			if (damaged)

  0166a	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0166e	0f 84 98 00 00
	00		 je	 $LN88@draw_weapo

; 7691 : 			{
; 7692 : 				draw_2d_half_thick_line (-0.38 - 0.03, 0.2 - 0.05, -0.38 + 0.03, 0.2 + 0.05, MFD_COLOUR_WHITE);

  01674	b8 04 00 00 00	 mov	 eax, 4
  01679	6b c8 13	 imul	 ecx, eax, 19
  0167c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01682	52		 push	 edx
  01683	51		 push	 ecx
  01684	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  0168c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01691	51		 push	 ecx
  01692	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  0169a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0169f	51		 push	 ecx
  016a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  016a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016ad	51		 push	 ecx
  016ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bed1eb85
  016b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016bb	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 7693 : 
; 7694 : 				draw_2d_half_thick_line (-0.38 + 0.03, 0.2 - 0.05, -0.38 - 0.03, 0.2 + 0.05, MFD_COLOUR_WHITE);

  016c0	b8 04 00 00 00	 mov	 eax, 4
  016c5	6b c8 13	 imul	 ecx, eax, 19
  016c8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  016ce	52		 push	 edx
  016cf	51		 push	 ecx
  016d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  016d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016dd	51		 push	 ecx
  016de	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bed1eb85
  016e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016eb	51		 push	 ecx
  016ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  016f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016f9	51		 push	 ecx
  016fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  01702	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01707	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN88@draw_weapo:

; 7695 : 			}
; 7696 : 		}
; 7697 : 		else

  0170c	e9 3a 01 00 00	 jmp	 $LN89@draw_weapo
$LN86@draw_weapo:

; 7698 : 		{
; 7699 : 			draw_2d_line (-0.38, 0.17, -0.38, -0.36, MFD_COLOUR_WHITE);

  01711	b8 04 00 00 00	 mov	 eax, 4
  01716	6b c8 13	 imul	 ecx, eax, 19
  01719	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0171f	52		 push	 edx
  01720	51		 push	 ecx
  01721	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb851ec
  01729	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0172e	51		 push	 ecx
  0172f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bec28f5c
  01737	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0173c	51		 push	 ecx
  0173d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e2e147b
  01745	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0174a	51		 push	 ecx
  0174b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bec28f5c
  01753	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01758	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7700 : 
; 7701 : 			draw_2d_line (-0.26, -0.36, -0.38, -0.36, MFD_COLOUR_WHITE);

  0175d	b8 04 00 00 00	 mov	 eax, 4
  01762	6b c8 13	 imul	 ecx, eax, 19
  01765	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0176b	52		 push	 edx
  0176c	51		 push	 ecx
  0176d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb851ec
  01775	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0177a	51		 push	 ecx
  0177b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bec28f5c
  01783	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01788	51		 push	 ecx
  01789	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb851ec
  01791	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01796	51		 push	 ecx
  01797	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be851eb8
  0179f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017a4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7702 : 
; 7703 : 			if (damaged)

  017a9	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  017ad	0f 84 98 00 00
	00		 je	 $LN89@draw_weapo

; 7704 : 			{
; 7705 : 				draw_2d_line (-0.38 - 0.03, 0.2 - 0.05, -0.38 + 0.03, 0.2 + 0.05, MFD_COLOUR_WHITE);

  017b3	b8 04 00 00 00	 mov	 eax, 4
  017b8	6b c8 13	 imul	 ecx, eax, 19
  017bb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  017c1	52		 push	 edx
  017c2	51		 push	 ecx
  017c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  017cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017d0	51		 push	 ecx
  017d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  017d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017de	51		 push	 ecx
  017df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  017e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017ec	51		 push	 ecx
  017ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bed1eb85
  017f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017fa	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7706 : 
; 7707 : 				draw_2d_line (-0.38 + 0.03, 0.2 - 0.05, -0.38 - 0.03, 0.2 + 0.05, MFD_COLOUR_WHITE);

  017ff	b8 04 00 00 00	 mov	 eax, 4
  01804	6b c8 13	 imul	 ecx, eax, 19
  01807	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0180d	52		 push	 edx
  0180e	51		 push	 ecx
  0180f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  01817	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0181c	51		 push	 ecx
  0181d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bed1eb85
  01825	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0182a	51		 push	 ecx
  0182b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  01833	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01838	51		 push	 ecx
  01839	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  01841	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01846	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN89@draw_weapo:

; 7708 : 			}
; 7709 : 		}
; 7710 : 	}
; 7711 : 
; 7712 : 	////////////////////////////////////////
; 7713 : 	//
; 7714 : 	// rh bay door middle pylon
; 7715 : 	//
; 7716 : 	////////////////////////////////////////
; 7717 : 
; 7718 : 	result = get_local_entity_weapon_hardpoint_info (en, COMANCHE_RHS_BAY_DOOR_MIDDLE, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  0184b	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  0184e	50		 push	 eax
  0184f	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  01852	51		 push	 ecx
  01853	8d 55 8c	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  01856	52		 push	 edx
  01857	6a 00		 push	 0
  01859	6a 09		 push	 9
  0185b	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  0185e	50		 push	 eax
  0185f	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  01864	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 7719 : 
; 7720 : 	if (result)

  01867	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  0186b	0f 84 bf 03 00
	00		 je	 $LN96@draw_weapo

; 7721 : 	{
; 7722 : 		//
; 7723 : 		// selected weapon
; 7724 : 		//
; 7725 : 
; 7726 : 		if (weapon_sub_type == selected_weapon)

  01871	8b 45 8c	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01874	3b 45 88	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01877	75 16		 jne	 SHORT $LN91@draw_weapo

; 7727 : 		{
; 7728 : 			set_mono_font_colour (MFD_COLOUR_RED);

  01879	b8 04 00 00 00	 mov	 eax, 4
  0187e	6b c8 0f	 imul	 ecx, eax, 15
  01881	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01887	52		 push	 edx
  01888	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7729 : 		}
; 7730 : 		else

  0188d	eb 14		 jmp	 SHORT $LN92@draw_weapo
$LN91@draw_weapo:

; 7731 : 		{
; 7732 : 			set_mono_font_colour (MFD_COLOUR_WHITE);

  0188f	b8 04 00 00 00	 mov	 eax, 4
  01894	6b c8 13	 imul	 ecx, eax, 19
  01897	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0189d	52		 push	 edx
  0189e	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN92@draw_weapo:

; 7733 : 		}
; 7734 : 
; 7735 : 		//
; 7736 : 		// number
; 7737 : 		//
; 7738 : 
; 7739 : 		sprintf (s, "x%02d", number);

  018a3	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  018a6	50		 push	 eax
  018a7	68 00 00 00 00	 push	 OFFSET ??_C@_05HGDIBGHI@x?$CF02d@
  018ac	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  018af	51		 push	 ecx
  018b0	e8 00 00 00 00	 call	 _sprintf
  018b5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7740 : 
; 7741 : 		set_2d_mono_font_position (0.24, -0.3);

  018b8	51		 push	 ecx
  018b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  018c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018c6	51		 push	 ecx
  018c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e75c28f
  018cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018d4	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7742 : 
; 7743 : 		x_adjust = -get_mono_font_string_width (s) + 1.0;

  018d9	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  018dc	50		 push	 eax
  018dd	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  018e2	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv2085[ebp]
  018e8	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv2085[ebp]
  018f0	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  018f7	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  018fb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  01903	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01907	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7744 : 
; 7745 : 		set_mono_font_rel_position (x_adjust, get_mono_font_char_height ('X'));

  0190c	6a 58		 push	 88			; 00000058H
  0190e	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  01913	51		 push	 ecx
  01914	d9 1c 24	 fstp	 DWORD PTR [esp]
  01917	51		 push	 ecx
  01918	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0191d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01922	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7746 : 
; 7747 : 		print_mono_font_string (s);

  01927	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  0192a	50		 push	 eax
  0192b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7748 : 
; 7749 : 		//
; 7750 : 		// weapon name
; 7751 : 		//
; 7752 : 
; 7753 : 		set_2d_mono_font_position (0.0, -0.3);

  01930	51		 push	 ecx
  01931	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  01939	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0193e	51		 push	 ecx
  0193f	0f 57 c0	 xorps	 xmm0, xmm0
  01942	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01947	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7754 : 
; 7755 : 		x_adjust = get_mono_font_string_width (weapon_database[weapon_sub_type].mfd_name) * -0.5;

  0194c	69 45 8c e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  01953	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  01959	51		 push	 ecx
  0195a	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0195f	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv2102[ebp]
  01965	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv2102[ebp]
  0196d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01975	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01979	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7756 : 
; 7757 : 		set_mono_font_rel_position (x_adjust, 0.0);

  0197e	51		 push	 ecx
  0197f	0f 57 c0	 xorps	 xmm0, xmm0
  01982	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01987	51		 push	 ecx
  01988	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0198d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01992	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7758 : 
; 7759 : 		print_mono_font_string (weapon_database[weapon_sub_type].mfd_name);

  01997	69 45 8c e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  0199e	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  019a4	51		 push	 ecx
  019a5	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7760 : 
; 7761 : 		//
; 7762 : 		// lines
; 7763 : 		//
; 7764 : 
; 7765 : 		if (draw_large_mfd)

  019aa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  019b1	0f 84 3f 01 00
	00		 je	 $LN93@draw_weapo

; 7766 : 		{
; 7767 : 			draw_2d_half_thick_line (0.38, 0.17, 0.38, -0.36, MFD_COLOUR_WHITE);

  019b7	b8 04 00 00 00	 mov	 eax, 4
  019bc	6b c8 13	 imul	 ecx, eax, 19
  019bf	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  019c5	52		 push	 edx
  019c6	51		 push	 ecx
  019c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb851ec
  019cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019d4	51		 push	 ecx
  019d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec28f5c
  019dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019e2	51		 push	 ecx
  019e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e2e147b
  019eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019f0	51		 push	 ecx
  019f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec28f5c
  019f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019fe	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 7768 : 
; 7769 : 			draw_2d_half_thick_line (0.26, -0.36, 0.38, -0.36, MFD_COLOUR_WHITE);

  01a03	b8 04 00 00 00	 mov	 eax, 4
  01a08	6b c8 13	 imul	 ecx, eax, 19
  01a0b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a11	52		 push	 edx
  01a12	51		 push	 ecx
  01a13	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb851ec
  01a1b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a20	51		 push	 ecx
  01a21	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec28f5c
  01a29	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a2e	51		 push	 ecx
  01a2f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb851ec
  01a37	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a3c	51		 push	 ecx
  01a3d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e851eb8
  01a45	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a4a	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 7770 : 
; 7771 : 			if (damaged)

  01a4f	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01a53	0f 84 98 00 00
	00		 je	 $LN95@draw_weapo

; 7772 : 			{
; 7773 : 				draw_2d_half_thick_line (0.38 - 0.03, 0.2 - 0.05, 0.38 + 0.03, 0.2 + 0.05, MFD_COLOUR_WHITE);

  01a59	b8 04 00 00 00	 mov	 eax, 4
  01a5e	6b c8 13	 imul	 ecx, eax, 19
  01a61	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a67	52		 push	 edx
  01a68	51		 push	 ecx
  01a69	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  01a71	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a76	51		 push	 ecx
  01a77	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed1eb85
  01a7f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a84	51		 push	 ecx
  01a85	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  01a8d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a92	51		 push	 ecx
  01a93	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  01a9b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aa0	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 7774 : 
; 7775 : 				draw_2d_half_thick_line (0.38 + 0.03, 0.2 - 0.05, 0.38 - 0.03, 0.2 + 0.05, MFD_COLOUR_WHITE);

  01aa5	b8 04 00 00 00	 mov	 eax, 4
  01aaa	6b c8 13	 imul	 ecx, eax, 19
  01aad	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01ab3	52		 push	 edx
  01ab4	51		 push	 ecx
  01ab5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  01abd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ac2	51		 push	 ecx
  01ac3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  01acb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ad0	51		 push	 ecx
  01ad1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  01ad9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ade	51		 push	 ecx
  01adf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed1eb85
  01ae7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aec	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN95@draw_weapo:

; 7776 : 			}
; 7777 : 		}
; 7778 : 		else

  01af1	e9 3a 01 00 00	 jmp	 $LN96@draw_weapo
$LN93@draw_weapo:

; 7779 : 		{
; 7780 : 			draw_2d_line (0.38, 0.17, 0.38, -0.36, MFD_COLOUR_WHITE);

  01af6	b8 04 00 00 00	 mov	 eax, 4
  01afb	6b c8 13	 imul	 ecx, eax, 19
  01afe	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01b04	52		 push	 edx
  01b05	51		 push	 ecx
  01b06	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb851ec
  01b0e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b13	51		 push	 ecx
  01b14	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec28f5c
  01b1c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b21	51		 push	 ecx
  01b22	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e2e147b
  01b2a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b2f	51		 push	 ecx
  01b30	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec28f5c
  01b38	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b3d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7781 : 
; 7782 : 			draw_2d_line (0.26, -0.36, 0.38, -0.36, MFD_COLOUR_WHITE);

  01b42	b8 04 00 00 00	 mov	 eax, 4
  01b47	6b c8 13	 imul	 ecx, eax, 19
  01b4a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01b50	52		 push	 edx
  01b51	51		 push	 ecx
  01b52	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb851ec
  01b5a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b5f	51		 push	 ecx
  01b60	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec28f5c
  01b68	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b6d	51		 push	 ecx
  01b6e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb851ec
  01b76	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b7b	51		 push	 ecx
  01b7c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e851eb8
  01b84	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b89	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7783 : 
; 7784 : 			if (damaged)

  01b8e	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01b92	0f 84 98 00 00
	00		 je	 $LN96@draw_weapo

; 7785 : 			{
; 7786 : 				draw_2d_line (0.38 - 0.03, 0.2 - 0.05, 0.38 + 0.03, 0.2 + 0.05, MFD_COLOUR_WHITE);

  01b98	b8 04 00 00 00	 mov	 eax, 4
  01b9d	6b c8 13	 imul	 ecx, eax, 19
  01ba0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01ba6	52		 push	 edx
  01ba7	51		 push	 ecx
  01ba8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  01bb0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bb5	51		 push	 ecx
  01bb6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed1eb85
  01bbe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bc3	51		 push	 ecx
  01bc4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  01bcc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bd1	51		 push	 ecx
  01bd2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  01bda	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bdf	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7787 : 
; 7788 : 				draw_2d_line (0.38 + 0.03, 0.2 - 0.05, 0.38 - 0.03, 0.2 + 0.05, MFD_COLOUR_WHITE);

  01be4	b8 04 00 00 00	 mov	 eax, 4
  01be9	6b c8 13	 imul	 ecx, eax, 19
  01bec	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01bf2	52		 push	 edx
  01bf3	51		 push	 ecx
  01bf4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  01bfc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c01	51		 push	 ecx
  01c02	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  01c0a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c0f	51		 push	 ecx
  01c10	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  01c18	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c1d	51		 push	 ecx
  01c1e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed1eb85
  01c26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c2b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN96@draw_weapo:

; 7789 : 			}
; 7790 : 		}
; 7791 : 	}
; 7792 : 
; 7793 : 	////////////////////////////////////////
; 7794 : 	//
; 7795 : 	// lh bay door outer pylon
; 7796 : 	//
; 7797 : 	////////////////////////////////////////
; 7798 : 
; 7799 : 	result = get_local_entity_weapon_hardpoint_info (en, COMANCHE_LHS_BAY_DOOR_OUTER, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  01c30	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  01c33	50		 push	 eax
  01c34	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  01c37	51		 push	 ecx
  01c38	8d 55 8c	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  01c3b	52		 push	 edx
  01c3c	6a 00		 push	 0
  01c3e	6a 07		 push	 7
  01c40	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  01c43	50		 push	 eax
  01c44	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  01c49	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 7800 : 
; 7801 : 	if (result)

  01c4c	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  01c50	0f 84 10 03 00
	00		 je	 $LN103@draw_weapo

; 7802 : 	{
; 7803 : 		//
; 7804 : 		// selected weapon
; 7805 : 		//
; 7806 : 
; 7807 : 		if (weapon_sub_type == selected_weapon)

  01c56	8b 45 8c	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01c59	3b 45 88	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01c5c	75 16		 jne	 SHORT $LN98@draw_weapo

; 7808 : 		{
; 7809 : 			set_mono_font_colour (MFD_COLOUR_RED);

  01c5e	b8 04 00 00 00	 mov	 eax, 4
  01c63	6b c8 0f	 imul	 ecx, eax, 15
  01c66	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01c6c	52		 push	 edx
  01c6d	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7810 : 		}
; 7811 : 		else

  01c72	eb 14		 jmp	 SHORT $LN99@draw_weapo
$LN98@draw_weapo:

; 7812 : 		{
; 7813 : 			set_mono_font_colour (MFD_COLOUR_WHITE);

  01c74	b8 04 00 00 00	 mov	 eax, 4
  01c79	6b c8 13	 imul	 ecx, eax, 19
  01c7c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01c82	52		 push	 edx
  01c83	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN99@draw_weapo:

; 7814 : 		}
; 7815 : 
; 7816 : 		//
; 7817 : 		// number
; 7818 : 		//
; 7819 : 
; 7820 : 		sprintf (s, "x%02d", number);

  01c88	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  01c8b	50		 push	 eax
  01c8c	68 00 00 00 00	 push	 OFFSET ??_C@_05HGDIBGHI@x?$CF02d@
  01c91	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  01c94	51		 push	 ecx
  01c95	e8 00 00 00 00	 call	 _sprintf
  01c9a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7821 : 
; 7822 : 		set_2d_mono_font_position (-0.24, -0.5);

  01c9d	51		 push	 ecx
  01c9e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  01ca6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cab	51		 push	 ecx
  01cac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be75c28f
  01cb4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cb9	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7823 : 
; 7824 : 		set_mono_font_rel_position (0.0, get_mono_font_char_height ('X'));

  01cbe	6a 58		 push	 88			; 00000058H
  01cc0	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  01cc5	51		 push	 ecx
  01cc6	d9 1c 24	 fstp	 DWORD PTR [esp]
  01cc9	51		 push	 ecx
  01cca	0f 57 c0	 xorps	 xmm0, xmm0
  01ccd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cd2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7825 : 
; 7826 : 		print_mono_font_string (s);

  01cd7	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01cda	50		 push	 eax
  01cdb	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7827 : 
; 7828 : 		//
; 7829 : 		// lines
; 7830 : 		//
; 7831 : 
; 7832 : 		if (draw_large_mfd)

  01ce0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01ce7	0f 84 3f 01 00
	00		 je	 $LN100@draw_weapo

; 7833 : 		{
; 7834 : 			draw_2d_half_thick_line (-0.46, 0.14, -0.46, -0.56, MFD_COLOUR_WHITE);

  01ced	b8 04 00 00 00	 mov	 eax, 4
  01cf2	6b c8 13	 imul	 ecx, eax, 19
  01cf5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01cfb	52		 push	 edx
  01cfc	51		 push	 ecx
  01cfd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  01d05	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d0a	51		 push	 ecx
  01d0b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beeb851f
  01d13	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d18	51		 push	 ecx
  01d19	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  01d21	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d26	51		 push	 ecx
  01d27	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beeb851f
  01d2f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d34	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 7835 : 
; 7836 : 			draw_2d_half_thick_line (-0.26, -0.56, -0.46, -0.56, MFD_COLOUR_WHITE);

  01d39	b8 04 00 00 00	 mov	 eax, 4
  01d3e	6b c8 13	 imul	 ecx, eax, 19
  01d41	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01d47	52		 push	 edx
  01d48	51		 push	 ecx
  01d49	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  01d51	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d56	51		 push	 ecx
  01d57	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beeb851f
  01d5f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d64	51		 push	 ecx
  01d65	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  01d6d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d72	51		 push	 ecx
  01d73	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be851eb8
  01d7b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d80	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 7837 : 
; 7838 : 			if (damaged)

  01d85	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01d89	0f 84 98 00 00
	00		 je	 $LN102@draw_weapo

; 7839 : 			{
; 7840 : 				draw_2d_half_thick_line (-0.46 - 0.03, 0.17 - 0.05, -0.46 + 0.03, 0.17 + 0.05, MFD_COLOUR_WHITE);

  01d8f	b8 04 00 00 00	 mov	 eax, 4
  01d94	6b c8 13	 imul	 ecx, eax, 19
  01d97	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01d9d	52		 push	 edx
  01d9e	51		 push	 ecx
  01d9f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  01da7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dac	51		 push	 ecx
  01dad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bedc28f6
  01db5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dba	51		 push	 ecx
  01dbb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  01dc3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dc8	51		 push	 ecx
  01dc9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@befae148
  01dd1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dd6	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 7841 : 
; 7842 : 				draw_2d_half_thick_line (-0.46 + 0.03, 0.17 - 0.05, -0.46 - 0.03, 0.17 + 0.05, MFD_COLOUR_WHITE);

  01ddb	b8 04 00 00 00	 mov	 eax, 4
  01de0	6b c8 13	 imul	 ecx, eax, 19
  01de3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01de9	52		 push	 edx
  01dea	51		 push	 ecx
  01deb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  01df3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01df8	51		 push	 ecx
  01df9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@befae148
  01e01	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e06	51		 push	 ecx
  01e07	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  01e0f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e14	51		 push	 ecx
  01e15	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bedc28f6
  01e1d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e22	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN102@draw_weapo:

; 7843 : 			}
; 7844 : 		}
; 7845 : 		else

  01e27	e9 3a 01 00 00	 jmp	 $LN103@draw_weapo
$LN100@draw_weapo:

; 7846 : 		{
; 7847 : 			draw_2d_line (-0.46, 0.14, -0.46, -0.56, MFD_COLOUR_WHITE);

  01e2c	b8 04 00 00 00	 mov	 eax, 4
  01e31	6b c8 13	 imul	 ecx, eax, 19
  01e34	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01e3a	52		 push	 edx
  01e3b	51		 push	 ecx
  01e3c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  01e44	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e49	51		 push	 ecx
  01e4a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beeb851f
  01e52	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e57	51		 push	 ecx
  01e58	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  01e60	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e65	51		 push	 ecx
  01e66	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beeb851f
  01e6e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e73	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7848 : 
; 7849 : 			draw_2d_line (-0.26, -0.56, -0.46, -0.56, MFD_COLOUR_WHITE);

  01e78	b8 04 00 00 00	 mov	 eax, 4
  01e7d	6b c8 13	 imul	 ecx, eax, 19
  01e80	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01e86	52		 push	 edx
  01e87	51		 push	 ecx
  01e88	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  01e90	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e95	51		 push	 ecx
  01e96	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beeb851f
  01e9e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ea3	51		 push	 ecx
  01ea4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  01eac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01eb1	51		 push	 ecx
  01eb2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be851eb8
  01eba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ebf	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7850 : 
; 7851 : 			if (damaged)

  01ec4	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01ec8	0f 84 98 00 00
	00		 je	 $LN103@draw_weapo

; 7852 : 			{
; 7853 : 				draw_2d_line (-0.46 - 0.03, 0.17 - 0.05, -0.46 + 0.03, 0.17 + 0.05, MFD_COLOUR_WHITE);

  01ece	b8 04 00 00 00	 mov	 eax, 4
  01ed3	6b c8 13	 imul	 ecx, eax, 19
  01ed6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01edc	52		 push	 edx
  01edd	51		 push	 ecx
  01ede	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  01ee6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01eeb	51		 push	 ecx
  01eec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bedc28f6
  01ef4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ef9	51		 push	 ecx
  01efa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  01f02	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f07	51		 push	 ecx
  01f08	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@befae148
  01f10	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f15	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7854 : 
; 7855 : 				draw_2d_line (-0.46 + 0.03, 0.17 - 0.05, -0.46 - 0.03, 0.17 + 0.05, MFD_COLOUR_WHITE);

  01f1a	b8 04 00 00 00	 mov	 eax, 4
  01f1f	6b c8 13	 imul	 ecx, eax, 19
  01f22	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01f28	52		 push	 edx
  01f29	51		 push	 ecx
  01f2a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  01f32	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f37	51		 push	 ecx
  01f38	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@befae148
  01f40	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f45	51		 push	 ecx
  01f46	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  01f4e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f53	51		 push	 ecx
  01f54	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bedc28f6
  01f5c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f61	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN103@draw_weapo:

; 7856 : 			}
; 7857 : 		}
; 7858 : 	}
; 7859 : 
; 7860 : 	////////////////////////////////////////
; 7861 : 	//
; 7862 : 	// rh bay door outer pylon
; 7863 : 	//
; 7864 : 	////////////////////////////////////////
; 7865 : 
; 7866 : 	result = get_local_entity_weapon_hardpoint_info (en, COMANCHE_RHS_BAY_DOOR_OUTER, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  01f66	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  01f69	50		 push	 eax
  01f6a	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  01f6d	51		 push	 ecx
  01f6e	8d 55 8c	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  01f71	52		 push	 edx
  01f72	6a 00		 push	 0
  01f74	6a 0a		 push	 10			; 0000000aH
  01f76	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  01f79	50		 push	 eax
  01f7a	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  01f7f	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 7867 : 
; 7868 : 	if (result)

  01f82	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  01f86	0f 84 bf 03 00
	00		 je	 $LN110@draw_weapo

; 7869 : 	{
; 7870 : 		//
; 7871 : 		// selected weapon
; 7872 : 		//
; 7873 : 
; 7874 : 		if (weapon_sub_type == selected_weapon)

  01f8c	8b 45 8c	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01f8f	3b 45 88	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01f92	75 16		 jne	 SHORT $LN105@draw_weapo

; 7875 : 		{
; 7876 : 			set_mono_font_colour (MFD_COLOUR_RED);

  01f94	b8 04 00 00 00	 mov	 eax, 4
  01f99	6b c8 0f	 imul	 ecx, eax, 15
  01f9c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01fa2	52		 push	 edx
  01fa3	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7877 : 		}
; 7878 : 		else

  01fa8	eb 14		 jmp	 SHORT $LN106@draw_weapo
$LN105@draw_weapo:

; 7879 : 		{
; 7880 : 			set_mono_font_colour (MFD_COLOUR_WHITE);

  01faa	b8 04 00 00 00	 mov	 eax, 4
  01faf	6b c8 13	 imul	 ecx, eax, 19
  01fb2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01fb8	52		 push	 edx
  01fb9	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN106@draw_weapo:

; 7881 : 		}
; 7882 : 
; 7883 : 		//
; 7884 : 		// number
; 7885 : 		//
; 7886 : 
; 7887 : 		sprintf (s, "x%02d", number);

  01fbe	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  01fc1	50		 push	 eax
  01fc2	68 00 00 00 00	 push	 OFFSET ??_C@_05HGDIBGHI@x?$CF02d@
  01fc7	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  01fca	51		 push	 ecx
  01fcb	e8 00 00 00 00	 call	 _sprintf
  01fd0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7888 : 
; 7889 : 		set_2d_mono_font_position (0.24, -0.5);

  01fd3	51		 push	 ecx
  01fd4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  01fdc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fe1	51		 push	 ecx
  01fe2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e75c28f
  01fea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fef	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7890 : 
; 7891 : 		x_adjust = -get_mono_font_string_width (s) + 1.0;

  01ff4	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01ff7	50		 push	 eax
  01ff8	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01ffd	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv2311[ebp]
  02003	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv2311[ebp]
  0200b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  02012	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  02016	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0201e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02022	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7892 : 
; 7893 : 		set_mono_font_rel_position (x_adjust, get_mono_font_char_height ('X'));

  02027	6a 58		 push	 88			; 00000058H
  02029	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  0202e	51		 push	 ecx
  0202f	d9 1c 24	 fstp	 DWORD PTR [esp]
  02032	51		 push	 ecx
  02033	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  02038	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0203d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7894 : 
; 7895 : 		print_mono_font_string (s);

  02042	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  02045	50		 push	 eax
  02046	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7896 : 
; 7897 : 		//
; 7898 : 		// weapon name
; 7899 : 		//
; 7900 : 
; 7901 : 		set_2d_mono_font_position (0.0, -0.5);

  0204b	51		 push	 ecx
  0204c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  02054	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02059	51		 push	 ecx
  0205a	0f 57 c0	 xorps	 xmm0, xmm0
  0205d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02062	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7902 : 
; 7903 : 		x_adjust = get_mono_font_string_width (weapon_database[weapon_sub_type].mfd_name) * -0.5;

  02067	69 45 8c e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  0206e	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  02074	51		 push	 ecx
  02075	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0207a	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv2328[ebp]
  02080	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv2328[ebp]
  02088	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  02090	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02094	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7904 : 
; 7905 : 		set_mono_font_rel_position (x_adjust, 0.0);

  02099	51		 push	 ecx
  0209a	0f 57 c0	 xorps	 xmm0, xmm0
  0209d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020a2	51		 push	 ecx
  020a3	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  020a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020ad	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7906 : 
; 7907 : 		print_mono_font_string (weapon_database[weapon_sub_type].mfd_name);

  020b2	69 45 8c e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  020b9	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  020bf	51		 push	 ecx
  020c0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7908 : 
; 7909 : 		//
; 7910 : 		// lines
; 7911 : 		//
; 7912 : 
; 7913 : 		if (draw_large_mfd)

  020c5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  020cc	0f 84 3f 01 00
	00		 je	 $LN107@draw_weapo

; 7914 : 		{
; 7915 : 			draw_2d_half_thick_line (0.46, 0.14, 0.46, -0.56, MFD_COLOUR_WHITE);

  020d2	b8 04 00 00 00	 mov	 eax, 4
  020d7	6b c8 13	 imul	 ecx, eax, 19
  020da	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  020e0	52		 push	 edx
  020e1	51		 push	 ecx
  020e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  020ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020ef	51		 push	 ecx
  020f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eeb851f
  020f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020fd	51		 push	 ecx
  020fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  02106	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0210b	51		 push	 ecx
  0210c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eeb851f
  02114	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02119	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 7916 : 
; 7917 : 			draw_2d_half_thick_line (0.26, -0.56, 0.46, -0.56, MFD_COLOUR_WHITE);

  0211e	b8 04 00 00 00	 mov	 eax, 4
  02123	6b c8 13	 imul	 ecx, eax, 19
  02126	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0212c	52		 push	 edx
  0212d	51		 push	 ecx
  0212e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  02136	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0213b	51		 push	 ecx
  0213c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eeb851f
  02144	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02149	51		 push	 ecx
  0214a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  02152	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02157	51		 push	 ecx
  02158	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e851eb8
  02160	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02165	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 7918 : 
; 7919 : 			if (damaged)

  0216a	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0216e	0f 84 98 00 00
	00		 je	 $LN109@draw_weapo

; 7920 : 			{
; 7921 : 				draw_2d_half_thick_line (0.46 - 0.03, 0.17 - 0.05, 0.46 + 0.03, 0.17 + 0.05, MFD_COLOUR_WHITE);

  02174	b8 04 00 00 00	 mov	 eax, 4
  02179	6b c8 13	 imul	 ecx, eax, 19
  0217c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02182	52		 push	 edx
  02183	51		 push	 ecx
  02184	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  0218c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02191	51		 push	 ecx
  02192	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3efae148
  0219a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0219f	51		 push	 ecx
  021a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  021a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021ad	51		 push	 ecx
  021ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3edc28f6
  021b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021bb	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 7922 : 
; 7923 : 				draw_2d_half_thick_line (0.46 + 0.03, 0.17 - 0.05, 0.46 - 0.03, 0.17 + 0.05, MFD_COLOUR_WHITE);

  021c0	b8 04 00 00 00	 mov	 eax, 4
  021c5	6b c8 13	 imul	 ecx, eax, 19
  021c8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  021ce	52		 push	 edx
  021cf	51		 push	 ecx
  021d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  021d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021dd	51		 push	 ecx
  021de	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3edc28f6
  021e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021eb	51		 push	 ecx
  021ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  021f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021f9	51		 push	 ecx
  021fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3efae148
  02202	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02207	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN109@draw_weapo:

; 7924 : 			}
; 7925 : 		}
; 7926 : 		else

  0220c	e9 3a 01 00 00	 jmp	 $LN110@draw_weapo
$LN107@draw_weapo:

; 7927 : 		{
; 7928 : 			draw_2d_line (0.46, 0.14, 0.46, -0.56, MFD_COLOUR_WHITE);

  02211	b8 04 00 00 00	 mov	 eax, 4
  02216	6b c8 13	 imul	 ecx, eax, 19
  02219	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0221f	52		 push	 edx
  02220	51		 push	 ecx
  02221	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  02229	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0222e	51		 push	 ecx
  0222f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eeb851f
  02237	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0223c	51		 push	 ecx
  0223d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  02245	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0224a	51		 push	 ecx
  0224b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eeb851f
  02253	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02258	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7929 : 
; 7930 : 			draw_2d_line (0.26, -0.56, 0.46, -0.56, MFD_COLOUR_WHITE);

  0225d	b8 04 00 00 00	 mov	 eax, 4
  02262	6b c8 13	 imul	 ecx, eax, 19
  02265	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0226b	52		 push	 edx
  0226c	51		 push	 ecx
  0226d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  02275	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0227a	51		 push	 ecx
  0227b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eeb851f
  02283	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02288	51		 push	 ecx
  02289	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0f5c29
  02291	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02296	51		 push	 ecx
  02297	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e851eb8
  0229f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022a4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7931 : 
; 7932 : 			if (damaged)

  022a9	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  022ad	0f 84 98 00 00
	00		 je	 $LN110@draw_weapo

; 7933 : 			{
; 7934 : 				draw_2d_line (0.46 - 0.03, 0.17 - 0.05, 0.46 + 0.03, 0.17 + 0.05, MFD_COLOUR_WHITE);

  022b3	b8 04 00 00 00	 mov	 eax, 4
  022b8	6b c8 13	 imul	 ecx, eax, 19
  022bb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  022c1	52		 push	 edx
  022c2	51		 push	 ecx
  022c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  022cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022d0	51		 push	 ecx
  022d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3efae148
  022d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022de	51		 push	 ecx
  022df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  022e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022ec	51		 push	 ecx
  022ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3edc28f6
  022f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022fa	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7935 : 
; 7936 : 				draw_2d_line (0.46 + 0.03, 0.17 - 0.05, 0.46 - 0.03, 0.17 + 0.05, MFD_COLOUR_WHITE);

  022ff	b8 04 00 00 00	 mov	 eax, 4
  02304	6b c8 13	 imul	 ecx, eax, 19
  02307	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0230d	52		 push	 edx
  0230e	51		 push	 ecx
  0230f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  02317	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0231c	51		 push	 ecx
  0231d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3edc28f6
  02325	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0232a	51		 push	 ecx
  0232b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3df5c28f
  02333	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02338	51		 push	 ecx
  02339	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3efae148
  02341	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02346	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN110@draw_weapo:

; 7937 : 			}
; 7938 : 		}
; 7939 : 	}
; 7940 : 
; 7941 : 	////////////////////////////////////////
; 7942 : 	//
; 7943 : 	// lh stub wing pylon
; 7944 : 	//
; 7945 : 	////////////////////////////////////////
; 7946 : 
; 7947 : 	if (stub_wings_attached)

  0234b	83 7d 9c 00	 cmp	 DWORD PTR _stub_wings_attached$[ebp], 0
  0234f	0f 84 36 03 00
	00		 je	 $LN118@draw_weapo

; 7948 : 	{
; 7949 : 		result = get_local_entity_weapon_hardpoint_info (en, COMANCHE_LHS_STUB_WING, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  02355	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  02358	50		 push	 eax
  02359	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  0235c	51		 push	 ecx
  0235d	8d 55 8c	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  02360	52		 push	 edx
  02361	6a 00		 push	 0
  02363	6a 00		 push	 0
  02365	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  02368	50		 push	 eax
  02369	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  0236e	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 7950 : 
; 7951 : 		if (result)

  02371	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  02375	0f 84 10 03 00
	00		 je	 $LN118@draw_weapo

; 7952 : 		{
; 7953 : 			//
; 7954 : 			// selected weapon
; 7955 : 			//
; 7956 : 
; 7957 : 			if (weapon_sub_type == selected_weapon)

  0237b	8b 45 8c	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0237e	3b 45 88	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  02381	75 16		 jne	 SHORT $LN113@draw_weapo

; 7958 : 			{
; 7959 : 				set_mono_font_colour (MFD_COLOUR_RED);

  02383	b8 04 00 00 00	 mov	 eax, 4
  02388	6b c8 0f	 imul	 ecx, eax, 15
  0238b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02391	52		 push	 edx
  02392	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7960 : 			}
; 7961 : 			else

  02397	eb 14		 jmp	 SHORT $LN114@draw_weapo
$LN113@draw_weapo:

; 7962 : 			{
; 7963 : 				set_mono_font_colour (MFD_COLOUR_WHITE);

  02399	b8 04 00 00 00	 mov	 eax, 4
  0239e	6b c8 13	 imul	 ecx, eax, 19
  023a1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  023a7	52		 push	 edx
  023a8	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN114@draw_weapo:

; 7964 : 			}
; 7965 : 
; 7966 : 			//
; 7967 : 			// number
; 7968 : 			//
; 7969 : 
; 7970 : 			sprintf (s, "x%02d", number);

  023ad	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  023b0	50		 push	 eax
  023b1	68 00 00 00 00	 push	 OFFSET ??_C@_05HGDIBGHI@x?$CF02d@
  023b6	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  023b9	51		 push	 ecx
  023ba	e8 00 00 00 00	 call	 _sprintf
  023bf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7971 : 
; 7972 : 			set_2d_mono_font_position (-0.24, -0.7);

  023c2	51		 push	 ecx
  023c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  023cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023d0	51		 push	 ecx
  023d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be75c28f
  023d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023de	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7973 : 
; 7974 : 			set_mono_font_rel_position (0.0, get_mono_font_char_height ('X'));

  023e3	6a 58		 push	 88			; 00000058H
  023e5	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  023ea	51		 push	 ecx
  023eb	d9 1c 24	 fstp	 DWORD PTR [esp]
  023ee	51		 push	 ecx
  023ef	0f 57 c0	 xorps	 xmm0, xmm0
  023f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023f7	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7975 : 
; 7976 : 			print_mono_font_string (s);

  023fc	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  023ff	50		 push	 eax
  02400	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7977 : 
; 7978 : 			//
; 7979 : 			// lines
; 7980 : 			//
; 7981 : 
; 7982 : 			if (draw_large_mfd)

  02405	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0240c	0f 84 3f 01 00
	00		 je	 $LN115@draw_weapo

; 7983 : 			{
; 7984 : 				draw_2d_half_thick_line (-0.55, 0.29, -0.55, -0.76, MFD_COLOUR_WHITE);

  02412	b8 04 00 00 00	 mov	 eax, 4
  02417	6b c8 13	 imul	 ecx, eax, 19
  0241a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02420	52		 push	 edx
  02421	51		 push	 ecx
  02422	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf428f5c
  0242a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0242f	51		 push	 ecx
  02430	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  02438	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0243d	51		 push	 ecx
  0243e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e947ae1
  02446	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0244b	51		 push	 ecx
  0244c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  02454	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02459	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 7985 : 
; 7986 : 				draw_2d_half_thick_line (-0.26, -0.76, -0.55, -0.76, MFD_COLOUR_WHITE);

  0245e	b8 04 00 00 00	 mov	 eax, 4
  02463	6b c8 13	 imul	 ecx, eax, 19
  02466	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0246c	52		 push	 edx
  0246d	51		 push	 ecx
  0246e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf428f5c
  02476	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0247b	51		 push	 ecx
  0247c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  02484	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02489	51		 push	 ecx
  0248a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf428f5c
  02492	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02497	51		 push	 ecx
  02498	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be851eb8
  024a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024a5	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 7987 : 
; 7988 : 				if (damaged)

  024aa	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  024ae	0f 84 98 00 00
	00		 je	 $LN117@draw_weapo

; 7989 : 				{
; 7990 : 					draw_2d_half_thick_line (-0.55 - 0.03, 0.33 - 0.05, -0.55 + 0.03, 0.33 + 0.05, MFD_COLOUR_WHITE);

  024b4	b8 04 00 00 00	 mov	 eax, 4
  024b9	6b c8 13	 imul	 ecx, eax, 19
  024bc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  024c2	52		 push	 edx
  024c3	51		 push	 ecx
  024c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec28f5c
  024cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024d1	51		 push	 ecx
  024d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf051eb8
  024da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024df	51		 push	 ecx
  024e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8f5c29
  024e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024ed	51		 push	 ecx
  024ee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf147ae1
  024f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024fb	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 7991 : 
; 7992 : 					draw_2d_half_thick_line (-0.55 + 0.03, 0.33 - 0.05, -0.55 - 0.03, 0.33 + 0.05, MFD_COLOUR_WHITE);

  02500	b8 04 00 00 00	 mov	 eax, 4
  02505	6b c8 13	 imul	 ecx, eax, 19
  02508	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0250e	52		 push	 edx
  0250f	51		 push	 ecx
  02510	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec28f5c
  02518	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0251d	51		 push	 ecx
  0251e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf147ae1
  02526	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0252b	51		 push	 ecx
  0252c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8f5c29
  02534	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02539	51		 push	 ecx
  0253a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf051eb8
  02542	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02547	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN117@draw_weapo:

; 7993 : 				}
; 7994 : 			}
; 7995 : 			else

  0254c	e9 3a 01 00 00	 jmp	 $LN118@draw_weapo
$LN115@draw_weapo:

; 7996 : 			{
; 7997 : 				draw_2d_line (-0.55, 0.29, -0.55, -0.76, MFD_COLOUR_WHITE);

  02551	b8 04 00 00 00	 mov	 eax, 4
  02556	6b c8 13	 imul	 ecx, eax, 19
  02559	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0255f	52		 push	 edx
  02560	51		 push	 ecx
  02561	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf428f5c
  02569	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0256e	51		 push	 ecx
  0256f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  02577	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0257c	51		 push	 ecx
  0257d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e947ae1
  02585	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0258a	51		 push	 ecx
  0258b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  02593	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02598	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 7998 : 
; 7999 : 				draw_2d_line (-0.26, -0.76, -0.55, -0.76, MFD_COLOUR_WHITE);

  0259d	b8 04 00 00 00	 mov	 eax, 4
  025a2	6b c8 13	 imul	 ecx, eax, 19
  025a5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  025ab	52		 push	 edx
  025ac	51		 push	 ecx
  025ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf428f5c
  025b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025ba	51		 push	 ecx
  025bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  025c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025c8	51		 push	 ecx
  025c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf428f5c
  025d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025d6	51		 push	 ecx
  025d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be851eb8
  025df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025e4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 8000 : 
; 8001 : 				if (damaged)

  025e9	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  025ed	0f 84 98 00 00
	00		 je	 $LN118@draw_weapo

; 8002 : 				{
; 8003 : 					draw_2d_line (-0.55 - 0.03, 0.33 - 0.05, -0.55 + 0.03, 0.33 + 0.05, MFD_COLOUR_WHITE);

  025f3	b8 04 00 00 00	 mov	 eax, 4
  025f8	6b c8 13	 imul	 ecx, eax, 19
  025fb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02601	52		 push	 edx
  02602	51		 push	 ecx
  02603	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec28f5c
  0260b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02610	51		 push	 ecx
  02611	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf051eb8
  02619	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0261e	51		 push	 ecx
  0261f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8f5c29
  02627	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0262c	51		 push	 ecx
  0262d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf147ae1
  02635	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0263a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 8004 : 
; 8005 : 					draw_2d_line (-0.55 + 0.03, 0.33 - 0.05, -0.55 - 0.03, 0.33 + 0.05, MFD_COLOUR_WHITE);

  0263f	b8 04 00 00 00	 mov	 eax, 4
  02644	6b c8 13	 imul	 ecx, eax, 19
  02647	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0264d	52		 push	 edx
  0264e	51		 push	 ecx
  0264f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec28f5c
  02657	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0265c	51		 push	 ecx
  0265d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf147ae1
  02665	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0266a	51		 push	 ecx
  0266b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8f5c29
  02673	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02678	51		 push	 ecx
  02679	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf051eb8
  02681	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02686	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN118@draw_weapo:

; 8006 : 				}
; 8007 : 			}
; 8008 : 		}
; 8009 : 	}
; 8010 : 
; 8011 : 	////////////////////////////////////////
; 8012 : 	//
; 8013 : 	// rh stub wing pylon
; 8014 : 	//
; 8015 : 	////////////////////////////////////////
; 8016 : 
; 8017 : 	if (stub_wings_attached)

  0268b	83 7d 9c 00	 cmp	 DWORD PTR _stub_wings_attached$[ebp], 0
  0268f	0f 84 e5 03 00
	00		 je	 $LN126@draw_weapo

; 8018 : 	{
; 8019 : 		result = get_local_entity_weapon_hardpoint_info (en, COMANCHE_RHS_STUB_WING, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  02695	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  02698	50		 push	 eax
  02699	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  0269c	51		 push	 ecx
  0269d	8d 55 8c	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  026a0	52		 push	 edx
  026a1	6a 00		 push	 0
  026a3	6a 01		 push	 1
  026a5	8b 45 90	 mov	 eax, DWORD PTR _en$[ebp]
  026a8	50		 push	 eax
  026a9	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  026ae	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 8020 : 
; 8021 : 		if (result)

  026b1	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  026b5	0f 84 bf 03 00
	00		 je	 $LN126@draw_weapo

; 8022 : 		{
; 8023 : 			//
; 8024 : 			// selected weapon
; 8025 : 			//
; 8026 : 
; 8027 : 			if (weapon_sub_type == selected_weapon)

  026bb	8b 45 8c	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  026be	3b 45 88	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  026c1	75 16		 jne	 SHORT $LN121@draw_weapo

; 8028 : 			{
; 8029 : 				set_mono_font_colour (MFD_COLOUR_RED);

  026c3	b8 04 00 00 00	 mov	 eax, 4
  026c8	6b c8 0f	 imul	 ecx, eax, 15
  026cb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  026d1	52		 push	 edx
  026d2	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8030 : 			}
; 8031 : 			else

  026d7	eb 14		 jmp	 SHORT $LN122@draw_weapo
$LN121@draw_weapo:

; 8032 : 			{
; 8033 : 				set_mono_font_colour (MFD_COLOUR_WHITE);

  026d9	b8 04 00 00 00	 mov	 eax, 4
  026de	6b c8 13	 imul	 ecx, eax, 19
  026e1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  026e7	52		 push	 edx
  026e8	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN122@draw_weapo:

; 8034 : 			}
; 8035 : 
; 8036 : 			//
; 8037 : 			// number
; 8038 : 			//
; 8039 : 
; 8040 : 			sprintf (s, "x%02d", number);

  026ed	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  026f0	50		 push	 eax
  026f1	68 00 00 00 00	 push	 OFFSET ??_C@_05HGDIBGHI@x?$CF02d@
  026f6	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  026f9	51		 push	 ecx
  026fa	e8 00 00 00 00	 call	 _sprintf
  026ff	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8041 : 
; 8042 : 			set_2d_mono_font_position (0.24, -0.7);

  02702	51		 push	 ecx
  02703	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  0270b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02710	51		 push	 ecx
  02711	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e75c28f
  02719	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0271e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8043 : 
; 8044 : 			x_adjust = -get_mono_font_string_width (s) + 1.0;

  02723	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  02726	50		 push	 eax
  02727	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0272c	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv2537[ebp]
  02732	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv2537[ebp]
  0273a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  02741	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  02745	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0274d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02751	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 8045 : 
; 8046 : 			set_mono_font_rel_position (x_adjust, get_mono_font_char_height ('X'));

  02756	6a 58		 push	 88			; 00000058H
  02758	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  0275d	51		 push	 ecx
  0275e	d9 1c 24	 fstp	 DWORD PTR [esp]
  02761	51		 push	 ecx
  02762	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  02767	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0276c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8047 : 
; 8048 : 			print_mono_font_string (s);

  02771	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  02774	50		 push	 eax
  02775	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8049 : 
; 8050 : 			//
; 8051 : 			// weapon name
; 8052 : 			//
; 8053 : 
; 8054 : 			set_2d_mono_font_position (0.0, -0.7);

  0277a	51		 push	 ecx
  0277b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  02783	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02788	51		 push	 ecx
  02789	0f 57 c0	 xorps	 xmm0, xmm0
  0278c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02791	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8055 : 
; 8056 : 			x_adjust = get_mono_font_string_width (weapon_database[weapon_sub_type].mfd_name) * -0.5;

  02796	69 45 8c e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  0279d	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  027a3	51		 push	 ecx
  027a4	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  027a9	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv2554[ebp]
  027af	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv2554[ebp]
  027b7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  027bf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  027c3	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 8057 : 
; 8058 : 			set_mono_font_rel_position (x_adjust, 0.0);

  027c8	51		 push	 ecx
  027c9	0f 57 c0	 xorps	 xmm0, xmm0
  027cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027d1	51		 push	 ecx
  027d2	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  027d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027dc	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8059 : 
; 8060 : 			print_mono_font_string (weapon_database[weapon_sub_type].mfd_name);

  027e1	69 45 8c e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  027e8	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  027ee	51		 push	 ecx
  027ef	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8061 : 
; 8062 : 			//
; 8063 : 			// lines
; 8064 : 			//
; 8065 : 
; 8066 : 			if (draw_large_mfd)

  027f4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  027fb	0f 84 3f 01 00
	00		 je	 $LN123@draw_weapo

; 8067 : 			{
; 8068 : 				draw_2d_half_thick_line (0.55, 0.29, 0.55, -0.76, MFD_COLOUR_WHITE);

  02801	b8 04 00 00 00	 mov	 eax, 4
  02806	6b c8 13	 imul	 ecx, eax, 19
  02809	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0280f	52		 push	 edx
  02810	51		 push	 ecx
  02811	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf428f5c
  02819	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0281e	51		 push	 ecx
  0281f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  02827	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0282c	51		 push	 ecx
  0282d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e947ae1
  02835	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0283a	51		 push	 ecx
  0283b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  02843	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02848	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 8069 : 
; 8070 : 				draw_2d_half_thick_line (0.26, -0.76, 0.55, -0.76, MFD_COLOUR_WHITE);

  0284d	b8 04 00 00 00	 mov	 eax, 4
  02852	6b c8 13	 imul	 ecx, eax, 19
  02855	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0285b	52		 push	 edx
  0285c	51		 push	 ecx
  0285d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf428f5c
  02865	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0286a	51		 push	 ecx
  0286b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  02873	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02878	51		 push	 ecx
  02879	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf428f5c
  02881	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02886	51		 push	 ecx
  02887	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e851eb8
  0288f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02894	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 8071 : 
; 8072 : 				if (damaged)

  02899	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0289d	0f 84 98 00 00
	00		 je	 $LN125@draw_weapo

; 8073 : 				{
; 8074 : 					draw_2d_half_thick_line (0.55 - 0.03, 0.33 - 0.05, 0.55 + 0.03, 0.33 + 0.05, MFD_COLOUR_WHITE);

  028a3	b8 04 00 00 00	 mov	 eax, 4
  028a8	6b c8 13	 imul	 ecx, eax, 19
  028ab	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  028b1	52		 push	 edx
  028b2	51		 push	 ecx
  028b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec28f5c
  028bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  028c0	51		 push	 ecx
  028c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f147ae1
  028c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  028ce	51		 push	 ecx
  028cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8f5c29
  028d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  028dc	51		 push	 ecx
  028dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f051eb8
  028e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  028ea	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 8075 : 
; 8076 : 					draw_2d_half_thick_line (0.55 + 0.03, 0.33 - 0.05, 0.55 - 0.03, 0.33 + 0.05, MFD_COLOUR_WHITE);

  028ef	b8 04 00 00 00	 mov	 eax, 4
  028f4	6b c8 13	 imul	 ecx, eax, 19
  028f7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  028fd	52		 push	 edx
  028fe	51		 push	 ecx
  028ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec28f5c
  02907	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0290c	51		 push	 ecx
  0290d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f051eb8
  02915	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0291a	51		 push	 ecx
  0291b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8f5c29
  02923	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02928	51		 push	 ecx
  02929	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f147ae1
  02931	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02936	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN125@draw_weapo:

; 8077 : 				}
; 8078 : 			}
; 8079 : 			else

  0293b	e9 3a 01 00 00	 jmp	 $LN126@draw_weapo
$LN123@draw_weapo:

; 8080 : 			{
; 8081 : 				draw_2d_line (0.55, 0.29, 0.55, -0.76, MFD_COLOUR_WHITE);

  02940	b8 04 00 00 00	 mov	 eax, 4
  02945	6b c8 13	 imul	 ecx, eax, 19
  02948	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0294e	52		 push	 edx
  0294f	51		 push	 ecx
  02950	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf428f5c
  02958	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0295d	51		 push	 ecx
  0295e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  02966	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0296b	51		 push	 ecx
  0296c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e947ae1
  02974	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02979	51		 push	 ecx
  0297a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  02982	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02987	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 8082 : 
; 8083 : 				draw_2d_line (0.26, -0.76, 0.55, -0.76, MFD_COLOUR_WHITE);

  0298c	b8 04 00 00 00	 mov	 eax, 4
  02991	6b c8 13	 imul	 ecx, eax, 19
  02994	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0299a	52		 push	 edx
  0299b	51		 push	 ecx
  0299c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf428f5c
  029a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029a9	51		 push	 ecx
  029aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  029b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029b7	51		 push	 ecx
  029b8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf428f5c
  029c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029c5	51		 push	 ecx
  029c6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e851eb8
  029ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029d3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 8084 : 
; 8085 : 				if (damaged)

  029d8	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  029dc	0f 84 98 00 00
	00		 je	 $LN126@draw_weapo

; 8086 : 				{
; 8087 : 					draw_2d_line (0.55 - 0.03, 0.33 - 0.05, 0.55 + 0.03, 0.33 + 0.05, MFD_COLOUR_WHITE);

  029e2	b8 04 00 00 00	 mov	 eax, 4
  029e7	6b c8 13	 imul	 ecx, eax, 19
  029ea	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  029f0	52		 push	 edx
  029f1	51		 push	 ecx
  029f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec28f5c
  029fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029ff	51		 push	 ecx
  02a00	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f147ae1
  02a08	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a0d	51		 push	 ecx
  02a0e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8f5c29
  02a16	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a1b	51		 push	 ecx
  02a1c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f051eb8
  02a24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a29	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 8088 : 
; 8089 : 					draw_2d_line (0.55 + 0.03, 0.33 - 0.05, 0.55 - 0.03, 0.33 + 0.05, MFD_COLOUR_WHITE);

  02a2e	b8 04 00 00 00	 mov	 eax, 4
  02a33	6b c8 13	 imul	 ecx, eax, 19
  02a36	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02a3c	52		 push	 edx
  02a3d	51		 push	 ecx
  02a3e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec28f5c
  02a46	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a4b	51		 push	 ecx
  02a4c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f051eb8
  02a54	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a59	51		 push	 ecx
  02a5a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8f5c29
  02a62	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a67	51		 push	 ecx
  02a68	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f147ae1
  02a70	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a75	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN126@draw_weapo:

; 8090 : 				}
; 8091 : 			}
; 8092 : 		}
; 8093 : 	}
; 8094 : 
; 8095 : 	////////////////////////////////////////
; 8096 : 	//
; 8097 : 	// rocket salvo
; 8098 : 	//
; 8099 : 	////////////////////////////////////////
; 8100 : 
; 8101 : 	if ((selected_weapon == ENTITY_SUB_TYPE_WEAPON_HYDRA70_M255) || (selected_weapon == ENTITY_SUB_TYPE_WEAPON_HYDRA70_M261))

  02a7a	83 7d 88 1e	 cmp	 DWORD PTR _selected_weapon$[ebp], 30 ; 0000001eH
  02a7e	74 06		 je	 SHORT $LN129@draw_weapo
  02a80	83 7d 88 1f	 cmp	 DWORD PTR _selected_weapon$[ebp], 31 ; 0000001fH
  02a84	75 16		 jne	 SHORT $LN127@draw_weapo
$LN129@draw_weapo:

; 8102 : 	{
; 8103 : 		set_mono_font_colour (MFD_COLOUR_RED);

  02a86	b8 04 00 00 00	 mov	 eax, 4
  02a8b	6b c8 0f	 imul	 ecx, eax, 15
  02a8e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02a94	52		 push	 edx
  02a95	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8104 : 	}
; 8105 : 	else

  02a9a	eb 14		 jmp	 SHORT $LN128@draw_weapo
$LN127@draw_weapo:

; 8106 : 	{
; 8107 : 		set_mono_font_colour (MFD_COLOUR_WHITE);

  02a9c	b8 04 00 00 00	 mov	 eax, 4
  02aa1	6b c8 13	 imul	 ecx, eax, 19
  02aa4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02aaa	52		 push	 edx
  02aab	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN128@draw_weapo:

; 8108 : 	}
; 8109 : 
; 8110 : 	set_2d_mono_font_position (0.0, -0.9);

  02ab0	51		 push	 ecx
  02ab1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  02ab9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02abe	51		 push	 ecx
  02abf	0f 57 c0	 xorps	 xmm0, xmm0
  02ac2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ac7	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8111 : 
; 8112 : 	if (rocket_salvo_size == ROCKET_SALVO_SIZE_ALL)

  02acc	81 3d 00 00 00
	00 e8 03 00 00	 cmp	 DWORD PTR ?rocket_salvo_size@@3HA, 1000 ; rocket_salvo_size, 000003e8H
  02ad6	75 13		 jne	 SHORT $LN130@draw_weapo

; 8113 : 	{
; 8114 : 		sprintf (s, "ROCKET SALVOxALL");

  02ad8	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FAFOJLKK@ROCKET?5SALVOxALL@
  02add	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  02ae0	50		 push	 eax
  02ae1	e8 00 00 00 00	 call	 _sprintf
  02ae6	83 c4 08	 add	 esp, 8

; 8115 : 	}
; 8116 : 	else

  02ae9	eb 17		 jmp	 SHORT $LN131@draw_weapo
$LN130@draw_weapo:

; 8117 : 	{
; 8118 : 		sprintf (s, "ROCKET SALVOx%02d", rocket_salvo_size);

  02aeb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rocket_salvo_size@@3HA ; rocket_salvo_size
  02af0	50		 push	 eax
  02af1	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CEPGDBDN@ROCKET?5SALVOx?$CF02d@
  02af6	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  02af9	51		 push	 ecx
  02afa	e8 00 00 00 00	 call	 _sprintf
  02aff	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN131@draw_weapo:

; 8119 : 	}
; 8120 : 
; 8121 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  02b02	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  02b05	50		 push	 eax
  02b06	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02b0b	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv2656[ebp]
  02b11	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv2656[ebp]
  02b19	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  02b21	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02b25	f3 0f 11 45 98	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 8122 : 
; 8123 : 	set_mono_font_rel_position (x_adjust, 0.0);

  02b2a	51		 push	 ecx
  02b2b	0f 57 c0	 xorps	 xmm0, xmm0
  02b2e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b33	51		 push	 ecx
  02b34	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  02b39	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b3e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8124 : 
; 8125 : 	print_mono_font_string (s);

  02b43	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  02b46	50		 push	 eax
  02b47	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8126 : }

  02b4c	5f		 pop	 edi
  02b4d	5e		 pop	 esi
  02b4e	5b		 pop	 ebx
  02b4f	8b e5		 mov	 esp, ebp
  02b51	5d		 pop	 ebp
  02b52	c3		 ret	 0
?draw_weapon_display_mfd@@YGXXZ ENDP			; draw_weapon_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv1370 = -364						; size = 4
tv1060 = -360						; size = 4
tv1038 = -360						; size = 4
tv1010 = -360						; size = 4
tv988 = -360						; size = 4
tv822 = -360						; size = 4
tv769 = -360						; size = 4
tv746 = -360						; size = 4
tv725 = -360						; size = 4
tv705 = -360						; size = 4
tv670 = -360						; size = 4
tv649 = -360						; size = 4
tv628 = -360						; size = 4
tv609 = -360						; size = 4
tv590 = -360						; size = 4
tv569 = -360						; size = 4
tv548 = -360						; size = 4
tv527 = -360						; size = 4
tv508 = -360						; size = 4
tv489 = -360						; size = 4
tv470 = -360						; size = 4
tv450 = -360						; size = 4
tv422 = -360						; size = 4
tv401 = -360						; size = 4
tv382 = -360						; size = 4
tv363 = -360						; size = 4
tv343 = -360						; size = 4
tv316 = -360						; size = 4
tv288 = -360						; size = 4
tv266 = -360						; size = 4
tv245 = -360						; size = 4
tv226 = -360						; size = 4
tv207 = -360						; size = 4
tv178 = -360						; size = 4
tv158 = -360						; size = 4
tv138 = -360						; size = 4
tv86 = -360						; size = 4
tv1053 = -356						; size = 4
tv1031 = -356						; size = 4
tv1003 = -356						; size = 4
tv981 = -356						; size = 4
tv814 = -356						; size = 4
tv761 = -356						; size = 4
tv738 = -356						; size = 4
tv717 = -356						; size = 4
tv697 = -356						; size = 4
tv662 = -356						; size = 4
tv641 = -356						; size = 4
tv621 = -356						; size = 4
tv602 = -356						; size = 4
tv582 = -356						; size = 4
tv562 = -356						; size = 4
tv540 = -356						; size = 4
tv520 = -356						; size = 4
tv501 = -356						; size = 4
tv482 = -356						; size = 4
tv462 = -356						; size = 4
tv442 = -356						; size = 4
tv414 = -356						; size = 4
tv394 = -356						; size = 4
tv375 = -356						; size = 4
tv355 = -356						; size = 4
tv335 = -356						; size = 4
tv308 = -356						; size = 4
tv280 = -356						; size = 4
tv258 = -356						; size = 4
tv238 = -356						; size = 4
tv219 = -356						; size = 4
tv199 = -356						; size = 4
tv170 = -356						; size = 4
tv150 = -356						; size = 4
tv130 = -356						; size = 4
tv78 = -356						; size = 4
tv70 = -356						; size = 4
_time_to_impact$1 = -288				; size = 4
_closest_missile$2 = -284				; size = 4
_dy$3 = -280						; size = 4
_dx$4 = -276						; size = 4
_air_scan_range$5 = -272				; size = 4
_draw_threat_line$6 = -268				; size = 4
_threat_type$7 = -264					; size = 4
_threat_position$8 = -260				; size = 4
_launched_weapon$9 = -256				; size = 4
_threat$10 = -252					; size = 4
_source_position$ = -248				; size = 4
_source_target$ = -244					; size = 4
_source$ = -240						; size = 4
_ase_threat_line_flash_timer$ = -236			; size = 4
_tsd_ase_range$ = -232					; size = 4
_source_heading$ = -228					; size = 4
_y_adjust$ = -224					; size = 4
_width$ = -220						; size = 4
_scale$ = -216						; size = 4
_ase_draw_threat_line_status$ = -212			; size = 4
_source_side$ = -208					; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z PROC ; draw_aircraft_survivability_equipment_display_mfd, COMDAT

; 6318 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 6c 01 00
	00		 sub	 esp, 364		; 0000016cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 6319 : 	char
; 6320 : 		*s,
; 6321 : 		buffer[200];
; 6322 : 
; 6323 : 	entity_sides
; 6324 : 		source_side;
; 6325 : 
; 6326 : 	int
; 6327 : 		*ase_draw_threat_line_status;
; 6328 : 
; 6329 : 	float
; 6330 : 		scale,
; 6331 : 		width,
; 6332 : 		y_adjust,
; 6333 : 		source_heading,
; 6334 : 		tsd_ase_range,
; 6335 : 		*ase_threat_line_flash_timer;
; 6336 : 
; 6337 : 	entity
; 6338 : 		*source,
; 6339 : 		*source_target;
; 6340 : 
; 6341 : 	vec3d
; 6342 : 		*source_position;
; 6343 : 
; 6344 : 	ASSERT (comanche_main_mfd_location_valid (mfd_location));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  00010	7c 06		 jl	 SHORT $LN15@draw_aircr
  00012	83 7d 08 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00016	7c 18		 jl	 SHORT $LN14@draw_aircr
$LN15@draw_aircr:
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0001d	83 c0 1a	 add	 eax, 26			; 0000001aH
  00020	50		 push	 eax
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@GBKBAHOG@comanche_main_mfd_location_vali@
  0002b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN14@draw_aircr:

; 6345 : 
; 6346 : 	switch (mfd_location)

  00030	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00033	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv70[ebp], eax
  00039	83 bd 9c fe ff
	ff 03		 cmp	 DWORD PTR tv70[ebp], 3
  00040	77 57		 ja	 SHORT $LN2@draw_aircr
  00042	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv70[ebp]
  00048	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN243@draw_aircr[ecx*4]
$LN16@draw_aircr:

; 6347 : 	{
; 6348 : 		////////////////////////////////////////
; 6349 : 		case COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS:
; 6350 : 		case COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS:
; 6351 : 		////////////////////////////////////////
; 6352 : 		{
; 6353 : 			tsd_ase_range						= pilot_tsd_ase_range;

  0004f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  00057	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _tsd_ase_range$[ebp], xmm0

; 6354 : 			ase_threat_line_flash_timer	= &pilot_ase_threat_line_flash_timer;

  0005f	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ase_threat_line_flash_timer$[ebp], OFFSET ?pilot_ase_threat_line_flash_timer@@3MA

; 6355 : 			ase_draw_threat_line_status	= &pilot_ase_draw_threat_line_status;

  00069	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ase_draw_threat_line_status$[ebp], OFFSET ?pilot_ase_draw_threat_line_status@@3HA

; 6356 : 
; 6357 : 			break;

  00073	eb 24		 jmp	 SHORT $LN2@draw_aircr
$LN17@draw_aircr:

; 6358 : 		}
; 6359 : 		////////////////////////////////////////
; 6360 : 		case COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_LHS:
; 6361 : 		case COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_RHS:
; 6362 : 		////////////////////////////////////////
; 6363 : 		{
; 6364 : 			tsd_ase_range						= co_pilot_tsd_ase_range;

  00075	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  0007d	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _tsd_ase_range$[ebp], xmm0

; 6365 : 			ase_threat_line_flash_timer	= &co_pilot_ase_threat_line_flash_timer;

  00085	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ase_threat_line_flash_timer$[ebp], OFFSET ?co_pilot_ase_threat_line_flash_timer@@3MA

; 6366 : 			ase_draw_threat_line_status	= &co_pilot_ase_draw_threat_line_status;

  0008f	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ase_draw_threat_line_status$[ebp], OFFSET ?co_pilot_ase_draw_threat_line_status@@3HA
$LN2@draw_aircr:

; 6367 : 
; 6368 : 			break;
; 6369 : 		}
; 6370 : 	}
; 6371 : 
; 6372 : 	source = get_gunship_entity ();

  00099	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0009e	89 85 10 ff ff
	ff		 mov	 DWORD PTR _source$[ebp], eax

; 6373 : 
; 6374 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  000a4	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  000ab	74 10		 je	 SHORT $LN99@draw_aircr
  000ad	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  000b3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b5	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv78[ebp], ecx
  000bb	eb 24		 jmp	 SHORT $LN100@draw_aircr
$LN99@draw_aircr:
  000bd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  000c3	83 c2 38	 add	 edx, 56			; 00000038H
  000c6	52		 push	 edx
  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000d7	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN100@draw_aircr:
  000e1	b9 01 00 00 00	 mov	 ecx, 1
  000e6	85 c9		 test	 ecx, ecx
  000e8	74 0c		 je	 SHORT $LN101@draw_aircr
  000ea	c7 85 98 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv86[ebp], 187 ; 000000bbH
  000f4	eb 24		 jmp	 SHORT $LN102@draw_aircr
$LN101@draw_aircr:
  000f6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  000fc	83 c2 38	 add	 edx, 56			; 00000038H
  000ff	52		 push	 edx
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00110	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv86[ebp], 0
$LN102@draw_aircr:
  0011a	68 bb 00 00 00	 push	 187			; 000000bbH
  0011f	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00125	51		 push	 ecx
  00126	69 95 9c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv78[ebp], 1116
  00130	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv86[ebp]
  00136	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  0013d	ff d1		 call	 ecx
  0013f	89 85 30 ff ff
	ff		 mov	 DWORD PTR _source_side$[ebp], eax

; 6375 : 
; 6376 : 	source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  00145	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0014c	74 10		 je	 SHORT $LN103@draw_aircr
  0014e	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00154	8b 08		 mov	 ecx, DWORD PTR [eax]
  00156	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv130[ebp], ecx
  0015c	eb 24		 jmp	 SHORT $LN104@draw_aircr
$LN103@draw_aircr:
  0015e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  00164	83 c2 3a	 add	 edx, 58			; 0000003aH
  00167	52		 push	 edx
  00168	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0016d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00172	50		 push	 eax
  00173	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00178	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv130[ebp], 0
$LN104@draw_aircr:
  00182	b9 01 00 00 00	 mov	 ecx, 1
  00187	85 c9		 test	 ecx, ecx
  00189	74 0c		 je	 SHORT $LN105@draw_aircr
  0018b	c7 85 98 fe ff
	ff 34 00 00 00	 mov	 DWORD PTR tv138[ebp], 52 ; 00000034H
  00195	eb 24		 jmp	 SHORT $LN106@draw_aircr
$LN105@draw_aircr:
  00197	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0019d	83 c2 3a	 add	 edx, 58			; 0000003aH
  001a0	52		 push	 edx
  001a1	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  001a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  001ab	50		 push	 eax
  001ac	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001b1	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv138[ebp], 0
$LN106@draw_aircr:
  001bb	6a 34		 push	 52			; 00000034H
  001bd	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  001c3	51		 push	 ecx
  001c4	69 95 9c fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv130[ebp], 700
  001ce	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv138[ebp]
  001d4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  001db	ff d1		 call	 ecx
  001dd	d9 9d 1c ff ff
	ff		 fstp	 DWORD PTR _source_heading$[ebp]

; 6377 : 
; 6378 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  001e3	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  001ea	74 10		 je	 SHORT $LN107@draw_aircr
  001ec	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  001f2	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f4	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv150[ebp], ecx
  001fa	eb 24		 jmp	 SHORT $LN108@draw_aircr
$LN107@draw_aircr:
  001fc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  00202	83 c2 3c	 add	 edx, 60			; 0000003cH
  00205	52		 push	 edx
  00206	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0020b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00210	50		 push	 eax
  00211	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00216	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
$LN108@draw_aircr:
  00220	b9 01 00 00 00	 mov	 ecx, 1
  00225	85 c9		 test	 ecx, ecx
  00227	74 0c		 je	 SHORT $LN109@draw_aircr
  00229	c7 85 98 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv158[ebp], 8
  00233	eb 24		 jmp	 SHORT $LN110@draw_aircr
$LN109@draw_aircr:
  00235	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0023b	83 c2 3c	 add	 edx, 60			; 0000003cH
  0023e	52		 push	 edx
  0023f	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00244	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00249	50		 push	 eax
  0024a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0024f	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv158[ebp], 0
$LN110@draw_aircr:
  00259	6a 08		 push	 8
  0025b	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00261	51		 push	 ecx
  00262	6b 95 9c fe ff
	ff 60		 imul	 edx, DWORD PTR tv150[ebp], 96
  00269	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv158[ebp]
  0026f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00276	ff d1		 call	 ecx
  00278	89 85 08 ff ff
	ff		 mov	 DWORD PTR _source_position$[ebp], eax

; 6379 : 
; 6380 : 	source_target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  0027e	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00285	74 10		 je	 SHORT $LN111@draw_aircr
  00287	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0028d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0028f	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv170[ebp], ecx
  00295	eb 24		 jmp	 SHORT $LN112@draw_aircr
$LN111@draw_aircr:
  00297	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0029d	83 c2 3e	 add	 edx, 62			; 0000003eH
  002a0	52		 push	 edx
  002a1	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  002a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002ab	50		 push	 eax
  002ac	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002b1	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv170[ebp], 0
$LN112@draw_aircr:
  002bb	b9 01 00 00 00	 mov	 ecx, 1
  002c0	85 c9		 test	 ecx, ecx
  002c2	74 0c		 je	 SHORT $LN113@draw_aircr
  002c4	c7 85 98 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv178[ebp], 38 ; 00000026H
  002ce	eb 24		 jmp	 SHORT $LN114@draw_aircr
$LN113@draw_aircr:
  002d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  002d6	83 c2 3e	 add	 edx, 62			; 0000003eH
  002d9	52		 push	 edx
  002da	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  002df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  002e4	50		 push	 eax
  002e5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002ea	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv178[ebp], 0
$LN114@draw_aircr:
  002f4	6a 26		 push	 38			; 00000026H
  002f6	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  002fc	51		 push	 ecx
  002fd	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv170[ebp], 180
  00307	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv178[ebp]
  0030d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00314	ff d1		 call	 ecx
  00316	89 85 0c ff ff
	ff		 mov	 DWORD PTR _source_target$[ebp], eax

; 6381 : 
; 6382 : 	scale = RADIUS / tsd_ase_range;

  0031c	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _tsd_ase_range$[ebp]
  00324	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0032c	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00330	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00334	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _scale$[ebp], xmm0

; 6383 : 
; 6384 : 	////////////////////////////////////////
; 6385 : 	//
; 6386 : 	// threats
; 6387 : 	//
; 6388 : 	////////////////////////////////////////
; 6389 : 
; 6390 : 	{
; 6391 : 		entity
; 6392 : 			*threat,
; 6393 : 			*launched_weapon;
; 6394 : 
; 6395 : 		vec3d
; 6396 : 			*threat_position;
; 6397 : 
; 6398 : 		threat_types
; 6399 : 			threat_type;
; 6400 : 
; 6401 : 		int
; 6402 : 			draw_threat_line;
; 6403 : 
; 6404 : 		float
; 6405 : 			air_scan_range,
; 6406 : 			dx,
; 6407 : 			dy;
; 6408 : 
; 6409 : 		*ase_threat_line_flash_timer -= get_delta_time ();

  0033c	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _ase_threat_line_flash_timer$[ebp]
  00342	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00346	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0034e	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _ase_threat_line_flash_timer$[ebp]
  00354	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 6410 : 
; 6411 : 		if (*ase_threat_line_flash_timer < 0.0)

  00358	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _ase_threat_line_flash_timer$[ebp]
  0035e	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00362	0f 57 c9	 xorps	 xmm1, xmm1
  00365	66 0f 2f c8	 comisd	 xmm1, xmm0
  00369	76 25		 jbe	 SHORT $LN18@draw_aircr

; 6412 : 		{
; 6413 : 			*ase_threat_line_flash_timer = ASE_THREAT_LINE_FLASH_RATE;

  0036b	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _ase_threat_line_flash_timer$[ebp]
  00371	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00379	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 6414 : 
; 6415 : 			*ase_draw_threat_line_status ^= 1;

  0037d	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _ase_draw_threat_line_status$[ebp]
  00383	8b 08		 mov	 ecx, DWORD PTR [eax]
  00385	83 f1 01	 xor	 ecx, 1
  00388	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR _ase_draw_threat_line_status$[ebp]
  0038e	89 0a		 mov	 DWORD PTR [edx], ecx
$LN18@draw_aircr:

; 6416 : 		}
; 6417 : 
; 6418 : 		set_2d_window_rotation (mfd_env, source_heading);

  00390	51		 push	 ecx
  00391	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  00399	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  003a3	50		 push	 eax
  003a4	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 6419 : 
; 6420 : 		//
; 6421 : 		// display enemy SAM and AAA threat range circles
; 6422 : 		//
; 6423 : 		// (use the gunship target list so that threats which are not targetting the player are still visible)
; 6424 : 		//
; 6425 : 
; 6426 : 		threat = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  003a9	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  003b0	74 10		 je	 SHORT $LN115@draw_aircr
  003b2	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  003b8	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ba	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv199[ebp], ecx
  003c0	eb 24		 jmp	 SHORT $LN116@draw_aircr
$LN115@draw_aircr:
  003c2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  003c8	83 c2 6c	 add	 edx, 108		; 0000006cH
  003cb	52		 push	 edx
  003cc	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  003d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003d6	50		 push	 eax
  003d7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003dc	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv199[ebp], 0
$LN116@draw_aircr:
  003e6	b9 01 00 00 00	 mov	 ecx, 1
  003eb	85 c9		 test	 ecx, ecx
  003ed	74 0c		 je	 SHORT $LN117@draw_aircr
  003ef	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv207[ebp], 18 ; 00000012H
  003f9	eb 24		 jmp	 SHORT $LN118@draw_aircr
$LN117@draw_aircr:
  003fb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  00401	83 c2 6c	 add	 edx, 108		; 0000006cH
  00404	52		 push	 edx
  00405	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0040a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0040f	50		 push	 eax
  00410	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00415	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv207[ebp], 0
$LN118@draw_aircr:
  0041f	6a 12		 push	 18			; 00000012H
  00421	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00427	51		 push	 ecx
  00428	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv199[ebp], 180
  00432	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv207[ebp]
  00438	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0043f	ff d1		 call	 ecx
  00441	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN4@draw_aircr:

; 6427 : 
; 6428 : 		while (threat)

  00447	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0044e	0f 84 70 04 00
	00		 je	 $LN5@draw_aircr

; 6429 : 		{
; 6430 : 			if (!get_local_entity_int_value (threat, INT_TYPE_GROUND_RADAR_CLUTTER))

  00454	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0045b	74 10		 je	 SHORT $LN119@draw_aircr
  0045d	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00463	8b 08		 mov	 ecx, DWORD PTR [eax]
  00465	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv219[ebp], ecx
  0046b	eb 20		 jmp	 SHORT $LN120@draw_aircr
$LN119@draw_aircr:
  0046d	68 1e 19 00 00	 push	 6430			; 0000191eH
  00472	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00477	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0047d	52		 push	 edx
  0047e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00483	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv219[ebp], 0
$LN120@draw_aircr:
  0048d	b8 01 00 00 00	 mov	 eax, 1
  00492	85 c0		 test	 eax, eax
  00494	74 0c		 je	 SHORT $LN121@draw_aircr
  00496	c7 85 98 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv226[ebp], 66 ; 00000042H
  004a0	eb 20		 jmp	 SHORT $LN122@draw_aircr
$LN121@draw_aircr:
  004a2	68 1e 19 00 00	 push	 6430			; 0000191eH
  004a7	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  004ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  004b2	51		 push	 ecx
  004b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004b8	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv226[ebp], 0
$LN122@draw_aircr:
  004c2	6a 42		 push	 66			; 00000042H
  004c4	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  004ca	52		 push	 edx
  004cb	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv219[ebp], 1116
  004d5	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv226[ebp]
  004db	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  004e2	ff d2		 call	 edx
  004e4	85 c0		 test	 eax, eax
  004e6	0f 85 2f 03 00
	00		 jne	 $LN21@draw_aircr

; 6431 : 			{
; 6432 : 				if (source_side != get_local_entity_int_value (threat, INT_TYPE_SIDE))

  004ec	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  004f3	74 10		 je	 SHORT $LN123@draw_aircr
  004f5	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  004fb	8b 08		 mov	 ecx, DWORD PTR [eax]
  004fd	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv238[ebp], ecx
  00503	eb 20		 jmp	 SHORT $LN124@draw_aircr
$LN123@draw_aircr:
  00505	68 20 19 00 00	 push	 6432			; 00001920H
  0050a	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0050f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00515	52		 push	 edx
  00516	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0051b	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv238[ebp], 0
$LN124@draw_aircr:
  00525	b8 01 00 00 00	 mov	 eax, 1
  0052a	85 c0		 test	 eax, eax
  0052c	74 0c		 je	 SHORT $LN125@draw_aircr
  0052e	c7 85 98 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv245[ebp], 187 ; 000000bbH
  00538	eb 20		 jmp	 SHORT $LN126@draw_aircr
$LN125@draw_aircr:
  0053a	68 20 19 00 00	 push	 6432			; 00001920H
  0053f	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00544	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0054a	51		 push	 ecx
  0054b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00550	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv245[ebp], 0
$LN126@draw_aircr:
  0055a	68 bb 00 00 00	 push	 187			; 000000bbH
  0055f	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00565	52		 push	 edx
  00566	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv238[ebp], 1116
  00570	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv245[ebp]
  00576	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0057d	ff d2		 call	 edx
  0057f	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  00585	0f 84 90 02 00
	00		 je	 $LN21@draw_aircr

; 6433 : 				{
; 6434 : 					threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  0058b	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00592	74 10		 je	 SHORT $LN127@draw_aircr
  00594	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  0059a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0059c	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv258[ebp], ecx
  005a2	eb 24		 jmp	 SHORT $LN128@draw_aircr
$LN127@draw_aircr:
  005a4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  005aa	83 c2 74	 add	 edx, 116		; 00000074H
  005ad	52		 push	 edx
  005ae	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  005b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  005b8	50		 push	 eax
  005b9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005be	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv258[ebp], 0
$LN128@draw_aircr:
  005c8	b9 01 00 00 00	 mov	 ecx, 1
  005cd	85 c9		 test	 ecx, ecx
  005cf	74 0c		 je	 SHORT $LN129@draw_aircr
  005d1	c7 85 98 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv266[ebp], 233 ; 000000e9H
  005db	eb 24		 jmp	 SHORT $LN130@draw_aircr
$LN129@draw_aircr:
  005dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  005e3	83 c2 74	 add	 edx, 116		; 00000074H
  005e6	52		 push	 edx
  005e7	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  005ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  005f1	50		 push	 eax
  005f2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005f7	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv266[ebp], 0
$LN130@draw_aircr:
  00601	68 e9 00 00 00	 push	 233			; 000000e9H
  00606	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  0060c	51		 push	 ecx
  0060d	69 95 9c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv258[ebp], 1116
  00617	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv266[ebp]
  0061d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00624	ff d1		 call	 ecx
  00626	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 6435 : 
; 6436 : 					if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA))

  0062c	83 bd f8 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  00633	74 0d		 je	 SHORT $LN22@draw_aircr
  00635	83 bd f8 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$7[ebp], 6
  0063c	0f 85 d9 01 00
	00		 jne	 $LN21@draw_aircr
$LN22@draw_aircr:

; 6437 : 					{
; 6438 : 						threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  00642	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00649	74 10		 je	 SHORT $LN131@draw_aircr
  0064b	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00651	8b 08		 mov	 ecx, DWORD PTR [eax]
  00653	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv280[ebp], ecx
  00659	eb 24		 jmp	 SHORT $LN132@draw_aircr
$LN131@draw_aircr:
  0065b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  00661	83 c2 78	 add	 edx, 120		; 00000078H
  00664	52		 push	 edx
  00665	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0066a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0066f	50		 push	 eax
  00670	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00675	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv280[ebp], 0
$LN132@draw_aircr:
  0067f	b9 01 00 00 00	 mov	 ecx, 1
  00684	85 c9		 test	 ecx, ecx
  00686	74 0c		 je	 SHORT $LN133@draw_aircr
  00688	c7 85 98 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv288[ebp], 8
  00692	eb 24		 jmp	 SHORT $LN134@draw_aircr
$LN133@draw_aircr:
  00694	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0069a	83 c2 78	 add	 edx, 120		; 00000078H
  0069d	52		 push	 edx
  0069e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  006a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  006a8	50		 push	 eax
  006a9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006ae	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv288[ebp], 0
$LN134@draw_aircr:
  006b8	6a 08		 push	 8
  006ba	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  006c0	51		 push	 ecx
  006c1	6b 95 9c fe ff
	ff 60		 imul	 edx, DWORD PTR tv280[ebp], 96
  006c8	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv288[ebp]
  006ce	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  006d5	ff d1		 call	 ecx
  006d7	89 85 fc fe ff
	ff		 mov	 DWORD PTR _threat_position$8[ebp], eax

; 6439 : 
; 6440 : 						dx = (threat_position->x - source_position->x) * scale;

  006dd	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  006e3	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  006e9	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  006ed	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  006f1	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  006f9	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 6441 : 						dy = (threat_position->z - source_position->z) * scale;

  00701	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  00707	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  0070d	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00712	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00717	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0071f	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _dy$3[ebp], xmm0

; 6442 : 
; 6443 : 						air_scan_range = get_local_entity_float_value (threat, FLOAT_TYPE_AIR_SCAN_RANGE) * scale;

  00727	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0072e	74 10		 je	 SHORT $LN135@draw_aircr
  00730	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00736	8b 08		 mov	 ecx, DWORD PTR [eax]
  00738	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv308[ebp], ecx
  0073e	eb 24		 jmp	 SHORT $LN136@draw_aircr
$LN135@draw_aircr:
  00740	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  00746	83 c2 7d	 add	 edx, 125		; 0000007dH
  00749	52		 push	 edx
  0074a	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0074f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00754	50		 push	 eax
  00755	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0075a	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv308[ebp], 0
$LN136@draw_aircr:
  00764	b9 01 00 00 00	 mov	 ecx, 1
  00769	85 c9		 test	 ecx, ecx
  0076b	74 0c		 je	 SHORT $LN137@draw_aircr
  0076d	c7 85 98 fe ff
	ff 05 00 00 00	 mov	 DWORD PTR tv316[ebp], 5
  00777	eb 24		 jmp	 SHORT $LN138@draw_aircr
$LN137@draw_aircr:
  00779	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0077f	83 c2 7d	 add	 edx, 125		; 0000007dH
  00782	52		 push	 edx
  00783	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00788	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0078d	50		 push	 eax
  0078e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00793	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv316[ebp], 0
$LN138@draw_aircr:
  0079d	6a 05		 push	 5
  0079f	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  007a5	51		 push	 ecx
  007a6	69 95 9c fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv308[ebp], 700
  007b0	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv316[ebp]
  007b6	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  007bd	ff d1		 call	 ecx
  007bf	d9 9d 94 fe ff
	ff		 fstp	 DWORD PTR tv1370[ebp]
  007c5	f3 0f 10 85 94
	fe ff ff	 movss	 xmm0, DWORD PTR tv1370[ebp]
  007cd	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  007d5	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _air_scan_range$5[ebp], xmm0

; 6444 : 
; 6445 : 						draw_2d_circle (dx, dy, air_scan_range, MFD_COLOUR2);

  007dd	b8 04 00 00 00	 mov	 eax, 4
  007e2	c1 e0 00	 shl	 eax, 0
  007e5	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  007eb	51		 push	 ecx
  007ec	51		 push	 ecx
  007ed	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _air_scan_range$5[ebp]
  007f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007fa	51		 push	 ecx
  007fb	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  00803	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00808	51		 push	 ecx
  00809	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  00811	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00816	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle
$LN21@draw_aircr:

; 6446 : 					}
; 6447 : 				}
; 6448 : 			}
; 6449 : 
; 6450 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_GUNSHIP_TARGET);

  0081b	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00822	74 10		 je	 SHORT $LN139@draw_aircr
  00824	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  0082a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0082c	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv335[ebp], ecx
  00832	eb 27		 jmp	 SHORT $LN140@draw_aircr
$LN139@draw_aircr:
  00834	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0083a	81 c2 84 00 00
	00		 add	 edx, 132		; 00000084H
  00840	52		 push	 edx
  00841	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00846	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0084b	50		 push	 eax
  0084c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00851	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv335[ebp], 0
$LN140@draw_aircr:
  0085b	b9 01 00 00 00	 mov	 ecx, 1
  00860	85 c9		 test	 ecx, ecx
  00862	74 0c		 je	 SHORT $LN141@draw_aircr
  00864	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv343[ebp], 18 ; 00000012H
  0086e	eb 27		 jmp	 SHORT $LN142@draw_aircr
$LN141@draw_aircr:
  00870	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  00876	81 c2 84 00 00
	00		 add	 edx, 132		; 00000084H
  0087c	52		 push	 edx
  0087d	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00882	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00887	50		 push	 eax
  00888	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0088d	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv343[ebp], 0
$LN142@draw_aircr:
  00897	6a 12		 push	 18			; 00000012H
  00899	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  0089f	51		 push	 ecx
  008a0	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv335[ebp], 180
  008aa	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv343[ebp]
  008b0	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  008b7	ff d1		 call	 ecx
  008b9	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 6451 : 		}

  008bf	e9 83 fb ff ff	 jmp	 $LN4@draw_aircr
$LN5@draw_aircr:

; 6452 : 
; 6453 : 		//
; 6454 : 		// display enemy SAM, AAA and AIRBORNE_RADAR threats
; 6455 : 		//
; 6456 : 
; 6457 : 		threat = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  008c4	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  008cb	74 10		 je	 SHORT $LN143@draw_aircr
  008cd	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  008d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  008d5	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv355[ebp], ecx
  008db	eb 27		 jmp	 SHORT $LN144@draw_aircr
$LN143@draw_aircr:
  008dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  008e3	81 c2 8b 00 00
	00		 add	 edx, 139		; 0000008bH
  008e9	52		 push	 edx
  008ea	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  008ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  008f4	50		 push	 eax
  008f5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008fa	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv355[ebp], 0
$LN144@draw_aircr:
  00904	b9 01 00 00 00	 mov	 ecx, 1
  00909	85 c9		 test	 ecx, ecx
  0090b	74 0c		 je	 SHORT $LN145@draw_aircr
  0090d	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv363[ebp], 18 ; 00000012H
  00917	eb 27		 jmp	 SHORT $LN146@draw_aircr
$LN145@draw_aircr:
  00919	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0091f	81 c2 8b 00 00
	00		 add	 edx, 139		; 0000008bH
  00925	52		 push	 edx
  00926	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0092b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00930	50		 push	 eax
  00931	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00936	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv363[ebp], 0
$LN146@draw_aircr:
  00940	6a 12		 push	 18			; 00000012H
  00942	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00948	51		 push	 ecx
  00949	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv355[ebp], 180
  00953	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv363[ebp]
  00959	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00960	ff d1		 call	 ecx
  00962	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN6@draw_aircr:

; 6458 : 
; 6459 : 		while (threat)

  00968	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0096f	0f 84 c7 02 00
	00		 je	 $LN7@draw_aircr

; 6460 : 		{
; 6461 : 			if (!get_local_entity_int_value (threat, INT_TYPE_GROUND_RADAR_CLUTTER))

  00975	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0097c	74 10		 je	 SHORT $LN147@draw_aircr
  0097e	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00984	8b 08		 mov	 ecx, DWORD PTR [eax]
  00986	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv375[ebp], ecx
  0098c	eb 20		 jmp	 SHORT $LN148@draw_aircr
$LN147@draw_aircr:
  0098e	68 3d 19 00 00	 push	 6461			; 0000193dH
  00993	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00998	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0099e	52		 push	 edx
  0099f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009a4	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv375[ebp], 0
$LN148@draw_aircr:
  009ae	b8 01 00 00 00	 mov	 eax, 1
  009b3	85 c0		 test	 eax, eax
  009b5	74 0c		 je	 SHORT $LN149@draw_aircr
  009b7	c7 85 98 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv382[ebp], 66 ; 00000042H
  009c1	eb 20		 jmp	 SHORT $LN150@draw_aircr
$LN149@draw_aircr:
  009c3	68 3d 19 00 00	 push	 6461			; 0000193dH
  009c8	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  009cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  009d3	51		 push	 ecx
  009d4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009d9	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv382[ebp], 0
$LN150@draw_aircr:
  009e3	6a 42		 push	 66			; 00000042H
  009e5	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  009eb	52		 push	 edx
  009ec	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv375[ebp], 1116
  009f6	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv382[ebp]
  009fc	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00a03	ff d2		 call	 edx
  00a05	85 c0		 test	 eax, eax
  00a07	0f 85 86 01 00
	00		 jne	 $LN25@draw_aircr

; 6462 : 			{
; 6463 : 				if (source_side != get_local_entity_int_value (threat, INT_TYPE_SIDE))

  00a0d	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00a14	74 10		 je	 SHORT $LN151@draw_aircr
  00a16	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00a1c	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a1e	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv394[ebp], ecx
  00a24	eb 20		 jmp	 SHORT $LN152@draw_aircr
$LN151@draw_aircr:
  00a26	68 3f 19 00 00	 push	 6463			; 0000193fH
  00a2b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a30	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00a36	52		 push	 edx
  00a37	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a3c	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv394[ebp], 0
$LN152@draw_aircr:
  00a46	b8 01 00 00 00	 mov	 eax, 1
  00a4b	85 c0		 test	 eax, eax
  00a4d	74 0c		 je	 SHORT $LN153@draw_aircr
  00a4f	c7 85 98 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv401[ebp], 187 ; 000000bbH
  00a59	eb 20		 jmp	 SHORT $LN154@draw_aircr
$LN153@draw_aircr:
  00a5b	68 3f 19 00 00	 push	 6463			; 0000193fH
  00a60	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a65	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00a6b	51		 push	 ecx
  00a6c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a71	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv401[ebp], 0
$LN154@draw_aircr:
  00a7b	68 bb 00 00 00	 push	 187			; 000000bbH
  00a80	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00a86	52		 push	 edx
  00a87	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv394[ebp], 1116
  00a91	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv401[ebp]
  00a97	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00a9e	ff d2		 call	 edx
  00aa0	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  00aa6	0f 84 e7 00 00
	00		 je	 $LN25@draw_aircr

; 6464 : 				{
; 6465 : 					threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  00aac	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00ab3	74 10		 je	 SHORT $LN155@draw_aircr
  00ab5	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00abb	8b 08		 mov	 ecx, DWORD PTR [eax]
  00abd	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv414[ebp], ecx
  00ac3	eb 27		 jmp	 SHORT $LN156@draw_aircr
$LN155@draw_aircr:
  00ac5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  00acb	81 c2 93 00 00
	00		 add	 edx, 147		; 00000093H
  00ad1	52		 push	 edx
  00ad2	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ad7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00adc	50		 push	 eax
  00add	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ae2	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv414[ebp], 0
$LN156@draw_aircr:
  00aec	b9 01 00 00 00	 mov	 ecx, 1
  00af1	85 c9		 test	 ecx, ecx
  00af3	74 0c		 je	 SHORT $LN157@draw_aircr
  00af5	c7 85 98 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv422[ebp], 233 ; 000000e9H
  00aff	eb 27		 jmp	 SHORT $LN158@draw_aircr
$LN157@draw_aircr:
  00b01	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  00b07	81 c2 93 00 00
	00		 add	 edx, 147		; 00000093H
  00b0d	52		 push	 edx
  00b0e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b13	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00b18	50		 push	 eax
  00b19	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b1e	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv422[ebp], 0
$LN158@draw_aircr:
  00b28	68 e9 00 00 00	 push	 233			; 000000e9H
  00b2d	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00b33	51		 push	 ecx
  00b34	69 95 9c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv414[ebp], 1116
  00b3e	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv422[ebp]
  00b44	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00b4b	ff d1		 call	 ecx
  00b4d	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 6466 : 
; 6467 : 					if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA) || (threat_type == THREAT_TYPE_AIRBORNE_RADAR))

  00b53	83 bd f8 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  00b5a	74 12		 je	 SHORT $LN26@draw_aircr
  00b5c	83 bd f8 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$7[ebp], 6
  00b63	74 09		 je	 SHORT $LN26@draw_aircr
  00b65	83 bd f8 fe ff
	ff 04		 cmp	 DWORD PTR _threat_type$7[ebp], 4
  00b6c	75 25		 jne	 SHORT $LN25@draw_aircr
$LN26@draw_aircr:

; 6468 : 					{
; 6469 : //VJ 030423 TSD render mod
; 6470 : 						draw_radar_target_symbol (threat, source_position, scale, FALSE, FALSE);

  00b6e	6a 00		 push	 0
  00b70	6a 00		 push	 0
  00b72	51		 push	 ecx
  00b73	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00b7b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b80	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00b86	50		 push	 eax
  00b87	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00b8d	51		 push	 ecx
  00b8e	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN25@draw_aircr:

; 6471 : 					}
; 6472 : 				}
; 6473 : 			}
; 6474 : 
; 6475 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_GUNSHIP_TARGET);

  00b93	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00b9a	74 10		 je	 SHORT $LN159@draw_aircr
  00b9c	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00ba2	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ba4	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv442[ebp], ecx
  00baa	eb 27		 jmp	 SHORT $LN160@draw_aircr
$LN159@draw_aircr:
  00bac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  00bb2	81 c2 9d 00 00
	00		 add	 edx, 157		; 0000009dH
  00bb8	52		 push	 edx
  00bb9	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00bbe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00bc3	50		 push	 eax
  00bc4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00bc9	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv442[ebp], 0
$LN160@draw_aircr:
  00bd3	b9 01 00 00 00	 mov	 ecx, 1
  00bd8	85 c9		 test	 ecx, ecx
  00bda	74 0c		 je	 SHORT $LN161@draw_aircr
  00bdc	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv450[ebp], 18 ; 00000012H
  00be6	eb 27		 jmp	 SHORT $LN162@draw_aircr
$LN161@draw_aircr:
  00be8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  00bee	81 c2 9d 00 00
	00		 add	 edx, 157		; 0000009dH
  00bf4	52		 push	 edx
  00bf5	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00bfa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00bff	50		 push	 eax
  00c00	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c05	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv450[ebp], 0
$LN162@draw_aircr:
  00c0f	6a 12		 push	 18			; 00000012H
  00c11	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00c17	51		 push	 ecx
  00c18	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv442[ebp], 180
  00c22	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv450[ebp]
  00c28	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00c2f	ff d1		 call	 ecx
  00c31	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 6476 : 		}

  00c37	e9 2c fd ff ff	 jmp	 $LN6@draw_aircr
$LN7@draw_aircr:

; 6477 : 
; 6478 : 		//
; 6479 : 		// draw threat line if gunship is targetted (flash if missile fired)
; 6480 : 		//
; 6481 : 
; 6482 : 		threat = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  00c3c	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00c43	74 10		 je	 SHORT $LN163@draw_aircr
  00c45	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00c4b	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c4d	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv462[ebp], ecx
  00c53	eb 27		 jmp	 SHORT $LN164@draw_aircr
$LN163@draw_aircr:
  00c55	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  00c5b	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  00c61	52		 push	 edx
  00c62	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c67	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00c6c	50		 push	 eax
  00c6d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c72	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv462[ebp], 0
$LN164@draw_aircr:
  00c7c	b9 01 00 00 00	 mov	 ecx, 1
  00c81	85 c9		 test	 ecx, ecx
  00c83	74 0c		 je	 SHORT $LN165@draw_aircr
  00c85	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv470[ebp], 18 ; 00000012H
  00c8f	eb 27		 jmp	 SHORT $LN166@draw_aircr
$LN165@draw_aircr:
  00c91	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  00c97	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  00c9d	52		 push	 edx
  00c9e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ca3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00ca8	50		 push	 eax
  00ca9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00cae	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv470[ebp], 0
$LN166@draw_aircr:
  00cb8	6a 12		 push	 18			; 00000012H
  00cba	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00cc0	51		 push	 ecx
  00cc1	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv462[ebp], 180
  00ccb	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv470[ebp]
  00cd1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00cd8	ff d1		 call	 ecx
  00cda	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN8@draw_aircr:

; 6483 : 
; 6484 : 		while (threat)

  00ce0	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00ce7	0f 84 c1 07 00
	00		 je	 $LN9@draw_aircr

; 6485 : 		{
; 6486 : 			if (!get_local_entity_int_value (threat, INT_TYPE_GROUND_RADAR_CLUTTER))

  00ced	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00cf4	74 10		 je	 SHORT $LN167@draw_aircr
  00cf6	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00cfc	8b 08		 mov	 ecx, DWORD PTR [eax]
  00cfe	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv482[ebp], ecx
  00d04	eb 20		 jmp	 SHORT $LN168@draw_aircr
$LN167@draw_aircr:
  00d06	68 56 19 00 00	 push	 6486			; 00001956H
  00d0b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d10	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00d16	52		 push	 edx
  00d17	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d1c	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv482[ebp], 0
$LN168@draw_aircr:
  00d26	b8 01 00 00 00	 mov	 eax, 1
  00d2b	85 c0		 test	 eax, eax
  00d2d	74 0c		 je	 SHORT $LN169@draw_aircr
  00d2f	c7 85 98 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv489[ebp], 66 ; 00000042H
  00d39	eb 20		 jmp	 SHORT $LN170@draw_aircr
$LN169@draw_aircr:
  00d3b	68 56 19 00 00	 push	 6486			; 00001956H
  00d40	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d45	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00d4b	51		 push	 ecx
  00d4c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d51	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv489[ebp], 0
$LN170@draw_aircr:
  00d5b	6a 42		 push	 66			; 00000042H
  00d5d	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00d63	52		 push	 edx
  00d64	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv482[ebp], 1116
  00d6e	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv489[ebp]
  00d74	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00d7b	ff d2		 call	 edx
  00d7d	85 c0		 test	 eax, eax
  00d7f	0f 85 80 06 00
	00		 jne	 $LN35@draw_aircr

; 6487 : 			{
; 6488 : 				if (source_side != get_local_entity_int_value (threat, INT_TYPE_SIDE))

  00d85	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00d8c	74 10		 je	 SHORT $LN171@draw_aircr
  00d8e	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00d94	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d96	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv501[ebp], ecx
  00d9c	eb 20		 jmp	 SHORT $LN172@draw_aircr
$LN171@draw_aircr:
  00d9e	68 58 19 00 00	 push	 6488			; 00001958H
  00da3	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00da8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00dae	52		 push	 edx
  00daf	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00db4	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv501[ebp], 0
$LN172@draw_aircr:
  00dbe	b8 01 00 00 00	 mov	 eax, 1
  00dc3	85 c0		 test	 eax, eax
  00dc5	74 0c		 je	 SHORT $LN173@draw_aircr
  00dc7	c7 85 98 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv508[ebp], 187 ; 000000bbH
  00dd1	eb 20		 jmp	 SHORT $LN174@draw_aircr
$LN173@draw_aircr:
  00dd3	68 58 19 00 00	 push	 6488			; 00001958H
  00dd8	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ddd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00de3	51		 push	 ecx
  00de4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00de9	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv508[ebp], 0
$LN174@draw_aircr:
  00df3	68 bb 00 00 00	 push	 187			; 000000bbH
  00df8	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00dfe	52		 push	 edx
  00dff	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv501[ebp], 1116
  00e09	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv508[ebp]
  00e0f	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00e16	ff d2		 call	 edx
  00e18	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  00e1e	0f 84 e1 05 00
	00		 je	 $LN35@draw_aircr

; 6489 : 				{
; 6490 : 					if (get_local_entity_int_value (threat, INT_TYPE_RADAR_ON))

  00e24	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00e2b	74 10		 je	 SHORT $LN175@draw_aircr
  00e2d	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00e33	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e35	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv520[ebp], ecx
  00e3b	eb 20		 jmp	 SHORT $LN176@draw_aircr
$LN175@draw_aircr:
  00e3d	68 5a 19 00 00	 push	 6490			; 0000195aH
  00e42	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e47	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00e4d	52		 push	 edx
  00e4e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e53	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv520[ebp], 0
$LN176@draw_aircr:
  00e5d	b8 01 00 00 00	 mov	 eax, 1
  00e62	85 c0		 test	 eax, eax
  00e64	74 0c		 je	 SHORT $LN177@draw_aircr
  00e66	c7 85 98 fe ff
	ff a9 00 00 00	 mov	 DWORD PTR tv527[ebp], 169 ; 000000a9H
  00e70	eb 20		 jmp	 SHORT $LN178@draw_aircr
$LN177@draw_aircr:
  00e72	68 5a 19 00 00	 push	 6490			; 0000195aH
  00e77	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e7c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00e82	51		 push	 ecx
  00e83	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e88	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv527[ebp], 0
$LN178@draw_aircr:
  00e92	68 a9 00 00 00	 push	 169			; 000000a9H
  00e97	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00e9d	52		 push	 edx
  00e9e	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv520[ebp], 1116
  00ea8	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv527[ebp]
  00eae	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00eb5	ff d2		 call	 edx
  00eb7	85 c0		 test	 eax, eax
  00eb9	0f 84 46 05 00
	00		 je	 $LN35@draw_aircr

; 6491 : 					{
; 6492 : 						threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  00ebf	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00ec6	74 10		 je	 SHORT $LN179@draw_aircr
  00ec8	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00ece	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ed0	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv540[ebp], ecx
  00ed6	eb 27		 jmp	 SHORT $LN180@draw_aircr
$LN179@draw_aircr:
  00ed8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  00ede	81 c2 ae 00 00
	00		 add	 edx, 174		; 000000aeH
  00ee4	52		 push	 edx
  00ee5	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00eea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00eef	50		 push	 eax
  00ef0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ef5	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv540[ebp], 0
$LN180@draw_aircr:
  00eff	b9 01 00 00 00	 mov	 ecx, 1
  00f04	85 c9		 test	 ecx, ecx
  00f06	74 0c		 je	 SHORT $LN181@draw_aircr
  00f08	c7 85 98 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv548[ebp], 233 ; 000000e9H
  00f12	eb 27		 jmp	 SHORT $LN182@draw_aircr
$LN181@draw_aircr:
  00f14	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  00f1a	81 c2 ae 00 00
	00		 add	 edx, 174		; 000000aeH
  00f20	52		 push	 edx
  00f21	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f26	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00f2b	50		 push	 eax
  00f2c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f31	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv548[ebp], 0
$LN182@draw_aircr:
  00f3b	68 e9 00 00 00	 push	 233			; 000000e9H
  00f40	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00f46	51		 push	 ecx
  00f47	69 95 9c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv540[ebp], 1116
  00f51	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv548[ebp]
  00f57	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00f5e	ff d1		 call	 ecx
  00f60	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 6493 : 
; 6494 : 						if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA) || (threat_type == THREAT_TYPE_AIRBORNE_RADAR))

  00f66	83 bd f8 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  00f6d	74 16		 je	 SHORT $LN31@draw_aircr
  00f6f	83 bd f8 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$7[ebp], 6
  00f76	74 0d		 je	 SHORT $LN31@draw_aircr
  00f78	83 bd f8 fe ff
	ff 04		 cmp	 DWORD PTR _threat_type$7[ebp], 4
  00f7f	0f 85 80 04 00
	00		 jne	 $LN35@draw_aircr
$LN31@draw_aircr:

; 6495 : 						{
; 6496 : 							if (get_local_entity_parent (threat, LIST_TYPE_TARGET) == source)

  00f85	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00f8c	74 10		 je	 SHORT $LN183@draw_aircr
  00f8e	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00f94	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f96	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv562[ebp], ecx
  00f9c	eb 20		 jmp	 SHORT $LN184@draw_aircr
$LN183@draw_aircr:
  00f9e	68 60 19 00 00	 push	 6496			; 00001960H
  00fa3	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00fa8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00fae	52		 push	 edx
  00faf	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00fb4	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv562[ebp], 0
$LN184@draw_aircr:
  00fbe	b8 01 00 00 00	 mov	 eax, 1
  00fc3	85 c0		 test	 eax, eax
  00fc5	74 0c		 je	 SHORT $LN185@draw_aircr
  00fc7	c7 85 98 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv569[ebp], 38 ; 00000026H
  00fd1	eb 20		 jmp	 SHORT $LN186@draw_aircr
$LN185@draw_aircr:
  00fd3	68 60 19 00 00	 push	 6496			; 00001960H
  00fd8	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00fdd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00fe3	51		 push	 ecx
  00fe4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00fe9	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv569[ebp], 0
$LN186@draw_aircr:
  00ff3	6a 26		 push	 38			; 00000026H
  00ff5	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00ffb	52		 push	 edx
  00ffc	69 85 9c fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv562[ebp], 180
  01006	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv569[ebp]
  0100c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  01013	ff d2		 call	 edx
  01015	3b 85 10 ff ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  0101b	0f 85 e4 03 00
	00		 jne	 $LN35@draw_aircr

; 6497 : 							{
; 6498 : 								draw_threat_line = TRUE;

  01021	c7 85 f4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _draw_threat_line$6[ebp], 1

; 6499 : 
; 6500 : 								launched_weapon = get_local_entity_first_child (threat, LIST_TYPE_LAUNCHED_WEAPON);

  0102b	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  01032	74 10		 je	 SHORT $LN187@draw_aircr
  01034	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  0103a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0103c	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv582[ebp], ecx
  01042	eb 27		 jmp	 SHORT $LN188@draw_aircr
$LN187@draw_aircr:
  01044	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0104a	81 c2 b6 00 00
	00		 add	 edx, 182		; 000000b6H
  01050	52		 push	 edx
  01051	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01056	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0105b	50		 push	 eax
  0105c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01061	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv582[ebp], 0
$LN188@draw_aircr:
  0106b	b9 01 00 00 00	 mov	 ecx, 1
  01070	85 c9		 test	 ecx, ecx
  01072	74 0c		 je	 SHORT $LN189@draw_aircr
  01074	c7 85 98 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv590[ebp], 24 ; 00000018H
  0107e	eb 27		 jmp	 SHORT $LN190@draw_aircr
$LN189@draw_aircr:
  01080	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  01086	81 c2 b6 00 00
	00		 add	 edx, 182		; 000000b6H
  0108c	52		 push	 edx
  0108d	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01092	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01097	50		 push	 eax
  01098	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0109d	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv590[ebp], 0
$LN190@draw_aircr:
  010a7	6a 18		 push	 24			; 00000018H
  010a9	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  010af	51		 push	 ecx
  010b0	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv582[ebp], 180
  010ba	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv590[ebp]
  010c0	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  010c7	ff d1		 call	 ecx
  010c9	89 85 00 ff ff
	ff		 mov	 DWORD PTR _launched_weapon$9[ebp], eax
$LN10@draw_aircr:

; 6501 : 
; 6502 : 								while (launched_weapon)

  010cf	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  010d6	0f 84 ef 01 00
	00		 je	 $LN11@draw_aircr

; 6503 : 								{
; 6504 : 									if (get_local_entity_int_value (launched_weapon, INT_TYPE_WEAPON_GUIDANCE_TYPE) != WEAPON_GUIDANCE_TYPE_NONE)

  010dc	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  010e3	74 10		 je	 SHORT $LN191@draw_aircr
  010e5	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$9[ebp]
  010eb	8b 08		 mov	 ecx, DWORD PTR [eax]
  010ed	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv602[ebp], ecx
  010f3	eb 20		 jmp	 SHORT $LN192@draw_aircr
$LN191@draw_aircr:
  010f5	68 68 19 00 00	 push	 6504			; 00001968H
  010fa	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  010ff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01105	52		 push	 edx
  01106	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0110b	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv602[ebp], 0
$LN192@draw_aircr:
  01115	b8 01 00 00 00	 mov	 eax, 1
  0111a	85 c0		 test	 eax, eax
  0111c	74 0c		 je	 SHORT $LN193@draw_aircr
  0111e	c7 85 98 fe ff
	ff 07 01 00 00	 mov	 DWORD PTR tv609[ebp], 263 ; 00000107H
  01128	eb 20		 jmp	 SHORT $LN194@draw_aircr
$LN193@draw_aircr:
  0112a	68 68 19 00 00	 push	 6504			; 00001968H
  0112f	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01134	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0113a	51		 push	 ecx
  0113b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01140	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv609[ebp], 0
$LN194@draw_aircr:
  0114a	68 07 01 00 00	 push	 263			; 00000107H
  0114f	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$9[ebp]
  01155	52		 push	 edx
  01156	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv602[ebp], 1116
  01160	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv609[ebp]
  01166	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0116d	ff d2		 call	 edx
  0116f	85 c0		 test	 eax, eax
  01171	0f 84 ab 00 00
	00		 je	 $LN34@draw_aircr

; 6505 : 									{
; 6506 : 										if (get_local_entity_parent (launched_weapon, LIST_TYPE_TARGET) == source)

  01177	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  0117e	74 10		 je	 SHORT $LN195@draw_aircr
  01180	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$9[ebp]
  01186	8b 08		 mov	 ecx, DWORD PTR [eax]
  01188	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv621[ebp], ecx
  0118e	eb 20		 jmp	 SHORT $LN196@draw_aircr
$LN195@draw_aircr:
  01190	68 6a 19 00 00	 push	 6506			; 0000196aH
  01195	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0119a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  011a0	52		 push	 edx
  011a1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  011a6	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv621[ebp], 0
$LN196@draw_aircr:
  011b0	b8 01 00 00 00	 mov	 eax, 1
  011b5	85 c0		 test	 eax, eax
  011b7	74 0c		 je	 SHORT $LN197@draw_aircr
  011b9	c7 85 98 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv628[ebp], 38 ; 00000026H
  011c3	eb 20		 jmp	 SHORT $LN198@draw_aircr
$LN197@draw_aircr:
  011c5	68 6a 19 00 00	 push	 6506			; 0000196aH
  011ca	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  011cf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  011d5	51		 push	 ecx
  011d6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  011db	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv628[ebp], 0
$LN198@draw_aircr:
  011e5	6a 26		 push	 38			; 00000026H
  011e7	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$9[ebp]
  011ed	52		 push	 edx
  011ee	69 85 9c fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv621[ebp], 180
  011f8	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv628[ebp]
  011fe	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  01205	ff d2		 call	 edx
  01207	3b 85 10 ff ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  0120d	75 13		 jne	 SHORT $LN34@draw_aircr

; 6507 : 										{
; 6508 : 											draw_threat_line = *ase_draw_threat_line_status;

  0120f	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _ase_draw_threat_line_status$[ebp]
  01215	8b 08		 mov	 ecx, DWORD PTR [eax]
  01217	89 8d f4 fe ff
	ff		 mov	 DWORD PTR _draw_threat_line$6[ebp], ecx

; 6509 : 
; 6510 : 											break;

  0121d	e9 a9 00 00 00	 jmp	 $LN11@draw_aircr
$LN34@draw_aircr:

; 6511 : 										}
; 6512 : 									}
; 6513 : 
; 6514 : 									launched_weapon = get_local_entity_child_succ (launched_weapon, LIST_TYPE_LAUNCHED_WEAPON);

  01222	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  01229	74 10		 je	 SHORT $LN199@draw_aircr
  0122b	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$9[ebp]
  01231	8b 08		 mov	 ecx, DWORD PTR [eax]
  01233	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv641[ebp], ecx
  01239	eb 27		 jmp	 SHORT $LN200@draw_aircr
$LN199@draw_aircr:
  0123b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  01241	81 c2 c4 00 00
	00		 add	 edx, 196		; 000000c4H
  01247	52		 push	 edx
  01248	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0124d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01252	50		 push	 eax
  01253	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01258	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv641[ebp], 0
$LN200@draw_aircr:
  01262	b9 01 00 00 00	 mov	 ecx, 1
  01267	85 c9		 test	 ecx, ecx
  01269	74 0c		 je	 SHORT $LN201@draw_aircr
  0126b	c7 85 98 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv649[ebp], 24 ; 00000018H
  01275	eb 27		 jmp	 SHORT $LN202@draw_aircr
$LN201@draw_aircr:
  01277	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0127d	81 c2 c4 00 00
	00		 add	 edx, 196		; 000000c4H
  01283	52		 push	 edx
  01284	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01289	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0128e	50		 push	 eax
  0128f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01294	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv649[ebp], 0
$LN202@draw_aircr:
  0129e	6a 18		 push	 24			; 00000018H
  012a0	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _launched_weapon$9[ebp]
  012a6	51		 push	 ecx
  012a7	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv641[ebp], 180
  012b1	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv649[ebp]
  012b7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  012be	ff d1		 call	 ecx
  012c0	89 85 00 ff ff
	ff		 mov	 DWORD PTR _launched_weapon$9[ebp], eax

; 6515 : 								}

  012c6	e9 04 fe ff ff	 jmp	 $LN10@draw_aircr
$LN11@draw_aircr:

; 6516 : 
; 6517 : 								if (draw_threat_line)

  012cb	83 bd f4 fe ff
	ff 00		 cmp	 DWORD PTR _draw_threat_line$6[ebp], 0
  012d2	0f 84 2d 01 00
	00		 je	 $LN35@draw_aircr

; 6518 : 								{
; 6519 : 									threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  012d8	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  012df	74 10		 je	 SHORT $LN203@draw_aircr
  012e1	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  012e7	8b 08		 mov	 ecx, DWORD PTR [eax]
  012e9	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv662[ebp], ecx
  012ef	eb 27		 jmp	 SHORT $LN204@draw_aircr
$LN203@draw_aircr:
  012f1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  012f7	81 c2 c9 00 00
	00		 add	 edx, 201		; 000000c9H
  012fd	52		 push	 edx
  012fe	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01303	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01308	50		 push	 eax
  01309	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0130e	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv662[ebp], 0
$LN204@draw_aircr:
  01318	b9 01 00 00 00	 mov	 ecx, 1
  0131d	85 c9		 test	 ecx, ecx
  0131f	74 0c		 je	 SHORT $LN205@draw_aircr
  01321	c7 85 98 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv670[ebp], 8
  0132b	eb 27		 jmp	 SHORT $LN206@draw_aircr
$LN205@draw_aircr:
  0132d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  01333	81 c2 c9 00 00
	00		 add	 edx, 201		; 000000c9H
  01339	52		 push	 edx
  0133a	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0133f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  01344	50		 push	 eax
  01345	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0134a	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv670[ebp], 0
$LN206@draw_aircr:
  01354	6a 08		 push	 8
  01356	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  0135c	51		 push	 ecx
  0135d	6b 95 9c fe ff
	ff 60		 imul	 edx, DWORD PTR tv662[ebp], 96
  01364	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv670[ebp]
  0136a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  01371	ff d1		 call	 ecx
  01373	89 85 fc fe ff
	ff		 mov	 DWORD PTR _threat_position$8[ebp], eax

; 6520 : 
; 6521 : 									dx = (threat_position->x - source_position->x) * scale;

  01379	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  0137f	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01385	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01389	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0138d	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01395	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 6522 : 									dy = (threat_position->z - source_position->z) * scale;

  0139d	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  013a3	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  013a9	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  013ae	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  013b3	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  013bb	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _dy$3[ebp], xmm0

; 6523 : 
; 6524 : 									draw_2d_line (0.0, 0.0, dx, dy, MFD_COLOUR1);

  013c3	b8 04 00 00 00	 mov	 eax, 4
  013c8	6b c8 00	 imul	 ecx, eax, 0
  013cb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  013d1	52		 push	 edx
  013d2	51		 push	 ecx
  013d3	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  013db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013e0	51		 push	 ecx
  013e1	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  013e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013ee	51		 push	 ecx
  013ef	0f 57 c0	 xorps	 xmm0, xmm0
  013f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013f7	51		 push	 ecx
  013f8	0f 57 c0	 xorps	 xmm0, xmm0
  013fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01400	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN35@draw_aircr:

; 6525 : 								}
; 6526 : 							}
; 6527 : 						}
; 6528 : 					}
; 6529 : 				}
; 6530 : 			}
; 6531 : 
; 6532 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_GUNSHIP_TARGET);

  01405	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0140c	74 10		 je	 SHORT $LN207@draw_aircr
  0140e	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  01414	8b 08		 mov	 ecx, DWORD PTR [eax]
  01416	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv697[ebp], ecx
  0141c	eb 27		 jmp	 SHORT $LN208@draw_aircr
$LN207@draw_aircr:
  0141e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  01424	81 c2 d6 00 00
	00		 add	 edx, 214		; 000000d6H
  0142a	52		 push	 edx
  0142b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01430	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01435	50		 push	 eax
  01436	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0143b	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv697[ebp], 0
$LN208@draw_aircr:
  01445	b9 01 00 00 00	 mov	 ecx, 1
  0144a	85 c9		 test	 ecx, ecx
  0144c	74 0c		 je	 SHORT $LN209@draw_aircr
  0144e	c7 85 98 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv705[ebp], 18 ; 00000012H
  01458	eb 27		 jmp	 SHORT $LN210@draw_aircr
$LN209@draw_aircr:
  0145a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  01460	81 c2 d6 00 00
	00		 add	 edx, 214		; 000000d6H
  01466	52		 push	 edx
  01467	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0146c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01471	50		 push	 eax
  01472	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01477	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv705[ebp], 0
$LN210@draw_aircr:
  01481	6a 12		 push	 18			; 00000012H
  01483	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  01489	51		 push	 ecx
  0148a	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv697[ebp], 180
  01494	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv705[ebp]
  0149a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  014a1	ff d1		 call	 ecx
  014a3	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 6533 : 		}

  014a9	e9 32 f8 ff ff	 jmp	 $LN8@draw_aircr
$LN9@draw_aircr:

; 6534 : 
; 6535 : 		//
; 6536 : 		// draw incoming missiles
; 6537 : 		//
; 6538 : 
; 6539 : 		threat = get_local_entity_first_child (source, LIST_TYPE_TARGET);

  014ae	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  014b5	74 10		 je	 SHORT $LN211@draw_aircr
  014b7	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  014bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  014bf	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv717[ebp], ecx
  014c5	eb 27		 jmp	 SHORT $LN212@draw_aircr
$LN211@draw_aircr:
  014c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  014cd	81 c2 dd 00 00
	00		 add	 edx, 221		; 000000ddH
  014d3	52		 push	 edx
  014d4	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  014d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  014de	50		 push	 eax
  014df	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  014e4	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv717[ebp], 0
$LN212@draw_aircr:
  014ee	b9 01 00 00 00	 mov	 ecx, 1
  014f3	85 c9		 test	 ecx, ecx
  014f5	74 0c		 je	 SHORT $LN213@draw_aircr
  014f7	c7 85 98 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv725[ebp], 38 ; 00000026H
  01501	eb 27		 jmp	 SHORT $LN214@draw_aircr
$LN213@draw_aircr:
  01503	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  01509	81 c2 dd 00 00
	00		 add	 edx, 221		; 000000ddH
  0150f	52		 push	 edx
  01510	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01515	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0151a	50		 push	 eax
  0151b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01520	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv725[ebp], 0
$LN214@draw_aircr:
  0152a	6a 26		 push	 38			; 00000026H
  0152c	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  01532	51		 push	 ecx
  01533	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv717[ebp], 180
  0153d	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv725[ebp]
  01543	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0154a	ff d1		 call	 ecx
  0154c	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN12@draw_aircr:

; 6540 : 
; 6541 : 		while (threat)

  01552	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  01559	0f 84 39 03 00
	00		 je	 $LN13@draw_aircr

; 6542 : 		{
; 6543 : 			threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  0155f	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  01566	74 10		 je	 SHORT $LN215@draw_aircr
  01568	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  0156e	8b 08		 mov	 ecx, DWORD PTR [eax]
  01570	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv738[ebp], ecx
  01576	eb 27		 jmp	 SHORT $LN216@draw_aircr
$LN215@draw_aircr:
  01578	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0157e	81 c2 e1 00 00
	00		 add	 edx, 225		; 000000e1H
  01584	52		 push	 edx
  01585	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0158a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0158f	50		 push	 eax
  01590	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01595	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv738[ebp], 0
$LN216@draw_aircr:
  0159f	b9 01 00 00 00	 mov	 ecx, 1
  015a4	85 c9		 test	 ecx, ecx
  015a6	74 0c		 je	 SHORT $LN217@draw_aircr
  015a8	c7 85 98 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv746[ebp], 233 ; 000000e9H
  015b2	eb 27		 jmp	 SHORT $LN218@draw_aircr
$LN217@draw_aircr:
  015b4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  015ba	81 c2 e1 00 00
	00		 add	 edx, 225		; 000000e1H
  015c0	52		 push	 edx
  015c1	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  015c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  015cb	50		 push	 eax
  015cc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  015d1	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv746[ebp], 0
$LN218@draw_aircr:
  015db	68 e9 00 00 00	 push	 233			; 000000e9H
  015e0	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  015e6	51		 push	 ecx
  015e7	69 95 9c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv738[ebp], 1116
  015f1	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv746[ebp]
  015f7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  015fe	ff d1		 call	 ecx
  01600	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 6544 : 
; 6545 : 			if ((threat_type == THREAT_TYPE_RF_MISSILE) || (threat_type == THREAT_TYPE_IR_MISSILE) || (threat_type == THREAT_TYPE_LASER_MISSILE))

  01606	83 bd f8 fe ff
	ff 01		 cmp	 DWORD PTR _threat_type$7[ebp], 1
  0160d	74 16		 je	 SHORT $LN37@draw_aircr
  0160f	83 bd f8 fe ff
	ff 02		 cmp	 DWORD PTR _threat_type$7[ebp], 2
  01616	74 0d		 je	 SHORT $LN37@draw_aircr
  01618	83 bd f8 fe ff
	ff 03		 cmp	 DWORD PTR _threat_type$7[ebp], 3
  0161f	0f 85 ca 01 00
	00		 jne	 $LN39@draw_aircr
$LN37@draw_aircr:

; 6546 : 			{
; 6547 : 				threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  01625	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0162c	74 10		 je	 SHORT $LN219@draw_aircr
  0162e	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  01634	8b 08		 mov	 ecx, DWORD PTR [eax]
  01636	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv761[ebp], ecx
  0163c	eb 27		 jmp	 SHORT $LN220@draw_aircr
$LN219@draw_aircr:
  0163e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  01644	81 c2 e5 00 00
	00		 add	 edx, 229		; 000000e5H
  0164a	52		 push	 edx
  0164b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01650	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01655	50		 push	 eax
  01656	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0165b	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv761[ebp], 0
$LN220@draw_aircr:
  01665	b9 01 00 00 00	 mov	 ecx, 1
  0166a	85 c9		 test	 ecx, ecx
  0166c	74 0c		 je	 SHORT $LN221@draw_aircr
  0166e	c7 85 98 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv769[ebp], 8
  01678	eb 27		 jmp	 SHORT $LN222@draw_aircr
$LN221@draw_aircr:
  0167a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  01680	81 c2 e5 00 00
	00		 add	 edx, 229		; 000000e5H
  01686	52		 push	 edx
  01687	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0168c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  01691	50		 push	 eax
  01692	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01697	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv769[ebp], 0
$LN222@draw_aircr:
  016a1	6a 08		 push	 8
  016a3	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  016a9	51		 push	 ecx
  016aa	6b 95 9c fe ff
	ff 60		 imul	 edx, DWORD PTR tv761[ebp], 96
  016b1	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv769[ebp]
  016b7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  016be	ff d1		 call	 ecx
  016c0	89 85 fc fe ff
	ff		 mov	 DWORD PTR _threat_position$8[ebp], eax

; 6548 : 
; 6549 : 				dx = (threat_position->x - source_position->x) * scale;

  016c6	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  016cc	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  016d2	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  016d6	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  016da	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  016e2	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 6550 : 				dy = (threat_position->z - source_position->z) * scale;

  016ea	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  016f0	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  016f6	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  016fb	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  01700	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01708	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _dy$3[ebp], xmm0

; 6551 : 
; 6552 : 				if (draw_large_mfd)

  01710	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01717	74 6c		 je	 SHORT $LN38@draw_aircr

; 6553 : 				{
; 6554 : 					draw_2d_mono_sprite (large_ase_missile_mask, dx, dy, MFD_COLOUR6);

  01719	b8 04 00 00 00	 mov	 eax, 4
  0171e	6b c8 05	 imul	 ecx, eax, 5
  01721	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01727	52		 push	 edx
  01728	51		 push	 ecx
  01729	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  01731	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01736	51		 push	 ecx
  01737	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  0173f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01744	68 00 00 00 00	 push	 OFFSET ?large_ase_missile_mask@@3PADA
  01749	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 6555 : 
; 6556 : 					draw_2d_mono_sprite (large_ase_missile, dx, dy, MFD_COLOUR1);

  0174e	b8 04 00 00 00	 mov	 eax, 4
  01753	6b c8 00	 imul	 ecx, eax, 0
  01756	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0175c	52		 push	 edx
  0175d	51		 push	 ecx
  0175e	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  01766	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0176b	51		 push	 ecx
  0176c	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  01774	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01779	68 00 00 00 00	 push	 OFFSET ?large_ase_missile@@3PADA
  0177e	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 6557 : 				}
; 6558 : 				else

  01783	eb 6a		 jmp	 SHORT $LN39@draw_aircr
$LN38@draw_aircr:

; 6559 : 				{
; 6560 : 					draw_2d_mono_sprite (small_ase_missile_mask, dx, dy, MFD_COLOUR6);

  01785	b8 04 00 00 00	 mov	 eax, 4
  0178a	6b c8 05	 imul	 ecx, eax, 5
  0178d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01793	52		 push	 edx
  01794	51		 push	 ecx
  01795	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  0179d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017a2	51		 push	 ecx
  017a3	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  017ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017b0	68 00 00 00 00	 push	 OFFSET ?small_ase_missile_mask@@3PADA
  017b5	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 6561 : 
; 6562 : 					draw_2d_mono_sprite (small_ase_missile, dx, dy, MFD_COLOUR1);

  017ba	b8 04 00 00 00	 mov	 eax, 4
  017bf	6b c8 00	 imul	 ecx, eax, 0
  017c2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  017c8	52		 push	 edx
  017c9	51		 push	 ecx
  017ca	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  017d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017d7	51		 push	 ecx
  017d8	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  017e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017e5	68 00 00 00 00	 push	 OFFSET ?small_ase_missile@@3PADA
  017ea	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN39@draw_aircr:

; 6563 : 				}
; 6564 : 			}
; 6565 : 
; 6566 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_TARGET);

  017ef	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  017f6	74 10		 je	 SHORT $LN223@draw_aircr
  017f8	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  017fe	8b 08		 mov	 ecx, DWORD PTR [eax]
  01800	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv814[ebp], ecx
  01806	eb 27		 jmp	 SHORT $LN224@draw_aircr
$LN223@draw_aircr:
  01808	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0180e	81 c2 f8 00 00
	00		 add	 edx, 248		; 000000f8H
  01814	52		 push	 edx
  01815	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0181a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0181f	50		 push	 eax
  01820	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01825	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv814[ebp], 0
$LN224@draw_aircr:
  0182f	b9 01 00 00 00	 mov	 ecx, 1
  01834	85 c9		 test	 ecx, ecx
  01836	74 0c		 je	 SHORT $LN225@draw_aircr
  01838	c7 85 98 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv822[ebp], 38 ; 00000026H
  01842	eb 27		 jmp	 SHORT $LN226@draw_aircr
$LN225@draw_aircr:
  01844	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0184a	81 c2 f8 00 00
	00		 add	 edx, 248		; 000000f8H
  01850	52		 push	 edx
  01851	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01856	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0185b	50		 push	 eax
  0185c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01861	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv822[ebp], 0
$LN226@draw_aircr:
  0186b	6a 26		 push	 38			; 00000026H
  0186d	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  01873	51		 push	 ecx
  01874	69 95 9c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv814[ebp], 180
  0187e	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv822[ebp]
  01884	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0188b	ff d1		 call	 ecx
  0188d	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 6567 : 		}

  01893	e9 ba fc ff ff	 jmp	 $LN12@draw_aircr
$LN13@draw_aircr:

; 6568 : 
; 6569 : 		set_2d_window_rotation (mfd_env, 0.0);

  01898	51		 push	 ecx
  01899	0f 57 c0	 xorps	 xmm0, xmm0
  0189c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  018a6	50		 push	 eax
  018a7	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 6570 : 	}
; 6571 : 
; 6572 : 	////////////////////////////////////////
; 6573 : 	//
; 6574 : 	// aircraft datum symbol
; 6575 : 	//
; 6576 : 	////////////////////////////////////////
; 6577 : 
; 6578 : 	if (draw_large_mfd)

  018ac	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  018b3	74 58		 je	 SHORT $LN40@draw_aircr

; 6579 : 	{
; 6580 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum_mask, 0.0, 0.0, MFD_COLOUR6);

  018b5	b8 04 00 00 00	 mov	 eax, 4
  018ba	6b c8 05	 imul	 ecx, eax, 5
  018bd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  018c3	52		 push	 edx
  018c4	51		 push	 ecx
  018c5	0f 57 c0	 xorps	 xmm0, xmm0
  018c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018cd	51		 push	 ecx
  018ce	0f 57 c0	 xorps	 xmm0, xmm0
  018d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018d6	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum_mask@@3PADA
  018db	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 6581 : 
; 6582 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum, 0.0, 0.0, MFD_COLOUR1);

  018e0	b8 04 00 00 00	 mov	 eax, 4
  018e5	6b c8 00	 imul	 ecx, eax, 0
  018e8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  018ee	52		 push	 edx
  018ef	51		 push	 ecx
  018f0	0f 57 c0	 xorps	 xmm0, xmm0
  018f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018f8	51		 push	 ecx
  018f9	0f 57 c0	 xorps	 xmm0, xmm0
  018fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01901	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum@@3PADA
  01906	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 6583 : 	}
; 6584 : 	else

  0190b	eb 56		 jmp	 SHORT $LN41@draw_aircr
$LN40@draw_aircr:

; 6585 : 	{
; 6586 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum_mask, 0.0, 0.0, MFD_COLOUR6);

  0190d	b8 04 00 00 00	 mov	 eax, 4
  01912	6b c8 05	 imul	 ecx, eax, 5
  01915	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0191b	52		 push	 edx
  0191c	51		 push	 ecx
  0191d	0f 57 c0	 xorps	 xmm0, xmm0
  01920	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01925	51		 push	 ecx
  01926	0f 57 c0	 xorps	 xmm0, xmm0
  01929	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0192e	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum_mask@@3PADA
  01933	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 6587 : 
; 6588 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum, 0.0, 0.0, MFD_COLOUR1);

  01938	b8 04 00 00 00	 mov	 eax, 4
  0193d	6b c8 00	 imul	 ecx, eax, 0
  01940	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01946	52		 push	 edx
  01947	51		 push	 ecx
  01948	0f 57 c0	 xorps	 xmm0, xmm0
  0194b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01950	51		 push	 ecx
  01951	0f 57 c0	 xorps	 xmm0, xmm0
  01954	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01959	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum@@3PADA
  0195e	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN41@draw_aircr:

; 6589 : 	}
; 6590 : 
; 6591 : 	set_mono_font_colour (MFD_COLOUR1);

  01963	b8 04 00 00 00	 mov	 eax, 4
  01968	6b c8 00	 imul	 ecx, eax, 0
  0196b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01971	52		 push	 edx
  01972	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 6592 : 
; 6593 : 	if (draw_large_mfd)

  01977	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0197e	74 09		 je	 SHORT $LN42@draw_aircr

; 6594 : 	{
; 6595 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  01980	6a 05		 push	 5
  01982	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 6596 : 	}
; 6597 : 	else

  01987	eb 07		 jmp	 SHORT $LN43@draw_aircr
$LN42@draw_aircr:

; 6598 : 	{
; 6599 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  01989	6a 01		 push	 1
  0198b	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN43@draw_aircr:

; 6600 : 	}
; 6601 : 
; 6602 : 	////////////////////////////////////////
; 6603 : 	//
; 6604 : 	// text
; 6605 : 	//
; 6606 : 	////////////////////////////////////////
; 6607 : 
; 6608 : 	//
; 6609 : 	// closest incoming missile
; 6610 : 	//
; 6611 : 
; 6612 : 	{
; 6613 : 		entity
; 6614 : 			*closest_missile;
; 6615 : 
; 6616 : 		float
; 6617 : 			time_to_impact;
; 6618 : 
; 6619 : 		if (draw_large_mfd)

  01990	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01997	74 12		 je	 SHORT $LN44@draw_aircr

; 6620 : 		{
; 6621 : 			y_adjust = 5.0;

  01999	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  019a1	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6622 : 		}
; 6623 : 		else

  019a9	eb 10		 jmp	 SHORT $LN45@draw_aircr
$LN44@draw_aircr:

; 6624 : 		{
; 6625 : 			y_adjust = 2.0;

  019ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  019b3	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN45@draw_aircr:

; 6626 : 		}
; 6627 : 
; 6628 : 		closest_missile = get_closest_missile (source, source_position, THREAT_TYPE_IR_MISSILE, &time_to_impact);

  019bb	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _time_to_impact$1[ebp]
  019c1	50		 push	 eax
  019c2	6a 02		 push	 2
  019c4	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  019ca	51		 push	 ecx
  019cb	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  019d1	52		 push	 edx
  019d2	e8 00 00 00 00	 call	 ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ; get_closest_missile
  019d7	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _closest_missile$2[ebp], eax

; 6629 : 
; 6630 : 		if (closest_missile)

  019dd	83 bd e4 fe ff
	ff 00		 cmp	 DWORD PTR _closest_missile$2[ebp], 0
  019e4	0f 84 b5 00 00
	00		 je	 $LN48@draw_aircr

; 6631 : 		{
; 6632 : 			set_2d_mono_font_position (-1.0, 1.0);

  019ea	51		 push	 ecx
  019eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  019f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019f8	51		 push	 ecx
  019f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01a01	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a06	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6633 : 
; 6634 : 			set_mono_font_rel_position (1.0, y_adjust);

  01a0b	51		 push	 ecx
  01a0c	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01a14	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a19	51		 push	 ecx
  01a1a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01a22	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a27	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6635 : 
; 6636 : 			sprintf (buffer, "IR MSL:%.1f", time_to_impact);

  01a2c	f3 0f 5a 85 e0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _time_to_impact$1[ebp]
  01a34	83 ec 08	 sub	 esp, 8
  01a37	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01a3c	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@
  01a41	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01a47	50		 push	 eax
  01a48	e8 00 00 00 00	 call	 _sprintf
  01a4d	83 c4 10	 add	 esp, 16			; 00000010H

; 6637 : 
; 6638 : 			print_mono_font_string (buffer);

  01a50	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01a56	50		 push	 eax
  01a57	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6639 : 
; 6640 : 			if (draw_large_mfd)

  01a5c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01a63	74 1e		 je	 SHORT $LN47@draw_aircr

; 6641 : 			{
; 6642 : 				y_adjust += 13.0;

  01a65	f3 0f 5a 85 20
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01a6d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@402a000000000000
  01a75	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a79	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6643 : 			}
; 6644 : 			else

  01a81	eb 1c		 jmp	 SHORT $LN48@draw_aircr
$LN47@draw_aircr:

; 6645 : 			{
; 6646 : 				y_adjust += 7.0;

  01a83	f3 0f 5a 85 20
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01a8b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401c000000000000
  01a93	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a97	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN48@draw_aircr:

; 6647 : 			}
; 6648 : 		}
; 6649 : 
; 6650 : 		closest_missile = get_closest_missile (source, source_position, THREAT_TYPE_RF_MISSILE, &time_to_impact);

  01a9f	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _time_to_impact$1[ebp]
  01aa5	50		 push	 eax
  01aa6	6a 01		 push	 1
  01aa8	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01aae	51		 push	 ecx
  01aaf	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01ab5	52		 push	 edx
  01ab6	e8 00 00 00 00	 call	 ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ; get_closest_missile
  01abb	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _closest_missile$2[ebp], eax

; 6651 : 
; 6652 : 		if (closest_missile)

  01ac1	83 bd e4 fe ff
	ff 00		 cmp	 DWORD PTR _closest_missile$2[ebp], 0
  01ac8	0f 84 b5 00 00
	00		 je	 $LN51@draw_aircr

; 6653 : 		{
; 6654 : 			set_2d_mono_font_position (-1.0, 1.0);

  01ace	51		 push	 ecx
  01acf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01ad7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01adc	51		 push	 ecx
  01add	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01ae5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aea	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6655 : 
; 6656 : 			set_mono_font_rel_position (1.0, y_adjust);

  01aef	51		 push	 ecx
  01af0	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01af8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01afd	51		 push	 ecx
  01afe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01b06	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b0b	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6657 : 
; 6658 : 			sprintf (buffer, "RF MSL:%.1f", time_to_impact);

  01b10	f3 0f 5a 85 e0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _time_to_impact$1[ebp]
  01b18	83 ec 08	 sub	 esp, 8
  01b1b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01b20	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@
  01b25	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01b2b	50		 push	 eax
  01b2c	e8 00 00 00 00	 call	 _sprintf
  01b31	83 c4 10	 add	 esp, 16			; 00000010H

; 6659 : 
; 6660 : 			print_mono_font_string (buffer);

  01b34	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01b3a	50		 push	 eax
  01b3b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6661 : 
; 6662 : 			if (draw_large_mfd)

  01b40	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01b47	74 1e		 je	 SHORT $LN50@draw_aircr

; 6663 : 			{
; 6664 : 				y_adjust += 13.0;

  01b49	f3 0f 5a 85 20
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01b51	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@402a000000000000
  01b59	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b5d	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6665 : 			}
; 6666 : 			else

  01b65	eb 1c		 jmp	 SHORT $LN51@draw_aircr
$LN50@draw_aircr:

; 6667 : 			{
; 6668 : 				y_adjust += 7.0;

  01b67	f3 0f 5a 85 20
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01b6f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401c000000000000
  01b77	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b7b	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN51@draw_aircr:

; 6669 : 			}
; 6670 : 		}
; 6671 : 
; 6672 : 		closest_missile = get_closest_missile (source, source_position, THREAT_TYPE_LASER_MISSILE, &time_to_impact);

  01b83	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _time_to_impact$1[ebp]
  01b89	50		 push	 eax
  01b8a	6a 03		 push	 3
  01b8c	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01b92	51		 push	 ecx
  01b93	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01b99	52		 push	 edx
  01b9a	e8 00 00 00 00	 call	 ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ; get_closest_missile
  01b9f	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _closest_missile$2[ebp], eax

; 6673 : 
; 6674 : 		if (closest_missile)

  01ba5	83 bd e4 fe ff
	ff 00		 cmp	 DWORD PTR _closest_missile$2[ebp], 0
  01bac	74 72		 je	 SHORT $LN52@draw_aircr

; 6675 : 		{
; 6676 : 			set_2d_mono_font_position (-1.0, 1.0);

  01bae	51		 push	 ecx
  01baf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01bb7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bbc	51		 push	 ecx
  01bbd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01bc5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bca	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6677 : 
; 6678 : 			set_mono_font_rel_position (1.0, y_adjust);

  01bcf	51		 push	 ecx
  01bd0	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01bd8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bdd	51		 push	 ecx
  01bde	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01be6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01beb	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6679 : 
; 6680 : 			sprintf (buffer, "LS MSL:%.1f", time_to_impact);

  01bf0	f3 0f 5a 85 e0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _time_to_impact$1[ebp]
  01bf8	83 ec 08	 sub	 esp, 8
  01bfb	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01c00	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@
  01c05	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01c0b	50		 push	 eax
  01c0c	e8 00 00 00 00	 call	 _sprintf
  01c11	83 c4 10	 add	 esp, 16			; 00000010H

; 6681 : 
; 6682 : 			print_mono_font_string (buffer);

  01c14	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01c1a	50		 push	 eax
  01c1b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN52@draw_aircr:

; 6683 : 		}
; 6684 : 	}
; 6685 : 
; 6686 : 	//
; 6687 : 	// ASE range
; 6688 : 	//
; 6689 : 
; 6690 : 	if (tsd_ase_range == TSD_ASE_RANGE_2000)

  01c20	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  01c28	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  01c2f	9f		 lahf
  01c30	f6 c4 44	 test	 ah, 68			; 00000044H
  01c33	7a 09		 jp	 SHORT $LN53@draw_aircr

; 6691 : 	{
; 6692 : 		s = "2Km";

  01c35	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03CIAFGHAC@2Km@
  01c3c	eb 61		 jmp	 SHORT $LN60@draw_aircr
$LN53@draw_aircr:

; 6693 : 	}
; 6694 : 	else if (tsd_ase_range == TSD_ASE_RANGE_5000)

  01c3e	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  01c46	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  01c4d	9f		 lahf
  01c4e	f6 c4 44	 test	 ah, 68			; 00000044H
  01c51	7a 09		 jp	 SHORT $LN55@draw_aircr

; 6695 : 	{
; 6696 : 		s = "5Km";

  01c53	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03LFNCFPLL@5Km@
  01c5a	eb 43		 jmp	 SHORT $LN60@draw_aircr
$LN55@draw_aircr:

; 6697 : 	}
; 6698 : 	else if (tsd_ase_range == TSD_ASE_RANGE_10000)

  01c5c	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  01c64	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  01c6b	9f		 lahf
  01c6c	f6 c4 44	 test	 ah, 68			; 00000044H
  01c6f	7a 09		 jp	 SHORT $LN57@draw_aircr

; 6699 : 	{
; 6700 : 		s = "10Km";

  01c71	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04PJCLBGLO@10Km@
  01c78	eb 25		 jmp	 SHORT $LN60@draw_aircr
$LN57@draw_aircr:

; 6701 : 	}
; 6702 : 	else if (tsd_ase_range == TSD_ASE_RANGE_25000)

  01c7a	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  01c82	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  01c89	9f		 lahf
  01c8a	f6 c4 44	 test	 ah, 68			; 00000044H
  01c8d	7a 09		 jp	 SHORT $LN59@draw_aircr

; 6703 : 	{
; 6704 : 		s = "25Km";

  01c8f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04IJFFJMFM@25Km@

; 6705 : 	}
; 6706 : 	else

  01c96	eb 07		 jmp	 SHORT $LN60@draw_aircr
$LN59@draw_aircr:

; 6707 : 	{
; 6708 : 		s = "XXX";

  01c98	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN60@draw_aircr:

; 6709 : 	}
; 6710 : 
; 6711 : 	width = get_mono_font_string_width (s);

  01c9f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  01ca2	50		 push	 eax
  01ca3	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01ca8	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 6712 : 
; 6713 : 	if (draw_large_mfd)

  01cae	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01cb5	74 2e		 je	 SHORT $LN61@draw_aircr

; 6714 : 	{
; 6715 : 		width += 2.0;

  01cb7	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  01cbf	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01cc7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01ccb	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 6716 : 
; 6717 : 		y_adjust = 5.0;

  01cd3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  01cdb	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6718 : 	}
; 6719 : 	else

  01ce3	eb 2c		 jmp	 SHORT $LN62@draw_aircr
$LN61@draw_aircr:

; 6720 : 	{
; 6721 : 		width += 1.0;

  01ce5	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  01ced	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  01cf5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01cf9	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 6722 : 
; 6723 : 		y_adjust = 2.0;

  01d01	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  01d09	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN62@draw_aircr:

; 6724 : 	}
; 6725 : 
; 6726 : 	set_2d_mono_font_position (1.0, 1.0);

  01d11	51		 push	 ecx
  01d12	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01d1a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d1f	51		 push	 ecx
  01d20	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01d28	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d2d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6727 : 
; 6728 : 	set_mono_font_rel_position (-width, y_adjust);

  01d32	51		 push	 ecx
  01d33	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01d3b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d40	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  01d48	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01d4f	51		 push	 ecx
  01d50	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d55	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6729 : 
; 6730 : 	print_mono_font_string (s);

  01d5a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  01d5d	50		 push	 eax
  01d5e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6731 : 
; 6732 : 	//
; 6733 : 	// jammers
; 6734 : 	//
; 6735 : 
; 6736 : 	if (draw_large_mfd)

  01d63	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01d6a	0f 84 d2 00 00
	00		 je	 $LN63@draw_aircr

; 6737 : 	{
; 6738 : 		if (comanche_damage.infra_red_jammer)

  01d70	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  01d75	c1 e8 06	 shr	 eax, 6
  01d78	83 e0 01	 and	 eax, 1
  01d7b	74 0c		 je	 SHORT $LN65@draw_aircr

; 6739 : 		{
; 6740 : 			s = "IR JAM XXX";

  01d7d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@DADPKEOI@IR?5JAM?5XXX@

; 6741 : 		}
; 6742 : 		else

  01d84	e9 a4 00 00 00	 jmp	 $LN68@draw_aircr
$LN65@draw_aircr:

; 6743 : 		{
; 6744 : 			if (get_local_entity_int_value (source, INT_TYPE_INFRA_RED_JAMMER_ON))

  01d89	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01d90	74 10		 je	 SHORT $LN227@draw_aircr
  01d92	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01d98	8b 08		 mov	 ecx, DWORD PTR [eax]
  01d9a	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv981[ebp], ecx
  01da0	eb 20		 jmp	 SHORT $LN228@draw_aircr
$LN227@draw_aircr:
  01da2	68 58 1a 00 00	 push	 6744			; 00001a58H
  01da7	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01dac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01db2	52		 push	 edx
  01db3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01db8	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv981[ebp], 0
$LN228@draw_aircr:
  01dc2	b8 01 00 00 00	 mov	 eax, 1
  01dc7	85 c0		 test	 eax, eax
  01dc9	74 0c		 je	 SHORT $LN229@draw_aircr
  01dcb	c7 85 98 fe ff
	ff 68 00 00 00	 mov	 DWORD PTR tv988[ebp], 104 ; 00000068H
  01dd5	eb 20		 jmp	 SHORT $LN230@draw_aircr
$LN229@draw_aircr:
  01dd7	68 58 1a 00 00	 push	 6744			; 00001a58H
  01ddc	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01de1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01de7	51		 push	 ecx
  01de8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01ded	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv988[ebp], 0
$LN230@draw_aircr:
  01df7	6a 68		 push	 104			; 00000068H
  01df9	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01dff	52		 push	 edx
  01e00	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv981[ebp], 1116
  01e0a	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv988[ebp]
  01e10	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01e17	ff d2		 call	 edx
  01e19	85 c0		 test	 eax, eax
  01e1b	74 09		 je	 SHORT $LN67@draw_aircr

; 6745 : 			{
; 6746 : 				s = "IR JAM ON";

  01e1d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_09OKBKNIAL@IR?5JAM?5ON@

; 6747 : 			}
; 6748 : 			else

  01e24	eb 07		 jmp	 SHORT $LN68@draw_aircr
$LN67@draw_aircr:

; 6749 : 			{
; 6750 : 				s = "IR JAM OFF";

  01e26	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@
$LN68@draw_aircr:

; 6751 : 			}
; 6752 : 		}
; 6753 : 
; 6754 : 		y_adjust = -25.0;

  01e2d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  01e35	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6755 : 	}
; 6756 : 	else

  01e3d	e9 cd 00 00 00	 jmp	 $LN64@draw_aircr
$LN63@draw_aircr:

; 6757 : 	{
; 6758 : 		if (comanche_damage.infra_red_jammer)

  01e42	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  01e47	c1 e8 06	 shr	 eax, 6
  01e4a	83 e0 01	 and	 eax, 1
  01e4d	74 0c		 je	 SHORT $LN69@draw_aircr

; 6759 : 		{
; 6760 : 			s = "IR XXX";

  01e4f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06CNPDBJMK@IR?5XXX@

; 6761 : 		}
; 6762 : 		else

  01e56	e9 a4 00 00 00	 jmp	 $LN72@draw_aircr
$LN69@draw_aircr:

; 6763 : 		{
; 6764 : 			if (get_local_entity_int_value (source, INT_TYPE_INFRA_RED_JAMMER_ON))

  01e5b	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01e62	74 10		 je	 SHORT $LN231@draw_aircr
  01e64	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01e6a	8b 08		 mov	 ecx, DWORD PTR [eax]
  01e6c	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv1003[ebp], ecx
  01e72	eb 20		 jmp	 SHORT $LN232@draw_aircr
$LN231@draw_aircr:
  01e74	68 6c 1a 00 00	 push	 6764			; 00001a6cH
  01e79	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01e7e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01e84	52		 push	 edx
  01e85	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01e8a	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1003[ebp], 0
$LN232@draw_aircr:
  01e94	b8 01 00 00 00	 mov	 eax, 1
  01e99	85 c0		 test	 eax, eax
  01e9b	74 0c		 je	 SHORT $LN233@draw_aircr
  01e9d	c7 85 98 fe ff
	ff 68 00 00 00	 mov	 DWORD PTR tv1010[ebp], 104 ; 00000068H
  01ea7	eb 20		 jmp	 SHORT $LN234@draw_aircr
$LN233@draw_aircr:
  01ea9	68 6c 1a 00 00	 push	 6764			; 00001a6cH
  01eae	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01eb3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01eb9	51		 push	 ecx
  01eba	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01ebf	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1010[ebp], 0
$LN234@draw_aircr:
  01ec9	6a 68		 push	 104			; 00000068H
  01ecb	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01ed1	52		 push	 edx
  01ed2	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1003[ebp], 1116
  01edc	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv1010[ebp]
  01ee2	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01ee9	ff d2		 call	 edx
  01eeb	85 c0		 test	 eax, eax
  01eed	74 09		 je	 SHORT $LN71@draw_aircr

; 6765 : 			{
; 6766 : 				s = "IR ON";

  01eef	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_05JBLHJOBL@IR?5ON@

; 6767 : 			}
; 6768 : 			else

  01ef6	eb 07		 jmp	 SHORT $LN72@draw_aircr
$LN71@draw_aircr:

; 6769 : 			{
; 6770 : 				s = "IR OFF";

  01ef8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06CCMEMHEJ@IR?5OFF@
$LN72@draw_aircr:

; 6771 : 			}
; 6772 : 		}
; 6773 : 
; 6774 : 		y_adjust = -12.0;

  01eff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  01f07	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN64@draw_aircr:

; 6775 : 	}
; 6776 : 
; 6777 : 	set_2d_mono_font_position (-1.0, -1.0);

  01f0f	51		 push	 ecx
  01f10	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01f18	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f1d	51		 push	 ecx
  01f1e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01f26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f2b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6778 : 
; 6779 : 	set_mono_font_rel_position (1.0, y_adjust);

  01f30	51		 push	 ecx
  01f31	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01f39	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f3e	51		 push	 ecx
  01f3f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01f47	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f4c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6780 : 
; 6781 : 	print_mono_font_string (s);

  01f51	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  01f54	50		 push	 eax
  01f55	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6782 : 
; 6783 : 	if (draw_large_mfd)

  01f5a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01f61	0f 84 d5 00 00
	00		 je	 $LN73@draw_aircr

; 6784 : 	{
; 6785 : 		if (comanche_damage.radar_jammer)

  01f67	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  01f6c	c1 e8 05	 shr	 eax, 5
  01f6f	83 e0 01	 and	 eax, 1
  01f72	74 0c		 je	 SHORT $LN75@draw_aircr

; 6786 : 		{
; 6787 : 			s = "RD JAM XXX";

  01f74	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@

; 6788 : 		}
; 6789 : 		else

  01f7b	e9 a7 00 00 00	 jmp	 $LN78@draw_aircr
$LN75@draw_aircr:

; 6790 : 		{
; 6791 : 			if (get_local_entity_int_value (source, INT_TYPE_RADAR_JAMMER_ON))

  01f80	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01f87	74 10		 je	 SHORT $LN235@draw_aircr
  01f89	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01f8f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01f91	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv1031[ebp], ecx
  01f97	eb 20		 jmp	 SHORT $LN236@draw_aircr
$LN235@draw_aircr:
  01f99	68 87 1a 00 00	 push	 6791			; 00001a87H
  01f9e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01fa3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01fa9	52		 push	 edx
  01faa	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01faf	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1031[ebp], 0
$LN236@draw_aircr:
  01fb9	b8 01 00 00 00	 mov	 eax, 1
  01fbe	85 c0		 test	 eax, eax
  01fc0	74 0c		 je	 SHORT $LN237@draw_aircr
  01fc2	c7 85 98 fe ff
	ff a8 00 00 00	 mov	 DWORD PTR tv1038[ebp], 168 ; 000000a8H
  01fcc	eb 20		 jmp	 SHORT $LN238@draw_aircr
$LN237@draw_aircr:
  01fce	68 87 1a 00 00	 push	 6791			; 00001a87H
  01fd3	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01fd8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01fde	51		 push	 ecx
  01fdf	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01fe4	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1038[ebp], 0
$LN238@draw_aircr:
  01fee	68 a8 00 00 00	 push	 168			; 000000a8H
  01ff3	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01ff9	52		 push	 edx
  01ffa	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1031[ebp], 1116
  02004	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv1038[ebp]
  0200a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  02011	ff d2		 call	 edx
  02013	85 c0		 test	 eax, eax
  02015	74 09		 je	 SHORT $LN77@draw_aircr

; 6792 : 			{
; 6793 : 				s = "RD JAM ON";

  02017	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_09OKIOJJOP@RD?5JAM?5ON@

; 6794 : 			}
; 6795 : 			else

  0201e	eb 07		 jmp	 SHORT $LN78@draw_aircr
$LN77@draw_aircr:

; 6796 : 			{
; 6797 : 				s = "RD JAM OFF";

  02020	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@
$LN78@draw_aircr:

; 6798 : 			}
; 6799 : 		}
; 6800 : 
; 6801 : 		y_adjust = -12.0;

  02027	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  0202f	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6802 : 	}
; 6803 : 	else

  02037	e9 d0 00 00 00	 jmp	 $LN74@draw_aircr
$LN73@draw_aircr:

; 6804 : 	{
; 6805 : 		if (comanche_damage.radar_jammer)

  0203c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  02041	c1 e8 05	 shr	 eax, 5
  02044	83 e0 01	 and	 eax, 1
  02047	74 0c		 je	 SHORT $LN79@draw_aircr

; 6806 : 		{
; 6807 : 			s = "RD XXX";

  02049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06JNKFDAHI@RD?5XXX@

; 6808 : 		}
; 6809 : 		else

  02050	e9 a7 00 00 00	 jmp	 $LN82@draw_aircr
$LN79@draw_aircr:

; 6810 : 		{
; 6811 : 			if (get_local_entity_int_value (source, INT_TYPE_RADAR_JAMMER_ON))

  02055	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0205c	74 10		 je	 SHORT $LN239@draw_aircr
  0205e	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  02064	8b 08		 mov	 ecx, DWORD PTR [eax]
  02066	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv1053[ebp], ecx
  0206c	eb 20		 jmp	 SHORT $LN240@draw_aircr
$LN239@draw_aircr:
  0206e	68 9b 1a 00 00	 push	 6811			; 00001a9bH
  02073	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  02078	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0207e	52		 push	 edx
  0207f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02084	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1053[ebp], 0
$LN240@draw_aircr:
  0208e	b8 01 00 00 00	 mov	 eax, 1
  02093	85 c0		 test	 eax, eax
  02095	74 0c		 je	 SHORT $LN241@draw_aircr
  02097	c7 85 98 fe ff
	ff a8 00 00 00	 mov	 DWORD PTR tv1060[ebp], 168 ; 000000a8H
  020a1	eb 20		 jmp	 SHORT $LN242@draw_aircr
$LN241@draw_aircr:
  020a3	68 9b 1a 00 00	 push	 6811			; 00001a9bH
  020a8	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  020ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  020b3	51		 push	 ecx
  020b4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  020b9	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1060[ebp], 0
$LN242@draw_aircr:
  020c3	68 a8 00 00 00	 push	 168			; 000000a8H
  020c8	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  020ce	52		 push	 edx
  020cf	69 85 9c fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1053[ebp], 1116
  020d9	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv1060[ebp]
  020df	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  020e6	ff d2		 call	 edx
  020e8	85 c0		 test	 eax, eax
  020ea	74 09		 je	 SHORT $LN81@draw_aircr

; 6812 : 			{
; 6813 : 				s = "RD ON";

  020ec	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_05BHAGAOGB@RD?5ON@

; 6814 : 			}
; 6815 : 			else

  020f3	eb 07		 jmp	 SHORT $LN82@draw_aircr
$LN81@draw_aircr:

; 6816 : 			{
; 6817 : 				s = "RD OFF";

  020f5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06JCJCOOPL@RD?5OFF@
$LN82@draw_aircr:

; 6818 : 			}
; 6819 : 		}
; 6820 : 
; 6821 : 		y_adjust = -5.0;

  020fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  02104	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN74@draw_aircr:

; 6822 : 	}
; 6823 : 
; 6824 : 	set_2d_mono_font_position (-1.0, -1.0);

  0210c	51		 push	 ecx
  0210d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02115	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0211a	51		 push	 ecx
  0211b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02123	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02128	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6825 : 
; 6826 : 	set_mono_font_rel_position (1.0, y_adjust);

  0212d	51		 push	 ecx
  0212e	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02136	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0213b	51		 push	 ecx
  0213c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02144	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02149	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6827 : 
; 6828 : 	print_mono_font_string (s);

  0214e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02151	50		 push	 eax
  02152	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6829 : 
; 6830 : 	//
; 6831 : 	// auto-countermeasures
; 6832 : 	//
; 6833 : 
; 6834 : 	if (get_global_auto_counter_measures ())

  02157	83 3d 90 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+144, 0
  0215e	0f 84 16 01 00
	00		 je	 $LN83@draw_aircr

; 6835 : 	{
; 6836 : 		s = "AUTO";

  02164	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04LMMJFDCN@AUTO@

; 6837 : 
; 6838 : 		width = get_mono_font_string_width (s);

  0216b	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0216e	50		 push	 eax
  0216f	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02174	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 6839 : 
; 6840 : 		if (draw_large_mfd)

  0217a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02181	74 2e		 je	 SHORT $LN84@draw_aircr

; 6841 : 		{
; 6842 : 			width += 2.0;

  02183	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  0218b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02193	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02197	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 6843 : 
; 6844 : 			y_adjust = -38.0;

  0219f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2180000
  021a7	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6845 : 		}
; 6846 : 		else

  021af	eb 2c		 jmp	 SHORT $LN85@draw_aircr
$LN84@draw_aircr:

; 6847 : 		{
; 6848 : 			width += 1.0;

  021b1	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  021b9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  021c1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  021c5	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 6849 : 
; 6850 : 			y_adjust = -19.0;

  021cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1980000
  021d5	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN85@draw_aircr:

; 6851 : 		}
; 6852 : 
; 6853 : 		set_2d_mono_font_position (-1.0, -1.0);

  021dd	51		 push	 ecx
  021de	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  021e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021eb	51		 push	 ecx
  021ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  021f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021f9	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6854 : 
; 6855 : 		set_mono_font_rel_position (1.0, y_adjust);

  021fe	51		 push	 ecx
  021ff	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02207	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0220c	51		 push	 ecx
  0220d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02215	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0221a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6856 : 
; 6857 : 		print_mono_font_string (s);

  0221f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02222	50		 push	 eax
  02223	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6858 : 
; 6859 : 		set_2d_mono_font_position (1.0, -1.0);

  02228	51		 push	 ecx
  02229	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02231	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02236	51		 push	 ecx
  02237	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0223f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02244	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6860 : 
; 6861 : 		set_mono_font_rel_position (-width, y_adjust);

  02249	51		 push	 ecx
  0224a	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02252	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02257	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  0225f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  02266	51		 push	 ecx
  02267	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0226c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6862 : 
; 6863 : 		print_mono_font_string (s);

  02271	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02274	50		 push	 eax
  02275	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN83@draw_aircr:

; 6864 : 	}
; 6865 : 
; 6866 : 	//
; 6867 : 	// chaff
; 6868 : 	//
; 6869 : 
; 6870 : 	if (draw_large_mfd)

  0227a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02281	0f 84 89 00 00
	00		 je	 $LN86@draw_aircr

; 6871 : 	{
; 6872 : 		if (comanche_damage.chaff_dispensers)

  02287	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  0228c	c1 e8 1e	 shr	 eax, 30			; 0000001eH
  0228f	83 e0 01	 and	 eax, 1
  02292	74 16		 je	 SHORT $LN88@draw_aircr

; 6873 : 		{
; 6874 : 			sprintf (buffer, "CHAFF:XX");

  02294	68 00 00 00 00	 push	 OFFSET ??_C@_08GHAEIHAP@CHAFF?3XX@
  02299	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0229f	50		 push	 eax
  022a0	e8 00 00 00 00	 call	 _sprintf
  022a5	83 c4 08	 add	 esp, 8

; 6875 : 		}
; 6876 : 		else

  022a8	eb 23		 jmp	 SHORT $LN89@draw_aircr
$LN88@draw_aircr:

; 6877 : 		{
; 6878 : 			sprintf (buffer, "CHAFF:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_CHAFF));

  022aa	6a 43		 push	 67			; 00000043H
  022ac	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  022b2	50		 push	 eax
  022b3	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  022b8	50		 push	 eax
  022b9	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@
  022be	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  022c4	51		 push	 ecx
  022c5	e8 00 00 00 00	 call	 _sprintf
  022ca	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN89@draw_aircr:

; 6879 : 		}
; 6880 : 
; 6881 : 		width = get_mono_font_string_width (buffer);

  022cd	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  022d3	50		 push	 eax
  022d4	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  022d9	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 6882 : 
; 6883 : 		width += 2.0;

  022df	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  022e7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  022ef	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  022f3	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 6884 : 
; 6885 : 		y_adjust = -25.0;

  022fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  02303	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6886 : 	}
; 6887 : 	else

  0230b	e9 84 00 00 00	 jmp	 $LN87@draw_aircr
$LN86@draw_aircr:

; 6888 : 	{
; 6889 : 		if (comanche_damage.chaff_dispensers)

  02310	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  02315	c1 e8 1e	 shr	 eax, 30			; 0000001eH
  02318	83 e0 01	 and	 eax, 1
  0231b	74 16		 je	 SHORT $LN90@draw_aircr

; 6890 : 		{
; 6891 : 			sprintf (buffer, "C:XX");

  0231d	68 00 00 00 00	 push	 OFFSET ??_C@_04KJNFJKOK@C?3XX@
  02322	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02328	50		 push	 eax
  02329	e8 00 00 00 00	 call	 _sprintf
  0232e	83 c4 08	 add	 esp, 8

; 6892 : 		}
; 6893 : 		else

  02331	eb 23		 jmp	 SHORT $LN91@draw_aircr
$LN90@draw_aircr:

; 6894 : 		{
; 6895 : 			sprintf (buffer, "C:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_CHAFF));

  02333	6a 43		 push	 67			; 00000043H
  02335	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0233b	50		 push	 eax
  0233c	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  02341	50		 push	 eax
  02342	68 00 00 00 00	 push	 OFFSET ??_C@_06GNOFKMCG@C?3?$CF02d@
  02347	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0234d	51		 push	 ecx
  0234e	e8 00 00 00 00	 call	 _sprintf
  02353	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN91@draw_aircr:

; 6896 : 		}
; 6897 : 
; 6898 : 		width = get_mono_font_string_width (buffer);

  02356	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0235c	50		 push	 eax
  0235d	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02362	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 6899 : 
; 6900 : 		width += 1.0;

  02368	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  02370	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02378	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0237c	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 6901 : 
; 6902 : 		y_adjust = -12.0;

  02384	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  0238c	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN87@draw_aircr:

; 6903 : 	}
; 6904 : 
; 6905 : 	set_2d_mono_font_position (1.0, -1.0);

  02394	51		 push	 ecx
  02395	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0239d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023a2	51		 push	 ecx
  023a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  023ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023b0	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6906 : 
; 6907 : 	set_mono_font_rel_position (-width, y_adjust);

  023b5	51		 push	 ecx
  023b6	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  023be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023c3	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  023cb	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  023d2	51		 push	 ecx
  023d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023d8	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6908 : 
; 6909 : 	print_mono_font_string (buffer);

  023dd	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  023e3	50		 push	 eax
  023e4	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6910 : 
; 6911 : 	//
; 6912 : 	// flares
; 6913 : 	//
; 6914 : 
; 6915 : 	if (draw_large_mfd)

  023e9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  023f0	0f 84 89 00 00
	00		 je	 $LN92@draw_aircr

; 6916 : 	{
; 6917 : 		if (comanche_damage.flare_dispensers)

  023f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  023fb	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  023fe	83 e0 01	 and	 eax, 1
  02401	74 16		 je	 SHORT $LN94@draw_aircr

; 6918 : 		{
; 6919 : 			sprintf (buffer, "FLARE:XX");

  02403	68 00 00 00 00	 push	 OFFSET ??_C@_08HGDOPGOH@FLARE?3XX@
  02408	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0240e	50		 push	 eax
  0240f	e8 00 00 00 00	 call	 _sprintf
  02414	83 c4 08	 add	 esp, 8

; 6920 : 		}
; 6921 : 		else

  02417	eb 23		 jmp	 SHORT $LN95@draw_aircr
$LN94@draw_aircr:

; 6922 : 		{
; 6923 : 			sprintf (buffer, "FLARE:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_FLARE));

  02419	6a 44		 push	 68			; 00000044H
  0241b	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  02421	50		 push	 eax
  02422	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  02427	50		 push	 eax
  02428	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@
  0242d	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  02433	51		 push	 ecx
  02434	e8 00 00 00 00	 call	 _sprintf
  02439	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN95@draw_aircr:

; 6924 : 		}
; 6925 : 
; 6926 : 		width = get_mono_font_string_width (buffer);

  0243c	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02442	50		 push	 eax
  02443	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02448	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 6927 : 
; 6928 : 		width += 2.0;

  0244e	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  02456	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0245e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02462	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 6929 : 
; 6930 : 		y_adjust = -12.0;

  0246a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  02472	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6931 : 	}
; 6932 : 	else

  0247a	e9 84 00 00 00	 jmp	 $LN93@draw_aircr
$LN92@draw_aircr:

; 6933 : 	{
; 6934 : 		if (comanche_damage.flare_dispensers)

  0247f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  02484	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02487	83 e0 01	 and	 eax, 1
  0248a	74 16		 je	 SHORT $LN96@draw_aircr

; 6935 : 		{
; 6936 : 			sprintf (buffer, "F:XX");

  0248c	68 00 00 00 00	 push	 OFFSET ??_C@_04GBDFBFJK@F?3XX@
  02491	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02497	50		 push	 eax
  02498	e8 00 00 00 00	 call	 _sprintf
  0249d	83 c4 08	 add	 esp, 8

; 6937 : 		}
; 6938 : 		else

  024a0	eb 23		 jmp	 SHORT $LN97@draw_aircr
$LN96@draw_aircr:

; 6939 : 		{
; 6940 : 			sprintf (buffer, "F:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_FLARE));

  024a2	6a 44		 push	 68			; 00000044H
  024a4	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  024aa	50		 push	 eax
  024ab	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  024b0	50		 push	 eax
  024b1	68 00 00 00 00	 push	 OFFSET ??_C@_06DPNNIDIB@F?3?$CF02d@
  024b6	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  024bc	51		 push	 ecx
  024bd	e8 00 00 00 00	 call	 _sprintf
  024c2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN97@draw_aircr:

; 6941 : 		}
; 6942 : 
; 6943 : 		width = get_mono_font_string_width (buffer);

  024c5	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  024cb	50		 push	 eax
  024cc	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  024d1	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 6944 : 
; 6945 : 		width += 1.0;

  024d7	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  024df	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  024e7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  024eb	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 6946 : 
; 6947 : 		y_adjust = -5.0;

  024f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  024fb	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN93@draw_aircr:

; 6948 : 	}
; 6949 : 
; 6950 : 	set_2d_mono_font_position (1.0, -1.0);

  02503	51		 push	 ecx
  02504	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0250c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02511	51		 push	 ecx
  02512	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0251a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0251f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6951 : 
; 6952 : 	set_mono_font_rel_position (-width, y_adjust);

  02524	51		 push	 ecx
  02525	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0252d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02532	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  0253a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  02541	51		 push	 ecx
  02542	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02547	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6953 : 
; 6954 : 	print_mono_font_string (buffer);

  0254c	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02552	50		 push	 eax
  02553	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6955 : }

  02558	5f		 pop	 edi
  02559	5e		 pop	 esi
  0255a	5b		 pop	 ebx
  0255b	8b e5		 mov	 esp, ebp
  0255d	5d		 pop	 ebp
  0255e	c2 04 00	 ret	 4
  02561	0f 1f 00	 npad	 3
$LN243@draw_aircr:
  02564	00 00 00 00	 DD	 $LN16@draw_aircr
  02568	00 00 00 00	 DD	 $LN16@draw_aircr
  0256c	00 00 00 00	 DD	 $LN17@draw_aircr
  02570	00 00 00 00	 DD	 $LN17@draw_aircr
?draw_aircraft_survivability_equipment_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ENDP ; draw_aircraft_survivability_equipment_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z
_TEXT	SEGMENT
tv253 = -128						; size = 4
tv190 = -128						; size = 4
tv167 = -128						; size = 4
tv146 = -128						; size = 4
tv95 = -128						; size = 4
tv245 = -124						; size = 4
tv223 = -124						; size = 4
tv182 = -124						; size = 4
tv159 = -124						; size = 4
tv139 = -124						; size = 4
tv87 = -124						; size = 4
$T1 = -120						; size = 4
_attitude$ = -52					; size = 4
_uvec_threat_to_target$ = -48				; size = 12
_threat_position$ = -36					; size = 4
_cos_error$ = -32					; size = 4
_length$ = -28						; size = 4
_time_to_impact$ = -24					; size = 4
_threat_velocity$ = -20					; size = 4
_threat_range$ = -16					; size = 4
_overshot$ = -12					; size = 4
_closest_missile$ = -8					; size = 4
_threat$ = -4						; size = 4
_source$ = 8						; size = 4
_source_position$ = 12					; size = 4
_threat_type$ = 16					; size = 4
_closest_missile_time_to_impact$ = 20			; size = 4
?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z PROC ; get_closest_missile, COMDAT

; 6215 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 6216 : 	entity
; 6217 : 		*threat,
; 6218 : 		*closest_missile;
; 6219 : 
; 6220 : 	int
; 6221 : 		overshot;
; 6222 : 
; 6223 : 	float
; 6224 : 		threat_range,
; 6225 : 		threat_velocity,
; 6226 : 		time_to_impact,
; 6227 : 		length,
; 6228 : 		cos_error;
; 6229 : 
; 6230 : 	vec3d
; 6231 : 		*threat_position,
; 6232 : 		uvec_threat_to_target;
; 6233 : 
; 6234 : 	matrix3x3
; 6235 : 		*attitude;
; 6236 : 
; 6237 : 	ASSERT (source);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _source$[ebp], 0
  00010	75 18		 jne	 SHORT $LN4@get_closes
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00017	83 c0 16	 add	 eax, 22			; 00000016H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06OEKOLKIL@source@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_closes:

; 6238 : 
; 6239 : 	ASSERT (source_position);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _source_position$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN5@get_closes
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00035	83 c0 18	 add	 eax, 24			; 00000018H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IIPCKJML@source_position@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@get_closes:

; 6240 : 
; 6241 : 	ASSERT ((threat_type == THREAT_TYPE_RF_MISSILE) || (threat_type == THREAT_TYPE_IR_MISSILE) || (threat_type == THREAT_TYPE_LASER_MISSILE));

  00048	83 7d 10 01	 cmp	 DWORD PTR _threat_type$[ebp], 1
  0004c	74 24		 je	 SHORT $LN6@get_closes
  0004e	83 7d 10 02	 cmp	 DWORD PTR _threat_type$[ebp], 2
  00052	74 1e		 je	 SHORT $LN6@get_closes
  00054	83 7d 10 03	 cmp	 DWORD PTR _threat_type$[ebp], 3
  00058	74 18		 je	 SHORT $LN6@get_closes
  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  0005f	83 c0 1a	 add	 eax, 26			; 0000001aH
  00062	50		 push	 eax
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@
  0006d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_closes:

; 6242 : 
; 6243 : 	closest_missile = NULL;

  00072	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _closest_missile$[ebp], 0

; 6244 : 
; 6245 : 	*closest_missile_time_to_impact = 1000000.0;

  00079	8b 45 14	 mov	 eax, DWORD PTR _closest_missile_time_to_impact$[ebp]
  0007c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@49742400
  00084	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 6246 : 
; 6247 : 	threat = get_local_entity_first_child (get_gunship_entity (), LIST_TYPE_TARGET);

  00088	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0008f	74 0c		 je	 SHORT $LN15@get_closes
  00091	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00096	8b 08		 mov	 ecx, DWORD PTR [eax]
  00098	89 4d 84	 mov	 DWORD PTR tv87[ebp], ecx
  0009b	eb 21		 jmp	 SHORT $LN16@get_closes
$LN15@get_closes:
  0009d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  000a3	83 c2 20	 add	 edx, 32			; 00000020H
  000a6	52		 push	 edx
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b7	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$LN16@get_closes:
  000be	b9 01 00 00 00	 mov	 ecx, 1
  000c3	85 c9		 test	 ecx, ecx
  000c5	74 09		 je	 SHORT $LN17@get_closes
  000c7	c7 45 80 26 00
	00 00		 mov	 DWORD PTR tv95[ebp], 38	; 00000026H
  000ce	eb 21		 jmp	 SHORT $LN18@get_closes
$LN17@get_closes:
  000d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  000d6	83 c2 20	 add	 edx, 32			; 00000020H
  000d9	52		 push	 edx
  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ea	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv95[ebp], 0
$LN18@get_closes:
  000f1	6a 26		 push	 38			; 00000026H
  000f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000f9	51		 push	 ecx
  000fa	69 55 84 b4 00
	00 00		 imul	 edx, DWORD PTR tv87[ebp], 180
  00101	8b 45 80	 mov	 eax, DWORD PTR tv95[ebp]
  00104	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0010b	ff d1		 call	 ecx
  0010d	89 45 fc	 mov	 DWORD PTR _threat$[ebp], eax
$LN2@get_closes:

; 6248 : 
; 6249 : 	while (threat)

  00110	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  00114	0f 84 74 03 00
	00		 je	 $LN3@get_closes

; 6250 : 	{
; 6251 : 		if (get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE) == threat_type)

  0011a	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0011e	74 0a		 je	 SHORT $LN19@get_closes
  00120	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  00123	8b 08		 mov	 ecx, DWORD PTR [eax]
  00125	89 4d 84	 mov	 DWORD PTR tv139[ebp], ecx
  00128	eb 1d		 jmp	 SHORT $LN20@get_closes
$LN19@get_closes:
  0012a	68 6b 18 00 00	 push	 6251			; 0000186bH
  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00134	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0013a	52		 push	 edx
  0013b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00140	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv139[ebp], 0
$LN20@get_closes:
  00147	b8 01 00 00 00	 mov	 eax, 1
  0014c	85 c0		 test	 eax, eax
  0014e	74 09		 je	 SHORT $LN21@get_closes
  00150	c7 45 80 e9 00
	00 00		 mov	 DWORD PTR tv146[ebp], 233 ; 000000e9H
  00157	eb 1d		 jmp	 SHORT $LN22@get_closes
$LN21@get_closes:
  00159	68 6b 18 00 00	 push	 6251			; 0000186bH
  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00163	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00169	51		 push	 ecx
  0016a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0016f	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv146[ebp], 0
$LN22@get_closes:
  00176	68 e9 00 00 00	 push	 233			; 000000e9H
  0017b	8b 55 fc	 mov	 edx, DWORD PTR _threat$[ebp]
  0017e	52		 push	 edx
  0017f	69 45 84 5c 04
	00 00		 imul	 eax, DWORD PTR tv139[ebp], 1116
  00186	8b 4d 80	 mov	 ecx, DWORD PTR tv146[ebp]
  00189	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00190	ff d2		 call	 edx
  00192	3b 45 10	 cmp	 eax, DWORD PTR _threat_type$[ebp]
  00195	0f 85 6e 02 00
	00		 jne	 $LN13@get_closes

; 6252 : 		{
; 6253 : 			threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  0019b	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0019f	74 0a		 je	 SHORT $LN23@get_closes
  001a1	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  001a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a6	89 4d 84	 mov	 DWORD PTR tv159[ebp], ecx
  001a9	eb 21		 jmp	 SHORT $LN24@get_closes
$LN23@get_closes:
  001ab	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  001b1	83 c2 26	 add	 edx, 38			; 00000026H
  001b4	52		 push	 edx
  001b5	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001bf	50		 push	 eax
  001c0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c5	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv159[ebp], 0
$LN24@get_closes:
  001cc	b9 01 00 00 00	 mov	 ecx, 1
  001d1	85 c9		 test	 ecx, ecx
  001d3	74 09		 je	 SHORT $LN25@get_closes
  001d5	c7 45 80 08 00
	00 00		 mov	 DWORD PTR tv167[ebp], 8
  001dc	eb 21		 jmp	 SHORT $LN26@get_closes
$LN25@get_closes:
  001de	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  001e4	83 c2 26	 add	 edx, 38			; 00000026H
  001e7	52		 push	 edx
  001e8	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001f2	50		 push	 eax
  001f3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001f8	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv167[ebp], 0
$LN26@get_closes:
  001ff	6a 08		 push	 8
  00201	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00204	51		 push	 ecx
  00205	6b 55 84 60	 imul	 edx, DWORD PTR tv159[ebp], 96
  00209	8b 45 80	 mov	 eax, DWORD PTR tv167[ebp]
  0020c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00213	ff d1		 call	 ecx
  00215	89 45 dc	 mov	 DWORD PTR _threat_position$[ebp], eax

; 6254 : 
; 6255 : 			threat_range = get_3d_range (source_position, threat_position);

  00218	8b 45 dc	 mov	 eax, DWORD PTR _threat_position$[ebp]
  0021b	50		 push	 eax
  0021c	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  0021f	51		 push	 ecx
  00220	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  00225	d9 5d f0	 fstp	 DWORD PTR _threat_range$[ebp]

; 6256 : 
; 6257 : 			threat_velocity = get_local_entity_float_value (threat, FLOAT_TYPE_VELOCITY);

  00228	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0022c	74 0a		 je	 SHORT $LN27@get_closes
  0022e	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  00231	8b 08		 mov	 ecx, DWORD PTR [eax]
  00233	89 4d 84	 mov	 DWORD PTR tv182[ebp], ecx
  00236	eb 21		 jmp	 SHORT $LN28@get_closes
$LN27@get_closes:
  00238	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  0023e	83 c2 2a	 add	 edx, 42			; 0000002aH
  00241	52		 push	 edx
  00242	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00247	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0024c	50		 push	 eax
  0024d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00252	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv182[ebp], 0
$LN28@get_closes:
  00259	b9 01 00 00 00	 mov	 ecx, 1
  0025e	85 c9		 test	 ecx, ecx
  00260	74 09		 je	 SHORT $LN29@get_closes
  00262	c7 45 80 93 00
	00 00		 mov	 DWORD PTR tv190[ebp], 147 ; 00000093H
  00269	eb 21		 jmp	 SHORT $LN30@get_closes
$LN29@get_closes:
  0026b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00271	83 c2 2a	 add	 edx, 42			; 0000002aH
  00274	52		 push	 edx
  00275	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0027a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0027f	50		 push	 eax
  00280	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00285	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv190[ebp], 0
$LN30@get_closes:
  0028c	68 93 00 00 00	 push	 147			; 00000093H
  00291	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00294	51		 push	 ecx
  00295	69 55 84 bc 02
	00 00		 imul	 edx, DWORD PTR tv182[ebp], 700
  0029c	8b 45 80	 mov	 eax, DWORD PTR tv190[ebp]
  0029f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  002a6	ff d1		 call	 ecx
  002a8	d9 5d ec	 fstp	 DWORD PTR _threat_velocity$[ebp]

; 6258 : 
; 6259 : 			time_to_impact = threat_range / max (threat_velocity, 1.0f);

  002ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002b3	f3 0f 11 45 88	 movss	 DWORD PTR $T1[ebp], xmm0
  002b8	8d 45 88	 lea	 eax, DWORD PTR $T1[ebp]
  002bb	50		 push	 eax
  002bc	8d 4d ec	 lea	 ecx, DWORD PTR _threat_velocity$[ebp]
  002bf	51		 push	 ecx
  002c0	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  002c5	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _threat_range$[ebp]
  002ca	f3 0f 5e 00	 divss	 xmm0, DWORD PTR [eax]
  002ce	f3 0f 11 45 e8	 movss	 DWORD PTR _time_to_impact$[ebp], xmm0

; 6260 : 
; 6261 : 			//
; 6262 : 			// guard against 'overshot target' to prevent spurious indications
; 6263 : 			//
; 6264 : 
; 6265 : 			overshot = FALSE;

  002d3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _overshot$[ebp], 0

; 6266 : 
; 6267 : 			if (time_to_impact < 1.0)

  002da	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _time_to_impact$[ebp]
  002df	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  002e7	66 0f 2f c8	 comisd	 xmm1, xmm0
  002eb	0f 86 f3 00 00
	00		 jbe	 $LN10@get_closes

; 6268 : 			{
; 6269 : 				uvec_threat_to_target.x = source_position->x - threat_position->x;

  002f1	8b 45 0c	 mov	 eax, DWORD PTR _source_position$[ebp]
  002f4	8b 4d dc	 mov	 ecx, DWORD PTR _threat_position$[ebp]
  002f7	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002fb	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  002ff	f3 0f 11 45 d0	 movss	 DWORD PTR _uvec_threat_to_target$[ebp], xmm0

; 6270 : 				uvec_threat_to_target.y = source_position->y - threat_position->y;

  00304	8b 45 0c	 mov	 eax, DWORD PTR _source_position$[ebp]
  00307	8b 4d dc	 mov	 ecx, DWORD PTR _threat_position$[ebp]
  0030a	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0030f	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00314	f3 0f 11 45 d4	 movss	 DWORD PTR _uvec_threat_to_target$[ebp+4], xmm0

; 6271 : 				uvec_threat_to_target.z = source_position->z - threat_position->z;

  00319	8b 45 0c	 mov	 eax, DWORD PTR _source_position$[ebp]
  0031c	8b 4d dc	 mov	 ecx, DWORD PTR _threat_position$[ebp]
  0031f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00324	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00329	f3 0f 11 45 d8	 movss	 DWORD PTR _uvec_threat_to_target$[ebp+8], xmm0

; 6272 : 
; 6273 : 				length = get_3d_vector_magnitude (&uvec_threat_to_target);

  0032e	8d 45 d0	 lea	 eax, DWORD PTR _uvec_threat_to_target$[ebp]
  00331	50		 push	 eax
  00332	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  00337	d9 5d e4	 fstp	 DWORD PTR _length$[ebp]

; 6274 : 
; 6275 : 				if (length > 1.0)

  0033a	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  0033f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  00347	0f 86 90 00 00
	00		 jbe	 $LN9@get_closes

; 6276 : 				{
; 6277 : 					normalise_3d_vector_given_magnitude (&uvec_threat_to_target, length);

  0034d	51		 push	 ecx
  0034e	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _length$[ebp]
  00353	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00358	8d 45 d0	 lea	 eax, DWORD PTR _uvec_threat_to_target$[ebp]
  0035b	50		 push	 eax
  0035c	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 6278 : 
; 6279 : 					attitude = get_local_entity_attitude_matrix_ptr (threat);

  00361	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  00365	74 0a		 je	 SHORT $LN31@get_closes
  00367	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  0036a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0036c	89 4d 84	 mov	 DWORD PTR tv223[ebp], ecx
  0036f	eb 21		 jmp	 SHORT $LN32@get_closes
$LN31@get_closes:
  00371	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00377	83 c2 40	 add	 edx, 64			; 00000040H
  0037a	52		 push	 edx
  0037b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00380	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00385	50		 push	 eax
  00386	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0038b	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv223[ebp], 0
$LN32@get_closes:
  00392	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00395	51		 push	 ecx
  00396	8b 55 84	 mov	 edx, DWORD PTR tv223[ebp]
  00399	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_attitude_matrix_ptr@@3PAP6GPAY122MPAUENTITY@@@ZA[edx*4]
  003a0	ff d0		 call	 eax
  003a2	89 45 cc	 mov	 DWORD PTR _attitude$[ebp], eax

; 6280 : 
; 6281 : 					cos_error = get_3d_unit_vector_dot_product ((vec3d *) &((*attitude) [2][0]), &uvec_threat_to_target);

  003a5	8d 45 d0	 lea	 eax, DWORD PTR _uvec_threat_to_target$[ebp]
  003a8	50		 push	 eax
  003a9	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  003ae	d1 e1		 shl	 ecx, 1
  003b0	03 4d cc	 add	 ecx, DWORD PTR _attitude$[ebp]
  003b3	ba 04 00 00 00	 mov	 edx, 4
  003b8	6b c2 00	 imul	 eax, edx, 0
  003bb	03 c8		 add	 ecx, eax
  003bd	51		 push	 ecx
  003be	e8 00 00 00 00	 call	 ?get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z ; get_3d_unit_vector_dot_product
  003c3	d9 5d e0	 fstp	 DWORD PTR _cos_error$[ebp]

; 6282 : 
; 6283 : 					if (cos_error < 0.0)

  003c6	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _cos_error$[ebp]
  003cb	0f 57 c9	 xorps	 xmm1, xmm1
  003ce	66 0f 2f c8	 comisd	 xmm1, xmm0
  003d2	76 07		 jbe	 SHORT $LN11@get_closes

; 6284 : 					{
; 6285 : 						overshot = TRUE;

  003d4	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _overshot$[ebp], 1
$LN11@get_closes:

; 6286 : 					}
; 6287 : 				}
; 6288 : 				else

  003db	eb 07		 jmp	 SHORT $LN10@get_closes
$LN9@get_closes:

; 6289 : 				{
; 6290 : 					overshot = TRUE;

  003dd	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _overshot$[ebp], 1
$LN10@get_closes:

; 6291 : 				}
; 6292 : 			}
; 6293 : 
; 6294 : 			if (!overshot)

  003e4	83 7d f4 00	 cmp	 DWORD PTR _overshot$[ebp], 0
  003e8	75 1f		 jne	 SHORT $LN13@get_closes

; 6295 : 			{
; 6296 : 				if (time_to_impact < *closest_missile_time_to_impact)

  003ea	8b 45 14	 mov	 eax, DWORD PTR _closest_missile_time_to_impact$[ebp]
  003ed	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  003f1	0f 2f 45 e8	 comiss	 xmm0, DWORD PTR _time_to_impact$[ebp]
  003f5	76 12		 jbe	 SHORT $LN13@get_closes

; 6297 : 				{
; 6298 : 					closest_missile = threat;

  003f7	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  003fa	89 45 f8	 mov	 DWORD PTR _closest_missile$[ebp], eax

; 6299 : 
; 6300 : 					*closest_missile_time_to_impact = time_to_impact;

  003fd	8b 45 14	 mov	 eax, DWORD PTR _closest_missile_time_to_impact$[ebp]
  00400	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _time_to_impact$[ebp]
  00405	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
$LN13@get_closes:

; 6301 : 				}
; 6302 : 			}
; 6303 : 		}
; 6304 : 
; 6305 : 		threat = get_local_entity_child_succ (threat, LIST_TYPE_TARGET);

  00409	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0040d	74 0a		 je	 SHORT $LN33@get_closes
  0040f	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  00412	8b 08		 mov	 ecx, DWORD PTR [eax]
  00414	89 4d 84	 mov	 DWORD PTR tv245[ebp], ecx
  00417	eb 21		 jmp	 SHORT $LN34@get_closes
$LN33@get_closes:
  00419	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  0041f	83 c2 5a	 add	 edx, 90			; 0000005aH
  00422	52		 push	 edx
  00423	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00428	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0042d	50		 push	 eax
  0042e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00433	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv245[ebp], 0
$LN34@get_closes:
  0043a	b9 01 00 00 00	 mov	 ecx, 1
  0043f	85 c9		 test	 ecx, ecx
  00441	74 09		 je	 SHORT $LN35@get_closes
  00443	c7 45 80 26 00
	00 00		 mov	 DWORD PTR tv253[ebp], 38 ; 00000026H
  0044a	eb 21		 jmp	 SHORT $LN36@get_closes
$LN35@get_closes:
  0044c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00452	83 c2 5a	 add	 edx, 90			; 0000005aH
  00455	52		 push	 edx
  00456	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0045b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00460	50		 push	 eax
  00461	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00466	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv253[ebp], 0
$LN36@get_closes:
  0046d	6a 26		 push	 38			; 00000026H
  0046f	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00472	51		 push	 ecx
  00473	69 55 84 b4 00
	00 00		 imul	 edx, DWORD PTR tv245[ebp], 180
  0047a	8b 45 80	 mov	 eax, DWORD PTR tv253[ebp]
  0047d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00484	ff d1		 call	 ecx
  00486	89 45 fc	 mov	 DWORD PTR _threat$[ebp], eax

; 6306 : 	}

  00489	e9 82 fc ff ff	 jmp	 $LN2@get_closes
$LN3@get_closes:

; 6307 : 
; 6308 : 	return (closest_missile);

  0048e	8b 45 f8	 mov	 eax, DWORD PTR _closest_missile$[ebp]

; 6309 : }

  00491	5f		 pop	 edi
  00492	5e		 pop	 esi
  00493	5b		 pop	 ebx
  00494	8b e5		 mov	 esp, ebp
  00496	5d		 pop	 ebp
  00497	c2 10 00	 ret	 16			; 00000010H
?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ENDP ; get_closest_missile
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv2478 = -464						; size = 4
tv2205 = -464						; size = 4
tv1512 = -460						; size = 4
tv1483 = -460						; size = 4
tv1447 = -460						; size = 4
tv1374 = -460						; size = 4
tv1258 = -460						; size = 4
tv1200 = -460						; size = 4
tv1165 = -460						; size = 4
tv1144 = -460						; size = 4
tv1123 = -460						; size = 4
tv1104 = -460						; size = 4
tv1085 = -460						; size = 4
tv1064 = -460						; size = 4
tv1043 = -460						; size = 4
tv1022 = -460						; size = 4
tv1003 = -460						; size = 4
tv984 = -460						; size = 4
tv965 = -460						; size = 4
tv933 = -460						; size = 4
tv901 = -460						; size = 4
tv882 = -460						; size = 4
tv862 = -460						; size = 4
tv789 = -460						; size = 4
tv761 = -460						; size = 4
tv739 = -460						; size = 4
tv718 = -460						; size = 4
tv699 = -460						; size = 4
tv680 = -460						; size = 4
tv643 = -460						; size = 4
tv622 = -460						; size = 4
tv549 = -460						; size = 4
tv488 = -460						; size = 4
tv178 = -460						; size = 4
tv158 = -460						; size = 4
tv138 = -460						; size = 4
tv86 = -460						; size = 4
tv1504 = -456						; size = 4
tv1475 = -456						; size = 4
tv1439 = -456						; size = 4
tv1366 = -456						; size = 4
tv1281 = -456						; size = 4
tv1273 = -456						; size = 4
tv1250 = -456						; size = 4
tv1192 = -456						; size = 4
tv1157 = -456						; size = 4
tv1136 = -456						; size = 4
tv1116 = -456						; size = 4
tv1097 = -456						; size = 4
tv1077 = -456						; size = 4
tv1057 = -456						; size = 4
tv1035 = -456						; size = 4
tv1015 = -456						; size = 4
tv996 = -456						; size = 4
tv977 = -456						; size = 4
tv957 = -456						; size = 4
tv925 = -456						; size = 4
tv894 = -456						; size = 4
tv874 = -456						; size = 4
tv854 = -456						; size = 4
tv781 = -456						; size = 4
tv753 = -456						; size = 4
tv731 = -456						; size = 4
tv711 = -456						; size = 4
tv692 = -456						; size = 4
tv672 = -456						; size = 4
tv635 = -456						; size = 4
tv614 = -456						; size = 4
tv541 = -456						; size = 4
tv480 = -456						; size = 4
tv170 = -456						; size = 4
tv150 = -456						; size = 4
tv130 = -456						; size = 4
tv78 = -456						; size = 4
tv70 = -456						; size = 4
_seconds$1 = -388					; size = 4
_minutes$2 = -384					; size = 4
_hours$3 = -380						; size = 4
_time_to_go$4 = -376					; size = 4
_f$5 = -372						; size = 4
_i$6 = -368						; size = 4
_waypoint_range$7 = -364				; size = 4
_waypoint_position$8 = -360				; size = 12
_wp$9 = -348						; size = 4
_target_range$10 = -344					; size = 4
_target_position$11 = -340				; size = 4
_dy$12 = -336						; size = 4
_dx$13 = -332						; size = 4
_air_scan_range$14 = -328				; size = 4
_draw_threat_line$15 = -324				; size = 4
_threat_type$16 = -320					; size = 4
_target_position$17 = -316				; size = 4
_launched_weapon$18 = -312				; size = 4
_target$19 = -308					; size = 4
_wp2_rel_position$20 = -304				; size = 12
_wp1_rel_position$21 = -292				; size = 12
_wp2$22 = -280						; size = 4
_wp1$23 = -276						; size = 4
_radius$24 = -272					; size = 4
_source_position$ = -268				; size = 4
_source_target$ = -264					; size = 4
_source$ = -260						; size = 4
_tsd_threat_line_flash_timer$ = -256			; size = 4
_tsd_ase_range$ = -252					; size = 4
_source_heading$ = -248					; size = 4
_y_adjust$ = -244					; size = 4
_width$ = -240						; size = 4
_y_origin$ = -236					; size = 4
_x_origin$ = -232					; size = 4
_scale$ = -228						; size = 4
_v$ = -224						; size = 4
_u$ = -220						; size = 4
_tsd_declutter_level$ = -216				; size = 4
_source_side$ = -212					; size = 4
_tsd_draw_threat_line_status$ = -208			; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z PROC ; draw_tactical_situation_display_mfd, COMDAT

; 5276 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 01 00
	00		 sub	 esp, 464		; 000001d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 5277 : 	char
; 5278 : 		*s,
; 5279 : 		buffer[200];
; 5280 : 
; 5281 : 	int
; 5282 : 		*tsd_draw_threat_line_status;
; 5283 : 
; 5284 : 	entity_sides
; 5285 : 		source_side;
; 5286 : 
; 5287 : 	tsd_declutter_levels
; 5288 : 		tsd_declutter_level;
; 5289 : 
; 5290 : 	float
; 5291 : 		u,
; 5292 : 		v,
; 5293 : 		scale,
; 5294 : 		x_origin,
; 5295 : 		y_origin,
; 5296 : 		width,
; 5297 : 		y_adjust,
; 5298 : 		source_heading,
; 5299 : 		tsd_ase_range,
; 5300 : 		*tsd_threat_line_flash_timer;
; 5301 : 
; 5302 : 	entity
; 5303 : 		*source,
; 5304 : 		*source_target;
; 5305 : 
; 5306 : 	vec3d
; 5307 : 		*source_position;
; 5308 : 
; 5309 : 	ASSERT (comanche_main_mfd_location_valid (mfd_location));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  00010	7c 06		 jl	 SHORT $LN21@draw_tacti
  00012	83 7d 08 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00016	7c 18		 jl	 SHORT $LN20@draw_tacti
$LN21@draw_tacti:
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0001d	83 c0 21	 add	 eax, 33			; 00000021H
  00020	50		 push	 eax
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@GBKBAHOG@comanche_main_mfd_location_vali@
  0002b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN20@draw_tacti:

; 5310 : 
; 5311 : 	switch (mfd_location)

  00030	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00033	89 85 38 fe ff
	ff		 mov	 DWORD PTR tv70[ebp], eax
  00039	83 bd 38 fe ff
	ff 03		 cmp	 DWORD PTR tv70[ebp], 3
  00040	77 6d		 ja	 SHORT $LN2@draw_tacti
  00042	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR tv70[ebp]
  00048	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN279@draw_tacti[ecx*4]
$LN22@draw_tacti:

; 5312 : 	{
; 5313 : 		////////////////////////////////////////
; 5314 : 		case COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS:
; 5315 : 		case COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS:
; 5316 : 		////////////////////////////////////////
; 5317 : 		{
; 5318 : 			tsd_ase_range						= pilot_tsd_ase_range;

  0004f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  00057	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _tsd_ase_range$[ebp], xmm0

; 5319 : 			tsd_declutter_level				= pilot_tsd_declutter_level;

  0005f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A
  00064	89 85 28 ff ff
	ff		 mov	 DWORD PTR _tsd_declutter_level$[ebp], eax

; 5320 : 			tsd_threat_line_flash_timer	= &pilot_tsd_threat_line_flash_timer;

  0006a	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _tsd_threat_line_flash_timer$[ebp], OFFSET ?pilot_tsd_threat_line_flash_timer@@3MA

; 5321 : 			tsd_draw_threat_line_status	= &pilot_tsd_draw_threat_line_status;

  00074	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _tsd_draw_threat_line_status$[ebp], OFFSET ?pilot_tsd_draw_threat_line_status@@3HA

; 5322 : 
; 5323 : 			break;

  0007e	eb 2f		 jmp	 SHORT $LN2@draw_tacti
$LN23@draw_tacti:

; 5324 : 		}
; 5325 : 		////////////////////////////////////////
; 5326 : 		case COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_LHS:
; 5327 : 		case COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_RHS:
; 5328 : 		////////////////////////////////////////
; 5329 : 		{
; 5330 : 			tsd_ase_range						= co_pilot_tsd_ase_range;

  00080	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  00088	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _tsd_ase_range$[ebp], xmm0

; 5331 : 			tsd_declutter_level				= co_pilot_tsd_declutter_level;

  00090	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A
  00095	89 85 28 ff ff
	ff		 mov	 DWORD PTR _tsd_declutter_level$[ebp], eax

; 5332 : 			tsd_threat_line_flash_timer	= &co_pilot_tsd_threat_line_flash_timer;

  0009b	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _tsd_threat_line_flash_timer$[ebp], OFFSET ?co_pilot_tsd_threat_line_flash_timer@@3MA

; 5333 : 			tsd_draw_threat_line_status	= &co_pilot_tsd_draw_threat_line_status;

  000a5	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _tsd_draw_threat_line_status$[ebp], OFFSET ?co_pilot_tsd_draw_threat_line_status@@3HA
$LN2@draw_tacti:

; 5334 : 
; 5335 : 			break;
; 5336 : 		}
; 5337 : 	}
; 5338 : 
; 5339 : 	source = get_gunship_entity ();

  000af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000b4	89 85 fc fe ff
	ff		 mov	 DWORD PTR _source$[ebp], eax

; 5340 : 
; 5341 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  000ba	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  000c1	74 10		 je	 SHORT $LN138@draw_tacti
  000c3	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  000c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cb	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv78[ebp], ecx
  000d1	eb 24		 jmp	 SHORT $LN139@draw_tacti
$LN138@draw_tacti:
  000d3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  000d9	83 c2 41	 add	 edx, 65			; 00000041H
  000dc	52		 push	 edx
  000dd	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000e7	50		 push	 eax
  000e8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ed	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN139@draw_tacti:
  000f7	b9 01 00 00 00	 mov	 ecx, 1
  000fc	85 c9		 test	 ecx, ecx
  000fe	74 0c		 je	 SHORT $LN140@draw_tacti
  00100	c7 85 34 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv86[ebp], 187 ; 000000bbH
  0010a	eb 24		 jmp	 SHORT $LN141@draw_tacti
$LN140@draw_tacti:
  0010c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  00112	83 c2 41	 add	 edx, 65			; 00000041H
  00115	52		 push	 edx
  00116	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0011b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00126	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv86[ebp], 0
$LN141@draw_tacti:
  00130	68 bb 00 00 00	 push	 187			; 000000bbH
  00135	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  0013b	51		 push	 ecx
  0013c	69 95 38 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv78[ebp], 1116
  00146	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR tv86[ebp]
  0014c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00153	ff d1		 call	 ecx
  00155	89 85 2c ff ff
	ff		 mov	 DWORD PTR _source_side$[ebp], eax

; 5342 : 
; 5343 : 	source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  0015b	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00162	74 10		 je	 SHORT $LN142@draw_tacti
  00164	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0016a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016c	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv130[ebp], ecx
  00172	eb 24		 jmp	 SHORT $LN143@draw_tacti
$LN142@draw_tacti:
  00174	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0017a	83 c2 43	 add	 edx, 67			; 00000043H
  0017d	52		 push	 edx
  0017e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00183	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00188	50		 push	 eax
  00189	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0018e	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv130[ebp], 0
$LN143@draw_tacti:
  00198	b9 01 00 00 00	 mov	 ecx, 1
  0019d	85 c9		 test	 ecx, ecx
  0019f	74 0c		 je	 SHORT $LN144@draw_tacti
  001a1	c7 85 34 fe ff
	ff 34 00 00 00	 mov	 DWORD PTR tv138[ebp], 52 ; 00000034H
  001ab	eb 24		 jmp	 SHORT $LN145@draw_tacti
$LN144@draw_tacti:
  001ad	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  001b3	83 c2 43	 add	 edx, 67			; 00000043H
  001b6	52		 push	 edx
  001b7	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  001bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  001c1	50		 push	 eax
  001c2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c7	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv138[ebp], 0
$LN145@draw_tacti:
  001d1	6a 34		 push	 52			; 00000034H
  001d3	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  001d9	51		 push	 ecx
  001da	69 95 38 fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv130[ebp], 700
  001e4	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR tv138[ebp]
  001ea	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  001f1	ff d1		 call	 ecx
  001f3	d9 9d 08 ff ff
	ff		 fstp	 DWORD PTR _source_heading$[ebp]

; 5344 : 
; 5345 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  001f9	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00200	74 10		 je	 SHORT $LN146@draw_tacti
  00202	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00208	8b 08		 mov	 ecx, DWORD PTR [eax]
  0020a	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv150[ebp], ecx
  00210	eb 24		 jmp	 SHORT $LN147@draw_tacti
$LN146@draw_tacti:
  00212	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  00218	83 c2 45	 add	 edx, 69			; 00000045H
  0021b	52		 push	 edx
  0021c	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00221	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00226	50		 push	 eax
  00227	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0022c	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
$LN147@draw_tacti:
  00236	b9 01 00 00 00	 mov	 ecx, 1
  0023b	85 c9		 test	 ecx, ecx
  0023d	74 0c		 je	 SHORT $LN148@draw_tacti
  0023f	c7 85 34 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv158[ebp], 8
  00249	eb 24		 jmp	 SHORT $LN149@draw_tacti
$LN148@draw_tacti:
  0024b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  00251	83 c2 45	 add	 edx, 69			; 00000045H
  00254	52		 push	 edx
  00255	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0025a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0025f	50		 push	 eax
  00260	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00265	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv158[ebp], 0
$LN149@draw_tacti:
  0026f	6a 08		 push	 8
  00271	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00277	51		 push	 ecx
  00278	6b 95 38 fe ff
	ff 60		 imul	 edx, DWORD PTR tv150[ebp], 96
  0027f	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR tv158[ebp]
  00285	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0028c	ff d1		 call	 ecx
  0028e	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _source_position$[ebp], eax

; 5346 : 
; 5347 : 	source_target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  00294	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0029b	74 10		 je	 SHORT $LN150@draw_tacti
  0029d	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  002a3	8b 08		 mov	 ecx, DWORD PTR [eax]
  002a5	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv170[ebp], ecx
  002ab	eb 24		 jmp	 SHORT $LN151@draw_tacti
$LN150@draw_tacti:
  002ad	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  002b3	83 c2 47	 add	 edx, 71			; 00000047H
  002b6	52		 push	 edx
  002b7	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  002bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002c1	50		 push	 eax
  002c2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002c7	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv170[ebp], 0
$LN151@draw_tacti:
  002d1	b9 01 00 00 00	 mov	 ecx, 1
  002d6	85 c9		 test	 ecx, ecx
  002d8	74 0c		 je	 SHORT $LN152@draw_tacti
  002da	c7 85 34 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv178[ebp], 38 ; 00000026H
  002e4	eb 24		 jmp	 SHORT $LN153@draw_tacti
$LN152@draw_tacti:
  002e6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  002ec	83 c2 47	 add	 edx, 71			; 00000047H
  002ef	52		 push	 edx
  002f0	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  002f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  002fa	50		 push	 eax
  002fb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00300	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv178[ebp], 0
$LN153@draw_tacti:
  0030a	6a 26		 push	 38			; 00000026H
  0030c	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00312	51		 push	 ecx
  00313	69 95 38 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv170[ebp], 180
  0031d	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR tv178[ebp]
  00323	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0032a	ff d1		 call	 ecx
  0032c	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _source_target$[ebp], eax

; 5348 : 
; 5349 : 	scale = RADIUS / tsd_ase_range;

  00332	f3 0f 5a 85 04
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _tsd_ase_range$[ebp]
  0033a	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff5d3d193333333
  00342	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00346	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0034a	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _scale$[ebp], xmm0

; 5350 : 
; 5351 : 	//
; 5352 : 	// match ground radar origin
; 5353 : 	//
; 5354 : 
; 5355 : 	if (draw_large_mfd)

  00352	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00359	74 1d		 je	 SHORT $LN24@draw_tacti

; 5356 : 	{
; 5357 : 		x_origin = 0.0;

  0035b	0f 57 c0	 xorps	 xmm0, xmm0
  0035e	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _x_origin$[ebp], xmm0

; 5358 : 		y_origin = -0.6;

  00366	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  0036e	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_origin$[ebp], xmm0

; 5359 : 	}
; 5360 : 	else

  00376	eb 1b		 jmp	 SHORT $LN25@draw_tacti
$LN24@draw_tacti:

; 5361 : 	{
; 5362 : 		x_origin = 0.0;

  00378	0f 57 c0	 xorps	 xmm0, xmm0
  0037b	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _x_origin$[ebp], xmm0

; 5363 : 		y_origin = -0.675;

  00383	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2ccccd
  0038b	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_origin$[ebp], xmm0
$LN25@draw_tacti:

; 5364 : 	}
; 5365 : 
; 5366 : 	get_2d_float_screen_coordinates (x_origin, y_origin, &u, &v);

  00393	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _v$[ebp]
  00399	50		 push	 eax
  0039a	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _u$[ebp]
  003a0	51		 push	 ecx
  003a1	51		 push	 ecx
  003a2	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  003aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003af	51		 push	 ecx
  003b0	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  003b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bd	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 5367 : 
; 5368 : 	u -= mfd_viewport_x_min;

  003c2	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  003ca	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  003d2	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _u$[ebp], xmm0

; 5369 : 	v -= mfd_viewport_y_min;

  003da	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  003e2	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  003ea	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _v$[ebp], xmm0

; 5370 : 
; 5371 : 	////////////////////////////////////////
; 5372 : 	//
; 5373 : 	//VJ 030423 TSD RENDER MOD
; 5374 : 	//
; 5375 : 	////////////////////////////////////////
; 5376 : 
; 5377 : 	if (tsd_render_mode != TSD_RENDER_CONTOUR_MODE && !comanche_damage.navigation_computer)

  003f2	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  003f9	0f 84 05 02 00
	00		 je	 $LN26@draw_tacti
  003ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00404	c1 e8 07	 shr	 eax, 7
  00407	83 e0 01	 and	 eax, 1
  0040a	0f 85 f4 01 00
	00		 jne	 $LN26@draw_tacti

; 5378 : 	{
; 5379 : 		//VJ 030423 TSD render mod
; 5380 : 		set_rgb_colour (MFD_COLOUR1,   0, 0,  96, 255);  //dark blue

  00410	b8 04 00 00 00	 mov	 eax, 4
  00415	6b c8 00	 imul	 ecx, eax, 0
  00418	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  0041f	b8 04 00 00 00	 mov	 eax, 4
  00424	6b c8 00	 imul	 ecx, eax, 0
  00427	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 0
  0042e	b8 04 00 00 00	 mov	 eax, 4
  00433	6b c8 00	 imul	 ecx, eax, 0
  00436	c6 81 00 00 00
	00 60		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 96 ; 00000060H
  0043d	b8 04 00 00 00	 mov	 eax, 4
  00442	6b c8 00	 imul	 ecx, eax, 0
  00445	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 5381 : 	   set_rgb_colour (MFD_COLOUR2,	32, 32,  164, 255); //light blue

  0044c	b8 04 00 00 00	 mov	 eax, 4
  00451	c1 e0 00	 shl	 eax, 0
  00454	c6 80 02 00 00
	00 20		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 32 ; 00000020H
  0045b	b8 04 00 00 00	 mov	 eax, 4
  00460	c1 e0 00	 shl	 eax, 0
  00463	c6 80 01 00 00
	00 20		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 32 ; 00000020H
  0046a	b8 04 00 00 00	 mov	 eax, 4
  0046f	c1 e0 00	 shl	 eax, 0
  00472	c6 80 00 00 00
	00 a4		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 164 ; 000000a4H
  00479	b8 04 00 00 00	 mov	 eax, 4
  0047e	c1 e0 00	 shl	 eax, 0
  00481	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 5382 : 		set_rgb_colour (MFD_COLOUR3, 220, 48,   0, 255); //bright red

  00488	b8 04 00 00 00	 mov	 eax, 4
  0048d	d1 e0		 shl	 eax, 1
  0048f	c6 80 02 00 00
	00 dc		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 220 ; 000000dcH
  00496	b8 04 00 00 00	 mov	 eax, 4
  0049b	d1 e0		 shl	 eax, 1
  0049d	c6 80 01 00 00
	00 30		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 48 ; 00000030H
  004a4	b8 04 00 00 00	 mov	 eax, 4
  004a9	d1 e0		 shl	 eax, 1
  004ab	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  004b2	b8 04 00 00 00	 mov	 eax, 4
  004b7	d1 e0		 shl	 eax, 1
  004b9	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 5383 : 		set_rgb_colour (MFD_COLOUR4, 148, 32,   0, 255);//dark red

  004c0	b8 04 00 00 00	 mov	 eax, 4
  004c5	6b c8 03	 imul	 ecx, eax, 3
  004c8	c6 81 02 00 00
	00 94		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 148 ; 00000094H
  004cf	b8 04 00 00 00	 mov	 eax, 4
  004d4	6b c8 03	 imul	 ecx, eax, 3
  004d7	c6 81 01 00 00
	00 20		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 32 ; 00000020H
  004de	b8 04 00 00 00	 mov	 eax, 4
  004e3	6b c8 03	 imul	 ecx, eax, 3
  004e6	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  004ed	b8 04 00 00 00	 mov	 eax, 4
  004f2	6b c8 03	 imul	 ecx, eax, 3
  004f5	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 5384 : 
; 5385 : 		set_rgb_colour (MFD_COLOUR6,  255, 255,  0, 255);

  004fc	b8 04 00 00 00	 mov	 eax, 4
  00501	6b c8 05	 imul	 ecx, eax, 5
  00504	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  0050b	b8 04 00 00 00	 mov	 eax, 4
  00510	6b c8 05	 imul	 ecx, eax, 5
  00513	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  0051a	b8 04 00 00 00	 mov	 eax, 4
  0051f	6b c8 05	 imul	 ecx, eax, 5
  00522	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00529	b8 04 00 00 00	 mov	 eax, 4
  0052e	6b c8 05	 imul	 ecx, eax, 5
  00531	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 5386 : 		//VJ 030511 colours 7 and 8 are grays when enemy colour option is off in eech.ini
; 5387 : 		//VJ 030530 colour tweaks: black and dark gray are best
; 5388 : 		set_rgb_colour (MFD_COLOUR7,    64, 64, 64, 255);

  00538	b8 04 00 00 00	 mov	 eax, 4
  0053d	6b c8 0b	 imul	 ecx, eax, 11
  00540	c6 81 02 00 00
	00 40		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 64 ; 00000040H
  00547	b8 04 00 00 00	 mov	 eax, 4
  0054c	6b c8 0b	 imul	 ecx, eax, 11
  0054f	c6 81 01 00 00
	00 40		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 64 ; 00000040H
  00556	b8 04 00 00 00	 mov	 eax, 4
  0055b	6b c8 0b	 imul	 ecx, eax, 11
  0055e	c6 81 00 00 00
	00 40		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 64 ; 00000040H
  00565	b8 04 00 00 00	 mov	 eax, 4
  0056a	6b c8 0b	 imul	 ecx, eax, 11
  0056d	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 5389 : 		set_rgb_colour (MFD_COLOUR8,    0,0,0, 255);

  00574	b8 04 00 00 00	 mov	 eax, 4
  00579	6b c8 0c	 imul	 ecx, eax, 12
  0057c	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  00583	b8 04 00 00 00	 mov	 eax, 4
  00588	6b c8 0c	 imul	 ecx, eax, 12
  0058b	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 0
  00592	b8 04 00 00 00	 mov	 eax, 4
  00597	6b c8 0c	 imul	 ecx, eax, 12
  0059a	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  005a1	b8 04 00 00 00	 mov	 eax, 4
  005a6	6b c8 0c	 imul	 ecx, eax, 12
  005a9	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 5390 : 
; 5391 : 	   draw_tsd_terrain_map (mfd_env, -y_origin, tsd_ase_range, scale, source_position, source_heading, FALSE);

  005b0	6a 00		 push	 0
  005b2	51		 push	 ecx
  005b3	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  005bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c0	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  005c6	50		 push	 eax
  005c7	51		 push	 ecx
  005c8	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  005d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d5	51		 push	 ecx
  005d6	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  005de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e3	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  005eb	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  005f2	51		 push	 ecx
  005f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  005fe	51		 push	 ecx
  005ff	e8 00 00 00 00	 call	 ?draw_tsd_terrain_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MH@Z ; draw_tsd_terrain_map
$LN26@draw_tacti:

; 5392 : 	}
; 5393 : 
; 5394 : 	////////////////////////////////////////
; 5395 : 	//
; 5396 : 	// contour map
; 5397 : 	//
; 5398 : 	////////////////////////////////////////
; 5399 : 
; 5400 : //VJ 030423 TSD render mod, added mfd_env
; 5401 : 	if (!comanche_damage.navigation_computer)

  00604	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00609	c1 e8 07	 shr	 eax, 7
  0060c	83 e0 01	 and	 eax, 1
  0060f	75 5a		 jne	 SHORT $LN27@draw_tacti

; 5402 : 		draw_tsd_contour_map (mfd_env, -y_origin, tsd_ase_range, scale, source_position, source_heading, draw_large_mfd, FALSE);

  00611	6a 00		 push	 0
  00613	a1 00 00 00 00	 mov	 eax, DWORD PTR ?draw_large_mfd@@3HA
  00618	50		 push	 eax
  00619	51		 push	 ecx
  0061a	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  00622	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00627	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  0062d	51		 push	 ecx
  0062e	51		 push	 ecx
  0062f	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00637	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063c	51		 push	 ecx
  0063d	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  00645	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0064a	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  00652	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00659	51		 push	 ecx
  0065a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0065f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00665	52		 push	 edx
  00666	e8 00 00 00 00	 call	 ?draw_tsd_contour_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MHH@Z ; draw_tsd_contour_map
$LN27@draw_tacti:

; 5403 : 
; 5404 : 	////////////////////////////////////////
; 5405 : 	//
; 5406 : 	// radar scan
; 5407 : 	//
; 5408 : 	////////////////////////////////////////
; 5409 : 
; 5410 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)

  0066b	83 bd 28 ff ff
	ff 02		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 2
  00672	0f 84 4a 04 00
	00		 je	 $LN33@draw_tacti

; 5411 : 	{
; 5412 : 		float
; 5413 : 			radius;
; 5414 : 
; 5415 : 		if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_GROUND_RADAR)

  00678	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 1 ; target_acquisition_system
  0067f	0f 85 d5 01 00
	00		 jne	 $LN29@draw_tacti

; 5416 : 		{
; 5417 : 			set_2d_viewport_origin (mfd_env, u, v);

  00685	51		 push	 ecx
  00686	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  0068e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00693	51		 push	 ecx
  00694	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  0069c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  006a6	50		 push	 eax
  006a7	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 5418 : 
; 5419 : 			radius = ground_radar.scan_range * scale;

  006ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A
  006b4	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  006bc	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _radius$24[ebp], xmm0

; 5420 : 
; 5421 : 			set_2d_window_rotation (mfd_env, -ground_radar.scan_datum);

  006c4	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  006cc	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  006d3	51		 push	 ecx
  006d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  006de	50		 push	 eax
  006df	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 5422 : 
; 5423 : 			draw_radar_arc (ground_radar.scan_arc_size, radius, MFD_COLOUR4);

  006e4	b8 04 00 00 00	 mov	 eax, 4
  006e9	6b c8 03	 imul	 ecx, eax, 3
  006ec	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006f2	52		 push	 edx
  006f3	51		 push	 ecx
  006f4	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _radius$24[ebp]
  006fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00701	51		 push	 ecx
  00702	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  0070a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0070f	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 5424 : 
; 5425 : 			set_2d_window_rotation (mfd_env, -(ground_radar.scan_datum - (ground_radar.scan_arc_size * 0.5)));

  00714	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  0071c	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  00724	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0072c	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00730	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00737	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0073b	51		 push	 ecx
  0073c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00741	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00746	50		 push	 eax
  00747	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 5426 : 
; 5427 : 			draw_2d_line (0.0, 0.0, 0.0, radius, MFD_COLOUR4);

  0074c	b8 04 00 00 00	 mov	 eax, 4
  00751	6b c8 03	 imul	 ecx, eax, 3
  00754	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0075a	52		 push	 edx
  0075b	51		 push	 ecx
  0075c	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _radius$24[ebp]
  00764	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00769	51		 push	 ecx
  0076a	0f 57 c0	 xorps	 xmm0, xmm0
  0076d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00772	51		 push	 ecx
  00773	0f 57 c0	 xorps	 xmm0, xmm0
  00776	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077b	51		 push	 ecx
  0077c	0f 57 c0	 xorps	 xmm0, xmm0
  0077f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00784	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5428 : 
; 5429 : 			set_2d_window_rotation (mfd_env, -(ground_radar.scan_datum + (ground_radar.scan_arc_size * 0.5)));

  00789	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  00791	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  00799	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  007a1	f2 0f 58 c1	 addsd	 xmm0, xmm1
  007a5	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  007ac	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007b0	51		 push	 ecx
  007b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  007bb	50		 push	 eax
  007bc	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 5430 : 
; 5431 : 			draw_2d_line (0.0, 0.0, 0.0, radius, MFD_COLOUR4);

  007c1	b8 04 00 00 00	 mov	 eax, 4
  007c6	6b c8 03	 imul	 ecx, eax, 3
  007c9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007cf	52		 push	 edx
  007d0	51		 push	 ecx
  007d1	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _radius$24[ebp]
  007d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007de	51		 push	 ecx
  007df	0f 57 c0	 xorps	 xmm0, xmm0
  007e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e7	51		 push	 ecx
  007e8	0f 57 c0	 xorps	 xmm0, xmm0
  007eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f0	51		 push	 ecx
  007f1	0f 57 c0	 xorps	 xmm0, xmm0
  007f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5432 : 
; 5433 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  007fe	51		 push	 ecx
  007ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00807	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0080c	51		 push	 ecx
  0080d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00815	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081a	51		 push	 ecx
  0081b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00823	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00828	51		 push	 ecx
  00829	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00831	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00836	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0083b	50		 push	 eax
  0083c	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 5434 : 
; 5435 : 			set_2d_window_rotation (mfd_env, 0.0);

  00841	51		 push	 ecx
  00842	0f 57 c0	 xorps	 xmm0, xmm0
  00845	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0084a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0084f	50		 push	 eax
  00850	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
  00855	e9 68 02 00 00	 jmp	 $LN33@draw_tacti
$LN29@draw_tacti:

; 5436 : 		}
; 5437 : 		else if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_AIR_RADAR)

  0085a	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 2 ; target_acquisition_system
  00861	0f 85 5b 02 00
	00		 jne	 $LN33@draw_tacti

; 5438 : 		{
; 5439 : 			set_2d_viewport_origin (mfd_env, u, v);

  00867	51		 push	 ecx
  00868	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  00870	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00875	51		 push	 ecx
  00876	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  0087e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00883	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00888	50		 push	 eax
  00889	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 5440 : 
; 5441 : 			radius = air_radar.scan_range * scale;

  0088e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A
  00896	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0089e	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _radius$24[ebp], xmm0

; 5442 : 
; 5443 : 			if (air_radar.scan_arc_size == COMANCHE_RADAR_SCAN_ARC_SIZE_360)

  008a6	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  008ae	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@40c90fdb
  008b5	9f		 lahf
  008b6	f6 c4 44	 test	 ah, 68			; 00000044H
  008b9	7a 39		 jp	 SHORT $LN32@draw_tacti

; 5444 : 			{
; 5445 : 				draw_2d_circle (0.0, 0.0, radius, MFD_COLOUR4);

  008bb	b8 04 00 00 00	 mov	 eax, 4
  008c0	6b c8 03	 imul	 ecx, eax, 3
  008c3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008c9	52		 push	 edx
  008ca	51		 push	 ecx
  008cb	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _radius$24[ebp]
  008d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d8	51		 push	 ecx
  008d9	0f 57 c0	 xorps	 xmm0, xmm0
  008dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e1	51		 push	 ecx
  008e2	0f 57 c0	 xorps	 xmm0, xmm0
  008e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ea	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 5446 : 			}
; 5447 : 			else

  008ef	e9 ce 01 00 00	 jmp	 $LN33@draw_tacti
$LN32@draw_tacti:

; 5448 : 			{
; 5449 : 				set_2d_window_rotation (mfd_env, -air_radar.scan_datum);

  008f4	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  008fc	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00903	51		 push	 ecx
  00904	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00909	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0090e	50		 push	 eax
  0090f	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 5450 : 
; 5451 : 				draw_radar_arc (air_radar.scan_arc_size, radius, MFD_COLOUR4);

  00914	b8 04 00 00 00	 mov	 eax, 4
  00919	6b c8 03	 imul	 ecx, eax, 3
  0091c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00922	52		 push	 edx
  00923	51		 push	 ecx
  00924	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _radius$24[ebp]
  0092c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00931	51		 push	 ecx
  00932	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  0093a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0093f	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 5452 : 
; 5453 : 				draw_2d_line (0.0, 0.0, 0.0, radius, MFD_COLOUR4);

  00944	b8 04 00 00 00	 mov	 eax, 4
  00949	6b c8 03	 imul	 ecx, eax, 3
  0094c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00952	52		 push	 edx
  00953	51		 push	 ecx
  00954	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _radius$24[ebp]
  0095c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00961	51		 push	 ecx
  00962	0f 57 c0	 xorps	 xmm0, xmm0
  00965	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0096a	51		 push	 ecx
  0096b	0f 57 c0	 xorps	 xmm0, xmm0
  0096e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00973	51		 push	 ecx
  00974	0f 57 c0	 xorps	 xmm0, xmm0
  00977	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0097c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5454 : 
; 5455 : 				set_2d_window_rotation (mfd_env, -(air_radar.scan_datum - (air_radar.scan_arc_size * 0.5)));

  00981	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  00989	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  00991	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00999	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0099d	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  009a4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009a8	51		 push	 ecx
  009a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  009b3	50		 push	 eax
  009b4	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 5456 : 
; 5457 : 				draw_2d_line (0.0, 0.0, 0.0, radius, MFD_COLOUR4);

  009b9	b8 04 00 00 00	 mov	 eax, 4
  009be	6b c8 03	 imul	 ecx, eax, 3
  009c1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009c7	52		 push	 edx
  009c8	51		 push	 ecx
  009c9	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _radius$24[ebp]
  009d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009d6	51		 push	 ecx
  009d7	0f 57 c0	 xorps	 xmm0, xmm0
  009da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009df	51		 push	 ecx
  009e0	0f 57 c0	 xorps	 xmm0, xmm0
  009e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009e8	51		 push	 ecx
  009e9	0f 57 c0	 xorps	 xmm0, xmm0
  009ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009f1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5458 : 
; 5459 : 				set_2d_window_rotation (mfd_env, -(air_radar.scan_datum + (air_radar.scan_arc_size * 0.5)));

  009f6	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  009fe	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  00a06	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00a0e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00a12	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00a19	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a1d	51		 push	 ecx
  00a1e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a23	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a28	50		 push	 eax
  00a29	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 5460 : 
; 5461 : 				draw_2d_line (0.0, 0.0, 0.0, radius, MFD_COLOUR4);

  00a2e	b8 04 00 00 00	 mov	 eax, 4
  00a33	6b c8 03	 imul	 ecx, eax, 3
  00a36	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a3c	52		 push	 edx
  00a3d	51		 push	 ecx
  00a3e	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _radius$24[ebp]
  00a46	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a4b	51		 push	 ecx
  00a4c	0f 57 c0	 xorps	 xmm0, xmm0
  00a4f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a54	51		 push	 ecx
  00a55	0f 57 c0	 xorps	 xmm0, xmm0
  00a58	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a5d	51		 push	 ecx
  00a5e	0f 57 c0	 xorps	 xmm0, xmm0
  00a61	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a66	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5462 : 
; 5463 : 				set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00a6b	51		 push	 ecx
  00a6c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00a74	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a79	51		 push	 ecx
  00a7a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00a82	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a87	51		 push	 ecx
  00a88	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00a90	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a95	51		 push	 ecx
  00a96	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00a9e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00aa8	50		 push	 eax
  00aa9	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 5464 : 
; 5465 : 				set_2d_window_rotation (mfd_env, 0.0);

  00aae	51		 push	 ecx
  00aaf	0f 57 c0	 xorps	 xmm0, xmm0
  00ab2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ab7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00abc	50		 push	 eax
  00abd	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN33@draw_tacti:

; 5466 : 			}
; 5467 : 		}
; 5468 : 	}
; 5469 : 
; 5470 : 	////////////////////////////////////////
; 5471 : 	//
; 5472 : 	// waypoint route
; 5473 : 	//
; 5474 : 	////////////////////////////////////////
; 5475 : 
; 5476 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_TARGET && !comanche_damage.navigation_computer)

  00ac2	83 bd 28 ff ff
	ff 01		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 1
  00ac9	0f 84 e1 07 00
	00		 je	 $LN35@draw_tacti
  00acf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00ad4	c1 e8 07	 shr	 eax, 7
  00ad7	83 e0 01	 and	 eax, 1
  00ada	0f 85 d0 07 00
	00		 jne	 $LN35@draw_tacti

; 5477 : 	{
; 5478 : 		entity
; 5479 : 			*wp1,
; 5480 : 			*wp2;
; 5481 : 
; 5482 : 		vec3d
; 5483 : 			wp1_rel_position,
; 5484 : 			wp2_rel_position;
; 5485 : 
; 5486 : 		wp1 = get_local_entity_first_waypoint (source);

  00ae0	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00ae6	50		 push	 eax
  00ae7	e8 00 00 00 00	 call	 ?get_local_entity_first_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_first_waypoint
  00aec	89 85 ec fe ff
	ff		 mov	 DWORD PTR _wp1$23[ebp], eax

; 5487 : 
; 5488 : 		if (wp1)

  00af2	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _wp1$23[ebp], 0
  00af9	0f 84 b1 07 00
	00		 je	 $LN35@draw_tacti

; 5489 : 		{
; 5490 : 			set_2d_viewport_origin (mfd_env, u, v);

  00aff	51		 push	 ecx
  00b00	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  00b08	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b0d	51		 push	 ecx
  00b0e	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  00b16	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b1b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00b20	50		 push	 eax
  00b21	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 5491 : 
; 5492 : 			set_2d_window_rotation (mfd_env, source_heading);

  00b26	51		 push	 ecx
  00b27	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  00b2f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b34	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00b39	50		 push	 eax
  00b3a	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 5493 : 
; 5494 : 			//
; 5495 : 			// waypoint route
; 5496 : 			//
; 5497 : 
; 5498 : 			get_waypoint_display_position (source, wp1, &wp1_rel_position);

  00b3f	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _wp1_rel_position$21[ebp]
  00b45	50		 push	 eax
  00b46	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$23[ebp]
  00b4c	51		 push	 ecx
  00b4d	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  00b53	52		 push	 edx
  00b54	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 5499 : 
; 5500 : 			wp1_rel_position.x = (wp1_rel_position.x - source_position->x) * scale;

  00b59	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00b5f	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00b67	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00b6b	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00b73	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$21[ebp], xmm0

; 5501 : 			wp1_rel_position.z = (wp1_rel_position.z - source_position->z) * scale;

  00b7b	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00b81	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00b89	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00b8e	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00b96	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$21[ebp+8], xmm0

; 5502 : 
; 5503 : 			wp2 = get_local_entity_child_succ (wp1, LIST_TYPE_WAYPOINT);

  00b9e	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _wp1$23[ebp], 0
  00ba5	74 10		 je	 SHORT $LN154@draw_tacti
  00ba7	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _wp1$23[ebp]
  00bad	8b 08		 mov	 ecx, DWORD PTR [eax]
  00baf	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv480[ebp], ecx
  00bb5	eb 27		 jmp	 SHORT $LN155@draw_tacti
$LN154@draw_tacti:
  00bb7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  00bbd	81 c2 e3 00 00
	00		 add	 edx, 227		; 000000e3H
  00bc3	52		 push	 edx
  00bc4	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00bc9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00bce	50		 push	 eax
  00bcf	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00bd4	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv480[ebp], 0
$LN155@draw_tacti:
  00bde	b9 01 00 00 00	 mov	 ecx, 1
  00be3	85 c9		 test	 ecx, ecx
  00be5	74 0c		 je	 SHORT $LN156@draw_tacti
  00be7	c7 85 34 fe ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv488[ebp], 44 ; 0000002cH
  00bf1	eb 27		 jmp	 SHORT $LN157@draw_tacti
$LN156@draw_tacti:
  00bf3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  00bf9	81 c2 e3 00 00
	00		 add	 edx, 227		; 000000e3H
  00bff	52		 push	 edx
  00c00	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c05	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00c0a	50		 push	 eax
  00c0b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c10	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv488[ebp], 0
$LN157@draw_tacti:
  00c1a	6a 2c		 push	 44			; 0000002cH
  00c1c	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$23[ebp]
  00c22	51		 push	 ecx
  00c23	69 95 38 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv480[ebp], 180
  00c2d	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR tv488[ebp]
  00c33	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00c3a	ff d1		 call	 ecx
  00c3c	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _wp2$22[ebp], eax
$LN4@draw_tacti:

; 5504 : 
; 5505 : 			while (wp2)

  00c42	83 bd e8 fe ff
	ff 00		 cmp	 DWORD PTR _wp2$22[ebp], 0
  00c49	0f 84 90 02 00
	00		 je	 $LN5@draw_tacti

; 5506 : 			{
; 5507 : 				get_waypoint_display_position (source, wp2, &wp2_rel_position);

  00c4f	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR _wp2_rel_position$20[ebp]
  00c55	50		 push	 eax
  00c56	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _wp2$22[ebp]
  00c5c	51		 push	 ecx
  00c5d	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  00c63	52		 push	 edx
  00c64	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 5508 : 
; 5509 : 				wp2_rel_position.x = (wp2_rel_position.x - source_position->x) * scale;

  00c69	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00c6f	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp]
  00c77	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00c7b	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00c83	f3 0f 11 85 d0
	fe ff ff	 movss	 DWORD PTR _wp2_rel_position$20[ebp], xmm0

; 5510 : 				wp2_rel_position.z = (wp2_rel_position.z - source_position->z) * scale;

  00c8b	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00c91	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp+8]
  00c99	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00c9e	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00ca6	f3 0f 11 85 d8
	fe ff ff	 movss	 DWORD PTR _wp2_rel_position$20[ebp+8], xmm0

; 5511 : //VJ 030423 TSD render mod
; 5512 : 				if (draw_large_mfd)

  00cae	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00cb5	0f 84 a8 00 00
	00		 je	 $LN36@draw_tacti

; 5513 : 				{
; 5514 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  00cbb	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  00cc2	75 4e		 jne	 SHORT $LN38@draw_tacti

; 5515 : 						draw_2d_half_thick_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, MFD_COLOUR2);

  00cc4	b8 04 00 00 00	 mov	 eax, 4
  00cc9	c1 e0 00	 shl	 eax, 0
  00ccc	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00cd2	51		 push	 ecx
  00cd3	51		 push	 ecx
  00cd4	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp+8]
  00cdc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ce1	51		 push	 ecx
  00ce2	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp]
  00cea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cef	51		 push	 ecx
  00cf0	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00cf8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cfd	51		 push	 ecx
  00cfe	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00d06	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d0b	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 5516 : 					else

  00d10	eb 4c		 jmp	 SHORT $LN39@draw_tacti
$LN38@draw_tacti:

; 5517 : 						draw_2d_half_thick_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, MFD_COLOUR5);

  00d12	b8 04 00 00 00	 mov	 eax, 4
  00d17	c1 e0 02	 shl	 eax, 2
  00d1a	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00d20	51		 push	 ecx
  00d21	51		 push	 ecx
  00d22	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp+8]
  00d2a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d2f	51		 push	 ecx
  00d30	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp]
  00d38	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d3d	51		 push	 ecx
  00d3e	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00d46	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d4b	51		 push	 ecx
  00d4c	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00d54	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d59	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN39@draw_tacti:

; 5518 : 				}
; 5519 : 				else

  00d5e	e9 a3 00 00 00	 jmp	 $LN41@draw_tacti
$LN36@draw_tacti:

; 5520 : 				{
; 5521 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  00d63	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  00d6a	75 4e		 jne	 SHORT $LN40@draw_tacti

; 5522 : 						draw_2d_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, MFD_COLOUR2);

  00d6c	b8 04 00 00 00	 mov	 eax, 4
  00d71	c1 e0 00	 shl	 eax, 0
  00d74	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00d7a	51		 push	 ecx
  00d7b	51		 push	 ecx
  00d7c	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp+8]
  00d84	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d89	51		 push	 ecx
  00d8a	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp]
  00d92	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d97	51		 push	 ecx
  00d98	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00da0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00da5	51		 push	 ecx
  00da6	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00dae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00db3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5523 : 					else

  00db8	eb 4c		 jmp	 SHORT $LN41@draw_tacti
$LN40@draw_tacti:

; 5524 : 						draw_2d_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, MFD_COLOUR5);

  00dba	b8 04 00 00 00	 mov	 eax, 4
  00dbf	c1 e0 02	 shl	 eax, 2
  00dc2	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00dc8	51		 push	 ecx
  00dc9	51		 push	 ecx
  00dca	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp+8]
  00dd2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dd7	51		 push	 ecx
  00dd8	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp]
  00de0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00de5	51		 push	 ecx
  00de6	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00dee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00df3	51		 push	 ecx
  00df4	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00dfc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e01	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN41@draw_tacti:

; 5525 : 				}
; 5526 : 
; 5527 : 				wp1 = wp2;

  00e06	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _wp2$22[ebp]
  00e0c	89 85 ec fe ff
	ff		 mov	 DWORD PTR _wp1$23[ebp], eax

; 5528 : 
; 5529 : 				wp1_rel_position = wp2_rel_position;

  00e12	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _wp2_rel_position$20[ebp]
  00e18	89 85 dc fe ff
	ff		 mov	 DWORD PTR _wp1_rel_position$21[ebp], eax
  00e1e	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _wp2_rel_position$20[ebp+4]
  00e24	89 8d e0 fe ff
	ff		 mov	 DWORD PTR _wp1_rel_position$21[ebp+4], ecx
  00e2a	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _wp2_rel_position$20[ebp+8]
  00e30	89 95 e4 fe ff
	ff		 mov	 DWORD PTR _wp1_rel_position$21[ebp+8], edx

; 5530 : 
; 5531 : 				wp2 = get_local_entity_child_succ (wp1, LIST_TYPE_WAYPOINT);

  00e36	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _wp1$23[ebp], 0
  00e3d	74 10		 je	 SHORT $LN158@draw_tacti
  00e3f	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _wp1$23[ebp]
  00e45	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e47	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv541[ebp], ecx
  00e4d	eb 27		 jmp	 SHORT $LN159@draw_tacti
$LN158@draw_tacti:
  00e4f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  00e55	81 c2 ff 00 00
	00		 add	 edx, 255		; 000000ffH
  00e5b	52		 push	 edx
  00e5c	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e61	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00e66	50		 push	 eax
  00e67	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e6c	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv541[ebp], 0
$LN159@draw_tacti:
  00e76	b9 01 00 00 00	 mov	 ecx, 1
  00e7b	85 c9		 test	 ecx, ecx
  00e7d	74 0c		 je	 SHORT $LN160@draw_tacti
  00e7f	c7 85 34 fe ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv549[ebp], 44 ; 0000002cH
  00e89	eb 27		 jmp	 SHORT $LN161@draw_tacti
$LN160@draw_tacti:
  00e8b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  00e91	81 c2 ff 00 00
	00		 add	 edx, 255		; 000000ffH
  00e97	52		 push	 edx
  00e98	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e9d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00ea2	50		 push	 eax
  00ea3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ea8	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv549[ebp], 0
$LN161@draw_tacti:
  00eb2	6a 2c		 push	 44			; 0000002cH
  00eb4	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$23[ebp]
  00eba	51		 push	 ecx
  00ebb	69 95 38 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv541[ebp], 180
  00ec5	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR tv549[ebp]
  00ecb	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00ed2	ff d1		 call	 ecx
  00ed4	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _wp2$22[ebp], eax

; 5532 : 			}

  00eda	e9 63 fd ff ff	 jmp	 $LN4@draw_tacti
$LN5@draw_tacti:

; 5533 : 
; 5534 : 			//
; 5535 : 			// waypoint markers
; 5536 : 			//
; 5537 : 
; 5538 : 			set_mono_font_colour (MFD_COLOUR6);

  00edf	b8 04 00 00 00	 mov	 eax, 4
  00ee4	6b c8 05	 imul	 ecx, eax, 5
  00ee7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00eed	52		 push	 edx
  00eee	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5539 : 
; 5540 : 			if (draw_large_mfd)

  00ef3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00efa	74 09		 je	 SHORT $LN42@draw_tacti

; 5541 : 			{
; 5542 : 				set_mono_font_type (MONO_FONT_TYPE_7X12);

  00efc	6a 05		 push	 5
  00efe	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 5543 : 			}
; 5544 : 			else

  00f03	eb 07		 jmp	 SHORT $LN43@draw_tacti
$LN42@draw_tacti:

; 5545 : 			{
; 5546 : 				set_mono_font_type (MONO_FONT_TYPE_5X7);

  00f05	6a 01		 push	 1
  00f07	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN43@draw_tacti:

; 5547 : 			}
; 5548 : 
; 5549 : 			wp1 = get_local_entity_first_waypoint (source);

  00f0c	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00f12	50		 push	 eax
  00f13	e8 00 00 00 00	 call	 ?get_local_entity_first_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_first_waypoint
  00f18	89 85 ec fe ff
	ff		 mov	 DWORD PTR _wp1$23[ebp], eax
$LN6@draw_tacti:

; 5550 : 
; 5551 : 			while (wp1)

  00f1e	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _wp1$23[ebp], 0
  00f25	0f 84 2e 03 00
	00		 je	 $LN7@draw_tacti

; 5552 : 			{
; 5553 : 				get_waypoint_display_position (source, wp1, &wp1_rel_position);

  00f2b	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _wp1_rel_position$21[ebp]
  00f31	50		 push	 eax
  00f32	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$23[ebp]
  00f38	51		 push	 ecx
  00f39	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  00f3f	52		 push	 edx
  00f40	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 5554 : 
; 5555 : 				wp1_rel_position.x = (wp1_rel_position.x - source_position->x) * scale;

  00f45	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00f4b	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00f53	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00f57	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00f5f	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$21[ebp], xmm0

; 5556 : 				wp1_rel_position.z = (wp1_rel_position.z - source_position->z) * scale;

  00f67	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00f6d	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00f75	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00f7a	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00f82	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$21[ebp+8], xmm0

; 5557 : 
; 5558 : 				if (draw_large_mfd)

  00f8a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00f91	0f 84 bc 00 00
	00		 je	 $LN44@draw_tacti

; 5559 : 				{
; 5560 : //VJ 030423 TSD render mod
; 5561 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  00f97	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  00f9e	75 37		 jne	 SHORT $LN46@draw_tacti

; 5562 : 						draw_2d_mono_sprite (large_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, MFD_COLOUR2);

  00fa0	b8 04 00 00 00	 mov	 eax, 4
  00fa5	c1 e0 00	 shl	 eax, 0
  00fa8	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00fae	51		 push	 ecx
  00faf	51		 push	 ecx
  00fb0	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00fb8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fbd	51		 push	 ecx
  00fbe	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00fc6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fcb	68 00 00 00 00	 push	 OFFSET ?large_tsd_waypoint_marker@@3PADA
  00fd0	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 5563 : 					else

  00fd5	eb 35		 jmp	 SHORT $LN47@draw_tacti
$LN46@draw_tacti:

; 5564 : 						draw_2d_mono_sprite (large_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, MFD_COLOUR5);

  00fd7	b8 04 00 00 00	 mov	 eax, 4
  00fdc	c1 e0 02	 shl	 eax, 2
  00fdf	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00fe5	51		 push	 ecx
  00fe6	51		 push	 ecx
  00fe7	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00fef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ff4	51		 push	 ecx
  00ff5	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00ffd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01002	68 00 00 00 00	 push	 OFFSET ?large_tsd_waypoint_marker@@3PADA
  01007	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN47@draw_tacti:

; 5565 : 
; 5566 : 					set_2d_mono_font_position (wp1_rel_position.x, wp1_rel_position.z);

  0100c	51		 push	 ecx
  0100d	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  01015	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0101a	51		 push	 ecx
  0101b	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  01023	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01028	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5567 : 
; 5568 : 					set_mono_font_rel_position (-2.0, -4.0);

  0102d	51		 push	 ecx
  0102e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  01036	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0103b	51		 push	 ecx
  0103c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  01044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01049	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5569 : 				}
; 5570 : 				else

  0104e	e9 b7 00 00 00	 jmp	 $LN45@draw_tacti
$LN44@draw_tacti:

; 5571 : 				{
; 5572 : //VJ 030423 TSD render mod
; 5573 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  01053	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  0105a	75 37		 jne	 SHORT $LN48@draw_tacti

; 5574 : 						draw_2d_mono_sprite (small_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, MFD_COLOUR2);

  0105c	b8 04 00 00 00	 mov	 eax, 4
  01061	c1 e0 00	 shl	 eax, 0
  01064	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0106a	51		 push	 ecx
  0106b	51		 push	 ecx
  0106c	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  01074	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01079	51		 push	 ecx
  0107a	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  01082	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01087	68 00 00 00 00	 push	 OFFSET ?small_tsd_waypoint_marker@@3PADA
  0108c	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 5575 : 					else

  01091	eb 35		 jmp	 SHORT $LN49@draw_tacti
$LN48@draw_tacti:

; 5576 : 						draw_2d_mono_sprite (small_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, MFD_COLOUR5);

  01093	b8 04 00 00 00	 mov	 eax, 4
  01098	c1 e0 02	 shl	 eax, 2
  0109b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  010a1	51		 push	 ecx
  010a2	51		 push	 ecx
  010a3	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  010ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010b0	51		 push	 ecx
  010b1	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  010b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010be	68 00 00 00 00	 push	 OFFSET ?small_tsd_waypoint_marker@@3PADA
  010c3	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN49@draw_tacti:

; 5577 : 
; 5578 : 					set_2d_mono_font_position (wp1_rel_position.x, wp1_rel_position.z);

  010c8	51		 push	 ecx
  010c9	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  010d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010d6	51		 push	 ecx
  010d7	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  010df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010e4	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5579 : 
; 5580 : 					set_mono_font_rel_position (-2.0, -2.0);

  010e9	51		 push	 ecx
  010ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  010f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010f7	51		 push	 ecx
  010f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  01100	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01105	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN45@draw_tacti:

; 5581 : 				}
; 5582 : 
; 5583 : 				print_mono_font_char (get_local_entity_char_value (wp1, CHAR_TYPE_TAG));

  0110a	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _wp1$23[ebp], 0
  01111	74 10		 je	 SHORT $LN162@draw_tacti
  01113	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _wp1$23[ebp]
  01119	8b 08		 mov	 ecx, DWORD PTR [eax]
  0111b	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv614[ebp], ecx
  01121	eb 27		 jmp	 SHORT $LN163@draw_tacti
$LN162@draw_tacti:
  01123	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  01129	81 c2 33 01 00
	00		 add	 edx, 307		; 00000133H
  0112f	52		 push	 edx
  01130	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01135	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0113a	50		 push	 eax
  0113b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01140	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv614[ebp], 0
$LN163@draw_tacti:
  0114a	b9 01 00 00 00	 mov	 ecx, 1
  0114f	85 c9		 test	 ecx, ecx
  01151	74 0c		 je	 SHORT $LN164@draw_tacti
  01153	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv622[ebp], 0
  0115d	eb 27		 jmp	 SHORT $LN165@draw_tacti
$LN164@draw_tacti:
  0115f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  01165	81 c2 33 01 00
	00		 add	 edx, 307		; 00000133H
  0116b	52		 push	 edx
  0116c	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01171	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  01176	50		 push	 eax
  01177	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0117c	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv622[ebp], 0
$LN165@draw_tacti:
  01186	6a 00		 push	 0
  01188	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$23[ebp]
  0118e	51		 push	 ecx
  0118f	8b 95 34 fe ff
	ff		 mov	 edx, DWORD PTR tv622[ebp]
  01195	c1 e2 02	 shl	 edx, 2
  01198	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv614[ebp]
  0119e	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[edx+eax*8]
  011a5	ff d1		 call	 ecx
  011a7	0f b6 d0	 movzx	 edx, al
  011aa	52		 push	 edx
  011ab	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 5584 : 
; 5585 : 				wp1 = get_local_entity_child_succ (wp1, LIST_TYPE_WAYPOINT);

  011b0	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _wp1$23[ebp], 0
  011b7	74 10		 je	 SHORT $LN166@draw_tacti
  011b9	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _wp1$23[ebp]
  011bf	8b 08		 mov	 ecx, DWORD PTR [eax]
  011c1	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv635[ebp], ecx
  011c7	eb 27		 jmp	 SHORT $LN167@draw_tacti
$LN166@draw_tacti:
  011c9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  011cf	81 c2 35 01 00
	00		 add	 edx, 309		; 00000135H
  011d5	52		 push	 edx
  011d6	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  011db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  011e0	50		 push	 eax
  011e1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  011e6	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv635[ebp], 0
$LN167@draw_tacti:
  011f0	b9 01 00 00 00	 mov	 ecx, 1
  011f5	85 c9		 test	 ecx, ecx
  011f7	74 0c		 je	 SHORT $LN168@draw_tacti
  011f9	c7 85 34 fe ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv643[ebp], 44 ; 0000002cH
  01203	eb 27		 jmp	 SHORT $LN169@draw_tacti
$LN168@draw_tacti:
  01205	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0120b	81 c2 35 01 00
	00		 add	 edx, 309		; 00000135H
  01211	52		 push	 edx
  01212	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01217	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0121c	50		 push	 eax
  0121d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01222	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv643[ebp], 0
$LN169@draw_tacti:
  0122c	6a 2c		 push	 44			; 0000002cH
  0122e	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$23[ebp]
  01234	51		 push	 ecx
  01235	69 95 38 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv635[ebp], 180
  0123f	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR tv643[ebp]
  01245	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0124c	ff d1		 call	 ecx
  0124e	89 85 ec fe ff
	ff		 mov	 DWORD PTR _wp1$23[ebp], eax

; 5586 : 			}

  01254	e9 c5 fc ff ff	 jmp	 $LN6@draw_tacti
$LN7@draw_tacti:

; 5587 : 
; 5588 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  01259	51		 push	 ecx
  0125a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  01262	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01267	51		 push	 ecx
  01268	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  01270	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01275	51		 push	 ecx
  01276	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0127e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01283	51		 push	 ecx
  01284	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0128c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01291	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01296	50		 push	 eax
  01297	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 5589 : 
; 5590 : 			set_2d_window_rotation (mfd_env, 0.0);

  0129c	51		 push	 ecx
  0129d	0f 57 c0	 xorps	 xmm0, xmm0
  012a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  012aa	50		 push	 eax
  012ab	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN35@draw_tacti:

; 5591 : 		}
; 5592 : 	}
; 5593 : 
; 5594 : 	////////////////////////////////////////
; 5595 : 	//
; 5596 : 	// targets
; 5597 : 	//
; 5598 : 	////////////////////////////////////////
; 5599 : 
; 5600 : 	{
; 5601 : 		entity
; 5602 : 			*target,
; 5603 : 			*launched_weapon;
; 5604 : 
; 5605 : 		vec3d
; 5606 : 			*target_position;
; 5607 : 
; 5608 : 		threat_types
; 5609 : 			threat_type;
; 5610 : 
; 5611 : 		int
; 5612 : 			draw_threat_line;
; 5613 : 
; 5614 : 		float
; 5615 : 			air_scan_range,
; 5616 : 			dx,
; 5617 : 			dy;
; 5618 : 
; 5619 : 		if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)

  012b0	83 bd 28 ff ff
	ff 02		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 2
  012b7	0f 84 c6 11 00
	00		 je	 $LN50@draw_tacti

; 5620 : 		{
; 5621 : 			*tsd_threat_line_flash_timer -= get_delta_time ();

  012bd	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_threat_line_flash_timer$[ebp]
  012c3	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  012c7	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  012cf	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _tsd_threat_line_flash_timer$[ebp]
  012d5	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 5622 : 
; 5623 : 			if (*tsd_threat_line_flash_timer < 0.0)

  012d9	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_threat_line_flash_timer$[ebp]
  012df	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  012e3	0f 57 c9	 xorps	 xmm1, xmm1
  012e6	66 0f 2f c8	 comisd	 xmm1, xmm0
  012ea	76 25		 jbe	 SHORT $LN51@draw_tacti

; 5624 : 			{
; 5625 : 				*tsd_threat_line_flash_timer = TSD_THREAT_LINE_FLASH_RATE;

  012ec	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_threat_line_flash_timer$[ebp]
  012f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  012fa	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 5626 : 
; 5627 : 				*tsd_draw_threat_line_status ^= 1;

  012fe	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_draw_threat_line_status$[ebp]
  01304	8b 08		 mov	 ecx, DWORD PTR [eax]
  01306	83 f1 01	 xor	 ecx, 1
  01309	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR _tsd_draw_threat_line_status$[ebp]
  0130f	89 0a		 mov	 DWORD PTR [edx], ecx
$LN51@draw_tacti:

; 5628 : 			}
; 5629 : 
; 5630 : 			set_2d_viewport_origin (mfd_env, u, v);

  01311	51		 push	 ecx
  01312	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  0131a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0131f	51		 push	 ecx
  01320	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  01328	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0132d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01332	50		 push	 eax
  01333	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 5631 : 
; 5632 : 			set_2d_window_rotation (mfd_env, source_heading);

  01338	51		 push	 ecx
  01339	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  01341	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01346	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0134b	50		 push	 eax
  0134c	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 5633 : 
; 5634 : 			//
; 5635 : 			// display enemy SAM and AAA threat range circles
; 5636 : 			//
; 5637 : 
; 5638 : 			target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  01351	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01358	74 10		 je	 SHORT $LN170@draw_tacti
  0135a	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01360	8b 08		 mov	 ecx, DWORD PTR [eax]
  01362	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv672[ebp], ecx
  01368	eb 27		 jmp	 SHORT $LN171@draw_tacti
$LN170@draw_tacti:
  0136a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  01370	81 c2 6a 01 00
	00		 add	 edx, 362		; 0000016aH
  01376	52		 push	 edx
  01377	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0137c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01381	50		 push	 eax
  01382	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01387	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv672[ebp], 0
$LN171@draw_tacti:
  01391	b9 01 00 00 00	 mov	 ecx, 1
  01396	85 c9		 test	 ecx, ecx
  01398	74 0c		 je	 SHORT $LN172@draw_tacti
  0139a	c7 85 34 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv680[ebp], 18 ; 00000012H
  013a4	eb 27		 jmp	 SHORT $LN173@draw_tacti
$LN172@draw_tacti:
  013a6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  013ac	81 c2 6a 01 00
	00		 add	 edx, 362		; 0000016aH
  013b2	52		 push	 edx
  013b3	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  013b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  013bd	50		 push	 eax
  013be	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  013c3	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv680[ebp], 0
$LN173@draw_tacti:
  013cd	6a 12		 push	 18			; 00000012H
  013cf	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  013d5	51		 push	 ecx
  013d6	69 95 38 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv672[ebp], 180
  013e0	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR tv680[ebp]
  013e6	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  013ed	ff d1		 call	 ecx
  013ef	89 85 cc fe ff
	ff		 mov	 DWORD PTR _target$19[ebp], eax
$LN8@draw_tacti:

; 5639 : 
; 5640 : 			while (target)

  013f5	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  013fc	0f 84 17 05 00
	00		 je	 $LN9@draw_tacti

; 5641 : 			{
; 5642 : 				if (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  01402	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01409	74 10		 je	 SHORT $LN174@draw_tacti
  0140b	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01411	8b 08		 mov	 ecx, DWORD PTR [eax]
  01413	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv692[ebp], ecx
  01419	eb 20		 jmp	 SHORT $LN175@draw_tacti
$LN174@draw_tacti:
  0141b	68 0a 16 00 00	 push	 5642			; 0000160aH
  01420	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01425	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0142b	52		 push	 edx
  0142c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01431	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv692[ebp], 0
$LN175@draw_tacti:
  0143b	b8 01 00 00 00	 mov	 eax, 1
  01440	85 c0		 test	 eax, eax
  01442	74 0c		 je	 SHORT $LN176@draw_tacti
  01444	c7 85 34 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv699[ebp], 66 ; 00000042H
  0144e	eb 20		 jmp	 SHORT $LN177@draw_tacti
$LN176@draw_tacti:
  01450	68 0a 16 00 00	 push	 5642			; 0000160aH
  01455	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0145a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01460	51		 push	 ecx
  01461	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01466	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv699[ebp], 0
$LN177@draw_tacti:
  01470	6a 42		 push	 66			; 00000042H
  01472	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  01478	52		 push	 edx
  01479	69 85 38 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv692[ebp], 1116
  01483	8b 8d 34 fe ff
	ff		 mov	 ecx, DWORD PTR tv699[ebp]
  01489	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01490	ff d2		 call	 edx
  01492	85 c0		 test	 eax, eax
  01494	0f 85 d6 03 00
	00		 jne	 $LN59@draw_tacti

; 5643 : 				{
; 5644 : 					if (source_side != get_local_entity_int_value (target, INT_TYPE_SIDE))

  0149a	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  014a1	74 10		 je	 SHORT $LN178@draw_tacti
  014a3	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  014a9	8b 08		 mov	 ecx, DWORD PTR [eax]
  014ab	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv711[ebp], ecx
  014b1	eb 20		 jmp	 SHORT $LN179@draw_tacti
$LN178@draw_tacti:
  014b3	68 0c 16 00 00	 push	 5644			; 0000160cH
  014b8	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  014bd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  014c3	52		 push	 edx
  014c4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  014c9	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv711[ebp], 0
$LN179@draw_tacti:
  014d3	b8 01 00 00 00	 mov	 eax, 1
  014d8	85 c0		 test	 eax, eax
  014da	74 0c		 je	 SHORT $LN180@draw_tacti
  014dc	c7 85 34 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv718[ebp], 187 ; 000000bbH
  014e6	eb 20		 jmp	 SHORT $LN181@draw_tacti
$LN180@draw_tacti:
  014e8	68 0c 16 00 00	 push	 5644			; 0000160cH
  014ed	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  014f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  014f8	51		 push	 ecx
  014f9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  014fe	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv718[ebp], 0
$LN181@draw_tacti:
  01508	68 bb 00 00 00	 push	 187			; 000000bbH
  0150d	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  01513	52		 push	 edx
  01514	69 85 38 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv711[ebp], 1116
  0151e	8b 8d 34 fe ff
	ff		 mov	 ecx, DWORD PTR tv718[ebp]
  01524	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0152b	ff d2		 call	 edx
  0152d	39 85 2c ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  01533	0f 84 37 03 00
	00		 je	 $LN59@draw_tacti

; 5645 : 					{
; 5646 : 						threat_type = (threat_types) get_local_entity_int_value (target, INT_TYPE_THREAT_TYPE);

  01539	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01540	74 10		 je	 SHORT $LN182@draw_tacti
  01542	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01548	8b 08		 mov	 ecx, DWORD PTR [eax]
  0154a	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv731[ebp], ecx
  01550	eb 27		 jmp	 SHORT $LN183@draw_tacti
$LN182@draw_tacti:
  01552	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  01558	81 c2 72 01 00
	00		 add	 edx, 370		; 00000172H
  0155e	52		 push	 edx
  0155f	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01564	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01569	50		 push	 eax
  0156a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0156f	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv731[ebp], 0
$LN183@draw_tacti:
  01579	b9 01 00 00 00	 mov	 ecx, 1
  0157e	85 c9		 test	 ecx, ecx
  01580	74 0c		 je	 SHORT $LN184@draw_tacti
  01582	c7 85 34 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv739[ebp], 233 ; 000000e9H
  0158c	eb 27		 jmp	 SHORT $LN185@draw_tacti
$LN184@draw_tacti:
  0158e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  01594	81 c2 72 01 00
	00		 add	 edx, 370		; 00000172H
  0159a	52		 push	 edx
  0159b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  015a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  015a5	50		 push	 eax
  015a6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  015ab	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv739[ebp], 0
$LN185@draw_tacti:
  015b5	68 e9 00 00 00	 push	 233			; 000000e9H
  015ba	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  015c0	51		 push	 ecx
  015c1	69 95 38 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv731[ebp], 1116
  015cb	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR tv739[ebp]
  015d1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  015d8	ff d1		 call	 ecx
  015da	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _threat_type$16[ebp], eax

; 5647 : 
; 5648 : 						if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA))

  015e0	83 bd c0 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$16[ebp], 5
  015e7	74 0d		 je	 SHORT $LN55@draw_tacti
  015e9	83 bd c0 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$16[ebp], 6
  015f0	0f 85 7a 02 00
	00		 jne	 $LN59@draw_tacti
$LN55@draw_tacti:

; 5649 : 						{
; 5650 : 							target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  015f6	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  015fd	74 10		 je	 SHORT $LN186@draw_tacti
  015ff	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01605	8b 08		 mov	 ecx, DWORD PTR [eax]
  01607	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv753[ebp], ecx
  0160d	eb 27		 jmp	 SHORT $LN187@draw_tacti
$LN186@draw_tacti:
  0160f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  01615	81 c2 76 01 00
	00		 add	 edx, 374		; 00000176H
  0161b	52		 push	 edx
  0161c	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01621	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01626	50		 push	 eax
  01627	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0162c	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv753[ebp], 0
$LN187@draw_tacti:
  01636	b9 01 00 00 00	 mov	 ecx, 1
  0163b	85 c9		 test	 ecx, ecx
  0163d	74 0c		 je	 SHORT $LN188@draw_tacti
  0163f	c7 85 34 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv761[ebp], 8
  01649	eb 27		 jmp	 SHORT $LN189@draw_tacti
$LN188@draw_tacti:
  0164b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  01651	81 c2 76 01 00
	00		 add	 edx, 374		; 00000176H
  01657	52		 push	 edx
  01658	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0165d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  01662	50		 push	 eax
  01663	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01668	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv761[ebp], 0
$LN189@draw_tacti:
  01672	6a 08		 push	 8
  01674	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  0167a	51		 push	 ecx
  0167b	6b 95 38 fe ff
	ff 60		 imul	 edx, DWORD PTR tv753[ebp], 96
  01682	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR tv761[ebp]
  01688	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0168f	ff d1		 call	 ecx
  01691	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _target_position$17[ebp], eax

; 5651 : 
; 5652 : 							dx = (target_position->x - source_position->x) * scale;

  01697	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _target_position$17[ebp]
  0169d	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  016a3	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  016a7	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  016ab	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  016b3	f3 0f 11 85 b4
	fe ff ff	 movss	 DWORD PTR _dx$13[ebp], xmm0

; 5653 : 							dy = (target_position->z - source_position->z) * scale;

  016bb	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _target_position$17[ebp]
  016c1	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  016c7	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  016cc	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  016d1	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  016d9	f3 0f 11 85 b0
	fe ff ff	 movss	 DWORD PTR _dy$12[ebp], xmm0

; 5654 : 
; 5655 : 							air_scan_range = get_local_entity_float_value (target, FLOAT_TYPE_AIR_SCAN_RANGE) * scale;

  016e1	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  016e8	74 10		 je	 SHORT $LN190@draw_tacti
  016ea	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  016f0	8b 08		 mov	 ecx, DWORD PTR [eax]
  016f2	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv781[ebp], ecx
  016f8	eb 27		 jmp	 SHORT $LN191@draw_tacti
$LN190@draw_tacti:
  016fa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  01700	81 c2 7b 01 00
	00		 add	 edx, 379		; 0000017bH
  01706	52		 push	 edx
  01707	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0170c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01711	50		 push	 eax
  01712	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01717	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv781[ebp], 0
$LN191@draw_tacti:
  01721	b9 01 00 00 00	 mov	 ecx, 1
  01726	85 c9		 test	 ecx, ecx
  01728	74 0c		 je	 SHORT $LN192@draw_tacti
  0172a	c7 85 34 fe ff
	ff 05 00 00 00	 mov	 DWORD PTR tv789[ebp], 5
  01734	eb 27		 jmp	 SHORT $LN193@draw_tacti
$LN192@draw_tacti:
  01736	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0173c	81 c2 7b 01 00
	00		 add	 edx, 379		; 0000017bH
  01742	52		 push	 edx
  01743	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01748	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0174d	50		 push	 eax
  0174e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01753	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv789[ebp], 0
$LN193@draw_tacti:
  0175d	6a 05		 push	 5
  0175f	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  01765	51		 push	 ecx
  01766	69 95 38 fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv781[ebp], 700
  01770	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR tv789[ebp]
  01776	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0177d	ff d1		 call	 ecx
  0177f	d9 9d 30 fe ff
	ff		 fstp	 DWORD PTR tv2205[ebp]
  01785	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR tv2205[ebp]
  0178d	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01795	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR _air_scan_range$14[ebp], xmm0

; 5656 : 
; 5657 : //VJ 030423 TSD render mod, enemy of comanche so red
; 5658 : //VJ 030511 TSD render mod, enemy optional in eech.ini
; 5659 : //VJ 030530 TSD render mod, corrected colour vor original view MFD_COLOUR2
; 5660 : 							if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  0179d	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  017a4	75 43		 jne	 SHORT $LN56@draw_tacti

; 5661 : 								draw_2d_circle (dx, dy, air_scan_range, MFD_COLOUR2);

  017a6	b8 04 00 00 00	 mov	 eax, 4
  017ab	c1 e0 00	 shl	 eax, 0
  017ae	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  017b4	51		 push	 ecx
  017b5	51		 push	 ecx
  017b6	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR _air_scan_range$14[ebp]
  017be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017c3	51		 push	 ecx
  017c4	f3 0f 10 85 b0
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$12[ebp]
  017cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017d1	51		 push	 ecx
  017d2	f3 0f 10 85 b4
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$13[ebp]
  017da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017df	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 5662 : 							else

  017e4	e9 87 00 00 00	 jmp	 $LN59@draw_tacti
$LN56@draw_tacti:

; 5663 : 								if (command_line_tsd_enemy_colours)

  017e9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_tsd_enemy_colours@@3HA, 0 ; command_line_tsd_enemy_colours
  017f0	74 40		 je	 SHORT $LN58@draw_tacti

; 5664 : 									draw_2d_circle (dx, dy, air_scan_range, MFD_COLOUR4);

  017f2	b8 04 00 00 00	 mov	 eax, 4
  017f7	6b c8 03	 imul	 ecx, eax, 3
  017fa	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01800	52		 push	 edx
  01801	51		 push	 ecx
  01802	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR _air_scan_range$14[ebp]
  0180a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0180f	51		 push	 ecx
  01810	f3 0f 10 85 b0
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$12[ebp]
  01818	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0181d	51		 push	 ecx
  0181e	f3 0f 10 85 b4
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$13[ebp]
  01826	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0182b	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 5665 : 								else

  01830	eb 3e		 jmp	 SHORT $LN59@draw_tacti
$LN58@draw_tacti:

; 5666 : 									draw_2d_circle (dx, dy, air_scan_range, MFD_COLOUR8);

  01832	b8 04 00 00 00	 mov	 eax, 4
  01837	6b c8 0c	 imul	 ecx, eax, 12
  0183a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01840	52		 push	 edx
  01841	51		 push	 ecx
  01842	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR _air_scan_range$14[ebp]
  0184a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0184f	51		 push	 ecx
  01850	f3 0f 10 85 b0
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$12[ebp]
  01858	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0185d	51		 push	 ecx
  0185e	f3 0f 10 85 b4
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$13[ebp]
  01866	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0186b	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle
$LN59@draw_tacti:

; 5667 : 						}
; 5668 : 					}
; 5669 : 				}
; 5670 : 
; 5671 : 				target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  01870	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01877	74 10		 je	 SHORT $LN194@draw_tacti
  01879	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  0187f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01881	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv854[ebp], ecx
  01887	eb 27		 jmp	 SHORT $LN195@draw_tacti
$LN194@draw_tacti:
  01889	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0188f	81 c2 8b 01 00
	00		 add	 edx, 395		; 0000018bH
  01895	52		 push	 edx
  01896	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0189b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  018a0	50		 push	 eax
  018a1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  018a6	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv854[ebp], 0
$LN195@draw_tacti:
  018b0	b9 01 00 00 00	 mov	 ecx, 1
  018b5	85 c9		 test	 ecx, ecx
  018b7	74 0c		 je	 SHORT $LN196@draw_tacti
  018b9	c7 85 34 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv862[ebp], 18 ; 00000012H
  018c3	eb 27		 jmp	 SHORT $LN197@draw_tacti
$LN196@draw_tacti:
  018c5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  018cb	81 c2 8b 01 00
	00		 add	 edx, 395		; 0000018bH
  018d1	52		 push	 edx
  018d2	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  018d7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  018dc	50		 push	 eax
  018dd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  018e2	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv862[ebp], 0
$LN197@draw_tacti:
  018ec	6a 12		 push	 18			; 00000012H
  018ee	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  018f4	51		 push	 ecx
  018f5	69 95 38 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv854[ebp], 180
  018ff	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR tv862[ebp]
  01905	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0190c	ff d1		 call	 ecx
  0190e	89 85 cc fe ff
	ff		 mov	 DWORD PTR _target$19[ebp], eax

; 5672 : 			}

  01914	e9 dc fa ff ff	 jmp	 $LN8@draw_tacti
$LN9@draw_tacti:

; 5673 : 
; 5674 : 			//
; 5675 : 			// display all gunship targets (do not show ground radar clutter)
; 5676 : 			//
; 5677 : 
; 5678 : 			target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  01919	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01920	74 10		 je	 SHORT $LN198@draw_tacti
  01922	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01928	8b 08		 mov	 ecx, DWORD PTR [eax]
  0192a	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv874[ebp], ecx
  01930	eb 27		 jmp	 SHORT $LN199@draw_tacti
$LN198@draw_tacti:
  01932	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  01938	81 c2 92 01 00
	00		 add	 edx, 402		; 00000192H
  0193e	52		 push	 edx
  0193f	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01944	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01949	50		 push	 eax
  0194a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0194f	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv874[ebp], 0
$LN199@draw_tacti:
  01959	b9 01 00 00 00	 mov	 ecx, 1
  0195e	85 c9		 test	 ecx, ecx
  01960	74 0c		 je	 SHORT $LN200@draw_tacti
  01962	c7 85 34 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv882[ebp], 18 ; 00000012H
  0196c	eb 27		 jmp	 SHORT $LN201@draw_tacti
$LN200@draw_tacti:
  0196e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  01974	81 c2 92 01 00
	00		 add	 edx, 402		; 00000192H
  0197a	52		 push	 edx
  0197b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01980	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01985	50		 push	 eax
  01986	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0198b	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv882[ebp], 0
$LN201@draw_tacti:
  01995	6a 12		 push	 18			; 00000012H
  01997	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  0199d	51		 push	 ecx
  0199e	69 95 38 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv874[ebp], 180
  019a8	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR tv882[ebp]
  019ae	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  019b5	ff d1		 call	 ecx
  019b7	89 85 cc fe ff
	ff		 mov	 DWORD PTR _target$19[ebp], eax
$LN10@draw_tacti:

; 5679 : 
; 5680 : 			while (target)

  019bd	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  019c4	0f 84 92 01 00
	00		 je	 $LN11@draw_tacti

; 5681 : 			{
; 5682 : 				if (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  019ca	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  019d1	74 10		 je	 SHORT $LN202@draw_tacti
  019d3	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  019d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  019db	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv894[ebp], ecx
  019e1	eb 20		 jmp	 SHORT $LN203@draw_tacti
$LN202@draw_tacti:
  019e3	68 32 16 00 00	 push	 5682			; 00001632H
  019e8	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  019ed	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  019f3	52		 push	 edx
  019f4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  019f9	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv894[ebp], 0
$LN203@draw_tacti:
  01a03	b8 01 00 00 00	 mov	 eax, 1
  01a08	85 c0		 test	 eax, eax
  01a0a	74 0c		 je	 SHORT $LN204@draw_tacti
  01a0c	c7 85 34 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv901[ebp], 66 ; 00000042H
  01a16	eb 20		 jmp	 SHORT $LN205@draw_tacti
$LN204@draw_tacti:
  01a18	68 32 16 00 00	 push	 5682			; 00001632H
  01a1d	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01a22	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01a28	51		 push	 ecx
  01a29	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01a2e	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv901[ebp], 0
$LN205@draw_tacti:
  01a38	6a 42		 push	 66			; 00000042H
  01a3a	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  01a40	52		 push	 edx
  01a41	69 85 38 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv894[ebp], 1116
  01a4b	8b 8d 34 fe ff
	ff		 mov	 ecx, DWORD PTR tv901[ebp]
  01a51	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01a58	ff d2		 call	 edx
  01a5a	85 c0		 test	 eax, eax
  01a5c	75 55		 jne	 SHORT $LN62@draw_tacti

; 5683 : 				{
; 5684 : 					//VJ 030423 TSD render mod
; 5685 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  01a5e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  01a65	75 27		 jne	 SHORT $LN61@draw_tacti

; 5686 : 						draw_radar_target_symbol (target, source_position, scale, FALSE, FALSE);

  01a67	6a 00		 push	 0
  01a69	6a 00		 push	 0
  01a6b	51		 push	 ecx
  01a6c	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  01a74	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a79	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  01a7f	50		 push	 eax
  01a80	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  01a86	51		 push	 ecx
  01a87	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol

; 5687 : 					else

  01a8c	eb 25		 jmp	 SHORT $LN62@draw_tacti
$LN61@draw_tacti:

; 5688 : 						draw_radar_target_symbol (target, source_position, scale, FALSE, TRUE);

  01a8e	6a 01		 push	 1
  01a90	6a 00		 push	 0
  01a92	51		 push	 ecx
  01a93	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  01a9b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aa0	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  01aa6	50		 push	 eax
  01aa7	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  01aad	51		 push	 ecx
  01aae	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN62@draw_tacti:

; 5689 : 				}
; 5690 : 
; 5691 : 				target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  01ab3	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01aba	74 10		 je	 SHORT $LN206@draw_tacti
  01abc	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01ac2	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ac4	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv925[ebp], ecx
  01aca	eb 27		 jmp	 SHORT $LN207@draw_tacti
$LN206@draw_tacti:
  01acc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  01ad2	81 c2 9f 01 00
	00		 add	 edx, 415		; 0000019fH
  01ad8	52		 push	 edx
  01ad9	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01ade	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01ae3	50		 push	 eax
  01ae4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01ae9	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv925[ebp], 0
$LN207@draw_tacti:
  01af3	b9 01 00 00 00	 mov	 ecx, 1
  01af8	85 c9		 test	 ecx, ecx
  01afa	74 0c		 je	 SHORT $LN208@draw_tacti
  01afc	c7 85 34 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv933[ebp], 18 ; 00000012H
  01b06	eb 27		 jmp	 SHORT $LN209@draw_tacti
$LN208@draw_tacti:
  01b08	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  01b0e	81 c2 9f 01 00
	00		 add	 edx, 415		; 0000019fH
  01b14	52		 push	 edx
  01b15	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01b1a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01b1f	50		 push	 eax
  01b20	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01b25	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv933[ebp], 0
$LN209@draw_tacti:
  01b2f	6a 12		 push	 18			; 00000012H
  01b31	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  01b37	51		 push	 ecx
  01b38	69 95 38 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv925[ebp], 180
  01b42	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR tv933[ebp]
  01b48	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01b4f	ff d1		 call	 ecx
  01b51	89 85 cc fe ff
	ff		 mov	 DWORD PTR _target$19[ebp], eax

; 5692 : 			}

  01b57	e9 61 fe ff ff	 jmp	 $LN10@draw_tacti
$LN11@draw_tacti:

; 5693 : 
; 5694 : 			//
; 5695 : 			// draw selected target last
; 5696 : 			//
; 5697 : 
; 5698 : 			if (source_target)

  01b5c	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _source_target$[ebp], 0
  01b63	74 55		 je	 SHORT $LN65@draw_tacti

; 5699 : 			{
; 5700 : 				//VJ 030423 TSD render mod
; 5701 : 				if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  01b65	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  01b6c	75 27		 jne	 SHORT $LN64@draw_tacti

; 5702 : 					draw_radar_target_symbol (source_target, source_position, scale, TRUE, FALSE);

  01b6e	6a 00		 push	 0
  01b70	6a 01		 push	 1
  01b72	51		 push	 ecx
  01b73	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  01b7b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b80	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  01b86	50		 push	 eax
  01b87	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _source_target$[ebp]
  01b8d	51		 push	 ecx
  01b8e	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol

; 5703 : 				else

  01b93	eb 25		 jmp	 SHORT $LN65@draw_tacti
$LN64@draw_tacti:

; 5704 : 					draw_radar_target_symbol (source_target, source_position, scale, TRUE, TRUE);

  01b95	6a 01		 push	 1
  01b97	6a 01		 push	 1
  01b99	51		 push	 ecx
  01b9a	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  01ba2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ba7	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  01bad	50		 push	 eax
  01bae	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _source_target$[ebp]
  01bb4	51		 push	 ecx
  01bb5	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN65@draw_tacti:

; 5705 : 			}
; 5706 : 
; 5707 : 			//
; 5708 : 			// draw threat line if gunship is targetted (flash if missile fired)
; 5709 : 			//
; 5710 : 
; 5711 : 			target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  01bba	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01bc1	74 10		 je	 SHORT $LN210@draw_tacti
  01bc3	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01bc9	8b 08		 mov	 ecx, DWORD PTR [eax]
  01bcb	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv957[ebp], ecx
  01bd1	eb 27		 jmp	 SHORT $LN211@draw_tacti
$LN210@draw_tacti:
  01bd3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  01bd9	81 c2 b3 01 00
	00		 add	 edx, 435		; 000001b3H
  01bdf	52		 push	 edx
  01be0	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01be5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01bea	50		 push	 eax
  01beb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01bf0	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv957[ebp], 0
$LN211@draw_tacti:
  01bfa	b9 01 00 00 00	 mov	 ecx, 1
  01bff	85 c9		 test	 ecx, ecx
  01c01	74 0c		 je	 SHORT $LN212@draw_tacti
  01c03	c7 85 34 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv965[ebp], 18 ; 00000012H
  01c0d	eb 27		 jmp	 SHORT $LN213@draw_tacti
$LN212@draw_tacti:
  01c0f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  01c15	81 c2 b3 01 00
	00		 add	 edx, 435		; 000001b3H
  01c1b	52		 push	 edx
  01c1c	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01c21	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01c26	50		 push	 eax
  01c27	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01c2c	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv965[ebp], 0
$LN213@draw_tacti:
  01c36	6a 12		 push	 18			; 00000012H
  01c38	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  01c3e	51		 push	 ecx
  01c3f	69 95 38 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv957[ebp], 180
  01c49	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR tv965[ebp]
  01c4f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01c56	ff d1		 call	 ecx
  01c58	89 85 cc fe ff
	ff		 mov	 DWORD PTR _target$19[ebp], eax
$LN12@draw_tacti:

; 5712 : 
; 5713 : 			while (target)

  01c5e	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01c65	0f 84 c1 07 00
	00		 je	 $LN13@draw_tacti

; 5714 : 			{
; 5715 : 				if (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  01c6b	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01c72	74 10		 je	 SHORT $LN214@draw_tacti
  01c74	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01c7a	8b 08		 mov	 ecx, DWORD PTR [eax]
  01c7c	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv977[ebp], ecx
  01c82	eb 20		 jmp	 SHORT $LN215@draw_tacti
$LN214@draw_tacti:
  01c84	68 53 16 00 00	 push	 5715			; 00001653H
  01c89	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01c8e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01c94	52		 push	 edx
  01c95	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01c9a	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv977[ebp], 0
$LN215@draw_tacti:
  01ca4	b8 01 00 00 00	 mov	 eax, 1
  01ca9	85 c0		 test	 eax, eax
  01cab	74 0c		 je	 SHORT $LN216@draw_tacti
  01cad	c7 85 34 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv984[ebp], 66 ; 00000042H
  01cb7	eb 20		 jmp	 SHORT $LN217@draw_tacti
$LN216@draw_tacti:
  01cb9	68 53 16 00 00	 push	 5715			; 00001653H
  01cbe	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01cc3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01cc9	51		 push	 ecx
  01cca	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01ccf	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv984[ebp], 0
$LN217@draw_tacti:
  01cd9	6a 42		 push	 66			; 00000042H
  01cdb	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  01ce1	52		 push	 edx
  01ce2	69 85 38 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv977[ebp], 1116
  01cec	8b 8d 34 fe ff
	ff		 mov	 ecx, DWORD PTR tv984[ebp]
  01cf2	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01cf9	ff d2		 call	 edx
  01cfb	85 c0		 test	 eax, eax
  01cfd	0f 85 80 06 00
	00		 jne	 $LN74@draw_tacti

; 5716 : 				{
; 5717 : 					if (source_side != get_local_entity_int_value (target, INT_TYPE_SIDE))

  01d03	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01d0a	74 10		 je	 SHORT $LN218@draw_tacti
  01d0c	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01d12	8b 08		 mov	 ecx, DWORD PTR [eax]
  01d14	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv996[ebp], ecx
  01d1a	eb 20		 jmp	 SHORT $LN219@draw_tacti
$LN218@draw_tacti:
  01d1c	68 55 16 00 00	 push	 5717			; 00001655H
  01d21	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01d26	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01d2c	52		 push	 edx
  01d2d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01d32	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv996[ebp], 0
$LN219@draw_tacti:
  01d3c	b8 01 00 00 00	 mov	 eax, 1
  01d41	85 c0		 test	 eax, eax
  01d43	74 0c		 je	 SHORT $LN220@draw_tacti
  01d45	c7 85 34 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv1003[ebp], 187 ; 000000bbH
  01d4f	eb 20		 jmp	 SHORT $LN221@draw_tacti
$LN220@draw_tacti:
  01d51	68 55 16 00 00	 push	 5717			; 00001655H
  01d56	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01d5b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01d61	51		 push	 ecx
  01d62	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01d67	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1003[ebp], 0
$LN221@draw_tacti:
  01d71	68 bb 00 00 00	 push	 187			; 000000bbH
  01d76	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  01d7c	52		 push	 edx
  01d7d	69 85 38 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv996[ebp], 1116
  01d87	8b 8d 34 fe ff
	ff		 mov	 ecx, DWORD PTR tv1003[ebp]
  01d8d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01d94	ff d2		 call	 edx
  01d96	39 85 2c ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  01d9c	0f 84 e1 05 00
	00		 je	 $LN74@draw_tacti

; 5718 : 					{
; 5719 : 						if (get_local_entity_int_value (target, INT_TYPE_RADAR_ON))

  01da2	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01da9	74 10		 je	 SHORT $LN222@draw_tacti
  01dab	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01db1	8b 08		 mov	 ecx, DWORD PTR [eax]
  01db3	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv1015[ebp], ecx
  01db9	eb 20		 jmp	 SHORT $LN223@draw_tacti
$LN222@draw_tacti:
  01dbb	68 57 16 00 00	 push	 5719			; 00001657H
  01dc0	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01dc5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01dcb	52		 push	 edx
  01dcc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01dd1	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1015[ebp], 0
$LN223@draw_tacti:
  01ddb	b8 01 00 00 00	 mov	 eax, 1
  01de0	85 c0		 test	 eax, eax
  01de2	74 0c		 je	 SHORT $LN224@draw_tacti
  01de4	c7 85 34 fe ff
	ff a9 00 00 00	 mov	 DWORD PTR tv1022[ebp], 169 ; 000000a9H
  01dee	eb 20		 jmp	 SHORT $LN225@draw_tacti
$LN224@draw_tacti:
  01df0	68 57 16 00 00	 push	 5719			; 00001657H
  01df5	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01dfa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01e00	51		 push	 ecx
  01e01	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01e06	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1022[ebp], 0
$LN225@draw_tacti:
  01e10	68 a9 00 00 00	 push	 169			; 000000a9H
  01e15	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  01e1b	52		 push	 edx
  01e1c	69 85 38 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1015[ebp], 1116
  01e26	8b 8d 34 fe ff
	ff		 mov	 ecx, DWORD PTR tv1022[ebp]
  01e2c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01e33	ff d2		 call	 edx
  01e35	85 c0		 test	 eax, eax
  01e37	0f 84 46 05 00
	00		 je	 $LN74@draw_tacti

; 5720 : 						{
; 5721 : 							threat_type = (threat_types) get_local_entity_int_value (target, INT_TYPE_THREAT_TYPE);

  01e3d	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01e44	74 10		 je	 SHORT $LN226@draw_tacti
  01e46	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01e4c	8b 08		 mov	 ecx, DWORD PTR [eax]
  01e4e	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv1035[ebp], ecx
  01e54	eb 27		 jmp	 SHORT $LN227@draw_tacti
$LN226@draw_tacti:
  01e56	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  01e5c	81 c2 bd 01 00
	00		 add	 edx, 445		; 000001bdH
  01e62	52		 push	 edx
  01e63	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01e68	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01e6d	50		 push	 eax
  01e6e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01e73	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1035[ebp], 0
$LN227@draw_tacti:
  01e7d	b9 01 00 00 00	 mov	 ecx, 1
  01e82	85 c9		 test	 ecx, ecx
  01e84	74 0c		 je	 SHORT $LN228@draw_tacti
  01e86	c7 85 34 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv1043[ebp], 233 ; 000000e9H
  01e90	eb 27		 jmp	 SHORT $LN229@draw_tacti
$LN228@draw_tacti:
  01e92	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  01e98	81 c2 bd 01 00
	00		 add	 edx, 445		; 000001bdH
  01e9e	52		 push	 edx
  01e9f	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01ea4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01ea9	50		 push	 eax
  01eaa	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01eaf	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1043[ebp], 0
$LN229@draw_tacti:
  01eb9	68 e9 00 00 00	 push	 233			; 000000e9H
  01ebe	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  01ec4	51		 push	 ecx
  01ec5	69 95 38 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv1035[ebp], 1116
  01ecf	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR tv1043[ebp]
  01ed5	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  01edc	ff d1		 call	 ecx
  01ede	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _threat_type$16[ebp], eax

; 5722 : 
; 5723 : 							if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA) || (threat_type == THREAT_TYPE_AIRBORNE_RADAR))

  01ee4	83 bd c0 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$16[ebp], 5
  01eeb	74 16		 je	 SHORT $LN70@draw_tacti
  01eed	83 bd c0 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$16[ebp], 6
  01ef4	74 0d		 je	 SHORT $LN70@draw_tacti
  01ef6	83 bd c0 fe ff
	ff 04		 cmp	 DWORD PTR _threat_type$16[ebp], 4
  01efd	0f 85 80 04 00
	00		 jne	 $LN74@draw_tacti
$LN70@draw_tacti:

; 5724 : 							{
; 5725 : 								if (get_local_entity_parent (target, LIST_TYPE_TARGET) == source)

  01f03	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01f0a	74 10		 je	 SHORT $LN230@draw_tacti
  01f0c	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01f12	8b 08		 mov	 ecx, DWORD PTR [eax]
  01f14	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv1057[ebp], ecx
  01f1a	eb 20		 jmp	 SHORT $LN231@draw_tacti
$LN230@draw_tacti:
  01f1c	68 5d 16 00 00	 push	 5725			; 0000165dH
  01f21	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01f26	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01f2c	52		 push	 edx
  01f2d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01f32	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1057[ebp], 0
$LN231@draw_tacti:
  01f3c	b8 01 00 00 00	 mov	 eax, 1
  01f41	85 c0		 test	 eax, eax
  01f43	74 0c		 je	 SHORT $LN232@draw_tacti
  01f45	c7 85 34 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv1064[ebp], 38 ; 00000026H
  01f4f	eb 20		 jmp	 SHORT $LN233@draw_tacti
$LN232@draw_tacti:
  01f51	68 5d 16 00 00	 push	 5725			; 0000165dH
  01f56	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01f5b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01f61	51		 push	 ecx
  01f62	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01f67	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1064[ebp], 0
$LN233@draw_tacti:
  01f71	6a 26		 push	 38			; 00000026H
  01f73	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  01f79	52		 push	 edx
  01f7a	69 85 38 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv1057[ebp], 180
  01f84	8b 8d 34 fe ff
	ff		 mov	 ecx, DWORD PTR tv1064[ebp]
  01f8a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  01f91	ff d2		 call	 edx
  01f93	3b 85 fc fe ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  01f99	0f 85 e4 03 00
	00		 jne	 $LN74@draw_tacti

; 5726 : 								{
; 5727 : 									draw_threat_line = TRUE;

  01f9f	c7 85 bc fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _draw_threat_line$15[ebp], 1

; 5728 : 
; 5729 : 									launched_weapon = get_local_entity_first_child (target, LIST_TYPE_LAUNCHED_WEAPON);

  01fa9	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01fb0	74 10		 je	 SHORT $LN234@draw_tacti
  01fb2	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01fb8	8b 08		 mov	 ecx, DWORD PTR [eax]
  01fba	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv1077[ebp], ecx
  01fc0	eb 27		 jmp	 SHORT $LN235@draw_tacti
$LN234@draw_tacti:
  01fc2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  01fc8	81 c2 c5 01 00
	00		 add	 edx, 453		; 000001c5H
  01fce	52		 push	 edx
  01fcf	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  01fd4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01fd9	50		 push	 eax
  01fda	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01fdf	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1077[ebp], 0
$LN235@draw_tacti:
  01fe9	b9 01 00 00 00	 mov	 ecx, 1
  01fee	85 c9		 test	 ecx, ecx
  01ff0	74 0c		 je	 SHORT $LN236@draw_tacti
  01ff2	c7 85 34 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv1085[ebp], 24 ; 00000018H
  01ffc	eb 27		 jmp	 SHORT $LN237@draw_tacti
$LN236@draw_tacti:
  01ffe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  02004	81 c2 c5 01 00
	00		 add	 edx, 453		; 000001c5H
  0200a	52		 push	 edx
  0200b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  02010	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  02015	50		 push	 eax
  02016	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0201b	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1085[ebp], 0
$LN237@draw_tacti:
  02025	6a 18		 push	 24			; 00000018H
  02027	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  0202d	51		 push	 ecx
  0202e	69 95 38 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv1077[ebp], 180
  02038	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR tv1085[ebp]
  0203e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  02045	ff d1		 call	 ecx
  02047	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _launched_weapon$18[ebp], eax
$LN14@draw_tacti:

; 5730 : 
; 5731 : 									while (launched_weapon)

  0204d	83 bd c8 fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$18[ebp], 0
  02054	0f 84 ef 01 00
	00		 je	 $LN15@draw_tacti

; 5732 : 									{
; 5733 : 										if (get_local_entity_int_value (launched_weapon, INT_TYPE_WEAPON_GUIDANCE_TYPE) != WEAPON_GUIDANCE_TYPE_NONE)

  0205a	83 bd c8 fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$18[ebp], 0
  02061	74 10		 je	 SHORT $LN238@draw_tacti
  02063	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$18[ebp]
  02069	8b 08		 mov	 ecx, DWORD PTR [eax]
  0206b	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv1097[ebp], ecx
  02071	eb 20		 jmp	 SHORT $LN239@draw_tacti
$LN238@draw_tacti:
  02073	68 65 16 00 00	 push	 5733			; 00001665H
  02078	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0207d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02083	52		 push	 edx
  02084	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02089	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1097[ebp], 0
$LN239@draw_tacti:
  02093	b8 01 00 00 00	 mov	 eax, 1
  02098	85 c0		 test	 eax, eax
  0209a	74 0c		 je	 SHORT $LN240@draw_tacti
  0209c	c7 85 34 fe ff
	ff 07 01 00 00	 mov	 DWORD PTR tv1104[ebp], 263 ; 00000107H
  020a6	eb 20		 jmp	 SHORT $LN241@draw_tacti
$LN240@draw_tacti:
  020a8	68 65 16 00 00	 push	 5733			; 00001665H
  020ad	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  020b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  020b8	51		 push	 ecx
  020b9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  020be	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1104[ebp], 0
$LN241@draw_tacti:
  020c8	68 07 01 00 00	 push	 263			; 00000107H
  020cd	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$18[ebp]
  020d3	52		 push	 edx
  020d4	69 85 38 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1097[ebp], 1116
  020de	8b 8d 34 fe ff
	ff		 mov	 ecx, DWORD PTR tv1104[ebp]
  020e4	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  020eb	ff d2		 call	 edx
  020ed	85 c0		 test	 eax, eax
  020ef	0f 84 ab 00 00
	00		 je	 $LN73@draw_tacti

; 5734 : 										{
; 5735 : 											if (get_local_entity_parent (launched_weapon, LIST_TYPE_TARGET) == source)

  020f5	83 bd c8 fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$18[ebp], 0
  020fc	74 10		 je	 SHORT $LN242@draw_tacti
  020fe	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$18[ebp]
  02104	8b 08		 mov	 ecx, DWORD PTR [eax]
  02106	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv1116[ebp], ecx
  0210c	eb 20		 jmp	 SHORT $LN243@draw_tacti
$LN242@draw_tacti:
  0210e	68 67 16 00 00	 push	 5735			; 00001667H
  02113	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  02118	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0211e	52		 push	 edx
  0211f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02124	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1116[ebp], 0
$LN243@draw_tacti:
  0212e	b8 01 00 00 00	 mov	 eax, 1
  02133	85 c0		 test	 eax, eax
  02135	74 0c		 je	 SHORT $LN244@draw_tacti
  02137	c7 85 34 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv1123[ebp], 38 ; 00000026H
  02141	eb 20		 jmp	 SHORT $LN245@draw_tacti
$LN244@draw_tacti:
  02143	68 67 16 00 00	 push	 5735			; 00001667H
  02148	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0214d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  02153	51		 push	 ecx
  02154	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02159	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1123[ebp], 0
$LN245@draw_tacti:
  02163	6a 26		 push	 38			; 00000026H
  02165	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$18[ebp]
  0216b	52		 push	 edx
  0216c	69 85 38 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv1116[ebp], 180
  02176	8b 8d 34 fe ff
	ff		 mov	 ecx, DWORD PTR tv1123[ebp]
  0217c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  02183	ff d2		 call	 edx
  02185	3b 85 fc fe ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  0218b	75 13		 jne	 SHORT $LN73@draw_tacti

; 5736 : 											{
; 5737 : 												draw_threat_line = *tsd_draw_threat_line_status;

  0218d	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_draw_threat_line_status$[ebp]
  02193	8b 08		 mov	 ecx, DWORD PTR [eax]
  02195	89 8d bc fe ff
	ff		 mov	 DWORD PTR _draw_threat_line$15[ebp], ecx

; 5738 : 
; 5739 : 												break;

  0219b	e9 a9 00 00 00	 jmp	 $LN15@draw_tacti
$LN73@draw_tacti:

; 5740 : 											}
; 5741 : 										}
; 5742 : 
; 5743 : 										launched_weapon = get_local_entity_child_succ (launched_weapon, LIST_TYPE_LAUNCHED_WEAPON);

  021a0	83 bd c8 fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$18[ebp], 0
  021a7	74 10		 je	 SHORT $LN246@draw_tacti
  021a9	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$18[ebp]
  021af	8b 08		 mov	 ecx, DWORD PTR [eax]
  021b1	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv1136[ebp], ecx
  021b7	eb 27		 jmp	 SHORT $LN247@draw_tacti
$LN246@draw_tacti:
  021b9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  021bf	81 c2 d3 01 00
	00		 add	 edx, 467		; 000001d3H
  021c5	52		 push	 edx
  021c6	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  021cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  021d0	50		 push	 eax
  021d1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  021d6	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1136[ebp], 0
$LN247@draw_tacti:
  021e0	b9 01 00 00 00	 mov	 ecx, 1
  021e5	85 c9		 test	 ecx, ecx
  021e7	74 0c		 je	 SHORT $LN248@draw_tacti
  021e9	c7 85 34 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv1144[ebp], 24 ; 00000018H
  021f3	eb 27		 jmp	 SHORT $LN249@draw_tacti
$LN248@draw_tacti:
  021f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  021fb	81 c2 d3 01 00
	00		 add	 edx, 467		; 000001d3H
  02201	52		 push	 edx
  02202	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  02207	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0220c	50		 push	 eax
  0220d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02212	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1144[ebp], 0
$LN249@draw_tacti:
  0221c	6a 18		 push	 24			; 00000018H
  0221e	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _launched_weapon$18[ebp]
  02224	51		 push	 ecx
  02225	69 95 38 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv1136[ebp], 180
  0222f	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR tv1144[ebp]
  02235	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0223c	ff d1		 call	 ecx
  0223e	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _launched_weapon$18[ebp], eax

; 5744 : 									}

  02244	e9 04 fe ff ff	 jmp	 $LN14@draw_tacti
$LN15@draw_tacti:

; 5745 : 
; 5746 : 									if (draw_threat_line)

  02249	83 bd bc fe ff
	ff 00		 cmp	 DWORD PTR _draw_threat_line$15[ebp], 0
  02250	0f 84 2d 01 00
	00		 je	 $LN74@draw_tacti

; 5747 : 									{
; 5748 : 										target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  02256	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  0225d	74 10		 je	 SHORT $LN250@draw_tacti
  0225f	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  02265	8b 08		 mov	 ecx, DWORD PTR [eax]
  02267	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv1157[ebp], ecx
  0226d	eb 27		 jmp	 SHORT $LN251@draw_tacti
$LN250@draw_tacti:
  0226f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  02275	81 c2 d8 01 00
	00		 add	 edx, 472		; 000001d8H
  0227b	52		 push	 edx
  0227c	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  02281	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02286	50		 push	 eax
  02287	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0228c	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1157[ebp], 0
$LN251@draw_tacti:
  02296	b9 01 00 00 00	 mov	 ecx, 1
  0229b	85 c9		 test	 ecx, ecx
  0229d	74 0c		 je	 SHORT $LN252@draw_tacti
  0229f	c7 85 34 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv1165[ebp], 8
  022a9	eb 27		 jmp	 SHORT $LN253@draw_tacti
$LN252@draw_tacti:
  022ab	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  022b1	81 c2 d8 01 00
	00		 add	 edx, 472		; 000001d8H
  022b7	52		 push	 edx
  022b8	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  022bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  022c2	50		 push	 eax
  022c3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  022c8	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1165[ebp], 0
$LN253@draw_tacti:
  022d2	6a 08		 push	 8
  022d4	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  022da	51		 push	 ecx
  022db	6b 95 38 fe ff
	ff 60		 imul	 edx, DWORD PTR tv1157[ebp], 96
  022e2	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR tv1165[ebp]
  022e8	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  022ef	ff d1		 call	 ecx
  022f1	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _target_position$17[ebp], eax

; 5749 : 
; 5750 : 										dx = (target_position->x - source_position->x) * scale;

  022f7	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _target_position$17[ebp]
  022fd	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  02303	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  02307	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0230b	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  02313	f3 0f 11 85 b4
	fe ff ff	 movss	 DWORD PTR _dx$13[ebp], xmm0

; 5751 : 										dy = (target_position->z - source_position->z) * scale;

  0231b	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _target_position$17[ebp]
  02321	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  02327	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0232c	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  02331	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  02339	f3 0f 11 85 b0
	fe ff ff	 movss	 DWORD PTR _dy$12[ebp], xmm0

; 5752 : 
; 5753 : 										draw_2d_line (0.0, 0.0, dx, dy, MFD_COLOUR1);

  02341	b8 04 00 00 00	 mov	 eax, 4
  02346	6b c8 00	 imul	 ecx, eax, 0
  02349	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0234f	52		 push	 edx
  02350	51		 push	 ecx
  02351	f3 0f 10 85 b0
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$12[ebp]
  02359	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0235e	51		 push	 ecx
  0235f	f3 0f 10 85 b4
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$13[ebp]
  02367	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0236c	51		 push	 ecx
  0236d	0f 57 c0	 xorps	 xmm0, xmm0
  02370	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02375	51		 push	 ecx
  02376	0f 57 c0	 xorps	 xmm0, xmm0
  02379	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0237e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN74@draw_tacti:

; 5754 : 									}
; 5755 : 								}
; 5756 : 							}
; 5757 : 						}
; 5758 : 					}
; 5759 : 				}
; 5760 : 
; 5761 : 				target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  02383	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  0238a	74 10		 je	 SHORT $LN254@draw_tacti
  0238c	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  02392	8b 08		 mov	 ecx, DWORD PTR [eax]
  02394	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv1192[ebp], ecx
  0239a	eb 27		 jmp	 SHORT $LN255@draw_tacti
$LN254@draw_tacti:
  0239c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  023a2	81 c2 e5 01 00
	00		 add	 edx, 485		; 000001e5H
  023a8	52		 push	 edx
  023a9	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  023ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  023b3	50		 push	 eax
  023b4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  023b9	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1192[ebp], 0
$LN255@draw_tacti:
  023c3	b9 01 00 00 00	 mov	 ecx, 1
  023c8	85 c9		 test	 ecx, ecx
  023ca	74 0c		 je	 SHORT $LN256@draw_tacti
  023cc	c7 85 34 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv1200[ebp], 18 ; 00000012H
  023d6	eb 27		 jmp	 SHORT $LN257@draw_tacti
$LN256@draw_tacti:
  023d8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  023de	81 c2 e5 01 00
	00		 add	 edx, 485		; 000001e5H
  023e4	52		 push	 edx
  023e5	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  023ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  023ef	50		 push	 eax
  023f0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  023f5	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1200[ebp], 0
$LN257@draw_tacti:
  023ff	6a 12		 push	 18			; 00000012H
  02401	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  02407	51		 push	 ecx
  02408	69 95 38 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv1192[ebp], 180
  02412	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR tv1200[ebp]
  02418	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0241f	ff d1		 call	 ecx
  02421	89 85 cc fe ff
	ff		 mov	 DWORD PTR _target$19[ebp], eax

; 5762 : 			}

  02427	e9 32 f8 ff ff	 jmp	 $LN12@draw_tacti
$LN13@draw_tacti:

; 5763 : 
; 5764 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  0242c	51		 push	 ecx
  0242d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  02435	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0243a	51		 push	 ecx
  0243b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  02443	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02448	51		 push	 ecx
  02449	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  02451	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02456	51		 push	 ecx
  02457	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0245f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02464	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  02469	50		 push	 eax
  0246a	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 5765 : 
; 5766 : 			set_2d_window_rotation (mfd_env, 0.0);

  0246f	51		 push	 ecx
  02470	0f 57 c0	 xorps	 xmm0, xmm0
  02473	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02478	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0247d	50		 push	 eax
  0247e	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN50@draw_tacti:

; 5767 : 		}
; 5768 : 	}
; 5769 : 
; 5770 : 	////////////////////////////////////////
; 5771 : 	//
; 5772 : 	// aircraft datum symbol
; 5773 : 	//
; 5774 : 	////////////////////////////////////////
; 5775 : 
; 5776 : 	if (draw_large_mfd)

  02483	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0248a	74 6c		 je	 SHORT $LN75@draw_tacti

; 5777 : 	{
; 5778 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum_mask, x_origin, y_origin, MFD_COLOUR6);

  0248c	b8 04 00 00 00	 mov	 eax, 4
  02491	6b c8 05	 imul	 ecx, eax, 5
  02494	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0249a	52		 push	 edx
  0249b	51		 push	 ecx
  0249c	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  024a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024a9	51		 push	 ecx
  024aa	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  024b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024b7	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum_mask@@3PADA
  024bc	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 5779 : 
; 5780 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum, x_origin, y_origin, MFD_COLOUR1);

  024c1	b8 04 00 00 00	 mov	 eax, 4
  024c6	6b c8 00	 imul	 ecx, eax, 0
  024c9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  024cf	52		 push	 edx
  024d0	51		 push	 ecx
  024d1	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  024d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024de	51		 push	 ecx
  024df	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  024e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024ec	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum@@3PADA
  024f1	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 5781 : 	}
; 5782 : 	else

  024f6	eb 6a		 jmp	 SHORT $LN76@draw_tacti
$LN75@draw_tacti:

; 5783 : 	{
; 5784 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum_mask, x_origin, y_origin, MFD_COLOUR6);

  024f8	b8 04 00 00 00	 mov	 eax, 4
  024fd	6b c8 05	 imul	 ecx, eax, 5
  02500	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02506	52		 push	 edx
  02507	51		 push	 ecx
  02508	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  02510	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02515	51		 push	 ecx
  02516	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  0251e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02523	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum_mask@@3PADA
  02528	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 5785 : 
; 5786 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum, x_origin, y_origin, MFD_COLOUR1);

  0252d	b8 04 00 00 00	 mov	 eax, 4
  02532	6b c8 00	 imul	 ecx, eax, 0
  02535	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0253b	52		 push	 edx
  0253c	51		 push	 ecx
  0253d	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  02545	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0254a	51		 push	 ecx
  0254b	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  02553	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02558	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum@@3PADA
  0255d	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN76@draw_tacti:

; 5787 : 	}
; 5788 : 
; 5789 : 	// ATARIBABY added heading tape to TSD NAV display
; 5790 : 	if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_NAVIGATION || tsd_declutter_level == TSD_DECLUTTER_LEVEL_ALL)

  02562	83 bd 28 ff ff
	ff 02		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 2
  02569	74 0d		 je	 SHORT $LN78@draw_tacti
  0256b	83 bd 28 ff ff
	ff 00		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 0
  02572	0f 85 cc 00 00
	00		 jne	 $LN77@draw_tacti
$LN78@draw_tacti:

; 5791 : 	{
; 5792 : 		set_mono_font_colour (MFD_COLOUR1);

  02578	b8 04 00 00 00	 mov	 eax, 4
  0257d	6b c8 00	 imul	 ecx, eax, 0
  02580	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02586	52		 push	 edx
  02587	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5793 : 		draw_heading_scale_tsd (get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_HEADING), TRUE);

  0258c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  02593	74 0f		 je	 SHORT $LN258@draw_tacti
  02595	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0259a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0259c	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv1250[ebp], ecx
  025a2	eb 27		 jmp	 SHORT $LN259@draw_tacti
$LN258@draw_tacti:
  025a4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  025aa	81 c2 05 02 00
	00		 add	 edx, 517		; 00000205H
  025b0	52		 push	 edx
  025b1	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  025b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  025bb	50		 push	 eax
  025bc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  025c1	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1250[ebp], 0
$LN259@draw_tacti:
  025cb	b9 01 00 00 00	 mov	 ecx, 1
  025d0	85 c9		 test	 ecx, ecx
  025d2	74 0c		 je	 SHORT $LN260@draw_tacti
  025d4	c7 85 34 fe ff
	ff 34 00 00 00	 mov	 DWORD PTR tv1258[ebp], 52 ; 00000034H
  025de	eb 27		 jmp	 SHORT $LN261@draw_tacti
$LN260@draw_tacti:
  025e0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  025e6	81 c2 05 02 00
	00		 add	 edx, 517		; 00000205H
  025ec	52		 push	 edx
  025ed	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  025f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  025f7	50		 push	 eax
  025f8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  025fd	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1258[ebp], 0
$LN261@draw_tacti:
  02607	6a 01		 push	 1
  02609	6a 34		 push	 52			; 00000034H
  0260b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  02611	51		 push	 ecx
  02612	69 95 38 fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv1250[ebp], 700
  0261c	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR tv1258[ebp]
  02622	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  02629	ff d1		 call	 ecx
  0262b	d9 9d 30 fe ff
	ff		 fstp	 DWORD PTR tv2478[ebp]
  02631	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR tv2478[ebp]
  02639	51		 push	 ecx
  0263a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0263f	e8 00 00 00 00	 call	 ?draw_heading_scale_tsd@@YGXMH@Z ; draw_heading_scale_tsd
$LN77@draw_tacti:

; 5794 : 	}
; 5795 : 
; 5796 : 	////////////////////////////////////////
; 5797 : 	//
; 5798 : 	// text
; 5799 : 	//
; 5800 : 	////////////////////////////////////////
; 5801 : 
; 5802 : 	set_mono_font_colour (MFD_COLOUR1);

  02644	b8 04 00 00 00	 mov	 eax, 4
  02649	6b c8 00	 imul	 ecx, eax, 0
  0264c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02652	52		 push	 edx
  02653	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5803 : 
; 5804 : 	if (draw_large_mfd)

  02658	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0265f	74 09		 je	 SHORT $LN79@draw_tacti

; 5805 : 	{
; 5806 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  02661	6a 05		 push	 5
  02663	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 5807 : 	}
; 5808 : 	else

  02668	eb 07		 jmp	 SHORT $LN80@draw_tacti
$LN79@draw_tacti:

; 5809 : 	{
; 5810 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  0266a	6a 01		 push	 1
  0266c	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN80@draw_tacti:

; 5811 : 	}
; 5812 : 
; 5813 : 	//
; 5814 : 	// sensor type
; 5815 : 	//
; 5816 : 
; 5817 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)

  02671	83 bd 28 ff ff
	ff 02		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 2
  02678	0f 84 a6 01 00
	00		 je	 $LN81@draw_tacti

; 5818 : 	{
; 5819 : 		switch (target_acquisition_system)

  0267e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; target_acquisition_system
  02683	89 85 38 fe ff
	ff		 mov	 DWORD PTR tv1273[ebp], eax
  02689	83 bd 38 fe ff
	ff 09		 cmp	 DWORD PTR tv1273[ebp], 9
  02690	77 38		 ja	 SHORT $LN86@draw_tacti
  02692	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR tv1273[ebp]
  02698	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN278@draw_tacti[ecx]
  0269f	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN280@draw_tacti[edx*4]
$LN82@draw_tacti:

; 5820 : 		{
; 5821 : 			case TARGET_ACQUISITION_SYSTEM_OFF:
; 5822 : 			{
; 5823 : 				s = "NO ACQ";

  026a6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06LLLMNJMM@NO?5ACQ@

; 5824 : 
; 5825 : 				break;

  026ad	eb 22		 jmp	 SHORT $LN16@draw_tacti
$LN83@draw_tacti:

; 5826 : 			}
; 5827 : 			case TARGET_ACQUISITION_SYSTEM_GROUND_RADAR:
; 5828 : 			case TARGET_ACQUISITION_SYSTEM_AIR_RADAR:
; 5829 : 			{
; 5830 : 				s = "FCR";

  026af	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03JKJFCLEN@FCR@

; 5831 : 
; 5832 : 				break;

  026b6	eb 19		 jmp	 SHORT $LN16@draw_tacti
$LN84@draw_tacti:

; 5833 : 			}
; 5834 : 			case TARGET_ACQUISITION_SYSTEM_FLIR:
; 5835 : 			case TARGET_ACQUISITION_SYSTEM_DTV:
; 5836 : 			case TARGET_ACQUISITION_SYSTEM_DVO:
; 5837 : 			{
; 5838 : 				s = "TADS";

  026b8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04DBODHFDK@TADS@

; 5839 : 
; 5840 : 				break;

  026bf	eb 10		 jmp	 SHORT $LN16@draw_tacti
$LN85@draw_tacti:

; 5841 : 			}
; 5842 : 			case TARGET_ACQUISITION_SYSTEM_HIDSS:
; 5843 : 			{
; 5844 : 				s = "HIDSS";

  026c1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_05BDMPLNHB@HIDSS@

; 5845 : 
; 5846 : 				break;

  026c8	eb 07		 jmp	 SHORT $LN16@draw_tacti
$LN86@draw_tacti:

; 5847 : 			}
; 5848 : 			default:
; 5849 : 			{
; 5850 : 				s = "XXX";

  026ca	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN16@draw_tacti:

; 5851 : 
; 5852 : 				break;
; 5853 : 			}
; 5854 : 		}
; 5855 : 
; 5856 : 		if (draw_large_mfd)

  026d1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  026d8	74 12		 je	 SHORT $LN87@draw_tacti

; 5857 : 		{
; 5858 : 			y_adjust = 5.0;

  026da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  026e2	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5859 : 		}
; 5860 : 		else

  026ea	eb 10		 jmp	 SHORT $LN88@draw_tacti
$LN87@draw_tacti:

; 5861 : 		{
; 5862 : 			y_adjust = 2.0;

  026ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  026f4	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN88@draw_tacti:

; 5863 : 		}
; 5864 : 
; 5865 : 		set_2d_mono_font_position (-1.0, 1.0);

  026fc	51		 push	 ecx
  026fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02705	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0270a	51		 push	 ecx
  0270b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02713	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02718	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5866 : 
; 5867 : 		set_mono_font_rel_position (1.0, y_adjust);

  0271d	51		 push	 ecx
  0271e	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02726	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0272b	51		 push	 ecx
  0272c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02734	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02739	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5868 : 
; 5869 : 		print_mono_font_string (s);

  0273e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02741	50		 push	 eax
  02742	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5870 : 
; 5871 : 		switch (target_acquisition_system)

  02747	a1 00 00 00 00	 mov	 eax, DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; target_acquisition_system
  0274c	89 85 38 fe ff
	ff		 mov	 DWORD PTR tv1281[ebp], eax
  02752	83 bd 38 fe ff
	ff 09		 cmp	 DWORD PTR tv1281[ebp], 9
  02759	77 4c		 ja	 SHORT $LN96@draw_tacti
  0275b	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR tv1281[ebp]
  02761	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN281@draw_tacti[ecx*4]
$LN89@draw_tacti:

; 5872 : 		{
; 5873 : 			case TARGET_ACQUISITION_SYSTEM_OFF:
; 5874 : 			{
; 5875 : 				s = "";

  02768	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_00CNPNBAHC@@

; 5876 : 
; 5877 : 				break;

  0276f	eb 3d		 jmp	 SHORT $LN18@draw_tacti
$LN90@draw_tacti:

; 5878 : 			}
; 5879 : 			case TARGET_ACQUISITION_SYSTEM_GROUND_RADAR:
; 5880 : 			{
; 5881 : 				s = "GND";

  02771	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03DGGJGKKM@GND@

; 5882 : 
; 5883 : 				break;

  02778	eb 34		 jmp	 SHORT $LN18@draw_tacti
$LN91@draw_tacti:

; 5884 : 			}
; 5885 : 			case TARGET_ACQUISITION_SYSTEM_AIR_RADAR:
; 5886 : 			{
; 5887 : 				s = "AIR";

  0277a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03KNFJGCC@AIR@

; 5888 : 
; 5889 : 				break;

  02781	eb 2b		 jmp	 SHORT $LN18@draw_tacti
$LN92@draw_tacti:

; 5890 : 			}
; 5891 : 			case TARGET_ACQUISITION_SYSTEM_FLIR:
; 5892 : 			{
; 5893 : 				s = "FLIR";

  02783	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04MIGKMLBH@FLIR@

; 5894 : 
; 5895 : 				break;

  0278a	eb 22		 jmp	 SHORT $LN18@draw_tacti
$LN93@draw_tacti:

; 5896 : 			}
; 5897 : 			case TARGET_ACQUISITION_SYSTEM_DTV:
; 5898 : 			{
; 5899 : 				s = "DTV";

  0278c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03ENJJJDDH@DTV@

; 5900 : 
; 5901 : 				break;

  02793	eb 19		 jmp	 SHORT $LN18@draw_tacti
$LN94@draw_tacti:

; 5902 : 			}
; 5903 : 			case TARGET_ACQUISITION_SYSTEM_DVO:
; 5904 : 			{
; 5905 : 				s = "DVO";

  02795	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03NFBNOOEB@DVO@

; 5906 : 
; 5907 : 				break;

  0279c	eb 10		 jmp	 SHORT $LN18@draw_tacti
$LN95@draw_tacti:

; 5908 : 			}
; 5909 : 			case TARGET_ACQUISITION_SYSTEM_HIDSS:
; 5910 : 			{
; 5911 : 				s = "";

  0279e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_00CNPNBAHC@@

; 5912 : 
; 5913 : 				break;

  027a5	eb 07		 jmp	 SHORT $LN18@draw_tacti
$LN96@draw_tacti:

; 5914 : 			}
; 5915 : 			default:
; 5916 : 			{
; 5917 : 				s = "XXX";

  027a7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN18@draw_tacti:

; 5918 : 
; 5919 : 				break;
; 5920 : 			}
; 5921 : 		}
; 5922 : 
; 5923 : 		if (draw_large_mfd)

  027ae	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  027b5	74 12		 je	 SHORT $LN97@draw_tacti

; 5924 : 		{
; 5925 : 			y_adjust = 18.0;

  027b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41900000
  027bf	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5926 : 		}
; 5927 : 		else

  027c7	eb 10		 jmp	 SHORT $LN98@draw_tacti
$LN97@draw_tacti:

; 5928 : 		{
; 5929 : 			y_adjust = 9.0;

  027c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41100000
  027d1	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN98@draw_tacti:

; 5930 : 		}
; 5931 : 
; 5932 : 		set_2d_mono_font_position (-1.0, 1.0);

  027d9	51		 push	 ecx
  027da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  027e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027e7	51		 push	 ecx
  027e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  027f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027f5	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5933 : 
; 5934 : 		set_mono_font_rel_position (1.0, y_adjust);

  027fa	51		 push	 ecx
  027fb	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02803	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02808	51		 push	 ecx
  02809	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02811	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02816	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5935 : 
; 5936 : 		print_mono_font_string (s);

  0281b	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0281e	50		 push	 eax
  0281f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN81@draw_tacti:

; 5937 : 	}
; 5938 : 
; 5939 : 	//
; 5940 : 	// TSD range
; 5941 : 	//
; 5942 : 
; 5943 : 	if (tsd_ase_range == TSD_ASE_RANGE_2000)

  02824	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  0282c	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  02833	9f		 lahf
  02834	f6 c4 44	 test	 ah, 68			; 00000044H
  02837	7a 09		 jp	 SHORT $LN99@draw_tacti

; 5944 : 	{
; 5945 : 		s = "2Km";

  02839	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03CIAFGHAC@2Km@
  02840	eb 61		 jmp	 SHORT $LN106@draw_tacti
$LN99@draw_tacti:

; 5946 : 	}
; 5947 : 	else if (tsd_ase_range == TSD_ASE_RANGE_5000)

  02842	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  0284a	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  02851	9f		 lahf
  02852	f6 c4 44	 test	 ah, 68			; 00000044H
  02855	7a 09		 jp	 SHORT $LN101@draw_tacti

; 5948 : 	{
; 5949 : 		s = "5Km";

  02857	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03LFNCFPLL@5Km@
  0285e	eb 43		 jmp	 SHORT $LN106@draw_tacti
$LN101@draw_tacti:

; 5950 : 	}
; 5951 : 	else if (tsd_ase_range == TSD_ASE_RANGE_10000)

  02860	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  02868	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  0286f	9f		 lahf
  02870	f6 c4 44	 test	 ah, 68			; 00000044H
  02873	7a 09		 jp	 SHORT $LN103@draw_tacti

; 5952 : 	{
; 5953 : 		s = "10Km";

  02875	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04PJCLBGLO@10Km@
  0287c	eb 25		 jmp	 SHORT $LN106@draw_tacti
$LN103@draw_tacti:

; 5954 : 	}
; 5955 : 	else if (tsd_ase_range == TSD_ASE_RANGE_25000)

  0287e	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _tsd_ase_range$[ebp]
  02886	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  0288d	9f		 lahf
  0288e	f6 c4 44	 test	 ah, 68			; 00000044H
  02891	7a 09		 jp	 SHORT $LN105@draw_tacti

; 5956 : 	{
; 5957 : 		s = "25Km";

  02893	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04IJFFJMFM@25Km@

; 5958 : 	}
; 5959 : 	else

  0289a	eb 07		 jmp	 SHORT $LN106@draw_tacti
$LN105@draw_tacti:

; 5960 : 	{
; 5961 : 		s = "XXX";

  0289c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN106@draw_tacti:

; 5962 : 	}
; 5963 : 
; 5964 : 	width = get_mono_font_string_width (s);

  028a3	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  028a6	50		 push	 eax
  028a7	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  028ac	d9 9d 10 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 5965 : 
; 5966 : 	if (draw_large_mfd)

  028b2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  028b9	74 2e		 je	 SHORT $LN107@draw_tacti

; 5967 : 	{
; 5968 : 		width += 2.0;

  028bb	f3 0f 5a 85 10
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  028c3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  028cb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  028cf	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 5969 : 
; 5970 : 		y_adjust = 5.0;

  028d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  028df	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5971 : 	}
; 5972 : 	else

  028e7	eb 2c		 jmp	 SHORT $LN108@draw_tacti
$LN107@draw_tacti:

; 5973 : 	{
; 5974 : 		width += 1.0;

  028e9	f3 0f 5a 85 10
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  028f1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  028f9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  028fd	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 5975 : 
; 5976 : 		y_adjust = 2.0;

  02905	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0290d	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN108@draw_tacti:

; 5977 : 	}
; 5978 : 
; 5979 : 	set_2d_mono_font_position (1.0, 1.0);

  02915	51		 push	 ecx
  02916	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0291e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02923	51		 push	 ecx
  02924	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0292c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02931	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5980 : 
; 5981 : 	set_mono_font_rel_position (-width, y_adjust);

  02936	51		 push	 ecx
  02937	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0293f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02944	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  0294c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  02953	51		 push	 ecx
  02954	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02959	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5982 : 
; 5983 : 	print_mono_font_string (s);

  0295e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02961	50		 push	 eax
  02962	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5984 : 
; 5985 : 	//
; 5986 : 	// TSD declutter level
; 5987 : 	//
; 5988 : 
; 5989 : 	if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_ALL)

  02967	83 bd 28 ff ff
	ff 00		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 0
  0296e	75 09		 jne	 SHORT $LN109@draw_tacti

; 5990 : 	{
; 5991 : 		s = "ALL";

  02970	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03NIFPGLBG@ALL@
  02977	eb 2b		 jmp	 SHORT $LN114@draw_tacti
$LN109@draw_tacti:

; 5992 : 	}
; 5993 : 	else if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  02979	83 bd 28 ff ff
	ff 01		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 1
  02980	75 09		 jne	 SHORT $LN111@draw_tacti

; 5994 : 	{
; 5995 : 		s = "TGT";

  02982	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03DBNGLLAD@TGT@
  02989	eb 19		 jmp	 SHORT $LN114@draw_tacti
$LN111@draw_tacti:

; 5996 : 	}
; 5997 : 	else if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_NAVIGATION)

  0298b	83 bd 28 ff ff
	ff 02		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 2
  02992	75 09		 jne	 SHORT $LN113@draw_tacti

; 5998 : 	{
; 5999 : 		s = "NAV";

  02994	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03DIMJBCMI@NAV@

; 6000 : 	}
; 6001 : 	else

  0299b	eb 07		 jmp	 SHORT $LN114@draw_tacti
$LN113@draw_tacti:

; 6002 : 	{
; 6003 : 		s = "XXX";

  0299d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN114@draw_tacti:

; 6004 : 	}
; 6005 : 
; 6006 : 	width = get_mono_font_string_width (s);

  029a4	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  029a7	50		 push	 eax
  029a8	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  029ad	d9 9d 10 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 6007 : 
; 6008 : 	if (draw_large_mfd)

  029b3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  029ba	74 2e		 je	 SHORT $LN115@draw_tacti

; 6009 : 	{
; 6010 : 		width += 2.0;

  029bc	f3 0f 5a 85 10
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  029c4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  029cc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  029d0	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 6011 : 
; 6012 : 		y_adjust = 18.0;

  029d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41900000
  029e0	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6013 : 	}
; 6014 : 	else

  029e8	eb 2c		 jmp	 SHORT $LN116@draw_tacti
$LN115@draw_tacti:

; 6015 : 	{
; 6016 : 		width += 1.0;

  029ea	f3 0f 5a 85 10
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  029f2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  029fa	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  029fe	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 6017 : 
; 6018 : 		y_adjust = 9.0;

  02a06	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41100000
  02a0e	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN116@draw_tacti:

; 6019 : 	}
; 6020 : 
; 6021 : 	set_2d_mono_font_position (1.0, 1.0);

  02a16	51		 push	 ecx
  02a17	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02a1f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a24	51		 push	 ecx
  02a25	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02a2d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a32	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6022 : 
; 6023 : 	set_mono_font_rel_position (-width, y_adjust);

  02a37	51		 push	 ecx
  02a38	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02a40	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a45	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  02a4d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  02a54	51		 push	 ecx
  02a55	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a5a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6024 : 
; 6025 : 	print_mono_font_string (s);

  02a5f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02a62	50		 push	 eax
  02a63	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6026 : 
; 6027 : 	//
; 6028 : 	// target range
; 6029 : 	//
; 6030 : 
; 6031 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)

  02a68	83 bd 28 ff ff
	ff 02		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 2
  02a6f	0f 84 ff 01 00
	00		 je	 $LN118@draw_tacti

; 6032 : 	{
; 6033 : 		if (source_target)

  02a75	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _source_target$[ebp], 0
  02a7c	0f 84 f2 01 00
	00		 je	 $LN118@draw_tacti

; 6034 : 		{
; 6035 : 			vec3d
; 6036 : 				*target_position;
; 6037 : 
; 6038 : 			float
; 6039 : 				target_range;
; 6040 : 
; 6041 : 			target_position = get_local_entity_vec3d_ptr (source_target, VEC3D_TYPE_POSITION);

  02a82	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _source_target$[ebp], 0
  02a89	74 10		 je	 SHORT $LN262@draw_tacti
  02a8b	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _source_target$[ebp]
  02a91	8b 08		 mov	 ecx, DWORD PTR [eax]
  02a93	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv1366[ebp], ecx
  02a99	eb 27		 jmp	 SHORT $LN263@draw_tacti
$LN262@draw_tacti:
  02a9b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  02aa1	81 c2 fd 02 00
	00		 add	 edx, 765		; 000002fdH
  02aa7	52		 push	 edx
  02aa8	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  02aad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02ab2	50		 push	 eax
  02ab3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02ab8	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1366[ebp], 0
$LN263@draw_tacti:
  02ac2	b9 01 00 00 00	 mov	 ecx, 1
  02ac7	85 c9		 test	 ecx, ecx
  02ac9	74 0c		 je	 SHORT $LN264@draw_tacti
  02acb	c7 85 34 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv1374[ebp], 8
  02ad5	eb 27		 jmp	 SHORT $LN265@draw_tacti
$LN264@draw_tacti:
  02ad7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  02add	81 c2 fd 02 00
	00		 add	 edx, 765		; 000002fdH
  02ae3	52		 push	 edx
  02ae4	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  02ae9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  02aee	50		 push	 eax
  02aef	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02af4	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1374[ebp], 0
$LN265@draw_tacti:
  02afe	6a 08		 push	 8
  02b00	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _source_target$[ebp]
  02b06	51		 push	 ecx
  02b07	6b 95 38 fe ff
	ff 60		 imul	 edx, DWORD PTR tv1366[ebp], 96
  02b0e	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR tv1374[ebp]
  02b14	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  02b1b	ff d1		 call	 ecx
  02b1d	89 85 ac fe ff
	ff		 mov	 DWORD PTR _target_position$11[ebp], eax

; 6042 : 
; 6043 : 			target_range = get_3d_range (source_position, target_position);

  02b23	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _target_position$11[ebp]
  02b29	50		 push	 eax
  02b2a	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  02b30	51		 push	 ecx
  02b31	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  02b36	d9 9d a8 fe ff
	ff		 fstp	 DWORD PTR _target_range$10[ebp]

; 6044 : 
; 6045 : 			if ((target_range < 1000.0) && (!comanche_damage.laser_designator))

  02b3c	f3 0f 5a 85 a8
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$10[ebp]
  02b44	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  02b4c	66 0f 2f c8	 comisd	 xmm1, xmm0
  02b50	76 2c		 jbe	 SHORT $LN119@draw_tacti
  02b52	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  02b57	c1 e8 04	 shr	 eax, 4
  02b5a	83 e0 01	 and	 eax, 1
  02b5d	75 1f		 jne	 SHORT $LN119@draw_tacti

; 6046 : 			{
; 6047 : 				sprintf (buffer, "%dm", (int) target_range);

  02b5f	f3 0f 2c 85 a8
	fe ff ff	 cvttss2si eax, DWORD PTR _target_range$10[ebp]
  02b67	50		 push	 eax
  02b68	68 00 00 00 00	 push	 OFFSET ??_C@_03NGNKAJPJ@?$CFdm@
  02b6d	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  02b73	51		 push	 ecx
  02b74	e8 00 00 00 00	 call	 _sprintf
  02b79	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6048 : 			}
; 6049 : 			else

  02b7c	eb 2c		 jmp	 SHORT $LN120@draw_tacti
$LN119@draw_tacti:

; 6050 : 			{
; 6051 : 				sprintf (buffer, "%.1fKm", target_range * (1.0 / 1000.0));

  02b7e	f3 0f 5a 85 a8
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$10[ebp]
  02b86	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  02b8e	83 ec 08	 sub	 esp, 8
  02b91	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  02b96	68 00 00 00 00	 push	 OFFSET ??_C@_06OMCABMNO@?$CF?41fKm@
  02b9b	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02ba1	50		 push	 eax
  02ba2	e8 00 00 00 00	 call	 _sprintf
  02ba7	83 c4 10	 add	 esp, 16			; 00000010H
$LN120@draw_tacti:

; 6052 : 			}
; 6053 : 
; 6054 : 			width = get_mono_font_string_width (buffer);

  02baa	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02bb0	50		 push	 eax
  02bb1	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02bb6	d9 9d 10 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 6055 : 
; 6056 : 			if (draw_large_mfd)

  02bbc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02bc3	74 2e		 je	 SHORT $LN121@draw_tacti

; 6057 : 			{
; 6058 : 				width += 2.0;

  02bc5	f3 0f 5a 85 10
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  02bcd	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02bd5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02bd9	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 6059 : 
; 6060 : 				y_adjust = -12.0;

  02be1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  02be9	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6061 : 			}
; 6062 : 			else

  02bf1	eb 2c		 jmp	 SHORT $LN122@draw_tacti
$LN121@draw_tacti:

; 6063 : 			{
; 6064 : 				width += 1.0;

  02bf3	f3 0f 5a 85 10
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  02bfb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02c03	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02c07	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 6065 : 
; 6066 : 				y_adjust = -5.0;

  02c0f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  02c17	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN122@draw_tacti:

; 6067 : 			}
; 6068 : 
; 6069 : 			set_2d_mono_font_position (1.0, -1.0);

  02c1f	51		 push	 ecx
  02c20	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02c28	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c2d	51		 push	 ecx
  02c2e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02c36	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c3b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6070 : 
; 6071 : 			set_mono_font_rel_position (-width, y_adjust);

  02c40	51		 push	 ecx
  02c41	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02c49	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c4e	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  02c56	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  02c5d	51		 push	 ecx
  02c5e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c63	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6072 : 
; 6073 : 			print_mono_font_string (buffer);

  02c68	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02c6e	50		 push	 eax
  02c6f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN118@draw_tacti:

; 6074 : 		}
; 6075 : 	}
; 6076 : 
; 6077 : 	//
; 6078 : 	// waypoint information
; 6079 : 	//
; 6080 : 
; 6081 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_TARGET && !comanche_damage.navigation_computer)

  02c74	83 bd 28 ff ff
	ff 01		 cmp	 DWORD PTR _tsd_declutter_level$[ebp], 1
  02c7b	0f 84 f7 04 00
	00		 je	 $LN124@draw_tacti
  02c81	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  02c86	c1 e8 07	 shr	 eax, 7
  02c89	83 e0 01	 and	 eax, 1
  02c8c	0f 85 e6 04 00
	00		 jne	 $LN124@draw_tacti

; 6082 : 	{
; 6083 : 		entity
; 6084 : 			*wp;
; 6085 : 
; 6086 : 		vec3d
; 6087 : 			waypoint_position;
; 6088 : 
; 6089 : 		float
; 6090 : 			waypoint_range;
; 6091 : 
; 6092 : 		wp = get_local_entity_current_waypoint (source);

  02c92	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  02c98	50		 push	 eax
  02c99	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  02c9e	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _wp$9[ebp], eax

; 6093 : 
; 6094 : 		if (wp)

  02ca4	83 bd a4 fe ff
	ff 00		 cmp	 DWORD PTR _wp$9[ebp], 0
  02cab	0f 84 c7 04 00
	00		 je	 $LN124@draw_tacti

; 6095 : 		{
; 6096 : 			get_waypoint_display_position (source, wp, &waypoint_position);

  02cb1	8d 85 98 fe ff
	ff		 lea	 eax, DWORD PTR _waypoint_position$8[ebp]
  02cb7	50		 push	 eax
  02cb8	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _wp$9[ebp]
  02cbe	51		 push	 ecx
  02cbf	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  02cc5	52		 push	 edx
  02cc6	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 6097 : 
; 6098 : 			//
; 6099 : 			// waypoint id & range
; 6100 : 			//
; 6101 : 
; 6102 : 			waypoint_range = get_2d_range (source_position, &waypoint_position);

  02ccb	8d 85 98 fe ff
	ff		 lea	 eax, DWORD PTR _waypoint_position$8[ebp]
  02cd1	50		 push	 eax
  02cd2	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  02cd8	51		 push	 ecx
  02cd9	e8 00 00 00 00	 call	 ?get_2d_range@@YGMPBUVEC3D@@0@Z ; get_2d_range
  02cde	d9 9d 94 fe ff
	ff		 fstp	 DWORD PTR _waypoint_range$7[ebp]

; 6103 : 
; 6104 : 			if (!comanche_damage.navigation_computer)

  02ce4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  02ce9	c1 e8 07	 shr	 eax, 7
  02cec	83 e0 01	 and	 eax, 1
  02cef	0f 85 cb 02 00
	00		 jne	 $LN125@draw_tacti

; 6105 : 			{
; 6106 : 				if (waypoint_range < 1000.0)

  02cf5	f3 0f 5a 85 94
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _waypoint_range$7[ebp]
  02cfd	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  02d05	66 0f 2f c8	 comisd	 xmm1, xmm0
  02d09	0f 86 c3 00 00
	00		 jbe	 $LN127@draw_tacti

; 6107 : 				{
; 6108 : 					sprintf (buffer, "%c:%dm", get_local_entity_char_value (wp, CHAR_TYPE_TAG), (int) waypoint_range);

  02d0f	83 bd a4 fe ff
	ff 00		 cmp	 DWORD PTR _wp$9[ebp], 0
  02d16	74 10		 je	 SHORT $LN266@draw_tacti
  02d18	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR _wp$9[ebp]
  02d1e	8b 08		 mov	 ecx, DWORD PTR [eax]
  02d20	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv1439[ebp], ecx
  02d26	eb 27		 jmp	 SHORT $LN267@draw_tacti
$LN266@draw_tacti:
  02d28	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  02d2e	81 c2 40 03 00
	00		 add	 edx, 832		; 00000340H
  02d34	52		 push	 edx
  02d35	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  02d3a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02d3f	50		 push	 eax
  02d40	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02d45	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1439[ebp], 0
$LN267@draw_tacti:
  02d4f	b9 01 00 00 00	 mov	 ecx, 1
  02d54	85 c9		 test	 ecx, ecx
  02d56	74 0c		 je	 SHORT $LN268@draw_tacti
  02d58	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1447[ebp], 0
  02d62	eb 27		 jmp	 SHORT $LN269@draw_tacti
$LN268@draw_tacti:
  02d64	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  02d6a	81 c2 40 03 00
	00		 add	 edx, 832		; 00000340H
  02d70	52		 push	 edx
  02d71	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  02d76	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  02d7b	50		 push	 eax
  02d7c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02d81	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1447[ebp], 0
$LN269@draw_tacti:
  02d8b	f3 0f 2c 8d 94
	fe ff ff	 cvttss2si ecx, DWORD PTR _waypoint_range$7[ebp]
  02d93	51		 push	 ecx
  02d94	6a 00		 push	 0
  02d96	8b 95 a4 fe ff
	ff		 mov	 edx, DWORD PTR _wp$9[ebp]
  02d9c	52		 push	 edx
  02d9d	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR tv1447[ebp]
  02da3	c1 e0 02	 shl	 eax, 2
  02da6	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR tv1439[ebp]
  02dac	8b 94 c8 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[eax+ecx*8]
  02db3	ff d2		 call	 edx
  02db5	0f b6 c0	 movzx	 eax, al
  02db8	50		 push	 eax
  02db9	68 00 00 00 00	 push	 OFFSET ??_C@_06JCIGMCHD@?$CFc?3?$CFdm@
  02dbe	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  02dc4	51		 push	 ecx
  02dc5	e8 00 00 00 00	 call	 _sprintf
  02dca	83 c4 10	 add	 esp, 16			; 00000010H
  02dcd	e9 ec 01 00 00	 jmp	 $LN130@draw_tacti
$LN127@draw_tacti:

; 6109 : 				}
; 6110 : 				else if (waypoint_range < 100000.0)

  02dd2	f3 0f 5a 85 94
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _waypoint_range$7[ebp]
  02dda	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40f86a0000000000
  02de2	66 0f 2f c8	 comisd	 xmm1, xmm0
  02de6	0f 86 08 01 00
	00		 jbe	 $LN129@draw_tacti

; 6111 : 				{
; 6112 : 					int
; 6113 : 						i;
; 6114 : 
; 6115 : 					float
; 6116 : 						f;
; 6117 : 
; 6118 : 					//
; 6119 : 					// this is required to prevent rounding errors around the 100Km mark
; 6120 : 					//
; 6121 : 
; 6122 : 					i = (int) waypoint_range * (1.0 / 100.0);

  02dec	f3 0f 2c 85 94
	fe ff ff	 cvttss2si eax, DWORD PTR _waypoint_range$7[ebp]
  02df4	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  02df8	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  02e00	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  02e04	89 8d 90 fe ff
	ff		 mov	 DWORD PTR _i$6[ebp], ecx

; 6123 : 
; 6124 : 					f = (float) i * (1.0 / 10.0);

  02e0a	f3 0f 2a 85 90
	fe ff ff	 cvtsi2ss xmm0, DWORD PTR _i$6[ebp]
  02e12	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  02e16	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  02e1e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02e22	f3 0f 11 85 8c
	fe ff ff	 movss	 DWORD PTR _f$5[ebp], xmm0

; 6125 : 
; 6126 : 					sprintf (buffer, "%c:%.1fKm", get_local_entity_char_value (wp, CHAR_TYPE_TAG), f);

  02e2a	83 bd a4 fe ff
	ff 00		 cmp	 DWORD PTR _wp$9[ebp], 0
  02e31	74 10		 je	 SHORT $LN270@draw_tacti
  02e33	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR _wp$9[ebp]
  02e39	8b 08		 mov	 ecx, DWORD PTR [eax]
  02e3b	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv1475[ebp], ecx
  02e41	eb 27		 jmp	 SHORT $LN271@draw_tacti
$LN270@draw_tacti:
  02e43	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  02e49	81 c2 52 03 00
	00		 add	 edx, 850		; 00000352H
  02e4f	52		 push	 edx
  02e50	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  02e55	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02e5a	50		 push	 eax
  02e5b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02e60	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1475[ebp], 0
$LN271@draw_tacti:
  02e6a	b9 01 00 00 00	 mov	 ecx, 1
  02e6f	85 c9		 test	 ecx, ecx
  02e71	74 0c		 je	 SHORT $LN272@draw_tacti
  02e73	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1483[ebp], 0
  02e7d	eb 27		 jmp	 SHORT $LN273@draw_tacti
$LN272@draw_tacti:
  02e7f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  02e85	81 c2 52 03 00
	00		 add	 edx, 850		; 00000352H
  02e8b	52		 push	 edx
  02e8c	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  02e91	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  02e96	50		 push	 eax
  02e97	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02e9c	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1483[ebp], 0
$LN273@draw_tacti:
  02ea6	f3 0f 5a 85 8c
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _f$5[ebp]
  02eae	83 ec 08	 sub	 esp, 8
  02eb1	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  02eb6	6a 00		 push	 0
  02eb8	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _wp$9[ebp]
  02ebe	51		 push	 ecx
  02ebf	8b 95 34 fe ff
	ff		 mov	 edx, DWORD PTR tv1483[ebp]
  02ec5	c1 e2 02	 shl	 edx, 2
  02ec8	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv1475[ebp]
  02ece	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[edx+eax*8]
  02ed5	ff d1		 call	 ecx
  02ed7	0f b6 d0	 movzx	 edx, al
  02eda	52		 push	 edx
  02edb	68 00 00 00 00	 push	 OFFSET ??_C@_09EKFBJBJG@?$CFc?3?$CF?41fKm@
  02ee0	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02ee6	50		 push	 eax
  02ee7	e8 00 00 00 00	 call	 _sprintf
  02eec	83 c4 14	 add	 esp, 20			; 00000014H

; 6127 : 				}
; 6128 : 				else

  02eef	e9 ca 00 00 00	 jmp	 $LN130@draw_tacti
$LN129@draw_tacti:

; 6129 : 				{
; 6130 : 					sprintf (buffer, "%c:%dKm", get_local_entity_char_value (wp, CHAR_TYPE_TAG), (int) (waypoint_range * (1.0 / 1000.0)));

  02ef4	83 bd a4 fe ff
	ff 00		 cmp	 DWORD PTR _wp$9[ebp], 0
  02efb	74 10		 je	 SHORT $LN274@draw_tacti
  02efd	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR _wp$9[ebp]
  02f03	8b 08		 mov	 ecx, DWORD PTR [eax]
  02f05	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv1504[ebp], ecx
  02f0b	eb 27		 jmp	 SHORT $LN275@draw_tacti
$LN274@draw_tacti:
  02f0d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  02f13	81 c2 56 03 00
	00		 add	 edx, 854		; 00000356H
  02f19	52		 push	 edx
  02f1a	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  02f1f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02f24	50		 push	 eax
  02f25	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02f2a	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1504[ebp], 0
$LN275@draw_tacti:
  02f34	b9 01 00 00 00	 mov	 ecx, 1
  02f39	85 c9		 test	 ecx, ecx
  02f3b	74 0c		 je	 SHORT $LN276@draw_tacti
  02f3d	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1512[ebp], 0
  02f47	eb 27		 jmp	 SHORT $LN277@draw_tacti
$LN276@draw_tacti:
  02f49	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  02f4f	81 c2 56 03 00
	00		 add	 edx, 854		; 00000356H
  02f55	52		 push	 edx
  02f56	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  02f5b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  02f60	50		 push	 eax
  02f61	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02f66	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1512[ebp], 0
$LN277@draw_tacti:
  02f70	f3 0f 5a 85 94
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _waypoint_range$7[ebp]
  02f78	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  02f80	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  02f84	51		 push	 ecx
  02f85	6a 00		 push	 0
  02f87	8b 95 a4 fe ff
	ff		 mov	 edx, DWORD PTR _wp$9[ebp]
  02f8d	52		 push	 edx
  02f8e	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR tv1512[ebp]
  02f94	c1 e0 02	 shl	 eax, 2
  02f97	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR tv1504[ebp]
  02f9d	8b 94 c8 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[eax+ecx*8]
  02fa4	ff d2		 call	 edx
  02fa6	0f b6 c0	 movzx	 eax, al
  02fa9	50		 push	 eax
  02faa	68 00 00 00 00	 push	 OFFSET ??_C@_07CFANIJPM@?$CFc?3?$CFdKm@
  02faf	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  02fb5	51		 push	 ecx
  02fb6	e8 00 00 00 00	 call	 _sprintf
  02fbb	83 c4 10	 add	 esp, 16			; 00000010H
$LN130@draw_tacti:

; 6131 : 				}
; 6132 : 			}
; 6133 : 			else

  02fbe	eb 14		 jmp	 SHORT $LN126@draw_tacti
$LN125@draw_tacti:

; 6134 : 			{
; 6135 : 				sprintf (buffer, "-:--.-");

  02fc0	68 00 00 00 00	 push	 OFFSET ??_C@_06BAOIPBEF@?9?3?9?9?4?9@
  02fc5	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02fcb	50		 push	 eax
  02fcc	e8 00 00 00 00	 call	 _sprintf
  02fd1	83 c4 08	 add	 esp, 8
$LN126@draw_tacti:

; 6136 : 			}
; 6137 : 
; 6138 : 			if (draw_large_mfd)

  02fd4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02fdb	74 12		 je	 SHORT $LN131@draw_tacti

; 6139 : 			{
; 6140 : 				y_adjust = -25.0;

  02fdd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  02fe5	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6141 : 			}
; 6142 : 			else

  02fed	eb 10		 jmp	 SHORT $LN132@draw_tacti
$LN131@draw_tacti:

; 6143 : 			{
; 6144 : 				y_adjust = -12.0;

  02fef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  02ff7	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN132@draw_tacti:

; 6145 : 			}
; 6146 : 
; 6147 : 			set_2d_mono_font_position (-1.0, -1.0);

  02fff	51		 push	 ecx
  03000	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  03008	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0300d	51		 push	 ecx
  0300e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  03016	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0301b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6148 : 
; 6149 : 			set_mono_font_rel_position (1.0, y_adjust);

  03020	51		 push	 ecx
  03021	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  03029	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0302e	51		 push	 ecx
  0302f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  03037	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0303c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6150 : 
; 6151 : 			print_mono_font_string (buffer);

  03041	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  03047	50		 push	 eax
  03048	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6152 : 
; 6153 : 			//
; 6154 : 			// time to go
; 6155 : 			//
; 6156 : 
; 6157 : 			if ((current_flight_dynamics->velocity_z.value > 0.1) && (!comanche_damage.navigation_computer))

  0304d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  03052	f3 0f 5a 80 9c
	20 00 00	 cvtss2sd xmm0, DWORD PTR [eax+8348]
  0305a	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fb999999999999a
  03062	0f 86 83 00 00
	00		 jbe	 $LN133@draw_tacti
  03068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  0306d	c1 e8 07	 shr	 eax, 7
  03070	83 e0 01	 and	 eax, 1
  03073	75 76		 jne	 SHORT $LN133@draw_tacti

; 6158 : 			{
; 6159 : 				float
; 6160 : 					time_to_go,
; 6161 : 					hours,
; 6162 : 					minutes,
; 6163 : 					seconds;
; 6164 : 
; 6165 : 				time_to_go = waypoint_range / current_flight_dynamics->velocity_z.value;

  03075	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0307a	f3 0f 10 85 94
	fe ff ff	 movss	 xmm0, DWORD PTR _waypoint_range$7[ebp]
  03082	f3 0f 5e 80 9c
	20 00 00	 divss	 xmm0, DWORD PTR [eax+8348]
  0308a	f3 0f 11 85 88
	fe ff ff	 movss	 DWORD PTR _time_to_go$4[ebp], xmm0

; 6166 : 
; 6167 : 				get_digital_clock_values (time_to_go, &hours, &minutes, &seconds);

  03092	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _seconds$1[ebp]
  03098	50		 push	 eax
  03099	8d 8d 80 fe ff
	ff		 lea	 ecx, DWORD PTR _minutes$2[ebp]
  0309f	51		 push	 ecx
  030a0	8d 95 84 fe ff
	ff		 lea	 edx, DWORD PTR _hours$3[ebp]
  030a6	52		 push	 edx
  030a7	51		 push	 ecx
  030a8	f3 0f 10 85 88
	fe ff ff	 movss	 xmm0, DWORD PTR _time_to_go$4[ebp]
  030b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  030b5	e8 00 00 00 00	 call	 ?get_digital_clock_values@@YGXMPAM00@Z ; get_digital_clock_values

; 6168 : 
; 6169 : 				sprintf (buffer, "%02d:%02d:%02d", (int) hours, (int) minutes, (int) seconds);

  030ba	f3 0f 2c 85 7c
	fe ff ff	 cvttss2si eax, DWORD PTR _seconds$1[ebp]
  030c2	50		 push	 eax
  030c3	f3 0f 2c 8d 80
	fe ff ff	 cvttss2si ecx, DWORD PTR _minutes$2[ebp]
  030cb	51		 push	 ecx
  030cc	f3 0f 2c 95 84
	fe ff ff	 cvttss2si edx, DWORD PTR _hours$3[ebp]
  030d4	52		 push	 edx
  030d5	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
  030da	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  030e0	50		 push	 eax
  030e1	e8 00 00 00 00	 call	 _sprintf
  030e6	83 c4 14	 add	 esp, 20			; 00000014H

; 6170 : 			}
; 6171 : 			else

  030e9	eb 14		 jmp	 SHORT $LN134@draw_tacti
$LN133@draw_tacti:

; 6172 : 			{
; 6173 : 				strcpy (buffer, "--:--:--");

  030eb	68 00 00 00 00	 push	 OFFSET ??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@
  030f0	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  030f6	50		 push	 eax
  030f7	e8 00 00 00 00	 call	 _strcpy
  030fc	83 c4 08	 add	 esp, 8
$LN134@draw_tacti:

; 6174 : 			}
; 6175 : 
; 6176 : 			if (draw_large_mfd)

  030ff	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  03106	74 12		 je	 SHORT $LN135@draw_tacti

; 6177 : 			{
; 6178 : 				y_adjust = -12.0;

  03108	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  03110	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6179 : 			}
; 6180 : 			else

  03118	eb 10		 jmp	 SHORT $LN136@draw_tacti
$LN135@draw_tacti:

; 6181 : 			{
; 6182 : 				y_adjust = -5.0;

  0311a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  03122	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN136@draw_tacti:

; 6183 : 			}
; 6184 : 
; 6185 : 			set_2d_mono_font_position (-1.0, -1.0);

  0312a	51		 push	 ecx
  0312b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  03133	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03138	51		 push	 ecx
  03139	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  03141	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03146	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6186 : 
; 6187 : 			set_mono_font_rel_position (1.0, y_adjust);

  0314b	51		 push	 ecx
  0314c	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  03154	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03159	51		 push	 ecx
  0315a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  03162	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03167	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6188 : 
; 6189 : 			print_mono_font_string (buffer);

  0316c	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  03172	50		 push	 eax
  03173	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN124@draw_tacti:

; 6190 : 		}
; 6191 : 	}
; 6192 : 
; 6193 : //VJ 030423 TSD render mod
; 6194 : 	set_rgb_colour (MFD_COLOUR1,              0, 255,   0, 255);

  03178	b8 04 00 00 00	 mov	 eax, 4
  0317d	6b c8 00	 imul	 ecx, eax, 0
  03180	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  03187	b8 04 00 00 00	 mov	 eax, 4
  0318c	6b c8 00	 imul	 ecx, eax, 0
  0318f	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  03196	b8 04 00 00 00	 mov	 eax, 4
  0319b	6b c8 00	 imul	 ecx, eax, 0
  0319e	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  031a5	b8 04 00 00 00	 mov	 eax, 4
  031aa	6b c8 00	 imul	 ecx, eax, 0
  031ad	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 6195 : 	set_rgb_colour (MFD_COLOUR2,              0, 200,   0, 255);

  031b4	b8 04 00 00 00	 mov	 eax, 4
  031b9	c1 e0 00	 shl	 eax, 0
  031bc	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  031c3	b8 04 00 00 00	 mov	 eax, 4
  031c8	c1 e0 00	 shl	 eax, 0
  031cb	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  031d2	b8 04 00 00 00	 mov	 eax, 4
  031d7	c1 e0 00	 shl	 eax, 0
  031da	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  031e1	b8 04 00 00 00	 mov	 eax, 4
  031e6	c1 e0 00	 shl	 eax, 0
  031e9	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 6196 : 	set_rgb_colour (MFD_COLOUR3,              0, 176,   0, 255);

  031f0	b8 04 00 00 00	 mov	 eax, 4
  031f5	d1 e0		 shl	 eax, 1
  031f7	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  031fe	b8 04 00 00 00	 mov	 eax, 4
  03203	d1 e0		 shl	 eax, 1
  03205	c6 80 01 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 176 ; 000000b0H
  0320c	b8 04 00 00 00	 mov	 eax, 4
  03211	d1 e0		 shl	 eax, 1
  03213	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  0321a	b8 04 00 00 00	 mov	 eax, 4
  0321f	d1 e0		 shl	 eax, 1
  03221	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 6197 : 	set_rgb_colour (MFD_COLOUR4,              0, 151,   0, 255);

  03228	b8 04 00 00 00	 mov	 eax, 4
  0322d	6b c8 03	 imul	 ecx, eax, 3
  03230	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  03237	b8 04 00 00 00	 mov	 eax, 4
  0323c	6b c8 03	 imul	 ecx, eax, 3
  0323f	c6 81 01 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 151 ; 00000097H
  03246	b8 04 00 00 00	 mov	 eax, 4
  0324b	6b c8 03	 imul	 ecx, eax, 3
  0324e	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  03255	b8 04 00 00 00	 mov	 eax, 4
  0325a	6b c8 03	 imul	 ecx, eax, 3
  0325d	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 6198 : 	set_rgb_colour (MFD_COLOUR5,              0, 128,   0, 255);

  03264	b8 04 00 00 00	 mov	 eax, 4
  03269	c1 e0 02	 shl	 eax, 2
  0326c	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  03273	b8 04 00 00 00	 mov	 eax, 4
  03278	c1 e0 02	 shl	 eax, 2
  0327b	c6 80 01 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 128 ; 00000080H
  03282	b8 04 00 00 00	 mov	 eax, 4
  03287	c1 e0 02	 shl	 eax, 2
  0328a	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  03291	b8 04 00 00 00	 mov	 eax, 4
  03296	c1 e0 02	 shl	 eax, 2
  03299	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 6199 : 	set_rgb_colour (MFD_COLOUR6,             40,  68,  56, 255);

  032a0	b8 04 00 00 00	 mov	 eax, 4
  032a5	6b c8 05	 imul	 ecx, eax, 5
  032a8	c6 81 02 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 40 ; 00000028H
  032af	b8 04 00 00 00	 mov	 eax, 4
  032b4	6b c8 05	 imul	 ecx, eax, 5
  032b7	c6 81 01 00 00
	00 44		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 68 ; 00000044H
  032be	b8 04 00 00 00	 mov	 eax, 4
  032c3	6b c8 05	 imul	 ecx, eax, 5
  032c6	c6 81 00 00 00
	00 38		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 56 ; 00000038H
  032cd	b8 04 00 00 00	 mov	 eax, 4
  032d2	6b c8 05	 imul	 ecx, eax, 5
  032d5	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 6200 : }

  032dc	5f		 pop	 edi
  032dd	5e		 pop	 esi
  032de	5b		 pop	 ebx
  032df	8b e5		 mov	 esp, ebp
  032e1	5d		 pop	 ebp
  032e2	c2 04 00	 ret	 4
  032e5	0f 1f 00	 npad	 3
$LN279@draw_tacti:
  032e8	00 00 00 00	 DD	 $LN22@draw_tacti
  032ec	00 00 00 00	 DD	 $LN22@draw_tacti
  032f0	00 00 00 00	 DD	 $LN23@draw_tacti
  032f4	00 00 00 00	 DD	 $LN23@draw_tacti
$LN280@draw_tacti:
  032f8	00 00 00 00	 DD	 $LN82@draw_tacti
  032fc	00 00 00 00	 DD	 $LN83@draw_tacti
  03300	00 00 00 00	 DD	 $LN84@draw_tacti
  03304	00 00 00 00	 DD	 $LN85@draw_tacti
  03308	00 00 00 00	 DD	 $LN86@draw_tacti
$LN278@draw_tacti:
  0330c	00		 DB	 0
  0330d	01		 DB	 1
  0330e	01		 DB	 1
  0330f	02		 DB	 2
  03310	02		 DB	 2
  03311	02		 DB	 2
  03312	04		 DB	 4
  03313	04		 DB	 4
  03314	04		 DB	 4
  03315	03		 DB	 3
  03316	66 90		 npad	 2
$LN281@draw_tacti:
  03318	00 00 00 00	 DD	 $LN89@draw_tacti
  0331c	00 00 00 00	 DD	 $LN90@draw_tacti
  03320	00 00 00 00	 DD	 $LN91@draw_tacti
  03324	00 00 00 00	 DD	 $LN92@draw_tacti
  03328	00 00 00 00	 DD	 $LN93@draw_tacti
  0332c	00 00 00 00	 DD	 $LN94@draw_tacti
  03330	00 00 00 00	 DD	 $LN96@draw_tacti
  03334	00 00 00 00	 DD	 $LN96@draw_tacti
  03338	00 00 00 00	 DD	 $LN96@draw_tacti
  0333c	00 00 00 00	 DD	 $LN95@draw_tacti
?draw_tactical_situation_display_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ENDP ; draw_tactical_situation_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_heading_scale_tsd@@YGXMH@Z
_TEXT	SEGMENT
tv195 = -196						; size = 8
tv196 = -188						; size = 8
tv163 = -188						; size = 4
tv329 = -184						; size = 4
tv326 = -184						; size = 4
tv255 = -184						; size = 4
tv155 = -184						; size = 4
_command_heading$1 = -116				; size = 4
_bearing$2 = -112					; size = 4
_dz$3 = -108						; size = 4
_dx$4 = -104						; size = 4
_waypoint_position$5 = -100				; size = 12
_gunship_position$6 = -88				; size = 4
_wp$7 = -84						; size = 4
_tick_type$ = -80					; size = 4
_int_heading_step_10$ = -76				; size = 4
_loop$ = -72						; size = 4
_mod_heading_step_10$ = -68				; size = 4
_heading_step_10$ = -64					; size = 4
_u$ = -60						; size = 4
_x$ = -56						; size = 4
_mfd_vp_x_max$ = -52					; size = 4
_mfd_vp_x_min$ = -48					; size = 4
_tick_datum_bottom$ = -44				; size = 4
_tick_datum_top$ = -40					; size = 4
_tick_30_deg_bottom$ = -36				; size = 4
_tick_30_deg_top$ = -32					; size = 4
_tick_10_deg_bottom$ = -28				; size = 4
_tick_10_deg_top$ = -24					; size = 4
_y_adjust$ = -20					; size = 4
_x_adjust_double$ = -16					; size = 4
_x_adjust_single$ = -12					; size = 4
_heading_tick_x_spacing$ = -8				; size = 4
_heading_width_ratio$ = -4				; size = 4
_heading$ = 8						; size = 4
_draw_command_heading$ = 12				; size = 4
?draw_heading_scale_tsd@@YGXMH@Z PROC			; draw_heading_scale_tsd, COMDAT

; 4989 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 4990 : 	float
; 4991 : 		heading_width_ratio,
; 4992 : 		heading_tick_x_spacing,
; 4993 : 		x_adjust_single,
; 4994 : 		x_adjust_double,
; 4995 : 		y_adjust,
; 4996 : 		tick_10_deg_top,
; 4997 : 		tick_10_deg_bottom,
; 4998 : 		tick_30_deg_top,
; 4999 : 		tick_30_deg_bottom,
; 5000 : 		tick_datum_top,
; 5001 : 		tick_datum_bottom,
; 5002 : 		mfd_vp_x_min,
; 5003 : 		mfd_vp_x_max,
; 5004 : 		x,
; 5005 : 		u,
; 5006 : 		heading_step_10,
; 5007 : 		mod_heading_step_10;
; 5008 : 
; 5009 : 	int
; 5010 : 		loop,
; 5011 : 		int_heading_step_10,
; 5012 : 		tick_type;
; 5013 : 
; 5014 : 	//
; 5015 : 	// sort large and small mfd differences
; 5016 : 	//
; 5017 : 
; 5018 : 	if (draw_large_mfd)

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00013	0f 84 9b 00 00
	00		 je	 $LN7@draw_headi

; 5019 : 	{
; 5020 : 		set_mono_font_type (MONO_FONT_TYPE_5X9);

  00019	6a 02		 push	 2
  0001b	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 5021 : 
; 5022 : 		heading_width_ratio		= 0.4;

  00020	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  00028	f3 0f 11 45 fc	 movss	 DWORD PTR _heading_width_ratio$[ebp], xmm0

; 5023 : 
; 5024 : 		heading_tick_x_spacing	= 0.4 / 6.5;

  0002d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d7c0fc1
  00035	f3 0f 11 45 f8	 movss	 DWORD PTR _heading_tick_x_spacing$[ebp], xmm0

; 5025 : 
; 5026 : 		x_adjust_single  			= -2.0;

  0003a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00042	f3 0f 11 45 f4	 movss	 DWORD PTR _x_adjust_single$[ebp], xmm0

; 5027 : 		x_adjust_double  			= -5.0;

  00047	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  0004f	f3 0f 11 45 f0	 movss	 DWORD PTR _x_adjust_double$[ebp], xmm0

; 5028 : 		y_adjust			  			= -8.0;

  00054	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  0005c	f3 0f 11 45 ec	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5029 : 
; 5030 : 		tick_10_deg_top			= 0.925 - 0.015;

  00061	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  00069	f3 0f 11 45 e8	 movss	 DWORD PTR _tick_10_deg_top$[ebp], xmm0

; 5031 : 		tick_10_deg_bottom  		= 0.925 - 0.015 - 0.045;

  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5d70a4
  00076	f3 0f 11 45 e4	 movss	 DWORD PTR _tick_10_deg_bottom$[ebp], xmm0

; 5032 : 		tick_30_deg_top	  		= 0.925;

  0007b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6ccccd
  00083	f3 0f 11 45 e0	 movss	 DWORD PTR _tick_30_deg_top$[ebp], xmm0

; 5033 : 		tick_30_deg_bottom  		= 0.925 - 0.075;

  00088	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00090	f3 0f 11 45 dc	 movss	 DWORD PTR _tick_30_deg_bottom$[ebp], xmm0

; 5034 : 		tick_datum_top		  		= 0.925 - 0.075 - 0.010;

  00095	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f570a3d
  0009d	f3 0f 11 45 d8	 movss	 DWORD PTR _tick_datum_top$[ebp], xmm0

; 5035 : 		tick_datum_bottom	  		= 0.925 - 0.075 - 0.010 - 0.045;

  000a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4b851f
  000aa	f3 0f 11 45 d4	 movss	 DWORD PTR _tick_datum_bottom$[ebp], xmm0

; 5036 : 	}
; 5037 : 	else

  000af	e9 96 00 00 00	 jmp	 $LN8@draw_headi
$LN7@draw_headi:

; 5038 : 	{
; 5039 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  000b4	6a 00		 push	 0
  000b6	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 5040 : 
; 5041 : 		heading_width_ratio		= 0.3;

  000bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  000c3	f3 0f 11 45 fc	 movss	 DWORD PTR _heading_width_ratio$[ebp], xmm0

; 5042 : 
; 5043 : 		heading_tick_x_spacing	= 0.4 / 5.0;

  000c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  000d0	f3 0f 11 45 f8	 movss	 DWORD PTR _heading_tick_x_spacing$[ebp], xmm0

; 5044 : 
; 5045 : 		x_adjust_single			= -1.0;

  000d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000dd	f3 0f 11 45 f4	 movss	 DWORD PTR _x_adjust_single$[ebp], xmm0

; 5046 : 		x_adjust_double  			= -3.0;

  000e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  000ea	f3 0f 11 45 f0	 movss	 DWORD PTR _x_adjust_double$[ebp], xmm0

; 5047 : 		y_adjust			  			= -6.0;

  000ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  000f7	f3 0f 11 45 ec	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5048 : 
; 5049 : 		tick_10_deg_top  			= 0.875 - 0.015;

  000fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5c28f6
  00104	f3 0f 11 45 e8	 movss	 DWORD PTR _tick_10_deg_top$[ebp], xmm0

; 5050 : 		tick_10_deg_bottom 		= 0.875 - 0.015 - 0.045;

  00109	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f50a3d7
  00111	f3 0f 11 45 e4	 movss	 DWORD PTR _tick_10_deg_bottom$[ebp], xmm0

; 5051 : 		tick_30_deg_top	  		= 0.875;

  00116	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f600000
  0011e	f3 0f 11 45 e0	 movss	 DWORD PTR _tick_30_deg_top$[ebp], xmm0

; 5052 : 		tick_30_deg_bottom  		= 0.875 - 0.075;

  00123	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  0012b	f3 0f 11 45 dc	 movss	 DWORD PTR _tick_30_deg_bottom$[ebp], xmm0

; 5053 : 		tick_datum_top		  		= 0.875 - 0.075 - 0.010;

  00130	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4a3d71
  00138	f3 0f 11 45 d8	 movss	 DWORD PTR _tick_datum_top$[ebp], xmm0

; 5054 : 		tick_datum_bottom	  		= 0.875 - 0.075 - 0.010 - 0.045;

  0013d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3eb852
  00145	f3 0f 11 45 d4	 movss	 DWORD PTR _tick_datum_bottom$[ebp], xmm0
$LN8@draw_headi:

; 5055 : 	}
; 5056 : 
; 5057 : 	//
; 5058 : 	// adjust 2D environment for heading scale clipping
; 5059 : 	//
; 5060 : 
; 5061 : 	if (draw_main_display)

  0014a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_main_display@@3HA, 0
  00151	74 14		 je	 SHORT $LN9@draw_headi

; 5062 : 	{
; 5063 : 		get_2d_float_screen_x_coordinate (0.0, &u);

  00153	8d 45 c4	 lea	 eax, DWORD PTR _u$[ebp]
  00156	50		 push	 eax
  00157	51		 push	 ecx
  00158	0f 57 c0	 xorps	 xmm0, xmm0
  0015b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00160	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 5064 : 	}
; 5065 : 	else

  00165	eb 17		 jmp	 SHORT $LN10@draw_headi
$LN9@draw_headi:

; 5066 : 	{
; 5067 : 		get_2d_float_screen_x_coordinate (-0.4, &u);

  00167	8d 45 c4	 lea	 eax, DWORD PTR _u$[ebp]
  0016a	50		 push	 eax
  0016b	51		 push	 ecx
  0016c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00174	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00179	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate
$LN10@draw_headi:

; 5068 : 	}
; 5069 : 
; 5070 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN * heading_width_ratio, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX * heading_width_ratio, MFD_WINDOW_Y_MAX);

  0017e	51		 push	 ecx
  0017f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00187	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018c	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _heading_width_ratio$[ebp]
  00191	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3feff7ced916872b
  00199	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0019d	51		 push	 ecx
  0019e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a3	51		 push	 ecx
  001a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  001ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b1	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _heading_width_ratio$[ebp]
  001b6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff0000000000000
  001be	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001c2	51		 push	 ecx
  001c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001cd	50		 push	 eax
  001ce	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 5071 : 
; 5072 : 	mfd_vp_x_min = u - (mfd_viewport_size * (heading_width_ratio * 0.5));

  001d3	f3 0f 5a 45 c4	 cvtss2sd xmm0, DWORD PTR _u$[ebp]
  001d8	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  001e0	f3 0f 5a 55 fc	 cvtss2sd xmm2, DWORD PTR _heading_width_ratio$[ebp]
  001e5	f2 0f 59 15 00
	00 00 00	 mulsd	 xmm2, QWORD PTR __real@3fe0000000000000
  001ed	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  001f1	f2 0f 5c c1	 subsd	 xmm0, xmm1
  001f5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001f9	f3 0f 11 45 d0	 movss	 DWORD PTR _mfd_vp_x_min$[ebp], xmm0

; 5073 : 
; 5074 : 	mfd_vp_x_max = u + (mfd_viewport_size * (heading_width_ratio * 0.5)) - 0.001;

  001fe	f3 0f 5a 45 c4	 cvtss2sd xmm0, DWORD PTR _u$[ebp]
  00203	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  0020b	f3 0f 5a 55 fc	 cvtss2sd xmm2, DWORD PTR _heading_width_ratio$[ebp]
  00210	f2 0f 59 15 00
	00 00 00	 mulsd	 xmm2, QWORD PTR __real@3fe0000000000000
  00218	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  0021c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00220	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00228	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0022c	f3 0f 11 45 cc	 movss	 DWORD PTR _mfd_vp_x_max$[ebp], xmm0

; 5075 : 
; 5076 : 	set_2d_viewport (mfd_env, mfd_vp_x_min, mfd_viewport_y_min, mfd_vp_x_max, mfd_viewport_y_max);

  00231	51		 push	 ecx
  00232	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0023a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023f	51		 push	 ecx
  00240	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _mfd_vp_x_max$[ebp]
  00245	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024a	51		 push	 ecx
  0024b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00253	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00258	51		 push	 ecx
  00259	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _mfd_vp_x_min$[ebp]
  0025e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00263	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00268	50		 push	 eax
  00269	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 5077 : 
; 5078 : 	//
; 5079 : 	// draw heading datum tick
; 5080 : 	//
; 5081 : 
; 5082 : 	draw_2d_line (0.0, tick_datum_top, 0.0, tick_datum_bottom, MFD_COLOUR1);

  0026e	b8 04 00 00 00	 mov	 eax, 4
  00273	6b c8 00	 imul	 ecx, eax, 0
  00276	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0027c	52		 push	 edx
  0027d	51		 push	 ecx
  0027e	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _tick_datum_bottom$[ebp]
  00283	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00288	51		 push	 ecx
  00289	0f 57 c0	 xorps	 xmm0, xmm0
  0028c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00291	51		 push	 ecx
  00292	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _tick_datum_top$[ebp]
  00297	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029c	51		 push	 ecx
  0029d	0f 57 c0	 xorps	 xmm0, xmm0
  002a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5083 : 
; 5084 : 	//
; 5085 : 	// draw command heading carat
; 5086 : 	//
; 5087 : 
; 5088 : 	if (draw_command_heading)

  002aa	83 7d 0c 00	 cmp	 DWORD PTR _draw_command_heading$[ebp], 0
  002ae	0f 84 97 02 00
	00		 je	 $LN18@draw_headi

; 5089 : 	{
; 5090 : 		if (!comanche_damage.navigation_computer)

  002b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  002b9	c1 e8 07	 shr	 eax, 7
  002bc	83 e0 01	 and	 eax, 1
  002bf	0f 85 86 02 00
	00		 jne	 $LN18@draw_headi

; 5091 : 		{
; 5092 : 			entity
; 5093 : 				*wp;
; 5094 : 
; 5095 : 			wp = get_local_entity_current_waypoint (get_gunship_entity ());

  002c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  002ca	50		 push	 eax
  002cb	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  002d0	89 45 ac	 mov	 DWORD PTR _wp$7[ebp], eax

; 5096 : 
; 5097 : 			if (wp)

  002d3	83 7d ac 00	 cmp	 DWORD PTR _wp$7[ebp], 0
  002d7	0f 84 6e 02 00
	00		 je	 $LN18@draw_headi

; 5098 : 			{
; 5099 : 				vec3d
; 5100 : 					*gunship_position,
; 5101 : 					waypoint_position;
; 5102 : 
; 5103 : 				float
; 5104 : 					dx,
; 5105 : 					dz,
; 5106 : 					bearing,
; 5107 : 					command_heading;
; 5108 : 
; 5109 : 				gunship_position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  002dd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  002e4	74 0f		 je	 SHORT $LN30@draw_headi
  002e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  002eb	8b 08		 mov	 ecx, DWORD PTR [eax]
  002ed	89 8d 48 ff ff
	ff		 mov	 DWORD PTR tv155[ebp], ecx
  002f3	eb 24		 jmp	 SHORT $LN31@draw_headi
$LN30@draw_headi:
  002f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_heading_scale_tsd@@YGXMH@Z@4JA
  002fb	83 c2 78	 add	 edx, 120		; 00000078H
  002fe	52		 push	 edx
  002ff	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00304	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00309	50		 push	 eax
  0030a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0030f	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv155[ebp], 0
$LN31@draw_headi:
  00319	b9 01 00 00 00	 mov	 ecx, 1
  0031e	85 c9		 test	 ecx, ecx
  00320	74 0c		 je	 SHORT $LN32@draw_headi
  00322	c7 85 44 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv163[ebp], 8
  0032c	eb 24		 jmp	 SHORT $LN33@draw_headi
$LN32@draw_headi:
  0032e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_heading_scale_tsd@@YGXMH@Z@4JA
  00334	83 c2 78	 add	 edx, 120		; 00000078H
  00337	52		 push	 edx
  00338	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0033d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00342	50		 push	 eax
  00343	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00348	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv163[ebp], 0
$LN33@draw_headi:
  00352	6a 08		 push	 8
  00354	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0035a	51		 push	 ecx
  0035b	6b 95 48 ff ff
	ff 60		 imul	 edx, DWORD PTR tv155[ebp], 96
  00362	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR tv163[ebp]
  00368	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0036f	ff d1		 call	 ecx
  00371	89 45 a8	 mov	 DWORD PTR _gunship_position$6[ebp], eax

; 5110 : 
; 5111 : 				get_waypoint_display_position (get_gunship_entity (), wp, &waypoint_position);

  00374	8d 45 9c	 lea	 eax, DWORD PTR _waypoint_position$5[ebp]
  00377	50		 push	 eax
  00378	8b 4d ac	 mov	 ecx, DWORD PTR _wp$7[ebp]
  0037b	51		 push	 ecx
  0037c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00382	52		 push	 edx
  00383	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 5112 : 
; 5113 : 				dx = waypoint_position.x - gunship_position->x;

  00388	8b 45 a8	 mov	 eax, DWORD PTR _gunship_position$6[ebp]
  0038b	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _waypoint_position$5[ebp]
  00390	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00394	f3 0f 11 45 98	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 5114 : 				dz = waypoint_position.z - gunship_position->z;

  00399	8b 45 a8	 mov	 eax, DWORD PTR _gunship_position$6[ebp]
  0039c	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _waypoint_position$5[ebp+8]
  003a1	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  003a6	f3 0f 11 45 94	 movss	 DWORD PTR _dz$3[ebp], xmm0

; 5115 : 
; 5116 : 				bearing = atan2 (dx, dz);

  003ab	51		 push	 ecx
  003ac	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _dz$3[ebp]
  003b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b6	51		 push	 ecx
  003b7	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  003bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c1	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  003c6	d9 5d 90	 fstp	 DWORD PTR _bearing$2[ebp]

; 5117 : 
; 5118 : 				command_heading = bearing - heading;

  003c9	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _bearing$2[ebp]
  003ce	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _heading$[ebp]
  003d3	f3 0f 11 45 8c	 movss	 DWORD PTR _command_heading$1[ebp], xmm0

; 5119 : 
; 5120 : 				if (command_heading > rad (180.0))

  003d8	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  003dd	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@400921fb51000000
  003e5	76 18		 jbe	 SHORT $LN14@draw_headi

; 5121 : 				{
; 5122 : 					command_heading -= rad (360.0);

  003e7	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  003ec	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401921fb51000000
  003f4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003f8	f3 0f 11 45 8c	 movss	 DWORD PTR _command_heading$1[ebp], xmm0
  003fd	eb 29		 jmp	 SHORT $LN16@draw_headi
$LN14@draw_headi:

; 5123 : 				}
; 5124 : 				else if (command_heading < rad (-180.0))

  003ff	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  00404	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c00921fb51000000
  0040c	66 0f 2f c8	 comisd	 xmm1, xmm0
  00410	76 16		 jbe	 SHORT $LN16@draw_headi

; 5125 : 				{
; 5126 : 					command_heading += rad (360.0);

  00412	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  00417	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401921fb51000000
  0041f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00423	f3 0f 11 45 8c	 movss	 DWORD PTR _command_heading$1[ebp], xmm0
$LN16@draw_headi:

; 5127 : 				}
; 5128 : 
; 5129 : 				command_heading = bound (command_heading, rad (-90.0), rad (90.0));

  00428	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  0042d	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bff921fb51000000
  00435	66 0f 2f c8	 comisd	 xmm1, xmm0
  00439	76 12		 jbe	 SHORT $LN36@draw_headi
  0043b	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff921fb51000000
  00443	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv196[ebp], xmm0
  0044b	eb 3e		 jmp	 SHORT $LN37@draw_headi
$LN36@draw_headi:
  0044d	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  00452	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff921fb51000000
  0045a	76 12		 jbe	 SHORT $LN34@draw_headi
  0045c	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff921fb51000000
  00464	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv195[ebp], xmm0
  0046c	eb 0d		 jmp	 SHORT $LN35@draw_headi
$LN34@draw_headi:
  0046e	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  00473	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv195[ebp], xmm0
$LN35@draw_headi:
  0047b	f2 0f 10 85 3c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv195[ebp]
  00483	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv196[ebp], xmm0
$LN37@draw_headi:
  0048b	f2 0f 5a 85 44
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv196[ebp]
  00493	f3 0f 11 45 8c	 movss	 DWORD PTR _command_heading$1[ebp], xmm0

; 5130 : 
; 5131 : 				if (draw_large_mfd)

  00498	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0049f	74 56		 je	 SHORT $LN17@draw_headi

; 5132 : 				{
; 5133 : 					draw_2d_mono_sprite (large_command_heading_carat, 0.0 + (command_heading * ((heading_width_ratio - 0.035) / rad (90.0))), tick_datum_top, MFD_COLOUR1);

  004a1	b8 04 00 00 00	 mov	 eax, 4
  004a6	6b c8 00	 imul	 ecx, eax, 0
  004a9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004af	52		 push	 edx
  004b0	51		 push	 ecx
  004b1	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _tick_datum_top$[ebp]
  004b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004bb	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  004c0	f3 0f 5a 4d fc	 cvtss2sd xmm1, DWORD PTR _heading_width_ratio$[ebp]
  004c5	f2 0f 5c 0d 00
	00 00 00	 subsd	 xmm1, QWORD PTR __real@3fa1eb851eb851ec
  004cd	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@3ff921fb51000000
  004d5	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  004d9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@0000000000000000
  004e1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004e5	51		 push	 ecx
  004e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004eb	68 00 00 00 00	 push	 OFFSET ?large_command_heading_carat@@3PADA
  004f0	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 5134 : 				}
; 5135 : 				else

  004f5	eb 54		 jmp	 SHORT $LN18@draw_headi
$LN17@draw_headi:

; 5136 : 				{
; 5137 : 					draw_2d_mono_sprite (small_command_heading_carat, 0.0 + (command_heading * ((heading_width_ratio - 0.050) / rad (90.0))), tick_datum_top, MFD_COLOUR1);

  004f7	b8 04 00 00 00	 mov	 eax, 4
  004fc	6b c8 00	 imul	 ecx, eax, 0
  004ff	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00505	52		 push	 edx
  00506	51		 push	 ecx
  00507	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _tick_datum_top$[ebp]
  0050c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00511	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  00516	f3 0f 5a 4d fc	 cvtss2sd xmm1, DWORD PTR _heading_width_ratio$[ebp]
  0051b	f2 0f 5c 0d 00
	00 00 00	 subsd	 xmm1, QWORD PTR __real@3fa999999999999a
  00523	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@3ff921fb51000000
  0052b	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0052f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@0000000000000000
  00537	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0053b	51		 push	 ecx
  0053c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00541	68 00 00 00 00	 push	 OFFSET ?small_command_heading_carat@@3PADA
  00546	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN18@draw_headi:

; 5138 : 				}
; 5139 : 			}
; 5140 : 		}
; 5141 : 	}
; 5142 : 
; 5143 : 	//
; 5144 : 	// draw heading scale
; 5145 : 	//
; 5146 : 
; 5147 : 	heading_step_10 = deg (heading * 0.1);

  0054b	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _heading$[ebp]
  00550	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00558	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@404ca5dc00000000
  00560	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00564	f3 0f 11 45 c0	 movss	 DWORD PTR _heading_step_10$[ebp], xmm0

; 5148 : 
; 5149 : 	int_heading_step_10 = (int) heading_step_10;

  00569	f3 0f 2c 45 c0	 cvttss2si eax, DWORD PTR _heading_step_10$[ebp]
  0056e	89 45 b4	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax

; 5150 : 
; 5151 : 	mod_heading_step_10 = heading_step_10 - (float) int_heading_step_10;

  00571	f3 0f 2a 45 b4	 cvtsi2ss xmm0, DWORD PTR _int_heading_step_10$[ebp]
  00576	f3 0f 10 4d c0	 movss	 xmm1, DWORD PTR _heading_step_10$[ebp]
  0057b	f3 0f 5c c8	 subss	 xmm1, xmm0
  0057f	f3 0f 11 4d bc	 movss	 DWORD PTR _mod_heading_step_10$[ebp], xmm1

; 5152 : 
; 5153 : 	int_heading_step_10 -= 10;

  00584	8b 45 b4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  00587	83 e8 0a	 sub	 eax, 10			; 0000000aH
  0058a	89 45 b4	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax

; 5154 : 
; 5155 : 	if (int_heading_step_10 < 0)

  0058d	79 09		 jns	 SHORT $LN19@draw_headi

; 5156 : 	{
; 5157 : 		int_heading_step_10 += 36;

  0058f	8b 45 b4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  00592	83 c0 24	 add	 eax, 36			; 00000024H
  00595	89 45 b4	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax
$LN19@draw_headi:

; 5158 : 	}
; 5159 : 
; 5160 : 	// tick type:-
; 5161 : 	//
; 5162 : 	//		0 = long tick (30 degs)
; 5163 : 	//		1 = short tick (10 degs)
; 5164 : 	//		2 = short tick (20 degs)
; 5165 : 
; 5166 : 	tick_type = int_heading_step_10 % 3;

  00598	8b 45 b4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  0059b	99		 cdq
  0059c	b9 03 00 00 00	 mov	 ecx, 3
  005a1	f7 f9		 idiv	 ecx
  005a3	89 55 b0	 mov	 DWORD PTR _tick_type$[ebp], edx

; 5167 : 
; 5168 : 	x = - (10.0 + mod_heading_step_10) * heading_tick_x_spacing;

  005a6	f3 0f 5a 45 bc	 cvtss2sd xmm0, DWORD PTR _mod_heading_step_10$[ebp]
  005ab	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4024000000000000
  005b3	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  005ba	f3 0f 5a 4d f8	 cvtss2sd xmm1, DWORD PTR _heading_tick_x_spacing$[ebp]
  005bf	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  005c3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005c7	f3 0f 11 45 c8	 movss	 DWORD PTR _x$[ebp], xmm0

; 5169 : 
; 5170 : 	for (loop = 0; loop <= 20; loop++)

  005cc	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  005d3	eb 09		 jmp	 SHORT $LN4@draw_headi
$LN2@draw_headi:
  005d5	8b 45 b8	 mov	 eax, DWORD PTR _loop$[ebp]
  005d8	83 c0 01	 add	 eax, 1
  005db	89 45 b8	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@draw_headi:
  005de	83 7d b8 14	 cmp	 DWORD PTR _loop$[ebp], 20 ; 00000014H
  005e2	0f 8f 4a 02 00
	00		 jg	 $LN3@draw_headi

; 5171 : 	{
; 5172 : 		if (tick_type == 0)

  005e8	83 7d b0 00	 cmp	 DWORD PTR _tick_type$[ebp], 0
  005ec	0f 85 92 01 00
	00		 jne	 $LN20@draw_headi

; 5173 : 		{
; 5174 : 			draw_2d_line (x, tick_30_deg_top, x, tick_30_deg_bottom, MFD_COLOUR1);

  005f2	b8 04 00 00 00	 mov	 eax, 4
  005f7	6b c8 00	 imul	 ecx, eax, 0
  005fa	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00600	52		 push	 edx
  00601	51		 push	 ecx
  00602	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _tick_30_deg_bottom$[ebp]
  00607	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0060c	51		 push	 ecx
  0060d	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00612	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00617	51		 push	 ecx
  00618	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _tick_30_deg_top$[ebp]
  0061d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00622	51		 push	 ecx
  00623	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00628	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0062d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5175 : 
; 5176 : 			set_2d_mono_font_position (x, tick_30_deg_top);

  00632	51		 push	 ecx
  00633	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _tick_30_deg_top$[ebp]
  00638	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063d	51		 push	 ecx
  0063e	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00643	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00648	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5177 : 
; 5178 : 			switch (int_heading_step_10)

  0064d	8b 45 b4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  00650	89 85 48 ff ff
	ff		 mov	 DWORD PTR tv255[ebp], eax
  00656	83 bd 48 ff ff
	ff 1b		 cmp	 DWORD PTR tv255[ebp], 27 ; 0000001bH
  0065d	0f 87 ad 00 00
	00		 ja	 $LN26@draw_headi
  00663	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR tv255[ebp]
  00669	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN42@draw_headi[ecx]
  00670	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN43@draw_headi[edx*4]
$LN22@draw_headi:

; 5179 : 			{
; 5180 : 				////////////////////////////////////////
; 5181 : 				case 0:
; 5182 : 				////////////////////////////////////////
; 5183 : 				{
; 5184 : 					set_mono_font_rel_position (x_adjust_single, y_adjust);

  00677	51		 push	 ecx
  00678	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0067d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00682	51		 push	 ecx
  00683	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  00688	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0068d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5185 : 
; 5186 : 					print_mono_font_char ('N');

  00692	6a 4e		 push	 78			; 0000004eH
  00694	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 5187 : 
; 5188 : 					break;

  00699	e9 e4 00 00 00	 jmp	 $LN5@draw_headi
$LN23@draw_headi:

; 5189 : 				}
; 5190 : 				////////////////////////////////////////
; 5191 : 				case 9:
; 5192 : 				////////////////////////////////////////
; 5193 : 				{
; 5194 : 					set_mono_font_rel_position (x_adjust_single, y_adjust);

  0069e	51		 push	 ecx
  0069f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  006a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a9	51		 push	 ecx
  006aa	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  006af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b4	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5195 : 
; 5196 : 					print_mono_font_char ('E');

  006b9	6a 45		 push	 69			; 00000045H
  006bb	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 5197 : 
; 5198 : 					break;

  006c0	e9 bd 00 00 00	 jmp	 $LN5@draw_headi
$LN24@draw_headi:

; 5199 : 				}
; 5200 : 				////////////////////////////////////////
; 5201 : 				case 18:
; 5202 : 				////////////////////////////////////////
; 5203 : 				{
; 5204 : 					set_mono_font_rel_position (x_adjust_single, y_adjust);

  006c5	51		 push	 ecx
  006c6	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  006cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d0	51		 push	 ecx
  006d1	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  006d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006db	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5205 : 
; 5206 : 					print_mono_font_char ('S');

  006e0	6a 53		 push	 83			; 00000053H
  006e2	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 5207 : 
; 5208 : 					break;

  006e7	e9 96 00 00 00	 jmp	 $LN5@draw_headi
$LN25@draw_headi:

; 5209 : 				}
; 5210 : 				////////////////////////////////////////
; 5211 : 				case 27:
; 5212 : 				////////////////////////////////////////
; 5213 : 				{
; 5214 : 					set_mono_font_rel_position (x_adjust_single, y_adjust);

  006ec	51		 push	 ecx
  006ed	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  006f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f7	51		 push	 ecx
  006f8	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  006fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00702	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5215 : 
; 5216 : 					print_mono_font_char ('W');

  00707	6a 57		 push	 87			; 00000057H
  00709	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 5217 : 
; 5218 : 					break;

  0070e	eb 72		 jmp	 SHORT $LN5@draw_headi
$LN26@draw_headi:

; 5219 : 				}
; 5220 : 				////////////////////////////////////////
; 5221 : 				default:
; 5222 : 				////////////////////////////////////////
; 5223 : 				{
; 5224 : 					if (int_heading_step_10 < 10)

  00710	83 7d b4 0a	 cmp	 DWORD PTR _int_heading_step_10$[ebp], 10 ; 0000000aH
  00714	7d 29		 jge	 SHORT $LN27@draw_headi

; 5225 : 					{
; 5226 : 						set_mono_font_rel_position (x_adjust_single, y_adjust);

  00716	51		 push	 ecx
  00717	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0071c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00721	51		 push	 ecx
  00722	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  00727	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0072c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5227 : 
; 5228 : 						print_mono_font_char ('0' + int_heading_step_10);

  00731	8b 45 b4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  00734	83 c0 30	 add	 eax, 48			; 00000030H
  00737	50		 push	 eax
  00738	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 5229 : 					}
; 5230 : 					else

  0073d	eb 43		 jmp	 SHORT $LN28@draw_headi
$LN27@draw_headi:

; 5231 : 					{
; 5232 : 						set_mono_font_rel_position (x_adjust_double, y_adjust);

  0073f	51		 push	 ecx
  00740	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00745	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0074a	51		 push	 ecx
  0074b	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x_adjust_double$[ebp]
  00750	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00755	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5233 : 
; 5234 : 						print_mono_font_char ('0' + int_heading_step_10 / 10);

  0075a	8b 45 b4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  0075d	99		 cdq
  0075e	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00763	f7 f9		 idiv	 ecx
  00765	83 c0 30	 add	 eax, 48			; 00000030H
  00768	50		 push	 eax
  00769	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 5235 : 
; 5236 : 						print_mono_font_char ('0' + int_heading_step_10 % 10);

  0076e	8b 45 b4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  00771	99		 cdq
  00772	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00777	f7 f9		 idiv	 ecx
  00779	83 c2 30	 add	 edx, 48			; 00000030H
  0077c	52		 push	 edx
  0077d	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char
$LN28@draw_headi:
$LN5@draw_headi:

; 5237 : 					}
; 5238 : 
; 5239 : 					break;
; 5240 : 				}
; 5241 : 			}
; 5242 : 		}
; 5243 : 		else

  00782	eb 40		 jmp	 SHORT $LN21@draw_headi
$LN20@draw_headi:

; 5244 : 		{
; 5245 : 			draw_2d_line (x, tick_10_deg_top, x, tick_10_deg_bottom, MFD_COLOUR1);

  00784	b8 04 00 00 00	 mov	 eax, 4
  00789	6b c8 00	 imul	 ecx, eax, 0
  0078c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00792	52		 push	 edx
  00793	51		 push	 ecx
  00794	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _tick_10_deg_bottom$[ebp]
  00799	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079e	51		 push	 ecx
  0079f	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  007a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a9	51		 push	 ecx
  007aa	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _tick_10_deg_top$[ebp]
  007af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b4	51		 push	 ecx
  007b5	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  007ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007bf	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN21@draw_headi:

; 5246 : 		}
; 5247 : 
; 5248 : 		int_heading_step_10 = (++int_heading_step_10 == 36) ? 0 : int_heading_step_10;

  007c4	8b 45 b4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  007c7	83 c0 01	 add	 eax, 1
  007ca	89 45 b4	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax
  007cd	83 7d b4 24	 cmp	 DWORD PTR _int_heading_step_10$[ebp], 36 ; 00000024H
  007d1	75 0c		 jne	 SHORT $LN38@draw_headi
  007d3	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv326[ebp], 0
  007dd	eb 09		 jmp	 SHORT $LN39@draw_headi
$LN38@draw_headi:
  007df	8b 4d b4	 mov	 ecx, DWORD PTR _int_heading_step_10$[ebp]
  007e2	89 8d 48 ff ff
	ff		 mov	 DWORD PTR tv326[ebp], ecx
$LN39@draw_headi:
  007e8	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR tv326[ebp]
  007ee	89 55 b4	 mov	 DWORD PTR _int_heading_step_10$[ebp], edx

; 5249 : 
; 5250 : 		tick_type = (++tick_type == 3) ? 0 : tick_type;

  007f1	8b 45 b0	 mov	 eax, DWORD PTR _tick_type$[ebp]
  007f4	83 c0 01	 add	 eax, 1
  007f7	89 45 b0	 mov	 DWORD PTR _tick_type$[ebp], eax
  007fa	83 7d b0 03	 cmp	 DWORD PTR _tick_type$[ebp], 3
  007fe	75 0c		 jne	 SHORT $LN40@draw_headi
  00800	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv329[ebp], 0
  0080a	eb 09		 jmp	 SHORT $LN41@draw_headi
$LN40@draw_headi:
  0080c	8b 4d b0	 mov	 ecx, DWORD PTR _tick_type$[ebp]
  0080f	89 8d 48 ff ff
	ff		 mov	 DWORD PTR tv329[ebp], ecx
$LN41@draw_headi:
  00815	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR tv329[ebp]
  0081b	89 55 b0	 mov	 DWORD PTR _tick_type$[ebp], edx

; 5251 : 
; 5252 : 		x += heading_tick_x_spacing;

  0081e	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00823	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _heading_tick_x_spacing$[ebp]
  00828	f3 0f 11 45 c8	 movss	 DWORD PTR _x$[ebp], xmm0

; 5253 : 	}

  0082d	e9 a3 fd ff ff	 jmp	 $LN2@draw_headi
$LN3@draw_headi:

; 5254 : 
; 5255 : 	//
; 5256 : 	// restore 2D environment
; 5257 : 	//
; 5258 : 
; 5259 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  00832	51		 push	 ecx
  00833	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  0083b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00840	51		 push	 ecx
  00841	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00849	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0084e	51		 push	 ecx
  0084f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00857	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0085c	51		 push	 ecx
  0085d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00865	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0086a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0086f	50		 push	 eax
  00870	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 5260 : 
; 5261 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00875	51		 push	 ecx
  00876	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0087e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00883	51		 push	 ecx
  00884	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0088c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00891	51		 push	 ecx
  00892	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0089a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0089f	51		 push	 ecx
  008a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  008a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  008b2	50		 push	 eax
  008b3	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 5262 : }

  008b8	5f		 pop	 edi
  008b9	5e		 pop	 esi
  008ba	5b		 pop	 ebx
  008bb	8b e5		 mov	 esp, ebp
  008bd	5d		 pop	 ebp
  008be	c2 08 00	 ret	 8
  008c1	0f 1f 00	 npad	 3
$LN43@draw_headi:
  008c4	00 00 00 00	 DD	 $LN22@draw_headi
  008c8	00 00 00 00	 DD	 $LN23@draw_headi
  008cc	00 00 00 00	 DD	 $LN24@draw_headi
  008d0	00 00 00 00	 DD	 $LN25@draw_headi
  008d4	00 00 00 00	 DD	 $LN26@draw_headi
$LN42@draw_headi:
  008d8	00		 DB	 0
  008d9	04		 DB	 4
  008da	04		 DB	 4
  008db	04		 DB	 4
  008dc	04		 DB	 4
  008dd	04		 DB	 4
  008de	04		 DB	 4
  008df	04		 DB	 4
  008e0	04		 DB	 4
  008e1	01		 DB	 1
  008e2	04		 DB	 4
  008e3	04		 DB	 4
  008e4	04		 DB	 4
  008e5	04		 DB	 4
  008e6	04		 DB	 4
  008e7	04		 DB	 4
  008e8	04		 DB	 4
  008e9	04		 DB	 4
  008ea	02		 DB	 2
  008eb	04		 DB	 4
  008ec	04		 DB	 4
  008ed	04		 DB	 4
  008ee	04		 DB	 4
  008ef	04		 DB	 4
  008f0	04		 DB	 4
  008f1	04		 DB	 4
  008f2	04		 DB	 4
  008f3	03		 DB	 3
?draw_heading_scale_tsd@@YGXMH@Z ENDP			; draw_heading_scale_tsd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_2d_dvo_mfd@@YGXH@Z
_TEXT	SEGMENT
_valid_3d$ = 8						; size = 4
?draw_2d_dvo_mfd@@YGXH@Z PROC				; draw_2d_dvo_mfd, COMDAT

; 4019 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4020 : 	draw_2d_eo_display (&comanche_dvo, TARGET_ACQUISITION_SYSTEM_DVO, comanche_damage.dvo, valid_3d);

  00009	8b 45 08	 mov	 eax, DWORD PTR _valid_3d$[ebp]
  0000c	50		 push	 eax
  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00013	c1 e9 03	 shr	 ecx, 3
  00016	83 e1 01	 and	 ecx, 1
  00019	51		 push	 ecx
  0001a	6a 05		 push	 5
  0001c	68 00 00 00 00	 push	 OFFSET ?comanche_dvo@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; comanche_dvo
  00021	e8 00 00 00 00	 call	 ?draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z ; draw_2d_eo_display

; 4021 : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?draw_2d_dvo_mfd@@YGXH@Z ENDP				; draw_2d_dvo_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_3d_dvo_mfd@@YGXH@Z
_TEXT	SEGMENT
_full_screen$ = 8					; size = 4
?draw_3d_dvo_mfd@@YGXH@Z PROC				; draw_3d_dvo_mfd, COMDAT

; 4000 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4001 : 	if (!comanche_damage.dvo)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  0000e	c1 e8 03	 shr	 eax, 3
  00011	83 e0 01	 and	 eax, 1
  00014	75 20		 jne	 SHORT $LN1@draw_3d_dv

; 4002 : 	{
; 4003 : 		if (full_screen)

  00016	83 7d 08 00	 cmp	 DWORD PTR _full_screen$[ebp], 0
  0001a	74 0e		 je	 SHORT $LN3@draw_3d_dv

; 4004 : 		{
; 4005 : 			draw_full_screen_3d_eo_display (&comanche_dvo, TARGET_ACQUISITION_SYSTEM_DVO);

  0001c	6a 05		 push	 5
  0001e	68 00 00 00 00	 push	 OFFSET ?comanche_dvo@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; comanche_dvo
  00023	e8 00 00 00 00	 call	 ?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_full_screen_3d_eo_display

; 4006 : 		}
; 4007 : 		else

  00028	eb 0c		 jmp	 SHORT $LN1@draw_3d_dv
$LN3@draw_3d_dv:

; 4008 : 		{
; 4009 : 			draw_3d_eo_display (&comanche_dvo, TARGET_ACQUISITION_SYSTEM_DVO);

  0002a	6a 05		 push	 5
  0002c	68 00 00 00 00	 push	 OFFSET ?comanche_dvo@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; comanche_dvo
  00031	e8 00 00 00 00	 call	 ?draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display
$LN1@draw_3d_dv:

; 4010 : 		}
; 4011 : 	}
; 4012 : }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?draw_3d_dvo_mfd@@YGXH@Z ENDP				; draw_3d_dvo_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_2d_dtv_mfd@@YGXH@Z
_TEXT	SEGMENT
_valid_3d$ = 8						; size = 4
?draw_2d_dtv_mfd@@YGXH@Z PROC				; draw_2d_dtv_mfd, COMDAT

; 3985 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3986 : 	draw_2d_eo_display (&comanche_dtv, TARGET_ACQUISITION_SYSTEM_DTV, comanche_damage.dtv, valid_3d);

  00009	8b 45 08	 mov	 eax, DWORD PTR _valid_3d$[ebp]
  0000c	50		 push	 eax
  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00013	c1 e9 02	 shr	 ecx, 2
  00016	83 e1 01	 and	 ecx, 1
  00019	51		 push	 ecx
  0001a	6a 04		 push	 4
  0001c	68 00 00 00 00	 push	 OFFSET ?comanche_dtv@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; comanche_dtv
  00021	e8 00 00 00 00	 call	 ?draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z ; draw_2d_eo_display

; 3987 : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?draw_2d_dtv_mfd@@YGXH@Z ENDP				; draw_2d_dtv_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_3d_dtv_mfd@@YGXH@Z
_TEXT	SEGMENT
_full_screen$ = 8					; size = 4
?draw_3d_dtv_mfd@@YGXH@Z PROC				; draw_3d_dtv_mfd, COMDAT

; 3966 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3967 : 	if (!comanche_damage.dtv)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  0000e	c1 e8 02	 shr	 eax, 2
  00011	83 e0 01	 and	 eax, 1
  00014	75 20		 jne	 SHORT $LN1@draw_3d_dt

; 3968 : 	{
; 3969 : 		if (full_screen)

  00016	83 7d 08 00	 cmp	 DWORD PTR _full_screen$[ebp], 0
  0001a	74 0e		 je	 SHORT $LN3@draw_3d_dt

; 3970 : 		{
; 3971 : 			draw_full_screen_3d_eo_display (&comanche_dtv, TARGET_ACQUISITION_SYSTEM_DTV);

  0001c	6a 04		 push	 4
  0001e	68 00 00 00 00	 push	 OFFSET ?comanche_dtv@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; comanche_dtv
  00023	e8 00 00 00 00	 call	 ?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_full_screen_3d_eo_display

; 3972 : 		}
; 3973 : 		else

  00028	eb 0c		 jmp	 SHORT $LN1@draw_3d_dt
$LN3@draw_3d_dt:

; 3974 : 		{
; 3975 : 			draw_3d_eo_display (&comanche_dtv, TARGET_ACQUISITION_SYSTEM_DTV);

  0002a	6a 04		 push	 4
  0002c	68 00 00 00 00	 push	 OFFSET ?comanche_dtv@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; comanche_dtv
  00031	e8 00 00 00 00	 call	 ?draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display
$LN1@draw_3d_dt:

; 3976 : 		}
; 3977 : 	}
; 3978 : }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?draw_3d_dtv_mfd@@YGXH@Z ENDP				; draw_3d_dtv_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_2d_flir_mfd@@YGXH@Z
_TEXT	SEGMENT
_valid_3d$ = 8						; size = 4
?draw_2d_flir_mfd@@YGXH@Z PROC				; draw_2d_flir_mfd, COMDAT

; 3951 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3952 : 	draw_2d_eo_display (&comanche_flir, TARGET_ACQUISITION_SYSTEM_FLIR, comanche_damage.flir, valid_3d);

  00009	8b 45 08	 mov	 eax, DWORD PTR _valid_3d$[ebp]
  0000c	50		 push	 eax
  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00013	d1 e9		 shr	 ecx, 1
  00015	83 e1 01	 and	 ecx, 1
  00018	51		 push	 ecx
  00019	6a 03		 push	 3
  0001b	68 00 00 00 00	 push	 OFFSET ?comanche_flir@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; comanche_flir
  00020	e8 00 00 00 00	 call	 ?draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z ; draw_2d_eo_display

; 3953 : }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?draw_2d_flir_mfd@@YGXH@Z ENDP				; draw_2d_flir_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_3d_flir_mfd@@YGXH@Z
_TEXT	SEGMENT
_full_screen$ = 8					; size = 4
?draw_3d_flir_mfd@@YGXH@Z PROC				; draw_3d_flir_mfd, COMDAT

; 3932 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3933 : 	if (!comanche_damage.flir)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  0000e	d1 e8		 shr	 eax, 1
  00010	83 e0 01	 and	 eax, 1
  00013	75 20		 jne	 SHORT $LN1@draw_3d_fl

; 3934 : 	{
; 3935 : 		if (full_screen)

  00015	83 7d 08 00	 cmp	 DWORD PTR _full_screen$[ebp], 0
  00019	74 0e		 je	 SHORT $LN3@draw_3d_fl

; 3936 : 		{
; 3937 : 			draw_full_screen_3d_eo_display (&comanche_flir, TARGET_ACQUISITION_SYSTEM_FLIR);

  0001b	6a 03		 push	 3
  0001d	68 00 00 00 00	 push	 OFFSET ?comanche_flir@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; comanche_flir
  00022	e8 00 00 00 00	 call	 ?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_full_screen_3d_eo_display

; 3938 : 		}
; 3939 : 		else

  00027	eb 0c		 jmp	 SHORT $LN1@draw_3d_fl
$LN3@draw_3d_fl:

; 3940 : 		{
; 3941 : 			draw_3d_eo_display (&comanche_flir, TARGET_ACQUISITION_SYSTEM_FLIR);

  00029	6a 03		 push	 3
  0002b	68 00 00 00 00	 push	 OFFSET ?comanche_flir@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; comanche_flir
  00030	e8 00 00 00 00	 call	 ?draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display
$LN1@draw_3d_fl:

; 3942 : 		}
; 3943 : 	}
; 3944 : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?draw_3d_flir_mfd@@YGXH@Z ENDP				; draw_3d_flir_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z
_TEXT	SEGMENT
tv508 = -432						; size = 4
tv501 = -428						; size = 4
tv910 = -424						; size = 8
tv490 = -424						; size = 4
tv270 = -424						; size = 4
tv251 = -424						; size = 4
tv158 = -424						; size = 4
tv137 = -424						; size = 4
tv85 = -424						; size = 4
tv1191 = -420						; size = 4
tv1184 = -420						; size = 4
tv1140 = -420						; size = 4
tv987 = -420						; size = 4
tv483 = -420						; size = 4
tv263 = -420						; size = 4
tv243 = -420						; size = 4
tv176 = -420						; size = 4
tv150 = -420						; size = 4
tv129 = -420						; size = 4
tv77 = -420						; size = 4
tv539 = -417						; size = 1
$T1 = -416						; size = 4
$T2 = -412						; size = 4
_target_velocity$3 = -344				; size = 4
_range_char$4 = -337					; size = 1
_x_adjust$5 = -336					; size = 4
_tracking_point$6 = -332				; size = 4
_altitude$7 = -328					; size = 4
_speed$8 = -324						; size = 4
_level$9 = -320						; size = 4
_range_finder$ = -316					; size = 4
_visibility$ = -312					; size = 4
_tmp$ = -308						; size = 48
_target_point$ = -260					; size = 12
_target_position$ = -248				; size = 4
_source_position$ = -244				; size = 4
_target$ = -240						; size = 4
_source$ = -236						; size = 4
_y$ = -232						; size = 4
_x$ = -228						; size = 4
_j$ = -224						; size = 4
_i$ = -220						; size = 4
_y_adjust$ = -216					; size = 4
_target_range$ = -212					; size = 4
_width$ = -208						; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
_damaged$ = 16						; size = 4
_valid_3d$ = 20						; size = 4
?draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z PROC ; draw_2d_eo_display, COMDAT

; 3454 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b0 01 00
	00		 sub	 esp, 432		; 000001b0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3455 : 	const char
; 3456 : 		*s;
; 3457 : 	char
; 3458 : 		buffer[200];
; 3459 : 
; 3460 : 	float
; 3461 : 		width,
; 3462 : 		target_range = get_range_to_target(),

  0000c	e8 00 00 00 00	 call	 ?get_range_to_target@@YGMXZ ; get_range_to_target
  00011	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _target_range$[ebp]

; 3463 : 		y_adjust,
; 3464 : 		i,
; 3465 : 		j,
; 3466 : 		x,
; 3467 : 		y;
; 3468 : 
; 3469 : 	entity
; 3470 : 		*source,
; 3471 : 		*target;
; 3472 : 
; 3473 : 	vec3d
; 3474 : 		*source_position,
; 3475 : 		*target_position,
; 3476 : 		target_point;
; 3477 : 
; 3478 : 	viewpoint
; 3479 : 		tmp;
; 3480 : 
; 3481 : 	object_3d_visibility
; 3482 : 		visibility;
; 3483 : 
; 3484 : 	rangefinding_system
; 3485 : 		range_finder = get_range_finder();

  00017	e8 00 00 00 00	 call	 ?get_range_finder@@YG?AW4rangefinding_system@@XZ ; get_range_finder
  0001c	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _range_finder$[ebp], eax

; 3486 : 
; 3487 : 	ASSERT (eo);

  00022	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  00026	75 18		 jne	 SHORT $LN4@draw_2d_eo
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  0002d	83 c0 21	 add	 eax, 33			; 00000021H
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  0003b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_2d_eo:

; 3488 : 
; 3489 : 	source = get_gunship_entity ();

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00045	89 85 14 ff ff
	ff		 mov	 DWORD PTR _source$[ebp], eax

; 3490 : 
; 3491 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  0004b	83 bd 14 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00052	74 10		 je	 SHORT $LN54@draw_2d_eo
  00054	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0005a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005c	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv77[ebp], ecx
  00062	eb 24		 jmp	 SHORT $LN55@draw_2d_eo
$LN54@draw_2d_eo:
  00064	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  0006a	83 c2 25	 add	 edx, 37			; 00000025H
  0006d	52		 push	 edx
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00073	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007e	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv77[ebp], 0
$LN55@draw_2d_eo:
  00088	b9 01 00 00 00	 mov	 ecx, 1
  0008d	85 c9		 test	 ecx, ecx
  0008f	74 0c		 je	 SHORT $LN56@draw_2d_eo
  00091	c7 85 58 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv85[ebp], 8
  0009b	eb 24		 jmp	 SHORT $LN57@draw_2d_eo
$LN56@draw_2d_eo:
  0009d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  000a3	83 c2 25	 add	 edx, 37			; 00000025H
  000a6	52		 push	 edx
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b7	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv85[ebp], 0
$LN57@draw_2d_eo:
  000c1	6a 08		 push	 8
  000c3	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  000c9	51		 push	 ecx
  000ca	6b 95 5c fe ff
	ff 60		 imul	 edx, DWORD PTR tv77[ebp], 96
  000d1	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv85[ebp]
  000d7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000de	ff d1		 call	 ecx
  000e0	89 85 0c ff ff
	ff		 mov	 DWORD PTR _source_position$[ebp], eax

; 3492 : 
; 3493 : 	target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  000e6	83 bd 14 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  000ed	74 10		 je	 SHORT $LN58@draw_2d_eo
  000ef	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  000f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f7	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv129[ebp], ecx
  000fd	eb 24		 jmp	 SHORT $LN59@draw_2d_eo
$LN58@draw_2d_eo:
  000ff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  00105	83 c2 27	 add	 edx, 39			; 00000027H
  00108	52		 push	 edx
  00109	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0010e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00113	50		 push	 eax
  00114	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00119	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv129[ebp], 0
$LN59@draw_2d_eo:
  00123	b9 01 00 00 00	 mov	 ecx, 1
  00128	85 c9		 test	 ecx, ecx
  0012a	74 0c		 je	 SHORT $LN60@draw_2d_eo
  0012c	c7 85 58 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv137[ebp], 38 ; 00000026H
  00136	eb 24		 jmp	 SHORT $LN61@draw_2d_eo
$LN60@draw_2d_eo:
  00138	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  0013e	83 c2 27	 add	 edx, 39			; 00000027H
  00141	52		 push	 edx
  00142	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00147	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0014c	50		 push	 eax
  0014d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00152	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv137[ebp], 0
$LN61@draw_2d_eo:
  0015c	6a 26		 push	 38			; 00000026H
  0015e	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00164	51		 push	 ecx
  00165	69 95 5c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv129[ebp], 180
  0016f	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  00175	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0017c	ff d1		 call	 ecx
  0017e	89 85 10 ff ff
	ff		 mov	 DWORD PTR _target$[ebp], eax

; 3494 : 
; 3495 : 	if (target)

  00184	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  0018b	0f 84 9d 00 00
	00		 je	 $LN5@draw_2d_eo

; 3496 : 		target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00191	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00198	74 10		 je	 SHORT $LN62@draw_2d_eo
  0019a	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _target$[ebp]
  001a0	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a2	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv150[ebp], ecx
  001a8	eb 24		 jmp	 SHORT $LN63@draw_2d_eo
$LN62@draw_2d_eo:
  001aa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  001b0	83 c2 2a	 add	 edx, 42			; 0000002aH
  001b3	52		 push	 edx
  001b4	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  001b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001be	50		 push	 eax
  001bf	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c4	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
$LN63@draw_2d_eo:
  001ce	b9 01 00 00 00	 mov	 ecx, 1
  001d3	85 c9		 test	 ecx, ecx
  001d5	74 0c		 je	 SHORT $LN64@draw_2d_eo
  001d7	c7 85 58 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv158[ebp], 8
  001e1	eb 24		 jmp	 SHORT $LN65@draw_2d_eo
$LN64@draw_2d_eo:
  001e3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  001e9	83 c2 2a	 add	 edx, 42			; 0000002aH
  001ec	52		 push	 edx
  001ed	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  001f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001f7	50		 push	 eax
  001f8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001fd	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv158[ebp], 0
$LN65@draw_2d_eo:
  00207	6a 08		 push	 8
  00209	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _target$[ebp]
  0020f	51		 push	 ecx
  00210	6b 95 5c fe ff
	ff 60		 imul	 edx, DWORD PTR tv150[ebp], 96
  00217	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv158[ebp]
  0021d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00224	ff d1		 call	 ecx
  00226	89 85 08 ff ff
	ff		 mov	 DWORD PTR _target_position$[ebp], eax

; 3497 : 	else

  0022c	eb 0b		 jmp	 SHORT $LN6@draw_2d_eo
$LN5@draw_2d_eo:

; 3498 : 		target_position = get_eo_tracking_point();

  0022e	e8 00 00 00 00	 call	 ?get_eo_tracking_point@@YGPAUVEC3D@@XZ ; get_eo_tracking_point
  00233	89 85 08 ff ff
	ff		 mov	 DWORD PTR _target_position$[ebp], eax
$LN6@draw_2d_eo:

; 3499 : 
; 3500 : 	////////////////////////////////////////
; 3501 : 	//
; 3502 : 	// text
; 3503 : 	//
; 3504 : 	////////////////////////////////////////
; 3505 : 
; 3506 : 	set_mono_font_colour (MFD_COLOUR1);

  00239	b8 04 00 00 00	 mov	 eax, 4
  0023e	6b c8 00	 imul	 ecx, eax, 0
  00241	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00247	52		 push	 edx
  00248	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 3507 : 
; 3508 : 	if (draw_large_mfd)

  0024d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00254	74 09		 je	 SHORT $LN7@draw_2d_eo

; 3509 : 	{
; 3510 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  00256	6a 05		 push	 5
  00258	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 3511 : 	}
; 3512 : 	else

  0025d	eb 07		 jmp	 SHORT $LN8@draw_2d_eo
$LN7@draw_2d_eo:

; 3513 : 	{
; 3514 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  0025f	6a 01		 push	 1
  00261	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN8@draw_2d_eo:

; 3515 : 	}
; 3516 : 
; 3517 : 	//
; 3518 : 	// sensor type
; 3519 : 	//
; 3520 : 
; 3521 : 	if (draw_large_mfd)

  00266	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0026d	74 12		 je	 SHORT $LN9@draw_2d_eo

; 3522 : 	{
; 3523 : 		y_adjust = 5.0;

  0026f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  00277	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3524 : 	}
; 3525 : 	else

  0027f	eb 10		 jmp	 SHORT $LN10@draw_2d_eo
$LN9@draw_2d_eo:

; 3526 : 	{
; 3527 : 		y_adjust = 2.0;

  00281	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00289	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN10@draw_2d_eo:

; 3528 : 	}
; 3529 : 
; 3530 : 	set_2d_mono_font_position (-1.0, 1.0);

  00291	51		 push	 ecx
  00292	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0029a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029f	51		 push	 ecx
  002a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  002a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ad	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3531 : 
; 3532 : 	set_mono_font_rel_position (1.0, y_adjust);

  002b2	51		 push	 ecx
  002b3	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c0	51		 push	 ecx
  002c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ce	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3533 : 
; 3534 : 	switch (system)

  002d3	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  002d6	89 85 5c fe ff
	ff		 mov	 DWORD PTR tv176[ebp], eax
  002dc	83 bd 5c fe ff
	ff 03		 cmp	 DWORD PTR tv176[ebp], 3
  002e3	74 14		 je	 SHORT $LN11@draw_2d_eo
  002e5	83 bd 5c fe ff
	ff 04		 cmp	 DWORD PTR tv176[ebp], 4
  002ec	74 17		 je	 SHORT $LN12@draw_2d_eo
  002ee	83 bd 5c fe ff
	ff 05		 cmp	 DWORD PTR tv176[ebp], 5
  002f5	74 1a		 je	 SHORT $LN13@draw_2d_eo
  002f7	eb 24		 jmp	 SHORT $LN14@draw_2d_eo
$LN11@draw_2d_eo:

; 3535 : 	{
; 3536 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 3537 : 		{
; 3538 : 			print_mono_font_string ("FLIR");

  002f9	68 00 00 00 00	 push	 OFFSET ??_C@_04MIGKMLBH@FLIR@
  002fe	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3539 : 
; 3540 : 			break;

  00303	eb 22		 jmp	 SHORT $LN2@draw_2d_eo
$LN12@draw_2d_eo:

; 3541 : 		}
; 3542 : 		case TARGET_ACQUISITION_SYSTEM_DTV:
; 3543 : 		{
; 3544 : 			print_mono_font_string ("DTV");

  00305	68 00 00 00 00	 push	 OFFSET ??_C@_03ENJJJDDH@DTV@
  0030a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3545 : 
; 3546 : 			break;

  0030f	eb 16		 jmp	 SHORT $LN2@draw_2d_eo
$LN13@draw_2d_eo:

; 3547 : 		}
; 3548 : 		case TARGET_ACQUISITION_SYSTEM_DVO:
; 3549 : 		{
; 3550 : 			print_mono_font_string ("DVO");

  00311	68 00 00 00 00	 push	 OFFSET ??_C@_03NFBNOOEB@DVO@
  00316	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3551 : 
; 3552 : 			break;

  0031b	eb 0a		 jmp	 SHORT $LN2@draw_2d_eo
$LN14@draw_2d_eo:

; 3553 : 		}
; 3554 : 		default:
; 3555 : 		{
; 3556 : 			print_mono_font_string ("XXX");

  0031d	68 00 00 00 00	 push	 OFFSET ??_C@_03MAMPKPPK@XXX@
  00322	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN2@draw_2d_eo:

; 3557 : 
; 3558 : 			break;
; 3559 : 		}
; 3560 : 	}
; 3561 : 
; 3562 : 	//
; 3563 : 	// damaged
; 3564 : 	//
; 3565 : 
; 3566 : 	if (damaged)

  00327	83 7d 10 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0032b	0f 84 9d 00 00
	00		 je	 $LN15@draw_2d_eo

; 3567 : 	{
; 3568 : 		draw_2d_line (-0.5, -0.5,  0.5, 0.5, MFD_COLOUR1);

  00331	b8 04 00 00 00	 mov	 eax, 4
  00336	6b c8 00	 imul	 ecx, eax, 0
  00339	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0033f	52		 push	 edx
  00340	51		 push	 ecx
  00341	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00349	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034e	51		 push	 ecx
  0034f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00357	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035c	51		 push	 ecx
  0035d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00365	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036a	51		 push	 ecx
  0036b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00373	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00378	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3569 : 		draw_2d_line ( 0.5, -0.5, -0.5, 0.5, MFD_COLOUR1);

  0037d	b8 04 00 00 00	 mov	 eax, 4
  00382	6b c8 00	 imul	 ecx, eax, 0
  00385	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0038b	52		 push	 edx
  0038c	51		 push	 ecx
  0038d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00395	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039a	51		 push	 ecx
  0039b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  003a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a8	51		 push	 ecx
  003a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  003b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b6	51		 push	 ecx
  003b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  003bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3570 : 
; 3571 : 		return;

  003c9	e9 e7 12 00 00	 jmp	 $LN1@draw_2d_eo
$LN15@draw_2d_eo:

; 3572 : 	}
; 3573 : 
; 3574 : 	if (eo_low_light)

  003ce	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_low_light@@3HA, 0 ; eo_low_light
  003d5	0f 84 8c 00 00
	00		 je	 $LN20@draw_2d_eo

; 3575 : 	{
; 3576 : 		if (draw_large_mfd)

  003db	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  003e2	74 12		 je	 SHORT $LN17@draw_2d_eo

; 3577 : 		{
; 3578 : 			y_adjust = 18.0;

  003e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41900000
  003ec	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3579 : 		}
; 3580 : 		else

  003f4	eb 10		 jmp	 SHORT $LN18@draw_2d_eo
$LN17@draw_2d_eo:

; 3581 : 		{
; 3582 : 			y_adjust = 9.0;

  003f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41100000
  003fe	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN18@draw_2d_eo:

; 3583 : 		}
; 3584 : 
; 3585 : 		set_2d_mono_font_position (-1.0, 1.0);

  00406	51		 push	 ecx
  00407	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0040f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00414	51		 push	 ecx
  00415	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0041d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00422	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3586 : 
; 3587 : 		set_mono_font_rel_position (1.0, y_adjust);

  00427	51		 push	 ecx
  00428	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00430	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00435	51		 push	 ecx
  00436	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0043e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00443	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3588 : 
; 3589 : 		if (draw_large_mfd)

  00448	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0044f	74 0c		 je	 SHORT $LN19@draw_2d_eo

; 3590 : 		{
; 3591 : 			print_mono_font_string ("LO LIGHT");

  00451	68 00 00 00 00	 push	 OFFSET ??_C@_08JFLECGBM@LO?5LIGHT@
  00456	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3592 : 		}
; 3593 : 		else

  0045b	eb 0a		 jmp	 SHORT $LN20@draw_2d_eo
$LN19@draw_2d_eo:

; 3594 : 		{
; 3595 : 			print_mono_font_string ("LO");

  0045d	68 00 00 00 00	 push	 OFFSET ??_C@_02ONPABID@LO@
  00462	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN20@draw_2d_eo:

; 3596 : 		}
; 3597 : 	}
; 3598 : 
; 3599 : 	//
; 3600 : 	// field of view
; 3601 : 	//
; 3602 : 
; 3603 : #ifdef OLD_EO
; 3604 : 	switch (eo->field_of_view)
; 3605 : 	{
; 3606 : 		case EO_FOV_NARROW:
; 3607 : 		{
; 3608 : 			if (draw_large_mfd)
; 3609 : 			{
; 3610 : 				s = "NARROW";
; 3611 : 			}
; 3612 : 			else
; 3613 : 			{
; 3614 : 				s = "NAR";
; 3615 : 			}
; 3616 : 
; 3617 : 			break;
; 3618 : 		}
; 3619 : 		case EO_FOV_MEDIUM:
; 3620 : 		{
; 3621 : 			if (draw_large_mfd)
; 3622 : 			{
; 3623 : 				s = "MEDIUM";
; 3624 : 			}
; 3625 : 			else
; 3626 : 			{
; 3627 : 				s = "MED";
; 3628 : 			}
; 3629 : 
; 3630 : 			break;
; 3631 : 		}
; 3632 : 		case EO_FOV_WIDE:
; 3633 : 		{
; 3634 : 			s = "WIDE";
; 3635 : 
; 3636 : 			break;
; 3637 : 		}
; 3638 : 		default:
; 3639 : 		{
; 3640 : 			s = "XXX";
; 3641 : 
; 3642 : 			break;
; 3643 : 		}
; 3644 : 	}
; 3645 : #else
; 3646 : 	{
; 3647 : 		float level = 1.0 / convert_linear_view_value (eo);

  00467	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  0046a	50		 push	 eax
  0046b	e8 00 00 00 00	 call	 ?convert_linear_view_value@@YGMPAUEO_PARAMS_DYNAMIC_MOVE@@@Z ; convert_linear_view_value
  00470	dd 9d 58 fe ff
	ff		 fstp	 QWORD PTR tv910[ebp]
  00476	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0047e	f2 0f 5e 85 58
	fe ff ff	 divsd	 xmm0, QWORD PTR tv910[ebp]
  00486	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0048a	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _level$9[ebp], xmm0

; 3648 : 
; 3649 : 		if (level < 10)

  00492	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  0049a	0f 2f 85 c0 fe
	ff ff		 comiss	 xmm0, DWORD PTR _level$9[ebp]
  004a1	76 26		 jbe	 SHORT $LN21@draw_2d_eo

; 3650 : 		{
; 3651 : 			sprintf (buffer, "%.1f", level);

  004a3	f3 0f 5a 85 c0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _level$9[ebp]
  004ab	83 ec 08	 sub	 esp, 8
  004ae	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  004b3	68 00 00 00 00	 push	 OFFSET ??_C@_04GGBPDDBN@?$CF?41f@
  004b8	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  004be	50		 push	 eax
  004bf	e8 00 00 00 00	 call	 _sprintf
  004c4	83 c4 10	 add	 esp, 16			; 00000010H

; 3652 : 		}
; 3653 : 		else

  004c7	eb 1d		 jmp	 SHORT $LN22@draw_2d_eo
$LN21@draw_2d_eo:

; 3654 : 		{
; 3655 : 			sprintf (buffer, "%d", (int)level);

  004c9	f3 0f 2c 85 c0
	fe ff ff	 cvttss2si eax, DWORD PTR _level$9[ebp]
  004d1	50		 push	 eax
  004d2	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  004d7	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  004dd	51		 push	 ecx
  004de	e8 00 00 00 00	 call	 _sprintf
  004e3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN22@draw_2d_eo:

; 3656 : 		}
; 3657 : 
; 3658 : 		s = buffer;

  004e6	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  004ec	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 3659 : 	}
; 3660 : #endif
; 3661 : 
; 3662 : 	width = get_mono_font_string_width (s);

  004ef	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  004f2	50		 push	 eax
  004f3	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  004f8	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 3663 : 
; 3664 : 	if (draw_large_mfd)

  004fe	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00505	74 2e		 je	 SHORT $LN23@draw_2d_eo

; 3665 : 	{
; 3666 : 		width += 2.0;

  00507	f3 0f 5a 85 30
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  0050f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00517	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0051b	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 3667 : 
; 3668 : 		y_adjust = 5.0;

  00523	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  0052b	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3669 : 	}
; 3670 : 	else

  00533	eb 2c		 jmp	 SHORT $LN24@draw_2d_eo
$LN23@draw_2d_eo:

; 3671 : 	{
; 3672 : 		width += 1.0;

  00535	f3 0f 5a 85 30
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  0053d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00545	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00549	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 3673 : 
; 3674 : 		y_adjust = 2.0;

  00551	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00559	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN24@draw_2d_eo:

; 3675 : 	}
; 3676 : 
; 3677 : 	set_2d_mono_font_position (1.0, 1.0);

  00561	51		 push	 ecx
  00562	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0056a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0056f	51		 push	 ecx
  00570	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00578	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3678 : 
; 3679 : 	set_mono_font_rel_position (-width, y_adjust);

  00582	51		 push	 ecx
  00583	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0058b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00590	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00598	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0059f	51		 push	 ecx
  005a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a5	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3680 : 
; 3681 : 	print_mono_font_string (s);

  005aa	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  005ad	50		 push	 eax
  005ae	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3682 : 
; 3683 : 
; 3684 : // Jabberwock 031107 Designated targets
; 3685 : 
; 3686 : 	target = get_local_entity_parent (get_gunship_entity (), LIST_TYPE_TARGET);

  005b3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  005ba	74 0f		 je	 SHORT $LN66@draw_2d_eo
  005bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  005c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  005c3	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv243[ebp], ecx
  005c9	eb 27		 jmp	 SHORT $LN67@draw_2d_eo
$LN66@draw_2d_eo:
  005cb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  005d1	81 c2 e8 00 00
	00		 add	 edx, 232		; 000000e8H
  005d7	52		 push	 edx
  005d8	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  005dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  005e2	50		 push	 eax
  005e3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005e8	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv243[ebp], 0
$LN67@draw_2d_eo:
  005f2	b9 01 00 00 00	 mov	 ecx, 1
  005f7	85 c9		 test	 ecx, ecx
  005f9	74 0c		 je	 SHORT $LN68@draw_2d_eo
  005fb	c7 85 58 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv251[ebp], 38 ; 00000026H
  00605	eb 27		 jmp	 SHORT $LN69@draw_2d_eo
$LN68@draw_2d_eo:
  00607	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  0060d	81 c2 e8 00 00
	00		 add	 edx, 232		; 000000e8H
  00613	52		 push	 edx
  00614	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00619	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0061e	50		 push	 eax
  0061f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00624	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv251[ebp], 0
$LN69@draw_2d_eo:
  0062e	6a 26		 push	 38			; 00000026H
  00630	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00636	51		 push	 ecx
  00637	69 95 5c fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv243[ebp], 180
  00641	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv251[ebp]
  00647	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0064e	ff d1		 call	 ecx
  00650	89 85 10 ff ff
	ff		 mov	 DWORD PTR _target$[ebp], eax

; 3687 : 
; 3688 : 	if (target && get_local_entity_parent (target, LIST_TYPE_DESIGNATED_TARGET))

  00656	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  0065d	0f 84 36 01 00
	00		 je	 $LN25@draw_2d_eo
  00663	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  0066a	74 10		 je	 SHORT $LN70@draw_2d_eo
  0066c	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _target$[ebp]
  00672	8b 08		 mov	 ecx, DWORD PTR [eax]
  00674	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv263[ebp], ecx
  0067a	eb 20		 jmp	 SHORT $LN71@draw_2d_eo
$LN70@draw_2d_eo:
  0067c	68 68 0e 00 00	 push	 3688			; 00000e68H
  00681	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00686	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0068c	52		 push	 edx
  0068d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00692	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv263[ebp], 0
$LN71@draw_2d_eo:
  0069c	b8 01 00 00 00	 mov	 eax, 1
  006a1	85 c0		 test	 eax, eax
  006a3	74 0c		 je	 SHORT $LN72@draw_2d_eo
  006a5	c7 85 58 fe ff
	ff 0a 00 00 00	 mov	 DWORD PTR tv270[ebp], 10 ; 0000000aH
  006af	eb 20		 jmp	 SHORT $LN73@draw_2d_eo
$LN72@draw_2d_eo:
  006b1	68 68 0e 00 00	 push	 3688			; 00000e68H
  006b6	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  006bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  006c1	51		 push	 ecx
  006c2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006c7	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv270[ebp], 0
$LN73@draw_2d_eo:
  006d1	6a 0a		 push	 10			; 0000000aH
  006d3	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _target$[ebp]
  006d9	52		 push	 edx
  006da	69 85 5c fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv263[ebp], 180
  006e4	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR tv270[ebp]
  006ea	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  006f1	ff d2		 call	 edx
  006f3	85 c0		 test	 eax, eax
  006f5	0f 84 9e 00 00
	00		 je	 $LN25@draw_2d_eo

; 3689 : 	{
; 3690 : 		if (draw_large_mfd)

  006fb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00702	74 12		 je	 SHORT $LN26@draw_2d_eo

; 3691 : 		{
; 3692 : 			y_adjust = -25.0;

  00704	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  0070c	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3693 : 		}
; 3694 : 		else

  00714	eb 10		 jmp	 SHORT $LN27@draw_2d_eo
$LN26@draw_2d_eo:

; 3695 : 		{
; 3696 : 			y_adjust = -12.0;

  00716	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  0071e	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN27@draw_2d_eo:

; 3697 : 		}
; 3698 : 
; 3699 : 		width = get_mono_font_string_width ("MARKED");

  00726	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  0072b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00730	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 3700 : 
; 3701 : 		set_2d_mono_font_position (1.0, -1.0);

  00736	51		 push	 ecx
  00737	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0073f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00744	51		 push	 ecx
  00745	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0074d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00752	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3702 : 
; 3703 : 		set_mono_font_rel_position (-width-1.0, y_adjust);

  00757	51		 push	 ecx
  00758	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00760	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00765	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  0076d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00774	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00778	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00780	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00784	51		 push	 ecx
  00785	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3704 : 
; 3705 : 		print_mono_font_string ("MARKED");

  0078f	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  00794	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN25@draw_2d_eo:

; 3706 : 	}
; 3707 : // Jabberwock 031107 ends
; 3708 : 
; 3709 : 	//
; 3710 : 	// 030418 loke
; 3711 : 	// draw an indication if ground stablisation is enabled
; 3712 : 	//
; 3713 : 
; 3714 : 	if (eo_ground_stabilised)

  00799	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_ground_stabilised@@3HA, 0 ; eo_ground_stabilised
  007a0	0f 84 8e 00 00
	00		 je	 $LN28@draw_2d_eo

; 3715 : 	{
; 3716 : 		if (draw_large_mfd) // Jabberwock 031107 Designated targets - moved the stab indicator one line up, sorry!

  007a6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  007ad	74 12		 je	 SHORT $LN29@draw_2d_eo

; 3717 : 		{
; 3718 : 			y_adjust = -38.0;

  007af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2180000
  007b7	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3719 : 		}
; 3720 : 		else

  007bf	eb 10		 jmp	 SHORT $LN30@draw_2d_eo
$LN29@draw_2d_eo:

; 3721 : 		{
; 3722 : 			y_adjust = -19.0;

  007c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1980000
  007c9	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN30@draw_2d_eo:

; 3723 : 		}
; 3724 : 
; 3725 : 		width = get_mono_font_string_width ("S");

  007d1	68 00 00 00 00	 push	 OFFSET ??_C@_01CPLAODJH@S@
  007d6	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  007db	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 3726 : 
; 3727 : 		set_2d_mono_font_position (1.0, -1.0);

  007e1	51		 push	 ecx
  007e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  007ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ef	51		 push	 ecx
  007f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  007f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007fd	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3728 : 
; 3729 : 		set_mono_font_rel_position (-width, y_adjust);

  00802	51		 push	 ecx
  00803	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0080b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00810	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00818	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0081f	51		 push	 ecx
  00820	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00825	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3730 : 
; 3731 : 		print_mono_font_string ("S");

  0082a	68 00 00 00 00	 push	 OFFSET ??_C@_01CPLAODJH@S@
  0082f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN28@draw_2d_eo:

; 3732 : 	}
; 3733 : 
; 3734 : 	////////////////////////////////////////
; 3735 : 	//
; 3736 : 	// draw heading scale
; 3737 : 	//
; 3738 : 	////////////////////////////////////////
; 3739 : 
; 3740 : 	draw_heading_scale (get_heading_from_attitude_matrix (eo_vp.attitude), FALSE);

  00834	6a 00		 push	 0
  00836	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0083b	d1 e0		 shl	 eax, 1
  0083d	b9 04 00 00 00	 mov	 ecx, 4
  00842	d1 e1		 shl	 ecx, 1
  00844	51		 push	 ecx
  00845	f3 0f 10 84 08
	0c 00 00 00	 movss	 xmm0, DWORD PTR ?eo_vp@@3UVIEWPOINT@@A[eax+ecx+12]
  0084e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00853	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00858	d1 e2		 shl	 edx, 1
  0085a	b8 04 00 00 00	 mov	 eax, 4
  0085f	6b c8 00	 imul	 ecx, eax, 0
  00862	51		 push	 ecx
  00863	f3 0f 10 84 0a
	0c 00 00 00	 movss	 xmm0, DWORD PTR ?eo_vp@@3UVIEWPOINT@@A[edx+ecx+12]
  0086c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00871	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  00876	d9 9d 5c fe ff
	ff		 fstp	 DWORD PTR tv987[ebp]
  0087c	f3 0f 10 85 5c
	fe ff ff	 movss	 xmm0, DWORD PTR tv987[ebp]
  00884	51		 push	 ecx
  00885	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0088a	e8 00 00 00 00	 call	 ?draw_heading_scale@@YGXMH@Z ; draw_heading_scale

; 3741 : 
; 3742 : 	// draw speed and altitude
; 3743 : 
; 3744 : 	{
; 3745 : 		float
; 3746 : 			speed = knots(current_flight_dynamics->velocity_z.value),

  0088f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00894	f3 0f 10 80 9c
	20 00 00	 movss	 xmm0, DWORD PTR [eax+8348]
  0089c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ff85d84
  008a4	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR _speed$8[ebp], xmm0

; 3747 : 			altitude = min(feet(current_flight_dynamics->radar_altitude.value), 500.0f);

  008ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43fa0000
  008b4	f3 0f 11 85 64
	fe ff ff	 movss	 DWORD PTR $T2[ebp], xmm0
  008bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  008c1	f3 0f 10 80 44
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9284]
  008c9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4051f948
  008d1	f3 0f 11 85 60
	fe ff ff	 movss	 DWORD PTR $T1[ebp], xmm0
  008d9	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  008df	51		 push	 ecx
  008e0	8d 95 60 fe ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  008e6	52		 push	 edx
  008e7	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  008ec	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  008f0	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR _altitude$7[ebp], xmm0

; 3748 : 
; 3749 : 		y_adjust = 0.0;

  008f8	0f 57 c0	 xorps	 xmm0, xmm0
  008fb	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3750 : 
; 3751 : 		sprintf(buffer, "%3d FT", (int)altitude);

  00903	f3 0f 2c 85 b8
	fe ff ff	 cvttss2si eax, DWORD PTR _altitude$7[ebp]
  0090b	50		 push	 eax
  0090c	68 00 00 00 00	 push	 OFFSET ??_C@_06BLLIFECI@?$CF3d?5FT@
  00911	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00917	51		 push	 ecx
  00918	e8 00 00 00 00	 call	 _sprintf
  0091d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3752 : 
; 3753 : 		set_2d_mono_font_position (-0.4, -0.7);

  00920	51		 push	 ecx
  00921	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00929	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0092e	51		 push	 ecx
  0092f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00937	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0093c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3754 : 		set_mono_font_rel_position (0.0, y_adjust);

  00941	51		 push	 ecx
  00942	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0094a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0094f	51		 push	 ecx
  00950	0f 57 c0	 xorps	 xmm0, xmm0
  00953	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00958	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3755 : 		print_mono_font_string (buffer);

  0095d	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00963	50		 push	 eax
  00964	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3756 : 
; 3757 : 
; 3758 : 		sprintf(buffer, "%3d KTS", (int)speed);

  00969	f3 0f 2c 85 bc
	fe ff ff	 cvttss2si eax, DWORD PTR _speed$8[ebp]
  00971	50		 push	 eax
  00972	68 00 00 00 00	 push	 OFFSET ??_C@_07FGFCMGOE@?$CF3d?5KTS@
  00977	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0097d	51		 push	 ecx
  0097e	e8 00 00 00 00	 call	 _sprintf
  00983	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3759 : 		width = get_mono_font_string_width (buffer);

  00986	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0098c	50		 push	 eax
  0098d	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00992	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 3760 : 
; 3761 : 		set_2d_mono_font_position (0.4, -0.7);

  00998	51		 push	 ecx
  00999	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  009a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009a6	51		 push	 ecx
  009a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  009af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b4	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3762 : 		set_mono_font_rel_position (-width, y_adjust);

  009b9	51		 push	 ecx
  009ba	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  009c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009c7	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  009cf	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  009d6	51		 push	 ecx
  009d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009dc	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3763 : 		print_mono_font_string (buffer);

  009e1	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  009e7	50		 push	 eax
  009e8	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3764 : 	}
; 3765 : 
; 3766 : 	////////////////////////////////////////
; 3767 : 	//
; 3768 : 	// draw field of regard and view boxes
; 3769 : 	//
; 3770 : 	////////////////////////////////////////
; 3771 : 
; 3772 : 	draw_field_of_regard_and_view_boxes ();

  009ed	e8 00 00 00 00	 call	 ?draw_field_of_regard_and_view_boxes@@YGXXZ ; draw_field_of_regard_and_view_boxes

; 3773 : 
; 3774 : 	////////////////////////////////////////
; 3775 : 	//
; 3776 : 	// line graphics
; 3777 : 	//
; 3778 : 	////////////////////////////////////////
; 3779 : 
; 3780 : 	//
; 3781 : 	// datum
; 3782 : 	//
; 3783 : 
; 3784 : 	if (draw_large_mfd)

  009f2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  009f9	0f 84 0d 01 00
	00		 je	 $LN31@draw_2d_eo

; 3785 : 	{
; 3786 : 		draw_2d_line (-0.075, 0.0, -0.025, 0.0, MFD_COLOUR1);

  009ff	b8 04 00 00 00	 mov	 eax, 4
  00a04	6b c8 00	 imul	 ecx, eax, 0
  00a07	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a0d	52		 push	 edx
  00a0e	51		 push	 ecx
  00a0f	0f 57 c0	 xorps	 xmm0, xmm0
  00a12	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a17	51		 push	 ecx
  00a18	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  00a20	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a25	51		 push	 ecx
  00a26	0f 57 c0	 xorps	 xmm0, xmm0
  00a29	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a2e	51		 push	 ecx
  00a2f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00a37	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a3c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3787 : 
; 3788 : 		draw_2d_line (0.035, 0.0, 0.08, 0.0, MFD_COLOUR1);

  00a41	b8 04 00 00 00	 mov	 eax, 4
  00a46	6b c8 00	 imul	 ecx, eax, 0
  00a49	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a4f	52		 push	 edx
  00a50	51		 push	 ecx
  00a51	0f 57 c0	 xorps	 xmm0, xmm0
  00a54	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a59	51		 push	 ecx
  00a5a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  00a62	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a67	51		 push	 ecx
  00a68	0f 57 c0	 xorps	 xmm0, xmm0
  00a6b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a70	51		 push	 ecx
  00a71	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00a79	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a7e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3789 : 
; 3790 : 		draw_2d_line (0.0, -0.075, 0.0, -0.025, MFD_COLOUR1);

  00a83	b8 04 00 00 00	 mov	 eax, 4
  00a88	6b c8 00	 imul	 ecx, eax, 0
  00a8b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a91	52		 push	 edx
  00a92	51		 push	 ecx
  00a93	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  00a9b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa0	51		 push	 ecx
  00aa1	0f 57 c0	 xorps	 xmm0, xmm0
  00aa4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa9	51		 push	 ecx
  00aaa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00ab2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ab7	51		 push	 ecx
  00ab8	0f 57 c0	 xorps	 xmm0, xmm0
  00abb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3791 : 
; 3792 : 		draw_2d_line (0.0, 0.035, 0.0, 0.08, MFD_COLOUR1);

  00ac5	b8 04 00 00 00	 mov	 eax, 4
  00aca	6b c8 00	 imul	 ecx, eax, 0
  00acd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ad3	52		 push	 edx
  00ad4	51		 push	 ecx
  00ad5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  00add	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ae2	51		 push	 ecx
  00ae3	0f 57 c0	 xorps	 xmm0, xmm0
  00ae6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aeb	51		 push	 ecx
  00aec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00af4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00af9	51		 push	 ecx
  00afa	0f 57 c0	 xorps	 xmm0, xmm0
  00afd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b02	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3793 : 	}
; 3794 : 	else

  00b07	e9 08 01 00 00	 jmp	 $LN32@draw_2d_eo
$LN31@draw_2d_eo:

; 3795 : 	{
; 3796 : 		draw_2d_line (-0.075, 0.0, -0.025, 0.0, MFD_COLOUR1);

  00b0c	b8 04 00 00 00	 mov	 eax, 4
  00b11	6b c8 00	 imul	 ecx, eax, 0
  00b14	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b1a	52		 push	 edx
  00b1b	51		 push	 ecx
  00b1c	0f 57 c0	 xorps	 xmm0, xmm0
  00b1f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b24	51		 push	 ecx
  00b25	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  00b2d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b32	51		 push	 ecx
  00b33	0f 57 c0	 xorps	 xmm0, xmm0
  00b36	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b3b	51		 push	 ecx
  00b3c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00b44	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b49	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3797 : 
; 3798 : 		draw_2d_line (0.035, 0.0, 0.09, 0.0, MFD_COLOUR1);

  00b4e	b8 04 00 00 00	 mov	 eax, 4
  00b53	6b c8 00	 imul	 ecx, eax, 0
  00b56	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b5c	52		 push	 edx
  00b5d	51		 push	 ecx
  00b5e	0f 57 c0	 xorps	 xmm0, xmm0
  00b61	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b66	51		 push	 ecx
  00b67	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db851ec
  00b6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b74	51		 push	 ecx
  00b75	0f 57 c0	 xorps	 xmm0, xmm0
  00b78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b7d	51		 push	 ecx
  00b7e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00b86	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b8b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3799 : 
; 3800 : 		draw_2d_line (0.0, -0.075, 0.0, -0.025, MFD_COLOUR1);

  00b90	b8 04 00 00 00	 mov	 eax, 4
  00b95	6b c8 00	 imul	 ecx, eax, 0
  00b98	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b9e	52		 push	 edx
  00b9f	51		 push	 ecx
  00ba0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  00ba8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bad	51		 push	 ecx
  00bae	0f 57 c0	 xorps	 xmm0, xmm0
  00bb1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bb6	51		 push	 ecx
  00bb7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00bbf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bc4	51		 push	 ecx
  00bc5	0f 57 c0	 xorps	 xmm0, xmm0
  00bc8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bcd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3801 : 
; 3802 : 		draw_2d_line (0.0, 0.035, 0.0, 0.09, MFD_COLOUR1);

  00bd2	b8 04 00 00 00	 mov	 eax, 4
  00bd7	6b c8 00	 imul	 ecx, eax, 0
  00bda	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00be0	52		 push	 edx
  00be1	51		 push	 ecx
  00be2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db851ec
  00bea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bef	51		 push	 ecx
  00bf0	0f 57 c0	 xorps	 xmm0, xmm0
  00bf3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bf8	51		 push	 ecx
  00bf9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00c01	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c06	51		 push	 ecx
  00c07	0f 57 c0	 xorps	 xmm0, xmm0
  00c0a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c0f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN32@draw_2d_eo:

; 3803 : 	}
; 3804 : 
; 3805 : 	//
; 3806 : 	// target gates
; 3807 : 	//
; 3808 : 
; 3809 : 	if (valid_3d)

  00c14	83 7d 14 00	 cmp	 DWORD PTR _valid_3d$[ebp], 0
  00c18	0f 84 97 0a 00
	00		 je	 $LN36@draw_2d_eo

; 3810 : 	{
; 3811 : 		vec3d* tracking_point = get_eo_tracking_point();

  00c1e	e8 00 00 00 00	 call	 ?get_eo_tracking_point@@YGPAUVEC3D@@XZ ; get_eo_tracking_point
  00c23	89 85 b4 fe ff
	ff		 mov	 DWORD PTR _tracking_point$6[ebp], eax

; 3812 : 
; 3813 : 		if (target || tracking_point)

  00c29	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00c30	75 0d		 jne	 SHORT $LN35@draw_2d_eo
  00c32	83 bd b4 fe ff
	ff 00		 cmp	 DWORD PTR _tracking_point$6[ebp], 0
  00c39	0f 84 76 0a 00
	00		 je	 $LN36@draw_2d_eo
$LN35@draw_2d_eo:

; 3814 : 		{
; 3815 : 			if (!((!d3d_can_render_to_texture) && (!draw_large_mfd)))

  00c3f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  00c46	75 0d		 jne	 SHORT $LN37@draw_2d_eo
  00c48	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00c4f	0f 84 60 0a 00
	00		 je	 $LN36@draw_2d_eo
$LN37@draw_2d_eo:

; 3816 : 			{
; 3817 : 				if (target)

  00c55	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00c5c	74 15		 je	 SHORT $LN38@draw_2d_eo

; 3818 : 					get_local_entity_target_point (target, &target_point);

  00c5e	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _target_point$[ebp]
  00c64	50		 push	 eax
  00c65	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _target$[ebp]
  00c6b	51		 push	 ecx
  00c6c	e8 00 00 00 00	 call	 ?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_local_entity_target_point

; 3819 : 				else

  00c71	eb 20		 jmp	 SHORT $LN39@draw_2d_eo
$LN38@draw_2d_eo:

; 3820 : 					target_point = *tracking_point;

  00c73	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _tracking_point$6[ebp]
  00c79	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c7b	89 8d fc fe ff
	ff		 mov	 DWORD PTR _target_point$[ebp], ecx
  00c81	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00c84	89 95 00 ff ff
	ff		 mov	 DWORD PTR _target_point$[ebp+4], edx
  00c8a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00c8d	89 85 04 ff ff
	ff		 mov	 DWORD PTR _target_point$[ebp+8], eax
$LN39@draw_2d_eo:

; 3821 : 
; 3822 : 				tmp = main_vp;

  00c93	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00c98	be 00 00 00 00	 mov	 esi, OFFSET ?main_vp@@3UVIEWPOINT@@A ; main_vp
  00c9d	8d bd cc fe ff
	ff		 lea	 edi, DWORD PTR _tmp$[ebp]
  00ca3	f3 a5		 rep movsd

; 3823 : 
; 3824 : 				main_vp = eo_vp;

  00ca5	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00caa	be 00 00 00 00	 mov	 esi, OFFSET ?eo_vp@@3UVIEWPOINT@@A ; eo_vp
  00caf	bf 00 00 00 00	 mov	 edi, OFFSET ?main_vp@@3UVIEWPOINT@@A ; main_vp
  00cb4	f3 a5		 rep movsd

; 3825 : 
; 3826 : 				visibility = get_position_3d_screen_coordinates (&target_point, &i, &j);

  00cb6	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _j$[ebp]
  00cbc	50		 push	 eax
  00cbd	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _i$[ebp]
  00cc3	51		 push	 ecx
  00cc4	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _target_point$[ebp]
  00cca	52		 push	 edx
  00ccb	e8 00 00 00 00	 call	 ?get_position_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUVEC3D@@PAM1@Z ; get_position_3d_screen_coordinates
  00cd0	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _visibility$[ebp], eax

; 3827 : 
; 3828 : 				if ((visibility == OBJECT_3D_COMPLETELY_VISIBLE) || (visibility == OBJECT_3D_PARTIALLY_VISIBLE))

  00cd6	83 bd c8 fe ff
	ff 01		 cmp	 DWORD PTR _visibility$[ebp], 1
  00cdd	74 0d		 je	 SHORT $LN41@draw_2d_eo
  00cdf	83 bd c8 fe ff
	ff 02		 cmp	 DWORD PTR _visibility$[ebp], 2
  00ce6	0f 85 b7 09 00
	00		 jne	 $LN52@draw_2d_eo
$LN41@draw_2d_eo:

; 3829 : 				{
; 3830 : 					float x_adjust;
; 3831 : 					transform_mfd_screen_co_ords_to_mfd_texture_co_ords (&i, &j);

  00cec	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _j$[ebp]
  00cf2	50		 push	 eax
  00cf3	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _i$[ebp]
  00cf9	51		 push	 ecx
  00cfa	e8 00 00 00 00	 call	 ?transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z ; transform_mfd_screen_co_ords_to_mfd_texture_co_ords

; 3832 : 
; 3833 : 					get_2d_world_position (i, j, &x, &y);

  00cff	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _y$[ebp]
  00d05	50		 push	 eax
  00d06	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR _x$[ebp]
  00d0c	51		 push	 ecx
  00d0d	51		 push	 ecx
  00d0e	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _j$[ebp]
  00d16	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d1b	51		 push	 ecx
  00d1c	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _i$[ebp]
  00d24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d29	e8 00 00 00 00	 call	 ?get_2d_world_position@@YGXMMPAM0@Z ; get_2d_world_position

; 3834 : 
; 3835 : 
; 3836 : 					//
; 3837 : 					// target name
; 3838 : 					//
; 3839 : 
; 3840 : 					if (target)

  00d2e	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00d35	0f 84 56 02 00
	00		 je	 $LN43@draw_2d_eo

; 3841 : 					{
; 3842 : 						s = get_target_display_name (target, buffer, FALSE);

  00d3b	6a 00		 push	 0
  00d3d	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00d43	50		 push	 eax
  00d44	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _target$[ebp]
  00d4a	51		 push	 ecx
  00d4b	e8 00 00 00 00	 call	 ?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z ; get_target_display_name
  00d50	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 3843 : 
; 3844 : 						if (s)

  00d53	83 7d fc 00	 cmp	 DWORD PTR _s$[ebp], 0
  00d57	0f 84 34 02 00
	00		 je	 $LN43@draw_2d_eo

; 3845 : 						{
; 3846 : 							y_adjust = -12.0;

  00d5d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  00d65	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3847 : 							x_adjust = -get_mono_font_string_width (s) / 2.0;

  00d6d	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00d70	50		 push	 eax
  00d71	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00d76	d9 9d 5c fe ff
	ff		 fstp	 DWORD PTR tv1140[ebp]
  00d7c	f3 0f 10 85 5c
	fe ff ff	 movss	 xmm0, DWORD PTR tv1140[ebp]
  00d84	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00d8b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00d8f	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4000000000000000
  00d97	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00d9b	f3 0f 11 85 b0
	fe ff ff	 movss	 DWORD PTR _x_adjust$5[ebp], xmm0

; 3848 : 
; 3849 : 							if (strcmp(s, "LOW LIGHT") == 0
; 3850 : 								|| strcmp(s, "CP/G ID...") == 0)

  00da3	68 00 00 00 00	 push	 OFFSET ??_C@_09ICGCKLLB@LOW?5LIGHT@
  00da8	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00dab	50		 push	 eax
  00dac	e8 00 00 00 00	 call	 _strcmp
  00db1	83 c4 08	 add	 esp, 8
  00db4	85 c0		 test	 eax, eax
  00db6	74 15		 je	 SHORT $LN46@draw_2d_eo
  00db8	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CPHGBHEJ@CP?1G?5ID?4?4?4@
  00dbd	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00dc0	50		 push	 eax
  00dc1	e8 00 00 00 00	 call	 _strcmp
  00dc6	83 c4 08	 add	 esp, 8
  00dc9	85 c0		 test	 eax, eax
  00dcb	75 19		 jne	 SHORT $LN44@draw_2d_eo
$LN46@draw_2d_eo:

; 3851 : 							{
; 3852 : 								set_mono_font_colour (MFD_COLOUR_YELLOW);

  00dcd	b8 04 00 00 00	 mov	 eax, 4
  00dd2	6b c8 0d	 imul	 ecx, eax, 13
  00dd5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ddb	52		 push	 edx
  00ddc	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
  00de1	e9 54 01 00 00	 jmp	 $LN48@draw_2d_eo
$LN44@draw_2d_eo:

; 3853 : 							}
; 3854 : 							else if (get_local_entity_int_value(get_gunship_entity(), INT_TYPE_SIDE) !=

  00de6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00ded	74 0f		 je	 SHORT $LN74@draw_2d_eo
  00def	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00df4	8b 08		 mov	 ecx, DWORD PTR [eax]
  00df6	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv483[ebp], ecx
  00dfc	eb 20		 jmp	 SHORT $LN75@draw_2d_eo
$LN74@draw_2d_eo:
  00dfe	68 0e 0f 00 00	 push	 3854			; 00000f0eH
  00e03	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e08	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00e0e	52		 push	 edx
  00e0f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e14	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv483[ebp], 0
$LN75@draw_2d_eo:
  00e1e	b8 01 00 00 00	 mov	 eax, 1
  00e23	85 c0		 test	 eax, eax
  00e25	74 0c		 je	 SHORT $LN76@draw_2d_eo
  00e27	c7 85 58 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv490[ebp], 187 ; 000000bbH
  00e31	eb 20		 jmp	 SHORT $LN77@draw_2d_eo
$LN76@draw_2d_eo:
  00e33	68 0e 0f 00 00	 push	 3854			; 00000f0eH
  00e38	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e3d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00e43	51		 push	 ecx
  00e44	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e49	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv490[ebp], 0
$LN77@draw_2d_eo:
  00e53	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00e5a	74 10		 je	 SHORT $LN78@draw_2d_eo
  00e5c	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _target$[ebp]
  00e62	8b 02		 mov	 eax, DWORD PTR [edx]
  00e64	89 85 54 fe ff
	ff		 mov	 DWORD PTR tv501[ebp], eax
  00e6a	eb 20		 jmp	 SHORT $LN79@draw_2d_eo
$LN78@draw_2d_eo:
  00e6c	68 0f 0f 00 00	 push	 3855			; 00000f0fH
  00e71	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e76	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00e7c	51		 push	 ecx
  00e7d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e82	c7 85 54 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv501[ebp], 0
$LN79@draw_2d_eo:
  00e8c	ba 01 00 00 00	 mov	 edx, 1
  00e91	85 d2		 test	 edx, edx
  00e93	74 0c		 je	 SHORT $LN80@draw_2d_eo
  00e95	c7 85 50 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv508[ebp], 187 ; 000000bbH
  00e9f	eb 1f		 jmp	 SHORT $LN81@draw_2d_eo
$LN80@draw_2d_eo:
  00ea1	68 0f 0f 00 00	 push	 3855			; 00000f0fH
  00ea6	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00eab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00eb0	50		 push	 eax
  00eb1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00eb6	c7 85 50 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv508[ebp], 0
$LN81@draw_2d_eo:
  00ec0	68 bb 00 00 00	 push	 187			; 000000bbH
  00ec5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00ecb	51		 push	 ecx
  00ecc	69 95 5c fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv483[ebp], 1116
  00ed6	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv490[ebp]
  00edc	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00ee3	ff d1		 call	 ecx
  00ee5	8b f0		 mov	 esi, eax
  00ee7	68 bb 00 00 00	 push	 187			; 000000bbH
  00eec	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _target$[ebp]
  00ef2	52		 push	 edx
  00ef3	69 85 54 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv501[ebp], 1116
  00efd	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR tv508[ebp]
  00f03	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00f0a	ff d2		 call	 edx
  00f0c	3b f0		 cmp	 esi, eax
  00f0e	74 16		 je	 SHORT $LN47@draw_2d_eo

; 3855 : 								get_local_entity_int_value(target, INT_TYPE_SIDE))
; 3856 : 							{
; 3857 : 								set_mono_font_colour (MFD_COLOUR_RED);

  00f10	b8 04 00 00 00	 mov	 eax, 4
  00f15	6b c8 0f	 imul	 ecx, eax, 15
  00f18	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f1e	52		 push	 edx
  00f1f	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 3858 : 							}
; 3859 : 							else

  00f24	eb 14		 jmp	 SHORT $LN48@draw_2d_eo
$LN47@draw_2d_eo:

; 3860 : 								set_mono_font_colour (MFD_COLOUR1);

  00f26	b8 04 00 00 00	 mov	 eax, 4
  00f2b	6b c8 00	 imul	 ecx, eax, 0
  00f2e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f34	52		 push	 edx
  00f35	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN48@draw_2d_eo:

; 3861 : 
; 3862 : 							set_2d_mono_font_position (x, y - 0.33);

  00f3a	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00f42	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd51eb851eb851f
  00f4a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00f4e	51		 push	 ecx
  00f4f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f54	51		 push	 ecx
  00f55	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _x$[ebp]
  00f5d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f62	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3863 : 							set_mono_font_rel_position (x_adjust, y_adjust);

  00f67	51		 push	 ecx
  00f68	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00f70	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f75	51		 push	 ecx
  00f76	f3 0f 10 85 b0
	fe ff ff	 movss	 xmm0, DWORD PTR _x_adjust$5[ebp]
  00f7e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f83	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3864 : 
; 3865 : 							print_mono_font_string (s);

  00f88	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00f8b	50		 push	 eax
  00f8c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN43@draw_2d_eo:

; 3866 : 						}
; 3867 : 					}
; 3868 : 
; 3869 : 					set_mono_font_colour (MFD_COLOUR1);

  00f91	b8 04 00 00 00	 mov	 eax, 4
  00f96	6b c8 00	 imul	 ecx, eax, 0
  00f99	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f9f	52		 push	 edx
  00fa0	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 3870 : 
; 3871 : 					// target range, speed and bearing
; 3872 : 					{
; 3873 : 						char
; 3874 : 							range_char = 'R';

  00fa5	c6 85 af fe ff
	ff 52		 mov	 BYTE PTR _range_char$4[ebp], 82 ; 00000052H

; 3875 : 
; 3876 : 						float
; 3877 : 							target_velocity = 0.0;

  00fac	0f 57 c0	 xorps	 xmm0, xmm0
  00faf	f3 0f 11 85 a8
	fe ff ff	 movss	 DWORD PTR _target_velocity$3[ebp], xmm0

; 3878 : 
; 3879 : 						if (range_finder == RANGEFINDER_TRIANGULATION)

  00fb7	83 bd c4 fe ff
	ff 02		 cmp	 DWORD PTR _range_finder$[ebp], 2
  00fbe	75 09		 jne	 SHORT $LN49@draw_2d_eo

; 3880 : 							range_char = 'A';

  00fc0	c6 85 af fe ff
	ff 41		 mov	 BYTE PTR _range_char$4[ebp], 65 ; 00000041H

; 3881 : 						else

  00fc7	eb 5a		 jmp	 SHORT $LN50@draw_2d_eo
$LN49@draw_2d_eo:

; 3882 : 						{
; 3883 : 							if (target)

  00fc9	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00fd0	74 2c		 je	 SHORT $LN51@draw_2d_eo

; 3884 : 								target_velocity = kilometres_per_hour(get_local_entity_vec3d_magnitude (target, VEC3D_TYPE_MOTION_VECTOR));

  00fd2	6a 06		 push	 6
  00fd4	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _target$[ebp]
  00fda	50		 push	 eax
  00fdb	e8 00 00 00 00	 call	 ?get_local_entity_vec3d_magnitude@@YGMPAUENTITY@@W4VEC3D_TYPES@@@Z ; get_local_entity_vec3d_magnitude
  00fe0	d9 9d 5c fe ff
	ff		 fstp	 DWORD PTR tv1184[ebp]
  00fe6	f3 0f 10 85 5c
	fe ff ff	 movss	 xmm0, DWORD PTR tv1184[ebp]
  00fee	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40666666
  00ff6	f3 0f 11 85 a8
	fe ff ff	 movss	 DWORD PTR _target_velocity$3[ebp], xmm0
$LN51@draw_2d_eo:

; 3885 : 							range_char = (range_finder == RANGEFINDER_FCR) ? 'R' : 'L';

  00ffe	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _range_finder$[ebp], 0
  01005	75 09		 jne	 SHORT $LN82@draw_2d_eo
  01007	c6 85 5f fe ff
	ff 52		 mov	 BYTE PTR tv539[ebp], 82	; 00000052H
  0100e	eb 07		 jmp	 SHORT $LN83@draw_2d_eo
$LN82@draw_2d_eo:
  01010	c6 85 5f fe ff
	ff 4c		 mov	 BYTE PTR tv539[ebp], 76	; 0000004cH
$LN83@draw_2d_eo:
  01017	8a 85 5f fe ff
	ff		 mov	 al, BYTE PTR tv539[ebp]
  0101d	88 85 af fe ff
	ff		 mov	 BYTE PTR _range_char$4[ebp], al
$LN50@draw_2d_eo:

; 3886 : 						}
; 3887 : 
; 3888 : 						sprintf (buffer, "%c%04d M   %3d KPH", range_char, (int)target_range, (int)target_velocity);

  01023	f3 0f 2c 85 a8
	fe ff ff	 cvttss2si eax, DWORD PTR _target_velocity$3[ebp]
  0102b	50		 push	 eax
  0102c	f3 0f 2c 8d 2c
	ff ff ff	 cvttss2si ecx, DWORD PTR _target_range$[ebp]
  01034	51		 push	 ecx
  01035	0f b6 95 af fe
	ff ff		 movzx	 edx, BYTE PTR _range_char$4[ebp]
  0103c	52		 push	 edx
  0103d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@PMDJPBGC@?$CFc?$CF04d?5M?5?5?5?$CF3d?5KPH@
  01042	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01048	50		 push	 eax
  01049	e8 00 00 00 00	 call	 _sprintf
  0104e	83 c4 14	 add	 esp, 20			; 00000014H

; 3889 : 
; 3890 : 						width = get_mono_font_string_width (buffer) / 2;

  01051	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01057	50		 push	 eax
  01058	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0105d	d9 9d 5c fe ff
	ff		 fstp	 DWORD PTR tv1191[ebp]
  01063	f3 0f 10 85 5c
	fe ff ff	 movss	 xmm0, DWORD PTR tv1191[ebp]
  0106b	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  01073	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 3891 : 						set_2d_mono_font_position (0.0, 0.75);

  0107b	51		 push	 ecx
  0107c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f400000
  01084	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01089	51		 push	 ecx
  0108a	0f 57 c0	 xorps	 xmm0, xmm0
  0108d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01092	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3892 : 						set_mono_font_rel_position (-width, 0.0);

  01097	51		 push	 ecx
  01098	0f 57 c0	 xorps	 xmm0, xmm0
  0109b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010a0	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  010a8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  010af	51		 push	 ecx
  010b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010b5	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3893 : 
; 3894 : 						print_mono_font_string (buffer);

  010ba	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  010c0	50		 push	 eax
  010c1	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3895 : 					}
; 3896 : 
; 3897 : 					draw_2d_line (x - 0.30, y + 0.20, x - 0.15, y + 0.20, MFD_COLOUR1);

  010c6	b8 04 00 00 00	 mov	 eax, 4
  010cb	6b c8 00	 imul	 ecx, eax, 0
  010ce	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  010d4	52		 push	 edx
  010d5	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  010dd	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  010e5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  010e9	51		 push	 ecx
  010ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010ef	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  010f7	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  010ff	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01103	51		 push	 ecx
  01104	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01109	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01111	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01119	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0111d	51		 push	 ecx
  0111e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01123	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0112b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd3333333333333
  01133	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01137	51		 push	 ecx
  01138	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0113d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3898 : 					draw_2d_line (x + 0.30, y + 0.20, x + 0.15, y + 0.20, MFD_COLOUR1);

  01142	b8 04 00 00 00	 mov	 eax, 4
  01147	6b c8 00	 imul	 ecx, eax, 0
  0114a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01150	52		 push	 edx
  01151	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01159	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01161	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01165	51		 push	 ecx
  01166	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0116b	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01173	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  0117b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0117f	51		 push	 ecx
  01180	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01185	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  0118d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01195	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01199	51		 push	 ecx
  0119a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0119f	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  011a7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd3333333333333
  011af	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  011b3	51		 push	 ecx
  011b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011b9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3899 : 					draw_2d_line (x - 0.30, y - 0.20, x - 0.15, y - 0.20, MFD_COLOUR1);

  011be	b8 04 00 00 00	 mov	 eax, 4
  011c3	6b c8 00	 imul	 ecx, eax, 0
  011c6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  011cc	52		 push	 edx
  011cd	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  011d5	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  011dd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  011e1	51		 push	 ecx
  011e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011e7	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  011ef	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  011f7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  011fb	51		 push	 ecx
  011fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01201	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01209	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01211	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01215	51		 push	 ecx
  01216	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0121b	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01223	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd3333333333333
  0122b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0122f	51		 push	 ecx
  01230	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01235	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3900 : 					draw_2d_line (x + 0.30, y - 0.20, x + 0.15, y - 0.20, MFD_COLOUR1);

  0123a	b8 04 00 00 00	 mov	 eax, 4
  0123f	6b c8 00	 imul	 ecx, eax, 0
  01242	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01248	52		 push	 edx
  01249	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01251	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01259	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0125d	51		 push	 ecx
  0125e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01263	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0126b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01273	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01277	51		 push	 ecx
  01278	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0127d	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01285	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0128d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01291	51		 push	 ecx
  01292	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01297	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0129f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd3333333333333
  012a7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  012ab	51		 push	 ecx
  012ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012b1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3901 : 					draw_2d_line (x - 0.30, y + 0.20, x - 0.30, y + 0.15, MFD_COLOUR1);

  012b6	b8 04 00 00 00	 mov	 eax, 4
  012bb	6b c8 00	 imul	 ecx, eax, 0
  012be	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  012c4	52		 push	 edx
  012c5	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  012cd	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  012d5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  012d9	51		 push	 ecx
  012da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012df	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  012e7	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd3333333333333
  012ef	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  012f3	51		 push	 ecx
  012f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012f9	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01301	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01309	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0130d	51		 push	 ecx
  0130e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01313	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0131b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd3333333333333
  01323	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01327	51		 push	 ecx
  01328	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0132d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3902 : 					draw_2d_line (x - 0.30, y - 0.20, x - 0.30, y - 0.15, MFD_COLOUR1);

  01332	b8 04 00 00 00	 mov	 eax, 4
  01337	6b c8 00	 imul	 ecx, eax, 0
  0133a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01340	52		 push	 edx
  01341	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01349	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01351	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01355	51		 push	 ecx
  01356	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0135b	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01363	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd3333333333333
  0136b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0136f	51		 push	 ecx
  01370	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01375	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  0137d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01385	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01389	51		 push	 ecx
  0138a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0138f	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01397	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd3333333333333
  0139f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  013a3	51		 push	 ecx
  013a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013a9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3903 : 					draw_2d_line (x + 0.30, y + 0.20, x + 0.30, y + 0.15, MFD_COLOUR1);

  013ae	b8 04 00 00 00	 mov	 eax, 4
  013b3	6b c8 00	 imul	 ecx, eax, 0
  013b6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  013bc	52		 push	 edx
  013bd	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  013c5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  013cd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  013d1	51		 push	 ecx
  013d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013d7	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  013df	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd3333333333333
  013e7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  013eb	51		 push	 ecx
  013ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013f1	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  013f9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01401	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01405	51		 push	 ecx
  01406	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0140b	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01413	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd3333333333333
  0141b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0141f	51		 push	 ecx
  01420	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01425	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3904 : 					draw_2d_line (x + 0.30, y - 0.20, x + 0.30, y - 0.15, MFD_COLOUR1);

  0142a	b8 04 00 00 00	 mov	 eax, 4
  0142f	6b c8 00	 imul	 ecx, eax, 0
  01432	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01438	52		 push	 edx
  01439	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01441	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01449	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0144d	51		 push	 ecx
  0144e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01453	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0145b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd3333333333333
  01463	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01467	51		 push	 ecx
  01468	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0146d	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01475	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0147d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01481	51		 push	 ecx
  01482	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01487	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0148f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd3333333333333
  01497	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0149b	51		 push	 ecx
  0149c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014a1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3905 : 
; 3906 : 					if (eo_is_locked())

  014a6	e8 00 00 00 00	 call	 ?eo_is_locked@@YGHXZ	; eo_is_locked
  014ab	85 c0		 test	 eax, eax
  014ad	0f 84 f0 01 00
	00		 je	 $LN52@draw_2d_eo

; 3907 : 					{
; 3908 : 						draw_2d_line (x - 0.35, y + 0.35, x - 0.6, y + 0.6, MFD_COLOUR1);

  014b3	b8 04 00 00 00	 mov	 eax, 4
  014b8	6b c8 00	 imul	 ecx, eax, 0
  014bb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  014c1	52		 push	 edx
  014c2	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  014ca	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe3333333333333
  014d2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  014d6	51		 push	 ecx
  014d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014dc	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  014e4	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe3333333333333
  014ec	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  014f0	51		 push	 ecx
  014f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014f6	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  014fe	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd6666666666666
  01506	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0150a	51		 push	 ecx
  0150b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01510	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01518	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd6666666666666
  01520	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01524	51		 push	 ecx
  01525	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0152a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3909 : 						draw_2d_line (x - 0.35, y - 0.35, x - 0.6, y - 0.6, MFD_COLOUR1);

  0152f	b8 04 00 00 00	 mov	 eax, 4
  01534	6b c8 00	 imul	 ecx, eax, 0
  01537	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0153d	52		 push	 edx
  0153e	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01546	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe3333333333333
  0154e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01552	51		 push	 ecx
  01553	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01558	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01560	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe3333333333333
  01568	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0156c	51		 push	 ecx
  0156d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01572	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  0157a	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd6666666666666
  01582	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01586	51		 push	 ecx
  01587	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0158c	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01594	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd6666666666666
  0159c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  015a0	51		 push	 ecx
  015a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015a6	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3910 : 						draw_2d_line (x + 0.35, y + 0.35, x + 0.6, y + 0.6, MFD_COLOUR1);

  015ab	b8 04 00 00 00	 mov	 eax, 4
  015b0	6b c8 00	 imul	 ecx, eax, 0
  015b3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  015b9	52		 push	 edx
  015ba	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  015c2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe3333333333333
  015ca	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  015ce	51		 push	 ecx
  015cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015d4	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  015dc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe3333333333333
  015e4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  015e8	51		 push	 ecx
  015e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015ee	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  015f6	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd6666666666666
  015fe	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01602	51		 push	 ecx
  01603	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01608	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01610	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd6666666666666
  01618	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0161c	51		 push	 ecx
  0161d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01622	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3911 : 						draw_2d_line (x + 0.35, y - 0.35, x + 0.6, y - 0.6, MFD_COLOUR1);

  01627	b8 04 00 00 00	 mov	 eax, 4
  0162c	6b c8 00	 imul	 ecx, eax, 0
  0162f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01635	52		 push	 edx
  01636	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  0163e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe3333333333333
  01646	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0164a	51		 push	 ecx
  0164b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01650	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01658	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe3333333333333
  01660	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01664	51		 push	 ecx
  01665	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0166a	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01672	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd6666666666666
  0167a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0167e	51		 push	 ecx
  0167f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01684	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0168c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd6666666666666
  01694	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01698	51		 push	 ecx
  01699	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0169e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN52@draw_2d_eo:

; 3912 : 					}
; 3913 : 				}
; 3914 : 
; 3915 : 				main_vp = tmp;

  016a3	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  016a8	8d b5 cc fe ff
	ff		 lea	 esi, DWORD PTR _tmp$[ebp]
  016ae	bf 00 00 00 00	 mov	 edi, OFFSET ?main_vp@@3UVIEWPOINT@@A ; main_vp
  016b3	f3 a5		 rep movsd
$LN36@draw_2d_eo:
$LN1@draw_2d_eo:

; 3916 : 			}
; 3917 : 		}
; 3918 : 	}
; 3919 : }

  016b5	5f		 pop	 edi
  016b6	5e		 pop	 esi
  016b7	5b		 pop	 ebx
  016b8	8b e5		 mov	 esp, ebp
  016ba	5d		 pop	 ebp
  016bb	c2 10 00	 ret	 16			; 00000010H
?draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z ENDP ; draw_2d_eo_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z
_TEXT	SEGMENT
tv234 = -288						; size = 4
tv145 = -288						; size = 4
tv85 = -288						; size = 4
tv226 = -284						; size = 4
tv157 = -284						; size = 4
tv137 = -284						; size = 4
tv77 = -284						; size = 4
_m$1 = -216						; size = 36
_tmp_vp$2 = -180					; size = 48
_rotated_eo_vp$3 = -132					; size = 48
_centered_eo_vp$4 = -84					; size = 48
_position$5 = -36					; size = 12
_day_segment_type$ = -24				; size = 4
_weather_mode$ = -20					; size = 4
_position$ = -16					; size = 4
_noise_level$ = -12					; size = 4
_light_level$ = -8					; size = 4
_zoom$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z PROC ; draw_full_screen_3d_eo_display, COMDAT

; 3291 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3292 : 	float
; 3293 : 		zoom;
; 3294 : 
; 3295 : 	display_3d_light_levels
; 3296 : 		light_level;
; 3297 : 
; 3298 : 	display_3d_noise_levels
; 3299 : 		noise_level;
; 3300 : 
; 3301 : 	vec3d
; 3302 : 		*position;
; 3303 : 
; 3304 : 	weathermodes
; 3305 : 		weather_mode;
; 3306 : 
; 3307 : 	day_segment_types
; 3308 : 		day_segment_type;
; 3309 : 
; 3310 : 	ASSERT (eo);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  00010	75 18		 jne	 SHORT $LN4@draw_full_
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00017	83 c0 13	 add	 eax, 19			; 00000013H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_full_:

; 3311 : 
; 3312 : #ifdef OLD_EO
; 3313 : 	switch (eo->field_of_view)
; 3314 : 	{
; 3315 : 		case EO_FOV_NARROW:
; 3316 : 		{
; 3317 : 			zoom = 1.0 / 128.0;
; 3318 : 
; 3319 : 			break;
; 3320 : 		}
; 3321 : 		case EO_FOV_MEDIUM:
; 3322 : 		{
; 3323 : 			zoom = 1.0 / 8.0;
; 3324 : 
; 3325 : 			break;
; 3326 : 		}
; 3327 : 		case EO_FOV_WIDE:
; 3328 : 		{
; 3329 : 			zoom = 1.0;
; 3330 : 
; 3331 : 			break;
; 3332 : 		}
; 3333 : 		default:
; 3334 : 		{
; 3335 : 			debug_fatal ("Invalid field of view = %d", eo->field_of_view);
; 3336 : 
; 3337 : 			break;
; 3338 : 		}
; 3339 : 	}
; 3340 : #else
; 3341 : 	zoom = convert_linear_view_value (eo);

  0002a	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?convert_linear_view_value@@YGMPAUEO_PARAMS_DYNAMIC_MOVE@@@Z ; convert_linear_view_value
  00033	d9 5d fc	 fstp	 DWORD PTR _zoom$[ebp]

; 3342 : #endif
; 3343 : 
; 3344 : 	position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00036	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0003d	74 0f		 je	 SHORT $LN14@draw_full_
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00044	8b 08		 mov	 ecx, DWORD PTR [eax]
  00046	89 8d e4 fe ff
	ff		 mov	 DWORD PTR tv77[ebp], ecx
  0004c	eb 24		 jmp	 SHORT $LN15@draw_full_
$LN14@draw_full_:
  0004e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00054	83 c2 35	 add	 edx, 53			; 00000035H
  00057	52		 push	 edx
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00068	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv77[ebp], 0
$LN15@draw_full_:
  00072	b9 01 00 00 00	 mov	 ecx, 1
  00077	85 c9		 test	 ecx, ecx
  00079	74 0c		 je	 SHORT $LN16@draw_full_
  0007b	c7 85 e0 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv85[ebp], 8
  00085	eb 24		 jmp	 SHORT $LN17@draw_full_
$LN16@draw_full_:
  00087	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  0008d	83 c2 35	 add	 edx, 53			; 00000035H
  00090	52		 push	 edx
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00096	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a1	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv85[ebp], 0
$LN17@draw_full_:
  000ab	6a 08		 push	 8
  000ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000b3	51		 push	 ecx
  000b4	6b 95 e4 fe ff
	ff 60		 imul	 edx, DWORD PTR tv77[ebp], 96
  000bb	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv85[ebp]
  000c1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000c8	ff d1		 call	 ecx
  000ca	89 45 f0	 mov	 DWORD PTR _position$[ebp], eax

; 3345 : 
; 3346 : 	weather_mode = get_simple_session_weather_at_point (position);

  000cd	8b 45 f0	 mov	 eax, DWORD PTR _position$[ebp]
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z ; get_simple_session_weather_at_point
  000d6	89 45 ec	 mov	 DWORD PTR _weather_mode$[ebp], eax

; 3347 : 
; 3348 : 	ASSERT ((weather_mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LAST));

  000d9	83 7d ec 00	 cmp	 DWORD PTR _weather_mode$[ebp], 0
  000dd	7e 06		 jle	 SHORT $LN6@draw_full_
  000df	83 7d ec 05	 cmp	 DWORD PTR _weather_mode$[ebp], 5
  000e3	7c 18		 jl	 SHORT $LN5@draw_full_
$LN6@draw_full_:
  000e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  000ea	83 c0 39	 add	 eax, 57			; 00000039H
  000ed	50		 push	 eax
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
  000f8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@draw_full_:

; 3349 : 
; 3350 : 	day_segment_type = (day_segment_types) get_local_entity_int_value (get_session_entity (), INT_TYPE_DAY_SEGMENT_TYPE);

  000fd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  00104	74 0f		 je	 SHORT $LN18@draw_full_
  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  0010b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010d	89 8d e4 fe ff
	ff		 mov	 DWORD PTR tv137[ebp], ecx
  00113	eb 24		 jmp	 SHORT $LN19@draw_full_
$LN18@draw_full_:
  00115	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  0011b	83 c2 3b	 add	 edx, 59			; 0000003bH
  0011e	52		 push	 edx
  0011f	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00124	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00129	50		 push	 eax
  0012a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0012f	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv137[ebp], 0
$LN19@draw_full_:
  00139	b9 01 00 00 00	 mov	 ecx, 1
  0013e	85 c9		 test	 ecx, ecx
  00140	74 0c		 je	 SHORT $LN20@draw_full_
  00142	c7 85 e0 fe ff
	ff 27 00 00 00	 mov	 DWORD PTR tv145[ebp], 39 ; 00000027H
  0014c	eb 24		 jmp	 SHORT $LN21@draw_full_
$LN20@draw_full_:
  0014e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00154	83 c2 3b	 add	 edx, 59			; 0000003bH
  00157	52		 push	 edx
  00158	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0015d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00162	50		 push	 eax
  00163	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00168	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv145[ebp], 0
$LN21@draw_full_:
  00172	6a 27		 push	 39			; 00000027H
  00174	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  0017a	51		 push	 ecx
  0017b	69 95 e4 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv137[ebp], 1116
  00185	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv145[ebp]
  0018b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00192	ff d1		 call	 ecx
  00194	89 45 e8	 mov	 DWORD PTR _day_segment_type$[ebp], eax

; 3351 : 
; 3352 : 	ASSERT ((day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT_TYPES));

  00197	83 7d e8 00	 cmp	 DWORD PTR _day_segment_type$[ebp], 0
  0019b	7c 06		 jl	 SHORT $LN8@draw_full_
  0019d	83 7d e8 04	 cmp	 DWORD PTR _day_segment_type$[ebp], 4
  001a1	7c 18		 jl	 SHORT $LN7@draw_full_
$LN8@draw_full_:
  001a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  001a8	83 c0 3d	 add	 eax, 61			; 0000003dH
  001ab	50		 push	 eax
  001ac	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  001b1	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
  001b6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@draw_full_:

; 3353 : 
; 3354 : 	switch (system)

  001bb	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  001be	89 85 e4 fe ff
	ff		 mov	 DWORD PTR tv157[ebp], eax
  001c4	83 bd e4 fe ff
	ff 03		 cmp	 DWORD PTR tv157[ebp], 3
  001cb	74 14		 je	 SHORT $LN9@draw_full_
  001cd	83 bd e4 fe ff
	ff 04		 cmp	 DWORD PTR tv157[ebp], 4
  001d4	74 33		 je	 SHORT $LN10@draw_full_
  001d6	83 bd e4 fe ff
	ff 05		 cmp	 DWORD PTR tv157[ebp], 5
  001dd	74 52		 je	 SHORT $LN11@draw_full_
  001df	eb 78		 jmp	 SHORT $LN12@draw_full_
$LN9@draw_full_:

; 3355 : 	{
; 3356 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 3357 : 		{
; 3358 : 			light_level = flir_light_levels[weather_mode][day_segment_type];

  001e1	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  001e4	c1 e0 04	 shl	 eax, 4
  001e7	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  001ea	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  001f1	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 3359 : 
; 3360 : 			noise_level = flir_noise_levels[weather_mode][day_segment_type];

  001f4	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  001f7	c1 e0 04	 shl	 eax, 4
  001fa	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  001fd	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  00204	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 3361 : 
; 3362 : 			break;

  00207	eb 61		 jmp	 SHORT $LN2@draw_full_
$LN10@draw_full_:

; 3363 : 		}
; 3364 : 		case TARGET_ACQUISITION_SYSTEM_DTV:
; 3365 : 		{
; 3366 : 			light_level = dtv_light_levels[weather_mode][day_segment_type];

  00209	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0020c	c1 e0 04	 shl	 eax, 4
  0020f	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00212	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  00219	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 3367 : 
; 3368 : 			noise_level = dtv_noise_levels[weather_mode][day_segment_type];

  0021c	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0021f	c1 e0 04	 shl	 eax, 4
  00222	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00225	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  0022c	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 3369 : 
; 3370 : 			break;

  0022f	eb 39		 jmp	 SHORT $LN2@draw_full_
$LN11@draw_full_:

; 3371 : 		}
; 3372 : 		case TARGET_ACQUISITION_SYSTEM_DVO:
; 3373 : 		{
; 3374 : 			light_level = dvo_light_levels[weather_mode][day_segment_type];

  00231	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00234	c1 e0 04	 shl	 eax, 4
  00237	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  0023a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dvo_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  00241	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 3375 : 
; 3376 : 			noise_level = dvo_noise_levels[weather_mode][day_segment_type];

  00244	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00247	c1 e0 04	 shl	 eax, 4
  0024a	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  0024d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dvo_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  00254	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 3377 : 
; 3378 : 			break;

  00257	eb 11		 jmp	 SHORT $LN2@draw_full_
$LN12@draw_full_:

; 3379 : 		}
; 3380 : 		default:
; 3381 : 		{
; 3382 : 			debug_fatal ("Invalid target acquisition system = %d", system);

  00259	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  0025c	50		 push	 eax
  0025d	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
  00262	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00267	83 c4 08	 add	 esp, 8
$LN2@draw_full_:

; 3383 : 
; 3384 : 			break;
; 3385 : 		}
; 3386 : 	}
; 3387 : 
; 3388 : 	set_main_3d_params

  0026a	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  0026f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  00277	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0027b	51		 push	 ecx
  0027c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00281	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  00286	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  0028e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00292	51		 push	 ecx
  00293	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00298	51		 push	 ecx
  00299	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_height@@3MA
  002a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a6	51		 push	 ecx
  002a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_width@@3MA
  002af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b4	51		 push	 ecx
  002b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  002bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c2	51		 push	 ecx
  002c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  002cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d0	8b 45 f4	 mov	 eax, DWORD PTR _noise_level$[ebp]
  002d3	50		 push	 eax
  002d4	8b 4d f8	 mov	 ecx, DWORD PTR _light_level$[ebp]
  002d7	51		 push	 ecx
  002d8	6a 03		 push	 3
  002da	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params

; 3389 : 	(
; 3390 : 		DISPLAY_3D_TINT_GREEN,
; 3391 : 		light_level,
; 3392 : 		noise_level,
; 3393 : 		mfd_screen_x_min,
; 3394 : 		mfd_screen_y_min,
; 3395 : 		mfd_screen_width,
; 3396 : 		mfd_screen_height,
; 3397 : 		rad (59.99) * zoom,
; 3398 : 		rad (59.99) * zoom
; 3399 : 	);
; 3400 : 
; 3401 : 	//
; 3402 : 	// draw 3D scene (temporarily adjust the virtual cockpit position relative to EO sensor position)
; 3403 : 	//
; 3404 : 
; 3405 : 	{
; 3406 : 		vec3d
; 3407 : 			position;
; 3408 : 
; 3409 : 		viewpoint
; 3410 : 			centered_eo_vp,
; 3411 : 			rotated_eo_vp,
; 3412 : 			tmp_vp;
; 3413 : 
; 3414 : 		matrix3x3
; 3415 : 			m;
; 3416 : 
; 3417 : 		tmp_vp = virtual_cockpit_inst3d->vp;

  002df	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  002e5	83 c6 08	 add	 esi, 8
  002e8	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  002ed	8d bd 4c ff ff
	ff		 lea	 edi, DWORD PTR _tmp_vp$2[ebp]
  002f3	f3 a5		 rep movsd

; 3418 : 
; 3419 : 		get_comanche_eo_relative_centred_viewpoint (&centered_eo_vp);

  002f5	8d 45 ac	 lea	 eax, DWORD PTR _centered_eo_vp$4[ebp]
  002f8	50		 push	 eax
  002f9	e8 00 00 00 00	 call	 ?get_comanche_eo_relative_centred_viewpoint@@YGXPAUVIEWPOINT@@@Z ; get_comanche_eo_relative_centred_viewpoint

; 3420 : 
; 3421 : 		rotated_eo_vp.position = centered_eo_vp.position;

  002fe	8b 45 ac	 mov	 eax, DWORD PTR _centered_eo_vp$4[ebp]
  00301	89 85 7c ff ff
	ff		 mov	 DWORD PTR _rotated_eo_vp$3[ebp], eax
  00307	8b 4d b0	 mov	 ecx, DWORD PTR _centered_eo_vp$4[ebp+4]
  0030a	89 4d 80	 mov	 DWORD PTR _rotated_eo_vp$3[ebp+4], ecx
  0030d	8b 55 b4	 mov	 edx, DWORD PTR _centered_eo_vp$4[ebp+8]
  00310	89 55 84	 mov	 DWORD PTR _rotated_eo_vp$3[ebp+8], edx

; 3422 : 
; 3423 : 		get_3d_transformation_matrix (m, eo_azimuth, eo_elevation, 0.0);

  00313	51		 push	 ecx
  00314	0f 57 c0	 xorps	 xmm0, xmm0
  00317	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0031c	51		 push	 ecx
  0031d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  00325	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032a	51		 push	 ecx
  0032b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  00333	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00338	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _m$1[ebp]
  0033e	50		 push	 eax
  0033f	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 3424 : 
; 3425 : 		multiply_matrix3x3_matrix3x3 (rotated_eo_vp.attitude, m, centered_eo_vp.attitude);

  00344	8d 45 b8	 lea	 eax, DWORD PTR _centered_eo_vp$4[ebp+12]
  00347	50		 push	 eax
  00348	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _m$1[ebp]
  0034e	51		 push	 ecx
  0034f	8d 55 88	 lea	 edx, DWORD PTR _rotated_eo_vp$3[ebp+12]
  00352	52		 push	 edx
  00353	e8 00 00 00 00	 call	 ?multiply_matrix3x3_matrix3x3@@YGXQAY02MQAY02$$CBM1@Z ; multiply_matrix3x3_matrix3x3

; 3426 : 
; 3427 : 		position.x = -rotated_eo_vp.x;

  00358	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp]
  00360	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00367	f3 0f 11 45 dc	 movss	 DWORD PTR _position$5[ebp], xmm0

; 3428 : 		position.y = -rotated_eo_vp.y;

  0036c	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+4]
  00371	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00378	f3 0f 11 45 e0	 movss	 DWORD PTR _position$5[ebp+4], xmm0

; 3429 : 		position.z = -rotated_eo_vp.z;

  0037d	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+8]
  00382	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00389	f3 0f 11 45 e4	 movss	 DWORD PTR _position$5[ebp+8], xmm0

; 3430 : 
; 3431 : 		multiply_transpose_matrix3x3_vec3d (&virtual_cockpit_inst3d->vp.position, rotated_eo_vp.attitude, &position);

  0038e	8d 45 dc	 lea	 eax, DWORD PTR _position$5[ebp]
  00391	50		 push	 eax
  00392	8d 4d 88	 lea	 ecx, DWORD PTR _rotated_eo_vp$3[ebp+12]
  00395	51		 push	 ecx
  00396	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  0039c	83 c2 08	 add	 edx, 8
  0039f	52		 push	 edx
  003a0	e8 00 00 00 00	 call	 ?multiply_transpose_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_transpose_matrix3x3_vec3d

; 3432 : 
; 3433 : 		get_local_entity_vec3d (get_gunship_entity (), VEC3D_TYPE_POSITION, &position);

  003a5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  003ac	74 0f		 je	 SHORT $LN22@draw_full_
  003ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  003b3	8b 08		 mov	 ecx, DWORD PTR [eax]
  003b5	89 8d e4 fe ff
	ff		 mov	 DWORD PTR tv226[ebp], ecx
  003bb	eb 27		 jmp	 SHORT $LN23@draw_full_
$LN22@draw_full_:
  003bd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  003c3	81 c2 8e 00 00
	00		 add	 edx, 142		; 0000008eH
  003c9	52		 push	 edx
  003ca	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  003cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003d4	50		 push	 eax
  003d5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003da	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv226[ebp], 0
$LN23@draw_full_:
  003e4	b9 01 00 00 00	 mov	 ecx, 1
  003e9	85 c9		 test	 ecx, ecx
  003eb	74 0c		 je	 SHORT $LN24@draw_full_
  003ed	c7 85 e0 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv234[ebp], 8
  003f7	eb 27		 jmp	 SHORT $LN25@draw_full_
$LN24@draw_full_:
  003f9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  003ff	81 c2 8e 00 00
	00		 add	 edx, 142		; 0000008eH
  00405	52		 push	 edx
  00406	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0040b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00410	50		 push	 eax
  00411	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00416	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv234[ebp], 0
$LN25@draw_full_:
  00420	8d 4d dc	 lea	 ecx, DWORD PTR _position$5[ebp]
  00423	51		 push	 ecx
  00424	6a 08		 push	 8
  00426	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0042c	52		 push	 edx
  0042d	6b 85 e4 fe ff
	ff 60		 imul	 eax, DWORD PTR tv226[ebp], 96
  00434	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR tv234[ebp]
  0043a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  00441	ff d2		 call	 edx

; 3434 : 
; 3435 : 		rotated_eo_vp.x += position.x;

  00443	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp]
  0044b	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _position$5[ebp]
  00450	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _rotated_eo_vp$3[ebp], xmm0

; 3436 : 		rotated_eo_vp.y += position.y;

  00458	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+4]
  0045d	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _position$5[ebp+4]
  00462	f3 0f 11 45 80	 movss	 DWORD PTR _rotated_eo_vp$3[ebp+4], xmm0

; 3437 : 		rotated_eo_vp.z += position.z;

  00467	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+8]
  0046c	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _position$5[ebp+8]
  00471	f3 0f 11 45 84	 movss	 DWORD PTR _rotated_eo_vp$3[ebp+8], xmm0

; 3438 : 
; 3439 : 		draw_eo_3d_scene = TRUE;

  00476	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 1 ; draw_eo_3d_scene

; 3440 : 
; 3441 : 		draw_main_3d_scene (&rotated_eo_vp);

  00480	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _rotated_eo_vp$3[ebp]
  00486	50		 push	 eax
  00487	e8 00 00 00 00	 call	 ?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z ; draw_main_3d_scene

; 3442 : 
; 3443 : 		draw_eo_3d_scene = FALSE;

  0048c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 0 ; draw_eo_3d_scene

; 3444 : 
; 3445 : 		virtual_cockpit_inst3d->vp = tmp_vp;

  00496	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  0049c	83 c7 08	 add	 edi, 8
  0049f	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  004a4	8d b5 4c ff ff
	ff		 lea	 esi, DWORD PTR _tmp_vp$2[ebp]
  004aa	f3 a5		 rep movsd

; 3446 : 	}
; 3447 : }

  004ac	5f		 pop	 edi
  004ad	5e		 pop	 esi
  004ae	5b		 pop	 ebx
  004af	8b e5		 mov	 esp, ebp
  004b1	5d		 pop	 ebp
  004b2	c2 08 00	 ret	 8
?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ENDP ; draw_full_screen_3d_eo_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z
_TEXT	SEGMENT
tv243 = -292						; size = 4
tv150 = -292						; size = 4
tv90 = -292						; size = 4
tv235 = -288						; size = 4
tv162 = -288						; size = 4
tv142 = -288						; size = 4
tv82 = -288						; size = 4
_m$1 = -220						; size = 36
_tmp_vp$2 = -184					; size = 48
_rotated_eo_vp$3 = -136					; size = 48
_centered_eo_vp$4 = -88					; size = 48
_position$5 = -40					; size = 12
_day_segment_type$ = -28				; size = 4
_weather_mode$ = -24					; size = 4
_position$ = -20					; size = 4
_noise_level$ = -16					; size = 4
_light_level$ = -12					; size = 4
_tint$ = -8						; size = 4
_zoom$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
?draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z PROC ; draw_3d_eo_display, COMDAT

; 3103 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3104 : 	float
; 3105 : 		zoom;
; 3106 : 
; 3107 : 	display_3d_tints
; 3108 : 		tint;
; 3109 : 
; 3110 : 	display_3d_light_levels
; 3111 : 		light_level;
; 3112 : 
; 3113 : 	display_3d_noise_levels
; 3114 : 		noise_level;
; 3115 : 
; 3116 : 	vec3d
; 3117 : 		*position;
; 3118 : 
; 3119 : 	weathermodes
; 3120 : 		weather_mode;
; 3121 : 
; 3122 : 	day_segment_types
; 3123 : 		day_segment_type;
; 3124 : 
; 3125 : 	ASSERT (eo);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  00010	75 18		 jne	 SHORT $LN4@draw_3d_eo
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00017	83 c0 16	 add	 eax, 22			; 00000016H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_3d_eo:

; 3126 : 
; 3127 : 	ASSERT (eo_3d_texture_screen);

  0002a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, 0
  00031	75 18		 jne	 SHORT $LN5@draw_3d_eo
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00038	83 c0 18	 add	 eax, 24			; 00000018H
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
  00046	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@draw_3d_eo:

; 3128 : 
; 3129 : #ifdef OLD_EO
; 3130 : 	switch (eo->field_of_view)
; 3131 : 	{
; 3132 : 		case EO_FOV_NARROW:
; 3133 : 		{
; 3134 : 			zoom = 1.0 / 128.0;
; 3135 : 
; 3136 : 			break;
; 3137 : 		}
; 3138 : 		case EO_FOV_MEDIUM:
; 3139 : 		{
; 3140 : 			zoom = 1.0 / 8.0;
; 3141 : 
; 3142 : 			break;
; 3143 : 		}
; 3144 : 		case EO_FOV_WIDE:
; 3145 : 		{
; 3146 : 			zoom = 1.0;
; 3147 : 
; 3148 : 			break;
; 3149 : 		}
; 3150 : 		default:
; 3151 : 		{
; 3152 : 			debug_fatal ("Invalid field of view = %d", eo->field_of_view);
; 3153 : 
; 3154 : 			break;
; 3155 : 		}
; 3156 : 	}
; 3157 : #else
; 3158 : 	zoom = convert_linear_view_value (eo);

  0004b	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?convert_linear_view_value@@YGMPAUEO_PARAMS_DYNAMIC_MOVE@@@Z ; convert_linear_view_value
  00054	d9 5d fc	 fstp	 DWORD PTR _zoom$[ebp]

; 3159 : #endif
; 3160 : 
; 3161 : 	position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0005e	74 0f		 je	 SHORT $LN19@draw_3d_eo
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00065	8b 08		 mov	 ecx, DWORD PTR [eax]
  00067	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv82[ebp], ecx
  0006d	eb 24		 jmp	 SHORT $LN20@draw_3d_eo
$LN19@draw_3d_eo:
  0006f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00075	83 c2 3a	 add	 edx, 58			; 0000003aH
  00078	52		 push	 edx
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0007e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00089	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv82[ebp], 0
$LN20@draw_3d_eo:
  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	85 c9		 test	 ecx, ecx
  0009a	74 0c		 je	 SHORT $LN21@draw_3d_eo
  0009c	c7 85 dc fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv90[ebp], 8
  000a6	eb 24		 jmp	 SHORT $LN22@draw_3d_eo
$LN21@draw_3d_eo:
  000a8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  000ae	83 c2 3a	 add	 edx, 58			; 0000003aH
  000b1	52		 push	 edx
  000b2	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000c2	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv90[ebp], 0
$LN22@draw_3d_eo:
  000cc	6a 08		 push	 8
  000ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000d4	51		 push	 ecx
  000d5	6b 95 e0 fe ff
	ff 60		 imul	 edx, DWORD PTR tv82[ebp], 96
  000dc	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR tv90[ebp]
  000e2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000e9	ff d1		 call	 ecx
  000eb	89 45 ec	 mov	 DWORD PTR _position$[ebp], eax

; 3162 : 
; 3163 : 	weather_mode = get_simple_session_weather_at_point (position);

  000ee	8b 45 ec	 mov	 eax, DWORD PTR _position$[ebp]
  000f1	50		 push	 eax
  000f2	e8 00 00 00 00	 call	 ?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z ; get_simple_session_weather_at_point
  000f7	89 45 e8	 mov	 DWORD PTR _weather_mode$[ebp], eax

; 3164 : 
; 3165 : 	ASSERT ((weather_mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LAST));

  000fa	83 7d e8 00	 cmp	 DWORD PTR _weather_mode$[ebp], 0
  000fe	7e 06		 jle	 SHORT $LN7@draw_3d_eo
  00100	83 7d e8 05	 cmp	 DWORD PTR _weather_mode$[ebp], 5
  00104	7c 18		 jl	 SHORT $LN6@draw_3d_eo
$LN7@draw_3d_eo:
  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  0010b	83 c0 3e	 add	 eax, 62			; 0000003eH
  0010e	50		 push	 eax
  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
  00119	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@draw_3d_eo:

; 3166 : 
; 3167 : 	day_segment_type = (day_segment_types) get_local_entity_int_value (get_session_entity (), INT_TYPE_DAY_SEGMENT_TYPE);

  0011e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  00125	74 0f		 je	 SHORT $LN23@draw_3d_eo
  00127	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  0012c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012e	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv142[ebp], ecx
  00134	eb 24		 jmp	 SHORT $LN24@draw_3d_eo
$LN23@draw_3d_eo:
  00136	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  0013c	83 c2 40	 add	 edx, 64			; 00000040H
  0013f	52		 push	 edx
  00140	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00145	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0014a	50		 push	 eax
  0014b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00150	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv142[ebp], 0
$LN24@draw_3d_eo:
  0015a	b9 01 00 00 00	 mov	 ecx, 1
  0015f	85 c9		 test	 ecx, ecx
  00161	74 0c		 je	 SHORT $LN25@draw_3d_eo
  00163	c7 85 dc fe ff
	ff 27 00 00 00	 mov	 DWORD PTR tv150[ebp], 39 ; 00000027H
  0016d	eb 24		 jmp	 SHORT $LN26@draw_3d_eo
$LN25@draw_3d_eo:
  0016f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00175	83 c2 40	 add	 edx, 64			; 00000040H
  00178	52		 push	 edx
  00179	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0017e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00183	50		 push	 eax
  00184	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00189	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
$LN26@draw_3d_eo:
  00193	6a 27		 push	 39			; 00000027H
  00195	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  0019b	51		 push	 ecx
  0019c	69 95 e0 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv142[ebp], 1116
  001a6	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR tv150[ebp]
  001ac	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  001b3	ff d1		 call	 ecx
  001b5	89 45 e4	 mov	 DWORD PTR _day_segment_type$[ebp], eax

; 3168 : 
; 3169 : 	ASSERT ((day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT_TYPES));

  001b8	83 7d e4 00	 cmp	 DWORD PTR _day_segment_type$[ebp], 0
  001bc	7c 06		 jl	 SHORT $LN9@draw_3d_eo
  001be	83 7d e4 04	 cmp	 DWORD PTR _day_segment_type$[ebp], 4
  001c2	7c 18		 jl	 SHORT $LN8@draw_3d_eo
$LN9@draw_3d_eo:
  001c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  001c9	83 c0 42	 add	 eax, 66			; 00000042H
  001cc	50		 push	 eax
  001cd	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  001d2	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
  001d7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@draw_3d_eo:

; 3170 : 
; 3171 : 	switch (system)

  001dc	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  001df	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv162[ebp], eax
  001e5	83 bd e0 fe ff
	ff 03		 cmp	 DWORD PTR tv162[ebp], 3
  001ec	74 1b		 je	 SHORT $LN10@draw_3d_eo
  001ee	83 bd e0 fe ff
	ff 04		 cmp	 DWORD PTR tv162[ebp], 4
  001f5	74 56		 je	 SHORT $LN13@draw_3d_eo
  001f7	83 bd e0 fe ff
	ff 05		 cmp	 DWORD PTR tv162[ebp], 5
  001fe	0f 84 8a 00 00
	00		 je	 $LN16@draw_3d_eo
  00204	e9 b4 00 00 00	 jmp	 $LN17@draw_3d_eo
$LN10@draw_3d_eo:

; 3172 : 	{
; 3173 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 3174 : 		{
; 3175 : 			light_level = flir_light_levels[weather_mode][day_segment_type];

  00209	8b 45 e8	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0020c	c1 e0 04	 shl	 eax, 4
  0020f	8b 4d e4	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00212	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  00219	89 55 f4	 mov	 DWORD PTR _light_level$[ebp], edx

; 3176 : 
; 3177 : 			noise_level = flir_noise_levels[weather_mode][day_segment_type];

  0021c	8b 45 e8	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0021f	c1 e0 04	 shl	 eax, 4
  00222	8b 4d e4	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00225	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  0022c	89 55 f0	 mov	 DWORD PTR _noise_level$[ebp], edx

; 3178 : 
; 3179 : 			if (command_line_colour_mfd)

  0022f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_colour_mfd@@3HA, 0 ; command_line_colour_mfd
  00236	74 09		 je	 SHORT $LN11@draw_3d_eo

; 3180 : 				tint = DISPLAY_3D_TINT_BLUE;

  00238	c7 45 f8 09 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 9

; 3181 : 			else

  0023f	eb 07		 jmp	 SHORT $LN12@draw_3d_eo
$LN11@draw_3d_eo:

; 3182 : 				tint = DISPLAY_3D_TINT_GREEN;

  00241	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 3
$LN12@draw_3d_eo:

; 3183 : 
; 3184 : 			break;

  00248	e9 81 00 00 00	 jmp	 $LN2@draw_3d_eo
$LN13@draw_3d_eo:

; 3185 : 		}
; 3186 : 		case TARGET_ACQUISITION_SYSTEM_DTV:
; 3187 : 		{
; 3188 : 			light_level = dtv_light_levels[weather_mode][day_segment_type];

  0024d	8b 45 e8	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00250	c1 e0 04	 shl	 eax, 4
  00253	8b 4d e4	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00256	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  0025d	89 55 f4	 mov	 DWORD PTR _light_level$[ebp], edx

; 3189 : 
; 3190 : 			noise_level = dtv_noise_levels[weather_mode][day_segment_type];

  00260	8b 45 e8	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00263	c1 e0 04	 shl	 eax, 4
  00266	8b 4d e4	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00269	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  00270	89 55 f0	 mov	 DWORD PTR _noise_level$[ebp], edx

; 3191 : 
; 3192 : 			if (command_line_colour_mfd)

  00273	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_colour_mfd@@3HA, 0 ; command_line_colour_mfd
  0027a	74 09		 je	 SHORT $LN14@draw_3d_eo

; 3193 : 				tint = DISPLAY_3D_TINT_CLEAR;

  0027c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 0

; 3194 : 			else

  00283	eb 07		 jmp	 SHORT $LN15@draw_3d_eo
$LN14@draw_3d_eo:

; 3195 : 				tint = DISPLAY_3D_TINT_GREEN_VISUAL;

  00285	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 4
$LN15@draw_3d_eo:

; 3196 : 
; 3197 : 			break;

  0028c	eb 40		 jmp	 SHORT $LN2@draw_3d_eo
$LN16@draw_3d_eo:

; 3198 : 		}
; 3199 : 		case TARGET_ACQUISITION_SYSTEM_DVO:
; 3200 : 		{
; 3201 : 			light_level = dvo_light_levels[weather_mode][day_segment_type];

  0028e	8b 45 e8	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00291	c1 e0 04	 shl	 eax, 4
  00294	8b 4d e4	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00297	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dvo_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  0029e	89 55 f4	 mov	 DWORD PTR _light_level$[ebp], edx

; 3202 : 
; 3203 : 			noise_level = dvo_noise_levels[weather_mode][day_segment_type];

  002a1	8b 45 e8	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  002a4	c1 e0 04	 shl	 eax, 4
  002a7	8b 4d e4	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  002aa	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dvo_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  002b1	89 55 f0	 mov	 DWORD PTR _noise_level$[ebp], edx

; 3204 : 
; 3205 : 			tint = DISPLAY_3D_TINT_CLEAR;

  002b4	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 0

; 3206 : 
; 3207 : 			break;

  002bb	eb 11		 jmp	 SHORT $LN2@draw_3d_eo
$LN17@draw_3d_eo:

; 3208 : 		}
; 3209 : 		default:
; 3210 : 		{
; 3211 : 			debug_fatal ("Invalid target acquisition system = %d", system);

  002bd	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  002c0	50		 push	 eax
  002c1	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
  002c6	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  002cb	83 c4 08	 add	 esp, 8
$LN2@draw_3d_eo:

; 3212 : 
; 3213 : 			break;
; 3214 : 		}
; 3215 : 	}
; 3216 : 
; 3217 : 	set_3d_render_target (eo_3d_texture_screen);

  002ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  002d3	50		 push	 eax
  002d4	e8 00 00 00 00	 call	 ?set_3d_render_target@@YGHPAUSCREEN@@@Z ; set_3d_render_target

; 3218 : 
; 3219 : 	set_active_screen (eo_3d_texture_screen);

  002d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  002de	50		 push	 eax
  002df	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 3220 : 
; 3221 : /*		if (command_line_green_mfd)
; 3222 : 		{
; 3223 : 			tint = DISPLAY_3D_TINT_GREEN;
; 3224 : 		}
; 3225 : 		else
; 3226 : 		{
; 3227 : 			tint = DISPLAY_3D_TINT_GREY;
; 3228 : 		}*/
; 3229 : 
; 3230 : 		set_main_3d_params (tint, light_level, noise_level, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_size, mfd_viewport_size, rad (59.99) * zoom, rad (59.99) * zoom);

  002e4	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  002e9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  002f1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002f5	51		 push	 ecx
  002f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fb	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  00300	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  00308	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0030c	51		 push	 ecx
  0030d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00312	51		 push	 ecx
  00313	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  0031b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00320	51		 push	 ecx
  00321	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00329	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032e	51		 push	 ecx
  0032f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00337	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033c	51		 push	 ecx
  0033d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00345	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034a	8b 45 f0	 mov	 eax, DWORD PTR _noise_level$[ebp]
  0034d	50		 push	 eax
  0034e	8b 4d f4	 mov	 ecx, DWORD PTR _light_level$[ebp]
  00351	51		 push	 ecx
  00352	8b 55 f8	 mov	 edx, DWORD PTR _tint$[ebp]
  00355	52		 push	 edx
  00356	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params

; 3231 : 
; 3232 : 	//
; 3233 : 	// draw 3D scene (temporarily adjust the virtual cockpit position relative to EO sensor position)
; 3234 : 	//
; 3235 : 
; 3236 : 	{
; 3237 : 		vec3d
; 3238 : 			position;
; 3239 : 
; 3240 : 		viewpoint
; 3241 : 			centered_eo_vp,
; 3242 : 			rotated_eo_vp,
; 3243 : 			tmp_vp;
; 3244 : 
; 3245 : 		matrix3x3
; 3246 : 			m;
; 3247 : 
; 3248 : 		tmp_vp = virtual_cockpit_inst3d->vp;

  0035b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  00361	83 c6 08	 add	 esi, 8
  00364	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00369	8d bd 48 ff ff
	ff		 lea	 edi, DWORD PTR _tmp_vp$2[ebp]
  0036f	f3 a5		 rep movsd

; 3249 : 
; 3250 : 		get_comanche_eo_relative_centred_viewpoint (&centered_eo_vp);

  00371	8d 45 a8	 lea	 eax, DWORD PTR _centered_eo_vp$4[ebp]
  00374	50		 push	 eax
  00375	e8 00 00 00 00	 call	 ?get_comanche_eo_relative_centred_viewpoint@@YGXPAUVIEWPOINT@@@Z ; get_comanche_eo_relative_centred_viewpoint

; 3251 : 
; 3252 : 		rotated_eo_vp.position = centered_eo_vp.position;

  0037a	8b 45 a8	 mov	 eax, DWORD PTR _centered_eo_vp$4[ebp]
  0037d	89 85 78 ff ff
	ff		 mov	 DWORD PTR _rotated_eo_vp$3[ebp], eax
  00383	8b 4d ac	 mov	 ecx, DWORD PTR _centered_eo_vp$4[ebp+4]
  00386	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _rotated_eo_vp$3[ebp+4], ecx
  0038c	8b 55 b0	 mov	 edx, DWORD PTR _centered_eo_vp$4[ebp+8]
  0038f	89 55 80	 mov	 DWORD PTR _rotated_eo_vp$3[ebp+8], edx

; 3253 : 
; 3254 : 		get_3d_transformation_matrix (m, eo_azimuth, eo_elevation, 0.0);

  00392	51		 push	 ecx
  00393	0f 57 c0	 xorps	 xmm0, xmm0
  00396	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039b	51		 push	 ecx
  0039c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  003a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a9	51		 push	 ecx
  003aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  003b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b7	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR _m$1[ebp]
  003bd	50		 push	 eax
  003be	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 3255 : 
; 3256 : 		multiply_matrix3x3_matrix3x3 (rotated_eo_vp.attitude, m, centered_eo_vp.attitude);

  003c3	8d 45 b4	 lea	 eax, DWORD PTR _centered_eo_vp$4[ebp+12]
  003c6	50		 push	 eax
  003c7	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _m$1[ebp]
  003cd	51		 push	 ecx
  003ce	8d 55 84	 lea	 edx, DWORD PTR _rotated_eo_vp$3[ebp+12]
  003d1	52		 push	 edx
  003d2	e8 00 00 00 00	 call	 ?multiply_matrix3x3_matrix3x3@@YGXQAY02MQAY02$$CBM1@Z ; multiply_matrix3x3_matrix3x3

; 3257 : 
; 3258 : 		position.x = -rotated_eo_vp.x;

  003d7	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp]
  003df	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  003e6	f3 0f 11 45 d8	 movss	 DWORD PTR _position$5[ebp], xmm0

; 3259 : 		position.y = -rotated_eo_vp.y;

  003eb	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+4]
  003f3	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  003fa	f3 0f 11 45 dc	 movss	 DWORD PTR _position$5[ebp+4], xmm0

; 3260 : 		position.z = -rotated_eo_vp.z;

  003ff	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+8]
  00404	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0040b	f3 0f 11 45 e0	 movss	 DWORD PTR _position$5[ebp+8], xmm0

; 3261 : 
; 3262 : 		multiply_transpose_matrix3x3_vec3d (&virtual_cockpit_inst3d->vp.position, rotated_eo_vp.attitude, &position);

  00410	8d 45 d8	 lea	 eax, DWORD PTR _position$5[ebp]
  00413	50		 push	 eax
  00414	8d 4d 84	 lea	 ecx, DWORD PTR _rotated_eo_vp$3[ebp+12]
  00417	51		 push	 ecx
  00418	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  0041e	83 c2 08	 add	 edx, 8
  00421	52		 push	 edx
  00422	e8 00 00 00 00	 call	 ?multiply_transpose_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_transpose_matrix3x3_vec3d

; 3263 : 
; 3264 : 		get_local_entity_vec3d (get_gunship_entity (), VEC3D_TYPE_POSITION, &position);

  00427	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0042e	74 0f		 je	 SHORT $LN27@draw_3d_eo
  00430	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00435	8b 08		 mov	 ecx, DWORD PTR [eax]
  00437	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv235[ebp], ecx
  0043d	eb 27		 jmp	 SHORT $LN28@draw_3d_eo
$LN27@draw_3d_eo:
  0043f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00445	81 c2 a1 00 00
	00		 add	 edx, 161		; 000000a1H
  0044b	52		 push	 edx
  0044c	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00451	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00456	50		 push	 eax
  00457	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0045c	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv235[ebp], 0
$LN28@draw_3d_eo:
  00466	b9 01 00 00 00	 mov	 ecx, 1
  0046b	85 c9		 test	 ecx, ecx
  0046d	74 0c		 je	 SHORT $LN29@draw_3d_eo
  0046f	c7 85 dc fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv243[ebp], 8
  00479	eb 27		 jmp	 SHORT $LN30@draw_3d_eo
$LN29@draw_3d_eo:
  0047b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00481	81 c2 a1 00 00
	00		 add	 edx, 161		; 000000a1H
  00487	52		 push	 edx
  00488	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0048d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00492	50		 push	 eax
  00493	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00498	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv243[ebp], 0
$LN30@draw_3d_eo:
  004a2	8d 4d d8	 lea	 ecx, DWORD PTR _position$5[ebp]
  004a5	51		 push	 ecx
  004a6	6a 08		 push	 8
  004a8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  004ae	52		 push	 edx
  004af	6b 85 e0 fe ff
	ff 60		 imul	 eax, DWORD PTR tv235[ebp], 96
  004b6	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv243[ebp]
  004bc	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  004c3	ff d2		 call	 edx

; 3265 : 
; 3266 : 		rotated_eo_vp.x += position.x;

  004c5	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp]
  004cd	f3 0f 58 45 d8	 addss	 xmm0, DWORD PTR _position$5[ebp]
  004d2	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _rotated_eo_vp$3[ebp], xmm0

; 3267 : 		rotated_eo_vp.y += position.y;

  004da	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+4]
  004e2	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _position$5[ebp+4]
  004e7	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _rotated_eo_vp$3[ebp+4], xmm0

; 3268 : 		rotated_eo_vp.z += position.z;

  004ef	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+8]
  004f4	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _position$5[ebp+8]
  004f9	f3 0f 11 45 80	 movss	 DWORD PTR _rotated_eo_vp$3[ebp+8], xmm0

; 3269 : 
; 3270 :  		draw_eo_3d_scene = TRUE;

  004fe	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 1 ; draw_eo_3d_scene

; 3271 : 
; 3272 : 		draw_main_3d_scene (&rotated_eo_vp);

  00508	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _rotated_eo_vp$3[ebp]
  0050e	50		 push	 eax
  0050f	e8 00 00 00 00	 call	 ?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z ; draw_main_3d_scene

; 3273 : 
; 3274 : 		draw_eo_3d_scene = FALSE;

  00514	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 0 ; draw_eo_3d_scene

; 3275 : 
; 3276 : 		virtual_cockpit_inst3d->vp = tmp_vp;

  0051e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  00524	83 c7 08	 add	 edi, 8
  00527	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0052c	8d b5 48 ff ff
	ff		 lea	 esi, DWORD PTR _tmp_vp$2[ebp]
  00532	f3 a5		 rep movsd

; 3277 : 	}
; 3278 : 
; 3279 : 	finalise_3d_render_target_texture (eo_3d_texture_screen);

  00534	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00539	50		 push	 eax
  0053a	e8 00 00 00 00	 call	 ?finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z ; finalise_3d_render_target_texture

; 3280 : 
; 3281 : 	set_3d_render_target (video_screen);

  0053f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00544	50		 push	 eax
  00545	e8 00 00 00 00	 call	 ?set_3d_render_target@@YGHPAUSCREEN@@@Z ; set_3d_render_target

; 3282 : 
; 3283 : 	set_active_screen (video_screen);

  0054a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  0054f	50		 push	 eax
  00550	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 3284 : }

  00555	5f		 pop	 edi
  00556	5e		 pop	 esi
  00557	5b		 pop	 ebx
  00558	8b e5		 mov	 esp, ebp
  0055a	5d		 pop	 ebp
  0055b	c2 08 00	 ret	 8
?draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ENDP ; draw_3d_eo_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?get_undamaged_eo_display_mode@@YGHW4COMANCHE_MAIN_MFD_MODES@@@Z
_TEXT	SEGMENT
_mode$ = 8						; size = 4
?get_undamaged_eo_display_mode@@YGHW4COMANCHE_MAIN_MFD_MODES@@@Z PROC ; get_undamaged_eo_display_mode, COMDAT

; 3079 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3080 : 	if ((mode == COMANCHE_MAIN_MFD_MODE_FLIR) && (!comanche_damage.flir))

  00009	83 7d 08 04	 cmp	 DWORD PTR _mode$[ebp], 4
  0000d	75 13		 jne	 SHORT $LN2@get_undama
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00014	d1 e8		 shr	 eax, 1
  00016	83 e0 01	 and	 eax, 1
  00019	75 07		 jne	 SHORT $LN2@get_undama

; 3081 : 	{
; 3082 : 		return (TRUE);

  0001b	b8 01 00 00 00	 mov	 eax, 1
  00020	eb 36		 jmp	 SHORT $LN1@get_undama
$LN2@get_undama:

; 3083 : 	}
; 3084 : 
; 3085 : 	if ((mode == COMANCHE_MAIN_MFD_MODE_DTV) && (!comanche_damage.dtv))

  00022	83 7d 08 05	 cmp	 DWORD PTR _mode$[ebp], 5
  00026	75 14		 jne	 SHORT $LN3@get_undama
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  0002d	c1 e8 02	 shr	 eax, 2
  00030	83 e0 01	 and	 eax, 1
  00033	75 07		 jne	 SHORT $LN3@get_undama

; 3086 : 	{
; 3087 : 		return (TRUE);

  00035	b8 01 00 00 00	 mov	 eax, 1
  0003a	eb 1c		 jmp	 SHORT $LN1@get_undama
$LN3@get_undama:

; 3088 : 	}
; 3089 : 
; 3090 : 	if ((mode == COMANCHE_MAIN_MFD_MODE_DVO) && (!comanche_damage.dvo))

  0003c	83 7d 08 06	 cmp	 DWORD PTR _mode$[ebp], 6
  00040	75 14		 jne	 SHORT $LN4@get_undama
  00042	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00047	c1 e8 03	 shr	 eax, 3
  0004a	83 e0 01	 and	 eax, 1
  0004d	75 07		 jne	 SHORT $LN4@get_undama

; 3091 : 	{
; 3092 : 		return (TRUE);

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	eb 02		 jmp	 SHORT $LN1@get_undama
$LN4@get_undama:

; 3093 : 	}
; 3094 : 
; 3095 : 	return (FALSE);

  00056	33 c0		 xor	 eax, eax
$LN1@get_undama:

; 3096 : }

  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
?get_undamaged_eo_display_mode@@YGHW4COMANCHE_MAIN_MFD_MODES@@@Z ENDP ; get_undamaged_eo_display_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_air_radar_mfd@@YGXXZ
_TEXT	SEGMENT
tv416 = -108						; size = 4
tv395 = -108						; size = 4
tv362 = -108						; size = 4
tv337 = -108						; size = 4
tv187 = -108						; size = 4
tv166 = -108						; size = 4
tv130 = -108						; size = 4
tv78 = -108						; size = 4
tv408 = -104						; size = 4
tv387 = -104						; size = 4
tv354 = -104						; size = 4
tv329 = -104						; size = 4
tv179 = -104						; size = 4
tv158 = -104						; size = 4
tv90 = -104						; size = 4
tv70 = -104						; size = 4
_target_position$ = -36					; size = 4
_source_position$ = -32					; size = 4
_target$ = -28						; size = 4
_source$ = -24						; size = 4
_y_adjust$ = -20					; size = 4
_target_range$ = -16					; size = 4
_scale$ = -12						; size = 4
_source_heading$ = -8					; size = 4
_source_side$ = -4					; size = 4
?draw_air_radar_mfd@@YGXXZ PROC				; draw_air_radar_mfd, COMDAT

; 2557 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2558 : 	entity_sides
; 2559 : 		source_side;
; 2560 : 
; 2561 : 	float
; 2562 : 		source_heading,
; 2563 : 		scale,
; 2564 : 		target_range,
; 2565 : 		y_adjust;
; 2566 : 
; 2567 : 	entity
; 2568 : 		*source,
; 2569 : 		*target;
; 2570 : 
; 2571 : 	vec3d
; 2572 : 		*source_position,
; 2573 : 		*target_position;
; 2574 : 
; 2575 : 	source = get_gunship_entity ();

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0000e	89 45 e8	 mov	 DWORD PTR _source$[ebp], eax

; 2576 : 
; 2577 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  00011	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  00015	74 0a		 je	 SHORT $LN23@draw_air_r
  00017	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 4d 98	 mov	 DWORD PTR tv70[ebp], ecx
  0001f	eb 21		 jmp	 SHORT $LN24@draw_air_r
$LN23@draw_air_r:
  00021	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00027	83 c2 14	 add	 edx, 20			; 00000014H
  0002a	52		 push	 edx
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003b	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN24@draw_air_r:
  00042	b9 01 00 00 00	 mov	 ecx, 1
  00047	85 c9		 test	 ecx, ecx
  00049	74 09		 je	 SHORT $LN25@draw_air_r
  0004b	c7 45 94 08 00
	00 00		 mov	 DWORD PTR tv78[ebp], 8
  00052	eb 21		 jmp	 SHORT $LN26@draw_air_r
$LN25@draw_air_r:
  00054	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  0005a	83 c2 14	 add	 edx, 20			; 00000014H
  0005d	52		 push	 edx
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006e	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN26@draw_air_r:
  00075	6a 08		 push	 8
  00077	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  0007a	51		 push	 ecx
  0007b	6b 55 98 60	 imul	 edx, DWORD PTR tv70[ebp], 96
  0007f	8b 45 94	 mov	 eax, DWORD PTR tv78[ebp]
  00082	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00089	ff d1		 call	 ecx
  0008b	89 45 e0	 mov	 DWORD PTR _source_position$[ebp], eax

; 2578 : 
; 2579 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  0008e	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  00092	74 0a		 je	 SHORT $LN27@draw_air_r
  00094	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  00097	8b 08		 mov	 ecx, DWORD PTR [eax]
  00099	89 4d 98	 mov	 DWORD PTR tv90[ebp], ecx
  0009c	eb 21		 jmp	 SHORT $LN28@draw_air_r
$LN27@draw_air_r:
  0009e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  000a4	83 c2 16	 add	 edx, 22			; 00000016H
  000a7	52		 push	 edx
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b8	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN28@draw_air_r:
  000bf	b9 01 00 00 00	 mov	 ecx, 1
  000c4	85 c9		 test	 ecx, ecx
  000c6	74 09		 je	 SHORT $LN29@draw_air_r
  000c8	c7 45 94 bb 00
	00 00		 mov	 DWORD PTR tv130[ebp], 187 ; 000000bbH
  000cf	eb 21		 jmp	 SHORT $LN30@draw_air_r
$LN29@draw_air_r:
  000d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  000d7	83 c2 16	 add	 edx, 22			; 00000016H
  000da	52		 push	 edx
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000eb	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN30@draw_air_r:
  000f2	68 bb 00 00 00	 push	 187			; 000000bbH
  000f7	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  000fa	51		 push	 ecx
  000fb	69 55 98 5c 04
	00 00		 imul	 edx, DWORD PTR tv90[ebp], 1116
  00102	8b 45 94	 mov	 eax, DWORD PTR tv130[ebp]
  00105	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  0010c	ff d1		 call	 ecx
  0010e	89 45 fc	 mov	 DWORD PTR _source_side$[ebp], eax

; 2580 : 
; 2581 : 	////////////////////////////////////////
; 2582 : 	//
; 2583 : 	// text
; 2584 : 	//
; 2585 : 	////////////////////////////////////////
; 2586 : 
; 2587 : 	set_mono_font_colour (MFD_COLOUR1);

  00111	b8 04 00 00 00	 mov	 eax, 4
  00116	6b c8 00	 imul	 ecx, eax, 0
  00119	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0011f	52		 push	 edx
  00120	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 2588 : 
; 2589 : 	if (draw_large_mfd)

  00125	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0012c	74 09		 je	 SHORT $LN4@draw_air_r

; 2590 : 	{
; 2591 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  0012e	6a 05		 push	 5
  00130	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 2592 : 	}
; 2593 : 	else

  00135	eb 07		 jmp	 SHORT $LN5@draw_air_r
$LN4@draw_air_r:

; 2594 : 	{
; 2595 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  00137	6a 01		 push	 1
  00139	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN5@draw_air_r:

; 2596 : 	}
; 2597 : 
; 2598 : 	//
; 2599 : 	// declutter status
; 2600 : 	//
; 2601 : 
; 2602 : 	if (draw_large_mfd)

  0013e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00145	74 0f		 je	 SHORT $LN6@draw_air_r

; 2603 : 	{
; 2604 : 		y_adjust = 5.0;

  00147	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  0014f	f3 0f 11 45 ec	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2605 : 	}
; 2606 : 	else

  00154	eb 0d		 jmp	 SHORT $LN7@draw_air_r
$LN6@draw_air_r:

; 2607 : 	{
; 2608 : 		y_adjust = 2.0;

  00156	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0015e	f3 0f 11 45 ec	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN7@draw_air_r:

; 2609 : 	}
; 2610 : 
; 2611 : 	set_2d_mono_font_position (-1.0, 1.0);

  00163	51		 push	 ecx
  00164	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0016c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00171	51		 push	 ecx
  00172	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0017a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2612 : 
; 2613 : 	set_mono_font_rel_position (1.0, y_adjust);

  00184	51		 push	 ecx
  00185	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0018a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018f	51		 push	 ecx
  00190	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00198	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2614 : 
; 2615 : 	if (air_radar.show_allied_targets)

  001a2	83 3d 1c 00 00
	00 00		 cmp	 DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+28, 0
  001a9	74 0c		 je	 SHORT $LN8@draw_air_r

; 2616 : 	{
; 2617 : 		print_mono_font_string ("ALL");

  001ab	68 00 00 00 00	 push	 OFFSET ??_C@_03NIFPGLBG@ALL@
  001b0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2618 : 	}
; 2619 : 	else

  001b5	eb 0a		 jmp	 SHORT $LN9@draw_air_r
$LN8@draw_air_r:

; 2620 : 	{
; 2621 : 		print_mono_font_string ("ENEMY");

  001b7	68 00 00 00 00	 push	 OFFSET ??_C@_05EJJKHDCK@ENEMY@
  001bc	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN9@draw_air_r:

; 2622 : 	}
; 2623 : 
; 2624 : 	//
; 2625 : 	// scan range
; 2626 : 	//
; 2627 : 
; 2628 : 	display_radar_scan_range (air_radar.scan_range);

  001c1	51		 push	 ecx
  001c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A
  001ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cf	e8 00 00 00 00	 call	 ?display_radar_scan_range@@YGXM@Z ; display_radar_scan_range

; 2629 : 
; 2630 : 	//
; 2631 : 	// target details
; 2632 : 	//
; 2633 : 
; 2634 : //	if (air_radar_is_active())
; 2635 : 	if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_AIR_RADAR)

  001d4	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 2 ; target_acquisition_system
  001db	0f 85 3a 01 00
	00		 jne	 $LN10@draw_air_r

; 2636 : 	{
; 2637 : 		target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  001e1	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  001e5	74 0a		 je	 SHORT $LN31@draw_air_r
  001e7	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  001ea	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ec	89 4d 98	 mov	 DWORD PTR tv158[ebp], ecx
  001ef	eb 21		 jmp	 SHORT $LN32@draw_air_r
$LN31@draw_air_r:
  001f1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  001f7	83 c2 50	 add	 edx, 80			; 00000050H
  001fa	52		 push	 edx
  001fb	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00200	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00205	50		 push	 eax
  00206	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0020b	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv158[ebp], 0
$LN32@draw_air_r:
  00212	b9 01 00 00 00	 mov	 ecx, 1
  00217	85 c9		 test	 ecx, ecx
  00219	74 09		 je	 SHORT $LN33@draw_air_r
  0021b	c7 45 94 26 00
	00 00		 mov	 DWORD PTR tv166[ebp], 38 ; 00000026H
  00222	eb 21		 jmp	 SHORT $LN34@draw_air_r
$LN33@draw_air_r:
  00224	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  0022a	83 c2 50	 add	 edx, 80			; 00000050H
  0022d	52		 push	 edx
  0022e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00233	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00238	50		 push	 eax
  00239	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0023e	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv166[ebp], 0
$LN34@draw_air_r:
  00245	6a 26		 push	 38			; 00000026H
  00247	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  0024a	51		 push	 ecx
  0024b	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv158[ebp], 180
  00252	8b 45 94	 mov	 eax, DWORD PTR tv166[ebp]
  00255	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0025c	ff d1		 call	 ecx
  0025e	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax

; 2638 : 
; 2639 : 		if (target)

  00261	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  00265	0f 84 8f 00 00
	00		 je	 $LN11@draw_air_r

; 2640 : 		{
; 2641 : 			target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  0026b	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  0026f	74 0a		 je	 SHORT $LN35@draw_air_r
  00271	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  00274	8b 08		 mov	 ecx, DWORD PTR [eax]
  00276	89 4d 98	 mov	 DWORD PTR tv179[ebp], ecx
  00279	eb 21		 jmp	 SHORT $LN36@draw_air_r
$LN35@draw_air_r:
  0027b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00281	83 c2 54	 add	 edx, 84			; 00000054H
  00284	52		 push	 edx
  00285	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0028a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0028f	50		 push	 eax
  00290	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00295	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv179[ebp], 0
$LN36@draw_air_r:
  0029c	b9 01 00 00 00	 mov	 ecx, 1
  002a1	85 c9		 test	 ecx, ecx
  002a3	74 09		 je	 SHORT $LN37@draw_air_r
  002a5	c7 45 94 08 00
	00 00		 mov	 DWORD PTR tv187[ebp], 8
  002ac	eb 21		 jmp	 SHORT $LN38@draw_air_r
$LN37@draw_air_r:
  002ae	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  002b4	83 c2 54	 add	 edx, 84			; 00000054H
  002b7	52		 push	 edx
  002b8	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  002bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  002c2	50		 push	 eax
  002c3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002c8	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv187[ebp], 0
$LN38@draw_air_r:
  002cf	6a 08		 push	 8
  002d1	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  002d4	51		 push	 ecx
  002d5	6b 55 98 60	 imul	 edx, DWORD PTR tv179[ebp], 96
  002d9	8b 45 94	 mov	 eax, DWORD PTR tv187[ebp]
  002dc	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  002e3	ff d1		 call	 ecx
  002e5	89 45 dc	 mov	 DWORD PTR _target_position$[ebp], eax

; 2642 : 
; 2643 : 			target_range = get_3d_range (source_position, target_position);

  002e8	8b 45 dc	 mov	 eax, DWORD PTR _target_position$[ebp]
  002eb	50		 push	 eax
  002ec	8b 4d e0	 mov	 ecx, DWORD PTR _source_position$[ebp]
  002ef	51		 push	 ecx
  002f0	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  002f5	d9 5d f0	 fstp	 DWORD PTR _target_range$[ebp]

; 2644 : 		}
; 2645 : 		else

  002f8	eb 08		 jmp	 SHORT $LN12@draw_air_r
$LN11@draw_air_r:

; 2646 : 		{
; 2647 : 			target_range = 0.0;

  002fa	0f 57 c0	 xorps	 xmm0, xmm0
  002fd	f3 0f 11 45 f0	 movss	 DWORD PTR _target_range$[ebp], xmm0
$LN12@draw_air_r:

; 2648 : 		}
; 2649 : 
; 2650 : 		display_radar_target_details (target, target_range, &air_radar);

  00302	68 00 00 00 00	 push	 OFFSET ?air_radar@@3URADAR_PARAMS@@A ; air_radar
  00307	51		 push	 ecx
  00308	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _target_range$[ebp]
  0030d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00312	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  00315	50		 push	 eax
  00316	e8 00 00 00 00	 call	 ?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z ; display_radar_target_details
$LN10@draw_air_r:

; 2651 : 	}
; 2652 : 
; 2653 : 	////////////////////////////////////////
; 2654 : 	//
; 2655 : 	// line graphics
; 2656 : 	//
; 2657 : 	////////////////////////////////////////
; 2658 : 
; 2659 : 	//
; 2660 : 	// datum markers
; 2661 : 	//
; 2662 : 
; 2663 : 	draw_2d_line ( 0.00,  TICK1,  0.00,  TICK2, MFD_COLOUR4);

  0031b	b8 04 00 00 00	 mov	 eax, 4
  00320	6b c8 03	 imul	 ecx, eax, 3
  00323	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00329	52		 push	 edx
  0032a	51		 push	 ecx
  0032b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f576c8b
  00333	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00338	51		 push	 ecx
  00339	0f 57 c0	 xorps	 xmm0, xmm0
  0033c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00341	51		 push	 ecx
  00342	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f43d70a
  0034a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034f	51		 push	 ecx
  00350	0f 57 c0	 xorps	 xmm0, xmm0
  00353	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00358	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2664 : 	draw_2d_line ( TICK1,  0.00,  TICK2,  0.00, MFD_COLOUR4);

  0035d	b8 04 00 00 00	 mov	 eax, 4
  00362	6b c8 03	 imul	 ecx, eax, 3
  00365	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0036b	52		 push	 edx
  0036c	51		 push	 ecx
  0036d	0f 57 c0	 xorps	 xmm0, xmm0
  00370	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00375	51		 push	 ecx
  00376	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f576c8b
  0037e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00383	51		 push	 ecx
  00384	0f 57 c0	 xorps	 xmm0, xmm0
  00387	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038c	51		 push	 ecx
  0038d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f43d70a
  00395	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2665 : 	draw_2d_line ( 0.00, -TICK1,  0.00, -TICK2, MFD_COLOUR4);

  0039f	b8 04 00 00 00	 mov	 eax, 4
  003a4	6b c8 03	 imul	 ecx, eax, 3
  003a7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003ad	52		 push	 edx
  003ae	51		 push	 ecx
  003af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf576c8b
  003b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bc	51		 push	 ecx
  003bd	0f 57 c0	 xorps	 xmm0, xmm0
  003c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c5	51		 push	 ecx
  003c6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf43d70a
  003ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d3	51		 push	 ecx
  003d4	0f 57 c0	 xorps	 xmm0, xmm0
  003d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003dc	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2666 : 	draw_2d_line (-TICK1,  0.00, -TICK2,  0.00, MFD_COLOUR4);

  003e1	b8 04 00 00 00	 mov	 eax, 4
  003e6	6b c8 03	 imul	 ecx, eax, 3
  003e9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003ef	52		 push	 edx
  003f0	51		 push	 ecx
  003f1	0f 57 c0	 xorps	 xmm0, xmm0
  003f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f9	51		 push	 ecx
  003fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf576c8b
  00402	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00407	51		 push	 ecx
  00408	0f 57 c0	 xorps	 xmm0, xmm0
  0040b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00410	51		 push	 ecx
  00411	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf43d70a
  00419	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0041e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2667 : 
; 2668 : 	//
; 2669 : 	// range markers
; 2670 : 	//
; 2671 : 
; 2672 : 	draw_2d_circle (0.0, 0.0, RADIUS * 0.25, MFD_COLOUR4);

  00423	b8 04 00 00 00	 mov	 eax, 4
  00428	6b c8 03	 imul	 ecx, eax, 3
  0042b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00431	52		 push	 edx
  00432	51		 push	 ecx
  00433	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e59999a
  0043b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00440	51		 push	 ecx
  00441	0f 57 c0	 xorps	 xmm0, xmm0
  00444	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00449	51		 push	 ecx
  0044a	0f 57 c0	 xorps	 xmm0, xmm0
  0044d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00452	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2673 : 	draw_2d_circle (0.0, 0.0, RADIUS * 0.50, MFD_COLOUR4);

  00457	b8 04 00 00 00	 mov	 eax, 4
  0045c	6b c8 03	 imul	 ecx, eax, 3
  0045f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00465	52		 push	 edx
  00466	51		 push	 ecx
  00467	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed9999a
  0046f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00474	51		 push	 ecx
  00475	0f 57 c0	 xorps	 xmm0, xmm0
  00478	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047d	51		 push	 ecx
  0047e	0f 57 c0	 xorps	 xmm0, xmm0
  00481	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00486	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2674 : 	draw_2d_circle (0.0, 0.0, RADIUS * 0.75, MFD_COLOUR4);

  0048b	b8 04 00 00 00	 mov	 eax, 4
  00490	6b c8 03	 imul	 ecx, eax, 3
  00493	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00499	52		 push	 edx
  0049a	51		 push	 ecx
  0049b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f233333
  004a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a8	51		 push	 ecx
  004a9	0f 57 c0	 xorps	 xmm0, xmm0
  004ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b1	51		 push	 ecx
  004b2	0f 57 c0	 xorps	 xmm0, xmm0
  004b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ba	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2675 : 
; 2676 : 	//
; 2677 : 	// scan limits
; 2678 : 	//
; 2679 : 
; 2680 : 	if (air_radar.scan_arc_size == COMANCHE_RADAR_SCAN_ARC_SIZE_360)

  004bf	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  004c7	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@40c90fdb
  004ce	9f		 lahf
  004cf	f6 c4 44	 test	 ah, 68			; 00000044H
  004d2	7a 39		 jp	 SHORT $LN13@draw_air_r

; 2681 : 	{
; 2682 : 		draw_2d_circle (0.0, 0.0, RADIUS, MFD_COLOUR1);

  004d4	b8 04 00 00 00	 mov	 eax, 4
  004d9	6b c8 00	 imul	 ecx, eax, 0
  004dc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004e2	52		 push	 edx
  004e3	51		 push	 ecx
  004e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  004ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f1	51		 push	 ecx
  004f2	0f 57 c0	 xorps	 xmm0, xmm0
  004f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fa	51		 push	 ecx
  004fb	0f 57 c0	 xorps	 xmm0, xmm0
  004fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00503	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2683 : 	}
; 2684 : 	else

  00508	e9 ab 01 00 00	 jmp	 $LN14@draw_air_r
$LN13@draw_air_r:

; 2685 : 	{
; 2686 : 		draw_2d_circle (0.0, 0.0, RADIUS, MFD_COLOUR4);

  0050d	b8 04 00 00 00	 mov	 eax, 4
  00512	6b c8 03	 imul	 ecx, eax, 3
  00515	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0051b	52		 push	 edx
  0051c	51		 push	 ecx
  0051d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00525	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0052a	51		 push	 ecx
  0052b	0f 57 c0	 xorps	 xmm0, xmm0
  0052e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00533	51		 push	 ecx
  00534	0f 57 c0	 xorps	 xmm0, xmm0
  00537	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053c	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2687 : 
; 2688 : 		set_2d_window_rotation (mfd_env, -air_radar.scan_datum);

  00541	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  00549	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00550	51		 push	 ecx
  00551	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00556	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0055b	50		 push	 eax
  0055c	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2689 : 
; 2690 : 		draw_radar_arc (air_radar.scan_arc_size, RADIUS, MFD_COLOUR1);

  00561	b8 04 00 00 00	 mov	 eax, 4
  00566	6b c8 00	 imul	 ecx, eax, 0
  00569	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0056f	52		 push	 edx
  00570	51		 push	 ecx
  00571	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00579	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057e	51		 push	 ecx
  0057f	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  00587	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0058c	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 2691 : 
; 2692 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  00591	b8 04 00 00 00	 mov	 eax, 4
  00596	6b c8 00	 imul	 ecx, eax, 0
  00599	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0059f	52		 push	 edx
  005a0	51		 push	 ecx
  005a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  005a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ae	51		 push	 ecx
  005af	0f 57 c0	 xorps	 xmm0, xmm0
  005b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b7	51		 push	 ecx
  005b8	0f 57 c0	 xorps	 xmm0, xmm0
  005bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c0	51		 push	 ecx
  005c1	0f 57 c0	 xorps	 xmm0, xmm0
  005c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2693 : 
; 2694 : 		set_2d_window_rotation (mfd_env, -(air_radar.scan_datum - (air_radar.scan_arc_size * 0.5)));

  005ce	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  005d6	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  005de	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  005e6	f2 0f 5c c1	 subsd	 xmm0, xmm1
  005ea	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  005f1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005f5	51		 push	 ecx
  005f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005fb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00600	50		 push	 eax
  00601	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2695 : 
; 2696 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  00606	b8 04 00 00 00	 mov	 eax, 4
  0060b	6b c8 00	 imul	 ecx, eax, 0
  0060e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00614	52		 push	 edx
  00615	51		 push	 ecx
  00616	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  0061e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00623	51		 push	 ecx
  00624	0f 57 c0	 xorps	 xmm0, xmm0
  00627	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0062c	51		 push	 ecx
  0062d	0f 57 c0	 xorps	 xmm0, xmm0
  00630	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00635	51		 push	 ecx
  00636	0f 57 c0	 xorps	 xmm0, xmm0
  00639	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2697 : 
; 2698 : 		set_2d_window_rotation (mfd_env, -(air_radar.scan_datum + (air_radar.scan_arc_size * 0.5)));

  00643	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  0064b	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  00653	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0065b	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0065f	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00666	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0066a	51		 push	 ecx
  0066b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00670	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00675	50		 push	 eax
  00676	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2699 : 
; 2700 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  0067b	b8 04 00 00 00	 mov	 eax, 4
  00680	6b c8 00	 imul	 ecx, eax, 0
  00683	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00689	52		 push	 edx
  0068a	51		 push	 ecx
  0068b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00693	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00698	51		 push	 ecx
  00699	0f 57 c0	 xorps	 xmm0, xmm0
  0069c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a1	51		 push	 ecx
  006a2	0f 57 c0	 xorps	 xmm0, xmm0
  006a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006aa	51		 push	 ecx
  006ab	0f 57 c0	 xorps	 xmm0, xmm0
  006ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN14@draw_air_r:

; 2701 : 	}
; 2702 : 
; 2703 : 	//
; 2704 : 	// sweep
; 2705 : 	//
; 2706 : 
; 2707 : 	if (air_radar_is_active())

  006b8	e8 00 00 00 00	 call	 ?air_radar_is_active@@YGHXZ ; air_radar_is_active
  006bd	85 c0		 test	 eax, eax
  006bf	74 65		 je	 SHORT $LN15@draw_air_r

; 2708 : 	{
; 2709 : 		set_2d_window_rotation (mfd_env, -(air_radar.scan_datum + air_radar.sweep_offset));

  006c1	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  006c9	f3 0f 58 05 0c
	00 00 00	 addss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+12
  006d1	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  006d8	51		 push	 ecx
  006d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  006e3	50		 push	 eax
  006e4	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2710 : 
; 2711 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  006e9	b8 04 00 00 00	 mov	 eax, 4
  006ee	6b c8 00	 imul	 ecx, eax, 0
  006f1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006f7	52		 push	 edx
  006f8	51		 push	 ecx
  006f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00701	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00706	51		 push	 ecx
  00707	0f 57 c0	 xorps	 xmm0, xmm0
  0070a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0070f	51		 push	 ecx
  00710	0f 57 c0	 xorps	 xmm0, xmm0
  00713	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00718	51		 push	 ecx
  00719	0f 57 c0	 xorps	 xmm0, xmm0
  0071c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00721	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN15@draw_air_r:

; 2712 : 	}
; 2713 : 
; 2714 : 	set_2d_window_rotation (mfd_env, 0.0);

  00726	51		 push	 ecx
  00727	0f 57 c0	 xorps	 xmm0, xmm0
  0072a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0072f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00734	50		 push	 eax
  00735	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2715 : 
; 2716 : 	////////////////////////////////////////
; 2717 : 	//
; 2718 : 	// draw targets
; 2719 : 	//
; 2720 : 	////////////////////////////////////////
; 2721 : 
; 2722 : 	if (!comanche_damage.radar)

  0073a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  0073f	83 e0 01	 and	 eax, 1
  00742	0f 85 d7 02 00
	00		 jne	 $LN16@draw_air_r

; 2723 : 	{
; 2724 : 		source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  00748	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  0074c	74 0a		 je	 SHORT $LN39@draw_air_r
  0074e	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  00751	8b 08		 mov	 ecx, DWORD PTR [eax]
  00753	89 4d 98	 mov	 DWORD PTR tv329[ebp], ecx
  00756	eb 24		 jmp	 SHORT $LN40@draw_air_r
$LN39@draw_air_r:
  00758	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  0075e	81 c2 a7 00 00
	00		 add	 edx, 167		; 000000a7H
  00764	52		 push	 edx
  00765	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0076a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0076f	50		 push	 eax
  00770	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00775	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv329[ebp], 0
$LN40@draw_air_r:
  0077c	b9 01 00 00 00	 mov	 ecx, 1
  00781	85 c9		 test	 ecx, ecx
  00783	74 09		 je	 SHORT $LN41@draw_air_r
  00785	c7 45 94 34 00
	00 00		 mov	 DWORD PTR tv337[ebp], 52 ; 00000034H
  0078c	eb 24		 jmp	 SHORT $LN42@draw_air_r
$LN41@draw_air_r:
  0078e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00794	81 c2 a7 00 00
	00		 add	 edx, 167		; 000000a7H
  0079a	52		 push	 edx
  0079b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  007a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  007a5	50		 push	 eax
  007a6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007ab	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv337[ebp], 0
$LN42@draw_air_r:
  007b2	6a 34		 push	 52			; 00000034H
  007b4	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  007b7	51		 push	 ecx
  007b8	69 55 98 bc 02
	00 00		 imul	 edx, DWORD PTR tv329[ebp], 700
  007bf	8b 45 94	 mov	 eax, DWORD PTR tv337[ebp]
  007c2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  007c9	ff d1		 call	 ecx
  007cb	d9 5d f8	 fstp	 DWORD PTR _source_heading$[ebp]

; 2725 : 
; 2726 : 		set_2d_window_rotation (mfd_env, source_heading);

  007ce	51		 push	 ecx
  007cf	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  007d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  007de	50		 push	 eax
  007df	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2727 : 
; 2728 : 		scale = RADIUS / air_radar.scan_range;

  007e4	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A
  007ec	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3feb333333333333
  007f4	f2 0f 5e c8	 divsd	 xmm1, xmm0
  007f8	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  007fc	f3 0f 11 45 f4	 movss	 DWORD PTR _scale$[ebp], xmm0

; 2729 : 
; 2730 : 		target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  00801	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  00805	74 0a		 je	 SHORT $LN43@draw_air_r
  00807	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  0080a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0080c	89 4d 98	 mov	 DWORD PTR tv354[ebp], ecx
  0080f	eb 24		 jmp	 SHORT $LN44@draw_air_r
$LN43@draw_air_r:
  00811	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00817	81 c2 ad 00 00
	00		 add	 edx, 173		; 000000adH
  0081d	52		 push	 edx
  0081e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00823	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00828	50		 push	 eax
  00829	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0082e	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv354[ebp], 0
$LN44@draw_air_r:
  00835	b9 01 00 00 00	 mov	 ecx, 1
  0083a	85 c9		 test	 ecx, ecx
  0083c	74 09		 je	 SHORT $LN45@draw_air_r
  0083e	c7 45 94 12 00
	00 00		 mov	 DWORD PTR tv362[ebp], 18 ; 00000012H
  00845	eb 24		 jmp	 SHORT $LN46@draw_air_r
$LN45@draw_air_r:
  00847	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  0084d	81 c2 ad 00 00
	00		 add	 edx, 173		; 000000adH
  00853	52		 push	 edx
  00854	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00859	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0085e	50		 push	 eax
  0085f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00864	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv362[ebp], 0
$LN46@draw_air_r:
  0086b	6a 12		 push	 18			; 00000012H
  0086d	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  00870	51		 push	 ecx
  00871	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv354[ebp], 180
  00878	8b 45 94	 mov	 eax, DWORD PTR tv362[ebp]
  0087b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00882	ff d1		 call	 ecx
  00884	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax
$LN2@draw_air_r:

; 2731 : 
; 2732 : 		while (target)

  00887	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  0088b	0f 84 c5 00 00
	00		 je	 $LN3@draw_air_r

; 2733 : 		{
; 2734 : 			if (get_gunship_target_valid_for_air_radar (target))

  00891	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  00894	50		 push	 eax
  00895	e8 00 00 00 00	 call	 ?get_gunship_target_valid_for_air_radar@@YGHPAUENTITY@@@Z ; get_gunship_target_valid_for_air_radar
  0089a	85 c0		 test	 eax, eax
  0089c	74 2d		 je	 SHORT $LN18@draw_air_r

; 2735 : 			{
; 2736 : 				if (get_target_matches_air_radar_declutter_criteria (target, source_side))

  0089e	8b 45 fc	 mov	 eax, DWORD PTR _source_side$[ebp]
  008a1	50		 push	 eax
  008a2	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  008a5	51		 push	 ecx
  008a6	e8 00 00 00 00	 call	 ?get_target_matches_air_radar_declutter_criteria@@YGHPAUENTITY@@W4ENTITY_SIDES@@@Z ; get_target_matches_air_radar_declutter_criteria
  008ab	85 c0		 test	 eax, eax
  008ad	74 1c		 je	 SHORT $LN18@draw_air_r

; 2737 : 				{
; 2738 : //VJ 030423 TSD render mod
; 2739 : 					draw_radar_target_symbol (target, source_position, scale, FALSE, FALSE);

  008af	6a 00		 push	 0
  008b1	6a 00		 push	 0
  008b3	51		 push	 ecx
  008b4	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _scale$[ebp]
  008b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008be	8b 45 e0	 mov	 eax, DWORD PTR _source_position$[ebp]
  008c1	50		 push	 eax
  008c2	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  008c5	51		 push	 ecx
  008c6	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN18@draw_air_r:

; 2740 : 				}
; 2741 : 			}
; 2742 : 
; 2743 : 			target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  008cb	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  008cf	74 0a		 je	 SHORT $LN47@draw_air_r
  008d1	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  008d4	8b 08		 mov	 ecx, DWORD PTR [eax]
  008d6	89 4d 98	 mov	 DWORD PTR tv387[ebp], ecx
  008d9	eb 24		 jmp	 SHORT $LN48@draw_air_r
$LN47@draw_air_r:
  008db	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  008e1	81 c2 ba 00 00
	00		 add	 edx, 186		; 000000baH
  008e7	52		 push	 edx
  008e8	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  008ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  008f2	50		 push	 eax
  008f3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008f8	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv387[ebp], 0
$LN48@draw_air_r:
  008ff	b9 01 00 00 00	 mov	 ecx, 1
  00904	85 c9		 test	 ecx, ecx
  00906	74 09		 je	 SHORT $LN49@draw_air_r
  00908	c7 45 94 12 00
	00 00		 mov	 DWORD PTR tv395[ebp], 18 ; 00000012H
  0090f	eb 24		 jmp	 SHORT $LN50@draw_air_r
$LN49@draw_air_r:
  00911	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00917	81 c2 ba 00 00
	00		 add	 edx, 186		; 000000baH
  0091d	52		 push	 edx
  0091e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00923	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00928	50		 push	 eax
  00929	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0092e	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv395[ebp], 0
$LN50@draw_air_r:
  00935	6a 12		 push	 18			; 00000012H
  00937	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  0093a	51		 push	 ecx
  0093b	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv387[ebp], 180
  00942	8b 45 94	 mov	 eax, DWORD PTR tv395[ebp]
  00945	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0094c	ff d1		 call	 ecx
  0094e	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax

; 2744 : 		}

  00951	e9 31 ff ff ff	 jmp	 $LN2@draw_air_r
$LN3@draw_air_r:

; 2745 : 
; 2746 : 		//
; 2747 : 		// draw selected target last
; 2748 : 		//
; 2749 : 
; 2750 : 		if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_AIR_RADAR)

  00956	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 2 ; target_acquisition_system
  0095d	0f 85 a8 00 00
	00		 jne	 $LN20@draw_air_r

; 2751 : 		{
; 2752 : 			target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  00963	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  00967	74 0a		 je	 SHORT $LN51@draw_air_r
  00969	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  0096c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0096e	89 4d 98	 mov	 DWORD PTR tv408[ebp], ecx
  00971	eb 24		 jmp	 SHORT $LN52@draw_air_r
$LN51@draw_air_r:
  00973	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00979	81 c2 c3 00 00
	00		 add	 edx, 195		; 000000c3H
  0097f	52		 push	 edx
  00980	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00985	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0098a	50		 push	 eax
  0098b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00990	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv408[ebp], 0
$LN52@draw_air_r:
  00997	b9 01 00 00 00	 mov	 ecx, 1
  0099c	85 c9		 test	 ecx, ecx
  0099e	74 09		 je	 SHORT $LN53@draw_air_r
  009a0	c7 45 94 26 00
	00 00		 mov	 DWORD PTR tv416[ebp], 38 ; 00000026H
  009a7	eb 24		 jmp	 SHORT $LN54@draw_air_r
$LN53@draw_air_r:
  009a9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  009af	81 c2 c3 00 00
	00		 add	 edx, 195		; 000000c3H
  009b5	52		 push	 edx
  009b6	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  009bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  009c0	50		 push	 eax
  009c1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009c6	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv416[ebp], 0
$LN54@draw_air_r:
  009cd	6a 26		 push	 38			; 00000026H
  009cf	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  009d2	51		 push	 ecx
  009d3	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv408[ebp], 180
  009da	8b 45 94	 mov	 eax, DWORD PTR tv416[ebp]
  009dd	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  009e4	ff d1		 call	 ecx
  009e6	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax

; 2753 : 
; 2754 : 			if (target)

  009e9	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  009ed	74 1c		 je	 SHORT $LN20@draw_air_r

; 2755 : 			{
; 2756 : //VJ 030423 TSD render mod
; 2757 : 				draw_radar_target_symbol (target, source_position, scale, TRUE, FALSE);

  009ef	6a 00		 push	 0
  009f1	6a 01		 push	 1
  009f3	51		 push	 ecx
  009f4	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _scale$[ebp]
  009f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009fe	8b 45 e0	 mov	 eax, DWORD PTR _source_position$[ebp]
  00a01	50		 push	 eax
  00a02	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  00a05	51		 push	 ecx
  00a06	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN20@draw_air_r:

; 2758 : 			}
; 2759 : 		}
; 2760 : 
; 2761 : 		set_2d_window_rotation (mfd_env, 0.0);

  00a0b	51		 push	 ecx
  00a0c	0f 57 c0	 xorps	 xmm0, xmm0
  00a0f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a14	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a19	50		 push	 eax
  00a1a	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN16@draw_air_r:

; 2762 : 	}
; 2763 : 
; 2764 : 	////////////////////////////////////////
; 2765 : 	//
; 2766 : 	// damaged
; 2767 : 	//
; 2768 : 	////////////////////////////////////////
; 2769 : 
; 2770 : 	if (comanche_damage.radar)

  00a1f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00a24	83 e0 01	 and	 eax, 1
  00a27	0f 84 98 00 00
	00		 je	 $LN21@draw_air_r

; 2771 : 	{
; 2772 : 		draw_2d_line (-0.5, -0.5,  0.5, 0.5, MFD_COLOUR1);

  00a2d	b8 04 00 00 00	 mov	 eax, 4
  00a32	6b c8 00	 imul	 ecx, eax, 0
  00a35	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a3b	52		 push	 edx
  00a3c	51		 push	 ecx
  00a3d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00a45	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a4a	51		 push	 ecx
  00a4b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00a53	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a58	51		 push	 ecx
  00a59	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00a61	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a66	51		 push	 ecx
  00a67	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00a6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a74	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2773 : 		draw_2d_line ( 0.5, -0.5, -0.5, 0.5, MFD_COLOUR1);

  00a79	b8 04 00 00 00	 mov	 eax, 4
  00a7e	6b c8 00	 imul	 ecx, eax, 0
  00a81	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a87	52		 push	 edx
  00a88	51		 push	 ecx
  00a89	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00a91	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a96	51		 push	 ecx
  00a97	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00a9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa4	51		 push	 ecx
  00aa5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00aad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ab2	51		 push	 ecx
  00ab3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00abb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN21@draw_air_r:

; 2774 : 	}
; 2775 : }

  00ac5	5f		 pop	 edi
  00ac6	5e		 pop	 esi
  00ac7	5b		 pop	 ebx
  00ac8	8b e5		 mov	 esp, ebp
  00aca	5d		 pop	 ebp
  00acb	c3		 ret	 0
?draw_air_radar_mfd@@YGXXZ ENDP				; draw_air_radar_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_ground_radar_mfd@@YGXXZ
_TEXT	SEGMENT
tv706 = -116						; size = 4
tv516 = -112						; size = 4
tv495 = -112						; size = 4
tv463 = -112						; size = 4
tv344 = -112						; size = 4
tv317 = -112						; size = 4
tv296 = -112						; size = 4
tv215 = -112						; size = 4
tv191 = -112						; size = 4
tv172 = -112						; size = 4
tv130 = -112						; size = 4
tv78 = -112						; size = 4
tv508 = -108						; size = 4
tv487 = -108						; size = 4
tv455 = -108						; size = 4
tv336 = -108						; size = 4
tv309 = -108						; size = 4
tv288 = -108						; size = 4
tv239 = -108						; size = 4
tv207 = -108						; size = 4
tv184 = -108						; size = 4
tv164 = -108						; size = 4
tv90 = -108						; size = 4
tv70 = -108						; size = 4
_target_position$ = -40					; size = 4
_source_position$ = -36					; size = 4
_target$ = -32						; size = 4
_source$ = -28						; size = 4
_target_range$ = -24					; size = 4
_scale$ = -20						; size = 4
_source_heading$ = -16					; size = 4
_v$ = -12						; size = 4
_u$ = -8						; size = 4
_y_adjust$ = -4						; size = 4
?draw_ground_radar_mfd@@YGXXZ PROC			; draw_ground_radar_mfd, COMDAT

; 2239 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2240 : 	float
; 2241 : 		y_adjust,
; 2242 : 		u,
; 2243 : 		v,
; 2244 : 		source_heading,
; 2245 : 		scale,
; 2246 : 		target_range;
; 2247 : 
; 2248 : 	entity
; 2249 : 		*source,
; 2250 : 		*target;
; 2251 : 
; 2252 : 	vec3d
; 2253 : 		*source_position,
; 2254 : 		*target_position;
; 2255 : 
; 2256 : 	source = get_gunship_entity ();

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0000e	89 45 e4	 mov	 DWORD PTR _source$[ebp], eax

; 2257 : 
; 2258 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  00011	83 7d e4 00	 cmp	 DWORD PTR _source$[ebp], 0
  00015	74 0a		 je	 SHORT $LN34@draw_groun
  00017	8b 45 e4	 mov	 eax, DWORD PTR _source$[ebp]
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 4d 94	 mov	 DWORD PTR tv70[ebp], ecx
  0001f	eb 21		 jmp	 SHORT $LN35@draw_groun
$LN34@draw_groun:
  00021	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00027	83 c2 13	 add	 edx, 19			; 00000013H
  0002a	52		 push	 edx
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003b	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN35@draw_groun:
  00042	b9 01 00 00 00	 mov	 ecx, 1
  00047	85 c9		 test	 ecx, ecx
  00049	74 09		 je	 SHORT $LN36@draw_groun
  0004b	c7 45 90 08 00
	00 00		 mov	 DWORD PTR tv78[ebp], 8
  00052	eb 21		 jmp	 SHORT $LN37@draw_groun
$LN36@draw_groun:
  00054	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  0005a	83 c2 13	 add	 edx, 19			; 00000013H
  0005d	52		 push	 edx
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006e	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN37@draw_groun:
  00075	6a 08		 push	 8
  00077	8b 4d e4	 mov	 ecx, DWORD PTR _source$[ebp]
  0007a	51		 push	 ecx
  0007b	6b 55 94 60	 imul	 edx, DWORD PTR tv70[ebp], 96
  0007f	8b 45 90	 mov	 eax, DWORD PTR tv78[ebp]
  00082	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00089	ff d1		 call	 ecx
  0008b	89 45 dc	 mov	 DWORD PTR _source_position$[ebp], eax

; 2259 : 
; 2260 : 	source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  0008e	83 7d e4 00	 cmp	 DWORD PTR _source$[ebp], 0
  00092	74 0a		 je	 SHORT $LN38@draw_groun
  00094	8b 45 e4	 mov	 eax, DWORD PTR _source$[ebp]
  00097	8b 08		 mov	 ecx, DWORD PTR [eax]
  00099	89 4d 94	 mov	 DWORD PTR tv90[ebp], ecx
  0009c	eb 21		 jmp	 SHORT $LN39@draw_groun
$LN38@draw_groun:
  0009e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  000a4	83 c2 15	 add	 edx, 21			; 00000015H
  000a7	52		 push	 edx
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b8	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN39@draw_groun:
  000bf	b9 01 00 00 00	 mov	 ecx, 1
  000c4	85 c9		 test	 ecx, ecx
  000c6	74 09		 je	 SHORT $LN40@draw_groun
  000c8	c7 45 90 34 00
	00 00		 mov	 DWORD PTR tv130[ebp], 52 ; 00000034H
  000cf	eb 21		 jmp	 SHORT $LN41@draw_groun
$LN40@draw_groun:
  000d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  000d7	83 c2 15	 add	 edx, 21			; 00000015H
  000da	52		 push	 edx
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000eb	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN41@draw_groun:
  000f2	6a 34		 push	 52			; 00000034H
  000f4	8b 4d e4	 mov	 ecx, DWORD PTR _source$[ebp]
  000f7	51		 push	 ecx
  000f8	69 55 94 bc 02
	00 00		 imul	 edx, DWORD PTR tv90[ebp], 700
  000ff	8b 45 90	 mov	 eax, DWORD PTR tv130[ebp]
  00102	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00109	ff d1		 call	 ecx
  0010b	d9 5d f0	 fstp	 DWORD PTR _source_heading$[ebp]

; 2261 : 
; 2262 : 	scale = RADIUS / ground_radar.scan_range;

  0010e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A
  00116	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff5d3d193333333
  0011e	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00122	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00126	f3 0f 11 45 ec	 movss	 DWORD PTR _scale$[ebp], xmm0

; 2263 : 
; 2264 : 	if (draw_large_mfd)

  0012b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00132	74 26		 je	 SHORT $LN8@draw_groun

; 2265 : 	{
; 2266 : 		get_2d_float_screen_coordinates (0.0, -0.6, &u, &v);

  00134	8d 45 f4	 lea	 eax, DWORD PTR _v$[ebp]
  00137	50		 push	 eax
  00138	8d 4d f8	 lea	 ecx, DWORD PTR _u$[ebp]
  0013b	51		 push	 ecx
  0013c	51		 push	 ecx
  0013d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00145	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014a	51		 push	 ecx
  0014b	0f 57 c0	 xorps	 xmm0, xmm0
  0014e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00153	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 2267 : 	}
; 2268 : 	else

  00158	eb 24		 jmp	 SHORT $LN9@draw_groun
$LN8@draw_groun:

; 2269 : 	{
; 2270 : 		get_2d_float_screen_coordinates (0.0, -0.675, &u, &v);

  0015a	8d 45 f4	 lea	 eax, DWORD PTR _v$[ebp]
  0015d	50		 push	 eax
  0015e	8d 4d f8	 lea	 ecx, DWORD PTR _u$[ebp]
  00161	51		 push	 ecx
  00162	51		 push	 ecx
  00163	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2ccccd
  0016b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00170	51		 push	 ecx
  00171	0f 57 c0	 xorps	 xmm0, xmm0
  00174	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00179	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates
$LN9@draw_groun:

; 2271 : 	}
; 2272 : 
; 2273 : 	u -= mfd_viewport_x_min;

  0017e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _u$[ebp]
  00183	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0018b	f3 0f 11 45 f8	 movss	 DWORD PTR _u$[ebp], xmm0

; 2274 : 	v -= mfd_viewport_y_min;

  00190	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v$[ebp]
  00195	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0019d	f3 0f 11 45 f4	 movss	 DWORD PTR _v$[ebp], xmm0

; 2275 : 
; 2276 : 	////////////////////////////////////////
; 2277 : 	//
; 2278 : 	// draw radar clutter
; 2279 : 	//
; 2280 : 	////////////////////////////////////////
; 2281 : 
; 2282 : 	if (!comanche_damage.radar)

  001a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  001a7	83 e0 01	 and	 eax, 1
  001aa	0f 85 38 02 00
	00		 jne	 $LN10@draw_groun

; 2283 : 	{
; 2284 : 		set_hatched_pattern (radar_clutter_hatch_pattern);

  001b0	68 00 00 00 00	 push	 OFFSET ?radar_clutter_hatch_pattern@@3PAIA ; radar_clutter_hatch_pattern
  001b5	e8 00 00 00 00	 call	 ?set_hatched_pattern@@YGXPAI@Z ; set_hatched_pattern

; 2285 : 
; 2286 : 		set_2d_viewport_origin (mfd_env, u, v);

  001ba	51		 push	 ecx
  001bb	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v$[ebp]
  001c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c5	51		 push	 ecx
  001c6	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _u$[ebp]
  001cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001d5	50		 push	 eax
  001d6	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 2287 : 
; 2288 : 		set_2d_window_rotation (mfd_env, source_heading);

  001db	51		 push	 ecx
  001dc	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  001e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001eb	50		 push	 eax
  001ec	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2289 : 
; 2290 : 		target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  001f1	83 7d e4 00	 cmp	 DWORD PTR _source$[ebp], 0
  001f5	74 0a		 je	 SHORT $LN42@draw_groun
  001f7	8b 45 e4	 mov	 eax, DWORD PTR _source$[ebp]
  001fa	8b 08		 mov	 ecx, DWORD PTR [eax]
  001fc	89 4d 94	 mov	 DWORD PTR tv164[ebp], ecx
  001ff	eb 21		 jmp	 SHORT $LN43@draw_groun
$LN42@draw_groun:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00207	83 c2 33	 add	 edx, 51			; 00000033H
  0020a	52		 push	 edx
  0020b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00210	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00215	50		 push	 eax
  00216	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0021b	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv164[ebp], 0
$LN43@draw_groun:
  00222	b9 01 00 00 00	 mov	 ecx, 1
  00227	85 c9		 test	 ecx, ecx
  00229	74 09		 je	 SHORT $LN44@draw_groun
  0022b	c7 45 90 12 00
	00 00		 mov	 DWORD PTR tv172[ebp], 18 ; 00000012H
  00232	eb 21		 jmp	 SHORT $LN45@draw_groun
$LN44@draw_groun:
  00234	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  0023a	83 c2 33	 add	 edx, 51			; 00000033H
  0023d	52		 push	 edx
  0023e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00243	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00248	50		 push	 eax
  00249	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0024e	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv172[ebp], 0
$LN45@draw_groun:
  00255	6a 12		 push	 18			; 00000012H
  00257	8b 4d e4	 mov	 ecx, DWORD PTR _source$[ebp]
  0025a	51		 push	 ecx
  0025b	69 55 94 b4 00
	00 00		 imul	 edx, DWORD PTR tv164[ebp], 180
  00262	8b 45 90	 mov	 eax, DWORD PTR tv172[ebp]
  00265	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0026c	ff d1		 call	 ecx
  0026e	89 45 e0	 mov	 DWORD PTR _target$[ebp], eax
$LN2@draw_groun:

; 2291 : 
; 2292 : 		while (target)

  00271	83 7d e0 00	 cmp	 DWORD PTR _target$[ebp], 0
  00275	0f 84 16 01 00
	00		 je	 $LN3@draw_groun

; 2293 : 		{
; 2294 : 			if (get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  0027b	83 7d e0 00	 cmp	 DWORD PTR _target$[ebp], 0
  0027f	74 0a		 je	 SHORT $LN46@draw_groun
  00281	8b 45 e0	 mov	 eax, DWORD PTR _target$[ebp]
  00284	8b 08		 mov	 ecx, DWORD PTR [eax]
  00286	89 4d 94	 mov	 DWORD PTR tv184[ebp], ecx
  00289	eb 1d		 jmp	 SHORT $LN47@draw_groun
$LN46@draw_groun:
  0028b	68 f6 08 00 00	 push	 2294			; 000008f6H
  00290	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00295	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0029b	52		 push	 edx
  0029c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002a1	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv184[ebp], 0
$LN47@draw_groun:
  002a8	b8 01 00 00 00	 mov	 eax, 1
  002ad	85 c0		 test	 eax, eax
  002af	74 09		 je	 SHORT $LN48@draw_groun
  002b1	c7 45 90 42 00
	00 00		 mov	 DWORD PTR tv191[ebp], 66 ; 00000042H
  002b8	eb 1d		 jmp	 SHORT $LN49@draw_groun
$LN48@draw_groun:
  002ba	68 f6 08 00 00	 push	 2294			; 000008f6H
  002bf	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  002c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  002ca	51		 push	 ecx
  002cb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002d0	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv191[ebp], 0
$LN49@draw_groun:
  002d7	6a 42		 push	 66			; 00000042H
  002d9	8b 55 e0	 mov	 edx, DWORD PTR _target$[ebp]
  002dc	52		 push	 edx
  002dd	69 45 94 5c 04
	00 00		 imul	 eax, DWORD PTR tv184[ebp], 1116
  002e4	8b 4d 90	 mov	 ecx, DWORD PTR tv191[ebp]
  002e7	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  002ee	ff d2		 call	 edx
  002f0	85 c0		 test	 eax, eax
  002f2	74 18		 je	 SHORT $LN11@draw_groun

; 2295 : 			{
; 2296 : 				draw_ground_radar_clutter (target, source_position, scale);

  002f4	51		 push	 ecx
  002f5	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _scale$[ebp]
  002fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ff	8b 45 dc	 mov	 eax, DWORD PTR _source_position$[ebp]
  00302	50		 push	 eax
  00303	8b 4d e0	 mov	 ecx, DWORD PTR _target$[ebp]
  00306	51		 push	 ecx
  00307	e8 00 00 00 00	 call	 ?draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z ; draw_ground_radar_clutter
$LN11@draw_groun:

; 2297 : 			}
; 2298 : 
; 2299 : 			target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  0030c	83 7d e0 00	 cmp	 DWORD PTR _target$[ebp], 0
  00310	74 0a		 je	 SHORT $LN50@draw_groun
  00312	8b 45 e0	 mov	 eax, DWORD PTR _target$[ebp]
  00315	8b 08		 mov	 ecx, DWORD PTR [eax]
  00317	89 4d 94	 mov	 DWORD PTR tv207[ebp], ecx
  0031a	eb 21		 jmp	 SHORT $LN51@draw_groun
$LN50@draw_groun:
  0031c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00322	83 c2 3c	 add	 edx, 60			; 0000003cH
  00325	52		 push	 edx
  00326	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0032b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00330	50		 push	 eax
  00331	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00336	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv207[ebp], 0
$LN51@draw_groun:
  0033d	b9 01 00 00 00	 mov	 ecx, 1
  00342	85 c9		 test	 ecx, ecx
  00344	74 09		 je	 SHORT $LN52@draw_groun
  00346	c7 45 90 12 00
	00 00		 mov	 DWORD PTR tv215[ebp], 18 ; 00000012H
  0034d	eb 21		 jmp	 SHORT $LN53@draw_groun
$LN52@draw_groun:
  0034f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00355	83 c2 3c	 add	 edx, 60			; 0000003cH
  00358	52		 push	 edx
  00359	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0035e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00363	50		 push	 eax
  00364	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00369	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv215[ebp], 0
$LN53@draw_groun:
  00370	6a 12		 push	 18			; 00000012H
  00372	8b 4d e0	 mov	 ecx, DWORD PTR _target$[ebp]
  00375	51		 push	 ecx
  00376	69 55 94 b4 00
	00 00		 imul	 edx, DWORD PTR tv207[ebp], 180
  0037d	8b 45 90	 mov	 eax, DWORD PTR tv215[ebp]
  00380	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00387	ff d1		 call	 ecx
  00389	89 45 e0	 mov	 DWORD PTR _target$[ebp], eax

; 2300 : 		}

  0038c	e9 e0 fe ff ff	 jmp	 $LN2@draw_groun
$LN3@draw_groun:

; 2301 : 
; 2302 : 		set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00391	51		 push	 ecx
  00392	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0039a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039f	51		 push	 ecx
  003a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  003a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ad	51		 push	 ecx
  003ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  003b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bb	51		 push	 ecx
  003bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  003c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  003ce	50		 push	 eax
  003cf	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 2303 : 
; 2304 : 		set_2d_window_rotation (mfd_env, 0.0);

  003d4	51		 push	 ecx
  003d5	0f 57 c0	 xorps	 xmm0, xmm0
  003d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  003e2	50		 push	 eax
  003e3	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN10@draw_groun:

; 2305 : 	}
; 2306 : 
; 2307 : 	////////////////////////////////////////
; 2308 : 	//
; 2309 : 	// text
; 2310 : 	//
; 2311 : 	////////////////////////////////////////
; 2312 : 
; 2313 : 	set_mono_font_colour (MFD_COLOUR1);

  003e8	b8 04 00 00 00	 mov	 eax, 4
  003ed	6b c8 00	 imul	 ecx, eax, 0
  003f0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003f6	52		 push	 edx
  003f7	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 2314 : 
; 2315 : 	if (draw_large_mfd)

  003fc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00403	74 09		 je	 SHORT $LN12@draw_groun

; 2316 : 	{
; 2317 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  00405	6a 05		 push	 5
  00407	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 2318 : 	}
; 2319 : 	else

  0040c	eb 07		 jmp	 SHORT $LN13@draw_groun
$LN12@draw_groun:

; 2320 : 	{
; 2321 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  0040e	6a 01		 push	 1
  00410	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN13@draw_groun:

; 2322 : 	}
; 2323 : 
; 2324 : 	//
; 2325 : 	// declutter status
; 2326 : 	//
; 2327 : 
; 2328 : 	if (draw_large_mfd)

  00415	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0041c	74 0f		 je	 SHORT $LN14@draw_groun

; 2329 : 	{
; 2330 : 		y_adjust = 5.0;

  0041e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  00426	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2331 : 	}
; 2332 : 	else

  0042b	eb 0d		 jmp	 SHORT $LN15@draw_groun
$LN14@draw_groun:

; 2333 : 	{
; 2334 : 		y_adjust = 2.0;

  0042d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00435	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN15@draw_groun:

; 2335 : 	}
; 2336 : 
; 2337 : 	set_2d_mono_font_position (-1.0, 1.0);

  0043a	51		 push	 ecx
  0043b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00443	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00448	51		 push	 ecx
  00449	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00451	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00456	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2338 : 
; 2339 : 	set_mono_font_rel_position (1.0, y_adjust);

  0045b	51		 push	 ecx
  0045c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00461	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00466	51		 push	 ecx
  00467	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0046f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00474	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2340 : 
; 2341 : 	switch (ground_radar.target_priority_type)

  00479	a1 2c 00 00 00	 mov	 eax, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+44
  0047e	89 45 94	 mov	 DWORD PTR tv239[ebp], eax
  00481	83 7d 94 04	 cmp	 DWORD PTR tv239[ebp], 4
  00485	77 59		 ja	 SHORT $LN4@draw_groun
  00487	8b 4d 94	 mov	 ecx, DWORD PTR tv239[ebp]
  0048a	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN78@draw_groun[ecx*4]
$LN16@draw_groun:

; 2342 : 	{
; 2343 : 		case TARGET_PRIORITY_UNKNOWN:
; 2344 : 		{
; 2345 : 			print_mono_font_string ("ALL");

  00491	68 00 00 00 00	 push	 OFFSET ??_C@_03NIFPGLBG@ALL@
  00496	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2346 : 
; 2347 : 			break;

  0049b	eb 43		 jmp	 SHORT $LN4@draw_groun
$LN17@draw_groun:

; 2348 : 		}
; 2349 : 		case TARGET_PRIORITY_LOW:
; 2350 : 		{
; 2351 : 			print_mono_font_string ("LOW");

  0049d	68 00 00 00 00	 push	 OFFSET ??_C@_03IBEFMGAI@LOW@
  004a2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2352 : 
; 2353 : 			break;

  004a7	eb 37		 jmp	 SHORT $LN4@draw_groun
$LN18@draw_groun:

; 2354 : 		}
; 2355 : 		case TARGET_PRIORITY_MEDIUM:
; 2356 : 		{
; 2357 : 			if (draw_large_mfd)

  004a9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  004b0	74 0c		 je	 SHORT $LN19@draw_groun

; 2358 : 			{
; 2359 : 				print_mono_font_string ("MEDIUM");

  004b2	68 00 00 00 00	 push	 OFFSET ??_C@_06HMBFJLMK@MEDIUM@
  004b7	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2360 : 			}
; 2361 : 			else

  004bc	eb 0a		 jmp	 SHORT $LN20@draw_groun
$LN19@draw_groun:

; 2362 : 			{
; 2363 : 				print_mono_font_string ("MED");

  004be	68 00 00 00 00	 push	 OFFSET ??_C@_03FFIBGFCJ@MED@
  004c3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN20@draw_groun:

; 2364 : 			}
; 2365 : 
; 2366 : 			break;

  004c8	eb 16		 jmp	 SHORT $LN4@draw_groun
$LN21@draw_groun:

; 2367 : 		}
; 2368 : 		case TARGET_PRIORITY_HIGH:
; 2369 : 		{
; 2370 : 			print_mono_font_string ("HIGH");

  004ca	68 00 00 00 00	 push	 OFFSET ??_C@_04PKDHFCJF@HIGH@
  004cf	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2371 : 
; 2372 : 			break;

  004d4	eb 0a		 jmp	 SHORT $LN4@draw_groun
$LN22@draw_groun:

; 2373 : 		}
; 2374 : 		// Jabberwock 031107 Designated targets
; 2375 : 		case TARGET_PRIORITY_DESIGNATED:
; 2376 : 		{
; 2377 : 			print_mono_font_string ("MARK");

  004d6	68 00 00 00 00	 push	 OFFSET ??_C@_04MGKDMHFC@MARK@
  004db	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN4@draw_groun:

; 2378 : 
; 2379 : 			break;
; 2380 : 		}
; 2381 : 		// Jabberwock 031107 ends
; 2382 : 	}
; 2383 : 
; 2384 : 	//
; 2385 : 	// scan range
; 2386 : 	//
; 2387 : 
; 2388 : 	display_radar_scan_range (ground_radar.scan_range);

  004e0	51		 push	 ecx
  004e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A
  004e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ee	e8 00 00 00 00	 call	 ?display_radar_scan_range@@YGXM@Z ; display_radar_scan_range

; 2389 : 
; 2390 : 	//
; 2391 : 	// target details
; 2392 : 	//
; 2393 : 
; 2394 : //	if (ground_radar_is_active())
; 2395 : 	if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_GROUND_RADAR)

  004f3	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 1 ; target_acquisition_system
  004fa	0f 85 46 01 00
	00		 jne	 $LN23@draw_groun

; 2396 : 	{
; 2397 : 		target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  00500	83 7d e4 00	 cmp	 DWORD PTR _source$[ebp], 0
  00504	74 0a		 je	 SHORT $LN54@draw_groun
  00506	8b 45 e4	 mov	 eax, DWORD PTR _source$[ebp]
  00509	8b 08		 mov	 ecx, DWORD PTR [eax]
  0050b	89 4d 94	 mov	 DWORD PTR tv288[ebp], ecx
  0050e	eb 24		 jmp	 SHORT $LN55@draw_groun
$LN54@draw_groun:
  00510	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00516	81 c2 9e 00 00
	00		 add	 edx, 158		; 0000009eH
  0051c	52		 push	 edx
  0051d	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00522	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00527	50		 push	 eax
  00528	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0052d	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv288[ebp], 0
$LN55@draw_groun:
  00534	b9 01 00 00 00	 mov	 ecx, 1
  00539	85 c9		 test	 ecx, ecx
  0053b	74 09		 je	 SHORT $LN56@draw_groun
  0053d	c7 45 90 26 00
	00 00		 mov	 DWORD PTR tv296[ebp], 38 ; 00000026H
  00544	eb 24		 jmp	 SHORT $LN57@draw_groun
$LN56@draw_groun:
  00546	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  0054c	81 c2 9e 00 00
	00		 add	 edx, 158		; 0000009eH
  00552	52		 push	 edx
  00553	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00558	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0055d	50		 push	 eax
  0055e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00563	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv296[ebp], 0
$LN57@draw_groun:
  0056a	6a 26		 push	 38			; 00000026H
  0056c	8b 4d e4	 mov	 ecx, DWORD PTR _source$[ebp]
  0056f	51		 push	 ecx
  00570	69 55 94 b4 00
	00 00		 imul	 edx, DWORD PTR tv288[ebp], 180
  00577	8b 45 90	 mov	 eax, DWORD PTR tv296[ebp]
  0057a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00581	ff d1		 call	 ecx
  00583	89 45 e0	 mov	 DWORD PTR _target$[ebp], eax

; 2398 : 
; 2399 : 		if (target)

  00586	83 7d e0 00	 cmp	 DWORD PTR _target$[ebp], 0
  0058a	0f 84 95 00 00
	00		 je	 $LN24@draw_groun

; 2400 : 		{
; 2401 : 			target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00590	83 7d e0 00	 cmp	 DWORD PTR _target$[ebp], 0
  00594	74 0a		 je	 SHORT $LN58@draw_groun
  00596	8b 45 e0	 mov	 eax, DWORD PTR _target$[ebp]
  00599	8b 08		 mov	 ecx, DWORD PTR [eax]
  0059b	89 4d 94	 mov	 DWORD PTR tv309[ebp], ecx
  0059e	eb 24		 jmp	 SHORT $LN59@draw_groun
$LN58@draw_groun:
  005a0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  005a6	81 c2 a2 00 00
	00		 add	 edx, 162		; 000000a2H
  005ac	52		 push	 edx
  005ad	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  005b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  005b7	50		 push	 eax
  005b8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005bd	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv309[ebp], 0
$LN59@draw_groun:
  005c4	b9 01 00 00 00	 mov	 ecx, 1
  005c9	85 c9		 test	 ecx, ecx
  005cb	74 09		 je	 SHORT $LN60@draw_groun
  005cd	c7 45 90 08 00
	00 00		 mov	 DWORD PTR tv317[ebp], 8
  005d4	eb 24		 jmp	 SHORT $LN61@draw_groun
$LN60@draw_groun:
  005d6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  005dc	81 c2 a2 00 00
	00		 add	 edx, 162		; 000000a2H
  005e2	52		 push	 edx
  005e3	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  005e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  005ed	50		 push	 eax
  005ee	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005f3	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv317[ebp], 0
$LN61@draw_groun:
  005fa	6a 08		 push	 8
  005fc	8b 4d e0	 mov	 ecx, DWORD PTR _target$[ebp]
  005ff	51		 push	 ecx
  00600	6b 55 94 60	 imul	 edx, DWORD PTR tv309[ebp], 96
  00604	8b 45 90	 mov	 eax, DWORD PTR tv317[ebp]
  00607	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0060e	ff d1		 call	 ecx
  00610	89 45 d8	 mov	 DWORD PTR _target_position$[ebp], eax

; 2402 : 
; 2403 : 			target_range = get_3d_range (source_position, target_position);

  00613	8b 45 d8	 mov	 eax, DWORD PTR _target_position$[ebp]
  00616	50		 push	 eax
  00617	8b 4d dc	 mov	 ecx, DWORD PTR _source_position$[ebp]
  0061a	51		 push	 ecx
  0061b	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  00620	d9 5d e8	 fstp	 DWORD PTR _target_range$[ebp]

; 2404 : 		}
; 2405 : 		else

  00623	eb 08		 jmp	 SHORT $LN25@draw_groun
$LN24@draw_groun:

; 2406 : 		{
; 2407 : 			target_range = 0.0;

  00625	0f 57 c0	 xorps	 xmm0, xmm0
  00628	f3 0f 11 45 e8	 movss	 DWORD PTR _target_range$[ebp], xmm0
$LN25@draw_groun:

; 2408 : 		}
; 2409 : 
; 2410 : 		display_radar_target_details (target, target_range, &ground_radar);

  0062d	68 00 00 00 00	 push	 OFFSET ?ground_radar@@3URADAR_PARAMS@@A ; ground_radar
  00632	51		 push	 ecx
  00633	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _target_range$[ebp]
  00638	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063d	8b 45 e0	 mov	 eax, DWORD PTR _target$[ebp]
  00640	50		 push	 eax
  00641	e8 00 00 00 00	 call	 ?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z ; display_radar_target_details
$LN23@draw_groun:

; 2411 : 	}
; 2412 : 
; 2413 : 	////////////////////////////////////////
; 2414 : 	//
; 2415 : 	// draw heading scale
; 2416 : 	//
; 2417 : 	////////////////////////////////////////
; 2418 : 
; 2419 : 	draw_heading_scale (get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_HEADING), FALSE);

  00646	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0064d	74 0c		 je	 SHORT $LN62@draw_groun
  0064f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00654	8b 08		 mov	 ecx, DWORD PTR [eax]
  00656	89 4d 94	 mov	 DWORD PTR tv336[ebp], ecx
  00659	eb 24		 jmp	 SHORT $LN63@draw_groun
$LN62@draw_groun:
  0065b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00661	81 c2 b4 00 00
	00		 add	 edx, 180		; 000000b4H
  00667	52		 push	 edx
  00668	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0066d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00672	50		 push	 eax
  00673	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00678	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv336[ebp], 0
$LN63@draw_groun:
  0067f	b9 01 00 00 00	 mov	 ecx, 1
  00684	85 c9		 test	 ecx, ecx
  00686	74 09		 je	 SHORT $LN64@draw_groun
  00688	c7 45 90 34 00
	00 00		 mov	 DWORD PTR tv344[ebp], 52 ; 00000034H
  0068f	eb 24		 jmp	 SHORT $LN65@draw_groun
$LN64@draw_groun:
  00691	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00697	81 c2 b4 00 00
	00		 add	 edx, 180		; 000000b4H
  0069d	52		 push	 edx
  0069e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  006a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  006a8	50		 push	 eax
  006a9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006ae	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv344[ebp], 0
$LN65@draw_groun:
  006b5	6a 00		 push	 0
  006b7	6a 34		 push	 52			; 00000034H
  006b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  006bf	51		 push	 ecx
  006c0	69 55 94 bc 02
	00 00		 imul	 edx, DWORD PTR tv336[ebp], 700
  006c7	8b 45 90	 mov	 eax, DWORD PTR tv344[ebp]
  006ca	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  006d1	ff d1		 call	 ecx
  006d3	d9 5d 8c	 fstp	 DWORD PTR tv706[ebp]
  006d6	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR tv706[ebp]
  006db	51		 push	 ecx
  006dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006e1	e8 00 00 00 00	 call	 ?draw_heading_scale@@YGXMH@Z ; draw_heading_scale

; 2420 : 
; 2421 : 	////////////////////////////////////////
; 2422 : 	//
; 2423 : 	// draw field of regard and view boxes
; 2424 : 	//
; 2425 : 	////////////////////////////////////////
; 2426 : 
; 2427 : 	draw_field_of_regard_and_view_boxes ();

  006e6	e8 00 00 00 00	 call	 ?draw_field_of_regard_and_view_boxes@@YGXXZ ; draw_field_of_regard_and_view_boxes

; 2428 : 
; 2429 : 	////////////////////////////////////////
; 2430 : 	//
; 2431 : 	// line graphics
; 2432 : 	//
; 2433 : 	////////////////////////////////////////
; 2434 : 
; 2435 : 	set_2d_viewport_origin (mfd_env, u, v);

  006eb	51		 push	 ecx
  006ec	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v$[ebp]
  006f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f6	51		 push	 ecx
  006f7	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _u$[ebp]
  006fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00701	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00706	50		 push	 eax
  00707	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 2436 : 
; 2437 : 	//
; 2438 : 	// max scan limits
; 2439 : 	//
; 2440 : 
; 2441 : 	draw_2d_line (0.0, 0.0, -0.965, 0.965, MFD_COLOUR4);

  0070c	b8 04 00 00 00	 mov	 eax, 4
  00711	6b c8 03	 imul	 ecx, eax, 3
  00714	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0071a	52		 push	 edx
  0071b	51		 push	 ecx
  0071c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f770a3d
  00724	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00729	51		 push	 ecx
  0072a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf770a3d
  00732	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00737	51		 push	 ecx
  00738	0f 57 c0	 xorps	 xmm0, xmm0
  0073b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00740	51		 push	 ecx
  00741	0f 57 c0	 xorps	 xmm0, xmm0
  00744	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00749	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2442 : 
; 2443 : 	draw_2d_line (0.0, 0.0, 0.965, 0.965, MFD_COLOUR4);

  0074e	b8 04 00 00 00	 mov	 eax, 4
  00753	6b c8 03	 imul	 ecx, eax, 3
  00756	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0075c	52		 push	 edx
  0075d	51		 push	 ecx
  0075e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f770a3d
  00766	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0076b	51		 push	 ecx
  0076c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f770a3d
  00774	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00779	51		 push	 ecx
  0077a	0f 57 c0	 xorps	 xmm0, xmm0
  0077d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00782	51		 push	 ecx
  00783	0f 57 c0	 xorps	 xmm0, xmm0
  00786	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2444 : 
; 2445 : 	draw_radar_arc (COMANCHE_RADAR_SCAN_ARC_SIZE_90, RADIUS, MFD_COLOUR4);

  00790	b8 04 00 00 00	 mov	 eax, 4
  00795	6b c8 03	 imul	 ecx, eax, 3
  00798	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0079e	52		 push	 edx
  0079f	51		 push	 ecx
  007a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fae9e8d
  007a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ad	51		 push	 ecx
  007ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  007b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007bb	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 2446 : 
; 2447 : 	//
; 2448 : 	// scan limits and range markers
; 2449 : 	//
; 2450 : 
; 2451 : 	set_2d_window_rotation (mfd_env, -ground_radar.scan_datum);

  007c0	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  007c8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  007cf	51		 push	 ecx
  007d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  007da	50		 push	 eax
  007db	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2452 : 
; 2453 : 	draw_radar_arc (ground_radar.scan_arc_size, RADIUS, MFD_COLOUR1);

  007e0	b8 04 00 00 00	 mov	 eax, 4
  007e5	6b c8 00	 imul	 ecx, eax, 0
  007e8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007ee	52		 push	 edx
  007ef	51		 push	 ecx
  007f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fae9e8d
  007f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007fd	51		 push	 ecx
  007fe	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  00806	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0080b	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 2454 : 
; 2455 : 	draw_radar_arc (ground_radar.scan_arc_size, RADIUS * 0.25, MFD_COLOUR4);

  00810	b8 04 00 00 00	 mov	 eax, 4
  00815	6b c8 03	 imul	 ecx, eax, 3
  00818	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0081e	52		 push	 edx
  0081f	51		 push	 ecx
  00820	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eae9e8d
  00828	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0082d	51		 push	 ecx
  0082e	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  00836	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0083b	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 2456 : 	draw_radar_arc (ground_radar.scan_arc_size, RADIUS * 0.50, MFD_COLOUR4);

  00840	b8 04 00 00 00	 mov	 eax, 4
  00845	6b c8 03	 imul	 ecx, eax, 3
  00848	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0084e	52		 push	 edx
  0084f	51		 push	 ecx
  00850	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f2e9e8d
  00858	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0085d	51		 push	 ecx
  0085e	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  00866	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0086b	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 2457 : 	draw_radar_arc (ground_radar.scan_arc_size, RADIUS * 0.75, MFD_COLOUR4);

  00870	b8 04 00 00 00	 mov	 eax, 4
  00875	6b c8 03	 imul	 ecx, eax, 3
  00878	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0087e	52		 push	 edx
  0087f	51		 push	 ecx
  00880	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f82f6e9
  00888	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0088d	51		 push	 ecx
  0088e	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  00896	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0089b	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 2458 : 
; 2459 : 	set_2d_window_rotation (mfd_env, -(ground_radar.scan_datum - (ground_radar.scan_arc_size * 0.5)));

  008a0	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  008a8	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  008b0	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  008b8	f2 0f 5c c1	 subsd	 xmm0, xmm1
  008bc	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  008c3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  008c7	51		 push	 ecx
  008c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  008d2	50		 push	 eax
  008d3	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2460 : 
; 2461 : 	draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  008d8	b8 04 00 00 00	 mov	 eax, 4
  008dd	6b c8 00	 imul	 ecx, eax, 0
  008e0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008e6	52		 push	 edx
  008e7	51		 push	 ecx
  008e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fae9e8d
  008f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f5	51		 push	 ecx
  008f6	0f 57 c0	 xorps	 xmm0, xmm0
  008f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008fe	51		 push	 ecx
  008ff	0f 57 c0	 xorps	 xmm0, xmm0
  00902	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00907	51		 push	 ecx
  00908	0f 57 c0	 xorps	 xmm0, xmm0
  0090b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00910	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2462 : 
; 2463 : 	set_2d_window_rotation (mfd_env, -(ground_radar.scan_datum + (ground_radar.scan_arc_size * 0.5)));

  00915	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  0091d	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  00925	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0092d	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00931	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00938	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0093c	51		 push	 ecx
  0093d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00942	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00947	50		 push	 eax
  00948	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2464 : 
; 2465 : 	draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  0094d	b8 04 00 00 00	 mov	 eax, 4
  00952	6b c8 00	 imul	 ecx, eax, 0
  00955	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0095b	52		 push	 edx
  0095c	51		 push	 ecx
  0095d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fae9e8d
  00965	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0096a	51		 push	 ecx
  0096b	0f 57 c0	 xorps	 xmm0, xmm0
  0096e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00973	51		 push	 ecx
  00974	0f 57 c0	 xorps	 xmm0, xmm0
  00977	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0097c	51		 push	 ecx
  0097d	0f 57 c0	 xorps	 xmm0, xmm0
  00980	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00985	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2466 : 
; 2467 : 	//
; 2468 : 	// sweep
; 2469 : 	//
; 2470 : 
; 2471 : //	if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_GROUND_RADAR)
; 2472 : 	if (ground_radar_is_active())

  0098a	e8 00 00 00 00	 call	 ?ground_radar_is_active@@YGHXZ ; ground_radar_is_active
  0098f	85 c0		 test	 eax, eax
  00991	74 65		 je	 SHORT $LN26@draw_groun

; 2473 : 	{
; 2474 : 		set_2d_window_rotation (mfd_env, -(ground_radar.scan_datum + ground_radar.sweep_offset));

  00993	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  0099b	f3 0f 58 05 0c
	00 00 00	 addss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+12
  009a3	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  009aa	51		 push	 ecx
  009ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  009b5	50		 push	 eax
  009b6	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2475 : 
; 2476 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  009bb	b8 04 00 00 00	 mov	 eax, 4
  009c0	6b c8 00	 imul	 ecx, eax, 0
  009c3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009c9	52		 push	 edx
  009ca	51		 push	 ecx
  009cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fae9e8d
  009d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009d8	51		 push	 ecx
  009d9	0f 57 c0	 xorps	 xmm0, xmm0
  009dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009e1	51		 push	 ecx
  009e2	0f 57 c0	 xorps	 xmm0, xmm0
  009e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ea	51		 push	 ecx
  009eb	0f 57 c0	 xorps	 xmm0, xmm0
  009ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009f3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN26@draw_groun:

; 2477 : 	}
; 2478 : 
; 2479 : 	set_2d_window_rotation (mfd_env, 0.0);

  009f8	51		 push	 ecx
  009f9	0f 57 c0	 xorps	 xmm0, xmm0
  009fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a01	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a06	50		 push	 eax
  00a07	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2480 : 
; 2481 : 	////////////////////////////////////////
; 2482 : 	//
; 2483 : 	// targets
; 2484 : 	//
; 2485 : 	////////////////////////////////////////
; 2486 : 
; 2487 : 	if (!comanche_damage.radar)

  00a0c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00a11	83 e0 01	 and	 eax, 1
  00a14	0f 85 30 02 00
	00		 jne	 $LN27@draw_groun

; 2488 : 	{
; 2489 : 		set_2d_window_rotation (mfd_env, source_heading);

  00a1a	51		 push	 ecx
  00a1b	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  00a20	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a25	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a2a	50		 push	 eax
  00a2b	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2490 : 
; 2491 : 		target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  00a30	83 7d e4 00	 cmp	 DWORD PTR _source$[ebp], 0
  00a34	74 0a		 je	 SHORT $LN66@draw_groun
  00a36	8b 45 e4	 mov	 eax, DWORD PTR _source$[ebp]
  00a39	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a3b	89 4d 94	 mov	 DWORD PTR tv455[ebp], ecx
  00a3e	eb 24		 jmp	 SHORT $LN67@draw_groun
$LN66@draw_groun:
  00a40	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00a46	81 c2 fc 00 00
	00		 add	 edx, 252		; 000000fcH
  00a4c	52		 push	 edx
  00a4d	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a52	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00a57	50		 push	 eax
  00a58	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a5d	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv455[ebp], 0
$LN67@draw_groun:
  00a64	b9 01 00 00 00	 mov	 ecx, 1
  00a69	85 c9		 test	 ecx, ecx
  00a6b	74 09		 je	 SHORT $LN68@draw_groun
  00a6d	c7 45 90 12 00
	00 00		 mov	 DWORD PTR tv463[ebp], 18 ; 00000012H
  00a74	eb 24		 jmp	 SHORT $LN69@draw_groun
$LN68@draw_groun:
  00a76	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00a7c	81 c2 fc 00 00
	00		 add	 edx, 252		; 000000fcH
  00a82	52		 push	 edx
  00a83	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a88	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00a8d	50		 push	 eax
  00a8e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a93	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv463[ebp], 0
$LN69@draw_groun:
  00a9a	6a 12		 push	 18			; 00000012H
  00a9c	8b 4d e4	 mov	 ecx, DWORD PTR _source$[ebp]
  00a9f	51		 push	 ecx
  00aa0	69 55 94 b4 00
	00 00		 imul	 edx, DWORD PTR tv455[ebp], 180
  00aa7	8b 45 90	 mov	 eax, DWORD PTR tv463[ebp]
  00aaa	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00ab1	ff d1		 call	 ecx
  00ab3	89 45 e0	 mov	 DWORD PTR _target$[ebp], eax
$LN6@draw_groun:

; 2492 : 
; 2493 : 		while (target)

  00ab6	83 7d e0 00	 cmp	 DWORD PTR _target$[ebp], 0
  00aba	0f 84 c1 00 00
	00		 je	 $LN7@draw_groun

; 2494 : 		{
; 2495 : 			if (get_gunship_target_valid_for_ground_radar (target))

  00ac0	8b 45 e0	 mov	 eax, DWORD PTR _target$[ebp]
  00ac3	50		 push	 eax
  00ac4	e8 00 00 00 00	 call	 ?get_gunship_target_valid_for_ground_radar@@YGHPAUENTITY@@@Z ; get_gunship_target_valid_for_ground_radar
  00ac9	85 c0		 test	 eax, eax
  00acb	74 29		 je	 SHORT $LN29@draw_groun

; 2496 : 			{
; 2497 : 				if (get_target_matches_ground_radar_declutter_criteria (target))

  00acd	8b 45 e0	 mov	 eax, DWORD PTR _target$[ebp]
  00ad0	50		 push	 eax
  00ad1	e8 00 00 00 00	 call	 ?get_target_matches_ground_radar_declutter_criteria@@YGHPAUENTITY@@@Z ; get_target_matches_ground_radar_declutter_criteria
  00ad6	85 c0		 test	 eax, eax
  00ad8	74 1c		 je	 SHORT $LN29@draw_groun

; 2498 : 				{
; 2499 : //VJ 030423 TSD render mod
; 2500 : 					draw_radar_target_symbol (target, source_position, scale, FALSE, FALSE);

  00ada	6a 00		 push	 0
  00adc	6a 00		 push	 0
  00ade	51		 push	 ecx
  00adf	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00ae4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ae9	8b 45 dc	 mov	 eax, DWORD PTR _source_position$[ebp]
  00aec	50		 push	 eax
  00aed	8b 4d e0	 mov	 ecx, DWORD PTR _target$[ebp]
  00af0	51		 push	 ecx
  00af1	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN29@draw_groun:

; 2501 : 				}
; 2502 : 			}
; 2503 : 
; 2504 : 			target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  00af6	83 7d e0 00	 cmp	 DWORD PTR _target$[ebp], 0
  00afa	74 0a		 je	 SHORT $LN70@draw_groun
  00afc	8b 45 e0	 mov	 eax, DWORD PTR _target$[ebp]
  00aff	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b01	89 4d 94	 mov	 DWORD PTR tv487[ebp], ecx
  00b04	eb 24		 jmp	 SHORT $LN71@draw_groun
$LN70@draw_groun:
  00b06	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00b0c	81 c2 09 01 00
	00		 add	 edx, 265		; 00000109H
  00b12	52		 push	 edx
  00b13	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b18	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00b1d	50		 push	 eax
  00b1e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b23	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv487[ebp], 0
$LN71@draw_groun:
  00b2a	b9 01 00 00 00	 mov	 ecx, 1
  00b2f	85 c9		 test	 ecx, ecx
  00b31	74 09		 je	 SHORT $LN72@draw_groun
  00b33	c7 45 90 12 00
	00 00		 mov	 DWORD PTR tv495[ebp], 18 ; 00000012H
  00b3a	eb 24		 jmp	 SHORT $LN73@draw_groun
$LN72@draw_groun:
  00b3c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00b42	81 c2 09 01 00
	00		 add	 edx, 265		; 00000109H
  00b48	52		 push	 edx
  00b49	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b4e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00b53	50		 push	 eax
  00b54	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b59	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv495[ebp], 0
$LN73@draw_groun:
  00b60	6a 12		 push	 18			; 00000012H
  00b62	8b 4d e0	 mov	 ecx, DWORD PTR _target$[ebp]
  00b65	51		 push	 ecx
  00b66	69 55 94 b4 00
	00 00		 imul	 edx, DWORD PTR tv487[ebp], 180
  00b6d	8b 45 90	 mov	 eax, DWORD PTR tv495[ebp]
  00b70	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00b77	ff d1		 call	 ecx
  00b79	89 45 e0	 mov	 DWORD PTR _target$[ebp], eax

; 2505 : 		}

  00b7c	e9 35 ff ff ff	 jmp	 $LN6@draw_groun
$LN7@draw_groun:

; 2506 : 
; 2507 : 		//
; 2508 : 		// draw selected target last
; 2509 : 		//
; 2510 : 
; 2511 : 		if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_GROUND_RADAR)

  00b81	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 1 ; target_acquisition_system
  00b88	0f 85 a8 00 00
	00		 jne	 $LN31@draw_groun

; 2512 : 		{
; 2513 : 			target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  00b8e	83 7d e4 00	 cmp	 DWORD PTR _source$[ebp], 0
  00b92	74 0a		 je	 SHORT $LN74@draw_groun
  00b94	8b 45 e4	 mov	 eax, DWORD PTR _source$[ebp]
  00b97	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b99	89 4d 94	 mov	 DWORD PTR tv508[ebp], ecx
  00b9c	eb 24		 jmp	 SHORT $LN75@draw_groun
$LN74@draw_groun:
  00b9e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00ba4	81 c2 12 01 00
	00		 add	 edx, 274		; 00000112H
  00baa	52		 push	 edx
  00bab	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00bb0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00bb5	50		 push	 eax
  00bb6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00bbb	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv508[ebp], 0
$LN75@draw_groun:
  00bc2	b9 01 00 00 00	 mov	 ecx, 1
  00bc7	85 c9		 test	 ecx, ecx
  00bc9	74 09		 je	 SHORT $LN76@draw_groun
  00bcb	c7 45 90 26 00
	00 00		 mov	 DWORD PTR tv516[ebp], 38 ; 00000026H
  00bd2	eb 24		 jmp	 SHORT $LN77@draw_groun
$LN76@draw_groun:
  00bd4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00bda	81 c2 12 01 00
	00		 add	 edx, 274		; 00000112H
  00be0	52		 push	 edx
  00be1	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00be6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00beb	50		 push	 eax
  00bec	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00bf1	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv516[ebp], 0
$LN77@draw_groun:
  00bf8	6a 26		 push	 38			; 00000026H
  00bfa	8b 4d e4	 mov	 ecx, DWORD PTR _source$[ebp]
  00bfd	51		 push	 ecx
  00bfe	69 55 94 b4 00
	00 00		 imul	 edx, DWORD PTR tv508[ebp], 180
  00c05	8b 45 90	 mov	 eax, DWORD PTR tv516[ebp]
  00c08	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00c0f	ff d1		 call	 ecx
  00c11	89 45 e0	 mov	 DWORD PTR _target$[ebp], eax

; 2514 : 
; 2515 : 			if (target)

  00c14	83 7d e0 00	 cmp	 DWORD PTR _target$[ebp], 0
  00c18	74 1c		 je	 SHORT $LN31@draw_groun

; 2516 : 			{
; 2517 : //VJ 030423 TSD render mod
; 2518 : 				draw_radar_target_symbol (target, source_position, scale, TRUE, FALSE);

  00c1a	6a 00		 push	 0
  00c1c	6a 01		 push	 1
  00c1e	51		 push	 ecx
  00c1f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00c24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c29	8b 45 dc	 mov	 eax, DWORD PTR _source_position$[ebp]
  00c2c	50		 push	 eax
  00c2d	8b 4d e0	 mov	 ecx, DWORD PTR _target$[ebp]
  00c30	51		 push	 ecx
  00c31	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN31@draw_groun:

; 2519 : 			}
; 2520 : 		}
; 2521 : 
; 2522 : 		set_2d_window_rotation (mfd_env, 0.0);

  00c36	51		 push	 ecx
  00c37	0f 57 c0	 xorps	 xmm0, xmm0
  00c3a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c3f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00c44	50		 push	 eax
  00c45	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN27@draw_groun:

; 2523 : 	}
; 2524 : 
; 2525 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00c4a	51		 push	 ecx
  00c4b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00c53	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c58	51		 push	 ecx
  00c59	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00c61	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c66	51		 push	 ecx
  00c67	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00c6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c74	51		 push	 ecx
  00c75	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00c7d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c82	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00c87	50		 push	 eax
  00c88	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 2526 : 
; 2527 : 	////////////////////////////////////////
; 2528 : 	//
; 2529 : 	// damaged
; 2530 : 	//
; 2531 : 	////////////////////////////////////////
; 2532 : 
; 2533 : 	if (comanche_damage.radar)

  00c8d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00c92	83 e0 01	 and	 eax, 1
  00c95	0f 84 98 00 00
	00		 je	 $LN32@draw_groun

; 2534 : 	{
; 2535 : 		draw_2d_line (-0.5, -0.5,  0.5, 0.5, MFD_COLOUR1);

  00c9b	b8 04 00 00 00	 mov	 eax, 4
  00ca0	6b c8 00	 imul	 ecx, eax, 0
  00ca3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ca9	52		 push	 edx
  00caa	51		 push	 ecx
  00cab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00cb3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cb8	51		 push	 ecx
  00cb9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00cc1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cc6	51		 push	 ecx
  00cc7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00ccf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cd4	51		 push	 ecx
  00cd5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00cdd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ce2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2536 : 		draw_2d_line ( 0.5, -0.5, -0.5, 0.5, MFD_COLOUR1);

  00ce7	b8 04 00 00 00	 mov	 eax, 4
  00cec	6b c8 00	 imul	 ecx, eax, 0
  00cef	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00cf5	52		 push	 edx
  00cf6	51		 push	 ecx
  00cf7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00cff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d04	51		 push	 ecx
  00d05	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00d0d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d12	51		 push	 ecx
  00d13	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00d1b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d20	51		 push	 ecx
  00d21	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00d29	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d2e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN32@draw_groun:

; 2537 : 	}
; 2538 : }

  00d33	5f		 pop	 edi
  00d34	5e		 pop	 esi
  00d35	5b		 pop	 ebx
  00d36	8b e5		 mov	 esp, ebp
  00d38	5d		 pop	 ebp
  00d39	c3		 ret	 0
  00d3a	66 90		 npad	 2
$LN78@draw_groun:
  00d3c	00 00 00 00	 DD	 $LN16@draw_groun
  00d40	00 00 00 00	 DD	 $LN17@draw_groun
  00d44	00 00 00 00	 DD	 $LN18@draw_groun
  00d48	00 00 00 00	 DD	 $LN21@draw_groun
  00d4c	00 00 00 00	 DD	 $LN22@draw_groun
?draw_ground_radar_mfd@@YGXXZ ENDP			; draw_ground_radar_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z
_TEXT	SEGMENT
tv180 = -100						; size = 4
tv160 = -100						; size = 4
tv132 = -100						; size = 4
tv172 = -96						; size = 4
tv152 = -96						; size = 4
tv92 = -96						; size = 4
tv80 = -96						; size = 4
$T1 = -92						; size = 4
_bounding_box_max$ = -24				; size = 4
_bounding_box_min$ = -20				; size = 4
_target_position$ = -16					; size = 4
_radius$ = -12						; size = 4
_dy$ = -8						; size = 4
_dx$ = -4						; size = 4
_target$ = 8						; size = 4
_source_position$ = 12					; size = 4
_scale$ = 16						; size = 4
?draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z PROC ; draw_ground_radar_clutter, COMDAT

; 2193 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2194 : 	float
; 2195 : 		dx,
; 2196 : 		dy,
; 2197 : 		radius;
; 2198 : 
; 2199 : 	vec3d
; 2200 : 		*target_position,
; 2201 : 		*bounding_box_min,
; 2202 : 		*bounding_box_max;
; 2203 : 
; 2204 : 	ASSERT (target);

  00009	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@draw_groun
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00014	83 c0 0b	 add	 eax, 11			; 0000000bH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@draw_groun:

; 2205 : 
; 2206 : 	ASSERT (source_position);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _source_position$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@draw_groun
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00032	83 c0 0d	 add	 eax, 13			; 0000000dH
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IIPCKJML@source_position@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@draw_groun:

; 2207 : 
; 2208 : 	ASSERT (get_local_entity_type (target) == ENTITY_TYPE_CITY);

  00045	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00049	74 0a		 je	 SHORT $LN7@draw_groun
  0004b	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	89 4d a0	 mov	 DWORD PTR tv80[ebp], ecx
  00053	eb 21		 jmp	 SHORT $LN8@draw_groun
$LN7@draw_groun:
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  0005b	83 c2 0f	 add	 edx, 15			; 0000000fH
  0005e	52		 push	 edx
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006f	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN8@draw_groun:
  00076	83 7d a0 05	 cmp	 DWORD PTR tv80[ebp], 5
  0007a	74 18		 je	 SHORT $LN4@draw_groun
  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00081	83 c0 0f	 add	 eax, 15			; 0000000fH
  00084	50		 push	 eax
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@KDAGALDF@get_local_entity_type?5?$CItarget?$CJ?5@
  0008f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_groun:

; 2209 : 
; 2210 : 	target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00094	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00098	74 0a		 je	 SHORT $LN9@draw_groun
  0009a	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0009d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009f	89 4d a0	 mov	 DWORD PTR tv92[ebp], ecx
  000a2	eb 21		 jmp	 SHORT $LN10@draw_groun
$LN9@draw_groun:
  000a4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  000aa	83 c2 11	 add	 edx, 17			; 00000011H
  000ad	52		 push	 edx
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000be	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv92[ebp], 0
$LN10@draw_groun:
  000c5	b9 01 00 00 00	 mov	 ecx, 1
  000ca	85 c9		 test	 ecx, ecx
  000cc	74 09		 je	 SHORT $LN11@draw_groun
  000ce	c7 45 9c 08 00
	00 00		 mov	 DWORD PTR tv132[ebp], 8
  000d5	eb 21		 jmp	 SHORT $LN12@draw_groun
$LN11@draw_groun:
  000d7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  000dd	83 c2 11	 add	 edx, 17			; 00000011H
  000e0	52		 push	 edx
  000e1	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000eb	50		 push	 eax
  000ec	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000f1	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
$LN12@draw_groun:
  000f8	6a 08		 push	 8
  000fa	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  000fd	51		 push	 ecx
  000fe	6b 55 a0 60	 imul	 edx, DWORD PTR tv92[ebp], 96
  00102	8b 45 9c	 mov	 eax, DWORD PTR tv132[ebp]
  00105	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0010c	ff d1		 call	 ecx
  0010e	89 45 f0	 mov	 DWORD PTR _target_position$[ebp], eax

; 2211 : 
; 2212 : 	dx = (target_position->x - source_position->x) * scale;

  00111	8b 45 f0	 mov	 eax, DWORD PTR _target_position$[ebp]
  00114	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  00117	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0011b	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0011f	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00124	f3 0f 11 45 fc	 movss	 DWORD PTR _dx$[ebp], xmm0

; 2213 : 	dy = (target_position->z - source_position->z) * scale;

  00129	8b 45 f0	 mov	 eax, DWORD PTR _target_position$[ebp]
  0012c	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  0012f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00134	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00139	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0013e	f3 0f 11 45 f8	 movss	 DWORD PTR _dy$[ebp], xmm0

; 2214 : 
; 2215 : 	bounding_box_min = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_BOUNDING_BOX_MIN);

  00143	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00147	74 0a		 je	 SHORT $LN13@draw_groun
  00149	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0014c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014e	89 4d a0	 mov	 DWORD PTR tv152[ebp], ecx
  00151	eb 21		 jmp	 SHORT $LN14@draw_groun
$LN13@draw_groun:
  00153	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00159	83 c2 16	 add	 edx, 22			; 00000016H
  0015c	52		 push	 edx
  0015d	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00162	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00167	50		 push	 eax
  00168	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0016d	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv152[ebp], 0
$LN14@draw_groun:
  00174	b9 01 00 00 00	 mov	 ecx, 1
  00179	85 c9		 test	 ecx, ecx
  0017b	74 09		 je	 SHORT $LN15@draw_groun
  0017d	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv160[ebp], 1
  00184	eb 21		 jmp	 SHORT $LN16@draw_groun
$LN15@draw_groun:
  00186	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  0018c	83 c2 16	 add	 edx, 22			; 00000016H
  0018f	52		 push	 edx
  00190	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00195	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001a0	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv160[ebp], 0
$LN16@draw_groun:
  001a7	6a 01		 push	 1
  001a9	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  001ac	51		 push	 ecx
  001ad	6b 55 a0 60	 imul	 edx, DWORD PTR tv152[ebp], 96
  001b1	8b 45 9c	 mov	 eax, DWORD PTR tv160[ebp]
  001b4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  001bb	ff d1		 call	 ecx
  001bd	89 45 ec	 mov	 DWORD PTR _bounding_box_min$[ebp], eax

; 2216 : 	bounding_box_max = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_BOUNDING_BOX_MAX);

  001c0	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  001c4	74 0a		 je	 SHORT $LN17@draw_groun
  001c6	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  001c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001cb	89 4d a0	 mov	 DWORD PTR tv172[ebp], ecx
  001ce	eb 21		 jmp	 SHORT $LN18@draw_groun
$LN17@draw_groun:
  001d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  001d6	83 c2 17	 add	 edx, 23			; 00000017H
  001d9	52		 push	 edx
  001da	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  001df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001e4	50		 push	 eax
  001e5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001ea	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv172[ebp], 0
$LN18@draw_groun:
  001f1	b9 01 00 00 00	 mov	 ecx, 1
  001f6	85 c9		 test	 ecx, ecx
  001f8	74 09		 je	 SHORT $LN19@draw_groun
  001fa	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv180[ebp], 0
  00201	eb 21		 jmp	 SHORT $LN20@draw_groun
$LN19@draw_groun:
  00203	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00209	83 c2 17	 add	 edx, 23			; 00000017H
  0020c	52		 push	 edx
  0020d	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00212	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00217	50		 push	 eax
  00218	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0021d	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv180[ebp], 0
$LN20@draw_groun:
  00224	6a 00		 push	 0
  00226	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00229	51		 push	 ecx
  0022a	6b 55 a0 60	 imul	 edx, DWORD PTR tv172[ebp], 96
  0022e	8b 45 9c	 mov	 eax, DWORD PTR tv180[ebp]
  00231	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00238	ff d1		 call	 ecx
  0023a	89 45 e8	 mov	 DWORD PTR _bounding_box_max$[ebp], eax

; 2217 : 
; 2218 : 	radius = get_approx_2d_range (bounding_box_min, bounding_box_max);

  0023d	8b 45 e8	 mov	 eax, DWORD PTR _bounding_box_max$[ebp]
  00240	50		 push	 eax
  00241	8b 4d ec	 mov	 ecx, DWORD PTR _bounding_box_min$[ebp]
  00244	51		 push	 ecx
  00245	e8 00 00 00 00	 call	 ?get_approx_2d_range@@YGMPBUVEC3D@@0@Z ; get_approx_2d_range
  0024a	d9 5d f4	 fstp	 DWORD PTR _radius$[ebp]

; 2219 : 
; 2220 : 	//
; 2221 : 	// radius check to ignore oil pipelines and overly large city blocks
; 2222 : 	//
; 2223 : 
; 2224 : 	if (radius < 2000.0)

  0024d	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _radius$[ebp]
  00252	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@409f400000000000
  0025a	66 0f 2f c8	 comisd	 xmm1, xmm0
  0025e	76 5d		 jbe	 SHORT $LN5@draw_groun

; 2225 : 	{
; 2226 : 		radius = max (50.0f, radius);

  00260	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  00268	f3 0f 11 45 a4	 movss	 DWORD PTR $T1[ebp], xmm0
  0026d	8d 45 f4	 lea	 eax, DWORD PTR _radius$[ebp]
  00270	50		 push	 eax
  00271	8d 4d a4	 lea	 ecx, DWORD PTR $T1[ebp]
  00274	51		 push	 ecx
  00275	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0027a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0027e	f3 0f 11 45 f4	 movss	 DWORD PTR _radius$[ebp], xmm0

; 2227 : 
; 2228 : 		draw_2d_hatched_circle (dx, dy, radius * scale, MFD_COLOUR5);

  00283	b8 04 00 00 00	 mov	 eax, 4
  00288	c1 e0 02	 shl	 eax, 2
  0028b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00291	51		 push	 ecx
  00292	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _radius$[ebp]
  00297	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0029c	51		 push	 ecx
  0029d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a2	51		 push	 ecx
  002a3	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  002a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ad	51		 push	 ecx
  002ae	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _dx$[ebp]
  002b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b8	e8 00 00 00 00	 call	 ?draw_2d_hatched_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_hatched_circle
$LN5@draw_groun:

; 2229 : 	}
; 2230 : }

  002bd	5f		 pop	 edi
  002be	5e		 pop	 esi
  002bf	5b		 pop	 ebx
  002c0	8b e5		 mov	 esp, ebp
  002c2	5d		 pop	 ebp
  002c3	c2 0c 00	 ret	 12			; 0000000cH
?draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z ENDP ; draw_ground_radar_clutter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z
_TEXT	SEGMENT
tv367 = -100						; size = 4
tv288 = -100						; size = 4
tv256 = -100						; size = 4
tv223 = -100						; size = 4
tv193 = -100						; size = 4
tv165 = -100						; size = 4
tv145 = -100						; size = 4
tv88 = -100						; size = 4
tv360 = -96						; size = 4
tv281 = -96						; size = 4
tv249 = -96						; size = 4
tv216 = -96						; size = 4
tv185 = -96						; size = 4
tv157 = -96						; size = 4
tv137 = -96						; size = 4
tv80 = -96						; size = 4
_target_position$ = -28					; size = 4
_dy$ = -24						; size = 4
_dx$ = -20						; size = 4
_source$ = -16						; size = 4
_source_side$ = -12					; size = 4
_target_symbol_colour$ = -8				; size = 4
_target_symbol_type$ = -4				; size = 4
_target$ = 8						; size = 4
_source_position$ = 12					; size = 4
_scale$ = 16						; size = 4
_selected_target$ = 20					; size = 4
_display_on_tsd$ = 24					; size = 4
?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z PROC ; draw_radar_target_symbol, COMDAT

; 2018 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2019 : 	target_symbol_types
; 2020 : 		target_symbol_type;
; 2021 : 
; 2022 : 	rgb_colour
; 2023 : 		target_symbol_colour;
; 2024 : 
; 2025 : //VJ 030423 TSD render mod
; 2026 : 	entity_sides
; 2027 : 		source_side;
; 2028 : 	entity
; 2029 : 		*source;
; 2030 : 
; 2031 : 	float
; 2032 : 		dx,
; 2033 : 		dy;
; 2034 : 
; 2035 : 	vec3d
; 2036 : 		*target_position;
; 2037 : 
; 2038 : 	ASSERT (target);

  00009	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@draw_radar
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  00014	83 c0 14	 add	 eax, 20			; 00000014H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@draw_radar:

; 2039 : 
; 2040 : 	ASSERT (source_position);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _source_position$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@draw_radar
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  00032	83 c0 16	 add	 eax, 22			; 00000016H
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IIPCKJML@source_position@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@draw_radar:

; 2041 : 
; 2042 : 	ASSERT (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER));

  00045	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00049	74 0a		 je	 SHORT $LN46@draw_radar
  0004b	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	89 4d a0	 mov	 DWORD PTR tv80[ebp], ecx
  00053	eb 21		 jmp	 SHORT $LN47@draw_radar
$LN46@draw_radar:
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0005b	83 c2 18	 add	 edx, 24			; 00000018H
  0005e	52		 push	 edx
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006f	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN47@draw_radar:
  00076	b9 01 00 00 00	 mov	 ecx, 1
  0007b	85 c9		 test	 ecx, ecx
  0007d	74 09		 je	 SHORT $LN48@draw_radar
  0007f	c7 45 9c 42 00
	00 00		 mov	 DWORD PTR tv88[ebp], 66	; 00000042H
  00086	eb 21		 jmp	 SHORT $LN49@draw_radar
$LN48@draw_radar:
  00088	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0008e	83 c2 18	 add	 edx, 24			; 00000018H
  00091	52		 push	 edx
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a2	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$LN49@draw_radar:
  000a9	6a 42		 push	 66			; 00000042H
  000ab	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  000ae	51		 push	 ecx
  000af	69 55 a0 5c 04
	00 00		 imul	 edx, DWORD PTR tv80[ebp], 1116
  000b6	8b 45 9c	 mov	 eax, DWORD PTR tv88[ebp]
  000b9	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000c0	ff d1		 call	 ecx
  000c2	85 c0		 test	 eax, eax
  000c4	74 18		 je	 SHORT $LN4@draw_radar
  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  000cb	83 c0 18	 add	 eax, 24			; 00000018H
  000ce	50		 push	 eax
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@
  000d9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_radar:

; 2043 : 
; 2044 : //VJ 030423 TSD render mod
; 2045 : 	source = get_gunship_entity ();

  000de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000e3	89 45 f0	 mov	 DWORD PTR _source$[ebp], eax

; 2046 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  000e6	83 7d f0 00	 cmp	 DWORD PTR _source$[ebp], 0
  000ea	74 0a		 je	 SHORT $LN50@draw_radar
  000ec	8b 45 f0	 mov	 eax, DWORD PTR _source$[ebp]
  000ef	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f1	89 4d a0	 mov	 DWORD PTR tv137[ebp], ecx
  000f4	eb 21		 jmp	 SHORT $LN51@draw_radar
$LN50@draw_radar:
  000f6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  000fc	83 c2 1c	 add	 edx, 28			; 0000001cH
  000ff	52		 push	 edx
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00110	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$LN51@draw_radar:
  00117	b9 01 00 00 00	 mov	 ecx, 1
  0011c	85 c9		 test	 ecx, ecx
  0011e	74 09		 je	 SHORT $LN52@draw_radar
  00120	c7 45 9c bb 00
	00 00		 mov	 DWORD PTR tv145[ebp], 187 ; 000000bbH
  00127	eb 21		 jmp	 SHORT $LN53@draw_radar
$LN52@draw_radar:
  00129	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0012f	83 c2 1c	 add	 edx, 28			; 0000001cH
  00132	52		 push	 edx
  00133	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00138	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0013d	50		 push	 eax
  0013e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00143	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv145[ebp], 0
$LN53@draw_radar:
  0014a	68 bb 00 00 00	 push	 187			; 000000bbH
  0014f	8b 4d f0	 mov	 ecx, DWORD PTR _source$[ebp]
  00152	51		 push	 ecx
  00153	69 55 a0 5c 04
	00 00		 imul	 edx, DWORD PTR tv137[ebp], 1116
  0015a	8b 45 9c	 mov	 eax, DWORD PTR tv145[ebp]
  0015d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00164	ff d1		 call	 ecx
  00166	89 45 f4	 mov	 DWORD PTR _source_side$[ebp], eax

; 2047 : 
; 2048 : 	target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00169	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0016d	74 0a		 je	 SHORT $LN54@draw_radar
  0016f	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00172	8b 08		 mov	 ecx, DWORD PTR [eax]
  00174	89 4d a0	 mov	 DWORD PTR tv157[ebp], ecx
  00177	eb 21		 jmp	 SHORT $LN55@draw_radar
$LN54@draw_radar:
  00179	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0017f	83 c2 1e	 add	 edx, 30			; 0000001eH
  00182	52		 push	 edx
  00183	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00188	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0018d	50		 push	 eax
  0018e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00193	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv157[ebp], 0
$LN55@draw_radar:
  0019a	b9 01 00 00 00	 mov	 ecx, 1
  0019f	85 c9		 test	 ecx, ecx
  001a1	74 09		 je	 SHORT $LN56@draw_radar
  001a3	c7 45 9c 08 00
	00 00		 mov	 DWORD PTR tv165[ebp], 8
  001aa	eb 21		 jmp	 SHORT $LN57@draw_radar
$LN56@draw_radar:
  001ac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  001b2	83 c2 1e	 add	 edx, 30			; 0000001eH
  001b5	52		 push	 edx
  001b6	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  001bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001c0	50		 push	 eax
  001c1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c6	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv165[ebp], 0
$LN57@draw_radar:
  001cd	6a 08		 push	 8
  001cf	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  001d2	51		 push	 ecx
  001d3	6b 55 a0 60	 imul	 edx, DWORD PTR tv157[ebp], 96
  001d7	8b 45 9c	 mov	 eax, DWORD PTR tv165[ebp]
  001da	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  001e1	ff d1		 call	 ecx
  001e3	89 45 e4	 mov	 DWORD PTR _target_position$[ebp], eax

; 2049 : 
; 2050 : 	dx = (target_position->x - source_position->x) * scale;

  001e6	8b 45 e4	 mov	 eax, DWORD PTR _target_position$[ebp]
  001e9	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  001ec	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001f0	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  001f4	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  001f9	f3 0f 11 45 ec	 movss	 DWORD PTR _dx$[ebp], xmm0

; 2051 : 	dy = (target_position->z - source_position->z) * scale;

  001fe	8b 45 e4	 mov	 eax, DWORD PTR _target_position$[ebp]
  00201	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  00204	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00209	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0020e	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00213	f3 0f 11 45 e8	 movss	 DWORD PTR _dy$[ebp], xmm0

; 2052 : 
; 2053 : 	target_symbol_type = (target_symbol_types) get_local_entity_int_value (target, INT_TYPE_TARGET_SYMBOL_TYPE);

  00218	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0021c	74 0a		 je	 SHORT $LN58@draw_radar
  0021e	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00221	8b 08		 mov	 ecx, DWORD PTR [eax]
  00223	89 4d a0	 mov	 DWORD PTR tv185[ebp], ecx
  00226	eb 21		 jmp	 SHORT $LN59@draw_radar
$LN58@draw_radar:
  00228	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0022e	83 c2 23	 add	 edx, 35			; 00000023H
  00231	52		 push	 edx
  00232	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00237	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0023c	50		 push	 eax
  0023d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00242	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv185[ebp], 0
$LN59@draw_radar:
  00249	b9 01 00 00 00	 mov	 ecx, 1
  0024e	85 c9		 test	 ecx, ecx
  00250	74 09		 je	 SHORT $LN60@draw_radar
  00252	c7 45 9c d5 00
	00 00		 mov	 DWORD PTR tv193[ebp], 213 ; 000000d5H
  00259	eb 21		 jmp	 SHORT $LN61@draw_radar
$LN60@draw_radar:
  0025b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  00261	83 c2 23	 add	 edx, 35			; 00000023H
  00264	52		 push	 edx
  00265	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0026a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0026f	50		 push	 eax
  00270	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00275	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv193[ebp], 0
$LN61@draw_radar:
  0027c	68 d5 00 00 00	 push	 213			; 000000d5H
  00281	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00284	51		 push	 ecx
  00285	69 55 a0 5c 04
	00 00		 imul	 edx, DWORD PTR tv185[ebp], 1116
  0028c	8b 45 9c	 mov	 eax, DWORD PTR tv193[ebp]
  0028f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00296	ff d1		 call	 ecx
  00298	89 45 fc	 mov	 DWORD PTR _target_symbol_type$[ebp], eax

; 2054 : 
; 2055 : 	ASSERT ((target_symbol_type >= 0) && (target_symbol_type < NUM_TARGET_SYMBOL_TYPES));

  0029b	83 7d fc 00	 cmp	 DWORD PTR _target_symbol_type$[ebp], 0
  0029f	7c 06		 jl	 SHORT $LN6@draw_radar
  002a1	83 7d fc 08	 cmp	 DWORD PTR _target_symbol_type$[ebp], 8
  002a5	7c 18		 jl	 SHORT $LN5@draw_radar
$LN6@draw_radar:
  002a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  002ac	83 c0 25	 add	 eax, 37			; 00000025H
  002af	50		 push	 eax
  002b0	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  002b5	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@
  002ba	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@draw_radar:

; 2056 : 
; 2057 : 	if (get_local_entity_index (target) & 1)

  002bf	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  002c2	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  002c8	c1 f8 04	 sar	 eax, 4
  002cb	83 e0 01	 and	 eax, 1
  002ce	0f 84 e2 00 00
	00		 je	 $LN7@draw_radar

; 2058 : 	{
; 2059 : //VJ 030423 TSD render mod
; 2060 : 		if (display_on_tsd)

  002d4	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  002d8	0f 84 c2 00 00
	00		 je	 $LN9@draw_radar

; 2061 : 		{
; 2062 : 			//VJ 030511 TSD render mod, treat enemy colours as cheat
; 2063 : 			if (command_line_tsd_enemy_colours)

  002de	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_tsd_enemy_colours@@3HA, 0 ; command_line_tsd_enemy_colours
  002e5	0f 84 a2 00 00
	00		 je	 $LN11@draw_radar

; 2064 : 			{
; 2065 : 				if (source_side == get_local_entity_int_value (target, INT_TYPE_SIDE))

  002eb	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  002ef	74 0a		 je	 SHORT $LN62@draw_radar
  002f1	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  002f4	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f6	89 4d a0	 mov	 DWORD PTR tv216[ebp], ecx
  002f9	eb 1d		 jmp	 SHORT $LN63@draw_radar
$LN62@draw_radar:
  002fb	68 11 08 00 00	 push	 2065			; 00000811H
  00300	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00305	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0030b	52		 push	 edx
  0030c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00311	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv216[ebp], 0
$LN63@draw_radar:
  00318	b8 01 00 00 00	 mov	 eax, 1
  0031d	85 c0		 test	 eax, eax
  0031f	74 09		 je	 SHORT $LN64@draw_radar
  00321	c7 45 9c bb 00
	00 00		 mov	 DWORD PTR tv223[ebp], 187 ; 000000bbH
  00328	eb 1d		 jmp	 SHORT $LN65@draw_radar
$LN64@draw_radar:
  0032a	68 11 08 00 00	 push	 2065			; 00000811H
  0032f	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00334	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0033a	51		 push	 ecx
  0033b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00340	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv223[ebp], 0
$LN65@draw_radar:
  00347	68 bb 00 00 00	 push	 187			; 000000bbH
  0034c	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  0034f	52		 push	 edx
  00350	69 45 a0 5c 04
	00 00		 imul	 eax, DWORD PTR tv216[ebp], 1116
  00357	8b 4d 9c	 mov	 ecx, DWORD PTR tv223[ebp]
  0035a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00361	ff d2		 call	 edx
  00363	39 45 f4	 cmp	 DWORD PTR _source_side$[ebp], eax
  00366	75 13		 jne	 SHORT $LN13@draw_radar

; 2066 : 					target_symbol_colour = MFD_COLOUR1;

  00368	b8 04 00 00 00	 mov	 eax, 4
  0036d	6b c8 00	 imul	 ecx, eax, 0
  00370	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00376	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx

; 2067 : 				else

  00379	eb 10		 jmp	 SHORT $LN14@draw_radar
$LN13@draw_radar:

; 2068 : 					target_symbol_colour = MFD_COLOUR3;

  0037b	b8 04 00 00 00	 mov	 eax, 4
  00380	d1 e0		 shl	 eax, 1
  00382	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00388	89 4d f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], ecx
$LN14@draw_radar:

; 2069 : 			}
; 2070 : 			else

  0038b	eb 11		 jmp	 SHORT $LN12@draw_radar
$LN11@draw_radar:

; 2071 : 			{
; 2072 : 					target_symbol_colour = MFD_COLOUR8;

  0038d	b8 04 00 00 00	 mov	 eax, 4
  00392	6b c8 0c	 imul	 ecx, eax, 12
  00395	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0039b	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN12@draw_radar:

; 2073 : 			}
; 2074 : 		}
; 2075 : 		else

  0039e	eb 11		 jmp	 SHORT $LN10@draw_radar
$LN9@draw_radar:

; 2076 : 			target_symbol_colour = MFD_COLOUR2;

  003a0	b8 04 00 00 00	 mov	 eax, 4
  003a5	c1 e0 00	 shl	 eax, 0
  003a8	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  003ae	89 4d f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], ecx
$LN10@draw_radar:

; 2077 : 	}
; 2078 : 	else

  003b1	e9 de 00 00 00	 jmp	 $LN16@draw_radar
$LN7@draw_radar:

; 2079 : 	{
; 2080 : //VJ 030423 TSD render mod
; 2081 : 		if (display_on_tsd)

  003b6	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  003ba	0f 84 c3 00 00
	00		 je	 $LN15@draw_radar

; 2082 : 		{
; 2083 : 			//VJ 030511 TSD render mod, treat enemy colours as cheat
; 2084 : 			if (command_line_tsd_enemy_colours)

  003c0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_tsd_enemy_colours@@3HA, 0 ; command_line_tsd_enemy_colours
  003c7	0f 84 a3 00 00
	00		 je	 $LN17@draw_radar

; 2085 : 			{
; 2086 : 				if (source_side == get_local_entity_int_value (target, INT_TYPE_SIDE))

  003cd	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  003d1	74 0a		 je	 SHORT $LN66@draw_radar
  003d3	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  003d6	8b 08		 mov	 ecx, DWORD PTR [eax]
  003d8	89 4d a0	 mov	 DWORD PTR tv249[ebp], ecx
  003db	eb 1d		 jmp	 SHORT $LN67@draw_radar
$LN66@draw_radar:
  003dd	68 26 08 00 00	 push	 2086			; 00000826H
  003e2	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  003e7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003ed	52		 push	 edx
  003ee	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003f3	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv249[ebp], 0
$LN67@draw_radar:
  003fa	b8 01 00 00 00	 mov	 eax, 1
  003ff	85 c0		 test	 eax, eax
  00401	74 09		 je	 SHORT $LN68@draw_radar
  00403	c7 45 9c bb 00
	00 00		 mov	 DWORD PTR tv256[ebp], 187 ; 000000bbH
  0040a	eb 1d		 jmp	 SHORT $LN69@draw_radar
$LN68@draw_radar:
  0040c	68 26 08 00 00	 push	 2086			; 00000826H
  00411	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00416	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0041c	51		 push	 ecx
  0041d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00422	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv256[ebp], 0
$LN69@draw_radar:
  00429	68 bb 00 00 00	 push	 187			; 000000bbH
  0042e	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00431	52		 push	 edx
  00432	69 45 a0 5c 04
	00 00		 imul	 eax, DWORD PTR tv249[ebp], 1116
  00439	8b 4d 9c	 mov	 ecx, DWORD PTR tv256[ebp]
  0043c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00443	ff d2		 call	 edx
  00445	39 45 f4	 cmp	 DWORD PTR _source_side$[ebp], eax
  00448	75 13		 jne	 SHORT $LN19@draw_radar

; 2087 : 					target_symbol_colour = MFD_COLOUR2;

  0044a	b8 04 00 00 00	 mov	 eax, 4
  0044f	c1 e0 00	 shl	 eax, 0
  00452	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00458	89 4d f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], ecx

; 2088 : 				else

  0045b	eb 11		 jmp	 SHORT $LN20@draw_radar
$LN19@draw_radar:

; 2089 : 					target_symbol_colour = MFD_COLOUR4;

  0045d	b8 04 00 00 00	 mov	 eax, 4
  00462	6b c8 03	 imul	 ecx, eax, 3
  00465	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0046b	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN20@draw_radar:

; 2090 : 			}
; 2091 : 			else

  0046e	eb 11		 jmp	 SHORT $LN18@draw_radar
$LN17@draw_radar:

; 2092 : 			{
; 2093 : 					target_symbol_colour = MFD_COLOUR7;

  00470	b8 04 00 00 00	 mov	 eax, 4
  00475	6b c8 0b	 imul	 ecx, eax, 11
  00478	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0047e	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN18@draw_radar:

; 2094 : 			}
; 2095 : 		}
; 2096 : 		else

  00481	eb 11		 jmp	 SHORT $LN16@draw_radar
$LN15@draw_radar:

; 2097 : 			target_symbol_colour = MFD_COLOUR1;

  00483	b8 04 00 00 00	 mov	 eax, 4
  00488	6b c8 00	 imul	 ecx, eax, 0
  0048b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00491	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN16@draw_radar:

; 2098 : 	}
; 2099 : 
; 2100 : 	if (draw_large_mfd)

  00494	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0049b	0f 84 44 02 00
	00		 je	 $LN21@draw_radar

; 2101 : 	{
; 2102 : 		if (get_local_entity_int_value (target, INT_TYPE_GUNSHIP_RADAR_LOS_CLEAR))

  004a1	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  004a5	74 0a		 je	 SHORT $LN70@draw_radar
  004a7	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  004aa	8b 08		 mov	 ecx, DWORD PTR [eax]
  004ac	89 4d a0	 mov	 DWORD PTR tv281[ebp], ecx
  004af	eb 1d		 jmp	 SHORT $LN71@draw_radar
$LN70@draw_radar:
  004b1	68 36 08 00 00	 push	 2102			; 00000836H
  004b6	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  004bb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  004c1	52		 push	 edx
  004c2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004c7	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv281[ebp], 0
$LN71@draw_radar:
  004ce	b8 01 00 00 00	 mov	 eax, 1
  004d3	85 c0		 test	 eax, eax
  004d5	74 09		 je	 SHORT $LN72@draw_radar
  004d7	c7 45 9c 50 00
	00 00		 mov	 DWORD PTR tv288[ebp], 80 ; 00000050H
  004de	eb 1d		 jmp	 SHORT $LN73@draw_radar
$LN72@draw_radar:
  004e0	68 36 08 00 00	 push	 2102			; 00000836H
  004e5	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  004ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  004f0	51		 push	 ecx
  004f1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004f6	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv288[ebp], 0
$LN73@draw_radar:
  004fd	6a 50		 push	 80			; 00000050H
  004ff	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00502	52		 push	 edx
  00503	69 45 a0 5c 04
	00 00		 imul	 eax, DWORD PTR tv281[ebp], 1116
  0050a	8b 4d 9c	 mov	 ecx, DWORD PTR tv288[ebp]
  0050d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00514	ff d2		 call	 edx
  00516	85 c0		 test	 eax, eax
  00518	0f 84 9e 00 00
	00		 je	 $LN23@draw_radar

; 2103 : 		{
; 2104 : 			if (selected_target)

  0051e	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00522	74 69		 je	 SHORT $LN27@draw_radar

; 2105 : 			{
; 2106 : //VJ 030423 TSD render mod
; 2107 : 				if (display_on_tsd)

  00524	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  00528	74 2e		 je	 SHORT $LN26@draw_radar

; 2108 : 					draw_2d_mono_sprite (large_display_target_symbols_los_mask[target_symbol_type], dx, dy, clear_mfd_colour);

  0052a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0052f	50		 push	 eax
  00530	51		 push	 ecx
  00531	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00536	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053b	51		 push	 ecx
  0053c	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00541	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00546	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  00549	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_los_mask@@3PAPBDA[ecx*4]
  00550	52		 push	 edx
  00551	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2109 : 				else

  00556	eb 35		 jmp	 SHORT $LN27@draw_radar
$LN26@draw_radar:

; 2110 : 					draw_2d_mono_sprite (large_display_target_symbols_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  00558	b8 04 00 00 00	 mov	 eax, 4
  0055d	6b c8 05	 imul	 ecx, eax, 5
  00560	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00566	52		 push	 edx
  00567	51		 push	 ecx
  00568	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0056d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00572	51		 push	 ecx
  00573	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00578	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057d	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  00580	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?large_display_target_symbols_los_mask@@3PAPBDA[eax*4]
  00587	51		 push	 ecx
  00588	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN27@draw_radar:

; 2111 : 			}
; 2112 : 
; 2113 : 			draw_2d_mono_sprite (large_display_target_symbols_los[target_symbol_type], dx, dy, target_symbol_colour);

  0058d	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  00590	50		 push	 eax
  00591	51		 push	 ecx
  00592	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00597	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059c	51		 push	 ecx
  0059d	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  005a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a7	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  005aa	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_los@@3PAPBDA[ecx*4]
  005b1	52		 push	 edx
  005b2	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2114 : 		}
; 2115 : 		else

  005b7	e9 99 00 00 00	 jmp	 $LN24@draw_radar
$LN23@draw_radar:

; 2116 : 		{
; 2117 : 			if (selected_target)

  005bc	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  005c0	74 69		 je	 SHORT $LN30@draw_radar

; 2118 : 			{
; 2119 : //VJ 030423 TSD render mod
; 2120 : 				if (display_on_tsd)

  005c2	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  005c6	74 2e		 je	 SHORT $LN29@draw_radar

; 2121 : 					draw_2d_mono_sprite (large_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, clear_mfd_colour);

  005c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  005cd	50		 push	 eax
  005ce	51		 push	 ecx
  005cf	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  005d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d9	51		 push	 ecx
  005da	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  005df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e4	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  005e7	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_no_los_mask@@3PAPBDA[ecx*4]
  005ee	52		 push	 edx
  005ef	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2122 : 				else

  005f4	eb 35		 jmp	 SHORT $LN30@draw_radar
$LN29@draw_radar:

; 2123 : 					draw_2d_mono_sprite (large_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  005f6	b8 04 00 00 00	 mov	 eax, 4
  005fb	6b c8 05	 imul	 ecx, eax, 5
  005fe	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00604	52		 push	 edx
  00605	51		 push	 ecx
  00606	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0060b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00610	51		 push	 ecx
  00611	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00616	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0061b	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  0061e	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?large_display_target_symbols_no_los_mask@@3PAPBDA[eax*4]
  00625	51		 push	 ecx
  00626	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN30@draw_radar:

; 2124 : 			}
; 2125 : 
; 2126 : 			draw_2d_mono_sprite (large_display_target_symbols_no_los[target_symbol_type], dx, dy, target_symbol_colour);

  0062b	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  0062e	50		 push	 eax
  0062f	51		 push	 ecx
  00630	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00635	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063a	51		 push	 ecx
  0063b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00640	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00645	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  00648	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_no_los@@3PAPBDA[ecx*4]
  0064f	52		 push	 edx
  00650	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN24@draw_radar:

; 2127 : 		}
; 2128 : 
; 2129 : 		if (selected_target)

  00655	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00659	0f 84 81 00 00
	00		 je	 $LN31@draw_radar

; 2130 : 		{
; 2131 : //VJ 030423 TSD render mod
; 2132 : 			if (display_on_tsd)

  0065f	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  00663	74 28		 je	 SHORT $LN32@draw_radar

; 2133 : 				draw_2d_mono_sprite (large_display_target_symbol_selected_target_mask, dx, dy, clear_mfd_colour);

  00665	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0066a	50		 push	 eax
  0066b	51		 push	 ecx
  0066c	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00671	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00676	51		 push	 ecx
  00677	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0067c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00681	68 00 00 00 00	 push	 OFFSET ?large_display_target_symbol_selected_target_mask@@3QBDB ; large_display_target_symbol_selected_target_mask
  00686	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2134 : 			else

  0068b	eb 2f		 jmp	 SHORT $LN33@draw_radar
$LN32@draw_radar:

; 2135 : 				draw_2d_mono_sprite (large_display_target_symbol_selected_target_mask, dx, dy, MFD_COLOUR6);

  0068d	b8 04 00 00 00	 mov	 eax, 4
  00692	6b c8 05	 imul	 ecx, eax, 5
  00695	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0069b	52		 push	 edx
  0069c	51		 push	 ecx
  0069d	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  006a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a7	51		 push	 ecx
  006a8	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  006ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b2	68 00 00 00 00	 push	 OFFSET ?large_display_target_symbol_selected_target_mask@@3QBDB ; large_display_target_symbol_selected_target_mask
  006b7	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN33@draw_radar:

; 2136 : 
; 2137 : 			draw_2d_mono_sprite (large_display_target_symbol_selected_target, dx, dy, target_symbol_colour);

  006bc	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  006bf	50		 push	 eax
  006c0	51		 push	 ecx
  006c1	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  006c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006cb	51		 push	 ecx
  006cc	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  006d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d6	68 00 00 00 00	 push	 OFFSET ?large_display_target_symbol_selected_target@@3QBDB ; large_display_target_symbol_selected_target
  006db	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN31@draw_radar:

; 2138 : 		}
; 2139 : 	}
; 2140 : 	else

  006e0	e9 3f 02 00 00	 jmp	 $LN42@draw_radar
$LN21@draw_radar:

; 2141 : 	{
; 2142 : 		if (get_local_entity_int_value (target, INT_TYPE_GUNSHIP_RADAR_LOS_CLEAR))

  006e5	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  006e9	74 0a		 je	 SHORT $LN74@draw_radar
  006eb	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  006ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  006f0	89 4d a0	 mov	 DWORD PTR tv360[ebp], ecx
  006f3	eb 1d		 jmp	 SHORT $LN75@draw_radar
$LN74@draw_radar:
  006f5	68 5e 08 00 00	 push	 2142			; 0000085eH
  006fa	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  006ff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00705	52		 push	 edx
  00706	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0070b	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv360[ebp], 0
$LN75@draw_radar:
  00712	b8 01 00 00 00	 mov	 eax, 1
  00717	85 c0		 test	 eax, eax
  00719	74 09		 je	 SHORT $LN76@draw_radar
  0071b	c7 45 9c 50 00
	00 00		 mov	 DWORD PTR tv367[ebp], 80 ; 00000050H
  00722	eb 1d		 jmp	 SHORT $LN77@draw_radar
$LN76@draw_radar:
  00724	68 5e 08 00 00	 push	 2142			; 0000085eH
  00729	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0072e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00734	51		 push	 ecx
  00735	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0073a	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv367[ebp], 0
$LN77@draw_radar:
  00741	6a 50		 push	 80			; 00000050H
  00743	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00746	52		 push	 edx
  00747	69 45 a0 5c 04
	00 00		 imul	 eax, DWORD PTR tv360[ebp], 1116
  0074e	8b 4d 9c	 mov	 ecx, DWORD PTR tv367[ebp]
  00751	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00758	ff d2		 call	 edx
  0075a	85 c0		 test	 eax, eax
  0075c	0f 84 9e 00 00
	00		 je	 $LN34@draw_radar

; 2143 : 		{
; 2144 : 			if (selected_target)

  00762	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00766	74 69		 je	 SHORT $LN38@draw_radar

; 2145 : 			{
; 2146 : //VJ 030423 TSD render mod
; 2147 : 				if (display_on_tsd)

  00768	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  0076c	74 2e		 je	 SHORT $LN37@draw_radar

; 2148 : 					draw_2d_mono_sprite (small_display_target_symbols_los_mask[target_symbol_type], dx, dy, clear_mfd_colour);

  0076e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00773	50		 push	 eax
  00774	51		 push	 ecx
  00775	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0077a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077f	51		 push	 ecx
  00780	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00785	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078a	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  0078d	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_los_mask@@3PAPBDA[ecx*4]
  00794	52		 push	 edx
  00795	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2149 : 				else

  0079a	eb 35		 jmp	 SHORT $LN38@draw_radar
$LN37@draw_radar:

; 2150 : 					draw_2d_mono_sprite (small_display_target_symbols_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  0079c	b8 04 00 00 00	 mov	 eax, 4
  007a1	6b c8 05	 imul	 ecx, eax, 5
  007a4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007aa	52		 push	 edx
  007ab	51		 push	 ecx
  007ac	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  007b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b6	51		 push	 ecx
  007b7	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  007bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c1	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  007c4	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?small_display_target_symbols_los_mask@@3PAPBDA[eax*4]
  007cb	51		 push	 ecx
  007cc	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN38@draw_radar:

; 2151 : 			}
; 2152 : 
; 2153 : 			draw_2d_mono_sprite (small_display_target_symbols_los[target_symbol_type], dx, dy, target_symbol_colour);

  007d1	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  007d4	50		 push	 eax
  007d5	51		 push	 ecx
  007d6	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  007db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e0	51		 push	 ecx
  007e1	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  007e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007eb	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  007ee	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_los@@3PAPBDA[ecx*4]
  007f5	52		 push	 edx
  007f6	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2154 : 		}
; 2155 : 		else

  007fb	e9 99 00 00 00	 jmp	 $LN35@draw_radar
$LN34@draw_radar:

; 2156 : 		{
; 2157 : 			if (selected_target)

  00800	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00804	74 69		 je	 SHORT $LN41@draw_radar

; 2158 : 			{
; 2159 : //VJ 030423 TSD render mod
; 2160 : 				if (display_on_tsd)

  00806	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  0080a	74 2e		 je	 SHORT $LN40@draw_radar

; 2161 : 					draw_2d_mono_sprite (small_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, clear_mfd_colour);

  0080c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00811	50		 push	 eax
  00812	51		 push	 ecx
  00813	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00818	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081d	51		 push	 ecx
  0081e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00823	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00828	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  0082b	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_no_los_mask@@3PAPBDA[ecx*4]
  00832	52		 push	 edx
  00833	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2162 : 				else

  00838	eb 35		 jmp	 SHORT $LN41@draw_radar
$LN40@draw_radar:

; 2163 : 					draw_2d_mono_sprite (small_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  0083a	b8 04 00 00 00	 mov	 eax, 4
  0083f	6b c8 05	 imul	 ecx, eax, 5
  00842	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00848	52		 push	 edx
  00849	51		 push	 ecx
  0084a	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0084f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00854	51		 push	 ecx
  00855	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0085a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0085f	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  00862	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?small_display_target_symbols_no_los_mask@@3PAPBDA[eax*4]
  00869	51		 push	 ecx
  0086a	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN41@draw_radar:

; 2164 : 			}
; 2165 : 
; 2166 : 			draw_2d_mono_sprite (small_display_target_symbols_no_los[target_symbol_type], dx, dy, target_symbol_colour);

  0086f	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  00872	50		 push	 eax
  00873	51		 push	 ecx
  00874	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00879	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0087e	51		 push	 ecx
  0087f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00884	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00889	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  0088c	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_no_los@@3PAPBDA[ecx*4]
  00893	52		 push	 edx
  00894	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN35@draw_radar:

; 2167 : 		}
; 2168 : 
; 2169 : 		if (selected_target)

  00899	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  0089d	0f 84 81 00 00
	00		 je	 $LN42@draw_radar

; 2170 : 		{
; 2171 : //VJ 030423 TSD render mod
; 2172 : 			if (display_on_tsd)

  008a3	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  008a7	74 28		 je	 SHORT $LN43@draw_radar

; 2173 : 				draw_2d_mono_sprite (small_display_target_symbol_selected_target_mask, dx, dy, clear_mfd_colour);

  008a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  008ae	50		 push	 eax
  008af	51		 push	 ecx
  008b0	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  008b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ba	51		 push	 ecx
  008bb	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  008c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c5	68 00 00 00 00	 push	 OFFSET ?small_display_target_symbol_selected_target_mask@@3QBDB ; small_display_target_symbol_selected_target_mask
  008ca	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2174 : 			else

  008cf	eb 2f		 jmp	 SHORT $LN44@draw_radar
$LN43@draw_radar:

; 2175 : 				draw_2d_mono_sprite (small_display_target_symbol_selected_target_mask, dx, dy, MFD_COLOUR6);

  008d1	b8 04 00 00 00	 mov	 eax, 4
  008d6	6b c8 05	 imul	 ecx, eax, 5
  008d9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008df	52		 push	 edx
  008e0	51		 push	 ecx
  008e1	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  008e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008eb	51		 push	 ecx
  008ec	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  008f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f6	68 00 00 00 00	 push	 OFFSET ?small_display_target_symbol_selected_target_mask@@3QBDB ; small_display_target_symbol_selected_target_mask
  008fb	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN44@draw_radar:

; 2176 : 
; 2177 : 			draw_2d_mono_sprite (small_display_target_symbol_selected_target, dx, dy, target_symbol_colour);

  00900	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  00903	50		 push	 eax
  00904	51		 push	 ecx
  00905	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0090a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0090f	51		 push	 ecx
  00910	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00915	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0091a	68 00 00 00 00	 push	 OFFSET ?small_display_target_symbol_selected_target@@3QBDB ; small_display_target_symbol_selected_target
  0091f	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN42@draw_radar:

; 2178 : 		}
; 2179 : 	}
; 2180 : }

  00924	5f		 pop	 edi
  00925	5e		 pop	 esi
  00926	5b		 pop	 ebx
  00927	8b e5		 mov	 esp, ebp
  00929	5d		 pop	 ebp
  0092a	c2 14 00	 ret	 20			; 00000014H
?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ENDP ; draw_radar_target_symbol
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z
_TEXT	SEGMENT
tv90 = -108						; size = 4
_index$1 = -40						; size = 4
_index$2 = -36						; size = 4
_y2$ = -32						; size = 4
_x2$ = -28						; size = 4
_y1$ = -24						; size = 4
_x1$ = -20						; size = 4
_cos_theta$ = -16					; size = 4
_sin_theta$ = -12					; size = 4
_theta$ = -8						; size = 4
_num_segments$ = -4					; size = 4
_arc_size$ = 8						; size = 4
_radius$ = 12						; size = 4
_colour$ = 16						; size = 4
?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z PROC		; draw_radar_arc, COMDAT

; 1972 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1973 : 	int
; 1974 : 		num_segments;
; 1975 : 
; 1976 : 	float
; 1977 : 		theta,
; 1978 : 		sin_theta,
; 1979 : 		cos_theta,
; 1980 : 		x1,
; 1981 : 		y1,
; 1982 : 		x2,
; 1983 : 		y2;
; 1984 : 
; 1985 : 	num_segments = (int) (arc_size * (1.0 / COMANCHE_RADAR_SCAN_ARC_SEGMENT_SIZE));

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _arc_size$[ebp]
  0000e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4026eb1686b280e6
  00016	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0001a	89 45 fc	 mov	 DWORD PTR _num_segments$[ebp], eax

; 1986 : 
; 1987 : 	if (num_segments > 0)

  0001d	83 7d fc 00	 cmp	 DWORD PTR _num_segments$[ebp], 0
  00021	0f 8e 9f 01 00
	00		 jle	 $LN3@draw_radar

; 1988 : 	{
; 1989 : 		theta = arc_size * 0.5;

  00027	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _arc_size$[ebp]
  0002c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00034	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00038	f3 0f 11 45 f8	 movss	 DWORD PTR _theta$[ebp], xmm0

; 1990 : 
; 1991 : 		sine_cosine (theta, &sin_theta, &cos_theta);

  0003d	8d 45 dc	 lea	 eax, DWORD PTR _index$2[ebp]
  00040	50		 push	 eax
  00041	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _theta$[ebp]
  00046	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@40845f306446f9b4
  0004e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00052	51		 push	 ecx
  00053	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00058	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  0005d	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  00060	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00065	89 45 dc	 mov	 DWORD PTR _index$2[ebp], eax
  00068	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  0006b	f3 0f 10 04 85
	00 00 00 00	 movss	 xmm0, DWORD PTR ?sine_table@@3PAMA[eax*4]
  00074	f3 0f 11 45 f4	 movss	 DWORD PTR _sin_theta$[ebp], xmm0
  00079	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  0007c	05 00 04 00 00	 add	 eax, 1024		; 00000400H
  00081	89 45 dc	 mov	 DWORD PTR _index$2[ebp], eax
  00084	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  00087	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0008c	89 45 dc	 mov	 DWORD PTR _index$2[ebp], eax
  0008f	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  00092	f3 0f 10 04 85
	00 00 00 00	 movss	 xmm0, DWORD PTR ?sine_table@@3PAMA[eax*4]
  0009b	f3 0f 11 45 f0	 movss	 DWORD PTR _cos_theta$[ebp], xmm0

; 1992 : 
; 1993 : 		x1 = -radius * sin_theta;

  000a0	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
  000a5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000ac	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _sin_theta$[ebp]
  000b1	f3 0f 11 45 ec	 movss	 DWORD PTR _x1$[ebp], xmm0

; 1994 : 		y1 = radius * cos_theta;

  000b6	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
  000bb	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _cos_theta$[ebp]
  000c0	f3 0f 11 45 e8	 movss	 DWORD PTR _y1$[ebp], xmm0
$LN2@draw_radar:

; 1995 : 
; 1996 : 		while (num_segments--)

  000c5	8b 45 fc	 mov	 eax, DWORD PTR _num_segments$[ebp]
  000c8	89 45 94	 mov	 DWORD PTR tv90[ebp], eax
  000cb	8b 4d fc	 mov	 ecx, DWORD PTR _num_segments$[ebp]
  000ce	83 e9 01	 sub	 ecx, 1
  000d1	89 4d fc	 mov	 DWORD PTR _num_segments$[ebp], ecx
  000d4	83 7d 94 00	 cmp	 DWORD PTR tv90[ebp], 0
  000d8	0f 84 e8 00 00
	00		 je	 $LN3@draw_radar

; 1997 : 		{
; 1998 : 			theta -= COMANCHE_RADAR_SCAN_ARC_SEGMENT_SIZE;

  000de	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _theta$[ebp]
  000e3	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3db2b8c2
  000eb	f3 0f 11 45 f8	 movss	 DWORD PTR _theta$[ebp], xmm0

; 1999 : 
; 2000 : 			sine_cosine (theta, &sin_theta, &cos_theta);

  000f0	8d 45 d8	 lea	 eax, DWORD PTR _index$1[ebp]
  000f3	50		 push	 eax
  000f4	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _theta$[ebp]
  000f9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@40845f306446f9b4
  00101	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00105	51		 push	 ecx
  00106	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010b	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00110	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  00113	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00118	89 45 d8	 mov	 DWORD PTR _index$1[ebp], eax
  0011b	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  0011e	f3 0f 10 04 85
	00 00 00 00	 movss	 xmm0, DWORD PTR ?sine_table@@3PAMA[eax*4]
  00127	f3 0f 11 45 f4	 movss	 DWORD PTR _sin_theta$[ebp], xmm0
  0012c	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  0012f	05 00 04 00 00	 add	 eax, 1024		; 00000400H
  00134	89 45 d8	 mov	 DWORD PTR _index$1[ebp], eax
  00137	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  0013a	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0013f	89 45 d8	 mov	 DWORD PTR _index$1[ebp], eax
  00142	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  00145	f3 0f 10 04 85
	00 00 00 00	 movss	 xmm0, DWORD PTR ?sine_table@@3PAMA[eax*4]
  0014e	f3 0f 11 45 f0	 movss	 DWORD PTR _cos_theta$[ebp], xmm0

; 2001 : 
; 2002 : 			x2 = -radius * sin_theta;

  00153	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
  00158	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0015f	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _sin_theta$[ebp]
  00164	f3 0f 11 45 e4	 movss	 DWORD PTR _x2$[ebp], xmm0

; 2003 : 			y2 = radius * cos_theta;

  00169	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
  0016e	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _cos_theta$[ebp]
  00173	f3 0f 11 45 e0	 movss	 DWORD PTR _y2$[ebp], xmm0

; 2004 : 
; 2005 : 			draw_2d_line (x1, y1, x2, y2, colour);

  00178	8b 45 10	 mov	 eax, DWORD PTR _colour$[ebp]
  0017b	50		 push	 eax
  0017c	51		 push	 ecx
  0017d	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00182	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00187	51		 push	 ecx
  00188	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0018d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00192	51		 push	 ecx
  00193	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00198	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019d	51		 push	 ecx
  0019e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x1$[ebp]
  001a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2006 : 
; 2007 : 			x1 = x2;

  001ad	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x2$[ebp]
  001b2	f3 0f 11 45 ec	 movss	 DWORD PTR _x1$[ebp], xmm0

; 2008 : 			y1 = y2;

  001b7	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  001bc	f3 0f 11 45 e8	 movss	 DWORD PTR _y1$[ebp], xmm0

; 2009 : 		}

  001c1	e9 ff fe ff ff	 jmp	 $LN2@draw_radar
$LN3@draw_radar:

; 2010 : 	}
; 2011 : }

  001c6	5f		 pop	 edi
  001c7	5e		 pop	 esi
  001c8	5b		 pop	 ebx
  001c9	8b e5		 mov	 esp, ebp
  001cb	5d		 pop	 ebp
  001cc	c2 0c 00	 ret	 12			; 0000000cH
?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ENDP		; draw_radar_arc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z
_TEXT	SEGMENT
tv234 = -288						; size = 4
tv215 = -288						; size = 4
tv163 = -288						; size = 4
tv265 = -284						; size = 4
tv227 = -284						; size = 4
tv207 = -284						; size = 4
tv156 = -284						; size = 4
_x_adjust$1 = -216					; size = 4
_width$ = -212						; size = 4
_y_adjust$ = -208					; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
_target$ = 8						; size = 4
_target_range$ = 12					; size = 4
_radar$ = 16						; size = 4
?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z PROC ; display_radar_target_details, COMDAT

; 1788 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1789 : 	const char
; 1790 : 		*s;
; 1791 : 	char
; 1792 : 		buffer[200];
; 1793 : 
; 1794 : 	float
; 1795 : 		y_adjust,
; 1796 : 		width;
; 1797 : 
; 1798 : 	ASSERT (radar);

  0000c	83 7d 10 00	 cmp	 DWORD PTR _radar$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@display_ra
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA
  00017	83 c0 0a	 add	 eax, 10			; 0000000aH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_05EMNNHGFM@radar@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@display_ra:

; 1799 : 
; 1800 : 	if (comanche_damage.radar)

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  0002f	83 e0 01	 and	 eax, 1
  00032	74 05		 je	 SHORT $LN3@display_ra

; 1801 : 	{
; 1802 : 		return;

  00034	e9 2e 06 00 00	 jmp	 $LN1@display_ra
$LN3@display_ra:

; 1803 : 	}
; 1804 : 
; 1805 : 	if (draw_large_mfd)

  00039	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00040	74 12		 je	 SHORT $LN4@display_ra

; 1806 : 	{
; 1807 : 		y_adjust = -12.0;

  00042	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  0004a	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1808 : 	}
; 1809 : 	else

  00052	eb 10		 jmp	 SHORT $LN5@display_ra
$LN4@display_ra:

; 1810 : 	{
; 1811 : 		y_adjust = -5.0;

  00054	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  0005c	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN5@display_ra:

; 1812 : 	}
; 1813 : 
; 1814 : 	//
; 1815 : 	// name
; 1816 : 	//
; 1817 : 
; 1818 : 	s = get_target_display_name (target, buffer, draw_large_mfd);

  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?draw_large_mfd@@3HA
  00069	50		 push	 eax
  0006a	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00070	51		 push	 ecx
  00071	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00074	52		 push	 edx
  00075	e8 00 00 00 00	 call	 ?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z ; get_target_display_name
  0007a	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1819 : 
; 1820 : 	if (s)

  0007d	83 7d fc 00	 cmp	 DWORD PTR _s$[ebp], 0
  00081	0f 84 9b 00 00
	00		 je	 $LN6@display_ra

; 1821 : 	{
; 1822 : 		float x_adjust = -get_mono_font_string_width(s) / 2;

  00087	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00090	d9 9d e4 fe ff
	ff		 fstp	 DWORD PTR tv265[ebp]
  00096	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR tv265[ebp]
  0009e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000a5	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  000ad	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _x_adjust$1[ebp], xmm0

; 1823 : 
; 1824 : 		if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_AIR_RADAR)

  000b5	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 2 ; target_acquisition_system
  000bc	75 1e		 jne	 SHORT $LN7@display_ra

; 1825 : 			set_2d_mono_font_position (0.0, -0.9);

  000be	51		 push	 ecx
  000bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  000c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cc	51		 push	 ecx
  000cd	0f 57 c0	 xorps	 xmm0, xmm0
  000d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d5	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1826 : 		else

  000da	eb 1c		 jmp	 SHORT $LN8@display_ra
$LN7@display_ra:

; 1827 : 			set_2d_mono_font_position (0.0, -0.7);

  000dc	51		 push	 ecx
  000dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  000e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ea	51		 push	 ecx
  000eb	0f 57 c0	 xorps	 xmm0, xmm0
  000ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f3	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position
$LN8@display_ra:

; 1828 : 
; 1829 : 		set_mono_font_rel_position (x_adjust, -4.0);

  000f8	51		 push	 ecx
  000f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  00101	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00106	51		 push	 ecx
  00107	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$1[ebp]
  0010f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00114	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1830 : 
; 1831 : 		print_mono_font_string (s);

  00119	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN6@display_ra:

; 1832 : 	}
; 1833 : 
; 1834 : 	if (target)

  00122	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00126	0f 84 64 02 00
	00		 je	 $LN14@display_ra

; 1835 : 	{
; 1836 : 		//
; 1837 : 		// range
; 1838 : 		//
; 1839 : 
; 1840 : 		if ((target_range < 1000.0) && (!comanche_damage.laser_designator))

  0012c	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  00131	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  00139	66 0f 2f c8	 comisd	 xmm1, xmm0
  0013d	76 29		 jbe	 SHORT $LN10@display_ra
  0013f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00144	c1 e8 04	 shr	 eax, 4
  00147	83 e0 01	 and	 eax, 1
  0014a	75 1c		 jne	 SHORT $LN10@display_ra

; 1841 : 		{
; 1842 : 			sprintf (buffer, "%dm", (int) target_range);

  0014c	f3 0f 2c 45 0c	 cvttss2si eax, DWORD PTR _target_range$[ebp]
  00151	50		 push	 eax
  00152	68 00 00 00 00	 push	 OFFSET ??_C@_03NGNKAJPJ@?$CFdm@
  00157	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0015d	51		 push	 ecx
  0015e	e8 00 00 00 00	 call	 _sprintf
  00163	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1843 : 		}
; 1844 : 		else

  00166	eb 29		 jmp	 SHORT $LN11@display_ra
$LN10@display_ra:

; 1845 : 		{
; 1846 : 			sprintf (buffer, "%.1fKm", target_range * (1.0 / 1000.0));

  00168	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  0016d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00175	83 ec 08	 sub	 esp, 8
  00178	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0017d	68 00 00 00 00	 push	 OFFSET ??_C@_06OMCABMNO@?$CF?41fKm@
  00182	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00188	50		 push	 eax
  00189	e8 00 00 00 00	 call	 _sprintf
  0018e	83 c4 10	 add	 esp, 16			; 00000010H
$LN11@display_ra:

; 1847 : 		}
; 1848 : 
; 1849 : 		width = get_mono_font_string_width (buffer);

  00191	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00197	50		 push	 eax
  00198	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0019d	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 1850 : 
; 1851 : 		if (draw_large_mfd)

  001a3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  001aa	74 1e		 je	 SHORT $LN12@display_ra

; 1852 : 		{
; 1853 : 			width += 2.0;

  001ac	f3 0f 5a 85 2c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  001b4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  001bc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001c0	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 1854 : 		}
; 1855 : 		else

  001c8	eb 1c		 jmp	 SHORT $LN13@display_ra
$LN12@display_ra:

; 1856 : 		{
; 1857 : 			width += 1.0;

  001ca	f3 0f 5a 85 2c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  001d2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  001da	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001de	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0
$LN13@display_ra:

; 1858 : 		}
; 1859 : 
; 1860 : 		set_2d_mono_font_position (1.0, -1.0);

  001e6	51		 push	 ecx
  001e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  001ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f4	51		 push	 ecx
  001f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00202	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1861 : 
; 1862 : 		set_mono_font_rel_position (-width, y_adjust);

  00207	51		 push	 ecx
  00208	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00210	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00215	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  0021d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00224	51		 push	 ecx
  00225	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1863 : 
; 1864 : 		print_mono_font_string (buffer);

  0022f	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00235	50		 push	 eax
  00236	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1865 : 
; 1866 : 		//
; 1867 : 		// no line of sight
; 1868 : 		//
; 1869 : 
; 1870 : 		if (!get_local_entity_int_value (target, INT_TYPE_GUNSHIP_RADAR_LOS_CLEAR))

  0023b	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0023f	74 0d		 je	 SHORT $LN27@display_ra
  00241	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00244	8b 08		 mov	 ecx, DWORD PTR [eax]
  00246	89 8d e4 fe ff
	ff		 mov	 DWORD PTR tv156[ebp], ecx
  0024c	eb 20		 jmp	 SHORT $LN28@display_ra
$LN27@display_ra:
  0024e	68 4e 07 00 00	 push	 1870			; 0000074eH
  00253	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00258	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0025e	52		 push	 edx
  0025f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00264	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv156[ebp], 0
$LN28@display_ra:
  0026e	b8 01 00 00 00	 mov	 eax, 1
  00273	85 c0		 test	 eax, eax
  00275	74 0c		 je	 SHORT $LN29@display_ra
  00277	c7 85 e0 fe ff
	ff 50 00 00 00	 mov	 DWORD PTR tv163[ebp], 80 ; 00000050H
  00281	eb 20		 jmp	 SHORT $LN30@display_ra
$LN29@display_ra:
  00283	68 4e 07 00 00	 push	 1870			; 0000074eH
  00288	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0028d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00293	51		 push	 ecx
  00294	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00299	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv163[ebp], 0
$LN30@display_ra:
  002a3	6a 50		 push	 80			; 00000050H
  002a5	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  002a8	52		 push	 edx
  002a9	69 85 e4 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv156[ebp], 1116
  002b3	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR tv163[ebp]
  002b9	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  002c0	ff d2		 call	 edx
  002c2	85 c0		 test	 eax, eax
  002c4	0f 85 c6 00 00
	00		 jne	 $LN14@display_ra

; 1871 : 		{
; 1872 : 			width = get_mono_font_string_width ("NO LOS");

  002ca	68 00 00 00 00	 push	 OFFSET ??_C@_06HCPKJKPH@NO?5LOS@
  002cf	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  002d4	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 1873 : 
; 1874 : 			if (draw_large_mfd)

  002da	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  002e1	74 2e		 je	 SHORT $LN15@display_ra

; 1875 : 			{
; 1876 : 				width += 2.0;

  002e3	f3 0f 5a 85 2c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  002eb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  002f3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002f7	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 1877 : 
; 1878 : 				y_adjust = -25.0;

  002ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  00307	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1879 : 			}
; 1880 : 			else

  0030f	eb 2c		 jmp	 SHORT $LN16@display_ra
$LN15@display_ra:

; 1881 : 			{
; 1882 : 				width += 1.0;

  00311	f3 0f 5a 85 2c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  00319	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00321	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00325	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 1883 : 
; 1884 : 				y_adjust = -12.0;

  0032d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  00335	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN16@display_ra:

; 1885 : 			}
; 1886 : 
; 1887 : 			set_2d_mono_font_position (1.0, -1.0);

  0033d	51		 push	 ecx
  0033e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00346	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034b	51		 push	 ecx
  0034c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00354	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00359	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1888 : 
; 1889 : 			set_mono_font_rel_position (-width, y_adjust);

  0035e	51		 push	 ecx
  0035f	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00367	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036c	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00374	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0037b	51		 push	 ecx
  0037c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00381	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1890 : 
; 1891 : 			print_mono_font_string ("NO LOS");

  00386	68 00 00 00 00	 push	 OFFSET ??_C@_06HCPKJKPH@NO?5LOS@
  0038b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN14@display_ra:

; 1892 : 		}
; 1893 : 	}
; 1894 : 
; 1895 : 	//
; 1896 : 	// auto
; 1897 : 	//
; 1898 : 
; 1899 : 	if (radar->auto_target)

  00390	8b 45 10	 mov	 eax, DWORD PTR _radar$[ebp]
  00393	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  00397	74 77		 je	 SHORT $LN17@display_ra

; 1900 : 	{
; 1901 : 		if (draw_large_mfd)

  00399	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  003a0	74 12		 je	 SHORT $LN18@display_ra

; 1902 : 		{
; 1903 : 			y_adjust = 18.0;

  003a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41900000
  003aa	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1904 : 		}
; 1905 : 		else

  003b2	eb 10		 jmp	 SHORT $LN19@display_ra
$LN18@display_ra:

; 1906 : 		{
; 1907 : 			y_adjust = 9.0;

  003b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41100000
  003bc	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN19@display_ra:

; 1908 : 		}
; 1909 : 
; 1910 : 		set_2d_mono_font_position (-1.0, 1.0);

  003c4	51		 push	 ecx
  003c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d2	51		 push	 ecx
  003d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  003db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e0	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1911 : 
; 1912 : 		set_mono_font_rel_position (1.0, y_adjust);

  003e5	51		 push	 ecx
  003e6	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  003ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f3	51		 push	 ecx
  003f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00401	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1913 : 
; 1914 : 		print_mono_font_string ("AUTO");

  00406	68 00 00 00 00	 push	 OFFSET ??_C@_04LMMJFDCN@AUTO@
  0040b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN17@display_ra:

; 1915 : 	}
; 1916 : 
; 1917 : 	//
; 1918 : 	// locked
; 1919 : 	//
; 1920 : 
; 1921 : 	if (radar->target_locked)

  00410	8b 45 10	 mov	 eax, DWORD PTR _radar$[ebp]
  00413	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00417	74 77		 je	 SHORT $LN20@display_ra

; 1922 : 	{
; 1923 : 		if (draw_large_mfd)

  00419	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00420	74 12		 je	 SHORT $LN21@display_ra

; 1924 : 		{
; 1925 : 			y_adjust = -25.0;

  00422	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  0042a	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1926 : 		}
; 1927 : 		else

  00432	eb 10		 jmp	 SHORT $LN22@display_ra
$LN21@display_ra:

; 1928 : 		{
; 1929 : 			y_adjust = -12.0;

  00434	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  0043c	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN22@display_ra:

; 1930 : 		}
; 1931 : 
; 1932 : 		set_2d_mono_font_position (-1.0, -1.0);

  00444	51		 push	 ecx
  00445	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0044d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00452	51		 push	 ecx
  00453	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0045b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00460	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1933 : 
; 1934 : 		set_mono_font_rel_position (1.0, y_adjust);

  00465	51		 push	 ecx
  00466	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0046e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00473	51		 push	 ecx
  00474	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0047c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00481	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1935 : 
; 1936 : 		print_mono_font_string ("LOCKED");

  00486	68 00 00 00 00	 push	 OFFSET ??_C@_06KODELPLK@LOCKED@
  0048b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN20@display_ra:

; 1937 : 	}
; 1938 : 
; 1939 : 
; 1940 : // Jabberwock 031107 Designated targets
; 1941 : 
; 1942 : 	target = get_local_entity_parent (get_gunship_entity (), LIST_TYPE_TARGET);

  00490	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00497	74 0f		 je	 SHORT $LN31@display_ra
  00499	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0049e	8b 08		 mov	 ecx, DWORD PTR [eax]
  004a0	89 8d e4 fe ff
	ff		 mov	 DWORD PTR tv207[ebp], ecx
  004a6	eb 27		 jmp	 SHORT $LN32@display_ra
$LN31@display_ra:
  004a8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA
  004ae	81 c2 9a 00 00
	00		 add	 edx, 154		; 0000009aH
  004b4	52		 push	 edx
  004b5	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  004ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  004bf	50		 push	 eax
  004c0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004c5	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv207[ebp], 0
$LN32@display_ra:
  004cf	b9 01 00 00 00	 mov	 ecx, 1
  004d4	85 c9		 test	 ecx, ecx
  004d6	74 0c		 je	 SHORT $LN33@display_ra
  004d8	c7 85 e0 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv215[ebp], 38 ; 00000026H
  004e2	eb 27		 jmp	 SHORT $LN34@display_ra
$LN33@display_ra:
  004e4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA
  004ea	81 c2 9a 00 00
	00		 add	 edx, 154		; 0000009aH
  004f0	52		 push	 edx
  004f1	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  004f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  004fb	50		 push	 eax
  004fc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00501	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv215[ebp], 0
$LN34@display_ra:
  0050b	6a 26		 push	 38			; 00000026H
  0050d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00513	51		 push	 ecx
  00514	69 95 e4 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv207[ebp], 180
  0051e	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv215[ebp]
  00524	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0052b	ff d1		 call	 ecx
  0052d	89 45 08	 mov	 DWORD PTR _target$[ebp], eax

; 1943 : 
; 1944 : 	if (target && get_local_entity_parent (target, LIST_TYPE_DESIGNATED_TARGET))

  00530	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00534	0f 84 2d 01 00
	00		 je	 $LN23@display_ra
  0053a	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0053e	74 0d		 je	 SHORT $LN35@display_ra
  00540	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00543	8b 08		 mov	 ecx, DWORD PTR [eax]
  00545	89 8d e4 fe ff
	ff		 mov	 DWORD PTR tv227[ebp], ecx
  0054b	eb 20		 jmp	 SHORT $LN36@display_ra
$LN35@display_ra:
  0054d	68 98 07 00 00	 push	 1944			; 00000798H
  00552	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00557	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0055d	52		 push	 edx
  0055e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00563	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv227[ebp], 0
$LN36@display_ra:
  0056d	b8 01 00 00 00	 mov	 eax, 1
  00572	85 c0		 test	 eax, eax
  00574	74 0c		 je	 SHORT $LN37@display_ra
  00576	c7 85 e0 fe ff
	ff 0a 00 00 00	 mov	 DWORD PTR tv234[ebp], 10 ; 0000000aH
  00580	eb 20		 jmp	 SHORT $LN38@display_ra
$LN37@display_ra:
  00582	68 98 07 00 00	 push	 1944			; 00000798H
  00587	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0058c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00592	51		 push	 ecx
  00593	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00598	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv234[ebp], 0
$LN38@display_ra:
  005a2	6a 0a		 push	 10			; 0000000aH
  005a4	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  005a7	52		 push	 edx
  005a8	69 85 e4 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv227[ebp], 180
  005b2	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR tv234[ebp]
  005b8	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  005bf	ff d2		 call	 edx
  005c1	85 c0		 test	 eax, eax
  005c3	0f 84 9e 00 00
	00		 je	 $LN23@display_ra

; 1945 : 	{
; 1946 : 		if (draw_large_mfd)

  005c9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  005d0	74 12		 je	 SHORT $LN24@display_ra

; 1947 : 		{
; 1948 : 			y_adjust = -25.0;

  005d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  005da	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1949 : 		}
; 1950 : 		else

  005e2	eb 10		 jmp	 SHORT $LN25@display_ra
$LN24@display_ra:

; 1951 : 		{
; 1952 : 			y_adjust = -12.0;

  005e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  005ec	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN25@display_ra:

; 1953 : 		}
; 1954 : 
; 1955 : 		width = get_mono_font_string_width ("MARKED");

  005f4	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  005f9	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  005fe	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 1956 : 
; 1957 : 		set_2d_mono_font_position (1.0, -1.0);

  00604	51		 push	 ecx
  00605	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0060d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00612	51		 push	 ecx
  00613	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0061b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00620	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1958 : 
; 1959 : 		set_mono_font_rel_position (-width -1.0, y_adjust);

  00625	51		 push	 ecx
  00626	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0062e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00633	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  0063b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00642	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00646	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0064e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00652	51		 push	 ecx
  00653	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00658	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1960 : 
; 1961 : 		print_mono_font_string ("MARKED");

  0065d	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  00662	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN23@display_ra:
$LN1@display_ra:

; 1962 : 	}
; 1963 : // Jabberwock 031107 ends
; 1964 : 
; 1965 : }

  00667	5f		 pop	 edi
  00668	5e		 pop	 esi
  00669	5b		 pop	 ebx
  0066a	8b e5		 mov	 esp, ebp
  0066c	5d		 pop	 ebp
  0066d	c2 0c 00	 ret	 12			; 0000000cH
?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z ENDP ; display_radar_target_details
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?display_radar_scan_range@@YGXM@Z
_TEXT	SEGMENT
_y_adjust$ = -16					; size = 4
_width$ = -12						; size = 4
_s$ = -8						; size = 8
_scan_range$ = 8					; size = 4
?display_radar_scan_range@@YGXM@Z PROC			; display_radar_scan_range, COMDAT

; 1720 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1721 : //VJ 030807 radar range adjustable
; 1722 : 	char
; 1723 : 		s[8];
; 1724 : //		*s;
; 1725 : 
; 1726 : 	float
; 1727 : 		width,
; 1728 : 		y_adjust;
; 1729 : 
; 1730 : 	if (scan_range == COMANCHE_RADAR_SCAN_RANGE_500)

  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  0000e	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?COMANCHE_RADAR_SCAN_RANGE_500@@3MA
  00015	9f		 lahf
  00016	f6 c4 44	 test	 ah, 68			; 00000044H
  00019	7a 26		 jp	 SHORT $LN2@display_ra

; 1731 : 	{
; 1732 : //		s = "500m";
; 1733 : 		sprintf(s,"%.0fm",COMANCHE_RADAR_SCAN_RANGE_500);

  0001b	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?COMANCHE_RADAR_SCAN_RANGE_500@@3MA
  00023	83 ec 08	 sub	 esp, 8
  00026	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_05LIPABGF@?$CF?40fm@
  00030	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 _sprintf
  00039	83 c4 10	 add	 esp, 16			; 00000010H
  0003c	e9 1b 01 00 00	 jmp	 $LN11@display_ra
$LN2@display_ra:

; 1734 : 	}
; 1735 : 	else if (scan_range == COMANCHE_RADAR_SCAN_RANGE_1000)

  00041	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  00046	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?COMANCHE_RADAR_SCAN_RANGE_1000@@3MA
  0004d	9f		 lahf
  0004e	f6 c4 44	 test	 ah, 68			; 00000044H
  00051	7a 32		 jp	 SHORT $LN4@display_ra

; 1736 : 	{
; 1737 : //		s = "1Km";
; 1738 : 		sprintf(s,"%.0fKm",COMANCHE_RADAR_SCAN_RANGE_1000/1000);

  00053	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?COMANCHE_RADAR_SCAN_RANGE_1000@@3MA
  0005b	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  00063	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00067	83 ec 08	 sub	 esp, 8
  0006a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_06NBEADFGO@?$CF?40fKm@
  00074	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 _sprintf
  0007d	83 c4 10	 add	 esp, 16			; 00000010H
  00080	e9 d7 00 00 00	 jmp	 $LN11@display_ra
$LN4@display_ra:

; 1739 : 	}
; 1740 : 	else if (scan_range == COMANCHE_RADAR_SCAN_RANGE_2000)

  00085	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  0008a	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?COMANCHE_RADAR_SCAN_RANGE_2000@@3MA
  00091	9f		 lahf
  00092	f6 c4 44	 test	 ah, 68			; 00000044H
  00095	7a 32		 jp	 SHORT $LN6@display_ra

; 1741 : 	{
; 1742 : //		s = "2Km";
; 1743 : 		sprintf(s,"%.0fKm",COMANCHE_RADAR_SCAN_RANGE_2000/1000);

  00097	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?COMANCHE_RADAR_SCAN_RANGE_2000@@3MA
  0009f	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  000a7	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000ab	83 ec 08	 sub	 esp, 8
  000ae	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_06NBEADFGO@?$CF?40fKm@
  000b8	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 _sprintf
  000c1	83 c4 10	 add	 esp, 16			; 00000010H
  000c4	e9 93 00 00 00	 jmp	 $LN11@display_ra
$LN6@display_ra:

; 1744 : 	}
; 1745 : 	else if (scan_range == COMANCHE_RADAR_SCAN_RANGE_4000)

  000c9	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  000ce	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?COMANCHE_RADAR_SCAN_RANGE_4000@@3MA
  000d5	9f		 lahf
  000d6	f6 c4 44	 test	 ah, 68			; 00000044H
  000d9	7a 2f		 jp	 SHORT $LN8@display_ra

; 1746 : 	{
; 1747 : //		s = "4Km";
; 1748 : 		sprintf(s,"%.0fKm",COMANCHE_RADAR_SCAN_RANGE_4000/1000);

  000db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?COMANCHE_RADAR_SCAN_RANGE_4000@@3MA
  000e3	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  000eb	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000ef	83 ec 08	 sub	 esp, 8
  000f2	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000f7	68 00 00 00 00	 push	 OFFSET ??_C@_06NBEADFGO@?$CF?40fKm@
  000fc	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 _sprintf
  00105	83 c4 10	 add	 esp, 16			; 00000010H
  00108	eb 52		 jmp	 SHORT $LN11@display_ra
$LN8@display_ra:

; 1749 : 	}
; 1750 : 	else if (scan_range == COMANCHE_RADAR_SCAN_RANGE_8000)

  0010a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  0010f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?COMANCHE_RADAR_SCAN_RANGE_8000@@3MA
  00116	9f		 lahf
  00117	f6 c4 44	 test	 ah, 68			; 00000044H
  0011a	7a 2f		 jp	 SHORT $LN10@display_ra

; 1751 : 	{
; 1752 : //		s = "8Km";
; 1753 : 		sprintf(s,"%.0fKm",COMANCHE_RADAR_SCAN_RANGE_8000/1000);

  0011c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?COMANCHE_RADAR_SCAN_RANGE_8000@@3MA
  00124	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  0012c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00130	83 ec 08	 sub	 esp, 8
  00133	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00138	68 00 00 00 00	 push	 OFFSET ??_C@_06NBEADFGO@?$CF?40fKm@
  0013d	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  00140	50		 push	 eax
  00141	e8 00 00 00 00	 call	 _sprintf
  00146	83 c4 10	 add	 esp, 16			; 00000010H

; 1754 : 	}
; 1755 : 	else

  00149	eb 11		 jmp	 SHORT $LN11@display_ra
$LN10@display_ra:

; 1756 : 	{
; 1757 : //		s = "XXX";
; 1758 : 		sprintf(s,"XXX");

  0014b	68 00 00 00 00	 push	 OFFSET ??_C@_03MAMPKPPK@XXX@
  00150	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 _sprintf
  00159	83 c4 08	 add	 esp, 8
$LN11@display_ra:

; 1759 : 	}
; 1760 : 
; 1761 : 	width = get_mono_font_string_width (s);

  0015c	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  0015f	50		 push	 eax
  00160	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00165	d9 5d f4	 fstp	 DWORD PTR _width$[ebp]

; 1762 : 
; 1763 : 	if (draw_large_mfd)

  00168	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0016f	74 25		 je	 SHORT $LN12@display_ra

; 1764 : 	{
; 1765 : 		width += 2.0;

  00171	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  00176	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0017e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00182	f3 0f 11 45 f4	 movss	 DWORD PTR _width$[ebp], xmm0

; 1766 : 
; 1767 : 		y_adjust = 5.0;

  00187	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  0018f	f3 0f 11 45 f0	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1768 : 	}
; 1769 : 	else

  00194	eb 23		 jmp	 SHORT $LN13@display_ra
$LN12@display_ra:

; 1770 : 	{
; 1771 : 		width += 1.0;

  00196	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  0019b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  001a3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001a7	f3 0f 11 45 f4	 movss	 DWORD PTR _width$[ebp], xmm0

; 1772 : 
; 1773 : 		y_adjust = 2.0;

  001ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  001b4	f3 0f 11 45 f0	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN13@display_ra:

; 1774 : 	}
; 1775 : 
; 1776 : 	set_2d_mono_font_position (1.0, 1.0);

  001b9	51		 push	 ecx
  001ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c7	51		 push	 ecx
  001c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d5	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1777 : 
; 1778 : 	set_mono_font_rel_position (-width, y_adjust);

  001da	51		 push	 ecx
  001db	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  001e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e5	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _width$[ebp]
  001ea	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001f1	51		 push	 ecx
  001f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f7	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1779 : 
; 1780 : 	print_mono_font_string (s);

  001fc	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  001ff	50		 push	 eax
  00200	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1781 : }

  00205	5f		 pop	 edi
  00206	5e		 pop	 esi
  00207	5b		 pop	 ebx
  00208	8b e5		 mov	 esp, ebp
  0020a	5d		 pop	 ebp
  0020b	c2 04 00	 ret	 4
?display_radar_scan_range@@YGXM@Z ENDP			; display_radar_scan_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_field_of_regard_and_view_boxes@@YGXXZ
_TEXT	SEGMENT
_y$ = -8						; size = 4
_x$ = -4						; size = 4
?draw_field_of_regard_and_view_boxes@@YGXXZ PROC	; draw_field_of_regard_and_view_boxes, COMDAT

; 1691 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1692 : 	float
; 1693 : 		x,
; 1694 : 		y;
; 1695 : 
; 1696 : 	draw_2d_line (-0.4800, -0.7650,  0.4800, -0.7650, MFD_COLOUR1);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00017	52		 push	 edx
  00018	51		 push	 ecx
  00019	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf43d70a
  00021	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00026	51		 push	 ecx
  00027	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef5c28f
  0002f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00034	51		 push	 ecx
  00035	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf43d70a
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	51		 push	 ecx
  00043	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bef5c28f
  0004b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00050	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1697 : 	draw_2d_line (-0.4800, -0.7650, -0.4800, -1.0000, MFD_COLOUR1);

  00055	b8 04 00 00 00	 mov	 eax, 4
  0005a	6b c8 00	 imul	 ecx, eax, 0
  0005d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00063	52		 push	 edx
  00064	51		 push	 ecx
  00065	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0006d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00072	51		 push	 ecx
  00073	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bef5c28f
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	51		 push	 ecx
  00081	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf43d70a
  00089	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008e	51		 push	 ecx
  0008f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bef5c28f
  00097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1698 : 	draw_2d_line ( 0.4800, -0.7650,  0.4800, -1.0000, MFD_COLOUR1);

  000a1	b8 04 00 00 00	 mov	 eax, 4
  000a6	6b c8 00	 imul	 ecx, eax, 0
  000a9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000af	52		 push	 edx
  000b0	51		 push	 ecx
  000b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000be	51		 push	 ecx
  000bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef5c28f
  000c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cc	51		 push	 ecx
  000cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf43d70a
  000d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000da	51		 push	 ecx
  000db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef5c28f
  000e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1699 : 
; 1700 : 	x = eo_azimuth / eo_max_azimuth * 0.48;

  000ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  000f5	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_max_azimuth@@3MA
  000fd	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00101	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fdeb851eb851eb8
  00109	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0010d	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0

; 1701 : 	y = (eo_elevation / eo_min_elevation * -0.15) - 0.850;

  00112	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  0011a	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_min_elevation@@3MA
  00122	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00126	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfc3333333333333
  0012e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3feb333333333333
  00136	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0013a	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0

; 1702 : 
; 1703 : 	draw_2d_line (x - 0.0400, y - 0.0300, x + 0.0400, y - 0.0300, MFD_COLOUR1);

  0013f	b8 04 00 00 00	 mov	 eax, 4
  00144	6b c8 00	 imul	 ecx, eax, 0
  00147	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0014d	52		 push	 edx
  0014e	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00153	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  0015b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0015f	51		 push	 ecx
  00160	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00165	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0016a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00172	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00176	51		 push	 ecx
  00177	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017c	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00181	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  00189	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0018d	51		 push	 ecx
  0018e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00193	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00198	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  001a0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001a4	51		 push	 ecx
  001a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001aa	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1704 : 	draw_2d_line (x - 0.0400, y + 0.0300, x + 0.0400, y + 0.0300, MFD_COLOUR1);

  001af	b8 04 00 00 00	 mov	 eax, 4
  001b4	6b c8 00	 imul	 ecx, eax, 0
  001b7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001bd	52		 push	 edx
  001be	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  001c3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  001cb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001cf	51		 push	 ecx
  001d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d5	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  001da	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  001e2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001e6	51		 push	 ecx
  001e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ec	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  001f1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  001f9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001fd	51		 push	 ecx
  001fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00203	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00208	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00210	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00214	51		 push	 ecx
  00215	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1705 : 	draw_2d_line (x - 0.0400, y - 0.0300, x - 0.0400, y + 0.0300, MFD_COLOUR1);

  0021f	b8 04 00 00 00	 mov	 eax, 4
  00224	6b c8 00	 imul	 ecx, eax, 0
  00227	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0022d	52		 push	 edx
  0022e	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00233	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  0023b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0023f	51		 push	 ecx
  00240	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00245	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0024a	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00252	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00256	51		 push	 ecx
  00257	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025c	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00261	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  00269	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0026d	51		 push	 ecx
  0026e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00273	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00278	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00280	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00284	51		 push	 ecx
  00285	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1706 : 	draw_2d_line (x + 0.0400, y - 0.0300, x + 0.0400, y + 0.0300, MFD_COLOUR1);

  0028f	b8 04 00 00 00	 mov	 eax, 4
  00294	6b c8 00	 imul	 ecx, eax, 0
  00297	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0029d	52		 push	 edx
  0029e	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  002a3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  002ab	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002af	51		 push	 ecx
  002b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b5	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  002ba	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  002c2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002c6	51		 push	 ecx
  002c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002cc	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  002d1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  002d9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002dd	51		 push	 ecx
  002de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e3	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  002e8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  002f0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002f4	51		 push	 ecx
  002f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fa	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1707 : }

  002ff	5f		 pop	 edi
  00300	5e		 pop	 esi
  00301	5b		 pop	 ebx
  00302	8b e5		 mov	 esp, ebp
  00304	5d		 pop	 ebp
  00305	c3		 ret	 0
?draw_field_of_regard_and_view_boxes@@YGXXZ ENDP	; draw_field_of_regard_and_view_boxes
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?display_navigation_info@@YGXXZ
_TEXT	SEGMENT
tv399 = -260						; size = 8
tv400 = -252						; size = 8
tv367 = -252						; size = 4
tv347 = -252						; size = 4
tv283 = -252						; size = 4
tv254 = -252						; size = 4
tv218 = -252						; size = 4
tv78 = -252						; size = 4
tv708 = -248						; size = 4
tv647 = -248						; size = 4
tv359 = -248						; size = 4
tv339 = -248						; size = 4
tv275 = -248						; size = 4
tv246 = -248						; size = 4
tv210 = -248						; size = 4
tv70 = -248						; size = 4
_fvalue$1 = -180					; size = 4
_x_adjust$2 = -176					; size = 4
_sec$3 = -172						; size = 4
_sx$4 = -168						; size = 4
_sz$5 = -164						; size = 4
_seconds$6 = -160					; size = 4
_minutes$7 = -156					; size = 4
_hours$8 = -152						; size = 4
_time_to_go$9 = -148					; size = 4
_f$10 = -144						; size = 4
_i$11 = -140						; size = 4
_waypoint_range$12 = -136				; size = 4
_x_adjust$13 = -132					; size = 4
_waypoint_position$14 = -128				; size = 12
_buffer$ = -116						; size = 80
_gunship_position$ = -36				; size = 4
_wp$ = -32						; size = 4
_mid_y$ = -28						; size = 4
_top$ = -24						; size = 4
_bottom$ = -20						; size = 4
_upper_left$ = -16					; size = 4
_upper_right$ = -12					; size = 4
_right_edge$ = -8					; size = 4
_left_edge$ = -4					; size = 4
?display_navigation_info@@YGXXZ PROC			; display_navigation_info, COMDAT

; 1543 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1544 : 	const float
; 1545 : 		left_edge = -0.6,

  0000c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00014	f3 0f 11 45 fc	 movss	 DWORD PTR _left_edge$[ebp], xmm0

; 1546 : 		right_edge = 0.6,

  00019	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00021	f3 0f 11 45 f8	 movss	 DWORD PTR _right_edge$[ebp], xmm0

; 1547 : 		upper_right = -0.2,

  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  0002e	f3 0f 11 45 f4	 movss	 DWORD PTR _upper_right$[ebp], xmm0

; 1548 : 		upper_left = 0.2,

  00033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0003b	f3 0f 11 45 f0	 movss	 DWORD PTR _upper_left$[ebp], xmm0

; 1549 : 		bottom = -0.98,

  00040	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00048	f3 0f 11 45 ec	 movss	 DWORD PTR _bottom$[ebp], xmm0

; 1550 : 		top = -0.78,

  0004d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  00055	f3 0f 11 45 e8	 movss	 DWORD PTR _top$[ebp], xmm0

; 1551 : 		mid_y = -0.88;

  0005a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  00062	f3 0f 11 45 e4	 movss	 DWORD PTR _mid_y$[ebp], xmm0

; 1552 : 
; 1553 : 	entity
; 1554 : 		*wp;
; 1555 : 
; 1556 : 	vec3d
; 1557 : 		*gunship_position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00067	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0006e	74 0f		 je	 SHORT $LN12@display_na
  00070	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00075	8b 08		 mov	 ecx, DWORD PTR [eax]
  00077	89 8d 08 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], ecx
  0007d	eb 24		 jmp	 SHORT $LN13@display_na
$LN12@display_na:
  0007f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  00085	83 c2 0e	 add	 edx, 14			; 0000000eH
  00088	52		 push	 edx
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0008e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00099	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN13@display_na:
  000a3	b9 01 00 00 00	 mov	 ecx, 1
  000a8	85 c9		 test	 ecx, ecx
  000aa	74 0c		 je	 SHORT $LN14@display_na
  000ac	c7 85 04 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv78[ebp], 8
  000b6	eb 24		 jmp	 SHORT $LN15@display_na
$LN14@display_na:
  000b8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  000be	83 c2 0e	 add	 edx, 14			; 0000000eH
  000c1	52		 push	 edx
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000d2	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN15@display_na:
  000dc	6a 08		 push	 8
  000de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000e4	51		 push	 ecx
  000e5	6b 95 08 ff ff
	ff 60		 imul	 edx, DWORD PTR tv70[ebp], 96
  000ec	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR tv78[ebp]
  000f2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000f9	ff d1		 call	 ecx
  000fb	89 45 dc	 mov	 DWORD PTR _gunship_position$[ebp], eax

; 1558 : 
; 1559 : 	char
; 1560 : 		buffer[80];
; 1561 : 
; 1562 : 
; 1563 : 	// draw surrounding box
; 1564 : 	draw_2d_line(left_edge, mid_y, right_edge, mid_y, MFD_COLOUR1);

  000fe	b8 04 00 00 00	 mov	 eax, 4
  00103	6b c8 00	 imul	 ecx, eax, 0
  00106	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0010c	52		 push	 edx
  0010d	51		 push	 ecx
  0010e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  00116	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011b	51		 push	 ecx
  0011c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00124	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00129	51		 push	 ecx
  0012a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  00132	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00137	51		 push	 ecx
  00138	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00140	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00145	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1565 : 	draw_2d_line(left_edge, bottom, right_edge, bottom, MFD_COLOUR1);

  0014a	b8 04 00 00 00	 mov	 eax, 4
  0014f	6b c8 00	 imul	 ecx, eax, 0
  00152	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00158	52		 push	 edx
  00159	51		 push	 ecx
  0015a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00162	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00167	51		 push	 ecx
  00168	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00170	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00175	51		 push	 ecx
  00176	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  0017e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00183	51		 push	 ecx
  00184	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  0018c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00191	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1566 : 	draw_2d_line(left_edge, mid_y, left_edge, bottom, MFD_COLOUR1);

  00196	b8 04 00 00 00	 mov	 eax, 4
  0019b	6b c8 00	 imul	 ecx, eax, 0
  0019e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001a4	52		 push	 edx
  001a5	51		 push	 ecx
  001a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  001ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b3	51		 push	 ecx
  001b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  001bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c1	51		 push	 ecx
  001c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  001ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cf	51		 push	 ecx
  001d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  001d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001dd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1567 : 	draw_2d_line(right_edge, mid_y, right_edge, bottom, MFD_COLOUR1);

  001e2	b8 04 00 00 00	 mov	 eax, 4
  001e7	6b c8 00	 imul	 ecx, eax, 0
  001ea	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001f0	52		 push	 edx
  001f1	51		 push	 ecx
  001f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  001fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ff	51		 push	 ecx
  00200	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00208	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020d	51		 push	 ecx
  0020e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  00216	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021b	51		 push	 ecx
  0021c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00224	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00229	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1568 : 
; 1569 : 	draw_2d_line(left_edge, top, upper_right, top, MFD_COLOUR1);

  0022e	b8 04 00 00 00	 mov	 eax, 4
  00233	6b c8 00	 imul	 ecx, eax, 0
  00236	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0023c	52		 push	 edx
  0023d	51		 push	 ecx
  0023e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  00246	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024b	51		 push	 ecx
  0024c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00254	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00259	51		 push	 ecx
  0025a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  00262	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00267	51		 push	 ecx
  00268	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00270	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00275	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1570 : 	draw_2d_line(left_edge, top, left_edge, mid_y, MFD_COLOUR1);

  0027a	b8 04 00 00 00	 mov	 eax, 4
  0027f	6b c8 00	 imul	 ecx, eax, 0
  00282	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00288	52		 push	 edx
  00289	51		 push	 ecx
  0028a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  00292	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00297	51		 push	 ecx
  00298	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  002a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a5	51		 push	 ecx
  002a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  002ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b3	51		 push	 ecx
  002b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  002bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1571 : 	draw_2d_line(upper_right, top, upper_right, mid_y, MFD_COLOUR1);

  002c6	b8 04 00 00 00	 mov	 eax, 4
  002cb	6b c8 00	 imul	 ecx, eax, 0
  002ce	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002d4	52		 push	 edx
  002d5	51		 push	 ecx
  002d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  002de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e3	51		 push	 ecx
  002e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  002ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f1	51		 push	 ecx
  002f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  002fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ff	51		 push	 ecx
  00300	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00308	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1572 : 
; 1573 : 	draw_2d_line(right_edge, top, upper_left, top, MFD_COLOUR1);

  00312	b8 04 00 00 00	 mov	 eax, 4
  00317	6b c8 00	 imul	 ecx, eax, 0
  0031a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00320	52		 push	 edx
  00321	51		 push	 ecx
  00322	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  0032a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032f	51		 push	 ecx
  00330	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00338	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033d	51		 push	 ecx
  0033e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  00346	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034b	51		 push	 ecx
  0034c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00354	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00359	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1574 : 	draw_2d_line(right_edge, top, right_edge, mid_y, MFD_COLOUR1);

  0035e	b8 04 00 00 00	 mov	 eax, 4
  00363	6b c8 00	 imul	 ecx, eax, 0
  00366	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0036c	52		 push	 edx
  0036d	51		 push	 ecx
  0036e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  00376	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037b	51		 push	 ecx
  0037c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00384	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00389	51		 push	 ecx
  0038a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  00392	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00397	51		 push	 ecx
  00398	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  003a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1575 : 	draw_2d_line(upper_left, top, upper_left, mid_y, MFD_COLOUR1);

  003aa	b8 04 00 00 00	 mov	 eax, 4
  003af	6b c8 00	 imul	 ecx, eax, 0
  003b2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003b8	52		 push	 edx
  003b9	51		 push	 ecx
  003ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  003c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c7	51		 push	 ecx
  003c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  003d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d5	51		 push	 ecx
  003d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  003de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e3	51		 push	 ecx
  003e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  003ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1576 : 
; 1577 : 	set_mono_font_type (MONO_FONT_TYPE_6X10);

  003f6	6a 04		 push	 4
  003f8	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1578 : 
; 1579 : 	wp = get_local_entity_current_waypoint (get_gunship_entity ());

  003fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00402	50		 push	 eax
  00403	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  00408	89 45 e0	 mov	 DWORD PTR _wp$[ebp], eax

; 1580 : 	if (wp)

  0040b	83 7d e0 00	 cmp	 DWORD PTR _wp$[ebp], 0
  0040f	0f 84 46 04 00
	00		 je	 $LN2@display_na

; 1581 : 	{
; 1582 : 		vec3d
; 1583 : 			waypoint_position;
; 1584 : 
; 1585 : 		float
; 1586 : 			x_adjust,
; 1587 : 			waypoint_range;
; 1588 : 
; 1589 : 		get_waypoint_display_position (get_gunship_entity (), wp, &waypoint_position);

  00415	8d 45 80	 lea	 eax, DWORD PTR _waypoint_position$14[ebp]
  00418	50		 push	 eax
  00419	8b 4d e0	 mov	 ecx, DWORD PTR _wp$[ebp]
  0041c	51		 push	 ecx
  0041d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00423	52		 push	 edx
  00424	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 1590 : 
; 1591 : 		//
; 1592 : 		// waypoint id & range
; 1593 : 		//
; 1594 : 
; 1595 : 		waypoint_range = get_2d_range (gunship_position, &waypoint_position);

  00429	8d 45 80	 lea	 eax, DWORD PTR _waypoint_position$14[ebp]
  0042c	50		 push	 eax
  0042d	8b 4d dc	 mov	 ecx, DWORD PTR _gunship_position$[ebp]
  00430	51		 push	 ecx
  00431	e8 00 00 00 00	 call	 ?get_2d_range@@YGMPBUVEC3D@@0@Z ; get_2d_range
  00436	d9 9d 78 ff ff
	ff		 fstp	 DWORD PTR _waypoint_range$12[ebp]

; 1596 : 		if (!comanche_damage.navigation_computer)

  0043c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00441	c1 e8 07	 shr	 eax, 7
  00444	83 e0 01	 and	 eax, 1
  00447	0f 85 95 02 00
	00		 jne	 $LN3@display_na

; 1597 : 		{
; 1598 : 			if (waypoint_range < 1000.0)

  0044d	f3 0f 5a 85 78
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _waypoint_range$12[ebp]
  00455	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  0045d	66 0f 2f c8	 comisd	 xmm1, xmm0
  00461	0f 86 b1 00 00
	00		 jbe	 $LN5@display_na

; 1599 : 				sprintf (buffer, "%c:%dm", get_local_entity_char_value (wp, CHAR_TYPE_TAG), (int) waypoint_range);

  00467	83 7d e0 00	 cmp	 DWORD PTR _wp$[ebp], 0
  0046b	74 0d		 je	 SHORT $LN16@display_na
  0046d	8b 45 e0	 mov	 eax, DWORD PTR _wp$[ebp]
  00470	8b 08		 mov	 ecx, DWORD PTR [eax]
  00472	89 8d 08 ff ff
	ff		 mov	 DWORD PTR tv210[ebp], ecx
  00478	eb 24		 jmp	 SHORT $LN17@display_na
$LN16@display_na:
  0047a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  00480	83 c2 38	 add	 edx, 56			; 00000038H
  00483	52		 push	 edx
  00484	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00489	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0048e	50		 push	 eax
  0048f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00494	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv210[ebp], 0
$LN17@display_na:
  0049e	b9 01 00 00 00	 mov	 ecx, 1
  004a3	85 c9		 test	 ecx, ecx
  004a5	74 0c		 je	 SHORT $LN18@display_na
  004a7	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv218[ebp], 0
  004b1	eb 24		 jmp	 SHORT $LN19@display_na
$LN18@display_na:
  004b3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  004b9	83 c2 38	 add	 edx, 56			; 00000038H
  004bc	52		 push	 edx
  004bd	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  004c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  004c7	50		 push	 eax
  004c8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004cd	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv218[ebp], 0
$LN19@display_na:
  004d7	f3 0f 2c 8d 78
	ff ff ff	 cvttss2si ecx, DWORD PTR _waypoint_range$12[ebp]
  004df	51		 push	 ecx
  004e0	6a 00		 push	 0
  004e2	8b 55 e0	 mov	 edx, DWORD PTR _wp$[ebp]
  004e5	52		 push	 edx
  004e6	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR tv218[ebp]
  004ec	c1 e0 02	 shl	 eax, 2
  004ef	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR tv210[ebp]
  004f5	8b 94 c8 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[eax+ecx*8]
  004fc	ff d2		 call	 edx
  004fe	0f b6 c0	 movzx	 eax, al
  00501	50		 push	 eax
  00502	68 00 00 00 00	 push	 OFFSET ??_C@_06JCIGMCHD@?$CFc?3?$CFdm@
  00507	8d 4d 8c	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0050a	51		 push	 ecx
  0050b	e8 00 00 00 00	 call	 _sprintf
  00510	83 c4 10	 add	 esp, 16			; 00000010H
  00513	e9 c8 01 00 00	 jmp	 $LN8@display_na
$LN5@display_na:

; 1600 : 			else if (waypoint_range < 100000.0)

  00518	f3 0f 5a 85 78
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _waypoint_range$12[ebp]
  00520	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40f86a0000000000
  00528	66 0f 2f c8	 comisd	 xmm1, xmm0
  0052c	0f 86 f6 00 00
	00		 jbe	 $LN7@display_na

; 1601 : 			{
; 1602 : 				int
; 1603 : 					i;
; 1604 : 
; 1605 : 				float
; 1606 : 					f;
; 1607 : 
; 1608 : 				//
; 1609 : 				// this is required to prevent rounding errors around the 100Km mark
; 1610 : 				//
; 1611 : 
; 1612 : 				i = (int) waypoint_range * (1.0 / 100.0);

  00532	f3 0f 2c 85 78
	ff ff ff	 cvttss2si eax, DWORD PTR _waypoint_range$12[ebp]
  0053a	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  0053e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  00546	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  0054a	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _i$11[ebp], ecx

; 1613 : 				f = (float) i * (1.0 / 10.0);

  00550	f3 0f 2a 85 74
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _i$11[ebp]
  00558	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0055c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00564	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00568	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _f$10[ebp], xmm0

; 1614 : 
; 1615 : 				sprintf (buffer, "%c:%.1fKm", get_local_entity_char_value (wp, CHAR_TYPE_TAG), f);

  00570	83 7d e0 00	 cmp	 DWORD PTR _wp$[ebp], 0
  00574	74 0d		 je	 SHORT $LN20@display_na
  00576	8b 45 e0	 mov	 eax, DWORD PTR _wp$[ebp]
  00579	8b 08		 mov	 ecx, DWORD PTR [eax]
  0057b	89 8d 08 ff ff
	ff		 mov	 DWORD PTR tv246[ebp], ecx
  00581	eb 24		 jmp	 SHORT $LN21@display_na
$LN20@display_na:
  00583	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  00589	83 c2 48	 add	 edx, 72			; 00000048H
  0058c	52		 push	 edx
  0058d	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00592	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00597	50		 push	 eax
  00598	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0059d	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv246[ebp], 0
$LN21@display_na:
  005a7	b9 01 00 00 00	 mov	 ecx, 1
  005ac	85 c9		 test	 ecx, ecx
  005ae	74 0c		 je	 SHORT $LN22@display_na
  005b0	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv254[ebp], 0
  005ba	eb 24		 jmp	 SHORT $LN23@display_na
$LN22@display_na:
  005bc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  005c2	83 c2 48	 add	 edx, 72			; 00000048H
  005c5	52		 push	 edx
  005c6	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  005cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  005d0	50		 push	 eax
  005d1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005d6	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv254[ebp], 0
$LN23@display_na:
  005e0	f3 0f 5a 85 70
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _f$10[ebp]
  005e8	83 ec 08	 sub	 esp, 8
  005eb	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  005f0	6a 00		 push	 0
  005f2	8b 4d e0	 mov	 ecx, DWORD PTR _wp$[ebp]
  005f5	51		 push	 ecx
  005f6	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR tv254[ebp]
  005fc	c1 e2 02	 shl	 edx, 2
  005ff	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR tv246[ebp]
  00605	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[edx+eax*8]
  0060c	ff d1		 call	 ecx
  0060e	0f b6 d0	 movzx	 edx, al
  00611	52		 push	 edx
  00612	68 00 00 00 00	 push	 OFFSET ??_C@_09EKFBJBJG@?$CFc?3?$CF?41fKm@
  00617	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  0061a	50		 push	 eax
  0061b	e8 00 00 00 00	 call	 _sprintf
  00620	83 c4 14	 add	 esp, 20			; 00000014H

; 1616 : 			}
; 1617 : 			else

  00623	e9 b8 00 00 00	 jmp	 $LN8@display_na
$LN7@display_na:

; 1618 : 				sprintf (buffer, "%c:%dKm", get_local_entity_char_value (wp, CHAR_TYPE_TAG), (int) (waypoint_range * (1.0 / 1000.0)));

  00628	83 7d e0 00	 cmp	 DWORD PTR _wp$[ebp], 0
  0062c	74 0d		 je	 SHORT $LN24@display_na
  0062e	8b 45 e0	 mov	 eax, DWORD PTR _wp$[ebp]
  00631	8b 08		 mov	 ecx, DWORD PTR [eax]
  00633	89 8d 08 ff ff
	ff		 mov	 DWORD PTR tv275[ebp], ecx
  00639	eb 24		 jmp	 SHORT $LN25@display_na
$LN24@display_na:
  0063b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  00641	83 c2 4b	 add	 edx, 75			; 0000004bH
  00644	52		 push	 edx
  00645	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0064a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0064f	50		 push	 eax
  00650	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00655	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv275[ebp], 0
$LN25@display_na:
  0065f	b9 01 00 00 00	 mov	 ecx, 1
  00664	85 c9		 test	 ecx, ecx
  00666	74 0c		 je	 SHORT $LN26@display_na
  00668	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv283[ebp], 0
  00672	eb 24		 jmp	 SHORT $LN27@display_na
$LN26@display_na:
  00674	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  0067a	83 c2 4b	 add	 edx, 75			; 0000004bH
  0067d	52		 push	 edx
  0067e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00683	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  00688	50		 push	 eax
  00689	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0068e	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv283[ebp], 0
$LN27@display_na:
  00698	f3 0f 5a 85 78
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _waypoint_range$12[ebp]
  006a0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  006a8	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  006ac	51		 push	 ecx
  006ad	6a 00		 push	 0
  006af	8b 55 e0	 mov	 edx, DWORD PTR _wp$[ebp]
  006b2	52		 push	 edx
  006b3	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR tv283[ebp]
  006b9	c1 e0 02	 shl	 eax, 2
  006bc	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR tv275[ebp]
  006c2	8b 94 c8 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[eax+ecx*8]
  006c9	ff d2		 call	 edx
  006cb	0f b6 c0	 movzx	 eax, al
  006ce	50		 push	 eax
  006cf	68 00 00 00 00	 push	 OFFSET ??_C@_07CFANIJPM@?$CFc?3?$CFdKm@
  006d4	8d 4d 8c	 lea	 ecx, DWORD PTR _buffer$[ebp]
  006d7	51		 push	 ecx
  006d8	e8 00 00 00 00	 call	 _sprintf
  006dd	83 c4 10	 add	 esp, 16			; 00000010H
$LN8@display_na:

; 1619 : 		}
; 1620 : 		else

  006e0	eb 11		 jmp	 SHORT $LN4@display_na
$LN3@display_na:

; 1621 : 			sprintf (buffer, "-:--.-");

  006e2	68 00 00 00 00	 push	 OFFSET ??_C@_06BAOIPBEF@?9?3?9?9?4?9@
  006e7	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  006ea	50		 push	 eax
  006eb	e8 00 00 00 00	 call	 _sprintf
  006f0	83 c4 08	 add	 esp, 8
$LN4@display_na:

; 1622 : 
; 1623 : 		set_2d_mono_font_position (left_edge + 0.1, mid_y);

  006f3	51		 push	 ecx
  006f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  006fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00701	51		 push	 ecx
  00702	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0070a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0070f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1624 : 		set_mono_font_rel_position (1.0, 3.0);

  00714	51		 push	 ecx
  00715	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  0071d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00722	51		 push	 ecx
  00723	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0072b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00730	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1625 : 		print_mono_font_string (buffer);

  00735	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  00738	50		 push	 eax
  00739	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1626 : 
; 1627 : 		//
; 1628 : 		// time to go
; 1629 : 		//
; 1630 : 
; 1631 : 		if ((current_flight_dynamics->velocity_z.value > 0.1) && (!comanche_damage.navigation_computer))

  0073e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00743	f3 0f 5a 80 9c
	20 00 00	 cvtss2sd xmm0, DWORD PTR [eax+8348]
  0074b	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fb999999999999a
  00753	0f 86 80 00 00
	00		 jbe	 $LN9@display_na
  00759	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  0075e	c1 e8 07	 shr	 eax, 7
  00761	83 e0 01	 and	 eax, 1
  00764	75 73		 jne	 SHORT $LN9@display_na

; 1632 : 		{
; 1633 : 			float
; 1634 : 				time_to_go,
; 1635 : 				hours,
; 1636 : 				minutes,
; 1637 : 				seconds;
; 1638 : 
; 1639 : 			time_to_go = waypoint_range / current_flight_dynamics->velocity_z.value;

  00766	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0076b	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _waypoint_range$12[ebp]
  00773	f3 0f 5e 80 9c
	20 00 00	 divss	 xmm0, DWORD PTR [eax+8348]
  0077b	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _time_to_go$9[ebp], xmm0

; 1640 : 			get_digital_clock_values (time_to_go, &hours, &minutes, &seconds);

  00783	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _seconds$6[ebp]
  00789	50		 push	 eax
  0078a	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _minutes$7[ebp]
  00790	51		 push	 ecx
  00791	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _hours$8[ebp]
  00797	52		 push	 edx
  00798	51		 push	 ecx
  00799	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _time_to_go$9[ebp]
  007a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a6	e8 00 00 00 00	 call	 ?get_digital_clock_values@@YGXMPAM00@Z ; get_digital_clock_values

; 1641 : 			sprintf (buffer, "%02d:%02d:%02d", (int) hours, (int) minutes, (int) seconds);

  007ab	f3 0f 2c 85 60
	ff ff ff	 cvttss2si eax, DWORD PTR _seconds$6[ebp]
  007b3	50		 push	 eax
  007b4	f3 0f 2c 8d 64
	ff ff ff	 cvttss2si ecx, DWORD PTR _minutes$7[ebp]
  007bc	51		 push	 ecx
  007bd	f3 0f 2c 95 68
	ff ff ff	 cvttss2si edx, DWORD PTR _hours$8[ebp]
  007c5	52		 push	 edx
  007c6	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
  007cb	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  007ce	50		 push	 eax
  007cf	e8 00 00 00 00	 call	 _sprintf
  007d4	83 c4 14	 add	 esp, 20			; 00000014H

; 1642 : 		}
; 1643 : 		else

  007d7	eb 11		 jmp	 SHORT $LN10@display_na
$LN9@display_na:

; 1644 : 			strcpy (buffer, "--:--:--");

  007d9	68 00 00 00 00	 push	 OFFSET ??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@
  007de	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  007e1	50		 push	 eax
  007e2	e8 00 00 00 00	 call	 _strcpy
  007e7	83 c4 08	 add	 esp, 8
$LN10@display_na:

; 1645 : 
; 1646 : 		x_adjust = -get_mono_font_string_width(buffer);

  007ea	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  007ed	50		 push	 eax
  007ee	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  007f3	d9 9d 08 ff ff
	ff		 fstp	 DWORD PTR tv647[ebp]
  007f9	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR tv647[ebp]
  00801	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00808	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$13[ebp], xmm0

; 1647 : 		set_2d_mono_font_position (right_edge - 0.1, mid_y);

  00810	51		 push	 ecx
  00811	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  00819	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081e	51		 push	 ecx
  0081f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00827	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0082c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1648 : 		set_mono_font_rel_position (x_adjust, 3.0);

  00831	51		 push	 ecx
  00832	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  0083a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0083f	51		 push	 ecx
  00840	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$13[ebp]
  00848	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0084d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1649 : 		print_mono_font_string (buffer);

  00852	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  00855	50		 push	 eax
  00856	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN2@display_na:

; 1650 : 	}
; 1651 : 
; 1652 : 	// sector:
; 1653 : 	{
; 1654 : 		int sz, sx;
; 1655 : 		entity* sec = get_local_sector_entity(gunship_position);

  0085b	8b 45 dc	 mov	 eax, DWORD PTR _gunship_position$[ebp]
  0085e	50		 push	 eax
  0085f	e8 00 00 00 00	 call	 ?get_local_sector_entity@@YGPAUENTITY@@PAUVEC3D@@@Z ; get_local_sector_entity
  00864	89 85 54 ff ff
	ff		 mov	 DWORD PTR _sec$3[ebp], eax

; 1656 : 
; 1657 : 		sx = get_local_entity_int_value(sec, INT_TYPE_X_SECTOR);

  0086a	83 bd 54 ff ff
	ff 00		 cmp	 DWORD PTR _sec$3[ebp], 0
  00871	74 10		 je	 SHORT $LN28@display_na
  00873	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _sec$3[ebp]
  00879	8b 08		 mov	 ecx, DWORD PTR [eax]
  0087b	89 8d 08 ff ff
	ff		 mov	 DWORD PTR tv339[ebp], ecx
  00881	eb 24		 jmp	 SHORT $LN29@display_na
$LN28@display_na:
  00883	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  00889	83 c2 72	 add	 edx, 114		; 00000072H
  0088c	52		 push	 edx
  0088d	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00892	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00897	50		 push	 eax
  00898	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0089d	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv339[ebp], 0
$LN29@display_na:
  008a7	b9 01 00 00 00	 mov	 ecx, 1
  008ac	85 c9		 test	 ecx, ecx
  008ae	74 0c		 je	 SHORT $LN30@display_na
  008b0	c7 85 04 ff ff
	ff 15 01 00 00	 mov	 DWORD PTR tv347[ebp], 277 ; 00000115H
  008ba	eb 24		 jmp	 SHORT $LN31@display_na
$LN30@display_na:
  008bc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  008c2	83 c2 72	 add	 edx, 114		; 00000072H
  008c5	52		 push	 edx
  008c6	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  008cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  008d0	50		 push	 eax
  008d1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008d6	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv347[ebp], 0
$LN31@display_na:
  008e0	68 15 01 00 00	 push	 277			; 00000115H
  008e5	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _sec$3[ebp]
  008eb	51		 push	 ecx
  008ec	69 95 08 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv339[ebp], 1116
  008f6	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR tv347[ebp]
  008fc	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00903	ff d1		 call	 ecx
  00905	89 85 58 ff ff
	ff		 mov	 DWORD PTR _sx$4[ebp], eax

; 1658 : 		sz = get_local_entity_int_value(sec, INT_TYPE_Z_SECTOR);

  0090b	83 bd 54 ff ff
	ff 00		 cmp	 DWORD PTR _sec$3[ebp], 0
  00912	74 10		 je	 SHORT $LN32@display_na
  00914	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _sec$3[ebp]
  0091a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0091c	89 8d 08 ff ff
	ff		 mov	 DWORD PTR tv359[ebp], ecx
  00922	eb 24		 jmp	 SHORT $LN33@display_na
$LN32@display_na:
  00924	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  0092a	83 c2 73	 add	 edx, 115		; 00000073H
  0092d	52		 push	 edx
  0092e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00933	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00938	50		 push	 eax
  00939	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0093e	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv359[ebp], 0
$LN33@display_na:
  00948	b9 01 00 00 00	 mov	 ecx, 1
  0094d	85 c9		 test	 ecx, ecx
  0094f	74 0c		 je	 SHORT $LN34@display_na
  00951	c7 85 04 ff ff
	ff 16 01 00 00	 mov	 DWORD PTR tv367[ebp], 278 ; 00000116H
  0095b	eb 24		 jmp	 SHORT $LN35@display_na
$LN34@display_na:
  0095d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_navigation_info@@YGXXZ@4JA
  00963	83 c2 73	 add	 edx, 115		; 00000073H
  00966	52		 push	 edx
  00967	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0096c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00971	50		 push	 eax
  00972	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00977	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv367[ebp], 0
$LN35@display_na:
  00981	68 16 01 00 00	 push	 278			; 00000116H
  00986	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _sec$3[ebp]
  0098c	51		 push	 ecx
  0098d	69 95 08 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv359[ebp], 1116
  00997	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR tv367[ebp]
  0099d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  009a4	ff d1		 call	 ecx
  009a6	89 85 5c ff ff
	ff		 mov	 DWORD PTR _sz$5[ebp], eax

; 1659 : 
; 1660 : 		sprintf(buffer, "%d,%d", sx, sz);

  009ac	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _sz$5[ebp]
  009b2	50		 push	 eax
  009b3	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _sx$4[ebp]
  009b9	51		 push	 ecx
  009ba	68 00 00 00 00	 push	 OFFSET ??_C@_05KABNCBHK@?$CFd?0?$CFd@
  009bf	8d 55 8c	 lea	 edx, DWORD PTR _buffer$[ebp]
  009c2	52		 push	 edx
  009c3	e8 00 00 00 00	 call	 _sprintf
  009c8	83 c4 10	 add	 esp, 16			; 00000010H

; 1661 : 		set_2d_mono_font_position (left_edge, top);

  009cb	51		 push	 ecx
  009cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  009d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009d9	51		 push	 ecx
  009da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  009e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009e7	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1662 : 		set_mono_font_rel_position (4.0, 3.0);

  009ec	51		 push	 ecx
  009ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  009f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009fa	51		 push	 ecx
  009fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  00a03	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a08	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1663 : 		print_mono_font_string (buffer);

  00a0d	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  00a10	50		 push	 eax
  00a11	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1664 : 	}
; 1665 : 
; 1666 : 	// fuel
; 1667 : 	{
; 1668 : 		float x_adjust;
; 1669 : 		float fvalue = bound (kilograms_to_pounds (current_flight_dynamics->fuel_weight.value), 0.0, 9999.0);

  00a16	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00a1b	f3 0f 10 80 a4
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9380]
  00a23	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  00a2b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00a2f	0f 57 c9	 xorps	 xmm1, xmm1
  00a32	66 0f 2f c8	 comisd	 xmm1, xmm0
  00a36	76 0d		 jbe	 SHORT $LN38@display_na
  00a38	0f 57 c0	 xorps	 xmm0, xmm0
  00a3b	f2 0f 11 85 04
	ff ff ff	 movsd	 QWORD PTR tv400[ebp], xmm0
  00a43	eb 68		 jmp	 SHORT $LN39@display_na
$LN38@display_na:
  00a45	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00a4b	f3 0f 10 81 a4
	24 00 00	 movss	 xmm0, DWORD PTR [ecx+9380]
  00a53	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  00a5b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00a5f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@40c3878000000000
  00a67	76 12		 jbe	 SHORT $LN36@display_na
  00a69	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@40c3878000000000
  00a71	f2 0f 11 85 fc
	fe ff ff	 movsd	 QWORD PTR tv399[ebp], xmm0
  00a79	eb 22		 jmp	 SHORT $LN37@display_na
$LN36@display_na:
  00a7b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00a81	f3 0f 10 82 a4
	24 00 00	 movss	 xmm0, DWORD PTR [edx+9380]
  00a89	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  00a91	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00a95	f2 0f 11 85 fc
	fe ff ff	 movsd	 QWORD PTR tv399[ebp], xmm0
$LN37@display_na:
  00a9d	f2 0f 10 85 fc
	fe ff ff	 movsd	 xmm0, QWORD PTR tv399[ebp]
  00aa5	f2 0f 11 85 04
	ff ff ff	 movsd	 QWORD PTR tv400[ebp], xmm0
$LN39@display_na:
  00aad	f2 0f 5a 85 04
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv400[ebp]
  00ab5	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _fvalue$1[ebp], xmm0

; 1670 : 
; 1671 : 		sprintf(buffer, "%d lb", (int)fvalue);

  00abd	f3 0f 2c 85 4c
	ff ff ff	 cvttss2si eax, DWORD PTR _fvalue$1[ebp]
  00ac5	50		 push	 eax
  00ac6	68 00 00 00 00	 push	 OFFSET ??_C@_05MDNKIPAL@?$CFd?5lb@
  00acb	8d 4d 8c	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00ace	51		 push	 ecx
  00acf	e8 00 00 00 00	 call	 _sprintf
  00ad4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1672 : 		x_adjust = -get_mono_font_string_width(buffer) - 2.0;

  00ad7	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  00ada	50		 push	 eax
  00adb	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00ae0	d9 9d 08 ff ff
	ff		 fstp	 DWORD PTR tv708[ebp]
  00ae6	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR tv708[ebp]
  00aee	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00af5	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00af9	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4000000000000000
  00b01	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b05	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _x_adjust$2[ebp], xmm0

; 1673 : 
; 1674 : 		set_2d_mono_font_position (right_edge, top);

  00b0d	51		 push	 ecx
  00b0e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae14
  00b16	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b1b	51		 push	 ecx
  00b1c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00b24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b29	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1675 : 		set_mono_font_rel_position (x_adjust, 3.0);

  00b2e	51		 push	 ecx
  00b2f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  00b37	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b3c	51		 push	 ecx
  00b3d	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$2[ebp]
  00b45	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b4a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1676 : 		print_mono_font_string (buffer);

  00b4f	8d 45 8c	 lea	 eax, DWORD PTR _buffer$[ebp]
  00b52	50		 push	 eax
  00b53	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1677 : 	}
; 1678 : }

  00b58	5f		 pop	 edi
  00b59	5e		 pop	 esi
  00b5a	5b		 pop	 ebx
  00b5b	8b e5		 mov	 esp, ebp
  00b5d	5d		 pop	 ebp
  00b5e	c3		 ret	 0
?display_navigation_info@@YGXXZ ENDP			; display_navigation_info
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_torque_scale@@YGXXZ
_TEXT	SEGMENT
tv355 = -160						; size = 4
_v2$ = -92						; size = 4
_v1$ = -88						; size = 4
_u2$ = -84						; size = 4
_u1$ = -80						; size = 4
_buffer$ = -76						; size = 8
_y_adjust$ = -68					; size = 4
_x_adjust$ = -64					; size = 4
_y_torque$ = -60					; size = 4
_torque$ = -56						; size = 4
_tick_right$ = -52					; size = 4
_tick_left$ = -48					; size = 4
_scale_right$ = -44					; size = 4
_scale_left$ = -40					; size = 4
_scale_centre$ = -36					; size = 4
_scale_top$ = -32					; size = 4
_scale_50_torque$ = -28					; size = 4
_scale_100_torque$ = -24				; size = 4
_scale_height$ = -20					; size = 4
_box_bottom$ = -16					; size = 4
_box_top$ = -12						; size = 4
_box_end$ = -8						; size = 4
_box_start$ = -4					; size = 4
?draw_torque_scale@@YGXXZ PROC				; draw_torque_scale, COMDAT

; 1475 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1476 : 	const float
; 1477 : 		box_start = -0.94,

  0000c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf70a3d7
  00014	f3 0f 11 45 fc	 movss	 DWORD PTR _box_start$[ebp], xmm0

; 1478 : 		box_end = box_start + 0.2,

  00019	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3d70a4
  00021	f3 0f 11 45 f8	 movss	 DWORD PTR _box_end$[ebp], xmm0

; 1479 : 		box_top = -0.88,

  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  0002e	f3 0f 11 45 f4	 movss	 DWORD PTR _box_top$[ebp], xmm0

; 1480 : 		box_bottom = box_top - 0.1,

  00033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  0003b	f3 0f 11 45 f0	 movss	 DWORD PTR _box_bottom$[ebp], xmm0

; 1481 : 		scale_height = 0.5,

  00040	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00048	f3 0f 11 45 ec	 movss	 DWORD PTR _scale_height$[ebp], xmm0

; 1482 : 		scale_100_torque = box_top + scale_height * 100.0/120.0,

  0004d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beed3a07
  00055	f3 0f 11 45 e8	 movss	 DWORD PTR _scale_100_torque$[ebp], xmm0

; 1483 : 		scale_50_torque = box_top + scale_height * 50.0 / 120.0,

  0005a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2bf259
  00062	f3 0f 11 45 e4	 movss	 DWORD PTR _scale_50_torque$[ebp], xmm0

; 1484 : 		scale_top = box_top + scale_height,

  00067	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bec28f5c
  0006f	f3 0f 11 45 e0	 movss	 DWORD PTR _scale_top$[ebp], xmm0

; 1485 : 		scale_centre = (box_end + box_start) / 2,

  00074	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf570a3e
  0007c	f3 0f 11 45 dc	 movss	 DWORD PTR _scale_centre$[ebp], xmm0

; 1486 : 		scale_left = box_start + 0.085,

  00081	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5ae148
  00089	f3 0f 11 45 d8	 movss	 DWORD PTR _scale_left$[ebp], xmm0

; 1487 : 		scale_right = box_end - 0.085,

  0008e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf533333
  00096	f3 0f 11 45 d4	 movss	 DWORD PTR _scale_right$[ebp], xmm0

; 1488 : 		tick_left = box_start + 0.07,

  0009b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5eb852
  000a3	f3 0f 11 45 d0	 movss	 DWORD PTR _tick_left$[ebp], xmm0

; 1489 : 		tick_right = box_end - 0.07;

  000a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4f5c29
  000b0	f3 0f 11 45 cc	 movss	 DWORD PTR _tick_right$[ebp], xmm0

; 1490 : 
; 1491 : 	float
; 1492 : 		torque = current_flight_dynamics->combined_engine_torque.value,

  000b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000ba	f3 0f 10 80 8c
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9356]
  000c2	f3 0f 11 45 c8	 movss	 DWORD PTR _torque$[ebp], xmm0

; 1493 : 		y_torque = box_top + (torque / 120.0) * scale_height,

  000c7	f3 0f 5a 45 c8	 cvtss2sd xmm0, DWORD PTR _torque$[ebp]
  000cc	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@405e000000000000
  000d4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  000dc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfec28f5c0000000
  000e4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000e8	f3 0f 11 45 c4	 movss	 DWORD PTR _y_torque$[ebp], xmm0

; 1494 : 		x_adjust,
; 1495 : 		y_adjust;
; 1496 : 
; 1497 : 	char
; 1498 : 		buffer[8];
; 1499 : 
; 1500 : 	int
; 1501 : 		u1, u2, v1, v2;
; 1502 : 
; 1503 : 	// draw torque scale
; 1504 : 	get_2d_int_screen_coordinates (scale_left, box_top, &u1, &v1);

  000ed	8d 45 a8	 lea	 eax, DWORD PTR _v1$[ebp]
  000f0	50		 push	 eax
  000f1	8d 4d b0	 lea	 ecx, DWORD PTR _u1$[ebp]
  000f4	51		 push	 ecx
  000f5	51		 push	 ecx
  000f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  000fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00103	51		 push	 ecx
  00104	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5ae148
  0010c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00111	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 1505 : 	if (torque > 100.0)

  00116	f3 0f 5a 45 c8	 cvtss2sd xmm0, DWORD PTR _torque$[ebp]
  0011b	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4059000000000000
  00123	76 74		 jbe	 SHORT $LN2@draw_torqu

; 1506 : 	{
; 1507 : 		get_2d_int_screen_coordinates (scale_right, scale_100_torque, &u2, &v2);

  00125	8d 45 a4	 lea	 eax, DWORD PTR _v2$[ebp]
  00128	50		 push	 eax
  00129	8d 4d ac	 lea	 ecx, DWORD PTR _u2$[ebp]
  0012c	51		 push	 ecx
  0012d	51		 push	 ecx
  0012e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beed3a07
  00136	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013b	51		 push	 ecx
  0013c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf533333
  00144	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00149	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 1508 : 		draw_2d_hatched_area(scale_left, box_top, scale_right+ 0.02, y_torque, MFD_COLOUR_RED);

  0014e	b8 04 00 00 00	 mov	 eax, 4
  00153	6b c8 0f	 imul	 ecx, eax, 15
  00156	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0015c	52		 push	 edx
  0015d	51		 push	 ecx
  0015e	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _y_torque$[ebp]
  00163	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00168	51		 push	 ecx
  00169	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4e147b
  00171	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00176	51		 push	 ecx
  00177	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  0017f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00184	51		 push	 ecx
  00185	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5ae148
  0018d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00192	e8 00 00 00 00	 call	 ?draw_2d_hatched_area@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_hatched_area

; 1509 : 	}
; 1510 : 	else

  00197	eb 26		 jmp	 SHORT $LN3@draw_torqu
$LN2@draw_torqu:

; 1511 : 		get_2d_int_screen_coordinates (scale_right, y_torque, &u2, &v2);

  00199	8d 45 a4	 lea	 eax, DWORD PTR _v2$[ebp]
  0019c	50		 push	 eax
  0019d	8d 4d ac	 lea	 ecx, DWORD PTR _u2$[ebp]
  001a0	51		 push	 ecx
  001a1	51		 push	 ecx
  001a2	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _y_torque$[ebp]
  001a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ac	51		 push	 ecx
  001ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf533333
  001b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ba	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates
$LN3@draw_torqu:

; 1512 : 
; 1513 : 	set_block(u1, v2, u2, v1, MFD_COLOUR1);

  001bf	b8 04 00 00 00	 mov	 eax, 4
  001c4	6b c8 00	 imul	 ecx, eax, 0
  001c7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001cd	52		 push	 edx
  001ce	8b 45 a8	 mov	 eax, DWORD PTR _v1$[ebp]
  001d1	50		 push	 eax
  001d2	8b 4d ac	 mov	 ecx, DWORD PTR _u2$[ebp]
  001d5	51		 push	 ecx
  001d6	8b 55 a4	 mov	 edx, DWORD PTR _v2$[ebp]
  001d9	52		 push	 edx
  001da	8b 45 b0	 mov	 eax, DWORD PTR _u1$[ebp]
  001dd	50		 push	 eax
  001de	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 1514 : 
; 1515 : 	draw_2d_line(scale_centre, y_torque, scale_centre, scale_top, MFD_COLOUR1);

  001e3	b8 04 00 00 00	 mov	 eax, 4
  001e8	6b c8 00	 imul	 ecx, eax, 0
  001eb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001f1	52		 push	 edx
  001f2	51		 push	 ecx
  001f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bec28f5c
  001fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00200	51		 push	 ecx
  00201	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf570a3e
  00209	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020e	51		 push	 ecx
  0020f	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _y_torque$[ebp]
  00214	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00219	51		 push	 ecx
  0021a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf570a3e
  00222	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00227	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1516 : 
; 1517 : 	draw_2d_line(tick_left, scale_50_torque, tick_right, scale_50_torque, MFD_COLOUR1);

  0022c	b8 04 00 00 00	 mov	 eax, 4
  00231	6b c8 00	 imul	 ecx, eax, 0
  00234	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0023a	52		 push	 edx
  0023b	51		 push	 ecx
  0023c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2bf259
  00244	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00249	51		 push	 ecx
  0024a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4f5c29
  00252	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00257	51		 push	 ecx
  00258	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2bf259
  00260	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00265	51		 push	 ecx
  00266	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5eb852
  0026e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00273	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1518 : 	draw_2d_line(tick_left, scale_100_torque, tick_right, scale_100_torque, MFD_COLOUR1);

  00278	b8 04 00 00 00	 mov	 eax, 4
  0027d	6b c8 00	 imul	 ecx, eax, 0
  00280	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00286	52		 push	 edx
  00287	51		 push	 ecx
  00288	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beed3a07
  00290	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00295	51		 push	 ecx
  00296	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4f5c29
  0029e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a3	51		 push	 ecx
  002a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beed3a07
  002ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b1	51		 push	 ecx
  002b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5eb852
  002ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002bf	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1519 : 
; 1520 : 	// draw surrounding box
; 1521 : 	draw_2d_line(box_start, box_top, box_end, box_top, MFD_COLOUR1);

  002c4	b8 04 00 00 00	 mov	 eax, 4
  002c9	6b c8 00	 imul	 ecx, eax, 0
  002cc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002d2	52		 push	 edx
  002d3	51		 push	 ecx
  002d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  002dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e1	51		 push	 ecx
  002e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3d70a4
  002ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ef	51		 push	 ecx
  002f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  002f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fd	51		 push	 ecx
  002fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf70a3d7
  00306	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1522 : 	draw_2d_line(box_start, box_bottom, box_end, box_bottom, MFD_COLOUR1);

  00310	b8 04 00 00 00	 mov	 eax, 4
  00315	6b c8 00	 imul	 ecx, eax, 0
  00318	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0031e	52		 push	 edx
  0031f	51		 push	 ecx
  00320	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00328	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032d	51		 push	 ecx
  0032e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3d70a4
  00336	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033b	51		 push	 ecx
  0033c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00344	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00349	51		 push	 ecx
  0034a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf70a3d7
  00352	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00357	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1523 : 	draw_2d_line(box_start, box_top, box_start, box_bottom, MFD_COLOUR1);

  0035c	b8 04 00 00 00	 mov	 eax, 4
  00361	6b c8 00	 imul	 ecx, eax, 0
  00364	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0036a	52		 push	 edx
  0036b	51		 push	 ecx
  0036c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00374	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00379	51		 push	 ecx
  0037a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf70a3d7
  00382	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00387	51		 push	 ecx
  00388	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  00390	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00395	51		 push	 ecx
  00396	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf70a3d7
  0039e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1524 : 	draw_2d_line(box_end, box_top, box_end, box_bottom, MFD_COLOUR1);

  003a8	b8 04 00 00 00	 mov	 eax, 4
  003ad	6b c8 00	 imul	 ecx, eax, 0
  003b0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003b6	52		 push	 edx
  003b7	51		 push	 ecx
  003b8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  003c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c5	51		 push	 ecx
  003c6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3d70a4
  003ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d3	51		 push	 ecx
  003d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  003dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e1	51		 push	 ecx
  003e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3d70a4
  003ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ef	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1525 : 
; 1526 : 	// print digital readout
; 1527 : 	set_mono_font_type (MONO_FONT_TYPE_6X10);

  003f4	6a 04		 push	 4
  003f6	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1528 : 	y_adjust = 3.0;

  003fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  00403	f3 0f 11 45 bc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1529 : 
; 1530 : 	sprintf(buffer, "%3d", (int)(torque + 0.5));

  00408	f3 0f 5a 45 c8	 cvtss2sd xmm0, DWORD PTR _torque$[ebp]
  0040d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00415	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00419	50		 push	 eax
  0041a	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  0041f	8d 4d b4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00422	51		 push	 ecx
  00423	e8 00 00 00 00	 call	 _sprintf
  00428	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1531 : 	x_adjust = -get_mono_font_string_width(buffer) - 1;

  0042b	8d 45 b4	 lea	 eax, DWORD PTR _buffer$[ebp]
  0042e	50		 push	 eax
  0042f	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00434	d9 9d 60 ff ff
	ff		 fstp	 DWORD PTR tv355[ebp]
  0043a	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR tv355[ebp]
  00442	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00449	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00451	f3 0f 11 45 c0	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 1532 : 
; 1533 : 	set_2d_mono_font_position (box_end, box_top);

  00456	51		 push	 ecx
  00457	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  0045f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00464	51		 push	 ecx
  00465	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3d70a4
  0046d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00472	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1534 : 	set_mono_font_rel_position (x_adjust, y_adjust);

  00477	51		 push	 ecx
  00478	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0047d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00482	51		 push	 ecx
  00483	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00488	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0048d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1535 : 	print_mono_font_string(buffer);

  00492	8d 45 b4	 lea	 eax, DWORD PTR _buffer$[ebp]
  00495	50		 push	 eax
  00496	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1536 : }

  0049b	5f		 pop	 edi
  0049c	5e		 pop	 esi
  0049d	5b		 pop	 ebx
  0049e	8b e5		 mov	 esp, ebp
  004a0	5d		 pop	 ebp
  004a1	c3		 ret	 0
?draw_torque_scale@@YGXXZ ENDP				; draw_torque_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_heading_scale@@YGXMH@Z
_TEXT	SEGMENT
tv190 = -192						; size = 4
tv477 = -188						; size = 4
tv323 = -188						; size = 4
tv321 = -188						; size = 4
tv182 = -188						; size = 4
_buffer$1 = -120					; size = 8
_x_adjust$2 = -112					; size = 4
_command_heading$3 = -108				; size = 4
_bearing$4 = -104					; size = 4
_dz$5 = -100						; size = 4
_dx$6 = -96						; size = 4
_waypoint_position$7 = -92				; size = 12
_gunship_position$8 = -80				; size = 4
_wp$9 = -76						; size = 4
_tick_type$ = -72					; size = 4
_int_heading_step_5$ = -68				; size = 4
_loop$ = -64						; size = 4
_mod_heading_step_5$ = -60				; size = 4
_heading_step_5$ = -56					; size = 4
_u$ = -52						; size = 4
_x$ = -48						; size = 4
_mfd_vp_x_max$ = -44					; size = 4
_mfd_vp_x_min$ = -40					; size = 4
_tick_datum_bottom$ = -36				; size = 4
_tick_datum_top$ = -32					; size = 4
_tick_bottom$ = -28					; size = 4
_tick_top$ = -24					; size = 4
_y_adjust$ = -20					; size = 4
_x_adjust_double$ = -16					; size = 4
_x_adjust_single$ = -12					; size = 4
_heading_tick_x_spacing$ = -8				; size = 4
_heading_width_ratio$ = -4				; size = 4
_heading$ = 8						; size = 4
_draw_command_heading$ = 12				; size = 4
?draw_heading_scale@@YGXMH@Z PROC			; draw_heading_scale, COMDAT

; 1302 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1303 : 	float
; 1304 : 		heading_width_ratio,
; 1305 : 		heading_tick_x_spacing,
; 1306 : 		x_adjust_single,
; 1307 : 		x_adjust_double,
; 1308 : 		y_adjust,
; 1309 : 		tick_top,
; 1310 : 		tick_bottom,
; 1311 : 		tick_datum_top,
; 1312 : 		tick_datum_bottom,
; 1313 : 		mfd_vp_x_min,
; 1314 : 		mfd_vp_x_max,
; 1315 : 		x,
; 1316 : 		u,
; 1317 : 		heading_step_5,
; 1318 : 		mod_heading_step_5;
; 1319 : 
; 1320 : 	int
; 1321 : 		loop,
; 1322 : 		int_heading_step_5,
; 1323 : 		tick_type;
; 1324 : 
; 1325 : 	//
; 1326 : 	// sort large and small mfd differences
; 1327 : 	//
; 1328 : 
; 1329 : 	set_mono_font_type (MONO_FONT_TYPE_5X9);

  0000c	6a 02		 push	 2
  0000e	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1330 : 
; 1331 : 	x_adjust_single  			= -2.0;

  00013	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  0001b	f3 0f 11 45 f4	 movss	 DWORD PTR _x_adjust_single$[ebp], xmm0

; 1332 : 	x_adjust_double  			= -5.0;

  00020	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  00028	f3 0f 11 45 f0	 movss	 DWORD PTR _x_adjust_double$[ebp], xmm0

; 1333 : 	y_adjust			  		= -12.0;

  0002d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  00035	f3 0f 11 45 ec	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1334 : 
; 1335 : 	tick_top                   = 0.85;

  0003a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00042	f3 0f 11 45 e8	 movss	 DWORD PTR _tick_top$[ebp], xmm0

; 1336 : 	tick_bottom                = 0.85 - 0.075;

  00047	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f466666
  0004f	f3 0f 11 45 e4	 movss	 DWORD PTR _tick_bottom$[ebp], xmm0

; 1337 : 	tick_datum_top		  		= tick_top + 0.020;

  00054	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _tick_top$[ebp]
  00059	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00061	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00065	f3 0f 11 45 e0	 movss	 DWORD PTR _tick_datum_top$[ebp], xmm0

; 1338 : 	tick_datum_bottom	  		= tick_bottom - 0.020;

  0006a	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _tick_bottom$[ebp]
  0006f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00077	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0007b	f3 0f 11 45 dc	 movss	 DWORD PTR _tick_datum_bottom$[ebp], xmm0

; 1339 : 
; 1340 : 	//
; 1341 : 	// adjust 2D environment for heading scale clipping
; 1342 : 	//
; 1343 : 
; 1344 : 	if (draw_main_display)

  00080	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_main_display@@3HA, 0
  00087	74 33		 je	 SHORT $LN5@draw_headi

; 1345 : 	{
; 1346 : 		heading_width_ratio		= 0.65;

  00089	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00091	f3 0f 11 45 fc	 movss	 DWORD PTR _heading_width_ratio$[ebp], xmm0

; 1347 : 		heading_tick_x_spacing = heading_width_ratio / 5;

  00096	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _heading_width_ratio$[ebp]
  0009b	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40a00000
  000a3	f3 0f 11 45 f8	 movss	 DWORD PTR _heading_tick_x_spacing$[ebp], xmm0

; 1348 : 		get_2d_float_screen_x_coordinate (0.0, &u);

  000a8	8d 45 cc	 lea	 eax, DWORD PTR _u$[ebp]
  000ab	50		 push	 eax
  000ac	51		 push	 ecx
  000ad	0f 57 c0	 xorps	 xmm0, xmm0
  000b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b5	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 1349 : 	}
; 1350 : 	else

  000ba	eb 36		 jmp	 SHORT $LN6@draw_headi
$LN5@draw_headi:

; 1351 : 	{
; 1352 : 		heading_width_ratio		= 0.4;

  000bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  000c4	f3 0f 11 45 fc	 movss	 DWORD PTR _heading_width_ratio$[ebp], xmm0

; 1353 : 		heading_tick_x_spacing = heading_width_ratio / 3;

  000c9	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _heading_width_ratio$[ebp]
  000ce	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40400000
  000d6	f3 0f 11 45 f8	 movss	 DWORD PTR _heading_tick_x_spacing$[ebp], xmm0

; 1354 : 		get_2d_float_screen_x_coordinate (-0.4, &u);

  000db	8d 45 cc	 lea	 eax, DWORD PTR _u$[ebp]
  000de	50		 push	 eax
  000df	51		 push	 ecx
  000e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  000e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ed	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate
$LN6@draw_headi:

; 1355 : 	}
; 1356 : 
; 1357 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN * heading_width_ratio, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX * heading_width_ratio, MFD_WINDOW_Y_MAX);

  000f2	51		 push	 ecx
  000f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  000fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00100	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _heading_width_ratio$[ebp]
  00105	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3feff7ced916872b
  0010d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00111	51		 push	 ecx
  00112	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00117	51		 push	 ecx
  00118	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00120	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00125	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _heading_width_ratio$[ebp]
  0012a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff0000000000000
  00132	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00136	51		 push	 ecx
  00137	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 1358 : 	mfd_vp_x_min = u - (mfd_viewport_size * (heading_width_ratio * 0.5));

  00147	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _u$[ebp]
  0014c	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00154	f3 0f 5a 55 fc	 cvtss2sd xmm2, DWORD PTR _heading_width_ratio$[ebp]
  00159	f2 0f 59 15 00
	00 00 00	 mulsd	 xmm2, QWORD PTR __real@3fe0000000000000
  00161	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00165	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00169	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0016d	f3 0f 11 45 d8	 movss	 DWORD PTR _mfd_vp_x_min$[ebp], xmm0

; 1359 : 	mfd_vp_x_max = u + (mfd_viewport_size * (heading_width_ratio * 0.5)) - 0.001;

  00172	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _u$[ebp]
  00177	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  0017f	f3 0f 5a 55 fc	 cvtss2sd xmm2, DWORD PTR _heading_width_ratio$[ebp]
  00184	f2 0f 59 15 00
	00 00 00	 mulsd	 xmm2, QWORD PTR __real@3fe0000000000000
  0018c	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00190	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00194	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0019c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001a0	f3 0f 11 45 d4	 movss	 DWORD PTR _mfd_vp_x_max$[ebp], xmm0

; 1360 : 	set_2d_viewport (mfd_env, mfd_vp_x_min, mfd_viewport_y_min, mfd_vp_x_max, mfd_viewport_y_max);

  001a5	51		 push	 ecx
  001a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  001ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b3	51		 push	 ecx
  001b4	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_vp_x_max$[ebp]
  001b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001be	51		 push	 ecx
  001bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  001c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cc	51		 push	 ecx
  001cd	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_vp_x_min$[ebp]
  001d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001dc	50		 push	 eax
  001dd	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1361 : 
; 1362 : 	//
; 1363 : 	// draw heading datum tick
; 1364 : 	//
; 1365 : 
; 1366 : 	draw_2d_line (0.0, tick_datum_top, 0.0, tick_datum_bottom, MFD_COLOUR1);

  001e2	b8 04 00 00 00	 mov	 eax, 4
  001e7	6b c8 00	 imul	 ecx, eax, 0
  001ea	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001f0	52		 push	 edx
  001f1	51		 push	 ecx
  001f2	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _tick_datum_bottom$[ebp]
  001f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fc	51		 push	 ecx
  001fd	0f 57 c0	 xorps	 xmm0, xmm0
  00200	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00205	51		 push	 ecx
  00206	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _tick_datum_top$[ebp]
  0020b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00210	51		 push	 ecx
  00211	0f 57 c0	 xorps	 xmm0, xmm0
  00214	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00219	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1367 : 	draw_2d_line (-0.025, tick_datum_top, 0.025, tick_datum_top, MFD_COLOUR1);

  0021e	b8 04 00 00 00	 mov	 eax, 4
  00223	6b c8 00	 imul	 ecx, eax, 0
  00226	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0022c	52		 push	 edx
  0022d	51		 push	 ecx
  0022e	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _tick_datum_top$[ebp]
  00233	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00238	51		 push	 ecx
  00239	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ccccccd
  00241	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00246	51		 push	 ecx
  00247	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _tick_datum_top$[ebp]
  0024c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00251	51		 push	 ecx
  00252	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  0025a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1368 : 	draw_2d_line (-0.025, tick_datum_bottom, 0.025, tick_datum_bottom, MFD_COLOUR1);

  00264	b8 04 00 00 00	 mov	 eax, 4
  00269	6b c8 00	 imul	 ecx, eax, 0
  0026c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00272	52		 push	 edx
  00273	51		 push	 ecx
  00274	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _tick_datum_bottom$[ebp]
  00279	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027e	51		 push	 ecx
  0027f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ccccccd
  00287	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028c	51		 push	 ecx
  0028d	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _tick_datum_bottom$[ebp]
  00292	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00297	51		 push	 ecx
  00298	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  002a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1369 : 
; 1370 : 	draw_2d_line (-1.0, 0.8125, 1.0, 0.8125, MFD_COLOUR1);

  002aa	b8 04 00 00 00	 mov	 eax, 4
  002af	6b c8 00	 imul	 ecx, eax, 0
  002b2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002b8	52		 push	 edx
  002b9	51		 push	 ecx
  002ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f500000
  002c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c7	51		 push	 ecx
  002c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d5	51		 push	 ecx
  002d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f500000
  002de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e3	51		 push	 ecx
  002e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  002ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1371 : 
; 1372 : 	//
; 1373 : 	// draw command heading carat
; 1374 : 	//
; 1375 : 
; 1376 : 	if (draw_command_heading)

  002f6	83 7d 0c 00	 cmp	 DWORD PTR _draw_command_heading$[ebp], 0
  002fa	0f 84 4e 02 00
	00		 je	 $LN16@draw_headi

; 1377 : 	{
; 1378 : 		if (!comanche_damage.navigation_computer)

  00300	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00305	c1 e8 07	 shr	 eax, 7
  00308	83 e0 01	 and	 eax, 1
  0030b	0f 85 3d 02 00
	00		 jne	 $LN16@draw_headi

; 1379 : 		{
; 1380 : 			entity
; 1381 : 				*wp;
; 1382 : 
; 1383 : 			wp = get_local_entity_current_waypoint (get_gunship_entity ());

  00311	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00316	50		 push	 eax
  00317	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  0031c	89 45 b4	 mov	 DWORD PTR _wp$9[ebp], eax

; 1384 : 
; 1385 : 			if (wp)

  0031f	83 7d b4 00	 cmp	 DWORD PTR _wp$9[ebp], 0
  00323	0f 84 25 02 00
	00		 je	 $LN16@draw_headi

; 1386 : 			{
; 1387 : 				vec3d
; 1388 : 					*gunship_position,
; 1389 : 					waypoint_position;
; 1390 : 
; 1391 : 				float
; 1392 : 					dx,
; 1393 : 					dz,
; 1394 : 					bearing,
; 1395 : 					command_heading;
; 1396 : 
; 1397 : 				gunship_position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00329	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00330	74 0f		 je	 SHORT $LN20@draw_headi
  00332	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00337	8b 08		 mov	 ecx, DWORD PTR [eax]
  00339	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv182[ebp], ecx
  0033f	eb 24		 jmp	 SHORT $LN21@draw_headi
$LN20@draw_headi:
  00341	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_heading_scale@@YGXMH@Z@4JA
  00347	83 c2 5f	 add	 edx, 95			; 0000005fH
  0034a	52		 push	 edx
  0034b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00350	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00355	50		 push	 eax
  00356	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0035b	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv182[ebp], 0
$LN21@draw_headi:
  00365	b9 01 00 00 00	 mov	 ecx, 1
  0036a	85 c9		 test	 ecx, ecx
  0036c	74 0c		 je	 SHORT $LN22@draw_headi
  0036e	c7 85 40 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv190[ebp], 8
  00378	eb 24		 jmp	 SHORT $LN23@draw_headi
$LN22@draw_headi:
  0037a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_heading_scale@@YGXMH@Z@4JA
  00380	83 c2 5f	 add	 edx, 95			; 0000005fH
  00383	52		 push	 edx
  00384	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00389	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0038e	50		 push	 eax
  0038f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00394	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv190[ebp], 0
$LN23@draw_headi:
  0039e	6a 08		 push	 8
  003a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  003a6	51		 push	 ecx
  003a7	6b 95 44 ff ff
	ff 60		 imul	 edx, DWORD PTR tv182[ebp], 96
  003ae	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv190[ebp]
  003b4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  003bb	ff d1		 call	 ecx
  003bd	89 45 b0	 mov	 DWORD PTR _gunship_position$8[ebp], eax

; 1398 : 
; 1399 : 				get_waypoint_display_position (get_gunship_entity (), wp, &waypoint_position);

  003c0	8d 45 a4	 lea	 eax, DWORD PTR _waypoint_position$7[ebp]
  003c3	50		 push	 eax
  003c4	8b 4d b4	 mov	 ecx, DWORD PTR _wp$9[ebp]
  003c7	51		 push	 ecx
  003c8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  003ce	52		 push	 edx
  003cf	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 1400 : 				dx = waypoint_position.x - gunship_position->x;

  003d4	8b 45 b0	 mov	 eax, DWORD PTR _gunship_position$8[ebp]
  003d7	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _waypoint_position$7[ebp]
  003dc	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  003e0	f3 0f 11 45 a0	 movss	 DWORD PTR _dx$6[ebp], xmm0

; 1401 : 				dz = waypoint_position.z - gunship_position->z;

  003e5	8b 45 b0	 mov	 eax, DWORD PTR _gunship_position$8[ebp]
  003e8	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _waypoint_position$7[ebp+8]
  003ed	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  003f2	f3 0f 11 45 9c	 movss	 DWORD PTR _dz$5[ebp], xmm0

; 1402 : 
; 1403 : 				bearing = atan2 (dx, dz);

  003f7	51		 push	 ecx
  003f8	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _dz$5[ebp]
  003fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00402	51		 push	 ecx
  00403	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _dx$6[ebp]
  00408	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040d	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  00412	d9 5d 98	 fstp	 DWORD PTR _bearing$4[ebp]

; 1404 : 				command_heading = bearing - heading;

  00415	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _bearing$4[ebp]
  0041a	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _heading$[ebp]
  0041f	f3 0f 11 45 94	 movss	 DWORD PTR _command_heading$3[ebp], xmm0

; 1405 : 
; 1406 : 				if (command_heading > rad (180.0))

  00424	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _command_heading$3[ebp]
  00429	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@400921fb51000000
  00431	76 18		 jbe	 SHORT $LN10@draw_headi

; 1407 : 					command_heading -= rad (360.0);

  00433	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _command_heading$3[ebp]
  00438	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401921fb51000000
  00440	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00444	f3 0f 11 45 94	 movss	 DWORD PTR _command_heading$3[ebp], xmm0
  00449	eb 29		 jmp	 SHORT $LN12@draw_headi
$LN10@draw_headi:

; 1408 : 				else if (command_heading < rad (-180.0))

  0044b	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _command_heading$3[ebp]
  00450	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c00921fb51000000
  00458	66 0f 2f c8	 comisd	 xmm1, xmm0
  0045c	76 16		 jbe	 SHORT $LN12@draw_headi

; 1409 : 					command_heading += rad (360.0);

  0045e	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _command_heading$3[ebp]
  00463	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401921fb51000000
  0046b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0046f	f3 0f 11 45 94	 movss	 DWORD PTR _command_heading$3[ebp], xmm0
$LN12@draw_headi:

; 1410 : 
; 1411 : 				if (command_heading < rad(-22.0))

  00474	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _command_heading$3[ebp]
  00479	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bfd893011c000000
  00481	66 0f 2f c8	 comisd	 xmm1, xmm0
  00485	76 3b		 jbe	 SHORT $LN13@draw_headi

; 1412 : 					draw_2d_mono_sprite (large_open_left_carat, -heading_width_ratio, tick_datum_bottom, MFD_COLOUR1);

  00487	b8 04 00 00 00	 mov	 eax, 4
  0048c	6b c8 00	 imul	 ecx, eax, 0
  0048f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00495	52		 push	 edx
  00496	51		 push	 ecx
  00497	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _tick_datum_bottom$[ebp]
  0049c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a1	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _heading_width_ratio$[ebp]
  004a6	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  004ad	51		 push	 ecx
  004ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b3	68 00 00 00 00	 push	 OFFSET ?large_open_left_carat@@3PADA
  004b8	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
  004bd	e9 8c 00 00 00	 jmp	 $LN16@draw_headi
$LN13@draw_headi:

; 1413 : 				else if (command_heading > rad(22.0))

  004c2	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _command_heading$3[ebp]
  004c7	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fd893011c000000
  004cf	76 31		 jbe	 SHORT $LN15@draw_headi

; 1414 : 					draw_2d_mono_sprite (large_open_right_carat, heading_width_ratio, tick_datum_bottom, MFD_COLOUR1);

  004d1	b8 04 00 00 00	 mov	 eax, 4
  004d6	6b c8 00	 imul	 ecx, eax, 0
  004d9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004df	52		 push	 edx
  004e0	51		 push	 ecx
  004e1	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _tick_datum_bottom$[ebp]
  004e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004eb	51		 push	 ecx
  004ec	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _heading_width_ratio$[ebp]
  004f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f6	68 00 00 00 00	 push	 OFFSET ?large_open_right_carat@@3PADA
  004fb	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1415 : 				else

  00500	eb 4c		 jmp	 SHORT $LN16@draw_headi
$LN15@draw_headi:

; 1416 : 					draw_2d_mono_sprite (large_command_heading_carat, 0.0 + (command_heading * ((heading_width_ratio) / rad (25.0))), tick_datum_bottom, MFD_COLOUR1);

  00502	b8 04 00 00 00	 mov	 eax, 4
  00507	6b c8 00	 imul	 ecx, eax, 0
  0050a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00510	52		 push	 edx
  00511	51		 push	 ecx
  00512	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _tick_datum_bottom$[ebp]
  00517	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0051c	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _command_heading$3[ebp]
  00521	f3 0f 5a 4d fc	 cvtss2sd xmm1, DWORD PTR _heading_width_ratio$[ebp]
  00526	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@3fdbecde5a000000
  0052e	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00532	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@0000000000000000
  0053a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0053e	51		 push	 ecx
  0053f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00544	68 00 00 00 00	 push	 OFFSET ?large_command_heading_carat@@3PADA
  00549	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN16@draw_headi:

; 1417 : 			}
; 1418 : 		}
; 1419 : 	}
; 1420 : 
; 1421 : 	//
; 1422 : 	// draw heading scale
; 1423 : 	//
; 1424 : 
; 1425 : 	heading_step_5 = deg (heading * 0.2);

  0054e	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _heading$[ebp]
  00553	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0055b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@404ca5dc00000000
  00563	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00567	f3 0f 11 45 c8	 movss	 DWORD PTR _heading_step_5$[ebp], xmm0

; 1426 : 	int_heading_step_5 = (int) heading_step_5;

  0056c	f3 0f 2c 45 c8	 cvttss2si eax, DWORD PTR _heading_step_5$[ebp]
  00571	89 45 bc	 mov	 DWORD PTR _int_heading_step_5$[ebp], eax

; 1427 : 	mod_heading_step_5 = heading_step_5 - (float) int_heading_step_5;

  00574	f3 0f 2a 45 bc	 cvtsi2ss xmm0, DWORD PTR _int_heading_step_5$[ebp]
  00579	f3 0f 10 4d c8	 movss	 xmm1, DWORD PTR _heading_step_5$[ebp]
  0057e	f3 0f 5c c8	 subss	 xmm1, xmm0
  00582	f3 0f 11 4d c4	 movss	 DWORD PTR _mod_heading_step_5$[ebp], xmm1

; 1428 : 	int_heading_step_5 -= 5;

  00587	8b 45 bc	 mov	 eax, DWORD PTR _int_heading_step_5$[ebp]
  0058a	83 e8 05	 sub	 eax, 5
  0058d	89 45 bc	 mov	 DWORD PTR _int_heading_step_5$[ebp], eax

; 1429 : 
; 1430 : 	if (int_heading_step_5 < 0)

  00590	79 09		 jns	 SHORT $LN17@draw_headi

; 1431 : 	{
; 1432 : 		int_heading_step_5 += 72;

  00592	8b 45 bc	 mov	 eax, DWORD PTR _int_heading_step_5$[ebp]
  00595	83 c0 48	 add	 eax, 72			; 00000048H
  00598	89 45 bc	 mov	 DWORD PTR _int_heading_step_5$[ebp], eax
$LN17@draw_headi:

; 1433 : 	}
; 1434 : 
; 1435 : 	tick_type = int_heading_step_5 % 2;

  0059b	8b 45 bc	 mov	 eax, DWORD PTR _int_heading_step_5$[ebp]
  0059e	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  005a3	79 05		 jns	 SHORT $LN28@draw_headi
  005a5	48		 dec	 eax
  005a6	83 c8 fe	 or	 eax, -2			; fffffffeH
  005a9	40		 inc	 eax
$LN28@draw_headi:
  005aa	89 45 b8	 mov	 DWORD PTR _tick_type$[ebp], eax

; 1436 : 	x = - (5.0 + mod_heading_step_5) * heading_tick_x_spacing;

  005ad	f3 0f 5a 45 c4	 cvtss2sd xmm0, DWORD PTR _mod_heading_step_5$[ebp]
  005b2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4014000000000000
  005ba	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  005c1	f3 0f 5a 4d f8	 cvtss2sd xmm1, DWORD PTR _heading_tick_x_spacing$[ebp]
  005c6	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  005ca	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005ce	f3 0f 11 45 d0	 movss	 DWORD PTR _x$[ebp], xmm0

; 1437 : 
; 1438 : 	for (loop = 0; loop <= 20; loop++)

  005d3	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  005da	eb 09		 jmp	 SHORT $LN4@draw_headi
$LN2@draw_headi:
  005dc	8b 45 c0	 mov	 eax, DWORD PTR _loop$[ebp]
  005df	83 c0 01	 add	 eax, 1
  005e2	89 45 c0	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@draw_headi:
  005e5	83 7d c0 14	 cmp	 DWORD PTR _loop$[ebp], 20 ; 00000014H
  005e9	0f 8f 30 01 00
	00		 jg	 $LN3@draw_headi

; 1439 : 	{
; 1440 : 		draw_2d_line (x, tick_top, x, tick_bottom, MFD_COLOUR1);

  005ef	b8 04 00 00 00	 mov	 eax, 4
  005f4	6b c8 00	 imul	 ecx, eax, 0
  005f7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005fd	52		 push	 edx
  005fe	51		 push	 ecx
  005ff	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _tick_bottom$[ebp]
  00604	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00609	51		 push	 ecx
  0060a	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _x$[ebp]
  0060f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00614	51		 push	 ecx
  00615	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _tick_top$[ebp]
  0061a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0061f	51		 push	 ecx
  00620	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _x$[ebp]
  00625	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0062a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1441 : 
; 1442 : 		if (tick_type == 0)

  0062f	83 7d b8 00	 cmp	 DWORD PTR _tick_type$[ebp], 0
  00633	0f 85 80 00 00
	00		 jne	 $LN18@draw_headi

; 1443 : 		{
; 1444 : 			float x_adjust;
; 1445 : 			char buffer[8];
; 1446 : 
; 1447 : 			sprintf(buffer, "%03d", int_heading_step_5 * 5);

  00639	6b 45 bc 05	 imul	 eax, DWORD PTR _int_heading_step_5$[ebp], 5
  0063d	50		 push	 eax
  0063e	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  00643	8d 4d 88	 lea	 ecx, DWORD PTR _buffer$1[ebp]
  00646	51		 push	 ecx
  00647	e8 00 00 00 00	 call	 _sprintf
  0064c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1448 : 			x_adjust = get_mono_font_string_width(buffer) / 2;

  0064f	8d 45 88	 lea	 eax, DWORD PTR _buffer$1[ebp]
  00652	50		 push	 eax
  00653	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00658	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv477[ebp]
  0065e	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv477[ebp]
  00666	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0066e	f3 0f 11 45 90	 movss	 DWORD PTR _x_adjust$2[ebp], xmm0

; 1449 : 
; 1450 : 			set_2d_mono_font_position (x, tick_top);

  00673	51		 push	 ecx
  00674	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _tick_top$[ebp]
  00679	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0067e	51		 push	 ecx
  0067f	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _x$[ebp]
  00684	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00689	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1451 : 			set_mono_font_rel_position (-x_adjust, y_adjust);

  0068e	51		 push	 ecx
  0068f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00694	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00699	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _x_adjust$2[ebp]
  0069e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  006a5	51		 push	 ecx
  006a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ab	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1452 : 			print_mono_font_string(buffer);

  006b0	8d 45 88	 lea	 eax, DWORD PTR _buffer$1[ebp]
  006b3	50		 push	 eax
  006b4	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN18@draw_headi:

; 1453 : 		}
; 1454 : 
; 1455 : 		int_heading_step_5 = (++int_heading_step_5 == 72) ? 0 : int_heading_step_5;

  006b9	8b 45 bc	 mov	 eax, DWORD PTR _int_heading_step_5$[ebp]
  006bc	83 c0 01	 add	 eax, 1
  006bf	89 45 bc	 mov	 DWORD PTR _int_heading_step_5$[ebp], eax
  006c2	83 7d bc 48	 cmp	 DWORD PTR _int_heading_step_5$[ebp], 72 ; 00000048H
  006c6	75 0c		 jne	 SHORT $LN24@draw_headi
  006c8	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv321[ebp], 0
  006d2	eb 09		 jmp	 SHORT $LN25@draw_headi
$LN24@draw_headi:
  006d4	8b 4d bc	 mov	 ecx, DWORD PTR _int_heading_step_5$[ebp]
  006d7	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv321[ebp], ecx
$LN25@draw_headi:
  006dd	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR tv321[ebp]
  006e3	89 55 bc	 mov	 DWORD PTR _int_heading_step_5$[ebp], edx

; 1456 : 
; 1457 : 		tick_type = !tick_type;

  006e6	83 7d b8 00	 cmp	 DWORD PTR _tick_type$[ebp], 0
  006ea	75 0c		 jne	 SHORT $LN26@draw_headi
  006ec	c7 85 44 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv323[ebp], 1
  006f6	eb 0a		 jmp	 SHORT $LN27@draw_headi
$LN26@draw_headi:
  006f8	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv323[ebp], 0
$LN27@draw_headi:
  00702	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR tv323[ebp]
  00708	89 45 b8	 mov	 DWORD PTR _tick_type$[ebp], eax

; 1458 : 
; 1459 : 		x += heading_tick_x_spacing;

  0070b	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _x$[ebp]
  00710	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _heading_tick_x_spacing$[ebp]
  00715	f3 0f 11 45 d0	 movss	 DWORD PTR _x$[ebp], xmm0

; 1460 : 	}

  0071a	e9 bd fe ff ff	 jmp	 $LN2@draw_headi
$LN3@draw_headi:

; 1461 : 
; 1462 : 	//
; 1463 : 	// restore 2D environment
; 1464 : 	//
; 1465 : 
; 1466 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  0071f	51		 push	 ecx
  00720	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00728	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0072d	51		 push	 ecx
  0072e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00736	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0073b	51		 push	 ecx
  0073c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00744	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00749	51		 push	 ecx
  0074a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00752	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00757	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0075c	50		 push	 eax
  0075d	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 1467 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00762	51		 push	 ecx
  00763	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0076b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00770	51		 push	 ecx
  00771	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00779	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077e	51		 push	 ecx
  0077f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00787	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078c	51		 push	 ecx
  0078d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00795	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0079f	50		 push	 eax
  007a0	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1468 : }

  007a5	5f		 pop	 edi
  007a6	5e		 pop	 esi
  007a7	5b		 pop	 ebx
  007a8	8b e5		 mov	 esp, ebp
  007aa	5d		 pop	 ebp
  007ab	c2 08 00	 ret	 8
?draw_heading_scale@@YGXMH@Z ENDP			; draw_heading_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_barometric_altitude_scale@@YGXXZ
_TEXT	SEGMENT
tv564 = -220						; size = 4
tv402 = -220						; size = 4
tv191 = -220						; size = 4
tv135 = -220						; size = 4
_buffer$1 = -152					; size = 8
_x_adjust$2 = -144					; size = 4
_ground_y$3 = -140					; size = 4
_loop$4 = -136						; size = 4
_y$5 = -132						; size = 4
_tick_type$6 = -128					; size = 4
_mod_scale_step_5$7 = -124				; size = 4
_int_scale_step_5$8 = -120				; size = 4
_scale_step_5$9 = -116					; size = 4
_displayed_altitude$ = -112				; size = 4
_v2$ = -108						; size = 4
_v1$ = -104						; size = 4
_u2$ = -100						; size = 4
_u1$ = -96						; size = 4
_buffer$ = -92						; size = 8
_ground_level$ = -84					; size = 4
_barometric_altitude$ = -80				; size = 4
_radar_altitude$ = -76					; size = 4
_y_adjust$ = -72					; size = 4
_x_adjust$ = -68					; size = 4
_mfd_vp_y_max$ = -64					; size = 4
_mfd_vp_y_min$ = -60					; size = 4
_v$ = -56						; size = 4
_scale_step$ = -52					; size = 4
_scale_bottom$ = -48					; size = 4
_scale_top$ = -44					; size = 4
_x4$ = -40						; size = 4
_x5$ = -36						; size = 4
_x3$ = -32						; size = 4
_x2$ = -28						; size = 4
_x1$ = -24						; size = 4
_box_bottom$ = -20					; size = 4
_box_top$ = -16						; size = 4
_box_end$ = -12						; size = 4
_box_start$ = -8					; size = 4
_y_centre$ = -4						; size = 4
?draw_barometric_altitude_scale@@YGXXZ PROC		; draw_barometric_altitude_scale, COMDAT

; 1163 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1164 : 	const float
; 1165 : 		y_centre = 0.1,

  0000c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00014	f3 0f 11 45 fc	 movss	 DWORD PTR _y_centre$[ebp], xmm0

; 1166 : 		box_start = -0.98,

  00019	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00021	f3 0f 11 45 f8	 movss	 DWORD PTR _box_start$[ebp], xmm0

; 1167 : 		box_end = box_start + 0.20,

  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae15
  0002e	f3 0f 11 45 f4	 movss	 DWORD PTR _box_end$[ebp], xmm0

; 1168 : 		box_top = y_centre + 0.04,

  00033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  0003b	f3 0f 11 45 f0	 movss	 DWORD PTR _box_top$[ebp], xmm0

; 1169 : 		box_bottom = y_centre - 0.04,

  00040	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d75c290
  00048	f3 0f 11 45 ec	 movss	 DWORD PTR _box_bottom$[ebp], xmm0

; 1170 : 		x1 = -0.95,

  0004d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  00055	f3 0f 11 45 e8	 movss	 DWORD PTR _x1$[ebp], xmm0

; 1171 : 		x2 = x1 + 0.02,

  0005a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6e147b
  00062	f3 0f 11 45 e4	 movss	 DWORD PTR _x2$[ebp], xmm0

; 1172 : 		x3 = x1 + 0.08,

  00067	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5eb852
  0006f	f3 0f 11 45 e0	 movss	 DWORD PTR _x3$[ebp], xmm0

; 1173 : 		x5 = x1 + 0.16,

  00074	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4a3d70
  0007c	f3 0f 11 45 dc	 movss	 DWORD PTR _x5$[ebp], xmm0

; 1174 : 		x4 = x5 - 0.02,

  00081	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4f5c28
  00089	f3 0f 11 45 d8	 movss	 DWORD PTR _x4$[ebp], xmm0

; 1175 : 		scale_top = y_centre + 0.35,

  0008e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  00096	f3 0f 11 45 d4	 movss	 DWORD PTR _scale_top$[ebp], xmm0

; 1176 : 		scale_bottom = y_centre - 0.35,

  0009b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  000a3	f3 0f 11 45 d0	 movss	 DWORD PTR _scale_bottom$[ebp], xmm0

; 1177 : 		scale_step = 0.35 / 4.5;

  000a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d9f49f5
  000b0	f3 0f 11 45 cc	 movss	 DWORD PTR _scale_step$[ebp], xmm0

; 1178 : 
; 1179 : 	float
; 1180 : 		v,
; 1181 : 		mfd_vp_y_min,
; 1182 : 		mfd_vp_y_max,
; 1183 : 		x_adjust,
; 1184 : 		y_adjust = y_centre,

  000b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  000bd	f3 0f 11 45 b8	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1185 : 		radar_altitude = feet(current_flight_dynamics->radar_altitude.value),

  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000c7	f3 0f 10 80 44
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9284]
  000cf	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4051f948
  000d7	f3 0f 11 45 b4	 movss	 DWORD PTR _radar_altitude$[ebp], xmm0

; 1186 : 		barometric_altitude = feet (current_flight_dynamics->barometric_altitude.value),

  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000e1	f3 0f 10 80 2c
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9260]
  000e9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4051f948
  000f1	f3 0f 11 45 b0	 movss	 DWORD PTR _barometric_altitude$[ebp], xmm0

; 1187 : 		ground_level = barometric_altitude - radar_altitude;

  000f6	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _barometric_altitude$[ebp]
  000fb	f3 0f 5c 45 b4	 subss	 xmm0, DWORD PTR _radar_altitude$[ebp]
  00100	f3 0f 11 45 ac	 movss	 DWORD PTR _ground_level$[ebp], xmm0

; 1188 : 
; 1189 : 
; 1190 : 	char
; 1191 : 		buffer[8];
; 1192 : 
; 1193 : 	int
; 1194 : 		u1, u2, v1, v2,
; 1195 : 		displayed_altitude = (int)((barometric_altitude + 5) / 10);

  00105	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _barometric_altitude$[ebp]
  0010a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40a00000
  00112	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@41200000
  0011a	f3 0f 2c c0	 cvttss2si eax, xmm0
  0011e	89 45 90	 mov	 DWORD PTR _displayed_altitude$[ebp], eax

; 1196 : 
; 1197 : 	// draw scale
; 1198 : 	get_2d_float_screen_x_coordinate (-y_centre, &v);

  00121	8d 45 c8	 lea	 eax, DWORD PTR _v$[ebp]
  00124	50		 push	 eax
  00125	51		 push	 ecx
  00126	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  0012e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00133	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 1199 : 
; 1200 : 	mfd_vp_y_min = v - (0.5 * mfd_viewport_size * (scale_top - scale_bottom));

  00138	f3 0f 5a 45 c8	 cvtss2sd xmm0, DWORD PTR _v$[ebp]
  0013d	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00145	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0014d	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe6666660000000
  00155	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00159	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0015d	f3 0f 11 45 c4	 movss	 DWORD PTR _mfd_vp_y_min$[ebp], xmm0

; 1201 : 	mfd_vp_y_max = v + (0.5 * mfd_viewport_size * (scale_top - scale_bottom)) - 0.001;

  00162	f3 0f 5a 45 c8	 cvtss2sd xmm0, DWORD PTR _v$[ebp]
  00167	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  0016f	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00177	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe6666660000000
  0017f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00183	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0018b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0018f	f3 0f 11 45 c0	 movss	 DWORD PTR _mfd_vp_y_max$[ebp], xmm0

; 1202 : 
; 1203 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_vp_y_min, mfd_viewport_x_max, mfd_vp_y_max);

  00194	51		 push	 ecx
  00195	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _mfd_vp_y_max$[ebp]
  0019a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019f	51		 push	 ecx
  001a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  001a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ad	51		 push	 ecx
  001ae	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _mfd_vp_y_min$[ebp]
  001b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b8	51		 push	 ecx
  001b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  001c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001cb	50		 push	 eax
  001cc	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1204 : 
; 1205 : 	//
; 1206 : 	// draw scale
; 1207 : 	//
; 1208 : 
; 1209 : 	{
; 1210 : 		float scale_step_5 = barometric_altitude * 0.2;

  001d1	f3 0f 5a 45 b0	 cvtss2sd xmm0, DWORD PTR _barometric_altitude$[ebp]
  001d6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc999999999999a
  001de	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001e2	f3 0f 11 45 8c	 movss	 DWORD PTR _scale_step_5$9[ebp], xmm0

; 1211 : 		int int_scale_step_5 = (int) scale_step_5;

  001e7	f3 0f 2c 45 8c	 cvttss2si eax, DWORD PTR _scale_step_5$9[ebp]
  001ec	89 45 88	 mov	 DWORD PTR _int_scale_step_5$8[ebp], eax

; 1212 : 		float mod_scale_step_5 = scale_step_5 - (float) int_scale_step_5;

  001ef	f3 0f 2a 45 88	 cvtsi2ss xmm0, DWORD PTR _int_scale_step_5$8[ebp]
  001f4	f3 0f 10 4d 8c	 movss	 xmm1, DWORD PTR _scale_step_5$9[ebp]
  001f9	f3 0f 5c c8	 subss	 xmm1, xmm0
  001fd	f3 0f 11 4d 84	 movss	 DWORD PTR _mod_scale_step_5$7[ebp], xmm1

; 1213 : 
; 1214 : 		int tick_type = (int_scale_step_5 % 2) == 0;

  00202	8b 45 88	 mov	 eax, DWORD PTR _int_scale_step_5$8[ebp]
  00205	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0020a	79 05		 jns	 SHORT $LN15@draw_barom
  0020c	48		 dec	 eax
  0020d	83 c8 fe	 or	 eax, -2			; fffffffeH
  00210	40		 inc	 eax
$LN15@draw_barom:
  00211	85 c0		 test	 eax, eax
  00213	75 0c		 jne	 SHORT $LN11@draw_barom
  00215	c7 85 24 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv135[ebp], 1
  0021f	eb 0a		 jmp	 SHORT $LN12@draw_barom
$LN11@draw_barom:
  00221	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv135[ebp], 0
$LN12@draw_barom:
  0022b	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv135[ebp]
  00231	89 4d 80	 mov	 DWORD PTR _tick_type$6[ebp], ecx

; 1215 : 		float y = -(5.0 + mod_scale_step_5) * scale_step;

  00234	f3 0f 5a 45 84	 cvtss2sd xmm0, DWORD PTR _mod_scale_step_5$7[ebp]
  00239	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4014000000000000
  00241	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00248	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb3e93ea0000000
  00250	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00254	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _y$5[ebp], xmm0

; 1216 : 		int loop;
; 1217 : 		float ground_y = -1.0;

  0025c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00264	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _ground_y$3[ebp], xmm0

; 1218 : 
; 1219 : 		int_scale_step_5 -= 5;

  0026c	8b 45 88	 mov	 eax, DWORD PTR _int_scale_step_5$8[ebp]
  0026f	83 e8 05	 sub	 eax, 5
  00272	89 45 88	 mov	 DWORD PTR _int_scale_step_5$8[ebp], eax

; 1220 : 
; 1221 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  00275	6a 01		 push	 1
  00277	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1222 : 		y_adjust = -2.0;

  0027c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00284	f3 0f 11 45 b8	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1223 : 
; 1224 : 		for (loop = 0; loop <= 10; loop++)

  00289	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _loop$4[ebp], 0
  00293	eb 0f		 jmp	 SHORT $LN4@draw_barom
$LN2@draw_barom:
  00295	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _loop$4[ebp]
  0029b	83 c0 01	 add	 eax, 1
  0029e	89 85 78 ff ff
	ff		 mov	 DWORD PTR _loop$4[ebp], eax
$LN4@draw_barom:
  002a4	83 bd 78 ff ff
	ff 0a		 cmp	 DWORD PTR _loop$4[ebp], 10 ; 0000000aH
  002ab	0f 8f 17 02 00
	00		 jg	 $LN3@draw_barom

; 1225 : 		{
; 1226 : 			if (int_scale_step_5 * 5 > (ground_level + 5))

  002b1	6b 45 88 05	 imul	 eax, DWORD PTR _int_scale_step_5$8[ebp], 5
  002b5	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  002b9	f3 0f 10 4d ac	 movss	 xmm1, DWORD PTR _ground_level$[ebp]
  002be	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@40a00000
  002c6	0f 2f c1	 comiss	 xmm0, xmm1
  002c9	0f 86 8f 01 00
	00		 jbe	 $LN5@draw_barom

; 1227 : 			{
; 1228 : 				if (tick_type == 0)

  002cf	83 7d 80 00	 cmp	 DWORD PTR _tick_type$6[ebp], 0
  002d3	0f 85 37 01 00
	00		 jne	 $LN7@draw_barom

; 1229 : 				{
; 1230 : 					float x_adjust;
; 1231 : 					char buffer[8];
; 1232 : 
; 1233 : 					draw_2d_line (x1, y, x2, y, MFD_COLOUR1);

  002d9	b8 04 00 00 00	 mov	 eax, 4
  002de	6b c8 00	 imul	 ecx, eax, 0
  002e1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002e7	52		 push	 edx
  002e8	51		 push	 ecx
  002e9	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  002f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f6	51		 push	 ecx
  002f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6e147b
  002ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00304	51		 push	 ecx
  00305	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  0030d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00312	51		 push	 ecx
  00313	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  0031b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00320	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1234 : 					draw_2d_line (x4, y, x5, y, MFD_COLOUR1);

  00325	b8 04 00 00 00	 mov	 eax, 4
  0032a	6b c8 00	 imul	 ecx, eax, 0
  0032d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00333	52		 push	 edx
  00334	51		 push	 ecx
  00335	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  0033d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00342	51		 push	 ecx
  00343	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4a3d70
  0034b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00350	51		 push	 ecx
  00351	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  00359	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035e	51		 push	 ecx
  0035f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4f5c28
  00367	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1235 : 
; 1236 : 					sprintf(buffer, "%02d", (int_scale_step_5 * 5) % 100);

  00371	6b 45 88 05	 imul	 eax, DWORD PTR _int_scale_step_5$8[ebp], 5
  00375	99		 cdq
  00376	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0037b	f7 f9		 idiv	 ecx
  0037d	52		 push	 edx
  0037e	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  00383	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _buffer$1[ebp]
  00389	52		 push	 edx
  0038a	e8 00 00 00 00	 call	 _sprintf
  0038f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1237 : 					x_adjust = get_mono_font_string_width(buffer) / 2;

  00392	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  00398	50		 push	 eax
  00399	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0039e	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR tv402[ebp]
  003a4	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR tv402[ebp]
  003ac	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  003b4	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _x_adjust$2[ebp], xmm0

; 1238 : 
; 1239 : 					set_2d_mono_font_position (x3, y);

  003bc	51		 push	 ecx
  003bd	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  003c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ca	51		 push	 ecx
  003cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5eb852
  003d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d8	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1240 : 					set_mono_font_rel_position (-x_adjust, y_adjust);

  003dd	51		 push	 ecx
  003de	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  003e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e8	f3 0f 10 85 70
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$2[ebp]
  003f0	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  003f7	51		 push	 ecx
  003f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003fd	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1241 : 					print_mono_font_string(buffer);

  00402	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  00408	50		 push	 eax
  00409	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1242 : 				}
; 1243 : 				else

  0040e	eb 4c		 jmp	 SHORT $LN8@draw_barom
$LN7@draw_barom:

; 1244 : 					draw_2d_line (x3 - 0.02, y, x3 + 0.02, y, MFD_COLOUR1);

  00410	b8 04 00 00 00	 mov	 eax, 4
  00415	6b c8 00	 imul	 ecx, eax, 0
  00418	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0041e	52		 push	 edx
  0041f	51		 push	 ecx
  00420	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  00428	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042d	51		 push	 ecx
  0042e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  00436	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0043b	51		 push	 ecx
  0043c	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  00444	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00449	51		 push	 ecx
  0044a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf63d70a
  00452	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00457	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN8@draw_barom:

; 1245 : 			}
; 1246 : 			else

  0045c	eb 1f		 jmp	 SHORT $LN6@draw_barom
$LN5@draw_barom:

; 1247 : 				ground_y = max(y, ground_y);

  0045e	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _ground_y$3[ebp]
  00464	50		 push	 eax
  00465	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _y$5[ebp]
  0046b	51		 push	 ecx
  0046c	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00471	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00475	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _ground_y$3[ebp], xmm0
$LN6@draw_barom:

; 1248 : 
; 1249 : 			int_scale_step_5++;

  0047d	8b 45 88	 mov	 eax, DWORD PTR _int_scale_step_5$8[ebp]
  00480	83 c0 01	 add	 eax, 1
  00483	89 45 88	 mov	 DWORD PTR _int_scale_step_5$8[ebp], eax

; 1250 : 			tick_type = !tick_type;

  00486	83 7d 80 00	 cmp	 DWORD PTR _tick_type$6[ebp], 0
  0048a	75 0c		 jne	 SHORT $LN13@draw_barom
  0048c	c7 85 24 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv191[ebp], 1
  00496	eb 0a		 jmp	 SHORT $LN14@draw_barom
$LN13@draw_barom:
  00498	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv191[ebp], 0
$LN14@draw_barom:
  004a2	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv191[ebp]
  004a8	89 45 80	 mov	 DWORD PTR _tick_type$6[ebp], eax

; 1251 : 			y += scale_step;

  004ab	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  004b3	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3d9f49f5
  004bb	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _y$5[ebp], xmm0

; 1252 : 		}

  004c3	e9 cd fd ff ff	 jmp	 $LN2@draw_barom
$LN3@draw_barom:

; 1253 : 
; 1254 : 		if (ground_y != -1.0)

  004c8	f3 0f 5a 85 74
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _ground_y$3[ebp]
  004d0	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@bff0000000000000
  004d8	9f		 lahf
  004d9	f6 c4 44	 test	 ah, 68			; 00000044H
  004dc	7b 4c		 jnp	 SHORT $LN9@draw_barom

; 1255 : 			draw_2d_hatched_area(x1, -0.5, x5, ground_y, MFD_COLOUR_RED);

  004de	b8 04 00 00 00	 mov	 eax, 4
  004e3	6b c8 0f	 imul	 ecx, eax, 15
  004e6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004ec	52		 push	 edx
  004ed	51		 push	 ecx
  004ee	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _ground_y$3[ebp]
  004f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fb	51		 push	 ecx
  004fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4a3d70
  00504	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00509	51		 push	 ecx
  0050a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00512	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00517	51		 push	 ecx
  00518	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  00520	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00525	e8 00 00 00 00	 call	 ?draw_2d_hatched_area@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_hatched_area
$LN9@draw_barom:

; 1256 : 	}
; 1257 : 
; 1258 : 	//
; 1259 : 	// restore 2D environment
; 1260 : 	//
; 1261 : 
; 1262 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  0052a	51		 push	 ecx
  0052b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00533	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00538	51		 push	 ecx
  00539	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00541	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00546	51		 push	 ecx
  00547	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0054f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00554	51		 push	 ecx
  00555	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0055d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00562	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00567	50		 push	 eax
  00568	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 1263 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  0056d	51		 push	 ecx
  0056e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00576	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057b	51		 push	 ecx
  0057c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00584	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00589	51		 push	 ecx
  0058a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00592	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00597	51		 push	 ecx
  00598	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  005a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  005aa	50		 push	 eax
  005ab	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1264 : 
; 1265 : 	// draw box around
; 1266 : 	draw_2d_line (x1, scale_top, x5, scale_top, MFD_COLOUR1);

  005b0	b8 04 00 00 00	 mov	 eax, 4
  005b5	6b c8 00	 imul	 ecx, eax, 0
  005b8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005be	52		 push	 edx
  005bf	51		 push	 ecx
  005c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  005c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005cd	51		 push	 ecx
  005ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4a3d70
  005d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005db	51		 push	 ecx
  005dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  005e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e9	51		 push	 ecx
  005ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  005f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1267 : 	draw_2d_line (x1, scale_bottom, x5, scale_bottom, MFD_COLOUR1);

  005fc	b8 04 00 00 00	 mov	 eax, 4
  00601	6b c8 00	 imul	 ecx, eax, 0
  00604	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0060a	52		 push	 edx
  0060b	51		 push	 ecx
  0060c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  00614	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00619	51		 push	 ecx
  0061a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4a3d70
  00622	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00627	51		 push	 ecx
  00628	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  00630	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00635	51		 push	 ecx
  00636	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  0063e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00643	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1268 : 	draw_2d_line (x1, scale_top, x1, scale_bottom, MFD_COLOUR1);

  00648	b8 04 00 00 00	 mov	 eax, 4
  0064d	6b c8 00	 imul	 ecx, eax, 0
  00650	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00656	52		 push	 edx
  00657	51		 push	 ecx
  00658	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  00660	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00665	51		 push	 ecx
  00666	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  0066e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00673	51		 push	 ecx
  00674	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  0067c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00681	51		 push	 ecx
  00682	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  0068a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0068f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1269 : 	draw_2d_line (x5, scale_top, x5, scale_bottom, MFD_COLOUR1);

  00694	b8 04 00 00 00	 mov	 eax, 4
  00699	6b c8 00	 imul	 ecx, eax, 0
  0069c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006a2	52		 push	 edx
  006a3	51		 push	 ecx
  006a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  006ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b1	51		 push	 ecx
  006b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4a3d70
  006ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006bf	51		 push	 ecx
  006c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  006c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006cd	51		 push	 ecx
  006ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4a3d70
  006d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006db	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1270 : 
; 1271 : 	// draw box with digital altitude readout
; 1272 : 
; 1273 : 	// clear background area
; 1274 : 	get_2d_int_screen_coordinates (box_start, box_top, &u1, &v1);

  006e0	8d 45 98	 lea	 eax, DWORD PTR _v1$[ebp]
  006e3	50		 push	 eax
  006e4	8d 4d a0	 lea	 ecx, DWORD PTR _u1$[ebp]
  006e7	51		 push	 ecx
  006e8	51		 push	 ecx
  006e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  006f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f6	51		 push	 ecx
  006f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  006ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00704	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 1275 : 	get_2d_int_screen_coordinates (box_end, box_bottom, &u2, &v2);

  00709	8d 45 94	 lea	 eax, DWORD PTR _v2$[ebp]
  0070c	50		 push	 eax
  0070d	8d 4d 9c	 lea	 ecx, DWORD PTR _u2$[ebp]
  00710	51		 push	 ecx
  00711	51		 push	 ecx
  00712	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d75c290
  0071a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0071f	51		 push	 ecx
  00720	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae15
  00728	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0072d	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 1276 : 	set_block(u1, v1, u2, v2, MFD_BACKGROUND_COLOUR);

  00732	b8 04 00 00 00	 mov	 eax, 4
  00737	6b c8 09	 imul	 ecx, eax, 9
  0073a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00740	52		 push	 edx
  00741	8b 45 94	 mov	 eax, DWORD PTR _v2$[ebp]
  00744	50		 push	 eax
  00745	8b 4d 9c	 mov	 ecx, DWORD PTR _u2$[ebp]
  00748	51		 push	 ecx
  00749	8b 55 98	 mov	 edx, DWORD PTR _v1$[ebp]
  0074c	52		 push	 edx
  0074d	8b 45 a0	 mov	 eax, DWORD PTR _u1$[ebp]
  00750	50		 push	 eax
  00751	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 1277 : 
; 1278 : 	// draw surrounding box
; 1279 : 	draw_2d_line(box_start, box_top, box_end, box_top, MFD_COLOUR1);

  00756	b8 04 00 00 00	 mov	 eax, 4
  0075b	6b c8 00	 imul	 ecx, eax, 0
  0075e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00764	52		 push	 edx
  00765	51		 push	 ecx
  00766	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  0076e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00773	51		 push	 ecx
  00774	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae15
  0077c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00781	51		 push	 ecx
  00782	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  0078a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078f	51		 push	 ecx
  00790	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00798	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1280 : 	draw_2d_line(box_start, box_bottom, box_end, box_bottom, MFD_COLOUR1);

  007a2	b8 04 00 00 00	 mov	 eax, 4
  007a7	6b c8 00	 imul	 ecx, eax, 0
  007aa	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007b0	52		 push	 edx
  007b1	51		 push	 ecx
  007b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d75c290
  007ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007bf	51		 push	 ecx
  007c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae15
  007c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007cd	51		 push	 ecx
  007ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d75c290
  007d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007db	51		 push	 ecx
  007dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  007e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1281 : 	draw_2d_line(box_start, box_top, box_start, box_bottom, MFD_COLOUR1);

  007ee	b8 04 00 00 00	 mov	 eax, 4
  007f3	6b c8 00	 imul	 ecx, eax, 0
  007f6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007fc	52		 push	 edx
  007fd	51		 push	 ecx
  007fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d75c290
  00806	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0080b	51		 push	 ecx
  0080c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00814	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00819	51		 push	 ecx
  0081a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  00822	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00827	51		 push	 ecx
  00828	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00830	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00835	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1282 : 	draw_2d_line(box_end, box_top, box_end, box_bottom, MFD_COLOUR1);

  0083a	b8 04 00 00 00	 mov	 eax, 4
  0083f	6b c8 00	 imul	 ecx, eax, 0
  00842	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00848	52		 push	 edx
  00849	51		 push	 ecx
  0084a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d75c290
  00852	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00857	51		 push	 ecx
  00858	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae15
  00860	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00865	51		 push	 ecx
  00866	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c29
  0086e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00873	51		 push	 ecx
  00874	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae15
  0087c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00881	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1283 : 
; 1284 : 	// print digital readout
; 1285 : 
; 1286 : 	set_mono_font_type (MONO_FONT_TYPE_5X7);

  00886	6a 01		 push	 1
  00888	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1287 : 	y_adjust = -2.0;

  0088d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00895	f3 0f 11 45 b8	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1288 : 
; 1289 : 	sprintf(buffer, "%3do", displayed_altitude);

  0089a	8b 45 90	 mov	 eax, DWORD PTR _displayed_altitude$[ebp]
  0089d	50		 push	 eax
  0089e	68 00 00 00 00	 push	 OFFSET ??_C@_04HPNJOLEN@?$CF3do@
  008a3	8d 4d a4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  008a6	51		 push	 ecx
  008a7	e8 00 00 00 00	 call	 _sprintf
  008ac	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1290 : 	x_adjust = -get_mono_font_string_width(buffer) - 1;

  008af	8d 45 a4	 lea	 eax, DWORD PTR _buffer$[ebp]
  008b2	50		 push	 eax
  008b3	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  008b8	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR tv564[ebp]
  008be	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR tv564[ebp]
  008c6	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  008cd	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  008d5	f3 0f 11 45 bc	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 1291 : 
; 1292 : 	set_2d_mono_font_position (box_end, y_centre);

  008da	51		 push	 ecx
  008db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  008e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e8	51		 push	 ecx
  008e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf47ae15
  008f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f6	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1293 : 	set_mono_font_rel_position (x_adjust, y_adjust);

  008fb	51		 push	 ecx
  008fc	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00901	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00906	51		 push	 ecx
  00907	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0090c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00911	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1294 : 	print_mono_font_string(buffer);

  00916	8d 45 a4	 lea	 eax, DWORD PTR _buffer$[ebp]
  00919	50		 push	 eax
  0091a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1295 : }

  0091f	5f		 pop	 edi
  00920	5e		 pop	 esi
  00921	5b		 pop	 ebx
  00922	8b e5		 mov	 esp, ebp
  00924	5d		 pop	 ebp
  00925	c3		 ret	 0
?draw_barometric_altitude_scale@@YGXXZ ENDP		; draw_barometric_altitude_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_radar_altitude_scale@@YGXXZ
_TEXT	SEGMENT
tv223 = -164						; size = 8
tv207 = -164						; size = 8
tv178 = -164						; size = 8
tv81 = -164						; size = 8
tv224 = -156						; size = 8
tv208 = -156						; size = 8
tv179 = -156						; size = 8
tv82 = -156						; size = 8
tv405 = -152						; size = 4
_i$1 = -84						; size = 4
_current_y$2 = -80					; size = 4
_high_step$3 = -76					; size = 4
_low_step$4 = -72					; size = 4
_high_height$5 = -68					; size = 4
_low_height$6 = -64					; size = 4
_scale_height$7 = -60					; size = 4
_roc$8 = -56						; size = 4
_buffer$ = -52						; size = 8
_radar_altitude$ = -44					; size = 4
_y_adjust$ = -40					; size = 4
_x_adjust$ = -36					; size = 4
_box_end$ = -32						; size = 4
_box_start$ = -28					; size = 4
_tick_end$ = -24					; size = 4
_x_end$ = -20						; size = 4
_x_start$ = -16						; size = 4
_box_bottom$ = -12					; size = 4
_box_top$ = -8						; size = 4
_y_centre$ = -4						; size = 4
?draw_radar_altitude_scale@@YGXXZ PROC			; draw_radar_altitude_scale, COMDAT

; 1069 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1070 : 	const float
; 1071 : 		y_centre = 0.1,

  0000c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00014	f3 0f 11 45 fc	 movss	 DWORD PTR _y_centre$[ebp], xmm0

; 1072 : 		box_top = y_centre + 0.05,

  00019	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00021	f3 0f 11 45 f8	 movss	 DWORD PTR _box_top$[ebp], xmm0

; 1073 : 		box_bottom = y_centre - 0.05;

  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  0002e	f3 0f 11 45 f4	 movss	 DWORD PTR _box_bottom$[ebp], xmm0

; 1074 : 
; 1075 : 	float
; 1076 : 		x_start,
; 1077 : 		x_end,
; 1078 : 		tick_end,
; 1079 : 		box_start,
; 1080 : 		box_end,
; 1081 : 		x_adjust,
; 1082 : 		y_adjust = y_centre,

  00033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0003b	f3 0f 11 45 d8	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1083 : 		radar_altitude = bound(feet(current_flight_dynamics->radar_altitude.value), 0.0, 500.0);

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00045	f3 0f 10 80 44
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9284]
  0004d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4051f948
  00055	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00059	0f 57 c9	 xorps	 xmm1, xmm1
  0005c	66 0f 2f c8	 comisd	 xmm1, xmm0
  00060	76 0d		 jbe	 SHORT $LN11@draw_radar
  00062	0f 57 c0	 xorps	 xmm0, xmm0
  00065	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv82[ebp], xmm0
  0006d	eb 68		 jmp	 SHORT $LN12@draw_radar
$LN11@draw_radar:
  0006f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00075	f3 0f 10 81 44
	24 00 00	 movss	 xmm0, DWORD PTR [ecx+9284]
  0007d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4051f948
  00085	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00089	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@407f400000000000
  00091	76 12		 jbe	 SHORT $LN9@draw_radar
  00093	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@407f400000000000
  0009b	f2 0f 11 85 5c
	ff ff ff	 movsd	 QWORD PTR tv81[ebp], xmm0
  000a3	eb 22		 jmp	 SHORT $LN10@draw_radar
$LN9@draw_radar:
  000a5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000ab	f3 0f 10 82 44
	24 00 00	 movss	 xmm0, DWORD PTR [edx+9284]
  000b3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4051f948
  000bb	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000bf	f2 0f 11 85 5c
	ff ff ff	 movsd	 QWORD PTR tv81[ebp], xmm0
$LN10@draw_radar:
  000c7	f2 0f 10 85 5c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv81[ebp]
  000cf	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv82[ebp], xmm0
$LN12@draw_radar:
  000d7	f2 0f 5a 85 64
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv82[ebp]
  000df	f3 0f 11 45 d4	 movss	 DWORD PTR _radar_altitude$[ebp], xmm0

; 1084 : 
; 1085 : 	char
; 1086 : 		buffer[8];
; 1087 : 
; 1088 : 	if (draw_main_display)

  000e4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_main_display@@3HA, 0
  000eb	74 0f		 je	 SHORT $LN5@draw_radar

; 1089 : 		x_start = -0.76;

  000ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf428f5c
  000f5	f3 0f 11 45 f0	 movss	 DWORD PTR _x_start$[ebp], xmm0

; 1090 : 	else

  000fa	eb 0d		 jmp	 SHORT $LN6@draw_radar
$LN5@draw_radar:

; 1091 : 		x_start = -0.98;

  000fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00104	f3 0f 11 45 f0	 movss	 DWORD PTR _x_start$[ebp], xmm0
$LN6@draw_radar:

; 1092 : 
; 1093 : 	x_end = x_start + 0.04;

  00109	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _x_start$[ebp]
  0010e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00116	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0011a	f3 0f 11 45 ec	 movss	 DWORD PTR _x_end$[ebp], xmm0

; 1094 : 	tick_end = x_end + 0.02;

  0011f	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _x_end$[ebp]
  00124	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  0012c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00130	f3 0f 11 45 e8	 movss	 DWORD PTR _tick_end$[ebp], xmm0

; 1095 : 	box_start = x_start + 0.07;

  00135	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _x_start$[ebp]
  0013a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb1eb851eb851ec
  00142	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00146	f3 0f 11 45 e4	 movss	 DWORD PTR _box_start$[ebp], xmm0

; 1096 : 	box_end = box_start + 0.18;

  0014b	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _box_start$[ebp]
  00150	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc70a3d70a3d70a
  00158	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0015c	f3 0f 11 45 e0	 movss	 DWORD PTR _box_end$[ebp], xmm0

; 1097 : 
; 1098 : 	// draw box with digital radar altitude readout
; 1099 : 	draw_2d_line(box_start, box_top, box_end, box_top, MFD_COLOUR1);

  00161	b8 04 00 00 00	 mov	 eax, 4
  00166	6b c8 00	 imul	 ecx, eax, 0
  00169	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0016f	52		 push	 edx
  00170	51		 push	 ecx
  00171	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00179	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017e	51		 push	 ecx
  0017f	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _box_end$[ebp]
  00184	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00189	51		 push	 ecx
  0018a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00192	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00197	51		 push	 ecx
  00198	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _box_start$[ebp]
  0019d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1100 : 	draw_2d_line(box_start, box_bottom, box_end, box_bottom, MFD_COLOUR1);

  001a7	b8 04 00 00 00	 mov	 eax, 4
  001ac	6b c8 00	 imul	 ecx, eax, 0
  001af	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001b5	52		 push	 edx
  001b6	51		 push	 ecx
  001b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  001bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c4	51		 push	 ecx
  001c5	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _box_end$[ebp]
  001ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cf	51		 push	 ecx
  001d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  001d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001dd	51		 push	 ecx
  001de	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _box_start$[ebp]
  001e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1101 : 	draw_2d_line(box_start, box_top, box_start, box_bottom, MFD_COLOUR1);

  001ed	b8 04 00 00 00	 mov	 eax, 4
  001f2	6b c8 00	 imul	 ecx, eax, 0
  001f5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001fb	52		 push	 edx
  001fc	51		 push	 ecx
  001fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  00205	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020a	51		 push	 ecx
  0020b	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _box_start$[ebp]
  00210	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00215	51		 push	 ecx
  00216	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  0021e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00223	51		 push	 ecx
  00224	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _box_start$[ebp]
  00229	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1102 : 	draw_2d_line(box_end, box_top, box_end, box_bottom, MFD_COLOUR1);

  00233	b8 04 00 00 00	 mov	 eax, 4
  00238	6b c8 00	 imul	 ecx, eax, 0
  0023b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00241	52		 push	 edx
  00242	51		 push	 ecx
  00243	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  0024b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00250	51		 push	 ecx
  00251	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _box_end$[ebp]
  00256	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025b	51		 push	 ecx
  0025c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00264	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00269	51		 push	 ecx
  0026a	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _box_end$[ebp]
  0026f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00274	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1103 : 
; 1104 : 	draw_2d_line(x_start, y_centre, box_start, y_centre, MFD_COLOUR1);

  00279	b8 04 00 00 00	 mov	 eax, 4
  0027e	6b c8 00	 imul	 ecx, eax, 0
  00281	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00287	52		 push	 edx
  00288	51		 push	 ecx
  00289	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00291	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00296	51		 push	 ecx
  00297	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _box_start$[ebp]
  0029c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a1	51		 push	 ecx
  002a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  002aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002af	51		 push	 ecx
  002b0	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x_start$[ebp]
  002b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ba	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1105 : 
; 1106 : 	// rate_of_climb
; 1107 : 	{
; 1108 : 		float roc = bound(current_flight_dynamics->world_velocity_y.value * 0.05, -0.2, 0.2);

  002bf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002c4	f3 0f 5a 80 14
	21 00 00	 cvtss2sd xmm0, DWORD PTR [eax+8468]
  002cc	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fa999999999999a
  002d4	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bfc999999999999a
  002dc	66 0f 2f c8	 comisd	 xmm1, xmm0
  002e0	76 12		 jbe	 SHORT $LN15@draw_radar
  002e2	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bfc999999999999a
  002ea	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv179[ebp], xmm0
  002f2	eb 60		 jmp	 SHORT $LN16@draw_radar
$LN15@draw_radar:
  002f4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002fa	f3 0f 5a 81 14
	21 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+8468]
  00302	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fa999999999999a
  0030a	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fc999999999999a
  00312	76 12		 jbe	 SHORT $LN13@draw_radar
  00314	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0031c	f2 0f 11 85 5c
	ff ff ff	 movsd	 QWORD PTR tv178[ebp], xmm0
  00324	eb 1e		 jmp	 SHORT $LN14@draw_radar
$LN13@draw_radar:
  00326	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0032c	f3 0f 5a 82 14
	21 00 00	 cvtss2sd xmm0, DWORD PTR [edx+8468]
  00334	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fa999999999999a
  0033c	f2 0f 11 85 5c
	ff ff ff	 movsd	 QWORD PTR tv178[ebp], xmm0
$LN14@draw_radar:
  00344	f2 0f 10 85 5c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv178[ebp]
  0034c	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv179[ebp], xmm0
$LN16@draw_radar:
  00354	f2 0f 5a 85 64
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv179[ebp]
  0035c	f3 0f 11 45 c8	 movss	 DWORD PTR _roc$8[ebp], xmm0

; 1109 : 		draw_2d_mono_sprite (large_left_carat, x_end, y_centre + roc, MFD_COLOUR1);

  00361	b8 04 00 00 00	 mov	 eax, 4
  00366	6b c8 00	 imul	 ecx, eax, 0
  00369	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0036f	52		 push	 edx
  00370	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00378	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _roc$8[ebp]
  0037d	51		 push	 ecx
  0037e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00383	51		 push	 ecx
  00384	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_end$[ebp]
  00389	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038e	68 00 00 00 00	 push	 OFFSET ?large_left_carat@@3PADA
  00393	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1110 : 	}
; 1111 : 
; 1112 : 	// print digital readout
; 1113 : 
; 1114 : 	set_mono_font_type (MONO_FONT_TYPE_6X10);

  00398	6a 04		 push	 4
  0039a	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1115 : 	y_adjust = -4.0;

  0039f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  003a7	f3 0f 11 45 d8	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1116 : 
; 1117 : 	sprintf(buffer, "%3d", (int)radar_altitude);

  003ac	f3 0f 2c 45 d4	 cvttss2si eax, DWORD PTR _radar_altitude$[ebp]
  003b1	50		 push	 eax
  003b2	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  003b7	8d 4d cc	 lea	 ecx, DWORD PTR _buffer$[ebp]
  003ba	51		 push	 ecx
  003bb	e8 00 00 00 00	 call	 _sprintf
  003c0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1118 : 	x_adjust = -get_mono_font_string_width(buffer) - 1;

  003c3	8d 45 cc	 lea	 eax, DWORD PTR _buffer$[ebp]
  003c6	50		 push	 eax
  003c7	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  003cc	d9 9d 68 ff ff
	ff		 fstp	 DWORD PTR tv405[ebp]
  003d2	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR tv405[ebp]
  003da	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  003e1	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  003e9	f3 0f 11 45 dc	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 1119 : 
; 1120 : 	set_2d_mono_font_position (box_end, y_centre);

  003ee	51		 push	 ecx
  003ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  003f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003fc	51		 push	 ecx
  003fd	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _box_end$[ebp]
  00402	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00407	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1121 : 	set_mono_font_rel_position (x_adjust, y_adjust);

  0040c	51		 push	 ecx
  0040d	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00412	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00417	51		 push	 ecx
  00418	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0041d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00422	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1122 : 	print_mono_font_string(buffer);

  00427	8d 45 cc	 lea	 eax, DWORD PTR _buffer$[ebp]
  0042a	50		 push	 eax
  0042b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1123 : 
; 1124 : 	// draw altitude scale
; 1125 : 	{
; 1126 : 		const float
; 1127 : 			scale_height = 0.6,

  00430	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00438	f3 0f 11 45 c4	 movss	 DWORD PTR _scale_height$7[ebp], xmm0

; 1128 : 			low_height = scale_height * 0.75,

  0043d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66667
  00445	f3 0f 11 45 c0	 movss	 DWORD PTR _low_height$6[ebp], xmm0

; 1129 : 			high_height = scale_height - low_height,

  0044a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00452	f3 0f 11 45 bc	 movss	 DWORD PTR _high_height$5[ebp], xmm0

; 1130 : 			low_step = low_height / 3,

  00457	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  0045f	f3 0f 11 45 b8	 movss	 DWORD PTR _low_step$4[ebp], xmm0

; 1131 : 			high_step = high_height / 2;

  00464	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d99999a
  0046c	f3 0f 11 45 b4	 movss	 DWORD PTR _high_step$3[ebp], xmm0

; 1132 : 
; 1133 : 		float
; 1134 : 			current_y;
; 1135 : 
; 1136 : 		int i;
; 1137 : 
; 1138 : 		// adjust start of altitude scale
; 1139 : 		current_y = y_centre;

  00471	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00479	f3 0f 11 45 b0	 movss	 DWORD PTR _current_y$2[ebp], xmm0

; 1140 : 		current_y -= bound(radar_altitude, 0.0, 300.0) * low_step * 0.01;

  0047e	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _radar_altitude$[ebp]
  00483	0f 57 c9	 xorps	 xmm1, xmm1
  00486	66 0f 2f c8	 comisd	 xmm1, xmm0
  0048a	76 0d		 jbe	 SHORT $LN19@draw_radar
  0048c	0f 57 c0	 xorps	 xmm0, xmm0
  0048f	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv208[ebp], xmm0
  00497	eb 3e		 jmp	 SHORT $LN20@draw_radar
$LN19@draw_radar:
  00499	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _radar_altitude$[ebp]
  0049e	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4072c00000000000
  004a6	76 12		 jbe	 SHORT $LN17@draw_radar
  004a8	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4072c00000000000
  004b0	f2 0f 11 85 5c
	ff ff ff	 movsd	 QWORD PTR tv207[ebp], xmm0
  004b8	eb 0d		 jmp	 SHORT $LN18@draw_radar
$LN17@draw_radar:
  004ba	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _radar_altitude$[ebp]
  004bf	f2 0f 11 85 5c
	ff ff ff	 movsd	 QWORD PTR tv207[ebp], xmm0
$LN18@draw_radar:
  004c7	f2 0f 10 85 5c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv207[ebp]
  004cf	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv208[ebp], xmm0
$LN20@draw_radar:
  004d7	f2 0f 10 85 64
	ff ff ff	 movsd	 xmm0, QWORD PTR tv208[ebp]
  004df	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc3333340000000
  004e7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  004ef	f3 0f 5a 4d b0	 cvtss2sd xmm1, DWORD PTR _current_y$2[ebp]
  004f4	f2 0f 5c c8	 subsd	 xmm1, xmm0
  004f8	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  004fc	f3 0f 11 45 b0	 movss	 DWORD PTR _current_y$2[ebp], xmm0

; 1141 : 		if (radar_altitude > 300)

  00501	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _radar_altitude$[ebp]
  00506	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@43960000
  0050d	0f 86 9b 00 00
	00		 jbe	 $LN7@draw_radar

; 1142 : 			current_y -= bound(radar_altitude - 300.0, 0.0, 200.0) * high_step * 0.01;

  00513	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _radar_altitude$[ebp]
  00518	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4072c00000000000
  00520	0f 57 c9	 xorps	 xmm1, xmm1
  00523	66 0f 2f c8	 comisd	 xmm1, xmm0
  00527	76 0d		 jbe	 SHORT $LN23@draw_radar
  00529	0f 57 c0	 xorps	 xmm0, xmm0
  0052c	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv224[ebp], xmm0
  00534	eb 4e		 jmp	 SHORT $LN24@draw_radar
$LN23@draw_radar:
  00536	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _radar_altitude$[ebp]
  0053b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4072c00000000000
  00543	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4069000000000000
  0054b	76 12		 jbe	 SHORT $LN21@draw_radar
  0054d	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4069000000000000
  00555	f2 0f 11 85 5c
	ff ff ff	 movsd	 QWORD PTR tv223[ebp], xmm0
  0055d	eb 15		 jmp	 SHORT $LN22@draw_radar
$LN21@draw_radar:
  0055f	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _radar_altitude$[ebp]
  00564	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4072c00000000000
  0056c	f2 0f 11 85 5c
	ff ff ff	 movsd	 QWORD PTR tv223[ebp], xmm0
$LN22@draw_radar:
  00574	f2 0f 10 85 5c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv223[ebp]
  0057c	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR tv224[ebp], xmm0
$LN24@draw_radar:
  00584	f2 0f 10 85 64
	ff ff ff	 movsd	 xmm0, QWORD PTR tv224[ebp]
  0058c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb3333340000000
  00594	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  0059c	f3 0f 5a 4d b0	 cvtss2sd xmm1, DWORD PTR _current_y$2[ebp]
  005a1	f2 0f 5c c8	 subsd	 xmm1, xmm0
  005a5	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  005a9	f3 0f 11 45 b0	 movss	 DWORD PTR _current_y$2[ebp], xmm0
$LN7@draw_radar:

; 1143 : 
; 1144 : 		// draw main box
; 1145 : 		draw_2d_line(x_start, current_y, tick_end, current_y, MFD_COLOUR1);

  005ae	b8 04 00 00 00	 mov	 eax, 4
  005b3	6b c8 00	 imul	 ecx, eax, 0
  005b6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005bc	52		 push	 edx
  005bd	51		 push	 ecx
  005be	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  005c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c8	51		 push	 ecx
  005c9	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _tick_end$[ebp]
  005ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d3	51		 push	 ecx
  005d4	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  005d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005de	51		 push	 ecx
  005df	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x_start$[ebp]
  005e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1146 : 		draw_2d_line(x_start, current_y + scale_height, tick_end, current_y + scale_height, MFD_COLOUR1);

  005ee	b8 04 00 00 00	 mov	 eax, 4
  005f3	6b c8 00	 imul	 ecx, eax, 0
  005f6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005fc	52		 push	 edx
  005fd	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  00602	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f19999a
  0060a	51		 push	 ecx
  0060b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00610	51		 push	 ecx
  00611	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _tick_end$[ebp]
  00616	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0061b	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  00620	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f19999a
  00628	51		 push	 ecx
  00629	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0062e	51		 push	 ecx
  0062f	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x_start$[ebp]
  00634	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00639	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1147 : 		draw_2d_line(x_start, current_y, x_start, current_y + scale_height, MFD_COLOUR1);

  0063e	b8 04 00 00 00	 mov	 eax, 4
  00643	6b c8 00	 imul	 ecx, eax, 0
  00646	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0064c	52		 push	 edx
  0064d	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  00652	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f19999a
  0065a	51		 push	 ecx
  0065b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00660	51		 push	 ecx
  00661	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x_start$[ebp]
  00666	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0066b	51		 push	 ecx
  0066c	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  00671	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00676	51		 push	 ecx
  00677	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x_start$[ebp]
  0067c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00681	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1148 : 		draw_2d_line(x_end, current_y, x_end, current_y + scale_height, MFD_COLOUR1);

  00686	b8 04 00 00 00	 mov	 eax, 4
  0068b	6b c8 00	 imul	 ecx, eax, 0
  0068e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00694	52		 push	 edx
  00695	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  0069a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f19999a
  006a2	51		 push	 ecx
  006a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a8	51		 push	 ecx
  006a9	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_end$[ebp]
  006ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b3	51		 push	 ecx
  006b4	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  006b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006be	51		 push	 ecx
  006bf	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_end$[ebp]
  006c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1149 : 
; 1150 : 		// draw tick marks
; 1151 : 		for (i = 0; i < 3; i++)

  006ce	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  006d5	eb 09		 jmp	 SHORT $LN4@draw_radar
$LN2@draw_radar:
  006d7	8b 45 ac	 mov	 eax, DWORD PTR _i$1[ebp]
  006da	83 c0 01	 add	 eax, 1
  006dd	89 45 ac	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@draw_radar:
  006e0	83 7d ac 03	 cmp	 DWORD PTR _i$1[ebp], 3
  006e4	7d 54		 jge	 SHORT $LN3@draw_radar

; 1152 : 		{
; 1153 : 			current_y += low_step;

  006e6	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  006eb	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3e19999a
  006f3	f3 0f 11 45 b0	 movss	 DWORD PTR _current_y$2[ebp], xmm0

; 1154 : 			draw_2d_line(x_end, current_y, tick_end, current_y, MFD_COLOUR1);

  006f8	b8 04 00 00 00	 mov	 eax, 4
  006fd	6b c8 00	 imul	 ecx, eax, 0
  00700	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00706	52		 push	 edx
  00707	51		 push	 ecx
  00708	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  0070d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00712	51		 push	 ecx
  00713	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _tick_end$[ebp]
  00718	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0071d	51		 push	 ecx
  0071e	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  00723	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00728	51		 push	 ecx
  00729	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_end$[ebp]
  0072e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00733	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1155 : 		}

  00738	eb 9d		 jmp	 SHORT $LN2@draw_radar
$LN3@draw_radar:

; 1156 : 
; 1157 : 		current_y += high_step;

  0073a	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  0073f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3d99999a
  00747	f3 0f 11 45 b0	 movss	 DWORD PTR _current_y$2[ebp], xmm0

; 1158 : 		draw_2d_line(x_end, current_y, tick_end, current_y, MFD_COLOUR1);

  0074c	b8 04 00 00 00	 mov	 eax, 4
  00751	6b c8 00	 imul	 ecx, eax, 0
  00754	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0075a	52		 push	 edx
  0075b	51		 push	 ecx
  0075c	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  00761	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00766	51		 push	 ecx
  00767	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _tick_end$[ebp]
  0076c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00771	51		 push	 ecx
  00772	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _current_y$2[ebp]
  00777	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077c	51		 push	 ecx
  0077d	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_end$[ebp]
  00782	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00787	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1159 : 	}
; 1160 : }

  0078c	5f		 pop	 edi
  0078d	5e		 pop	 esi
  0078e	5b		 pop	 ebx
  0078f	8b e5		 mov	 esp, ebp
  00791	5d		 pop	 ebp
  00792	c3		 ret	 0
?draw_radar_altitude_scale@@YGXXZ ENDP			; draw_radar_altitude_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_airspeed_scale@@YGXXZ
_TEXT	SEGMENT
tv570 = -208						; size = 4
tv440 = -208						; size = 4
tv226 = -208						; size = 4
tv176 = -208						; size = 4
_buffer$1 = -140					; size = 8
_x_adjust$2 = -132					; size = 4
_v2$3 = -128						; size = 4
_v1$4 = -124						; size = 4
_u2$5 = -120						; size = 4
_u1$6 = -116						; size = 4
_bottom$7 = -112					; size = 4
_top$8 = -108						; size = 4
_x_end$9 = -104						; size = 4
_x_start$10 = -100					; size = 4
_buffer$11 = -96					; size = 8
_x_adjust$12 = -88					; size = 4
_loop$13 = -84						; size = 4
_y$14 = -80						; size = 4
_tick_type$15 = -76					; size = 4
_mod_scale_step_5$16 = -72				; size = 4
_int_scale_step_5$17 = -68				; size = 4
_scale_step_5$18 = -64					; size = 4
_x7$ = -60						; size = 4
_x6$ = -56						; size = 4
_x5$ = -52						; size = 4
_x4$ = -48						; size = 4
_x3$ = -44						; size = 4
_x2$ = -40						; size = 4
_x1$ = -36						; size = 4
_mfd_vp_y_max$ = -32					; size = 4
_mfd_vp_y_min$ = -28					; size = 4
_y_adjust$ = -24					; size = 4
_airspeed$ = -20					; size = 4
_tick_y_spacing$ = -16					; size = 4
_scale_height_ratio$ = -12				; size = 4
_y_centre$ = -8						; size = 4
_v$ = -4						; size = 4
?draw_airspeed_scale@@YGXXZ PROC			; draw_airspeed_scale, COMDAT

; 930  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 931  : 	float
; 932  : 		v,
; 933  : 		y_centre = 0.1,

  0000c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00014	f3 0f 11 45 f8	 movss	 DWORD PTR _y_centre$[ebp], xmm0

; 934  : 		scale_height_ratio = 0.35,

  00019	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  00021	f3 0f 11 45 f4	 movss	 DWORD PTR _scale_height_ratio$[ebp], xmm0

; 935  : 		tick_y_spacing = 0.27,

  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8a3d71
  0002e	f3 0f 11 45 f0	 movss	 DWORD PTR _tick_y_spacing$[ebp], xmm0

; 936  : 		airspeed = current_flight_dynamics->velocity_z.value,

  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00038	f3 0f 10 80 9c
	20 00 00	 movss	 xmm0, DWORD PTR [eax+8348]
  00040	f3 0f 11 45 ec	 movss	 DWORD PTR _airspeed$[ebp], xmm0

; 937  : 		y_adjust,
; 938  : 		mfd_vp_y_min,
; 939  : 		mfd_vp_y_max;
; 940  : 
; 941  : 	float x1, x2, x3, x4, x5, x6, x7;
; 942  : 
; 943  : 	if (draw_main_display)

  00045	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_main_display@@3HA, 0
  0004c	74 0f		 je	 SHORT $LN5@draw_airsp

; 944  : 		x1 = 0.41;

  0004e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed1eb85
  00056	f3 0f 11 45 dc	 movss	 DWORD PTR _x1$[ebp], xmm0

; 945  : 	else

  0005b	eb 0d		 jmp	 SHORT $LN6@draw_airsp
$LN5@draw_airsp:

; 946  : 		x1 = -0.1;

  0005d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  00065	f3 0f 11 45 dc	 movss	 DWORD PTR _x1$[ebp], xmm0
$LN6@draw_airsp:

; 947  : 
; 948  : 	x2 = x1 + 0.04;

  0006a	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0006f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00077	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0007b	f3 0f 11 45 d8	 movss	 DWORD PTR _x2$[ebp], xmm0

; 949  : 	x4 = x1 + 0.13;

  00080	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00085	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc0a3d70a3d70a4
  0008d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00091	f3 0f 11 45 d0	 movss	 DWORD PTR _x4$[ebp], xmm0

; 950  : 	x3 = x4 - 0.02;

  00096	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _x4$[ebp]
  0009b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  000a3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000a7	f3 0f 11 45 d4	 movss	 DWORD PTR _x3$[ebp], xmm0

; 951  : 	x5 = x4 + 0.02;

  000ac	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _x4$[ebp]
  000b1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  000b9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000bd	f3 0f 11 45 cc	 movss	 DWORD PTR _x5$[ebp], xmm0

; 952  : 	x7 = x1 + 0.26;

  000c2	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  000c7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0a3d70a3d70a4
  000cf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000d3	f3 0f 11 45 c4	 movss	 DWORD PTR _x7$[ebp], xmm0

; 953  : 	x6 = x7 - 0.04;

  000d8	f3 0f 5a 45 c4	 cvtss2sd xmm0, DWORD PTR _x7$[ebp]
  000dd	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  000e5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000e9	f3 0f 11 45 c8	 movss	 DWORD PTR _x6$[ebp], xmm0

; 954  : 
; 955  : 	get_2d_float_screen_x_coordinate (-y_centre, &v);

  000ee	8d 45 fc	 lea	 eax, DWORD PTR _v$[ebp]
  000f1	50		 push	 eax
  000f2	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  000f7	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000fe	51		 push	 ecx
  000ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00104	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 956  : 
; 957  : 	// draw box around
; 958  : 	draw_2d_line (x1, y_centre + scale_height_ratio, x7, y_centre + scale_height_ratio, MFD_COLOUR1);

  00109	b8 04 00 00 00	 mov	 eax, 4
  0010e	6b c8 00	 imul	 ecx, eax, 0
  00111	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00117	52		 push	 edx
  00118	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  0011d	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _scale_height_ratio$[ebp]
  00122	51		 push	 ecx
  00123	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00128	51		 push	 ecx
  00129	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _x7$[ebp]
  0012e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00133	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  00138	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _scale_height_ratio$[ebp]
  0013d	51		 push	 ecx
  0013e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00143	51		 push	 ecx
  00144	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00149	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 959  : 	draw_2d_line (x1, y_centre - scale_height_ratio, x7, y_centre - scale_height_ratio, MFD_COLOUR1);

  00153	b8 04 00 00 00	 mov	 eax, 4
  00158	6b c8 00	 imul	 ecx, eax, 0
  0015b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00161	52		 push	 edx
  00162	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  00167	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _scale_height_ratio$[ebp]
  0016c	51		 push	 ecx
  0016d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00172	51		 push	 ecx
  00173	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _x7$[ebp]
  00178	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  00182	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _scale_height_ratio$[ebp]
  00187	51		 push	 ecx
  00188	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018d	51		 push	 ecx
  0018e	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00193	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00198	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 960  : 	draw_2d_line (x7, y_centre + scale_height_ratio, x7, y_centre - scale_height_ratio, MFD_COLOUR1);

  0019d	b8 04 00 00 00	 mov	 eax, 4
  001a2	6b c8 00	 imul	 ecx, eax, 0
  001a5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001ab	52		 push	 edx
  001ac	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  001b1	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _scale_height_ratio$[ebp]
  001b6	51		 push	 ecx
  001b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bc	51		 push	 ecx
  001bd	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _x7$[ebp]
  001c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c7	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  001cc	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _scale_height_ratio$[ebp]
  001d1	51		 push	 ecx
  001d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d7	51		 push	 ecx
  001d8	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _x7$[ebp]
  001dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 961  : 
; 962  : 	mfd_vp_y_min = v - (0.5 * mfd_viewport_size * (scale_height_ratio));

  001e7	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _v$[ebp]
  001ec	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  001f4	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  001fc	f3 0f 5a 55 f4	 cvtss2sd xmm2, DWORD PTR _scale_height_ratio$[ebp]
  00201	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00205	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00209	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0020d	f3 0f 11 45 e4	 movss	 DWORD PTR _mfd_vp_y_min$[ebp], xmm0

; 963  : 	mfd_vp_y_max = v + (0.5 * mfd_viewport_size * (scale_height_ratio)) - 0.001;

  00212	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _v$[ebp]
  00217	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  0021f	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00227	f3 0f 5a 55 f4	 cvtss2sd xmm2, DWORD PTR _scale_height_ratio$[ebp]
  0022c	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00230	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00234	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0023c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00240	f3 0f 11 45 e0	 movss	 DWORD PTR _mfd_vp_y_max$[ebp], xmm0

; 964  : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_vp_y_min, mfd_viewport_x_max, mfd_vp_y_max);

  00245	51		 push	 ecx
  00246	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_vp_y_max$[ebp]
  0024b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00250	51		 push	 ecx
  00251	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00259	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025e	51		 push	 ecx
  0025f	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _mfd_vp_y_min$[ebp]
  00264	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00269	51		 push	 ecx
  0026a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00272	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00277	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0027c	50		 push	 eax
  0027d	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 965  : 
; 966  : 	//
; 967  : 	// draw speed scale
; 968  : 	//
; 969  : 
; 970  : 	{
; 971  : 		float scale_step_5 = knots(airspeed * 0.2);

  00282	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _airspeed$[ebp]
  00287	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0028f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fff0bb080000000
  00297	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0029b	f3 0f 11 45 c0	 movss	 DWORD PTR _scale_step_5$18[ebp], xmm0

; 972  : 		int int_scale_step_5 = (int) scale_step_5;

  002a0	f3 0f 2c 45 c0	 cvttss2si eax, DWORD PTR _scale_step_5$18[ebp]
  002a5	89 45 bc	 mov	 DWORD PTR _int_scale_step_5$17[ebp], eax

; 973  : 		float mod_scale_step_5 = scale_step_5 - (float) int_scale_step_5;

  002a8	f3 0f 2a 45 bc	 cvtsi2ss xmm0, DWORD PTR _int_scale_step_5$17[ebp]
  002ad	f3 0f 10 4d c0	 movss	 xmm1, DWORD PTR _scale_step_5$18[ebp]
  002b2	f3 0f 5c c8	 subss	 xmm1, xmm0
  002b6	f3 0f 11 4d b8	 movss	 DWORD PTR _mod_scale_step_5$16[ebp], xmm1

; 974  : 
; 975  : 		int tick_type = (int_scale_step_5 % 2) == 0;

  002bb	8b 45 bc	 mov	 eax, DWORD PTR _int_scale_step_5$17[ebp]
  002be	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  002c3	79 05		 jns	 SHORT $LN15@draw_airsp
  002c5	48		 dec	 eax
  002c6	83 c8 fe	 or	 eax, -2			; fffffffeH
  002c9	40		 inc	 eax
$LN15@draw_airsp:
  002ca	85 c0		 test	 eax, eax
  002cc	75 0c		 jne	 SHORT $LN11@draw_airsp
  002ce	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv176[ebp], 1
  002d8	eb 0a		 jmp	 SHORT $LN12@draw_airsp
$LN11@draw_airsp:
  002da	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv176[ebp], 0
$LN12@draw_airsp:
  002e4	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv176[ebp]
  002ea	89 4d b4	 mov	 DWORD PTR _tick_type$15[ebp], ecx

; 976  : 		float y = -(5.0 + mod_scale_step_5) * tick_y_spacing;

  002ed	f3 0f 5a 45 b8	 cvtss2sd xmm0, DWORD PTR _mod_scale_step_5$16[ebp]
  002f2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4014000000000000
  002fa	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00301	f3 0f 5a 4d f0	 cvtss2sd xmm1, DWORD PTR _tick_y_spacing$[ebp]
  00306	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0030a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0030e	f3 0f 11 45 b0	 movss	 DWORD PTR _y$14[ebp], xmm0

; 977  : 		int loop;
; 978  : 
; 979  : 		int_scale_step_5 -= 5;

  00313	8b 45 bc	 mov	 eax, DWORD PTR _int_scale_step_5$17[ebp]
  00316	83 e8 05	 sub	 eax, 5
  00319	89 45 bc	 mov	 DWORD PTR _int_scale_step_5$17[ebp], eax

; 980  : 
; 981  : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  0031c	6a 01		 push	 1
  0031e	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 982  : 		y_adjust = -2.0;

  00323	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  0032b	f3 0f 11 45 e8	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 983  : 
; 984  : 		for (loop = 0; loop <= 10; loop++)

  00330	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _loop$13[ebp], 0
  00337	eb 09		 jmp	 SHORT $LN4@draw_airsp
$LN2@draw_airsp:
  00339	8b 45 ac	 mov	 eax, DWORD PTR _loop$13[ebp]
  0033c	83 c0 01	 add	 eax, 1
  0033f	89 45 ac	 mov	 DWORD PTR _loop$13[ebp], eax
$LN4@draw_airsp:
  00342	83 7d ac 0a	 cmp	 DWORD PTR _loop$13[ebp], 10 ; 0000000aH
  00346	0f 8f 98 01 00
	00		 jg	 $LN3@draw_airsp

; 985  : 		{
; 986  : 			if (int_scale_step_5 >= 0)

  0034c	83 7d bc 00	 cmp	 DWORD PTR _int_scale_step_5$17[ebp], 0
  00350	0f 8c 4c 01 00
	00		 jl	 $LN9@draw_airsp

; 987  : 			{
; 988  : 				if (tick_type == 0)

  00356	83 7d b4 00	 cmp	 DWORD PTR _tick_type$15[ebp], 0
  0035a	0f 85 02 01 00
	00		 jne	 $LN8@draw_airsp

; 989  : 				{
; 990  : 					float x_adjust;
; 991  : 					char buffer[8];
; 992  : 
; 993  : 					draw_2d_line (x1, y, x2, y, MFD_COLOUR1);

  00360	b8 04 00 00 00	 mov	 eax, 4
  00365	6b c8 00	 imul	 ecx, eax, 0
  00368	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0036e	52		 push	 edx
  0036f	51		 push	 ecx
  00370	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _y$14[ebp]
  00375	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037a	51		 push	 ecx
  0037b	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00380	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00385	51		 push	 ecx
  00386	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _y$14[ebp]
  0038b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00390	51		 push	 ecx
  00391	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00396	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 994  : 					draw_2d_line (x6, y, x7, y, MFD_COLOUR1);

  003a0	b8 04 00 00 00	 mov	 eax, 4
  003a5	6b c8 00	 imul	 ecx, eax, 0
  003a8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003ae	52		 push	 edx
  003af	51		 push	 ecx
  003b0	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _y$14[ebp]
  003b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ba	51		 push	 ecx
  003bb	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _x7$[ebp]
  003c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c5	51		 push	 ecx
  003c6	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _y$14[ebp]
  003cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d0	51		 push	 ecx
  003d1	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x6$[ebp]
  003d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003db	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 995  : 
; 996  : 					sprintf(buffer, "%d", int_scale_step_5 * 5);

  003e0	6b 45 bc 05	 imul	 eax, DWORD PTR _int_scale_step_5$17[ebp], 5
  003e4	50		 push	 eax
  003e5	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  003ea	8d 4d a0	 lea	 ecx, DWORD PTR _buffer$11[ebp]
  003ed	51		 push	 ecx
  003ee	e8 00 00 00 00	 call	 _sprintf
  003f3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 997  : 					x_adjust = get_mono_font_string_width(buffer) / 2;

  003f6	8d 45 a0	 lea	 eax, DWORD PTR _buffer$11[ebp]
  003f9	50		 push	 eax
  003fa	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  003ff	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR tv440[ebp]
  00405	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR tv440[ebp]
  0040d	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00415	f3 0f 11 45 a8	 movss	 DWORD PTR _x_adjust$12[ebp], xmm0

; 998  : 
; 999  : 					set_2d_mono_font_position (x4, y);

  0041a	51		 push	 ecx
  0041b	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _y$14[ebp]
  00420	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00425	51		 push	 ecx
  00426	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _x4$[ebp]
  0042b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00430	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1000 : 					set_mono_font_rel_position (-x_adjust, y_adjust);

  00435	51		 push	 ecx
  00436	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0043b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00440	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x_adjust$12[ebp]
  00445	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0044c	51		 push	 ecx
  0044d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00452	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1001 : 					print_mono_font_string(buffer);

  00457	8d 45 a0	 lea	 eax, DWORD PTR _buffer$11[ebp]
  0045a	50		 push	 eax
  0045b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1002 : 				}
; 1003 : 				else

  00460	eb 40		 jmp	 SHORT $LN9@draw_airsp
$LN8@draw_airsp:

; 1004 : 					draw_2d_line (x3, y, x5, y, MFD_COLOUR1);

  00462	b8 04 00 00 00	 mov	 eax, 4
  00467	6b c8 00	 imul	 ecx, eax, 0
  0046a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00470	52		 push	 edx
  00471	51		 push	 ecx
  00472	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _y$14[ebp]
  00477	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047c	51		 push	 ecx
  0047d	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _x5$[ebp]
  00482	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00487	51		 push	 ecx
  00488	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _y$14[ebp]
  0048d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00492	51		 push	 ecx
  00493	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  00498	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0049d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN9@draw_airsp:

; 1005 : 			}
; 1006 : 
; 1007 : 			int_scale_step_5++;

  004a2	8b 45 bc	 mov	 eax, DWORD PTR _int_scale_step_5$17[ebp]
  004a5	83 c0 01	 add	 eax, 1
  004a8	89 45 bc	 mov	 DWORD PTR _int_scale_step_5$17[ebp], eax

; 1008 : 			tick_type = !tick_type;

  004ab	83 7d b4 00	 cmp	 DWORD PTR _tick_type$15[ebp], 0
  004af	75 0c		 jne	 SHORT $LN13@draw_airsp
  004b1	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv226[ebp], 1
  004bb	eb 0a		 jmp	 SHORT $LN14@draw_airsp
$LN13@draw_airsp:
  004bd	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv226[ebp], 0
$LN14@draw_airsp:
  004c7	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv226[ebp]
  004cd	89 45 b4	 mov	 DWORD PTR _tick_type$15[ebp], eax

; 1009 : 			y += tick_y_spacing;

  004d0	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _y$14[ebp]
  004d5	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _tick_y_spacing$[ebp]
  004da	f3 0f 11 45 b0	 movss	 DWORD PTR _y$14[ebp], xmm0

; 1010 : 		}

  004df	e9 55 fe ff ff	 jmp	 $LN2@draw_airsp
$LN3@draw_airsp:

; 1011 : 	}
; 1012 : 
; 1013 : 	//
; 1014 : 	// restore 2D environment
; 1015 : 	//
; 1016 : 
; 1017 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  004e4	51		 push	 ecx
  004e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  004ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f2	51		 push	 ecx
  004f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  004fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00500	51		 push	 ecx
  00501	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00509	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0050e	51		 push	 ecx
  0050f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00517	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0051c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00521	50		 push	 eax
  00522	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 1018 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00527	51		 push	 ecx
  00528	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00530	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00535	51		 push	 ecx
  00536	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0053e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00543	51		 push	 ecx
  00544	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0054c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00551	51		 push	 ecx
  00552	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0055a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0055f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00564	50		 push	 eax
  00565	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1019 : 
; 1020 : 	// draw centre box with digital airspeed
; 1021 : 
; 1022 : 	{
; 1023 : 		float
; 1024 : 			x_start = x1 + 0.04,

  0056a	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0056f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00577	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0057b	f3 0f 11 45 9c	 movss	 DWORD PTR _x_start$10[ebp], xmm0

; 1025 : 			x_end = x7 + 0.02,

  00580	f3 0f 5a 45 c4	 cvtss2sd xmm0, DWORD PTR _x7$[ebp]
  00585	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  0058d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00591	f3 0f 11 45 98	 movss	 DWORD PTR _x_end$9[ebp], xmm0

; 1026 : 			top = y_centre + 0.05,

  00596	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y_centre$[ebp]
  0059b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa999999999999a
  005a3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005a7	f3 0f 11 45 94	 movss	 DWORD PTR _top$8[ebp], xmm0

; 1027 : 			bottom = y_centre - 0.05;

  005ac	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y_centre$[ebp]
  005b1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  005b9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005bd	f3 0f 11 45 90	 movss	 DWORD PTR _bottom$7[ebp], xmm0

; 1028 : 
; 1029 : 		int u1, u2, v1, v2;
; 1030 : 
; 1031 : 		float x_adjust;
; 1032 : 		char buffer[8];
; 1033 : 
; 1034 : 		get_2d_int_screen_coordinates (x_start, top, &u1, &v1);

  005c2	8d 45 84	 lea	 eax, DWORD PTR _v1$4[ebp]
  005c5	50		 push	 eax
  005c6	8d 4d 8c	 lea	 ecx, DWORD PTR _u1$6[ebp]
  005c9	51		 push	 ecx
  005ca	51		 push	 ecx
  005cb	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _top$8[ebp]
  005d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d5	51		 push	 ecx
  005d6	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_start$10[ebp]
  005db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e0	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 1035 : 		get_2d_int_screen_coordinates (x_end, bottom, &u2, &v2);

  005e5	8d 45 80	 lea	 eax, DWORD PTR _v2$3[ebp]
  005e8	50		 push	 eax
  005e9	8d 4d 88	 lea	 ecx, DWORD PTR _u2$5[ebp]
  005ec	51		 push	 ecx
  005ed	51		 push	 ecx
  005ee	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _bottom$7[ebp]
  005f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f8	51		 push	 ecx
  005f9	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_end$9[ebp]
  005fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00603	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 1036 : 
; 1037 : 		// clear background area
; 1038 : 
; 1039 : 		set_block(u1, v1, u2, v2, MFD_BACKGROUND_COLOUR);

  00608	b8 04 00 00 00	 mov	 eax, 4
  0060d	6b c8 09	 imul	 ecx, eax, 9
  00610	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00616	52		 push	 edx
  00617	8b 45 80	 mov	 eax, DWORD PTR _v2$3[ebp]
  0061a	50		 push	 eax
  0061b	8b 4d 88	 mov	 ecx, DWORD PTR _u2$5[ebp]
  0061e	51		 push	 ecx
  0061f	8b 55 84	 mov	 edx, DWORD PTR _v1$4[ebp]
  00622	52		 push	 edx
  00623	8b 45 8c	 mov	 eax, DWORD PTR _u1$6[ebp]
  00626	50		 push	 eax
  00627	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 1040 : 		draw_2d_filled_triangle(x1, y_centre, x_start, top, x_start, bottom, MFD_BACKGROUND_COLOUR);

  0062c	b8 04 00 00 00	 mov	 eax, 4
  00631	6b c8 09	 imul	 ecx, eax, 9
  00634	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0063a	52		 push	 edx
  0063b	51		 push	 ecx
  0063c	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _bottom$7[ebp]
  00641	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00646	51		 push	 ecx
  00647	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_start$10[ebp]
  0064c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00651	51		 push	 ecx
  00652	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _top$8[ebp]
  00657	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0065c	51		 push	 ecx
  0065d	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_start$10[ebp]
  00662	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00667	51		 push	 ecx
  00668	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  0066d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00672	51		 push	 ecx
  00673	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00678	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0067d	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 1041 : 
; 1042 : 		// draw surrounding box
; 1043 : 
; 1044 : 		draw_2d_line(x_start, top, x_end, top, MFD_COLOUR1);

  00682	b8 04 00 00 00	 mov	 eax, 4
  00687	6b c8 00	 imul	 ecx, eax, 0
  0068a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00690	52		 push	 edx
  00691	51		 push	 ecx
  00692	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _top$8[ebp]
  00697	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0069c	51		 push	 ecx
  0069d	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_end$9[ebp]
  006a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a7	51		 push	 ecx
  006a8	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _top$8[ebp]
  006ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b2	51		 push	 ecx
  006b3	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_start$10[ebp]
  006b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006bd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1045 : 		draw_2d_line(x_start, bottom, x_end, bottom, MFD_COLOUR1);

  006c2	b8 04 00 00 00	 mov	 eax, 4
  006c7	6b c8 00	 imul	 ecx, eax, 0
  006ca	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006d0	52		 push	 edx
  006d1	51		 push	 ecx
  006d2	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _bottom$7[ebp]
  006d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006dc	51		 push	 ecx
  006dd	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_end$9[ebp]
  006e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006e7	51		 push	 ecx
  006e8	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _bottom$7[ebp]
  006ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f2	51		 push	 ecx
  006f3	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_start$10[ebp]
  006f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006fd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1046 : 		draw_2d_line(x_end, top, x_end, bottom, MFD_COLOUR1);

  00702	b8 04 00 00 00	 mov	 eax, 4
  00707	6b c8 00	 imul	 ecx, eax, 0
  0070a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00710	52		 push	 edx
  00711	51		 push	 ecx
  00712	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _bottom$7[ebp]
  00717	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0071c	51		 push	 ecx
  0071d	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_end$9[ebp]
  00722	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00727	51		 push	 ecx
  00728	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _top$8[ebp]
  0072d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00732	51		 push	 ecx
  00733	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _x_end$9[ebp]
  00738	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0073d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1047 : 		draw_2d_line(x1, y_centre, x_start, top, MFD_COLOUR1);

  00742	b8 04 00 00 00	 mov	 eax, 4
  00747	6b c8 00	 imul	 ecx, eax, 0
  0074a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00750	52		 push	 edx
  00751	51		 push	 ecx
  00752	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _top$8[ebp]
  00757	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0075c	51		 push	 ecx
  0075d	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_start$10[ebp]
  00762	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00767	51		 push	 ecx
  00768	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  0076d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00772	51		 push	 ecx
  00773	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00778	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1048 : 		draw_2d_line(x1, y_centre, x_start, bottom, MFD_COLOUR1);

  00782	b8 04 00 00 00	 mov	 eax, 4
  00787	6b c8 00	 imul	 ecx, eax, 0
  0078a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00790	52		 push	 edx
  00791	51		 push	 ecx
  00792	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _bottom$7[ebp]
  00797	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079c	51		 push	 ecx
  0079d	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_start$10[ebp]
  007a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a7	51		 push	 ecx
  007a8	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  007ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b2	51		 push	 ecx
  007b3	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  007b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007bd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1049 : 
; 1050 : 		// print digital readout
; 1051 : 
; 1052 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  007c2	6a 05		 push	 5
  007c4	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1053 : 		y_adjust = -4.0;

  007c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  007d1	f3 0f 11 45 e8	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1054 : 
; 1055 : 		sprintf(buffer, "%3d", (int)knots(airspeed));

  007d6	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _airspeed$[ebp]
  007db	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ff85d84
  007e3	f3 0f 2c c0	 cvttss2si eax, xmm0
  007e7	50		 push	 eax
  007e8	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  007ed	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$1[ebp]
  007f3	51		 push	 ecx
  007f4	e8 00 00 00 00	 call	 _sprintf
  007f9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1056 : 		x_adjust = -get_mono_font_string_width(buffer);

  007fc	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  00802	50		 push	 eax
  00803	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00808	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR tv570[ebp]
  0080e	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR tv570[ebp]
  00816	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0081d	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$2[ebp], xmm0

; 1057 : 
; 1058 : 		set_2d_mono_font_position (x7, y_centre);

  00825	51		 push	 ecx
  00826	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  0082b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00830	51		 push	 ecx
  00831	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _x7$[ebp]
  00836	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0083b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1059 : 		set_mono_font_rel_position (x_adjust, y_adjust);

  00840	51		 push	 ecx
  00841	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00846	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0084b	51		 push	 ecx
  0084c	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$2[ebp]
  00854	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00859	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1060 : 		print_mono_font_string(buffer);

  0085e	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  00864	50		 push	 eax
  00865	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1061 : 	}
; 1062 : }

  0086a	5f		 pop	 edi
  0086b	5e		 pop	 esi
  0086c	5b		 pop	 ebx
  0086d	8b e5		 mov	 esp, ebp
  0086f	5d		 pop	 ebp
  00870	c3		 ret	 0
?draw_airspeed_scale@@YGXXZ ENDP			; draw_airspeed_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_damaged_side_mfd@@YGXXZ
_TEXT	SEGMENT
_y$ = -36						; size = 4
_x_right$ = -32						; size = 4
_x_left$ = -28						; size = 4
_x_delta$ = -24						; size = 4
_x_centre$ = -20					; size = 4
_col$ = -16						; size = 4
_i$ = -12						; size = 4
_max_lines$ = -8					; size = 4
_count$ = -4						; size = 4
?draw_damaged_side_mfd@@YGXXZ PROC			; draw_damaged_side_mfd, COMDAT

; 838  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 839  : 	int
; 840  : 		count,
; 841  : 		max_lines,
; 842  : 		i;
; 843  : 
; 844  : 	rgb_colour
; 845  : 		col;
; 846  : 
; 847  : 	float
; 848  : 		x_centre,
; 849  : 		x_delta,
; 850  : 		x_left,
; 851  : 		x_right,
; 852  : 		y;
; 853  : 
; 854  : 	col.r = 0;

  00009	c6 45 f2 00	 mov	 BYTE PTR _col$[ebp+2], 0

; 855  : 	col.g = 0;

  0000d	c6 45 f1 00	 mov	 BYTE PTR _col$[ebp+1], 0

; 856  : 	col.b = 0;

  00011	c6 45 f0 00	 mov	 BYTE PTR _col$[ebp], 0

; 857  : 	col.a = 255;

  00015	c6 45 f3 ff	 mov	 BYTE PTR _col$[ebp+3], 255 ; 000000ffH

; 858  : 
; 859  : 	if (draw_large_mfd)

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00020	74 09		 je	 SHORT $LN5@draw_damag

; 860  : 	{
; 861  : 		max_lines = 150;

  00022	c7 45 f8 96 00
	00 00		 mov	 DWORD PTR _max_lines$[ebp], 150 ; 00000096H

; 862  : 	}
; 863  : 	else

  00029	eb 07		 jmp	 SHORT $LN6@draw_damag
$LN5@draw_damag:

; 864  : 	{
; 865  : 		max_lines = 75;

  0002b	c7 45 f8 4b 00
	00 00		 mov	 DWORD PTR _max_lines$[ebp], 75 ; 0000004bH
$LN6@draw_damag:

; 866  : 	}
; 867  : 
; 868  : 	for (count = 0; count < max_lines; count++)

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00039	eb 09		 jmp	 SHORT $LN4@draw_damag
$LN2@draw_damag:
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0003e	83 c0 01	 add	 eax, 1
  00041	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@draw_damag:
  00044	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00047	3b 45 f8	 cmp	 eax, DWORD PTR _max_lines$[ebp]
  0004a	0f 8d 71 01 00
	00		 jge	 $LN3@draw_damag

; 869  : 	{
; 870  : 		convert_float_to_int (frand1 () * 127.0, &i);

  00050	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  0005a	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0005f	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00064	8d 4d f4	 lea	 ecx, DWORD PTR _i$[ebp]
  00067	51		 push	 ecx
  00068	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  0006e	c1 fa 10	 sar	 edx, 16			; 00000010H
  00071	81 e2 ff 7f 00
	00		 and	 edx, 32767		; 00007fffH
  00077	f2 0f 2a c2	 cvtsi2sd xmm0, edx
  0007b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00083	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@405fc00000000000
  0008b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0008f	51		 push	 ecx
  00090	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00095	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 871  : 
; 872  : 		col.g = i + 128;

  0009a	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0009d	05 80 00 00 00	 add	 eax, 128		; 00000080H
  000a2	88 45 f1	 mov	 BYTE PTR _col$[ebp+1], al

; 873  : 
; 874  : 		x_centre = sfrand1 ();

  000a5	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  000af	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000b4	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  000b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  000bf	c1 f9 10	 sar	 ecx, 16			; 00000010H
  000c2	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  000c8	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  000ce	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  000d2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  000da	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000de	f3 0f 11 45 ec	 movss	 DWORD PTR _x_centre$[ebp], xmm0

; 875  : 
; 876  : 		x_delta = (frand1 () * 0.5) + 0.25;

  000e3	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  000ed	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000f2	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  000f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  000fd	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00100	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00106	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  0010a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00112	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0011a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  00122	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00126	f3 0f 11 45 e8	 movss	 DWORD PTR _x_delta$[ebp], xmm0

; 877  : 
; 878  : 		x_left = x_centre - x_delta;

  0012b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  00130	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _x_delta$[ebp]
  00135	f3 0f 11 45 e4	 movss	 DWORD PTR _x_left$[ebp], xmm0

; 879  : 
; 880  : 		x_right = x_centre + x_delta;

  0013a	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  0013f	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _x_delta$[ebp]
  00144	f3 0f 11 45 e0	 movss	 DWORD PTR _x_right$[ebp], xmm0

; 881  : 
; 882  : 		y = sfrand1 ();

  00149	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00153	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00158	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  0015d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00163	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00166	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  0016c	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  00172	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00176	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  0017e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00182	f3 0f 11 45 dc	 movss	 DWORD PTR _y$[ebp], xmm0

; 883  : 
; 884  : 		draw_2d_line (x_left, y, x_right, y, col);

  00187	8b 45 f0	 mov	 eax, DWORD PTR _col$[ebp]
  0018a	50		 push	 eax
  0018b	51		 push	 ecx
  0018c	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y$[ebp]
  00191	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00196	51		 push	 ecx
  00197	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x_right$[ebp]
  0019c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a1	51		 push	 ecx
  001a2	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y$[ebp]
  001a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ac	51		 push	 ecx
  001ad	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x_left$[ebp]
  001b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 885  : 	}

  001bc	e9 7a fe ff ff	 jmp	 $LN2@draw_damag
$LN3@draw_damag:

; 886  : }

  001c1	5f		 pop	 edi
  001c2	5e		 pop	 esi
  001c3	5b		 pop	 ebx
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
?draw_damaged_side_mfd@@YGXXZ ENDP			; draw_damaged_side_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_damaged_mfd@@YGXXZ
_TEXT	SEGMENT
_y$ = -36						; size = 4
_x_right$ = -32						; size = 4
_x_left$ = -28						; size = 4
_x_delta$ = -24						; size = 4
_x_centre$ = -20					; size = 4
_col$ = -16						; size = 4
_i$ = -12						; size = 4
_max_lines$ = -8					; size = 4
_count$ = -4						; size = 4
?draw_damaged_mfd@@YGXXZ PROC				; draw_damaged_mfd, COMDAT

; 783  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 784  : 	int
; 785  : 		count,
; 786  : 		max_lines,
; 787  : 		i;
; 788  : 
; 789  : 	rgb_colour
; 790  : 		col;
; 791  : 
; 792  : 	float
; 793  : 		x_centre,
; 794  : 		x_delta,
; 795  : 		x_left,
; 796  : 		x_right,
; 797  : 		y;
; 798  : 
; 799  : 	col.r = 0;

  00009	c6 45 f2 00	 mov	 BYTE PTR _col$[ebp+2], 0

; 800  : 	col.g = 0;

  0000d	c6 45 f1 00	 mov	 BYTE PTR _col$[ebp+1], 0

; 801  : 	col.b = 0;

  00011	c6 45 f0 00	 mov	 BYTE PTR _col$[ebp], 0

; 802  : 	col.a = 255;

  00015	c6 45 f3 ff	 mov	 BYTE PTR _col$[ebp+3], 255 ; 000000ffH

; 803  : 
; 804  : 	if (draw_large_mfd)

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00020	74 09		 je	 SHORT $LN5@draw_damag

; 805  : 	{
; 806  : 		max_lines = 150;

  00022	c7 45 f8 96 00
	00 00		 mov	 DWORD PTR _max_lines$[ebp], 150 ; 00000096H

; 807  : 	}
; 808  : 	else

  00029	eb 07		 jmp	 SHORT $LN6@draw_damag
$LN5@draw_damag:

; 809  : 	{
; 810  : 		max_lines = 75;

  0002b	c7 45 f8 4b 00
	00 00		 mov	 DWORD PTR _max_lines$[ebp], 75 ; 0000004bH
$LN6@draw_damag:

; 811  : 	}
; 812  : 
; 813  : 	for (count = 0; count < max_lines; count++)

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00039	eb 09		 jmp	 SHORT $LN4@draw_damag
$LN2@draw_damag:
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0003e	83 c0 01	 add	 eax, 1
  00041	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@draw_damag:
  00044	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00047	3b 45 f8	 cmp	 eax, DWORD PTR _max_lines$[ebp]
  0004a	0f 8d 71 01 00
	00		 jge	 $LN3@draw_damag

; 814  : 	{
; 815  : 		convert_float_to_int (frand1 () * 127.0, &i);

  00050	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  0005a	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0005f	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00064	8d 4d f4	 lea	 ecx, DWORD PTR _i$[ebp]
  00067	51		 push	 ecx
  00068	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  0006e	c1 fa 10	 sar	 edx, 16			; 00000010H
  00071	81 e2 ff 7f 00
	00		 and	 edx, 32767		; 00007fffH
  00077	f2 0f 2a c2	 cvtsi2sd xmm0, edx
  0007b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00083	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@405fc00000000000
  0008b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0008f	51		 push	 ecx
  00090	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00095	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 816  : 
; 817  : 		col.g = i + 128;

  0009a	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0009d	05 80 00 00 00	 add	 eax, 128		; 00000080H
  000a2	88 45 f1	 mov	 BYTE PTR _col$[ebp+1], al

; 818  : 
; 819  : 		x_centre = sfrand1 ();

  000a5	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  000af	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000b4	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  000b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  000bf	c1 f9 10	 sar	 ecx, 16			; 00000010H
  000c2	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  000c8	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  000ce	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  000d2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  000da	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000de	f3 0f 11 45 ec	 movss	 DWORD PTR _x_centre$[ebp], xmm0

; 820  : 
; 821  : 		x_delta = (frand1 () * 0.5) + 0.25;

  000e3	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  000ed	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000f2	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  000f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  000fd	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00100	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00106	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  0010a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00112	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0011a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  00122	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00126	f3 0f 11 45 e8	 movss	 DWORD PTR _x_delta$[ebp], xmm0

; 822  : 
; 823  : 		x_left = x_centre - x_delta;

  0012b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  00130	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _x_delta$[ebp]
  00135	f3 0f 11 45 e4	 movss	 DWORD PTR _x_left$[ebp], xmm0

; 824  : 
; 825  : 		x_right = x_centre + x_delta;

  0013a	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  0013f	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _x_delta$[ebp]
  00144	f3 0f 11 45 e0	 movss	 DWORD PTR _x_right$[ebp], xmm0

; 826  : 
; 827  : 		y = sfrand1 ();

  00149	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00153	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00158	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  0015d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00163	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00166	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  0016c	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  00172	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00176	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  0017e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00182	f3 0f 11 45 dc	 movss	 DWORD PTR _y$[ebp], xmm0

; 828  : 
; 829  : 		draw_2d_line (x_left, y, x_right, y, col);

  00187	8b 45 f0	 mov	 eax, DWORD PTR _col$[ebp]
  0018a	50		 push	 eax
  0018b	51		 push	 ecx
  0018c	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y$[ebp]
  00191	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00196	51		 push	 ecx
  00197	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x_right$[ebp]
  0019c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a1	51		 push	 ecx
  001a2	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y$[ebp]
  001a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ac	51		 push	 ecx
  001ad	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x_left$[ebp]
  001b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 830  : 	}

  001bc	e9 7a fe ff ff	 jmp	 $LN2@draw_damag
$LN3@draw_damag:

; 831  : }

  001c1	5f		 pop	 edi
  001c2	5e		 pop	 esi
  001c3	5b		 pop	 ebx
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
?draw_damaged_mfd@@YGXXZ ENDP				; draw_damaged_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_layout_grid@@YGXXZ
_TEXT	SEGMENT
_y$ = -8						; size = 4
_x$ = -4						; size = 4
?draw_layout_grid@@YGXXZ PROC				; draw_layout_grid, COMDAT

; 753  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 754  : 	float
; 755  : 		x,
; 756  : 		y;
; 757  : 
; 758  : 	if (display_mfd_layout_grid)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?display_mfd_layout_grid@@3HA, 0 ; display_mfd_layout_grid
  00010	0f 84 ee 00 00
	00		 je	 $LN6@draw_layou

; 759  : 	{
; 760  : 		for (x = -1.0; x <= 1.0; x += 0.1)

  00016	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0001e	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0
  00023	eb 16		 jmp	 SHORT $LN4@draw_layou
$LN2@draw_layou:
  00025	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0002a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00032	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00036	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0
$LN4@draw_layou:
  0003b	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00040	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00048	66 0f 2f c8	 comisd	 xmm1, xmm0
  0004c	72 3f		 jb	 SHORT $LN3@draw_layou

; 761  : 		{
; 762  : 			draw_2d_line (x, -1.0, x, 1.0, sys_col_red);

  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  00053	50		 push	 eax
  00054	51		 push	 ecx
  00055	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0005d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00062	51		 push	 ecx
  00063	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00068	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006d	51		 push	 ecx
  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00076	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007b	51		 push	 ecx
  0007c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00081	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00086	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 763  : 		}

  0008b	eb 98		 jmp	 SHORT $LN2@draw_layou
$LN3@draw_layou:

; 764  : 
; 765  : 		for (y = -1.0; y <= 1.0; y += 0.1)

  0008d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00095	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0
  0009a	eb 16		 jmp	 SHORT $LN7@draw_layou
$LN5@draw_layou:
  0009c	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  000a1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  000a9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ad	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0
$LN7@draw_layou:
  000b2	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  000b7	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000bf	66 0f 2f c8	 comisd	 xmm1, xmm0
  000c3	72 3f		 jb	 SHORT $LN6@draw_layou

; 766  : 		{
; 767  : 			draw_2d_line (-1.0, y, 1.0, y, sys_col_red);

  000c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  000ca	50		 push	 eax
  000cb	51		 push	 ecx
  000cc	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d6	51		 push	 ecx
  000d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e4	51		 push	 ecx
  000e5	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ef	51		 push	 ecx
  000f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 768  : 		}

  00102	eb 98		 jmp	 SHORT $LN5@draw_layou
$LN6@draw_layou:

; 769  : 	}
; 770  : }

  00104	5f		 pop	 edi
  00105	5e		 pop	 esi
  00106	5b		 pop	 ebx
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c3		 ret	 0
?draw_layout_grid@@YGXXZ ENDP				; draw_layout_grid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
_j$ = 12						; size = 4
?transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z PROC ; transform_mfd_screen_co_ords_to_mfd_texture_co_ords, COMDAT

; 731  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 732  : 	ASSERT (i);

  00009	83 7d 08 00	 cmp	 DWORD PTR _i$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@transform_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@transform_:

; 733  : 	ASSERT (j);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _j$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@transform_
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z@4JA
  00032	83 c0 02	 add	 eax, 2
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_01CBDEGOCN@j@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@transform_:

; 734  : 
; 735  : 	*i -= mfd_screen_x_min;

  00045	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  00048	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0004c	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00054	8b 4d 08	 mov	 ecx, DWORD PTR _i$[ebp]
  00057	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 736  : 	*j -= mfd_screen_y_min;

  0005b	8b 45 0c	 mov	 eax, DWORD PTR _j$[ebp]
  0005e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00062	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _j$[ebp]
  0006d	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 737  : 
; 738  : 	*i *= mfd_screen_x_scale;

  00071	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  00074	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00078	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?mfd_screen_x_scale@@3MA
  00080	8b 4d 08	 mov	 ecx, DWORD PTR _i$[ebp]
  00083	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 739  : 	*j *= mfd_screen_y_scale;

  00087	8b 45 0c	 mov	 eax, DWORD PTR _j$[ebp]
  0008a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0008e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?mfd_screen_y_scale@@3MA
  00096	8b 4d 0c	 mov	 ecx, DWORD PTR _j$[ebp]
  00099	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 740  : }

  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 08 00	 ret	 8
?transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z ENDP ; transform_mfd_screen_co_ords_to_mfd_texture_co_ords
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?get_main_mfd_mode_for_eo_sensor@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ
_TEXT	SEGMENT
_mfd_mode$ = -4						; size = 4
?get_main_mfd_mode_for_eo_sensor@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ PROC ; get_main_mfd_mode_for_eo_sensor, COMDAT

; 14498: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 14499: 	comanche_main_mfd_modes
; 14500: 		mfd_mode;
; 14501: 
; 14502: 	if (eo_sensor == TARGET_ACQUISITION_SYSTEM_FLIR)

  00009	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 3 ; eo_sensor
  00010	75 09		 jne	 SHORT $LN2@get_main_m

; 14503: 	{
; 14504: 		mfd_mode = COMANCHE_MAIN_MFD_MODE_FLIR;

  00012	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 4
  00019	eb 37		 jmp	 SHORT $LN3@get_main_m
$LN2@get_main_m:

; 14505: 	}
; 14506: 	else if (eo_sensor == TARGET_ACQUISITION_SYSTEM_DTV)

  0001b	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 4 ; eo_sensor
  00022	75 09		 jne	 SHORT $LN4@get_main_m

; 14507: 	{
; 14508: 		mfd_mode = COMANCHE_MAIN_MFD_MODE_DTV;

  00024	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 5
  0002b	eb 25		 jmp	 SHORT $LN3@get_main_m
$LN4@get_main_m:

; 14509: 	}
; 14510: 	else if (eo_sensor == TARGET_ACQUISITION_SYSTEM_DVO)

  0002d	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 5 ; eo_sensor
  00034	75 09		 jne	 SHORT $LN6@get_main_m

; 14511: 	{
; 14512: 		mfd_mode = COMANCHE_MAIN_MFD_MODE_DVO;

  00036	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 6

; 14513: 	}
; 14514: 	else

  0003d	eb 13		 jmp	 SHORT $LN3@get_main_m
$LN6@get_main_m:

; 14515: 	{
; 14516: 		debug_fatal ("Invalid EO sensor = %d", eo_sensor);

  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; eo_sensor
  00044	50		 push	 eax
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@
  0004a	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0004f	83 c4 08	 add	 esp, 8
$LN3@get_main_m:

; 14517: 	}
; 14518: 
; 14519: 	return (mfd_mode);

  00052	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]

; 14520: }

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
?get_main_mfd_mode_for_eo_sensor@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ ENDP ; get_main_mfd_mode_for_eo_sensor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?select_comanche_tads_main_mfd@@YGXXZ
_TEXT	SEGMENT
?select_comanche_tads_main_mfd@@YGXXZ PROC		; select_comanche_tads_main_mfd, COMDAT

; 15907: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 15908: 	if (get_crew_role () == CREW_ROLE_PILOT)

  00009	e8 00 00 00 00	 call	 ?get_crew_role@@YG?AW4CREW_ROLES@@XZ ; get_crew_role
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 3d 01 00
	00		 jne	 $LN2@select_com

; 15909: 	{
; 15910: 		////////////////////////////////////////
; 15911: 		//
; 15912: 		// PILOT
; 15913: 		//
; 15914: 		////////////////////////////////////////
; 15915: 
; 15916: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY) && (!comanche_damage.pilot_lh_main_mfd))

  00016	83 3d 00 00 00
	00 26		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 38 ; view_mode, 00000026H
  0001d	75 1f		 jne	 SHORT $LN4@select_com
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00024	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  00027	83 e0 01	 and	 eax, 1
  0002a	75 12		 jne	 SHORT $LN4@select_com

; 15917: 		{
; 15918: 			select_comanche_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS);

  0002c	6a 00		 push	 0
  0002e	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15919: 
; 15920: 			return;

  00039	e9 3f 02 00 00	 jmp	 $LN1@select_com
$LN4@select_com:

; 15921: 		}
; 15922: 
; 15923: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY) && (!comanche_damage.pilot_rh_main_mfd))

  0003e	83 3d 00 00 00
	00 27		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 39 ; view_mode, 00000027H
  00045	75 1f		 jne	 SHORT $LN5@select_com
  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  0004c	c1 e8 0d	 shr	 eax, 13			; 0000000dH
  0004f	83 e0 01	 and	 eax, 1
  00052	75 12		 jne	 SHORT $LN5@select_com

; 15924: 		{
; 15925: 			select_comanche_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS);

  00054	6a 01		 push	 1
  00056	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15926: 
; 15927: 			return;

  00061	e9 17 02 00 00	 jmp	 $LN1@select_com
$LN5@select_com:

; 15928: 		}
; 15929: 
; 15930: 		if
; 15931: 		(
; 15932: 			(pilot_lhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_FLIR) ||
; 15933: 			(pilot_lhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_DTV) ||

  00066	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 4
  0006d	74 12		 je	 SHORT $LN7@select_com
  0006f	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 5
  00076	74 09		 je	 SHORT $LN7@select_com
  00078	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 6
  0007f	75 12		 jne	 SHORT $LN6@select_com
$LN7@select_com:

; 15934: 			(pilot_lhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_DVO)
; 15935: 		)
; 15936: 		{
; 15937: 			select_comanche_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS);

  00081	6a 00		 push	 0
  00083	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15938: 
; 15939: 			return;

  0008e	e9 ea 01 00 00	 jmp	 $LN1@select_com
$LN6@select_com:

; 15940: 		}
; 15941: 
; 15942: 		if
; 15943: 		(
; 15944: 			(pilot_rhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_FLIR) ||
; 15945: 			(pilot_rhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_DTV) ||

  00093	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 4
  0009a	74 12		 je	 SHORT $LN9@select_com
  0009c	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 5
  000a3	74 09		 je	 SHORT $LN9@select_com
  000a5	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 6
  000ac	75 12		 jne	 SHORT $LN8@select_com
$LN9@select_com:

; 15946: 			(pilot_rhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_DVO)
; 15947: 		)
; 15948: 		{
; 15949: 			select_comanche_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS);

  000ae	6a 01		 push	 1
  000b0	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15950: 
; 15951: 			return;

  000bb	e9 bd 01 00 00	 jmp	 $LN1@select_com
$LN8@select_com:

; 15952: 		}
; 15953: 
; 15954: 		if ((pilot_lhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_OFF) && (!comanche_damage.pilot_lh_main_mfd))

  000c0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 0
  000c7	75 1f		 jne	 SHORT $LN10@select_com
  000c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  000ce	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  000d1	83 e0 01	 and	 eax, 1
  000d4	75 12		 jne	 SHORT $LN10@select_com

; 15955: 		{
; 15956: 			select_comanche_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS);

  000d6	6a 00		 push	 0
  000d8	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15957: 
; 15958: 			return;

  000e3	e9 95 01 00 00	 jmp	 $LN1@select_com
$LN10@select_com:

; 15959: 		}
; 15960: 
; 15961: 		if ((pilot_rhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_OFF) && (!comanche_damage.pilot_rh_main_mfd))

  000e8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 0
  000ef	75 1f		 jne	 SHORT $LN11@select_com
  000f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  000f6	c1 e8 0d	 shr	 eax, 13			; 0000000dH
  000f9	83 e0 01	 and	 eax, 1
  000fc	75 12		 jne	 SHORT $LN11@select_com

; 15962: 		{
; 15963: 			select_comanche_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS);

  000fe	6a 01		 push	 1
  00100	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15964: 
; 15965: 			return;

  0010b	e9 6d 01 00 00	 jmp	 $LN1@select_com
$LN11@select_com:

; 15966: 		}
; 15967: 
; 15968: 		if (!comanche_damage.pilot_lh_main_mfd)

  00110	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00115	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  00118	83 e0 01	 and	 eax, 1
  0011b	75 12		 jne	 SHORT $LN12@select_com

; 15969: 		{
; 15970: 			select_comanche_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS);

  0011d	6a 00		 push	 0
  0011f	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15971: 
; 15972: 			return;

  0012a	e9 4e 01 00 00	 jmp	 $LN1@select_com
$LN12@select_com:

; 15973: 		}
; 15974: 
; 15975: 		if (!comanche_damage.pilot_rh_main_mfd)

  0012f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00134	c1 e8 0d	 shr	 eax, 13			; 0000000dH
  00137	83 e0 01	 and	 eax, 1
  0013a	75 12		 jne	 SHORT $LN13@select_com

; 15976: 		{
; 15977: 			select_comanche_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS);

  0013c	6a 01		 push	 1
  0013e	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15978: 
; 15979: 			return;

  00149	e9 2f 01 00 00	 jmp	 $LN1@select_com
$LN13@select_com:

; 15980: 		}
; 15981: 	}
; 15982: 	else

  0014e	e9 2a 01 00 00	 jmp	 $LN1@select_com
$LN2@select_com:

; 15983: 	{
; 15984: 		////////////////////////////////////////
; 15985: 		//
; 15986: 		// CO-PILOT
; 15987: 		//
; 15988: 		////////////////////////////////////////
; 15989: 
; 15990: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY) && (!comanche_damage.co_pilot_lh_main_mfd))

  00153	83 3d 00 00 00
	00 28		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 40 ; view_mode, 00000028H
  0015a	75 1f		 jne	 SHORT $LN14@select_com
  0015c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00161	c1 e8 10	 shr	 eax, 16			; 00000010H
  00164	83 e0 01	 and	 eax, 1
  00167	75 12		 jne	 SHORT $LN14@select_com

; 15991: 		{
; 15992: 			select_comanche_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_LHS);

  00169	6a 02		 push	 2
  0016b	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  00170	50		 push	 eax
  00171	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15993: 
; 15994: 			return;

  00176	e9 02 01 00 00	 jmp	 $LN1@select_com
$LN14@select_com:

; 15995: 		}
; 15996: 
; 15997: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY) && (!comanche_damage.co_pilot_rh_main_mfd))

  0017b	83 3d 00 00 00
	00 29		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 41 ; view_mode, 00000029H
  00182	75 1f		 jne	 SHORT $LN15@select_com
  00184	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00189	c1 e8 11	 shr	 eax, 17			; 00000011H
  0018c	83 e0 01	 and	 eax, 1
  0018f	75 12		 jne	 SHORT $LN15@select_com

; 15998: 		{
; 15999: 			select_comanche_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_RHS);

  00191	6a 03		 push	 3
  00193	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 16000: 
; 16001: 			return;

  0019e	e9 da 00 00 00	 jmp	 $LN1@select_com
$LN15@select_com:

; 16002: 		}
; 16003: 
; 16004: 		if
; 16005: 		(
; 16006: 			(co_pilot_lhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_FLIR) ||
; 16007: 			(co_pilot_lhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_DTV) ||

  001a3	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?co_pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 4
  001aa	74 12		 je	 SHORT $LN17@select_com
  001ac	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?co_pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 5
  001b3	74 09		 je	 SHORT $LN17@select_com
  001b5	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?co_pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 6
  001bc	75 12		 jne	 SHORT $LN16@select_com
$LN17@select_com:

; 16008: 			(co_pilot_lhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_DVO)
; 16009: 		)
; 16010: 		{
; 16011: 			select_comanche_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_LHS);

  001be	6a 02		 push	 2
  001c0	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  001c5	50		 push	 eax
  001c6	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 16012: 
; 16013: 			return;

  001cb	e9 ad 00 00 00	 jmp	 $LN1@select_com
$LN16@select_com:

; 16014: 		}
; 16015: 
; 16016: 		if
; 16017: 		(
; 16018: 			(co_pilot_rhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_FLIR) ||
; 16019: 			(co_pilot_rhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_DTV) ||

  001d0	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?co_pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 4
  001d7	74 12		 je	 SHORT $LN19@select_com
  001d9	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?co_pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 5
  001e0	74 09		 je	 SHORT $LN19@select_com
  001e2	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?co_pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 6
  001e9	75 12		 jne	 SHORT $LN18@select_com
$LN19@select_com:

; 16020: 			(co_pilot_rhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_DVO)
; 16021: 		)
; 16022: 		{
; 16023: 			select_comanche_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_RHS);

  001eb	6a 03		 push	 3
  001ed	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  001f2	50		 push	 eax
  001f3	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 16024: 
; 16025: 			return;

  001f8	e9 80 00 00 00	 jmp	 $LN1@select_com
$LN18@select_com:

; 16026: 		}
; 16027: 
; 16028: 		if ((co_pilot_lhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_OFF) && (!comanche_damage.co_pilot_lh_main_mfd))

  001fd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 0
  00204	75 1c		 jne	 SHORT $LN20@select_com
  00206	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  0020b	c1 e8 10	 shr	 eax, 16			; 00000010H
  0020e	83 e0 01	 and	 eax, 1
  00211	75 0f		 jne	 SHORT $LN20@select_com

; 16029: 		{
; 16030: 			select_comanche_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_LHS);

  00213	6a 02		 push	 2
  00215	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  0021a	50		 push	 eax
  0021b	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 16031: 
; 16032: 			return;

  00220	eb 5b		 jmp	 SHORT $LN1@select_com
$LN20@select_com:

; 16033: 		}
; 16034: 
; 16035: 		if ((co_pilot_rhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_OFF) && (!comanche_damage.co_pilot_rh_main_mfd))

  00222	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 0
  00229	75 1c		 jne	 SHORT $LN21@select_com
  0022b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00230	c1 e8 11	 shr	 eax, 17			; 00000011H
  00233	83 e0 01	 and	 eax, 1
  00236	75 0f		 jne	 SHORT $LN21@select_com

; 16036: 		{
; 16037: 			select_comanche_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_RHS);

  00238	6a 03		 push	 3
  0023a	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  0023f	50		 push	 eax
  00240	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 16038: 
; 16039: 			return;

  00245	eb 36		 jmp	 SHORT $LN1@select_com
$LN21@select_com:

; 16040: 		}
; 16041: 
; 16042: 		if (!comanche_damage.co_pilot_lh_main_mfd)

  00247	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  0024c	c1 e8 10	 shr	 eax, 16			; 00000010H
  0024f	83 e0 01	 and	 eax, 1
  00252	75 0f		 jne	 SHORT $LN22@select_com

; 16043: 		{
; 16044: 			select_comanche_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_LHS);

  00254	6a 02		 push	 2
  00256	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  0025b	50		 push	 eax
  0025c	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 16045: 
; 16046: 			return;

  00261	eb 1a		 jmp	 SHORT $LN1@select_com
$LN22@select_com:

; 16047: 		}
; 16048: 
; 16049: 		if (!comanche_damage.co_pilot_rh_main_mfd)

  00263	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00268	c1 e8 11	 shr	 eax, 17			; 00000011H
  0026b	83 e0 01	 and	 eax, 1
  0026e	75 0d		 jne	 SHORT $LN1@select_com

; 16050: 		{
; 16051: 			select_comanche_main_mfd_mode (get_main_mfd_mode_for_eo_sensor (), COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_RHS);

  00270	6a 03		 push	 3
  00272	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  00277	50		 push	 eax
  00278	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode
$LN1@select_com:

; 16052: 
; 16053: 			return;
; 16054: 		}
; 16055: 	}
; 16056: }

  0027d	5f		 pop	 edi
  0027e	5e		 pop	 esi
  0027f	5b		 pop	 ebx
  00280	8b e5		 mov	 esp, ebp
  00282	5d		 pop	 ebp
  00283	c3		 ret	 0
?select_comanche_tads_main_mfd@@YGXXZ ENDP		; select_comanche_tads_main_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?select_comanche_air_radar_main_mfd@@YGXXZ
_TEXT	SEGMENT
?select_comanche_air_radar_main_mfd@@YGXXZ PROC		; select_comanche_air_radar_main_mfd, COMDAT

; 15723: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 15724: 	if (get_crew_role () == CREW_ROLE_PILOT)

  00009	e8 00 00 00 00	 call	 ?get_crew_role@@YG?AW4CREW_ROLES@@XZ ; get_crew_role
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 43 01 00
	00		 jne	 $LN2@select_com

; 15725: 	{
; 15726: 		////////////////////////////////////////
; 15727: 		//
; 15728: 		// PILOT
; 15729: 		//
; 15730: 		////////////////////////////////////////
; 15731: 
; 15732: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY) && (!comanche_damage.pilot_lh_main_mfd))

  00016	83 3d 00 00 00
	00 26		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 38 ; view_mode, 00000026H
  0001d	75 1b		 jne	 SHORT $LN4@select_com
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00024	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  00027	83 e0 01	 and	 eax, 1
  0002a	75 0e		 jne	 SHORT $LN4@select_com

; 15733: 		{
; 15734: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_AIR_RADAR, COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS);

  0002c	6a 00		 push	 0
  0002e	6a 03		 push	 3
  00030	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15735: 
; 15736: 			return;

  00035	e9 4c 02 00 00	 jmp	 $LN1@select_com
$LN4@select_com:

; 15737: 		}
; 15738: 
; 15739: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY) && (!comanche_damage.pilot_rh_main_mfd))

  0003a	83 3d 00 00 00
	00 27		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 39 ; view_mode, 00000027H
  00041	75 1b		 jne	 SHORT $LN5@select_com
  00043	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00048	c1 e8 0d	 shr	 eax, 13			; 0000000dH
  0004b	83 e0 01	 and	 eax, 1
  0004e	75 0e		 jne	 SHORT $LN5@select_com

; 15740: 		{
; 15741: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_AIR_RADAR, COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS);

  00050	6a 01		 push	 1
  00052	6a 03		 push	 3
  00054	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15742: 
; 15743: 			return;

  00059	e9 28 02 00 00	 jmp	 $LN1@select_com
$LN5@select_com:

; 15744: 		}
; 15745: 
; 15746: 		if (pilot_lhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_AIR_RADAR)

  0005e	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 3
  00065	75 05		 jne	 SHORT $LN6@select_com

; 15747: 		{
; 15748: 			return;

  00067	e9 1a 02 00 00	 jmp	 $LN1@select_com
$LN6@select_com:

; 15749: 		}
; 15750: 
; 15751: 		if (pilot_rhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_AIR_RADAR)

  0006c	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 3
  00073	75 05		 jne	 SHORT $LN7@select_com

; 15752: 		{
; 15753: 			return;

  00075	e9 0c 02 00 00	 jmp	 $LN1@select_com
$LN7@select_com:

; 15754: 		}
; 15755: 
; 15756: 		if (pilot_lhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_GROUND_RADAR)

  0007a	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 2
  00081	75 0e		 jne	 SHORT $LN8@select_com

; 15757: 		{
; 15758: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_AIR_RADAR, COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS);

  00083	6a 00		 push	 0
  00085	6a 03		 push	 3
  00087	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15759: 
; 15760: 			return;

  0008c	e9 f5 01 00 00	 jmp	 $LN1@select_com
$LN8@select_com:

; 15761: 		}
; 15762: 
; 15763: 		if (pilot_rhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_GROUND_RADAR)

  00091	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 2
  00098	75 0e		 jne	 SHORT $LN9@select_com

; 15764: 		{
; 15765: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_AIR_RADAR, COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS);

  0009a	6a 01		 push	 1
  0009c	6a 03		 push	 3
  0009e	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15766: 
; 15767: 			return;

  000a3	e9 de 01 00 00	 jmp	 $LN1@select_com
$LN9@select_com:

; 15768: 		}
; 15769: 
; 15770: 		if (pilot_lhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_GROUND_RADAR)

  000a8	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 2
  000af	75 0e		 jne	 SHORT $LN10@select_com

; 15771: 		{
; 15772: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_AIR_RADAR, COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS);

  000b1	6a 00		 push	 0
  000b3	6a 03		 push	 3
  000b5	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15773: 
; 15774: 			return;

  000ba	e9 c7 01 00 00	 jmp	 $LN1@select_com
$LN10@select_com:

; 15775: 		}
; 15776: 
; 15777: 		if (pilot_rhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_GROUND_RADAR)

  000bf	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 2
  000c6	75 0e		 jne	 SHORT $LN11@select_com

; 15778: 		{
; 15779: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_AIR_RADAR, COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS);

  000c8	6a 01		 push	 1
  000ca	6a 03		 push	 3
  000cc	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15780: 
; 15781: 			return;

  000d1	e9 b0 01 00 00	 jmp	 $LN1@select_com
$LN11@select_com:

; 15782: 		}
; 15783: 
; 15784: 		if ((pilot_lhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_OFF) && (!comanche_damage.pilot_lh_main_mfd))

  000d6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 0
  000dd	75 1b		 jne	 SHORT $LN12@select_com
  000df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  000e4	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  000e7	83 e0 01	 and	 eax, 1
  000ea	75 0e		 jne	 SHORT $LN12@select_com

; 15785: 		{
; 15786: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_AIR_RADAR, COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS);

  000ec	6a 00		 push	 0
  000ee	6a 03		 push	 3
  000f0	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15787: 
; 15788: 			return;

  000f5	e9 8c 01 00 00	 jmp	 $LN1@select_com
$LN12@select_com:

; 15789: 		}
; 15790: 
; 15791: 		if ((pilot_rhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_OFF) && (!comanche_damage.pilot_rh_main_mfd))

  000fa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 0
  00101	75 1b		 jne	 SHORT $LN13@select_com
  00103	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00108	c1 e8 0d	 shr	 eax, 13			; 0000000dH
  0010b	83 e0 01	 and	 eax, 1
  0010e	75 0e		 jne	 SHORT $LN13@select_com

; 15792: 		{
; 15793: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_AIR_RADAR, COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS);

  00110	6a 01		 push	 1
  00112	6a 03		 push	 3
  00114	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15794: 
; 15795: 			return;

  00119	e9 68 01 00 00	 jmp	 $LN1@select_com
$LN13@select_com:

; 15796: 		}
; 15797: 
; 15798: 		if (!comanche_damage.pilot_lh_main_mfd)

  0011e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00123	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  00126	83 e0 01	 and	 eax, 1
  00129	75 0e		 jne	 SHORT $LN14@select_com

; 15799: 		{
; 15800: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_AIR_RADAR, COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS);

  0012b	6a 00		 push	 0
  0012d	6a 03		 push	 3
  0012f	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15801: 
; 15802: 			return;

  00134	e9 4d 01 00 00	 jmp	 $LN1@select_com
$LN14@select_com:

; 15803: 		}
; 15804: 
; 15805: 		if (!comanche_damage.pilot_rh_main_mfd)

  00139	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  0013e	c1 e8 0d	 shr	 eax, 13			; 0000000dH
  00141	83 e0 01	 and	 eax, 1
  00144	75 0e		 jne	 SHORT $LN15@select_com

; 15806: 		{
; 15807: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_AIR_RADAR, COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS);

  00146	6a 01		 push	 1
  00148	6a 03		 push	 3
  0014a	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15808: 
; 15809: 			return;

  0014f	e9 32 01 00 00	 jmp	 $LN1@select_com
$LN15@select_com:

; 15810: 		}
; 15811: 	}
; 15812: 	else

  00154	e9 2d 01 00 00	 jmp	 $LN1@select_com
$LN2@select_com:

; 15813: 	{
; 15814: 		////////////////////////////////////////
; 15815: 		//
; 15816: 		// CO-PILOT
; 15817: 		//
; 15818: 		////////////////////////////////////////
; 15819: 
; 15820: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY) && (!comanche_damage.co_pilot_lh_main_mfd))

  00159	83 3d 00 00 00
	00 28		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 40 ; view_mode, 00000028H
  00160	75 1b		 jne	 SHORT $LN16@select_com
  00162	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00167	c1 e8 10	 shr	 eax, 16			; 00000010H
  0016a	83 e0 01	 and	 eax, 1
  0016d	75 0e		 jne	 SHORT $LN16@select_com

; 15821: 		{
; 15822: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_AIR_RADAR, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_LHS);

  0016f	6a 02		 push	 2
  00171	6a 03		 push	 3
  00173	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15823: 
; 15824: 			return;

  00178	e9 09 01 00 00	 jmp	 $LN1@select_com
$LN16@select_com:

; 15825: 		}
; 15826: 
; 15827: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY) && (!comanche_damage.co_pilot_rh_main_mfd))

  0017d	83 3d 00 00 00
	00 29		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 41 ; view_mode, 00000029H
  00184	75 1b		 jne	 SHORT $LN17@select_com
  00186	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  0018b	c1 e8 11	 shr	 eax, 17			; 00000011H
  0018e	83 e0 01	 and	 eax, 1
  00191	75 0e		 jne	 SHORT $LN17@select_com

; 15828: 		{
; 15829: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_AIR_RADAR, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_RHS);

  00193	6a 03		 push	 3
  00195	6a 03		 push	 3
  00197	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15830: 
; 15831: 			return;

  0019c	e9 e5 00 00 00	 jmp	 $LN1@select_com
$LN17@select_com:

; 15832: 		}
; 15833: 
; 15834: 		if (co_pilot_lhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_AIR_RADAR)

  001a1	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?co_pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 3
  001a8	75 05		 jne	 SHORT $LN18@select_com

; 15835: 		{
; 15836: 			return;

  001aa	e9 d7 00 00 00	 jmp	 $LN1@select_com
$LN18@select_com:

; 15837: 		}
; 15838: 
; 15839: 		if (co_pilot_rhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_AIR_RADAR)

  001af	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?co_pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 3
  001b6	75 05		 jne	 SHORT $LN19@select_com

; 15840: 		{
; 15841: 			return;

  001b8	e9 c9 00 00 00	 jmp	 $LN1@select_com
$LN19@select_com:

; 15842: 		}
; 15843: 
; 15844: 		if (co_pilot_lhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_GROUND_RADAR)

  001bd	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?co_pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 2
  001c4	75 0e		 jne	 SHORT $LN20@select_com

; 15845: 		{
; 15846: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_AIR_RADAR, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_LHS);

  001c6	6a 02		 push	 2
  001c8	6a 03		 push	 3
  001ca	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15847: 
; 15848: 			return;

  001cf	e9 b2 00 00 00	 jmp	 $LN1@select_com
$LN20@select_com:

; 15849: 		}
; 15850: 
; 15851: 		if (co_pilot_rhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_GROUND_RADAR)

  001d4	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?co_pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 2
  001db	75 0e		 jne	 SHORT $LN21@select_com

; 15852: 		{
; 15853: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_AIR_RADAR, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_RHS);

  001dd	6a 03		 push	 3
  001df	6a 03		 push	 3
  001e1	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15854: 
; 15855: 			return;

  001e6	e9 9b 00 00 00	 jmp	 $LN1@select_com
$LN21@select_com:

; 15856: 		}
; 15857: 
; 15858: 		if (co_pilot_lhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_GROUND_RADAR)

  001eb	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?co_pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 2
  001f2	75 0e		 jne	 SHORT $LN22@select_com

; 15859: 		{
; 15860: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_AIR_RADAR, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_LHS);

  001f4	6a 02		 push	 2
  001f6	6a 03		 push	 3
  001f8	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15861: 
; 15862: 			return;

  001fd	e9 84 00 00 00	 jmp	 $LN1@select_com
$LN22@select_com:

; 15863: 		}
; 15864: 
; 15865: 		if (co_pilot_rhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_GROUND_RADAR)

  00202	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?co_pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 2
  00209	75 0b		 jne	 SHORT $LN23@select_com

; 15866: 		{
; 15867: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_AIR_RADAR, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_RHS);

  0020b	6a 03		 push	 3
  0020d	6a 03		 push	 3
  0020f	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15868: 
; 15869: 			return;

  00214	eb 70		 jmp	 SHORT $LN1@select_com
$LN23@select_com:

; 15870: 		}
; 15871: 
; 15872: 		if ((co_pilot_lhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_OFF) && (!comanche_damage.co_pilot_lh_main_mfd))

  00216	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 0
  0021d	75 18		 jne	 SHORT $LN24@select_com
  0021f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00224	c1 e8 10	 shr	 eax, 16			; 00000010H
  00227	83 e0 01	 and	 eax, 1
  0022a	75 0b		 jne	 SHORT $LN24@select_com

; 15873: 		{
; 15874: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_AIR_RADAR, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_LHS);

  0022c	6a 02		 push	 2
  0022e	6a 03		 push	 3
  00230	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15875: 
; 15876: 			return;

  00235	eb 4f		 jmp	 SHORT $LN1@select_com
$LN24@select_com:

; 15877: 		}
; 15878: 
; 15879: 		if ((co_pilot_rhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_OFF) && (!comanche_damage.co_pilot_rh_main_mfd))

  00237	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 0
  0023e	75 18		 jne	 SHORT $LN25@select_com
  00240	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00245	c1 e8 11	 shr	 eax, 17			; 00000011H
  00248	83 e0 01	 and	 eax, 1
  0024b	75 0b		 jne	 SHORT $LN25@select_com

; 15880: 		{
; 15881: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_AIR_RADAR, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_RHS);

  0024d	6a 03		 push	 3
  0024f	6a 03		 push	 3
  00251	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15882: 
; 15883: 			return;

  00256	eb 2e		 jmp	 SHORT $LN1@select_com
$LN25@select_com:

; 15884: 		}
; 15885: 
; 15886: 		if (!comanche_damage.co_pilot_lh_main_mfd)

  00258	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  0025d	c1 e8 10	 shr	 eax, 16			; 00000010H
  00260	83 e0 01	 and	 eax, 1
  00263	75 0b		 jne	 SHORT $LN26@select_com

; 15887: 		{
; 15888: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_AIR_RADAR, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_LHS);

  00265	6a 02		 push	 2
  00267	6a 03		 push	 3
  00269	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15889: 
; 15890: 			return;

  0026e	eb 16		 jmp	 SHORT $LN1@select_com
$LN26@select_com:

; 15891: 		}
; 15892: 
; 15893: 		if (!comanche_damage.co_pilot_rh_main_mfd)

  00270	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00275	c1 e8 11	 shr	 eax, 17			; 00000011H
  00278	83 e0 01	 and	 eax, 1
  0027b	75 09		 jne	 SHORT $LN1@select_com

; 15894: 		{
; 15895: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_AIR_RADAR, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_RHS);

  0027d	6a 03		 push	 3
  0027f	6a 03		 push	 3
  00281	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode
$LN1@select_com:

; 15896: 
; 15897: 			return;
; 15898: 		}
; 15899: 	}
; 15900: }

  00286	5f		 pop	 edi
  00287	5e		 pop	 esi
  00288	5b		 pop	 ebx
  00289	8b e5		 mov	 esp, ebp
  0028b	5d		 pop	 ebp
  0028c	c3		 ret	 0
?select_comanche_air_radar_main_mfd@@YGXXZ ENDP		; select_comanche_air_radar_main_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?select_comanche_ground_radar_main_mfd@@YGXXZ
_TEXT	SEGMENT
?select_comanche_ground_radar_main_mfd@@YGXXZ PROC	; select_comanche_ground_radar_main_mfd, COMDAT

; 15553: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 15554: 	if (get_crew_role () == CREW_ROLE_PILOT)

  00009	e8 00 00 00 00	 call	 ?get_crew_role@@YG?AW4CREW_ROLES@@XZ ; get_crew_role
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 43 01 00
	00		 jne	 $LN2@select_com

; 15555: 	{
; 15556: 		////////////////////////////////////////
; 15557: 		//
; 15558: 		// PILOT
; 15559: 		//
; 15560: 		////////////////////////////////////////
; 15561: 
; 15562: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY) && (!comanche_damage.pilot_lh_main_mfd))

  00016	83 3d 00 00 00
	00 26		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 38 ; view_mode, 00000026H
  0001d	75 1b		 jne	 SHORT $LN4@select_com
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00024	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  00027	83 e0 01	 and	 eax, 1
  0002a	75 0e		 jne	 SHORT $LN4@select_com

; 15563: 		{
; 15564: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_GROUND_RADAR, COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS);

  0002c	6a 00		 push	 0
  0002e	6a 02		 push	 2
  00030	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15565: 
; 15566: 			return;

  00035	e9 1e 02 00 00	 jmp	 $LN1@select_com
$LN4@select_com:

; 15567: 		}
; 15568: 
; 15569: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY) && (!comanche_damage.pilot_rh_main_mfd))

  0003a	83 3d 00 00 00
	00 27		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 39 ; view_mode, 00000027H
  00041	75 1b		 jne	 SHORT $LN5@select_com
  00043	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00048	c1 e8 0d	 shr	 eax, 13			; 0000000dH
  0004b	83 e0 01	 and	 eax, 1
  0004e	75 0e		 jne	 SHORT $LN5@select_com

; 15570: 		{
; 15571: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_GROUND_RADAR, COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS);

  00050	6a 01		 push	 1
  00052	6a 02		 push	 2
  00054	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15572: 
; 15573: 			return;

  00059	e9 fa 01 00 00	 jmp	 $LN1@select_com
$LN5@select_com:

; 15574: 		}
; 15575: 
; 15576: 		if (pilot_lhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_GROUND_RADAR)

  0005e	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 2
  00065	75 05		 jne	 SHORT $LN6@select_com

; 15577: 		{
; 15578: 			return;

  00067	e9 ec 01 00 00	 jmp	 $LN1@select_com
$LN6@select_com:

; 15579: 		}
; 15580: 
; 15581: 		if (pilot_rhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_GROUND_RADAR)

  0006c	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 2
  00073	75 05		 jne	 SHORT $LN7@select_com

; 15582: 		{
; 15583: 			return;

  00075	e9 de 01 00 00	 jmp	 $LN1@select_com
$LN7@select_com:

; 15584: 		}
; 15585: 
; 15586: 		if (pilot_lhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_AIR_RADAR)

  0007a	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 3
  00081	75 0e		 jne	 SHORT $LN8@select_com

; 15587: 		{
; 15588: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_GROUND_RADAR, COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS);

  00083	6a 00		 push	 0
  00085	6a 02		 push	 2
  00087	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15589: 
; 15590: 			return;

  0008c	e9 c7 01 00 00	 jmp	 $LN1@select_com
$LN8@select_com:

; 15591: 		}
; 15592: 
; 15593: 		if (pilot_rhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_AIR_RADAR)

  00091	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 3
  00098	75 0e		 jne	 SHORT $LN9@select_com

; 15594: 		{
; 15595: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_GROUND_RADAR, COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS);

  0009a	6a 01		 push	 1
  0009c	6a 02		 push	 2
  0009e	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15596: 
; 15597: 			return;

  000a3	e9 b0 01 00 00	 jmp	 $LN1@select_com
$LN9@select_com:

; 15598: 		}
; 15599: 
; 15600: 		if (pilot_lhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_AIR_RADAR)

  000a8	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 3
  000af	75 0e		 jne	 SHORT $LN10@select_com

; 15601: 		{
; 15602: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_GROUND_RADAR, COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS);

  000b1	6a 00		 push	 0
  000b3	6a 02		 push	 2
  000b5	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15603: 
; 15604: 			return;

  000ba	e9 99 01 00 00	 jmp	 $LN1@select_com
$LN10@select_com:

; 15605: 		}
; 15606: 
; 15607: 		if (pilot_rhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_AIR_RADAR)

  000bf	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 3
  000c6	75 0e		 jne	 SHORT $LN11@select_com

; 15608: 		{
; 15609: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_GROUND_RADAR, COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS);

  000c8	6a 01		 push	 1
  000ca	6a 02		 push	 2
  000cc	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15610: 
; 15611: 			return;

  000d1	e9 82 01 00 00	 jmp	 $LN1@select_com
$LN11@select_com:

; 15612: 		}
; 15613: 
; 15614: 		if ((pilot_lhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_OFF) && (!comanche_damage.pilot_lh_main_mfd))

  000d6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 0
  000dd	75 1b		 jne	 SHORT $LN12@select_com
  000df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  000e4	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  000e7	83 e0 01	 and	 eax, 1
  000ea	75 0e		 jne	 SHORT $LN12@select_com

; 15615: 		{
; 15616: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_GROUND_RADAR, COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS);

  000ec	6a 00		 push	 0
  000ee	6a 02		 push	 2
  000f0	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15617: 
; 15618: 			return;

  000f5	e9 5e 01 00 00	 jmp	 $LN1@select_com
$LN12@select_com:

; 15619: 		}
; 15620: 
; 15621: 		if ((pilot_rhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_OFF) && (!comanche_damage.pilot_rh_main_mfd))

  000fa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 0
  00101	75 1b		 jne	 SHORT $LN13@select_com
  00103	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00108	c1 e8 0d	 shr	 eax, 13			; 0000000dH
  0010b	83 e0 01	 and	 eax, 1
  0010e	75 0e		 jne	 SHORT $LN13@select_com

; 15622: 		{
; 15623: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_GROUND_RADAR, COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS);

  00110	6a 01		 push	 1
  00112	6a 02		 push	 2
  00114	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15624: 
; 15625: 			return;

  00119	e9 3a 01 00 00	 jmp	 $LN1@select_com
$LN13@select_com:

; 15626: 		}
; 15627: 
; 15628: 		if (!comanche_damage.pilot_lh_main_mfd)

  0011e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00123	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  00126	83 e0 01	 and	 eax, 1
  00129	75 0e		 jne	 SHORT $LN14@select_com

; 15629: 		{
; 15630: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_GROUND_RADAR, COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS);

  0012b	6a 00		 push	 0
  0012d	6a 02		 push	 2
  0012f	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15631: 
; 15632: 			return;

  00134	e9 1f 01 00 00	 jmp	 $LN1@select_com
$LN14@select_com:

; 15633: 		}
; 15634: 
; 15635: 		if (!comanche_damage.pilot_rh_main_mfd)

  00139	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  0013e	c1 e8 0d	 shr	 eax, 13			; 0000000dH
  00141	83 e0 01	 and	 eax, 1
  00144	75 0e		 jne	 SHORT $LN15@select_com

; 15636: 		{
; 15637: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_GROUND_RADAR, COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS);

  00146	6a 01		 push	 1
  00148	6a 02		 push	 2
  0014a	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15638: 
; 15639: 			return;

  0014f	e9 04 01 00 00	 jmp	 $LN1@select_com
$LN15@select_com:

; 15640: 		}
; 15641: 	}
; 15642: 	else

  00154	e9 ff 00 00 00	 jmp	 $LN1@select_com
$LN2@select_com:

; 15643: 	{
; 15644: 		////////////////////////////////////////
; 15645: 		//
; 15646: 		// CO-PILOT
; 15647: 		//
; 15648: 		////////////////////////////////////////
; 15649: 
; 15650: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY) && (!comanche_damage.co_pilot_lh_main_mfd))

  00159	83 3d 00 00 00
	00 28		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 40 ; view_mode, 00000028H
  00160	75 1b		 jne	 SHORT $LN16@select_com
  00162	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00167	c1 e8 10	 shr	 eax, 16			; 00000010H
  0016a	83 e0 01	 and	 eax, 1
  0016d	75 0e		 jne	 SHORT $LN16@select_com

; 15651: 		{
; 15652: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_GROUND_RADAR, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_LHS);

  0016f	6a 02		 push	 2
  00171	6a 02		 push	 2
  00173	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15653: 
; 15654: 			return;

  00178	e9 db 00 00 00	 jmp	 $LN1@select_com
$LN16@select_com:

; 15655: 		}
; 15656: 
; 15657: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY) && (!comanche_damage.co_pilot_rh_main_mfd))

  0017d	83 3d 00 00 00
	00 29		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 41 ; view_mode, 00000029H
  00184	75 1b		 jne	 SHORT $LN17@select_com
  00186	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  0018b	c1 e8 11	 shr	 eax, 17			; 00000011H
  0018e	83 e0 01	 and	 eax, 1
  00191	75 0e		 jne	 SHORT $LN17@select_com

; 15658: 		{
; 15659: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_GROUND_RADAR, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_RHS);

  00193	6a 03		 push	 3
  00195	6a 02		 push	 2
  00197	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15660: 
; 15661: 			return;

  0019c	e9 b7 00 00 00	 jmp	 $LN1@select_com
$LN17@select_com:

; 15662: 		}
; 15663: 
; 15664: 		if (co_pilot_lhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_GROUND_RADAR)

  001a1	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?co_pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 2
  001a8	75 05		 jne	 SHORT $LN18@select_com

; 15665: 		{
; 15666: 			return;

  001aa	e9 a9 00 00 00	 jmp	 $LN1@select_com
$LN18@select_com:

; 15667: 		}
; 15668: 
; 15669: 		if (co_pilot_rhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_GROUND_RADAR)

  001af	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?co_pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 2
  001b6	75 05		 jne	 SHORT $LN19@select_com

; 15670: 		{
; 15671: 			return;

  001b8	e9 9b 00 00 00	 jmp	 $LN1@select_com
$LN19@select_com:

; 15672: 		}
; 15673: 
; 15674: 		if (co_pilot_lhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_AIR_RADAR)

  001bd	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?co_pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 3
  001c4	75 0e		 jne	 SHORT $LN20@select_com

; 15675: 		{
; 15676: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_GROUND_RADAR, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_LHS);

  001c6	6a 02		 push	 2
  001c8	6a 02		 push	 2
  001ca	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15677: 
; 15678: 			return;

  001cf	e9 84 00 00 00	 jmp	 $LN1@select_com
$LN20@select_com:

; 15679: 		}
; 15680: 
; 15681: 		if (co_pilot_rhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_AIR_RADAR)

  001d4	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?co_pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 3
  001db	75 0b		 jne	 SHORT $LN21@select_com

; 15682: 		{
; 15683: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_GROUND_RADAR, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_RHS);

  001dd	6a 03		 push	 3
  001df	6a 02		 push	 2
  001e1	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15684: 
; 15685: 			return;

  001e6	eb 70		 jmp	 SHORT $LN1@select_com
$LN21@select_com:

; 15686: 		}
; 15687: 
; 15688: 		if ((co_pilot_lhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_OFF) && (!comanche_damage.co_pilot_lh_main_mfd))

  001e8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 0
  001ef	75 18		 jne	 SHORT $LN22@select_com
  001f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  001f6	c1 e8 10	 shr	 eax, 16			; 00000010H
  001f9	83 e0 01	 and	 eax, 1
  001fc	75 0b		 jne	 SHORT $LN22@select_com

; 15689: 		{
; 15690: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_GROUND_RADAR, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_LHS);

  001fe	6a 02		 push	 2
  00200	6a 02		 push	 2
  00202	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15691: 
; 15692: 			return;

  00207	eb 4f		 jmp	 SHORT $LN1@select_com
$LN22@select_com:

; 15693: 		}
; 15694: 
; 15695: 		if ((co_pilot_rhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_OFF) && (!comanche_damage.co_pilot_rh_main_mfd))

  00209	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 0
  00210	75 18		 jne	 SHORT $LN23@select_com
  00212	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00217	c1 e8 11	 shr	 eax, 17			; 00000011H
  0021a	83 e0 01	 and	 eax, 1
  0021d	75 0b		 jne	 SHORT $LN23@select_com

; 15696: 		{
; 15697: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_GROUND_RADAR, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_RHS);

  0021f	6a 03		 push	 3
  00221	6a 02		 push	 2
  00223	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15698: 
; 15699: 			return;

  00228	eb 2e		 jmp	 SHORT $LN1@select_com
$LN23@select_com:

; 15700: 		}
; 15701: 
; 15702: 		if (!comanche_damage.co_pilot_lh_main_mfd)

  0022a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  0022f	c1 e8 10	 shr	 eax, 16			; 00000010H
  00232	83 e0 01	 and	 eax, 1
  00235	75 0b		 jne	 SHORT $LN24@select_com

; 15703: 		{
; 15704: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_GROUND_RADAR, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_LHS);

  00237	6a 02		 push	 2
  00239	6a 02		 push	 2
  0023b	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15705: 
; 15706: 			return;

  00240	eb 16		 jmp	 SHORT $LN1@select_com
$LN24@select_com:

; 15707: 		}
; 15708: 
; 15709: 		if (!comanche_damage.co_pilot_rh_main_mfd)

  00242	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00247	c1 e8 11	 shr	 eax, 17			; 00000011H
  0024a	83 e0 01	 and	 eax, 1
  0024d	75 09		 jne	 SHORT $LN1@select_com

; 15710: 		{
; 15711: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_GROUND_RADAR, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_RHS);

  0024f	6a 03		 push	 3
  00251	6a 02		 push	 2
  00253	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode
$LN1@select_com:

; 15712: 
; 15713: 			return;
; 15714: 		}
; 15715: 	}
; 15716: }

  00258	5f		 pop	 edi
  00259	5e		 pop	 esi
  0025a	5b		 pop	 ebx
  0025b	8b e5		 mov	 esp, ebp
  0025d	5d		 pop	 ebp
  0025e	c3		 ret	 0
?select_comanche_ground_radar_main_mfd@@YGXXZ ENDP	; select_comanche_ground_radar_main_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?auto_page_comanche_ase_main_mfd@@YGXXZ
_TEXT	SEGMENT
?auto_page_comanche_ase_main_mfd@@YGXXZ PROC		; auto_page_comanche_ase_main_mfd, COMDAT

; 15392: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 15393: 	if (!get_global_ase_auto_page ())

  00009	83 3d 64 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868, 0
  00010	75 05		 jne	 SHORT $LN2@auto_page_

; 15394: 	{
; 15395: 		return;

  00012	e9 5d 02 00 00	 jmp	 $LN1@auto_page_
$LN2@auto_page_:

; 15396: 	}
; 15397: 
; 15398: 	if (get_crew_role () == CREW_ROLE_PILOT)

  00017	e8 00 00 00 00	 call	 ?get_crew_role@@YG?AW4CREW_ROLES@@XZ ; get_crew_role
  0001c	85 c0		 test	 eax, eax
  0001e	0f 85 33 01 00
	00		 jne	 $LN3@auto_page_

; 15399: 	{
; 15400: 		////////////////////////////////////////
; 15401: 		//
; 15402: 		// PILOT
; 15403: 		//
; 15404: 		////////////////////////////////////////
; 15405: 
; 15406: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY) && (!comanche_damage.pilot_lh_main_mfd))

  00024	83 3d 00 00 00
	00 26		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 38 ; view_mode, 00000026H
  0002b	75 1b		 jne	 SHORT $LN5@auto_page_
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00032	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  00035	83 e0 01	 and	 eax, 1
  00038	75 0e		 jne	 SHORT $LN5@auto_page_

; 15407: 		{
; 15408: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_ASE, COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS);

  0003a	6a 00		 push	 0
  0003c	6a 08		 push	 8
  0003e	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15409: 
; 15410: 			return;

  00043	e9 2c 02 00 00	 jmp	 $LN1@auto_page_
$LN5@auto_page_:

; 15411: 		}
; 15412: 
; 15413: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY) && (!comanche_damage.pilot_rh_main_mfd))

  00048	83 3d 00 00 00
	00 27		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 39 ; view_mode, 00000027H
  0004f	75 1b		 jne	 SHORT $LN6@auto_page_
  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00056	c1 e8 0d	 shr	 eax, 13			; 0000000dH
  00059	83 e0 01	 and	 eax, 1
  0005c	75 0e		 jne	 SHORT $LN6@auto_page_

; 15414: 		{
; 15415: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_ASE, COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS);

  0005e	6a 01		 push	 1
  00060	6a 08		 push	 8
  00062	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15416: 
; 15417: 			return;

  00067	e9 08 02 00 00	 jmp	 $LN1@auto_page_
$LN6@auto_page_:

; 15418: 		}
; 15419: 
; 15420: 		if (pilot_lhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_ASE)

  0006c	83 3d 00 00 00
	00 08		 cmp	 DWORD PTR ?pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 8
  00073	75 05		 jne	 SHORT $LN7@auto_page_

; 15421: 		{
; 15422: 			return;

  00075	e9 fa 01 00 00	 jmp	 $LN1@auto_page_
$LN7@auto_page_:

; 15423: 		}
; 15424: 
; 15425: 		if (pilot_rhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_ASE)

  0007a	83 3d 00 00 00
	00 08		 cmp	 DWORD PTR ?pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 8
  00081	75 05		 jne	 SHORT $LN8@auto_page_

; 15426: 		{
; 15427: 			return;

  00083	e9 ec 01 00 00	 jmp	 $LN1@auto_page_
$LN8@auto_page_:

; 15428: 		}
; 15429: 
; 15430: 		if ((pilot_lhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_OFF) && (!comanche_damage.pilot_lh_main_mfd))

  00088	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 0
  0008f	75 1b		 jne	 SHORT $LN9@auto_page_
  00091	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00096	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  00099	83 e0 01	 and	 eax, 1
  0009c	75 0e		 jne	 SHORT $LN9@auto_page_

; 15431: 		{
; 15432: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_ASE, COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS);

  0009e	6a 00		 push	 0
  000a0	6a 08		 push	 8
  000a2	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15433: 
; 15434: 			return;

  000a7	e9 c8 01 00 00	 jmp	 $LN1@auto_page_
$LN9@auto_page_:

; 15435: 		}
; 15436: 
; 15437: 		if ((pilot_rhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_OFF) && (!comanche_damage.pilot_rh_main_mfd))

  000ac	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 0
  000b3	75 1b		 jne	 SHORT $LN10@auto_page_
  000b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  000ba	c1 e8 0d	 shr	 eax, 13			; 0000000dH
  000bd	83 e0 01	 and	 eax, 1
  000c0	75 0e		 jne	 SHORT $LN10@auto_page_

; 15438: 		{
; 15439: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_ASE, COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS);

  000c2	6a 01		 push	 1
  000c4	6a 08		 push	 8
  000c6	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15440: 
; 15441: 			return;

  000cb	e9 a4 01 00 00	 jmp	 $LN1@auto_page_
$LN10@auto_page_:

; 15442: 		}
; 15443: 
; 15444: 		if ((!get_comanche_main_mfd_has_focus (COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS)) && (!comanche_damage.pilot_lh_main_mfd))

  000d0	6a 00		 push	 0
  000d2	e8 00 00 00 00	 call	 ?get_comanche_main_mfd_has_focus@@YGHW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; get_comanche_main_mfd_has_focus
  000d7	85 c0		 test	 eax, eax
  000d9	75 1b		 jne	 SHORT $LN11@auto_page_
  000db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  000e0	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  000e3	83 e0 01	 and	 eax, 1
  000e6	75 0e		 jne	 SHORT $LN11@auto_page_

; 15445: 		{
; 15446: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_ASE, COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS);

  000e8	6a 00		 push	 0
  000ea	6a 08		 push	 8
  000ec	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15447: 
; 15448: 			return;

  000f1	e9 7e 01 00 00	 jmp	 $LN1@auto_page_
$LN11@auto_page_:

; 15449: 		}
; 15450: 
; 15451: 		if ((!get_comanche_main_mfd_has_focus (COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS)) && (!comanche_damage.pilot_rh_main_mfd))

  000f6	6a 01		 push	 1
  000f8	e8 00 00 00 00	 call	 ?get_comanche_main_mfd_has_focus@@YGHW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; get_comanche_main_mfd_has_focus
  000fd	85 c0		 test	 eax, eax
  000ff	75 1b		 jne	 SHORT $LN12@auto_page_
  00101	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00106	c1 e8 0d	 shr	 eax, 13			; 0000000dH
  00109	83 e0 01	 and	 eax, 1
  0010c	75 0e		 jne	 SHORT $LN12@auto_page_

; 15452: 		{
; 15453: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_ASE, COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS);

  0010e	6a 01		 push	 1
  00110	6a 08		 push	 8
  00112	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15454: 
; 15455: 			return;

  00117	e9 58 01 00 00	 jmp	 $LN1@auto_page_
$LN12@auto_page_:

; 15456: 		}
; 15457: 
; 15458: 		if (!comanche_damage.pilot_lh_main_mfd)

  0011c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00121	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  00124	83 e0 01	 and	 eax, 1
  00127	75 0e		 jne	 SHORT $LN13@auto_page_

; 15459: 		{
; 15460: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_ASE, COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS);

  00129	6a 00		 push	 0
  0012b	6a 08		 push	 8
  0012d	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15461: 
; 15462: 			return;

  00132	e9 3d 01 00 00	 jmp	 $LN1@auto_page_
$LN13@auto_page_:

; 15463: 		}
; 15464: 
; 15465: 		if (!comanche_damage.pilot_rh_main_mfd)

  00137	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  0013c	c1 e8 0d	 shr	 eax, 13			; 0000000dH
  0013f	83 e0 01	 and	 eax, 1
  00142	75 0e		 jne	 SHORT $LN14@auto_page_

; 15466: 		{
; 15467: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_ASE, COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS);

  00144	6a 01		 push	 1
  00146	6a 08		 push	 8
  00148	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15468: 
; 15469: 			return;

  0014d	e9 22 01 00 00	 jmp	 $LN1@auto_page_
$LN14@auto_page_:

; 15470: 		}
; 15471: 	}
; 15472: 	else

  00152	e9 1d 01 00 00	 jmp	 $LN1@auto_page_
$LN3@auto_page_:

; 15473: 	{
; 15474: 		////////////////////////////////////////
; 15475: 		//
; 15476: 		// CO-PILOT
; 15477: 		//
; 15478: 		////////////////////////////////////////
; 15479: 
; 15480: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY) && (!comanche_damage.co_pilot_lh_main_mfd))

  00157	83 3d 00 00 00
	00 28		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 40 ; view_mode, 00000028H
  0015e	75 1b		 jne	 SHORT $LN15@auto_page_
  00160	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00165	c1 e8 10	 shr	 eax, 16			; 00000010H
  00168	83 e0 01	 and	 eax, 1
  0016b	75 0e		 jne	 SHORT $LN15@auto_page_

; 15481: 		{
; 15482: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_ASE, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_LHS);

  0016d	6a 02		 push	 2
  0016f	6a 08		 push	 8
  00171	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15483: 
; 15484: 			return;

  00176	e9 f9 00 00 00	 jmp	 $LN1@auto_page_
$LN15@auto_page_:

; 15485: 		}
; 15486: 
; 15487: 		if ((get_view_mode () == VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY) && (!comanche_damage.co_pilot_rh_main_mfd))

  0017b	83 3d 00 00 00
	00 29		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 41 ; view_mode, 00000029H
  00182	75 1b		 jne	 SHORT $LN16@auto_page_
  00184	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00189	c1 e8 11	 shr	 eax, 17			; 00000011H
  0018c	83 e0 01	 and	 eax, 1
  0018f	75 0e		 jne	 SHORT $LN16@auto_page_

; 15488: 		{
; 15489: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_ASE, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_RHS);

  00191	6a 03		 push	 3
  00193	6a 08		 push	 8
  00195	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15490: 
; 15491: 			return;

  0019a	e9 d5 00 00 00	 jmp	 $LN1@auto_page_
$LN16@auto_page_:

; 15492: 		}
; 15493: 
; 15494: 		if (co_pilot_lhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_ASE)

  0019f	83 3d 00 00 00
	00 08		 cmp	 DWORD PTR ?co_pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 8
  001a6	75 05		 jne	 SHORT $LN17@auto_page_

; 15495: 		{
; 15496: 			return;

  001a8	e9 c7 00 00 00	 jmp	 $LN1@auto_page_
$LN17@auto_page_:

; 15497: 		}
; 15498: 
; 15499: 		if (co_pilot_rhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_ASE)

  001ad	83 3d 00 00 00
	00 08		 cmp	 DWORD PTR ?co_pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 8
  001b4	75 05		 jne	 SHORT $LN18@auto_page_

; 15500: 		{
; 15501: 			return;

  001b6	e9 b9 00 00 00	 jmp	 $LN1@auto_page_
$LN18@auto_page_:

; 15502: 		}
; 15503: 
; 15504: 		if ((co_pilot_lhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_OFF) && (!comanche_damage.co_pilot_lh_main_mfd))

  001bb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 0
  001c2	75 1b		 jne	 SHORT $LN19@auto_page_
  001c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  001c9	c1 e8 10	 shr	 eax, 16			; 00000010H
  001cc	83 e0 01	 and	 eax, 1
  001cf	75 0e		 jne	 SHORT $LN19@auto_page_

; 15505: 		{
; 15506: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_ASE, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_LHS);

  001d1	6a 02		 push	 2
  001d3	6a 08		 push	 8
  001d5	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15507: 
; 15508: 			return;

  001da	e9 95 00 00 00	 jmp	 $LN1@auto_page_
$LN19@auto_page_:

; 15509: 		}
; 15510: 
; 15511: 		if ((co_pilot_rhs_main_mfd_mode == COMANCHE_MAIN_MFD_MODE_OFF) && (!comanche_damage.co_pilot_rh_main_mfd))

  001df	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A, 0
  001e6	75 18		 jne	 SHORT $LN20@auto_page_
  001e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  001ed	c1 e8 11	 shr	 eax, 17			; 00000011H
  001f0	83 e0 01	 and	 eax, 1
  001f3	75 0b		 jne	 SHORT $LN20@auto_page_

; 15512: 		{
; 15513: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_ASE, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_RHS);

  001f5	6a 03		 push	 3
  001f7	6a 08		 push	 8
  001f9	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15514: 
; 15515: 			return;

  001fe	eb 74		 jmp	 SHORT $LN1@auto_page_
$LN20@auto_page_:

; 15516: 		}
; 15517: 
; 15518: 		if ((!get_comanche_main_mfd_has_focus (COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_LHS)) && (!comanche_damage.co_pilot_lh_main_mfd))

  00200	6a 02		 push	 2
  00202	e8 00 00 00 00	 call	 ?get_comanche_main_mfd_has_focus@@YGHW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; get_comanche_main_mfd_has_focus
  00207	85 c0		 test	 eax, eax
  00209	75 18		 jne	 SHORT $LN21@auto_page_
  0020b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00210	c1 e8 10	 shr	 eax, 16			; 00000010H
  00213	83 e0 01	 and	 eax, 1
  00216	75 0b		 jne	 SHORT $LN21@auto_page_

; 15519: 		{
; 15520: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_ASE, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_LHS);

  00218	6a 02		 push	 2
  0021a	6a 08		 push	 8
  0021c	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15521: 
; 15522: 			return;

  00221	eb 51		 jmp	 SHORT $LN1@auto_page_
$LN21@auto_page_:

; 15523: 		}
; 15524: 
; 15525: 		if ((!get_comanche_main_mfd_has_focus (COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_RHS)) && (!comanche_damage.co_pilot_rh_main_mfd))

  00223	6a 03		 push	 3
  00225	e8 00 00 00 00	 call	 ?get_comanche_main_mfd_has_focus@@YGHW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; get_comanche_main_mfd_has_focus
  0022a	85 c0		 test	 eax, eax
  0022c	75 18		 jne	 SHORT $LN22@auto_page_
  0022e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00233	c1 e8 11	 shr	 eax, 17			; 00000011H
  00236	83 e0 01	 and	 eax, 1
  00239	75 0b		 jne	 SHORT $LN22@auto_page_

; 15526: 		{
; 15527: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_ASE, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_RHS);

  0023b	6a 03		 push	 3
  0023d	6a 08		 push	 8
  0023f	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15528: 
; 15529: 			return;

  00244	eb 2e		 jmp	 SHORT $LN1@auto_page_
$LN22@auto_page_:

; 15530: 		}
; 15531: 
; 15532: 		if (!comanche_damage.co_pilot_lh_main_mfd)

  00246	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  0024b	c1 e8 10	 shr	 eax, 16			; 00000010H
  0024e	83 e0 01	 and	 eax, 1
  00251	75 0b		 jne	 SHORT $LN23@auto_page_

; 15533: 		{
; 15534: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_ASE, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_LHS);

  00253	6a 02		 push	 2
  00255	6a 08		 push	 8
  00257	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15535: 
; 15536: 			return;

  0025c	eb 16		 jmp	 SHORT $LN1@auto_page_
$LN23@auto_page_:

; 15537: 		}
; 15538: 
; 15539: 		if (!comanche_damage.co_pilot_rh_main_mfd)

  0025e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00263	c1 e8 11	 shr	 eax, 17			; 00000011H
  00266	83 e0 01	 and	 eax, 1
  00269	75 09		 jne	 SHORT $LN1@auto_page_

; 15540: 		{
; 15541: 			select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_ASE, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_RHS);

  0026b	6a 03		 push	 3
  0026d	6a 08		 push	 8
  0026f	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode
$LN1@auto_page_:

; 15542: 
; 15543: 			return;
; 15544: 		}
; 15545: 	}
; 15546: }

  00274	5f		 pop	 edi
  00275	5e		 pop	 esi
  00276	5b		 pop	 ebx
  00277	8b e5		 mov	 esp, ebp
  00279	5d		 pop	 ebp
  0027a	c3		 ret	 0
?auto_page_comanche_ase_main_mfd@@YGXXZ ENDP		; auto_page_comanche_ase_main_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?toggle_comanche_ase_auto_page@@YGXXZ
_TEXT	SEGMENT
?toggle_comanche_ase_auto_page@@YGXXZ PROC		; toggle_comanche_ase_auto_page, COMDAT

; 15383: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 15384: 	set_global_ase_auto_page (get_global_ase_auto_page () ^ 1);

  00009	a1 64 03 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868
  0000e	83 f0 01	 xor	 eax, 1
  00011	a3 64 03 00 00	 mov	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868, eax

; 15385: }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?toggle_comanche_ase_auto_page@@YGXXZ ENDP		; toggle_comanche_ase_auto_page
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?select_previous_comanche_co_pilot_tsd_declutter_level@@YGXXZ
_TEXT	SEGMENT
?select_previous_comanche_co_pilot_tsd_declutter_level@@YGXXZ PROC ; select_previous_comanche_co_pilot_tsd_declutter_level, COMDAT

; 15363: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 15364: 	if (co_pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_NAVIGATION)

  00009	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
  00010	75 0c		 jne	 SHORT $LN2@select_pre

; 15365: 	{
; 15366: 		co_pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_TARGET;

  00012	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  0001c	eb 1f		 jmp	 SHORT $LN1@select_pre
$LN2@select_pre:

; 15367: 	}
; 15368: 	else if (co_pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  0001e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  00025	75 0c		 jne	 SHORT $LN4@select_pre

; 15369: 	{
; 15370: 		co_pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_ALL;

  00027	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0

; 15371: 	}
; 15372: 	else

  00031	eb 0a		 jmp	 SHORT $LN1@select_pre
$LN4@select_pre:

; 15373: 	{
; 15374: 		co_pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_NAVIGATION;

  00033	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
$LN1@select_pre:

; 15375: 	}
; 15376: }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?select_previous_comanche_co_pilot_tsd_declutter_level@@YGXXZ ENDP ; select_previous_comanche_co_pilot_tsd_declutter_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?select_previous_comanche_pilot_tsd_declutter_level@@YGXXZ
_TEXT	SEGMENT
?select_previous_comanche_pilot_tsd_declutter_level@@YGXXZ PROC ; select_previous_comanche_pilot_tsd_declutter_level, COMDAT

; 15343: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 15344: 	if (pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_NAVIGATION)

  00009	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
  00010	75 0c		 jne	 SHORT $LN2@select_pre

; 15345: 	{
; 15346: 		pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_TARGET;

  00012	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  0001c	eb 1f		 jmp	 SHORT $LN1@select_pre
$LN2@select_pre:

; 15347: 	}
; 15348: 	else if (pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  0001e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  00025	75 0c		 jne	 SHORT $LN4@select_pre

; 15349: 	{
; 15350: 		pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_ALL;

  00027	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0

; 15351: 	}
; 15352: 	else

  00031	eb 0a		 jmp	 SHORT $LN1@select_pre
$LN4@select_pre:

; 15353: 	{
; 15354: 		pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_NAVIGATION;

  00033	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
$LN1@select_pre:

; 15355: 	}
; 15356: }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?select_previous_comanche_pilot_tsd_declutter_level@@YGXXZ ENDP ; select_previous_comanche_pilot_tsd_declutter_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?select_next_comanche_co_pilot_tsd_declutter_level@@YGXXZ
_TEXT	SEGMENT
?select_next_comanche_co_pilot_tsd_declutter_level@@YGXXZ PROC ; select_next_comanche_co_pilot_tsd_declutter_level, COMDAT

; 15323: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 15324: 	if (co_pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_ALL)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0
  00010	75 0c		 jne	 SHORT $LN2@select_nex

; 15325: 	{
; 15326: 		co_pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_TARGET;

  00012	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  0001c	eb 1f		 jmp	 SHORT $LN1@select_nex
$LN2@select_nex:

; 15327: 	}
; 15328: 	else if (co_pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  0001e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  00025	75 0c		 jne	 SHORT $LN4@select_nex

; 15329: 	{
; 15330: 		co_pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_NAVIGATION;

  00027	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2

; 15331: 	}
; 15332: 	else

  00031	eb 0a		 jmp	 SHORT $LN1@select_nex
$LN4@select_nex:

; 15333: 	{
; 15334: 		co_pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_ALL;

  00033	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0
$LN1@select_nex:

; 15335: 	}
; 15336: }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?select_next_comanche_co_pilot_tsd_declutter_level@@YGXXZ ENDP ; select_next_comanche_co_pilot_tsd_declutter_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?select_next_comanche_pilot_tsd_declutter_level@@YGXXZ
_TEXT	SEGMENT
?select_next_comanche_pilot_tsd_declutter_level@@YGXXZ PROC ; select_next_comanche_pilot_tsd_declutter_level, COMDAT

; 15303: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 15304: 	if (pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_ALL)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0
  00010	75 0c		 jne	 SHORT $LN2@select_nex

; 15305: 	{
; 15306: 		pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_TARGET;

  00012	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  0001c	eb 1f		 jmp	 SHORT $LN1@select_nex
$LN2@select_nex:

; 15307: 	}
; 15308: 	else if (pilot_tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  0001e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  00025	75 0c		 jne	 SHORT $LN4@select_nex

; 15309: 	{
; 15310: 		pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_NAVIGATION;

  00027	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2

; 15311: 	}
; 15312: 	else

  00031	eb 0a		 jmp	 SHORT $LN1@select_nex
$LN4@select_nex:

; 15313: 	{
; 15314: 		pilot_tsd_declutter_level = TSD_DECLUTTER_LEVEL_ALL;

  00033	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0
$LN1@select_nex:

; 15315: 	}
; 15316: }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?select_next_comanche_pilot_tsd_declutter_level@@YGXXZ ENDP ; select_next_comanche_pilot_tsd_declutter_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?select_previous_comanche_co_pilot_tsd_ase_range@@YGXXZ
_TEXT	SEGMENT
?select_previous_comanche_co_pilot_tsd_ase_range@@YGXXZ PROC ; select_previous_comanche_co_pilot_tsd_ase_range, COMDAT

; 15283: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 15284: 	if (co_pilot_tsd_ase_range == TSD_ASE_RANGE_25000)

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  00011	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  00018	9f		 lahf
  00019	f6 c4 44	 test	 ah, 68			; 00000044H
  0001c	7a 12		 jp	 SHORT $LN2@select_pre

; 15285: 	{
; 15286: 		co_pilot_tsd_ase_range = TSD_ASE_RANGE_10000;

  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
  00026	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0
  0002e	eb 4c		 jmp	 SHORT $LN6@select_pre
$LN2@select_pre:

; 15287: 	}
; 15288: 	else if (co_pilot_tsd_ase_range == TSD_ASE_RANGE_10000)

  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  00038	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  0003f	9f		 lahf
  00040	f6 c4 44	 test	 ah, 68			; 00000044H
  00043	7a 12		 jp	 SHORT $LN4@select_pre

; 15289: 	{
; 15290: 		co_pilot_tsd_ase_range = TSD_ASE_RANGE_5000;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  0004d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0
  00055	eb 25		 jmp	 SHORT $LN6@select_pre
$LN4@select_pre:

; 15291: 	}
; 15292: 	else if (co_pilot_tsd_ase_range == TSD_ASE_RANGE_5000)

  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  0005f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  00066	9f		 lahf
  00067	f6 c4 44	 test	 ah, 68			; 00000044H
  0006a	7a 10		 jp	 SHORT $LN6@select_pre

; 15293: 	{
; 15294: 		co_pilot_tsd_ase_range = TSD_ASE_RANGE_2000;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44fa0000
  00074	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0
$LN6@select_pre:

; 15295: 	}
; 15296: }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?select_previous_comanche_co_pilot_tsd_ase_range@@YGXXZ ENDP ; select_previous_comanche_co_pilot_tsd_ase_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?select_previous_comanche_pilot_tsd_ase_range@@YGXXZ
_TEXT	SEGMENT
?select_previous_comanche_pilot_tsd_ase_range@@YGXXZ PROC ; select_previous_comanche_pilot_tsd_ase_range, COMDAT

; 15263: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 15264: 	if (pilot_tsd_ase_range == TSD_ASE_RANGE_25000)

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  00011	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  00018	9f		 lahf
  00019	f6 c4 44	 test	 ah, 68			; 00000044H
  0001c	7a 12		 jp	 SHORT $LN2@select_pre

; 15265: 	{
; 15266: 		pilot_tsd_ase_range = TSD_ASE_RANGE_10000;

  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
  00026	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0
  0002e	eb 4c		 jmp	 SHORT $LN6@select_pre
$LN2@select_pre:

; 15267: 	}
; 15268: 	else if (pilot_tsd_ase_range == TSD_ASE_RANGE_10000)

  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  00038	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  0003f	9f		 lahf
  00040	f6 c4 44	 test	 ah, 68			; 00000044H
  00043	7a 12		 jp	 SHORT $LN4@select_pre

; 15269: 	{
; 15270: 		pilot_tsd_ase_range = TSD_ASE_RANGE_5000;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  0004d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0
  00055	eb 25		 jmp	 SHORT $LN6@select_pre
$LN4@select_pre:

; 15271: 	}
; 15272: 	else if (pilot_tsd_ase_range == TSD_ASE_RANGE_5000)

  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  0005f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  00066	9f		 lahf
  00067	f6 c4 44	 test	 ah, 68			; 00000044H
  0006a	7a 10		 jp	 SHORT $LN6@select_pre

; 15273: 	{
; 15274: 		pilot_tsd_ase_range = TSD_ASE_RANGE_2000;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44fa0000
  00074	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0
$LN6@select_pre:

; 15275: 	}
; 15276: }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?select_previous_comanche_pilot_tsd_ase_range@@YGXXZ ENDP ; select_previous_comanche_pilot_tsd_ase_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?select_next_comanche_co_pilot_tsd_ase_range@@YGXXZ
_TEXT	SEGMENT
?select_next_comanche_co_pilot_tsd_ase_range@@YGXXZ PROC ; select_next_comanche_co_pilot_tsd_ase_range, COMDAT

; 15243: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 15244: 	if (co_pilot_tsd_ase_range == TSD_ASE_RANGE_2000)

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  00011	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  00018	9f		 lahf
  00019	f6 c4 44	 test	 ah, 68			; 00000044H
  0001c	7a 12		 jp	 SHORT $LN2@select_nex

; 15245: 	{
; 15246: 		co_pilot_tsd_ase_range = TSD_ASE_RANGE_5000;

  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  00026	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0
  0002e	eb 4c		 jmp	 SHORT $LN6@select_nex
$LN2@select_nex:

; 15247: 	}
; 15248: 	else if (co_pilot_tsd_ase_range == TSD_ASE_RANGE_5000)

  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  00038	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  0003f	9f		 lahf
  00040	f6 c4 44	 test	 ah, 68			; 00000044H
  00043	7a 12		 jp	 SHORT $LN4@select_nex

; 15249: 	{
; 15250: 		co_pilot_tsd_ase_range = TSD_ASE_RANGE_10000;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
  0004d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0
  00055	eb 25		 jmp	 SHORT $LN6@select_nex
$LN4@select_nex:

; 15251: 	}
; 15252: 	else if (co_pilot_tsd_ase_range == TSD_ASE_RANGE_10000)

  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?co_pilot_tsd_ase_range@@3MA
  0005f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  00066	9f		 lahf
  00067	f6 c4 44	 test	 ah, 68			; 00000044H
  0006a	7a 10		 jp	 SHORT $LN6@select_nex

; 15253: 	{
; 15254: 		co_pilot_tsd_ase_range = TSD_ASE_RANGE_25000;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@46c35000
  00074	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0
$LN6@select_nex:

; 15255: 	}
; 15256: }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?select_next_comanche_co_pilot_tsd_ase_range@@YGXXZ ENDP ; select_next_comanche_co_pilot_tsd_ase_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?select_next_comanche_pilot_tsd_ase_range@@YGXXZ
_TEXT	SEGMENT
?select_next_comanche_pilot_tsd_ase_range@@YGXXZ PROC	; select_next_comanche_pilot_tsd_ase_range, COMDAT

; 15223: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 15224: 	if (pilot_tsd_ase_range == TSD_ASE_RANGE_2000)

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  00011	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  00018	9f		 lahf
  00019	f6 c4 44	 test	 ah, 68			; 00000044H
  0001c	7a 12		 jp	 SHORT $LN2@select_nex

; 15225: 	{
; 15226: 		pilot_tsd_ase_range = TSD_ASE_RANGE_5000;

  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  00026	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0
  0002e	eb 4c		 jmp	 SHORT $LN6@select_nex
$LN2@select_nex:

; 15227: 	}
; 15228: 	else if (pilot_tsd_ase_range == TSD_ASE_RANGE_5000)

  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  00038	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  0003f	9f		 lahf
  00040	f6 c4 44	 test	 ah, 68			; 00000044H
  00043	7a 12		 jp	 SHORT $LN4@select_nex

; 15229: 	{
; 15230: 		pilot_tsd_ase_range = TSD_ASE_RANGE_10000;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
  0004d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0
  00055	eb 25		 jmp	 SHORT $LN6@select_nex
$LN4@select_nex:

; 15231: 	}
; 15232: 	else if (pilot_tsd_ase_range == TSD_ASE_RANGE_10000)

  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pilot_tsd_ase_range@@3MA
  0005f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  00066	9f		 lahf
  00067	f6 c4 44	 test	 ah, 68			; 00000044H
  0006a	7a 10		 jp	 SHORT $LN6@select_nex

; 15233: 	{
; 15234: 		pilot_tsd_ase_range = TSD_ASE_RANGE_25000;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@46c35000
  00074	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0
$LN6@select_nex:

; 15235: 	}
; 15236: }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?select_next_comanche_pilot_tsd_ase_range@@YGXXZ ENDP	; select_next_comanche_pilot_tsd_ase_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?toggle_comanche_side_mfd_on_off@@YGXW4COMANCHE_SIDE_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_mfd_location$ = 8					; size = 4
?toggle_comanche_side_mfd_on_off@@YGXW4COMANCHE_SIDE_MFD_LOCATIONS@@@Z PROC ; toggle_comanche_side_mfd_on_off, COMDAT

; 15205: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 15206: 	ASSERT (comanche_side_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@toggle_com
  0000f	83 7d 08 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00013	7c 18		 jl	 SHORT $LN2@toggle_com
$LN3@toggle_com:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??toggle_comanche_side_mfd_on_off@@YGXW4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 01	 add	 eax, 1
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@KGKPBMFE@comanche_side_mfd_location_vali@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@toggle_com:

; 15207: 
; 15208: 	if (*side_mfd_mode_ptrs[mfd_location] != COMANCHE_SIDE_MFD_MODE_OFF)

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?side_mfd_mode_ptrs@@3PAPAW4COMANCHE_SIDE_MFD_MODES@@A[eax*4]
  00037	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0003a	74 0d		 je	 SHORT $LN4@toggle_com

; 15209: 	{
; 15210: 		select_comanche_side_mfd_mode (COMANCHE_SIDE_MFD_MODE_OFF, mfd_location);

  0003c	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0003f	50		 push	 eax
  00040	6a 00		 push	 0
  00042	e8 00 00 00 00	 call	 ?select_comanche_side_mfd_mode@@YGXW4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ; select_comanche_side_mfd_mode

; 15211: 	}
; 15212: 	else

  00047	eb 13		 jmp	 SHORT $LN1@toggle_com
$LN4@toggle_com:

; 15213: 	{
; 15214: 		select_comanche_side_mfd_mode (get_default_side_mfd_mode (mfd_location), mfd_location);

  00049	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _mfd_location$[ebp]
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ?get_default_side_mfd_mode@@YG?AW4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ; get_default_side_mfd_mode
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 ?select_comanche_side_mfd_mode@@YGXW4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ; select_comanche_side_mfd_mode
$LN1@toggle_com:

; 15215: 	}
; 15216: }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
?toggle_comanche_side_mfd_on_off@@YGXW4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ENDP ; toggle_comanche_side_mfd_on_off
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?toggle_comanche_main_mfd_on_off@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_mfd_location$ = 8					; size = 4
?toggle_comanche_main_mfd_on_off@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z PROC ; toggle_comanche_main_mfd_on_off, COMDAT

; 15187: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 15188: 	ASSERT (comanche_main_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@toggle_com
  0000f	83 7d 08 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00013	7c 18		 jl	 SHORT $LN2@toggle_com
$LN3@toggle_com:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??toggle_comanche_main_mfd_on_off@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 01	 add	 eax, 1
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@GBKBAHOG@comanche_main_mfd_location_vali@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@toggle_com:

; 15189: 
; 15190: 	if (*main_mfd_mode_ptrs[mfd_location] != COMANCHE_MAIN_MFD_MODE_OFF)

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?main_mfd_mode_ptrs@@3PAPAW4COMANCHE_MAIN_MFD_MODES@@A[eax*4]
  00037	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0003a	74 0d		 je	 SHORT $LN4@toggle_com

; 15191: 	{
; 15192: 		select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_OFF, mfd_location);

  0003c	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0003f	50		 push	 eax
  00040	6a 00		 push	 0
  00042	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15193: 	}
; 15194: 	else

  00047	eb 09		 jmp	 SHORT $LN1@toggle_com
$LN4@toggle_com:

; 15195: 	{
; 15196: 		select_next_comanche_main_mfd (mfd_location);

  00049	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ?select_next_comanche_main_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_next_comanche_main_mfd
$LN1@toggle_com:

; 15197: 	}
; 15198: }

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?toggle_comanche_main_mfd_on_off@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ENDP ; toggle_comanche_main_mfd_on_off
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?select_previous_comanche_main_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_previous_mfd_mode$ = -12				; size = 4
_mfd_mode_ptr2$ = -8					; size = 4
_mfd_mode_ptr1$ = -4					; size = 4
_mfd_location$ = 8					; size = 4
?select_previous_comanche_main_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z PROC ; select_previous_comanche_main_mfd, COMDAT

; 15155: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 15156: 	comanche_main_mfd_modes
; 15157: 		*mfd_mode_ptr1,
; 15158: 		*mfd_mode_ptr2,
; 15159: 		previous_mfd_mode;
; 15160: 
; 15161: 	ASSERT (comanche_main_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@select_pre
  0000f	83 7d 08 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00013	7c 18		 jl	 SHORT $LN2@select_pre
$LN3@select_pre:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_previous_comanche_main_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 06	 add	 eax, 6
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@GBKBAHOG@comanche_main_mfd_location_vali@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_pre:

; 15162: 
; 15163: 	mfd_mode_ptr1 = main_mfd_mode_ptrs[mfd_location];

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?main_mfd_mode_ptrs@@3PAPAW4COMANCHE_MAIN_MFD_MODES@@A[eax*4]
  00037	89 4d fc	 mov	 DWORD PTR _mfd_mode_ptr1$[ebp], ecx

; 15164: 
; 15165: 	mfd_mode_ptr2 = opposite_main_mfd_mode_ptrs[mfd_location];

  0003a	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0003d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?opposite_main_mfd_mode_ptrs@@3PAPAW4COMANCHE_MAIN_MFD_MODES@@A[eax*4]
  00044	89 4d f8	 mov	 DWORD PTR _mfd_mode_ptr2$[ebp], ecx

; 15166: 
; 15167: 	previous_mfd_mode = get_previous_main_mfd_mode (*mfd_mode_ptr1, mfd_location);

  00047	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _mfd_mode_ptr1$[ebp]
  0004e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?get_previous_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W41@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; get_previous_main_mfd_mode
  00056	89 45 f4	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax

; 15168: 
; 15169: 	if (previous_mfd_mode != COMANCHE_MAIN_MFD_MODE_DAMAGED)

  00059	83 7d f4 01	 cmp	 DWORD PTR _previous_mfd_mode$[ebp], 1
  0005d	74 3c		 je	 SHORT $LN4@select_pre

; 15170: 	{
; 15171: 		if (previous_mfd_mode == *mfd_mode_ptr2)

  0005f	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  00062	8b 4d f4	 mov	 ecx, DWORD PTR _previous_mfd_mode$[ebp]
  00065	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00067	75 10		 jne	 SHORT $LN5@select_pre

; 15172: 		{
; 15173: 			previous_mfd_mode = get_previous_main_mfd_mode (previous_mfd_mode, mfd_location);

  00069	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d f4	 mov	 ecx, DWORD PTR _previous_mfd_mode$[ebp]
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 ?get_previous_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W41@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; get_previous_main_mfd_mode
  00076	89 45 f4	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax
$LN5@select_pre:

; 15174: 		}
; 15175: 
; 15176: 		ASSERT (previous_mfd_mode != *mfd_mode_ptr2);

  00079	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  0007c	8b 4d f4	 mov	 ecx, DWORD PTR _previous_mfd_mode$[ebp]
  0007f	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00081	75 18		 jne	 SHORT $LN4@select_pre
  00083	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_previous_comanche_main_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  00088	83 c0 15	 add	 eax, 21			; 00000015H
  0008b	50		 push	 eax
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@NJOBHOGM@previous_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_@
  00096	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@select_pre:

; 15177: 	}
; 15178: 
; 15179: 	select_comanche_main_mfd_mode (previous_mfd_mode, mfd_location);

  0009b	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0009e	50		 push	 eax
  0009f	8b 4d f4	 mov	 ecx, DWORD PTR _previous_mfd_mode$[ebp]
  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15180: }

  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
?select_previous_comanche_main_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ENDP ; select_previous_comanche_main_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?select_next_comanche_main_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_next_mfd_mode$ = -12					; size = 4
_mfd_mode_ptr2$ = -8					; size = 4
_mfd_mode_ptr1$ = -4					; size = 4
_mfd_location$ = 8					; size = 4
?select_next_comanche_main_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z PROC ; select_next_comanche_main_mfd, COMDAT

; 15123: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 15124: 	comanche_main_mfd_modes
; 15125: 		*mfd_mode_ptr1,
; 15126: 		*mfd_mode_ptr2,
; 15127: 		next_mfd_mode;
; 15128: 
; 15129: 	ASSERT (comanche_main_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@select_nex
  0000f	83 7d 08 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00013	7c 18		 jl	 SHORT $LN2@select_nex
$LN3@select_nex:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_next_comanche_main_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 06	 add	 eax, 6
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@GBKBAHOG@comanche_main_mfd_location_vali@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_nex:

; 15130: 
; 15131: 	mfd_mode_ptr1 = main_mfd_mode_ptrs[mfd_location];

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?main_mfd_mode_ptrs@@3PAPAW4COMANCHE_MAIN_MFD_MODES@@A[eax*4]
  00037	89 4d fc	 mov	 DWORD PTR _mfd_mode_ptr1$[ebp], ecx

; 15132: 
; 15133: 	mfd_mode_ptr2 = opposite_main_mfd_mode_ptrs[mfd_location];

  0003a	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0003d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?opposite_main_mfd_mode_ptrs@@3PAPAW4COMANCHE_MAIN_MFD_MODES@@A[eax*4]
  00044	89 4d f8	 mov	 DWORD PTR _mfd_mode_ptr2$[ebp], ecx

; 15134: 
; 15135: 	next_mfd_mode = get_next_main_mfd_mode (*mfd_mode_ptr1, mfd_location);

  00047	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _mfd_mode_ptr1$[ebp]
  0004e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?get_next_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W41@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; get_next_main_mfd_mode
  00056	89 45 f4	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax

; 15136: 
; 15137: 	if (next_mfd_mode != COMANCHE_MAIN_MFD_MODE_DAMAGED)

  00059	83 7d f4 01	 cmp	 DWORD PTR _next_mfd_mode$[ebp], 1
  0005d	74 3c		 je	 SHORT $LN4@select_nex

; 15138: 	{
; 15139: 		if (next_mfd_mode == *mfd_mode_ptr2)

  0005f	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  00062	8b 4d f4	 mov	 ecx, DWORD PTR _next_mfd_mode$[ebp]
  00065	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00067	75 10		 jne	 SHORT $LN5@select_nex

; 15140: 		{
; 15141: 			next_mfd_mode = get_next_main_mfd_mode (next_mfd_mode, mfd_location);

  00069	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d f4	 mov	 ecx, DWORD PTR _next_mfd_mode$[ebp]
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 ?get_next_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W41@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; get_next_main_mfd_mode
  00076	89 45 f4	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax
$LN5@select_nex:

; 15142: 		}
; 15143: 
; 15144: 		ASSERT (next_mfd_mode != *mfd_mode_ptr2);

  00079	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  0007c	8b 4d f4	 mov	 ecx, DWORD PTR _next_mfd_mode$[ebp]
  0007f	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00081	75 18		 jne	 SHORT $LN4@select_nex
  00083	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_next_comanche_main_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  00088	83 c0 15	 add	 eax, 21			; 00000015H
  0008b	50		 push	 eax
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HJLHJBNK@next_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_ptr2@
  00096	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@select_nex:

; 15145: 	}
; 15146: 
; 15147: 	select_comanche_main_mfd_mode (next_mfd_mode, mfd_location);

  0009b	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0009e	50		 push	 eax
  0009f	8b 4d f4	 mov	 ecx, DWORD PTR _next_mfd_mode$[ebp]
  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 15148: }

  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
?select_next_comanche_main_mfd@@YGXW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ENDP ; select_next_comanche_main_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?select_next_comanche_side_mfd@@YGXW4COMANCHE_SIDE_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_next_mfd_mode$ = -12					; size = 4
_mfd_mode_ptr2$ = -8					; size = 4
_mfd_mode_ptr1$ = -4					; size = 4
_mfd_location$ = 8					; size = 4
?select_next_comanche_side_mfd@@YGXW4COMANCHE_SIDE_MFD_LOCATIONS@@@Z PROC ; select_next_comanche_side_mfd, COMDAT

; 15095: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 15096: 	comanche_side_mfd_modes
; 15097: 		*mfd_mode_ptr1,
; 15098: 		*mfd_mode_ptr2,
; 15099: 		next_mfd_mode;
; 15100: 
; 15101: 	ASSERT (comanche_side_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@select_nex
  0000f	83 7d 08 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00013	7c 18		 jl	 SHORT $LN2@select_nex
$LN3@select_nex:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_next_comanche_side_mfd@@YGXW4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 06	 add	 eax, 6
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@KGKPBMFE@comanche_side_mfd_location_vali@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_nex:

; 15102: 
; 15103: 	mfd_mode_ptr1 = side_mfd_mode_ptrs[mfd_location];

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?side_mfd_mode_ptrs@@3PAPAW4COMANCHE_SIDE_MFD_MODES@@A[eax*4]
  00037	89 4d fc	 mov	 DWORD PTR _mfd_mode_ptr1$[ebp], ecx

; 15104: 	mfd_mode_ptr2 = opposite_side_mfd_mode_ptrs[mfd_location];

  0003a	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0003d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?opposite_side_mfd_mode_ptrs@@3PAPAW4COMANCHE_SIDE_MFD_MODES@@A[eax*4]
  00044	89 4d f8	 mov	 DWORD PTR _mfd_mode_ptr2$[ebp], ecx

; 15105: 	next_mfd_mode = get_next_side_mfd_mode (*mfd_mode_ptr1, mfd_location);

  00047	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _mfd_mode_ptr1$[ebp]
  0004e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?get_next_side_mfd_mode@@YG?AW4COMANCHE_SIDE_MFD_MODES@@W41@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ; get_next_side_mfd_mode
  00056	89 45 f4	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax

; 15106: 
; 15107: 	if (next_mfd_mode != COMANCHE_SIDE_MFD_MODE_DAMAGED && next_mfd_mode != COMANCHE_SIDE_MFD_MODE_OFF)

  00059	83 7d f4 01	 cmp	 DWORD PTR _next_mfd_mode$[ebp], 1
  0005d	74 42		 je	 SHORT $LN4@select_nex
  0005f	83 7d f4 00	 cmp	 DWORD PTR _next_mfd_mode$[ebp], 0
  00063	74 3c		 je	 SHORT $LN4@select_nex

; 15108: 	{
; 15109: 		if (next_mfd_mode == *mfd_mode_ptr2)

  00065	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  00068	8b 4d f4	 mov	 ecx, DWORD PTR _next_mfd_mode$[ebp]
  0006b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0006d	75 10		 jne	 SHORT $LN5@select_nex

; 15110: 			next_mfd_mode = get_next_side_mfd_mode (next_mfd_mode, mfd_location);

  0006f	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00072	50		 push	 eax
  00073	8b 4d f4	 mov	 ecx, DWORD PTR _next_mfd_mode$[ebp]
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ?get_next_side_mfd_mode@@YG?AW4COMANCHE_SIDE_MFD_MODES@@W41@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ; get_next_side_mfd_mode
  0007c	89 45 f4	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax
$LN5@select_nex:

; 15111: 
; 15112: 		ASSERT (next_mfd_mode != *mfd_mode_ptr2);

  0007f	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  00082	8b 4d f4	 mov	 ecx, DWORD PTR _next_mfd_mode$[ebp]
  00085	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00087	75 18		 jne	 SHORT $LN4@select_nex
  00089	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_next_comanche_side_mfd@@YGXW4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA
  0008e	83 c0 11	 add	 eax, 17			; 00000011H
  00091	50		 push	 eax
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HJLHJBNK@next_mfd_mode?5?$CB?$DN?5?$CKmfd_mode_ptr2@
  0009c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@select_nex:

; 15113: 	}
; 15114: 
; 15115: 	select_comanche_side_mfd_mode (next_mfd_mode, mfd_location);

  000a1	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  000a4	50		 push	 eax
  000a5	8b 4d f4	 mov	 ecx, DWORD PTR _next_mfd_mode$[ebp]
  000a8	51		 push	 ecx
  000a9	e8 00 00 00 00	 call	 ?select_comanche_side_mfd_mode@@YGXW4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ; select_comanche_side_mfd_mode

; 15116: }

  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 04 00	 ret	 4
?select_next_comanche_side_mfd@@YGXW4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ENDP ; select_next_comanche_side_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?select_comanche_side_mfd_mode@@YGXW4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_mfd_mode_ptr2$ = -8					; size = 4
_mfd_mode_ptr1$ = -4					; size = 4
_mfd_mode$ = 8						; size = 4
_mfd_location$ = 12					; size = 4
?select_comanche_side_mfd_mode@@YGXW4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z PROC ; select_comanche_side_mfd_mode, COMDAT

; 14786: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 14787: 	comanche_side_mfd_modes
; 14788: 		*mfd_mode_ptr1,
; 14789: 		*mfd_mode_ptr2;
; 14790: 
; 14791: 	ASSERT (comanche_side_mfd_mode_valid (mfd_mode));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@select_com
  0000f	83 7d 08 06	 cmp	 DWORD PTR _mfd_mode$[ebp], 6
  00013	7c 18		 jl	 SHORT $LN2@select_com
$LN3@select_com:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_comanche_side_mfd_mode@@YGXW4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 05	 add	 eax, 5
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@EEGMGJJO@comanche_side_mfd_mode_valid?5?$CIm@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_com:

; 14792: 
; 14793: 	ASSERT (comanche_side_mfd_location_valid (mfd_location));

  0002d	83 7d 0c 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  00031	7c 06		 jl	 SHORT $LN5@select_com
  00033	83 7d 0c 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00037	7c 18		 jl	 SHORT $LN4@select_com
$LN5@select_com:
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_comanche_side_mfd_mode@@YGXW4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z@4JA
  0003e	83 c0 07	 add	 eax, 7
  00041	50		 push	 eax
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@KGKPBMFE@comanche_side_mfd_location_vali@
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@select_com:

; 14794: 
; 14795: 	debug_colour_log (DEBUG_COLOUR_AMBER, "%s = %s", comanche_side_mfd_location_names[mfd_location], comanche_side_mfd_mode_names[mfd_mode]);

  00051	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00054	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?comanche_side_mfd_mode_names@@3PAPADA[eax*4]
  0005b	51		 push	 ecx
  0005c	8b 55 0c	 mov	 edx, DWORD PTR _mfd_location$[ebp]
  0005f	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?comanche_side_mfd_location_names@@3PAPADA[edx*4]
  00066	50		 push	 eax
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_07DCHAPOBD@?$CFs?5?$DN?5?$CFs@
  0006c	6a 17		 push	 23			; 00000017H
  0006e	e8 00 00 00 00	 call	 ?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ ; debug_colour_log
  00073	83 c4 10	 add	 esp, 16			; 00000010H

; 14796: 
; 14797: 	mfd_mode_ptr1 = side_mfd_mode_ptrs[mfd_location];

  00076	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00079	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?side_mfd_mode_ptrs@@3PAPAW4COMANCHE_SIDE_MFD_MODES@@A[eax*4]
  00080	89 4d fc	 mov	 DWORD PTR _mfd_mode_ptr1$[ebp], ecx

; 14798: 
; 14799: 	mfd_mode_ptr2 = opposite_side_mfd_mode_ptrs[mfd_location];

  00083	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00086	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?opposite_side_mfd_mode_ptrs@@3PAPAW4COMANCHE_SIDE_MFD_MODES@@A[eax*4]
  0008d	89 4d f8	 mov	 DWORD PTR _mfd_mode_ptr2$[ebp], ecx

; 14800: 
; 14801: 	if ((mfd_mode == COMANCHE_SIDE_MFD_MODE_DAMAGED) && (*mfd_mode_ptr1 == COMANCHE_SIDE_MFD_MODE_OFF))

  00090	83 7d 08 01	 cmp	 DWORD PTR _mfd_mode$[ebp], 1
  00094	75 0f		 jne	 SHORT $LN6@select_com
  00096	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode_ptr1$[ebp]
  00099	83 38 00	 cmp	 DWORD PTR [eax], 0
  0009c	75 07		 jne	 SHORT $LN6@select_com

; 14802: 	{
; 14803: 		mfd_mode = COMANCHE_SIDE_MFD_MODE_OFF;

  0009e	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 0
$LN6@select_com:

; 14804: 	}
; 14805: 
; 14806: 	if (get_side_mfd_damage (mfd_location))

  000a5	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?get_side_mfd_damage@@YGHW4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ; get_side_mfd_damage
  000ae	85 c0		 test	 eax, eax
  000b0	74 0d		 je	 SHORT $LN7@select_com

; 14807: 	{
; 14808: 		if (mfd_mode != COMANCHE_SIDE_MFD_MODE_OFF)

  000b2	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  000b6	74 07		 je	 SHORT $LN7@select_com

; 14809: 		{
; 14810: 			mfd_mode = COMANCHE_SIDE_MFD_MODE_DAMAGED;

  000b8	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 1
$LN7@select_com:

; 14811: 		}
; 14812: 	}
; 14813: 
; 14814: 	if ((mfd_mode != COMANCHE_SIDE_MFD_MODE_OFF) && (mfd_mode != COMANCHE_SIDE_MFD_MODE_DAMAGED) && (mfd_mode == *mfd_mode_ptr2))

  000bf	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  000c3	74 19		 je	 SHORT $LN9@select_com
  000c5	83 7d 08 01	 cmp	 DWORD PTR _mfd_mode$[ebp], 1
  000c9	74 13		 je	 SHORT $LN9@select_com
  000cb	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  000ce	8b 4d 08	 mov	 ecx, DWORD PTR _mfd_mode$[ebp]
  000d1	3b 08		 cmp	 ecx, DWORD PTR [eax]
  000d3	75 09		 jne	 SHORT $LN9@select_com

; 14815: 	{
; 14816: 		*mfd_mode_ptr2 = COMANCHE_SIDE_MFD_MODE_OFF;

  000d5	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  000d8	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN9@select_com:

; 14817: 	}
; 14818: 
; 14819: 	*mfd_mode_ptr1 = mfd_mode;

  000de	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode_ptr1$[ebp]
  000e1	8b 4d 08	 mov	 ecx, DWORD PTR _mfd_mode$[ebp]
  000e4	89 08		 mov	 DWORD PTR [eax], ecx

; 14820: }

  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi
  000e8	5b		 pop	 ebx
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 08 00	 ret	 8
?select_comanche_side_mfd_mode@@YGXW4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ENDP ; select_comanche_side_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_default_mfd_mode$ = -12				; size = 4
_mfd_mode_ptr2$ = -8					; size = 4
_mfd_mode_ptr1$ = -4					; size = 4
_mfd_mode$ = 8						; size = 4
_mfd_location$ = 12					; size = 4
?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z PROC ; select_comanche_main_mfd_mode, COMDAT

; 14735: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 14736: 	comanche_main_mfd_modes
; 14737: 		*mfd_mode_ptr1,
; 14738: 		*mfd_mode_ptr2,
; 14739: 		default_mfd_mode;
; 14740: 
; 14741: 	ASSERT (comanche_main_mfd_mode_valid (mfd_mode));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@select_com
  0000f	83 7d 08 0e	 cmp	 DWORD PTR _mfd_mode$[ebp], 14 ; 0000000eH
  00013	7c 18		 jl	 SHORT $LN2@select_com
$LN3@select_com:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 06	 add	 eax, 6
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FGMPFPHJ@comanche_main_mfd_mode_valid?5?$CIm@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_com:

; 14742: 
; 14743: 	ASSERT (comanche_main_mfd_location_valid (mfd_location));

  0002d	83 7d 0c 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  00031	7c 06		 jl	 SHORT $LN5@select_com
  00033	83 7d 0c 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00037	7c 18		 jl	 SHORT $LN4@select_com
$LN5@select_com:
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0003e	83 c0 08	 add	 eax, 8
  00041	50		 push	 eax
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@GBKBAHOG@comanche_main_mfd_location_vali@
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@select_com:

; 14744: 
; 14745: 	debug_colour_log (DEBUG_COLOUR_AMBER, "%s = %s", comanche_main_mfd_location_names[mfd_location], comanche_main_mfd_mode_names[mfd_mode]);

  00051	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00054	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?comanche_main_mfd_mode_names@@3PAPADA[eax*4]
  0005b	51		 push	 ecx
  0005c	8b 55 0c	 mov	 edx, DWORD PTR _mfd_location$[ebp]
  0005f	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?comanche_main_mfd_location_names@@3PAPADA[edx*4]
  00066	50		 push	 eax
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_07DCHAPOBD@?$CFs?5?$DN?5?$CFs@
  0006c	6a 17		 push	 23			; 00000017H
  0006e	e8 00 00 00 00	 call	 ?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ ; debug_colour_log
  00073	83 c4 10	 add	 esp, 16			; 00000010H

; 14746: 
; 14747: 	mfd_mode_ptr1 = main_mfd_mode_ptrs[mfd_location];

  00076	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00079	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?main_mfd_mode_ptrs@@3PAPAW4COMANCHE_MAIN_MFD_MODES@@A[eax*4]
  00080	89 4d fc	 mov	 DWORD PTR _mfd_mode_ptr1$[ebp], ecx

; 14748: 
; 14749: 	mfd_mode_ptr2 = opposite_main_mfd_mode_ptrs[mfd_location];

  00083	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00086	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?opposite_main_mfd_mode_ptrs@@3PAPAW4COMANCHE_MAIN_MFD_MODES@@A[eax*4]
  0008d	89 4d f8	 mov	 DWORD PTR _mfd_mode_ptr2$[ebp], ecx

; 14750: 
; 14751: 	if ((mfd_mode == COMANCHE_MAIN_MFD_MODE_DAMAGED) && (*mfd_mode_ptr1 == COMANCHE_MAIN_MFD_MODE_OFF))

  00090	83 7d 08 01	 cmp	 DWORD PTR _mfd_mode$[ebp], 1
  00094	75 0f		 jne	 SHORT $LN6@select_com
  00096	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode_ptr1$[ebp]
  00099	83 38 00	 cmp	 DWORD PTR [eax], 0
  0009c	75 07		 jne	 SHORT $LN6@select_com

; 14752: 	{
; 14753: 		mfd_mode = COMANCHE_MAIN_MFD_MODE_OFF;

  0009e	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 0
$LN6@select_com:

; 14754: 	}
; 14755: 
; 14756: 	if (get_main_mfd_damage (mfd_location))

  000a5	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?get_main_mfd_damage@@YGHW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; get_main_mfd_damage
  000ae	85 c0		 test	 eax, eax
  000b0	74 0d		 je	 SHORT $LN7@select_com

; 14757: 	{
; 14758: 		if (mfd_mode != COMANCHE_MAIN_MFD_MODE_OFF)

  000b2	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  000b6	74 07		 je	 SHORT $LN7@select_com

; 14759: 		{
; 14760: 			mfd_mode = COMANCHE_MAIN_MFD_MODE_DAMAGED;

  000b8	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 1
$LN7@select_com:

; 14761: 		}
; 14762: 	}
; 14763: 
; 14764: 	if ((mfd_mode != COMANCHE_MAIN_MFD_MODE_OFF) && (mfd_mode != COMANCHE_MAIN_MFD_MODE_DAMAGED) && (mfd_mode == *mfd_mode_ptr2))

  000bf	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  000c3	74 5f		 je	 SHORT $LN9@select_com
  000c5	83 7d 08 01	 cmp	 DWORD PTR _mfd_mode$[ebp], 1
  000c9	74 59		 je	 SHORT $LN9@select_com
  000cb	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  000ce	8b 4d 08	 mov	 ecx, DWORD PTR _mfd_mode$[ebp]
  000d1	3b 08		 cmp	 ecx, DWORD PTR [eax]
  000d3	75 4f		 jne	 SHORT $LN9@select_com

; 14765: 	{
; 14766: 		default_mfd_mode = get_default_main_mfd_mode (opposite_main_mfd_locations[mfd_location]);

  000d5	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  000d8	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?opposite_main_mfd_locations@@3PAW4COMANCHE_MAIN_MFD_LOCATIONS@@A[eax*4]
  000df	51		 push	 ecx
  000e0	e8 00 00 00 00	 call	 ?get_default_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; get_default_main_mfd_mode
  000e5	89 45 f4	 mov	 DWORD PTR _default_mfd_mode$[ebp], eax

; 14767: 
; 14768: 		if (default_mfd_mode == mfd_mode)

  000e8	8b 45 f4	 mov	 eax, DWORD PTR _default_mfd_mode$[ebp]
  000eb	3b 45 08	 cmp	 eax, DWORD PTR _mfd_mode$[ebp]
  000ee	75 2c		 jne	 SHORT $LN10@select_com

; 14769: 		{
; 14770: 			default_mfd_mode = get_default_main_mfd_mode (mfd_location);

  000f0	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 ?get_default_main_mfd_mode@@YG?AW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; get_default_main_mfd_mode
  000f9	89 45 f4	 mov	 DWORD PTR _default_mfd_mode$[ebp], eax

; 14771: 
; 14772: 			ASSERT (default_mfd_mode != mfd_mode);

  000fc	8b 45 f4	 mov	 eax, DWORD PTR _default_mfd_mode$[ebp]
  000ff	3b 45 08	 cmp	 eax, DWORD PTR _mfd_mode$[ebp]
  00102	75 18		 jne	 SHORT $LN10@select_com
  00104	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  00109	83 c0 25	 add	 eax, 37			; 00000025H
  0010c	50		 push	 eax
  0010d	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00112	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@OAODKMFN@default_mfd_mode?5?$CB?$DN?5mfd_mode@
  00117	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@select_com:

; 14773: 		}
; 14774: 
; 14775: 		*mfd_mode_ptr2 = default_mfd_mode;

  0011c	8b 45 f8	 mov	 eax, DWORD PTR _mfd_mode_ptr2$[ebp]
  0011f	8b 4d f4	 mov	 ecx, DWORD PTR _default_mfd_mode$[ebp]
  00122	89 08		 mov	 DWORD PTR [eax], ecx
$LN9@select_com:

; 14776: 	}
; 14777: 
; 14778: 	*mfd_mode_ptr1 = mfd_mode;

  00124	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode_ptr1$[ebp]
  00127	8b 4d 08	 mov	 ecx, DWORD PTR _mfd_mode$[ebp]
  0012a	89 08		 mov	 DWORD PTR [eax], ecx

; 14779: }

  0012c	5f		 pop	 edi
  0012d	5e		 pop	 esi
  0012e	5b		 pop	 ebx
  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c2 08 00	 ret	 8
?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ENDP ; select_comanche_main_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?get_comanche_main_mfd_has_focus@@YGHW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv83 = -76						; size = 4
tv81 = -76						; size = 4
tv79 = -76						; size = 4
tv77 = -76						; size = 4
tv75 = -76						; size = 4
tv73 = -76						; size = 4
_mfd_mode$ = -8						; size = 4
_result$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?get_comanche_main_mfd_has_focus@@YGHW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z PROC ; get_comanche_main_mfd_has_focus, COMDAT

; 14427: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 14428: 	int
; 14429: 		result;
; 14430: 
; 14431: 	comanche_main_mfd_modes
; 14432: 		mfd_mode;
; 14433: 
; 14434: 	ASSERT (comanche_main_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@get_comanc
  0000f	83 7d 08 04	 cmp	 DWORD PTR _mfd_location$[ebp], 4
  00013	7c 18		 jl	 SHORT $LN4@get_comanc
$LN5@get_comanc:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_comanche_main_mfd_has_focus@@YGHW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 07	 add	 eax, 7
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@GBKBAHOG@comanche_main_mfd_location_vali@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_comanc:

; 14435: 
; 14436: 	mfd_mode = *main_mfd_mode_ptrs[mfd_location];

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?main_mfd_mode_ptrs@@3PAPAW4COMANCHE_MAIN_MFD_MODES@@A[eax*4]
  00037	8b 11		 mov	 edx, DWORD PTR [ecx]
  00039	89 55 f8	 mov	 DWORD PTR _mfd_mode$[ebp], edx

; 14437: 
; 14438: 	switch (target_acquisition_system)

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; target_acquisition_system
  00041	89 45 b4	 mov	 DWORD PTR tv73[ebp], eax
  00044	8b 4d b4	 mov	 ecx, DWORD PTR tv73[ebp]
  00047	83 e9 01	 sub	 ecx, 1
  0004a	89 4d b4	 mov	 DWORD PTR tv73[ebp], ecx
  0004d	83 7d b4 04	 cmp	 DWORD PTR tv73[ebp], 4
  00051	0f 87 a0 00 00
	00		 ja	 $LN11@get_comanc
  00057	8b 55 b4	 mov	 edx, DWORD PTR tv73[ebp]
  0005a	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN23@get_comanc[edx*4]
$LN6@get_comanc:

; 14439: 	{
; 14440: 		////////////////////////////////////////
; 14441: 		case TARGET_ACQUISITION_SYSTEM_GROUND_RADAR:
; 14442: 		////////////////////////////////////////
; 14443: 		{
; 14444: 			result = (mfd_mode == COMANCHE_MAIN_MFD_MODE_GROUND_RADAR);

  00061	83 7d f8 02	 cmp	 DWORD PTR _mfd_mode$[ebp], 2
  00065	75 09		 jne	 SHORT $LN13@get_comanc
  00067	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv75[ebp], 1
  0006e	eb 07		 jmp	 SHORT $LN14@get_comanc
$LN13@get_comanc:
  00070	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$LN14@get_comanc:
  00077	8b 45 b4	 mov	 eax, DWORD PTR tv75[ebp]
  0007a	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 14445: 
; 14446: 			break;

  0007d	eb 7f		 jmp	 SHORT $LN2@get_comanc
$LN7@get_comanc:

; 14447: 		}
; 14448: 		////////////////////////////////////////
; 14449: 		case TARGET_ACQUISITION_SYSTEM_AIR_RADAR:
; 14450: 		////////////////////////////////////////
; 14451: 		{
; 14452: 			result = (mfd_mode == COMANCHE_MAIN_MFD_MODE_AIR_RADAR);

  0007f	83 7d f8 03	 cmp	 DWORD PTR _mfd_mode$[ebp], 3
  00083	75 09		 jne	 SHORT $LN15@get_comanc
  00085	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv77[ebp], 1
  0008c	eb 07		 jmp	 SHORT $LN16@get_comanc
$LN15@get_comanc:
  0008e	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv77[ebp], 0
$LN16@get_comanc:
  00095	8b 45 b4	 mov	 eax, DWORD PTR tv77[ebp]
  00098	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 14453: 
; 14454: 			break;

  0009b	eb 61		 jmp	 SHORT $LN2@get_comanc
$LN8@get_comanc:

; 14455: 		}
; 14456: 		////////////////////////////////////////
; 14457: 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 14458: 		////////////////////////////////////////
; 14459: 		{
; 14460: 			result = (mfd_mode == COMANCHE_MAIN_MFD_MODE_FLIR);

  0009d	83 7d f8 04	 cmp	 DWORD PTR _mfd_mode$[ebp], 4
  000a1	75 09		 jne	 SHORT $LN17@get_comanc
  000a3	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv79[ebp], 1
  000aa	eb 07		 jmp	 SHORT $LN18@get_comanc
$LN17@get_comanc:
  000ac	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$LN18@get_comanc:
  000b3	8b 45 b4	 mov	 eax, DWORD PTR tv79[ebp]
  000b6	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 14461: 
; 14462: 			break;

  000b9	eb 43		 jmp	 SHORT $LN2@get_comanc
$LN9@get_comanc:

; 14463: 		}
; 14464: 		////////////////////////////////////////
; 14465: 		case TARGET_ACQUISITION_SYSTEM_DTV:
; 14466: 		////////////////////////////////////////
; 14467: 		{
; 14468: 			result = (mfd_mode == COMANCHE_MAIN_MFD_MODE_DTV);

  000bb	83 7d f8 05	 cmp	 DWORD PTR _mfd_mode$[ebp], 5
  000bf	75 09		 jne	 SHORT $LN19@get_comanc
  000c1	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv81[ebp], 1
  000c8	eb 07		 jmp	 SHORT $LN20@get_comanc
$LN19@get_comanc:
  000ca	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN20@get_comanc:
  000d1	8b 45 b4	 mov	 eax, DWORD PTR tv81[ebp]
  000d4	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 14469: 
; 14470: 			break;

  000d7	eb 25		 jmp	 SHORT $LN2@get_comanc
$LN10@get_comanc:

; 14471: 		}
; 14472: 		////////////////////////////////////////
; 14473: 		case TARGET_ACQUISITION_SYSTEM_DVO:
; 14474: 		////////////////////////////////////////
; 14475: 		{
; 14476: 			result = (mfd_mode == COMANCHE_MAIN_MFD_MODE_DVO);

  000d9	83 7d f8 06	 cmp	 DWORD PTR _mfd_mode$[ebp], 6
  000dd	75 09		 jne	 SHORT $LN21@get_comanc
  000df	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv83[ebp], 1
  000e6	eb 07		 jmp	 SHORT $LN22@get_comanc
$LN21@get_comanc:
  000e8	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN22@get_comanc:
  000ef	8b 45 b4	 mov	 eax, DWORD PTR tv83[ebp]
  000f2	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 14477: 
; 14478: 			break;

  000f5	eb 07		 jmp	 SHORT $LN2@get_comanc
$LN11@get_comanc:

; 14479: 		}
; 14480: 		////////////////////////////////////////
; 14481: 		default:
; 14482: 		////////////////////////////////////////
; 14483: 		{
; 14484: 			result = FALSE;

  000f7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0
$LN2@get_comanc:

; 14485: 
; 14486: 			break;
; 14487: 		}
; 14488: 	}
; 14489: 
; 14490: 	return (result);

  000fe	8b 45 fc	 mov	 eax, DWORD PTR _result$[ebp]

; 14491: }

  00101	5f		 pop	 edi
  00102	5e		 pop	 esi
  00103	5b		 pop	 ebx
  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c2 04 00	 ret	 4
  0010a	66 90		 npad	 2
$LN23@get_comanc:
  0010c	00 00 00 00	 DD	 $LN6@get_comanc
  00110	00 00 00 00	 DD	 $LN7@get_comanc
  00114	00 00 00 00	 DD	 $LN8@get_comanc
  00118	00 00 00 00	 DD	 $LN9@get_comanc
  0011c	00 00 00 00	 DD	 $LN10@get_comanc
?get_comanche_main_mfd_has_focus@@YGHW4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ENDP ; get_comanche_main_mfd_has_focus
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_overlaid_comanche_mfd@@YGXXZ
_TEXT	SEGMENT
?draw_overlaid_comanche_mfd@@YGXXZ PROC			; draw_overlaid_comanche_mfd, COMDAT

; 14275: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 14276: 	////////////////////////////////////////
; 14277: 	//
; 14278: 	// SELECT LARGE OR SMALL MFD TEXTURES
; 14279: 	//
; 14280: 	////////////////////////////////////////
; 14281: 
; 14282: //   if (application_video_width >= 1280)
; 14283:    {
; 14284:       draw_large_mfd = TRUE;

  00009	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 1

; 14285: 
; 14286:       pilot_lhs_main_mfd_texture_screen = large_pilot_lhs_main_mfd_texture_screen;

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  00018	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 14287:       pilot_rhs_main_mfd_texture_screen = large_pilot_rhs_main_mfd_texture_screen;

  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  00022	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 14288:       pilot_lhs_side_mfd_texture_screen = large_pilot_lhs_side_mfd_texture_screen;

  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  0002c	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 14289:       pilot_rhs_side_mfd_texture_screen = large_pilot_rhs_side_mfd_texture_screen;

  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  00036	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 14290:       pilot_text_display_texture_screen = large_pilot_text_display_texture_screen;

  0003b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_text_display_texture_screen@@3PAUSCREEN@@A
  00040	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_text_display_texture_screen@@3PAUSCREEN@@A, eax

; 14291: 
; 14292:       co_pilot_lhs_main_mfd_texture_screen = large_co_pilot_lhs_main_mfd_texture_screen;

  00045	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  0004a	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 14293:       co_pilot_rhs_main_mfd_texture_screen = large_co_pilot_rhs_main_mfd_texture_screen;

  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  00054	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 14294:       co_pilot_lhs_side_mfd_texture_screen = large_co_pilot_lhs_side_mfd_texture_screen;

  00059	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  0005e	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 14295:       co_pilot_rhs_side_mfd_texture_screen = large_co_pilot_rhs_side_mfd_texture_screen;

  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  00068	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 14296:       co_pilot_text_display_texture_screen = large_co_pilot_text_display_texture_screen;

  0006d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_text_display_texture_screen@@3PAUSCREEN@@A
  00072	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_text_display_texture_screen@@3PAUSCREEN@@A, eax

; 14297: 
; 14298:       eo_3d_texture_screen = large_eo_3d_texture_screen;

  00077	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_eo_3d_texture_screen@@3PAUSCREEN@@A ; large_eo_3d_texture_screen
  0007c	a3 00 00 00 00	 mov	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, eax

; 14299:    }
; 14300: /*   else
; 14301:    {
; 14302:       draw_large_mfd = FALSE;
; 14303: 
; 14304:       pilot_lhs_main_mfd_texture_screen = small_pilot_lhs_main_mfd_texture_screen;
; 14305:       pilot_rhs_main_mfd_texture_screen = small_pilot_rhs_main_mfd_texture_screen;
; 14306:       pilot_lhs_side_mfd_texture_screen = small_pilot_lhs_side_mfd_texture_screen;
; 14307:       pilot_rhs_side_mfd_texture_screen = small_pilot_rhs_side_mfd_texture_screen;
; 14308:       pilot_text_display_texture_screen = small_pilot_text_display_texture_screen;
; 14309: 
; 14310:       co_pilot_lhs_main_mfd_texture_screen = small_co_pilot_lhs_main_mfd_texture_screen;
; 14311:       co_pilot_rhs_main_mfd_texture_screen = small_co_pilot_rhs_main_mfd_texture_screen;
; 14312:       co_pilot_lhs_side_mfd_texture_screen = small_co_pilot_lhs_side_mfd_texture_screen;
; 14313:       co_pilot_rhs_side_mfd_texture_screen = small_co_pilot_rhs_side_mfd_texture_screen;
; 14314:       co_pilot_text_display_texture_screen = small_co_pilot_text_display_texture_screen;
; 14315: 
; 14316:       eo_3d_texture_screen = small_eo_3d_texture_screen;
; 14317:    }
; 14318: */
; 14319: 	set_system_texture_screen (pilot_lhs_main_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD2);

  00081	68 55 06 00 00	 push	 1621			; 00000655H
  00086	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 14320: 	set_system_texture_screen (pilot_rhs_main_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD3);

  00091	68 56 06 00 00	 push	 1622			; 00000656H
  00096	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 14321: 	set_system_texture_screen (pilot_lhs_side_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD1);

  000a1	68 54 06 00 00	 push	 1620			; 00000654H
  000a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 14322: 	set_system_texture_screen (pilot_rhs_side_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD4);

  000b1	68 57 06 00 00	 push	 1623			; 00000657H
  000b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 14323: 	set_system_texture_screen (pilot_text_display_texture_screen, TEXTURE_INDEX_COMANCHE_TEXT);

  000c1	68 5d 06 00 00	 push	 1629			; 0000065dH
  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_text_display_texture_screen@@3PAUSCREEN@@A
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 14324: 
; 14325: 	set_system_texture_screen (co_pilot_lhs_main_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD6);

  000d1	68 59 06 00 00	 push	 1625			; 00000659H
  000d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 14326: 	set_system_texture_screen (co_pilot_rhs_main_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD7);

  000e1	68 5a 06 00 00	 push	 1626			; 0000065aH
  000e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  000eb	50		 push	 eax
  000ec	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 14327: 	set_system_texture_screen (co_pilot_lhs_side_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD5);

  000f1	68 58 06 00 00	 push	 1624			; 00000658H
  000f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 14328: 	set_system_texture_screen (co_pilot_rhs_side_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD8);

  00101	68 5b 06 00 00	 push	 1627			; 0000065bH
  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 14329: 	set_system_texture_screen (co_pilot_text_display_texture_screen, TEXTURE_INDEX_COMANCHE_TEXT2);

  00111	68 5e 06 00 00	 push	 1630			; 0000065eH
  00116	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_text_display_texture_screen@@3PAUSCREEN@@A
  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 14330: 
; 14331: 	////////////////////////////////////////
; 14332: 	//
; 14333: 	// SELECT VISIBLE DISPLAYS
; 14334: 	//
; 14335: 	////////////////////////////////////////
; 14336: 
; 14337:    if (get_crew_role () == CREW_ROLE_PILOT)

  00121	e8 00 00 00 00	 call	 ?get_crew_role@@YG?AW4CREW_ROLES@@XZ ; get_crew_role
  00126	85 c0		 test	 eax, eax
  00128	75 0c		 jne	 SHORT $LN2@draw_overl

; 14338:    {
; 14339:       display_mask = PILOT_LHS_MAIN_MFD | PILOT_RHS_MAIN_MFD;

  0012a	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?display_mask@@3HA, 3

; 14340:    }
; 14341:    else

  00134	eb 0a		 jmp	 SHORT $LN3@draw_overl
$LN2@draw_overl:

; 14342:    {
; 14343:       display_mask = CO_PILOT_LHS_MAIN_MFD | CO_PILOT_RHS_MAIN_MFD;

  00136	c7 05 00 00 00
	00 60 00 00 00	 mov	 DWORD PTR ?display_mask@@3HA, 96 ; 00000060H
$LN3@draw_overl:

; 14344:    }
; 14345: 
; 14346: 	////////////////////////////////////////
; 14347: 	//
; 14348: 	// SET UP MFD 2D ENVIRONMENT
; 14349: 	//
; 14350: 	////////////////////////////////////////
; 14351: 
; 14352: 	set_2d_active_environment (mfd_env);

  00140	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00145	50		 push	 eax
  00146	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 14353: 
; 14354: 	//
; 14355: 	// window
; 14356: 	//
; 14357: 
; 14358: 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  0014b	51		 push	 ecx
  0014c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00154	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00159	51		 push	 ecx
  0015a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00162	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00167	51		 push	 ecx
  00168	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00170	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00175	51		 push	 ecx
  00176	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0017e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00183	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00188	50		 push	 eax
  00189	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 14359: 
; 14360: 	//
; 14361: 	// viewport
; 14362: 	//
; 14363: 
; 14364: 	if (draw_large_mfd)

  0018e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00195	74 1c		 je	 SHORT $LN4@draw_overl

; 14365: 	{
; 14366: 		mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  00197	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  0019f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 14367: 
; 14368: 		int_mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  001a7	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?int_mfd_viewport_size@@3HA, 256 ; 00000100H

; 14369: 	}
; 14370: 	else

  001b1	eb 1a		 jmp	 SHORT $LN5@draw_overl
$LN4@draw_overl:

; 14371: 	{
; 14372: 		mfd_viewport_size = SMALL_MFD_VIEWPORT_SIZE;

  001b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  001bb	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 14373: 
; 14374: 		int_mfd_viewport_size = SMALL_MFD_VIEWPORT_SIZE;

  001c3	c7 05 00 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?int_mfd_viewport_size@@3HA, 128 ; 00000080H
$LN5@draw_overl:

; 14375: 	}
; 14376: 
; 14377: 	mfd_viewport_x_org = mfd_viewport_size * 0.5;

  001cd	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  001d5	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  001dd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001e1	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 14378: 
; 14379: 	mfd_viewport_y_org = mfd_viewport_size * 0.5;

  001e9	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  001f1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  001f9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001fd	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 14380: 
; 14381: 	mfd_viewport_x_min = 0.0;

  00205	0f 57 c0	 xorps	 xmm0, xmm0
  00208	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 14382: 
; 14383: 	mfd_viewport_y_min = 0.0;

  00210	0f 57 c0	 xorps	 xmm0, xmm0
  00213	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 14384: 
; 14385: 	mfd_viewport_x_max = mfd_viewport_size - 0.001;

  0021b	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00223	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0022b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0022f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 14386: 
; 14387: 	mfd_viewport_y_max = mfd_viewport_size - 0.001;

  00237	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  0023f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00247	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0024b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 14388: 
; 14389: 	////////////////////////////////////////
; 14390: 	//
; 14391: 	// DRAW DISPLAYS
; 14392: 	//
; 14393: 	////////////////////////////////////////
; 14394: 
; 14395: 	if (display_mask & PILOT_LHS_MAIN_MFD)

  00253	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  00258	83 e0 01	 and	 eax, 1
  0025b	74 14		 je	 SHORT $LN6@draw_overl

; 14396: 	{
; 14397:       draw_overlaid_main_mfd (pilot_lhs_main_mfd_texture_screen, pilot_lhs_main_mfd_mode, COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS);

  0025d	6a 00		 push	 0
  0025f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A
  00264	50		 push	 eax
  00265	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  0026b	51		 push	 ecx
  0026c	e8 00 00 00 00	 call	 ?draw_overlaid_main_mfd@@YGXPAUSCREEN@@W4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; draw_overlaid_main_mfd
$LN6@draw_overl:

; 14398: 	}
; 14399: 
; 14400: 	if (display_mask & PILOT_RHS_MAIN_MFD)

  00271	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  00276	83 e0 02	 and	 eax, 2
  00279	74 14		 je	 SHORT $LN7@draw_overl

; 14401: 	{
; 14402:       draw_overlaid_main_mfd (pilot_rhs_main_mfd_texture_screen, pilot_rhs_main_mfd_mode, COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS);

  0027b	6a 01		 push	 1
  0027d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A
  00282	50		 push	 eax
  00283	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  00289	51		 push	 ecx
  0028a	e8 00 00 00 00	 call	 ?draw_overlaid_main_mfd@@YGXPAUSCREEN@@W4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; draw_overlaid_main_mfd
$LN7@draw_overl:

; 14403: 	}
; 14404: 
; 14405: 	if (display_mask & CO_PILOT_LHS_MAIN_MFD)

  0028f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  00294	83 e0 20	 and	 eax, 32			; 00000020H
  00297	74 14		 je	 SHORT $LN8@draw_overl

; 14406: 	{
; 14407:       draw_overlaid_main_mfd (co_pilot_lhs_main_mfd_texture_screen, co_pilot_lhs_main_mfd_mode, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_LHS);

  00299	6a 02		 push	 2
  0029b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A
  002a0	50		 push	 eax
  002a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?co_pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  002a7	51		 push	 ecx
  002a8	e8 00 00 00 00	 call	 ?draw_overlaid_main_mfd@@YGXPAUSCREEN@@W4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; draw_overlaid_main_mfd
$LN8@draw_overl:

; 14408: 	}
; 14409: 
; 14410: 	if (display_mask & CO_PILOT_RHS_MAIN_MFD)

  002ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  002b2	83 e0 40	 and	 eax, 64			; 00000040H
  002b5	74 14		 je	 SHORT $LN9@draw_overl

; 14411: 	{
; 14412:       draw_overlaid_main_mfd (co_pilot_rhs_main_mfd_texture_screen, co_pilot_rhs_main_mfd_mode, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_RHS);

  002b7	6a 03		 push	 3
  002b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A
  002be	50		 push	 eax
  002bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?co_pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  002c5	51		 push	 ecx
  002c6	e8 00 00 00 00	 call	 ?draw_overlaid_main_mfd@@YGXPAUSCREEN@@W4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; draw_overlaid_main_mfd
$LN9@draw_overl:

; 14413: 	}
; 14414: }

  002cb	5f		 pop	 edi
  002cc	5e		 pop	 esi
  002cd	5b		 pop	 ebx
  002ce	8b e5		 mov	 esp, ebp
  002d0	5d		 pop	 ebp
  002d1	c3		 ret	 0
?draw_overlaid_comanche_mfd@@YGXXZ ENDP			; draw_overlaid_comanche_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_comanche_full_screen_display@@YGXXZ
_TEXT	SEGMENT
tv272 = -340						; size = 4
tv230 = -340						; size = 4
tv73 = -340						; size = 4
tv65 = -340						; size = 4
_store_mfd_colour$1 = -272				; size = 4
_specular$ = -268					; size = 4
_colour$ = -264						; size = 4
_quad$ = -260						; size = 256
_mode$ = -4						; size = 4
?draw_comanche_full_screen_display@@YGXXZ PROC		; draw_comanche_full_screen_display, COMDAT

; 13270: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 13271: 	comanche_main_mfd_modes
; 13272: 		mode;
; 13273: 
; 13274: 	vertex
; 13275: 		quad[4];
; 13276: 
; 13277: 	real_colour
; 13278: 		colour,
; 13279: 		specular;
; 13280: 
; 13281: 	////////////////////////////////////////
; 13282: 	//
; 13283: 	// determine if full screen display is required
; 13284: 	//
; 13285: 	////////////////////////////////////////
; 13286: 
; 13287: 	if (d3d_can_render_to_texture)

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  00013	74 05		 je	 SHORT $LN10@draw_coman

; 13288: 	{
; 13289: 		return;

  00015	e9 bc 0a 00 00	 jmp	 $LN1@draw_coman
$LN10@draw_coman:

; 13290: 	}
; 13291: 
; 13292: 	switch (get_view_mode ())

  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?view_mode@@3W4VIEW_MODES@@A ; view_mode
  0001f	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  00025	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv65[ebp]
  0002b	83 e9 26	 sub	 ecx, 38			; 00000026H
  0002e	89 8d ac fe ff
	ff		 mov	 DWORD PTR tv65[ebp], ecx
  00034	83 bd ac fe ff
	ff 03		 cmp	 DWORD PTR tv65[ebp], 3
  0003b	77 35		 ja	 SHORT $LN15@draw_coman
  0003d	8b 95 ac fe ff
	ff		 mov	 edx, DWORD PTR tv65[ebp]
  00043	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN30@draw_coman[edx*4]
$LN11@draw_coman:

; 13293: 	{
; 13294: 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY:
; 13295: 		{
; 13296: 			mode = pilot_lhs_main_mfd_mode;

  0004a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A
  0004f	89 45 fc	 mov	 DWORD PTR _mode$[ebp], eax

; 13297: 
; 13298: 			break;

  00052	eb 31		 jmp	 SHORT $LN2@draw_coman
$LN12@draw_coman:

; 13299: 		}
; 13300: 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY:
; 13301: 		{
; 13302: 			mode = pilot_rhs_main_mfd_mode;

  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A
  00059	89 45 fc	 mov	 DWORD PTR _mode$[ebp], eax

; 13303: 
; 13304: 			break;

  0005c	eb 27		 jmp	 SHORT $LN2@draw_coman
$LN13@draw_coman:

; 13305: 		}
; 13306: 		case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY:
; 13307: 		{
; 13308: 			mode = co_pilot_lhs_main_mfd_mode;

  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A
  00063	89 45 fc	 mov	 DWORD PTR _mode$[ebp], eax

; 13309: 
; 13310: 			break;

  00066	eb 1d		 jmp	 SHORT $LN2@draw_coman
$LN14@draw_coman:

; 13311: 		}
; 13312: 		case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY:
; 13313: 		{
; 13314: 			mode = co_pilot_rhs_main_mfd_mode;

  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A
  0006d	89 45 fc	 mov	 DWORD PTR _mode$[ebp], eax

; 13315: 
; 13316: 			break;

  00070	eb 13		 jmp	 SHORT $LN2@draw_coman
$LN15@draw_coman:

; 13317: 		}
; 13318: 		default:
; 13319: 		{
; 13320: 			debug_fatal ("Invalid view mode = %d", get_view_mode ());

  00072	a1 00 00 00 00	 mov	 eax, DWORD PTR ?view_mode@@3W4VIEW_MODES@@A ; view_mode
  00077	50		 push	 eax
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KFJLEDAI@Invalid?5view?5mode?5?$DN?5?$CFd@
  0007d	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00082	83 c4 08	 add	 esp, 8
$LN2@draw_coman:

; 13321: 
; 13322: 			break;
; 13323: 		}
; 13324: 	}
; 13325: 
; 13326: 	if (!get_undamaged_eo_display_mode (mode))

  00085	8b 45 fc	 mov	 eax, DWORD PTR _mode$[ebp]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ?get_undamaged_eo_display_mode@@YGHW4COMANCHE_MAIN_MFD_MODES@@@Z ; get_undamaged_eo_display_mode
  0008e	85 c0		 test	 eax, eax
  00090	75 05		 jne	 SHORT $LN16@draw_coman

; 13327: 	{
; 13328: 		return;

  00092	e9 3f 0a 00 00	 jmp	 $LN1@draw_coman
$LN16@draw_coman:

; 13329: 	}
; 13330: 
; 13331: 	////////////////////////////////////////
; 13332: 	//
; 13333: 	// render 3D display
; 13334: 	//
; 13335: 	////////////////////////////////////////
; 13336: 
; 13337: 	switch (get_view_mode ())

  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?view_mode@@3W4VIEW_MODES@@A ; view_mode
  0009c	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv73[ebp], eax
  000a2	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  000a8	83 e9 26	 sub	 ecx, 38			; 00000026H
  000ab	89 8d ac fe ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  000b1	83 bd ac fe ff
	ff 03		 cmp	 DWORD PTR tv73[ebp], 3
  000b8	0f 87 0c 03 00
	00		 ja	 $LN4@draw_coman
  000be	8b 95 ac fe ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  000c4	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN31@draw_coman[edx*4]
$LN17@draw_coman:

; 13338: 	{
; 13339: 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY:
; 13340: 		{
; 13341: 			mfd_screen_x_min = floor ((243.0 * full_screen_width) / 640.0);

  000cb	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  000d3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@406e600000000000
  000db	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  000e3	83 ec 08	 sub	 esp, 8
  000e6	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  000f1	83 c4 08	 add	 esp, 8
  000f4	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_min@@3MA

; 13342: 			mfd_screen_y_min = floor ((40.0 * full_screen_height) / 480.0);

  000fa	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  00102	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4044000000000000
  0010a	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  00112	83 ec 08	 sub	 esp, 8
  00115	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0011a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  00120	83 c4 08	 add	 esp, 8
  00123	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_min@@3MA

; 13343: 
; 13344: 			mfd_screen_x_max = ceil ((499.0 * full_screen_width) / 640.0);

  00129	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  00131	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@407f300000000000
  00139	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  00141	83 ec 08	 sub	 esp, 8
  00144	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00149	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  0014f	83 c4 08	 add	 esp, 8
  00152	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_max@@3MA

; 13345: 			mfd_screen_y_max = ceil ((296.0 * full_screen_height) / 480.0);

  00158	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  00160	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4072800000000000
  00168	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  00170	83 ec 08	 sub	 esp, 8
  00173	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00178	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  0017e	83 c4 08	 add	 esp, 8
  00181	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_max@@3MA

; 13346: 
; 13347: 			break;

  00187	e9 3e 02 00 00	 jmp	 $LN4@draw_coman
$LN18@draw_coman:

; 13348: 		}
; 13349: 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY:
; 13350: 		{
; 13351: 			mfd_screen_x_min = floor ((141.0 * full_screen_width) / 640.0);

  0018c	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  00194	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4061a00000000000
  0019c	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  001a4	83 ec 08	 sub	 esp, 8
  001a7	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  001ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  001b2	83 c4 08	 add	 esp, 8
  001b5	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_min@@3MA

; 13352: 			mfd_screen_y_min = floor ((40.0 * full_screen_height) / 480.0);

  001bb	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  001c3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4044000000000000
  001cb	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  001d3	83 ec 08	 sub	 esp, 8
  001d6	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  001db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  001e1	83 c4 08	 add	 esp, 8
  001e4	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_min@@3MA

; 13353: 
; 13354: 			mfd_screen_x_max = ceil ((397.0 * full_screen_width) / 640.0);

  001ea	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  001f2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4078d00000000000
  001fa	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  00202	83 ec 08	 sub	 esp, 8
  00205	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0020a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  00210	83 c4 08	 add	 esp, 8
  00213	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_max@@3MA

; 13355: 			mfd_screen_y_max = ceil ((296.0 * full_screen_height) / 480.0);

  00219	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  00221	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4072800000000000
  00229	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  00231	83 ec 08	 sub	 esp, 8
  00234	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00239	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  0023f	83 c4 08	 add	 esp, 8
  00242	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_max@@3MA

; 13356: 
; 13357: 			break;

  00248	e9 7d 01 00 00	 jmp	 $LN4@draw_coman
$LN19@draw_coman:

; 13358: 		}
; 13359: 		case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY:
; 13360: 		{
; 13361: 			mfd_screen_x_min = floor ((243.0 * full_screen_width) / 640.0);

  0024d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  00255	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@406e600000000000
  0025d	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  00265	83 ec 08	 sub	 esp, 8
  00268	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0026d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  00273	83 c4 08	 add	 esp, 8
  00276	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_min@@3MA

; 13362: 			mfd_screen_y_min = floor ((40.0 * full_screen_height) / 480.0);

  0027c	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  00284	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4044000000000000
  0028c	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  00294	83 ec 08	 sub	 esp, 8
  00297	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0029c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  002a2	83 c4 08	 add	 esp, 8
  002a5	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_min@@3MA

; 13363: 
; 13364: 			mfd_screen_x_max = ceil ((499.0 * full_screen_width) / 640.0);

  002ab	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  002b3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@407f300000000000
  002bb	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  002c3	83 ec 08	 sub	 esp, 8
  002c6	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  002cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  002d1	83 c4 08	 add	 esp, 8
  002d4	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_max@@3MA

; 13365: 			mfd_screen_y_max = ceil ((296.0 * full_screen_height) / 480.0);

  002da	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  002e2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4072800000000000
  002ea	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  002f2	83 ec 08	 sub	 esp, 8
  002f5	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  002fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  00300	83 c4 08	 add	 esp, 8
  00303	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_max@@3MA

; 13366: 
; 13367: 			break;

  00309	e9 bc 00 00 00	 jmp	 $LN4@draw_coman
$LN20@draw_coman:

; 13368: 		}
; 13369: 		case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY:
; 13370: 		{
; 13371: 			mfd_screen_x_min = floor ((141.0 * full_screen_width) / 640.0);

  0030e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  00316	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4061a00000000000
  0031e	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  00326	83 ec 08	 sub	 esp, 8
  00329	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0032e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  00334	83 c4 08	 add	 esp, 8
  00337	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_min@@3MA

; 13372: 			mfd_screen_y_min = floor ((40.0 * full_screen_height) / 480.0);

  0033d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  00345	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4044000000000000
  0034d	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  00355	83 ec 08	 sub	 esp, 8
  00358	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0035d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  00363	83 c4 08	 add	 esp, 8
  00366	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_min@@3MA

; 13373: 
; 13374: 			mfd_screen_x_max = ceil ((397.0 * full_screen_width) / 640.0);

  0036c	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  00374	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4078d00000000000
  0037c	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  00384	83 ec 08	 sub	 esp, 8
  00387	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0038c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  00392	83 c4 08	 add	 esp, 8
  00395	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_max@@3MA

; 13375: 			mfd_screen_y_max = ceil ((296.0 * full_screen_height) / 480.0);

  0039b	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  003a3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4072800000000000
  003ab	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  003b3	83 ec 08	 sub	 esp, 8
  003b6	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  003bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  003c1	83 c4 08	 add	 esp, 8
  003c4	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_max@@3MA
$LN4@draw_coman:

; 13376: 
; 13377: 			break;
; 13378: 		}
; 13379: 	}
; 13380: 
; 13381: 	//
; 13382: 	// widen by 1 pixel either side to ensure the MFD is covered at all resolutions
; 13383: 	//
; 13384: 
; 13385: 	mfd_screen_x_min -= 1.0;

  003ca	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  003d2	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  003da	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003de	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_min@@3MA, xmm0

; 13386: 	mfd_screen_y_min -= 1.0;

  003e6	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  003ee	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  003f6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003fa	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_min@@3MA, xmm0

; 13387: 
; 13388: 	mfd_screen_x_max += 1.0;

  00402	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  0040a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00412	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00416	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_max@@3MA, xmm0

; 13389: 	mfd_screen_y_max += 1.0;

  0041e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00426	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0042e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00432	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_max@@3MA, xmm0

; 13390: 
; 13391: 	mfd_screen_width = mfd_screen_x_max - mfd_screen_x_min;

  0043a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00442	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  0044a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_width@@3MA, xmm0

; 13392: 	mfd_screen_height = mfd_screen_y_max - mfd_screen_y_min;

  00452	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  0045a	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00462	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_height@@3MA, xmm0

; 13393: 
; 13394: 	mfd_screen_x_max -= 0.001;

  0046a	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00472	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0047a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0047e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_max@@3MA, xmm0

; 13395: 	mfd_screen_y_max -= 0.001;

  00486	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  0048e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00496	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0049a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_max@@3MA, xmm0

; 13396: 
; 13397: 	mfd_screen_x_scale = 256.0 / mfd_screen_width;

  004a2	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_width@@3MA
  004aa	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4070000000000000
  004b2	f2 0f 5e c8	 divsd	 xmm1, xmm0
  004b6	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  004ba	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_scale@@3MA, xmm0

; 13398: 	mfd_screen_y_scale = 256.0 / mfd_screen_height;

  004c2	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_height@@3MA
  004ca	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4070000000000000
  004d2	f2 0f 5e c8	 divsd	 xmm1, xmm0
  004d6	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  004da	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_scale@@3MA, xmm0

; 13399: 
; 13400: 	switch (mode)

  004e2	8b 45 fc	 mov	 eax, DWORD PTR _mode$[ebp]
  004e5	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv230[ebp], eax
  004eb	83 bd ac fe ff
	ff 04		 cmp	 DWORD PTR tv230[ebp], 4
  004f2	74 14		 je	 SHORT $LN21@draw_coman
  004f4	83 bd ac fe ff
	ff 05		 cmp	 DWORD PTR tv230[ebp], 5
  004fb	74 14		 je	 SHORT $LN22@draw_coman
  004fd	83 bd ac fe ff
	ff 06		 cmp	 DWORD PTR tv230[ebp], 6
  00504	74 14		 je	 SHORT $LN23@draw_coman
  00506	eb 19		 jmp	 SHORT $LN6@draw_coman
$LN21@draw_coman:

; 13401: 	{
; 13402: 		case COMANCHE_MAIN_MFD_MODE_FLIR:
; 13403: 		{
; 13404: 			draw_3d_flir_mfd (TRUE);

  00508	6a 01		 push	 1
  0050a	e8 00 00 00 00	 call	 ?draw_3d_flir_mfd@@YGXH@Z ; draw_3d_flir_mfd

; 13405: 
; 13406: 			break;

  0050f	eb 10		 jmp	 SHORT $LN6@draw_coman
$LN22@draw_coman:

; 13407: 		}
; 13408: 		case COMANCHE_MAIN_MFD_MODE_DTV:
; 13409: 		{
; 13410: 			draw_3d_dtv_mfd (TRUE);

  00511	6a 01		 push	 1
  00513	e8 00 00 00 00	 call	 ?draw_3d_dtv_mfd@@YGXH@Z ; draw_3d_dtv_mfd

; 13411: 
; 13412: 			break;

  00518	eb 07		 jmp	 SHORT $LN6@draw_coman
$LN23@draw_coman:

; 13413: 		}
; 13414: 		case COMANCHE_MAIN_MFD_MODE_DVO:
; 13415: 		{
; 13416: 			draw_3d_dvo_mfd (TRUE);

  0051a	6a 01		 push	 1
  0051c	e8 00 00 00 00	 call	 ?draw_3d_dvo_mfd@@YGXH@Z ; draw_3d_dvo_mfd
$LN6@draw_coman:

; 13417: 
; 13418: 			break;
; 13419: 		}
; 13420: 	}
; 13421: 
; 13422: 	////////////////////////////////////////
; 13423: 	//
; 13424: 	// render 2D display
; 13425: 	//
; 13426: 	////////////////////////////////////////
; 13427: 
; 13428: 	set_2d_active_environment (mfd_env);

  00521	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00526	50		 push	 eax
  00527	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 13429: 
; 13430: 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  0052c	51		 push	 ecx
  0052d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00535	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053a	51		 push	 ecx
  0053b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00543	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00548	51		 push	 ecx
  00549	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00551	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00556	51		 push	 ecx
  00557	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0055f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00564	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00569	50		 push	 eax
  0056a	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 13431: 
; 13432: 	draw_large_mfd = TRUE;

  0056f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 1

; 13433: 
; 13434: 	mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  00579	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  00581	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 13435: 
; 13436: 	int_mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  00589	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?int_mfd_viewport_size@@3HA, 256 ; 00000100H

; 13437: 
; 13438: 	mfd_viewport_x_org = LARGE_MFD_VIEWPORT_SIZE * 0.5;

  00593	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  0059b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 13439: 
; 13440: 	mfd_viewport_y_org = LARGE_MFD_VIEWPORT_SIZE * 0.5;

  005a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  005ab	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 13441: 
; 13442: 	mfd_viewport_x_min = 0.0;

  005b3	0f 57 c0	 xorps	 xmm0, xmm0
  005b6	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 13443: 
; 13444: 	mfd_viewport_y_min = 0.0;

  005be	0f 57 c0	 xorps	 xmm0, xmm0
  005c1	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 13445: 
; 13446: 	mfd_viewport_x_max = LARGE_MFD_VIEWPORT_SIZE - 0.001;

  005c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437fffbe
  005d1	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 13447: 
; 13448: 	mfd_viewport_y_max = LARGE_MFD_VIEWPORT_SIZE - 0.001;

  005d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437fffbe
  005e1	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 13449: 
; 13450: 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  005e9	51		 push	 ecx
  005ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  005f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f7	51		 push	 ecx
  005f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00600	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00605	51		 push	 ecx
  00606	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0060e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00613	51		 push	 ecx
  00614	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0061c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00621	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00626	50		 push	 eax
  00627	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 13451: 
; 13452: 	//
; 13453: 	// draw MFD on texture
; 13454: 	//
; 13455: 
; 13456: 	draw_main_display = TRUE;

  0062c	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_main_display@@3HA, 1

; 13457: 
; 13458: 	set_active_screen (full_mfd_texture_screen);

  00636	a1 00 00 00 00	 mov	 eax, DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A
  0063b	50		 push	 eax
  0063c	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 13459: 
; 13460: 	if (lock_screen (full_mfd_texture_screen))

  00641	a1 00 00 00 00	 mov	 eax, DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A
  00646	50		 push	 eax
  00647	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0064c	85 c0		 test	 eax, eax
  0064e	0f 84 d7 00 00
	00		 je	 $LN24@draw_coman

; 13461: 	{
; 13462:       rgb_colour
; 13463:          store_mfd_colour;
; 13464: 
; 13465:       store_mfd_colour = MFD_COLOUR1;

  00654	b8 04 00 00 00	 mov	 eax, 4
  00659	6b c8 00	 imul	 ecx, eax, 0
  0065c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00662	89 95 f0 fe ff
	ff		 mov	 DWORD PTR _store_mfd_colour$1[ebp], edx

; 13466: 
; 13467:       set_rgb_colour (MFD_COLOUR1, 255, 255, 255, 255);

  00668	b8 04 00 00 00	 mov	 eax, 4
  0066d	6b c8 00	 imul	 ecx, eax, 0
  00670	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  00677	b8 04 00 00 00	 mov	 eax, 4
  0067c	6b c8 00	 imul	 ecx, eax, 0
  0067f	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  00686	b8 04 00 00 00	 mov	 eax, 4
  0068b	6b c8 00	 imul	 ecx, eax, 0
  0068e	c6 81 00 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 255 ; 000000ffH
  00695	b8 04 00 00 00	 mov	 eax, 4
  0069a	6b c8 00	 imul	 ecx, eax, 0
  0069d	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 13468: 
; 13469:       set_block (0, 0, LARGE_MFD_VIEWPORT_SIZE - 1, LARGE_MFD_VIEWPORT_SIZE - 1, clear_mfd_colour);

  006a4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  006a9	50		 push	 eax
  006aa	68 ff 00 00 00	 push	 255			; 000000ffH
  006af	68 ff 00 00 00	 push	 255			; 000000ffH
  006b4	6a 00		 push	 0
  006b6	6a 00		 push	 0
  006b8	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 13470: 
; 13471: 		draw_layout_grid ();

  006bd	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 13472: 
; 13473: 		switch (mode)

  006c2	8b 45 fc	 mov	 eax, DWORD PTR _mode$[ebp]
  006c5	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv272[ebp], eax
  006cb	83 bd ac fe ff
	ff 04		 cmp	 DWORD PTR tv272[ebp], 4
  006d2	74 14		 je	 SHORT $LN25@draw_coman
  006d4	83 bd ac fe ff
	ff 05		 cmp	 DWORD PTR tv272[ebp], 5
  006db	74 14		 je	 SHORT $LN26@draw_coman
  006dd	83 bd ac fe ff
	ff 06		 cmp	 DWORD PTR tv272[ebp], 6
  006e4	74 14		 je	 SHORT $LN27@draw_coman
  006e6	eb 19		 jmp	 SHORT $LN8@draw_coman
$LN25@draw_coman:

; 13474: 		{
; 13475: 			case COMANCHE_MAIN_MFD_MODE_FLIR:
; 13476: 			{
; 13477: 				draw_2d_flir_mfd (TRUE);

  006e8	6a 01		 push	 1
  006ea	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXH@Z ; draw_2d_flir_mfd

; 13478: 
; 13479: 				break;

  006ef	eb 10		 jmp	 SHORT $LN8@draw_coman
$LN26@draw_coman:

; 13480: 			}
; 13481: 			case COMANCHE_MAIN_MFD_MODE_DTV:
; 13482: 			{
; 13483: 				draw_2d_dtv_mfd (TRUE);

  006f1	6a 01		 push	 1
  006f3	e8 00 00 00 00	 call	 ?draw_2d_dtv_mfd@@YGXH@Z ; draw_2d_dtv_mfd

; 13484: 
; 13485: 				break;

  006f8	eb 07		 jmp	 SHORT $LN8@draw_coman
$LN27@draw_coman:

; 13486: 			}
; 13487: 			case COMANCHE_MAIN_MFD_MODE_DVO:
; 13488: 			{
; 13489: 				draw_2d_dvo_mfd (TRUE);

  006fa	6a 01		 push	 1
  006fc	e8 00 00 00 00	 call	 ?draw_2d_dvo_mfd@@YGXH@Z ; draw_2d_dvo_mfd
$LN8@draw_coman:

; 13490: 
; 13491: 				break;
; 13492: 			}
; 13493: 		}
; 13494: 
; 13495: 		MFD_COLOUR1 = store_mfd_colour;

  00701	b8 04 00 00 00	 mov	 eax, 4
  00706	6b c8 00	 imul	 ecx, eax, 0
  00709	8b 95 f0 fe ff
	ff		 mov	 edx, DWORD PTR _store_mfd_colour$1[ebp]
  0070f	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 13496: 
; 13497: 		flush_screen_texture_graphics (full_mfd_texture_screen);

  00715	a1 00 00 00 00	 mov	 eax, DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A
  0071a	50		 push	 eax
  0071b	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 13498: 
; 13499: 		unlock_screen (full_mfd_texture_screen);

  00720	a1 00 00 00 00	 mov	 eax, DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A
  00725	50		 push	 eax
  00726	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN24@draw_coman:

; 13500: 	}
; 13501: 
; 13502: 	set_active_screen (video_screen);

  0072b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00730	50		 push	 eax
  00731	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 13503: 
; 13504: 	////////////////////////////////////////
; 13505: 	//
; 13506: 	// render MFD to screen
; 13507: 	//
; 13508: 	////////////////////////////////////////
; 13509: 
; 13510: 	set_3d_active_environment (main_3d_env);

  00736	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  0073b	50		 push	 eax
  0073c	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 13511: 
; 13512: 	if (begin_3d_scene ())

  00741	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  00746	85 c0		 test	 eax, eax
  00748	0f 84 88 03 00
	00		 je	 $LN28@draw_coman

; 13513: 	{
; 13514: 		set_d3d_transparency_on ();

  0074e	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 13515: 
; 13516: 		set_d3d_zbuffer_comparison (FALSE);

  00753	6a 00		 push	 0
  00755	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 13517: 
; 13518: 		set_d3d_culling (FALSE);

  0075a	6a 00		 push	 0
  0075c	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 13519: 
; 13520: 		set_d3d_texture_wrapping (0, FALSE);

  00761	6a 00		 push	 0
  00763	6a 00		 push	 0
  00765	e8 00 00 00 00	 call	 ?set_d3d_texture_wrapping@@YGXHH@Z ; set_d3d_texture_wrapping

; 13521: 
; 13522:       set_d3d_texture_mag_filtering (TRUE);

  0076a	6a 01		 push	 1
  0076c	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 13523:       set_d3d_texture_min_filtering (TRUE);

  00771	6a 01		 push	 1
  00773	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 13524:       set_d3d_texture_mip_filtering (FALSE);

  00778	6a 00		 push	 0
  0077a	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering

; 13525: 
; 13526: 		set_d3d_flat_shaded_textured_renderstate (get_system_texture_ptr (TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD));

  0077f	68 f9 00 00 00	 push	 249			; 000000f9H
  00784	e8 00 00 00 00	 call	 ?get_system_texture_ptr@@YGPAUSCREEN@@H@Z ; get_system_texture_ptr
  00789	50		 push	 eax
  0078a	e8 00 00 00 00	 call	 ?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z ; set_d3d_flat_shaded_textured_renderstate

; 13527: 
; 13528:       ////////////////////////////////////////
; 13529:       //
; 13530: 
; 13531: 		colour.red				= MFD_COLOUR1.r;

  0078f	b8 04 00 00 00	 mov	 eax, 4
  00794	6b c8 00	 imul	 ecx, eax, 0
  00797	8a 91 02 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2]
  0079d	88 95 fa fe ff
	ff		 mov	 BYTE PTR _colour$[ebp+2], dl

; 13532: 		colour.green			= MFD_COLOUR1.g;

  007a3	b8 04 00 00 00	 mov	 eax, 4
  007a8	6b c8 00	 imul	 ecx, eax, 0
  007ab	8a 91 01 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1]
  007b1	88 95 f9 fe ff
	ff		 mov	 BYTE PTR _colour$[ebp+1], dl

; 13533: 		colour.blue				= MFD_COLOUR1.b;

  007b7	b8 04 00 00 00	 mov	 eax, 4
  007bc	6b c8 00	 imul	 ecx, eax, 0
  007bf	8a 91 00 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007c5	88 95 f8 fe ff
	ff		 mov	 BYTE PTR _colour$[ebp], dl

; 13534: 		colour.alpha			= MFD_COLOUR1.a;

  007cb	b8 04 00 00 00	 mov	 eax, 4
  007d0	6b c8 00	 imul	 ecx, eax, 0
  007d3	8a 91 03 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3]
  007d9	88 95 fb fe ff
	ff		 mov	 BYTE PTR _colour$[ebp+3], dl

; 13535: 
; 13536: 		specular.red			= 0;

  007df	c6 85 f6 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+2], 0

; 13537: 		specular.green			= 0;

  007e6	c6 85 f5 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+1], 0

; 13538: 		specular.blue			= 0;

  007ed	c6 85 f4 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp], 0

; 13539: 		specular.alpha			= 255;

  007f4	c6 85 f7 fe ff
	ff ff		 mov	 BYTE PTR _specular$[ebp+3], 255 ; 000000ffH

; 13540: 
; 13541: 		quad[0].i				= mfd_screen_x_min;

  007fb	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00800	6b c8 00	 imul	 ecx, eax, 0
  00803	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  0080b	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 13542: 		quad[0].j	  			= mfd_screen_y_min;

  00814	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00819	6b c8 00	 imul	 ecx, eax, 0
  0081c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00824	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 13543: 		quad[0].z	  			= 0.5;

  0082d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00832	6b c8 00	 imul	 ecx, eax, 0
  00835	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0083d	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 13544: 		quad[0].q	  			= 0.5;

  00846	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0084b	6b c8 00	 imul	 ecx, eax, 0
  0084e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00856	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 13545: 		quad[0].u	  			= 0.0;

  0085f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00864	6b c8 00	 imul	 ecx, eax, 0
  00867	0f 57 c0	 xorps	 xmm0, xmm0
  0086a	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+24], xmm0

; 13546: 		quad[0].v	  			= 0.0;

  00873	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00878	6b c8 00	 imul	 ecx, eax, 0
  0087b	0f 57 c0	 xorps	 xmm0, xmm0
  0087e	f3 0f 11 84 0d
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+28], xmm0

; 13547: 
; 13548: 		quad[1].i				= mfd_screen_x_max;

  00887	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0088c	c1 e0 00	 shl	 eax, 0
  0088f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00897	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 13549: 		quad[1].j  				= mfd_screen_y_min;

  008a0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  008a5	c1 e0 00	 shl	 eax, 0
  008a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  008b0	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 13550: 		quad[1].z  				= 0.5;

  008b9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  008be	c1 e0 00	 shl	 eax, 0
  008c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  008c9	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 13551: 		quad[1].q  				= 0.5;

  008d2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  008d7	c1 e0 00	 shl	 eax, 0
  008da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  008e2	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 13552: 		quad[1].u  				= 1.0;

  008eb	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  008f0	c1 e0 00	 shl	 eax, 0
  008f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  008fb	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+24], xmm0

; 13553: 		quad[1].v  				= 0.0;

  00904	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00909	c1 e0 00	 shl	 eax, 0
  0090c	0f 57 c0	 xorps	 xmm0, xmm0
  0090f	f3 0f 11 84 05
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+28], xmm0

; 13554: 
; 13555: 		quad[2].i				= mfd_screen_x_max;

  00918	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0091d	d1 e0		 shl	 eax, 1
  0091f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00927	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 13556: 		quad[2].j 				= mfd_screen_y_max;

  00930	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00935	d1 e0		 shl	 eax, 1
  00937	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  0093f	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 13557: 		quad[2].z  				= 0.5;

  00948	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0094d	d1 e0		 shl	 eax, 1
  0094f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00957	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 13558: 		quad[2].q  				= 0.5;

  00960	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00965	d1 e0		 shl	 eax, 1
  00967	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0096f	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 13559: 		quad[2].u  				= 1.0;

  00978	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0097d	d1 e0		 shl	 eax, 1
  0097f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00987	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+24], xmm0

; 13560: 		quad[2].v  				= 1.0;

  00990	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00995	d1 e0		 shl	 eax, 1
  00997	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0099f	f3 0f 11 84 05
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+28], xmm0

; 13561: 
; 13562: 		quad[3].i				= mfd_screen_x_min;

  009a8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  009ad	6b c8 03	 imul	 ecx, eax, 3
  009b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  009b8	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 13563: 		quad[3].j				= mfd_screen_y_max;

  009c1	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  009c6	6b c8 03	 imul	 ecx, eax, 3
  009c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  009d1	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 13564: 		quad[3].z				= 0.5;

  009da	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  009df	6b c8 03	 imul	 ecx, eax, 3
  009e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  009ea	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 13565: 		quad[3].q				= 0.5;

  009f3	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  009f8	6b c8 03	 imul	 ecx, eax, 3
  009fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00a03	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 13566: 		quad[3].u				= 0.0;

  00a0c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a11	6b c8 03	 imul	 ecx, eax, 3
  00a14	0f 57 c0	 xorps	 xmm0, xmm0
  00a17	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+24], xmm0

; 13567: 		quad[3].v				= 1.0;

  00a20	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a25	6b c8 03	 imul	 ecx, eax, 3
  00a28	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a30	f3 0f 11 84 0d
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+28], xmm0

; 13568: 
; 13569: 		quad[0].next_vertex	= &quad[1];

  00a39	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a3e	c1 e0 00	 shl	 eax, 0
  00a41	8d 8c 05 fc fe
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  00a48	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00a4d	6b c2 00	 imul	 eax, edx, 0
  00a50	89 8c 05 24 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], ecx

; 13570: 		quad[1].next_vertex	= &quad[2];

  00a57	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a5c	d1 e0		 shl	 eax, 1
  00a5e	8d 8c 05 fc fe
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  00a65	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00a6a	c1 e2 00	 shl	 edx, 0
  00a6d	89 8c 15 24 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+edx+40], ecx

; 13571: 		quad[2].next_vertex	= &quad[3];

  00a74	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a79	6b c8 03	 imul	 ecx, eax, 3
  00a7c	8d 94 0d fc fe
	ff ff		 lea	 edx, DWORD PTR _quad$[ebp+ecx]
  00a83	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a88	d1 e0		 shl	 eax, 1
  00a8a	89 94 05 24 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], edx

; 13572: 		quad[3].next_vertex	= NULL;

  00a91	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a96	6b c8 03	 imul	 ecx, eax, 3
  00a99	c7 84 0d 24 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$[ebp+ecx+40], 0

; 13573: 
; 13574:       //
; 13575:       ////////////////////////////////////////
; 13576: 
; 13577: 		draw_wbuffered_flat_shaded_textured_polygon (quad, colour, specular);

  00aa4	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _specular$[ebp]
  00aaa	50		 push	 eax
  00aab	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _colour$[ebp]
  00ab1	51		 push	 ecx
  00ab2	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _quad$[ebp]
  00ab8	52		 push	 edx
  00ab9	e8 00 00 00 00	 call	 ?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_flat_shaded_textured_polygon

; 13578: 
; 13579: 		set_d3d_transparency_off ();

  00abe	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 13580: 
; 13581: 		set_d3d_zbuffer_comparison (TRUE);

  00ac3	6a 01		 push	 1
  00ac5	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 13582: 
; 13583: 		set_d3d_culling (TRUE);

  00aca	6a 01		 push	 1
  00acc	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 13584: 
; 13585: 		end_3d_scene ();

  00ad1	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN28@draw_coman:
$LN1@draw_coman:

; 13586: 	}
; 13587: }

  00ad6	5f		 pop	 edi
  00ad7	5e		 pop	 esi
  00ad8	5b		 pop	 ebx
  00ad9	8b e5		 mov	 esp, ebp
  00adb	5d		 pop	 ebp
  00adc	c3		 ret	 0
  00add	0f 1f 00	 npad	 3
$LN30@draw_coman:
  00ae0	00 00 00 00	 DD	 $LN11@draw_coman
  00ae4	00 00 00 00	 DD	 $LN12@draw_coman
  00ae8	00 00 00 00	 DD	 $LN13@draw_coman
  00aec	00 00 00 00	 DD	 $LN14@draw_coman
$LN31@draw_coman:
  00af0	00 00 00 00	 DD	 $LN17@draw_coman
  00af4	00 00 00 00	 DD	 $LN18@draw_coman
  00af8	00 00 00 00	 DD	 $LN19@draw_coman
  00afc	00 00 00 00	 DD	 $LN20@draw_coman
?draw_comanche_full_screen_display@@YGXXZ ENDP		; draw_comanche_full_screen_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?set_comanche_text_display_text@@YGXPAD0@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
?set_comanche_text_display_text@@YGXPAD0@Z PROC		; set_comanche_text_display_text, COMDAT

; 13251: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 13252: 	ASSERT (s1);

  00009	83 7d 08 00	 cmp	 DWORD PTR _s1$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@set_comanc
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_comanche_text_display_text@@YGXPAD0@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02JAFEPHFG@s1@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@set_comanc:

; 13253: 
; 13254: 	ASSERT (s2);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _s2$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@set_comanc
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_comanche_text_display_text@@YGXPAD0@Z@4JA
  00032	83 c0 03	 add	 eax, 3
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_02LLHJKEJF@s2@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@set_comanc:

; 13255: 
; 13256: 	strncpy (text_display_line1, s1, TEXT_DISPLAY_MAX_STRING_LENGTH);

  00045	6a 11		 push	 17			; 00000011H
  00047	8b 45 08	 mov	 eax, DWORD PTR _s1$[ebp]
  0004a	50		 push	 eax
  0004b	68 00 00 00 00	 push	 OFFSET ?text_display_line1@@3PADA
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 13257: 
; 13258: 	strncpy (text_display_line2, s2, TEXT_DISPLAY_MAX_STRING_LENGTH);

  00059	6a 11		 push	 17			; 00000011H
  0005b	8b 45 0c	 mov	 eax, DWORD PTR _s2$[ebp]
  0005e	50		 push	 eax
  0005f	68 00 00 00 00	 push	 OFFSET ?text_display_line2@@3PADA
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 13259: 
; 13260: 	text_display_line1[TEXT_DISPLAY_MAX_STRING_LENGTH] = '\0';

  0006d	b8 01 00 00 00	 mov	 eax, 1
  00072	6b c8 11	 imul	 ecx, eax, 17
  00075	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?text_display_line1@@3PADA[ecx], 0

; 13261: 
; 13262: 	text_display_line2[TEXT_DISPLAY_MAX_STRING_LENGTH] = '\0';

  0007c	b8 01 00 00 00	 mov	 eax, 1
  00081	6b c8 11	 imul	 ecx, eax, 17
  00084	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?text_display_line2@@3PADA[ecx], 0

; 13263: }

  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 08 00	 ret	 8
?set_comanche_text_display_text@@YGXPAD0@Z ENDP		; set_comanche_text_display_text
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?draw_comanche_mfd@@YGXXZ
_TEXT	SEGMENT
tv238 = -84						; size = 4
tv226 = -84						; size = 4
tv91 = -84						; size = 4
tv65 = -84						; size = 4
_draw_eo_display$1 = -16				; size = 4
_large_mfd$ = -12					; size = 4
_export_right$ = -8					; size = 4
_export_left$ = -4					; size = 4
?draw_comanche_mfd@@YGXXZ PROC				; draw_comanche_mfd, COMDAT

; 12808: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12809: 	screen *export_left, *export_right;
; 12810: 
; 12811: 	////////////////////////////////////////
; 12812: 	//
; 12813: 	// SELECT LARGE OR SMALL MFD TEXTURES
; 12814: 	//
; 12815: 	////////////////////////////////////////
; 12816: 
; 12817: 	// loke 030420
; 12818: 	// support for high resolution mfd's
; 12819: 	int
; 12820: 		large_mfd;
; 12821: 
; 12822: 	if (!command_line_high_res_mfd)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_high_res_mfd@@3HA, 0 ; command_line_high_res_mfd
  00010	75 28		 jne	 SHORT $LN10@draw_coman

; 12823: 	{
; 12824: 		switch (get_view_mode ())

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?view_mode@@3W4VIEW_MODES@@A ; view_mode
  00017	89 45 ac	 mov	 DWORD PTR tv65[ebp], eax
  0001a	83 7d ac 26	 cmp	 DWORD PTR tv65[ebp], 38	; 00000026H
  0001e	7c 11		 jl	 SHORT $LN13@draw_coman
  00020	83 7d ac 29	 cmp	 DWORD PTR tv65[ebp], 41	; 00000029H
  00024	7e 02		 jle	 SHORT $LN12@draw_coman
  00026	eb 09		 jmp	 SHORT $LN13@draw_coman
$LN12@draw_coman:

; 12825: 		{
; 12826: 			////////////////////////////////////////
; 12827: 			case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY:
; 12828: 			case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY:
; 12829: 			case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY:
; 12830: 			case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY:
; 12831: 			////////////////////////////////////////
; 12832: 			{
; 12833: 
; 12834: 				large_mfd = 1;

  00028	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _large_mfd$[ebp], 1

; 12835: 
; 12836: 				break;

  0002f	eb 07		 jmp	 SHORT $LN2@draw_coman
$LN13@draw_coman:

; 12837: 			}
; 12838: 			////////////////////////////////////////
; 12839: 			default:
; 12840: 			////////////////////////////////////////
; 12841: 			{
; 12842: 
; 12843: 				large_mfd = 0;

  00031	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _large_mfd$[ebp], 0
$LN2@draw_coman:

; 12844: 
; 12845: 				break;
; 12846: 			}
; 12847: 		}
; 12848: 	}
; 12849: 	else

  00038	eb 07		 jmp	 SHORT $LN11@draw_coman
$LN10@draw_coman:

; 12850: 	{
; 12851: 		large_mfd = 1;

  0003a	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _large_mfd$[ebp], 1
$LN11@draw_coman:

; 12852: 	}
; 12853: 
; 12854: 	if (large_mfd)

  00041	83 7d f4 00	 cmp	 DWORD PTR _large_mfd$[ebp], 0
  00045	74 7a		 je	 SHORT $LN14@draw_coman

; 12855: 	{
; 12856: 		draw_large_mfd = TRUE;

  00047	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 1

; 12857: 
; 12858: 		pilot_lhs_main_mfd_texture_screen = large_pilot_lhs_main_mfd_texture_screen;

  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  00056	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12859: 		pilot_rhs_main_mfd_texture_screen = large_pilot_rhs_main_mfd_texture_screen;

  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  00060	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12860: 		pilot_lhs_side_mfd_texture_screen = large_pilot_lhs_side_mfd_texture_screen;

  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  0006a	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12861: 		pilot_rhs_side_mfd_texture_screen = large_pilot_rhs_side_mfd_texture_screen;

  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  00074	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12862: 		pilot_text_display_texture_screen = large_pilot_text_display_texture_screen;

  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_text_display_texture_screen@@3PAUSCREEN@@A
  0007e	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_text_display_texture_screen@@3PAUSCREEN@@A, eax

; 12863: 
; 12864: 		co_pilot_lhs_main_mfd_texture_screen = large_co_pilot_lhs_main_mfd_texture_screen;

  00083	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  00088	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12865: 		co_pilot_rhs_main_mfd_texture_screen = large_co_pilot_rhs_main_mfd_texture_screen;

  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  00092	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12866: 		co_pilot_lhs_side_mfd_texture_screen = large_co_pilot_lhs_side_mfd_texture_screen;

  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  0009c	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12867: 		co_pilot_rhs_side_mfd_texture_screen = large_co_pilot_rhs_side_mfd_texture_screen;

  000a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  000a6	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12868: 		co_pilot_text_display_texture_screen = large_co_pilot_text_display_texture_screen;

  000ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_text_display_texture_screen@@3PAUSCREEN@@A
  000b0	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_text_display_texture_screen@@3PAUSCREEN@@A, eax

; 12869: 
; 12870: 		eo_3d_texture_screen = large_eo_3d_texture_screen;

  000b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_eo_3d_texture_screen@@3PAUSCREEN@@A ; large_eo_3d_texture_screen
  000ba	a3 00 00 00 00	 mov	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, eax

; 12871: 	}
; 12872: 	else

  000bf	eb 78		 jmp	 SHORT $LN15@draw_coman
$LN14@draw_coman:

; 12873: 	{
; 12874: 		draw_large_mfd = FALSE;

  000c1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 0

; 12875: 
; 12876: 		pilot_lhs_main_mfd_texture_screen = small_pilot_lhs_main_mfd_texture_screen;

  000cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  000d0	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12877: 		pilot_rhs_main_mfd_texture_screen = small_pilot_rhs_main_mfd_texture_screen;

  000d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  000da	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12878: 		pilot_lhs_side_mfd_texture_screen = small_pilot_lhs_side_mfd_texture_screen;

  000df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  000e4	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12879: 		pilot_rhs_side_mfd_texture_screen = small_pilot_rhs_side_mfd_texture_screen;

  000e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  000ee	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12880: 		pilot_text_display_texture_screen = small_pilot_text_display_texture_screen;

  000f3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_pilot_text_display_texture_screen@@3PAUSCREEN@@A
  000f8	a3 00 00 00 00	 mov	 DWORD PTR ?pilot_text_display_texture_screen@@3PAUSCREEN@@A, eax

; 12881: 
; 12882: 		co_pilot_lhs_main_mfd_texture_screen = small_co_pilot_lhs_main_mfd_texture_screen;

  000fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_co_pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  00102	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12883: 		co_pilot_rhs_main_mfd_texture_screen = small_co_pilot_rhs_main_mfd_texture_screen;

  00107	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_co_pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  0010c	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12884: 		co_pilot_lhs_side_mfd_texture_screen = small_co_pilot_lhs_side_mfd_texture_screen;

  00111	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_co_pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  00116	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12885: 		co_pilot_rhs_side_mfd_texture_screen = small_co_pilot_rhs_side_mfd_texture_screen;

  0011b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_co_pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  00120	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12886: 		co_pilot_text_display_texture_screen = small_co_pilot_text_display_texture_screen;

  00125	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_co_pilot_text_display_texture_screen@@3PAUSCREEN@@A
  0012a	a3 00 00 00 00	 mov	 DWORD PTR ?co_pilot_text_display_texture_screen@@3PAUSCREEN@@A, eax

; 12887: 
; 12888: 		eo_3d_texture_screen = small_eo_3d_texture_screen;

  0012f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_eo_3d_texture_screen@@3PAUSCREEN@@A ; small_eo_3d_texture_screen
  00134	a3 00 00 00 00	 mov	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, eax
$LN15@draw_coman:

; 12889: 	}
; 12890: 
; 12891: 	if (get_crew_role () == CREW_ROLE_PILOT)

  00139	e8 00 00 00 00	 call	 ?get_crew_role@@YG?AW4CREW_ROLES@@XZ ; get_crew_role
  0013e	85 c0		 test	 eax, eax
  00140	75 12		 jne	 SHORT $LN16@draw_coman

; 12892: 	{
; 12893: 		export_left=pilot_lhs_main_mfd_texture_screen;

  00142	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  00147	89 45 fc	 mov	 DWORD PTR _export_left$[ebp], eax

; 12894: 		export_right=pilot_rhs_main_mfd_texture_screen;

  0014a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  0014f	89 45 f8	 mov	 DWORD PTR _export_right$[ebp], eax

; 12895: 	}
; 12896: 	else

  00152	eb 10		 jmp	 SHORT $LN17@draw_coman
$LN16@draw_coman:

; 12897: 	{
; 12898: 		export_left=co_pilot_lhs_main_mfd_texture_screen;

  00154	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  00159	89 45 fc	 mov	 DWORD PTR _export_left$[ebp], eax

; 12899: 		export_right=co_pilot_rhs_main_mfd_texture_screen;

  0015c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  00161	89 45 f8	 mov	 DWORD PTR _export_right$[ebp], eax
$LN17@draw_coman:

; 12900: 	}
; 12901: 
; 12902: 	set_system_texture_screen (pilot_lhs_main_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD2);

  00164	68 55 06 00 00	 push	 1621			; 00000655H
  00169	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  0016e	50		 push	 eax
  0016f	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 12903: 	set_system_texture_screen (pilot_rhs_main_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD3);

  00174	68 56 06 00 00	 push	 1622			; 00000656H
  00179	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  0017e	50		 push	 eax
  0017f	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 12904: 	set_system_texture_screen (pilot_lhs_side_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD1);

  00184	68 54 06 00 00	 push	 1620			; 00000654H
  00189	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  0018e	50		 push	 eax
  0018f	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 12905: 	set_system_texture_screen (pilot_rhs_side_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD4);

  00194	68 57 06 00 00	 push	 1623			; 00000657H
  00199	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  0019e	50		 push	 eax
  0019f	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 12906: 	set_system_texture_screen (pilot_text_display_texture_screen, TEXTURE_INDEX_COMANCHE_TEXT);

  001a4	68 5d 06 00 00	 push	 1629			; 0000065dH
  001a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_text_display_texture_screen@@3PAUSCREEN@@A
  001ae	50		 push	 eax
  001af	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 12907: 
; 12908: 	set_system_texture_screen (co_pilot_lhs_main_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD6);

  001b4	68 59 06 00 00	 push	 1625			; 00000659H
  001b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  001be	50		 push	 eax
  001bf	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 12909: 	set_system_texture_screen (co_pilot_rhs_main_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD7);

  001c4	68 5a 06 00 00	 push	 1626			; 0000065aH
  001c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 12910: 	set_system_texture_screen (co_pilot_lhs_side_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD5);

  001d4	68 58 06 00 00	 push	 1624			; 00000658H
  001d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  001de	50		 push	 eax
  001df	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 12911: 	set_system_texture_screen (co_pilot_rhs_side_mfd_texture_screen, TEXTURE_INDEX_COMANCHE_MFD8);

  001e4	68 5b 06 00 00	 push	 1627			; 0000065bH
  001e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  001ee	50		 push	 eax
  001ef	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 12912: 	set_system_texture_screen (co_pilot_text_display_texture_screen, TEXTURE_INDEX_COMANCHE_TEXT2);

  001f4	68 5e 06 00 00	 push	 1630			; 0000065eH
  001f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_text_display_texture_screen@@3PAUSCREEN@@A
  001fe	50		 push	 eax
  001ff	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 12913: 
; 12914: 	////////////////////////////////////////
; 12915: 	//
; 12916: 	// SELECT VISIBLE DISPLAYS
; 12917: 	//
; 12918: 	////////////////////////////////////////
; 12919: 
; 12920: 	switch (get_view_mode ())

  00204	a1 00 00 00 00	 mov	 eax, DWORD PTR ?view_mode@@3W4VIEW_MODES@@A ; view_mode
  00209	89 45 ac	 mov	 DWORD PTR tv91[ebp], eax
  0020c	8b 4d ac	 mov	 ecx, DWORD PTR tv91[ebp]
  0020f	83 e9 20	 sub	 ecx, 32			; 00000020H
  00212	89 4d ac	 mov	 DWORD PTR tv91[ebp], ecx
  00215	83 7d ac 09	 cmp	 DWORD PTR tv91[ebp], 9
  00219	77 5b		 ja	 SHORT $LN25@draw_coman
  0021b	8b 55 ac	 mov	 edx, DWORD PTR tv91[ebp]
  0021e	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN54@draw_coman[edx*4]
$LN18@draw_coman:

; 12921: 	{
; 12922: 		////////////////////////////////////////
; 12923: 		case VIEW_MODE_VIRTUAL_COCKPIT:
; 12924: 		case VIEW_MODE_VIRTUAL_COCKPIT_PADLOCK:
; 12925: 		case VIEW_MODE_VIRTUAL_COCKPIT_TRACK_TARGET:
; 12926: 		////////////////////////////////////////
; 12927: 		{
; 12928: 			if (get_crew_role () == CREW_ROLE_PILOT)

  00225	e8 00 00 00 00	 call	 ?get_crew_role@@YG?AW4CREW_ROLES@@XZ ; get_crew_role
  0022a	85 c0		 test	 eax, eax
  0022c	75 0c		 jne	 SHORT $LN19@draw_coman

; 12929: 			{
; 12930: 				display_mask =

  0022e	c7 05 00 00 00
	00 1f 00 00 00	 mov	 DWORD PTR ?display_mask@@3HA, 31 ; 0000001fH

; 12931: 					PILOT_LHS_MAIN_MFD |
; 12932: 					PILOT_RHS_MAIN_MFD |
; 12933: 					PILOT_LHS_SIDE_MFD |
; 12934: 					PILOT_RHS_SIDE_MFD |
; 12935: 					PILOT_TEXT_DISPLAY;
; 12936: 			}
; 12937: 			else

  00238	eb 0a		 jmp	 SHORT $LN20@draw_coman
$LN19@draw_coman:

; 12938: 			{
; 12939: 				display_mask =

  0023a	c7 05 00 00 00
	00 e0 03 00 00	 mov	 DWORD PTR ?display_mask@@3HA, 992 ; 000003e0H
$LN20@draw_coman:

; 12940: 					CO_PILOT_LHS_MAIN_MFD |
; 12941: 					CO_PILOT_RHS_MAIN_MFD |
; 12942: 					CO_PILOT_LHS_SIDE_MFD |
; 12943: 					CO_PILOT_RHS_SIDE_MFD |
; 12944: 					CO_PILOT_TEXT_DISPLAY;
; 12945: 			}
; 12946: 
; 12947: 			break;

  00244	eb 3a		 jmp	 SHORT $LN4@draw_coman
$LN21@draw_coman:

; 12948: 		}
; 12949: 		////////////////////////////////////////
; 12950: 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY:
; 12951: 		////////////////////////////////////////
; 12952: 		{
; 12953: 			display_mask =

  00246	c7 05 00 00 00
	00 17 00 00 00	 mov	 DWORD PTR ?display_mask@@3HA, 23 ; 00000017H

; 12954: 				PILOT_LHS_MAIN_MFD |
; 12955: 				PILOT_RHS_MAIN_MFD |
; 12956: 				PILOT_LHS_SIDE_MFD |
; 12957: 				PILOT_TEXT_DISPLAY;
; 12958: 
; 12959: 			break;

  00250	eb 2e		 jmp	 SHORT $LN4@draw_coman
$LN22@draw_coman:

; 12960: 		}
; 12961: 		////////////////////////////////////////
; 12962: 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY:
; 12963: 		////////////////////////////////////////
; 12964: 		{
; 12965: 			display_mask =

  00252	c7 05 00 00 00
	00 1b 00 00 00	 mov	 DWORD PTR ?display_mask@@3HA, 27 ; 0000001bH

; 12966: 				PILOT_LHS_MAIN_MFD |
; 12967: 				PILOT_RHS_MAIN_MFD |
; 12968: 				PILOT_RHS_SIDE_MFD |
; 12969: 				PILOT_TEXT_DISPLAY;
; 12970: 
; 12971: 			break;

  0025c	eb 22		 jmp	 SHORT $LN4@draw_coman
$LN23@draw_coman:

; 12972: 		}
; 12973: 		////////////////////////////////////////
; 12974: 		case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY:
; 12975: 		////////////////////////////////////////
; 12976: 		{
; 12977: 			display_mask =

  0025e	c7 05 00 00 00
	00 e0 02 00 00	 mov	 DWORD PTR ?display_mask@@3HA, 736 ; 000002e0H

; 12978: 				CO_PILOT_LHS_MAIN_MFD |
; 12979: 				CO_PILOT_RHS_MAIN_MFD |
; 12980: 				CO_PILOT_LHS_SIDE_MFD |
; 12981: 				CO_PILOT_TEXT_DISPLAY;
; 12982: 
; 12983: 			break;

  00268	eb 16		 jmp	 SHORT $LN4@draw_coman
$LN24@draw_coman:

; 12984: 		}
; 12985: 		////////////////////////////////////////
; 12986: 		case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY:
; 12987: 		////////////////////////////////////////
; 12988: 		{
; 12989: 			display_mask =

  0026a	c7 05 00 00 00
	00 60 03 00 00	 mov	 DWORD PTR ?display_mask@@3HA, 864 ; 00000360H

; 12990: 				CO_PILOT_LHS_MAIN_MFD |
; 12991: 				CO_PILOT_RHS_MAIN_MFD |
; 12992: 				CO_PILOT_RHS_SIDE_MFD |
; 12993: 				CO_PILOT_TEXT_DISPLAY;
; 12994: 
; 12995: 			break;

  00274	eb 0a		 jmp	 SHORT $LN4@draw_coman
$LN25@draw_coman:

; 12996: 		}
; 12997: 		////////////////////////////////////////
; 12998: 		default:
; 12999: 		////////////////////////////////////////
; 13000: 		{
; 13001: 			display_mask =

  00276	c7 05 00 00 00
	00 ff 03 00 00	 mov	 DWORD PTR ?display_mask@@3HA, 1023 ; 000003ffH
$LN4@draw_coman:

; 13002: 				PILOT_LHS_MAIN_MFD |
; 13003: 				PILOT_RHS_MAIN_MFD |
; 13004: 				PILOT_LHS_SIDE_MFD |
; 13005: 				PILOT_RHS_SIDE_MFD |
; 13006: 				PILOT_TEXT_DISPLAY |
; 13007: 				CO_PILOT_LHS_MAIN_MFD |
; 13008: 				CO_PILOT_RHS_MAIN_MFD |
; 13009: 				CO_PILOT_LHS_SIDE_MFD |
; 13010: 				CO_PILOT_RHS_SIDE_MFD |
; 13011: 				CO_PILOT_TEXT_DISPLAY;
; 13012: 
; 13013: 			break;
; 13014: 		}
; 13015: 	}
; 13016: 
; 13017: 	////////////////////////////////////////
; 13018: 	//
; 13019: 	// SET UP MFD 2D ENVIRONMENT
; 13020: 	//
; 13021: 	////////////////////////////////////////
; 13022: 
; 13023: 	set_2d_active_environment (mfd_env);

  00280	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00285	50		 push	 eax
  00286	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 13024: 
; 13025: 	//
; 13026: 	// window
; 13027: 	//
; 13028: 
; 13029: 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  0028b	51		 push	 ecx
  0028c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00294	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00299	51		 push	 ecx
  0029a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  002a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a7	51		 push	 ecx
  002a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  002b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b5	51		 push	 ecx
  002b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  002be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  002c8	50		 push	 eax
  002c9	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 13030: 
; 13031: 	//
; 13032: 	// viewport
; 13033: 	//
; 13034: 
; 13035: 	if (draw_large_mfd)

  002ce	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  002d5	74 1c		 je	 SHORT $LN26@draw_coman

; 13036: 	{
; 13037: 		mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  002d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  002df	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 13038: 
; 13039: 		int_mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  002e7	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?int_mfd_viewport_size@@3HA, 256 ; 00000100H

; 13040: 	}
; 13041: 	else

  002f1	eb 1a		 jmp	 SHORT $LN27@draw_coman
$LN26@draw_coman:

; 13042: 	{
; 13043: 		mfd_viewport_size = SMALL_MFD_VIEWPORT_SIZE;

  002f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  002fb	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 13044: 
; 13045: 		int_mfd_viewport_size = SMALL_MFD_VIEWPORT_SIZE;

  00303	c7 05 00 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?int_mfd_viewport_size@@3HA, 128 ; 00000080H
$LN27@draw_coman:

; 13046: 	}
; 13047: 
; 13048: 	mfd_viewport_x_org = mfd_viewport_size * 0.5;

  0030d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00315	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0031d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00321	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 13049: 
; 13050: 	mfd_viewport_y_org = mfd_viewport_size * 0.5;

  00329	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00331	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00339	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0033d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 13051: 
; 13052: 	mfd_viewport_x_min = 0.0;

  00345	0f 57 c0	 xorps	 xmm0, xmm0
  00348	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 13053: 
; 13054: 	mfd_viewport_y_min = 0.0;

  00350	0f 57 c0	 xorps	 xmm0, xmm0
  00353	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 13055: 
; 13056: 	mfd_viewport_x_max = mfd_viewport_size - 0.001;

  0035b	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00363	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0036b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0036f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 13057: 
; 13058: 	mfd_viewport_y_max = mfd_viewport_size - 0.001;

  00377	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  0037f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00387	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0038b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 13059: 
; 13060: 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00393	51		 push	 ecx
  00394	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0039c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a1	51		 push	 ecx
  003a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  003aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003af	51		 push	 ecx
  003b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  003b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bd	51		 push	 ecx
  003be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  003c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  003d0	50		 push	 eax
  003d1	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 13061: 
; 13062: 	mfd_screen_x_min = 0.0;

  003d6	0f 57 c0	 xorps	 xmm0, xmm0
  003d9	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_min@@3MA, xmm0

; 13063: 	mfd_screen_y_min = 0.0;

  003e1	0f 57 c0	 xorps	 xmm0, xmm0
  003e4	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_min@@3MA, xmm0

; 13064: 
; 13065: 	mfd_screen_x_max = mfd_viewport_size - 0.001;

  003ec	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  003f4	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  003fc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00400	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_max@@3MA, xmm0

; 13066: 	mfd_screen_y_max = mfd_viewport_size - 0.001;

  00408	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00410	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00418	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0041c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_max@@3MA, xmm0

; 13067: 
; 13068: 	mfd_screen_width = mfd_viewport_size;

  00424	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  0042c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_width@@3MA, xmm0

; 13069: 	mfd_screen_height = mfd_viewport_size;

  00434	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  0043c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_height@@3MA, xmm0

; 13070: 
; 13071: 	mfd_screen_x_scale = 1.0;

  00444	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0044c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_scale@@3MA, xmm0

; 13072: 	mfd_screen_y_scale = 1.0;

  00454	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0045c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_scale@@3MA, xmm0

; 13073: 
; 13074: 	////////////////////////////////////////
; 13075: 	//
; 13076: 	// render EO 3D display (if required)
; 13077: 	//
; 13078: 	////////////////////////////////////////
; 13079: 
; 13080: 	{
; 13081: 		int
; 13082: 			draw_eo_display;
; 13083: 
; 13084: 		if (d3d_can_render_to_texture)

  00464	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  0046b	0f 84 c8 01 00
	00		 je	 $LN34@draw_coman

; 13085: 		{
; 13086: 			ASSERT (eo_3d_texture_screen);

  00471	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, 0
  00478	75 1a		 jne	 SHORT $LN29@draw_coman
  0047a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_comanche_mfd@@YGXXZ@4JA
  0047f	05 16 01 00 00	 add	 eax, 278		; 00000116H
  00484	50		 push	 eax
  00485	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0048a	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
  0048f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN29@draw_coman:

; 13087: 
; 13088: 			draw_eo_display = FALSE;

  00494	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _draw_eo_display$1[ebp], 0

; 13089: 
; 13090: 			if (get_undamaged_eo_display_mode (pilot_lhs_main_mfd_mode) && (display_mask & PILOT_LHS_MAIN_MFD))

  0049b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A
  004a0	50		 push	 eax
  004a1	e8 00 00 00 00	 call	 ?get_undamaged_eo_display_mode@@YGHW4COMANCHE_MAIN_MFD_MODES@@@Z ; get_undamaged_eo_display_mode
  004a6	85 c0		 test	 eax, eax
  004a8	74 29		 je	 SHORT $LN30@draw_coman
  004aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  004af	83 e0 01	 and	 eax, 1
  004b2	74 1f		 je	 SHORT $LN30@draw_coman

; 13091: 			{
; 13092: 				set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_COMANCHE_MFD2);

  004b4	68 55 06 00 00	 push	 1621			; 00000655H
  004b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  004be	50		 push	 eax
  004bf	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 13093: 				export_left=eo_3d_texture_screen;

  004c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  004c9	89 45 fc	 mov	 DWORD PTR _export_left$[ebp], eax

; 13094: 
; 13095: 				draw_eo_display = TRUE;

  004cc	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _draw_eo_display$1[ebp], 1
$LN30@draw_coman:

; 13096: 			}
; 13097: 
; 13098: 			if (get_undamaged_eo_display_mode (pilot_rhs_main_mfd_mode) && (display_mask & PILOT_RHS_MAIN_MFD))

  004d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A
  004d8	50		 push	 eax
  004d9	e8 00 00 00 00	 call	 ?get_undamaged_eo_display_mode@@YGHW4COMANCHE_MAIN_MFD_MODES@@@Z ; get_undamaged_eo_display_mode
  004de	85 c0		 test	 eax, eax
  004e0	74 29		 je	 SHORT $LN31@draw_coman
  004e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  004e7	83 e0 02	 and	 eax, 2
  004ea	74 1f		 je	 SHORT $LN31@draw_coman

; 13099: 			{
; 13100: 				set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_COMANCHE_MFD3);

  004ec	68 56 06 00 00	 push	 1622			; 00000656H
  004f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  004f6	50		 push	 eax
  004f7	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 13101: 				export_right=eo_3d_texture_screen;

  004fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00501	89 45 f8	 mov	 DWORD PTR _export_right$[ebp], eax

; 13102: 
; 13103: 				draw_eo_display = TRUE;

  00504	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _draw_eo_display$1[ebp], 1
$LN31@draw_coman:

; 13104: 			}
; 13105: 
; 13106: 			if (get_undamaged_eo_display_mode (co_pilot_lhs_main_mfd_mode) && (display_mask & CO_PILOT_LHS_MAIN_MFD))

  0050b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A
  00510	50		 push	 eax
  00511	e8 00 00 00 00	 call	 ?get_undamaged_eo_display_mode@@YGHW4COMANCHE_MAIN_MFD_MODES@@@Z ; get_undamaged_eo_display_mode
  00516	85 c0		 test	 eax, eax
  00518	74 29		 je	 SHORT $LN32@draw_coman
  0051a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  0051f	83 e0 20	 and	 eax, 32			; 00000020H
  00522	74 1f		 je	 SHORT $LN32@draw_coman

; 13107: 			{
; 13108: 				set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_COMANCHE_MFD6);

  00524	68 59 06 00 00	 push	 1625			; 00000659H
  00529	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0052e	50		 push	 eax
  0052f	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 13109: 				export_left=eo_3d_texture_screen;

  00534	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00539	89 45 fc	 mov	 DWORD PTR _export_left$[ebp], eax

; 13110: 
; 13111: 				draw_eo_display = TRUE;

  0053c	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _draw_eo_display$1[ebp], 1
$LN32@draw_coman:

; 13112: 			}
; 13113: 
; 13114: 			if (get_undamaged_eo_display_mode (co_pilot_rhs_main_mfd_mode) && (display_mask & CO_PILOT_RHS_MAIN_MFD))

  00543	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A
  00548	50		 push	 eax
  00549	e8 00 00 00 00	 call	 ?get_undamaged_eo_display_mode@@YGHW4COMANCHE_MAIN_MFD_MODES@@@Z ; get_undamaged_eo_display_mode
  0054e	85 c0		 test	 eax, eax
  00550	74 29		 je	 SHORT $LN33@draw_coman
  00552	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  00557	83 e0 40	 and	 eax, 64			; 00000040H
  0055a	74 1f		 je	 SHORT $LN33@draw_coman

; 13115: 			{
; 13116: 				set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_COMANCHE_MFD7);

  0055c	68 5a 06 00 00	 push	 1626			; 0000065aH
  00561	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00566	50		 push	 eax
  00567	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 13117: 				export_right=eo_3d_texture_screen;

  0056c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00571	89 45 f8	 mov	 DWORD PTR _export_right$[ebp], eax

; 13118: 
; 13119: 				draw_eo_display = TRUE;

  00574	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _draw_eo_display$1[ebp], 1
$LN33@draw_coman:

; 13120: 			}
; 13121: 
; 13122: 			if (draw_eo_display)

  0057b	83 7d f0 00	 cmp	 DWORD PTR _draw_eo_display$1[ebp], 0
  0057f	0f 84 b4 00 00
	00		 je	 $LN34@draw_coman

; 13123: 			{
; 13124: 				switch (get_main_mfd_mode_for_eo_sensor ())

  00585	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  0058a	89 45 ac	 mov	 DWORD PTR tv226[ebp], eax
  0058d	83 7d ac 04	 cmp	 DWORD PTR tv226[ebp], 4
  00591	74 0e		 je	 SHORT $LN35@draw_coman
  00593	83 7d ac 05	 cmp	 DWORD PTR tv226[ebp], 5
  00597	74 11		 je	 SHORT $LN36@draw_coman
  00599	83 7d ac 06	 cmp	 DWORD PTR tv226[ebp], 6
  0059d	74 14		 je	 SHORT $LN37@draw_coman
  0059f	eb 19		 jmp	 SHORT $LN6@draw_coman
$LN35@draw_coman:

; 13125: 				{
; 13126: 					case COMANCHE_MAIN_MFD_MODE_FLIR:
; 13127: 					{
; 13128: 						draw_3d_flir_mfd (FALSE);

  005a1	6a 00		 push	 0
  005a3	e8 00 00 00 00	 call	 ?draw_3d_flir_mfd@@YGXH@Z ; draw_3d_flir_mfd

; 13129: 
; 13130: 						break;

  005a8	eb 10		 jmp	 SHORT $LN6@draw_coman
$LN36@draw_coman:

; 13131: 					}
; 13132: 					case COMANCHE_MAIN_MFD_MODE_DTV:
; 13133: 					{
; 13134: 						draw_3d_dtv_mfd (FALSE);

  005aa	6a 00		 push	 0
  005ac	e8 00 00 00 00	 call	 ?draw_3d_dtv_mfd@@YGXH@Z ; draw_3d_dtv_mfd

; 13135: 
; 13136: 						break;

  005b1	eb 07		 jmp	 SHORT $LN6@draw_coman
$LN37@draw_coman:

; 13137: 					}
; 13138: 					case COMANCHE_MAIN_MFD_MODE_DVO:
; 13139: 					{
; 13140: 						draw_3d_dvo_mfd (FALSE);

  005b3	6a 00		 push	 0
  005b5	e8 00 00 00 00	 call	 ?draw_3d_dvo_mfd@@YGXH@Z ; draw_3d_dvo_mfd
$LN6@draw_coman:

; 13141: 
; 13142: 						break;
; 13143: 					}
; 13144: 				}
; 13145: 
; 13146: 				draw_main_display = TRUE;

  005ba	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_main_display@@3HA, 1

; 13147: 
; 13148: 				set_active_screen (eo_3d_texture_screen);

  005c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  005c9	50		 push	 eax
  005ca	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 13149: 
; 13150: 				if (lock_screen (eo_3d_texture_screen))

  005cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  005d4	50		 push	 eax
  005d5	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  005da	85 c0		 test	 eax, eax
  005dc	74 50		 je	 SHORT $LN38@draw_coman

; 13151: 				{
; 13152: 					draw_layout_grid ();

  005de	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 13153: 
; 13154: 					switch (get_main_mfd_mode_for_eo_sensor ())

  005e3	e8 00 00 00 00	 call	 ?get_main_mfd_mode_for_eo_sensor@@YG?AW4COMANCHE_MAIN_MFD_MODES@@XZ ; get_main_mfd_mode_for_eo_sensor
  005e8	89 45 ac	 mov	 DWORD PTR tv238[ebp], eax
  005eb	83 7d ac 04	 cmp	 DWORD PTR tv238[ebp], 4
  005ef	74 0e		 je	 SHORT $LN39@draw_coman
  005f1	83 7d ac 05	 cmp	 DWORD PTR tv238[ebp], 5
  005f5	74 11		 je	 SHORT $LN40@draw_coman
  005f7	83 7d ac 06	 cmp	 DWORD PTR tv238[ebp], 6
  005fb	74 14		 je	 SHORT $LN41@draw_coman
  005fd	eb 19		 jmp	 SHORT $LN8@draw_coman
$LN39@draw_coman:

; 13155: 					{
; 13156: 						case COMANCHE_MAIN_MFD_MODE_FLIR:
; 13157: 						{
; 13158: 							draw_2d_flir_mfd (TRUE);

  005ff	6a 01		 push	 1
  00601	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXH@Z ; draw_2d_flir_mfd

; 13159: 
; 13160: 							break;

  00606	eb 10		 jmp	 SHORT $LN8@draw_coman
$LN40@draw_coman:

; 13161: 						}
; 13162: 						case COMANCHE_MAIN_MFD_MODE_DTV:
; 13163: 						{
; 13164: 							draw_2d_dtv_mfd (TRUE);

  00608	6a 01		 push	 1
  0060a	e8 00 00 00 00	 call	 ?draw_2d_dtv_mfd@@YGXH@Z ; draw_2d_dtv_mfd

; 13165: 
; 13166: 							break;

  0060f	eb 07		 jmp	 SHORT $LN8@draw_coman
$LN41@draw_coman:

; 13167: 						}
; 13168: 						case COMANCHE_MAIN_MFD_MODE_DVO:
; 13169: 						{
; 13170: 							draw_2d_dvo_mfd (TRUE);

  00611	6a 01		 push	 1
  00613	e8 00 00 00 00	 call	 ?draw_2d_dvo_mfd@@YGXH@Z ; draw_2d_dvo_mfd
$LN8@draw_coman:

; 13171: 
; 13172: 							break;
; 13173: 						}
; 13174: 					}
; 13175: 
; 13176: 					flush_screen_texture_graphics (eo_3d_texture_screen);

  00618	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0061d	50		 push	 eax
  0061e	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 13177: 
; 13178: 					unlock_screen (eo_3d_texture_screen);

  00623	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00628	50		 push	 eax
  00629	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN38@draw_coman:

; 13179: 				}
; 13180: 
; 13181: 				set_active_screen (video_screen);

  0062e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00633	50		 push	 eax
  00634	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen
$LN34@draw_coman:

; 13182: 			}
; 13183: 		}
; 13184: 	}
; 13185: 
; 13186: 	////////////////////////////////////////
; 13187: 	//
; 13188: 	// DRAW DISPLAYS
; 13189: 	//
; 13190: 	////////////////////////////////////////
; 13191: 
; 13192: 	if (display_mask & PILOT_LHS_MAIN_MFD)

  00639	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  0063e	83 e0 01	 and	 eax, 1
  00641	74 12		 je	 SHORT $LN42@draw_coman

; 13193: 	{
; 13194: 		draw_main_mfd (pilot_lhs_main_mfd_texture_screen, &pilot_lhs_main_mfd_mode, COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS);

  00643	6a 00		 push	 0
  00645	68 00 00 00 00	 push	 OFFSET ?pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A
  0064a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  0064f	50		 push	 eax
  00650	e8 00 00 00 00	 call	 ?draw_main_mfd@@YGXPAUSCREEN@@PAW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; draw_main_mfd
$LN42@draw_coman:

; 13195: 	}
; 13196: 
; 13197: 	if (display_mask & PILOT_RHS_MAIN_MFD)

  00655	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  0065a	83 e0 02	 and	 eax, 2
  0065d	74 12		 je	 SHORT $LN43@draw_coman

; 13198: 	{
; 13199: 		draw_main_mfd (pilot_rhs_main_mfd_texture_screen, &pilot_rhs_main_mfd_mode, COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS);

  0065f	6a 01		 push	 1
  00661	68 00 00 00 00	 push	 OFFSET ?pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A
  00666	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  0066b	50		 push	 eax
  0066c	e8 00 00 00 00	 call	 ?draw_main_mfd@@YGXPAUSCREEN@@PAW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; draw_main_mfd
$LN43@draw_coman:

; 13200: 	}
; 13201: 
; 13202: 	if (display_mask & PILOT_LHS_SIDE_MFD)

  00671	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  00676	83 e0 04	 and	 eax, 4
  00679	74 14		 je	 SHORT $LN44@draw_coman

; 13203: 	{
; 13204: 		draw_side_mfd (pilot_lhs_side_mfd_texture_screen, pilot_lhs_side_mfd_mode, COMANCHE_SIDE_MFD_LOCATION_PILOT_LHS);

  0067b	6a 00		 push	 0
  0067d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_lhs_side_mfd_mode@@3W4COMANCHE_SIDE_MFD_MODES@@A
  00682	50		 push	 eax
  00683	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  00689	51		 push	 ecx
  0068a	e8 00 00 00 00	 call	 ?draw_side_mfd@@YGXPAUSCREEN@@W4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ; draw_side_mfd
$LN44@draw_coman:

; 13205: 	}
; 13206: 
; 13207: 	if (display_mask & PILOT_RHS_SIDE_MFD)

  0068f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  00694	83 e0 08	 and	 eax, 8
  00697	74 14		 je	 SHORT $LN45@draw_coman

; 13208: 	{
; 13209: 		draw_side_mfd (pilot_rhs_side_mfd_texture_screen, pilot_rhs_side_mfd_mode, COMANCHE_SIDE_MFD_LOCATION_PILOT_RHS);

  00699	6a 01		 push	 1
  0069b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_rhs_side_mfd_mode@@3W4COMANCHE_SIDE_MFD_MODES@@A
  006a0	50		 push	 eax
  006a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  006a7	51		 push	 ecx
  006a8	e8 00 00 00 00	 call	 ?draw_side_mfd@@YGXPAUSCREEN@@W4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ; draw_side_mfd
$LN45@draw_coman:

; 13210: 	}
; 13211: 
; 13212: 	if (display_mask & PILOT_TEXT_DISPLAY)

  006ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  006b2	83 e0 10	 and	 eax, 16			; 00000010H
  006b5	74 0b		 je	 SHORT $LN46@draw_coman

; 13213: 	{
; 13214: 		draw_text_display (pilot_text_display_texture_screen);

  006b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pilot_text_display_texture_screen@@3PAUSCREEN@@A
  006bc	50		 push	 eax
  006bd	e8 00 00 00 00	 call	 ?draw_text_display@@YGXPAUSCREEN@@@Z ; draw_text_display
$LN46@draw_coman:

; 13215: 	}
; 13216: 
; 13217: 	if (display_mask & CO_PILOT_LHS_MAIN_MFD)

  006c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  006c7	83 e0 20	 and	 eax, 32			; 00000020H
  006ca	74 12		 je	 SHORT $LN47@draw_coman

; 13218: 	{
; 13219: 		draw_main_mfd (co_pilot_lhs_main_mfd_texture_screen, &co_pilot_lhs_main_mfd_mode, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_LHS);

  006cc	6a 02		 push	 2
  006ce	68 00 00 00 00	 push	 OFFSET ?co_pilot_lhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A
  006d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  006d8	50		 push	 eax
  006d9	e8 00 00 00 00	 call	 ?draw_main_mfd@@YGXPAUSCREEN@@PAW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; draw_main_mfd
$LN47@draw_coman:

; 13220: 	}
; 13221: 
; 13222: 	if (display_mask & CO_PILOT_RHS_MAIN_MFD)

  006de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  006e3	83 e0 40	 and	 eax, 64			; 00000040H
  006e6	74 12		 je	 SHORT $LN48@draw_coman

; 13223: 	{
; 13224: 		draw_main_mfd (co_pilot_rhs_main_mfd_texture_screen, &co_pilot_rhs_main_mfd_mode, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_RHS);

  006e8	6a 03		 push	 3
  006ea	68 00 00 00 00	 push	 OFFSET ?co_pilot_rhs_main_mfd_mode@@3W4COMANCHE_MAIN_MFD_MODES@@A
  006ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  006f4	50		 push	 eax
  006f5	e8 00 00 00 00	 call	 ?draw_main_mfd@@YGXPAUSCREEN@@PAW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; draw_main_mfd
$LN48@draw_coman:

; 13225: 	}
; 13226: 
; 13227: 	if (display_mask & CO_PILOT_LHS_SIDE_MFD)

  006fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  006ff	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00704	74 14		 je	 SHORT $LN49@draw_coman

; 13228: 	{
; 13229: 		draw_side_mfd (co_pilot_lhs_side_mfd_texture_screen, co_pilot_lhs_side_mfd_mode, COMANCHE_SIDE_MFD_LOCATION_CO_PILOT_LHS);

  00706	6a 02		 push	 2
  00708	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_lhs_side_mfd_mode@@3W4COMANCHE_SIDE_MFD_MODES@@A
  0070d	50		 push	 eax
  0070e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?co_pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  00714	51		 push	 ecx
  00715	e8 00 00 00 00	 call	 ?draw_side_mfd@@YGXPAUSCREEN@@W4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ; draw_side_mfd
$LN49@draw_coman:

; 13230: 	}
; 13231: 
; 13232: 	if (display_mask & CO_PILOT_RHS_SIDE_MFD)

  0071a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  0071f	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00724	74 14		 je	 SHORT $LN50@draw_coman

; 13233: 	{
; 13234: 		draw_side_mfd (co_pilot_rhs_side_mfd_texture_screen, co_pilot_rhs_side_mfd_mode, COMANCHE_SIDE_MFD_LOCATION_CO_PILOT_RHS);

  00726	6a 03		 push	 3
  00728	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_rhs_side_mfd_mode@@3W4COMANCHE_SIDE_MFD_MODES@@A
  0072d	50		 push	 eax
  0072e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?co_pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  00734	51		 push	 ecx
  00735	e8 00 00 00 00	 call	 ?draw_side_mfd@@YGXPAUSCREEN@@W4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ; draw_side_mfd
$LN50@draw_coman:

; 13235: 	}
; 13236: 
; 13237: 	if (display_mask & CO_PILOT_TEXT_DISPLAY)

  0073a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_mask@@3HA
  0073f	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00744	74 0b		 je	 SHORT $LN51@draw_coman

; 13238: 	{
; 13239: 		draw_text_display (co_pilot_text_display_texture_screen);

  00746	a1 00 00 00 00	 mov	 eax, DWORD PTR ?co_pilot_text_display_texture_screen@@3PAUSCREEN@@A
  0074b	50		 push	 eax
  0074c	e8 00 00 00 00	 call	 ?draw_text_display@@YGXPAUSCREEN@@@Z ; draw_text_display
$LN51@draw_coman:

; 13240: 	}
; 13241: 	if(command_line_export_mfd)

  00751	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_export_mfd@@3HA, 0 ; command_line_export_mfd
  00758	74 0d		 je	 SHORT $LN52@draw_coman

; 13242: 		copy_export_mfd(export_left,export_right);

  0075a	8b 45 f8	 mov	 eax, DWORD PTR _export_right$[ebp]
  0075d	50		 push	 eax
  0075e	8b 4d fc	 mov	 ecx, DWORD PTR _export_left$[ebp]
  00761	51		 push	 ecx
  00762	e8 00 00 00 00	 call	 ?copy_export_mfd@@YGXPAUSCREEN@@0@Z ; copy_export_mfd
$LN52@draw_coman:

; 13243: 
; 13244: }

  00767	5f		 pop	 edi
  00768	5e		 pop	 esi
  00769	5b		 pop	 ebx
  0076a	8b e5		 mov	 esp, ebp
  0076c	5d		 pop	 ebp
  0076d	c3		 ret	 0
  0076e	66 90		 npad	 2
$LN54@draw_coman:
  00770	00 00 00 00	 DD	 $LN18@draw_coman
  00774	00 00 00 00	 DD	 $LN18@draw_coman
  00778	00 00 00 00	 DD	 $LN18@draw_coman
  0077c	00 00 00 00	 DD	 $LN25@draw_coman
  00780	00 00 00 00	 DD	 $LN25@draw_coman
  00784	00 00 00 00	 DD	 $LN25@draw_coman
  00788	00 00 00 00	 DD	 $LN21@draw_coman
  0078c	00 00 00 00	 DD	 $LN22@draw_coman
  00790	00 00 00 00	 DD	 $LN23@draw_coman
  00794	00 00 00 00	 DD	 $LN24@draw_coman
?draw_comanche_mfd@@YGXXZ ENDP				; draw_comanche_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?deinitialise_comanche_mfd@@YGXXZ
_TEXT	SEGMENT
?deinitialise_comanche_mfd@@YGXXZ PROC			; deinitialise_comanche_mfd, COMDAT

; 12757: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12758: 	destroy_2d_environment (mfd_env);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?destroy_2d_environment@@YGXPAUENV_2D@@@Z ; destroy_2d_environment

; 12759: 
; 12760: 	////////////////////////////////////////
; 12761: 
; 12762: 	destroy_screen (large_pilot_lhs_main_mfd_texture_screen);

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 12763: 	destroy_screen (large_pilot_rhs_main_mfd_texture_screen);

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 12764: 	destroy_screen (large_pilot_lhs_side_mfd_texture_screen);

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 12765: 	destroy_screen (large_pilot_rhs_side_mfd_texture_screen);

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 12766: 	destroy_screen (large_pilot_text_display_texture_screen);

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_pilot_text_display_texture_screen@@3PAUSCREEN@@A
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 12767: 
; 12768: 	destroy_screen (large_co_pilot_lhs_main_mfd_texture_screen);

  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 12769: 	destroy_screen (large_co_pilot_rhs_main_mfd_texture_screen);

  00056	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 12770: 	destroy_screen (large_co_pilot_lhs_side_mfd_texture_screen);

  00061	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 12771: 	destroy_screen (large_co_pilot_rhs_side_mfd_texture_screen);

  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 12772: 	destroy_screen (large_co_pilot_text_display_texture_screen);

  00077	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_co_pilot_text_display_texture_screen@@3PAUSCREEN@@A
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 12773: 
; 12774: 	destroy_screen (small_pilot_lhs_main_mfd_texture_screen);

  00082	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 12775: 	destroy_screen (small_pilot_rhs_main_mfd_texture_screen);

  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 12776: 	destroy_screen (small_pilot_lhs_side_mfd_texture_screen);

  00098	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 12777: 	destroy_screen (small_pilot_rhs_side_mfd_texture_screen);

  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 12778: 	destroy_screen (small_pilot_text_display_texture_screen);

  000ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_pilot_text_display_texture_screen@@3PAUSCREEN@@A
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 12779: 
; 12780: 	destroy_screen (small_co_pilot_lhs_main_mfd_texture_screen);

  000b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_co_pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 12781: 	destroy_screen (small_co_pilot_rhs_main_mfd_texture_screen);

  000c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_co_pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 12782: 	destroy_screen (small_co_pilot_lhs_side_mfd_texture_screen);

  000cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_co_pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 12783: 	destroy_screen (small_co_pilot_rhs_side_mfd_texture_screen);

  000da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_co_pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 12784: 	destroy_screen (small_co_pilot_text_display_texture_screen);

  000e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_co_pilot_text_display_texture_screen@@3PAUSCREEN@@A
  000ea	50		 push	 eax
  000eb	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 12785: 
; 12786: 	destroy_screen (full_mfd_texture_screen);

  000f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 12787: 
; 12788: 	////////////////////////////////////////
; 12789: 	//
; 12790: 	// weapon display lines
; 12791: 	//
; 12792: 	////////////////////////////////////////
; 12793: 
; 12794: 	safe_free (main_weapon_line_points_with_stub_wings);

  000fb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  00100	50		 push	 eax
  00101	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 12795: 
; 12796: 	safe_free (main_weapon_line_points_without_stub_wings);

  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 12797: 
; 12798: 	safe_free (side_weapon_line_points_with_stub_wings);

  00111	a1 00 00 00 00	 mov	 eax, DWORD PTR ?side_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  00116	50		 push	 eax
  00117	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 12799: 
; 12800: 	safe_free (side_weapon_line_points_without_stub_wings);

  0011c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?side_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00121	50		 push	 eax
  00122	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 12801: }

  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx
  0012a	8b e5		 mov	 esp, ebp
  0012c	5d		 pop	 ebp
  0012d	c3		 ret	 0
?deinitialise_comanche_mfd@@YGXXZ ENDP			; deinitialise_comanche_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\comanche\cm_mfd.c
;	COMDAT ?initialise_comanche_mfd@@YGXXZ
_TEXT	SEGMENT
_i$1 = -16						; size = 4
_i$2 = -12						; size = 4
_i$3 = -8						; size = 4
_i$4 = -4						; size = 4
?initialise_comanche_mfd@@YGXXZ PROC			; initialise_comanche_mfd, COMDAT

; 12513: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12514: 	if (command_line_dynamics_engine_startup)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_dynamics_engine_startup@@3HA, 0 ; command_line_dynamics_engine_startup
  00010	74 26		 je	 SHORT $LN14@initialise

; 12515: 	{
; 12516: 		select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_OFF, COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS);

  00012	6a 00		 push	 0
  00014	6a 00		 push	 0
  00016	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 12517: 		select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_OFF, COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS);

  0001b	6a 01		 push	 1
  0001d	6a 00		 push	 0
  0001f	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 12518: 		select_comanche_side_mfd_mode (COMANCHE_SIDE_MFD_MODE_OFF, COMANCHE_SIDE_MFD_LOCATION_PILOT_LHS);

  00024	6a 00		 push	 0
  00026	6a 00		 push	 0
  00028	e8 00 00 00 00	 call	 ?select_comanche_side_mfd_mode@@YGXW4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ; select_comanche_side_mfd_mode

; 12519: 		select_comanche_side_mfd_mode (COMANCHE_SIDE_MFD_MODE_OFF, COMANCHE_SIDE_MFD_LOCATION_PILOT_RHS);

  0002d	6a 01		 push	 1
  0002f	6a 00		 push	 0
  00031	e8 00 00 00 00	 call	 ?select_comanche_side_mfd_mode@@YGXW4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ; select_comanche_side_mfd_mode

; 12520: 	}
; 12521: 	else

  00036	eb 24		 jmp	 SHORT $LN15@initialise
$LN14@initialise:

; 12522: 	{
; 12523: 		select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_ASE, COMANCHE_MAIN_MFD_LOCATION_PILOT_LHS);

  00038	6a 00		 push	 0
  0003a	6a 08		 push	 8
  0003c	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 12524: 		select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_TSD, COMANCHE_MAIN_MFD_LOCATION_PILOT_RHS);

  00041	6a 01		 push	 1
  00043	6a 07		 push	 7
  00045	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 12525: 		select_comanche_side_mfd_mode (COMANCHE_SIDE_MFD_MODE_ENGINE, COMANCHE_SIDE_MFD_LOCATION_PILOT_LHS);

  0004a	6a 00		 push	 0
  0004c	6a 04		 push	 4
  0004e	e8 00 00 00 00	 call	 ?select_comanche_side_mfd_mode@@YGXW4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ; select_comanche_side_mfd_mode

; 12526: 		select_comanche_side_mfd_mode (COMANCHE_SIDE_MFD_MODE_FLIGHT, COMANCHE_SIDE_MFD_LOCATION_PILOT_RHS);

  00053	6a 01		 push	 1
  00055	6a 05		 push	 5
  00057	e8 00 00 00 00	 call	 ?select_comanche_side_mfd_mode@@YGXW4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ; select_comanche_side_mfd_mode
$LN15@initialise:

; 12527: 	}
; 12528: 
; 12529: 	select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_MISSION, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_LHS);

  0005c	6a 02		 push	 2
  0005e	6a 0d		 push	 13			; 0000000dH
  00060	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 12530: 	select_comanche_main_mfd_mode (COMANCHE_MAIN_MFD_MODE_TSD, COMANCHE_MAIN_MFD_LOCATION_CO_PILOT_RHS);

  00065	6a 03		 push	 3
  00067	6a 07		 push	 7
  00069	e8 00 00 00 00	 call	 ?select_comanche_main_mfd_mode@@YGXW4COMANCHE_MAIN_MFD_MODES@@W4COMANCHE_MAIN_MFD_LOCATIONS@@@Z ; select_comanche_main_mfd_mode

; 12531: 	select_comanche_side_mfd_mode (COMANCHE_SIDE_MFD_MODE_SYSTEM, COMANCHE_SIDE_MFD_LOCATION_CO_PILOT_LHS);

  0006e	6a 02		 push	 2
  00070	6a 03		 push	 3
  00072	e8 00 00 00 00	 call	 ?select_comanche_side_mfd_mode@@YGXW4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ; select_comanche_side_mfd_mode

; 12532: 	select_comanche_side_mfd_mode (COMANCHE_SIDE_MFD_MODE_WEAPON, COMANCHE_SIDE_MFD_LOCATION_CO_PILOT_RHS);

  00077	6a 03		 push	 3
  00079	6a 02		 push	 2
  0007b	e8 00 00 00 00	 call	 ?select_comanche_side_mfd_mode@@YGXW4COMANCHE_SIDE_MFD_MODES@@W4COMANCHE_SIDE_MFD_LOCATIONS@@@Z ; select_comanche_side_mfd_mode

; 12533: 
; 12534: 	////////////////////////////////////////
; 12535: 
; 12536: 	set_comanche_text_display_text ("", "");

  00080	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0008a	e8 00 00 00 00	 call	 ?set_comanche_text_display_text@@YGXPAD0@Z ; set_comanche_text_display_text

; 12537: 
; 12538: 	////////////////////////////////////////
; 12539: 
; 12540: 	pilot_tsd_ase_range							= TSD_ASE_RANGE_5000;

  0008f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  00097	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_ase_range@@3MA, xmm0

; 12541: 	pilot_tsd_declutter_level					= TSD_DECLUTTER_LEVEL_NAVIGATION;

  0009f	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2

; 12542: 	pilot_tsd_threat_line_flash_timer		= TSD_THREAT_LINE_FLASH_RATE;

  000a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  000b1	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_tsd_threat_line_flash_timer@@3MA, xmm0

; 12543: 	pilot_tsd_draw_threat_line_status		= 0;

  000b9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pilot_tsd_draw_threat_line_status@@3HA, 0

; 12544: 	pilot_ase_threat_line_flash_timer		= ASE_THREAT_LINE_FLASH_RATE;

  000c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  000cb	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pilot_ase_threat_line_flash_timer@@3MA, xmm0

; 12545: 	pilot_ase_draw_threat_line_status		= 0;

  000d3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pilot_ase_draw_threat_line_status@@3HA, 0

; 12546: 
; 12547: 	co_pilot_tsd_ase_range						= TSD_ASE_RANGE_5000;

  000dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  000e5	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_ase_range@@3MA, xmm0

; 12548: 	co_pilot_tsd_declutter_level				= TSD_DECLUTTER_LEVEL_TARGET;

  000ed	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1

; 12549: 	co_pilot_tsd_threat_line_flash_timer	= TSD_THREAT_LINE_FLASH_RATE;

  000f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  000ff	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_tsd_threat_line_flash_timer@@3MA, xmm0

; 12550: 	co_pilot_tsd_draw_threat_line_status	= 0;

  00107	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?co_pilot_tsd_draw_threat_line_status@@3HA, 0

; 12551: 	co_pilot_ase_threat_line_flash_timer	= ASE_THREAT_LINE_FLASH_RATE;

  00111	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00119	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?co_pilot_ase_threat_line_flash_timer@@3MA, xmm0

; 12552: 	co_pilot_ase_draw_threat_line_status	= 0;

  00121	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?co_pilot_ase_draw_threat_line_status@@3HA, 0

; 12553: 
; 12554: 	////////////////////////////////////////
; 12555: 
; 12556: 	mfd_env = create_2d_environment ();

  0012b	e8 00 00 00 00	 call	 ?create_2d_environment@@YGPAUENV_2D@@XZ ; create_2d_environment
  00130	a3 00 00 00 00	 mov	 DWORD PTR ?mfd_env@@3PAUENV_2D@@A, eax

; 12557: 
; 12558: 	////////////////////////////////////////
; 12559: 	large_pilot_lhs_main_mfd_texture_screen = create_user_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  00135	6a 00		 push	 0
  00137	6a 02		 push	 2
  00139	68 00 01 00 00	 push	 256			; 00000100H
  0013e	68 00 01 00 00	 push	 256			; 00000100H
  00143	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  00148	a3 00 00 00 00	 mov	 DWORD PTR ?large_pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12560: 	large_pilot_rhs_main_mfd_texture_screen = create_user_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  0014d	6a 00		 push	 0
  0014f	6a 02		 push	 2
  00151	68 00 01 00 00	 push	 256			; 00000100H
  00156	68 00 01 00 00	 push	 256			; 00000100H
  0015b	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  00160	a3 00 00 00 00	 mov	 DWORD PTR ?large_pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12561: 	large_co_pilot_lhs_main_mfd_texture_screen = create_user_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  00165	6a 00		 push	 0
  00167	6a 02		 push	 2
  00169	68 00 01 00 00	 push	 256			; 00000100H
  0016e	68 00 01 00 00	 push	 256			; 00000100H
  00173	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  00178	a3 00 00 00 00	 mov	 DWORD PTR ?large_co_pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12562: 	large_co_pilot_rhs_main_mfd_texture_screen = create_user_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  0017d	6a 00		 push	 0
  0017f	6a 02		 push	 2
  00181	68 00 01 00 00	 push	 256			; 00000100H
  00186	68 00 01 00 00	 push	 256			; 00000100H
  0018b	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  00190	a3 00 00 00 00	 mov	 DWORD PTR ?large_co_pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12563: 	large_pilot_lhs_side_mfd_texture_screen = create_user_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  00195	6a 00		 push	 0
  00197	6a 02		 push	 2
  00199	68 00 01 00 00	 push	 256			; 00000100H
  0019e	68 00 01 00 00	 push	 256			; 00000100H
  001a3	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  001a8	a3 00 00 00 00	 mov	 DWORD PTR ?large_pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12564: 	large_pilot_rhs_side_mfd_texture_screen = create_user_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  001ad	6a 00		 push	 0
  001af	6a 02		 push	 2
  001b1	68 00 01 00 00	 push	 256			; 00000100H
  001b6	68 00 01 00 00	 push	 256			; 00000100H
  001bb	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  001c0	a3 00 00 00 00	 mov	 DWORD PTR ?large_pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12565: 	large_pilot_text_display_texture_screen = create_user_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  001c5	6a 00		 push	 0
  001c7	6a 02		 push	 2
  001c9	68 00 01 00 00	 push	 256			; 00000100H
  001ce	68 00 01 00 00	 push	 256			; 00000100H
  001d3	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  001d8	a3 00 00 00 00	 mov	 DWORD PTR ?large_pilot_text_display_texture_screen@@3PAUSCREEN@@A, eax

; 12566: 
; 12567: 	large_co_pilot_lhs_side_mfd_texture_screen = create_user_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  001dd	6a 00		 push	 0
  001df	6a 02		 push	 2
  001e1	68 00 01 00 00	 push	 256			; 00000100H
  001e6	68 00 01 00 00	 push	 256			; 00000100H
  001eb	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  001f0	a3 00 00 00 00	 mov	 DWORD PTR ?large_co_pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12568: 	large_co_pilot_rhs_side_mfd_texture_screen = create_user_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  001f5	6a 00		 push	 0
  001f7	6a 02		 push	 2
  001f9	68 00 01 00 00	 push	 256			; 00000100H
  001fe	68 00 01 00 00	 push	 256			; 00000100H
  00203	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  00208	a3 00 00 00 00	 mov	 DWORD PTR ?large_co_pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12569: 	large_co_pilot_text_display_texture_screen = create_user_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  0020d	6a 00		 push	 0
  0020f	6a 02		 push	 2
  00211	68 00 01 00 00	 push	 256			; 00000100H
  00216	68 00 01 00 00	 push	 256			; 00000100H
  0021b	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  00220	a3 00 00 00 00	 mov	 DWORD PTR ?large_co_pilot_text_display_texture_screen@@3PAUSCREEN@@A, eax

; 12570: 
; 12571: 	small_pilot_lhs_main_mfd_texture_screen = create_user_texture_screen (SMALL_MFD_VIEWPORT_SIZE, SMALL_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  00225	6a 00		 push	 0
  00227	6a 02		 push	 2
  00229	68 80 00 00 00	 push	 128			; 00000080H
  0022e	68 80 00 00 00	 push	 128			; 00000080H
  00233	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  00238	a3 00 00 00 00	 mov	 DWORD PTR ?small_pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12572: 	small_pilot_rhs_main_mfd_texture_screen = create_user_texture_screen (SMALL_MFD_VIEWPORT_SIZE, SMALL_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  0023d	6a 00		 push	 0
  0023f	6a 02		 push	 2
  00241	68 80 00 00 00	 push	 128			; 00000080H
  00246	68 80 00 00 00	 push	 128			; 00000080H
  0024b	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  00250	a3 00 00 00 00	 mov	 DWORD PTR ?small_pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12573: 	small_pilot_lhs_side_mfd_texture_screen = create_user_texture_screen (SMALL_MFD_VIEWPORT_SIZE, SMALL_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  00255	6a 00		 push	 0
  00257	6a 02		 push	 2
  00259	68 80 00 00 00	 push	 128			; 00000080H
  0025e	68 80 00 00 00	 push	 128			; 00000080H
  00263	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  00268	a3 00 00 00 00	 mov	 DWORD PTR ?small_pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12574: 	small_pilot_rhs_side_mfd_texture_screen = create_user_texture_screen (SMALL_MFD_VIEWPORT_SIZE, SMALL_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  0026d	6a 00		 push	 0
  0026f	6a 02		 push	 2
  00271	68 80 00 00 00	 push	 128			; 00000080H
  00276	68 80 00 00 00	 push	 128			; 00000080H
  0027b	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  00280	a3 00 00 00 00	 mov	 DWORD PTR ?small_pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12575: 	small_pilot_text_display_texture_screen = create_user_texture_screen (SMALL_MFD_VIEWPORT_SIZE, SMALL_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  00285	6a 00		 push	 0
  00287	6a 02		 push	 2
  00289	68 80 00 00 00	 push	 128			; 00000080H
  0028e	68 80 00 00 00	 push	 128			; 00000080H
  00293	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  00298	a3 00 00 00 00	 mov	 DWORD PTR ?small_pilot_text_display_texture_screen@@3PAUSCREEN@@A, eax

; 12576: 
; 12577: 	small_co_pilot_lhs_main_mfd_texture_screen = create_user_texture_screen (SMALL_MFD_VIEWPORT_SIZE, SMALL_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  0029d	6a 00		 push	 0
  0029f	6a 02		 push	 2
  002a1	68 80 00 00 00	 push	 128			; 00000080H
  002a6	68 80 00 00 00	 push	 128			; 00000080H
  002ab	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  002b0	a3 00 00 00 00	 mov	 DWORD PTR ?small_co_pilot_lhs_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12578: 	small_co_pilot_rhs_main_mfd_texture_screen = create_user_texture_screen (SMALL_MFD_VIEWPORT_SIZE, SMALL_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  002b5	6a 00		 push	 0
  002b7	6a 02		 push	 2
  002b9	68 80 00 00 00	 push	 128			; 00000080H
  002be	68 80 00 00 00	 push	 128			; 00000080H
  002c3	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  002c8	a3 00 00 00 00	 mov	 DWORD PTR ?small_co_pilot_rhs_main_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12579: 	small_co_pilot_lhs_side_mfd_texture_screen = create_user_texture_screen (SMALL_MFD_VIEWPORT_SIZE, SMALL_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  002cd	6a 00		 push	 0
  002cf	6a 02		 push	 2
  002d1	68 80 00 00 00	 push	 128			; 00000080H
  002d6	68 80 00 00 00	 push	 128			; 00000080H
  002db	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  002e0	a3 00 00 00 00	 mov	 DWORD PTR ?small_co_pilot_lhs_side_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12580: 	small_co_pilot_rhs_side_mfd_texture_screen = create_user_texture_screen (SMALL_MFD_VIEWPORT_SIZE, SMALL_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  002e5	6a 00		 push	 0
  002e7	6a 02		 push	 2
  002e9	68 80 00 00 00	 push	 128			; 00000080H
  002ee	68 80 00 00 00	 push	 128			; 00000080H
  002f3	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  002f8	a3 00 00 00 00	 mov	 DWORD PTR ?small_co_pilot_rhs_side_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12581: 	small_co_pilot_text_display_texture_screen = create_user_texture_screen (SMALL_MFD_VIEWPORT_SIZE, SMALL_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  002fd	6a 00		 push	 0
  002ff	6a 02		 push	 2
  00301	68 80 00 00 00	 push	 128			; 00000080H
  00306	68 80 00 00 00	 push	 128			; 00000080H
  0030b	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  00310	a3 00 00 00 00	 mov	 DWORD PTR ?small_co_pilot_text_display_texture_screen@@3PAUSCREEN@@A, eax

; 12582: 
; 12583: 	full_mfd_texture_screen = create_system_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD, TEXTURE_TYPE_SINGLEALPHA);

  00315	6a 02		 push	 2
  00317	68 f9 00 00 00	 push	 249			; 000000f9H
  0031c	68 00 01 00 00	 push	 256			; 00000100H
  00321	68 00 01 00 00	 push	 256			; 00000100H
  00326	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  0032b	a3 00 00 00 00	 mov	 DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 12584: 
; 12585: 	set_rgb_colour (MFD_COLOUR1,              0, 255,   0, 255);

  00330	b8 04 00 00 00	 mov	 eax, 4
  00335	6b c8 00	 imul	 ecx, eax, 0
  00338	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  0033f	b8 04 00 00 00	 mov	 eax, 4
  00344	6b c8 00	 imul	 ecx, eax, 0
  00347	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  0034e	b8 04 00 00 00	 mov	 eax, 4
  00353	6b c8 00	 imul	 ecx, eax, 0
  00356	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  0035d	b8 04 00 00 00	 mov	 eax, 4
  00362	6b c8 00	 imul	 ecx, eax, 0
  00365	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 12586: 	set_rgb_colour (MFD_COLOUR2,              0, 200,   0, 255);

  0036c	b8 04 00 00 00	 mov	 eax, 4
  00371	c1 e0 00	 shl	 eax, 0
  00374	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  0037b	b8 04 00 00 00	 mov	 eax, 4
  00380	c1 e0 00	 shl	 eax, 0
  00383	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  0038a	b8 04 00 00 00	 mov	 eax, 4
  0038f	c1 e0 00	 shl	 eax, 0
  00392	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00399	b8 04 00 00 00	 mov	 eax, 4
  0039e	c1 e0 00	 shl	 eax, 0
  003a1	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 12587: 	set_rgb_colour (MFD_COLOUR3,              0, 176,   0, 255);

  003a8	b8 04 00 00 00	 mov	 eax, 4
  003ad	d1 e0		 shl	 eax, 1
  003af	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  003b6	b8 04 00 00 00	 mov	 eax, 4
  003bb	d1 e0		 shl	 eax, 1
  003bd	c6 80 01 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 176 ; 000000b0H
  003c4	b8 04 00 00 00	 mov	 eax, 4
  003c9	d1 e0		 shl	 eax, 1
  003cb	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  003d2	b8 04 00 00 00	 mov	 eax, 4
  003d7	d1 e0		 shl	 eax, 1
  003d9	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 12588: 	set_rgb_colour (MFD_COLOUR4,              0, 151,   0, 255);

  003e0	b8 04 00 00 00	 mov	 eax, 4
  003e5	6b c8 03	 imul	 ecx, eax, 3
  003e8	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  003ef	b8 04 00 00 00	 mov	 eax, 4
  003f4	6b c8 03	 imul	 ecx, eax, 3
  003f7	c6 81 01 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 151 ; 00000097H
  003fe	b8 04 00 00 00	 mov	 eax, 4
  00403	6b c8 03	 imul	 ecx, eax, 3
  00406	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  0040d	b8 04 00 00 00	 mov	 eax, 4
  00412	6b c8 03	 imul	 ecx, eax, 3
  00415	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 12589: 	set_rgb_colour (MFD_COLOUR5,              0, 128,   0, 255);

  0041c	b8 04 00 00 00	 mov	 eax, 4
  00421	c1 e0 02	 shl	 eax, 2
  00424	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  0042b	b8 04 00 00 00	 mov	 eax, 4
  00430	c1 e0 02	 shl	 eax, 2
  00433	c6 80 01 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 128 ; 00000080H
  0043a	b8 04 00 00 00	 mov	 eax, 4
  0043f	c1 e0 02	 shl	 eax, 2
  00442	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00449	b8 04 00 00 00	 mov	 eax, 4
  0044e	c1 e0 02	 shl	 eax, 2
  00451	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 12590: 	set_rgb_colour (MFD_COLOUR6,             40,  68,  56, 255);

  00458	b8 04 00 00 00	 mov	 eax, 4
  0045d	6b c8 05	 imul	 ecx, eax, 5
  00460	c6 81 02 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 40 ; 00000028H
  00467	b8 04 00 00 00	 mov	 eax, 4
  0046c	6b c8 05	 imul	 ecx, eax, 5
  0046f	c6 81 01 00 00
	00 44		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 68 ; 00000044H
  00476	b8 04 00 00 00	 mov	 eax, 4
  0047b	6b c8 05	 imul	 ecx, eax, 5
  0047e	c6 81 00 00 00
	00 38		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 56 ; 00000038H
  00485	b8 04 00 00 00	 mov	 eax, 4
  0048a	6b c8 05	 imul	 ecx, eax, 5
  0048d	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 12591: 	set_rgb_colour (MFD_CONTOUR_COLOUR,     255, 100,   0, 255);

  00494	b8 04 00 00 00	 mov	 eax, 4
  00499	6b c8 06	 imul	 ecx, eax, 6
  0049c	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  004a3	b8 04 00 00 00	 mov	 eax, 4
  004a8	6b c8 06	 imul	 ecx, eax, 6
  004ab	c6 81 01 00 00
	00 64		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 100 ; 00000064H
  004b2	b8 04 00 00 00	 mov	 eax, 4
  004b7	6b c8 06	 imul	 ecx, eax, 6
  004ba	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  004c1	b8 04 00 00 00	 mov	 eax, 4
  004c6	6b c8 06	 imul	 ecx, eax, 6
  004c9	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 12592: 	set_rgb_colour (MFD_RIVER_COLOUR,        50,  75, 225, 255);

  004d0	b8 04 00 00 00	 mov	 eax, 4
  004d5	6b c8 07	 imul	 ecx, eax, 7
  004d8	c6 81 02 00 00
	00 32		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 50 ; 00000032H
  004df	b8 04 00 00 00	 mov	 eax, 4
  004e4	6b c8 07	 imul	 ecx, eax, 7
  004e7	c6 81 01 00 00
	00 4b		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 75 ; 0000004bH
  004ee	b8 04 00 00 00	 mov	 eax, 4
  004f3	6b c8 07	 imul	 ecx, eax, 7
  004f6	c6 81 00 00 00
	00 e1		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 225 ; 000000e1H
  004fd	b8 04 00 00 00	 mov	 eax, 4
  00502	6b c8 07	 imul	 ecx, eax, 7
  00505	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 12593: 	set_rgb_colour (MFD_ROAD_COLOUR,        255, 200,   0, 255);

  0050c	b8 04 00 00 00	 mov	 eax, 4
  00511	c1 e0 03	 shl	 eax, 3
  00514	c6 80 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 255 ; 000000ffH
  0051b	b8 04 00 00 00	 mov	 eax, 4
  00520	c1 e0 03	 shl	 eax, 3
  00523	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  0052a	b8 04 00 00 00	 mov	 eax, 4
  0052f	c1 e0 03	 shl	 eax, 3
  00532	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00539	b8 04 00 00 00	 mov	 eax, 4
  0053e	c1 e0 03	 shl	 eax, 3
  00541	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 12594: 	set_rgb_colour (MFD_BACKGROUND_COLOUR,   15,  24,  16, 255);

  00548	b8 04 00 00 00	 mov	 eax, 4
  0054d	6b c8 09	 imul	 ecx, eax, 9
  00550	c6 81 02 00 00
	00 0f		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 15 ; 0000000fH
  00557	b8 04 00 00 00	 mov	 eax, 4
  0055c	6b c8 09	 imul	 ecx, eax, 9
  0055f	c6 81 01 00 00
	00 18		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 24 ; 00000018H
  00566	b8 04 00 00 00	 mov	 eax, 4
  0056b	6b c8 09	 imul	 ecx, eax, 9
  0056e	c6 81 00 00 00
	00 10		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 16 ; 00000010H
  00575	b8 04 00 00 00	 mov	 eax, 4
  0057a	6b c8 09	 imul	 ecx, eax, 9
  0057d	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 12595: 	set_rgb_colour (MFD_CLEAR_COLOUR,         0,   0,   0,   0);

  00584	b8 04 00 00 00	 mov	 eax, 4
  00589	6b c8 0a	 imul	 ecx, eax, 10
  0058c	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  00593	b8 04 00 00 00	 mov	 eax, 4
  00598	6b c8 0a	 imul	 ecx, eax, 10
  0059b	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 0
  005a2	b8 04 00 00 00	 mov	 eax, 4
  005a7	6b c8 0a	 imul	 ecx, eax, 10
  005aa	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  005b1	b8 04 00 00 00	 mov	 eax, 4
  005b6	6b c8 0a	 imul	 ecx, eax, 10
  005b9	c6 81 03 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 0

; 12596: 
; 12597: 	if (command_line_colour_mfd)

  005c0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_colour_mfd@@3HA, 0 ; command_line_colour_mfd
  005c7	0f 84 e5 01 00
	00		 je	 $LN16@initialise

; 12598: 	{
; 12599: 		set_rgb_colour (MFD_COLOUR_BLUE,          60, 160, 255,  255);

  005cd	b8 04 00 00 00	 mov	 eax, 4
  005d2	6b c8 0c	 imul	 ecx, eax, 12
  005d5	c6 81 02 00 00
	00 3c		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 60 ; 0000003cH
  005dc	b8 04 00 00 00	 mov	 eax, 4
  005e1	6b c8 0c	 imul	 ecx, eax, 12
  005e4	c6 81 01 00 00
	00 a0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 160 ; 000000a0H
  005eb	b8 04 00 00 00	 mov	 eax, 4
  005f0	6b c8 0c	 imul	 ecx, eax, 12
  005f3	c6 81 00 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 255 ; 000000ffH
  005fa	b8 04 00 00 00	 mov	 eax, 4
  005ff	6b c8 0c	 imul	 ecx, eax, 12
  00602	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 12600: 		set_rgb_colour (MFD_COLOUR_DARK_BLUE,	   0,   0,  96,  255);

  00609	b8 04 00 00 00	 mov	 eax, 4
  0060e	6b c8 11	 imul	 ecx, eax, 17
  00611	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  00618	b8 04 00 00 00	 mov	 eax, 4
  0061d	6b c8 11	 imul	 ecx, eax, 17
  00620	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 0
  00627	b8 04 00 00 00	 mov	 eax, 4
  0062c	6b c8 11	 imul	 ecx, eax, 17
  0062f	c6 81 00 00 00
	00 60		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 96 ; 00000060H
  00636	b8 04 00 00 00	 mov	 eax, 4
  0063b	6b c8 11	 imul	 ecx, eax, 17
  0063e	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 12601: 		set_rgb_colour (MFD_COLOUR_YELLOW,       230, 230,  40,  255);

  00645	b8 04 00 00 00	 mov	 eax, 4
  0064a	6b c8 0d	 imul	 ecx, eax, 13
  0064d	c6 81 02 00 00
	00 e6		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 230 ; 000000e6H
  00654	b8 04 00 00 00	 mov	 eax, 4
  00659	6b c8 0d	 imul	 ecx, eax, 13
  0065c	c6 81 01 00 00
	00 e6		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 230 ; 000000e6H
  00663	b8 04 00 00 00	 mov	 eax, 4
  00668	6b c8 0d	 imul	 ecx, eax, 13
  0066b	c6 81 00 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 40 ; 00000028H
  00672	b8 04 00 00 00	 mov	 eax, 4
  00677	6b c8 0d	 imul	 ecx, eax, 13
  0067a	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 12602: 		set_rgb_colour (MFD_COLOUR_DARK_YELLOW,  165, 165,  30,  255);

  00681	b8 04 00 00 00	 mov	 eax, 4
  00686	6b c8 0e	 imul	 ecx, eax, 14
  00689	c6 81 02 00 00
	00 a5		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 165 ; 000000a5H
  00690	b8 04 00 00 00	 mov	 eax, 4
  00695	6b c8 0e	 imul	 ecx, eax, 14
  00698	c6 81 01 00 00
	00 a5		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 165 ; 000000a5H
  0069f	b8 04 00 00 00	 mov	 eax, 4
  006a4	6b c8 0e	 imul	 ecx, eax, 14
  006a7	c6 81 00 00 00
	00 1e		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 30 ; 0000001eH
  006ae	b8 04 00 00 00	 mov	 eax, 4
  006b3	6b c8 0e	 imul	 ecx, eax, 14
  006b6	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 12603: 		set_rgb_colour (MFD_COLOUR_RED,          255,  40,  40,  255);

  006bd	b8 04 00 00 00	 mov	 eax, 4
  006c2	6b c8 0f	 imul	 ecx, eax, 15
  006c5	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  006cc	b8 04 00 00 00	 mov	 eax, 4
  006d1	6b c8 0f	 imul	 ecx, eax, 15
  006d4	c6 81 01 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 40 ; 00000028H
  006db	b8 04 00 00 00	 mov	 eax, 4
  006e0	6b c8 0f	 imul	 ecx, eax, 15
  006e3	c6 81 00 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 40 ; 00000028H
  006ea	b8 04 00 00 00	 mov	 eax, 4
  006ef	6b c8 0f	 imul	 ecx, eax, 15
  006f2	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 12604: 		set_rgb_colour (MFD_COLOUR_DARK_RED,	 148,   8,   8,  255);

  006f9	b8 04 00 00 00	 mov	 eax, 4
  006fe	6b c8 12	 imul	 ecx, eax, 18
  00701	c6 81 02 00 00
	00 94		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 148 ; 00000094H
  00708	b8 04 00 00 00	 mov	 eax, 4
  0070d	6b c8 12	 imul	 ecx, eax, 18
  00710	c6 81 01 00 00
	00 08		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 8
  00717	b8 04 00 00 00	 mov	 eax, 4
  0071c	6b c8 12	 imul	 ecx, eax, 18
  0071f	c6 81 00 00 00
	00 08		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 8
  00726	b8 04 00 00 00	 mov	 eax, 4
  0072b	6b c8 12	 imul	 ecx, eax, 18
  0072e	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 12605: 		set_rgb_colour (MFD_COLOUR_CYAN,          60, 255, 230,  255);

  00735	b8 04 00 00 00	 mov	 eax, 4
  0073a	c1 e0 04	 shl	 eax, 4
  0073d	c6 80 02 00 00
	00 3c		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 60 ; 0000003cH
  00744	b8 04 00 00 00	 mov	 eax, 4
  00749	c1 e0 04	 shl	 eax, 4
  0074c	c6 80 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 255 ; 000000ffH
  00753	b8 04 00 00 00	 mov	 eax, 4
  00758	c1 e0 04	 shl	 eax, 4
  0075b	c6 80 00 00 00
	00 e6		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 230 ; 000000e6H
  00762	b8 04 00 00 00	 mov	 eax, 4
  00767	c1 e0 04	 shl	 eax, 4
  0076a	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 12606: 		set_rgb_colour (MFD_COLOUR_WHITE,        200, 200, 240,  255);

  00771	b8 04 00 00 00	 mov	 eax, 4
  00776	6b c8 13	 imul	 ecx, eax, 19
  00779	c6 81 02 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 200 ; 000000c8H
  00780	b8 04 00 00 00	 mov	 eax, 4
  00785	6b c8 13	 imul	 ecx, eax, 19
  00788	c6 81 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 200 ; 000000c8H
  0078f	b8 04 00 00 00	 mov	 eax, 4
  00794	6b c8 13	 imul	 ecx, eax, 19
  00797	c6 81 00 00 00
	00 f0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 240 ; 000000f0H
  0079e	b8 04 00 00 00	 mov	 eax, 4
  007a3	6b c8 13	 imul	 ecx, eax, 19
  007a6	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 12607: 	}
; 12608: 	else

  007ad	e9 e0 01 00 00	 jmp	 $LN17@initialise
$LN16@initialise:

; 12609: 	{
; 12610: 		set_rgb_colour (MFD_COLOUR_BLUE,           0, 200,   0, 255);

  007b2	b8 04 00 00 00	 mov	 eax, 4
  007b7	6b c8 0c	 imul	 ecx, eax, 12
  007ba	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  007c1	b8 04 00 00 00	 mov	 eax, 4
  007c6	6b c8 0c	 imul	 ecx, eax, 12
  007c9	c6 81 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 200 ; 000000c8H
  007d0	b8 04 00 00 00	 mov	 eax, 4
  007d5	6b c8 0c	 imul	 ecx, eax, 12
  007d8	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  007df	b8 04 00 00 00	 mov	 eax, 4
  007e4	6b c8 0c	 imul	 ecx, eax, 12
  007e7	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 12611: 		set_rgb_colour (MFD_COLOUR_DARK_BLUE,      0, 128,   0, 255);

  007ee	b8 04 00 00 00	 mov	 eax, 4
  007f3	6b c8 11	 imul	 ecx, eax, 17
  007f6	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  007fd	b8 04 00 00 00	 mov	 eax, 4
  00802	6b c8 11	 imul	 ecx, eax, 17
  00805	c6 81 01 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 128 ; 00000080H
  0080c	b8 04 00 00 00	 mov	 eax, 4
  00811	6b c8 11	 imul	 ecx, eax, 17
  00814	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  0081b	b8 04 00 00 00	 mov	 eax, 4
  00820	6b c8 11	 imul	 ecx, eax, 17
  00823	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 12612: 		set_rgb_colour (MFD_COLOUR_YELLOW,         0, 255,   0, 255);

  0082a	b8 04 00 00 00	 mov	 eax, 4
  0082f	6b c8 0d	 imul	 ecx, eax, 13
  00832	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  00839	b8 04 00 00 00	 mov	 eax, 4
  0083e	6b c8 0d	 imul	 ecx, eax, 13
  00841	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  00848	b8 04 00 00 00	 mov	 eax, 4
  0084d	6b c8 0d	 imul	 ecx, eax, 13
  00850	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00857	b8 04 00 00 00	 mov	 eax, 4
  0085c	6b c8 0d	 imul	 ecx, eax, 13
  0085f	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 12613: 		set_rgb_colour (MFD_COLOUR_DARK_YELLOW,    0, 200,   0, 255);

  00866	b8 04 00 00 00	 mov	 eax, 4
  0086b	6b c8 0e	 imul	 ecx, eax, 14
  0086e	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  00875	b8 04 00 00 00	 mov	 eax, 4
  0087a	6b c8 0e	 imul	 ecx, eax, 14
  0087d	c6 81 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 200 ; 000000c8H
  00884	b8 04 00 00 00	 mov	 eax, 4
  00889	6b c8 0e	 imul	 ecx, eax, 14
  0088c	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00893	b8 04 00 00 00	 mov	 eax, 4
  00898	6b c8 0e	 imul	 ecx, eax, 14
  0089b	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 12614: 		set_rgb_colour (MFD_COLOUR_RED,            0, 200,   0, 255);

  008a2	b8 04 00 00 00	 mov	 eax, 4
  008a7	6b c8 0f	 imul	 ecx, eax, 15
  008aa	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  008b1	b8 04 00 00 00	 mov	 eax, 4
  008b6	6b c8 0f	 imul	 ecx, eax, 15
  008b9	c6 81 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 200 ; 000000c8H
  008c0	b8 04 00 00 00	 mov	 eax, 4
  008c5	6b c8 0f	 imul	 ecx, eax, 15
  008c8	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  008cf	b8 04 00 00 00	 mov	 eax, 4
  008d4	6b c8 0f	 imul	 ecx, eax, 15
  008d7	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 12615: 		set_rgb_colour (MFD_COLOUR_DARK_RED,       0, 128,   0, 255);

  008de	b8 04 00 00 00	 mov	 eax, 4
  008e3	6b c8 12	 imul	 ecx, eax, 18
  008e6	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  008ed	b8 04 00 00 00	 mov	 eax, 4
  008f2	6b c8 12	 imul	 ecx, eax, 18
  008f5	c6 81 01 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 128 ; 00000080H
  008fc	b8 04 00 00 00	 mov	 eax, 4
  00901	6b c8 12	 imul	 ecx, eax, 18
  00904	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  0090b	b8 04 00 00 00	 mov	 eax, 4
  00910	6b c8 12	 imul	 ecx, eax, 18
  00913	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 12616: 		set_rgb_colour (MFD_COLOUR_CYAN,           0, 255,   0, 255);

  0091a	b8 04 00 00 00	 mov	 eax, 4
  0091f	c1 e0 04	 shl	 eax, 4
  00922	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  00929	b8 04 00 00 00	 mov	 eax, 4
  0092e	c1 e0 04	 shl	 eax, 4
  00931	c6 80 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 255 ; 000000ffH
  00938	b8 04 00 00 00	 mov	 eax, 4
  0093d	c1 e0 04	 shl	 eax, 4
  00940	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00947	b8 04 00 00 00	 mov	 eax, 4
  0094c	c1 e0 04	 shl	 eax, 4
  0094f	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 12617: 		set_rgb_colour (MFD_COLOUR_WHITE,          0, 255,   0, 255);

  00956	b8 04 00 00 00	 mov	 eax, 4
  0095b	6b c8 13	 imul	 ecx, eax, 19
  0095e	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  00965	b8 04 00 00 00	 mov	 eax, 4
  0096a	6b c8 13	 imul	 ecx, eax, 19
  0096d	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  00974	b8 04 00 00 00	 mov	 eax, 4
  00979	6b c8 13	 imul	 ecx, eax, 19
  0097c	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00983	b8 04 00 00 00	 mov	 eax, 4
  00988	6b c8 13	 imul	 ecx, eax, 19
  0098b	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH
$LN17@initialise:

; 12618: 	}
; 12619: 
; 12620: 	set_rgb_colour (TEXT_COLOUR1,           254, 204,   1, 255);

  00992	b8 04 00 00 00	 mov	 eax, 4
  00997	6b c8 00	 imul	 ecx, eax, 0
  0099a	c6 81 02 00 00
	00 fe		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx+2], 254 ; 000000feH
  009a1	b8 04 00 00 00	 mov	 eax, 4
  009a6	6b c8 00	 imul	 ecx, eax, 0
  009a9	c6 81 01 00 00
	00 cc		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx+1], 204 ; 000000ccH
  009b0	b8 04 00 00 00	 mov	 eax, 4
  009b5	6b c8 00	 imul	 ecx, eax, 0
  009b8	c6 81 00 00 00
	00 01		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx], 1
  009bf	b8 04 00 00 00	 mov	 eax, 4
  009c4	6b c8 00	 imul	 ecx, eax, 0
  009c7	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 12621: 	set_rgb_colour (TEXT_BACKGROUND_COLOUR,  66,  35,  11, 255);

  009ce	b8 04 00 00 00	 mov	 eax, 4
  009d3	c1 e0 00	 shl	 eax, 0
  009d6	c6 80 02 00 00
	00 42		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax+2], 66 ; 00000042H
  009dd	b8 04 00 00 00	 mov	 eax, 4
  009e2	c1 e0 00	 shl	 eax, 0
  009e5	c6 80 01 00 00
	00 23		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax+1], 35 ; 00000023H
  009ec	b8 04 00 00 00	 mov	 eax, 4
  009f1	c1 e0 00	 shl	 eax, 0
  009f4	c6 80 00 00 00
	00 0b		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax], 11 ; 0000000bH
  009fb	b8 04 00 00 00	 mov	 eax, 4
  00a00	c1 e0 00	 shl	 eax, 0
  00a03	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 12622: 
; 12623:    set_rgb_colour (clear_mfd_colour, 255, 255, 255, 0);

  00a0a	c6 05 02 00 00
	00 ff		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A+2, 255 ; 000000ffH
  00a11	c6 05 01 00 00
	00 ff		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A+1, 255 ; 000000ffH
  00a18	c6 05 00 00 00
	00 ff		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A, 255 ; 000000ffH
  00a1f	c6 05 03 00 00
	00 00		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A+3, 0

; 12624: 
; 12625: 	////////////////////////////////////////
; 12626: 	//
; 12627: 	// weapon display lines
; 12628: 	//
; 12629: 	////////////////////////////////////////
; 12630: 
; 12631: 	//
; 12632: 	// main display - with stub wings
; 12633: 	//
; 12634: 
; 12635: 	num_main_weapon_line_points_with_stub_wings = get_object_3d_number_of_poly_lines (OBJECT_3D_COMANCHE_COCKPIT_WEAPONS_DISPLAY_ALL);

  00a26	68 e1 09 00 00	 push	 2529			; 000009e1H
  00a2b	e8 00 00 00 00	 call	 ?get_object_3d_number_of_poly_lines@@YGHH@Z ; get_object_3d_number_of_poly_lines
  00a30	a3 00 00 00 00	 mov	 DWORD PTR ?num_main_weapon_line_points_with_stub_wings@@3HA, eax

; 12636: 
; 12637: 	ASSERT (num_main_weapon_line_points_with_stub_wings > 0);

  00a35	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?num_main_weapon_line_points_with_stub_wings@@3HA, 0
  00a3c	7f 18		 jg	 SHORT $LN18@initialise
  00a3e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_comanche_mfd@@YGXXZ@4JA
  00a43	83 c0 7c	 add	 eax, 124		; 0000007cH
  00a46	50		 push	 eax
  00a47	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a4c	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@KDAIMOAB@num_main_weapon_line_points_wit@
  00a51	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN18@initialise:

; 12638: 
; 12639: 	ASSERT ((num_main_weapon_line_points_with_stub_wings & 1) == 0);

  00a56	a1 00 00 00 00	 mov	 eax, DWORD PTR ?num_main_weapon_line_points_with_stub_wings@@3HA
  00a5b	83 e0 01	 and	 eax, 1
  00a5e	74 18		 je	 SHORT $LN19@initialise
  00a60	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_comanche_mfd@@YGXXZ@4JA
  00a65	83 c0 7e	 add	 eax, 126		; 0000007eH
  00a68	50		 push	 eax
  00a69	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a6e	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@OOPGJMJB@?$CInum_main_weapon_line_points_wi@
  00a73	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN19@initialise:

; 12640: 
; 12641: 	main_weapon_line_points_with_stub_wings = (vec3d *) safe_malloc (sizeof (vec3d) * num_main_weapon_line_points_with_stub_wings);

  00a78	6b 05 00 00 00
	00 0c		 imul	 eax, DWORD PTR ?num_main_weapon_line_points_with_stub_wings@@3HA, 12
  00a7f	50		 push	 eax
  00a80	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00a85	a3 00 00 00 00	 mov	 DWORD PTR ?main_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A, eax

; 12642: 
; 12643: 	get_object_3d_poly_line_data (OBJECT_3D_COMANCHE_COCKPIT_WEAPONS_DISPLAY_ALL, main_weapon_line_points_with_stub_wings);

  00a8a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  00a8f	50		 push	 eax
  00a90	68 e1 09 00 00	 push	 2529			; 000009e1H
  00a95	e8 00 00 00 00	 call	 ?get_object_3d_poly_line_data@@YGXHPAUVEC3D@@@Z ; get_object_3d_poly_line_data

; 12644: 
; 12645: 	{
; 12646: 		int
; 12647: 			i;
; 12648: 
; 12649: 		for (i = 0; i < num_main_weapon_line_points_with_stub_wings; i++)

  00a9a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$4[ebp], 0
  00aa1	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  00aa3	8b 45 fc	 mov	 eax, DWORD PTR _i$4[ebp]
  00aa6	83 c0 01	 add	 eax, 1
  00aa9	89 45 fc	 mov	 DWORD PTR _i$4[ebp], eax
$LN4@initialise:
  00aac	8b 45 fc	 mov	 eax, DWORD PTR _i$4[ebp]
  00aaf	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?num_main_weapon_line_points_with_stub_wings@@3HA
  00ab5	0f 8d 9d 00 00
	00		 jge	 $LN3@initialise

; 12650: 		{
; 12651: 			main_weapon_line_points_with_stub_wings[i].x *= MAIN_WEAPON_LINE_POINT_SCALE;

  00abb	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$4[ebp], 12
  00abf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?main_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  00ac5	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00aca	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  00ad2	6b 55 fc 0c	 imul	 edx, DWORD PTR _i$4[ebp], 12
  00ad6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  00adb	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 12652: 			main_weapon_line_points_with_stub_wings[i].y *= MAIN_WEAPON_LINE_POINT_SCALE;

  00ae0	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$4[ebp], 12
  00ae4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?main_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  00aea	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  00af0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  00af8	6b 55 fc 0c	 imul	 edx, DWORD PTR _i$4[ebp], 12
  00afc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  00b01	f3 0f 11 44 10
	04		 movss	 DWORD PTR [eax+edx+4], xmm0

; 12653: 
; 12654: 			main_weapon_line_points_with_stub_wings[i].x += MAIN_WEAPON_LINE_POINT_X_TRANSLATE;

  00b07	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$4[ebp], 12
  00b0b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?main_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  00b11	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00b16	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@00000000
  00b1e	6b 55 fc 0c	 imul	 edx, DWORD PTR _i$4[ebp], 12
  00b22	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  00b27	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 12655: 			main_weapon_line_points_with_stub_wings[i].y += MAIN_WEAPON_LINE_POINT_Y_TRANSLATE;

  00b2c	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$4[ebp], 12
  00b30	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?main_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  00b36	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  00b3c	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f4ccccd
  00b44	6b 55 fc 0c	 imul	 edx, DWORD PTR _i$4[ebp], 12
  00b48	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  00b4d	f3 0f 11 44 10
	04		 movss	 DWORD PTR [eax+edx+4], xmm0

; 12656: 		}

  00b53	e9 4b ff ff ff	 jmp	 $LN2@initialise
$LN3@initialise:

; 12657: 	}
; 12658: 
; 12659: 	//
; 12660: 	// main display - without stub wings
; 12661: 	//
; 12662: 
; 12663: 	num_main_weapon_line_points_without_stub_wings = get_object_3d_number_of_poly_lines (OBJECT_3D_COMANCHE_COCKPIT_WEAPONS_DISPLAY);

  00b58	68 e0 09 00 00	 push	 2528			; 000009e0H
  00b5d	e8 00 00 00 00	 call	 ?get_object_3d_number_of_poly_lines@@YGHH@Z ; get_object_3d_number_of_poly_lines
  00b62	a3 00 00 00 00	 mov	 DWORD PTR ?num_main_weapon_line_points_without_stub_wings@@3HA, eax

; 12664: 
; 12665: 	ASSERT (num_main_weapon_line_points_without_stub_wings > 0);

  00b67	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?num_main_weapon_line_points_without_stub_wings@@3HA, 0
  00b6e	7f 1a		 jg	 SHORT $LN20@initialise
  00b70	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_comanche_mfd@@YGXXZ@4JA
  00b75	05 98 00 00 00	 add	 eax, 152		; 00000098H
  00b7a	50		 push	 eax
  00b7b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b80	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@IMKGINEB@num_main_weapon_line_points_wit@
  00b85	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN20@initialise:

; 12666: 
; 12667: 	ASSERT ((num_main_weapon_line_points_without_stub_wings & 1) == 0);

  00b8a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?num_main_weapon_line_points_without_stub_wings@@3HA
  00b8f	83 e0 01	 and	 eax, 1
  00b92	74 1a		 je	 SHORT $LN21@initialise
  00b94	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_comanche_mfd@@YGXXZ@4JA
  00b99	05 9a 00 00 00	 add	 eax, 154		; 0000009aH
  00b9e	50		 push	 eax
  00b9f	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ba4	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@NKPFIOED@?$CInum_main_weapon_line_points_wi@
  00ba9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN21@initialise:

; 12668: 
; 12669: 	main_weapon_line_points_without_stub_wings = (vec3d *) safe_malloc (sizeof (vec3d) * num_main_weapon_line_points_without_stub_wings);

  00bae	6b 05 00 00 00
	00 0c		 imul	 eax, DWORD PTR ?num_main_weapon_line_points_without_stub_wings@@3HA, 12
  00bb5	50		 push	 eax
  00bb6	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00bbb	a3 00 00 00 00	 mov	 DWORD PTR ?main_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A, eax

; 12670: 
; 12671: 	get_object_3d_poly_line_data (OBJECT_3D_COMANCHE_COCKPIT_WEAPONS_DISPLAY, main_weapon_line_points_without_stub_wings);

  00bc0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00bc5	50		 push	 eax
  00bc6	68 e0 09 00 00	 push	 2528			; 000009e0H
  00bcb	e8 00 00 00 00	 call	 ?get_object_3d_poly_line_data@@YGXHPAUVEC3D@@@Z ; get_object_3d_poly_line_data

; 12672: 
; 12673: 	{
; 12674: 		int
; 12675: 			i;
; 12676: 
; 12677: 		for (i = 0; i < num_main_weapon_line_points_without_stub_wings; i++)

  00bd0	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$3[ebp], 0
  00bd7	eb 09		 jmp	 SHORT $LN7@initialise
$LN5@initialise:
  00bd9	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  00bdc	83 c0 01	 add	 eax, 1
  00bdf	89 45 f8	 mov	 DWORD PTR _i$3[ebp], eax
$LN7@initialise:
  00be2	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  00be5	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?num_main_weapon_line_points_without_stub_wings@@3HA
  00beb	0f 8d 9d 00 00
	00		 jge	 $LN6@initialise

; 12678: 		{
; 12679: 			main_weapon_line_points_without_stub_wings[i].x *= MAIN_WEAPON_LINE_POINT_SCALE;

  00bf1	6b 45 f8 0c	 imul	 eax, DWORD PTR _i$3[ebp], 12
  00bf5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?main_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00bfb	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00c00	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  00c08	6b 55 f8 0c	 imul	 edx, DWORD PTR _i$3[ebp], 12
  00c0c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00c11	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 12680: 			main_weapon_line_points_without_stub_wings[i].y *= MAIN_WEAPON_LINE_POINT_SCALE;

  00c16	6b 45 f8 0c	 imul	 eax, DWORD PTR _i$3[ebp], 12
  00c1a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?main_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00c20	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  00c26	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  00c2e	6b 55 f8 0c	 imul	 edx, DWORD PTR _i$3[ebp], 12
  00c32	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00c37	f3 0f 11 44 10
	04		 movss	 DWORD PTR [eax+edx+4], xmm0

; 12681: 
; 12682: 			main_weapon_line_points_without_stub_wings[i].x += MAIN_WEAPON_LINE_POINT_X_TRANSLATE;

  00c3d	6b 45 f8 0c	 imul	 eax, DWORD PTR _i$3[ebp], 12
  00c41	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?main_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00c47	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00c4c	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@00000000
  00c54	6b 55 f8 0c	 imul	 edx, DWORD PTR _i$3[ebp], 12
  00c58	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00c5d	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 12683: 			main_weapon_line_points_without_stub_wings[i].y += MAIN_WEAPON_LINE_POINT_Y_TRANSLATE;

  00c62	6b 45 f8 0c	 imul	 eax, DWORD PTR _i$3[ebp], 12
  00c66	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?main_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00c6c	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  00c72	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f4ccccd
  00c7a	6b 55 f8 0c	 imul	 edx, DWORD PTR _i$3[ebp], 12
  00c7e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00c83	f3 0f 11 44 10
	04		 movss	 DWORD PTR [eax+edx+4], xmm0

; 12684: 		}

  00c89	e9 4b ff ff ff	 jmp	 $LN5@initialise
$LN6@initialise:

; 12685: 	}
; 12686: 
; 12687: 	//
; 12688: 	// side display - with stub wings
; 12689: 	//
; 12690: 
; 12691: 	num_side_weapon_line_points_with_stub_wings = get_object_3d_number_of_poly_lines (OBJECT_3D_COMANCHE_COCKPIT_WEAPONS_DISPLAY_ALL);

  00c8e	68 e1 09 00 00	 push	 2529			; 000009e1H
  00c93	e8 00 00 00 00	 call	 ?get_object_3d_number_of_poly_lines@@YGHH@Z ; get_object_3d_number_of_poly_lines
  00c98	a3 00 00 00 00	 mov	 DWORD PTR ?num_side_weapon_line_points_with_stub_wings@@3HA, eax

; 12692: 
; 12693: 	ASSERT (num_side_weapon_line_points_with_stub_wings > 0);

  00c9d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?num_side_weapon_line_points_with_stub_wings@@3HA, 0
  00ca4	7f 1a		 jg	 SHORT $LN22@initialise
  00ca6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_comanche_mfd@@YGXXZ@4JA
  00cab	05 b4 00 00 00	 add	 eax, 180		; 000000b4H
  00cb0	50		 push	 eax
  00cb1	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00cb6	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@MADCCJGI@num_side_weapon_line_points_wit@
  00cbb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN22@initialise:

; 12694: 
; 12695: 	ASSERT ((num_side_weapon_line_points_with_stub_wings & 1) == 0);

  00cc0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?num_side_weapon_line_points_with_stub_wings@@3HA
  00cc5	83 e0 01	 and	 eax, 1
  00cc8	74 1a		 je	 SHORT $LN23@initialise
  00cca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_comanche_mfd@@YGXXZ@4JA
  00ccf	05 b6 00 00 00	 add	 eax, 182		; 000000b6H
  00cd4	50		 push	 eax
  00cd5	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00cda	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@IOPOLEHA@?$CInum_side_weapon_line_points_wi@
  00cdf	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN23@initialise:

; 12696: 
; 12697: 	side_weapon_line_points_with_stub_wings = (vec3d *) safe_malloc (sizeof (vec3d) * num_side_weapon_line_points_with_stub_wings);

  00ce4	6b 05 00 00 00
	00 0c		 imul	 eax, DWORD PTR ?num_side_weapon_line_points_with_stub_wings@@3HA, 12
  00ceb	50		 push	 eax
  00cec	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00cf1	a3 00 00 00 00	 mov	 DWORD PTR ?side_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A, eax

; 12698: 
; 12699: 	get_object_3d_poly_line_data (OBJECT_3D_COMANCHE_COCKPIT_WEAPONS_DISPLAY_ALL, side_weapon_line_points_with_stub_wings);

  00cf6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?side_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  00cfb	50		 push	 eax
  00cfc	68 e1 09 00 00	 push	 2529			; 000009e1H
  00d01	e8 00 00 00 00	 call	 ?get_object_3d_poly_line_data@@YGXHPAUVEC3D@@@Z ; get_object_3d_poly_line_data

; 12700: 
; 12701: 	{
; 12702: 		int
; 12703: 			i;
; 12704: 
; 12705: 		for (i = 0; i < num_side_weapon_line_points_with_stub_wings; i++)

  00d06	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00d0d	eb 09		 jmp	 SHORT $LN10@initialise
$LN8@initialise:
  00d0f	8b 45 f4	 mov	 eax, DWORD PTR _i$2[ebp]
  00d12	83 c0 01	 add	 eax, 1
  00d15	89 45 f4	 mov	 DWORD PTR _i$2[ebp], eax
$LN10@initialise:
  00d18	8b 45 f4	 mov	 eax, DWORD PTR _i$2[ebp]
  00d1b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?num_side_weapon_line_points_with_stub_wings@@3HA
  00d21	0f 8d 9d 00 00
	00		 jge	 $LN9@initialise

; 12706: 		{
; 12707: 			side_weapon_line_points_with_stub_wings[i].x *= SIDE_WEAPON_LINE_POINT_SCALE;

  00d27	6b 45 f4 0c	 imul	 eax, DWORD PTR _i$2[ebp], 12
  00d2b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?side_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  00d31	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00d36	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  00d3e	6b 55 f4 0c	 imul	 edx, DWORD PTR _i$2[ebp], 12
  00d42	a1 00 00 00 00	 mov	 eax, DWORD PTR ?side_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  00d47	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 12708: 			side_weapon_line_points_with_stub_wings[i].y *= SIDE_WEAPON_LINE_POINT_SCALE;

  00d4c	6b 45 f4 0c	 imul	 eax, DWORD PTR _i$2[ebp], 12
  00d50	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?side_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  00d56	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  00d5c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  00d64	6b 55 f4 0c	 imul	 edx, DWORD PTR _i$2[ebp], 12
  00d68	a1 00 00 00 00	 mov	 eax, DWORD PTR ?side_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  00d6d	f3 0f 11 44 10
	04		 movss	 DWORD PTR [eax+edx+4], xmm0

; 12709: 
; 12710: 			side_weapon_line_points_with_stub_wings[i].x += SIDE_WEAPON_LINE_POINT_X_TRANSLATE;

  00d73	6b 45 f4 0c	 imul	 eax, DWORD PTR _i$2[ebp], 12
  00d77	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?side_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  00d7d	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00d82	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@becccccd
  00d8a	6b 55 f4 0c	 imul	 edx, DWORD PTR _i$2[ebp], 12
  00d8e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?side_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  00d93	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 12711: 			side_weapon_line_points_with_stub_wings[i].y += SIDE_WEAPON_LINE_POINT_Y_TRANSLATE;

  00d98	6b 45 f4 0c	 imul	 eax, DWORD PTR _i$2[ebp], 12
  00d9c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?side_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  00da2	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  00da8	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f4ccccd
  00db0	6b 55 f4 0c	 imul	 edx, DWORD PTR _i$2[ebp], 12
  00db4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?side_weapon_line_points_with_stub_wings@@3PAUVEC3D@@A
  00db9	f3 0f 11 44 10
	04		 movss	 DWORD PTR [eax+edx+4], xmm0

; 12712: 		}

  00dbf	e9 4b ff ff ff	 jmp	 $LN8@initialise
$LN9@initialise:

; 12713: 	}
; 12714: 
; 12715: 	//
; 12716: 	// side display - without stub wings
; 12717: 	//
; 12718: 
; 12719: 	num_side_weapon_line_points_without_stub_wings = get_object_3d_number_of_poly_lines (OBJECT_3D_COMANCHE_COCKPIT_WEAPONS_DISPLAY);

  00dc4	68 e0 09 00 00	 push	 2528			; 000009e0H
  00dc9	e8 00 00 00 00	 call	 ?get_object_3d_number_of_poly_lines@@YGHH@Z ; get_object_3d_number_of_poly_lines
  00dce	a3 00 00 00 00	 mov	 DWORD PTR ?num_side_weapon_line_points_without_stub_wings@@3HA, eax

; 12720: 
; 12721: 	ASSERT (num_side_weapon_line_points_without_stub_wings > 0);

  00dd3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?num_side_weapon_line_points_without_stub_wings@@3HA, 0
  00dda	7f 1a		 jg	 SHORT $LN24@initialise
  00ddc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_comanche_mfd@@YGXXZ@4JA
  00de1	05 d0 00 00 00	 add	 eax, 208		; 000000d0H
  00de6	50		 push	 eax
  00de7	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00dec	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@BMJDMBBE@num_side_weapon_line_points_wit@
  00df1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN24@initialise:

; 12722: 
; 12723: 	ASSERT ((num_side_weapon_line_points_without_stub_wings & 1) == 0);

  00df6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?num_side_weapon_line_points_without_stub_wings@@3HA
  00dfb	83 e0 01	 and	 eax, 1
  00dfe	74 1a		 je	 SHORT $LN25@initialise
  00e00	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_comanche_mfd@@YGXXZ@4JA
  00e05	05 d2 00 00 00	 add	 eax, 210		; 000000d2H
  00e0a	50		 push	 eax
  00e0b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@HHDNPPJG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e10	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@CBFDBCCM@?$CInum_side_weapon_line_points_wi@
  00e15	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN25@initialise:

; 12724: 
; 12725: 	side_weapon_line_points_without_stub_wings = (vec3d *) safe_malloc (sizeof (vec3d) * num_side_weapon_line_points_without_stub_wings);

  00e1a	6b 05 00 00 00
	00 0c		 imul	 eax, DWORD PTR ?num_side_weapon_line_points_without_stub_wings@@3HA, 12
  00e21	50		 push	 eax
  00e22	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00e27	a3 00 00 00 00	 mov	 DWORD PTR ?side_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A, eax

; 12726: 
; 12727: 	get_object_3d_poly_line_data (OBJECT_3D_COMANCHE_COCKPIT_WEAPONS_DISPLAY, side_weapon_line_points_without_stub_wings);

  00e2c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?side_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00e31	50		 push	 eax
  00e32	68 e0 09 00 00	 push	 2528			; 000009e0H
  00e37	e8 00 00 00 00	 call	 ?get_object_3d_poly_line_data@@YGXHPAUVEC3D@@@Z ; get_object_3d_poly_line_data

; 12728: 
; 12729: 	{
; 12730: 		int
; 12731: 			i;
; 12732: 
; 12733: 		for (i = 0; i < num_side_weapon_line_points_without_stub_wings; i++)

  00e3c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00e43	eb 09		 jmp	 SHORT $LN13@initialise
$LN11@initialise:
  00e45	8b 45 f0	 mov	 eax, DWORD PTR _i$1[ebp]
  00e48	83 c0 01	 add	 eax, 1
  00e4b	89 45 f0	 mov	 DWORD PTR _i$1[ebp], eax
$LN13@initialise:
  00e4e	8b 45 f0	 mov	 eax, DWORD PTR _i$1[ebp]
  00e51	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?num_side_weapon_line_points_without_stub_wings@@3HA
  00e57	0f 8d 9d 00 00
	00		 jge	 $LN12@initialise

; 12734: 		{
; 12735: 			side_weapon_line_points_without_stub_wings[i].x *= SIDE_WEAPON_LINE_POINT_SCALE;

  00e5d	6b 45 f0 0c	 imul	 eax, DWORD PTR _i$1[ebp], 12
  00e61	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?side_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00e67	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00e6c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  00e74	6b 55 f0 0c	 imul	 edx, DWORD PTR _i$1[ebp], 12
  00e78	a1 00 00 00 00	 mov	 eax, DWORD PTR ?side_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00e7d	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 12736: 			side_weapon_line_points_without_stub_wings[i].y *= SIDE_WEAPON_LINE_POINT_SCALE;

  00e82	6b 45 f0 0c	 imul	 eax, DWORD PTR _i$1[ebp], 12
  00e86	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?side_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00e8c	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  00e92	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  00e9a	6b 55 f0 0c	 imul	 edx, DWORD PTR _i$1[ebp], 12
  00e9e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?side_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00ea3	f3 0f 11 44 10
	04		 movss	 DWORD PTR [eax+edx+4], xmm0

; 12737: 
; 12738: 			side_weapon_line_points_without_stub_wings[i].x += SIDE_WEAPON_LINE_POINT_X_TRANSLATE;

  00ea9	6b 45 f0 0c	 imul	 eax, DWORD PTR _i$1[ebp], 12
  00ead	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?side_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00eb3	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00eb8	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@becccccd
  00ec0	6b 55 f0 0c	 imul	 edx, DWORD PTR _i$1[ebp], 12
  00ec4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?side_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00ec9	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 12739: 			side_weapon_line_points_without_stub_wings[i].y += SIDE_WEAPON_LINE_POINT_Y_TRANSLATE;

  00ece	6b 45 f0 0c	 imul	 eax, DWORD PTR _i$1[ebp], 12
  00ed2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?side_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00ed8	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  00ede	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f4ccccd
  00ee6	6b 55 f0 0c	 imul	 edx, DWORD PTR _i$1[ebp], 12
  00eea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?side_weapon_line_points_without_stub_wings@@3PAUVEC3D@@A
  00eef	f3 0f 11 44 10
	04		 movss	 DWORD PTR [eax+edx+4], xmm0

; 12740: 		}

  00ef5	e9 4b ff ff ff	 jmp	 $LN11@initialise
$LN12@initialise:

; 12741: 	}
; 12742: 
; 12743: 	initalize_horizon_mask(LARGE_MFD_VIEWPORT_SIZE * 3 / 4, &main_horizon_mask);

  00efa	68 00 00 00 00	 push	 OFFSET ?main_horizon_mask@@3PADA
  00eff	68 c0 00 00 00	 push	 192			; 000000c0H
  00f04	e8 00 00 00 00	 call	 ?initalize_horizon_mask@@YGXHPAPAD@Z ; initalize_horizon_mask

; 12744: 	initalize_horizon_mask(LARGE_MFD_VIEWPORT_SIZE * 0.65, &side_horizon_mask);

  00f09	68 00 00 00 00	 push	 OFFSET ?side_horizon_mask@@3PADA
  00f0e	68 a6 00 00 00	 push	 166			; 000000a6H
  00f13	e8 00 00 00 00	 call	 ?initalize_horizon_mask@@YGXHPAPAD@Z ; initalize_horizon_mask

; 12745: 
; 12746: //VJ 030423 TSd render mod
; 12747: 
; 12748:    Initialise_TSD_render_terrain();

  00f18	e8 00 00 00 00	 call	 ?Initialise_TSD_render_terrain@@YGXXZ ; Initialise_TSD_render_terrain

; 12749: 
; 12750: }

  00f1d	5f		 pop	 edi
  00f1e	5e		 pop	 esi
  00f1f	5b		 pop	 ebx
  00f20	8b e5		 mov	 esp, ebp
  00f22	5d		 pop	 ebp
  00f23	c3		 ret	 0
?initialise_comanche_mfd@@YGXXZ ENDP			; initialise_comanche_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?tan@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?tan@@YGMM@Z PROC					; tan, COMDAT

; 299  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 300  : 	return (_CSTD tanf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _tanf
  00019	83 c4 04	 add	 esp, 4

; 301  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?tan@@YGMM@Z ENDP					; tan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sqrt@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sqrt@@YGMM@Z PROC					; sqrt, COMDAT

; 294  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 295  : 	return (_CSTD sqrtf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sqrtf
  00019	83 c4 04	 add	 esp, 4

; 296  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sqrt@@YGMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sin@@YGMM@Z PROC					; sin, COMDAT

; 284  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 285  : 	return (_CSTD sinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sinf
  00019	83 c4 04	 add	 esp, 4

; 286  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sin@@YGMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fmod@@YGMMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
__Yx$ = 12						; size = 4
?fmod@@YGMMM@Z PROC					; fmod, COMDAT

; 143  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 144  : 	return (_CSTD fmodf(_Xx, _Yx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _fmodf
  00024	83 c4 08	 add	 esp, 8

; 145  : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?fmod@@YGMMM@Z ENDP					; fmod
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?cos@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?cos@@YGMM@Z PROC					; cos, COMDAT

; 77   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 78   : 	return (_CSTD cosf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _cosf
  00019	83 c4 04	 add	 esp, 4

; 79   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?cos@@YGMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan2@@YGMMM@Z
_TEXT	SEGMENT
__Yx$ = 8						; size = 4
__Xx$ = 12						; size = 4
?atan2@@YGMMM@Z PROC					; atan2, COMDAT

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return (_CSTD atan2f(_Yx, _Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _atan2f
  00024	83 c4 08	 add	 esp, 8

; 58   : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?atan2@@YGMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _tanf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_tanf	PROC						; COMDAT

; 764  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 765  :             return (float)tan(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _tan
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 766  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_tanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 760  :             return (float)sqrt(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sqrt
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 761  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 750  :             return (float)sin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 751  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fmodf
_TEXT	SEGMENT
tv74 = -68						; size = 4
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
_fmodf	PROC						; COMDAT

; 690  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 691  :             return (float)fmod(_X, _Y);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _fmod
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 692  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_fmodf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 648  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 649  :             return (float)cos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _cos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 650  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv74 = -68						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 633  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 634  :             return (float)atan2(_Y, _X);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _atan2
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 635  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
