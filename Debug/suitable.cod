; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\ai\highlevl\suitable.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?get_group_to_task_suitability@@YGMHH@Z		; get_group_to_task_suitability
PUBLIC	?initialise_group_task_array@@YGXXZ		; initialise_group_task_array
PUBLIC	?deinitialise_group_task_array@@YGXXZ		; deinitialise_group_task_array
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??calculate_group_to_task_suitability@@YGMHH@Z@4JA ; `calculate_group_to_task_suitability'::`1'::__LINE__Var
PUBLIC	??_C@_0ED@BEFLIJGJ@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0BB@GGEIKBKB@group_task_array@		; `string'
PUBLIC	??_C@_0CD@KIOOKOCB@?$CIresult?5?$DO?$DN?50?40?$CJ?5?$CG?$CG?5?$CIresult?5?$DM?$DN?51@ ; `string'
PUBLIC	?__LINE__Var@?0??initialise_group_task_array@@YGXXZ@4JA ; `initialise_group_task_array'::`1'::__LINE__Var
PUBLIC	??_C@_0BC@HKKIJBIA@?$CBgroup_task_array@	; `string'
PUBLIC	?__LINE__Var@?0??deinitialise_group_task_array@@YGXXZ@4JA ; `deinitialise_group_task_array'::`1'::__LINE__Var
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3f800000
PUBLIC	__real@3ff0000000000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?malloc_heap_memory@@YGPAXI@Z:PROC		; malloc_heap_memory
EXTRN	?free_mem@@YGXPAX@Z:PROC			; free_mem
EXTRN	?group_database@@3PAUGROUP_DATA@@A:BYTE		; group_database
EXTRN	?task_database@@3PAUTASK_DATA@@A:BYTE		; task_database
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?group_task_array@@3PAPAMA DD 01H DUP (?)		; group_task_array
_BSS	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??deinitialise_group_task_array@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??deinitialise_group_task_array@@YGXXZ@4JA DD 010eH ; `deinitialise_group_task_array'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BC@HKKIJBIA@?$CBgroup_task_array@
CONST	SEGMENT
??_C@_0BC@HKKIJBIA@?$CBgroup_task_array@ DB '!group_task_array', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??initialise_group_task_array@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??initialise_group_task_array@@YGXXZ@4JA DD 0e0H ; `initialise_group_task_array'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CD@KIOOKOCB@?$CIresult?5?$DO?$DN?50?40?$CJ?5?$CG?$CG?5?$CIresult?5?$DM?$DN?51@
CONST	SEGMENT
??_C@_0CD@KIOOKOCB@?$CIresult?5?$DO?$DN?50?40?$CJ?5?$CG?$CG?5?$CIresult?5?$DM?$DN?51@ DB '('
	DB	'result >= 0.0) && (result <= 1.0)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GGEIKBKB@group_task_array@
CONST	SEGMENT
??_C@_0BB@GGEIKBKB@group_task_array@ DB 'group_task_array', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@BEFLIJGJ@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0ED@BEFLIJGJ@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\ai\highlevl\suitable.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??calculate_group_to_task_suitability@@YGMHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??calculate_group_to_task_suitability@@YGMHH@Z@4JA DD 059H ; `calculate_group_to_task_suitability'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\suitable.c
;	COMDAT ?calculate_group_to_task_suitability@@YGMHH@Z
_TEXT	SEGMENT
$T1 = -104						; size = 4
$T2 = -100						; size = 4
$T3 = -96						; size = 4
$T4 = -92						; size = 4
_landing_type$ = -24					; size = 4
_result$ = -20						; size = 4
_b$ = -16						; size = 4
_a$ = -12						; size = 4
_task_factors$ = -8					; size = 4
_group_factors$ = -4					; size = 4
_group_type$ = 8					; size = 4
_task_type$ = 12					; size = 4
?calculate_group_to_task_suitability@@YGMHH@Z PROC	; calculate_group_to_task_suitability, COMDAT

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 90   : 
; 91   : 	const ai_statistics
; 92   : 		*group_factors,
; 93   : 		*task_factors;
; 94   : 
; 95   : 	float
; 96   : 		a,
; 97   : 		b,
; 98   : 		result;
; 99   : 
; 100  : 	int
; 101  : 		landing_type;
; 102  : 
; 103  : 	ASSERT (group_task_array);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?group_task_array@@3PAPAMA, 0
  00010	75 18		 jne	 SHORT $LN2@calculate_
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??calculate_group_to_task_suitability@@YGMHH@Z@4JA
  00017	83 c0 0e	 add	 eax, 14			; 0000000eH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BEFLIJGJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GGEIKBKB@group_task_array@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@calculate_:

; 104  : 
; 105  : 	group_factors = &(group_database [group_type].ai_stats);

  0002a	6b 45 08 64	 imul	 eax, DWORD PTR _group_type$[ebp], 100
  0002e	05 4c 00 00 00	 add	 eax, OFFSET ?group_database@@3PAUGROUP_DATA@@A+76
  00033	89 45 fc	 mov	 DWORD PTR _group_factors$[ebp], eax

; 106  : 
; 107  : 	task_factors = &(task_database [task_type].ai_stats);

  00036	6b 45 0c 50	 imul	 eax, DWORD PTR _task_type$[ebp], 80
  0003a	05 38 00 00 00	 add	 eax, OFFSET ?task_database@@3PAUTASK_DATA@@A+56
  0003f	89 45 f8	 mov	 DWORD PTR _task_factors$[ebp], eax

; 108  : 
; 109  : 	//
; 110  : 	// Critical factors
; 111  : 	//
; 112  : 
; 113  : 	// Movement type 
; 114  : 
; 115  : 	if ((task_database [task_type].movement_type != MOVEMENT_TYPE_ALL) && (task_database [task_type].movement_type != group_database [group_type].movement_type))

  00042	6b 45 0c 50	 imul	 eax, DWORD PTR _task_type$[ebp], 80
  00046	83 b8 30 00 00
	00 04		 cmp	 DWORD PTR ?task_database@@3PAUTASK_DATA@@A[eax+48], 4
  0004d	74 1d		 je	 SHORT $LN3@calculate_
  0004f	6b 45 0c 50	 imul	 eax, DWORD PTR _task_type$[ebp], 80
  00053	6b 4d 08 64	 imul	 ecx, DWORD PTR _group_type$[ebp], 100
  00057	8b 90 30 00 00
	00		 mov	 edx, DWORD PTR ?task_database@@3PAUTASK_DATA@@A[eax+48]
  0005d	3b 91 14 00 00
	00		 cmp	 edx, DWORD PTR ?group_database@@3PAUGROUP_DATA@@A[ecx+20]
  00063	74 07		 je	 SHORT $LN3@calculate_

; 116  : 	{
; 117  : 		return 0.0;

  00065	d9 ee		 fldz
  00067	e9 cc 01 00 00	 jmp	 $LN1@calculate_
$LN3@calculate_:

; 118  : 	}
; 119  : 
; 120  : 	landing_type = group_database [group_type].default_landing_type;

  0006c	6b 45 08 64	 imul	 eax, DWORD PTR _group_type$[ebp], 100
  00070	8b 88 18 00 00
	00		 mov	 ecx, DWORD PTR ?group_database@@3PAUGROUP_DATA@@A[eax+24]
  00076	89 4d e8	 mov	 DWORD PTR _landing_type$[ebp], ecx

; 121  : 
; 122  : 	if (!(task_database [task_type].landing_types & (1 << landing_type)))

  00079	6b 45 0c 50	 imul	 eax, DWORD PTR _task_type$[ebp], 80
  0007d	ba 01 00 00 00	 mov	 edx, 1
  00082	8b 4d e8	 mov	 ecx, DWORD PTR _landing_type$[ebp]
  00085	d3 e2		 shl	 edx, cl
  00087	23 90 34 00 00
	00		 and	 edx, DWORD PTR ?task_database@@3PAUTASK_DATA@@A[eax+52]
  0008d	75 07		 jne	 SHORT $LN4@calculate_

; 123  : 	{
; 124  : 		return 0.0;

  0008f	d9 ee		 fldz
  00091	e9 a2 01 00 00	 jmp	 $LN1@calculate_
$LN4@calculate_:

; 125  : 	}
; 126  : 
; 127  : 	// Movement speed 
; 128  : 
; 129  : 	if (task_factors->movement_speed > group_factors->movement_speed)

  00096	8b 45 f8	 mov	 eax, DWORD PTR _task_factors$[ebp]
  00099	8b 4d fc	 mov	 ecx, DWORD PTR _group_factors$[ebp]
  0009c	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0009f	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000a2	7e 07		 jle	 SHORT $LN5@calculate_

; 130  : 	{
; 131  : 		return 0.0;

  000a4	d9 ee		 fldz
  000a6	e9 8d 01 00 00	 jmp	 $LN1@calculate_
$LN5@calculate_:

; 132  : 	}
; 133  : 
; 134  : 	// Movement stealth
; 135  : 
; 136  : 	if (task_factors->movement_stealth > group_factors->movement_stealth)

  000ab	8b 45 f8	 mov	 eax, DWORD PTR _task_factors$[ebp]
  000ae	8b 4d fc	 mov	 ecx, DWORD PTR _group_factors$[ebp]
  000b1	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  000b4	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  000b7	7e 07		 jle	 SHORT $LN6@calculate_

; 137  : 	{
; 138  : 		return 0.0;

  000b9	d9 ee		 fldz
  000bb	e9 78 01 00 00	 jmp	 $LN1@calculate_
$LN6@calculate_:

; 139  : 	}
; 140  : 
; 141  : 	// Cargo space
; 142  : 
; 143  : 	if (task_factors->cargo_space > group_factors->cargo_space)

  000c0	8b 45 f8	 mov	 eax, DWORD PTR _task_factors$[ebp]
  000c3	8b 4d fc	 mov	 ecx, DWORD PTR _group_factors$[ebp]
  000c6	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  000c9	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  000cc	7e 07		 jle	 SHORT $LN7@calculate_

; 144  : 	{
; 145  : 		return 0.0;

  000ce	d9 ee		 fldz
  000d0	e9 63 01 00 00	 jmp	 $LN1@calculate_
$LN7@calculate_:

; 146  : 	}
; 147  : 
; 148  : 	// Troop space
; 149  : 
; 150  : 	if (task_factors->troop_space > group_factors->troop_space)

  000d5	8b 45 f8	 mov	 eax, DWORD PTR _task_factors$[ebp]
  000d8	8b 4d fc	 mov	 ecx, DWORD PTR _group_factors$[ebp]
  000db	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  000de	3b 51 14	 cmp	 edx, DWORD PTR [ecx+20]
  000e1	7e 07		 jle	 SHORT $LN8@calculate_

; 151  : 	{
; 152  : 		return 0.0;

  000e3	d9 ee		 fldz
  000e5	e9 4e 01 00 00	 jmp	 $LN1@calculate_
$LN8@calculate_:

; 153  : 	}
; 154  : 
; 155  : 	// Ground Attack Strength
; 156  : 
; 157  : 	if (task_factors->ground_attack_strength > group_factors->ground_attack_strength)

  000ea	8b 45 f8	 mov	 eax, DWORD PTR _task_factors$[ebp]
  000ed	8b 4d fc	 mov	 ecx, DWORD PTR _group_factors$[ebp]
  000f0	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000f3	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f6	7e 07		 jle	 SHORT $LN9@calculate_

; 158  : 	{
; 159  : 		return 0.0;

  000f8	d9 ee		 fldz
  000fa	e9 39 01 00 00	 jmp	 $LN1@calculate_
$LN9@calculate_:

; 160  : 	}
; 161  : 
; 162  : 	// Air Attack Strength
; 163  : 
; 164  : 	if (task_factors->air_attack_strength > group_factors->air_attack_strength)

  000ff	8b 45 f8	 mov	 eax, DWORD PTR _task_factors$[ebp]
  00102	8b 4d fc	 mov	 ecx, DWORD PTR _group_factors$[ebp]
  00105	8b 10		 mov	 edx, DWORD PTR [eax]
  00107	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00109	7e 07		 jle	 SHORT $LN10@calculate_

; 165  : 	{
; 166  : 		return 0.0;

  0010b	d9 ee		 fldz
  0010d	e9 26 01 00 00	 jmp	 $LN1@calculate_
$LN10@calculate_:

; 167  : 	}
; 168  : 
; 169  : 	// Engage enemy (If task requires engagement - group must be capable)
; 170  : 
; 171  : 	if (task_database [task_type].engage_enemy)

  00112	6b 45 0c 50	 imul	 eax, DWORD PTR _task_type$[ebp], 80
  00116	8b 88 20 00 00
	00		 mov	 ecx, DWORD PTR ?task_database@@3PAUTASK_DATA@@A[eax+32]
  0011c	c1 e9 08	 shr	 ecx, 8
  0011f	83 e1 01	 and	 ecx, 1
  00122	74 19		 je	 SHORT $LN12@calculate_

; 172  : 	{
; 173  : 		if (!group_database [group_type].default_engage_enemy)

  00124	6b 45 08 64	 imul	 eax, DWORD PTR _group_type$[ebp], 100
  00128	8b 88 48 00 00
	00		 mov	 ecx, DWORD PTR ?group_database@@3PAUGROUP_DATA@@A[eax+72]
  0012e	c1 e9 03	 shr	 ecx, 3
  00131	83 e1 01	 and	 ecx, 1
  00134	75 07		 jne	 SHORT $LN12@calculate_

; 174  : 		{
; 175  : 			return 0.0;

  00136	d9 ee		 fldz
  00138	e9 fb 00 00 00	 jmp	 $LN1@calculate_
$LN12@calculate_:

; 176  : 		}
; 177  : 	}
; 178  : 
; 179  : 	//
; 180  : 	// Non Critical factors
; 181  : 	//
; 182  : 
; 183  : 	result = 1.0;

  0013d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00145	f3 0f 11 45 ec	 movss	 DWORD PTR _result$[ebp], xmm0

; 184  : 
; 185  : 	if (task_factors->air_attack_strength > 0)

  0014a	8b 45 f8	 mov	 eax, DWORD PTR _task_factors$[ebp]
  0014d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00150	7e 4f		 jle	 SHORT $LN13@calculate_

; 186  : 	{
; 187  : 		a = (float)(group_factors->air_attack_strength);

  00152	8b 45 fc	 mov	 eax, DWORD PTR _group_factors$[ebp]
  00155	f3 0f 2a 00	 cvtsi2ss xmm0, DWORD PTR [eax]
  00159	f3 0f 11 45 f4	 movss	 DWORD PTR _a$[ebp], xmm0

; 188  : 
; 189  : 		b = (float)(task_factors->air_attack_strength);

  0015e	8b 45 f8	 mov	 eax, DWORD PTR _task_factors$[ebp]
  00161	f3 0f 2a 00	 cvtsi2ss xmm0, DWORD PTR [eax]
  00165	f3 0f 11 45 f0	 movss	 DWORD PTR _b$[ebp], xmm0

; 190  : 
; 191  : 		result *= min ((a / b), 1.0f);

  0016a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00172	f3 0f 11 45 a4	 movss	 DWORD PTR $T4[ebp], xmm0
  00177	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _a$[ebp]
  0017c	f3 0f 5e 45 f0	 divss	 xmm0, DWORD PTR _b$[ebp]
  00181	f3 0f 11 45 a0	 movss	 DWORD PTR $T3[ebp], xmm0
  00186	8d 45 a4	 lea	 eax, DWORD PTR $T4[ebp]
  00189	50		 push	 eax
  0018a	8d 4d a0	 lea	 ecx, DWORD PTR $T3[ebp]
  0018d	51		 push	 ecx
  0018e	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00193	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _result$[ebp]
  00198	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  0019c	f3 0f 11 45 ec	 movss	 DWORD PTR _result$[ebp], xmm0
$LN13@calculate_:

; 192  : 	}
; 193  : 
; 194  : 	if (task_factors->ground_attack_strength > 0)

  001a1	8b 45 f8	 mov	 eax, DWORD PTR _task_factors$[ebp]
  001a4	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  001a8	7e 51		 jle	 SHORT $LN14@calculate_

; 195  : 	{
; 196  : 		a = (float)(group_factors->ground_attack_strength);

  001aa	8b 45 fc	 mov	 eax, DWORD PTR _group_factors$[ebp]
  001ad	f3 0f 2a 40 04	 cvtsi2ss xmm0, DWORD PTR [eax+4]
  001b2	f3 0f 11 45 f4	 movss	 DWORD PTR _a$[ebp], xmm0

; 197  : 
; 198  : 		b = (float)(task_factors->ground_attack_strength);

  001b7	8b 45 f8	 mov	 eax, DWORD PTR _task_factors$[ebp]
  001ba	f3 0f 2a 40 04	 cvtsi2ss xmm0, DWORD PTR [eax+4]
  001bf	f3 0f 11 45 f0	 movss	 DWORD PTR _b$[ebp], xmm0

; 199  : 
; 200  : 		result *= min ((a / b), 1.0f);

  001c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001cc	f3 0f 11 45 9c	 movss	 DWORD PTR $T2[ebp], xmm0
  001d1	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _a$[ebp]
  001d6	f3 0f 5e 45 f0	 divss	 xmm0, DWORD PTR _b$[ebp]
  001db	f3 0f 11 45 98	 movss	 DWORD PTR $T1[ebp], xmm0
  001e0	8d 45 9c	 lea	 eax, DWORD PTR $T2[ebp]
  001e3	50		 push	 eax
  001e4	8d 4d 98	 lea	 ecx, DWORD PTR $T1[ebp]
  001e7	51		 push	 ecx
  001e8	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  001ed	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _result$[ebp]
  001f2	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  001f6	f3 0f 11 45 ec	 movss	 DWORD PTR _result$[ebp], xmm0
$LN14@calculate_:

; 201  : 	}
; 202  : 
; 203  : 	ASSERT ((result >= 0.0) && (result <= 1.0));

  001fb	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _result$[ebp]
  00200	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00208	72 13		 jb	 SHORT $LN16@calculate_
  0020a	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _result$[ebp]
  0020f	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00217	66 0f 2f c8	 comisd	 xmm1, xmm0
  0021b	73 18		 jae	 SHORT $LN15@calculate_
$LN16@calculate_:
  0021d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??calculate_group_to_task_suitability@@YGMHH@Z@4JA
  00222	83 c0 72	 add	 eax, 114		; 00000072H
  00225	50		 push	 eax
  00226	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BEFLIJGJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  0022b	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@KIOOKOCB@?$CIresult?5?$DO?$DN?50?40?$CJ?5?$CG?$CG?5?$CIresult?5?$DM?$DN?51@
  00230	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN15@calculate_:

; 204  : 
; 205  : 	return result;

  00235	d9 45 ec	 fld	 DWORD PTR _result$[ebp]
$LN1@calculate_:

; 206  : }

  00238	5f		 pop	 edi
  00239	5e		 pop	 esi
  0023a	5b		 pop	 ebx
  0023b	8b e5		 mov	 esp, ebp
  0023d	5d		 pop	 ebp
  0023e	c2 08 00	 ret	 8
?calculate_group_to_task_suitability@@YGMHH@Z ENDP	; calculate_group_to_task_suitability
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\suitable.c
;	COMDAT ?deinitialise_group_task_array@@YGXXZ
_TEXT	SEGMENT
_loop$ = -4						; size = 4
?deinitialise_group_task_array@@YGXXZ PROC		; deinitialise_group_task_array, COMDAT

; 270  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 271  : 	int
; 272  : 		loop;
; 273  : 
; 274  : 	ASSERT (group_task_array);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?group_task_array@@3PAPAMA, 0
  00010	75 18		 jne	 SHORT $LN5@deinitiali
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??deinitialise_group_task_array@@YGXXZ@4JA
  00017	83 c0 04	 add	 eax, 4
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BEFLIJGJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GGEIKBKB@group_task_array@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@deinitiali:

; 275  : 
; 276  : 	for (loop = 0; loop < NUM_ENTITY_SUB_TYPE_GROUPS; loop ++)

  0002a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  00031	eb 09		 jmp	 SHORT $LN4@deinitiali
$LN2@deinitiali:
  00033	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00036	83 c0 01	 add	 eax, 1
  00039	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@deinitiali:
  0003c	83 7d fc 1a	 cmp	 DWORD PTR _loop$[ebp], 26 ; 0000001aH
  00040	7d 14		 jge	 SHORT $LN3@deinitiali

; 277  : 	{
; 278  : 		free_mem (group_task_array [loop]);

  00042	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00045	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?group_task_array@@3PAPAMA
  0004b	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0004e	52		 push	 edx
  0004f	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem

; 279  : 	}

  00054	eb dd		 jmp	 SHORT $LN2@deinitiali
$LN3@deinitiali:

; 280  : 
; 281  : 	free_mem (group_task_array);

  00056	a1 00 00 00 00	 mov	 eax, DWORD PTR ?group_task_array@@3PAPAMA
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem

; 282  : 
; 283  : 	group_task_array = NULL;

  00061	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?group_task_array@@3PAPAMA, 0

; 284  : }

  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
?deinitialise_group_task_array@@YGXXZ ENDP		; deinitialise_group_task_array
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\suitable.c
;	COMDAT ?initialise_group_task_array@@YGXXZ
_TEXT	SEGMENT
_task$ = -8						; size = 4
_group$ = -4						; size = 4
?initialise_group_task_array@@YGXXZ PROC		; initialise_group_task_array, COMDAT

; 224  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 225  : 	int
; 226  : 		group,
; 227  : 		task;
; 228  : 
; 229  : 	ASSERT (!group_task_array);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?group_task_array@@3PAPAMA, 0
  00010	74 18		 je	 SHORT $LN8@initialise
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_group_task_array@@YGXXZ@4JA
  00017	83 c0 05	 add	 eax, 5
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BEFLIJGJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HKKIJBIA@?$CBgroup_task_array@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@initialise:

; 230  : 
; 231  : 	group_task_array = (float **) malloc_heap_mem (sizeof (float *) * NUM_ENTITY_SUB_TYPE_GROUPS);

  0002a	6a 68		 push	 104			; 00000068H
  0002c	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  00031	a3 00 00 00 00	 mov	 DWORD PTR ?group_task_array@@3PAPAMA, eax

; 232  : 
; 233  : 	for (group = 0; group < NUM_ENTITY_SUB_TYPE_GROUPS; group ++)

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _group$[ebp], 0
  0003d	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  0003f	8b 45 fc	 mov	 eax, DWORD PTR _group$[ebp]
  00042	83 c0 01	 add	 eax, 1
  00045	89 45 fc	 mov	 DWORD PTR _group$[ebp], eax
$LN4@initialise:
  00048	83 7d fc 1a	 cmp	 DWORD PTR _group$[ebp], 26 ; 0000001aH
  0004c	7d 4d		 jge	 SHORT $LN3@initialise

; 234  : 	{
; 235  : 		group_task_array [group] = (float*) malloc_heap_mem (sizeof (float) * NUM_ENTITY_SUB_TYPE_TASKS);

  0004e	6a 78		 push	 120			; 00000078H
  00050	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  00055	8b 4d fc	 mov	 ecx, DWORD PTR _group$[ebp]
  00058	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?group_task_array@@3PAPAMA
  0005e	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 236  : 
; 237  : 		for (task = 0; task < NUM_ENTITY_SUB_TYPE_TASKS; task ++)

  00061	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _task$[ebp], 0
  00068	eb 09		 jmp	 SHORT $LN7@initialise
$LN5@initialise:
  0006a	8b 45 f8	 mov	 eax, DWORD PTR _task$[ebp]
  0006d	83 c0 01	 add	 eax, 1
  00070	89 45 f8	 mov	 DWORD PTR _task$[ebp], eax
$LN7@initialise:
  00073	83 7d f8 1e	 cmp	 DWORD PTR _task$[ebp], 30 ; 0000001eH
  00077	7d 20		 jge	 SHORT $LN6@initialise

; 238  : 		{
; 239  : 			group_task_array [group][task] = calculate_group_to_task_suitability (group, task);

  00079	8b 45 f8	 mov	 eax, DWORD PTR _task$[ebp]
  0007c	50		 push	 eax
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR _group$[ebp]
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 ?calculate_group_to_task_suitability@@YGMHH@Z ; calculate_group_to_task_suitability
  00086	8b 55 fc	 mov	 edx, DWORD PTR _group$[ebp]
  00089	a1 00 00 00 00	 mov	 eax, DWORD PTR ?group_task_array@@3PAPAMA
  0008e	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00091	8b 55 f8	 mov	 edx, DWORD PTR _task$[ebp]
  00094	d9 1c 91	 fstp	 DWORD PTR [ecx+edx*4]

; 240  : 		}

  00097	eb d1		 jmp	 SHORT $LN5@initialise
$LN6@initialise:

; 241  : 	}

  00099	eb a4		 jmp	 SHORT $LN2@initialise
$LN3@initialise:

; 242  : 
; 243  : 	#if DEBUG_MODULE
; 244  : 
; 245  : 	for (task = 0; task < NUM_ENTITY_SUB_TYPE_TASKS; task ++)
; 246  : 	{
; 247  : 		debug_filtered_log ("TASK %s", task_database [task].full_name);
; 248  : 		debug_filtered_log ("=========================");
; 249  : 
; 250  : 		for (group = 0; group < NUM_ENTITY_SUB_TYPE_GROUPS; group ++)
; 251  : 		{
; 252  : 			if (group_task_array [group][task] > 0.0)
; 253  : 			{
; 254  : 				debug_filtered_log ("%s (%f)", group_database [group].full_name, group_task_array [group][task]);
; 255  : 			}
; 256  : 		}
; 257  : 
; 258  : 		debug_filtered_log ("");
; 259  : 		debug_filtered_log ("");
; 260  : 	}
; 261  : 
; 262  : 	#endif
; 263  : }

  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?initialise_group_task_array@@YGXXZ ENDP		; initialise_group_task_array
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\highlevl\suitable.c
;	COMDAT ?get_group_to_task_suitability@@YGMHH@Z
_TEXT	SEGMENT
_group_type$ = 8					; size = 4
_task_type$ = 12					; size = 4
?get_group_to_task_suitability@@YGMHH@Z PROC		; get_group_to_task_suitability, COMDAT

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 214  : 	// JB 030313 Fly any aircraft (test code)
; 215  : 	// return 1;
; 216  : 	return group_task_array [group_type][task_type];

  00009	8b 45 08	 mov	 eax, DWORD PTR _group_type$[ebp]
  0000c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?group_task_array@@3PAPAMA
  00012	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00015	8b 45 0c	 mov	 eax, DWORD PTR _task_type$[ebp]
  00018	d9 04 82	 fld	 DWORD PTR [edx+eax*4]

; 217  : }

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
?get_group_to_task_suitability@@YGMHH@Z ENDP		; get_group_to_task_suitability
_TEXT	ENDS
END
