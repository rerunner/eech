; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\3d\3dobject.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?current_object_3d_luminosity_texture@@3PAUSCREEN@@A ; current_object_3d_luminosity_texture
PUBLIC	?current_object_3d_luminosity_texture_u_address@@3HA ; current_object_3d_luminosity_texture_u_address
PUBLIC	?current_object_3d_luminosity_texture_v_address@@3HA ; current_object_3d_luminosity_texture_v_address
PUBLIC	?current_object_3d_luminosity_texture_filter@@3HA ; current_object_3d_luminosity_texture_filter
PUBLIC	?current_object_3d_luminosity_texture_mipmap@@3HA ; current_object_3d_luminosity_texture_mipmap
PUBLIC	?current_object_3d_light_maps_enabled@@3HA	; current_object_3d_light_maps_enabled
PUBLIC	?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
PUBLIC	?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
PUBLIC	?current_object_3d_gouraud_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_gouraud_list
PUBLIC	?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_face_normal_list
PUBLIC	?object_3d_sprite_flare_texture@@3PAUSCREEN@@A	; object_3d_sprite_flare_texture
PUBLIC	?current_object_3d_texture@@3PAUSCREEN@@A	; current_object_3d_texture
PUBLIC	?current_object_3d_reflection_texture_map@@3PAUSCREEN@@A ; current_object_3d_reflection_texture_map
PUBLIC	?current_object_3d_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A ; current_object_3d_texture_list
PUBLIC	?current_object_3d_transformed_normals@@3PAUOBJECT_3D_TRANSFORMED_POINT_NORMAL@@A ; current_object_3d_transformed_normals
PUBLIC	?current_object_3d_texture_u_address@@3HA	; current_object_3d_texture_u_address
PUBLIC	?current_object_3d_texture_v_address@@3HA	; current_object_3d_texture_v_address
PUBLIC	?current_object_3d_texture_filter@@3HA		; current_object_3d_texture_filter
PUBLIC	?current_object_3d_texture_mipmap@@3HA		; current_object_3d_texture_mipmap
PUBLIC	?current_object_3d_specular@@3HA		; current_object_3d_specular
PUBLIC	?current_object_3d_outcode@@3HA			; current_object_3d_outcode
PUBLIC	?current_object_3d_dissolve_factor@@3MA		; current_object_3d_dissolve_factor
PUBLIC	?current_object_3d_dissolve_value@@3EA		; current_object_3d_dissolve_value
PUBLIC	?specular_rendering_enabled@@3HA		; specular_rendering_enabled
PUBLIC	?object_3d_approximation_level@@3HA		; object_3d_approximation_level
PUBLIC	?current_3d_object_is_flat@@3HA			; current_3d_object_is_flat
PUBLIC	?object_3d_points_current_base@@3HA		; object_3d_points_current_base
PUBLIC	?object_3d_object_current_base@@3HA		; object_3d_object_current_base
PUBLIC	?object_3d_light_3d_current_base@@3HA		; object_3d_light_3d_current_base
PUBLIC	?object_3d_perform_lod_calculations@@3HA	; object_3d_perform_lod_calculations
PUBLIC	?current_object_3d_surface_point_index@@3HA	; current_object_3d_surface_point_index
PUBLIC	?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A ; current_object_3d_surface_point_texture_list
PUBLIC	?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
PUBLIC	?current_object_3d_surface_point_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_normal_list
PUBLIC	?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A	; current_object_3d_faces
PUBLIC	?current_object_3d_surface_vertices@@3PAU_D3DTLVERTEX@@A ; current_object_3d_surface_vertices
PUBLIC	?current_object_3d_surface_vertices_used@@3PAEA	; current_object_3d_surface_vertices_used
PUBLIC	?current_object_3d_object_base@@3PAUOBJECT_3D_INFO@@A ; current_object_3d_object_base
PUBLIC	?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A	; object_3d_object_base
PUBLIC	?object_3d_scale@@3UVEC3D@@A			; object_3d_scale
PUBLIC	?textured_object_rendering_enabled@@3HA		; textured_object_rendering_enabled
PUBLIC	?object_3d_transparent_surface_index@@3HA	; object_3d_transparent_surface_index
PUBLIC	?object_3d_translucent_surfaces@@3PAUTRANSLUCENT_OBJECT_SURFACE@@A ; object_3d_translucent_surfaces
PUBLIC	?object_3d_sin_heading@@3PAMA			; object_3d_sin_heading
PUBLIC	?object_3d_cos_heading@@3PAMA			; object_3d_cos_heading
PUBLIC	?object_3d_sin_pitch@@3PAMA			; object_3d_sin_pitch
PUBLIC	?object_3d_cos_pitch@@3PAMA			; object_3d_cos_pitch
_BSS	SEGMENT
?current_object_3d_luminosity_texture@@3PAUSCREEN@@A DD 01H DUP (?) ; current_object_3d_luminosity_texture
?current_object_3d_luminosity_texture_u_address@@3HA DD 01H DUP (?) ; current_object_3d_luminosity_texture_u_address
?current_object_3d_luminosity_texture_v_address@@3HA DD 01H DUP (?) ; current_object_3d_luminosity_texture_v_address
?current_object_3d_luminosity_texture_filter@@3HA DD 01H DUP (?) ; current_object_3d_luminosity_texture_filter
?current_object_3d_luminosity_texture_mipmap@@3HA DD 01H DUP (?) ; current_object_3d_luminosity_texture_mipmap
?current_object_3d_light_maps_enabled@@3HA DD 01H DUP (?) ; current_object_3d_light_maps_enabled
?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A DD 01H DUP (?) ; current_object_3d_surface
?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A DD 01H DUP (?) ; current_object_3d_point_list
?current_object_3d_gouraud_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A DD 01H DUP (?) ; current_object_3d_gouraud_list
?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A DD 01H DUP (?) ; current_object_3d_face_normal_list
?object_3d_sprite_flare_texture@@3PAUSCREEN@@A DD 01H DUP (?) ; object_3d_sprite_flare_texture
?current_object_3d_texture@@3PAUSCREEN@@A DD 01H DUP (?) ; current_object_3d_texture
?current_object_3d_reflection_texture_map@@3PAUSCREEN@@A DD 01H DUP (?) ; current_object_3d_reflection_texture_map
?current_object_3d_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A DD 01H DUP (?) ; current_object_3d_texture_list
?current_object_3d_transformed_normals@@3PAUOBJECT_3D_TRANSFORMED_POINT_NORMAL@@A DD 01H DUP (?) ; current_object_3d_transformed_normals
?current_object_3d_texture_u_address@@3HA DD 01H DUP (?) ; current_object_3d_texture_u_address
?current_object_3d_texture_v_address@@3HA DD 01H DUP (?) ; current_object_3d_texture_v_address
?current_object_3d_texture_filter@@3HA DD 01H DUP (?)	; current_object_3d_texture_filter
?current_object_3d_texture_mipmap@@3HA DD 01H DUP (?)	; current_object_3d_texture_mipmap
?current_object_3d_specular@@3HA DD 01H DUP (?)		; current_object_3d_specular
?current_object_3d_outcode@@3HA DD 01H DUP (?)		; current_object_3d_outcode
?current_object_3d_dissolve_factor@@3MA DD 01H DUP (?)	; current_object_3d_dissolve_factor
?current_object_3d_dissolve_value@@3EA DB 01H DUP (?)	; current_object_3d_dissolve_value
	ALIGN	4

?object_3d_approximation_level@@3HA DD 01H DUP (?)	; object_3d_approximation_level
?current_3d_object_is_flat@@3HA DD 01H DUP (?)		; current_3d_object_is_flat
?object_3d_points_current_base@@3HA DD 01H DUP (?)	; object_3d_points_current_base
?object_3d_object_current_base@@3HA DD 01H DUP (?)	; object_3d_object_current_base
?object_3d_light_3d_current_base@@3HA DD 01H DUP (?)	; object_3d_light_3d_current_base
?current_object_3d_surface_point_index@@3HA DD 01H DUP (?) ; current_object_3d_surface_point_index
?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A DD 01H DUP (?) ; current_object_3d_surface_point_texture_list
?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A DD 01H DUP (?) ; current_object_3d_surface_point_list
?current_object_3d_surface_point_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A DD 01H DUP (?) ; current_object_3d_surface_point_normal_list
?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A DD 01H DUP (?) ; current_object_3d_faces
?current_object_3d_surface_vertices@@3PAU_D3DTLVERTEX@@A DD 01H DUP (?) ; current_object_3d_surface_vertices
?current_object_3d_surface_vertices_used@@3PAEA DB 0100H DUP (?) ; current_object_3d_surface_vertices_used
?current_object_3d_object_base@@3PAUOBJECT_3D_INFO@@A DD 01H DUP (?) ; current_object_3d_object_base
?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A DB 05800H DUP (?) ; object_3d_object_base
?object_3d_scale@@3UVEC3D@@A DB 0cH DUP (?)		; object_3d_scale
?textured_object_rendering_enabled@@3HA DD 01H DUP (?)	; textured_object_rendering_enabled
?object_3d_transparent_surface_index@@3HA DD 01H DUP (?) ; object_3d_transparent_surface_index
?object_3d_translucent_surfaces@@3PAUTRANSLUCENT_OBJECT_SURFACE@@A DB 084000H DUP (?) ; object_3d_translucent_surfaces
?object_3d_sin_heading@@3PAMA DD 0100H DUP (?)		; object_3d_sin_heading
?object_3d_cos_heading@@3PAMA DD 0100H DUP (?)		; object_3d_cos_heading
?object_3d_sin_pitch@@3PAMA DD 0100H DUP (?)		; object_3d_sin_pitch
?object_3d_cos_pitch@@3PAMA DD 0100H DUP (?)		; object_3d_cos_pitch
_BSS	ENDS
_DATA	SEGMENT
?specular_rendering_enabled@@3HA DD 01H			; specular_rendering_enabled
?object_3d_perform_lod_calculations@@3HA DD 01H		; object_3d_perform_lod_calculations
_DATA	ENDS
PUBLIC	_cosf
PUBLIC	_fabsf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	?cos@@YGMM@Z					; cos
PUBLIC	?fabs@@YGMM@Z					; fabs
PUBLIC	?sin@@YGMM@Z					; sin
PUBLIC	?sqrt@@YGMM@Z					; sqrt
PUBLIC	?asm_convert_float_to_int@@YGXMPAH@Z		; asm_convert_float_to_int
PUBLIC	?initialise_object_3d_lookup_tables@@YGXXZ	; initialise_object_3d_lookup_tables
PUBLIC	?set_object_3d_reflection_texture_map@@YGXH@Z	; set_object_3d_reflection_texture_map
PUBLIC	?apply_object_3d_reflection_texture_map@@YGXXZ	; apply_object_3d_reflection_texture_map
PUBLIC	?get_3d_object_approximation_number@@YGHPAUOBJECT_3D_INSTANCE@@@Z ; get_3d_object_approximation_number
PUBLIC	?pre_render_3d_object@@YGXPAUOBJECT_3D_INSTANCE@@@Z ; pre_render_3d_object
PUBLIC	?draw_3d_object_bounding_box@@YGXPAUOBJECT_3D_INSTANCE@@@Z ; draw_3d_object_bounding_box
PUBLIC	?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z ; render_bounding_box_line
PUBLIC	?calculate_luminous_colour@@YGXPAUREAL_COLOUR@@@Z ; calculate_luminous_colour
PUBLIC	?calculate_lightmap_luminous_colour@@YGXPAUREAL_COLOUR@@@Z ; calculate_lightmap_luminous_colour
PUBLIC	?calculate_line_colour@@YG?AUREAL_COLOUR@@PAUOBJECT_3D_INFO@@@Z ; calculate_line_colour
PUBLIC	?calculate_line_normal@@YGXPAUOBJECT_3D_INFO@@PAUVEC3D@@@Z ; calculate_line_normal
PUBLIC	?generate_environment_coordinates@@YGXHPAUOBJECT_SHORT_3D_POINT@@PAUVEC3D@@1QAY02MPAM3@Z ; generate_environment_coordinates
PUBLIC	?get_textured_surface_face_colour@@YGXPAUREAL_COLOUR@@0@Z ; get_textured_surface_face_colour
PUBLIC	?get_surface_face_colour@@YGXPAUREAL_COLOUR@@0@Z ; get_surface_face_colour
PUBLIC	?generate_relative_lights@@YGPAULIGHT_3D_SOURCE@@PAUVIEWPOINT@@PAUVEC3D@@PAU1@@Z ; generate_relative_lights
PUBLIC	?generate_new_environment_coordinates@@YGXHPAUVEC3D@@QAY02MPAM2@Z ; generate_new_environment_coordinates
PUBLIC	?generate_object_3d_point_normal@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@PAUVEC3D@@@Z ; generate_object_3d_point_normal
PUBLIC	?transform_object_3d_points@@YGXPAUVERTEX@@PAUVEC3D@@H@Z ; transform_object_3d_points
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	__real@3f800000
PUBLIC	__real@3fbc28f5c28f5c29
PUBLIC	__real@3fc90fdb
PUBLIC	__real@3fd3333333333333
PUBLIC	__real@3fd6a09e667f3be1
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe2e147ae147ae1
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@40490fdb
PUBLIC	__real@406fe00000000000
PUBLIC	__real@4070000000000000
PUBLIC	__real@40c90fdb
PUBLIC	__real@40dfffc000000000
PUBLIC	__real@4b40005a
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_sin:PROC
EXTRN	_sqrt:PROC
EXTRN	?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z:PROC	; normalise_any_3d_vector
EXTRN	?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z:PROC ; multiply_matrix3x3_vec3d
EXTRN	?get_inverse_square_root@@YGMM@Z:PROC		; get_inverse_square_root
EXTRN	?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z:PROC	; clip_3d_polygon
EXTRN	?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; set_d3d_int_state
EXTRN	?set_d3d_texture@@YGXHPAUSCREEN@@@Z:PROC	; set_d3d_texture
EXTRN	?set_d3d_texture_stage_state@@YGXHHH@Z:PROC	; set_d3d_texture_stage_state
EXTRN	?draw_wbuffered_plain_line@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z:PROC ; draw_wbuffered_plain_line
EXTRN	?get_system_texture_ptr@@YGPAUSCREEN@@H@Z:PROC	; get_system_texture_ptr
EXTRN	?initialise_object_texture_animations@@YGXPAUOBJECT_3D_INSTANCE@@@Z:PROC ; initialise_object_texture_animations
EXTRN	?get_object_approximation_number@@YGHHMPAH@Z:PROC ; get_object_approximation_number
EXTRN	?hither_clip_3d_polygon@@YGPAUVERTEX@@PAU1@PAH@Z:PROC ; hither_clip_3d_polygon
EXTRN	?float_value_zero@@3MB:DWORD			; float_value_zero
EXTRN	?active_viewport@@3UVIEWPORT@@A:BYTE		; active_viewport
EXTRN	?clip_3d_coord@@3HA:DWORD			; clip_3d_coord
EXTRN	?clip_hither@@3MA:DWORD				; clip_hither
EXTRN	?d3d_fog_intensity@@3KA:DWORD			; d3d_fog_intensity
EXTRN	?system_textures@@3PAPAUSCREEN@@A:BYTE		; system_textures
EXTRN	?active_3d_environment@@3PAUENV_3D@@A:DWORD	; active_3d_environment
EXTRN	?visual_3d_vp@@3PAUVIEWPOINT@@A:DWORD		; visual_3d_vp
EXTRN	?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A:DWORD ; objects_3d_scene_database
EXTRN	?objects_3d_data@@3PAUOBJECT_3D@@A:DWORD	; objects_3d_data
EXTRN	?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A:DWORD ; texture_animations
EXTRN	?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A:BYTE	; ambient_3d_light
EXTRN	?light_3d_array@@3PAULIGHT_3D_SOURCE@@A:BYTE	; light_3d_array
EXTRN	?object_to_eye_attitude@@3PAY02MA:BYTE		; object_to_eye_attitude
EXTRN	?rotation_3d@@3PAY02MA:BYTE			; rotation_3d
EXTRN	?scaled_rotation@@3PAY02MA:BYTE			; scaled_rotation
EXTRN	?transformed_3d_3d_points@@3PAUOBJECT_TRANSFORMED_3D_POINT@@A:BYTE ; transformed_3d_3d_points
EXTRN	?transformed_3d_2d_points@@3PAUOBJECT_TRANSFORMED_2D_POINT@@A:BYTE ; transformed_3d_2d_points
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?current_object_3d_reflection_texture_map_index@@3HA DD 01H DUP (?) ; current_object_3d_reflection_texture_map_index
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@4b40005a
CONST	SEGMENT
__real@4b40005a DD 04b40005ar			; 1.2583e+07
CONST	ENDS
;	COMDAT __real@40dfffc000000000
CONST	SEGMENT
__real@40dfffc000000000 DQ 040dfffc000000000r	; 32767
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@4070000000000000
CONST	SEGMENT
__real@4070000000000000 DQ 04070000000000000r	; 256
CONST	ENDS
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe2e147ae147ae1
CONST	SEGMENT
__real@3fe2e147ae147ae1 DQ 03fe2e147ae147ae1r	; 0.59
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd6a09e667f3be1
CONST	SEGMENT
__real@3fd6a09e667f3be1 DQ 03fd6a09e667f3be1r	; 0.353553
CONST	ENDS
;	COMDAT __real@3fd3333333333333
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3fbc28f5c28f5c29
CONST	SEGMENT
__real@3fbc28f5c28f5c29 DQ 03fbc28f5c28f5c29r	; 0.11
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobject.c
;	COMDAT ?transform_object_3d_points@@YGXPAUVERTEX@@PAUVEC3D@@H@Z
_TEXT	SEGMENT
_j$1 = -72						; size = 4
_i$2 = -68						; size = 4
_q$3 = -64						; size = 4
_z$4 = -60						; size = 4
_y$5 = -56						; size = 4
_x$6 = -52						; size = 4
_iymin$ = -48						; size = 4
_iymax$ = -44						; size = 4
_ixmin$ = -40						; size = 4
_ixmax$ = -36						; size = 4
_oymin$ = -32						; size = 4
_oymax$ = -28						; size = 4
_oxmin$ = -24						; size = 4
_oxmax$ = -20						; size = 4
_pos_z$ = -16						; size = 4
_pos_y$ = -12						; size = 4
_pos_x$ = -8						; size = 4
_count$ = -4						; size = 4
_points$ = 8						; size = 4
_object_relative_position$ = 12				; size = 4
_number_of_points$ = 16					; size = 4
?transform_object_3d_points@@YGXPAUVERTEX@@PAUVEC3D@@H@Z PROC ; transform_object_3d_points, COMDAT

; 640  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 641  : 
; 642  : 	int
; 643  : 		count;
; 644  : 
; 645  : 	float
; 646  : 		pos_x,
; 647  : 		pos_y,
; 648  : 		pos_z,
; 649  : 		oxmax,
; 650  : 		oxmin,
; 651  : 		oymax,
; 652  : 		oymin;
; 653  : 
; 654  : 	unsigned int
; 655  : 		ixmax,
; 656  : 		ixmin,
; 657  : 		iymax,
; 658  : 		iymin;
; 659  : 
; 660  : 	pos_x = object_relative_position->x * active_3d_environment->screen_i_scale;

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _object_relative_position$[ebp]
  0000f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00015	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00019	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  0001d	f3 0f 11 45 f8	 movss	 DWORD PTR _pos_x$[ebp], xmm0

; 661  : 	pos_y = object_relative_position->y * active_3d_environment->screen_j_scale;

  00022	8b 45 0c	 mov	 eax, DWORD PTR _object_relative_position$[ebp]
  00025	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0002b	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00030	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  00035	f3 0f 11 45 f4	 movss	 DWORD PTR _pos_y$[ebp], xmm0

; 662  : 	pos_z = object_relative_position->z;

  0003a	8b 45 0c	 mov	 eax, DWORD PTR _object_relative_position$[ebp]
  0003d	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00042	f3 0f 11 45 f0	 movss	 DWORD PTR _pos_z$[ebp], xmm0

; 663  : 
; 664  : 	scaled_rotation[0][0] = rotation_3d[0][0] * active_3d_environment->screen_i_scale;

  00047	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0004c	6b c8 00	 imul	 ecx, eax, 0
  0004f	ba 04 00 00 00	 mov	 edx, 4
  00054	6b c2 00	 imul	 eax, edx, 0
  00057	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0005d	f3 0f 10 84 01
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax]
  00066	f3 0f 59 02	 mulss	 xmm0, DWORD PTR [edx]
  0006a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0006f	6b c8 00	 imul	 ecx, eax, 0
  00072	ba 04 00 00 00	 mov	 edx, 4
  00077	6b c2 00	 imul	 eax, edx, 0
  0007a	f3 0f 11 84 01
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+eax], xmm0

; 665  : 	scaled_rotation[0][1] = rotation_3d[0][1] * active_3d_environment->screen_j_scale;

  00083	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00088	6b c8 00	 imul	 ecx, eax, 0
  0008b	ba 04 00 00 00	 mov	 edx, 4
  00090	c1 e2 00	 shl	 edx, 0
  00093	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00098	f3 0f 10 84 11
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  000a1	f3 0f 59 40 04	 mulss	 xmm0, DWORD PTR [eax+4]
  000a6	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000ab	6b d1 00	 imul	 edx, ecx, 0
  000ae	b8 04 00 00 00	 mov	 eax, 4
  000b3	c1 e0 00	 shl	 eax, 0
  000b6	f3 0f 11 84 02
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+eax], xmm0

; 666  : 	scaled_rotation[0][2] = rotation_3d[0][2];

  000bf	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000c4	6b c8 00	 imul	 ecx, eax, 0
  000c7	ba 04 00 00 00	 mov	 edx, 4
  000cc	d1 e2		 shl	 edx, 1
  000ce	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000d3	6b c0 00	 imul	 eax, eax, 0
  000d6	be 04 00 00 00	 mov	 esi, 4
  000db	d1 e6		 shl	 esi, 1
  000dd	8b 8c 11 00 00
	00 00		 mov	 ecx, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  000e4	89 8c 30 00 00
	00 00		 mov	 DWORD PTR ?scaled_rotation@@3PAY02MA[eax+esi], ecx

; 667  : 
; 668  : 	scaled_rotation[1][0] = rotation_3d[1][0] * active_3d_environment->screen_i_scale;

  000eb	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000f0	c1 e0 00	 shl	 eax, 0
  000f3	b9 04 00 00 00	 mov	 ecx, 4
  000f8	6b d1 00	 imul	 edx, ecx, 0
  000fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00101	f3 0f 10 84 10
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  0010a	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  0010e	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00113	c1 e2 00	 shl	 edx, 0
  00116	b8 04 00 00 00	 mov	 eax, 4
  0011b	6b c8 00	 imul	 ecx, eax, 0
  0011e	f3 0f 11 84 0a
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+ecx], xmm0

; 669  : 	scaled_rotation[1][1] = rotation_3d[1][1] * active_3d_environment->screen_j_scale;

  00127	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0012c	c1 e0 00	 shl	 eax, 0
  0012f	b9 04 00 00 00	 mov	 ecx, 4
  00134	c1 e1 00	 shl	 ecx, 0
  00137	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0013d	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00146	f3 0f 59 42 04	 mulss	 xmm0, DWORD PTR [edx+4]
  0014b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00150	c1 e0 00	 shl	 eax, 0
  00153	b9 04 00 00 00	 mov	 ecx, 4
  00158	c1 e1 00	 shl	 ecx, 0
  0015b	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx], xmm0

; 670  : 	scaled_rotation[1][2] = rotation_3d[1][2];

  00164	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00169	c1 e0 00	 shl	 eax, 0
  0016c	b9 04 00 00 00	 mov	 ecx, 4
  00171	d1 e1		 shl	 ecx, 1
  00173	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00178	c1 e2 00	 shl	 edx, 0
  0017b	be 04 00 00 00	 mov	 esi, 4
  00180	d1 e6		 shl	 esi, 1
  00182	8b 84 08 00 00
	00 00		 mov	 eax, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00189	89 84 32 00 00
	00 00		 mov	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+esi], eax

; 671  : 
; 672  : 	scaled_rotation[2][0] = rotation_3d[2][0] * active_3d_environment->screen_i_scale;

  00190	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00195	d1 e0		 shl	 eax, 1
  00197	b9 04 00 00 00	 mov	 ecx, 4
  0019c	6b d1 00	 imul	 edx, ecx, 0
  0019f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  001a5	f3 0f 10 84 10
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  001ae	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  001b2	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  001b7	d1 e2		 shl	 edx, 1
  001b9	b8 04 00 00 00	 mov	 eax, 4
  001be	6b c8 00	 imul	 ecx, eax, 0
  001c1	f3 0f 11 84 0a
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+ecx], xmm0

; 673  : 	scaled_rotation[2][1] = rotation_3d[2][1] * active_3d_environment->screen_j_scale;

  001ca	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001cf	d1 e0		 shl	 eax, 1
  001d1	b9 04 00 00 00	 mov	 ecx, 4
  001d6	c1 e1 00	 shl	 ecx, 0
  001d9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  001df	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  001e8	f3 0f 59 42 04	 mulss	 xmm0, DWORD PTR [edx+4]
  001ed	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001f2	d1 e0		 shl	 eax, 1
  001f4	b9 04 00 00 00	 mov	 ecx, 4
  001f9	c1 e1 00	 shl	 ecx, 0
  001fc	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx], xmm0

; 674  : 	scaled_rotation[2][2] = rotation_3d[2][2];

  00205	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0020a	d1 e0		 shl	 eax, 1
  0020c	b9 04 00 00 00	 mov	 ecx, 4
  00211	d1 e1		 shl	 ecx, 1
  00213	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00218	d1 e2		 shl	 edx, 1
  0021a	be 04 00 00 00	 mov	 esi, 4
  0021f	d1 e6		 shl	 esi, 1
  00221	8b 84 08 00 00
	00 00		 mov	 eax, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00228	89 84 32 00 00
	00 00		 mov	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+esi], eax

; 675  : 
; 676  : 	for ( count = 0; count < number_of_points; count++ )

  0022f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00236	eb 09		 jmp	 SHORT $LN4@transform_
$LN2@transform_:
  00238	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0023b	83 c0 01	 add	 eax, 1
  0023e	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@transform_:
  00241	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00244	3b 45 10	 cmp	 eax, DWORD PTR _number_of_points$[ebp]
  00247	0f 8d 9c 03 00
	00		 jge	 $LN3@transform_

; 677  : 	{
; 678  : 
; 679  : 		float
; 680  : 			x,
; 681  : 			y,
; 682  : 			z;
; 683  : 
; 684  : 		x = pos_x + points[count].x * scaled_rotation[0][0] + points[count].y * scaled_rotation[1][0] + points[count].z * scaled_rotation[2][0];

  0024d	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00250	c1 e0 06	 shl	 eax, 6
  00253	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00258	6b d1 00	 imul	 edx, ecx, 0
  0025b	b9 04 00 00 00	 mov	 ecx, 4
  00260	6b c9 00	 imul	 ecx, ecx, 0
  00263	8b 75 08	 mov	 esi, DWORD PTR _points$[ebp]
  00266	f3 0f 10 04 06	 movss	 xmm0, DWORD PTR [esi+eax]
  0026b	f3 0f 59 84 0a
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scaled_rotation@@3PAY02MA[edx+ecx]
  00274	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _pos_x$[ebp]
  00279	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  0027c	c1 e2 06	 shl	 edx, 6
  0027f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00284	c1 e0 00	 shl	 eax, 0
  00287	b9 04 00 00 00	 mov	 ecx, 4
  0028c	6b c9 00	 imul	 ecx, ecx, 0
  0028f	8b 75 08	 mov	 esi, DWORD PTR _points$[ebp]
  00292	f3 0f 10 4c 16
	04		 movss	 xmm1, DWORD PTR [esi+edx+4]
  00298	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx]
  002a1	f3 0f 58 c1	 addss	 xmm0, xmm1
  002a5	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  002a8	c1 e2 06	 shl	 edx, 6
  002ab	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002b0	d1 e0		 shl	 eax, 1
  002b2	b9 04 00 00 00	 mov	 ecx, 4
  002b7	6b c9 00	 imul	 ecx, ecx, 0
  002ba	8b 75 08	 mov	 esi, DWORD PTR _points$[ebp]
  002bd	f3 0f 10 4c 16
	08		 movss	 xmm1, DWORD PTR [esi+edx+8]
  002c3	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx]
  002cc	f3 0f 58 c1	 addss	 xmm0, xmm1
  002d0	f3 0f 11 45 cc	 movss	 DWORD PTR _x$6[ebp], xmm0

; 685  : 		y = pos_y + points[count].x * scaled_rotation[0][1] + points[count].y * scaled_rotation[1][1] + points[count].z * scaled_rotation[2][1];

  002d5	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  002d8	c1 e0 06	 shl	 eax, 6
  002db	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  002e0	6b d1 00	 imul	 edx, ecx, 0
  002e3	b9 04 00 00 00	 mov	 ecx, 4
  002e8	c1 e1 00	 shl	 ecx, 0
  002eb	8b 75 08	 mov	 esi, DWORD PTR _points$[ebp]
  002ee	f3 0f 10 04 06	 movss	 xmm0, DWORD PTR [esi+eax]
  002f3	f3 0f 59 84 0a
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scaled_rotation@@3PAY02MA[edx+ecx]
  002fc	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _pos_y$[ebp]
  00301	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  00304	c1 e2 06	 shl	 edx, 6
  00307	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0030c	c1 e0 00	 shl	 eax, 0
  0030f	b9 04 00 00 00	 mov	 ecx, 4
  00314	c1 e1 00	 shl	 ecx, 0
  00317	8b 75 08	 mov	 esi, DWORD PTR _points$[ebp]
  0031a	f3 0f 10 4c 16
	04		 movss	 xmm1, DWORD PTR [esi+edx+4]
  00320	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx]
  00329	f3 0f 58 c1	 addss	 xmm0, xmm1
  0032d	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  00330	c1 e2 06	 shl	 edx, 6
  00333	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00338	d1 e0		 shl	 eax, 1
  0033a	b9 04 00 00 00	 mov	 ecx, 4
  0033f	c1 e1 00	 shl	 ecx, 0
  00342	8b 75 08	 mov	 esi, DWORD PTR _points$[ebp]
  00345	f3 0f 10 4c 16
	08		 movss	 xmm1, DWORD PTR [esi+edx+8]
  0034b	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx]
  00354	f3 0f 58 c1	 addss	 xmm0, xmm1
  00358	f3 0f 11 45 c8	 movss	 DWORD PTR _y$5[ebp], xmm0

; 686  : 		z = pos_z + points[count].x * scaled_rotation[0][2] + points[count].y * scaled_rotation[1][2] + points[count].z * scaled_rotation[2][2];

  0035d	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00360	c1 e0 06	 shl	 eax, 6
  00363	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00368	6b d1 00	 imul	 edx, ecx, 0
  0036b	b9 04 00 00 00	 mov	 ecx, 4
  00370	d1 e1		 shl	 ecx, 1
  00372	8b 75 08	 mov	 esi, DWORD PTR _points$[ebp]
  00375	f3 0f 10 04 06	 movss	 xmm0, DWORD PTR [esi+eax]
  0037a	f3 0f 59 84 0a
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scaled_rotation@@3PAY02MA[edx+ecx]
  00383	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _pos_z$[ebp]
  00388	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  0038b	c1 e2 06	 shl	 edx, 6
  0038e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00393	c1 e0 00	 shl	 eax, 0
  00396	b9 04 00 00 00	 mov	 ecx, 4
  0039b	d1 e1		 shl	 ecx, 1
  0039d	8b 75 08	 mov	 esi, DWORD PTR _points$[ebp]
  003a0	f3 0f 10 4c 16
	04		 movss	 xmm1, DWORD PTR [esi+edx+4]
  003a6	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx]
  003af	f3 0f 58 c1	 addss	 xmm0, xmm1
  003b3	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  003b6	c1 e2 06	 shl	 edx, 6
  003b9	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003be	d1 e0		 shl	 eax, 1
  003c0	b9 04 00 00 00	 mov	 ecx, 4
  003c5	d1 e1		 shl	 ecx, 1
  003c7	8b 75 08	 mov	 esi, DWORD PTR _points$[ebp]
  003ca	f3 0f 10 4c 16
	08		 movss	 xmm1, DWORD PTR [esi+edx+8]
  003d0	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx]
  003d9	f3 0f 58 c1	 addss	 xmm0, xmm1
  003dd	f3 0f 11 45 c4	 movss	 DWORD PTR _z$4[ebp], xmm0

; 687  : 
; 688  : 		points[count].x = x;

  003e2	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  003e5	c1 e0 06	 shl	 eax, 6
  003e8	8b 4d 08	 mov	 ecx, DWORD PTR _points$[ebp]
  003eb	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _x$6[ebp]
  003f0	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 689  : 		points[count].y = y;

  003f5	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  003f8	c1 e0 06	 shl	 eax, 6
  003fb	8b 4d 08	 mov	 ecx, DWORD PTR _points$[ebp]
  003fe	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _y$5[ebp]
  00403	f3 0f 11 44 01
	04		 movss	 DWORD PTR [ecx+eax+4], xmm0

; 690  : 		points[count].z = z;

  00409	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0040c	c1 e0 06	 shl	 eax, 6
  0040f	8b 4d 08	 mov	 ecx, DWORD PTR _points$[ebp]
  00412	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _z$4[ebp]
  00417	f3 0f 11 44 01
	08		 movss	 DWORD PTR [ecx+eax+8], xmm0

; 691  : 
; 692  : 		if ( *( ( int * ) &points[count].z ) >= *( ( int * ) &clip_hither ) )

  0041d	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00420	c1 e0 06	 shl	 eax, 6
  00423	8b 4d 08	 mov	 ecx, DWORD PTR _points$[ebp]
  00426	8b 54 01 08	 mov	 edx, DWORD PTR [ecx+eax+8]
  0042a	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ?clip_hither@@3MA
  00430	0f 8c a0 01 00
	00		 jl	 $LN5@transform_

; 693  : 		{
; 694  : 
; 695  : 			float
; 696  : 				q,
; 697  : 				i,
; 698  : 				j;
; 699  : 
; 700  : 			q = 1.0 / points[count].z;

  00436	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00439	c1 e0 06	 shl	 eax, 6
  0043c	8b 4d 08	 mov	 ecx, DWORD PTR _points$[ebp]
  0043f	f3 0f 5a 44 01
	08		 cvtss2sd xmm0, DWORD PTR [ecx+eax+8]
  00445	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0044d	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00451	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00455	f3 0f 11 45 c0	 movss	 DWORD PTR _q$3[ebp], xmm0

; 701  : 
; 702  : 
; 703  : 			i = ( points[count].x * q );

  0045a	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0045d	c1 e0 06	 shl	 eax, 6
  00460	8b 4d 08	 mov	 ecx, DWORD PTR _points$[ebp]
  00463	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00468	f3 0f 59 45 c0	 mulss	 xmm0, DWORD PTR _q$3[ebp]
  0046d	f3 0f 11 45 bc	 movss	 DWORD PTR _i$2[ebp], xmm0

; 704  : 			j = ( points[count].y * q );

  00472	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00475	c1 e0 06	 shl	 eax, 6
  00478	8b 4d 08	 mov	 ecx, DWORD PTR _points$[ebp]
  0047b	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  00481	f3 0f 59 45 c0	 mulss	 xmm0, DWORD PTR _q$3[ebp]
  00486	f3 0f 11 45 b8	 movss	 DWORD PTR _j$1[ebp], xmm0

; 705  : 
; 706  : 			points[count].q = q;

  0048b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0048e	c1 e0 06	 shl	 eax, 6
  00491	8b 4d 08	 mov	 ecx, DWORD PTR _points$[ebp]
  00494	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _q$3[ebp]
  00499	f3 0f 11 44 01
	0c		 movss	 DWORD PTR [ecx+eax+12], xmm0

; 707  : 
; 708  : 			points[count].j = active_3d_environment->y_origin - j;

  0049f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  004a4	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  004a9	f3 0f 5c 45 b8	 subss	 xmm0, DWORD PTR _j$1[ebp]
  004ae	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  004b1	c1 e1 06	 shl	 ecx, 6
  004b4	8b 55 08	 mov	 edx, DWORD PTR _points$[ebp]
  004b7	f3 0f 11 44 0a
	14		 movss	 DWORD PTR [edx+ecx+20], xmm0

; 709  : 			points[count].i = active_3d_environment->x_origin + i;

  004bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  004c2	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  004c7	f3 0f 58 45 bc	 addss	 xmm0, DWORD PTR _i$2[ebp]
  004cc	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  004cf	c1 e1 06	 shl	 ecx, 6
  004d2	8b 55 08	 mov	 edx, DWORD PTR _points$[ebp]
  004d5	f3 0f 11 44 0a
	10		 movss	 DWORD PTR [edx+ecx+16], xmm0

; 710  : 
; 711  : 			oxmax = active_viewport.x_max - points[count].i;

  004db	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  004de	c1 e0 06	 shl	 eax, 6
  004e1	8b 4d 08	 mov	 ecx, DWORD PTR _points$[ebp]
  004e4	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  004ec	f3 0f 5c 44 01
	10		 subss	 xmm0, DWORD PTR [ecx+eax+16]
  004f2	f3 0f 11 45 ec	 movss	 DWORD PTR _oxmax$[ebp], xmm0

; 712  : 			oxmin = points[count].i - active_viewport.x_min;

  004f7	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  004fa	c1 e0 06	 shl	 eax, 6
  004fd	8b 4d 08	 mov	 ecx, DWORD PTR _points$[ebp]
  00500	f3 0f 10 44 01
	10		 movss	 xmm0, DWORD PTR [ecx+eax+16]
  00506	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  0050e	f3 0f 11 45 e8	 movss	 DWORD PTR _oxmin$[ebp], xmm0

; 713  : 			oymax = active_viewport.y_max - points[count].j;

  00513	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00516	c1 e0 06	 shl	 eax, 6
  00519	8b 4d 08	 mov	 ecx, DWORD PTR _points$[ebp]
  0051c	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  00524	f3 0f 5c 44 01
	14		 subss	 xmm0, DWORD PTR [ecx+eax+20]
  0052a	f3 0f 11 45 e4	 movss	 DWORD PTR _oymax$[ebp], xmm0

; 714  : 			oymin = points[count].j - active_viewport.y_min;

  0052f	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00532	c1 e0 06	 shl	 eax, 6
  00535	8b 4d 08	 mov	 ecx, DWORD PTR _points$[ebp]
  00538	f3 0f 10 44 01
	14		 movss	 xmm0, DWORD PTR [ecx+eax+20]
  0053e	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  00546	f3 0f 11 45 e0	 movss	 DWORD PTR _oymin$[ebp], xmm0

; 715  : 
; 716  : 			ixmax = *( ( unsigned int * ) &oxmax );

  0054b	8b 45 ec	 mov	 eax, DWORD PTR _oxmax$[ebp]
  0054e	89 45 dc	 mov	 DWORD PTR _ixmax$[ebp], eax

; 717  : 			ixmin = *( ( unsigned int * ) &oxmin );

  00551	8b 45 e8	 mov	 eax, DWORD PTR _oxmin$[ebp]
  00554	89 45 d8	 mov	 DWORD PTR _ixmin$[ebp], eax

; 718  : 			iymax = *( ( unsigned int * ) &oymax );

  00557	8b 45 e4	 mov	 eax, DWORD PTR _oymax$[ebp]
  0055a	89 45 d4	 mov	 DWORD PTR _iymax$[ebp], eax

; 719  : 			iymin = *( ( unsigned int * ) &oymin );

  0055d	8b 45 e0	 mov	 eax, DWORD PTR _oymin$[ebp]
  00560	89 45 d0	 mov	 DWORD PTR _iymin$[ebp], eax

; 720  : 
; 721  : 			ixmin >>= 31;

  00563	8b 45 d8	 mov	 eax, DWORD PTR _ixmin$[ebp]
  00566	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00569	89 45 d8	 mov	 DWORD PTR _ixmin$[ebp], eax

; 722  : 			iymin &= 0x80000000;

  0056c	8b 45 d0	 mov	 eax, DWORD PTR _iymin$[ebp]
  0056f	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00574	89 45 d0	 mov	 DWORD PTR _iymin$[ebp], eax

; 723  : 			ixmax >>= 29;

  00577	8b 45 dc	 mov	 eax, DWORD PTR _ixmax$[ebp]
  0057a	c1 e8 1d	 shr	 eax, 29			; 0000001dH
  0057d	89 45 dc	 mov	 DWORD PTR _ixmax$[ebp], eax

; 724  : 			iymax &= 0x80000000;

  00580	8b 45 d4	 mov	 eax, DWORD PTR _iymax$[ebp]
  00583	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00588	89 45 d4	 mov	 DWORD PTR _iymax$[ebp], eax

; 725  : 			iymin >>= 30;

  0058b	8b 45 d0	 mov	 eax, DWORD PTR _iymin$[ebp]
  0058e	c1 e8 1e	 shr	 eax, 30			; 0000001eH
  00591	89 45 d0	 mov	 DWORD PTR _iymin$[ebp], eax

; 726  : 			ixmin &= 0x00000001;

  00594	8b 45 d8	 mov	 eax, DWORD PTR _ixmin$[ebp]
  00597	83 e0 01	 and	 eax, 1
  0059a	89 45 d8	 mov	 DWORD PTR _ixmin$[ebp], eax

; 727  : 			iymax >>= 28;

  0059d	8b 45 d4	 mov	 eax, DWORD PTR _iymax$[ebp]
  005a0	c1 e8 1c	 shr	 eax, 28			; 0000001cH
  005a3	89 45 d4	 mov	 DWORD PTR _iymax$[ebp], eax

; 728  : 			ixmax &= 0x00000004;

  005a6	8b 45 dc	 mov	 eax, DWORD PTR _ixmax$[ebp]
  005a9	83 e0 04	 and	 eax, 4
  005ac	89 45 dc	 mov	 DWORD PTR _ixmax$[ebp], eax

; 729  : 			ixmin |= iymin;

  005af	8b 45 d8	 mov	 eax, DWORD PTR _ixmin$[ebp]
  005b2	0b 45 d0	 or	 eax, DWORD PTR _iymin$[ebp]
  005b5	89 45 d8	 mov	 DWORD PTR _ixmin$[ebp], eax

; 730  : 			ixmax |= iymax;

  005b8	8b 45 dc	 mov	 eax, DWORD PTR _ixmax$[ebp]
  005bb	0b 45 d4	 or	 eax, DWORD PTR _iymax$[ebp]
  005be	89 45 dc	 mov	 DWORD PTR _ixmax$[ebp], eax

; 731  : 			points[count].outcode = ( ixmin | ixmax );

  005c1	8b 45 d8	 mov	 eax, DWORD PTR _ixmin$[ebp]
  005c4	0b 45 dc	 or	 eax, DWORD PTR _ixmax$[ebp]
  005c7	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  005ca	c1 e1 06	 shl	 ecx, 6
  005cd	8b 55 08	 mov	 edx, DWORD PTR _points$[ebp]
  005d0	88 44 0a 2c	 mov	 BYTE PTR [edx+ecx+44], al

; 732  : 		}
; 733  : 		else

  005d4	eb 0e		 jmp	 SHORT $LN6@transform_
$LN5@transform_:

; 734  : 		{
; 735  : 
; 736  : 			points[count].outcode = CLIP_HITHER;

  005d6	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  005d9	c1 e0 06	 shl	 eax, 6
  005dc	8b 4d 08	 mov	 ecx, DWORD PTR _points$[ebp]
  005df	c6 44 01 2c 20	 mov	 BYTE PTR [ecx+eax+44], 32 ; 00000020H
$LN6@transform_:

; 737  : 		}
; 738  : 	}

  005e4	e9 4f fc ff ff	 jmp	 $LN2@transform_
$LN3@transform_:

; 739  : }

  005e9	5f		 pop	 edi
  005ea	5e		 pop	 esi
  005eb	5b		 pop	 ebx
  005ec	8b e5		 mov	 esp, ebp
  005ee	5d		 pop	 ebp
  005ef	c2 0c 00	 ret	 12			; 0000000cH
?transform_object_3d_points@@YGXPAUVERTEX@@PAUVEC3D@@H@Z ENDP ; transform_object_3d_points
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobject.c
;	COMDAT ?pre_render_object_faces@@YGXH@Z
_TEXT	SEGMENT
_frame$1 = -12						; size = 4
_frame$2 = -8						; size = 4
_surfaces_left$ = -4					; size = 4
_object_number$ = 8					; size = 4
?pre_render_object_faces@@YGXH@Z PROC			; pre_render_object_faces, COMDAT

; 377  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 378  : 
; 379  : 	int
; 380  : 		surfaces_left;
; 381  : 
; 382  : 	surfaces_left = objects_3d_data[object_number].number_of_surfaces;

  00009	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00013	0f b7 54 01 06	 movzx	 edx, WORD PTR [ecx+eax+6]
  00018	89 55 fc	 mov	 DWORD PTR _surfaces_left$[ebp], edx

; 383  : 
; 384  : 	current_object_3d_surface = objects_3d_data[object_number].surfaces;

  0001b	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  0001f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00025	8b 54 01 50	 mov	 edx, DWORD PTR [ecx+eax+80]
  00029	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A, edx ; current_object_3d_surface

; 385  : 
; 386  : 	for ( surfaces_left = objects_3d_data[object_number].number_of_surfaces; surfaces_left > 0; surfaces_left-- )

  0002f	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00039	0f b7 54 01 06	 movzx	 edx, WORD PTR [ecx+eax+6]
  0003e	89 55 fc	 mov	 DWORD PTR _surfaces_left$[ebp], edx
  00041	eb 09		 jmp	 SHORT $LN4@pre_render
$LN2@pre_render:
  00043	8b 45 fc	 mov	 eax, DWORD PTR _surfaces_left$[ebp]
  00046	83 e8 01	 sub	 eax, 1
  00049	89 45 fc	 mov	 DWORD PTR _surfaces_left$[ebp], eax
$LN4@pre_render:
  0004c	83 7d fc 00	 cmp	 DWORD PTR _surfaces_left$[ebp], 0
  00050	0f 8e 1d 01 00
	00		 jle	 $LN1@pre_render

; 387  : 	{
; 388  : 
; 389  : 		if ( current_object_3d_surface->textured )

  00056	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0005b	66 8b 08	 mov	 cx, WORD PTR [eax]
  0005e	66 c1 e9 03	 shr	 cx, 3
  00062	66 83 e1 01	 and	 cx, 1
  00066	0f b7 d1	 movzx	 edx, cx
  00069	85 d2		 test	 edx, edx
  0006b	0f 84 f0 00 00
	00		 je	 $LN5@pre_render

; 390  : 		{
; 391  : 
; 392  : 			if ( current_object_3d_surface->texture_animation )

  00071	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00076	66 8b 08	 mov	 cx, WORD PTR [eax]
  00079	66 c1 e9 09	 shr	 cx, 9
  0007d	66 83 e1 01	 and	 cx, 1
  00081	0f b7 d1	 movzx	 edx, cx
  00084	85 d2		 test	 edx, edx
  00086	74 42		 je	 SHORT $LN6@pre_render

; 393  : 			{
; 394  : 		
; 395  : 				int
; 396  : 					frame;
; 397  : 		
; 398  : 				frame = texture_animations[current_object_3d_surface->texture_index].current_frame;

  00088	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0008d	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  00091	6b d1 0c	 imul	 edx, ecx, 12
  00094	a1 00 00 00 00	 mov	 eax, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  00099	8b 4c 10 04	 mov	 ecx, DWORD PTR [eax+edx+4]
  0009d	89 4d f8	 mov	 DWORD PTR _frame$2[ebp], ecx

; 399  : 
; 400  : 				current_object_3d_texture = system_textures[ texture_animations[current_object_3d_surface->texture_index].texture_indices[frame] ];

  000a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  000a5	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  000a9	6b d1 0c	 imul	 edx, ecx, 12
  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  000b1	8b 4c 10 08	 mov	 ecx, DWORD PTR [eax+edx+8]
  000b5	8b 55 f8	 mov	 edx, DWORD PTR _frame$2[ebp]
  000b8	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  000bb	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  000c2	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_texture@@3PAUSCREEN@@A, ecx ; current_object_3d_texture

; 401  : 			}
; 402  : 			else

  000c8	eb 16		 jmp	 SHORT $LN7@pre_render
$LN6@pre_render:

; 403  : 			{
; 404  : 		
; 405  : 				current_object_3d_texture = system_textures[current_object_3d_surface->texture_index];

  000ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  000cf	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  000d3	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[ecx*4]
  000da	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_texture@@3PAUSCREEN@@A, edx ; current_object_3d_texture
$LN7@pre_render:

; 406  : 			}
; 407  : 
; 408  : 			current_object_3d_texture;
; 409  : 
; 410  : 			if ( current_object_3d_surface->has_luminosity_texture )

  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  000e5	66 8b 08	 mov	 cx, WORD PTR [eax]
  000e8	66 c1 e9 04	 shr	 cx, 4
  000ec	66 83 e1 01	 and	 cx, 1
  000f0	0f b7 d1	 movzx	 edx, cx
  000f3	85 d2		 test	 edx, edx
  000f5	74 6a		 je	 SHORT $LN5@pre_render

; 411  : 			{
; 412  : 
; 413  : 				if ( current_object_3d_surface->luminosity_texture_animation )

  000f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  000fc	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  000ff	80 e1 01	 and	 cl, 1
  00102	0f b6 d1	 movzx	 edx, cl
  00105	85 d2		 test	 edx, edx
  00107	74 42		 je	 SHORT $LN9@pre_render

; 414  : 				{
; 415  : 			
; 416  : 					int
; 417  : 						frame;
; 418  : 			
; 419  : 					frame = texture_animations[current_object_3d_surface->luminosity_texture_index].current_frame;

  00109	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0010e	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00112	6b d1 0c	 imul	 edx, ecx, 12
  00115	a1 00 00 00 00	 mov	 eax, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  0011a	8b 4c 10 04	 mov	 ecx, DWORD PTR [eax+edx+4]
  0011e	89 4d f4	 mov	 DWORD PTR _frame$1[ebp], ecx

; 420  : 			
; 421  : 					current_object_3d_luminosity_texture = system_textures[ texture_animations[current_object_3d_surface->luminosity_texture_index].texture_indices[frame] ];

  00121	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00126	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0012a	6b d1 0c	 imul	 edx, ecx, 12
  0012d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  00132	8b 4c 10 08	 mov	 ecx, DWORD PTR [eax+edx+8]
  00136	8b 55 f4	 mov	 edx, DWORD PTR _frame$1[ebp]
  00139	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  0013c	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  00143	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_luminosity_texture@@3PAUSCREEN@@A, ecx ; current_object_3d_luminosity_texture

; 422  : 				}
; 423  : 				else

  00149	eb 16		 jmp	 SHORT $LN5@pre_render
$LN9@pre_render:

; 424  : 				{
; 425  : 			
; 426  : 					current_object_3d_luminosity_texture = system_textures[current_object_3d_surface->luminosity_texture_index];

  0014b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00150	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00154	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[ecx*4]
  0015b	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_luminosity_texture@@3PAUSCREEN@@A, edx ; current_object_3d_luminosity_texture
$LN5@pre_render:

; 427  : 				}
; 428  : 
; 429  : 				current_object_3d_luminosity_texture;
; 430  : 			}
; 431  : 		}
; 432  : 
; 433  : 		current_object_3d_surface++;

  00161	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00166	83 c0 10	 add	 eax, 16			; 00000010H
  00169	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A, eax ; current_object_3d_surface

; 434  : 	}

  0016e	e9 d0 fe ff ff	 jmp	 $LN2@pre_render
$LN1@pre_render:

; 435  : }

  00173	5f		 pop	 edi
  00174	5e		 pop	 esi
  00175	5b		 pop	 ebx
  00176	8b e5		 mov	 esp, ebp
  00178	5d		 pop	 ebp
  00179	c2 04 00	 ret	 4
?pre_render_object_faces@@YGXH@Z ENDP			; pre_render_object_faces
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobject.c
;	COMDAT ?pre_render_sub_object@@YGXPAUOBJECT_3D_SUB_INSTANCE@@PAUOBJECT_3D_DATABASE_ENTRY@@@Z
_TEXT	SEGMENT
_object_number$ = -8					; size = 4
_count$ = -4						; size = 4
_obj$ = 8						; size = 4
_scene$ = 12						; size = 4
?pre_render_sub_object@@YGXPAUOBJECT_3D_SUB_INSTANCE@@PAUOBJECT_3D_DATABASE_ENTRY@@@Z PROC ; pre_render_sub_object, COMDAT

; 337  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 338  : 	
; 339  : 	int
; 340  : 		count,
; 341  : 		object_number;
; 342  : 
; 343  : 	object_number = scene->index;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _scene$[ebp]
  0000c	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0000f	89 4d f8	 mov	 DWORD PTR _object_number$[ebp], ecx

; 344  : 
; 345  : 	if ( object_number )

  00012	83 7d f8 00	 cmp	 DWORD PTR _object_number$[ebp], 0
  00016	74 09		 je	 SHORT $LN5@pre_render

; 346  : 	{
; 347  : 
; 348  : 		pre_render_object_faces ( object_number );

  00018	8b 45 f8	 mov	 eax, DWORD PTR _object_number$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?pre_render_object_faces@@YGXH@Z ; pre_render_object_faces
$LN5@pre_render:

; 349  : 	}
; 350  : 
; 351  : 	//
; 352  : 	// Recurse down any sub objects
; 353  : 	//
; 354  : 
; 355  : 	if ( scene->number_of_sub_objects )

  00021	8b 45 0c	 mov	 eax, DWORD PTR _scene$[ebp]
  00024	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00028	85 c9		 test	 ecx, ecx
  0002a	74 7c		 je	 SHORT $LN1@pre_render

; 356  : 	{
; 357  : 
; 358  : 		for ( count = ( scene->number_of_sub_objects -1 ); count >= 0; count-- )

  0002c	8b 45 0c	 mov	 eax, DWORD PTR _scene$[ebp]
  0002f	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00033	83 e9 01	 sub	 ecx, 1
  00036	89 4d fc	 mov	 DWORD PTR _count$[ebp], ecx
  00039	eb 09		 jmp	 SHORT $LN4@pre_render
$LN2@pre_render:
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0003e	83 e8 01	 sub	 eax, 1
  00041	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@pre_render:
  00044	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  00048	7c 5e		 jl	 SHORT $LN1@pre_render

; 359  : 		{
; 360  : 
; 361  : 			if (	( obj->sub_objects[count].visible_object ) &&
; 362  : 					( scene->sub_objects[count].sub_object_approximation_in_level <= object_3d_approximation_level ) &&

  0004a	6b 45 fc 30	 imul	 eax, DWORD PTR _count$[ebp], 48
  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00051	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00054	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  00058	83 e0 01	 and	 eax, 1
  0005b	74 49		 je	 SHORT $LN7@pre_render
  0005d	6b 45 fc 38	 imul	 eax, DWORD PTR _count$[ebp], 56
  00061	8b 4d 0c	 mov	 ecx, DWORD PTR _scene$[ebp]
  00064	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00067	0f b6 44 02 05	 movzx	 eax, BYTE PTR [edx+eax+5]
  0006c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?object_3d_approximation_level@@3HA ; object_3d_approximation_level
  00072	7f 32		 jg	 SHORT $LN7@pre_render
  00074	6b 45 fc 38	 imul	 eax, DWORD PTR _count$[ebp], 56
  00078	8b 4d 0c	 mov	 ecx, DWORD PTR _scene$[ebp]
  0007b	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0007e	0f b6 44 02 06	 movzx	 eax, BYTE PTR [edx+eax+6]
  00083	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?object_3d_approximation_level@@3HA ; object_3d_approximation_level
  00089	7c 1b		 jl	 SHORT $LN7@pre_render

; 363  : 					( scene->sub_objects[count].sub_object_approximation_out_level >= object_3d_approximation_level ) )
; 364  : 			{
; 365  : 
; 366  : 				pre_render_sub_object ( &obj->sub_objects[count], &scene->sub_objects[count] );

  0008b	6b 45 fc 38	 imul	 eax, DWORD PTR _count$[ebp], 56
  0008f	8b 4d 0c	 mov	 ecx, DWORD PTR _scene$[ebp]
  00092	03 41 34	 add	 eax, DWORD PTR [ecx+52]
  00095	50		 push	 eax
  00096	6b 55 fc 30	 imul	 edx, DWORD PTR _count$[ebp], 48
  0009a	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0009d	03 50 04	 add	 edx, DWORD PTR [eax+4]
  000a0	52		 push	 edx
  000a1	e8 00 00 00 00	 call	 ?pre_render_sub_object@@YGXPAUOBJECT_3D_SUB_INSTANCE@@PAUOBJECT_3D_DATABASE_ENTRY@@@Z ; pre_render_sub_object
$LN7@pre_render:

; 367  : 			}
; 368  : 		}

  000a6	eb 93		 jmp	 SHORT $LN2@pre_render
$LN1@pre_render:

; 369  : 	}
; 370  : }

  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 08 00	 ret	 8
?pre_render_sub_object@@YGXPAUOBJECT_3D_SUB_INSTANCE@@PAUOBJECT_3D_DATABASE_ENTRY@@@Z ENDP ; pre_render_sub_object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobject.c
;	COMDAT ?generate_object_3d_point_normal@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@PAUVEC3D@@@Z
_TEXT	SEGMENT
_cos_pitch$ = -16					; size = 4
_sin_pitch$ = -12					; size = 4
_cos_heading$ = -8					; size = 4
_sin_heading$ = -4					; size = 4
_normal$ = 8						; size = 4
_result$ = 12						; size = 4
?generate_object_3d_point_normal@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@PAUVEC3D@@@Z PROC ; generate_object_3d_point_normal, COMDAT

; 1610 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1611 : 
; 1612 : 	float
; 1613 : 		sin_heading,
; 1614 : 		cos_heading,
; 1615 : 		sin_pitch,
; 1616 : 		cos_pitch;
; 1617 : 
; 1618 : 	sin_heading = object_3d_sin_heading[normal->heading];

  00009	8b 45 08	 mov	 eax, DWORD PTR _normal$[ebp]
  0000c	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0000f	f3 0f 10 04 8d
	00 00 00 00	 movss	 xmm0, DWORD PTR ?object_3d_sin_heading@@3PAMA[ecx*4]
  00018	f3 0f 11 45 fc	 movss	 DWORD PTR _sin_heading$[ebp], xmm0

; 1619 : 	cos_heading = object_3d_cos_heading[normal->heading];

  0001d	8b 45 08	 mov	 eax, DWORD PTR _normal$[ebp]
  00020	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00023	f3 0f 10 04 8d
	00 00 00 00	 movss	 xmm0, DWORD PTR ?object_3d_cos_heading@@3PAMA[ecx*4]
  0002c	f3 0f 11 45 f8	 movss	 DWORD PTR _cos_heading$[ebp], xmm0

; 1620 : 
; 1621 : 	sin_pitch = object_3d_sin_pitch[normal->pitch];

  00031	8b 45 08	 mov	 eax, DWORD PTR _normal$[ebp]
  00034	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00038	f3 0f 10 04 8d
	00 00 00 00	 movss	 xmm0, DWORD PTR ?object_3d_sin_pitch@@3PAMA[ecx*4]
  00041	f3 0f 11 45 f4	 movss	 DWORD PTR _sin_pitch$[ebp], xmm0

; 1622 : 	cos_pitch = object_3d_cos_pitch[normal->pitch];

  00046	8b 45 08	 mov	 eax, DWORD PTR _normal$[ebp]
  00049	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  0004d	f3 0f 10 04 8d
	00 00 00 00	 movss	 xmm0, DWORD PTR ?object_3d_cos_pitch@@3PAMA[ecx*4]
  00056	f3 0f 11 45 f0	 movss	 DWORD PTR _cos_pitch$[ebp], xmm0

; 1623 : /*
; 1624 : 		object_3d_sin_heading = sin ( heading );
; 1625 : 		object_3d_cos_heading = cos ( heading );
; 1626 : 
; 1627 : 		object_3d_sin_pitch = sin ( pitch );
; 1628 : 		object_3d_cos_pitch = cos ( pitch );
; 1629 : 	heading = normal->heading;
; 1630 : 	pitch = normal->pitch;
; 1631 : 
; 1632 : 	heading /= 256.0;
; 1633 : 	pitch /= 256.0;
; 1634 : 
; 1635 : 	heading *= PI2;
; 1636 : 	pitch *= PI;
; 1637 : 
; 1638 : 	heading -= PI;
; 1639 : 	pitch -= ( PI/2 );
; 1640 : */
; 1641 : 	result->x = cos_pitch * sin_heading;

  0005b	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _cos_pitch$[ebp]
  00060	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _sin_heading$[ebp]
  00065	8b 45 0c	 mov	 eax, DWORD PTR _result$[ebp]
  00068	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1642 : 	result->y = sin_pitch;

  0006c	8b 45 0c	 mov	 eax, DWORD PTR _result$[ebp]
  0006f	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _sin_pitch$[ebp]
  00074	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1643 : 	result->z = cos_pitch * cos_heading;

  00079	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _cos_pitch$[ebp]
  0007e	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _cos_heading$[ebp]
  00083	8b 45 0c	 mov	 eax, DWORD PTR _result$[ebp]
  00086	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 1644 : }

  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 08 00	 ret	 8
?generate_object_3d_point_normal@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@PAUVEC3D@@@Z ENDP ; generate_object_3d_point_normal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobject.c
;	COMDAT ?generate_new_environment_coordinates@@YGXHPAUVEC3D@@QAY02MPAM2@Z
_TEXT	SEGMENT
_r$ = -44						; size = 12
_n$ = -32						; size = 12
_u$ = -20						; size = 12
_ndotu$ = -8						; size = 4
_p$ = -4						; size = 4
_point_index$ = 8					; size = 4
_normal$ = 12						; size = 4
_attitude$ = 16						; size = 4
_texture_u$ = 20					; size = 4
_texture_v$ = 24					; size = 4
?generate_new_environment_coordinates@@YGXHPAUVEC3D@@QAY02MPAM2@Z PROC ; generate_new_environment_coordinates, COMDAT

; 1285 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1286 : 
; 1287 : 	float
; 1288 : 		p,
; 1289 : 		ndotu;
; 1290 : 
; 1291 : 	vec3d
; 1292 : 		u,
; 1293 : 		n,
; 1294 : 		r;
; 1295 : 
; 1296 : 	u.x = transformed_3d_3d_points[point_index].x;

  00009	8b 45 08	 mov	 eax, DWORD PTR _point_index$[ebp]
  0000c	f3 0f 10 04 c5
	00 00 00 00	 movss	 xmm0, DWORD PTR ?transformed_3d_3d_points@@3PAUOBJECT_TRANSFORMED_3D_POINT@@A[eax*8]
  00015	f3 0f 11 45 ec	 movss	 DWORD PTR _u$[ebp], xmm0

; 1297 : 	u.y = transformed_3d_3d_points[point_index].y;

  0001a	8b 45 08	 mov	 eax, DWORD PTR _point_index$[ebp]
  0001d	f3 0f 10 04 c5
	04 00 00 00	 movss	 xmm0, DWORD PTR ?transformed_3d_3d_points@@3PAUOBJECT_TRANSFORMED_3D_POINT@@A[eax*8+4]
  00026	f3 0f 11 45 f0	 movss	 DWORD PTR _u$[ebp+4], xmm0

; 1298 : 	u.z = transformed_3d_2d_points[point_index].z;

  0002b	8b 45 08	 mov	 eax, DWORD PTR _point_index$[ebp]
  0002e	c1 e0 04	 shl	 eax, 4
  00031	f3 0f 10 80 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?transformed_3d_2d_points@@3PAUOBJECT_TRANSFORMED_2D_POINT@@A[eax+12]
  00039	f3 0f 11 45 f4	 movss	 DWORD PTR _u$[ebp+8], xmm0

; 1299 : 
; 1300 : 	normalise_any_3d_vector ( &u );

  0003e	8d 45 ec	 lea	 eax, DWORD PTR _u$[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  00047	dd d8		 fstp	 ST(0)

; 1301 : 
; 1302 : 	n.x = normal->x * object_to_eye_attitude[0][0] + normal->x * object_to_eye_attitude[0][1] + normal->x * object_to_eye_attitude[0][2];

  00049	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0004e	6b c8 00	 imul	 ecx, eax, 0
  00051	ba 04 00 00 00	 mov	 edx, 4
  00056	6b c2 00	 imul	 eax, edx, 0
  00059	8b 55 0c	 mov	 edx, DWORD PTR _normal$[ebp]
  0005c	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00060	f3 0f 59 84 01
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?object_to_eye_attitude@@3PAY02MA[ecx+eax]
  00069	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0006e	6b c8 00	 imul	 ecx, eax, 0
  00071	ba 04 00 00 00	 mov	 edx, 4
  00076	c1 e2 00	 shl	 edx, 0
  00079	8b 45 0c	 mov	 eax, DWORD PTR _normal$[ebp]
  0007c	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00080	f3 0f 59 8c 11
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?object_to_eye_attitude@@3PAY02MA[ecx+edx]
  00089	f3 0f 58 c1	 addss	 xmm0, xmm1
  0008d	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00092	6b d1 00	 imul	 edx, ecx, 0
  00095	b8 04 00 00 00	 mov	 eax, 4
  0009a	d1 e0		 shl	 eax, 1
  0009c	8b 4d 0c	 mov	 ecx, DWORD PTR _normal$[ebp]
  0009f	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  000a3	f3 0f 59 8c 02
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?object_to_eye_attitude@@3PAY02MA[edx+eax]
  000ac	f3 0f 58 c1	 addss	 xmm0, xmm1
  000b0	f3 0f 11 45 e0	 movss	 DWORD PTR _n$[ebp], xmm0

; 1303 : 	n.y = normal->y * object_to_eye_attitude[1][0] + normal->y * object_to_eye_attitude[1][1] + normal->y * object_to_eye_attitude[1][2];

  000b5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000ba	c1 e0 00	 shl	 eax, 0
  000bd	b9 04 00 00 00	 mov	 ecx, 4
  000c2	6b d1 00	 imul	 edx, ecx, 0
  000c5	8b 4d 0c	 mov	 ecx, DWORD PTR _normal$[ebp]
  000c8	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  000cd	f3 0f 59 84 10
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?object_to_eye_attitude@@3PAY02MA[eax+edx]
  000d6	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000db	c1 e2 00	 shl	 edx, 0
  000de	b8 04 00 00 00	 mov	 eax, 4
  000e3	c1 e0 00	 shl	 eax, 0
  000e6	8b 4d 0c	 mov	 ecx, DWORD PTR _normal$[ebp]
  000e9	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  000ee	f3 0f 59 8c 02
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?object_to_eye_attitude@@3PAY02MA[edx+eax]
  000f7	f3 0f 58 c1	 addss	 xmm0, xmm1
  000fb	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00100	c1 e2 00	 shl	 edx, 0
  00103	b8 04 00 00 00	 mov	 eax, 4
  00108	d1 e0		 shl	 eax, 1
  0010a	8b 4d 0c	 mov	 ecx, DWORD PTR _normal$[ebp]
  0010d	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  00112	f3 0f 59 8c 02
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?object_to_eye_attitude@@3PAY02MA[edx+eax]
  0011b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0011f	f3 0f 11 45 e4	 movss	 DWORD PTR _n$[ebp+4], xmm0

; 1304 : 	n.z = normal->z * object_to_eye_attitude[2][0] + normal->z * object_to_eye_attitude[2][1] + normal->z * object_to_eye_attitude[2][2];

  00124	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00129	d1 e0		 shl	 eax, 1
  0012b	b9 04 00 00 00	 mov	 ecx, 4
  00130	6b d1 00	 imul	 edx, ecx, 0
  00133	8b 4d 0c	 mov	 ecx, DWORD PTR _normal$[ebp]
  00136	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0013b	f3 0f 59 84 10
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?object_to_eye_attitude@@3PAY02MA[eax+edx]
  00144	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00149	d1 e2		 shl	 edx, 1
  0014b	b8 04 00 00 00	 mov	 eax, 4
  00150	c1 e0 00	 shl	 eax, 0
  00153	8b 4d 0c	 mov	 ecx, DWORD PTR _normal$[ebp]
  00156	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0015b	f3 0f 59 8c 02
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?object_to_eye_attitude@@3PAY02MA[edx+eax]
  00164	f3 0f 58 c1	 addss	 xmm0, xmm1
  00168	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0016d	d1 e2		 shl	 edx, 1
  0016f	b8 04 00 00 00	 mov	 eax, 4
  00174	d1 e0		 shl	 eax, 1
  00176	8b 4d 0c	 mov	 ecx, DWORD PTR _normal$[ebp]
  00179	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0017e	f3 0f 59 8c 02
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?object_to_eye_attitude@@3PAY02MA[edx+eax]
  00187	f3 0f 58 c1	 addss	 xmm0, xmm1
  0018b	f3 0f 11 45 e8	 movss	 DWORD PTR _n$[ebp+8], xmm0

; 1305 : 
; 1306 : 	normalise_any_3d_vector ( &n );

  00190	8d 45 e0	 lea	 eax, DWORD PTR _n$[ebp]
  00193	50		 push	 eax
  00194	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  00199	dd d8		 fstp	 ST(0)

; 1307 : 
; 1308 : 	ndotu = 2.0 * ( n.x * u.x + n.y * u.y + n.z * u.z );

  0019b	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _n$[ebp]
  001a0	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _u$[ebp]
  001a5	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _n$[ebp+4]
  001aa	f3 0f 59 4d f0	 mulss	 xmm1, DWORD PTR _u$[ebp+4]
  001af	f3 0f 58 c1	 addss	 xmm0, xmm1
  001b3	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _n$[ebp+8]
  001b8	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _u$[ebp+8]
  001bd	f3 0f 58 c1	 addss	 xmm0, xmm1
  001c1	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001c5	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  001cd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001d1	f3 0f 11 45 f8	 movss	 DWORD PTR _ndotu$[ebp], xmm0

; 1309 : 
; 1310 : 	r.x = u.x - ( ndotu * n.x );

  001d6	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _ndotu$[ebp]
  001db	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _n$[ebp]
  001e0	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _u$[ebp]
  001e5	f3 0f 5c c8	 subss	 xmm1, xmm0
  001e9	f3 0f 11 4d d4	 movss	 DWORD PTR _r$[ebp], xmm1

; 1311 : 	r.y = u.y - ( ndotu * n.y );

  001ee	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _ndotu$[ebp]
  001f3	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _n$[ebp+4]
  001f8	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _u$[ebp+4]
  001fd	f3 0f 5c c8	 subss	 xmm1, xmm0
  00201	f3 0f 11 4d d8	 movss	 DWORD PTR _r$[ebp+4], xmm1

; 1312 : 	r.z = u.z - ( ndotu * n.z );

  00206	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _ndotu$[ebp]
  0020b	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _n$[ebp+8]
  00210	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _u$[ebp+8]
  00215	f3 0f 5c c8	 subss	 xmm1, xmm0
  00219	f3 0f 11 4d dc	 movss	 DWORD PTR _r$[ebp+8], xmm1

; 1313 : //	r.x = ( ndotu * n.x ) - u.x;
; 1314 : //	r.y = ( ndotu * n.y ) - u.y;
; 1315 : //	r.z = ( ndotu * n.z ) - u.z;
; 1316 : 
; 1317 : 	p = ( r.x * r.x ) + ( r.y * r.y ) + ( ( r.z + 1 ) * ( r.z + 1 ) );

  0021e	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _r$[ebp]
  00223	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _r$[ebp]
  00228	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _r$[ebp+4]
  0022d	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _r$[ebp+4]
  00232	f3 0f 58 c1	 addss	 xmm0, xmm1
  00236	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _r$[ebp+8]
  0023b	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f800000
  00243	f3 0f 10 55 dc	 movss	 xmm2, DWORD PTR _r$[ebp+8]
  00248	f3 0f 58 15 00
	00 00 00	 addss	 xmm2, DWORD PTR __real@3f800000
  00250	f3 0f 59 ca	 mulss	 xmm1, xmm2
  00254	f3 0f 58 c1	 addss	 xmm0, xmm1
  00258	f3 0f 11 45 fc	 movss	 DWORD PTR _p$[ebp], xmm0

; 1318 : 	p = sqrt ( p );

  0025d	51		 push	 ecx
  0025e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _p$[ebp]
  00263	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00268	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  0026d	d9 5d fc	 fstp	 DWORD PTR _p$[ebp]

; 1319 : 
; 1320 : 	*texture_v = 0.5 + ( r.x / ( 2.0 * p ) );

  00270	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _r$[ebp]
  00275	f3 0f 5a 4d fc	 cvtss2sd xmm1, DWORD PTR _p$[ebp]
  0027a	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4000000000000000
  00282	f2 0f 5e c1	 divsd	 xmm0, xmm1
  00286	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0028e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00292	8b 45 18	 mov	 eax, DWORD PTR _texture_v$[ebp]
  00295	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1321 : 	*texture_u = 0.5 + ( r.y / ( 2.0 * p ) );

  00299	f3 0f 5a 45 d8	 cvtss2sd xmm0, DWORD PTR _r$[ebp+4]
  0029e	f3 0f 5a 4d fc	 cvtss2sd xmm1, DWORD PTR _p$[ebp]
  002a3	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4000000000000000
  002ab	f2 0f 5e c1	 divsd	 xmm0, xmm1
  002af	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  002b7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002bb	8b 45 14	 mov	 eax, DWORD PTR _texture_u$[ebp]
  002be	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1322 : }

  002c2	5f		 pop	 edi
  002c3	5e		 pop	 esi
  002c4	5b		 pop	 ebx
  002c5	8b e5		 mov	 esp, ebp
  002c7	5d		 pop	 ebp
  002c8	c2 14 00	 ret	 20			; 00000014H
?generate_new_environment_coordinates@@YGXHPAUVEC3D@@QAY02MPAM2@Z ENDP ; generate_new_environment_coordinates
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobject.c
;	COMDAT ?generate_relative_lights@@YGPAULIGHT_3D_SOURCE@@PAUVIEWPOINT@@PAUVEC3D@@PAU1@@Z
_TEXT	SEGMENT
_distance$1 = -48					; size = 4
_vector$2 = -44						; size = 12
_lz$3 = -32						; size = 4
_ly$4 = -28						; size = 4
_lx$5 = -24						; size = 4
_light_count$6 = -20					; size = 4
_light$ = -16						; size = 4
_this_light$ = -12					; size = 4
_prev_light$ = -8					; size = 4
_light_ptr$ = -4					; size = 4
_vp$ = 8						; size = 4
_object_unit_pos$ = 12					; size = 4
_lights$ = 16						; size = 4
?generate_relative_lights@@YGPAULIGHT_3D_SOURCE@@PAUVIEWPOINT@@PAUVEC3D@@PAU1@@Z PROC ; generate_relative_lights, COMDAT

; 1442 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1443 : 
; 1444 : 	light_3d_source
; 1445 : 		*light_ptr,
; 1446 : 		*prev_light,
; 1447 : 		*this_light,
; 1448 : 		*light;
; 1449 : 
; 1450 : 	light_ptr = lights;

  00009	8b 45 10	 mov	 eax, DWORD PTR _lights$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _light_ptr$[ebp], eax

; 1451 : 
; 1452 : 	prev_light = NULL;

  0000f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _prev_light$[ebp], 0

; 1453 : 
; 1454 : 	light = NULL;

  00016	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _light$[ebp], 0

; 1455 : 
; 1456 : 	if ( light_ptr )

  0001d	83 7d fc 00	 cmp	 DWORD PTR _light_ptr$[ebp], 0
  00021	0f 84 e1 05 00
	00		 je	 $LN3@generate_r

; 1457 : 	{
; 1458 : 
; 1459 : 		int
; 1460 : 			light_count;
; 1461 : 
; 1462 : 		light_count = 0;

  00027	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _light_count$6[ebp], 0

; 1463 : 
; 1464 : 		light = &light_3d_array[object_3d_light_3d_current_base];

  0002e	6b 05 00 00 00
	00 3c		 imul	 eax, DWORD PTR ?object_3d_light_3d_current_base@@3HA, 60 ; object_3d_light_3d_current_base
  00035	05 00 00 00 00	 add	 eax, OFFSET ?light_3d_array@@3PAULIGHT_3D_SOURCE@@A ; light_3d_array
  0003a	89 45 f0	 mov	 DWORD PTR _light$[ebp], eax
$LN2@generate_r:

; 1465 : 
; 1466 : 		while ( light_ptr )

  0003d	83 7d fc 00	 cmp	 DWORD PTR _light_ptr$[ebp], 0
  00041	0f 84 c1 05 00
	00		 je	 $LN3@generate_r

; 1467 : 		{
; 1468 : 
; 1469 : 			float
; 1470 : 				lx,
; 1471 : 				ly,
; 1472 : 				lz;
; 1473 : 
; 1474 : 			light_count++;

  00047	8b 45 ec	 mov	 eax, DWORD PTR _light_count$6[ebp]
  0004a	83 c0 01	 add	 eax, 1
  0004d	89 45 ec	 mov	 DWORD PTR _light_count$6[ebp], eax

; 1475 : 
; 1476 : 			if ( light_ptr->type == LIGHT_3D_TYPE_POINT )

  00050	8b 45 fc	 mov	 eax, DWORD PTR _light_ptr$[ebp]
  00053	83 78 30 02	 cmp	 DWORD PTR [eax+48], 2
  00057	0f 85 25 03 00
	00		 jne	 $LN5@generate_r

; 1477 : 			{
; 1478 : 
; 1479 : 				vec3d
; 1480 : 					vector;
; 1481 : 
; 1482 : 				float
; 1483 : 					distance;
; 1484 : 
; 1485 : 				//
; 1486 : 				// Work out the distance from object to light source
; 1487 : 				//
; 1488 : 
; 1489 : 				vector.x = light_ptr->light_position.x - vp->x;

  0005d	8b 45 fc	 mov	 eax, DWORD PTR _light_ptr$[ebp]
  00060	8b 4d 08	 mov	 ecx, DWORD PTR _vp$[ebp]
  00063	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00067	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0006b	f3 0f 11 45 d4	 movss	 DWORD PTR _vector$2[ebp], xmm0

; 1490 : 				vector.y = light_ptr->light_position.y - vp->y;

  00070	8b 45 fc	 mov	 eax, DWORD PTR _light_ptr$[ebp]
  00073	8b 4d 08	 mov	 ecx, DWORD PTR _vp$[ebp]
  00076	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0007b	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00080	f3 0f 11 45 d8	 movss	 DWORD PTR _vector$2[ebp+4], xmm0

; 1491 : 				vector.z = light_ptr->light_position.z - vp->z;

  00085	8b 45 fc	 mov	 eax, DWORD PTR _light_ptr$[ebp]
  00088	8b 4d 08	 mov	 ecx, DWORD PTR _vp$[ebp]
  0008b	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00090	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00095	f3 0f 11 45 dc	 movss	 DWORD PTR _vector$2[ebp+8], xmm0

; 1492 : 
; 1493 : 				lx = vector.x * vector.x;

  0009a	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _vector$2[ebp]
  0009f	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _vector$2[ebp]
  000a4	f3 0f 11 45 e8	 movss	 DWORD PTR _lx$5[ebp], xmm0

; 1494 : 				ly = vector.y * vector.y;

  000a9	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _vector$2[ebp+4]
  000ae	f3 0f 59 45 d8	 mulss	 xmm0, DWORD PTR _vector$2[ebp+4]
  000b3	f3 0f 11 45 e4	 movss	 DWORD PTR _ly$4[ebp], xmm0

; 1495 : 				lz = vector.z * vector.z;

  000b8	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _vector$2[ebp+8]
  000bd	f3 0f 59 45 dc	 mulss	 xmm0, DWORD PTR _vector$2[ebp+8]
  000c2	f3 0f 11 45 e0	 movss	 DWORD PTR _lz$3[ebp], xmm0

; 1496 : 
; 1497 : 				distance = ( lx + ly + lz );

  000c7	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _lx$5[ebp]
  000cc	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _ly$4[ebp]
  000d1	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _lz$3[ebp]
  000d6	f3 0f 11 45 d0	 movss	 DWORD PTR _distance$1[ebp], xmm0

; 1498 : 
; 1499 : 				if ( distance < light_ptr->radius )

  000db	8b 45 fc	 mov	 eax, DWORD PTR _light_ptr$[ebp]
  000de	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  000e3	0f 2f 45 d0	 comiss	 xmm0, DWORD PTR _distance$1[ebp]
  000e7	0f 86 90 02 00
	00		 jbe	 $LN7@generate_r

; 1500 : 				{
; 1501 : 
; 1502 : 					distance = 1 - ( distance / light_ptr->radius );

  000ed	8b 45 fc	 mov	 eax, DWORD PTR _light_ptr$[ebp]
  000f0	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _distance$1[ebp]
  000f5	f3 0f 5e 40 2c	 divss	 xmm0, DWORD PTR [eax+44]
  000fa	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00102	f3 0f 5c c8	 subss	 xmm1, xmm0
  00106	f3 0f 11 4d d0	 movss	 DWORD PTR _distance$1[ebp], xmm1

; 1503 : 
; 1504 : 					this_light = &light_3d_array[object_3d_light_3d_current_base];

  0010b	6b 05 00 00 00
	00 3c		 imul	 eax, DWORD PTR ?object_3d_light_3d_current_base@@3HA, 60 ; object_3d_light_3d_current_base
  00112	05 00 00 00 00	 add	 eax, OFFSET ?light_3d_array@@3PAULIGHT_3D_SOURCE@@A ; light_3d_array
  00117	89 45 f4	 mov	 DWORD PTR _this_light$[ebp], eax

; 1505 : 			
; 1506 : 					object_3d_light_3d_current_base++;

  0011a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_3d_light_3d_current_base@@3HA ; object_3d_light_3d_current_base
  0011f	83 c0 01	 add	 eax, 1
  00122	a3 00 00 00 00	 mov	 DWORD PTR ?object_3d_light_3d_current_base@@3HA, eax ; object_3d_light_3d_current_base

; 1507 : 		
; 1508 : 					if ( prev_light )

  00127	83 7d f8 00	 cmp	 DWORD PTR _prev_light$[ebp], 0
  0012b	74 09		 je	 SHORT $LN8@generate_r

; 1509 : 					{
; 1510 : 		
; 1511 : 						prev_light->succ = this_light;

  0012d	8b 45 f8	 mov	 eax, DWORD PTR _prev_light$[ebp]
  00130	8b 4d f4	 mov	 ecx, DWORD PTR _this_light$[ebp]
  00133	89 48 38	 mov	 DWORD PTR [eax+56], ecx
$LN8@generate_r:

; 1512 : 					}
; 1513 : 		
; 1514 : 					this_light->pred = prev_light;

  00136	8b 45 f4	 mov	 eax, DWORD PTR _this_light$[ebp]
  00139	8b 4d f8	 mov	 ecx, DWORD PTR _prev_light$[ebp]
  0013c	89 48 34	 mov	 DWORD PTR [eax+52], ecx

; 1515 : 					this_light->succ = NULL;

  0013f	8b 45 f4	 mov	 eax, DWORD PTR _this_light$[ebp]
  00142	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 1516 : 		
; 1517 : 					this_light->type = light_ptr->type;

  00149	8b 45 f4	 mov	 eax, DWORD PTR _this_light$[ebp]
  0014c	8b 4d fc	 mov	 ecx, DWORD PTR _light_ptr$[ebp]
  0014f	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00152	89 50 30	 mov	 DWORD PTR [eax+48], edx

; 1518 : 
; 1519 : 					this_light->colour.red = light_ptr->colour.red * distance;

  00155	8b 45 fc	 mov	 eax, DWORD PTR _light_ptr$[ebp]
  00158	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  0015d	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _distance$1[ebp]
  00162	8b 4d f4	 mov	 ecx, DWORD PTR _this_light$[ebp]
  00165	f3 0f 11 41 18	 movss	 DWORD PTR [ecx+24], xmm0

; 1520 : 					this_light->colour.green = light_ptr->colour.green * distance;

  0016a	8b 45 fc	 mov	 eax, DWORD PTR _light_ptr$[ebp]
  0016d	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00172	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _distance$1[ebp]
  00177	8b 4d f4	 mov	 ecx, DWORD PTR _this_light$[ebp]
  0017a	f3 0f 11 41 1c	 movss	 DWORD PTR [ecx+28], xmm0

; 1521 : 					this_light->colour.blue = light_ptr->colour.blue * distance;

  0017f	8b 45 fc	 mov	 eax, DWORD PTR _light_ptr$[ebp]
  00182	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  00187	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _distance$1[ebp]
  0018c	8b 4d f4	 mov	 ecx, DWORD PTR _this_light$[ebp]
  0018f	f3 0f 11 41 20	 movss	 DWORD PTR [ecx+32], xmm0

; 1522 : 					this_light->intensity = this_light->colour.red * 0.30 + this_light->colour.green * 0.59 + this_light->colour.blue * 0.11;

  00194	8b 45 f4	 mov	 eax, DWORD PTR _this_light$[ebp]
  00197	f3 0f 5a 40 18	 cvtss2sd xmm0, DWORD PTR [eax+24]
  0019c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd3333333333333
  001a4	8b 4d f4	 mov	 ecx, DWORD PTR _this_light$[ebp]
  001a7	f3 0f 5a 49 1c	 cvtss2sd xmm1, DWORD PTR [ecx+28]
  001ac	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe2e147ae147ae1
  001b4	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001b8	8b 55 f4	 mov	 edx, DWORD PTR _this_light$[ebp]
  001bb	f3 0f 5a 4a 20	 cvtss2sd xmm1, DWORD PTR [edx+32]
  001c0	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fbc28f5c28f5c29
  001c8	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001cc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001d0	8b 45 f4	 mov	 eax, DWORD PTR _this_light$[ebp]
  001d3	f3 0f 11 40 28	 movss	 DWORD PTR [eax+40], xmm0

; 1523 : 
; 1524 : 					normalise_any_3d_vector ( &vector );

  001d8	8d 45 d4	 lea	 eax, DWORD PTR _vector$2[ebp]
  001db	50		 push	 eax
  001dc	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  001e1	dd d8		 fstp	 ST(0)

; 1525 : 
; 1526 : 					lx = ( vector.x * vp->attitude[0][0] );

  001e3	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001e8	6b c8 00	 imul	 ecx, eax, 0
  001eb	8b 55 08	 mov	 edx, DWORD PTR _vp$[ebp]
  001ee	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  001f2	b9 04 00 00 00	 mov	 ecx, 4
  001f7	6b d1 00	 imul	 edx, ecx, 0
  001fa	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _vector$2[ebp]
  001ff	f3 0f 59 04 10	 mulss	 xmm0, DWORD PTR [eax+edx]
  00204	f3 0f 11 45 e8	 movss	 DWORD PTR _lx$5[ebp], xmm0

; 1527 : 					lx += ( vector.y * vp->attitude[0][1] );

  00209	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0020e	6b c8 00	 imul	 ecx, eax, 0
  00211	8b 55 08	 mov	 edx, DWORD PTR _vp$[ebp]
  00214	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  00218	b9 04 00 00 00	 mov	 ecx, 4
  0021d	c1 e1 00	 shl	 ecx, 0
  00220	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _vector$2[ebp+4]
  00225	f3 0f 59 04 08	 mulss	 xmm0, DWORD PTR [eax+ecx]
  0022a	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _lx$5[ebp]
  0022f	f3 0f 11 45 e8	 movss	 DWORD PTR _lx$5[ebp], xmm0

; 1528 : 					lx += ( vector.z * vp->attitude[0][2] );

  00234	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00239	6b c8 00	 imul	 ecx, eax, 0
  0023c	8b 55 08	 mov	 edx, DWORD PTR _vp$[ebp]
  0023f	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  00243	b9 04 00 00 00	 mov	 ecx, 4
  00248	d1 e1		 shl	 ecx, 1
  0024a	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _vector$2[ebp+8]
  0024f	f3 0f 59 04 08	 mulss	 xmm0, DWORD PTR [eax+ecx]
  00254	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _lx$5[ebp]
  00259	f3 0f 11 45 e8	 movss	 DWORD PTR _lx$5[ebp], xmm0

; 1529 : 		
; 1530 : 					ly = ( vector.x * vp->attitude[1][0] );

  0025e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00263	c1 e0 00	 shl	 eax, 0
  00266	8b 4d 08	 mov	 ecx, DWORD PTR _vp$[ebp]
  00269	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  0026d	b8 04 00 00 00	 mov	 eax, 4
  00272	6b c8 00	 imul	 ecx, eax, 0
  00275	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _vector$2[ebp]
  0027a	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  0027f	f3 0f 11 45 e4	 movss	 DWORD PTR _ly$4[ebp], xmm0

; 1531 : 					ly += ( vector.y * vp->attitude[1][1] );

  00284	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00289	c1 e0 00	 shl	 eax, 0
  0028c	8b 4d 08	 mov	 ecx, DWORD PTR _vp$[ebp]
  0028f	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  00293	b8 04 00 00 00	 mov	 eax, 4
  00298	c1 e0 00	 shl	 eax, 0
  0029b	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _vector$2[ebp+4]
  002a0	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  002a5	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _ly$4[ebp]
  002aa	f3 0f 11 45 e4	 movss	 DWORD PTR _ly$4[ebp], xmm0

; 1532 : 					ly += ( vector.z * vp->attitude[1][2] );

  002af	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002b4	c1 e0 00	 shl	 eax, 0
  002b7	8b 4d 08	 mov	 ecx, DWORD PTR _vp$[ebp]
  002ba	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  002be	b8 04 00 00 00	 mov	 eax, 4
  002c3	d1 e0		 shl	 eax, 1
  002c5	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _vector$2[ebp+8]
  002ca	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  002cf	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _ly$4[ebp]
  002d4	f3 0f 11 45 e4	 movss	 DWORD PTR _ly$4[ebp], xmm0

; 1533 : 		
; 1534 : 					lz = ( vector.x * vp->attitude[2][0] );

  002d9	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002de	d1 e0		 shl	 eax, 1
  002e0	8b 4d 08	 mov	 ecx, DWORD PTR _vp$[ebp]
  002e3	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  002e7	b8 04 00 00 00	 mov	 eax, 4
  002ec	6b c8 00	 imul	 ecx, eax, 0
  002ef	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _vector$2[ebp]
  002f4	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  002f9	f3 0f 11 45 e0	 movss	 DWORD PTR _lz$3[ebp], xmm0

; 1535 : 					lz += ( vector.y * vp->attitude[2][1] );

  002fe	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00303	d1 e0		 shl	 eax, 1
  00305	8b 4d 08	 mov	 ecx, DWORD PTR _vp$[ebp]
  00308	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  0030c	b8 04 00 00 00	 mov	 eax, 4
  00311	c1 e0 00	 shl	 eax, 0
  00314	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _vector$2[ebp+4]
  00319	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  0031e	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _lz$3[ebp]
  00323	f3 0f 11 45 e0	 movss	 DWORD PTR _lz$3[ebp], xmm0

; 1536 : 					lz += ( vector.z * vp->attitude[2][2] );

  00328	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0032d	d1 e0		 shl	 eax, 1
  0032f	8b 4d 08	 mov	 ecx, DWORD PTR _vp$[ebp]
  00332	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  00336	b8 04 00 00 00	 mov	 eax, 4
  0033b	d1 e0		 shl	 eax, 1
  0033d	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _vector$2[ebp+8]
  00342	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  00347	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _lz$3[ebp]
  0034c	f3 0f 11 45 e0	 movss	 DWORD PTR _lz$3[ebp], xmm0

; 1537 : 		
; 1538 : 					this_light->lx = lx;

  00351	8b 45 f4	 mov	 eax, DWORD PTR _this_light$[ebp]
  00354	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _lx$5[ebp]
  00359	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1539 : 					this_light->ly = ly;

  0035d	8b 45 f4	 mov	 eax, DWORD PTR _this_light$[ebp]
  00360	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _ly$4[ebp]
  00365	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1540 : 					this_light->lz = lz;

  0036a	8b 45 f4	 mov	 eax, DWORD PTR _this_light$[ebp]
  0036d	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _lz$3[ebp]
  00372	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 1541 : 		
; 1542 : 					prev_light = this_light;

  00377	8b 45 f4	 mov	 eax, DWORD PTR _this_light$[ebp]
  0037a	89 45 f8	 mov	 DWORD PTR _prev_light$[ebp], eax
$LN7@generate_r:

; 1543 : 				}
; 1544 : 			}
; 1545 : 			else

  0037d	e9 78 02 00 00	 jmp	 $LN6@generate_r
$LN5@generate_r:

; 1546 : 			{
; 1547 : 	
; 1548 : 				this_light = &light_3d_array[object_3d_light_3d_current_base];

  00382	6b 05 00 00 00
	00 3c		 imul	 eax, DWORD PTR ?object_3d_light_3d_current_base@@3HA, 60 ; object_3d_light_3d_current_base
  00389	05 00 00 00 00	 add	 eax, OFFSET ?light_3d_array@@3PAULIGHT_3D_SOURCE@@A ; light_3d_array
  0038e	89 45 f4	 mov	 DWORD PTR _this_light$[ebp], eax

; 1549 : 		
; 1550 : 				object_3d_light_3d_current_base++;

  00391	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_3d_light_3d_current_base@@3HA ; object_3d_light_3d_current_base
  00396	83 c0 01	 add	 eax, 1
  00399	a3 00 00 00 00	 mov	 DWORD PTR ?object_3d_light_3d_current_base@@3HA, eax ; object_3d_light_3d_current_base

; 1551 : 	
; 1552 : 				if ( prev_light )

  0039e	83 7d f8 00	 cmp	 DWORD PTR _prev_light$[ebp], 0
  003a2	74 09		 je	 SHORT $LN9@generate_r

; 1553 : 				{
; 1554 : 	
; 1555 : 					prev_light->succ = this_light;

  003a4	8b 45 f8	 mov	 eax, DWORD PTR _prev_light$[ebp]
  003a7	8b 4d f4	 mov	 ecx, DWORD PTR _this_light$[ebp]
  003aa	89 48 38	 mov	 DWORD PTR [eax+56], ecx
$LN9@generate_r:

; 1556 : 				}
; 1557 : 	
; 1558 : 				this_light->pred = prev_light;

  003ad	8b 45 f4	 mov	 eax, DWORD PTR _this_light$[ebp]
  003b0	8b 4d f8	 mov	 ecx, DWORD PTR _prev_light$[ebp]
  003b3	89 48 34	 mov	 DWORD PTR [eax+52], ecx

; 1559 : 				this_light->succ = NULL;

  003b6	8b 45 f4	 mov	 eax, DWORD PTR _this_light$[ebp]
  003b9	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 1560 : 	
; 1561 : 				this_light->type = light_ptr->type;

  003c0	8b 45 f4	 mov	 eax, DWORD PTR _this_light$[ebp]
  003c3	8b 4d fc	 mov	 ecx, DWORD PTR _light_ptr$[ebp]
  003c6	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  003c9	89 50 30	 mov	 DWORD PTR [eax+48], edx

; 1562 : 
; 1563 : 				this_light->colour.red = light_ptr->colour.red;

  003cc	8b 45 f4	 mov	 eax, DWORD PTR _this_light$[ebp]
  003cf	8b 4d fc	 mov	 ecx, DWORD PTR _light_ptr$[ebp]
  003d2	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  003d5	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 1564 : 				this_light->colour.green = light_ptr->colour.green;

  003d8	8b 45 f4	 mov	 eax, DWORD PTR _this_light$[ebp]
  003db	8b 4d fc	 mov	 ecx, DWORD PTR _light_ptr$[ebp]
  003de	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  003e1	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 1565 : 				this_light->colour.blue = light_ptr->colour.blue;

  003e4	8b 45 f4	 mov	 eax, DWORD PTR _this_light$[ebp]
  003e7	8b 4d fc	 mov	 ecx, DWORD PTR _light_ptr$[ebp]
  003ea	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  003ed	89 50 20	 mov	 DWORD PTR [eax+32], edx

; 1566 : 				this_light->intensity = this_light->intensity;	//this_light->colour.red * 0.30 + this_light->colour.green * 0.59 + this_light->colour.blue * 0.11;

  003f0	8b 45 f4	 mov	 eax, DWORD PTR _this_light$[ebp]
  003f3	8b 4d f4	 mov	 ecx, DWORD PTR _this_light$[ebp]
  003f6	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  003f9	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 1567 : 
; 1568 : 				lx = ( light_ptr->lx * vp->attitude[0][0] );

  003fc	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00401	6b c8 00	 imul	 ecx, eax, 0
  00404	8b 55 08	 mov	 edx, DWORD PTR _vp$[ebp]
  00407	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  0040b	b9 04 00 00 00	 mov	 ecx, 4
  00410	6b d1 00	 imul	 edx, ecx, 0
  00413	8b 4d fc	 mov	 ecx, DWORD PTR _light_ptr$[ebp]
  00416	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0041a	f3 0f 59 04 10	 mulss	 xmm0, DWORD PTR [eax+edx]
  0041f	f3 0f 11 45 e8	 movss	 DWORD PTR _lx$5[ebp], xmm0

; 1569 : 				lx +=  ( light_ptr->ly * vp->attitude[0][1] );

  00424	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00429	6b c8 00	 imul	 ecx, eax, 0
  0042c	8b 55 08	 mov	 edx, DWORD PTR _vp$[ebp]
  0042f	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  00433	b9 04 00 00 00	 mov	 ecx, 4
  00438	c1 e1 00	 shl	 ecx, 0
  0043b	8b 55 fc	 mov	 edx, DWORD PTR _light_ptr$[ebp]
  0043e	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  00443	f3 0f 59 04 08	 mulss	 xmm0, DWORD PTR [eax+ecx]
  00448	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _lx$5[ebp]
  0044d	f3 0f 11 45 e8	 movss	 DWORD PTR _lx$5[ebp], xmm0

; 1570 : 				lx += ( light_ptr->lz * vp->attitude[0][2] );

  00452	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00457	6b c8 00	 imul	 ecx, eax, 0
  0045a	8b 55 08	 mov	 edx, DWORD PTR _vp$[ebp]
  0045d	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  00461	b9 04 00 00 00	 mov	 ecx, 4
  00466	d1 e1		 shl	 ecx, 1
  00468	8b 55 fc	 mov	 edx, DWORD PTR _light_ptr$[ebp]
  0046b	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  00470	f3 0f 59 04 08	 mulss	 xmm0, DWORD PTR [eax+ecx]
  00475	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _lx$5[ebp]
  0047a	f3 0f 11 45 e8	 movss	 DWORD PTR _lx$5[ebp], xmm0

; 1571 : 	
; 1572 : 				ly = ( light_ptr->lx * vp->attitude[1][0] );

  0047f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00484	c1 e0 00	 shl	 eax, 0
  00487	8b 4d 08	 mov	 ecx, DWORD PTR _vp$[ebp]
  0048a	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  0048e	b8 04 00 00 00	 mov	 eax, 4
  00493	6b c8 00	 imul	 ecx, eax, 0
  00496	8b 45 fc	 mov	 eax, DWORD PTR _light_ptr$[ebp]
  00499	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0049d	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  004a2	f3 0f 11 45 e4	 movss	 DWORD PTR _ly$4[ebp], xmm0

; 1573 : 				ly += ( light_ptr->ly * vp->attitude[1][1] );

  004a7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004ac	c1 e0 00	 shl	 eax, 0
  004af	8b 4d 08	 mov	 ecx, DWORD PTR _vp$[ebp]
  004b2	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  004b6	b8 04 00 00 00	 mov	 eax, 4
  004bb	c1 e0 00	 shl	 eax, 0
  004be	8b 4d fc	 mov	 ecx, DWORD PTR _light_ptr$[ebp]
  004c1	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  004c6	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  004cb	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _ly$4[ebp]
  004d0	f3 0f 11 45 e4	 movss	 DWORD PTR _ly$4[ebp], xmm0

; 1574 : 				ly += ( light_ptr->lz * vp->attitude[1][2] );

  004d5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004da	c1 e0 00	 shl	 eax, 0
  004dd	8b 4d 08	 mov	 ecx, DWORD PTR _vp$[ebp]
  004e0	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  004e4	b8 04 00 00 00	 mov	 eax, 4
  004e9	d1 e0		 shl	 eax, 1
  004eb	8b 4d fc	 mov	 ecx, DWORD PTR _light_ptr$[ebp]
  004ee	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  004f3	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  004f8	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _ly$4[ebp]
  004fd	f3 0f 11 45 e4	 movss	 DWORD PTR _ly$4[ebp], xmm0

; 1575 : 	
; 1576 : 	
; 1577 : 				lz = ( light_ptr->lx * vp->attitude[2][0] );

  00502	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00507	d1 e0		 shl	 eax, 1
  00509	8b 4d 08	 mov	 ecx, DWORD PTR _vp$[ebp]
  0050c	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  00510	b8 04 00 00 00	 mov	 eax, 4
  00515	6b c8 00	 imul	 ecx, eax, 0
  00518	8b 45 fc	 mov	 eax, DWORD PTR _light_ptr$[ebp]
  0051b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0051f	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  00524	f3 0f 11 45 e0	 movss	 DWORD PTR _lz$3[ebp], xmm0

; 1578 : 				lz += ( light_ptr->ly * vp->attitude[2][1] );

  00529	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0052e	d1 e0		 shl	 eax, 1
  00530	8b 4d 08	 mov	 ecx, DWORD PTR _vp$[ebp]
  00533	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  00537	b8 04 00 00 00	 mov	 eax, 4
  0053c	c1 e0 00	 shl	 eax, 0
  0053f	8b 4d fc	 mov	 ecx, DWORD PTR _light_ptr$[ebp]
  00542	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00547	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  0054c	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _lz$3[ebp]
  00551	f3 0f 11 45 e0	 movss	 DWORD PTR _lz$3[ebp], xmm0

; 1579 : 				lz += ( light_ptr->lz * vp->attitude[2][2] );

  00556	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0055b	d1 e0		 shl	 eax, 1
  0055d	8b 4d 08	 mov	 ecx, DWORD PTR _vp$[ebp]
  00560	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  00564	b8 04 00 00 00	 mov	 eax, 4
  00569	d1 e0		 shl	 eax, 1
  0056b	8b 4d fc	 mov	 ecx, DWORD PTR _light_ptr$[ebp]
  0056e	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00573	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  00578	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _lz$3[ebp]
  0057d	f3 0f 11 45 e0	 movss	 DWORD PTR _lz$3[ebp], xmm0

; 1580 : 	
; 1581 : 				this_light->lx = lx;

  00582	8b 45 f4	 mov	 eax, DWORD PTR _this_light$[ebp]
  00585	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _lx$5[ebp]
  0058a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1582 : 				this_light->ly = ly;

  0058e	8b 45 f4	 mov	 eax, DWORD PTR _this_light$[ebp]
  00591	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _ly$4[ebp]
  00596	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1583 : 				this_light->lz = lz;

  0059b	8b 45 f4	 mov	 eax, DWORD PTR _this_light$[ebp]
  0059e	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _lz$3[ebp]
  005a3	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 1584 : 
; 1585 : 				//
; 1586 : 				// Generate a highlight vector
; 1587 : 				//
; 1588 : 
; 1589 : 				this_light->highlight_vector.x = ( lx - object_unit_pos->x );

  005a8	8b 45 0c	 mov	 eax, DWORD PTR _object_unit_pos$[ebp]
  005ab	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _lx$5[ebp]
  005b0	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  005b4	8b 4d f4	 mov	 ecx, DWORD PTR _this_light$[ebp]
  005b7	f3 0f 11 41 0c	 movss	 DWORD PTR [ecx+12], xmm0

; 1590 : 				this_light->highlight_vector.y = ( ly - object_unit_pos->y );

  005bc	8b 45 0c	 mov	 eax, DWORD PTR _object_unit_pos$[ebp]
  005bf	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _ly$4[ebp]
  005c4	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  005c9	8b 4d f4	 mov	 ecx, DWORD PTR _this_light$[ebp]
  005cc	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0

; 1591 : 				this_light->highlight_vector.z = ( lz - object_unit_pos->z );

  005d1	8b 45 0c	 mov	 eax, DWORD PTR _object_unit_pos$[ebp]
  005d4	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _lz$3[ebp]
  005d9	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  005de	8b 4d f4	 mov	 ecx, DWORD PTR _this_light$[ebp]
  005e1	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 1592 : 
; 1593 : 				normalise_any_3d_vector ( &this_light->highlight_vector );

  005e6	8b 45 f4	 mov	 eax, DWORD PTR _this_light$[ebp]
  005e9	83 c0 0c	 add	 eax, 12			; 0000000cH
  005ec	50		 push	 eax
  005ed	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  005f2	dd d8		 fstp	 ST(0)

; 1594 : 
; 1595 : 				prev_light = this_light;

  005f4	8b 45 f4	 mov	 eax, DWORD PTR _this_light$[ebp]
  005f7	89 45 f8	 mov	 DWORD PTR _prev_light$[ebp], eax
$LN6@generate_r:

; 1596 : 			}
; 1597 : 	
; 1598 : 			light_ptr = light_ptr->succ;

  005fa	8b 45 fc	 mov	 eax, DWORD PTR _light_ptr$[ebp]
  005fd	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00600	89 4d fc	 mov	 DWORD PTR _light_ptr$[ebp], ecx

; 1599 : 		}

  00603	e9 35 fa ff ff	 jmp	 $LN2@generate_r
$LN3@generate_r:

; 1600 : 	}
; 1601 : 
; 1602 : 	return ( light );

  00608	8b 45 f0	 mov	 eax, DWORD PTR _light$[ebp]

; 1603 : }

  0060b	5f		 pop	 edi
  0060c	5e		 pop	 esi
  0060d	5b		 pop	 ebx
  0060e	8b e5		 mov	 esp, ebp
  00610	5d		 pop	 ebp
  00611	c2 0c 00	 ret	 12			; 0000000cH
?generate_relative_lights@@YGPAULIGHT_3D_SOURCE@@PAUVIEWPOINT@@PAUVEC3D@@PAU1@@Z ENDP ; generate_relative_lights
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobject.c
;	COMDAT ?get_surface_face_colour@@YGXPAUREAL_COLOUR@@0@Z
_TEXT	SEGMENT
_imixed_dissolve$1 = -36				; size = 4
_ispecular$2 = -32					; size = 4
_ib$3 = -28						; size = 4
_ig$4 = -24						; size = 4
_ir$5 = -20						; size = 4
_specular$6 = -16					; size = 4
_blue$7 = -12						; size = 4
_green$8 = -8						; size = 4
_red$9 = -4						; size = 4
_colour$ = 8						; size = 4
_specular_colour$ = 12					; size = 4
?get_surface_face_colour@@YGXPAUREAL_COLOUR@@0@Z PROC	; get_surface_face_colour, COMDAT

; 1374 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1375 : 
; 1376 : 	if ( current_object_3d_surface->luminous )

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0000e	66 8b 08	 mov	 cx, WORD PTR [eax]
  00011	66 c1 e9 07	 shr	 cx, 7
  00015	66 83 e1 01	 and	 cx, 1
  00019	0f b7 d1	 movzx	 edx, cx
  0001c	85 d2		 test	 edx, edx
  0001e	74 19		 je	 SHORT $LN2@get_surfac

; 1377 : 	{
; 1378 : 
; 1379 : 		calculate_luminous_colour ( colour );

  00020	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 ?calculate_luminous_colour@@YGXPAUREAL_COLOUR@@@Z ; calculate_luminous_colour

; 1380 : 	
; 1381 : 		specular_colour->colour = d3d_fog_intensity;

  00029	8b 45 0c	 mov	 eax, DWORD PTR _specular_colour$[ebp]
  0002c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_fog_intensity@@3KA ; d3d_fog_intensity
  00032	89 08		 mov	 DWORD PTR [eax], ecx

; 1382 : 	}
; 1383 : 	else

  00034	e9 75 01 00 00	 jmp	 $LN3@get_surfac
$LN2@get_surfac:

; 1384 : 	{
; 1385 : 
; 1386 : 		float
; 1387 : 			red,
; 1388 : 			green,
; 1389 : 			blue,
; 1390 : 			specular;
; 1391 : 
; 1392 : 		int
; 1393 : 			ir,
; 1394 : 			ig,
; 1395 : 			ib,
; 1396 : 			ispecular;
; 1397 : 
; 1398 : 		//
; 1399 : 		// Look up the colour of the face normal
; 1400 : 		//
; 1401 : 	
; 1402 : 		red = current_object_3d_transformed_normals[current_object_3d_face_normal_list->point].r;

  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_face_normal_list
  0003e	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00041	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_transformed_normals@@3PAUOBJECT_3D_TRANSFORMED_POINT_NORMAL@@A ; current_object_3d_transformed_normals
  00047	0f b6 44 ca 02	 movzx	 eax, BYTE PTR [edx+ecx*8+2]
  0004c	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00050	f3 0f 11 45 fc	 movss	 DWORD PTR _red$9[ebp], xmm0

; 1403 : 		green = current_object_3d_transformed_normals[current_object_3d_face_normal_list->point].g;

  00055	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_face_normal_list
  0005a	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0005d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_transformed_normals@@3PAUOBJECT_3D_TRANSFORMED_POINT_NORMAL@@A ; current_object_3d_transformed_normals
  00063	0f b6 44 ca 01	 movzx	 eax, BYTE PTR [edx+ecx*8+1]
  00068	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0006c	f3 0f 11 45 f8	 movss	 DWORD PTR _green$8[ebp], xmm0

; 1404 : 		blue = current_object_3d_transformed_normals[current_object_3d_face_normal_list->point].b;

  00071	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_face_normal_list
  00076	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00079	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_transformed_normals@@3PAUOBJECT_3D_TRANSFORMED_POINT_NORMAL@@A ; current_object_3d_transformed_normals
  0007f	0f b6 04 ca	 movzx	 eax, BYTE PTR [edx+ecx*8]
  00083	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00087	f3 0f 11 45 f4	 movss	 DWORD PTR _blue$7[ebp], xmm0

; 1405 : 		specular = current_object_3d_transformed_normals[current_object_3d_face_normal_list->point].specular;

  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_face_normal_list
  00091	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00094	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_transformed_normals@@3PAUOBJECT_3D_TRANSFORMED_POINT_NORMAL@@A ; current_object_3d_transformed_normals
  0009a	f3 0f 10 44 ca
	04		 movss	 xmm0, DWORD PTR [edx+ecx*8+4]
  000a0	f3 0f 11 45 f0	 movss	 DWORD PTR _specular$6[ebp], xmm0

; 1406 : 	
; 1407 : 		red /= 255.0;

  000a5	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _red$9[ebp]
  000aa	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@406fe00000000000
  000b2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000b6	f3 0f 11 45 fc	 movss	 DWORD PTR _red$9[ebp], xmm0

; 1408 : 		green /= 255.0;

  000bb	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _green$8[ebp]
  000c0	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@406fe00000000000
  000c8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000cc	f3 0f 11 45 f8	 movss	 DWORD PTR _green$8[ebp], xmm0

; 1409 : 		blue /= 255.0;

  000d1	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _blue$7[ebp]
  000d6	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@406fe00000000000
  000de	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000e2	f3 0f 11 45 f4	 movss	 DWORD PTR _blue$7[ebp], xmm0

; 1410 : 	
; 1411 : 		asm_convert_float_to_int ( ( red * current_object_3d_surface->red ), &ir );

  000e7	8d 45 ec	 lea	 eax, DWORD PTR _ir$5[ebp]
  000ea	50		 push	 eax
  000eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  000f1	0f b6 51 0e	 movzx	 edx, BYTE PTR [ecx+14]
  000f5	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  000f9	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _red$9[ebp]
  000fe	51		 push	 ecx
  000ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00104	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1412 : 		asm_convert_float_to_int ( ( green * current_object_3d_surface->green ), &ig );

  00109	8d 45 e8	 lea	 eax, DWORD PTR _ig$4[ebp]
  0010c	50		 push	 eax
  0010d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00113	0f b6 51 0d	 movzx	 edx, BYTE PTR [ecx+13]
  00117	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0011b	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _green$8[ebp]
  00120	51		 push	 ecx
  00121	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00126	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1413 : 		asm_convert_float_to_int ( ( blue * current_object_3d_surface->blue ), &ib );

  0012b	8d 45 e4	 lea	 eax, DWORD PTR _ib$3[ebp]
  0012e	50		 push	 eax
  0012f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00135	0f b6 51 0c	 movzx	 edx, BYTE PTR [ecx+12]
  00139	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0013d	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _blue$7[ebp]
  00142	51		 push	 ecx
  00143	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00148	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1414 : 		asm_convert_float_to_int ( ( specular * current_object_3d_surface->specularity ), &ispecular );

  0014d	8d 45 e0	 lea	 eax, DWORD PTR _ispecular$2[ebp]
  00150	50		 push	 eax
  00151	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00157	0f b6 51 0b	 movzx	 edx, BYTE PTR [ecx+11]
  0015b	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0015f	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _specular$6[ebp]
  00164	51		 push	 ecx
  00165	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016a	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1415 : 	
; 1416 : 		colour->red = ir;

  0016f	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  00172	8a 4d ec	 mov	 cl, BYTE PTR _ir$5[ebp]
  00175	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 1417 : 		colour->green = ig;

  00178	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  0017b	8a 4d e8	 mov	 cl, BYTE PTR _ig$4[ebp]
  0017e	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 1418 : 		colour->blue = ib;

  00181	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  00184	8a 4d e4	 mov	 cl, BYTE PTR _ib$3[ebp]
  00187	88 08		 mov	 BYTE PTR [eax], cl

; 1419 : 
; 1420 : 		specular_colour->colour = d3d_fog_intensity;

  00189	8b 45 0c	 mov	 eax, DWORD PTR _specular_colour$[ebp]
  0018c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_fog_intensity@@3KA ; d3d_fog_intensity
  00192	89 08		 mov	 DWORD PTR [eax], ecx

; 1421 : 		specular_colour->red = ispecular;

  00194	8b 45 0c	 mov	 eax, DWORD PTR _specular_colour$[ebp]
  00197	8a 4d e0	 mov	 cl, BYTE PTR _ispecular$2[ebp]
  0019a	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 1422 : 		specular_colour->green = ispecular;

  0019d	8b 45 0c	 mov	 eax, DWORD PTR _specular_colour$[ebp]
  001a0	8a 4d e0	 mov	 cl, BYTE PTR _ispecular$2[ebp]
  001a3	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 1423 : 		specular_colour->blue = ispecular;

  001a6	8b 45 0c	 mov	 eax, DWORD PTR _specular_colour$[ebp]
  001a9	8a 4d e0	 mov	 cl, BYTE PTR _ispecular$2[ebp]
  001ac	88 08		 mov	 BYTE PTR [eax], cl
$LN3@get_surfac:

; 1424 : 	}
; 1425 : 
; 1426 : 	{
; 1427 : 
; 1428 : 		int
; 1429 : 			imixed_dissolve;
; 1430 : 
; 1431 : 		asm_convert_float_to_int ( ( current_object_3d_surface->alpha * current_object_3d_dissolve_factor ), &imixed_dissolve );

  001ae	8d 45 dc	 lea	 eax, DWORD PTR _imixed_dissolve$1[ebp]
  001b1	50		 push	 eax
  001b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  001b8	0f b6 51 0f	 movzx	 edx, BYTE PTR [ecx+15]
  001bc	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  001c0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?current_object_3d_dissolve_factor@@3MA
  001c8	51		 push	 ecx
  001c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ce	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1432 : 
; 1433 : 		colour->alpha = imixed_dissolve;

  001d3	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  001d6	8a 4d dc	 mov	 cl, BYTE PTR _imixed_dissolve$1[ebp]
  001d9	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 1434 : 	}
; 1435 : }

  001dc	5f		 pop	 edi
  001dd	5e		 pop	 esi
  001de	5b		 pop	 ebx
  001df	8b e5		 mov	 esp, ebp
  001e1	5d		 pop	 ebp
  001e2	c2 08 00	 ret	 8
?get_surface_face_colour@@YGXPAUREAL_COLOUR@@0@Z ENDP	; get_surface_face_colour
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobject.c
;	COMDAT ?get_textured_surface_face_colour@@YGXPAUREAL_COLOUR@@0@Z
_TEXT	SEGMENT
_specular$1 = -8					; size = 4
_ispecular$2 = -4					; size = 4
_colour$ = 8						; size = 4
_specular_colour$ = 12					; size = 4
?get_textured_surface_face_colour@@YGXPAUREAL_COLOUR@@0@Z PROC ; get_textured_surface_face_colour, COMDAT

; 1329 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1330 : 
; 1331 : 	colour->alpha = current_object_3d_dissolve_value;

  00009	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  0000c	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR ?current_object_3d_dissolve_value@@3EA ; current_object_3d_dissolve_value
  00012	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 1332 : 
; 1333 : 	specular_colour->colour = d3d_fog_intensity;

  00015	8b 45 0c	 mov	 eax, DWORD PTR _specular_colour$[ebp]
  00018	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_fog_intensity@@3KA ; d3d_fog_intensity
  0001e	89 08		 mov	 DWORD PTR [eax], ecx

; 1334 : 
; 1335 : 	if ( current_object_3d_surface->luminous )

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00025	66 8b 08	 mov	 cx, WORD PTR [eax]
  00028	66 c1 e9 07	 shr	 cx, 7
  0002c	66 83 e1 01	 and	 cx, 1
  00030	0f b7 d1	 movzx	 edx, cx
  00033	85 d2		 test	 edx, edx
  00035	74 0b		 je	 SHORT $LN2@get_textur

; 1336 : 	{
; 1337 : 
; 1338 : 		calculate_luminous_colour ( colour );

  00037	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?calculate_luminous_colour@@YGXPAUREAL_COLOUR@@@Z ; calculate_luminous_colour

; 1339 : 	}
; 1340 : 	else

  00040	eb 73		 jmp	 SHORT $LN4@get_textur
$LN2@get_textur:

; 1341 : 	{
; 1342 : 
; 1343 : 		//
; 1344 : 		// Look up the colour of the face normal
; 1345 : 		//
; 1346 : 
; 1347 : 		colour->colour = current_object_3d_transformed_normals[current_object_3d_face_normal_list->point].colour;

  00042	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_face_normal_list
  00047	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0004a	8b 55 08	 mov	 edx, DWORD PTR _colour$[ebp]
  0004d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_transformed_normals@@3PAUOBJECT_3D_TRANSFORMED_POINT_NORMAL@@A ; current_object_3d_transformed_normals
  00052	8b 0c c8	 mov	 ecx, DWORD PTR [eax+ecx*8]
  00055	89 0a		 mov	 DWORD PTR [edx], ecx

; 1348 : 
; 1349 : 		if ( current_object_3d_specular )

  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_object_3d_specular@@3HA, 0 ; current_object_3d_specular
  0005e	74 55		 je	 SHORT $LN4@get_textur

; 1350 : 		{
; 1351 : 	
; 1352 : 			int
; 1353 : 				ispecular;
; 1354 : 	
; 1355 : 			float
; 1356 : 				specular;
; 1357 : 	
; 1358 : 			specular = current_object_3d_surface->specularity * current_object_3d_transformed_normals[current_object_3d_face_normal_list->point].specular;

  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00065	0f b6 48 0b	 movzx	 ecx, BYTE PTR [eax+11]
  00069	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0006d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_face_normal_list
  00073	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00076	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_transformed_normals@@3PAUOBJECT_3D_TRANSFORMED_POINT_NORMAL@@A ; current_object_3d_transformed_normals
  0007c	f3 0f 59 44 c1
	04		 mulss	 xmm0, DWORD PTR [ecx+eax*8+4]
  00082	f3 0f 11 45 f8	 movss	 DWORD PTR _specular$1[ebp], xmm0

; 1359 : 	
; 1360 : 			asm_convert_float_to_int ( specular, &ispecular );

  00087	8d 45 fc	 lea	 eax, DWORD PTR _ispecular$2[ebp]
  0008a	50		 push	 eax
  0008b	51		 push	 ecx
  0008c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _specular$1[ebp]
  00091	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00096	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1361 : 	
; 1362 : 			specular_colour->red = ispecular;

  0009b	8b 45 0c	 mov	 eax, DWORD PTR _specular_colour$[ebp]
  0009e	8a 4d fc	 mov	 cl, BYTE PTR _ispecular$2[ebp]
  000a1	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 1363 : 			specular_colour->green = ispecular;

  000a4	8b 45 0c	 mov	 eax, DWORD PTR _specular_colour$[ebp]
  000a7	8a 4d fc	 mov	 cl, BYTE PTR _ispecular$2[ebp]
  000aa	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 1364 : 			specular_colour->blue = ispecular;

  000ad	8b 45 0c	 mov	 eax, DWORD PTR _specular_colour$[ebp]
  000b0	8a 4d fc	 mov	 cl, BYTE PTR _ispecular$2[ebp]
  000b3	88 08		 mov	 BYTE PTR [eax], cl
$LN4@get_textur:

; 1365 : 		}
; 1366 : 	}
; 1367 : }

  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 08 00	 ret	 8
?get_textured_surface_face_colour@@YGXPAUREAL_COLOUR@@0@Z ENDP ; get_textured_surface_face_colour
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobject.c
;	COMDAT ?generate_environment_coordinates@@YGXHPAUOBJECT_SHORT_3D_POINT@@PAUVEC3D@@1QAY02MPAM3@Z
_TEXT	SEGMENT
$T1 = -144						; size = 4
$T2 = -140						; size = 4
$T3 = -136						; size = 4
$T4 = -132						; size = 4
$T5 = -128						; size = 4
$T6 = -124						; size = 4
_ndotr$ = -56						; size = 4
_denominator$ = -52					; size = 4
_z$ = -48						; size = 4
_y$ = -44						; size = 4
_x$ = -40						; size = 4
_zmax$ = -36						; size = 4
_ymax$ = -32						; size = 4
_xmax$ = -28						; size = 4
_ray$ = -24						; size = 12
_reflected_ray$ = -12					; size = 12
_object_index$ = 8					; size = 4
_point$ = 12						; size = 4
_normal$ = 16						; size = 4
_camera_position$ = 20					; size = 4
_attitude$ = 24						; size = 4
_u$ = 28						; size = 4
_v$ = 32						; size = 4
?generate_environment_coordinates@@YGXHPAUOBJECT_SHORT_3D_POINT@@PAUVEC3D@@1QAY02MPAM3@Z PROC ; generate_environment_coordinates, COMDAT

; 1204 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1205 : 
; 1206 : 	vec3d
; 1207 : 		reflected_ray,
; 1208 : 		ray;
; 1209 : 
; 1210 : 	float
; 1211 : 		xmax,
; 1212 : 		ymax,
; 1213 : 		zmax,
; 1214 : 		x,
; 1215 : 		y,
; 1216 : 		z,
; 1217 : 		denominator,
; 1218 : 		ndotr;
; 1219 : 
; 1220 : 	xmax = max ( fabs ( objects_3d_data[object_index].bounding_box.xmin ), fabs ( objects_3d_data[object_index].bounding_box.xmax ) );

  0000c	6b 45 08 68	 imul	 eax, DWORD PTR _object_index$[ebp], 104
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00016	51		 push	 ecx
  00017	f3 0f 10 44 01
	14		 movss	 xmm0, DWORD PTR [ecx+eax+20]
  0001d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00022	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00027	d9 5d 84	 fstp	 DWORD PTR $T6[ebp]
  0002a	6b 55 08 68	 imul	 edx, DWORD PTR _object_index$[ebp], 104
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00033	51		 push	 ecx
  00034	f3 0f 10 44 10
	10		 movss	 xmm0, DWORD PTR [eax+edx+16]
  0003a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003f	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00044	d9 5d 80	 fstp	 DWORD PTR $T5[ebp]
  00047	8d 4d 84	 lea	 ecx, DWORD PTR $T6[ebp]
  0004a	51		 push	 ecx
  0004b	8d 55 80	 lea	 edx, DWORD PTR $T5[ebp]
  0004e	52		 push	 edx
  0004f	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00054	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00058	f3 0f 11 45 e4	 movss	 DWORD PTR _xmax$[ebp], xmm0

; 1221 : 	ymax = max ( fabs ( objects_3d_data[object_index].bounding_box.ymin ), fabs ( objects_3d_data[object_index].bounding_box.ymax ) );

  0005d	6b 45 08 68	 imul	 eax, DWORD PTR _object_index$[ebp], 104
  00061	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00067	51		 push	 ecx
  00068	f3 0f 10 44 01
	1c		 movss	 xmm0, DWORD PTR [ecx+eax+28]
  0006e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00073	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00078	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR $T4[ebp]
  0007e	6b 55 08 68	 imul	 edx, DWORD PTR _object_index$[ebp], 104
  00082	a1 00 00 00 00	 mov	 eax, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00087	51		 push	 ecx
  00088	f3 0f 10 44 10
	18		 movss	 xmm0, DWORD PTR [eax+edx+24]
  0008e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00093	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00098	d9 9d 78 ff ff
	ff		 fstp	 DWORD PTR $T3[ebp]
  0009e	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  000a4	51		 push	 ecx
  000a5	8d 95 78 ff ff
	ff		 lea	 edx, DWORD PTR $T3[ebp]
  000ab	52		 push	 edx
  000ac	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  000b1	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000b5	f3 0f 11 45 e0	 movss	 DWORD PTR _ymax$[ebp], xmm0

; 1222 : 	zmax = max ( fabs ( objects_3d_data[object_index].bounding_box.zmin ), fabs ( objects_3d_data[object_index].bounding_box.zmax ) );

  000ba	6b 45 08 68	 imul	 eax, DWORD PTR _object_index$[ebp], 104
  000be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  000c4	51		 push	 ecx
  000c5	f3 0f 10 44 01
	24		 movss	 xmm0, DWORD PTR [ecx+eax+36]
  000cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d0	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  000d5	d9 9d 74 ff ff
	ff		 fstp	 DWORD PTR $T2[ebp]
  000db	6b 55 08 68	 imul	 edx, DWORD PTR _object_index$[ebp], 104
  000df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  000e4	51		 push	 ecx
  000e5	f3 0f 10 44 10
	20		 movss	 xmm0, DWORD PTR [eax+edx+32]
  000eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f0	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  000f5	d9 9d 70 ff ff
	ff		 fstp	 DWORD PTR $T1[ebp]
  000fb	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00101	51		 push	 ecx
  00102	8d 95 70 ff ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  00108	52		 push	 edx
  00109	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0010e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00112	f3 0f 11 45 dc	 movss	 DWORD PTR _zmax$[ebp], xmm0

; 1223 : 	xmax /= 32767.0;

  00117	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _xmax$[ebp]
  0011c	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40dfffc000000000
  00124	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00128	f3 0f 11 45 e4	 movss	 DWORD PTR _xmax$[ebp], xmm0

; 1224 : 	ymax /= 32767.0;

  0012d	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _ymax$[ebp]
  00132	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40dfffc000000000
  0013a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0013e	f3 0f 11 45 e0	 movss	 DWORD PTR _ymax$[ebp], xmm0

; 1225 : 	zmax /= 32767.0;

  00143	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _zmax$[ebp]
  00148	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40dfffc000000000
  00150	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00154	f3 0f 11 45 dc	 movss	 DWORD PTR _zmax$[ebp], xmm0

; 1226 : 
; 1227 : 	x = ( float ) point->x * xmax;

  00159	8b 45 0c	 mov	 eax, DWORD PTR _point$[ebp]
  0015c	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0015f	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00163	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _xmax$[ebp]
  00168	f3 0f 11 45 d8	 movss	 DWORD PTR _x$[ebp], xmm0

; 1228 : 	y = ( float ) point->y * ymax;

  0016d	8b 45 0c	 mov	 eax, DWORD PTR _point$[ebp]
  00170	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00174	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00178	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _ymax$[ebp]
  0017d	f3 0f 11 45 d4	 movss	 DWORD PTR _y$[ebp], xmm0

; 1229 : 	z = ( float ) point->z * zmax;

  00182	8b 45 0c	 mov	 eax, DWORD PTR _point$[ebp]
  00185	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  00189	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0018d	f3 0f 59 45 dc	 mulss	 xmm0, DWORD PTR _zmax$[ebp]
  00192	f3 0f 11 45 d0	 movss	 DWORD PTR _z$[ebp], xmm0

; 1230 : 
; 1231 : 	ray.x = - camera_position->x + x;

  00197	8b 45 14	 mov	 eax, DWORD PTR _camera_position$[ebp]
  0019a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0019e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001a5	f3 0f 58 45 d8	 addss	 xmm0, DWORD PTR _x$[ebp]
  001aa	f3 0f 11 45 e8	 movss	 DWORD PTR _ray$[ebp], xmm0

; 1232 : 	ray.y = - camera_position->y + y;

  001af	8b 45 14	 mov	 eax, DWORD PTR _camera_position$[ebp]
  001b2	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  001b7	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001be	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _y$[ebp]
  001c3	f3 0f 11 45 ec	 movss	 DWORD PTR _ray$[ebp+4], xmm0

; 1233 : 	ray.z = - camera_position->z + z;

  001c8	8b 45 14	 mov	 eax, DWORD PTR _camera_position$[ebp]
  001cb	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  001d0	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001d7	f3 0f 58 45 d0	 addss	 xmm0, DWORD PTR _z$[ebp]
  001dc	f3 0f 11 45 f0	 movss	 DWORD PTR _ray$[ebp+8], xmm0

; 1234 : 
; 1235 : //	normalise_any_3d_vector ( &ray );
; 1236 : 
; 1237 : 	//
; 1238 : 	// Reflection = 2.0 * ( Normal . Ray ) * Normal - Ray
; 1239 : 	//
; 1240 : 
; 1241 : 	ndotr = ( ray.x * normal->x + ray.y * normal->y + ray.z * normal->z ) * 2.0;

  001e1	8b 45 10	 mov	 eax, DWORD PTR _normal$[ebp]
  001e4	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _ray$[ebp]
  001e9	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  001ed	8b 4d 10	 mov	 ecx, DWORD PTR _normal$[ebp]
  001f0	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _ray$[ebp+4]
  001f5	f3 0f 59 49 04	 mulss	 xmm1, DWORD PTR [ecx+4]
  001fa	f3 0f 58 c1	 addss	 xmm0, xmm1
  001fe	8b 55 10	 mov	 edx, DWORD PTR _normal$[ebp]
  00201	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _ray$[ebp+8]
  00206	f3 0f 59 4a 08	 mulss	 xmm1, DWORD PTR [edx+8]
  0020b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0020f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00213	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  0021b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0021f	f3 0f 11 45 c8	 movss	 DWORD PTR _ndotr$[ebp], xmm0

; 1242 : 	
; 1243 : 	reflected_ray.x = ndotr * normal->x - ray.x;

  00224	8b 45 10	 mov	 eax, DWORD PTR _normal$[ebp]
  00227	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _ndotr$[ebp]
  0022c	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  00230	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _ray$[ebp]
  00235	f3 0f 11 45 f4	 movss	 DWORD PTR _reflected_ray$[ebp], xmm0

; 1244 : 	reflected_ray.y = ndotr * normal->y - ray.y;

  0023a	8b 45 10	 mov	 eax, DWORD PTR _normal$[ebp]
  0023d	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _ndotr$[ebp]
  00242	f3 0f 59 40 04	 mulss	 xmm0, DWORD PTR [eax+4]
  00247	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _ray$[ebp+4]
  0024c	f3 0f 11 45 f8	 movss	 DWORD PTR _reflected_ray$[ebp+4], xmm0

; 1245 : 	reflected_ray.z = ndotr * normal->z - ray.z;

  00251	8b 45 10	 mov	 eax, DWORD PTR _normal$[ebp]
  00254	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _ndotr$[ebp]
  00259	f3 0f 59 40 08	 mulss	 xmm0, DWORD PTR [eax+8]
  0025e	f3 0f 5c 45 f0	 subss	 xmm0, DWORD PTR _ray$[ebp+8]
  00263	f3 0f 11 45 fc	 movss	 DWORD PTR _reflected_ray$[ebp+8], xmm0

; 1246 : 
; 1247 : 	//
; 1248 : 	// Rotate the reflected ray back into world coordinates
; 1249 : 	//
; 1250 : 
; 1251 : 	multiply_matrix3x3_vec3d ( &ray, attitude, &reflected_ray );

  00268	8d 45 f4	 lea	 eax, DWORD PTR _reflected_ray$[ebp]
  0026b	50		 push	 eax
  0026c	8b 4d 18	 mov	 ecx, DWORD PTR _attitude$[ebp]
  0026f	51		 push	 ecx
  00270	8d 55 e8	 lea	 edx, DWORD PTR _ray$[ebp]
  00273	52		 push	 edx
  00274	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 1252 : 	
; 1253 : 	normalise_any_3d_vector ( &ray );

  00279	8d 45 e8	 lea	 eax, DWORD PTR _ray$[ebp]
  0027c	50		 push	 eax
  0027d	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  00282	dd d8		 fstp	 ST(0)

; 1254 : 	
; 1255 : 	denominator = get_inverse_square_root ( ray.z + 1 );

  00284	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _ray$[ebp+8]
  00289	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00291	51		 push	 ecx
  00292	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00297	e8 00 00 00 00	 call	 ?get_inverse_square_root@@YGMM@Z ; get_inverse_square_root
  0029c	d9 5d cc	 fstp	 DWORD PTR _denominator$[ebp]

; 1256 : 	denominator *= ( 1 / ( 1.4142135623730904880 * 2 ) );

  0029f	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _denominator$[ebp]
  002a4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd6a09e667f3be1
  002ac	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002b0	f3 0f 11 45 cc	 movss	 DWORD PTR _denominator$[ebp], xmm0

; 1257 : 	
; 1258 : 	*u = 0.5 + ( ray.x * denominator );

  002b5	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _ray$[ebp]
  002ba	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _denominator$[ebp]
  002bf	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002c3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  002cb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002cf	8b 45 1c	 mov	 eax, DWORD PTR _u$[ebp]
  002d2	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1259 : 	*v = 0.5 + ( ray.y * denominator );

  002d6	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _ray$[ebp+4]
  002db	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _denominator$[ebp]
  002e0	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002e4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  002ec	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002f0	8b 45 20	 mov	 eax, DWORD PTR _v$[ebp]
  002f3	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1260 : 
; 1261 : //	*u = 0.5 + ( ray.x * denominator );
; 1262 : //	*v = 0.5 + ( ray.y * denominator );
; 1263 : 
; 1264 : 	//
; 1265 : 	// Test code
; 1266 : 	//
; 1267 : 
; 1268 : //	ray.x = camera_position->x - point->x;
; 1269 : //	ray.y = camera_position->y - point->y;
; 1270 : //	ray.z = camera_position->z - point->z;
; 1271 : 	
; 1272 : //	multiply_matrix3x3_vec3d ( normal, attitude, &reflected_ray );
; 1273 : 
; 1274 : //	normalise_any_3d_vector ( &reflected_ray );
; 1275 : 
; 1276 : //	*u = ( 0.5 + 0.5 * reflected_ray.x ) / point->z;
; 1277 : //	*u = ( 0.5 + 0.5 * reflected_ray.y ) / point->z;
; 1278 : }

  002f7	5f		 pop	 edi
  002f8	5e		 pop	 esi
  002f9	5b		 pop	 ebx
  002fa	8b e5		 mov	 esp, ebp
  002fc	5d		 pop	 ebp
  002fd	c2 1c 00	 ret	 28			; 0000001cH
?generate_environment_coordinates@@YGXHPAUOBJECT_SHORT_3D_POINT@@PAUVEC3D@@1QAY02MPAM3@Z ENDP ; generate_environment_coordinates
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobject.c
;	COMDAT ?calculate_line_normal@@YGXPAUOBJECT_3D_INFO@@PAUVEC3D@@@Z
_TEXT	SEGMENT
_pt2$ = -72						; size = 4
_pt1$ = -68						; size = 4
_plane_normal$ = -64					; size = 12
_line_normal$ = -52					; size = 12
_point2$ = -40						; size = 12
_point1$ = -28						; size = 12
_direction_factor$ = -16				; size = 4
_ndotcamera$ = -12					; size = 4
_ndotn$ = -8						; size = 4
_ndotp1$ = -4						; size = 4
_object_base$ = 8					; size = 4
_result_normal$ = 12					; size = 4
?calculate_line_normal@@YGXPAUOBJECT_3D_INFO@@PAUVEC3D@@@Z PROC ; calculate_line_normal, COMDAT

; 1133 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1134 : 
; 1135 : 	float
; 1136 : 		ndotp1,
; 1137 : 		ndotn,
; 1138 : 		ndotcamera,
; 1139 : 		direction_factor;
; 1140 : 
; 1141 : 	vec3d
; 1142 : 		point1,
; 1143 : 		point2,
; 1144 : 		line_normal,
; 1145 : 		plane_normal;
; 1146 : 
; 1147 : 	int
; 1148 : 		pt1,
; 1149 : 		pt2;
; 1150 : 
; 1151 : 	//
; 1152 : 	// Calculate a normal between the line & camera & light positions
; 1153 : 	//
; 1154 : 
; 1155 : 	pt1 = current_object_3d_surface_point_list[ current_object_3d_point_list[0].point ].point;

  0000c	b8 01 00 00 00	 mov	 eax, 1
  00011	6b c8 00	 imul	 ecx, eax, 0
  00014	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  0001a	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  0001e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  00024	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00028	89 55 bc	 mov	 DWORD PTR _pt1$[ebp], edx

; 1156 : 	pt2 = current_object_3d_surface_point_list[ current_object_3d_point_list[1].point ].point;

  0002b	b8 01 00 00 00	 mov	 eax, 1
  00030	c1 e0 00	 shl	 eax, 0
  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  00039	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  00042	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  00046	89 4d b8	 mov	 DWORD PTR _pt2$[ebp], ecx

; 1157 : 
; 1158 : 	point1.x = objects_3d_data[object_base->object_number].points[pt1].x;

  00049	8b 45 08	 mov	 eax, DWORD PTR _object_base$[ebp]
  0004c	6b 48 20 68	 imul	 ecx, DWORD PTR [eax+32], 104
  00050	6b 55 bc 06	 imul	 edx, DWORD PTR _pt1$[ebp], 6
  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00059	8b 4c 08 40	 mov	 ecx, DWORD PTR [eax+ecx+64]
  0005d	0f bf 14 11	 movsx	 edx, WORD PTR [ecx+edx]
  00061	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00065	f3 0f 11 45 e4	 movss	 DWORD PTR _point1$[ebp], xmm0

; 1159 : 	point1.y = objects_3d_data[object_base->object_number].points[pt1].y;

  0006a	8b 45 08	 mov	 eax, DWORD PTR _object_base$[ebp]
  0006d	6b 48 20 68	 imul	 ecx, DWORD PTR [eax+32], 104
  00071	6b 55 bc 06	 imul	 edx, DWORD PTR _pt1$[ebp], 6
  00075	a1 00 00 00 00	 mov	 eax, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0007a	8b 4c 08 40	 mov	 ecx, DWORD PTR [eax+ecx+64]
  0007e	0f bf 54 11 02	 movsx	 edx, WORD PTR [ecx+edx+2]
  00083	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00087	f3 0f 11 45 e8	 movss	 DWORD PTR _point1$[ebp+4], xmm0

; 1160 : 	point1.z = objects_3d_data[object_base->object_number].points[pt1].z;

  0008c	8b 45 08	 mov	 eax, DWORD PTR _object_base$[ebp]
  0008f	6b 48 20 68	 imul	 ecx, DWORD PTR [eax+32], 104
  00093	6b 55 bc 06	 imul	 edx, DWORD PTR _pt1$[ebp], 6
  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0009c	8b 4c 08 40	 mov	 ecx, DWORD PTR [eax+ecx+64]
  000a0	0f bf 54 11 04	 movsx	 edx, WORD PTR [ecx+edx+4]
  000a5	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  000a9	f3 0f 11 45 ec	 movss	 DWORD PTR _point1$[ebp+8], xmm0

; 1161 : 
; 1162 : 	point2.x = objects_3d_data[object_base->object_number].points[pt2].x;

  000ae	8b 45 08	 mov	 eax, DWORD PTR _object_base$[ebp]
  000b1	6b 48 20 68	 imul	 ecx, DWORD PTR [eax+32], 104
  000b5	6b 55 b8 06	 imul	 edx, DWORD PTR _pt2$[ebp], 6
  000b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  000be	8b 4c 08 40	 mov	 ecx, DWORD PTR [eax+ecx+64]
  000c2	0f bf 14 11	 movsx	 edx, WORD PTR [ecx+edx]
  000c6	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  000ca	f3 0f 11 45 d8	 movss	 DWORD PTR _point2$[ebp], xmm0

; 1163 : 	point2.y = objects_3d_data[object_base->object_number].points[pt2].y;

  000cf	8b 45 08	 mov	 eax, DWORD PTR _object_base$[ebp]
  000d2	6b 48 20 68	 imul	 ecx, DWORD PTR [eax+32], 104
  000d6	6b 55 b8 06	 imul	 edx, DWORD PTR _pt2$[ebp], 6
  000da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  000df	8b 4c 08 40	 mov	 ecx, DWORD PTR [eax+ecx+64]
  000e3	0f bf 54 11 02	 movsx	 edx, WORD PTR [ecx+edx+2]
  000e8	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  000ec	f3 0f 11 45 dc	 movss	 DWORD PTR _point2$[ebp+4], xmm0

; 1164 : 	point2.z = objects_3d_data[object_base->object_number].points[pt2].z;

  000f1	8b 45 08	 mov	 eax, DWORD PTR _object_base$[ebp]
  000f4	6b 48 20 68	 imul	 ecx, DWORD PTR [eax+32], 104
  000f8	6b 55 b8 06	 imul	 edx, DWORD PTR _pt2$[ebp], 6
  000fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00101	8b 4c 08 40	 mov	 ecx, DWORD PTR [eax+ecx+64]
  00105	0f bf 54 11 04	 movsx	 edx, WORD PTR [ecx+edx+4]
  0010a	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0010e	f3 0f 11 45 e0	 movss	 DWORD PTR _point2$[ebp+8], xmm0

; 1165 : 
; 1166 : 	point1.x = ( ( point2.x - point1.x ) / 2 ) + point1.x;

  00113	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _point2$[ebp]
  00118	f3 0f 5c 45 e4	 subss	 xmm0, DWORD PTR _point1$[ebp]
  0011d	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00125	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _point1$[ebp]
  0012a	f3 0f 11 45 e4	 movss	 DWORD PTR _point1$[ebp], xmm0

; 1167 : 	point1.y = ( ( point2.y - point1.y ) / 2 ) + point1.y;

  0012f	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _point2$[ebp+4]
  00134	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _point1$[ebp+4]
  00139	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00141	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _point1$[ebp+4]
  00146	f3 0f 11 45 e8	 movss	 DWORD PTR _point1$[ebp+4], xmm0

; 1168 : 	point1.z = ( ( point2.z - point1.z ) / 2 ) + point1.z;

  0014b	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _point2$[ebp+8]
  00150	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _point1$[ebp+8]
  00155	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0015d	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _point1$[ebp+8]
  00162	f3 0f 11 45 ec	 movss	 DWORD PTR _point1$[ebp+8], xmm0

; 1169 : 
; 1170 : 	plane_normal.x = point2.x - point1.x;

  00167	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _point2$[ebp]
  0016c	f3 0f 5c 45 e4	 subss	 xmm0, DWORD PTR _point1$[ebp]
  00171	f3 0f 11 45 c0	 movss	 DWORD PTR _plane_normal$[ebp], xmm0

; 1171 : 	plane_normal.y = point2.y - point1.y;

  00176	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _point2$[ebp+4]
  0017b	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _point1$[ebp+4]
  00180	f3 0f 11 45 c4	 movss	 DWORD PTR _plane_normal$[ebp+4], xmm0

; 1172 : 	plane_normal.z = point2.z - point1.z;

  00185	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _point2$[ebp+8]
  0018a	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _point1$[ebp+8]
  0018f	f3 0f 11 45 c8	 movss	 DWORD PTR _plane_normal$[ebp+8], xmm0

; 1173 : 
; 1174 : 	ndotn = (	( plane_normal.x * plane_normal.x ) +

  00194	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _plane_normal$[ebp]
  00199	f3 0f 59 45 c0	 mulss	 xmm0, DWORD PTR _plane_normal$[ebp]
  0019e	f3 0f 10 4d c4	 movss	 xmm1, DWORD PTR _plane_normal$[ebp+4]
  001a3	f3 0f 59 4d c4	 mulss	 xmm1, DWORD PTR _plane_normal$[ebp+4]
  001a8	f3 0f 58 c1	 addss	 xmm0, xmm1
  001ac	f3 0f 10 4d c8	 movss	 xmm1, DWORD PTR _plane_normal$[ebp+8]
  001b1	f3 0f 59 4d c8	 mulss	 xmm1, DWORD PTR _plane_normal$[ebp+8]
  001b6	f3 0f 58 c1	 addss	 xmm0, xmm1
  001ba	f3 0f 11 45 f8	 movss	 DWORD PTR _ndotn$[ebp], xmm0

; 1175 : 					( plane_normal.y * plane_normal.y ) +
; 1176 : 					( plane_normal.z * plane_normal.z ) );
; 1177 : 
; 1178 : 	ndotp1 = (	( point1.x * plane_normal.x ) +

  001bf	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _point1$[ebp]
  001c4	f3 0f 59 45 c0	 mulss	 xmm0, DWORD PTR _plane_normal$[ebp]
  001c9	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _point1$[ebp+4]
  001ce	f3 0f 59 4d c4	 mulss	 xmm1, DWORD PTR _plane_normal$[ebp+4]
  001d3	f3 0f 58 c1	 addss	 xmm0, xmm1
  001d7	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _point1$[ebp+8]
  001dc	f3 0f 59 4d c8	 mulss	 xmm1, DWORD PTR _plane_normal$[ebp+8]
  001e1	f3 0f 58 c1	 addss	 xmm0, xmm1
  001e5	f3 0f 11 45 fc	 movss	 DWORD PTR _ndotp1$[ebp], xmm0

; 1179 : 					( point1.y * plane_normal.y ) +
; 1180 : 					( point1.z * plane_normal.z ) );
; 1181 : 
; 1182 : 	ndotcamera = (	( object_base->camera_position.x * plane_normal.x ) +

  001ea	8b 45 08	 mov	 eax, DWORD PTR _object_base$[ebp]
  001ed	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  001f2	f3 0f 59 45 c0	 mulss	 xmm0, DWORD PTR _plane_normal$[ebp]
  001f7	8b 4d 08	 mov	 ecx, DWORD PTR _object_base$[ebp]
  001fa	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  001ff	f3 0f 59 4d c4	 mulss	 xmm1, DWORD PTR _plane_normal$[ebp+4]
  00204	f3 0f 58 c1	 addss	 xmm0, xmm1
  00208	8b 55 08	 mov	 edx, DWORD PTR _object_base$[ebp]
  0020b	f3 0f 10 4a 10	 movss	 xmm1, DWORD PTR [edx+16]
  00210	f3 0f 59 4d c8	 mulss	 xmm1, DWORD PTR _plane_normal$[ebp+8]
  00215	f3 0f 58 c1	 addss	 xmm0, xmm1
  00219	f3 0f 11 45 f4	 movss	 DWORD PTR _ndotcamera$[ebp], xmm0

; 1183 : 						( object_base->camera_position.y * plane_normal.y ) +
; 1184 : 						( object_base->camera_position.z * plane_normal.z ) );
; 1185 : 
; 1186 : 	direction_factor = ( ( ndotp1 - ndotcamera ) / ndotn );

  0021e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _ndotp1$[ebp]
  00223	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _ndotcamera$[ebp]
  00228	f3 0f 5e 45 f8	 divss	 xmm0, DWORD PTR _ndotn$[ebp]
  0022d	f3 0f 11 45 f0	 movss	 DWORD PTR _direction_factor$[ebp], xmm0

; 1187 : 
; 1188 : 	line_normal.x = object_base->camera_position.x + direction_factor * ( plane_normal.x );

  00232	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _direction_factor$[ebp]
  00237	f3 0f 59 45 c0	 mulss	 xmm0, DWORD PTR _plane_normal$[ebp]
  0023c	8b 45 08	 mov	 eax, DWORD PTR _object_base$[ebp]
  0023f	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  00244	f3 0f 11 45 cc	 movss	 DWORD PTR _line_normal$[ebp], xmm0

; 1189 : 	line_normal.y = object_base->camera_position.y + direction_factor * ( plane_normal.y );

  00249	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _direction_factor$[ebp]
  0024e	f3 0f 59 45 c4	 mulss	 xmm0, DWORD PTR _plane_normal$[ebp+4]
  00253	8b 45 08	 mov	 eax, DWORD PTR _object_base$[ebp]
  00256	f3 0f 58 40 0c	 addss	 xmm0, DWORD PTR [eax+12]
  0025b	f3 0f 11 45 d0	 movss	 DWORD PTR _line_normal$[ebp+4], xmm0

; 1190 : 	line_normal.z = object_base->camera_position.z + direction_factor * ( plane_normal.z );

  00260	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _direction_factor$[ebp]
  00265	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _plane_normal$[ebp+8]
  0026a	8b 45 08	 mov	 eax, DWORD PTR _object_base$[ebp]
  0026d	f3 0f 58 40 10	 addss	 xmm0, DWORD PTR [eax+16]
  00272	f3 0f 11 45 d4	 movss	 DWORD PTR _line_normal$[ebp+8], xmm0

; 1191 : 
; 1192 : 	result_normal->x = line_normal.x - point1.x;

  00277	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _line_normal$[ebp]
  0027c	f3 0f 5c 45 e4	 subss	 xmm0, DWORD PTR _point1$[ebp]
  00281	8b 45 0c	 mov	 eax, DWORD PTR _result_normal$[ebp]
  00284	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1193 : 	result_normal->y = line_normal.y - point1.y;

  00288	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _line_normal$[ebp+4]
  0028d	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _point1$[ebp+4]
  00292	8b 45 0c	 mov	 eax, DWORD PTR _result_normal$[ebp]
  00295	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1194 : 	result_normal->z = line_normal.z - point1.z;

  0029a	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _line_normal$[ebp+8]
  0029f	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _point1$[ebp+8]
  002a4	8b 45 0c	 mov	 eax, DWORD PTR _result_normal$[ebp]
  002a7	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 1195 : 
; 1196 : 	normalise_any_3d_vector ( result_normal );

  002ac	8b 45 0c	 mov	 eax, DWORD PTR _result_normal$[ebp]
  002af	50		 push	 eax
  002b0	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  002b5	dd d8		 fstp	 ST(0)

; 1197 : }

  002b7	5f		 pop	 edi
  002b8	5e		 pop	 esi
  002b9	5b		 pop	 ebx
  002ba	8b e5		 mov	 esp, ebp
  002bc	5d		 pop	 ebp
  002bd	c2 08 00	 ret	 8
?calculate_line_normal@@YGXPAUOBJECT_3D_INFO@@PAUVEC3D@@@Z ENDP ; calculate_line_normal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobject.c
;	COMDAT ?calculate_line_colour@@YG?AUREAL_COLOUR@@PAUOBJECT_3D_INFO@@@Z
_TEXT	SEGMENT
tv283 = -180						; size = 4
tv279 = -180						; size = 4
tv275 = -180						; size = 4
tv284 = -176						; size = 4
tv280 = -176						; size = 4
tv276 = -176						; size = 4
_intensity$1 = -108					; size = 4
_colour$ = -104						; size = 4
_iblue$ = -100						; size = 4
_igreen$ = -96						; size = 4
_ired$ = -92						; size = 4
_pt2$ = -88						; size = 4
_pt1$ = -84						; size = 4
_plane_normal$ = -80					; size = 12
_line_normal$ = -68					; size = 12
_point2$ = -56						; size = 12
_point1$ = -44						; size = 12
_this_light$ = -32					; size = 4
_direction_factor$ = -28				; size = 4
_ndotcamera$ = -24					; size = 4
_ndotn$ = -20						; size = 4
_ndotp1$ = -16						; size = 4
_blue$ = -12						; size = 4
_green$ = -8						; size = 4
_red$ = -4						; size = 4
_object_base$ = 8					; size = 4
?calculate_line_colour@@YG?AUREAL_COLOUR@@PAUOBJECT_3D_INFO@@@Z PROC ; calculate_line_colour, COMDAT

; 996  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 997  : 
; 998  : 	float
; 999  : 		red,
; 1000 : 		green,
; 1001 : 		blue,
; 1002 : 		ndotp1,
; 1003 : 		ndotn,
; 1004 : 		ndotcamera,
; 1005 : 		direction_factor;
; 1006 : 
; 1007 : 	light_3d_source
; 1008 : 		*this_light;
; 1009 : 
; 1010 : 	vec3d
; 1011 : 		point1,
; 1012 : 		point2,
; 1013 : 		line_normal,
; 1014 : 		plane_normal;
; 1015 : 
; 1016 : 	int
; 1017 : 		pt1,
; 1018 : 		pt2,
; 1019 : 		ired,
; 1020 : 		igreen,
; 1021 : 		iblue;
; 1022 : 
; 1023 : 	real_colour
; 1024 : 		colour;
; 1025 : 
; 1026 : 	//
; 1027 : 	// Calculate a normal between the line & camera & light positions
; 1028 : 	//
; 1029 : 
; 1030 : 	pt1 = current_object_3d_surface_point_list[ current_object_3d_point_list[0].point ].point;

  0000c	b8 01 00 00 00	 mov	 eax, 1
  00011	6b c8 00	 imul	 ecx, eax, 0
  00014	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  0001a	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  0001e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  00024	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00028	89 55 ac	 mov	 DWORD PTR _pt1$[ebp], edx

; 1031 : 	pt2 = current_object_3d_surface_point_list[ current_object_3d_point_list[1].point ].point;

  0002b	b8 01 00 00 00	 mov	 eax, 1
  00030	c1 e0 00	 shl	 eax, 0
  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  00039	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  00042	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  00046	89 4d a8	 mov	 DWORD PTR _pt2$[ebp], ecx

; 1032 : 
; 1033 : 	point1.x = objects_3d_data[object_base->object_number].points[pt1].x;

  00049	8b 45 08	 mov	 eax, DWORD PTR _object_base$[ebp]
  0004c	6b 48 20 68	 imul	 ecx, DWORD PTR [eax+32], 104
  00050	6b 55 ac 06	 imul	 edx, DWORD PTR _pt1$[ebp], 6
  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00059	8b 4c 08 40	 mov	 ecx, DWORD PTR [eax+ecx+64]
  0005d	0f bf 14 11	 movsx	 edx, WORD PTR [ecx+edx]
  00061	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00065	f3 0f 11 45 d4	 movss	 DWORD PTR _point1$[ebp], xmm0

; 1034 : 	point1.y = objects_3d_data[object_base->object_number].points[pt1].y;

  0006a	8b 45 08	 mov	 eax, DWORD PTR _object_base$[ebp]
  0006d	6b 48 20 68	 imul	 ecx, DWORD PTR [eax+32], 104
  00071	6b 55 ac 06	 imul	 edx, DWORD PTR _pt1$[ebp], 6
  00075	a1 00 00 00 00	 mov	 eax, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0007a	8b 4c 08 40	 mov	 ecx, DWORD PTR [eax+ecx+64]
  0007e	0f bf 54 11 02	 movsx	 edx, WORD PTR [ecx+edx+2]
  00083	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00087	f3 0f 11 45 d8	 movss	 DWORD PTR _point1$[ebp+4], xmm0

; 1035 : 	point1.z = objects_3d_data[object_base->object_number].points[pt1].z;

  0008c	8b 45 08	 mov	 eax, DWORD PTR _object_base$[ebp]
  0008f	6b 48 20 68	 imul	 ecx, DWORD PTR [eax+32], 104
  00093	6b 55 ac 06	 imul	 edx, DWORD PTR _pt1$[ebp], 6
  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0009c	8b 4c 08 40	 mov	 ecx, DWORD PTR [eax+ecx+64]
  000a0	0f bf 54 11 04	 movsx	 edx, WORD PTR [ecx+edx+4]
  000a5	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  000a9	f3 0f 11 45 dc	 movss	 DWORD PTR _point1$[ebp+8], xmm0

; 1036 : 
; 1037 : 	point2.x = objects_3d_data[object_base->object_number].points[pt2].x;

  000ae	8b 45 08	 mov	 eax, DWORD PTR _object_base$[ebp]
  000b1	6b 48 20 68	 imul	 ecx, DWORD PTR [eax+32], 104
  000b5	6b 55 a8 06	 imul	 edx, DWORD PTR _pt2$[ebp], 6
  000b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  000be	8b 4c 08 40	 mov	 ecx, DWORD PTR [eax+ecx+64]
  000c2	0f bf 14 11	 movsx	 edx, WORD PTR [ecx+edx]
  000c6	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  000ca	f3 0f 11 45 c8	 movss	 DWORD PTR _point2$[ebp], xmm0

; 1038 : 	point2.y = objects_3d_data[object_base->object_number].points[pt2].y;

  000cf	8b 45 08	 mov	 eax, DWORD PTR _object_base$[ebp]
  000d2	6b 48 20 68	 imul	 ecx, DWORD PTR [eax+32], 104
  000d6	6b 55 a8 06	 imul	 edx, DWORD PTR _pt2$[ebp], 6
  000da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  000df	8b 4c 08 40	 mov	 ecx, DWORD PTR [eax+ecx+64]
  000e3	0f bf 54 11 02	 movsx	 edx, WORD PTR [ecx+edx+2]
  000e8	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  000ec	f3 0f 11 45 cc	 movss	 DWORD PTR _point2$[ebp+4], xmm0

; 1039 : 	point2.z = objects_3d_data[object_base->object_number].points[pt2].z;

  000f1	8b 45 08	 mov	 eax, DWORD PTR _object_base$[ebp]
  000f4	6b 48 20 68	 imul	 ecx, DWORD PTR [eax+32], 104
  000f8	6b 55 a8 06	 imul	 edx, DWORD PTR _pt2$[ebp], 6
  000fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00101	8b 4c 08 40	 mov	 ecx, DWORD PTR [eax+ecx+64]
  00105	0f bf 54 11 04	 movsx	 edx, WORD PTR [ecx+edx+4]
  0010a	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0010e	f3 0f 11 45 d0	 movss	 DWORD PTR _point2$[ebp+8], xmm0

; 1040 : 
; 1041 : 	point1.x = ( ( point2.x - point1.x ) / 2 ) + point1.x;

  00113	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _point2$[ebp]
  00118	f3 0f 5c 45 d4	 subss	 xmm0, DWORD PTR _point1$[ebp]
  0011d	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00125	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _point1$[ebp]
  0012a	f3 0f 11 45 d4	 movss	 DWORD PTR _point1$[ebp], xmm0

; 1042 : 	point1.y = ( ( point2.y - point1.y ) / 2 ) + point1.y;

  0012f	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _point2$[ebp+4]
  00134	f3 0f 5c 45 d8	 subss	 xmm0, DWORD PTR _point1$[ebp+4]
  00139	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00141	f3 0f 58 45 d8	 addss	 xmm0, DWORD PTR _point1$[ebp+4]
  00146	f3 0f 11 45 d8	 movss	 DWORD PTR _point1$[ebp+4], xmm0

; 1043 : 	point1.z = ( ( point2.z - point1.z ) / 2 ) + point1.z;

  0014b	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _point2$[ebp+8]
  00150	f3 0f 5c 45 dc	 subss	 xmm0, DWORD PTR _point1$[ebp+8]
  00155	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0015d	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _point1$[ebp+8]
  00162	f3 0f 11 45 dc	 movss	 DWORD PTR _point1$[ebp+8], xmm0

; 1044 : 
; 1045 : 	plane_normal.x = point2.x - point1.x;

  00167	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _point2$[ebp]
  0016c	f3 0f 5c 45 d4	 subss	 xmm0, DWORD PTR _point1$[ebp]
  00171	f3 0f 11 45 b0	 movss	 DWORD PTR _plane_normal$[ebp], xmm0

; 1046 : 	plane_normal.y = point2.y - point1.y;

  00176	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _point2$[ebp+4]
  0017b	f3 0f 5c 45 d8	 subss	 xmm0, DWORD PTR _point1$[ebp+4]
  00180	f3 0f 11 45 b4	 movss	 DWORD PTR _plane_normal$[ebp+4], xmm0

; 1047 : 	plane_normal.z = point2.z - point1.z;

  00185	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _point2$[ebp+8]
  0018a	f3 0f 5c 45 dc	 subss	 xmm0, DWORD PTR _point1$[ebp+8]
  0018f	f3 0f 11 45 b8	 movss	 DWORD PTR _plane_normal$[ebp+8], xmm0

; 1048 : 
; 1049 : 	ndotn = (	( plane_normal.x * plane_normal.x ) +

  00194	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _plane_normal$[ebp]
  00199	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _plane_normal$[ebp]
  0019e	f3 0f 10 4d b4	 movss	 xmm1, DWORD PTR _plane_normal$[ebp+4]
  001a3	f3 0f 59 4d b4	 mulss	 xmm1, DWORD PTR _plane_normal$[ebp+4]
  001a8	f3 0f 58 c1	 addss	 xmm0, xmm1
  001ac	f3 0f 10 4d b8	 movss	 xmm1, DWORD PTR _plane_normal$[ebp+8]
  001b1	f3 0f 59 4d b8	 mulss	 xmm1, DWORD PTR _plane_normal$[ebp+8]
  001b6	f3 0f 58 c1	 addss	 xmm0, xmm1
  001ba	f3 0f 11 45 ec	 movss	 DWORD PTR _ndotn$[ebp], xmm0

; 1050 : 					( plane_normal.y * plane_normal.y ) +
; 1051 : 					( plane_normal.z * plane_normal.z ) );
; 1052 : 
; 1053 : 	ndotp1 = (	( point1.x * plane_normal.x ) +

  001bf	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _point1$[ebp]
  001c4	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _plane_normal$[ebp]
  001c9	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _point1$[ebp+4]
  001ce	f3 0f 59 4d b4	 mulss	 xmm1, DWORD PTR _plane_normal$[ebp+4]
  001d3	f3 0f 58 c1	 addss	 xmm0, xmm1
  001d7	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _point1$[ebp+8]
  001dc	f3 0f 59 4d b8	 mulss	 xmm1, DWORD PTR _plane_normal$[ebp+8]
  001e1	f3 0f 58 c1	 addss	 xmm0, xmm1
  001e5	f3 0f 11 45 f0	 movss	 DWORD PTR _ndotp1$[ebp], xmm0

; 1054 : 					( point1.y * plane_normal.y ) +
; 1055 : 					( point1.z * plane_normal.z ) );
; 1056 : 
; 1057 : 	ndotcamera = (	( object_base->camera_position.x * plane_normal.x ) +

  001ea	8b 45 08	 mov	 eax, DWORD PTR _object_base$[ebp]
  001ed	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  001f2	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _plane_normal$[ebp]
  001f7	8b 4d 08	 mov	 ecx, DWORD PTR _object_base$[ebp]
  001fa	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  001ff	f3 0f 59 4d b4	 mulss	 xmm1, DWORD PTR _plane_normal$[ebp+4]
  00204	f3 0f 58 c1	 addss	 xmm0, xmm1
  00208	8b 55 08	 mov	 edx, DWORD PTR _object_base$[ebp]
  0020b	f3 0f 10 4a 10	 movss	 xmm1, DWORD PTR [edx+16]
  00210	f3 0f 59 4d b8	 mulss	 xmm1, DWORD PTR _plane_normal$[ebp+8]
  00215	f3 0f 58 c1	 addss	 xmm0, xmm1
  00219	f3 0f 11 45 e8	 movss	 DWORD PTR _ndotcamera$[ebp], xmm0

; 1058 : 						( object_base->camera_position.y * plane_normal.y ) +
; 1059 : 						( object_base->camera_position.z * plane_normal.z ) );
; 1060 : 
; 1061 : 	direction_factor = ( ( ndotp1 - ndotcamera ) / ndotn );

  0021e	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _ndotp1$[ebp]
  00223	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _ndotcamera$[ebp]
  00228	f3 0f 5e 45 ec	 divss	 xmm0, DWORD PTR _ndotn$[ebp]
  0022d	f3 0f 11 45 e4	 movss	 DWORD PTR _direction_factor$[ebp], xmm0

; 1062 : 
; 1063 : 	line_normal.x = object_base->camera_position.x + direction_factor * ( plane_normal.x );

  00232	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _direction_factor$[ebp]
  00237	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _plane_normal$[ebp]
  0023c	8b 45 08	 mov	 eax, DWORD PTR _object_base$[ebp]
  0023f	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  00244	f3 0f 11 45 bc	 movss	 DWORD PTR _line_normal$[ebp], xmm0

; 1064 : 	line_normal.y = object_base->camera_position.y + direction_factor * ( plane_normal.y );

  00249	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _direction_factor$[ebp]
  0024e	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _plane_normal$[ebp+4]
  00253	8b 45 08	 mov	 eax, DWORD PTR _object_base$[ebp]
  00256	f3 0f 58 40 0c	 addss	 xmm0, DWORD PTR [eax+12]
  0025b	f3 0f 11 45 c0	 movss	 DWORD PTR _line_normal$[ebp+4], xmm0

; 1065 : 	line_normal.z = object_base->camera_position.z + direction_factor * ( plane_normal.z );

  00260	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _direction_factor$[ebp]
  00265	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _plane_normal$[ebp+8]
  0026a	8b 45 08	 mov	 eax, DWORD PTR _object_base$[ebp]
  0026d	f3 0f 58 40 10	 addss	 xmm0, DWORD PTR [eax+16]
  00272	f3 0f 11 45 c4	 movss	 DWORD PTR _line_normal$[ebp+8], xmm0

; 1066 : 
; 1067 : 	line_normal.x = line_normal.x - point1.x;

  00277	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _line_normal$[ebp]
  0027c	f3 0f 5c 45 d4	 subss	 xmm0, DWORD PTR _point1$[ebp]
  00281	f3 0f 11 45 bc	 movss	 DWORD PTR _line_normal$[ebp], xmm0

; 1068 : 	line_normal.y = line_normal.y - point1.y;

  00286	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _line_normal$[ebp+4]
  0028b	f3 0f 5c 45 d8	 subss	 xmm0, DWORD PTR _point1$[ebp+4]
  00290	f3 0f 11 45 c0	 movss	 DWORD PTR _line_normal$[ebp+4], xmm0

; 1069 : 	line_normal.z = line_normal.z - point1.z;

  00295	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _line_normal$[ebp+8]
  0029a	f3 0f 5c 45 dc	 subss	 xmm0, DWORD PTR _point1$[ebp+8]
  0029f	f3 0f 11 45 c4	 movss	 DWORD PTR _line_normal$[ebp+8], xmm0

; 1070 : 
; 1071 : 	normalise_any_3d_vector ( &line_normal );

  002a4	8d 45 bc	 lea	 eax, DWORD PTR _line_normal$[ebp]
  002a7	50		 push	 eax
  002a8	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  002ad	dd d8		 fstp	 ST(0)

; 1072 : 
; 1073 : 	//
; 1074 : 	// Illuminate the normal
; 1075 : 	//
; 1076 : 
; 1077 : 	this_light = object_base->lights;

  002af	8b 45 08	 mov	 eax, DWORD PTR _object_base$[ebp]
  002b2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002b5	89 4d e0	 mov	 DWORD PTR _this_light$[ebp], ecx

; 1078 : 
; 1079 : 	red = ambient_3d_light.colour.red;

  002b8	f3 0f 10 05 18
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+24
  002c0	f3 0f 11 45 fc	 movss	 DWORD PTR _red$[ebp], xmm0

; 1080 : 	green = ambient_3d_light.colour.green;

  002c5	f3 0f 10 05 1c
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+28
  002cd	f3 0f 11 45 f8	 movss	 DWORD PTR _green$[ebp], xmm0

; 1081 : 	blue = ambient_3d_light.colour.blue;

  002d2	f3 0f 10 05 20
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+32
  002da	f3 0f 11 45 f4	 movss	 DWORD PTR _blue$[ebp], xmm0
$LN2@calculate_:

; 1082 : 
; 1083 : 	while ( this_light )

  002df	83 7d e0 00	 cmp	 DWORD PTR _this_light$[ebp], 0
  002e3	0f 84 91 00 00
	00		 je	 $LN3@calculate_

; 1084 : 	{
; 1085 : 
; 1086 : 		float
; 1087 : 			intensity;
; 1088 : 
; 1089 : 		intensity = ( ( line_normal.x * this_light->lx ) +

  002e9	8b 45 e0	 mov	 eax, DWORD PTR _this_light$[ebp]
  002ec	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _line_normal$[ebp]
  002f1	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  002f5	8b 4d e0	 mov	 ecx, DWORD PTR _this_light$[ebp]
  002f8	f3 0f 10 4d c0	 movss	 xmm1, DWORD PTR _line_normal$[ebp+4]
  002fd	f3 0f 59 49 04	 mulss	 xmm1, DWORD PTR [ecx+4]
  00302	f3 0f 58 c1	 addss	 xmm0, xmm1
  00306	8b 55 e0	 mov	 edx, DWORD PTR _this_light$[ebp]
  00309	f3 0f 10 4d c4	 movss	 xmm1, DWORD PTR _line_normal$[ebp+8]
  0030e	f3 0f 59 4a 08	 mulss	 xmm1, DWORD PTR [edx+8]
  00313	f3 0f 58 c1	 addss	 xmm0, xmm1
  00317	f3 0f 11 45 94	 movss	 DWORD PTR _intensity$1[ebp], xmm0

; 1090 : 						  ( line_normal.y * this_light->ly ) +
; 1091 : 						  ( line_normal.z * this_light->lz ) );
; 1092 : 
; 1093 : 		if ( ( *( int * ) &intensity ) > ( *( int * ) &float_value_zero ) )

  0031c	8b 45 94	 mov	 eax, DWORD PTR _intensity$1[ebp]
  0031f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?float_value_zero@@3MB
  00325	7e 45		 jle	 SHORT $LN4@calculate_

; 1094 : 		{
; 1095 : 
; 1096 : 			red += intensity * this_light->colour.red;

  00327	8b 45 e0	 mov	 eax, DWORD PTR _this_light$[ebp]
  0032a	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _intensity$1[ebp]
  0032f	f3 0f 59 40 18	 mulss	 xmm0, DWORD PTR [eax+24]
  00334	f3 0f 58 45 fc	 addss	 xmm0, DWORD PTR _red$[ebp]
  00339	f3 0f 11 45 fc	 movss	 DWORD PTR _red$[ebp], xmm0

; 1097 : 			green += intensity * this_light->colour.green;

  0033e	8b 45 e0	 mov	 eax, DWORD PTR _this_light$[ebp]
  00341	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _intensity$1[ebp]
  00346	f3 0f 59 40 1c	 mulss	 xmm0, DWORD PTR [eax+28]
  0034b	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _green$[ebp]
  00350	f3 0f 11 45 f8	 movss	 DWORD PTR _green$[ebp], xmm0

; 1098 : 			blue += intensity * this_light->colour.blue;

  00355	8b 45 e0	 mov	 eax, DWORD PTR _this_light$[ebp]
  00358	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _intensity$1[ebp]
  0035d	f3 0f 59 40 20	 mulss	 xmm0, DWORD PTR [eax+32]
  00362	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _blue$[ebp]
  00367	f3 0f 11 45 f4	 movss	 DWORD PTR _blue$[ebp], xmm0
$LN4@calculate_:

; 1099 : 		}
; 1100 : 
; 1101 : 		this_light = this_light->succ;

  0036c	8b 45 e0	 mov	 eax, DWORD PTR _this_light$[ebp]
  0036f	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00372	89 4d e0	 mov	 DWORD PTR _this_light$[ebp], ecx

; 1102 : 	}

  00375	e9 65 ff ff ff	 jmp	 $LN2@calculate_
$LN3@calculate_:

; 1103 : 
; 1104 : 	red = bound ( red, 0, 1 );

  0037a	0f 57 c0	 xorps	 xmm0, xmm0
  0037d	0f 2f 45 fc	 comiss	 xmm0, DWORD PTR _red$[ebp]
  00381	76 0d		 jbe	 SHORT $LN8@calculate_
  00383	0f 57 c0	 xorps	 xmm0, xmm0
  00386	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR tv276[ebp], xmm0
  0038e	eb 3d		 jmp	 SHORT $LN9@calculate_
$LN8@calculate_:
  00390	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _red$[ebp]
  00395	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0039c	76 12		 jbe	 SHORT $LN6@calculate_
  0039e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003a6	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR tv275[ebp], xmm0
  003ae	eb 0d		 jmp	 SHORT $LN7@calculate_
$LN6@calculate_:
  003b0	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _red$[ebp]
  003b5	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR tv275[ebp], xmm0
$LN7@calculate_:
  003bd	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR tv275[ebp]
  003c5	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR tv276[ebp], xmm0
$LN9@calculate_:
  003cd	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR tv276[ebp]
  003d5	f3 0f 11 45 fc	 movss	 DWORD PTR _red$[ebp], xmm0

; 1105 : 	green = bound ( green, 0, 1 );

  003da	0f 57 c0	 xorps	 xmm0, xmm0
  003dd	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _green$[ebp]
  003e1	76 0d		 jbe	 SHORT $LN12@calculate_
  003e3	0f 57 c0	 xorps	 xmm0, xmm0
  003e6	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR tv280[ebp], xmm0
  003ee	eb 3d		 jmp	 SHORT $LN13@calculate_
$LN12@calculate_:
  003f0	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _green$[ebp]
  003f5	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  003fc	76 12		 jbe	 SHORT $LN10@calculate_
  003fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00406	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR tv279[ebp], xmm0
  0040e	eb 0d		 jmp	 SHORT $LN11@calculate_
$LN10@calculate_:
  00410	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _green$[ebp]
  00415	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR tv279[ebp], xmm0
$LN11@calculate_:
  0041d	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR tv279[ebp]
  00425	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR tv280[ebp], xmm0
$LN13@calculate_:
  0042d	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR tv280[ebp]
  00435	f3 0f 11 45 f8	 movss	 DWORD PTR _green$[ebp], xmm0

; 1106 : 	blue = bound ( blue, 0, 1 );

  0043a	0f 57 c0	 xorps	 xmm0, xmm0
  0043d	0f 2f 45 f4	 comiss	 xmm0, DWORD PTR _blue$[ebp]
  00441	76 0d		 jbe	 SHORT $LN16@calculate_
  00443	0f 57 c0	 xorps	 xmm0, xmm0
  00446	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR tv284[ebp], xmm0
  0044e	eb 3d		 jmp	 SHORT $LN17@calculate_
$LN16@calculate_:
  00450	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _blue$[ebp]
  00455	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0045c	76 12		 jbe	 SHORT $LN14@calculate_
  0045e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00466	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR tv283[ebp], xmm0
  0046e	eb 0d		 jmp	 SHORT $LN15@calculate_
$LN14@calculate_:
  00470	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _blue$[ebp]
  00475	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR tv283[ebp], xmm0
$LN15@calculate_:
  0047d	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR tv283[ebp]
  00485	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR tv284[ebp], xmm0
$LN17@calculate_:
  0048d	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR tv284[ebp]
  00495	f3 0f 11 45 f4	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1107 : 
; 1108 : 	red *= current_object_3d_surface->red;

  0049a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0049f	0f b6 48 0e	 movzx	 ecx, BYTE PTR [eax+14]
  004a3	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  004a7	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _red$[ebp]
  004ac	f3 0f 11 45 fc	 movss	 DWORD PTR _red$[ebp], xmm0

; 1109 : 	green *= current_object_3d_surface->green;

  004b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  004b6	0f b6 48 0d	 movzx	 ecx, BYTE PTR [eax+13]
  004ba	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  004be	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _green$[ebp]
  004c3	f3 0f 11 45 f8	 movss	 DWORD PTR _green$[ebp], xmm0

; 1110 : 	blue *= current_object_3d_surface->blue;

  004c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  004cd	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  004d1	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  004d5	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _blue$[ebp]
  004da	f3 0f 11 45 f4	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1111 : 
; 1112 : 	red += FLOAT_FLOAT_FACTOR;

  004df	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _red$[ebp]
  004e4	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  004ec	f3 0f 11 45 fc	 movss	 DWORD PTR _red$[ebp], xmm0

; 1113 : 	green += FLOAT_FLOAT_FACTOR;

  004f1	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _green$[ebp]
  004f6	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  004fe	f3 0f 11 45 f8	 movss	 DWORD PTR _green$[ebp], xmm0

; 1114 : 	blue += FLOAT_FLOAT_FACTOR;

  00503	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _blue$[ebp]
  00508	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00510	f3 0f 11 45 f4	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1115 : 
; 1116 : 	ired = ( *( int * ) &red ) - INTEGER_FLOAT_FACTOR;

  00515	8b 45 fc	 mov	 eax, DWORD PTR _red$[ebp]
  00518	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0051d	89 45 a4	 mov	 DWORD PTR _ired$[ebp], eax

; 1117 : 	igreen = ( *( int * ) &green ) - INTEGER_FLOAT_FACTOR;

  00520	8b 45 f8	 mov	 eax, DWORD PTR _green$[ebp]
  00523	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00528	89 45 a0	 mov	 DWORD PTR _igreen$[ebp], eax

; 1118 : 	iblue = ( *( int * ) &blue ) - INTEGER_FLOAT_FACTOR;

  0052b	8b 45 f4	 mov	 eax, DWORD PTR _blue$[ebp]
  0052e	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00533	89 45 9c	 mov	 DWORD PTR _iblue$[ebp], eax

; 1119 : 
; 1120 : 	colour.red = ired;

  00536	8a 45 a4	 mov	 al, BYTE PTR _ired$[ebp]
  00539	88 45 9a	 mov	 BYTE PTR _colour$[ebp+2], al

; 1121 : 	colour.green = igreen;

  0053c	8a 45 a0	 mov	 al, BYTE PTR _igreen$[ebp]
  0053f	88 45 99	 mov	 BYTE PTR _colour$[ebp+1], al

; 1122 : 	colour.blue = iblue;

  00542	8a 45 9c	 mov	 al, BYTE PTR _iblue$[ebp]
  00545	88 45 98	 mov	 BYTE PTR _colour$[ebp], al

; 1123 : 	colour.alpha = 0;

  00548	c6 45 9b 00	 mov	 BYTE PTR _colour$[ebp+3], 0

; 1124 : 
; 1125 : 	return ( colour );

  0054c	8b 45 98	 mov	 eax, DWORD PTR _colour$[ebp]

; 1126 : }

  0054f	5f		 pop	 edi
  00550	5e		 pop	 esi
  00551	5b		 pop	 ebx
  00552	8b e5		 mov	 esp, ebp
  00554	5d		 pop	 ebp
  00555	c2 04 00	 ret	 4
?calculate_line_colour@@YG?AUREAL_COLOUR@@PAUOBJECT_3D_INFO@@@Z ENDP ; calculate_line_colour
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobject.c
;	COMDAT ?calculate_lightmap_luminous_colour@@YGXPAUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_grey$1 = -28						; size = 4
_iblue$ = -24						; size = 4
_igreen$ = -20						; size = 4
_ired$ = -16						; size = 4
_blue$ = -12						; size = 4
_green$ = -8						; size = 4
_red$ = -4						; size = 4
_colour$ = 8						; size = 4
?calculate_lightmap_luminous_colour@@YGXPAUREAL_COLOUR@@@Z PROC ; calculate_lightmap_luminous_colour, COMDAT

; 941  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 942  : 
; 943  : 	float
; 944  : 		red,
; 945  : 		green,
; 946  : 		blue;
; 947  : 
; 948  : 	int
; 949  : 		ired,
; 950  : 		igreen,
; 951  : 		iblue;
; 952  : 
; 953  : 	if (active_3d_environment->render_filter != RENDER_CLEAR )

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0000e	83 b8 d0 02 00
	00 01		 cmp	 DWORD PTR [eax+720], 1
  00015	0f 84 f3 00 00
	00		 je	 $LN2@calculate_

; 954  : 	{
; 955  : 	
; 956  : 		float
; 957  : 			grey;
; 958  : 	
; 959  : 		red = current_object_3d_surface->red;

  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00020	0f b6 48 0e	 movzx	 ecx, BYTE PTR [eax+14]
  00024	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00028	f3 0f 11 45 fc	 movss	 DWORD PTR _red$[ebp], xmm0

; 960  : 		green = current_object_3d_surface->green;

  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00032	0f b6 48 0d	 movzx	 ecx, BYTE PTR [eax+13]
  00036	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0003a	f3 0f 11 45 f8	 movss	 DWORD PTR _green$[ebp], xmm0

; 961  : 		blue = current_object_3d_surface->blue;

  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00044	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00048	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0004c	f3 0f 11 45 f4	 movss	 DWORD PTR _blue$[ebp], xmm0

; 962  : 
; 963  : 		grey = red * 0.3 + green * 0.59 + blue * 0.11;

  00051	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _red$[ebp]
  00056	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd3333333333333
  0005e	f3 0f 5a 4d f8	 cvtss2sd xmm1, DWORD PTR _green$[ebp]
  00063	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe2e147ae147ae1
  0006b	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0006f	f3 0f 5a 4d f4	 cvtss2sd xmm1, DWORD PTR _blue$[ebp]
  00074	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fbc28f5c28f5c29
  0007c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00080	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00084	f3 0f 11 45 e4	 movss	 DWORD PTR _grey$1[ebp], xmm0

; 964  : 		grey *= current_object_3d_dissolve_factor;

  00089	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _grey$1[ebp]
  0008e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?current_object_3d_dissolve_factor@@3MA
  00096	f3 0f 11 45 e4	 movss	 DWORD PTR _grey$1[ebp], xmm0

; 965  : 
; 966  : 		asm_convert_float_to_int ( ( grey * ambient_3d_light.colour.red ), &ired );

  0009b	8d 45 f0	 lea	 eax, DWORD PTR _ired$[ebp]
  0009e	50		 push	 eax
  0009f	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _grey$1[ebp]
  000a4	f3 0f 59 05 18
	00 00 00	 mulss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+24
  000ac	51		 push	 ecx
  000ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b2	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 967  : 		asm_convert_float_to_int ( ( grey * ambient_3d_light.colour.green ), &igreen );

  000b7	8d 45 ec	 lea	 eax, DWORD PTR _igreen$[ebp]
  000ba	50		 push	 eax
  000bb	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _grey$1[ebp]
  000c0	f3 0f 59 05 1c
	00 00 00	 mulss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+28
  000c8	51		 push	 ecx
  000c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ce	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 968  : 		asm_convert_float_to_int ( ( grey * ambient_3d_light.colour.blue ), &iblue );

  000d3	8d 45 e8	 lea	 eax, DWORD PTR _iblue$[ebp]
  000d6	50		 push	 eax
  000d7	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _grey$1[ebp]
  000dc	f3 0f 59 05 20
	00 00 00	 mulss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+32
  000e4	51		 push	 ecx
  000e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ea	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 969  : 
; 970  : 		colour->red = ired;

  000ef	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  000f2	8a 4d f0	 mov	 cl, BYTE PTR _ired$[ebp]
  000f5	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 971  : 		colour->green = igreen;

  000f8	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  000fb	8a 4d ec	 mov	 cl, BYTE PTR _igreen$[ebp]
  000fe	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 972  : 		colour->blue = iblue;

  00101	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  00104	8a 4d e8	 mov	 cl, BYTE PTR _iblue$[ebp]
  00107	88 08		 mov	 BYTE PTR [eax], cl

; 973  : 	}
; 974  : 	else

  00109	e9 a4 00 00 00	 jmp	 $LN3@calculate_
$LN2@calculate_:

; 975  : 	{
; 976  : 	
; 977  : 		red = current_object_3d_surface->red;

  0010e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00113	0f b6 48 0e	 movzx	 ecx, BYTE PTR [eax+14]
  00117	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0011b	f3 0f 11 45 fc	 movss	 DWORD PTR _red$[ebp], xmm0

; 978  : 		green = current_object_3d_surface->green;

  00120	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00125	0f b6 48 0d	 movzx	 ecx, BYTE PTR [eax+13]
  00129	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0012d	f3 0f 11 45 f8	 movss	 DWORD PTR _green$[ebp], xmm0

; 979  : 		blue = current_object_3d_surface->blue;

  00132	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00137	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  0013b	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0013f	f3 0f 11 45 f4	 movss	 DWORD PTR _blue$[ebp], xmm0

; 980  : 
; 981  : 		asm_convert_float_to_int ( ( red * current_object_3d_dissolve_factor ), &ired );

  00144	8d 45 f0	 lea	 eax, DWORD PTR _ired$[ebp]
  00147	50		 push	 eax
  00148	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _red$[ebp]
  0014d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?current_object_3d_dissolve_factor@@3MA
  00155	51		 push	 ecx
  00156	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015b	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 982  : 		asm_convert_float_to_int ( ( green * current_object_3d_dissolve_factor ), &igreen );

  00160	8d 45 ec	 lea	 eax, DWORD PTR _igreen$[ebp]
  00163	50		 push	 eax
  00164	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _green$[ebp]
  00169	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?current_object_3d_dissolve_factor@@3MA
  00171	51		 push	 ecx
  00172	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00177	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 983  : 		asm_convert_float_to_int ( ( blue * current_object_3d_dissolve_factor ), &iblue );

  0017c	8d 45 e8	 lea	 eax, DWORD PTR _iblue$[ebp]
  0017f	50		 push	 eax
  00180	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _blue$[ebp]
  00185	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?current_object_3d_dissolve_factor@@3MA
  0018d	51		 push	 ecx
  0018e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00193	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 984  : 
; 985  : 		colour->red = ired;

  00198	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  0019b	8a 4d f0	 mov	 cl, BYTE PTR _ired$[ebp]
  0019e	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 986  : 		colour->green = igreen;

  001a1	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  001a4	8a 4d ec	 mov	 cl, BYTE PTR _igreen$[ebp]
  001a7	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 987  : 		colour->blue = iblue;

  001aa	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  001ad	8a 4d e8	 mov	 cl, BYTE PTR _iblue$[ebp]
  001b0	88 08		 mov	 BYTE PTR [eax], cl
$LN3@calculate_:

; 988  : 	}
; 989  : }

  001b2	5f		 pop	 edi
  001b3	5e		 pop	 esi
  001b4	5b		 pop	 ebx
  001b5	8b e5		 mov	 esp, ebp
  001b7	5d		 pop	 ebp
  001b8	c2 04 00	 ret	 4
?calculate_lightmap_luminous_colour@@YGXPAUREAL_COLOUR@@@Z ENDP ; calculate_lightmap_luminous_colour
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobject.c
;	COMDAT ?calculate_luminous_colour@@YGXPAUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_ialpha$1 = -68						; size = 4
_alpha$2 = -64						; size = 4
_iblue$3 = -60						; size = 4
_igreen$4 = -56						; size = 4
_ired$5 = -52						; size = 4
_blue$6 = -48						; size = 4
_green$7 = -44						; size = 4
_red$8 = -40						; size = 4
_grey$9 = -36						; size = 4
_ialpha$10 = -32					; size = 4
_iblue$11 = -28						; size = 4
_igreen$12 = -24					; size = 4
_ired$13 = -20						; size = 4
_alpha$14 = -16						; size = 4
_blue$15 = -12						; size = 4
_green$16 = -8						; size = 4
_red$17 = -4						; size = 4
_colour$ = 8						; size = 4
?calculate_luminous_colour@@YGXPAUREAL_COLOUR@@@Z PROC	; calculate_luminous_colour, COMDAT

; 807  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 808  : 
; 809  : 	if (active_3d_environment->render_filter == RENDER_INFRARED )

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00011	83 b8 d0 02 00
	00 02		 cmp	 DWORD PTR [eax+720], 2
  00018	0f 85 13 02 00
	00		 jne	 $LN2@calculate_

; 810  : 	{
; 811  : 	
; 812  : 
; 813  : 		float
; 814  : 			red,
; 815  : 			green,
; 816  : 			blue,
; 817  : 			alpha;
; 818  : 	
; 819  : 		int
; 820  : 			ired,
; 821  : 			igreen,
; 822  : 			iblue,
; 823  : 			ialpha;
; 824  : 
; 825  : 		if ( current_object_3d_surface->additive )

  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00023	66 8b 08	 mov	 cx, WORD PTR [eax]
  00026	66 c1 e9 05	 shr	 cx, 5
  0002a	66 83 e1 01	 and	 cx, 1
  0002e	0f b7 d1	 movzx	 edx, cx
  00031	85 d2		 test	 edx, edx
  00033	0f 84 f3 00 00
	00		 je	 $LN4@calculate_

; 826  : 		{
; 827  : 
; 828  : 			float
; 829  : 				grey;
; 830  : 	
; 831  : 			red = current_object_3d_surface->red;

  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0003e	0f b6 48 0e	 movzx	 ecx, BYTE PTR [eax+14]
  00042	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00046	f3 0f 11 45 fc	 movss	 DWORD PTR _red$17[ebp], xmm0

; 832  : 			green = current_object_3d_surface->green;

  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00050	0f b6 48 0d	 movzx	 ecx, BYTE PTR [eax+13]
  00054	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00058	f3 0f 11 45 f8	 movss	 DWORD PTR _green$16[ebp], xmm0

; 833  : 			blue = current_object_3d_surface->blue;

  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00062	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00066	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0006a	f3 0f 11 45 f4	 movss	 DWORD PTR _blue$15[ebp], xmm0

; 834  : 
; 835  : 			grey = red * 0.3 + green * 0.59 + blue * 0.11;

  0006f	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _red$17[ebp]
  00074	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd3333333333333
  0007c	f3 0f 5a 4d f8	 cvtss2sd xmm1, DWORD PTR _green$16[ebp]
  00081	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe2e147ae147ae1
  00089	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0008d	f3 0f 5a 4d f4	 cvtss2sd xmm1, DWORD PTR _blue$15[ebp]
  00092	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fbc28f5c28f5c29
  0009a	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0009e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000a2	f3 0f 11 45 dc	 movss	 DWORD PTR _grey$9[ebp], xmm0

; 836  : 			grey *= current_object_3d_dissolve_factor;

  000a7	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _grey$9[ebp]
  000ac	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?current_object_3d_dissolve_factor@@3MA
  000b4	f3 0f 11 45 dc	 movss	 DWORD PTR _grey$9[ebp], xmm0

; 837  : 	
; 838  : 			asm_convert_float_to_int ( ( grey * ambient_3d_light.colour.red ), &ired );

  000b9	8d 45 ec	 lea	 eax, DWORD PTR _ired$13[ebp]
  000bc	50		 push	 eax
  000bd	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _grey$9[ebp]
  000c2	f3 0f 59 05 18
	00 00 00	 mulss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+24
  000ca	51		 push	 ecx
  000cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d0	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 839  : 			asm_convert_float_to_int ( ( grey * ambient_3d_light.colour.green ), &igreen );

  000d5	8d 45 e8	 lea	 eax, DWORD PTR _igreen$12[ebp]
  000d8	50		 push	 eax
  000d9	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _grey$9[ebp]
  000de	f3 0f 59 05 1c
	00 00 00	 mulss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+28
  000e6	51		 push	 ecx
  000e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ec	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 840  : 			asm_convert_float_to_int ( ( grey * ambient_3d_light.colour.blue ), &iblue );

  000f1	8d 45 e4	 lea	 eax, DWORD PTR _iblue$11[ebp]
  000f4	50		 push	 eax
  000f5	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _grey$9[ebp]
  000fa	f3 0f 59 05 20
	00 00 00	 mulss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+32
  00102	51		 push	 ecx
  00103	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00108	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 841  : 	
; 842  : 			colour->red = ired;

  0010d	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  00110	8a 4d ec	 mov	 cl, BYTE PTR _ired$13[ebp]
  00113	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 843  : 			colour->green = igreen;

  00116	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  00119	8a 4d e8	 mov	 cl, BYTE PTR _igreen$12[ebp]
  0011c	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 844  : 			colour->blue = iblue;

  0011f	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  00122	8a 4d e4	 mov	 cl, BYTE PTR _iblue$11[ebp]
  00125	88 08		 mov	 BYTE PTR [eax], cl

; 845  : 		}
; 846  : 		else

  00127	e9 00 01 00 00	 jmp	 $LN7@calculate_
$LN4@calculate_:

; 847  : 		{
; 848  : 	
; 849  : 			red = current_object_3d_surface->red;

  0012c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00131	0f b6 48 0e	 movzx	 ecx, BYTE PTR [eax+14]
  00135	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00139	f3 0f 11 45 fc	 movss	 DWORD PTR _red$17[ebp], xmm0

; 850  : 			green = current_object_3d_surface->green;

  0013e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00143	0f b6 48 0d	 movzx	 ecx, BYTE PTR [eax+13]
  00147	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0014b	f3 0f 11 45 f8	 movss	 DWORD PTR _green$16[ebp], xmm0

; 851  : 			blue = current_object_3d_surface->blue;

  00150	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00155	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00159	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0015d	f3 0f 11 45 f4	 movss	 DWORD PTR _blue$15[ebp], xmm0

; 852  : 	
; 853  : 			asm_convert_float_to_int ( ( red * ambient_3d_light.colour.red ), &ired );

  00162	8d 45 ec	 lea	 eax, DWORD PTR _ired$13[ebp]
  00165	50		 push	 eax
  00166	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _red$17[ebp]
  0016b	f3 0f 59 05 18
	00 00 00	 mulss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+24
  00173	51		 push	 ecx
  00174	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00179	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 854  : 			asm_convert_float_to_int ( ( green * ambient_3d_light.colour.green ), &igreen );

  0017e	8d 45 e8	 lea	 eax, DWORD PTR _igreen$12[ebp]
  00181	50		 push	 eax
  00182	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _green$16[ebp]
  00187	f3 0f 59 05 1c
	00 00 00	 mulss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+28
  0018f	51		 push	 ecx
  00190	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00195	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 855  : 			asm_convert_float_to_int ( ( blue * ambient_3d_light.colour.blue ), &iblue );

  0019a	8d 45 e4	 lea	 eax, DWORD PTR _iblue$11[ebp]
  0019d	50		 push	 eax
  0019e	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _blue$15[ebp]
  001a3	f3 0f 59 05 20
	00 00 00	 mulss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+32
  001ab	51		 push	 ecx
  001ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b1	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 856  : 	
; 857  : 			colour->red = ired;

  001b6	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  001b9	8a 4d ec	 mov	 cl, BYTE PTR _ired$13[ebp]
  001bc	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 858  : 			colour->green = igreen;

  001bf	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  001c2	8a 4d e8	 mov	 cl, BYTE PTR _igreen$12[ebp]
  001c5	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 859  : 			colour->blue = iblue;

  001c8	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  001cb	8a 4d e4	 mov	 cl, BYTE PTR _iblue$11[ebp]
  001ce	88 08		 mov	 BYTE PTR [eax], cl

; 860  : 
; 861  : 			if ( current_object_3d_surface->translucent )

  001d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  001d5	66 8b 08	 mov	 cx, WORD PTR [eax]
  001d8	66 c1 e9 06	 shr	 cx, 6
  001dc	66 83 e1 01	 and	 cx, 1
  001e0	0f b7 d1	 movzx	 edx, cx
  001e3	85 d2		 test	 edx, edx
  001e5	74 39		 je	 SHORT $LN6@calculate_

; 862  : 			{
; 863  : 
; 864  : 				alpha = current_object_3d_surface->alpha;

  001e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  001ec	0f b6 48 0f	 movzx	 ecx, BYTE PTR [eax+15]
  001f0	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  001f4	f3 0f 11 45 f0	 movss	 DWORD PTR _alpha$14[ebp], xmm0

; 865  : 
; 866  : 				asm_convert_float_to_int ( ( alpha * current_object_3d_dissolve_factor ), &ialpha );

  001f9	8d 45 e0	 lea	 eax, DWORD PTR _ialpha$10[ebp]
  001fc	50		 push	 eax
  001fd	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _alpha$14[ebp]
  00202	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?current_object_3d_dissolve_factor@@3MA
  0020a	51		 push	 ecx
  0020b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00210	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 867  : 
; 868  : 				colour->alpha = ialpha;

  00215	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  00218	8a 4d e0	 mov	 cl, BYTE PTR _ialpha$10[ebp]
  0021b	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 869  : 			}
; 870  : 			else

  0021e	eb 0c		 jmp	 SHORT $LN7@calculate_
$LN6@calculate_:

; 871  : 			{
; 872  : 	
; 873  : 				colour->alpha = current_object_3d_dissolve_value;

  00220	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  00223	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR ?current_object_3d_dissolve_value@@3EA ; current_object_3d_dissolve_value
  00229	88 48 03	 mov	 BYTE PTR [eax+3], cl
$LN7@calculate_:

; 874  : 			}
; 875  : 		}
; 876  : 	}
; 877  : 	else

  0022c	e9 4c 01 00 00	 jmp	 $LN11@calculate_
$LN2@calculate_:

; 878  : 	{
; 879  : 	
; 880  : 		if ( current_object_3d_surface->additive )

  00231	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00236	66 8b 08	 mov	 cx, WORD PTR [eax]
  00239	66 c1 e9 05	 shr	 cx, 5
  0023d	66 83 e1 01	 and	 cx, 1
  00241	0f b7 d1	 movzx	 edx, cx
  00244	85 d2		 test	 edx, edx
  00246	0f 84 a9 00 00
	00		 je	 $LN8@calculate_

; 881  : 		{
; 882  : 	
; 883  : 			float
; 884  : 				red,
; 885  : 				green,
; 886  : 				blue;
; 887  : 	
; 888  : 			int
; 889  : 				ired,
; 890  : 				igreen,
; 891  : 				iblue;
; 892  : 	
; 893  : 			red = current_object_3d_surface->red;

  0024c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00251	0f b6 48 0e	 movzx	 ecx, BYTE PTR [eax+14]
  00255	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00259	f3 0f 11 45 d8	 movss	 DWORD PTR _red$8[ebp], xmm0

; 894  : 			green = current_object_3d_surface->green;

  0025e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00263	0f b6 48 0d	 movzx	 ecx, BYTE PTR [eax+13]
  00267	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0026b	f3 0f 11 45 d4	 movss	 DWORD PTR _green$7[ebp], xmm0

; 895  : 			blue = current_object_3d_surface->blue;

  00270	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00275	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00279	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0027d	f3 0f 11 45 d0	 movss	 DWORD PTR _blue$6[ebp], xmm0

; 896  : 	
; 897  : 			asm_convert_float_to_int ( ( red * current_object_3d_dissolve_factor ), &ired );

  00282	8d 45 cc	 lea	 eax, DWORD PTR _ired$5[ebp]
  00285	50		 push	 eax
  00286	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _red$8[ebp]
  0028b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?current_object_3d_dissolve_factor@@3MA
  00293	51		 push	 ecx
  00294	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00299	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 898  : 			asm_convert_float_to_int ( ( green * current_object_3d_dissolve_factor ), &igreen );

  0029e	8d 45 c8	 lea	 eax, DWORD PTR _igreen$4[ebp]
  002a1	50		 push	 eax
  002a2	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _green$7[ebp]
  002a7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?current_object_3d_dissolve_factor@@3MA
  002af	51		 push	 ecx
  002b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b5	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 899  : 			asm_convert_float_to_int ( ( blue * current_object_3d_dissolve_factor ), &iblue );

  002ba	8d 45 c4	 lea	 eax, DWORD PTR _iblue$3[ebp]
  002bd	50		 push	 eax
  002be	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _blue$6[ebp]
  002c3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?current_object_3d_dissolve_factor@@3MA
  002cb	51		 push	 ecx
  002cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d1	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 900  : 	
; 901  : 			colour->red = ired;

  002d6	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  002d9	8a 4d cc	 mov	 cl, BYTE PTR _ired$5[ebp]
  002dc	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 902  : 			colour->green = igreen;

  002df	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  002e2	8a 4d c8	 mov	 cl, BYTE PTR _igreen$4[ebp]
  002e5	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 903  : 			colour->blue = iblue;

  002e8	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  002eb	8a 4d c4	 mov	 cl, BYTE PTR _iblue$3[ebp]
  002ee	88 08		 mov	 BYTE PTR [eax], cl

; 904  : 		}
; 905  : 		else

  002f0	e9 88 00 00 00	 jmp	 $LN11@calculate_
$LN8@calculate_:

; 906  : 		{
; 907  : 
; 908  : 			float
; 909  : 				alpha;
; 910  : 
; 911  : 			int
; 912  : 				ialpha;
; 913  : 	
; 914  : 			colour->red = current_object_3d_surface->red;

  002f5	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  002f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  002fe	8a 51 0e	 mov	 dl, BYTE PTR [ecx+14]
  00301	88 50 02	 mov	 BYTE PTR [eax+2], dl

; 915  : 			colour->green = current_object_3d_surface->green;

  00304	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  00307	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0030d	8a 51 0d	 mov	 dl, BYTE PTR [ecx+13]
  00310	88 50 01	 mov	 BYTE PTR [eax+1], dl

; 916  : 			colour->blue = current_object_3d_surface->blue;

  00313	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  00316	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0031c	8a 51 0c	 mov	 dl, BYTE PTR [ecx+12]
  0031f	88 10		 mov	 BYTE PTR [eax], dl

; 917  : 
; 918  : 			if ( current_object_3d_surface->translucent )

  00321	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00326	66 8b 08	 mov	 cx, WORD PTR [eax]
  00329	66 c1 e9 06	 shr	 cx, 6
  0032d	66 83 e1 01	 and	 cx, 1
  00331	0f b7 d1	 movzx	 edx, cx
  00334	85 d2		 test	 edx, edx
  00336	74 39		 je	 SHORT $LN10@calculate_

; 919  : 			{
; 920  : 
; 921  : 				alpha = current_object_3d_surface->alpha;

  00338	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0033d	0f b6 48 0f	 movzx	 ecx, BYTE PTR [eax+15]
  00341	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00345	f3 0f 11 45 c0	 movss	 DWORD PTR _alpha$2[ebp], xmm0

; 922  : 
; 923  : 				asm_convert_float_to_int ( ( alpha * current_object_3d_dissolve_factor ), &ialpha );

  0034a	8d 45 bc	 lea	 eax, DWORD PTR _ialpha$1[ebp]
  0034d	50		 push	 eax
  0034e	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _alpha$2[ebp]
  00353	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?current_object_3d_dissolve_factor@@3MA
  0035b	51		 push	 ecx
  0035c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00361	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 924  : 
; 925  : 				colour->alpha = ialpha;

  00366	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  00369	8a 4d bc	 mov	 cl, BYTE PTR _ialpha$1[ebp]
  0036c	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 926  : 			}
; 927  : 			else

  0036f	eb 0c		 jmp	 SHORT $LN11@calculate_
$LN10@calculate_:

; 928  : 			{
; 929  : 	
; 930  : 				colour->alpha = current_object_3d_dissolve_value;

  00371	8b 45 08	 mov	 eax, DWORD PTR _colour$[ebp]
  00374	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR ?current_object_3d_dissolve_value@@3EA ; current_object_3d_dissolve_value
  0037a	88 48 03	 mov	 BYTE PTR [eax+3], cl
$LN11@calculate_:

; 931  : 			}
; 932  : 		}
; 933  : 	}
; 934  : }

  0037d	5f		 pop	 edi
  0037e	5e		 pop	 esi
  0037f	5b		 pop	 ebx
  00380	8b e5		 mov	 esp, ebp
  00382	5d		 pop	 ebp
  00383	c2 04 00	 ret	 4
?calculate_luminous_colour@@YGXPAUREAL_COLOUR@@@Z ENDP	; calculate_luminous_colour
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobject.c
;	COMDAT ?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_line$ = -12						; size = 4
_outcode2$ = -8						; size = 4
_outcode$ = -4						; size = 4
_points$ = 8						; size = 4
_pt1$ = 12						; size = 4
_pt2$ = 16						; size = 4
_col$ = 20						; size = 4
?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z PROC ; render_bounding_box_line, COMDAT

; 746  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 747  : 
; 748  : 	int 
; 749  : 		outcode,
; 750  : 		outcode2;
; 751  : 
; 752  : 	vertex
; 753  : 		*line;
; 754  : 
; 755  : 	points[pt1].next_vertex = &points[pt2];

  00009	8b 45 10	 mov	 eax, DWORD PTR _pt2$[ebp]
  0000c	c1 e0 06	 shl	 eax, 6
  0000f	03 45 08	 add	 eax, DWORD PTR _points$[ebp]
  00012	8b 4d 0c	 mov	 ecx, DWORD PTR _pt1$[ebp]
  00015	c1 e1 06	 shl	 ecx, 6
  00018	8b 55 08	 mov	 edx, DWORD PTR _points$[ebp]
  0001b	89 44 0a 28	 mov	 DWORD PTR [edx+ecx+40], eax

; 756  : 	points[pt2].next_vertex = NULL;

  0001f	8b 45 10	 mov	 eax, DWORD PTR _pt2$[ebp]
  00022	c1 e0 06	 shl	 eax, 6
  00025	8b 4d 08	 mov	 ecx, DWORD PTR _points$[ebp]
  00028	c7 44 01 28 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+40], 0

; 757  : 
; 758  : 	outcode = points[pt1].outcode;

  00030	8b 45 0c	 mov	 eax, DWORD PTR _pt1$[ebp]
  00033	c1 e0 06	 shl	 eax, 6
  00036	8b 4d 08	 mov	 ecx, DWORD PTR _points$[ebp]
  00039	0f b6 54 01 2c	 movzx	 edx, BYTE PTR [ecx+eax+44]
  0003e	89 55 fc	 mov	 DWORD PTR _outcode$[ebp], edx

; 759  : 	outcode2 = points[pt1].outcode;

  00041	8b 45 0c	 mov	 eax, DWORD PTR _pt1$[ebp]
  00044	c1 e0 06	 shl	 eax, 6
  00047	8b 4d 08	 mov	 ecx, DWORD PTR _points$[ebp]
  0004a	0f b6 54 01 2c	 movzx	 edx, BYTE PTR [ecx+eax+44]
  0004f	89 55 f8	 mov	 DWORD PTR _outcode2$[ebp], edx

; 760  : 
; 761  : 	outcode |= points[pt2].outcode;

  00052	8b 45 10	 mov	 eax, DWORD PTR _pt2$[ebp]
  00055	c1 e0 06	 shl	 eax, 6
  00058	8b 4d 08	 mov	 ecx, DWORD PTR _points$[ebp]
  0005b	0f b6 54 01 2c	 movzx	 edx, BYTE PTR [ecx+eax+44]
  00060	0b 55 fc	 or	 edx, DWORD PTR _outcode$[ebp]
  00063	89 55 fc	 mov	 DWORD PTR _outcode$[ebp], edx

; 762  : 	outcode2 &= points[pt2].outcode;

  00066	8b 45 10	 mov	 eax, DWORD PTR _pt2$[ebp]
  00069	c1 e0 06	 shl	 eax, 6
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR _points$[ebp]
  0006f	0f b6 54 01 2c	 movzx	 edx, BYTE PTR [ecx+eax+44]
  00074	23 55 f8	 and	 edx, DWORD PTR _outcode2$[ebp]
  00077	89 55 f8	 mov	 DWORD PTR _outcode2$[ebp], edx

; 763  : 
; 764  : 	line = &points[pt1];

  0007a	8b 45 0c	 mov	 eax, DWORD PTR _pt1$[ebp]
  0007d	c1 e0 06	 shl	 eax, 6
  00080	03 45 08	 add	 eax, DWORD PTR _points$[ebp]
  00083	89 45 f4	 mov	 DWORD PTR _line$[ebp], eax

; 765  : 
; 766  : 	if ( outcode2 == 0 )

  00086	83 7d f8 00	 cmp	 DWORD PTR _outcode2$[ebp], 0
  0008a	75 55		 jne	 SHORT $LN1@render_bou

; 767  : 	{
; 768  : 
; 769  : 		clip_3d_coord = 0;

  0008c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, 0 ; clip_3d_coord

; 770  : 	
; 771  : 		if ( outcode & CLIP_HITHER )

  00096	8b 45 fc	 mov	 eax, DWORD PTR _outcode$[ebp]
  00099	83 e0 20	 and	 eax, 32			; 00000020H
  0009c	74 18		 je	 SHORT $LN3@render_bou

; 772  : 		{
; 773  : 	
; 774  : 			line = hither_clip_3d_polygon ( line, &outcode );

  0009e	8d 45 fc	 lea	 eax, DWORD PTR _outcode$[ebp]
  000a1	50		 push	 eax
  000a2	8b 4d f4	 mov	 ecx, DWORD PTR _line$[ebp]
  000a5	51		 push	 ecx
  000a6	e8 00 00 00 00	 call	 ?hither_clip_3d_polygon@@YGPAUVERTEX@@PAU1@PAH@Z ; hither_clip_3d_polygon
  000ab	89 45 f4	 mov	 DWORD PTR _line$[ebp], eax

; 775  : 	
; 776  : 			if ( !line )

  000ae	83 7d f4 00	 cmp	 DWORD PTR _line$[ebp], 0
  000b2	75 02		 jne	 SHORT $LN3@render_bou

; 777  : 			{
; 778  : 	
; 779  : 				return;

  000b4	eb 2b		 jmp	 SHORT $LN1@render_bou
$LN3@render_bou:

; 780  : 			}
; 781  : 		}
; 782  : 	
; 783  : 		if ( outcode )

  000b6	83 7d fc 00	 cmp	 DWORD PTR _outcode$[ebp], 0
  000ba	74 18		 je	 SHORT $LN5@render_bou

; 784  : 		{
; 785  : 	
; 786  : 			line = clip_3d_polygon ( line, outcode );

  000bc	8b 45 fc	 mov	 eax, DWORD PTR _outcode$[ebp]
  000bf	50		 push	 eax
  000c0	8b 4d f4	 mov	 ecx, DWORD PTR _line$[ebp]
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z ; clip_3d_polygon
  000c9	89 45 f4	 mov	 DWORD PTR _line$[ebp], eax

; 787  : 	
; 788  : 			if ( !line )

  000cc	83 7d f4 00	 cmp	 DWORD PTR _line$[ebp], 0
  000d0	75 02		 jne	 SHORT $LN5@render_bou

; 789  : 			{
; 790  : 	
; 791  : 				return;

  000d2	eb 0d		 jmp	 SHORT $LN1@render_bou
$LN5@render_bou:

; 792  : 			}
; 793  : 		}
; 794  : 	
; 795  : 		{
; 796  : 
; 797  : 			draw_wbuffered_plain_line ( line, col );

  000d4	8b 45 14	 mov	 eax, DWORD PTR _col$[ebp]
  000d7	50		 push	 eax
  000d8	8b 4d f4	 mov	 ecx, DWORD PTR _line$[ebp]
  000db	51		 push	 ecx
  000dc	e8 00 00 00 00	 call	 ?draw_wbuffered_plain_line@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z ; draw_wbuffered_plain_line
$LN1@render_bou:

; 798  : 		}
; 799  : 	}
; 800  : }

  000e1	5f		 pop	 edi
  000e2	5e		 pop	 esi
  000e3	5b		 pop	 ebx
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 10 00	 ret	 16			; 00000010H
?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z ENDP ; render_bounding_box_line
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobject.c
;	COMDAT ?draw_3d_object_bounding_box@@YGXPAUOBJECT_3D_INSTANCE@@@Z
_TEXT	SEGMENT
_points$1 = -528					; size = 512
_red_colour$ = -16					; size = 4
_white_colour$ = -12					; size = 4
_scene$ = -8						; size = 4
_object_relative_position$ = -4				; size = 4
_obj$ = 8						; size = 4
?draw_3d_object_bounding_box@@YGXPAUOBJECT_3D_INSTANCE@@@Z PROC ; draw_3d_object_bounding_box, COMDAT

; 442  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 02 00
	00		 sub	 esp, 656		; 00000290H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 443  : 
; 444  : 	vec3d
; 445  : 		*object_relative_position;
; 446  : 	
; 447  : 	object_3d_scene_database_entry
; 448  : 		*scene;
; 449  : 
; 450  : 	real_colour
; 451  : 		white_colour,
; 452  : 		red_colour;
; 453  : 
; 454  : 
; 455  : 	//
; 456  : 	// Set the scene pointer
; 457  : 	//
; 458  : 
; 459  : 	scene = &objects_3d_scene_database[obj->object_number];

  0000c	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0000f	69 48 04 e0 00
	00 00		 imul	 ecx, DWORD PTR [eax+4], 224
  00016	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  0001c	89 4d f8	 mov	 DWORD PTR _scene$[ebp], ecx

; 460  : 
; 461  : 	//
; 462  : 	// Get the object's position relative to the camera
; 463  : 	//
; 464  : 
; 465  : 	object_relative_position = &obj->view_position;

  0001f	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00022	83 c0 38	 add	 eax, 56			; 00000038H
  00025	89 45 fc	 mov	 DWORD PTR _object_relative_position$[ebp], eax

; 466  : 
; 467  : 	//
; 468  : 	// Set the main objects' scaling values
; 469  : 	//
; 470  : 
; 471  : 	object_3d_scale.x = obj->relative_scale.x;

  00028	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0002b	f3 0f 10 40 44	 movss	 xmm0, DWORD PTR [eax+68]
  00030	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?object_3d_scale@@3UVEC3D@@A, xmm0

; 472  : 	object_3d_scale.y = obj->relative_scale.y;

  00038	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0003b	f3 0f 10 40 48	 movss	 xmm0, DWORD PTR [eax+72]
  00040	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?object_3d_scale@@3UVEC3D@@A+4, xmm0

; 473  : 	object_3d_scale.z = obj->relative_scale.z;

  00048	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0004b	f3 0f 10 40 4c	 movss	 xmm0, DWORD PTR [eax+76]
  00050	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?object_3d_scale@@3UVEC3D@@A+8, xmm0

; 474  : 
; 475  : 	//
; 476  : 	// Calculate the object's rotation matrix, to transform its 3d points relative to the view.
; 477  : 	//
; 478  : 
; 479  : 	rotation_3d[0][0] = ( obj->vp.xv.x * visual_3d_vp->xv.x + obj->vp.xv.y * visual_3d_vp->xv.y + obj->vp.xv.z * visual_3d_vp->xv.z );

  00058	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0005b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00061	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00066	f3 0f 59 41 0c	 mulss	 xmm0, DWORD PTR [ecx+12]
  0006b	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  0006e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00073	f3 0f 10 4a 18	 movss	 xmm1, DWORD PTR [edx+24]
  00078	f3 0f 59 48 10	 mulss	 xmm1, DWORD PTR [eax+16]
  0007d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00081	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00084	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0008a	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  0008f	f3 0f 59 4a 14	 mulss	 xmm1, DWORD PTR [edx+20]
  00094	f3 0f 58 c1	 addss	 xmm0, xmm1
  00098	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0009d	6b c8 00	 imul	 ecx, eax, 0
  000a0	ba 04 00 00 00	 mov	 edx, 4
  000a5	6b c2 00	 imul	 eax, edx, 0
  000a8	f3 0f 11 84 01
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax], xmm0

; 480  : 	rotation_3d[0][1] = ( obj->vp.xv.x * visual_3d_vp->yv.x + obj->vp.xv.y * visual_3d_vp->yv.y + obj->vp.xv.z * visual_3d_vp->yv.z );

  000b1	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  000b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000ba	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  000bf	f3 0f 59 41 18	 mulss	 xmm0, DWORD PTR [ecx+24]
  000c4	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000cc	f3 0f 10 4a 18	 movss	 xmm1, DWORD PTR [edx+24]
  000d1	f3 0f 59 48 1c	 mulss	 xmm1, DWORD PTR [eax+28]
  000d6	f3 0f 58 c1	 addss	 xmm0, xmm1
  000da	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  000dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000e3	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  000e8	f3 0f 59 4a 20	 mulss	 xmm1, DWORD PTR [edx+32]
  000ed	f3 0f 58 c1	 addss	 xmm0, xmm1
  000f1	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000f6	6b c8 00	 imul	 ecx, eax, 0
  000f9	ba 04 00 00 00	 mov	 edx, 4
  000fe	c1 e2 00	 shl	 edx, 0
  00101	f3 0f 11 84 11
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], xmm0

; 481  : 	rotation_3d[0][2] = ( obj->vp.xv.x * visual_3d_vp->zv.x + obj->vp.xv.y * visual_3d_vp->zv.y + obj->vp.xv.z * visual_3d_vp->zv.z );

  0010a	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0010d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00113	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00118	f3 0f 59 41 24	 mulss	 xmm0, DWORD PTR [ecx+36]
  0011d	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00120	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00125	f3 0f 10 4a 18	 movss	 xmm1, DWORD PTR [edx+24]
  0012a	f3 0f 59 48 28	 mulss	 xmm1, DWORD PTR [eax+40]
  0012f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00133	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00136	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0013c	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  00141	f3 0f 59 4a 2c	 mulss	 xmm1, DWORD PTR [edx+44]
  00146	f3 0f 58 c1	 addss	 xmm0, xmm1
  0014a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0014f	6b c8 00	 imul	 ecx, eax, 0
  00152	ba 04 00 00 00	 mov	 edx, 4
  00157	d1 e2		 shl	 edx, 1
  00159	f3 0f 11 84 11
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], xmm0

; 482  : 
; 483  : 	rotation_3d[1][0] = ( obj->vp.yv.x * visual_3d_vp->xv.x + obj->vp.yv.y * visual_3d_vp->xv.y + obj->vp.yv.z * visual_3d_vp->xv.z );

  00162	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00165	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0016b	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  00170	f3 0f 59 41 0c	 mulss	 xmm0, DWORD PTR [ecx+12]
  00175	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00178	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0017d	f3 0f 10 4a 24	 movss	 xmm1, DWORD PTR [edx+36]
  00182	f3 0f 59 48 10	 mulss	 xmm1, DWORD PTR [eax+16]
  00187	f3 0f 58 c1	 addss	 xmm0, xmm1
  0018b	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0018e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00194	f3 0f 10 49 28	 movss	 xmm1, DWORD PTR [ecx+40]
  00199	f3 0f 59 4a 14	 mulss	 xmm1, DWORD PTR [edx+20]
  0019e	f3 0f 58 c1	 addss	 xmm0, xmm1
  001a2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001a7	c1 e0 00	 shl	 eax, 0
  001aa	b9 04 00 00 00	 mov	 ecx, 4
  001af	6b d1 00	 imul	 edx, ecx, 0
  001b2	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 484  : 	rotation_3d[1][1] = ( obj->vp.yv.x * visual_3d_vp->yv.x + obj->vp.yv.y * visual_3d_vp->yv.y + obj->vp.yv.z * visual_3d_vp->yv.z );

  001bb	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  001be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  001c4	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  001c9	f3 0f 59 41 18	 mulss	 xmm0, DWORD PTR [ecx+24]
  001ce	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  001d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  001d6	f3 0f 10 4a 24	 movss	 xmm1, DWORD PTR [edx+36]
  001db	f3 0f 59 48 1c	 mulss	 xmm1, DWORD PTR [eax+28]
  001e0	f3 0f 58 c1	 addss	 xmm0, xmm1
  001e4	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  001e7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  001ed	f3 0f 10 49 28	 movss	 xmm1, DWORD PTR [ecx+40]
  001f2	f3 0f 59 4a 20	 mulss	 xmm1, DWORD PTR [edx+32]
  001f7	f3 0f 58 c1	 addss	 xmm0, xmm1
  001fb	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00200	c1 e0 00	 shl	 eax, 0
  00203	b9 04 00 00 00	 mov	 ecx, 4
  00208	c1 e1 00	 shl	 ecx, 0
  0020b	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], xmm0

; 485  : 	rotation_3d[1][2] = ( obj->vp.yv.x * visual_3d_vp->zv.x + obj->vp.yv.y * visual_3d_vp->zv.y + obj->vp.yv.z * visual_3d_vp->zv.z );

  00214	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00217	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0021d	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  00222	f3 0f 59 41 24	 mulss	 xmm0, DWORD PTR [ecx+36]
  00227	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  0022a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0022f	f3 0f 10 4a 24	 movss	 xmm1, DWORD PTR [edx+36]
  00234	f3 0f 59 48 28	 mulss	 xmm1, DWORD PTR [eax+40]
  00239	f3 0f 58 c1	 addss	 xmm0, xmm1
  0023d	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00240	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00246	f3 0f 10 49 28	 movss	 xmm1, DWORD PTR [ecx+40]
  0024b	f3 0f 59 4a 2c	 mulss	 xmm1, DWORD PTR [edx+44]
  00250	f3 0f 58 c1	 addss	 xmm0, xmm1
  00254	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00259	c1 e0 00	 shl	 eax, 0
  0025c	b9 04 00 00 00	 mov	 ecx, 4
  00261	d1 e1		 shl	 ecx, 1
  00263	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], xmm0

; 486  : 
; 487  : 	rotation_3d[2][0] = ( obj->vp.zv.x * visual_3d_vp->xv.x + obj->vp.zv.y * visual_3d_vp->xv.y + obj->vp.zv.z * visual_3d_vp->xv.z );

  0026c	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0026f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00275	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  0027a	f3 0f 59 41 0c	 mulss	 xmm0, DWORD PTR [ecx+12]
  0027f	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00282	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00287	f3 0f 10 4a 30	 movss	 xmm1, DWORD PTR [edx+48]
  0028c	f3 0f 59 48 10	 mulss	 xmm1, DWORD PTR [eax+16]
  00291	f3 0f 58 c1	 addss	 xmm0, xmm1
  00295	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00298	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0029e	f3 0f 10 49 34	 movss	 xmm1, DWORD PTR [ecx+52]
  002a3	f3 0f 59 4a 14	 mulss	 xmm1, DWORD PTR [edx+20]
  002a8	f3 0f 58 c1	 addss	 xmm0, xmm1
  002ac	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002b1	d1 e0		 shl	 eax, 1
  002b3	b9 04 00 00 00	 mov	 ecx, 4
  002b8	6b d1 00	 imul	 edx, ecx, 0
  002bb	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 488  : 	rotation_3d[2][1] = ( obj->vp.zv.x * visual_3d_vp->yv.x + obj->vp.zv.y * visual_3d_vp->yv.y + obj->vp.zv.z * visual_3d_vp->yv.z );

  002c4	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  002c7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  002cd	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  002d2	f3 0f 59 41 18	 mulss	 xmm0, DWORD PTR [ecx+24]
  002d7	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  002da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  002df	f3 0f 10 4a 30	 movss	 xmm1, DWORD PTR [edx+48]
  002e4	f3 0f 59 48 1c	 mulss	 xmm1, DWORD PTR [eax+28]
  002e9	f3 0f 58 c1	 addss	 xmm0, xmm1
  002ed	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  002f0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  002f6	f3 0f 10 49 34	 movss	 xmm1, DWORD PTR [ecx+52]
  002fb	f3 0f 59 4a 20	 mulss	 xmm1, DWORD PTR [edx+32]
  00300	f3 0f 58 c1	 addss	 xmm0, xmm1
  00304	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00309	d1 e0		 shl	 eax, 1
  0030b	b9 04 00 00 00	 mov	 ecx, 4
  00310	c1 e1 00	 shl	 ecx, 0
  00313	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], xmm0

; 489  : 	rotation_3d[2][2] = ( obj->vp.zv.x * visual_3d_vp->zv.x + obj->vp.zv.y * visual_3d_vp->zv.y + obj->vp.zv.z * visual_3d_vp->zv.z );

  0031c	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0031f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00325	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  0032a	f3 0f 59 41 24	 mulss	 xmm0, DWORD PTR [ecx+36]
  0032f	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00332	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00337	f3 0f 10 4a 30	 movss	 xmm1, DWORD PTR [edx+48]
  0033c	f3 0f 59 48 28	 mulss	 xmm1, DWORD PTR [eax+40]
  00341	f3 0f 58 c1	 addss	 xmm0, xmm1
  00345	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00348	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0034e	f3 0f 10 49 34	 movss	 xmm1, DWORD PTR [ecx+52]
  00353	f3 0f 59 4a 2c	 mulss	 xmm1, DWORD PTR [edx+44]
  00358	f3 0f 58 c1	 addss	 xmm0, xmm1
  0035c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00361	d1 e0		 shl	 eax, 1
  00363	b9 04 00 00 00	 mov	 ecx, 4
  00368	d1 e1		 shl	 ecx, 1
  0036a	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], xmm0

; 490  : 
; 491  : 	rotation_3d[0][0] *= object_3d_scale.x;

  00373	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00378	6b c8 00	 imul	 ecx, eax, 0
  0037b	ba 04 00 00 00	 mov	 edx, 4
  00380	6b c2 00	 imul	 eax, edx, 0
  00383	f3 0f 10 84 01
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax]
  0038c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A
  00394	b9 04 00 00 00	 mov	 ecx, 4
  00399	6b d1 00	 imul	 edx, ecx, 0
  0039c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003a1	6b c8 00	 imul	 ecx, eax, 0
  003a4	f3 0f 11 84 11
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], xmm0

; 492  : 	rotation_3d[1][0] *= object_3d_scale.y;

  003ad	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003b2	c1 e0 00	 shl	 eax, 0
  003b5	b9 04 00 00 00	 mov	 ecx, 4
  003ba	6b d1 00	 imul	 edx, ecx, 0
  003bd	f3 0f 10 84 10
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  003c6	f3 0f 59 05 04
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+4
  003ce	b8 04 00 00 00	 mov	 eax, 4
  003d3	6b c8 00	 imul	 ecx, eax, 0
  003d6	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  003db	c1 e2 00	 shl	 edx, 0
  003de	f3 0f 11 84 0a
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[edx+ecx], xmm0

; 493  : 	rotation_3d[2][0] *= object_3d_scale.z;

  003e7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003ec	d1 e0		 shl	 eax, 1
  003ee	b9 04 00 00 00	 mov	 ecx, 4
  003f3	6b d1 00	 imul	 edx, ecx, 0
  003f6	f3 0f 10 84 10
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  003ff	f3 0f 59 05 08
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+8
  00407	b8 04 00 00 00	 mov	 eax, 4
  0040c	6b c8 00	 imul	 ecx, eax, 0
  0040f	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00414	d1 e2		 shl	 edx, 1
  00416	f3 0f 11 84 0a
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[edx+ecx], xmm0

; 494  : 
; 495  : 	rotation_3d[0][1] *= object_3d_scale.x;

  0041f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00424	6b c8 00	 imul	 ecx, eax, 0
  00427	ba 04 00 00 00	 mov	 edx, 4
  0042c	c1 e2 00	 shl	 edx, 0
  0042f	f3 0f 10 84 11
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00438	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A
  00440	b8 04 00 00 00	 mov	 eax, 4
  00445	c1 e0 00	 shl	 eax, 0
  00448	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0044d	6b d1 00	 imul	 edx, ecx, 0
  00450	f3 0f 11 84 02
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[edx+eax], xmm0

; 496  : 	rotation_3d[1][1] *= object_3d_scale.y;

  00459	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0045e	c1 e0 00	 shl	 eax, 0
  00461	b9 04 00 00 00	 mov	 ecx, 4
  00466	c1 e1 00	 shl	 ecx, 0
  00469	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00472	f3 0f 59 05 04
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+4
  0047a	ba 04 00 00 00	 mov	 edx, 4
  0047f	c1 e2 00	 shl	 edx, 0
  00482	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00487	c1 e0 00	 shl	 eax, 0
  0048a	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 497  : 	rotation_3d[2][1] *= object_3d_scale.z;

  00493	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00498	d1 e0		 shl	 eax, 1
  0049a	b9 04 00 00 00	 mov	 ecx, 4
  0049f	c1 e1 00	 shl	 ecx, 0
  004a2	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  004ab	f3 0f 59 05 08
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+8
  004b3	ba 04 00 00 00	 mov	 edx, 4
  004b8	c1 e2 00	 shl	 edx, 0
  004bb	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004c0	d1 e0		 shl	 eax, 1
  004c2	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 498  : 
; 499  : 	rotation_3d[0][2] *= object_3d_scale.x;

  004cb	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004d0	6b c8 00	 imul	 ecx, eax, 0
  004d3	ba 04 00 00 00	 mov	 edx, 4
  004d8	d1 e2		 shl	 edx, 1
  004da	f3 0f 10 84 11
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  004e3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A
  004eb	b8 04 00 00 00	 mov	 eax, 4
  004f0	d1 e0		 shl	 eax, 1
  004f2	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  004f7	6b d1 00	 imul	 edx, ecx, 0
  004fa	f3 0f 11 84 02
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[edx+eax], xmm0

; 500  : 	rotation_3d[1][2] *= object_3d_scale.y;

  00503	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00508	c1 e0 00	 shl	 eax, 0
  0050b	b9 04 00 00 00	 mov	 ecx, 4
  00510	d1 e1		 shl	 ecx, 1
  00512	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  0051b	f3 0f 59 05 04
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+4
  00523	ba 04 00 00 00	 mov	 edx, 4
  00528	d1 e2		 shl	 edx, 1
  0052a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0052f	c1 e0 00	 shl	 eax, 0
  00532	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 501  : 	rotation_3d[2][2] *= object_3d_scale.z;

  0053b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00540	d1 e0		 shl	 eax, 1
  00542	b9 04 00 00 00	 mov	 ecx, 4
  00547	d1 e1		 shl	 ecx, 1
  00549	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00552	f3 0f 59 05 08
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+8
  0055a	ba 04 00 00 00	 mov	 edx, 4
  0055f	d1 e2		 shl	 edx, 1
  00561	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00566	d1 e0		 shl	 eax, 1
  00568	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 502  : 
; 503  : 	white_colour.red = 255;

  00571	c6 45 f6 ff	 mov	 BYTE PTR _white_colour$[ebp+2], 255 ; 000000ffH

; 504  : 	white_colour.green = 255;

  00575	c6 45 f5 ff	 mov	 BYTE PTR _white_colour$[ebp+1], 255 ; 000000ffH

; 505  : 	white_colour.blue = 255;

  00579	c6 45 f4 ff	 mov	 BYTE PTR _white_colour$[ebp], 255 ; 000000ffH

; 506  : 	white_colour.alpha = 255;

  0057d	c6 45 f7 ff	 mov	 BYTE PTR _white_colour$[ebp+3], 255 ; 000000ffH

; 507  : 
; 508  : 	red_colour.red = 255;

  00581	c6 45 f2 ff	 mov	 BYTE PTR _red_colour$[ebp+2], 255 ; 000000ffH

; 509  : 	red_colour.green = 0;

  00585	c6 45 f1 00	 mov	 BYTE PTR _red_colour$[ebp+1], 0

; 510  : 	red_colour.blue = 0;

  00589	c6 45 f0 00	 mov	 BYTE PTR _red_colour$[ebp], 0

; 511  : 	red_colour.alpha = 255;

  0058d	c6 45 f3 ff	 mov	 BYTE PTR _red_colour$[ebp+3], 255 ; 000000ffH

; 512  : 
; 513  : 	set_d3d_texture_stage_state ( 0, D3DTSS_COLOROP, D3DTOP_DISABLE );

  00591	6a 01		 push	 1
  00593	6a 01		 push	 1
  00595	6a 00		 push	 0
  00597	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 514  : 	set_d3d_texture ( 0, NULL );

  0059c	6a 00		 push	 0
  0059e	6a 00		 push	 0
  005a0	e8 00 00 00 00	 call	 ?set_d3d_texture@@YGXHPAUSCREEN@@@Z ; set_d3d_texture

; 515  : 	set_d3d_int_state ( D3DRENDERSTATE_SHADEMODE, D3DSHADE_FLAT );

  005a5	6a 01		 push	 1
  005a7	6a 09		 push	 9
  005a9	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 516  : 
; 517  : 
; 518  : 	{
; 519  : 
; 520  : 		vertex
; 521  : 			points[8];
; 522  : 
; 523  : 		points[0].x = scene->bounding_box2.xmin;

  005ae	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005b3	6b c8 00	 imul	 ecx, eax, 0
  005b6	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  005b9	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  005bf	89 84 0d f0 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx], eax

; 524  : 		points[0].y = scene->bounding_box2.ymin;

  005c6	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005cb	6b c8 00	 imul	 ecx, eax, 0
  005ce	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  005d1	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  005d7	89 84 0d f4 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx+4], eax

; 525  : 		points[0].z = scene->bounding_box2.zmin;

  005de	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005e3	6b c8 00	 imul	 ecx, eax, 0
  005e6	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  005e9	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  005ef	89 84 0d f8 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx+8], eax

; 526  : 
; 527  : 		points[1].x = scene->bounding_box2.xmax;

  005f6	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005fb	c1 e0 00	 shl	 eax, 0
  005fe	8b 4d f8	 mov	 ecx, DWORD PTR _scene$[ebp]
  00601	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  00607	89 94 05 f0 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+eax], edx

; 528  : 		points[1].y = scene->bounding_box2.ymin;

  0060e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00613	c1 e0 00	 shl	 eax, 0
  00616	8b 4d f8	 mov	 ecx, DWORD PTR _scene$[ebp]
  00619	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  0061f	89 94 05 f4 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+eax+4], edx

; 529  : 		points[1].z = scene->bounding_box2.zmin;

  00626	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0062b	c1 e0 00	 shl	 eax, 0
  0062e	8b 4d f8	 mov	 ecx, DWORD PTR _scene$[ebp]
  00631	8b 91 a0 00 00
	00		 mov	 edx, DWORD PTR [ecx+160]
  00637	89 94 05 f8 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+eax+8], edx

; 530  : 
; 531  : 		points[3].x = scene->bounding_box2.xmin;

  0063e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00643	6b c8 03	 imul	 ecx, eax, 3
  00646	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  00649	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  0064f	89 84 0d f0 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx], eax

; 532  : 		points[3].y = scene->bounding_box2.ymax;

  00656	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0065b	6b c8 03	 imul	 ecx, eax, 3
  0065e	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  00661	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  00667	89 84 0d f4 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx+4], eax

; 533  : 		points[3].z = scene->bounding_box2.zmin;

  0066e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00673	6b c8 03	 imul	 ecx, eax, 3
  00676	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  00679	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  0067f	89 84 0d f8 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx+8], eax

; 534  : 
; 535  : 		points[2].x = scene->bounding_box2.xmax;

  00686	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0068b	d1 e0		 shl	 eax, 1
  0068d	8b 4d f8	 mov	 ecx, DWORD PTR _scene$[ebp]
  00690	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  00696	89 94 05 f0 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+eax], edx

; 536  : 		points[2].y = scene->bounding_box2.ymax;

  0069d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  006a2	d1 e0		 shl	 eax, 1
  006a4	8b 4d f8	 mov	 ecx, DWORD PTR _scene$[ebp]
  006a7	8b 91 9c 00 00
	00		 mov	 edx, DWORD PTR [ecx+156]
  006ad	89 94 05 f4 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+eax+4], edx

; 537  : 		points[2].z = scene->bounding_box2.zmin;

  006b4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  006b9	d1 e0		 shl	 eax, 1
  006bb	8b 4d f8	 mov	 ecx, DWORD PTR _scene$[ebp]
  006be	8b 91 a0 00 00
	00		 mov	 edx, DWORD PTR [ecx+160]
  006c4	89 94 05 f8 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+eax+8], edx

; 538  : 
; 539  : 		points[4].x = scene->bounding_box2.xmin;

  006cb	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  006d0	c1 e0 02	 shl	 eax, 2
  006d3	8b 4d f8	 mov	 ecx, DWORD PTR _scene$[ebp]
  006d6	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  006dc	89 94 05 f0 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+eax], edx

; 540  : 		points[4].y = scene->bounding_box2.ymin;

  006e3	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  006e8	c1 e0 02	 shl	 eax, 2
  006eb	8b 4d f8	 mov	 ecx, DWORD PTR _scene$[ebp]
  006ee	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  006f4	89 94 05 f4 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+eax+4], edx

; 541  : 		points[4].z = scene->bounding_box2.zmax;

  006fb	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00700	c1 e0 02	 shl	 eax, 2
  00703	8b 4d f8	 mov	 ecx, DWORD PTR _scene$[ebp]
  00706	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0070c	89 94 05 f8 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+eax+8], edx

; 542  : 
; 543  : 		points[5].x = scene->bounding_box2.xmax;

  00713	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00718	6b c8 05	 imul	 ecx, eax, 5
  0071b	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  0071e	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  00724	89 84 0d f0 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx], eax

; 544  : 		points[5].y = scene->bounding_box2.ymin;

  0072b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00730	6b c8 05	 imul	 ecx, eax, 5
  00733	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  00736	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  0073c	89 84 0d f4 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx+4], eax

; 545  : 		points[5].z = scene->bounding_box2.zmax;

  00743	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00748	6b c8 05	 imul	 ecx, eax, 5
  0074b	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  0074e	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00754	89 84 0d f8 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx+8], eax

; 546  : 
; 547  : 		points[7].x = scene->bounding_box2.xmin;

  0075b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00760	6b c8 07	 imul	 ecx, eax, 7
  00763	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  00766	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  0076c	89 84 0d f0 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx], eax

; 548  : 		points[7].y = scene->bounding_box2.ymax;

  00773	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00778	6b c8 07	 imul	 ecx, eax, 7
  0077b	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  0077e	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  00784	89 84 0d f4 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx+4], eax

; 549  : 		points[7].z = scene->bounding_box2.zmax;

  0078b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00790	6b c8 07	 imul	 ecx, eax, 7
  00793	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  00796	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  0079c	89 84 0d f8 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx+8], eax

; 550  : 
; 551  : 		points[6].x = scene->bounding_box2.xmax;

  007a3	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  007a8	6b c8 06	 imul	 ecx, eax, 6
  007ab	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  007ae	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  007b4	89 84 0d f0 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx], eax

; 552  : 		points[6].y = scene->bounding_box2.ymax;

  007bb	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  007c0	6b c8 06	 imul	 ecx, eax, 6
  007c3	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  007c6	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  007cc	89 84 0d f4 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx+4], eax

; 553  : 		points[6].z = scene->bounding_box2.zmax;

  007d3	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  007d8	6b c8 06	 imul	 ecx, eax, 6
  007db	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  007de	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  007e4	89 84 0d f8 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx+8], eax

; 554  : 
; 555  : 		transform_object_3d_points ( points, object_relative_position, 8 );

  007eb	6a 08		 push	 8
  007ed	8b 45 fc	 mov	 eax, DWORD PTR _object_relative_position$[ebp]
  007f0	50		 push	 eax
  007f1	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _points$1[ebp]
  007f7	51		 push	 ecx
  007f8	e8 00 00 00 00	 call	 ?transform_object_3d_points@@YGXPAUVERTEX@@PAUVEC3D@@H@Z ; transform_object_3d_points

; 556  : 
; 557  : 		//
; 558  : 		// Render the 12 lines
; 559  : 		//
; 560  : 
; 561  : 		render_bounding_box_line ( points, 0, 1, white_colour );

  007fd	8b 45 f4	 mov	 eax, DWORD PTR _white_colour$[ebp]
  00800	50		 push	 eax
  00801	6a 01		 push	 1
  00803	6a 00		 push	 0
  00805	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _points$1[ebp]
  0080b	51		 push	 ecx
  0080c	e8 00 00 00 00	 call	 ?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z ; render_bounding_box_line

; 562  : 		render_bounding_box_line ( points, 1, 2, white_colour );

  00811	8b 45 f4	 mov	 eax, DWORD PTR _white_colour$[ebp]
  00814	50		 push	 eax
  00815	6a 02		 push	 2
  00817	6a 01		 push	 1
  00819	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _points$1[ebp]
  0081f	51		 push	 ecx
  00820	e8 00 00 00 00	 call	 ?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z ; render_bounding_box_line

; 563  : 		render_bounding_box_line ( points, 2, 3, white_colour );

  00825	8b 45 f4	 mov	 eax, DWORD PTR _white_colour$[ebp]
  00828	50		 push	 eax
  00829	6a 03		 push	 3
  0082b	6a 02		 push	 2
  0082d	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _points$1[ebp]
  00833	51		 push	 ecx
  00834	e8 00 00 00 00	 call	 ?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z ; render_bounding_box_line

; 564  : 		render_bounding_box_line ( points, 3, 0, white_colour );

  00839	8b 45 f4	 mov	 eax, DWORD PTR _white_colour$[ebp]
  0083c	50		 push	 eax
  0083d	6a 00		 push	 0
  0083f	6a 03		 push	 3
  00841	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _points$1[ebp]
  00847	51		 push	 ecx
  00848	e8 00 00 00 00	 call	 ?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z ; render_bounding_box_line

; 565  : 
; 566  : 		render_bounding_box_line ( points, 4, 5, white_colour );

  0084d	8b 45 f4	 mov	 eax, DWORD PTR _white_colour$[ebp]
  00850	50		 push	 eax
  00851	6a 05		 push	 5
  00853	6a 04		 push	 4
  00855	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _points$1[ebp]
  0085b	51		 push	 ecx
  0085c	e8 00 00 00 00	 call	 ?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z ; render_bounding_box_line

; 567  : 		render_bounding_box_line ( points, 5, 6, white_colour );

  00861	8b 45 f4	 mov	 eax, DWORD PTR _white_colour$[ebp]
  00864	50		 push	 eax
  00865	6a 06		 push	 6
  00867	6a 05		 push	 5
  00869	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _points$1[ebp]
  0086f	51		 push	 ecx
  00870	e8 00 00 00 00	 call	 ?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z ; render_bounding_box_line

; 568  : 		render_bounding_box_line ( points, 6, 7, white_colour );

  00875	8b 45 f4	 mov	 eax, DWORD PTR _white_colour$[ebp]
  00878	50		 push	 eax
  00879	6a 07		 push	 7
  0087b	6a 06		 push	 6
  0087d	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _points$1[ebp]
  00883	51		 push	 ecx
  00884	e8 00 00 00 00	 call	 ?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z ; render_bounding_box_line

; 569  : 		render_bounding_box_line ( points, 7, 4, white_colour );

  00889	8b 45 f4	 mov	 eax, DWORD PTR _white_colour$[ebp]
  0088c	50		 push	 eax
  0088d	6a 04		 push	 4
  0088f	6a 07		 push	 7
  00891	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _points$1[ebp]
  00897	51		 push	 ecx
  00898	e8 00 00 00 00	 call	 ?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z ; render_bounding_box_line

; 570  : 
; 571  : 		render_bounding_box_line ( points, 0, 4, white_colour );

  0089d	8b 45 f4	 mov	 eax, DWORD PTR _white_colour$[ebp]
  008a0	50		 push	 eax
  008a1	6a 04		 push	 4
  008a3	6a 00		 push	 0
  008a5	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _points$1[ebp]
  008ab	51		 push	 ecx
  008ac	e8 00 00 00 00	 call	 ?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z ; render_bounding_box_line

; 572  : 		render_bounding_box_line ( points, 1, 5, white_colour );

  008b1	8b 45 f4	 mov	 eax, DWORD PTR _white_colour$[ebp]
  008b4	50		 push	 eax
  008b5	6a 05		 push	 5
  008b7	6a 01		 push	 1
  008b9	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _points$1[ebp]
  008bf	51		 push	 ecx
  008c0	e8 00 00 00 00	 call	 ?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z ; render_bounding_box_line

; 573  : 		render_bounding_box_line ( points, 2, 6, white_colour );

  008c5	8b 45 f4	 mov	 eax, DWORD PTR _white_colour$[ebp]
  008c8	50		 push	 eax
  008c9	6a 06		 push	 6
  008cb	6a 02		 push	 2
  008cd	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _points$1[ebp]
  008d3	51		 push	 ecx
  008d4	e8 00 00 00 00	 call	 ?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z ; render_bounding_box_line

; 574  : 		render_bounding_box_line ( points, 3, 7, white_colour );

  008d9	8b 45 f4	 mov	 eax, DWORD PTR _white_colour$[ebp]
  008dc	50		 push	 eax
  008dd	6a 07		 push	 7
  008df	6a 03		 push	 3
  008e1	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _points$1[ebp]
  008e7	51		 push	 ecx
  008e8	e8 00 00 00 00	 call	 ?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z ; render_bounding_box_line

; 575  : 
; 576  : 		//
; 577  : 		// Render the other bounding box
; 578  : 		//
; 579  : 
; 580  : 		points[0].x = scene->bounding_box.xmin;

  008ed	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  008f2	6b c8 00	 imul	 ecx, eax, 0
  008f5	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  008f8	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  008fb	89 84 0d f0 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx], eax

; 581  : 		points[0].y = scene->bounding_box.ymin;

  00902	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00907	6b c8 00	 imul	 ecx, eax, 0
  0090a	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  0090d	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  00913	89 84 0d f4 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx+4], eax

; 582  : 		points[0].z = scene->bounding_box.zmin;

  0091a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0091f	6b c8 00	 imul	 ecx, eax, 0
  00922	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  00925	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  0092b	89 84 0d f8 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx+8], eax

; 583  : 
; 584  : 		points[1].x = scene->bounding_box.xmax;

  00932	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00937	c1 e0 00	 shl	 eax, 0
  0093a	8b 4d f8	 mov	 ecx, DWORD PTR _scene$[ebp]
  0093d	8b 51 7c	 mov	 edx, DWORD PTR [ecx+124]
  00940	89 94 05 f0 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+eax], edx

; 585  : 		points[1].y = scene->bounding_box.ymin;

  00947	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0094c	c1 e0 00	 shl	 eax, 0
  0094f	8b 4d f8	 mov	 ecx, DWORD PTR _scene$[ebp]
  00952	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  00958	89 94 05 f4 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+eax+4], edx

; 586  : 		points[1].z = scene->bounding_box.zmin;

  0095f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00964	c1 e0 00	 shl	 eax, 0
  00967	8b 4d f8	 mov	 ecx, DWORD PTR _scene$[ebp]
  0096a	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00970	89 94 05 f8 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+eax+8], edx

; 587  : 
; 588  : 		points[3].x = scene->bounding_box.xmin;

  00977	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0097c	6b c8 03	 imul	 ecx, eax, 3
  0097f	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  00982	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00985	89 84 0d f0 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx], eax

; 589  : 		points[3].y = scene->bounding_box.ymax;

  0098c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00991	6b c8 03	 imul	 ecx, eax, 3
  00994	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  00997	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  0099d	89 84 0d f4 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx+4], eax

; 590  : 		points[3].z = scene->bounding_box.zmin;

  009a4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  009a9	6b c8 03	 imul	 ecx, eax, 3
  009ac	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  009af	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  009b5	89 84 0d f8 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx+8], eax

; 591  : 
; 592  : 		points[2].x = scene->bounding_box.xmax;

  009bc	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  009c1	d1 e0		 shl	 eax, 1
  009c3	8b 4d f8	 mov	 ecx, DWORD PTR _scene$[ebp]
  009c6	8b 51 7c	 mov	 edx, DWORD PTR [ecx+124]
  009c9	89 94 05 f0 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+eax], edx

; 593  : 		points[2].y = scene->bounding_box.ymax;

  009d0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  009d5	d1 e0		 shl	 eax, 1
  009d7	8b 4d f8	 mov	 ecx, DWORD PTR _scene$[ebp]
  009da	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  009e0	89 94 05 f4 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+eax+4], edx

; 594  : 		points[2].z = scene->bounding_box.zmin;

  009e7	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  009ec	d1 e0		 shl	 eax, 1
  009ee	8b 4d f8	 mov	 ecx, DWORD PTR _scene$[ebp]
  009f1	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  009f7	89 94 05 f8 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+eax+8], edx

; 595  : 
; 596  : 		points[4].x = scene->bounding_box.xmin;

  009fe	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a03	c1 e0 02	 shl	 eax, 2
  00a06	8b 4d f8	 mov	 ecx, DWORD PTR _scene$[ebp]
  00a09	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00a0c	89 94 05 f0 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+eax], edx

; 597  : 		points[4].y = scene->bounding_box.ymin;

  00a13	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a18	c1 e0 02	 shl	 eax, 2
  00a1b	8b 4d f8	 mov	 ecx, DWORD PTR _scene$[ebp]
  00a1e	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  00a24	89 94 05 f4 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+eax+4], edx

; 598  : 		points[4].z = scene->bounding_box.zmax;

  00a2b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a30	c1 e0 02	 shl	 eax, 2
  00a33	8b 4d f8	 mov	 ecx, DWORD PTR _scene$[ebp]
  00a36	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  00a3c	89 94 05 f8 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+eax+8], edx

; 599  : 
; 600  : 		points[5].x = scene->bounding_box.xmax;

  00a43	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a48	6b c8 05	 imul	 ecx, eax, 5
  00a4b	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  00a4e	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  00a51	89 84 0d f0 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx], eax

; 601  : 		points[5].y = scene->bounding_box.ymin;

  00a58	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a5d	6b c8 05	 imul	 ecx, eax, 5
  00a60	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  00a63	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  00a69	89 84 0d f4 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx+4], eax

; 602  : 		points[5].z = scene->bounding_box.zmax;

  00a70	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a75	6b c8 05	 imul	 ecx, eax, 5
  00a78	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  00a7b	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00a81	89 84 0d f8 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx+8], eax

; 603  : 
; 604  : 		points[7].x = scene->bounding_box.xmin;

  00a88	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00a8d	6b c8 07	 imul	 ecx, eax, 7
  00a90	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  00a93	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00a96	89 84 0d f0 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx], eax

; 605  : 		points[7].y = scene->bounding_box.ymax;

  00a9d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00aa2	6b c8 07	 imul	 ecx, eax, 7
  00aa5	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  00aa8	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  00aae	89 84 0d f4 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx+4], eax

; 606  : 		points[7].z = scene->bounding_box.zmax;

  00ab5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00aba	6b c8 07	 imul	 ecx, eax, 7
  00abd	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  00ac0	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00ac6	89 84 0d f8 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx+8], eax

; 607  : 
; 608  : 		points[6].x = scene->bounding_box.xmax;

  00acd	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00ad2	6b c8 06	 imul	 ecx, eax, 6
  00ad5	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  00ad8	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  00adb	89 84 0d f0 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx], eax

; 609  : 		points[6].y = scene->bounding_box.ymax;

  00ae2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00ae7	6b c8 06	 imul	 ecx, eax, 6
  00aea	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  00aed	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  00af3	89 84 0d f4 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx+4], eax

; 610  : 		points[6].z = scene->bounding_box.zmax;

  00afa	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00aff	6b c8 06	 imul	 ecx, eax, 6
  00b02	8b 55 f8	 mov	 edx, DWORD PTR _scene$[ebp]
  00b05	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00b0b	89 84 0d f8 fd
	ff ff		 mov	 DWORD PTR _points$1[ebp+ecx+8], eax

; 611  : 
; 612  : 		transform_object_3d_points ( points, object_relative_position, 8 );

  00b12	6a 08		 push	 8
  00b14	8b 45 fc	 mov	 eax, DWORD PTR _object_relative_position$[ebp]
  00b17	50		 push	 eax
  00b18	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _points$1[ebp]
  00b1e	51		 push	 ecx
  00b1f	e8 00 00 00 00	 call	 ?transform_object_3d_points@@YGXPAUVERTEX@@PAUVEC3D@@H@Z ; transform_object_3d_points

; 613  : 
; 614  : 		//
; 615  : 		// Render the 12 lines
; 616  : 		//
; 617  : 
; 618  : 		render_bounding_box_line ( points, 0, 1, red_colour );

  00b24	8b 45 f0	 mov	 eax, DWORD PTR _red_colour$[ebp]
  00b27	50		 push	 eax
  00b28	6a 01		 push	 1
  00b2a	6a 00		 push	 0
  00b2c	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _points$1[ebp]
  00b32	51		 push	 ecx
  00b33	e8 00 00 00 00	 call	 ?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z ; render_bounding_box_line

; 619  : 		render_bounding_box_line ( points, 1, 2, red_colour );

  00b38	8b 45 f0	 mov	 eax, DWORD PTR _red_colour$[ebp]
  00b3b	50		 push	 eax
  00b3c	6a 02		 push	 2
  00b3e	6a 01		 push	 1
  00b40	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _points$1[ebp]
  00b46	51		 push	 ecx
  00b47	e8 00 00 00 00	 call	 ?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z ; render_bounding_box_line

; 620  : 		render_bounding_box_line ( points, 2, 3, red_colour );

  00b4c	8b 45 f0	 mov	 eax, DWORD PTR _red_colour$[ebp]
  00b4f	50		 push	 eax
  00b50	6a 03		 push	 3
  00b52	6a 02		 push	 2
  00b54	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _points$1[ebp]
  00b5a	51		 push	 ecx
  00b5b	e8 00 00 00 00	 call	 ?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z ; render_bounding_box_line

; 621  : 		render_bounding_box_line ( points, 3, 0, red_colour );

  00b60	8b 45 f0	 mov	 eax, DWORD PTR _red_colour$[ebp]
  00b63	50		 push	 eax
  00b64	6a 00		 push	 0
  00b66	6a 03		 push	 3
  00b68	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _points$1[ebp]
  00b6e	51		 push	 ecx
  00b6f	e8 00 00 00 00	 call	 ?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z ; render_bounding_box_line

; 622  : 
; 623  : 		render_bounding_box_line ( points, 4, 5, red_colour );

  00b74	8b 45 f0	 mov	 eax, DWORD PTR _red_colour$[ebp]
  00b77	50		 push	 eax
  00b78	6a 05		 push	 5
  00b7a	6a 04		 push	 4
  00b7c	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _points$1[ebp]
  00b82	51		 push	 ecx
  00b83	e8 00 00 00 00	 call	 ?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z ; render_bounding_box_line

; 624  : 		render_bounding_box_line ( points, 5, 6, red_colour );

  00b88	8b 45 f0	 mov	 eax, DWORD PTR _red_colour$[ebp]
  00b8b	50		 push	 eax
  00b8c	6a 06		 push	 6
  00b8e	6a 05		 push	 5
  00b90	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _points$1[ebp]
  00b96	51		 push	 ecx
  00b97	e8 00 00 00 00	 call	 ?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z ; render_bounding_box_line

; 625  : 		render_bounding_box_line ( points, 6, 7, red_colour );

  00b9c	8b 45 f0	 mov	 eax, DWORD PTR _red_colour$[ebp]
  00b9f	50		 push	 eax
  00ba0	6a 07		 push	 7
  00ba2	6a 06		 push	 6
  00ba4	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _points$1[ebp]
  00baa	51		 push	 ecx
  00bab	e8 00 00 00 00	 call	 ?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z ; render_bounding_box_line

; 626  : 		render_bounding_box_line ( points, 7, 4, red_colour );

  00bb0	8b 45 f0	 mov	 eax, DWORD PTR _red_colour$[ebp]
  00bb3	50		 push	 eax
  00bb4	6a 04		 push	 4
  00bb6	6a 07		 push	 7
  00bb8	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _points$1[ebp]
  00bbe	51		 push	 ecx
  00bbf	e8 00 00 00 00	 call	 ?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z ; render_bounding_box_line

; 627  : 
; 628  : 		render_bounding_box_line ( points, 0, 4, red_colour );

  00bc4	8b 45 f0	 mov	 eax, DWORD PTR _red_colour$[ebp]
  00bc7	50		 push	 eax
  00bc8	6a 04		 push	 4
  00bca	6a 00		 push	 0
  00bcc	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _points$1[ebp]
  00bd2	51		 push	 ecx
  00bd3	e8 00 00 00 00	 call	 ?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z ; render_bounding_box_line

; 629  : 		render_bounding_box_line ( points, 1, 5, red_colour );

  00bd8	8b 45 f0	 mov	 eax, DWORD PTR _red_colour$[ebp]
  00bdb	50		 push	 eax
  00bdc	6a 05		 push	 5
  00bde	6a 01		 push	 1
  00be0	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _points$1[ebp]
  00be6	51		 push	 ecx
  00be7	e8 00 00 00 00	 call	 ?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z ; render_bounding_box_line

; 630  : 		render_bounding_box_line ( points, 2, 6, red_colour );

  00bec	8b 45 f0	 mov	 eax, DWORD PTR _red_colour$[ebp]
  00bef	50		 push	 eax
  00bf0	6a 06		 push	 6
  00bf2	6a 02		 push	 2
  00bf4	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _points$1[ebp]
  00bfa	51		 push	 ecx
  00bfb	e8 00 00 00 00	 call	 ?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z ; render_bounding_box_line

; 631  : 		render_bounding_box_line ( points, 3, 7, red_colour );

  00c00	8b 45 f0	 mov	 eax, DWORD PTR _red_colour$[ebp]
  00c03	50		 push	 eax
  00c04	6a 07		 push	 7
  00c06	6a 03		 push	 3
  00c08	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _points$1[ebp]
  00c0e	51		 push	 ecx
  00c0f	e8 00 00 00 00	 call	 ?render_bounding_box_line@@YGXPAUVERTEX@@HHUREAL_COLOUR@@@Z ; render_bounding_box_line

; 632  : 	}
; 633  : }

  00c14	5f		 pop	 edi
  00c15	5e		 pop	 esi
  00c16	5b		 pop	 ebx
  00c17	8b e5		 mov	 esp, ebp
  00c19	5d		 pop	 ebp
  00c1a	c2 04 00	 ret	 4
?draw_3d_object_bounding_box@@YGXPAUOBJECT_3D_INSTANCE@@@Z ENDP ; draw_3d_object_bounding_box
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobject.c
;	COMDAT ?pre_render_3d_object@@YGXPAUOBJECT_3D_INSTANCE@@@Z
_TEXT	SEGMENT
_count$1 = -12						; size = 4
_scene$ = -8						; size = 4
_object_number$ = -4					; size = 4
_obj$ = 8						; size = 4
?pre_render_3d_object@@YGXPAUOBJECT_3D_INSTANCE@@@Z PROC ; pre_render_3d_object, COMDAT

; 266  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 267  : 
; 268  : 	int
; 269  : 		object_number;
; 270  : 
; 271  : 	object_3d_scene_database_entry
; 272  : 		*scene;
; 273  : 
; 274  : 	//
; 275  : 	// Go through the object pre-loading the textures
; 276  : 	//
; 277  : 
; 278  : 	//
; 279  : 	// Set the scene pointer
; 280  : 	//
; 281  : 
; 282  : 	scene = &objects_3d_scene_database[obj->object_number];

  00009	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0000c	69 48 04 e0 00
	00 00		 imul	 ecx, DWORD PTR [eax+4], 224
  00013	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  00019	89 4d f8	 mov	 DWORD PTR _scene$[ebp], ecx

; 283  : 
; 284  : 	//
; 285  : 	// Set up the texture animations for this object.
; 286  : 	//
; 287  : 
; 288  : 	initialise_object_texture_animations ( obj );

  0001c	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ?initialise_object_texture_animations@@YGXPAUOBJECT_3D_INSTANCE@@@Z ; initialise_object_texture_animations

; 289  : 
; 290  : 	//
; 291  : 	// Set up the object drawing global variables
; 292  : 	//
; 293  : 
; 294  : 	current_object_3d_light_maps_enabled = obj->object_internal_lighting;

  00025	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00028	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0002b	c1 e9 03	 shr	 ecx, 3
  0002e	83 e1 01	 and	 ecx, 1
  00031	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_light_maps_enabled@@3HA, ecx ; current_object_3d_light_maps_enabled

; 295  : 
; 296  : 	//
; 297  : 	// Get the object number
; 298  : 	//
; 299  : 
; 300  : 	object_number = get_object_approximation_number ( obj->object_number, obj->view_position.z, &object_3d_approximation_level );

  00037	68 00 00 00 00	 push	 OFFSET ?object_3d_approximation_level@@3HA ; object_3d_approximation_level
  0003c	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0003f	51		 push	 ecx
  00040	f3 0f 10 40 40	 movss	 xmm0, DWORD PTR [eax+64]
  00045	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0004d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?get_object_approximation_number@@YGHHMPAH@Z ; get_object_approximation_number
  00056	89 45 fc	 mov	 DWORD PTR _object_number$[ebp], eax

; 301  : 
; 302  : 	if ( objects_3d_data[object_number].number_of_points )

  00059	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  0005d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00063	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  00067	85 d2		 test	 edx, edx
  00069	74 09		 je	 SHORT $LN5@pre_render

; 303  : 	{
; 304  : 
; 305  : 		pre_render_object_faces ( object_number );

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _object_number$[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ?pre_render_object_faces@@YGXH@Z ; pre_render_object_faces
$LN5@pre_render:

; 306  : 	}
; 307  : 
; 308  : 	//
; 309  : 	// Recurse down any sub objects
; 310  : 	//
; 311  : 
; 312  : 	if ( scene->number_of_sub_objects )

  00074	8b 45 f8	 mov	 eax, DWORD PTR _scene$[ebp]
  00077	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  0007e	0f 84 87 00 00
	00		 je	 $LN3@pre_render

; 313  : 	{
; 314  : 
; 315  : 		int
; 316  : 			count;
; 317  : 
; 318  : 		for ( count = ( scene->number_of_sub_objects -1 ); count >= 0; count-- )

  00084	8b 45 f8	 mov	 eax, DWORD PTR _scene$[ebp]
  00087	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0008d	83 e9 01	 sub	 ecx, 1
  00090	89 4d f4	 mov	 DWORD PTR _count$1[ebp], ecx
  00093	eb 09		 jmp	 SHORT $LN4@pre_render
$LN2@pre_render:
  00095	8b 45 f4	 mov	 eax, DWORD PTR _count$1[ebp]
  00098	83 e8 01	 sub	 eax, 1
  0009b	89 45 f4	 mov	 DWORD PTR _count$1[ebp], eax
$LN4@pre_render:
  0009e	83 7d f4 00	 cmp	 DWORD PTR _count$1[ebp], 0
  000a2	7c 67		 jl	 SHORT $LN3@pre_render

; 319  : 		{
; 320  : 
; 321  : 			if (	( obj->sub_objects[count].visible_object ) &&
; 322  : 					( scene->sub_objects[count].sub_object_approximation_in_level <= object_3d_approximation_level ) &&

  000a4	6b 45 f4 30	 imul	 eax, DWORD PTR _count$1[ebp], 48
  000a8	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  000ab	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  000ae	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  000b2	83 e0 01	 and	 eax, 1
  000b5	74 52		 je	 SHORT $LN7@pre_render
  000b7	6b 45 f4 38	 imul	 eax, DWORD PTR _count$1[ebp], 56
  000bb	8b 4d f8	 mov	 ecx, DWORD PTR _scene$[ebp]
  000be	8b 91 d8 00 00
	00		 mov	 edx, DWORD PTR [ecx+216]
  000c4	0f b6 44 02 05	 movzx	 eax, BYTE PTR [edx+eax+5]
  000c9	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?object_3d_approximation_level@@3HA ; object_3d_approximation_level
  000cf	7f 38		 jg	 SHORT $LN7@pre_render
  000d1	6b 45 f4 38	 imul	 eax, DWORD PTR _count$1[ebp], 56
  000d5	8b 4d f8	 mov	 ecx, DWORD PTR _scene$[ebp]
  000d8	8b 91 d8 00 00
	00		 mov	 edx, DWORD PTR [ecx+216]
  000de	0f b6 44 02 06	 movzx	 eax, BYTE PTR [edx+eax+6]
  000e3	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?object_3d_approximation_level@@3HA ; object_3d_approximation_level
  000e9	7c 1e		 jl	 SHORT $LN7@pre_render

; 323  : 					( scene->sub_objects[count].sub_object_approximation_out_level >= object_3d_approximation_level ) )
; 324  : 			{
; 325  : 
; 326  : 				pre_render_sub_object ( &obj->sub_objects[count], &scene->sub_objects[count] );

  000eb	6b 45 f4 38	 imul	 eax, DWORD PTR _count$1[ebp], 56
  000ef	8b 4d f8	 mov	 ecx, DWORD PTR _scene$[ebp]
  000f2	03 81 d8 00 00
	00		 add	 eax, DWORD PTR [ecx+216]
  000f8	50		 push	 eax
  000f9	6b 55 f4 30	 imul	 edx, DWORD PTR _count$1[ebp], 48
  000fd	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00100	03 50 58	 add	 edx, DWORD PTR [eax+88]
  00103	52		 push	 edx
  00104	e8 00 00 00 00	 call	 ?pre_render_sub_object@@YGXPAUOBJECT_3D_SUB_INSTANCE@@PAUOBJECT_3D_DATABASE_ENTRY@@@Z ; pre_render_sub_object
$LN7@pre_render:

; 327  : 			}
; 328  : 		}

  00109	eb 8a		 jmp	 SHORT $LN2@pre_render
$LN3@pre_render:

; 329  : 	}
; 330  : }

  0010b	5f		 pop	 edi
  0010c	5e		 pop	 esi
  0010d	5b		 pop	 ebx
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c2 04 00	 ret	 4
?pre_render_3d_object@@YGXPAUOBJECT_3D_INSTANCE@@@Z ENDP ; pre_render_3d_object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobject.c
;	COMDAT ?get_3d_object_approximation_number@@YGHPAUOBJECT_3D_INSTANCE@@@Z
_TEXT	SEGMENT
_pos$ = -4						; size = 4
_obj$ = 8						; size = 4
?get_3d_object_approximation_number@@YGHPAUOBJECT_3D_INSTANCE@@@Z PROC ; get_3d_object_approximation_number, COMDAT

; 241  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 242  : 
; 243  : 	vec3d
; 244  : 		*pos;
; 245  : 	
; 246  : 	//
; 247  : 	// Calculate the object's position relative to the view.
; 248  : 	//
; 249  : 
; 250  : 	pos = &obj->view_position;	//rel_vp.position;

  00009	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0000c	83 c0 38	 add	 eax, 56			; 00000038H
  0000f	89 45 fc	 mov	 DWORD PTR _pos$[ebp], eax

; 251  : 
; 252  : 	//
; 253  : 	// Get the object number
; 254  : 	//
; 255  : 
; 256  : 	get_object_approximation_number ( obj->object_number, pos->z, &object_3d_approximation_level );

  00012	68 00 00 00 00	 push	 OFFSET ?object_3d_approximation_level@@3HA ; object_3d_approximation_level
  00017	8b 45 fc	 mov	 eax, DWORD PTR _pos$[ebp]
  0001a	51		 push	 ecx
  0001b	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00020	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00025	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00028	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 ?get_object_approximation_number@@YGHHMPAH@Z ; get_object_approximation_number

; 257  : 
; 258  : 	return ( object_3d_approximation_level );

  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_3d_approximation_level@@3HA ; object_3d_approximation_level

; 259  : }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?get_3d_object_approximation_number@@YGHPAUOBJECT_3D_INSTANCE@@@Z ENDP ; get_3d_object_approximation_number
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobject.c
;	COMDAT ?apply_object_3d_reflection_texture_map@@YGXXZ
_TEXT	SEGMENT
?apply_object_3d_reflection_texture_map@@YGXXZ PROC	; apply_object_3d_reflection_texture_map, COMDAT

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 233  : 	current_object_3d_reflection_texture_map = get_system_texture_ptr ( current_object_3d_reflection_texture_map_index );

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_reflection_texture_map_index@@3HA
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?get_system_texture_ptr@@YGPAUSCREEN@@H@Z ; get_system_texture_ptr
  00014	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_reflection_texture_map@@3PAUSCREEN@@A, eax ; current_object_3d_reflection_texture_map

; 234  : }

  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?apply_object_3d_reflection_texture_map@@YGXXZ ENDP	; apply_object_3d_reflection_texture_map
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobject.c
;	COMDAT ?set_object_3d_reflection_texture_map@@YGXH@Z
_TEXT	SEGMENT
_texture_index$ = 8					; size = 4
?set_object_3d_reflection_texture_map@@YGXH@Z PROC	; set_object_3d_reflection_texture_map, COMDAT

; 227  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 228  : 	current_object_3d_reflection_texture_map_index = texture_index;

  00009	8b 45 08	 mov	 eax, DWORD PTR _texture_index$[ebp]
  0000c	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_reflection_texture_map_index@@3HA, eax

; 229  : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?set_object_3d_reflection_texture_map@@YGXH@Z ENDP	; set_object_3d_reflection_texture_map
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobject.c
;	COMDAT ?initialise_object_3d_lookup_tables@@YGXXZ
_TEXT	SEGMENT
_pitch$1 = -12						; size = 4
_heading$2 = -8						; size = 4
_count$ = -4						; size = 4
?initialise_object_3d_lookup_tables@@YGXXZ PROC		; initialise_object_3d_lookup_tables, COMDAT

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 191  : 
; 192  : 	int
; 193  : 		count;
; 194  : 
; 195  : 	for ( count = 0; count < 256; count++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@initialise:
  0001b	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _count$[ebp], 256 ; 00000100H
  00022	0f 8d f5 00 00
	00		 jge	 $LN3@initialise

; 196  : 	{
; 197  : 
; 198  : 		float
; 199  : 			heading,
; 200  : 			pitch;
; 201  : 
; 202  : 		heading = count;

  00028	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _count$[ebp]
  0002d	f3 0f 11 45 f8	 movss	 DWORD PTR _heading$2[ebp], xmm0

; 203  : 		pitch = count;

  00032	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _count$[ebp]
  00037	f3 0f 11 45 f4	 movss	 DWORD PTR _pitch$1[ebp], xmm0

; 204  : 
; 205  : 		heading /= 256.0;

  0003c	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _heading$2[ebp]
  00041	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4070000000000000
  00049	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0004d	f3 0f 11 45 f8	 movss	 DWORD PTR _heading$2[ebp], xmm0

; 206  : 		pitch /= 256.0;

  00052	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _pitch$1[ebp]
  00057	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4070000000000000
  0005f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00063	f3 0f 11 45 f4	 movss	 DWORD PTR _pitch$1[ebp], xmm0

; 207  : 
; 208  : 		heading *= PI2;

  00068	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _heading$2[ebp]
  0006d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40c90fdb
  00075	f3 0f 11 45 f8	 movss	 DWORD PTR _heading$2[ebp], xmm0

; 209  : 		pitch *= PI;

  0007a	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _pitch$1[ebp]
  0007f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40490fdb
  00087	f3 0f 11 45 f4	 movss	 DWORD PTR _pitch$1[ebp], xmm0

; 210  : 
; 211  : 		heading -= PI;

  0008c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _heading$2[ebp]
  00091	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40490fdb
  00099	f3 0f 11 45 f8	 movss	 DWORD PTR _heading$2[ebp], xmm0

; 212  : 		pitch -= ( PI/2 );

  0009e	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _pitch$1[ebp]
  000a3	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3fc90fdb
  000ab	f3 0f 11 45 f4	 movss	 DWORD PTR _pitch$1[ebp], xmm0

; 213  : 
; 214  : 		object_3d_sin_heading[count] = sin ( heading );

  000b0	51		 push	 ecx
  000b1	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _heading$2[ebp]
  000b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bb	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  000c0	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000c3	d9 1c 85 00 00
	00 00		 fstp	 DWORD PTR ?object_3d_sin_heading@@3PAMA[eax*4]

; 215  : 		object_3d_cos_heading[count] = cos ( heading );

  000ca	51		 push	 ecx
  000cb	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _heading$2[ebp]
  000d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d5	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  000da	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000dd	d9 1c 85 00 00
	00 00		 fstp	 DWORD PTR ?object_3d_cos_heading@@3PAMA[eax*4]

; 216  : 
; 217  : 		object_3d_sin_pitch[count] = sin ( pitch );

  000e4	51		 push	 ecx
  000e5	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _pitch$1[ebp]
  000ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ef	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  000f4	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000f7	d9 1c 85 00 00
	00 00		 fstp	 DWORD PTR ?object_3d_sin_pitch@@3PAMA[eax*4]

; 218  : 		object_3d_cos_pitch[count] = cos ( pitch );

  000fe	51		 push	 ecx
  000ff	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _pitch$1[ebp]
  00104	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00109	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  0010e	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00111	d9 1c 85 00 00
	00 00		 fstp	 DWORD PTR ?object_3d_cos_pitch@@3PAMA[eax*4]

; 219  : 	}

  00118	e9 f5 fe ff ff	 jmp	 $LN2@initialise
$LN3@initialise:

; 220  : }

  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	5b		 pop	 ebx
  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c3		 ret	 0
?initialise_object_3d_lookup_tables@@YGXXZ ENDP		; initialise_object_3d_lookup_tables
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\fpu.h
;	COMDAT ?asm_convert_float_to_int@@YGXMPAH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_integer$ = 12						; size = 4
?asm_convert_float_to_int@@YGXMPAH@Z PROC		; asm_convert_float_to_int, COMDAT

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 131  : 
; 132  : 	__asm
; 133  : 	{
; 134  : 
; 135  : 		fld value

  00009	d9 45 08	 fld	 DWORD PTR _value$[ebp]

; 136  : 		mov edx, integer

  0000c	8b 55 0c	 mov	 edx, DWORD PTR _integer$[ebp]

; 137  : 		fistp dword ptr [edx]

  0000f	db 1a		 fistp	 DWORD PTR [edx]

; 138  : 	}
; 139  : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?asm_convert_float_to_int@@YGXMPAH@Z ENDP		; asm_convert_float_to_int
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sqrt@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sqrt@@YGMM@Z PROC					; sqrt, COMDAT

; 294  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 295  : 	return (_CSTD sqrtf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sqrtf
  00019	83 c4 04	 add	 esp, 4

; 296  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sqrt@@YGMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sin@@YGMM@Z PROC					; sin, COMDAT

; 284  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 285  : 	return (_CSTD sinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sinf
  00019	83 c4 04	 add	 esp, 4

; 286  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sin@@YGMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fabs@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?fabs@@YGMM@Z PROC					; fabs, COMDAT

; 112  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 113  : 	return (_CSTD fabsf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _fabsf
  00019	83 c4 04	 add	 esp, 4

; 114  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?fabs@@YGMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?cos@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?cos@@YGMM@Z PROC					; cos, COMDAT

; 77   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 78   : 	return (_CSTD cosf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _cosf
  00019	83 c4 04	 add	 esp, 4

; 79   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?cos@@YGMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 760  :             return (float)sqrt(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sqrt
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 761  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 750  :             return (float)sin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 751  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 671  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 672  :             return (float)fabs(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _fabs
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 673  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 648  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 649  :             return (float)cos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _cos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 650  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
END
