; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\mobile\mb_tgt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_sqrtf
PUBLIC	?sqrt@@YGMM@Z					; sqrt
PUBLIC	?check_entity_line_of_sight@@YGHPAUENTITY@@0W4MOBILE_LOS_CHECK_CRITERIA@@@Z ; check_entity_line_of_sight
PUBLIC	?check_position_line_of_sight@@YGHPAUENTITY@@0PAUVEC3D@@1W4MOBILE_LOS_CHECK_CRITERIA@@@Z ; check_position_line_of_sight
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??check_entity_line_of_sight@@YGHPAUENTITY@@0W4MOBILE_LOS_CHECK_CRITERIA@@@Z@4JA ; `check_entity_line_of_sight'::`1'::__LINE__Var
PUBLIC	??_C@_0ED@OAHEMDAJ@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_06OEKOLKIL@source@			; `string'
PUBLIC	??_C@_06JJLAMBGK@target@			; `string'
PUBLIC	?__LINE__Var@?0??check_position_line_of_sight@@YGHPAUENTITY@@0PAUVEC3D@@1W4MOBILE_LOS_CHECK_CRITERIA@@@Z@4JA ; `check_position_line_of_sight'::`1'::__LINE__Var
PUBLIC	??_C@_0BA@IIPCKJML@source_position@		; `string'
PUBLIC	??_C@_0BA@NENIEICJ@target_position@		; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	__real@3f800000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@41000000
PUBLIC	__real@41c00000
PUBLIC	__real@42200000
PUBLIC	__real@43100000
PUBLIC	__real@43480000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	_memset:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_sqrt:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?normalise_3d_vector@@YGMPAUVEC3D@@@Z:PROC	; normalise_3d_vector
EXTRN	?get_sqr_3d_range@@YGMPBUVEC3D@@0@Z:PROC	; get_sqr_3d_range
EXTRN	?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z:PROC ; get_3d_terrain_point_data
EXTRN	?get_3d_terrain_point_data_elevation@@YGMPAUTERRAIN_3D_POINT_DATA@@@Z:PROC ; get_3d_terrain_point_data_elevation
EXTRN	?get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU1@0PAUVEC3D@@111@Z:PROC ; get_line_of_sight_collision_entity
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA:BYTE ; fn_get_local_entity_vec3d_ptr
EXTRN	__fltused:DWORD
;	COMDAT __real@43480000
CONST	SEGMENT
__real@43480000 DD 043480000r			; 200
CONST	ENDS
;	COMDAT __real@43100000
CONST	SEGMENT
__real@43100000 DD 043100000r			; 144
CONST	ENDS
;	COMDAT __real@42200000
CONST	SEGMENT
__real@42200000 DD 042200000r			; 40
CONST	ENDS
;	COMDAT __real@41c00000
CONST	SEGMENT
__real@41c00000 DD 041c00000r			; 24
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NENIEICJ@target_position@
CONST	SEGMENT
??_C@_0BA@NENIEICJ@target_position@ DB 'target_position', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IIPCKJML@source_position@
CONST	SEGMENT
??_C@_0BA@IIPCKJML@source_position@ DB 'source_position', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??check_position_line_of_sight@@YGHPAUENTITY@@0PAUVEC3D@@1W4MOBILE_LOS_CHECK_CRITERIA@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??check_position_line_of_sight@@YGHPAUENTITY@@0PAUVEC3D@@1W4MOBILE_LOS_CHECK_CRITERIA@@@Z@4JA DD 083H ; `check_position_line_of_sight'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06JJLAMBGK@target@
CONST	SEGMENT
??_C@_06JJLAMBGK@target@ DB 'target', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEKOLKIL@source@
CONST	SEGMENT
??_C@_06OEKOLKIL@source@ DB 'source', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@OAHEMDAJ@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0ED@OAHEMDAJ@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\mobile\mb_tgt.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??check_entity_line_of_sight@@YGHPAUENTITY@@0W4MOBILE_LOS_CHECK_CRITERIA@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??check_entity_line_of_sight@@YGHPAUENTITY@@0W4MOBILE_LOS_CHECK_CRITERIA@@@Z@4JA DD 06eH ; `check_entity_line_of_sight'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\mb_tgt.c
;	COMDAT ?check_position_line_of_sight@@YGHPAUENTITY@@0PAUVEC3D@@1W4MOBILE_LOS_CHECK_CRITERIA@@@Z
_TEXT	SEGMENT
$T1 = -196						; size = 4
$T2 = -192						; size = 4
_terrain_info$ = -124					; size = 44
_terrain_elevation$ = -80				; size = 4
_number_of_terrain_checks$ = -76			; size = 4
_collision_distance$ = -72				; size = 4
_target_range$ = -68					; size = 4
_direction$ = -64					; size = 12
_check_position$ = -52					; size = 12
_normal$ = -40						; size = 12
_collision_point$ = -28					; size = 12
_increment$ = -16					; size = 12
_collision_en$ = -4					; size = 4
_source$ = 8						; size = 4
_target$ = 12						; size = 4
_source_position$ = 16					; size = 4
_target_position$ = 20					; size = 4
_criteria$ = 24						; size = 4
?check_position_line_of_sight@@YGHPAUENTITY@@0PAUVEC3D@@1W4MOBILE_LOS_CHECK_CRITERIA@@@Z PROC ; check_position_line_of_sight, COMDAT

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 132  : 
; 133  : 	entity
; 134  : 		*collision_en;
; 135  : 
; 136  : 	vec3d
; 137  : 		increment,
; 138  : 		collision_point,
; 139  : 		normal,
; 140  : 		#if LINE_DEBUG_MODULE
; 141  : 		old_position,
; 142  : 		#endif
; 143  : 		check_position,
; 144  : 		direction;
; 145  : 
; 146  : 	float
; 147  : 		target_range,
; 148  : 		collision_distance,
; 149  : 		number_of_terrain_checks,
; 150  : 		terrain_elevation;
; 151  : 
; 152  : 	terrain_3d_point_data
; 153  : 		terrain_info;
; 154  : 
; 155  : 	ASSERT (source);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _source$[ebp], 0
  00010	75 18		 jne	 SHORT $LN8@check_posi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??check_position_line_of_sight@@YGHPAUENTITY@@0PAUVEC3D@@1W4MOBILE_LOS_CHECK_CRITERIA@@@Z@4JA
  00017	83 c0 18	 add	 eax, 24			; 00000018H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@OAHEMDAJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06OEKOLKIL@source@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@check_posi:

; 156  : 
; 157  : 	ASSERT (target);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN9@check_posi
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??check_position_line_of_sight@@YGHPAUENTITY@@0PAUVEC3D@@1W4MOBILE_LOS_CHECK_CRITERIA@@@Z@4JA
  00035	83 c0 1a	 add	 eax, 26			; 0000001aH
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@OAHEMDAJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@check_posi:

; 158  : 
; 159  : 	ASSERT (source_position);

  00048	83 7d 10 00	 cmp	 DWORD PTR _source_position$[ebp], 0
  0004c	75 18		 jne	 SHORT $LN10@check_posi
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??check_position_line_of_sight@@YGHPAUENTITY@@0PAUVEC3D@@1W4MOBILE_LOS_CHECK_CRITERIA@@@Z@4JA
  00053	83 c0 1c	 add	 eax, 28			; 0000001cH
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@OAHEMDAJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IIPCKJML@source_position@
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@check_posi:

; 160  : 
; 161  : 	ASSERT (target_position);

  00066	83 7d 14 00	 cmp	 DWORD PTR _target_position$[ebp], 0
  0006a	75 18		 jne	 SHORT $LN11@check_posi
  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??check_position_line_of_sight@@YGHPAUENTITY@@0PAUVEC3D@@1W4MOBILE_LOS_CHECK_CRITERIA@@@Z@4JA
  00071	83 c0 1e	 add	 eax, 30			; 0000001eH
  00074	50		 push	 eax
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@OAHEMDAJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@NENIEICJ@target_position@
  0007f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN11@check_posi:

; 162  : 
; 163  : 	direction.x = target_position->x - source_position->x;

  00084	8b 45 14	 mov	 eax, DWORD PTR _target_position$[ebp]
  00087	8b 4d 10	 mov	 ecx, DWORD PTR _source_position$[ebp]
  0008a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0008e	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00092	f3 0f 11 45 c0	 movss	 DWORD PTR _direction$[ebp], xmm0

; 164  : 	direction.y = target_position->y - source_position->y;

  00097	8b 45 14	 mov	 eax, DWORD PTR _target_position$[ebp]
  0009a	8b 4d 10	 mov	 ecx, DWORD PTR _source_position$[ebp]
  0009d	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000a2	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  000a7	f3 0f 11 45 c4	 movss	 DWORD PTR _direction$[ebp+4], xmm0

; 165  : 	direction.z = target_position->z - source_position->z;

  000ac	8b 45 14	 mov	 eax, DWORD PTR _target_position$[ebp]
  000af	8b 4d 10	 mov	 ecx, DWORD PTR _source_position$[ebp]
  000b2	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000b7	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  000bc	f3 0f 11 45 c8	 movss	 DWORD PTR _direction$[ebp+8], xmm0

; 166  : 
; 167  : 	target_range = sqrt ((direction.x * direction.x) + (direction.z * direction.z));

  000c1	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _direction$[ebp]
  000c6	f3 0f 59 45 c0	 mulss	 xmm0, DWORD PTR _direction$[ebp]
  000cb	f3 0f 10 4d c8	 movss	 xmm1, DWORD PTR _direction$[ebp+8]
  000d0	f3 0f 59 4d c8	 mulss	 xmm1, DWORD PTR _direction$[ebp+8]
  000d5	f3 0f 58 c1	 addss	 xmm0, xmm1
  000d9	51		 push	 ecx
  000da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000df	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  000e4	d9 5d bc	 fstp	 DWORD PTR _target_range$[ebp]

; 168  : 
; 169  : 	normalise_3d_vector (&direction);

  000e7	8d 45 c0	 lea	 eax, DWORD PTR _direction$[ebp]
  000ea	50		 push	 eax
  000eb	e8 00 00 00 00	 call	 ?normalise_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_3d_vector
  000f0	dd d8		 fstp	 ST(0)

; 170  : 	
; 171  : 	////////////////////////////////////////////////////////////////
; 172  : 	// COARSE line of sight check with terrain
; 173  : 	////////////////////////////////////////////////////////////////
; 174  : 
; 175  : 	if (criteria &	MOBILE_LOS_CHECK_COURSE_TERRAIN)

  000f2	8b 45 18	 mov	 eax, DWORD PTR _criteria$[ebp]
  000f5	83 e0 01	 and	 eax, 1
  000f8	0f 84 02 01 00
	00		 je	 $LN3@check_posi

; 176  : 	{
; 177  : 		number_of_terrain_checks = target_range / LOS_COARSE_CHECK_DISTANCE;

  000fe	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _target_range$[ebp]
  00103	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@43480000
  0010b	f3 0f 11 45 b4	 movss	 DWORD PTR _number_of_terrain_checks$[ebp], xmm0

; 178  : 	
; 179  : 		increment.x = direction.x * LOS_COARSE_CHECK_DISTANCE;

  00110	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _direction$[ebp]
  00115	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@43480000
  0011d	f3 0f 11 45 f0	 movss	 DWORD PTR _increment$[ebp], xmm0

; 180  : 		increment.y = direction.y * LOS_COARSE_CHECK_DISTANCE;

  00122	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _direction$[ebp+4]
  00127	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@43480000
  0012f	f3 0f 11 45 f4	 movss	 DWORD PTR _increment$[ebp+4], xmm0

; 181  : 		increment.z = direction.z * LOS_COARSE_CHECK_DISTANCE;

  00134	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _direction$[ebp+8]
  00139	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@43480000
  00141	f3 0f 11 45 f8	 movss	 DWORD PTR _increment$[ebp+8], xmm0

; 182  : 	
; 183  : 		check_position = *source_position;

  00146	8b 45 10	 mov	 eax, DWORD PTR _source_position$[ebp]
  00149	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014b	89 4d cc	 mov	 DWORD PTR _check_position$[ebp], ecx
  0014e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00151	89 55 d0	 mov	 DWORD PTR _check_position$[ebp+4], edx
  00154	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00157	89 45 d4	 mov	 DWORD PTR _check_position$[ebp+8], eax

; 184  : 	
; 185  : 		memset (&terrain_info, 0, sizeof (terrain_3d_point_data));

  0015a	6a 2c		 push	 44			; 0000002cH
  0015c	6a 00		 push	 0
  0015e	8d 45 84	 lea	 eax, DWORD PTR _terrain_info$[ebp]
  00161	50		 push	 eax
  00162	e8 00 00 00 00	 call	 _memset
  00167	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@check_posi:

; 186  : 	
; 187  : 		while (number_of_terrain_checks > 1.0)

  0016a	f3 0f 5a 45 b4	 cvtss2sd xmm0, DWORD PTR _number_of_terrain_checks$[ebp]
  0016f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  00177	0f 86 83 00 00
	00		 jbe	 $LN3@check_posi

; 188  : 		{
; 189  : 			#if LINE_DEBUG_MODULE
; 190  : 	
; 191  : 			old_position = check_position;
; 192  : 	
; 193  : 			#endif
; 194  : 	
; 195  : 			check_position.x += increment.x;

  0017d	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _check_position$[ebp]
  00182	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _increment$[ebp]
  00187	f3 0f 11 45 cc	 movss	 DWORD PTR _check_position$[ebp], xmm0

; 196  : 			check_position.y += increment.y;

  0018c	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _check_position$[ebp+4]
  00191	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _increment$[ebp+4]
  00196	f3 0f 11 45 d0	 movss	 DWORD PTR _check_position$[ebp+4], xmm0

; 197  : 			check_position.z += increment.z;

  0019b	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _check_position$[ebp+8]
  001a0	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _increment$[ebp+8]
  001a5	f3 0f 11 45 d4	 movss	 DWORD PTR _check_position$[ebp+8], xmm0

; 198  : 	
; 199  : 			get_3d_terrain_point_data (check_position.x, check_position.z, &terrain_info);

  001aa	8d 45 84	 lea	 eax, DWORD PTR _terrain_info$[ebp]
  001ad	50		 push	 eax
  001ae	51		 push	 ecx
  001af	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _check_position$[ebp+8]
  001b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b9	51		 push	 ecx
  001ba	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _check_position$[ebp]
  001bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c4	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  001c9	dd d8		 fstp	 ST(0)

; 200  : 	
; 201  : 			terrain_elevation = get_3d_terrain_point_data_elevation (&terrain_info);

  001cb	8d 45 84	 lea	 eax, DWORD PTR _terrain_info$[ebp]
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data_elevation@@YGMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data_elevation
  001d4	d9 5d b0	 fstp	 DWORD PTR _terrain_elevation$[ebp]

; 202  : 	
; 203  : 			if (terrain_elevation > check_position.y)

  001d7	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _terrain_elevation$[ebp]
  001dc	0f 2f 45 d0	 comiss	 xmm0, DWORD PTR _check_position$[ebp+4]
  001e0	76 07		 jbe	 SHORT $LN13@check_posi

; 204  : 			{
; 205  : 	
; 206  : 				#if TEXT_DEBUG_MODULE
; 207  : 	
; 208  : 				debug_log ("MB_TGT: (%s -> %s) failed COURSE terrain LOS", get_local_entity_string (source, STRING_TYPE_FULL_NAME), get_local_entity_string (target, STRING_TYPE_FULL_NAME));
; 209  : 	
; 210  : 				#endif
; 211  : 	
; 212  : 				return FALSE;

  001e2	33 c0		 xor	 eax, eax
  001e4	e9 99 03 00 00	 jmp	 $LN1@check_posi
$LN13@check_posi:

; 213  : 			}
; 214  : 	
; 215  : 			#if LINE_DEBUG_MODULE
; 216  : 	
; 217  : 			create_debug_3d_line (&old_position, &check_position, sys_col_yellow, 10.0);
; 218  : 	
; 219  : 			#endif
; 220  : 	
; 221  : 			number_of_terrain_checks --;

  001e9	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _number_of_terrain_checks$[ebp]
  001ee	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  001f6	f3 0f 11 45 b4	 movss	 DWORD PTR _number_of_terrain_checks$[ebp], xmm0

; 222  : 		}

  001fb	e9 6a ff ff ff	 jmp	 $LN2@check_posi
$LN3@check_posi:

; 223  : 	}
; 224  : 	
; 225  : 	////////////////////////////////////////////////////////////////
; 226  : 	// SOURCE END FINE line of sight check with terrain
; 227  : 	////////////////////////////////////////////////////////////////
; 228  : 
; 229  : 	if (criteria &	MOBILE_LOS_CHECK_SOURCE_END_TERRAIN)

  00200	8b 45 18	 mov	 eax, DWORD PTR _criteria$[ebp]
  00203	83 e0 02	 and	 eax, 2
  00206	0f 84 1b 01 00
	00		 je	 $LN5@check_posi

; 230  : 	{
; 231  : 		number_of_terrain_checks = target_range / LOS_FINE_CHECK_DISTANCE_SOURCE_END;

  0020c	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _target_range$[ebp]
  00211	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42200000
  00219	f3 0f 11 45 b4	 movss	 DWORD PTR _number_of_terrain_checks$[ebp], xmm0

; 232  : 	
; 233  : 		number_of_terrain_checks = min (number_of_terrain_checks, LOS_NUMBER_OF_FINE_CHECKS_SOURCE_END);

  0021e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  00226	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR $T2[ebp], xmm0
  0022e	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00234	50		 push	 eax
  00235	8d 4d b4	 lea	 ecx, DWORD PTR _number_of_terrain_checks$[ebp]
  00238	51		 push	 ecx
  00239	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  0023e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00242	f3 0f 11 45 b4	 movss	 DWORD PTR _number_of_terrain_checks$[ebp], xmm0

; 234  : 	
; 235  : 		increment.x = direction.x * LOS_FINE_CHECK_DISTANCE_SOURCE_END;

  00247	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _direction$[ebp]
  0024c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42200000
  00254	f3 0f 11 45 f0	 movss	 DWORD PTR _increment$[ebp], xmm0

; 236  : 		increment.y = direction.y * LOS_FINE_CHECK_DISTANCE_SOURCE_END;

  00259	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _direction$[ebp+4]
  0025e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42200000
  00266	f3 0f 11 45 f4	 movss	 DWORD PTR _increment$[ebp+4], xmm0

; 237  : 		increment.z = direction.z * LOS_FINE_CHECK_DISTANCE_SOURCE_END;

  0026b	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _direction$[ebp+8]
  00270	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42200000
  00278	f3 0f 11 45 f8	 movss	 DWORD PTR _increment$[ebp+8], xmm0

; 238  : 	
; 239  : 		check_position = *source_position;

  0027d	8b 45 10	 mov	 eax, DWORD PTR _source_position$[ebp]
  00280	8b 08		 mov	 ecx, DWORD PTR [eax]
  00282	89 4d cc	 mov	 DWORD PTR _check_position$[ebp], ecx
  00285	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00288	89 55 d0	 mov	 DWORD PTR _check_position$[ebp+4], edx
  0028b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0028e	89 45 d4	 mov	 DWORD PTR _check_position$[ebp+8], eax
$LN4@check_posi:

; 240  : 	
; 241  : 		while (number_of_terrain_checks > 1.0)

  00291	f3 0f 5a 45 b4	 cvtss2sd xmm0, DWORD PTR _number_of_terrain_checks$[ebp]
  00296	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  0029e	0f 86 83 00 00
	00		 jbe	 $LN5@check_posi

; 242  : 		{
; 243  : 			#if LINE_DEBUG_MODULE
; 244  : 	
; 245  : 			old_position = check_position;
; 246  : 	
; 247  : 			#endif
; 248  : 	
; 249  : 			check_position.x += increment.x;

  002a4	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _check_position$[ebp]
  002a9	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _increment$[ebp]
  002ae	f3 0f 11 45 cc	 movss	 DWORD PTR _check_position$[ebp], xmm0

; 250  : 			check_position.y += increment.y;

  002b3	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _check_position$[ebp+4]
  002b8	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _increment$[ebp+4]
  002bd	f3 0f 11 45 d0	 movss	 DWORD PTR _check_position$[ebp+4], xmm0

; 251  : 			check_position.z += increment.z;

  002c2	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _check_position$[ebp+8]
  002c7	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _increment$[ebp+8]
  002cc	f3 0f 11 45 d4	 movss	 DWORD PTR _check_position$[ebp+8], xmm0

; 252  : 	
; 253  : 			get_3d_terrain_point_data (check_position.x, check_position.z, &terrain_info);

  002d1	8d 45 84	 lea	 eax, DWORD PTR _terrain_info$[ebp]
  002d4	50		 push	 eax
  002d5	51		 push	 ecx
  002d6	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _check_position$[ebp+8]
  002db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e0	51		 push	 ecx
  002e1	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _check_position$[ebp]
  002e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002eb	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  002f0	dd d8		 fstp	 ST(0)

; 254  : 	
; 255  : 			terrain_elevation = get_3d_terrain_point_data_elevation (&terrain_info);

  002f2	8d 45 84	 lea	 eax, DWORD PTR _terrain_info$[ebp]
  002f5	50		 push	 eax
  002f6	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data_elevation@@YGMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data_elevation
  002fb	d9 5d b0	 fstp	 DWORD PTR _terrain_elevation$[ebp]

; 256  : 	
; 257  : 			if (terrain_elevation > check_position.y)

  002fe	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _terrain_elevation$[ebp]
  00303	0f 2f 45 d0	 comiss	 xmm0, DWORD PTR _check_position$[ebp+4]
  00307	76 07		 jbe	 SHORT $LN15@check_posi

; 258  : 			{
; 259  : 	
; 260  : 				#if TEXT_DEBUG_MODULE
; 261  : 	
; 262  : 				debug_log ("MB_TGT: (%s -> %s) failed FINE terrain LOS (source end)", get_local_entity_string (source, STRING_TYPE_FULL_NAME), get_local_entity_string (target, STRING_TYPE_FULL_NAME));
; 263  : 	
; 264  : 				#endif
; 265  : 	
; 266  : 				return FALSE;

  00309	33 c0		 xor	 eax, eax
  0030b	e9 72 02 00 00	 jmp	 $LN1@check_posi
$LN15@check_posi:

; 267  : 			}
; 268  : 	
; 269  : 			#if LINE_DEBUG_MODULE
; 270  : 	
; 271  : 			create_debug_3d_line (&old_position, &check_position, sys_col_yellow, 10.0);
; 272  : 	
; 273  : 			#endif
; 274  : 	
; 275  : 			number_of_terrain_checks --;

  00310	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _number_of_terrain_checks$[ebp]
  00315	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  0031d	f3 0f 11 45 b4	 movss	 DWORD PTR _number_of_terrain_checks$[ebp], xmm0

; 276  : 		}

  00322	e9 6a ff ff ff	 jmp	 $LN4@check_posi
$LN5@check_posi:

; 277  : 	}
; 278  : 	
; 279  : 	////////////////////////////////////////////////////////////////
; 280  : 	// TARGET END FINE line of sight check with terrain
; 281  : 	////////////////////////////////////////////////////////////////
; 282  : 
; 283  : 	if (criteria &	MOBILE_LOS_CHECK_TARGET_END_TERRAIN)

  00327	8b 45 18	 mov	 eax, DWORD PTR _criteria$[ebp]
  0032a	83 e0 04	 and	 eax, 4
  0032d	0f 84 1b 01 00
	00		 je	 $LN7@check_posi

; 284  : 	{
; 285  : 		number_of_terrain_checks = target_range / LOS_FINE_CHECK_DISTANCE_TARGET_END;

  00333	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _target_range$[ebp]
  00338	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@41c00000
  00340	f3 0f 11 45 b4	 movss	 DWORD PTR _number_of_terrain_checks$[ebp], xmm0

; 286  : 	
; 287  : 		number_of_terrain_checks = min (number_of_terrain_checks, LOS_NUMBER_OF_FINE_CHECKS_TARGET_END);

  00345	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  0034d	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR $T1[ebp], xmm0
  00355	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0035b	50		 push	 eax
  0035c	8d 4d b4	 lea	 ecx, DWORD PTR _number_of_terrain_checks$[ebp]
  0035f	51		 push	 ecx
  00360	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00365	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00369	f3 0f 11 45 b4	 movss	 DWORD PTR _number_of_terrain_checks$[ebp], xmm0

; 288  : 	
; 289  : 		increment.x = direction.x * LOS_FINE_CHECK_DISTANCE_TARGET_END;

  0036e	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _direction$[ebp]
  00373	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41c00000
  0037b	f3 0f 11 45 f0	 movss	 DWORD PTR _increment$[ebp], xmm0

; 290  : 		increment.y = direction.y * LOS_FINE_CHECK_DISTANCE_TARGET_END;

  00380	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _direction$[ebp+4]
  00385	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41c00000
  0038d	f3 0f 11 45 f4	 movss	 DWORD PTR _increment$[ebp+4], xmm0

; 291  : 		increment.z = direction.z * LOS_FINE_CHECK_DISTANCE_TARGET_END;

  00392	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _direction$[ebp+8]
  00397	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41c00000
  0039f	f3 0f 11 45 f8	 movss	 DWORD PTR _increment$[ebp+8], xmm0

; 292  : 	
; 293  : 		check_position = *target_position;

  003a4	8b 45 14	 mov	 eax, DWORD PTR _target_position$[ebp]
  003a7	8b 08		 mov	 ecx, DWORD PTR [eax]
  003a9	89 4d cc	 mov	 DWORD PTR _check_position$[ebp], ecx
  003ac	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  003af	89 55 d0	 mov	 DWORD PTR _check_position$[ebp+4], edx
  003b2	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  003b5	89 45 d4	 mov	 DWORD PTR _check_position$[ebp+8], eax
$LN6@check_posi:

; 294  : 	
; 295  : 		while (number_of_terrain_checks > 1.0)

  003b8	f3 0f 5a 45 b4	 cvtss2sd xmm0, DWORD PTR _number_of_terrain_checks$[ebp]
  003bd	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  003c5	0f 86 83 00 00
	00		 jbe	 $LN7@check_posi

; 296  : 		{
; 297  : 			#if LINE_DEBUG_MODULE
; 298  : 	
; 299  : 			old_position = check_position;
; 300  : 	
; 301  : 			#endif
; 302  : 	
; 303  : 			check_position.x -= increment.x;

  003cb	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _check_position$[ebp]
  003d0	f3 0f 5c 45 f0	 subss	 xmm0, DWORD PTR _increment$[ebp]
  003d5	f3 0f 11 45 cc	 movss	 DWORD PTR _check_position$[ebp], xmm0

; 304  : 			check_position.y -= increment.y;

  003da	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _check_position$[ebp+4]
  003df	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _increment$[ebp+4]
  003e4	f3 0f 11 45 d0	 movss	 DWORD PTR _check_position$[ebp+4], xmm0

; 305  : 			check_position.z -= increment.z;

  003e9	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _check_position$[ebp+8]
  003ee	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _increment$[ebp+8]
  003f3	f3 0f 11 45 d4	 movss	 DWORD PTR _check_position$[ebp+8], xmm0

; 306  : 	
; 307  : 			get_3d_terrain_point_data (check_position.x, check_position.z, &terrain_info);

  003f8	8d 45 84	 lea	 eax, DWORD PTR _terrain_info$[ebp]
  003fb	50		 push	 eax
  003fc	51		 push	 ecx
  003fd	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _check_position$[ebp+8]
  00402	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00407	51		 push	 ecx
  00408	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _check_position$[ebp]
  0040d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00412	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  00417	dd d8		 fstp	 ST(0)

; 308  : 	
; 309  : 			terrain_elevation = get_3d_terrain_point_data_elevation (&terrain_info);

  00419	8d 45 84	 lea	 eax, DWORD PTR _terrain_info$[ebp]
  0041c	50		 push	 eax
  0041d	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data_elevation@@YGMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data_elevation
  00422	d9 5d b0	 fstp	 DWORD PTR _terrain_elevation$[ebp]

; 310  : 	
; 311  : 			if (terrain_elevation > check_position.y)

  00425	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _terrain_elevation$[ebp]
  0042a	0f 2f 45 d0	 comiss	 xmm0, DWORD PTR _check_position$[ebp+4]
  0042e	76 07		 jbe	 SHORT $LN17@check_posi

; 312  : 			{
; 313  : 	
; 314  : 				#if TEXT_DEBUG_MODULE
; 315  : 	
; 316  : 				debug_log ("MB_TGT: (%s -> %s) failed FINE terrain LOS (target end)", get_local_entity_string (source, STRING_TYPE_FULL_NAME), get_local_entity_string (target, STRING_TYPE_FULL_NAME));
; 317  : 	
; 318  : 				#endif
; 319  : 	
; 320  : 				return FALSE;

  00430	33 c0		 xor	 eax, eax
  00432	e9 4b 01 00 00	 jmp	 $LN1@check_posi
$LN17@check_posi:

; 321  : 			}
; 322  : 	
; 323  : 			#if LINE_DEBUG_MODULE
; 324  : 	
; 325  : 			create_debug_3d_line (&old_position, &check_position, sys_col_yellow, 10.0);
; 326  : 	
; 327  : 			#endif
; 328  : 	
; 329  : 			number_of_terrain_checks --;

  00437	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _number_of_terrain_checks$[ebp]
  0043c	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00444	f3 0f 11 45 b4	 movss	 DWORD PTR _number_of_terrain_checks$[ebp], xmm0

; 330  : 		}

  00449	e9 6a ff ff ff	 jmp	 $LN6@check_posi
$LN7@check_posi:

; 331  : 	}
; 332  : 
; 333  : 	////////////////////////////////////////////////////////////////
; 334  : 	// SOURCE END line of sight check with objects
; 335  : 	////////////////////////////////////////////////////////////////
; 336  : 
; 337  : 	if (criteria &	MOBILE_LOS_CHECK_SOURCE_END_OBJECTS)

  0044e	8b 45 18	 mov	 eax, DWORD PTR _criteria$[ebp]
  00451	83 e0 08	 and	 eax, 8
  00454	74 7a		 je	 SHORT $LN19@check_posi

; 338  : 	{
; 339  : 		check_position.x = source_position->x + (direction.x * LOS_OBJECT_CHECK_DISTANCE_TARGET_END);

  00456	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _direction$[ebp]
  0045b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@43480000
  00463	8b 45 10	 mov	 eax, DWORD PTR _source_position$[ebp]
  00466	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  0046a	f3 0f 11 45 cc	 movss	 DWORD PTR _check_position$[ebp], xmm0

; 340  : 		check_position.y = source_position->y + (direction.y * LOS_OBJECT_CHECK_DISTANCE_TARGET_END);

  0046f	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _direction$[ebp+4]
  00474	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@43480000
  0047c	8b 45 10	 mov	 eax, DWORD PTR _source_position$[ebp]
  0047f	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  00484	f3 0f 11 45 d0	 movss	 DWORD PTR _check_position$[ebp+4], xmm0

; 341  : 		check_position.z = source_position->z + (direction.z * LOS_OBJECT_CHECK_DISTANCE_TARGET_END);

  00489	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _direction$[ebp+8]
  0048e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@43480000
  00496	8b 45 10	 mov	 eax, DWORD PTR _source_position$[ebp]
  00499	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  0049e	f3 0f 11 45 d4	 movss	 DWORD PTR _check_position$[ebp+8], xmm0

; 342  : 
; 343  : 		collision_en = get_line_of_sight_collision_entity

  004a3	8d 45 d8	 lea	 eax, DWORD PTR _normal$[ebp]
  004a6	50		 push	 eax
  004a7	8d 4d e4	 lea	 ecx, DWORD PTR _collision_point$[ebp]
  004aa	51		 push	 ecx
  004ab	8d 55 cc	 lea	 edx, DWORD PTR _check_position$[ebp]
  004ae	52		 push	 edx
  004af	8b 45 10	 mov	 eax, DWORD PTR _source_position$[ebp]
  004b2	50		 push	 eax
  004b3	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  004b6	51		 push	 ecx
  004b7	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  004ba	52		 push	 edx
  004bb	e8 00 00 00 00	 call	 ?get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU1@0PAUVEC3D@@111@Z ; get_line_of_sight_collision_entity
  004c0	89 45 fc	 mov	 DWORD PTR _collision_en$[ebp], eax

; 344  : 							(
; 345  : 								source,
; 346  : 								target,
; 347  : 								source_position,
; 348  : 								&check_position,
; 349  : 								&collision_point,
; 350  : 								&normal
; 351  : 							);
; 352  : 	
; 353  : 		if (collision_en)

  004c3	83 7d fc 00	 cmp	 DWORD PTR _collision_en$[ebp], 0
  004c7	74 07		 je	 SHORT $LN19@check_posi

; 354  : 		{
; 355  : 	
; 356  : 			#if TEXT_DEBUG_MODULE
; 357  : 
; 358  : 			debug_log ("MB_TGT: (%s -> %s) failed OBJECT LOS with %s (source end)", get_local_entity_string (source, STRING_TYPE_FULL_NAME), get_local_entity_string (target, STRING_TYPE_FULL_NAME), get_local_entity_type_name (collision_en));
; 359  : 			
; 360  : 			#endif
; 361  : 	
; 362  : 			return FALSE;

  004c9	33 c0		 xor	 eax, eax
  004cb	e9 b2 00 00 00	 jmp	 $LN1@check_posi
$LN19@check_posi:

; 363  : 		}
; 364  : 	}
; 365  : 	
; 366  : 	////////////////////////////////////////////////////////////////
; 367  : 	// TARGET END line of sight check with objects
; 368  : 	////////////////////////////////////////////////////////////////
; 369  : 
; 370  : 	if (criteria &	MOBILE_LOS_CHECK_TARGET_END_OBJECTS)

  004d0	8b 45 18	 mov	 eax, DWORD PTR _criteria$[ebp]
  004d3	83 e0 10	 and	 eax, 16			; 00000010H
  004d6	0f 84 a1 00 00
	00		 je	 $LN22@check_posi

; 371  : 	{	
; 372  : 		check_position.x = target_position->x - (direction.x * LOS_OBJECT_CHECK_DISTANCE_TARGET_END);

  004dc	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _direction$[ebp]
  004e1	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@43480000
  004e9	8b 45 14	 mov	 eax, DWORD PTR _target_position$[ebp]
  004ec	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  004f0	f3 0f 5c c8	 subss	 xmm1, xmm0
  004f4	f3 0f 11 4d cc	 movss	 DWORD PTR _check_position$[ebp], xmm1

; 373  : 		check_position.y = target_position->y - (direction.y * LOS_OBJECT_CHECK_DISTANCE_TARGET_END);

  004f9	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _direction$[ebp+4]
  004fe	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@43480000
  00506	8b 45 14	 mov	 eax, DWORD PTR _target_position$[ebp]
  00509	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  0050e	f3 0f 5c c8	 subss	 xmm1, xmm0
  00512	f3 0f 11 4d d0	 movss	 DWORD PTR _check_position$[ebp+4], xmm1

; 374  : 		check_position.z = target_position->z - (direction.z * LOS_OBJECT_CHECK_DISTANCE_TARGET_END);

  00517	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _direction$[ebp+8]
  0051c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@43480000
  00524	8b 45 14	 mov	 eax, DWORD PTR _target_position$[ebp]
  00527	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  0052c	f3 0f 5c c8	 subss	 xmm1, xmm0
  00530	f3 0f 11 4d d4	 movss	 DWORD PTR _check_position$[ebp+8], xmm1

; 375  : 
; 376  : 		collision_en = get_line_of_sight_collision_entity

  00535	8d 45 d8	 lea	 eax, DWORD PTR _normal$[ebp]
  00538	50		 push	 eax
  00539	8d 4d e4	 lea	 ecx, DWORD PTR _collision_point$[ebp]
  0053c	51		 push	 ecx
  0053d	8d 55 cc	 lea	 edx, DWORD PTR _check_position$[ebp]
  00540	52		 push	 edx
  00541	8b 45 14	 mov	 eax, DWORD PTR _target_position$[ebp]
  00544	50		 push	 eax
  00545	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  00548	51		 push	 ecx
  00549	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  0054c	52		 push	 edx
  0054d	e8 00 00 00 00	 call	 ?get_line_of_sight_collision_entity@@YGPAUENTITY@@PAU1@0PAUVEC3D@@111@Z ; get_line_of_sight_collision_entity
  00552	89 45 fc	 mov	 DWORD PTR _collision_en$[ebp], eax

; 377  : 							(
; 378  : 								source,
; 379  : 								target,
; 380  : 								target_position,
; 381  : 								&check_position,
; 382  : 								&collision_point,
; 383  : 								&normal
; 384  : 							);
; 385  : 	
; 386  : 		if (collision_en)

  00555	83 7d fc 00	 cmp	 DWORD PTR _collision_en$[ebp], 0
  00559	74 22		 je	 SHORT $LN22@check_posi

; 387  : 		{
; 388  : 			collision_distance = get_sqr_3d_range (&collision_point, target_position);

  0055b	8b 45 14	 mov	 eax, DWORD PTR _target_position$[ebp]
  0055e	50		 push	 eax
  0055f	8d 4d e4	 lea	 ecx, DWORD PTR _collision_point$[ebp]
  00562	51		 push	 ecx
  00563	e8 00 00 00 00	 call	 ?get_sqr_3d_range@@YGMPBUVEC3D@@0@Z ; get_sqr_3d_range
  00568	d9 5d b8	 fstp	 DWORD PTR _collision_distance$[ebp]

; 389  : 
; 390  : 			if (collision_distance > (LOS_OBJECT_EXCLUDE_DISTANCE_TARGET_END * LOS_OBJECT_EXCLUDE_DISTANCE_TARGET_END))

  0056b	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _collision_distance$[ebp]
  00570	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@43100000
  00577	76 04		 jbe	 SHORT $LN22@check_posi

; 391  : 			{
; 392  : 				#if TEXT_DEBUG_MODULE
; 393  : 			
; 394  : 				debug_log ("MB_TGT: (%s -> %s) failed OBJECT LOS with %s (target end)", get_local_entity_string (source, STRING_TYPE_FULL_NAME), get_local_entity_string (target, STRING_TYPE_FULL_NAME), get_local_entity_type_name (collision_en));
; 395  : 			
; 396  : 				#endif
; 397  : 	
; 398  : 				return FALSE;

  00579	33 c0		 xor	 eax, eax
  0057b	eb 05		 jmp	 SHORT $LN1@check_posi
$LN22@check_posi:

; 399  : 			}
; 400  : 		}
; 401  : 	}
; 402  : 
; 403  : 	return TRUE;

  0057d	b8 01 00 00 00	 mov	 eax, 1
$LN1@check_posi:

; 404  : }

  00582	5f		 pop	 edi
  00583	5e		 pop	 esi
  00584	5b		 pop	 ebx
  00585	8b e5		 mov	 esp, ebp
  00587	5d		 pop	 ebp
  00588	c2 14 00	 ret	 20			; 00000014H
?check_position_line_of_sight@@YGHPAUENTITY@@0PAUVEC3D@@1W4MOBILE_LOS_CHECK_CRITERIA@@@Z ENDP ; check_position_line_of_sight
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\mb_tgt.c
;	COMDAT ?check_entity_line_of_sight@@YGHPAUENTITY@@0W4MOBILE_LOS_CHECK_CRITERIA@@@Z
_TEXT	SEGMENT
tv140 = -80						; size = 4
tv88 = -80						; size = 4
tv132 = -76						; size = 4
tv80 = -76						; size = 4
_target_position$ = -8					; size = 4
_source_position$ = -4					; size = 4
_source$ = 8						; size = 4
_target$ = 12						; size = 4
_criteria$ = 16						; size = 4
?check_entity_line_of_sight@@YGHPAUENTITY@@0W4MOBILE_LOS_CHECK_CRITERIA@@@Z PROC ; check_entity_line_of_sight, COMDAT

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 111  : 	vec3d
; 112  : 		*source_position,
; 113  : 		*target_position;
; 114  : 
; 115  : 	ASSERT (source);

  00009	83 7d 08 00	 cmp	 DWORD PTR _source$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@check_enti
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??check_entity_line_of_sight@@YGHPAUENTITY@@0W4MOBILE_LOS_CHECK_CRITERIA@@@Z@4JA
  00014	83 c0 05	 add	 eax, 5
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@OAHEMDAJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06OEKOLKIL@source@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@check_enti:

; 116  : 
; 117  : 	ASSERT (target);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@check_enti
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??check_entity_line_of_sight@@YGHPAUENTITY@@0W4MOBILE_LOS_CHECK_CRITERIA@@@Z@4JA
  00032	83 c0 07	 add	 eax, 7
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@OAHEMDAJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@check_enti:

; 118  : 
; 119  : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  00045	83 7d 08 00	 cmp	 DWORD PTR _source$[ebp], 0
  00049	74 0a		 je	 SHORT $LN5@check_enti
  0004b	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	89 4d b4	 mov	 DWORD PTR tv80[ebp], ecx
  00053	eb 21		 jmp	 SHORT $LN6@check_enti
$LN5@check_enti:
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??check_entity_line_of_sight@@YGHPAUENTITY@@0W4MOBILE_LOS_CHECK_CRITERIA@@@Z@4JA
  0005b	83 c2 09	 add	 edx, 9
  0005e	52		 push	 edx
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@OAHEMDAJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006f	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN6@check_enti:
  00076	b9 01 00 00 00	 mov	 ecx, 1
  0007b	85 c9		 test	 ecx, ecx
  0007d	74 09		 je	 SHORT $LN7@check_enti
  0007f	c7 45 b0 08 00
	00 00		 mov	 DWORD PTR tv88[ebp], 8
  00086	eb 21		 jmp	 SHORT $LN8@check_enti
$LN7@check_enti:
  00088	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??check_entity_line_of_sight@@YGHPAUENTITY@@0W4MOBILE_LOS_CHECK_CRITERIA@@@Z@4JA
  0008e	83 c2 09	 add	 edx, 9
  00091	52		 push	 edx
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@OAHEMDAJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a2	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$LN8@check_enti:
  000a9	6a 08		 push	 8
  000ab	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  000ae	51		 push	 ecx
  000af	6b 55 b4 60	 imul	 edx, DWORD PTR tv80[ebp], 96
  000b3	8b 45 b0	 mov	 eax, DWORD PTR tv88[ebp]
  000b6	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000bd	ff d1		 call	 ecx
  000bf	89 45 fc	 mov	 DWORD PTR _source_position$[ebp], eax

; 120  : 
; 121  : 	target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  000c2	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  000c6	74 0a		 je	 SHORT $LN9@check_enti
  000c8	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  000cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cd	89 4d b4	 mov	 DWORD PTR tv132[ebp], ecx
  000d0	eb 21		 jmp	 SHORT $LN10@check_enti
$LN9@check_enti:
  000d2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??check_entity_line_of_sight@@YGHPAUENTITY@@0W4MOBILE_LOS_CHECK_CRITERIA@@@Z@4JA
  000d8	83 c2 0b	 add	 edx, 11			; 0000000bH
  000db	52		 push	 edx
  000dc	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@OAHEMDAJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ec	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
$LN10@check_enti:
  000f3	b9 01 00 00 00	 mov	 ecx, 1
  000f8	85 c9		 test	 ecx, ecx
  000fa	74 09		 je	 SHORT $LN11@check_enti
  000fc	c7 45 b0 08 00
	00 00		 mov	 DWORD PTR tv140[ebp], 8
  00103	eb 21		 jmp	 SHORT $LN12@check_enti
$LN11@check_enti:
  00105	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??check_entity_line_of_sight@@YGHPAUENTITY@@0W4MOBILE_LOS_CHECK_CRITERIA@@@Z@4JA
  0010b	83 c2 0b	 add	 edx, 11			; 0000000bH
  0010e	52		 push	 edx
  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@OAHEMDAJ@c?3?2users?2nhv90?2projects?2eech?2ap@
  00114	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00119	50		 push	 eax
  0011a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0011f	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv140[ebp], 0
$LN12@check_enti:
  00126	6a 08		 push	 8
  00128	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  0012b	51		 push	 ecx
  0012c	6b 55 b4 60	 imul	 edx, DWORD PTR tv132[ebp], 96
  00130	8b 45 b0	 mov	 eax, DWORD PTR tv140[ebp]
  00133	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0013a	ff d1		 call	 ecx
  0013c	89 45 f8	 mov	 DWORD PTR _target_position$[ebp], eax

; 122  : 
; 123  : 	return check_position_line_of_sight (source, target, source_position, target_position, criteria);

  0013f	8b 45 10	 mov	 eax, DWORD PTR _criteria$[ebp]
  00142	50		 push	 eax
  00143	8b 4d f8	 mov	 ecx, DWORD PTR _target_position$[ebp]
  00146	51		 push	 ecx
  00147	8b 55 fc	 mov	 edx, DWORD PTR _source_position$[ebp]
  0014a	52		 push	 edx
  0014b	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  0014e	50		 push	 eax
  0014f	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  00152	51		 push	 ecx
  00153	e8 00 00 00 00	 call	 ?check_position_line_of_sight@@YGHPAUENTITY@@0PAUVEC3D@@1W4MOBILE_LOS_CHECK_CRITERIA@@@Z ; check_position_line_of_sight

; 124  : }

  00158	5f		 pop	 edi
  00159	5e		 pop	 esi
  0015a	5b		 pop	 ebx
  0015b	8b e5		 mov	 esp, ebp
  0015d	5d		 pop	 ebp
  0015e	c2 0c 00	 ret	 12			; 0000000cH
?check_entity_line_of_sight@@YGHPAUENTITY@@0W4MOBILE_LOS_CHECK_CRITERIA@@@Z ENDP ; check_entity_line_of_sight
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sqrt@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sqrt@@YGMM@Z PROC					; sqrt, COMDAT

; 294  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 295  : 	return (_CSTD sqrtf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sqrtf
  00019	83 c4 04	 add	 esp, 4

; 296  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sqrt@@YGMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 760  :             return (float)sqrt(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sqrt
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 761  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
END
