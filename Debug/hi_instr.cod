; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\gunships\cockpits\hind\hi_instr.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_acosf
PUBLIC	_atan2f
PUBLIC	_fabsf
PUBLIC	_floorf
PUBLIC	_sqrtf
PUBLIC	?acos@@YGMM@Z					; acos
PUBLIC	?atan2@@YGMMM@Z					; atan2
PUBLIC	?fabs@@YGMM@Z					; fabs
PUBLIC	?floor@@YGMM@Z					; floor
PUBLIC	?sqrt@@YGMM@Z					; sqrt
PUBLIC	?get_hind_virtual_cockpit_hsi_needle_values@@YGXPAM00@Z ; get_hind_virtual_cockpit_hsi_needle_values
PUBLIC	?get_mi24_airspeed_needle_value@@YGMXZ		; get_mi24_airspeed_needle_value
PUBLIC	?get_mi24_vertical_velocity_needle_value@@YGMXZ	; get_mi24_vertical_velocity_needle_value
PUBLIC	?get_mi24_pitch_ladder_dispacement@@YGMXZ	; get_mi24_pitch_ladder_dispacement
PUBLIC	?get_mi24_hover_indicator_speed@@YGXPAM0@Z	; get_mi24_hover_indicator_speed
PUBLIC	?get_mi24_hover_indicator_vvi_needle_value@@YGMXZ ; get_mi24_hover_indicator_vvi_needle_value
PUBLIC	?get_mi24_radar_altimeter_needle_value@@YGMXZ	; get_mi24_radar_altimeter_needle_value
PUBLIC	?get_mi24_barometric_altimeter_needle_values@@YGXPAM0@Z ; get_mi24_barometric_altimeter_needle_values
PUBLIC	?get_mi24_rpm_needle_value@@YGMM@Z		; get_mi24_rpm_needle_value
PUBLIC	?get_mi24_epr_needle_values@@YGXPAM00@Z		; get_mi24_epr_needle_values
PUBLIC	?get_mi24_temperature_needle_values@@YGXMPAM0@Z	; get_mi24_temperature_needle_values
PUBLIC	?get_mi24_compass_waypoint_needle_value@@YGMXZ	; get_mi24_compass_waypoint_needle_value
PUBLIC	?get_mi24_compass_waypoint_needle_heading_value@@YGMXZ ; get_mi24_compass_waypoint_needle_heading_value
PUBLIC	?get_mi24_clock_hand_values@@YGXPAM00@Z		; get_mi24_clock_hand_values
PUBLIC	?get_mi24_hydraulic_pressure_values@@YGXPAM00@Z	; get_mi24_hydraulic_pressure_values
PUBLIC	?update_mi24_waypoint_indicator@@YGXPAM@Z	; update_mi24_waypoint_indicator
PUBLIC	?update_mi24_weapon_status_lights@@YGXPAUOBJECT_3D_SUB_INSTANCE@@00@Z ; update_mi24_weapon_status_lights
PUBLIC	?get_mi24_apu_rpm_needle_value@@YGMXZ		; get_mi24_apu_rpm_needle_value
PUBLIC	?get_mi24_engine_select_switch_value@@YGXPAM@Z	; get_mi24_engine_select_switch_value
PUBLIC	?get_mi24_rocket_salvo_switch_value@@YGMXZ	; get_mi24_rocket_salvo_switch_value
PUBLIC	?get_mi24_sidewind_needle_value@@YGMXZ		; get_mi24_sidewind_needle_value
PUBLIC	?get_mi24_fuel_quantity_needle_value@@YGMXZ	; get_mi24_fuel_quantity_needle_value
PUBLIC	?update_mi24_engine_gauges@@YGXPAM000@Z		; update_mi24_engine_gauges
PUBLIC	??$max@N@std@@YGABNABN0@Z			; std::max<double>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??get_hsi_needle_values@@YGXPAM00@Z@4JA ; `get_hsi_needle_values'::`1'::__LINE__Var
PUBLIC	??_C@_0EO@OGHPEEJN@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0BB@PFAKKLCO@direction_finder@		; `string'
PUBLIC	??_C@_0M@GOBOJDMO@flight_path@			; `string'
PUBLIC	??_C@_05BPGNBDFG@drift@				; `string'
PUBLIC	?__LINE__Var@?0??get_hind_virtual_cockpit_hsi_needle_values@@YGXPAM00@Z@4JA ; `get_hind_virtual_cockpit_hsi_needle_values'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_mi24_clock_hand_values@@YGXPAM00@Z@4JA ; `get_mi24_clock_hand_values'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??update_mi24_waypoint_indicator@@YGXPAM@Z@4JA ; `update_mi24_waypoint_indicator'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??update_mi24_weapon_status_lights@@YGXPAUOBJECT_3D_SUB_INSTANCE@@00@Z@4JA ; `update_mi24_weapon_status_lights'::`1'::__LINE__Var
PUBLIC	??_C@_05MAJJAKPI@FALSE@				; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3db2b8c2
PUBLIC	__real@3ea9c91f
PUBLIC	__real@3f000000
PUBLIC	__real@3f47c1bda5119ce0
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3f5f66f3
PUBLIC	__real@3f685696
PUBLIC	__real@3f6f364304fdf3b6
PUBLIC	__real@3f800000
PUBLIC	__real@3f860a92
PUBLIC	__real@3f91df46a0000000
PUBLIC	__real@3f99999a
PUBLIC	__real@3f9c61aa
PUBLIC	__real@3faacee9f0000000
PUBLIC	__real@3fb015bf9999999a
PUBLIC	__real@3fb133b3fa000000
PUBLIC	__real@3fb6571848000000
PUBLIC	__real@3fc90fdb
PUBLIC	__real@3fd0c15240000000
PUBLIC	__real@3fd1df46a0000000
PUBLIC	__real@3fd6571848000000
PUBLIC	__real@3fdbecde60000000
PUBLIC	__real@3fdf66f3
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe0325801000000
PUBLIC	__real@3fe0c15236000000
PUBLIC	__real@3fe38c353f000000
PUBLIC	__real@3fe4f1a6c3800000
PUBLIC	__real@3fe580a0f8800000
PUBLIC	__real@3fe60f9b2d800000
PUBLIC	__real@3fe7750cb2000000
PUBLIC	__real@3fe921fb51000000
PUBLIC	__real@3feb5de425000000
PUBLIC	__real@3fede14a13800000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff0c15236000000
PUBLIC	__real@3ff1504c6b000000
PUBLIC	__real@3ff1df46a0000000
PUBLIC	__real@3ff63d70a3d70a3d
PUBLIC	__real@3ff67ad6d5400000
PUBLIC	__real@3ff921fb51000000
PUBLIC	__real@3ff9f872a0800000
PUBLIC	__real@3ffc71c6
PUBLIC	__real@3ffd524fde800000
PUBLIC	__real@4000000000000000
PUBLIC	__real@40000e9973c00000
PUBLIC	__real@4001a9a8cc200000
PUBLIC	__real@400226c3ba800000
PUBLIC	__real@40024a8240000000
PUBLIC	__real@40039e1485a00000
PUBLIC	__real@4005a45f85c00000
PUBLIC	__real@40060a92
PUBLIC	__real@4006e6127d000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@400921fb51000000
PUBLIC	__real@400921fb60000000
PUBLIC	__real@401226c3ba800000
PUBLIC	__real@4014000000000000
PUBLIC	__real@4014f1a6c3800000
PUBLIC	__real@401921fb51000000
PUBLIC	__real@4020000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@40266f42
PUBLIC	__real@4034000000000000
PUBLIC	__real@403e000000000000
PUBLIC	__real@4044000000000000
PUBLIC	__real@4049000000000000
PUBLIC	__real@40490fdb
PUBLIC	__real@404b800000000000
PUBLIC	__real@404e000000000000
PUBLIC	__real@4059000000000000
PUBLIC	__real@40666666
PUBLIC	__real@4069000000000000
PUBLIC	__real@406f400000000000
PUBLIC	__real@4079000000000000
PUBLIC	__real@407c200000000000
PUBLIC	__real@407f400000000000
PUBLIC	__real@4085e00000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@4092c00000000000
PUBLIC	__real@4096cbe4
PUBLIC	__real@409db00000000000
PUBLIC	__real@40c3880000000000
PUBLIC	__real@42480000
PUBLIC	__real@42652ee0
PUBLIC	__real@42c80000
PUBLIC	__real@43160000
PUBLIC	__real@43480000
PUBLIC	__real@437a0000
PUBLIC	__real@bec49809
PUBLIC	__real@bf1c61aa
PUBLIC	__real@bf32b8c2
PUBLIC	__real@bf4d87ac
PUBLIC	__real@bf61199fbbe76c8b
PUBLIC	__real@bfa0882154000000
PUBLIC	__real@bfa78d36
PUBLIC	__real@bfabf84e87333333
PUBLIC	__real@bfb1df46a0000000
PUBLIC	__real@bfbacee9f0000000
PUBLIC	__real@bfc5ab85a2000000
PUBLIC	__real@bfceeebf289d89d9
PUBLIC	__real@bfe0c15236000000
PUBLIC	__real@c00226c3ba800000
PUBLIC	__real@c024000000000000
PUBLIC	__real@c0278d36
PUBLIC	__real@c03e000000000000
PUBLIC	__real@c0800000
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_acos:PROC
EXTRN	_atan2:PROC
EXTRN	_fabs:PROC
EXTRN	_sqrt:PROC
EXTRN	__imp__floor:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?get_2d_unit_vector_dot_product@@YGMPBUVEC2D@@0@Z:PROC ; get_2d_unit_vector_dot_product
EXTRN	?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z:PROC ; multiply_matrix3x3_vec3d
EXTRN	?modify_angle@@YGXPAMMM@Z:PROC			; modify_angle
EXTRN	?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z:PROC ; get_waypoint_display_position
EXTRN	?get_session_wind_velocity_at_point@@YGMPAUVEC3D@@0@Z:PROC ; get_session_wind_velocity_at_point
EXTRN	?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z:PROC ; get_local_entity_current_waypoint
EXTRN	?get_local_entity_prev_waypoint@@YGPAUENTITY@@PAU1@@Z:PROC ; get_local_entity_prev_waypoint
EXTRN	?electrical_system_active@@YGHXZ:PROC		; electrical_system_active
EXTRN	?get_hud_aiming_range@@YGMXZ:PROC		; get_hud_aiming_range
EXTRN	?get_hydraulic_pressure@@YGMXZ:PROC		; get_hydraulic_pressure
EXTRN	?get_current_dynamics_options@@YGHW4DYNAMICS_OPTIONS_TYPES@@@Z:PROC ; get_current_dynamics_options
EXTRN	?get_air_density@@YGMM@Z:PROC			; get_air_density
EXTRN	?get_analogue_clock_values@@YGXMPAM00@Z:PROC	; get_analogue_clock_values
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?overload_invalid_char_type_message@@3PBDB:DWORD ; overload_invalid_char_type_message
EXTRN	?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA:BYTE ; fn_get_local_entity_char_value
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA:BYTE ; fn_get_local_entity_vec3d_ptr
EXTRN	?weapon_database@@3PAUWEAPON_DATA@@A:BYTE	; weapon_database
EXTRN	?gunship_entity@@3PAUENTITY@@A:DWORD		; gunship_entity
EXTRN	?session_entity@@3PAUENTITY@@A:DWORD		; session_entity
EXTRN	?weapon_lock_type@@3W4WEAPON_LOCK_TYPES@@A:DWORD ; weapon_lock_type
EXTRN	?rocket_salvo_size@@3HA:DWORD			; rocket_salvo_size
EXTRN	?hind_damage@@3THIND_DAMAGE_FLAGS@@A:DWORD	; hind_damage
EXTRN	?test_cockpit_instruments@@3HA:DWORD		; test_cockpit_instruments
EXTRN	?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A:DWORD ; current_flight_dynamics
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?direction_finder_value@?L@??get_hsi_needle_values@@YGXPAM00@Z@4MA DD 01H DUP (?) ; `get_hsi_needle_values'::`11'::direction_finder_value
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c0800000
CONST	SEGMENT
__real@c0800000 DD 0c0800000r			; -4
CONST	ENDS
;	COMDAT __real@c03e000000000000
CONST	SEGMENT
__real@c03e000000000000 DQ 0c03e000000000000r	; -30
CONST	ENDS
;	COMDAT __real@c0278d36
CONST	SEGMENT
__real@c0278d36 DD 0c0278d36r			; -2.61799
CONST	ENDS
;	COMDAT __real@c024000000000000
CONST	SEGMENT
__real@c024000000000000 DQ 0c024000000000000r	; -10
CONST	ENDS
;	COMDAT __real@c00226c3ba800000
CONST	SEGMENT
__real@c00226c3ba800000 DQ 0c00226c3ba800000r	; -2.26893
CONST	ENDS
;	COMDAT __real@bfe0c15236000000
CONST	SEGMENT
__real@bfe0c15236000000 DQ 0bfe0c15236000000r	; -0.523599
CONST	ENDS
;	COMDAT __real@bfceeebf289d89d9
CONST	SEGMENT
__real@bfceeebf289d89d9 DQ 0bfceeebf289d89d9r	; -0.241661
CONST	ENDS
;	COMDAT __real@bfc5ab85a2000000
CONST	SEGMENT
__real@bfc5ab85a2000000 DQ 0bfc5ab85a2000000r	; -0.169297
CONST	ENDS
;	COMDAT __real@bfbacee9f0000000
CONST	SEGMENT
__real@bfbacee9f0000000 DQ 0bfbacee9f0000000r	; -0.10472
CONST	ENDS
;	COMDAT __real@bfb1df46a0000000
CONST	SEGMENT
__real@bfb1df46a0000000 DQ 0bfb1df46a0000000r	; -0.0698132
CONST	ENDS
;	COMDAT __real@bfabf84e87333333
CONST	SEGMENT
__real@bfabf84e87333333 DQ 0bfabf84e87333333r	; -0.0546288
CONST	ENDS
;	COMDAT __real@bfa78d36
CONST	SEGMENT
__real@bfa78d36 DD 0bfa78d36r			; -1.309
CONST	ENDS
;	COMDAT __real@bfa0882154000000
CONST	SEGMENT
__real@bfa0882154000000 DQ 0bfa0882154000000r	; -0.0322886
CONST	ENDS
;	COMDAT __real@bf61199fbbe76c8b
CONST	SEGMENT
__real@bf61199fbbe76c8b DQ 0bf61199fbbe76c8br	; -0.00208741
CONST	ENDS
;	COMDAT __real@bf4d87ac
CONST	SEGMENT
__real@bf4d87ac DD 0bf4d87acr			; -0.802851
CONST	ENDS
;	COMDAT __real@bf32b8c2
CONST	SEGMENT
__real@bf32b8c2 DD 0bf32b8c2r			; -0.698132
CONST	ENDS
;	COMDAT __real@bf1c61aa
CONST	SEGMENT
__real@bf1c61aa DD 0bf1c61aar			; -0.610865
CONST	ENDS
;	COMDAT __real@bec49809
CONST	SEGMENT
__real@bec49809 DD 0bec49809r			; -0.383972
CONST	ENDS
;	COMDAT __real@437a0000
CONST	SEGMENT
__real@437a0000 DD 0437a0000r			; 250
CONST	ENDS
;	COMDAT __real@43480000
CONST	SEGMENT
__real@43480000 DD 043480000r			; 200
CONST	ENDS
;	COMDAT __real@43160000
CONST	SEGMENT
__real@43160000 DD 043160000r			; 150
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42652ee0
CONST	SEGMENT
__real@42652ee0 DD 042652ee0r			; 57.2958
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@40c3880000000000
CONST	SEGMENT
__real@40c3880000000000 DQ 040c3880000000000r	; 10000
CONST	ENDS
;	COMDAT __real@409db00000000000
CONST	SEGMENT
__real@409db00000000000 DQ 0409db00000000000r	; 1900
CONST	ENDS
;	COMDAT __real@4096cbe4
CONST	SEGMENT
__real@4096cbe4 DD 04096cbe4r			; 4.71239
CONST	ENDS
;	COMDAT __real@4092c00000000000
CONST	SEGMENT
__real@4092c00000000000 DQ 04092c00000000000r	; 1200
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@4085e00000000000
CONST	SEGMENT
__real@4085e00000000000 DQ 04085e00000000000r	; 700
CONST	ENDS
;	COMDAT __real@407f400000000000
CONST	SEGMENT
__real@407f400000000000 DQ 0407f400000000000r	; 500
CONST	ENDS
;	COMDAT __real@407c200000000000
CONST	SEGMENT
__real@407c200000000000 DQ 0407c200000000000r	; 450
CONST	ENDS
;	COMDAT __real@4079000000000000
CONST	SEGMENT
__real@4079000000000000 DQ 04079000000000000r	; 400
CONST	ENDS
;	COMDAT __real@406f400000000000
CONST	SEGMENT
__real@406f400000000000 DQ 0406f400000000000r	; 250
CONST	ENDS
;	COMDAT __real@4069000000000000
CONST	SEGMENT
__real@4069000000000000 DQ 04069000000000000r	; 200
CONST	ENDS
;	COMDAT __real@40666666
CONST	SEGMENT
__real@40666666 DD 040666666r			; 3.6
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@404e000000000000
CONST	SEGMENT
__real@404e000000000000 DQ 0404e000000000000r	; 60
CONST	ENDS
;	COMDAT __real@404b800000000000
CONST	SEGMENT
__real@404b800000000000 DQ 0404b800000000000r	; 55
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@4049000000000000
CONST	SEGMENT
__real@4049000000000000 DQ 04049000000000000r	; 50
CONST	ENDS
;	COMDAT __real@4044000000000000
CONST	SEGMENT
__real@4044000000000000 DQ 04044000000000000r	; 40
CONST	ENDS
;	COMDAT __real@403e000000000000
CONST	SEGMENT
__real@403e000000000000 DQ 0403e000000000000r	; 30
CONST	ENDS
;	COMDAT __real@4034000000000000
CONST	SEGMENT
__real@4034000000000000 DQ 04034000000000000r	; 20
CONST	ENDS
;	COMDAT __real@40266f42
CONST	SEGMENT
__real@40266f42 DD 040266f42r			; 2.60054
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@4020000000000000
CONST	SEGMENT
__real@4020000000000000 DQ 04020000000000000r	; 8
CONST	ENDS
;	COMDAT __real@401921fb51000000
CONST	SEGMENT
__real@401921fb51000000 DQ 0401921fb51000000r	; 6.28319
CONST	ENDS
;	COMDAT __real@4014f1a6c3800000
CONST	SEGMENT
__real@4014f1a6c3800000 DQ 04014f1a6c3800000r	; 5.23599
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@401226c3ba800000
CONST	SEGMENT
__real@401226c3ba800000 DQ 0401226c3ba800000r	; 4.53786
CONST	ENDS
;	COMDAT __real@400921fb60000000
CONST	SEGMENT
__real@400921fb60000000 DQ 0400921fb60000000r	; 3.14159
CONST	ENDS
;	COMDAT __real@400921fb51000000
CONST	SEGMENT
__real@400921fb51000000 DQ 0400921fb51000000r	; 3.14159
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4006e6127d000000
CONST	SEGMENT
__real@4006e6127d000000 DQ 04006e6127d000000r	; 2.86234
CONST	ENDS
;	COMDAT __real@40060a92
CONST	SEGMENT
__real@40060a92 DD 040060a92r			; 2.0944
CONST	ENDS
;	COMDAT __real@4005a45f85c00000
CONST	SEGMENT
__real@4005a45f85c00000 DQ 04005a45f85c00000r	; 2.70526
CONST	ENDS
;	COMDAT __real@40039e1485a00000
CONST	SEGMENT
__real@40039e1485a00000 DQ 040039e1485a00000r	; 2.45219
CONST	ENDS
;	COMDAT __real@40024a8240000000
CONST	SEGMENT
__real@40024a8240000000 DQ 040024a8240000000r	; 2.28638
CONST	ENDS
;	COMDAT __real@400226c3ba800000
CONST	SEGMENT
__real@400226c3ba800000 DQ 0400226c3ba800000r	; 2.26893
CONST	ENDS
;	COMDAT __real@4001a9a8cc200000
CONST	SEGMENT
__real@4001a9a8cc200000 DQ 04001a9a8cc200000r	; 2.20784
CONST	ENDS
;	COMDAT __real@40000e9973c00000
CONST	SEGMENT
__real@40000e9973c00000 DQ 040000e9973c00000r	; 2.00713
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ffd524fde800000
CONST	SEGMENT
__real@3ffd524fde800000 DQ 03ffd524fde800000r	; 1.8326
CONST	ENDS
;	COMDAT __real@3ffc71c6
CONST	SEGMENT
__real@3ffc71c6 DD 03ffc71c6r			; 1.97222
CONST	ENDS
;	COMDAT __real@3ff9f872a0800000
CONST	SEGMENT
__real@3ff9f872a0800000 DQ 03ff9f872a0800000r	; 1.62316
CONST	ENDS
;	COMDAT __real@3ff921fb51000000
CONST	SEGMENT
__real@3ff921fb51000000 DQ 03ff921fb51000000r	; 1.5708
CONST	ENDS
;	COMDAT __real@3ff67ad6d5400000
CONST	SEGMENT
__real@3ff67ad6d5400000 DQ 03ff67ad6d5400000r	; 1.40499
CONST	ENDS
;	COMDAT __real@3ff63d70a3d70a3d
CONST	SEGMENT
__real@3ff63d70a3d70a3d DQ 03ff63d70a3d70a3dr	; 1.39
CONST	ENDS
;	COMDAT __real@3ff1df46a0000000
CONST	SEGMENT
__real@3ff1df46a0000000 DQ 03ff1df46a0000000r	; 1.11701
CONST	ENDS
;	COMDAT __real@3ff1504c6b000000
CONST	SEGMENT
__real@3ff1504c6b000000 DQ 03ff1504c6b000000r	; 1.0821
CONST	ENDS
;	COMDAT __real@3ff0c15236000000
CONST	SEGMENT
__real@3ff0c15236000000 DQ 03ff0c15236000000r	; 1.0472
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fede14a13800000
CONST	SEGMENT
__real@3fede14a13800000 DQ 03fede14a13800000r	; 0.933751
CONST	ENDS
;	COMDAT __real@3feb5de425000000
CONST	SEGMENT
__real@3feb5de425000000 DQ 03feb5de425000000r	; 0.855211
CONST	ENDS
;	COMDAT __real@3fe921fb51000000
CONST	SEGMENT
__real@3fe921fb51000000 DQ 03fe921fb51000000r	; 0.785398
CONST	ENDS
;	COMDAT __real@3fe7750cb2000000
CONST	SEGMENT
__real@3fe7750cb2000000 DQ 03fe7750cb2000000r	; 0.733038
CONST	ENDS
;	COMDAT __real@3fe60f9b2d800000
CONST	SEGMENT
__real@3fe60f9b2d800000 DQ 03fe60f9b2d800000r	; 0.689405
CONST	ENDS
;	COMDAT __real@3fe580a0f8800000
CONST	SEGMENT
__real@3fe580a0f8800000 DQ 03fe580a0f8800000r	; 0.671952
CONST	ENDS
;	COMDAT __real@3fe4f1a6c3800000
CONST	SEGMENT
__real@3fe4f1a6c3800000 DQ 03fe4f1a6c3800000r	; 0.654498
CONST	ENDS
;	COMDAT __real@3fe38c353f000000
CONST	SEGMENT
__real@3fe38c353f000000 DQ 03fe38c353f000000r	; 0.610865
CONST	ENDS
;	COMDAT __real@3fe0c15236000000
CONST	SEGMENT
__real@3fe0c15236000000 DQ 03fe0c15236000000r	; 0.523599
CONST	ENDS
;	COMDAT __real@3fe0325801000000
CONST	SEGMENT
__real@3fe0325801000000 DQ 03fe0325801000000r	; 0.506145
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fdf66f3
CONST	SEGMENT
__real@3fdf66f3 DD 03fdf66f3r			; 1.74533
CONST	ENDS
;	COMDAT __real@3fdbecde60000000
CONST	SEGMENT
__real@3fdbecde60000000 DQ 03fdbecde60000000r	; 0.436332
CONST	ENDS
;	COMDAT __real@3fd6571848000000
CONST	SEGMENT
__real@3fd6571848000000 DQ 03fd6571848000000r	; 0.349066
CONST	ENDS
;	COMDAT __real@3fd1df46a0000000
CONST	SEGMENT
__real@3fd1df46a0000000 DQ 03fd1df46a0000000r	; 0.279253
CONST	ENDS
;	COMDAT __real@3fd0c15240000000
CONST	SEGMENT
__real@3fd0c15240000000 DQ 03fd0c15240000000r	; 0.261799
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3fb6571848000000
CONST	SEGMENT
__real@3fb6571848000000 DQ 03fb6571848000000r	; 0.0872665
CONST	ENDS
;	COMDAT __real@3fb133b3fa000000
CONST	SEGMENT
__real@3fb133b3fa000000 DQ 03fb133b3fa000000r	; 0.0671952
CONST	ENDS
;	COMDAT __real@3fb015bf9999999a
CONST	SEGMENT
__real@3fb015bf9999999a DQ 03fb015bf9999999ar	; 0.0628319
CONST	ENDS
;	COMDAT __real@3faacee9f0000000
CONST	SEGMENT
__real@3faacee9f0000000 DQ 03faacee9f0000000r	; 0.0523599
CONST	ENDS
;	COMDAT __real@3f9c61aa
CONST	SEGMENT
__real@3f9c61aa DD 03f9c61aar			; 1.22173
CONST	ENDS
;	COMDAT __real@3f99999a
CONST	SEGMENT
__real@3f99999a DD 03f99999ar			; 1.2
CONST	ENDS
;	COMDAT __real@3f91df46a0000000
CONST	SEGMENT
__real@3f91df46a0000000 DQ 03f91df46a0000000r	; 0.0174533
CONST	ENDS
;	COMDAT __real@3f860a92
CONST	SEGMENT
__real@3f860a92 DD 03f860a92r			; 1.0472
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f6f364304fdf3b6
CONST	SEGMENT
__real@3f6f364304fdf3b6 DQ 03f6f364304fdf3b6r	; 0.00381005
CONST	ENDS
;	COMDAT __real@3f685696
CONST	SEGMENT
__real@3f685696 DD 03f685696r			; 0.907571
CONST	ENDS
;	COMDAT __real@3f5f66f3
CONST	SEGMENT
__real@3f5f66f3 DD 03f5f66f3r			; 0.872665
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3f47c1bda5119ce0
CONST	SEGMENT
__real@3f47c1bda5119ce0 DQ 03f47c1bda5119ce0r	; 0.000725
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ea9c91f
CONST	SEGMENT
__real@3ea9c91f DD 03ea9c91fr			; 0.331613
CONST	ENDS
;	COMDAT __real@3db2b8c2
CONST	SEGMENT
__real@3db2b8c2 DD 03db2b8c2r			; 0.0872665
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05MAJJAKPI@FALSE@
CONST	SEGMENT
??_C@_05MAJJAKPI@FALSE@ DB 'FALSE', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??update_mi24_weapon_status_lights@@YGXPAUOBJECT_3D_SUB_INSTANCE@@00@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_mi24_weapon_status_lights@@YGXPAUOBJECT_3D_SUB_INSTANCE@@00@Z@4JA DD 0242H ; `update_mi24_weapon_status_lights'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??update_mi24_waypoint_indicator@@YGXPAM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_mi24_waypoint_indicator@@YGXPAM@Z@4JA DD 0232H ; `update_mi24_waypoint_indicator'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_mi24_clock_hand_values@@YGXPAM00@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_mi24_clock_hand_values@@YGXPAM00@Z@4JA DD 020aH ; `get_mi24_clock_hand_values'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_hind_virtual_cockpit_hsi_needle_values@@YGXPAM00@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_hind_virtual_cockpit_hsi_needle_values@@YGXPAM00@Z@4JA DD 012bH ; `get_hind_virtual_cockpit_hsi_needle_values'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05BPGNBDFG@drift@
CONST	SEGMENT
??_C@_05BPGNBDFG@drift@ DB 'drift', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GOBOJDMO@flight_path@
CONST	SEGMENT
??_C@_0M@GOBOJDMO@flight_path@ DB 'flight_path', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PFAKKLCO@direction_finder@
CONST	SEGMENT
??_C@_0BB@PFAKKLCO@direction_finder@ DB 'direction_finder', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@OGHPEEJN@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EO@OGHPEEJN@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\gunships\cockpits\hind\hi_in'
	DB	'str.c', 00H					; `string'
CONST	ENDS
_DATA	SEGMENT
?flight_path_value@?L@??get_hsi_needle_values@@YGXPAM00@Z@4MA DD 03fc90fdbr ; 1.5708 ; `get_hsi_needle_values'::`11'::flight_path_value
?drift_value@?L@??get_hsi_needle_values@@YGXPAM00@Z@4MA DD 0beb2b8c2r ; -0.349066 ; `get_hsi_needle_values'::`11'::drift_value
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_hsi_needle_values@@YGXPAM00@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_hsi_needle_values@@YGXPAM00@Z@4JA DD 062H ; `get_hsi_needle_values'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@N@std@@YGABNABN0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@N@std@@YGABNABN0@Z PROC				; std::max<double>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00013	66 0f 2f 01	 comisd	 xmm0, QWORD PTR [ecx]
  00017	76 65		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00019	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001f	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00023	66 0f 2f 01	 comisd	 xmm0, QWORD PTR [ecx]
  00027	77 02		 ja	 SHORT $LN9@max
  00029	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00035	6a 00		 push	 0
  00037	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00041	6a 02		 push	 2
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00049	83 c4 18	 add	 esp, 24			; 00000018H
  0004c	83 f8 01	 cmp	 eax, 1
  0004f	75 01		 jne	 SHORT $LN12@max
  00051	cc		 int	 3
$LN12@max:
  00052	6a 00		 push	 0
  00054	68 0e 15 00 00	 push	 5390			; 0000150eH
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006e	83 c4 14	 add	 esp, 20			; 00000014H
  00071	33 c0		 xor	 eax, eax
  00073	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00075	33 c0		 xor	 eax, eax
  00077	75 a0		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00079	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007c	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 08 00	 ret	 8
??$max@N@std@@YGABNABN0@Z ENDP				; std::max<double>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\hind\hi_instr.c
;	COMDAT ?get_hsi_needle_values@@YGXPAM00@Z
_TEXT	SEGMENT
tv297 = -196						; size = 8
tv298 = -188						; size = 8
tv217 = -188						; size = 4
tv173 = -188						; size = 4
tv153 = -188						; size = 4
tv209 = -184						; size = 4
tv165 = -184						; size = 4
tv145 = -184						; size = 4
_v2$ = -116						; size = 8
_v1$ = -108						; size = 8
_prev_wp_position$ = -100				; size = 12
_wp_position$ = -88					; size = 12
_en_position$ = -76					; size = 4
_wind_vector$ = -72					; size = 12
_motion_vector$ = -60					; size = 4
_prev_wp$ = -56						; size = 4
_wp$ = -52						; size = 4
_en$ = -48						; size = 4
_cross_product$ = -44					; size = 4
_dot_product$ = -40					; size = 4
_length2$ = -36						; size = 4
_length1$ = -32						; size = 4
_bearing$ = -28						; size = 4
_heading$ = -24						; size = 4
_dz$ = -20						; size = 4
_dx$ = -16						; size = 4
_drift_needle_value$ = -12				; size = 4
_flight_path_needle_value$ = -8				; size = 4
_direction_finder_needle_value$ = -4			; size = 4
_direction_finder$ = 8					; size = 4
_flight_path$ = 12					; size = 4
_drift$ = 16						; size = 4
?get_hsi_needle_values@@YGXPAM00@Z PROC			; get_hsi_needle_values, COMDAT

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 99   : 	float
; 100  : 		direction_finder_needle_value,
; 101  : 		flight_path_needle_value,
; 102  : 		drift_needle_value,
; 103  : 		dx,
; 104  : 		dz,
; 105  : 		heading,
; 106  : 		bearing,
; 107  : 		length1,
; 108  : 		length2,
; 109  : 		dot_product,
; 110  : 		cross_product;
; 111  : 
; 112  : 	entity
; 113  : 		*en,
; 114  : 		*wp,
; 115  : 		*prev_wp;
; 116  : 
; 117  : 	vec3d
; 118  : 		*motion_vector,
; 119  : 		wind_vector,
; 120  : 		*en_position,
; 121  : 		wp_position,
; 122  : 		prev_wp_position;
; 123  : 
; 124  : 	vec2d
; 125  : 		v1,
; 126  : 		v2;
; 127  : 
; 128  : 	ASSERT (direction_finder);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _direction_finder$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@get_hsi_ne
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_hsi_needle_values@@YGXPAM00@Z@4JA
  00017	83 c0 1e	 add	 eax, 30			; 0000001eH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OGHPEEJN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@PFAKKLCO@direction_finder@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_hsi_ne:

; 129  : 
; 130  : 	ASSERT (flight_path);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _flight_path$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN3@get_hsi_ne
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_hsi_needle_values@@YGXPAM00@Z@4JA
  00035	83 c0 20	 add	 eax, 32			; 00000020H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OGHPEEJN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GOBOJDMO@flight_path@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_hsi_ne:

; 131  : 
; 132  : 	ASSERT (drift);

  00048	83 7d 10 00	 cmp	 DWORD PTR _drift$[ebp], 0
  0004c	75 18		 jne	 SHORT $LN4@get_hsi_ne
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_hsi_needle_values@@YGXPAM00@Z@4JA
  00053	83 c0 22	 add	 eax, 34			; 00000022H
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OGHPEEJN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_05BPGNBDFG@drift@
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_hsi_ne:

; 133  : 
; 134  : 	direction_finder_needle_value = 0.0;

  00066	0f 57 c0	 xorps	 xmm0, xmm0
  00069	f3 0f 11 45 fc	 movss	 DWORD PTR _direction_finder_needle_value$[ebp], xmm0

; 135  : 
; 136  : 	flight_path_needle_value = 0.0;

  0006e	0f 57 c0	 xorps	 xmm0, xmm0
  00071	f3 0f 11 45 f8	 movss	 DWORD PTR _flight_path_needle_value$[ebp], xmm0

; 137  : 
; 138  : 	drift_needle_value = 0.0;

  00076	0f 57 c0	 xorps	 xmm0, xmm0
  00079	f3 0f 11 45 f4	 movss	 DWORD PTR _drift_needle_value$[ebp], xmm0

; 139  : 
; 140  : 	if (test_cockpit_instruments)

  0007e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?test_cockpit_instruments@@3HA, 0 ; test_cockpit_instruments
  00085	0f 84 fe 00 00
	00		 je	 $LN5@get_hsi_ne

; 141  : 	{
; 142  : 		static float
; 143  : 			direction_finder_value = rad (0.0),
; 144  : 			flight_path_value = rad (90.0),
; 145  : 			drift_value = rad (-20.0);
; 146  : 
; 147  : 		//
; 148  : 		// automatic direction finder
; 149  : 		//
; 150  : 
; 151  : 		direction_finder_value += rad (5.0);

  0008b	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?direction_finder_value@?L@??get_hsi_needle_values@@YGXPAM00@Z@4MA
  00093	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb6571848000000
  0009b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0009f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?direction_finder_value@?L@??get_hsi_needle_values@@YGXPAM00@Z@4MA, xmm0

; 152  : 
; 153  : 		if (direction_finder_value > rad (360.0))

  000a7	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?direction_finder_value@?L@??get_hsi_needle_values@@YGXPAM00@Z@4MA
  000af	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@401921fb51000000
  000b7	76 1c		 jbe	 SHORT $LN7@get_hsi_ne

; 154  : 		{
; 155  : 			direction_finder_value -= rad (360.0);

  000b9	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?direction_finder_value@?L@??get_hsi_needle_values@@YGXPAM00@Z@4MA
  000c1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401921fb51000000
  000c9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000cd	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?direction_finder_value@?L@??get_hsi_needle_values@@YGXPAM00@Z@4MA, xmm0
$LN7@get_hsi_ne:

; 156  : 		}
; 157  : 
; 158  : 		direction_finder_needle_value = direction_finder_value;

  000d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?direction_finder_value@?L@??get_hsi_needle_values@@YGXPAM00@Z@4MA
  000dd	f3 0f 11 45 fc	 movss	 DWORD PTR _direction_finder_needle_value$[ebp], xmm0

; 159  : 
; 160  : 		//
; 161  : 		// flight path
; 162  : 		//
; 163  : 
; 164  : 		flight_path_value += rad (3.0);

  000e2	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?flight_path_value@?L@??get_hsi_needle_values@@YGXPAM00@Z@4MA
  000ea	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3faacee9f0000000
  000f2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000f6	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?flight_path_value@?L@??get_hsi_needle_values@@YGXPAM00@Z@4MA, xmm0

; 165  : 
; 166  : 		if (flight_path_value > rad (360.0))

  000fe	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?flight_path_value@?L@??get_hsi_needle_values@@YGXPAM00@Z@4MA
  00106	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@401921fb51000000
  0010e	76 1c		 jbe	 SHORT $LN8@get_hsi_ne

; 167  : 		{
; 168  : 			flight_path_value -= rad (360.0);

  00110	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?flight_path_value@?L@??get_hsi_needle_values@@YGXPAM00@Z@4MA
  00118	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401921fb51000000
  00120	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00124	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?flight_path_value@?L@??get_hsi_needle_values@@YGXPAM00@Z@4MA, xmm0
$LN8@get_hsi_ne:

; 169  : 		}
; 170  : 
; 171  : 		flight_path_needle_value = flight_path_value;

  0012c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?flight_path_value@?L@??get_hsi_needle_values@@YGXPAM00@Z@4MA
  00134	f3 0f 11 45 f8	 movss	 DWORD PTR _flight_path_needle_value$[ebp], xmm0

; 172  : 
; 173  : 		//
; 174  : 		// drift
; 175  : 		//
; 176  : 
; 177  : 		drift_value += rad (1.0);

  00139	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?drift_value@?L@??get_hsi_needle_values@@YGXPAM00@Z@4MA
  00141	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f91df46a0000000
  00149	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0014d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?drift_value@?L@??get_hsi_needle_values@@YGXPAM00@Z@4MA, xmm0

; 178  : 
; 179  : 		if (drift_value > rad (35.0))

  00155	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?drift_value@?L@??get_hsi_needle_values@@YGXPAM00@Z@4MA
  0015d	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fe38c353f000000
  00165	76 10		 jbe	 SHORT $LN9@get_hsi_ne

; 180  : 		{
; 181  : 			drift_value = rad (-35.0);

  00167	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf1c61aa
  0016f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?drift_value@?L@??get_hsi_needle_values@@YGXPAM00@Z@4MA, xmm0
$LN9@get_hsi_ne:

; 182  : 		}
; 183  : 
; 184  : 		drift_needle_value = drift_value;

  00177	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?drift_value@?L@??get_hsi_needle_values@@YGXPAM00@Z@4MA
  0017f	f3 0f 11 45 f4	 movss	 DWORD PTR _drift_needle_value$[ebp], xmm0

; 185  : 	}
; 186  : 	else

  00184	e9 3d 04 00 00	 jmp	 $LN16@get_hsi_ne
$LN5@get_hsi_ne:

; 187  : 	{
; 188  : 		if (!hind_damage.navigation_computer)

  00189	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hind_damage@@3THIND_DAMAGE_FLAGS@@A ; hind_damage
  0018e	c1 e8 09	 shr	 eax, 9
  00191	83 e0 01	 and	 eax, 1
  00194	0f 85 2c 04 00
	00		 jne	 $LN16@get_hsi_ne

; 189  : 		{
; 190  : 			en = get_gunship_entity ();

  0019a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0019f	89 45 d0	 mov	 DWORD PTR _en$[ebp], eax

; 191  : 
; 192  : 			wp = get_local_entity_current_waypoint (en);

  001a2	8b 45 d0	 mov	 eax, DWORD PTR _en$[ebp]
  001a5	50		 push	 eax
  001a6	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  001ab	89 45 cc	 mov	 DWORD PTR _wp$[ebp], eax

; 193  : 
; 194  : 			if (wp)

  001ae	83 7d cc 00	 cmp	 DWORD PTR _wp$[ebp], 0
  001b2	0f 84 0e 04 00
	00		 je	 $LN16@get_hsi_ne

; 195  : 			{
; 196  : 				//
; 197  : 				// automatic direction finder
; 198  : 				//
; 199  : 
; 200  : 				heading = get_local_entity_float_value (en, FLOAT_TYPE_HEADING);

  001b8	83 7d d0 00	 cmp	 DWORD PTR _en$[ebp], 0
  001bc	74 0d		 je	 SHORT $LN18@get_hsi_ne
  001be	8b 45 d0	 mov	 eax, DWORD PTR _en$[ebp]
  001c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  001c3	89 8d 48 ff ff
	ff		 mov	 DWORD PTR tv145[ebp], ecx
  001c9	eb 24		 jmp	 SHORT $LN19@get_hsi_ne
$LN18@get_hsi_ne:
  001cb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_hsi_needle_values@@YGXPAM00@Z@4JA
  001d1	83 c2 66	 add	 edx, 102		; 00000066H
  001d4	52		 push	 edx
  001d5	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OGHPEEJN@c?3?2users?2nhv90?2projects?2eech?2ap@
  001da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001df	50		 push	 eax
  001e0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001e5	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv145[ebp], 0
$LN19@get_hsi_ne:
  001ef	b9 01 00 00 00	 mov	 ecx, 1
  001f4	85 c9		 test	 ecx, ecx
  001f6	74 0c		 je	 SHORT $LN20@get_hsi_ne
  001f8	c7 85 44 ff ff
	ff 34 00 00 00	 mov	 DWORD PTR tv153[ebp], 52 ; 00000034H
  00202	eb 24		 jmp	 SHORT $LN21@get_hsi_ne
$LN20@get_hsi_ne:
  00204	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_hsi_needle_values@@YGXPAM00@Z@4JA
  0020a	83 c2 66	 add	 edx, 102		; 00000066H
  0020d	52		 push	 edx
  0020e	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OGHPEEJN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00213	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00218	50		 push	 eax
  00219	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0021e	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv153[ebp], 0
$LN21@get_hsi_ne:
  00228	6a 34		 push	 52			; 00000034H
  0022a	8b 4d d0	 mov	 ecx, DWORD PTR _en$[ebp]
  0022d	51		 push	 ecx
  0022e	69 95 48 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv145[ebp], 700
  00238	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR tv153[ebp]
  0023e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00245	ff d1		 call	 ecx
  00247	d9 5d e8	 fstp	 DWORD PTR _heading$[ebp]

; 201  : 
; 202  : 				en_position = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_POSITION);

  0024a	83 7d d0 00	 cmp	 DWORD PTR _en$[ebp], 0
  0024e	74 0d		 je	 SHORT $LN22@get_hsi_ne
  00250	8b 45 d0	 mov	 eax, DWORD PTR _en$[ebp]
  00253	8b 08		 mov	 ecx, DWORD PTR [eax]
  00255	89 8d 48 ff ff
	ff		 mov	 DWORD PTR tv165[ebp], ecx
  0025b	eb 24		 jmp	 SHORT $LN23@get_hsi_ne
$LN22@get_hsi_ne:
  0025d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_hsi_needle_values@@YGXPAM00@Z@4JA
  00263	83 c2 68	 add	 edx, 104		; 00000068H
  00266	52		 push	 edx
  00267	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OGHPEEJN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0026c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00271	50		 push	 eax
  00272	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00277	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv165[ebp], 0
$LN23@get_hsi_ne:
  00281	b9 01 00 00 00	 mov	 ecx, 1
  00286	85 c9		 test	 ecx, ecx
  00288	74 0c		 je	 SHORT $LN24@get_hsi_ne
  0028a	c7 85 44 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv173[ebp], 8
  00294	eb 24		 jmp	 SHORT $LN25@get_hsi_ne
$LN24@get_hsi_ne:
  00296	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_hsi_needle_values@@YGXPAM00@Z@4JA
  0029c	83 c2 68	 add	 edx, 104		; 00000068H
  0029f	52		 push	 edx
  002a0	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OGHPEEJN@c?3?2users?2nhv90?2projects?2eech?2ap@
  002a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  002aa	50		 push	 eax
  002ab	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002b0	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv173[ebp], 0
$LN25@get_hsi_ne:
  002ba	6a 08		 push	 8
  002bc	8b 4d d0	 mov	 ecx, DWORD PTR _en$[ebp]
  002bf	51		 push	 ecx
  002c0	6b 95 48 ff ff
	ff 60		 imul	 edx, DWORD PTR tv165[ebp], 96
  002c7	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR tv173[ebp]
  002cd	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  002d4	ff d1		 call	 ecx
  002d6	89 45 b4	 mov	 DWORD PTR _en_position$[ebp], eax

; 203  : 
; 204  : 				get_waypoint_display_position (en, wp, &wp_position);

  002d9	8d 45 a8	 lea	 eax, DWORD PTR _wp_position$[ebp]
  002dc	50		 push	 eax
  002dd	8b 4d cc	 mov	 ecx, DWORD PTR _wp$[ebp]
  002e0	51		 push	 ecx
  002e1	8b 55 d0	 mov	 edx, DWORD PTR _en$[ebp]
  002e4	52		 push	 edx
  002e5	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 205  : 
; 206  : 				dx = wp_position.x - en_position->x;

  002ea	8b 45 b4	 mov	 eax, DWORD PTR _en_position$[ebp]
  002ed	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _wp_position$[ebp]
  002f2	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  002f6	f3 0f 11 45 f0	 movss	 DWORD PTR _dx$[ebp], xmm0

; 207  : 				dz = wp_position.z - en_position->z;

  002fb	8b 45 b4	 mov	 eax, DWORD PTR _en_position$[ebp]
  002fe	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _wp_position$[ebp+8]
  00303	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00308	f3 0f 11 45 ec	 movss	 DWORD PTR _dz$[ebp], xmm0

; 208  : 
; 209  : 				bearing = atan2 (dx, dz);

  0030d	51		 push	 ecx
  0030e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dz$[ebp]
  00313	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00318	51		 push	 ecx
  00319	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0031e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00323	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  00328	d9 5d e4	 fstp	 DWORD PTR _bearing$[ebp]

; 210  : 
; 211  : 				direction_finder_needle_value = bearing - heading;

  0032b	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _bearing$[ebp]
  00330	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _heading$[ebp]
  00335	f3 0f 11 45 fc	 movss	 DWORD PTR _direction_finder_needle_value$[ebp], xmm0

; 212  : 
; 213  : 				//
; 214  : 				// flight path
; 215  : 				//
; 216  : 
; 217  : 				prev_wp = get_local_entity_prev_waypoint (en);

  0033a	8b 45 d0	 mov	 eax, DWORD PTR _en$[ebp]
  0033d	50		 push	 eax
  0033e	e8 00 00 00 00	 call	 ?get_local_entity_prev_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_prev_waypoint
  00343	89 45 c8	 mov	 DWORD PTR _prev_wp$[ebp], eax

; 218  : 
; 219  : 				if ((prev_wp) && (prev_wp != wp))

  00346	83 7d c8 00	 cmp	 DWORD PTR _prev_wp$[ebp], 0
  0034a	74 66		 je	 SHORT $LN12@get_hsi_ne
  0034c	8b 45 c8	 mov	 eax, DWORD PTR _prev_wp$[ebp]
  0034f	3b 45 cc	 cmp	 eax, DWORD PTR _wp$[ebp]
  00352	74 5e		 je	 SHORT $LN12@get_hsi_ne

; 220  : 				{
; 221  : 					get_waypoint_display_position (en, prev_wp, &prev_wp_position);

  00354	8d 45 9c	 lea	 eax, DWORD PTR _prev_wp_position$[ebp]
  00357	50		 push	 eax
  00358	8b 4d c8	 mov	 ecx, DWORD PTR _prev_wp$[ebp]
  0035b	51		 push	 ecx
  0035c	8b 55 d0	 mov	 edx, DWORD PTR _en$[ebp]
  0035f	52		 push	 edx
  00360	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 222  : 
; 223  : 					dx = wp_position.x - prev_wp_position.x;

  00365	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _wp_position$[ebp]
  0036a	f3 0f 5c 45 9c	 subss	 xmm0, DWORD PTR _prev_wp_position$[ebp]
  0036f	f3 0f 11 45 f0	 movss	 DWORD PTR _dx$[ebp], xmm0

; 224  : 					dz = wp_position.z - prev_wp_position.z;

  00374	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _wp_position$[ebp+8]
  00379	f3 0f 5c 45 a4	 subss	 xmm0, DWORD PTR _prev_wp_position$[ebp+8]
  0037e	f3 0f 11 45 ec	 movss	 DWORD PTR _dz$[ebp], xmm0

; 225  : 
; 226  : 					bearing = atan2 (dx, dz);

  00383	51		 push	 ecx
  00384	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dz$[ebp]
  00389	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038e	51		 push	 ecx
  0038f	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00394	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00399	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  0039e	d9 5d e4	 fstp	 DWORD PTR _bearing$[ebp]

; 227  : 
; 228  : 					flight_path_needle_value = bearing - heading;

  003a1	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _bearing$[ebp]
  003a6	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _heading$[ebp]
  003ab	f3 0f 11 45 f8	 movss	 DWORD PTR _flight_path_needle_value$[ebp], xmm0

; 229  : 				}
; 230  : 				else

  003b0	eb 0a		 jmp	 SHORT $LN13@get_hsi_ne
$LN12@get_hsi_ne:

; 231  : 				{
; 232  : 					flight_path_needle_value = direction_finder_needle_value;

  003b2	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _direction_finder_needle_value$[ebp]
  003b7	f3 0f 11 45 f8	 movss	 DWORD PTR _flight_path_needle_value$[ebp], xmm0
$LN13@get_hsi_ne:

; 233  : 				}
; 234  : 
; 235  : 				//
; 236  : 				// drift
; 237  : 				//
; 238  : 
; 239  : 				drift_needle_value = 0.0;

  003bc	0f 57 c0	 xorps	 xmm0, xmm0
  003bf	f3 0f 11 45 f4	 movss	 DWORD PTR _drift_needle_value$[ebp], xmm0

; 240  : 
; 241  : 				motion_vector = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_MOTION_VECTOR);

  003c4	83 7d d0 00	 cmp	 DWORD PTR _en$[ebp], 0
  003c8	74 0d		 je	 SHORT $LN26@get_hsi_ne
  003ca	8b 45 d0	 mov	 eax, DWORD PTR _en$[ebp]
  003cd	8b 08		 mov	 ecx, DWORD PTR [eax]
  003cf	89 8d 48 ff ff
	ff		 mov	 DWORD PTR tv209[ebp], ecx
  003d5	eb 27		 jmp	 SHORT $LN27@get_hsi_ne
$LN26@get_hsi_ne:
  003d7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_hsi_needle_values@@YGXPAM00@Z@4JA
  003dd	81 c2 8f 00 00
	00		 add	 edx, 143		; 0000008fH
  003e3	52		 push	 edx
  003e4	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OGHPEEJN@c?3?2users?2nhv90?2projects?2eech?2ap@
  003e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003ee	50		 push	 eax
  003ef	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003f4	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv209[ebp], 0
$LN27@get_hsi_ne:
  003fe	b9 01 00 00 00	 mov	 ecx, 1
  00403	85 c9		 test	 ecx, ecx
  00405	74 0c		 je	 SHORT $LN28@get_hsi_ne
  00407	c7 85 44 ff ff
	ff 06 00 00 00	 mov	 DWORD PTR tv217[ebp], 6
  00411	eb 27		 jmp	 SHORT $LN29@get_hsi_ne
$LN28@get_hsi_ne:
  00413	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_hsi_needle_values@@YGXPAM00@Z@4JA
  00419	81 c2 8f 00 00
	00		 add	 edx, 143		; 0000008fH
  0041f	52		 push	 edx
  00420	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OGHPEEJN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00425	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0042a	50		 push	 eax
  0042b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00430	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv217[ebp], 0
$LN29@get_hsi_ne:
  0043a	6a 06		 push	 6
  0043c	8b 4d d0	 mov	 ecx, DWORD PTR _en$[ebp]
  0043f	51		 push	 ecx
  00440	6b 95 48 ff ff
	ff 60		 imul	 edx, DWORD PTR tv209[ebp], 96
  00447	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR tv217[ebp]
  0044d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00454	ff d1		 call	 ecx
  00456	89 45 c4	 mov	 DWORD PTR _motion_vector$[ebp], eax

; 242  : 
; 243  : 				v1.x = motion_vector->x;

  00459	8b 45 c4	 mov	 eax, DWORD PTR _motion_vector$[ebp]
  0045c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00460	f3 0f 11 45 94	 movss	 DWORD PTR _v1$[ebp], xmm0

; 244  : 				v1.y = motion_vector->z;

  00465	8b 45 c4	 mov	 eax, DWORD PTR _motion_vector$[ebp]
  00468	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0046d	f3 0f 11 45 98	 movss	 DWORD PTR _v1$[ebp+4], xmm0

; 245  : 
; 246  : 				length1 = (v1.x * v1.x) + (v1.y * v1.y);

  00472	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _v1$[ebp]
  00477	f3 0f 59 45 94	 mulss	 xmm0, DWORD PTR _v1$[ebp]
  0047c	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR _v1$[ebp+4]
  00481	f3 0f 59 4d 98	 mulss	 xmm1, DWORD PTR _v1$[ebp+4]
  00486	f3 0f 58 c1	 addss	 xmm0, xmm1
  0048a	f3 0f 11 45 e0	 movss	 DWORD PTR _length1$[ebp], xmm0

; 247  : 
; 248  : 				if (length1 > 0.001)

  0048f	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _length1$[ebp]
  00494	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0049c	0f 86 24 01 00
	00		 jbe	 $LN16@get_hsi_ne

; 249  : 				{
; 250  : 					length1 = sqrt (length1);

  004a2	51		 push	 ecx
  004a3	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _length1$[ebp]
  004a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ad	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  004b2	d9 5d e0	 fstp	 DWORD PTR _length1$[ebp]

; 251  : 
; 252  : 					v1.x /= length1;

  004b5	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _v1$[ebp]
  004ba	f3 0f 5e 45 e0	 divss	 xmm0, DWORD PTR _length1$[ebp]
  004bf	f3 0f 11 45 94	 movss	 DWORD PTR _v1$[ebp], xmm0

; 253  : 					v1.y /= length1;

  004c4	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _v1$[ebp+4]
  004c9	f3 0f 5e 45 e0	 divss	 xmm0, DWORD PTR _length1$[ebp]
  004ce	f3 0f 11 45 98	 movss	 DWORD PTR _v1$[ebp+4], xmm0

; 254  : 
; 255  : 					get_session_wind_velocity_at_point (en_position, &wind_vector);

  004d3	8d 45 b8	 lea	 eax, DWORD PTR _wind_vector$[ebp]
  004d6	50		 push	 eax
  004d7	8b 4d b4	 mov	 ecx, DWORD PTR _en_position$[ebp]
  004da	51		 push	 ecx
  004db	e8 00 00 00 00	 call	 ?get_session_wind_velocity_at_point@@YGMPAUVEC3D@@0@Z ; get_session_wind_velocity_at_point
  004e0	dd d8		 fstp	 ST(0)

; 256  : 
; 257  : 					v2.x = motion_vector->x + wind_vector.x;

  004e2	8b 45 c4	 mov	 eax, DWORD PTR _motion_vector$[ebp]
  004e5	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  004e9	f3 0f 58 45 b8	 addss	 xmm0, DWORD PTR _wind_vector$[ebp]
  004ee	f3 0f 11 45 8c	 movss	 DWORD PTR _v2$[ebp], xmm0

; 258  : 					v2.y = motion_vector->z + wind_vector.z;

  004f3	8b 45 c4	 mov	 eax, DWORD PTR _motion_vector$[ebp]
  004f6	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  004fb	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _wind_vector$[ebp+8]
  00500	f3 0f 11 45 90	 movss	 DWORD PTR _v2$[ebp+4], xmm0

; 259  : 
; 260  : 					length2 = (v2.x * v2.x) + (v2.y * v2.y);

  00505	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _v2$[ebp]
  0050a	f3 0f 59 45 8c	 mulss	 xmm0, DWORD PTR _v2$[ebp]
  0050f	f3 0f 10 4d 90	 movss	 xmm1, DWORD PTR _v2$[ebp+4]
  00514	f3 0f 59 4d 90	 mulss	 xmm1, DWORD PTR _v2$[ebp+4]
  00519	f3 0f 58 c1	 addss	 xmm0, xmm1
  0051d	f3 0f 11 45 dc	 movss	 DWORD PTR _length2$[ebp], xmm0

; 261  : 
; 262  : 					if (length2 > 0.001)

  00522	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _length2$[ebp]
  00527	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0052f	0f 86 91 00 00
	00		 jbe	 $LN16@get_hsi_ne

; 263  : 					{
; 264  : 						length2 = sqrt (length2);

  00535	51		 push	 ecx
  00536	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _length2$[ebp]
  0053b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00540	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  00545	d9 5d dc	 fstp	 DWORD PTR _length2$[ebp]

; 265  : 
; 266  : 						v2.x /= length2;

  00548	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _v2$[ebp]
  0054d	f3 0f 5e 45 dc	 divss	 xmm0, DWORD PTR _length2$[ebp]
  00552	f3 0f 11 45 8c	 movss	 DWORD PTR _v2$[ebp], xmm0

; 267  : 						v2.y /= length2;

  00557	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _v2$[ebp+4]
  0055c	f3 0f 5e 45 dc	 divss	 xmm0, DWORD PTR _length2$[ebp]
  00561	f3 0f 11 45 90	 movss	 DWORD PTR _v2$[ebp+4], xmm0

; 268  : 
; 269  : 						dot_product = get_2d_unit_vector_dot_product (&v1, &v2);

  00566	8d 45 8c	 lea	 eax, DWORD PTR _v2$[ebp]
  00569	50		 push	 eax
  0056a	8d 4d 94	 lea	 ecx, DWORD PTR _v1$[ebp]
  0056d	51		 push	 ecx
  0056e	e8 00 00 00 00	 call	 ?get_2d_unit_vector_dot_product@@YGMPBUVEC2D@@0@Z ; get_2d_unit_vector_dot_product
  00573	d9 5d d8	 fstp	 DWORD PTR _dot_product$[ebp]

; 270  : 
; 271  : 						drift_needle_value = acos (dot_product);

  00576	51		 push	 ecx
  00577	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _dot_product$[ebp]
  0057c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00581	e8 00 00 00 00	 call	 ?acos@@YGMM@Z		; acos
  00586	d9 5d f4	 fstp	 DWORD PTR _drift_needle_value$[ebp]

; 272  : 
; 273  : 						cross_product = (v1.x * v2.y) - (v2.x * v1.y);

  00589	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _v1$[ebp]
  0058e	f3 0f 59 45 90	 mulss	 xmm0, DWORD PTR _v2$[ebp+4]
  00593	f3 0f 10 4d 8c	 movss	 xmm1, DWORD PTR _v2$[ebp]
  00598	f3 0f 59 4d 98	 mulss	 xmm1, DWORD PTR _v1$[ebp+4]
  0059d	f3 0f 5c c1	 subss	 xmm0, xmm1
  005a1	f3 0f 11 45 d4	 movss	 DWORD PTR _cross_product$[ebp], xmm0

; 274  : 
; 275  : 						if (cross_product > 0.0)

  005a6	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _cross_product$[ebp]
  005ab	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  005b3	76 11		 jbe	 SHORT $LN16@get_hsi_ne

; 276  : 						{
; 277  : 							drift_needle_value = -drift_needle_value;

  005b5	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _drift_needle_value$[ebp]
  005ba	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  005c1	f3 0f 11 45 f4	 movss	 DWORD PTR _drift_needle_value$[ebp], xmm0
$LN16@get_hsi_ne:

; 278  : 						}
; 279  : 					}
; 280  : 				}
; 281  : 			}
; 282  : 		}
; 283  : 	}
; 284  : 
; 285  : 	drift_needle_value = bound (drift_needle_value, rad (-30.0), rad (30.0));

  005c6	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _drift_needle_value$[ebp]
  005cb	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bfe0c15236000000
  005d3	66 0f 2f c8	 comisd	 xmm1, xmm0
  005d7	76 12		 jbe	 SHORT $LN32@get_hsi_ne
  005d9	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bfe0c15236000000
  005e1	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv298[ebp], xmm0
  005e9	eb 3e		 jmp	 SHORT $LN33@get_hsi_ne
$LN32@get_hsi_ne:
  005eb	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _drift_needle_value$[ebp]
  005f0	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fe0c15236000000
  005f8	76 12		 jbe	 SHORT $LN30@get_hsi_ne
  005fa	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fe0c15236000000
  00602	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv297[ebp], xmm0
  0060a	eb 0d		 jmp	 SHORT $LN31@get_hsi_ne
$LN30@get_hsi_ne:
  0060c	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _drift_needle_value$[ebp]
  00611	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv297[ebp], xmm0
$LN31@get_hsi_ne:
  00619	f2 0f 10 85 3c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv297[ebp]
  00621	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv298[ebp], xmm0
$LN33@get_hsi_ne:
  00629	f2 0f 5a 85 44
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv298[ebp]
  00631	f3 0f 11 45 f4	 movss	 DWORD PTR _drift_needle_value$[ebp], xmm0

; 286  : 
; 287  : 	*direction_finder = direction_finder_needle_value;

  00636	8b 45 08	 mov	 eax, DWORD PTR _direction_finder$[ebp]
  00639	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _direction_finder_needle_value$[ebp]
  0063e	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 288  : 
; 289  : 	*flight_path = flight_path_needle_value;

  00642	8b 45 0c	 mov	 eax, DWORD PTR _flight_path$[ebp]
  00645	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _flight_path_needle_value$[ebp]
  0064a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 290  : 
; 291  : 	*drift = drift_needle_value;

  0064e	8b 45 10	 mov	 eax, DWORD PTR _drift$[ebp]
  00651	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _drift_needle_value$[ebp]
  00656	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 292  : }

  0065a	5f		 pop	 edi
  0065b	5e		 pop	 esi
  0065c	5b		 pop	 ebx
  0065d	8b e5		 mov	 esp, ebp
  0065f	5d		 pop	 ebp
  00660	c2 0c 00	 ret	 12			; 0000000cH
?get_hsi_needle_values@@YGXPAM00@Z ENDP			; get_hsi_needle_values
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\hind\hi_instr.c
;	COMDAT ?update_mi24_engine_gauges@@YGXPAM000@Z
_TEXT	SEGMENT
tv134 = -100						; size = 8
tv80 = -100						; size = 8
tv135 = -92						; size = 8
tv81 = -92						; size = 8
_rpres$ = -20						; size = 4
_lpres$ = -16						; size = 4
_temp$ = -12						; size = 4
_max_pressure_movement$ = -8				; size = 4
_max_temp_movement$ = -4				; size = 4
_left_temp$ = 8						; size = 4
_right_temp$ = 12					; size = 4
_left_pressure$ = 16					; size = 4
_right_pressure$ = 20					; size = 4
?update_mi24_engine_gauges@@YGXPAM000@Z PROC		; update_mi24_engine_gauges, COMDAT

; 618  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 619  : 	float
; 620  : 		max_temp_movement = rad(5) * get_delta_time(),

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db2b8c2
  00011	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00019	f3 0f 11 45 fc	 movss	 DWORD PTR _max_temp_movement$[ebp], xmm0

; 621  : 		max_pressure_movement = rad(60) * get_delta_time(),

  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f860a92
  00026	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0002e	f3 0f 11 45 f8	 movss	 DWORD PTR _max_pressure_movement$[ebp], xmm0

; 622  : 		temp,
; 623  : 		lpres,
; 624  : 		rpres;
; 625  : 
; 626  : 	temp = bound(current_flight_dynamics->left_engine_temp.value * 0.001, 0.0, 1.0);

  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00038	f3 0f 5a 80 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7364]
  00040	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00048	0f 57 c9	 xorps	 xmm1, xmm1
  0004b	66 0f 2f c8	 comisd	 xmm1, xmm0
  0004f	76 0a		 jbe	 SHORT $LN19@update_mi2
  00051	0f 57 c0	 xorps	 xmm0, xmm0
  00054	f2 0f 11 45 a4	 movsd	 QWORD PTR tv81[ebp], xmm0
  00059	eb 54		 jmp	 SHORT $LN20@update_mi2
$LN19@update_mi2:
  0005b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00061	f3 0f 5a 81 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7364]
  00069	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00071	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  00079	76 0f		 jbe	 SHORT $LN17@update_mi2
  0007b	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00083	f2 0f 11 45 9c	 movsd	 QWORD PTR tv80[ebp], xmm0
  00088	eb 1b		 jmp	 SHORT $LN18@update_mi2
$LN17@update_mi2:
  0008a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00090	f3 0f 5a 82 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7364]
  00098	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  000a0	f2 0f 11 45 9c	 movsd	 QWORD PTR tv80[ebp], xmm0
$LN18@update_mi2:
  000a5	f2 0f 10 45 9c	 movsd	 xmm0, QWORD PTR tv80[ebp]
  000aa	f2 0f 11 45 a4	 movsd	 QWORD PTR tv81[ebp], xmm0
$LN20@update_mi2:
  000af	f2 0f 5a 45 a4	 cvtsd2ss xmm0, QWORD PTR tv81[ebp]
  000b4	f3 0f 11 45 f4	 movss	 DWORD PTR _temp$[ebp], xmm0

; 627  : 	modify_angle(left_temp, rad(100) - rad(70) * temp, max_temp_movement);

  000b9	51		 push	 ecx
  000ba	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _max_temp_movement$[ebp]
  000bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f9c61aa
  000cc	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _temp$[ebp]
  000d1	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3fdf66f3
  000d9	f3 0f 5c c8	 subss	 xmm1, xmm0
  000dd	51		 push	 ecx
  000de	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  000e3	8b 45 08	 mov	 eax, DWORD PTR _left_temp$[ebp]
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 ?modify_angle@@YGXPAMMM@Z ; modify_angle

; 628  : 
; 629  : 	temp = bound(current_flight_dynamics->right_engine_temp.value * 0.001, 0.0, 1.0);

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000f1	f3 0f 5a 80 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7460]
  000f9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00101	0f 57 c9	 xorps	 xmm1, xmm1
  00104	66 0f 2f c8	 comisd	 xmm1, xmm0
  00108	76 0a		 jbe	 SHORT $LN23@update_mi2
  0010a	0f 57 c0	 xorps	 xmm0, xmm0
  0010d	f2 0f 11 45 a4	 movsd	 QWORD PTR tv135[ebp], xmm0
  00112	eb 54		 jmp	 SHORT $LN24@update_mi2
$LN23@update_mi2:
  00114	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0011a	f3 0f 5a 81 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7460]
  00122	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0012a	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  00132	76 0f		 jbe	 SHORT $LN21@update_mi2
  00134	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0013c	f2 0f 11 45 9c	 movsd	 QWORD PTR tv134[ebp], xmm0
  00141	eb 1b		 jmp	 SHORT $LN22@update_mi2
$LN21@update_mi2:
  00143	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00149	f3 0f 5a 82 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7460]
  00151	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00159	f2 0f 11 45 9c	 movsd	 QWORD PTR tv134[ebp], xmm0
$LN22@update_mi2:
  0015e	f2 0f 10 45 9c	 movsd	 xmm0, QWORD PTR tv134[ebp]
  00163	f2 0f 11 45 a4	 movsd	 QWORD PTR tv135[ebp], xmm0
$LN24@update_mi2:
  00168	f2 0f 5a 45 a4	 cvtsd2ss xmm0, QWORD PTR tv135[ebp]
  0016d	f3 0f 11 45 f4	 movss	 DWORD PTR _temp$[ebp], xmm0

; 630  : 	modify_angle(right_temp, rad(100) - rad(70) * temp, max_temp_movement);

  00172	51		 push	 ecx
  00173	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _max_temp_movement$[ebp]
  00178	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f9c61aa
  00185	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _temp$[ebp]
  0018a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3fdf66f3
  00192	f3 0f 5c c8	 subss	 xmm1, xmm0
  00196	51		 push	 ecx
  00197	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  0019c	8b 45 0c	 mov	 eax, DWORD PTR _right_temp$[ebp]
  0019f	50		 push	 eax
  001a0	e8 00 00 00 00	 call	 ?modify_angle@@YGXPAMMM@Z ; modify_angle

; 631  : 
; 632  : 	if (electrical_system_active())

  001a5	e8 00 00 00 00	 call	 ?electrical_system_active@@YGHXZ ; electrical_system_active
  001aa	85 c0		 test	 eax, eax
  001ac	0f 84 d8 00 00
	00		 je	 $LN2@update_mi2

; 633  : 	{
; 634  : 		if ((current_flight_dynamics->dynamics_damage & DYNAMICS_DAMAGE_LEFT_ENGINE) != 0)

  001b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  001b7	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  001bd	83 e1 08	 and	 ecx, 8
  001c0	74 0a		 je	 SHORT $LN4@update_mi2

; 635  : 			lpres = 0.0;

  001c2	0f 57 c0	 xorps	 xmm0, xmm0
  001c5	f3 0f 11 45 f0	 movss	 DWORD PTR _lpres$[ebp], xmm0
  001ca	eb 51		 jmp	 SHORT $LN9@update_mi2
$LN4@update_mi2:

; 636  : 		else if ((current_flight_dynamics->dynamics_damage & DYNAMICS_DAMAGE_LOW_OIL_PRESSURE) != 0)

  001cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  001d1	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  001d7	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  001dd	74 0f		 je	 SHORT $LN6@update_mi2

; 637  : 			lpres = 0.5;

  001df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001e7	f3 0f 11 45 f0	 movss	 DWORD PTR _lpres$[ebp], xmm0
  001ec	eb 2f		 jmp	 SHORT $LN9@update_mi2
$LN6@update_mi2:

; 638  : 		else if ((current_flight_dynamics->dynamics_damage & DYNAMICS_DAMAGE_HIGH_OIL_PRESSURE) != 0)

  001ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  001f3	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  001f9	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  001ff	74 0f		 je	 SHORT $LN8@update_mi2

; 639  : 			lpres = 1.2;

  00201	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f99999a
  00209	f3 0f 11 45 f0	 movss	 DWORD PTR _lpres$[ebp], xmm0

; 640  : 		else

  0020e	eb 0d		 jmp	 SHORT $LN9@update_mi2
$LN8@update_mi2:

; 641  : 			lpres = 1.0;

  00210	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00218	f3 0f 11 45 f0	 movss	 DWORD PTR _lpres$[ebp], xmm0
$LN9@update_mi2:

; 642  : 
; 643  : 		if ((current_flight_dynamics->dynamics_damage & DYNAMICS_DAMAGE_RIGHT_ENGINE) != 0)

  0021d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00222	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00228	83 e1 10	 and	 ecx, 16			; 00000010H
  0022b	74 0a		 je	 SHORT $LN10@update_mi2

; 644  : 			rpres = 0.0;

  0022d	0f 57 c0	 xorps	 xmm0, xmm0
  00230	f3 0f 11 45 ec	 movss	 DWORD PTR _rpres$[ebp], xmm0
  00235	eb 51		 jmp	 SHORT $LN15@update_mi2
$LN10@update_mi2:

; 645  : 		else if ((current_flight_dynamics->dynamics_damage & DYNAMICS_DAMAGE_LOW_OIL_PRESSURE) != 0)

  00237	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0023c	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00242	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  00248	74 0f		 je	 SHORT $LN12@update_mi2

; 646  : 			rpres = 0.5;

  0024a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00252	f3 0f 11 45 ec	 movss	 DWORD PTR _rpres$[ebp], xmm0
  00257	eb 2f		 jmp	 SHORT $LN15@update_mi2
$LN12@update_mi2:

; 647  : 		else if ((current_flight_dynamics->dynamics_damage & DYNAMICS_DAMAGE_HIGH_OIL_PRESSURE) != 0)

  00259	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0025e	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00264	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  0026a	74 0f		 je	 SHORT $LN14@update_mi2

; 648  : 			rpres = 1.2;

  0026c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f99999a
  00274	f3 0f 11 45 ec	 movss	 DWORD PTR _rpres$[ebp], xmm0

; 649  : 		else

  00279	eb 0d		 jmp	 SHORT $LN15@update_mi2
$LN14@update_mi2:

; 650  : 			rpres = 1.0;

  0027b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00283	f3 0f 11 45 ec	 movss	 DWORD PTR _rpres$[ebp], xmm0
$LN15@update_mi2:

; 651  : 	}
; 652  : 	else

  00288	eb 12		 jmp	 SHORT $LN3@update_mi2
$LN2@update_mi2:

; 653  : 		lpres = rpres = 0.0;

  0028a	0f 57 c0	 xorps	 xmm0, xmm0
  0028d	f3 0f 11 45 ec	 movss	 DWORD PTR _rpres$[ebp], xmm0
  00292	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _rpres$[ebp]
  00297	f3 0f 11 45 f0	 movss	 DWORD PTR _lpres$[ebp], xmm0
$LN3@update_mi2:

; 654  : 
; 655  : 	modify_angle(left_pressure, rad(-150) + rad(100) * lpres, max_pressure_movement);

  0029c	51		 push	 ecx
  0029d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _max_pressure_movement$[ebp]
  002a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fdf66f3
  002af	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _lpres$[ebp]
  002b4	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@c0278d36
  002bc	51		 push	 ecx
  002bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c2	8b 45 10	 mov	 eax, DWORD PTR _left_pressure$[ebp]
  002c5	50		 push	 eax
  002c6	e8 00 00 00 00	 call	 ?modify_angle@@YGXPAMMM@Z ; modify_angle

; 656  : 	modify_angle(right_pressure, rad(-150) + rad(100) * rpres, max_pressure_movement);

  002cb	51		 push	 ecx
  002cc	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _max_pressure_movement$[ebp]
  002d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fdf66f3
  002de	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _rpres$[ebp]
  002e3	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@c0278d36
  002eb	51		 push	 ecx
  002ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f1	8b 45 14	 mov	 eax, DWORD PTR _right_pressure$[ebp]
  002f4	50		 push	 eax
  002f5	e8 00 00 00 00	 call	 ?modify_angle@@YGXPAMMM@Z ; modify_angle

; 657  : }

  002fa	5f		 pop	 edi
  002fb	5e		 pop	 esi
  002fc	5b		 pop	 ebx
  002fd	8b e5		 mov	 esp, ebp
  002ff	5d		 pop	 ebp
  00300	c2 10 00	 ret	 16			; 00000010H
?update_mi24_engine_gauges@@YGXPAM000@Z ENDP		; update_mi24_engine_gauges
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\hind\hi_instr.c
;	COMDAT ?get_mi24_fuel_quantity_needle_value@@YGMXZ
_TEXT	SEGMENT
_angle$ = -4						; size = 4
?get_mi24_fuel_quantity_needle_value@@YGMXZ PROC	; get_mi24_fuel_quantity_needle_value, COMDAT

; 513  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 514  : 	float angle = rad(149.0);

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40266f42
  00011	f3 0f 11 45 fc	 movss	 DWORD PTR _angle$[ebp], xmm0

; 515  : 
; 516  : 	angle += rad(-0.1196) * current_flight_dynamics->fuel_weight.value * 1.39;  // gauge uses liters, 1.39 liters per kilo

  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0001b	f3 0f 5a 80 a4
	24 00 00	 cvtss2sd xmm0, DWORD PTR [eax+9380]
  00023	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bf61199fbbe76c8b
  0002b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff63d70a3d70a3d
  00033	f3 0f 5a 4d fc	 cvtss2sd xmm1, DWORD PTR _angle$[ebp]
  00038	f2 0f 58 c8	 addsd	 xmm1, xmm0
  0003c	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00040	f3 0f 11 45 fc	 movss	 DWORD PTR _angle$[ebp], xmm0

; 517  : 
; 518  : 	return angle;

  00045	d9 45 fc	 fld	 DWORD PTR _angle$[ebp]

; 519  : }

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
?get_mi24_fuel_quantity_needle_value@@YGMXZ ENDP	; get_mi24_fuel_quantity_needle_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\hind\hi_instr.c
;	COMDAT ?get_mi24_sidewind_needle_value@@YGMXZ
_TEXT	SEGMENT
tv141 = -120						; size = 8
tv142 = -112						; size = 8
tv79 = -112						; size = 4
tv72 = -108						; size = 4
_relative_wind$1 = -40					; size = 12
_wind$2 = -28						; size = 12
_position$3 = -16					; size = 12
_angle$ = -4						; size = 4
?get_mi24_sidewind_needle_value@@YGMXZ PROC		; get_mi24_sidewind_needle_value, COMDAT

; 492  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 493  : 	float angle = 0.0;

  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	f3 0f 11 45 fc	 movss	 DWORD PTR _angle$[ebp], xmm0

; 494  : 
; 495  : 	if (get_current_dynamics_options(DYNAMICS_OPTIONS_WIND) && get_local_entity_int_value (get_gunship_entity(), INT_TYPE_AIRBORNE_AIRCRAFT))

  00011	6a 0c		 push	 12			; 0000000cH
  00013	e8 00 00 00 00	 call	 ?get_current_dynamics_options@@YGHW4DYNAMICS_OPTIONS_TYPES@@@Z ; get_current_dynamics_options
  00018	85 c0		 test	 eax, eax
  0001a	0f 84 5a 01 00
	00		 je	 $LN2@get_mi24_s
  00020	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00027	74 0c		 je	 SHORT $LN4@get_mi24_s
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	89 4d 94	 mov	 DWORD PTR tv72[ebp], ecx
  00033	eb 1d		 jmp	 SHORT $LN5@get_mi24_s
$LN4@get_mi24_s:
  00035	68 ef 01 00 00	 push	 495			; 000001efH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OGHPEEJN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00045	52		 push	 edx
  00046	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0004b	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$LN5@get_mi24_s:
  00052	b8 01 00 00 00	 mov	 eax, 1
  00057	85 c0		 test	 eax, eax
  00059	74 09		 je	 SHORT $LN6@get_mi24_s
  0005b	c7 45 90 04 00
	00 00		 mov	 DWORD PTR tv79[ebp], 4
  00062	eb 1d		 jmp	 SHORT $LN7@get_mi24_s
$LN6@get_mi24_s:
  00064	68 ef 01 00 00	 push	 495			; 000001efH
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OGHPEEJN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007a	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$LN7@get_mi24_s:
  00081	6a 04		 push	 4
  00083	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00089	52		 push	 edx
  0008a	69 45 94 5c 04
	00 00		 imul	 eax, DWORD PTR tv72[ebp], 1116
  00091	8b 4d 90	 mov	 ecx, DWORD PTR tv79[ebp]
  00094	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0009b	ff d2		 call	 edx
  0009d	85 c0		 test	 eax, eax
  0009f	0f 84 d5 00 00
	00		 je	 $LN2@get_mi24_s

; 496  : 	{
; 497  : 		vec3d position, wind, relative_wind;
; 498  : 
; 499  : 		position.x = current_flight_dynamics->position.x;

  000a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000aa	f2 0f 5a 80 ac
	00 00 00	 cvtsd2ss xmm0, QWORD PTR [eax+172]
  000b2	f3 0f 11 45 f0	 movss	 DWORD PTR _position$3[ebp], xmm0

; 500  : 		position.y = current_flight_dynamics->position.y;

  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000bc	f2 0f 5a 80 b4
	00 00 00	 cvtsd2ss xmm0, QWORD PTR [eax+180]
  000c4	f3 0f 11 45 f4	 movss	 DWORD PTR _position$3[ebp+4], xmm0

; 501  : 		position.z = current_flight_dynamics->position.z;

  000c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000ce	f2 0f 5a 80 bc
	00 00 00	 cvtsd2ss xmm0, QWORD PTR [eax+188]
  000d6	f3 0f 11 45 f8	 movss	 DWORD PTR _position$3[ebp+8], xmm0

; 502  : 
; 503  : 		get_session_wind_velocity_at_point(&position, &wind);

  000db	8d 45 e4	 lea	 eax, DWORD PTR _wind$2[ebp]
  000de	50		 push	 eax
  000df	8d 4d f0	 lea	 ecx, DWORD PTR _position$3[ebp]
  000e2	51		 push	 ecx
  000e3	e8 00 00 00 00	 call	 ?get_session_wind_velocity_at_point@@YGMPAUVEC3D@@0@Z ; get_session_wind_velocity_at_point
  000e8	dd d8		 fstp	 ST(0)

; 504  : 		multiply_matrix3x3_vec3d(&relative_wind, current_flight_dynamics->attitude, &wind);

  000ea	8d 45 e4	 lea	 eax, DWORD PTR _wind$2[ebp]
  000ed	50		 push	 eax
  000ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000f4	81 c1 d0 00 00
	00		 add	 ecx, 208		; 000000d0H
  000fa	51		 push	 ecx
  000fb	8d 55 d8	 lea	 edx, DWORD PTR _relative_wind$1[ebp]
  000fe	52		 push	 edx
  000ff	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 505  : 
; 506  : 		angle = bound(relative_wind.x * rad(-9.7), rad(-130.0), rad(130.0));

  00104	f3 0f 5a 45 d8	 cvtss2sd xmm0, DWORD PTR _relative_wind$1[ebp]
  00109	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfc5ab85a2000000
  00111	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c00226c3ba800000
  00119	66 0f 2f c8	 comisd	 xmm1, xmm0
  0011d	76 0f		 jbe	 SHORT $LN10@get_mi24_s
  0011f	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c00226c3ba800000
  00127	f2 0f 11 45 90	 movsd	 QWORD PTR tv142[ebp], xmm0
  0012c	eb 42		 jmp	 SHORT $LN11@get_mi24_s
$LN10@get_mi24_s:
  0012e	f3 0f 5a 45 d8	 cvtss2sd xmm0, DWORD PTR _relative_wind$1[ebp]
  00133	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfc5ab85a2000000
  0013b	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@400226c3ba800000
  00143	76 0f		 jbe	 SHORT $LN8@get_mi24_s
  00145	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@400226c3ba800000
  0014d	f2 0f 11 45 88	 movsd	 QWORD PTR tv141[ebp], xmm0
  00152	eb 12		 jmp	 SHORT $LN9@get_mi24_s
$LN8@get_mi24_s:
  00154	f3 0f 5a 45 d8	 cvtss2sd xmm0, DWORD PTR _relative_wind$1[ebp]
  00159	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfc5ab85a2000000
  00161	f2 0f 11 45 88	 movsd	 QWORD PTR tv141[ebp], xmm0
$LN9@get_mi24_s:
  00166	f2 0f 10 45 88	 movsd	 xmm0, QWORD PTR tv141[ebp]
  0016b	f2 0f 11 45 90	 movsd	 QWORD PTR tv142[ebp], xmm0
$LN11@get_mi24_s:
  00170	f2 0f 5a 45 90	 cvtsd2ss xmm0, QWORD PTR tv142[ebp]
  00175	f3 0f 11 45 fc	 movss	 DWORD PTR _angle$[ebp], xmm0
$LN2@get_mi24_s:

; 507  : 	}
; 508  : 
; 509  : 	return angle;

  0017a	d9 45 fc	 fld	 DWORD PTR _angle$[ebp]

; 510  : }

  0017d	5f		 pop	 edi
  0017e	5e		 pop	 esi
  0017f	5b		 pop	 ebx
  00180	8b e5		 mov	 esp, ebp
  00182	5d		 pop	 ebp
  00183	c3		 ret	 0
?get_mi24_sidewind_needle_value@@YGMXZ ENDP		; get_mi24_sidewind_needle_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\hind\hi_instr.c
;	COMDAT ?get_mi24_rocket_salvo_switch_value@@YGMXZ
_TEXT	SEGMENT
_angle$ = -4						; size = 4
?get_mi24_rocket_salvo_switch_value@@YGMXZ PROC		; get_mi24_rocket_salvo_switch_value, COMDAT

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 481  : 	float angle = rad(-22.0);

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bec49809
  00011	f3 0f 11 45 fc	 movss	 DWORD PTR _angle$[ebp], xmm0

; 482  : 
; 483  : 	if (rocket_salvo_size == 2)

  00016	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?rocket_salvo_size@@3HA, 2 ; rocket_salvo_size
  0001d	75 18		 jne	 SHORT $LN2@get_mi24_r

; 484  : 		angle += rad(90.0);

  0001f	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _angle$[ebp]
  00024	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff921fb51000000
  0002c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00030	f3 0f 11 45 fc	 movss	 DWORD PTR _angle$[ebp], xmm0
  00035	eb 1f		 jmp	 SHORT $LN4@get_mi24_r
$LN2@get_mi24_r:

; 485  : 	else if (rocket_salvo_size != 4)

  00037	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?rocket_salvo_size@@3HA, 4 ; rocket_salvo_size
  0003e	74 16		 je	 SHORT $LN4@get_mi24_r

; 486  : 		angle += rad(45.0);

  00040	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _angle$[ebp]
  00045	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe921fb51000000
  0004d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00051	f3 0f 11 45 fc	 movss	 DWORD PTR _angle$[ebp], xmm0
$LN4@get_mi24_r:

; 487  : 
; 488  : 	return angle;

  00056	d9 45 fc	 fld	 DWORD PTR _angle$[ebp]

; 489  : }

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?get_mi24_rocket_salvo_switch_value@@YGMXZ ENDP		; get_mi24_rocket_salvo_switch_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\hind\hi_instr.c
;	COMDAT ?get_mi24_engine_select_switch_value@@YGXPAM@Z
_TEXT	SEGMENT
_max_step$ = -8						; size = 4
_val$ = -4						; size = 4
_current_val$ = 8					; size = 4
?get_mi24_engine_select_switch_value@@YGXPAM@Z PROC	; get_mi24_engine_select_switch_value, COMDAT

; 426  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 427  : 	float val = rad(5.0);

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db2b8c2
  00011	f3 0f 11 45 fc	 movss	 DWORD PTR _val$[ebp], xmm0

; 428  : 	float max_step = SWITCH_MOVEMENT_RATE * get_delta_time();

  00016	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?system_delta_time@@3MA
  0001e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4014f1a6c3800000
  00026	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0002a	f3 0f 11 45 f8	 movss	 DWORD PTR _max_step$[ebp], xmm0

; 429  : 
; 430  : 	if (current_flight_dynamics->left_engine_starter_active)

  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00034	8b 88 28 25 00
	00		 mov	 ecx, DWORD PTR [eax+9512]
  0003a	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  0003d	83 e1 01	 and	 ecx, 1
  00040	74 0f		 je	 SHORT $LN2@get_mi24_e

; 431  : 		val = rad(50.0);

  00042	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5f66f3
  0004a	f3 0f 11 45 fc	 movss	 DWORD PTR _val$[ebp], xmm0
  0004f	eb 20		 jmp	 SHORT $LN4@get_mi24_e
$LN2@get_mi24_e:

; 432  : 	else if (current_flight_dynamics->right_engine_starter_active)

  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00056	8b 88 28 25 00
	00		 mov	 ecx, DWORD PTR [eax+9512]
  0005c	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  0005f	83 e1 01	 and	 ecx, 1
  00062	74 0d		 je	 SHORT $LN4@get_mi24_e

; 433  : 		val = -rad(40.0);

  00064	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf32b8c2
  0006c	f3 0f 11 45 fc	 movss	 DWORD PTR _val$[ebp], xmm0
$LN4@get_mi24_e:

; 434  : 
; 435  : 	modify_angle(current_val, val, max_step);

  00071	51		 push	 ecx
  00072	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _max_step$[ebp]
  00077	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007c	51		 push	 ecx
  0007d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _val$[ebp]
  00082	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00087	8b 45 08	 mov	 eax, DWORD PTR _current_val$[ebp]
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 ?modify_angle@@YGXPAMMM@Z ; modify_angle

; 436  : }

  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
?get_mi24_engine_select_switch_value@@YGXPAM@Z ENDP	; get_mi24_engine_select_switch_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\hind\hi_instr.c
;	COMDAT ?get_mi24_apu_rpm_needle_value@@YGMXZ
_TEXT	SEGMENT
tv75 = -72						; size = 4
_val$ = -4						; size = 4
?get_mi24_apu_rpm_needle_value@@YGMXZ PROC		; get_mi24_apu_rpm_needle_value, COMDAT

; 419  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 420  : 	float val = rad(113);

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ffc71c6
  00011	f3 0f 11 45 fc	 movss	 DWORD PTR _val$[ebp], xmm0

; 421  : 
; 422  : 	return val + rad(-1.85) * current_flight_dynamics->apu_rpm.value;

  00016	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _val$[ebp]
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00020	f3 0f 5a 88 3c
	1d 00 00	 cvtss2sd xmm1, DWORD PTR [eax+7484]
  00028	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@bfa0882154000000
  00030	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00034	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00038	f3 0f 11 45 b8	 movss	 DWORD PTR tv75[ebp], xmm0
  0003d	d9 45 b8	 fld	 DWORD PTR tv75[ebp]

; 423  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?get_mi24_apu_rpm_needle_value@@YGMXZ ENDP		; get_mi24_apu_rpm_needle_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\hind\hi_instr.c
;	COMDAT ?update_mi24_weapon_status_lights@@YGXPAUOBJECT_3D_SUB_INSTANCE@@00@Z
_TEXT	SEGMENT
tv164 = -76						; size = 4
tv78 = -76						; size = 4
tv213 = -72						; size = 4
tv146 = -72						; size = 4
tv137 = -72						; size = 4
tv94 = -72						; size = 4
tv70 = -72						; size = 4
_weapon_sub_type$ = -4					; size = 4
_ready$ = 8						; size = 4
_not_ready$ = 12					; size = 4
_min_range$ = 16					; size = 4
?update_mi24_weapon_status_lights@@YGXPAUOBJECT_3D_SUB_INSTANCE@@00@Z PROC ; update_mi24_weapon_status_lights, COMDAT

; 578  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 579  : 	entity_sub_types
; 580  : 		weapon_sub_type;
; 581  : 
; 582  : 	weapon_sub_type = get_local_entity_int_value (get_gunship_entity (), INT_TYPE_SELECTED_WEAPON);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00010	74 0c		 je	 SHORT $LN10@update_mi2
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d b8	 mov	 DWORD PTR tv70[ebp], ecx
  0001c	eb 21		 jmp	 SHORT $LN11@update_mi2
$LN10@update_mi2:
  0001e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_mi24_weapon_status_lights@@YGXPAUOBJECT_3D_SUB_INSTANCE@@00@Z@4JA
  00024	83 c2 04	 add	 edx, 4
  00027	52		 push	 edx
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OGHPEEJN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00038	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN11@update_mi2:
  0003f	b9 01 00 00 00	 mov	 ecx, 1
  00044	85 c9		 test	 ecx, ecx
  00046	74 09		 je	 SHORT $LN12@update_mi2
  00048	c7 45 b4 b8 00
	00 00		 mov	 DWORD PTR tv78[ebp], 184 ; 000000b8H
  0004f	eb 21		 jmp	 SHORT $LN13@update_mi2
$LN12@update_mi2:
  00051	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_mi24_weapon_status_lights@@YGXPAUOBJECT_3D_SUB_INSTANCE@@00@Z@4JA
  00057	83 c2 04	 add	 edx, 4
  0005a	52		 push	 edx
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OGHPEEJN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006b	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN13@update_mi2:
  00072	68 b8 00 00 00	 push	 184			; 000000b8H
  00077	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0007d	51		 push	 ecx
  0007e	69 55 b8 5c 04
	00 00		 imul	 edx, DWORD PTR tv70[ebp], 1116
  00085	8b 45 b4	 mov	 eax, DWORD PTR tv78[ebp]
  00088	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  0008f	ff d1		 call	 ecx
  00091	89 45 fc	 mov	 DWORD PTR _weapon_sub_type$[ebp], eax

; 583  : 
; 584  : 	if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_NO_WEAPON)

  00094	83 7d fc 00	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 0
  00098	75 32		 jne	 SHORT $LN4@update_mi2

; 585  : 	{
; 586  : 		ready->visible_object = FALSE;

  0009a	8b 45 08	 mov	 eax, DWORD PTR _ready$[ebp]
  0009d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000a0	83 e1 fe	 and	 ecx, -2			; fffffffeH
  000a3	8b 55 08	 mov	 edx, DWORD PTR _ready$[ebp]
  000a6	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 587  : 		not_ready->visible_object = FALSE;

  000a9	8b 45 0c	 mov	 eax, DWORD PTR _not_ready$[ebp]
  000ac	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000af	83 e1 fe	 and	 ecx, -2			; fffffffeH
  000b2	8b 55 0c	 mov	 edx, DWORD PTR _not_ready$[ebp]
  000b5	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 588  : 		min_range->visible_object = FALSE;

  000b8	8b 45 10	 mov	 eax, DWORD PTR _min_range$[ebp]
  000bb	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000be	83 e1 fe	 and	 ecx, -2			; fffffffeH
  000c1	8b 55 10	 mov	 edx, DWORD PTR _min_range$[ebp]
  000c4	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 589  : 		return;

  000c7	e9 11 01 00 00	 jmp	 $LN1@update_mi2
$LN4@update_mi2:

; 590  : 	}
; 591  : 
; 592  : 	switch (weapon_lock_type)

  000cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_lock_type@@3W4WEAPON_LOCK_TYPES@@A ; weapon_lock_type
  000d1	89 45 b8	 mov	 DWORD PTR tv94[ebp], eax
  000d4	83 7d b8 09	 cmp	 DWORD PTR tv94[ebp], 9
  000d8	0f 87 bb 00 00
	00		 ja	 $LN2@update_mi2
  000de	8b 4d b8	 mov	 ecx, DWORD PTR tv94[ebp]
  000e1	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN20@update_mi2[ecx]
  000e8	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN21@update_mi2[edx*4]
$LN5@update_mi2:

; 593  : 	{
; 594  : 		case WEAPON_LOCK_NO_WEAPON:
; 595  : 			ASSERT(FALSE);

  000ef	b8 01 00 00 00	 mov	 eax, 1
  000f4	85 c0		 test	 eax, eax
  000f6	74 18		 je	 SHORT $LN6@update_mi2
  000f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_mi24_weapon_status_lights@@YGXPAUOBJECT_3D_SUB_INSTANCE@@00@Z@4JA
  000fd	83 c0 11	 add	 eax, 17			; 00000011H
  00100	50		 push	 eax
  00101	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OGHPEEJN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00106	68 00 00 00 00	 push	 OFFSET ??_C@_05MAJJAKPI@FALSE@
  0010b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@update_mi2:

; 596  : 		case WEAPON_LOCK_NO_ACQUIRE:
; 597  : 		case WEAPON_LOCK_NO_TARGET:
; 598  : 		case WEAPON_LOCK_INVALID_TARGET:
; 599  : 		case WEAPON_LOCK_NO_LOS:
; 600  : 		case WEAPON_LOCK_SEEKER_LIMIT:
; 601  : 		case WEAPON_LOCK_NO_BORESIGHT:
; 602  : 			// don't need valid target to fire unguided weapons
; 603  : 			ready->visible_object = weapon_database[weapon_sub_type].guidance_type == WEAPON_GUIDANCE_TYPE_NONE;

  00110	69 45 fc e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  00117	83 b8 18 00 00
	00 00		 cmp	 DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+24], 0
  0011e	75 09		 jne	 SHORT $LN14@update_mi2
  00120	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv137[ebp], 1
  00127	eb 07		 jmp	 SHORT $LN15@update_mi2
$LN14@update_mi2:
  00129	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$LN15@update_mi2:
  00130	8b 4d b8	 mov	 ecx, DWORD PTR tv137[ebp]
  00133	83 e1 01	 and	 ecx, 1
  00136	8b 55 08	 mov	 edx, DWORD PTR _ready$[ebp]
  00139	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0013c	83 e0 fe	 and	 eax, -2			; fffffffeH
  0013f	0b c1		 or	 eax, ecx
  00141	8b 4d 08	 mov	 ecx, DWORD PTR _ready$[ebp]
  00144	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 604  : 			not_ready->visible_object = !ready->visible_object;

  00147	8b 45 08	 mov	 eax, DWORD PTR _ready$[ebp]
  0014a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0014d	83 e1 01	 and	 ecx, 1
  00150	75 09		 jne	 SHORT $LN16@update_mi2
  00152	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv146[ebp], 1
  00159	eb 07		 jmp	 SHORT $LN17@update_mi2
$LN16@update_mi2:
  0015b	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv146[ebp], 0
$LN17@update_mi2:
  00162	8b 55 b8	 mov	 edx, DWORD PTR tv146[ebp]
  00165	83 e2 01	 and	 edx, 1
  00168	8b 45 0c	 mov	 eax, DWORD PTR _not_ready$[ebp]
  0016b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0016e	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00171	0b ca		 or	 ecx, edx
  00173	8b 55 0c	 mov	 edx, DWORD PTR _not_ready$[ebp]
  00176	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 605  : 			break;

  00179	eb 1e		 jmp	 SHORT $LN2@update_mi2
$LN8@update_mi2:

; 606  : 		case WEAPON_LOCK_MIN_RANGE:
; 607  : 		case WEAPON_LOCK_MAX_RANGE:
; 608  : 		case WEAPON_LOCK_VALID:
; 609  : 			ready->visible_object = TRUE;

  0017b	8b 45 08	 mov	 eax, DWORD PTR _ready$[ebp]
  0017e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00181	83 c9 01	 or	 ecx, 1
  00184	8b 55 08	 mov	 edx, DWORD PTR _ready$[ebp]
  00187	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 610  : 			not_ready->visible_object = FALSE;

  0018a	8b 45 0c	 mov	 eax, DWORD PTR _not_ready$[ebp]
  0018d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00190	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00193	8b 55 0c	 mov	 edx, DWORD PTR _not_ready$[ebp]
  00196	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$LN2@update_mi2:

; 611  : 			break;
; 612  : 	}
; 613  : 
; 614  : 	min_range->visible_object = get_hud_aiming_range() < weapon_database[weapon_sub_type].min_range;

  00199	e8 00 00 00 00	 call	 ?get_hud_aiming_range@@YGMXZ ; get_hud_aiming_range
  0019e	d9 5d b8	 fstp	 DWORD PTR tv213[ebp]
  001a1	69 45 fc e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  001a8	f3 0f 10 80 8c
	00 00 00	 movss	 xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+140]
  001b0	0f 2f 45 b8	 comiss	 xmm0, DWORD PTR tv213[ebp]
  001b4	76 09		 jbe	 SHORT $LN18@update_mi2
  001b6	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv164[ebp], 1
  001bd	eb 07		 jmp	 SHORT $LN19@update_mi2
$LN18@update_mi2:
  001bf	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv164[ebp], 0
$LN19@update_mi2:
  001c6	8b 4d b4	 mov	 ecx, DWORD PTR tv164[ebp]
  001c9	83 e1 01	 and	 ecx, 1
  001cc	8b 55 10	 mov	 edx, DWORD PTR _min_range$[ebp]
  001cf	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001d2	83 e0 fe	 and	 eax, -2			; fffffffeH
  001d5	0b c1		 or	 eax, ecx
  001d7	8b 4d 10	 mov	 ecx, DWORD PTR _min_range$[ebp]
  001da	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN1@update_mi2:

; 615  : }

  001dd	5f		 pop	 edi
  001de	5e		 pop	 esi
  001df	5b		 pop	 ebx
  001e0	8b e5		 mov	 esp, ebp
  001e2	5d		 pop	 ebp
  001e3	c2 0c 00	 ret	 12			; 0000000cH
  001e6	66 90		 npad	 2
$LN21@update_mi2:
  001e8	00 00 00 00	 DD	 $LN6@update_mi2
  001ec	00 00 00 00	 DD	 $LN5@update_mi2
  001f0	00 00 00 00	 DD	 $LN8@update_mi2
$LN20@update_mi2:
  001f4	00		 DB	 0
  001f5	01		 DB	 1
  001f6	00		 DB	 0
  001f7	00		 DB	 0
  001f8	00		 DB	 0
  001f9	00		 DB	 0
  001fa	00		 DB	 0
  001fb	02		 DB	 2
  001fc	02		 DB	 2
  001fd	02		 DB	 2
?update_mi24_weapon_status_lights@@YGXPAUOBJECT_3D_SUB_INSTANCE@@00@Z ENDP ; update_mi24_weapon_status_lights
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\hind\hi_instr.c
;	COMDAT ?update_mi24_waypoint_indicator@@YGXPAM@Z
_TEXT	SEGMENT
tv81 = -88						; size = 4
tv73 = -84						; size = 4
_max_movement$1 = -16					; size = 4
_wpnt$2 = -9						; size = 1
_pitch$3 = -8						; size = 4
_wp$ = -4						; size = 4
_indicator$ = 8						; size = 4
?update_mi24_waypoint_indicator@@YGXPAM@Z PROC		; update_mi24_waypoint_indicator, COMDAT

; 562  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 563  : 	entity* wp = get_local_entity_current_waypoint (get_gunship_entity ());

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  00014	89 45 fc	 mov	 DWORD PTR _wp$[ebp], eax

; 564  : 
; 565  : 	if (wp)

  00017	83 7d fc 00	 cmp	 DWORD PTR _wp$[ebp], 0
  0001b	0f 84 e5 00 00
	00		 je	 $LN2@update_mi2

; 566  : 	{
; 567  : 		float pitch = rad(-75.0);

  00021	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfa78d36
  00029	f3 0f 11 45 f8	 movss	 DWORD PTR _pitch$3[ebp], xmm0

; 568  : 		char wpnt = get_local_entity_char_value(wp, CHAR_TYPE_TAG);

  0002e	83 7d fc 00	 cmp	 DWORD PTR _wp$[ebp], 0
  00032	74 0a		 je	 SHORT $LN4@update_mi2
  00034	8b 45 fc	 mov	 eax, DWORD PTR _wp$[ebp]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]
  00039	89 4d ac	 mov	 DWORD PTR tv73[ebp], ecx
  0003c	eb 21		 jmp	 SHORT $LN5@update_mi2
$LN4@update_mi2:
  0003e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_mi24_waypoint_indicator@@YGXPAM@Z@4JA
  00044	83 c2 06	 add	 edx, 6
  00047	52		 push	 edx
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OGHPEEJN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0004d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00058	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN5@update_mi2:
  0005f	b9 01 00 00 00	 mov	 ecx, 1
  00064	85 c9		 test	 ecx, ecx
  00066	74 09		 je	 SHORT $LN6@update_mi2
  00068	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
  0006f	eb 21		 jmp	 SHORT $LN7@update_mi2
$LN6@update_mi2:
  00071	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_mi24_waypoint_indicator@@YGXPAM@Z@4JA
  00077	83 c2 06	 add	 edx, 6
  0007a	52		 push	 edx
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OGHPEEJN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00080	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0008b	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN7@update_mi2:
  00092	6a 00		 push	 0
  00094	8b 4d fc	 mov	 ecx, DWORD PTR _wp$[ebp]
  00097	51		 push	 ecx
  00098	8b 55 a8	 mov	 edx, DWORD PTR tv81[ebp]
  0009b	c1 e2 02	 shl	 edx, 2
  0009e	8b 45 ac	 mov	 eax, DWORD PTR tv73[ebp]
  000a1	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[edx+eax*8]
  000a8	ff d1		 call	 ecx
  000aa	88 45 f7	 mov	 BYTE PTR _wpnt$2[ebp], al

; 569  : 		float max_movement = rad(120) * get_delta_time();

  000ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40060a92
  000b5	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  000bd	f3 0f 11 45 f0	 movss	 DWORD PTR _max_movement$1[ebp], xmm0

; 570  : 
; 571  : 		pitch += (wpnt - 'A') * rad(-360.0 / 26.0);

  000c2	0f b6 45 f7	 movzx	 eax, BYTE PTR _wpnt$2[ebp]
  000c6	83 e8 41	 sub	 eax, 65			; 00000041H
  000c9	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  000cd	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfceeebf289d89d9
  000d5	f3 0f 5a 4d f8	 cvtss2sd xmm1, DWORD PTR _pitch$3[ebp]
  000da	f2 0f 58 c8	 addsd	 xmm1, xmm0
  000de	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  000e2	f3 0f 11 45 f8	 movss	 DWORD PTR _pitch$3[ebp], xmm0

; 572  : 
; 573  : 		modify_angle(indicator, pitch, max_movement);

  000e7	51		 push	 ecx
  000e8	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _max_movement$1[ebp]
  000ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f2	51		 push	 ecx
  000f3	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _pitch$3[ebp]
  000f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fd	8b 45 08	 mov	 eax, DWORD PTR _indicator$[ebp]
  00100	50		 push	 eax
  00101	e8 00 00 00 00	 call	 ?modify_angle@@YGXPAMMM@Z ; modify_angle
$LN2@update_mi2:

; 574  : 	}
; 575  : }

  00106	5f		 pop	 edi
  00107	5e		 pop	 esi
  00108	5b		 pop	 ebx
  00109	8b e5		 mov	 esp, ebp
  0010b	5d		 pop	 ebp
  0010c	c2 04 00	 ret	 4
?update_mi24_waypoint_indicator@@YGXPAM@Z ENDP		; update_mi24_waypoint_indicator
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\hind\hi_instr.c
;	COMDAT ?get_mi24_hydraulic_pressure_values@@YGXPAM00@Z
_TEXT	SEGMENT
tv139 = -88						; size = 8
_secondary_psi$ = -16					; size = 4
_primary_psi$ = -12					; size = 4
_gear_psi$ = -8						; size = 4
_max_movement$ = -4					; size = 4
_gear$ = 8						; size = 4
_primary$ = 12						; size = 4
_secondary$ = 16					; size = 4
?get_mi24_hydraulic_pressure_values@@YGXPAM00@Z PROC	; get_mi24_hydraulic_pressure_values, COMDAT

; 538  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 539  : 	float
; 540  : 		max_movement = rad(180) * get_delta_time(),

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40490fdb
  00011	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00019	f3 0f 11 45 fc	 movss	 DWORD PTR _max_movement$[ebp], xmm0

; 541  : 		gear_psi = rad(52.0),

  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f685696
  00026	f3 0f 11 45 f8	 movss	 DWORD PTR _gear_psi$[ebp], xmm0

; 542  : 		primary_psi = rad(52.0),

  0002b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f685696
  00033	f3 0f 11 45 f4	 movss	 DWORD PTR _primary_psi$[ebp], xmm0

; 543  : 		secondary_psi = rad(52.0);

  00038	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f685696
  00040	f3 0f 11 45 f0	 movss	 DWORD PTR _secondary_psi$[ebp], xmm0

; 544  : 
; 545  : 	if (electrical_system_active())

  00045	e8 00 00 00 00	 call	 ?electrical_system_active@@YGHXZ ; electrical_system_active
  0004a	85 c0		 test	 eax, eax
  0004c	74 79		 je	 SHORT $LN2@get_mi24_h

; 546  : 	{
; 547  : 		if (!(current_flight_dynamics->dynamics_damage & DYNAMICS_DAMAGE_UNDERCARRIAGE))

  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00053	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00059	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  0005f	75 16		 jne	 SHORT $LN3@get_mi24_h

; 548  : 			gear_psi -= rad(115.0);

  00061	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _gear_psi$[ebp]
  00066	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@40000e9973c00000
  0006e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00072	f3 0f 11 45 f8	 movss	 DWORD PTR _gear_psi$[ebp], xmm0
$LN3@get_mi24_h:

; 549  : 
; 550  : 		if (!(current_flight_dynamics->dynamics_damage & DYNAMICS_DAMAGE_SECONDARY_HYDRAULICS))

  00077	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0007c	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00082	81 e1 00 00 02
	00		 and	 ecx, 131072		; 00020000H
  00088	75 16		 jne	 SHORT $LN4@get_mi24_h

; 551  : 			secondary_psi -= rad(115.0);

  0008a	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _secondary_psi$[ebp]
  0008f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@40000e9973c00000
  00097	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0009b	f3 0f 11 45 f0	 movss	 DWORD PTR _secondary_psi$[ebp], xmm0
$LN4@get_mi24_h:

; 552  : 
; 553  : 		primary_psi -= get_hydraulic_pressure() * rad(115.0);

  000a0	e8 00 00 00 00	 call	 ?get_hydraulic_pressure@@YGMXZ ; get_hydraulic_pressure
  000a5	dd 5d a8	 fstp	 QWORD PTR tv139[ebp]
  000a8	f2 0f 10 45 a8	 movsd	 xmm0, QWORD PTR tv139[ebp]
  000ad	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@40000e9973c00000
  000b5	f3 0f 5a 4d f4	 cvtss2sd xmm1, DWORD PTR _primary_psi$[ebp]
  000ba	f2 0f 5c c8	 subsd	 xmm1, xmm0
  000be	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  000c2	f3 0f 11 45 f4	 movss	 DWORD PTR _primary_psi$[ebp], xmm0
$LN2@get_mi24_h:

; 554  : 	}
; 555  : 
; 556  : 	modify_angle(gear, gear_psi, max_movement);

  000c7	51		 push	 ecx
  000c8	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _max_movement$[ebp]
  000cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d2	51		 push	 ecx
  000d3	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _gear_psi$[ebp]
  000d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000dd	8b 45 08	 mov	 eax, DWORD PTR _gear$[ebp]
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 ?modify_angle@@YGXPAMMM@Z ; modify_angle

; 557  : 	modify_angle(primary, primary_psi, max_movement);

  000e6	51		 push	 ecx
  000e7	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _max_movement$[ebp]
  000ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f1	51		 push	 ecx
  000f2	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _primary_psi$[ebp]
  000f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fc	8b 45 0c	 mov	 eax, DWORD PTR _primary$[ebp]
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 ?modify_angle@@YGXPAMMM@Z ; modify_angle

; 558  : 	modify_angle(secondary, secondary_psi, max_movement);

  00105	51		 push	 ecx
  00106	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _max_movement$[ebp]
  0010b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00110	51		 push	 ecx
  00111	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _secondary_psi$[ebp]
  00116	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011b	8b 45 10	 mov	 eax, DWORD PTR _secondary$[ebp]
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 ?modify_angle@@YGXPAMMM@Z ; modify_angle

; 559  : }

  00124	5f		 pop	 edi
  00125	5e		 pop	 esi
  00126	5b		 pop	 ebx
  00127	8b e5		 mov	 esp, ebp
  00129	5d		 pop	 ebp
  0012a	c2 0c 00	 ret	 12			; 0000000cH
?get_mi24_hydraulic_pressure_values@@YGXPAM00@Z ENDP	; get_mi24_hydraulic_pressure_values
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\hind\hi_instr.c
;	COMDAT ?get_mi24_clock_hand_values@@YGXPAM00@Z
_TEXT	SEGMENT
tv156 = -88						; size = 8
tv78 = -88						; size = 4
tv70 = -84						; size = 4
_second_hand_value$ = -16				; size = 4
_minute_hand_value$ = -12				; size = 4
_hour_hand_value$ = -8					; size = 4
_time_of_day$ = -4					; size = 4
_hour_hand$ = 8						; size = 4
_minute_hand$ = 12					; size = 4
_second_hand$ = 16					; size = 4
?get_mi24_clock_hand_values@@YGXPAM00@Z PROC		; get_mi24_clock_hand_values, COMDAT

; 522  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 523  : 	float
; 524  : 		time_of_day,
; 525  : 		hour_hand_value,
; 526  : 		minute_hand_value,
; 527  : 		second_hand_value;
; 528  : 
; 529  : 	time_of_day = get_local_entity_float_value (get_session_entity (), FLOAT_TYPE_TIME_OF_DAY);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  00010	74 0c		 je	 SHORT $LN3@get_mi24_c
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d ac	 mov	 DWORD PTR tv70[ebp], ecx
  0001c	eb 21		 jmp	 SHORT $LN4@get_mi24_c
$LN3@get_mi24_c:
  0001e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_mi24_clock_hand_values@@YGXPAM00@Z@4JA
  00024	83 c2 07	 add	 edx, 7
  00027	52		 push	 edx
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OGHPEEJN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00038	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@get_mi24_c:
  0003f	b9 01 00 00 00	 mov	 ecx, 1
  00044	85 c9		 test	 ecx, ecx
  00046	74 09		 je	 SHORT $LN5@get_mi24_c
  00048	c7 45 a8 8e 00
	00 00		 mov	 DWORD PTR tv78[ebp], 142 ; 0000008eH
  0004f	eb 21		 jmp	 SHORT $LN6@get_mi24_c
$LN5@get_mi24_c:
  00051	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_mi24_clock_hand_values@@YGXPAM00@Z@4JA
  00057	83 c2 07	 add	 edx, 7
  0005a	52		 push	 edx
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OGHPEEJN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006b	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN6@get_mi24_c:
  00072	68 8e 00 00 00	 push	 142			; 0000008eH
  00077	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  0007d	51		 push	 ecx
  0007e	69 55 ac bc 02
	00 00		 imul	 edx, DWORD PTR tv70[ebp], 700
  00085	8b 45 a8	 mov	 eax, DWORD PTR tv78[ebp]
  00088	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0008f	ff d1		 call	 ecx
  00091	d9 5d fc	 fstp	 DWORD PTR _time_of_day$[ebp]

; 530  : 	get_analogue_clock_values (time_of_day, &hour_hand_value, &minute_hand_value, &second_hand_value);

  00094	8d 45 f0	 lea	 eax, DWORD PTR _second_hand_value$[ebp]
  00097	50		 push	 eax
  00098	8d 4d f4	 lea	 ecx, DWORD PTR _minute_hand_value$[ebp]
  0009b	51		 push	 ecx
  0009c	8d 55 f8	 lea	 edx, DWORD PTR _hour_hand_value$[ebp]
  0009f	52		 push	 edx
  000a0	51		 push	 ecx
  000a1	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _time_of_day$[ebp]
  000a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ab	e8 00 00 00 00	 call	 ?get_analogue_clock_values@@YGXMPAM00@Z ; get_analogue_clock_values

; 531  : 
; 532  : 	*hour_hand = hour_hand_value * rad(-30.0);

  000b0	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _hour_hand_value$[ebp]
  000b5	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0c15236000000
  000bd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000c1	8b 45 08	 mov	 eax, DWORD PTR _hour_hand$[ebp]
  000c4	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 533  : 	*minute_hand = minute_hand_value * rad(-6.0);

  000c8	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _minute_hand_value$[ebp]
  000cd	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfbacee9f0000000
  000d5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000d9	8b 45 0c	 mov	 eax, DWORD PTR _minute_hand$[ebp]
  000dc	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 534  : 	*second_hand = floor(second_hand_value) * rad(-6.0);

  000e0	51		 push	 ecx
  000e1	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _second_hand_value$[ebp]
  000e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000eb	e8 00 00 00 00	 call	 ?floor@@YGMM@Z		; floor
  000f0	dd 5d a8	 fstp	 QWORD PTR tv156[ebp]
  000f3	f2 0f 10 45 a8	 movsd	 xmm0, QWORD PTR tv156[ebp]
  000f8	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfbacee9f0000000
  00100	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00104	8b 45 10	 mov	 eax, DWORD PTR _second_hand$[ebp]
  00107	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 535  : }

  0010b	5f		 pop	 edi
  0010c	5e		 pop	 esi
  0010d	5b		 pop	 ebx
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c2 0c 00	 ret	 12			; 0000000cH
?get_mi24_clock_hand_values@@YGXPAM00@Z ENDP		; get_mi24_clock_hand_values
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\hind\hi_instr.c
;	COMDAT ?get_mi24_compass_waypoint_needle_heading_value@@YGMXZ
_TEXT	SEGMENT
?get_mi24_compass_waypoint_needle_heading_value@@YGMXZ PROC ; get_mi24_compass_waypoint_needle_heading_value, COMDAT

; 459  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 460  : 	return 0.0;

  00009	d9 ee		 fldz

; 461  : }

  0000b	5f		 pop	 edi
  0000c	5e		 pop	 esi
  0000d	5b		 pop	 ebx
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?get_mi24_compass_waypoint_needle_heading_value@@YGMXZ ENDP ; get_mi24_compass_waypoint_needle_heading_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\hind\hi_instr.c
;	COMDAT ?get_mi24_compass_waypoint_needle_value@@YGMXZ
_TEXT	SEGMENT
?get_mi24_compass_waypoint_needle_value@@YGMXZ PROC	; get_mi24_compass_waypoint_needle_value, COMDAT

; 454  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 455  : 	return 0.0;

  00009	d9 ee		 fldz

; 456  : }

  0000b	5f		 pop	 edi
  0000c	5e		 pop	 esi
  0000d	5b		 pop	 ebx
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?get_mi24_compass_waypoint_needle_value@@YGMXZ ENDP	; get_mi24_compass_waypoint_needle_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\hind\hi_instr.c
;	COMDAT ?get_mi24_temperature_needle_values@@YGXMPAM0@Z
_TEXT	SEGMENT
tv69 = -80						; size = 8
tv70 = -72						; size = 8
_temp$ = 8						; size = 4
_big_needle$ = 12					; size = 4
_small_needle$ = 16					; size = 4
?get_mi24_temperature_needle_values@@YGXMPAM0@Z PROC	; get_mi24_temperature_needle_values, COMDAT

; 446  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 447  : 	temp = bound(temp, 0.0, 1200.0);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _temp$[ebp]
  0000e	0f 57 c9	 xorps	 xmm1, xmm1
  00011	66 0f 2f c8	 comisd	 xmm1, xmm0
  00015	76 0a		 jbe	 SHORT $LN5@get_mi24_t
  00017	0f 57 c0	 xorps	 xmm0, xmm0
  0001a	f2 0f 11 45 b8	 movsd	 QWORD PTR tv70[ebp], xmm0
  0001f	eb 32		 jmp	 SHORT $LN6@get_mi24_t
$LN5@get_mi24_t:
  00021	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _temp$[ebp]
  00026	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4092c00000000000
  0002e	76 0f		 jbe	 SHORT $LN3@get_mi24_t
  00030	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4092c00000000000
  00038	f2 0f 11 45 b0	 movsd	 QWORD PTR tv69[ebp], xmm0
  0003d	eb 0a		 jmp	 SHORT $LN4@get_mi24_t
$LN3@get_mi24_t:
  0003f	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _temp$[ebp]
  00044	f2 0f 11 45 b0	 movsd	 QWORD PTR tv69[ebp], xmm0
$LN4@get_mi24_t:
  00049	f2 0f 10 45 b0	 movsd	 xmm0, QWORD PTR tv69[ebp]
  0004e	f2 0f 11 45 b8	 movsd	 QWORD PTR tv70[ebp], xmm0
$LN6@get_mi24_t:
  00053	f2 0f 5a 45 b8	 cvtsd2ss xmm0, QWORD PTR tv70[ebp]
  00058	f3 0f 11 45 08	 movss	 DWORD PTR _temp$[ebp], xmm0

; 448  : 
; 449  : 	*big_needle = rad(131) - rad(0.2183) * temp;

  0005d	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _temp$[ebp]
  00062	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f6f364304fdf3b6
  0006a	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40024a8240000000
  00072	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00076	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0007a	8b 45 0c	 mov	 eax, DWORD PTR _big_needle$[ebp]
  0007d	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 450  : 	*small_needle = rad(180) - 0.02 * PI * temp;

  00081	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _temp$[ebp]
  00086	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb015bf9999999a
  0008e	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@400921fb60000000
  00096	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0009a	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0009e	8b 45 10	 mov	 eax, DWORD PTR _small_needle$[ebp]
  000a1	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 451  : }

  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c2 0c 00	 ret	 12			; 0000000cH
?get_mi24_temperature_needle_values@@YGXMPAM0@Z ENDP	; get_mi24_temperature_needle_values
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\hind\hi_instr.c
;	COMDAT ?get_mi24_epr_needle_values@@YGXPAM00@Z
_TEXT	SEGMENT
tv301 = -224						; size = 8
tv295 = -224						; size = 8
tv193 = -216						; size = 8
tv149 = -216						; size = 8
tv299 = -208						; size = 8
tv293 = -208						; size = 8
tv194 = -200						; size = 8
tv150 = -200						; size = 8
tv297 = -192						; size = 8
tv291 = -192						; size = 8
$T1 = -184						; size = 8
$T2 = -176						; size = 8
$T3 = -168						; size = 8
$T4 = -160						; size = 8
$T5 = -152						; size = 8
$T6 = -144						; size = 8
$T7 = -136						; size = 8
$T8 = -128						; size = 8
$T9 = -120						; size = 8
$T10 = -112						; size = 8
$T11 = -104						; size = 8
$T12 = -96						; size = 8
$T13 = -88						; size = 8
$T14 = -80						; size = 8
_engine_power_ratio$ = -8				; size = 4
_ambient_pressure$ = -4					; size = 4
_limits$ = 8						; size = 4
_left$ = 12						; size = 4
_right$ = 16						; size = 4
?get_mi24_epr_needle_values@@YGXPAM00@Z PROC		; get_mi24_epr_needle_values, COMDAT

; 464  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 465  : 	float ambient_pressure = get_air_density(current_flight_dynamics->barometric_altitude.value);

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00011	51		 push	 ecx
  00012	f3 0f 10 80 2c
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9260]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 ?get_air_density@@YGMM@Z ; get_air_density
  00024	d9 5d fc	 fstp	 DWORD PTR _ambient_pressure$[ebp]

; 466  : 	float engine_power_ratio;
; 467  : 
; 468  : 	*limits = rad(15) * max(ambient_pressure - 0.5, 0.0) * 2;

  00027	0f 57 c0	 xorps	 xmm0, xmm0
  0002a	f2 0f 11 45 b0	 movsd	 QWORD PTR $T14[ebp], xmm0
  0002f	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _ambient_pressure$[ebp]
  00034	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0003c	f2 0f 11 45 a8	 movsd	 QWORD PTR $T13[ebp], xmm0
  00041	8d 45 b0	 lea	 eax, DWORD PTR $T14[ebp]
  00044	50		 push	 eax
  00045	8d 4d a8	 lea	 ecx, DWORD PTR $T13[ebp]
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 ??$max@N@std@@YGABNABN0@Z ; std::max<double>
  0004e	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fd0c15240000000
  00056	f2 0f 59 00	 mulsd	 xmm0, QWORD PTR [eax]
  0005a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  00062	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00066	8b 55 08	 mov	 edx, DWORD PTR _limits$[ebp]
  00069	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 469  : 
; 470  : 	engine_power_ratio = (current_flight_dynamics->left_engine_n1_rpm.value - current_flight_dynamics->engine_idle_rpm - 8.0)

  0006d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00072	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00078	f3 0f 10 80 94
	1c 00 00	 movss	 xmm0, DWORD PTR [eax+7316]
  00080	f3 0f 5c 81 38
	25 00 00	 subss	 xmm0, DWORD PTR [ecx+9528]
  00088	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0008c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4020000000000000
  00094	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0009a	f3 0f 5a 8a 7c
	1c 00 00	 cvtss2sd xmm1, DWORD PTR [edx+7292]
  000a2	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  000a6	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@409db00000000000
  000ae	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000b2	f3 0f 11 45 f8	 movss	 DWORD PTR _engine_power_ratio$[ebp], xmm0

; 471  : 		* current_flight_dynamics->left_engine_rpm.value / 1900;
; 472  : 	*left = bound(engine_power_ratio * rad(19) * max(ambient_pressure - 0.5, 0.0) * 2, 0.0, rad(25));;

  000b7	0f 57 c0	 xorps	 xmm0, xmm0
  000ba	f2 0f 11 45 a0	 movsd	 QWORD PTR $T12[ebp], xmm0
  000bf	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _ambient_pressure$[ebp]
  000c4	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe0000000000000
  000cc	f2 0f 11 45 98	 movsd	 QWORD PTR $T11[ebp], xmm0
  000d1	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _engine_power_ratio$[ebp]
  000d6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ea9c91f
  000de	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000e2	8d 45 a0	 lea	 eax, DWORD PTR $T12[ebp]
  000e5	50		 push	 eax
  000e6	8d 4d 98	 lea	 ecx, DWORD PTR $T11[ebp]
  000e9	51		 push	 ecx
  000ea	f2 0f 11 85 40
	ff ff ff	 movsd	 QWORD PTR tv291[ebp], xmm0
  000f2	e8 00 00 00 00	 call	 ??$max@N@std@@YGABNABN0@Z ; std::max<double>
  000f7	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv291[ebp]
  000ff	f2 0f 59 00	 mulsd	 xmm0, QWORD PTR [eax]
  00103	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  0010b	0f 57 c9	 xorps	 xmm1, xmm1
  0010e	66 0f 2f c8	 comisd	 xmm1, xmm0
  00112	76 10		 jbe	 SHORT $LN5@get_mi24_e
  00114	0f 57 c0	 xorps	 xmm0, xmm0
  00117	f2 0f 11 85 38
	ff ff ff	 movsd	 QWORD PTR tv150[ebp], xmm0
  0011f	e9 e2 00 00 00	 jmp	 $LN6@get_mi24_e
$LN5@get_mi24_e:
  00124	0f 57 c0	 xorps	 xmm0, xmm0
  00127	f2 0f 11 45 90	 movsd	 QWORD PTR $T10[ebp], xmm0
  0012c	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _ambient_pressure$[ebp]
  00131	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00139	f2 0f 11 45 88	 movsd	 QWORD PTR $T9[ebp], xmm0
  0013e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _engine_power_ratio$[ebp]
  00143	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ea9c91f
  0014b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0014f	8d 55 90	 lea	 edx, DWORD PTR $T10[ebp]
  00152	52		 push	 edx
  00153	8d 45 88	 lea	 eax, DWORD PTR $T9[ebp]
  00156	50		 push	 eax
  00157	f2 0f 11 85 30
	ff ff ff	 movsd	 QWORD PTR tv293[ebp], xmm0
  0015f	e8 00 00 00 00	 call	 ??$max@N@std@@YGABNABN0@Z ; std::max<double>
  00164	f2 0f 10 85 30
	ff ff ff	 movsd	 xmm0, QWORD PTR tv293[ebp]
  0016c	f2 0f 59 00	 mulsd	 xmm0, QWORD PTR [eax]
  00170	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  00178	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fdbecde60000000
  00180	76 12		 jbe	 SHORT $LN3@get_mi24_e
  00182	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fdbecde60000000
  0018a	f2 0f 11 85 28
	ff ff ff	 movsd	 QWORD PTR tv149[ebp], xmm0
  00192	eb 62		 jmp	 SHORT $LN4@get_mi24_e
$LN3@get_mi24_e:
  00194	0f 57 c0	 xorps	 xmm0, xmm0
  00197	f2 0f 11 45 80	 movsd	 QWORD PTR $T8[ebp], xmm0
  0019c	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _ambient_pressure$[ebp]
  001a1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe0000000000000
  001a9	f2 0f 11 85 78
	ff ff ff	 movsd	 QWORD PTR $T7[ebp], xmm0
  001b1	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _engine_power_ratio$[ebp]
  001b6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ea9c91f
  001be	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001c2	8d 4d 80	 lea	 ecx, DWORD PTR $T8[ebp]
  001c5	51		 push	 ecx
  001c6	8d 95 78 ff ff
	ff		 lea	 edx, DWORD PTR $T7[ebp]
  001cc	52		 push	 edx
  001cd	f2 0f 11 85 20
	ff ff ff	 movsd	 QWORD PTR tv295[ebp], xmm0
  001d5	e8 00 00 00 00	 call	 ??$max@N@std@@YGABNABN0@Z ; std::max<double>
  001da	f2 0f 10 85 20
	ff ff ff	 movsd	 xmm0, QWORD PTR tv295[ebp]
  001e2	f2 0f 59 00	 mulsd	 xmm0, QWORD PTR [eax]
  001e6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  001ee	f2 0f 11 85 28
	ff ff ff	 movsd	 QWORD PTR tv149[ebp], xmm0
$LN4@get_mi24_e:
  001f6	f2 0f 10 85 28
	ff ff ff	 movsd	 xmm0, QWORD PTR tv149[ebp]
  001fe	f2 0f 11 85 38
	ff ff ff	 movsd	 QWORD PTR tv150[ebp], xmm0
$LN6@get_mi24_e:
  00206	f2 0f 5a 85 38
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv150[ebp]
  0020e	8b 45 0c	 mov	 eax, DWORD PTR _left$[ebp]
  00211	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 473  : 
; 474  : 	engine_power_ratio = (current_flight_dynamics->right_engine_n1_rpm.value - current_flight_dynamics->engine_idle_rpm - 8.0)

  00215	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0021a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00220	f3 0f 10 80 f4
	1c 00 00	 movss	 xmm0, DWORD PTR [eax+7412]
  00228	f3 0f 5c 81 38
	25 00 00	 subss	 xmm0, DWORD PTR [ecx+9528]
  00230	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00234	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4020000000000000
  0023c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00242	f3 0f 5a 8a dc
	1c 00 00	 cvtss2sd xmm1, DWORD PTR [edx+7388]
  0024a	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0024e	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@409db00000000000
  00256	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0025a	f3 0f 11 45 f8	 movss	 DWORD PTR _engine_power_ratio$[ebp], xmm0

; 475  : 		* current_flight_dynamics->right_engine_rpm.value / 1900;
; 476  : 	*right = bound(engine_power_ratio * rad(19) * max(ambient_pressure - 0.5, 0.0) * 2, 0.0, rad(25));;

  0025f	0f 57 c0	 xorps	 xmm0, xmm0
  00262	f2 0f 11 85 70
	ff ff ff	 movsd	 QWORD PTR $T6[ebp], xmm0
  0026a	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _ambient_pressure$[ebp]
  0026f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00277	f2 0f 11 85 68
	ff ff ff	 movsd	 QWORD PTR $T5[ebp], xmm0
  0027f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _engine_power_ratio$[ebp]
  00284	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ea9c91f
  0028c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00290	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  00296	50		 push	 eax
  00297	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  0029d	51		 push	 ecx
  0029e	f2 0f 11 85 40
	ff ff ff	 movsd	 QWORD PTR tv297[ebp], xmm0
  002a6	e8 00 00 00 00	 call	 ??$max@N@std@@YGABNABN0@Z ; std::max<double>
  002ab	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv297[ebp]
  002b3	f2 0f 59 00	 mulsd	 xmm0, QWORD PTR [eax]
  002b7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  002bf	0f 57 c9	 xorps	 xmm1, xmm1
  002c2	66 0f 2f c8	 comisd	 xmm1, xmm0
  002c6	76 10		 jbe	 SHORT $LN9@get_mi24_e
  002c8	0f 57 c0	 xorps	 xmm0, xmm0
  002cb	f2 0f 11 85 38
	ff ff ff	 movsd	 QWORD PTR tv194[ebp], xmm0
  002d3	e9 f4 00 00 00	 jmp	 $LN10@get_mi24_e
$LN9@get_mi24_e:
  002d8	0f 57 c0	 xorps	 xmm0, xmm0
  002db	f2 0f 11 85 60
	ff ff ff	 movsd	 QWORD PTR $T4[ebp], xmm0
  002e3	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _ambient_pressure$[ebp]
  002e8	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe0000000000000
  002f0	f2 0f 11 85 58
	ff ff ff	 movsd	 QWORD PTR $T3[ebp], xmm0
  002f8	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _engine_power_ratio$[ebp]
  002fd	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ea9c91f
  00305	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00309	8d 95 60 ff ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  0030f	52		 push	 edx
  00310	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00316	50		 push	 eax
  00317	f2 0f 11 85 30
	ff ff ff	 movsd	 QWORD PTR tv299[ebp], xmm0
  0031f	e8 00 00 00 00	 call	 ??$max@N@std@@YGABNABN0@Z ; std::max<double>
  00324	f2 0f 10 85 30
	ff ff ff	 movsd	 xmm0, QWORD PTR tv299[ebp]
  0032c	f2 0f 59 00	 mulsd	 xmm0, QWORD PTR [eax]
  00330	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  00338	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fdbecde60000000
  00340	76 12		 jbe	 SHORT $LN7@get_mi24_e
  00342	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fdbecde60000000
  0034a	f2 0f 11 85 28
	ff ff ff	 movsd	 QWORD PTR tv193[ebp], xmm0
  00352	eb 68		 jmp	 SHORT $LN8@get_mi24_e
$LN7@get_mi24_e:
  00354	0f 57 c0	 xorps	 xmm0, xmm0
  00357	f2 0f 11 85 50
	ff ff ff	 movsd	 QWORD PTR $T2[ebp], xmm0
  0035f	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _ambient_pressure$[ebp]
  00364	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0036c	f2 0f 11 85 48
	ff ff ff	 movsd	 QWORD PTR $T1[ebp], xmm0
  00374	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _engine_power_ratio$[ebp]
  00379	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ea9c91f
  00381	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00385	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0038b	51		 push	 ecx
  0038c	8d 95 48 ff ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  00392	52		 push	 edx
  00393	f2 0f 11 85 20
	ff ff ff	 movsd	 QWORD PTR tv301[ebp], xmm0
  0039b	e8 00 00 00 00	 call	 ??$max@N@std@@YGABNABN0@Z ; std::max<double>
  003a0	f2 0f 10 85 20
	ff ff ff	 movsd	 xmm0, QWORD PTR tv301[ebp]
  003a8	f2 0f 59 00	 mulsd	 xmm0, QWORD PTR [eax]
  003ac	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  003b4	f2 0f 11 85 28
	ff ff ff	 movsd	 QWORD PTR tv193[ebp], xmm0
$LN8@get_mi24_e:
  003bc	f2 0f 10 85 28
	ff ff ff	 movsd	 xmm0, QWORD PTR tv193[ebp]
  003c4	f2 0f 11 85 38
	ff ff ff	 movsd	 QWORD PTR tv194[ebp], xmm0
$LN10@get_mi24_e:
  003cc	f2 0f 5a 85 38
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv194[ebp]
  003d4	8b 45 10	 mov	 eax, DWORD PTR _right$[ebp]
  003d7	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 477  : }

  003db	5f		 pop	 edi
  003dc	5e		 pop	 esi
  003dd	5b		 pop	 ebx
  003de	8b e5		 mov	 esp, ebp
  003e0	5d		 pop	 ebp
  003e1	c2 0c 00	 ret	 12			; 0000000cH
?get_mi24_epr_needle_values@@YGXPAM00@Z ENDP		; get_mi24_epr_needle_values
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\hind\hi_instr.c
;	COMDAT ?get_mi24_rpm_needle_value@@YGMM@Z
_TEXT	SEGMENT
tv71 = -72						; size = 4
_ret$ = -4						; size = 4
_rpm$ = 8						; size = 4
?get_mi24_rpm_needle_value@@YGMM@Z PROC			; get_mi24_rpm_needle_value, COMDAT

; 439  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 440  : 	float ret = rad(-46.0);

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4d87ac
  00011	f3 0f 11 45 fc	 movss	 DWORD PTR _ret$[ebp], xmm0

; 441  : 
; 442  : 	return ret + rpm * rad(-3.13);

  00016	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _ret$[ebp]
  0001b	f3 0f 5a 4d 08	 cvtss2sd xmm1, DWORD PTR _rpm$[ebp]
  00020	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@bfabf84e87333333
  00028	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0002c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00030	f3 0f 11 45 b8	 movss	 DWORD PTR tv71[ebp], xmm0
  00035	d9 45 b8	 fld	 DWORD PTR tv71[ebp]

; 443  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?get_mi24_rpm_needle_value@@YGMM@Z ENDP			; get_mi24_rpm_needle_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\hind\hi_instr.c
;	COMDAT ?get_mi24_barometric_altimeter_needle_values@@YGXPAM0@Z
_TEXT	SEGMENT
_alt$ = -4						; size = 4
_shrt$ = 8						; size = 4
_lng$ = 12						; size = 4
?get_mi24_barometric_altimeter_needle_values@@YGXPAM0@Z PROC ; get_mi24_barometric_altimeter_needle_values, COMDAT

; 411  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 412  : 	float alt = current_flight_dynamics->barometric_altitude.value;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0000e	f3 0f 10 80 2c
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9260]
  00016	f3 0f 11 45 fc	 movss	 DWORD PTR _alt$[ebp], xmm0

; 413  : 
; 414  : 	*shrt = -(alt / 10000.0) * 2 * PI;

  0001b	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _alt$[ebp]
  00020	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40c3880000000000
  00028	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  0002f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  00037	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@400921fb60000000
  0003f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00043	8b 45 08	 mov	 eax, DWORD PTR _shrt$[ebp]
  00046	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 415  : 	*lng = -(alt / 1000.0) * 2 * PI;

  0004a	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _alt$[ebp]
  0004f	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@408f400000000000
  00057	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  0005e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  00066	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@400921fb60000000
  0006e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00072	8b 45 0c	 mov	 eax, DWORD PTR _lng$[ebp]
  00075	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 416  : }

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
?get_mi24_barometric_altimeter_needle_values@@YGXPAM0@Z ENDP ; get_mi24_barometric_altimeter_needle_values
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\hind\hi_instr.c
;	COMDAT ?get_mi24_radar_altimeter_needle_value@@YGMXZ
_TEXT	SEGMENT
tv75 = -88						; size = 8
tv76 = -80						; size = 8
tv171 = -76						; size = 4
_roll$ = -8						; size = 4
_alt$ = -4						; size = 4
?get_mi24_radar_altimeter_needle_value@@YGMXZ PROC	; get_mi24_radar_altimeter_needle_value, COMDAT

; 389  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 390  : 	float alt = bound(current_flight_dynamics->radar_altitude.value, 0.0, 700.0);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0000e	f3 0f 5a 80 44
	24 00 00	 cvtss2sd xmm0, DWORD PTR [eax+9284]
  00016	0f 57 c9	 xorps	 xmm1, xmm1
  00019	66 0f 2f c8	 comisd	 xmm1, xmm0
  0001d	76 0a		 jbe	 SHORT $LN14@get_mi24_r
  0001f	0f 57 c0	 xorps	 xmm0, xmm0
  00022	f2 0f 11 45 b0	 movsd	 QWORD PTR tv76[ebp], xmm0
  00027	eb 44		 jmp	 SHORT $LN15@get_mi24_r
$LN14@get_mi24_r:
  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0002f	f3 0f 5a 81 44
	24 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+9284]
  00037	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4085e00000000000
  0003f	76 0f		 jbe	 SHORT $LN12@get_mi24_r
  00041	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4085e00000000000
  00049	f2 0f 11 45 a8	 movsd	 QWORD PTR tv75[ebp], xmm0
  0004e	eb 13		 jmp	 SHORT $LN13@get_mi24_r
$LN12@get_mi24_r:
  00050	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00056	f3 0f 5a 82 44
	24 00 00	 cvtss2sd xmm0, DWORD PTR [edx+9284]
  0005e	f2 0f 11 45 a8	 movsd	 QWORD PTR tv75[ebp], xmm0
$LN13@get_mi24_r:
  00063	f2 0f 10 45 a8	 movsd	 xmm0, QWORD PTR tv75[ebp]
  00068	f2 0f 11 45 b0	 movsd	 QWORD PTR tv76[ebp], xmm0
$LN15@get_mi24_r:
  0006d	f2 0f 5a 45 b0	 cvtsd2ss xmm0, QWORD PTR tv76[ebp]
  00072	f3 0f 11 45 fc	 movss	 DWORD PTR _alt$[ebp], xmm0

; 391  : 	float roll = 0.0;

  00077	0f 57 c0	 xorps	 xmm0, xmm0
  0007a	f3 0f 11 45 f8	 movss	 DWORD PTR _roll$[ebp], xmm0

; 392  : 
; 393  : 	if (!electrical_system_active())

  0007f	e8 00 00 00 00	 call	 ?electrical_system_active@@YGHXZ ; electrical_system_active
  00084	85 c0		 test	 eax, eax
  00086	75 08		 jne	 SHORT $LN2@get_mi24_r

; 394  : 		alt = 0.0;

  00088	0f 57 c0	 xorps	 xmm0, xmm0
  0008b	f3 0f 11 45 fc	 movss	 DWORD PTR _alt$[ebp], xmm0
$LN2@get_mi24_r:

; 395  : 
; 396  : 	if (alt < 20.0)

  00090	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _alt$[ebp]
  00095	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4034000000000000
  0009d	66 0f 2f c8	 comisd	 xmm1, xmm0
  000a1	76 23		 jbe	 SHORT $LN3@get_mi24_r

; 397  : 		roll = alt / 20.0 * rad(29.0);

  000a3	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _alt$[ebp]
  000a8	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4034000000000000
  000b0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0325801000000
  000b8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000bc	f3 0f 11 45 f8	 movss	 DWORD PTR _roll$[ebp], xmm0
  000c1	e9 fa 00 00 00	 jmp	 $LN10@get_mi24_r
$LN3@get_mi24_r:

; 398  : 	else if (alt < 60.0)

  000c6	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _alt$[ebp]
  000cb	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@404e000000000000
  000d3	66 0f 2f c8	 comisd	 xmm1, xmm0
  000d7	76 33		 jbe	 SHORT $LN5@get_mi24_r

; 399  : 		roll = rad(29.0) + (alt - 20.0) / 40.0 * rad(64.0);

  000d9	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _alt$[ebp]
  000de	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4034000000000000
  000e6	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4044000000000000
  000ee	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff1df46a0000000
  000f6	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0325801000000
  000fe	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00102	f3 0f 11 45 f8	 movss	 DWORD PTR _roll$[ebp], xmm0
  00107	e9 b4 00 00 00	 jmp	 $LN10@get_mi24_r
$LN5@get_mi24_r:

; 400  : 	else if (alt < 100.0)

  0010c	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _alt$[ebp]
  00111	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4059000000000000
  00119	66 0f 2f c8	 comisd	 xmm1, xmm0
  0011d	76 30		 jbe	 SHORT $LN7@get_mi24_r

; 401  : 		roll = rad(93.0) + (alt - 60.0) / 40.0 * rad(62.0);

  0011f	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _alt$[ebp]
  00124	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@404e000000000000
  0012c	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4044000000000000
  00134	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff1504c6b000000
  0013c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff9f872a0800000
  00144	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00148	f3 0f 11 45 f8	 movss	 DWORD PTR _roll$[ebp], xmm0
  0014d	eb 71		 jmp	 SHORT $LN10@get_mi24_r
$LN7@get_mi24_r:

; 402  : 	else if (alt < 500.0)

  0014f	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _alt$[ebp]
  00154	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@407f400000000000
  0015c	66 0f 2f c8	 comisd	 xmm1, xmm0
  00160	76 30		 jbe	 SHORT $LN9@get_mi24_r

; 403  : 		roll = rad(155.0) + (alt - 100.0) / 400.0 * rad(105.0);

  00162	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _alt$[ebp]
  00167	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4059000000000000
  0016f	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4079000000000000
  00177	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ffd524fde800000
  0017f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4005a45f85c00000
  00187	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0018b	f3 0f 11 45 f8	 movss	 DWORD PTR _roll$[ebp], xmm0

; 404  : 	else

  00190	eb 2e		 jmp	 SHORT $LN10@get_mi24_r
$LN9@get_mi24_r:

; 405  : 		roll = rad(260.0) + (alt - 500.0) / 200.0 * rad(49.0);

  00192	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _alt$[ebp]
  00197	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@407f400000000000
  0019f	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4069000000000000
  001a7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3feb5de425000000
  001af	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401226c3ba800000
  001b7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001bb	f3 0f 11 45 f8	 movss	 DWORD PTR _roll$[ebp], xmm0
$LN10@get_mi24_r:

; 406  : 
; 407  : 	return -roll;

  001c0	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _roll$[ebp]
  001c5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001cc	f3 0f 11 45 b4	 movss	 DWORD PTR tv171[ebp], xmm0
  001d1	d9 45 b4	 fld	 DWORD PTR tv171[ebp]

; 408  : }

  001d4	5f		 pop	 edi
  001d5	5e		 pop	 esi
  001d6	5b		 pop	 ebx
  001d7	8b e5		 mov	 esp, ebp
  001d9	5d		 pop	 ebp
  001da	c3		 ret	 0
?get_mi24_radar_altimeter_needle_value@@YGMXZ ENDP	; get_mi24_radar_altimeter_needle_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\hind\hi_instr.c
;	COMDAT ?get_mi24_hover_indicator_vvi_needle_value@@YGMXZ
_TEXT	SEGMENT
tv75 = -84						; size = 8
tv76 = -76						; size = 8
tv93 = -72						; size = 4
_vvi$ = -4						; size = 4
?get_mi24_hover_indicator_vvi_needle_value@@YGMXZ PROC	; get_mi24_hover_indicator_vvi_needle_value, COMDAT

; 382  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 383  : 	float vvi = bound(current_flight_dynamics->world_velocity_y.value, -10.0, 10.0);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0000e	f3 0f 5a 80 14
	21 00 00	 cvtss2sd xmm0, DWORD PTR [eax+8468]
  00016	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c024000000000000
  0001e	66 0f 2f c8	 comisd	 xmm1, xmm0
  00022	76 0f		 jbe	 SHORT $LN5@get_mi24_h
  00024	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c024000000000000
  0002c	f2 0f 11 45 b4	 movsd	 QWORD PTR tv76[ebp], xmm0
  00031	eb 44		 jmp	 SHORT $LN6@get_mi24_h
$LN5@get_mi24_h:
  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00039	f3 0f 5a 81 14
	21 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+8468]
  00041	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4024000000000000
  00049	76 0f		 jbe	 SHORT $LN3@get_mi24_h
  0004b	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4024000000000000
  00053	f2 0f 11 45 ac	 movsd	 QWORD PTR tv75[ebp], xmm0
  00058	eb 13		 jmp	 SHORT $LN4@get_mi24_h
$LN3@get_mi24_h:
  0005a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00060	f3 0f 5a 82 14
	21 00 00	 cvtss2sd xmm0, DWORD PTR [edx+8468]
  00068	f2 0f 11 45 ac	 movsd	 QWORD PTR tv75[ebp], xmm0
$LN4@get_mi24_h:
  0006d	f2 0f 10 45 ac	 movsd	 xmm0, QWORD PTR tv75[ebp]
  00072	f2 0f 11 45 b4	 movsd	 QWORD PTR tv76[ebp], xmm0
$LN6@get_mi24_h:
  00077	f2 0f 5a 45 b4	 cvtsd2ss xmm0, QWORD PTR tv76[ebp]
  0007c	f3 0f 11 45 fc	 movss	 DWORD PTR _vvi$[ebp], xmm0

; 384  : 
; 385  : 	return (3.0 - vvi) * rad(3.85);

  00081	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _vvi$[ebp]
  00086	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4008000000000000
  0008e	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00092	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fb133b3fa000000
  0009a	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0009e	f3 0f 11 45 b8	 movss	 DWORD PTR tv93[ebp], xmm0
  000a3	d9 45 b8	 fld	 DWORD PTR tv93[ebp]

; 386  : }

  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
?get_mi24_hover_indicator_vvi_needle_value@@YGMXZ ENDP	; get_mi24_hover_indicator_vvi_needle_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\hind\hi_instr.c
;	COMDAT ?get_mi24_hover_indicator_speed@@YGXPAM0@Z
_TEXT	SEGMENT
tv136 = -80						; size = 8
tv81 = -80						; size = 8
tv137 = -72						; size = 8
tv82 = -72						; size = 8
_longitudinal$ = 8					; size = 4
_sideways$ = 12						; size = 4
?get_mi24_hover_indicator_speed@@YGXPAM0@Z PROC		; get_mi24_hover_indicator_speed, COMDAT

; 372  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 373  : #define HOVER_SPEED_SCALING  0.000725  // 0.725 mm per kph
; 374  : 	*longitudinal = bound(kilometres_per_hour(current_flight_dynamics->velocity_z.value), -30.0, 55.0);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0000e	f3 0f 10 80 9c
	20 00 00	 movss	 xmm0, DWORD PTR [eax+8348]
  00016	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40666666
  0001e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00022	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c03e000000000000
  0002a	66 0f 2f c8	 comisd	 xmm1, xmm0
  0002e	76 0f		 jbe	 SHORT $LN5@get_mi24_h
  00030	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c03e000000000000
  00038	f2 0f 11 45 b8	 movsd	 QWORD PTR tv82[ebp], xmm0
  0003d	eb 5c		 jmp	 SHORT $LN6@get_mi24_h
$LN5@get_mi24_h:
  0003f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00045	f3 0f 10 81 9c
	20 00 00	 movss	 xmm0, DWORD PTR [ecx+8348]
  0004d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40666666
  00055	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00059	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@404b800000000000
  00061	76 0f		 jbe	 SHORT $LN3@get_mi24_h
  00063	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@404b800000000000
  0006b	f2 0f 11 45 b0	 movsd	 QWORD PTR tv81[ebp], xmm0
  00070	eb 1f		 jmp	 SHORT $LN4@get_mi24_h
$LN3@get_mi24_h:
  00072	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00078	f3 0f 10 82 9c
	20 00 00	 movss	 xmm0, DWORD PTR [edx+8348]
  00080	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40666666
  00088	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0008c	f2 0f 11 45 b0	 movsd	 QWORD PTR tv81[ebp], xmm0
$LN4@get_mi24_h:
  00091	f2 0f 10 45 b0	 movsd	 xmm0, QWORD PTR tv81[ebp]
  00096	f2 0f 11 45 b8	 movsd	 QWORD PTR tv82[ebp], xmm0
$LN6@get_mi24_h:
  0009b	f2 0f 5a 45 b8	 cvtsd2ss xmm0, QWORD PTR tv82[ebp]
  000a0	8b 45 08	 mov	 eax, DWORD PTR _longitudinal$[ebp]
  000a3	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 375  : 	*sideways = bound(kilometres_per_hour(-current_flight_dynamics->velocity_x.value), -30.0, 30.0);

  000a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000ac	f3 0f 10 80 6c
	20 00 00	 movss	 xmm0, DWORD PTR [eax+8300]
  000b4	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000bb	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40666666
  000c3	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000c7	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c03e000000000000
  000cf	66 0f 2f c8	 comisd	 xmm1, xmm0
  000d3	76 0f		 jbe	 SHORT $LN9@get_mi24_h
  000d5	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c03e000000000000
  000dd	f2 0f 11 45 b8	 movsd	 QWORD PTR tv137[ebp], xmm0
  000e2	eb 6a		 jmp	 SHORT $LN10@get_mi24_h
$LN9@get_mi24_h:
  000e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000ea	f3 0f 10 81 6c
	20 00 00	 movss	 xmm0, DWORD PTR [ecx+8300]
  000f2	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000f9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40666666
  00101	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00105	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@403e000000000000
  0010d	76 0f		 jbe	 SHORT $LN7@get_mi24_h
  0010f	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@403e000000000000
  00117	f2 0f 11 45 b0	 movsd	 QWORD PTR tv136[ebp], xmm0
  0011c	eb 26		 jmp	 SHORT $LN8@get_mi24_h
$LN7@get_mi24_h:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00124	f3 0f 10 82 6c
	20 00 00	 movss	 xmm0, DWORD PTR [edx+8300]
  0012c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00133	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40666666
  0013b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0013f	f2 0f 11 45 b0	 movsd	 QWORD PTR tv136[ebp], xmm0
$LN8@get_mi24_h:
  00144	f2 0f 10 45 b0	 movsd	 xmm0, QWORD PTR tv136[ebp]
  00149	f2 0f 11 45 b8	 movsd	 QWORD PTR tv137[ebp], xmm0
$LN10@get_mi24_h:
  0014e	f2 0f 5a 45 b8	 cvtsd2ss xmm0, QWORD PTR tv137[ebp]
  00153	8b 45 0c	 mov	 eax, DWORD PTR _sideways$[ebp]
  00156	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 376  : 
; 377  : 	*longitudinal *= HOVER_SPEED_SCALING;

  0015a	8b 45 08	 mov	 eax, DWORD PTR _longitudinal$[ebp]
  0015d	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00161	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f47c1bda5119ce0
  00169	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0016d	8b 4d 08	 mov	 ecx, DWORD PTR _longitudinal$[ebp]
  00170	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 378  : 	*sideways *= HOVER_SPEED_SCALING;

  00174	8b 45 0c	 mov	 eax, DWORD PTR _sideways$[ebp]
  00177	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  0017b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f47c1bda5119ce0
  00183	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00187	8b 4d 0c	 mov	 ecx, DWORD PTR _sideways$[ebp]
  0018a	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 379  : }

  0018e	5f		 pop	 edi
  0018f	5e		 pop	 esi
  00190	5b		 pop	 ebx
  00191	8b e5		 mov	 esp, ebp
  00193	5d		 pop	 ebp
  00194	c2 08 00	 ret	 8
?get_mi24_hover_indicator_speed@@YGXPAM0@Z ENDP		; get_mi24_hover_indicator_speed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\hind\hi_instr.c
;	COMDAT ?get_mi24_pitch_ladder_dispacement@@YGMXZ
_TEXT	SEGMENT
tv75 = -72						; size = 4
_pitch$ = -4						; size = 4
?get_mi24_pitch_ladder_dispacement@@YGMXZ PROC		; get_mi24_pitch_ladder_dispacement, COMDAT

; 365  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 366  : 	float pitch = current_flight_dynamics->pitch.value;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0000e	f3 0f 10 80 5c
	21 00 00	 movss	 xmm0, DWORD PTR [eax+8540]
  00016	f3 0f 11 45 fc	 movss	 DWORD PTR _pitch$[ebp], xmm0

; 367  : 
; 368  : 	return deg(-pitch) * 0.001;

  0001b	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  00020	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00027	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  0002f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00033	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0003b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0003f	f3 0f 11 45 b8	 movss	 DWORD PTR tv75[ebp], xmm0
  00044	d9 45 b8	 fld	 DWORD PTR tv75[ebp]

; 369  : }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
?get_mi24_pitch_ladder_dispacement@@YGMXZ ENDP		; get_mi24_pitch_ladder_dispacement
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\hind\hi_instr.c
;	COMDAT ?get_mi24_vertical_velocity_needle_value@@YGMXZ
_TEXT	SEGMENT
tv75 = -92						; size = 8
tv76 = -84						; size = 8
tv175 = -80						; size = 4
tv171 = -80						; size = 4
tv80 = -80						; size = 4
_roll$ = -12						; size = 4
_negative$ = -8						; size = 4
_vvi$ = -4						; size = 4
?get_mi24_vertical_velocity_needle_value@@YGMXZ PROC	; get_mi24_vertical_velocity_needle_value, COMDAT

; 342  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 343  : 	float vvi = bound(current_flight_dynamics->world_velocity_y.value, -30.0, 30.0);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0000e	f3 0f 5a 80 14
	21 00 00	 cvtss2sd xmm0, DWORD PTR [eax+8468]
  00016	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c03e000000000000
  0001e	66 0f 2f c8	 comisd	 xmm1, xmm0
  00022	76 0f		 jbe	 SHORT $LN13@get_mi24_v
  00024	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c03e000000000000
  0002c	f2 0f 11 45 ac	 movsd	 QWORD PTR tv76[ebp], xmm0
  00031	eb 44		 jmp	 SHORT $LN14@get_mi24_v
$LN13@get_mi24_v:
  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00039	f3 0f 5a 81 14
	21 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+8468]
  00041	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@403e000000000000
  00049	76 0f		 jbe	 SHORT $LN11@get_mi24_v
  0004b	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@403e000000000000
  00053	f2 0f 11 45 a4	 movsd	 QWORD PTR tv75[ebp], xmm0
  00058	eb 13		 jmp	 SHORT $LN12@get_mi24_v
$LN11@get_mi24_v:
  0005a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00060	f3 0f 5a 82 14
	21 00 00	 cvtss2sd xmm0, DWORD PTR [edx+8468]
  00068	f2 0f 11 45 a4	 movsd	 QWORD PTR tv75[ebp], xmm0
$LN12@get_mi24_v:
  0006d	f2 0f 10 45 a4	 movsd	 xmm0, QWORD PTR tv75[ebp]
  00072	f2 0f 11 45 ac	 movsd	 QWORD PTR tv76[ebp], xmm0
$LN14@get_mi24_v:
  00077	f2 0f 5a 45 ac	 cvtsd2ss xmm0, QWORD PTR tv76[ebp]
  0007c	f3 0f 11 45 fc	 movss	 DWORD PTR _vvi$[ebp], xmm0

; 344  : 	int negative = vvi < 0.0;

  00081	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _vvi$[ebp]
  00086	0f 57 c9	 xorps	 xmm1, xmm1
  00089	66 0f 2f c8	 comisd	 xmm1, xmm0
  0008d	76 09		 jbe	 SHORT $LN15@get_mi24_v
  0008f	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv80[ebp], 1
  00096	eb 07		 jmp	 SHORT $LN16@get_mi24_v
$LN15@get_mi24_v:
  00098	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN16@get_mi24_v:
  0009f	8b 45 b0	 mov	 eax, DWORD PTR tv80[ebp]
  000a2	89 45 f8	 mov	 DWORD PTR _negative$[ebp], eax

; 345  : 	float roll = 0.0;

  000a5	0f 57 c0	 xorps	 xmm0, xmm0
  000a8	f3 0f 11 45 f4	 movss	 DWORD PTR _roll$[ebp], xmm0

; 346  : 
; 347  : 	vvi = fabs(vvi);

  000ad	51		 push	 ecx
  000ae	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _vvi$[ebp]
  000b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b8	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  000bd	d9 5d fc	 fstp	 DWORD PTR _vvi$[ebp]

; 348  : 
; 349  : 	if (vvi < 5.0)

  000c0	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _vvi$[ebp]
  000c5	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4014000000000000
  000cd	66 0f 2f c8	 comisd	 xmm1, xmm0
  000d1	76 23		 jbe	 SHORT $LN2@get_mi24_v

; 350  : 		roll = vvi / 5.0 * rad(42.0);

  000d3	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _vvi$[ebp]
  000d8	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4014000000000000
  000e0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe7750cb2000000
  000e8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ec	f3 0f 11 45 f4	 movss	 DWORD PTR _roll$[ebp], xmm0
  000f1	e9 b4 00 00 00	 jmp	 $LN7@get_mi24_v
$LN2@get_mi24_v:

; 351  : 	else if (vvi < 10.0)

  000f6	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _vvi$[ebp]
  000fb	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4024000000000000
  00103	66 0f 2f c8	 comisd	 xmm1, xmm0
  00107	76 30		 jbe	 SHORT $LN4@get_mi24_v

; 352  : 		roll = rad(42.0) + (vvi - 5.0) / 5.0 * rad(38.5);

  00109	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _vvi$[ebp]
  0010e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4014000000000000
  00116	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4014000000000000
  0011e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe580a0f8800000
  00126	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe7750cb2000000
  0012e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00132	f3 0f 11 45 f4	 movss	 DWORD PTR _roll$[ebp], xmm0
  00137	eb 71		 jmp	 SHORT $LN7@get_mi24_v
$LN4@get_mi24_v:

; 353  : 	else if (vvi < 20.0)

  00139	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _vvi$[ebp]
  0013e	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4034000000000000
  00146	66 0f 2f c8	 comisd	 xmm1, xmm0
  0014a	76 30		 jbe	 SHORT $LN6@get_mi24_v

; 354  : 		roll = rad(80.5) + (vvi - 10.0) / 10.0 * rad(60.0);

  0014c	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _vvi$[ebp]
  00151	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4024000000000000
  00159	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4024000000000000
  00161	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c15236000000
  00169	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff67ad6d5400000
  00171	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00175	f3 0f 11 45 f4	 movss	 DWORD PTR _roll$[ebp], xmm0

; 355  : 	else

  0017a	eb 2e		 jmp	 SHORT $LN7@get_mi24_v
$LN6@get_mi24_v:

; 356  : 		roll = rad(140.5) + (vvi - 20.0) / 10.0 * rad(39.5);

  0017c	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _vvi$[ebp]
  00181	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4034000000000000
  00189	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4024000000000000
  00191	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe60f9b2d800000
  00199	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@40039e1485a00000
  001a1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001a5	f3 0f 11 45 f4	 movss	 DWORD PTR _roll$[ebp], xmm0
$LN7@get_mi24_v:

; 357  : 
; 358  : 	if (negative)

  001aa	83 7d f8 00	 cmp	 DWORD PTR _negative$[ebp], 0
  001ae	74 19		 je	 SHORT $LN8@get_mi24_v

; 359  : 		return rad(90) + roll;

  001b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  001b8	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _roll$[ebp]
  001bd	f3 0f 11 45 b0	 movss	 DWORD PTR tv171[ebp], xmm0
  001c2	d9 45 b0	 fld	 DWORD PTR tv171[ebp]
  001c5	eb 17		 jmp	 SHORT $LN9@get_mi24_v

; 360  : 	else

  001c7	eb 15		 jmp	 SHORT $LN9@get_mi24_v
$LN8@get_mi24_v:

; 361  : 		return rad(90) - roll;

  001c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  001d1	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _roll$[ebp]
  001d6	f3 0f 11 45 b0	 movss	 DWORD PTR tv175[ebp], xmm0
  001db	d9 45 b0	 fld	 DWORD PTR tv175[ebp]
$LN9@get_mi24_v:

; 362  : }

  001de	5f		 pop	 edi
  001df	5e		 pop	 esi
  001e0	5b		 pop	 ebx
  001e1	8b e5		 mov	 esp, ebp
  001e3	5d		 pop	 ebp
  001e4	c3		 ret	 0
?get_mi24_vertical_velocity_needle_value@@YGMXZ ENDP	; get_mi24_vertical_velocity_needle_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\hind\hi_instr.c
;	COMDAT ?get_mi24_airspeed_needle_value@@YGMXZ
_TEXT	SEGMENT
tv81 = -88						; size = 8
tv82 = -80						; size = 8
tv172 = -76						; size = 4
_roll$ = -8						; size = 4
_airspeed$ = -4						; size = 4
?get_mi24_airspeed_needle_value@@YGMXZ PROC		; get_mi24_airspeed_needle_value, COMDAT

; 326  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 327  : 	float airspeed = bound(kilometres_per_hour(current_flight_dynamics->indicated_airspeed.value), 0.0, 450.0);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0000e	f3 0f 10 80 fc
	23 00 00	 movss	 xmm0, DWORD PTR [eax+9212]
  00016	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40666666
  0001e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00022	0f 57 c9	 xorps	 xmm1, xmm1
  00025	66 0f 2f c8	 comisd	 xmm1, xmm0
  00029	76 0a		 jbe	 SHORT $LN11@get_mi24_a
  0002b	0f 57 c0	 xorps	 xmm0, xmm0
  0002e	f2 0f 11 45 b0	 movsd	 QWORD PTR tv82[ebp], xmm0
  00033	eb 5c		 jmp	 SHORT $LN12@get_mi24_a
$LN11@get_mi24_a:
  00035	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0003b	f3 0f 10 81 fc
	23 00 00	 movss	 xmm0, DWORD PTR [ecx+9212]
  00043	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40666666
  0004b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0004f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@407c200000000000
  00057	76 0f		 jbe	 SHORT $LN9@get_mi24_a
  00059	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@407c200000000000
  00061	f2 0f 11 45 a8	 movsd	 QWORD PTR tv81[ebp], xmm0
  00066	eb 1f		 jmp	 SHORT $LN10@get_mi24_a
$LN9@get_mi24_a:
  00068	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0006e	f3 0f 10 82 fc
	23 00 00	 movss	 xmm0, DWORD PTR [edx+9212]
  00076	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40666666
  0007e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00082	f2 0f 11 45 a8	 movsd	 QWORD PTR tv81[ebp], xmm0
$LN10@get_mi24_a:
  00087	f2 0f 10 45 a8	 movsd	 xmm0, QWORD PTR tv81[ebp]
  0008c	f2 0f 11 45 b0	 movsd	 QWORD PTR tv82[ebp], xmm0
$LN12@get_mi24_a:
  00091	f2 0f 5a 45 b0	 cvtsd2ss xmm0, QWORD PTR tv82[ebp]
  00096	f3 0f 11 45 fc	 movss	 DWORD PTR _airspeed$[ebp], xmm0

; 328  : 	float roll = -4.0;

  0009b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  000a3	f3 0f 11 45 f8	 movss	 DWORD PTR _roll$[ebp], xmm0

; 329  : 
; 330  : 	if (airspeed < 50.0)

  000a8	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _airspeed$[ebp]
  000ad	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4049000000000000
  000b5	66 0f 2f c8	 comisd	 xmm1, xmm0
  000b9	76 2f		 jbe	 SHORT $LN2@get_mi24_a

; 331  : 		roll = rad(-4.0) + airspeed / 50 * rad(20.0);

  000bb	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _airspeed$[ebp]
  000c0	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42480000
  000c8	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000cc	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd6571848000000
  000d4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfb1df46a0000000
  000dc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000e0	f3 0f 11 45 f8	 movss	 DWORD PTR _roll$[ebp], xmm0
  000e5	e9 c0 00 00 00	 jmp	 $LN7@get_mi24_a
$LN2@get_mi24_a:

; 332  : 	else if (airspeed < 100.0)

  000ea	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _airspeed$[ebp]
  000ef	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4059000000000000
  000f7	66 0f 2f c8	 comisd	 xmm1, xmm0
  000fb	76 34		 jbe	 SHORT $LN4@get_mi24_a

; 333  : 		roll = rad(16.0) + (airspeed - 50) / 50 * rad(37.5);

  000fd	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _airspeed$[ebp]
  00102	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@42480000
  0010a	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42480000
  00112	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00116	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe4f1a6c3800000
  0011e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd1df46a0000000
  00126	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0012a	f3 0f 11 45 f8	 movss	 DWORD PTR _roll$[ebp], xmm0
  0012f	eb 79		 jmp	 SHORT $LN7@get_mi24_a
$LN4@get_mi24_a:

; 334  : 	else if (airspeed < 250.0)

  00131	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _airspeed$[ebp]
  00136	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@406f400000000000
  0013e	66 0f 2f c8	 comisd	 xmm1, xmm0
  00142	76 34		 jbe	 SHORT $LN6@get_mi24_a

; 335  : 		roll = rad(53.5) + (airspeed - 100) / 150 * rad(126.5);

  00144	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _airspeed$[ebp]
  00149	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@42c80000
  00151	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@43160000
  00159	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0015d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4001a9a8cc200000
  00165	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fede14a13800000
  0016d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00171	f3 0f 11 45 f8	 movss	 DWORD PTR _roll$[ebp], xmm0

; 336  : 	else

  00176	eb 32		 jmp	 SHORT $LN7@get_mi24_a
$LN6@get_mi24_a:

; 337  : 		roll = rad(180.0) + (airspeed - 250) / 200 * rad(164.0);

  00178	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _airspeed$[ebp]
  0017d	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@437a0000
  00185	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@43480000
  0018d	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00191	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4006e6127d000000
  00199	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@400921fb51000000
  001a1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001a5	f3 0f 11 45 f8	 movss	 DWORD PTR _roll$[ebp], xmm0
$LN7@get_mi24_a:

; 338  : 	return -roll;

  001aa	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _roll$[ebp]
  001af	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001b6	f3 0f 11 45 b4	 movss	 DWORD PTR tv172[ebp], xmm0
  001bb	d9 45 b4	 fld	 DWORD PTR tv172[ebp]

; 339  : }

  001be	5f		 pop	 edi
  001bf	5e		 pop	 esi
  001c0	5b		 pop	 ebx
  001c1	8b e5		 mov	 esp, ebp
  001c3	5d		 pop	 ebp
  001c4	c3		 ret	 0
?get_mi24_airspeed_needle_value@@YGMXZ ENDP		; get_mi24_airspeed_needle_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\cockpits\hind\hi_instr.c
;	COMDAT ?get_hind_virtual_cockpit_hsi_needle_values@@YGXPAM00@Z
_TEXT	SEGMENT
_drift_needle_value$ = -16				; size = 4
_flight_path_needle_value$ = -12			; size = 4
_direction_finder_needle_value$ = -8			; size = 4
_max_movement$ = -4					; size = 4
_direction_finder$ = 8					; size = 4
_flight_path$ = 12					; size = 4
_drift$ = 16						; size = 4
?get_hind_virtual_cockpit_hsi_needle_values@@YGXPAM00@Z PROC ; get_hind_virtual_cockpit_hsi_needle_values, COMDAT

; 299  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 300  : 	float
; 301  : 		max_movement = rad(270) * get_delta_time(),

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@4096cbe4
  00011	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00019	f3 0f 11 45 fc	 movss	 DWORD PTR _max_movement$[ebp], xmm0

; 302  : 		direction_finder_needle_value,
; 303  : 		flight_path_needle_value,
; 304  : 		drift_needle_value;
; 305  : 
; 306  : 	ASSERT  (direction_finder);

  0001e	83 7d 08 00	 cmp	 DWORD PTR _direction_finder$[ebp], 0
  00022	75 18		 jne	 SHORT $LN2@get_hind_v
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_hind_virtual_cockpit_hsi_needle_values@@YGXPAM00@Z@4JA
  00029	83 c0 07	 add	 eax, 7
  0002c	50		 push	 eax
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OGHPEEJN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@PFAKKLCO@direction_finder@
  00037	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_hind_v:

; 307  : 
; 308  : 	ASSERT (flight_path);

  0003c	83 7d 0c 00	 cmp	 DWORD PTR _flight_path$[ebp], 0
  00040	75 18		 jne	 SHORT $LN3@get_hind_v
  00042	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_hind_virtual_cockpit_hsi_needle_values@@YGXPAM00@Z@4JA
  00047	83 c0 09	 add	 eax, 9
  0004a	50		 push	 eax
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OGHPEEJN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GOBOJDMO@flight_path@
  00055	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_hind_v:

; 309  : 
; 310  : 	ASSERT (drift);

  0005a	83 7d 10 00	 cmp	 DWORD PTR _drift$[ebp], 0
  0005e	75 18		 jne	 SHORT $LN4@get_hind_v
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_hind_virtual_cockpit_hsi_needle_values@@YGXPAM00@Z@4JA
  00065	83 c0 0b	 add	 eax, 11			; 0000000bH
  00068	50		 push	 eax
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OGHPEEJN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_05BPGNBDFG@drift@
  00073	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_hind_v:

; 311  : 
; 312  : 	get_hsi_needle_values (&direction_finder_needle_value, &flight_path_needle_value, &drift_needle_value);

  00078	8d 45 f0	 lea	 eax, DWORD PTR _drift_needle_value$[ebp]
  0007b	50		 push	 eax
  0007c	8d 4d f4	 lea	 ecx, DWORD PTR _flight_path_needle_value$[ebp]
  0007f	51		 push	 ecx
  00080	8d 55 f8	 lea	 edx, DWORD PTR _direction_finder_needle_value$[ebp]
  00083	52		 push	 edx
  00084	e8 00 00 00 00	 call	 ?get_hsi_needle_values@@YGXPAM00@Z ; get_hsi_needle_values

; 313  : 
; 314  : 	modify_angle(direction_finder, -direction_finder_needle_value, max_movement);

  00089	51		 push	 ecx
  0008a	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _max_movement$[ebp]
  0008f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00094	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _direction_finder_needle_value$[ebp]
  00099	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000a0	51		 push	 ecx
  000a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a6	8b 45 08	 mov	 eax, DWORD PTR _direction_finder$[ebp]
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 ?modify_angle@@YGXPAMMM@Z ; modify_angle

; 315  : 
; 316  : 	modify_angle(flight_path, -flight_path_needle_value, max_movement);

  000af	51		 push	 ecx
  000b0	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _max_movement$[ebp]
  000b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ba	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _flight_path_needle_value$[ebp]
  000bf	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000c6	51		 push	 ecx
  000c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cc	8b 45 0c	 mov	 eax, DWORD PTR _flight_path$[ebp]
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 ?modify_angle@@YGXPAMMM@Z ; modify_angle

; 317  : 
; 318  : 	*drift = -drift_needle_value;

  000d5	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _drift_needle_value$[ebp]
  000da	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000e1	8b 45 10	 mov	 eax, DWORD PTR _drift$[ebp]
  000e4	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 319  : }

  000e8	5f		 pop	 edi
  000e9	5e		 pop	 esi
  000ea	5b		 pop	 ebx
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c2 0c 00	 ret	 12			; 0000000cH
?get_hind_virtual_cockpit_hsi_needle_values@@YGXPAM00@Z ENDP ; get_hind_virtual_cockpit_hsi_needle_values
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sqrt@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sqrt@@YGMM@Z PROC					; sqrt, COMDAT

; 294  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 295  : 	return (_CSTD sqrtf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sqrtf
  00019	83 c4 04	 add	 esp, 4

; 296  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sqrt@@YGMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?floor@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?floor@@YGMM@Z PROC					; floor, COMDAT

; 122  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 123  : 	return (_CSTD floorf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _floorf
  00019	83 c4 04	 add	 esp, 4

; 124  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?floor@@YGMM@Z ENDP					; floor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fabs@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?fabs@@YGMM@Z PROC					; fabs, COMDAT

; 112  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 113  : 	return (_CSTD fabsf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _fabsf
  00019	83 c4 04	 add	 esp, 4

; 114  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?fabs@@YGMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan2@@YGMMM@Z
_TEXT	SEGMENT
__Yx$ = 8						; size = 4
__Xx$ = 12						; size = 4
?atan2@@YGMMM@Z PROC					; atan2, COMDAT

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return (_CSTD atan2f(_Yx, _Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _atan2f
  00024	83 c4 08	 add	 esp, 8

; 58   : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?atan2@@YGMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?acos@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?acos@@YGMM@Z PROC					; acos, COMDAT

; 26   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 27   : 	return (_CSTD acosf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _acosf
  00019	83 c4 04	 add	 esp, 4

; 28   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?acos@@YGMM@Z ENDP					; acos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 760  :             return (float)sqrt(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sqrt
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 761  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _floorf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_floorf	PROC						; COMDAT

; 685  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 686  :             return (float)floor(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  0001c	83 c4 08	 add	 esp, 8
  0001f	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00022	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 687  :         }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
_floorf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 671  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 672  :             return (float)fabs(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _fabs
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 673  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv74 = -68						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 633  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 634  :             return (float)atan2(_Y, _X);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _atan2
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 635  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _acosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 623  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 624  :             return (float)acos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _acos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 625  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_acosf	ENDP
_TEXT	ENDS
END
