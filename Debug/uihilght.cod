; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\userint2\ui_draw\uihilght.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?ui_draw_hilight@@YGXMMMM@Z			; ui_draw_hilight
PUBLIC	__real@40000000
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?draw_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC	; draw_line
EXTRN	?ui_clip_area@@YGHPAM000@Z:PROC			; ui_clip_area
EXTRN	?ui_hilight_colour@@3UREAL_COLOUR@@A:DWORD	; ui_hilight_colour
EXTRN	?ui_x_origin@@3MA:DWORD				; ui_x_origin
EXTRN	?ui_y_origin@@3MA:DWORD				; ui_y_origin
EXTRN	__fltused:DWORD
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_draw\uihilght.c
;	COMDAT ?ui_draw_hilight@@YGXMMMM@Z
_TEXT	SEGMENT
_int_y2$ = -32						; size = 4
_int_x2$ = -28						; size = 4
_int_y1$ = -24						; size = 4
_int_x1$ = -20						; size = 4
_new_y2$ = -16						; size = 4
_new_x2$ = -12						; size = 4
_new_y1$ = -8						; size = 4
_new_x1$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
?ui_draw_hilight@@YGXMMMM@Z PROC			; ui_draw_hilight, COMDAT

; 76   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 77   : 
; 78   : 	float
; 79   : 		new_x1,
; 80   : 		new_y1,
; 81   : 		new_x2,
; 82   : 		new_y2;
; 83   : 
; 84   : 	int
; 85   : 		int_x1,
; 86   : 		int_y1,
; 87   : 		int_x2,
; 88   : 		int_y2;
; 89   : 
; 90   : 	new_x1 = x1;

  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0000e	f3 0f 11 45 fc	 movss	 DWORD PTR _new_x1$[ebp], xmm0

; 91   : 
; 92   : 	new_y1 = y1;

  00013	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00018	f3 0f 11 45 f8	 movss	 DWORD PTR _new_y1$[ebp], xmm0

; 93   : 
; 94   : 	new_x2 = x2;

  0001d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00022	f3 0f 11 45 f4	 movss	 DWORD PTR _new_x2$[ebp], xmm0

; 95   : 
; 96   : 	new_y2 = y2;

  00027	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0002c	f3 0f 11 45 f0	 movss	 DWORD PTR _new_y2$[ebp], xmm0

; 97   : 
; 98   : 	// clip area to ui viewport
; 99   : 
; 100  : 	ui_clip_area (&new_x1, &new_y1, &new_x2, &new_y2);

  00031	8d 45 f0	 lea	 eax, DWORD PTR _new_y2$[ebp]
  00034	50		 push	 eax
  00035	8d 4d f4	 lea	 ecx, DWORD PTR _new_x2$[ebp]
  00038	51		 push	 ecx
  00039	8d 55 f8	 lea	 edx, DWORD PTR _new_y1$[ebp]
  0003c	52		 push	 edx
  0003d	8d 45 fc	 lea	 eax, DWORD PTR _new_x1$[ebp]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ?ui_clip_area@@YGHPAM000@Z ; ui_clip_area

; 101  : 
; 102  : 	// button coords should be in viewport coords,
; 103  : 	// so add ui_origin to convert into screen coords
; 104  : 
; 105  : 	x1 += ui_x_origin;

  00046	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0004b	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_x_origin@@3MA
  00053	f3 0f 11 45 08	 movss	 DWORD PTR _x1$[ebp], xmm0

; 106  : 
; 107  : 	y1 += ui_y_origin;

  00058	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0005d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_y_origin@@3MA
  00065	f3 0f 11 45 0c	 movss	 DWORD PTR _y1$[ebp], xmm0

; 108  : 
; 109  : 	x2 += ui_x_origin;

  0006a	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0006f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_x_origin@@3MA
  00077	f3 0f 11 45 10	 movss	 DWORD PTR _x2$[ebp], xmm0

; 110  : 
; 111  : 	y2 += ui_y_origin;

  0007c	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00081	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_y_origin@@3MA
  00089	f3 0f 11 45 14	 movss	 DWORD PTR _y2$[ebp], xmm0

; 112  : 
; 113  : 	new_x1 += ui_x_origin;

  0008e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _new_x1$[ebp]
  00093	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_x_origin@@3MA
  0009b	f3 0f 11 45 fc	 movss	 DWORD PTR _new_x1$[ebp], xmm0

; 114  : 
; 115  : 	new_y1 += ui_y_origin;

  000a0	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _new_y1$[ebp]
  000a5	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_y_origin@@3MA
  000ad	f3 0f 11 45 f8	 movss	 DWORD PTR _new_y1$[ebp], xmm0

; 116  : 
; 117  : 	new_x2 += ui_x_origin;

  000b2	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _new_x2$[ebp]
  000b7	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_x_origin@@3MA
  000bf	f3 0f 11 45 f4	 movss	 DWORD PTR _new_x2$[ebp], xmm0

; 118  : 
; 119  : 	new_y2 += ui_y_origin;

  000c4	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _new_y2$[ebp]
  000c9	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_y_origin@@3MA
  000d1	f3 0f 11 45 f0	 movss	 DWORD PTR _new_y2$[ebp], xmm0

; 120  : 
; 121  : 	// check if possible to draw
; 122  : 
; 123  : 	if ((new_x2 - new_x1 < 2) || (new_y2 - new_y1 <= 2))

  000d6	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _new_x2$[ebp]
  000db	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _new_x1$[ebp]
  000e0	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  000e8	0f 2f c8	 comiss	 xmm1, xmm0
  000eb	77 17		 ja	 SHORT $LN3@ui_draw_hi
  000ed	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _new_y2$[ebp]
  000f2	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _new_y1$[ebp]
  000f7	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  000ff	0f 2f c8	 comiss	 xmm1, xmm0
  00102	72 05		 jb	 SHORT $LN2@ui_draw_hi
$LN3@ui_draw_hi:

; 124  : 	{
; 125  : 
; 126  : 		return;

  00104	e9 68 01 00 00	 jmp	 $LN1@ui_draw_hi
$LN2@ui_draw_hi:

; 127  : 	}
; 128  : 
; 129  : 	// convert variabless to ints to save crap conversion
; 130  : 
; 131  : 	convert_float_to_int (new_x1, &int_x1);

  00109	8d 45 ec	 lea	 eax, DWORD PTR _int_x1$[ebp]
  0010c	50		 push	 eax
  0010d	51		 push	 ecx
  0010e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _new_x1$[ebp]
  00113	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00118	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 132  : 	convert_float_to_int (new_y1, &int_y1);

  0011d	8d 45 e8	 lea	 eax, DWORD PTR _int_y1$[ebp]
  00120	50		 push	 eax
  00121	51		 push	 ecx
  00122	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _new_y1$[ebp]
  00127	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012c	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 133  : 	convert_float_to_int (new_x2, &int_x2);

  00131	8d 45 e4	 lea	 eax, DWORD PTR _int_x2$[ebp]
  00134	50		 push	 eax
  00135	51		 push	 ecx
  00136	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _new_x2$[ebp]
  0013b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00140	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 134  : 	convert_float_to_int (new_y2, &int_y2);

  00145	8d 45 e0	 lea	 eax, DWORD PTR _int_y2$[ebp]
  00148	50		 push	 eax
  00149	51		 push	 ecx
  0014a	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _new_y2$[ebp]
  0014f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00154	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 135  : 
; 136  : 	// draw top line
; 137  : 
; 138  : 	if (y1 == new_y1)

  00159	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0015e	0f 2e 45 f8	 ucomiss xmm0, DWORD PTR _new_y1$[ebp]
  00162	9f		 lahf
  00163	f6 c4 44	 test	 ah, 68			; 00000044H
  00166	7a 37		 jp	 SHORT $LN4@ui_draw_hi

; 139  : 	{
; 140  : 		
; 141  : 		draw_line (new_x1, new_y1, new_x2, new_y1, ui_hilight_colour);

  00168	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ui_hilight_colour@@3UREAL_COLOUR@@A ; ui_hilight_colour
  0016d	50		 push	 eax
  0016e	51		 push	 ecx
  0016f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _new_y1$[ebp]
  00174	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00179	51		 push	 ecx
  0017a	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _new_x2$[ebp]
  0017f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00184	51		 push	 ecx
  00185	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _new_y1$[ebp]
  0018a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018f	51		 push	 ecx
  00190	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _new_x1$[ebp]
  00195	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019a	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN4@ui_draw_hi:

; 142  : 	}
; 143  : 
; 144  : 	// draw botton line
; 145  : 
; 146  : 	if (y2 == new_y2)

  0019f	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y2$[ebp]
  001a4	0f 2e 45 f0	 ucomiss xmm0, DWORD PTR _new_y2$[ebp]
  001a8	9f		 lahf
  001a9	f6 c4 44	 test	 ah, 68			; 00000044H
  001ac	7a 37		 jp	 SHORT $LN5@ui_draw_hi

; 147  : 	{
; 148  : 
; 149  : 		draw_line (new_x1, new_y2, new_x2, new_y2, ui_hilight_colour);

  001ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ui_hilight_colour@@3UREAL_COLOUR@@A ; ui_hilight_colour
  001b3	50		 push	 eax
  001b4	51		 push	 ecx
  001b5	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _new_y2$[ebp]
  001ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bf	51		 push	 ecx
  001c0	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _new_x2$[ebp]
  001c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ca	51		 push	 ecx
  001cb	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _new_y2$[ebp]
  001d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d5	51		 push	 ecx
  001d6	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _new_x1$[ebp]
  001db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e0	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN5@ui_draw_hi:

; 150  : 	}
; 151  : 
; 152  : 	// draw left side
; 153  : 
; 154  : 	if (x1 == new_x1)

  001e5	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x1$[ebp]
  001ea	0f 2e 45 fc	 ucomiss xmm0, DWORD PTR _new_x1$[ebp]
  001ee	9f		 lahf
  001ef	f6 c4 44	 test	 ah, 68			; 00000044H
  001f2	7a 37		 jp	 SHORT $LN6@ui_draw_hi

; 155  : 	{
; 156  : 		
; 157  : 		draw_line (new_x1, new_y1, new_x1, new_y2, ui_hilight_colour);

  001f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ui_hilight_colour@@3UREAL_COLOUR@@A ; ui_hilight_colour
  001f9	50		 push	 eax
  001fa	51		 push	 ecx
  001fb	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _new_y2$[ebp]
  00200	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00205	51		 push	 ecx
  00206	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _new_x1$[ebp]
  0020b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00210	51		 push	 ecx
  00211	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _new_y1$[ebp]
  00216	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021b	51		 push	 ecx
  0021c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _new_x1$[ebp]
  00221	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00226	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN6@ui_draw_hi:

; 158  : 	}
; 159  : 
; 160  : 	// draw right side
; 161  : 
; 162  : 	if (x2 == new_x2)

  0022b	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00230	0f 2e 45 f4	 ucomiss xmm0, DWORD PTR _new_x2$[ebp]
  00234	9f		 lahf
  00235	f6 c4 44	 test	 ah, 68			; 00000044H
  00238	7a 37		 jp	 SHORT $LN7@ui_draw_hi

; 163  : 	{
; 164  : 
; 165  : 		draw_line (new_x2, new_y1, new_x2, new_y2, ui_hilight_colour);

  0023a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ui_hilight_colour@@3UREAL_COLOUR@@A ; ui_hilight_colour
  0023f	50		 push	 eax
  00240	51		 push	 ecx
  00241	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _new_y2$[ebp]
  00246	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024b	51		 push	 ecx
  0024c	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _new_x2$[ebp]
  00251	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00256	51		 push	 ecx
  00257	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _new_y1$[ebp]
  0025c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00261	51		 push	 ecx
  00262	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _new_x2$[ebp]
  00267	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN7@ui_draw_hi:
$LN1@ui_draw_hi:

; 166  : 	}
; 167  : }

  00271	5f		 pop	 edi
  00272	5e		 pop	 esi
  00273	5b		 pop	 ebx
  00274	8b e5		 mov	 esp, ebp
  00276	5d		 pop	 ebp
  00277	c2 10 00	 ret	 16			; 00000010H
?ui_draw_hilight@@YGXMMMM@Z ENDP			; ui_draw_hilight
_TEXT	ENDS
END
