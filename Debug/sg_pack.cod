; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\fixed\segment\sg_pack.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?overload_segment_pack_functions@@YGXXZ		; overload_segment_pack_functions
PUBLIC	?pack_local_segment_data@@YGXW4PACK_MODES@@@Z	; pack_local_segment_data
PUBLIC	?unpack_local_segment_data@@YGXW4PACK_MODES@@@Z	; unpack_local_segment_data
PUBLIC	?__LINE__Var@?0??pack_local_segment_data@@YGXW4PACK_MODES@@@Z@4JA ; `pack_local_segment_data'::`1'::__LINE__Var
PUBLIC	??_C@_0EL@DJFOFDNO@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0CA@GHGJAHIH@mode?5?$CB?$DN?5PACK_MODE_UPDATE_ENTITY@ ; `string'
PUBLIC	??_C@_0M@FOHKACO@RLE?5SEGMENT@			; `string'
PUBLIC	?__LINE__Var@?0??unpack_local_segment_data@@YGXW4PACK_MODES@@@Z@4JA ; `unpack_local_segment_data'::`1'::__LINE__Var
PUBLIC	__real@3ff0000000000000
EXTRN	_memset:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z:PROC ; get_3d_terrain_point_data
EXTRN	?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z:PROC ; pack_int_value
EXTRN	?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z:PROC ; unpack_int_value
EXTRN	?get_bridge_segment_damaged_object@@YGHPAUENTITY@@00@Z:PROC ; get_bridge_segment_damaged_object
EXTRN	?get_terrain_type_class@@YG?AW4TERRAIN_CLASSES@@H@Z:PROC ; get_terrain_type_class
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?fn_pack_local_entity_data@@3PAP6GXPAUENTITY@@W4PACK_MODES@@@ZA:BYTE ; fn_pack_local_entity_data
EXTRN	?fn_unpack_local_entity_data@@3PAP6GXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@ZA:BYTE ; fn_unpack_local_entity_data
EXTRN	?overload_invalid_list_type_message@@3PBDB:DWORD ; overload_invalid_list_type_message
EXTRN	?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_child_succ
EXTRN	?fn_get_local_entity_child_pred@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_child_pred
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA:BYTE ; fn_get_local_entity_vec3d_ptr
EXTRN	?first_used_entity@@3PAUENTITY@@A:DWORD		; first_used_entity
EXTRN	__fltused:DWORD
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??unpack_local_segment_data@@YGXW4PACK_MODES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??unpack_local_segment_data@@YGXW4PACK_MODES@@@Z@4JA DD 0c3H ; `unpack_local_segment_data'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0M@FOHKACO@RLE?5SEGMENT@
CONST	SEGMENT
??_C@_0M@FOHKACO@RLE?5SEGMENT@ DB 'RLE SEGMENT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GHGJAHIH@mode?5?$CB?$DN?5PACK_MODE_UPDATE_ENTITY@
CONST	SEGMENT
??_C@_0CA@GHGJAHIH@mode?5?$CB?$DN?5PACK_MODE_UPDATE_ENTITY@ DB 'mode != P'
	DB	'ACK_MODE_UPDATE_ENTITY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@DJFOFDNO@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EL@DJFOFDNO@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\fixed\segment\sg_pack'
	DB	'.c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??pack_local_segment_data@@YGXW4PACK_MODES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??pack_local_segment_data@@YGXW4PACK_MODES@@@Z@4JA DD 06bH ; `pack_local_segment_data'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\fixed\segment\sg_pack.c
;	COMDAT ?unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z
_TEXT	SEGMENT
_en$ = 8						; size = 4
_type$ = 12						; size = 4
_mode$ = 16						; size = 4
?unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z PROC ; unpack_local_data, COMDAT

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 89   : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 0c 00	 ret	 12			; 0000000cH
?unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z ENDP ; unpack_local_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\fixed\segment\sg_pack.c
;	COMDAT ?pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z
_TEXT	SEGMENT
_en$ = 8						; size = 4
_mode$ = 12						; size = 4
?pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z PROC	; pack_local_data, COMDAT

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 81   : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z ENDP	; pack_local_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\fixed\segment\sg_pack.c
;	COMDAT ?unpack_local_segment_data@@YGXW4PACK_MODES@@@Z
_TEXT	SEGMENT
tv215 = -144						; size = 4
tv195 = -144						; size = 4
tv152 = -144						; size = 4
tv227 = -140						; size = 4
tv207 = -140						; size = 4
tv187 = -140						; size = 4
tv144 = -140						; size = 4
_terrain_info$1 = -72					; size = 44
_pos$2 = -28						; size = 4
_segment_count$ = -24					; size = 4
_segment_alive$ = -20					; size = 4
_raw$ = -16						; size = 4
_succ$ = -12						; size = 4
_pred$ = -8						; size = 4
_en$ = -4						; size = 4
_mode$ = 8						; size = 4
?unpack_local_segment_data@@YGXW4PACK_MODES@@@Z PROC	; unpack_local_segment_data, COMDAT

; 195  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 196  :    entity
; 197  :       *en,
; 198  : 		*pred,
; 199  : 		*succ;
; 200  : 
; 201  :    segment
; 202  :       *raw;
; 203  : 
; 204  : 	#if DEBUG_MODULE
; 205  : 
; 206  : 	static int
; 207  : 		count = 0;
; 208  : 
; 209  : 	#endif
; 210  : 
; 211  : 	int
; 212  : 		segment_alive,
; 213  : 		segment_count;
; 214  : 
; 215  :    ASSERT (mode != PACK_MODE_UPDATE_ENTITY);

  0000c	83 7d 08 03	 cmp	 DWORD PTR _mode$[ebp], 3
  00010	75 18		 jne	 SHORT $LN6@unpack_loc
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_local_segment_data@@YGXW4PACK_MODES@@@Z@4JA
  00017	83 c0 14	 add	 eax, 20			; 00000014H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@DJFOFDNO@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@GHGJAHIH@mode?5?$CB?$DN?5PACK_MODE_UPDATE_ENTITY@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@unpack_loc:

; 216  : 
; 217  :    if (mode == PACK_MODE_BROWSE_SESSION)

  0002a	83 7d 08 02	 cmp	 DWORD PTR _mode$[ebp], 2
  0002e	75 05		 jne	 SHORT $LN7@unpack_loc

; 218  :    {
; 219  :       return;

  00030	e9 51 03 00 00	 jmp	 $LN1@unpack_loc
$LN7@unpack_loc:

; 220  :    }
; 221  : 
; 222  : 	//
; 223  : 	// unpack alive status for each segment
; 224  : 	//
; 225  : 
; 226  : 	debug_log ("RLE SEGMENT");

  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FOHKACO@RLE?5SEGMENT@
  0003a	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0003f	83 c4 04	 add	 esp, 4

; 227  : 
; 228  : 	segment_count = 0;

  00042	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _segment_count$[ebp], 0

; 229  : 
; 230  : 	segment_count = unpack_int_value (NULL, INT_TYPE_LENGTH);

  00049	6a 79		 push	 121			; 00000079H
  0004b	6a 00		 push	 0
  0004d	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00052	89 45 e8	 mov	 DWORD PTR _segment_count$[ebp], eax

; 231  : 
; 232  : 	segment_alive = unpack_int_value (NULL, INT_TYPE_ALIVE);

  00055	6a 07		 push	 7
  00057	6a 00		 push	 0
  00059	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  0005e	89 45 ec	 mov	 DWORD PTR _segment_alive$[ebp], eax

; 233  : 
; 234  : 	en = get_local_entity_list ();

  00061	a1 00 00 00 00	 mov	 eax, DWORD PTR ?first_used_entity@@3PAUENTITY@@A ; first_used_entity
  00066	89 45 fc	 mov	 DWORD PTR _en$[ebp], eax
$LN2@unpack_loc:

; 235  : 
; 236  : 	while (en)

  00069	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  0006d	0f 84 81 01 00
	00		 je	 $LN3@unpack_loc

; 237  : 	{
; 238  : 
; 239  : 		if (en->type == ENTITY_TYPE_SEGMENT)

  00073	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  00076	83 38 1a	 cmp	 DWORD PTR [eax], 26	; 0000001aH
  00079	0f 85 67 01 00
	00		 jne	 $LN11@unpack_loc

; 240  : 		{
; 241  : 
; 242  : 			#if DEBUG_MODULE
; 243  : 
; 244  : 			count ++;
; 245  : 
; 246  : 			#endif
; 247  : 
; 248  : 			if (segment_count == 0)

  0007f	83 7d e8 00	 cmp	 DWORD PTR _segment_count$[ebp], 0
  00083	75 18		 jne	 SHORT $LN9@unpack_loc

; 249  : 			{
; 250  : 
; 251  : 				segment_count = unpack_int_value (NULL, INT_TYPE_LENGTH);

  00085	6a 79		 push	 121			; 00000079H
  00087	6a 00		 push	 0
  00089	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  0008e	89 45 e8	 mov	 DWORD PTR _segment_count$[ebp], eax

; 252  : 
; 253  : 				segment_alive = unpack_int_value (NULL, INT_TYPE_ALIVE);

  00091	6a 07		 push	 7
  00093	6a 00		 push	 0
  00095	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  0009a	89 45 ec	 mov	 DWORD PTR _segment_alive$[ebp], eax
$LN9@unpack_loc:

; 254  : 			}
; 255  : 
; 256  : 			segment_count --;

  0009d	8b 45 e8	 mov	 eax, DWORD PTR _segment_count$[ebp]
  000a0	83 e8 01	 sub	 eax, 1
  000a3	89 45 e8	 mov	 DWORD PTR _segment_count$[ebp], eax

; 257  : 
; 258  : 			raw = (segment *) get_local_entity_data (en);

  000a6	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  000a9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ac	89 4d f0	 mov	 DWORD PTR _raw$[ebp], ecx

; 259  : 
; 260  : 			raw->fix.alive = segment_alive;

  000af	8b 45 ec	 mov	 eax, DWORD PTR _segment_alive$[ebp]
  000b2	83 e0 01	 and	 eax, 1
  000b5	c1 e0 14	 shl	 eax, 20			; 00000014H
  000b8	8b 4d f0	 mov	 ecx, DWORD PTR _raw$[ebp]
  000bb	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  000be	81 e2 ff ff ef
	ff		 and	 edx, -1048577		; ffefffffH
  000c4	0b d0		 or	 edx, eax
  000c6	8b 45 f0	 mov	 eax, DWORD PTR _raw$[ebp]
  000c9	89 50 38	 mov	 DWORD PTR [eax+56], edx

; 261  : 
; 262  : 			if ((!raw->fix.alive) && (raw->fix.sub_type == ENTITY_SUB_TYPE_FIXED_BRIDGE_UNSUPPORTED_MID_SECTION))

  000cc	8b 45 f0	 mov	 eax, DWORD PTR _raw$[ebp]
  000cf	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  000d2	c1 e9 14	 shr	 ecx, 20			; 00000014H
  000d5	83 e1 01	 and	 ecx, 1
  000d8	0f 85 08 01 00
	00		 jne	 $LN11@unpack_loc
  000de	8b 45 f0	 mov	 eax, DWORD PTR _raw$[ebp]
  000e1	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  000e4	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  000ea	83 f9 03	 cmp	 ecx, 3
  000ed	0f 85 f3 00 00
	00		 jne	 $LN11@unpack_loc

; 263  : 			{
; 264  : 				//
; 265  : 				// position the segment on the ground
; 266  : 				//
; 267  : 
; 268  : 				vec3d
; 269  : 					*pos;
; 270  : 
; 271  : 				terrain_3d_point_data
; 272  : 					terrain_info;
; 273  : 
; 274  : 				pos = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_POSITION);

  000f3	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  000f7	74 0d		 je	 SHORT $LN14@unpack_loc
  000f9	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  000fc	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fe	89 8d 74 ff ff
	ff		 mov	 DWORD PTR tv144[ebp], ecx
  00104	eb 24		 jmp	 SHORT $LN15@unpack_loc
$LN14@unpack_loc:
  00106	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??unpack_local_segment_data@@YGXW4PACK_MODES@@@Z@4JA
  0010c	83 c2 4f	 add	 edx, 79			; 0000004fH
  0010f	52		 push	 edx
  00110	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@DJFOFDNO@c?3?2users?2nhv90?2projects?2eech?2ap@
  00115	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0011a	50		 push	 eax
  0011b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00120	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv144[ebp], 0
$LN15@unpack_loc:
  0012a	b9 01 00 00 00	 mov	 ecx, 1
  0012f	85 c9		 test	 ecx, ecx
  00131	74 0c		 je	 SHORT $LN16@unpack_loc
  00133	c7 85 70 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv152[ebp], 8
  0013d	eb 24		 jmp	 SHORT $LN17@unpack_loc
$LN16@unpack_loc:
  0013f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??unpack_local_segment_data@@YGXW4PACK_MODES@@@Z@4JA
  00145	83 c2 4f	 add	 edx, 79			; 0000004fH
  00148	52		 push	 edx
  00149	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@DJFOFDNO@c?3?2users?2nhv90?2projects?2eech?2ap@
  0014e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00159	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv152[ebp], 0
$LN17@unpack_loc:
  00163	6a 08		 push	 8
  00165	8b 4d fc	 mov	 ecx, DWORD PTR _en$[ebp]
  00168	51		 push	 ecx
  00169	6b 95 74 ff ff
	ff 60		 imul	 edx, DWORD PTR tv144[ebp], 96
  00170	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv152[ebp]
  00176	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0017d	ff d1		 call	 ecx
  0017f	89 45 e4	 mov	 DWORD PTR _pos$2[ebp], eax

; 275  : 
; 276  : 				memset (&terrain_info, 0, sizeof (terrain_3d_point_data));

  00182	6a 2c		 push	 44			; 0000002cH
  00184	6a 00		 push	 0
  00186	8d 45 b8	 lea	 eax, DWORD PTR _terrain_info$1[ebp]
  00189	50		 push	 eax
  0018a	e8 00 00 00 00	 call	 _memset
  0018f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 277  : 
; 278  : 				pos->y = get_3d_terrain_point_data (pos->x, pos->z, &terrain_info);

  00192	8d 45 b8	 lea	 eax, DWORD PTR _terrain_info$1[ebp]
  00195	50		 push	 eax
  00196	8b 4d e4	 mov	 ecx, DWORD PTR _pos$2[ebp]
  00199	51		 push	 ecx
  0019a	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0019f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a4	8b 55 e4	 mov	 edx, DWORD PTR _pos$2[ebp]
  001a7	51		 push	 ecx
  001a8	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  001ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b1	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  001b6	8b 45 e4	 mov	 eax, DWORD PTR _pos$2[ebp]
  001b9	d9 58 04	 fstp	 DWORD PTR [eax+4]

; 279  : 
; 280  : 				if (get_terrain_type_class (terrain_info.terrain_type) == TERRAIN_CLASS_WATER)

  001bc	8b 45 d4	 mov	 eax, DWORD PTR _terrain_info$1[ebp+28]
  001bf	50		 push	 eax
  001c0	e8 00 00 00 00	 call	 ?get_terrain_type_class@@YG?AW4TERRAIN_CLASSES@@H@Z ; get_terrain_type_class
  001c5	83 f8 01	 cmp	 eax, 1
  001c8	75 1c		 jne	 SHORT $LN11@unpack_loc

; 281  : 				{
; 282  : 					pos->y -= 1.0;

  001ca	8b 45 e4	 mov	 eax, DWORD PTR _pos$2[ebp]
  001cd	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  001d2	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  001da	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001de	8b 4d e4	 mov	 ecx, DWORD PTR _pos$2[ebp]
  001e1	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
$LN11@unpack_loc:

; 283  : 				}
; 284  : 			}
; 285  : 		}
; 286  : 
; 287  : 		en = get_local_entity_succ (en);

  001e6	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  001e9	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001ec	89 4d fc	 mov	 DWORD PTR _en$[ebp], ecx

; 288  : 	}

  001ef	e9 75 fe ff ff	 jmp	 $LN2@unpack_loc
$LN3@unpack_loc:

; 289  : 
; 290  : 	#if DEBUG_MODULE
; 291  : 
; 292  : 	debug_log ("SG_PACK: unpacking segment data (count = %d)", count);
; 293  : 
; 294  : 	#endif
; 295  : 
; 296  : 	//
; 297  : 	// determine 3d object for each segment ( some might be damaged / destroyed )
; 298  : 	//
; 299  : 
; 300  : 	en = get_local_entity_list ();

  001f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?first_used_entity@@3PAUENTITY@@A ; first_used_entity
  001f9	89 45 fc	 mov	 DWORD PTR _en$[ebp], eax
$LN4@unpack_loc:

; 301  : 
; 302  : 	while (en)

  001fc	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  00200	0f 84 80 01 00
	00		 je	 $LN5@unpack_loc

; 303  : 	{
; 304  : 
; 305  : 		if (en->type == ENTITY_TYPE_SEGMENT)

  00206	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  00209	83 38 1a	 cmp	 DWORD PTR [eax], 26	; 0000001aH
  0020c	0f 85 66 01 00
	00		 jne	 $LN12@unpack_loc

; 306  : 		{
; 307  : 
; 308  : 			raw = (segment *) get_local_entity_data (en);

  00212	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  00215	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00218	89 4d f0	 mov	 DWORD PTR _raw$[ebp], ecx

; 309  : 
; 310  : 			pred = get_local_entity_child_pred (en, LIST_TYPE_SEGMENT);

  0021b	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  0021f	74 0d		 je	 SHORT $LN18@unpack_loc
  00221	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  00224	8b 08		 mov	 ecx, DWORD PTR [eax]
  00226	89 8d 74 ff ff
	ff		 mov	 DWORD PTR tv187[ebp], ecx
  0022c	eb 24		 jmp	 SHORT $LN19@unpack_loc
$LN18@unpack_loc:
  0022e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??unpack_local_segment_data@@YGXW4PACK_MODES@@@Z@4JA
  00234	83 c2 73	 add	 edx, 115		; 00000073H
  00237	52		 push	 edx
  00238	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@DJFOFDNO@c?3?2users?2nhv90?2projects?2eech?2ap@
  0023d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00242	50		 push	 eax
  00243	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00248	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv187[ebp], 0
$LN19@unpack_loc:
  00252	b9 01 00 00 00	 mov	 ecx, 1
  00257	85 c9		 test	 ecx, ecx
  00259	74 0c		 je	 SHORT $LN20@unpack_loc
  0025b	c7 85 70 ff ff
	ff 23 00 00 00	 mov	 DWORD PTR tv195[ebp], 35 ; 00000023H
  00265	eb 24		 jmp	 SHORT $LN21@unpack_loc
$LN20@unpack_loc:
  00267	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??unpack_local_segment_data@@YGXW4PACK_MODES@@@Z@4JA
  0026d	83 c2 73	 add	 edx, 115		; 00000073H
  00270	52		 push	 edx
  00271	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@DJFOFDNO@c?3?2users?2nhv90?2projects?2eech?2ap@
  00276	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0027b	50		 push	 eax
  0027c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00281	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv195[ebp], 0
$LN21@unpack_loc:
  0028b	6a 23		 push	 35			; 00000023H
  0028d	8b 4d fc	 mov	 ecx, DWORD PTR _en$[ebp]
  00290	51		 push	 ecx
  00291	69 95 74 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv187[ebp], 180
  0029b	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv195[ebp]
  002a1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_pred@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  002a8	ff d1		 call	 ecx
  002aa	89 45 f8	 mov	 DWORD PTR _pred$[ebp], eax

; 311  : 
; 312  : 			succ = get_local_entity_child_succ (en, LIST_TYPE_SEGMENT);

  002ad	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  002b1	74 0d		 je	 SHORT $LN22@unpack_loc
  002b3	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  002b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  002b8	89 8d 74 ff ff
	ff		 mov	 DWORD PTR tv207[ebp], ecx
  002be	eb 24		 jmp	 SHORT $LN23@unpack_loc
$LN22@unpack_loc:
  002c0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??unpack_local_segment_data@@YGXW4PACK_MODES@@@Z@4JA
  002c6	83 c2 75	 add	 edx, 117		; 00000075H
  002c9	52		 push	 edx
  002ca	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@DJFOFDNO@c?3?2users?2nhv90?2projects?2eech?2ap@
  002cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002d4	50		 push	 eax
  002d5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002da	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv207[ebp], 0
$LN23@unpack_loc:
  002e4	b9 01 00 00 00	 mov	 ecx, 1
  002e9	85 c9		 test	 ecx, ecx
  002eb	74 0c		 je	 SHORT $LN24@unpack_loc
  002ed	c7 85 70 ff ff
	ff 23 00 00 00	 mov	 DWORD PTR tv215[ebp], 35 ; 00000023H
  002f7	eb 24		 jmp	 SHORT $LN25@unpack_loc
$LN24@unpack_loc:
  002f9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??unpack_local_segment_data@@YGXW4PACK_MODES@@@Z@4JA
  002ff	83 c2 75	 add	 edx, 117		; 00000075H
  00302	52		 push	 edx
  00303	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@DJFOFDNO@c?3?2users?2nhv90?2projects?2eech?2ap@
  00308	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0030d	50		 push	 eax
  0030e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00313	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv215[ebp], 0
$LN25@unpack_loc:
  0031d	6a 23		 push	 35			; 00000023H
  0031f	8b 4d fc	 mov	 ecx, DWORD PTR _en$[ebp]
  00322	51		 push	 ecx
  00323	69 95 74 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv207[ebp], 180
  0032d	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv215[ebp]
  00333	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0033a	ff d1		 call	 ecx
  0033c	89 45 f4	 mov	 DWORD PTR _succ$[ebp], eax

; 313  : 
; 314  : 			raw->fix.object_3d_shape = get_bridge_segment_damaged_object (en, pred, succ);

  0033f	8b 45 f4	 mov	 eax, DWORD PTR _succ$[ebp]
  00342	50		 push	 eax
  00343	8b 4d f8	 mov	 ecx, DWORD PTR _pred$[ebp]
  00346	51		 push	 ecx
  00347	8b 55 fc	 mov	 edx, DWORD PTR _en$[ebp]
  0034a	52		 push	 edx
  0034b	e8 00 00 00 00	 call	 ?get_bridge_segment_damaged_object@@YGHPAUENTITY@@00@Z ; get_bridge_segment_damaged_object
  00350	89 85 74 ff ff
	ff		 mov	 DWORD PTR tv227[ebp], eax
  00356	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR tv227[ebp]
  0035c	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00361	c1 e0 08	 shl	 eax, 8
  00364	8b 4d f0	 mov	 ecx, DWORD PTR _raw$[ebp]
  00367	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0036a	81 e2 ff 00 f0
	ff		 and	 edx, -1048321		; fff000ffH
  00370	0b d0		 or	 edx, eax
  00372	8b 45 f0	 mov	 eax, DWORD PTR _raw$[ebp]
  00375	89 50 38	 mov	 DWORD PTR [eax+56], edx
$LN12@unpack_loc:

; 315  : 		}
; 316  : 
; 317  : 		en = get_local_entity_succ (en);

  00378	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  0037b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0037e	89 4d fc	 mov	 DWORD PTR _en$[ebp], ecx

; 318  : 	}

  00381	e9 76 fe ff ff	 jmp	 $LN4@unpack_loc
$LN5@unpack_loc:
$LN1@unpack_loc:

; 319  : }

  00386	5f		 pop	 edi
  00387	5e		 pop	 esi
  00388	5b		 pop	 ebx
  00389	8b e5		 mov	 esp, ebp
  0038b	5d		 pop	 ebp
  0038c	c2 04 00	 ret	 4
?unpack_local_segment_data@@YGXW4PACK_MODES@@@Z ENDP	; unpack_local_segment_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\fixed\segment\sg_pack.c
;	COMDAT ?pack_local_segment_data@@YGXW4PACK_MODES@@@Z
_TEXT	SEGMENT
tv77 = -84						; size = 4
_segment_count$ = -16					; size = 4
_segment_alive$ = -12					; size = 4
_raw$ = -8						; size = 4
_en$ = -4						; size = 4
_mode$ = 8						; size = 4
?pack_local_segment_data@@YGXW4PACK_MODES@@@Z PROC	; pack_local_segment_data, COMDAT

; 107  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 108  :    entity
; 109  :       *en;
; 110  : 
; 111  :    segment
; 112  :       *raw;
; 113  : 
; 114  : 	#if DEBUG_MODULE
; 115  : 
; 116  : 	static int
; 117  : 		count = 0;
; 118  : 
; 119  : 	#endif
; 120  : 
; 121  : 	int
; 122  : 		segment_alive,
; 123  : 		segment_count;
; 124  : 
; 125  :    ASSERT (mode != PACK_MODE_UPDATE_ENTITY);

  00009	83 7d 08 03	 cmp	 DWORD PTR _mode$[ebp], 3
  0000d	75 18		 jne	 SHORT $LN4@pack_local
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_local_segment_data@@YGXW4PACK_MODES@@@Z@4JA
  00014	83 c0 12	 add	 eax, 18			; 00000012H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@DJFOFDNO@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@GHGJAHIH@mode?5?$CB?$DN?5PACK_MODE_UPDATE_ENTITY@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@pack_local:

; 126  : 
; 127  :    if (mode == PACK_MODE_BROWSE_SESSION)

  00027	83 7d 08 02	 cmp	 DWORD PTR _mode$[ebp], 2
  0002b	75 05		 jne	 SHORT $LN5@pack_local

; 128  :    {
; 129  :       return;

  0002d	e9 dd 00 00 00	 jmp	 $LN1@pack_local
$LN5@pack_local:

; 130  :    }
; 131  : 
; 132  : 	//
; 133  : 	// RLE segments, only alive ones.
; 134  : 	//
; 135  : 
; 136  : 	segment_count = 0;

  00032	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _segment_count$[ebp], 0

; 137  : 
; 138  : 	segment_alive = TRUE;

  00039	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _segment_alive$[ebp], 1

; 139  : 
; 140  : 	debug_log ("RLE SEGMENT");

  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FOHKACO@RLE?5SEGMENT@
  00045	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0004a	83 c4 04	 add	 esp, 4

; 141  : 
; 142  : 	en = get_local_entity_list ();

  0004d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?first_used_entity@@3PAUENTITY@@A ; first_used_entity
  00052	89 45 fc	 mov	 DWORD PTR _en$[ebp], eax
$LN2@pack_local:

; 143  : 
; 144  : 	while (en)

  00055	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  00059	0f 84 96 00 00
	00		 je	 $LN3@pack_local

; 145  : 	{
; 146  : 
; 147  : 		if (get_local_entity_type (en) == ENTITY_TYPE_SEGMENT)

  0005f	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  00063	74 0a		 je	 SHORT $LN10@pack_local
  00065	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  00068	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006a	89 4d ac	 mov	 DWORD PTR tv77[ebp], ecx
  0006d	eb 1d		 jmp	 SHORT $LN11@pack_local
$LN10@pack_local:
  0006f	68 93 00 00 00	 push	 147			; 00000093H
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@DJFOFDNO@c?3?2users?2nhv90?2projects?2eech?2ap@
  00079	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0007f	52		 push	 edx
  00080	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00085	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv77[ebp], 0
$LN11@pack_local:
  0008c	83 7d ac 1a	 cmp	 DWORD PTR tv77[ebp], 26	; 0000001aH
  00090	75 55		 jne	 SHORT $LN6@pack_local

; 148  : 		{
; 149  : 
; 150  : 			#if DEBUG_MODULE
; 151  : 
; 152  : 			count ++;
; 153  : 
; 154  : 			#endif
; 155  : 
; 156  : 			raw = (segment *) get_local_entity_data (en);

  00092	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  00095	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00098	89 4d f8	 mov	 DWORD PTR _raw$[ebp], ecx

; 157  : 
; 158  : 			if (segment_alive == raw->fix.alive)

  0009b	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  0009e	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  000a1	c1 e9 14	 shr	 ecx, 20			; 00000014H
  000a4	83 e1 01	 and	 ecx, 1
  000a7	39 4d f4	 cmp	 DWORD PTR _segment_alive$[ebp], ecx
  000aa	75 0b		 jne	 SHORT $LN7@pack_local

; 159  : 			{
; 160  : 
; 161  : 				segment_count ++;

  000ac	8b 45 f0	 mov	 eax, DWORD PTR _segment_count$[ebp]
  000af	83 c0 01	 add	 eax, 1
  000b2	89 45 f0	 mov	 DWORD PTR _segment_count$[ebp], eax

; 162  : 			}
; 163  : 			else

  000b5	eb 30		 jmp	 SHORT $LN6@pack_local
$LN7@pack_local:

; 164  : 			{
; 165  : 
; 166  : 				pack_int_value (NULL, INT_TYPE_LENGTH, segment_count);

  000b7	8b 45 f0	 mov	 eax, DWORD PTR _segment_count$[ebp]
  000ba	50		 push	 eax
  000bb	6a 79		 push	 121			; 00000079H
  000bd	6a 00		 push	 0
  000bf	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 167  : 
; 168  : 				pack_int_value (NULL, INT_TYPE_ALIVE, segment_alive);

  000c4	8b 45 f4	 mov	 eax, DWORD PTR _segment_alive$[ebp]
  000c7	50		 push	 eax
  000c8	6a 07		 push	 7
  000ca	6a 00		 push	 0
  000cc	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 169  : 
; 170  : 				segment_alive = raw->fix.alive;

  000d1	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  000d4	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  000d7	c1 e9 14	 shr	 ecx, 20			; 00000014H
  000da	83 e1 01	 and	 ecx, 1
  000dd	89 4d f4	 mov	 DWORD PTR _segment_alive$[ebp], ecx

; 171  : 
; 172  : 				segment_count = 1;

  000e0	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _segment_count$[ebp], 1
$LN6@pack_local:

; 173  : 			}
; 174  : 		}
; 175  : 	
; 176  : 		en = get_local_entity_succ (en);

  000e7	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  000ea	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000ed	89 4d fc	 mov	 DWORD PTR _en$[ebp], ecx

; 177  : 	}

  000f0	e9 60 ff ff ff	 jmp	 $LN2@pack_local
$LN3@pack_local:

; 178  : 
; 179  : 	pack_int_value (NULL, INT_TYPE_LENGTH, segment_count);

  000f5	8b 45 f0	 mov	 eax, DWORD PTR _segment_count$[ebp]
  000f8	50		 push	 eax
  000f9	6a 79		 push	 121			; 00000079H
  000fb	6a 00		 push	 0
  000fd	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 180  : 
; 181  : 	pack_int_value (NULL, INT_TYPE_ALIVE, segment_alive);

  00102	8b 45 f4	 mov	 eax, DWORD PTR _segment_alive$[ebp]
  00105	50		 push	 eax
  00106	6a 07		 push	 7
  00108	6a 00		 push	 0
  0010a	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN1@pack_local:

; 182  : 
; 183  : 	#if DEBUG_MODULE
; 184  : 
; 185  : 	debug_log ("SG_PACK: packing segment data (count = %d)", count);
; 186  : 
; 187  : 	#endif
; 188  : }

  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi
  00111	5b		 pop	 ebx
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c2 04 00	 ret	 4
?pack_local_segment_data@@YGXW4PACK_MODES@@@Z ENDP	; pack_local_segment_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\fixed\segment\sg_pack.c
;	COMDAT ?overload_segment_pack_functions@@YGXXZ
_TEXT	SEGMENT
?overload_segment_pack_functions@@YGXXZ PROC		; overload_segment_pack_functions, COMDAT

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 97   : 	fn_pack_local_entity_data[ENTITY_TYPE_SEGMENT]	= pack_local_data;

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 1a	 imul	 ecx, eax, 26
  00011	c7 81 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fn_pack_local_entity_data@@3PAP6GXPAUENTITY@@W4PACK_MODES@@@ZA[ecx], OFFSET ?pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z ; pack_local_data

; 98   : 
; 99   : 	fn_unpack_local_entity_data[ENTITY_TYPE_SEGMENT]	= unpack_local_data;

  0001b	b8 04 00 00 00	 mov	 eax, 4
  00020	6b c8 1a	 imul	 ecx, eax, 26
  00023	c7 81 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fn_unpack_local_entity_data@@3PAP6GXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@ZA[ecx], OFFSET ?unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z ; unpack_local_data

; 100  : }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?overload_segment_pack_functions@@YGXXZ ENDP		; overload_segment_pack_functions
_TEXT	ENDS
END
