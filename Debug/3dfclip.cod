; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\3d\3dfclip.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?clipping_vertices@@3PAUVERTEX@@A		; clipping_vertices
PUBLIC	?number_of_clipping_primitives@@3HA		; number_of_clipping_primitives
PUBLIC	?number_of_clipping_vertices@@3HA		; number_of_clipping_vertices
PUBLIC	?clipping_primitives_results@@3PAHA		; clipping_primitives_results
PUBLIC	?clipping_primitives_vertex_indices@@3PAHA	; clipping_primitives_vertex_indices
PUBLIC	?current_clipping_primitives@@3PAUCLIP_PRIMITIVE@@A ; current_clipping_primitives
PUBLIC	?clipping_primitives_array1@@3PAUCLIP_PRIMITIVE@@A ; clipping_primitives_array1
PUBLIC	?clipping_primitives_array2@@3PAUCLIP_PRIMITIVE@@A ; clipping_primitives_array2
PUBLIC	?current_clipping_edge_references@@3PAUCLIP_PRIMITIVE_EDGE_REFERENCE@@A ; current_clipping_edge_references
PUBLIC	?clipping_edge_reference_array1@@3PAUCLIP_PRIMITIVE_EDGE_REFERENCE@@A ; clipping_edge_reference_array1
PUBLIC	?clipping_edge_reference_array2@@3PAUCLIP_PRIMITIVE_EDGE_REFERENCE@@A ; clipping_edge_reference_array2
PUBLIC	?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
PUBLIC	?clipping_edges_array1@@3PAUCLIP_PRIMITIVE_EDGE@@A ; clipping_edges_array1
PUBLIC	?clipping_edges_array2@@3PAUCLIP_PRIMITIVE_EDGE@@A ; clipping_edges_array2
PUBLIC	?number_of_clipping_edges@@3HA			; number_of_clipping_edges
PUBLIC	?number_of_clipping_edge_references@@3HA	; number_of_clipping_edge_references
PUBLIC	?clipping_vertices_remap_table@@3PAHA		; clipping_vertices_remap_table
_BSS	SEGMENT
?clipping_vertices@@3PAUVERTEX@@A DB 04000H DUP (?)	; clipping_vertices
?number_of_clipping_primitives@@3HA DD 01H DUP (?)	; number_of_clipping_primitives
?number_of_clipping_vertices@@3HA DD 01H DUP (?)	; number_of_clipping_vertices
?clipping_primitives_results@@3PAHA DD 040H DUP (?)	; clipping_primitives_results
?clipping_primitives_vertex_indices@@3PAHA DD 0100H DUP (?) ; clipping_primitives_vertex_indices
?current_clipping_primitives@@3PAUCLIP_PRIMITIVE@@A DD 01H DUP (?) ; current_clipping_primitives
	ALIGN	8

?clipping_primitives_array1@@3PAUCLIP_PRIMITIVE@@A DQ 040H DUP (?) ; clipping_primitives_array1
?clipping_primitives_array2@@3PAUCLIP_PRIMITIVE@@A DQ 040H DUP (?) ; clipping_primitives_array2
?current_clipping_edge_references@@3PAUCLIP_PRIMITIVE_EDGE_REFERENCE@@A DD 01H DUP (?) ; current_clipping_edge_references
?clipping_edge_reference_array1@@3PAUCLIP_PRIMITIVE_EDGE_REFERENCE@@A DD 0200H DUP (?) ; clipping_edge_reference_array1
?clipping_edge_reference_array2@@3PAUCLIP_PRIMITIVE_EDGE_REFERENCE@@A DD 0200H DUP (?) ; clipping_edge_reference_array2
?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A DD 01H DUP (?) ; current_clipping_edges
?clipping_edges_array1@@3PAUCLIP_PRIMITIVE_EDGE@@A DQ 0100H DUP (?) ; clipping_edges_array1
?clipping_edges_array2@@3PAUCLIP_PRIMITIVE_EDGE@@A DQ 0100H DUP (?) ; clipping_edges_array2
?number_of_clipping_edges@@3HA DD 01H DUP (?)		; number_of_clipping_edges
?number_of_clipping_edge_references@@3HA DD 01H DUP (?)	; number_of_clipping_edge_references
?clipping_vertices_remap_table@@3PAHA DD 0100H DUP (?)	; clipping_vertices_remap_table
_BSS	ENDS
PUBLIC	?clip_3d_triangle_fan@@YGXHH@Z			; clip_3d_triangle_fan
PUBLIC	?clip_3d_primitives@@YGXH@Z			; clip_3d_primitives
PUBLIC	?reconstruct_clip_edges@@YGXXZ			; reconstruct_clip_edges
PUBLIC	?generate_hither_clipped_edge@@YGHPAUVERTEX@@0@Z ; generate_hither_clipped_edge
PUBLIC	?generate_yonder_clipped_edge@@YGHPAUVERTEX@@0@Z ; generate_yonder_clipped_edge
PUBLIC	?generate_xmin_clipped_edge@@YGHPAUVERTEX@@0@Z	; generate_xmin_clipped_edge
PUBLIC	?generate_xmax_clipped_edge@@YGHPAUVERTEX@@0@Z	; generate_xmax_clipped_edge
PUBLIC	?generate_ymin_clipped_edge@@YGHPAUVERTEX@@0@Z	; generate_ymin_clipped_edge
PUBLIC	?generate_ymax_clipped_edge@@YGHPAUVERTEX@@0@Z	; generate_ymax_clipped_edge
PUBLIC	??_C@_0BI@NHIHKLGG@Internal?5clipping?5error@	; `string'
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4b40005a
EXTRN	_fabs:PROC
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?generate_3d_outcode@@YGHMM@Z:PROC		; generate_3d_outcode
EXTRN	?generate_3d_j_outcode@@YGHM@Z:PROC		; generate_3d_j_outcode
EXTRN	?active_viewport@@3UVIEWPORT@@A:BYTE		; active_viewport
EXTRN	?clip_hither@@3MA:DWORD				; clip_hither
EXTRN	?clip_hither_reciprocal@@3MA:DWORD		; clip_hither_reciprocal
EXTRN	?clip_yonder@@3MA:DWORD				; clip_yonder
EXTRN	?clip_yonder_reciprocal@@3MA:DWORD		; clip_yonder_reciprocal
EXTRN	?active_3d_environment@@3PAUENV_3D@@A:DWORD	; active_3d_environment
EXTRN	__fltused:DWORD
;	COMDAT __real@4b40005a
CONST	SEGMENT
__real@4b40005a DD 04b40005ar			; 1.2583e+07
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ??_C@_0BI@NHIHKLGG@Internal?5clipping?5error@
CONST	SEGMENT
??_C@_0BI@NHIHKLGG@Internal?5clipping?5error@ DB 'Internal clipping error'
	DB	00H						; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfclip.c
;	COMDAT ?generate_ymax_clipped_edge@@YGHPAUVERTEX@@0@Z
_TEXT	SEGMENT
tv374 = -224						; size = 8
tv495 = -216						; size = 8
tv368 = -208						; size = 8
tv350 = -204						; size = 4
_int_dblue2$ = -136					; size = 4
_int_blue2$ = -132					; size = 4
_int_dblue$ = -128					; size = 4
_int_blue$ = -124					; size = 4
_int_dgreen2$ = -120					; size = 4
_int_green2$ = -116					; size = 4
_int_dgreen$ = -112					; size = 4
_int_green$ = -108					; size = 4
_int_dred2$ = -104					; size = 4
_int_red2$ = -100					; size = 4
_int_dred$ = -96					; size = 4
_int_red$ = -92						; size = 4
_int_dalpha2$ = -88					; size = 4
_int_alpha2$ = -84					; size = 4
_int_dalpha$ = -80					; size = 4
_int_alpha$ = -76					; size = 4
_int_dfog$ = -72					; size = 4
_int_fog$ = -68						; size = 4
_blue2$ = -64						; size = 4
_blue$ = -60						; size = 4
_green2$ = -56						; size = 4
_green$ = -52						; size = 4
_red2$ = -48						; size = 4
_red$ = -44						; size = 4
_alpha2$ = -40						; size = 4
_alpha$ = -36						; size = 4
_fog$ = -32						; size = 4
_denominator$ = -28					; size = 8
_numerator$ = -20					; size = 8
_t$ = -12						; size = 8
_clip$ = -4						; size = 4
_point1$ = 8						; size = 4
_point2$ = 12						; size = 4
?generate_ymax_clipped_edge@@YGHPAUVERTEX@@0@Z PROC	; generate_ymax_clipped_edge, COMDAT

; 1897 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1898 : 
; 1899 : 	vertex
; 1900 : 		*clip;
; 1901 : 
; 1902 : 	double
; 1903 : 		t,
; 1904 : 		numerator,
; 1905 : 		denominator;
; 1906 : 
; 1907 : 	float
; 1908 : 		fog,
; 1909 : 		alpha,
; 1910 : 		alpha2,
; 1911 : 		red,
; 1912 : 		red2,
; 1913 : 		green,
; 1914 : 		green2,
; 1915 : 		blue,
; 1916 : 		blue2;
; 1917 : 
; 1918 : 	int
; 1919 : 		int_fog,
; 1920 : 		int_dfog,
; 1921 : 		int_alpha,
; 1922 : 		int_dalpha,
; 1923 : 		int_alpha2,
; 1924 : 		int_dalpha2,
; 1925 : 		int_red,
; 1926 : 		int_dred,
; 1927 : 		int_red2,
; 1928 : 		int_dred2,
; 1929 : 		int_green,
; 1930 : 		int_dgreen,
; 1931 : 		int_green2,
; 1932 : 		int_dgreen2,
; 1933 : 		int_blue,
; 1934 : 		int_dblue,
; 1935 : 		int_blue2,
; 1936 : 		int_dblue2;
; 1937 : 
; 1938 : 	if ( point1->i > point2->i )

  0000c	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00012	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00017	0f 2f 41 10	 comiss	 xmm0, DWORD PTR [ecx+16]
  0001b	76 12		 jbe	 SHORT $LN2@generate_y

; 1939 : 	{
; 1940 : 
; 1941 : 		clip = point1;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00020	89 45 fc	 mov	 DWORD PTR _clip$[ebp], eax

; 1942 : 		point1 = point2;

  00023	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00026	89 45 08	 mov	 DWORD PTR _point1$[ebp], eax

; 1943 : 		point2 = clip;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  0002c	89 45 0c	 mov	 DWORD PTR _point2$[ebp], eax
$LN2@generate_y:

; 1944 : 	}
; 1945 : 
; 1946 : 	numerator = active_viewport.y_max - point2->j;

  0002f	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00032	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  0003a	f3 0f 5c 40 14	 subss	 xmm0, DWORD PTR [eax+20]
  0003f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00043	f2 0f 11 45 ec	 movsd	 QWORD PTR _numerator$[ebp], xmm0

; 1947 : 
; 1948 : 	denominator = point2->j - point1->j;

  00048	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _point1$[ebp]
  0004e	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00053	f3 0f 5c 41 14	 subss	 xmm0, DWORD PTR [ecx+20]
  00058	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0005c	f2 0f 11 45 e4	 movsd	 QWORD PTR _denominator$[ebp], xmm0

; 1949 : 
; 1950 : #ifdef DEBUG
; 1951 : 
; 1952 : 	if ( fabs ( denominator ) < fabs ( numerator ) )

  00061	83 ec 08	 sub	 esp, 8
  00064	f2 0f 10 45 e4	 movsd	 xmm0, QWORD PTR _denominator$[ebp]
  00069	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0006e	e8 00 00 00 00	 call	 _fabs
  00073	83 c4 08	 add	 esp, 8
  00076	dd 9d 30 ff ff
	ff		 fstp	 QWORD PTR tv368[ebp]
  0007c	f2 0f 10 85 30
	ff ff ff	 movsd	 xmm0, QWORD PTR tv368[ebp]
  00084	83 ec 08	 sub	 esp, 8
  00087	f2 0f 10 4d ec	 movsd	 xmm1, QWORD PTR _numerator$[ebp]
  0008c	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  00091	f2 0f 11 85 28
	ff ff ff	 movsd	 QWORD PTR tv495[ebp], xmm0
  00099	e8 00 00 00 00	 call	 _fabs
  0009e	83 c4 08	 add	 esp, 8
  000a1	dd 9d 20 ff ff
	ff		 fstp	 QWORD PTR tv374[ebp]
  000a7	f2 0f 10 85 20
	ff ff ff	 movsd	 xmm0, QWORD PTR tv374[ebp]
  000af	f2 0f 10 8d 28
	ff ff ff	 movsd	 xmm1, QWORD PTR tv495[ebp]
  000b7	66 0f 2f c1	 comisd	 xmm0, xmm1
  000bb	76 0d		 jbe	 SHORT $LN3@generate_y

; 1953 : 	{
; 1954 : 
; 1955 : 		debug_fatal ( "Internal clipping error" );

  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NHIHKLGG@Internal?5clipping?5error@
  000c2	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000c7	83 c4 04	 add	 esp, 4
$LN3@generate_y:

; 1956 : 	}
; 1957 : 
; 1958 : #endif
; 1959 : 
; 1960 : 	t = ( numerator / denominator );

  000ca	f2 0f 10 45 ec	 movsd	 xmm0, QWORD PTR _numerator$[ebp]
  000cf	f2 0f 5e 45 e4	 divsd	 xmm0, QWORD PTR _denominator$[ebp]
  000d4	f2 0f 11 45 f4	 movsd	 QWORD PTR _t$[ebp], xmm0

; 1961 : 
; 1962 : 	clip = &clipping_vertices[number_of_clipping_vertices];

  000d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_vertices@@3HA ; number_of_clipping_vertices
  000de	c1 e0 06	 shl	 eax, 6
  000e1	05 00 00 00 00	 add	 eax, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  000e6	89 45 fc	 mov	 DWORD PTR _clip$[ebp], eax

; 1963 : 
; 1964 : 	int_fog = point2->fog;

  000e9	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000ec	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  000f0	89 4d bc	 mov	 DWORD PTR _int_fog$[ebp], ecx

; 1965 : 	int_dfog = int_fog - ( int ) point1->fog;

  000f3	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  000f6	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  000fa	8b 55 bc	 mov	 edx, DWORD PTR _int_fog$[ebp]
  000fd	2b d1		 sub	 edx, ecx
  000ff	89 55 b8	 mov	 DWORD PTR _int_dfog$[ebp], edx

; 1966 : 
; 1967 : 	int_alpha = point2->alpha;

  00102	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00105	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  00109	89 4d b4	 mov	 DWORD PTR _int_alpha$[ebp], ecx

; 1968 : 	int_dalpha = int_alpha - ( int ) point1->alpha;

  0010c	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0010f	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  00113	8b 55 b4	 mov	 edx, DWORD PTR _int_alpha$[ebp]
  00116	2b d1		 sub	 edx, ecx
  00118	89 55 b0	 mov	 DWORD PTR _int_dalpha$[ebp], edx

; 1969 : 	int_alpha2 = point2->alpha2;

  0011b	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0011e	0f b6 48 37	 movzx	 ecx, BYTE PTR [eax+55]
  00122	89 4d ac	 mov	 DWORD PTR _int_alpha2$[ebp], ecx

; 1970 : 	int_dalpha2 = int_alpha2 - ( int ) point1->alpha2;

  00125	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00128	0f b6 48 37	 movzx	 ecx, BYTE PTR [eax+55]
  0012c	8b 55 ac	 mov	 edx, DWORD PTR _int_alpha2$[ebp]
  0012f	2b d1		 sub	 edx, ecx
  00131	89 55 a8	 mov	 DWORD PTR _int_dalpha2$[ebp], edx

; 1971 : 
; 1972 : 	int_red = point2->red;

  00134	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00137	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  0013b	89 4d a4	 mov	 DWORD PTR _int_red$[ebp], ecx

; 1973 : 	int_dred = int_red - ( int ) point1->red;

  0013e	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00141	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  00145	8b 55 a4	 mov	 edx, DWORD PTR _int_red$[ebp]
  00148	2b d1		 sub	 edx, ecx
  0014a	89 55 a0	 mov	 DWORD PTR _int_dred$[ebp], edx

; 1974 : 	int_red2 = point2->red2;

  0014d	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00150	0f b6 48 36	 movzx	 ecx, BYTE PTR [eax+54]
  00154	89 4d 9c	 mov	 DWORD PTR _int_red2$[ebp], ecx

; 1975 : 	int_dred2 = int_red2 - ( int ) point1->red2;

  00157	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0015a	0f b6 48 36	 movzx	 ecx, BYTE PTR [eax+54]
  0015e	8b 55 9c	 mov	 edx, DWORD PTR _int_red2$[ebp]
  00161	2b d1		 sub	 edx, ecx
  00163	89 55 98	 mov	 DWORD PTR _int_dred2$[ebp], edx

; 1976 : 
; 1977 : 	int_green = point2->green;

  00166	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00169	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  0016d	89 4d 94	 mov	 DWORD PTR _int_green$[ebp], ecx

; 1978 : 	int_dgreen = int_green - ( int ) point1->green;

  00170	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00173	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  00177	8b 55 94	 mov	 edx, DWORD PTR _int_green$[ebp]
  0017a	2b d1		 sub	 edx, ecx
  0017c	89 55 90	 mov	 DWORD PTR _int_dgreen$[ebp], edx

; 1979 : 	int_green2 = point2->green2;

  0017f	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00182	0f b6 48 35	 movzx	 ecx, BYTE PTR [eax+53]
  00186	89 4d 8c	 mov	 DWORD PTR _int_green2$[ebp], ecx

; 1980 : 	int_dgreen2 = int_green2 - ( int ) point1->green2;

  00189	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0018c	0f b6 48 35	 movzx	 ecx, BYTE PTR [eax+53]
  00190	8b 55 8c	 mov	 edx, DWORD PTR _int_green2$[ebp]
  00193	2b d1		 sub	 edx, ecx
  00195	89 55 88	 mov	 DWORD PTR _int_dgreen2$[ebp], edx

; 1981 : 
; 1982 : 	int_blue = point2->blue;

  00198	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0019b	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  0019f	89 4d 84	 mov	 DWORD PTR _int_blue$[ebp], ecx

; 1983 : 	int_dblue = int_blue - ( int ) point1->blue;

  001a2	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  001a5	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  001a9	8b 55 84	 mov	 edx, DWORD PTR _int_blue$[ebp]
  001ac	2b d1		 sub	 edx, ecx
  001ae	89 55 80	 mov	 DWORD PTR _int_dblue$[ebp], edx

; 1984 : 	int_blue2 = point2->blue2;

  001b1	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  001b4	0f b6 48 34	 movzx	 ecx, BYTE PTR [eax+52]
  001b8	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _int_blue2$[ebp], ecx

; 1985 : 	int_dblue2 = int_blue2 - ( int ) point1->blue2;

  001be	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  001c1	0f b6 48 34	 movzx	 ecx, BYTE PTR [eax+52]
  001c5	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _int_blue2$[ebp]
  001cb	2b d1		 sub	 edx, ecx
  001cd	89 95 78 ff ff
	ff		 mov	 DWORD PTR _int_dblue2$[ebp], edx

; 1986 : 
; 1987 : 	fog = ( float ) int_fog + ( t * ( float ) int_dfog );

  001d3	f3 0f 2a 45 bc	 cvtsi2ss xmm0, DWORD PTR _int_fog$[ebp]
  001d8	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001dc	f3 0f 2a 4d b8	 cvtsi2ss xmm1, DWORD PTR _int_dfog$[ebp]
  001e1	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001e5	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001ea	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001ee	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001f2	f3 0f 11 45 e0	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1988 : 	alpha = ( float ) int_alpha + ( t * ( float ) int_dalpha );

  001f7	f3 0f 2a 45 b4	 cvtsi2ss xmm0, DWORD PTR _int_alpha$[ebp]
  001fc	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00200	f3 0f 2a 4d b0	 cvtsi2ss xmm1, DWORD PTR _int_dalpha$[ebp]
  00205	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00209	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0020e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00212	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00216	f3 0f 11 45 dc	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1989 : 	alpha2 = ( float ) int_alpha2 + ( t * ( float ) int_dalpha2 );

  0021b	f3 0f 2a 45 ac	 cvtsi2ss xmm0, DWORD PTR _int_alpha2$[ebp]
  00220	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00224	f3 0f 2a 4d a8	 cvtsi2ss xmm1, DWORD PTR _int_dalpha2$[ebp]
  00229	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0022d	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00232	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00236	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0023a	f3 0f 11 45 d8	 movss	 DWORD PTR _alpha2$[ebp], xmm0

; 1990 : 	red = ( float ) int_red + ( t * ( float ) int_dred );

  0023f	f3 0f 2a 45 a4	 cvtsi2ss xmm0, DWORD PTR _int_red$[ebp]
  00244	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00248	f3 0f 2a 4d a0	 cvtsi2ss xmm1, DWORD PTR _int_dred$[ebp]
  0024d	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00251	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00256	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0025a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0025e	f3 0f 11 45 d4	 movss	 DWORD PTR _red$[ebp], xmm0

; 1991 : 	red2 = ( float ) int_red2 + ( t * ( float ) int_dred2 );

  00263	f3 0f 2a 45 9c	 cvtsi2ss xmm0, DWORD PTR _int_red2$[ebp]
  00268	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0026c	f3 0f 2a 4d 98	 cvtsi2ss xmm1, DWORD PTR _int_dred2$[ebp]
  00271	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00275	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0027a	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0027e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00282	f3 0f 11 45 d0	 movss	 DWORD PTR _red2$[ebp], xmm0

; 1992 : 	green = ( float ) int_green + ( t * ( float ) int_dgreen );

  00287	f3 0f 2a 45 94	 cvtsi2ss xmm0, DWORD PTR _int_green$[ebp]
  0028c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00290	f3 0f 2a 4d 90	 cvtsi2ss xmm1, DWORD PTR _int_dgreen$[ebp]
  00295	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00299	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0029e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002a2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002a6	f3 0f 11 45 cc	 movss	 DWORD PTR _green$[ebp], xmm0

; 1993 : 	green2 = ( float ) int_green2 + ( t * ( float ) int_dgreen2 );

  002ab	f3 0f 2a 45 8c	 cvtsi2ss xmm0, DWORD PTR _int_green2$[ebp]
  002b0	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002b4	f3 0f 2a 4d 88	 cvtsi2ss xmm1, DWORD PTR _int_dgreen2$[ebp]
  002b9	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002bd	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002c2	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002c6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ca	f3 0f 11 45 c8	 movss	 DWORD PTR _green2$[ebp], xmm0

; 1994 : 	blue = ( float ) int_blue + ( t * ( float ) int_dblue );

  002cf	f3 0f 2a 45 84	 cvtsi2ss xmm0, DWORD PTR _int_blue$[ebp]
  002d4	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002d8	f3 0f 2a 4d 80	 cvtsi2ss xmm1, DWORD PTR _int_dblue$[ebp]
  002dd	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002e1	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002e6	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002ea	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ee	f3 0f 11 45 c4	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1995 : 	blue2 = ( float ) int_blue2 + ( t * ( float ) int_dblue2 );

  002f3	f3 0f 2a 85 7c
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _int_blue2$[ebp]
  002fb	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002ff	f3 0f 2a 8d 78
	ff ff ff	 cvtsi2ss xmm1, DWORD PTR _int_dblue2$[ebp]
  00307	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0030b	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00310	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00314	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00318	f3 0f 11 45 c0	 movss	 DWORD PTR _blue2$[ebp], xmm0

; 1996 : 
; 1997 : 	fog += FLOAT_FLOAT_FACTOR;

  0031d	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _fog$[ebp]
  00322	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0032a	f3 0f 11 45 e0	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1998 : 	alpha += FLOAT_FLOAT_FACTOR;

  0032f	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _alpha$[ebp]
  00334	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0033c	f3 0f 11 45 dc	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1999 : 	alpha2 += FLOAT_FLOAT_FACTOR;

  00341	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _alpha2$[ebp]
  00346	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0034e	f3 0f 11 45 d8	 movss	 DWORD PTR _alpha2$[ebp], xmm0

; 2000 : 	red += FLOAT_FLOAT_FACTOR;

  00353	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _red$[ebp]
  00358	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00360	f3 0f 11 45 d4	 movss	 DWORD PTR _red$[ebp], xmm0

; 2001 : 	red2 += FLOAT_FLOAT_FACTOR;

  00365	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _red2$[ebp]
  0036a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00372	f3 0f 11 45 d0	 movss	 DWORD PTR _red2$[ebp], xmm0

; 2002 : 	green += FLOAT_FLOAT_FACTOR;

  00377	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _green$[ebp]
  0037c	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00384	f3 0f 11 45 cc	 movss	 DWORD PTR _green$[ebp], xmm0

; 2003 : 	green2 += FLOAT_FLOAT_FACTOR;

  00389	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _green2$[ebp]
  0038e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00396	f3 0f 11 45 c8	 movss	 DWORD PTR _green2$[ebp], xmm0

; 2004 : 	blue += FLOAT_FLOAT_FACTOR;

  0039b	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _blue$[ebp]
  003a0	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003a8	f3 0f 11 45 c4	 movss	 DWORD PTR _blue$[ebp], xmm0

; 2005 : 	blue2 += FLOAT_FLOAT_FACTOR;

  003ad	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _blue2$[ebp]
  003b2	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003ba	f3 0f 11 45 c0	 movss	 DWORD PTR _blue2$[ebp], xmm0

; 2006 : 
; 2007 : 	int_fog = ( *( ( int * ) &fog ) - INTEGER_FLOAT_FACTOR );

  003bf	8b 45 e0	 mov	 eax, DWORD PTR _fog$[ebp]
  003c2	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003c7	89 45 bc	 mov	 DWORD PTR _int_fog$[ebp], eax

; 2008 : 	int_alpha = ( *( ( int * ) &alpha ) - INTEGER_FLOAT_FACTOR );

  003ca	8b 45 dc	 mov	 eax, DWORD PTR _alpha$[ebp]
  003cd	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003d2	89 45 b4	 mov	 DWORD PTR _int_alpha$[ebp], eax

; 2009 : 	int_alpha2 = ( *( ( int * ) &alpha2 ) - INTEGER_FLOAT_FACTOR );

  003d5	8b 45 d8	 mov	 eax, DWORD PTR _alpha2$[ebp]
  003d8	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003dd	89 45 ac	 mov	 DWORD PTR _int_alpha2$[ebp], eax

; 2010 : 	int_red = ( *( ( int * ) &red ) - INTEGER_FLOAT_FACTOR );

  003e0	8b 45 d4	 mov	 eax, DWORD PTR _red$[ebp]
  003e3	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003e8	89 45 a4	 mov	 DWORD PTR _int_red$[ebp], eax

; 2011 : 	int_red2 = ( *( ( int * ) &red2 ) - INTEGER_FLOAT_FACTOR );

  003eb	8b 45 d0	 mov	 eax, DWORD PTR _red2$[ebp]
  003ee	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003f3	89 45 9c	 mov	 DWORD PTR _int_red2$[ebp], eax

; 2012 : 	int_green = ( *( ( int * ) &green ) - INTEGER_FLOAT_FACTOR );

  003f6	8b 45 cc	 mov	 eax, DWORD PTR _green$[ebp]
  003f9	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003fe	89 45 94	 mov	 DWORD PTR _int_green$[ebp], eax

; 2013 : 	int_green2 = ( *( ( int * ) &green2 ) - INTEGER_FLOAT_FACTOR );

  00401	8b 45 c8	 mov	 eax, DWORD PTR _green2$[ebp]
  00404	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00409	89 45 8c	 mov	 DWORD PTR _int_green2$[ebp], eax

; 2014 : 	int_blue = ( *( ( int * ) &blue ) - INTEGER_FLOAT_FACTOR );

  0040c	8b 45 c4	 mov	 eax, DWORD PTR _blue$[ebp]
  0040f	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00414	89 45 84	 mov	 DWORD PTR _int_blue$[ebp], eax

; 2015 : 	int_blue2 = ( *( ( int * ) &blue2 ) - INTEGER_FLOAT_FACTOR );

  00417	8b 45 c0	 mov	 eax, DWORD PTR _blue2$[ebp]
  0041a	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0041f	89 85 7c ff ff
	ff		 mov	 DWORD PTR _int_blue2$[ebp], eax

; 2016 : 
; 2017 : 	clip->fog = int_fog;

  00425	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00428	8a 4d bc	 mov	 cl, BYTE PTR _int_fog$[ebp]
  0042b	88 48 2e	 mov	 BYTE PTR [eax+46], cl

; 2018 : 	clip->alpha = int_alpha;

  0042e	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00431	8a 4d b4	 mov	 cl, BYTE PTR _int_alpha$[ebp]
  00434	88 48 33	 mov	 BYTE PTR [eax+51], cl

; 2019 : 	clip->alpha2 = int_alpha2;

  00437	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  0043a	8a 4d ac	 mov	 cl, BYTE PTR _int_alpha2$[ebp]
  0043d	88 48 37	 mov	 BYTE PTR [eax+55], cl

; 2020 : 	clip->red = int_red;

  00440	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00443	8a 4d a4	 mov	 cl, BYTE PTR _int_red$[ebp]
  00446	88 48 32	 mov	 BYTE PTR [eax+50], cl

; 2021 : 	clip->red2 = int_red2;

  00449	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  0044c	8a 4d 9c	 mov	 cl, BYTE PTR _int_red2$[ebp]
  0044f	88 48 36	 mov	 BYTE PTR [eax+54], cl

; 2022 : 	clip->green = int_green;

  00452	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00455	8a 4d 94	 mov	 cl, BYTE PTR _int_green$[ebp]
  00458	88 48 31	 mov	 BYTE PTR [eax+49], cl

; 2023 : 	clip->green2 = int_green2;

  0045b	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  0045e	8a 4d 8c	 mov	 cl, BYTE PTR _int_green2$[ebp]
  00461	88 48 35	 mov	 BYTE PTR [eax+53], cl

; 2024 : 	clip->blue = int_blue;

  00464	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00467	8a 4d 84	 mov	 cl, BYTE PTR _int_blue$[ebp]
  0046a	88 48 30	 mov	 BYTE PTR [eax+48], cl

; 2025 : 	clip->blue2 = int_blue2;

  0046d	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00470	8a 8d 7c ff ff
	ff		 mov	 cl, BYTE PTR _int_blue2$[ebp]
  00476	88 48 34	 mov	 BYTE PTR [eax+52], cl

; 2026 : 
; 2027 : 	clip->i = point2->i + ( t * ( point2->i - point1->i ) );

  00479	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0047c	f3 0f 5a 40 10	 cvtss2sd xmm0, DWORD PTR [eax+16]
  00481	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00484	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00487	f3 0f 10 49 10	 movss	 xmm1, DWORD PTR [ecx+16]
  0048c	f3 0f 5c 4a 10	 subss	 xmm1, DWORD PTR [edx+16]
  00491	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00495	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0049a	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0049e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004a2	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  004a5	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 2028 : 	clip->j = active_viewport.y_max;

  004aa	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  004ad	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  004b5	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 2029 : 	clip->q = point2->q + ( t * ( point2->q - point1->q ) );

  004ba	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  004bd	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  004c2	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  004c5	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  004c8	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  004cd	f3 0f 5c 4a 0c	 subss	 xmm1, DWORD PTR [edx+12]
  004d2	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  004d6	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  004db	f2 0f 58 c1	 addsd	 xmm0, xmm1
  004df	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004e3	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  004e6	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 2030 : 	clip->z = 1.0 / clip->q;

  004eb	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  004ee	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  004f3	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  004fb	f2 0f 5e c8	 divsd	 xmm1, xmm0
  004ff	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00503	8b 4d fc	 mov	 ecx, DWORD PTR _clip$[ebp]
  00506	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 2031 : 
; 2032 : 	clip->u = point2->u + ( t * ( point2->u - point1->u ) );

  0050b	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0050e	f3 0f 5a 40 18	 cvtss2sd xmm0, DWORD PTR [eax+24]
  00513	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00516	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00519	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  0051e	f3 0f 5c 4a 18	 subss	 xmm1, DWORD PTR [edx+24]
  00523	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00527	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0052c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00530	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00534	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00537	f3 0f 11 40 18	 movss	 DWORD PTR [eax+24], xmm0

; 2033 : 	clip->v = point2->v + ( t * ( point2->v - point1->v ) );

  0053c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0053f	f3 0f 5a 40 1c	 cvtss2sd xmm0, DWORD PTR [eax+28]
  00544	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00547	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  0054a	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  0054f	f3 0f 5c 4a 1c	 subss	 xmm1, DWORD PTR [edx+28]
  00554	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00558	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0055d	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00561	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00565	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00568	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0

; 2034 : 	clip->u2 = point2->u2 + ( t * ( point2->u2 - point1->u2 ) );

  0056d	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00570	f3 0f 5a 40 20	 cvtss2sd xmm0, DWORD PTR [eax+32]
  00575	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00578	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  0057b	f3 0f 10 49 20	 movss	 xmm1, DWORD PTR [ecx+32]
  00580	f3 0f 5c 4a 20	 subss	 xmm1, DWORD PTR [edx+32]
  00585	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00589	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0058e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00592	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00596	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00599	f3 0f 11 40 20	 movss	 DWORD PTR [eax+32], xmm0

; 2035 : 	clip->v2 = point2->v2 + ( t * ( point2->v2 - point1->v2 ) );

  0059e	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  005a1	f3 0f 5a 40 24	 cvtss2sd xmm0, DWORD PTR [eax+36]
  005a6	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  005a9	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  005ac	f3 0f 10 49 24	 movss	 xmm1, DWORD PTR [ecx+36]
  005b1	f3 0f 5c 4a 24	 subss	 xmm1, DWORD PTR [edx+36]
  005b6	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  005ba	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  005bf	f2 0f 58 c1	 addsd	 xmm0, xmm1
  005c3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005c7	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  005ca	f3 0f 11 40 24	 movss	 DWORD PTR [eax+36], xmm0

; 2036 : 
; 2037 : 	clip->outcode = 0;

  005cf	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  005d2	c6 40 2c 00	 mov	 BYTE PTR [eax+44], 0

; 2038 : 
; 2039 : #if REPORT_CLIP_STATISTICS
; 2040 : 
; 2041 : 	number_of_ymax_coordinates_inserted++;
; 2042 : 
; 2043 : #endif
; 2044 : 	return ( number_of_clipping_vertices++ );

  005d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_vertices@@3HA ; number_of_clipping_vertices
  005db	89 85 34 ff ff
	ff		 mov	 DWORD PTR tv350[ebp], eax
  005e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_clipping_vertices@@3HA ; number_of_clipping_vertices
  005e7	83 c1 01	 add	 ecx, 1
  005ea	89 0d 00 00 00
	00		 mov	 DWORD PTR ?number_of_clipping_vertices@@3HA, ecx ; number_of_clipping_vertices
  005f0	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv350[ebp]

; 2045 : }

  005f6	5f		 pop	 edi
  005f7	5e		 pop	 esi
  005f8	5b		 pop	 ebx
  005f9	8b e5		 mov	 esp, ebp
  005fb	5d		 pop	 ebp
  005fc	c2 08 00	 ret	 8
?generate_ymax_clipped_edge@@YGHPAUVERTEX@@0@Z ENDP	; generate_ymax_clipped_edge
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfclip.c
;	COMDAT ?generate_ymin_clipped_edge@@YGHPAUVERTEX@@0@Z
_TEXT	SEGMENT
tv374 = -224						; size = 8
tv495 = -216						; size = 8
tv368 = -208						; size = 8
tv350 = -204						; size = 4
_int_dblue2$ = -136					; size = 4
_int_blue2$ = -132					; size = 4
_int_dblue$ = -128					; size = 4
_int_blue$ = -124					; size = 4
_int_dgreen2$ = -120					; size = 4
_int_green2$ = -116					; size = 4
_int_dgreen$ = -112					; size = 4
_int_green$ = -108					; size = 4
_int_dred2$ = -104					; size = 4
_int_red2$ = -100					; size = 4
_int_dred$ = -96					; size = 4
_int_red$ = -92						; size = 4
_int_dalpha2$ = -88					; size = 4
_int_alpha2$ = -84					; size = 4
_int_dalpha$ = -80					; size = 4
_int_alpha$ = -76					; size = 4
_int_dfog$ = -72					; size = 4
_int_fog$ = -68						; size = 4
_blue2$ = -64						; size = 4
_blue$ = -60						; size = 4
_green2$ = -56						; size = 4
_green$ = -52						; size = 4
_red2$ = -48						; size = 4
_red$ = -44						; size = 4
_alpha2$ = -40						; size = 4
_alpha$ = -36						; size = 4
_fog$ = -32						; size = 4
_denominator$ = -28					; size = 8
_numerator$ = -20					; size = 8
_t$ = -12						; size = 8
_clip$ = -4						; size = 4
_point1$ = 8						; size = 4
_point2$ = 12						; size = 4
?generate_ymin_clipped_edge@@YGHPAUVERTEX@@0@Z PROC	; generate_ymin_clipped_edge, COMDAT

; 1742 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1743 : 
; 1744 : 	vertex
; 1745 : 		*clip;
; 1746 : 
; 1747 : 	double
; 1748 : 		t,
; 1749 : 		numerator,
; 1750 : 		denominator;
; 1751 : 
; 1752 : 	float
; 1753 : 		fog,
; 1754 : 		alpha,
; 1755 : 		alpha2,
; 1756 : 		red,
; 1757 : 		red2,
; 1758 : 		green,
; 1759 : 		green2,
; 1760 : 		blue,
; 1761 : 		blue2;
; 1762 : 
; 1763 : 	int
; 1764 : 		int_fog,
; 1765 : 		int_dfog,
; 1766 : 		int_alpha,
; 1767 : 		int_dalpha,
; 1768 : 		int_alpha2,
; 1769 : 		int_dalpha2,
; 1770 : 		int_red,
; 1771 : 		int_dred,
; 1772 : 		int_red2,
; 1773 : 		int_dred2,
; 1774 : 		int_green,
; 1775 : 		int_dgreen,
; 1776 : 		int_green2,
; 1777 : 		int_dgreen2,
; 1778 : 		int_blue,
; 1779 : 		int_dblue,
; 1780 : 		int_blue2,
; 1781 : 		int_dblue2;
; 1782 : 
; 1783 : 	if ( point1->i > point2->i )

  0000c	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00012	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00017	0f 2f 41 10	 comiss	 xmm0, DWORD PTR [ecx+16]
  0001b	76 12		 jbe	 SHORT $LN2@generate_y

; 1784 : 	{
; 1785 : 
; 1786 : 		clip = point1;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00020	89 45 fc	 mov	 DWORD PTR _clip$[ebp], eax

; 1787 : 		point1 = point2;

  00023	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00026	89 45 08	 mov	 DWORD PTR _point1$[ebp], eax

; 1788 : 		point2 = clip;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  0002c	89 45 0c	 mov	 DWORD PTR _point2$[ebp], eax
$LN2@generate_y:

; 1789 : 	}
; 1790 : 
; 1791 : 	numerator = active_viewport.y_min - point2->j;

  0002f	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00032	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  0003a	f3 0f 5c 40 14	 subss	 xmm0, DWORD PTR [eax+20]
  0003f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00043	f2 0f 11 45 ec	 movsd	 QWORD PTR _numerator$[ebp], xmm0

; 1792 : 
; 1793 : 	denominator = point2->j - point1->j;

  00048	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _point1$[ebp]
  0004e	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00053	f3 0f 5c 41 14	 subss	 xmm0, DWORD PTR [ecx+20]
  00058	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0005c	f2 0f 11 45 e4	 movsd	 QWORD PTR _denominator$[ebp], xmm0

; 1794 : 
; 1795 : #ifdef DEBUG
; 1796 : 
; 1797 : 	if ( fabs ( denominator ) < fabs ( numerator ) )

  00061	83 ec 08	 sub	 esp, 8
  00064	f2 0f 10 45 e4	 movsd	 xmm0, QWORD PTR _denominator$[ebp]
  00069	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0006e	e8 00 00 00 00	 call	 _fabs
  00073	83 c4 08	 add	 esp, 8
  00076	dd 9d 30 ff ff
	ff		 fstp	 QWORD PTR tv368[ebp]
  0007c	f2 0f 10 85 30
	ff ff ff	 movsd	 xmm0, QWORD PTR tv368[ebp]
  00084	83 ec 08	 sub	 esp, 8
  00087	f2 0f 10 4d ec	 movsd	 xmm1, QWORD PTR _numerator$[ebp]
  0008c	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  00091	f2 0f 11 85 28
	ff ff ff	 movsd	 QWORD PTR tv495[ebp], xmm0
  00099	e8 00 00 00 00	 call	 _fabs
  0009e	83 c4 08	 add	 esp, 8
  000a1	dd 9d 20 ff ff
	ff		 fstp	 QWORD PTR tv374[ebp]
  000a7	f2 0f 10 85 20
	ff ff ff	 movsd	 xmm0, QWORD PTR tv374[ebp]
  000af	f2 0f 10 8d 28
	ff ff ff	 movsd	 xmm1, QWORD PTR tv495[ebp]
  000b7	66 0f 2f c1	 comisd	 xmm0, xmm1
  000bb	76 0d		 jbe	 SHORT $LN3@generate_y

; 1798 : 	{
; 1799 : 
; 1800 : 		debug_fatal ( "Internal clipping error" );

  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NHIHKLGG@Internal?5clipping?5error@
  000c2	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000c7	83 c4 04	 add	 esp, 4
$LN3@generate_y:

; 1801 : 	}
; 1802 : 
; 1803 : #endif
; 1804 : 
; 1805 : 	t = ( numerator / denominator );

  000ca	f2 0f 10 45 ec	 movsd	 xmm0, QWORD PTR _numerator$[ebp]
  000cf	f2 0f 5e 45 e4	 divsd	 xmm0, QWORD PTR _denominator$[ebp]
  000d4	f2 0f 11 45 f4	 movsd	 QWORD PTR _t$[ebp], xmm0

; 1806 : 
; 1807 : 	clip = &clipping_vertices[number_of_clipping_vertices];

  000d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_vertices@@3HA ; number_of_clipping_vertices
  000de	c1 e0 06	 shl	 eax, 6
  000e1	05 00 00 00 00	 add	 eax, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  000e6	89 45 fc	 mov	 DWORD PTR _clip$[ebp], eax

; 1808 : 
; 1809 : 	int_fog = point2->fog;

  000e9	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000ec	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  000f0	89 4d bc	 mov	 DWORD PTR _int_fog$[ebp], ecx

; 1810 : 	int_dfog = int_fog - ( int ) point1->fog;

  000f3	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  000f6	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  000fa	8b 55 bc	 mov	 edx, DWORD PTR _int_fog$[ebp]
  000fd	2b d1		 sub	 edx, ecx
  000ff	89 55 b8	 mov	 DWORD PTR _int_dfog$[ebp], edx

; 1811 : 
; 1812 : 	int_alpha = point2->alpha;

  00102	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00105	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  00109	89 4d b4	 mov	 DWORD PTR _int_alpha$[ebp], ecx

; 1813 : 	int_dalpha = int_alpha - ( int ) point1->alpha;

  0010c	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0010f	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  00113	8b 55 b4	 mov	 edx, DWORD PTR _int_alpha$[ebp]
  00116	2b d1		 sub	 edx, ecx
  00118	89 55 b0	 mov	 DWORD PTR _int_dalpha$[ebp], edx

; 1814 : 	int_alpha2 = point2->alpha2;

  0011b	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0011e	0f b6 48 37	 movzx	 ecx, BYTE PTR [eax+55]
  00122	89 4d ac	 mov	 DWORD PTR _int_alpha2$[ebp], ecx

; 1815 : 	int_dalpha2 = int_alpha2 - ( int ) point1->alpha2;

  00125	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00128	0f b6 48 37	 movzx	 ecx, BYTE PTR [eax+55]
  0012c	8b 55 ac	 mov	 edx, DWORD PTR _int_alpha2$[ebp]
  0012f	2b d1		 sub	 edx, ecx
  00131	89 55 a8	 mov	 DWORD PTR _int_dalpha2$[ebp], edx

; 1816 : 
; 1817 : 	int_red = point2->red;

  00134	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00137	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  0013b	89 4d a4	 mov	 DWORD PTR _int_red$[ebp], ecx

; 1818 : 	int_dred = int_red - ( int ) point1->red;

  0013e	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00141	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  00145	8b 55 a4	 mov	 edx, DWORD PTR _int_red$[ebp]
  00148	2b d1		 sub	 edx, ecx
  0014a	89 55 a0	 mov	 DWORD PTR _int_dred$[ebp], edx

; 1819 : 	int_red2 = point2->red2;

  0014d	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00150	0f b6 48 36	 movzx	 ecx, BYTE PTR [eax+54]
  00154	89 4d 9c	 mov	 DWORD PTR _int_red2$[ebp], ecx

; 1820 : 	int_dred2 = int_red2 - ( int ) point1->red2;

  00157	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0015a	0f b6 48 36	 movzx	 ecx, BYTE PTR [eax+54]
  0015e	8b 55 9c	 mov	 edx, DWORD PTR _int_red2$[ebp]
  00161	2b d1		 sub	 edx, ecx
  00163	89 55 98	 mov	 DWORD PTR _int_dred2$[ebp], edx

; 1821 : 
; 1822 : 	int_green = point2->green;

  00166	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00169	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  0016d	89 4d 94	 mov	 DWORD PTR _int_green$[ebp], ecx

; 1823 : 	int_dgreen = int_green - ( int ) point1->green;

  00170	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00173	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  00177	8b 55 94	 mov	 edx, DWORD PTR _int_green$[ebp]
  0017a	2b d1		 sub	 edx, ecx
  0017c	89 55 90	 mov	 DWORD PTR _int_dgreen$[ebp], edx

; 1824 : 	int_green2 = point2->green2;

  0017f	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00182	0f b6 48 35	 movzx	 ecx, BYTE PTR [eax+53]
  00186	89 4d 8c	 mov	 DWORD PTR _int_green2$[ebp], ecx

; 1825 : 	int_dgreen2 = int_green2 - ( int ) point1->green2;

  00189	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0018c	0f b6 48 35	 movzx	 ecx, BYTE PTR [eax+53]
  00190	8b 55 8c	 mov	 edx, DWORD PTR _int_green2$[ebp]
  00193	2b d1		 sub	 edx, ecx
  00195	89 55 88	 mov	 DWORD PTR _int_dgreen2$[ebp], edx

; 1826 : 
; 1827 : 	int_blue = point2->blue;

  00198	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0019b	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  0019f	89 4d 84	 mov	 DWORD PTR _int_blue$[ebp], ecx

; 1828 : 	int_dblue = int_blue - ( int ) point1->blue;

  001a2	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  001a5	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  001a9	8b 55 84	 mov	 edx, DWORD PTR _int_blue$[ebp]
  001ac	2b d1		 sub	 edx, ecx
  001ae	89 55 80	 mov	 DWORD PTR _int_dblue$[ebp], edx

; 1829 : 	int_blue2 = point2->blue2;

  001b1	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  001b4	0f b6 48 34	 movzx	 ecx, BYTE PTR [eax+52]
  001b8	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _int_blue2$[ebp], ecx

; 1830 : 	int_dblue2 = int_blue2 - ( int ) point1->blue2;

  001be	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  001c1	0f b6 48 34	 movzx	 ecx, BYTE PTR [eax+52]
  001c5	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _int_blue2$[ebp]
  001cb	2b d1		 sub	 edx, ecx
  001cd	89 95 78 ff ff
	ff		 mov	 DWORD PTR _int_dblue2$[ebp], edx

; 1831 : 
; 1832 : 	fog = ( float ) int_fog + ( t * ( float ) int_dfog );

  001d3	f3 0f 2a 45 bc	 cvtsi2ss xmm0, DWORD PTR _int_fog$[ebp]
  001d8	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001dc	f3 0f 2a 4d b8	 cvtsi2ss xmm1, DWORD PTR _int_dfog$[ebp]
  001e1	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001e5	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001ea	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001ee	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001f2	f3 0f 11 45 e0	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1833 : 	alpha = ( float ) int_alpha + ( t * ( float ) int_dalpha );

  001f7	f3 0f 2a 45 b4	 cvtsi2ss xmm0, DWORD PTR _int_alpha$[ebp]
  001fc	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00200	f3 0f 2a 4d b0	 cvtsi2ss xmm1, DWORD PTR _int_dalpha$[ebp]
  00205	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00209	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0020e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00212	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00216	f3 0f 11 45 dc	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1834 : 	alpha2 = ( float ) int_alpha2 + ( t * ( float ) int_dalpha2 );

  0021b	f3 0f 2a 45 ac	 cvtsi2ss xmm0, DWORD PTR _int_alpha2$[ebp]
  00220	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00224	f3 0f 2a 4d a8	 cvtsi2ss xmm1, DWORD PTR _int_dalpha2$[ebp]
  00229	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0022d	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00232	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00236	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0023a	f3 0f 11 45 d8	 movss	 DWORD PTR _alpha2$[ebp], xmm0

; 1835 : 	red = ( float ) int_red + ( t * ( float ) int_dred );

  0023f	f3 0f 2a 45 a4	 cvtsi2ss xmm0, DWORD PTR _int_red$[ebp]
  00244	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00248	f3 0f 2a 4d a0	 cvtsi2ss xmm1, DWORD PTR _int_dred$[ebp]
  0024d	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00251	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00256	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0025a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0025e	f3 0f 11 45 d4	 movss	 DWORD PTR _red$[ebp], xmm0

; 1836 : 	red2 = ( float ) int_red2 + ( t * ( float ) int_dred2 );

  00263	f3 0f 2a 45 9c	 cvtsi2ss xmm0, DWORD PTR _int_red2$[ebp]
  00268	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0026c	f3 0f 2a 4d 98	 cvtsi2ss xmm1, DWORD PTR _int_dred2$[ebp]
  00271	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00275	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0027a	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0027e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00282	f3 0f 11 45 d0	 movss	 DWORD PTR _red2$[ebp], xmm0

; 1837 : 	green = ( float ) int_green + ( t * ( float ) int_dgreen );

  00287	f3 0f 2a 45 94	 cvtsi2ss xmm0, DWORD PTR _int_green$[ebp]
  0028c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00290	f3 0f 2a 4d 90	 cvtsi2ss xmm1, DWORD PTR _int_dgreen$[ebp]
  00295	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00299	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0029e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002a2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002a6	f3 0f 11 45 cc	 movss	 DWORD PTR _green$[ebp], xmm0

; 1838 : 	green2 = ( float ) int_green2 + ( t * ( float ) int_dgreen2 );

  002ab	f3 0f 2a 45 8c	 cvtsi2ss xmm0, DWORD PTR _int_green2$[ebp]
  002b0	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002b4	f3 0f 2a 4d 88	 cvtsi2ss xmm1, DWORD PTR _int_dgreen2$[ebp]
  002b9	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002bd	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002c2	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002c6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ca	f3 0f 11 45 c8	 movss	 DWORD PTR _green2$[ebp], xmm0

; 1839 : 	blue = ( float ) int_blue + ( t * ( float ) int_dblue );

  002cf	f3 0f 2a 45 84	 cvtsi2ss xmm0, DWORD PTR _int_blue$[ebp]
  002d4	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002d8	f3 0f 2a 4d 80	 cvtsi2ss xmm1, DWORD PTR _int_dblue$[ebp]
  002dd	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002e1	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002e6	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002ea	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ee	f3 0f 11 45 c4	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1840 : 	blue2 = ( float ) int_blue2 + ( t * ( float ) int_dblue2 );

  002f3	f3 0f 2a 85 7c
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _int_blue2$[ebp]
  002fb	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002ff	f3 0f 2a 8d 78
	ff ff ff	 cvtsi2ss xmm1, DWORD PTR _int_dblue2$[ebp]
  00307	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0030b	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00310	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00314	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00318	f3 0f 11 45 c0	 movss	 DWORD PTR _blue2$[ebp], xmm0

; 1841 : 
; 1842 : 	fog += FLOAT_FLOAT_FACTOR;

  0031d	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _fog$[ebp]
  00322	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0032a	f3 0f 11 45 e0	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1843 : 	alpha += FLOAT_FLOAT_FACTOR;

  0032f	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _alpha$[ebp]
  00334	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0033c	f3 0f 11 45 dc	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1844 : 	alpha2 += FLOAT_FLOAT_FACTOR;

  00341	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _alpha2$[ebp]
  00346	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0034e	f3 0f 11 45 d8	 movss	 DWORD PTR _alpha2$[ebp], xmm0

; 1845 : 	red += FLOAT_FLOAT_FACTOR;

  00353	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _red$[ebp]
  00358	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00360	f3 0f 11 45 d4	 movss	 DWORD PTR _red$[ebp], xmm0

; 1846 : 	red2 += FLOAT_FLOAT_FACTOR;

  00365	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _red2$[ebp]
  0036a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00372	f3 0f 11 45 d0	 movss	 DWORD PTR _red2$[ebp], xmm0

; 1847 : 	green += FLOAT_FLOAT_FACTOR;

  00377	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _green$[ebp]
  0037c	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00384	f3 0f 11 45 cc	 movss	 DWORD PTR _green$[ebp], xmm0

; 1848 : 	green2 += FLOAT_FLOAT_FACTOR;

  00389	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _green2$[ebp]
  0038e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00396	f3 0f 11 45 c8	 movss	 DWORD PTR _green2$[ebp], xmm0

; 1849 : 	blue += FLOAT_FLOAT_FACTOR;

  0039b	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _blue$[ebp]
  003a0	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003a8	f3 0f 11 45 c4	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1850 : 	blue2 += FLOAT_FLOAT_FACTOR;

  003ad	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _blue2$[ebp]
  003b2	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003ba	f3 0f 11 45 c0	 movss	 DWORD PTR _blue2$[ebp], xmm0

; 1851 : 
; 1852 : 	int_fog = ( *( ( int * ) &fog ) - INTEGER_FLOAT_FACTOR );

  003bf	8b 45 e0	 mov	 eax, DWORD PTR _fog$[ebp]
  003c2	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003c7	89 45 bc	 mov	 DWORD PTR _int_fog$[ebp], eax

; 1853 : 	int_alpha = ( *( ( int * ) &alpha ) - INTEGER_FLOAT_FACTOR );

  003ca	8b 45 dc	 mov	 eax, DWORD PTR _alpha$[ebp]
  003cd	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003d2	89 45 b4	 mov	 DWORD PTR _int_alpha$[ebp], eax

; 1854 : 	int_alpha2 = ( *( ( int * ) &alpha2 ) - INTEGER_FLOAT_FACTOR );

  003d5	8b 45 d8	 mov	 eax, DWORD PTR _alpha2$[ebp]
  003d8	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003dd	89 45 ac	 mov	 DWORD PTR _int_alpha2$[ebp], eax

; 1855 : 	int_red = ( *( ( int * ) &red ) - INTEGER_FLOAT_FACTOR );

  003e0	8b 45 d4	 mov	 eax, DWORD PTR _red$[ebp]
  003e3	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003e8	89 45 a4	 mov	 DWORD PTR _int_red$[ebp], eax

; 1856 : 	int_red2 = ( *( ( int * ) &red2 ) - INTEGER_FLOAT_FACTOR );

  003eb	8b 45 d0	 mov	 eax, DWORD PTR _red2$[ebp]
  003ee	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003f3	89 45 9c	 mov	 DWORD PTR _int_red2$[ebp], eax

; 1857 : 	int_green = ( *( ( int * ) &green ) - INTEGER_FLOAT_FACTOR );

  003f6	8b 45 cc	 mov	 eax, DWORD PTR _green$[ebp]
  003f9	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003fe	89 45 94	 mov	 DWORD PTR _int_green$[ebp], eax

; 1858 : 	int_green2 = ( *( ( int * ) &green2 ) - INTEGER_FLOAT_FACTOR );

  00401	8b 45 c8	 mov	 eax, DWORD PTR _green2$[ebp]
  00404	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00409	89 45 8c	 mov	 DWORD PTR _int_green2$[ebp], eax

; 1859 : 	int_blue = ( *( ( int * ) &blue ) - INTEGER_FLOAT_FACTOR );

  0040c	8b 45 c4	 mov	 eax, DWORD PTR _blue$[ebp]
  0040f	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00414	89 45 84	 mov	 DWORD PTR _int_blue$[ebp], eax

; 1860 : 	int_blue2 = ( *( ( int * ) &blue2 ) - INTEGER_FLOAT_FACTOR );

  00417	8b 45 c0	 mov	 eax, DWORD PTR _blue2$[ebp]
  0041a	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0041f	89 85 7c ff ff
	ff		 mov	 DWORD PTR _int_blue2$[ebp], eax

; 1861 : 
; 1862 : 	clip->fog = int_fog;

  00425	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00428	8a 4d bc	 mov	 cl, BYTE PTR _int_fog$[ebp]
  0042b	88 48 2e	 mov	 BYTE PTR [eax+46], cl

; 1863 : 	clip->alpha = int_alpha;

  0042e	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00431	8a 4d b4	 mov	 cl, BYTE PTR _int_alpha$[ebp]
  00434	88 48 33	 mov	 BYTE PTR [eax+51], cl

; 1864 : 	clip->alpha2 = int_alpha2;

  00437	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  0043a	8a 4d ac	 mov	 cl, BYTE PTR _int_alpha2$[ebp]
  0043d	88 48 37	 mov	 BYTE PTR [eax+55], cl

; 1865 : 	clip->red = int_red;

  00440	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00443	8a 4d a4	 mov	 cl, BYTE PTR _int_red$[ebp]
  00446	88 48 32	 mov	 BYTE PTR [eax+50], cl

; 1866 : 	clip->red2 = int_red2;

  00449	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  0044c	8a 4d 9c	 mov	 cl, BYTE PTR _int_red2$[ebp]
  0044f	88 48 36	 mov	 BYTE PTR [eax+54], cl

; 1867 : 	clip->green = int_green;

  00452	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00455	8a 4d 94	 mov	 cl, BYTE PTR _int_green$[ebp]
  00458	88 48 31	 mov	 BYTE PTR [eax+49], cl

; 1868 : 	clip->green2 = int_green2;

  0045b	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  0045e	8a 4d 8c	 mov	 cl, BYTE PTR _int_green2$[ebp]
  00461	88 48 35	 mov	 BYTE PTR [eax+53], cl

; 1869 : 	clip->blue = int_blue;

  00464	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00467	8a 4d 84	 mov	 cl, BYTE PTR _int_blue$[ebp]
  0046a	88 48 30	 mov	 BYTE PTR [eax+48], cl

; 1870 : 	clip->blue2 = int_blue2;

  0046d	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00470	8a 8d 7c ff ff
	ff		 mov	 cl, BYTE PTR _int_blue2$[ebp]
  00476	88 48 34	 mov	 BYTE PTR [eax+52], cl

; 1871 : 
; 1872 : 	clip->i = point2->i + ( t * ( point2->i - point1->i ) );

  00479	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0047c	f3 0f 5a 40 10	 cvtss2sd xmm0, DWORD PTR [eax+16]
  00481	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00484	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00487	f3 0f 10 49 10	 movss	 xmm1, DWORD PTR [ecx+16]
  0048c	f3 0f 5c 4a 10	 subss	 xmm1, DWORD PTR [edx+16]
  00491	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00495	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0049a	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0049e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004a2	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  004a5	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 1873 : 	clip->j = active_viewport.y_min;

  004aa	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  004ad	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  004b5	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 1874 : 	clip->q = point2->q + ( t * ( point2->q - point1->q ) );

  004ba	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  004bd	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  004c2	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  004c5	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  004c8	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  004cd	f3 0f 5c 4a 0c	 subss	 xmm1, DWORD PTR [edx+12]
  004d2	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  004d6	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  004db	f2 0f 58 c1	 addsd	 xmm0, xmm1
  004df	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004e3	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  004e6	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 1875 : 	clip->z = 1.0 / clip->q;

  004eb	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  004ee	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  004f3	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  004fb	f2 0f 5e c8	 divsd	 xmm1, xmm0
  004ff	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00503	8b 4d fc	 mov	 ecx, DWORD PTR _clip$[ebp]
  00506	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 1876 : 
; 1877 : 	clip->u = point2->u + ( t * ( point2->u - point1->u ) );

  0050b	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0050e	f3 0f 5a 40 18	 cvtss2sd xmm0, DWORD PTR [eax+24]
  00513	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00516	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00519	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  0051e	f3 0f 5c 4a 18	 subss	 xmm1, DWORD PTR [edx+24]
  00523	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00527	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0052c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00530	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00534	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00537	f3 0f 11 40 18	 movss	 DWORD PTR [eax+24], xmm0

; 1878 : 	clip->v = point2->v + ( t * ( point2->v - point1->v ) );

  0053c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0053f	f3 0f 5a 40 1c	 cvtss2sd xmm0, DWORD PTR [eax+28]
  00544	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00547	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  0054a	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  0054f	f3 0f 5c 4a 1c	 subss	 xmm1, DWORD PTR [edx+28]
  00554	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00558	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0055d	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00561	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00565	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00568	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0

; 1879 : 	clip->u2 = point2->u2 + ( t * ( point2->u2 - point1->u2 ) );

  0056d	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00570	f3 0f 5a 40 20	 cvtss2sd xmm0, DWORD PTR [eax+32]
  00575	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00578	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  0057b	f3 0f 10 49 20	 movss	 xmm1, DWORD PTR [ecx+32]
  00580	f3 0f 5c 4a 20	 subss	 xmm1, DWORD PTR [edx+32]
  00585	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00589	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0058e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00592	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00596	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00599	f3 0f 11 40 20	 movss	 DWORD PTR [eax+32], xmm0

; 1880 : 	clip->v2 = point2->v2 + ( t * ( point2->v2 - point1->v2 ) );

  0059e	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  005a1	f3 0f 5a 40 24	 cvtss2sd xmm0, DWORD PTR [eax+36]
  005a6	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  005a9	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  005ac	f3 0f 10 49 24	 movss	 xmm1, DWORD PTR [ecx+36]
  005b1	f3 0f 5c 4a 24	 subss	 xmm1, DWORD PTR [edx+36]
  005b6	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  005ba	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  005bf	f2 0f 58 c1	 addsd	 xmm0, xmm1
  005c3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005c7	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  005ca	f3 0f 11 40 24	 movss	 DWORD PTR [eax+36], xmm0

; 1881 : 
; 1882 : 	clip->outcode = 0;

  005cf	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  005d2	c6 40 2c 00	 mov	 BYTE PTR [eax+44], 0

; 1883 : 
; 1884 : #if REPORT_CLIP_STATISTICS
; 1885 : 
; 1886 : 	number_of_ymin_coordinates_inserted++;
; 1887 : 
; 1888 : #endif
; 1889 : 	return ( number_of_clipping_vertices++ );

  005d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_vertices@@3HA ; number_of_clipping_vertices
  005db	89 85 34 ff ff
	ff		 mov	 DWORD PTR tv350[ebp], eax
  005e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_clipping_vertices@@3HA ; number_of_clipping_vertices
  005e7	83 c1 01	 add	 ecx, 1
  005ea	89 0d 00 00 00
	00		 mov	 DWORD PTR ?number_of_clipping_vertices@@3HA, ecx ; number_of_clipping_vertices
  005f0	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv350[ebp]

; 1890 : }

  005f6	5f		 pop	 edi
  005f7	5e		 pop	 esi
  005f8	5b		 pop	 ebx
  005f9	8b e5		 mov	 esp, ebp
  005fb	5d		 pop	 ebp
  005fc	c2 08 00	 ret	 8
?generate_ymin_clipped_edge@@YGHPAUVERTEX@@0@Z ENDP	; generate_ymin_clipped_edge
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfclip.c
;	COMDAT ?generate_xmax_clipped_edge@@YGHPAUVERTEX@@0@Z
_TEXT	SEGMENT
tv378 = -224						; size = 8
tv504 = -216						; size = 8
tv372 = -208						; size = 8
tv354 = -204						; size = 4
_int_dblue2$ = -136					; size = 4
_int_blue2$ = -132					; size = 4
_int_dblue$ = -128					; size = 4
_int_blue$ = -124					; size = 4
_int_dgreen2$ = -120					; size = 4
_int_green2$ = -116					; size = 4
_int_dgreen$ = -112					; size = 4
_int_green$ = -108					; size = 4
_int_dred2$ = -104					; size = 4
_int_red2$ = -100					; size = 4
_int_dred$ = -96					; size = 4
_int_red$ = -92						; size = 4
_int_dalpha2$ = -88					; size = 4
_int_alpha2$ = -84					; size = 4
_int_dalpha$ = -80					; size = 4
_int_alpha$ = -76					; size = 4
_int_dfog$ = -72					; size = 4
_int_fog$ = -68						; size = 4
_blue2$ = -64						; size = 4
_blue$ = -60						; size = 4
_green2$ = -56						; size = 4
_green$ = -52						; size = 4
_red2$ = -48						; size = 4
_red$ = -44						; size = 4
_alpha2$ = -40						; size = 4
_alpha$ = -36						; size = 4
_fog$ = -32						; size = 4
_denominator$ = -28					; size = 8
_numerator$ = -20					; size = 8
_t$ = -12						; size = 8
_clip$ = -4						; size = 4
_point1$ = 8						; size = 4
_point2$ = 12						; size = 4
?generate_xmax_clipped_edge@@YGHPAUVERTEX@@0@Z PROC	; generate_xmax_clipped_edge, COMDAT

; 1585 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1586 : 
; 1587 : 	vertex
; 1588 : 		*clip;
; 1589 : 
; 1590 : 	double
; 1591 : 		t,
; 1592 : 		numerator,
; 1593 : 		denominator;
; 1594 : 
; 1595 : 	float
; 1596 : 		fog,
; 1597 : 		alpha,
; 1598 : 		alpha2,
; 1599 : 		red,
; 1600 : 		red2,
; 1601 : 		green,
; 1602 : 		green2,
; 1603 : 		blue,
; 1604 : 		blue2;
; 1605 : 
; 1606 : 	int
; 1607 : 		int_fog,
; 1608 : 		int_dfog,
; 1609 : 		int_alpha,
; 1610 : 		int_dalpha,
; 1611 : 		int_alpha2,
; 1612 : 		int_dalpha2,
; 1613 : 		int_red,
; 1614 : 		int_dred,
; 1615 : 		int_red2,
; 1616 : 		int_dred2,
; 1617 : 		int_green,
; 1618 : 		int_dgreen,
; 1619 : 		int_green2,
; 1620 : 		int_dgreen2,
; 1621 : 		int_blue,
; 1622 : 		int_dblue,
; 1623 : 		int_blue2,
; 1624 : 		int_dblue2;
; 1625 : 
; 1626 : 	if ( point1->j > point2->j )

  0000c	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00012	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00017	0f 2f 41 14	 comiss	 xmm0, DWORD PTR [ecx+20]
  0001b	76 12		 jbe	 SHORT $LN2@generate_x

; 1627 : 	{
; 1628 : 
; 1629 : 		clip = point1;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00020	89 45 fc	 mov	 DWORD PTR _clip$[ebp], eax

; 1630 : 
; 1631 : 		point1 = point2;

  00023	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00026	89 45 08	 mov	 DWORD PTR _point1$[ebp], eax

; 1632 : 
; 1633 : 		point2 = clip;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  0002c	89 45 0c	 mov	 DWORD PTR _point2$[ebp], eax
$LN2@generate_x:

; 1634 : 	}
; 1635 : 
; 1636 : 	numerator = active_viewport.x_max - point2->i;

  0002f	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00032	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  0003a	f3 0f 5c 40 10	 subss	 xmm0, DWORD PTR [eax+16]
  0003f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00043	f2 0f 11 45 ec	 movsd	 QWORD PTR _numerator$[ebp], xmm0

; 1637 : 
; 1638 : 	denominator = point2->i - point1->i;

  00048	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _point1$[ebp]
  0004e	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00053	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  00058	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0005c	f2 0f 11 45 e4	 movsd	 QWORD PTR _denominator$[ebp], xmm0

; 1639 : 
; 1640 : #ifdef DEBUG
; 1641 : 
; 1642 : 	if ( fabs ( denominator ) < fabs ( numerator ) )

  00061	83 ec 08	 sub	 esp, 8
  00064	f2 0f 10 45 e4	 movsd	 xmm0, QWORD PTR _denominator$[ebp]
  00069	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0006e	e8 00 00 00 00	 call	 _fabs
  00073	83 c4 08	 add	 esp, 8
  00076	dd 9d 30 ff ff
	ff		 fstp	 QWORD PTR tv372[ebp]
  0007c	f2 0f 10 85 30
	ff ff ff	 movsd	 xmm0, QWORD PTR tv372[ebp]
  00084	83 ec 08	 sub	 esp, 8
  00087	f2 0f 10 4d ec	 movsd	 xmm1, QWORD PTR _numerator$[ebp]
  0008c	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  00091	f2 0f 11 85 28
	ff ff ff	 movsd	 QWORD PTR tv504[ebp], xmm0
  00099	e8 00 00 00 00	 call	 _fabs
  0009e	83 c4 08	 add	 esp, 8
  000a1	dd 9d 20 ff ff
	ff		 fstp	 QWORD PTR tv378[ebp]
  000a7	f2 0f 10 85 20
	ff ff ff	 movsd	 xmm0, QWORD PTR tv378[ebp]
  000af	f2 0f 10 8d 28
	ff ff ff	 movsd	 xmm1, QWORD PTR tv504[ebp]
  000b7	66 0f 2f c1	 comisd	 xmm0, xmm1
  000bb	76 0d		 jbe	 SHORT $LN3@generate_x

; 1643 : 	{
; 1644 : 
; 1645 : 		debug_fatal ( "Internal clipping error" );

  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NHIHKLGG@Internal?5clipping?5error@
  000c2	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000c7	83 c4 04	 add	 esp, 4
$LN3@generate_x:

; 1646 : 	}
; 1647 : 
; 1648 : #endif
; 1649 : 
; 1650 : 	t = ( numerator / denominator );

  000ca	f2 0f 10 45 ec	 movsd	 xmm0, QWORD PTR _numerator$[ebp]
  000cf	f2 0f 5e 45 e4	 divsd	 xmm0, QWORD PTR _denominator$[ebp]
  000d4	f2 0f 11 45 f4	 movsd	 QWORD PTR _t$[ebp], xmm0

; 1651 : 
; 1652 : 	clip = &clipping_vertices[number_of_clipping_vertices];

  000d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_vertices@@3HA ; number_of_clipping_vertices
  000de	c1 e0 06	 shl	 eax, 6
  000e1	05 00 00 00 00	 add	 eax, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  000e6	89 45 fc	 mov	 DWORD PTR _clip$[ebp], eax

; 1653 : 
; 1654 : 	int_fog = point2->fog;

  000e9	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000ec	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  000f0	89 4d bc	 mov	 DWORD PTR _int_fog$[ebp], ecx

; 1655 : 	int_dfog = int_fog - ( int ) point1->fog;

  000f3	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  000f6	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  000fa	8b 55 bc	 mov	 edx, DWORD PTR _int_fog$[ebp]
  000fd	2b d1		 sub	 edx, ecx
  000ff	89 55 b8	 mov	 DWORD PTR _int_dfog$[ebp], edx

; 1656 : 
; 1657 : 	int_alpha = point2->alpha;

  00102	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00105	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  00109	89 4d b4	 mov	 DWORD PTR _int_alpha$[ebp], ecx

; 1658 : 	int_dalpha = int_alpha - ( int ) point1->alpha;

  0010c	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0010f	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  00113	8b 55 b4	 mov	 edx, DWORD PTR _int_alpha$[ebp]
  00116	2b d1		 sub	 edx, ecx
  00118	89 55 b0	 mov	 DWORD PTR _int_dalpha$[ebp], edx

; 1659 : 	int_alpha2 = point2->alpha2;

  0011b	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0011e	0f b6 48 37	 movzx	 ecx, BYTE PTR [eax+55]
  00122	89 4d ac	 mov	 DWORD PTR _int_alpha2$[ebp], ecx

; 1660 : 	int_dalpha2 = int_alpha2 - ( int ) point1->alpha2;

  00125	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00128	0f b6 48 37	 movzx	 ecx, BYTE PTR [eax+55]
  0012c	8b 55 ac	 mov	 edx, DWORD PTR _int_alpha2$[ebp]
  0012f	2b d1		 sub	 edx, ecx
  00131	89 55 a8	 mov	 DWORD PTR _int_dalpha2$[ebp], edx

; 1661 : 
; 1662 : 	int_red = point2->red;

  00134	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00137	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  0013b	89 4d a4	 mov	 DWORD PTR _int_red$[ebp], ecx

; 1663 : 	int_dred = int_red - ( int ) point1->red;

  0013e	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00141	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  00145	8b 55 a4	 mov	 edx, DWORD PTR _int_red$[ebp]
  00148	2b d1		 sub	 edx, ecx
  0014a	89 55 a0	 mov	 DWORD PTR _int_dred$[ebp], edx

; 1664 : 	int_red2 = point2->red2;

  0014d	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00150	0f b6 48 36	 movzx	 ecx, BYTE PTR [eax+54]
  00154	89 4d 9c	 mov	 DWORD PTR _int_red2$[ebp], ecx

; 1665 : 	int_dred2 = int_red2 - ( int ) point1->red2;

  00157	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0015a	0f b6 48 36	 movzx	 ecx, BYTE PTR [eax+54]
  0015e	8b 55 9c	 mov	 edx, DWORD PTR _int_red2$[ebp]
  00161	2b d1		 sub	 edx, ecx
  00163	89 55 98	 mov	 DWORD PTR _int_dred2$[ebp], edx

; 1666 : 
; 1667 : 	int_green = point2->green;

  00166	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00169	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  0016d	89 4d 94	 mov	 DWORD PTR _int_green$[ebp], ecx

; 1668 : 	int_dgreen = int_green - ( int ) point1->green;

  00170	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00173	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  00177	8b 55 94	 mov	 edx, DWORD PTR _int_green$[ebp]
  0017a	2b d1		 sub	 edx, ecx
  0017c	89 55 90	 mov	 DWORD PTR _int_dgreen$[ebp], edx

; 1669 : 	int_green2 = point2->green2;

  0017f	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00182	0f b6 48 35	 movzx	 ecx, BYTE PTR [eax+53]
  00186	89 4d 8c	 mov	 DWORD PTR _int_green2$[ebp], ecx

; 1670 : 	int_dgreen2 = int_green2 - ( int ) point1->green2;

  00189	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0018c	0f b6 48 35	 movzx	 ecx, BYTE PTR [eax+53]
  00190	8b 55 8c	 mov	 edx, DWORD PTR _int_green2$[ebp]
  00193	2b d1		 sub	 edx, ecx
  00195	89 55 88	 mov	 DWORD PTR _int_dgreen2$[ebp], edx

; 1671 : 
; 1672 : 	int_blue = point2->blue;

  00198	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0019b	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  0019f	89 4d 84	 mov	 DWORD PTR _int_blue$[ebp], ecx

; 1673 : 	int_dblue = int_blue - ( int ) point1->blue;

  001a2	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  001a5	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  001a9	8b 55 84	 mov	 edx, DWORD PTR _int_blue$[ebp]
  001ac	2b d1		 sub	 edx, ecx
  001ae	89 55 80	 mov	 DWORD PTR _int_dblue$[ebp], edx

; 1674 : 	int_blue2 = point2->blue2;

  001b1	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  001b4	0f b6 48 34	 movzx	 ecx, BYTE PTR [eax+52]
  001b8	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _int_blue2$[ebp], ecx

; 1675 : 	int_dblue2 = int_blue2 - ( int ) point1->blue2;

  001be	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  001c1	0f b6 48 34	 movzx	 ecx, BYTE PTR [eax+52]
  001c5	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _int_blue2$[ebp]
  001cb	2b d1		 sub	 edx, ecx
  001cd	89 95 78 ff ff
	ff		 mov	 DWORD PTR _int_dblue2$[ebp], edx

; 1676 : 
; 1677 : 	fog = ( float ) int_fog + ( t * ( float ) int_dfog );

  001d3	f3 0f 2a 45 bc	 cvtsi2ss xmm0, DWORD PTR _int_fog$[ebp]
  001d8	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001dc	f3 0f 2a 4d b8	 cvtsi2ss xmm1, DWORD PTR _int_dfog$[ebp]
  001e1	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001e5	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001ea	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001ee	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001f2	f3 0f 11 45 e0	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1678 : 	alpha = ( float ) int_alpha + ( t * ( float ) int_dalpha );

  001f7	f3 0f 2a 45 b4	 cvtsi2ss xmm0, DWORD PTR _int_alpha$[ebp]
  001fc	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00200	f3 0f 2a 4d b0	 cvtsi2ss xmm1, DWORD PTR _int_dalpha$[ebp]
  00205	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00209	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0020e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00212	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00216	f3 0f 11 45 dc	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1679 : 	alpha2 = ( float ) int_alpha2 + ( t * ( float ) int_dalpha2 );

  0021b	f3 0f 2a 45 ac	 cvtsi2ss xmm0, DWORD PTR _int_alpha2$[ebp]
  00220	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00224	f3 0f 2a 4d a8	 cvtsi2ss xmm1, DWORD PTR _int_dalpha2$[ebp]
  00229	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0022d	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00232	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00236	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0023a	f3 0f 11 45 d8	 movss	 DWORD PTR _alpha2$[ebp], xmm0

; 1680 : 	red = ( float ) int_red + ( t * ( float ) int_dred );

  0023f	f3 0f 2a 45 a4	 cvtsi2ss xmm0, DWORD PTR _int_red$[ebp]
  00244	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00248	f3 0f 2a 4d a0	 cvtsi2ss xmm1, DWORD PTR _int_dred$[ebp]
  0024d	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00251	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00256	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0025a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0025e	f3 0f 11 45 d4	 movss	 DWORD PTR _red$[ebp], xmm0

; 1681 : 	red2 = ( float ) int_red2 + ( t * ( float ) int_dred2 );

  00263	f3 0f 2a 45 9c	 cvtsi2ss xmm0, DWORD PTR _int_red2$[ebp]
  00268	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0026c	f3 0f 2a 4d 98	 cvtsi2ss xmm1, DWORD PTR _int_dred2$[ebp]
  00271	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00275	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0027a	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0027e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00282	f3 0f 11 45 d0	 movss	 DWORD PTR _red2$[ebp], xmm0

; 1682 : 	green = ( float ) int_green + ( t * ( float ) int_dgreen );

  00287	f3 0f 2a 45 94	 cvtsi2ss xmm0, DWORD PTR _int_green$[ebp]
  0028c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00290	f3 0f 2a 4d 90	 cvtsi2ss xmm1, DWORD PTR _int_dgreen$[ebp]
  00295	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00299	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0029e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002a2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002a6	f3 0f 11 45 cc	 movss	 DWORD PTR _green$[ebp], xmm0

; 1683 : 	green2 = ( float ) int_green2 + ( t * ( float ) int_dgreen2 );

  002ab	f3 0f 2a 45 8c	 cvtsi2ss xmm0, DWORD PTR _int_green2$[ebp]
  002b0	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002b4	f3 0f 2a 4d 88	 cvtsi2ss xmm1, DWORD PTR _int_dgreen2$[ebp]
  002b9	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002bd	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002c2	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002c6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ca	f3 0f 11 45 c8	 movss	 DWORD PTR _green2$[ebp], xmm0

; 1684 : 	blue = ( float ) int_blue + ( t * ( float ) int_dblue );

  002cf	f3 0f 2a 45 84	 cvtsi2ss xmm0, DWORD PTR _int_blue$[ebp]
  002d4	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002d8	f3 0f 2a 4d 80	 cvtsi2ss xmm1, DWORD PTR _int_dblue$[ebp]
  002dd	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002e1	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002e6	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002ea	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ee	f3 0f 11 45 c4	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1685 : 	blue2 = ( float ) int_blue2 + ( t * ( float ) int_dblue2 );

  002f3	f3 0f 2a 85 7c
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _int_blue2$[ebp]
  002fb	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002ff	f3 0f 2a 8d 78
	ff ff ff	 cvtsi2ss xmm1, DWORD PTR _int_dblue2$[ebp]
  00307	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0030b	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00310	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00314	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00318	f3 0f 11 45 c0	 movss	 DWORD PTR _blue2$[ebp], xmm0

; 1686 : 
; 1687 : 	fog += FLOAT_FLOAT_FACTOR;

  0031d	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _fog$[ebp]
  00322	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0032a	f3 0f 11 45 e0	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1688 : 	alpha += FLOAT_FLOAT_FACTOR;

  0032f	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _alpha$[ebp]
  00334	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0033c	f3 0f 11 45 dc	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1689 : 	alpha2 += FLOAT_FLOAT_FACTOR;

  00341	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _alpha2$[ebp]
  00346	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0034e	f3 0f 11 45 d8	 movss	 DWORD PTR _alpha2$[ebp], xmm0

; 1690 : 	red += FLOAT_FLOAT_FACTOR;

  00353	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _red$[ebp]
  00358	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00360	f3 0f 11 45 d4	 movss	 DWORD PTR _red$[ebp], xmm0

; 1691 : 	red2 += FLOAT_FLOAT_FACTOR;

  00365	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _red2$[ebp]
  0036a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00372	f3 0f 11 45 d0	 movss	 DWORD PTR _red2$[ebp], xmm0

; 1692 : 	green += FLOAT_FLOAT_FACTOR;

  00377	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _green$[ebp]
  0037c	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00384	f3 0f 11 45 cc	 movss	 DWORD PTR _green$[ebp], xmm0

; 1693 : 	green2 += FLOAT_FLOAT_FACTOR;

  00389	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _green2$[ebp]
  0038e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00396	f3 0f 11 45 c8	 movss	 DWORD PTR _green2$[ebp], xmm0

; 1694 : 	blue += FLOAT_FLOAT_FACTOR;

  0039b	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _blue$[ebp]
  003a0	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003a8	f3 0f 11 45 c4	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1695 : 	blue2 += FLOAT_FLOAT_FACTOR;

  003ad	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _blue2$[ebp]
  003b2	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003ba	f3 0f 11 45 c0	 movss	 DWORD PTR _blue2$[ebp], xmm0

; 1696 : 
; 1697 : 	int_fog = ( *( ( int * ) &fog ) - INTEGER_FLOAT_FACTOR );

  003bf	8b 45 e0	 mov	 eax, DWORD PTR _fog$[ebp]
  003c2	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003c7	89 45 bc	 mov	 DWORD PTR _int_fog$[ebp], eax

; 1698 : 	int_alpha = ( *( ( int * ) &alpha ) - INTEGER_FLOAT_FACTOR );

  003ca	8b 45 dc	 mov	 eax, DWORD PTR _alpha$[ebp]
  003cd	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003d2	89 45 b4	 mov	 DWORD PTR _int_alpha$[ebp], eax

; 1699 : 	int_alpha2 = ( *( ( int * ) &alpha2 ) - INTEGER_FLOAT_FACTOR );

  003d5	8b 45 d8	 mov	 eax, DWORD PTR _alpha2$[ebp]
  003d8	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003dd	89 45 ac	 mov	 DWORD PTR _int_alpha2$[ebp], eax

; 1700 : 	int_red = ( *( ( int * ) &red ) - INTEGER_FLOAT_FACTOR );

  003e0	8b 45 d4	 mov	 eax, DWORD PTR _red$[ebp]
  003e3	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003e8	89 45 a4	 mov	 DWORD PTR _int_red$[ebp], eax

; 1701 : 	int_red2 = ( *( ( int * ) &red2 ) - INTEGER_FLOAT_FACTOR );

  003eb	8b 45 d0	 mov	 eax, DWORD PTR _red2$[ebp]
  003ee	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003f3	89 45 9c	 mov	 DWORD PTR _int_red2$[ebp], eax

; 1702 : 	int_green = ( *( ( int * ) &green ) - INTEGER_FLOAT_FACTOR );

  003f6	8b 45 cc	 mov	 eax, DWORD PTR _green$[ebp]
  003f9	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003fe	89 45 94	 mov	 DWORD PTR _int_green$[ebp], eax

; 1703 : 	int_green2 = ( *( ( int * ) &green2 ) - INTEGER_FLOAT_FACTOR );

  00401	8b 45 c8	 mov	 eax, DWORD PTR _green2$[ebp]
  00404	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00409	89 45 8c	 mov	 DWORD PTR _int_green2$[ebp], eax

; 1704 : 	int_blue = ( *( ( int * ) &blue ) - INTEGER_FLOAT_FACTOR );

  0040c	8b 45 c4	 mov	 eax, DWORD PTR _blue$[ebp]
  0040f	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00414	89 45 84	 mov	 DWORD PTR _int_blue$[ebp], eax

; 1705 : 	int_blue2 = ( *( ( int * ) &blue2 ) - INTEGER_FLOAT_FACTOR );

  00417	8b 45 c0	 mov	 eax, DWORD PTR _blue2$[ebp]
  0041a	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0041f	89 85 7c ff ff
	ff		 mov	 DWORD PTR _int_blue2$[ebp], eax

; 1706 : 
; 1707 : 	clip->fog = int_fog;

  00425	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00428	8a 4d bc	 mov	 cl, BYTE PTR _int_fog$[ebp]
  0042b	88 48 2e	 mov	 BYTE PTR [eax+46], cl

; 1708 : 	clip->alpha = int_alpha;

  0042e	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00431	8a 4d b4	 mov	 cl, BYTE PTR _int_alpha$[ebp]
  00434	88 48 33	 mov	 BYTE PTR [eax+51], cl

; 1709 : 	clip->alpha2 = int_alpha2;

  00437	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  0043a	8a 4d ac	 mov	 cl, BYTE PTR _int_alpha2$[ebp]
  0043d	88 48 37	 mov	 BYTE PTR [eax+55], cl

; 1710 : 	clip->red = int_red;

  00440	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00443	8a 4d a4	 mov	 cl, BYTE PTR _int_red$[ebp]
  00446	88 48 32	 mov	 BYTE PTR [eax+50], cl

; 1711 : 	clip->red2 = int_red2;

  00449	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  0044c	8a 4d 9c	 mov	 cl, BYTE PTR _int_red2$[ebp]
  0044f	88 48 36	 mov	 BYTE PTR [eax+54], cl

; 1712 : 	clip->green = int_green;

  00452	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00455	8a 4d 94	 mov	 cl, BYTE PTR _int_green$[ebp]
  00458	88 48 31	 mov	 BYTE PTR [eax+49], cl

; 1713 : 	clip->green2 = int_green2;

  0045b	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  0045e	8a 4d 8c	 mov	 cl, BYTE PTR _int_green2$[ebp]
  00461	88 48 35	 mov	 BYTE PTR [eax+53], cl

; 1714 : 	clip->blue = int_blue;

  00464	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00467	8a 4d 84	 mov	 cl, BYTE PTR _int_blue$[ebp]
  0046a	88 48 30	 mov	 BYTE PTR [eax+48], cl

; 1715 : 	clip->blue2 = int_blue2;

  0046d	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00470	8a 8d 7c ff ff
	ff		 mov	 cl, BYTE PTR _int_blue2$[ebp]
  00476	88 48 34	 mov	 BYTE PTR [eax+52], cl

; 1716 : 
; 1717 : 	clip->i = active_viewport.x_max;

  00479	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  0047c	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  00484	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 1718 : 	clip->j = point2->j + ( t * ( point2->j - point1->j ) );

  00489	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0048c	f3 0f 5a 40 14	 cvtss2sd xmm0, DWORD PTR [eax+20]
  00491	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00494	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00497	f3 0f 10 49 14	 movss	 xmm1, DWORD PTR [ecx+20]
  0049c	f3 0f 5c 4a 14	 subss	 xmm1, DWORD PTR [edx+20]
  004a1	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  004a5	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  004aa	f2 0f 58 c1	 addsd	 xmm0, xmm1
  004ae	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004b2	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  004b5	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 1719 : 	clip->q = point2->q + ( t * ( point2->q - point1->q ) );

  004ba	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  004bd	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  004c2	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  004c5	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  004c8	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  004cd	f3 0f 5c 4a 0c	 subss	 xmm1, DWORD PTR [edx+12]
  004d2	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  004d6	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  004db	f2 0f 58 c1	 addsd	 xmm0, xmm1
  004df	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004e3	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  004e6	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 1720 : 	clip->z = 1.0 / clip->q;

  004eb	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  004ee	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  004f3	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  004fb	f2 0f 5e c8	 divsd	 xmm1, xmm0
  004ff	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00503	8b 4d fc	 mov	 ecx, DWORD PTR _clip$[ebp]
  00506	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 1721 : 
; 1722 : 	clip->u = point2->u + ( t * ( point2->u - point1->u ) );

  0050b	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0050e	f3 0f 5a 40 18	 cvtss2sd xmm0, DWORD PTR [eax+24]
  00513	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00516	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00519	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  0051e	f3 0f 5c 4a 18	 subss	 xmm1, DWORD PTR [edx+24]
  00523	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00527	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0052c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00530	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00534	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00537	f3 0f 11 40 18	 movss	 DWORD PTR [eax+24], xmm0

; 1723 : 	clip->v = point2->v + ( t * ( point2->v - point1->v ) );

  0053c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0053f	f3 0f 5a 40 1c	 cvtss2sd xmm0, DWORD PTR [eax+28]
  00544	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00547	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  0054a	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  0054f	f3 0f 5c 4a 1c	 subss	 xmm1, DWORD PTR [edx+28]
  00554	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00558	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0055d	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00561	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00565	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00568	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0

; 1724 : 	clip->u2 = point2->u2 + ( t * ( point2->u2 - point1->u2 ) );

  0056d	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00570	f3 0f 5a 40 20	 cvtss2sd xmm0, DWORD PTR [eax+32]
  00575	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00578	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  0057b	f3 0f 10 49 20	 movss	 xmm1, DWORD PTR [ecx+32]
  00580	f3 0f 5c 4a 20	 subss	 xmm1, DWORD PTR [edx+32]
  00585	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00589	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0058e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00592	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00596	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00599	f3 0f 11 40 20	 movss	 DWORD PTR [eax+32], xmm0

; 1725 : 	clip->v2 = point2->v2 + ( t * ( point2->v2 - point1->v2 ) );

  0059e	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  005a1	f3 0f 5a 40 24	 cvtss2sd xmm0, DWORD PTR [eax+36]
  005a6	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  005a9	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  005ac	f3 0f 10 49 24	 movss	 xmm1, DWORD PTR [ecx+36]
  005b1	f3 0f 5c 4a 24	 subss	 xmm1, DWORD PTR [edx+36]
  005b6	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  005ba	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  005bf	f2 0f 58 c1	 addsd	 xmm0, xmm1
  005c3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005c7	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  005ca	f3 0f 11 40 24	 movss	 DWORD PTR [eax+36], xmm0

; 1726 : 
; 1727 : 	clip->outcode = generate_3d_j_outcode ( clip->j );

  005cf	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  005d2	51		 push	 ecx
  005d3	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  005d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005dd	e8 00 00 00 00	 call	 ?generate_3d_j_outcode@@YGHM@Z ; generate_3d_j_outcode
  005e2	8b 4d fc	 mov	 ecx, DWORD PTR _clip$[ebp]
  005e5	88 41 2c	 mov	 BYTE PTR [ecx+44], al

; 1728 : 
; 1729 : #if REPORT_CLIP_STATISTICS
; 1730 : 
; 1731 : 	number_of_xmax_coordinates_inserted++;
; 1732 : 
; 1733 : #endif
; 1734 : 	return ( number_of_clipping_vertices++ );

  005e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_vertices@@3HA ; number_of_clipping_vertices
  005ed	89 85 34 ff ff
	ff		 mov	 DWORD PTR tv354[ebp], eax
  005f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_clipping_vertices@@3HA ; number_of_clipping_vertices
  005f9	83 c1 01	 add	 ecx, 1
  005fc	89 0d 00 00 00
	00		 mov	 DWORD PTR ?number_of_clipping_vertices@@3HA, ecx ; number_of_clipping_vertices
  00602	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv354[ebp]

; 1735 : }

  00608	5f		 pop	 edi
  00609	5e		 pop	 esi
  0060a	5b		 pop	 ebx
  0060b	8b e5		 mov	 esp, ebp
  0060d	5d		 pop	 ebp
  0060e	c2 08 00	 ret	 8
?generate_xmax_clipped_edge@@YGHPAUVERTEX@@0@Z ENDP	; generate_xmax_clipped_edge
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfclip.c
;	COMDAT ?generate_xmin_clipped_edge@@YGHPAUVERTEX@@0@Z
_TEXT	SEGMENT
tv378 = -224						; size = 8
tv504 = -216						; size = 8
tv372 = -208						; size = 8
tv354 = -204						; size = 4
_int_dblue2$ = -136					; size = 4
_int_blue2$ = -132					; size = 4
_int_dblue$ = -128					; size = 4
_int_blue$ = -124					; size = 4
_int_dgreen2$ = -120					; size = 4
_int_green2$ = -116					; size = 4
_int_dgreen$ = -112					; size = 4
_int_green$ = -108					; size = 4
_int_dred2$ = -104					; size = 4
_int_red2$ = -100					; size = 4
_int_dred$ = -96					; size = 4
_int_red$ = -92						; size = 4
_int_dfog$ = -88					; size = 4
_int_fog$ = -84						; size = 4
_int_dalpha2$ = -80					; size = 4
_int_alpha2$ = -76					; size = 4
_int_dalpha$ = -72					; size = 4
_int_alpha$ = -68					; size = 4
_blue2$ = -64						; size = 4
_blue$ = -60						; size = 4
_green2$ = -56						; size = 4
_green$ = -52						; size = 4
_red2$ = -48						; size = 4
_red$ = -44						; size = 4
_alpha2$ = -40						; size = 4
_alpha$ = -36						; size = 4
_fog$ = -32						; size = 4
_denominator$ = -28					; size = 8
_numerator$ = -20					; size = 8
_t$ = -12						; size = 8
_clip$ = -4						; size = 4
_point1$ = 8						; size = 4
_point2$ = 12						; size = 4
?generate_xmin_clipped_edge@@YGHPAUVERTEX@@0@Z PROC	; generate_xmin_clipped_edge, COMDAT

; 1428 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1429 : 
; 1430 : 	vertex
; 1431 : 		*clip;
; 1432 : 
; 1433 : 	double
; 1434 : 		t,
; 1435 : 		numerator,
; 1436 : 		denominator;
; 1437 : 
; 1438 : 	float
; 1439 : 		fog,
; 1440 : 		alpha,
; 1441 : 		alpha2,
; 1442 : 		red,
; 1443 : 		red2,
; 1444 : 		green,
; 1445 : 		green2,
; 1446 : 		blue,
; 1447 : 		blue2;
; 1448 : 
; 1449 : 	int
; 1450 : 		int_alpha,
; 1451 : 		int_dalpha,
; 1452 : 		int_alpha2,
; 1453 : 		int_dalpha2,
; 1454 : 		int_fog,
; 1455 : 		int_dfog,
; 1456 : 		int_red,
; 1457 : 		int_dred,
; 1458 : 		int_red2,
; 1459 : 		int_dred2,
; 1460 : 		int_green,
; 1461 : 		int_dgreen,
; 1462 : 		int_green2,
; 1463 : 		int_dgreen2,
; 1464 : 		int_blue,
; 1465 : 		int_dblue,
; 1466 : 		int_blue2,
; 1467 : 		int_dblue2;
; 1468 : 
; 1469 : 	if ( point1->j > point2->j )

  0000c	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00012	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00017	0f 2f 41 14	 comiss	 xmm0, DWORD PTR [ecx+20]
  0001b	76 12		 jbe	 SHORT $LN2@generate_x

; 1470 : 	{
; 1471 : 
; 1472 : 		clip = point1;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00020	89 45 fc	 mov	 DWORD PTR _clip$[ebp], eax

; 1473 : 
; 1474 : 		point1 = point2;

  00023	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00026	89 45 08	 mov	 DWORD PTR _point1$[ebp], eax

; 1475 : 
; 1476 : 		point2 = clip;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  0002c	89 45 0c	 mov	 DWORD PTR _point2$[ebp], eax
$LN2@generate_x:

; 1477 : 	}
; 1478 : 
; 1479 : 	numerator = active_viewport.x_min - point2->i;

  0002f	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00032	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  0003a	f3 0f 5c 40 10	 subss	 xmm0, DWORD PTR [eax+16]
  0003f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00043	f2 0f 11 45 ec	 movsd	 QWORD PTR _numerator$[ebp], xmm0

; 1480 : 
; 1481 : 	denominator = point2->i - point1->i;

  00048	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _point1$[ebp]
  0004e	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00053	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  00058	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0005c	f2 0f 11 45 e4	 movsd	 QWORD PTR _denominator$[ebp], xmm0

; 1482 : 
; 1483 : #ifdef DEBUG
; 1484 : 
; 1485 : 	if ( fabs ( denominator ) < fabs ( numerator ) )

  00061	83 ec 08	 sub	 esp, 8
  00064	f2 0f 10 45 e4	 movsd	 xmm0, QWORD PTR _denominator$[ebp]
  00069	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0006e	e8 00 00 00 00	 call	 _fabs
  00073	83 c4 08	 add	 esp, 8
  00076	dd 9d 30 ff ff
	ff		 fstp	 QWORD PTR tv372[ebp]
  0007c	f2 0f 10 85 30
	ff ff ff	 movsd	 xmm0, QWORD PTR tv372[ebp]
  00084	83 ec 08	 sub	 esp, 8
  00087	f2 0f 10 4d ec	 movsd	 xmm1, QWORD PTR _numerator$[ebp]
  0008c	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  00091	f2 0f 11 85 28
	ff ff ff	 movsd	 QWORD PTR tv504[ebp], xmm0
  00099	e8 00 00 00 00	 call	 _fabs
  0009e	83 c4 08	 add	 esp, 8
  000a1	dd 9d 20 ff ff
	ff		 fstp	 QWORD PTR tv378[ebp]
  000a7	f2 0f 10 85 20
	ff ff ff	 movsd	 xmm0, QWORD PTR tv378[ebp]
  000af	f2 0f 10 8d 28
	ff ff ff	 movsd	 xmm1, QWORD PTR tv504[ebp]
  000b7	66 0f 2f c1	 comisd	 xmm0, xmm1
  000bb	76 0d		 jbe	 SHORT $LN3@generate_x

; 1486 : 	{
; 1487 : 
; 1488 : 		debug_fatal ( "Internal clipping error" );

  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NHIHKLGG@Internal?5clipping?5error@
  000c2	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000c7	83 c4 04	 add	 esp, 4
$LN3@generate_x:

; 1489 : 	}
; 1490 : 
; 1491 : #endif
; 1492 : 
; 1493 : 	t = ( numerator / denominator );

  000ca	f2 0f 10 45 ec	 movsd	 xmm0, QWORD PTR _numerator$[ebp]
  000cf	f2 0f 5e 45 e4	 divsd	 xmm0, QWORD PTR _denominator$[ebp]
  000d4	f2 0f 11 45 f4	 movsd	 QWORD PTR _t$[ebp], xmm0

; 1494 : 
; 1495 : 	clip = &clipping_vertices[number_of_clipping_vertices];

  000d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_vertices@@3HA ; number_of_clipping_vertices
  000de	c1 e0 06	 shl	 eax, 6
  000e1	05 00 00 00 00	 add	 eax, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  000e6	89 45 fc	 mov	 DWORD PTR _clip$[ebp], eax

; 1496 : 
; 1497 : 	int_fog = point2->fog;

  000e9	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000ec	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  000f0	89 4d ac	 mov	 DWORD PTR _int_fog$[ebp], ecx

; 1498 : 	int_dfog = int_fog - ( int ) point1->fog;

  000f3	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  000f6	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  000fa	8b 55 ac	 mov	 edx, DWORD PTR _int_fog$[ebp]
  000fd	2b d1		 sub	 edx, ecx
  000ff	89 55 a8	 mov	 DWORD PTR _int_dfog$[ebp], edx

; 1499 : 
; 1500 : 	int_alpha = point2->alpha;

  00102	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00105	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  00109	89 4d bc	 mov	 DWORD PTR _int_alpha$[ebp], ecx

; 1501 : 	int_dalpha = int_alpha - ( int ) point1->alpha;

  0010c	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0010f	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  00113	8b 55 bc	 mov	 edx, DWORD PTR _int_alpha$[ebp]
  00116	2b d1		 sub	 edx, ecx
  00118	89 55 b8	 mov	 DWORD PTR _int_dalpha$[ebp], edx

; 1502 : 	int_alpha2 = point2->alpha2;

  0011b	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0011e	0f b6 48 37	 movzx	 ecx, BYTE PTR [eax+55]
  00122	89 4d b4	 mov	 DWORD PTR _int_alpha2$[ebp], ecx

; 1503 : 	int_dalpha2 = int_alpha2 - ( int ) point1->alpha2;

  00125	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00128	0f b6 48 37	 movzx	 ecx, BYTE PTR [eax+55]
  0012c	8b 55 b4	 mov	 edx, DWORD PTR _int_alpha2$[ebp]
  0012f	2b d1		 sub	 edx, ecx
  00131	89 55 b0	 mov	 DWORD PTR _int_dalpha2$[ebp], edx

; 1504 : 
; 1505 : 	int_red = point2->red;

  00134	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00137	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  0013b	89 4d a4	 mov	 DWORD PTR _int_red$[ebp], ecx

; 1506 : 	int_dred = int_red - ( int ) point1->red;

  0013e	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00141	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  00145	8b 55 a4	 mov	 edx, DWORD PTR _int_red$[ebp]
  00148	2b d1		 sub	 edx, ecx
  0014a	89 55 a0	 mov	 DWORD PTR _int_dred$[ebp], edx

; 1507 : 	int_red2 = point2->red2;

  0014d	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00150	0f b6 48 36	 movzx	 ecx, BYTE PTR [eax+54]
  00154	89 4d 9c	 mov	 DWORD PTR _int_red2$[ebp], ecx

; 1508 : 	int_dred2 = int_red2 - ( int ) point1->red2;

  00157	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0015a	0f b6 48 36	 movzx	 ecx, BYTE PTR [eax+54]
  0015e	8b 55 9c	 mov	 edx, DWORD PTR _int_red2$[ebp]
  00161	2b d1		 sub	 edx, ecx
  00163	89 55 98	 mov	 DWORD PTR _int_dred2$[ebp], edx

; 1509 : 
; 1510 : 	int_green = point2->green;

  00166	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00169	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  0016d	89 4d 94	 mov	 DWORD PTR _int_green$[ebp], ecx

; 1511 : 	int_dgreen = int_green - ( int ) point1->green;

  00170	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00173	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  00177	8b 55 94	 mov	 edx, DWORD PTR _int_green$[ebp]
  0017a	2b d1		 sub	 edx, ecx
  0017c	89 55 90	 mov	 DWORD PTR _int_dgreen$[ebp], edx

; 1512 : 	int_green2 = point2->green2;

  0017f	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00182	0f b6 48 35	 movzx	 ecx, BYTE PTR [eax+53]
  00186	89 4d 8c	 mov	 DWORD PTR _int_green2$[ebp], ecx

; 1513 : 	int_dgreen2 = int_green2 - ( int ) point1->green2;

  00189	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0018c	0f b6 48 35	 movzx	 ecx, BYTE PTR [eax+53]
  00190	8b 55 8c	 mov	 edx, DWORD PTR _int_green2$[ebp]
  00193	2b d1		 sub	 edx, ecx
  00195	89 55 88	 mov	 DWORD PTR _int_dgreen2$[ebp], edx

; 1514 : 
; 1515 : 	int_blue = point2->blue;

  00198	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0019b	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  0019f	89 4d 84	 mov	 DWORD PTR _int_blue$[ebp], ecx

; 1516 : 	int_dblue = int_blue - ( int ) point1->blue;

  001a2	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  001a5	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  001a9	8b 55 84	 mov	 edx, DWORD PTR _int_blue$[ebp]
  001ac	2b d1		 sub	 edx, ecx
  001ae	89 55 80	 mov	 DWORD PTR _int_dblue$[ebp], edx

; 1517 : 	int_blue2 = point2->blue2;

  001b1	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  001b4	0f b6 48 34	 movzx	 ecx, BYTE PTR [eax+52]
  001b8	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _int_blue2$[ebp], ecx

; 1518 : 	int_dblue2 = int_blue2 - ( int ) point1->blue2;

  001be	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  001c1	0f b6 48 34	 movzx	 ecx, BYTE PTR [eax+52]
  001c5	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _int_blue2$[ebp]
  001cb	2b d1		 sub	 edx, ecx
  001cd	89 95 78 ff ff
	ff		 mov	 DWORD PTR _int_dblue2$[ebp], edx

; 1519 : 
; 1520 : 	fog = ( float ) int_fog + ( t * ( float ) int_dfog );

  001d3	f3 0f 2a 45 ac	 cvtsi2ss xmm0, DWORD PTR _int_fog$[ebp]
  001d8	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001dc	f3 0f 2a 4d a8	 cvtsi2ss xmm1, DWORD PTR _int_dfog$[ebp]
  001e1	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001e5	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001ea	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001ee	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001f2	f3 0f 11 45 e0	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1521 : 	alpha = ( float ) int_alpha + ( t * ( float ) int_dalpha );

  001f7	f3 0f 2a 45 bc	 cvtsi2ss xmm0, DWORD PTR _int_alpha$[ebp]
  001fc	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00200	f3 0f 2a 4d b8	 cvtsi2ss xmm1, DWORD PTR _int_dalpha$[ebp]
  00205	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00209	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0020e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00212	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00216	f3 0f 11 45 dc	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1522 : 	alpha2 = ( float ) int_alpha2 + ( t * ( float ) int_dalpha2 );

  0021b	f3 0f 2a 45 b4	 cvtsi2ss xmm0, DWORD PTR _int_alpha2$[ebp]
  00220	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00224	f3 0f 2a 4d b0	 cvtsi2ss xmm1, DWORD PTR _int_dalpha2$[ebp]
  00229	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0022d	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00232	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00236	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0023a	f3 0f 11 45 d8	 movss	 DWORD PTR _alpha2$[ebp], xmm0

; 1523 : 	red = ( float ) int_red + ( t * ( float ) int_dred );

  0023f	f3 0f 2a 45 a4	 cvtsi2ss xmm0, DWORD PTR _int_red$[ebp]
  00244	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00248	f3 0f 2a 4d a0	 cvtsi2ss xmm1, DWORD PTR _int_dred$[ebp]
  0024d	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00251	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00256	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0025a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0025e	f3 0f 11 45 d4	 movss	 DWORD PTR _red$[ebp], xmm0

; 1524 : 	red2 = ( float ) int_red2 + ( t * ( float ) int_dred2 );

  00263	f3 0f 2a 45 9c	 cvtsi2ss xmm0, DWORD PTR _int_red2$[ebp]
  00268	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0026c	f3 0f 2a 4d 98	 cvtsi2ss xmm1, DWORD PTR _int_dred2$[ebp]
  00271	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00275	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0027a	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0027e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00282	f3 0f 11 45 d0	 movss	 DWORD PTR _red2$[ebp], xmm0

; 1525 : 	green = ( float ) int_green + ( t * ( float ) int_dgreen );

  00287	f3 0f 2a 45 94	 cvtsi2ss xmm0, DWORD PTR _int_green$[ebp]
  0028c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00290	f3 0f 2a 4d 90	 cvtsi2ss xmm1, DWORD PTR _int_dgreen$[ebp]
  00295	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00299	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0029e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002a2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002a6	f3 0f 11 45 cc	 movss	 DWORD PTR _green$[ebp], xmm0

; 1526 : 	green2 = ( float ) int_green2 + ( t * ( float ) int_dgreen2 );

  002ab	f3 0f 2a 45 8c	 cvtsi2ss xmm0, DWORD PTR _int_green2$[ebp]
  002b0	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002b4	f3 0f 2a 4d 88	 cvtsi2ss xmm1, DWORD PTR _int_dgreen2$[ebp]
  002b9	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002bd	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002c2	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002c6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ca	f3 0f 11 45 c8	 movss	 DWORD PTR _green2$[ebp], xmm0

; 1527 : 	blue = ( float ) int_blue + ( t * ( float ) int_dblue );

  002cf	f3 0f 2a 45 84	 cvtsi2ss xmm0, DWORD PTR _int_blue$[ebp]
  002d4	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002d8	f3 0f 2a 4d 80	 cvtsi2ss xmm1, DWORD PTR _int_dblue$[ebp]
  002dd	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002e1	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002e6	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002ea	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ee	f3 0f 11 45 c4	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1528 : 	blue2 = ( float ) int_blue2 + ( t * ( float ) int_dblue2 );

  002f3	f3 0f 2a 85 7c
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _int_blue2$[ebp]
  002fb	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002ff	f3 0f 2a 8d 78
	ff ff ff	 cvtsi2ss xmm1, DWORD PTR _int_dblue2$[ebp]
  00307	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0030b	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00310	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00314	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00318	f3 0f 11 45 c0	 movss	 DWORD PTR _blue2$[ebp], xmm0

; 1529 : 
; 1530 : 	fog += FLOAT_FLOAT_FACTOR;

  0031d	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _fog$[ebp]
  00322	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0032a	f3 0f 11 45 e0	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1531 : 	alpha += FLOAT_FLOAT_FACTOR;

  0032f	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _alpha$[ebp]
  00334	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0033c	f3 0f 11 45 dc	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1532 : 	alpha2 += FLOAT_FLOAT_FACTOR;

  00341	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _alpha2$[ebp]
  00346	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0034e	f3 0f 11 45 d8	 movss	 DWORD PTR _alpha2$[ebp], xmm0

; 1533 : 	red += FLOAT_FLOAT_FACTOR;

  00353	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _red$[ebp]
  00358	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00360	f3 0f 11 45 d4	 movss	 DWORD PTR _red$[ebp], xmm0

; 1534 : 	red2 += FLOAT_FLOAT_FACTOR;

  00365	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _red2$[ebp]
  0036a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00372	f3 0f 11 45 d0	 movss	 DWORD PTR _red2$[ebp], xmm0

; 1535 : 	green += FLOAT_FLOAT_FACTOR;

  00377	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _green$[ebp]
  0037c	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00384	f3 0f 11 45 cc	 movss	 DWORD PTR _green$[ebp], xmm0

; 1536 : 	green2 += FLOAT_FLOAT_FACTOR;

  00389	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _green2$[ebp]
  0038e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00396	f3 0f 11 45 c8	 movss	 DWORD PTR _green2$[ebp], xmm0

; 1537 : 	blue += FLOAT_FLOAT_FACTOR;

  0039b	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _blue$[ebp]
  003a0	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003a8	f3 0f 11 45 c4	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1538 : 	blue2 += FLOAT_FLOAT_FACTOR;

  003ad	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _blue2$[ebp]
  003b2	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003ba	f3 0f 11 45 c0	 movss	 DWORD PTR _blue2$[ebp], xmm0

; 1539 : 
; 1540 : 	int_fog = ( *( ( int * ) &fog ) - INTEGER_FLOAT_FACTOR );

  003bf	8b 45 e0	 mov	 eax, DWORD PTR _fog$[ebp]
  003c2	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003c7	89 45 ac	 mov	 DWORD PTR _int_fog$[ebp], eax

; 1541 : 	int_alpha = ( *( ( int * ) &alpha ) - INTEGER_FLOAT_FACTOR );

  003ca	8b 45 dc	 mov	 eax, DWORD PTR _alpha$[ebp]
  003cd	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003d2	89 45 bc	 mov	 DWORD PTR _int_alpha$[ebp], eax

; 1542 : 	int_alpha2 = ( *( ( int * ) &alpha2 ) - INTEGER_FLOAT_FACTOR );

  003d5	8b 45 d8	 mov	 eax, DWORD PTR _alpha2$[ebp]
  003d8	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003dd	89 45 b4	 mov	 DWORD PTR _int_alpha2$[ebp], eax

; 1543 : 	int_red = ( *( ( int * ) &red ) - INTEGER_FLOAT_FACTOR );

  003e0	8b 45 d4	 mov	 eax, DWORD PTR _red$[ebp]
  003e3	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003e8	89 45 a4	 mov	 DWORD PTR _int_red$[ebp], eax

; 1544 : 	int_red2 = ( *( ( int * ) &red2 ) - INTEGER_FLOAT_FACTOR );

  003eb	8b 45 d0	 mov	 eax, DWORD PTR _red2$[ebp]
  003ee	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003f3	89 45 9c	 mov	 DWORD PTR _int_red2$[ebp], eax

; 1545 : 	int_green = ( *( ( int * ) &green ) - INTEGER_FLOAT_FACTOR );

  003f6	8b 45 cc	 mov	 eax, DWORD PTR _green$[ebp]
  003f9	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003fe	89 45 94	 mov	 DWORD PTR _int_green$[ebp], eax

; 1546 : 	int_green2 = ( *( ( int * ) &green2 ) - INTEGER_FLOAT_FACTOR );

  00401	8b 45 c8	 mov	 eax, DWORD PTR _green2$[ebp]
  00404	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00409	89 45 8c	 mov	 DWORD PTR _int_green2$[ebp], eax

; 1547 : 	int_blue = ( *( ( int * ) &blue ) - INTEGER_FLOAT_FACTOR );

  0040c	8b 45 c4	 mov	 eax, DWORD PTR _blue$[ebp]
  0040f	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00414	89 45 84	 mov	 DWORD PTR _int_blue$[ebp], eax

; 1548 : 	int_blue2 = ( *( ( int * ) &blue2 ) - INTEGER_FLOAT_FACTOR );

  00417	8b 45 c0	 mov	 eax, DWORD PTR _blue2$[ebp]
  0041a	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0041f	89 85 7c ff ff
	ff		 mov	 DWORD PTR _int_blue2$[ebp], eax

; 1549 : 
; 1550 : 	clip->fog = int_fog;

  00425	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00428	8a 4d ac	 mov	 cl, BYTE PTR _int_fog$[ebp]
  0042b	88 48 2e	 mov	 BYTE PTR [eax+46], cl

; 1551 : 	clip->alpha = int_alpha;

  0042e	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00431	8a 4d bc	 mov	 cl, BYTE PTR _int_alpha$[ebp]
  00434	88 48 33	 mov	 BYTE PTR [eax+51], cl

; 1552 : 	clip->red = int_red;

  00437	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  0043a	8a 4d a4	 mov	 cl, BYTE PTR _int_red$[ebp]
  0043d	88 48 32	 mov	 BYTE PTR [eax+50], cl

; 1553 : 	clip->green = int_green;

  00440	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00443	8a 4d 94	 mov	 cl, BYTE PTR _int_green$[ebp]
  00446	88 48 31	 mov	 BYTE PTR [eax+49], cl

; 1554 : 	clip->blue = int_blue;

  00449	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  0044c	8a 4d 84	 mov	 cl, BYTE PTR _int_blue$[ebp]
  0044f	88 48 30	 mov	 BYTE PTR [eax+48], cl

; 1555 : 	clip->alpha2 = int_alpha2;

  00452	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00455	8a 4d b4	 mov	 cl, BYTE PTR _int_alpha2$[ebp]
  00458	88 48 37	 mov	 BYTE PTR [eax+55], cl

; 1556 : 	clip->red2 = int_red2;

  0045b	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  0045e	8a 4d 9c	 mov	 cl, BYTE PTR _int_red2$[ebp]
  00461	88 48 36	 mov	 BYTE PTR [eax+54], cl

; 1557 : 	clip->green2 = int_green2;

  00464	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00467	8a 4d 8c	 mov	 cl, BYTE PTR _int_green2$[ebp]
  0046a	88 48 35	 mov	 BYTE PTR [eax+53], cl

; 1558 : 	clip->blue2 = int_blue2;

  0046d	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00470	8a 8d 7c ff ff
	ff		 mov	 cl, BYTE PTR _int_blue2$[ebp]
  00476	88 48 34	 mov	 BYTE PTR [eax+52], cl

; 1559 : 
; 1560 : 	clip->i = active_viewport.x_min;

  00479	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  0047c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00484	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 1561 : 	clip->j = point2->j + ( t * ( point2->j - point1->j ) );

  00489	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0048c	f3 0f 5a 40 14	 cvtss2sd xmm0, DWORD PTR [eax+20]
  00491	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00494	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00497	f3 0f 10 49 14	 movss	 xmm1, DWORD PTR [ecx+20]
  0049c	f3 0f 5c 4a 14	 subss	 xmm1, DWORD PTR [edx+20]
  004a1	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  004a5	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  004aa	f2 0f 58 c1	 addsd	 xmm0, xmm1
  004ae	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004b2	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  004b5	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 1562 : 	clip->q = point2->q + ( t * ( point2->q - point1->q ) );

  004ba	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  004bd	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  004c2	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  004c5	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  004c8	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  004cd	f3 0f 5c 4a 0c	 subss	 xmm1, DWORD PTR [edx+12]
  004d2	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  004d6	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  004db	f2 0f 58 c1	 addsd	 xmm0, xmm1
  004df	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004e3	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  004e6	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 1563 : 	clip->z = 1.0 / clip->q;

  004eb	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  004ee	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  004f3	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  004fb	f2 0f 5e c8	 divsd	 xmm1, xmm0
  004ff	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00503	8b 4d fc	 mov	 ecx, DWORD PTR _clip$[ebp]
  00506	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 1564 : 
; 1565 : 	clip->u = point2->u + ( t * ( point2->u - point1->u ) );

  0050b	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0050e	f3 0f 5a 40 18	 cvtss2sd xmm0, DWORD PTR [eax+24]
  00513	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00516	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00519	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  0051e	f3 0f 5c 4a 18	 subss	 xmm1, DWORD PTR [edx+24]
  00523	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00527	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0052c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00530	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00534	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00537	f3 0f 11 40 18	 movss	 DWORD PTR [eax+24], xmm0

; 1566 : 	clip->v = point2->v + ( t * ( point2->v - point1->v ) );

  0053c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0053f	f3 0f 5a 40 1c	 cvtss2sd xmm0, DWORD PTR [eax+28]
  00544	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00547	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  0054a	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  0054f	f3 0f 5c 4a 1c	 subss	 xmm1, DWORD PTR [edx+28]
  00554	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00558	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0055d	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00561	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00565	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00568	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0

; 1567 : 	clip->u2 = point2->u2 + ( t * ( point2->u2 - point1->u2 ) );

  0056d	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00570	f3 0f 5a 40 20	 cvtss2sd xmm0, DWORD PTR [eax+32]
  00575	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00578	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  0057b	f3 0f 10 49 20	 movss	 xmm1, DWORD PTR [ecx+32]
  00580	f3 0f 5c 4a 20	 subss	 xmm1, DWORD PTR [edx+32]
  00585	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00589	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0058e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00592	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00596	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  00599	f3 0f 11 40 20	 movss	 DWORD PTR [eax+32], xmm0

; 1568 : 	clip->v2 = point2->v2 + ( t * ( point2->v2 - point1->v2 ) );

  0059e	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  005a1	f3 0f 5a 40 24	 cvtss2sd xmm0, DWORD PTR [eax+36]
  005a6	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  005a9	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  005ac	f3 0f 10 49 24	 movss	 xmm1, DWORD PTR [ecx+36]
  005b1	f3 0f 5c 4a 24	 subss	 xmm1, DWORD PTR [edx+36]
  005b6	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  005ba	f2 0f 59 4d f4	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  005bf	f2 0f 58 c1	 addsd	 xmm0, xmm1
  005c3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005c7	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  005ca	f3 0f 11 40 24	 movss	 DWORD PTR [eax+36], xmm0

; 1569 : 
; 1570 : 	clip->outcode = generate_3d_j_outcode ( clip->j );

  005cf	8b 45 fc	 mov	 eax, DWORD PTR _clip$[ebp]
  005d2	51		 push	 ecx
  005d3	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  005d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005dd	e8 00 00 00 00	 call	 ?generate_3d_j_outcode@@YGHM@Z ; generate_3d_j_outcode
  005e2	8b 4d fc	 mov	 ecx, DWORD PTR _clip$[ebp]
  005e5	88 41 2c	 mov	 BYTE PTR [ecx+44], al

; 1571 : 
; 1572 : #if REPORT_CLIP_STATISTICS
; 1573 : 
; 1574 : 	number_of_xmin_coordinates_inserted++;
; 1575 : 
; 1576 : #endif
; 1577 : 	return ( number_of_clipping_vertices++ );

  005e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_vertices@@3HA ; number_of_clipping_vertices
  005ed	89 85 34 ff ff
	ff		 mov	 DWORD PTR tv354[ebp], eax
  005f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_clipping_vertices@@3HA ; number_of_clipping_vertices
  005f9	83 c1 01	 add	 ecx, 1
  005fc	89 0d 00 00 00
	00		 mov	 DWORD PTR ?number_of_clipping_vertices@@3HA, ecx ; number_of_clipping_vertices
  00602	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv354[ebp]

; 1578 : }

  00608	5f		 pop	 edi
  00609	5e		 pop	 esi
  0060a	5b		 pop	 ebx
  0060b	8b e5		 mov	 esp, ebp
  0060d	5d		 pop	 ebp
  0060e	c2 08 00	 ret	 8
?generate_xmin_clipped_edge@@YGHPAUVERTEX@@0@Z ENDP	; generate_xmin_clipped_edge
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfclip.c
;	COMDAT ?generate_yonder_clipped_edge@@YGHPAUVERTEX@@0@Z
_TEXT	SEGMENT
tv362 = -188						; size = 4
_int_dblue2$ = -120					; size = 4
_int_blue2$ = -116					; size = 4
_int_dblue$ = -112					; size = 4
_int_blue$ = -108					; size = 4
_int_dgreen2$ = -104					; size = 4
_int_green2$ = -100					; size = 4
_int_dgreen$ = -96					; size = 4
_int_green$ = -92					; size = 4
_int_dred2$ = -88					; size = 4
_int_red2$ = -84					; size = 4
_int_dred$ = -80					; size = 4
_int_red$ = -76						; size = 4
_int_dalpha2$ = -72					; size = 4
_int_alpha2$ = -68					; size = 4
_int_dalpha$ = -64					; size = 4
_int_alpha$ = -60					; size = 4
_int_dfog$ = -56					; size = 4
_int_fog$ = -52						; size = 4
_blue2$ = -48						; size = 4
_blue$ = -44						; size = 4
_green2$ = -40						; size = 4
_green$ = -36						; size = 4
_red2$ = -32						; size = 4
_red$ = -28						; size = 4
_alpha2$ = -24						; size = 4
_alpha$ = -20						; size = 4
_fog$ = -16						; size = 4
_clip$ = -12						; size = 4
_t$ = -8						; size = 8
_point1$ = 8						; size = 4
_point2$ = 12						; size = 4
?generate_yonder_clipped_edge@@YGHPAUVERTEX@@0@Z PROC	; generate_yonder_clipped_edge, COMDAT

; 1290 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1291 : 
; 1292 : 	double
; 1293 : 		t;
; 1294 : 
; 1295 : 	vertex
; 1296 : 		*clip;
; 1297 : 
; 1298 : 	float
; 1299 : 		fog,
; 1300 : 		alpha,
; 1301 : 		alpha2,
; 1302 : 		red,
; 1303 : 		red2,
; 1304 : 		green,
; 1305 : 		green2,
; 1306 : 		blue,
; 1307 : 		blue2;
; 1308 : 
; 1309 : 	int
; 1310 : 		int_fog,
; 1311 : 		int_dfog,
; 1312 : 		int_alpha,
; 1313 : 		int_dalpha,
; 1314 : 		int_alpha2,
; 1315 : 		int_dalpha2,
; 1316 : 		int_red,
; 1317 : 		int_dred,
; 1318 : 		int_red2,
; 1319 : 		int_dred2,
; 1320 : 		int_green,
; 1321 : 		int_dgreen,
; 1322 : 		int_green2,
; 1323 : 		int_dgreen2,
; 1324 : 		int_blue,
; 1325 : 		int_dblue,
; 1326 : 		int_blue2,
; 1327 : 		int_dblue2;
; 1328 : 
; 1329 : 	t = ( ( clip_yonder - point2->z ) / ( point2->z - point1->z ) );

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0000f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?clip_yonder@@3MA
  00017	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  0001f	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00022	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00027	f3 0f 5c 4a 08	 subss	 xmm1, DWORD PTR [edx+8]
  0002c	f3 0f 5e c1	 divss	 xmm0, xmm1
  00030	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00034	f2 0f 11 45 f8	 movsd	 QWORD PTR _t$[ebp], xmm0

; 1330 : 
; 1331 : 	clip = &clipping_vertices[number_of_clipping_vertices];

  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_vertices@@3HA ; number_of_clipping_vertices
  0003e	c1 e0 06	 shl	 eax, 6
  00041	05 00 00 00 00	 add	 eax, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  00046	89 45 f4	 mov	 DWORD PTR _clip$[ebp], eax

; 1332 : 
; 1333 : 	*( ( int * ) &clip->z ) = *( ( int * ) &clip_yonder );

  00049	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0004c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_yonder@@3MA
  00052	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1334 : 	*( ( int * ) &clip->q ) = *( ( int * ) &clip_yonder_reciprocal );

  00055	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00058	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_yonder_reciprocal@@3MA
  0005e	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 1335 : 
; 1336 : 	int_fog = point2->fog;

  00061	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00064	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  00068	89 4d cc	 mov	 DWORD PTR _int_fog$[ebp], ecx

; 1337 : 	int_dfog = int_fog - ( int ) point1->fog;

  0006b	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0006e	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  00072	8b 55 cc	 mov	 edx, DWORD PTR _int_fog$[ebp]
  00075	2b d1		 sub	 edx, ecx
  00077	89 55 c8	 mov	 DWORD PTR _int_dfog$[ebp], edx

; 1338 : 
; 1339 : 	int_alpha = point2->alpha;

  0007a	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0007d	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  00081	89 4d c4	 mov	 DWORD PTR _int_alpha$[ebp], ecx

; 1340 : 	int_dalpha = int_alpha - ( int ) point1->alpha;

  00084	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00087	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  0008b	8b 55 c4	 mov	 edx, DWORD PTR _int_alpha$[ebp]
  0008e	2b d1		 sub	 edx, ecx
  00090	89 55 c0	 mov	 DWORD PTR _int_dalpha$[ebp], edx

; 1341 : 	int_alpha2 = point2->alpha2;

  00093	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00096	0f b6 48 37	 movzx	 ecx, BYTE PTR [eax+55]
  0009a	89 4d bc	 mov	 DWORD PTR _int_alpha2$[ebp], ecx

; 1342 : 	int_dalpha2 = int_alpha2 - ( int ) point1->alpha2;

  0009d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  000a0	0f b6 48 37	 movzx	 ecx, BYTE PTR [eax+55]
  000a4	8b 55 bc	 mov	 edx, DWORD PTR _int_alpha2$[ebp]
  000a7	2b d1		 sub	 edx, ecx
  000a9	89 55 b8	 mov	 DWORD PTR _int_dalpha2$[ebp], edx

; 1343 : 
; 1344 : 	int_red = point2->red;

  000ac	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000af	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  000b3	89 4d b4	 mov	 DWORD PTR _int_red$[ebp], ecx

; 1345 : 	int_dred = int_red - ( int ) point1->red;

  000b6	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  000b9	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  000bd	8b 55 b4	 mov	 edx, DWORD PTR _int_red$[ebp]
  000c0	2b d1		 sub	 edx, ecx
  000c2	89 55 b0	 mov	 DWORD PTR _int_dred$[ebp], edx

; 1346 : 	int_red2 = point2->red2;

  000c5	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000c8	0f b6 48 36	 movzx	 ecx, BYTE PTR [eax+54]
  000cc	89 4d ac	 mov	 DWORD PTR _int_red2$[ebp], ecx

; 1347 : 	int_dred2 = int_red2 - ( int ) point1->red2;

  000cf	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  000d2	0f b6 48 36	 movzx	 ecx, BYTE PTR [eax+54]
  000d6	8b 55 ac	 mov	 edx, DWORD PTR _int_red2$[ebp]
  000d9	2b d1		 sub	 edx, ecx
  000db	89 55 a8	 mov	 DWORD PTR _int_dred2$[ebp], edx

; 1348 : 
; 1349 : 	int_green = point2->green;

  000de	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000e1	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  000e5	89 4d a4	 mov	 DWORD PTR _int_green$[ebp], ecx

; 1350 : 	int_dgreen = int_green - ( int ) point1->green;

  000e8	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  000eb	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  000ef	8b 55 a4	 mov	 edx, DWORD PTR _int_green$[ebp]
  000f2	2b d1		 sub	 edx, ecx
  000f4	89 55 a0	 mov	 DWORD PTR _int_dgreen$[ebp], edx

; 1351 : 	int_green2 = point2->green2;

  000f7	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000fa	0f b6 48 35	 movzx	 ecx, BYTE PTR [eax+53]
  000fe	89 4d 9c	 mov	 DWORD PTR _int_green2$[ebp], ecx

; 1352 : 	int_dgreen2 = int_green2 - ( int ) point1->green2;

  00101	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00104	0f b6 48 35	 movzx	 ecx, BYTE PTR [eax+53]
  00108	8b 55 9c	 mov	 edx, DWORD PTR _int_green2$[ebp]
  0010b	2b d1		 sub	 edx, ecx
  0010d	89 55 98	 mov	 DWORD PTR _int_dgreen2$[ebp], edx

; 1353 : 
; 1354 : 	int_blue = point2->blue;

  00110	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00113	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  00117	89 4d 94	 mov	 DWORD PTR _int_blue$[ebp], ecx

; 1355 : 	int_dblue = int_blue - ( int ) point1->blue;

  0011a	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0011d	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  00121	8b 55 94	 mov	 edx, DWORD PTR _int_blue$[ebp]
  00124	2b d1		 sub	 edx, ecx
  00126	89 55 90	 mov	 DWORD PTR _int_dblue$[ebp], edx

; 1356 : 	int_blue2 = point2->blue2;

  00129	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0012c	0f b6 48 34	 movzx	 ecx, BYTE PTR [eax+52]
  00130	89 4d 8c	 mov	 DWORD PTR _int_blue2$[ebp], ecx

; 1357 : 	int_dblue2 = int_blue2 - ( int ) point1->blue2;

  00133	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00136	0f b6 48 34	 movzx	 ecx, BYTE PTR [eax+52]
  0013a	8b 55 8c	 mov	 edx, DWORD PTR _int_blue2$[ebp]
  0013d	2b d1		 sub	 edx, ecx
  0013f	89 55 88	 mov	 DWORD PTR _int_dblue2$[ebp], edx

; 1358 : 
; 1359 : 	clip->x = point2->x + ( t * ( point2->x - point1->x ) );

  00142	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00145	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00149	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  0014c	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  0014f	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  00153	f3 0f 5c 0a	 subss	 xmm1, DWORD PTR [edx]
  00157	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0015b	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00160	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00164	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00168	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0016b	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1360 : 	clip->y = point2->y + ( t * ( point2->y - point1->y ) );

  0016f	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00172	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  00177	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  0017a	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  0017d	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  00182	f3 0f 5c 4a 04	 subss	 xmm1, DWORD PTR [edx+4]
  00187	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0018b	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00190	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00194	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00198	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0019b	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1361 : 
; 1362 : 	fog = ( float ) int_fog + ( t * ( float ) int_dfog );

  001a0	f3 0f 2a 45 cc	 cvtsi2ss xmm0, DWORD PTR _int_fog$[ebp]
  001a5	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001a9	f3 0f 2a 4d c8	 cvtsi2ss xmm1, DWORD PTR _int_dfog$[ebp]
  001ae	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001b2	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001b7	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001bb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001bf	f3 0f 11 45 f0	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1363 : 	alpha = ( float ) int_alpha + ( t * ( float ) int_dalpha );

  001c4	f3 0f 2a 45 c4	 cvtsi2ss xmm0, DWORD PTR _int_alpha$[ebp]
  001c9	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001cd	f3 0f 2a 4d c0	 cvtsi2ss xmm1, DWORD PTR _int_dalpha$[ebp]
  001d2	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001d6	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001db	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001df	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001e3	f3 0f 11 45 ec	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1364 : 	alpha2 = ( float ) int_alpha2 + ( t * ( float ) int_dalpha2 );

  001e8	f3 0f 2a 45 bc	 cvtsi2ss xmm0, DWORD PTR _int_alpha2$[ebp]
  001ed	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001f1	f3 0f 2a 4d b8	 cvtsi2ss xmm1, DWORD PTR _int_dalpha2$[ebp]
  001f6	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001fa	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001ff	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00203	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00207	f3 0f 11 45 e8	 movss	 DWORD PTR _alpha2$[ebp], xmm0

; 1365 : 	red = ( float ) int_red + ( t * ( float ) int_dred );

  0020c	f3 0f 2a 45 b4	 cvtsi2ss xmm0, DWORD PTR _int_red$[ebp]
  00211	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00215	f3 0f 2a 4d b0	 cvtsi2ss xmm1, DWORD PTR _int_dred$[ebp]
  0021a	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0021e	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00223	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00227	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0022b	f3 0f 11 45 e4	 movss	 DWORD PTR _red$[ebp], xmm0

; 1366 : 	red2 = ( float ) int_red2 + ( t * ( float ) int_dred2 );

  00230	f3 0f 2a 45 ac	 cvtsi2ss xmm0, DWORD PTR _int_red2$[ebp]
  00235	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00239	f3 0f 2a 4d a8	 cvtsi2ss xmm1, DWORD PTR _int_dred2$[ebp]
  0023e	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00242	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00247	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0024b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0024f	f3 0f 11 45 e0	 movss	 DWORD PTR _red2$[ebp], xmm0

; 1367 : 	green = ( float ) int_green + ( t * ( float ) int_dgreen );

  00254	f3 0f 2a 45 a4	 cvtsi2ss xmm0, DWORD PTR _int_green$[ebp]
  00259	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0025d	f3 0f 2a 4d a0	 cvtsi2ss xmm1, DWORD PTR _int_dgreen$[ebp]
  00262	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00266	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0026b	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0026f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00273	f3 0f 11 45 dc	 movss	 DWORD PTR _green$[ebp], xmm0

; 1368 : 	green2 = ( float ) int_green2 + ( t * ( float ) int_dgreen2 );

  00278	f3 0f 2a 45 9c	 cvtsi2ss xmm0, DWORD PTR _int_green2$[ebp]
  0027d	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00281	f3 0f 2a 4d 98	 cvtsi2ss xmm1, DWORD PTR _int_dgreen2$[ebp]
  00286	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0028a	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0028f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00293	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00297	f3 0f 11 45 d8	 movss	 DWORD PTR _green2$[ebp], xmm0

; 1369 : 	blue = ( float ) int_blue + ( t * ( float ) int_dblue );

  0029c	f3 0f 2a 45 94	 cvtsi2ss xmm0, DWORD PTR _int_blue$[ebp]
  002a1	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002a5	f3 0f 2a 4d 90	 cvtsi2ss xmm1, DWORD PTR _int_dblue$[ebp]
  002aa	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002ae	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002b3	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002b7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002bb	f3 0f 11 45 d4	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1370 : 	blue2 = ( float ) int_blue2 + ( t * ( float ) int_dblue2 );

  002c0	f3 0f 2a 45 8c	 cvtsi2ss xmm0, DWORD PTR _int_blue2$[ebp]
  002c5	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002c9	f3 0f 2a 4d 88	 cvtsi2ss xmm1, DWORD PTR _int_dblue2$[ebp]
  002ce	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002d2	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002d7	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002db	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002df	f3 0f 11 45 d0	 movss	 DWORD PTR _blue2$[ebp], xmm0

; 1371 : 
; 1372 : 	fog += FLOAT_FLOAT_FACTOR;

  002e4	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _fog$[ebp]
  002e9	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  002f1	f3 0f 11 45 f0	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1373 : 	alpha += FLOAT_FLOAT_FACTOR;

  002f6	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _alpha$[ebp]
  002fb	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00303	f3 0f 11 45 ec	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1374 : 	alpha2 += FLOAT_FLOAT_FACTOR;

  00308	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _alpha2$[ebp]
  0030d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00315	f3 0f 11 45 e8	 movss	 DWORD PTR _alpha2$[ebp], xmm0

; 1375 : 	red += FLOAT_FLOAT_FACTOR;

  0031a	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _red$[ebp]
  0031f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00327	f3 0f 11 45 e4	 movss	 DWORD PTR _red$[ebp], xmm0

; 1376 : 	red2 += FLOAT_FLOAT_FACTOR;

  0032c	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _red2$[ebp]
  00331	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00339	f3 0f 11 45 e0	 movss	 DWORD PTR _red2$[ebp], xmm0

; 1377 : 	green += FLOAT_FLOAT_FACTOR;

  0033e	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _green$[ebp]
  00343	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0034b	f3 0f 11 45 dc	 movss	 DWORD PTR _green$[ebp], xmm0

; 1378 : 	green2 += FLOAT_FLOAT_FACTOR;

  00350	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _green2$[ebp]
  00355	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0035d	f3 0f 11 45 d8	 movss	 DWORD PTR _green2$[ebp], xmm0

; 1379 : 	blue += FLOAT_FLOAT_FACTOR;

  00362	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _blue$[ebp]
  00367	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0036f	f3 0f 11 45 d4	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1380 : 	blue2 += FLOAT_FLOAT_FACTOR;

  00374	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _blue2$[ebp]
  00379	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00381	f3 0f 11 45 d0	 movss	 DWORD PTR _blue2$[ebp], xmm0

; 1381 : 
; 1382 : 	int_fog = ( *( ( int * ) &fog ) - INTEGER_FLOAT_FACTOR );

  00386	8b 45 f0	 mov	 eax, DWORD PTR _fog$[ebp]
  00389	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0038e	89 45 cc	 mov	 DWORD PTR _int_fog$[ebp], eax

; 1383 : 	int_alpha = ( *( ( int * ) &alpha ) - INTEGER_FLOAT_FACTOR );

  00391	8b 45 ec	 mov	 eax, DWORD PTR _alpha$[ebp]
  00394	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00399	89 45 c4	 mov	 DWORD PTR _int_alpha$[ebp], eax

; 1384 : 	int_alpha2 = ( *( ( int * ) &alpha2 ) - INTEGER_FLOAT_FACTOR );

  0039c	8b 45 e8	 mov	 eax, DWORD PTR _alpha2$[ebp]
  0039f	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003a4	89 45 bc	 mov	 DWORD PTR _int_alpha2$[ebp], eax

; 1385 : 	int_red = ( *( ( int * ) &red ) - INTEGER_FLOAT_FACTOR );

  003a7	8b 45 e4	 mov	 eax, DWORD PTR _red$[ebp]
  003aa	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003af	89 45 b4	 mov	 DWORD PTR _int_red$[ebp], eax

; 1386 : 	int_red2 = ( *( ( int * ) &red2 ) - INTEGER_FLOAT_FACTOR );

  003b2	8b 45 e0	 mov	 eax, DWORD PTR _red2$[ebp]
  003b5	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003ba	89 45 ac	 mov	 DWORD PTR _int_red2$[ebp], eax

; 1387 : 	int_green = ( *( ( int * ) &green ) - INTEGER_FLOAT_FACTOR );

  003bd	8b 45 dc	 mov	 eax, DWORD PTR _green$[ebp]
  003c0	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003c5	89 45 a4	 mov	 DWORD PTR _int_green$[ebp], eax

; 1388 : 	int_green2 = ( *( ( int * ) &green2 ) - INTEGER_FLOAT_FACTOR );

  003c8	8b 45 d8	 mov	 eax, DWORD PTR _green2$[ebp]
  003cb	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003d0	89 45 9c	 mov	 DWORD PTR _int_green2$[ebp], eax

; 1389 : 	int_blue = ( *( ( int * ) &blue ) - INTEGER_FLOAT_FACTOR );

  003d3	8b 45 d4	 mov	 eax, DWORD PTR _blue$[ebp]
  003d6	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003db	89 45 94	 mov	 DWORD PTR _int_blue$[ebp], eax

; 1390 : 	int_blue2 = ( *( ( int * ) &blue2 ) - INTEGER_FLOAT_FACTOR );

  003de	8b 45 d0	 mov	 eax, DWORD PTR _blue2$[ebp]
  003e1	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  003e6	89 45 8c	 mov	 DWORD PTR _int_blue2$[ebp], eax

; 1391 : 
; 1392 : 	clip->fog = int_fog;

  003e9	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  003ec	8a 4d cc	 mov	 cl, BYTE PTR _int_fog$[ebp]
  003ef	88 48 2e	 mov	 BYTE PTR [eax+46], cl

; 1393 : 	clip->alpha = int_alpha;

  003f2	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  003f5	8a 4d c4	 mov	 cl, BYTE PTR _int_alpha$[ebp]
  003f8	88 48 33	 mov	 BYTE PTR [eax+51], cl

; 1394 : 	clip->alpha2 = int_alpha2;

  003fb	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  003fe	8a 4d bc	 mov	 cl, BYTE PTR _int_alpha2$[ebp]
  00401	88 48 37	 mov	 BYTE PTR [eax+55], cl

; 1395 : 	clip->red = int_red;

  00404	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00407	8a 4d b4	 mov	 cl, BYTE PTR _int_red$[ebp]
  0040a	88 48 32	 mov	 BYTE PTR [eax+50], cl

; 1396 : 	clip->red2 = int_red2;

  0040d	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00410	8a 4d ac	 mov	 cl, BYTE PTR _int_red2$[ebp]
  00413	88 48 36	 mov	 BYTE PTR [eax+54], cl

; 1397 : 	clip->green = int_green;

  00416	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00419	8a 4d a4	 mov	 cl, BYTE PTR _int_green$[ebp]
  0041c	88 48 31	 mov	 BYTE PTR [eax+49], cl

; 1398 : 	clip->green2 = int_green2;

  0041f	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00422	8a 4d 9c	 mov	 cl, BYTE PTR _int_green2$[ebp]
  00425	88 48 35	 mov	 BYTE PTR [eax+53], cl

; 1399 : 	clip->blue = int_blue;

  00428	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0042b	8a 4d 94	 mov	 cl, BYTE PTR _int_blue$[ebp]
  0042e	88 48 30	 mov	 BYTE PTR [eax+48], cl

; 1400 : 	clip->blue2 = int_blue2;

  00431	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00434	8a 4d 8c	 mov	 cl, BYTE PTR _int_blue2$[ebp]
  00437	88 48 34	 mov	 BYTE PTR [eax+52], cl

; 1401 : 
; 1402 : 	clip->u = point2->u + ( t * ( point2->u - point1->u ) );

  0043a	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0043d	f3 0f 5a 40 18	 cvtss2sd xmm0, DWORD PTR [eax+24]
  00442	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00445	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00448	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  0044d	f3 0f 5c 4a 18	 subss	 xmm1, DWORD PTR [edx+24]
  00452	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00456	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0045b	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0045f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00463	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00466	f3 0f 11 40 18	 movss	 DWORD PTR [eax+24], xmm0

; 1403 : 	clip->v = point2->v + ( t * ( point2->v - point1->v ) );

  0046b	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0046e	f3 0f 5a 40 1c	 cvtss2sd xmm0, DWORD PTR [eax+28]
  00473	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00476	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00479	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  0047e	f3 0f 5c 4a 1c	 subss	 xmm1, DWORD PTR [edx+28]
  00483	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00487	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0048c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00490	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00494	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00497	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0

; 1404 : 	clip->u2 = point2->u2 + ( t * ( point2->u2 - point1->u2 ) );

  0049c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0049f	f3 0f 5a 40 20	 cvtss2sd xmm0, DWORD PTR [eax+32]
  004a4	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  004a7	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  004aa	f3 0f 10 49 20	 movss	 xmm1, DWORD PTR [ecx+32]
  004af	f3 0f 5c 4a 20	 subss	 xmm1, DWORD PTR [edx+32]
  004b4	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  004b8	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  004bd	f2 0f 58 c1	 addsd	 xmm0, xmm1
  004c1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004c5	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  004c8	f3 0f 11 40 20	 movss	 DWORD PTR [eax+32], xmm0

; 1405 : 	clip->v2 = point2->v2 + ( t * ( point2->v2 - point1->v2 ) );

  004cd	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  004d0	f3 0f 5a 40 24	 cvtss2sd xmm0, DWORD PTR [eax+36]
  004d5	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  004d8	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  004db	f3 0f 10 49 24	 movss	 xmm1, DWORD PTR [ecx+36]
  004e0	f3 0f 5c 4a 24	 subss	 xmm1, DWORD PTR [edx+36]
  004e5	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  004e9	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  004ee	f2 0f 58 c1	 addsd	 xmm0, xmm1
  004f2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004f6	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  004f9	f3 0f 11 40 24	 movss	 DWORD PTR [eax+36], xmm0

; 1406 : 
; 1407 : 	clip->j = active_3d_environment->y_origin;

  004fe	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00501	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00507	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0050a	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 1408 : 	clip->i = ( active_3d_environment->screen_i_scale * clip->x * clip->q );

  0050d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00512	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  00515	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00519	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  0051d	8b 55 f4	 mov	 edx, DWORD PTR _clip$[ebp]
  00520	f3 0f 59 42 0c	 mulss	 xmm0, DWORD PTR [edx+12]
  00525	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00528	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 1409 : 	clip->j -= ( active_3d_environment->screen_j_scale * clip->y * clip->q );

  0052d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00532	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  00535	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0053a	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  0053f	8b 55 f4	 mov	 edx, DWORD PTR _clip$[ebp]
  00542	f3 0f 59 42 0c	 mulss	 xmm0, DWORD PTR [edx+12]
  00547	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0054a	f3 0f 10 48 14	 movss	 xmm1, DWORD PTR [eax+20]
  0054f	f3 0f 5c c8	 subss	 xmm1, xmm0
  00553	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  00556	f3 0f 11 49 14	 movss	 DWORD PTR [ecx+20], xmm1

; 1410 : 	clip->i += active_3d_environment->x_origin;

  0055b	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0055e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00564	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00569	f3 0f 58 41 10	 addss	 xmm0, DWORD PTR [ecx+16]
  0056e	8b 55 f4	 mov	 edx, DWORD PTR _clip$[ebp]
  00571	f3 0f 11 42 10	 movss	 DWORD PTR [edx+16], xmm0

; 1411 : 
; 1412 : 	clip->outcode = generate_3d_outcode ( clip->i, clip->j );

  00576	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00579	51		 push	 ecx
  0057a	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  0057f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00584	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  00587	51		 push	 ecx
  00588	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  0058d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00592	e8 00 00 00 00	 call	 ?generate_3d_outcode@@YGHMM@Z ; generate_3d_outcode
  00597	8b 55 f4	 mov	 edx, DWORD PTR _clip$[ebp]
  0059a	88 42 2c	 mov	 BYTE PTR [edx+44], al

; 1413 : 
; 1414 : #if REPORT_CLIP_STATISTICS
; 1415 : 
; 1416 : 	number_of_far_coordinates_inserted++;
; 1417 : 
; 1418 : #endif
; 1419 : 
; 1420 : 	return ( number_of_clipping_vertices++ );

  0059d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_vertices@@3HA ; number_of_clipping_vertices
  005a2	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv362[ebp], eax
  005a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_clipping_vertices@@3HA ; number_of_clipping_vertices
  005ae	83 c1 01	 add	 ecx, 1
  005b1	89 0d 00 00 00
	00		 mov	 DWORD PTR ?number_of_clipping_vertices@@3HA, ecx ; number_of_clipping_vertices
  005b7	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR tv362[ebp]

; 1421 : }

  005bd	5f		 pop	 edi
  005be	5e		 pop	 esi
  005bf	5b		 pop	 ebx
  005c0	8b e5		 mov	 esp, ebp
  005c2	5d		 pop	 ebp
  005c3	c2 08 00	 ret	 8
?generate_yonder_clipped_edge@@YGHPAUVERTEX@@0@Z ENDP	; generate_yonder_clipped_edge
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfclip.c
;	COMDAT ?generate_hither_clipped_edge@@YGHPAUVERTEX@@0@Z
_TEXT	SEGMENT
tv250 = -140						; size = 4
_int_dblue$ = -72					; size = 4
_int_blue$ = -68					; size = 4
_int_dgreen$ = -64					; size = 4
_int_green$ = -60					; size = 4
_int_dred$ = -56					; size = 4
_int_red$ = -52						; size = 4
_int_dalpha$ = -48					; size = 4
_int_alpha$ = -44					; size = 4
_int_dfog$ = -40					; size = 4
_int_fog$ = -36						; size = 4
_blue$ = -32						; size = 4
_green$ = -28						; size = 4
_red$ = -24						; size = 4
_alpha$ = -20						; size = 4
_fog$ = -16						; size = 4
_clip$ = -12						; size = 4
_t$ = -8						; size = 8
_point1$ = 8						; size = 4
_point2$ = 12						; size = 4
?generate_hither_clipped_edge@@YGHPAUVERTEX@@0@Z PROC	; generate_hither_clipped_edge, COMDAT

; 1152 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1153 : 
; 1154 : 	double
; 1155 : 		t;
; 1156 : 
; 1157 : 	vertex
; 1158 : 		*clip;
; 1159 : 
; 1160 : 	float
; 1161 : 		fog,
; 1162 : 		alpha,
; 1163 : //		alpha2,
; 1164 : 		red,
; 1165 : //		red2,
; 1166 : 		green,
; 1167 : //		green2,
; 1168 : 		blue;
; 1169 : //		blue2;
; 1170 : 
; 1171 : 	int
; 1172 : 		int_fog,
; 1173 : 		int_dfog,
; 1174 : 		int_alpha,
; 1175 : 		int_dalpha,
; 1176 : //		int_alpha2,
; 1177 : //		int_dalpha2,
; 1178 : 		int_red,
; 1179 : 		int_dred,
; 1180 : //		int_red2,
; 1181 : //		int_dred2,
; 1182 : 		int_green,
; 1183 : 		int_dgreen,
; 1184 : //		int_green2,
; 1185 : //		int_dgreen2,
; 1186 : 		int_blue,
; 1187 : 		int_dblue;
; 1188 : //		int_blue2,
; 1189 : //		int_dblue2;
; 1190 : 
; 1191 : 	t = ( ( clip_hither - point2->z ) / ( point2->z - point1->z ) );

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0000f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?clip_hither@@3MA
  00017	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  0001f	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00022	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00027	f3 0f 5c 4a 08	 subss	 xmm1, DWORD PTR [edx+8]
  0002c	f3 0f 5e c1	 divss	 xmm0, xmm1
  00030	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00034	f2 0f 11 45 f8	 movsd	 QWORD PTR _t$[ebp], xmm0

; 1192 : 
; 1193 : 	clip = &clipping_vertices[number_of_clipping_vertices];

  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_vertices@@3HA ; number_of_clipping_vertices
  0003e	c1 e0 06	 shl	 eax, 6
  00041	05 00 00 00 00	 add	 eax, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  00046	89 45 f4	 mov	 DWORD PTR _clip$[ebp], eax

; 1194 : 
; 1195 : 	*( ( int * ) &clip->z ) = *( ( int * ) &clip_hither );

  00049	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0004c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_hither@@3MA
  00052	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1196 : 	*( ( int * ) &clip->q ) = *( ( int * ) &clip_hither_reciprocal );

  00055	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00058	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_hither_reciprocal@@3MA
  0005e	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 1197 : 
; 1198 : 	int_fog = point2->fog;

  00061	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00064	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  00068	89 4d dc	 mov	 DWORD PTR _int_fog$[ebp], ecx

; 1199 : 	int_dfog = int_fog - ( int ) point1->fog;

  0006b	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0006e	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  00072	8b 55 dc	 mov	 edx, DWORD PTR _int_fog$[ebp]
  00075	2b d1		 sub	 edx, ecx
  00077	89 55 d8	 mov	 DWORD PTR _int_dfog$[ebp], edx

; 1200 : 
; 1201 : 	int_alpha = point2->alpha;

  0007a	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0007d	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  00081	89 4d d4	 mov	 DWORD PTR _int_alpha$[ebp], ecx

; 1202 : 	int_dalpha = int_alpha - ( int ) point1->alpha;

  00084	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00087	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  0008b	8b 55 d4	 mov	 edx, DWORD PTR _int_alpha$[ebp]
  0008e	2b d1		 sub	 edx, ecx
  00090	89 55 d0	 mov	 DWORD PTR _int_dalpha$[ebp], edx

; 1203 : //	int_alpha2 = point2->alpha2;
; 1204 : //	int_dalpha2 = int_alpha2 - ( int ) point1->alpha2;
; 1205 : 
; 1206 : 	int_red = point2->red;

  00093	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00096	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  0009a	89 4d cc	 mov	 DWORD PTR _int_red$[ebp], ecx

; 1207 : 	int_dred = int_red - ( int ) point1->red;

  0009d	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  000a0	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  000a4	8b 55 cc	 mov	 edx, DWORD PTR _int_red$[ebp]
  000a7	2b d1		 sub	 edx, ecx
  000a9	89 55 c8	 mov	 DWORD PTR _int_dred$[ebp], edx

; 1208 : //	int_red2 = point2->red2;
; 1209 : //	int_dred2 = int_red2 - ( int ) point1->red2;
; 1210 : 
; 1211 : 	int_green = point2->green;

  000ac	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000af	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  000b3	89 4d c4	 mov	 DWORD PTR _int_green$[ebp], ecx

; 1212 : 	int_dgreen = int_green - ( int ) point1->green;

  000b6	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  000b9	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  000bd	8b 55 c4	 mov	 edx, DWORD PTR _int_green$[ebp]
  000c0	2b d1		 sub	 edx, ecx
  000c2	89 55 c0	 mov	 DWORD PTR _int_dgreen$[ebp], edx

; 1213 : //	int_green2 = point2->green2;
; 1214 : //	int_dgreen2 = int_green2 - ( int ) point1->green2;
; 1215 : 
; 1216 : 	int_blue = point2->blue;

  000c5	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000c8	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  000cc	89 4d bc	 mov	 DWORD PTR _int_blue$[ebp], ecx

; 1217 : 	int_dblue = int_blue - ( int ) point1->blue;

  000cf	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  000d2	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  000d6	8b 55 bc	 mov	 edx, DWORD PTR _int_blue$[ebp]
  000d9	2b d1		 sub	 edx, ecx
  000db	89 55 b8	 mov	 DWORD PTR _int_dblue$[ebp], edx

; 1218 : //	int_blue2 = point2->blue2;
; 1219 : //	int_dblue2 = int_blue2 - ( int ) point1->blue2;
; 1220 : 
; 1221 : 	clip->x = point2->x + ( t * ( point2->x - point1->x ) );

  000de	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000e1	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  000e5	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  000e8	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  000eb	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  000ef	f3 0f 5c 0a	 subss	 xmm1, DWORD PTR [edx]
  000f3	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  000f7	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  000fc	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00100	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00104	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00107	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1222 : 	clip->y = point2->y + ( t * ( point2->y - point1->y ) );

  0010b	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0010e	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  00113	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00116	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00119	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  0011e	f3 0f 5c 4a 04	 subss	 xmm1, DWORD PTR [edx+4]
  00123	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00127	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0012c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00130	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00134	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00137	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1223 : 
; 1224 : 	fog = ( float ) int_fog + ( t * ( float ) int_dfog );

  0013c	f3 0f 2a 45 dc	 cvtsi2ss xmm0, DWORD PTR _int_fog$[ebp]
  00141	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00145	f3 0f 2a 4d d8	 cvtsi2ss xmm1, DWORD PTR _int_dfog$[ebp]
  0014a	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0014e	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00153	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00157	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0015b	f3 0f 11 45 f0	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1225 : 	alpha = ( float ) int_alpha + ( t * ( float ) int_dalpha );

  00160	f3 0f 2a 45 d4	 cvtsi2ss xmm0, DWORD PTR _int_alpha$[ebp]
  00165	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00169	f3 0f 2a 4d d0	 cvtsi2ss xmm1, DWORD PTR _int_dalpha$[ebp]
  0016e	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00172	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00177	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0017b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0017f	f3 0f 11 45 ec	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1226 : //	alpha2 = ( float ) int_alpha2 + ( t * ( float ) int_dalpha2 );
; 1227 : 	red = ( float ) int_red + ( t * ( float ) int_dred );

  00184	f3 0f 2a 45 cc	 cvtsi2ss xmm0, DWORD PTR _int_red$[ebp]
  00189	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0018d	f3 0f 2a 4d c8	 cvtsi2ss xmm1, DWORD PTR _int_dred$[ebp]
  00192	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00196	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0019b	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0019f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001a3	f3 0f 11 45 e8	 movss	 DWORD PTR _red$[ebp], xmm0

; 1228 : //	red2 = ( float ) int_red2 + ( t * ( float ) int_dred2 );
; 1229 : 	green = ( float ) int_green + ( t * ( float ) int_dgreen );

  001a8	f3 0f 2a 45 c4	 cvtsi2ss xmm0, DWORD PTR _int_green$[ebp]
  001ad	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001b1	f3 0f 2a 4d c0	 cvtsi2ss xmm1, DWORD PTR _int_dgreen$[ebp]
  001b6	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001ba	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001bf	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001c3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001c7	f3 0f 11 45 e4	 movss	 DWORD PTR _green$[ebp], xmm0

; 1230 : //	green2 = ( float ) int_green2 + ( t * ( float ) int_dgreen2 );
; 1231 : 	blue = ( float ) int_blue + ( t * ( float ) int_dblue );

  001cc	f3 0f 2a 45 bc	 cvtsi2ss xmm0, DWORD PTR _int_blue$[ebp]
  001d1	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001d5	f3 0f 2a 4d b8	 cvtsi2ss xmm1, DWORD PTR _int_dblue$[ebp]
  001da	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001de	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001e3	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001e7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001eb	f3 0f 11 45 e0	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1232 : //	blue2 = ( float ) int_blue2 + ( t * ( float ) int_dblue2 );
; 1233 : 
; 1234 : 	fog += FLOAT_FLOAT_FACTOR;

  001f0	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _fog$[ebp]
  001f5	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  001fd	f3 0f 11 45 f0	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1235 : 	alpha += FLOAT_FLOAT_FACTOR;

  00202	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _alpha$[ebp]
  00207	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0020f	f3 0f 11 45 ec	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1236 : //	alpha2 += FLOAT_FLOAT_FACTOR;
; 1237 : 	red += FLOAT_FLOAT_FACTOR;

  00214	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _red$[ebp]
  00219	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00221	f3 0f 11 45 e8	 movss	 DWORD PTR _red$[ebp], xmm0

; 1238 : //	red2 += FLOAT_FLOAT_FACTOR;
; 1239 : 	green += FLOAT_FLOAT_FACTOR;

  00226	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _green$[ebp]
  0022b	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00233	f3 0f 11 45 e4	 movss	 DWORD PTR _green$[ebp], xmm0

; 1240 : //	green2 += FLOAT_FLOAT_FACTOR;
; 1241 : 	blue += FLOAT_FLOAT_FACTOR;

  00238	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _blue$[ebp]
  0023d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00245	f3 0f 11 45 e0	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1242 : //	blue2 += FLOAT_FLOAT_FACTOR;
; 1243 : 
; 1244 : 	int_fog = ( *( ( int * ) &fog ) - INTEGER_FLOAT_FACTOR );

  0024a	8b 45 f0	 mov	 eax, DWORD PTR _fog$[ebp]
  0024d	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00252	89 45 dc	 mov	 DWORD PTR _int_fog$[ebp], eax

; 1245 : 	int_alpha = ( *( ( int * ) &alpha ) - INTEGER_FLOAT_FACTOR );

  00255	8b 45 ec	 mov	 eax, DWORD PTR _alpha$[ebp]
  00258	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0025d	89 45 d4	 mov	 DWORD PTR _int_alpha$[ebp], eax

; 1246 : //	int_alpha2 = ( *( ( int * ) &alpha2 ) - INTEGER_FLOAT_FACTOR );
; 1247 : 	int_red = ( *( ( int * ) &red ) - INTEGER_FLOAT_FACTOR );

  00260	8b 45 e8	 mov	 eax, DWORD PTR _red$[ebp]
  00263	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00268	89 45 cc	 mov	 DWORD PTR _int_red$[ebp], eax

; 1248 : //	int_red2 = ( *( ( int * ) &red2 ) - INTEGER_FLOAT_FACTOR );
; 1249 : 	int_green = ( *( ( int * ) &green ) - INTEGER_FLOAT_FACTOR );

  0026b	8b 45 e4	 mov	 eax, DWORD PTR _green$[ebp]
  0026e	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00273	89 45 c4	 mov	 DWORD PTR _int_green$[ebp], eax

; 1250 : //	int_green2 = ( *( ( int * ) &green2 ) - INTEGER_FLOAT_FACTOR );
; 1251 : 	int_blue = ( *( ( int * ) &blue ) - INTEGER_FLOAT_FACTOR );

  00276	8b 45 e0	 mov	 eax, DWORD PTR _blue$[ebp]
  00279	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0027e	89 45 bc	 mov	 DWORD PTR _int_blue$[ebp], eax

; 1252 : //	int_blue2 = ( *( ( int * ) &blue2 ) - INTEGER_FLOAT_FACTOR );
; 1253 : 
; 1254 : 	clip->fog = int_fog;

  00281	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00284	8a 4d dc	 mov	 cl, BYTE PTR _int_fog$[ebp]
  00287	88 48 2e	 mov	 BYTE PTR [eax+46], cl

; 1255 : 	clip->alpha = int_alpha;

  0028a	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0028d	8a 4d d4	 mov	 cl, BYTE PTR _int_alpha$[ebp]
  00290	88 48 33	 mov	 BYTE PTR [eax+51], cl

; 1256 : //	clip->alpha2 = int_alpha2;
; 1257 : 	clip->red = int_red;

  00293	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00296	8a 4d cc	 mov	 cl, BYTE PTR _int_red$[ebp]
  00299	88 48 32	 mov	 BYTE PTR [eax+50], cl

; 1258 : //	clip->red2 = int_red2;
; 1259 : 	clip->green = int_green;

  0029c	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0029f	8a 4d c4	 mov	 cl, BYTE PTR _int_green$[ebp]
  002a2	88 48 31	 mov	 BYTE PTR [eax+49], cl

; 1260 : //	clip->green2 = int_green2;
; 1261 : 	clip->blue = int_blue;

  002a5	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  002a8	8a 4d bc	 mov	 cl, BYTE PTR _int_blue$[ebp]
  002ab	88 48 30	 mov	 BYTE PTR [eax+48], cl

; 1262 : //	clip->blue2 = int_blue2;
; 1263 : 
; 1264 : 	clip->u = point2->u + ( t * ( point2->u - point1->u ) );

  002ae	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  002b1	f3 0f 5a 40 18	 cvtss2sd xmm0, DWORD PTR [eax+24]
  002b6	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  002b9	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  002bc	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  002c1	f3 0f 5c 4a 18	 subss	 xmm1, DWORD PTR [edx+24]
  002c6	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002ca	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002cf	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002d3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002d7	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  002da	f3 0f 11 40 18	 movss	 DWORD PTR [eax+24], xmm0

; 1265 : 	clip->v = point2->v + ( t * ( point2->v - point1->v ) );

  002df	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  002e2	f3 0f 5a 40 1c	 cvtss2sd xmm0, DWORD PTR [eax+28]
  002e7	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  002ea	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  002ed	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  002f2	f3 0f 5c 4a 1c	 subss	 xmm1, DWORD PTR [edx+28]
  002f7	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002fb	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00300	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00304	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00308	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0030b	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0

; 1266 : //	clip->u2 = point2->u2 + ( t * ( point2->u2 - point1->u2 ) );
; 1267 : //	clip->v2 = point2->v2 + ( t * ( point2->v2 - point1->v2 ) );
; 1268 : 
; 1269 : 	clip->j = active_3d_environment->y_origin;

  00310	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00313	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00319	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0031c	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 1270 : 	clip->i = ( active_3d_environment->screen_i_scale * clip->x * clip->q );

  0031f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00324	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  00327	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0032b	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  0032f	8b 55 f4	 mov	 edx, DWORD PTR _clip$[ebp]
  00332	f3 0f 59 42 0c	 mulss	 xmm0, DWORD PTR [edx+12]
  00337	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0033a	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 1271 : 	clip->j -= ( active_3d_environment->screen_j_scale * clip->y * clip->q );

  0033f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00344	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  00347	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0034c	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  00351	8b 55 f4	 mov	 edx, DWORD PTR _clip$[ebp]
  00354	f3 0f 59 42 0c	 mulss	 xmm0, DWORD PTR [edx+12]
  00359	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0035c	f3 0f 10 48 14	 movss	 xmm1, DWORD PTR [eax+20]
  00361	f3 0f 5c c8	 subss	 xmm1, xmm0
  00365	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  00368	f3 0f 11 49 14	 movss	 DWORD PTR [ecx+20], xmm1

; 1272 : 	clip->i += active_3d_environment->x_origin;

  0036d	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00370	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00376	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  0037b	f3 0f 58 41 10	 addss	 xmm0, DWORD PTR [ecx+16]
  00380	8b 55 f4	 mov	 edx, DWORD PTR _clip$[ebp]
  00383	f3 0f 11 42 10	 movss	 DWORD PTR [edx+16], xmm0

; 1273 : 
; 1274 : 	clip->outcode = generate_3d_outcode ( clip->i, clip->j );

  00388	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0038b	51		 push	 ecx
  0038c	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00391	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00396	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  00399	51		 push	 ecx
  0039a	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  0039f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a4	e8 00 00 00 00	 call	 ?generate_3d_outcode@@YGHMM@Z ; generate_3d_outcode
  003a9	8b 55 f4	 mov	 edx, DWORD PTR _clip$[ebp]
  003ac	88 42 2c	 mov	 BYTE PTR [edx+44], al

; 1275 : 
; 1276 : #if REPORT_CLIP_STATISTICS
; 1277 : 
; 1278 : 	number_of_near_coordinates_inserted++;
; 1279 : 
; 1280 : #endif
; 1281 : 
; 1282 : 	return ( number_of_clipping_vertices++ );

  003af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_vertices@@3HA ; number_of_clipping_vertices
  003b4	89 85 74 ff ff
	ff		 mov	 DWORD PTR tv250[ebp], eax
  003ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_clipping_vertices@@3HA ; number_of_clipping_vertices
  003c0	83 c1 01	 add	 ecx, 1
  003c3	89 0d 00 00 00
	00		 mov	 DWORD PTR ?number_of_clipping_vertices@@3HA, ecx ; number_of_clipping_vertices
  003c9	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR tv250[ebp]

; 1283 : }

  003cf	5f		 pop	 edi
  003d0	5e		 pop	 esi
  003d1	5b		 pop	 ebx
  003d2	8b e5		 mov	 esp, ebp
  003d4	5d		 pop	 ebp
  003d5	c2 08 00	 ret	 8
?generate_hither_clipped_edge@@YGHPAUVERTEX@@0@Z ENDP	; generate_hither_clipped_edge
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfclip.c
;	COMDAT ?reconstruct_clip_edges@@YGXXZ
_TEXT	SEGMENT
_source_edges$1 = -88					; size = 4
_source_primitive$2 = -84				; size = 4
_number_of_source_edges$3 = -80				; size = 4
_source_edge_index$4 = -76				; size = 4
_last_clipped_vertex_index$5 = -69			; size = 1
_source_edge$6 = -68					; size = 4
_destination_edges$7 = -64				; size = 4
_source_edges$8 = -60					; size = 4
_destination_primitive$9 = -56				; size = 4
_source_primitive$10 = -52				; size = 4
_number_of_destination_edges$11 = -48			; size = 4
_number_of_source_edges$12 = -44			; size = 4
_last_edge_clipped$13 = -40				; size = 4
_primitive_outcode$14 = -33				; size = 1
_destination_clipping_edge_references$ = -32		; size = 4
_new_clipping_edge_references$ = -28			; size = 4
_new_clipping_primitives$ = -24				; size = 4
_old_number_of_clipping_edges$ = -20			; size = 4
_source_primitive_index$ = -16				; size = 4
_destination_primitive_index$ = -12			; size = 4
_destination_edge_index$ = -8				; size = 4
_source_edge_index$ = -4				; size = 4
?reconstruct_clip_edges@@YGXXZ PROC			; reconstruct_clip_edges, COMDAT

; 869  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 870  : 
; 871  : 	int
; 872  : //		edge_count,
; 873  : 		source_edge_index,
; 874  : 		destination_edge_index,
; 875  : 		destination_primitive_index,
; 876  : 		source_primitive_index,
; 877  : 		old_number_of_clipping_edges;
; 878  : 
; 879  : 	clip_primitive
; 880  : 		*new_clipping_primitives;
; 881  : 	
; 882  : 	clip_primitive_edge_reference
; 883  : 		*new_clipping_edge_references,
; 884  : 		*destination_clipping_edge_references;
; 885  : 
; 886  : 	//
; 887  : 	// Now reconstruct the primitives.
; 888  : 	//
; 889  : 
; 890  : 	if ( current_clipping_primitives == clipping_primitives_array1 )	{ new_clipping_primitives = clipping_primitives_array2; }

  0000c	81 3d 00 00 00
	00 00 00 00 00	 cmp	 DWORD PTR ?current_clipping_primitives@@3PAUCLIP_PRIMITIVE@@A, OFFSET ?clipping_primitives_array1@@3PAUCLIP_PRIMITIVE@@A ; current_clipping_primitives, clipping_primitives_array1
  00016	75 09		 jne	 SHORT $LN16@reconstruc
  00018	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _new_clipping_primitives$[ebp], OFFSET ?clipping_primitives_array2@@3PAUCLIP_PRIMITIVE@@A ; clipping_primitives_array2
  0001f	eb 07		 jmp	 SHORT $LN17@reconstruc
$LN16@reconstruc:

; 891  : 	else																					{ new_clipping_primitives = clipping_primitives_array1; }

  00021	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _new_clipping_primitives$[ebp], OFFSET ?clipping_primitives_array1@@3PAUCLIP_PRIMITIVE@@A ; clipping_primitives_array1
$LN17@reconstruc:

; 892  : 
; 893  : 	if ( current_clipping_edge_references == clipping_edge_reference_array1 )	{ new_clipping_edge_references = clipping_edge_reference_array2; }

  00028	81 3d 00 00 00
	00 00 00 00 00	 cmp	 DWORD PTR ?current_clipping_edge_references@@3PAUCLIP_PRIMITIVE_EDGE_REFERENCE@@A, OFFSET ?clipping_edge_reference_array1@@3PAUCLIP_PRIMITIVE_EDGE_REFERENCE@@A ; current_clipping_edge_references, clipping_edge_reference_array1
  00032	75 09		 jne	 SHORT $LN18@reconstruc
  00034	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _new_clipping_edge_references$[ebp], OFFSET ?clipping_edge_reference_array2@@3PAUCLIP_PRIMITIVE_EDGE_REFERENCE@@A ; clipping_edge_reference_array2
  0003b	eb 07		 jmp	 SHORT $LN19@reconstruc
$LN18@reconstruc:

; 894  : 	else																								{ new_clipping_edge_references = clipping_edge_reference_array1; }

  0003d	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _new_clipping_edge_references$[ebp], OFFSET ?clipping_edge_reference_array1@@3PAUCLIP_PRIMITIVE_EDGE_REFERENCE@@A ; clipping_edge_reference_array1
$LN19@reconstruc:

; 895  : 
; 896  : 	old_number_of_clipping_edges = number_of_clipping_edges;

  00044	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  00049	89 45 ec	 mov	 DWORD PTR _old_number_of_clipping_edges$[ebp], eax

; 897  : 
; 898  : 	destination_clipping_edge_references = new_clipping_edge_references;

  0004c	8b 45 e4	 mov	 eax, DWORD PTR _new_clipping_edge_references$[ebp]
  0004f	89 45 e0	 mov	 DWORD PTR _destination_clipping_edge_references$[ebp], eax

; 899  : 
; 900  : 	destination_primitive_index = 0;

  00052	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _destination_primitive_index$[ebp], 0

; 901  : 
; 902  : 	for ( source_primitive_index = 0; source_primitive_index < number_of_clipping_primitives; source_primitive_index++ )

  00059	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _source_primitive_index$[ebp], 0
  00060	eb 09		 jmp	 SHORT $LN4@reconstruc
$LN2@reconstruc:
  00062	8b 45 f0	 mov	 eax, DWORD PTR _source_primitive_index$[ebp]
  00065	83 c0 01	 add	 eax, 1
  00068	89 45 f0	 mov	 DWORD PTR _source_primitive_index$[ebp], eax
$LN4@reconstruc:
  0006b	8b 45 f0	 mov	 eax, DWORD PTR _source_primitive_index$[ebp]
  0006e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_clipping_primitives@@3HA ; number_of_clipping_primitives
  00074	0f 8d 0f 05 00
	00		 jge	 $LN3@reconstruc

; 903  : 	{
; 904  : 
; 905  : 		unsigned char
; 906  : 			primitive_outcode;
; 907  : 
; 908  : 		int
; 909  : 			last_edge_clipped,
; 910  : 			number_of_source_edges,
; 911  : 			number_of_destination_edges;
; 912  : 
; 913  : 		clip_primitive
; 914  : 			*source_primitive,
; 915  : 			*destination_primitive;
; 916  : 
; 917  : 		clip_primitive_edge_reference
; 918  : 			*source_edges,
; 919  : 			*destination_edges;
; 920  : 
; 921  : 		clip_primitive_edge
; 922  : 			*source_edge;
; 923  : 
; 924  : 		unsigned char
; 925  : 			last_clipped_vertex_index;
; 926  : 
; 927  : 		destination_edge_index = 0;

  0007a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _destination_edge_index$[ebp], 0

; 928  : 
; 929  : 		source_edge_index = 0;

  00081	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _source_edge_index$[ebp], 0

; 930  : 
; 931  : 		source_primitive = &current_clipping_primitives[source_primitive_index];

  00088	8b 45 f0	 mov	 eax, DWORD PTR _source_primitive_index$[ebp]
  0008b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_primitives@@3PAUCLIP_PRIMITIVE@@A ; current_clipping_primitives
  00091	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00094	89 55 cc	 mov	 DWORD PTR _source_primitive$10[ebp], edx

; 932  : 
; 933  : 		destination_primitive = &new_clipping_primitives[destination_primitive_index];

  00097	8b 45 f4	 mov	 eax, DWORD PTR _destination_primitive_index$[ebp]
  0009a	8b 4d e8	 mov	 ecx, DWORD PTR _new_clipping_primitives$[ebp]
  0009d	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  000a0	89 55 c8	 mov	 DWORD PTR _destination_primitive$9[ebp], edx

; 934  : 
; 935  : 		source_edges = source_primitive->edges;

  000a3	8b 45 cc	 mov	 eax, DWORD PTR _source_primitive$10[ebp]
  000a6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a9	89 4d c4	 mov	 DWORD PTR _source_edges$8[ebp], ecx

; 936  : 
; 937  : 		destination_edges = destination_clipping_edge_references;

  000ac	8b 45 e0	 mov	 eax, DWORD PTR _destination_clipping_edge_references$[ebp]
  000af	89 45 c0	 mov	 DWORD PTR _destination_edges$7[ebp], eax

; 938  : 
; 939  : 		destination_primitive->edges = destination_edges;

  000b2	8b 45 c8	 mov	 eax, DWORD PTR _destination_primitive$9[ebp]
  000b5	8b 4d c0	 mov	 ecx, DWORD PTR _destination_edges$7[ebp]
  000b8	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 940  : 
; 941  : 		number_of_source_edges = source_primitive->number_of_edges;

  000bb	8b 45 cc	 mov	 eax, DWORD PTR _source_primitive$10[ebp]
  000be	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c0	89 4d d4	 mov	 DWORD PTR _number_of_source_edges$12[ebp], ecx

; 942  : 
; 943  : 		number_of_destination_edges = 0;

  000c3	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _number_of_destination_edges$11[ebp], 0
$LN5@reconstruc:

; 944  : 
; 945  : 		while ( current_clipping_edges[ source_edges[source_edge_index].edge_index ].clip_status == CLIP_STATUS_REJECTED )

  000ca	8b 45 fc	 mov	 eax, DWORD PTR _source_edge_index$[ebp]
  000cd	8b 4d c4	 mov	 ecx, DWORD PTR _source_edges$8[ebp]
  000d0	0f b6 54 81 01	 movzx	 edx, BYTE PTR [ecx+eax*4+1]
  000d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  000da	83 3c d0 00	 cmp	 DWORD PTR [eax+edx*8], 0
  000de	75 0b		 jne	 SHORT $LN6@reconstruc

; 946  : 		{
; 947  : 
; 948  : 			source_edge_index++;

  000e0	8b 45 fc	 mov	 eax, DWORD PTR _source_edge_index$[ebp]
  000e3	83 c0 01	 add	 eax, 1
  000e6	89 45 fc	 mov	 DWORD PTR _source_edge_index$[ebp], eax

; 949  : 		}

  000e9	eb df		 jmp	 SHORT $LN5@reconstruc
$LN6@reconstruc:

; 950  : 
; 951  : 		source_edge = &current_clipping_edges[ source_edges[source_edge_index].edge_index ];

  000eb	8b 45 fc	 mov	 eax, DWORD PTR _source_edge_index$[ebp]
  000ee	8b 4d c4	 mov	 ecx, DWORD PTR _source_edges$8[ebp]
  000f1	0f b6 54 81 01	 movzx	 edx, BYTE PTR [ecx+eax*4+1]
  000f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  000fb	8d 0c d0	 lea	 ecx, DWORD PTR [eax+edx*8]
  000fe	89 4d bc	 mov	 DWORD PTR _source_edge$6[ebp], ecx

; 952  : 
; 953  : 		destination_edges[number_of_destination_edges] = source_edges[source_edge_index];

  00101	8b 45 fc	 mov	 eax, DWORD PTR _source_edge_index$[ebp]
  00104	8b 4d c4	 mov	 ecx, DWORD PTR _source_edges$8[ebp]
  00107	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0010a	8b 45 d0	 mov	 eax, DWORD PTR _number_of_destination_edges$11[ebp]
  0010d	8b 4d c0	 mov	 ecx, DWORD PTR _destination_edges$7[ebp]
  00110	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 954  : 
; 955  : 		if ( source_edge->clip_status == CLIP_STATUS_UNCLIPPED )

  00113	8b 45 bc	 mov	 eax, DWORD PTR _source_edge$6[ebp]
  00116	83 38 01	 cmp	 DWORD PTR [eax], 1
  00119	75 09		 jne	 SHORT $LN20@reconstruc

; 956  : 		{
; 957  : 
; 958  : 			last_edge_clipped = FALSE;

  0011b	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _last_edge_clipped$13[ebp], 0
  00122	eb 45		 jmp	 SHORT $LN21@reconstruc
$LN20@reconstruc:

; 959  : 		}
; 960  : 		else if ( source_edge->clip_status == CLIP_STATUS_CLIPPED_FIRST_POINT )

  00124	8b 45 bc	 mov	 eax, DWORD PTR _source_edge$6[ebp]
  00127	83 38 02	 cmp	 DWORD PTR [eax], 2
  0012a	75 18		 jne	 SHORT $LN22@reconstruc

; 961  : 		{
; 962  : 
; 963  : 			last_edge_clipped = source_edges[source_edge_index].direction;

  0012c	8b 45 fc	 mov	 eax, DWORD PTR _source_edge_index$[ebp]
  0012f	8b 4d c4	 mov	 ecx, DWORD PTR _source_edges$8[ebp]
  00132	0f b6 14 81	 movzx	 edx, BYTE PTR [ecx+eax*4]
  00136	89 55 d8	 mov	 DWORD PTR _last_edge_clipped$13[ebp], edx

; 964  : 
; 965  : 			last_clipped_vertex_index = source_edge->point1_index;

  00139	8b 45 bc	 mov	 eax, DWORD PTR _source_edge$6[ebp]
  0013c	8a 48 06	 mov	 cl, BYTE PTR [eax+6]
  0013f	88 4d bb	 mov	 BYTE PTR _last_clipped_vertex_index$5[ebp], cl
  00142	eb 25		 jmp	 SHORT $LN21@reconstruc
$LN22@reconstruc:

; 966  : 		}
; 967  : 		else if ( source_edge->clip_status == CLIP_STATUS_CLIPPED_SECOND_POINT )

  00144	8b 45 bc	 mov	 eax, DWORD PTR _source_edge$6[ebp]
  00147	83 38 03	 cmp	 DWORD PTR [eax], 3
  0014a	75 1d		 jne	 SHORT $LN21@reconstruc

; 968  : 		{
; 969  : 
; 970  : 			last_edge_clipped = 1 - source_edges[source_edge_index].direction;

  0014c	8b 45 fc	 mov	 eax, DWORD PTR _source_edge_index$[ebp]
  0014f	8b 4d c4	 mov	 ecx, DWORD PTR _source_edges$8[ebp]
  00152	0f b6 14 81	 movzx	 edx, BYTE PTR [ecx+eax*4]
  00156	b8 01 00 00 00	 mov	 eax, 1
  0015b	2b c2		 sub	 eax, edx
  0015d	89 45 d8	 mov	 DWORD PTR _last_edge_clipped$13[ebp], eax

; 971  : 
; 972  : 			last_clipped_vertex_index = source_edge->point2_index;

  00160	8b 45 bc	 mov	 eax, DWORD PTR _source_edge$6[ebp]
  00163	8a 48 07	 mov	 cl, BYTE PTR [eax+7]
  00166	88 4d bb	 mov	 BYTE PTR _last_clipped_vertex_index$5[ebp], cl
$LN21@reconstruc:

; 973  : 		}
; 974  : 
; 975  : 		primitive_outcode = source_edge->outcode2;

  00169	8b 45 bc	 mov	 eax, DWORD PTR _source_edge$6[ebp]
  0016c	8a 48 05	 mov	 cl, BYTE PTR [eax+5]
  0016f	88 4d df	 mov	 BYTE PTR _primitive_outcode$14[ebp], cl

; 976  : 
; 977  : 		source_edge_index++;

  00172	8b 45 fc	 mov	 eax, DWORD PTR _source_edge_index$[ebp]
  00175	83 c0 01	 add	 eax, 1
  00178	89 45 fc	 mov	 DWORD PTR _source_edge_index$[ebp], eax

; 978  : 
; 979  : 		number_of_destination_edges++;

  0017b	8b 45 d0	 mov	 eax, DWORD PTR _number_of_destination_edges$11[ebp]
  0017e	83 c0 01	 add	 eax, 1
  00181	89 45 d0	 mov	 DWORD PTR _number_of_destination_edges$11[ebp], eax

; 980  : 
; 981  : 		for ( ; source_edge_index < number_of_source_edges; source_edge_index++ )

  00184	eb 09		 jmp	 SHORT $LN9@reconstruc
$LN7@reconstruc:
  00186	8b 45 fc	 mov	 eax, DWORD PTR _source_edge_index$[ebp]
  00189	83 c0 01	 add	 eax, 1
  0018c	89 45 fc	 mov	 DWORD PTR _source_edge_index$[ebp], eax
$LN9@reconstruc:
  0018f	8b 45 fc	 mov	 eax, DWORD PTR _source_edge_index$[ebp]
  00192	3b 45 d4	 cmp	 eax, DWORD PTR _number_of_source_edges$12[ebp]
  00195	0f 8d af 02 00
	00		 jge	 $LN8@reconstruc

; 982  : 		{
; 983  : 
; 984  : 			source_edge = &current_clipping_edges[ source_edges[source_edge_index].edge_index ];

  0019b	8b 45 fc	 mov	 eax, DWORD PTR _source_edge_index$[ebp]
  0019e	8b 4d c4	 mov	 ecx, DWORD PTR _source_edges$8[ebp]
  001a1	0f b6 54 81 01	 movzx	 edx, BYTE PTR [ecx+eax*4+1]
  001a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  001ab	8d 0c d0	 lea	 ecx, DWORD PTR [eax+edx*8]
  001ae	89 4d bc	 mov	 DWORD PTR _source_edge$6[ebp], ecx

; 985  : 
; 986  : 			if ( source_edge->clip_status == CLIP_STATUS_UNCLIPPED )

  001b1	8b 45 bc	 mov	 eax, DWORD PTR _source_edge$6[ebp]
  001b4	83 38 01	 cmp	 DWORD PTR [eax], 1
  001b7	75 30		 jne	 SHORT $LN25@reconstruc

; 987  : 			{
; 988  : 
; 989  : 				destination_edges[number_of_destination_edges] = source_edges[source_edge_index];

  001b9	8b 45 fc	 mov	 eax, DWORD PTR _source_edge_index$[ebp]
  001bc	8b 4d c4	 mov	 ecx, DWORD PTR _source_edges$8[ebp]
  001bf	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  001c2	8b 45 d0	 mov	 eax, DWORD PTR _number_of_destination_edges$11[ebp]
  001c5	8b 4d c0	 mov	 ecx, DWORD PTR _destination_edges$7[ebp]
  001c8	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 990  : 
; 991  : 				primitive_outcode &= source_edge->outcode2;

  001cb	8b 45 bc	 mov	 eax, DWORD PTR _source_edge$6[ebp]
  001ce	0f b6 48 05	 movzx	 ecx, BYTE PTR [eax+5]
  001d2	0f b6 55 df	 movzx	 edx, BYTE PTR _primitive_outcode$14[ebp]
  001d6	23 d1		 and	 edx, ecx
  001d8	88 55 df	 mov	 BYTE PTR _primitive_outcode$14[ebp], dl

; 992  : 	
; 993  : 				number_of_destination_edges++;

  001db	8b 45 d0	 mov	 eax, DWORD PTR _number_of_destination_edges$11[ebp]
  001de	83 c0 01	 add	 eax, 1
  001e1	89 45 d0	 mov	 DWORD PTR _number_of_destination_edges$11[ebp], eax
  001e4	e9 5c 02 00 00	 jmp	 $LN26@reconstruc
$LN25@reconstruc:

; 994  : 			}
; 995  : 			else if ( source_edge->clip_status == CLIP_STATUS_CLIPPED_FIRST_POINT )

  001e9	8b 45 bc	 mov	 eax, DWORD PTR _source_edge$6[ebp]
  001ec	83 38 02	 cmp	 DWORD PTR [eax], 2
  001ef	0f 85 24 01 00
	00		 jne	 $LN27@reconstruc

; 996  : 			{
; 997  : 
; 998  : 				if ( source_edges[source_edge_index].direction == 1 )

  001f5	8b 45 fc	 mov	 eax, DWORD PTR _source_edge_index$[ebp]
  001f8	8b 4d c4	 mov	 ecx, DWORD PTR _source_edges$8[ebp]
  001fb	0f b6 14 81	 movzx	 edx, BYTE PTR [ecx+eax*4]
  001ff	83 fa 01	 cmp	 edx, 1
  00202	75 15		 jne	 SHORT $LN29@reconstruc

; 999  : 				{
; 1000 : 
; 1001 : 					last_edge_clipped = TRUE;

  00204	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _last_edge_clipped$13[ebp], 1

; 1002 : 
; 1003 : 					last_clipped_vertex_index = source_edge->point1_index;

  0020b	8b 45 bc	 mov	 eax, DWORD PTR _source_edge$6[ebp]
  0020e	8a 48 06	 mov	 cl, BYTE PTR [eax+6]
  00211	88 4d bb	 mov	 BYTE PTR _last_clipped_vertex_index$5[ebp], cl

; 1004 : 				}
; 1005 : 				else

  00214	e9 d0 00 00 00	 jmp	 $LN30@reconstruc
$LN29@reconstruc:

; 1006 : 				{
; 1007 : 
; 1008 : 					last_edge_clipped = FALSE;

  00219	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _last_edge_clipped$13[ebp], 0

; 1009 : 
; 1010 : 					current_clipping_edges[number_of_clipping_edges].clip_status = CLIP_STATUS_UNCLIPPED;

  00220	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  00225	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0022b	c7 04 c1 01 00
	00 00		 mov	 DWORD PTR [ecx+eax*8], 1

; 1011 : 					current_clipping_edges[number_of_clipping_edges].point1_index = last_clipped_vertex_index;

  00232	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  00237	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0023d	8a 55 bb	 mov	 dl, BYTE PTR _last_clipped_vertex_index$5[ebp]
  00240	88 54 c1 06	 mov	 BYTE PTR [ecx+eax*8+6], dl

; 1012 : 					current_clipping_edges[number_of_clipping_edges].point2_index = source_edge->point1_index;

  00244	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  00249	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0024f	8b 55 bc	 mov	 edx, DWORD PTR _source_edge$6[ebp]
  00252	8a 52 06	 mov	 dl, BYTE PTR [edx+6]
  00255	88 54 c1 07	 mov	 BYTE PTR [ecx+eax*8+7], dl

; 1013 : 					current_clipping_edges[number_of_clipping_edges].outcode = ( clipping_vertices[ last_clipped_vertex_index ].outcode | clipping_vertices[ source_edge->point1_index ].outcode );

  00259	0f b6 45 bb	 movzx	 eax, BYTE PTR _last_clipped_vertex_index$5[ebp]
  0025d	c1 e0 06	 shl	 eax, 6
  00260	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[eax+44]
  00267	8b 55 bc	 mov	 edx, DWORD PTR _source_edge$6[ebp]
  0026a	0f b6 42 06	 movzx	 eax, BYTE PTR [edx+6]
  0026e	c1 e0 06	 shl	 eax, 6
  00271	0f b6 90 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[eax+44]
  00278	0b ca		 or	 ecx, edx
  0027a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  0027f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00285	88 4c c2 04	 mov	 BYTE PTR [edx+eax*8+4], cl

; 1014 : 					current_clipping_edges[number_of_clipping_edges].outcode2 = ( clipping_vertices[ last_clipped_vertex_index ].outcode & clipping_vertices[ source_edge->point1_index ].outcode );

  00289	0f b6 45 bb	 movzx	 eax, BYTE PTR _last_clipped_vertex_index$5[ebp]
  0028d	c1 e0 06	 shl	 eax, 6
  00290	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[eax+44]
  00297	8b 55 bc	 mov	 edx, DWORD PTR _source_edge$6[ebp]
  0029a	0f b6 42 06	 movzx	 eax, BYTE PTR [edx+6]
  0029e	c1 e0 06	 shl	 eax, 6
  002a1	0f b6 90 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[eax+44]
  002a8	23 ca		 and	 ecx, edx
  002aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  002af	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  002b5	88 4c c2 05	 mov	 BYTE PTR [edx+eax*8+5], cl

; 1015 : 
; 1016 : 					destination_edges[number_of_destination_edges].direction = 0;

  002b9	8b 45 d0	 mov	 eax, DWORD PTR _number_of_destination_edges$11[ebp]
  002bc	8b 4d c0	 mov	 ecx, DWORD PTR _destination_edges$7[ebp]
  002bf	c6 04 81 00	 mov	 BYTE PTR [ecx+eax*4], 0

; 1017 : 					destination_edges[number_of_destination_edges].edge_index = number_of_clipping_edges;

  002c3	8b 45 d0	 mov	 eax, DWORD PTR _number_of_destination_edges$11[ebp]
  002c6	8b 4d c0	 mov	 ecx, DWORD PTR _destination_edges$7[ebp]
  002c9	8a 15 00 00 00
	00		 mov	 dl, BYTE PTR ?number_of_clipping_edges@@3HA
  002cf	88 54 81 01	 mov	 BYTE PTR [ecx+eax*4+1], dl

; 1018 : 
; 1019 : 					number_of_clipping_edges++;

  002d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  002d8	83 c0 01	 add	 eax, 1
  002db	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_clipping_edges@@3HA, eax ; number_of_clipping_edges

; 1020 : 					number_of_destination_edges++;

  002e0	8b 45 d0	 mov	 eax, DWORD PTR _number_of_destination_edges$11[ebp]
  002e3	83 c0 01	 add	 eax, 1
  002e6	89 45 d0	 mov	 DWORD PTR _number_of_destination_edges$11[ebp], eax
$LN30@reconstruc:

; 1021 : 				}
; 1022 : 
; 1023 : 				destination_edges[number_of_destination_edges] = source_edges[source_edge_index];

  002e9	8b 45 fc	 mov	 eax, DWORD PTR _source_edge_index$[ebp]
  002ec	8b 4d c4	 mov	 ecx, DWORD PTR _source_edges$8[ebp]
  002ef	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  002f2	8b 45 d0	 mov	 eax, DWORD PTR _number_of_destination_edges$11[ebp]
  002f5	8b 4d c0	 mov	 ecx, DWORD PTR _destination_edges$7[ebp]
  002f8	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 1024 : 
; 1025 : 				primitive_outcode &= source_edge->outcode2;

  002fb	8b 45 bc	 mov	 eax, DWORD PTR _source_edge$6[ebp]
  002fe	0f b6 48 05	 movzx	 ecx, BYTE PTR [eax+5]
  00302	0f b6 55 df	 movzx	 edx, BYTE PTR _primitive_outcode$14[ebp]
  00306	23 d1		 and	 edx, ecx
  00308	88 55 df	 mov	 BYTE PTR _primitive_outcode$14[ebp], dl

; 1026 : 	
; 1027 : 				number_of_destination_edges++;

  0030b	8b 45 d0	 mov	 eax, DWORD PTR _number_of_destination_edges$11[ebp]
  0030e	83 c0 01	 add	 eax, 1
  00311	89 45 d0	 mov	 DWORD PTR _number_of_destination_edges$11[ebp], eax
  00314	e9 2c 01 00 00	 jmp	 $LN26@reconstruc
$LN27@reconstruc:

; 1028 : 			}
; 1029 : 			else if ( source_edge->clip_status == CLIP_STATUS_CLIPPED_SECOND_POINT )

  00319	8b 45 bc	 mov	 eax, DWORD PTR _source_edge$6[ebp]
  0031c	83 38 03	 cmp	 DWORD PTR [eax], 3
  0031f	0f 85 20 01 00
	00		 jne	 $LN26@reconstruc

; 1030 : 			{
; 1031 : 
; 1032 : 				if ( source_edges[source_edge_index].direction == 1 )

  00325	8b 45 fc	 mov	 eax, DWORD PTR _source_edge_index$[ebp]
  00328	8b 4d c4	 mov	 ecx, DWORD PTR _source_edges$8[ebp]
  0032b	0f b6 14 81	 movzx	 edx, BYTE PTR [ecx+eax*4]
  0032f	83 fa 01	 cmp	 edx, 1
  00332	0f 85 d2 00 00
	00		 jne	 $LN32@reconstruc

; 1033 : 				{
; 1034 : 
; 1035 : 					last_edge_clipped = FALSE;

  00338	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _last_edge_clipped$13[ebp], 0

; 1036 : 
; 1037 : 					current_clipping_edges[number_of_clipping_edges].clip_status = CLIP_STATUS_UNCLIPPED;

  0033f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  00344	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0034a	c7 04 c1 01 00
	00 00		 mov	 DWORD PTR [ecx+eax*8], 1

; 1038 : 					current_clipping_edges[number_of_clipping_edges].point1_index = last_clipped_vertex_index;

  00351	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  00356	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0035c	8a 55 bb	 mov	 dl, BYTE PTR _last_clipped_vertex_index$5[ebp]
  0035f	88 54 c1 06	 mov	 BYTE PTR [ecx+eax*8+6], dl

; 1039 : 					current_clipping_edges[number_of_clipping_edges].point2_index = source_edge->point2_index;

  00363	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  00368	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0036e	8b 55 bc	 mov	 edx, DWORD PTR _source_edge$6[ebp]
  00371	8a 52 07	 mov	 dl, BYTE PTR [edx+7]
  00374	88 54 c1 07	 mov	 BYTE PTR [ecx+eax*8+7], dl

; 1040 : 					current_clipping_edges[number_of_clipping_edges].outcode = ( clipping_vertices[ last_clipped_vertex_index ].outcode | clipping_vertices[ source_edge->point2_index ].outcode );

  00378	0f b6 45 bb	 movzx	 eax, BYTE PTR _last_clipped_vertex_index$5[ebp]
  0037c	c1 e0 06	 shl	 eax, 6
  0037f	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[eax+44]
  00386	8b 55 bc	 mov	 edx, DWORD PTR _source_edge$6[ebp]
  00389	0f b6 42 07	 movzx	 eax, BYTE PTR [edx+7]
  0038d	c1 e0 06	 shl	 eax, 6
  00390	0f b6 90 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[eax+44]
  00397	0b ca		 or	 ecx, edx
  00399	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  0039e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  003a4	88 4c c2 04	 mov	 BYTE PTR [edx+eax*8+4], cl

; 1041 : 					current_clipping_edges[number_of_clipping_edges].outcode2 = ( clipping_vertices[ last_clipped_vertex_index ].outcode & clipping_vertices[ source_edge->point2_index ].outcode );

  003a8	0f b6 45 bb	 movzx	 eax, BYTE PTR _last_clipped_vertex_index$5[ebp]
  003ac	c1 e0 06	 shl	 eax, 6
  003af	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[eax+44]
  003b6	8b 55 bc	 mov	 edx, DWORD PTR _source_edge$6[ebp]
  003b9	0f b6 42 07	 movzx	 eax, BYTE PTR [edx+7]
  003bd	c1 e0 06	 shl	 eax, 6
  003c0	0f b6 90 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[eax+44]
  003c7	23 ca		 and	 ecx, edx
  003c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  003ce	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  003d4	88 4c c2 05	 mov	 BYTE PTR [edx+eax*8+5], cl

; 1042 : 
; 1043 : 					destination_edges[number_of_destination_edges].direction = 0;

  003d8	8b 45 d0	 mov	 eax, DWORD PTR _number_of_destination_edges$11[ebp]
  003db	8b 4d c0	 mov	 ecx, DWORD PTR _destination_edges$7[ebp]
  003de	c6 04 81 00	 mov	 BYTE PTR [ecx+eax*4], 0

; 1044 : 					destination_edges[number_of_destination_edges].edge_index = number_of_clipping_edges;

  003e2	8b 45 d0	 mov	 eax, DWORD PTR _number_of_destination_edges$11[ebp]
  003e5	8b 4d c0	 mov	 ecx, DWORD PTR _destination_edges$7[ebp]
  003e8	8a 15 00 00 00
	00		 mov	 dl, BYTE PTR ?number_of_clipping_edges@@3HA
  003ee	88 54 81 01	 mov	 BYTE PTR [ecx+eax*4+1], dl

; 1045 : 
; 1046 : 					number_of_clipping_edges++;

  003f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  003f7	83 c0 01	 add	 eax, 1
  003fa	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_clipping_edges@@3HA, eax ; number_of_clipping_edges

; 1047 : 					number_of_destination_edges++;

  003ff	8b 45 d0	 mov	 eax, DWORD PTR _number_of_destination_edges$11[ebp]
  00402	83 c0 01	 add	 eax, 1
  00405	89 45 d0	 mov	 DWORD PTR _number_of_destination_edges$11[ebp], eax

; 1048 : 				}
; 1049 : 				else

  00408	eb 10		 jmp	 SHORT $LN33@reconstruc
$LN32@reconstruc:

; 1050 : 				{
; 1051 : 
; 1052 : 					last_edge_clipped = TRUE;

  0040a	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _last_edge_clipped$13[ebp], 1

; 1053 : 
; 1054 : 					last_clipped_vertex_index = source_edge->point2_index;

  00411	8b 45 bc	 mov	 eax, DWORD PTR _source_edge$6[ebp]
  00414	8a 48 07	 mov	 cl, BYTE PTR [eax+7]
  00417	88 4d bb	 mov	 BYTE PTR _last_clipped_vertex_index$5[ebp], cl
$LN33@reconstruc:

; 1055 : 				}
; 1056 : 
; 1057 : 				destination_edges[number_of_destination_edges] = source_edges[source_edge_index];

  0041a	8b 45 fc	 mov	 eax, DWORD PTR _source_edge_index$[ebp]
  0041d	8b 4d c4	 mov	 ecx, DWORD PTR _source_edges$8[ebp]
  00420	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00423	8b 45 d0	 mov	 eax, DWORD PTR _number_of_destination_edges$11[ebp]
  00426	8b 4d c0	 mov	 ecx, DWORD PTR _destination_edges$7[ebp]
  00429	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 1058 : 
; 1059 : 				primitive_outcode &= source_edge->outcode2;

  0042c	8b 45 bc	 mov	 eax, DWORD PTR _source_edge$6[ebp]
  0042f	0f b6 48 05	 movzx	 ecx, BYTE PTR [eax+5]
  00433	0f b6 55 df	 movzx	 edx, BYTE PTR _primitive_outcode$14[ebp]
  00437	23 d1		 and	 edx, ecx
  00439	88 55 df	 mov	 BYTE PTR _primitive_outcode$14[ebp], dl

; 1060 : 	
; 1061 : 				number_of_destination_edges++;

  0043c	8b 45 d0	 mov	 eax, DWORD PTR _number_of_destination_edges$11[ebp]
  0043f	83 c0 01	 add	 eax, 1
  00442	89 45 d0	 mov	 DWORD PTR _number_of_destination_edges$11[ebp], eax
$LN26@reconstruc:

; 1062 : 			}
; 1063 : 		}

  00445	e9 3c fd ff ff	 jmp	 $LN7@reconstruc
$LN8@reconstruc:

; 1064 : 
; 1065 : 		//
; 1066 : 		// Clear up the ending of the primitive
; 1067 : 		//
; 1068 : 
; 1069 : 		if ( last_edge_clipped )

  0044a	83 7d d8 00	 cmp	 DWORD PTR _last_edge_clipped$13[ebp], 0
  0044e	0f 84 0b 01 00
	00		 je	 $LN34@reconstruc

; 1070 : 		{
; 1071 : 
; 1072 : 			last_edge_clipped = FALSE;

  00454	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _last_edge_clipped$13[ebp], 0

; 1073 : 
; 1074 : 			if ( destination_edges[0].direction == 0 )	{ current_clipping_edges[number_of_clipping_edges].point2_index = current_clipping_edges[ destination_edges[0].edge_index ].point1_index; }

  0045b	b8 04 00 00 00	 mov	 eax, 4
  00460	6b c8 00	 imul	 ecx, eax, 0
  00463	8b 55 c0	 mov	 edx, DWORD PTR _destination_edges$7[ebp]
  00466	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  0046a	85 c0		 test	 eax, eax
  0046c	75 2c		 jne	 SHORT $LN35@reconstruc
  0046e	b8 04 00 00 00	 mov	 eax, 4
  00473	6b c8 00	 imul	 ecx, eax, 0
  00476	8b 55 c0	 mov	 edx, DWORD PTR _destination_edges$7[ebp]
  00479	0f b6 44 0a 01	 movzx	 eax, BYTE PTR [edx+ecx+1]
  0047e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  00484	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0048a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00490	8a 44 c6 06	 mov	 al, BYTE PTR [esi+eax*8+6]
  00494	88 44 ca 07	 mov	 BYTE PTR [edx+ecx*8+7], al
  00498	eb 2a		 jmp	 SHORT $LN36@reconstruc
$LN35@reconstruc:

; 1075 : 			else														{ current_clipping_edges[number_of_clipping_edges].point2_index = current_clipping_edges[ destination_edges[0].edge_index ].point2_index; }

  0049a	b8 04 00 00 00	 mov	 eax, 4
  0049f	6b c8 00	 imul	 ecx, eax, 0
  004a2	8b 55 c0	 mov	 edx, DWORD PTR _destination_edges$7[ebp]
  004a5	0f b6 44 0a 01	 movzx	 eax, BYTE PTR [edx+ecx+1]
  004aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  004b0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  004b6	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  004bc	8a 44 c6 07	 mov	 al, BYTE PTR [esi+eax*8+7]
  004c0	88 44 ca 07	 mov	 BYTE PTR [edx+ecx*8+7], al
$LN36@reconstruc:

; 1076 : 
; 1077 : 			current_clipping_edges[number_of_clipping_edges].clip_status = CLIP_STATUS_UNCLIPPED;

  004c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  004c9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  004cf	c7 04 c1 01 00
	00 00		 mov	 DWORD PTR [ecx+eax*8], 1

; 1078 : 			current_clipping_edges[number_of_clipping_edges].point1_index = last_clipped_vertex_index;

  004d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  004db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  004e1	8a 55 bb	 mov	 dl, BYTE PTR _last_clipped_vertex_index$5[ebp]
  004e4	88 54 c1 06	 mov	 BYTE PTR [ecx+eax*8+6], dl

; 1079 : 			current_clipping_edges[number_of_clipping_edges].outcode = ( clipping_vertices[ current_clipping_edges[number_of_clipping_edges].point1_index ].outcode |

  004e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  004ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  004f3	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  004f8	c1 e2 06	 shl	 edx, 6
  004fb	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00502	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  00508	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0050e	0f b6 4c ca 07	 movzx	 ecx, BYTE PTR [edx+ecx*8+7]
  00513	c1 e1 06	 shl	 ecx, 6
  00516	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  0051d	0b c2		 or	 eax, edx
  0051f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  00525	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0052b	88 44 ca 04	 mov	 BYTE PTR [edx+ecx*8+4], al

; 1080 : 																					clipping_vertices[ current_clipping_edges[number_of_clipping_edges].point2_index ].outcode );
; 1081 : 
; 1082 : 			destination_edges[number_of_destination_edges].direction = 0;

  0052f	8b 45 d0	 mov	 eax, DWORD PTR _number_of_destination_edges$11[ebp]
  00532	8b 4d c0	 mov	 ecx, DWORD PTR _destination_edges$7[ebp]
  00535	c6 04 81 00	 mov	 BYTE PTR [ecx+eax*4], 0

; 1083 : 			destination_edges[number_of_destination_edges].edge_index = number_of_clipping_edges;

  00539	8b 45 d0	 mov	 eax, DWORD PTR _number_of_destination_edges$11[ebp]
  0053c	8b 4d c0	 mov	 ecx, DWORD PTR _destination_edges$7[ebp]
  0053f	8a 15 00 00 00
	00		 mov	 dl, BYTE PTR ?number_of_clipping_edges@@3HA
  00545	88 54 81 01	 mov	 BYTE PTR [ecx+eax*4+1], dl

; 1084 : 
; 1085 : 			number_of_clipping_edges++;

  00549	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  0054e	83 c0 01	 add	 eax, 1
  00551	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_clipping_edges@@3HA, eax ; number_of_clipping_edges

; 1086 : 			number_of_destination_edges++;

  00556	8b 45 d0	 mov	 eax, DWORD PTR _number_of_destination_edges$11[ebp]
  00559	83 c0 01	 add	 eax, 1
  0055c	89 45 d0	 mov	 DWORD PTR _number_of_destination_edges$11[ebp], eax
$LN34@reconstruc:

; 1087 : 		}
; 1088 : 
; 1089 : 		if ( !primitive_outcode )

  0055f	0f b6 45 df	 movzx	 eax, BYTE PTR _primitive_outcode$14[ebp]
  00563	85 c0		 test	 eax, eax
  00565	75 1d		 jne	 SHORT $LN37@reconstruc

; 1090 : 		{
; 1091 : 
; 1092 : 			destination_primitive->number_of_edges = number_of_destination_edges;

  00567	8b 45 c8	 mov	 eax, DWORD PTR _destination_primitive$9[ebp]
  0056a	8b 4d d0	 mov	 ecx, DWORD PTR _number_of_destination_edges$11[ebp]
  0056d	89 08		 mov	 DWORD PTR [eax], ecx

; 1093 : 
; 1094 : 			destination_primitive_index++;

  0056f	8b 45 f4	 mov	 eax, DWORD PTR _destination_primitive_index$[ebp]
  00572	83 c0 01	 add	 eax, 1
  00575	89 45 f4	 mov	 DWORD PTR _destination_primitive_index$[ebp], eax

; 1095 : 
; 1096 : 			destination_clipping_edge_references += number_of_destination_edges;

  00578	8b 45 d0	 mov	 eax, DWORD PTR _number_of_destination_edges$11[ebp]
  0057b	8b 4d e0	 mov	 ecx, DWORD PTR _destination_clipping_edge_references$[ebp]
  0057e	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00581	89 55 e0	 mov	 DWORD PTR _destination_clipping_edge_references$[ebp], edx
$LN37@reconstruc:

; 1097 : 		}
; 1098 : 	}

  00584	e9 d9 fa ff ff	 jmp	 $LN2@reconstruc
$LN3@reconstruc:

; 1099 : 
; 1100 : 	current_clipping_primitives = new_clipping_primitives;

  00589	8b 45 e8	 mov	 eax, DWORD PTR _new_clipping_primitives$[ebp]
  0058c	a3 00 00 00 00	 mov	 DWORD PTR ?current_clipping_primitives@@3PAUCLIP_PRIMITIVE@@A, eax ; current_clipping_primitives

; 1101 : 
; 1102 : 	current_clipping_edge_references = new_clipping_edge_references;

  00591	8b 45 e4	 mov	 eax, DWORD PTR _new_clipping_edge_references$[ebp]
  00594	a3 00 00 00 00	 mov	 DWORD PTR ?current_clipping_edge_references@@3PAUCLIP_PRIMITIVE_EDGE_REFERENCE@@A, eax ; current_clipping_edge_references

; 1103 : 
; 1104 : 	number_of_clipping_primitives = destination_primitive_index;

  00599	8b 45 f4	 mov	 eax, DWORD PTR _destination_primitive_index$[ebp]
  0059c	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_clipping_primitives@@3HA, eax ; number_of_clipping_primitives

; 1105 : 
; 1106 : 	//
; 1107 : 	// Tag all edges as rejected
; 1108 : 	//
; 1109 : 
; 1110 : //	for ( edge_count = ( number_of_clipping_edges - 1 ); edge_count >= 0; edge_count-- )
; 1111 : //	{
; 1112 : //
; 1113 : //		current_clipping_edges[edge_count].clip_status = CLIP_STATUS_REJECTED;
; 1114 : //	}
; 1115 : 
; 1116 : 	//
; 1117 : 	// Now go through all the primitives, tagging their edges as unclipped
; 1118 : 	//
; 1119 : 
; 1120 : 	for ( source_primitive_index = 0; source_primitive_index < number_of_clipping_primitives; source_primitive_index++ )

  005a1	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _source_primitive_index$[ebp], 0
  005a8	eb 09		 jmp	 SHORT $LN12@reconstruc
$LN10@reconstruc:
  005aa	8b 45 f0	 mov	 eax, DWORD PTR _source_primitive_index$[ebp]
  005ad	83 c0 01	 add	 eax, 1
  005b0	89 45 f0	 mov	 DWORD PTR _source_primitive_index$[ebp], eax
$LN12@reconstruc:
  005b3	8b 45 f0	 mov	 eax, DWORD PTR _source_primitive_index$[ebp]
  005b6	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_clipping_primitives@@3HA ; number_of_clipping_primitives
  005bc	7d 55		 jge	 SHORT $LN1@reconstruc

; 1121 : 	{
; 1122 : 
; 1123 : 		int
; 1124 : 			source_edge_index,
; 1125 : 			number_of_source_edges;
; 1126 : 
; 1127 : 		clip_primitive
; 1128 : 			*source_primitive;
; 1129 : 
; 1130 : 		clip_primitive_edge_reference
; 1131 : 			*source_edges;
; 1132 : 
; 1133 : 		source_primitive = &current_clipping_primitives[source_primitive_index];

  005be	8b 45 f0	 mov	 eax, DWORD PTR _source_primitive_index$[ebp]
  005c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_primitives@@3PAUCLIP_PRIMITIVE@@A ; current_clipping_primitives
  005c7	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  005ca	89 55 ac	 mov	 DWORD PTR _source_primitive$2[ebp], edx

; 1134 : 
; 1135 : 		source_edges = source_primitive->edges;

  005cd	8b 45 ac	 mov	 eax, DWORD PTR _source_primitive$2[ebp]
  005d0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  005d3	89 4d a8	 mov	 DWORD PTR _source_edges$1[ebp], ecx

; 1136 : 
; 1137 : 		number_of_source_edges = source_primitive->number_of_edges;

  005d6	8b 45 ac	 mov	 eax, DWORD PTR _source_primitive$2[ebp]
  005d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  005db	89 4d b0	 mov	 DWORD PTR _number_of_source_edges$3[ebp], ecx

; 1138 : 
; 1139 : 		for ( source_edge_index = 0; source_edge_index < number_of_source_edges; source_edge_index++ )

  005de	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _source_edge_index$4[ebp], 0
  005e5	eb 09		 jmp	 SHORT $LN15@reconstruc
$LN13@reconstruc:
  005e7	8b 45 b4	 mov	 eax, DWORD PTR _source_edge_index$4[ebp]
  005ea	83 c0 01	 add	 eax, 1
  005ed	89 45 b4	 mov	 DWORD PTR _source_edge_index$4[ebp], eax
$LN15@reconstruc:
  005f0	8b 45 b4	 mov	 eax, DWORD PTR _source_edge_index$4[ebp]
  005f3	3b 45 b0	 cmp	 eax, DWORD PTR _number_of_source_edges$3[ebp]
  005f6	7d 19		 jge	 SHORT $LN14@reconstruc

; 1140 : 		{
; 1141 : 
; 1142 : 			current_clipping_edges[ source_edges[source_edge_index].edge_index ].clip_status = CLIP_STATUS_UNCLIPPED;

  005f8	8b 45 b4	 mov	 eax, DWORD PTR _source_edge_index$4[ebp]
  005fb	8b 4d a8	 mov	 ecx, DWORD PTR _source_edges$1[ebp]
  005fe	0f b6 54 81 01	 movzx	 edx, BYTE PTR [ecx+eax*4+1]
  00603	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00608	c7 04 d0 01 00
	00 00		 mov	 DWORD PTR [eax+edx*8], 1

; 1143 : 		}

  0060f	eb d6		 jmp	 SHORT $LN13@reconstruc
$LN14@reconstruc:

; 1144 : 	}

  00611	eb 97		 jmp	 SHORT $LN10@reconstruc
$LN1@reconstruc:

; 1145 : }

  00613	5f		 pop	 edi
  00614	5e		 pop	 esi
  00615	5b		 pop	 ebx
  00616	8b e5		 mov	 esp, ebp
  00618	5d		 pop	 ebp
  00619	c3		 ret	 0
?reconstruct_clip_edges@@YGXXZ ENDP			; reconstruct_clip_edges
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfclip.c
;	COMDAT ?clip_3d_primitives@@YGXH@Z
_TEXT	SEGMENT
_edge$1 = -24						; size = 4
_vertex_count$2 = -20					; size = 4
_clipped_vertex_index$ = -16				; size = 4
_edge_count$ = -12					; size = 4
_vertex_index_index$ = -8				; size = 4
_primitive_count$ = -4					; size = 4
_whole_outcode$ = 8					; size = 4
?clip_3d_primitives@@YGXH@Z PROC			; clip_3d_primitives, COMDAT

; 357  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 358  : 
; 359  : 	int
; 360  : //		destination_vertex_index,
; 361  : 		primitive_count,
; 362  : //		vertex_count,
; 363  : 		vertex_index_index,
; 364  : 		edge_count,
; 365  : 		clipped_vertex_index;
; 366  : 
; 367  : 	//
; 368  : 	// Clip the 3d parts of the primitives first of all
; 369  : 	//
; 370  : 
; 371  : 	if ( whole_outcode & ( CLIP_HITHER | CLIP_YONDER ) )

  00009	8b 45 08	 mov	 eax, DWORD PTR _whole_outcode$[ebp]
  0000c	83 e0 30	 and	 eax, 48			; 00000030H
  0000f	0f 84 25 05 00
	00		 je	 $LN9@clip_3d_pr

; 372  : 	{
; 373  : 
; 374  : 		if ( whole_outcode & CLIP_HITHER )

  00015	8b 45 08	 mov	 eax, DWORD PTR _whole_outcode$[ebp]
  00018	83 e0 20	 and	 eax, 32			; 00000020H
  0001b	0f 84 62 02 00
	00		 je	 $LN42@clip_3d_pr

; 375  : 		{
; 376  : 
; 377  : 			for ( edge_count = 0; edge_count < number_of_clipping_edges; edge_count++ )

  00021	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _edge_count$[ebp], 0
  00028	eb 09		 jmp	 SHORT $LN4@clip_3d_pr
$LN2@clip_3d_pr:
  0002a	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  0002d	83 c0 01	 add	 eax, 1
  00030	89 45 f4	 mov	 DWORD PTR _edge_count$[ebp], eax
$LN4@clip_3d_pr:
  00033	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00036	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  0003c	0f 8d 2e 02 00
	00		 jge	 $LN3@clip_3d_pr

; 378  : 			{
; 379  : 
; 380  : 				if ( current_clipping_edges[edge_count].outcode & CLIP_HITHER )

  00042	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00045	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0004b	0f b6 54 c1 04	 movzx	 edx, BYTE PTR [ecx+eax*8+4]
  00050	83 e2 20	 and	 edx, 32			; 00000020H
  00053	0f 84 12 02 00
	00		 je	 $LN39@clip_3d_pr

; 381  : 				{
; 382  : 
; 383  : 					if ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode & CLIP_HITHER )

  00059	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  0005c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00062	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  00067	c1 e2 06	 shl	 edx, 6
  0006a	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00071	83 e0 20	 and	 eax, 32			; 00000020H
  00074	0f 84 1b 01 00
	00		 je	 $LN38@clip_3d_pr

; 384  : 					{
; 385  : 
; 386  : 						if ( clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode & CLIP_HITHER )

  0007a	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  0007d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00083	0f b6 54 c1 07	 movzx	 edx, BYTE PTR [ecx+eax*8+7]
  00088	c1 e2 06	 shl	 edx, 6
  0008b	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00092	83 e0 20	 and	 eax, 32			; 00000020H
  00095	74 23		 je	 SHORT $LN40@clip_3d_pr

; 387  : 						{
; 388  : 
; 389  : 							current_clipping_edges[edge_count].clip_status = CLIP_STATUS_REJECTED;

  00097	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  0009a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  000a0	c7 04 c1 00 00
	00 00		 mov	 DWORD PTR [ecx+eax*8], 0

; 390  : 
; 391  : 							current_clipping_edges[edge_count].outcode = 0;

  000a7	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  000aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  000b0	c6 44 c1 04 00	 mov	 BYTE PTR [ecx+eax*8+4], 0

; 392  : 						}
; 393  : 						else

  000b5	e9 d6 00 00 00	 jmp	 $LN41@clip_3d_pr
$LN40@clip_3d_pr:

; 394  : 						{
; 395  : 
; 396  : 							current_clipping_edges[edge_count].clip_status = CLIP_STATUS_CLIPPED_FIRST_POINT;

  000ba	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  000bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  000c3	c7 04 c1 02 00
	00 00		 mov	 DWORD PTR [ecx+eax*8], 2

; 397  : 
; 398  : 							clipped_vertex_index = generate_hither_clipped_edge ( &clipping_vertices[ current_clipping_edges[edge_count].point1_index],

  000ca	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  000cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  000d3	0f b6 54 c1 07	 movzx	 edx, BYTE PTR [ecx+eax*8+7]
  000d8	c1 e2 06	 shl	 edx, 6
  000db	81 c2 00 00 00
	00		 add	 edx, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  000e1	52		 push	 edx
  000e2	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  000e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  000eb	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  000f0	c1 e2 06	 shl	 edx, 6
  000f3	81 c2 00 00 00
	00		 add	 edx, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  000f9	52		 push	 edx
  000fa	e8 00 00 00 00	 call	 ?generate_hither_clipped_edge@@YGHPAUVERTEX@@0@Z ; generate_hither_clipped_edge
  000ff	89 45 f0	 mov	 DWORD PTR _clipped_vertex_index$[ebp], eax

; 399  : 																									&clipping_vertices[ current_clipping_edges[edge_count].point2_index] );
; 400  : 
; 401  : 							current_clipping_edges[edge_count].point1_index = clipped_vertex_index;

  00102	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00105	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0010b	8a 55 f0	 mov	 dl, BYTE PTR _clipped_vertex_index$[ebp]
  0010e	88 54 c1 06	 mov	 BYTE PTR [ecx+eax*8+6], dl

; 402  : 
; 403  : 							current_clipping_edges[edge_count].outcode = ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode |

  00112	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00115	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0011b	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  00120	c1 e2 06	 shl	 edx, 6
  00123	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  0012a	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  0012d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00133	0f b6 4c ca 07	 movzx	 ecx, BYTE PTR [edx+ecx*8+7]
  00138	c1 e1 06	 shl	 ecx, 6
  0013b	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  00142	0b c2		 or	 eax, edx
  00144	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00147	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0014d	88 44 ca 04	 mov	 BYTE PTR [edx+ecx*8+4], al

; 404  : 																							clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode );
; 405  : 							current_clipping_edges[edge_count].outcode2 = ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode &

  00151	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00154	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0015a	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  0015f	c1 e2 06	 shl	 edx, 6
  00162	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00169	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  0016c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00172	0f b6 4c ca 07	 movzx	 ecx, BYTE PTR [edx+ecx*8+7]
  00177	c1 e1 06	 shl	 ecx, 6
  0017a	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  00181	23 c2		 and	 eax, edx
  00183	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00186	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0018c	88 44 ca 05	 mov	 BYTE PTR [edx+ecx*8+5], al
$LN41@clip_3d_pr:

; 406  : 																							clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode );
; 407  : 						}
; 408  : 					}
; 409  : 					else

  00190	e9 d6 00 00 00	 jmp	 $LN39@clip_3d_pr
$LN38@clip_3d_pr:

; 410  : 					{
; 411  : 
; 412  : 						current_clipping_edges[edge_count].clip_status = CLIP_STATUS_CLIPPED_SECOND_POINT;

  00195	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00198	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0019e	c7 04 c1 03 00
	00 00		 mov	 DWORD PTR [ecx+eax*8], 3

; 413  : 
; 414  : 						clipped_vertex_index = generate_hither_clipped_edge ( &clipping_vertices[ current_clipping_edges[edge_count].point2_index ],

  001a5	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  001a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  001ae	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  001b3	c1 e2 06	 shl	 edx, 6
  001b6	81 c2 00 00 00
	00		 add	 edx, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  001bc	52		 push	 edx
  001bd	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  001c0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  001c6	0f b6 54 c1 07	 movzx	 edx, BYTE PTR [ecx+eax*8+7]
  001cb	c1 e2 06	 shl	 edx, 6
  001ce	81 c2 00 00 00
	00		 add	 edx, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  001d4	52		 push	 edx
  001d5	e8 00 00 00 00	 call	 ?generate_hither_clipped_edge@@YGHPAUVERTEX@@0@Z ; generate_hither_clipped_edge
  001da	89 45 f0	 mov	 DWORD PTR _clipped_vertex_index$[ebp], eax

; 415  : 																								&clipping_vertices[ current_clipping_edges[edge_count].point1_index ] );
; 416  : 
; 417  : 						current_clipping_edges[edge_count].point2_index = clipped_vertex_index;

  001dd	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  001e0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  001e6	8a 55 f0	 mov	 dl, BYTE PTR _clipped_vertex_index$[ebp]
  001e9	88 54 c1 07	 mov	 BYTE PTR [ecx+eax*8+7], dl

; 418  : 
; 419  : 						current_clipping_edges[edge_count].outcode = ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode |

  001ed	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  001f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  001f6	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  001fb	c1 e2 06	 shl	 edx, 6
  001fe	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00205	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00208	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0020e	0f b6 4c ca 07	 movzx	 ecx, BYTE PTR [edx+ecx*8+7]
  00213	c1 e1 06	 shl	 ecx, 6
  00216	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  0021d	0b c2		 or	 eax, edx
  0021f	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00222	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00228	88 44 ca 04	 mov	 BYTE PTR [edx+ecx*8+4], al

; 420  : 																						clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode );
; 421  : 						current_clipping_edges[edge_count].outcode2 = ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode &

  0022c	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  0022f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00235	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  0023a	c1 e2 06	 shl	 edx, 6
  0023d	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00244	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00247	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0024d	0f b6 4c ca 07	 movzx	 ecx, BYTE PTR [edx+ecx*8+7]
  00252	c1 e1 06	 shl	 ecx, 6
  00255	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  0025c	23 c2		 and	 eax, edx
  0025e	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00261	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00267	88 44 ca 05	 mov	 BYTE PTR [edx+ecx*8+5], al
$LN39@clip_3d_pr:

; 422  : 																						clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode );
; 423  : 					}
; 424  : 				}
; 425  : 			}

  0026b	e9 ba fd ff ff	 jmp	 $LN2@clip_3d_pr
$LN3@clip_3d_pr:

; 426  : 
; 427  : 			reconstruct_clip_edges ();

  00270	e8 00 00 00 00	 call	 ?reconstruct_clip_edges@@YGXXZ ; reconstruct_clip_edges

; 428  : 
; 429  : 			if ( number_of_clipping_primitives == 0 )

  00275	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?number_of_clipping_primitives@@3HA, 0 ; number_of_clipping_primitives
  0027c	75 05		 jne	 SHORT $LN42@clip_3d_pr

; 430  : 			{
; 431  : 		
; 432  : 				return;

  0027e	e9 e8 0e 00 00	 jmp	 $LN1@clip_3d_pr
$LN42@clip_3d_pr:

; 433  : 			}
; 434  : 		}
; 435  : 
; 436  : 		if ( whole_outcode & CLIP_YONDER )

  00283	8b 45 08	 mov	 eax, DWORD PTR _whole_outcode$[ebp]
  00286	83 e0 10	 and	 eax, 16			; 00000010H
  00289	0f 84 62 02 00
	00		 je	 $LN49@clip_3d_pr

; 437  : 		{
; 438  : 
; 439  : 			for ( edge_count = 0; edge_count < number_of_clipping_edges; edge_count++ )

  0028f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _edge_count$[ebp], 0
  00296	eb 09		 jmp	 SHORT $LN7@clip_3d_pr
$LN5@clip_3d_pr:
  00298	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  0029b	83 c0 01	 add	 eax, 1
  0029e	89 45 f4	 mov	 DWORD PTR _edge_count$[ebp], eax
$LN7@clip_3d_pr:
  002a1	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  002a4	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  002aa	0f 8d 2e 02 00
	00		 jge	 $LN6@clip_3d_pr

; 440  : 			{
; 441  : 
; 442  : 				if ( current_clipping_edges[edge_count].outcode & CLIP_YONDER )

  002b0	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  002b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  002b9	0f b6 54 c1 04	 movzx	 edx, BYTE PTR [ecx+eax*8+4]
  002be	83 e2 10	 and	 edx, 16			; 00000010H
  002c1	0f 84 12 02 00
	00		 je	 $LN46@clip_3d_pr

; 443  : 				{
; 444  : 
; 445  : 					if ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode & CLIP_YONDER )

  002c7	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  002ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  002d0	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  002d5	c1 e2 06	 shl	 edx, 6
  002d8	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  002df	83 e0 10	 and	 eax, 16			; 00000010H
  002e2	0f 84 1b 01 00
	00		 je	 $LN45@clip_3d_pr

; 446  : 					{
; 447  : 
; 448  : 						if ( clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode & CLIP_YONDER )

  002e8	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  002eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  002f1	0f b6 54 c1 07	 movzx	 edx, BYTE PTR [ecx+eax*8+7]
  002f6	c1 e2 06	 shl	 edx, 6
  002f9	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00300	83 e0 10	 and	 eax, 16			; 00000010H
  00303	74 23		 je	 SHORT $LN47@clip_3d_pr

; 449  : 						{
; 450  : 
; 451  : 							current_clipping_edges[edge_count].clip_status = CLIP_STATUS_REJECTED;

  00305	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00308	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0030e	c7 04 c1 00 00
	00 00		 mov	 DWORD PTR [ecx+eax*8], 0

; 452  : 
; 453  : 							current_clipping_edges[edge_count].outcode = 0;

  00315	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00318	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0031e	c6 44 c1 04 00	 mov	 BYTE PTR [ecx+eax*8+4], 0

; 454  : 						}
; 455  : 						else

  00323	e9 d6 00 00 00	 jmp	 $LN48@clip_3d_pr
$LN47@clip_3d_pr:

; 456  : 						{
; 457  : 
; 458  : 							current_clipping_edges[edge_count].clip_status = CLIP_STATUS_CLIPPED_FIRST_POINT;

  00328	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  0032b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00331	c7 04 c1 02 00
	00 00		 mov	 DWORD PTR [ecx+eax*8], 2

; 459  : 
; 460  : 							clipped_vertex_index = generate_yonder_clipped_edge ( &clipping_vertices[ current_clipping_edges[edge_count].point1_index ],

  00338	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  0033b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00341	0f b6 54 c1 07	 movzx	 edx, BYTE PTR [ecx+eax*8+7]
  00346	c1 e2 06	 shl	 edx, 6
  00349	81 c2 00 00 00
	00		 add	 edx, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  0034f	52		 push	 edx
  00350	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00353	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00359	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  0035e	c1 e2 06	 shl	 edx, 6
  00361	81 c2 00 00 00
	00		 add	 edx, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  00367	52		 push	 edx
  00368	e8 00 00 00 00	 call	 ?generate_yonder_clipped_edge@@YGHPAUVERTEX@@0@Z ; generate_yonder_clipped_edge
  0036d	89 45 f0	 mov	 DWORD PTR _clipped_vertex_index$[ebp], eax

; 461  : 																									&clipping_vertices[ current_clipping_edges[edge_count].point2_index ] );
; 462  : 
; 463  : 							current_clipping_edges[edge_count].point1_index = clipped_vertex_index;

  00370	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00373	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00379	8a 55 f0	 mov	 dl, BYTE PTR _clipped_vertex_index$[ebp]
  0037c	88 54 c1 06	 mov	 BYTE PTR [ecx+eax*8+6], dl

; 464  : 
; 465  : 							current_clipping_edges[edge_count].outcode = ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode |

  00380	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00383	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00389	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  0038e	c1 e2 06	 shl	 edx, 6
  00391	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00398	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  0039b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  003a1	0f b6 4c ca 07	 movzx	 ecx, BYTE PTR [edx+ecx*8+7]
  003a6	c1 e1 06	 shl	 ecx, 6
  003a9	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  003b0	0b c2		 or	 eax, edx
  003b2	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  003b5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  003bb	88 44 ca 04	 mov	 BYTE PTR [edx+ecx*8+4], al

; 466  : 																							clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode );
; 467  : 							current_clipping_edges[edge_count].outcode2 = ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode &

  003bf	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  003c2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  003c8	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  003cd	c1 e2 06	 shl	 edx, 6
  003d0	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  003d7	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  003da	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  003e0	0f b6 4c ca 07	 movzx	 ecx, BYTE PTR [edx+ecx*8+7]
  003e5	c1 e1 06	 shl	 ecx, 6
  003e8	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  003ef	23 c2		 and	 eax, edx
  003f1	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  003f4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  003fa	88 44 ca 05	 mov	 BYTE PTR [edx+ecx*8+5], al
$LN48@clip_3d_pr:

; 468  : 																							clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode );
; 469  : 						}
; 470  : 					}
; 471  : 					else

  003fe	e9 d6 00 00 00	 jmp	 $LN46@clip_3d_pr
$LN45@clip_3d_pr:

; 472  : 					{
; 473  : 
; 474  : 						current_clipping_edges[edge_count].clip_status = CLIP_STATUS_CLIPPED_SECOND_POINT;

  00403	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00406	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0040c	c7 04 c1 03 00
	00 00		 mov	 DWORD PTR [ecx+eax*8], 3

; 475  : 
; 476  : 						clipped_vertex_index = generate_yonder_clipped_edge ( &clipping_vertices[ current_clipping_edges[edge_count].point2_index ],

  00413	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00416	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0041c	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  00421	c1 e2 06	 shl	 edx, 6
  00424	81 c2 00 00 00
	00		 add	 edx, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  0042a	52		 push	 edx
  0042b	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  0042e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00434	0f b6 54 c1 07	 movzx	 edx, BYTE PTR [ecx+eax*8+7]
  00439	c1 e2 06	 shl	 edx, 6
  0043c	81 c2 00 00 00
	00		 add	 edx, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  00442	52		 push	 edx
  00443	e8 00 00 00 00	 call	 ?generate_yonder_clipped_edge@@YGHPAUVERTEX@@0@Z ; generate_yonder_clipped_edge
  00448	89 45 f0	 mov	 DWORD PTR _clipped_vertex_index$[ebp], eax

; 477  : 																								&clipping_vertices[ current_clipping_edges[edge_count].point1_index ] );
; 478  : 
; 479  : 						current_clipping_edges[edge_count].point2_index = clipped_vertex_index;

  0044b	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  0044e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00454	8a 55 f0	 mov	 dl, BYTE PTR _clipped_vertex_index$[ebp]
  00457	88 54 c1 07	 mov	 BYTE PTR [ecx+eax*8+7], dl

; 480  : 
; 481  : 						current_clipping_edges[edge_count].outcode = ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode |

  0045b	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  0045e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00464	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  00469	c1 e2 06	 shl	 edx, 6
  0046c	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00473	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00476	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0047c	0f b6 4c ca 07	 movzx	 ecx, BYTE PTR [edx+ecx*8+7]
  00481	c1 e1 06	 shl	 ecx, 6
  00484	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  0048b	0b c2		 or	 eax, edx
  0048d	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00490	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00496	88 44 ca 04	 mov	 BYTE PTR [edx+ecx*8+4], al

; 482  : 																						clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode );
; 483  : 						current_clipping_edges[edge_count].outcode2 = ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode &

  0049a	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  0049d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  004a3	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  004a8	c1 e2 06	 shl	 edx, 6
  004ab	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  004b2	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  004b5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  004bb	0f b6 4c ca 07	 movzx	 ecx, BYTE PTR [edx+ecx*8+7]
  004c0	c1 e1 06	 shl	 ecx, 6
  004c3	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  004ca	23 c2		 and	 eax, edx
  004cc	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  004cf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  004d5	88 44 ca 05	 mov	 BYTE PTR [edx+ecx*8+5], al
$LN46@clip_3d_pr:

; 484  : 																						clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode );
; 485  : 					}
; 486  : 				}
; 487  : 			}

  004d9	e9 ba fd ff ff	 jmp	 $LN5@clip_3d_pr
$LN6@clip_3d_pr:

; 488  : 
; 489  : 			reconstruct_clip_edges ();

  004de	e8 00 00 00 00	 call	 ?reconstruct_clip_edges@@YGXXZ ; reconstruct_clip_edges

; 490  : 	
; 491  : 			if ( number_of_clipping_primitives == 0 )

  004e3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?number_of_clipping_primitives@@3HA, 0 ; number_of_clipping_primitives
  004ea	75 05		 jne	 SHORT $LN49@clip_3d_pr

; 492  : 			{
; 493  : 		
; 494  : 				return;

  004ec	e9 7a 0c 00 00	 jmp	 $LN1@clip_3d_pr
$LN49@clip_3d_pr:

; 495  : 			}
; 496  : 		}
; 497  : 
; 498  : 		//
; 499  : 		// Now modify the whole outcode
; 500  : 		//
; 501  : 
; 502  : 		whole_outcode = 0;

  004f1	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _whole_outcode$[ebp], 0

; 503  : 
; 504  : 		for ( edge_count = 0; edge_count < number_of_clipping_edges; edge_count++ )

  004f8	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _edge_count$[ebp], 0
  004ff	eb 09		 jmp	 SHORT $LN10@clip_3d_pr
$LN8@clip_3d_pr:
  00501	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00504	83 c0 01	 add	 eax, 1
  00507	89 45 f4	 mov	 DWORD PTR _edge_count$[ebp], eax
$LN10@clip_3d_pr:
  0050a	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  0050d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  00513	7d 25		 jge	 SHORT $LN9@clip_3d_pr

; 505  : 		{
; 506  : 
; 507  : 			if ( current_clipping_edges[edge_count].clip_status != CLIP_STATUS_REJECTED )

  00515	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00518	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0051e	83 3c c1 00	 cmp	 DWORD PTR [ecx+eax*8], 0
  00522	74 14		 je	 SHORT $LN50@clip_3d_pr

; 508  : 			{
; 509  : 
; 510  : 				whole_outcode |= current_clipping_edges[edge_count].outcode;

  00524	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00527	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0052d	0f b6 54 c1 04	 movzx	 edx, BYTE PTR [ecx+eax*8+4]
  00532	0b 55 08	 or	 edx, DWORD PTR _whole_outcode$[ebp]
  00535	89 55 08	 mov	 DWORD PTR _whole_outcode$[ebp], edx
$LN50@clip_3d_pr:

; 511  : 			}
; 512  : 		}

  00538	eb c7		 jmp	 SHORT $LN8@clip_3d_pr
$LN9@clip_3d_pr:

; 513  : 	}
; 514  : 
; 515  : 	//
; 516  : 	// Now clip the 2d parts.
; 517  : 	//
; 518  : 
; 519  : 	if ( whole_outcode & ( CLIP_LEFT | CLIP_RIGHT | CLIP_TOP | CLIP_BOTTOM ) )

  0053a	8b 45 08	 mov	 eax, DWORD PTR _whole_outcode$[ebp]
  0053d	83 e0 0f	 and	 eax, 15			; 0000000fH
  00540	0f 84 54 0b 00
	00		 je	 $LN27@clip_3d_pr

; 520  : 	{
; 521  : 
; 522  : 		int
; 523  : 			vertex_count;
; 524  : 
; 525  : 		//
; 526  : 		// Apply persepctive correction to the textures
; 527  : 		//
; 528  : 
; 529  : 		for ( vertex_count = 0; vertex_count < number_of_clipping_vertices; vertex_count++ )

  00546	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _vertex_count$2[ebp], 0
  0054d	eb 09		 jmp	 SHORT $LN13@clip_3d_pr
$LN11@clip_3d_pr:
  0054f	8b 45 ec	 mov	 eax, DWORD PTR _vertex_count$2[ebp]
  00552	83 c0 01	 add	 eax, 1
  00555	89 45 ec	 mov	 DWORD PTR _vertex_count$2[ebp], eax
$LN13@clip_3d_pr:
  00558	8b 45 ec	 mov	 eax, DWORD PTR _vertex_count$2[ebp]
  0055b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_clipping_vertices@@3HA ; number_of_clipping_vertices
  00561	0f 8d ad 00 00
	00		 jge	 $LN12@clip_3d_pr

; 530  : 		{
; 531  : 
; 532  : 			clipping_vertices[vertex_count].u *= clipping_vertices[vertex_count].q;

  00567	8b 45 ec	 mov	 eax, DWORD PTR _vertex_count$2[ebp]
  0056a	c1 e0 06	 shl	 eax, 6
  0056d	8b 4d ec	 mov	 ecx, DWORD PTR _vertex_count$2[ebp]
  00570	c1 e1 06	 shl	 ecx, 6
  00573	f3 0f 10 80 18
	00 00 00	 movss	 xmm0, DWORD PTR ?clipping_vertices@@3PAUVERTEX@@A[eax+24]
  0057b	f3 0f 59 81 0c
	00 00 00	 mulss	 xmm0, DWORD PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+12]
  00583	8b 55 ec	 mov	 edx, DWORD PTR _vertex_count$2[ebp]
  00586	c1 e2 06	 shl	 edx, 6
  00589	f3 0f 11 82 18
	00 00 00	 movss	 DWORD PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+24], xmm0

; 533  : 			clipping_vertices[vertex_count].u2 *= clipping_vertices[vertex_count].q;

  00591	8b 45 ec	 mov	 eax, DWORD PTR _vertex_count$2[ebp]
  00594	c1 e0 06	 shl	 eax, 6
  00597	8b 4d ec	 mov	 ecx, DWORD PTR _vertex_count$2[ebp]
  0059a	c1 e1 06	 shl	 ecx, 6
  0059d	f3 0f 10 80 20
	00 00 00	 movss	 xmm0, DWORD PTR ?clipping_vertices@@3PAUVERTEX@@A[eax+32]
  005a5	f3 0f 59 81 0c
	00 00 00	 mulss	 xmm0, DWORD PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+12]
  005ad	8b 55 ec	 mov	 edx, DWORD PTR _vertex_count$2[ebp]
  005b0	c1 e2 06	 shl	 edx, 6
  005b3	f3 0f 11 82 20
	00 00 00	 movss	 DWORD PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+32], xmm0

; 534  : 			clipping_vertices[vertex_count].v *= clipping_vertices[vertex_count].q;

  005bb	8b 45 ec	 mov	 eax, DWORD PTR _vertex_count$2[ebp]
  005be	c1 e0 06	 shl	 eax, 6
  005c1	8b 4d ec	 mov	 ecx, DWORD PTR _vertex_count$2[ebp]
  005c4	c1 e1 06	 shl	 ecx, 6
  005c7	f3 0f 10 80 1c
	00 00 00	 movss	 xmm0, DWORD PTR ?clipping_vertices@@3PAUVERTEX@@A[eax+28]
  005cf	f3 0f 59 81 0c
	00 00 00	 mulss	 xmm0, DWORD PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+12]
  005d7	8b 55 ec	 mov	 edx, DWORD PTR _vertex_count$2[ebp]
  005da	c1 e2 06	 shl	 edx, 6
  005dd	f3 0f 11 82 1c
	00 00 00	 movss	 DWORD PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+28], xmm0

; 535  : 			clipping_vertices[vertex_count].v2 *= clipping_vertices[vertex_count].q;

  005e5	8b 45 ec	 mov	 eax, DWORD PTR _vertex_count$2[ebp]
  005e8	c1 e0 06	 shl	 eax, 6
  005eb	8b 4d ec	 mov	 ecx, DWORD PTR _vertex_count$2[ebp]
  005ee	c1 e1 06	 shl	 ecx, 6
  005f1	f3 0f 10 80 24
	00 00 00	 movss	 xmm0, DWORD PTR ?clipping_vertices@@3PAUVERTEX@@A[eax+36]
  005f9	f3 0f 59 81 0c
	00 00 00	 mulss	 xmm0, DWORD PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+12]
  00601	8b 55 ec	 mov	 edx, DWORD PTR _vertex_count$2[ebp]
  00604	c1 e2 06	 shl	 edx, 6
  00607	f3 0f 11 82 24
	00 00 00	 movss	 DWORD PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+36], xmm0

; 536  : 		}

  0060f	e9 3b ff ff ff	 jmp	 $LN11@clip_3d_pr
$LN12@clip_3d_pr:

; 537  : 
; 538  : 		if ( whole_outcode & CLIP_LEFT )

  00614	8b 45 08	 mov	 eax, DWORD PTR _whole_outcode$[ebp]
  00617	83 e0 01	 and	 eax, 1
  0061a	0f 84 62 02 00
	00		 je	 $LN58@clip_3d_pr

; 539  : 		{
; 540  : 
; 541  : 			for ( edge_count = 0; edge_count < number_of_clipping_edges; edge_count++ )

  00620	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _edge_count$[ebp], 0
  00627	eb 09		 jmp	 SHORT $LN16@clip_3d_pr
$LN14@clip_3d_pr:
  00629	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  0062c	83 c0 01	 add	 eax, 1
  0062f	89 45 f4	 mov	 DWORD PTR _edge_count$[ebp], eax
$LN16@clip_3d_pr:
  00632	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00635	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  0063b	0f 8d 2e 02 00
	00		 jge	 $LN15@clip_3d_pr

; 542  : 			{
; 543  : 
; 544  : 				if ( current_clipping_edges[edge_count].outcode & CLIP_LEFT )

  00641	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00644	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0064a	0f b6 54 c1 04	 movzx	 edx, BYTE PTR [ecx+eax*8+4]
  0064f	83 e2 01	 and	 edx, 1
  00652	0f 84 12 02 00
	00		 je	 $LN55@clip_3d_pr

; 545  : 				{
; 546  : 
; 547  : 					if ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode & CLIP_LEFT )

  00658	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  0065b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00661	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  00666	c1 e2 06	 shl	 edx, 6
  00669	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00670	83 e0 01	 and	 eax, 1
  00673	0f 84 1b 01 00
	00		 je	 $LN54@clip_3d_pr

; 548  : 					{
; 549  : 
; 550  : 						if ( clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode & CLIP_LEFT )

  00679	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  0067c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00682	0f b6 54 c1 07	 movzx	 edx, BYTE PTR [ecx+eax*8+7]
  00687	c1 e2 06	 shl	 edx, 6
  0068a	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00691	83 e0 01	 and	 eax, 1
  00694	74 23		 je	 SHORT $LN56@clip_3d_pr

; 551  : 						{
; 552  : 
; 553  : 							current_clipping_edges[edge_count].clip_status = CLIP_STATUS_REJECTED;

  00696	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00699	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0069f	c7 04 c1 00 00
	00 00		 mov	 DWORD PTR [ecx+eax*8], 0

; 554  : 
; 555  : 							current_clipping_edges[edge_count].outcode = 0;

  006a6	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  006a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  006af	c6 44 c1 04 00	 mov	 BYTE PTR [ecx+eax*8+4], 0

; 556  : 						}
; 557  : 						else

  006b4	e9 d6 00 00 00	 jmp	 $LN57@clip_3d_pr
$LN56@clip_3d_pr:

; 558  : 						{
; 559  : 
; 560  : 							current_clipping_edges[edge_count].clip_status = CLIP_STATUS_CLIPPED_FIRST_POINT;

  006b9	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  006bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  006c2	c7 04 c1 02 00
	00 00		 mov	 DWORD PTR [ecx+eax*8], 2

; 561  : 
; 562  : 							clipped_vertex_index = generate_xmin_clipped_edge ( &clipping_vertices[ current_clipping_edges[edge_count].point1_index ],

  006c9	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  006cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  006d2	0f b6 54 c1 07	 movzx	 edx, BYTE PTR [ecx+eax*8+7]
  006d7	c1 e2 06	 shl	 edx, 6
  006da	81 c2 00 00 00
	00		 add	 edx, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  006e0	52		 push	 edx
  006e1	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  006e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  006ea	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  006ef	c1 e2 06	 shl	 edx, 6
  006f2	81 c2 00 00 00
	00		 add	 edx, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  006f8	52		 push	 edx
  006f9	e8 00 00 00 00	 call	 ?generate_xmin_clipped_edge@@YGHPAUVERTEX@@0@Z ; generate_xmin_clipped_edge
  006fe	89 45 f0	 mov	 DWORD PTR _clipped_vertex_index$[ebp], eax

; 563  : 																								 &clipping_vertices[ current_clipping_edges[edge_count].point2_index ] );
; 564  : 
; 565  : 							current_clipping_edges[edge_count].point1_index = clipped_vertex_index;

  00701	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00704	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0070a	8a 55 f0	 mov	 dl, BYTE PTR _clipped_vertex_index$[ebp]
  0070d	88 54 c1 06	 mov	 BYTE PTR [ecx+eax*8+6], dl

; 566  : 
; 567  : 							current_clipping_edges[edge_count].outcode = ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode |

  00711	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00714	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0071a	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  0071f	c1 e2 06	 shl	 edx, 6
  00722	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00729	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  0072c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00732	0f b6 4c ca 07	 movzx	 ecx, BYTE PTR [edx+ecx*8+7]
  00737	c1 e1 06	 shl	 ecx, 6
  0073a	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  00741	0b c2		 or	 eax, edx
  00743	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00746	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0074c	88 44 ca 04	 mov	 BYTE PTR [edx+ecx*8+4], al

; 568  : 																							clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode );
; 569  : 							current_clipping_edges[edge_count].outcode2 = ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode &

  00750	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00753	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00759	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  0075e	c1 e2 06	 shl	 edx, 6
  00761	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00768	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  0076b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00771	0f b6 4c ca 07	 movzx	 ecx, BYTE PTR [edx+ecx*8+7]
  00776	c1 e1 06	 shl	 ecx, 6
  00779	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  00780	23 c2		 and	 eax, edx
  00782	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00785	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0078b	88 44 ca 05	 mov	 BYTE PTR [edx+ecx*8+5], al
$LN57@clip_3d_pr:

; 570  : 																							clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode );
; 571  : 						}
; 572  : 					}
; 573  : 					else

  0078f	e9 d6 00 00 00	 jmp	 $LN55@clip_3d_pr
$LN54@clip_3d_pr:

; 574  : 					{
; 575  : 
; 576  : 						current_clipping_edges[edge_count].clip_status = CLIP_STATUS_CLIPPED_SECOND_POINT;

  00794	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00797	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0079d	c7 04 c1 03 00
	00 00		 mov	 DWORD PTR [ecx+eax*8], 3

; 577  : 
; 578  : 						clipped_vertex_index = generate_xmin_clipped_edge ( &clipping_vertices[ current_clipping_edges[edge_count].point2_index ],

  007a4	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  007a7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  007ad	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  007b2	c1 e2 06	 shl	 edx, 6
  007b5	81 c2 00 00 00
	00		 add	 edx, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  007bb	52		 push	 edx
  007bc	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  007bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  007c5	0f b6 54 c1 07	 movzx	 edx, BYTE PTR [ecx+eax*8+7]
  007ca	c1 e2 06	 shl	 edx, 6
  007cd	81 c2 00 00 00
	00		 add	 edx, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  007d3	52		 push	 edx
  007d4	e8 00 00 00 00	 call	 ?generate_xmin_clipped_edge@@YGHPAUVERTEX@@0@Z ; generate_xmin_clipped_edge
  007d9	89 45 f0	 mov	 DWORD PTR _clipped_vertex_index$[ebp], eax

; 579  : 																							 &clipping_vertices[ current_clipping_edges[edge_count].point1_index ] );
; 580  : 
; 581  : 						current_clipping_edges[edge_count].point2_index = clipped_vertex_index;

  007dc	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  007df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  007e5	8a 55 f0	 mov	 dl, BYTE PTR _clipped_vertex_index$[ebp]
  007e8	88 54 c1 07	 mov	 BYTE PTR [ecx+eax*8+7], dl

; 582  : 
; 583  : 						current_clipping_edges[edge_count].outcode = ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode |

  007ec	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  007ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  007f5	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  007fa	c1 e2 06	 shl	 edx, 6
  007fd	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00804	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00807	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0080d	0f b6 4c ca 07	 movzx	 ecx, BYTE PTR [edx+ecx*8+7]
  00812	c1 e1 06	 shl	 ecx, 6
  00815	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  0081c	0b c2		 or	 eax, edx
  0081e	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00821	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00827	88 44 ca 04	 mov	 BYTE PTR [edx+ecx*8+4], al

; 584  : 																						clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode );
; 585  : 						current_clipping_edges[edge_count].outcode2 = ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode &

  0082b	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  0082e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00834	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  00839	c1 e2 06	 shl	 edx, 6
  0083c	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00843	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00846	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0084c	0f b6 4c ca 07	 movzx	 ecx, BYTE PTR [edx+ecx*8+7]
  00851	c1 e1 06	 shl	 ecx, 6
  00854	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  0085b	23 c2		 and	 eax, edx
  0085d	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00860	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00866	88 44 ca 05	 mov	 BYTE PTR [edx+ecx*8+5], al
$LN55@clip_3d_pr:

; 586  : 																						clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode );
; 587  : 					}
; 588  : 				}
; 589  : 			}

  0086a	e9 ba fd ff ff	 jmp	 $LN14@clip_3d_pr
$LN15@clip_3d_pr:

; 590  : 
; 591  : 			reconstruct_clip_edges ();

  0086f	e8 00 00 00 00	 call	 ?reconstruct_clip_edges@@YGXXZ ; reconstruct_clip_edges

; 592  : 
; 593  : 			if ( number_of_clipping_primitives == 0 )

  00874	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?number_of_clipping_primitives@@3HA, 0 ; number_of_clipping_primitives
  0087b	75 05		 jne	 SHORT $LN58@clip_3d_pr

; 594  : 			{
; 595  : 		
; 596  : 				return;

  0087d	e9 e9 08 00 00	 jmp	 $LN1@clip_3d_pr
$LN58@clip_3d_pr:

; 597  : 			}
; 598  : 		}
; 599  : 
; 600  : 		if ( whole_outcode & CLIP_RIGHT )

  00882	8b 45 08	 mov	 eax, DWORD PTR _whole_outcode$[ebp]
  00885	83 e0 04	 and	 eax, 4
  00888	0f 84 62 02 00
	00		 je	 $LN65@clip_3d_pr

; 601  : 		{
; 602  : 
; 603  : 			for ( edge_count = 0; edge_count < number_of_clipping_edges; edge_count++ )

  0088e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _edge_count$[ebp], 0
  00895	eb 09		 jmp	 SHORT $LN19@clip_3d_pr
$LN17@clip_3d_pr:
  00897	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  0089a	83 c0 01	 add	 eax, 1
  0089d	89 45 f4	 mov	 DWORD PTR _edge_count$[ebp], eax
$LN19@clip_3d_pr:
  008a0	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  008a3	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  008a9	0f 8d 2e 02 00
	00		 jge	 $LN18@clip_3d_pr

; 604  : 			{
; 605  : 
; 606  : 				if ( current_clipping_edges[edge_count].outcode & CLIP_RIGHT )

  008af	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  008b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  008b8	0f b6 54 c1 04	 movzx	 edx, BYTE PTR [ecx+eax*8+4]
  008bd	83 e2 04	 and	 edx, 4
  008c0	0f 84 12 02 00
	00		 je	 $LN62@clip_3d_pr

; 607  : 				{
; 608  : 
; 609  : 					if ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode & CLIP_RIGHT )

  008c6	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  008c9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  008cf	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  008d4	c1 e2 06	 shl	 edx, 6
  008d7	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  008de	83 e0 04	 and	 eax, 4
  008e1	0f 84 1b 01 00
	00		 je	 $LN61@clip_3d_pr

; 610  : 					{
; 611  : 
; 612  : 						if ( clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode & CLIP_RIGHT )

  008e7	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  008ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  008f0	0f b6 54 c1 07	 movzx	 edx, BYTE PTR [ecx+eax*8+7]
  008f5	c1 e2 06	 shl	 edx, 6
  008f8	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  008ff	83 e0 04	 and	 eax, 4
  00902	74 23		 je	 SHORT $LN63@clip_3d_pr

; 613  : 						{
; 614  : 
; 615  : 							current_clipping_edges[edge_count].clip_status = CLIP_STATUS_REJECTED;

  00904	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00907	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0090d	c7 04 c1 00 00
	00 00		 mov	 DWORD PTR [ecx+eax*8], 0

; 616  : 
; 617  : 							current_clipping_edges[edge_count].outcode = 0;

  00914	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00917	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  0091d	c6 44 c1 04 00	 mov	 BYTE PTR [ecx+eax*8+4], 0

; 618  : 						}
; 619  : 						else

  00922	e9 d6 00 00 00	 jmp	 $LN64@clip_3d_pr
$LN63@clip_3d_pr:

; 620  : 						{
; 621  : 
; 622  : 							current_clipping_edges[edge_count].clip_status = CLIP_STATUS_CLIPPED_FIRST_POINT;

  00927	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  0092a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00930	c7 04 c1 02 00
	00 00		 mov	 DWORD PTR [ecx+eax*8], 2

; 623  : 
; 624  : 							clipped_vertex_index = generate_xmax_clipped_edge ( &clipping_vertices[ current_clipping_edges[edge_count].point1_index ],

  00937	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  0093a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00940	0f b6 54 c1 07	 movzx	 edx, BYTE PTR [ecx+eax*8+7]
  00945	c1 e2 06	 shl	 edx, 6
  00948	81 c2 00 00 00
	00		 add	 edx, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  0094e	52		 push	 edx
  0094f	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00952	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00958	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  0095d	c1 e2 06	 shl	 edx, 6
  00960	81 c2 00 00 00
	00		 add	 edx, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  00966	52		 push	 edx
  00967	e8 00 00 00 00	 call	 ?generate_xmax_clipped_edge@@YGHPAUVERTEX@@0@Z ; generate_xmax_clipped_edge
  0096c	89 45 f0	 mov	 DWORD PTR _clipped_vertex_index$[ebp], eax

; 625  : 																								 &clipping_vertices[ current_clipping_edges[edge_count].point2_index ] );
; 626  : 
; 627  : 							current_clipping_edges[edge_count].point1_index = clipped_vertex_index;

  0096f	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00972	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00978	8a 55 f0	 mov	 dl, BYTE PTR _clipped_vertex_index$[ebp]
  0097b	88 54 c1 06	 mov	 BYTE PTR [ecx+eax*8+6], dl

; 628  : 
; 629  : 							current_clipping_edges[edge_count].outcode = ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode |

  0097f	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00982	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00988	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  0098d	c1 e2 06	 shl	 edx, 6
  00990	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00997	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  0099a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  009a0	0f b6 4c ca 07	 movzx	 ecx, BYTE PTR [edx+ecx*8+7]
  009a5	c1 e1 06	 shl	 ecx, 6
  009a8	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  009af	0b c2		 or	 eax, edx
  009b1	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  009b4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  009ba	88 44 ca 04	 mov	 BYTE PTR [edx+ecx*8+4], al

; 630  : 																							clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode );
; 631  : 							current_clipping_edges[edge_count].outcode2 = ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode &

  009be	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  009c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  009c7	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  009cc	c1 e2 06	 shl	 edx, 6
  009cf	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  009d6	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  009d9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  009df	0f b6 4c ca 07	 movzx	 ecx, BYTE PTR [edx+ecx*8+7]
  009e4	c1 e1 06	 shl	 ecx, 6
  009e7	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  009ee	23 c2		 and	 eax, edx
  009f0	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  009f3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  009f9	88 44 ca 05	 mov	 BYTE PTR [edx+ecx*8+5], al
$LN64@clip_3d_pr:

; 632  : 																							clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode );
; 633  : 						}
; 634  : 					}
; 635  : 					else

  009fd	e9 d6 00 00 00	 jmp	 $LN62@clip_3d_pr
$LN61@clip_3d_pr:

; 636  : 					{
; 637  : 
; 638  : 						current_clipping_edges[edge_count].clip_status = CLIP_STATUS_CLIPPED_SECOND_POINT;

  00a02	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00a05	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00a0b	c7 04 c1 03 00
	00 00		 mov	 DWORD PTR [ecx+eax*8], 3

; 639  : 
; 640  : 						clipped_vertex_index = generate_xmax_clipped_edge ( &clipping_vertices[ current_clipping_edges[edge_count].point2_index ],

  00a12	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00a15	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00a1b	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  00a20	c1 e2 06	 shl	 edx, 6
  00a23	81 c2 00 00 00
	00		 add	 edx, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  00a29	52		 push	 edx
  00a2a	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00a2d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00a33	0f b6 54 c1 07	 movzx	 edx, BYTE PTR [ecx+eax*8+7]
  00a38	c1 e2 06	 shl	 edx, 6
  00a3b	81 c2 00 00 00
	00		 add	 edx, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  00a41	52		 push	 edx
  00a42	e8 00 00 00 00	 call	 ?generate_xmax_clipped_edge@@YGHPAUVERTEX@@0@Z ; generate_xmax_clipped_edge
  00a47	89 45 f0	 mov	 DWORD PTR _clipped_vertex_index$[ebp], eax

; 641  : 																							 &clipping_vertices[ current_clipping_edges[edge_count].point1_index ] );
; 642  : 
; 643  : 						current_clipping_edges[edge_count].point2_index = clipped_vertex_index;

  00a4a	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00a4d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00a53	8a 55 f0	 mov	 dl, BYTE PTR _clipped_vertex_index$[ebp]
  00a56	88 54 c1 07	 mov	 BYTE PTR [ecx+eax*8+7], dl

; 644  : 
; 645  : 						current_clipping_edges[edge_count].outcode = ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode |

  00a5a	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00a5d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00a63	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  00a68	c1 e2 06	 shl	 edx, 6
  00a6b	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00a72	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00a75	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00a7b	0f b6 4c ca 07	 movzx	 ecx, BYTE PTR [edx+ecx*8+7]
  00a80	c1 e1 06	 shl	 ecx, 6
  00a83	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  00a8a	0b c2		 or	 eax, edx
  00a8c	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00a8f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00a95	88 44 ca 04	 mov	 BYTE PTR [edx+ecx*8+4], al

; 646  : 																						clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode );
; 647  : 						current_clipping_edges[edge_count].outcode2 = ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode &

  00a99	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00a9c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00aa2	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  00aa7	c1 e2 06	 shl	 edx, 6
  00aaa	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00ab1	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00ab4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00aba	0f b6 4c ca 07	 movzx	 ecx, BYTE PTR [edx+ecx*8+7]
  00abf	c1 e1 06	 shl	 ecx, 6
  00ac2	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  00ac9	23 c2		 and	 eax, edx
  00acb	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00ace	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00ad4	88 44 ca 05	 mov	 BYTE PTR [edx+ecx*8+5], al
$LN62@clip_3d_pr:

; 648  : 																						clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode );
; 649  : 					}
; 650  : 				}
; 651  : 			}

  00ad8	e9 ba fd ff ff	 jmp	 $LN17@clip_3d_pr
$LN18@clip_3d_pr:

; 652  : 
; 653  : 			reconstruct_clip_edges ();

  00add	e8 00 00 00 00	 call	 ?reconstruct_clip_edges@@YGXXZ ; reconstruct_clip_edges

; 654  : 
; 655  : 			if ( number_of_clipping_primitives == 0 )

  00ae2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?number_of_clipping_primitives@@3HA, 0 ; number_of_clipping_primitives
  00ae9	75 05		 jne	 SHORT $LN65@clip_3d_pr

; 656  : 			{
; 657  : 		
; 658  : 				return;

  00aeb	e9 7b 06 00 00	 jmp	 $LN1@clip_3d_pr
$LN65@clip_3d_pr:

; 659  : 			}
; 660  : 		}
; 661  : 
; 662  : 		if ( whole_outcode & CLIP_TOP )

  00af0	8b 45 08	 mov	 eax, DWORD PTR _whole_outcode$[ebp]
  00af3	83 e0 02	 and	 eax, 2
  00af6	0f 84 62 02 00
	00		 je	 $LN72@clip_3d_pr

; 663  : 		{
; 664  : 
; 665  : 			for ( edge_count = 0; edge_count < number_of_clipping_edges; edge_count++ )

  00afc	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _edge_count$[ebp], 0
  00b03	eb 09		 jmp	 SHORT $LN22@clip_3d_pr
$LN20@clip_3d_pr:
  00b05	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00b08	83 c0 01	 add	 eax, 1
  00b0b	89 45 f4	 mov	 DWORD PTR _edge_count$[ebp], eax
$LN22@clip_3d_pr:
  00b0e	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00b11	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  00b17	0f 8d 2e 02 00
	00		 jge	 $LN21@clip_3d_pr

; 666  : 			{
; 667  : 
; 668  : 				if ( current_clipping_edges[edge_count].outcode & CLIP_TOP )

  00b1d	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00b20	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00b26	0f b6 54 c1 04	 movzx	 edx, BYTE PTR [ecx+eax*8+4]
  00b2b	83 e2 02	 and	 edx, 2
  00b2e	0f 84 12 02 00
	00		 je	 $LN69@clip_3d_pr

; 669  : 				{
; 670  : 
; 671  : 					if ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode & CLIP_TOP )

  00b34	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00b37	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00b3d	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  00b42	c1 e2 06	 shl	 edx, 6
  00b45	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00b4c	83 e0 02	 and	 eax, 2
  00b4f	0f 84 1b 01 00
	00		 je	 $LN68@clip_3d_pr

; 672  : 					{
; 673  : 
; 674  : 						if ( clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode & CLIP_TOP )

  00b55	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00b58	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00b5e	0f b6 54 c1 07	 movzx	 edx, BYTE PTR [ecx+eax*8+7]
  00b63	c1 e2 06	 shl	 edx, 6
  00b66	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00b6d	83 e0 02	 and	 eax, 2
  00b70	74 23		 je	 SHORT $LN70@clip_3d_pr

; 675  : 						{
; 676  : 
; 677  : 							current_clipping_edges[edge_count].clip_status = CLIP_STATUS_REJECTED;

  00b72	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00b75	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00b7b	c7 04 c1 00 00
	00 00		 mov	 DWORD PTR [ecx+eax*8], 0

; 678  : 
; 679  : 							current_clipping_edges[edge_count].outcode = 0;

  00b82	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00b85	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00b8b	c6 44 c1 04 00	 mov	 BYTE PTR [ecx+eax*8+4], 0

; 680  : 						}
; 681  : 						else

  00b90	e9 d6 00 00 00	 jmp	 $LN71@clip_3d_pr
$LN70@clip_3d_pr:

; 682  : 						{
; 683  : 
; 684  : 							current_clipping_edges[edge_count].clip_status = CLIP_STATUS_CLIPPED_FIRST_POINT;

  00b95	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00b98	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00b9e	c7 04 c1 02 00
	00 00		 mov	 DWORD PTR [ecx+eax*8], 2

; 685  : 
; 686  : 							clipped_vertex_index = generate_ymin_clipped_edge ( &clipping_vertices[ current_clipping_edges[edge_count].point1_index ],

  00ba5	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00ba8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00bae	0f b6 54 c1 07	 movzx	 edx, BYTE PTR [ecx+eax*8+7]
  00bb3	c1 e2 06	 shl	 edx, 6
  00bb6	81 c2 00 00 00
	00		 add	 edx, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  00bbc	52		 push	 edx
  00bbd	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00bc0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00bc6	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  00bcb	c1 e2 06	 shl	 edx, 6
  00bce	81 c2 00 00 00
	00		 add	 edx, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  00bd4	52		 push	 edx
  00bd5	e8 00 00 00 00	 call	 ?generate_ymin_clipped_edge@@YGHPAUVERTEX@@0@Z ; generate_ymin_clipped_edge
  00bda	89 45 f0	 mov	 DWORD PTR _clipped_vertex_index$[ebp], eax

; 687  : 																								 &clipping_vertices[ current_clipping_edges[edge_count].point2_index ] );
; 688  : 
; 689  : 							current_clipping_edges[edge_count].point1_index = clipped_vertex_index;

  00bdd	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00be0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00be6	8a 55 f0	 mov	 dl, BYTE PTR _clipped_vertex_index$[ebp]
  00be9	88 54 c1 06	 mov	 BYTE PTR [ecx+eax*8+6], dl

; 690  : 
; 691  : 							current_clipping_edges[edge_count].outcode = ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode |

  00bed	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00bf0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00bf6	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  00bfb	c1 e2 06	 shl	 edx, 6
  00bfe	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00c05	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00c08	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00c0e	0f b6 4c ca 07	 movzx	 ecx, BYTE PTR [edx+ecx*8+7]
  00c13	c1 e1 06	 shl	 ecx, 6
  00c16	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  00c1d	0b c2		 or	 eax, edx
  00c1f	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00c22	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00c28	88 44 ca 04	 mov	 BYTE PTR [edx+ecx*8+4], al

; 692  : 																							clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode );
; 693  : 							current_clipping_edges[edge_count].outcode2 = ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode &

  00c2c	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00c2f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00c35	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  00c3a	c1 e2 06	 shl	 edx, 6
  00c3d	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00c44	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00c47	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00c4d	0f b6 4c ca 07	 movzx	 ecx, BYTE PTR [edx+ecx*8+7]
  00c52	c1 e1 06	 shl	 ecx, 6
  00c55	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  00c5c	23 c2		 and	 eax, edx
  00c5e	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00c61	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00c67	88 44 ca 05	 mov	 BYTE PTR [edx+ecx*8+5], al
$LN71@clip_3d_pr:

; 694  : 																							clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode );
; 695  : 						}
; 696  : 					}
; 697  : 					else

  00c6b	e9 d6 00 00 00	 jmp	 $LN69@clip_3d_pr
$LN68@clip_3d_pr:

; 698  : 					{
; 699  : 
; 700  : 						current_clipping_edges[edge_count].clip_status = CLIP_STATUS_CLIPPED_SECOND_POINT;

  00c70	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00c73	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00c79	c7 04 c1 03 00
	00 00		 mov	 DWORD PTR [ecx+eax*8], 3

; 701  : 
; 702  : 						clipped_vertex_index = generate_ymin_clipped_edge ( &clipping_vertices[ current_clipping_edges[edge_count].point2_index ],

  00c80	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00c83	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00c89	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  00c8e	c1 e2 06	 shl	 edx, 6
  00c91	81 c2 00 00 00
	00		 add	 edx, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  00c97	52		 push	 edx
  00c98	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00c9b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00ca1	0f b6 54 c1 07	 movzx	 edx, BYTE PTR [ecx+eax*8+7]
  00ca6	c1 e2 06	 shl	 edx, 6
  00ca9	81 c2 00 00 00
	00		 add	 edx, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  00caf	52		 push	 edx
  00cb0	e8 00 00 00 00	 call	 ?generate_ymin_clipped_edge@@YGHPAUVERTEX@@0@Z ; generate_ymin_clipped_edge
  00cb5	89 45 f0	 mov	 DWORD PTR _clipped_vertex_index$[ebp], eax

; 703  : 																							 &clipping_vertices[ current_clipping_edges[edge_count].point1_index ] );
; 704  : 
; 705  : 						current_clipping_edges[edge_count].point2_index = clipped_vertex_index;

  00cb8	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00cbb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00cc1	8a 55 f0	 mov	 dl, BYTE PTR _clipped_vertex_index$[ebp]
  00cc4	88 54 c1 07	 mov	 BYTE PTR [ecx+eax*8+7], dl

; 706  : 
; 707  : 						current_clipping_edges[edge_count].outcode = ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode |

  00cc8	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00ccb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00cd1	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  00cd6	c1 e2 06	 shl	 edx, 6
  00cd9	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00ce0	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00ce3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00ce9	0f b6 4c ca 07	 movzx	 ecx, BYTE PTR [edx+ecx*8+7]
  00cee	c1 e1 06	 shl	 ecx, 6
  00cf1	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  00cf8	0b c2		 or	 eax, edx
  00cfa	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00cfd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00d03	88 44 ca 04	 mov	 BYTE PTR [edx+ecx*8+4], al

; 708  : 																						clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode );
; 709  : 						current_clipping_edges[edge_count].outcode2 = ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode &

  00d07	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00d0a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00d10	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  00d15	c1 e2 06	 shl	 edx, 6
  00d18	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00d1f	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00d22	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00d28	0f b6 4c ca 07	 movzx	 ecx, BYTE PTR [edx+ecx*8+7]
  00d2d	c1 e1 06	 shl	 ecx, 6
  00d30	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  00d37	23 c2		 and	 eax, edx
  00d39	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00d3c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00d42	88 44 ca 05	 mov	 BYTE PTR [edx+ecx*8+5], al
$LN69@clip_3d_pr:

; 710  : 																						clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode );
; 711  : 					}
; 712  : 				}
; 713  : 			}

  00d46	e9 ba fd ff ff	 jmp	 $LN20@clip_3d_pr
$LN21@clip_3d_pr:

; 714  : 
; 715  : 			reconstruct_clip_edges ();

  00d4b	e8 00 00 00 00	 call	 ?reconstruct_clip_edges@@YGXXZ ; reconstruct_clip_edges

; 716  : 
; 717  : 			if ( number_of_clipping_primitives == 0 )

  00d50	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?number_of_clipping_primitives@@3HA, 0 ; number_of_clipping_primitives
  00d57	75 05		 jne	 SHORT $LN72@clip_3d_pr

; 718  : 			{
; 719  : 		
; 720  : 				return;

  00d59	e9 0d 04 00 00	 jmp	 $LN1@clip_3d_pr
$LN72@clip_3d_pr:

; 721  : 			}
; 722  : 		}
; 723  : 
; 724  : 		if ( whole_outcode & CLIP_BOTTOM )

  00d5e	8b 45 08	 mov	 eax, DWORD PTR _whole_outcode$[ebp]
  00d61	83 e0 08	 and	 eax, 8
  00d64	0f 84 62 02 00
	00		 je	 $LN79@clip_3d_pr

; 725  : 		{
; 726  : 
; 727  : 			for ( edge_count = 0; edge_count < number_of_clipping_edges; edge_count++ )

  00d6a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _edge_count$[ebp], 0
  00d71	eb 09		 jmp	 SHORT $LN25@clip_3d_pr
$LN23@clip_3d_pr:
  00d73	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00d76	83 c0 01	 add	 eax, 1
  00d79	89 45 f4	 mov	 DWORD PTR _edge_count$[ebp], eax
$LN25@clip_3d_pr:
  00d7c	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00d7f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  00d85	0f 8d 2e 02 00
	00		 jge	 $LN24@clip_3d_pr

; 728  : 			{
; 729  : 
; 730  : 				if ( current_clipping_edges[edge_count].outcode & CLIP_BOTTOM )

  00d8b	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00d8e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00d94	0f b6 54 c1 04	 movzx	 edx, BYTE PTR [ecx+eax*8+4]
  00d99	83 e2 08	 and	 edx, 8
  00d9c	0f 84 12 02 00
	00		 je	 $LN76@clip_3d_pr

; 731  : 				{
; 732  : 
; 733  : 					if ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode & CLIP_BOTTOM )

  00da2	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00da5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00dab	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  00db0	c1 e2 06	 shl	 edx, 6
  00db3	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00dba	83 e0 08	 and	 eax, 8
  00dbd	0f 84 1b 01 00
	00		 je	 $LN75@clip_3d_pr

; 734  : 					{
; 735  : 
; 736  : 						if ( clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode & CLIP_BOTTOM )

  00dc3	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00dc6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00dcc	0f b6 54 c1 07	 movzx	 edx, BYTE PTR [ecx+eax*8+7]
  00dd1	c1 e2 06	 shl	 edx, 6
  00dd4	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00ddb	83 e0 08	 and	 eax, 8
  00dde	74 23		 je	 SHORT $LN77@clip_3d_pr

; 737  : 						{
; 738  : 
; 739  : 							current_clipping_edges[edge_count].clip_status = CLIP_STATUS_REJECTED;

  00de0	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00de3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00de9	c7 04 c1 00 00
	00 00		 mov	 DWORD PTR [ecx+eax*8], 0

; 740  : 
; 741  : 							current_clipping_edges[edge_count].outcode = 0;

  00df0	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00df3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00df9	c6 44 c1 04 00	 mov	 BYTE PTR [ecx+eax*8+4], 0

; 742  : 						}
; 743  : 						else

  00dfe	e9 d6 00 00 00	 jmp	 $LN78@clip_3d_pr
$LN77@clip_3d_pr:

; 744  : 						{
; 745  : 
; 746  : 							current_clipping_edges[edge_count].clip_status = CLIP_STATUS_CLIPPED_FIRST_POINT;

  00e03	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00e06	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00e0c	c7 04 c1 02 00
	00 00		 mov	 DWORD PTR [ecx+eax*8], 2

; 747  : 
; 748  : 							clipped_vertex_index = generate_ymax_clipped_edge ( &clipping_vertices[ current_clipping_edges[edge_count].point1_index ],

  00e13	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00e16	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00e1c	0f b6 54 c1 07	 movzx	 edx, BYTE PTR [ecx+eax*8+7]
  00e21	c1 e2 06	 shl	 edx, 6
  00e24	81 c2 00 00 00
	00		 add	 edx, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  00e2a	52		 push	 edx
  00e2b	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00e2e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00e34	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  00e39	c1 e2 06	 shl	 edx, 6
  00e3c	81 c2 00 00 00
	00		 add	 edx, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  00e42	52		 push	 edx
  00e43	e8 00 00 00 00	 call	 ?generate_ymax_clipped_edge@@YGHPAUVERTEX@@0@Z ; generate_ymax_clipped_edge
  00e48	89 45 f0	 mov	 DWORD PTR _clipped_vertex_index$[ebp], eax

; 749  : 																								 &clipping_vertices[ current_clipping_edges[edge_count].point2_index ] );
; 750  : 
; 751  : 							current_clipping_edges[edge_count].point1_index = clipped_vertex_index;

  00e4b	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00e4e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00e54	8a 55 f0	 mov	 dl, BYTE PTR _clipped_vertex_index$[ebp]
  00e57	88 54 c1 06	 mov	 BYTE PTR [ecx+eax*8+6], dl

; 752  : 
; 753  : 							current_clipping_edges[edge_count].outcode = ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode |

  00e5b	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00e5e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00e64	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  00e69	c1 e2 06	 shl	 edx, 6
  00e6c	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00e73	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00e76	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00e7c	0f b6 4c ca 07	 movzx	 ecx, BYTE PTR [edx+ecx*8+7]
  00e81	c1 e1 06	 shl	 ecx, 6
  00e84	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  00e8b	0b c2		 or	 eax, edx
  00e8d	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00e90	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00e96	88 44 ca 04	 mov	 BYTE PTR [edx+ecx*8+4], al

; 754  : 																							clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode );
; 755  : 							current_clipping_edges[edge_count].outcode2 = ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode &

  00e9a	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00e9d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00ea3	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  00ea8	c1 e2 06	 shl	 edx, 6
  00eab	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00eb2	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00eb5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00ebb	0f b6 4c ca 07	 movzx	 ecx, BYTE PTR [edx+ecx*8+7]
  00ec0	c1 e1 06	 shl	 ecx, 6
  00ec3	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  00eca	23 c2		 and	 eax, edx
  00ecc	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00ecf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00ed5	88 44 ca 05	 mov	 BYTE PTR [edx+ecx*8+5], al
$LN78@clip_3d_pr:

; 756  : 																							clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode );
; 757  : 						}
; 758  : 					}
; 759  : 					else

  00ed9	e9 d6 00 00 00	 jmp	 $LN76@clip_3d_pr
$LN75@clip_3d_pr:

; 760  : 					{
; 761  : 
; 762  : 						current_clipping_edges[edge_count].clip_status = CLIP_STATUS_CLIPPED_SECOND_POINT;

  00ede	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00ee1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00ee7	c7 04 c1 03 00
	00 00		 mov	 DWORD PTR [ecx+eax*8], 3

; 763  : 
; 764  : 						clipped_vertex_index = generate_ymax_clipped_edge ( &clipping_vertices[ current_clipping_edges[edge_count].point2_index ],

  00eee	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00ef1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00ef7	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  00efc	c1 e2 06	 shl	 edx, 6
  00eff	81 c2 00 00 00
	00		 add	 edx, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  00f05	52		 push	 edx
  00f06	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00f09	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00f0f	0f b6 54 c1 07	 movzx	 edx, BYTE PTR [ecx+eax*8+7]
  00f14	c1 e2 06	 shl	 edx, 6
  00f17	81 c2 00 00 00
	00		 add	 edx, OFFSET ?clipping_vertices@@3PAUVERTEX@@A ; clipping_vertices
  00f1d	52		 push	 edx
  00f1e	e8 00 00 00 00	 call	 ?generate_ymax_clipped_edge@@YGHPAUVERTEX@@0@Z ; generate_ymax_clipped_edge
  00f23	89 45 f0	 mov	 DWORD PTR _clipped_vertex_index$[ebp], eax

; 765  : 																							 &clipping_vertices[ current_clipping_edges[edge_count].point1_index ] );
; 766  : 
; 767  : 						current_clipping_edges[edge_count].point2_index = clipped_vertex_index;

  00f26	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00f29	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00f2f	8a 55 f0	 mov	 dl, BYTE PTR _clipped_vertex_index$[ebp]
  00f32	88 54 c1 07	 mov	 BYTE PTR [ecx+eax*8+7], dl

; 768  : 
; 769  : 						current_clipping_edges[edge_count].outcode = ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode |

  00f36	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00f39	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00f3f	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  00f44	c1 e2 06	 shl	 edx, 6
  00f47	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00f4e	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00f51	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00f57	0f b6 4c ca 07	 movzx	 ecx, BYTE PTR [edx+ecx*8+7]
  00f5c	c1 e1 06	 shl	 ecx, 6
  00f5f	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  00f66	0b c2		 or	 eax, edx
  00f68	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00f6b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00f71	88 44 ca 04	 mov	 BYTE PTR [edx+ecx*8+4], al

; 770  : 																						clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode );
; 771  : 						current_clipping_edges[edge_count].outcode2 = ( clipping_vertices[ current_clipping_edges[edge_count].point1_index ].outcode &

  00f75	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  00f78	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00f7e	0f b6 54 c1 06	 movzx	 edx, BYTE PTR [ecx+eax*8+6]
  00f83	c1 e2 06	 shl	 edx, 6
  00f86	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00f8d	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00f90	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00f96	0f b6 4c ca 07	 movzx	 ecx, BYTE PTR [edx+ecx*8+7]
  00f9b	c1 e1 06	 shl	 ecx, 6
  00f9e	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  00fa5	23 c2		 and	 eax, edx
  00fa7	8b 4d f4	 mov	 ecx, DWORD PTR _edge_count$[ebp]
  00faa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  00fb0	88 44 ca 05	 mov	 BYTE PTR [edx+ecx*8+5], al
$LN76@clip_3d_pr:

; 772  : 																						clipping_vertices[ current_clipping_edges[edge_count].point2_index ].outcode );
; 773  : 					}
; 774  : 				}
; 775  : 			}

  00fb4	e9 ba fd ff ff	 jmp	 $LN23@clip_3d_pr
$LN24@clip_3d_pr:

; 776  : 
; 777  : 			reconstruct_clip_edges ();

  00fb9	e8 00 00 00 00	 call	 ?reconstruct_clip_edges@@YGXXZ ; reconstruct_clip_edges

; 778  : 
; 779  : 			if ( number_of_clipping_primitives == 0 )

  00fbe	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?number_of_clipping_primitives@@3HA, 0 ; number_of_clipping_primitives
  00fc5	75 05		 jne	 SHORT $LN79@clip_3d_pr

; 780  : 			{
; 781  : 		
; 782  : 				return;

  00fc7	e9 9f 01 00 00	 jmp	 $LN1@clip_3d_pr
$LN79@clip_3d_pr:

; 783  : 			}
; 784  : 		}
; 785  : 
; 786  : 		//
; 787  : 		// Remove perspective correction from the vertices
; 788  : 		//
; 789  : 
; 790  : 		for ( vertex_count = 0; vertex_count < number_of_clipping_vertices; vertex_count++ )

  00fcc	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _vertex_count$2[ebp], 0
  00fd3	eb 09		 jmp	 SHORT $LN28@clip_3d_pr
$LN26@clip_3d_pr:
  00fd5	8b 45 ec	 mov	 eax, DWORD PTR _vertex_count$2[ebp]
  00fd8	83 c0 01	 add	 eax, 1
  00fdb	89 45 ec	 mov	 DWORD PTR _vertex_count$2[ebp], eax
$LN28@clip_3d_pr:
  00fde	8b 45 ec	 mov	 eax, DWORD PTR _vertex_count$2[ebp]
  00fe1	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_clipping_vertices@@3HA ; number_of_clipping_vertices
  00fe7	0f 8d ad 00 00
	00		 jge	 $LN27@clip_3d_pr

; 791  : 		{
; 792  : 
; 793  : 			clipping_vertices[vertex_count].u *= clipping_vertices[vertex_count].z;

  00fed	8b 45 ec	 mov	 eax, DWORD PTR _vertex_count$2[ebp]
  00ff0	c1 e0 06	 shl	 eax, 6
  00ff3	8b 4d ec	 mov	 ecx, DWORD PTR _vertex_count$2[ebp]
  00ff6	c1 e1 06	 shl	 ecx, 6
  00ff9	f3 0f 10 80 18
	00 00 00	 movss	 xmm0, DWORD PTR ?clipping_vertices@@3PAUVERTEX@@A[eax+24]
  01001	f3 0f 59 81 08
	00 00 00	 mulss	 xmm0, DWORD PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+8]
  01009	8b 55 ec	 mov	 edx, DWORD PTR _vertex_count$2[ebp]
  0100c	c1 e2 06	 shl	 edx, 6
  0100f	f3 0f 11 82 18
	00 00 00	 movss	 DWORD PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+24], xmm0

; 794  : 			clipping_vertices[vertex_count].u2 *= clipping_vertices[vertex_count].z;

  01017	8b 45 ec	 mov	 eax, DWORD PTR _vertex_count$2[ebp]
  0101a	c1 e0 06	 shl	 eax, 6
  0101d	8b 4d ec	 mov	 ecx, DWORD PTR _vertex_count$2[ebp]
  01020	c1 e1 06	 shl	 ecx, 6
  01023	f3 0f 10 80 20
	00 00 00	 movss	 xmm0, DWORD PTR ?clipping_vertices@@3PAUVERTEX@@A[eax+32]
  0102b	f3 0f 59 81 08
	00 00 00	 mulss	 xmm0, DWORD PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+8]
  01033	8b 55 ec	 mov	 edx, DWORD PTR _vertex_count$2[ebp]
  01036	c1 e2 06	 shl	 edx, 6
  01039	f3 0f 11 82 20
	00 00 00	 movss	 DWORD PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+32], xmm0

; 795  : 			clipping_vertices[vertex_count].v *= clipping_vertices[vertex_count].z;

  01041	8b 45 ec	 mov	 eax, DWORD PTR _vertex_count$2[ebp]
  01044	c1 e0 06	 shl	 eax, 6
  01047	8b 4d ec	 mov	 ecx, DWORD PTR _vertex_count$2[ebp]
  0104a	c1 e1 06	 shl	 ecx, 6
  0104d	f3 0f 10 80 1c
	00 00 00	 movss	 xmm0, DWORD PTR ?clipping_vertices@@3PAUVERTEX@@A[eax+28]
  01055	f3 0f 59 81 08
	00 00 00	 mulss	 xmm0, DWORD PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+8]
  0105d	8b 55 ec	 mov	 edx, DWORD PTR _vertex_count$2[ebp]
  01060	c1 e2 06	 shl	 edx, 6
  01063	f3 0f 11 82 1c
	00 00 00	 movss	 DWORD PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+28], xmm0

; 796  : 			clipping_vertices[vertex_count].v2 *= clipping_vertices[vertex_count].z;

  0106b	8b 45 ec	 mov	 eax, DWORD PTR _vertex_count$2[ebp]
  0106e	c1 e0 06	 shl	 eax, 6
  01071	8b 4d ec	 mov	 ecx, DWORD PTR _vertex_count$2[ebp]
  01074	c1 e1 06	 shl	 ecx, 6
  01077	f3 0f 10 80 24
	00 00 00	 movss	 xmm0, DWORD PTR ?clipping_vertices@@3PAUVERTEX@@A[eax+36]
  0107f	f3 0f 59 81 08
	00 00 00	 mulss	 xmm0, DWORD PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+8]
  01087	8b 55 ec	 mov	 edx, DWORD PTR _vertex_count$2[ebp]
  0108a	c1 e2 06	 shl	 edx, 6
  0108d	f3 0f 11 82 24
	00 00 00	 movss	 DWORD PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+36], xmm0

; 797  : 		}

  01095	e9 3b ff ff ff	 jmp	 $LN26@clip_3d_pr
$LN27@clip_3d_pr:

; 798  : 	}
; 799  : 
; 800  : 	//
; 801  : 	// Now to get all this data into a reasonable form.
; 802  : 	//
; 803  : /*
; 804  : 	//
; 805  : 	// First, compact all the vertices
; 806  : 	//
; 807  : 
; 808  : 	destination_vertex_index = 0;
; 809  : 
; 810  : 	for ( vertex_count = 0; vertex_count < number_of_clipping_vertices; vertex_count++ )
; 811  : 	{
; 812  : 
; 813  : 		if ( clipping_vertices[vertex_count].outcode == 0 )
; 814  : 		{
; 815  : 
; 816  : 			clipping_vertices[destination_vertex_index] = clipping_vertices[vertex_count];
; 817  : 
; 818  : 			clipping_vertices_remap_table[vertex_count] = destination_vertex_index;
; 819  : 
; 820  : 			destination_vertex_index++;
; 821  : 		}
; 822  : 	}
; 823  : 
; 824  : 	number_of_clipping_vertices = destination_vertex_index;
; 825  : 	*/
; 826  : 
; 827  : 	//
; 828  : 	// Next, go through all the primitives, turning them into indexed primitives.
; 829  : 	//
; 830  : 
; 831  : 	vertex_index_index = 0;

  0109a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _vertex_index_index$[ebp], 0

; 832  : 
; 833  : 	for ( primitive_count = 0; primitive_count < number_of_clipping_primitives; primitive_count++ )

  010a1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _primitive_count$[ebp], 0
  010a8	eb 09		 jmp	 SHORT $LN31@clip_3d_pr
$LN29@clip_3d_pr:
  010aa	8b 45 fc	 mov	 eax, DWORD PTR _primitive_count$[ebp]
  010ad	83 c0 01	 add	 eax, 1
  010b0	89 45 fc	 mov	 DWORD PTR _primitive_count$[ebp], eax
$LN31@clip_3d_pr:
  010b3	8b 45 fc	 mov	 eax, DWORD PTR _primitive_count$[ebp]
  010b6	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_clipping_primitives@@3HA ; number_of_clipping_primitives
  010bc	0f 8d a9 00 00
	00		 jge	 $LN30@clip_3d_pr

; 834  : 	{
; 835  : 
; 836  : 		clipping_primitives_results[primitive_count] = current_clipping_primitives[primitive_count].number_of_edges;

  010c2	8b 45 fc	 mov	 eax, DWORD PTR _primitive_count$[ebp]
  010c5	8b 4d fc	 mov	 ecx, DWORD PTR _primitive_count$[ebp]
  010c8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_primitives@@3PAUCLIP_PRIMITIVE@@A ; current_clipping_primitives
  010ce	8b 0c ca	 mov	 ecx, DWORD PTR [edx+ecx*8]
  010d1	89 0c 85 00 00
	00 00		 mov	 DWORD PTR ?clipping_primitives_results@@3PAHA[eax*4], ecx

; 837  : 
; 838  : 		for ( edge_count = 0; edge_count < current_clipping_primitives[primitive_count].number_of_edges; edge_count++ )

  010d8	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _edge_count$[ebp], 0
  010df	eb 09		 jmp	 SHORT $LN34@clip_3d_pr
$LN32@clip_3d_pr:
  010e1	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  010e4	83 c0 01	 add	 eax, 1
  010e7	89 45 f4	 mov	 DWORD PTR _edge_count$[ebp], eax
$LN34@clip_3d_pr:
  010ea	8b 45 fc	 mov	 eax, DWORD PTR _primitive_count$[ebp]
  010ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_primitives@@3PAUCLIP_PRIMITIVE@@A ; current_clipping_primitives
  010f3	8b 55 f4	 mov	 edx, DWORD PTR _edge_count$[ebp]
  010f6	3b 14 c1	 cmp	 edx, DWORD PTR [ecx+eax*8]
  010f9	7d 6b		 jge	 SHORT $LN33@clip_3d_pr

; 839  : 		{
; 840  : 
; 841  : 			clip_primitive_edge
; 842  : 				*edge;
; 843  : 
; 844  : 			edge = &current_clipping_edges[ current_clipping_primitives[primitive_count].edges[edge_count].edge_index ];

  010fb	8b 45 fc	 mov	 eax, DWORD PTR _primitive_count$[ebp]
  010fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_primitives@@3PAUCLIP_PRIMITIVE@@A ; current_clipping_primitives
  01104	8b 54 c1 04	 mov	 edx, DWORD PTR [ecx+eax*8+4]
  01108	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  0110b	0f b6 4c 82 01	 movzx	 ecx, BYTE PTR [edx+eax*4+1]
  01110	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  01116	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]
  01119	89 45 e8	 mov	 DWORD PTR _edge$1[ebp], eax

; 845  : 
; 846  : 			if ( current_clipping_primitives[primitive_count].edges[edge_count].direction == 0 )

  0111c	8b 45 fc	 mov	 eax, DWORD PTR _primitive_count$[ebp]
  0111f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_primitives@@3PAUCLIP_PRIMITIVE@@A ; current_clipping_primitives
  01125	8b 54 c1 04	 mov	 edx, DWORD PTR [ecx+eax*8+4]
  01129	8b 45 f4	 mov	 eax, DWORD PTR _edge_count$[ebp]
  0112c	0f b6 0c 82	 movzx	 ecx, BYTE PTR [edx+eax*4]
  01130	85 c9		 test	 ecx, ecx
  01132	75 13		 jne	 SHORT $LN80@clip_3d_pr

; 847  : 			{
; 848  : 
; 849  : //				clipping_primitives_vertex_indices[vertex_index_index] = clipping_vertices_remap_table[ ( edge->point1 - clipping_vertices ) ];
; 850  : 				clipping_primitives_vertex_indices[vertex_index_index] = edge->point1_index;	//( edge->point1 - clipping_vertices );

  01134	8b 45 e8	 mov	 eax, DWORD PTR _edge$1[ebp]
  01137	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  0113b	8b 55 f8	 mov	 edx, DWORD PTR _vertex_index_index$[ebp]
  0113e	89 0c 95 00 00
	00 00		 mov	 DWORD PTR ?clipping_primitives_vertex_indices@@3PAHA[edx*4], ecx

; 851  : 			}
; 852  : 			else

  01145	eb 11		 jmp	 SHORT $LN81@clip_3d_pr
$LN80@clip_3d_pr:

; 853  : 			{
; 854  : 
; 855  : //				clipping_primitives_vertex_indices[vertex_index_index] = clipping_vertices_remap_table[ ( edge->point2 - clipping_vertices ) ];
; 856  : 				clipping_primitives_vertex_indices[vertex_index_index] = edge->point2_index;	//( edge->point2 - clipping_vertices );

  01147	8b 45 e8	 mov	 eax, DWORD PTR _edge$1[ebp]
  0114a	0f b6 48 07	 movzx	 ecx, BYTE PTR [eax+7]
  0114e	8b 55 f8	 mov	 edx, DWORD PTR _vertex_index_index$[ebp]
  01151	89 0c 95 00 00
	00 00		 mov	 DWORD PTR ?clipping_primitives_vertex_indices@@3PAHA[edx*4], ecx
$LN81@clip_3d_pr:

; 857  : 			}
; 858  : 
; 859  : 			vertex_index_index++;

  01158	8b 45 f8	 mov	 eax, DWORD PTR _vertex_index_index$[ebp]
  0115b	83 c0 01	 add	 eax, 1
  0115e	89 45 f8	 mov	 DWORD PTR _vertex_index_index$[ebp], eax

; 860  : 		}

  01161	e9 7b ff ff ff	 jmp	 $LN32@clip_3d_pr
$LN33@clip_3d_pr:

; 861  : 	}

  01166	e9 3f ff ff ff	 jmp	 $LN29@clip_3d_pr
$LN30@clip_3d_pr:
$LN1@clip_3d_pr:

; 862  : }

  0116b	5f		 pop	 edi
  0116c	5e		 pop	 esi
  0116d	5b		 pop	 ebx
  0116e	8b e5		 mov	 esp, ebp
  01170	5d		 pop	 ebp
  01171	c2 04 00	 ret	 4
?clip_3d_primitives@@YGXH@Z ENDP			; clip_3d_primitives
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfclip.c
;	COMDAT ?clip_3d_triangle_fan@@YGXHH@Z
_TEXT	SEGMENT
_outcode$1 = -13					; size = 1
_total_number_of_clipping_primitives$ = -12		; size = 4
_point_count$ = -8					; size = 4
_count$ = -4						; size = 4
_number_of_points$ = 8					; size = 4
_whole_outcode$ = 12					; size = 4
?clip_3d_triangle_fan@@YGXHH@Z PROC			; clip_3d_triangle_fan, COMDAT

; 238  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 239  : 
; 240  : 	int
; 241  : 		count,
; 242  : 		point_count,
; 243  : 		total_number_of_clipping_primitives;
; 244  : 
; 245  : 	//
; 246  : 	// First, generate all the edges, and primitives
; 247  : 	//
; 248  : 
; 249  : 	number_of_clipping_vertices = number_of_points;

  00009	8b 45 08	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  0000c	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_clipping_vertices@@3HA, eax ; number_of_clipping_vertices

; 250  : 
; 251  : 	total_number_of_clipping_primitives = number_of_points - 2;

  00011	8b 45 08	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  00014	83 e8 02	 sub	 eax, 2
  00017	89 45 f4	 mov	 DWORD PTR _total_number_of_clipping_primitives$[ebp], eax

; 252  : 
; 253  : 	number_of_clipping_edges = ( number_of_points * 2 ) - 3;

  0001a	8b 45 08	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  0001d	8d 4c 00 fd	 lea	 ecx, DWORD PTR [eax+eax-3]
  00021	89 0d 00 00 00
	00		 mov	 DWORD PTR ?number_of_clipping_edges@@3HA, ecx ; number_of_clipping_edges

; 254  : 
; 255  : 	number_of_clipping_edge_references = 0;

  00027	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?number_of_clipping_edge_references@@3HA, 0 ; number_of_clipping_edge_references

; 256  : 
; 257  : 	//
; 258  : 	// The vertices have already been placed into the array by the caller
; 259  : 	//
; 260  : 
; 261  : 	//
; 262  : 	// Construct the edges array - mark them as rejected which later will be corrected
; 263  : 	//
; 264  : 
; 265  : 	//
; 266  : 	// First, the "spoke" edges
; 267  : 	//
; 268  : 
; 269  : 	for ( count = 0; count < ( number_of_clipping_vertices - 1 ); count++ )

  00031	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00038	eb 09		 jmp	 SHORT $LN4@clip_3d_tr
$LN2@clip_3d_tr:
  0003a	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0003d	83 c0 01	 add	 eax, 1
  00040	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@clip_3d_tr:
  00043	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_vertices@@3HA ; number_of_clipping_vertices
  00048	83 e8 01	 sub	 eax, 1
  0004b	39 45 fc	 cmp	 DWORD PTR _count$[ebp], eax
  0004e	0f 8d 84 00 00
	00		 jge	 $LN3@clip_3d_tr

; 270  : 	{
; 271  : 
; 272  : 		clipping_edges_array1[count].point1_index = 0;

  00054	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00057	c6 04 c5 06 00
	00 00 00	 mov	 BYTE PTR ?clipping_edges_array1@@3PAUCLIP_PRIMITIVE_EDGE@@A[eax*8+6], 0

; 273  : 		clipping_edges_array1[count].point2_index = count+1;

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00062	83 c0 01	 add	 eax, 1
  00065	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  00068	88 04 cd 07 00
	00 00		 mov	 BYTE PTR ?clipping_edges_array1@@3PAUCLIP_PRIMITIVE_EDGE@@A[ecx*8+7], al

; 274  : 		clipping_edges_array1[count].outcode = ( ( clipping_vertices[0].outcode ) | ( clipping_vertices[count+1].outcode ) );

  0006f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00074	6b c8 00	 imul	 ecx, eax, 0
  00077	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  0007e	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00081	83 c0 01	 add	 eax, 1
  00084	c1 e0 06	 shl	 eax, 6
  00087	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[eax+44]
  0008e	0b d1		 or	 edx, ecx
  00090	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00093	88 14 c5 04 00
	00 00		 mov	 BYTE PTR ?clipping_edges_array1@@3PAUCLIP_PRIMITIVE_EDGE@@A[eax*8+4], dl

; 275  : 		clipping_edges_array1[count].outcode2 = ( ( clipping_vertices[0].outcode ) & ( clipping_vertices[count+1].outcode ) );

  0009a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0009f	6b c8 00	 imul	 ecx, eax, 0
  000a2	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  000a9	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000ac	83 c0 01	 add	 eax, 1
  000af	c1 e0 06	 shl	 eax, 6
  000b2	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[eax+44]
  000b9	23 d1		 and	 edx, ecx
  000bb	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000be	88 14 c5 05 00
	00 00		 mov	 BYTE PTR ?clipping_edges_array1@@3PAUCLIP_PRIMITIVE_EDGE@@A[eax*8+5], dl

; 276  : 		clipping_edges_array1[count].clip_status = CLIP_STATUS_REJECTED;

  000c5	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000c8	c7 04 c5 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?clipping_edges_array1@@3PAUCLIP_PRIMITIVE_EDGE@@A[eax*8], 0

; 277  : 	}

  000d3	e9 62 ff ff ff	 jmp	 $LN2@clip_3d_tr
$LN3@clip_3d_tr:

; 278  : 
; 279  : 	//
; 280  : 	// Next the "outside" edges
; 281  : 	//
; 282  : 
; 283  : 	for ( point_count = 1; count < number_of_clipping_edges; count++, point_count++ )

  000d8	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _point_count$[ebp], 1
  000df	eb 12		 jmp	 SHORT $LN7@clip_3d_tr
$LN5@clip_3d_tr:
  000e1	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000e4	83 c0 01	 add	 eax, 1
  000e7	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
  000ea	8b 4d f8	 mov	 ecx, DWORD PTR _point_count$[ebp]
  000ed	83 c1 01	 add	 ecx, 1
  000f0	89 4d f8	 mov	 DWORD PTR _point_count$[ebp], ecx
$LN7@clip_3d_tr:
  000f3	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000f6	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_clipping_edges@@3HA ; number_of_clipping_edges
  000fc	0f 8d 82 00 00
	00		 jge	 $LN6@clip_3d_tr

; 284  : 	{
; 285  : 
; 286  : 		clipping_edges_array1[count].point1_index = point_count;

  00102	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00105	8a 4d f8	 mov	 cl, BYTE PTR _point_count$[ebp]
  00108	88 0c c5 06 00
	00 00		 mov	 BYTE PTR ?clipping_edges_array1@@3PAUCLIP_PRIMITIVE_EDGE@@A[eax*8+6], cl

; 287  : 		clipping_edges_array1[count].point2_index = point_count+1;

  0010f	8b 45 f8	 mov	 eax, DWORD PTR _point_count$[ebp]
  00112	83 c0 01	 add	 eax, 1
  00115	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  00118	88 04 cd 07 00
	00 00		 mov	 BYTE PTR ?clipping_edges_array1@@3PAUCLIP_PRIMITIVE_EDGE@@A[ecx*8+7], al

; 288  : 		clipping_edges_array1[count].outcode = ( ( clipping_vertices[point_count].outcode ) | ( clipping_vertices[point_count+1].outcode ) );

  0011f	8b 45 f8	 mov	 eax, DWORD PTR _point_count$[ebp]
  00122	c1 e0 06	 shl	 eax, 6
  00125	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[eax+44]
  0012c	8b 55 f8	 mov	 edx, DWORD PTR _point_count$[ebp]
  0012f	83 c2 01	 add	 edx, 1
  00132	c1 e2 06	 shl	 edx, 6
  00135	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  0013c	0b c8		 or	 ecx, eax
  0013e	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  00141	88 0c d5 04 00
	00 00		 mov	 BYTE PTR ?clipping_edges_array1@@3PAUCLIP_PRIMITIVE_EDGE@@A[edx*8+4], cl

; 289  : 		clipping_edges_array1[count].outcode2 = ( ( clipping_vertices[point_count].outcode ) & ( clipping_vertices[point_count+1].outcode ) );

  00148	8b 45 f8	 mov	 eax, DWORD PTR _point_count$[ebp]
  0014b	c1 e0 06	 shl	 eax, 6
  0014e	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[eax+44]
  00155	8b 55 f8	 mov	 edx, DWORD PTR _point_count$[ebp]
  00158	83 c2 01	 add	 edx, 1
  0015b	c1 e2 06	 shl	 edx, 6
  0015e	0f b6 82 2c 00
	00 00		 movzx	 eax, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[edx+44]
  00165	23 c8		 and	 ecx, eax
  00167	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  0016a	88 0c d5 05 00
	00 00		 mov	 BYTE PTR ?clipping_edges_array1@@3PAUCLIP_PRIMITIVE_EDGE@@A[edx*8+5], cl

; 290  : 		clipping_edges_array1[count].clip_status = CLIP_STATUS_REJECTED;

  00171	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00174	c7 04 c5 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?clipping_edges_array1@@3PAUCLIP_PRIMITIVE_EDGE@@A[eax*8], 0

; 291  : 	}

  0017f	e9 5d ff ff ff	 jmp	 $LN5@clip_3d_tr
$LN6@clip_3d_tr:

; 292  : 
; 293  : 	//
; 294  : 	// Construct the primitives ( initially triangles )
; 295  : 	//
; 296  : 
; 297  : 	current_clipping_primitives = clipping_primitives_array1;

  00184	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_clipping_primitives@@3PAUCLIP_PRIMITIVE@@A, OFFSET ?clipping_primitives_array1@@3PAUCLIP_PRIMITIVE@@A ; current_clipping_primitives, clipping_primitives_array1

; 298  : 
; 299  : 	current_clipping_edges = clipping_edges_array1;

  0018e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A, OFFSET ?clipping_edges_array1@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges, clipping_edges_array1

; 300  : 
; 301  : 	current_clipping_edge_references = clipping_edge_reference_array1;

  00198	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_clipping_edge_references@@3PAUCLIP_PRIMITIVE_EDGE_REFERENCE@@A, OFFSET ?clipping_edge_reference_array1@@3PAUCLIP_PRIMITIVE_EDGE_REFERENCE@@A ; current_clipping_edge_references, clipping_edge_reference_array1

; 302  : 
; 303  : 	number_of_clipping_primitives = 0;

  001a2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?number_of_clipping_primitives@@3HA, 0 ; number_of_clipping_primitives

; 304  : 
; 305  : 	for ( count = 0; count < total_number_of_clipping_primitives; count++ )

  001ac	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  001b3	eb 09		 jmp	 SHORT $LN10@clip_3d_tr
$LN8@clip_3d_tr:
  001b5	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  001b8	83 c0 01	 add	 eax, 1
  001bb	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN10@clip_3d_tr:
  001be	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  001c1	3b 45 f4	 cmp	 eax, DWORD PTR _total_number_of_clipping_primitives$[ebp]
  001c4	0f 8d 47 01 00
	00		 jge	 $LN9@clip_3d_tr

; 306  : 	{
; 307  : 
; 308  : 		unsigned char
; 309  : 			outcode;
; 310  : 
; 311  : 		outcode = clipping_vertices[0].outcode;

  001ca	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001cf	6b c8 00	 imul	 ecx, eax, 0
  001d2	8a 91 2c 00 00
	00		 mov	 dl, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[ecx+44]
  001d8	88 55 f3	 mov	 BYTE PTR _outcode$1[ebp], dl

; 312  : 		outcode &= clipping_vertices[count+1].outcode;

  001db	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  001de	83 c0 01	 add	 eax, 1
  001e1	c1 e0 06	 shl	 eax, 6
  001e4	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[eax+44]
  001eb	0f b6 55 f3	 movzx	 edx, BYTE PTR _outcode$1[ebp]
  001ef	23 d1		 and	 edx, ecx
  001f1	88 55 f3	 mov	 BYTE PTR _outcode$1[ebp], dl

; 313  : 		outcode &= clipping_vertices[count+2].outcode;

  001f4	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  001f7	83 c0 02	 add	 eax, 2
  001fa	c1 e0 06	 shl	 eax, 6
  001fd	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?clipping_vertices@@3PAUVERTEX@@A[eax+44]
  00204	0f b6 55 f3	 movzx	 edx, BYTE PTR _outcode$1[ebp]
  00208	23 d1		 and	 edx, ecx
  0020a	88 55 f3	 mov	 BYTE PTR _outcode$1[ebp], dl

; 314  : 
; 315  : 		if ( !outcode )

  0020d	0f b6 45 f3	 movzx	 eax, BYTE PTR _outcode$1[ebp]
  00211	85 c0		 test	 eax, eax
  00213	0f 85 f3 00 00
	00		 jne	 $LN11@clip_3d_tr

; 316  : 		{
; 317  : 
; 318  : 			current_clipping_primitives[number_of_clipping_primitives].number_of_edges = 3;

  00219	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_primitives@@3HA ; number_of_clipping_primitives
  0021e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_primitives@@3PAUCLIP_PRIMITIVE@@A ; current_clipping_primitives
  00224	c7 04 c1 03 00
	00 00		 mov	 DWORD PTR [ecx+eax*8], 3

; 319  : 	
; 320  : 			current_clipping_primitives[number_of_clipping_primitives].edges = &current_clipping_edge_references[number_of_clipping_edge_references];

  0022b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_edge_references@@3HA ; number_of_clipping_edge_references
  00230	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edge_references@@3PAUCLIP_PRIMITIVE_EDGE_REFERENCE@@A ; current_clipping_edge_references
  00236	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00239	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_primitives@@3HA ; number_of_clipping_primitives
  0023e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_primitives@@3PAUCLIP_PRIMITIVE@@A ; current_clipping_primitives
  00244	89 54 c1 04	 mov	 DWORD PTR [ecx+eax*8+4], edx

; 321  : 	
; 322  : 			current_clipping_edge_references[number_of_clipping_edge_references].direction = 0;

  00248	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_edge_references@@3HA ; number_of_clipping_edge_references
  0024d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edge_references@@3PAUCLIP_PRIMITIVE_EDGE_REFERENCE@@A ; current_clipping_edge_references
  00253	c6 04 81 00	 mov	 BYTE PTR [ecx+eax*4], 0

; 323  : 			current_clipping_edge_references[number_of_clipping_edge_references].edge_index = count;

  00257	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_edge_references@@3HA ; number_of_clipping_edge_references
  0025c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edge_references@@3PAUCLIP_PRIMITIVE_EDGE_REFERENCE@@A ; current_clipping_edge_references
  00262	8a 55 fc	 mov	 dl, BYTE PTR _count$[ebp]
  00265	88 54 81 01	 mov	 BYTE PTR [ecx+eax*4+1], dl

; 324  : 	
; 325  : 			current_clipping_edge_references[number_of_clipping_edge_references+1].direction = 0;

  00269	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_edge_references@@3HA ; number_of_clipping_edge_references
  0026e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edge_references@@3PAUCLIP_PRIMITIVE_EDGE_REFERENCE@@A ; current_clipping_edge_references
  00274	c6 44 81 04 00	 mov	 BYTE PTR [ecx+eax*4+4], 0

; 326  : 			current_clipping_edge_references[number_of_clipping_edge_references+1].edge_index = ( count + number_of_clipping_vertices - 1 );

  00279	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_vertices@@3HA ; number_of_clipping_vertices
  0027e	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  00281	8d 54 01 ff	 lea	 edx, DWORD PTR [ecx+eax-1]
  00285	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_edge_references@@3HA ; number_of_clipping_edge_references
  0028a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edge_references@@3PAUCLIP_PRIMITIVE_EDGE_REFERENCE@@A ; current_clipping_edge_references
  00290	88 54 81 05	 mov	 BYTE PTR [ecx+eax*4+5], dl

; 327  : 	
; 328  : 			current_clipping_edge_references[number_of_clipping_edge_references+2].direction = 1;

  00294	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_edge_references@@3HA ; number_of_clipping_edge_references
  00299	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edge_references@@3PAUCLIP_PRIMITIVE_EDGE_REFERENCE@@A ; current_clipping_edge_references
  0029f	c6 44 81 08 01	 mov	 BYTE PTR [ecx+eax*4+8], 1

; 329  : 			current_clipping_edge_references[number_of_clipping_edge_references+2].edge_index = count+1;

  002a4	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  002a7	83 c0 01	 add	 eax, 1
  002aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?number_of_clipping_edge_references@@3HA ; number_of_clipping_edge_references
  002b0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_clipping_edge_references@@3PAUCLIP_PRIMITIVE_EDGE_REFERENCE@@A ; current_clipping_edge_references
  002b6	88 44 8a 09	 mov	 BYTE PTR [edx+ecx*4+9], al

; 330  : 
; 331  : 			//
; 332  : 	 		// Validate the edges.
; 333  : 			//
; 334  : 
; 335  : 			current_clipping_edges[count].clip_status = CLIP_STATUS_UNCLIPPED;

  002ba	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  002bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  002c3	c7 04 c1 01 00
	00 00		 mov	 DWORD PTR [ecx+eax*8], 1

; 336  : 			current_clipping_edges[count+1].clip_status = CLIP_STATUS_UNCLIPPED;

  002ca	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  002cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  002d3	c7 44 c1 08 01
	00 00 00	 mov	 DWORD PTR [ecx+eax*8+8], 1

; 337  : 			current_clipping_edges[ ( count + number_of_clipping_vertices - 1 ) ].clip_status = CLIP_STATUS_UNCLIPPED;

  002db	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  002de	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?number_of_clipping_vertices@@3HA ; number_of_clipping_vertices
  002e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_clipping_edges@@3PAUCLIP_PRIMITIVE_EDGE@@A ; current_clipping_edges
  002ea	c7 44 c1 f8 01
	00 00 00	 mov	 DWORD PTR [ecx+eax*8-8], 1

; 338  : 
; 339  : 			number_of_clipping_primitives++;

  002f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_primitives@@3HA ; number_of_clipping_primitives
  002f7	83 c0 01	 add	 eax, 1
  002fa	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_clipping_primitives@@3HA, eax ; number_of_clipping_primitives

; 340  : 
; 341  : 			number_of_clipping_edge_references += 3;

  002ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_clipping_edge_references@@3HA ; number_of_clipping_edge_references
  00304	83 c0 03	 add	 eax, 3
  00307	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_clipping_edge_references@@3HA, eax ; number_of_clipping_edge_references
$LN11@clip_3d_tr:

; 342  : 		}
; 343  : 	}

  0030c	e9 a4 fe ff ff	 jmp	 $LN8@clip_3d_tr
$LN9@clip_3d_tr:

; 344  : 
; 345  : 	//
; 346  : 	// Now hand over to the clipper part
; 347  : 	//
; 348  : 
; 349  : 	clip_3d_primitives ( whole_outcode );

  00311	8b 45 0c	 mov	 eax, DWORD PTR _whole_outcode$[ebp]
  00314	50		 push	 eax
  00315	e8 00 00 00 00	 call	 ?clip_3d_primitives@@YGXH@Z ; clip_3d_primitives

; 350  : }

  0031a	5f		 pop	 edi
  0031b	5e		 pop	 esi
  0031c	5b		 pop	 ebx
  0031d	8b e5		 mov	 esp, ebp
  0031f	5d		 pop	 ebp
  00320	c2 08 00	 ret	 8
?clip_3d_triangle_fan@@YGXHH@Z ENDP			; clip_3d_triangle_fan
_TEXT	ENDS
END
