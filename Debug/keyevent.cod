; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\system\keyevent.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?process_key_event@@YGHPAUEVENT@@@Z		; process_key_event
PUBLIC	?__LINE__Var@?0??process_key_event@@YGHPAUEVENT@@@Z@4JA ; `process_key_event'::`1'::__LINE__Var
PUBLIC	??_C@_0DH@IMCMKBNM@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0BO@NEPDEPFI@ev?9?$DOstate?5?$CB?$DN?5KEY_STATE_EITHER@ ; `string'
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?registered_events@@3PAY08UREGISTERED_EVENT_TYPE@@A:BYTE ; registered_events
EXTRN	?current_modifier_states@@3HA:DWORD		; current_modifier_states
;	COMDAT ??_C@_0BO@NEPDEPFI@ev?9?$DOstate?5?$CB?$DN?5KEY_STATE_EITHER@
CONST	SEGMENT
??_C@_0BO@NEPDEPFI@ev?9?$DOstate?5?$CB?$DN?5KEY_STATE_EITHER@ DB 'ev->sta'
	DB	'te != KEY_STATE_EITHER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@IMCMKBNM@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DH@IMCMKBNM@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\system\keyevent.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??process_key_event@@YGHPAUEVENT@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??process_key_event@@YGHPAUEVENT@@@Z@4JA DD 050H ; `process_key_event'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\keyevent.c
;	COMDAT ?process_modifiers@@YGHPAUEVENT@@@Z
_TEXT	SEGMENT
tv66 = -80						; size = 4
_modifier$ = -12					; size = 4
_key$ = -8						; size = 4
_loop$ = -4						; size = 4
_ev$ = 8						; size = 4
?process_modifiers@@YGHPAUEVENT@@@Z PROC		; process_modifiers, COMDAT

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 143  : 
; 144  :    int
; 145  :       loop,
; 146  : 		key,
; 147  :       modifier;
; 148  : 
; 149  :    switch (ev->key)

  00009	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0000c	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  00010	89 4d b0	 mov	 DWORD PTR tv66[ebp], ecx
  00013	8b 55 b0	 mov	 edx, DWORD PTR tv66[ebp]
  00016	83 ea 1d	 sub	 edx, 29			; 0000001dH
  00019	89 55 b0	 mov	 DWORD PTR tv66[ebp], edx
  0001c	81 7d b0 9b 00
	00 00		 cmp	 DWORD PTR tv66[ebp], 155 ; 0000009bH
  00023	77 71		 ja	 SHORT $LN13@process_mo
  00025	8b 45 b0	 mov	 eax, DWORD PTR tv66[ebp]
  00028	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN21@process_mo[eax]
  0002f	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN22@process_mo[ecx*4]
$LN7@process_mo:

; 150  :    {
; 151  : 
; 152  :       case DIK_LSHIFT:
; 153  :       {
; 154  : 
; 155  :          modifier = 1 << MODIFIER_LEFT_SHIFT;

  00036	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _modifier$[ebp], 2

; 156  : 
; 157  :          key = MODIFIER_LEFT_SHIFT;

  0003d	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _key$[ebp], 1

; 158  : 
; 159  :          break;

  00044	eb 57		 jmp	 SHORT $LN2@process_mo
$LN8@process_mo:

; 160  :       }
; 161  :    
; 162  :       case DIK_LCONTROL:
; 163  :       {
; 164  :    
; 165  :          modifier = 1 << MODIFIER_LEFT_CONTROL;

  00046	c7 45 f4 04 00
	00 00		 mov	 DWORD PTR _modifier$[ebp], 4

; 166  : 
; 167  :          key = MODIFIER_LEFT_CONTROL;

  0004d	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _key$[ebp], 2

; 168  : 
; 169  :          break;

  00054	eb 47		 jmp	 SHORT $LN2@process_mo
$LN9@process_mo:

; 170  :       }
; 171  :    
; 172  :       case DIK_LMENU:
; 173  :       {
; 174  :    
; 175  :          modifier = 1 << MODIFIER_LEFT_ALT;

  00056	c7 45 f4 08 00
	00 00		 mov	 DWORD PTR _modifier$[ebp], 8

; 176  : 
; 177  :          key = MODIFIER_LEFT_ALT;

  0005d	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _key$[ebp], 3

; 178  : 
; 179  :          break;

  00064	eb 37		 jmp	 SHORT $LN2@process_mo
$LN10@process_mo:

; 180  :       }
; 181  :    
; 182  :       case DIK_RSHIFT:
; 183  :       {
; 184  :    
; 185  :          modifier = 1 << MODIFIER_RIGHT_SHIFT;

  00066	c7 45 f4 10 00
	00 00		 mov	 DWORD PTR _modifier$[ebp], 16 ; 00000010H

; 186  : 
; 187  :          key = MODIFIER_RIGHT_SHIFT;

  0006d	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _key$[ebp], 4

; 188  :    
; 189  :          break;

  00074	eb 27		 jmp	 SHORT $LN2@process_mo
$LN11@process_mo:

; 190  :       }
; 191  :    
; 192  :       case DIK_RCONTROL:
; 193  :       {
; 194  :    
; 195  :          modifier = 1 << MODIFIER_RIGHT_CONTROL;

  00076	c7 45 f4 20 00
	00 00		 mov	 DWORD PTR _modifier$[ebp], 32 ; 00000020H

; 196  : 
; 197  :          key = MODIFIER_RIGHT_CONTROL;

  0007d	c7 45 f8 05 00
	00 00		 mov	 DWORD PTR _key$[ebp], 5

; 198  :    
; 199  :          break;

  00084	eb 17		 jmp	 SHORT $LN2@process_mo
$LN12@process_mo:

; 200  :       }
; 201  :    
; 202  :       case DIK_RMENU:
; 203  :       {
; 204  :    
; 205  :          modifier = 1 << MODIFIER_RIGHT_ALT;

  00086	c7 45 f4 40 00
	00 00		 mov	 DWORD PTR _modifier$[ebp], 64 ; 00000040H

; 206  : 
; 207  :          key = MODIFIER_RIGHT_ALT;

  0008d	c7 45 f8 06 00
	00 00		 mov	 DWORD PTR _key$[ebp], 6

; 208  : 
; 209  :          break;

  00094	eb 07		 jmp	 SHORT $LN2@process_mo
$LN13@process_mo:

; 210  :       }
; 211  :    
; 212  :       default:
; 213  :       {
; 214  : 
; 215  :          return FALSE;

  00096	33 c0		 xor	 eax, eax
  00098	e9 d8 00 00 00	 jmp	 $LN1@process_mo
$LN2@process_mo:

; 216  :       }
; 217  :    }
; 218  : 
; 219  :    if (ev->state == KEY_STATE_UP)

  0009d	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  000a0	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  000a4	83 f9 01	 cmp	 ecx, 1
  000a7	0f 85 b6 00 00
	00		 jne	 $LN14@process_mo

; 220  :    {
; 221  : 
; 222  :       for (loop = 0; loop < MAX_NUMBER_REGISTERED_EVENTS; loop ++)

  000ad	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  000b4	eb 09		 jmp	 SHORT $LN6@process_mo
$LN4@process_mo:
  000b6	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  000b9	83 c0 01	 add	 eax, 1
  000bc	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN6@process_mo:
  000bf	81 7d fc 2c 01
	00 00		 cmp	 DWORD PTR _loop$[ebp], 300 ; 0000012cH
  000c6	0f 8d 88 00 00
	00		 jge	 $LN5@process_mo

; 223  :       {
; 224  : 
; 225  :          if ((registered_events [loop][key].in_use) && (registered_events [loop][key].current_state != KEY_STATE_UP))

  000cc	6b 45 fc 48	 imul	 eax, DWORD PTR _loop$[ebp], 72
  000d0	8b 4d f8	 mov	 ecx, DWORD PTR _key$[ebp]
  000d3	0f b6 94 c8 00
	00 00 00	 movzx	 edx, BYTE PTR ?registered_events@@3PAY08UREGISTERED_EVENT_TYPE@@A[eax+ecx*8]
  000db	85 d2		 test	 edx, edx
  000dd	74 70		 je	 SHORT $LN16@process_mo
  000df	6b 45 fc 48	 imul	 eax, DWORD PTR _loop$[ebp], 72
  000e3	8b 4d f8	 mov	 ecx, DWORD PTR _key$[ebp]
  000e6	0f b6 94 c8 01
	00 00 00	 movzx	 edx, BYTE PTR ?registered_events@@3PAY08UREGISTERED_EVENT_TYPE@@A[eax+ecx*8+1]
  000ee	83 fa 01	 cmp	 edx, 1
  000f1	74 5c		 je	 SHORT $LN16@process_mo

; 226  :          {
; 227  : 
; 228  : 				registered_events [loop][key].current_state = KEY_STATE_UP;

  000f3	6b 45 fc 48	 imul	 eax, DWORD PTR _loop$[ebp], 72
  000f7	8b 4d f8	 mov	 ecx, DWORD PTR _key$[ebp]
  000fa	c6 84 c8 01 00
	00 00 01	 mov	 BYTE PTR ?registered_events@@3PAY08UREGISTERED_EVENT_TYPE@@A[eax+ecx*8+1], 1

; 229  : 
; 230  :             if ((registered_events [loop][key].notify_state == KEY_STATE_UP) ||

  00102	6b 45 fc 48	 imul	 eax, DWORD PTR _loop$[ebp], 72
  00106	8b 4d f8	 mov	 ecx, DWORD PTR _key$[ebp]
  00109	0f b6 94 c8 02
	00 00 00	 movzx	 edx, BYTE PTR ?registered_events@@3PAY08UREGISTERED_EVENT_TYPE@@A[eax+ecx*8+2]
  00111	83 fa 01	 cmp	 edx, 1
  00114	74 14		 je	 SHORT $LN18@process_mo
  00116	6b 45 fc 48	 imul	 eax, DWORD PTR _loop$[ebp], 72
  0011a	8b 4d f8	 mov	 ecx, DWORD PTR _key$[ebp]
  0011d	0f b6 94 c8 02
	00 00 00	 movzx	 edx, BYTE PTR ?registered_events@@3PAY08UREGISTERED_EVENT_TYPE@@A[eax+ecx*8+2]
  00125	83 fa 03	 cmp	 edx, 3
  00128	75 25		 jne	 SHORT $LN16@process_mo
$LN18@process_mo:

; 231  :                (registered_events [loop][key].notify_state == KEY_STATE_EITHER))
; 232  :             {
; 233  : 
; 234  :                if (registered_events [loop][key].function)

  0012a	6b 45 fc 48	 imul	 eax, DWORD PTR _loop$[ebp], 72
  0012e	8b 4d f8	 mov	 ecx, DWORD PTR _key$[ebp]
  00131	83 bc c8 04 00
	00 00 00	 cmp	 DWORD PTR ?registered_events@@3PAY08UREGISTERED_EVENT_TYPE@@A[eax+ecx*8+4], 0
  00139	74 14		 je	 SHORT $LN16@process_mo

; 235  :                {
; 236  : 
; 237  :                   registered_events [loop][key].function (ev);

  0013b	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0013e	50		 push	 eax
  0013f	6b 4d fc 48	 imul	 ecx, DWORD PTR _loop$[ebp], 72
  00143	8b 55 f8	 mov	 edx, DWORD PTR _key$[ebp]
  00146	8b 84 d1 04 00
	00 00		 mov	 eax, DWORD PTR ?registered_events@@3PAY08UREGISTERED_EVENT_TYPE@@A[ecx+edx*8+4]
  0014d	ff d0		 call	 eax
$LN16@process_mo:

; 238  : 
; 239  : 						#if EVENT_DEBUG
; 240  : 
; 241  :                   debug_log ("key %d, modifier %d, current_state = %d, notify_state = %d", loop, key, registered_events [loop][key].current_state, registered_events [loop][key].notify_state);
; 242  : 
; 243  : 						#endif
; 244  :                }
; 245  :             }
; 246  :          }
; 247  :       }

  0014f	e9 62 ff ff ff	 jmp	 $LN4@process_mo
$LN5@process_mo:

; 248  : 
; 249  :       current_modifier_states ^= modifier;

  00154	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_modifier_states@@3HA ; current_modifier_states
  00159	33 45 f4	 xor	 eax, DWORD PTR _modifier$[ebp]
  0015c	a3 00 00 00 00	 mov	 DWORD PTR ?current_modifier_states@@3HA, eax ; current_modifier_states

; 250  :    }
; 251  :    else

  00161	eb 0d		 jmp	 SHORT $LN15@process_mo
$LN14@process_mo:

; 252  :    {
; 253  : 
; 254  :       current_modifier_states |= modifier;

  00163	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_modifier_states@@3HA ; current_modifier_states
  00168	0b 45 f4	 or	 eax, DWORD PTR _modifier$[ebp]
  0016b	a3 00 00 00 00	 mov	 DWORD PTR ?current_modifier_states@@3HA, eax ; current_modifier_states
$LN15@process_mo:

; 255  :    }
; 256  : 
; 257  : 	#if EVENT_DEBUG
; 258  : 
; 259  :    debug_log ("modifier states %d", current_modifier_states);
; 260  : 
; 261  : 	#endif
; 262  : 
; 263  :    return TRUE;

  00170	b8 01 00 00 00	 mov	 eax, 1
$LN1@process_mo:

; 264  : }

  00175	5f		 pop	 edi
  00176	5e		 pop	 esi
  00177	5b		 pop	 ebx
  00178	8b e5		 mov	 esp, ebp
  0017a	5d		 pop	 ebp
  0017b	c2 04 00	 ret	 4
  0017e	66 90		 npad	 2
$LN22@process_mo:
  00180	00 00 00 00	 DD	 $LN8@process_mo
  00184	00 00 00 00	 DD	 $LN7@process_mo
  00188	00 00 00 00	 DD	 $LN10@process_mo
  0018c	00 00 00 00	 DD	 $LN9@process_mo
  00190	00 00 00 00	 DD	 $LN11@process_mo
  00194	00 00 00 00	 DD	 $LN12@process_mo
  00198	00 00 00 00	 DD	 $LN13@process_mo
$LN21@process_mo:
  0019c	00		 DB	 0
  0019d	06		 DB	 6
  0019e	06		 DB	 6
  0019f	06		 DB	 6
  001a0	06		 DB	 6
  001a1	06		 DB	 6
  001a2	06		 DB	 6
  001a3	06		 DB	 6
  001a4	06		 DB	 6
  001a5	06		 DB	 6
  001a6	06		 DB	 6
  001a7	06		 DB	 6
  001a8	06		 DB	 6
  001a9	01		 DB	 1
  001aa	06		 DB	 6
  001ab	06		 DB	 6
  001ac	06		 DB	 6
  001ad	06		 DB	 6
  001ae	06		 DB	 6
  001af	06		 DB	 6
  001b0	06		 DB	 6
  001b1	06		 DB	 6
  001b2	06		 DB	 6
  001b3	06		 DB	 6
  001b4	06		 DB	 6
  001b5	02		 DB	 2
  001b6	06		 DB	 6
  001b7	03		 DB	 3
  001b8	06		 DB	 6
  001b9	06		 DB	 6
  001ba	06		 DB	 6
  001bb	06		 DB	 6
  001bc	06		 DB	 6
  001bd	06		 DB	 6
  001be	06		 DB	 6
  001bf	06		 DB	 6
  001c0	06		 DB	 6
  001c1	06		 DB	 6
  001c2	06		 DB	 6
  001c3	06		 DB	 6
  001c4	06		 DB	 6
  001c5	06		 DB	 6
  001c6	06		 DB	 6
  001c7	06		 DB	 6
  001c8	06		 DB	 6
  001c9	06		 DB	 6
  001ca	06		 DB	 6
  001cb	06		 DB	 6
  001cc	06		 DB	 6
  001cd	06		 DB	 6
  001ce	06		 DB	 6
  001cf	06		 DB	 6
  001d0	06		 DB	 6
  001d1	06		 DB	 6
  001d2	06		 DB	 6
  001d3	06		 DB	 6
  001d4	06		 DB	 6
  001d5	06		 DB	 6
  001d6	06		 DB	 6
  001d7	06		 DB	 6
  001d8	06		 DB	 6
  001d9	06		 DB	 6
  001da	06		 DB	 6
  001db	06		 DB	 6
  001dc	06		 DB	 6
  001dd	06		 DB	 6
  001de	06		 DB	 6
  001df	06		 DB	 6
  001e0	06		 DB	 6
  001e1	06		 DB	 6
  001e2	06		 DB	 6
  001e3	06		 DB	 6
  001e4	06		 DB	 6
  001e5	06		 DB	 6
  001e6	06		 DB	 6
  001e7	06		 DB	 6
  001e8	06		 DB	 6
  001e9	06		 DB	 6
  001ea	06		 DB	 6
  001eb	06		 DB	 6
  001ec	06		 DB	 6
  001ed	06		 DB	 6
  001ee	06		 DB	 6
  001ef	06		 DB	 6
  001f0	06		 DB	 6
  001f1	06		 DB	 6
  001f2	06		 DB	 6
  001f3	06		 DB	 6
  001f4	06		 DB	 6
  001f5	06		 DB	 6
  001f6	06		 DB	 6
  001f7	06		 DB	 6
  001f8	06		 DB	 6
  001f9	06		 DB	 6
  001fa	06		 DB	 6
  001fb	06		 DB	 6
  001fc	06		 DB	 6
  001fd	06		 DB	 6
  001fe	06		 DB	 6
  001ff	06		 DB	 6
  00200	06		 DB	 6
  00201	06		 DB	 6
  00202	06		 DB	 6
  00203	06		 DB	 6
  00204	06		 DB	 6
  00205	06		 DB	 6
  00206	06		 DB	 6
  00207	06		 DB	 6
  00208	06		 DB	 6
  00209	06		 DB	 6
  0020a	06		 DB	 6
  0020b	06		 DB	 6
  0020c	06		 DB	 6
  0020d	06		 DB	 6
  0020e	06		 DB	 6
  0020f	06		 DB	 6
  00210	06		 DB	 6
  00211	06		 DB	 6
  00212	06		 DB	 6
  00213	06		 DB	 6
  00214	06		 DB	 6
  00215	06		 DB	 6
  00216	06		 DB	 6
  00217	06		 DB	 6
  00218	06		 DB	 6
  00219	06		 DB	 6
  0021a	06		 DB	 6
  0021b	06		 DB	 6
  0021c	04		 DB	 4
  0021d	06		 DB	 6
  0021e	06		 DB	 6
  0021f	06		 DB	 6
  00220	06		 DB	 6
  00221	06		 DB	 6
  00222	06		 DB	 6
  00223	06		 DB	 6
  00224	06		 DB	 6
  00225	06		 DB	 6
  00226	06		 DB	 6
  00227	06		 DB	 6
  00228	06		 DB	 6
  00229	06		 DB	 6
  0022a	06		 DB	 6
  0022b	06		 DB	 6
  0022c	06		 DB	 6
  0022d	06		 DB	 6
  0022e	06		 DB	 6
  0022f	06		 DB	 6
  00230	06		 DB	 6
  00231	06		 DB	 6
  00232	06		 DB	 6
  00233	06		 DB	 6
  00234	06		 DB	 6
  00235	06		 DB	 6
  00236	06		 DB	 6
  00237	05		 DB	 5
?process_modifiers@@YGHPAUEVENT@@@Z ENDP		; process_modifiers
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\keyevent.c
;	COMDAT ?process_key_event@@YGHPAUEVENT@@@Z
_TEXT	SEGMENT
_loop$ = -4						; size = 4
_ev$ = 8						; size = 4
?process_key_event@@YGHPAUEVENT@@@Z PROC		; process_key_event, COMDAT

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 81   : 
; 82   :    int
; 83   :       loop;
; 84   : 
; 85   : 	ASSERT (ev->state != KEY_STATE_EITHER);

  00009	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0000c	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00010	83 f9 03	 cmp	 ecx, 3
  00013	75 18		 jne	 SHORT $LN5@process_ke
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??process_key_event@@YGHPAUEVENT@@@Z@4JA
  0001a	83 c0 05	 add	 eax, 5
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@IMCMKBNM@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@NEPDEPFI@ev?9?$DOstate?5?$CB?$DN?5KEY_STATE_EITHER@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@process_ke:

; 86   : 
; 87   : 	process_modifiers (ev);

  0002d	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?process_modifiers@@YGHPAUEVENT@@@Z ; process_modifiers

; 88   : 
; 89   : 	for (loop = MODIFIER_NONE; loop < NUM_MODIFIER_TYPES; loop ++)

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  0003d	eb 09		 jmp	 SHORT $LN4@process_ke
$LN2@process_ke:
  0003f	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00042	83 c0 01	 add	 eax, 1
  00045	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@process_ke:
  00048	83 7d fc 09	 cmp	 DWORD PTR _loop$[ebp], 9
  0004c	0f 8d fe 00 00
	00		 jge	 $LN3@process_ke

; 90   : 	{
; 91   : 
; 92   : 		if ((current_modifier_states & (1 << loop)) || ((current_modifier_states | loop) == 0) || (ev->state == KEY_STATE_UP))

  00052	b8 01 00 00 00	 mov	 eax, 1
  00057	8b 4d fc	 mov	 ecx, DWORD PTR _loop$[ebp]
  0005a	d3 e0		 shl	 eax, cl
  0005c	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?current_modifier_states@@3HA ; current_modifier_states
  00062	75 1a		 jne	 SHORT $LN7@process_ke
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_modifier_states@@3HA ; current_modifier_states
  00069	0b 45 fc	 or	 eax, DWORD PTR _loop$[ebp]
  0006c	74 10		 je	 SHORT $LN7@process_ke
  0006e	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00071	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00075	83 f9 01	 cmp	 ecx, 1
  00078	0f 85 cd 00 00
	00		 jne	 $LN6@process_ke
$LN7@process_ke:

; 93   : 		{
; 94   : 
; 95   : 			if (registered_events [ev->key][loop].current_state == ev->state)

  0007e	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00081	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  00085	6b d1 48	 imul	 edx, ecx, 72
  00088	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  0008b	0f b6 8c c2 01
	00 00 00	 movzx	 ecx, BYTE PTR ?registered_events@@3PAY08UREGISTERED_EVENT_TYPE@@A[edx+eax*8+1]
  00093	8b 55 08	 mov	 edx, DWORD PTR _ev$[ebp]
  00096	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  0009a	3b c8		 cmp	 ecx, eax
  0009c	75 02		 jne	 SHORT $LN8@process_ke

; 96   : 			{
; 97   : 
; 98   : 				continue;

  0009e	eb 9f		 jmp	 SHORT $LN2@process_ke
$LN8@process_ke:

; 99   : 			}
; 100  : 
; 101  : 			if (registered_events [ev->key][loop].in_use)

  000a0	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  000a3	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  000a7	6b d1 48	 imul	 edx, ecx, 72
  000aa	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  000ad	0f b6 8c c2 00
	00 00 00	 movzx	 ecx, BYTE PTR ?registered_events@@3PAY08UREGISTERED_EVENT_TYPE@@A[edx+eax*8]
  000b5	85 c9		 test	 ecx, ecx
  000b7	0f 84 8e 00 00
	00		 je	 $LN6@process_ke

; 102  : 			{
; 103  : 
; 104  : 				#if EVENT_DEBUG
; 105  : 
; 106  : 				debug_log ("KEY_EVENT: key %d, modifier %d, current_state = %d, notify_state = %d, event state = %d", ev->key, loop, registered_events [ev->key][loop].current_state, registered_events [ev->key][loop].notify_state, ev->state);
; 107  : 
; 108  : 				#endif
; 109  : 
; 110  : 				registered_events [ev->key][loop].current_state = ev->state;

  000bd	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  000c0	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  000c4	6b d1 48	 imul	 edx, ecx, 72
  000c7	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  000ca	8b 4d 08	 mov	 ecx, DWORD PTR _ev$[ebp]
  000cd	8a 49 08	 mov	 cl, BYTE PTR [ecx+8]
  000d0	88 8c c2 01 00
	00 00		 mov	 BYTE PTR ?registered_events@@3PAY08UREGISTERED_EVENT_TYPE@@A[edx+eax*8+1], cl

; 111  : 
; 112  : 				if ((registered_events [ev->key][loop].notify_state == ev->state) ||

  000d7	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  000da	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  000de	6b d1 48	 imul	 edx, ecx, 72
  000e1	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  000e4	0f b6 8c c2 02
	00 00 00	 movzx	 ecx, BYTE PTR ?registered_events@@3PAY08UREGISTERED_EVENT_TYPE@@A[edx+eax*8+2]
  000ec	8b 55 08	 mov	 edx, DWORD PTR _ev$[ebp]
  000ef	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  000f3	3b c8		 cmp	 ecx, eax
  000f5	74 1a		 je	 SHORT $LN11@process_ke
  000f7	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  000fa	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  000fe	6b d1 48	 imul	 edx, ecx, 72
  00101	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00104	0f b6 8c c2 02
	00 00 00	 movzx	 ecx, BYTE PTR ?registered_events@@3PAY08UREGISTERED_EVENT_TYPE@@A[edx+eax*8+2]
  0010c	83 f9 03	 cmp	 ecx, 3
  0010f	75 3a		 jne	 SHORT $LN6@process_ke
$LN11@process_ke:

; 113  : 					(registered_events [ev->key][loop].notify_state == KEY_STATE_EITHER))
; 114  : 				{
; 115  : 		
; 116  : 					if (registered_events [ev->key][loop].function)

  00111	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00114	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  00118	6b d1 48	 imul	 edx, ecx, 72
  0011b	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  0011e	83 bc c2 04 00
	00 00 00	 cmp	 DWORD PTR ?registered_events@@3PAY08UREGISTERED_EVENT_TYPE@@A[edx+eax*8+4], 0
  00126	74 23		 je	 SHORT $LN6@process_ke

; 117  : 					{
; 118  : 		
; 119  : 						#if EVENT_DEBUG
; 120  : 			
; 121  : 						debug_log ("KEY_EVENT: key event called");
; 122  : 			
; 123  : 						#endif
; 124  : 
; 125  : 						ev->modifier = loop;

  00128	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0012b	8a 4d fc	 mov	 cl, BYTE PTR _loop$[ebp]
  0012e	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 126  : 
; 127  : 						registered_events [ev->key][loop].function (ev);

  00131	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00134	50		 push	 eax
  00135	8b 4d 08	 mov	 ecx, DWORD PTR _ev$[ebp]
  00138	0f b6 51 06	 movzx	 edx, BYTE PTR [ecx+6]
  0013c	6b c2 48	 imul	 eax, edx, 72
  0013f	8b 4d fc	 mov	 ecx, DWORD PTR _loop$[ebp]
  00142	8b 94 c8 04 00
	00 00		 mov	 edx, DWORD PTR ?registered_events@@3PAY08UREGISTERED_EVENT_TYPE@@A[eax+ecx*8+4]
  00149	ff d2		 call	 edx
$LN6@process_ke:

; 128  : 					}
; 129  : 				}
; 130  : 			}
; 131  : 		}
; 132  : 	}

  0014b	e9 ef fe ff ff	 jmp	 $LN2@process_ke
$LN3@process_ke:

; 133  : 
; 134  :    return FALSE;

  00150	33 c0		 xor	 eax, eax

; 135  : }

  00152	5f		 pop	 edi
  00153	5e		 pop	 esi
  00154	5b		 pop	 ebx
  00155	8b e5		 mov	 esp, ebp
  00157	5d		 pop	 ebp
  00158	c2 04 00	 ret	 4
?process_key_event@@YGHPAUEVENT@@@Z ENDP		; process_key_event
_TEXT	ENDS
END
