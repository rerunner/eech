; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\sound\soundman.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?source_sound_samples@@3PAUSOUND_SAMPLE@@A	; source_sound_samples
PUBLIC	?number_of_source_sound_samples@@3HA		; number_of_source_sound_samples
PUBLIC	?current_system_sound_effects@@3PAUSYSTEM_SOUND_EFFECT@@A ; current_system_sound_effects
PUBLIC	?sound_system_initialised@@3HA			; sound_system_initialised
PUBLIC	?sound_system_paused@@3HA			; sound_system_paused
PUBLIC	?sound_volume_lookup_table@@3PAHA		; sound_volume_lookup_table
_BSS	SEGMENT
?source_sound_samples@@3PAUSOUND_SAMPLE@@A DD 01H DUP (?) ; source_sound_samples
?number_of_source_sound_samples@@3HA DD 01H DUP (?)	; number_of_source_sound_samples
?current_system_sound_effects@@3PAUSYSTEM_SOUND_EFFECT@@A DB 0a800H DUP (?) ; current_system_sound_effects
?sound_system_initialised@@3HA DD 01H DUP (?)		; sound_system_initialised
?sound_system_paused@@3HA DD 01H DUP (?)		; sound_system_paused
?sound_volume_lookup_table@@3PAHA DD 0100H DUP (?)	; sound_volume_lookup_table
_BSS	ENDS
PUBLIC	_acosf
PUBLIC	_fabsf
PUBLIC	?acos@@YGMM@Z					; acos
PUBLIC	?fabs@@YGMM@Z					; fabs
PUBLIC	?initialise_sound_system@@YGHXZ			; initialise_sound_system
PUBLIC	?deinitialise_sound_system@@YGXXZ		; deinitialise_sound_system
PUBLIC	?get_sound_system_devices@@YGHPAPBD0@Z		; get_sound_system_devices
PUBLIC	?allocate_source_sound_samples@@YGXH@Z		; allocate_source_sound_samples
PUBLIC	?deallocate_source_sound_samples@@YGXXZ		; deallocate_source_sound_samples
PUBLIC	?is_source_sound_sample_valid@@YGHH@Z		; is_source_sound_sample_valid
PUBLIC	?create_source_sound_sample@@YGXHW4SAMPLE_TYPES@@HH@Z ; create_source_sound_sample
PUBLIC	?destroy_source_sound_sample@@YGXH@Z		; destroy_source_sound_sample
PUBLIC	?load_source_sound_sample@@YGXHPAX@Z		; load_source_sound_sample
PUBLIC	?create_single_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@HHHPAXH@Z ; create_single_system_sound_effect
PUBLIC	?create_sequenced_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@HPAUSOUND_SEQUENCE_INFORMATION@@HPAXH@Z ; create_sequenced_system_sound_effect
PUBLIC	?get_system_sound_effect_playing@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z ; get_system_sound_effect_playing
PUBLIC	?destroy_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z ; destroy_system_sound_effect
PUBLIC	?set_system_sound_effect_user_data@@YGXPAUSYSTEM_SOUND_EFFECT@@PAX@Z ; set_system_sound_effect_user_data
PUBLIC	?get_system_sound_effect_user_data@@YGPAXPAUSYSTEM_SOUND_EFFECT@@@Z ; get_system_sound_effect_user_data
PUBLIC	?play_sequenced_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@HM@Z ; play_sequenced_system_sound_effect
PUBLIC	?play_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@M@Z ; play_system_sound_effect
PUBLIC	?pause_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z ; pause_system_sound_effect
PUBLIC	?continue_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z ; continue_system_sound_effect
PUBLIC	?get_first_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@XZ ; get_first_system_sound_effect
PUBLIC	?get_next_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@PAU1@@Z ; get_next_system_sound_effect
PUBLIC	?destroy_all_system_sound_effects@@YGXXZ	; destroy_all_system_sound_effects
PUBLIC	?update_system_sound_effect_system@@YGXXZ	; update_system_sound_effect_system
PUBLIC	?set_system_sound_effect_volume@@YGXPAUSYSTEM_SOUND_EFFECT@@H@Z ; set_system_sound_effect_volume
PUBLIC	?set_system_sound_listener_orientation@@YGXUVEC3D@@00@Z ; set_system_sound_listener_orientation
PUBLIC	?set_system_sound_effect_position@@YGXPAUSYSTEM_SOUND_EFFECT@@UVEC3D@@@Z ; set_system_sound_effect_position
PUBLIC	?set_system_sound_effect_pitch@@YGXPAUSYSTEM_SOUND_EFFECT@@M@Z ; set_system_sound_effect_pitch
PUBLIC	?pause_sound_system@@YGXXZ			; pause_sound_system
PUBLIC	?continue_sound_system@@YGXXZ			; continue_sound_system
PUBLIC	?get_sound_system_paused@@YGHXZ			; get_sound_system_paused
PUBLIC	?get_next_free_system_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@XZ ; get_next_free_system_system_sound_effect
PUBLIC	?reset_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z ; reset_system_sound_effect
PUBLIC	?get_system_sound_effect_panning@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z ; get_system_sound_effect_panning
PUBLIC	?get_system_sound_effect_pitch@@YGMPAUSYSTEM_SOUND_EFFECT@@@Z ; get_system_sound_effect_pitch
PUBLIC	?get_system_sound_effect_volume@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z ; get_system_sound_effect_volume
PUBLIC	?__LINE__Var@?0??allocate_source_sound_samples@@YGXH@Z@4JA ; `allocate_source_sound_samples'::`1'::__LINE__Var
PUBLIC	??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_06EBGNBFIA@number@			; `string'
PUBLIC	??_C@_0DD@BGLNHKHD@Unable?5to?5allocate?5enough?5memor@ ; `string'
PUBLIC	?__LINE__Var@?0??get_system_sound_effect_playing@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z@4JA ; `get_system_sound_effect_playing'::`1'::__LINE__Var
PUBLIC	??_C@_06HOPIODND@effect@			; `string'
PUBLIC	?__LINE__Var@?0??is_source_sound_sample_valid@@YGHH@Z@4JA ; `is_source_sound_sample_valid'::`1'::__LINE__Var
PUBLIC	??_C@_0BC@NMEGGNGI@sample_index?5?$DO?$DN?50@	; `string'
PUBLIC	??_C@_0CO@KJLNOECH@sample_index?5?$DM?5number_of_source@ ; `string'
PUBLIC	?__LINE__Var@?0??create_source_sound_sample@@YGXHW4SAMPLE_TYPES@@HH@Z@4JA ; `create_source_sound_sample'::`1'::__LINE__Var
PUBLIC	??_C@_0CO@GMFFJIOI@Leaking?5a?5DirectSoundBuffer?0?5Sa@ ; `string'
PUBLIC	?__LINE__Var@?0??destroy_source_sound_sample@@YGXH@Z@4JA ; `destroy_source_sound_sample'::`1'::__LINE__Var
PUBLIC	??_C@_0DA@KLCOIMK@source_sound_samples?$FLsample_ind@ ; `string'
PUBLIC	?__LINE__Var@?0??load_source_sound_sample@@YGXHPAX@Z@4JA ; `load_source_sound_sample'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??create_single_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@HHHPAXH@Z@4JA ; `create_single_system_sound_effect'::`1'::__LINE__Var
PUBLIC	??_C@_0BI@PKLJEGEL@sound_sample_index?5?$DO?$DN?50@ ; `string'
PUBLIC	??_C@_0DE@LFKENNEO@sound_sample_index?5?$DM?5number_of_@ ; `string'
PUBLIC	??_C@_0M@JDAJJIII@volume?5?$DO?$DN?50@		; `string'
PUBLIC	??_C@_0BP@KNGPAIJ@volume?5?$DM?$DN?5SOUND_MAXIMUM_VOLUME@ ; `string'
PUBLIC	?__LINE__Var@?0??create_sequenced_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@HPAUSOUND_SEQUENCE_INFORMATION@@HPAXH@Z@4JA ; `create_sequenced_system_sound_effect'::`1'::__LINE__Var
PUBLIC	??_C@_0BH@LCJMPJJI@number_of_samples?5?$DO?$DN?52@ ; `string'
PUBLIC	??_C@_0CK@CIBGBJDH@number_of_samples?5?$DM?5MAX_SEQUENC@ ; `string'
PUBLIC	??_C@_0CH@FNEJBNMO@samples?$FLcount?$FN?4sound_sample_ind@ ; `string'
PUBLIC	??_C@_0ED@IFDFGGIE@samples?$FLcount?$FN?4sound_sample_ind@ ; `string'
PUBLIC	?__LINE__Var@?0??destroy_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z@4JA ; `destroy_system_sound_effect'::`1'::__LINE__Var
PUBLIC	??_C@_0N@HBEMFBLI@effect?9?$DOused@		; `string'
PUBLIC	?__LINE__Var@?0??set_system_sound_effect_user_data@@YGXPAUSYSTEM_SOUND_EFFECT@@PAX@Z@4JA ; `set_system_sound_effect_user_data'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_system_sound_effect_user_data@@YGPAXPAUSYSTEM_SOUND_EFFECT@@@Z@4JA ; `get_system_sound_effect_user_data'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??play_sequenced_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@HM@Z@4JA ; `play_sequenced_system_sound_effect'::`1'::__LINE__Var
PUBLIC	??_C@_0BE@GMPOEBGO@sequence_index?5?$DO?$DN?50@	; `string'
PUBLIC	??_C@_0DF@KCONDKOK@sequence_index?5?$DM?5effect?9?$DOnumber@ ; `string'
PUBLIC	?__LINE__Var@?0??play_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@M@Z@4JA ; `play_system_sound_effect'::`1'::__LINE__Var
PUBLIC	??_C@_0BF@LNNPMPCK@effect?9?$DOsound_buffer@	; `string'
PUBLIC	?__LINE__Var@?0??pause_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z@4JA ; `pause_system_sound_effect'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??reset_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z@4JA ; `reset_system_sound_effect'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??continue_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z@4JA ; `continue_system_sound_effect'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??set_system_sound_effect_position@@YGXPAUSYSTEM_SOUND_EFFECT@@UVEC3D@@@Z@4JA ; `set_system_sound_effect_position'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_system_sound_effect_panning@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z@4JA ; `get_system_sound_effect_panning'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??set_system_sound_effect_pitch@@YGXPAUSYSTEM_SOUND_EFFECT@@M@Z@4JA ; `set_system_sound_effect_pitch'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_system_sound_effect_pitch@@YGMPAUSYSTEM_SOUND_EFFECT@@@Z@4JA ; `get_system_sound_effect_pitch'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??set_system_sound_effect_volume@@YGXPAUSYSTEM_SOUND_EFFECT@@H@Z@4JA ; `set_system_sound_effect_volume'::`1'::__LINE__Var
PUBLIC	??_C@_0BP@PEFGFLLH@volume?5?$DO?$DN?5SOUND_MINIMUM_VOLUME@ ; `string'
PUBLIC	?__LINE__Var@?0??get_system_sound_effect_volume@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z@4JA ; `get_system_sound_effect_volume'::`1'::__LINE__Var
PUBLIC	__real@0000000000000000
PUBLIC	__real@3dcccccd
PUBLIC	__real@3f800000
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@4000000000000000
PUBLIC	__real@4010000000000000
PUBLIC	__real@40490fdb
PUBLIC	__real@406fe00000000000
PUBLIC	__real@40800000
PUBLIC	__real@461c4000
PUBLIC	__real@c08f400000000000
PUBLIC	__real@c0c3880000000000
PUBLIC	__real@c69c4000
EXTRN	_memcpy:PROC
EXTRN	_acos:PROC
EXTRN	_fabs:PROC
EXTRN	_log:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
EXTRN	?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z:PROC	; normalise_any_3d_vector
EXTRN	?get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z:PROC ; get_3d_unit_vector_dot_product
EXTRN	?initialise_direct_sound@@YGHXZ:PROC		; initialise_direct_sound
EXTRN	?dsound_create_sound_buffer@@YGPAUIDirectSoundBuffer@@W4SAMPLE_TYPES@@HH@Z:PROC ; dsound_create_sound_buffer
EXTRN	?dsound_duplicate_sound_buffer@@YGPAUIDirectSoundBuffer@@PAU1@H@Z:PROC ; dsound_duplicate_sound_buffer
EXTRN	?dsound_destroy_sound_buffer@@YGXPAUIDirectSoundBuffer@@@Z:PROC ; dsound_destroy_sound_buffer
EXTRN	?dsound_play_sound_buffer@@YGXPAUIDirectSoundBuffer@@H@Z:PROC ; dsound_play_sound_buffer
EXTRN	?dsound_stop_sound_buffer@@YGXPAUIDirectSoundBuffer@@@Z:PROC ; dsound_stop_sound_buffer
EXTRN	?dsound_set_sound_buffer_rate@@YGXPAUIDirectSoundBuffer@@H@Z:PROC ; dsound_set_sound_buffer_rate
EXTRN	?dsound_set_sound_buffer_volume@@YGXPAUIDirectSoundBuffer@@H@Z:PROC ; dsound_set_sound_buffer_volume
EXTRN	?dsound_set_sound_buffer_pan@@YGXPAUIDirectSoundBuffer@@H@Z:PROC ; dsound_set_sound_buffer_pan
EXTRN	?dsound_set_sound_buffer_position@@YGXPAUIDirectSoundBuffer@@H@Z:PROC ; dsound_set_sound_buffer_position
EXTRN	?dsound_get_sound_buffer_status@@YG?AW4SAMPLE_STATES@@PAUIDirectSoundBuffer@@@Z:PROC ; dsound_get_sound_buffer_status
EXTRN	?dsound_lock_sound_buffer@@YGPAEPAUIDirectSoundBuffer@@HH@Z:PROC ; dsound_lock_sound_buffer
EXTRN	?dsound_unlock_sound_buffer@@YGHPAUIDirectSoundBuffer@@PAEH@Z:PROC ; dsound_unlock_sound_buffer
EXTRN	?command_line_sound_hdwrbuf@@3HA:DWORD		; command_line_sound_hdwrbuf
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?maximum_current_system_sound_effects@@3HA DD 01H DUP (?) ; maximum_current_system_sound_effects
?listener_right@@3UVEC3D@@A DB 0cH DUP (?)		; listener_right
_BSS	ENDS
;	COMDAT __real@c69c4000
CONST	SEGMENT
__real@c69c4000 DD 0c69c4000r			; -20000
CONST	ENDS
;	COMDAT __real@c0c3880000000000
CONST	SEGMENT
__real@c0c3880000000000 DQ 0c0c3880000000000r	; -10000
CONST	ENDS
;	COMDAT __real@c08f400000000000
CONST	SEGMENT
__real@c08f400000000000 DQ 0c08f400000000000r	; -1000
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_system_sound_effect_volume@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_system_sound_effect_volume@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z@4JA DD 047aH ; `get_system_sound_effect_volume'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BP@PEFGFLLH@volume?5?$DO?$DN?5SOUND_MINIMUM_VOLUME@
CONST	SEGMENT
??_C@_0BP@PEFGFLLH@volume?5?$DO?$DN?5SOUND_MINIMUM_VOLUME@ DB 'volume >= '
	DB	'SOUND_MINIMUM_VOLUME', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??set_system_sound_effect_volume@@YGXPAUSYSTEM_SOUND_EFFECT@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_system_sound_effect_volume@@YGXPAUSYSTEM_SOUND_EFFECT@@H@Z@4JA DD 0468H ; `set_system_sound_effect_volume'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_system_sound_effect_pitch@@YGMPAUSYSTEM_SOUND_EFFECT@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_system_sound_effect_pitch@@YGMPAUSYSTEM_SOUND_EFFECT@@@Z@4JA DD 045aH ; `get_system_sound_effect_pitch'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??set_system_sound_effect_pitch@@YGXPAUSYSTEM_SOUND_EFFECT@@M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_system_sound_effect_pitch@@YGXPAUSYSTEM_SOUND_EFFECT@@M@Z@4JA DD 0440H ; `set_system_sound_effect_pitch'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_system_sound_effect_panning@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_system_sound_effect_panning@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z@4JA DD 0432H ; `get_system_sound_effect_panning'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??set_system_sound_effect_position@@YGXPAUSYSTEM_SOUND_EFFECT@@UVEC3D@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_system_sound_effect_position@@YGXPAUSYSTEM_SOUND_EFFECT@@UVEC3D@@@Z@4JA DD 040fH ; `set_system_sound_effect_position'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??continue_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??continue_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z@4JA DD 03eeH ; `continue_system_sound_effect'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??reset_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??reset_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z@4JA DD 03d2H ; `reset_system_sound_effect'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??pause_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??pause_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z@4JA DD 03bbH ; `pause_system_sound_effect'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BF@LNNPMPCK@effect?9?$DOsound_buffer@
CONST	SEGMENT
??_C@_0BF@LNNPMPCK@effect?9?$DOsound_buffer@ DB 'effect->sound_buffer', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??play_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??play_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@M@Z@4JA DD 0396H ; `play_system_sound_effect'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DF@KCONDKOK@sequence_index?5?$DM?5effect?9?$DOnumber@
CONST	SEGMENT
??_C@_0DF@KCONDKOK@sequence_index?5?$DM?5effect?9?$DOnumber@ DB 'sequence'
	DB	'_index < effect->number_of_sequenced_samples', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GMPOEBGO@sequence_index?5?$DO?$DN?50@
CONST	SEGMENT
??_C@_0BE@GMPOEBGO@sequence_index?5?$DO?$DN?50@ DB 'sequence_index >= 0', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??play_sequenced_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@HM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??play_sequenced_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@HM@Z@4JA DD 034aH ; `play_sequenced_system_sound_effect'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_system_sound_effect_user_data@@YGPAXPAUSYSTEM_SOUND_EFFECT@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_system_sound_effect_user_data@@YGPAXPAUSYSTEM_SOUND_EFFECT@@@Z@4JA DD 02ceH ; `get_system_sound_effect_user_data'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??set_system_sound_effect_user_data@@YGXPAUSYSTEM_SOUND_EFFECT@@PAX@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_system_sound_effect_user_data@@YGXPAUSYSTEM_SOUND_EFFECT@@PAX@Z@4JA DD 02c2H ; `set_system_sound_effect_user_data'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0N@HBEMFBLI@effect?9?$DOused@
CONST	SEGMENT
??_C@_0N@HBEMFBLI@effect?9?$DOused@ DB 'effect->used', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??destroy_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??destroy_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z@4JA DD 02a9H ; `destroy_system_sound_effect'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0ED@IFDFGGIE@samples?$FLcount?$FN?4sound_sample_ind@
CONST	SEGMENT
??_C@_0ED@IFDFGGIE@samples?$FLcount?$FN?4sound_sample_ind@ DB 'samples[co'
	DB	'unt].sound_sample_index < number_of_source_sound_samples', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@FNEJBNMO@samples?$FLcount?$FN?4sound_sample_ind@
CONST	SEGMENT
??_C@_0CH@FNEJBNMO@samples?$FLcount?$FN?4sound_sample_ind@ DB 'samples[co'
	DB	'unt].sound_sample_index >= 0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@CIBGBJDH@number_of_samples?5?$DM?5MAX_SEQUENC@
CONST	SEGMENT
??_C@_0CK@CIBGBJDH@number_of_samples?5?$DM?5MAX_SEQUENC@ DB 'number_of_sa'
	DB	'mples < MAX_SEQUENCED_SAMPLES', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LCJMPJJI@number_of_samples?5?$DO?$DN?52@
CONST	SEGMENT
??_C@_0BH@LCJMPJJI@number_of_samples?5?$DO?$DN?52@ DB 'number_of_samples '
	DB	'>= 2', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??create_sequenced_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@HPAUSOUND_SEQUENCE_INFORMATION@@HPAXH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??create_sequenced_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@HPAUSOUND_SEQUENCE_INFORMATION@@HPAXH@Z@4JA DD 0252H ; `create_sequenced_system_sound_effect'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BP@KNGPAIJ@volume?5?$DM?$DN?5SOUND_MAXIMUM_VOLUME@
CONST	SEGMENT
??_C@_0BP@KNGPAIJ@volume?5?$DM?$DN?5SOUND_MAXIMUM_VOLUME@ DB 'volume <= S'
	DB	'OUND_MAXIMUM_VOLUME', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JDAJJIII@volume?5?$DO?$DN?50@
CONST	SEGMENT
??_C@_0M@JDAJJIII@volume?5?$DO?$DN?50@ DB 'volume >= 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@LFKENNEO@sound_sample_index?5?$DM?5number_of_@
CONST	SEGMENT
??_C@_0DE@LFKENNEO@sound_sample_index?5?$DM?5number_of_@ DB 'sound_sample'
	DB	'_index < number_of_source_sound_samples', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PKLJEGEL@sound_sample_index?5?$DO?$DN?50@
CONST	SEGMENT
??_C@_0BI@PKLJEGEL@sound_sample_index?5?$DO?$DN?50@ DB 'sound_sample_inde'
	DB	'x >= 0', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??create_single_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@HHHPAXH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??create_single_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@HHHPAXH@Z@4JA DD 020aH ; `create_single_system_sound_effect'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??load_source_sound_sample@@YGXHPAX@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??load_source_sound_sample@@YGXHPAX@Z@4JA DD 01f3H ; `load_source_sound_sample'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DA@KLCOIMK@source_sound_samples?$FLsample_ind@
CONST	SEGMENT
??_C@_0DA@KLCOIMK@source_sound_samples?$FLsample_ind@ DB 'source_sound_sa'
	DB	'mples[sample_index].sound_buffer', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??destroy_source_sound_sample@@YGXH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??destroy_source_sound_sample@@YGXH@Z@4JA DD 01ddH ; `destroy_source_sound_sample'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CO@GMFFJIOI@Leaking?5a?5DirectSoundBuffer?0?5Sa@
CONST	SEGMENT
??_C@_0CO@GMFFJIOI@Leaking?5a?5DirectSoundBuffer?0?5Sa@ DB 'Leaking a Dir'
	DB	'ectSoundBuffer, Sample index: %d', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??create_source_sound_sample@@YGXHW4SAMPLE_TYPES@@HH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??create_source_sound_sample@@YGXHW4SAMPLE_TYPES@@HH@Z@4JA DD 01c2H ; `create_source_sound_sample'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CO@KJLNOECH@sample_index?5?$DM?5number_of_source@
CONST	SEGMENT
??_C@_0CO@KJLNOECH@sample_index?5?$DM?5number_of_source@ DB 'sample_index'
	DB	' < number_of_source_sound_samples', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NMEGGNGI@sample_index?5?$DO?$DN?50@
CONST	SEGMENT
??_C@_0BC@NMEGGNGI@sample_index?5?$DO?$DN?50@ DB 'sample_index >= 0', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??is_source_sound_sample_valid@@YGHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??is_source_sound_sample_valid@@YGHH@Z@4JA DD 01acH ; `is_source_sound_sample_valid'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06HOPIODND@effect@
CONST	SEGMENT
??_C@_06HOPIODND@effect@ DB 'effect', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_system_sound_effect_playing@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_system_sound_effect_playing@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z@4JA DD 018dH ; `get_system_sound_effect_playing'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DD@BGLNHKHD@Unable?5to?5allocate?5enough?5memor@
CONST	SEGMENT
??_C@_0DD@BGLNHKHD@Unable?5to?5allocate?5enough?5memor@ DB 'Unable to all'
	DB	'ocate enough memory for sound samples', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBGNBFIA@number@
CONST	SEGMENT
??_C@_06EBGNBFIA@number@ DB 'number', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\sound\soundman.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??allocate_source_sound_samples@@YGXH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??allocate_source_sound_samples@@YGXH@Z@4JA DD 0e5H ; `allocate_source_sound_samples'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?get_system_sound_effect_volume@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z
_TEXT	SEGMENT
_effect$ = 8						; size = 4
?get_system_sound_effect_volume@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z PROC ; get_system_sound_effect_volume, COMDAT

; 1146 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1147 : 
; 1148 : 	ASSERT ( effect );

  00009	83 7d 08 00	 cmp	 DWORD PTR _effect$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_system
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_system_sound_effect_volume@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06HOPIODND@effect@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_system:

; 1149 : 	ASSERT ( effect->sound_buffer );

  00027	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	75 18		 jne	 SHORT $LN3@get_system
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_system_sound_effect_volume@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z@4JA
  00034	83 c0 03	 add	 eax, 3
  00037	50		 push	 eax
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LNNPMPCK@effect?9?$DOsound_buffer@
  00042	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_system:

; 1150 : 
; 1151 : 	return ( effect->volume );

  00047	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0004a	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [eax+136]

; 1152 : }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
?get_system_sound_effect_volume@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z ENDP ; get_system_sound_effect_volume
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?get_system_sound_effect_pitch@@YGMPAUSYSTEM_SOUND_EFFECT@@@Z
_TEXT	SEGMENT
tv82 = -68						; size = 4
_effect$ = 8						; size = 4
?get_system_sound_effect_pitch@@YGMPAUSYSTEM_SOUND_EFFECT@@@Z PROC ; get_system_sound_effect_pitch, COMDAT

; 1114 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1115 : 
; 1116 : 	ASSERT ( effect );

  00009	83 7d 08 00	 cmp	 DWORD PTR _effect$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_system
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_system_sound_effect_pitch@@YGMPAUSYSTEM_SOUND_EFFECT@@@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06HOPIODND@effect@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_system:

; 1117 : 	ASSERT ( effect->sound_buffer );

  00027	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	75 18		 jne	 SHORT $LN3@get_system
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_system_sound_effect_pitch@@YGMPAUSYSTEM_SOUND_EFFECT@@@Z@4JA
  00034	83 c0 03	 add	 eax, 3
  00037	50		 push	 eax
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LNNPMPCK@effect?9?$DOsound_buffer@
  00042	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_system:

; 1118 : 
; 1119 : 	return ( effect->pitch );

  00047	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0004a	f3 0f 10 80 a0
	00 00 00	 movss	 xmm0, DWORD PTR [eax+160]
  00052	f3 0f 11 45 bc	 movss	 DWORD PTR tv82[ebp], xmm0
  00057	d9 45 bc	 fld	 DWORD PTR tv82[ebp]

; 1120 : }

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
?get_system_sound_effect_pitch@@YGMPAUSYSTEM_SOUND_EFFECT@@@Z ENDP ; get_system_sound_effect_pitch
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?get_system_sound_effect_panning@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z
_TEXT	SEGMENT
_effect$ = 8						; size = 4
?get_system_sound_effect_panning@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z PROC ; get_system_sound_effect_panning, COMDAT

; 1074 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1075 : 
; 1076 : 	ASSERT ( effect );

  00009	83 7d 08 00	 cmp	 DWORD PTR _effect$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_system
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_system_sound_effect_panning@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06HOPIODND@effect@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_system:

; 1077 : 	ASSERT ( effect->sound_buffer );

  00027	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	75 18		 jne	 SHORT $LN3@get_system
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_system_sound_effect_panning@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z@4JA
  00034	83 c0 03	 add	 eax, 3
  00037	50		 push	 eax
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LNNPMPCK@effect?9?$DOsound_buffer@
  00042	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_system:

; 1078 : 
; 1079 : 	return ( effect->panning );

  00047	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0004a	8b 80 8c 00 00
	00		 mov	 eax, DWORD PTR [eax+140]

; 1080 : }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
?get_system_sound_effect_panning@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z ENDP ; get_system_sound_effect_panning
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?reset_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z
_TEXT	SEGMENT
_effect$ = 8						; size = 4
?reset_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z PROC ; reset_system_sound_effect, COMDAT

; 978  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 979  : 
; 980  : 	ASSERT ( effect );

  00009	83 7d 08 00	 cmp	 DWORD PTR _effect$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@reset_syst
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??reset_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06HOPIODND@effect@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@reset_syst:

; 981  : 	ASSERT ( effect->sound_buffer );

  00027	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	75 18		 jne	 SHORT $LN3@reset_syst
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??reset_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z@4JA
  00034	83 c0 03	 add	 eax, 3
  00037	50		 push	 eax
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LNNPMPCK@effect?9?$DOsound_buffer@
  00042	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@reset_syst:

; 982  : 
; 983  : 	if ( effect->number_of_sequenced_samples > 1 )

  00047	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0004a	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  0004e	7e 02		 jle	 SHORT $LN4@reset_syst

; 984  : 	{
; 985  : 
; 986  : 		//
; 987  : 		// Reset the sequence here.
; 988  : 		//
; 989  : 	}
; 990  : 	else

  00050	eb 0d		 jmp	 SHORT $LN1@reset_syst
$LN4@reset_syst:

; 991  : 	{
; 992  : 
; 993  : 		//
; 994  : 		// Set the position of the sound buffer now
; 995  : 		//
; 996  : 
; 997  : 		dsound_set_sound_buffer_position ( (LPDIRECTSOUNDBUFFER)effect->sound_buffer, 0 );

  00052	6a 00		 push	 0
  00054	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  00057	8b 08		 mov	 ecx, DWORD PTR [eax]
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ?dsound_set_sound_buffer_position@@YGXPAUIDirectSoundBuffer@@H@Z ; dsound_set_sound_buffer_position
$LN1@reset_syst:

; 998  : 	}
; 999  : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
?reset_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z ENDP ; reset_system_sound_effect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?get_next_free_system_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@XZ
_TEXT	SEGMENT
_count$ = -4						; size = 4
?get_next_free_system_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@XZ PROC ; get_next_free_system_system_sound_effect, COMDAT

; 350  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 351  : 
; 352  : 	int
; 353  : 		count;
; 354  : 
; 355  : 	for ( count = 0; count < maximum_current_system_sound_effects; count++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@get_next_f
$LN2@get_next_f:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@get_next_f:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?maximum_current_system_sound_effects@@3HA
  00024	7d 31		 jge	 SHORT $LN3@get_next_f

; 356  : 	{
; 357  : 
; 358  : 		if ( !current_system_sound_effects[count].used )

  00026	69 45 fc a8 00
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 168
  0002d	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR ?current_system_sound_effects@@3PAUSYSTEM_SOUND_EFFECT@@A[eax+152], 0
  00034	75 1f		 jne	 SHORT $LN5@get_next_f

; 359  : 		{
; 360  : 
; 361  : 			current_system_sound_effects[count].used = TRUE;

  00036	69 45 fc a8 00
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 168
  0003d	c7 80 98 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?current_system_sound_effects@@3PAUSYSTEM_SOUND_EFFECT@@A[eax+152], 1

; 362  : 
; 363  : 			return ( &current_system_sound_effects[count] );

  00047	69 45 fc a8 00
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 168
  0004e	05 00 00 00 00	 add	 eax, OFFSET ?current_system_sound_effects@@3PAUSYSTEM_SOUND_EFFECT@@A ; current_system_sound_effects
  00053	eb 04		 jmp	 SHORT $LN1@get_next_f
$LN5@get_next_f:

; 364  : 		}
; 365  : 	}

  00055	eb bb		 jmp	 SHORT $LN2@get_next_f
$LN3@get_next_f:

; 366  : 
; 367  : 	return ( NULL );

  00057	33 c0		 xor	 eax, eax
$LN1@get_next_f:

; 368  : }

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?get_next_free_system_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@XZ ENDP ; get_next_free_system_system_sound_effect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?get_sound_system_paused@@YGHXZ
_TEXT	SEGMENT
?get_sound_system_paused@@YGHXZ PROC			; get_sound_system_paused, COMDAT

; 1212 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1213 : 	return sound_system_paused;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sound_system_paused@@3HA ; sound_system_paused

; 1214 : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?get_sound_system_paused@@YGHXZ ENDP			; get_sound_system_paused
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?continue_sound_system@@YGXXZ
_TEXT	SEGMENT
_count$1 = -4						; size = 4
?continue_sound_system@@YGXXZ PROC			; continue_sound_system, COMDAT

; 1186 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1187 : 
; 1188 : 	if ( ( sound_system_initialised ) && ( sound_system_paused ) )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?sound_system_initialised@@3HA, 0 ; sound_system_initialised
  00010	74 73		 je	 SHORT $LN1@continue_s
  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?sound_system_paused@@3HA, 0 ; sound_system_paused
  00019	74 6a		 je	 SHORT $LN1@continue_s

; 1189 : 	{
; 1190 : 	
; 1191 : 		int
; 1192 : 			count;
; 1193 : 	
; 1194 : 		for ( count = 0; count < maximum_current_system_sound_effects; count++ )

  0001b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$1[ebp], 0
  00022	eb 09		 jmp	 SHORT $LN4@continue_s
$LN2@continue_s:
  00024	8b 45 fc	 mov	 eax, DWORD PTR _count$1[ebp]
  00027	83 c0 01	 add	 eax, 1
  0002a	89 45 fc	 mov	 DWORD PTR _count$1[ebp], eax
$LN4@continue_s:
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _count$1[ebp]
  00030	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?maximum_current_system_sound_effects@@3HA
  00036	7d 43		 jge	 SHORT $LN3@continue_s

; 1195 : 		{
; 1196 : 	
; 1197 : 			if ( ( current_system_sound_effects[count].used ) && ( !current_system_sound_effects[count].paused ) )

  00038	69 45 fc a8 00
	00 00		 imul	 eax, DWORD PTR _count$1[ebp], 168
  0003f	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR ?current_system_sound_effects@@3PAUSYSTEM_SOUND_EFFECT@@A[eax+152], 0
  00046	74 31		 je	 SHORT $LN6@continue_s
  00048	69 45 fc a8 00
	00 00		 imul	 eax, DWORD PTR _count$1[ebp], 168
  0004f	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR ?current_system_sound_effects@@3PAUSYSTEM_SOUND_EFFECT@@A[eax+144], 0
  00056	75 21		 jne	 SHORT $LN6@continue_s

; 1198 : 			{
; 1199 : 				dsound_play_sound_buffer ( (LPDIRECTSOUNDBUFFER)current_system_sound_effects[count].sound_buffer, current_system_sound_effects[count].looping );

  00058	69 45 fc a8 00
	00 00		 imul	 eax, DWORD PTR _count$1[ebp], 168
  0005f	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR ?current_system_sound_effects@@3PAUSYSTEM_SOUND_EFFECT@@A[eax+156]
  00065	51		 push	 ecx
  00066	69 55 fc a8 00
	00 00		 imul	 edx, DWORD PTR _count$1[ebp], 168
  0006d	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR ?current_system_sound_effects@@3PAUSYSTEM_SOUND_EFFECT@@A[edx]
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ?dsound_play_sound_buffer@@YGXPAUIDirectSoundBuffer@@H@Z ; dsound_play_sound_buffer
$LN6@continue_s:

; 1200 : 			}
; 1201 : 		}

  00079	eb a9		 jmp	 SHORT $LN2@continue_s
$LN3@continue_s:

; 1202 : 	
; 1203 : 		sound_system_paused = FALSE;

  0007b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?sound_system_paused@@3HA, 0 ; sound_system_paused
$LN1@continue_s:

; 1204 : 	}
; 1205 : }

  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	5b		 pop	 ebx
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c3		 ret	 0
?continue_sound_system@@YGXXZ ENDP			; continue_sound_system
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?pause_sound_system@@YGXXZ
_TEXT	SEGMENT
_count$1 = -4						; size = 4
?pause_sound_system@@YGXXZ PROC				; pause_sound_system, COMDAT

; 1159 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1160 : 
; 1161 : 	if ( ( sound_system_initialised ) && ( !sound_system_paused ) )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?sound_system_initialised@@3HA, 0 ; sound_system_initialised
  00010	74 65		 je	 SHORT $LN1@pause_soun
  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?sound_system_paused@@3HA, 0 ; sound_system_paused
  00019	75 5c		 jne	 SHORT $LN1@pause_soun

; 1162 : 	{
; 1163 : 	
; 1164 : 		int
; 1165 : 			count;
; 1166 : 	
; 1167 : 		for ( count = 0; count < maximum_current_system_sound_effects; count++ )

  0001b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$1[ebp], 0
  00022	eb 09		 jmp	 SHORT $LN4@pause_soun
$LN2@pause_soun:
  00024	8b 45 fc	 mov	 eax, DWORD PTR _count$1[ebp]
  00027	83 c0 01	 add	 eax, 1
  0002a	89 45 fc	 mov	 DWORD PTR _count$1[ebp], eax
$LN4@pause_soun:
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _count$1[ebp]
  00030	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?maximum_current_system_sound_effects@@3HA
  00036	7d 35		 jge	 SHORT $LN3@pause_soun

; 1168 : 		{
; 1169 : 	
; 1170 : 			if ( ( current_system_sound_effects[count].used ) && ( !current_system_sound_effects[count].paused ) )

  00038	69 45 fc a8 00
	00 00		 imul	 eax, DWORD PTR _count$1[ebp], 168
  0003f	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR ?current_system_sound_effects@@3PAUSYSTEM_SOUND_EFFECT@@A[eax+152], 0
  00046	74 23		 je	 SHORT $LN6@pause_soun
  00048	69 45 fc a8 00
	00 00		 imul	 eax, DWORD PTR _count$1[ebp], 168
  0004f	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR ?current_system_sound_effects@@3PAUSYSTEM_SOUND_EFFECT@@A[eax+144], 0
  00056	75 13		 jne	 SHORT $LN6@pause_soun

; 1171 : 			{
; 1172 : 	
; 1173 : 				dsound_stop_sound_buffer ( (LPDIRECTSOUNDBUFFER)current_system_sound_effects[count].sound_buffer );

  00058	69 45 fc a8 00
	00 00		 imul	 eax, DWORD PTR _count$1[ebp], 168
  0005f	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_system_sound_effects@@3PAUSYSTEM_SOUND_EFFECT@@A[eax]
  00065	51		 push	 ecx
  00066	e8 00 00 00 00	 call	 ?dsound_stop_sound_buffer@@YGXPAUIDirectSoundBuffer@@@Z ; dsound_stop_sound_buffer
$LN6@pause_soun:

; 1174 : 			}
; 1175 : 		}

  0006b	eb b7		 jmp	 SHORT $LN2@pause_soun
$LN3@pause_soun:

; 1176 : 	
; 1177 : 		sound_system_paused = TRUE;

  0006d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?sound_system_paused@@3HA, 1 ; sound_system_paused
$LN1@pause_soun:

; 1178 : 	}
; 1179 : }

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
?pause_sound_system@@YGXXZ ENDP				; pause_sound_system
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?set_system_sound_effect_pitch@@YGXPAUSYSTEM_SOUND_EFFECT@@M@Z
_TEXT	SEGMENT
_floatrate$ = -8					; size = 4
_intrate$ = -4						; size = 4
_effect$ = 8						; size = 4
_pitch$ = 12						; size = 4
?set_system_sound_effect_pitch@@YGXPAUSYSTEM_SOUND_EFFECT@@M@Z PROC ; set_system_sound_effect_pitch, COMDAT

; 1088 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1089 : 	int intrate; //Werewolf pitch - I hate typecasts
; 1090 : 	float floatrate;
; 1091 : 
; 1092 : 	ASSERT ( effect );

  00009	83 7d 08 00	 cmp	 DWORD PTR _effect$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@set_system
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_system_sound_effect_pitch@@YGXPAUSYSTEM_SOUND_EFFECT@@M@Z@4JA
  00014	83 c0 04	 add	 eax, 4
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06HOPIODND@effect@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@set_system:

; 1093 : 	ASSERT ( effect->sound_buffer );

  00027	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	75 18		 jne	 SHORT $LN3@set_system
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_system_sound_effect_pitch@@YGXPAUSYSTEM_SOUND_EFFECT@@M@Z@4JA
  00034	83 c0 05	 add	 eax, 5
  00037	50		 push	 eax
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LNNPMPCK@effect?9?$DOsound_buffer@
  00042	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@set_system:

; 1094 : 
; 1095 : 	if (pitch < 0.1)

  00047	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _pitch$[ebp]
  0004c	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fb999999999999a
  00054	66 0f 2f c8	 comisd	 xmm1, xmm0
  00058	76 0f		 jbe	 SHORT $LN4@set_system

; 1096 : 		pitch = 0.1;

  0005a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00062	f3 0f 11 45 0c	 movss	 DWORD PTR _pitch$[ebp], xmm0
  00067	eb 1c		 jmp	 SHORT $LN6@set_system
$LN4@set_system:

; 1097 : 	else if (pitch > 4.0)

  00069	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _pitch$[ebp]
  0006e	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4010000000000000
  00076	76 0d		 jbe	 SHORT $LN6@set_system

; 1098 : 		pitch = 4.0;

  00078	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  00080	f3 0f 11 45 0c	 movss	 DWORD PTR _pitch$[ebp], xmm0
$LN6@set_system:

; 1099 : 
; 1100 : 	effect->pitch = pitch;

  00085	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  00088	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  0008d	f3 0f 11 80 a0
	00 00 00	 movss	 DWORD PTR [eax+160], xmm0

; 1101 : 
; 1102 : 	floatrate = effect->rate*effect->pitch;

  00095	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  00098	f3 0f 2a 80 84
	00 00 00	 cvtsi2ss xmm0, DWORD PTR [eax+132]
  000a0	8b 4d 08	 mov	 ecx, DWORD PTR _effect$[ebp]
  000a3	f3 0f 59 81 a0
	00 00 00	 mulss	 xmm0, DWORD PTR [ecx+160]
  000ab	f3 0f 11 45 f8	 movss	 DWORD PTR _floatrate$[ebp], xmm0

; 1103 : 	convert_float_to_int (floatrate, &intrate);

  000b0	8d 45 fc	 lea	 eax, DWORD PTR _intrate$[ebp]
  000b3	50		 push	 eax
  000b4	51		 push	 ecx
  000b5	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _floatrate$[ebp]
  000ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bf	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 1104 : //	debug_log ( "sound effect pitch change, pitch=%.2f  effect->pitch=%.2f  intrate=%d", pitch, effect->pitch, intrate);
; 1105 : 
; 1106 : 	dsound_set_sound_buffer_rate ( (LPDIRECTSOUNDBUFFER)effect->sound_buffer, intrate);

  000c4	8b 45 fc	 mov	 eax, DWORD PTR _intrate$[ebp]
  000c7	50		 push	 eax
  000c8	8b 4d 08	 mov	 ecx, DWORD PTR _effect$[ebp]
  000cb	8b 11		 mov	 edx, DWORD PTR [ecx]
  000cd	52		 push	 edx
  000ce	e8 00 00 00 00	 call	 ?dsound_set_sound_buffer_rate@@YGXPAUIDirectSoundBuffer@@H@Z ; dsound_set_sound_buffer_rate

; 1107 : }

  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi
  000d5	5b		 pop	 ebx
  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c2 08 00	 ret	 8
?set_system_sound_effect_pitch@@YGXPAUSYSTEM_SOUND_EFFECT@@M@Z ENDP ; set_system_sound_effect_pitch
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?set_system_sound_effect_position@@YGXPAUSYSTEM_SOUND_EFFECT@@UVEC3D@@@Z
_TEXT	SEGMENT
_panning$ = -16						; size = 4
_temp$ = -12						; size = 4
_ang$ = -8						; size = 4
_length$ = -4						; size = 4
_effect$ = 8						; size = 4
_position$ = 12						; size = 12
?set_system_sound_effect_position@@YGXPAUSYSTEM_SOUND_EFFECT@@UVEC3D@@@Z PROC ; set_system_sound_effect_position, COMDAT

; 1039 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1040 : 	float
; 1041 : 		length,
; 1042 : 		ang,
; 1043 : 		temp;
; 1044 : 
; 1045 : 	int
; 1046 : 		panning;
; 1047 : 
; 1048 : 	ASSERT ( effect );

  00009	83 7d 08 00	 cmp	 DWORD PTR _effect$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@set_system
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_system_sound_effect_position@@YGXPAUSYSTEM_SOUND_EFFECT@@UVEC3D@@@Z@4JA
  00014	83 c0 09	 add	 eax, 9
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06HOPIODND@effect@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@set_system:

; 1049 : 	ASSERT ( effect->sound_buffer );

  00027	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	75 18		 jne	 SHORT $LN3@set_system
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_system_sound_effect_position@@YGXPAUSYSTEM_SOUND_EFFECT@@UVEC3D@@@Z@4JA
  00034	83 c0 0a	 add	 eax, 10			; 0000000aH
  00037	50		 push	 eax
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LNNPMPCK@effect?9?$DOsound_buffer@
  00042	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@set_system:

; 1050 : 
; 1051 : 	length = normalise_any_3d_vector ( &position );

  00047	8d 45 0c	 lea	 eax, DWORD PTR _position$[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  00050	d9 5d fc	 fstp	 DWORD PTR _length$[ebp]

; 1052 : 
; 1053 : 	if ( length == 0.0 )

  00053	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  00058	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00060	9f		 lahf
  00061	f6 c4 44	 test	 ah, 68			; 00000044H
  00064	7a 02		 jp	 SHORT $LN4@set_system

; 1054 : 	{
; 1055 : 		return;

  00066	eb 7a		 jmp	 SHORT $LN1@set_system
$LN4@set_system:

; 1056 : 	}
; 1057 : 
; 1058 : 	ang = fabs ( acos ( get_3d_unit_vector_dot_product ( &position, &listener_right) ) );

  00068	68 00 00 00 00	 push	 OFFSET ?listener_right@@3UVEC3D@@A
  0006d	8d 45 0c	 lea	 eax, DWORD PTR _position$[ebp]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z ; get_3d_unit_vector_dot_product
  00076	51		 push	 ecx
  00077	d9 1c 24	 fstp	 DWORD PTR [esp]
  0007a	e8 00 00 00 00	 call	 ?acos@@YGMM@Z		; acos
  0007f	51		 push	 ecx
  00080	d9 1c 24	 fstp	 DWORD PTR [esp]
  00083	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00088	d9 5d f8	 fstp	 DWORD PTR _ang$[ebp]

; 1059 : 
; 1060 : 	temp = 10000 + ( ( -10000 - 10000 ) * ( ang / PI ) );

  0008b	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _ang$[ebp]
  00090	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40490fdb
  00098	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@c69c4000
  000a0	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@461c4000
  000a8	f3 0f 11 45 f4	 movss	 DWORD PTR _temp$[ebp], xmm0

; 1061 : 
; 1062 : 	convert_float_to_int ( temp, &panning );

  000ad	8d 45 f0	 lea	 eax, DWORD PTR _panning$[ebp]
  000b0	50		 push	 eax
  000b1	51		 push	 ecx
  000b2	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _temp$[ebp]
  000b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bc	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 1063 : 
; 1064 : 	effect->panning = panning;

  000c1	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  000c4	8b 4d f0	 mov	 ecx, DWORD PTR _panning$[ebp]
  000c7	89 88 8c 00 00
	00		 mov	 DWORD PTR [eax+140], ecx

; 1065 : 
; 1066 : 	dsound_set_sound_buffer_pan ( (LPDIRECTSOUNDBUFFER)effect->sound_buffer, effect->panning );

  000cd	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  000d0	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  000d6	51		 push	 ecx
  000d7	8b 55 08	 mov	 edx, DWORD PTR _effect$[ebp]
  000da	8b 02		 mov	 eax, DWORD PTR [edx]
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 ?dsound_set_sound_buffer_pan@@YGXPAUIDirectSoundBuffer@@H@Z ; dsound_set_sound_buffer_pan
$LN1@set_system:

; 1067 : }

  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi
  000e4	5b		 pop	 ebx
  000e5	8b e5		 mov	 esp, ebp
  000e7	5d		 pop	 ebp
  000e8	c2 10 00	 ret	 16			; 00000010H
?set_system_sound_effect_position@@YGXPAUSYSTEM_SOUND_EFFECT@@UVEC3D@@@Z ENDP ; set_system_sound_effect_position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?set_system_sound_listener_orientation@@YGXUVEC3D@@00@Z
_TEXT	SEGMENT
_forward$ = 8						; size = 12
_up$ = 20						; size = 12
_right$ = 32						; size = 12
?set_system_sound_listener_orientation@@YGXUVEC3D@@00@Z PROC ; set_system_sound_listener_orientation, COMDAT

; 1029 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1030 : 	listener_right = right;

  00009	8b 45 20	 mov	 eax, DWORD PTR _right$[ebp]
  0000c	a3 00 00 00 00	 mov	 DWORD PTR ?listener_right@@3UVEC3D@@A, eax
  00011	8b 4d 24	 mov	 ecx, DWORD PTR _right$[ebp+4]
  00014	89 0d 04 00 00
	00		 mov	 DWORD PTR ?listener_right@@3UVEC3D@@A+4, ecx
  0001a	8b 55 28	 mov	 edx, DWORD PTR _right$[ebp+8]
  0001d	89 15 08 00 00
	00		 mov	 DWORD PTR ?listener_right@@3UVEC3D@@A+8, edx

; 1031 : }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 24 00	 ret	 36			; 00000024H
?set_system_sound_listener_orientation@@YGXUVEC3D@@00@Z ENDP ; set_system_sound_listener_orientation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?set_system_sound_effect_volume@@YGXPAUSYSTEM_SOUND_EFFECT@@H@Z
_TEXT	SEGMENT
_effect$ = 8						; size = 4
_volume$ = 12						; size = 4
?set_system_sound_effect_volume@@YGXPAUSYSTEM_SOUND_EFFECT@@H@Z PROC ; set_system_sound_effect_volume, COMDAT

; 1128 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1129 : 
; 1130 : 	ASSERT ( effect );

  00009	83 7d 08 00	 cmp	 DWORD PTR _effect$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@set_system
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_system_sound_effect_volume@@YGXPAUSYSTEM_SOUND_EFFECT@@H@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06HOPIODND@effect@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@set_system:

; 1131 : 	ASSERT ( effect->sound_buffer );

  00027	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	75 18		 jne	 SHORT $LN3@set_system
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_system_sound_effect_volume@@YGXPAUSYSTEM_SOUND_EFFECT@@H@Z@4JA
  00034	83 c0 03	 add	 eax, 3
  00037	50		 push	 eax
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LNNPMPCK@effect?9?$DOsound_buffer@
  00042	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@set_system:

; 1132 : 
; 1133 : 	ASSERT ( volume <= SOUND_MAXIMUM_VOLUME );

  00047	81 7d 0c ff 00
	00 00		 cmp	 DWORD PTR _volume$[ebp], 255 ; 000000ffH
  0004e	7e 18		 jle	 SHORT $LN4@set_system
  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_system_sound_effect_volume@@YGXPAUSYSTEM_SOUND_EFFECT@@H@Z@4JA
  00055	83 c0 05	 add	 eax, 5
  00058	50		 push	 eax
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@KNGPAIJ@volume?5?$DM?$DN?5SOUND_MAXIMUM_VOLUME@
  00063	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@set_system:

; 1134 : 	ASSERT ( volume >= SOUND_MINIMUM_VOLUME );

  00068	83 7d 0c 00	 cmp	 DWORD PTR _volume$[ebp], 0
  0006c	7d 18		 jge	 SHORT $LN5@set_system
  0006e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_system_sound_effect_volume@@YGXPAUSYSTEM_SOUND_EFFECT@@H@Z@4JA
  00073	83 c0 06	 add	 eax, 6
  00076	50		 push	 eax
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@PEFGFLLH@volume?5?$DO?$DN?5SOUND_MINIMUM_VOLUME@
  00081	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@set_system:

; 1135 : 
; 1136 : 	effect->volume = volume;

  00086	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  00089	8b 4d 0c	 mov	 ecx, DWORD PTR _volume$[ebp]
  0008c	89 88 88 00 00
	00		 mov	 DWORD PTR [eax+136], ecx

; 1137 : 
; 1138 : 	dsound_set_sound_buffer_volume ( (LPDIRECTSOUNDBUFFER)effect->sound_buffer, sound_volume_lookup_table[effect->volume] );

  00092	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  00095	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0009b	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?sound_volume_lookup_table@@3PAHA[ecx*4]
  000a2	52		 push	 edx
  000a3	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  000a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a8	51		 push	 ecx
  000a9	e8 00 00 00 00	 call	 ?dsound_set_sound_buffer_volume@@YGXPAUIDirectSoundBuffer@@H@Z ; dsound_set_sound_buffer_volume

; 1139 : }

  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 08 00	 ret	 8
?set_system_sound_effect_volume@@YGXPAUSYSTEM_SOUND_EFFECT@@H@Z ENDP ; set_system_sound_effect_volume
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?update_system_sound_effect_system@@YGXXZ
_TEXT	SEGMENT
_floatrate$1 = -20					; size = 4
_intrate$2 = -16					; size = 4
_sound_sample_index$3 = -12				; size = 4
_effect$ = -8						; size = 4
_count$ = -4						; size = 4
?update_system_sound_effect_system@@YGXXZ PROC		; update_system_sound_effect_system, COMDAT

; 730  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 731  : 
; 732  : 	int
; 733  : 		count;
; 734  : 
; 735  : 	system_sound_effect
; 736  : 		*effect;
; 737  : 
; 738  : 	if ( sound_system_initialised )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?sound_system_initialised@@3HA, 0 ; sound_system_initialised
  00010	0f 84 a7 01 00
	00		 je	 $LN3@update_sys

; 739  : 	{
; 740  : 	
; 741  : 		//
; 742  : 		// Go through all the sound effects, updating their properties.
; 743  : 		//
; 744  : 	
; 745  : 		for ( count = 0; count < maximum_current_system_sound_effects; count++ )

  00016	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0001d	eb 09		 jmp	 SHORT $LN4@update_sys
$LN2@update_sys:
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@update_sys:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0002b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?maximum_current_system_sound_effects@@3HA
  00031	0f 8d 86 01 00
	00		 jge	 $LN3@update_sys

; 746  : 		{
; 747  : 	
; 748  : 			effect = &current_system_sound_effects[count];

  00037	69 45 fc a8 00
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 168
  0003e	05 00 00 00 00	 add	 eax, OFFSET ?current_system_sound_effects@@3PAUSYSTEM_SOUND_EFFECT@@A ; current_system_sound_effects
  00043	89 45 f8	 mov	 DWORD PTR _effect$[ebp], eax

; 749  : 	
; 750  : 			if ( ( effect->used ) && ( effect->playing ) )

  00046	8b 45 f8	 mov	 eax, DWORD PTR _effect$[ebp]
  00049	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00050	0f 84 62 01 00
	00		 je	 $LN12@update_sys
  00056	8b 45 f8	 mov	 eax, DWORD PTR _effect$[ebp]
  00059	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [eax+148], 0
  00060	0f 84 52 01 00
	00		 je	 $LN12@update_sys

; 751  : 			{
; 752  : 	
; 753  : 				if ( effect->number_of_sequenced_samples == 1 )

  00066	8b 45 f8	 mov	 eax, DWORD PTR _effect$[ebp]
  00069	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  0006d	75 22		 jne	 SHORT $LN7@update_sys

; 754  : 				{
; 755  : 	
; 756  : 					//
; 757  : 					// Check the sound buffer really is still playing
; 758  : 					//
; 759  : 	
; 760  : 					if ( dsound_get_sound_buffer_status ( (LPDIRECTSOUNDBUFFER)effect->sound_buffer ) == SAMPLE_STATE_FINISHED )

  0006f	8b 45 f8	 mov	 eax, DWORD PTR _effect$[ebp]
  00072	8b 08		 mov	 ecx, DWORD PTR [eax]
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 ?dsound_get_sound_buffer_status@@YG?AW4SAMPLE_STATES@@PAUIDirectSoundBuffer@@@Z ; dsound_get_sound_buffer_status
  0007a	83 f8 03	 cmp	 eax, 3
  0007d	75 0d		 jne	 SHORT $LN9@update_sys

; 761  : 					{
; 762  : 	
; 763  : 						effect->playing = FALSE;

  0007f	8b 45 f8	 mov	 eax, DWORD PTR _effect$[ebp]
  00082	c7 80 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+148], 0
$LN9@update_sys:

; 764  : 					}
; 765  : 				}
; 766  : 				else

  0008c	e9 27 01 00 00	 jmp	 $LN12@update_sys
$LN7@update_sys:

; 767  : 				{
; 768  : 	
; 769  : 					//
; 770  : 					// Check the current sound buffer is still playing
; 771  : 					//
; 772  : 	
; 773  : 					if ( dsound_get_sound_buffer_status ( (LPDIRECTSOUNDBUFFER)effect->sound_buffer ) == SAMPLE_STATE_FINISHED )

  00091	8b 45 f8	 mov	 eax, DWORD PTR _effect$[ebp]
  00094	8b 08		 mov	 ecx, DWORD PTR [eax]
  00096	51		 push	 ecx
  00097	e8 00 00 00 00	 call	 ?dsound_get_sound_buffer_status@@YG?AW4SAMPLE_STATES@@PAUIDirectSoundBuffer@@@Z ; dsound_get_sound_buffer_status
  0009c	83 f8 03	 cmp	 eax, 3
  0009f	0f 85 13 01 00
	00		 jne	 $LN12@update_sys

; 774  : 					{
; 775  : 	
; 776  : 						if ( effect->current_sequenced_sample_offset == ( effect->number_of_sequenced_samples - 1 ) )

  000a5	8b 45 f8	 mov	 eax, DWORD PTR _effect$[ebp]
  000a8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ab	83 e9 01	 sub	 ecx, 1
  000ae	8b 55 f8	 mov	 edx, DWORD PTR _effect$[ebp]
  000b1	39 4a 08	 cmp	 DWORD PTR [edx+8], ecx
  000b4	75 12		 jne	 SHORT $LN11@update_sys

; 777  : 						{
; 778  : 	
; 779  : 							//
; 780  : 							// The sound effect has now finished the sequence
; 781  : 							//
; 782  : 	
; 783  : 							effect->playing = FALSE;

  000b6	8b 45 f8	 mov	 eax, DWORD PTR _effect$[ebp]
  000b9	c7 80 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+148], 0

; 784  : 						}
; 785  : 						else

  000c3	e9 f0 00 00 00	 jmp	 $LN12@update_sys
$LN11@update_sys:

; 786  : 						{
; 787  : 	
; 788  : 							int
; 789  : 								sound_sample_index;
; 790  : 							int intrate; //Werewolf pitch - I hate typecasts
; 791  : 							float floatrate = effect->rate*effect->pitch; //Werewolf

  000c8	8b 45 f8	 mov	 eax, DWORD PTR _effect$[ebp]
  000cb	f3 0f 2a 80 84
	00 00 00	 cvtsi2ss xmm0, DWORD PTR [eax+132]
  000d3	8b 4d f8	 mov	 ecx, DWORD PTR _effect$[ebp]
  000d6	f3 0f 59 81 a0
	00 00 00	 mulss	 xmm0, DWORD PTR [ecx+160]
  000de	f3 0f 11 45 ec	 movss	 DWORD PTR _floatrate$1[ebp], xmm0

; 792  : 	
; 793  : 							//
; 794  : 							// Move the samples along one in the sequence
; 795  : 							//
; 796  : 	
; 797  : 							effect->current_sequenced_sample_offset++;

  000e3	8b 45 f8	 mov	 eax, DWORD PTR _effect$[ebp]
  000e6	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000e9	83 c1 01	 add	 ecx, 1
  000ec	8b 55 f8	 mov	 edx, DWORD PTR _effect$[ebp]
  000ef	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 798  : 	
; 799  : 							//
; 800  : 							// Destroy the current duplicated sound buffer
; 801  : 							//
; 802  : 	
; 803  : 							dsound_destroy_sound_buffer ( (LPDIRECTSOUNDBUFFER)effect->sound_buffer );

  000f2	8b 45 f8	 mov	 eax, DWORD PTR _effect$[ebp]
  000f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f7	51		 push	 ecx
  000f8	e8 00 00 00 00	 call	 ?dsound_destroy_sound_buffer@@YGXPAUIDirectSoundBuffer@@@Z ; dsound_destroy_sound_buffer

; 804  : 	
; 805  : 							//
; 806  : 							// Duplicate the next sound buffer in the sequence
; 807  : 							//
; 808  : 	
; 809  : 							effect->rate = effect->sound_sample_sequence[ effect->current_sequenced_sample_offset ].rate;

  000fd	8b 45 f8	 mov	 eax, DWORD PTR _effect$[ebp]
  00100	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00103	8b 55 f8	 mov	 edx, DWORD PTR _effect$[ebp]
  00106	8b 45 f8	 mov	 eax, DWORD PTR _effect$[ebp]
  00109	8b 4c c8 10	 mov	 ecx, DWORD PTR [eax+ecx*8+16]
  0010d	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx

; 810  : 	
; 811  : 							sound_sample_index = effect->sound_sample_sequence[ effect->current_sequenced_sample_offset ].sound_sample_index;

  00113	8b 45 f8	 mov	 eax, DWORD PTR _effect$[ebp]
  00116	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00119	8b 55 f8	 mov	 edx, DWORD PTR _effect$[ebp]
  0011c	8b 44 ca 0c	 mov	 eax, DWORD PTR [edx+ecx*8+12]
  00120	89 45 f4	 mov	 DWORD PTR _sound_sample_index$3[ebp], eax

; 812  : 	
; 813  : 							effect->sound_buffer = dsound_duplicate_sound_buffer ( source_sound_samples[sound_sample_index].sound_buffer, source_sound_samples[sound_sample_index].size );

  00123	6b 45 f4 0c	 imul	 eax, DWORD PTR _sound_sample_index$3[ebp], 12
  00127	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  0012d	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  00131	52		 push	 edx
  00132	6b 45 f4 0c	 imul	 eax, DWORD PTR _sound_sample_index$3[ebp], 12
  00136	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  0013c	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0013f	52		 push	 edx
  00140	e8 00 00 00 00	 call	 ?dsound_duplicate_sound_buffer@@YGPAUIDirectSoundBuffer@@PAU1@H@Z ; dsound_duplicate_sound_buffer
  00145	8b 4d f8	 mov	 ecx, DWORD PTR _effect$[ebp]
  00148	89 01		 mov	 DWORD PTR [ecx], eax

; 814  : 	
; 815  : 							//
; 816  : 							// Start the buffer playing
; 817  : 							//
; 818  : 
; 819  : 							convert_float_to_int (floatrate, &intrate);

  0014a	8d 45 f0	 lea	 eax, DWORD PTR _intrate$2[ebp]
  0014d	50		 push	 eax
  0014e	51		 push	 ecx
  0014f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _floatrate$1[ebp]
  00154	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00159	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 820  : 							dsound_set_sound_buffer_rate ( (LPDIRECTSOUNDBUFFER)effect->sound_buffer, intrate); //Werewolf

  0015e	8b 45 f0	 mov	 eax, DWORD PTR _intrate$2[ebp]
  00161	50		 push	 eax
  00162	8b 4d f8	 mov	 ecx, DWORD PTR _effect$[ebp]
  00165	8b 11		 mov	 edx, DWORD PTR [ecx]
  00167	52		 push	 edx
  00168	e8 00 00 00 00	 call	 ?dsound_set_sound_buffer_rate@@YGXPAUIDirectSoundBuffer@@H@Z ; dsound_set_sound_buffer_rate

; 821  : 	
; 822  : 							dsound_set_sound_buffer_volume ( (LPDIRECTSOUNDBUFFER)effect->sound_buffer, sound_volume_lookup_table[effect->volume] );

  0016d	8b 45 f8	 mov	 eax, DWORD PTR _effect$[ebp]
  00170	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00176	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?sound_volume_lookup_table@@3PAHA[ecx*4]
  0017d	52		 push	 edx
  0017e	8b 45 f8	 mov	 eax, DWORD PTR _effect$[ebp]
  00181	8b 08		 mov	 ecx, DWORD PTR [eax]
  00183	51		 push	 ecx
  00184	e8 00 00 00 00	 call	 ?dsound_set_sound_buffer_volume@@YGXPAUIDirectSoundBuffer@@H@Z ; dsound_set_sound_buffer_volume

; 823  : 	
; 824  : 							dsound_set_sound_buffer_pan ( (LPDIRECTSOUNDBUFFER)effect->sound_buffer, effect->panning );

  00189	8b 45 f8	 mov	 eax, DWORD PTR _effect$[ebp]
  0018c	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00192	51		 push	 ecx
  00193	8b 55 f8	 mov	 edx, DWORD PTR _effect$[ebp]
  00196	8b 02		 mov	 eax, DWORD PTR [edx]
  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 ?dsound_set_sound_buffer_pan@@YGXPAUIDirectSoundBuffer@@H@Z ; dsound_set_sound_buffer_pan

; 825  : 	
; 826  : 							dsound_set_sound_buffer_position ( (LPDIRECTSOUNDBUFFER)effect->sound_buffer, 0 );

  0019e	6a 00		 push	 0
  001a0	8b 45 f8	 mov	 eax, DWORD PTR _effect$[ebp]
  001a3	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a5	51		 push	 ecx
  001a6	e8 00 00 00 00	 call	 ?dsound_set_sound_buffer_position@@YGXPAUIDirectSoundBuffer@@H@Z ; dsound_set_sound_buffer_position

; 827  : 	
; 828  : 							dsound_play_sound_buffer ( (LPDIRECTSOUNDBUFFER)effect->sound_buffer, FALSE );

  001ab	6a 00		 push	 0
  001ad	8b 45 f8	 mov	 eax, DWORD PTR _effect$[ebp]
  001b0	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b2	51		 push	 ecx
  001b3	e8 00 00 00 00	 call	 ?dsound_play_sound_buffer@@YGXPAUIDirectSoundBuffer@@H@Z ; dsound_play_sound_buffer
$LN12@update_sys:

; 829  : 						}
; 830  : 					}
; 831  : 				}
; 832  : 			}
; 833  : 		}

  001b8	e9 62 fe ff ff	 jmp	 $LN2@update_sys
$LN3@update_sys:

; 834  : 	}
; 835  : }

  001bd	5f		 pop	 edi
  001be	5e		 pop	 esi
  001bf	5b		 pop	 ebx
  001c0	8b e5		 mov	 esp, ebp
  001c2	5d		 pop	 ebp
  001c3	c3		 ret	 0
?update_system_sound_effect_system@@YGXXZ ENDP		; update_system_sound_effect_system
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?destroy_all_system_sound_effects@@YGXXZ
_TEXT	SEGMENT
_count$ = -4						; size = 4
?destroy_all_system_sound_effects@@YGXXZ PROC		; destroy_all_system_sound_effects, COMDAT

; 375  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 376  : 
; 377  : 	int
; 378  : 		count;
; 379  : 
; 380  : 	for ( count = 0; count < maximum_current_system_sound_effects; count++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@destroy_al
$LN2@destroy_al:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@destroy_al:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?maximum_current_system_sound_effects@@3HA
  00024	7d 24		 jge	 SHORT $LN1@destroy_al

; 381  : 	{
; 382  : 
; 383  : 		if ( current_system_sound_effects[count].used )

  00026	69 45 fc a8 00
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 168
  0002d	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR ?current_system_sound_effects@@3PAUSYSTEM_SOUND_EFFECT@@A[eax+152], 0
  00034	74 12		 je	 SHORT $LN5@destroy_al

; 384  : 		{
; 385  : 
; 386  : 
; 387  : 			destroy_system_sound_effect ( &current_system_sound_effects[count] );

  00036	69 45 fc a8 00
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 168
  0003d	05 00 00 00 00	 add	 eax, OFFSET ?current_system_sound_effects@@3PAUSYSTEM_SOUND_EFFECT@@A ; current_system_sound_effects
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ?destroy_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z ; destroy_system_sound_effect
$LN5@destroy_al:

; 388  : 		}
; 389  : 	}

  00048	eb c8		 jmp	 SHORT $LN2@destroy_al
$LN1@destroy_al:

; 390  : }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?destroy_all_system_sound_effects@@YGXXZ ENDP		; destroy_all_system_sound_effects
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?get_next_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@PAU1@@Z
_TEXT	SEGMENT
_count$ = -4						; size = 4
_effect$ = 8						; size = 4
?get_next_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@PAU1@@Z PROC ; get_next_system_sound_effect, COMDAT

; 323  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 324  : 
; 325  : 	int
; 326  : 		count;
; 327  : 
; 328  : 	count = ( effect - current_system_sound_effects );

  00009	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0000c	2d 00 00 00 00	 sub	 eax, OFFSET ?current_system_sound_effects@@3PAUSYSTEM_SOUND_EFFECT@@A ; current_system_sound_effects
  00011	99		 cdq
  00012	b9 a8 00 00 00	 mov	 ecx, 168		; 000000a8H
  00017	f7 f9		 idiv	 ecx
  00019	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax

; 329  : 
; 330  : 	count++;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0001f	83 c0 01	 add	 eax, 1
  00022	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax

; 331  : 
; 332  : 	for ( ; count < maximum_current_system_sound_effects; count++ )

  00025	eb 09		 jmp	 SHORT $LN4@get_next_s
$LN2@get_next_s:
  00027	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0002a	83 c0 01	 add	 eax, 1
  0002d	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@get_next_s:
  00030	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00033	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?maximum_current_system_sound_effects@@3HA
  00039	7d 20		 jge	 SHORT $LN3@get_next_s

; 333  : 	{
; 334  : 
; 335  : 		if ( current_system_sound_effects[count].used )

  0003b	69 45 fc a8 00
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 168
  00042	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR ?current_system_sound_effects@@3PAUSYSTEM_SOUND_EFFECT@@A[eax+152], 0
  00049	74 0e		 je	 SHORT $LN5@get_next_s

; 336  : 		{
; 337  : 
; 338  : 			return ( &current_system_sound_effects[count] );

  0004b	69 45 fc a8 00
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 168
  00052	05 00 00 00 00	 add	 eax, OFFSET ?current_system_sound_effects@@3PAUSYSTEM_SOUND_EFFECT@@A ; current_system_sound_effects
  00057	eb 04		 jmp	 SHORT $LN1@get_next_s
$LN5@get_next_s:

; 339  : 		}
; 340  : 	}

  00059	eb cc		 jmp	 SHORT $LN2@get_next_s
$LN3@get_next_s:

; 341  : 
; 342  : 	return ( NULL );

  0005b	33 c0		 xor	 eax, eax
$LN1@get_next_s:

; 343  : }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
?get_next_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@PAU1@@Z ENDP ; get_next_system_sound_effect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?get_first_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@XZ
_TEXT	SEGMENT
_count$ = -4						; size = 4
?get_first_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@XZ PROC ; get_first_system_sound_effect, COMDAT

; 300  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 301  : 
; 302  : 	int
; 303  : 		count;
; 304  : 
; 305  : 	for ( count = 0; count < maximum_current_system_sound_effects; count++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@get_first_
$LN2@get_first_:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@get_first_:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?maximum_current_system_sound_effects@@3HA
  00024	7d 20		 jge	 SHORT $LN3@get_first_

; 306  : 	{
; 307  : 
; 308  : 		if ( current_system_sound_effects[count].used )

  00026	69 45 fc a8 00
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 168
  0002d	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR ?current_system_sound_effects@@3PAUSYSTEM_SOUND_EFFECT@@A[eax+152], 0
  00034	74 0e		 je	 SHORT $LN5@get_first_

; 309  : 		{
; 310  : 
; 311  : 			return ( &current_system_sound_effects[count] );

  00036	69 45 fc a8 00
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 168
  0003d	05 00 00 00 00	 add	 eax, OFFSET ?current_system_sound_effects@@3PAUSYSTEM_SOUND_EFFECT@@A ; current_system_sound_effects
  00042	eb 04		 jmp	 SHORT $LN1@get_first_
$LN5@get_first_:

; 312  : 		}
; 313  : 	}

  00044	eb cc		 jmp	 SHORT $LN2@get_first_
$LN3@get_first_:

; 314  : 
; 315  : 	return ( NULL );

  00046	33 c0		 xor	 eax, eax
$LN1@get_first_:

; 316  : }

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
?get_first_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@XZ ENDP ; get_first_system_sound_effect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?continue_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z
_TEXT	SEGMENT
_effect$ = 8						; size = 4
?continue_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z PROC ; continue_system_sound_effect, COMDAT

; 1006 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1007 : 
; 1008 : 	ASSERT ( effect );

  00009	83 7d 08 00	 cmp	 DWORD PTR _effect$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@continue_s
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??continue_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06HOPIODND@effect@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@continue_s:

; 1009 : 	ASSERT ( effect->sound_buffer );

  00027	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	75 18		 jne	 SHORT $LN3@continue_s
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??continue_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z@4JA
  00034	83 c0 03	 add	 eax, 3
  00037	50		 push	 eax
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LNNPMPCK@effect?9?$DOsound_buffer@
  00042	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@continue_s:

; 1010 : 
; 1011 : 	if ( effect->paused )

  00047	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0004a	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  00051	74 2b		 je	 SHORT $LN1@continue_s

; 1012 : 	{
; 1013 : 	
; 1014 : 		effect->paused = FALSE;

  00053	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  00056	c7 80 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+144], 0

; 1015 : 	
; 1016 : 		if ( !sound_system_paused )

  00060	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?sound_system_paused@@3HA, 0 ; sound_system_paused
  00067	75 15		 jne	 SHORT $LN1@continue_s

; 1017 : 		{
; 1018 : 	
; 1019 : 			dsound_play_sound_buffer ( (LPDIRECTSOUNDBUFFER)effect->sound_buffer, effect->looping );

  00069	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0006c	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  00072	51		 push	 ecx
  00073	8b 55 08	 mov	 edx, DWORD PTR _effect$[ebp]
  00076	8b 02		 mov	 eax, DWORD PTR [edx]
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ?dsound_play_sound_buffer@@YGXPAUIDirectSoundBuffer@@H@Z ; dsound_play_sound_buffer
$LN1@continue_s:

; 1020 : 		}
; 1021 : 	}
; 1022 : }

  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
?continue_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z ENDP ; continue_system_sound_effect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?pause_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z
_TEXT	SEGMENT
_effect$ = 8						; size = 4
?pause_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z PROC ; pause_system_sound_effect, COMDAT

; 955  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 956  : 
; 957  : 	ASSERT ( effect );

  00009	83 7d 08 00	 cmp	 DWORD PTR _effect$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@pause_syst
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pause_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06HOPIODND@effect@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@pause_syst:

; 958  : 	ASSERT ( effect->sound_buffer );

  00027	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	75 18		 jne	 SHORT $LN3@pause_syst
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pause_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z@4JA
  00034	83 c0 03	 add	 eax, 3
  00037	50		 push	 eax
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LNNPMPCK@effect?9?$DOsound_buffer@
  00042	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@pause_syst:

; 959  : 
; 960  : 	if ( !effect->paused )

  00047	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0004a	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  00051	75 21		 jne	 SHORT $LN1@pause_syst

; 961  : 	{
; 962  : 
; 963  : 		effect->paused = TRUE;

  00053	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  00056	c7 80 90 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+144], 1

; 964  : 	
; 965  : 		if ( !sound_system_paused )

  00060	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?sound_system_paused@@3HA, 0 ; sound_system_paused
  00067	75 0b		 jne	 SHORT $LN1@pause_syst

; 966  : 		{
; 967  : 	
; 968  : 			dsound_stop_sound_buffer ( (LPDIRECTSOUNDBUFFER)effect->sound_buffer );

  00069	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	51		 push	 ecx
  0006f	e8 00 00 00 00	 call	 ?dsound_stop_sound_buffer@@YGXPAUIDirectSoundBuffer@@@Z ; dsound_stop_sound_buffer
$LN1@pause_syst:

; 969  : 		}
; 970  : 	}
; 971  : }

  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	5b		 pop	 ebx
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
?pause_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z ENDP ; pause_system_sound_effect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?play_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@M@Z
_TEXT	SEGMENT
_buffer_position$1 = -16				; size = 4
_int_rate$2 = -12					; size = 4
_position$3 = -8					; size = 4
_rate$4 = -4						; size = 4
_effect$ = 8						; size = 4
_time_position$ = 12					; size = 4
?play_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@M@Z PROC ; play_system_sound_effect, COMDAT

; 918  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 919  : 	ASSERT ( effect );

  00009	83 7d 08 00	 cmp	 DWORD PTR _effect$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@play_syste
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@M@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06HOPIODND@effect@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@play_syste:

; 920  : 	ASSERT ( effect->sound_buffer );

  00027	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	75 18		 jne	 SHORT $LN3@play_syste
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@M@Z@4JA
  00034	83 c0 02	 add	 eax, 2
  00037	50		 push	 eax
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LNNPMPCK@effect?9?$DOsound_buffer@
  00042	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@play_syste:

; 921  : 
; 922  : 	if ( !effect->playing )

  00047	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0004a	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [eax+148], 0
  00051	0f 85 d0 00 00
	00		 jne	 $LN4@play_syste

; 923  : 	{
; 924  : 		float
; 925  : 			rate = effect->rate * effect->pitch,

  00057	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0005a	f3 0f 2a 80 84
	00 00 00	 cvtsi2ss xmm0, DWORD PTR [eax+132]
  00062	8b 4d 08	 mov	 ecx, DWORD PTR _effect$[ebp]
  00065	f3 0f 59 81 a0
	00 00 00	 mulss	 xmm0, DWORD PTR [ecx+160]
  0006d	f3 0f 11 45 fc	 movss	 DWORD PTR _rate$4[ebp], xmm0

; 926  : 			position = time_position / rate;

  00072	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _time_position$[ebp]
  00077	f3 0f 5e 45 fc	 divss	 xmm0, DWORD PTR _rate$4[ebp]
  0007c	f3 0f 11 45 f8	 movss	 DWORD PTR _position$3[ebp], xmm0

; 927  : 		int
; 928  : 			int_rate,
; 929  : 			buffer_position;
; 930  : 
; 931  : 		convert_float_to_int (rate, &int_rate);

  00081	8d 45 f4	 lea	 eax, DWORD PTR _int_rate$2[ebp]
  00084	50		 push	 eax
  00085	51		 push	 ecx
  00086	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _rate$4[ebp]
  0008b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00090	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 932  : 		convert_float_to_int (position, &buffer_position);

  00095	8d 45 f0	 lea	 eax, DWORD PTR _buffer_position$1[ebp]
  00098	50		 push	 eax
  00099	51		 push	 ecx
  0009a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _position$3[ebp]
  0009f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a4	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 933  : 	
; 934  : 		effect->playing = TRUE;

  000a9	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  000ac	c7 80 94 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+148], 1

; 935  : 	
; 936  : 		effect->paused = FALSE;

  000b6	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  000b9	c7 80 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+144], 0

; 937  : 	
; 938  : 		dsound_set_sound_buffer_rate ( (LPDIRECTSOUNDBUFFER)effect->sound_buffer, int_rate);

  000c3	8b 45 f4	 mov	 eax, DWORD PTR _int_rate$2[ebp]
  000c6	50		 push	 eax
  000c7	8b 4d 08	 mov	 ecx, DWORD PTR _effect$[ebp]
  000ca	8b 11		 mov	 edx, DWORD PTR [ecx]
  000cc	52		 push	 edx
  000cd	e8 00 00 00 00	 call	 ?dsound_set_sound_buffer_rate@@YGXPAUIDirectSoundBuffer@@H@Z ; dsound_set_sound_buffer_rate

; 939  : 	
; 940  : 		dsound_set_sound_buffer_volume ( (LPDIRECTSOUNDBUFFER)effect->sound_buffer, sound_volume_lookup_table[effect->volume] );

  000d2	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  000d5	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000db	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?sound_volume_lookup_table@@3PAHA[ecx*4]
  000e2	52		 push	 edx
  000e3	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  000e6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 ?dsound_set_sound_buffer_volume@@YGXPAUIDirectSoundBuffer@@H@Z ; dsound_set_sound_buffer_volume

; 941  : 	
; 942  : 		dsound_set_sound_buffer_pan ( (LPDIRECTSOUNDBUFFER)effect->sound_buffer, effect->panning );

  000ee	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  000f1	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  000f7	51		 push	 ecx
  000f8	8b 55 08	 mov	 edx, DWORD PTR _effect$[ebp]
  000fb	8b 02		 mov	 eax, DWORD PTR [edx]
  000fd	50		 push	 eax
  000fe	e8 00 00 00 00	 call	 ?dsound_set_sound_buffer_pan@@YGXPAUIDirectSoundBuffer@@H@Z ; dsound_set_sound_buffer_pan

; 943  : 	
; 944  : 		dsound_set_sound_buffer_position ( (LPDIRECTSOUNDBUFFER)effect->sound_buffer, buffer_position );

  00103	8b 45 f0	 mov	 eax, DWORD PTR _buffer_position$1[ebp]
  00106	50		 push	 eax
  00107	8b 4d 08	 mov	 ecx, DWORD PTR _effect$[ebp]
  0010a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0010c	52		 push	 edx
  0010d	e8 00 00 00 00	 call	 ?dsound_set_sound_buffer_position@@YGXPAUIDirectSoundBuffer@@H@Z ; dsound_set_sound_buffer_position

; 945  : 	
; 946  : 		dsound_play_sound_buffer ( (LPDIRECTSOUNDBUFFER)effect->sound_buffer, effect->looping );

  00112	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  00115	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  0011b	51		 push	 ecx
  0011c	8b 55 08	 mov	 edx, DWORD PTR _effect$[ebp]
  0011f	8b 02		 mov	 eax, DWORD PTR [edx]
  00121	50		 push	 eax
  00122	e8 00 00 00 00	 call	 ?dsound_play_sound_buffer@@YGXPAUIDirectSoundBuffer@@H@Z ; dsound_play_sound_buffer
$LN4@play_syste:

; 947  : 	}
; 948  : }

  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx
  0012a	8b e5		 mov	 esp, ebp
  0012c	5d		 pop	 ebp
  0012d	c2 08 00	 ret	 8
?play_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@M@Z ENDP ; play_system_sound_effect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?play_sequenced_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@HM@Z
_TEXT	SEGMENT
_buffer_position$1 = -20				; size = 4
_int_rate$2 = -16					; size = 4
_position$3 = -12					; size = 4
_rate$4 = -8						; size = 4
_sound_sample_index$ = -4				; size = 4
_effect$ = 8						; size = 4
_sequence_index$ = 12					; size = 4
_time_position$ = 16					; size = 4
?play_sequenced_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@HM@Z PROC ; play_sequenced_system_sound_effect, COMDAT

; 842  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 843  : 	int
; 844  : 		sound_sample_index;
; 845  : 
; 846  : 	ASSERT ( effect );

  00009	83 7d 08 00	 cmp	 DWORD PTR _effect$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@play_seque
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_sequenced_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@HM@Z@4JA
  00014	83 c0 04	 add	 eax, 4
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06HOPIODND@effect@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@play_seque:

; 847  : 
; 848  : 	ASSERT ( sequence_index >= 0 );

  00027	83 7d 0c 00	 cmp	 DWORD PTR _sequence_index$[ebp], 0
  0002b	7d 18		 jge	 SHORT $LN3@play_seque
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_sequenced_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@HM@Z@4JA
  00032	83 c0 06	 add	 eax, 6
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@GMPOEBGO@sequence_index?5?$DO?$DN?50@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@play_seque:

; 849  : 	ASSERT ( sequence_index < effect->number_of_sequenced_samples );

  00045	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  00048	8b 4d 0c	 mov	 ecx, DWORD PTR _sequence_index$[ebp]
  0004b	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0004e	7c 18		 jl	 SHORT $LN4@play_seque
  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_sequenced_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@HM@Z@4JA
  00055	83 c0 07	 add	 eax, 7
  00058	50		 push	 eax
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@KCONDKOK@sequence_index?5?$DM?5effect?9?$DOnumber@
  00063	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@play_seque:

; 850  : 
; 851  : 	if ( !effect->playing )

  00068	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0006b	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [eax+148], 0
  00072	0f 85 42 01 00
	00		 jne	 $LN9@play_seque

; 852  : 	{
; 853  : 
; 854  : 		if ( sequence_index == 0 )

  00078	83 7d 0c 00	 cmp	 DWORD PTR _sequence_index$[ebp], 0
  0007c	75 19		 jne	 SHORT $LN6@play_seque

; 855  : 		{
; 856  : 			play_system_sound_effect ( effect, time_position );

  0007e	51		 push	 ecx
  0007f	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _time_position$[ebp]
  00084	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00089	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ?play_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@M@Z ; play_system_sound_effect

; 857  : 		}
; 858  : 		else

  00092	e9 23 01 00 00	 jmp	 $LN9@play_seque
$LN6@play_seque:

; 859  : 		{			
; 860  : 
; 861  : 			effect->current_sequenced_sample_offset = sequence_index;

  00097	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0009a	8b 4d 0c	 mov	 ecx, DWORD PTR _sequence_index$[ebp]
  0009d	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 862  : 
; 863  : 			//
; 864  : 			// Destroy the current duplicated sound buffer
; 865  : 			//
; 866  : 
; 867  : 			if ( effect->sound_buffer )

  000a0	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  000a3	83 38 00	 cmp	 DWORD PTR [eax], 0
  000a6	74 0b		 je	 SHORT $LN8@play_seque

; 868  : 			{
; 869  : 
; 870  : 				dsound_destroy_sound_buffer ( (LPDIRECTSOUNDBUFFER)effect->sound_buffer );

  000a8	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  000ab	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ad	51		 push	 ecx
  000ae	e8 00 00 00 00	 call	 ?dsound_destroy_sound_buffer@@YGXPAUIDirectSoundBuffer@@@Z ; dsound_destroy_sound_buffer
$LN8@play_seque:

; 871  : 			}
; 872  : 
; 873  : 			//
; 874  : 			// Duplicate the next sound buffer in the sequence
; 875  : 			//
; 876  : 
; 877  : 			effect->rate = effect->sound_sample_sequence[ effect->current_sequenced_sample_offset ].rate;

  000b3	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  000b6	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b9	8b 55 08	 mov	 edx, DWORD PTR _effect$[ebp]
  000bc	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  000bf	8b 4c c8 10	 mov	 ecx, DWORD PTR [eax+ecx*8+16]
  000c3	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx

; 878  : 
; 879  : 			sound_sample_index = effect->sound_sample_sequence[ effect->current_sequenced_sample_offset ].sound_sample_index;

  000c9	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  000cc	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000cf	8b 55 08	 mov	 edx, DWORD PTR _effect$[ebp]
  000d2	8b 44 ca 0c	 mov	 eax, DWORD PTR [edx+ecx*8+12]
  000d6	89 45 fc	 mov	 DWORD PTR _sound_sample_index$[ebp], eax

; 880  : 
; 881  : 			effect->sound_buffer = dsound_duplicate_sound_buffer ( source_sound_samples[sound_sample_index].sound_buffer, source_sound_samples[sound_sample_index].size );

  000d9	6b 45 fc 0c	 imul	 eax, DWORD PTR _sound_sample_index$[ebp], 12
  000dd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  000e3	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  000e7	52		 push	 edx
  000e8	6b 45 fc 0c	 imul	 eax, DWORD PTR _sound_sample_index$[ebp], 12
  000ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  000f2	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000f5	52		 push	 edx
  000f6	e8 00 00 00 00	 call	 ?dsound_duplicate_sound_buffer@@YGPAUIDirectSoundBuffer@@PAU1@H@Z ; dsound_duplicate_sound_buffer
  000fb	8b 4d 08	 mov	 ecx, DWORD PTR _effect$[ebp]
  000fe	89 01		 mov	 DWORD PTR [ecx], eax

; 882  : 
; 883  : 			//
; 884  : 			// Start the buffer playing
; 885  : 			//
; 886  : 
; 887  : 			if ( effect->sound_buffer )

  00100	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  00103	83 38 00	 cmp	 DWORD PTR [eax], 0
  00106	0f 84 ae 00 00
	00		 je	 $LN9@play_seque

; 888  : 			{
; 889  : 				float
; 890  : 					rate = effect->rate * effect->pitch,

  0010c	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0010f	f3 0f 2a 80 84
	00 00 00	 cvtsi2ss xmm0, DWORD PTR [eax+132]
  00117	8b 4d 08	 mov	 ecx, DWORD PTR _effect$[ebp]
  0011a	f3 0f 59 81 a0
	00 00 00	 mulss	 xmm0, DWORD PTR [ecx+160]
  00122	f3 0f 11 45 f8	 movss	 DWORD PTR _rate$4[ebp], xmm0

; 891  : 					position = time_position / rate;

  00127	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _time_position$[ebp]
  0012c	f3 0f 5e 45 f8	 divss	 xmm0, DWORD PTR _rate$4[ebp]
  00131	f3 0f 11 45 f4	 movss	 DWORD PTR _position$3[ebp], xmm0

; 892  : 				int
; 893  : 					int_rate,
; 894  : 					buffer_position;
; 895  : 
; 896  : 				convert_float_to_int (rate, &int_rate);

  00136	8d 45 f0	 lea	 eax, DWORD PTR _int_rate$2[ebp]
  00139	50		 push	 eax
  0013a	51		 push	 ecx
  0013b	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _rate$4[ebp]
  00140	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00145	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 897  : 				convert_float_to_int (position, &buffer_position);

  0014a	8d 45 ec	 lea	 eax, DWORD PTR _buffer_position$1[ebp]
  0014d	50		 push	 eax
  0014e	51		 push	 ecx
  0014f	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _position$3[ebp]
  00154	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00159	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 898  : 	
; 899  : 				dsound_set_sound_buffer_rate ( (LPDIRECTSOUNDBUFFER)effect->sound_buffer, int_rate );

  0015e	8b 45 f0	 mov	 eax, DWORD PTR _int_rate$2[ebp]
  00161	50		 push	 eax
  00162	8b 4d 08	 mov	 ecx, DWORD PTR _effect$[ebp]
  00165	8b 11		 mov	 edx, DWORD PTR [ecx]
  00167	52		 push	 edx
  00168	e8 00 00 00 00	 call	 ?dsound_set_sound_buffer_rate@@YGXPAUIDirectSoundBuffer@@H@Z ; dsound_set_sound_buffer_rate

; 900  : 				
; 901  : 				dsound_set_sound_buffer_volume ( (LPDIRECTSOUNDBUFFER)effect->sound_buffer, sound_volume_lookup_table[effect->volume] );

  0016d	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  00170	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00176	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?sound_volume_lookup_table@@3PAHA[ecx*4]
  0017d	52		 push	 edx
  0017e	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  00181	8b 08		 mov	 ecx, DWORD PTR [eax]
  00183	51		 push	 ecx
  00184	e8 00 00 00 00	 call	 ?dsound_set_sound_buffer_volume@@YGXPAUIDirectSoundBuffer@@H@Z ; dsound_set_sound_buffer_volume

; 902  : 	
; 903  : 				dsound_set_sound_buffer_pan ( (LPDIRECTSOUNDBUFFER)effect->sound_buffer, effect->panning );

  00189	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0018c	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00192	51		 push	 ecx
  00193	8b 55 08	 mov	 edx, DWORD PTR _effect$[ebp]
  00196	8b 02		 mov	 eax, DWORD PTR [edx]
  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 ?dsound_set_sound_buffer_pan@@YGXPAUIDirectSoundBuffer@@H@Z ; dsound_set_sound_buffer_pan

; 904  : 	
; 905  : 				dsound_set_sound_buffer_position ( (LPDIRECTSOUNDBUFFER)effect->sound_buffer, buffer_position );

  0019e	8b 45 ec	 mov	 eax, DWORD PTR _buffer_position$1[ebp]
  001a1	50		 push	 eax
  001a2	8b 4d 08	 mov	 ecx, DWORD PTR _effect$[ebp]
  001a5	8b 11		 mov	 edx, DWORD PTR [ecx]
  001a7	52		 push	 edx
  001a8	e8 00 00 00 00	 call	 ?dsound_set_sound_buffer_position@@YGXPAUIDirectSoundBuffer@@H@Z ; dsound_set_sound_buffer_position

; 906  : 	
; 907  : 				dsound_play_sound_buffer ( (LPDIRECTSOUNDBUFFER)effect->sound_buffer, FALSE );

  001ad	6a 00		 push	 0
  001af	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  001b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b4	51		 push	 ecx
  001b5	e8 00 00 00 00	 call	 ?dsound_play_sound_buffer@@YGXPAUIDirectSoundBuffer@@H@Z ; dsound_play_sound_buffer
$LN9@play_seque:

; 908  : 			}
; 909  : 		}
; 910  : 	}
; 911  : }

  001ba	5f		 pop	 edi
  001bb	5e		 pop	 esi
  001bc	5b		 pop	 ebx
  001bd	8b e5		 mov	 esp, ebp
  001bf	5d		 pop	 ebp
  001c0	c2 0c 00	 ret	 12			; 0000000cH
?play_sequenced_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@HM@Z ENDP ; play_sequenced_system_sound_effect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?get_system_sound_effect_user_data@@YGPAXPAUSYSTEM_SOUND_EFFECT@@@Z
_TEXT	SEGMENT
_effect$ = 8						; size = 4
?get_system_sound_effect_user_data@@YGPAXPAUSYSTEM_SOUND_EFFECT@@@Z PROC ; get_system_sound_effect_user_data, COMDAT

; 718  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 719  : 
; 720  : 	ASSERT ( effect );

  00009	83 7d 08 00	 cmp	 DWORD PTR _effect$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_system
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_system_sound_effect_user_data@@YGPAXPAUSYSTEM_SOUND_EFFECT@@@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06HOPIODND@effect@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_system:

; 721  : 
; 722  : 	return ( effect->user_data );

  00027	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0002a	8b 80 a4 00 00
	00		 mov	 eax, DWORD PTR [eax+164]

; 723  : }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
?get_system_sound_effect_user_data@@YGPAXPAUSYSTEM_SOUND_EFFECT@@@Z ENDP ; get_system_sound_effect_user_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?set_system_sound_effect_user_data@@YGXPAUSYSTEM_SOUND_EFFECT@@PAX@Z
_TEXT	SEGMENT
_effect$ = 8						; size = 4
_user_data$ = 12					; size = 4
?set_system_sound_effect_user_data@@YGXPAUSYSTEM_SOUND_EFFECT@@PAX@Z PROC ; set_system_sound_effect_user_data, COMDAT

; 706  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 707  : 
; 708  : 	ASSERT ( effect );

  00009	83 7d 08 00	 cmp	 DWORD PTR _effect$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@set_system
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_system_sound_effect_user_data@@YGXPAUSYSTEM_SOUND_EFFECT@@PAX@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06HOPIODND@effect@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@set_system:

; 709  : 
; 710  : 	effect->user_data = user_data;

  00027	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0002a	8b 4d 0c	 mov	 ecx, DWORD PTR _user_data$[ebp]
  0002d	89 88 a4 00 00
	00		 mov	 DWORD PTR [eax+164], ecx

; 711  : }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
?set_system_sound_effect_user_data@@YGXPAUSYSTEM_SOUND_EFFECT@@PAX@Z ENDP ; set_system_sound_effect_user_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?destroy_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z
_TEXT	SEGMENT
_effect$ = 8						; size = 4
?destroy_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z PROC ; destroy_system_sound_effect, COMDAT

; 681  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 682  : 
; 683  : 	ASSERT ( effect );

  00009	83 7d 08 00	 cmp	 DWORD PTR _effect$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@destroy_sy
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??destroy_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06HOPIODND@effect@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@destroy_sy:

; 684  : 	ASSERT ( effect->used );

  00027	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0002a	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00031	75 18		 jne	 SHORT $LN3@destroy_sy
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??destroy_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z@4JA
  00038	83 c0 03	 add	 eax, 3
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0N@HBEMFBLI@effect?9?$DOused@
  00046	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@destroy_sy:

; 685  : 
; 686  : 	if ( effect->sound_buffer )

  0004b	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0004e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00051	74 14		 je	 SHORT $LN4@destroy_sy

; 687  : 	{
; 688  : 
; 689  : 		//
; 690  : 		// Release the duplicated sound buffer
; 691  : 		//
; 692  : 
; 693  : 		dsound_destroy_sound_buffer ( (LPDIRECTSOUNDBUFFER)effect->sound_buffer );

  00053	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  00056	8b 08		 mov	 ecx, DWORD PTR [eax]
  00058	51		 push	 ecx
  00059	e8 00 00 00 00	 call	 ?dsound_destroy_sound_buffer@@YGXPAUIDirectSoundBuffer@@@Z ; dsound_destroy_sound_buffer

; 694  : 
; 695  : 		effect->sound_buffer = NULL;

  0005e	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  00061	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN4@destroy_sy:

; 696  : 	}
; 697  : 
; 698  : 	effect->used = FALSE;

  00067	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0006a	c7 80 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+152], 0

; 699  : }

  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	5b		 pop	 ebx
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
?destroy_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z ENDP ; destroy_system_sound_effect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?get_system_sound_effect_playing@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z
_TEXT	SEGMENT
_status$1 = -4						; size = 4
_effect$ = 8						; size = 4
?get_system_sound_effect_playing@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z PROC ; get_system_sound_effect_playing, COMDAT

; 397  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 398  : 
; 399  : 	ASSERT ( effect );

  00009	83 7d 08 00	 cmp	 DWORD PTR _effect$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_system
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_system_sound_effect_playing@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06HOPIODND@effect@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_system:

; 400  : 
; 401  : 	effect->playing = FALSE;

  00027	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  0002a	c7 80 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+148], 0

; 402  : 
; 403  : 	if ( effect->sound_buffer )

  00034	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  00037	83 38 00	 cmp	 DWORD PTR [eax], 0
  0003a	74 45		 je	 SHORT $LN3@get_system

; 404  : 	{
; 405  : 
; 406  : 		DWORD
; 407  : 			status;
; 408  : 
; 409  : 		if ( IDirectSoundBuffer_GetStatus ( (LPDIRECTSOUNDBUFFER) effect->sound_buffer, &status ) == DS_OK )

  0003c	8d 45 fc	 lea	 eax, DWORD PTR _status$1[ebp]
  0003f	50		 push	 eax
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _effect$[ebp]
  00043	8b 11		 mov	 edx, DWORD PTR [ecx]
  00045	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  00048	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004a	8b 12		 mov	 edx, DWORD PTR [edx]
  0004c	51		 push	 ecx
  0004d	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00050	ff d0		 call	 eax
  00052	85 c0		 test	 eax, eax
  00054	75 2b		 jne	 SHORT $LN3@get_system

; 410  : 		{
; 411  : 
; 412  : 			if ( ( status && DSBSTATUS_LOOPING ) || ( status && DSBSTATUS_PLAYING ) )

  00056	83 7d fc 00	 cmp	 DWORD PTR _status$1[ebp], 0
  0005a	74 09		 je	 SHORT $LN7@get_system
  0005c	b8 04 00 00 00	 mov	 eax, 4
  00061	85 c0		 test	 eax, eax
  00063	75 0f		 jne	 SHORT $LN6@get_system
$LN7@get_system:
  00065	83 7d fc 00	 cmp	 DWORD PTR _status$1[ebp], 0
  00069	74 16		 je	 SHORT $LN3@get_system
  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	85 c0		 test	 eax, eax
  00072	74 0d		 je	 SHORT $LN3@get_system
$LN6@get_system:

; 413  : 			{
; 414  : 
; 415  : 				effect->playing = TRUE;

  00074	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  00077	c7 80 94 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+148], 1
$LN3@get_system:

; 416  : 			}
; 417  : 		}
; 418  : 	}
; 419  : 
; 420  : 	return ( effect->playing );

  00081	8b 45 08	 mov	 eax, DWORD PTR _effect$[ebp]
  00084	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [eax+148]

; 421  : }

  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 04 00	 ret	 4
?get_system_sound_effect_playing@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z ENDP ; get_system_sound_effect_playing
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?create_sequenced_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@HPAUSOUND_SEQUENCE_INFORMATION@@HPAXH@Z
_TEXT	SEGMENT
_count$1 = -8						; size = 4
_effect$ = -4						; size = 4
_number_of_samples$ = 8					; size = 4
_samples$ = 12						; size = 4
_volume$ = 16						; size = 4
_user_data$ = 20					; size = 4
_context$ = 24						; size = 4
?create_sequenced_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@HPAUSOUND_SEQUENCE_INFORMATION@@HPAXH@Z PROC ; create_sequenced_system_sound_effect, COMDAT

; 594  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 595  : 
; 596  : 	system_sound_effect
; 597  : 		*effect;
; 598  : 
; 599  : 	if ( !sound_system_initialised )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?sound_system_initialised@@3HA, 0 ; sound_system_initialised
  00010	75 07		 jne	 SHORT $LN5@create_seq

; 600  : 	{
; 601  : 
; 602  : 		return ( NULL );

  00012	33 c0		 xor	 eax, eax
  00014	e9 d0 01 00 00	 jmp	 $LN1@create_seq
$LN5@create_seq:

; 603  : 	}
; 604  : 
; 605  : 	ASSERT ( number_of_samples >= 2 );

  00019	83 7d 08 02	 cmp	 DWORD PTR _number_of_samples$[ebp], 2
  0001d	7d 18		 jge	 SHORT $LN6@create_seq
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_sequenced_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@HPAUSOUND_SEQUENCE_INFORMATION@@HPAXH@Z@4JA
  00024	83 c0 0b	 add	 eax, 11			; 0000000bH
  00027	50		 push	 eax
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@LCJMPJJI@number_of_samples?5?$DO?$DN?52@
  00032	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@create_seq:

; 606  : 	ASSERT ( number_of_samples < MAX_SEQUENCED_SAMPLES );

  00037	83 7d 08 0f	 cmp	 DWORD PTR _number_of_samples$[ebp], 15 ; 0000000fH
  0003b	7c 18		 jl	 SHORT $LN7@create_seq
  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_sequenced_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@HPAUSOUND_SEQUENCE_INFORMATION@@HPAXH@Z@4JA
  00042	83 c0 0c	 add	 eax, 12			; 0000000cH
  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@CIBGBJDH@number_of_samples?5?$DM?5MAX_SEQUENC@
  00050	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@create_seq:

; 607  : 
; 608  : 	//
; 609  : 	// Grab the next free sound effect structure.
; 610  : 	//
; 611  : 
; 612  : 	effect = get_next_free_system_system_sound_effect ();

  00055	e8 00 00 00 00	 call	 ?get_next_free_system_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@XZ ; get_next_free_system_system_sound_effect
  0005a	89 45 fc	 mov	 DWORD PTR _effect$[ebp], eax

; 613  : 
; 614  : 	if ( effect )

  0005d	83 7d fc 00	 cmp	 DWORD PTR _effect$[ebp], 0
  00061	0f 84 7f 01 00
	00		 je	 $LN12@create_seq

; 615  : 	{
; 616  : 
; 617  : 		int
; 618  : 			count;
; 619  : 
; 620  : 		//
; 621  : 		// Fill in the details about this sound effect
; 622  : 		//
; 623  : 
; 624  : 		effect->number_of_sequenced_samples = number_of_samples;

  00067	8b 45 fc	 mov	 eax, DWORD PTR _effect$[ebp]
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _number_of_samples$[ebp]
  0006d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 625  : 
; 626  : 		effect->current_sequenced_sample_offset = 0;

  00070	8b 45 fc	 mov	 eax, DWORD PTR _effect$[ebp]
  00073	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 627  : 
; 628  : 		for ( count = 0; count < number_of_samples; count++ )

  0007a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$1[ebp], 0
  00081	eb 09		 jmp	 SHORT $LN4@create_seq
$LN2@create_seq:
  00083	8b 45 f8	 mov	 eax, DWORD PTR _count$1[ebp]
  00086	83 c0 01	 add	 eax, 1
  00089	89 45 f8	 mov	 DWORD PTR _count$1[ebp], eax
$LN4@create_seq:
  0008c	8b 45 f8	 mov	 eax, DWORD PTR _count$1[ebp]
  0008f	3b 45 08	 cmp	 eax, DWORD PTR _number_of_samples$[ebp]
  00092	0f 8d 98 00 00
	00		 jge	 $LN3@create_seq

; 629  : 		{
; 630  : 
; 631  : 			ASSERT ( samples[count].sound_sample_index >= 0 );

  00098	8b 45 f8	 mov	 eax, DWORD PTR _count$1[ebp]
  0009b	8b 4d 0c	 mov	 ecx, DWORD PTR _samples$[ebp]
  0009e	83 3c c1 00	 cmp	 DWORD PTR [ecx+eax*8], 0
  000a2	7d 18		 jge	 SHORT $LN9@create_seq
  000a4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_sequenced_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@HPAUSOUND_SEQUENCE_INFORMATION@@HPAXH@Z@4JA
  000a9	83 c0 25	 add	 eax, 37			; 00000025H
  000ac	50		 push	 eax
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  000b2	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@FNEJBNMO@samples?$FLcount?$FN?4sound_sample_ind@
  000b7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@create_seq:

; 632  : 			ASSERT ( samples[count].sound_sample_index < number_of_source_sound_samples );

  000bc	8b 45 f8	 mov	 eax, DWORD PTR _count$1[ebp]
  000bf	8b 4d 0c	 mov	 ecx, DWORD PTR _samples$[ebp]
  000c2	8b 14 c1	 mov	 edx, DWORD PTR [ecx+eax*8]
  000c5	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ?number_of_source_sound_samples@@3HA ; number_of_source_sound_samples
  000cb	7c 18		 jl	 SHORT $LN10@create_seq
  000cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_sequenced_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@HPAUSOUND_SEQUENCE_INFORMATION@@HPAXH@Z@4JA
  000d2	83 c0 26	 add	 eax, 38			; 00000026H
  000d5	50		 push	 eax
  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@IFDFGGIE@samples?$FLcount?$FN?4sound_sample_ind@
  000e0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@create_seq:

; 633  : 
; 634  : 			effect->sound_sample_sequence[count] = samples[count];

  000e5	8b 45 f8	 mov	 eax, DWORD PTR _count$1[ebp]
  000e8	8b 4d 0c	 mov	 ecx, DWORD PTR _samples$[ebp]
  000eb	8b 14 c1	 mov	 edx, DWORD PTR [ecx+eax*8]
  000ee	8b 44 c1 04	 mov	 eax, DWORD PTR [ecx+eax*8+4]
  000f2	8b 4d f8	 mov	 ecx, DWORD PTR _count$1[ebp]
  000f5	8b 75 fc	 mov	 esi, DWORD PTR _effect$[ebp]
  000f8	89 54 ce 0c	 mov	 DWORD PTR [esi+ecx*8+12], edx
  000fc	89 44 ce 10	 mov	 DWORD PTR [esi+ecx*8+16], eax

; 635  : 
; 636  : 			//
; 637  : 			// Validate the rate
; 638  : 			//
; 639  : 
; 640  : 			if ( samples[count].rate == 0 )

  00100	8b 45 f8	 mov	 eax, DWORD PTR _count$1[ebp]
  00103	8b 4d 0c	 mov	 ecx, DWORD PTR _samples$[ebp]
  00106	83 7c c1 04 00	 cmp	 DWORD PTR [ecx+eax*8+4], 0
  0010b	75 1e		 jne	 SHORT $LN11@create_seq

; 641  : 			{
; 642  : 
; 643  : 				samples[count].rate = source_sound_samples[ samples[count].sound_sample_index ].default_rate;

  0010d	8b 45 f8	 mov	 eax, DWORD PTR _count$1[ebp]
  00110	8b 4d 0c	 mov	 ecx, DWORD PTR _samples$[ebp]
  00113	6b 14 c1 0c	 imul	 edx, DWORD PTR [ecx+eax*8], 12
  00117	8b 45 f8	 mov	 eax, DWORD PTR _count$1[ebp]
  0011a	8b 4d 0c	 mov	 ecx, DWORD PTR _samples$[ebp]
  0011d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  00123	8b 54 16 08	 mov	 edx, DWORD PTR [esi+edx+8]
  00127	89 54 c1 04	 mov	 DWORD PTR [ecx+eax*8+4], edx
$LN11@create_seq:

; 644  : 			}
; 645  : 		}

  0012b	e9 53 ff ff ff	 jmp	 $LN2@create_seq
$LN3@create_seq:

; 646  : 
; 647  : 		effect->looping = FALSE;

  00130	8b 45 fc	 mov	 eax, DWORD PTR _effect$[ebp]
  00133	c7 80 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+156], 0

; 648  : 		effect->panning = 0;

  0013d	8b 45 fc	 mov	 eax, DWORD PTR _effect$[ebp]
  00140	c7 80 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+140], 0

; 649  : 		effect->volume = volume;

  0014a	8b 45 fc	 mov	 eax, DWORD PTR _effect$[ebp]
  0014d	8b 4d 10	 mov	 ecx, DWORD PTR _volume$[ebp]
  00150	89 88 88 00 00
	00		 mov	 DWORD PTR [eax+136], ecx

; 650  : 		effect->pitch = 1.0;

  00156	8b 45 fc	 mov	 eax, DWORD PTR _effect$[ebp]
  00159	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00161	f3 0f 11 80 a0
	00 00 00	 movss	 DWORD PTR [eax+160], xmm0

; 651  : 		effect->rate = samples[0].rate;

  00169	b8 08 00 00 00	 mov	 eax, 8
  0016e	6b c8 00	 imul	 ecx, eax, 0
  00171	8b 55 fc	 mov	 edx, DWORD PTR _effect$[ebp]
  00174	8b 45 0c	 mov	 eax, DWORD PTR _samples$[ebp]
  00177	8b 4c 08 04	 mov	 ecx, DWORD PTR [eax+ecx+4]
  0017b	89 8a 84 00 00
	00		 mov	 DWORD PTR [edx+132], ecx

; 652  : 		effect->user_data = user_data;

  00181	8b 45 fc	 mov	 eax, DWORD PTR _effect$[ebp]
  00184	8b 4d 14	 mov	 ecx, DWORD PTR _user_data$[ebp]
  00187	89 88 a4 00 00
	00		 mov	 DWORD PTR [eax+164], ecx

; 653  : 
; 654  : 		//
; 655  : 		// Duplicate the sound buffer concerned
; 656  : 		//
; 657  : 
; 658  : 		effect->sound_buffer = dsound_duplicate_sound_buffer ( source_sound_samples[ samples[0].sound_sample_index ].sound_buffer, source_sound_samples[ samples[0].sound_sample_index ].size );

  0018d	b8 08 00 00 00	 mov	 eax, 8
  00192	6b c8 00	 imul	 ecx, eax, 0
  00195	8b 55 0c	 mov	 edx, DWORD PTR _samples$[ebp]
  00198	6b 04 0a 0c	 imul	 eax, DWORD PTR [edx+ecx], 12
  0019c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  001a2	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  001a6	52		 push	 edx
  001a7	b8 08 00 00 00	 mov	 eax, 8
  001ac	6b c8 00	 imul	 ecx, eax, 0
  001af	8b 55 0c	 mov	 edx, DWORD PTR _samples$[ebp]
  001b2	6b 04 0a 0c	 imul	 eax, DWORD PTR [edx+ecx], 12
  001b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  001bc	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  001bf	52		 push	 edx
  001c0	e8 00 00 00 00	 call	 ?dsound_duplicate_sound_buffer@@YGPAUIDirectSoundBuffer@@PAU1@H@Z ; dsound_duplicate_sound_buffer
  001c5	8b 4d fc	 mov	 ecx, DWORD PTR _effect$[ebp]
  001c8	89 01		 mov	 DWORD PTR [ecx], eax

; 659  : 
; 660  : 		if ( !effect->sound_buffer )

  001ca	8b 45 fc	 mov	 eax, DWORD PTR _effect$[ebp]
  001cd	83 38 00	 cmp	 DWORD PTR [eax], 0
  001d0	75 14		 jne	 SHORT $LN12@create_seq

; 661  : 		{
; 662  : 
; 663  : 			//
; 664  : 			// Free up the sound effect structure, and return NULL
; 665  : 			//
; 666  : 
; 667  : 			effect->used = FALSE;

  001d2	8b 45 fc	 mov	 eax, DWORD PTR _effect$[ebp]
  001d5	c7 80 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+152], 0

; 668  : 
; 669  : 			effect = NULL;

  001df	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _effect$[ebp], 0
$LN12@create_seq:

; 670  : 		}
; 671  : 	}
; 672  : 
; 673  : 	return ( effect );

  001e6	8b 45 fc	 mov	 eax, DWORD PTR _effect$[ebp]
$LN1@create_seq:

; 674  : }

  001e9	5f		 pop	 edi
  001ea	5e		 pop	 esi
  001eb	5b		 pop	 ebx
  001ec	8b e5		 mov	 esp, ebp
  001ee	5d		 pop	 ebp
  001ef	c2 14 00	 ret	 20			; 00000014H
?create_sequenced_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@HPAUSOUND_SEQUENCE_INFORMATION@@HPAXH@Z ENDP ; create_sequenced_system_sound_effect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?create_single_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@HHHPAXH@Z
_TEXT	SEGMENT
_rate$1 = -8						; size = 4
_effect$ = -4						; size = 4
_sound_sample_index$ = 8				; size = 4
_volume$ = 12						; size = 4
_looping$ = 16						; size = 4
_user_data$ = 20					; size = 4
_context$ = 24						; size = 4
?create_single_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@HHHPAXH@Z PROC ; create_single_system_sound_effect, COMDAT

; 522  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 523  : 	system_sound_effect
; 524  : 		*effect;
; 525  : 
; 526  : 	if ( !sound_system_initialised )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?sound_system_initialised@@3HA, 0 ; sound_system_initialised
  00010	75 07		 jne	 SHORT $LN2@create_sin

; 527  : 	{
; 528  : 		return ( NULL );

  00012	33 c0		 xor	 eax, eax
  00014	e9 89 01 00 00	 jmp	 $LN1@create_sin
$LN2@create_sin:

; 529  : 	}
; 530  : 
; 531  : 	ASSERT ( sound_sample_index >= 0 );

  00019	83 7d 08 00	 cmp	 DWORD PTR _sound_sample_index$[ebp], 0
  0001d	7d 18		 jge	 SHORT $LN3@create_sin
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_single_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@HHHPAXH@Z@4JA
  00024	83 c0 09	 add	 eax, 9
  00027	50		 push	 eax
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@PKLJEGEL@sound_sample_index?5?$DO?$DN?50@
  00032	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@create_sin:

; 532  : 	ASSERT ( sound_sample_index < number_of_source_sound_samples );

  00037	8b 45 08	 mov	 eax, DWORD PTR _sound_sample_index$[ebp]
  0003a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_source_sound_samples@@3HA ; number_of_source_sound_samples
  00040	7c 18		 jl	 SHORT $LN4@create_sin
  00042	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_single_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@HHHPAXH@Z@4JA
  00047	83 c0 0a	 add	 eax, 10			; 0000000aH
  0004a	50		 push	 eax
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@LFKENNEO@sound_sample_index?5?$DM?5number_of_@
  00055	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@create_sin:

; 533  : 	ASSERT ( volume >= 0 );

  0005a	83 7d 0c 00	 cmp	 DWORD PTR _volume$[ebp], 0
  0005e	7d 18		 jge	 SHORT $LN5@create_sin
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_single_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@HHHPAXH@Z@4JA
  00065	83 c0 0b	 add	 eax, 11			; 0000000bH
  00068	50		 push	 eax
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JDAJJIII@volume?5?$DO?$DN?50@
  00073	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@create_sin:

; 534  : 	ASSERT ( volume <= SOUND_MAXIMUM_VOLUME );

  00078	81 7d 0c ff 00
	00 00		 cmp	 DWORD PTR _volume$[ebp], 255 ; 000000ffH
  0007f	7e 18		 jle	 SHORT $LN6@create_sin
  00081	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_single_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@HHHPAXH@Z@4JA
  00086	83 c0 0c	 add	 eax, 12			; 0000000cH
  00089	50		 push	 eax
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@KNGPAIJ@volume?5?$DM?$DN?5SOUND_MAXIMUM_VOLUME@
  00094	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@create_sin:

; 535  : 
; 536  : 	//
; 537  : 	// Grab the next free sound effect structure.
; 538  : 	//
; 539  : 
; 540  : 	effect = get_next_free_system_system_sound_effect ();

  00099	e8 00 00 00 00	 call	 ?get_next_free_system_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@XZ ; get_next_free_system_system_sound_effect
  0009e	89 45 fc	 mov	 DWORD PTR _effect$[ebp], eax

; 541  : 
; 542  : 	if ( effect )

  000a1	83 7d fc 00	 cmp	 DWORD PTR _effect$[ebp], 0
  000a5	0f 84 f4 00 00
	00		 je	 $LN8@create_sin

; 543  : 	{
; 544  : 		float
; 545  : 			rate;
; 546  : 
; 547  : 		rate = source_sound_samples[sound_sample_index].default_rate;

  000ab	6b 45 08 0c	 imul	 eax, DWORD PTR _sound_sample_index$[ebp], 12
  000af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  000b5	f3 0f 2a 44 01
	08		 cvtsi2ss xmm0, DWORD PTR [ecx+eax+8]
  000bb	f3 0f 11 45 f8	 movss	 DWORD PTR _rate$1[ebp], xmm0

; 548  : 
; 549  : 		//
; 550  : 		// Fill in the details about this sound effect
; 551  : 		//
; 552  : 
; 553  : 		effect->number_of_sequenced_samples = 1;

  000c0	8b 45 fc	 mov	 eax, DWORD PTR _effect$[ebp]
  000c3	c7 40 04 01 00
	00 00		 mov	 DWORD PTR [eax+4], 1

; 554  : 
; 555  : 		effect->sound_sample_sequence[0].sound_sample_index = sound_sample_index;

  000ca	b8 08 00 00 00	 mov	 eax, 8
  000cf	6b c8 00	 imul	 ecx, eax, 0
  000d2	8b 55 fc	 mov	 edx, DWORD PTR _effect$[ebp]
  000d5	8b 45 08	 mov	 eax, DWORD PTR _sound_sample_index$[ebp]
  000d8	89 44 0a 0c	 mov	 DWORD PTR [edx+ecx+12], eax

; 556  : 		effect->sound_sample_sequence[0].rate = rate;

  000dc	f3 0f 2c 45 f8	 cvttss2si eax, DWORD PTR _rate$1[ebp]
  000e1	b9 08 00 00 00	 mov	 ecx, 8
  000e6	6b d1 00	 imul	 edx, ecx, 0
  000e9	8b 4d fc	 mov	 ecx, DWORD PTR _effect$[ebp]
  000ec	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax

; 557  : 
; 558  : 		effect->rate = rate;

  000f0	f3 0f 2c 45 f8	 cvttss2si eax, DWORD PTR _rate$1[ebp]
  000f5	8b 4d fc	 mov	 ecx, DWORD PTR _effect$[ebp]
  000f8	89 81 84 00 00
	00		 mov	 DWORD PTR [ecx+132], eax

; 559  : 		effect->playing = FALSE;

  000fe	8b 45 fc	 mov	 eax, DWORD PTR _effect$[ebp]
  00101	c7 80 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+148], 0

; 560  : 		effect->paused = FALSE;

  0010b	8b 45 fc	 mov	 eax, DWORD PTR _effect$[ebp]
  0010e	c7 80 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+144], 0

; 561  : 		effect->looping = looping;

  00118	8b 45 fc	 mov	 eax, DWORD PTR _effect$[ebp]
  0011b	8b 4d 10	 mov	 ecx, DWORD PTR _looping$[ebp]
  0011e	89 88 9c 00 00
	00		 mov	 DWORD PTR [eax+156], ecx

; 562  : 		effect->volume = volume;

  00124	8b 45 fc	 mov	 eax, DWORD PTR _effect$[ebp]
  00127	8b 4d 0c	 mov	 ecx, DWORD PTR _volume$[ebp]
  0012a	89 88 88 00 00
	00		 mov	 DWORD PTR [eax+136], ecx

; 563  : 		effect->pitch = 1.0;

  00130	8b 45 fc	 mov	 eax, DWORD PTR _effect$[ebp]
  00133	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0013b	f3 0f 11 80 a0
	00 00 00	 movss	 DWORD PTR [eax+160], xmm0

; 564  : 		effect->panning = 0;

  00143	8b 45 fc	 mov	 eax, DWORD PTR _effect$[ebp]
  00146	c7 80 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+140], 0

; 565  : 		effect->user_data = user_data;

  00150	8b 45 fc	 mov	 eax, DWORD PTR _effect$[ebp]
  00153	8b 4d 14	 mov	 ecx, DWORD PTR _user_data$[ebp]
  00156	89 88 a4 00 00
	00		 mov	 DWORD PTR [eax+164], ecx

; 566  : 
; 567  : 		//
; 568  : 		// Duplicate the sound buffer concerned
; 569  : 		//
; 570  : 
; 571  : 		effect->sound_buffer = dsound_duplicate_sound_buffer ( source_sound_samples[sound_sample_index].sound_buffer, source_sound_samples[sound_sample_index].size );

  0015c	6b 45 08 0c	 imul	 eax, DWORD PTR _sound_sample_index$[ebp], 12
  00160	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  00166	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  0016a	52		 push	 edx
  0016b	6b 45 08 0c	 imul	 eax, DWORD PTR _sound_sample_index$[ebp], 12
  0016f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  00175	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00178	52		 push	 edx
  00179	e8 00 00 00 00	 call	 ?dsound_duplicate_sound_buffer@@YGPAUIDirectSoundBuffer@@PAU1@H@Z ; dsound_duplicate_sound_buffer
  0017e	8b 4d fc	 mov	 ecx, DWORD PTR _effect$[ebp]
  00181	89 01		 mov	 DWORD PTR [ecx], eax

; 572  : 
; 573  : 		if ( !effect->sound_buffer )

  00183	8b 45 fc	 mov	 eax, DWORD PTR _effect$[ebp]
  00186	83 38 00	 cmp	 DWORD PTR [eax], 0
  00189	75 14		 jne	 SHORT $LN8@create_sin

; 574  : 		{
; 575  : 
; 576  : 			//
; 577  : 			// Free up the sound effect structure, and return NULL
; 578  : 			//
; 579  : 
; 580  : 			effect->used = FALSE;

  0018b	8b 45 fc	 mov	 eax, DWORD PTR _effect$[ebp]
  0018e	c7 80 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+152], 0

; 581  : 
; 582  : 			effect = NULL;

  00198	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _effect$[ebp], 0
$LN8@create_sin:

; 583  : 		}
; 584  : 	}
; 585  : 
; 586  : 	return ( effect );

  0019f	8b 45 fc	 mov	 eax, DWORD PTR _effect$[ebp]
$LN1@create_sin:

; 587  : }

  001a2	5f		 pop	 edi
  001a3	5e		 pop	 esi
  001a4	5b		 pop	 ebx
  001a5	8b e5		 mov	 esp, ebp
  001a7	5d		 pop	 ebp
  001a8	c2 14 00	 ret	 20			; 00000014H
?create_single_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@HHHPAXH@Z ENDP ; create_single_system_sound_effect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?load_source_sound_sample@@YGXHPAX@Z
_TEXT	SEGMENT
_ptr$ = -4						; size = 4
_sample_index$ = 8					; size = 4
_data$ = 12						; size = 4
?load_source_sound_sample@@YGXHPAX@Z PROC		; load_source_sound_sample, COMDAT

; 499  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 500  : 	unsigned char
; 501  : 		*ptr;
; 502  : 
; 503  : 	ASSERT ( sample_index >= 0 );

  00009	83 7d 08 00	 cmp	 DWORD PTR _sample_index$[ebp], 0
  0000d	7d 18		 jge	 SHORT $LN2@load_sourc
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??load_source_sound_sample@@YGXHPAX@Z@4JA
  00014	83 c0 04	 add	 eax, 4
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NMEGGNGI@sample_index?5?$DO?$DN?50@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@load_sourc:

; 504  : 	ASSERT ( sample_index < number_of_source_sound_samples );

  00027	8b 45 08	 mov	 eax, DWORD PTR _sample_index$[ebp]
  0002a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_source_sound_samples@@3HA ; number_of_source_sound_samples
  00030	7c 18		 jl	 SHORT $LN3@load_sourc
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??load_source_sound_sample@@YGXHPAX@Z@4JA
  00037	83 c0 05	 add	 eax, 5
  0003a	50		 push	 eax
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@KJLNOECH@sample_index?5?$DM?5number_of_source@
  00045	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@load_sourc:

; 505  : 	ASSERT ( source_sound_samples[sample_index].sound_buffer );

  0004a	6b 45 08 0c	 imul	 eax, DWORD PTR _sample_index$[ebp], 12
  0004e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  00054	83 3c 01 00	 cmp	 DWORD PTR [ecx+eax], 0
  00058	75 18		 jne	 SHORT $LN4@load_sourc
  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??load_source_sound_sample@@YGXHPAX@Z@4JA
  0005f	83 c0 06	 add	 eax, 6
  00062	50		 push	 eax
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@KLCOIMK@source_sound_samples?$FLsample_ind@
  0006d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@load_sourc:

; 506  : 
; 507  : 	ptr = dsound_lock_sound_buffer ( source_sound_samples[sample_index].sound_buffer, 0, source_sound_samples[sample_index].size );

  00072	6b 45 08 0c	 imul	 eax, DWORD PTR _sample_index$[ebp], 12
  00076	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  0007c	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  00080	52		 push	 edx
  00081	6a 00		 push	 0
  00083	6b 45 08 0c	 imul	 eax, DWORD PTR _sample_index$[ebp], 12
  00087	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  0008d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00090	52		 push	 edx
  00091	e8 00 00 00 00	 call	 ?dsound_lock_sound_buffer@@YGPAEPAUIDirectSoundBuffer@@HH@Z ; dsound_lock_sound_buffer
  00096	89 45 fc	 mov	 DWORD PTR _ptr$[ebp], eax

; 508  : 
; 509  : 	if ( ptr )

  00099	83 7d fc 00	 cmp	 DWORD PTR _ptr$[ebp], 0
  0009d	74 45		 je	 SHORT $LN1@load_sourc

; 510  : 	{
; 511  : 		memcpy ( ptr, data, source_sound_samples[sample_index].size );

  0009f	6b 45 08 0c	 imul	 eax, DWORD PTR _sample_index$[ebp], 12
  000a3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  000a9	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  000ad	52		 push	 edx
  000ae	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  000b1	50		 push	 eax
  000b2	8b 4d fc	 mov	 ecx, DWORD PTR _ptr$[ebp]
  000b5	51		 push	 ecx
  000b6	e8 00 00 00 00	 call	 _memcpy
  000bb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 512  : 
; 513  : 		dsound_unlock_sound_buffer ( source_sound_samples[sample_index].sound_buffer, ptr, source_sound_samples[sample_index].size );

  000be	6b 45 08 0c	 imul	 eax, DWORD PTR _sample_index$[ebp], 12
  000c2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  000c8	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  000cc	52		 push	 edx
  000cd	8b 45 fc	 mov	 eax, DWORD PTR _ptr$[ebp]
  000d0	50		 push	 eax
  000d1	6b 4d 08 0c	 imul	 ecx, DWORD PTR _sample_index$[ebp], 12
  000d5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  000db	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 ?dsound_unlock_sound_buffer@@YGHPAUIDirectSoundBuffer@@PAEH@Z ; dsound_unlock_sound_buffer
$LN1@load_sourc:

; 514  : 	}
; 515  : }

  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx
  000e7	8b e5		 mov	 esp, ebp
  000e9	5d		 pop	 ebp
  000ea	c2 08 00	 ret	 8
?load_source_sound_sample@@YGXHPAX@Z ENDP		; load_source_sound_sample
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?destroy_source_sound_sample@@YGXH@Z
_TEXT	SEGMENT
_sample_index$ = 8					; size = 4
?destroy_source_sound_sample@@YGXH@Z PROC		; destroy_source_sound_sample, COMDAT

; 477  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 478  : 
; 479  : 	ASSERT ( sample_index >= 0 );

  00009	83 7d 08 00	 cmp	 DWORD PTR _sample_index$[ebp], 0
  0000d	7d 18		 jge	 SHORT $LN2@destroy_so
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??destroy_source_sound_sample@@YGXH@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NMEGGNGI@sample_index?5?$DO?$DN?50@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@destroy_so:

; 480  : 	ASSERT ( sample_index < number_of_source_sound_samples );

  00027	8b 45 08	 mov	 eax, DWORD PTR _sample_index$[ebp]
  0002a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_source_sound_samples@@3HA ; number_of_source_sound_samples
  00030	7c 18		 jl	 SHORT $LN3@destroy_so
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??destroy_source_sound_sample@@YGXH@Z@4JA
  00037	83 c0 03	 add	 eax, 3
  0003a	50		 push	 eax
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@KJLNOECH@sample_index?5?$DM?5number_of_source@
  00045	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@destroy_so:

; 481  : 	ASSERT ( source_sound_samples[sample_index].sound_buffer );

  0004a	6b 45 08 0c	 imul	 eax, DWORD PTR _sample_index$[ebp], 12
  0004e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  00054	83 3c 01 00	 cmp	 DWORD PTR [ecx+eax], 0
  00058	75 18		 jne	 SHORT $LN4@destroy_so
  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??destroy_source_sound_sample@@YGXH@Z@4JA
  0005f	83 c0 04	 add	 eax, 4
  00062	50		 push	 eax
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@KLCOIMK@source_sound_samples?$FLsample_ind@
  0006d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@destroy_so:

; 482  : 
; 483  : 	//
; 484  : 	// Destroy the sound buffer
; 485  : 	//
; 486  : 
; 487  : 	dsound_destroy_sound_buffer ( source_sound_samples[sample_index].sound_buffer );

  00072	6b 45 08 0c	 imul	 eax, DWORD PTR _sample_index$[ebp], 12
  00076	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  0007c	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0007f	52		 push	 edx
  00080	e8 00 00 00 00	 call	 ?dsound_destroy_sound_buffer@@YGXPAUIDirectSoundBuffer@@@Z ; dsound_destroy_sound_buffer

; 488  : 
; 489  : 	source_sound_samples[sample_index].sound_buffer = NULL;

  00085	6b 45 08 0c	 imul	 eax, DWORD PTR _sample_index$[ebp], 12
  00089	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  0008f	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [ecx+eax], 0

; 490  : 	source_sound_samples[sample_index].size = 0;

  00096	6b 45 08 0c	 imul	 eax, DWORD PTR _sample_index$[ebp], 12
  0009a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  000a0	c7 44 01 04 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+4], 0

; 491  : 	source_sound_samples[sample_index].default_rate = 0;

  000a8	6b 45 08 0c	 imul	 eax, DWORD PTR _sample_index$[ebp], 12
  000ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  000b2	c7 44 01 08 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+8], 0

; 492  : }

  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 04 00	 ret	 4
?destroy_source_sound_sample@@YGXH@Z ENDP		; destroy_source_sound_sample
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?create_source_sound_sample@@YGXHW4SAMPLE_TYPES@@HH@Z
_TEXT	SEGMENT
_sample_index$ = 8					; size = 4
_type$ = 12						; size = 4
_default_rate$ = 16					; size = 4
_size$ = 20						; size = 4
?create_source_sound_sample@@YGXHW4SAMPLE_TYPES@@HH@Z PROC ; create_source_sound_sample, COMDAT

; 450  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 451  : 
; 452  : 	ASSERT ( sample_index >= 0 );

  00009	83 7d 08 00	 cmp	 DWORD PTR _sample_index$[ebp], 0
  0000d	7d 18		 jge	 SHORT $LN2@create_sou
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_source_sound_sample@@YGXHW4SAMPLE_TYPES@@HH@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NMEGGNGI@sample_index?5?$DO?$DN?50@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@create_sou:

; 453  : 	ASSERT ( sample_index < number_of_source_sound_samples );

  00027	8b 45 08	 mov	 eax, DWORD PTR _sample_index$[ebp]
  0002a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_source_sound_samples@@3HA ; number_of_source_sound_samples
  00030	7c 18		 jl	 SHORT $LN3@create_sou
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??create_source_sound_sample@@YGXHW4SAMPLE_TYPES@@HH@Z@4JA
  00037	83 c0 03	 add	 eax, 3
  0003a	50		 push	 eax
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@KJLNOECH@sample_index?5?$DM?5number_of_source@
  00045	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@create_sou:

; 454  : 
; 455  : 	if ( source_sound_samples[sample_index].sound_buffer )

  0004a	6b 45 08 0c	 imul	 eax, DWORD PTR _sample_index$[ebp], 12
  0004e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  00054	83 3c 01 00	 cmp	 DWORD PTR [ecx+eax], 0
  00058	74 11		 je	 SHORT $LN4@create_sou

; 456  : 	{
; 457  : 
; 458  : 		debug_log ( "Leaking a DirectSoundBuffer, Sample index: %d", sample_index );

  0005a	8b 45 08	 mov	 eax, DWORD PTR _sample_index$[ebp]
  0005d	50		 push	 eax
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@GMFFJIOI@Leaking?5a?5DirectSoundBuffer?0?5Sa@
  00063	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00068	83 c4 08	 add	 esp, 8
$LN4@create_sou:

; 459  : 	}
; 460  : 
; 461  : 	//
; 462  : 	// Create the sound buffer
; 463  : 	//
; 464  : 
; 465  : 	source_sound_samples[sample_index].sound_buffer = dsound_create_sound_buffer ( type, default_rate, size );

  0006b	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  0006e	50		 push	 eax
  0006f	8b 4d 10	 mov	 ecx, DWORD PTR _default_rate$[ebp]
  00072	51		 push	 ecx
  00073	8b 55 0c	 mov	 edx, DWORD PTR _type$[ebp]
  00076	52		 push	 edx
  00077	e8 00 00 00 00	 call	 ?dsound_create_sound_buffer@@YGPAUIDirectSoundBuffer@@W4SAMPLE_TYPES@@HH@Z ; dsound_create_sound_buffer
  0007c	6b 4d 08 0c	 imul	 ecx, DWORD PTR _sample_index$[ebp], 12
  00080	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  00086	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 466  : 
; 467  : 	source_sound_samples[sample_index].size = size;

  00089	6b 45 08 0c	 imul	 eax, DWORD PTR _sample_index$[ebp], 12
  0008d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  00093	8b 55 14	 mov	 edx, DWORD PTR _size$[ebp]
  00096	89 54 01 04	 mov	 DWORD PTR [ecx+eax+4], edx

; 468  : 
; 469  : 	source_sound_samples[sample_index].default_rate = default_rate;

  0009a	6b 45 08 0c	 imul	 eax, DWORD PTR _sample_index$[ebp], 12
  0009e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  000a4	8b 55 10	 mov	 edx, DWORD PTR _default_rate$[ebp]
  000a7	89 54 01 08	 mov	 DWORD PTR [ecx+eax+8], edx

; 470  : }

  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	5b		 pop	 ebx
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c2 10 00	 ret	 16			; 00000010H
?create_source_sound_sample@@YGXHW4SAMPLE_TYPES@@HH@Z ENDP ; create_source_sound_sample
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?is_source_sound_sample_valid@@YGHH@Z
_TEXT	SEGMENT
_sample_index$ = 8					; size = 4
?is_source_sound_sample_valid@@YGHH@Z PROC		; is_source_sound_sample_valid, COMDAT

; 428  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 429  : 
; 430  : 	ASSERT ( sample_index >= 0 );

  00009	83 7d 08 00	 cmp	 DWORD PTR _sample_index$[ebp], 0
  0000d	7d 18		 jge	 SHORT $LN2@is_source_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??is_source_sound_sample_valid@@YGHH@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NMEGGNGI@sample_index?5?$DO?$DN?50@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@is_source_:

; 431  : 	ASSERT ( sample_index < number_of_source_sound_samples );

  00027	8b 45 08	 mov	 eax, DWORD PTR _sample_index$[ebp]
  0002a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_source_sound_samples@@3HA ; number_of_source_sound_samples
  00030	7c 18		 jl	 SHORT $LN3@is_source_
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??is_source_sound_sample_valid@@YGHH@Z@4JA
  00037	83 c0 03	 add	 eax, 3
  0003a	50		 push	 eax
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@KJLNOECH@sample_index?5?$DM?5number_of_source@
  00045	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@is_source_:

; 432  : 
; 433  : 	if ( ( source_sound_samples[sample_index].sound_buffer ) && ( source_sound_samples[sample_index].size ) )

  0004a	6b 45 08 0c	 imul	 eax, DWORD PTR _sample_index$[ebp], 12
  0004e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  00054	83 3c 01 00	 cmp	 DWORD PTR [ecx+eax], 0
  00058	74 1a		 je	 SHORT $LN4@is_source_
  0005a	6b 45 08 0c	 imul	 eax, DWORD PTR _sample_index$[ebp], 12
  0005e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  00064	83 7c 01 04 00	 cmp	 DWORD PTR [ecx+eax+4], 0
  00069	74 09		 je	 SHORT $LN4@is_source_

; 434  : 	{
; 435  : 
; 436  : 		return ( TRUE );

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	eb 04		 jmp	 SHORT $LN1@is_source_

; 437  : 	}
; 438  : 	else

  00072	eb 02		 jmp	 SHORT $LN1@is_source_
$LN4@is_source_:

; 439  : 	{
; 440  : 
; 441  : 		return ( FALSE );

  00074	33 c0		 xor	 eax, eax
$LN1@is_source_:

; 442  : 	}
; 443  : }

  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
?is_source_sound_sample_valid@@YGHH@Z ENDP		; is_source_sound_sample_valid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?deallocate_source_sound_samples@@YGXXZ
_TEXT	SEGMENT
_count$ = -4						; size = 4
?deallocate_source_sound_samples@@YGXXZ PROC		; deallocate_source_sound_samples, COMDAT

; 269  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 270  : 
; 271  : 	int
; 272  : 		count;
; 273  : 
; 274  : 	for ( count = 0; count < number_of_source_sound_samples; count++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@deallocate
$LN2@deallocate:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@deallocate:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?number_of_source_sound_samples@@3HA ; number_of_source_sound_samples
  00024	7d 46		 jge	 SHORT $LN3@deallocate

; 275  : 	{
; 276  : 
; 277  : 		if ( source_sound_samples[count].sound_buffer )

  00026	6b 45 fc 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  00030	83 3c 01 00	 cmp	 DWORD PTR [ecx+eax], 0
  00034	74 34		 je	 SHORT $LN5@deallocate

; 278  : 		{
; 279  : 
; 280  : 			if ( source_sound_samples[count].sound_buffer )

  00036	6b 45 fc 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  00040	83 3c 01 00	 cmp	 DWORD PTR [ecx+eax], 0
  00044	74 24		 je	 SHORT $LN5@deallocate

; 281  : 			{
; 282  : 
; 283  : 				dsound_destroy_sound_buffer ( source_sound_samples[count].sound_buffer );

  00046	6b 45 fc 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  0004a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  00050	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00053	52		 push	 edx
  00054	e8 00 00 00 00	 call	 ?dsound_destroy_sound_buffer@@YGXPAUIDirectSoundBuffer@@@Z ; dsound_destroy_sound_buffer

; 284  : 	
; 285  : 				source_sound_samples[count].sound_buffer = NULL;

  00059	6b 45 fc 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  0005d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  00063	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [ecx+eax], 0
$LN5@deallocate:

; 286  : 			}
; 287  : 		}
; 288  : 	}

  0006a	eb a6		 jmp	 SHORT $LN2@deallocate
$LN3@deallocate:

; 289  : 
; 290  : 	safe_free ( source_sound_samples );

  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 291  : 
; 292  : 	source_sound_samples = NULL;

  00077	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A, 0 ; source_sound_samples

; 293  : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
?deallocate_source_sound_samples@@YGXXZ ENDP		; deallocate_source_sound_samples
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?allocate_source_sound_samples@@YGXH@Z
_TEXT	SEGMENT
_count$ = -4						; size = 4
_number$ = 8						; size = 4
?allocate_source_sound_samples@@YGXH@Z PROC		; allocate_source_sound_samples, COMDAT

; 229  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 230  : 
; 231  : 	int
; 232  : 		count;
; 233  : 
; 234  : 	ASSERT ( number );

  00009	83 7d 08 00	 cmp	 DWORD PTR _number$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN5@allocate_s
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??allocate_source_sound_samples@@YGXH@Z@4JA
  00014	83 c0 05	 add	 eax, 5
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ICJOLNAH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06EBGNBFIA@number@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@allocate_s:

; 235  : 
; 236  : 	if ( source_sound_samples )

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A, 0 ; source_sound_samples
  0002e	74 05		 je	 SHORT $LN6@allocate_s

; 237  : 	{
; 238  : 
; 239  : 		deallocate_source_sound_samples ();

  00030	e8 00 00 00 00	 call	 ?deallocate_source_sound_samples@@YGXXZ ; deallocate_source_sound_samples
$LN6@allocate_s:

; 240  : 	}
; 241  : 
; 242  : 	//
; 243  : 	// Allocate an array of pointers
; 244  : 	//
; 245  : 
; 246  : 	source_sound_samples = ( sound_sample * ) safe_malloc ( number * sizeof ( sound_sample ) );

  00035	6b 45 08 0c	 imul	 eax, DWORD PTR _number$[ebp], 12
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0003f	a3 00 00 00 00	 mov	 DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A, eax ; source_sound_samples

; 247  : 
; 248  : 	if ( !source_sound_samples )

  00044	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A, 0 ; source_sound_samples
  0004b	75 0d		 jne	 SHORT $LN7@allocate_s

; 249  : 	{
; 250  : 
; 251  : 		debug_fatal ( "Unable to allocate enough memory for sound samples" );

  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@BGLNHKHD@Unable?5to?5allocate?5enough?5memor@
  00052	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00057	83 c4 04	 add	 esp, 4
$LN7@allocate_s:

; 252  : 	}
; 253  : 
; 254  : 
; 255  : 	for ( count = 0; count < number; count++ )

  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00061	eb 09		 jmp	 SHORT $LN4@allocate_s
$LN2@allocate_s:
  00063	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00066	83 c0 01	 add	 eax, 1
  00069	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@allocate_s:
  0006c	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0006f	3b 45 08	 cmp	 eax, DWORD PTR _number$[ebp]
  00072	7d 13		 jge	 SHORT $LN3@allocate_s

; 256  : 	{
; 257  : 
; 258  : 		source_sound_samples[count].sound_buffer = NULL;

  00074	6b 45 fc 0c	 imul	 eax, DWORD PTR _count$[ebp], 12
  00078	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?source_sound_samples@@3PAUSOUND_SAMPLE@@A ; source_sound_samples
  0007e	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [ecx+eax], 0

; 259  : 	}

  00085	eb dc		 jmp	 SHORT $LN2@allocate_s
$LN3@allocate_s:

; 260  : 
; 261  : 	number_of_source_sound_samples = number;

  00087	8b 45 08	 mov	 eax, DWORD PTR _number$[ebp]
  0008a	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_source_sound_samples@@3HA, eax ; number_of_source_sound_samples

; 262  : }

  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
?allocate_source_sound_samples@@YGXH@Z ENDP		; allocate_source_sound_samples
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?get_sound_system_devices@@YGHPAPBD0@Z
_TEXT	SEGMENT
_devices$ = 8						; size = 4
_default_device$ = 12					; size = 4
?get_sound_system_devices@@YGHPAPBD0@Z PROC		; get_sound_system_devices, COMDAT

; 220  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 221  : 	return FALSE;

  00009	33 c0		 xor	 eax, eax

; 222  : }

  0000b	5f		 pop	 edi
  0000c	5e		 pop	 esi
  0000d	5b		 pop	 ebx
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?get_sound_system_devices@@YGHPAPBD0@Z ENDP		; get_sound_system_devices
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?deinitialise_sound_system@@YGXXZ
_TEXT	SEGMENT
?deinitialise_sound_system@@YGXXZ PROC			; deinitialise_sound_system, COMDAT

; 216  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 217  : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?deinitialise_sound_system@@YGXXZ ENDP			; deinitialise_sound_system
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\soundman.c
;	COMDAT ?initialise_sound_system@@YGHXZ
_TEXT	SEGMENT
tv129 = -108						; size = 8
tv130 = -100						; size = 8
_bels$1 = -28						; size = 8
_denominator$2 = -20					; size = 8
_numerator$3 = -12					; size = 8
_count$ = -4						; size = 4
?initialise_sound_system@@YGHXZ PROC			; initialise_sound_system, COMDAT

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 131  : 
; 132  : 	int
; 133  : 		count;
; 134  : 
; 135  : 	if ( command_line_sound_hdwrbuf > 0 && command_line_sound_hdwrbuf <= MAXIMUM_CURRENT_SYSTEM_SOUND_EFFECTS )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_sound_hdwrbuf@@3HA, 0 ; command_line_sound_hdwrbuf
  00010	7e 18		 jle	 SHORT $LN8@initialise
  00012	81 3d 00 00 00
	00 00 01 00 00	 cmp	 DWORD PTR ?command_line_sound_hdwrbuf@@3HA, 256 ; command_line_sound_hdwrbuf, 00000100H
  0001c	7f 0c		 jg	 SHORT $LN8@initialise

; 136  : 		maximum_current_system_sound_effects = command_line_sound_hdwrbuf;

  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_line_sound_hdwrbuf@@3HA ; command_line_sound_hdwrbuf
  00023	a3 00 00 00 00	 mov	 DWORD PTR ?maximum_current_system_sound_effects@@3HA, eax

; 137  : 	else

  00028	eb 0a		 jmp	 SHORT $LN9@initialise
$LN8@initialise:

; 138  : 		maximum_current_system_sound_effects = MAXIMUM_CURRENT_SYSTEM_SOUND_EFFECTS;

  0002a	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?maximum_current_system_sound_effects@@3HA, 256 ; 00000100H
$LN9@initialise:

; 139  : 
; 140  : 	if ( initialise_direct_sound () )

  00034	e8 00 00 00 00	 call	 ?initialise_direct_sound@@YGHXZ ; initialise_direct_sound
  00039	85 c0		 test	 eax, eax
  0003b	0f 84 81 01 00
	00		 je	 $LN10@initialise

; 141  : 	{
; 142  : 
; 143  : 		sound_system_initialised = TRUE;

  00041	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?sound_system_initialised@@3HA, 1 ; sound_system_initialised

; 144  : 
; 145  : 		sound_system_paused = FALSE;

  0004b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?sound_system_paused@@3HA, 0 ; sound_system_paused

; 146  : 	
; 147  : 		//
; 148  : 		// Initialise the sound effects
; 149  : 		//
; 150  : 	
; 151  : 		for ( count = 0; count < maximum_current_system_sound_effects; count++ )

  00055	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0005c	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  0005e	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00061	83 c0 01	 add	 eax, 1
  00064	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@initialise:
  00067	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0006a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?maximum_current_system_sound_effects@@3HA
  00070	7d 46		 jge	 SHORT $LN3@initialise

; 152  : 		{
; 153  : 	
; 154  : 			current_system_sound_effects[count].used = FALSE;

  00072	69 45 fc a8 00
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 168
  00079	c7 80 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_system_sound_effects@@3PAUSYSTEM_SOUND_EFFECT@@A[eax+152], 0

; 155  : 	
; 156  : 			current_system_sound_effects[count].sound_buffer = NULL;

  00083	69 45 fc a8 00
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 168
  0008a	c7 80 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_system_sound_effects@@3PAUSYSTEM_SOUND_EFFECT@@A[eax], 0

; 157  : 	
; 158  : 			current_system_sound_effects[count].paused = FALSE;

  00094	69 45 fc a8 00
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 168
  0009b	c7 80 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_system_sound_effects@@3PAUSYSTEM_SOUND_EFFECT@@A[eax+144], 0

; 159  : 		
; 160  : 			current_system_sound_effects[count].looping = FALSE;

  000a5	69 45 fc a8 00
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 168
  000ac	c7 80 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_system_sound_effects@@3PAUSYSTEM_SOUND_EFFECT@@A[eax+156], 0

; 161  : 		}

  000b6	eb a6		 jmp	 SHORT $LN2@initialise
$LN3@initialise:

; 162  : 	
; 163  : 		//
; 164  : 		// Initialise the volume lookup table
; 165  : 		//
; 166  : 	
; 167  : 		for ( count = 0; count <= SOUND_MAXIMUM_VOLUME; count++ )

  000b8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  000bf	eb 09		 jmp	 SHORT $LN7@initialise
$LN5@initialise:
  000c1	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000c4	83 c0 01	 add	 eax, 1
  000c7	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN7@initialise:
  000ca	81 7d fc ff 00
	00 00		 cmp	 DWORD PTR _count$[ebp], 255 ; 000000ffH
  000d1	0f 8f e2 00 00
	00		 jg	 $LN6@initialise

; 168  : 		{
; 169  : 	
; 170  : 			if ( count == 0 )

  000d7	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  000db	75 13		 jne	 SHORT $LN12@initialise

; 171  : 			{
; 172  : 	
; 173  : 				sound_volume_lookup_table[count] = -10000;

  000dd	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000e0	c7 04 85 00 00
	00 00 f0 d8 ff
	ff		 mov	 DWORD PTR ?sound_volume_lookup_table@@3PAHA[eax*4], -10000 ; ffffd8f0H

; 174  : 			}
; 175  : 			else

  000eb	e9 c4 00 00 00	 jmp	 $LN13@initialise
$LN12@initialise:

; 176  : 			{
; 177  : 	
; 178  : 				double
; 179  : 					numerator,
; 180  : 					denominator,
; 181  : 					bels;
; 182  : 	
; 183  : 				//
; 184  : 				// To convert from a linear range of 0... max to -10000 to 0 in decibels/100
; 185  : 				//
; 186  : 	
; 187  : 				numerator = log ( ( ( double ) SOUND_MAXIMUM_VOLUME ) / ( ( double ) count ) );

  000f0	f2 0f 2a 45 fc	 cvtsi2sd xmm0, DWORD PTR _count$[ebp]
  000f5	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@406fe00000000000
  000fd	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00101	83 ec 08	 sub	 esp, 8
  00104	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  00109	e8 00 00 00 00	 call	 _log
  0010e	83 c4 08	 add	 esp, 8
  00111	dd 5d f4	 fstp	 QWORD PTR _numerator$3[ebp]

; 188  : 				denominator = log ( 2.0 );

  00114	83 ec 08	 sub	 esp, 8
  00117	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4000000000000000
  0011f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00124	e8 00 00 00 00	 call	 _log
  00129	83 c4 08	 add	 esp, 8
  0012c	dd 5d ec	 fstp	 QWORD PTR _denominator$2[ebp]

; 189  : 	
; 190  : 				bels = numerator / denominator;

  0012f	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _numerator$3[ebp]
  00134	f2 0f 5e 45 ec	 divsd	 xmm0, QWORD PTR _denominator$2[ebp]
  00139	f2 0f 11 45 e4	 movsd	 QWORD PTR _bels$1[ebp], xmm0

; 191  : 	
; 192  : 				bels *= -1000.0;

  0013e	f2 0f 10 45 e4	 movsd	 xmm0, QWORD PTR _bels$1[ebp]
  00143	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@c08f400000000000
  0014b	f2 0f 11 45 e4	 movsd	 QWORD PTR _bels$1[ebp], xmm0

; 193  : 	
; 194  : 				bels = bound ( bels, -10000.0, 0 );

  00150	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c0c3880000000000
  00158	66 0f 2f 45 e4	 comisd	 xmm0, QWORD PTR _bels$1[ebp]
  0015d	76 0f		 jbe	 SHORT $LN17@initialise
  0015f	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c0c3880000000000
  00167	f2 0f 11 45 9c	 movsd	 QWORD PTR tv130[ebp], xmm0
  0016c	eb 2d		 jmp	 SHORT $LN18@initialise
$LN17@initialise:
  0016e	f2 0f 10 45 e4	 movsd	 xmm0, QWORD PTR _bels$1[ebp]
  00173	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0017b	76 0a		 jbe	 SHORT $LN15@initialise
  0017d	0f 57 c0	 xorps	 xmm0, xmm0
  00180	f2 0f 11 45 94	 movsd	 QWORD PTR tv129[ebp], xmm0
  00185	eb 0a		 jmp	 SHORT $LN16@initialise
$LN15@initialise:
  00187	f2 0f 10 45 e4	 movsd	 xmm0, QWORD PTR _bels$1[ebp]
  0018c	f2 0f 11 45 94	 movsd	 QWORD PTR tv129[ebp], xmm0
$LN16@initialise:
  00191	f2 0f 10 45 94	 movsd	 xmm0, QWORD PTR tv129[ebp]
  00196	f2 0f 11 45 9c	 movsd	 QWORD PTR tv130[ebp], xmm0
$LN18@initialise:
  0019b	f2 0f 10 45 9c	 movsd	 xmm0, QWORD PTR tv130[ebp]
  001a0	f2 0f 11 45 e4	 movsd	 QWORD PTR _bels$1[ebp], xmm0

; 195  : 	
; 196  : 				sound_volume_lookup_table[count] = bels;

  001a5	f2 0f 2c 45 e4	 cvttsd2si eax, QWORD PTR _bels$1[ebp]
  001aa	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  001ad	89 04 8d 00 00
	00 00		 mov	 DWORD PTR ?sound_volume_lookup_table@@3PAHA[ecx*4], eax
$LN13@initialise:

; 197  : 			}
; 198  : 		}

  001b4	e9 08 ff ff ff	 jmp	 $LN5@initialise
$LN6@initialise:

; 199  : 
; 200  : 		return ( TRUE );

  001b9	b8 01 00 00 00	 mov	 eax, 1
  001be	eb 0e		 jmp	 SHORT $LN11@initialise

; 201  : 	}
; 202  : 	else

  001c0	eb 0c		 jmp	 SHORT $LN11@initialise
$LN10@initialise:

; 203  : 	{
; 204  : 
; 205  : 		sound_system_initialised = FALSE;

  001c2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?sound_system_initialised@@3HA, 0 ; sound_system_initialised

; 206  : 
; 207  : 		return ( FALSE );

  001cc	33 c0		 xor	 eax, eax
$LN11@initialise:

; 208  : 	}
; 209  : }

  001ce	5f		 pop	 edi
  001cf	5e		 pop	 esi
  001d0	5b		 pop	 ebx
  001d1	8b e5		 mov	 esp, ebp
  001d3	5d		 pop	 ebp
  001d4	c3		 ret	 0
?initialise_sound_system@@YGHXZ ENDP			; initialise_sound_system
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fabs@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?fabs@@YGMM@Z PROC					; fabs, COMDAT

; 112  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 113  : 	return (_CSTD fabsf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _fabsf
  00019	83 c4 04	 add	 esp, 4

; 114  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?fabs@@YGMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?acos@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?acos@@YGMM@Z PROC					; acos, COMDAT

; 26   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 27   : 	return (_CSTD acosf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _acosf
  00019	83 c4 04	 add	 esp, 4

; 28   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?acos@@YGMM@Z ENDP					; acos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 671  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 672  :             return (float)fabs(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _fabs
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 673  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _acosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 623  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 624  :             return (float)acos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _acos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 625  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_acosf	ENDP
_TEXT	ENDS
END
