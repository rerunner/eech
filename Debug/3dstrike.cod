; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\3d\3dstrike.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?lightning_strike_animation@@3W4TEXTURE_ANIMATION_INDICES@@A ; lightning_strike_animation
PUBLIC	?lightning_cloud_texture@@3HA			; lightning_cloud_texture
PUBLIC	?number_of_lightning_strikes@@3HA		; number_of_lightning_strikes
PUBLIC	?lightning_strikes@@3PAULIGHTNING_STRIKE@@A	; lightning_strikes
_BSS	SEGMENT
?lightning_strike_animation@@3W4TEXTURE_ANIMATION_INDICES@@A DD 01H DUP (?) ; lightning_strike_animation
?lightning_cloud_texture@@3HA DD 01H DUP (?)		; lightning_cloud_texture
?number_of_lightning_strikes@@3HA DD 01H DUP (?)	; number_of_lightning_strikes
?lightning_strikes@@3PAULIGHTNING_STRIKE@@A DB 0480H DUP (?) ; lightning_strikes
_BSS	ENDS
PUBLIC	_atan2f
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	?atan2@@YGMMM@Z					; atan2
PUBLIC	?cos@@YGMM@Z					; cos
PUBLIC	?sin@@YGMM@Z					; sin
PUBLIC	?sqrt@@YGMM@Z					; sqrt
PUBLIC	?generate_lookup_outcode@@YGHHHHH@Z		; generate_lookup_outcode
PUBLIC	?initialise_3d_lightning@@YGXW4TEXTURE_ANIMATION_INDICES@@H@Z ; initialise_3d_lightning
PUBLIC	?add_3d_lightning_strike@@YGXHMMM@Z		; add_3d_lightning_strike
PUBLIC	?update_3d_lightning_strikes@@YGXPAUENV_3D@@@Z	; update_3d_lightning_strikes
PUBLIC	?draw_3d_lightning_strikes@@YGXXZ		; draw_3d_lightning_strikes
PUBLIC	??_C@_0CA@CEAENJNH@Updating?5unknown?5lightning?5type@ ; `string'
PUBLIC	??_C@_0BP@JFHGKJCH@Drawing?5unknown?5lightning?5type@ ; `string'
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@40400000
PUBLIC	__real@41200000
PUBLIC	__real@437f0000
PUBLIC	__real@453b8000
PUBLIC	__real@45bb8000
PUBLIC	__real@466a6000
PUBLIC	__real@46ea6000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_atan2:PROC
EXTRN	_cos:PROC
EXTRN	_sin:PROC
EXTRN	_sqrt:PROC
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?timed_event_has_finished@@YGHMMMPAM@Z:PROC	; timed_event_has_finished
EXTRN	?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z:PROC	; clip_3d_polygon
EXTRN	?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z:PROC	; set_d3d_alpha_fog_zbuffer
EXTRN	?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; set_d3d_int_state
EXTRN	?set_d3d_texture@@YGXHPAUSCREEN@@@Z:PROC	; set_d3d_texture
EXTRN	?set_d3d_texture_stage_state@@YGXHHH@Z:PROC	; set_d3d_texture_stage_state
EXTRN	?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z:PROC ; draw_wbuffered_flat_shaded_textured_polygon
EXTRN	?get_3d_time_of_day@@YGMPAUENV_3D@@@Z:PROC	; get_3d_time_of_day
EXTRN	?hither_clip_3d_polygon@@YGPAUVERTEX@@PAU1@PAH@Z:PROC ; hither_clip_3d_polygon
EXTRN	?apply_perspective_to_polygon_texture@@YGXPAUVERTEX@@@Z:PROC ; apply_perspective_to_polygon_texture
EXTRN	?remove_perspective_from_polygon_texture@@YGXPAUVERTEX@@@Z:PROC ; remove_perspective_from_polygon_texture
EXTRN	?active_viewport@@3UVIEWPORT@@A:BYTE		; active_viewport
EXTRN	?clip_3d_coord@@3HA:DWORD			; clip_3d_coord
EXTRN	?clip_hither@@3MA:DWORD				; clip_hither
EXTRN	?system_textures@@3PAPAUSCREEN@@A:BYTE		; system_textures
EXTRN	?active_3d_environment@@3PAUENV_3D@@A:DWORD	; active_3d_environment
EXTRN	?visual_3d_vp@@3PAUVIEWPOINT@@A:DWORD		; visual_3d_vp
EXTRN	?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A:DWORD ; texture_animations
EXTRN	?rotation_3d@@3PAY02MA:BYTE			; rotation_3d
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@46ea6000
CONST	SEGMENT
__real@46ea6000 DD 046ea6000r			; 30000
CONST	ENDS
;	COMDAT __real@466a6000
CONST	SEGMENT
__real@466a6000 DD 0466a6000r			; 15000
CONST	ENDS
;	COMDAT __real@45bb8000
CONST	SEGMENT
__real@45bb8000 DD 045bb8000r			; 6000
CONST	ENDS
;	COMDAT __real@453b8000
CONST	SEGMENT
__real@453b8000 DD 0453b8000r			; 3000
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT ??_C@_0BP@JFHGKJCH@Drawing?5unknown?5lightning?5type@
CONST	SEGMENT
??_C@_0BP@JFHGKJCH@Drawing?5unknown?5lightning?5type@ DB 'Drawing unknown'
	DB	' lightning type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CEAENJNH@Updating?5unknown?5lightning?5type@
CONST	SEGMENT
??_C@_0CA@CEAENJNH@Updating?5unknown?5lightning?5type@ DB 'Updating unkno'
	DB	'wn lightning type', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dstrike.c
;	COMDAT ?draw_3d_lightning_cloud_burst@@YGXPAULIGHTNING_STRIKE@@@Z
_TEXT	SEGMENT
_specular$1 = -368					; size = 4
_colour$2 = -364					; size = 4
_iymin$3 = -360						; size = 4
_iymax$4 = -356						; size = 4
_ixmin$5 = -352						; size = 4
_ixmax$6 = -348						; size = 4
_oymin$7 = -344						; size = 4
_oymax$8 = -340						; size = 4
_oxmin$9 = -336						; size = 4
_oxmax$10 = -332					; size = 4
_j$11 = -328						; size = 4
_i$12 = -324						; size = 4
_q$13 = -320						; size = 4
_z$14 = -316						; size = 4
_y$15 = -312						; size = 4
_x$16 = -308						; size = 4
_texture$ = -304					; size = 4
_outcode2$ = -300					; size = 4
_outcode$ = -296					; size = 4
_int_intensity$ = -292					; size = 4
_relative_position$ = -288				; size = 12
_intensity$ = -276					; size = 4
_depth$ = -272						; size = 4
_width$ = -268						; size = 4
_quad$ = -264						; size = 256
_vert$ = -8						; size = 4
_polygon$ = -4						; size = 4
_strike$ = 8						; size = 4
?draw_3d_lightning_cloud_burst@@YGXPAULIGHTNING_STRIKE@@@Z PROC ; draw_3d_lightning_cloud_burst, COMDAT

; 610  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b0 01 00
	00		 sub	 esp, 432		; 000001b0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 611  : 
; 612  : 	vertex
; 613  : 		*polygon,
; 614  : 		*vert,
; 615  : 		quad[4];
; 616  : 
; 617  : 	float
; 618  : 		width,
; 619  : 		depth,
; 620  : 		intensity;
; 621  : 
; 622  : 	vec3d
; 623  : 		relative_position;
; 624  : 
; 625  : 	int
; 626  : 		int_intensity,
; 627  : 		outcode,
; 628  : 		outcode2;
; 629  : 
; 630  : 	screen
; 631  : 		*texture;
; 632  : 
; 633  : 	texture = system_textures[lightning_cloud_texture];

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lightning_cloud_texture@@3HA ; lightning_cloud_texture
  00011	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  00018	89 8d d0 fe ff
	ff		 mov	 DWORD PTR _texture$[ebp], ecx

; 634  : 
; 635  : 	width = 30000;

  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@46ea6000
  00026	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 636  : 	depth = 30000;

  0002e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@46ea6000
  00036	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _depth$[ebp], xmm0

; 637  : 
; 638  : 	if ( !strike->current_frame_number )

  0003e	8b 45 08	 mov	 eax, DWORD PTR _strike$[ebp]
  00041	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00045	75 12		 jne	 SHORT $LN4@draw_3d_li

; 639  : 	{
; 640  : 
; 641  : 		intensity = 0.5;

  00047	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0004f	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _intensity$[ebp], xmm0

; 642  : 	}
; 643  : 	else

  00057	eb 24		 jmp	 SHORT $LN5@draw_3d_li
$LN4@draw_3d_li:

; 644  : 	{
; 645  : 
; 646  : 		intensity = 1.0 / ( ( float ) strike->current_frame_number );

  00059	8b 45 08	 mov	 eax, DWORD PTR _strike$[ebp]
  0005c	f3 0f 2a 40 20	 cvtsi2ss xmm0, DWORD PTR [eax+32]
  00061	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00065	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0006d	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00071	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00075	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _intensity$[ebp], xmm0
$LN5@draw_3d_li:

; 647  : 	}
; 648  : 
; 649  : 	intensity /= 3;

  0007d	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _intensity$[ebp]
  00085	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40400000
  0008d	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _intensity$[ebp], xmm0

; 650  : 
; 651  : 	quad[0].next_vertex = &quad[1];

  00095	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0009a	c1 e0 00	 shl	 eax, 0
  0009d	8d 8c 05 f8 fe
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  000a4	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000a9	6b c2 00	 imul	 eax, edx, 0
  000ac	89 8c 05 20 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], ecx

; 652  : 	quad[1].next_vertex = &quad[2];

  000b3	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000b8	d1 e0		 shl	 eax, 1
  000ba	8d 8c 05 f8 fe
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  000c1	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000c6	c1 e2 00	 shl	 edx, 0
  000c9	89 8c 15 20 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+edx+40], ecx

; 653  : 	quad[2].next_vertex = &quad[3];

  000d0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000d5	6b c8 03	 imul	 ecx, eax, 3
  000d8	8d 94 0d f8 fe
	ff ff		 lea	 edx, DWORD PTR _quad$[ebp+ecx]
  000df	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000e4	d1 e0		 shl	 eax, 1
  000e6	89 94 05 20 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], edx

; 654  : 	quad[3].next_vertex = NULL;

  000ed	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000f2	6b c8 03	 imul	 ecx, eax, 3
  000f5	c7 84 0d 20 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$[ebp+ecx+40], 0

; 655  : 
; 656  : 	quad[0].x = -width/2;

  00100	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00108	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0010f	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00117	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0011c	6b c8 00	 imul	 ecx, eax, 0
  0011f	f3 0f 11 84 0d
	f8 fe ff ff	 movss	 DWORD PTR _quad$[ebp+ecx], xmm0

; 657  : 	quad[0].y = 0;

  00128	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0012d	6b c8 00	 imul	 ecx, eax, 0
  00130	0f 57 c0	 xorps	 xmm0, xmm0
  00133	f3 0f 11 84 0d
	fc fe ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+4], xmm0

; 658  : 	quad[0].z = -depth/2;

  0013c	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _depth$[ebp]
  00144	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0014b	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00153	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00158	6b c8 00	 imul	 ecx, eax, 0
  0015b	f3 0f 11 84 0d
	00 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 659  : 	quad[0].u = 0;

  00164	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00169	6b c8 00	 imul	 ecx, eax, 0
  0016c	0f 57 c0	 xorps	 xmm0, xmm0
  0016f	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+24], xmm0

; 660  : 	quad[0].v = 0;

  00178	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0017d	6b c8 00	 imul	 ecx, eax, 0
  00180	0f 57 c0	 xorps	 xmm0, xmm0
  00183	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+28], xmm0

; 661  : 
; 662  : 	quad[1].x = width/2;

  0018c	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00194	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0019c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001a1	c1 e0 00	 shl	 eax, 0
  001a4	f3 0f 11 84 05
	f8 fe ff ff	 movss	 DWORD PTR _quad$[ebp+eax], xmm0

; 663  : 	quad[1].y = 0;

  001ad	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001b2	c1 e0 00	 shl	 eax, 0
  001b5	0f 57 c0	 xorps	 xmm0, xmm0
  001b8	f3 0f 11 84 05
	fc fe ff ff	 movss	 DWORD PTR _quad$[ebp+eax+4], xmm0

; 664  : 	quad[1].z = -depth/2;

  001c1	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _depth$[ebp]
  001c9	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001d0	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  001d8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001dd	c1 e0 00	 shl	 eax, 0
  001e0	f3 0f 11 84 05
	00 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 665  : 	quad[1].u = 1;

  001e9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001ee	c1 e0 00	 shl	 eax, 0
  001f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001f9	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+24], xmm0

; 666  : 	quad[1].v = 0;

  00202	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00207	c1 e0 00	 shl	 eax, 0
  0020a	0f 57 c0	 xorps	 xmm0, xmm0
  0020d	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+28], xmm0

; 667  : 
; 668  : 	quad[2].x = width/2;

  00216	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  0021e	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00226	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0022b	d1 e0		 shl	 eax, 1
  0022d	f3 0f 11 84 05
	f8 fe ff ff	 movss	 DWORD PTR _quad$[ebp+eax], xmm0

; 669  : 	quad[2].y = 0;

  00236	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0023b	d1 e0		 shl	 eax, 1
  0023d	0f 57 c0	 xorps	 xmm0, xmm0
  00240	f3 0f 11 84 05
	fc fe ff ff	 movss	 DWORD PTR _quad$[ebp+eax+4], xmm0

; 670  : 	quad[2].z = depth/2;

  00249	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _depth$[ebp]
  00251	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00259	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0025e	d1 e0		 shl	 eax, 1
  00260	f3 0f 11 84 05
	00 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 671  : 	quad[2].u = 1;

  00269	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0026e	d1 e0		 shl	 eax, 1
  00270	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00278	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+24], xmm0

; 672  : 	quad[2].v = 1;

  00281	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00286	d1 e0		 shl	 eax, 1
  00288	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00290	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+28], xmm0

; 673  : 
; 674  : 	quad[3].x = -width/2;

  00299	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  002a1	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  002a8	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  002b0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002b5	6b c8 03	 imul	 ecx, eax, 3
  002b8	f3 0f 11 84 0d
	f8 fe ff ff	 movss	 DWORD PTR _quad$[ebp+ecx], xmm0

; 675  : 	quad[3].y = 0;

  002c1	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002c6	6b c8 03	 imul	 ecx, eax, 3
  002c9	0f 57 c0	 xorps	 xmm0, xmm0
  002cc	f3 0f 11 84 0d
	fc fe ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+4], xmm0

; 676  : 	quad[3].z = depth/2;

  002d5	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _depth$[ebp]
  002dd	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  002e5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002ea	6b c8 03	 imul	 ecx, eax, 3
  002ed	f3 0f 11 84 0d
	00 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 677  : 	quad[3].u = 0;

  002f6	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002fb	6b c8 03	 imul	 ecx, eax, 3
  002fe	0f 57 c0	 xorps	 xmm0, xmm0
  00301	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+24], xmm0

; 678  : 	quad[3].v = 1;

  0030a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0030f	6b c8 03	 imul	 ecx, eax, 3
  00312	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0031a	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+28], xmm0

; 679  : 
; 680  : 	polygon = quad;

  00323	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _quad$[ebp]
  00329	89 45 fc	 mov	 DWORD PTR _polygon$[ebp], eax

; 681  : 
; 682  : 	//
; 683  : 	// Calculate the relative position of the lightning strike
; 684  : 	//
; 685  : 
; 686  : 	relative_position.x = (	( strike->position.x - visual_3d_vp->x ) * visual_3d_vp->xv.x +

  0032c	8b 45 08	 mov	 eax, DWORD PTR _strike$[ebp]
  0032f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00335	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00339	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0033d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00343	f3 0f 59 42 0c	 mulss	 xmm0, DWORD PTR [edx+12]
  00348	8b 45 08	 mov	 eax, DWORD PTR _strike$[ebp]
  0034b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00351	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  00356	f3 0f 5c 49 04	 subss	 xmm1, DWORD PTR [ecx+4]
  0035b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00361	f3 0f 59 4a 10	 mulss	 xmm1, DWORD PTR [edx+16]
  00366	f3 0f 58 c1	 addss	 xmm0, xmm1
  0036a	8b 45 08	 mov	 eax, DWORD PTR _strike$[ebp]
  0036d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00373	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  00378	f3 0f 5c 49 08	 subss	 xmm1, DWORD PTR [ecx+8]
  0037d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00383	f3 0f 59 4a 14	 mulss	 xmm1, DWORD PTR [edx+20]
  00388	f3 0f 58 c1	 addss	 xmm0, xmm1
  0038c	f3 0f 11 85 e0
	fe ff ff	 movss	 DWORD PTR _relative_position$[ebp], xmm0

; 687  : 									( strike->position.y - visual_3d_vp->y ) * visual_3d_vp->xv.y +
; 688  : 									( strike->position.z - visual_3d_vp->z ) * visual_3d_vp->xv.z );
; 689  : 
; 690  : 	relative_position.y = (	( strike->position.x - visual_3d_vp->x ) * visual_3d_vp->yv.x +

  00394	8b 45 08	 mov	 eax, DWORD PTR _strike$[ebp]
  00397	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0039d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  003a1	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  003a5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  003ab	f3 0f 59 42 18	 mulss	 xmm0, DWORD PTR [edx+24]
  003b0	8b 45 08	 mov	 eax, DWORD PTR _strike$[ebp]
  003b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  003b9	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  003be	f3 0f 5c 49 04	 subss	 xmm1, DWORD PTR [ecx+4]
  003c3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  003c9	f3 0f 59 4a 1c	 mulss	 xmm1, DWORD PTR [edx+28]
  003ce	f3 0f 58 c1	 addss	 xmm0, xmm1
  003d2	8b 45 08	 mov	 eax, DWORD PTR _strike$[ebp]
  003d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  003db	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  003e0	f3 0f 5c 49 08	 subss	 xmm1, DWORD PTR [ecx+8]
  003e5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  003eb	f3 0f 59 4a 20	 mulss	 xmm1, DWORD PTR [edx+32]
  003f0	f3 0f 58 c1	 addss	 xmm0, xmm1
  003f4	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR _relative_position$[ebp+4], xmm0

; 691  : 									( strike->position.y - visual_3d_vp->y ) * visual_3d_vp->yv.y +
; 692  : 									( strike->position.z - visual_3d_vp->z ) * visual_3d_vp->yv.z );
; 693  : 
; 694  : 	relative_position.z = (	( strike->position.x - visual_3d_vp->x ) * visual_3d_vp->zv.x +

  003fc	8b 45 08	 mov	 eax, DWORD PTR _strike$[ebp]
  003ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00405	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00409	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0040d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00413	f3 0f 59 42 24	 mulss	 xmm0, DWORD PTR [edx+36]
  00418	8b 45 08	 mov	 eax, DWORD PTR _strike$[ebp]
  0041b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00421	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  00426	f3 0f 5c 49 04	 subss	 xmm1, DWORD PTR [ecx+4]
  0042b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00431	f3 0f 59 4a 28	 mulss	 xmm1, DWORD PTR [edx+40]
  00436	f3 0f 58 c1	 addss	 xmm0, xmm1
  0043a	8b 45 08	 mov	 eax, DWORD PTR _strike$[ebp]
  0043d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00443	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  00448	f3 0f 5c 49 08	 subss	 xmm1, DWORD PTR [ecx+8]
  0044d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00453	f3 0f 59 4a 2c	 mulss	 xmm1, DWORD PTR [edx+44]
  00458	f3 0f 58 c1	 addss	 xmm0, xmm1
  0045c	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _relative_position$[ebp+8], xmm0

; 695  : 									( strike->position.y - visual_3d_vp->y ) * visual_3d_vp->zv.y +
; 696  : 									( strike->position.z - visual_3d_vp->z ) * visual_3d_vp->zv.z );
; 697  : 
; 698  : 	{
; 699  : 
; 700  : 		//
; 701  : 		// Rotate the polygon around to the users viewpoint
; 702  : 		//
; 703  : 	
; 704  : 		vert = polygon;

  00464	8b 45 fc	 mov	 eax, DWORD PTR _polygon$[ebp]
  00467	89 45 f8	 mov	 DWORD PTR _vert$[ebp], eax

; 705  : 	
; 706  : 		rotation_3d[0][0] = ( visual_3d_vp->xv.x );

  0046a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0046f	6b c8 00	 imul	 ecx, eax, 0
  00472	ba 04 00 00 00	 mov	 edx, 4
  00477	6b c2 00	 imul	 eax, edx, 0
  0047a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00480	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  00483	89 94 01 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax], edx

; 707  : 		rotation_3d[0][1] = ( visual_3d_vp->yv.x );

  0048a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0048f	6b c8 00	 imul	 ecx, eax, 0
  00492	ba 04 00 00 00	 mov	 edx, 4
  00497	c1 e2 00	 shl	 edx, 0
  0049a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0049f	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  004a2	89 84 11 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], eax

; 708  : 		rotation_3d[0][2] = ( visual_3d_vp->zv.x );

  004a9	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004ae	6b c8 00	 imul	 ecx, eax, 0
  004b1	ba 04 00 00 00	 mov	 edx, 4
  004b6	d1 e2		 shl	 edx, 1
  004b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  004bd	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  004c0	89 84 11 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], eax

; 709  : 	
; 710  : 		rotation_3d[1][0] = ( visual_3d_vp->xv.y );

  004c7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004cc	c1 e0 00	 shl	 eax, 0
  004cf	b9 04 00 00 00	 mov	 ecx, 4
  004d4	6b d1 00	 imul	 edx, ecx, 0
  004d7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  004dd	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  004e0	89 8c 10 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], ecx

; 711  : 		rotation_3d[1][1] = ( visual_3d_vp->yv.y );

  004e7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004ec	c1 e0 00	 shl	 eax, 0
  004ef	b9 04 00 00 00	 mov	 ecx, 4
  004f4	c1 e1 00	 shl	 ecx, 0
  004f7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  004fd	8b 52 1c	 mov	 edx, DWORD PTR [edx+28]
  00500	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], edx

; 712  : 		rotation_3d[1][2] = ( visual_3d_vp->zv.y );

  00507	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0050c	c1 e0 00	 shl	 eax, 0
  0050f	b9 04 00 00 00	 mov	 ecx, 4
  00514	d1 e1		 shl	 ecx, 1
  00516	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0051c	8b 52 28	 mov	 edx, DWORD PTR [edx+40]
  0051f	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], edx

; 713  : 	
; 714  : 		rotation_3d[2][0] = ( visual_3d_vp->xv.z );

  00526	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0052b	d1 e0		 shl	 eax, 1
  0052d	b9 04 00 00 00	 mov	 ecx, 4
  00532	6b d1 00	 imul	 edx, ecx, 0
  00535	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0053b	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0053e	89 8c 10 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], ecx

; 715  : 		rotation_3d[2][1] = ( visual_3d_vp->yv.z );

  00545	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0054a	d1 e0		 shl	 eax, 1
  0054c	b9 04 00 00 00	 mov	 ecx, 4
  00551	c1 e1 00	 shl	 ecx, 0
  00554	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0055a	8b 52 20	 mov	 edx, DWORD PTR [edx+32]
  0055d	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], edx

; 716  : 		rotation_3d[2][2] = ( visual_3d_vp->zv.z );

  00564	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00569	d1 e0		 shl	 eax, 1
  0056b	b9 04 00 00 00	 mov	 ecx, 4
  00570	d1 e1		 shl	 ecx, 1
  00572	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00578	8b 52 2c	 mov	 edx, DWORD PTR [edx+44]
  0057b	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], edx

; 717  : 
; 718  : 		outcode = 0;

  00582	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _outcode$[ebp], 0

; 719  : 
; 720  : 		outcode2 = CLIP_LEFT | CLIP_RIGHT | CLIP_TOP | CLIP_BOTTOM | CLIP_HITHER | CLIP_YONDER;

  0058c	c7 85 d4 fe ff
	ff 3f 00 00 00	 mov	 DWORD PTR _outcode2$[ebp], 63 ; 0000003fH

; 721  : 
; 722  : 		clip_3d_coord = 0;

  00596	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, 0 ; clip_3d_coord
$LN2@draw_3d_li:

; 723  : 
; 724  : 		while ( vert )

  005a0	83 7d f8 00	 cmp	 DWORD PTR _vert$[ebp], 0
  005a4	0f 84 b9 03 00
	00		 je	 $LN3@draw_3d_li

; 725  : 		{
; 726  : 	
; 727  : 			float
; 728  : 				x,
; 729  : 				y,
; 730  : 				z;
; 731  : 	
; 732  : 			x = vert->x * rotation_3d[0][0] + vert->y * rotation_3d[1][0] + vert->z * rotation_3d[2][0] + relative_position.x;

  005aa	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005af	6b c8 00	 imul	 ecx, eax, 0
  005b2	ba 04 00 00 00	 mov	 edx, 4
  005b7	6b c2 00	 imul	 eax, edx, 0
  005ba	8b 55 f8	 mov	 edx, DWORD PTR _vert$[ebp]
  005bd	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  005c1	f3 0f 59 84 01
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax]
  005ca	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005cf	c1 e0 00	 shl	 eax, 0
  005d2	b9 04 00 00 00	 mov	 ecx, 4
  005d7	6b d1 00	 imul	 edx, ecx, 0
  005da	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  005dd	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  005e2	f3 0f 59 8c 10
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  005eb	f3 0f 58 c1	 addss	 xmm0, xmm1
  005ef	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  005f4	d1 e2		 shl	 edx, 1
  005f6	b8 04 00 00 00	 mov	 eax, 4
  005fb	6b c8 00	 imul	 ecx, eax, 0
  005fe	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  00601	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  00606	f3 0f 59 8c 0a
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[edx+ecx]
  0060f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00613	f3 0f 58 85 e0
	fe ff ff	 addss	 xmm0, DWORD PTR _relative_position$[ebp]
  0061b	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR _x$16[ebp], xmm0

; 733  : 			y = vert->x * rotation_3d[0][1] + vert->y * rotation_3d[1][1] + vert->z * rotation_3d[2][1] + relative_position.y;

  00623	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00628	6b c8 00	 imul	 ecx, eax, 0
  0062b	ba 04 00 00 00	 mov	 edx, 4
  00630	c1 e2 00	 shl	 edx, 0
  00633	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  00636	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0063a	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00643	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00648	c1 e1 00	 shl	 ecx, 0
  0064b	ba 04 00 00 00	 mov	 edx, 4
  00650	c1 e2 00	 shl	 edx, 0
  00653	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  00656	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  0065b	f3 0f 59 8c 11
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00664	f3 0f 58 c1	 addss	 xmm0, xmm1
  00668	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0066d	d1 e1		 shl	 ecx, 1
  0066f	ba 04 00 00 00	 mov	 edx, 4
  00674	c1 e2 00	 shl	 edx, 0
  00677	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  0067a	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  0067f	f3 0f 59 8c 11
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00688	f3 0f 58 c1	 addss	 xmm0, xmm1
  0068c	f3 0f 58 85 e4
	fe ff ff	 addss	 xmm0, DWORD PTR _relative_position$[ebp+4]
  00694	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR _y$15[ebp], xmm0

; 734  : 			z = vert->x * rotation_3d[0][2] + vert->y * rotation_3d[1][2] + vert->z * rotation_3d[2][2] + relative_position.z;

  0069c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  006a1	6b c8 00	 imul	 ecx, eax, 0
  006a4	ba 04 00 00 00	 mov	 edx, 4
  006a9	d1 e2		 shl	 edx, 1
  006ab	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  006ae	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  006b2	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  006bb	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  006c0	c1 e1 00	 shl	 ecx, 0
  006c3	ba 04 00 00 00	 mov	 edx, 4
  006c8	d1 e2		 shl	 edx, 1
  006ca	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  006cd	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  006d2	f3 0f 59 8c 11
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  006db	f3 0f 58 c1	 addss	 xmm0, xmm1
  006df	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  006e4	d1 e1		 shl	 ecx, 1
  006e6	ba 04 00 00 00	 mov	 edx, 4
  006eb	d1 e2		 shl	 edx, 1
  006ed	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  006f0	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  006f5	f3 0f 59 8c 11
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  006fe	f3 0f 58 c1	 addss	 xmm0, xmm1
  00702	f3 0f 58 85 e8
	fe ff ff	 addss	 xmm0, DWORD PTR _relative_position$[ebp+8]
  0070a	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR _z$14[ebp], xmm0

; 735  : 
; 736  : 			x *= active_3d_environment->screen_i_scale;

  00712	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00717	f3 0f 10 85 cc
	fe ff ff	 movss	 xmm0, DWORD PTR _x$16[ebp]
  0071f	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  00723	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR _x$16[ebp], xmm0

; 737  : 			y *= active_3d_environment->screen_j_scale;

  0072b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00730	f3 0f 10 85 c8
	fe ff ff	 movss	 xmm0, DWORD PTR _y$15[ebp]
  00738	f3 0f 59 40 04	 mulss	 xmm0, DWORD PTR [eax+4]
  0073d	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR _y$15[ebp], xmm0

; 738  : 
; 739  : 			if ( *( ( int * ) &z ) >= *( ( int * ) &clip_hither ) )

  00745	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _z$14[ebp]
  0074b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?clip_hither@@3MA
  00751	0f 8c a2 01 00
	00		 jl	 $LN6@draw_3d_li

; 740  : 			{
; 741  : 	
; 742  : 				float
; 743  : 					q,
; 744  : 					i,
; 745  : 					j;
; 746  : 	
; 747  : 				float
; 748  : 					oxmax,
; 749  : 					oxmin,
; 750  : 					oymax,
; 751  : 					oymin;
; 752  : 			
; 753  : 				int
; 754  : 					ixmax,
; 755  : 					ixmin,
; 756  : 					iymax,
; 757  : 					iymin;
; 758  : 			
; 759  : 				q = 1.0 / z;

  00757	f3 0f 5a 85 c4
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _z$14[ebp]
  0075f	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00767	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0076b	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0076f	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _q$13[ebp], xmm0

; 760  : 	
; 761  : 				vert->x = x;

  00777	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  0077a	f3 0f 10 85 cc
	fe ff ff	 movss	 xmm0, DWORD PTR _x$16[ebp]
  00782	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 762  : 				vert->y = y;

  00786	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  00789	f3 0f 10 85 c8
	fe ff ff	 movss	 xmm0, DWORD PTR _y$15[ebp]
  00791	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 763  : 				vert->z = z;

  00796	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  00799	f3 0f 10 85 c4
	fe ff ff	 movss	 xmm0, DWORD PTR _z$14[ebp]
  007a1	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 764  : 				vert->q = q;

  007a6	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  007a9	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR _q$13[ebp]
  007b1	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 765  : 	
; 766  : 				i = ( x * q );

  007b6	f3 0f 10 85 cc
	fe ff ff	 movss	 xmm0, DWORD PTR _x$16[ebp]
  007be	f3 0f 59 85 c0
	fe ff ff	 mulss	 xmm0, DWORD PTR _q$13[ebp]
  007c6	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR _i$12[ebp], xmm0

; 767  : 				j = ( y * q );

  007ce	f3 0f 10 85 c8
	fe ff ff	 movss	 xmm0, DWORD PTR _y$15[ebp]
  007d6	f3 0f 59 85 c0
	fe ff ff	 mulss	 xmm0, DWORD PTR _q$13[ebp]
  007de	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR _j$11[ebp], xmm0

; 768  : 	
; 769  : 				vert->j = active_3d_environment->y_origin - j;

  007e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  007eb	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  007f0	f3 0f 5c 85 b8
	fe ff ff	 subss	 xmm0, DWORD PTR _j$11[ebp]
  007f8	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  007fb	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 770  : 				vert->i = active_3d_environment->x_origin + i;

  00800	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00805	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  0080a	f3 0f 58 85 bc
	fe ff ff	 addss	 xmm0, DWORD PTR _i$12[ebp]
  00812	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  00815	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0

; 771  : 	
; 772  : 				oxmax = active_viewport.x_max - vert->i;

  0081a	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  0081d	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  00825	f3 0f 5c 40 10	 subss	 xmm0, DWORD PTR [eax+16]
  0082a	f3 0f 11 85 b4
	fe ff ff	 movss	 DWORD PTR _oxmax$10[ebp], xmm0

; 773  : 				oxmin = vert->i - active_viewport.x_min;

  00832	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  00835	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  0083a	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00842	f3 0f 11 85 b0
	fe ff ff	 movss	 DWORD PTR _oxmin$9[ebp], xmm0

; 774  : 				oymax = active_viewport.y_max - vert->j;

  0084a	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  0084d	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  00855	f3 0f 5c 40 14	 subss	 xmm0, DWORD PTR [eax+20]
  0085a	f3 0f 11 85 ac
	fe ff ff	 movss	 DWORD PTR _oymax$8[ebp], xmm0

; 775  : 				oymin = vert->j - active_viewport.y_min;

  00862	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  00865	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  0086a	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  00872	f3 0f 11 85 a8
	fe ff ff	 movss	 DWORD PTR _oymin$7[ebp], xmm0

; 776  : 			
; 777  : 				ixmax = *( ( int * ) &oxmax );

  0087a	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _oxmax$10[ebp]
  00880	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _ixmax$6[ebp], eax

; 778  : 				ixmin = *( ( int * ) &oxmin );

  00886	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _oxmin$9[ebp]
  0088c	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _ixmin$5[ebp], eax

; 779  : 				iymax = *( ( int * ) &oymax );

  00892	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _oymax$8[ebp]
  00898	89 85 9c fe ff
	ff		 mov	 DWORD PTR _iymax$4[ebp], eax

; 780  : 				iymin = *( ( int * ) &oymin );

  0089e	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _oymin$7[ebp]
  008a4	89 85 98 fe ff
	ff		 mov	 DWORD PTR _iymin$3[ebp], eax

; 781  : 			
; 782  : 				vert->outcode = generate_lookup_outcode ( ixmin, iymin, ixmax, iymax );

  008aa	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _iymax$4[ebp]
  008b0	50		 push	 eax
  008b1	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _ixmax$6[ebp]
  008b7	51		 push	 ecx
  008b8	8b 95 98 fe ff
	ff		 mov	 edx, DWORD PTR _iymin$3[ebp]
  008be	52		 push	 edx
  008bf	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _ixmin$5[ebp]
  008c5	50		 push	 eax
  008c6	e8 00 00 00 00	 call	 ?generate_lookup_outcode@@YGHHHHH@Z ; generate_lookup_outcode
  008cb	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  008ce	88 41 2c	 mov	 BYTE PTR [ecx+44], al

; 783  : 
; 784  : 				outcode |= vert->outcode;

  008d1	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  008d4	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  008d8	0b 8d d8 fe ff
	ff		 or	 ecx, DWORD PTR _outcode$[ebp]
  008de	89 8d d8 fe ff
	ff		 mov	 DWORD PTR _outcode$[ebp], ecx

; 785  : 				outcode2 &= vert->outcode;

  008e4	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  008e7	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  008eb	23 8d d4 fe ff
	ff		 and	 ecx, DWORD PTR _outcode2$[ebp]
  008f1	89 8d d4 fe ff
	ff		 mov	 DWORD PTR _outcode2$[ebp], ecx

; 786  : 			}
; 787  : 			else

  008f7	eb 5c		 jmp	 SHORT $LN7@draw_3d_li
$LN6@draw_3d_li:

; 788  : 			{
; 789  : 	
; 790  : 				vert->outcode = CLIP_HITHER;

  008f9	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  008fc	c6 40 2c 20	 mov	 BYTE PTR [eax+44], 32	; 00000020H

; 791  : 				vert->z = z;

  00900	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  00903	f3 0f 10 85 c4
	fe ff ff	 movss	 xmm0, DWORD PTR _z$14[ebp]
  0090b	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 792  : 				vert->x = x;

  00910	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  00913	f3 0f 10 85 cc
	fe ff ff	 movss	 xmm0, DWORD PTR _x$16[ebp]
  0091b	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 793  : 				vert->y = y;

  0091f	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  00922	f3 0f 10 85 c8
	fe ff ff	 movss	 xmm0, DWORD PTR _y$15[ebp]
  0092a	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 794  : 
; 795  : 				outcode |= vert->outcode;

  0092f	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  00932	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00936	0b 8d d8 fe ff
	ff		 or	 ecx, DWORD PTR _outcode$[ebp]
  0093c	89 8d d8 fe ff
	ff		 mov	 DWORD PTR _outcode$[ebp], ecx

; 796  : 				outcode2 &= vert->outcode;

  00942	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  00945	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00949	23 8d d4 fe ff
	ff		 and	 ecx, DWORD PTR _outcode2$[ebp]
  0094f	89 8d d4 fe ff
	ff		 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN7@draw_3d_li:

; 797  : 			}
; 798  : 	
; 799  : 			vert = vert->next_vertex;

  00955	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  00958	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0095b	89 4d f8	 mov	 DWORD PTR _vert$[ebp], ecx

; 800  : 		}

  0095e	e9 3d fc ff ff	 jmp	 $LN2@draw_3d_li
$LN3@draw_3d_li:

; 801  : 
; 802  : 		if ( outcode2 )

  00963	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR _outcode2$[ebp], 0
  0096a	74 05		 je	 SHORT $LN8@draw_3d_li

; 803  : 		{
; 804  : 
; 805  : 			return;

  0096c	e9 4f 01 00 00	 jmp	 $LN1@draw_3d_li
$LN8@draw_3d_li:

; 806  : 		}
; 807  : 
; 808  : 
; 809  : 		if ( outcode & CLIP_HITHER )

  00971	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _outcode$[ebp]
  00977	83 e0 20	 and	 eax, 32			; 00000020H
  0097a	74 1e		 je	 SHORT $LN10@draw_3d_li

; 810  : 		{
; 811  : 	
; 812  : 			polygon = hither_clip_3d_polygon ( polygon, &outcode );

  0097c	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _outcode$[ebp]
  00982	50		 push	 eax
  00983	8b 4d fc	 mov	 ecx, DWORD PTR _polygon$[ebp]
  00986	51		 push	 ecx
  00987	e8 00 00 00 00	 call	 ?hither_clip_3d_polygon@@YGPAUVERTEX@@PAU1@PAH@Z ; hither_clip_3d_polygon
  0098c	89 45 fc	 mov	 DWORD PTR _polygon$[ebp], eax

; 813  : 
; 814  : 			if ( !polygon )

  0098f	83 7d fc 00	 cmp	 DWORD PTR _polygon$[ebp], 0
  00993	75 05		 jne	 SHORT $LN10@draw_3d_li

; 815  : 			{
; 816  : 
; 817  : 				return;

  00995	e9 26 01 00 00	 jmp	 $LN1@draw_3d_li
$LN10@draw_3d_li:

; 818  : 			}
; 819  : 		}
; 820  : 	
; 821  : 		if ( outcode )

  0099a	83 bd d8 fe ff
	ff 00		 cmp	 DWORD PTR _outcode$[ebp], 0
  009a1	74 30		 je	 SHORT $LN11@draw_3d_li

; 822  : 		{
; 823  : 
; 824  : 			apply_perspective_to_polygon_texture ( polygon );

  009a3	8b 45 fc	 mov	 eax, DWORD PTR _polygon$[ebp]
  009a6	50		 push	 eax
  009a7	e8 00 00 00 00	 call	 ?apply_perspective_to_polygon_texture@@YGXPAUVERTEX@@@Z ; apply_perspective_to_polygon_texture

; 825  : 			
; 826  : 			polygon = clip_3d_polygon ( polygon, outcode );

  009ac	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _outcode$[ebp]
  009b2	50		 push	 eax
  009b3	8b 4d fc	 mov	 ecx, DWORD PTR _polygon$[ebp]
  009b6	51		 push	 ecx
  009b7	e8 00 00 00 00	 call	 ?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z ; clip_3d_polygon
  009bc	89 45 fc	 mov	 DWORD PTR _polygon$[ebp], eax

; 827  : 
; 828  : 			if ( !polygon )

  009bf	83 7d fc 00	 cmp	 DWORD PTR _polygon$[ebp], 0
  009c3	75 05		 jne	 SHORT $LN12@draw_3d_li

; 829  : 			{
; 830  : 
; 831  : 				return;

  009c5	e9 f6 00 00 00	 jmp	 $LN1@draw_3d_li
$LN12@draw_3d_li:

; 832  : 			}
; 833  : 
; 834  : 			remove_perspective_from_polygon_texture ( polygon );

  009ca	8b 45 fc	 mov	 eax, DWORD PTR _polygon$[ebp]
  009cd	50		 push	 eax
  009ce	e8 00 00 00 00	 call	 ?remove_perspective_from_polygon_texture@@YGXPAUVERTEX@@@Z ; remove_perspective_from_polygon_texture
$LN11@draw_3d_li:

; 835  : 		}
; 836  : 
; 837  : 		{
; 838  : 
; 839  : 			real_colour
; 840  : 				colour,
; 841  : 				specular;
; 842  : 
; 843  : 			set_d3d_alpha_fog_zbuffer ( TRUE, FALSE, TRUE, FALSE );

  009d3	6a 00		 push	 0
  009d5	6a 01		 push	 1
  009d7	6a 00		 push	 0
  009d9	6a 01		 push	 1
  009db	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer

; 844  : 
; 845  : 			convert_float_to_int ( intensity * 255, &int_intensity );

  009e0	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _int_intensity$[ebp]
  009e6	50		 push	 eax
  009e7	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _intensity$[ebp]
  009ef	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  009f7	51		 push	 ecx
  009f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009fd	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 846  : 
; 847  : 			colour.red = int_intensity;

  00a02	8a 85 dc fe ff
	ff		 mov	 al, BYTE PTR _int_intensity$[ebp]
  00a08	88 85 96 fe ff
	ff		 mov	 BYTE PTR _colour$2[ebp+2], al

; 848  : 			colour.green = int_intensity;

  00a0e	8a 85 dc fe ff
	ff		 mov	 al, BYTE PTR _int_intensity$[ebp]
  00a14	88 85 95 fe ff
	ff		 mov	 BYTE PTR _colour$2[ebp+1], al

; 849  : 			colour.blue = int_intensity;

  00a1a	8a 85 dc fe ff
	ff		 mov	 al, BYTE PTR _int_intensity$[ebp]
  00a20	88 85 94 fe ff
	ff		 mov	 BYTE PTR _colour$2[ebp], al

; 850  : 			colour.alpha = int_intensity;

  00a26	8a 85 dc fe ff
	ff		 mov	 al, BYTE PTR _int_intensity$[ebp]
  00a2c	88 85 97 fe ff
	ff		 mov	 BYTE PTR _colour$2[ebp+3], al

; 851  : 
; 852  : 			set_d3d_texture ( 0, texture );

  00a32	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _texture$[ebp]
  00a38	50		 push	 eax
  00a39	6a 00		 push	 0
  00a3b	e8 00 00 00 00	 call	 ?set_d3d_texture@@YGXHPAUSCREEN@@@Z ; set_d3d_texture

; 853  : 			set_d3d_texture_stage_state ( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );

  00a40	6a 04		 push	 4
  00a42	6a 01		 push	 1
  00a44	6a 00		 push	 0
  00a46	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 854  : 			set_d3d_texture_stage_state ( 1, D3DTSS_COLOROP, D3DTOP_DISABLE );

  00a4b	6a 01		 push	 1
  00a4d	6a 01		 push	 1
  00a4f	6a 01		 push	 1
  00a51	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 855  : 	
; 856  : 			set_d3d_int_state ( D3DRENDERSTATE_SRCBLEND, D3DBLEND_ONE );

  00a56	6a 02		 push	 2
  00a58	6a 13		 push	 19			; 00000013H
  00a5a	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 857  : 			set_d3d_int_state ( D3DRENDERSTATE_DESTBLEND, D3DBLEND_ONE );

  00a5f	6a 02		 push	 2
  00a61	6a 14		 push	 20			; 00000014H
  00a63	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 858  : 			set_d3d_texture_stage_state ( 0, D3DTSS_ADDRESSU, D3DTADDRESS_CLAMP );

  00a68	6a 03		 push	 3
  00a6a	6a 0d		 push	 13			; 0000000dH
  00a6c	6a 00		 push	 0
  00a6e	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 859  : 			set_d3d_texture_stage_state ( 0, D3DTSS_ADDRESSV, D3DTADDRESS_CLAMP );

  00a73	6a 03		 push	 3
  00a75	6a 0e		 push	 14			; 0000000eH
  00a77	6a 00		 push	 0
  00a79	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 860  : 			set_d3d_texture_stage_state ( 0, D3DTSS_MAGFILTER, D3DTFG_LINEAR );

  00a7e	6a 02		 push	 2
  00a80	6a 10		 push	 16			; 00000010H
  00a82	6a 00		 push	 0
  00a84	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 861  : 			set_d3d_texture_stage_state ( 0, D3DTSS_MINFILTER, D3DTFN_LINEAR );

  00a89	6a 02		 push	 2
  00a8b	6a 11		 push	 17			; 00000011H
  00a8d	6a 00		 push	 0
  00a8f	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 862  : 			set_d3d_texture_stage_state ( 0, D3DTSS_MIPFILTER, D3DTFP_POINT );

  00a94	6a 02		 push	 2
  00a96	6a 12		 push	 18			; 00000012H
  00a98	6a 00		 push	 0
  00a9a	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 863  : 
; 864  : 			specular.colour = 0;

  00a9f	c7 85 90 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _specular$1[ebp], 0

; 865  : 	
; 866  : 			draw_wbuffered_flat_shaded_textured_polygon ( polygon, colour, specular );

  00aa9	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR _specular$1[ebp]
  00aaf	50		 push	 eax
  00ab0	8b 8d 94 fe ff
	ff		 mov	 ecx, DWORD PTR _colour$2[ebp]
  00ab6	51		 push	 ecx
  00ab7	8b 55 fc	 mov	 edx, DWORD PTR _polygon$[ebp]
  00aba	52		 push	 edx
  00abb	e8 00 00 00 00	 call	 ?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_flat_shaded_textured_polygon
$LN1@draw_3d_li:

; 867  : 		}
; 868  : 	}
; 869  : }

  00ac0	5f		 pop	 edi
  00ac1	5e		 pop	 esi
  00ac2	5b		 pop	 ebx
  00ac3	8b e5		 mov	 esp, ebp
  00ac5	5d		 pop	 ebp
  00ac6	c2 04 00	 ret	 4
?draw_3d_lightning_cloud_burst@@YGXPAULIGHTNING_STRIKE@@@Z ENDP ; draw_3d_lightning_cloud_burst
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dstrike.c
;	COMDAT ?draw_3d_lightning_strike@@YGXPAULIGHTNING_STRIKE@@@Z
_TEXT	SEGMENT
tv570 = -436						; size = 4
tv563 = -436						; size = 4
_specular$1 = -368					; size = 4
_colour$2 = -364					; size = 4
_iymin$3 = -360						; size = 4
_iymax$4 = -356						; size = 4
_ixmin$5 = -352						; size = 4
_ixmax$6 = -348						; size = 4
_oymin$7 = -344						; size = 4
_oymax$8 = -340						; size = 4
_oxmin$9 = -336						; size = 4
_oxmax$10 = -332					; size = 4
_j$11 = -328						; size = 4
_i$12 = -324						; size = 4
_q$13 = -320						; size = 4
_z$14 = -316						; size = 4
_y$15 = -312						; size = 4
_x$16 = -308						; size = 4
_texture$ = -304					; size = 4
_outcode2$ = -300					; size = 4
_outcode$ = -296					; size = 4
_relative_position$ = -292				; size = 12
_width_cos$ = -280					; size = 4
_width_sin$ = -276					; size = 4
_width$ = -272						; size = 4
_heading$ = -268					; size = 4
_quad$ = -264						; size = 256
_vert$ = -8						; size = 4
_polygon$ = -4						; size = 4
_strike$ = 8						; size = 4
?draw_3d_lightning_strike@@YGXPAULIGHTNING_STRIKE@@@Z PROC ; draw_3d_lightning_strike, COMDAT

; 354  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b4 01 00
	00		 sub	 esp, 436		; 000001b4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 355  : 
; 356  : 	vertex
; 357  : 		*polygon,
; 358  : 		*vert,
; 359  : 		quad[4];
; 360  : 
; 361  : 	float
; 362  : 		heading,
; 363  : 		width,
; 364  : 		width_sin,
; 365  : 		width_cos;
; 366  : 
; 367  : 	vec3d
; 368  : 		relative_position;
; 369  : 
; 370  : 	int
; 371  : 		outcode,
; 372  : 		outcode2;
; 373  : 
; 374  : 	screen
; 375  : 		*texture;
; 376  : 
; 377  : 	texture = system_textures[ texture_animations[lightning_strike_animation].texture_indices[strike->current_frame_number] ];

  0000c	6b 05 00 00 00
	00 0c		 imul	 eax, DWORD PTR ?lightning_strike_animation@@3W4TEXTURE_ANIMATION_INDICES@@A, 12 ; lightning_strike_animation
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _strike$[ebp]
  00016	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00019	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  0001f	8b 44 01 08	 mov	 eax, DWORD PTR [ecx+eax+8]
  00023	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00026	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[ecx*4]
  0002d	89 95 d0 fe ff
	ff		 mov	 DWORD PTR _texture$[ebp], edx

; 378  : 
; 379  : 	heading = get_heading_from_attitude_matrix ( visual_3d_vp->attitude );

  00033	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00038	d1 e0		 shl	 eax, 1
  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00040	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  00044	b8 04 00 00 00	 mov	 eax, 4
  00049	d1 e0		 shl	 eax, 1
  0004b	51		 push	 ecx
  0004c	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00051	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00056	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0005b	d1 e1		 shl	 ecx, 1
  0005d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00063	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  00067	b9 04 00 00 00	 mov	 ecx, 4
  0006c	6b d1 00	 imul	 edx, ecx, 0
  0006f	51		 push	 ecx
  00070	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00075	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007a	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  0007f	d9 9d f4 fe ff
	ff		 fstp	 DWORD PTR _heading$[ebp]

; 380  : 
; 381  : 	width = 3000;

  00085	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@453b8000
  0008d	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 382  : 	width_sin = width * sin ( -heading );

  00095	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _heading$[ebp]
  0009d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000a4	51		 push	 ecx
  000a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000aa	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  000af	d9 9d 4c fe ff
	ff		 fstp	 DWORD PTR tv563[ebp]
  000b5	f3 0f 10 85 4c
	fe ff ff	 movss	 xmm0, DWORD PTR tv563[ebp]
  000bd	f3 0f 59 85 f0
	fe ff ff	 mulss	 xmm0, DWORD PTR _width$[ebp]
  000c5	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _width_sin$[ebp], xmm0

; 383  : 	width_cos = width * cos ( -heading );

  000cd	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _heading$[ebp]
  000d5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000dc	51		 push	 ecx
  000dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e2	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  000e7	d9 9d 4c fe ff
	ff		 fstp	 DWORD PTR tv570[ebp]
  000ed	f3 0f 10 85 4c
	fe ff ff	 movss	 xmm0, DWORD PTR tv570[ebp]
  000f5	f3 0f 59 85 f0
	fe ff ff	 mulss	 xmm0, DWORD PTR _width$[ebp]
  000fd	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _width_cos$[ebp], xmm0

; 384  : 
; 385  : 	quad[0].next_vertex = &quad[1];

  00105	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0010a	c1 e0 00	 shl	 eax, 0
  0010d	8d 8c 05 f8 fe
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  00114	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00119	6b c2 00	 imul	 eax, edx, 0
  0011c	89 8c 05 20 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], ecx

; 386  : 	quad[1].next_vertex = &quad[2];

  00123	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00128	d1 e0		 shl	 eax, 1
  0012a	8d 8c 05 f8 fe
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  00131	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00136	c1 e2 00	 shl	 edx, 0
  00139	89 8c 15 20 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+edx+40], ecx

; 387  : 	quad[2].next_vertex = &quad[3];

  00140	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00145	6b c8 03	 imul	 ecx, eax, 3
  00148	8d 94 0d f8 fe
	ff ff		 lea	 edx, DWORD PTR _quad$[ebp+ecx]
  0014f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00154	d1 e0		 shl	 eax, 1
  00156	89 94 05 20 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], edx

; 388  : 	quad[3].next_vertex = NULL;

  0015d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00162	6b c8 03	 imul	 ecx, eax, 3
  00165	c7 84 0d 20 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$[ebp+ecx+40], 0

; 389  : 
; 390  : 	quad[0].x = width_cos;

  00170	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00175	6b c8 00	 imul	 ecx, eax, 0
  00178	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _width_cos$[ebp]
  00180	f3 0f 11 84 0d
	f8 fe ff ff	 movss	 DWORD PTR _quad$[ebp+ecx], xmm0

; 391  : 	quad[0].z = width_sin;

  00189	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0018e	6b c8 00	 imul	 ecx, eax, 0
  00191	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _width_sin$[ebp]
  00199	f3 0f 11 84 0d
	00 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 392  : 	quad[0].y = 0;

  001a2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001a7	6b c8 00	 imul	 ecx, eax, 0
  001aa	0f 57 c0	 xorps	 xmm0, xmm0
  001ad	f3 0f 11 84 0d
	fc fe ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+4], xmm0

; 393  : 	quad[0].u = 0;

  001b6	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001bb	6b c8 00	 imul	 ecx, eax, 0
  001be	0f 57 c0	 xorps	 xmm0, xmm0
  001c1	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+24], xmm0

; 394  : 	quad[0].v = 0;

  001ca	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001cf	6b c8 00	 imul	 ecx, eax, 0
  001d2	0f 57 c0	 xorps	 xmm0, xmm0
  001d5	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+28], xmm0

; 395  : 
; 396  : 	quad[3].x = -width_cos;

  001de	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _width_cos$[ebp]
  001e6	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001ed	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001f2	6b c8 03	 imul	 ecx, eax, 3
  001f5	f3 0f 11 84 0d
	f8 fe ff ff	 movss	 DWORD PTR _quad$[ebp+ecx], xmm0

; 397  : 	quad[3].z = -width_sin;

  001fe	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _width_sin$[ebp]
  00206	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0020d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00212	6b c8 03	 imul	 ecx, eax, 3
  00215	f3 0f 11 84 0d
	00 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 398  : 	quad[3].y = 0;

  0021e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00223	6b c8 03	 imul	 ecx, eax, 3
  00226	0f 57 c0	 xorps	 xmm0, xmm0
  00229	f3 0f 11 84 0d
	fc fe ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+4], xmm0

; 399  : 	quad[3].u = 1;

  00232	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00237	6b c8 03	 imul	 ecx, eax, 3
  0023a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00242	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+24], xmm0

; 400  : 	quad[3].v = 0;

  0024b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00250	6b c8 03	 imul	 ecx, eax, 3
  00253	0f 57 c0	 xorps	 xmm0, xmm0
  00256	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+28], xmm0

; 401  : 
; 402  : 	quad[2].x = -width_cos;

  0025f	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _width_cos$[ebp]
  00267	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0026e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00273	d1 e0		 shl	 eax, 1
  00275	f3 0f 11 84 05
	f8 fe ff ff	 movss	 DWORD PTR _quad$[ebp+eax], xmm0

; 403  : 	quad[2].z = -width_sin;

  0027e	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _width_sin$[ebp]
  00286	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0028d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00292	d1 e0		 shl	 eax, 1
  00294	f3 0f 11 84 05
	00 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 404  : 	quad[2].y = - ( strike->position.y - strike->ground_height );

  0029d	8b 45 08	 mov	 eax, DWORD PTR _strike$[ebp]
  002a0	8b 4d 08	 mov	 ecx, DWORD PTR _strike$[ebp]
  002a3	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  002a8	f3 0f 5c 41 14	 subss	 xmm0, DWORD PTR [ecx+20]
  002ad	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  002b4	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  002b9	d1 e2		 shl	 edx, 1
  002bb	f3 0f 11 84 15
	fc fe ff ff	 movss	 DWORD PTR _quad$[ebp+edx+4], xmm0

; 405  : 	quad[2].u = 1;

  002c4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002c9	d1 e0		 shl	 eax, 1
  002cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002d3	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+24], xmm0

; 406  : 	quad[2].v = 1;

  002dc	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002e1	d1 e0		 shl	 eax, 1
  002e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002eb	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+28], xmm0

; 407  : 
; 408  : 	quad[1].x = width_cos;

  002f4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002f9	c1 e0 00	 shl	 eax, 0
  002fc	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _width_cos$[ebp]
  00304	f3 0f 11 84 05
	f8 fe ff ff	 movss	 DWORD PTR _quad$[ebp+eax], xmm0

; 409  : 	quad[1].z = width_sin;

  0030d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00312	c1 e0 00	 shl	 eax, 0
  00315	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _width_sin$[ebp]
  0031d	f3 0f 11 84 05
	00 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 410  : 	quad[1].y = - ( strike->position.y - strike->ground_height );

  00326	8b 45 08	 mov	 eax, DWORD PTR _strike$[ebp]
  00329	8b 4d 08	 mov	 ecx, DWORD PTR _strike$[ebp]
  0032c	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00331	f3 0f 5c 41 14	 subss	 xmm0, DWORD PTR [ecx+20]
  00336	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0033d	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00342	c1 e2 00	 shl	 edx, 0
  00345	f3 0f 11 84 15
	fc fe ff ff	 movss	 DWORD PTR _quad$[ebp+edx+4], xmm0

; 411  : 	quad[1].u = 0;

  0034e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00353	c1 e0 00	 shl	 eax, 0
  00356	0f 57 c0	 xorps	 xmm0, xmm0
  00359	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+24], xmm0

; 412  : 	quad[1].v = 1;

  00362	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00367	c1 e0 00	 shl	 eax, 0
  0036a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00372	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+28], xmm0

; 413  : 
; 414  : 	polygon = quad;

  0037b	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _quad$[ebp]
  00381	89 45 fc	 mov	 DWORD PTR _polygon$[ebp], eax

; 415  : 
; 416  : 	//
; 417  : 	// Calculate the relative position of the lightning strike
; 418  : 	//
; 419  : 
; 420  : 	relative_position.x = (	( strike->position.x - visual_3d_vp->x ) * visual_3d_vp->xv.x +

  00384	8b 45 08	 mov	 eax, DWORD PTR _strike$[ebp]
  00387	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0038d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00391	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00395	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0039b	f3 0f 59 42 0c	 mulss	 xmm0, DWORD PTR [edx+12]
  003a0	8b 45 08	 mov	 eax, DWORD PTR _strike$[ebp]
  003a3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  003a9	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  003ae	f3 0f 5c 49 04	 subss	 xmm1, DWORD PTR [ecx+4]
  003b3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  003b9	f3 0f 59 4a 10	 mulss	 xmm1, DWORD PTR [edx+16]
  003be	f3 0f 58 c1	 addss	 xmm0, xmm1
  003c2	8b 45 08	 mov	 eax, DWORD PTR _strike$[ebp]
  003c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  003cb	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  003d0	f3 0f 5c 49 08	 subss	 xmm1, DWORD PTR [ecx+8]
  003d5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  003db	f3 0f 59 4a 14	 mulss	 xmm1, DWORD PTR [edx+20]
  003e0	f3 0f 58 c1	 addss	 xmm0, xmm1
  003e4	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR _relative_position$[ebp], xmm0

; 421  : 									( strike->position.y - visual_3d_vp->y ) * visual_3d_vp->xv.y +
; 422  : 									( strike->position.z - visual_3d_vp->z ) * visual_3d_vp->xv.z );
; 423  : 
; 424  : 	relative_position.y = (	( strike->position.x - visual_3d_vp->x ) * visual_3d_vp->yv.x +

  003ec	8b 45 08	 mov	 eax, DWORD PTR _strike$[ebp]
  003ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  003f5	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  003f9	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  003fd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00403	f3 0f 59 42 18	 mulss	 xmm0, DWORD PTR [edx+24]
  00408	8b 45 08	 mov	 eax, DWORD PTR _strike$[ebp]
  0040b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00411	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  00416	f3 0f 5c 49 04	 subss	 xmm1, DWORD PTR [ecx+4]
  0041b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00421	f3 0f 59 4a 1c	 mulss	 xmm1, DWORD PTR [edx+28]
  00426	f3 0f 58 c1	 addss	 xmm0, xmm1
  0042a	8b 45 08	 mov	 eax, DWORD PTR _strike$[ebp]
  0042d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00433	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  00438	f3 0f 5c 49 08	 subss	 xmm1, DWORD PTR [ecx+8]
  0043d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00443	f3 0f 59 4a 20	 mulss	 xmm1, DWORD PTR [edx+32]
  00448	f3 0f 58 c1	 addss	 xmm0, xmm1
  0044c	f3 0f 11 85 e0
	fe ff ff	 movss	 DWORD PTR _relative_position$[ebp+4], xmm0

; 425  : 									( strike->position.y - visual_3d_vp->y ) * visual_3d_vp->yv.y +
; 426  : 									( strike->position.z - visual_3d_vp->z ) * visual_3d_vp->yv.z );
; 427  : 
; 428  : 	relative_position.z = (	( strike->position.x - visual_3d_vp->x ) * visual_3d_vp->zv.x +

  00454	8b 45 08	 mov	 eax, DWORD PTR _strike$[ebp]
  00457	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0045d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00461	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00465	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0046b	f3 0f 59 42 24	 mulss	 xmm0, DWORD PTR [edx+36]
  00470	8b 45 08	 mov	 eax, DWORD PTR _strike$[ebp]
  00473	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00479	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  0047e	f3 0f 5c 49 04	 subss	 xmm1, DWORD PTR [ecx+4]
  00483	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00489	f3 0f 59 4a 28	 mulss	 xmm1, DWORD PTR [edx+40]
  0048e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00492	8b 45 08	 mov	 eax, DWORD PTR _strike$[ebp]
  00495	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0049b	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  004a0	f3 0f 5c 49 08	 subss	 xmm1, DWORD PTR [ecx+8]
  004a5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  004ab	f3 0f 59 4a 2c	 mulss	 xmm1, DWORD PTR [edx+44]
  004b0	f3 0f 58 c1	 addss	 xmm0, xmm1
  004b4	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR _relative_position$[ebp+8], xmm0

; 429  : 									( strike->position.y - visual_3d_vp->y ) * visual_3d_vp->zv.y +
; 430  : 									( strike->position.z - visual_3d_vp->z ) * visual_3d_vp->zv.z );
; 431  : 
; 432  : 	{
; 433  : 
; 434  : 		//
; 435  : 		// Rotate the polygon around to the users viewpoint
; 436  : 		//
; 437  : 	
; 438  : 		vert = polygon;

  004bc	8b 45 fc	 mov	 eax, DWORD PTR _polygon$[ebp]
  004bf	89 45 f8	 mov	 DWORD PTR _vert$[ebp], eax

; 439  : 
; 440  : 		rotation_3d[0][0] = ( visual_3d_vp->xv.x );

  004c2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004c7	6b c8 00	 imul	 ecx, eax, 0
  004ca	ba 04 00 00 00	 mov	 edx, 4
  004cf	6b c2 00	 imul	 eax, edx, 0
  004d2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  004d8	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  004db	89 94 01 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax], edx

; 441  : 		rotation_3d[0][1] = ( visual_3d_vp->yv.x );

  004e2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004e7	6b c8 00	 imul	 ecx, eax, 0
  004ea	ba 04 00 00 00	 mov	 edx, 4
  004ef	c1 e2 00	 shl	 edx, 0
  004f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  004f7	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  004fa	89 84 11 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], eax

; 442  : 		rotation_3d[0][2] = ( visual_3d_vp->zv.x );

  00501	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00506	6b c8 00	 imul	 ecx, eax, 0
  00509	ba 04 00 00 00	 mov	 edx, 4
  0050e	d1 e2		 shl	 edx, 1
  00510	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00515	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  00518	89 84 11 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], eax

; 443  : 	
; 444  : 		rotation_3d[1][0] = ( visual_3d_vp->xv.y );

  0051f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00524	c1 e0 00	 shl	 eax, 0
  00527	b9 04 00 00 00	 mov	 ecx, 4
  0052c	6b d1 00	 imul	 edx, ecx, 0
  0052f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00535	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00538	89 8c 10 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], ecx

; 445  : 		rotation_3d[1][1] = ( visual_3d_vp->yv.y );

  0053f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00544	c1 e0 00	 shl	 eax, 0
  00547	b9 04 00 00 00	 mov	 ecx, 4
  0054c	c1 e1 00	 shl	 ecx, 0
  0054f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00555	8b 52 1c	 mov	 edx, DWORD PTR [edx+28]
  00558	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], edx

; 446  : 		rotation_3d[1][2] = ( visual_3d_vp->zv.y );

  0055f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00564	c1 e0 00	 shl	 eax, 0
  00567	b9 04 00 00 00	 mov	 ecx, 4
  0056c	d1 e1		 shl	 ecx, 1
  0056e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00574	8b 52 28	 mov	 edx, DWORD PTR [edx+40]
  00577	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], edx

; 447  : 	
; 448  : 		rotation_3d[2][0] = ( visual_3d_vp->xv.z );

  0057e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00583	d1 e0		 shl	 eax, 1
  00585	b9 04 00 00 00	 mov	 ecx, 4
  0058a	6b d1 00	 imul	 edx, ecx, 0
  0058d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00593	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00596	89 8c 10 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], ecx

; 449  : 		rotation_3d[2][1] = ( visual_3d_vp->yv.z );

  0059d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005a2	d1 e0		 shl	 eax, 1
  005a4	b9 04 00 00 00	 mov	 ecx, 4
  005a9	c1 e1 00	 shl	 ecx, 0
  005ac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  005b2	8b 52 20	 mov	 edx, DWORD PTR [edx+32]
  005b5	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], edx

; 450  : 		rotation_3d[2][2] = ( visual_3d_vp->zv.z );

  005bc	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005c1	d1 e0		 shl	 eax, 1
  005c3	b9 04 00 00 00	 mov	 ecx, 4
  005c8	d1 e1		 shl	 ecx, 1
  005ca	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  005d0	8b 52 2c	 mov	 edx, DWORD PTR [edx+44]
  005d3	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], edx

; 451  : 
; 452  : 		outcode = 0;

  005da	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _outcode$[ebp], 0

; 453  : 
; 454  : 		outcode2 = CLIP_LEFT | CLIP_RIGHT | CLIP_TOP | CLIP_BOTTOM | CLIP_HITHER | CLIP_YONDER;

  005e4	c7 85 d4 fe ff
	ff 3f 00 00 00	 mov	 DWORD PTR _outcode2$[ebp], 63 ; 0000003fH

; 455  : 
; 456  : 		clip_3d_coord = 0;

  005ee	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, 0 ; clip_3d_coord
$LN2@draw_3d_li:

; 457  : 
; 458  : 		while ( vert )

  005f8	83 7d f8 00	 cmp	 DWORD PTR _vert$[ebp], 0
  005fc	0f 84 b9 03 00
	00		 je	 $LN3@draw_3d_li

; 459  : 		{
; 460  : 	
; 461  : 			float
; 462  : 				x,
; 463  : 				y,
; 464  : 				z;
; 465  : 	
; 466  : 			x = vert->x * rotation_3d[0][0] + vert->y * rotation_3d[1][0] + vert->z * rotation_3d[2][0] + relative_position.x;

  00602	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00607	6b c8 00	 imul	 ecx, eax, 0
  0060a	ba 04 00 00 00	 mov	 edx, 4
  0060f	6b c2 00	 imul	 eax, edx, 0
  00612	8b 55 f8	 mov	 edx, DWORD PTR _vert$[ebp]
  00615	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00619	f3 0f 59 84 01
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax]
  00622	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00627	c1 e0 00	 shl	 eax, 0
  0062a	b9 04 00 00 00	 mov	 ecx, 4
  0062f	6b d1 00	 imul	 edx, ecx, 0
  00632	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  00635	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  0063a	f3 0f 59 8c 10
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  00643	f3 0f 58 c1	 addss	 xmm0, xmm1
  00647	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0064c	d1 e2		 shl	 edx, 1
  0064e	b8 04 00 00 00	 mov	 eax, 4
  00653	6b c8 00	 imul	 ecx, eax, 0
  00656	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  00659	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  0065e	f3 0f 59 8c 0a
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[edx+ecx]
  00667	f3 0f 58 c1	 addss	 xmm0, xmm1
  0066b	f3 0f 58 85 dc
	fe ff ff	 addss	 xmm0, DWORD PTR _relative_position$[ebp]
  00673	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR _x$16[ebp], xmm0

; 467  : 			y = vert->x * rotation_3d[0][1] + vert->y * rotation_3d[1][1] + vert->z * rotation_3d[2][1] + relative_position.y;

  0067b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00680	6b c8 00	 imul	 ecx, eax, 0
  00683	ba 04 00 00 00	 mov	 edx, 4
  00688	c1 e2 00	 shl	 edx, 0
  0068b	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  0068e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00692	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  0069b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  006a0	c1 e1 00	 shl	 ecx, 0
  006a3	ba 04 00 00 00	 mov	 edx, 4
  006a8	c1 e2 00	 shl	 edx, 0
  006ab	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  006ae	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  006b3	f3 0f 59 8c 11
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  006bc	f3 0f 58 c1	 addss	 xmm0, xmm1
  006c0	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  006c5	d1 e1		 shl	 ecx, 1
  006c7	ba 04 00 00 00	 mov	 edx, 4
  006cc	c1 e2 00	 shl	 edx, 0
  006cf	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  006d2	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  006d7	f3 0f 59 8c 11
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  006e0	f3 0f 58 c1	 addss	 xmm0, xmm1
  006e4	f3 0f 58 85 e0
	fe ff ff	 addss	 xmm0, DWORD PTR _relative_position$[ebp+4]
  006ec	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR _y$15[ebp], xmm0

; 468  : 			z = vert->x * rotation_3d[0][2] + vert->y * rotation_3d[1][2] + vert->z * rotation_3d[2][2] + relative_position.z;

  006f4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  006f9	6b c8 00	 imul	 ecx, eax, 0
  006fc	ba 04 00 00 00	 mov	 edx, 4
  00701	d1 e2		 shl	 edx, 1
  00703	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  00706	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0070a	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00713	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00718	c1 e1 00	 shl	 ecx, 0
  0071b	ba 04 00 00 00	 mov	 edx, 4
  00720	d1 e2		 shl	 edx, 1
  00722	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  00725	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  0072a	f3 0f 59 8c 11
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00733	f3 0f 58 c1	 addss	 xmm0, xmm1
  00737	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0073c	d1 e1		 shl	 ecx, 1
  0073e	ba 04 00 00 00	 mov	 edx, 4
  00743	d1 e2		 shl	 edx, 1
  00745	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  00748	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  0074d	f3 0f 59 8c 11
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00756	f3 0f 58 c1	 addss	 xmm0, xmm1
  0075a	f3 0f 58 85 e4
	fe ff ff	 addss	 xmm0, DWORD PTR _relative_position$[ebp+8]
  00762	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR _z$14[ebp], xmm0

; 469  : 	
; 470  : 			x *= active_3d_environment->screen_i_scale;

  0076a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0076f	f3 0f 10 85 cc
	fe ff ff	 movss	 xmm0, DWORD PTR _x$16[ebp]
  00777	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  0077b	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR _x$16[ebp], xmm0

; 471  : 			y *= active_3d_environment->screen_j_scale;

  00783	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00788	f3 0f 10 85 c8
	fe ff ff	 movss	 xmm0, DWORD PTR _y$15[ebp]
  00790	f3 0f 59 40 04	 mulss	 xmm0, DWORD PTR [eax+4]
  00795	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR _y$15[ebp], xmm0

; 472  : 
; 473  : 			if ( *( ( int * ) &z ) >= *( ( int * ) &clip_hither ) )

  0079d	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _z$14[ebp]
  007a3	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?clip_hither@@3MA
  007a9	0f 8c a2 01 00
	00		 jl	 $LN4@draw_3d_li

; 474  : 			{
; 475  : 	
; 476  : 				float
; 477  : 					q,
; 478  : 					i,
; 479  : 					j;
; 480  : 	
; 481  : 				float
; 482  : 					oxmax,
; 483  : 					oxmin,
; 484  : 					oymax,
; 485  : 					oymin;
; 486  : 			
; 487  : 				int
; 488  : 					ixmax,
; 489  : 					ixmin,
; 490  : 					iymax,
; 491  : 					iymin;
; 492  : 			
; 493  : 				q = 1.0 / z;

  007af	f3 0f 5a 85 c4
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _z$14[ebp]
  007b7	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  007bf	f2 0f 5e c8	 divsd	 xmm1, xmm0
  007c3	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  007c7	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _q$13[ebp], xmm0

; 494  : 	
; 495  : 				vert->x = x;

  007cf	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  007d2	f3 0f 10 85 cc
	fe ff ff	 movss	 xmm0, DWORD PTR _x$16[ebp]
  007da	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 496  : 				vert->y = y;

  007de	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  007e1	f3 0f 10 85 c8
	fe ff ff	 movss	 xmm0, DWORD PTR _y$15[ebp]
  007e9	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 497  : 				vert->z = z;

  007ee	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  007f1	f3 0f 10 85 c4
	fe ff ff	 movss	 xmm0, DWORD PTR _z$14[ebp]
  007f9	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 498  : 				vert->q = q;

  007fe	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  00801	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR _q$13[ebp]
  00809	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 499  : 	
; 500  : 				i = ( x * q );

  0080e	f3 0f 10 85 cc
	fe ff ff	 movss	 xmm0, DWORD PTR _x$16[ebp]
  00816	f3 0f 59 85 c0
	fe ff ff	 mulss	 xmm0, DWORD PTR _q$13[ebp]
  0081e	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR _i$12[ebp], xmm0

; 501  : 				j = ( y * q );

  00826	f3 0f 10 85 c8
	fe ff ff	 movss	 xmm0, DWORD PTR _y$15[ebp]
  0082e	f3 0f 59 85 c0
	fe ff ff	 mulss	 xmm0, DWORD PTR _q$13[ebp]
  00836	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR _j$11[ebp], xmm0

; 502  : 	
; 503  : 				vert->j = active_3d_environment->y_origin - j;

  0083e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00843	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00848	f3 0f 5c 85 b8
	fe ff ff	 subss	 xmm0, DWORD PTR _j$11[ebp]
  00850	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  00853	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 504  : 				vert->i = active_3d_environment->x_origin + i;

  00858	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0085d	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00862	f3 0f 58 85 bc
	fe ff ff	 addss	 xmm0, DWORD PTR _i$12[ebp]
  0086a	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  0086d	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0

; 505  : 	
; 506  : 				oxmax = active_viewport.x_max - vert->i;

  00872	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  00875	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  0087d	f3 0f 5c 40 10	 subss	 xmm0, DWORD PTR [eax+16]
  00882	f3 0f 11 85 b4
	fe ff ff	 movss	 DWORD PTR _oxmax$10[ebp], xmm0

; 507  : 				oxmin = vert->i - active_viewport.x_min;

  0088a	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  0088d	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00892	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  0089a	f3 0f 11 85 b0
	fe ff ff	 movss	 DWORD PTR _oxmin$9[ebp], xmm0

; 508  : 				oymax = active_viewport.y_max - vert->j;

  008a2	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  008a5	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  008ad	f3 0f 5c 40 14	 subss	 xmm0, DWORD PTR [eax+20]
  008b2	f3 0f 11 85 ac
	fe ff ff	 movss	 DWORD PTR _oymax$8[ebp], xmm0

; 509  : 				oymin = vert->j - active_viewport.y_min;

  008ba	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  008bd	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  008c2	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  008ca	f3 0f 11 85 a8
	fe ff ff	 movss	 DWORD PTR _oymin$7[ebp], xmm0

; 510  : 			
; 511  : 				ixmax = *( ( int * ) &oxmax );

  008d2	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _oxmax$10[ebp]
  008d8	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _ixmax$6[ebp], eax

; 512  : 				ixmin = *( ( int * ) &oxmin );

  008de	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _oxmin$9[ebp]
  008e4	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _ixmin$5[ebp], eax

; 513  : 				iymax = *( ( int * ) &oymax );

  008ea	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _oymax$8[ebp]
  008f0	89 85 9c fe ff
	ff		 mov	 DWORD PTR _iymax$4[ebp], eax

; 514  : 				iymin = *( ( int * ) &oymin );

  008f6	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _oymin$7[ebp]
  008fc	89 85 98 fe ff
	ff		 mov	 DWORD PTR _iymin$3[ebp], eax

; 515  : 			
; 516  : 				vert->outcode = generate_lookup_outcode ( ixmin, iymin, ixmax, iymax );

  00902	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _iymax$4[ebp]
  00908	50		 push	 eax
  00909	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _ixmax$6[ebp]
  0090f	51		 push	 ecx
  00910	8b 95 98 fe ff
	ff		 mov	 edx, DWORD PTR _iymin$3[ebp]
  00916	52		 push	 edx
  00917	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _ixmin$5[ebp]
  0091d	50		 push	 eax
  0091e	e8 00 00 00 00	 call	 ?generate_lookup_outcode@@YGHHHHH@Z ; generate_lookup_outcode
  00923	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  00926	88 41 2c	 mov	 BYTE PTR [ecx+44], al

; 517  : 
; 518  : 				outcode |= vert->outcode;

  00929	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  0092c	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00930	0b 8d d8 fe ff
	ff		 or	 ecx, DWORD PTR _outcode$[ebp]
  00936	89 8d d8 fe ff
	ff		 mov	 DWORD PTR _outcode$[ebp], ecx

; 519  : 				outcode2 &= vert->outcode;

  0093c	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  0093f	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00943	23 8d d4 fe ff
	ff		 and	 ecx, DWORD PTR _outcode2$[ebp]
  00949	89 8d d4 fe ff
	ff		 mov	 DWORD PTR _outcode2$[ebp], ecx

; 520  : 			}
; 521  : 			else

  0094f	eb 5c		 jmp	 SHORT $LN5@draw_3d_li
$LN4@draw_3d_li:

; 522  : 			{
; 523  : 	
; 524  : 				vert->outcode = CLIP_HITHER;

  00951	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  00954	c6 40 2c 20	 mov	 BYTE PTR [eax+44], 32	; 00000020H

; 525  : 				vert->z = z;

  00958	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  0095b	f3 0f 10 85 c4
	fe ff ff	 movss	 xmm0, DWORD PTR _z$14[ebp]
  00963	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 526  : 				vert->x = x;

  00968	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  0096b	f3 0f 10 85 cc
	fe ff ff	 movss	 xmm0, DWORD PTR _x$16[ebp]
  00973	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 527  : 				vert->y = y;

  00977	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  0097a	f3 0f 10 85 c8
	fe ff ff	 movss	 xmm0, DWORD PTR _y$15[ebp]
  00982	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 528  : 
; 529  : 				outcode |= vert->outcode;

  00987	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  0098a	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  0098e	0b 8d d8 fe ff
	ff		 or	 ecx, DWORD PTR _outcode$[ebp]
  00994	89 8d d8 fe ff
	ff		 mov	 DWORD PTR _outcode$[ebp], ecx

; 530  : 				outcode2 &= vert->outcode;

  0099a	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  0099d	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  009a1	23 8d d4 fe ff
	ff		 and	 ecx, DWORD PTR _outcode2$[ebp]
  009a7	89 8d d4 fe ff
	ff		 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN5@draw_3d_li:

; 531  : 			}
; 532  : 	
; 533  : 			vert = vert->next_vertex;

  009ad	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  009b0	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  009b3	89 4d f8	 mov	 DWORD PTR _vert$[ebp], ecx

; 534  : 		}

  009b6	e9 3d fc ff ff	 jmp	 $LN2@draw_3d_li
$LN3@draw_3d_li:

; 535  : 
; 536  : 		if ( outcode2 )

  009bb	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR _outcode2$[ebp], 0
  009c2	74 05		 je	 SHORT $LN6@draw_3d_li

; 537  : 		{
; 538  : 
; 539  : 			return;

  009c4	e9 19 01 00 00	 jmp	 $LN1@draw_3d_li
$LN6@draw_3d_li:

; 540  : 		}
; 541  : 
; 542  : 
; 543  : 		if ( outcode & CLIP_HITHER )

  009c9	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _outcode$[ebp]
  009cf	83 e0 20	 and	 eax, 32			; 00000020H
  009d2	74 1e		 je	 SHORT $LN8@draw_3d_li

; 544  : 		{
; 545  : 	
; 546  : 			polygon = hither_clip_3d_polygon ( polygon, &outcode );

  009d4	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _outcode$[ebp]
  009da	50		 push	 eax
  009db	8b 4d fc	 mov	 ecx, DWORD PTR _polygon$[ebp]
  009de	51		 push	 ecx
  009df	e8 00 00 00 00	 call	 ?hither_clip_3d_polygon@@YGPAUVERTEX@@PAU1@PAH@Z ; hither_clip_3d_polygon
  009e4	89 45 fc	 mov	 DWORD PTR _polygon$[ebp], eax

; 547  : 
; 548  : 			if ( !polygon )

  009e7	83 7d fc 00	 cmp	 DWORD PTR _polygon$[ebp], 0
  009eb	75 05		 jne	 SHORT $LN8@draw_3d_li

; 549  : 			{
; 550  : 
; 551  : 				return;

  009ed	e9 f0 00 00 00	 jmp	 $LN1@draw_3d_li
$LN8@draw_3d_li:

; 552  : 			}
; 553  : 		}
; 554  : 	
; 555  : 		if ( outcode )

  009f2	83 bd d8 fe ff
	ff 00		 cmp	 DWORD PTR _outcode$[ebp], 0
  009f9	74 30		 je	 SHORT $LN9@draw_3d_li

; 556  : 		{
; 557  : 
; 558  : 			apply_perspective_to_polygon_texture ( polygon );

  009fb	8b 45 fc	 mov	 eax, DWORD PTR _polygon$[ebp]
  009fe	50		 push	 eax
  009ff	e8 00 00 00 00	 call	 ?apply_perspective_to_polygon_texture@@YGXPAUVERTEX@@@Z ; apply_perspective_to_polygon_texture

; 559  : 			
; 560  : 			polygon = clip_3d_polygon ( polygon, outcode );

  00a04	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _outcode$[ebp]
  00a0a	50		 push	 eax
  00a0b	8b 4d fc	 mov	 ecx, DWORD PTR _polygon$[ebp]
  00a0e	51		 push	 ecx
  00a0f	e8 00 00 00 00	 call	 ?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z ; clip_3d_polygon
  00a14	89 45 fc	 mov	 DWORD PTR _polygon$[ebp], eax

; 561  : 
; 562  : 			if ( !polygon )

  00a17	83 7d fc 00	 cmp	 DWORD PTR _polygon$[ebp], 0
  00a1b	75 05		 jne	 SHORT $LN10@draw_3d_li

; 563  : 			{
; 564  : 
; 565  : 				return;

  00a1d	e9 c0 00 00 00	 jmp	 $LN1@draw_3d_li
$LN10@draw_3d_li:

; 566  : 			}
; 567  : 
; 568  : 			remove_perspective_from_polygon_texture ( polygon );

  00a22	8b 45 fc	 mov	 eax, DWORD PTR _polygon$[ebp]
  00a25	50		 push	 eax
  00a26	e8 00 00 00 00	 call	 ?remove_perspective_from_polygon_texture@@YGXPAUVERTEX@@@Z ; remove_perspective_from_polygon_texture
$LN9@draw_3d_li:

; 569  : 		}
; 570  : 
; 571  : 		{
; 572  : 
; 573  : 			real_colour
; 574  : 				colour,
; 575  : 				specular;
; 576  : 
; 577  : 			set_d3d_alpha_fog_zbuffer ( TRUE, FALSE, TRUE, FALSE );

  00a2b	6a 00		 push	 0
  00a2d	6a 01		 push	 1
  00a2f	6a 00		 push	 0
  00a31	6a 01		 push	 1
  00a33	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer

; 578  : 
; 579  : 			set_d3d_texture ( 0, texture );

  00a38	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _texture$[ebp]
  00a3e	50		 push	 eax
  00a3f	6a 00		 push	 0
  00a41	e8 00 00 00 00	 call	 ?set_d3d_texture@@YGXHPAUSCREEN@@@Z ; set_d3d_texture

; 580  : 
; 581  : 			set_d3d_texture_stage_state ( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );

  00a46	6a 04		 push	 4
  00a48	6a 01		 push	 1
  00a4a	6a 00		 push	 0
  00a4c	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 582  : 			set_d3d_texture_stage_state ( 1, D3DTSS_COLOROP, D3DTOP_DISABLE );

  00a51	6a 01		 push	 1
  00a53	6a 01		 push	 1
  00a55	6a 01		 push	 1
  00a57	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 583  : 	
; 584  : 			set_d3d_int_state ( D3DRENDERSTATE_SRCBLEND, D3DBLEND_ONE );

  00a5c	6a 02		 push	 2
  00a5e	6a 13		 push	 19			; 00000013H
  00a60	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 585  : 			set_d3d_int_state ( D3DRENDERSTATE_DESTBLEND, D3DBLEND_ONE );

  00a65	6a 02		 push	 2
  00a67	6a 14		 push	 20			; 00000014H
  00a69	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 586  : 			set_d3d_texture_stage_state ( 0, D3DTSS_ADDRESSU, D3DTADDRESS_CLAMP );

  00a6e	6a 03		 push	 3
  00a70	6a 0d		 push	 13			; 0000000dH
  00a72	6a 00		 push	 0
  00a74	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 587  : 			set_d3d_texture_stage_state ( 0, D3DTSS_ADDRESSV, D3DTADDRESS_CLAMP );

  00a79	6a 03		 push	 3
  00a7b	6a 0e		 push	 14			; 0000000eH
  00a7d	6a 00		 push	 0
  00a7f	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 588  : 			set_d3d_texture_stage_state ( 0, D3DTSS_MAGFILTER, D3DTFG_LINEAR );

  00a84	6a 02		 push	 2
  00a86	6a 10		 push	 16			; 00000010H
  00a88	6a 00		 push	 0
  00a8a	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 589  : 			set_d3d_texture_stage_state ( 0, D3DTSS_MINFILTER, D3DTFN_LINEAR );

  00a8f	6a 02		 push	 2
  00a91	6a 11		 push	 17			; 00000011H
  00a93	6a 00		 push	 0
  00a95	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 590  : 			set_d3d_texture_stage_state ( 0, D3DTSS_MIPFILTER, D3DTFP_POINT );

  00a9a	6a 02		 push	 2
  00a9c	6a 12		 push	 18			; 00000012H
  00a9e	6a 00		 push	 0
  00aa0	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 591  : 
; 592  : 			colour.red = 255;

  00aa5	c6 85 96 fe ff
	ff ff		 mov	 BYTE PTR _colour$2[ebp+2], 255 ; 000000ffH

; 593  : 			colour.green = 255;

  00aac	c6 85 95 fe ff
	ff ff		 mov	 BYTE PTR _colour$2[ebp+1], 255 ; 000000ffH

; 594  : 			colour.blue = 255;

  00ab3	c6 85 94 fe ff
	ff ff		 mov	 BYTE PTR _colour$2[ebp], 255 ; 000000ffH

; 595  : 			colour.alpha = 255;

  00aba	c6 85 97 fe ff
	ff ff		 mov	 BYTE PTR _colour$2[ebp+3], 255 ; 000000ffH

; 596  : 
; 597  : 			specular.colour = 0;

  00ac1	c7 85 90 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _specular$1[ebp], 0

; 598  : 	
; 599  : 			draw_wbuffered_flat_shaded_textured_polygon ( polygon, colour, specular );

  00acb	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR _specular$1[ebp]
  00ad1	50		 push	 eax
  00ad2	8b 8d 94 fe ff
	ff		 mov	 ecx, DWORD PTR _colour$2[ebp]
  00ad8	51		 push	 ecx
  00ad9	8b 55 fc	 mov	 edx, DWORD PTR _polygon$[ebp]
  00adc	52		 push	 edx
  00add	e8 00 00 00 00	 call	 ?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_flat_shaded_textured_polygon
$LN1@draw_3d_li:

; 600  : 		}
; 601  : 	}
; 602  : }

  00ae2	5f		 pop	 edi
  00ae3	5e		 pop	 esi
  00ae4	5b		 pop	 ebx
  00ae5	8b e5		 mov	 esp, ebp
  00ae7	5d		 pop	 ebp
  00ae8	c2 04 00	 ret	 4
?draw_3d_lightning_strike@@YGXPAULIGHTNING_STRIKE@@@Z ENDP ; draw_3d_lightning_strike
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dstrike.c
;	COMDAT ?draw_3d_lightning_strikes@@YGXXZ
_TEXT	SEGMENT
tv131 = -88						; size = 4
_range$1 = -20						; size = 4
_dz$2 = -16						; size = 4
_dy$3 = -12						; size = 4
_dx$4 = -8						; size = 4
_count$ = -4						; size = 4
?draw_3d_lightning_strikes@@YGXXZ PROC			; draw_3d_lightning_strikes, COMDAT

; 288  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 289  : 
; 290  : 	int
; 291  : 		count;
; 292  : 
; 293  : 	for ( count = 0; count < MAX_NUMBER_OF_LIGHTNING_STRIKES; count++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@draw_3d_li
$LN2@draw_3d_li:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@draw_3d_li:
  0001b	83 7d fc 20	 cmp	 DWORD PTR _count$[ebp], 32 ; 00000020H
  0001f	0f 8d fb 00 00
	00		 jge	 $LN3@draw_3d_li

; 294  : 	{
; 295  : 
; 296  : 		if ( lightning_strikes[count].in_use )

  00025	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  00029	83 b8 1c 00 00
	00 00		 cmp	 DWORD PTR ?lightning_strikes@@3PAULIGHTNING_STRIKE@@A[eax+28], 0
  00030	0f 84 e5 00 00
	00		 je	 $LN5@draw_3d_li

; 297  : 		{
; 298  : 
; 299  : 			float
; 300  : 				dx,
; 301  : 				dy,
; 302  : 				dz,
; 303  : 				range;
; 304  : 
; 305  : 			dx = ( lightning_strikes[count].position.x - visual_3d_vp->x );

  00036	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00040	f3 0f 10 80 00
	00 00 00	 movss	 xmm0, DWORD PTR ?lightning_strikes@@3PAULIGHTNING_STRIKE@@A[eax]
  00048	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0004c	f3 0f 11 45 f8	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 306  : 			dy = ( lightning_strikes[count].position.y - visual_3d_vp->y );

  00051	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  00055	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0005b	f3 0f 10 80 04
	00 00 00	 movss	 xmm0, DWORD PTR ?lightning_strikes@@3PAULIGHTNING_STRIKE@@A[eax+4]
  00063	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00068	f3 0f 11 45 f4	 movss	 DWORD PTR _dy$3[ebp], xmm0

; 307  : 			dz = ( lightning_strikes[count].position.z - visual_3d_vp->z );

  0006d	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  00071	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00077	f3 0f 10 80 08
	00 00 00	 movss	 xmm0, DWORD PTR ?lightning_strikes@@3PAULIGHTNING_STRIKE@@A[eax+8]
  0007f	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00084	f3 0f 11 45 f0	 movss	 DWORD PTR _dz$2[ebp], xmm0

; 308  : 
; 309  : 			range = sqrt ( ( dx * dx ) + ( dy * dy ) + ( dz * dz ) );

  00089	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  0008e	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _dx$4[ebp]
  00093	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _dy$3[ebp]
  00098	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _dy$3[ebp]
  0009d	f3 0f 58 c1	 addss	 xmm0, xmm1
  000a1	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _dz$2[ebp]
  000a6	f3 0f 59 4d f0	 mulss	 xmm1, DWORD PTR _dz$2[ebp]
  000ab	f3 0f 58 c1	 addss	 xmm0, xmm1
  000af	51		 push	 ecx
  000b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b5	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  000ba	d9 5d ec	 fstp	 DWORD PTR _range$1[ebp]

; 310  : 
; 311  : 			if ( range < MAX_LIGHTNING_VISUAL_RANGE )

  000bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@466a6000
  000c5	0f 2f 45 ec	 comiss	 xmm0, DWORD PTR _range$1[ebp]
  000c9	76 50		 jbe	 SHORT $LN5@draw_3d_li

; 312  : 			{
; 313  : 	
; 314  : 				switch ( lightning_strikes[count].type )

  000cb	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  000cf	8b 88 18 00 00
	00		 mov	 ecx, DWORD PTR ?lightning_strikes@@3PAULIGHTNING_STRIKE@@A[eax+24]
  000d5	89 4d a8	 mov	 DWORD PTR tv131[ebp], ecx
  000d8	83 7d a8 01	 cmp	 DWORD PTR tv131[ebp], 1
  000dc	74 0e		 je	 SHORT $LN9@draw_3d_li
  000de	83 7d a8 01	 cmp	 DWORD PTR tv131[ebp], 1
  000e2	7e 2a		 jle	 SHORT $LN11@draw_3d_li
  000e4	83 7d a8 05	 cmp	 DWORD PTR tv131[ebp], 5
  000e8	7e 13		 jle	 SHORT $LN10@draw_3d_li
  000ea	eb 22		 jmp	 SHORT $LN11@draw_3d_li
$LN9@draw_3d_li:

; 315  : 				{
; 316  : 	
; 317  : 					case LIGHTNING_TYPE_CLOUD_BURST:
; 318  : 					{
; 319  : 	
; 320  : 						draw_3d_lightning_cloud_burst ( &lightning_strikes[count] );

  000ec	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  000f0	05 00 00 00 00	 add	 eax, OFFSET ?lightning_strikes@@3PAULIGHTNING_STRIKE@@A ; lightning_strikes
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 ?draw_3d_lightning_cloud_burst@@YGXPAULIGHTNING_STRIKE@@@Z ; draw_3d_lightning_cloud_burst

; 321  : 	
; 322  : 						break;

  000fb	eb 1e		 jmp	 SHORT $LN5@draw_3d_li
$LN10@draw_3d_li:

; 323  : 					}
; 324  : 	
; 325  : 					case LIGHTNING_TYPE_FORKED_1:
; 326  : 					case LIGHTNING_TYPE_FORKED_2:
; 327  : 					case LIGHTNING_TYPE_FORKED_3:
; 328  : 					case LIGHTNING_TYPE_FORKED_4:
; 329  : 					{
; 330  : 	
; 331  : 						draw_3d_lightning_strike ( &lightning_strikes[count] );

  000fd	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  00101	05 00 00 00 00	 add	 eax, OFFSET ?lightning_strikes@@3PAULIGHTNING_STRIKE@@A ; lightning_strikes
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ?draw_3d_lightning_strike@@YGXPAULIGHTNING_STRIKE@@@Z ; draw_3d_lightning_strike

; 332  : 	
; 333  : 						break;

  0010c	eb 0d		 jmp	 SHORT $LN5@draw_3d_li
$LN11@draw_3d_li:

; 334  : 					}
; 335  : 	
; 336  : 					default:
; 337  : 					{
; 338  : 	
; 339  : 						debug_fatal ( "Drawing unknown lightning type" );

  0010e	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@JFHGKJCH@Drawing?5unknown?5lightning?5type@
  00113	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00118	83 c4 04	 add	 esp, 4
$LN5@draw_3d_li:

; 340  : 	
; 341  : 						break;
; 342  : 					}
; 343  : 				}
; 344  : 			}
; 345  : 		}
; 346  : 	}

  0011b	e9 f2 fe ff ff	 jmp	 $LN2@draw_3d_li
$LN3@draw_3d_li:

; 347  : }

  00120	5f		 pop	 edi
  00121	5e		 pop	 esi
  00122	5b		 pop	 ebx
  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	c3		 ret	 0
?draw_3d_lightning_strikes@@YGXXZ ENDP			; draw_3d_lightning_strikes
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dstrike.c
;	COMDAT ?update_3d_lightning_strikes@@YGXPAUENV_3D@@@Z
_TEXT	SEGMENT
tv75 = -80						; size = 4
_t$1 = -12						; size = 4
_time_of_day$ = -8					; size = 4
_count$ = -4						; size = 4
_env$ = 8						; size = 4
?update_3d_lightning_strikes@@YGXPAUENV_3D@@@Z PROC	; update_3d_lightning_strikes, COMDAT

; 196  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 197  : 
; 198  : 	int
; 199  : 		count;
; 200  : 
; 201  : 	float
; 202  : 		time_of_day;
; 203  : 
; 204  : 
; 205  : 	time_of_day = get_3d_time_of_day ( env );

  00009	8b 45 08	 mov	 eax, DWORD PTR _env$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?get_3d_time_of_day@@YGMPAUENV_3D@@@Z ; get_3d_time_of_day
  00012	d9 5d f8	 fstp	 DWORD PTR _time_of_day$[ebp]

; 206  : 
; 207  : 	for ( count = 0; count < MAX_NUMBER_OF_LIGHTNING_STRIKES; count++ )

  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0001c	eb 09		 jmp	 SHORT $LN4@update_3d_
$LN2@update_3d_:
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00021	83 c0 01	 add	 eax, 1
  00024	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@update_3d_:
  00027	83 7d fc 20	 cmp	 DWORD PTR _count$[ebp], 32 ; 00000020H
  0002b	0f 8d 2a 01 00
	00		 jge	 $LN3@update_3d_

; 208  : 	{
; 209  : 
; 210  : 		if ( lightning_strikes[count].in_use )

  00031	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  00035	83 b8 1c 00 00
	00 00		 cmp	 DWORD PTR ?lightning_strikes@@3PAULIGHTNING_STRIKE@@A[eax+28], 0
  0003c	0f 84 14 01 00
	00		 je	 $LN5@update_3d_

; 211  : 		{
; 212  : 
; 213  : 			float
; 214  : 				t;
; 215  : 
; 216  : 			switch ( lightning_strikes[count].type )

  00042	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  00046	8b 88 18 00 00
	00		 mov	 ecx, DWORD PTR ?lightning_strikes@@3PAULIGHTNING_STRIKE@@A[eax+24]
  0004c	89 4d b0	 mov	 DWORD PTR tv75[ebp], ecx
  0004f	83 7d b0 01	 cmp	 DWORD PTR tv75[ebp], 1
  00053	74 15		 je	 SHORT $LN8@update_3d_
  00055	83 7d b0 01	 cmp	 DWORD PTR tv75[ebp], 1
  00059	0f 8e ea 00 00
	00		 jle	 $LN14@update_3d_
  0005f	83 7d b0 05	 cmp	 DWORD PTR tv75[ebp], 5
  00063	7e 71		 jle	 SHORT $LN11@update_3d_
  00065	e9 df 00 00 00	 jmp	 $LN14@update_3d_
$LN8@update_3d_:

; 217  : 			{
; 218  : 
; 219  : 				case LIGHTNING_TYPE_CLOUD_BURST:
; 220  : 				{
; 221  : 
; 222  : 					if ( !timed_event_has_finished ( lightning_strikes[count].time_started,

  0006a	8d 45 f4	 lea	 eax, DWORD PTR _t$1[ebp]
  0006d	50		 push	 eax
  0006e	51		 push	 ecx
  0006f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _time_of_day$[ebp]
  00074	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00079	6b 4d fc 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  0007d	51		 push	 ecx
  0007e	f3 0f 10 81 10
	00 00 00	 movss	 xmm0, DWORD PTR ?lightning_strikes@@3PAULIGHTNING_STRIKE@@A[ecx+16]
  00086	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008b	6b 55 fc 24	 imul	 edx, DWORD PTR _count$[ebp], 36
  0008f	51		 push	 ecx
  00090	f3 0f 10 82 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?lightning_strikes@@3PAULIGHTNING_STRIKE@@A[edx+12]
  00098	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009d	e8 00 00 00 00	 call	 ?timed_event_has_finished@@YGHMMMPAM@Z ; timed_event_has_finished
  000a2	85 c0		 test	 eax, eax
  000a4	75 1d		 jne	 SHORT $LN9@update_3d_

; 223  : 																lightning_strikes[count].time_length,
; 224  : 																time_of_day,
; 225  : 																&t ) )
; 226  : 					{
; 227  : 
; 228  : 						lightning_strikes[count].current_frame_number = t * 10;

  000a6	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _t$1[ebp]
  000ab	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41200000
  000b3	f3 0f 2c c0	 cvttss2si eax, xmm0
  000b7	6b 4d fc 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  000bb	89 81 20 00 00
	00		 mov	 DWORD PTR ?lightning_strikes@@3PAULIGHTNING_STRIKE@@A[ecx+32], eax

; 229  : 					}
; 230  : 					else

  000c1	eb 0e		 jmp	 SHORT $LN10@update_3d_
$LN9@update_3d_:

; 231  : 					{
; 232  : 
; 233  : 						//
; 234  : 						// Lightning effect has terminated
; 235  : 						//
; 236  : 
; 237  : 						lightning_strikes[count].in_use = FALSE;

  000c3	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  000c7	c7 80 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?lightning_strikes@@3PAULIGHTNING_STRIKE@@A[eax+28], 0
$LN10@update_3d_:

; 238  : 
; 239  : 					}
; 240  : 					
; 241  : 					break;

  000d1	e9 80 00 00 00	 jmp	 $LN5@update_3d_
$LN11@update_3d_:

; 242  : 				}
; 243  : 
; 244  : 				case LIGHTNING_TYPE_FORKED_1:
; 245  : 				case LIGHTNING_TYPE_FORKED_2:
; 246  : 				case LIGHTNING_TYPE_FORKED_3:
; 247  : 				case LIGHTNING_TYPE_FORKED_4:
; 248  : 				{
; 249  : 
; 250  : 					if ( !timed_event_has_finished ( lightning_strikes[count].time_started,

  000d6	8d 45 f4	 lea	 eax, DWORD PTR _t$1[ebp]
  000d9	50		 push	 eax
  000da	51		 push	 ecx
  000db	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _time_of_day$[ebp]
  000e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e5	6b 4d fc 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  000e9	51		 push	 ecx
  000ea	f3 0f 10 81 10
	00 00 00	 movss	 xmm0, DWORD PTR ?lightning_strikes@@3PAULIGHTNING_STRIKE@@A[ecx+16]
  000f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f7	6b 55 fc 24	 imul	 edx, DWORD PTR _count$[ebp], 36
  000fb	51		 push	 ecx
  000fc	f3 0f 10 82 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?lightning_strikes@@3PAULIGHTNING_STRIKE@@A[edx+12]
  00104	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00109	e8 00 00 00 00	 call	 ?timed_event_has_finished@@YGHMMMPAM@Z ; timed_event_has_finished
  0010e	85 c0		 test	 eax, eax
  00110	75 27		 jne	 SHORT $LN12@update_3d_

; 251  : 																lightning_strikes[count].time_length,
; 252  : 																time_of_day,
; 253  : 																&t ) )
; 254  : 					{
; 255  : 
; 256  : 						lightning_strikes[count].current_frame_number = t * ( texture_animations[lightning_strike_animation].number_of_frames );

  00112	6b 05 00 00 00
	00 0c		 imul	 eax, DWORD PTR ?lightning_strike_animation@@3W4TEXTURE_ANIMATION_INDICES@@A, 12 ; lightning_strike_animation
  00119	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  0011f	f3 0f 2a 04 01	 cvtsi2ss xmm0, DWORD PTR [ecx+eax]
  00124	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _t$1[ebp]
  00129	f3 0f 2c d0	 cvttss2si edx, xmm0
  0012d	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  00131	89 90 20 00 00
	00		 mov	 DWORD PTR ?lightning_strikes@@3PAULIGHTNING_STRIKE@@A[eax+32], edx

; 257  : 					}
; 258  : 					else

  00137	eb 0e		 jmp	 SHORT $LN13@update_3d_
$LN12@update_3d_:

; 259  : 					{
; 260  : 
; 261  : 						//
; 262  : 						// Lightning effect has terminated
; 263  : 						//
; 264  : 
; 265  : 						lightning_strikes[count].in_use = FALSE;

  00139	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  0013d	c7 80 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?lightning_strikes@@3PAULIGHTNING_STRIKE@@A[eax+28], 0
$LN13@update_3d_:

; 266  : 					}
; 267  : 					
; 268  : 					break;

  00147	eb 0d		 jmp	 SHORT $LN5@update_3d_
$LN14@update_3d_:

; 269  : 				}
; 270  : 
; 271  : 				default:
; 272  : 				{
; 273  : 
; 274  : 					debug_fatal ( "Updating unknown lightning type" );

  00149	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@CEAENJNH@Updating?5unknown?5lightning?5type@
  0014e	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00153	83 c4 04	 add	 esp, 4
$LN5@update_3d_:

; 275  : 
; 276  : 					break;
; 277  : 				}
; 278  : 			}
; 279  : 		}
; 280  : 	}

  00156	e9 c3 fe ff ff	 jmp	 $LN2@update_3d_
$LN3@update_3d_:

; 281  : }

  0015b	5f		 pop	 edi
  0015c	5e		 pop	 esi
  0015d	5b		 pop	 ebx
  0015e	8b e5		 mov	 esp, ebp
  00160	5d		 pop	 ebp
  00161	c2 04 00	 ret	 4
?update_3d_lightning_strikes@@YGXPAUENV_3D@@@Z ENDP	; update_3d_lightning_strikes
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dstrike.c
;	COMDAT ?add_3d_lightning_strike@@YGXHMMM@Z
_TEXT	SEGMENT
_count$ = -4						; size = 4
_type$ = 8						; size = 4
_time$ = 12						; size = 4
_x$ = 16						; size = 4
_z$ = 20						; size = 4
?add_3d_lightning_strike@@YGXHMMM@Z PROC		; add_3d_lightning_strike, COMDAT

; 154  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 155  : 
; 156  : 	int
; 157  : 		count;
; 158  : 
; 159  : 	if ( active_3d_environment )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A, 0 ; active_3d_environment
  00010	0f 84 b9 00 00
	00		 je	 $LN3@add_3d_lig

; 160  : 	{
; 161  : 	
; 162  : 		for ( count = 0; count < MAX_NUMBER_OF_LIGHTNING_STRIKES; count++ )

  00016	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0001d	eb 09		 jmp	 SHORT $LN4@add_3d_lig
$LN2@add_3d_lig:
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@add_3d_lig:
  00028	83 7d fc 20	 cmp	 DWORD PTR _count$[ebp], 32 ; 00000020H
  0002c	0f 8d 9d 00 00
	00		 jge	 $LN3@add_3d_lig

; 163  : 		{
; 164  : 	
; 165  : 			if ( !lightning_strikes[count].in_use )

  00032	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  00036	83 b8 1c 00 00
	00 00		 cmp	 DWORD PTR ?lightning_strikes@@3PAULIGHTNING_STRIKE@@A[eax+28], 0
  0003d	0f 85 87 00 00
	00		 jne	 $LN6@add_3d_lig

; 166  : 			{
; 167  : 	
; 168  : 				lightning_strikes[count].in_use = TRUE;

  00043	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  00047	c7 80 1c 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?lightning_strikes@@3PAULIGHTNING_STRIKE@@A[eax+28], 1

; 169  : 	
; 170  : 				lightning_strikes[count].position.x = x;

  00051	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  00055	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x$[ebp]
  0005a	f3 0f 11 80 00
	00 00 00	 movss	 DWORD PTR ?lightning_strikes@@3PAULIGHTNING_STRIKE@@A[eax], xmm0

; 171  : 				lightning_strikes[count].position.z = z;

  00062	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  00066	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _z$[ebp]
  0006b	f3 0f 11 80 08
	00 00 00	 movss	 DWORD PTR ?lightning_strikes@@3PAULIGHTNING_STRIKE@@A[eax+8], xmm0

; 172  : 	
; 173  : 				lightning_strikes[count].position.y = 6000;

  00073	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  00077	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@45bb8000
  0007f	f3 0f 11 80 04
	00 00 00	 movss	 DWORD PTR ?lightning_strikes@@3PAULIGHTNING_STRIKE@@A[eax+4], xmm0

; 174  : 	
; 175  : 				lightning_strikes[count].type = ( enum LIGHTNING_STRIKE_TYPES ) type;

  00087	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  0008b	8b 4d 08	 mov	 ecx, DWORD PTR _type$[ebp]
  0008e	89 88 18 00 00
	00		 mov	 DWORD PTR ?lightning_strikes@@3PAULIGHTNING_STRIKE@@A[eax+24], ecx

; 176  : 	
; 177  : 				lightning_strikes[count].current_frame_number = 0;

  00094	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  00098	c7 80 20 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?lightning_strikes@@3PAULIGHTNING_STRIKE@@A[eax+32], 0

; 178  : 	
; 179  : //				lightning_strikes[count].ground_height = get_3d_terrain_elevation ( x, z );
; 180  : 	
; 181  : 				lightning_strikes[count].time_started = get_3d_time_of_day ( active_3d_environment );

  000a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 ?get_3d_time_of_day@@YGMPAUENV_3D@@@Z ; get_3d_time_of_day
  000ad	6b 4d fc 24	 imul	 ecx, DWORD PTR _count$[ebp], 36
  000b1	d9 99 0c 00 00
	00		 fstp	 DWORD PTR ?lightning_strikes@@3PAULIGHTNING_STRIKE@@A[ecx+12]

; 182  : 	
; 183  : 				lightning_strikes[count].time_length = time;

  000b7	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  000bb	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _time$[ebp]
  000c0	f3 0f 11 80 10
	00 00 00	 movss	 DWORD PTR ?lightning_strikes@@3PAULIGHTNING_STRIKE@@A[eax+16], xmm0

; 184  : 	
; 185  : 				break;

  000c8	eb 05		 jmp	 SHORT $LN3@add_3d_lig
$LN6@add_3d_lig:

; 186  : 			}
; 187  : 		}

  000ca	e9 50 ff ff ff	 jmp	 $LN2@add_3d_lig
$LN3@add_3d_lig:

; 188  : 	}
; 189  : }

  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi
  000d1	5b		 pop	 ebx
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c2 10 00	 ret	 16			; 00000010H
?add_3d_lightning_strike@@YGXHMMM@Z ENDP		; add_3d_lightning_strike
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dstrike.c
;	COMDAT ?initialise_3d_lightning@@YGXW4TEXTURE_ANIMATION_INDICES@@H@Z
_TEXT	SEGMENT
_count$ = -4						; size = 4
_strike_animation$ = 8					; size = 4
_cloud_index$ = 12					; size = 4
?initialise_3d_lightning@@YGXW4TEXTURE_ANIMATION_INDICES@@H@Z PROC ; initialise_3d_lightning, COMDAT

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 132  : 
; 133  : 	int
; 134  : 		count;
; 135  : 
; 136  : 	lightning_strike_animation = strike_animation;

  00009	8b 45 08	 mov	 eax, DWORD PTR _strike_animation$[ebp]
  0000c	a3 00 00 00 00	 mov	 DWORD PTR ?lightning_strike_animation@@3W4TEXTURE_ANIMATION_INDICES@@A, eax ; lightning_strike_animation

; 137  : 
; 138  : 	lightning_cloud_texture = cloud_index;

  00011	8b 45 0c	 mov	 eax, DWORD PTR _cloud_index$[ebp]
  00014	a3 00 00 00 00	 mov	 DWORD PTR ?lightning_cloud_texture@@3HA, eax ; lightning_cloud_texture

; 139  : 
; 140  : 	number_of_lightning_strikes = 0;

  00019	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?number_of_lightning_strikes@@3HA, 0 ; number_of_lightning_strikes

; 141  : 
; 142  : 	for ( count = 0; count < MAX_NUMBER_OF_LIGHTNING_STRIKES; count++ )

  00023	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0002a	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0002f	83 c0 01	 add	 eax, 1
  00032	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@initialise:
  00035	83 7d fc 20	 cmp	 DWORD PTR _count$[ebp], 32 ; 00000020H
  00039	7d 10		 jge	 SHORT $LN1@initialise

; 143  : 	{
; 144  : 
; 145  : 		lightning_strikes[count].in_use = FALSE;

  0003b	6b 45 fc 24	 imul	 eax, DWORD PTR _count$[ebp], 36
  0003f	c7 80 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?lightning_strikes@@3PAULIGHTNING_STRIKE@@A[eax+28], 0

; 146  : 	}

  00049	eb e1		 jmp	 SHORT $LN2@initialise
$LN1@initialise:

; 147  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
?initialise_3d_lightning@@YGXW4TEXTURE_ANIMATION_INDICES@@H@Z ENDP ; initialise_3d_lightning
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\viewport.h
;	COMDAT ?generate_lookup_outcode@@YGHHHHH@Z
_TEXT	SEGMENT
_xmin$ = 8						; size = 4
_ymin$ = 12						; size = 4
_xmax$ = 16						; size = 4
_ymax$ = 20						; size = 4
?generate_lookup_outcode@@YGHHHHH@Z PROC		; generate_lookup_outcode, COMDAT

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 200  : 
; 201  : 	__asm mov eax, xmin;

  00009	8b 45 08	 mov	 eax, DWORD PTR _xmin$[ebp]
  0000c	8b 5d 0c	 mov	 ebx, DWORD PTR _ymin$[ebp]
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR _xmax$[ebp]
  00012	8b 55 14	 mov	 edx, DWORD PTR _ymax$[ebp]
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	81 e3 00 00 00
	80		 and	 ebx, -2147483648	; 80000000H
  0001e	c1 e9 1d	 shr	 ecx, 29			; 0000001dH
  00021	81 e2 00 00 00
	80		 and	 edx, -2147483648	; 80000000H
  00027	c1 eb 1e	 shr	 ebx, 30			; 0000001eH
  0002a	83 e0 01	 and	 eax, 1
  0002d	c1 ea 1c	 shr	 edx, 28			; 0000001cH
  00030	83 e1 04	 and	 ecx, 4
  00033	0b c3		 or	 eax, ebx
  00035	0b ca		 or	 ecx, edx
  00037	0b c1		 or	 eax, ecx
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 10 00	 ret	 16			; 00000010H
?generate_lookup_outcode@@YGHHHHH@Z ENDP		; generate_lookup_outcode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sqrt@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sqrt@@YGMM@Z PROC					; sqrt, COMDAT

; 294  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 295  : 	return (_CSTD sqrtf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sqrtf
  00019	83 c4 04	 add	 esp, 4

; 296  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sqrt@@YGMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sin@@YGMM@Z PROC					; sin, COMDAT

; 284  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 285  : 	return (_CSTD sinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sinf
  00019	83 c4 04	 add	 esp, 4

; 286  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sin@@YGMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?cos@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?cos@@YGMM@Z PROC					; cos, COMDAT

; 77   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 78   : 	return (_CSTD cosf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _cosf
  00019	83 c4 04	 add	 esp, 4

; 79   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?cos@@YGMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan2@@YGMMM@Z
_TEXT	SEGMENT
__Yx$ = 8						; size = 4
__Xx$ = 12						; size = 4
?atan2@@YGMMM@Z PROC					; atan2, COMDAT

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return (_CSTD atan2f(_Yx, _Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _atan2f
  00024	83 c4 08	 add	 esp, 8

; 58   : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?atan2@@YGMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 760  :             return (float)sqrt(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sqrt
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 761  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 750  :             return (float)sin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 751  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 648  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 649  :             return (float)cos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _cos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 650  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv74 = -68						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 633  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 634  :             return (float)atan2(_Y, _X);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _atan2
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 635  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_atan2f	ENDP
_TEXT	ENDS
END
