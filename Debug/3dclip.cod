; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\3d\3dclip.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?number_of_near_coordinates_inserted@@3HA	; number_of_near_coordinates_inserted
PUBLIC	?number_of_far_coordinates_inserted@@3HA	; number_of_far_coordinates_inserted
PUBLIC	?number_of_polygons_yonder_clipped@@3HA		; number_of_polygons_yonder_clipped
PUBLIC	?number_of_polygons_hither_clipped@@3HA		; number_of_polygons_hither_clipped
_BSS	SEGMENT
?number_of_near_coordinates_inserted@@3HA DD 01H DUP (?) ; number_of_near_coordinates_inserted
?number_of_far_coordinates_inserted@@3HA DD 01H DUP (?)	; number_of_far_coordinates_inserted
?number_of_polygons_yonder_clipped@@3HA DD 01H DUP (?)	; number_of_polygons_yonder_clipped
?number_of_polygons_hither_clipped@@3HA DD 01H DUP (?)	; number_of_polygons_hither_clipped
_BSS	ENDS
PUBLIC	?asm_convert_float_to_int@@YGXMPAH@Z		; asm_convert_float_to_int
PUBLIC	?hither_clip_3d_polygon@@YGPAUVERTEX@@PAU1@PAH@Z ; hither_clip_3d_polygon
PUBLIC	?yonder_clip_3d_polygon@@YGPAUVERTEX@@PAU1@PAH@Z ; yonder_clip_3d_polygon
PUBLIC	?hither_clip_3d_dual_texture_polygon@@YGPAUVERTEX@@PAU1@PAH@Z ; hither_clip_3d_dual_texture_polygon
PUBLIC	?yonder_clip_3d_dual_texture_polygon@@YGPAUVERTEX@@PAU1@PAH@Z ; yonder_clip_3d_dual_texture_polygon
PUBLIC	?horizon_clip_3d_polygon@@YGPAUVERTEX@@PAU1@@Z	; horizon_clip_3d_polygon
PUBLIC	?__LINE__Var@?0??insert_z_near_coordinate@@YGXPAUVERTEX@@0@Z@4JA ; `insert_z_near_coordinate'::`1'::__LINE__Var
PUBLIC	??_C@_0DB@JADBFHMD@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@ ; `string'
PUBLIC	?__LINE__Var@?0??insert_z_far_coordinate@@YGXPAUVERTEX@@0@Z@4JA ; `insert_z_far_coordinate'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??insert_z_near_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z@4JA ; `insert_z_near_dual_texture_coordinate'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??insert_z_far_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z@4JA ; `insert_z_far_dual_texture_coordinate'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??insert_horizon_coordinate@@YGXPAUVERTEX@@0@Z@4JA ; `insert_horizon_coordinate'::`1'::__LINE__Var
PUBLIC	__real@00000000
PUBLIC	__real@4b40005a
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?generate_3d_outcode@@YGHMM@Z:PROC		; generate_3d_outcode
EXTRN	?clip_3d_coord@@3HA:DWORD			; clip_3d_coord
EXTRN	?clip_3d_crds@@3PAUVERTEX@@A:BYTE		; clip_3d_crds
EXTRN	?clip_hither@@3MA:DWORD				; clip_hither
EXTRN	?clip_hither_reciprocal@@3MA:DWORD		; clip_hither_reciprocal
EXTRN	?clip_yonder@@3MA:DWORD				; clip_yonder
EXTRN	?clip_yonder_reciprocal@@3MA:DWORD		; clip_yonder_reciprocal
EXTRN	?active_3d_environment@@3PAUENV_3D@@A:DWORD	; active_3d_environment
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?this_point@@3PAUVERTEX@@A DD 01H DUP (?)		; this_point
?last_point@@3PAUVERTEX@@A DD 01H DUP (?)		; last_point
?clip_list@@3PAUVERTEX@@A DD 01H DUP (?)		; clip_list
?clip_point@@3PAUVERTEX@@A DD 01H DUP (?)		; clip_point
_BSS	ENDS
;	COMDAT __real@4b40005a
CONST	SEGMENT
__real@4b40005a DD 04b40005ar			; 1.2583e+07
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??insert_horizon_coordinate@@YGXPAUVERTEX@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??insert_horizon_coordinate@@YGXPAUVERTEX@@0@Z@4JA DD 056aH ; `insert_horizon_coordinate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??insert_z_far_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??insert_z_far_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z@4JA DD 04c2H ; `insert_z_far_dual_texture_coordinate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??insert_z_near_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??insert_z_near_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z@4JA DD 041aH ; `insert_z_near_dual_texture_coordinate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??insert_z_far_coordinate@@YGXPAUVERTEX@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??insert_z_far_coordinate@@YGXPAUVERTEX@@0@Z@4JA DD 0398H ; `insert_z_far_coordinate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@
CONST	SEGMENT
??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@ DB 'clip_3d_coord'
	DB	' < MAX_3D_CLIP_COORDINATES', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@JADBFHMD@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DB@JADBFHMD@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\3d\3dclip.c', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??insert_z_near_coordinate@@YGXPAUVERTEX@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??insert_z_near_coordinate@@YGXPAUVERTEX@@0@Z@4JA DD 0316H ; `insert_z_near_coordinate'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dclip.c
;	COMDAT ?insert_z_far_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z
_TEXT	SEGMENT
_int_dblue2$ = -132					; size = 4
_int_blue2$ = -128					; size = 4
_int_dblue$ = -124					; size = 4
_int_blue$ = -120					; size = 4
_int_dgreen2$ = -116					; size = 4
_int_green2$ = -112					; size = 4
_int_dgreen$ = -108					; size = 4
_int_green$ = -104					; size = 4
_int_dred2$ = -100					; size = 4
_int_red2$ = -96					; size = 4
_int_dred$ = -92					; size = 4
_int_red$ = -88						; size = 4
_int_dalpha2$ = -84					; size = 4
_int_alpha2$ = -80					; size = 4
_int_dalpha$ = -76					; size = 4
_int_alpha$ = -72					; size = 4
_int_dspecular$ = -68					; size = 4
_int_specular$ = -64					; size = 4
_int_dfog$ = -60					; size = 4
_int_fog$ = -56						; size = 4
_blue2$ = -52						; size = 4
_blue$ = -48						; size = 4
_green2$ = -44						; size = 4
_green$ = -40						; size = 4
_red2$ = -36						; size = 4
_red$ = -32						; size = 4
_alpha2$ = -28						; size = 4
_alpha$ = -24						; size = 4
_specular$ = -20					; size = 4
_fog$ = -16						; size = 4
_clip$ = -12						; size = 4
_t$ = -8						; size = 8
_point1$ = 8						; size = 4
_point2$ = 12						; size = 4
?insert_z_far_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z PROC ; insert_z_far_dual_texture_coordinate, COMDAT

; 1218 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1219 : 
; 1220 : 	double
; 1221 : 		t;
; 1222 : 
; 1223 : 	vertex
; 1224 : 		*clip;
; 1225 : 
; 1226 : 	float
; 1227 : 		fog,
; 1228 : 		specular,
; 1229 : 		alpha,
; 1230 : 		alpha2,
; 1231 : 		red,
; 1232 : 		red2,
; 1233 : 		green,
; 1234 : 		green2,
; 1235 : 		blue,
; 1236 : 		blue2;
; 1237 : 
; 1238 : 	int
; 1239 : 		int_fog,
; 1240 : 		int_dfog,
; 1241 : 		int_specular,
; 1242 : 		int_dspecular,
; 1243 : 		int_alpha,
; 1244 : 		int_dalpha,
; 1245 : 		int_alpha2,
; 1246 : 		int_dalpha2,
; 1247 : 		int_red,
; 1248 : 		int_dred,
; 1249 : 		int_red2,
; 1250 : 		int_dred2,
; 1251 : 		int_green,
; 1252 : 		int_dgreen,
; 1253 : 		int_green2,
; 1254 : 		int_dgreen2,
; 1255 : 		int_blue,
; 1256 : 		int_dblue,
; 1257 : 		int_blue2,
; 1258 : 		int_dblue2;
; 1259 : 
; 1260 : 	ASSERT ( clip_3d_coord < MAX_3D_CLIP_COORDINATES );

  0000c	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?clip_3d_coord@@3HA, 16 ; clip_3d_coord, 00000010H
  00013	7c 18		 jl	 SHORT $LN2@insert_z_f
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??insert_z_far_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z@4JA
  0001a	83 c0 2a	 add	 eax, 42			; 0000002aH
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@JADBFHMD@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@insert_z_f:

; 1261 : 
; 1262 : 	t = ( ( clip_yonder - point2->z ) / ( point2->z - point1->z ) );

  0002d	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?clip_yonder@@3MA
  00038	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  0003d	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00040	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00043	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00048	f3 0f 5c 4a 08	 subss	 xmm1, DWORD PTR [edx+8]
  0004d	f3 0f 5e c1	 divss	 xmm0, xmm1
  00051	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00055	f2 0f 11 45 f8	 movsd	 QWORD PTR _t$[ebp], xmm0

; 1263 : 
; 1264 : 	clip = &clip_3d_crds[clip_3d_coord];

  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0005f	c1 e0 06	 shl	 eax, 6
  00062	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  00067	89 45 f4	 mov	 DWORD PTR _clip$[ebp], eax

; 1265 : 
; 1266 : 	clip_3d_coord++;

  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0006f	83 c0 01	 add	 eax, 1
  00072	a3 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, eax ; clip_3d_coord

; 1267 : 
; 1268 : 	*( ( int * ) &clip->z ) = *( ( int * ) &clip_yonder );

  00077	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0007a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_yonder@@3MA
  00080	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1269 : 	*( ( int * ) &clip->q ) = *( ( int * ) &clip_yonder_reciprocal );

  00083	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00086	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_yonder_reciprocal@@3MA
  0008c	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 1270 : 
; 1271 : 	int_fog = point2->fog;

  0008f	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00092	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  00096	89 4d c8	 mov	 DWORD PTR _int_fog$[ebp], ecx

; 1272 : 	int_dfog = int_fog - ( int ) point1->fog;

  00099	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0009c	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  000a0	8b 55 c8	 mov	 edx, DWORD PTR _int_fog$[ebp]
  000a3	2b d1		 sub	 edx, ecx
  000a5	89 55 c4	 mov	 DWORD PTR _int_dfog$[ebp], edx

; 1273 : 
; 1274 : 	int_specular = point2->specular;

  000a8	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000ab	0f b6 48 2d	 movzx	 ecx, BYTE PTR [eax+45]
  000af	89 4d c0	 mov	 DWORD PTR _int_specular$[ebp], ecx

; 1275 : 	int_dspecular = int_specular - ( int ) point1->specular;

  000b2	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  000b5	0f b6 48 2d	 movzx	 ecx, BYTE PTR [eax+45]
  000b9	8b 55 c0	 mov	 edx, DWORD PTR _int_specular$[ebp]
  000bc	2b d1		 sub	 edx, ecx
  000be	89 55 bc	 mov	 DWORD PTR _int_dspecular$[ebp], edx

; 1276 : 
; 1277 : 	int_alpha = point2->alpha;

  000c1	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000c4	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  000c8	89 4d b8	 mov	 DWORD PTR _int_alpha$[ebp], ecx

; 1278 : 	int_dalpha = int_alpha - ( int ) point1->alpha;

  000cb	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  000ce	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  000d2	8b 55 b8	 mov	 edx, DWORD PTR _int_alpha$[ebp]
  000d5	2b d1		 sub	 edx, ecx
  000d7	89 55 b4	 mov	 DWORD PTR _int_dalpha$[ebp], edx

; 1279 : 	int_alpha2 = point2->alpha2;

  000da	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000dd	0f b6 48 37	 movzx	 ecx, BYTE PTR [eax+55]
  000e1	89 4d b0	 mov	 DWORD PTR _int_alpha2$[ebp], ecx

; 1280 : 	int_dalpha2 = int_alpha2 - ( int ) point1->alpha2;

  000e4	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  000e7	0f b6 48 37	 movzx	 ecx, BYTE PTR [eax+55]
  000eb	8b 55 b0	 mov	 edx, DWORD PTR _int_alpha2$[ebp]
  000ee	2b d1		 sub	 edx, ecx
  000f0	89 55 ac	 mov	 DWORD PTR _int_dalpha2$[ebp], edx

; 1281 : 
; 1282 : 	int_red = point2->red;

  000f3	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000f6	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  000fa	89 4d a8	 mov	 DWORD PTR _int_red$[ebp], ecx

; 1283 : 	int_dred = int_red - ( int ) point1->red;

  000fd	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00100	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  00104	8b 55 a8	 mov	 edx, DWORD PTR _int_red$[ebp]
  00107	2b d1		 sub	 edx, ecx
  00109	89 55 a4	 mov	 DWORD PTR _int_dred$[ebp], edx

; 1284 : 	int_red2 = point2->red2;

  0010c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0010f	0f b6 48 36	 movzx	 ecx, BYTE PTR [eax+54]
  00113	89 4d a0	 mov	 DWORD PTR _int_red2$[ebp], ecx

; 1285 : 	int_dred2 = int_red2 - ( int ) point1->red2;

  00116	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00119	0f b6 48 36	 movzx	 ecx, BYTE PTR [eax+54]
  0011d	8b 55 a0	 mov	 edx, DWORD PTR _int_red2$[ebp]
  00120	2b d1		 sub	 edx, ecx
  00122	89 55 9c	 mov	 DWORD PTR _int_dred2$[ebp], edx

; 1286 : 
; 1287 : 	int_green = point2->green;

  00125	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00128	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  0012c	89 4d 98	 mov	 DWORD PTR _int_green$[ebp], ecx

; 1288 : 	int_dgreen = int_green - ( int ) point1->green;

  0012f	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00132	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  00136	8b 55 98	 mov	 edx, DWORD PTR _int_green$[ebp]
  00139	2b d1		 sub	 edx, ecx
  0013b	89 55 94	 mov	 DWORD PTR _int_dgreen$[ebp], edx

; 1289 : 	int_green2 = point2->green2;

  0013e	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00141	0f b6 48 35	 movzx	 ecx, BYTE PTR [eax+53]
  00145	89 4d 90	 mov	 DWORD PTR _int_green2$[ebp], ecx

; 1290 : 	int_dgreen2 = int_green2 - ( int ) point1->green2;

  00148	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0014b	0f b6 48 35	 movzx	 ecx, BYTE PTR [eax+53]
  0014f	8b 55 90	 mov	 edx, DWORD PTR _int_green2$[ebp]
  00152	2b d1		 sub	 edx, ecx
  00154	89 55 8c	 mov	 DWORD PTR _int_dgreen2$[ebp], edx

; 1291 : 
; 1292 : 	int_blue = point2->blue;

  00157	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0015a	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  0015e	89 4d 88	 mov	 DWORD PTR _int_blue$[ebp], ecx

; 1293 : 	int_dblue = int_blue - ( int ) point1->blue;

  00161	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00164	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  00168	8b 55 88	 mov	 edx, DWORD PTR _int_blue$[ebp]
  0016b	2b d1		 sub	 edx, ecx
  0016d	89 55 84	 mov	 DWORD PTR _int_dblue$[ebp], edx

; 1294 : 	int_blue2 = point2->blue2;

  00170	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00173	0f b6 48 34	 movzx	 ecx, BYTE PTR [eax+52]
  00177	89 4d 80	 mov	 DWORD PTR _int_blue2$[ebp], ecx

; 1295 : 	int_dblue2 = int_blue2 - ( int ) point1->blue2;

  0017a	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0017d	0f b6 48 34	 movzx	 ecx, BYTE PTR [eax+52]
  00181	8b 55 80	 mov	 edx, DWORD PTR _int_blue2$[ebp]
  00184	2b d1		 sub	 edx, ecx
  00186	89 95 7c ff ff
	ff		 mov	 DWORD PTR _int_dblue2$[ebp], edx

; 1296 : 
; 1297 : 	if ( !clip_point )

  0018c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  00193	75 14		 jne	 SHORT $LN3@insert_z_f

; 1298 : 	{
; 1299 : 
; 1300 : 		clip_list = clip;

  00195	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00198	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 1301 : 
; 1302 : 		clip_point = clip_list;

  0019d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  001a2	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 1303 : 	}
; 1304 : 	else

  001a7	eb 19		 jmp	 SHORT $LN4@insert_z_f
$LN3@insert_z_f:

; 1305 : 	{
; 1306 : 
; 1307 : 		clip_point->next_vertex	= clip;

  001a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001ae	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  001b1	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 1308 : 
; 1309 : 		clip_point = clip_point->next_vertex;

  001b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001b9	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  001bc	89 0d 00 00 00
	00		 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, ecx
$LN4@insert_z_f:

; 1310 : 	}
; 1311 : 
; 1312 : 	clip->x = point2->x + ( t * ( point2->x - point1->x ) );

  001c2	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  001c5	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  001c9	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  001cc	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  001cf	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  001d3	f3 0f 5c 0a	 subss	 xmm1, DWORD PTR [edx]
  001d7	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001db	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001e0	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001e4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001e8	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  001eb	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1313 : 	clip->y = point2->y + ( t * ( point2->y - point1->y ) );

  001ef	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  001f2	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  001f7	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  001fa	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  001fd	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  00202	f3 0f 5c 4a 04	 subss	 xmm1, DWORD PTR [edx+4]
  00207	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0020b	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00210	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00214	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00218	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0021b	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1314 : 
; 1315 : 	fog = ( float ) int_fog + ( t * ( float ) int_dfog );

  00220	f3 0f 2a 45 c8	 cvtsi2ss xmm0, DWORD PTR _int_fog$[ebp]
  00225	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00229	f3 0f 2a 4d c4	 cvtsi2ss xmm1, DWORD PTR _int_dfog$[ebp]
  0022e	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00232	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00237	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0023b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0023f	f3 0f 11 45 f0	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1316 : 	specular = ( float ) int_specular + ( t * ( float ) int_dspecular );

  00244	f3 0f 2a 45 c0	 cvtsi2ss xmm0, DWORD PTR _int_specular$[ebp]
  00249	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0024d	f3 0f 2a 4d bc	 cvtsi2ss xmm1, DWORD PTR _int_dspecular$[ebp]
  00252	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00256	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0025b	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0025f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00263	f3 0f 11 45 ec	 movss	 DWORD PTR _specular$[ebp], xmm0

; 1317 : 	alpha = ( float ) int_alpha + ( t * ( float ) int_dalpha );

  00268	f3 0f 2a 45 b8	 cvtsi2ss xmm0, DWORD PTR _int_alpha$[ebp]
  0026d	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00271	f3 0f 2a 4d b4	 cvtsi2ss xmm1, DWORD PTR _int_dalpha$[ebp]
  00276	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0027a	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0027f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00283	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00287	f3 0f 11 45 e8	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1318 : 	alpha2 = ( float ) int_alpha2 + ( t * ( float ) int_dalpha2 );

  0028c	f3 0f 2a 45 b0	 cvtsi2ss xmm0, DWORD PTR _int_alpha2$[ebp]
  00291	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00295	f3 0f 2a 4d ac	 cvtsi2ss xmm1, DWORD PTR _int_dalpha2$[ebp]
  0029a	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0029e	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002a3	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002a7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ab	f3 0f 11 45 e4	 movss	 DWORD PTR _alpha2$[ebp], xmm0

; 1319 : 	red = ( float ) int_red + ( t * ( float ) int_dred );

  002b0	f3 0f 2a 45 a8	 cvtsi2ss xmm0, DWORD PTR _int_red$[ebp]
  002b5	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002b9	f3 0f 2a 4d a4	 cvtsi2ss xmm1, DWORD PTR _int_dred$[ebp]
  002be	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002c2	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002c7	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002cb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002cf	f3 0f 11 45 e0	 movss	 DWORD PTR _red$[ebp], xmm0

; 1320 : 	red2 = ( float ) int_red2 + ( t * ( float ) int_dred2 );

  002d4	f3 0f 2a 45 a0	 cvtsi2ss xmm0, DWORD PTR _int_red2$[ebp]
  002d9	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002dd	f3 0f 2a 4d 9c	 cvtsi2ss xmm1, DWORD PTR _int_dred2$[ebp]
  002e2	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002e6	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002eb	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002ef	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002f3	f3 0f 11 45 dc	 movss	 DWORD PTR _red2$[ebp], xmm0

; 1321 : 	green = ( float ) int_green + ( t * ( float ) int_dgreen );

  002f8	f3 0f 2a 45 98	 cvtsi2ss xmm0, DWORD PTR _int_green$[ebp]
  002fd	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00301	f3 0f 2a 4d 94	 cvtsi2ss xmm1, DWORD PTR _int_dgreen$[ebp]
  00306	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0030a	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0030f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00313	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00317	f3 0f 11 45 d8	 movss	 DWORD PTR _green$[ebp], xmm0

; 1322 : 	green2 = ( float ) int_green2 + ( t * ( float ) int_dgreen2 );

  0031c	f3 0f 2a 45 90	 cvtsi2ss xmm0, DWORD PTR _int_green2$[ebp]
  00321	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00325	f3 0f 2a 4d 8c	 cvtsi2ss xmm1, DWORD PTR _int_dgreen2$[ebp]
  0032a	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0032e	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00333	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00337	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0033b	f3 0f 11 45 d4	 movss	 DWORD PTR _green2$[ebp], xmm0

; 1323 : 	blue = ( float ) int_blue + ( t * ( float ) int_dblue );

  00340	f3 0f 2a 45 88	 cvtsi2ss xmm0, DWORD PTR _int_blue$[ebp]
  00345	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00349	f3 0f 2a 4d 84	 cvtsi2ss xmm1, DWORD PTR _int_dblue$[ebp]
  0034e	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00352	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00357	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0035b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0035f	f3 0f 11 45 d0	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1324 : 	blue2 = ( float ) int_blue2 + ( t * ( float ) int_dblue2 );

  00364	f3 0f 2a 45 80	 cvtsi2ss xmm0, DWORD PTR _int_blue2$[ebp]
  00369	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0036d	f3 0f 2a 8d 7c
	ff ff ff	 cvtsi2ss xmm1, DWORD PTR _int_dblue2$[ebp]
  00375	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00379	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0037e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00382	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00386	f3 0f 11 45 cc	 movss	 DWORD PTR _blue2$[ebp], xmm0

; 1325 : 
; 1326 : 	fog += FLOAT_FLOAT_FACTOR;

  0038b	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _fog$[ebp]
  00390	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00398	f3 0f 11 45 f0	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1327 : 	specular += FLOAT_FLOAT_FACTOR;

  0039d	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _specular$[ebp]
  003a2	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003aa	f3 0f 11 45 ec	 movss	 DWORD PTR _specular$[ebp], xmm0

; 1328 : 	alpha += FLOAT_FLOAT_FACTOR;

  003af	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _alpha$[ebp]
  003b4	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003bc	f3 0f 11 45 e8	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1329 : 	alpha2 += FLOAT_FLOAT_FACTOR;

  003c1	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _alpha2$[ebp]
  003c6	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003ce	f3 0f 11 45 e4	 movss	 DWORD PTR _alpha2$[ebp], xmm0

; 1330 : 	red += FLOAT_FLOAT_FACTOR;

  003d3	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _red$[ebp]
  003d8	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003e0	f3 0f 11 45 e0	 movss	 DWORD PTR _red$[ebp], xmm0

; 1331 : 	red2 += FLOAT_FLOAT_FACTOR;

  003e5	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _red2$[ebp]
  003ea	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003f2	f3 0f 11 45 dc	 movss	 DWORD PTR _red2$[ebp], xmm0

; 1332 : 	green += FLOAT_FLOAT_FACTOR;

  003f7	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _green$[ebp]
  003fc	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00404	f3 0f 11 45 d8	 movss	 DWORD PTR _green$[ebp], xmm0

; 1333 : 	green2 += FLOAT_FLOAT_FACTOR;

  00409	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _green2$[ebp]
  0040e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00416	f3 0f 11 45 d4	 movss	 DWORD PTR _green2$[ebp], xmm0

; 1334 : 	blue += FLOAT_FLOAT_FACTOR;

  0041b	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _blue$[ebp]
  00420	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00428	f3 0f 11 45 d0	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1335 : 	blue2 += FLOAT_FLOAT_FACTOR;

  0042d	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _blue2$[ebp]
  00432	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0043a	f3 0f 11 45 cc	 movss	 DWORD PTR _blue2$[ebp], xmm0

; 1336 : 
; 1337 : 	int_fog = ( *( ( int * ) &fog ) - INTEGER_FLOAT_FACTOR );

  0043f	8b 45 f0	 mov	 eax, DWORD PTR _fog$[ebp]
  00442	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00447	89 45 c8	 mov	 DWORD PTR _int_fog$[ebp], eax

; 1338 : 	int_specular = ( *( ( int * ) &specular ) - INTEGER_FLOAT_FACTOR );

  0044a	8b 45 ec	 mov	 eax, DWORD PTR _specular$[ebp]
  0044d	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00452	89 45 c0	 mov	 DWORD PTR _int_specular$[ebp], eax

; 1339 : 	int_alpha = ( *( ( int * ) &alpha ) - INTEGER_FLOAT_FACTOR );

  00455	8b 45 e8	 mov	 eax, DWORD PTR _alpha$[ebp]
  00458	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0045d	89 45 b8	 mov	 DWORD PTR _int_alpha$[ebp], eax

; 1340 : 	int_alpha2 = ( *( ( int * ) &alpha2 ) - INTEGER_FLOAT_FACTOR );

  00460	8b 45 e4	 mov	 eax, DWORD PTR _alpha2$[ebp]
  00463	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00468	89 45 b0	 mov	 DWORD PTR _int_alpha2$[ebp], eax

; 1341 : 	int_red = ( *( ( int * ) &red ) - INTEGER_FLOAT_FACTOR );

  0046b	8b 45 e0	 mov	 eax, DWORD PTR _red$[ebp]
  0046e	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00473	89 45 a8	 mov	 DWORD PTR _int_red$[ebp], eax

; 1342 : 	int_red2 = ( *( ( int * ) &red2 ) - INTEGER_FLOAT_FACTOR );

  00476	8b 45 dc	 mov	 eax, DWORD PTR _red2$[ebp]
  00479	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0047e	89 45 a0	 mov	 DWORD PTR _int_red2$[ebp], eax

; 1343 : 	int_green = ( *( ( int * ) &green ) - INTEGER_FLOAT_FACTOR );

  00481	8b 45 d8	 mov	 eax, DWORD PTR _green$[ebp]
  00484	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00489	89 45 98	 mov	 DWORD PTR _int_green$[ebp], eax

; 1344 : 	int_green2 = ( *( ( int * ) &green2 ) - INTEGER_FLOAT_FACTOR );

  0048c	8b 45 d4	 mov	 eax, DWORD PTR _green2$[ebp]
  0048f	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00494	89 45 90	 mov	 DWORD PTR _int_green2$[ebp], eax

; 1345 : 	int_blue = ( *( ( int * ) &blue ) - INTEGER_FLOAT_FACTOR );

  00497	8b 45 d0	 mov	 eax, DWORD PTR _blue$[ebp]
  0049a	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0049f	89 45 88	 mov	 DWORD PTR _int_blue$[ebp], eax

; 1346 : 	int_blue2 = ( *( ( int * ) &blue2 ) - INTEGER_FLOAT_FACTOR );

  004a2	8b 45 cc	 mov	 eax, DWORD PTR _blue2$[ebp]
  004a5	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  004aa	89 45 80	 mov	 DWORD PTR _int_blue2$[ebp], eax

; 1347 : 
; 1348 : 	clip->fog = int_fog;

  004ad	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  004b0	8a 4d c8	 mov	 cl, BYTE PTR _int_fog$[ebp]
  004b3	88 48 2e	 mov	 BYTE PTR [eax+46], cl

; 1349 : 	clip->specular = int_specular;

  004b6	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  004b9	8a 4d c0	 mov	 cl, BYTE PTR _int_specular$[ebp]
  004bc	88 48 2d	 mov	 BYTE PTR [eax+45], cl

; 1350 : 	clip->alpha = int_alpha;

  004bf	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  004c2	8a 4d b8	 mov	 cl, BYTE PTR _int_alpha$[ebp]
  004c5	88 48 33	 mov	 BYTE PTR [eax+51], cl

; 1351 : 	clip->alpha2 = int_alpha2;

  004c8	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  004cb	8a 4d b0	 mov	 cl, BYTE PTR _int_alpha2$[ebp]
  004ce	88 48 37	 mov	 BYTE PTR [eax+55], cl

; 1352 : 	clip->red = int_red;

  004d1	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  004d4	8a 4d a8	 mov	 cl, BYTE PTR _int_red$[ebp]
  004d7	88 48 32	 mov	 BYTE PTR [eax+50], cl

; 1353 : 	clip->red2 = int_red2;

  004da	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  004dd	8a 4d a0	 mov	 cl, BYTE PTR _int_red2$[ebp]
  004e0	88 48 36	 mov	 BYTE PTR [eax+54], cl

; 1354 : 	clip->green = int_green;

  004e3	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  004e6	8a 4d 98	 mov	 cl, BYTE PTR _int_green$[ebp]
  004e9	88 48 31	 mov	 BYTE PTR [eax+49], cl

; 1355 : 	clip->green2 = int_green2;

  004ec	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  004ef	8a 4d 90	 mov	 cl, BYTE PTR _int_green2$[ebp]
  004f2	88 48 35	 mov	 BYTE PTR [eax+53], cl

; 1356 : 	clip->blue = int_blue;

  004f5	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  004f8	8a 4d 88	 mov	 cl, BYTE PTR _int_blue$[ebp]
  004fb	88 48 30	 mov	 BYTE PTR [eax+48], cl

; 1357 : 	clip->blue2 = int_blue2;

  004fe	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00501	8a 4d 80	 mov	 cl, BYTE PTR _int_blue2$[ebp]
  00504	88 48 34	 mov	 BYTE PTR [eax+52], cl

; 1358 : 
; 1359 : 	clip->u = point2->u + ( t * ( point2->u - point1->u ) );

  00507	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0050a	f3 0f 5a 40 18	 cvtss2sd xmm0, DWORD PTR [eax+24]
  0050f	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00512	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00515	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  0051a	f3 0f 5c 4a 18	 subss	 xmm1, DWORD PTR [edx+24]
  0051f	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00523	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00528	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0052c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00530	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00533	f3 0f 11 40 18	 movss	 DWORD PTR [eax+24], xmm0

; 1360 : 	clip->v = point2->v + ( t * ( point2->v - point1->v ) );

  00538	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0053b	f3 0f 5a 40 1c	 cvtss2sd xmm0, DWORD PTR [eax+28]
  00540	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00543	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00546	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  0054b	f3 0f 5c 4a 1c	 subss	 xmm1, DWORD PTR [edx+28]
  00550	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00554	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00559	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0055d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00561	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00564	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0

; 1361 : 	clip->u2 = point2->u2 + ( t * ( point2->u2 - point1->u2 ) );

  00569	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0056c	f3 0f 5a 40 20	 cvtss2sd xmm0, DWORD PTR [eax+32]
  00571	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00574	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00577	f3 0f 10 49 20	 movss	 xmm1, DWORD PTR [ecx+32]
  0057c	f3 0f 5c 4a 20	 subss	 xmm1, DWORD PTR [edx+32]
  00581	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00585	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0058a	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0058e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00592	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00595	f3 0f 11 40 20	 movss	 DWORD PTR [eax+32], xmm0

; 1362 : 	clip->v2 = point2->v2 + ( t * ( point2->v2 - point1->v2 ) );

  0059a	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0059d	f3 0f 5a 40 24	 cvtss2sd xmm0, DWORD PTR [eax+36]
  005a2	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  005a5	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  005a8	f3 0f 10 49 24	 movss	 xmm1, DWORD PTR [ecx+36]
  005ad	f3 0f 5c 4a 24	 subss	 xmm1, DWORD PTR [edx+36]
  005b2	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  005b6	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  005bb	f2 0f 58 c1	 addsd	 xmm0, xmm1
  005bf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005c3	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  005c6	f3 0f 11 40 24	 movss	 DWORD PTR [eax+36], xmm0

; 1363 : 
; 1364 : 	clip->j = active_3d_environment->y_origin;

  005cb	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  005ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  005d4	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  005d7	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 1365 : 
; 1366 : 	clip->i = ( clip->x * clip->q );

  005da	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  005dd	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  005e0	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  005e4	f3 0f 59 41 0c	 mulss	 xmm0, DWORD PTR [ecx+12]
  005e9	8b 55 f4	 mov	 edx, DWORD PTR _clip$[ebp]
  005ec	f3 0f 11 42 10	 movss	 DWORD PTR [edx+16], xmm0

; 1367 : 
; 1368 : 	clip->j -= ( clip->y * clip->q );

  005f1	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  005f4	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  005f7	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  005fc	f3 0f 59 41 0c	 mulss	 xmm0, DWORD PTR [ecx+12]
  00601	8b 55 f4	 mov	 edx, DWORD PTR _clip$[ebp]
  00604	f3 0f 10 4a 14	 movss	 xmm1, DWORD PTR [edx+20]
  00609	f3 0f 5c c8	 subss	 xmm1, xmm0
  0060d	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00610	f3 0f 11 48 14	 movss	 DWORD PTR [eax+20], xmm1

; 1369 : 
; 1370 : 	clip->i += active_3d_environment->x_origin;

  00615	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00618	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0061e	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00623	f3 0f 58 41 10	 addss	 xmm0, DWORD PTR [ecx+16]
  00628	8b 55 f4	 mov	 edx, DWORD PTR _clip$[ebp]
  0062b	f3 0f 11 42 10	 movss	 DWORD PTR [edx+16], xmm0

; 1371 : 
; 1372 : 	clip->outcode = generate_3d_outcode ( clip->i, clip->j );

  00630	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00633	51		 push	 ecx
  00634	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00639	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063e	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  00641	51		 push	 ecx
  00642	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  00647	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0064c	e8 00 00 00 00	 call	 ?generate_3d_outcode@@YGHMM@Z ; generate_3d_outcode
  00651	8b 55 f4	 mov	 edx, DWORD PTR _clip$[ebp]
  00654	88 42 2c	 mov	 BYTE PTR [edx+44], al

; 1373 : 
; 1374 : #if REPORT_CLIP_STATISTICS
; 1375 : 
; 1376 : 	number_of_far_coordinates_inserted++;
; 1377 : 
; 1378 : #endif
; 1379 : }

  00657	5f		 pop	 edi
  00658	5e		 pop	 esi
  00659	5b		 pop	 ebx
  0065a	8b e5		 mov	 esp, ebp
  0065c	5d		 pop	 ebp
  0065d	c2 08 00	 ret	 8
?insert_z_far_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ENDP ; insert_z_far_dual_texture_coordinate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dclip.c
;	COMDAT ?insert_z_near_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z
_TEXT	SEGMENT
_int_dblue2$ = -132					; size = 4
_int_blue2$ = -128					; size = 4
_int_dblue$ = -124					; size = 4
_int_blue$ = -120					; size = 4
_int_dgreen2$ = -116					; size = 4
_int_green2$ = -112					; size = 4
_int_dgreen$ = -108					; size = 4
_int_green$ = -104					; size = 4
_int_dred2$ = -100					; size = 4
_int_red2$ = -96					; size = 4
_int_dred$ = -92					; size = 4
_int_red$ = -88						; size = 4
_int_dalpha2$ = -84					; size = 4
_int_alpha2$ = -80					; size = 4
_int_dalpha$ = -76					; size = 4
_int_alpha$ = -72					; size = 4
_int_dspecular$ = -68					; size = 4
_int_specular$ = -64					; size = 4
_int_dfog$ = -60					; size = 4
_int_fog$ = -56						; size = 4
_blue2$ = -52						; size = 4
_blue$ = -48						; size = 4
_green2$ = -44						; size = 4
_green$ = -40						; size = 4
_red2$ = -36						; size = 4
_red$ = -32						; size = 4
_alpha2$ = -28						; size = 4
_alpha$ = -24						; size = 4
_specular$ = -20					; size = 4
_fog$ = -16						; size = 4
_clip$ = -12						; size = 4
_t$ = -8						; size = 8
_point1$ = 8						; size = 4
_point2$ = 12						; size = 4
?insert_z_near_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z PROC ; insert_z_near_dual_texture_coordinate, COMDAT

; 1050 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1051 : 
; 1052 : 	double
; 1053 : 		t;
; 1054 : 
; 1055 : 	vertex
; 1056 : 		*clip;
; 1057 : 
; 1058 : 	float
; 1059 : 		fog,
; 1060 : 		specular,
; 1061 : 		alpha,
; 1062 : 		alpha2,
; 1063 : 		red,
; 1064 : 		red2,
; 1065 : 		green,
; 1066 : 		green2,
; 1067 : 		blue,
; 1068 : 		blue2;
; 1069 : 
; 1070 : 	int
; 1071 : 		int_fog,
; 1072 : 		int_dfog,
; 1073 : 		int_specular,
; 1074 : 		int_dspecular,
; 1075 : 		int_alpha,
; 1076 : 		int_dalpha,
; 1077 : 		int_alpha2,
; 1078 : 		int_dalpha2,
; 1079 : 		int_red,
; 1080 : 		int_dred,
; 1081 : 		int_red2,
; 1082 : 		int_dred2,
; 1083 : 		int_green,
; 1084 : 		int_dgreen,
; 1085 : 		int_green2,
; 1086 : 		int_dgreen2,
; 1087 : 		int_blue,
; 1088 : 		int_dblue,
; 1089 : 		int_blue2,
; 1090 : 		int_dblue2;
; 1091 : 
; 1092 : 	ASSERT ( clip_3d_coord < MAX_3D_CLIP_COORDINATES );

  0000c	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?clip_3d_coord@@3HA, 16 ; clip_3d_coord, 00000010H
  00013	7c 18		 jl	 SHORT $LN2@insert_z_n
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??insert_z_near_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z@4JA
  0001a	83 c0 2a	 add	 eax, 42			; 0000002aH
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@JADBFHMD@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@insert_z_n:

; 1093 : 
; 1094 : 	t = ( ( clip_hither - point2->z ) / ( point2->z - point1->z ) );

  0002d	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?clip_hither@@3MA
  00038	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  0003d	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00040	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00043	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00048	f3 0f 5c 4a 08	 subss	 xmm1, DWORD PTR [edx+8]
  0004d	f3 0f 5e c1	 divss	 xmm0, xmm1
  00051	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00055	f2 0f 11 45 f8	 movsd	 QWORD PTR _t$[ebp], xmm0

; 1095 : 
; 1096 : 	clip = &clip_3d_crds[clip_3d_coord];

  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0005f	c1 e0 06	 shl	 eax, 6
  00062	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  00067	89 45 f4	 mov	 DWORD PTR _clip$[ebp], eax

; 1097 : 
; 1098 : 	clip_3d_coord++;

  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0006f	83 c0 01	 add	 eax, 1
  00072	a3 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, eax ; clip_3d_coord

; 1099 : 
; 1100 : 	*( ( int * ) &clip->z ) = *( ( int * ) &clip_hither );

  00077	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0007a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_hither@@3MA
  00080	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1101 : 	*( ( int * ) &clip->q ) = *( ( int * ) &clip_hither_reciprocal );

  00083	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00086	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_hither_reciprocal@@3MA
  0008c	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 1102 : 
; 1103 : 	int_fog = point2->fog;

  0008f	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00092	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  00096	89 4d c8	 mov	 DWORD PTR _int_fog$[ebp], ecx

; 1104 : 	int_dfog = int_fog - ( int ) point1->fog;

  00099	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0009c	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  000a0	8b 55 c8	 mov	 edx, DWORD PTR _int_fog$[ebp]
  000a3	2b d1		 sub	 edx, ecx
  000a5	89 55 c4	 mov	 DWORD PTR _int_dfog$[ebp], edx

; 1105 : 
; 1106 : 	int_specular = point2->specular;

  000a8	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000ab	0f b6 48 2d	 movzx	 ecx, BYTE PTR [eax+45]
  000af	89 4d c0	 mov	 DWORD PTR _int_specular$[ebp], ecx

; 1107 : 	int_dspecular = int_specular - ( int ) point1->specular;

  000b2	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  000b5	0f b6 48 2d	 movzx	 ecx, BYTE PTR [eax+45]
  000b9	8b 55 c0	 mov	 edx, DWORD PTR _int_specular$[ebp]
  000bc	2b d1		 sub	 edx, ecx
  000be	89 55 bc	 mov	 DWORD PTR _int_dspecular$[ebp], edx

; 1108 : 
; 1109 : 	int_alpha = point2->alpha;

  000c1	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000c4	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  000c8	89 4d b8	 mov	 DWORD PTR _int_alpha$[ebp], ecx

; 1110 : 	int_dalpha = int_alpha - ( int ) point1->alpha;

  000cb	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  000ce	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  000d2	8b 55 b8	 mov	 edx, DWORD PTR _int_alpha$[ebp]
  000d5	2b d1		 sub	 edx, ecx
  000d7	89 55 b4	 mov	 DWORD PTR _int_dalpha$[ebp], edx

; 1111 : 	int_alpha2 = point2->alpha2;

  000da	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000dd	0f b6 48 37	 movzx	 ecx, BYTE PTR [eax+55]
  000e1	89 4d b0	 mov	 DWORD PTR _int_alpha2$[ebp], ecx

; 1112 : 	int_dalpha2 = int_alpha2 - ( int ) point1->alpha2;

  000e4	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  000e7	0f b6 48 37	 movzx	 ecx, BYTE PTR [eax+55]
  000eb	8b 55 b0	 mov	 edx, DWORD PTR _int_alpha2$[ebp]
  000ee	2b d1		 sub	 edx, ecx
  000f0	89 55 ac	 mov	 DWORD PTR _int_dalpha2$[ebp], edx

; 1113 : 
; 1114 : 	int_red = point2->red;

  000f3	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000f6	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  000fa	89 4d a8	 mov	 DWORD PTR _int_red$[ebp], ecx

; 1115 : 	int_dred = int_red - ( int ) point1->red;

  000fd	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00100	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  00104	8b 55 a8	 mov	 edx, DWORD PTR _int_red$[ebp]
  00107	2b d1		 sub	 edx, ecx
  00109	89 55 a4	 mov	 DWORD PTR _int_dred$[ebp], edx

; 1116 : 	int_red2 = point2->red2;

  0010c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0010f	0f b6 48 36	 movzx	 ecx, BYTE PTR [eax+54]
  00113	89 4d a0	 mov	 DWORD PTR _int_red2$[ebp], ecx

; 1117 : 	int_dred2 = int_red2 - ( int ) point1->red2;

  00116	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00119	0f b6 48 36	 movzx	 ecx, BYTE PTR [eax+54]
  0011d	8b 55 a0	 mov	 edx, DWORD PTR _int_red2$[ebp]
  00120	2b d1		 sub	 edx, ecx
  00122	89 55 9c	 mov	 DWORD PTR _int_dred2$[ebp], edx

; 1118 : 
; 1119 : 	int_green = point2->green;

  00125	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00128	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  0012c	89 4d 98	 mov	 DWORD PTR _int_green$[ebp], ecx

; 1120 : 	int_dgreen = int_green - ( int ) point1->green;

  0012f	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00132	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  00136	8b 55 98	 mov	 edx, DWORD PTR _int_green$[ebp]
  00139	2b d1		 sub	 edx, ecx
  0013b	89 55 94	 mov	 DWORD PTR _int_dgreen$[ebp], edx

; 1121 : 	int_green2 = point2->green2;

  0013e	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00141	0f b6 48 35	 movzx	 ecx, BYTE PTR [eax+53]
  00145	89 4d 90	 mov	 DWORD PTR _int_green2$[ebp], ecx

; 1122 : 	int_dgreen2 = int_green2 - ( int ) point1->green2;

  00148	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0014b	0f b6 48 35	 movzx	 ecx, BYTE PTR [eax+53]
  0014f	8b 55 90	 mov	 edx, DWORD PTR _int_green2$[ebp]
  00152	2b d1		 sub	 edx, ecx
  00154	89 55 8c	 mov	 DWORD PTR _int_dgreen2$[ebp], edx

; 1123 : 
; 1124 : 	int_blue = point2->blue;

  00157	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0015a	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  0015e	89 4d 88	 mov	 DWORD PTR _int_blue$[ebp], ecx

; 1125 : 	int_dblue = int_blue - ( int ) point1->blue;

  00161	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00164	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  00168	8b 55 88	 mov	 edx, DWORD PTR _int_blue$[ebp]
  0016b	2b d1		 sub	 edx, ecx
  0016d	89 55 84	 mov	 DWORD PTR _int_dblue$[ebp], edx

; 1126 : 	int_blue2 = point2->blue2;

  00170	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00173	0f b6 48 34	 movzx	 ecx, BYTE PTR [eax+52]
  00177	89 4d 80	 mov	 DWORD PTR _int_blue2$[ebp], ecx

; 1127 : 	int_dblue2 = int_blue2 - ( int ) point1->blue2;

  0017a	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0017d	0f b6 48 34	 movzx	 ecx, BYTE PTR [eax+52]
  00181	8b 55 80	 mov	 edx, DWORD PTR _int_blue2$[ebp]
  00184	2b d1		 sub	 edx, ecx
  00186	89 95 7c ff ff
	ff		 mov	 DWORD PTR _int_dblue2$[ebp], edx

; 1128 : 
; 1129 : 	if ( !clip_point )

  0018c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  00193	75 14		 jne	 SHORT $LN3@insert_z_n

; 1130 : 	{
; 1131 : 
; 1132 : 		clip_list = clip;

  00195	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00198	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 1133 : 
; 1134 : 		clip_point = clip_list;

  0019d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  001a2	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 1135 : 	}
; 1136 : 	else

  001a7	eb 19		 jmp	 SHORT $LN4@insert_z_n
$LN3@insert_z_n:

; 1137 : 	{
; 1138 : 
; 1139 : 		clip_point->next_vertex	= clip;

  001a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001ae	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  001b1	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 1140 : 
; 1141 : 		clip_point = clip_point->next_vertex;

  001b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001b9	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  001bc	89 0d 00 00 00
	00		 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, ecx
$LN4@insert_z_n:

; 1142 : 	}
; 1143 : 
; 1144 : 	clip->x = point2->x + ( t * ( point2->x - point1->x ) );

  001c2	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  001c5	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  001c9	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  001cc	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  001cf	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  001d3	f3 0f 5c 0a	 subss	 xmm1, DWORD PTR [edx]
  001d7	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001db	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001e0	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001e4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001e8	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  001eb	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1145 : 	clip->y = point2->y + ( t * ( point2->y - point1->y ) );

  001ef	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  001f2	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  001f7	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  001fa	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  001fd	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  00202	f3 0f 5c 4a 04	 subss	 xmm1, DWORD PTR [edx+4]
  00207	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0020b	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00210	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00214	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00218	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0021b	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1146 : 
; 1147 : 	fog = ( float ) int_fog + ( t * ( float ) int_dfog );

  00220	f3 0f 2a 45 c8	 cvtsi2ss xmm0, DWORD PTR _int_fog$[ebp]
  00225	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00229	f3 0f 2a 4d c4	 cvtsi2ss xmm1, DWORD PTR _int_dfog$[ebp]
  0022e	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00232	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00237	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0023b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0023f	f3 0f 11 45 f0	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1148 : 	specular = ( float ) int_specular + ( t * ( float ) int_dspecular );

  00244	f3 0f 2a 45 c0	 cvtsi2ss xmm0, DWORD PTR _int_specular$[ebp]
  00249	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0024d	f3 0f 2a 4d bc	 cvtsi2ss xmm1, DWORD PTR _int_dspecular$[ebp]
  00252	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00256	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0025b	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0025f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00263	f3 0f 11 45 ec	 movss	 DWORD PTR _specular$[ebp], xmm0

; 1149 : 	alpha = ( float ) int_alpha + ( t * ( float ) int_dalpha );

  00268	f3 0f 2a 45 b8	 cvtsi2ss xmm0, DWORD PTR _int_alpha$[ebp]
  0026d	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00271	f3 0f 2a 4d b4	 cvtsi2ss xmm1, DWORD PTR _int_dalpha$[ebp]
  00276	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0027a	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0027f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00283	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00287	f3 0f 11 45 e8	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1150 : 	alpha2 = ( float ) int_alpha2 + ( t * ( float ) int_dalpha2 );

  0028c	f3 0f 2a 45 b0	 cvtsi2ss xmm0, DWORD PTR _int_alpha2$[ebp]
  00291	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00295	f3 0f 2a 4d ac	 cvtsi2ss xmm1, DWORD PTR _int_dalpha2$[ebp]
  0029a	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0029e	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002a3	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002a7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ab	f3 0f 11 45 e4	 movss	 DWORD PTR _alpha2$[ebp], xmm0

; 1151 : 	red = ( float ) int_red + ( t * ( float ) int_dred );

  002b0	f3 0f 2a 45 a8	 cvtsi2ss xmm0, DWORD PTR _int_red$[ebp]
  002b5	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002b9	f3 0f 2a 4d a4	 cvtsi2ss xmm1, DWORD PTR _int_dred$[ebp]
  002be	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002c2	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002c7	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002cb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002cf	f3 0f 11 45 e0	 movss	 DWORD PTR _red$[ebp], xmm0

; 1152 : 	red2 = ( float ) int_red2 + ( t * ( float ) int_dred2 );

  002d4	f3 0f 2a 45 a0	 cvtsi2ss xmm0, DWORD PTR _int_red2$[ebp]
  002d9	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002dd	f3 0f 2a 4d 9c	 cvtsi2ss xmm1, DWORD PTR _int_dred2$[ebp]
  002e2	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  002e6	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  002eb	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002ef	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002f3	f3 0f 11 45 dc	 movss	 DWORD PTR _red2$[ebp], xmm0

; 1153 : 	green = ( float ) int_green + ( t * ( float ) int_dgreen );

  002f8	f3 0f 2a 45 98	 cvtsi2ss xmm0, DWORD PTR _int_green$[ebp]
  002fd	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00301	f3 0f 2a 4d 94	 cvtsi2ss xmm1, DWORD PTR _int_dgreen$[ebp]
  00306	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0030a	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0030f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00313	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00317	f3 0f 11 45 d8	 movss	 DWORD PTR _green$[ebp], xmm0

; 1154 : 	green2 = ( float ) int_green2 + ( t * ( float ) int_dgreen2 );

  0031c	f3 0f 2a 45 90	 cvtsi2ss xmm0, DWORD PTR _int_green2$[ebp]
  00321	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00325	f3 0f 2a 4d 8c	 cvtsi2ss xmm1, DWORD PTR _int_dgreen2$[ebp]
  0032a	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0032e	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00333	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00337	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0033b	f3 0f 11 45 d4	 movss	 DWORD PTR _green2$[ebp], xmm0

; 1155 : 	blue = ( float ) int_blue + ( t * ( float ) int_dblue );

  00340	f3 0f 2a 45 88	 cvtsi2ss xmm0, DWORD PTR _int_blue$[ebp]
  00345	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00349	f3 0f 2a 4d 84	 cvtsi2ss xmm1, DWORD PTR _int_dblue$[ebp]
  0034e	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00352	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00357	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0035b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0035f	f3 0f 11 45 d0	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1156 : 	blue2 = ( float ) int_blue2 + ( t * ( float ) int_dblue2 );

  00364	f3 0f 2a 45 80	 cvtsi2ss xmm0, DWORD PTR _int_blue2$[ebp]
  00369	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0036d	f3 0f 2a 8d 7c
	ff ff ff	 cvtsi2ss xmm1, DWORD PTR _int_dblue2$[ebp]
  00375	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00379	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0037e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00382	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00386	f3 0f 11 45 cc	 movss	 DWORD PTR _blue2$[ebp], xmm0

; 1157 : 
; 1158 : 	fog += FLOAT_FLOAT_FACTOR;

  0038b	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _fog$[ebp]
  00390	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00398	f3 0f 11 45 f0	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1159 : 	specular += FLOAT_FLOAT_FACTOR;

  0039d	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _specular$[ebp]
  003a2	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003aa	f3 0f 11 45 ec	 movss	 DWORD PTR _specular$[ebp], xmm0

; 1160 : 	alpha += FLOAT_FLOAT_FACTOR;

  003af	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _alpha$[ebp]
  003b4	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003bc	f3 0f 11 45 e8	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1161 : 	alpha2 += FLOAT_FLOAT_FACTOR;

  003c1	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _alpha2$[ebp]
  003c6	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003ce	f3 0f 11 45 e4	 movss	 DWORD PTR _alpha2$[ebp], xmm0

; 1162 : 	red += FLOAT_FLOAT_FACTOR;

  003d3	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _red$[ebp]
  003d8	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003e0	f3 0f 11 45 e0	 movss	 DWORD PTR _red$[ebp], xmm0

; 1163 : 	red2 += FLOAT_FLOAT_FACTOR;

  003e5	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _red2$[ebp]
  003ea	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  003f2	f3 0f 11 45 dc	 movss	 DWORD PTR _red2$[ebp], xmm0

; 1164 : 	green += FLOAT_FLOAT_FACTOR;

  003f7	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _green$[ebp]
  003fc	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00404	f3 0f 11 45 d8	 movss	 DWORD PTR _green$[ebp], xmm0

; 1165 : 	green2 += FLOAT_FLOAT_FACTOR;

  00409	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _green2$[ebp]
  0040e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00416	f3 0f 11 45 d4	 movss	 DWORD PTR _green2$[ebp], xmm0

; 1166 : 	blue += FLOAT_FLOAT_FACTOR;

  0041b	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _blue$[ebp]
  00420	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00428	f3 0f 11 45 d0	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1167 : 	blue2 += FLOAT_FLOAT_FACTOR;

  0042d	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _blue2$[ebp]
  00432	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0043a	f3 0f 11 45 cc	 movss	 DWORD PTR _blue2$[ebp], xmm0

; 1168 : 
; 1169 : 	int_fog = ( *( ( int * ) &fog ) - INTEGER_FLOAT_FACTOR );

  0043f	8b 45 f0	 mov	 eax, DWORD PTR _fog$[ebp]
  00442	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00447	89 45 c8	 mov	 DWORD PTR _int_fog$[ebp], eax

; 1170 : 	int_specular = ( *( ( int * ) &specular ) - INTEGER_FLOAT_FACTOR );

  0044a	8b 45 ec	 mov	 eax, DWORD PTR _specular$[ebp]
  0044d	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00452	89 45 c0	 mov	 DWORD PTR _int_specular$[ebp], eax

; 1171 : 	int_alpha = ( *( ( int * ) &alpha ) - INTEGER_FLOAT_FACTOR );

  00455	8b 45 e8	 mov	 eax, DWORD PTR _alpha$[ebp]
  00458	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0045d	89 45 b8	 mov	 DWORD PTR _int_alpha$[ebp], eax

; 1172 : 	int_alpha2 = ( *( ( int * ) &alpha2 ) - INTEGER_FLOAT_FACTOR );

  00460	8b 45 e4	 mov	 eax, DWORD PTR _alpha2$[ebp]
  00463	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00468	89 45 b0	 mov	 DWORD PTR _int_alpha2$[ebp], eax

; 1173 : 	int_red = ( *( ( int * ) &red ) - INTEGER_FLOAT_FACTOR );

  0046b	8b 45 e0	 mov	 eax, DWORD PTR _red$[ebp]
  0046e	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00473	89 45 a8	 mov	 DWORD PTR _int_red$[ebp], eax

; 1174 : 	int_red2 = ( *( ( int * ) &red2 ) - INTEGER_FLOAT_FACTOR );

  00476	8b 45 dc	 mov	 eax, DWORD PTR _red2$[ebp]
  00479	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0047e	89 45 a0	 mov	 DWORD PTR _int_red2$[ebp], eax

; 1175 : 	int_green = ( *( ( int * ) &green ) - INTEGER_FLOAT_FACTOR );

  00481	8b 45 d8	 mov	 eax, DWORD PTR _green$[ebp]
  00484	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00489	89 45 98	 mov	 DWORD PTR _int_green$[ebp], eax

; 1176 : 	int_green2 = ( *( ( int * ) &green2 ) - INTEGER_FLOAT_FACTOR );

  0048c	8b 45 d4	 mov	 eax, DWORD PTR _green2$[ebp]
  0048f	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00494	89 45 90	 mov	 DWORD PTR _int_green2$[ebp], eax

; 1177 : 	int_blue = ( *( ( int * ) &blue ) - INTEGER_FLOAT_FACTOR );

  00497	8b 45 d0	 mov	 eax, DWORD PTR _blue$[ebp]
  0049a	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0049f	89 45 88	 mov	 DWORD PTR _int_blue$[ebp], eax

; 1178 : 	int_blue2 = ( *( ( int * ) &blue2 ) - INTEGER_FLOAT_FACTOR );

  004a2	8b 45 cc	 mov	 eax, DWORD PTR _blue2$[ebp]
  004a5	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  004aa	89 45 80	 mov	 DWORD PTR _int_blue2$[ebp], eax

; 1179 : 
; 1180 : 	clip->fog = int_fog;

  004ad	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  004b0	8a 4d c8	 mov	 cl, BYTE PTR _int_fog$[ebp]
  004b3	88 48 2e	 mov	 BYTE PTR [eax+46], cl

; 1181 : 	clip->specular = int_specular;

  004b6	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  004b9	8a 4d c0	 mov	 cl, BYTE PTR _int_specular$[ebp]
  004bc	88 48 2d	 mov	 BYTE PTR [eax+45], cl

; 1182 : 	clip->alpha = int_alpha;

  004bf	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  004c2	8a 4d b8	 mov	 cl, BYTE PTR _int_alpha$[ebp]
  004c5	88 48 33	 mov	 BYTE PTR [eax+51], cl

; 1183 : 	clip->alpha2 = int_alpha2;

  004c8	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  004cb	8a 4d b0	 mov	 cl, BYTE PTR _int_alpha2$[ebp]
  004ce	88 48 37	 mov	 BYTE PTR [eax+55], cl

; 1184 : 	clip->red = int_red;

  004d1	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  004d4	8a 4d a8	 mov	 cl, BYTE PTR _int_red$[ebp]
  004d7	88 48 32	 mov	 BYTE PTR [eax+50], cl

; 1185 : 	clip->red2 = int_red2;

  004da	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  004dd	8a 4d a0	 mov	 cl, BYTE PTR _int_red2$[ebp]
  004e0	88 48 36	 mov	 BYTE PTR [eax+54], cl

; 1186 : 	clip->green = int_green;

  004e3	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  004e6	8a 4d 98	 mov	 cl, BYTE PTR _int_green$[ebp]
  004e9	88 48 31	 mov	 BYTE PTR [eax+49], cl

; 1187 : 	clip->green2 = int_green2;

  004ec	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  004ef	8a 4d 90	 mov	 cl, BYTE PTR _int_green2$[ebp]
  004f2	88 48 35	 mov	 BYTE PTR [eax+53], cl

; 1188 : 	clip->blue = int_blue;

  004f5	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  004f8	8a 4d 88	 mov	 cl, BYTE PTR _int_blue$[ebp]
  004fb	88 48 30	 mov	 BYTE PTR [eax+48], cl

; 1189 : 	clip->blue2 = int_blue2;

  004fe	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00501	8a 4d 80	 mov	 cl, BYTE PTR _int_blue2$[ebp]
  00504	88 48 34	 mov	 BYTE PTR [eax+52], cl

; 1190 : 
; 1191 : 	clip->u = point2->u + ( t * ( point2->u - point1->u ) );

  00507	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0050a	f3 0f 5a 40 18	 cvtss2sd xmm0, DWORD PTR [eax+24]
  0050f	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00512	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00515	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  0051a	f3 0f 5c 4a 18	 subss	 xmm1, DWORD PTR [edx+24]
  0051f	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00523	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00528	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0052c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00530	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00533	f3 0f 11 40 18	 movss	 DWORD PTR [eax+24], xmm0

; 1192 : 	clip->v = point2->v + ( t * ( point2->v - point1->v ) );

  00538	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0053b	f3 0f 5a 40 1c	 cvtss2sd xmm0, DWORD PTR [eax+28]
  00540	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00543	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00546	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  0054b	f3 0f 5c 4a 1c	 subss	 xmm1, DWORD PTR [edx+28]
  00550	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00554	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00559	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0055d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00561	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00564	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0

; 1193 : 	clip->u2 = point2->u2 + ( t * ( point2->u2 - point1->u2 ) );

  00569	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0056c	f3 0f 5a 40 20	 cvtss2sd xmm0, DWORD PTR [eax+32]
  00571	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00574	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00577	f3 0f 10 49 20	 movss	 xmm1, DWORD PTR [ecx+32]
  0057c	f3 0f 5c 4a 20	 subss	 xmm1, DWORD PTR [edx+32]
  00581	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00585	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0058a	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0058e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00592	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00595	f3 0f 11 40 20	 movss	 DWORD PTR [eax+32], xmm0

; 1194 : 	clip->v2 = point2->v2 + ( t * ( point2->v2 - point1->v2 ) );

  0059a	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0059d	f3 0f 5a 40 24	 cvtss2sd xmm0, DWORD PTR [eax+36]
  005a2	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  005a5	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  005a8	f3 0f 10 49 24	 movss	 xmm1, DWORD PTR [ecx+36]
  005ad	f3 0f 5c 4a 24	 subss	 xmm1, DWORD PTR [edx+36]
  005b2	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  005b6	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  005bb	f2 0f 58 c1	 addsd	 xmm0, xmm1
  005bf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005c3	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  005c6	f3 0f 11 40 24	 movss	 DWORD PTR [eax+36], xmm0

; 1195 : 
; 1196 : 	clip->j = active_3d_environment->y_origin;

  005cb	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  005ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  005d4	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  005d7	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 1197 : 
; 1198 : 	clip->i = ( clip->x * clip->q );

  005da	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  005dd	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  005e0	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  005e4	f3 0f 59 41 0c	 mulss	 xmm0, DWORD PTR [ecx+12]
  005e9	8b 55 f4	 mov	 edx, DWORD PTR _clip$[ebp]
  005ec	f3 0f 11 42 10	 movss	 DWORD PTR [edx+16], xmm0

; 1199 : 
; 1200 : 	clip->j -= ( clip->y * clip->q );

  005f1	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  005f4	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  005f7	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  005fc	f3 0f 59 41 0c	 mulss	 xmm0, DWORD PTR [ecx+12]
  00601	8b 55 f4	 mov	 edx, DWORD PTR _clip$[ebp]
  00604	f3 0f 10 4a 14	 movss	 xmm1, DWORD PTR [edx+20]
  00609	f3 0f 5c c8	 subss	 xmm1, xmm0
  0060d	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00610	f3 0f 11 48 14	 movss	 DWORD PTR [eax+20], xmm1

; 1201 : 
; 1202 : 	clip->i += active_3d_environment->x_origin;

  00615	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00618	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0061e	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00623	f3 0f 58 41 10	 addss	 xmm0, DWORD PTR [ecx+16]
  00628	8b 55 f4	 mov	 edx, DWORD PTR _clip$[ebp]
  0062b	f3 0f 11 42 10	 movss	 DWORD PTR [edx+16], xmm0

; 1203 : 
; 1204 : 	clip->outcode = generate_3d_outcode ( clip->i, clip->j );

  00630	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00633	51		 push	 ecx
  00634	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00639	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063e	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  00641	51		 push	 ecx
  00642	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  00647	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0064c	e8 00 00 00 00	 call	 ?generate_3d_outcode@@YGHMM@Z ; generate_3d_outcode
  00651	8b 55 f4	 mov	 edx, DWORD PTR _clip$[ebp]
  00654	88 42 2c	 mov	 BYTE PTR [edx+44], al

; 1205 : 
; 1206 : #if REPORT_CLIP_STATISTICS
; 1207 : 
; 1208 : 	number_of_near_coordinates_inserted++;
; 1209 : 
; 1210 : #endif
; 1211 : }

  00657	5f		 pop	 edi
  00658	5e		 pop	 esi
  00659	5b		 pop	 ebx
  0065a	8b e5		 mov	 esp, ebp
  0065c	5d		 pop	 ebp
  0065d	c2 08 00	 ret	 8
?insert_z_near_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ENDP ; insert_z_near_dual_texture_coordinate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dclip.c
;	COMDAT ?insert_horizon_coordinate@@YGXPAUVERTEX@@0@Z
_TEXT	SEGMENT
_int_value$ = -28					; size = 4
_value2$ = -24						; size = 4
_value1$ = -20						; size = 4
_value$ = -16						; size = 4
_clip$ = -12						; size = 4
_t$ = -8						; size = 8
_point1$ = 8						; size = 4
_point2$ = 12						; size = 4
?insert_horizon_coordinate@@YGXPAUVERTEX@@0@Z PROC	; insert_horizon_coordinate, COMDAT

; 1386 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1387 : 
; 1388 : 	double
; 1389 : 		t;
; 1390 : 
; 1391 : 	vertex
; 1392 : 		*clip;
; 1393 : 
; 1394 : 	float
; 1395 : 		value,
; 1396 : 		value1,
; 1397 : 		value2;
; 1398 : 
; 1399 : 	int
; 1400 : 		int_value;
; 1401 : 
; 1402 : 	ASSERT ( clip_3d_coord < MAX_3D_CLIP_COORDINATES );

  00009	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?clip_3d_coord@@3HA, 16 ; clip_3d_coord, 00000010H
  00010	7c 18		 jl	 SHORT $LN2@insert_hor
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??insert_horizon_coordinate@@YGXPAUVERTEX@@0@Z@4JA
  00017	83 c0 10	 add	 eax, 16			; 00000010H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@JADBFHMD@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@insert_hor:

; 1403 : 
; 1404 : 	t = ( ( 0 - point2->y ) / ( point2->y - point1->y ) );

  0002a	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0002d	0f 57 c0	 xorps	 xmm0, xmm0
  00030	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  00035	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00038	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  0003b	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  00040	f3 0f 5c 4a 04	 subss	 xmm1, DWORD PTR [edx+4]
  00045	f3 0f 5e c1	 divss	 xmm0, xmm1
  00049	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0004d	f2 0f 11 45 f8	 movsd	 QWORD PTR _t$[ebp], xmm0

; 1405 : 
; 1406 : 	clip = &clip_3d_crds[clip_3d_coord];

  00052	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  00057	c1 e0 06	 shl	 eax, 6
  0005a	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  0005f	89 45 f4	 mov	 DWORD PTR _clip$[ebp], eax

; 1407 : 
; 1408 : 	if ( !clip_point )

  00062	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  00069	75 14		 jne	 SHORT $LN3@insert_hor

; 1409 : 	{
; 1410 : 
; 1411 : 		clip_list = clip;

  0006b	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0006e	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 1412 : 
; 1413 : 		clip_point = clip_list;

  00073	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  00078	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 1414 : 	}
; 1415 : 	else

  0007d	eb 19		 jmp	 SHORT $LN4@insert_hor
$LN3@insert_hor:

; 1416 : 	{
; 1417 : 
; 1418 : 		clip_point->next_vertex	= clip;

  0007f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00084	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  00087	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 1419 : 
; 1420 : 		clip_point = clip_point->next_vertex;

  0008a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  0008f	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00092	89 0d 00 00 00
	00		 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, ecx
$LN4@insert_hor:

; 1421 : 	}
; 1422 : 
; 1423 : 	clip_3d_coord++;

  00098	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0009d	83 c0 01	 add	 eax, 1
  000a0	a3 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, eax ; clip_3d_coord

; 1424 : 
; 1425 : 	clip->x = point2->x + ( t * ( point2->x - point1->x ) );

  000a5	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000a8	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  000ac	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  000af	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  000b2	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  000b6	f3 0f 5c 0a	 subss	 xmm1, DWORD PTR [edx]
  000ba	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  000be	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  000c3	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000c7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000cb	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  000ce	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1426 : 
; 1427 : 	clip->y = 0;

  000d2	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  000d5	0f 57 c0	 xorps	 xmm0, xmm0
  000d8	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1428 : 
; 1429 : 	clip->z = point2->z + ( t * ( point2->z - point1->z ) );

  000dd	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000e0	f3 0f 5a 40 08	 cvtss2sd xmm0, DWORD PTR [eax+8]
  000e5	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  000e8	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  000eb	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  000f0	f3 0f 5c 4a 08	 subss	 xmm1, DWORD PTR [edx+8]
  000f5	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  000f9	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  000fe	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00102	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00106	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00109	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 1430 : 
; 1431 : 	value1 = point1->red;

  0010e	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00111	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  00115	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00119	f3 0f 11 45 ec	 movss	 DWORD PTR _value1$[ebp], xmm0

; 1432 : 	value2 = point2->red;

  0011e	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00121	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  00125	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00129	f3 0f 11 45 e8	 movss	 DWORD PTR _value2$[ebp], xmm0

; 1433 : 	value = value2 + ( t * ( value2 - value1 ) );

  0012e	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _value2$[ebp]
  00133	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _value2$[ebp]
  00138	f3 0f 5c 4d ec	 subss	 xmm1, DWORD PTR _value1$[ebp]
  0013d	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00141	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00146	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0014a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0014e	f3 0f 11 45 f0	 movss	 DWORD PTR _value$[ebp], xmm0

; 1434 : 	asm_convert_float_to_int ( value, &int_value );

  00153	8d 45 e4	 lea	 eax, DWORD PTR _int_value$[ebp]
  00156	50		 push	 eax
  00157	51		 push	 ecx
  00158	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _value$[ebp]
  0015d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00162	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1435 : 	clip->red = int_value;

  00167	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0016a	8a 4d e4	 mov	 cl, BYTE PTR _int_value$[ebp]
  0016d	88 48 32	 mov	 BYTE PTR [eax+50], cl

; 1436 : 
; 1437 : 	value1 = point1->green;

  00170	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00173	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  00177	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0017b	f3 0f 11 45 ec	 movss	 DWORD PTR _value1$[ebp], xmm0

; 1438 : 	value2 = point2->green;

  00180	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00183	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  00187	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0018b	f3 0f 11 45 e8	 movss	 DWORD PTR _value2$[ebp], xmm0

; 1439 : 	value = value2 + ( t * ( value2 - value1 ) );

  00190	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _value2$[ebp]
  00195	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _value2$[ebp]
  0019a	f3 0f 5c 4d ec	 subss	 xmm1, DWORD PTR _value1$[ebp]
  0019f	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001a3	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001a8	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001ac	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001b0	f3 0f 11 45 f0	 movss	 DWORD PTR _value$[ebp], xmm0

; 1440 : 	asm_convert_float_to_int ( value, &int_value );

  001b5	8d 45 e4	 lea	 eax, DWORD PTR _int_value$[ebp]
  001b8	50		 push	 eax
  001b9	51		 push	 ecx
  001ba	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _value$[ebp]
  001bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c4	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1441 : 	clip->green = int_value;

  001c9	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  001cc	8a 4d e4	 mov	 cl, BYTE PTR _int_value$[ebp]
  001cf	88 48 31	 mov	 BYTE PTR [eax+49], cl

; 1442 : 
; 1443 : 	value1 = point1->blue;

  001d2	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  001d5	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  001d9	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  001dd	f3 0f 11 45 ec	 movss	 DWORD PTR _value1$[ebp], xmm0

; 1444 : 	value2 = point2->blue;

  001e2	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  001e5	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  001e9	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  001ed	f3 0f 11 45 e8	 movss	 DWORD PTR _value2$[ebp], xmm0

; 1445 : 	value = value2 + ( t * ( value2 - value1 ) );

  001f2	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _value2$[ebp]
  001f7	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _value2$[ebp]
  001fc	f3 0f 5c 4d ec	 subss	 xmm1, DWORD PTR _value1$[ebp]
  00201	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00205	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0020a	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0020e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00212	f3 0f 11 45 f0	 movss	 DWORD PTR _value$[ebp], xmm0

; 1446 : 	asm_convert_float_to_int ( value, &int_value );

  00217	8d 45 e4	 lea	 eax, DWORD PTR _int_value$[ebp]
  0021a	50		 push	 eax
  0021b	51		 push	 ecx
  0021c	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _value$[ebp]
  00221	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00226	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1447 : 	clip->blue = int_value;

  0022b	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0022e	8a 4d e4	 mov	 cl, BYTE PTR _int_value$[ebp]
  00231	88 48 30	 mov	 BYTE PTR [eax+48], cl

; 1448 : 
; 1449 : 	clip->u = point2->u + ( t * ( point2->u - point1->u ) );

  00234	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00237	f3 0f 5a 40 18	 cvtss2sd xmm0, DWORD PTR [eax+24]
  0023c	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  0023f	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00242	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  00247	f3 0f 5c 4a 18	 subss	 xmm1, DWORD PTR [edx+24]
  0024c	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00250	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00255	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00259	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0025d	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00260	f3 0f 11 40 18	 movss	 DWORD PTR [eax+24], xmm0

; 1450 : 	clip->v = point2->v + ( t * ( point2->v - point1->v ) );

  00265	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00268	f3 0f 5a 40 1c	 cvtss2sd xmm0, DWORD PTR [eax+28]
  0026d	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00270	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00273	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  00278	f3 0f 5c 4a 1c	 subss	 xmm1, DWORD PTR [edx+28]
  0027d	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00281	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00286	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0028a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0028e	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00291	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0

; 1451 : }

  00296	5f		 pop	 edi
  00297	5e		 pop	 esi
  00298	5b		 pop	 ebx
  00299	8b e5		 mov	 esp, ebp
  0029b	5d		 pop	 ebp
  0029c	c2 08 00	 ret	 8
?insert_horizon_coordinate@@YGXPAUVERTEX@@0@Z ENDP	; insert_horizon_coordinate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dclip.c
;	COMDAT ?insert_z_near_coordinate@@YGXPAUVERTEX@@0@Z
_TEXT	SEGMENT
_int_dblue$ = -84					; size = 4
_int_blue$ = -80					; size = 4
_int_dgreen$ = -76					; size = 4
_int_green$ = -72					; size = 4
_int_dred$ = -68					; size = 4
_int_red$ = -64						; size = 4
_int_dspecular$ = -60					; size = 4
_int_specular$ = -56					; size = 4
_int_dfog$ = -52					; size = 4
_int_fog$ = -48						; size = 4
_int_dalpha$ = -44					; size = 4
_int_alpha$ = -40					; size = 4
_blue$ = -36						; size = 4
_green$ = -32						; size = 4
_red$ = -28						; size = 4
_specular$ = -24					; size = 4
_fog$ = -20						; size = 4
_alpha$ = -16						; size = 4
_clip$ = -12						; size = 4
_t$ = -8						; size = 8
_point1$ = 8						; size = 4
_point2$ = 12						; size = 4
?insert_z_near_coordinate@@YGXPAUVERTEX@@0@Z PROC	; insert_z_near_coordinate, COMDAT

; 790  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 791  : 
; 792  : 	double
; 793  : 		t;
; 794  : 
; 795  : 	vertex
; 796  : 		*clip;
; 797  : 
; 798  : 	float
; 799  : 		alpha,
; 800  : 		fog,
; 801  : 		specular,
; 802  : 		red,
; 803  : 		green,
; 804  : 		blue;
; 805  : 
; 806  : 	int
; 807  : 		int_alpha,
; 808  : 		int_dalpha,
; 809  : 		int_fog,
; 810  : 		int_dfog,
; 811  : 		int_specular,
; 812  : 		int_dspecular,
; 813  : 		int_red,
; 814  : 		int_dred,
; 815  : 		int_green,
; 816  : 		int_dgreen,
; 817  : 		int_blue,
; 818  : 		int_dblue;
; 819  : 
; 820  : 	ASSERT ( clip_3d_coord < MAX_3D_CLIP_COORDINATES );

  0000c	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?clip_3d_coord@@3HA, 16 ; clip_3d_coord, 00000010H
  00013	7c 18		 jl	 SHORT $LN2@insert_z_n
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??insert_z_near_coordinate@@YGXPAUVERTEX@@0@Z@4JA
  0001a	83 c0 1e	 add	 eax, 30			; 0000001eH
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@JADBFHMD@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@insert_z_n:

; 821  : 
; 822  : 	t = ( ( clip_hither - point2->z ) / ( point2->z - point1->z ) );

  0002d	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?clip_hither@@3MA
  00038	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  0003d	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00040	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00043	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00048	f3 0f 5c 4a 08	 subss	 xmm1, DWORD PTR [edx+8]
  0004d	f3 0f 5e c1	 divss	 xmm0, xmm1
  00051	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00055	f2 0f 11 45 f8	 movsd	 QWORD PTR _t$[ebp], xmm0

; 823  : 
; 824  : 	clip = &clip_3d_crds[clip_3d_coord];

  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0005f	c1 e0 06	 shl	 eax, 6
  00062	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  00067	89 45 f4	 mov	 DWORD PTR _clip$[ebp], eax

; 825  : 
; 826  : 	clip_3d_coord++;

  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0006f	83 c0 01	 add	 eax, 1
  00072	a3 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, eax ; clip_3d_coord

; 827  : 
; 828  : 	*( ( int * ) &clip->z ) = *( ( int * ) &clip_hither );

  00077	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0007a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_hither@@3MA
  00080	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 829  : 	*( ( int * ) &clip->q ) = *( ( int * ) &clip_hither_reciprocal );

  00083	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00086	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_hither_reciprocal@@3MA
  0008c	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 830  : 
; 831  : 	int_alpha = point2->alpha;

  0008f	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00092	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  00096	89 4d d8	 mov	 DWORD PTR _int_alpha$[ebp], ecx

; 832  : 	int_dalpha = int_alpha - ( int ) point1->alpha;

  00099	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0009c	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  000a0	8b 55 d8	 mov	 edx, DWORD PTR _int_alpha$[ebp]
  000a3	2b d1		 sub	 edx, ecx
  000a5	89 55 d4	 mov	 DWORD PTR _int_dalpha$[ebp], edx

; 833  : 
; 834  : 	int_fog = point2->fog;

  000a8	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000ab	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  000af	89 4d d0	 mov	 DWORD PTR _int_fog$[ebp], ecx

; 835  : 	int_dfog = int_fog - ( int ) point1->fog;

  000b2	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  000b5	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  000b9	8b 55 d0	 mov	 edx, DWORD PTR _int_fog$[ebp]
  000bc	2b d1		 sub	 edx, ecx
  000be	89 55 cc	 mov	 DWORD PTR _int_dfog$[ebp], edx

; 836  : 
; 837  : 	int_specular = point2->specular;

  000c1	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000c4	0f b6 48 2d	 movzx	 ecx, BYTE PTR [eax+45]
  000c8	89 4d c8	 mov	 DWORD PTR _int_specular$[ebp], ecx

; 838  : 	int_dspecular = int_specular - ( int ) point1->specular;

  000cb	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  000ce	0f b6 48 2d	 movzx	 ecx, BYTE PTR [eax+45]
  000d2	8b 55 c8	 mov	 edx, DWORD PTR _int_specular$[ebp]
  000d5	2b d1		 sub	 edx, ecx
  000d7	89 55 c4	 mov	 DWORD PTR _int_dspecular$[ebp], edx

; 839  : 
; 840  : 	int_red = point2->red;

  000da	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000dd	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  000e1	89 4d c0	 mov	 DWORD PTR _int_red$[ebp], ecx

; 841  : 	int_dred = int_red - ( int ) point1->red;

  000e4	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  000e7	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  000eb	8b 55 c0	 mov	 edx, DWORD PTR _int_red$[ebp]
  000ee	2b d1		 sub	 edx, ecx
  000f0	89 55 bc	 mov	 DWORD PTR _int_dred$[ebp], edx

; 842  : 
; 843  : 	int_green = point2->green;

  000f3	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000f6	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  000fa	89 4d b8	 mov	 DWORD PTR _int_green$[ebp], ecx

; 844  : 	int_dgreen = int_green - ( int ) point1->green;

  000fd	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00100	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  00104	8b 55 b8	 mov	 edx, DWORD PTR _int_green$[ebp]
  00107	2b d1		 sub	 edx, ecx
  00109	89 55 b4	 mov	 DWORD PTR _int_dgreen$[ebp], edx

; 845  : 
; 846  : 	int_blue = point2->blue;

  0010c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0010f	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  00113	89 4d b0	 mov	 DWORD PTR _int_blue$[ebp], ecx

; 847  : 	int_dblue = int_blue - ( int ) point1->blue;

  00116	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00119	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  0011d	8b 55 b0	 mov	 edx, DWORD PTR _int_blue$[ebp]
  00120	2b d1		 sub	 edx, ecx
  00122	89 55 ac	 mov	 DWORD PTR _int_dblue$[ebp], edx

; 848  : 
; 849  : 	if ( !clip_point )

  00125	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  0012c	75 14		 jne	 SHORT $LN3@insert_z_n

; 850  : 	{
; 851  : 
; 852  : 		clip_list = clip;

  0012e	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00131	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 853  : 
; 854  : 		clip_point = clip_list;

  00136	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  0013b	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 855  : 	}
; 856  : 	else

  00140	eb 19		 jmp	 SHORT $LN4@insert_z_n
$LN3@insert_z_n:

; 857  : 	{
; 858  : 
; 859  : 		clip_point->next_vertex	= clip;

  00142	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00147	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  0014a	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 860  : 
; 861  : 		clip_point = clip_point->next_vertex;

  0014d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00152	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00155	89 0d 00 00 00
	00		 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, ecx
$LN4@insert_z_n:

; 862  : 	}
; 863  : 
; 864  : 	clip->x = point2->x + ( t * ( point2->x - point1->x ) );

  0015b	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0015e	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00162	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00165	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00168	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  0016c	f3 0f 5c 0a	 subss	 xmm1, DWORD PTR [edx]
  00170	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00174	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00179	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0017d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00181	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00184	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 865  : 	clip->y = point2->y + ( t * ( point2->y - point1->y ) );

  00188	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0018b	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  00190	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00193	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00196	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  0019b	f3 0f 5c 4a 04	 subss	 xmm1, DWORD PTR [edx+4]
  001a0	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001a4	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001a9	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001ad	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001b1	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  001b4	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 866  : 
; 867  : 	alpha = ( float ) int_alpha + ( t * ( float ) int_dalpha );

  001b9	f3 0f 2a 45 d8	 cvtsi2ss xmm0, DWORD PTR _int_alpha$[ebp]
  001be	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001c2	f3 0f 2a 4d d4	 cvtsi2ss xmm1, DWORD PTR _int_dalpha$[ebp]
  001c7	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001cb	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001d0	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001d4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001d8	f3 0f 11 45 f0	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 868  : 	fog = ( float ) int_fog + ( t * ( float ) int_dfog );

  001dd	f3 0f 2a 45 d0	 cvtsi2ss xmm0, DWORD PTR _int_fog$[ebp]
  001e2	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001e6	f3 0f 2a 4d cc	 cvtsi2ss xmm1, DWORD PTR _int_dfog$[ebp]
  001eb	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001ef	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001f4	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001f8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001fc	f3 0f 11 45 ec	 movss	 DWORD PTR _fog$[ebp], xmm0

; 869  : 	specular = ( float ) int_specular + ( t * ( float ) int_dspecular );

  00201	f3 0f 2a 45 c8	 cvtsi2ss xmm0, DWORD PTR _int_specular$[ebp]
  00206	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0020a	f3 0f 2a 4d c4	 cvtsi2ss xmm1, DWORD PTR _int_dspecular$[ebp]
  0020f	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00213	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00218	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0021c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00220	f3 0f 11 45 e8	 movss	 DWORD PTR _specular$[ebp], xmm0

; 870  : 	red = ( float ) int_red + ( t * ( float ) int_dred );

  00225	f3 0f 2a 45 c0	 cvtsi2ss xmm0, DWORD PTR _int_red$[ebp]
  0022a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0022e	f3 0f 2a 4d bc	 cvtsi2ss xmm1, DWORD PTR _int_dred$[ebp]
  00233	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00237	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0023c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00240	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00244	f3 0f 11 45 e4	 movss	 DWORD PTR _red$[ebp], xmm0

; 871  : 	green = ( float ) int_green + ( t * ( float ) int_dgreen );

  00249	f3 0f 2a 45 b8	 cvtsi2ss xmm0, DWORD PTR _int_green$[ebp]
  0024e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00252	f3 0f 2a 4d b4	 cvtsi2ss xmm1, DWORD PTR _int_dgreen$[ebp]
  00257	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0025b	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00260	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00264	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00268	f3 0f 11 45 e0	 movss	 DWORD PTR _green$[ebp], xmm0

; 872  : 	blue = ( float ) int_blue + ( t * ( float ) int_dblue );

  0026d	f3 0f 2a 45 b0	 cvtsi2ss xmm0, DWORD PTR _int_blue$[ebp]
  00272	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00276	f3 0f 2a 4d ac	 cvtsi2ss xmm1, DWORD PTR _int_dblue$[ebp]
  0027b	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0027f	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00284	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00288	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0028c	f3 0f 11 45 dc	 movss	 DWORD PTR _blue$[ebp], xmm0

; 873  : 
; 874  : 	alpha += FLOAT_FLOAT_FACTOR;

  00291	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _alpha$[ebp]
  00296	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0029e	f3 0f 11 45 f0	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 875  : 	fog += FLOAT_FLOAT_FACTOR;

  002a3	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _fog$[ebp]
  002a8	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  002b0	f3 0f 11 45 ec	 movss	 DWORD PTR _fog$[ebp], xmm0

; 876  : 	specular += FLOAT_FLOAT_FACTOR;

  002b5	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _specular$[ebp]
  002ba	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  002c2	f3 0f 11 45 e8	 movss	 DWORD PTR _specular$[ebp], xmm0

; 877  : 	red += FLOAT_FLOAT_FACTOR;

  002c7	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _red$[ebp]
  002cc	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  002d4	f3 0f 11 45 e4	 movss	 DWORD PTR _red$[ebp], xmm0

; 878  : 	green += FLOAT_FLOAT_FACTOR;

  002d9	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _green$[ebp]
  002de	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  002e6	f3 0f 11 45 e0	 movss	 DWORD PTR _green$[ebp], xmm0

; 879  : 	blue += FLOAT_FLOAT_FACTOR;

  002eb	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _blue$[ebp]
  002f0	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  002f8	f3 0f 11 45 dc	 movss	 DWORD PTR _blue$[ebp], xmm0

; 880  : 
; 881  : 	int_alpha = ( *( ( int * ) &alpha ) - INTEGER_FLOAT_FACTOR );

  002fd	8b 45 f0	 mov	 eax, DWORD PTR _alpha$[ebp]
  00300	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00305	89 45 d8	 mov	 DWORD PTR _int_alpha$[ebp], eax

; 882  : 	int_fog = ( *( ( int * ) &fog ) - INTEGER_FLOAT_FACTOR );

  00308	8b 45 ec	 mov	 eax, DWORD PTR _fog$[ebp]
  0030b	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00310	89 45 d0	 mov	 DWORD PTR _int_fog$[ebp], eax

; 883  : 	int_specular = ( *( ( int * ) &specular ) - INTEGER_FLOAT_FACTOR );

  00313	8b 45 e8	 mov	 eax, DWORD PTR _specular$[ebp]
  00316	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0031b	89 45 c8	 mov	 DWORD PTR _int_specular$[ebp], eax

; 884  : 	int_red = ( *( ( int * ) &red ) - INTEGER_FLOAT_FACTOR );

  0031e	8b 45 e4	 mov	 eax, DWORD PTR _red$[ebp]
  00321	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00326	89 45 c0	 mov	 DWORD PTR _int_red$[ebp], eax

; 885  : 	int_green = ( *( ( int * ) &green ) - INTEGER_FLOAT_FACTOR );

  00329	8b 45 e0	 mov	 eax, DWORD PTR _green$[ebp]
  0032c	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00331	89 45 b8	 mov	 DWORD PTR _int_green$[ebp], eax

; 886  : 	int_blue = ( *( ( int * ) &blue ) - INTEGER_FLOAT_FACTOR );

  00334	8b 45 dc	 mov	 eax, DWORD PTR _blue$[ebp]
  00337	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0033c	89 45 b0	 mov	 DWORD PTR _int_blue$[ebp], eax

; 887  : 
; 888  : 	clip->alpha = int_alpha;

  0033f	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00342	8a 4d d8	 mov	 cl, BYTE PTR _int_alpha$[ebp]
  00345	88 48 33	 mov	 BYTE PTR [eax+51], cl

; 889  : 	clip->fog = int_fog;

  00348	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0034b	8a 4d d0	 mov	 cl, BYTE PTR _int_fog$[ebp]
  0034e	88 48 2e	 mov	 BYTE PTR [eax+46], cl

; 890  : 	clip->specular = int_specular;

  00351	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00354	8a 4d c8	 mov	 cl, BYTE PTR _int_specular$[ebp]
  00357	88 48 2d	 mov	 BYTE PTR [eax+45], cl

; 891  : 	clip->red = int_red;

  0035a	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0035d	8a 4d c0	 mov	 cl, BYTE PTR _int_red$[ebp]
  00360	88 48 32	 mov	 BYTE PTR [eax+50], cl

; 892  : 	clip->green = int_green;

  00363	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00366	8a 4d b8	 mov	 cl, BYTE PTR _int_green$[ebp]
  00369	88 48 31	 mov	 BYTE PTR [eax+49], cl

; 893  : 	clip->blue = int_blue;

  0036c	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0036f	8a 4d b0	 mov	 cl, BYTE PTR _int_blue$[ebp]
  00372	88 48 30	 mov	 BYTE PTR [eax+48], cl

; 894  : 
; 895  : 	clip->u = point2->u + ( t * ( point2->u - point1->u ) );

  00375	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00378	f3 0f 5a 40 18	 cvtss2sd xmm0, DWORD PTR [eax+24]
  0037d	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00380	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00383	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  00388	f3 0f 5c 4a 18	 subss	 xmm1, DWORD PTR [edx+24]
  0038d	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00391	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00396	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0039a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0039e	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  003a1	f3 0f 11 40 18	 movss	 DWORD PTR [eax+24], xmm0

; 896  : 	clip->v = point2->v + ( t * ( point2->v - point1->v ) );

  003a6	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  003a9	f3 0f 5a 40 1c	 cvtss2sd xmm0, DWORD PTR [eax+28]
  003ae	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  003b1	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  003b4	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  003b9	f3 0f 5c 4a 1c	 subss	 xmm1, DWORD PTR [edx+28]
  003be	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  003c2	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  003c7	f2 0f 58 c1	 addsd	 xmm0, xmm1
  003cb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003cf	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  003d2	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0

; 897  : 
; 898  : 	clip->j = active_3d_environment->y_origin;

  003d7	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  003da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  003e0	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  003e3	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 899  : 
; 900  : 	clip->i = ( clip->x * clip->q );

  003e6	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  003e9	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  003ec	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  003f0	f3 0f 59 41 0c	 mulss	 xmm0, DWORD PTR [ecx+12]
  003f5	8b 55 f4	 mov	 edx, DWORD PTR _clip$[ebp]
  003f8	f3 0f 11 42 10	 movss	 DWORD PTR [edx+16], xmm0

; 901  : 
; 902  : 	clip->j -= ( clip->y * clip->q );

  003fd	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00400	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  00403	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00408	f3 0f 59 41 0c	 mulss	 xmm0, DWORD PTR [ecx+12]
  0040d	8b 55 f4	 mov	 edx, DWORD PTR _clip$[ebp]
  00410	f3 0f 10 4a 14	 movss	 xmm1, DWORD PTR [edx+20]
  00415	f3 0f 5c c8	 subss	 xmm1, xmm0
  00419	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0041c	f3 0f 11 48 14	 movss	 DWORD PTR [eax+20], xmm1

; 903  : 
; 904  : 	clip->i += active_3d_environment->x_origin;

  00421	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00424	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0042a	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  0042f	f3 0f 58 41 10	 addss	 xmm0, DWORD PTR [ecx+16]
  00434	8b 55 f4	 mov	 edx, DWORD PTR _clip$[ebp]
  00437	f3 0f 11 42 10	 movss	 DWORD PTR [edx+16], xmm0

; 905  : 
; 906  : 	clip->outcode = generate_3d_outcode ( clip->i, clip->j );

  0043c	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0043f	51		 push	 ecx
  00440	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00445	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044a	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  0044d	51		 push	 ecx
  0044e	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  00453	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00458	e8 00 00 00 00	 call	 ?generate_3d_outcode@@YGHMM@Z ; generate_3d_outcode
  0045d	8b 55 f4	 mov	 edx, DWORD PTR _clip$[ebp]
  00460	88 42 2c	 mov	 BYTE PTR [edx+44], al

; 907  : 
; 908  : #if REPORT_CLIP_STATISTICS
; 909  : 
; 910  : 	number_of_near_coordinates_inserted++;
; 911  : 
; 912  : #endif
; 913  : }

  00463	5f		 pop	 edi
  00464	5e		 pop	 esi
  00465	5b		 pop	 ebx
  00466	8b e5		 mov	 esp, ebp
  00468	5d		 pop	 ebp
  00469	c2 08 00	 ret	 8
?insert_z_near_coordinate@@YGXPAUVERTEX@@0@Z ENDP	; insert_z_near_coordinate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dclip.c
;	COMDAT ?insert_z_far_coordinate@@YGXPAUVERTEX@@0@Z
_TEXT	SEGMENT
_int_dblue$ = -84					; size = 4
_int_blue$ = -80					; size = 4
_int_dgreen$ = -76					; size = 4
_int_green$ = -72					; size = 4
_int_dred$ = -68					; size = 4
_int_red$ = -64						; size = 4
_int_dspecular$ = -60					; size = 4
_int_specular$ = -56					; size = 4
_int_dfog$ = -52					; size = 4
_int_fog$ = -48						; size = 4
_int_dalpha$ = -44					; size = 4
_int_alpha$ = -40					; size = 4
_blue$ = -36						; size = 4
_green$ = -32						; size = 4
_red$ = -28						; size = 4
_specular$ = -24					; size = 4
_fog$ = -20						; size = 4
_alpha$ = -16						; size = 4
_clip$ = -12						; size = 4
_t$ = -8						; size = 8
_point1$ = 8						; size = 4
_point2$ = 12						; size = 4
?insert_z_far_coordinate@@YGXPAUVERTEX@@0@Z PROC	; insert_z_far_coordinate, COMDAT

; 920  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 921  : 
; 922  : 	double
; 923  : 		t;
; 924  : 
; 925  : 	vertex
; 926  : 		*clip;
; 927  : 
; 928  : 	float
; 929  : 		alpha,
; 930  : 		fog,
; 931  : 		specular,
; 932  : 		red,
; 933  : 		green,
; 934  : 		blue;
; 935  : 
; 936  : 	int
; 937  : 		int_alpha,
; 938  : 		int_dalpha,
; 939  : 		int_fog,
; 940  : 		int_dfog,
; 941  : 		int_specular,
; 942  : 		int_dspecular,
; 943  : 		int_red,
; 944  : 		int_dred,
; 945  : 		int_green,
; 946  : 		int_dgreen,
; 947  : 		int_blue,
; 948  : 		int_dblue;
; 949  : 
; 950  : 	ASSERT ( clip_3d_coord < MAX_3D_CLIP_COORDINATES );

  0000c	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?clip_3d_coord@@3HA, 16 ; clip_3d_coord, 00000010H
  00013	7c 18		 jl	 SHORT $LN2@insert_z_f
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??insert_z_far_coordinate@@YGXPAUVERTEX@@0@Z@4JA
  0001a	83 c0 1e	 add	 eax, 30			; 0000001eH
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@JADBFHMD@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KLGAAHP@clip_3d_coord?5?$DM?5MAX_3D_CLIP_COO@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@insert_z_f:

; 951  : 
; 952  : 	t = ( ( clip_yonder - point2->z ) / ( point2->z - point1->z ) );

  0002d	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?clip_yonder@@3MA
  00038	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  0003d	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00040	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00043	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00048	f3 0f 5c 4a 08	 subss	 xmm1, DWORD PTR [edx+8]
  0004d	f3 0f 5e c1	 divss	 xmm0, xmm1
  00051	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00055	f2 0f 11 45 f8	 movsd	 QWORD PTR _t$[ebp], xmm0

; 953  : 
; 954  : 	clip = &clip_3d_crds[clip_3d_coord];

  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0005f	c1 e0 06	 shl	 eax, 6
  00062	05 00 00 00 00	 add	 eax, OFFSET ?clip_3d_crds@@3PAUVERTEX@@A ; clip_3d_crds
  00067	89 45 f4	 mov	 DWORD PTR _clip$[ebp], eax

; 955  : 
; 956  : 	clip_3d_coord++;

  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_3d_coord@@3HA ; clip_3d_coord
  0006f	83 c0 01	 add	 eax, 1
  00072	a3 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, eax ; clip_3d_coord

; 957  : 
; 958  : 	*( ( int * ) &clip->z ) = *( ( int * ) &clip_yonder );

  00077	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0007a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_yonder@@3MA
  00080	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 959  : 	*( ( int * ) &clip->q ) = *( ( int * ) &clip_yonder_reciprocal );

  00083	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00086	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clip_yonder_reciprocal@@3MA
  0008c	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 960  : 
; 961  : 	int_alpha = point2->alpha;

  0008f	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00092	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  00096	89 4d d8	 mov	 DWORD PTR _int_alpha$[ebp], ecx

; 962  : 	int_dalpha = int_alpha - ( int ) point1->alpha;

  00099	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  0009c	0f b6 48 33	 movzx	 ecx, BYTE PTR [eax+51]
  000a0	8b 55 d8	 mov	 edx, DWORD PTR _int_alpha$[ebp]
  000a3	2b d1		 sub	 edx, ecx
  000a5	89 55 d4	 mov	 DWORD PTR _int_dalpha$[ebp], edx

; 963  : 
; 964  : 	int_fog = point2->fog;

  000a8	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000ab	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  000af	89 4d d0	 mov	 DWORD PTR _int_fog$[ebp], ecx

; 965  : 	int_dfog = int_fog - ( int ) point1->fog;

  000b2	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  000b5	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  000b9	8b 55 d0	 mov	 edx, DWORD PTR _int_fog$[ebp]
  000bc	2b d1		 sub	 edx, ecx
  000be	89 55 cc	 mov	 DWORD PTR _int_dfog$[ebp], edx

; 966  : 
; 967  : 	int_specular = point2->specular;

  000c1	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000c4	0f b6 48 2d	 movzx	 ecx, BYTE PTR [eax+45]
  000c8	89 4d c8	 mov	 DWORD PTR _int_specular$[ebp], ecx

; 968  : 	int_dspecular = int_specular - ( int ) point1->specular;

  000cb	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  000ce	0f b6 48 2d	 movzx	 ecx, BYTE PTR [eax+45]
  000d2	8b 55 c8	 mov	 edx, DWORD PTR _int_specular$[ebp]
  000d5	2b d1		 sub	 edx, ecx
  000d7	89 55 c4	 mov	 DWORD PTR _int_dspecular$[ebp], edx

; 969  : 
; 970  : 	int_red = point2->red;

  000da	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000dd	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  000e1	89 4d c0	 mov	 DWORD PTR _int_red$[ebp], ecx

; 971  : 	int_dred = int_red - ( int ) point1->red;

  000e4	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  000e7	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  000eb	8b 55 c0	 mov	 edx, DWORD PTR _int_red$[ebp]
  000ee	2b d1		 sub	 edx, ecx
  000f0	89 55 bc	 mov	 DWORD PTR _int_dred$[ebp], edx

; 972  : 
; 973  : 	int_green = point2->green;

  000f3	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  000f6	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  000fa	89 4d b8	 mov	 DWORD PTR _int_green$[ebp], ecx

; 974  : 	int_dgreen = int_green - ( int ) point1->green;

  000fd	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00100	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  00104	8b 55 b8	 mov	 edx, DWORD PTR _int_green$[ebp]
  00107	2b d1		 sub	 edx, ecx
  00109	89 55 b4	 mov	 DWORD PTR _int_dgreen$[ebp], edx

; 975  : 
; 976  : 	int_blue = point2->blue;

  0010c	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0010f	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  00113	89 4d b0	 mov	 DWORD PTR _int_blue$[ebp], ecx

; 977  : 	int_dblue = int_blue - ( int ) point1->blue;

  00116	8b 45 08	 mov	 eax, DWORD PTR _point1$[ebp]
  00119	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  0011d	8b 55 b0	 mov	 edx, DWORD PTR _int_blue$[ebp]
  00120	2b d1		 sub	 edx, ecx
  00122	89 55 ac	 mov	 DWORD PTR _int_dblue$[ebp], edx

; 978  : 
; 979  : 	if ( !clip_point )

  00125	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  0012c	75 14		 jne	 SHORT $LN3@insert_z_f

; 980  : 	{
; 981  : 
; 982  : 		clip_list = clip;

  0012e	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00131	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 983  : 
; 984  : 		clip_point = clip_list;

  00136	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
  0013b	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 985  : 	}
; 986  : 	else

  00140	eb 19		 jmp	 SHORT $LN4@insert_z_f
$LN3@insert_z_f:

; 987  : 	{
; 988  : 
; 989  : 		clip_point->next_vertex	= clip;

  00142	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00147	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  0014a	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 990  : 
; 991  : 		clip_point = clip_point->next_vertex;

  0014d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00152	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00155	89 0d 00 00 00
	00		 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, ecx
$LN4@insert_z_f:

; 992  : 	}
; 993  : 
; 994  : 	clip->x = point2->x + ( t * ( point2->x - point1->x ) );

  0015b	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0015e	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00162	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00165	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00168	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  0016c	f3 0f 5c 0a	 subss	 xmm1, DWORD PTR [edx]
  00170	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00174	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00179	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0017d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00181	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00184	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 995  : 	clip->y = point2->y + ( t * ( point2->y - point1->y ) );

  00188	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  0018b	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  00190	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00193	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00196	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  0019b	f3 0f 5c 4a 04	 subss	 xmm1, DWORD PTR [edx+4]
  001a0	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001a4	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001a9	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001ad	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001b1	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  001b4	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 996  : 
; 997  : 	alpha = ( float ) int_alpha + ( t * ( float ) int_dalpha );

  001b9	f3 0f 2a 45 d8	 cvtsi2ss xmm0, DWORD PTR _int_alpha$[ebp]
  001be	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001c2	f3 0f 2a 4d d4	 cvtsi2ss xmm1, DWORD PTR _int_dalpha$[ebp]
  001c7	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001cb	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001d0	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001d4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001d8	f3 0f 11 45 f0	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 998  : 	fog = ( float ) int_fog + ( t * ( float ) int_dfog );

  001dd	f3 0f 2a 45 d0	 cvtsi2ss xmm0, DWORD PTR _int_fog$[ebp]
  001e2	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001e6	f3 0f 2a 4d cc	 cvtsi2ss xmm1, DWORD PTR _int_dfog$[ebp]
  001eb	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  001ef	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  001f4	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001f8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001fc	f3 0f 11 45 ec	 movss	 DWORD PTR _fog$[ebp], xmm0

; 999  : 	specular = ( float ) int_specular + ( t * ( float ) int_dspecular );

  00201	f3 0f 2a 45 c8	 cvtsi2ss xmm0, DWORD PTR _int_specular$[ebp]
  00206	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0020a	f3 0f 2a 4d c4	 cvtsi2ss xmm1, DWORD PTR _int_dspecular$[ebp]
  0020f	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00213	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00218	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0021c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00220	f3 0f 11 45 e8	 movss	 DWORD PTR _specular$[ebp], xmm0

; 1000 : 	red = ( float ) int_red + ( t * ( float ) int_dred );

  00225	f3 0f 2a 45 c0	 cvtsi2ss xmm0, DWORD PTR _int_red$[ebp]
  0022a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0022e	f3 0f 2a 4d bc	 cvtsi2ss xmm1, DWORD PTR _int_dred$[ebp]
  00233	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00237	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  0023c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00240	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00244	f3 0f 11 45 e4	 movss	 DWORD PTR _red$[ebp], xmm0

; 1001 : 	green = ( float ) int_green + ( t * ( float ) int_dgreen );

  00249	f3 0f 2a 45 b8	 cvtsi2ss xmm0, DWORD PTR _int_green$[ebp]
  0024e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00252	f3 0f 2a 4d b4	 cvtsi2ss xmm1, DWORD PTR _int_dgreen$[ebp]
  00257	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0025b	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00260	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00264	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00268	f3 0f 11 45 e0	 movss	 DWORD PTR _green$[ebp], xmm0

; 1002 : 	blue = ( float ) int_blue + ( t * ( float ) int_dblue );

  0026d	f3 0f 2a 45 b0	 cvtsi2ss xmm0, DWORD PTR _int_blue$[ebp]
  00272	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00276	f3 0f 2a 4d ac	 cvtsi2ss xmm1, DWORD PTR _int_dblue$[ebp]
  0027b	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0027f	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00284	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00288	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0028c	f3 0f 11 45 dc	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1003 : 
; 1004 : 	alpha += FLOAT_FLOAT_FACTOR;

  00291	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _alpha$[ebp]
  00296	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0029e	f3 0f 11 45 f0	 movss	 DWORD PTR _alpha$[ebp], xmm0

; 1005 : 	fog += FLOAT_FLOAT_FACTOR;

  002a3	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _fog$[ebp]
  002a8	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  002b0	f3 0f 11 45 ec	 movss	 DWORD PTR _fog$[ebp], xmm0

; 1006 : 	specular += FLOAT_FLOAT_FACTOR;

  002b5	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _specular$[ebp]
  002ba	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  002c2	f3 0f 11 45 e8	 movss	 DWORD PTR _specular$[ebp], xmm0

; 1007 : 	red += FLOAT_FLOAT_FACTOR;

  002c7	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _red$[ebp]
  002cc	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  002d4	f3 0f 11 45 e4	 movss	 DWORD PTR _red$[ebp], xmm0

; 1008 : 	green += FLOAT_FLOAT_FACTOR;

  002d9	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _green$[ebp]
  002de	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  002e6	f3 0f 11 45 e0	 movss	 DWORD PTR _green$[ebp], xmm0

; 1009 : 	blue += FLOAT_FLOAT_FACTOR;

  002eb	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _blue$[ebp]
  002f0	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  002f8	f3 0f 11 45 dc	 movss	 DWORD PTR _blue$[ebp], xmm0

; 1010 : 
; 1011 : 	int_alpha = ( *( ( int * ) &alpha ) - INTEGER_FLOAT_FACTOR );

  002fd	8b 45 f0	 mov	 eax, DWORD PTR _alpha$[ebp]
  00300	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00305	89 45 d8	 mov	 DWORD PTR _int_alpha$[ebp], eax

; 1012 : 	int_fog = ( *( ( int * ) &fog ) - INTEGER_FLOAT_FACTOR );

  00308	8b 45 ec	 mov	 eax, DWORD PTR _fog$[ebp]
  0030b	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00310	89 45 d0	 mov	 DWORD PTR _int_fog$[ebp], eax

; 1013 : 	int_specular = ( *( ( int * ) &specular ) - INTEGER_FLOAT_FACTOR );

  00313	8b 45 e8	 mov	 eax, DWORD PTR _specular$[ebp]
  00316	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0031b	89 45 c8	 mov	 DWORD PTR _int_specular$[ebp], eax

; 1014 : 	int_red = ( *( ( int * ) &red ) - INTEGER_FLOAT_FACTOR );

  0031e	8b 45 e4	 mov	 eax, DWORD PTR _red$[ebp]
  00321	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00326	89 45 c0	 mov	 DWORD PTR _int_red$[ebp], eax

; 1015 : 	int_green = ( *( ( int * ) &green ) - INTEGER_FLOAT_FACTOR );

  00329	8b 45 e0	 mov	 eax, DWORD PTR _green$[ebp]
  0032c	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00331	89 45 b8	 mov	 DWORD PTR _int_green$[ebp], eax

; 1016 : 	int_blue = ( *( ( int * ) &blue ) - INTEGER_FLOAT_FACTOR );

  00334	8b 45 dc	 mov	 eax, DWORD PTR _blue$[ebp]
  00337	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0033c	89 45 b0	 mov	 DWORD PTR _int_blue$[ebp], eax

; 1017 : 
; 1018 : 	clip->alpha = int_alpha;

  0033f	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00342	8a 4d d8	 mov	 cl, BYTE PTR _int_alpha$[ebp]
  00345	88 48 33	 mov	 BYTE PTR [eax+51], cl

; 1019 : 	clip->fog = int_fog;

  00348	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0034b	8a 4d d0	 mov	 cl, BYTE PTR _int_fog$[ebp]
  0034e	88 48 2e	 mov	 BYTE PTR [eax+46], cl

; 1020 : 	clip->specular = int_specular;

  00351	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00354	8a 4d c8	 mov	 cl, BYTE PTR _int_specular$[ebp]
  00357	88 48 2d	 mov	 BYTE PTR [eax+45], cl

; 1021 : 	clip->red = int_red;

  0035a	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0035d	8a 4d c0	 mov	 cl, BYTE PTR _int_red$[ebp]
  00360	88 48 32	 mov	 BYTE PTR [eax+50], cl

; 1022 : 	clip->green = int_green;

  00363	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00366	8a 4d b8	 mov	 cl, BYTE PTR _int_green$[ebp]
  00369	88 48 31	 mov	 BYTE PTR [eax+49], cl

; 1023 : 	clip->blue = int_blue;

  0036c	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0036f	8a 4d b0	 mov	 cl, BYTE PTR _int_blue$[ebp]
  00372	88 48 30	 mov	 BYTE PTR [eax+48], cl

; 1024 : 
; 1025 : 	clip->u = point2->u + ( t * ( point2->u - point1->u ) );

  00375	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  00378	f3 0f 5a 40 18	 cvtss2sd xmm0, DWORD PTR [eax+24]
  0037d	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  00380	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  00383	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  00388	f3 0f 5c 4a 18	 subss	 xmm1, DWORD PTR [edx+24]
  0038d	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00391	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  00396	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0039a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0039e	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  003a1	f3 0f 11 40 18	 movss	 DWORD PTR [eax+24], xmm0

; 1026 : 	clip->v = point2->v + ( t * ( point2->v - point1->v ) );

  003a6	8b 45 0c	 mov	 eax, DWORD PTR _point2$[ebp]
  003a9	f3 0f 5a 40 1c	 cvtss2sd xmm0, DWORD PTR [eax+28]
  003ae	8b 4d 0c	 mov	 ecx, DWORD PTR _point2$[ebp]
  003b1	8b 55 08	 mov	 edx, DWORD PTR _point1$[ebp]
  003b4	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  003b9	f3 0f 5c 4a 1c	 subss	 xmm1, DWORD PTR [edx+28]
  003be	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  003c2	f2 0f 59 4d f8	 mulsd	 xmm1, QWORD PTR _t$[ebp]
  003c7	f2 0f 58 c1	 addsd	 xmm0, xmm1
  003cb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003cf	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  003d2	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0

; 1027 : 
; 1028 : 	clip->j = active_3d_environment->y_origin;

  003d7	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  003da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  003e0	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  003e3	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 1029 : 
; 1030 : 	clip->i = ( clip->x * clip->q );

  003e6	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  003e9	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  003ec	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  003f0	f3 0f 59 41 0c	 mulss	 xmm0, DWORD PTR [ecx+12]
  003f5	8b 55 f4	 mov	 edx, DWORD PTR _clip$[ebp]
  003f8	f3 0f 11 42 10	 movss	 DWORD PTR [edx+16], xmm0

; 1031 : 
; 1032 : 	clip->j -= ( clip->y * clip->q );

  003fd	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00400	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  00403	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00408	f3 0f 59 41 0c	 mulss	 xmm0, DWORD PTR [ecx+12]
  0040d	8b 55 f4	 mov	 edx, DWORD PTR _clip$[ebp]
  00410	f3 0f 10 4a 14	 movss	 xmm1, DWORD PTR [edx+20]
  00415	f3 0f 5c c8	 subss	 xmm1, xmm0
  00419	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0041c	f3 0f 11 48 14	 movss	 DWORD PTR [eax+20], xmm1

; 1033 : 
; 1034 : 	clip->i += active_3d_environment->x_origin;

  00421	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  00424	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0042a	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  0042f	f3 0f 58 41 10	 addss	 xmm0, DWORD PTR [ecx+16]
  00434	8b 55 f4	 mov	 edx, DWORD PTR _clip$[ebp]
  00437	f3 0f 11 42 10	 movss	 DWORD PTR [edx+16], xmm0

; 1035 : 
; 1036 : 	clip->outcode = generate_3d_outcode ( clip->i, clip->j );

  0043c	8b 45 f4	 mov	 eax, DWORD PTR _clip$[ebp]
  0043f	51		 push	 ecx
  00440	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00445	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044a	8b 4d f4	 mov	 ecx, DWORD PTR _clip$[ebp]
  0044d	51		 push	 ecx
  0044e	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  00453	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00458	e8 00 00 00 00	 call	 ?generate_3d_outcode@@YGHMM@Z ; generate_3d_outcode
  0045d	8b 55 f4	 mov	 edx, DWORD PTR _clip$[ebp]
  00460	88 42 2c	 mov	 BYTE PTR [edx+44], al

; 1037 : 
; 1038 : #if REPORT_CLIP_STATISTICS
; 1039 : 
; 1040 : 	number_of_far_coordinates_inserted++;
; 1041 : 
; 1042 : #endif
; 1043 : }

  00463	5f		 pop	 edi
  00464	5e		 pop	 esi
  00465	5b		 pop	 ebx
  00466	8b e5		 mov	 esp, ebp
  00468	5d		 pop	 ebp
  00469	c2 08 00	 ret	 8
?insert_z_far_coordinate@@YGXPAUVERTEX@@0@Z ENDP	; insert_z_far_coordinate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dclip.c
;	COMDAT ?horizon_clip_3d_polygon@@YGPAUVERTEX@@PAU1@@Z
_TEXT	SEGMENT
tv86 = -72						; size = 4
tv83 = -68						; size = 4
_polygon$ = 8						; size = 4
?horizon_clip_3d_polygon@@YGPAUVERTEX@@PAU1@@Z PROC	; horizon_clip_3d_polygon, COMDAT

; 682  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 683  : 
; 684  : 	clip_list = NULL;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, 0

; 685  : 
; 686  : 	clip_point = NULL;

  00013	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0

; 687  : 
; 688  : 	last_point = polygon;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00020	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 689  : 
; 690  : 	this_point = polygon->next_vertex;

  00025	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00028	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0002b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 691  : 
; 692  : 	if ( polygon->y >= 0 )

  00031	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00034	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00039	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00040	72 1a		 jb	 SHORT $LN4@horizon_cl

; 693  : 	{
; 694  : 
; 695  : 		//
; 696  : 		// We are ok for the first point.
; 697  : 		//
; 698  : 
; 699  : 		clip_list = polygon;

  00042	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00045	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 700  : 
; 701  : 		clip_point = polygon;

  0004a	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0004d	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 702  : 
; 703  : 		polygon->next_vertex = NULL;

  00052	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00055	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
$LN4@horizon_cl:

; 704  : 	}
; 705  : 
; 706  : 	while ( this_point )

  0005c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?this_point@@3PAUVERTEX@@A, 0
  00063	0f 84 85 00 00
	00		 je	 $LN3@horizon_cl

; 707  : 	{
; 708  : 
; 709  : 		if ( !( this_point->y < 0 ) )	//this_point->outcode & CLIP_HITHER ) )

  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0006e	0f 57 c0	 xorps	 xmm0, xmm0
  00071	0f 2f 40 04	 comiss	 xmm0, DWORD PTR [eax+4]
  00075	77 3a		 ja	 SHORT $LN5@horizon_cl

; 710  : 		{
; 711  : 
; 712  : 			//
; 713  : 			// This point is on the screen
; 714  : 			//
; 715  : 
; 716  : 			if ( last_point->y < 0 )	//last_point->outcode & CLIP_HITHER )

  00077	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0007c	0f 57 c0	 xorps	 xmm0, xmm0
  0007f	0f 2f 40 04	 comiss	 xmm0, DWORD PTR [eax+4]
  00083	76 12		 jbe	 SHORT $LN7@horizon_cl

; 717  : 			{
; 718  : 
; 719  : 				//
; 720  : 				// Last point was not on the screen, so we have to add a clip point.
; 721  : 				//
; 722  : 
; 723  : 				insert_horizon_coordinate ( last_point, this_point );

  00085	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0008a	50		 push	 eax
  0008b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00091	51		 push	 ecx
  00092	e8 00 00 00 00	 call	 ?insert_horizon_coordinate@@YGXPAUVERTEX@@0@Z ; insert_horizon_coordinate
$LN7@horizon_cl:

; 724  : 			}
; 725  : 
; 726  : 			// Here, we are guaranteed to have a coordinate in the clip list - the above routine just put one in!
; 727  : 
; 728  : 			clip_point->next_vertex = this_point;

  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  0009c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000a2	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 729  : 
; 730  : 			clip_point = this_point;

  000a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000aa	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 731  : 		}
; 732  : 		else

  000af	eb 20		 jmp	 SHORT $LN8@horizon_cl
$LN5@horizon_cl:

; 733  : 		{
; 734  : 
; 735  : 			//
; 736  : 			// This point is not on the screen
; 737  : 			//
; 738  : 
; 739  : 			if ( ! ( last_point->y < 0 ) )	//last_point->outcode & CLIP_HITHER ) )

  000b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  000b6	0f 57 c0	 xorps	 xmm0, xmm0
  000b9	0f 2f 40 04	 comiss	 xmm0, DWORD PTR [eax+4]
  000bd	77 12		 ja	 SHORT $LN8@horizon_cl

; 740  : 			{
; 741  : 
; 742  : 				//
; 743  : 				// The last point was visible - find intersection point
; 744  : 				//
; 745  : 
; 746  : 				insert_horizon_coordinate ( this_point, last_point );

  000bf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  000c4	50		 push	 eax
  000c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000cb	51		 push	 ecx
  000cc	e8 00 00 00 00	 call	 ?insert_horizon_coordinate@@YGXPAUVERTEX@@0@Z ; insert_horizon_coordinate
$LN8@horizon_cl:

; 747  : 			}
; 748  : 		}
; 749  : 
; 750  : 		last_point = this_point;

  000d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000d6	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 751  : 
; 752  : 		this_point = this_point->next_vertex;

  000db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000e0	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  000e3	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 753  : 	}

  000e9	e9 6e ff ff ff	 jmp	 $LN4@horizon_cl
$LN3@horizon_cl:

; 754  : 
; 755  : 	if ( ( last_point->y < 0 ) ^ ( polygon->y < 0 ) )	//last_point->outcode & CLIP_HITHER ) ^ ( polygon->outcode & CLIP_HITHER ) )

  000ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  000f3	0f 57 c0	 xorps	 xmm0, xmm0
  000f6	0f 2f 40 04	 comiss	 xmm0, DWORD PTR [eax+4]
  000fa	76 09		 jbe	 SHORT $LN15@horizon_cl
  000fc	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv83[ebp], 1
  00103	eb 07		 jmp	 SHORT $LN16@horizon_cl
$LN15@horizon_cl:
  00105	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN16@horizon_cl:
  0010c	8b 4d 08	 mov	 ecx, DWORD PTR _polygon$[ebp]
  0010f	0f 57 c0	 xorps	 xmm0, xmm0
  00112	0f 2f 41 04	 comiss	 xmm0, DWORD PTR [ecx+4]
  00116	76 09		 jbe	 SHORT $LN17@horizon_cl
  00118	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv86[ebp], 1
  0011f	eb 07		 jmp	 SHORT $LN18@horizon_cl
$LN17@horizon_cl:
  00121	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
$LN18@horizon_cl:
  00128	8b 55 bc	 mov	 edx, DWORD PTR tv83[ebp]
  0012b	33 55 b8	 xor	 edx, DWORD PTR tv86[ebp]
  0012e	74 2f		 je	 SHORT $LN11@horizon_cl

; 756  : 	{
; 757  : 
; 758  : 		if ( last_point->y < 0 )	//last_point->outcode & CLIP_HITHER )

  00130	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00135	0f 57 c0	 xorps	 xmm0, xmm0
  00138	0f 2f 40 04	 comiss	 xmm0, DWORD PTR [eax+4]
  0013c	76 12		 jbe	 SHORT $LN10@horizon_cl

; 759  : 		{
; 760  : 		
; 761  : 			insert_horizon_coordinate ( last_point, polygon );

  0013e	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00141	50		 push	 eax
  00142	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00148	51		 push	 ecx
  00149	e8 00 00 00 00	 call	 ?insert_horizon_coordinate@@YGXPAUVERTEX@@0@Z ; insert_horizon_coordinate

; 762  : 		}
; 763  : 		else

  0014e	eb 0f		 jmp	 SHORT $LN11@horizon_cl
$LN10@horizon_cl:

; 764  : 		{
; 765  : 	
; 766  : 			insert_horizon_coordinate ( polygon, last_point );

  00150	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00155	50		 push	 eax
  00156	8b 4d 08	 mov	 ecx, DWORD PTR _polygon$[ebp]
  00159	51		 push	 ecx
  0015a	e8 00 00 00 00	 call	 ?insert_horizon_coordinate@@YGXPAUVERTEX@@0@Z ; insert_horizon_coordinate
$LN11@horizon_cl:

; 767  : 		}
; 768  : 	}
; 769  : 
; 770  : 	if ( clip_point )

  0015f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  00166	74 0c		 je	 SHORT $LN12@horizon_cl

; 771  : 	{
; 772  : 
; 773  : 		clip_point->next_vertex = NULL;

  00168	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  0016d	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
$LN12@horizon_cl:

; 774  : 	}
; 775  : 
; 776  : 	if ( !clip_list )

  00174	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, 0
  0017b	75 04		 jne	 SHORT $LN13@horizon_cl

; 777  : 	{
; 778  : 
; 779  : 		return ( NULL );

  0017d	33 c0		 xor	 eax, eax
  0017f	eb 05		 jmp	 SHORT $LN1@horizon_cl
$LN13@horizon_cl:

; 780  : 	}
; 781  : 
; 782  : 	return ( clip_list );

  00181	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
$LN1@horizon_cl:

; 783  : }

  00186	5f		 pop	 edi
  00187	5e		 pop	 esi
  00188	5b		 pop	 ebx
  00189	8b e5		 mov	 esp, ebp
  0018b	5d		 pop	 ebp
  0018c	c2 04 00	 ret	 4
?horizon_clip_3d_polygon@@YGPAUVERTEX@@PAU1@@Z ENDP	; horizon_clip_3d_polygon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dclip.c
;	COMDAT ?yonder_clip_3d_dual_texture_polygon@@YGPAUVERTEX@@PAU1@PAH@Z
_TEXT	SEGMENT
_outcode2$ = -8						; size = 4
_outcode$ = -4						; size = 4
_polygon$ = 8						; size = 4
_polygon_outcode$ = 12					; size = 4
?yonder_clip_3d_dual_texture_polygon@@YGPAUVERTEX@@PAU1@PAH@Z PROC ; yonder_clip_3d_dual_texture_polygon, COMDAT

; 538  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 539  : 
; 540  : 	int
; 541  : 		outcode,
; 542  : 		outcode2;
; 543  : 
; 544  : 	number_of_polygons_yonder_clipped++;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_polygons_yonder_clipped@@3HA ; number_of_polygons_yonder_clipped
  0000e	83 c0 01	 add	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_polygons_yonder_clipped@@3HA, eax ; number_of_polygons_yonder_clipped

; 545  : 
; 546  : 	clip_list = NULL;

  00016	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, 0

; 547  : 
; 548  : 	clip_point = NULL;

  00020	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0

; 549  : 
; 550  : 	last_point = polygon;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0002d	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 551  : 
; 552  : 	this_point = polygon->next_vertex;

  00032	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00035	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00038	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 553  : 
; 554  : 	outcode = 0;

  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _outcode$[ebp], 0

; 555  : 
; 556  : 	outcode2 = CLIP_YONDER | CLIP_HITHER | CLIP_TOP | CLIP_BOTTOM | CLIP_LEFT | CLIP_RIGHT;

  00045	c7 45 f8 3f 00
	00 00		 mov	 DWORD PTR _outcode2$[ebp], 63 ; 0000003fH

; 557  : 
; 558  : 	if ( polygon->z <= clip_yonder )

  0004c	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0004f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?clip_yonder@@3MA
  00057	0f 2f 40 08	 comiss	 xmm0, DWORD PTR [eax+8]
  0005b	72 34		 jb	 SHORT $LN4@yonder_cli

; 559  : 	{
; 560  : 
; 561  : 		//
; 562  : 		// We are ok for the first point.
; 563  : 		//
; 564  : 
; 565  : 		clip_list = polygon;

  0005d	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00060	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 566  : 
; 567  : 		clip_point = polygon;

  00065	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00068	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 568  : 
; 569  : 		polygon->next_vertex = NULL;

  0006d	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00070	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 570  : 
; 571  : 		outcode |= polygon->outcode;

  00077	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0007a	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  0007e	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  00081	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 572  : 
; 573  : 		outcode2 &= polygon->outcode;

  00084	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00087	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  0008b	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  0008e	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN4@yonder_cli:

; 574  : 	}
; 575  : 
; 576  : 	while ( this_point )

  00091	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?this_point@@3PAUVERTEX@@A, 0
  00098	0f 84 df 00 00
	00		 je	 $LN3@yonder_cli

; 577  : 	{
; 578  : 
; 579  : 		if ( !( this_point->outcode & CLIP_YONDER ) )

  0009e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000a3	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000a7	83 e1 10	 and	 ecx, 16			; 00000010H
  000aa	75 76		 jne	 SHORT $LN5@yonder_cli

; 580  : 		{
; 581  : 
; 582  : 			//
; 583  : 			// This point is on the screen
; 584  : 			//
; 585  : 
; 586  : 			outcode |= this_point->outcode;

  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000b1	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000b5	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  000b8	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 587  : 
; 588  : 			outcode2 &= this_point->outcode;

  000bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000c0	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000c4	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  000c7	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx

; 589  : 
; 590  : 			if ( last_point->outcode & CLIP_YONDER )

  000ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  000cf	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000d3	83 e1 10	 and	 ecx, 16			; 00000010H
  000d6	74 30		 je	 SHORT $LN7@yonder_cli

; 591  : 			{
; 592  : 
; 593  : 				//
; 594  : 				// Last point was not on the screen, so we have to add a clip point.
; 595  : 				//
; 596  : 
; 597  : 				insert_z_far_dual_texture_coordinate ( last_point, this_point );

  000d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000dd	50		 push	 eax
  000de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  000e4	51		 push	 ecx
  000e5	e8 00 00 00 00	 call	 ?insert_z_far_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ; insert_z_far_dual_texture_coordinate

; 598  : 
; 599  : 				outcode |= clip_point->outcode;

  000ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  000ef	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000f3	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  000f6	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 600  : 
; 601  : 				outcode2 &= clip_point->outcode;

  000f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  000fe	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00102	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  00105	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN7@yonder_cli:

; 602  : 			}
; 603  : 
; 604  : 			// Here, we are guaranteed to have a coordinate in the clip list - the above routine just put one in!
; 605  : 
; 606  : 			clip_point->next_vertex = this_point;

  00108	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  0010d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00113	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 607  : 
; 608  : 			clip_point = this_point;

  00116	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0011b	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 609  : 		}
; 610  : 		else

  00120	eb 3e		 jmp	 SHORT $LN8@yonder_cli
$LN5@yonder_cli:

; 611  : 		{
; 612  : 
; 613  : 			//
; 614  : 			// This point is not on the screen
; 615  : 			//
; 616  : 
; 617  : 			if ( ! ( last_point->outcode & CLIP_YONDER ) )

  00122	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00127	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  0012b	83 e1 10	 and	 ecx, 16			; 00000010H
  0012e	75 30		 jne	 SHORT $LN8@yonder_cli

; 618  : 			{
; 619  : 
; 620  : 				//
; 621  : 				// The last point was visible - find intersection point
; 622  : 				//
; 623  : 
; 624  : 				insert_z_far_dual_texture_coordinate ( this_point, last_point );

  00130	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00135	50		 push	 eax
  00136	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0013c	51		 push	 ecx
  0013d	e8 00 00 00 00	 call	 ?insert_z_far_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ; insert_z_far_dual_texture_coordinate

; 625  : 
; 626  : 				outcode |= clip_point->outcode;

  00142	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00147	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  0014b	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  0014e	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 627  : 
; 628  : 				outcode2 &= clip_point->outcode;

  00151	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00156	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  0015a	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  0015d	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN8@yonder_cli:

; 629  : 			}
; 630  : 		}
; 631  : 
; 632  : 		last_point = this_point;

  00160	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00165	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 633  : 
; 634  : 		this_point = this_point->next_vertex;

  0016a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0016f	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00172	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 635  : 	}

  00178	e9 14 ff ff ff	 jmp	 $LN4@yonder_cli
$LN3@yonder_cli:

; 636  : 
; 637  : 	if ( ( last_point->outcode & CLIP_YONDER ) ^ ( polygon->outcode & CLIP_YONDER ) )

  0017d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00182	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00186	83 e1 10	 and	 ecx, 16			; 00000010H
  00189	8b 55 08	 mov	 edx, DWORD PTR _polygon$[ebp]
  0018c	0f b6 42 2c	 movzx	 eax, BYTE PTR [edx+44]
  00190	83 e0 10	 and	 eax, 16			; 00000010H
  00193	33 c8		 xor	 ecx, eax
  00195	74 4d		 je	 SHORT $LN9@yonder_cli

; 638  : 	{
; 639  : 
; 640  : 		if ( last_point->outcode & CLIP_YONDER )

  00197	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0019c	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  001a0	83 e1 10	 and	 ecx, 16			; 00000010H
  001a3	74 12		 je	 SHORT $LN10@yonder_cli

; 641  : 		{
; 642  : 		
; 643  : 			insert_z_far_dual_texture_coordinate ( last_point, polygon );

  001a5	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  001a8	50		 push	 eax
  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  001af	51		 push	 ecx
  001b0	e8 00 00 00 00	 call	 ?insert_z_far_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ; insert_z_far_dual_texture_coordinate

; 644  : 		}
; 645  : 		else

  001b5	eb 0f		 jmp	 SHORT $LN11@yonder_cli
$LN10@yonder_cli:

; 646  : 		{
; 647  : 	
; 648  : 			insert_z_far_dual_texture_coordinate ( polygon, last_point );

  001b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  001bc	50		 push	 eax
  001bd	8b 4d 08	 mov	 ecx, DWORD PTR _polygon$[ebp]
  001c0	51		 push	 ecx
  001c1	e8 00 00 00 00	 call	 ?insert_z_far_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ; insert_z_far_dual_texture_coordinate
$LN11@yonder_cli:

; 649  : 		}
; 650  : 
; 651  : 		outcode |= clip_point->outcode;

  001c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001cb	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  001cf	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  001d2	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 652  : 
; 653  : 		outcode2 &= clip_point->outcode;

  001d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001da	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  001de	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  001e1	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN9@yonder_cli:

; 654  : 	}
; 655  : 
; 656  : 	if ( clip_point )

  001e4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  001eb	74 2a		 je	 SHORT $LN12@yonder_cli

; 657  : 	{
; 658  : 
; 659  : 		clip_point->next_vertex = NULL;

  001ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001f2	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 660  : 
; 661  : 		outcode |= clip_point->outcode;

  001f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001fe	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00202	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  00205	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 662  : 
; 663  : 		outcode2 &= clip_point->outcode;

  00208	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  0020d	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00211	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  00214	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN12@yonder_cli:

; 664  : 	}
; 665  : 
; 666  : 	if ( ( outcode2 ) || ( !clip_list ) )

  00217	83 7d f8 00	 cmp	 DWORD PTR _outcode2$[ebp], 0
  0021b	75 09		 jne	 SHORT $LN14@yonder_cli
  0021d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, 0
  00224	75 04		 jne	 SHORT $LN13@yonder_cli
$LN14@yonder_cli:

; 667  : 	{
; 668  : 
; 669  : 		return ( NULL );

  00226	33 c0		 xor	 eax, eax
  00228	eb 0d		 jmp	 SHORT $LN1@yonder_cli
$LN13@yonder_cli:

; 670  : 	}
; 671  : 
; 672  : 	*polygon_outcode = outcode;

  0022a	8b 45 0c	 mov	 eax, DWORD PTR _polygon_outcode$[ebp]
  0022d	8b 4d fc	 mov	 ecx, DWORD PTR _outcode$[ebp]
  00230	89 08		 mov	 DWORD PTR [eax], ecx

; 673  : 
; 674  : 	return ( clip_list );

  00232	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
$LN1@yonder_cli:

; 675  : }

  00237	5f		 pop	 edi
  00238	5e		 pop	 esi
  00239	5b		 pop	 ebx
  0023a	8b e5		 mov	 esp, ebp
  0023c	5d		 pop	 ebp
  0023d	c2 08 00	 ret	 8
?yonder_clip_3d_dual_texture_polygon@@YGPAUVERTEX@@PAU1@PAH@Z ENDP ; yonder_clip_3d_dual_texture_polygon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dclip.c
;	COMDAT ?hither_clip_3d_dual_texture_polygon@@YGPAUVERTEX@@PAU1@PAH@Z
_TEXT	SEGMENT
_outcode2$ = -8						; size = 4
_outcode$ = -4						; size = 4
_polygon$ = 8						; size = 4
_polygon_outcode$ = 12					; size = 4
?hither_clip_3d_dual_texture_polygon@@YGPAUVERTEX@@PAU1@PAH@Z PROC ; hither_clip_3d_dual_texture_polygon, COMDAT

; 393  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 394  : 
; 395  : 	int
; 396  : 		outcode,
; 397  : 		outcode2;
; 398  : 
; 399  : 	number_of_polygons_hither_clipped++;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_polygons_hither_clipped@@3HA ; number_of_polygons_hither_clipped
  0000e	83 c0 01	 add	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_polygons_hither_clipped@@3HA, eax ; number_of_polygons_hither_clipped

; 400  : 
; 401  : 	clip_list = NULL;

  00016	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, 0

; 402  : 
; 403  : 	clip_point = NULL;

  00020	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0

; 404  : 
; 405  : 	last_point = polygon;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0002d	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 406  : 
; 407  : 	this_point = polygon->next_vertex;

  00032	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00035	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00038	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 408  : 
; 409  : 	outcode = 0;

  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _outcode$[ebp], 0

; 410  : 
; 411  : 	outcode2 = CLIP_YONDER | CLIP_HITHER | CLIP_TOP | CLIP_BOTTOM | CLIP_LEFT | CLIP_RIGHT;

  00045	c7 45 f8 3f 00
	00 00		 mov	 DWORD PTR _outcode2$[ebp], 63 ; 0000003fH

; 412  : 
; 413  : 	if ( polygon->z >= clip_hither )

  0004c	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0004f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00054	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?clip_hither@@3MA
  0005b	72 34		 jb	 SHORT $LN4@hither_cli

; 414  : 	{
; 415  : 
; 416  : 		//
; 417  : 		// We are ok for the first point.
; 418  : 		//
; 419  : 
; 420  : 		clip_list = polygon;

  0005d	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00060	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 421  : 
; 422  : 		clip_point = polygon;

  00065	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00068	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 423  : 
; 424  : 		polygon->next_vertex = NULL;

  0006d	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00070	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 425  : 
; 426  : 		outcode |= polygon->outcode;

  00077	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0007a	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  0007e	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  00081	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 427  : 
; 428  : 		outcode2 &= polygon->outcode;

  00084	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00087	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  0008b	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  0008e	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN4@hither_cli:

; 429  : 	}
; 430  : 
; 431  : 	while ( this_point )

  00091	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?this_point@@3PAUVERTEX@@A, 0
  00098	0f 84 df 00 00
	00		 je	 $LN3@hither_cli

; 432  : 	{
; 433  : 
; 434  : 		if ( !( this_point->outcode & CLIP_HITHER ) )

  0009e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000a3	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000a7	83 e1 20	 and	 ecx, 32			; 00000020H
  000aa	75 76		 jne	 SHORT $LN5@hither_cli

; 435  : 		{
; 436  : 
; 437  : 			//
; 438  : 			// This point is on the screen
; 439  : 			//
; 440  : 
; 441  : 			outcode |= this_point->outcode;

  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000b1	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000b5	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  000b8	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 442  : 
; 443  : 			outcode2 &= this_point->outcode;

  000bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000c0	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000c4	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  000c7	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx

; 444  : 
; 445  : 			if ( last_point->outcode & CLIP_HITHER )

  000ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  000cf	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000d3	83 e1 20	 and	 ecx, 32			; 00000020H
  000d6	74 30		 je	 SHORT $LN7@hither_cli

; 446  : 			{
; 447  : 
; 448  : 				//
; 449  : 				// Last point was not on the screen, so we have to add a clip point.
; 450  : 				//
; 451  : 
; 452  : 				insert_z_near_dual_texture_coordinate ( last_point, this_point );

  000d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000dd	50		 push	 eax
  000de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  000e4	51		 push	 ecx
  000e5	e8 00 00 00 00	 call	 ?insert_z_near_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ; insert_z_near_dual_texture_coordinate

; 453  : 
; 454  : 				outcode |= clip_point->outcode;

  000ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  000ef	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000f3	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  000f6	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 455  : 
; 456  : 				outcode2 &= clip_point->outcode;

  000f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  000fe	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00102	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  00105	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN7@hither_cli:

; 457  : 			}
; 458  : 
; 459  : 			// Here, we are guaranteed to have a coordinate in the clip list - the above routine just put one in!
; 460  : 
; 461  : 			clip_point->next_vertex = this_point;

  00108	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  0010d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00113	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 462  : 
; 463  : 			clip_point = this_point;

  00116	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0011b	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 464  : 		}
; 465  : 		else

  00120	eb 3e		 jmp	 SHORT $LN8@hither_cli
$LN5@hither_cli:

; 466  : 		{
; 467  : 
; 468  : 			//
; 469  : 			// This point is not on the screen
; 470  : 			//
; 471  : 
; 472  : 			if ( ! ( last_point->outcode & CLIP_HITHER ) )

  00122	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00127	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  0012b	83 e1 20	 and	 ecx, 32			; 00000020H
  0012e	75 30		 jne	 SHORT $LN8@hither_cli

; 473  : 			{
; 474  : 
; 475  : 				//
; 476  : 				// The last point was visible - find intersection point
; 477  : 				//
; 478  : 
; 479  : 				insert_z_near_dual_texture_coordinate ( this_point, last_point );

  00130	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00135	50		 push	 eax
  00136	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0013c	51		 push	 ecx
  0013d	e8 00 00 00 00	 call	 ?insert_z_near_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ; insert_z_near_dual_texture_coordinate

; 480  : 
; 481  : 				outcode |= clip_point->outcode;

  00142	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00147	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  0014b	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  0014e	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 482  : 
; 483  : 				outcode2 &= clip_point->outcode;

  00151	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00156	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  0015a	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  0015d	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN8@hither_cli:

; 484  : 			}
; 485  : 		}
; 486  : 
; 487  : 		last_point = this_point;

  00160	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00165	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 488  : 
; 489  : 		this_point = this_point->next_vertex;

  0016a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0016f	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00172	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 490  : 	}

  00178	e9 14 ff ff ff	 jmp	 $LN4@hither_cli
$LN3@hither_cli:

; 491  : 
; 492  : 	if ( ( last_point->outcode & CLIP_HITHER ) ^ ( polygon->outcode & CLIP_HITHER ) )

  0017d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00182	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00186	83 e1 20	 and	 ecx, 32			; 00000020H
  00189	8b 55 08	 mov	 edx, DWORD PTR _polygon$[ebp]
  0018c	0f b6 42 2c	 movzx	 eax, BYTE PTR [edx+44]
  00190	83 e0 20	 and	 eax, 32			; 00000020H
  00193	33 c8		 xor	 ecx, eax
  00195	74 4d		 je	 SHORT $LN9@hither_cli

; 493  : 	{
; 494  : 
; 495  : 		if ( last_point->outcode & CLIP_HITHER )

  00197	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0019c	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  001a0	83 e1 20	 and	 ecx, 32			; 00000020H
  001a3	74 12		 je	 SHORT $LN10@hither_cli

; 496  : 		{
; 497  : 		
; 498  : 			insert_z_near_dual_texture_coordinate ( last_point, polygon );

  001a5	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  001a8	50		 push	 eax
  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  001af	51		 push	 ecx
  001b0	e8 00 00 00 00	 call	 ?insert_z_near_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ; insert_z_near_dual_texture_coordinate

; 499  : 		}
; 500  : 		else

  001b5	eb 0f		 jmp	 SHORT $LN11@hither_cli
$LN10@hither_cli:

; 501  : 		{
; 502  : 	
; 503  : 			insert_z_near_dual_texture_coordinate ( polygon, last_point );

  001b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  001bc	50		 push	 eax
  001bd	8b 4d 08	 mov	 ecx, DWORD PTR _polygon$[ebp]
  001c0	51		 push	 ecx
  001c1	e8 00 00 00 00	 call	 ?insert_z_near_dual_texture_coordinate@@YGXPAUVERTEX@@0@Z ; insert_z_near_dual_texture_coordinate
$LN11@hither_cli:

; 504  : 		}
; 505  : 
; 506  : 		outcode |= clip_point->outcode;

  001c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001cb	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  001cf	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  001d2	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 507  : 
; 508  : 		outcode2 &= clip_point->outcode;

  001d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001da	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  001de	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  001e1	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN9@hither_cli:

; 509  : 	}
; 510  : 
; 511  : 	if ( clip_point )

  001e4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  001eb	74 2a		 je	 SHORT $LN12@hither_cli

; 512  : 	{
; 513  : 
; 514  : 		clip_point->next_vertex = NULL;

  001ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001f2	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 515  : 
; 516  : 		outcode |= clip_point->outcode;

  001f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001fe	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00202	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  00205	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 517  : 
; 518  : 		outcode2 &= clip_point->outcode;

  00208	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  0020d	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00211	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  00214	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN12@hither_cli:

; 519  : 	}
; 520  : 
; 521  : 	if ( ( outcode2 ) || ( !clip_list ) )	//( outcode2 ) || ( ! clip_list ) )

  00217	83 7d f8 00	 cmp	 DWORD PTR _outcode2$[ebp], 0
  0021b	75 09		 jne	 SHORT $LN14@hither_cli
  0021d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, 0
  00224	75 04		 jne	 SHORT $LN13@hither_cli
$LN14@hither_cli:

; 522  : 	{
; 523  : 
; 524  : 		return ( NULL );

  00226	33 c0		 xor	 eax, eax
  00228	eb 0d		 jmp	 SHORT $LN1@hither_cli
$LN13@hither_cli:

; 525  : 	}
; 526  : 
; 527  : 	*polygon_outcode = outcode;

  0022a	8b 45 0c	 mov	 eax, DWORD PTR _polygon_outcode$[ebp]
  0022d	8b 4d fc	 mov	 ecx, DWORD PTR _outcode$[ebp]
  00230	89 08		 mov	 DWORD PTR [eax], ecx

; 528  : //	clip_list->polygon_outcode = outcode;
; 529  : 
; 530  : 	return ( clip_list );

  00232	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
$LN1@hither_cli:

; 531  : }

  00237	5f		 pop	 edi
  00238	5e		 pop	 esi
  00239	5b		 pop	 ebx
  0023a	8b e5		 mov	 esp, ebp
  0023c	5d		 pop	 ebp
  0023d	c2 08 00	 ret	 8
?hither_clip_3d_dual_texture_polygon@@YGPAUVERTEX@@PAU1@PAH@Z ENDP ; hither_clip_3d_dual_texture_polygon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dclip.c
;	COMDAT ?yonder_clip_3d_polygon@@YGPAUVERTEX@@PAU1@PAH@Z
_TEXT	SEGMENT
_outcode2$ = -8						; size = 4
_outcode$ = -4						; size = 4
_polygon$ = 8						; size = 4
_polygon_outcode$ = 12					; size = 4
?yonder_clip_3d_polygon@@YGPAUVERTEX@@PAU1@PAH@Z PROC	; yonder_clip_3d_polygon, COMDAT

; 249  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 250  : 
; 251  : 	int
; 252  : 		outcode,
; 253  : 		outcode2;
; 254  : 
; 255  : 	number_of_polygons_yonder_clipped++;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_polygons_yonder_clipped@@3HA ; number_of_polygons_yonder_clipped
  0000e	83 c0 01	 add	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_polygons_yonder_clipped@@3HA, eax ; number_of_polygons_yonder_clipped

; 256  : 
; 257  : 	clip_list = NULL;

  00016	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, 0

; 258  : 
; 259  : 	clip_point = NULL;

  00020	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0

; 260  : 
; 261  : 	last_point = polygon;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0002d	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 262  : 
; 263  : 	this_point = polygon->next_vertex;

  00032	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00035	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00038	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 264  : 
; 265  : 	outcode = 0;

  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _outcode$[ebp], 0

; 266  : 
; 267  : 	outcode2 = CLIP_YONDER | CLIP_HITHER | CLIP_TOP | CLIP_BOTTOM | CLIP_LEFT | CLIP_RIGHT;

  00045	c7 45 f8 3f 00
	00 00		 mov	 DWORD PTR _outcode2$[ebp], 63 ; 0000003fH

; 268  : 
; 269  : 	if ( polygon->z <= clip_yonder )

  0004c	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0004f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?clip_yonder@@3MA
  00057	0f 2f 40 08	 comiss	 xmm0, DWORD PTR [eax+8]
  0005b	72 34		 jb	 SHORT $LN4@yonder_cli

; 270  : 	{
; 271  : 
; 272  : 		//
; 273  : 		// We are ok for the first point.
; 274  : 		//
; 275  : 
; 276  : 		clip_list = polygon;

  0005d	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00060	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 277  : 
; 278  : 		clip_point = polygon;

  00065	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00068	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 279  : 
; 280  : 		polygon->next_vertex = NULL;

  0006d	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00070	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 281  : 
; 282  : 		outcode |= polygon->outcode;

  00077	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0007a	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  0007e	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  00081	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 283  : 
; 284  : 		outcode2 &= polygon->outcode;

  00084	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00087	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  0008b	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  0008e	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN4@yonder_cli:

; 285  : 	}
; 286  : 
; 287  : 	while ( this_point )

  00091	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?this_point@@3PAUVERTEX@@A, 0
  00098	0f 84 df 00 00
	00		 je	 $LN3@yonder_cli

; 288  : 	{
; 289  : 
; 290  : 		if ( !( this_point->outcode & CLIP_YONDER ) )

  0009e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000a3	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000a7	83 e1 10	 and	 ecx, 16			; 00000010H
  000aa	75 76		 jne	 SHORT $LN5@yonder_cli

; 291  : 		{
; 292  : 
; 293  : 			//
; 294  : 			// This point is on the screen
; 295  : 			//
; 296  : 
; 297  : 			outcode |= this_point->outcode;

  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000b1	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000b5	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  000b8	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 298  : 
; 299  : 			outcode2 &= this_point->outcode;

  000bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000c0	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000c4	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  000c7	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx

; 300  : 
; 301  : 			if ( last_point->outcode & CLIP_YONDER )

  000ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  000cf	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000d3	83 e1 10	 and	 ecx, 16			; 00000010H
  000d6	74 30		 je	 SHORT $LN7@yonder_cli

; 302  : 			{
; 303  : 
; 304  : 				//
; 305  : 				// Last point was not on the screen, so we have to add a clip point.
; 306  : 				//
; 307  : 
; 308  : 				insert_z_far_coordinate ( last_point, this_point );

  000d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000dd	50		 push	 eax
  000de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  000e4	51		 push	 ecx
  000e5	e8 00 00 00 00	 call	 ?insert_z_far_coordinate@@YGXPAUVERTEX@@0@Z ; insert_z_far_coordinate

; 309  : 
; 310  : 				outcode |= clip_point->outcode;

  000ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  000ef	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000f3	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  000f6	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 311  : 
; 312  : 				outcode2 &= clip_point->outcode;

  000f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  000fe	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00102	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  00105	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN7@yonder_cli:

; 313  : 			}
; 314  : 
; 315  : 			// Here, we are guaranteed to have a coordinate in the clip list - the above routine just put one in!
; 316  : 
; 317  : 			clip_point->next_vertex = this_point;

  00108	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  0010d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00113	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 318  : 
; 319  : 			clip_point = this_point;

  00116	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0011b	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 320  : 		}
; 321  : 		else

  00120	eb 3e		 jmp	 SHORT $LN8@yonder_cli
$LN5@yonder_cli:

; 322  : 		{
; 323  : 
; 324  : 			//
; 325  : 			// This point is not on the screen
; 326  : 			//
; 327  : 
; 328  : 			if ( ! ( last_point->outcode & CLIP_YONDER ) )

  00122	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00127	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  0012b	83 e1 10	 and	 ecx, 16			; 00000010H
  0012e	75 30		 jne	 SHORT $LN8@yonder_cli

; 329  : 			{
; 330  : 
; 331  : 				//
; 332  : 				// The last point was visible - find intersection point
; 333  : 				//
; 334  : 
; 335  : 				insert_z_far_coordinate ( this_point, last_point );

  00130	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00135	50		 push	 eax
  00136	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0013c	51		 push	 ecx
  0013d	e8 00 00 00 00	 call	 ?insert_z_far_coordinate@@YGXPAUVERTEX@@0@Z ; insert_z_far_coordinate

; 336  : 
; 337  : 				outcode |= clip_point->outcode;

  00142	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00147	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  0014b	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  0014e	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 338  : 
; 339  : 				outcode2 &= clip_point->outcode;

  00151	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00156	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  0015a	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  0015d	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN8@yonder_cli:

; 340  : 			}
; 341  : 		}
; 342  : 
; 343  : 		last_point = this_point;

  00160	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00165	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 344  : 
; 345  : 		this_point = this_point->next_vertex;

  0016a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0016f	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00172	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 346  : 	}

  00178	e9 14 ff ff ff	 jmp	 $LN4@yonder_cli
$LN3@yonder_cli:

; 347  : 
; 348  : 	if ( ( last_point->outcode & CLIP_YONDER ) ^ ( polygon->outcode & CLIP_YONDER ) )

  0017d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00182	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00186	83 e1 10	 and	 ecx, 16			; 00000010H
  00189	8b 55 08	 mov	 edx, DWORD PTR _polygon$[ebp]
  0018c	0f b6 42 2c	 movzx	 eax, BYTE PTR [edx+44]
  00190	83 e0 10	 and	 eax, 16			; 00000010H
  00193	33 c8		 xor	 ecx, eax
  00195	74 4d		 je	 SHORT $LN9@yonder_cli

; 349  : 	{
; 350  : 
; 351  : 		if ( last_point->outcode & CLIP_YONDER )

  00197	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0019c	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  001a0	83 e1 10	 and	 ecx, 16			; 00000010H
  001a3	74 12		 je	 SHORT $LN10@yonder_cli

; 352  : 		{
; 353  : 		
; 354  : 			insert_z_far_coordinate ( last_point, polygon );

  001a5	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  001a8	50		 push	 eax
  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  001af	51		 push	 ecx
  001b0	e8 00 00 00 00	 call	 ?insert_z_far_coordinate@@YGXPAUVERTEX@@0@Z ; insert_z_far_coordinate

; 355  : 		}
; 356  : 		else

  001b5	eb 0f		 jmp	 SHORT $LN11@yonder_cli
$LN10@yonder_cli:

; 357  : 		{
; 358  : 	
; 359  : 			insert_z_far_coordinate ( polygon, last_point );

  001b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  001bc	50		 push	 eax
  001bd	8b 4d 08	 mov	 ecx, DWORD PTR _polygon$[ebp]
  001c0	51		 push	 ecx
  001c1	e8 00 00 00 00	 call	 ?insert_z_far_coordinate@@YGXPAUVERTEX@@0@Z ; insert_z_far_coordinate
$LN11@yonder_cli:

; 360  : 		}
; 361  : 
; 362  : 		outcode |= clip_point->outcode;

  001c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001cb	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  001cf	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  001d2	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 363  : 
; 364  : 		outcode2 &= clip_point->outcode;

  001d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001da	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  001de	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  001e1	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN9@yonder_cli:

; 365  : 	}
; 366  : 
; 367  : 	if ( clip_point )

  001e4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  001eb	74 2a		 je	 SHORT $LN12@yonder_cli

; 368  : 	{
; 369  : 
; 370  : 		clip_point->next_vertex = NULL;

  001ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001f2	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 371  : 
; 372  : 		outcode |= clip_point->outcode;

  001f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001fe	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00202	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  00205	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 373  : 
; 374  : 		outcode2 &= clip_point->outcode;

  00208	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  0020d	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00211	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  00214	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN12@yonder_cli:

; 375  : 	}
; 376  : 
; 377  : 	if ( ( outcode2 ) || ( !clip_list ) )

  00217	83 7d f8 00	 cmp	 DWORD PTR _outcode2$[ebp], 0
  0021b	75 09		 jne	 SHORT $LN14@yonder_cli
  0021d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, 0
  00224	75 04		 jne	 SHORT $LN13@yonder_cli
$LN14@yonder_cli:

; 378  : 	{
; 379  : 
; 380  : 		return ( NULL );

  00226	33 c0		 xor	 eax, eax
  00228	eb 0d		 jmp	 SHORT $LN1@yonder_cli
$LN13@yonder_cli:

; 381  : 	}
; 382  : 
; 383  : 	*polygon_outcode = outcode;

  0022a	8b 45 0c	 mov	 eax, DWORD PTR _polygon_outcode$[ebp]
  0022d	8b 4d fc	 mov	 ecx, DWORD PTR _outcode$[ebp]
  00230	89 08		 mov	 DWORD PTR [eax], ecx

; 384  : 
; 385  : 	return ( clip_list );

  00232	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
$LN1@yonder_cli:

; 386  : }

  00237	5f		 pop	 edi
  00238	5e		 pop	 esi
  00239	5b		 pop	 ebx
  0023a	8b e5		 mov	 esp, ebp
  0023c	5d		 pop	 ebp
  0023d	c2 08 00	 ret	 8
?yonder_clip_3d_polygon@@YGPAUVERTEX@@PAU1@PAH@Z ENDP	; yonder_clip_3d_polygon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dclip.c
;	COMDAT ?hither_clip_3d_polygon@@YGPAUVERTEX@@PAU1@PAH@Z
_TEXT	SEGMENT
_outcode2$ = -8						; size = 4
_outcode$ = -4						; size = 4
_polygon$ = 8						; size = 4
_polygon_outcode$ = 12					; size = 4
?hither_clip_3d_polygon@@YGPAUVERTEX@@PAU1@PAH@Z PROC	; hither_clip_3d_polygon, COMDAT

; 104  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 105  : 
; 106  : 	int
; 107  : 		outcode,
; 108  : 		outcode2;
; 109  : 
; 110  : 	number_of_polygons_hither_clipped++;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_polygons_hither_clipped@@3HA ; number_of_polygons_hither_clipped
  0000e	83 c0 01	 add	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_polygons_hither_clipped@@3HA, eax ; number_of_polygons_hither_clipped

; 111  : 
; 112  : 	clip_list = NULL;

  00016	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, 0

; 113  : 
; 114  : 	clip_point = NULL;

  00020	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0

; 115  : 
; 116  : 	last_point = polygon;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0002d	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 117  : 
; 118  : 	this_point = polygon->next_vertex;

  00032	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00035	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00038	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 119  : 
; 120  : 	outcode = 0;

  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _outcode$[ebp], 0

; 121  : 
; 122  : 	outcode2 = CLIP_YONDER | CLIP_HITHER | CLIP_TOP | CLIP_BOTTOM | CLIP_LEFT | CLIP_RIGHT;

  00045	c7 45 f8 3f 00
	00 00		 mov	 DWORD PTR _outcode2$[ebp], 63 ; 0000003fH

; 123  : 
; 124  : 	if ( polygon->z >= clip_hither )

  0004c	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0004f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00054	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?clip_hither@@3MA
  0005b	72 34		 jb	 SHORT $LN4@hither_cli

; 125  : 	{
; 126  : 
; 127  : 		//
; 128  : 		// We are ok for the first point.
; 129  : 		//
; 130  : 
; 131  : 		clip_list = polygon;

  0005d	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00060	a3 00 00 00 00	 mov	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, eax

; 132  : 
; 133  : 		clip_point = polygon;

  00065	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00068	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 134  : 
; 135  : 		polygon->next_vertex = NULL;

  0006d	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00070	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 136  : 
; 137  : 		outcode |= polygon->outcode;

  00077	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0007a	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  0007e	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  00081	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 138  : 
; 139  : 		outcode2 &= polygon->outcode;

  00084	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00087	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  0008b	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  0008e	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN4@hither_cli:

; 140  : 	}
; 141  : 
; 142  : 	while ( this_point )

  00091	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?this_point@@3PAUVERTEX@@A, 0
  00098	0f 84 df 00 00
	00		 je	 $LN3@hither_cli

; 143  : 	{
; 144  : 
; 145  : 		if ( !( this_point->outcode & CLIP_HITHER ) )

  0009e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000a3	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000a7	83 e1 20	 and	 ecx, 32			; 00000020H
  000aa	75 76		 jne	 SHORT $LN5@hither_cli

; 146  : 		{
; 147  : 
; 148  : 			//
; 149  : 			// This point is on the screen
; 150  : 			//
; 151  : 
; 152  : 			outcode |= this_point->outcode;

  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000b1	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000b5	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  000b8	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 153  : 
; 154  : 			outcode2 &= this_point->outcode;

  000bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000c0	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000c4	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  000c7	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx

; 155  : 
; 156  : 			if ( last_point->outcode & CLIP_HITHER )

  000ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  000cf	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000d3	83 e1 20	 and	 ecx, 32			; 00000020H
  000d6	74 30		 je	 SHORT $LN7@hither_cli

; 157  : 			{
; 158  : 
; 159  : 				//
; 160  : 				// Last point was not on the screen, so we have to add a clip point.
; 161  : 				//
; 162  : 
; 163  : 				insert_z_near_coordinate ( last_point, this_point );

  000d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  000dd	50		 push	 eax
  000de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  000e4	51		 push	 ecx
  000e5	e8 00 00 00 00	 call	 ?insert_z_near_coordinate@@YGXPAUVERTEX@@0@Z ; insert_z_near_coordinate

; 164  : 
; 165  : 				outcode |= clip_point->outcode;

  000ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  000ef	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000f3	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  000f6	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 166  : 
; 167  : 				outcode2 &= clip_point->outcode;

  000f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  000fe	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00102	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  00105	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN7@hither_cli:

; 168  : 			}
; 169  : 
; 170  : 			// Here, we are guaranteed to have a coordinate in the clip list - the above routine just put one in!
; 171  : 
; 172  : 			clip_point->next_vertex = this_point;

  00108	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  0010d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00113	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 173  : 
; 174  : 			clip_point = this_point;

  00116	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0011b	a3 00 00 00 00	 mov	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, eax

; 175  : 		}
; 176  : 		else

  00120	eb 3e		 jmp	 SHORT $LN8@hither_cli
$LN5@hither_cli:

; 177  : 		{
; 178  : 
; 179  : 			//
; 180  : 			// This point is not on the screen
; 181  : 			//
; 182  : 
; 183  : 			if ( ! ( last_point->outcode & CLIP_HITHER ) )

  00122	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00127	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  0012b	83 e1 20	 and	 ecx, 32			; 00000020H
  0012e	75 30		 jne	 SHORT $LN8@hither_cli

; 184  : 			{
; 185  : 
; 186  : 				//
; 187  : 				// The last point was visible - find intersection point
; 188  : 				//
; 189  : 
; 190  : 				insert_z_near_coordinate ( this_point, last_point );

  00130	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00135	50		 push	 eax
  00136	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0013c	51		 push	 ecx
  0013d	e8 00 00 00 00	 call	 ?insert_z_near_coordinate@@YGXPAUVERTEX@@0@Z ; insert_z_near_coordinate

; 191  : 
; 192  : 				outcode |= clip_point->outcode;

  00142	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00147	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  0014b	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  0014e	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 193  : 
; 194  : 				outcode2 &= clip_point->outcode;

  00151	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  00156	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  0015a	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  0015d	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN8@hither_cli:

; 195  : 			}
; 196  : 		}
; 197  : 
; 198  : 		last_point = this_point;

  00160	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  00165	a3 00 00 00 00	 mov	 DWORD PTR ?last_point@@3PAUVERTEX@@A, eax

; 199  : 
; 200  : 		this_point = this_point->next_vertex;

  0016a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?this_point@@3PAUVERTEX@@A
  0016f	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00172	89 0d 00 00 00
	00		 mov	 DWORD PTR ?this_point@@3PAUVERTEX@@A, ecx

; 201  : 	}

  00178	e9 14 ff ff ff	 jmp	 $LN4@hither_cli
$LN3@hither_cli:

; 202  : 
; 203  : 	if ( ( last_point->outcode & CLIP_HITHER ) ^ ( polygon->outcode & CLIP_HITHER ) )

  0017d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  00182	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00186	83 e1 20	 and	 ecx, 32			; 00000020H
  00189	8b 55 08	 mov	 edx, DWORD PTR _polygon$[ebp]
  0018c	0f b6 42 2c	 movzx	 eax, BYTE PTR [edx+44]
  00190	83 e0 20	 and	 eax, 32			; 00000020H
  00193	33 c8		 xor	 ecx, eax
  00195	74 4d		 je	 SHORT $LN9@hither_cli

; 204  : 	{
; 205  : 
; 206  : 		if ( last_point->outcode & CLIP_HITHER )

  00197	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  0019c	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  001a0	83 e1 20	 and	 ecx, 32			; 00000020H
  001a3	74 12		 je	 SHORT $LN10@hither_cli

; 207  : 		{
; 208  : 		
; 209  : 			insert_z_near_coordinate ( last_point, polygon );

  001a5	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  001a8	50		 push	 eax
  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_point@@3PAUVERTEX@@A
  001af	51		 push	 ecx
  001b0	e8 00 00 00 00	 call	 ?insert_z_near_coordinate@@YGXPAUVERTEX@@0@Z ; insert_z_near_coordinate

; 210  : 		}
; 211  : 		else

  001b5	eb 0f		 jmp	 SHORT $LN11@hither_cli
$LN10@hither_cli:

; 212  : 		{
; 213  : 	
; 214  : 			insert_z_near_coordinate ( polygon, last_point );

  001b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_point@@3PAUVERTEX@@A
  001bc	50		 push	 eax
  001bd	8b 4d 08	 mov	 ecx, DWORD PTR _polygon$[ebp]
  001c0	51		 push	 ecx
  001c1	e8 00 00 00 00	 call	 ?insert_z_near_coordinate@@YGXPAUVERTEX@@0@Z ; insert_z_near_coordinate
$LN11@hither_cli:

; 215  : 		}
; 216  : 
; 217  : 		outcode |= clip_point->outcode;

  001c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001cb	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  001cf	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  001d2	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 218  : 
; 219  : 		outcode2 &= clip_point->outcode;

  001d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001da	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  001de	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  001e1	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN9@hither_cli:

; 220  : 	}
; 221  : 
; 222  : 	if ( clip_point )

  001e4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_point@@3PAUVERTEX@@A, 0
  001eb	74 2a		 je	 SHORT $LN12@hither_cli

; 223  : 	{
; 224  : 
; 225  : 		clip_point->next_vertex = NULL;

  001ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001f2	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 226  : 
; 227  : 		outcode |= clip_point->outcode;

  001f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  001fe	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00202	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  00205	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 228  : 
; 229  : 		outcode2 &= clip_point->outcode;

  00208	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_point@@3PAUVERTEX@@A
  0020d	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00211	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  00214	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx
$LN12@hither_cli:

; 230  : 	}
; 231  : 
; 232  : 	if ( ( outcode2 ) || ( !clip_list ) )	//( outcode2 ) || ( ! clip_list ) )

  00217	83 7d f8 00	 cmp	 DWORD PTR _outcode2$[ebp], 0
  0021b	75 09		 jne	 SHORT $LN14@hither_cli
  0021d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?clip_list@@3PAUVERTEX@@A, 0
  00224	75 04		 jne	 SHORT $LN13@hither_cli
$LN14@hither_cli:

; 233  : 	{
; 234  : 
; 235  : 		return ( NULL );

  00226	33 c0		 xor	 eax, eax
  00228	eb 0d		 jmp	 SHORT $LN1@hither_cli
$LN13@hither_cli:

; 236  : 	}
; 237  : 
; 238  : 	*polygon_outcode = outcode;

  0022a	8b 45 0c	 mov	 eax, DWORD PTR _polygon_outcode$[ebp]
  0022d	8b 4d fc	 mov	 ecx, DWORD PTR _outcode$[ebp]
  00230	89 08		 mov	 DWORD PTR [eax], ecx

; 239  : //	clip_list->polygon_outcode = outcode;
; 240  : 
; 241  : 	return ( clip_list );

  00232	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clip_list@@3PAUVERTEX@@A
$LN1@hither_cli:

; 242  : }

  00237	5f		 pop	 edi
  00238	5e		 pop	 esi
  00239	5b		 pop	 ebx
  0023a	8b e5		 mov	 esp, ebp
  0023c	5d		 pop	 ebp
  0023d	c2 08 00	 ret	 8
?hither_clip_3d_polygon@@YGPAUVERTEX@@PAU1@PAH@Z ENDP	; hither_clip_3d_polygon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\fpu.h
;	COMDAT ?asm_convert_float_to_int@@YGXMPAH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_integer$ = 12						; size = 4
?asm_convert_float_to_int@@YGXMPAH@Z PROC		; asm_convert_float_to_int, COMDAT

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 131  : 
; 132  : 	__asm
; 133  : 	{
; 134  : 
; 135  : 		fld value

  00009	d9 45 08	 fld	 DWORD PTR _value$[ebp]

; 136  : 		mov edx, integer

  0000c	8b 55 0c	 mov	 edx, DWORD PTR _integer$[ebp]

; 137  : 		fistp dword ptr [edx]

  0000f	db 1a		 fistp	 DWORD PTR [edx]

; 138  : 	}
; 139  : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?asm_convert_float_to_int@@YGXMPAH@Z ENDP		; asm_convert_float_to_int
_TEXT	ENDS
END
