; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\graphics\monosprt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_floorf
PUBLIC	?floor@@YGMM@Z					; floor
PUBLIC	?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z	; draw_mono_sprite
EXTRN	__imp__floor:PROC
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?get_screen_data@@YGPAEPAUSCREEN@@@Z:PROC	; get_screen_data
EXTRN	?get_screen_pitch@@YGHPAUSCREEN@@@Z:PROC	; get_screen_pitch
EXTRN	?active_int_viewport@@3UINT_VIEWPORT@@A:BYTE	; active_int_viewport
EXTRN	?active_screen@@3PAUSCREEN@@A:DWORD		; active_screen
EXTRN	?active_screen_red_mask@@3HA:DWORD		; active_screen_red_mask
EXTRN	?active_screen_red_shift@@3HA:DWORD		; active_screen_red_shift
EXTRN	?active_screen_green_mask@@3HA:DWORD		; active_screen_green_mask
EXTRN	?active_screen_green_shift@@3HA:DWORD		; active_screen_green_shift
EXTRN	?active_screen_blue_mask@@3HA:DWORD		; active_screen_blue_mask
EXTRN	?active_screen_blue_shift@@3HA:DWORD		; active_screen_blue_shift
EXTRN	?active_screen_alpha_mask@@3HA:DWORD		; active_screen_alpha_mask
EXTRN	?active_screen_alpha_shift@@3HA:DWORD		; active_screen_alpha_shift
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\monosprt.c
;	COMDAT ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z
_TEXT	SEGMENT
tv331 = -212						; size = 4
tv286 = -212						; size = 4
tv207 = -212						; size = 4
tv162 = -212						; size = 4
_col$1 = -144						; size = 4
_screen_ptr$2 = -140					; size = 4
_screen_data$3 = -136					; size = 4
_sprite_ptr_add_on$4 = -132				; size = 4
_screen_ptr_add_on$5 = -128				; size = 4
_screen_pitch$6 = -124					; size = 4
_y_adjust$7 = -120					; size = 4
_x_adjust$8 = -116					; size = 4
_y_count$9 = -112					; size = 4
_x_count$10 = -108					; size = 4
_y2$11 = -104						; size = 4
_x2$12 = -100						; size = 4
_y1$13 = -96						; size = 4
_x1$14 = -92						; size = 4
_y_offset$15 = -88					; size = 4
_x_offset$16 = -84					; size = 4
_height$17 = -80					; size = 4
_width$18 = -76						; size = 4
_col$19 = -72						; size = 2
_screen_ptr$20 = -68					; size = 4
_screen_data$21 = -64					; size = 4
_sprite_ptr_add_on$22 = -60				; size = 4
_screen_ptr_add_on$23 = -56				; size = 4
_screen_pitch$24 = -52					; size = 4
_y_adjust$25 = -48					; size = 4
_x_adjust$26 = -44					; size = 4
_y_count$27 = -40					; size = 4
_x_count$28 = -36					; size = 4
_y2$29 = -32						; size = 4
_x2$30 = -28						; size = 4
_y1$31 = -24						; size = 4
_x1$32 = -20						; size = 4
_y_offset$33 = -16					; size = 4
_x_offset$34 = -12					; size = 4
_height$35 = -8						; size = 4
_width$36 = -4						; size = 4
_sprite_ptr$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_colour$ = 20						; size = 4
?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z PROC	; draw_mono_sprite, COMDAT

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 83   : 
; 84   : 	if ( active_screen->pixel_length <= 16 )

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00011	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00015	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00018	0f 8f b7 03 00
	00		 jg	 $LN26@draw_mono_

; 85   : 	{
; 86   : 		int
; 87   : 			width,
; 88   : 			height,
; 89   : 			x_offset,
; 90   : 			y_offset,
; 91   : 			x1,
; 92   : 			y1,
; 93   : 			x2,
; 94   : 			y2,
; 95   : 			x_count,
; 96   : 			y_count,
; 97   : 			x_adjust,
; 98   : 			y_adjust,
; 99   : 			screen_pitch,
; 100  : 			screen_ptr_add_on,
; 101  : 			sprite_ptr_add_on;
; 102  : 	
; 103  : 		unsigned char
; 104  : 			*screen_data,
; 105  : 			*screen_ptr;
; 106  : 	
; 107  : 		unsigned short int
; 108  : 			col;
; 109  : 	
; 110  : 		col = get_packed_colour (colour);

  0001e	0f b6 45 16	 movzx	 eax, BYTE PTR _colour$[ebp+2]
  00022	c1 e0 18	 shl	 eax, 24			; 00000018H
  00025	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_red_mask@@3HA ; active_screen_red_mask
  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_red_shift@@3HA ; active_screen_red_shift
  00031	d3 e8		 shr	 eax, cl
  00033	0f b6 55 15	 movzx	 edx, BYTE PTR _colour$[ebp+1]
  00037	c1 e2 18	 shl	 edx, 24			; 00000018H
  0003a	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_green_mask@@3HA ; active_screen_green_mask
  00040	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_green_shift@@3HA ; active_screen_green_shift
  00046	d3 ea		 shr	 edx, cl
  00048	0b c2		 or	 eax, edx
  0004a	0f b6 55 14	 movzx	 edx, BYTE PTR _colour$[ebp]
  0004e	c1 e2 18	 shl	 edx, 24			; 00000018H
  00051	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_blue_mask@@3HA ; active_screen_blue_mask
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_blue_shift@@3HA ; active_screen_blue_shift
  0005d	d3 ea		 shr	 edx, cl
  0005f	0b c2		 or	 eax, edx
  00061	0f b6 55 17	 movzx	 edx, BYTE PTR _colour$[ebp+3]
  00065	c1 e2 18	 shl	 edx, 24			; 00000018H
  00068	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_alpha_mask@@3HA ; active_screen_alpha_mask
  0006e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_alpha_shift@@3HA ; active_screen_alpha_shift
  00074	d3 ea		 shr	 edx, cl
  00076	0b c2		 or	 eax, edx
  00078	66 89 45 b8	 mov	 WORD PTR _col$19[ebp], ax

; 111  : 	
; 112  : 		width = *sprite_ptr++;

  0007c	8b 45 08	 mov	 eax, DWORD PTR _sprite_ptr$[ebp]
  0007f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00082	89 4d fc	 mov	 DWORD PTR _width$36[ebp], ecx
  00085	8b 55 08	 mov	 edx, DWORD PTR _sprite_ptr$[ebp]
  00088	83 c2 01	 add	 edx, 1
  0008b	89 55 08	 mov	 DWORD PTR _sprite_ptr$[ebp], edx

; 113  : 		height = *sprite_ptr++;

  0008e	8b 45 08	 mov	 eax, DWORD PTR _sprite_ptr$[ebp]
  00091	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00094	89 4d f8	 mov	 DWORD PTR _height$35[ebp], ecx
  00097	8b 55 08	 mov	 edx, DWORD PTR _sprite_ptr$[ebp]
  0009a	83 c2 01	 add	 edx, 1
  0009d	89 55 08	 mov	 DWORD PTR _sprite_ptr$[ebp], edx

; 114  : 	
; 115  : 		x_offset = *(signed char *)sprite_ptr++;

  000a0	8b 45 08	 mov	 eax, DWORD PTR _sprite_ptr$[ebp]
  000a3	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000a6	89 4d f4	 mov	 DWORD PTR _x_offset$34[ebp], ecx
  000a9	8b 55 08	 mov	 edx, DWORD PTR _sprite_ptr$[ebp]
  000ac	83 c2 01	 add	 edx, 1
  000af	89 55 08	 mov	 DWORD PTR _sprite_ptr$[ebp], edx

; 116  : 		y_offset = *(signed char *)sprite_ptr++;

  000b2	8b 45 08	 mov	 eax, DWORD PTR _sprite_ptr$[ebp]
  000b5	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000b8	89 4d f0	 mov	 DWORD PTR _y_offset$33[ebp], ecx
  000bb	8b 55 08	 mov	 edx, DWORD PTR _sprite_ptr$[ebp]
  000be	83 c2 01	 add	 edx, 1
  000c1	89 55 08	 mov	 DWORD PTR _sprite_ptr$[ebp], edx

; 117  : 	
; 118  : 		convert_float_to_int (floor (x), &x1);

  000c4	8d 45 ec	 lea	 eax, DWORD PTR _x1$32[ebp]
  000c7	50		 push	 eax
  000c8	51		 push	 ecx
  000c9	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _x$[ebp]
  000ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d3	e8 00 00 00 00	 call	 ?floor@@YGMM@Z		; floor
  000d8	51		 push	 ecx
  000d9	d9 1c 24	 fstp	 DWORD PTR [esp]
  000dc	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 119  : 		convert_float_to_int (floor (y), &y1);

  000e1	8d 45 e8	 lea	 eax, DWORD PTR _y1$31[ebp]
  000e4	50		 push	 eax
  000e5	51		 push	 ecx
  000e6	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _y$[ebp]
  000eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f0	e8 00 00 00 00	 call	 ?floor@@YGMM@Z		; floor
  000f5	51		 push	 ecx
  000f6	d9 1c 24	 fstp	 DWORD PTR [esp]
  000f9	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 120  : 	
; 121  : 		x1 += x_offset;

  000fe	8b 45 ec	 mov	 eax, DWORD PTR _x1$32[ebp]
  00101	03 45 f4	 add	 eax, DWORD PTR _x_offset$34[ebp]
  00104	89 45 ec	 mov	 DWORD PTR _x1$32[ebp], eax

; 122  : 		y1 += y_offset;

  00107	8b 45 e8	 mov	 eax, DWORD PTR _y1$31[ebp]
  0010a	03 45 f0	 add	 eax, DWORD PTR _y_offset$33[ebp]
  0010d	89 45 e8	 mov	 DWORD PTR _y1$31[ebp], eax

; 123  : 	
; 124  : 		x2 = x1 + width - 1;

  00110	8b 45 fc	 mov	 eax, DWORD PTR _width$36[ebp]
  00113	8b 4d ec	 mov	 ecx, DWORD PTR _x1$32[ebp]
  00116	8d 54 01 ff	 lea	 edx, DWORD PTR [ecx+eax-1]
  0011a	89 55 e4	 mov	 DWORD PTR _x2$30[ebp], edx

; 125  : 		y2 = y1 + height - 1;

  0011d	8b 45 f8	 mov	 eax, DWORD PTR _height$35[ebp]
  00120	8b 4d e8	 mov	 ecx, DWORD PTR _y1$31[ebp]
  00123	8d 54 01 ff	 lea	 edx, DWORD PTR [ecx+eax-1]
  00127	89 55 e0	 mov	 DWORD PTR _y2$29[ebp], edx

; 126  : 	
; 127  : 		if
; 128  : 		(
; 129  : 			(x1 >= active_int_viewport.x_min) && (y1 >= active_int_viewport.y_min) &&
; 130  : 			(x2 <= active_int_viewport.x_max) && (y2 <= active_int_viewport.y_max)

  0012a	8b 45 ec	 mov	 eax, DWORD PTR _x1$32[ebp]
  0012d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00133	0f 8c dc 00 00
	00		 jl	 $LN28@draw_mono_
  00139	8b 45 e8	 mov	 eax, DWORD PTR _y1$31[ebp]
  0013c	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00142	0f 8c cd 00 00
	00		 jl	 $LN28@draw_mono_
  00148	8b 45 e4	 mov	 eax, DWORD PTR _x2$30[ebp]
  0014b	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00151	0f 8f be 00 00
	00		 jg	 $LN28@draw_mono_
  00157	8b 45 e0	 mov	 eax, DWORD PTR _y2$29[ebp]
  0015a	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00160	0f 8f af 00 00
	00		 jg	 $LN28@draw_mono_

; 131  : 		)
; 132  : 		{
; 133  : 			//
; 134  : 			// draw unclipped sprite
; 135  : 			//
; 136  : 	
; 137  : 			screen_pitch = get_screen_pitch (active_screen);

  00166	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0016b	50		 push	 eax
  0016c	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  00171	89 45 cc	 mov	 DWORD PTR _screen_pitch$24[ebp], eax

; 138  : 	
; 139  : 			screen_data = get_screen_data (active_screen);

  00174	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00179	50		 push	 eax
  0017a	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  0017f	89 45 c0	 mov	 DWORD PTR _screen_data$21[ebp], eax

; 140  : 	
; 141  : 			screen_ptr = screen_data + (x1 * sizeof (rgb_packed)) + (y1 * screen_pitch);

  00182	8b 45 ec	 mov	 eax, DWORD PTR _x1$32[ebp]
  00185	8b 4d c0	 mov	 ecx, DWORD PTR _screen_data$21[ebp]
  00188	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0018b	8b 45 e8	 mov	 eax, DWORD PTR _y1$31[ebp]
  0018e	0f af 45 cc	 imul	 eax, DWORD PTR _screen_pitch$24[ebp]
  00192	03 d0		 add	 edx, eax
  00194	89 55 bc	 mov	 DWORD PTR _screen_ptr$20[ebp], edx

; 142  : 	
; 143  : 			screen_ptr_add_on = screen_pitch - (width * sizeof (rgb_packed));

  00197	8b 45 fc	 mov	 eax, DWORD PTR _width$36[ebp]
  0019a	d1 e0		 shl	 eax, 1
  0019c	8b 4d cc	 mov	 ecx, DWORD PTR _screen_pitch$24[ebp]
  0019f	2b c8		 sub	 ecx, eax
  001a1	89 4d c8	 mov	 DWORD PTR _screen_ptr_add_on$23[ebp], ecx

; 144  : 	
; 145  : 			for (y_count = height; y_count > 0 ; y_count--)

  001a4	8b 45 f8	 mov	 eax, DWORD PTR _height$35[ebp]
  001a7	89 45 d8	 mov	 DWORD PTR _y_count$27[ebp], eax
  001aa	eb 09		 jmp	 SHORT $LN4@draw_mono_
$LN2@draw_mono_:
  001ac	8b 45 d8	 mov	 eax, DWORD PTR _y_count$27[ebp]
  001af	83 e8 01	 sub	 eax, 1
  001b2	89 45 d8	 mov	 DWORD PTR _y_count$27[ebp], eax
$LN4@draw_mono_:
  001b5	83 7d d8 00	 cmp	 DWORD PTR _y_count$27[ebp], 0
  001b9	7e 55		 jle	 SHORT $LN3@draw_mono_

; 146  : 			{
; 147  : 				for (x_count = width; x_count > 0 ; x_count--)

  001bb	8b 45 fc	 mov	 eax, DWORD PTR _width$36[ebp]
  001be	89 45 dc	 mov	 DWORD PTR _x_count$28[ebp], eax
  001c1	eb 09		 jmp	 SHORT $LN7@draw_mono_
$LN5@draw_mono_:
  001c3	8b 45 dc	 mov	 eax, DWORD PTR _x_count$28[ebp]
  001c6	83 e8 01	 sub	 eax, 1
  001c9	89 45 dc	 mov	 DWORD PTR _x_count$28[ebp], eax
$LN7@draw_mono_:
  001cc	83 7d dc 00	 cmp	 DWORD PTR _x_count$28[ebp], 0
  001d0	7e 33		 jle	 SHORT $LN6@draw_mono_

; 148  : 				{
; 149  : 					if (*sprite_ptr++)

  001d2	8b 45 08	 mov	 eax, DWORD PTR _sprite_ptr$[ebp]
  001d5	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  001d8	89 8d 2c ff ff
	ff		 mov	 DWORD PTR tv162[ebp], ecx
  001de	8b 55 08	 mov	 edx, DWORD PTR _sprite_ptr$[ebp]
  001e1	83 c2 01	 add	 edx, 1
  001e4	89 55 08	 mov	 DWORD PTR _sprite_ptr$[ebp], edx
  001e7	83 bd 2c ff ff
	ff 00		 cmp	 DWORD PTR tv162[ebp], 0
  001ee	74 0a		 je	 SHORT $LN30@draw_mono_

; 150  : 					{
; 151  : 						*(rgb_packed *)screen_ptr = col;

  001f0	8b 45 bc	 mov	 eax, DWORD PTR _screen_ptr$20[ebp]
  001f3	66 8b 4d b8	 mov	 cx, WORD PTR _col$19[ebp]
  001f7	66 89 08	 mov	 WORD PTR [eax], cx
$LN30@draw_mono_:

; 152  : 					}
; 153  : 	
; 154  : 					screen_ptr += sizeof (rgb_packed);

  001fa	8b 45 bc	 mov	 eax, DWORD PTR _screen_ptr$20[ebp]
  001fd	83 c0 02	 add	 eax, 2
  00200	89 45 bc	 mov	 DWORD PTR _screen_ptr$20[ebp], eax

; 155  : 				}

  00203	eb be		 jmp	 SHORT $LN5@draw_mono_
$LN6@draw_mono_:

; 156  : 	
; 157  : 				screen_ptr += screen_ptr_add_on;

  00205	8b 45 bc	 mov	 eax, DWORD PTR _screen_ptr$20[ebp]
  00208	03 45 c8	 add	 eax, DWORD PTR _screen_ptr_add_on$23[ebp]
  0020b	89 45 bc	 mov	 DWORD PTR _screen_ptr$20[ebp], eax

; 158  : 			}

  0020e	eb 9c		 jmp	 SHORT $LN2@draw_mono_
$LN3@draw_mono_:

; 159  : 		}
; 160  : 		else

  00210	e9 bb 01 00 00	 jmp	 $LN9@draw_mono_
$LN28@draw_mono_:

; 161  : 		{
; 162  : 			//
; 163  : 			// draw clipped sprite (if visible)
; 164  : 			//
; 165  : 	
; 166  : 			if
; 167  : 			(
; 168  : 				(x1 <= active_int_viewport.x_max) && (y1 <= active_int_viewport.y_max) &&
; 169  : 				(x2 >= active_int_viewport.x_min) && (y2 >= active_int_viewport.y_min)

  00215	8b 45 ec	 mov	 eax, DWORD PTR _x1$32[ebp]
  00218	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  0021e	0f 8f ac 01 00
	00		 jg	 $LN9@draw_mono_
  00224	8b 45 e8	 mov	 eax, DWORD PTR _y1$31[ebp]
  00227	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  0022d	0f 8f 9d 01 00
	00		 jg	 $LN9@draw_mono_
  00233	8b 45 e4	 mov	 eax, DWORD PTR _x2$30[ebp]
  00236	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  0023c	0f 8c 8e 01 00
	00		 jl	 $LN9@draw_mono_
  00242	8b 45 e0	 mov	 eax, DWORD PTR _y2$29[ebp]
  00245	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  0024b	0f 8c 7f 01 00
	00		 jl	 $LN9@draw_mono_

; 170  : 			)
; 171  : 			{
; 172  : 				screen_pitch = get_screen_pitch (active_screen);

  00251	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00256	50		 push	 eax
  00257	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  0025c	89 45 cc	 mov	 DWORD PTR _screen_pitch$24[ebp], eax

; 173  : 	
; 174  : 				screen_data = get_screen_data (active_screen);

  0025f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00264	50		 push	 eax
  00265	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  0026a	89 45 c0	 mov	 DWORD PTR _screen_data$21[ebp], eax

; 175  : 	
; 176  : 				screen_ptr_add_on = screen_pitch - (width * sizeof (rgb_packed));

  0026d	8b 45 fc	 mov	 eax, DWORD PTR _width$36[ebp]
  00270	d1 e0		 shl	 eax, 1
  00272	8b 4d cc	 mov	 ecx, DWORD PTR _screen_pitch$24[ebp]
  00275	2b c8		 sub	 ecx, eax
  00277	89 4d c8	 mov	 DWORD PTR _screen_ptr_add_on$23[ebp], ecx

; 177  : 	
; 178  : 				sprite_ptr_add_on = 0;

  0027a	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _sprite_ptr_add_on$22[ebp], 0

; 179  : 	
; 180  : 				//
; 181  : 				// clip above
; 182  : 				//
; 183  : 	
; 184  : 				if (y1 < active_int_viewport.y_min)

  00281	8b 45 e8	 mov	 eax, DWORD PTR _y1$31[ebp]
  00284	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  0028a	7d 2a		 jge	 SHORT $LN32@draw_mono_

; 185  : 				{
; 186  : 					y_adjust = active_int_viewport.y_min - y1;

  0028c	a1 04 00 00 00	 mov	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00291	2b 45 e8	 sub	 eax, DWORD PTR _y1$31[ebp]
  00294	89 45 d0	 mov	 DWORD PTR _y_adjust$25[ebp], eax

; 187  : 	
; 188  : 					y1 += y_adjust;

  00297	8b 45 e8	 mov	 eax, DWORD PTR _y1$31[ebp]
  0029a	03 45 d0	 add	 eax, DWORD PTR _y_adjust$25[ebp]
  0029d	89 45 e8	 mov	 DWORD PTR _y1$31[ebp], eax

; 189  : 	
; 190  : 					height -= y_adjust;

  002a0	8b 45 f8	 mov	 eax, DWORD PTR _height$35[ebp]
  002a3	2b 45 d0	 sub	 eax, DWORD PTR _y_adjust$25[ebp]
  002a6	89 45 f8	 mov	 DWORD PTR _height$35[ebp], eax

; 191  : 	
; 192  : 					sprite_ptr += (y_adjust * width);

  002a9	8b 45 d0	 mov	 eax, DWORD PTR _y_adjust$25[ebp]
  002ac	0f af 45 fc	 imul	 eax, DWORD PTR _width$36[ebp]
  002b0	03 45 08	 add	 eax, DWORD PTR _sprite_ptr$[ebp]
  002b3	89 45 08	 mov	 DWORD PTR _sprite_ptr$[ebp], eax
$LN32@draw_mono_:

; 193  : 				}
; 194  : 	
; 195  : 				//
; 196  : 				// clip below
; 197  : 				//
; 198  : 	
; 199  : 				if (y2 > active_int_viewport.y_max)

  002b6	8b 45 e0	 mov	 eax, DWORD PTR _y2$29[ebp]
  002b9	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  002bf	7e 15		 jle	 SHORT $LN33@draw_mono_

; 200  : 				{
; 201  : 					y_adjust = y2 - active_int_viewport.y_max;

  002c1	8b 45 e0	 mov	 eax, DWORD PTR _y2$29[ebp]
  002c4	2b 05 0c 00 00
	00		 sub	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  002ca	89 45 d0	 mov	 DWORD PTR _y_adjust$25[ebp], eax

; 202  : 	
; 203  : 					height -= y_adjust;

  002cd	8b 45 f8	 mov	 eax, DWORD PTR _height$35[ebp]
  002d0	2b 45 d0	 sub	 eax, DWORD PTR _y_adjust$25[ebp]
  002d3	89 45 f8	 mov	 DWORD PTR _height$35[ebp], eax
$LN33@draw_mono_:

; 204  : 				}
; 205  : 	
; 206  : 				//
; 207  : 				// clip left
; 208  : 				//
; 209  : 	
; 210  : 				if (x1 < active_int_viewport.x_min)

  002d6	8b 45 ec	 mov	 eax, DWORD PTR _x1$32[ebp]
  002d9	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  002df	7d 2f		 jge	 SHORT $LN34@draw_mono_

; 211  : 				{
; 212  : 					x_adjust = active_int_viewport.x_min - x1;

  002e1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  002e6	2b 45 ec	 sub	 eax, DWORD PTR _x1$32[ebp]
  002e9	89 45 d4	 mov	 DWORD PTR _x_adjust$26[ebp], eax

; 213  : 	
; 214  : 					x1 += x_adjust;

  002ec	8b 45 ec	 mov	 eax, DWORD PTR _x1$32[ebp]
  002ef	03 45 d4	 add	 eax, DWORD PTR _x_adjust$26[ebp]
  002f2	89 45 ec	 mov	 DWORD PTR _x1$32[ebp], eax

; 215  : 	
; 216  : 					width -= x_adjust;

  002f5	8b 45 fc	 mov	 eax, DWORD PTR _width$36[ebp]
  002f8	2b 45 d4	 sub	 eax, DWORD PTR _x_adjust$26[ebp]
  002fb	89 45 fc	 mov	 DWORD PTR _width$36[ebp], eax

; 217  : 	
; 218  : 					sprite_ptr += x_adjust;

  002fe	8b 45 08	 mov	 eax, DWORD PTR _sprite_ptr$[ebp]
  00301	03 45 d4	 add	 eax, DWORD PTR _x_adjust$26[ebp]
  00304	89 45 08	 mov	 DWORD PTR _sprite_ptr$[ebp], eax

; 219  : 	
; 220  : 					sprite_ptr_add_on += x_adjust;

  00307	8b 45 c4	 mov	 eax, DWORD PTR _sprite_ptr_add_on$22[ebp]
  0030a	03 45 d4	 add	 eax, DWORD PTR _x_adjust$26[ebp]
  0030d	89 45 c4	 mov	 DWORD PTR _sprite_ptr_add_on$22[ebp], eax
$LN34@draw_mono_:

; 221  : 				}
; 222  : 	
; 223  : 				//
; 224  : 				// clip right
; 225  : 				//
; 226  : 	
; 227  : 				if (x2 > active_int_viewport.x_max)

  00310	8b 45 e4	 mov	 eax, DWORD PTR _x2$30[ebp]
  00313	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00319	7e 1e		 jle	 SHORT $LN35@draw_mono_

; 228  : 				{
; 229  : 					x_adjust = x2 - active_int_viewport.x_max;

  0031b	8b 45 e4	 mov	 eax, DWORD PTR _x2$30[ebp]
  0031e	2b 05 08 00 00
	00		 sub	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00324	89 45 d4	 mov	 DWORD PTR _x_adjust$26[ebp], eax

; 230  : 	
; 231  : 					width -= x_adjust;

  00327	8b 45 fc	 mov	 eax, DWORD PTR _width$36[ebp]
  0032a	2b 45 d4	 sub	 eax, DWORD PTR _x_adjust$26[ebp]
  0032d	89 45 fc	 mov	 DWORD PTR _width$36[ebp], eax

; 232  : 	
; 233  : 					sprite_ptr_add_on += x_adjust;

  00330	8b 45 c4	 mov	 eax, DWORD PTR _sprite_ptr_add_on$22[ebp]
  00333	03 45 d4	 add	 eax, DWORD PTR _x_adjust$26[ebp]
  00336	89 45 c4	 mov	 DWORD PTR _sprite_ptr_add_on$22[ebp], eax
$LN35@draw_mono_:

; 234  : 				}
; 235  : 	
; 236  : 				screen_ptr = screen_data + (x1 * sizeof (rgb_packed)) + (y1 * screen_pitch);

  00339	8b 45 ec	 mov	 eax, DWORD PTR _x1$32[ebp]
  0033c	8b 4d c0	 mov	 ecx, DWORD PTR _screen_data$21[ebp]
  0033f	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00342	8b 45 e8	 mov	 eax, DWORD PTR _y1$31[ebp]
  00345	0f af 45 cc	 imul	 eax, DWORD PTR _screen_pitch$24[ebp]
  00349	03 d0		 add	 edx, eax
  0034b	89 55 bc	 mov	 DWORD PTR _screen_ptr$20[ebp], edx

; 237  : 	
; 238  : 				screen_ptr_add_on = screen_pitch - (width * sizeof (rgb_packed));

  0034e	8b 45 fc	 mov	 eax, DWORD PTR _width$36[ebp]
  00351	d1 e0		 shl	 eax, 1
  00353	8b 4d cc	 mov	 ecx, DWORD PTR _screen_pitch$24[ebp]
  00356	2b c8		 sub	 ecx, eax
  00358	89 4d c8	 mov	 DWORD PTR _screen_ptr_add_on$23[ebp], ecx

; 239  : 	
; 240  : 				for (y_count = height; y_count > 0 ; y_count--)

  0035b	8b 45 f8	 mov	 eax, DWORD PTR _height$35[ebp]
  0035e	89 45 d8	 mov	 DWORD PTR _y_count$27[ebp], eax
  00361	eb 09		 jmp	 SHORT $LN10@draw_mono_
$LN8@draw_mono_:
  00363	8b 45 d8	 mov	 eax, DWORD PTR _y_count$27[ebp]
  00366	83 e8 01	 sub	 eax, 1
  00369	89 45 d8	 mov	 DWORD PTR _y_count$27[ebp], eax
$LN10@draw_mono_:
  0036c	83 7d d8 00	 cmp	 DWORD PTR _y_count$27[ebp], 0
  00370	7e 5e		 jle	 SHORT $LN9@draw_mono_

; 241  : 				{
; 242  : 					for (x_count = width; x_count > 0 ; x_count--)

  00372	8b 45 fc	 mov	 eax, DWORD PTR _width$36[ebp]
  00375	89 45 dc	 mov	 DWORD PTR _x_count$28[ebp], eax
  00378	eb 09		 jmp	 SHORT $LN13@draw_mono_
$LN11@draw_mono_:
  0037a	8b 45 dc	 mov	 eax, DWORD PTR _x_count$28[ebp]
  0037d	83 e8 01	 sub	 eax, 1
  00380	89 45 dc	 mov	 DWORD PTR _x_count$28[ebp], eax
$LN13@draw_mono_:
  00383	83 7d dc 00	 cmp	 DWORD PTR _x_count$28[ebp], 0
  00387	7e 33		 jle	 SHORT $LN12@draw_mono_

; 243  : 					{
; 244  : 						if (*sprite_ptr++)

  00389	8b 45 08	 mov	 eax, DWORD PTR _sprite_ptr$[ebp]
  0038c	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0038f	89 8d 2c ff ff
	ff		 mov	 DWORD PTR tv207[ebp], ecx
  00395	8b 55 08	 mov	 edx, DWORD PTR _sprite_ptr$[ebp]
  00398	83 c2 01	 add	 edx, 1
  0039b	89 55 08	 mov	 DWORD PTR _sprite_ptr$[ebp], edx
  0039e	83 bd 2c ff ff
	ff 00		 cmp	 DWORD PTR tv207[ebp], 0
  003a5	74 0a		 je	 SHORT $LN36@draw_mono_

; 245  : 						{
; 246  : 							*(rgb_packed *)screen_ptr = col;

  003a7	8b 45 bc	 mov	 eax, DWORD PTR _screen_ptr$20[ebp]
  003aa	66 8b 4d b8	 mov	 cx, WORD PTR _col$19[ebp]
  003ae	66 89 08	 mov	 WORD PTR [eax], cx
$LN36@draw_mono_:

; 247  : 						}
; 248  : 	
; 249  : 						screen_ptr += sizeof (rgb_packed);

  003b1	8b 45 bc	 mov	 eax, DWORD PTR _screen_ptr$20[ebp]
  003b4	83 c0 02	 add	 eax, 2
  003b7	89 45 bc	 mov	 DWORD PTR _screen_ptr$20[ebp], eax

; 250  : 					}

  003ba	eb be		 jmp	 SHORT $LN11@draw_mono_
$LN12@draw_mono_:

; 251  : 	
; 252  : 					screen_ptr += screen_ptr_add_on;

  003bc	8b 45 bc	 mov	 eax, DWORD PTR _screen_ptr$20[ebp]
  003bf	03 45 c8	 add	 eax, DWORD PTR _screen_ptr_add_on$23[ebp]
  003c2	89 45 bc	 mov	 DWORD PTR _screen_ptr$20[ebp], eax

; 253  : 	
; 254  : 					sprite_ptr += sprite_ptr_add_on;

  003c5	8b 45 08	 mov	 eax, DWORD PTR _sprite_ptr$[ebp]
  003c8	03 45 c4	 add	 eax, DWORD PTR _sprite_ptr_add_on$22[ebp]
  003cb	89 45 08	 mov	 DWORD PTR _sprite_ptr$[ebp], eax

; 255  : 				}

  003ce	eb 93		 jmp	 SHORT $LN8@draw_mono_
$LN9@draw_mono_:

; 256  : 			}
; 257  : 		}
; 258  : 	}
; 259  : 	else

  003d0	e9 a4 03 00 00	 jmp	 $LN21@draw_mono_
$LN26@draw_mono_:

; 260  : 	{
; 261  : 
; 262  : 		int
; 263  : 			width,
; 264  : 			height,
; 265  : 			x_offset,
; 266  : 			y_offset,
; 267  : 			x1,
; 268  : 			y1,
; 269  : 			x2,
; 270  : 			y2,
; 271  : 			x_count,
; 272  : 			y_count,
; 273  : 			x_adjust,
; 274  : 			y_adjust,
; 275  : 			screen_pitch,
; 276  : 			screen_ptr_add_on,
; 277  : 			sprite_ptr_add_on;
; 278  : 	
; 279  : 		unsigned char
; 280  : 			*screen_data,
; 281  : 			*screen_ptr;
; 282  : 	
; 283  : 		unsigned int
; 284  : 			col;
; 285  : 	
; 286  : 		col = colour.colour;

  003d5	8b 45 14	 mov	 eax, DWORD PTR _colour$[ebp]
  003d8	89 85 70 ff ff
	ff		 mov	 DWORD PTR _col$1[ebp], eax

; 287  : 	
; 288  : 		width = *sprite_ptr++;

  003de	8b 45 08	 mov	 eax, DWORD PTR _sprite_ptr$[ebp]
  003e1	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  003e4	89 4d b4	 mov	 DWORD PTR _width$18[ebp], ecx
  003e7	8b 55 08	 mov	 edx, DWORD PTR _sprite_ptr$[ebp]
  003ea	83 c2 01	 add	 edx, 1
  003ed	89 55 08	 mov	 DWORD PTR _sprite_ptr$[ebp], edx

; 289  : 		height = *sprite_ptr++;

  003f0	8b 45 08	 mov	 eax, DWORD PTR _sprite_ptr$[ebp]
  003f3	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  003f6	89 4d b0	 mov	 DWORD PTR _height$17[ebp], ecx
  003f9	8b 55 08	 mov	 edx, DWORD PTR _sprite_ptr$[ebp]
  003fc	83 c2 01	 add	 edx, 1
  003ff	89 55 08	 mov	 DWORD PTR _sprite_ptr$[ebp], edx

; 290  : 	
; 291  : 		x_offset = *(signed char *)sprite_ptr++;

  00402	8b 45 08	 mov	 eax, DWORD PTR _sprite_ptr$[ebp]
  00405	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00408	89 4d ac	 mov	 DWORD PTR _x_offset$16[ebp], ecx
  0040b	8b 55 08	 mov	 edx, DWORD PTR _sprite_ptr$[ebp]
  0040e	83 c2 01	 add	 edx, 1
  00411	89 55 08	 mov	 DWORD PTR _sprite_ptr$[ebp], edx

; 292  : 		y_offset = *(signed char *)sprite_ptr++;

  00414	8b 45 08	 mov	 eax, DWORD PTR _sprite_ptr$[ebp]
  00417	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0041a	89 4d a8	 mov	 DWORD PTR _y_offset$15[ebp], ecx
  0041d	8b 55 08	 mov	 edx, DWORD PTR _sprite_ptr$[ebp]
  00420	83 c2 01	 add	 edx, 1
  00423	89 55 08	 mov	 DWORD PTR _sprite_ptr$[ebp], edx

; 293  : 	
; 294  : 		convert_float_to_int (floor (x), &x1);

  00426	8d 45 a4	 lea	 eax, DWORD PTR _x1$14[ebp]
  00429	50		 push	 eax
  0042a	51		 push	 ecx
  0042b	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _x$[ebp]
  00430	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00435	e8 00 00 00 00	 call	 ?floor@@YGMM@Z		; floor
  0043a	51		 push	 ecx
  0043b	d9 1c 24	 fstp	 DWORD PTR [esp]
  0043e	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 295  : 		convert_float_to_int (floor (y), &y1);

  00443	8d 45 a0	 lea	 eax, DWORD PTR _y1$13[ebp]
  00446	50		 push	 eax
  00447	51		 push	 ecx
  00448	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _y$[ebp]
  0044d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00452	e8 00 00 00 00	 call	 ?floor@@YGMM@Z		; floor
  00457	51		 push	 ecx
  00458	d9 1c 24	 fstp	 DWORD PTR [esp]
  0045b	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 296  : 	
; 297  : 		x1 += x_offset;

  00460	8b 45 a4	 mov	 eax, DWORD PTR _x1$14[ebp]
  00463	03 45 ac	 add	 eax, DWORD PTR _x_offset$16[ebp]
  00466	89 45 a4	 mov	 DWORD PTR _x1$14[ebp], eax

; 298  : 		y1 += y_offset;

  00469	8b 45 a0	 mov	 eax, DWORD PTR _y1$13[ebp]
  0046c	03 45 a8	 add	 eax, DWORD PTR _y_offset$15[ebp]
  0046f	89 45 a0	 mov	 DWORD PTR _y1$13[ebp], eax

; 299  : 	
; 300  : 		x2 = x1 + width - 1;

  00472	8b 45 b4	 mov	 eax, DWORD PTR _width$18[ebp]
  00475	8b 4d a4	 mov	 ecx, DWORD PTR _x1$14[ebp]
  00478	8d 54 01 ff	 lea	 edx, DWORD PTR [ecx+eax-1]
  0047c	89 55 9c	 mov	 DWORD PTR _x2$12[ebp], edx

; 301  : 		y2 = y1 + height - 1;

  0047f	8b 45 b0	 mov	 eax, DWORD PTR _height$17[ebp]
  00482	8b 4d a0	 mov	 ecx, DWORD PTR _y1$13[ebp]
  00485	8d 54 01 ff	 lea	 edx, DWORD PTR [ecx+eax-1]
  00489	89 55 98	 mov	 DWORD PTR _y2$11[ebp], edx

; 302  : 	
; 303  : 		if
; 304  : 		(
; 305  : 			(x1 >= active_int_viewport.x_min) && (y1 >= active_int_viewport.y_min) &&
; 306  : 			(x2 <= active_int_viewport.x_max) && (y2 <= active_int_viewport.y_max)

  0048c	8b 45 a4	 mov	 eax, DWORD PTR _x1$14[ebp]
  0048f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00495	0f 8c f6 00 00
	00		 jl	 $LN37@draw_mono_
  0049b	8b 45 a0	 mov	 eax, DWORD PTR _y1$13[ebp]
  0049e	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  004a4	0f 8c e7 00 00
	00		 jl	 $LN37@draw_mono_
  004aa	8b 45 9c	 mov	 eax, DWORD PTR _x2$12[ebp]
  004ad	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  004b3	0f 8f d8 00 00
	00		 jg	 $LN37@draw_mono_
  004b9	8b 45 98	 mov	 eax, DWORD PTR _y2$11[ebp]
  004bc	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  004c2	0f 8f c9 00 00
	00		 jg	 $LN37@draw_mono_

; 307  : 		)
; 308  : 		{
; 309  : 			//
; 310  : 			// draw unclipped sprite
; 311  : 			//
; 312  : 	
; 313  : 			screen_pitch = get_screen_pitch (active_screen);

  004c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  004cd	50		 push	 eax
  004ce	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  004d3	89 45 84	 mov	 DWORD PTR _screen_pitch$6[ebp], eax

; 314  : 	
; 315  : 			screen_data = get_screen_data (active_screen);

  004d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  004db	50		 push	 eax
  004dc	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  004e1	89 85 78 ff ff
	ff		 mov	 DWORD PTR _screen_data$3[ebp], eax

; 316  : 	
; 317  : 			screen_ptr = screen_data + (x1 * sizeof (unsigned int)) + (y1 * screen_pitch);

  004e7	8b 45 a4	 mov	 eax, DWORD PTR _x1$14[ebp]
  004ea	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _screen_data$3[ebp]
  004f0	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  004f3	8b 45 a0	 mov	 eax, DWORD PTR _y1$13[ebp]
  004f6	0f af 45 84	 imul	 eax, DWORD PTR _screen_pitch$6[ebp]
  004fa	03 d0		 add	 edx, eax
  004fc	89 95 74 ff ff
	ff		 mov	 DWORD PTR _screen_ptr$2[ebp], edx

; 318  : 	
; 319  : 			screen_ptr_add_on = screen_pitch - (width * sizeof (unsigned int));

  00502	8b 45 b4	 mov	 eax, DWORD PTR _width$18[ebp]
  00505	c1 e0 02	 shl	 eax, 2
  00508	8b 4d 84	 mov	 ecx, DWORD PTR _screen_pitch$6[ebp]
  0050b	2b c8		 sub	 ecx, eax
  0050d	89 4d 80	 mov	 DWORD PTR _screen_ptr_add_on$5[ebp], ecx

; 320  : 	
; 321  : 			for (y_count = height; y_count > 0 ; y_count--)

  00510	8b 45 b0	 mov	 eax, DWORD PTR _height$17[ebp]
  00513	89 45 90	 mov	 DWORD PTR _y_count$9[ebp], eax
  00516	eb 09		 jmp	 SHORT $LN16@draw_mono_
$LN14@draw_mono_:
  00518	8b 45 90	 mov	 eax, DWORD PTR _y_count$9[ebp]
  0051b	83 e8 01	 sub	 eax, 1
  0051e	89 45 90	 mov	 DWORD PTR _y_count$9[ebp], eax
$LN16@draw_mono_:
  00521	83 7d 90 00	 cmp	 DWORD PTR _y_count$9[ebp], 0
  00525	7e 65		 jle	 SHORT $LN15@draw_mono_

; 322  : 			{
; 323  : 				for (x_count = width; x_count > 0 ; x_count--)

  00527	8b 45 b4	 mov	 eax, DWORD PTR _width$18[ebp]
  0052a	89 45 94	 mov	 DWORD PTR _x_count$10[ebp], eax
  0052d	eb 09		 jmp	 SHORT $LN19@draw_mono_
$LN17@draw_mono_:
  0052f	8b 45 94	 mov	 eax, DWORD PTR _x_count$10[ebp]
  00532	83 e8 01	 sub	 eax, 1
  00535	89 45 94	 mov	 DWORD PTR _x_count$10[ebp], eax
$LN19@draw_mono_:
  00538	83 7d 94 00	 cmp	 DWORD PTR _x_count$10[ebp], 0
  0053c	7e 3d		 jle	 SHORT $LN18@draw_mono_

; 324  : 				{
; 325  : 					if (*sprite_ptr++)

  0053e	8b 45 08	 mov	 eax, DWORD PTR _sprite_ptr$[ebp]
  00541	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00544	89 8d 2c ff ff
	ff		 mov	 DWORD PTR tv286[ebp], ecx
  0054a	8b 55 08	 mov	 edx, DWORD PTR _sprite_ptr$[ebp]
  0054d	83 c2 01	 add	 edx, 1
  00550	89 55 08	 mov	 DWORD PTR _sprite_ptr$[ebp], edx
  00553	83 bd 2c ff ff
	ff 00		 cmp	 DWORD PTR tv286[ebp], 0
  0055a	74 0e		 je	 SHORT $LN39@draw_mono_

; 326  : 					{
; 327  : 						*(unsigned int *)screen_ptr = col;

  0055c	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _screen_ptr$2[ebp]
  00562	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _col$1[ebp]
  00568	89 08		 mov	 DWORD PTR [eax], ecx
$LN39@draw_mono_:

; 328  : 					}
; 329  : 	
; 330  : 					screen_ptr += sizeof (unsigned int);

  0056a	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _screen_ptr$2[ebp]
  00570	83 c0 04	 add	 eax, 4
  00573	89 85 74 ff ff
	ff		 mov	 DWORD PTR _screen_ptr$2[ebp], eax

; 331  : 				}

  00579	eb b4		 jmp	 SHORT $LN17@draw_mono_
$LN18@draw_mono_:

; 332  : 	
; 333  : 				screen_ptr += screen_ptr_add_on;

  0057b	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _screen_ptr$2[ebp]
  00581	03 45 80	 add	 eax, DWORD PTR _screen_ptr_add_on$5[ebp]
  00584	89 85 74 ff ff
	ff		 mov	 DWORD PTR _screen_ptr$2[ebp], eax

; 334  : 			}

  0058a	eb 8c		 jmp	 SHORT $LN14@draw_mono_
$LN15@draw_mono_:

; 335  : 		}
; 336  : 		else

  0058c	e9 e8 01 00 00	 jmp	 $LN21@draw_mono_
$LN37@draw_mono_:

; 337  : 		{
; 338  : 			//
; 339  : 			// draw clipped sprite (if visible)
; 340  : 			//
; 341  : 	
; 342  : 			if
; 343  : 			(
; 344  : 				(x1 <= active_int_viewport.x_max) && (y1 <= active_int_viewport.y_max) &&
; 345  : 				(x2 >= active_int_viewport.x_min) && (y2 >= active_int_viewport.y_min)

  00591	8b 45 a4	 mov	 eax, DWORD PTR _x1$14[ebp]
  00594	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  0059a	0f 8f d9 01 00
	00		 jg	 $LN21@draw_mono_
  005a0	8b 45 a0	 mov	 eax, DWORD PTR _y1$13[ebp]
  005a3	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  005a9	0f 8f ca 01 00
	00		 jg	 $LN21@draw_mono_
  005af	8b 45 9c	 mov	 eax, DWORD PTR _x2$12[ebp]
  005b2	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  005b8	0f 8c bb 01 00
	00		 jl	 $LN21@draw_mono_
  005be	8b 45 98	 mov	 eax, DWORD PTR _y2$11[ebp]
  005c1	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  005c7	0f 8c ac 01 00
	00		 jl	 $LN21@draw_mono_

; 346  : 			)
; 347  : 			{
; 348  : 				screen_pitch = get_screen_pitch (active_screen);

  005cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  005d2	50		 push	 eax
  005d3	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  005d8	89 45 84	 mov	 DWORD PTR _screen_pitch$6[ebp], eax

; 349  : 	
; 350  : 				screen_data = get_screen_data (active_screen);

  005db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  005e0	50		 push	 eax
  005e1	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  005e6	89 85 78 ff ff
	ff		 mov	 DWORD PTR _screen_data$3[ebp], eax

; 351  : 	
; 352  : 				screen_ptr_add_on = screen_pitch - (width * sizeof (unsigned int));

  005ec	8b 45 b4	 mov	 eax, DWORD PTR _width$18[ebp]
  005ef	c1 e0 02	 shl	 eax, 2
  005f2	8b 4d 84	 mov	 ecx, DWORD PTR _screen_pitch$6[ebp]
  005f5	2b c8		 sub	 ecx, eax
  005f7	89 4d 80	 mov	 DWORD PTR _screen_ptr_add_on$5[ebp], ecx

; 353  : 	
; 354  : 				sprite_ptr_add_on = 0;

  005fa	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _sprite_ptr_add_on$4[ebp], 0

; 355  : 	
; 356  : 				//
; 357  : 				// clip above
; 358  : 				//
; 359  : 	
; 360  : 				if (y1 < active_int_viewport.y_min)

  00604	8b 45 a0	 mov	 eax, DWORD PTR _y1$13[ebp]
  00607	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  0060d	7d 2a		 jge	 SHORT $LN41@draw_mono_

; 361  : 				{
; 362  : 					y_adjust = active_int_viewport.y_min - y1;

  0060f	a1 04 00 00 00	 mov	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00614	2b 45 a0	 sub	 eax, DWORD PTR _y1$13[ebp]
  00617	89 45 88	 mov	 DWORD PTR _y_adjust$7[ebp], eax

; 363  : 	
; 364  : 					y1 += y_adjust;

  0061a	8b 45 a0	 mov	 eax, DWORD PTR _y1$13[ebp]
  0061d	03 45 88	 add	 eax, DWORD PTR _y_adjust$7[ebp]
  00620	89 45 a0	 mov	 DWORD PTR _y1$13[ebp], eax

; 365  : 	
; 366  : 					height -= y_adjust;

  00623	8b 45 b0	 mov	 eax, DWORD PTR _height$17[ebp]
  00626	2b 45 88	 sub	 eax, DWORD PTR _y_adjust$7[ebp]
  00629	89 45 b0	 mov	 DWORD PTR _height$17[ebp], eax

; 367  : 	
; 368  : 					sprite_ptr += (y_adjust * width);

  0062c	8b 45 88	 mov	 eax, DWORD PTR _y_adjust$7[ebp]
  0062f	0f af 45 b4	 imul	 eax, DWORD PTR _width$18[ebp]
  00633	03 45 08	 add	 eax, DWORD PTR _sprite_ptr$[ebp]
  00636	89 45 08	 mov	 DWORD PTR _sprite_ptr$[ebp], eax
$LN41@draw_mono_:

; 369  : 				}
; 370  : 	
; 371  : 				//
; 372  : 				// clip below
; 373  : 				//
; 374  : 	
; 375  : 				if (y2 > active_int_viewport.y_max)

  00639	8b 45 98	 mov	 eax, DWORD PTR _y2$11[ebp]
  0063c	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00642	7e 15		 jle	 SHORT $LN42@draw_mono_

; 376  : 				{
; 377  : 					y_adjust = y2 - active_int_viewport.y_max;

  00644	8b 45 98	 mov	 eax, DWORD PTR _y2$11[ebp]
  00647	2b 05 0c 00 00
	00		 sub	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  0064d	89 45 88	 mov	 DWORD PTR _y_adjust$7[ebp], eax

; 378  : 	
; 379  : 					height -= y_adjust;

  00650	8b 45 b0	 mov	 eax, DWORD PTR _height$17[ebp]
  00653	2b 45 88	 sub	 eax, DWORD PTR _y_adjust$7[ebp]
  00656	89 45 b0	 mov	 DWORD PTR _height$17[ebp], eax
$LN42@draw_mono_:

; 380  : 				}
; 381  : 	
; 382  : 				//
; 383  : 				// clip left
; 384  : 				//
; 385  : 	
; 386  : 				if (x1 < active_int_viewport.x_min)

  00659	8b 45 a4	 mov	 eax, DWORD PTR _x1$14[ebp]
  0065c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00662	7d 35		 jge	 SHORT $LN43@draw_mono_

; 387  : 				{
; 388  : 					x_adjust = active_int_viewport.x_min - x1;

  00664	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00669	2b 45 a4	 sub	 eax, DWORD PTR _x1$14[ebp]
  0066c	89 45 8c	 mov	 DWORD PTR _x_adjust$8[ebp], eax

; 389  : 	
; 390  : 					x1 += x_adjust;

  0066f	8b 45 a4	 mov	 eax, DWORD PTR _x1$14[ebp]
  00672	03 45 8c	 add	 eax, DWORD PTR _x_adjust$8[ebp]
  00675	89 45 a4	 mov	 DWORD PTR _x1$14[ebp], eax

; 391  : 	
; 392  : 					width -= x_adjust;

  00678	8b 45 b4	 mov	 eax, DWORD PTR _width$18[ebp]
  0067b	2b 45 8c	 sub	 eax, DWORD PTR _x_adjust$8[ebp]
  0067e	89 45 b4	 mov	 DWORD PTR _width$18[ebp], eax

; 393  : 	
; 394  : 					sprite_ptr += x_adjust;

  00681	8b 45 08	 mov	 eax, DWORD PTR _sprite_ptr$[ebp]
  00684	03 45 8c	 add	 eax, DWORD PTR _x_adjust$8[ebp]
  00687	89 45 08	 mov	 DWORD PTR _sprite_ptr$[ebp], eax

; 395  : 	
; 396  : 					sprite_ptr_add_on += x_adjust;

  0068a	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _sprite_ptr_add_on$4[ebp]
  00690	03 45 8c	 add	 eax, DWORD PTR _x_adjust$8[ebp]
  00693	89 85 7c ff ff
	ff		 mov	 DWORD PTR _sprite_ptr_add_on$4[ebp], eax
$LN43@draw_mono_:

; 397  : 				}
; 398  : 	
; 399  : 				//
; 400  : 				// clip right
; 401  : 				//
; 402  : 	
; 403  : 				if (x2 > active_int_viewport.x_max)

  00699	8b 45 9c	 mov	 eax, DWORD PTR _x2$12[ebp]
  0069c	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  006a2	7e 24		 jle	 SHORT $LN44@draw_mono_

; 404  : 				{
; 405  : 					x_adjust = x2 - active_int_viewport.x_max;

  006a4	8b 45 9c	 mov	 eax, DWORD PTR _x2$12[ebp]
  006a7	2b 05 08 00 00
	00		 sub	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  006ad	89 45 8c	 mov	 DWORD PTR _x_adjust$8[ebp], eax

; 406  : 	
; 407  : 					width -= x_adjust;

  006b0	8b 45 b4	 mov	 eax, DWORD PTR _width$18[ebp]
  006b3	2b 45 8c	 sub	 eax, DWORD PTR _x_adjust$8[ebp]
  006b6	89 45 b4	 mov	 DWORD PTR _width$18[ebp], eax

; 408  : 	
; 409  : 					sprite_ptr_add_on += x_adjust;

  006b9	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _sprite_ptr_add_on$4[ebp]
  006bf	03 45 8c	 add	 eax, DWORD PTR _x_adjust$8[ebp]
  006c2	89 85 7c ff ff
	ff		 mov	 DWORD PTR _sprite_ptr_add_on$4[ebp], eax
$LN44@draw_mono_:

; 410  : 				}
; 411  : 	
; 412  : 				screen_ptr = screen_data + (x1 * sizeof (unsigned int)) + (y1 * screen_pitch);

  006c8	8b 45 a4	 mov	 eax, DWORD PTR _x1$14[ebp]
  006cb	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _screen_data$3[ebp]
  006d1	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  006d4	8b 45 a0	 mov	 eax, DWORD PTR _y1$13[ebp]
  006d7	0f af 45 84	 imul	 eax, DWORD PTR _screen_pitch$6[ebp]
  006db	03 d0		 add	 edx, eax
  006dd	89 95 74 ff ff
	ff		 mov	 DWORD PTR _screen_ptr$2[ebp], edx

; 413  : 	
; 414  : 				screen_ptr_add_on = screen_pitch - (width * sizeof (unsigned int));

  006e3	8b 45 b4	 mov	 eax, DWORD PTR _width$18[ebp]
  006e6	c1 e0 02	 shl	 eax, 2
  006e9	8b 4d 84	 mov	 ecx, DWORD PTR _screen_pitch$6[ebp]
  006ec	2b c8		 sub	 ecx, eax
  006ee	89 4d 80	 mov	 DWORD PTR _screen_ptr_add_on$5[ebp], ecx

; 415  : 	
; 416  : 				for (y_count = height; y_count > 0 ; y_count--)

  006f1	8b 45 b0	 mov	 eax, DWORD PTR _height$17[ebp]
  006f4	89 45 90	 mov	 DWORD PTR _y_count$9[ebp], eax
  006f7	eb 09		 jmp	 SHORT $LN22@draw_mono_
$LN20@draw_mono_:
  006f9	8b 45 90	 mov	 eax, DWORD PTR _y_count$9[ebp]
  006fc	83 e8 01	 sub	 eax, 1
  006ff	89 45 90	 mov	 DWORD PTR _y_count$9[ebp], eax
$LN22@draw_mono_:
  00702	83 7d 90 00	 cmp	 DWORD PTR _y_count$9[ebp], 0
  00706	7e 71		 jle	 SHORT $LN21@draw_mono_

; 417  : 				{
; 418  : 					for (x_count = width; x_count > 0 ; x_count--)

  00708	8b 45 b4	 mov	 eax, DWORD PTR _width$18[ebp]
  0070b	89 45 94	 mov	 DWORD PTR _x_count$10[ebp], eax
  0070e	eb 09		 jmp	 SHORT $LN25@draw_mono_
$LN23@draw_mono_:
  00710	8b 45 94	 mov	 eax, DWORD PTR _x_count$10[ebp]
  00713	83 e8 01	 sub	 eax, 1
  00716	89 45 94	 mov	 DWORD PTR _x_count$10[ebp], eax
$LN25@draw_mono_:
  00719	83 7d 94 00	 cmp	 DWORD PTR _x_count$10[ebp], 0
  0071d	7e 3d		 jle	 SHORT $LN24@draw_mono_

; 419  : 					{
; 420  : 						if (*sprite_ptr++)

  0071f	8b 45 08	 mov	 eax, DWORD PTR _sprite_ptr$[ebp]
  00722	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00725	89 8d 2c ff ff
	ff		 mov	 DWORD PTR tv331[ebp], ecx
  0072b	8b 55 08	 mov	 edx, DWORD PTR _sprite_ptr$[ebp]
  0072e	83 c2 01	 add	 edx, 1
  00731	89 55 08	 mov	 DWORD PTR _sprite_ptr$[ebp], edx
  00734	83 bd 2c ff ff
	ff 00		 cmp	 DWORD PTR tv331[ebp], 0
  0073b	74 0e		 je	 SHORT $LN45@draw_mono_

; 421  : 						{
; 422  : 							*(unsigned int *)screen_ptr = col;

  0073d	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _screen_ptr$2[ebp]
  00743	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _col$1[ebp]
  00749	89 08		 mov	 DWORD PTR [eax], ecx
$LN45@draw_mono_:

; 423  : 						}
; 424  : 	
; 425  : 						screen_ptr += sizeof (unsigned int);

  0074b	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _screen_ptr$2[ebp]
  00751	83 c0 04	 add	 eax, 4
  00754	89 85 74 ff ff
	ff		 mov	 DWORD PTR _screen_ptr$2[ebp], eax

; 426  : 					}

  0075a	eb b4		 jmp	 SHORT $LN23@draw_mono_
$LN24@draw_mono_:

; 427  : 	
; 428  : 					screen_ptr += screen_ptr_add_on;

  0075c	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _screen_ptr$2[ebp]
  00762	03 45 80	 add	 eax, DWORD PTR _screen_ptr_add_on$5[ebp]
  00765	89 85 74 ff ff
	ff		 mov	 DWORD PTR _screen_ptr$2[ebp], eax

; 429  : 	
; 430  : 					sprite_ptr += sprite_ptr_add_on;

  0076b	8b 45 08	 mov	 eax, DWORD PTR _sprite_ptr$[ebp]
  0076e	03 85 7c ff ff
	ff		 add	 eax, DWORD PTR _sprite_ptr_add_on$4[ebp]
  00774	89 45 08	 mov	 DWORD PTR _sprite_ptr$[ebp], eax

; 431  : 				}

  00777	eb 80		 jmp	 SHORT $LN20@draw_mono_
$LN21@draw_mono_:

; 432  : 			}
; 433  : 		}
; 434  : 	}
; 435  : }

  00779	5f		 pop	 edi
  0077a	5e		 pop	 esi
  0077b	5b		 pop	 ebx
  0077c	8b e5		 mov	 esp, ebp
  0077e	5d		 pop	 ebp
  0077f	c2 10 00	 ret	 16			; 00000010H
?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ENDP	; draw_mono_sprite
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?floor@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?floor@@YGMM@Z PROC					; floor, COMDAT

; 122  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 123  : 	return (_CSTD floorf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _floorf
  00019	83 c4 04	 add	 esp, 4

; 124  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?floor@@YGMM@Z ENDP					; floor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _floorf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_floorf	PROC						; COMDAT

; 685  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 686  :             return (float)floor(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  0001c	83 c4 08	 add	 esp, 8
  0001f	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00022	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 687  :         }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
_floorf	ENDP
_TEXT	ENDS
END
