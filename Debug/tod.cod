; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\misc\tod.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?day_names@@3PAPBDA				; day_names
PUBLIC	?month_data@@3PAUMONTH_DATA_TYPE@@A		; month_data
PUBLIC	??_C@_06FANFKECJ@MONDAY@			; `string'
PUBLIC	??_C@_07BECNPLPO@TUESDAY@			; `string'
PUBLIC	??_C@_09EECKGOIH@WEDNESDAY@			; `string'
PUBLIC	??_C@_08INHPDGAE@THURSDAY@			; `string'
PUBLIC	??_C@_06FPLKDNIG@FRIDAY@			; `string'
PUBLIC	??_C@_08HAEDFCFK@SATURDAY@			; `string'
PUBLIC	??_C@_06MFHJGCEH@SUNDAY@			; `string'
PUBLIC	??_C@_0O@LKNDFHLP@NUM_DAY_TYPES@		; `string'
PUBLIC	??_C@_07CCLEIIEC@JANUARY@			; `string'
PUBLIC	??_C@_08JAMLPDNJ@FEBRUARY@			; `string'
PUBLIC	??_C@_05LDBAAHKK@MARCH@				; `string'
PUBLIC	??_C@_05PAKJDJDB@APRIL@				; `string'
PUBLIC	??_C@_03KNOEKBOJ@MAY@				; `string'
PUBLIC	??_C@_04CAEHKMBA@JUNE@				; `string'
PUBLIC	??_C@_04MFLECFCD@JULY@				; `string'
PUBLIC	??_C@_06HKIBLEHI@AUGUST@			; `string'
PUBLIC	??_C@_09GINIDFIE@SEPTEMBER@			; `string'
PUBLIC	??_C@_07JNPOPKAB@OCTOBER@			; `string'
PUBLIC	??_C@_08IPCJNIGE@NOVEMBER@			; `string'
PUBLIC	??_C@_08LOCBPNFL@DECEMBER@			; `string'
PUBLIC	??_C@_0BA@JNJNBOLB@NUM_MONTH_TYPES@		; `string'
;	COMDAT ??_C@_0BA@JNJNBOLB@NUM_MONTH_TYPES@
CONST	SEGMENT
??_C@_0BA@JNJNBOLB@NUM_MONTH_TYPES@ DB 'NUM_MONTH_TYPES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LOCBPNFL@DECEMBER@
CONST	SEGMENT
??_C@_08LOCBPNFL@DECEMBER@ DB 'DECEMBER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IPCJNIGE@NOVEMBER@
CONST	SEGMENT
??_C@_08IPCJNIGE@NOVEMBER@ DB 'NOVEMBER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JNPOPKAB@OCTOBER@
CONST	SEGMENT
??_C@_07JNPOPKAB@OCTOBER@ DB 'OCTOBER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09GINIDFIE@SEPTEMBER@
CONST	SEGMENT
??_C@_09GINIDFIE@SEPTEMBER@ DB 'SEPTEMBER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HKIBLEHI@AUGUST@
CONST	SEGMENT
??_C@_06HKIBLEHI@AUGUST@ DB 'AUGUST', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MFLECFCD@JULY@
CONST	SEGMENT
??_C@_04MFLECFCD@JULY@ DB 'JULY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04CAEHKMBA@JUNE@
CONST	SEGMENT
??_C@_04CAEHKMBA@JUNE@ DB 'JUNE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KNOEKBOJ@MAY@
CONST	SEGMENT
??_C@_03KNOEKBOJ@MAY@ DB 'MAY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PAKJDJDB@APRIL@
CONST	SEGMENT
??_C@_05PAKJDJDB@APRIL@ DB 'APRIL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LDBAAHKK@MARCH@
CONST	SEGMENT
??_C@_05LDBAAHKK@MARCH@ DB 'MARCH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08JAMLPDNJ@FEBRUARY@
CONST	SEGMENT
??_C@_08JAMLPDNJ@FEBRUARY@ DB 'FEBRUARY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCLEIIEC@JANUARY@
CONST	SEGMENT
??_C@_07CCLEIIEC@JANUARY@ DB 'JANUARY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LKNDFHLP@NUM_DAY_TYPES@
CONST	SEGMENT
??_C@_0O@LKNDFHLP@NUM_DAY_TYPES@ DB 'NUM_DAY_TYPES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06MFHJGCEH@SUNDAY@
CONST	SEGMENT
??_C@_06MFHJGCEH@SUNDAY@ DB 'SUNDAY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HAEDFCFK@SATURDAY@
CONST	SEGMENT
??_C@_08HAEDFCFK@SATURDAY@ DB 'SATURDAY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FPLKDNIG@FRIDAY@
CONST	SEGMENT
??_C@_06FPLKDNIG@FRIDAY@ DB 'FRIDAY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08INHPDGAE@THURSDAY@
CONST	SEGMENT
??_C@_08INHPDGAE@THURSDAY@ DB 'THURSDAY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09EECKGOIH@WEDNESDAY@
CONST	SEGMENT
??_C@_09EECKGOIH@WEDNESDAY@ DB 'WEDNESDAY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BECNPLPO@TUESDAY@
CONST	SEGMENT
??_C@_07BECNPLPO@TUESDAY@ DB 'TUESDAY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FANFKECJ@MONDAY@
CONST	SEGMENT
??_C@_06FANFKECJ@MONDAY@ DB 'MONDAY', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
?day_names@@3PAPBDA DD FLAT:??_C@_06FANFKECJ@MONDAY@	; day_names
	DD	FLAT:??_C@_07BECNPLPO@TUESDAY@
	DD	FLAT:??_C@_09EECKGOIH@WEDNESDAY@
	DD	FLAT:??_C@_08INHPDGAE@THURSDAY@
	DD	FLAT:??_C@_06FPLKDNIG@FRIDAY@
	DD	FLAT:??_C@_08HAEDFCFK@SATURDAY@
	DD	FLAT:??_C@_06MFHJGCEH@SUNDAY@
	DD	FLAT:??_C@_0O@LKNDFHLP@NUM_DAY_TYPES@
?month_data@@3PAUMONTH_DATA_TYPE@@A DD FLAT:??_C@_07CCLEIIEC@JANUARY@ ; month_data
	DB	01fH
	ORG $+3
	DD	FLAT:??_C@_08JAMLPDNJ@FEBRUARY@
	DB	01cH
	ORG $+3
	DD	FLAT:??_C@_05LDBAAHKK@MARCH@
	DB	01fH
	ORG $+3
	DD	FLAT:??_C@_05PAKJDJDB@APRIL@
	DB	01eH
	ORG $+3
	DD	FLAT:??_C@_03KNOEKBOJ@MAY@
	DB	01fH
	ORG $+3
	DD	FLAT:??_C@_04CAEHKMBA@JUNE@
	DB	01eH
	ORG $+3
	DD	FLAT:??_C@_04MFLECFCD@JULY@
	DB	01fH
	ORG $+3
	DD	FLAT:??_C@_06HKIBLEHI@AUGUST@
	DB	01fH
	ORG $+3
	DD	FLAT:??_C@_09GINIDFIE@SEPTEMBER@
	DB	01eH
	ORG $+3
	DD	FLAT:??_C@_07JNPOPKAB@OCTOBER@
	DB	01fH
	ORG $+3
	DD	FLAT:??_C@_08IPCJNIGE@NOVEMBER@
	DB	01eH
	ORG $+3
	DD	FLAT:??_C@_08LOCBPNFL@DECEMBER@
	DB	01eH
	ORG $+3
	DD	FLAT:??_C@_0BA@JNJNBOLB@NUM_MONTH_TYPES@
	DB	00H
	ORG $+3
_DATA	ENDS
PUBLIC	?get_analogue_clock_values@@YGXMPAM00@Z		; get_analogue_clock_values
PUBLIC	?get_digital_clock_values@@YGXMPAM00@Z		; get_digital_clock_values
PUBLIC	?get_digital_clock_int_values@@YGXMPAH00@Z	; get_digital_clock_int_values
PUBLIC	?get_digital_countdown_values@@YGXMPAH000@Z	; get_digital_countdown_values
PUBLIC	?get_time_of_day@@YGMMMM@Z			; get_time_of_day
PUBLIC	??$fmod@MHX@@YGNMH@Z				; fmod<float,int,void>
PUBLIC	?__LINE__Var@?0??get_time_of_day@@YGMMMM@Z@4JA	; `get_time_of_day'::`1'::__LINE__Var
PUBLIC	??_C@_0DH@OANFLKLB@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0CL@PEEIAMPA@?$CIhours?5?$DO?$DN?50?40?$CJ?5?$CG?$CG?5?$CIhours?5?$DM?5HOUR@ ; `string'
PUBLIC	??_C@_0DD@LOPIONKN@?$CIminutes?5?$DO?$DN?50?40?$CJ?5?$CG?$CG?5?$CIminutes?5?$DM?5@ ; `string'
PUBLIC	??_C@_0DE@HPEIACGN@?$CIseconds?5?$DO?$DN?50?40?$CJ?5?$CG?$CG?5?$CIseconds?5?$DM?5@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3991a2b4
PUBLIC	__real@3f91111120000000
PUBLIC	__real@4028000000000000
PUBLIC	__real@40f517f000000000
PUBLIC	__real@41c00000
PUBLIC	__real@42700000
PUBLIC	__real@45610000
EXTRN	_fmod:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	__fltused:DWORD
;	COMDAT __real@45610000
CONST	SEGMENT
__real@45610000 DD 045610000r			; 3600
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@41c00000
CONST	SEGMENT
__real@41c00000 DD 041c00000r			; 24
CONST	ENDS
;	COMDAT __real@40f517f000000000
CONST	SEGMENT
__real@40f517f000000000 DQ 040f517f000000000r	; 86399
CONST	ENDS
;	COMDAT __real@4028000000000000
CONST	SEGMENT
__real@4028000000000000 DQ 04028000000000000r	; 12
CONST	ENDS
;	COMDAT __real@3f91111120000000
CONST	SEGMENT
__real@3f91111120000000 DQ 03f91111120000000r	; 0.0166667
CONST	ENDS
;	COMDAT __real@3991a2b4
CONST	SEGMENT
__real@3991a2b4 DD 03991a2b4r			; 0.000277778
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_0DE@HPEIACGN@?$CIseconds?5?$DO?$DN?50?40?$CJ?5?$CG?$CG?5?$CIseconds?5?$DM?5@
CONST	SEGMENT
??_C@_0DE@HPEIACGN@?$CIseconds?5?$DO?$DN?50?40?$CJ?5?$CG?$CG?5?$CIseconds?5?$DM?5@ DB '('
	DB	'seconds >= 0.0) && (seconds < SECONDS_IN_A_MINUTE)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@LOPIONKN@?$CIminutes?5?$DO?$DN?50?40?$CJ?5?$CG?$CG?5?$CIminutes?5?$DM?5@
CONST	SEGMENT
??_C@_0DD@LOPIONKN@?$CIminutes?5?$DO?$DN?50?40?$CJ?5?$CG?$CG?5?$CIminutes?5?$DM?5@ DB '('
	DB	'minutes >= 0.0) && (minutes < MINUTES_IN_AN_HOUR)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@PEEIAMPA@?$CIhours?5?$DO?$DN?50?40?$CJ?5?$CG?$CG?5?$CIhours?5?$DM?5HOUR@
CONST	SEGMENT
??_C@_0CL@PEEIAMPA@?$CIhours?5?$DO?$DN?50?40?$CJ?5?$CG?$CG?5?$CIhours?5?$DM?5HOUR@ DB '('
	DB	'hours >= 0.0) && (hours < HOURS_IN_A_DAY)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@OANFLKLB@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0DH@OANFLKLB@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\misc\tod.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_time_of_day@@YGMMMM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_time_of_day@@YGMMMM@Z@4JA DD 0f3H	; `get_time_of_day'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtgmath.h
;	COMDAT ??$fmod@MHX@@YGNMH@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$fmod@MHX@@YGNMH@Z PROC				; fmod<float,int,void>, COMDAT

; 88   : _GENERIC_MATH2(fmod, _CRTDEFAULT)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	f2 0f 2a 45 0c	 cvtsi2sd xmm0, DWORD PTR __Right$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __Left$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _fmod
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
??$fmod@MHX@@YGNMH@Z ENDP				; fmod<float,int,void>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\misc\tod.c
;	COMDAT ?get_time_of_day@@YGMMMM@Z
_TEXT	SEGMENT
tv131 = -68						; size = 4
_hours$ = 8						; size = 4
_minutes$ = 12						; size = 4
_seconds$ = 16						; size = 4
?get_time_of_day@@YGMMMM@Z PROC				; get_time_of_day, COMDAT

; 243  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 244  : 	ASSERT ((hours >= 0.0) && (hours < HOURS_IN_A_DAY));

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _hours$[ebp]
  0000e	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00016	72 0e		 jb	 SHORT $LN3@get_time_o
  00018	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41c00000
  00020	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _hours$[ebp]
  00024	77 18		 ja	 SHORT $LN2@get_time_o
$LN3@get_time_o:
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_time_of_day@@YGMMMM@Z@4JA
  0002b	83 c0 01	 add	 eax, 1
  0002e	50		 push	 eax
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@OANFLKLB@c?3?2users?2nhv90?2projects?2eech?2ap@
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@PEEIAMPA@?$CIhours?5?$DO?$DN?50?40?$CJ?5?$CG?$CG?5?$CIhours?5?$DM?5HOUR@
  00039	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_time_o:

; 245  : 
; 246  : 	ASSERT ((minutes >= 0.0) && (minutes < MINUTES_IN_AN_HOUR));

  0003e	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _minutes$[ebp]
  00043	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0004b	72 0e		 jb	 SHORT $LN5@get_time_o
  0004d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42700000
  00055	0f 2f 45 0c	 comiss	 xmm0, DWORD PTR _minutes$[ebp]
  00059	77 18		 ja	 SHORT $LN4@get_time_o
$LN5@get_time_o:
  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_time_of_day@@YGMMMM@Z@4JA
  00060	83 c0 03	 add	 eax, 3
  00063	50		 push	 eax
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@OANFLKLB@c?3?2users?2nhv90?2projects?2eech?2ap@
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@LOPIONKN@?$CIminutes?5?$DO?$DN?50?40?$CJ?5?$CG?$CG?5?$CIminutes?5?$DM?5@
  0006e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_time_o:

; 247  : 
; 248  : 	ASSERT ((seconds >= 0.0) && (seconds < SECONDS_IN_A_MINUTE));

  00073	f3 0f 5a 45 10	 cvtss2sd xmm0, DWORD PTR _seconds$[ebp]
  00078	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00080	72 0e		 jb	 SHORT $LN7@get_time_o
  00082	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42700000
  0008a	0f 2f 45 10	 comiss	 xmm0, DWORD PTR _seconds$[ebp]
  0008e	77 18		 ja	 SHORT $LN6@get_time_o
$LN7@get_time_o:
  00090	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_time_of_day@@YGMMMM@Z@4JA
  00095	83 c0 05	 add	 eax, 5
  00098	50		 push	 eax
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@OANFLKLB@c?3?2users?2nhv90?2projects?2eech?2ap@
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@HPEIACGN@?$CIseconds?5?$DO?$DN?50?40?$CJ?5?$CG?$CG?5?$CIseconds?5?$DM?5@
  000a3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_time_o:

; 249  : 
; 250  : 	return ((hours * ONE_HOUR) + (minutes * ONE_MINUTE) + seconds);

  000a8	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _hours$[ebp]
  000ad	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@45610000
  000b5	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _minutes$[ebp]
  000ba	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@42700000
  000c2	f3 0f 58 c1	 addss	 xmm0, xmm1
  000c6	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _seconds$[ebp]
  000cb	f3 0f 11 45 bc	 movss	 DWORD PTR tv131[ebp], xmm0
  000d0	d9 45 bc	 fld	 DWORD PTR tv131[ebp]

; 251  : }

  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi
  000d5	5b		 pop	 ebx
  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c2 0c 00	 ret	 12			; 0000000cH
?get_time_of_day@@YGMMMM@Z ENDP				; get_time_of_day
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\misc\tod.c
;	COMDAT ?get_digital_countdown_values@@YGXMPAH000@Z
_TEXT	SEGMENT
_s$ = -16						; size = 4
_m$ = -12						; size = 4
_h$ = -8						; size = 4
_d$ = -4						; size = 4
_time_remaining$ = 8					; size = 4
_days$ = 12						; size = 4
_hours$ = 16						; size = 4
_minutes$ = 20						; size = 4
_seconds$ = 24						; size = 4
?get_digital_countdown_values@@YGXMPAH000@Z PROC	; get_digital_countdown_values, COMDAT

; 217  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 218  : 	int
; 219  : 		d, h, m, s;
; 220  : 
; 221  : 	convert_float_to_int (time_remaining, &s);

  00009	8d 45 f0	 lea	 eax, DWORD PTR _s$[ebp]
  0000c	50		 push	 eax
  0000d	51		 push	 ecx
  0000e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _time_remaining$[ebp]
  00013	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00018	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 222  : 
; 223  : 	d = s / ONE_DAY;

  0001d	8b 45 f0	 mov	 eax, DWORD PTR _s$[ebp]
  00020	99		 cdq
  00021	b9 80 51 01 00	 mov	 ecx, 86400		; 00015180H
  00026	f7 f9		 idiv	 ecx
  00028	89 45 fc	 mov	 DWORD PTR _d$[ebp], eax

; 224  : 
; 225  : 	h = s / ONE_HOUR;

  0002b	8b 45 f0	 mov	 eax, DWORD PTR _s$[ebp]
  0002e	99		 cdq
  0002f	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  00034	f7 f9		 idiv	 ecx
  00036	89 45 f8	 mov	 DWORD PTR _h$[ebp], eax

; 226  : 
; 227  : 	m = s / ONE_MINUTE;

  00039	8b 45 f0	 mov	 eax, DWORD PTR _s$[ebp]
  0003c	99		 cdq
  0003d	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00042	f7 f9		 idiv	 ecx
  00044	89 45 f4	 mov	 DWORD PTR _m$[ebp], eax

; 228  : 
; 229  : 	if (days) *days = d;

  00047	83 7d 0c 00	 cmp	 DWORD PTR _days$[ebp], 0
  0004b	74 08		 je	 SHORT $LN2@get_digita
  0004d	8b 45 0c	 mov	 eax, DWORD PTR _days$[ebp]
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _d$[ebp]
  00053	89 08		 mov	 DWORD PTR [eax], ecx
$LN2@get_digita:

; 230  : 
; 231  : 	if (hours) *hours = h - (d * HOURS_IN_A_DAY);

  00055	83 7d 10 00	 cmp	 DWORD PTR _hours$[ebp], 0
  00059	74 0e		 je	 SHORT $LN3@get_digita
  0005b	6b 45 fc 18	 imul	 eax, DWORD PTR _d$[ebp], 24
  0005f	8b 4d f8	 mov	 ecx, DWORD PTR _h$[ebp]
  00062	2b c8		 sub	 ecx, eax
  00064	8b 55 10	 mov	 edx, DWORD PTR _hours$[ebp]
  00067	89 0a		 mov	 DWORD PTR [edx], ecx
$LN3@get_digita:

; 232  : 
; 233  : 	if (minutes) *minutes = m - (h * MINUTES_IN_AN_HOUR);

  00069	83 7d 14 00	 cmp	 DWORD PTR _minutes$[ebp], 0
  0006d	74 0e		 je	 SHORT $LN4@get_digita
  0006f	6b 45 f8 3c	 imul	 eax, DWORD PTR _h$[ebp], 60
  00073	8b 4d f4	 mov	 ecx, DWORD PTR _m$[ebp]
  00076	2b c8		 sub	 ecx, eax
  00078	8b 55 14	 mov	 edx, DWORD PTR _minutes$[ebp]
  0007b	89 0a		 mov	 DWORD PTR [edx], ecx
$LN4@get_digita:

; 234  : 
; 235  : 	if (seconds) *seconds = s - (m * SECONDS_IN_A_MINUTE);

  0007d	83 7d 18 00	 cmp	 DWORD PTR _seconds$[ebp], 0
  00081	74 0e		 je	 SHORT $LN5@get_digita
  00083	6b 45 f4 3c	 imul	 eax, DWORD PTR _m$[ebp], 60
  00087	8b 4d f0	 mov	 ecx, DWORD PTR _s$[ebp]
  0008a	2b c8		 sub	 ecx, eax
  0008c	8b 55 18	 mov	 edx, DWORD PTR _seconds$[ebp]
  0008f	89 0a		 mov	 DWORD PTR [edx], ecx
$LN5@get_digita:

; 236  : }

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 14 00	 ret	 20			; 00000014H
?get_digital_countdown_values@@YGXMPAH000@Z ENDP	; get_digital_countdown_values
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\misc\tod.c
;	COMDAT ?get_digital_clock_int_values@@YGXMPAH00@Z
_TEXT	SEGMENT
_hours_past_midnight$ = -12				; size = 4
_minutes_past_midnight$ = -8				; size = 4
_seconds_past_midnight$ = -4				; size = 4
_time_of_day$ = 8					; size = 4
_hours$ = 12						; size = 4
_minutes$ = 16						; size = 4
_seconds$ = 20						; size = 4
?get_digital_clock_int_values@@YGXMPAH00@Z PROC		; get_digital_clock_int_values, COMDAT

; 191  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 192  : 	int
; 193  : 		seconds_past_midnight,
; 194  : 		minutes_past_midnight,
; 195  : 		hours_past_midnight;
; 196  : 
; 197  : //	time_of_day = bound (time_of_day, 0.0, ONE_DAY - 1.0);
; 198  : 
; 199  : 	convert_float_to_int (time_of_day, &seconds_past_midnight);

  00009	8d 45 fc	 lea	 eax, DWORD PTR _seconds_past_midnight$[ebp]
  0000c	50		 push	 eax
  0000d	51		 push	 ecx
  0000e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _time_of_day$[ebp]
  00013	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00018	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 200  : 
; 201  : 	hours_past_midnight = seconds_past_midnight / ONE_HOUR;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _seconds_past_midnight$[ebp]
  00020	99		 cdq
  00021	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  00026	f7 f9		 idiv	 ecx
  00028	89 45 f4	 mov	 DWORD PTR _hours_past_midnight$[ebp], eax

; 202  : 
; 203  : 	minutes_past_midnight = seconds_past_midnight / ONE_MINUTE;

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _seconds_past_midnight$[ebp]
  0002e	99		 cdq
  0002f	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00034	f7 f9		 idiv	 ecx
  00036	89 45 f8	 mov	 DWORD PTR _minutes_past_midnight$[ebp], eax

; 204  : 
; 205  : 	*hours = hours_past_midnight;

  00039	8b 45 0c	 mov	 eax, DWORD PTR _hours$[ebp]
  0003c	8b 4d f4	 mov	 ecx, DWORD PTR _hours_past_midnight$[ebp]
  0003f	89 08		 mov	 DWORD PTR [eax], ecx

; 206  : 
; 207  : 	*minutes = (minutes_past_midnight - (hours_past_midnight * MINUTES_IN_AN_HOUR));

  00041	6b 45 f4 3c	 imul	 eax, DWORD PTR _hours_past_midnight$[ebp], 60
  00045	8b 4d f8	 mov	 ecx, DWORD PTR _minutes_past_midnight$[ebp]
  00048	2b c8		 sub	 ecx, eax
  0004a	8b 55 10	 mov	 edx, DWORD PTR _minutes$[ebp]
  0004d	89 0a		 mov	 DWORD PTR [edx], ecx

; 208  : 
; 209  : 	*seconds = (seconds_past_midnight - (minutes_past_midnight * SECONDS_IN_A_MINUTE));

  0004f	6b 45 f8 3c	 imul	 eax, DWORD PTR _minutes_past_midnight$[ebp], 60
  00053	8b 4d fc	 mov	 ecx, DWORD PTR _seconds_past_midnight$[ebp]
  00056	2b c8		 sub	 ecx, eax
  00058	8b 55 14	 mov	 edx, DWORD PTR _seconds$[ebp]
  0005b	89 0a		 mov	 DWORD PTR [edx], ecx

; 210  : }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 10 00	 ret	 16			; 00000010H
?get_digital_clock_int_values@@YGXMPAH00@Z ENDP		; get_digital_clock_int_values
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\misc\tod.c
;	COMDAT ?get_digital_clock_values@@YGXMPAM00@Z
_TEXT	SEGMENT
_hours_past_midnight$ = -12				; size = 4
_minutes_past_midnight$ = -8				; size = 4
_seconds_past_midnight$ = -4				; size = 4
_time_of_day$ = 8					; size = 4
_hours$ = 12						; size = 4
_minutes$ = 16						; size = 4
_seconds$ = 20						; size = 4
?get_digital_clock_values@@YGXMPAM00@Z PROC		; get_digital_clock_values, COMDAT

; 165  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 166  : 	int
; 167  : 		seconds_past_midnight,
; 168  : 		minutes_past_midnight,
; 169  : 		hours_past_midnight;
; 170  : 
; 171  : //	time_of_day = bound (time_of_day, 0.0, ONE_DAY - 1.0);
; 172  : 
; 173  : 	convert_float_to_int (time_of_day, &seconds_past_midnight);

  00009	8d 45 fc	 lea	 eax, DWORD PTR _seconds_past_midnight$[ebp]
  0000c	50		 push	 eax
  0000d	51		 push	 ecx
  0000e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _time_of_day$[ebp]
  00013	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00018	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 174  : 
; 175  : 	hours_past_midnight = seconds_past_midnight / ONE_HOUR;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _seconds_past_midnight$[ebp]
  00020	99		 cdq
  00021	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  00026	f7 f9		 idiv	 ecx
  00028	89 45 f4	 mov	 DWORD PTR _hours_past_midnight$[ebp], eax

; 176  : 
; 177  : 	minutes_past_midnight = seconds_past_midnight / ONE_MINUTE;

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _seconds_past_midnight$[ebp]
  0002e	99		 cdq
  0002f	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00034	f7 f9		 idiv	 ecx
  00036	89 45 f8	 mov	 DWORD PTR _minutes_past_midnight$[ebp], eax

; 178  : 
; 179  : 	*hours = (float) hours_past_midnight;

  00039	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _hours_past_midnight$[ebp]
  0003e	8b 45 0c	 mov	 eax, DWORD PTR _hours$[ebp]
  00041	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 180  : 
; 181  : 	*minutes = (float) (minutes_past_midnight - (hours_past_midnight * MINUTES_IN_AN_HOUR));

  00045	6b 45 f4 3c	 imul	 eax, DWORD PTR _hours_past_midnight$[ebp], 60
  00049	8b 4d f8	 mov	 ecx, DWORD PTR _minutes_past_midnight$[ebp]
  0004c	2b c8		 sub	 ecx, eax
  0004e	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00052	8b 55 10	 mov	 edx, DWORD PTR _minutes$[ebp]
  00055	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 182  : 
; 183  : 	*seconds = (float) (seconds_past_midnight - (minutes_past_midnight * SECONDS_IN_A_MINUTE));

  00059	6b 45 f8 3c	 imul	 eax, DWORD PTR _minutes_past_midnight$[ebp], 60
  0005d	8b 4d fc	 mov	 ecx, DWORD PTR _seconds_past_midnight$[ebp]
  00060	2b c8		 sub	 ecx, eax
  00062	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00066	8b 55 14	 mov	 edx, DWORD PTR _seconds$[ebp]
  00069	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 184  : }

  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 10 00	 ret	 16			; 00000010H
?get_digital_clock_values@@YGXMPAM00@Z ENDP		; get_digital_clock_values
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\misc\tod.c
;	COMDAT ?get_analogue_clock_values@@YGXMPAM00@Z
_TEXT	SEGMENT
tv69 = -80						; size = 8
tv135 = -72						; size = 8
tv70 = -72						; size = 8
_time_of_day$ = 8					; size = 4
_hours$ = 12						; size = 4
_minutes$ = 16						; size = 4
_seconds$ = 20						; size = 4
?get_analogue_clock_values@@YGXMPAM00@Z PROC		; get_analogue_clock_values, COMDAT

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 146  : 	time_of_day = bound (time_of_day, 0.0, ONE_DAY - 1.0);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _time_of_day$[ebp]
  0000e	0f 57 c9	 xorps	 xmm1, xmm1
  00011	66 0f 2f c8	 comisd	 xmm1, xmm0
  00015	76 0a		 jbe	 SHORT $LN6@get_analog
  00017	0f 57 c0	 xorps	 xmm0, xmm0
  0001a	f2 0f 11 45 b8	 movsd	 QWORD PTR tv70[ebp], xmm0
  0001f	eb 32		 jmp	 SHORT $LN7@get_analog
$LN6@get_analog:
  00021	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _time_of_day$[ebp]
  00026	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@40f517f000000000
  0002e	76 0f		 jbe	 SHORT $LN4@get_analog
  00030	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@40f517f000000000
  00038	f2 0f 11 45 b0	 movsd	 QWORD PTR tv69[ebp], xmm0
  0003d	eb 0a		 jmp	 SHORT $LN5@get_analog
$LN4@get_analog:
  0003f	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _time_of_day$[ebp]
  00044	f2 0f 11 45 b0	 movsd	 QWORD PTR tv69[ebp], xmm0
$LN5@get_analog:
  00049	f2 0f 10 45 b0	 movsd	 xmm0, QWORD PTR tv69[ebp]
  0004e	f2 0f 11 45 b8	 movsd	 QWORD PTR tv70[ebp], xmm0
$LN7@get_analog:
  00053	f2 0f 5a 45 b8	 cvtsd2ss xmm0, QWORD PTR tv70[ebp]
  00058	f3 0f 11 45 08	 movss	 DWORD PTR _time_of_day$[ebp], xmm0

; 147  : 
; 148  : 	*hours = time_of_day * ONE_OVER_ONE_HOUR;

  0005d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _time_of_day$[ebp]
  00062	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3991a2b4
  0006a	8b 45 0c	 mov	 eax, DWORD PTR _hours$[ebp]
  0006d	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 149  : 
; 150  : 	if (*hours >= 12.0)

  00071	8b 45 0c	 mov	 eax, DWORD PTR _hours$[ebp]
  00074	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00078	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4028000000000000
  00080	72 1a		 jb	 SHORT $LN2@get_analog

; 151  : 	{
; 152  : 		*hours -= 12.0;

  00082	8b 45 0c	 mov	 eax, DWORD PTR _hours$[ebp]
  00085	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00089	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4028000000000000
  00091	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00095	8b 4d 0c	 mov	 ecx, DWORD PTR _hours$[ebp]
  00098	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
$LN2@get_analog:

; 153  : 	}
; 154  : 
; 155  : 	*minutes = fmod (time_of_day, ONE_HOUR) * ONE_OVER_ONE_MINUTE;

  0009c	68 10 0e 00 00	 push	 3600			; 00000e10H
  000a1	51		 push	 ecx
  000a2	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _time_of_day$[ebp]
  000a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ac	e8 00 00 00 00	 call	 ??$fmod@MHX@@YGNMH@Z	; fmod<float,int,void>
  000b1	dd 5d b8	 fstp	 QWORD PTR tv135[ebp]
  000b4	f2 0f 10 45 b8	 movsd	 xmm0, QWORD PTR tv135[ebp]
  000b9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f91111120000000
  000c1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000c5	8b 45 10	 mov	 eax, DWORD PTR _minutes$[ebp]
  000c8	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 156  : 
; 157  : 	*seconds = fmod (time_of_day, ONE_MINUTE);

  000cc	6a 3c		 push	 60			; 0000003cH
  000ce	51		 push	 ecx
  000cf	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _time_of_day$[ebp]
  000d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d9	e8 00 00 00 00	 call	 ??$fmod@MHX@@YGNMH@Z	; fmod<float,int,void>
  000de	8b 45 14	 mov	 eax, DWORD PTR _seconds$[ebp]
  000e1	d9 18		 fstp	 DWORD PTR [eax]

; 158  : }

  000e3	5f		 pop	 edi
  000e4	5e		 pop	 esi
  000e5	5b		 pop	 ebx
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c2 10 00	 ret	 16			; 00000010H
?get_analogue_clock_values@@YGXMPAM00@Z ENDP		; get_analogue_clock_values
_TEXT	ENDS
END
