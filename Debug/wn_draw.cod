; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\mobile\weapon\wn_draw.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_asinf
PUBLIC	_atan2f
PUBLIC	_fmodf
PUBLIC	_sinf
PUBLIC	?asin@@YGMM@Z					; asin
PUBLIC	?atan2@@YGMMM@Z					; atan2
PUBLIC	?fmod@@YGMMM@Z					; fmod
PUBLIC	?sin@@YGMM@Z					; sin
PUBLIC	?overload_weapon_draw_functions@@YGXXZ		; overload_weapon_draw_functions
PUBLIC	?get_local_weapon_entity_parachute_open@@YGHPAUENTITY@@@Z ; get_local_weapon_entity_parachute_open
PUBLIC	?update_weapon_ejector_seat_animation@@YGXPAUWEAPON@@@Z ; update_weapon_ejector_seat_animation
PUBLIC	?update_weapon_crate_animation@@YGXPAUWEAPON@@@Z ; update_weapon_crate_animation
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0BO@JOKAHLIP@Invalid?5parachute?5status?5?$DN?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??get_local_weapon_entity_parachute_open@@YGHPAUENTITY@@@Z@4JA ; `get_local_weapon_entity_parachute_open'::`1'::__LINE__Var
PUBLIC	??_C@_0EL@IBALGILN@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_02LFNMGJAP@en@				; `string'
PUBLIC	??_C@_0DK@CLHIENNN@get_local_entity_int_value?5?$CIen?0@ ; `string'
PUBLIC	?__LINE__Var@?0??update_weapon_ejector_seat_animation@@YGXPAUWEAPON@@@Z@4JA ; `update_weapon_ejector_seat_animation'::`1'::__LINE__Var
PUBLIC	??_C@_03DGOGAGNC@raw@				; `string'
PUBLIC	?__LINE__Var@?0??update_weapon_crate_animation@@YGXPAUWEAPON@@@Z@4JA ; `update_weapon_crate_animation'::`1'::__LINE__Var
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	__real@3f00002000400080
PUBLIC	__real@3f10000000000000
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fbacee9f0000000
PUBLIC	__real@3fc6571848000000
PUBLIC	__real@3fc90fdb
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fd5555555555555
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe6666666666666
PUBLIC	__real@3fe8000000000000
PUBLIC	__real@3fe999999999999a
PUBLIC	__real@3feccccccccccccd
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff921fb51000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@400921fb60000000
PUBLIC	__real@4014000000000000
PUBLIC	__real@4018000000000000
PUBLIC	__real@401921fb51000000
PUBLIC	__real@401c000000000000
PUBLIC	__real@4034000000000000
PUBLIC	__real@40400000
PUBLIC	__real@40a00000
PUBLIC	__real@40c00000
PUBLIC	__real@40c90fdb
PUBLIC	__real@40e00000
PUBLIC	__real@41200000
PUBLIC	__real@42c80000
PUBLIC	__real@bff0000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	_memcpy:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_asin:PROC
EXTRN	_atan2:PROC
EXTRN	_fmod:PROC
EXTRN	_sin:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?get_3d_transformation_matrix@@YGXQAY02MMMM@Z:PROC ; get_3d_transformation_matrix
EXTRN	?insert_zbiased_object_into_3d_scene@@YGXW4OBJECT_3D_DRAWING_TYPES@@PAXM@Z:PROC ; insert_zbiased_object_into_3d_scene
EXTRN	?find_object_3d_sub_object@@YG?AW4SUB_OBJECT_SEARCH_RESULT_TYPES@@PAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z:PROC ; find_object_3d_sub_object
EXTRN	?construct_temporary_3d_object@@YGPAUOBJECT_3D_INSTANCE@@HH@Z:PROC ; construct_temporary_3d_object
EXTRN	?animate_entity_simple_keyframed_sub_objects@@YGXPAUOBJECT_3D_INSTANCE@@HM@Z:PROC ; animate_entity_simple_keyframed_sub_objects
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?random_number_seed@@3HA:DWORD			; random_number_seed
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?fn_draw_local_entity_3d_object@@3PAP6GXPAUENTITY@@M@ZA:BYTE ; fn_draw_local_entity_3d_object
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?entities@@3PAUENTITY@@A:DWORD			; entities
EXTRN	?weapon_database@@3PAUWEAPON_DATA@@A:BYTE	; weapon_database
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40e00000
CONST	SEGMENT
__real@40e00000 DD 040e00000r			; 7
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@4034000000000000
CONST	SEGMENT
__real@4034000000000000 DQ 04034000000000000r	; 20
CONST	ENDS
;	COMDAT __real@401c000000000000
CONST	SEGMENT
__real@401c000000000000 DQ 0401c000000000000r	; 7
CONST	ENDS
;	COMDAT __real@401921fb51000000
CONST	SEGMENT
__real@401921fb51000000 DQ 0401921fb51000000r	; 6.28319
CONST	ENDS
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@400921fb60000000
CONST	SEGMENT
__real@400921fb60000000 DQ 0400921fb60000000r	; 3.14159
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@3ff921fb51000000
CONST	SEGMENT
__real@3ff921fb51000000 DQ 03ff921fb51000000r	; 1.5708
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3feccccccccccccd
CONST	SEGMENT
__real@3feccccccccccccd DQ 03feccccccccccccdr	; 0.9
CONST	ENDS
;	COMDAT __real@3fe999999999999a
CONST	SEGMENT
__real@3fe999999999999a DQ 03fe999999999999ar	; 0.8
CONST	ENDS
;	COMDAT __real@3fe8000000000000
CONST	SEGMENT
__real@3fe8000000000000 DQ 03fe8000000000000r	; 0.75
CONST	ENDS
;	COMDAT __real@3fe6666666666666
CONST	SEGMENT
__real@3fe6666666666666 DQ 03fe6666666666666r	; 0.7
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd5555555555555
CONST	SEGMENT
__real@3fd5555555555555 DQ 03fd5555555555555r	; 0.333333
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3fc6571848000000
CONST	SEGMENT
__real@3fc6571848000000 DQ 03fc6571848000000r	; 0.174533
CONST	ENDS
;	COMDAT __real@3fbacee9f0000000
CONST	SEGMENT
__real@3fbacee9f0000000 DQ 03fbacee9f0000000r	; 0.10472
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3f10000000000000
CONST	SEGMENT
__real@3f10000000000000 DQ 03f10000000000000r	; 6.10352e-05
CONST	ENDS
;	COMDAT __real@3f00002000400080
CONST	SEGMENT
__real@3f00002000400080 DQ 03f00002000400080r	; 3.05185e-05
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??update_weapon_crate_animation@@YGXPAUWEAPON@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_weapon_crate_animation@@YGXPAUWEAPON@@@Z@4JA DD 037dH ; `update_weapon_crate_animation'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_03DGOGAGNC@raw@
CONST	SEGMENT
??_C@_03DGOGAGNC@raw@ DB 'raw', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??update_weapon_ejector_seat_animation@@YGXPAUWEAPON@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_weapon_ejector_seat_animation@@YGXPAUWEAPON@@@Z@4JA DD 0336H ; `update_weapon_ejector_seat_animation'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DK@CLHIENNN@get_local_entity_int_value?5?$CIen?0@
CONST	SEGMENT
??_C@_0DK@CLHIENNN@get_local_entity_int_value?5?$CIen?0@ DB 'get_local_en'
	DB	'tity_int_value (en, INT_TYPE_IDENTIFY_WEAPON)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02LFNMGJAP@en@
CONST	SEGMENT
??_C@_02LFNMGJAP@en@ DB 'en', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@IBALGILN@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EL@IBALGILN@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\mobile\weapon\wn_draw'
	DB	'.c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_local_weapon_entity_parachute_open@@YGHPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_local_weapon_entity_parachute_open@@YGHPAUENTITY@@@Z@4JA DD 031cH ; `get_local_weapon_entity_parachute_open'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BO@JOKAHLIP@Invalid?5parachute?5status?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BO@JOKAHLIP@Invalid?5parachute?5status?5?$DN?5?$CFd@ DB 'Invalid p'
	DB	'arachute status = %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\wn_draw.c
;	COMDAT ?draw_local_3d_object@@YGXPAUENTITY@@M@Z
_TEXT	SEGMENT
tv614 = -388						; size = 8
tv594 = -388						; size = 8
tv1329 = -380						; size = 8
tv1313 = -380						; size = 8
tv1239 = -380						; size = 8
tv1220 = -380						; size = 8
tv1165 = -380						; size = 8
tv1149 = -380						; size = 8
tv615 = -380						; size = 8
tv595 = -380						; size = 8
tv1322 = -376						; size = 4
tv1306 = -376						; size = 4
tv1158 = -376						; size = 4
tv1142 = -376						; size = 4
tv673 = -376						; size = 4
tv582 = -376						; size = 4
tv486 = -376						; size = 4
tv79 = -376						; size = 4
$T1 = -372						; size = 4
_t$2 = -304						; size = 4
_search$3 = -300					; size = 56
_lifetime$4 = -244					; size = 4
_roll$5 = -240						; size = 4
_pitch$6 = -236						; size = 4
_heading$7 = -232					; size = 4
_parachute_collapsed$8 = -228				; size = 4
_parachute3$9 = -224					; size = 4
_parachute2$10 = -220					; size = 4
_parachute1$11 = -216					; size = 4
_anim_frame$12 = -212					; size = 4
_t$13 = -208						; size = 4
_delta_pitch$14 = -204					; size = 4
_pitch_ratio$15 = -200					; size = 4
_search$16 = -196					; size = 56
_lifetime$17 = -140					; size = 4
_roll$18 = -136						; size = 4
_pitch$19 = -132					; size = 4
_heading$20 = -128					; size = 4
_ejected_pilot$21 = -124				; size = 4
_parachute3$22 = -120					; size = 4
_parachute2$23 = -116					; size = 4
_parachute1$24 = -112					; size = 4
_rocket_seat$25 = -108					; size = 4
_theta$26 = -104					; size = 4
_rate$27 = -100						; size = 4
_roll$28 = -96						; size = 4
_pitch$29 = -92						; size = 4
_heading$30 = -88					; size = 4
_seed$31 = -84						; size = 4
_theta$32 = -80						; size = 4
_rate$33 = -76						; size = 4
_roll$34 = -72						; size = 4
_pitch$35 = -68						; size = 4
_heading$36 = -64					; size = 4
_seed$37 = -60						; size = 4
_scale$38 = -56						; size = 4
_lifetime_ratio$39 = -52				; size = 4
_total_cruise_time$40 = -48				; size = 4
_cruise_time_error$41 = -44				; size = 4
_roll$42 = -40						; size = 4
_pitch$43 = -36						; size = 4
_heading$44 = -32					; size = 4
_chaff_index$45 = -28					; size = 4
_seed$46 = -24						; size = 4
_roll$47 = -20						; size = 4
_pitch$48 = -16						; size = 4
_heading$49 = -12					; size = 4
_inst3d$ = -8						; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
_range$ = 12						; size = 4
?draw_local_3d_object@@YGXPAUENTITY@@M@Z PROC		; draw_local_3d_object, COMDAT

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 01 00
	00		 sub	 esp, 388		; 00000184H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 81   : 	weapon
; 82   : 		*raw;
; 83   : 
; 84   : 	object_3d_instance
; 85   : 		*inst3d;
; 86   : 
; 87   : 	raw = (weapon *) get_local_entity_data (en);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00012	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 88   : 
; 89   : 	if (!raw->mob.alive)

  00015	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00018	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  0001b	83 e1 01	 and	 ecx, 1
  0001e	75 05		 jne	 SHORT $LN10@draw_local

; 90   : 	{
; 91   : 		return;

  00020	e9 88 14 00 00	 jmp	 $LN1@draw_local
$LN10@draw_local:

; 92   : 	}
; 93   : 
; 94   : 	//
; 95   : 	// do not draw if kill_next_update as the weapon will appear frozen for one frame
; 96   : 	//
; 97   : 
; 98   : 	if (raw->mob.kill_next_update)

  00025	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00028	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  0002b	c1 e9 03	 shr	 ecx, 3
  0002e	83 e1 03	 and	 ecx, 3
  00031	74 05		 je	 SHORT $LN11@draw_local

; 99   : 	{
; 100  : 		return;

  00033	e9 75 14 00 00	 jmp	 $LN1@draw_local
$LN11@draw_local:

; 101  : 	}
; 102  : 
; 103  : 	switch (weapon_database[raw->mob.sub_type].default_3d_shape)

  00038	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0003b	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  00041	8b 91 14 00 00
	00		 mov	 edx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+20]
  00047	89 95 88 fe ff
	ff		 mov	 DWORD PTR tv79[ebp], edx
  0004d	81 bd 88 fe ff
	ff 01 0a 00 00	 cmp	 DWORD PTR tv79[ebp], 2561 ; 00000a01H
  00057	7f 1e		 jg	 SHORT $LN71@draw_local
  00059	81 bd 88 fe ff
	ff 00 0a 00 00	 cmp	 DWORD PTR tv79[ebp], 2560 ; 00000a00H
  00063	0f 8d 72 06 00
	00		 jge	 $LN30@draw_local
  00069	83 bd 88 fe ff
	ff 00		 cmp	 DWORD PTR tv79[ebp], 0
  00070	74 37		 je	 SHORT $LN12@draw_local
  00072	e9 bf 13 00 00	 jmp	 $LN60@draw_local
$LN71@draw_local:
  00077	8b 85 88 fe ff
	ff		 mov	 eax, DWORD PTR tv79[ebp]
  0007d	2d 02 0a 00 00	 sub	 eax, 2562		; 00000a02H
  00082	89 85 88 fe ff
	ff		 mov	 DWORD PTR tv79[ebp], eax
  00088	83 bd 88 fe ff
	ff 0f		 cmp	 DWORD PTR tv79[ebp], 15	; 0000000fH
  0008f	0f 87 a1 13 00
	00		 ja	 $LN60@draw_local
  00095	8b 8d 88 fe ff
	ff		 mov	 ecx, DWORD PTR tv79[ebp]
  0009b	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN72@draw_local[ecx]
  000a2	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN73@draw_local[edx*4]
$LN12@draw_local:

; 104  : 	{
; 105  : 		////////////////////////////////////////
; 106  : 		case OBJECT_3D_INVALID_OBJECT_INDEX:
; 107  : 		////////////////////////////////////////
; 108  : 		{
; 109  : 			break;

  000a9	e9 ff 13 00 00	 jmp	 $LN2@draw_local
$LN13@draw_local:

; 110  : 		}
; 111  : 		////////////////////////////////////////
; 112  : 		case OBJECT_3D_CANNON_SHELL:
; 113  : 		case OBJECT_3D_CANNON_SHELL_BLUE:
; 114  : 		case OBJECT_3D_CANNON_SHELL_GREEN:
; 115  : 		case OBJECT_3D_CANNON_SHELL_ORANGE:
; 116  : 		case OBJECT_3D_CANNON_SHELL_PURPLE:
; 117  : 		case OBJECT_3D_CANNON_SHELL_RED:
; 118  : 		case OBJECT_3D_CANNON_SHELL_WHITE:
; 119  : 		////////////////////////////////////////
; 120  : 		{
; 121  : 			float
; 122  : 				heading,
; 123  : 				pitch,
; 124  : 				roll;
; 125  : 
; 126  : 			inst3d = construct_temporary_3d_object (weapon_database[raw->mob.sub_type].default_3d_shape, FALSE);

  000ae	6a 00		 push	 0
  000b0	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  000b3	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  000b9	8b 91 14 00 00
	00		 mov	 edx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+20]
  000bf	52		 push	 edx
  000c0	e8 00 00 00 00	 call	 ?construct_temporary_3d_object@@YGPAUOBJECT_3D_INSTANCE@@HH@Z ; construct_temporary_3d_object
  000c5	89 45 f8	 mov	 DWORD PTR _inst3d$[ebp], eax

; 127  : 
; 128  : 			if (inst3d)

  000c8	83 7d f8 00	 cmp	 DWORD PTR _inst3d$[ebp], 0
  000cc	0f 84 6c 01 00
	00		 je	 $LN14@draw_local

; 129  : 			{
; 130  : 				inst3d->vp.position = raw->mob.position;

  000d2	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  000d5	83 c0 04	 add	 eax, 4
  000d8	8b 4d f8	 mov	 ecx, DWORD PTR _inst3d$[ebp]
  000db	83 c1 08	 add	 ecx, 8
  000de	8b 10		 mov	 edx, DWORD PTR [eax]
  000e0	89 11		 mov	 DWORD PTR [ecx], edx
  000e2	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000e5	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  000e8	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000eb	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 131  : 
; 132  : 				//
; 133  : 				// scale tracer wrt velocity and frame rate
; 134  : 				//
; 135  : 
; 136  : 				inst3d->relative_scale.x = 100.0;

  000ee	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  000f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  000f9	f3 0f 11 40 44	 movss	 DWORD PTR [eax+68], xmm0

; 137  : 				inst3d->relative_scale.y = 100.0;

  000fe	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  00101	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00109	f3 0f 11 40 48	 movss	 DWORD PTR [eax+72], xmm0

; 138  : 				inst3d->relative_scale.z = raw->mob.velocity * get_delta_time () * 0.75;

  0010e	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00111	f3 0f 10 40 40	 movss	 xmm0, DWORD PTR [eax+64]
  00116	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0011e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00122	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe8000000000000
  0012a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0012e	8b 4d f8	 mov	 ecx, DWORD PTR _inst3d$[ebp]
  00131	f3 0f 11 41 4c	 movss	 DWORD PTR [ecx+76], xmm0

; 139  : 
; 140  : 				//
; 141  : 				// roll for visual effect
; 142  : 				//
; 143  : 
; 144  : 				heading = get_heading_from_attitude_matrix (raw->mob.attitude);

  00136	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0013b	d1 e0		 shl	 eax, 1
  0013d	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00140	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  00144	b8 04 00 00 00	 mov	 eax, 4
  00149	d1 e0		 shl	 eax, 1
  0014b	51		 push	 ecx
  0014c	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00151	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00156	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0015b	d1 e1		 shl	 ecx, 1
  0015d	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00160	8d 44 0a 10	 lea	 eax, DWORD PTR [edx+ecx+16]
  00164	b9 04 00 00 00	 mov	 ecx, 4
  00169	6b d1 00	 imul	 edx, ecx, 0
  0016c	51		 push	 ecx
  0016d	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00172	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00177	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  0017c	d9 5d f4	 fstp	 DWORD PTR _heading$49[ebp]

; 145  : 
; 146  : 				pitch = get_pitch_from_attitude_matrix (raw->mob.attitude);

  0017f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00184	d1 e0		 shl	 eax, 1
  00186	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00189	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  0018d	b8 04 00 00 00	 mov	 eax, 4
  00192	c1 e0 00	 shl	 eax, 0
  00195	51		 push	 ecx
  00196	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  0019b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a0	e8 00 00 00 00	 call	 ?asin@@YGMM@Z		; asin
  001a5	d9 5d f0	 fstp	 DWORD PTR _pitch$48[ebp]

; 147  : 
; 148  : 				roll = sfrand1 () * PI;

  001a8	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  001b2	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  001b7	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  001bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  001c2	c1 f9 10	 sar	 ecx, 16			; 00000010H
  001c5	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  001cb	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  001d1	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  001d5	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  001dd	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@400921fb60000000
  001e5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001e9	f3 0f 11 45 ec	 movss	 DWORD PTR _roll$47[ebp], xmm0

; 149  : 
; 150  : 				get_3d_transformation_matrix (inst3d->vp.attitude, heading, pitch, roll);

  001ee	51		 push	 ecx
  001ef	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _roll$47[ebp]
  001f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f9	51		 push	 ecx
  001fa	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _pitch$48[ebp]
  001ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00204	51		 push	 ecx
  00205	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _heading$49[ebp]
  0020a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020f	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  00212	83 c0 14	 add	 eax, 20			; 00000014H
  00215	50		 push	 eax
  00216	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 151  : 
; 152  : 				//
; 153  : 				// draw
; 154  : 				//
; 155  : 
; 156  : 				inst3d->object_has_shadow = FALSE;

  0021b	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  0021e	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00221	83 e1 fb	 and	 ecx, -5			; fffffffbH
  00224	8b 55 f8	 mov	 edx, DWORD PTR _inst3d$[ebp]
  00227	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 157  : 
; 158  : 				insert_object_into_3d_scene (OBJECT_3D_DRAW_TYPE_OBJECT, inst3d);

  0022a	51		 push	 ecx
  0022b	0f 57 c0	 xorps	 xmm0, xmm0
  0022e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00233	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  00236	50		 push	 eax
  00237	6a 01		 push	 1
  00239	e8 00 00 00 00	 call	 ?insert_zbiased_object_into_3d_scene@@YGXW4OBJECT_3D_DRAWING_TYPES@@PAXM@Z ; insert_zbiased_object_into_3d_scene
$LN14@draw_local:

; 159  : 			}
; 160  : 
; 161  : 			break;

  0023e	e9 6a 12 00 00	 jmp	 $LN2@draw_local
$LN15@draw_local:

; 162  : 		}
; 163  : 		////////////////////////////////////////
; 164  : 		case OBJECT_3D_ARTILLERY_SHELL:
; 165  : 		////////////////////////////////////////
; 166  : 		{
; 167  : 			inst3d = construct_temporary_3d_object (weapon_database[raw->mob.sub_type].default_3d_shape, FALSE);

  00243	6a 00		 push	 0
  00245	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00248	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  0024e	8b 91 14 00 00
	00		 mov	 edx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+20]
  00254	52		 push	 edx
  00255	e8 00 00 00 00	 call	 ?construct_temporary_3d_object@@YGPAUOBJECT_3D_INSTANCE@@HH@Z ; construct_temporary_3d_object
  0025a	89 45 f8	 mov	 DWORD PTR _inst3d$[ebp], eax

; 168  : 
; 169  : 			if (inst3d)

  0025d	83 7d f8 00	 cmp	 DWORD PTR _inst3d$[ebp], 0
  00261	0f 84 87 00 00
	00		 je	 $LN16@draw_local

; 170  : 			{
; 171  : 				inst3d->vp.position = raw->mob.position;

  00267	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0026a	83 c0 04	 add	 eax, 4
  0026d	8b 4d f8	 mov	 ecx, DWORD PTR _inst3d$[ebp]
  00270	83 c1 08	 add	 ecx, 8
  00273	8b 10		 mov	 edx, DWORD PTR [eax]
  00275	89 11		 mov	 DWORD PTR [ecx], edx
  00277	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0027a	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0027d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00280	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 172  : 
; 173  : 				memcpy (inst3d->vp.attitude, raw->mob.attitude, sizeof (matrix3x3));

  00283	6a 24		 push	 36			; 00000024H
  00285	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00288	83 c0 10	 add	 eax, 16			; 00000010H
  0028b	50		 push	 eax
  0028c	8b 4d f8	 mov	 ecx, DWORD PTR _inst3d$[ebp]
  0028f	83 c1 14	 add	 ecx, 20			; 00000014H
  00292	51		 push	 ecx
  00293	e8 00 00 00 00	 call	 _memcpy
  00298	83 c4 0c	 add	 esp, 12			; 0000000cH

; 174  : 
; 175  : 				inst3d->relative_scale.x = 10.0;

  0029b	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  0029e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  002a6	f3 0f 11 40 44	 movss	 DWORD PTR [eax+68], xmm0

; 176  : 				inst3d->relative_scale.y = 10.0;

  002ab	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  002ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  002b6	f3 0f 11 40 48	 movss	 DWORD PTR [eax+72], xmm0

; 177  : 				inst3d->relative_scale.z = 10.0;

  002bb	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  002be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  002c6	f3 0f 11 40 4c	 movss	 DWORD PTR [eax+76], xmm0

; 178  : 
; 179  : 				inst3d->object_has_shadow = FALSE;

  002cb	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  002ce	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  002d1	83 e1 fb	 and	 ecx, -5			; fffffffbH
  002d4	8b 55 f8	 mov	 edx, DWORD PTR _inst3d$[ebp]
  002d7	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 180  : 
; 181  : 				insert_object_into_3d_scene (OBJECT_3D_DRAW_TYPE_OBJECT, inst3d);

  002da	51		 push	 ecx
  002db	0f 57 c0	 xorps	 xmm0, xmm0
  002de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e3	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  002e6	50		 push	 eax
  002e7	6a 01		 push	 1
  002e9	e8 00 00 00 00	 call	 ?insert_zbiased_object_into_3d_scene@@YGXW4OBJECT_3D_DRAWING_TYPES@@PAXM@Z ; insert_zbiased_object_into_3d_scene
$LN16@draw_local:

; 182  : 			}
; 183  : 
; 184  : 			break;

  002ee	e9 ba 11 00 00	 jmp	 $LN2@draw_local
$LN17@draw_local:

; 185  : 		}
; 186  : 		////////////////////////////////////////
; 187  : 		case OBJECT_3D_EFFECT_CHAFF_1:
; 188  : 		////////////////////////////////////////
; 189  : 		{
; 190  : 			int
; 191  : 				seed;
; 192  : 
; 193  : 			object_3d_index_numbers
; 194  : 				chaff_index;
; 195  : 
; 196  : 			float
; 197  : 				heading,
; 198  : 				pitch,
; 199  : 				roll,
; 200  : 				cruise_time_error,
; 201  : 				total_cruise_time,
; 202  : 				lifetime_ratio,
; 203  : 				scale;
; 204  : 
; 205  : 			seed = get_client_server_entity_random_number_seed (en);

  002f3	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  002f6	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  002fc	c1 f8 04	 sar	 eax, 4
  002ff	89 45 e8	 mov	 DWORD PTR _seed$46[ebp], eax

; 206  : 
; 207  : 			cruise_time_error = frand1x (&seed) * weapon_database[raw->mob.sub_type].cruise_time_max_error;

  00302	69 45 e8 6d 4e
	c6 41		 imul	 eax, DWORD PTR _seed$46[ebp], 1103515245
  00309	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0030e	89 45 e8	 mov	 DWORD PTR _seed$46[ebp], eax
  00311	8b 4d e8	 mov	 ecx, DWORD PTR _seed$46[ebp]
  00314	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00317	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  0031d	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00321	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00329	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  0032c	69 02 e0 00 00
	00		 imul	 eax, DWORD PTR [edx], 224
  00332	f3 0f 5a 88 bc
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+188]
  0033a	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0033e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00342	f3 0f 11 45 d4	 movss	 DWORD PTR _cruise_time_error$41[ebp], xmm0

; 208  : 
; 209  : 			total_cruise_time = weapon_database[raw->mob.sub_type].cruise_time + cruise_time_error;

  00347	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0034a	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  00350	f3 0f 10 81 b8
	00 00 00	 movss	 xmm0, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+184]
  00358	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _cruise_time_error$41[ebp]
  0035d	f3 0f 11 45 d0	 movss	 DWORD PTR _total_cruise_time$40[ebp], xmm0

; 210  : 
; 211  : 			lifetime_ratio = -raw->weapon_lifetime / total_cruise_time;

  00362	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00365	f3 0f 10 80 80
	00 00 00	 movss	 xmm0, DWORD PTR [eax+128]
  0036d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00374	f3 0f 5e 45 d0	 divss	 xmm0, DWORD PTR _total_cruise_time$40[ebp]
  00379	f3 0f 11 45 cc	 movss	 DWORD PTR _lifetime_ratio$39[ebp], xmm0

; 212  : 
; 213  : 			if (lifetime_ratio < 0.7)

  0037e	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _lifetime_ratio$39[ebp]
  00383	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fe6666666666666
  0038b	66 0f 2f c8	 comisd	 xmm1, xmm0
  0038f	76 09		 jbe	 SHORT $LN18@draw_local

; 214  : 			{
; 215  : 				chaff_index = OBJECT_3D_EFFECT_CHAFF_1;

  00391	c7 45 e4 11 0a
	00 00		 mov	 DWORD PTR _chaff_index$45[ebp], 2577 ; 00000a11H
  00398	eb 3f		 jmp	 SHORT $LN23@draw_local
$LN18@draw_local:

; 216  : 			}
; 217  : 			else if (lifetime_ratio < 0.8)

  0039a	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _lifetime_ratio$39[ebp]
  0039f	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fe999999999999a
  003a7	66 0f 2f c8	 comisd	 xmm1, xmm0
  003ab	76 09		 jbe	 SHORT $LN20@draw_local

; 218  : 			{
; 219  : 				chaff_index = OBJECT_3D_EFFECT_CHAFF_2;

  003ad	c7 45 e4 12 0a
	00 00		 mov	 DWORD PTR _chaff_index$45[ebp], 2578 ; 00000a12H
  003b4	eb 23		 jmp	 SHORT $LN23@draw_local
$LN20@draw_local:

; 220  : 			}
; 221  : 			else if (lifetime_ratio < 0.9)

  003b6	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _lifetime_ratio$39[ebp]
  003bb	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3feccccccccccccd
  003c3	66 0f 2f c8	 comisd	 xmm1, xmm0
  003c7	76 09		 jbe	 SHORT $LN22@draw_local

; 222  : 			{
; 223  : 				chaff_index = OBJECT_3D_EFFECT_CHAFF_3;

  003c9	c7 45 e4 13 0a
	00 00		 mov	 DWORD PTR _chaff_index$45[ebp], 2579 ; 00000a13H

; 224  : 			}
; 225  : 			else

  003d0	eb 07		 jmp	 SHORT $LN23@draw_local
$LN22@draw_local:

; 226  : 			{
; 227  : 				chaff_index = OBJECT_3D_EFFECT_CHAFF_4;

  003d2	c7 45 e4 14 0a
	00 00		 mov	 DWORD PTR _chaff_index$45[ebp], 2580 ; 00000a14H
$LN23@draw_local:

; 228  : 			}
; 229  : 
; 230  : 			inst3d = construct_temporary_3d_object (chaff_index, FALSE);

  003d9	6a 00		 push	 0
  003db	8b 45 e4	 mov	 eax, DWORD PTR _chaff_index$45[ebp]
  003de	50		 push	 eax
  003df	e8 00 00 00 00	 call	 ?construct_temporary_3d_object@@YGPAUOBJECT_3D_INSTANCE@@HH@Z ; construct_temporary_3d_object
  003e4	89 45 f8	 mov	 DWORD PTR _inst3d$[ebp], eax

; 231  : 
; 232  : 			if (inst3d)

  003e7	83 7d f8 00	 cmp	 DWORD PTR _inst3d$[ebp], 0
  003eb	0f 84 2c 01 00
	00		 je	 $LN24@draw_local

; 233  : 			{
; 234  : 				inst3d->vp.position = raw->mob.position;

  003f1	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  003f4	83 c0 04	 add	 eax, 4
  003f7	8b 4d f8	 mov	 ecx, DWORD PTR _inst3d$[ebp]
  003fa	83 c1 08	 add	 ecx, 8
  003fd	8b 10		 mov	 edx, DWORD PTR [eax]
  003ff	89 11		 mov	 DWORD PTR [ecx], edx
  00401	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00404	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00407	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0040a	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 235  : 
; 236  : 				//
; 237  : 				// scale wrt lifetime
; 238  : 				//
; 239  : 
; 240  : 				scale = (lifetime_ratio * 20.0) + 1.0;

  0040d	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _lifetime_ratio$39[ebp]
  00412	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4034000000000000
  0041a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00422	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00426	f3 0f 11 45 c8	 movss	 DWORD PTR _scale$38[ebp], xmm0

; 241  : 
; 242  : 				inst3d->relative_scale.x = scale;

  0042b	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  0042e	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _scale$38[ebp]
  00433	f3 0f 11 40 44	 movss	 DWORD PTR [eax+68], xmm0

; 243  : 				inst3d->relative_scale.y = scale;

  00438	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  0043b	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _scale$38[ebp]
  00440	f3 0f 11 40 48	 movss	 DWORD PTR [eax+72], xmm0

; 244  : 				inst3d->relative_scale.z = scale;

  00445	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  00448	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _scale$38[ebp]
  0044d	f3 0f 11 40 4c	 movss	 DWORD PTR [eax+76], xmm0

; 245  : 
; 246  : 				//
; 247  : 				// tumble
; 248  : 				//
; 249  : 
; 250  : 				heading = 0.0;

  00452	0f 57 c0	 xorps	 xmm0, xmm0
  00455	f3 0f 11 45 e0	 movss	 DWORD PTR _heading$44[ebp], xmm0

; 251  : 
; 252  : 				pitch = lifetime_ratio * rad (360.0);

  0045a	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _lifetime_ratio$39[ebp]
  0045f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@401921fb51000000
  00467	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0046b	f3 0f 11 45 dc	 movss	 DWORD PTR _pitch$43[ebp], xmm0

; 253  : 
; 254  : 				roll = lifetime_ratio * rad (360.0);

  00470	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _lifetime_ratio$39[ebp]
  00475	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@401921fb51000000
  0047d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00481	f3 0f 11 45 d8	 movss	 DWORD PTR _roll$42[ebp], xmm0

; 255  : 
; 256  : 				if (sfrand1x (&seed) < 0.0)

  00486	69 45 e8 6d 4e
	c6 41		 imul	 eax, DWORD PTR _seed$46[ebp], 1103515245
  0048d	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00492	89 45 e8	 mov	 DWORD PTR _seed$46[ebp], eax
  00495	8b 4d e8	 mov	 ecx, DWORD PTR _seed$46[ebp]
  00498	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0049b	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  004a1	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  004a7	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  004ab	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  004b3	0f 57 c9	 xorps	 xmm1, xmm1
  004b6	66 0f 2f c8	 comisd	 xmm1, xmm0
  004ba	76 11		 jbe	 SHORT $LN25@draw_local

; 257  : 				{
; 258  : 					roll = -roll;

  004bc	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _roll$42[ebp]
  004c1	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  004c8	f3 0f 11 45 d8	 movss	 DWORD PTR _roll$42[ebp], xmm0
$LN25@draw_local:

; 259  : 				}
; 260  : 
; 261  : 				get_3d_transformation_matrix (inst3d->vp.attitude, heading, pitch, roll);

  004cd	51		 push	 ecx
  004ce	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _roll$42[ebp]
  004d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d8	51		 push	 ecx
  004d9	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _pitch$43[ebp]
  004de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e3	51		 push	 ecx
  004e4	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _heading$44[ebp]
  004e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ee	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  004f1	83 c0 14	 add	 eax, 20			; 00000014H
  004f4	50		 push	 eax
  004f5	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 262  : 
; 263  : 				//
; 264  : 				// draw
; 265  : 				//
; 266  : 
; 267  : 				inst3d->object_has_shadow = FALSE;

  004fa	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  004fd	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00500	83 e1 fb	 and	 ecx, -5			; fffffffbH
  00503	8b 55 f8	 mov	 edx, DWORD PTR _inst3d$[ebp]
  00506	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 268  : 
; 269  : 				insert_object_into_3d_scene (OBJECT_3D_DRAW_TYPE_OBJECT, inst3d);

  00509	51		 push	 ecx
  0050a	0f 57 c0	 xorps	 xmm0, xmm0
  0050d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00512	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  00515	50		 push	 eax
  00516	6a 01		 push	 1
  00518	e8 00 00 00 00	 call	 ?insert_zbiased_object_into_3d_scene@@YGXW4OBJECT_3D_DRAWING_TYPES@@PAXM@Z ; insert_zbiased_object_into_3d_scene
$LN24@draw_local:

; 270  : 			}
; 271  : 
; 272  : 			break;

  0051d	e9 8b 0f 00 00	 jmp	 $LN2@draw_local
$LN26@draw_local:

; 273  : 		}
; 274  : 		////////////////////////////////////////
; 275  : 		case OBJECT_3D_KA52_ROTOR_WEAPON:
; 276  : 		////////////////////////////////////////
; 277  : 		{
; 278  : 			int
; 279  : 				seed;
; 280  : 
; 281  : 			float
; 282  : 				heading,
; 283  : 				pitch,
; 284  : 				roll,
; 285  : 				rate,
; 286  : 				theta;
; 287  : 
; 288  : 			seed = get_client_server_entity_random_number_seed (en);

  00522	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00525	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  0052b	c1 f8 04	 sar	 eax, 4
  0052e	89 45 c4	 mov	 DWORD PTR _seed$37[ebp], eax

; 289  : 
; 290  : 			rate = (frand1x (&seed) * 0.25) + 0.25;

  00531	69 45 c4 6d 4e
	c6 41		 imul	 eax, DWORD PTR _seed$37[ebp], 1103515245
  00538	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0053d	89 45 c4	 mov	 DWORD PTR _seed$37[ebp], eax
  00540	8b 4d c4	 mov	 ecx, DWORD PTR _seed$37[ebp]
  00543	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00546	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  0054c	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00550	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00558	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd0000000000000
  00560	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  00568	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0056c	f3 0f 11 45 b4	 movss	 DWORD PTR _rate$33[ebp], xmm0

; 291  : 
; 292  : 			theta = (frand1x (&seed) + (raw->weapon_lifetime * -rate)) * rad (360.0);

  00571	69 45 c4 6d 4e
	c6 41		 imul	 eax, DWORD PTR _seed$37[ebp], 1103515245
  00578	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0057d	89 45 c4	 mov	 DWORD PTR _seed$37[ebp], eax
  00580	8b 4d c4	 mov	 ecx, DWORD PTR _seed$37[ebp]
  00583	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00586	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  0058c	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00590	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00598	f3 0f 10 4d b4	 movss	 xmm1, DWORD PTR _rate$33[ebp]
  0059d	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  005a4	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  005a7	f3 0f 59 8a 80
	00 00 00	 mulss	 xmm1, DWORD PTR [edx+128]
  005af	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  005b3	f2 0f 58 c1	 addsd	 xmm0, xmm1
  005b7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@401921fb51000000
  005bf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005c3	f3 0f 11 45 b0	 movss	 DWORD PTR _theta$32[ebp], xmm0

; 293  : 
; 294  : 			inst3d = construct_temporary_3d_object (weapon_database[raw->mob.sub_type].default_3d_shape, FALSE);

  005c8	6a 00		 push	 0
  005ca	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  005cd	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  005d3	8b 91 14 00 00
	00		 mov	 edx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+20]
  005d9	52		 push	 edx
  005da	e8 00 00 00 00	 call	 ?construct_temporary_3d_object@@YGPAUOBJECT_3D_INSTANCE@@HH@Z ; construct_temporary_3d_object
  005df	89 45 f8	 mov	 DWORD PTR _inst3d$[ebp], eax

; 295  : 
; 296  : 			if (inst3d)

  005e2	83 7d f8 00	 cmp	 DWORD PTR _inst3d$[ebp], 0
  005e6	0f 84 ea 00 00
	00		 je	 $LN27@draw_local

; 297  : 			{
; 298  : 				inst3d->vp.position = raw->mob.position;

  005ec	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  005ef	83 c0 04	 add	 eax, 4
  005f2	8b 4d f8	 mov	 ecx, DWORD PTR _inst3d$[ebp]
  005f5	83 c1 08	 add	 ecx, 8
  005f8	8b 10		 mov	 edx, DWORD PTR [eax]
  005fa	89 11		 mov	 DWORD PTR [ecx], edx
  005fc	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  005ff	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00602	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00605	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 299  : 
; 300  : 				//
; 301  : 				// tumble
; 302  : 				//
; 303  : 
; 304  : 				if (sfrand1x (&seed) < 0.0)

  00608	69 45 c4 6d 4e
	c6 41		 imul	 eax, DWORD PTR _seed$37[ebp], 1103515245
  0060f	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00614	89 45 c4	 mov	 DWORD PTR _seed$37[ebp], eax
  00617	8b 4d c4	 mov	 ecx, DWORD PTR _seed$37[ebp]
  0061a	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0061d	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00623	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  00629	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  0062d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  00635	0f 57 c9	 xorps	 xmm1, xmm1
  00638	66 0f 2f c8	 comisd	 xmm1, xmm0
  0063c	76 25		 jbe	 SHORT $LN28@draw_local

; 305  : 				{
; 306  : 					heading = theta;

  0063e	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _theta$32[ebp]
  00643	f3 0f 11 45 c0	 movss	 DWORD PTR _heading$36[ebp], xmm0

; 307  : 					pitch = 0.0;

  00648	0f 57 c0	 xorps	 xmm0, xmm0
  0064b	f3 0f 11 45 bc	 movss	 DWORD PTR _pitch$35[ebp], xmm0

; 308  : 					roll = -theta;

  00650	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _theta$32[ebp]
  00655	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0065c	f3 0f 11 45 b8	 movss	 DWORD PTR _roll$34[ebp], xmm0

; 309  : 				}
; 310  : 				else

  00661	eb 23		 jmp	 SHORT $LN29@draw_local
$LN28@draw_local:

; 311  : 				{
; 312  : 					heading = -theta;

  00663	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _theta$32[ebp]
  00668	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0066f	f3 0f 11 45 c0	 movss	 DWORD PTR _heading$36[ebp], xmm0

; 313  : 					pitch = 0.0;

  00674	0f 57 c0	 xorps	 xmm0, xmm0
  00677	f3 0f 11 45 bc	 movss	 DWORD PTR _pitch$35[ebp], xmm0

; 314  : 					roll = theta;

  0067c	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _theta$32[ebp]
  00681	f3 0f 11 45 b8	 movss	 DWORD PTR _roll$34[ebp], xmm0
$LN29@draw_local:

; 315  : 				}
; 316  : 
; 317  : 				get_3d_transformation_matrix (inst3d->vp.attitude, heading, pitch, roll);

  00686	51		 push	 ecx
  00687	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _roll$34[ebp]
  0068c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00691	51		 push	 ecx
  00692	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _pitch$35[ebp]
  00697	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0069c	51		 push	 ecx
  0069d	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _heading$36[ebp]
  006a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a7	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  006aa	83 c0 14	 add	 eax, 20			; 00000014H
  006ad	50		 push	 eax
  006ae	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 318  : 
; 319  : 				//
; 320  : 				// draw
; 321  : 				//
; 322  : 
; 323  : 				inst3d->object_has_shadow = FALSE;

  006b3	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  006b6	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  006b9	83 e1 fb	 and	 ecx, -5			; fffffffbH
  006bc	8b 55 f8	 mov	 edx, DWORD PTR _inst3d$[ebp]
  006bf	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 324  : 
; 325  : 				insert_object_into_3d_scene (OBJECT_3D_DRAW_TYPE_OBJECT, inst3d);

  006c2	51		 push	 ecx
  006c3	0f 57 c0	 xorps	 xmm0, xmm0
  006c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006cb	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  006ce	50		 push	 eax
  006cf	6a 01		 push	 1
  006d1	e8 00 00 00 00	 call	 ?insert_zbiased_object_into_3d_scene@@YGXW4OBJECT_3D_DRAWING_TYPES@@PAXM@Z ; insert_zbiased_object_into_3d_scene
$LN27@draw_local:

; 326  : 			}
; 327  : 
; 328  : 			break;

  006d6	e9 d2 0d 00 00	 jmp	 $LN2@draw_local
$LN30@draw_local:

; 329  : 		}
; 330  : 		////////////////////////////////////////
; 331  : 		case OBJECT_3D_KA52_DOOR_LHS_WEAPON:
; 332  : 		case OBJECT_3D_KA52_DOOR_RHS_WEAPON:
; 333  : 		////////////////////////////////////////
; 334  : 		{
; 335  : 			int
; 336  : 				seed;
; 337  : 
; 338  : 			float
; 339  : 				heading,
; 340  : 				pitch,
; 341  : 				roll,
; 342  : 				rate,
; 343  : 				theta;
; 344  : 
; 345  : 			seed = get_client_server_entity_random_number_seed (en);

  006db	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  006de	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  006e4	c1 f8 04	 sar	 eax, 4
  006e7	89 45 ac	 mov	 DWORD PTR _seed$31[ebp], eax

; 346  : 
; 347  : 			rate = (frand1x (&seed) * 0.25) + 0.25;

  006ea	69 45 ac 6d 4e
	c6 41		 imul	 eax, DWORD PTR _seed$31[ebp], 1103515245
  006f1	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  006f6	89 45 ac	 mov	 DWORD PTR _seed$31[ebp], eax
  006f9	8b 4d ac	 mov	 ecx, DWORD PTR _seed$31[ebp]
  006fc	c1 f9 10	 sar	 ecx, 16			; 00000010H
  006ff	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00705	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00709	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00711	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd0000000000000
  00719	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  00721	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00725	f3 0f 11 45 9c	 movss	 DWORD PTR _rate$27[ebp], xmm0

; 348  : 
; 349  : 			theta = (frand1x (&seed) + (raw->weapon_lifetime * -rate)) * rad (360.0);

  0072a	69 45 ac 6d 4e
	c6 41		 imul	 eax, DWORD PTR _seed$31[ebp], 1103515245
  00731	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00736	89 45 ac	 mov	 DWORD PTR _seed$31[ebp], eax
  00739	8b 4d ac	 mov	 ecx, DWORD PTR _seed$31[ebp]
  0073c	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0073f	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00745	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00749	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00751	f3 0f 10 4d 9c	 movss	 xmm1, DWORD PTR _rate$27[ebp]
  00756	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  0075d	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00760	f3 0f 59 8a 80
	00 00 00	 mulss	 xmm1, DWORD PTR [edx+128]
  00768	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0076c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00770	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@401921fb51000000
  00778	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0077c	f3 0f 11 45 98	 movss	 DWORD PTR _theta$26[ebp], xmm0

; 350  : 
; 351  : 			inst3d = construct_temporary_3d_object (weapon_database[raw->mob.sub_type].default_3d_shape, FALSE);

  00781	6a 00		 push	 0
  00783	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00786	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  0078c	8b 91 14 00 00
	00		 mov	 edx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+20]
  00792	52		 push	 edx
  00793	e8 00 00 00 00	 call	 ?construct_temporary_3d_object@@YGPAUOBJECT_3D_INSTANCE@@HH@Z ; construct_temporary_3d_object
  00798	89 45 f8	 mov	 DWORD PTR _inst3d$[ebp], eax

; 352  : 
; 353  : 			if (inst3d)

  0079b	83 7d f8 00	 cmp	 DWORD PTR _inst3d$[ebp], 0
  0079f	0f 84 ea 00 00
	00		 je	 $LN31@draw_local

; 354  : 			{
; 355  : 				inst3d->vp.position = raw->mob.position;

  007a5	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  007a8	83 c0 04	 add	 eax, 4
  007ab	8b 4d f8	 mov	 ecx, DWORD PTR _inst3d$[ebp]
  007ae	83 c1 08	 add	 ecx, 8
  007b1	8b 10		 mov	 edx, DWORD PTR [eax]
  007b3	89 11		 mov	 DWORD PTR [ecx], edx
  007b5	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  007b8	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  007bb	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  007be	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 356  : 
; 357  : 				//
; 358  : 				// tumble
; 359  : 				//
; 360  : 
; 361  : 				if (sfrand1x (&seed) < 0.0)

  007c1	69 45 ac 6d 4e
	c6 41		 imul	 eax, DWORD PTR _seed$31[ebp], 1103515245
  007c8	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  007cd	89 45 ac	 mov	 DWORD PTR _seed$31[ebp], eax
  007d0	8b 4d ac	 mov	 ecx, DWORD PTR _seed$31[ebp]
  007d3	c1 f9 10	 sar	 ecx, 16			; 00000010H
  007d6	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  007dc	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  007e2	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  007e6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  007ee	0f 57 c9	 xorps	 xmm1, xmm1
  007f1	66 0f 2f c8	 comisd	 xmm1, xmm0
  007f5	76 25		 jbe	 SHORT $LN32@draw_local

; 362  : 				{
; 363  : 					heading = 0.0;

  007f7	0f 57 c0	 xorps	 xmm0, xmm0
  007fa	f3 0f 11 45 a8	 movss	 DWORD PTR _heading$30[ebp], xmm0

; 364  : 					pitch = theta;

  007ff	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _theta$26[ebp]
  00804	f3 0f 11 45 a4	 movss	 DWORD PTR _pitch$29[ebp], xmm0

; 365  : 					roll = -theta;

  00809	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _theta$26[ebp]
  0080e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00815	f3 0f 11 45 a0	 movss	 DWORD PTR _roll$28[ebp], xmm0

; 366  : 				}
; 367  : 				else

  0081a	eb 23		 jmp	 SHORT $LN33@draw_local
$LN32@draw_local:

; 368  : 				{
; 369  : 					heading = 0.0;

  0081c	0f 57 c0	 xorps	 xmm0, xmm0
  0081f	f3 0f 11 45 a8	 movss	 DWORD PTR _heading$30[ebp], xmm0

; 370  : 					pitch = -theta;

  00824	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _theta$26[ebp]
  00829	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00830	f3 0f 11 45 a4	 movss	 DWORD PTR _pitch$29[ebp], xmm0

; 371  : 					roll = theta;

  00835	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _theta$26[ebp]
  0083a	f3 0f 11 45 a0	 movss	 DWORD PTR _roll$28[ebp], xmm0
$LN33@draw_local:

; 372  : 				}
; 373  : 
; 374  : 				get_3d_transformation_matrix (inst3d->vp.attitude, heading, pitch, roll);

  0083f	51		 push	 ecx
  00840	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _roll$28[ebp]
  00845	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0084a	51		 push	 ecx
  0084b	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _pitch$29[ebp]
  00850	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00855	51		 push	 ecx
  00856	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _heading$30[ebp]
  0085b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00860	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  00863	83 c0 14	 add	 eax, 20			; 00000014H
  00866	50		 push	 eax
  00867	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 375  : 
; 376  : 				//
; 377  : 				// draw
; 378  : 				//
; 379  : 
; 380  : 				inst3d->object_has_shadow = FALSE;

  0086c	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  0086f	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00872	83 e1 fb	 and	 ecx, -5			; fffffffbH
  00875	8b 55 f8	 mov	 edx, DWORD PTR _inst3d$[ebp]
  00878	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 381  : 
; 382  : 				insert_object_into_3d_scene (OBJECT_3D_DRAW_TYPE_OBJECT, inst3d);

  0087b	51		 push	 ecx
  0087c	0f 57 c0	 xorps	 xmm0, xmm0
  0087f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00884	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  00887	50		 push	 eax
  00888	6a 01		 push	 1
  0088a	e8 00 00 00 00	 call	 ?insert_zbiased_object_into_3d_scene@@YGXW4OBJECT_3D_DRAWING_TYPES@@PAXM@Z ; insert_zbiased_object_into_3d_scene
$LN31@draw_local:

; 383  : 			}
; 384  : 
; 385  : 			break;

  0088f	e9 19 0c 00 00	 jmp	 $LN2@draw_local
$LN34@draw_local:

; 386  : 		}
; 387  : 		////////////////////////////////////////
; 388  : 		case OBJECT_3D_KA52_PILOT_SEAT_WEAPON:
; 389  : 		case OBJECT_3D_KA52_WSO_SEAT_WEAPON:
; 390  : 		////////////////////////////////////////
; 391  : 		{
; 392  : 			int
; 393  : 				rocket_seat,
; 394  : 				parachute1,
; 395  : 				parachute2,
; 396  : 				parachute3,
; 397  : 				ejected_pilot;
; 398  : 
; 399  : 			float
; 400  : 				heading,
; 401  : 				pitch,
; 402  : 				roll,
; 403  : 				lifetime;
; 404  : 
; 405  : 			object_3d_sub_object_search_data
; 406  : 				search;
; 407  : 
; 408  : 			inst3d = construct_temporary_3d_object (weapon_database[raw->mob.sub_type].default_3d_shape, TRUE);

  00894	6a 01		 push	 1
  00896	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00899	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  0089f	8b 91 14 00 00
	00		 mov	 edx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+20]
  008a5	52		 push	 edx
  008a6	e8 00 00 00 00	 call	 ?construct_temporary_3d_object@@YGPAUOBJECT_3D_INSTANCE@@HH@Z ; construct_temporary_3d_object
  008ab	89 45 f8	 mov	 DWORD PTR _inst3d$[ebp], eax

; 409  : 
; 410  : 			if (inst3d)

  008ae	83 7d f8 00	 cmp	 DWORD PTR _inst3d$[ebp], 0
  008b2	0f 84 fe 06 00
	00		 je	 $LN35@draw_local

; 411  : 			{
; 412  : 				inst3d->vp.position = raw->mob.position;

  008b8	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  008bb	83 c0 04	 add	 eax, 4
  008be	8b 4d f8	 mov	 ecx, DWORD PTR _inst3d$[ebp]
  008c1	83 c1 08	 add	 ecx, 8
  008c4	8b 10		 mov	 edx, DWORD PTR [eax]
  008c6	89 11		 mov	 DWORD PTR [ecx], edx
  008c8	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  008cb	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  008ce	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  008d1	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 413  : 
; 414  : 				//
; 415  : 				// animate
; 416  : 				//
; 417  : 
; 418  : 				rocket_seat = FALSE;

  008d4	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _rocket_seat$25[ebp], 0

; 419  : 				parachute1 = FALSE;

  008db	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _parachute1$24[ebp], 0

; 420  : 				parachute2 = FALSE;

  008e2	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _parachute2$23[ebp], 0

; 421  : 				parachute3 = FALSE;

  008e9	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _parachute3$22[ebp], 0

; 422  : 				ejected_pilot = FALSE;

  008f0	c7 45 84 00 00
	00 00		 mov	 DWORD PTR _ejected_pilot$21[ebp], 0

; 423  : 
; 424  : 				heading = get_heading_from_attitude_matrix (raw->mob.attitude);

  008f7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  008fc	d1 e0		 shl	 eax, 1
  008fe	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00901	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  00905	b8 04 00 00 00	 mov	 eax, 4
  0090a	d1 e0		 shl	 eax, 1
  0090c	51		 push	 ecx
  0090d	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00912	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00917	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0091c	d1 e1		 shl	 ecx, 1
  0091e	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00921	8d 44 0a 10	 lea	 eax, DWORD PTR [edx+ecx+16]
  00925	b9 04 00 00 00	 mov	 ecx, 4
  0092a	6b d1 00	 imul	 edx, ecx, 0
  0092d	51		 push	 ecx
  0092e	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00933	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00938	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  0093d	d9 5d 80	 fstp	 DWORD PTR _heading$20[ebp]

; 425  : 
; 426  : 				pitch = get_pitch_from_attitude_matrix (raw->mob.attitude);

  00940	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00945	d1 e0		 shl	 eax, 1
  00947	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  0094a	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  0094e	b8 04 00 00 00	 mov	 eax, 4
  00953	c1 e0 00	 shl	 eax, 0
  00956	51		 push	 ecx
  00957	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  0095c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00961	e8 00 00 00 00	 call	 ?asin@@YGMM@Z		; asin
  00966	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR _pitch$19[ebp]

; 427  : 
; 428  : 				roll = 0.0;

  0096c	0f 57 c0	 xorps	 xmm0, xmm0
  0096f	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _roll$18[ebp], xmm0

; 429  : 
; 430  : 				lifetime = -raw->weapon_lifetime;

  00977	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0097a	f3 0f 10 80 80
	00 00 00	 movss	 xmm0, DWORD PTR [eax+128]
  00982	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00989	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _lifetime$17[ebp], xmm0

; 431  : 
; 432  : 				switch (raw->parachute_status)

  00991	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00994	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0099a	c1 e9 04	 shr	 ecx, 4
  0099d	83 e1 07	 and	 ecx, 7
  009a0	89 8d 88 fe ff
	ff		 mov	 DWORD PTR tv486[ebp], ecx
  009a6	83 bd 88 fe ff
	ff 03		 cmp	 DWORD PTR tv486[ebp], 3
  009ad	0f 87 00 02 00
	00		 ja	 $LN40@draw_local
  009b3	8b 95 88 fe ff
	ff		 mov	 edx, DWORD PTR tv486[ebp]
  009b9	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN74@draw_local[edx*4]
$LN36@draw_local:

; 433  : 				{
; 434  : 					case PARACHUTE_STATUS_CLOSED:
; 435  : 					{
; 436  : 						float
; 437  : 							pitch_ratio,
; 438  : 							delta_pitch;
; 439  : 
; 440  : 						pitch_ratio = min (lifetime, 3.0f) * (1.0 / 3.0);

  009c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  009c8	f3 0f 11 85 8c
	fe ff ff	 movss	 DWORD PTR $T1[ebp], xmm0
  009d0	8d 85 8c fe ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  009d6	50		 push	 eax
  009d7	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _lifetime$17[ebp]
  009dd	51		 push	 ecx
  009de	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  009e3	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  009e7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd5555555555555
  009ef	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009f3	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _pitch_ratio$15[ebp], xmm0

; 441  : 
; 442  : 						delta_pitch = rad (90.0) - pitch;

  009fb	f3 0f 5a 85 7c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pitch$19[ebp]
  00a03	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff921fb51000000
  00a0b	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00a0f	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00a13	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _delta_pitch$14[ebp], xmm0

; 443  : 
; 444  : 						pitch += delta_pitch * pitch_ratio;

  00a1b	f3 0f 10 85 34
	ff ff ff	 movss	 xmm0, DWORD PTR _delta_pitch$14[ebp]
  00a23	f3 0f 59 85 38
	ff ff ff	 mulss	 xmm0, DWORD PTR _pitch_ratio$15[ebp]
  00a2b	f3 0f 58 85 7c
	ff ff ff	 addss	 xmm0, DWORD PTR _pitch$19[ebp]
  00a33	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _pitch$19[ebp], xmm0

; 445  : 
; 446  : 						rocket_seat = TRUE;

  00a3b	c7 45 94 01 00
	00 00		 mov	 DWORD PTR _rocket_seat$25[ebp], 1

; 447  : 
; 448  : 						break;

  00a42	e9 89 01 00 00	 jmp	 $LN4@draw_local
$LN37@draw_local:

; 449  : 					}
; 450  : 					case PARACHUTE_STATUS_OPEN1:
; 451  : 					{
; 452  : 						pitch = rad (90.0);

  00a47	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  00a4f	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _pitch$19[ebp], xmm0

; 453  : 
; 454  : 						parachute1 = TRUE;

  00a57	c7 45 90 01 00
	00 00		 mov	 DWORD PTR _parachute1$24[ebp], 1

; 455  : 
; 456  : 						ejected_pilot = TRUE;

  00a5e	c7 45 84 01 00
	00 00		 mov	 DWORD PTR _ejected_pilot$21[ebp], 1

; 457  : 
; 458  : 						break;

  00a65	e9 66 01 00 00	 jmp	 $LN4@draw_local
$LN38@draw_local:

; 459  : 					}
; 460  : 					case PARACHUTE_STATUS_OPEN2:
; 461  : 					{
; 462  : 						pitch = rad (90.0);

  00a6a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  00a72	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _pitch$19[ebp], xmm0

; 463  : 
; 464  : 						parachute2 = TRUE;

  00a7a	c7 45 8c 01 00
	00 00		 mov	 DWORD PTR _parachute2$23[ebp], 1

; 465  : 
; 466  : 						ejected_pilot = TRUE;

  00a81	c7 45 84 01 00
	00 00		 mov	 DWORD PTR _ejected_pilot$21[ebp], 1

; 467  : 
; 468  : 						break;

  00a88	e9 43 01 00 00	 jmp	 $LN4@draw_local
$LN39@draw_local:

; 469  : 					}
; 470  : 					case PARACHUTE_STATUS_OPEN3:
; 471  : 					{
; 472  : 						float
; 473  : 							t;
; 474  : 
; 475  : 						//
; 476  : 						// rock & roll
; 477  : 						//
; 478  : 
; 479  : 						t = fmod (lifetime, 7.0f) * PI2 / 7.0;

  00a8d	51		 push	 ecx
  00a8e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40e00000
  00a96	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a9b	51		 push	 ecx
  00a9c	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _lifetime$17[ebp]
  00aa4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa9	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  00aae	d9 9d 88 fe ff
	ff		 fstp	 DWORD PTR tv1142[ebp]
  00ab4	f3 0f 10 85 88
	fe ff ff	 movss	 xmm0, DWORD PTR tv1142[ebp]
  00abc	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40c90fdb
  00ac4	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00ac8	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@401c000000000000
  00ad0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ad4	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _t$13[ebp], xmm0

; 480  : 
; 481  : 						pitch = rad (90.0) + (sin (t) * rad (6.0));

  00adc	51		 push	 ecx
  00add	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _t$13[ebp]
  00ae5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aea	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  00aef	dd 9d 84 fe ff
	ff		 fstp	 QWORD PTR tv1149[ebp]
  00af5	f2 0f 10 85 84
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1149[ebp]
  00afd	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fbacee9f0000000
  00b05	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff921fb51000000
  00b0d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b11	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _pitch$19[ebp], xmm0

; 482  : 
; 483  : 						t = fmod (lifetime, 5.0f) * PI2 / 5.0;

  00b19	51		 push	 ecx
  00b1a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  00b22	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b27	51		 push	 ecx
  00b28	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _lifetime$17[ebp]
  00b30	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b35	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  00b3a	d9 9d 88 fe ff
	ff		 fstp	 DWORD PTR tv1158[ebp]
  00b40	f3 0f 10 85 88
	fe ff ff	 movss	 xmm0, DWORD PTR tv1158[ebp]
  00b48	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40c90fdb
  00b50	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00b54	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4014000000000000
  00b5c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b60	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _t$13[ebp], xmm0

; 484  : 
; 485  : 						heading += sin (t) * rad (10.0);

  00b68	51		 push	 ecx
  00b69	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _t$13[ebp]
  00b71	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b76	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  00b7b	dd 9d 84 fe ff
	ff		 fstp	 QWORD PTR tv1165[ebp]
  00b81	f2 0f 10 85 84
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1165[ebp]
  00b89	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc6571848000000
  00b91	f3 0f 5a 4d 80	 cvtss2sd xmm1, DWORD PTR _heading$20[ebp]
  00b96	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00b9a	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00b9e	f3 0f 11 45 80	 movss	 DWORD PTR _heading$20[ebp], xmm0

; 486  : 
; 487  : 						parachute3 = TRUE;

  00ba3	c7 45 88 01 00
	00 00		 mov	 DWORD PTR _parachute3$22[ebp], 1

; 488  : 
; 489  : 						ejected_pilot = TRUE;

  00baa	c7 45 84 01 00
	00 00		 mov	 DWORD PTR _ejected_pilot$21[ebp], 1

; 490  : 
; 491  : 						break;

  00bb1	eb 1d		 jmp	 SHORT $LN4@draw_local
$LN40@draw_local:

; 492  : 					}
; 493  : 					default:
; 494  : 					{
; 495  : 						debug_fatal ("Invalid parachute status = %d", raw->parachute_status);

  00bb3	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00bb6	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00bbc	c1 e9 04	 shr	 ecx, 4
  00bbf	83 e1 07	 and	 ecx, 7
  00bc2	51		 push	 ecx
  00bc3	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@JOKAHLIP@Invalid?5parachute?5status?5?$DN?5?$CFd@
  00bc8	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00bcd	83 c4 08	 add	 esp, 8
$LN4@draw_local:

; 496  : 
; 497  : 						break;
; 498  : 					}
; 499  : 				}
; 500  : 
; 501  : 				get_3d_transformation_matrix (inst3d->vp.attitude, heading, pitch, roll);

  00bd0	51		 push	 ecx
  00bd1	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _roll$18[ebp]
  00bd9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bde	51		 push	 ecx
  00bdf	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _pitch$19[ebp]
  00be7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bec	51		 push	 ecx
  00bed	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _heading$20[ebp]
  00bf2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bf7	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  00bfa	83 c0 14	 add	 eax, 20			; 00000014H
  00bfd	50		 push	 eax
  00bfe	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 502  : 
; 503  : 				//
; 504  : 				// draw
; 505  : 				//
; 506  : 
; 507  : 				search.search_depth = 0;

  00c03	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _search$16[ebp+8], 0

; 508  : 				search.search_object = inst3d;

  00c0d	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  00c10	89 85 3c ff ff
	ff		 mov	 DWORD PTR _search$16[ebp], eax

; 509  : 				search.sub_object_index = OBJECT_3D_SUB_OBJECT_KA52_ROCKET_SEAT;

  00c16	c7 85 48 ff ff
	ff fb 00 00 00	 mov	 DWORD PTR _search$16[ebp+12], 251 ; 000000fbH

; 510  : 
; 511  : 				if (find_object_3d_sub_object (&search) == SUB_OBJECT_SEARCH_RESULT_OBJECT_FOUND)

  00c20	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _search$16[ebp]
  00c26	50		 push	 eax
  00c27	e8 00 00 00 00	 call	 ?find_object_3d_sub_object@@YG?AW4SUB_OBJECT_SEARCH_RESULT_TYPES@@PAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z ; find_object_3d_sub_object
  00c2c	83 f8 01	 cmp	 eax, 1
  00c2f	75 1d		 jne	 SHORT $LN41@draw_local

; 512  : 				{
; 513  : 					search.result_sub_object->visible_object = rocket_seat;

  00c31	8b 45 94	 mov	 eax, DWORD PTR _rocket_seat$25[ebp]
  00c34	83 e0 01	 and	 eax, 1
  00c37	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _search$16[ebp+4]
  00c3d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00c40	83 e2 fe	 and	 edx, -2			; fffffffeH
  00c43	0b d0		 or	 edx, eax
  00c45	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _search$16[ebp+4]
  00c4b	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN41@draw_local:

; 514  : 				}
; 515  : 
; 516  : 				search.search_depth = 0;

  00c4e	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _search$16[ebp+8], 0

; 517  : 				search.search_object = inst3d;

  00c58	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  00c5b	89 85 3c ff ff
	ff		 mov	 DWORD PTR _search$16[ebp], eax

; 518  : 				search.sub_object_index = OBJECT_3D_SUB_OBJECT_KA52_PARACHUTE_01;

  00c61	c7 85 48 ff ff
	ff fe 00 00 00	 mov	 DWORD PTR _search$16[ebp+12], 254 ; 000000feH

; 519  : 
; 520  : 				if (find_object_3d_sub_object (&search) == SUB_OBJECT_SEARCH_RESULT_OBJECT_FOUND)

  00c6b	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _search$16[ebp]
  00c71	50		 push	 eax
  00c72	e8 00 00 00 00	 call	 ?find_object_3d_sub_object@@YG?AW4SUB_OBJECT_SEARCH_RESULT_TYPES@@PAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z ; find_object_3d_sub_object
  00c77	83 f8 01	 cmp	 eax, 1
  00c7a	75 1d		 jne	 SHORT $LN42@draw_local

; 521  : 				{
; 522  : 					search.result_sub_object->visible_object = parachute1;

  00c7c	8b 45 90	 mov	 eax, DWORD PTR _parachute1$24[ebp]
  00c7f	83 e0 01	 and	 eax, 1
  00c82	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _search$16[ebp+4]
  00c88	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00c8b	83 e2 fe	 and	 edx, -2			; fffffffeH
  00c8e	0b d0		 or	 edx, eax
  00c90	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _search$16[ebp+4]
  00c96	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN42@draw_local:

; 523  : 				}
; 524  : 
; 525  : 				search.search_depth = 0;

  00c99	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _search$16[ebp+8], 0

; 526  : 				search.search_object = inst3d;

  00ca3	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  00ca6	89 85 3c ff ff
	ff		 mov	 DWORD PTR _search$16[ebp], eax

; 527  : 				search.sub_object_index = OBJECT_3D_SUB_OBJECT_KA52_PARACHUTE_02;

  00cac	c7 85 48 ff ff
	ff ff 00 00 00	 mov	 DWORD PTR _search$16[ebp+12], 255 ; 000000ffH

; 528  : 
; 529  : 				if (find_object_3d_sub_object (&search) == SUB_OBJECT_SEARCH_RESULT_OBJECT_FOUND)

  00cb6	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _search$16[ebp]
  00cbc	50		 push	 eax
  00cbd	e8 00 00 00 00	 call	 ?find_object_3d_sub_object@@YG?AW4SUB_OBJECT_SEARCH_RESULT_TYPES@@PAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z ; find_object_3d_sub_object
  00cc2	83 f8 01	 cmp	 eax, 1
  00cc5	75 1d		 jne	 SHORT $LN43@draw_local

; 530  : 				{
; 531  : 					search.result_sub_object->visible_object = parachute2;

  00cc7	8b 45 8c	 mov	 eax, DWORD PTR _parachute2$23[ebp]
  00cca	83 e0 01	 and	 eax, 1
  00ccd	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _search$16[ebp+4]
  00cd3	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00cd6	83 e2 fe	 and	 edx, -2			; fffffffeH
  00cd9	0b d0		 or	 edx, eax
  00cdb	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _search$16[ebp+4]
  00ce1	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN43@draw_local:

; 532  : 				}
; 533  : 
; 534  : 				search.search_depth = 0;

  00ce4	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _search$16[ebp+8], 0

; 535  : 				search.search_object = inst3d;

  00cee	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  00cf1	89 85 3c ff ff
	ff		 mov	 DWORD PTR _search$16[ebp], eax

; 536  : 				search.sub_object_index = OBJECT_3D_SUB_OBJECT_KA52_PARACHUTE_03;

  00cf7	c7 85 48 ff ff
	ff 00 01 00 00	 mov	 DWORD PTR _search$16[ebp+12], 256 ; 00000100H

; 537  : 
; 538  : 				if (find_object_3d_sub_object (&search) == SUB_OBJECT_SEARCH_RESULT_OBJECT_FOUND)

  00d01	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _search$16[ebp]
  00d07	50		 push	 eax
  00d08	e8 00 00 00 00	 call	 ?find_object_3d_sub_object@@YG?AW4SUB_OBJECT_SEARCH_RESULT_TYPES@@PAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z ; find_object_3d_sub_object
  00d0d	83 f8 01	 cmp	 eax, 1
  00d10	75 1d		 jne	 SHORT $LN44@draw_local

; 539  : 				{
; 540  : 					search.result_sub_object->visible_object = parachute3;

  00d12	8b 45 88	 mov	 eax, DWORD PTR _parachute3$22[ebp]
  00d15	83 e0 01	 and	 eax, 1
  00d18	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _search$16[ebp+4]
  00d1e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00d21	83 e2 fe	 and	 edx, -2			; fffffffeH
  00d24	0b d0		 or	 edx, eax
  00d26	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _search$16[ebp+4]
  00d2c	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN44@draw_local:

; 541  : 				}
; 542  : 
; 543  : 				search.search_depth = 0;

  00d2f	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _search$16[ebp+8], 0

; 544  : 				search.search_object = inst3d;

  00d39	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  00d3c	89 85 3c ff ff
	ff		 mov	 DWORD PTR _search$16[ebp], eax

; 545  : 				search.sub_object_index = OBJECT_3D_SUB_OBJECT_KA52_PILOT_EJECTED;

  00d42	c7 85 48 ff ff
	ff fd 00 00 00	 mov	 DWORD PTR _search$16[ebp+12], 253 ; 000000fdH

; 546  : 
; 547  : 				if (find_object_3d_sub_object (&search) == SUB_OBJECT_SEARCH_RESULT_OBJECT_FOUND)

  00d4c	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _search$16[ebp]
  00d52	50		 push	 eax
  00d53	e8 00 00 00 00	 call	 ?find_object_3d_sub_object@@YG?AW4SUB_OBJECT_SEARCH_RESULT_TYPES@@PAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z ; find_object_3d_sub_object
  00d58	83 f8 01	 cmp	 eax, 1
  00d5b	0f 85 32 02 00
	00		 jne	 $LN6@draw_local

; 548  : 				{
; 549  : 					search.result_sub_object->visible_object = ejected_pilot;

  00d61	8b 45 84	 mov	 eax, DWORD PTR _ejected_pilot$21[ebp]
  00d64	83 e0 01	 and	 eax, 1
  00d67	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _search$16[ebp+4]
  00d6d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00d70	83 e2 fe	 and	 edx, -2			; fffffffeH
  00d73	0b d0		 or	 edx, eax
  00d75	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _search$16[ebp+4]
  00d7b	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 550  : 
; 551  : 					//
; 552  : 					// animate
; 553  : 					//
; 554  : 
; 555  : 					{
; 556  : 						float
; 557  : 							anim_frame;
; 558  : 
; 559  : 						switch (weapon_database[raw->mob.sub_type].default_3d_shape)

  00d7e	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00d81	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  00d87	8b 91 14 00 00
	00		 mov	 edx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+20]
  00d8d	89 95 88 fe ff
	ff		 mov	 DWORD PTR tv582[ebp], edx
  00d93	81 bd 88 fe ff
	ff 02 0a 00 00	 cmp	 DWORD PTR tv582[ebp], 2562 ; 00000a02H
  00d9d	74 15		 je	 SHORT $LN46@draw_local
  00d9f	81 bd 88 fe ff
	ff 04 0a 00 00	 cmp	 DWORD PTR tv582[ebp], 2564 ; 00000a04H
  00da9	0f 84 f7 00 00
	00		 je	 $LN47@draw_local
  00daf	e9 df 01 00 00	 jmp	 $LN6@draw_local
$LN46@draw_local:

; 560  : 						{
; 561  : 							case OBJECT_3D_KA52_PILOT_SEAT_WEAPON:
; 562  : 							{
; 563  : 								anim_frame = fmod (lifetime, 6.0f) / 6.0;

  00db4	51		 push	 ecx
  00db5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c00000
  00dbd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dc2	51		 push	 ecx
  00dc3	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _lifetime$17[ebp]
  00dcb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dd0	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  00dd5	dd 9d 84 fe ff
	ff		 fstp	 QWORD PTR tv1220[ebp]
  00ddb	f2 0f 10 85 84
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1220[ebp]
  00de3	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4018000000000000
  00deb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00def	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _anim_frame$12[ebp], xmm0

; 564  : 
; 565  : 								anim_frame = bound (anim_frame, 0.0, 1.0);

  00df7	f3 0f 5a 85 2c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _anim_frame$12[ebp]
  00dff	0f 57 c9	 xorps	 xmm1, xmm1
  00e02	66 0f 2f c8	 comisd	 xmm1, xmm0
  00e06	76 0d		 jbe	 SHORT $LN65@draw_local
  00e08	0f 57 c0	 xorps	 xmm0, xmm0
  00e0b	f2 0f 11 85 84
	fe ff ff	 movsd	 QWORD PTR tv595[ebp], xmm0
  00e13	eb 44		 jmp	 SHORT $LN66@draw_local
$LN65@draw_local:
  00e15	f3 0f 5a 85 2c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _anim_frame$12[ebp]
  00e1d	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  00e25	76 12		 jbe	 SHORT $LN63@draw_local
  00e27	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00e2f	f2 0f 11 85 7c
	fe ff ff	 movsd	 QWORD PTR tv594[ebp], xmm0
  00e37	eb 10		 jmp	 SHORT $LN64@draw_local
$LN63@draw_local:
  00e39	f3 0f 5a 85 2c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _anim_frame$12[ebp]
  00e41	f2 0f 11 85 7c
	fe ff ff	 movsd	 QWORD PTR tv594[ebp], xmm0
$LN64@draw_local:
  00e49	f2 0f 10 85 7c
	fe ff ff	 movsd	 xmm0, QWORD PTR tv594[ebp]
  00e51	f2 0f 11 85 84
	fe ff ff	 movsd	 QWORD PTR tv595[ebp], xmm0
$LN66@draw_local:
  00e59	f2 0f 5a 85 84
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv595[ebp]
  00e61	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _anim_frame$12[ebp], xmm0

; 566  : 
; 567  : 								animate_entity_simple_keyframed_sub_objects (inst3d, OBJECT_3D_SUB_OBJECT_PILOT_LEG, anim_frame);

  00e69	51		 push	 ecx
  00e6a	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _anim_frame$12[ebp]
  00e72	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e77	68 c2 00 00 00	 push	 194			; 000000c2H
  00e7c	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  00e7f	50		 push	 eax
  00e80	e8 00 00 00 00	 call	 ?animate_entity_simple_keyframed_sub_objects@@YGXPAUOBJECT_3D_INSTANCE@@HM@Z ; animate_entity_simple_keyframed_sub_objects

; 568  : 
; 569  : 								animate_entity_simple_keyframed_sub_objects (inst3d, OBJECT_3D_SUB_OBJECT_PILOT_HEAD, anim_frame);

  00e85	51		 push	 ecx
  00e86	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _anim_frame$12[ebp]
  00e8e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e93	68 bf 00 00 00	 push	 191			; 000000bfH
  00e98	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  00e9b	50		 push	 eax
  00e9c	e8 00 00 00 00	 call	 ?animate_entity_simple_keyframed_sub_objects@@YGXPAUOBJECT_3D_INSTANCE@@HM@Z ; animate_entity_simple_keyframed_sub_objects

; 570  : 
; 571  : 								break;

  00ea1	e9 ed 00 00 00	 jmp	 $LN6@draw_local
$LN47@draw_local:

; 572  : 							}
; 573  : 							case OBJECT_3D_KA52_WSO_SEAT_WEAPON:
; 574  : 							{
; 575  : 								anim_frame = fmod (lifetime, 6.0f) / 6.0;

  00ea6	51		 push	 ecx
  00ea7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c00000
  00eaf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eb4	51		 push	 ecx
  00eb5	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _lifetime$17[ebp]
  00ebd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ec2	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  00ec7	dd 9d 84 fe ff
	ff		 fstp	 QWORD PTR tv1239[ebp]
  00ecd	f2 0f 10 85 84
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1239[ebp]
  00ed5	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4018000000000000
  00edd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ee1	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _anim_frame$12[ebp], xmm0

; 576  : 
; 577  : 								anim_frame = bound (anim_frame, 0.0, 1.0);

  00ee9	f3 0f 5a 85 2c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _anim_frame$12[ebp]
  00ef1	0f 57 c9	 xorps	 xmm1, xmm1
  00ef4	66 0f 2f c8	 comisd	 xmm1, xmm0
  00ef8	76 0d		 jbe	 SHORT $LN69@draw_local
  00efa	0f 57 c0	 xorps	 xmm0, xmm0
  00efd	f2 0f 11 85 84
	fe ff ff	 movsd	 QWORD PTR tv615[ebp], xmm0
  00f05	eb 44		 jmp	 SHORT $LN70@draw_local
$LN69@draw_local:
  00f07	f3 0f 5a 85 2c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _anim_frame$12[ebp]
  00f0f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  00f17	76 12		 jbe	 SHORT $LN67@draw_local
  00f19	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00f21	f2 0f 11 85 7c
	fe ff ff	 movsd	 QWORD PTR tv614[ebp], xmm0
  00f29	eb 10		 jmp	 SHORT $LN68@draw_local
$LN67@draw_local:
  00f2b	f3 0f 5a 85 2c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _anim_frame$12[ebp]
  00f33	f2 0f 11 85 7c
	fe ff ff	 movsd	 QWORD PTR tv614[ebp], xmm0
$LN68@draw_local:
  00f3b	f2 0f 10 85 7c
	fe ff ff	 movsd	 xmm0, QWORD PTR tv614[ebp]
  00f43	f2 0f 11 85 84
	fe ff ff	 movsd	 QWORD PTR tv615[ebp], xmm0
$LN70@draw_local:
  00f4b	f2 0f 5a 85 84
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv615[ebp]
  00f53	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _anim_frame$12[ebp], xmm0

; 578  : 
; 579  : 								animate_entity_simple_keyframed_sub_objects (inst3d, OBJECT_3D_SUB_OBJECT_WSO_LEG, anim_frame);

  00f5b	51		 push	 ecx
  00f5c	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _anim_frame$12[ebp]
  00f64	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f69	68 b1 00 00 00	 push	 177			; 000000b1H
  00f6e	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  00f71	50		 push	 eax
  00f72	e8 00 00 00 00	 call	 ?animate_entity_simple_keyframed_sub_objects@@YGXPAUOBJECT_3D_INSTANCE@@HM@Z ; animate_entity_simple_keyframed_sub_objects

; 580  : 
; 581  : 								animate_entity_simple_keyframed_sub_objects (inst3d, OBJECT_3D_SUB_OBJECT_WSO_HEAD, anim_frame);

  00f77	51		 push	 ecx
  00f78	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _anim_frame$12[ebp]
  00f80	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f85	68 ad 00 00 00	 push	 173			; 000000adH
  00f8a	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  00f8d	50		 push	 eax
  00f8e	e8 00 00 00 00	 call	 ?animate_entity_simple_keyframed_sub_objects@@YGXPAUOBJECT_3D_INSTANCE@@HM@Z ; animate_entity_simple_keyframed_sub_objects
$LN6@draw_local:

; 582  : 
; 583  : 								break;
; 584  : 							}
; 585  : 						}
; 586  : 					}
; 587  : 				}
; 588  : 
; 589  : 				inst3d->object_has_shadow = FALSE;

  00f93	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  00f96	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00f99	83 e1 fb	 and	 ecx, -5			; fffffffbH
  00f9c	8b 55 f8	 mov	 edx, DWORD PTR _inst3d$[ebp]
  00f9f	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 590  : 
; 591  : 				insert_object_into_3d_scene (OBJECT_3D_DRAW_TYPE_OBJECT, inst3d);

  00fa2	51		 push	 ecx
  00fa3	0f 57 c0	 xorps	 xmm0, xmm0
  00fa6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fab	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  00fae	50		 push	 eax
  00faf	6a 01		 push	 1
  00fb1	e8 00 00 00 00	 call	 ?insert_zbiased_object_into_3d_scene@@YGXW4OBJECT_3D_DRAWING_TYPES@@PAXM@Z ; insert_zbiased_object_into_3d_scene
$LN35@draw_local:

; 592  : 			}
; 593  : 
; 594  : 			break;

  00fb6	e9 f2 04 00 00	 jmp	 $LN2@draw_local
$LN48@draw_local:

; 595  : 		}
; 596  : 		////////////////////////////////////////
; 597  : 		case OBJECT_3D_C130_CRATE_WEAPON:
; 598  : 		////////////////////////////////////////
; 599  : 		{
; 600  : 			int
; 601  : 				parachute1,
; 602  : 				parachute2,
; 603  : 				parachute3,
; 604  : 				parachute_collapsed;
; 605  : 
; 606  : 			float
; 607  : 				heading,
; 608  : 				pitch,
; 609  : 				roll,
; 610  : 				lifetime;
; 611  : 
; 612  : 			object_3d_sub_object_search_data
; 613  : 				search;
; 614  : 
; 615  : 			inst3d = construct_temporary_3d_object (weapon_database[raw->mob.sub_type].default_3d_shape, TRUE);

  00fbb	6a 01		 push	 1
  00fbd	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00fc0	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  00fc6	8b 91 14 00 00
	00		 mov	 edx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+20]
  00fcc	52		 push	 edx
  00fcd	e8 00 00 00 00	 call	 ?construct_temporary_3d_object@@YGPAUOBJECT_3D_INSTANCE@@HH@Z ; construct_temporary_3d_object
  00fd2	89 45 f8	 mov	 DWORD PTR _inst3d$[ebp], eax

; 616  : 
; 617  : 			if (inst3d)

  00fd5	83 7d f8 00	 cmp	 DWORD PTR _inst3d$[ebp], 0
  00fd9	0f 84 55 04 00
	00		 je	 $LN49@draw_local

; 618  : 			{
; 619  : 				inst3d->vp.position = raw->mob.position;

  00fdf	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00fe2	83 c0 04	 add	 eax, 4
  00fe5	8b 4d f8	 mov	 ecx, DWORD PTR _inst3d$[ebp]
  00fe8	83 c1 08	 add	 ecx, 8
  00feb	8b 10		 mov	 edx, DWORD PTR [eax]
  00fed	89 11		 mov	 DWORD PTR [ecx], edx
  00fef	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00ff2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00ff5	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00ff8	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 620  : 
; 621  : 				//
; 622  : 				// animate
; 623  : 				//
; 624  : 
; 625  : 				parachute1 = FALSE;

  00ffb	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _parachute1$11[ebp], 0

; 626  : 				parachute2 = FALSE;

  01005	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _parachute2$10[ebp], 0

; 627  : 				parachute3 = FALSE;

  0100f	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _parachute3$9[ebp], 0

; 628  : 				parachute_collapsed = FALSE;

  01019	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _parachute_collapsed$8[ebp], 0

; 629  : 
; 630  : 				heading = get_heading_from_attitude_matrix (raw->mob.attitude);

  01023	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01028	d1 e0		 shl	 eax, 1
  0102a	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  0102d	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  01031	b8 04 00 00 00	 mov	 eax, 4
  01036	d1 e0		 shl	 eax, 1
  01038	51		 push	 ecx
  01039	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  0103e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01043	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01048	d1 e1		 shl	 ecx, 1
  0104a	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  0104d	8d 44 0a 10	 lea	 eax, DWORD PTR [edx+ecx+16]
  01051	b9 04 00 00 00	 mov	 ecx, 4
  01056	6b d1 00	 imul	 edx, ecx, 0
  01059	51		 push	 ecx
  0105a	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  0105f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01064	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  01069	d9 9d 18 ff ff
	ff		 fstp	 DWORD PTR _heading$7[ebp]

; 631  : 
; 632  : 				pitch = get_pitch_from_attitude_matrix (raw->mob.attitude);

  0106f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01074	d1 e0		 shl	 eax, 1
  01076	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  01079	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  0107d	b8 04 00 00 00	 mov	 eax, 4
  01082	c1 e0 00	 shl	 eax, 0
  01085	51		 push	 ecx
  01086	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  0108b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01090	e8 00 00 00 00	 call	 ?asin@@YGMM@Z		; asin
  01095	d9 9d 14 ff ff
	ff		 fstp	 DWORD PTR _pitch$6[ebp]

; 633  : 
; 634  : 				roll = 0.0;

  0109b	0f 57 c0	 xorps	 xmm0, xmm0
  0109e	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _roll$5[ebp], xmm0

; 635  : 
; 636  : 				lifetime = -raw->weapon_lifetime;

  010a6	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  010a9	f3 0f 10 80 80
	00 00 00	 movss	 xmm0, DWORD PTR [eax+128]
  010b1	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  010b8	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _lifetime$4[ebp], xmm0

; 637  : 
; 638  : 				switch (raw->parachute_status)

  010c0	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  010c3	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  010c9	c1 e9 04	 shr	 ecx, 4
  010cc	83 e1 07	 and	 ecx, 7
  010cf	89 8d 88 fe ff
	ff		 mov	 DWORD PTR tv673[ebp], ecx
  010d5	83 bd 88 fe ff
	ff 04		 cmp	 DWORD PTR tv673[ebp], 4
  010dc	0f 87 a4 01 00
	00		 ja	 $LN55@draw_local
  010e2	8b 95 88 fe ff
	ff		 mov	 edx, DWORD PTR tv673[ebp]
  010e8	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN75@draw_local[edx*4]
$LN50@draw_local:

; 639  : 				{
; 640  : 					case PARACHUTE_STATUS_CLOSED:
; 641  : 					{
; 642  : 						pitch = rad (90.0);

  010ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  010f7	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _pitch$6[ebp], xmm0

; 643  : 
; 644  : 						break;

  010ff	e9 9f 01 00 00	 jmp	 $LN8@draw_local
$LN51@draw_local:

; 645  : 					}
; 646  : 					case PARACHUTE_STATUS_OPEN1:
; 647  : 					{
; 648  : 						pitch = rad (90.0);

  01104	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  0110c	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _pitch$6[ebp], xmm0

; 649  : 
; 650  : 						parachute1 = TRUE;

  01114	c7 85 28 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _parachute1$11[ebp], 1

; 651  : 
; 652  : 						break;

  0111e	e9 80 01 00 00	 jmp	 $LN8@draw_local
$LN52@draw_local:

; 653  : 					}
; 654  : 					case PARACHUTE_STATUS_OPEN2:
; 655  : 					{
; 656  : 						pitch = rad (90.0);

  01123	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  0112b	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _pitch$6[ebp], xmm0

; 657  : 
; 658  : 						parachute2 = TRUE;

  01133	c7 85 24 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _parachute2$10[ebp], 1

; 659  : 
; 660  : 						break;

  0113d	e9 61 01 00 00	 jmp	 $LN8@draw_local
$LN53@draw_local:

; 661  : 					}
; 662  : 					case PARACHUTE_STATUS_OPEN3:
; 663  : 					{
; 664  : 						float
; 665  : 							t;
; 666  : 
; 667  : 						//
; 668  : 						// rock & roll
; 669  : 						//
; 670  : 
; 671  : 						t = fmod (lifetime, 7.0f) * PI2 / 7.0;

  01142	51		 push	 ecx
  01143	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40e00000
  0114b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01150	51		 push	 ecx
  01151	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _lifetime$4[ebp]
  01159	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0115e	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  01163	d9 9d 88 fe ff
	ff		 fstp	 DWORD PTR tv1306[ebp]
  01169	f3 0f 10 85 88
	fe ff ff	 movss	 xmm0, DWORD PTR tv1306[ebp]
  01171	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40c90fdb
  01179	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0117d	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@401c000000000000
  01185	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01189	f3 0f 11 85 d0
	fe ff ff	 movss	 DWORD PTR _t$2[ebp], xmm0

; 672  : 
; 673  : 						pitch = rad (90.0) + (sin (t) * rad (6.0));

  01191	51		 push	 ecx
  01192	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR _t$2[ebp]
  0119a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0119f	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  011a4	dd 9d 84 fe ff
	ff		 fstp	 QWORD PTR tv1313[ebp]
  011aa	f2 0f 10 85 84
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1313[ebp]
  011b2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fbacee9f0000000
  011ba	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff921fb51000000
  011c2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  011c6	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _pitch$6[ebp], xmm0

; 674  : 
; 675  : 						t = fmod (lifetime, 5.0f) * PI2 / 5.0;

  011ce	51		 push	 ecx
  011cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  011d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011dc	51		 push	 ecx
  011dd	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _lifetime$4[ebp]
  011e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011ea	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  011ef	d9 9d 88 fe ff
	ff		 fstp	 DWORD PTR tv1322[ebp]
  011f5	f3 0f 10 85 88
	fe ff ff	 movss	 xmm0, DWORD PTR tv1322[ebp]
  011fd	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40c90fdb
  01205	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01209	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4014000000000000
  01211	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01215	f3 0f 11 85 d0
	fe ff ff	 movss	 DWORD PTR _t$2[ebp], xmm0

; 676  : 
; 677  : 						heading += sin (t) * rad (10.0);

  0121d	51		 push	 ecx
  0121e	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR _t$2[ebp]
  01226	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0122b	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  01230	dd 9d 84 fe ff
	ff		 fstp	 QWORD PTR tv1329[ebp]
  01236	f2 0f 10 85 84
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1329[ebp]
  0123e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc6571848000000
  01246	f3 0f 5a 8d 18
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _heading$7[ebp]
  0124e	f2 0f 58 c8	 addsd	 xmm1, xmm0
  01252	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  01256	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _heading$7[ebp], xmm0

; 678  : 
; 679  : 						parachute3 = TRUE;

  0125e	c7 85 20 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _parachute3$9[ebp], 1

; 680  : 
; 681  : 						break;

  01268	eb 39		 jmp	 SHORT $LN8@draw_local
$LN54@draw_local:

; 682  : 					}
; 683  : 					case PARACHUTE_STATUS_COLLAPSED:
; 684  : 					{
; 685  : 						pitch = rad (90.0);

  0126a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  01272	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _pitch$6[ebp], xmm0

; 686  : 
; 687  : 						parachute_collapsed = TRUE;

  0127a	c7 85 1c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _parachute_collapsed$8[ebp], 1

; 688  : 
; 689  : 						break;

  01284	eb 1d		 jmp	 SHORT $LN8@draw_local
$LN55@draw_local:

; 690  : 					}
; 691  : 					default:
; 692  : 					{
; 693  : 						debug_fatal ("Invalid parachute status = %d", raw->parachute_status);

  01286	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  01289	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0128f	c1 e9 04	 shr	 ecx, 4
  01292	83 e1 07	 and	 ecx, 7
  01295	51		 push	 ecx
  01296	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@JOKAHLIP@Invalid?5parachute?5status?5?$DN?5?$CFd@
  0129b	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  012a0	83 c4 08	 add	 esp, 8
$LN8@draw_local:

; 694  : 
; 695  : 						break;
; 696  : 					}
; 697  : 				}
; 698  : 
; 699  : 				get_3d_transformation_matrix (inst3d->vp.attitude, heading, pitch, roll);

  012a3	51		 push	 ecx
  012a4	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _roll$5[ebp]
  012ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012b1	51		 push	 ecx
  012b2	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _pitch$6[ebp]
  012ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012bf	51		 push	 ecx
  012c0	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _heading$7[ebp]
  012c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012cd	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  012d0	83 c0 14	 add	 eax, 20			; 00000014H
  012d3	50		 push	 eax
  012d4	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 700  : 
; 701  : 				//
; 702  : 				// draw
; 703  : 				//
; 704  : 
; 705  : 				search.search_depth = 0;

  012d9	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _search$3[ebp+8], 0

; 706  : 				search.search_object = inst3d;

  012e3	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  012e6	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _search$3[ebp], eax

; 707  : 				search.sub_object_index = OBJECT_3D_SUB_OBJECT_CRATE_PARACHUTE_01;

  012ec	c7 85 e0 fe ff
	ff 02 01 00 00	 mov	 DWORD PTR _search$3[ebp+12], 258 ; 00000102H

; 708  : 
; 709  : 				if (find_object_3d_sub_object (&search) == SUB_OBJECT_SEARCH_RESULT_OBJECT_FOUND)

  012f6	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _search$3[ebp]
  012fc	50		 push	 eax
  012fd	e8 00 00 00 00	 call	 ?find_object_3d_sub_object@@YG?AW4SUB_OBJECT_SEARCH_RESULT_TYPES@@PAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z ; find_object_3d_sub_object
  01302	83 f8 01	 cmp	 eax, 1
  01305	75 20		 jne	 SHORT $LN56@draw_local

; 710  : 				{
; 711  : 					search.result_sub_object->visible_object = parachute1;

  01307	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _parachute1$11[ebp]
  0130d	83 e0 01	 and	 eax, 1
  01310	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _search$3[ebp+4]
  01316	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  01319	83 e2 fe	 and	 edx, -2			; fffffffeH
  0131c	0b d0		 or	 edx, eax
  0131e	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _search$3[ebp+4]
  01324	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN56@draw_local:

; 712  : 				}
; 713  : 
; 714  : 				search.search_depth = 0;

  01327	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _search$3[ebp+8], 0

; 715  : 				search.search_object = inst3d;

  01331	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  01334	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _search$3[ebp], eax

; 716  : 				search.sub_object_index = OBJECT_3D_SUB_OBJECT_CRATE_PARACHUTE_02;

  0133a	c7 85 e0 fe ff
	ff 03 01 00 00	 mov	 DWORD PTR _search$3[ebp+12], 259 ; 00000103H

; 717  : 
; 718  : 				if (find_object_3d_sub_object (&search) == SUB_OBJECT_SEARCH_RESULT_OBJECT_FOUND)

  01344	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _search$3[ebp]
  0134a	50		 push	 eax
  0134b	e8 00 00 00 00	 call	 ?find_object_3d_sub_object@@YG?AW4SUB_OBJECT_SEARCH_RESULT_TYPES@@PAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z ; find_object_3d_sub_object
  01350	83 f8 01	 cmp	 eax, 1
  01353	75 20		 jne	 SHORT $LN57@draw_local

; 719  : 				{
; 720  : 					search.result_sub_object->visible_object = parachute2;

  01355	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _parachute2$10[ebp]
  0135b	83 e0 01	 and	 eax, 1
  0135e	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _search$3[ebp+4]
  01364	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  01367	83 e2 fe	 and	 edx, -2			; fffffffeH
  0136a	0b d0		 or	 edx, eax
  0136c	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _search$3[ebp+4]
  01372	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN57@draw_local:

; 721  : 				}
; 722  : 
; 723  : 				search.search_depth = 0;

  01375	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _search$3[ebp+8], 0

; 724  : 				search.search_object = inst3d;

  0137f	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  01382	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _search$3[ebp], eax

; 725  : 				search.sub_object_index = OBJECT_3D_SUB_OBJECT_CRATE_PARACHUTE_03;

  01388	c7 85 e0 fe ff
	ff 04 01 00 00	 mov	 DWORD PTR _search$3[ebp+12], 260 ; 00000104H

; 726  : 
; 727  : 				if (find_object_3d_sub_object (&search) == SUB_OBJECT_SEARCH_RESULT_OBJECT_FOUND)

  01392	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _search$3[ebp]
  01398	50		 push	 eax
  01399	e8 00 00 00 00	 call	 ?find_object_3d_sub_object@@YG?AW4SUB_OBJECT_SEARCH_RESULT_TYPES@@PAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z ; find_object_3d_sub_object
  0139e	83 f8 01	 cmp	 eax, 1
  013a1	75 20		 jne	 SHORT $LN58@draw_local

; 728  : 				{
; 729  : 					search.result_sub_object->visible_object = parachute3;

  013a3	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _parachute3$9[ebp]
  013a9	83 e0 01	 and	 eax, 1
  013ac	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _search$3[ebp+4]
  013b2	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  013b5	83 e2 fe	 and	 edx, -2			; fffffffeH
  013b8	0b d0		 or	 edx, eax
  013ba	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _search$3[ebp+4]
  013c0	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN58@draw_local:

; 730  : 				}
; 731  : 
; 732  : 				search.search_depth = 0;

  013c3	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _search$3[ebp+8], 0

; 733  : 				search.search_object = inst3d;

  013cd	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  013d0	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _search$3[ebp], eax

; 734  : 				search.sub_object_index = OBJECT_3D_SUB_OBJECT_CRATE_PARACHUTE_04;

  013d6	c7 85 e0 fe ff
	ff 05 01 00 00	 mov	 DWORD PTR _search$3[ebp+12], 261 ; 00000105H

; 735  : 
; 736  : 				if (find_object_3d_sub_object (&search) == SUB_OBJECT_SEARCH_RESULT_OBJECT_FOUND)

  013e0	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _search$3[ebp]
  013e6	50		 push	 eax
  013e7	e8 00 00 00 00	 call	 ?find_object_3d_sub_object@@YG?AW4SUB_OBJECT_SEARCH_RESULT_TYPES@@PAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z ; find_object_3d_sub_object
  013ec	83 f8 01	 cmp	 eax, 1
  013ef	75 20		 jne	 SHORT $LN59@draw_local

; 737  : 				{
; 738  : 					search.result_sub_object->visible_object = parachute_collapsed;

  013f1	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _parachute_collapsed$8[ebp]
  013f7	83 e0 01	 and	 eax, 1
  013fa	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _search$3[ebp+4]
  01400	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  01403	83 e2 fe	 and	 edx, -2			; fffffffeH
  01406	0b d0		 or	 edx, eax
  01408	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _search$3[ebp+4]
  0140e	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN59@draw_local:

; 739  : 				}
; 740  : 
; 741  : 				inst3d->object_has_shadow = FALSE;

  01411	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  01414	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  01417	83 e1 fb	 and	 ecx, -5			; fffffffbH
  0141a	8b 55 f8	 mov	 edx, DWORD PTR _inst3d$[ebp]
  0141d	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 742  : 
; 743  : 				insert_object_into_3d_scene (OBJECT_3D_DRAW_TYPE_OBJECT, inst3d);

  01420	51		 push	 ecx
  01421	0f 57 c0	 xorps	 xmm0, xmm0
  01424	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01429	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  0142c	50		 push	 eax
  0142d	6a 01		 push	 1
  0142f	e8 00 00 00 00	 call	 ?insert_zbiased_object_into_3d_scene@@YGXW4OBJECT_3D_DRAWING_TYPES@@PAXM@Z ; insert_zbiased_object_into_3d_scene
$LN49@draw_local:

; 744  : 			}
; 745  : 
; 746  : 			break;

  01434	eb 77		 jmp	 SHORT $LN2@draw_local
$LN60@draw_local:

; 747  : 		}
; 748  : 		////////////////////////////////////////
; 749  : 		default:
; 750  : 		////////////////////////////////////////
; 751  : 		{
; 752  : 			inst3d = construct_temporary_3d_object (weapon_database[raw->mob.sub_type].default_3d_shape, FALSE);

  01436	6a 00		 push	 0
  01438	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0143b	69 08 e0 00 00
	00		 imul	 ecx, DWORD PTR [eax], 224
  01441	8b 91 14 00 00
	00		 mov	 edx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[ecx+20]
  01447	52		 push	 edx
  01448	e8 00 00 00 00	 call	 ?construct_temporary_3d_object@@YGPAUOBJECT_3D_INSTANCE@@HH@Z ; construct_temporary_3d_object
  0144d	89 45 f8	 mov	 DWORD PTR _inst3d$[ebp], eax

; 753  : 
; 754  : 			if (inst3d)

  01450	83 7d f8 00	 cmp	 DWORD PTR _inst3d$[ebp], 0
  01454	74 57		 je	 SHORT $LN61@draw_local

; 755  : 			{
; 756  : 				inst3d->vp.position = raw->mob.position;

  01456	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  01459	83 c0 04	 add	 eax, 4
  0145c	8b 4d f8	 mov	 ecx, DWORD PTR _inst3d$[ebp]
  0145f	83 c1 08	 add	 ecx, 8
  01462	8b 10		 mov	 edx, DWORD PTR [eax]
  01464	89 11		 mov	 DWORD PTR [ecx], edx
  01466	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  01469	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0146c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0146f	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 757  : 
; 758  : 				memcpy (inst3d->vp.attitude, raw->mob.attitude, sizeof (matrix3x3));

  01472	6a 24		 push	 36			; 00000024H
  01474	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  01477	83 c0 10	 add	 eax, 16			; 00000010H
  0147a	50		 push	 eax
  0147b	8b 4d f8	 mov	 ecx, DWORD PTR _inst3d$[ebp]
  0147e	83 c1 14	 add	 ecx, 20			; 00000014H
  01481	51		 push	 ecx
  01482	e8 00 00 00 00	 call	 _memcpy
  01487	83 c4 0c	 add	 esp, 12			; 0000000cH

; 759  : 
; 760  : 				inst3d->object_has_shadow = FALSE;

  0148a	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  0148d	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  01490	83 e1 fb	 and	 ecx, -5			; fffffffbH
  01493	8b 55 f8	 mov	 edx, DWORD PTR _inst3d$[ebp]
  01496	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 761  : 
; 762  : 				insert_object_into_3d_scene (OBJECT_3D_DRAW_TYPE_OBJECT, inst3d);

  01499	51		 push	 ecx
  0149a	0f 57 c0	 xorps	 xmm0, xmm0
  0149d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014a2	8b 45 f8	 mov	 eax, DWORD PTR _inst3d$[ebp]
  014a5	50		 push	 eax
  014a6	6a 01		 push	 1
  014a8	e8 00 00 00 00	 call	 ?insert_zbiased_object_into_3d_scene@@YGXW4OBJECT_3D_DRAWING_TYPES@@PAXM@Z ; insert_zbiased_object_into_3d_scene
$LN61@draw_local:
$LN2@draw_local:
$LN1@draw_local:

; 763  : 			}
; 764  : 
; 765  : 			break;
; 766  : 		}
; 767  : 	}
; 768  : }

  014ad	5f		 pop	 edi
  014ae	5e		 pop	 esi
  014af	5b		 pop	 ebx
  014b0	8b e5		 mov	 esp, ebp
  014b2	5d		 pop	 ebp
  014b3	c2 08 00	 ret	 8
  014b6	66 90		 npad	 2
$LN73@draw_local:
  014b8	00 00 00 00	 DD	 $LN34@draw_local
  014bc	00 00 00 00	 DD	 $LN26@draw_local
  014c0	00 00 00 00	 DD	 $LN48@draw_local
  014c4	00 00 00 00	 DD	 $LN15@draw_local
  014c8	00 00 00 00	 DD	 $LN13@draw_local
  014cc	00 00 00 00	 DD	 $LN17@draw_local
  014d0	00 00 00 00	 DD	 $LN60@draw_local
$LN72@draw_local:
  014d4	00		 DB	 0
  014d5	01		 DB	 1
  014d6	00		 DB	 0
  014d7	02		 DB	 2
  014d8	06		 DB	 6
  014d9	06		 DB	 6
  014da	03		 DB	 3
  014db	04		 DB	 4
  014dc	04		 DB	 4
  014dd	04		 DB	 4
  014de	04		 DB	 4
  014df	04		 DB	 4
  014e0	04		 DB	 4
  014e1	04		 DB	 4
  014e2	06		 DB	 6
  014e3	05		 DB	 5
$LN74@draw_local:
  014e4	00 00 00 00	 DD	 $LN36@draw_local
  014e8	00 00 00 00	 DD	 $LN37@draw_local
  014ec	00 00 00 00	 DD	 $LN38@draw_local
  014f0	00 00 00 00	 DD	 $LN39@draw_local
$LN75@draw_local:
  014f4	00 00 00 00	 DD	 $LN50@draw_local
  014f8	00 00 00 00	 DD	 $LN51@draw_local
  014fc	00 00 00 00	 DD	 $LN52@draw_local
  01500	00 00 00 00	 DD	 $LN53@draw_local
  01504	00 00 00 00	 DD	 $LN54@draw_local
?draw_local_3d_object@@YGXPAUENTITY@@M@Z ENDP		; draw_local_3d_object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\wn_draw.c
;	COMDAT ?update_weapon_crate_animation@@YGXPAUWEAPON@@@Z
_TEXT	SEGMENT
tv82 = -72						; size = 4
_lifetime$ = -4						; size = 4
_raw$ = 8						; size = 4
?update_weapon_crate_animation@@YGXPAUWEAPON@@@Z PROC	; update_weapon_crate_animation, COMDAT

; 893  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 894  : 	float
; 895  : 		lifetime;
; 896  : 
; 897  : 	ASSERT (raw);

  00009	83 7d 08 00	 cmp	 DWORD PTR _raw$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN4@update_wea
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_weapon_crate_animation@@YGXPAUWEAPON@@@Z@4JA
  00014	83 c0 04	 add	 eax, 4
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IBALGILN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_03DGOGAGNC@raw@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@update_wea:

; 898  : 
; 899  : 	lifetime = -raw->weapon_lifetime;

  00027	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0002a	f3 0f 10 80 80
	00 00 00	 movss	 xmm0, DWORD PTR [eax+128]
  00032	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00039	f3 0f 11 45 fc	 movss	 DWORD PTR _lifetime$[ebp], xmm0

; 900  : 
; 901  : 	if (raw->weapon_on_ground)

  0003e	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00041	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00047	c1 e9 03	 shr	 ecx, 3
  0004a	83 e1 01	 and	 ecx, 1
  0004d	74 18		 je	 SHORT $LN5@update_wea

; 902  : 	{
; 903  : 		raw->parachute_status = PARACHUTE_STATUS_COLLAPSED;

  0004f	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00052	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00058	83 e1 8f	 and	 ecx, -113		; ffffff8fH
  0005b	83 c9 40	 or	 ecx, 64			; 00000040H
  0005e	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  00061	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx
$LN5@update_wea:

; 904  : 	}
; 905  : 
; 906  : 	switch (raw->parachute_status)

  00067	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0006a	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00070	c1 e9 04	 shr	 ecx, 4
  00073	83 e1 07	 and	 ecx, 7
  00076	89 4d b8	 mov	 DWORD PTR tv82[ebp], ecx
  00079	83 7d b8 04	 cmp	 DWORD PTR tv82[ebp], 4
  0007d	0f 87 c7 00 00
	00		 ja	 $LN14@update_wea
  00083	8b 55 b8	 mov	 edx, DWORD PTR tv82[ebp]
  00086	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN16@update_wea[edx*4]
$LN6@update_wea:

; 907  : 	{
; 908  : 		////////////////////////////////////////
; 909  : 		case PARACHUTE_STATUS_CLOSED:
; 910  : 		////////////////////////////////////////
; 911  : 		{
; 912  : 			if ((lifetime > 0.5) && (raw->mob.motion_vector.y < 0.0))

  0008d	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _lifetime$[ebp]
  00092	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fe0000000000000
  0009a	76 37		 jbe	 SHORT $LN7@update_wea
  0009c	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0009f	f3 0f 5a 40 38	 cvtss2sd xmm0, DWORD PTR [eax+56]
  000a4	0f 57 c9	 xorps	 xmm1, xmm1
  000a7	66 0f 2f c8	 comisd	 xmm1, xmm0
  000ab	76 26		 jbe	 SHORT $LN7@update_wea

; 913  : 			{
; 914  : 				raw->parachute_status = PARACHUTE_STATUS_OPEN1;

  000ad	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  000b0	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  000b6	83 e1 8f	 and	 ecx, -113		; ffffff8fH
  000b9	83 c9 10	 or	 ecx, 16			; 00000010H
  000bc	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  000bf	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 915  : 
; 916  : 				raw->weapon_lifetime = 0.0;

  000c5	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  000c8	0f 57 c0	 xorps	 xmm0, xmm0
  000cb	f3 0f 11 80 80
	00 00 00	 movss	 DWORD PTR [eax+128], xmm0
$LN7@update_wea:

; 917  : 			}
; 918  : 
; 919  : 			break;

  000d3	e9 8f 00 00 00	 jmp	 $LN2@update_wea
$LN8@update_wea:

; 920  : 		}
; 921  : 		////////////////////////////////////////
; 922  : 		case PARACHUTE_STATUS_OPEN1:
; 923  : 		////////////////////////////////////////
; 924  : 		{
; 925  : 			if (lifetime > 0.1)

  000d8	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _lifetime$[ebp]
  000dd	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fb999999999999a
  000e5	76 26		 jbe	 SHORT $LN9@update_wea

; 926  : 			{
; 927  : 				raw->parachute_status = PARACHUTE_STATUS_OPEN2;

  000e7	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  000ea	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  000f0	83 e1 8f	 and	 ecx, -113		; ffffff8fH
  000f3	83 c9 20	 or	 ecx, 32			; 00000020H
  000f6	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  000f9	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 928  : 
; 929  : 				raw->weapon_lifetime = 0.0;

  000ff	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00102	0f 57 c0	 xorps	 xmm0, xmm0
  00105	f3 0f 11 80 80
	00 00 00	 movss	 DWORD PTR [eax+128], xmm0
$LN9@update_wea:

; 930  : 			}
; 931  : 
; 932  : 			break;

  0010d	eb 58		 jmp	 SHORT $LN2@update_wea
$LN10@update_wea:

; 933  : 		}
; 934  : 		////////////////////////////////////////
; 935  : 		case PARACHUTE_STATUS_OPEN2:
; 936  : 		////////////////////////////////////////
; 937  : 		{
; 938  : 			if (lifetime > 0.1)

  0010f	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _lifetime$[ebp]
  00114	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fb999999999999a
  0011c	76 26		 jbe	 SHORT $LN11@update_wea

; 939  : 			{
; 940  : 				raw->parachute_status = PARACHUTE_STATUS_OPEN3;

  0011e	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00121	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00127	83 e1 8f	 and	 ecx, -113		; ffffff8fH
  0012a	83 c9 30	 or	 ecx, 48			; 00000030H
  0012d	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  00130	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 941  : 
; 942  : 				raw->weapon_lifetime = 0.0;

  00136	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00139	0f 57 c0	 xorps	 xmm0, xmm0
  0013c	f3 0f 11 80 80
	00 00 00	 movss	 DWORD PTR [eax+128], xmm0
$LN11@update_wea:

; 943  : 			}
; 944  : 
; 945  : 			break;

  00144	eb 21		 jmp	 SHORT $LN2@update_wea
$LN12@update_wea:

; 946  : 		}
; 947  : 		////////////////////////////////////////
; 948  : 		case PARACHUTE_STATUS_OPEN3:
; 949  : 		////////////////////////////////////////
; 950  : 		{
; 951  : 			break;

  00146	eb 1f		 jmp	 SHORT $LN2@update_wea
$LN13@update_wea:

; 952  : 		}
; 953  : 		////////////////////////////////////////
; 954  : 		case PARACHUTE_STATUS_COLLAPSED:
; 955  : 		////////////////////////////////////////
; 956  : 		{
; 957  : 			break;

  00148	eb 1d		 jmp	 SHORT $LN2@update_wea
$LN14@update_wea:

; 958  : 		}
; 959  : 		////////////////////////////////////////
; 960  : 		default:
; 961  : 		////////////////////////////////////////
; 962  : 		{
; 963  : 			debug_fatal ("Invalid parachute status = %d", raw->parachute_status);

  0014a	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0014d	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00153	c1 e9 04	 shr	 ecx, 4
  00156	83 e1 07	 and	 ecx, 7
  00159	51		 push	 ecx
  0015a	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@JOKAHLIP@Invalid?5parachute?5status?5?$DN?5?$CFd@
  0015f	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00164	83 c4 08	 add	 esp, 8
$LN2@update_wea:

; 964  : 
; 965  : 			break;
; 966  : 		}
; 967  : 	}
; 968  : }

  00167	5f		 pop	 edi
  00168	5e		 pop	 esi
  00169	5b		 pop	 ebx
  0016a	8b e5		 mov	 esp, ebp
  0016c	5d		 pop	 ebp
  0016d	c2 04 00	 ret	 4
$LN16@update_wea:
  00170	00 00 00 00	 DD	 $LN6@update_wea
  00174	00 00 00 00	 DD	 $LN8@update_wea
  00178	00 00 00 00	 DD	 $LN10@update_wea
  0017c	00 00 00 00	 DD	 $LN12@update_wea
  00180	00 00 00 00	 DD	 $LN13@update_wea
?update_weapon_crate_animation@@YGXPAUWEAPON@@@Z ENDP	; update_weapon_crate_animation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\wn_draw.c
;	COMDAT ?update_weapon_ejector_seat_animation@@YGXPAUWEAPON@@@Z
_TEXT	SEGMENT
tv74 = -72						; size = 4
_lifetime$ = -4						; size = 4
_raw$ = 8						; size = 4
?update_weapon_ejector_seat_animation@@YGXPAUWEAPON@@@Z PROC ; update_weapon_ejector_seat_animation, COMDAT

; 822  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 823  : 	float
; 824  : 		lifetime;
; 825  : 
; 826  : 	ASSERT (raw);

  00009	83 7d 08 00	 cmp	 DWORD PTR _raw$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN4@update_wea
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_weapon_ejector_seat_animation@@YGXPAUWEAPON@@@Z@4JA
  00014	83 c0 04	 add	 eax, 4
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IBALGILN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_03DGOGAGNC@raw@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@update_wea:

; 827  : 
; 828  : 	lifetime = -raw->weapon_lifetime;

  00027	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0002a	f3 0f 10 80 80
	00 00 00	 movss	 xmm0, DWORD PTR [eax+128]
  00032	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00039	f3 0f 11 45 fc	 movss	 DWORD PTR _lifetime$[ebp], xmm0

; 829  : 
; 830  : 	switch (raw->parachute_status)

  0003e	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00041	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00047	c1 e9 04	 shr	 ecx, 4
  0004a	83 e1 07	 and	 ecx, 7
  0004d	89 4d b8	 mov	 DWORD PTR tv74[ebp], ecx
  00050	83 7d b8 03	 cmp	 DWORD PTR tv74[ebp], 3
  00054	0f 87 c5 00 00
	00		 ja	 $LN12@update_wea
  0005a	8b 55 b8	 mov	 edx, DWORD PTR tv74[ebp]
  0005d	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN14@update_wea[edx*4]
$LN5@update_wea:

; 831  : 	{
; 832  : 		////////////////////////////////////////
; 833  : 		case PARACHUTE_STATUS_CLOSED:
; 834  : 		////////////////////////////////////////
; 835  : 		{
; 836  : 			if ((lifetime > 3.0) && (raw->mob.motion_vector.y < 0.0))

  00064	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _lifetime$[ebp]
  00069	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4008000000000000
  00071	76 37		 jbe	 SHORT $LN6@update_wea
  00073	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00076	f3 0f 5a 40 38	 cvtss2sd xmm0, DWORD PTR [eax+56]
  0007b	0f 57 c9	 xorps	 xmm1, xmm1
  0007e	66 0f 2f c8	 comisd	 xmm1, xmm0
  00082	76 26		 jbe	 SHORT $LN6@update_wea

; 837  : 			{
; 838  : 				raw->parachute_status = PARACHUTE_STATUS_OPEN1;

  00084	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00087	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0008d	83 e1 8f	 and	 ecx, -113		; ffffff8fH
  00090	83 c9 10	 or	 ecx, 16			; 00000010H
  00093	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  00096	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 839  : 
; 840  : 				raw->weapon_lifetime = 0.0;

  0009c	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0009f	0f 57 c0	 xorps	 xmm0, xmm0
  000a2	f3 0f 11 80 80
	00 00 00	 movss	 DWORD PTR [eax+128], xmm0
$LN6@update_wea:

; 841  : 			}
; 842  : 
; 843  : 			break;

  000aa	e9 8d 00 00 00	 jmp	 $LN2@update_wea
$LN7@update_wea:

; 844  : 		}
; 845  : 		////////////////////////////////////////
; 846  : 		case PARACHUTE_STATUS_OPEN1:
; 847  : 		////////////////////////////////////////
; 848  : 		{
; 849  : 			if (lifetime > 0.1)

  000af	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _lifetime$[ebp]
  000b4	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fb999999999999a
  000bc	76 26		 jbe	 SHORT $LN8@update_wea

; 850  : 			{
; 851  : 				raw->parachute_status = PARACHUTE_STATUS_OPEN2;

  000be	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  000c1	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  000c7	83 e1 8f	 and	 ecx, -113		; ffffff8fH
  000ca	83 c9 20	 or	 ecx, 32			; 00000020H
  000cd	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  000d0	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 852  : 
; 853  : 				raw->weapon_lifetime = 0.0;

  000d6	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  000d9	0f 57 c0	 xorps	 xmm0, xmm0
  000dc	f3 0f 11 80 80
	00 00 00	 movss	 DWORD PTR [eax+128], xmm0
$LN8@update_wea:

; 854  : 			}
; 855  : 
; 856  : 			break;

  000e4	eb 56		 jmp	 SHORT $LN2@update_wea
$LN9@update_wea:

; 857  : 		}
; 858  : 		////////////////////////////////////////
; 859  : 		case PARACHUTE_STATUS_OPEN2:
; 860  : 		////////////////////////////////////////
; 861  : 		{
; 862  : 			if (lifetime > 0.1)

  000e6	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _lifetime$[ebp]
  000eb	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fb999999999999a
  000f3	76 26		 jbe	 SHORT $LN10@update_wea

; 863  : 			{
; 864  : 				raw->parachute_status = PARACHUTE_STATUS_OPEN3;

  000f5	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  000f8	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  000fe	83 e1 8f	 and	 ecx, -113		; ffffff8fH
  00101	83 c9 30	 or	 ecx, 48			; 00000030H
  00104	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  00107	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 865  : 
; 866  : 				raw->weapon_lifetime = 0.0;

  0010d	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00110	0f 57 c0	 xorps	 xmm0, xmm0
  00113	f3 0f 11 80 80
	00 00 00	 movss	 DWORD PTR [eax+128], xmm0
$LN10@update_wea:

; 867  : 			}
; 868  : 
; 869  : 			break;

  0011b	eb 1f		 jmp	 SHORT $LN2@update_wea
$LN11@update_wea:

; 870  : 		}
; 871  : 		////////////////////////////////////////
; 872  : 		case PARACHUTE_STATUS_OPEN3:
; 873  : 		////////////////////////////////////////
; 874  : 		{
; 875  : 			break;

  0011d	eb 1d		 jmp	 SHORT $LN2@update_wea
$LN12@update_wea:

; 876  : 		}
; 877  : 		////////////////////////////////////////
; 878  : 		default:
; 879  : 		////////////////////////////////////////
; 880  : 		{
; 881  : 			debug_fatal ("Invalid parachute status = %d", raw->parachute_status);

  0011f	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00122	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00128	c1 e9 04	 shr	 ecx, 4
  0012b	83 e1 07	 and	 ecx, 7
  0012e	51		 push	 ecx
  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@JOKAHLIP@Invalid?5parachute?5status?5?$DN?5?$CFd@
  00134	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00139	83 c4 08	 add	 esp, 8
$LN2@update_wea:

; 882  : 
; 883  : 			break;
; 884  : 		}
; 885  : 	}
; 886  : }

  0013c	5f		 pop	 edi
  0013d	5e		 pop	 esi
  0013e	5b		 pop	 ebx
  0013f	8b e5		 mov	 esp, ebp
  00141	5d		 pop	 ebp
  00142	c2 04 00	 ret	 4
  00145	0f 1f 00	 npad	 3
$LN14@update_wea:
  00148	00 00 00 00	 DD	 $LN5@update_wea
  0014c	00 00 00 00	 DD	 $LN7@update_wea
  00150	00 00 00 00	 DD	 $LN9@update_wea
  00154	00 00 00 00	 DD	 $LN11@update_wea
?update_weapon_ejector_seat_animation@@YGXPAUWEAPON@@@Z ENDP ; update_weapon_ejector_seat_animation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\wn_draw.c
;	COMDAT ?get_local_weapon_entity_parachute_open@@YGHPAUENTITY@@@Z
_TEXT	SEGMENT
tv83 = -76						; size = 4
tv75 = -72						; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
?get_local_weapon_entity_parachute_open@@YGHPAUENTITY@@@Z PROC ; get_local_weapon_entity_parachute_open, COMDAT

; 796  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 797  : 	weapon
; 798  : 		*raw;
; 799  : 
; 800  : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_local_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_local_weapon_entity_parachute_open@@YGHPAUENTITY@@@Z@4JA
  00014	83 c0 04	 add	 eax, 4
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IBALGILN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_local_:

; 801  : 
; 802  : 	ASSERT (get_local_entity_int_value (en, INT_TYPE_IDENTIFY_WEAPON));

  00027	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0002b	74 0a		 je	 SHORT $LN7@get_local_
  0002d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	89 4d b8	 mov	 DWORD PTR tv75[ebp], ecx
  00035	eb 21		 jmp	 SHORT $LN8@get_local_
$LN7@get_local_:
  00037	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_local_weapon_entity_parachute_open@@YGHPAUENTITY@@@Z@4JA
  0003d	83 c2 06	 add	 edx, 6
  00040	52		 push	 edx
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IBALGILN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00051	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$LN8@get_local_:
  00058	b9 01 00 00 00	 mov	 ecx, 1
  0005d	85 c9		 test	 ecx, ecx
  0005f	74 09		 je	 SHORT $LN9@get_local_
  00061	c7 45 b4 62 00
	00 00		 mov	 DWORD PTR tv83[ebp], 98	; 00000062H
  00068	eb 21		 jmp	 SHORT $LN10@get_local_
$LN9@get_local_:
  0006a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_local_weapon_entity_parachute_open@@YGHPAUENTITY@@@Z@4JA
  00070	83 c2 06	 add	 edx, 6
  00073	52		 push	 edx
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IBALGILN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00084	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN10@get_local_:
  0008b	6a 62		 push	 98			; 00000062H
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00090	51		 push	 ecx
  00091	69 55 b8 5c 04
	00 00		 imul	 edx, DWORD PTR tv75[ebp], 1116
  00098	8b 45 b4	 mov	 eax, DWORD PTR tv83[ebp]
  0009b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000a2	ff d1		 call	 ecx
  000a4	85 c0		 test	 eax, eax
  000a6	75 18		 jne	 SHORT $LN3@get_local_
  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_local_weapon_entity_parachute_open@@YGHPAUENTITY@@@Z@4JA
  000ad	83 c0 06	 add	 eax, 6
  000b0	50		 push	 eax
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@IBALGILN@c?3?2users?2nhv90?2projects?2eech?2ap@
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@CLHIENNN@get_local_entity_int_value?5?$CIen?0@
  000bb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_local_:

; 803  : 
; 804  : 	raw = (weapon *) get_local_entity_data (en);

  000c0	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000c3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c6	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 805  : 
; 806  : 	if (raw->parachute_status == PARACHUTE_STATUS_OPEN3)

  000c9	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  000cc	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  000d2	c1 e9 04	 shr	 ecx, 4
  000d5	83 e1 07	 and	 ecx, 7
  000d8	83 f9 03	 cmp	 ecx, 3
  000db	75 20		 jne	 SHORT $LN5@get_local_

; 807  : 	{
; 808  : 		if (raw->weapon_lifetime < -1.0)

  000dd	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  000e0	f3 0f 5a 80 80
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+128]
  000e8	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bff0000000000000
  000f0	66 0f 2f c8	 comisd	 xmm1, xmm0
  000f4	76 07		 jbe	 SHORT $LN5@get_local_

; 809  : 		{
; 810  : 			return (TRUE);

  000f6	b8 01 00 00 00	 mov	 eax, 1
  000fb	eb 02		 jmp	 SHORT $LN1@get_local_
$LN5@get_local_:

; 811  : 		}
; 812  : 	}
; 813  : 
; 814  : 	return (FALSE);

  000fd	33 c0		 xor	 eax, eax
$LN1@get_local_:

; 815  : }

  000ff	5f		 pop	 edi
  00100	5e		 pop	 esi
  00101	5b		 pop	 ebx
  00102	8b e5		 mov	 esp, ebp
  00104	5d		 pop	 ebp
  00105	c2 04 00	 ret	 4
?get_local_weapon_entity_parachute_open@@YGHPAUENTITY@@@Z ENDP ; get_local_weapon_entity_parachute_open
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\weapon\wn_draw.c
;	COMDAT ?overload_weapon_draw_functions@@YGXXZ
_TEXT	SEGMENT
?overload_weapon_draw_functions@@YGXXZ PROC		; overload_weapon_draw_functions, COMDAT

; 785  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 786  : 	fn_draw_local_entity_3d_object[ENTITY_TYPE_WEAPON]	= draw_local_3d_object;

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 25	 imul	 ecx, eax, 37
  00011	c7 81 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fn_draw_local_entity_3d_object@@3PAP6GXPAUENTITY@@M@ZA[ecx], OFFSET ?draw_local_3d_object@@YGXPAUENTITY@@M@Z ; draw_local_3d_object

; 787  : 
; 788  : 	//fn_draw_local_entity_2d_symbol[ENTITY_TYPE_WEAPON]	= draw_local_2d_symbol;
; 789  : }

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?overload_weapon_draw_functions@@YGXXZ ENDP		; overload_weapon_draw_functions
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sin@@YGMM@Z PROC					; sin, COMDAT

; 284  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 285  : 	return (_CSTD sinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sinf
  00019	83 c4 04	 add	 esp, 4

; 286  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sin@@YGMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fmod@@YGMMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
__Yx$ = 12						; size = 4
?fmod@@YGMMM@Z PROC					; fmod, COMDAT

; 143  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 144  : 	return (_CSTD fmodf(_Xx, _Yx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _fmodf
  00024	83 c4 08	 add	 esp, 8

; 145  : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?fmod@@YGMMM@Z ENDP					; fmod
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan2@@YGMMM@Z
_TEXT	SEGMENT
__Yx$ = 8						; size = 4
__Xx$ = 12						; size = 4
?atan2@@YGMMM@Z PROC					; atan2, COMDAT

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return (_CSTD atan2f(_Yx, _Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _atan2f
  00024	83 c4 08	 add	 esp, 8

; 58   : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?atan2@@YGMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?asin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?asin@@YGMM@Z PROC					; asin, COMDAT

; 36   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 37   : 	return (_CSTD asinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _asinf
  00019	83 c4 04	 add	 esp, 4

; 38   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?asin@@YGMM@Z ENDP					; asin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 750  :             return (float)sin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 751  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fmodf
_TEXT	SEGMENT
tv74 = -68						; size = 4
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
_fmodf	PROC						; COMDAT

; 690  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 691  :             return (float)fmod(_X, _Y);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _fmod
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 692  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_fmodf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv74 = -68						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 633  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 634  :             return (float)atan2(_Y, _X);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _atan2
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 635  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _asinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_asinf	PROC						; COMDAT

; 628  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 629  :             return (float)asin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _asin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 630  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_asinf	ENDP
_TEXT	ENDS
END
