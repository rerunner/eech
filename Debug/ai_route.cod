; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\ai\ai_misc\ai_route.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?road_nodes_loaded@@3HA				; road_nodes_loaded
PUBLIC	?road_nodes@@3PAUNODE_DATA@@A			; road_nodes
PUBLIC	?road_node_positions@@3PAUVEC3D@@A		; road_node_positions
PUBLIC	?road_node_link_positions@@3PAUNODE_LINK_DATA@@A ; road_node_link_positions
PUBLIC	?total_road_node_link_count@@3HA		; total_road_node_link_count
PUBLIC	?total_number_of_road_nodes@@3HA		; total_number_of_road_nodes
PUBLIC	?best_recurse_level@@3HA			; best_recurse_level
PUBLIC	?current_route@@3PAHA				; current_route
PUBLIC	?best_route@@3PAHA				; best_route
PUBLIC	?duplicate_count@@3HA				; duplicate_count
PUBLIC	?ground_landing_entities@@3PAPAUENTITY@@A	; ground_landing_entities
_BSS	SEGMENT
?road_nodes_loaded@@3HA DD 01H DUP (?)			; road_nodes_loaded
?road_nodes@@3PAUNODE_DATA@@A DD 01H DUP (?)		; road_nodes
?road_node_positions@@3PAUVEC3D@@A DD 01H DUP (?)	; road_node_positions
?road_node_link_positions@@3PAUNODE_LINK_DATA@@A DD 01H DUP (?) ; road_node_link_positions
?total_road_node_link_count@@3HA DD 01H DUP (?)		; total_road_node_link_count
?total_number_of_road_nodes@@3HA DD 01H DUP (?)		; total_number_of_road_nodes
?current_route@@3PAHA DD 064H DUP (?)			; current_route
?best_route@@3PAHA DD 064H DUP (?)			; best_route
?duplicate_count@@3HA DD 01H DUP (?)			; duplicate_count
?ground_landing_entities@@3PAPAUENTITY@@A DD 01H DUP (?) ; ground_landing_entities
_BSS	ENDS
_DATA	SEGMENT
?best_recurse_level@@3HA DD 07fffffffH			; best_recurse_level
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	?initialise_route_data@@YGXXZ			; initialise_route_data
PUBLIC	?load_route_data@@YGXXZ				; load_route_data
PUBLIC	?read_road_route_data@@YGXXZ			; read_road_route_data
PUBLIC	?clear_road_route_data@@YGXXZ			; clear_road_route_data
PUBLIC	?deinitialise_route_data@@YGXXZ			; deinitialise_route_data
PUBLIC	?deinitialise_road_route_data@@YGXXZ		; deinitialise_road_route_data
PUBLIC	?get_road_link_data@@YGPAUNODE_LINK_DATA@@HH@Z	; get_road_link_data
PUBLIC	?get_road_sub_route@@YGPAUNODE_LINK_DATA@@HHPAHPAU1@@Z ; get_road_sub_route
PUBLIC	?set_road_link_breaks@@YGHHHH@Z			; set_road_link_breaks
PUBLIC	?get_road_link_breaks@@YGHHH@Z			; get_road_link_breaks
PUBLIC	?set_route_node_data_filename@@YGXPAPADPBD@Z	; set_route_node_data_filename
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	?__LINE__Var@?0??deinitialise_road_route_data@@YGXXZ@4JA ; `deinitialise_road_route_data'::`1'::__LINE__Var
PUBLIC	??_C@_0EC@FGDCJMLC@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0CP@ONICAEGO@road_node_link_positions?5?$FLloop?$FN@ ; `string'
PUBLIC	??_C@_05BAHFCMOL@ROADS@				; `string'
PUBLIC	??_C@_08MPFGFNKO@ROADDATA@			; `string'
PUBLIC	?__LINE__Var@?0??read_road_route_node_data@@YGHPAD@Z@4JA ; `read_road_route_node_data'::`1'::__LINE__Var
PUBLIC	??_C@_0CC@EEKIOPJL@get_valid_current_game_session?5@ ; `string'
PUBLIC	??_C@_04PBCOOEDG@?4dat@				; `string'
PUBLIC	??_C@_0O@KFLNJAID@?$CFs?2route?2?$CFs?$CFs@	; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	?__LINE__Var@?0??read_road_route_node_positions@@YGHPAD@Z@4JA ; `read_road_route_node_positions'::`1'::__LINE__Var
PUBLIC	??_C@_04MLIBOFKJ@?4nde@				; `string'
PUBLIC	??_C@_0BG@IFIEPJND@file_exist?5?$CIfilename?$CJ@ ; `string'
PUBLIC	??_C@_0DD@KNHHHCBG@number_of_road_nodes?5?$DN?$DN?5total_n@ ; `string'
PUBLIC	?__LINE__Var@?0??read_road_route_node_link_positions@@YGHPAD@Z@4JA ; `read_road_route_node_link_positions'::`1'::__LINE__Var
PUBLIC	??_C@_03OANHPPMN@?4wp@				; `string'
PUBLIC	?__LINE__Var@?0??get_road_link_data@@YGPAUNODE_LINK_DATA@@HH@Z@4JA ; `get_road_link_data'::`1'::__LINE__Var
PUBLIC	??_C@_0L@PCIJFDI@road_nodes@			; `string'
PUBLIC	??_C@_0BE@BLOGCFGI@road_node_positions@		; `string'
PUBLIC	??_C@_0BJ@KHCLBFEE@road_node_link_positions@	; `string'
PUBLIC	??_C@_0BK@CDOPAABC@AI_ROUTE?3?5data?5not?5loaded@ ; `string'
PUBLIC	??_C@_0DE@OGBCFFFK@AI_ROUTE?3?5Warning?$CB?5Link?5between@ ; `string'
PUBLIC	?__LINE__Var@?0??get_road_sub_route@@YGPAUNODE_LINK_DATA@@HHPAHPAU2@@Z@4JA ; `get_road_sub_route'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??set_road_link_breaks@@YGHHHH@Z@4JA ; `set_road_link_breaks'::`1'::__LINE__Var
PUBLIC	??_C@_0EI@LHACMKLG@AI_ROUTE?3?5too?5many?5bridges?5dest@ ; `string'
PUBLIC	??_C@_0DC@BOKEKKOD@AI_ROUTE?3?5only?5found?51?5way?5link@ ; `string'
PUBLIC	?__LINE__Var@?0??get_road_link_breaks@@YGHHH@Z@4JA ; `get_road_link_breaks'::`1'::__LINE__Var
PUBLIC	??_C@_0FC@PGENAIFP@road_nodes?5?$FLnode1?$FN?4links?5?$FLloop?$FN@ ; `string'
EXTRN	__imp__fclose:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	_memset:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?file_exist@@YGHPBD@Z:PROC			; file_exist
EXTRN	?safe_fopen@@YGPAU_iobuf@@PBD0@Z:PROC		; safe_fopen
EXTRN	?safe_fread@@YGXPAXHHPAU_iobuf@@@Z:PROC		; safe_fread
EXTRN	?malloc_heap_memory@@YGPAXI@Z:PROC		; malloc_heap_memory
EXTRN	?free_mem@@YGXPAX@Z:PROC			; free_mem
EXTRN	?world_map@@3UWORLD_MAP_DATA@@A:BYTE		; world_map
EXTRN	?current_game_session@@3PAUSESSION_LIST_DATA_TYPE@@A:DWORD ; current_game_session
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_C@_0FC@PGENAIFP@road_nodes?5?$FLnode1?$FN?4links?5?$FLloop?$FN@
CONST	SEGMENT
??_C@_0FC@PGENAIFP@road_nodes?5?$FLnode1?$FN?4links?5?$FLloop?$FN@ DB 'ro'
	DB	'ad_nodes [node1].links [loop].breaks == road_nodes [node2].li'
	DB	'nks [loop2].breaks', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_road_link_breaks@@YGHHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_road_link_breaks@@YGHHH@Z@4JA DD 0461H ; `get_road_link_breaks'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DC@BOKEKKOD@AI_ROUTE?3?5only?5found?51?5way?5link@
CONST	SEGMENT
??_C@_0DC@BOKEKKOD@AI_ROUTE?3?5only?5found?51?5way?5link@ DB 'AI_ROUTE: o'
	DB	'nly found 1 way link between %d and %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@LHACMKLG@AI_ROUTE?3?5too?5many?5bridges?5dest@
CONST	SEGMENT
??_C@_0EI@LHACMKLG@AI_ROUTE?3?5too?5many?5bridges?5dest@ DB 'AI_ROUTE: to'
	DB	'o many bridges destroyed on link between %d and %d (max 32)', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??set_road_link_breaks@@YGHHHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_road_link_breaks@@YGHHHH@Z@4JA DD 042bH ; `set_road_link_breaks'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_road_sub_route@@YGPAUNODE_LINK_DATA@@HHPAHPAU2@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_road_sub_route@@YGPAUNODE_LINK_DATA@@HHPAHPAU2@@Z@4JA DD 0380H ; `get_road_sub_route'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DE@OGBCFFFK@AI_ROUTE?3?5Warning?$CB?5Link?5between@
CONST	SEGMENT
??_C@_0DE@OGBCFFFK@AI_ROUTE?3?5Warning?$CB?5Link?5between@ DB 'AI_ROUTE: '
	DB	'Warning! Link between %d and %d not found', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CDOPAABC@AI_ROUTE?3?5data?5not?5loaded@
CONST	SEGMENT
??_C@_0BK@CDOPAABC@AI_ROUTE?3?5data?5not?5loaded@ DB 'AI_ROUTE: data not '
	DB	'loaded', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KHCLBFEE@road_node_link_positions@
CONST	SEGMENT
??_C@_0BJ@KHCLBFEE@road_node_link_positions@ DB 'road_node_link_positions'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BLOGCFGI@road_node_positions@
CONST	SEGMENT
??_C@_0BE@BLOGCFGI@road_node_positions@ DB 'road_node_positions', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PCIJFDI@road_nodes@
CONST	SEGMENT
??_C@_0L@PCIJFDI@road_nodes@ DB 'road_nodes', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_road_link_data@@YGPAUNODE_LINK_DATA@@HH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_road_link_data@@YGPAUNODE_LINK_DATA@@HH@Z@4JA DD 0336H ; `get_road_link_data'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_03OANHPPMN@?4wp@
CONST	SEGMENT
??_C@_03OANHPPMN@?4wp@ DB '.wp', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??read_road_route_node_link_positions@@YGHPAD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??read_road_route_node_link_positions@@YGHPAD@Z@4JA DD 0284H ; `read_road_route_node_link_positions'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DD@KNHHHCBG@number_of_road_nodes?5?$DN?$DN?5total_n@
CONST	SEGMENT
??_C@_0DD@KNHHHCBG@number_of_road_nodes?5?$DN?$DN?5total_n@ DB 'number_of'
	DB	'_road_nodes == total_number_of_road_nodes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IFIEPJND@file_exist?5?$CIfilename?$CJ@
CONST	SEGMENT
??_C@_0BG@IFIEPJND@file_exist?5?$CIfilename?$CJ@ DB 'file_exist (filename'
	DB	')', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04MLIBOFKJ@?4nde@
CONST	SEGMENT
??_C@_04MLIBOFKJ@?4nde@ DB '.nde', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??read_road_route_node_positions@@YGHPAD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??read_road_route_node_positions@@YGHPAD@Z@4JA DD 0228H ; `read_road_route_node_positions'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KFLNJAID@?$CFs?2route?2?$CFs?$CFs@
CONST	SEGMENT
??_C@_0O@KFLNJAID@?$CFs?2route?2?$CFs?$CFs@ DB '%s\route\%s%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04PBCOOEDG@?4dat@
CONST	SEGMENT
??_C@_04PBCOOEDG@?4dat@ DB '.dat', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@EEKIOPJL@get_valid_current_game_session?5@
CONST	SEGMENT
??_C@_0CC@EEKIOPJL@get_valid_current_game_session?5@ DB 'get_valid_curren'
	DB	't_game_session ()', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??read_road_route_node_data@@YGHPAD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??read_road_route_node_data@@YGHPAD@Z@4JA DD 014cH ; `read_road_route_node_data'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_08MPFGFNKO@ROADDATA@
CONST	SEGMENT
??_C@_08MPFGFNKO@ROADDATA@ DB 'ROADDATA', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BAHFCMOL@ROADS@
CONST	SEGMENT
??_C@_05BAHFCMOL@ROADS@ DB 'ROADS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@ONICAEGO@road_node_link_positions?5?$FLloop?$FN@
CONST	SEGMENT
??_C@_0CP@ONICAEGO@road_node_link_positions?5?$FLloop?$FN@ DB 'road_node_'
	DB	'link_positions [loop].link_positions', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@FGDCJMLC@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EC@FGDCJMLC@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\ai\ai_misc\ai_route.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??deinitialise_road_route_data@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??deinitialise_road_route_data@@YGXXZ@4JA DD 0c2H ; `deinitialise_road_route_data'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\ai_misc\ai_route.c
;	COMDAT ?read_road_route_node_link_positions@@YGHPAD@Z
_TEXT	SEGMENT
tv237 = -1244						; size = 4
tv217 = -1244						; size = 4
tv238 = -1240						; size = 4
tv218 = -1240						; size = 4
_filename$ = -1044					; size = 1024
_new_link$ = -20					; size = 4
_count$ = -16						; size = 4
_loop$ = -12						; size = 4
_value$ = -8						; size = 4
_file_ptr$ = -4						; size = 4
_name$ = 8						; size = 4
?read_road_route_node_link_positions@@YGHPAD@Z PROC	; read_road_route_node_link_positions, COMDAT

; 644  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 04 00
	00		 sub	 esp, 1244		; 000004dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 645  : 
; 646  :    FILE
; 647  :       *file_ptr;
; 648  : 
; 649  :    int
; 650  : 		value,
; 651  : 		loop,
; 652  :       count;
; 653  : 
; 654  :    node_link_data
; 655  :       *new_link;
; 656  : 
; 657  : 	char
; 658  : 		filename [1024];
; 659  : 
; 660  : 	ASSERT (get_valid_current_game_session ());

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_game_session@@3PAUSESSION_LIST_DATA_TYPE@@A, 0 ; current_game_session
  00013	75 18		 jne	 SHORT $LN7@read_road_
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??read_road_route_node_link_positions@@YGHPAD@Z@4JA
  0001a	83 c0 10	 add	 eax, 16			; 00000010H
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@FGDCJMLC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@EEKIOPJL@get_valid_current_game_session?5@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@read_road_:

; 661  : 
; 662  : 	sprintf (filename, "%s\\route\\%s%s", current_game_session->data_path, name, ROUTE_NODE_LINK_POSITION_DATA_EXTENSION);

  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_03OANHPPMN@?4wp@
  00032	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00035	50		 push	 eax
  00036	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_game_session@@3PAUSESSION_LIST_DATA_TYPE@@A ; current_game_session
  0003c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0003f	51		 push	 ecx
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0O@KFLNJAID@?$CFs?2route?2?$CFs?$CFs@
  00045	8d 95 ec fb ff
	ff		 lea	 edx, DWORD PTR _filename$[ebp]
  0004b	52		 push	 edx
  0004c	e8 00 00 00 00	 call	 _sprintf
  00051	83 c4 14	 add	 esp, 20			; 00000014H

; 663  : 
; 664  : 	ASSERT (file_exist (filename));

  00054	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?file_exist@@YGHPBD@Z	; file_exist
  00060	85 c0		 test	 eax, eax
  00062	75 18		 jne	 SHORT $LN8@read_road_
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??read_road_route_node_link_positions@@YGHPAD@Z@4JA
  00069	83 c0 14	 add	 eax, 20			; 00000014H
  0006c	50		 push	 eax
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@FGDCJMLC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@IFIEPJND@file_exist?5?$CIfilename?$CJ@
  00077	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@read_road_:

; 665  : 
; 666  : 	file_ptr = safe_fopen (filename, "rb");

  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  00081	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  0008d	89 45 fc	 mov	 DWORD PTR _file_ptr$[ebp], eax

; 667  : 
; 668  : 	//
; 669  : 	// read in number of links
; 670  : 	//
; 671  : 
; 672  : 	safe_fread (&total_road_node_link_count, 4, 1, file_ptr);

  00090	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00093	50		 push	 eax
  00094	6a 01		 push	 1
  00096	6a 04		 push	 4
  00098	68 00 00 00 00	 push	 OFFSET ?total_road_node_link_count@@3HA ; total_road_node_link_count
  0009d	e8 00 00 00 00	 call	 ?safe_fread@@YGXPAXHHPAU_iobuf@@@Z ; safe_fread

; 673  : 
; 674  : 	if (total_road_node_link_count == 0)

  000a2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?total_road_node_link_count@@3HA, 0 ; total_road_node_link_count
  000a9	75 14		 jne	 SHORT $LN9@read_road_

; 675  : 	{
; 676  : 
; 677  : 		fclose (file_ptr);

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  000ae	50		 push	 eax
  000af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  000b5	83 c4 04	 add	 esp, 4

; 678  : 
; 679  : 		return FALSE;

  000b8	33 c0		 xor	 eax, eax
  000ba	e9 e6 02 00 00	 jmp	 $LN1@read_road_
$LN9@read_road_:

; 680  : 	}
; 681  : 
; 682  : 	road_node_link_positions = (node_link_data *) malloc_heap_mem (sizeof (node_link_data) * total_road_node_link_count);

  000bf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?total_road_node_link_count@@3HA ; total_road_node_link_count
  000c4	c1 e0 04	 shl	 eax, 4
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  000cd	a3 00 00 00 00	 mov	 DWORD PTR ?road_node_link_positions@@3PAUNODE_LINK_DATA@@A, eax ; road_node_link_positions

; 683  : 
; 684  : 	memset (road_node_link_positions, 0, sizeof (node_link_data) * total_road_node_link_count);

  000d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?total_road_node_link_count@@3HA ; total_road_node_link_count
  000d7	c1 e0 04	 shl	 eax, 4
  000da	50		 push	 eax
  000db	6a 00		 push	 0
  000dd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_node_link_positions@@3PAUNODE_LINK_DATA@@A ; road_node_link_positions
  000e3	51		 push	 ecx
  000e4	e8 00 00 00 00	 call	 _memset
  000e9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 685  : 
; 686  : 	#if AI_DEBUG
; 687  : 
; 688  : 	ai_memory_counter ++;
; 689  : 
; 690  : 	#endif
; 691  : 
; 692  : 	new_link = road_node_link_positions;

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?road_node_link_positions@@3PAUNODE_LINK_DATA@@A ; road_node_link_positions
  000f1	89 45 ec	 mov	 DWORD PTR _new_link$[ebp], eax

; 693  : 
; 694  : 	count = total_road_node_link_count;

  000f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?total_road_node_link_count@@3HA ; total_road_node_link_count
  000f9	89 45 f0	 mov	 DWORD PTR _count$[ebp], eax
$LN2@read_road_:

; 695  : 
; 696  : 	#if AI_DEBUG
; 697  : 
; 698  : 	debug_log ("ROUTE: node link count %d", total_road_node_link_count);
; 699  : 
; 700  : 	#endif
; 701  : 
; 702  : 	while (count)

  000fc	83 7d f0 00	 cmp	 DWORD PTR _count$[ebp], 0
  00100	0f 84 83 02 00
	00		 je	 $LN3@read_road_

; 703  : 	{
; 704  : 
; 705  : 		safe_fread (&value, 4, 1, file_ptr);

  00106	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00109	50		 push	 eax
  0010a	6a 01		 push	 1
  0010c	6a 04		 push	 4
  0010e	8d 4d f8	 lea	 ecx, DWORD PTR _value$[ebp]
  00111	51		 push	 ecx
  00112	e8 00 00 00 00	 call	 ?safe_fread@@YGXPAXHHPAU_iobuf@@@Z ; safe_fread

; 706  : 		new_link->source = value;

  00117	8b 45 ec	 mov	 eax, DWORD PTR _new_link$[ebp]
  0011a	66 8b 4d f8	 mov	 cx, WORD PTR _value$[ebp]
  0011e	66 89 08	 mov	 WORD PTR [eax], cx

; 707  : 			
; 708  : 		safe_fread (&value, 4, 1, file_ptr);

  00121	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00124	50		 push	 eax
  00125	6a 01		 push	 1
  00127	6a 04		 push	 4
  00129	8d 4d f8	 lea	 ecx, DWORD PTR _value$[ebp]
  0012c	51		 push	 ecx
  0012d	e8 00 00 00 00	 call	 ?safe_fread@@YGXPAXHHPAU_iobuf@@@Z ; safe_fread

; 709  : 		new_link->destination = value;

  00132	8b 45 ec	 mov	 eax, DWORD PTR _new_link$[ebp]
  00135	66 8b 4d f8	 mov	 cx, WORD PTR _value$[ebp]
  00139	66 89 48 02	 mov	 WORD PTR [eax+2], cx

; 710  : 
; 711  : 		safe_fread (&value, 4, 1, file_ptr);

  0013d	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00140	50		 push	 eax
  00141	6a 01		 push	 1
  00143	6a 04		 push	 4
  00145	8d 4d f8	 lea	 ecx, DWORD PTR _value$[ebp]
  00148	51		 push	 ecx
  00149	e8 00 00 00 00	 call	 ?safe_fread@@YGXPAXHHPAU_iobuf@@@Z ; safe_fread

; 712  : 		new_link->path_type = value;

  0014e	8b 45 ec	 mov	 eax, DWORD PTR _new_link$[ebp]
  00151	66 8b 4d f8	 mov	 cx, WORD PTR _value$[ebp]
  00155	66 89 48 04	 mov	 WORD PTR [eax+4], cx

; 713  : 
; 714  : 		safe_fread (&value, 4, 1, file_ptr);

  00159	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  0015c	50		 push	 eax
  0015d	6a 01		 push	 1
  0015f	6a 04		 push	 4
  00161	8d 4d f8	 lea	 ecx, DWORD PTR _value$[ebp]
  00164	51		 push	 ecx
  00165	e8 00 00 00 00	 call	 ?safe_fread@@YGXPAXHHPAU_iobuf@@@Z ; safe_fread

; 715  : 		new_link->number_of_links = value;

  0016a	8b 45 ec	 mov	 eax, DWORD PTR _new_link$[ebp]
  0016d	66 8b 4d f8	 mov	 cx, WORD PTR _value$[ebp]
  00171	66 89 48 06	 mov	 WORD PTR [eax+6], cx

; 716  : 
; 717  : 		if (new_link->number_of_links > 0)

  00175	8b 45 ec	 mov	 eax, DWORD PTR _new_link$[ebp]
  00178	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0017c	85 c9		 test	 ecx, ecx
  0017e	0f 8e b3 00 00
	00		 jle	 $LN10@read_road_

; 718  : 		{
; 719  : 
; 720  : 			new_link->link_positions = (vec3d *) malloc_heap_mem (sizeof (vec3d) * (new_link->number_of_links + 2));

  00184	8b 45 ec	 mov	 eax, DWORD PTR _new_link$[ebp]
  00187	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0018b	83 c1 02	 add	 ecx, 2
  0018e	6b d1 0c	 imul	 edx, ecx, 12
  00191	52		 push	 edx
  00192	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  00197	8b 4d ec	 mov	 ecx, DWORD PTR _new_link$[ebp]
  0019a	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 721  : 	
; 722  : 			#if AI_DEBUG
; 723  : 		
; 724  : 			ai_memory_counter ++;
; 725  : 		
; 726  : 			#endif
; 727  : 	
; 728  : 			safe_fread (&new_link->link_positions [1], sizeof (vec3d) * new_link->number_of_links, 1, file_ptr);

  0019d	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  001a0	50		 push	 eax
  001a1	6a 01		 push	 1
  001a3	8b 4d ec	 mov	 ecx, DWORD PTR _new_link$[ebp]
  001a6	0f b7 51 06	 movzx	 edx, WORD PTR [ecx+6]
  001aa	6b c2 0c	 imul	 eax, edx, 12
  001ad	50		 push	 eax
  001ae	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  001b3	c1 e1 00	 shl	 ecx, 0
  001b6	8b 55 ec	 mov	 edx, DWORD PTR _new_link$[ebp]
  001b9	03 4a 0c	 add	 ecx, DWORD PTR [edx+12]
  001bc	51		 push	 ecx
  001bd	e8 00 00 00 00	 call	 ?safe_fread@@YGXPAXHHPAU_iobuf@@@Z ; safe_fread

; 729  : 
; 730  : 			new_link->link_positions [0] = road_node_positions [new_link->source];

  001c2	8b 45 ec	 mov	 eax, DWORD PTR _new_link$[ebp]
  001c5	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  001c8	6b d1 0c	 imul	 edx, ecx, 12
  001cb	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?road_node_positions@@3PAUVEC3D@@A ; road_node_positions
  001d1	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001d6	6b c8 00	 imul	 ecx, eax, 0
  001d9	8b 45 ec	 mov	 eax, DWORD PTR _new_link$[ebp]
  001dc	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  001df	03 c1		 add	 eax, ecx
  001e1	8b 0a		 mov	 ecx, DWORD PTR [edx]
  001e3	89 08		 mov	 DWORD PTR [eax], ecx
  001e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001e8	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  001eb	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  001ee	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 731  : 			new_link->link_positions [new_link->number_of_links + 1] = road_node_positions [new_link->destination];

  001f1	8b 45 ec	 mov	 eax, DWORD PTR _new_link$[ebp]
  001f4	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  001f8	6b d1 0c	 imul	 edx, ecx, 12
  001fb	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?road_node_positions@@3PAUVEC3D@@A ; road_node_positions
  00201	8b 45 ec	 mov	 eax, DWORD PTR _new_link$[ebp]
  00204	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00208	83 c1 01	 add	 ecx, 1
  0020b	6b c1 0c	 imul	 eax, ecx, 12
  0020e	8b 4d ec	 mov	 ecx, DWORD PTR _new_link$[ebp]
  00211	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00214	03 c8		 add	 ecx, eax
  00216	8b 02		 mov	 eax, DWORD PTR [edx]
  00218	89 01		 mov	 DWORD PTR [ecx], eax
  0021a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0021d	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00220	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  00223	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 732  : 
; 733  : 			new_link->number_of_links += 2;

  00226	8b 45 ec	 mov	 eax, DWORD PTR _new_link$[ebp]
  00229	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0022d	83 c1 02	 add	 ecx, 2
  00230	8b 55 ec	 mov	 edx, DWORD PTR _new_link$[ebp]
  00233	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
$LN10@read_road_:

; 734  : 		}
; 735  : 
; 736  : 		//
; 737  : 		// Safeguard to keep link road road_nodes on map
; 738  : 		//
; 739  : 
; 740  : 		for (loop = 0; loop < new_link->number_of_links; loop ++)

  00237	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  0023e	eb 09		 jmp	 SHORT $LN6@read_road_
$LN4@read_road_:
  00240	8b 45 f4	 mov	 eax, DWORD PTR _loop$[ebp]
  00243	83 c0 01	 add	 eax, 1
  00246	89 45 f4	 mov	 DWORD PTR _loop$[ebp], eax
$LN6@read_road_:
  00249	8b 45 ec	 mov	 eax, DWORD PTR _new_link$[ebp]
  0024c	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00250	39 4d f4	 cmp	 DWORD PTR _loop$[ebp], ecx
  00253	0f 8d 19 01 00
	00		 jge	 $LN5@read_road_

; 741  : 		{
; 742  : 
; 743  : 			new_link->link_positions [loop].x = bound (new_link->link_positions [loop].x, 0, MAX_MAP_X);

  00259	6b 45 f4 0c	 imul	 eax, DWORD PTR _loop$[ebp], 12
  0025d	8b 4d ec	 mov	 ecx, DWORD PTR _new_link$[ebp]
  00260	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00263	0f 57 c0	 xorps	 xmm0, xmm0
  00266	0f 2f 04 02	 comiss	 xmm0, DWORD PTR [edx+eax]
  0026a	76 0d		 jbe	 SHORT $LN14@read_road_
  0026c	0f 57 c0	 xorps	 xmm0, xmm0
  0026f	f3 0f 11 85 28
	fb ff ff	 movss	 DWORD PTR tv218[ebp], xmm0
  00277	eb 51		 jmp	 SHORT $LN15@read_road_
$LN14@read_road_:
  00279	6b 45 f4 0c	 imul	 eax, DWORD PTR _loop$[ebp], 12
  0027d	8b 4d ec	 mov	 ecx, DWORD PTR _new_link$[ebp]
  00280	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00283	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00288	0f 2f 05 3c 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+60
  0028f	76 12		 jbe	 SHORT $LN12@read_road_
  00291	f3 0f 10 05 3c
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+60
  00299	f3 0f 11 85 24
	fb ff ff	 movss	 DWORD PTR tv217[ebp], xmm0
  002a1	eb 17		 jmp	 SHORT $LN13@read_road_
$LN12@read_road_:
  002a3	6b 45 f4 0c	 imul	 eax, DWORD PTR _loop$[ebp], 12
  002a7	8b 4d ec	 mov	 ecx, DWORD PTR _new_link$[ebp]
  002aa	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  002ad	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  002b2	f3 0f 11 85 24
	fb ff ff	 movss	 DWORD PTR tv217[ebp], xmm0
$LN13@read_road_:
  002ba	f3 0f 10 85 24
	fb ff ff	 movss	 xmm0, DWORD PTR tv217[ebp]
  002c2	f3 0f 11 85 28
	fb ff ff	 movss	 DWORD PTR tv218[ebp], xmm0
$LN15@read_road_:
  002ca	6b 45 f4 0c	 imul	 eax, DWORD PTR _loop$[ebp], 12
  002ce	8b 4d ec	 mov	 ecx, DWORD PTR _new_link$[ebp]
  002d1	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  002d4	f3 0f 10 85 28
	fb ff ff	 movss	 xmm0, DWORD PTR tv218[ebp]
  002dc	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0

; 744  : 
; 745  : 			new_link->link_positions [loop].z = bound (new_link->link_positions [loop].z, 0, MAX_MAP_Z);

  002e1	6b 45 f4 0c	 imul	 eax, DWORD PTR _loop$[ebp], 12
  002e5	8b 4d ec	 mov	 ecx, DWORD PTR _new_link$[ebp]
  002e8	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  002eb	0f 57 c0	 xorps	 xmm0, xmm0
  002ee	0f 2f 44 02 08	 comiss	 xmm0, DWORD PTR [edx+eax+8]
  002f3	76 0d		 jbe	 SHORT $LN18@read_road_
  002f5	0f 57 c0	 xorps	 xmm0, xmm0
  002f8	f3 0f 11 85 28
	fb ff ff	 movss	 DWORD PTR tv238[ebp], xmm0
  00300	eb 53		 jmp	 SHORT $LN19@read_road_
$LN18@read_road_:
  00302	6b 45 f4 0c	 imul	 eax, DWORD PTR _loop$[ebp], 12
  00306	8b 4d ec	 mov	 ecx, DWORD PTR _new_link$[ebp]
  00309	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0030c	f3 0f 10 44 02
	08		 movss	 xmm0, DWORD PTR [edx+eax+8]
  00312	0f 2f 05 44 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+68
  00319	76 12		 jbe	 SHORT $LN16@read_road_
  0031b	f3 0f 10 05 44
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+68
  00323	f3 0f 11 85 24
	fb ff ff	 movss	 DWORD PTR tv237[ebp], xmm0
  0032b	eb 18		 jmp	 SHORT $LN17@read_road_
$LN16@read_road_:
  0032d	6b 45 f4 0c	 imul	 eax, DWORD PTR _loop$[ebp], 12
  00331	8b 4d ec	 mov	 ecx, DWORD PTR _new_link$[ebp]
  00334	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00337	f3 0f 10 44 02
	08		 movss	 xmm0, DWORD PTR [edx+eax+8]
  0033d	f3 0f 11 85 24
	fb ff ff	 movss	 DWORD PTR tv237[ebp], xmm0
$LN17@read_road_:
  00345	f3 0f 10 85 24
	fb ff ff	 movss	 xmm0, DWORD PTR tv237[ebp]
  0034d	f3 0f 11 85 28
	fb ff ff	 movss	 DWORD PTR tv238[ebp], xmm0
$LN19@read_road_:
  00355	6b 45 f4 0c	 imul	 eax, DWORD PTR _loop$[ebp], 12
  00359	8b 4d ec	 mov	 ecx, DWORD PTR _new_link$[ebp]
  0035c	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0035f	f3 0f 10 85 28
	fb ff ff	 movss	 xmm0, DWORD PTR tv238[ebp]
  00367	f3 0f 11 44 02
	08		 movss	 DWORD PTR [edx+eax+8], xmm0

; 746  : 
; 747  : 			#if CHECK_ROUTE_NODE_HEIGHT
; 748  : 			{
; 749  : 				float
; 750  : 					terrain_elevation;
; 751  : 
; 752  : 				terrain_elevation = get_3d_terrain_elevation (new_link->link_positions [loop].x, new_link->link_positions [loop].z);
; 753  : 	
; 754  : 				if (terrain_elevation > new_link->link_positions [loop].y)
; 755  : 				{
; 756  : 	
; 757  : 					debug_log ("AI_ROUTE: warning, between node %d and %d (sub_node %d) below terrain", new_link->source, new_link->destination, loop);
; 758  : 				}
; 759  : 				else if (terrain_elevation < new_link->link_positions [loop].y)
; 760  : 				{
; 761  : 	
; 762  : 					debug_log ("AI_ROUTE: warning, between node %d and %d (sub_node %d) above terrain", new_link->source, new_link->destination, loop);
; 763  : 				}
; 764  : 			}
; 765  : 			#endif
; 766  : 		}

  0036d	e9 ce fe ff ff	 jmp	 $LN4@read_road_
$LN5@read_road_:

; 767  : 
; 768  : 		new_link ++;

  00372	8b 45 ec	 mov	 eax, DWORD PTR _new_link$[ebp]
  00375	83 c0 10	 add	 eax, 16			; 00000010H
  00378	89 45 ec	 mov	 DWORD PTR _new_link$[ebp], eax

; 769  : 
; 770  : 		count --;

  0037b	8b 45 f0	 mov	 eax, DWORD PTR _count$[ebp]
  0037e	83 e8 01	 sub	 eax, 1
  00381	89 45 f0	 mov	 DWORD PTR _count$[ebp], eax

; 771  : 	}

  00384	e9 73 fd ff ff	 jmp	 $LN2@read_road_
$LN3@read_road_:

; 772  : 
; 773  : 	fclose (file_ptr);

  00389	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  0038c	50		 push	 eax
  0038d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  00393	83 c4 04	 add	 esp, 4

; 774  : 
; 775  : 	road_nodes_loaded = TRUE;

  00396	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?road_nodes_loaded@@3HA, 1 ; road_nodes_loaded

; 776  : 
; 777  : 	return TRUE;

  003a0	b8 01 00 00 00	 mov	 eax, 1
$LN1@read_road_:

; 778  : }

  003a5	5f		 pop	 edi
  003a6	5e		 pop	 esi
  003a7	5b		 pop	 ebx
  003a8	8b e5		 mov	 esp, ebp
  003aa	5d		 pop	 ebp
  003ab	c2 04 00	 ret	 4
?read_road_route_node_link_positions@@YGHPAD@Z ENDP	; read_road_route_node_link_positions
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\ai_misc\ai_route.c
;	COMDAT ?read_road_route_node_positions@@YGHPAD@Z
_TEXT	SEGMENT
_filename$ = -1032					; size = 1024
_number_of_road_nodes$ = -8				; size = 4
_file_ptr$ = -4						; size = 4
_name$ = 8						; size = 4
?read_road_route_node_positions@@YGHPAD@Z PROC		; read_road_route_node_positions, COMDAT

; 552  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 04 00
	00		 sub	 esp, 1224		; 000004c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 553  : 
; 554  :    FILE
; 555  :       *file_ptr;
; 556  : 
; 557  :    int
; 558  :       number_of_road_nodes;
; 559  : 
; 560  : 	char
; 561  : 		filename [1024];
; 562  : 
; 563  : 	ASSERT (get_valid_current_game_session ());

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_game_session@@3PAUSESSION_LIST_DATA_TYPE@@A, 0 ; current_game_session
  00013	75 18		 jne	 SHORT $LN2@read_road_
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??read_road_route_node_positions@@YGHPAD@Z@4JA
  0001a	83 c0 0b	 add	 eax, 11			; 0000000bH
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@FGDCJMLC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@EEKIOPJL@get_valid_current_game_session?5@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@read_road_:

; 564  : 
; 565  : 	sprintf (filename, "%s\\route\\%s%s", current_game_session->data_path, name, ROUTE_NODE_POSITIONS_EXTENSION);

  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_04MLIBOFKJ@?4nde@
  00032	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00035	50		 push	 eax
  00036	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_game_session@@3PAUSESSION_LIST_DATA_TYPE@@A ; current_game_session
  0003c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0003f	51		 push	 ecx
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0O@KFLNJAID@?$CFs?2route?2?$CFs?$CFs@
  00045	8d 95 f8 fb ff
	ff		 lea	 edx, DWORD PTR _filename$[ebp]
  0004b	52		 push	 edx
  0004c	e8 00 00 00 00	 call	 _sprintf
  00051	83 c4 14	 add	 esp, 20			; 00000014H

; 566  : 
; 567  : 	ASSERT (file_exist (filename));

  00054	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?file_exist@@YGHPBD@Z	; file_exist
  00060	85 c0		 test	 eax, eax
  00062	75 18		 jne	 SHORT $LN3@read_road_
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??read_road_route_node_positions@@YGHPAD@Z@4JA
  00069	83 c0 0f	 add	 eax, 15			; 0000000fH
  0006c	50		 push	 eax
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@FGDCJMLC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@IFIEPJND@file_exist?5?$CIfilename?$CJ@
  00077	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@read_road_:

; 568  : 
; 569  : 	file_ptr = safe_fopen (filename, "rb");

  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  00081	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  0008d	89 45 fc	 mov	 DWORD PTR _file_ptr$[ebp], eax

; 570  : 
; 571  : 	safe_fread (&number_of_road_nodes, 4, 1, file_ptr);

  00090	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00093	50		 push	 eax
  00094	6a 01		 push	 1
  00096	6a 04		 push	 4
  00098	8d 4d f8	 lea	 ecx, DWORD PTR _number_of_road_nodes$[ebp]
  0009b	51		 push	 ecx
  0009c	e8 00 00 00 00	 call	 ?safe_fread@@YGXPAXHHPAU_iobuf@@@Z ; safe_fread

; 572  : 
; 573  : 	ASSERT (number_of_road_nodes == total_number_of_road_nodes);

  000a1	8b 45 f8	 mov	 eax, DWORD PTR _number_of_road_nodes$[ebp]
  000a4	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?total_number_of_road_nodes@@3HA ; total_number_of_road_nodes
  000aa	74 18		 je	 SHORT $LN4@read_road_
  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??read_road_route_node_positions@@YGHPAD@Z@4JA
  000b1	83 c0 15	 add	 eax, 21			; 00000015H
  000b4	50		 push	 eax
  000b5	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@FGDCJMLC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@KNHHHCBG@number_of_road_nodes?5?$DN?$DN?5total_n@
  000bf	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@read_road_:

; 574  : 
; 575  : 	if (number_of_road_nodes == 0)

  000c4	83 7d f8 00	 cmp	 DWORD PTR _number_of_road_nodes$[ebp], 0
  000c8	75 11		 jne	 SHORT $LN5@read_road_

; 576  : 	{
; 577  : 
; 578  : 		fclose (file_ptr);

  000ca	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  000cd	50		 push	 eax
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  000d4	83 c4 04	 add	 esp, 4

; 579  : 
; 580  : 		return FALSE;

  000d7	33 c0		 xor	 eax, eax
  000d9	eb 4e		 jmp	 SHORT $LN1@read_road_
$LN5@read_road_:

; 581  : 	}
; 582  : 
; 583  : 	road_node_positions = (vec3d *) malloc_heap_mem (sizeof (vec3d) * number_of_road_nodes);

  000db	6b 45 f8 0c	 imul	 eax, DWORD PTR _number_of_road_nodes$[ebp], 12
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  000e5	a3 00 00 00 00	 mov	 DWORD PTR ?road_node_positions@@3PAUVEC3D@@A, eax ; road_node_positions

; 584  : 
; 585  : 	memset (road_node_positions, 0, sizeof (vec3d) * number_of_road_nodes);

  000ea	6b 45 f8 0c	 imul	 eax, DWORD PTR _number_of_road_nodes$[ebp], 12
  000ee	50		 push	 eax
  000ef	6a 00		 push	 0
  000f1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_node_positions@@3PAUVEC3D@@A ; road_node_positions
  000f7	51		 push	 ecx
  000f8	e8 00 00 00 00	 call	 _memset
  000fd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 586  : 
; 587  : 	#if AI_DEBUG
; 588  : 
; 589  : 	ai_memory_counter ++;
; 590  : 
; 591  : 	#endif
; 592  : 
; 593  : 	safe_fread (road_node_positions, sizeof (vec3d) * number_of_road_nodes, 1, file_ptr);

  00100	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00103	50		 push	 eax
  00104	6a 01		 push	 1
  00106	6b 4d f8 0c	 imul	 ecx, DWORD PTR _number_of_road_nodes$[ebp], 12
  0010a	51		 push	 ecx
  0010b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?road_node_positions@@3PAUVEC3D@@A ; road_node_positions
  00111	52		 push	 edx
  00112	e8 00 00 00 00	 call	 ?safe_fread@@YGXPAXHHPAU_iobuf@@@Z ; safe_fread

; 594  : 
; 595  : 	fclose (file_ptr);

  00117	8b 45 fc	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  0011a	50		 push	 eax
  0011b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  00121	83 c4 04	 add	 esp, 4

; 596  : 
; 597  : 	#if CHECK_ROUTE_NODE_HEIGHT
; 598  : 	{
; 599  : 
; 600  : 		int
; 601  : 			loop;
; 602  : 
; 603  : 		float
; 604  : 			terrain_elevation;
; 605  : 
; 606  : 		for (loop = 0; loop < number_of_road_nodes; loop ++)
; 607  : 		{
; 608  : 
; 609  : 			terrain_elevation = get_3d_terrain_elevation (road_node_positions [loop].x, road_node_positions [loop].z);
; 610  : 
; 611  : 			if (terrain_elevation > road_node_positions [loop].y)
; 612  : 			{
; 613  : 
; 614  : 				debug_log ("AI_ROUTE: warning, road node %d below terrain", loop);
; 615  : 			}
; 616  : 			else if (terrain_elevation < road_node_positions [loop].y)
; 617  : 			{
; 618  : 
; 619  : 				debug_log ("AI_ROUTE: warning, road node %d above terrain", loop);
; 620  : 			}
; 621  : 
; 622  : 			road_node_positions [loop].y = terrain_elevation;
; 623  : 		}
; 624  : 	}
; 625  : 	#endif
; 626  : 
; 627  : 	return TRUE;

  00124	b8 01 00 00 00	 mov	 eax, 1
$LN1@read_road_:

; 628  : }

  00129	5f		 pop	 edi
  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx
  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 04 00	 ret	 4
?read_road_route_node_positions@@YGHPAD@Z ENDP		; read_road_route_node_positions
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\ai_misc\ai_route.c
;	COMDAT ?read_road_route_node_data@@YGHPAD@Z
_TEXT	SEGMENT
_filename$ = -1048					; size = 1024
_new_node$ = -24					; size = 4
_number_of_road_nodes$ = -20				; size = 4
_file_ptr$ = -16					; size = 4
_fvalue$ = -12						; size = 4
_value$ = -8						; size = 4
_loop$ = -4						; size = 4
_name$ = 8						; size = 4
?read_road_route_node_data@@YGHPAD@Z PROC		; read_road_route_node_data, COMDAT

; 332  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 04 00
	00		 sub	 esp, 1240		; 000004d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 333  : 
; 334  : 	unsigned int
; 335  : 		loop;
; 336  : 
; 337  : 	int
; 338  : 		value;
; 339  : 
; 340  : 	float
; 341  : 		fvalue;
; 342  : 
; 343  :    FILE
; 344  :       *file_ptr;
; 345  : 
; 346  :    int
; 347  :       number_of_road_nodes;
; 348  : 
; 349  :    node_data
; 350  :       *new_node;
; 351  : 
; 352  : 	char
; 353  : 		filename [1024];
; 354  : 
; 355  : 	ASSERT (get_valid_current_game_session ());

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_game_session@@3PAUSESSION_LIST_DATA_TYPE@@A, 0 ; current_game_session
  00013	75 18		 jne	 SHORT $LN7@read_road_
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??read_road_route_node_data@@YGHPAD@Z@4JA
  0001a	83 c0 17	 add	 eax, 23			; 00000017H
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@FGDCJMLC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@EEKIOPJL@get_valid_current_game_session?5@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@read_road_:

; 356  : 
; 357  : 	sprintf (filename, "%s\\route\\%s%s", current_game_session->data_path, name, ROUTE_NODE_DATA_EXTENSION);

  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_04PBCOOEDG@?4dat@
  00032	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00035	50		 push	 eax
  00036	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_game_session@@3PAUSESSION_LIST_DATA_TYPE@@A ; current_game_session
  0003c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0003f	51		 push	 ecx
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0O@KFLNJAID@?$CFs?2route?2?$CFs?$CFs@
  00045	8d 95 e8 fb ff
	ff		 lea	 edx, DWORD PTR _filename$[ebp]
  0004b	52		 push	 edx
  0004c	e8 00 00 00 00	 call	 _sprintf
  00051	83 c4 14	 add	 esp, 20			; 00000014H

; 358  : 
; 359  : 	if (file_exist (filename))

  00054	8d 85 e8 fb ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?file_exist@@YGHPBD@Z	; file_exist
  00060	85 c0		 test	 eax, eax
  00062	0f 84 58 02 00
	00		 je	 $LN8@read_road_

; 360  : 	{
; 361  : 	
; 362  : 		file_ptr = safe_fopen (filename, "rb");

  00068	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  0006d	8d 85 e8 fb ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  00079	89 45 f0	 mov	 DWORD PTR _file_ptr$[ebp], eax

; 363  : 	
; 364  : 		duplicate_count = 0;

  0007c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?duplicate_count@@3HA, 0 ; duplicate_count

; 365  : 	
; 366  : 		//
; 367  : 		// malloc array of number of road_nodes
; 368  : 		//
; 369  : 
; 370  : 		// read map sizes
; 371  : 		safe_fread (&fvalue, 4, 1, file_ptr);

  00086	8b 45 f0	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00089	50		 push	 eax
  0008a	6a 01		 push	 1
  0008c	6a 04		 push	 4
  0008e	8d 4d f4	 lea	 ecx, DWORD PTR _fvalue$[ebp]
  00091	51		 push	 ecx
  00092	e8 00 00 00 00	 call	 ?safe_fread@@YGXPAXHHPAU_iobuf@@@Z ; safe_fread

; 372  : 		safe_fread (&fvalue, 4, 1, file_ptr);

  00097	8b 45 f0	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  0009a	50		 push	 eax
  0009b	6a 01		 push	 1
  0009d	6a 04		 push	 4
  0009f	8d 4d f4	 lea	 ecx, DWORD PTR _fvalue$[ebp]
  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 ?safe_fread@@YGXPAXHHPAU_iobuf@@@Z ; safe_fread

; 373  : 
; 374  : 		safe_fread (&total_number_of_road_nodes, 4, 1, file_ptr);

  000a8	8b 45 f0	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  000ab	50		 push	 eax
  000ac	6a 01		 push	 1
  000ae	6a 04		 push	 4
  000b0	68 00 00 00 00	 push	 OFFSET ?total_number_of_road_nodes@@3HA ; total_number_of_road_nodes
  000b5	e8 00 00 00 00	 call	 ?safe_fread@@YGXPAXHHPAU_iobuf@@@Z ; safe_fread

; 375  : 
; 376  : 		number_of_road_nodes = total_number_of_road_nodes;

  000ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?total_number_of_road_nodes@@3HA ; total_number_of_road_nodes
  000bf	89 45 ec	 mov	 DWORD PTR _number_of_road_nodes$[ebp], eax

; 377  : 
; 378  : 		if (number_of_road_nodes == 0)

  000c2	83 7d ec 00	 cmp	 DWORD PTR _number_of_road_nodes$[ebp], 0
  000c6	75 14		 jne	 SHORT $LN9@read_road_

; 379  : 		{
; 380  : 
; 381  : 			fclose (file_ptr);

  000c8	8b 45 f0	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  000cb	50		 push	 eax
  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  000d2	83 c4 04	 add	 esp, 4

; 382  : 
; 383  : 			return FALSE;

  000d5	33 c0		 xor	 eax, eax
  000d7	e9 e6 01 00 00	 jmp	 $LN1@read_road_
$LN9@read_road_:

; 384  : 		}
; 385  : 
; 386  : 		road_nodes = (node_data *) malloc_heap_mem (sizeof (node_data) * number_of_road_nodes);

  000dc	6b 45 ec 0c	 imul	 eax, DWORD PTR _number_of_road_nodes$[ebp], 12
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  000e6	a3 00 00 00 00	 mov	 DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A, eax ; road_nodes

; 387  : 
; 388  : 		memset (road_nodes, 0, sizeof (node_data) * number_of_road_nodes);

  000eb	6b 45 ec 0c	 imul	 eax, DWORD PTR _number_of_road_nodes$[ebp], 12
  000ef	50		 push	 eax
  000f0	6a 00		 push	 0
  000f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A ; road_nodes
  000f8	51		 push	 ecx
  000f9	e8 00 00 00 00	 call	 _memset
  000fe	83 c4 0c	 add	 esp, 12			; 0000000cH

; 389  : 
; 390  : 		#if AI_DEBUG
; 391  : 	
; 392  : 		ai_memory_counter ++;
; 393  : 	
; 394  : 		#endif
; 395  : 
; 396  : 		new_node = road_nodes;

  00101	a1 00 00 00 00	 mov	 eax, DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A ; road_nodes
  00106	89 45 e8	 mov	 DWORD PTR _new_node$[ebp], eax

; 397  : 
; 398  : 		total_road_node_link_count = 0;

  00109	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?total_road_node_link_count@@3HA, 0 ; total_road_node_link_count
$LN2@read_road_:

; 399  : 
; 400  : 		while (number_of_road_nodes)

  00113	83 7d ec 00	 cmp	 DWORD PTR _number_of_road_nodes$[ebp], 0
  00117	0f 84 8f 01 00
	00		 je	 $LN3@read_road_

; 401  : 		{
; 402  : 
; 403  : 			safe_fread (&value, 4, 1, file_ptr);

  0011d	8b 45 f0	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00120	50		 push	 eax
  00121	6a 01		 push	 1
  00123	6a 04		 push	 4
  00125	8d 4d f8	 lea	 ecx, DWORD PTR _value$[ebp]
  00128	51		 push	 ecx
  00129	e8 00 00 00 00	 call	 ?safe_fread@@YGXPAXHHPAU_iobuf@@@Z ; safe_fread

; 404  : 			new_node->node = value;

  0012e	8b 45 f8	 mov	 eax, DWORD PTR _value$[ebp]
  00131	25 ff 3f 00 00	 and	 eax, 16383		; 00003fffH
  00136	8b 4d e8	 mov	 ecx, DWORD PTR _new_node$[ebp]
  00139	8b 11		 mov	 edx, DWORD PTR [ecx]
  0013b	81 e2 00 c0 ff
	ff		 and	 edx, -16384		; ffffc000H
  00141	0b d0		 or	 edx, eax
  00143	8b 45 e8	 mov	 eax, DWORD PTR _new_node$[ebp]
  00146	89 10		 mov	 DWORD PTR [eax], edx

; 405  : 
; 406  : 			#if SAFE_RADIUS
; 407  : 				
; 408  : 			safe_fread (&value, 4, 1, file_ptr);

  00148	8b 45 f0	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  0014b	50		 push	 eax
  0014c	6a 01		 push	 1
  0014e	6a 04		 push	 4
  00150	8d 4d f8	 lea	 ecx, DWORD PTR _value$[ebp]
  00153	51		 push	 ecx
  00154	e8 00 00 00 00	 call	 ?safe_fread@@YGXPAXHHPAU_iobuf@@@Z ; safe_fread

; 409  : //			new_node->safe_radius = value;
; 410  : 
; 411  : 			#endif
; 412  : 
; 413  : 			// override - DL
; 414  : 			new_node->safe_radius = 28;

  00159	8b 45 e8	 mov	 eax, DWORD PTR _new_node$[ebp]
  0015c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015e	81 e1 ff 3f 00
	f0		 and	 ecx, -268419073		; f0003fffH
  00164	81 c9 00 00 07
	00		 or	 ecx, 458752		; 00070000H
  0016a	8b 55 e8	 mov	 edx, DWORD PTR _new_node$[ebp]
  0016d	89 0a		 mov	 DWORD PTR [edx], ecx

; 415  : 				
; 416  : 			safe_fread (&value, 4, 1, file_ptr);

  0016f	8b 45 f0	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00172	50		 push	 eax
  00173	6a 01		 push	 1
  00175	6a 04		 push	 4
  00177	8d 4d f8	 lea	 ecx, DWORD PTR _value$[ebp]
  0017a	51		 push	 ecx
  0017b	e8 00 00 00 00	 call	 ?safe_fread@@YGXPAXHHPAU_iobuf@@@Z ; safe_fread

; 417  : 			new_node->number_of_links = value;

  00180	8b 45 f8	 mov	 eax, DWORD PTR _value$[ebp]
  00183	83 e0 7f	 and	 eax, 127		; 0000007fH
  00186	8b 4d e8	 mov	 ecx, DWORD PTR _new_node$[ebp]
  00189	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0018c	83 e2 80	 and	 edx, -128		; ffffff80H
  0018f	0b d0		 or	 edx, eax
  00191	8b 45 e8	 mov	 eax, DWORD PTR _new_node$[ebp]
  00194	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 418  : 
; 419  : 			new_node->visited = MAX_ROUTE_LENGTH;

  00197	8b 45 e8	 mov	 eax, DWORD PTR _new_node$[ebp]
  0019a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0019d	81 e1 7f c0 ff
	ff		 and	 ecx, -16257		; ffffc07fH
  001a3	81 c9 00 32 00
	00		 or	 ecx, 12800		; 00003200H
  001a9	8b 55 e8	 mov	 edx, DWORD PTR _new_node$[ebp]
  001ac	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 420  : 	
; 421  : 			new_node->links = (link_data *) malloc_heap_mem (sizeof (link_data) * ((new_node->number_of_links) + 1));

  001af	8b 45 e8	 mov	 eax, DWORD PTR _new_node$[ebp]
  001b2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001b5	83 e1 7f	 and	 ecx, 127		; 0000007fH
  001b8	8d 14 cd 08 00
	00 00		 lea	 edx, DWORD PTR [ecx*8+8]
  001bf	52		 push	 edx
  001c0	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  001c5	8b 4d e8	 mov	 ecx, DWORD PTR _new_node$[ebp]
  001c8	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 422  : 
; 423  : 			memset (new_node->links, 0, sizeof (link_data) * ((new_node->number_of_links) + 1));

  001cb	8b 45 e8	 mov	 eax, DWORD PTR _new_node$[ebp]
  001ce	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001d1	83 e1 7f	 and	 ecx, 127		; 0000007fH
  001d4	8d 14 cd 08 00
	00 00		 lea	 edx, DWORD PTR [ecx*8+8]
  001db	52		 push	 edx
  001dc	6a 00		 push	 0
  001de	8b 45 e8	 mov	 eax, DWORD PTR _new_node$[ebp]
  001e1	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001e4	51		 push	 ecx
  001e5	e8 00 00 00 00	 call	 _memset
  001ea	83 c4 0c	 add	 esp, 12			; 0000000cH

; 424  : 	
; 425  : 			#if AI_DEBUG
; 426  : 		
; 427  : 			ai_memory_counter ++;
; 428  : 		
; 429  : 			#endif
; 430  : 
; 431  : 			for (loop = 0; loop < new_node->number_of_links; loop ++)

  001ed	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  001f4	eb 09		 jmp	 SHORT $LN6@read_road_
$LN4@read_road_:
  001f6	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  001f9	83 c0 01	 add	 eax, 1
  001fc	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN6@read_road_:
  001ff	8b 45 e8	 mov	 eax, DWORD PTR _new_node$[ebp]
  00202	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00205	83 e1 7f	 and	 ecx, 127		; 0000007fH
  00208	39 4d fc	 cmp	 DWORD PTR _loop$[ebp], ecx
  0020b	0f 83 84 00 00
	00		 jae	 $LN5@read_road_

; 432  : 			{
; 433  : 
; 434  : 				safe_fread (&value, 4, 1, file_ptr);

  00211	8b 45 f0	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00214	50		 push	 eax
  00215	6a 01		 push	 1
  00217	6a 04		 push	 4
  00219	8d 4d f8	 lea	 ecx, DWORD PTR _value$[ebp]
  0021c	51		 push	 ecx
  0021d	e8 00 00 00 00	 call	 ?safe_fread@@YGXPAXHHPAU_iobuf@@@Z ; safe_fread

; 435  : 				new_node->links [loop].node = value;

  00222	8b 45 e8	 mov	 eax, DWORD PTR _new_node$[ebp]
  00225	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00228	ba ff 3f 00 00	 mov	 edx, 16383		; 00003fffH
  0022d	66 23 55 f8	 and	 dx, WORD PTR _value$[ebp]
  00231	b8 00 c0 00 00	 mov	 eax, 49152		; 0000c000H
  00236	8b 75 fc	 mov	 esi, DWORD PTR _loop$[ebp]
  00239	66 23 44 f1 04	 and	 ax, WORD PTR [ecx+esi*8+4]
  0023e	66 0b c2	 or	 ax, dx
  00241	8b 4d e8	 mov	 ecx, DWORD PTR _new_node$[ebp]
  00244	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00247	8b 4d fc	 mov	 ecx, DWORD PTR _loop$[ebp]
  0024a	66 89 44 ca 04	 mov	 WORD PTR [edx+ecx*8+4], ax

; 436  : 
; 437  : 				safe_fread (&value, 4, 1, file_ptr);

  0024f	8b 45 f0	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  00252	50		 push	 eax
  00253	6a 01		 push	 1
  00255	6a 04		 push	 4
  00257	8d 4d f8	 lea	 ecx, DWORD PTR _value$[ebp]
  0025a	51		 push	 ecx
  0025b	e8 00 00 00 00	 call	 ?safe_fread@@YGXPAXHHPAU_iobuf@@@Z ; safe_fread

; 438  : 				new_node->links [loop].cost = value;

  00260	8b 45 e8	 mov	 eax, DWORD PTR _new_node$[ebp]
  00263	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00266	8b 55 fc	 mov	 edx, DWORD PTR _loop$[ebp]
  00269	8b 45 f8	 mov	 eax, DWORD PTR _value$[ebp]
  0026c	89 04 d1	 mov	 DWORD PTR [ecx+edx*8], eax

; 439  : 
; 440  : 				new_node->links [loop].breaks = 0;

  0026f	8b 45 e8	 mov	 eax, DWORD PTR _new_node$[ebp]
  00272	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00275	ba e0 ff 00 00	 mov	 edx, 65504		; 0000ffe0H
  0027a	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  0027d	66 23 54 c1 06	 and	 dx, WORD PTR [ecx+eax*8+6]
  00282	8b 4d e8	 mov	 ecx, DWORD PTR _new_node$[ebp]
  00285	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00288	8b 4d fc	 mov	 ecx, DWORD PTR _loop$[ebp]
  0028b	66 89 54 c8 06	 mov	 WORD PTR [eax+ecx*8+6], dx

; 441  : 			}

  00290	e9 61 ff ff ff	 jmp	 $LN4@read_road_
$LN5@read_road_:

; 442  : 	
; 443  : 			number_of_road_nodes --;

  00295	8b 45 ec	 mov	 eax, DWORD PTR _number_of_road_nodes$[ebp]
  00298	83 e8 01	 sub	 eax, 1
  0029b	89 45 ec	 mov	 DWORD PTR _number_of_road_nodes$[ebp], eax

; 444  : 
; 445  : 			#if DEBUG_MODULE >= 2
; 446  : 			{
; 447  : 
; 448  : 				int
; 449  : 					loop,
; 450  : 					loop2;
; 451  : 	
; 452  : 				//
; 453  : 				// debug check for duplicate link descriptions
; 454  : 				//
; 455  : 	
; 456  : 				for (loop = 0; loop < new_node->number_of_links; loop ++)
; 457  : 				{
; 458  : 	
; 459  : 					for (loop2 = 0; loop2 < new_node->number_of_links; loop2 ++)
; 460  : 					{
; 461  : 	
; 462  : 						if ((loop != loop2) && (new_node->links [loop].node == new_node->links [loop2].node))
; 463  : 						{
; 464  : 	
; 465  : 							debug_log ("ROUTE: CHECK DUPLICATE ROUTE DESCRIPTION BETWEEN %d AND %d", new_node->node, new_node->links [loop].node);
; 466  : 						}
; 467  : 					}
; 468  : 				}
; 469  : 			}
; 470  : 			#endif
; 471  : 
; 472  : 			new_node ++;

  0029e	8b 45 e8	 mov	 eax, DWORD PTR _new_node$[ebp]
  002a1	83 c0 0c	 add	 eax, 12			; 0000000cH
  002a4	89 45 e8	 mov	 DWORD PTR _new_node$[ebp], eax

; 473  : 		}

  002a7	e9 67 fe ff ff	 jmp	 $LN2@read_road_
$LN3@read_road_:

; 474  : 
; 475  : 		fclose (file_ptr);

  002ac	8b 45 f0	 mov	 eax, DWORD PTR _file_ptr$[ebp]
  002af	50		 push	 eax
  002b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  002b6	83 c4 04	 add	 esp, 4

; 476  : 
; 477  : 		//
; 478  : 		// debug check for duplicate link descriptions
; 479  : 		//
; 480  : 
; 481  : 		#if 0
; 482  : 		for (loop = 0; loop < total_number_of_road_nodes; loop ++)
; 483  : 		{
; 484  : 
; 485  : 			count = 0;
; 486  : 
; 487  : 			other_count = 0;
; 488  : 
; 489  : 			for (loop2 = 0; loop2 < road_nodes [loop].number_of_links; loop2 ++)
; 490  : 			{
; 491  : 
; 492  : 				for (loop3 = 0; loop3 < road_nodes [loop].number_of_links; loop3 ++)
; 493  : 				{
; 494  : 
; 495  : 					if ((loop2 != loop3) && (road_nodes [loop].links [loop2].node == road_nodes [loop].links [loop3].node))
; 496  : 					{
; 497  : 
; 498  : 						count ++;
; 499  : 
; 500  : 						other_count = 0;
; 501  : 
; 502  : 						for (loop4 = 0; loop4 < road_nodes [road_nodes [loop].links [loop2].node].number_of_links; loop4 ++)
; 503  : 						{
; 504  : 
; 505  : 							if (road_nodes [road_nodes [loop].links [loop2].node].links [loop4].node == road_nodes [loop].node)
; 506  : 							{
; 507  : 
; 508  : 								if (road_nodes [road_nodes [loop].links [loop2].node].node != road_nodes [loop].node)
; 509  : 								{
; 510  : 
; 511  : 									other_count ++;
; 512  : 								}
; 513  : 							}
; 514  : 						}
; 515  : 					}
; 516  : 				}
; 517  : 			}
; 518  : 
; 519  : 			if (count != other_count)
; 520  : 			{
; 521  : 
; 522  : 				duplicate_count += 2;
; 523  : 
; 524  : 				#if DEBUG_MODULE
; 525  : 
; 526  : 				debug_log ("ROUTE: DUPLICATE ROUTE DESCRIPTION IN NODE %d, dup = %d", road_nodes [loop].node, duplicate_count);
; 527  : 
; 528  : 				#endif
; 529  : 			}
; 530  : 		}
; 531  : 
; 532  : 		#endif
; 533  : 
; 534  : 		return TRUE;

  002b9	b8 01 00 00 00	 mov	 eax, 1
  002be	eb 02		 jmp	 SHORT $LN1@read_road_
$LN8@read_road_:

; 535  : 	}
; 536  : 
; 537  : 	return FALSE;

  002c0	33 c0		 xor	 eax, eax
$LN1@read_road_:

; 538  : }

  002c2	5f		 pop	 edi
  002c3	5e		 pop	 esi
  002c4	5b		 pop	 ebx
  002c5	8b e5		 mov	 esp, ebp
  002c7	5d		 pop	 ebp
  002c8	c2 04 00	 ret	 4
?read_road_route_node_data@@YGHPAD@Z ENDP		; read_road_route_node_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\ai_misc\ai_route.c
;	COMDAT ?set_route_node_data_filename@@YGXPAPADPBD@Z
_TEXT	SEGMENT
_route_node_data_filename$ = 8				; size = 4
_filename$ = 12						; size = 4
?set_route_node_data_filename@@YGXPAPADPBD@Z PROC	; set_route_node_data_filename, COMDAT

; 1236 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1237 : 
; 1238 : 	if (*route_node_data_filename)

  00009	8b 45 08	 mov	 eax, DWORD PTR _route_node_data_filename$[ebp]
  0000c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000f	74 14		 je	 SHORT $LN2@set_route_

; 1239 : 	{
; 1240 : 
; 1241 : 		free_mem (*route_node_data_filename);

  00011	8b 45 08	 mov	 eax, DWORD PTR _route_node_data_filename$[ebp]
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem

; 1242 : 
; 1243 : 		*route_node_data_filename = NULL;

  0001c	8b 45 08	 mov	 eax, DWORD PTR _route_node_data_filename$[ebp]
  0001f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN2@set_route_:

; 1244 : 	}
; 1245 : 
; 1246 : 	*route_node_data_filename = (char *) malloc_heap_mem (sizeof (char) * (strlen (filename) + 1));

  00025	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 _strlen
  0002e	83 c4 04	 add	 esp, 4
  00031	83 c0 01	 add	 eax, 1
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _route_node_data_filename$[ebp]
  0003d	89 01		 mov	 DWORD PTR [ecx], eax

; 1247 : 
; 1248 : 	strcpy (*route_node_data_filename, filename);

  0003f	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00042	50		 push	 eax
  00043	8b 4d 08	 mov	 ecx, DWORD PTR _route_node_data_filename$[ebp]
  00046	8b 11		 mov	 edx, DWORD PTR [ecx]
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 _strcpy
  0004e	83 c4 08	 add	 esp, 8

; 1249 : 
; 1250 : 	#if DEBUG_MODULE
; 1251 : 
; 1252 : 	debug_log ("AI_ROUTE: setting database(%d) filename to %s", *route_node_data_filename, filename);
; 1253 : 
; 1254 : 	#endif
; 1255 : }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 08 00	 ret	 8
?set_route_node_data_filename@@YGXPAPADPBD@Z ENDP	; set_route_node_data_filename
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\ai_misc\ai_route.c
;	COMDAT ?get_road_link_breaks@@YGHHH@Z
_TEXT	SEGMENT
_loop$ = -8						; size = 4
_loop2$ = -4						; size = 4
_node1$ = 8						; size = 4
_node2$ = 12						; size = 4
?get_road_link_breaks@@YGHHH@Z PROC			; get_road_link_breaks, COMDAT

; 1121 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1122 : 
; 1123 : 	unsigned int
; 1124 : 		loop2,
; 1125 : 		loop;
; 1126 : 
; 1127 : 	ASSERT (road_nodes);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A, 0 ; road_nodes
  00010	75 18		 jne	 SHORT $LN8@get_road_l
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_road_link_breaks@@YGHHH@Z@4JA
  00017	83 c0 06	 add	 eax, 6
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@FGDCJMLC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0L@PCIJFDI@road_nodes@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@get_road_l:

; 1128 : 	ASSERT (road_node_positions);

  0002a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?road_node_positions@@3PAUVEC3D@@A, 0 ; road_node_positions
  00031	75 18		 jne	 SHORT $LN9@get_road_l
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_road_link_breaks@@YGHHH@Z@4JA
  00038	83 c0 07	 add	 eax, 7
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@FGDCJMLC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BLOGCFGI@road_node_positions@
  00046	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@get_road_l:

; 1129 : 
; 1130 : 	//
; 1131 : 	// find node 1
; 1132 : 	//
; 1133 : 
; 1134 : 	for (loop = 0; loop < road_nodes [node1].number_of_links; loop ++)

  0004b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  00052	eb 09		 jmp	 SHORT $LN4@get_road_l
$LN2@get_road_l:
  00054	8b 45 f8	 mov	 eax, DWORD PTR _loop$[ebp]
  00057	83 c0 01	 add	 eax, 1
  0005a	89 45 f8	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@get_road_l:
  0005d	6b 45 08 0c	 imul	 eax, DWORD PTR _node1$[ebp], 12
  00061	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A ; road_nodes
  00067	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  0006b	83 e2 7f	 and	 edx, 127		; 0000007fH
  0006e	39 55 f8	 cmp	 DWORD PTR _loop$[ebp], edx
  00071	0f 83 f5 00 00
	00		 jae	 $LN3@get_road_l

; 1135 : 	{
; 1136 : 
; 1137 : 		if (road_nodes [node1].links [loop].node == node2)

  00077	6b 45 08 0c	 imul	 eax, DWORD PTR _node1$[ebp], 12
  0007b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A ; road_nodes
  00081	8b 54 01 08	 mov	 edx, DWORD PTR [ecx+eax+8]
  00085	b8 ff 3f 00 00	 mov	 eax, 16383		; 00003fffH
  0008a	8b 4d f8	 mov	 ecx, DWORD PTR _loop$[ebp]
  0008d	66 23 44 ca 04	 and	 ax, WORD PTR [edx+ecx*8+4]
  00092	0f b7 d0	 movzx	 edx, ax
  00095	3b 55 0c	 cmp	 edx, DWORD PTR _node2$[ebp]
  00098	0f 85 c9 00 00
	00		 jne	 $LN10@get_road_l

; 1138 : 		{
; 1139 : 
; 1140 : 			//
; 1141 : 			// Check that node2 has same valid flag
; 1142 : 			//
; 1143 : 	
; 1144 : 			for (loop2 = 0; loop2 < road_nodes [node2].number_of_links; loop2 ++)

  0009e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _loop2$[ebp], 0
  000a5	eb 09		 jmp	 SHORT $LN7@get_road_l
$LN5@get_road_l:
  000a7	8b 45 fc	 mov	 eax, DWORD PTR _loop2$[ebp]
  000aa	83 c0 01	 add	 eax, 1
  000ad	89 45 fc	 mov	 DWORD PTR _loop2$[ebp], eax
$LN7@get_road_l:
  000b0	6b 45 0c 0c	 imul	 eax, DWORD PTR _node2$[ebp], 12
  000b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A ; road_nodes
  000ba	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  000be	83 e2 7f	 and	 edx, 127		; 0000007fH
  000c1	39 55 fc	 cmp	 DWORD PTR _loop2$[ebp], edx
  000c4	0f 83 9d 00 00
	00		 jae	 $LN10@get_road_l

; 1145 : 			{
; 1146 : 	
; 1147 : 				if (road_nodes [node2].links [loop2].node == node1)

  000ca	6b 45 0c 0c	 imul	 eax, DWORD PTR _node2$[ebp], 12
  000ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A ; road_nodes
  000d4	8b 54 01 08	 mov	 edx, DWORD PTR [ecx+eax+8]
  000d8	b8 ff 3f 00 00	 mov	 eax, 16383		; 00003fffH
  000dd	8b 4d fc	 mov	 ecx, DWORD PTR _loop2$[ebp]
  000e0	66 23 44 ca 04	 and	 ax, WORD PTR [edx+ecx*8+4]
  000e5	0f b7 d0	 movzx	 edx, ax
  000e8	3b 55 08	 cmp	 edx, DWORD PTR _node1$[ebp]
  000eb	75 75		 jne	 SHORT $LN11@get_road_l

; 1148 : 				{
; 1149 : 
; 1150 : 					ASSERT (road_nodes [node1].links [loop].breaks == road_nodes [node2].links [loop2].breaks);

  000ed	6b 45 08 0c	 imul	 eax, DWORD PTR _node1$[ebp], 12
  000f1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A ; road_nodes
  000f7	8b 54 01 08	 mov	 edx, DWORD PTR [ecx+eax+8]
  000fb	8b 45 f8	 mov	 eax, DWORD PTR _loop$[ebp]
  000fe	66 8b 4c c2 06	 mov	 cx, WORD PTR [edx+eax*8+6]
  00103	66 83 e1 1f	 and	 cx, 31			; 0000001fH
  00107	0f b7 d1	 movzx	 edx, cx
  0010a	6b 45 0c 0c	 imul	 eax, DWORD PTR _node2$[ebp], 12
  0010e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A ; road_nodes
  00114	8b 44 01 08	 mov	 eax, DWORD PTR [ecx+eax+8]
  00118	8b 4d fc	 mov	 ecx, DWORD PTR _loop2$[ebp]
  0011b	66 8b 44 c8 06	 mov	 ax, WORD PTR [eax+ecx*8+6]
  00120	66 83 e0 1f	 and	 ax, 31			; 0000001fH
  00124	0f b7 c8	 movzx	 ecx, ax
  00127	3b d1		 cmp	 edx, ecx
  00129	74 18		 je	 SHORT $LN12@get_road_l
  0012b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_road_link_breaks@@YGHHH@Z@4JA
  00130	83 c0 1d	 add	 eax, 29			; 0000001dH
  00133	50		 push	 eax
  00134	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@FGDCJMLC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00139	68 00 00 00 00	 push	 OFFSET ??_C@_0FC@PGENAIFP@road_nodes?5?$FLnode1?$FN?4links?5?$FLloop?$FN@
  0013e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN12@get_road_l:

; 1151 : 	
; 1152 : 					return road_nodes [node1].links [loop].breaks;

  00143	6b 45 08 0c	 imul	 eax, DWORD PTR _node1$[ebp], 12
  00147	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A ; road_nodes
  0014d	8b 54 01 08	 mov	 edx, DWORD PTR [ecx+eax+8]
  00151	8b 45 f8	 mov	 eax, DWORD PTR _loop$[ebp]
  00154	66 8b 4c c2 06	 mov	 cx, WORD PTR [edx+eax*8+6]
  00159	66 83 e1 1f	 and	 cx, 31			; 0000001fH
  0015d	0f b7 c1	 movzx	 eax, cx
  00160	eb 0d		 jmp	 SHORT $LN1@get_road_l
$LN11@get_road_l:

; 1153 : 				}
; 1154 : 			}

  00162	e9 40 ff ff ff	 jmp	 $LN5@get_road_l
$LN10@get_road_l:

; 1155 : 		}
; 1156 : 	}

  00167	e9 e8 fe ff ff	 jmp	 $LN2@get_road_l
$LN3@get_road_l:

; 1157 : 
; 1158 : 	return -1;

  0016c	83 c8 ff	 or	 eax, -1
$LN1@get_road_l:

; 1159 : }

  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	5b		 pop	 ebx
  00172	8b e5		 mov	 esp, ebp
  00174	5d		 pop	 ebp
  00175	c2 08 00	 ret	 8
?get_road_link_breaks@@YGHHH@Z ENDP			; get_road_link_breaks
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\ai_misc\ai_route.c
;	COMDAT ?set_road_link_breaks@@YGHHHH@Z
_TEXT	SEGMENT
_loop$ = -4						; size = 4
_node1$ = 8						; size = 4
_node2$ = 12						; size = 4
_count$ = 16						; size = 4
?set_road_link_breaks@@YGHHHH@Z PROC			; set_road_link_breaks, COMDAT

; 1067 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1068 : 
; 1069 : 	unsigned int
; 1070 : 		loop;
; 1071 : 
; 1072 : 	ASSERT (road_nodes);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A, 0 ; road_nodes
  00010	75 18		 jne	 SHORT $LN8@set_road_l
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_road_link_breaks@@YGHHHH@Z@4JA
  00017	83 c0 05	 add	 eax, 5
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@FGDCJMLC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0L@PCIJFDI@road_nodes@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@set_road_l:

; 1073 : 	ASSERT (road_node_positions);

  0002a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?road_node_positions@@3PAUVEC3D@@A, 0 ; road_node_positions
  00031	75 18		 jne	 SHORT $LN9@set_road_l
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_road_link_breaks@@YGHHHH@Z@4JA
  00038	83 c0 06	 add	 eax, 6
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@FGDCJMLC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BLOGCFGI@road_node_positions@
  00046	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@set_road_l:

; 1074 : 
; 1075 : 	//
; 1076 : 	// Set valid node1 -> node2 link
; 1077 : 	//
; 1078 : 
; 1079 : 	if (count > 32)

  0004b	83 7d 10 20	 cmp	 DWORD PTR _count$[ebp], 32 ; 00000020H
  0004f	7e 15		 jle	 SHORT $LN10@set_road_l

; 1080 : 	{
; 1081 : 
; 1082 : 		debug_fatal ("AI_ROUTE: too many bridges destroyed on link between %d and %d (max 32)", node1, node2);

  00051	8b 45 0c	 mov	 eax, DWORD PTR _node2$[ebp]
  00054	50		 push	 eax
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _node1$[ebp]
  00058	51		 push	 ecx
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@LHACMKLG@AI_ROUTE?3?5too?5many?5bridges?5dest@
  0005e	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@set_road_l:

; 1083 : 	}
; 1084 : 
; 1085 : 	for (loop = 0; loop < road_nodes [node1].number_of_links; loop ++)

  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  0006d	eb 09		 jmp	 SHORT $LN4@set_road_l
$LN2@set_road_l:
  0006f	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00072	83 c0 01	 add	 eax, 1
  00075	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@set_road_l:
  00078	6b 45 08 0c	 imul	 eax, DWORD PTR _node1$[ebp], 12
  0007c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A ; road_nodes
  00082	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  00086	83 e2 7f	 and	 edx, 127		; 0000007fH
  00089	39 55 fc	 cmp	 DWORD PTR _loop$[ebp], edx
  0008c	0f 83 0e 01 00
	00		 jae	 $LN3@set_road_l

; 1086 : 	{
; 1087 : 
; 1088 : 		if (road_nodes [node1].links [loop].node == node2)

  00092	6b 45 08 0c	 imul	 eax, DWORD PTR _node1$[ebp], 12
  00096	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A ; road_nodes
  0009c	8b 54 01 08	 mov	 edx, DWORD PTR [ecx+eax+8]
  000a0	b8 ff 3f 00 00	 mov	 eax, 16383		; 00003fffH
  000a5	8b 4d fc	 mov	 ecx, DWORD PTR _loop$[ebp]
  000a8	66 23 44 ca 04	 and	 ax, WORD PTR [edx+ecx*8+4]
  000ad	0f b7 d0	 movzx	 edx, ax
  000b0	3b 55 0c	 cmp	 edx, DWORD PTR _node2$[ebp]
  000b3	0f 85 e2 00 00
	00		 jne	 $LN11@set_road_l

; 1089 : 		{
; 1090 : 
; 1091 : 			road_nodes [node1].links [loop].breaks = count;

  000b9	6b 45 08 0c	 imul	 eax, DWORD PTR _node1$[ebp], 12
  000bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A ; road_nodes
  000c3	8b 54 01 08	 mov	 edx, DWORD PTR [ecx+eax+8]
  000c7	66 8b 45 10	 mov	 ax, WORD PTR _count$[ebp]
  000cb	66 83 e0 1f	 and	 ax, 31			; 0000001fH
  000cf	b9 e0 ff 00 00	 mov	 ecx, 65504		; 0000ffe0H
  000d4	8b 75 fc	 mov	 esi, DWORD PTR _loop$[ebp]
  000d7	66 23 4c f2 06	 and	 cx, WORD PTR [edx+esi*8+6]
  000dc	66 0b c8	 or	 cx, ax
  000df	6b 55 08 0c	 imul	 edx, DWORD PTR _node1$[ebp], 12
  000e3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A ; road_nodes
  000e8	8b 54 10 08	 mov	 edx, DWORD PTR [eax+edx+8]
  000ec	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  000ef	66 89 4c c2 06	 mov	 WORD PTR [edx+eax*8+6], cx

; 1092 : 
; 1093 : 			//
; 1094 : 			// Set valid node2 -> node1 link
; 1095 : 			//
; 1096 : 
; 1097 : 			for (loop = 0; loop < road_nodes [node2].number_of_links; loop ++)

  000f4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  000fb	eb 09		 jmp	 SHORT $LN7@set_road_l
$LN5@set_road_l:
  000fd	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00100	83 c0 01	 add	 eax, 1
  00103	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN7@set_road_l:
  00106	6b 45 0c 0c	 imul	 eax, DWORD PTR _node2$[ebp], 12
  0010a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A ; road_nodes
  00110	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  00114	83 e2 7f	 and	 edx, 127		; 0000007fH
  00117	39 55 fc	 cmp	 DWORD PTR _loop$[ebp], edx
  0011a	73 6a		 jae	 SHORT $LN6@set_road_l

; 1098 : 			{
; 1099 : 
; 1100 : 				if (road_nodes [node2].links [loop].node == node1)

  0011c	6b 45 0c 0c	 imul	 eax, DWORD PTR _node2$[ebp], 12
  00120	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A ; road_nodes
  00126	8b 54 01 08	 mov	 edx, DWORD PTR [ecx+eax+8]
  0012a	b8 ff 3f 00 00	 mov	 eax, 16383		; 00003fffH
  0012f	8b 4d fc	 mov	 ecx, DWORD PTR _loop$[ebp]
  00132	66 23 44 ca 04	 and	 ax, WORD PTR [edx+ecx*8+4]
  00137	0f b7 d0	 movzx	 edx, ax
  0013a	3b 55 08	 cmp	 edx, DWORD PTR _node1$[ebp]
  0013d	75 42		 jne	 SHORT $LN12@set_road_l

; 1101 : 				{
; 1102 : 	
; 1103 : 					road_nodes [node2].links [loop].breaks = count;

  0013f	6b 45 0c 0c	 imul	 eax, DWORD PTR _node2$[ebp], 12
  00143	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A ; road_nodes
  00149	8b 54 01 08	 mov	 edx, DWORD PTR [ecx+eax+8]
  0014d	66 8b 45 10	 mov	 ax, WORD PTR _count$[ebp]
  00151	66 83 e0 1f	 and	 ax, 31			; 0000001fH
  00155	b9 e0 ff 00 00	 mov	 ecx, 65504		; 0000ffe0H
  0015a	8b 75 fc	 mov	 esi, DWORD PTR _loop$[ebp]
  0015d	66 23 4c f2 06	 and	 cx, WORD PTR [edx+esi*8+6]
  00162	66 0b c8	 or	 cx, ax
  00165	6b 55 0c 0c	 imul	 edx, DWORD PTR _node2$[ebp], 12
  00169	a1 00 00 00 00	 mov	 eax, DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A ; road_nodes
  0016e	8b 54 10 08	 mov	 edx, DWORD PTR [eax+edx+8]
  00172	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00175	66 89 4c c2 06	 mov	 WORD PTR [edx+eax*8+6], cx

; 1104 : 
; 1105 : 					return TRUE;

  0017a	b8 01 00 00 00	 mov	 eax, 1
  0017f	eb 21		 jmp	 SHORT $LN1@set_road_l
$LN12@set_road_l:

; 1106 : 				}
; 1107 : 			}

  00181	e9 77 ff ff ff	 jmp	 $LN5@set_road_l
$LN6@set_road_l:

; 1108 : 
; 1109 : 			debug_fatal ("AI_ROUTE: only found 1 way link between %d and %d", node1, node2);

  00186	8b 45 0c	 mov	 eax, DWORD PTR _node2$[ebp]
  00189	50		 push	 eax
  0018a	8b 4d 08	 mov	 ecx, DWORD PTR _node1$[ebp]
  0018d	51		 push	 ecx
  0018e	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@BOKEKKOD@AI_ROUTE?3?5only?5found?51?5way?5link@
  00193	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00198	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN11@set_road_l:

; 1110 : 		}
; 1111 : 	}

  0019b	e9 cf fe ff ff	 jmp	 $LN2@set_road_l
$LN3@set_road_l:

; 1112 : 
; 1113 : 	return FALSE;

  001a0	33 c0		 xor	 eax, eax
$LN1@set_road_l:

; 1114 : }

  001a2	5f		 pop	 edi
  001a3	5e		 pop	 esi
  001a4	5b		 pop	 ebx
  001a5	8b e5		 mov	 esp, ebp
  001a7	5d		 pop	 ebp
  001a8	c2 0c 00	 ret	 12			; 0000000cH
?set_road_link_breaks@@YGHHHH@Z ENDP			; set_road_link_breaks
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\ai_misc\ai_route.c
;	COMDAT ?get_road_sub_route@@YGPAUNODE_LINK_DATA@@HHPAHPAU1@@Z
_TEXT	SEGMENT
_temp$1 = -8						; size = 4
_loop$ = -4						; size = 4
_node1$ = 8						; size = 4
_node2$ = 12						; size = 4
_count$ = 16						; size = 4
_start_route$ = 20					; size = 4
?get_road_sub_route@@YGPAUNODE_LINK_DATA@@HHPAHPAU1@@Z PROC ; get_road_sub_route, COMDAT

; 896  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 897  : 
; 898  : 	int
; 899  : 		loop;
; 900  : 
; 901  : 	//
; 902  : 	// check database loaded
; 903  : 	//
; 904  : 
; 905  : 	ASSERT (road_nodes);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A, 0 ; road_nodes
  00010	75 18		 jne	 SHORT $LN10@get_road_s
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_road_sub_route@@YGPAUNODE_LINK_DATA@@HHPAHPAU2@@Z@4JA
  00017	83 c0 09	 add	 eax, 9
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@FGDCJMLC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0L@PCIJFDI@road_nodes@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@get_road_s:

; 906  : 	ASSERT (road_node_positions);

  0002a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?road_node_positions@@3PAUVEC3D@@A, 0 ; road_node_positions
  00031	75 18		 jne	 SHORT $LN11@get_road_s
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_road_sub_route@@YGPAUNODE_LINK_DATA@@HHPAHPAU2@@Z@4JA
  00038	83 c0 0a	 add	 eax, 10			; 0000000aH
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@FGDCJMLC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BLOGCFGI@road_node_positions@
  00046	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN11@get_road_s:

; 907  : 	ASSERT (road_node_link_positions);

  0004b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?road_node_link_positions@@3PAUNODE_LINK_DATA@@A, 0 ; road_node_link_positions
  00052	75 18		 jne	 SHORT $LN12@get_road_s
  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_road_sub_route@@YGPAUNODE_LINK_DATA@@HHPAHPAU2@@Z@4JA
  00059	83 c0 0b	 add	 eax, 11			; 0000000bH
  0005c	50		 push	 eax
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@FGDCJMLC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KHCLBFEE@road_node_link_positions@
  00067	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN12@get_road_s:

; 908  : 
; 909  : 	if (!get_road_nodes_loaded ())

  0006c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?road_nodes_loaded@@3HA, 0 ; road_nodes_loaded
  00073	75 0d		 jne	 SHORT $LN13@get_road_s

; 910  : 	{
; 911  : 
; 912  : 		debug_fatal ("AI_ROUTE: data not loaded");

  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@CDOPAABC@AI_ROUTE?3?5data?5not?5loaded@
  0007a	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0007f	83 c4 04	 add	 esp, 4
$LN13@get_road_s:

; 913  : 	}
; 914  : 
; 915  : 	//
; 916  : 	// Easy case
; 917  : 	//
; 918  : 
; 919  : 	if (node1 == node2)

  00082	8b 45 08	 mov	 eax, DWORD PTR _node1$[ebp]
  00085	3b 45 0c	 cmp	 eax, DWORD PTR _node2$[ebp]
  00088	75 07		 jne	 SHORT $LN14@get_road_s

; 920  : 	{
; 921  : 
; 922  : 		return NULL;

  0008a	33 c0		 xor	 eax, eax
  0008c	e9 ea 00 00 00	 jmp	 $LN1@get_road_s
$LN14@get_road_s:

; 923  : 	}
; 924  : 
; 925  : 	//
; 926  : 	// correct order
; 927  : 	//
; 928  : 
; 929  : 	if (node1 > node2)

  00091	8b 45 08	 mov	 eax, DWORD PTR _node1$[ebp]
  00094	3b 45 0c	 cmp	 eax, DWORD PTR _node2$[ebp]
  00097	7e 12		 jle	 SHORT $LN2@get_road_s

; 930  : 	{
; 931  : 
; 932  : 		int
; 933  : 			temp;
; 934  : 
; 935  : 		temp = node1;

  00099	8b 45 08	 mov	 eax, DWORD PTR _node1$[ebp]
  0009c	89 45 f8	 mov	 DWORD PTR _temp$1[ebp], eax

; 936  : 
; 937  : 		node1 = node2;

  0009f	8b 45 0c	 mov	 eax, DWORD PTR _node2$[ebp]
  000a2	89 45 08	 mov	 DWORD PTR _node1$[ebp], eax

; 938  : 
; 939  : 		node2 = temp;

  000a5	8b 45 f8	 mov	 eax, DWORD PTR _temp$1[ebp]
  000a8	89 45 0c	 mov	 DWORD PTR _node2$[ebp], eax
$LN2@get_road_s:

; 940  : 	}
; 941  : 
; 942  : 	//
; 943  : 	// zip to start_route position
; 944  : 	//
; 945  : 
; 946  : 	while (TRUE)

  000ab	b8 01 00 00 00	 mov	 eax, 1
  000b0	85 c0		 test	 eax, eax
  000b2	0f 84 b8 00 00
	00		 je	 $LN3@get_road_s

; 947  : 	{
; 948  : 	
; 949  : 		loop = total_road_node_link_count - 1;

  000b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?total_road_node_link_count@@3HA ; total_road_node_link_count
  000bd	83 e8 01	 sub	 eax, 1
  000c0	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax

; 950  : 	
; 951  : 		if (start_route)

  000c3	83 7d 14 00	 cmp	 DWORD PTR _start_route$[ebp], 0
  000c7	74 2f		 je	 SHORT $LN16@get_road_s

; 952  : 		{
; 953  : 		
; 954  : 			for (; loop >= 0; loop --)

  000c9	eb 09		 jmp	 SHORT $LN6@get_road_s
$LN4@get_road_s:
  000cb	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  000ce	83 e8 01	 sub	 eax, 1
  000d1	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN6@get_road_s:
  000d4	83 7d fc 00	 cmp	 DWORD PTR _loop$[ebp], 0
  000d8	7c 1e		 jl	 SHORT $LN16@get_road_s

; 955  : 			{
; 956  : 		
; 957  : 				//
; 958  : 				// setup index pointers for forward wp list
; 959  : 				//
; 960  : 		
; 961  : 				if (&road_node_link_positions [loop] == start_route)

  000da	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  000dd	c1 e0 04	 shl	 eax, 4
  000e0	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?road_node_link_positions@@3PAUNODE_LINK_DATA@@A ; road_node_link_positions
  000e6	3b 45 14	 cmp	 eax, DWORD PTR _start_route$[ebp]
  000e9	75 0b		 jne	 SHORT $LN17@get_road_s

; 962  : 				{
; 963  : 
; 964  : 					loop --;

  000eb	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  000ee	83 e8 01	 sub	 eax, 1
  000f1	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax

; 965  : 		
; 966  : 					break;

  000f4	eb 02		 jmp	 SHORT $LN16@get_road_s
$LN17@get_road_s:

; 967  : 				}
; 968  : 			}

  000f6	eb d3		 jmp	 SHORT $LN4@get_road_s
$LN16@get_road_s:

; 969  : 		}
; 970  : 	
; 971  : 		//
; 972  : 		// Search for route
; 973  : 		//
; 974  : 	
; 975  : 		for (; loop >= 0; loop --)

  000f8	eb 09		 jmp	 SHORT $LN9@get_road_s
$LN7@get_road_s:
  000fa	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  000fd	83 e8 01	 sub	 eax, 1
  00100	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN9@get_road_s:
  00103	83 7d fc 00	 cmp	 DWORD PTR _loop$[ebp], 0
  00107	7c 51		 jl	 SHORT $LN8@get_road_s

; 976  : 		{
; 977  : 	
; 978  : 			//
; 979  : 			// setup index pointers for forward wp list
; 980  : 			//
; 981  : 	
; 982  : 			if ((road_node_link_positions [loop].source == node1) && (road_node_link_positions [loop].destination == node2))

  00109	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  0010c	c1 e0 04	 shl	 eax, 4
  0010f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_node_link_positions@@3PAUNODE_LINK_DATA@@A ; road_node_link_positions
  00115	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  00119	3b 55 08	 cmp	 edx, DWORD PTR _node1$[ebp]
  0011c	75 3a		 jne	 SHORT $LN18@get_road_s
  0011e	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00121	c1 e0 04	 shl	 eax, 4
  00124	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_node_link_positions@@3PAUNODE_LINK_DATA@@A ; road_node_link_positions
  0012a	0f b7 54 01 02	 movzx	 edx, WORD PTR [ecx+eax+2]
  0012f	3b 55 0c	 cmp	 edx, DWORD PTR _node2$[ebp]
  00132	75 24		 jne	 SHORT $LN18@get_road_s

; 983  : 			{
; 984  : 	
; 985  : 				*count = road_node_link_positions [loop].number_of_links;

  00134	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00137	c1 e0 04	 shl	 eax, 4
  0013a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_node_link_positions@@3PAUNODE_LINK_DATA@@A ; road_node_link_positions
  00140	0f b7 54 01 06	 movzx	 edx, WORD PTR [ecx+eax+6]
  00145	8b 45 10	 mov	 eax, DWORD PTR _count$[ebp]
  00148	89 10		 mov	 DWORD PTR [eax], edx

; 986  : 	
; 987  : 				return &road_node_link_positions [loop];

  0014a	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  0014d	c1 e0 04	 shl	 eax, 4
  00150	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?road_node_link_positions@@3PAUNODE_LINK_DATA@@A ; road_node_link_positions
  00156	eb 23		 jmp	 SHORT $LN1@get_road_s
$LN18@get_road_s:

; 988  : 			}
; 989  : 		}

  00158	eb a0		 jmp	 SHORT $LN7@get_road_s
$LN8@get_road_s:

; 990  : 
; 991  : 		if (start_route)

  0015a	83 7d 14 00	 cmp	 DWORD PTR _start_route$[ebp], 0
  0015e	74 09		 je	 SHORT $LN19@get_road_s

; 992  : 		{
; 993  : 
; 994  : 			start_route = NULL;

  00160	c7 45 14 00 00
	00 00		 mov	 DWORD PTR _start_route$[ebp], 0

; 995  : 		}
; 996  : 		else

  00167	eb 02		 jmp	 SHORT $LN20@get_road_s
$LN19@get_road_s:

; 997  : 		{
; 998  : 
; 999  : 			break;

  00169	eb 05		 jmp	 SHORT $LN3@get_road_s
$LN20@get_road_s:

; 1000 : 		}
; 1001 : 	}

  0016b	e9 3b ff ff ff	 jmp	 $LN2@get_road_s
$LN3@get_road_s:

; 1002 : 
; 1003 : 	*count = 0;

  00170	8b 45 10	 mov	 eax, DWORD PTR _count$[ebp]
  00173	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1004 : 
; 1005 : 	#if 0
; 1006 : 
; 1007 : 	debug_log ("AI_ROUTE: Warning ! Null sub route between %d and %d", node1, node2);
; 1008 : 
; 1009 : 	debug_log ("      node %d links to :", node1);
; 1010 : 
; 1011 : 	for (loop = 0; loop < road_nodes [node1].number_of_links; loop ++)
; 1012 : 	{
; 1013 : 
; 1014 : 		debug_log ("      node %d %f km", road_nodes [node1].links [loop].node, road_nodes [node1].links [loop].cost);
; 1015 : 	}
; 1016 : 
; 1017 : 	for (loop = 0; loop < total_road_node_link_count; loop ++)
; 1018 : 	{
; 1019 : 
; 1020 : 		if (road_node_link_positions [loop].source == node1)
; 1021 : 		{
; 1022 : 
; 1023 : 			debug_log ("      found link for %d to %d", node1, road_node_link_positions [loop].destination);
; 1024 : 		}
; 1025 : 
; 1026 : 		if (road_node_link_positions [loop].destination == node1)
; 1027 : 		{
; 1028 : 
; 1029 : 			debug_log ("      found link for %d to %d", road_node_link_positions [loop].source, node1);
; 1030 : 		}
; 1031 : 	}
; 1032 : 
; 1033 : 	debug_log ("      node %d links to :", node2);
; 1034 : 
; 1035 : 	for (loop = 0; loop < road_nodes [node2].number_of_links; loop ++)
; 1036 : 	{
; 1037 : 
; 1038 : 		debug_log ("      node %d %f km", road_nodes [node2].links [loop].node, road_nodes [node2].links [loop].cost);
; 1039 : 	}
; 1040 : 
; 1041 : 	for (loop = 0; loop < total_road_node_link_count; loop ++)
; 1042 : 	{
; 1043 : 
; 1044 : 		if (road_node_link_positions [loop].source == node2)
; 1045 : 		{
; 1046 : 
; 1047 : 			debug_log ("      found link for %d to %d", node2, road_node_link_positions [loop].destination);
; 1048 : 		}
; 1049 : 
; 1050 : 		if (road_node_link_positions [loop].destination == node2)
; 1051 : 		{
; 1052 : 
; 1053 : 			debug_log ("      found link for %d to %d", road_node_link_positions [loop].source, node2);
; 1054 : 		}
; 1055 : 	}
; 1056 : 
; 1057 : 	#endif
; 1058 : 
; 1059 : 	return NULL;

  00179	33 c0		 xor	 eax, eax
$LN1@get_road_s:

; 1060 : }

  0017b	5f		 pop	 edi
  0017c	5e		 pop	 esi
  0017d	5b		 pop	 ebx
  0017e	8b e5		 mov	 esp, ebp
  00180	5d		 pop	 ebp
  00181	c2 10 00	 ret	 16			; 00000010H
?get_road_sub_route@@YGPAUNODE_LINK_DATA@@HHPAHPAU1@@Z ENDP ; get_road_sub_route
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\ai_misc\ai_route.c
;	COMDAT ?get_road_link_data@@YGPAUNODE_LINK_DATA@@HH@Z
_TEXT	SEGMENT
_temp$1 = -8						; size = 4
_loop$ = -4						; size = 4
_node1$ = 8						; size = 4
_node2$ = 12						; size = 4
?get_road_link_data@@YGPAUNODE_LINK_DATA@@HH@Z PROC	; get_road_link_data, COMDAT

; 822  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 823  : 
; 824  : 	int
; 825  : 		loop;
; 826  : 
; 827  : 	//
; 828  : 	// check database loaded
; 829  : 	//
; 830  : 
; 831  : 	ASSERT (road_nodes);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A, 0 ; road_nodes
  00010	75 18		 jne	 SHORT $LN5@get_road_l
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_road_link_data@@YGPAUNODE_LINK_DATA@@HH@Z@4JA
  00017	83 c0 09	 add	 eax, 9
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@FGDCJMLC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0L@PCIJFDI@road_nodes@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@get_road_l:

; 832  : 	ASSERT (road_node_positions);

  0002a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?road_node_positions@@3PAUVEC3D@@A, 0 ; road_node_positions
  00031	75 18		 jne	 SHORT $LN6@get_road_l
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_road_link_data@@YGPAUNODE_LINK_DATA@@HH@Z@4JA
  00038	83 c0 0a	 add	 eax, 10			; 0000000aH
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@FGDCJMLC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BLOGCFGI@road_node_positions@
  00046	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_road_l:

; 833  : 	ASSERT (road_node_link_positions);

  0004b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?road_node_link_positions@@3PAUNODE_LINK_DATA@@A, 0 ; road_node_link_positions
  00052	75 18		 jne	 SHORT $LN7@get_road_l
  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_road_link_data@@YGPAUNODE_LINK_DATA@@HH@Z@4JA
  00059	83 c0 0b	 add	 eax, 11			; 0000000bH
  0005c	50		 push	 eax
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@FGDCJMLC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KHCLBFEE@road_node_link_positions@
  00067	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@get_road_l:

; 834  : 
; 835  : 	if (!get_road_nodes_loaded ())

  0006c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?road_nodes_loaded@@3HA, 0 ; road_nodes_loaded
  00073	75 0d		 jne	 SHORT $LN8@get_road_l

; 836  : 	{
; 837  : 
; 838  : 		debug_fatal ("AI_ROUTE: data not loaded");

  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@CDOPAABC@AI_ROUTE?3?5data?5not?5loaded@
  0007a	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0007f	83 c4 04	 add	 esp, 4
$LN8@get_road_l:

; 839  : 	}
; 840  : 
; 841  : 	//
; 842  : 	// Easy case
; 843  : 	//
; 844  : 
; 845  : 	if (node1 == node2)

  00082	8b 45 08	 mov	 eax, DWORD PTR _node1$[ebp]
  00085	3b 45 0c	 cmp	 eax, DWORD PTR _node2$[ebp]
  00088	75 07		 jne	 SHORT $LN9@get_road_l

; 846  : 	{
; 847  : 
; 848  : 		return NULL;

  0008a	33 c0		 xor	 eax, eax
  0008c	e9 88 00 00 00	 jmp	 $LN1@get_road_l
$LN9@get_road_l:

; 849  : 	}
; 850  : 
; 851  : 	//
; 852  : 	// correct order
; 853  : 	//
; 854  : 
; 855  : 	if (node1 > node2)

  00091	8b 45 08	 mov	 eax, DWORD PTR _node1$[ebp]
  00094	3b 45 0c	 cmp	 eax, DWORD PTR _node2$[ebp]
  00097	7e 12		 jle	 SHORT $LN10@get_road_l

; 856  : 	{
; 857  : 
; 858  : 		int
; 859  : 			temp;
; 860  : 
; 861  : 		temp = node1;

  00099	8b 45 08	 mov	 eax, DWORD PTR _node1$[ebp]
  0009c	89 45 f8	 mov	 DWORD PTR _temp$1[ebp], eax

; 862  : 
; 863  : 		node1 = node2;

  0009f	8b 45 0c	 mov	 eax, DWORD PTR _node2$[ebp]
  000a2	89 45 08	 mov	 DWORD PTR _node1$[ebp], eax

; 864  : 
; 865  : 		node2 = temp;

  000a5	8b 45 f8	 mov	 eax, DWORD PTR _temp$1[ebp]
  000a8	89 45 0c	 mov	 DWORD PTR _node2$[ebp], eax
$LN10@get_road_l:

; 866  : 	}
; 867  : 
; 868  : 	//
; 869  : 	// Search for route
; 870  : 	//
; 871  : 
; 872  : 	for (loop = (total_road_node_link_count - 1); loop >= 0; loop --)

  000ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?total_road_node_link_count@@3HA ; total_road_node_link_count
  000b0	83 e8 01	 sub	 eax, 1
  000b3	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
  000b6	eb 09		 jmp	 SHORT $LN4@get_road_l
$LN2@get_road_l:
  000b8	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  000bb	83 e8 01	 sub	 eax, 1
  000be	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@get_road_l:
  000c1	83 7d fc 00	 cmp	 DWORD PTR _loop$[ebp], 0
  000c5	7c 3b		 jl	 SHORT $LN3@get_road_l

; 873  : 	{
; 874  : 
; 875  : 		//
; 876  : 		// setup index pointers for forward wp list
; 877  : 		//
; 878  : 
; 879  : 		if ((road_node_link_positions [loop].source == node1) && (road_node_link_positions [loop].destination == node2))

  000c7	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  000ca	c1 e0 04	 shl	 eax, 4
  000cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_node_link_positions@@3PAUNODE_LINK_DATA@@A ; road_node_link_positions
  000d3	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  000d7	3b 55 08	 cmp	 edx, DWORD PTR _node1$[ebp]
  000da	75 24		 jne	 SHORT $LN11@get_road_l
  000dc	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  000df	c1 e0 04	 shl	 eax, 4
  000e2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_node_link_positions@@3PAUNODE_LINK_DATA@@A ; road_node_link_positions
  000e8	0f b7 54 01 02	 movzx	 edx, WORD PTR [ecx+eax+2]
  000ed	3b 55 0c	 cmp	 edx, DWORD PTR _node2$[ebp]
  000f0	75 0e		 jne	 SHORT $LN11@get_road_l

; 880  : 		{
; 881  : 
; 882  : 			return &road_node_link_positions [loop];

  000f2	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  000f5	c1 e0 04	 shl	 eax, 4
  000f8	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?road_node_link_positions@@3PAUNODE_LINK_DATA@@A ; road_node_link_positions
  000fe	eb 19		 jmp	 SHORT $LN1@get_road_l
$LN11@get_road_l:

; 883  : 		}
; 884  : 	}

  00100	eb b6		 jmp	 SHORT $LN2@get_road_l
$LN3@get_road_l:

; 885  : 
; 886  : 	debug_log ("AI_ROUTE: Warning! Link between %d and %d not found", node1, node2);

  00102	8b 45 0c	 mov	 eax, DWORD PTR _node2$[ebp]
  00105	50		 push	 eax
  00106	8b 4d 08	 mov	 ecx, DWORD PTR _node1$[ebp]
  00109	51		 push	 ecx
  0010a	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OGBCFFFK@AI_ROUTE?3?5Warning?$CB?5Link?5between@
  0010f	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00114	83 c4 0c	 add	 esp, 12			; 0000000cH

; 887  : 
; 888  : 	return NULL;

  00117	33 c0		 xor	 eax, eax
$LN1@get_road_l:

; 889  : }

  00119	5f		 pop	 edi
  0011a	5e		 pop	 esi
  0011b	5b		 pop	 ebx
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c2 08 00	 ret	 8
?get_road_link_data@@YGPAUNODE_LINK_DATA@@HH@Z ENDP	; get_road_link_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\ai_misc\ai_route.c
;	COMDAT ?deinitialise_road_route_data@@YGXXZ
_TEXT	SEGMENT
_loop$ = -4						; size = 4
?deinitialise_road_route_data@@YGXXZ PROC		; deinitialise_road_route_data, COMDAT

; 194  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 195  : 
; 196  :    int
; 197  :       loop;
; 198  : 
; 199  :    //
; 200  :    // Free road_nodes
; 201  :    //
; 202  : 
; 203  :    if (road_nodes)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A, 0 ; road_nodes
  00010	74 4f		 je	 SHORT $LN8@deinitiali

; 204  :    {
; 205  :    
; 206  :       for (loop = 0; loop < total_number_of_road_nodes; loop ++)

  00012	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  00019	eb 09		 jmp	 SHORT $LN4@deinitiali
$LN2@deinitiali:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  0001e	83 c0 01	 add	 eax, 1
  00021	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@deinitiali:
  00024	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00027	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?total_number_of_road_nodes@@3HA ; total_number_of_road_nodes
  0002d	7d 27		 jge	 SHORT $LN3@deinitiali

; 207  :       {
; 208  : 
; 209  :          if (road_nodes [loop].links)

  0002f	6b 45 fc 0c	 imul	 eax, DWORD PTR _loop$[ebp], 12
  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A ; road_nodes
  00039	83 7c 01 08 00	 cmp	 DWORD PTR [ecx+eax+8], 0
  0003e	74 14		 je	 SHORT $LN9@deinitiali

; 210  :          {
; 211  :    
; 212  :             free_mem (road_nodes [loop].links);

  00040	6b 45 fc 0c	 imul	 eax, DWORD PTR _loop$[ebp], 12
  00044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A ; road_nodes
  0004a	8b 54 01 08	 mov	 edx, DWORD PTR [ecx+eax+8]
  0004e	52		 push	 edx
  0004f	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem
$LN9@deinitiali:

; 213  :       
; 214  :             #if AI_DEBUG
; 215  :          
; 216  :             ai_memory_counter --;
; 217  :          
; 218  :             #endif
; 219  :          }
; 220  :       }

  00054	eb c5		 jmp	 SHORT $LN2@deinitiali
$LN3@deinitiali:

; 221  :    
; 222  :       free_mem (road_nodes);

  00056	a1 00 00 00 00	 mov	 eax, DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A ; road_nodes
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem
$LN8@deinitiali:

; 223  : 
; 224  :       #if AI_DEBUG
; 225  :    
; 226  : 		ai_memory_counter --;
; 227  : 	
; 228  : 		#endif
; 229  : 	}
; 230  : 
; 231  : 	//
; 232  : 	// Free node road_node_link_positions
; 233  : 	//
; 234  : 
; 235  : 	if (road_node_positions)

  00061	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?road_node_positions@@3PAUVEC3D@@A, 0 ; road_node_positions
  00068	74 0b		 je	 SHORT $LN10@deinitiali

; 236  : 	{
; 237  : 
; 238  : 		free_mem (road_node_positions);

  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?road_node_positions@@3PAUVEC3D@@A ; road_node_positions
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem
$LN10@deinitiali:

; 239  : 
; 240  : 		#if AI_DEBUG
; 241  : 	
; 242  : 		ai_memory_counter --;
; 243  : 	
; 244  : 		#endif
; 245  : 	}
; 246  : 
; 247  : 	//
; 248  : 	// Free all road_node_link_positions for node links
; 249  : 	//
; 250  : 
; 251  : 	if (road_node_link_positions)

  00075	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?road_node_link_positions@@3PAUNODE_LINK_DATA@@A, 0 ; road_node_link_positions
  0007c	0f 84 80 00 00
	00		 je	 $LN11@deinitiali

; 252  : 	{
; 253  : 	
; 254  : 		for (loop = 0; loop < total_road_node_link_count; loop ++)

  00082	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  00089	eb 09		 jmp	 SHORT $LN7@deinitiali
$LN5@deinitiali:
  0008b	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  0008e	83 c0 01	 add	 eax, 1
  00091	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN7@deinitiali:
  00094	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00097	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?total_road_node_link_count@@3HA ; total_road_node_link_count
  0009d	7d 58		 jge	 SHORT $LN6@deinitiali

; 255  : 		{
; 256  : 
; 257  : 			if (road_node_link_positions [loop].number_of_links > 0)

  0009f	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  000a2	c1 e0 04	 shl	 eax, 4
  000a5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_node_link_positions@@3PAUNODE_LINK_DATA@@A ; road_node_link_positions
  000ab	0f b7 54 01 06	 movzx	 edx, WORD PTR [ecx+eax+6]
  000b0	85 d2		 test	 edx, edx
  000b2	7e 41		 jle	 SHORT $LN12@deinitiali

; 258  : 			{
; 259  : 
; 260  : 				ASSERT (road_node_link_positions [loop].link_positions);

  000b4	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  000b7	c1 e0 04	 shl	 eax, 4
  000ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_node_link_positions@@3PAUNODE_LINK_DATA@@A ; road_node_link_positions
  000c0	83 7c 01 0c 00	 cmp	 DWORD PTR [ecx+eax+12], 0
  000c5	75 18		 jne	 SHORT $LN13@deinitiali
  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??deinitialise_road_route_data@@YGXXZ@4JA
  000cc	83 c0 42	 add	 eax, 66			; 00000042H
  000cf	50		 push	 eax
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@FGDCJMLC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@ONICAEGO@road_node_link_positions?5?$FLloop?$FN@
  000da	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN13@deinitiali:

; 261  : 	
; 262  : 				free_mem (road_node_link_positions [loop].link_positions);

  000df	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  000e2	c1 e0 04	 shl	 eax, 4
  000e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_node_link_positions@@3PAUNODE_LINK_DATA@@A ; road_node_link_positions
  000eb	8b 54 01 0c	 mov	 edx, DWORD PTR [ecx+eax+12]
  000ef	52		 push	 edx
  000f0	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem
$LN12@deinitiali:

; 263  : 		
; 264  : 				#if AI_DEBUG
; 265  : 			
; 266  : 				ai_memory_counter --;
; 267  : 			
; 268  : 				#endif
; 269  : 			}
; 270  : 		}

  000f5	eb 94		 jmp	 SHORT $LN5@deinitiali
$LN6@deinitiali:

; 271  : 	
; 272  : 		free_mem (road_node_link_positions);

  000f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?road_node_link_positions@@3PAUNODE_LINK_DATA@@A ; road_node_link_positions
  000fc	50		 push	 eax
  000fd	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem
$LN11@deinitiali:

; 273  : 
; 274  : 		#if AI_DEBUG
; 275  : 	
; 276  : 		ai_memory_counter --;
; 277  : 	
; 278  : 		#endif
; 279  : 	}
; 280  : 
; 281  :    road_node_link_positions = NULL;

  00102	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?road_node_link_positions@@3PAUNODE_LINK_DATA@@A, 0 ; road_node_link_positions

; 282  :    road_node_positions = NULL;

  0010c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?road_node_positions@@3PAUVEC3D@@A, 0 ; road_node_positions

; 283  :    road_nodes = NULL;

  00116	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A, 0 ; road_nodes

; 284  : 
; 285  :    total_road_node_link_count = 0;

  00120	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?total_road_node_link_count@@3HA, 0 ; total_road_node_link_count

; 286  :    total_number_of_road_nodes = 0;

  0012a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?total_number_of_road_nodes@@3HA, 0 ; total_number_of_road_nodes

; 287  : }

  00134	5f		 pop	 edi
  00135	5e		 pop	 esi
  00136	5b		 pop	 ebx
  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c3		 ret	 0
?deinitialise_road_route_data@@YGXXZ ENDP		; deinitialise_road_route_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\ai_misc\ai_route.c
;	COMDAT ?deinitialise_route_data@@YGXXZ
_TEXT	SEGMENT
?deinitialise_route_data@@YGXXZ PROC			; deinitialise_route_data, COMDAT

; 178  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 179  : 
; 180  :    #if DEBUG_MODULE
; 181  : 
; 182  :    debug_log ("ROUTE: Deinitialise");
; 183  : 
; 184  :    #endif
; 185  : 
; 186  : 	deinitialise_road_route_data ();

  00009	e8 00 00 00 00	 call	 ?deinitialise_road_route_data@@YGXXZ ; deinitialise_road_route_data

; 187  : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?deinitialise_route_data@@YGXXZ ENDP			; deinitialise_route_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\ai_misc\ai_route.c
;	COMDAT ?clear_road_route_data@@YGXXZ
_TEXT	SEGMENT
_loop$ = -4						; size = 4
?clear_road_route_data@@YGXXZ PROC			; clear_road_route_data, COMDAT

; 785  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 786  : 
; 787  : 	int
; 788  : 		loop;
; 789  : 
; 790  : 	if (!get_road_nodes_loaded ())

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?road_nodes_loaded@@3HA, 0 ; road_nodes_loaded
  00010	75 02		 jne	 SHORT $LN5@clear_road

; 791  : 	{
; 792  : 
; 793  : 		return;

  00012	eb 5a		 jmp	 SHORT $LN1@clear_road
$LN5@clear_road:

; 794  : 	}
; 795  : 
; 796  : 	best_recurse_level = 0;

  00014	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?best_recurse_level@@3HA, 0 ; best_recurse_level

; 797  : 
; 798  : 	//
; 799  : 	// initialise node visited data
; 800  : 	//
; 801  : 
; 802  : 	if (road_nodes)

  0001e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A, 0 ; road_nodes
  00025	74 47		 je	 SHORT $LN1@clear_road

; 803  : 	{
; 804  : 	
; 805  : 		for (loop = 0; loop < total_number_of_road_nodes; loop ++)

  00027	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  0002e	eb 09		 jmp	 SHORT $LN4@clear_road
$LN2@clear_road:
  00030	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00033	83 c0 01	 add	 eax, 1
  00036	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@clear_road:
  00039	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  0003c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?total_number_of_road_nodes@@3HA ; total_number_of_road_nodes
  00042	7d 2a		 jge	 SHORT $LN1@clear_road

; 806  : 		{
; 807  : 	
; 808  : 			road_nodes [loop].visited = MAX_ROUTE_LENGTH;

  00044	6b 45 fc 0c	 imul	 eax, DWORD PTR _loop$[ebp], 12
  00048	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A ; road_nodes
  0004e	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  00052	81 e2 7f c0 ff
	ff		 and	 edx, -16257		; ffffc07fH
  00058	81 ca 00 32 00
	00		 or	 edx, 12800		; 00003200H
  0005e	6b 45 fc 0c	 imul	 eax, DWORD PTR _loop$[ebp], 12
  00062	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A ; road_nodes
  00068	89 54 01 04	 mov	 DWORD PTR [ecx+eax+4], edx

; 809  : 		}

  0006c	eb c2		 jmp	 SHORT $LN2@clear_road
$LN1@clear_road:

; 810  : 	}
; 811  : }

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
?clear_road_route_data@@YGXXZ ENDP			; clear_road_route_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\ai_misc\ai_route.c
;	COMDAT ?read_road_route_data@@YGXXZ
_TEXT	SEGMENT
?read_road_route_data@@YGXXZ PROC			; read_road_route_data, COMDAT

; 294  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 295  : 
; 296  : 	#if DEBUG_MODULE
; 297  : 
; 298  : 	debug_log ("AI_ROUTE: loading road node database");
; 299  : 
; 300  : 	#endif
; 301  : 
; 302  :    if (read_road_route_node_data ("ROADS"))

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_05BAHFCMOL@ROADS@
  0000e	e8 00 00 00 00	 call	 ?read_road_route_node_data@@YGHPAD@Z ; read_road_route_node_data
  00013	85 c0		 test	 eax, eax
  00015	74 16		 je	 SHORT $LN2@read_road_

; 303  : 	{
; 304  : 	   read_road_route_node_positions ("ROADS");

  00017	68 00 00 00 00	 push	 OFFSET ??_C@_05BAHFCMOL@ROADS@
  0001c	e8 00 00 00 00	 call	 ?read_road_route_node_positions@@YGHPAD@Z ; read_road_route_node_positions

; 305  : 
; 306  :    	read_road_route_node_link_positions ("ROADS");

  00021	68 00 00 00 00	 push	 OFFSET ??_C@_05BAHFCMOL@ROADS@
  00026	e8 00 00 00 00	 call	 ?read_road_route_node_link_positions@@YGHPAD@Z ; read_road_route_node_link_positions
  0002b	eb 22		 jmp	 SHORT $LN1@read_road_
$LN2@read_road_:

; 307  : 	}
; 308  : 	else if (read_road_route_node_data ("ROADDATA"))

  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_08MPFGFNKO@ROADDATA@
  00032	e8 00 00 00 00	 call	 ?read_road_route_node_data@@YGHPAD@Z ; read_road_route_node_data
  00037	85 c0		 test	 eax, eax
  00039	74 14		 je	 SHORT $LN1@read_road_

; 309  : 	{
; 310  : 	   read_road_route_node_positions ("ROADDATA");

  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_08MPFGFNKO@ROADDATA@
  00040	e8 00 00 00 00	 call	 ?read_road_route_node_positions@@YGHPAD@Z ; read_road_route_node_positions

; 311  : 
; 312  :    	read_road_route_node_link_positions ("ROADDATA");

  00045	68 00 00 00 00	 push	 OFFSET ??_C@_08MPFGFNKO@ROADDATA@
  0004a	e8 00 00 00 00	 call	 ?read_road_route_node_link_positions@@YGHPAD@Z ; read_road_route_node_link_positions
$LN1@read_road_:

; 313  : 	}
; 314  : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?read_road_route_data@@YGXXZ ENDP			; read_road_route_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\ai_misc\ai_route.c
;	COMDAT ?load_route_data@@YGXXZ
_TEXT	SEGMENT
?load_route_data@@YGXXZ PROC				; load_route_data, COMDAT

; 167  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 168  : 	deinitialise_road_route_data ();

  00009	e8 00 00 00 00	 call	 ?deinitialise_road_route_data@@YGXXZ ; deinitialise_road_route_data

; 169  : 
; 170  : 	read_road_route_data ();

  0000e	e8 00 00 00 00	 call	 ?read_road_route_data@@YGXXZ ; read_road_route_data

; 171  : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?load_route_data@@YGXXZ ENDP				; load_route_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\ai\ai_misc\ai_route.c
;	COMDAT ?initialise_route_data@@YGXXZ
_TEXT	SEGMENT
?initialise_route_data@@YGXXZ PROC			; initialise_route_data, COMDAT

; 141  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 142  : 
; 143  : 	deinitialise_route_data ();

  00009	e8 00 00 00 00	 call	 ?deinitialise_route_data@@YGXXZ ; deinitialise_route_data

; 144  : 
; 145  :    #if DEBUG_MODULE
; 146  : 
; 147  :    debug_log ("ROUTE: Initialise ");
; 148  : 
; 149  :    #endif
; 150  : 
; 151  : 	road_nodes_loaded = FALSE;

  0000e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?road_nodes_loaded@@3HA, 0 ; road_nodes_loaded

; 152  : 
; 153  :    road_node_link_positions = NULL;

  00018	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?road_node_link_positions@@3PAUNODE_LINK_DATA@@A, 0 ; road_node_link_positions

; 154  :    road_node_positions = NULL;

  00022	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?road_node_positions@@3PAUVEC3D@@A, 0 ; road_node_positions

; 155  :    road_nodes = NULL;

  0002c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?road_nodes@@3PAUNODE_DATA@@A, 0 ; road_nodes

; 156  : 
; 157  :    total_road_node_link_count = 0;

  00036	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?total_road_node_link_count@@3HA, 0 ; total_road_node_link_count

; 158  : 
; 159  :    total_number_of_road_nodes = 0;

  00040	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?total_number_of_road_nodes@@3HA, 0 ; total_number_of_road_nodes

; 160  : }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?initialise_route_data@@YGXXZ ENDP			; initialise_route_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
