; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\userint2\ui_obj\slider\mslider.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?scroll@@3MA					; scroll
_BSS	SEGMENT
?scroll@@3MA DD	01H DUP (?)				; scroll
_BSS	ENDS
PUBLIC	?ui_object_mslider_function@@YGXPAUUI_OBJECT@@PAX@Z ; ui_object_mslider_function
PUBLIC	?mslider_move_function@@YGXPAUEVENT@@@Z		; mslider_move_function
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0CD@JDPJLBIK@setting?5current?5object?5to?5slide@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	__real@3f800000
PUBLIC	__real@bf800000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?get_mouse_x@@YGHXZ:PROC			; get_mouse_x
EXTRN	?get_mouse_y@@YGHXZ:PROC			; get_mouse_y
EXTRN	?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z:PROC	; set_event
EXTRN	?check_ui_object_for_selection@@YGPAUUI_OBJECT@@PAU1@HH@Z:PROC ; check_ui_object_for_selection
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?fn_get_ui_object_y@@3PAP6GMPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_y
EXTRN	?fn_get_ui_object_y_size@@3PAP6GMPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_y_size
EXTRN	?fn_set_ui_object_state@@3PAP6GXPAUUI_OBJECT@@H@ZA:BYTE ; fn_set_ui_object_state
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?current_object_to_slide@@3PAUUI_OBJECT@@A DD 01H DUP (?) ; current_object_to_slide
?obj@?1??mslider_move_function@@YGXPAUEVENT@@@Z@4PAUUI_OBJECT@@A DD 01H DUP (?) ; `mslider_move_function'::`2'::obj
_BSS	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JDPJLBIK@setting?5current?5object?5to?5slide@
CONST	SEGMENT
??_C@_0CD@JDPJLBIK@setting?5current?5object?5to?5slide@ DB 'setting curre'
	DB	'nt object to slide %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_obj\slider\mslider.c
;	COMDAT ?mslider_move_function@@YGXPAUEVENT@@@Z
_TEXT	SEGMENT
tv233 = -100						; size = 4
tv218 = -100						; size = 4
tv251 = -96						; size = 4
tv249 = -96						; size = 4
tv226 = -92						; size = 4
tv211 = -92						; size = 4
tv196 = -92						; size = 4
tv189 = -92						; size = 4
$T1 = -88						; size = 4
$T2 = -84						; size = 4
$T3 = -80						; size = 4
$T4 = -76						; size = 4
_mouse_y$ = -8						; size = 4
_mouse_x$ = -4						; size = 4
_ev$ = 8						; size = 4
?mslider_move_function@@YGXPAUEVENT@@@Z PROC		; mslider_move_function, COMDAT

; 129  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 130  : 
; 131  : 	float
; 132  : 		mouse_x,
; 133  : 		mouse_y;
; 134  : 
; 135  : 	static ui_object
; 136  : 		*obj;
; 137  : 
; 138  : 	if (current_object_to_slide)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_object_to_slide@@3PAUUI_OBJECT@@A, 0
  00010	0f 84 f3 01 00
	00		 je	 $LN7@mslider_mo

; 139  : 	{
; 140  : 
; 141  : 		mouse_x = get_mouse_x ();

  00016	e8 00 00 00 00	 call	 ?get_mouse_x@@YGHXZ	; get_mouse_x
  0001b	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0001f	f3 0f 11 45 fc	 movss	 DWORD PTR _mouse_x$[ebp], xmm0

; 142  : 
; 143  : 		mouse_y = get_mouse_y ();

  00024	e8 00 00 00 00	 call	 ?get_mouse_y@@YGHXZ	; get_mouse_y
  00029	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0002d	f3 0f 11 45 f8	 movss	 DWORD PTR _mouse_y$[ebp], xmm0

; 144  : 
; 145  : 		if (mouse_y < get_ui_object_y (current_object_to_slide))

  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_to_slide@@3PAUUI_OBJECT@@A
  00037	50		 push	 eax
  00038	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_to_slide@@3PAUUI_OBJECT@@A
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_y@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  00047	ff d0		 call	 eax
  00049	d9 5d a4	 fstp	 DWORD PTR tv189[ebp]
  0004c	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR tv189[ebp]
  00051	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _mouse_y$[ebp]
  00055	76 75		 jbe	 SHORT $LN3@mslider_mo

; 146  : 		{
; 147  : 
; 148  : 			scroll = max (-1.0f, (get_ui_object_y (current_object_to_slide) - mouse_y) * get_delta_time ());

  00057	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_to_slide@@3PAUUI_OBJECT@@A
  0005c	50		 push	 eax
  0005d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_to_slide@@3PAUUI_OBJECT@@A
  00063	8b 11		 mov	 edx, DWORD PTR [ecx]
  00065	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_y@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  0006c	ff d0		 call	 eax
  0006e	d9 5d a4	 fstp	 DWORD PTR tv196[ebp]
  00071	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR tv196[ebp]
  00076	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _mouse_y$[ebp]
  0007b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00083	f3 0f 11 45 b4	 movss	 DWORD PTR $T4[ebp], xmm0
  00088	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00090	f3 0f 11 45 b0	 movss	 DWORD PTR $T3[ebp], xmm0
  00095	8d 4d b4	 lea	 ecx, DWORD PTR $T4[ebp]
  00098	51		 push	 ecx
  00099	8d 55 b0	 lea	 edx, DWORD PTR $T3[ebp]
  0009c	52		 push	 edx
  0009d	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  000a2	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000a6	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?scroll@@3MA, xmm0

; 149  : 
; 150  : 			set_ui_object_state (current_object_to_slide, UI_OBJECT_STATE_OFF);

  000ae	6a 00		 push	 0
  000b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_to_slide@@3PAUUI_OBJECT@@A
  000b5	50		 push	 eax
  000b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_to_slide@@3PAUUI_OBJECT@@A
  000bc	8b 11		 mov	 edx, DWORD PTR [ecx]
  000be	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_state@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  000c5	ff d0		 call	 eax
  000c7	e9 3d 01 00 00	 jmp	 $LN7@mslider_mo
$LN3@mslider_mo:

; 151  : 		}
; 152  : 		else if (mouse_y > get_ui_object_y (current_object_to_slide) + get_ui_object_y_size (current_object_to_slide))

  000cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_to_slide@@3PAUUI_OBJECT@@A
  000d1	50		 push	 eax
  000d2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_to_slide@@3PAUUI_OBJECT@@A
  000d8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000da	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_y@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  000e1	ff d0		 call	 eax
  000e3	d9 5d a4	 fstp	 DWORD PTR tv211[ebp]
  000e6	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR tv211[ebp]
  000eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_to_slide@@3PAUUI_OBJECT@@A
  000f1	51		 push	 ecx
  000f2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_to_slide@@3PAUUI_OBJECT@@A
  000f8	8b 02		 mov	 eax, DWORD PTR [edx]
  000fa	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_ui_object_y_size@@3PAP6GMPAUUI_OBJECT@@@ZA[eax*4]
  00101	f3 0f 11 45 a0	 movss	 DWORD PTR tv249[ebp], xmm0
  00106	ff d1		 call	 ecx
  00108	d9 5d 9c	 fstp	 DWORD PTR tv218[ebp]
  0010b	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR tv249[ebp]
  00110	f3 0f 58 45 9c	 addss	 xmm0, DWORD PTR tv218[ebp]
  00115	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _mouse_y$[ebp]
  0011a	0f 2f c8	 comiss	 xmm1, xmm0
  0011d	0f 86 9c 00 00
	00		 jbe	 $LN5@mslider_mo

; 153  : 		{
; 154  : 
; 155  : 			scroll = min (1.0f, (get_ui_object_y (current_object_to_slide) + get_ui_object_y_size (current_object_to_slide) - mouse_y) * get_delta_time ());

  00123	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_to_slide@@3PAUUI_OBJECT@@A
  00128	50		 push	 eax
  00129	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_to_slide@@3PAUUI_OBJECT@@A
  0012f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00131	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_y@@3PAP6GMPAUUI_OBJECT@@@ZA[edx*4]
  00138	ff d0		 call	 eax
  0013a	d9 5d a4	 fstp	 DWORD PTR tv226[ebp]
  0013d	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR tv226[ebp]
  00142	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_to_slide@@3PAUUI_OBJECT@@A
  00148	51		 push	 ecx
  00149	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_to_slide@@3PAUUI_OBJECT@@A
  0014f	8b 02		 mov	 eax, DWORD PTR [edx]
  00151	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_ui_object_y_size@@3PAP6GMPAUUI_OBJECT@@@ZA[eax*4]
  00158	f3 0f 11 45 a0	 movss	 DWORD PTR tv251[ebp], xmm0
  0015d	ff d1		 call	 ecx
  0015f	d9 5d 9c	 fstp	 DWORD PTR tv233[ebp]
  00162	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR tv251[ebp]
  00167	f3 0f 58 45 9c	 addss	 xmm0, DWORD PTR tv233[ebp]
  0016c	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _mouse_y$[ebp]
  00171	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00179	f3 0f 11 45 ac	 movss	 DWORD PTR $T2[ebp], xmm0
  0017e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00186	f3 0f 11 45 a8	 movss	 DWORD PTR $T1[ebp], xmm0
  0018b	8d 55 ac	 lea	 edx, DWORD PTR $T2[ebp]
  0018e	52		 push	 edx
  0018f	8d 45 a8	 lea	 eax, DWORD PTR $T1[ebp]
  00192	50		 push	 eax
  00193	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00198	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0019c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?scroll@@3MA, xmm0

; 156  : 
; 157  : 			set_ui_object_state (current_object_to_slide, UI_OBJECT_STATE_OFF);

  001a4	6a 00		 push	 0
  001a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_to_slide@@3PAUUI_OBJECT@@A
  001ab	50		 push	 eax
  001ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_to_slide@@3PAUUI_OBJECT@@A
  001b2	8b 11		 mov	 edx, DWORD PTR [ecx]
  001b4	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_state@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  001bb	ff d0		 call	 eax

; 158  : 		}
; 159  : 		else

  001bd	eb 4a		 jmp	 SHORT $LN7@mslider_mo
$LN5@mslider_mo:

; 160  : 		{
; 161  : 
; 162  : 			scroll = 0.0;

  001bf	0f 57 c0	 xorps	 xmm0, xmm0
  001c2	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?scroll@@3MA, xmm0

; 163  : 
; 164  : 			obj = check_ui_object_for_selection (current_object_to_slide, mouse_x, mouse_y);

  001ca	f3 0f 2c 45 f8	 cvttss2si eax, DWORD PTR _mouse_y$[ebp]
  001cf	50		 push	 eax
  001d0	f3 0f 2c 4d fc	 cvttss2si ecx, DWORD PTR _mouse_x$[ebp]
  001d5	51		 push	 ecx
  001d6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_to_slide@@3PAUUI_OBJECT@@A
  001dc	52		 push	 edx
  001dd	e8 00 00 00 00	 call	 ?check_ui_object_for_selection@@YGPAUUI_OBJECT@@PAU1@HH@Z ; check_ui_object_for_selection
  001e2	a3 00 00 00 00	 mov	 DWORD PTR ?obj@?1??mslider_move_function@@YGXPAUEVENT@@@Z@4PAUUI_OBJECT@@A, eax

; 165  : 
; 166  : 			if (obj)

  001e7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?obj@?1??mslider_move_function@@YGXPAUEVENT@@@Z@4PAUUI_OBJECT@@A, 0
  001ee	74 19		 je	 SHORT $LN7@mslider_mo

; 167  : 			{
; 168  : 
; 169  : 				set_ui_object_state (obj, UI_OBJECT_STATE_ON);

  001f0	6a 01		 push	 1
  001f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?obj@?1??mslider_move_function@@YGXPAUEVENT@@@Z@4PAUUI_OBJECT@@A
  001f7	50		 push	 eax
  001f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?obj@?1??mslider_move_function@@YGXPAUEVENT@@@Z@4PAUUI_OBJECT@@A
  001fe	8b 11		 mov	 edx, DWORD PTR [ecx]
  00200	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_state@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  00207	ff d0		 call	 eax
$LN7@mslider_mo:

; 170  : 			}
; 171  : 		}
; 172  : 	}
; 173  : }

  00209	5f		 pop	 edi
  0020a	5e		 pop	 esi
  0020b	5b		 pop	 ebx
  0020c	8b e5		 mov	 esp, ebp
  0020e	5d		 pop	 ebp
  0020f	c2 04 00	 ret	 4
?mslider_move_function@@YGXPAUEVENT@@@Z ENDP		; mslider_move_function
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_obj\slider\mslider.c
;	COMDAT ?ui_object_mslider_function@@YGXPAUUI_OBJECT@@PAX@Z
_TEXT	SEGMENT
_obj$ = 8						; size = 4
_arg$ = 12						; size = 4
?ui_object_mslider_function@@YGXPAUUI_OBJECT@@PAX@Z PROC ; ui_object_mslider_function, COMDAT

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 85   : 
; 86   : 	if ((int) arg == BUTTON_STATE_DOWN)

  00009	83 7d 0c 02	 cmp	 DWORD PTR _arg$[ebp], 2
  0000d	75 6a		 jne	 SHORT $LN2@ui_object_

; 87   : 	{
; 88   : 
; 89   : 		if (!current_object_to_slide)

  0000f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_object_to_slide@@3PAUUI_OBJECT@@A, 0
  00016	75 5f		 jne	 SHORT $LN4@ui_object_

; 90   : 		{
; 91   : 	
; 92   : 			current_object_to_slide = obj;

  00018	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0001b	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_to_slide@@3PAUUI_OBJECT@@A, eax

; 93   : 	
; 94   : 			debug_log ("setting current object to slide %d", obj);

  00020	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@JDPJLBIK@setting?5current?5object?5to?5slide@
  00029	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0002e	83 c4 08	 add	 esp, 8

; 95   : 	
; 96   : 			// turn off all options
; 97   : 	
; 98   : 			set_ui_object_state (current_object_to_slide, UI_OBJECT_STATE_OFF);

  00031	6a 00		 push	 0
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_to_slide@@3PAUUI_OBJECT@@A
  00038	50		 push	 eax
  00039	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_to_slide@@3PAUUI_OBJECT@@A
  0003f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00041	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_state@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  00048	ff d0		 call	 eax

; 99   : 	
; 100  : 			set_event (MOUSE_MOVE_UP, MODIFIER_MOUSE_LEFT_BUTTON, BUTTON_STATE_EITHER, mslider_move_function);

  0004a	68 00 00 00 00	 push	 OFFSET ?mslider_move_function@@YGXPAUEVENT@@@Z ; mslider_move_function
  0004f	6a 03		 push	 3
  00051	6a 07		 push	 7
  00053	68 03 01 00 00	 push	 259			; 00000103H
  00058	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 101  : 	
; 102  : 			set_event (MOUSE_MOVE_DOWN, MODIFIER_MOUSE_LEFT_BUTTON, BUTTON_STATE_EITHER, mslider_move_function);

  0005d	68 00 00 00 00	 push	 OFFSET ?mslider_move_function@@YGXPAUEVENT@@@Z ; mslider_move_function
  00062	6a 03		 push	 3
  00064	6a 07		 push	 7
  00066	68 04 01 00 00	 push	 260			; 00000104H
  0006b	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 103  : 	
; 104  : 			mslider_move_function (NULL);

  00070	6a 00		 push	 0
  00072	e8 00 00 00 00	 call	 ?mslider_move_function@@YGXPAUEVENT@@@Z ; mslider_move_function
$LN4@ui_object_:

; 105  : 		}
; 106  : 	}

  00077	eb 52		 jmp	 SHORT $LN1@ui_object_
$LN2@ui_object_:

; 107  : 	else if ((int) arg == BUTTON_STATE_UP)

  00079	83 7d 0c 01	 cmp	 DWORD PTR _arg$[ebp], 1
  0007d	75 4c		 jne	 SHORT $LN1@ui_object_

; 108  : 	{
; 109  : 
; 110  : 		if (current_object_to_slide)

  0007f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_object_to_slide@@3PAUUI_OBJECT@@A, 0
  00086	74 43		 je	 SHORT $LN1@ui_object_

; 111  : 		{
; 112  : 	
; 113  : 			set_ui_object_state (current_object_to_slide, UI_OBJECT_STATE_OFF);

  00088	6a 00		 push	 0
  0008a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_to_slide@@3PAUUI_OBJECT@@A
  0008f	50		 push	 eax
  00090	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_to_slide@@3PAUUI_OBJECT@@A
  00096	8b 11		 mov	 edx, DWORD PTR [ecx]
  00098	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_state@@3PAP6GXPAUUI_OBJECT@@H@ZA[edx*4]
  0009f	ff d0		 call	 eax

; 114  : 	
; 115  : 			current_object_to_slide = NULL;

  000a1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_object_to_slide@@3PAUUI_OBJECT@@A, 0

; 116  : 	
; 117  : 			set_event (MOUSE_MOVE_UP, MODIFIER_NONE, BUTTON_STATE_EITHER, NULL);

  000ab	6a 00		 push	 0
  000ad	6a 03		 push	 3
  000af	6a 00		 push	 0
  000b1	68 03 01 00 00	 push	 259			; 00000103H
  000b6	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 118  : 	
; 119  : 			set_event (MOUSE_MOVE_DOWN, MODIFIER_NONE, BUTTON_STATE_EITHER, NULL);

  000bb	6a 00		 push	 0
  000bd	6a 03		 push	 3
  000bf	6a 00		 push	 0
  000c1	68 04 01 00 00	 push	 260			; 00000104H
  000c6	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event
$LN1@ui_object_:

; 120  : 		}
; 121  : 	}
; 122  : }

  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 08 00	 ret	 8
?ui_object_mslider_function@@YGXPAUUI_OBJECT@@PAX@Z ENDP ; ui_object_mslider_function
_TEXT	ENDS
END
