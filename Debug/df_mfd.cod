; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	_atan2f
PUBLIC	_cosf
PUBLIC	_fmodf
PUBLIC	_sinf
PUBLIC	_tanf
PUBLIC	?atan2@@YGMMM@Z					; atan2
PUBLIC	?cos@@YGMM@Z					; cos
PUBLIC	?fmod@@YGMMM@Z					; fmod
PUBLIC	?sin@@YGMM@Z					; sin
PUBLIC	?tan@@YGMM@Z					; tan
PUBLIC	?initialise_default_mfd@@YGXXZ			; initialise_default_mfd
PUBLIC	?deinitialise_default_mfd@@YGXXZ		; deinitialise_default_mfd
PUBLIC	?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode
PUBLIC	?draw_default_mfd_on_cockpit@@YGXMMHHW4MFD_LOCATIONS@@@Z ; draw_default_mfd_on_cockpit
PUBLIC	?draw_default_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z ; draw_default_mfd_on_texture
PUBLIC	?draw_overlaid_default_mfd@@YGXMMMW4MFD_LOCATIONS@@@Z ; draw_overlaid_default_mfd
PUBLIC	?select_next_default_tsd_ase_range@@YGXXZ	; select_next_default_tsd_ase_range
PUBLIC	?select_previous_default_tsd_ase_range@@YGXXZ	; select_previous_default_tsd_ase_range
PUBLIC	?select_next_default_tsd_declutter_level@@YGXXZ	; select_next_default_tsd_declutter_level
PUBLIC	?select_previous_default_tsd_declutter_level@@YGXXZ ; select_previous_default_tsd_declutter_level
PUBLIC	?select_next_default_tsd_underlay_level@@YGXXZ	; select_next_default_tsd_underlay_level
PUBLIC	?select_next_default_lhs_mfd@@YGXXZ		; select_next_default_lhs_mfd
PUBLIC	?select_previous_default_lhs_mfd@@YGXXZ		; select_previous_default_lhs_mfd
PUBLIC	?select_next_default_rhs_mfd@@YGXXZ		; select_next_default_rhs_mfd
PUBLIC	?select_previous_default_rhs_mfd@@YGXXZ		; select_previous_default_rhs_mfd
PUBLIC	?select_default_ground_radar_mfd@@YGXXZ		; select_default_ground_radar_mfd
PUBLIC	?select_default_air_radar_mfd@@YGXXZ		; select_default_air_radar_mfd
PUBLIC	?select_default_tads_mfd@@YGXXZ			; select_default_tads_mfd
PUBLIC	?toggle_default_ase_auto_page@@YGXXZ		; toggle_default_ase_auto_page
PUBLIC	?auto_page_default_ase_mfd@@YGXXZ		; auto_page_default_ase_mfd
PUBLIC	?toggle_default_lhs_mfd_on_off@@YGXXZ		; toggle_default_lhs_mfd_on_off
PUBLIC	?toggle_default_rhs_mfd_on_off@@YGXXZ		; toggle_default_rhs_mfd_on_off
PUBLIC	?get_default_mfd_has_focus@@YGHW4MFD_LOCATIONS@@@Z ; get_default_mfd_has_focus
PUBLIC	?get_default_tads_display_visible@@YGHXZ	; get_default_tads_display_visible
PUBLIC	?set_default_radar_zoomed@@YGXH@Z		; set_default_radar_zoomed
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	?__LINE__Var@?0??select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z@4JA ; `select_default_mfd_mode'::`1'::__LINE__Var
PUBLIC	??_C@_0DJ@HPJGECJI@?$CImfd_mode?5?$DO?$DN?5MFD_MODE_OFF?$CJ?5?$CG?$CG?5?$CI@ ; `string'
PUBLIC	??_C@_0BL@JNKLHOPK@mfd_mode?5?$CB?$DN?5MFD_MODE_LLLTV@ ; `string'
PUBLIC	??_C@_0EB@HOBNFLGC@?$CIlocation?5?$DN?$DN?5MFD_LOCATION_LHS?$CJ?5@ ; `string'
PUBLIC	??_C@_04LGBIGMFG@ZOOM@				; `string'
PUBLIC	??_C@_05LIPABGF@?$CF?40fm@			; `string'
PUBLIC	??_C@_06NBEADFGO@?$CF?40fKm@			; `string'
PUBLIC	??_C@_03MAMPKPPK@XXX@				; `string'
PUBLIC	?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA ; `display_radar_target_details'::`1'::__LINE__Var
PUBLIC	??_C@_05EMNNHGFM@radar@				; `string'
PUBLIC	??_C@_03NGNKAJPJ@?$CFdm@			; `string'
PUBLIC	??_C@_06OMCABMNO@?$CF?41fKm@			; `string'
PUBLIC	??_C@_06HCPKJKPH@NO?5LOS@			; `string'
PUBLIC	??_C@_04LMMJFDCN@AUTO@				; `string'
PUBLIC	??_C@_06KODELPLK@LOCKED@			; `string'
PUBLIC	??_C@_06GPMJGLEM@MARKED@			; `string'
PUBLIC	?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA ; `draw_radar_target_symbol'::`1'::__LINE__Var
PUBLIC	??_C@_06JJLAMBGK@target@			; `string'
PUBLIC	??_C@_0BA@IIPCKJML@source_position@		; `string'
PUBLIC	??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@ ; `string'
PUBLIC	??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA ; `draw_ground_radar_clutter'::`1'::__LINE__Var
PUBLIC	??_C@_0DD@KDAGALDF@get_local_entity_type?5?$CItarget?$CJ?5@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA ; `draw_ground_radar_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_03NIFPGLBG@ALL@				; `string'
PUBLIC	??_C@_03IBEFMGAI@LOW@				; `string'
PUBLIC	??_C@_06HMBFJLMK@MEDIUM@			; `string'
PUBLIC	??_C@_03FFIBGFCJ@MED@				; `string'
PUBLIC	??_C@_04PKDHFCJF@HIGH@				; `string'
PUBLIC	??_C@_04MGKDMHFC@MARK@				; `string'
PUBLIC	??_C@_03COBKBLOD@SGL@				; `string'
PUBLIC	?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA	; `draw_air_radar_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_05EJJKHDCK@ENEMY@				; `string'
PUBLIC	?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z@4JA ; `draw_3d_eo_display'::`1'::__LINE__Var
PUBLIC	??_C@_02KMMHFIEO@eo@				; `string'
PUBLIC	??_C@_0CJ@OPBKHJNA@system?5?$DN?$DN?5TARGET_ACQUISITION_SY@ ; `string'
PUBLIC	??_C@_0BL@MNOBOANG@Invalid?5field?5of?5view?5?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@ ; `string'
PUBLIC	??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@ ; `string'
PUBLIC	??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA ; `draw_3d_eo_display_on_texture'::`1'::__LINE__Var
PUBLIC	??_C@_0BF@MDEHLDP@eo_3d_texture_screen@		; `string'
PUBLIC	??_C@_0BK@EPIBEIKA@d3d_can_render_to_texture@	; `string'
PUBLIC	?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA ; `draw_overlaid_3d_eo_display'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??draw_high_action_display@@YGXPAUENTITY@@H@Z@4JA ; `draw_high_action_display'::`1'::__LINE__Var
PUBLIC	??_C@_03JKJFCLEN@FCR@				; `string'
PUBLIC	??_C@_05FALJMMFP@R?$CF?41f@			; `string'
PUBLIC	??_C@_04DBODHFDK@TADS@				; `string'
PUBLIC	??_C@_07HOJAAJFI@L?$CF04?40f@			; `string'
PUBLIC	??_C@_04OKGDLNCL@NONE@				; `string'
PUBLIC	??_C@_05NFPLLMGK@A?$CF?41f@			; `string'
PUBLIC	??_C@_04BCEGOCOA@AX?4X@				; `string'
PUBLIC	??_C@_0L@FONJMCCD@NO?5ACQUIRE@			; `string'
PUBLIC	??_C@_09GGBOJENB@NO?5WEAPON@			; `string'
PUBLIC	??_C@_09JLFDDBCD@NO?5TARGET@			; `string'
PUBLIC	??_C@_0M@MFPJHMMF@INVALID?5TGT@			; `string'
PUBLIC	??_C@_09CPLEKEOP@SKR?5LIMIT@			; `string'
PUBLIC	??_C@_07KJHNDNDJ@MIN?5RNG@			; `string'
PUBLIC	??_C@_07EPBNJCNI@MAX?5RNG@			; `string'
PUBLIC	??_C@_0L@PDLCBABH@VALID?5LOCK@			; `string'
PUBLIC	??_C@_0BO@IMEMIMEA@Invalid?5weapon?5lock?5type?5?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_06FKEAPHPM@CANNON@			; `string'
PUBLIC	??_C@_03IFPDDAOD@MSL@				; `string'
PUBLIC	??_C@_03BNKHBNLL@RKT@				; `string'
PUBLIC	??_C@_03HPMEOHJD@ATA@				; `string'
PUBLIC	??_C@_08BKMPBOCK@TOF?3?$CF?40f@			; `string'
PUBLIC	??_C@_07CMBMBPC@LOAL?9HI@			; `string'
PUBLIC	??_C@_04EIHLKMGG@LOBL@				; `string'
PUBLIC	?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z@4JA ; `draw_2d_eo_display'::`1'::__LINE__Var
PUBLIC	??_C@_04MIGKMLBH@FLIR@				; `string'
PUBLIC	??_C@_03ENJJJDDH@DTV@				; `string'
PUBLIC	??_C@_03NFBNOOEB@DVO@				; `string'
PUBLIC	??_C@_08JFLECGBM@LO?5LIGHT@			; `string'
PUBLIC	??_C@_02ONPABID@LO@				; `string'
PUBLIC	??_C@_03FMKFNHMM@NAR@				; `string'
PUBLIC	??_C@_04KPGPJCNC@WIDE@				; `string'
PUBLIC	??_C@_01OCOKONAJ@L@				; `string'
PUBLIC	??_C@_01CPLAODJH@S@				; `string'
PUBLIC	?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA ; `draw_tactical_situation_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_06LLLMNJMM@NO?5ACQ@			; `string'
PUBLIC	??_C@_06NOICLIMH@IHADSS@			; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_03DGGJGKKM@GND@				; `string'
PUBLIC	??_C@_03KNFJGCC@AIR@				; `string'
PUBLIC	??_C@_03CIAFGHAC@2Km@				; `string'
PUBLIC	??_C@_03LFNCFPLL@5Km@				; `string'
PUBLIC	??_C@_04PJCLBGLO@10Km@				; `string'
PUBLIC	??_C@_04IJFFJMFM@25Km@				; `string'
PUBLIC	??_C@_03DBNGLLAD@TGT@				; `string'
PUBLIC	??_C@_03DIMJBCMI@NAV@				; `string'
PUBLIC	??_C@_06NEGNFKDO@?$CF?41fkm@			; `string'
PUBLIC	?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA ; `get_closest_missile'::`1'::__LINE__Var
PUBLIC	??_C@_06OEKOLKIL@source@			; `string'
PUBLIC	??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA ; `draw_aircraft_survivability_equipment_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@		; `string'
PUBLIC	??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@		; `string'
PUBLIC	??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@		; `string'
PUBLIC	??_C@_0L@DADPKEOI@IR?5JAM?5XXX@			; `string'
PUBLIC	??_C@_09OKBKNIAL@IR?5JAM?5ON@			; `string'
PUBLIC	??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@			; `string'
PUBLIC	??_C@_06CNPDBJMK@IR?5XXX@			; `string'
PUBLIC	??_C@_05JBLHJOBL@IR?5ON@			; `string'
PUBLIC	??_C@_06CCMEMHEJ@IR?5OFF@			; `string'
PUBLIC	??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@			; `string'
PUBLIC	??_C@_09OKIOJJOP@RD?5JAM?5ON@			; `string'
PUBLIC	??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@			; `string'
PUBLIC	??_C@_06JNKFDAHI@RD?5XXX@			; `string'
PUBLIC	??_C@_05BHAGAOGB@RD?5ON@			; `string'
PUBLIC	??_C@_06JCJCOOPL@RD?5OFF@			; `string'
PUBLIC	??_C@_08NKOLJMOI@AUTO?5C?1M@			; `string'
PUBLIC	??_C@_09NCCLNCCC@AUTO?5PAGE@			; `string'
PUBLIC	??_C@_08GHAEIHAP@CHAFF?3XX@			; `string'
PUBLIC	??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@		; `string'
PUBLIC	??_C@_04KJNFJKOK@C?3XX@				; `string'
PUBLIC	??_C@_06GNOFKMCG@C?3?$CF02d@			; `string'
PUBLIC	??_C@_08HGDOPGOH@FLARE?3XX@			; `string'
PUBLIC	??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@		; `string'
PUBLIC	??_C@_04GBDFBFJK@F?3XX@				; `string'
PUBLIC	??_C@_06DPNNIDIB@F?3?$CF02d@			; `string'
PUBLIC	?__LINE__Var@?0??draw_sprite@@YGXHHHHHH@Z@4JA	; `draw_sprite'::`1'::__LINE__Var
PUBLIC	??_C@_06EBODONHD@x?5?$DO?$DN?50@		; `string'
PUBLIC	??_C@_06OHJEOGMH@y?5?$DO?$DN?50@		; `string'
PUBLIC	??_C@_04OCCELDNI@?$CF04d@			; `string'
PUBLIC	??_C@_04OGKJMPGK@?$CF02d@			; `string'
PUBLIC	?__LINE__Var@?0??draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z@4JA ; `draw_large_weapon_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0P@MFMEIMLB@draw_large_mfd@		; `string'
PUBLIC	??_C@_03GLKEJMAA@?$CF4d@			; `string'
PUBLIC	??_C@_04CPMKADPB@XXXX@				; `string'
PUBLIC	??_C@_05FOOOBDLP@CHAFF@				; `string'
PUBLIC	??_C@_03GPCJOALC@?$CF2d@			; `string'
PUBLIC	??_C@_02BAHDIOLJ@XX@				; `string'
PUBLIC	??_C@_05MLKBHMKD@FLARE@				; `string'
PUBLIC	??_C@_03KIGHCFHP@MAN@				; `string'
PUBLIC	??_C@_03NHPMNECN@ARM@				; `string'
PUBLIC	??_C@_04JMNPMIJD@SAFE@				; `string'
PUBLIC	??_C@_03MGGCNFDL@LRF@				; `string'
PUBLIC	??_C@_05MJCDDMFE@TRNGL@				; `string'
PUBLIC	??_C@_04EKDNBCDP@LOAL@				; `string'
PUBLIC	??_C@_05GPKGLDLB@SALVO@				; `string'
PUBLIC	??_C@_0CG@DKLMAF@more?5than?54?5hellfires?5on?5Apache@ ; `string'
PUBLIC	??_C@_0CJ@NDBFDPHK@?$CB?$CCmore?5than?54?5hellfires?5on?5Apac@ ; `string'
PUBLIC	??_C@_01DGKLNCNG@R@				; `string'
PUBLIC	??_C@_02MCEHGFCK@MP@				; `string'
PUBLIC	??_C@_02LENCMAPF@RC@				; `string'
PUBLIC	??_C@_02MMHFHELC@S5@				; `string'
PUBLIC	??_C@_02HJNLAKPP@S8@				; `string'
PUBLIC	?__LINE__Var@?0??draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z@4JA ; `draw_weapon_display_mfd'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??print_system_message@@YGMPAD0HM@Z@4JA ; `print_system_message'::`1'::__LINE__Var
PUBLIC	??_C@_09FJJPPKDN@equipment@			; `string'
PUBLIC	??_C@_07FPLKDJGL@warning@			; `string'
PUBLIC	??_C@_02GIPFHKNO@OK@				; `string'
PUBLIC	??_C@_04OOEBCMBF@FAIL@				; `string'
PUBLIC	??_C@_05IHELJBBC@RADAR@				; `string'
PUBLIC	??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@		; `string'
PUBLIC	??_C@_0N@JDBOFCJG@RADAR?5JAMMER@		; `string'
PUBLIC	??_C@_09MILGCPFO@IR?5JAMMER@			; `string'
PUBLIC	??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@	; `string'
PUBLIC	??_C@_0P@OEDGDHNF@COMMUNICATIONS@		; `string'
PUBLIC	??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@	; `string'
PUBLIC	??_C@_04IDKCLELC@PNVS@				; `string'
PUBLIC	??_C@_0L@LMAEBBOE@STABILISER@			; `string'
PUBLIC	??_C@_0L@FFIGCBMA@MAIN?5ROTOR@			; `string'
PUBLIC	??_C@_07OHKEFPKJ@DAMAGED@			; `string'
PUBLIC	??_C@_0L@MCBINMPD@TAIL?5ROTOR@			; `string'
PUBLIC	??_C@_08KNAGGCOA@ENGINE?51@			; `string'
PUBLIC	??_C@_08IGCLDBCD@ENGINE?52@			; `string'
PUBLIC	??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@		; `string'
PUBLIC	??_C@_0N@MMJNGGCF@OIL?5PRESSURE@		; `string'
PUBLIC	??_C@_04PCNCCNDP@USED@				; `string'
PUBLIC	??_C@_0BC@OIGEPKDA@FIRE?5EXTINGUISHER@		; `string'
PUBLIC	??_C@_06JNBMPGOL@TORQUE@			; `string'
PUBLIC	??_C@_04OHGLKFFN@?$CF03d@			; `string'
PUBLIC	??_C@_04DICABFLJ@FUEL@				; `string'
PUBLIC	??_C@_08GEGEOBAJ@?$CF04d?5lbs@			; `string'
PUBLIC	??_C@_08PLAGFMEO@THROTTLE@			; `string'
PUBLIC	??_C@_04LMJCBFEL@OFF?5@				; `string'
PUBLIC	??_C@_04IMMGDCFE@IDLE@				; `string'
PUBLIC	??_C@_04MJEFHDBD@FLY?5@				; `string'
PUBLIC	??_C@_06HPNMMHPJ@?$CF03d?$CF?$CF@		; `string'
PUBLIC	??_C@_08HFPCNHOJ@?5?$CFs?5OFF?5@		; `string'
PUBLIC	??_C@_08EFKGPAPG@?5?$CFs?5IDLE@			; `string'
PUBLIC	??_C@_08CFLBLB@?5?$CFs?5FLY?5@			; `string'
PUBLIC	??_C@_0L@JGIHHDGO@?5?$CFs?5?$CF03d?$CF?$CF@	; `string'
PUBLIC	??_C@_0L@OGFGIPGD@APU?5?$CF03d?$CF?$CF@		; `string'
PUBLIC	?__LINE__Var@?0??draw_default_mfd_on_cockpit@@YGXMMHHW4MFD_LOCATIONS@@@Z@4JA ; `draw_default_mfd_on_cockpit'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA	; `draw_pitch_ladder'::`1'::__LINE__Var
PUBLIC	??_C@_03NJMPCKOA@?$CFd0@			; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_03IAKIMNGC@R?$CFd@			; `string'
PUBLIC	??_C@_04FCMNJMCO@?$CFd?$CF?$CF@			; `string'
PUBLIC	?__LINE__Var@?0??display_waypoint_information@@YGXUREAL_COLOUR@@@Z@4JA ; `display_waypoint_information'::`1'::__LINE__Var
PUBLIC	??_C@_06JCIGMCHD@?$CFc?3?$CFdm@			; `string'
PUBLIC	??_C@_09EKFBJBJG@?$CFc?3?$CF?41fKm@		; `string'
PUBLIC	??_C@_07CFANIJPM@?$CFc?3?$CFdKm@		; `string'
PUBLIC	??_C@_06BAOIPBEF@?9?3?9?9?4?9@			; `string'
PUBLIC	??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@	; `string'
PUBLIC	??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@		; `string'
PUBLIC	?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA ; `draw_flight_display_mfd'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??draw_default_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z@4JA ; `draw_default_mfd_on_texture'::`1'::__LINE__Var
PUBLIC	??_C@_0CG@IPIPCLFE@mfd_viewport_size?5?$DM?$DN?5mfd_textur@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_overlaid_default_mfd@@YGXMMMW4MFD_LOCATIONS@@@Z@4JA ; `draw_overlaid_default_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_0BG@CLGDNIGP@Invalid?5mfd?5mode?5?$DN?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??select_next_default_lhs_mfd@@YGXXZ@4JA ; `select_next_default_lhs_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0BO@MBAGKDHC@next_mfd_mode?5?$CB?$DN?5rhs_mfd_mode@ ; `string'
PUBLIC	?__LINE__Var@?0??select_previous_default_lhs_mfd@@YGXXZ@4JA ; `select_previous_default_lhs_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0CC@HPKCEHMJ@previous_mfd_mode?5?$CB?$DN?5rhs_mfd_mo@ ; `string'
PUBLIC	?__LINE__Var@?0??select_next_default_rhs_mfd@@YGXXZ@4JA ; `select_next_default_rhs_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0BO@IPOHAJBI@next_mfd_mode?5?$CB?$DN?5lhs_mfd_mode@ ; `string'
PUBLIC	?__LINE__Var@?0??select_previous_default_rhs_mfd@@YGXXZ@4JA ; `select_previous_default_rhs_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0CC@DBEDONKD@previous_mfd_mode?5?$CB?$DN?5lhs_mfd_mo@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3b83126f
PUBLIC	__real@3c000000
PUBLIC	__real@3c23d70a
PUBLIC	__real@3c8efa35
PUBLIC	__real@3ca3d70d
PUBLIC	__real@3cf5c28f
PUBLIC	__real@3d000000
PUBLIC	__real@3d23d70a
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3d7c0fc1
PUBLIC	__real@3d8f5c29
PUBLIC	__real@3d99999a
PUBLIC	__real@3da3d70a
PUBLIC	__real@3da3d70b
PUBLIC	__real@3db2b8c2
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e000000
PUBLIC	__real@3e0f5c2a
PUBLIC	__real@3e19999a
PUBLIC	__real@3e32b8c2
PUBLIC	__real@3e35c28f
PUBLIC	__real@3e3851ec
PUBLIC	__real@3e428f5c
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e4cccce
PUBLIC	__real@3e6147ae
PUBLIC	__real@3e666666
PUBLIC	__real@3e733333
PUBLIC	__real@3e800000
PUBLIC	__real@3e860a92
PUBLIC	__real@3e8f5c29
PUBLIC	__real@3e99999a
PUBLIC	__real@3e9eb852
PUBLIC	__real@3eae147b
PUBLIC	__real@3eae9e8d
PUBLIC	__real@3eb2b8c2
PUBLIC	__real@3eb33333
PUBLIC	__real@3ebd70a4
PUBLIC	__real@3ec00000
PUBLIC	__real@3ecccccd
PUBLIC	__real@3ed70a3d
PUBLIC	__real@3edf66f3
PUBLIC	__real@3ee66666
PUBLIC	__real@3f000000
PUBLIC	__real@3f00002000400080
PUBLIC	__real@3f060a92
PUBLIC	__real@3f066666
PUBLIC	__real@3f0a3d71
PUBLIC	__real@3f0ccccd
PUBLIC	__real@3f10000000000000
PUBLIC	__real@3f133333
PUBLIC	__real@3f19999a
PUBLIC	__real@3f233333
PUBLIC	__real@3f23d70a
PUBLIC	__real@3f266666
PUBLIC	__real@3f2b851f
PUBLIC	__real@3f2e9e8d
PUBLIC	__real@3f333333
PUBLIC	__real@3f3851ec
PUBLIC	__real@3f3d70a4
PUBLIC	__real@3f3eb852
PUBLIC	__real@3f43a92a3d70a3d7
PUBLIC	__real@3f451eb8
PUBLIC	__real@3f4a3d71
PUBLIC	__real@3f4ac083
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f4eb852
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3f50a3d7
PUBLIC	__real@3f51eb85
PUBLIC	__real@3f566666
PUBLIC	__real@3f5999999999999a
PUBLIC	__real@3f59999a
PUBLIC	__real@3f5a3d71
PUBLIC	__real@3f5b645a
PUBLIC	__real@3f5c28f6
PUBLIC	__real@3f5ccccd
PUBLIC	__real@3f600000
PUBLIC	__real@3f60a3d7
PUBLIC	__real@3f61111111111111
PUBLIC	__real@3f6147ae
PUBLIC	__real@3f628f5c
PUBLIC	__real@3f63d70a
PUBLIC	__real@3f651eb8
PUBLIC	__real@3f666666
PUBLIC	__real@3f68f5c3
PUBLIC	__real@3f6c28f6
PUBLIC	__real@3f6e147b
PUBLIC	__real@3f700000
PUBLIC	__real@3f733333
PUBLIC	__real@3f74fdf4
PUBLIC	__real@3f770a3d
PUBLIC	__real@3f7851ec
PUBLIC	__real@3f789374cccccccd
PUBLIC	__real@3f7ae148
PUBLIC	__real@3f7c28f6
PUBLIC	__real@3f7eb852
PUBLIC	__real@3f800000
PUBLIC	__real@3f80624dd2f1a9fc
PUBLIC	__real@3f82f6e9
PUBLIC	__real@3f83a92a30553261
PUBLIC	__real@3f847ae147ae147b
PUBLIC	__real@3f8ccccd
PUBLIC	__real@3f947ae147ae147b
PUBLIC	__real@3f9999999999999a
PUBLIC	__real@3f9b573eab367a10
PUBLIC	__real@3f9eb851eb851eb8
PUBLIC	__real@3fa47ae147ae147b
PUBLIC	__real@3fa999999999999a
PUBLIC	__real@3fae9e8d
PUBLIC	__real@3faeb851eb851eb8
PUBLIC	__real@3fb3333333333333
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fbc28f5c28f5c29
PUBLIC	__real@3fc0000000000000
PUBLIC	__real@3fc3333333333333
PUBLIC	__real@3fc6571848000000
PUBLIC	__real@3fc70a3d70a3d70a
PUBLIC	__real@3fc90fdb
PUBLIC	__real@3fc999999999999a
PUBLIC	__real@3fcc28f5c28f5c29
PUBLIC	__real@3fcccccd
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fd3333333333333
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe0c15236000000
PUBLIC	__real@3fe999999999999a
PUBLIC	__real@3feb333333333333
PUBLIC	__real@3fec000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff0c09b332ccccd
PUBLIC	__real@3ff199999999999a
PUBLIC	__real@3ff5d3d193333333
PUBLIC	__real@3ff8000000000000
PUBLIC	__real@3ff85d84
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@400d1eb8
PUBLIC	__real@4010000000000000
PUBLIC	__real@4014000000000000
PUBLIC	__real@4016eb167e7d81e3
PUBLIC	__real@4018000000000000
PUBLIC	__real@401c000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@4026000000000000
PUBLIC	__real@4026eb1686b280e6
PUBLIC	__real@402a000000000000
PUBLIC	__real@4034000000000000
PUBLIC	__real@4037000000000000
PUBLIC	__real@40400000
PUBLIC	__real@4040800000000000
PUBLIC	__real@40466666
PUBLIC	__real@404ca5dc00000000
PUBLIC	__real@4050400000000000
PUBLIC	__real@4051f948
PUBLIC	__real@4058f9999999999a
PUBLIC	__real@4059000000000000
PUBLIC	__real@405b800000000000
PUBLIC	__real@405e000000000000
PUBLIC	__real@405f400000000000
PUBLIC	__real@405fc00000000000
PUBLIC	__real@4060000000000000
PUBLIC	__real@40666666
PUBLIC	__real@4069000000000000
PUBLIC	__real@40800000
PUBLIC	__real@40845f306446f9b4
PUBLIC	__real@408f400000000000
PUBLIC	__real@4097700000000000
PUBLIC	__real@409f400000000000
PUBLIC	__real@40a00000
PUBLIC	__real@40a3880000000000
PUBLIC	__real@40c90fdb
PUBLIC	__real@40f86a0000000000
PUBLIC	__real@41000000
PUBLIC	__real@41100000
PUBLIC	__real@41200000
PUBLIC	__real@4121999a
PUBLIC	__real@41600000
PUBLIC	__real@41900000
PUBLIC	__real@42480000
PUBLIC	__real@43000000
PUBLIC	__real@4344d9b3
PUBLIC	__real@43650000
PUBLIC	__real@43800000
PUBLIC	__real@43e30000
PUBLIC	__real@447a0000
PUBLIC	__real@44fa0000
PUBLIC	__real@459c4000
PUBLIC	__real@461c4000
PUBLIC	__real@46c35000
PUBLIC	__real@49742400
PUBLIC	__real@80000000
PUBLIC	__real@bc23d70a
PUBLIC	__real@bcf5c28f
PUBLIC	__real@bd23d70a
PUBLIC	__real@bd4ccccd
PUBLIC	__real@bd8f5c29
PUBLIC	__real@bd99999a
PUBLIC	__real@bda3d70a
PUBLIC	__real@bdb2b8c2
PUBLIC	__real@bdb851ec
PUBLIC	__real@bdcccccd
PUBLIC	__real@be0f5c29
PUBLIC	__real@be19999a
PUBLIC	__real@be23d70a
PUBLIC	__real@be32b8c2
PUBLIC	__real@be333333
PUBLIC	__real@be35c28f
PUBLIC	__real@be428f5c
PUBLIC	__real@be4ccccd
PUBLIC	__real@be6147ae
PUBLIC	__real@be666666
PUBLIC	__real@be800000
PUBLIC	__real@be860a92
PUBLIC	__real@be8a3d71
PUBLIC	__real@be8f5c29
PUBLIC	__real@be99999a
PUBLIC	__real@beae147b
PUBLIC	__real@beb2b8c2
PUBLIC	__real@beb33333
PUBLIC	__real@becccccd
PUBLIC	__real@bed70a3d
PUBLIC	__real@bedf66f3
PUBLIC	__real@bee66666
PUBLIC	__real@beeb851f
PUBLIC	__real@bf000000
PUBLIC	__real@bf051eb9
PUBLIC	__real@bf060a92
PUBLIC	__real@bf0ccccd
PUBLIC	__real@bf147ae2
PUBLIC	__real@bf19999a
PUBLIC	__real@bf2147ae
PUBLIC	__real@bf23d70b
PUBLIC	__real@bf266666
PUBLIC	__real@bf2ccccd
PUBLIC	__real@bf333333
PUBLIC	__real@bf333334
PUBLIC	__real@bf3851ec
PUBLIC	__real@bf3d70a4
PUBLIC	__real@bf400000
PUBLIC	__real@bf466666
PUBLIC	__real@bf4ac083
PUBLIC	__real@bf4b851f
PUBLIC	__real@bf4ccccd
PUBLIC	__real@bf533333
PUBLIC	__real@bf547ae1
PUBLIC	__real@bf58f5c3
PUBLIC	__real@bf59999a
PUBLIC	__real@bf600000
PUBLIC	__real@bf666666
PUBLIC	__real@bf68f5c3
PUBLIC	__real@bf6e147b
PUBLIC	__real@bf733333
PUBLIC	__real@bf73d70a
PUBLIC	__real@bf770a3d
PUBLIC	__real@bf7851ec
PUBLIC	__real@bf79999a
PUBLIC	__real@bf7ae148
PUBLIC	__real@bf800000
PUBLIC	__real@bf8ccccd
PUBLIC	__real@bfb999999999999a
PUBLIC	__real@bfc3333333333333
PUBLIC	__real@bfd6666666666666
PUBLIC	__real@bfd999999999999a
PUBLIC	__real@bfe0000000000000
PUBLIC	__real@bfe0c15236000000
PUBLIC	__real@bfe3333333333333
PUBLIC	__real@bfe6666673333333
PUBLIC	__real@bff199999999999a
PUBLIC	__real@c0000000
PUBLIC	__real@c0400000
PUBLIC	__real@c0800000
PUBLIC	__real@c08f400000000000
PUBLIC	__real@c0a00000
PUBLIC	__real@c0c00000
PUBLIC	__real@c0e00000
PUBLIC	__real@c1000000
PUBLIC	__real@c1400000
PUBLIC	__real@c1500000
PUBLIC	__real@c1800000
PUBLIC	__real@c1980000
PUBLIC	__real@c1c80000
PUBLIC	__real@c2180000
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	_abs:PROC
EXTRN	_strcpy:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_atan2:PROC
EXTRN	_cos:PROC
EXTRN	_fmod:PROC
EXTRN	_sin:PROC
EXTRN	_tan:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z:PROC	; get_3d_vector_magnitude
EXTRN	?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z:PROC ; normalise_3d_vector_given_magnitude
EXTRN	?get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z:PROC ; get_3d_unit_vector_dot_product
EXTRN	?get_2d_range@@YGMPBUVEC3D@@0@Z:PROC		; get_2d_range
EXTRN	?get_approx_2d_range@@YGMPBUVEC3D@@0@Z:PROC	; get_approx_2d_range
EXTRN	?get_3d_range@@YGMPBUVEC3D@@0@Z:PROC		; get_3d_range
EXTRN	?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z:PROC ; create_system_texture_screen
EXTRN	?create_screen_for_system_texture@@YGPAUSCREEN@@H@Z:PROC ; create_screen_for_system_texture
EXTRN	?set_system_texture_screen@@YGXPAUSCREEN@@H@Z:PROC ; set_system_texture_screen
EXTRN	?destroy_screen@@YGHPAUSCREEN@@@Z:PROC		; destroy_screen
EXTRN	?lock_screen@@YGHPAUSCREEN@@@Z:PROC		; lock_screen
EXTRN	?unlock_screen@@YGHPAUSCREEN@@@Z:PROC		; unlock_screen
EXTRN	?set_active_screen@@YGHPAUSCREEN@@@Z:PROC	; set_active_screen
EXTRN	?set_3d_render_target@@YGHPAUSCREEN@@@Z:PROC	; set_3d_render_target
EXTRN	?finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z:PROC ; finalise_3d_render_target_texture
EXTRN	?set_block@@YGXHHHHUREAL_COLOUR@@@Z:PROC	; set_block
EXTRN	?draw_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC	; draw_line
EXTRN	?draw_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC ; draw_half_thick_line
EXTRN	?set_hatched_pattern@@YGXPAI@Z:PROC		; set_hatched_pattern
EXTRN	?set_d3d_transparency_on@@YGXXZ:PROC		; set_d3d_transparency_on
EXTRN	?set_d3d_transparency_off@@YGXXZ:PROC		; set_d3d_transparency_off
EXTRN	?set_d3d_zbuffer_comparison@@YGXH@Z:PROC	; set_d3d_zbuffer_comparison
EXTRN	?set_d3d_culling@@YGXH@Z:PROC			; set_d3d_culling
EXTRN	?set_d3d_texture_wrapping@@YGXHH@Z:PROC		; set_d3d_texture_wrapping
EXTRN	?set_d3d_texture_mag_filtering@@YGXH@Z:PROC	; set_d3d_texture_mag_filtering
EXTRN	?set_d3d_texture_min_filtering@@YGXH@Z:PROC	; set_d3d_texture_min_filtering
EXTRN	?set_d3d_texture_mip_filtering@@YGXH@Z:PROC	; set_d3d_texture_mip_filtering
EXTRN	?set_d3d_plain_renderstate@@YGXXZ:PROC		; set_d3d_plain_renderstate
EXTRN	?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z:PROC ; set_d3d_flat_shaded_textured_renderstate
EXTRN	?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z:PROC ; draw_wbuffered_plain_polygon
EXTRN	?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z:PROC ; draw_wbuffered_flat_shaded_textured_polygon
EXTRN	?get_system_texture_ptr@@YGPAUSCREEN@@H@Z:PROC	; get_system_texture_ptr
EXTRN	?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z:PROC ; flush_screen_texture_graphics
EXTRN	?blit_rgb_alpha_masked_sprite_zero_mask_value@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@@Z:PROC ; blit_rgb_alpha_masked_sprite_zero_mask_value
EXTRN	?blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@PAUSCREEN@@@Z:PROC ; blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture
EXTRN	?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z:PROC ; set_mono_font_type
EXTRN	?set_mono_font_rel_position@@YGXMM@Z:PROC	; set_mono_font_rel_position
EXTRN	?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z:PROC	; set_mono_font_colour
EXTRN	?get_mono_font_char_height@@YGMD@Z:PROC		; get_mono_font_char_height
EXTRN	?print_mono_font_char@@YGXD@Z:PROC		; print_mono_font_char
EXTRN	?get_mono_font_string_width@@YGMPBD@Z:PROC	; get_mono_font_string_width
EXTRN	?print_mono_font_string@@YGXPBD@Z:PROC		; print_mono_font_string
EXTRN	?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z:PROC ; draw_mono_sprite
EXTRN	?create_2d_environment@@YGPAUENV_2D@@XZ:PROC	; create_2d_environment
EXTRN	?destroy_2d_environment@@YGXPAUENV_2D@@@Z:PROC	; destroy_2d_environment
EXTRN	?set_2d_active_environment@@YGXPAUENV_2D@@@Z:PROC ; set_2d_active_environment
EXTRN	?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z:PROC	; set_2d_viewport
EXTRN	?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z:PROC ; set_2d_viewport_origin
EXTRN	?set_2d_window@@YGXPAUENV_2D@@MMMM@Z:PROC	; set_2d_window
EXTRN	?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z:PROC	; set_2d_window_rotation
EXTRN	?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z:PROC ; set_2d_instance_rotation
EXTRN	?set_2d_instance_position@@YGXPAUENV_2D@@MM@Z:PROC ; set_2d_instance_position
EXTRN	?reset_2d_instance@@YGXPAUENV_2D@@@Z:PROC	; reset_2d_instance
EXTRN	?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC	; draw_2d_line
EXTRN	?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC ; draw_2d_half_thick_line
EXTRN	?set_2d_mono_font_position@@YGXMM@Z:PROC	; set_2d_mono_font_position
EXTRN	?get_2d_world_position@@YGXMMPAM0@Z:PROC	; get_2d_world_position
EXTRN	?get_2d_int_screen_coordinates@@YGXMMPAH0@Z:PROC ; get_2d_int_screen_coordinates
EXTRN	?get_2d_float_screen_coordinates@@YGXMMPAM0@Z:PROC ; get_2d_float_screen_coordinates
EXTRN	?get_2d_float_screen_x_coordinate@@YGXMPAM@Z:PROC ; get_2d_float_screen_x_coordinate
EXTRN	?get_2d_float_screen_y_coordinate@@YGXMPAM@Z:PROC ; get_2d_float_screen_y_coordinate
EXTRN	?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z:PROC ; draw_2d_mono_sprite
EXTRN	?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z:PROC	; draw_2d_circle
EXTRN	?draw_2d_hatched_circle@@YGXMMMUREAL_COLOUR@@@Z:PROC ; draw_2d_hatched_circle
EXTRN	?set_3d_active_environment@@YGXPAUENV_3D@@@Z:PROC ; set_3d_active_environment
EXTRN	?begin_3d_scene@@YGHXZ:PROC			; begin_3d_scene
EXTRN	?end_3d_scene@@YGXXZ:PROC			; end_3d_scene
EXTRN	?get_position_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUVEC3D@@PAM1@Z:PROC ; get_position_3d_screen_coordinates
EXTRN	?get_local_entity_vec3d_magnitude@@YGMPAUENTITY@@W4VEC3D_TYPES@@@Z:PROC ; get_local_entity_vec3d_magnitude
EXTRN	?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_local_entity_target_point
EXTRN	?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z:PROC ; get_local_entity_weapon_count
EXTRN	?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z:PROC ; get_local_entity_weapon_hardpoint_info
EXTRN	?get_local_entity_weapon_available@@YGHPAUENTITY@@H@Z:PROC ; get_local_entity_weapon_available
EXTRN	?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z:PROC ; get_waypoint_display_position
EXTRN	?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z:PROC ; get_simple_session_weather_at_point
EXTRN	?get_local_entity_first_waypoint@@YGPAUENTITY@@PAU1@@Z:PROC ; get_local_entity_first_waypoint
EXTRN	?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z:PROC ; get_local_entity_current_waypoint
EXTRN	?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z:PROC ; set_main_3d_params
EXTRN	?set_pilots_full_screen_params@@YGXH@Z:PROC	; set_pilots_full_screen_params
EXTRN	?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z:PROC	; draw_main_3d_scene
EXTRN	?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z:PROC ; get_target_display_name
EXTRN	?get_range_finder@@YG?AW4rangefinding_system@@XZ:PROC ; get_range_finder
EXTRN	?draw_tsd_terrain_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MH@Z:PROC ; draw_tsd_terrain_map
EXTRN	?draw_tsd_contour_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MHH@Z:PROC ; draw_tsd_contour_map
EXTRN	?Initialise_TSD_render_terrain@@YGXXZ:PROC	; Initialise_TSD_render_terrain
EXTRN	?laser_is_active@@YGHXZ:PROC			; laser_is_active
EXTRN	?get_triangulated_range@@YGMPAUENTITY@@@Z:PROC	; get_triangulated_range
EXTRN	?get_range_to_target@@YGMXZ:PROC		; get_range_to_target
EXTRN	?eo_is_locked@@YGHXZ:PROC			; eo_is_locked
EXTRN	?get_gunship_target_valid_for_ground_radar@@YGHPAUENTITY@@@Z:PROC ; get_gunship_target_valid_for_ground_radar
EXTRN	?get_target_matches_ground_radar_declutter_criteria@@YGHPAUENTITY@@@Z:PROC ; get_target_matches_ground_radar_declutter_criteria
EXTRN	?ground_radar_is_active@@YGHXZ:PROC		; ground_radar_is_active
EXTRN	?get_gunship_target_valid_for_air_radar@@YGHPAUENTITY@@@Z:PROC ; get_gunship_target_valid_for_air_radar
EXTRN	?get_target_matches_air_radar_declutter_criteria@@YGHPAUENTITY@@W4ENTITY_SIDES@@@Z:PROC ; get_target_matches_air_radar_declutter_criteria
EXTRN	?air_radar_is_active@@YGHXZ:PROC		; air_radar_is_active
EXTRN	?get_threat_id_number@@YGPADPAUENTITY@@@Z:PROC	; get_threat_id_number
EXTRN	?get_default_missile_flight_time@@YGMXZ:PROC	; get_default_missile_flight_time
EXTRN	?get_digital_clock_values@@YGXMPAM00@Z:PROC	; get_digital_clock_values
EXTRN	?copy_export_mfd@@YGXPAUSCREEN@@0@Z:PROC	; copy_export_mfd
EXTRN	__ftol2_sse:PROC
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?random_number_seed@@3HA:DWORD			; random_number_seed
EXTRN	?sine_table@@3PAMA:BYTE				; sine_table
EXTRN	?d3d_can_render_to_texture@@3HA:DWORD		; d3d_can_render_to_texture
EXTRN	?sys_col_red@@3UREAL_COLOUR@@A:DWORD		; sys_col_red
EXTRN	?video_screen@@3PAUSCREEN@@A:DWORD		; video_screen
EXTRN	?active_screen@@3PAUSCREEN@@A:DWORD		; active_screen
EXTRN	?command_line_dynamics_engine_startup@@3HA:DWORD ; command_line_dynamics_engine_startup
EXTRN	?command_line_high_res_mfd@@3HA:DWORD		; command_line_high_res_mfd
EXTRN	?command_line_tsd_enemy_colours@@3HA:DWORD	; command_line_tsd_enemy_colours
EXTRN	?command_line_colour_mfd@@3HA:DWORD		; command_line_colour_mfd
EXTRN	?command_line_export_mfd@@3HA:DWORD		; command_line_export_mfd
EXTRN	?global_mfd_size@@3MA:DWORD			; global_mfd_size
EXTRN	?graphics_files@@3PAUFILE_DATA@@A:BYTE		; graphics_files
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?global_options@@3UGLOBAL_OPTIONS_DATA@@A:BYTE	; global_options
EXTRN	?overload_invalid_list_type_message@@3PBDB:DWORD ; overload_invalid_list_type_message
EXTRN	?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_first_child
EXTRN	?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_parent
EXTRN	?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_child_succ
EXTRN	?fn_get_local_entity_attitude_matrix_ptr@@3PAP6GPAY122MPAUENTITY@@@ZA:BYTE ; fn_get_local_entity_attitude_matrix_ptr
EXTRN	?overload_invalid_char_type_message@@3PBDB:DWORD ; overload_invalid_char_type_message
EXTRN	?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA:BYTE ; fn_get_local_entity_char_value
EXTRN	?draw_eo_3d_scene@@3HA:DWORD			; draw_eo_3d_scene
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA:BYTE ; fn_get_local_entity_vec3d_ptr
EXTRN	?gunship_entity@@3PAUENTITY@@A:DWORD		; gunship_entity
EXTRN	?session_entity@@3PAUENTITY@@A:DWORD		; session_entity
EXTRN	?full_screen_width@@3MA:DWORD			; full_screen_width
EXTRN	?full_screen_height@@3MA:DWORD			; full_screen_height
EXTRN	?main_3d_env@@3PAUENV_3D@@A:DWORD		; main_3d_env
EXTRN	?main_vp@@3UVIEWPOINT@@A:BYTE			; main_vp
EXTRN	?view_mode@@3W4VIEW_MODES@@A:DWORD		; view_mode
EXTRN	?tsd_render_mode@@3W4TSD_RENDER_MODES@@A:DWORD	; tsd_render_mode
EXTRN	?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A:DWORD ; target_acquisition_system
EXTRN	?fire_extinguisher_used@@3HA:DWORD		; fire_extinguisher_used
EXTRN	?eo_low_light@@3HA:DWORD			; eo_low_light
EXTRN	?eo_ground_stabilised@@3HA:DWORD		; eo_ground_stabilised
EXTRN	?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A:DWORD ; eo_sensor
EXTRN	?eo_azimuth@@3MA:DWORD				; eo_azimuth
EXTRN	?eo_max_azimuth@@3MA:DWORD			; eo_max_azimuth
EXTRN	?eo_elevation@@3MA:DWORD			; eo_elevation
EXTRN	?eo_min_elevation@@3MA:DWORD			; eo_min_elevation
EXTRN	?eo_vp@@3UVIEWPOINT@@A:BYTE			; eo_vp
EXTRN	?display_mfd_layout_grid@@3HA:DWORD		; display_mfd_layout_grid
EXTRN	?large_eo_3d_texture_screen@@3PAUSCREEN@@A:DWORD ; large_eo_3d_texture_screen
EXTRN	?small_eo_3d_texture_screen@@3PAUSCREEN@@A:DWORD ; small_eo_3d_texture_screen
EXTRN	?current_pfz@@3IA:DWORD				; current_pfz
EXTRN	?next_free_pfz@@3IA:DWORD			; next_free_pfz
EXTRN	?next_free_nfz@@3IA:DWORD			; next_free_nfz
EXTRN	?ground_radar@@3URADAR_PARAMS@@A:BYTE		; ground_radar
EXTRN	?air_radar@@3URADAR_PARAMS@@A:BYTE		; air_radar
EXTRN	?radar_clutter_hatch_pattern@@3PAIA:BYTE	; radar_clutter_hatch_pattern
EXTRN	?large_display_target_symbol_selected_target@@3QBDB:BYTE ; large_display_target_symbol_selected_target
EXTRN	?large_display_target_symbol_selected_target_mask@@3QBDB:BYTE ; large_display_target_symbol_selected_target_mask
EXTRN	?small_display_target_symbol_selected_target@@3QBDB:BYTE ; small_display_target_symbol_selected_target
EXTRN	?small_display_target_symbol_selected_target_mask@@3QBDB:BYTE ; small_display_target_symbol_selected_target_mask
EXTRN	?large_display_target_symbols_los@@3PAPBDA:BYTE	; large_display_target_symbols_los
EXTRN	?large_display_target_symbols_los_mask@@3PAPBDA:BYTE ; large_display_target_symbols_los_mask
EXTRN	?large_display_target_symbols_no_los@@3PAPBDA:BYTE ; large_display_target_symbols_no_los
EXTRN	?large_display_target_symbols_no_los_mask@@3PAPBDA:BYTE ; large_display_target_symbols_no_los_mask
EXTRN	?small_display_target_symbols_los@@3PAPBDA:BYTE	; small_display_target_symbols_los
EXTRN	?small_display_target_symbols_los_mask@@3PAPBDA:BYTE ; small_display_target_symbols_los_mask
EXTRN	?small_display_target_symbols_no_los@@3PAPBDA:BYTE ; small_display_target_symbols_no_los
EXTRN	?small_display_target_symbols_no_los_mask@@3PAPBDA:BYTE ; small_display_target_symbols_no_los_mask
EXTRN	?weapon_lock_type@@3W4WEAPON_LOCK_TYPES@@A:DWORD ; weapon_lock_type
EXTRN	?rocket_salvo_size@@3HA:DWORD			; rocket_salvo_size
EXTRN	?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A:DWORD ; comanche_damage
EXTRN	?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A:DWORD ; default_damage
EXTRN	?default_flir@@3UEO_PARAMS@@A:BYTE		; default_flir
EXTRN	?default_dtv@@3UEO_PARAMS@@A:BYTE		; default_dtv
EXTRN	?default_dvo@@3UEO_PARAMS@@A:BYTE		; default_dvo
EXTRN	?DEFAULT_RADAR_SCAN_RANGE_500@@3MA:DWORD	; DEFAULT_RADAR_SCAN_RANGE_500
EXTRN	?DEFAULT_RADAR_SCAN_RANGE_1000@@3MA:DWORD	; DEFAULT_RADAR_SCAN_RANGE_1000
EXTRN	?DEFAULT_RADAR_SCAN_RANGE_2000@@3MA:DWORD	; DEFAULT_RADAR_SCAN_RANGE_2000
EXTRN	?DEFAULT_RADAR_SCAN_RANGE_4000@@3MA:DWORD	; DEFAULT_RADAR_SCAN_RANGE_4000
EXTRN	?DEFAULT_RADAR_SCAN_RANGE_8000@@3MA:DWORD	; DEFAULT_RADAR_SCAN_RANGE_8000
EXTRN	?base_cockpit_graphics_file@@3W4GRAPHICS_FILE_SPECIFIERS@@A:DWORD ; base_cockpit_graphics_file
EXTRN	?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A:DWORD ; current_flight_dynamics
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?lhs_mfd_mode@@3W4MFD_MODES@@A DD 01H DUP (?)		; lhs_mfd_mode
?rhs_mfd_mode@@3W4MFD_MODES@@A DD 01H DUP (?)		; rhs_mfd_mode
?mfd_colours@@3PAUREAL_COLOUR@@A DD 014H DUP (?)	; mfd_colours
?text_display_colours@@3PAUREAL_COLOUR@@A DD 02H DUP (?) ; text_display_colours
?draw_line_func@@3P6GXMMMMUREAL_COLOUR@@@ZA DD 01H DUP (?) ; draw_line_func
?mfd_env@@3PAUENV_2D@@A DD 01H DUP (?)			; mfd_env
?mfd_viewport_size@@3MA DD 01H DUP (?)			; mfd_viewport_size
?mfd_viewport_x_org@@3MA DD 01H DUP (?)			; mfd_viewport_x_org
?mfd_viewport_y_org@@3MA DD 01H DUP (?)			; mfd_viewport_y_org
?mfd_viewport_x_min@@3MA DD 01H DUP (?)			; mfd_viewport_x_min
?mfd_viewport_y_min@@3MA DD 01H DUP (?)			; mfd_viewport_y_min
?mfd_viewport_x_max@@3MA DD 01H DUP (?)			; mfd_viewport_x_max
?mfd_viewport_y_max@@3MA DD 01H DUP (?)			; mfd_viewport_y_max
?draw_large_mfd@@3HA DD 01H DUP (?)			; draw_large_mfd
?mfd_texture_size@@3HA DD 01H DUP (?)			; mfd_texture_size
?mfd_viewport_texture_x_org@@3HA DD 01H DUP (?)		; mfd_viewport_texture_x_org
?mfd_viewport_texture_y_org@@3HA DD 01H DUP (?)		; mfd_viewport_texture_y_org
?i_translate_3d@@3MA DD 01H DUP (?)			; i_translate_3d
?j_translate_3d@@3MA DD 01H DUP (?)			; j_translate_3d
?i_scale_3d@@3MA DD 01H DUP (?)				; i_scale_3d
?j_scale_3d@@3MA DD 01H DUP (?)				; j_scale_3d
?lhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; lhs_mfd_texture_screen
?rhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; rhs_mfd_texture_screen
?lhs_overlaid_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; lhs_overlaid_mfd_texture_screen
?rhs_overlaid_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; rhs_overlaid_mfd_texture_screen
?eo_3d_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; eo_3d_texture_screen
?clear_mfd_colour@@3UREAL_COLOUR@@A DD 01H DUP (?)	; clear_mfd_colour
?clear_green_mfd_colour@@3UREAL_COLOUR@@A DD 01H DUP (?) ; clear_green_mfd_colour
?radar_zoomed@@3HA DD 01H DUP (?)			; radar_zoomed
?tsd_ase_range@@3MA DD 01H DUP (?)			; tsd_ase_range
?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A DD 01H DUP (?) ; tsd_declutter_level
?tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A DD 01H DUP (?)	; tsd_underlay
?tsd_tads_underlay_active@@3FA DW 01H DUP (?)		; tsd_tads_underlay_active
	ALIGN	4

?tsd_threat_line_flash_timer@@3MA DD 01H DUP (?)	; tsd_threat_line_flash_timer
?tsd_draw_threat_line_status@@3HA DD 01H DUP (?)	; tsd_draw_threat_line_status
?tads_lase_flash_timer@@3MA DD 01H DUP (?)		; tads_lase_flash_timer
?tads_display_lase_status@@3HA DD 01H DUP (?)		; tads_display_lase_status
?ase_threat_line_flash_timer@@3MA DD 01H DUP (?)	; ase_threat_line_flash_timer
?ase_draw_threat_line_status@@3HA DD 01H DUP (?)	; ase_draw_threat_line_status
?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A DB 01cH DUP (?) ; weapon_sprite
?weapon_sprite_data@@3PAEA DD 01H DUP (?)		; weapon_sprite_data
?weapon_mask_data@@3PAEA DD 01H DUP (?)			; weapon_mask_data
?weapon_x_offset@@3HA DD 01H DUP (?)			; weapon_x_offset
?weapon_y_offset@@3HA DD 01H DUP (?)			; weapon_y_offset
?weapon_draw_on_texture@@3HA DD 01H DUP (?)		; weapon_draw_on_texture
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c2180000
CONST	SEGMENT
__real@c2180000 DD 0c2180000r			; -38
CONST	ENDS
;	COMDAT __real@c1c80000
CONST	SEGMENT
__real@c1c80000 DD 0c1c80000r			; -25
CONST	ENDS
;	COMDAT __real@c1980000
CONST	SEGMENT
__real@c1980000 DD 0c1980000r			; -19
CONST	ENDS
;	COMDAT __real@c1800000
CONST	SEGMENT
__real@c1800000 DD 0c1800000r			; -16
CONST	ENDS
;	COMDAT __real@c1500000
CONST	SEGMENT
__real@c1500000 DD 0c1500000r			; -13
CONST	ENDS
;	COMDAT __real@c1400000
CONST	SEGMENT
__real@c1400000 DD 0c1400000r			; -12
CONST	ENDS
;	COMDAT __real@c1000000
CONST	SEGMENT
__real@c1000000 DD 0c1000000r			; -8
CONST	ENDS
;	COMDAT __real@c0e00000
CONST	SEGMENT
__real@c0e00000 DD 0c0e00000r			; -7
CONST	ENDS
;	COMDAT __real@c0c00000
CONST	SEGMENT
__real@c0c00000 DD 0c0c00000r			; -6
CONST	ENDS
;	COMDAT __real@c0a00000
CONST	SEGMENT
__real@c0a00000 DD 0c0a00000r			; -5
CONST	ENDS
;	COMDAT __real@c08f400000000000
CONST	SEGMENT
__real@c08f400000000000 DQ 0c08f400000000000r	; -1000
CONST	ENDS
;	COMDAT __real@c0800000
CONST	SEGMENT
__real@c0800000 DD 0c0800000r			; -4
CONST	ENDS
;	COMDAT __real@c0400000
CONST	SEGMENT
__real@c0400000 DD 0c0400000r			; -3
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bff199999999999a
CONST	SEGMENT
__real@bff199999999999a DQ 0bff199999999999ar	; -1.1
CONST	ENDS
;	COMDAT __real@bfe6666673333333
CONST	SEGMENT
__real@bfe6666673333333 DQ 0bfe6666673333333r	; -0.7
CONST	ENDS
;	COMDAT __real@bfe3333333333333
CONST	SEGMENT
__real@bfe3333333333333 DQ 0bfe3333333333333r	; -0.6
CONST	ENDS
;	COMDAT __real@bfe0c15236000000
CONST	SEGMENT
__real@bfe0c15236000000 DQ 0bfe0c15236000000r	; -0.523599
CONST	ENDS
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
CONST	ENDS
;	COMDAT __real@bfd999999999999a
CONST	SEGMENT
__real@bfd999999999999a DQ 0bfd999999999999ar	; -0.4
CONST	ENDS
;	COMDAT __real@bfd6666666666666
CONST	SEGMENT
__real@bfd6666666666666 DQ 0bfd6666666666666r	; -0.35
CONST	ENDS
;	COMDAT __real@bfc3333333333333
CONST	SEGMENT
__real@bfc3333333333333 DQ 0bfc3333333333333r	; -0.15
CONST	ENDS
;	COMDAT __real@bfb999999999999a
CONST	SEGMENT
__real@bfb999999999999a DQ 0bfb999999999999ar	; -0.1
CONST	ENDS
;	COMDAT __real@bf8ccccd
CONST	SEGMENT
__real@bf8ccccd DD 0bf8ccccdr			; -1.1
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf7ae148
CONST	SEGMENT
__real@bf7ae148 DD 0bf7ae148r			; -0.98
CONST	ENDS
;	COMDAT __real@bf79999a
CONST	SEGMENT
__real@bf79999a DD 0bf79999ar			; -0.975
CONST	ENDS
;	COMDAT __real@bf7851ec
CONST	SEGMENT
__real@bf7851ec DD 0bf7851ecr			; -0.97
CONST	ENDS
;	COMDAT __real@bf770a3d
CONST	SEGMENT
__real@bf770a3d DD 0bf770a3dr			; -0.965
CONST	ENDS
;	COMDAT __real@bf73d70a
CONST	SEGMENT
__real@bf73d70a DD 0bf73d70ar			; -0.9525
CONST	ENDS
;	COMDAT __real@bf733333
CONST	SEGMENT
__real@bf733333 DD 0bf733333r			; -0.95
CONST	ENDS
;	COMDAT __real@bf6e147b
CONST	SEGMENT
__real@bf6e147b DD 0bf6e147br			; -0.93
CONST	ENDS
;	COMDAT __real@bf68f5c3
CONST	SEGMENT
__real@bf68f5c3 DD 0bf68f5c3r			; -0.91
CONST	ENDS
;	COMDAT __real@bf666666
CONST	SEGMENT
__real@bf666666 DD 0bf666666r			; -0.9
CONST	ENDS
;	COMDAT __real@bf600000
CONST	SEGMENT
__real@bf600000 DD 0bf600000r			; -0.875
CONST	ENDS
;	COMDAT __real@bf59999a
CONST	SEGMENT
__real@bf59999a DD 0bf59999ar			; -0.85
CONST	ENDS
;	COMDAT __real@bf58f5c3
CONST	SEGMENT
__real@bf58f5c3 DD 0bf58f5c3r			; -0.8475
CONST	ENDS
;	COMDAT __real@bf547ae1
CONST	SEGMENT
__real@bf547ae1 DD 0bf547ae1r			; -0.83
CONST	ENDS
;	COMDAT __real@bf533333
CONST	SEGMENT
__real@bf533333 DD 0bf533333r			; -0.825
CONST	ENDS
;	COMDAT __real@bf4ccccd
CONST	SEGMENT
__real@bf4ccccd DD 0bf4ccccdr			; -0.8
CONST	ENDS
;	COMDAT __real@bf4b851f
CONST	SEGMENT
__real@bf4b851f DD 0bf4b851fr			; -0.795
CONST	ENDS
;	COMDAT __real@bf4ac083
CONST	SEGMENT
__real@bf4ac083 DD 0bf4ac083r			; -0.792
CONST	ENDS
;	COMDAT __real@bf466666
CONST	SEGMENT
__real@bf466666 DD 0bf466666r			; -0.775
CONST	ENDS
;	COMDAT __real@bf400000
CONST	SEGMENT
__real@bf400000 DD 0bf400000r			; -0.75
CONST	ENDS
;	COMDAT __real@bf3d70a4
CONST	SEGMENT
__real@bf3d70a4 DD 0bf3d70a4r			; -0.74
CONST	ENDS
;	COMDAT __real@bf3851ec
CONST	SEGMENT
__real@bf3851ec DD 0bf3851ecr			; -0.72
CONST	ENDS
;	COMDAT __real@bf333334
CONST	SEGMENT
__real@bf333334 DD 0bf333334r			; -0.7
CONST	ENDS
;	COMDAT __real@bf333333
CONST	SEGMENT
__real@bf333333 DD 0bf333333r			; -0.7
CONST	ENDS
;	COMDAT __real@bf2ccccd
CONST	SEGMENT
__real@bf2ccccd DD 0bf2ccccdr			; -0.675
CONST	ENDS
;	COMDAT __real@bf266666
CONST	SEGMENT
__real@bf266666 DD 0bf266666r			; -0.65
CONST	ENDS
;	COMDAT __real@bf23d70b
CONST	SEGMENT
__real@bf23d70b DD 0bf23d70br			; -0.64
CONST	ENDS
;	COMDAT __real@bf2147ae
CONST	SEGMENT
__real@bf2147ae DD 0bf2147aer			; -0.63
CONST	ENDS
;	COMDAT __real@bf19999a
CONST	SEGMENT
__real@bf19999a DD 0bf19999ar			; -0.6
CONST	ENDS
;	COMDAT __real@bf147ae2
CONST	SEGMENT
__real@bf147ae2 DD 0bf147ae2r			; -0.58
CONST	ENDS
;	COMDAT __real@bf0ccccd
CONST	SEGMENT
__real@bf0ccccd DD 0bf0ccccdr			; -0.55
CONST	ENDS
;	COMDAT __real@bf060a92
CONST	SEGMENT
__real@bf060a92 DD 0bf060a92r			; -0.523599
CONST	ENDS
;	COMDAT __real@bf051eb9
CONST	SEGMENT
__real@bf051eb9 DD 0bf051eb9r			; -0.52
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@beeb851f
CONST	SEGMENT
__real@beeb851f DD 0beeb851fr			; -0.46
CONST	ENDS
;	COMDAT __real@bee66666
CONST	SEGMENT
__real@bee66666 DD 0bee66666r			; -0.45
CONST	ENDS
;	COMDAT __real@bedf66f3
CONST	SEGMENT
__real@bedf66f3 DD 0bedf66f3r			; -0.436332
CONST	ENDS
;	COMDAT __real@bed70a3d
CONST	SEGMENT
__real@bed70a3d DD 0bed70a3dr			; -0.42
CONST	ENDS
;	COMDAT __real@becccccd
CONST	SEGMENT
__real@becccccd DD 0becccccdr			; -0.4
CONST	ENDS
;	COMDAT __real@beb33333
CONST	SEGMENT
__real@beb33333 DD 0beb33333r			; -0.35
CONST	ENDS
;	COMDAT __real@beb2b8c2
CONST	SEGMENT
__real@beb2b8c2 DD 0beb2b8c2r			; -0.349066
CONST	ENDS
;	COMDAT __real@beae147b
CONST	SEGMENT
__real@beae147b DD 0beae147br			; -0.34
CONST	ENDS
;	COMDAT __real@be99999a
CONST	SEGMENT
__real@be99999a DD 0be99999ar			; -0.3
CONST	ENDS
;	COMDAT __real@be8f5c29
CONST	SEGMENT
__real@be8f5c29 DD 0be8f5c29r			; -0.28
CONST	ENDS
;	COMDAT __real@be8a3d71
CONST	SEGMENT
__real@be8a3d71 DD 0be8a3d71r			; -0.27
CONST	ENDS
;	COMDAT __real@be860a92
CONST	SEGMENT
__real@be860a92 DD 0be860a92r			; -0.261799
CONST	ENDS
;	COMDAT __real@be800000
CONST	SEGMENT
__real@be800000 DD 0be800000r			; -0.25
CONST	ENDS
;	COMDAT __real@be666666
CONST	SEGMENT
__real@be666666 DD 0be666666r			; -0.225
CONST	ENDS
;	COMDAT __real@be6147ae
CONST	SEGMENT
__real@be6147ae DD 0be6147aer			; -0.22
CONST	ENDS
;	COMDAT __real@be4ccccd
CONST	SEGMENT
__real@be4ccccd DD 0be4ccccdr			; -0.2
CONST	ENDS
;	COMDAT __real@be428f5c
CONST	SEGMENT
__real@be428f5c DD 0be428f5cr			; -0.19
CONST	ENDS
;	COMDAT __real@be35c28f
CONST	SEGMENT
__real@be35c28f DD 0be35c28fr			; -0.1775
CONST	ENDS
;	COMDAT __real@be333333
CONST	SEGMENT
__real@be333333 DD 0be333333r			; -0.175
CONST	ENDS
;	COMDAT __real@be32b8c2
CONST	SEGMENT
__real@be32b8c2 DD 0be32b8c2r			; -0.174533
CONST	ENDS
;	COMDAT __real@be23d70a
CONST	SEGMENT
__real@be23d70a DD 0be23d70ar			; -0.16
CONST	ENDS
;	COMDAT __real@be19999a
CONST	SEGMENT
__real@be19999a DD 0be19999ar			; -0.15
CONST	ENDS
;	COMDAT __real@be0f5c29
CONST	SEGMENT
__real@be0f5c29 DD 0be0f5c29r			; -0.14
CONST	ENDS
;	COMDAT __real@bdcccccd
CONST	SEGMENT
__real@bdcccccd DD 0bdcccccdr			; -0.1
CONST	ENDS
;	COMDAT __real@bdb851ec
CONST	SEGMENT
__real@bdb851ec DD 0bdb851ecr			; -0.09
CONST	ENDS
;	COMDAT __real@bdb2b8c2
CONST	SEGMENT
__real@bdb2b8c2 DD 0bdb2b8c2r			; -0.0872665
CONST	ENDS
;	COMDAT __real@bda3d70a
CONST	SEGMENT
__real@bda3d70a DD 0bda3d70ar			; -0.08
CONST	ENDS
;	COMDAT __real@bd99999a
CONST	SEGMENT
__real@bd99999a DD 0bd99999ar			; -0.075
CONST	ENDS
;	COMDAT __real@bd8f5c29
CONST	SEGMENT
__real@bd8f5c29 DD 0bd8f5c29r			; -0.07
CONST	ENDS
;	COMDAT __real@bd4ccccd
CONST	SEGMENT
__real@bd4ccccd DD 0bd4ccccdr			; -0.05
CONST	ENDS
;	COMDAT __real@bd23d70a
CONST	SEGMENT
__real@bd23d70a DD 0bd23d70ar			; -0.04
CONST	ENDS
;	COMDAT __real@bcf5c28f
CONST	SEGMENT
__real@bcf5c28f DD 0bcf5c28fr			; -0.03
CONST	ENDS
;	COMDAT __real@bc23d70a
CONST	SEGMENT
__real@bc23d70a DD 0bc23d70ar			; -0.01
CONST	ENDS
;	COMDAT __real@80000000
CONST	SEGMENT
__real@80000000 DD 080000000r			; -0
CONST	ENDS
;	COMDAT __real@49742400
CONST	SEGMENT
__real@49742400 DD 049742400r			; 1e+06
CONST	ENDS
;	COMDAT __real@46c35000
CONST	SEGMENT
__real@46c35000 DD 046c35000r			; 25000
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@459c4000
CONST	SEGMENT
__real@459c4000 DD 0459c4000r			; 5000
CONST	ENDS
;	COMDAT __real@44fa0000
CONST	SEGMENT
__real@44fa0000 DD 044fa0000r			; 2000
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@43e30000
CONST	SEGMENT
__real@43e30000 DD 043e30000r			; 454
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@43650000
CONST	SEGMENT
__real@43650000 DD 043650000r			; 229
CONST	ENDS
;	COMDAT __real@4344d9b3
CONST	SEGMENT
__real@4344d9b3 DD 04344d9b3r			; 196.85
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@41900000
CONST	SEGMENT
__real@41900000 DD 041900000r			; 18
CONST	ENDS
;	COMDAT __real@41600000
CONST	SEGMENT
__real@41600000 DD 041600000r			; 14
CONST	ENDS
;	COMDAT __real@4121999a
CONST	SEGMENT
__real@4121999a DD 04121999ar			; 10.1
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40f86a0000000000
CONST	SEGMENT
__real@40f86a0000000000 DQ 040f86a0000000000r	; 100000
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40a3880000000000
CONST	SEGMENT
__real@40a3880000000000 DQ 040a3880000000000r	; 2500
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@409f400000000000
CONST	SEGMENT
__real@409f400000000000 DQ 0409f400000000000r	; 2000
CONST	ENDS
;	COMDAT __real@4097700000000000
CONST	SEGMENT
__real@4097700000000000 DQ 04097700000000000r	; 1500
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@40845f306446f9b4
CONST	SEGMENT
__real@40845f306446f9b4 DQ 040845f306446f9b4r	; 651.899
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@4069000000000000
CONST	SEGMENT
__real@4069000000000000 DQ 04069000000000000r	; 200
CONST	ENDS
;	COMDAT __real@40666666
CONST	SEGMENT
__real@40666666 DD 040666666r			; 3.6
CONST	ENDS
;	COMDAT __real@4060000000000000
CONST	SEGMENT
__real@4060000000000000 DQ 04060000000000000r	; 128
CONST	ENDS
;	COMDAT __real@405fc00000000000
CONST	SEGMENT
__real@405fc00000000000 DQ 0405fc00000000000r	; 127
CONST	ENDS
;	COMDAT __real@405f400000000000
CONST	SEGMENT
__real@405f400000000000 DQ 0405f400000000000r	; 125
CONST	ENDS
;	COMDAT __real@405e000000000000
CONST	SEGMENT
__real@405e000000000000 DQ 0405e000000000000r	; 120
CONST	ENDS
;	COMDAT __real@405b800000000000
CONST	SEGMENT
__real@405b800000000000 DQ 0405b800000000000r	; 110
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@4058f9999999999a
CONST	SEGMENT
__real@4058f9999999999a DQ 04058f9999999999ar	; 99.9
CONST	ENDS
;	COMDAT __real@4051f948
CONST	SEGMENT
__real@4051f948 DD 04051f948r			; 3.28084
CONST	ENDS
;	COMDAT __real@4050400000000000
CONST	SEGMENT
__real@4050400000000000 DQ 04050400000000000r	; 65
CONST	ENDS
;	COMDAT __real@404ca5dc00000000
CONST	SEGMENT
__real@404ca5dc00000000 DQ 0404ca5dc00000000r	; 57.2958
CONST	ENDS
;	COMDAT __real@40466666
CONST	SEGMENT
__real@40466666 DD 040466666r			; 3.1
CONST	ENDS
;	COMDAT __real@4040800000000000
CONST	SEGMENT
__real@4040800000000000 DQ 04040800000000000r	; 33
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@4037000000000000
CONST	SEGMENT
__real@4037000000000000 DQ 04037000000000000r	; 23
CONST	ENDS
;	COMDAT __real@4034000000000000
CONST	SEGMENT
__real@4034000000000000 DQ 04034000000000000r	; 20
CONST	ENDS
;	COMDAT __real@402a000000000000
CONST	SEGMENT
__real@402a000000000000 DQ 0402a000000000000r	; 13
CONST	ENDS
;	COMDAT __real@4026eb1686b280e6
CONST	SEGMENT
__real@4026eb1686b280e6 DQ 04026eb1686b280e6r	; 11.4592
CONST	ENDS
;	COMDAT __real@4026000000000000
CONST	SEGMENT
__real@4026000000000000 DQ 04026000000000000r	; 11
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@401c000000000000
CONST	SEGMENT
__real@401c000000000000 DQ 0401c000000000000r	; 7
CONST	ENDS
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT __real@4016eb167e7d81e3
CONST	SEGMENT
__real@4016eb167e7d81e3 DQ 04016eb167e7d81e3r	; 5.72958
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@400d1eb8
CONST	SEGMENT
__real@400d1eb8 DD 0400d1eb8r			; 2.205
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff85d84
CONST	SEGMENT
__real@3ff85d84 DD 03ff85d84r			; 1.94035
CONST	ENDS
;	COMDAT __real@3ff8000000000000
CONST	SEGMENT
__real@3ff8000000000000 DQ 03ff8000000000000r	; 1.5
CONST	ENDS
;	COMDAT __real@3ff5d3d193333333
CONST	SEGMENT
__real@3ff5d3d193333333 DQ 03ff5d3d193333333r	; 1.36421
CONST	ENDS
;	COMDAT __real@3ff199999999999a
CONST	SEGMENT
__real@3ff199999999999a DQ 03ff199999999999ar	; 1.1
CONST	ENDS
;	COMDAT __real@3ff0c09b332ccccd
CONST	SEGMENT
__real@3ff0c09b332ccccd DQ 03ff0c09b332ccccdr	; 1.04702
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fec000000000000
CONST	SEGMENT
__real@3fec000000000000 DQ 03fec000000000000r	; 0.875
CONST	ENDS
;	COMDAT __real@3feb333333333333
CONST	SEGMENT
__real@3feb333333333333 DQ 03feb333333333333r	; 0.85
CONST	ENDS
;	COMDAT __real@3fe999999999999a
CONST	SEGMENT
__real@3fe999999999999a DQ 03fe999999999999ar	; 0.8
CONST	ENDS
;	COMDAT __real@3fe0c15236000000
CONST	SEGMENT
__real@3fe0c15236000000 DQ 03fe0c15236000000r	; 0.523599
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd3333333333333
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fcccccd
CONST	SEGMENT
__real@3fcccccd DD 03fcccccdr			; 1.6
CONST	ENDS
;	COMDAT __real@3fcc28f5c28f5c29
CONST	SEGMENT
__real@3fcc28f5c28f5c29 DQ 03fcc28f5c28f5c29r	; 0.22
CONST	ENDS
;	COMDAT __real@3fc999999999999a
CONST	SEGMENT
__real@3fc999999999999a DQ 03fc999999999999ar	; 0.2
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3fc70a3d70a3d70a
CONST	SEGMENT
__real@3fc70a3d70a3d70a DQ 03fc70a3d70a3d70ar	; 0.18
CONST	ENDS
;	COMDAT __real@3fc6571848000000
CONST	SEGMENT
__real@3fc6571848000000 DQ 03fc6571848000000r	; 0.174533
CONST	ENDS
;	COMDAT __real@3fc3333333333333
CONST	SEGMENT
__real@3fc3333333333333 DQ 03fc3333333333333r	; 0.15
CONST	ENDS
;	COMDAT __real@3fc0000000000000
CONST	SEGMENT
__real@3fc0000000000000 DQ 03fc0000000000000r	; 0.125
CONST	ENDS
;	COMDAT __real@3fbc28f5c28f5c29
CONST	SEGMENT
__real@3fbc28f5c28f5c29 DQ 03fbc28f5c28f5c29r	; 0.11
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3fb3333333333333
CONST	SEGMENT
__real@3fb3333333333333 DQ 03fb3333333333333r	; 0.075
CONST	ENDS
;	COMDAT __real@3faeb851eb851eb8
CONST	SEGMENT
__real@3faeb851eb851eb8 DQ 03faeb851eb851eb8r	; 0.06
CONST	ENDS
;	COMDAT __real@3fae9e8d
CONST	SEGMENT
__real@3fae9e8d DD 03fae9e8dr			; 1.36421
CONST	ENDS
;	COMDAT __real@3fa999999999999a
CONST	SEGMENT
__real@3fa999999999999a DQ 03fa999999999999ar	; 0.05
CONST	ENDS
;	COMDAT __real@3fa47ae147ae147b
CONST	SEGMENT
__real@3fa47ae147ae147b DQ 03fa47ae147ae147br	; 0.04
CONST	ENDS
;	COMDAT __real@3f9eb851eb851eb8
CONST	SEGMENT
__real@3f9eb851eb851eb8 DQ 03f9eb851eb851eb8r	; 0.03
CONST	ENDS
;	COMDAT __real@3f9b573eab367a10
CONST	SEGMENT
__real@3f9b573eab367a10 DQ 03f9b573eab367a10r	; 0.0267
CONST	ENDS
;	COMDAT __real@3f9999999999999a
CONST	SEGMENT
__real@3f9999999999999a DQ 03f9999999999999ar	; 0.025
CONST	ENDS
;	COMDAT __real@3f947ae147ae147b
CONST	SEGMENT
__real@3f947ae147ae147b DQ 03f947ae147ae147br	; 0.02
CONST	ENDS
;	COMDAT __real@3f8ccccd
CONST	SEGMENT
__real@3f8ccccd DD 03f8ccccdr			; 1.1
CONST	ENDS
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT __real@3f83a92a30553261
CONST	SEGMENT
__real@3f83a92a30553261 DQ 03f83a92a30553261r	; 0.0096
CONST	ENDS
;	COMDAT __real@3f82f6e9
CONST	SEGMENT
__real@3f82f6e9 DD 03f82f6e9r			; 1.02316
CONST	ENDS
;	COMDAT __real@3f80624dd2f1a9fc
CONST	SEGMENT
__real@3f80624dd2f1a9fc DQ 03f80624dd2f1a9fcr	; 0.008
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7eb852
CONST	SEGMENT
__real@3f7eb852 DD 03f7eb852r			; 0.995
CONST	ENDS
;	COMDAT __real@3f7c28f6
CONST	SEGMENT
__real@3f7c28f6 DD 03f7c28f6r			; 0.985
CONST	ENDS
;	COMDAT __real@3f7ae148
CONST	SEGMENT
__real@3f7ae148 DD 03f7ae148r			; 0.98
CONST	ENDS
;	COMDAT __real@3f789374cccccccd
CONST	SEGMENT
__real@3f789374cccccccd DQ 03f789374cccccccdr	; 0.006
CONST	ENDS
;	COMDAT __real@3f7851ec
CONST	SEGMENT
__real@3f7851ec DD 03f7851ecr			; 0.97
CONST	ENDS
;	COMDAT __real@3f770a3d
CONST	SEGMENT
__real@3f770a3d DD 03f770a3dr			; 0.965
CONST	ENDS
;	COMDAT __real@3f74fdf4
CONST	SEGMENT
__real@3f74fdf4 DD 03f74fdf4r			; 0.957
CONST	ENDS
;	COMDAT __real@3f733333
CONST	SEGMENT
__real@3f733333 DD 03f733333r			; 0.95
CONST	ENDS
;	COMDAT __real@3f700000
CONST	SEGMENT
__real@3f700000 DD 03f700000r			; 0.9375
CONST	ENDS
;	COMDAT __real@3f6e147b
CONST	SEGMENT
__real@3f6e147b DD 03f6e147br			; 0.93
CONST	ENDS
;	COMDAT __real@3f6c28f6
CONST	SEGMENT
__real@3f6c28f6 DD 03f6c28f6r			; 0.9225
CONST	ENDS
;	COMDAT __real@3f68f5c3
CONST	SEGMENT
__real@3f68f5c3 DD 03f68f5c3r			; 0.91
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f651eb8
CONST	SEGMENT
__real@3f651eb8 DD 03f651eb8r			; 0.895
CONST	ENDS
;	COMDAT __real@3f63d70a
CONST	SEGMENT
__real@3f63d70a DD 03f63d70ar			; 0.89
CONST	ENDS
;	COMDAT __real@3f628f5c
CONST	SEGMENT
__real@3f628f5c DD 03f628f5cr			; 0.885
CONST	ENDS
;	COMDAT __real@3f6147ae
CONST	SEGMENT
__real@3f6147ae DD 03f6147aer			; 0.88
CONST	ENDS
;	COMDAT __real@3f61111111111111
CONST	SEGMENT
__real@3f61111111111111 DQ 03f61111111111111r	; 0.00208333
CONST	ENDS
;	COMDAT __real@3f60a3d7
CONST	SEGMENT
__real@3f60a3d7 DD 03f60a3d7r			; 0.8775
CONST	ENDS
;	COMDAT __real@3f600000
CONST	SEGMENT
__real@3f600000 DD 03f600000r			; 0.875
CONST	ENDS
;	COMDAT __real@3f5ccccd
CONST	SEGMENT
__real@3f5ccccd DD 03f5ccccdr			; 0.8625
CONST	ENDS
;	COMDAT __real@3f5c28f6
CONST	SEGMENT
__real@3f5c28f6 DD 03f5c28f6r			; 0.86
CONST	ENDS
;	COMDAT __real@3f5b645a
CONST	SEGMENT
__real@3f5b645a DD 03f5b645ar			; 0.857
CONST	ENDS
;	COMDAT __real@3f5a3d71
CONST	SEGMENT
__real@3f5a3d71 DD 03f5a3d71r			; 0.8525
CONST	ENDS
;	COMDAT __real@3f59999a
CONST	SEGMENT
__real@3f59999a DD 03f59999ar			; 0.85
CONST	ENDS
;	COMDAT __real@3f5999999999999a
CONST	SEGMENT
__real@3f5999999999999a DQ 03f5999999999999ar	; 0.0015625
CONST	ENDS
;	COMDAT __real@3f566666
CONST	SEGMENT
__real@3f566666 DD 03f566666r			; 0.8375
CONST	ENDS
;	COMDAT __real@3f51eb85
CONST	SEGMENT
__real@3f51eb85 DD 03f51eb85r			; 0.82
CONST	ENDS
;	COMDAT __real@3f50a3d7
CONST	SEGMENT
__real@3f50a3d7 DD 03f50a3d7r			; 0.815
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3f4eb852
CONST	SEGMENT
__real@3f4eb852 DD 03f4eb852r			; 0.8075
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f4ac083
CONST	SEGMENT
__real@3f4ac083 DD 03f4ac083r			; 0.792
CONST	ENDS
;	COMDAT __real@3f4a3d71
CONST	SEGMENT
__real@3f4a3d71 DD 03f4a3d71r			; 0.79
CONST	ENDS
;	COMDAT __real@3f451eb8
CONST	SEGMENT
__real@3f451eb8 DD 03f451eb8r			; 0.77
CONST	ENDS
;	COMDAT __real@3f43a92a3d70a3d7
CONST	SEGMENT
__real@3f43a92a3d70a3d7 DQ 03f43a92a3d70a3d7r	; 0.0006
CONST	ENDS
;	COMDAT __real@3f3eb852
CONST	SEGMENT
__real@3f3eb852 DD 03f3eb852r			; 0.745
CONST	ENDS
;	COMDAT __real@3f3d70a4
CONST	SEGMENT
__real@3f3d70a4 DD 03f3d70a4r			; 0.74
CONST	ENDS
;	COMDAT __real@3f3851ec
CONST	SEGMENT
__real@3f3851ec DD 03f3851ecr			; 0.72
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f2e9e8d
CONST	SEGMENT
__real@3f2e9e8d DD 03f2e9e8dr			; 0.682107
CONST	ENDS
;	COMDAT __real@3f2b851f
CONST	SEGMENT
__real@3f2b851f DD 03f2b851fr			; 0.67
CONST	ENDS
;	COMDAT __real@3f266666
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT __real@3f23d70a
CONST	SEGMENT
__real@3f23d70a DD 03f23d70ar			; 0.64
CONST	ENDS
;	COMDAT __real@3f233333
CONST	SEGMENT
__real@3f233333 DD 03f233333r			; 0.6375
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f133333
CONST	SEGMENT
__real@3f133333 DD 03f133333r			; 0.575
CONST	ENDS
;	COMDAT __real@3f10000000000000
CONST	SEGMENT
__real@3f10000000000000 DQ 03f10000000000000r	; 6.10352e-05
CONST	ENDS
;	COMDAT __real@3f0ccccd
CONST	SEGMENT
__real@3f0ccccd DD 03f0ccccdr			; 0.55
CONST	ENDS
;	COMDAT __real@3f0a3d71
CONST	SEGMENT
__real@3f0a3d71 DD 03f0a3d71r			; 0.54
CONST	ENDS
;	COMDAT __real@3f066666
CONST	SEGMENT
__real@3f066666 DD 03f066666r			; 0.525
CONST	ENDS
;	COMDAT __real@3f060a92
CONST	SEGMENT
__real@3f060a92 DD 03f060a92r			; 0.523599
CONST	ENDS
;	COMDAT __real@3f00002000400080
CONST	SEGMENT
__real@3f00002000400080 DQ 03f00002000400080r	; 3.05185e-05
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ee66666
CONST	SEGMENT
__real@3ee66666 DD 03ee66666r			; 0.45
CONST	ENDS
;	COMDAT __real@3edf66f3
CONST	SEGMENT
__real@3edf66f3 DD 03edf66f3r			; 0.436332
CONST	ENDS
;	COMDAT __real@3ed70a3d
CONST	SEGMENT
__real@3ed70a3d DD 03ed70a3dr			; 0.42
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3ec00000
CONST	SEGMENT
__real@3ec00000 DD 03ec00000r			; 0.375
CONST	ENDS
;	COMDAT __real@3ebd70a4
CONST	SEGMENT
__real@3ebd70a4 DD 03ebd70a4r			; 0.37
CONST	ENDS
;	COMDAT __real@3eb33333
CONST	SEGMENT
__real@3eb33333 DD 03eb33333r			; 0.35
CONST	ENDS
;	COMDAT __real@3eb2b8c2
CONST	SEGMENT
__real@3eb2b8c2 DD 03eb2b8c2r			; 0.349066
CONST	ENDS
;	COMDAT __real@3eae9e8d
CONST	SEGMENT
__real@3eae9e8d DD 03eae9e8dr			; 0.341053
CONST	ENDS
;	COMDAT __real@3eae147b
CONST	SEGMENT
__real@3eae147b DD 03eae147br			; 0.34
CONST	ENDS
;	COMDAT __real@3e9eb852
CONST	SEGMENT
__real@3e9eb852 DD 03e9eb852r			; 0.31
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e8f5c29
CONST	SEGMENT
__real@3e8f5c29 DD 03e8f5c29r			; 0.28
CONST	ENDS
;	COMDAT __real@3e860a92
CONST	SEGMENT
__real@3e860a92 DD 03e860a92r			; 0.261799
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e733333
CONST	SEGMENT
__real@3e733333 DD 03e733333r			; 0.2375
CONST	ENDS
;	COMDAT __real@3e666666
CONST	SEGMENT
__real@3e666666 DD 03e666666r			; 0.225
CONST	ENDS
;	COMDAT __real@3e6147ae
CONST	SEGMENT
__real@3e6147ae DD 03e6147aer			; 0.22
CONST	ENDS
;	COMDAT __real@3e4cccce
CONST	SEGMENT
__real@3e4cccce DD 03e4ccccer			; 0.2
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e428f5c
CONST	SEGMENT
__real@3e428f5c DD 03e428f5cr			; 0.19
CONST	ENDS
;	COMDAT __real@3e3851ec
CONST	SEGMENT
__real@3e3851ec DD 03e3851ecr			; 0.18
CONST	ENDS
;	COMDAT __real@3e35c28f
CONST	SEGMENT
__real@3e35c28f DD 03e35c28fr			; 0.1775
CONST	ENDS
;	COMDAT __real@3e32b8c2
CONST	SEGMENT
__real@3e32b8c2 DD 03e32b8c2r			; 0.174533
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@3e0f5c2a
CONST	SEGMENT
__real@3e0f5c2a DD 03e0f5c2ar			; 0.14
CONST	ENDS
;	COMDAT __real@3e000000
CONST	SEGMENT
__real@3e000000 DD 03e000000r			; 0.125
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3db2b8c2
CONST	SEGMENT
__real@3db2b8c2 DD 03db2b8c2r			; 0.0872665
CONST	ENDS
;	COMDAT __real@3da3d70b
CONST	SEGMENT
__real@3da3d70b DD 03da3d70br			; 0.08
CONST	ENDS
;	COMDAT __real@3da3d70a
CONST	SEGMENT
__real@3da3d70a DD 03da3d70ar			; 0.08
CONST	ENDS
;	COMDAT __real@3d99999a
CONST	SEGMENT
__real@3d99999a DD 03d99999ar			; 0.075
CONST	ENDS
;	COMDAT __real@3d8f5c29
CONST	SEGMENT
__real@3d8f5c29 DD 03d8f5c29r			; 0.07
CONST	ENDS
;	COMDAT __real@3d7c0fc1
CONST	SEGMENT
__real@3d7c0fc1 DD 03d7c0fc1r			; 0.0615385
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3d23d70a
CONST	SEGMENT
__real@3d23d70a DD 03d23d70ar			; 0.04
CONST	ENDS
;	COMDAT __real@3d000000
CONST	SEGMENT
__real@3d000000 DD 03d000000r			; 0.03125
CONST	ENDS
;	COMDAT __real@3cf5c28f
CONST	SEGMENT
__real@3cf5c28f DD 03cf5c28fr			; 0.03
CONST	ENDS
;	COMDAT __real@3ca3d70d
CONST	SEGMENT
__real@3ca3d70d DD 03ca3d70dr			; 0.02
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3c000000
CONST	SEGMENT
__real@3c000000 DD 03c000000r			; 0.0078125
CONST	ENDS
;	COMDAT __real@3b83126f
CONST	SEGMENT
__real@3b83126f DD 03b83126fr			; 0.004
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DBEDONKD@previous_mfd_mode?5?$CB?$DN?5lhs_mfd_mo@
CONST	SEGMENT
??_C@_0CC@DBEDONKD@previous_mfd_mode?5?$CB?$DN?5lhs_mfd_mo@ DB 'previous_'
	DB	'mfd_mode != lhs_mfd_mode', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??select_previous_default_rhs_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_previous_default_rhs_mfd@@YGXXZ@4JA DD 02fa9H ; `select_previous_default_rhs_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BO@IPOHAJBI@next_mfd_mode?5?$CB?$DN?5lhs_mfd_mode@
CONST	SEGMENT
??_C@_0BO@IPOHAJBI@next_mfd_mode?5?$CB?$DN?5lhs_mfd_mode@ DB 'next_mfd_mo'
	DB	'de != lhs_mfd_mode', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??select_next_default_rhs_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_next_default_rhs_mfd@@YGXXZ@4JA DD 02f91H ; `select_next_default_rhs_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CC@HPKCEHMJ@previous_mfd_mode?5?$CB?$DN?5rhs_mfd_mo@
CONST	SEGMENT
??_C@_0CC@HPKCEHMJ@previous_mfd_mode?5?$CB?$DN?5rhs_mfd_mo@ DB 'previous_'
	DB	'mfd_mode != rhs_mfd_mode', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??select_previous_default_lhs_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_previous_default_lhs_mfd@@YGXXZ@4JA DD 02f79H ; `select_previous_default_lhs_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BO@MBAGKDHC@next_mfd_mode?5?$CB?$DN?5rhs_mfd_mode@
CONST	SEGMENT
??_C@_0BO@MBAGKDHC@next_mfd_mode?5?$CB?$DN?5rhs_mfd_mode@ DB 'next_mfd_mo'
	DB	'de != rhs_mfd_mode', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??select_next_default_lhs_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_next_default_lhs_mfd@@YGXXZ@4JA DD 02f61H ; `select_next_default_lhs_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BG@CLGDNIGP@Invalid?5mfd?5mode?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BG@CLGDNIGP@Invalid?5mfd?5mode?5?$DN?5?$CFd@ DB 'Invalid mfd mode '
	DB	'= %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@ DB 'Invalid EO senso'
	DB	'r = %d', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_overlaid_default_mfd@@YGXMMMW4MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_overlaid_default_mfd@@YGXMMMW4MFD_LOCATIONS@@@Z@4JA DD 02be6H ; `draw_overlaid_default_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CG@IPIPCLFE@mfd_viewport_size?5?$DM?$DN?5mfd_textur@
CONST	SEGMENT
??_C@_0CG@IPIPCLFE@mfd_viewport_size?5?$DM?$DN?5mfd_textur@ DB 'mfd_viewp'
	DB	'ort_size <= mfd_texture_size', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_default_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_default_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z@4JA DD 029f8H ; `draw_default_mfd_on_texture'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA DD 029daH ; `draw_flight_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@
CONST	SEGMENT
??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@ DB '--:--:--', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
CONST	SEGMENT
??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@ DB '%02d:%02d:%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BAOIPBEF@?9?3?9?9?4?9@
CONST	SEGMENT
??_C@_06BAOIPBEF@?9?3?9?9?4?9@ DB '-:--.-', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CFANIJPM@?$CFc?3?$CFdKm@
CONST	SEGMENT
??_C@_07CFANIJPM@?$CFc?3?$CFdKm@ DB '%c:%dKm', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EKFBJBJG@?$CFc?3?$CF?41fKm@
CONST	SEGMENT
??_C@_09EKFBJBJG@?$CFc?3?$CF?41fKm@ DB '%c:%.1fKm', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JCIGMCHD@?$CFc?3?$CFdm@
CONST	SEGMENT
??_C@_06JCIGMCHD@?$CFc?3?$CFdm@ DB '%c:%dm', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??display_waypoint_information@@YGXUREAL_COLOUR@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??display_waypoint_information@@YGXUREAL_COLOUR@@@Z@4JA DD 02967H ; `display_waypoint_information'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04FCMNJMCO@?$CFd?$CF?$CF@
CONST	SEGMENT
??_C@_04FCMNJMCO@?$CFd?$CF?$CF@ DB '%d%%', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IAKIMNGC@R?$CFd@
CONST	SEGMENT
??_C@_03IAKIMNGC@R?$CFd@ DB 'R%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NJMPCKOA@?$CFd0@
CONST	SEGMENT
??_C@_03NJMPCKOA@?$CFd0@ DB '%d0', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA DD 026c0H	; `draw_pitch_ladder'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_default_mfd_on_cockpit@@YGXMMHHW4MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_default_mfd_on_cockpit@@YGXMMHHW4MFD_LOCATIONS@@@Z@4JA DD 0250bH ; `draw_default_mfd_on_cockpit'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0L@OGFGIPGD@APU?5?$CF03d?$CF?$CF@
CONST	SEGMENT
??_C@_0L@OGFGIPGD@APU?5?$CF03d?$CF?$CF@ DB 'APU %03d%%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JGIHHDGO@?5?$CFs?5?$CF03d?$CF?$CF@
CONST	SEGMENT
??_C@_0L@JGIHHDGO@?5?$CFs?5?$CF03d?$CF?$CF@ DB ' %s %03d%%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CFLBLB@?5?$CFs?5FLY?5@
CONST	SEGMENT
??_C@_08CFLBLB@?5?$CFs?5FLY?5@ DB ' %s FLY ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EFKGPAPG@?5?$CFs?5IDLE@
CONST	SEGMENT
??_C@_08EFKGPAPG@?5?$CFs?5IDLE@ DB ' %s IDLE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HFPCNHOJ@?5?$CFs?5OFF?5@
CONST	SEGMENT
??_C@_08HFPCNHOJ@?5?$CFs?5OFF?5@ DB ' %s OFF ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HPNMMHPJ@?$CF03d?$CF?$CF@
CONST	SEGMENT
??_C@_06HPNMMHPJ@?$CF03d?$CF?$CF@ DB '%03d%%', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04MJEFHDBD@FLY?5@
CONST	SEGMENT
??_C@_04MJEFHDBD@FLY?5@ DB 'FLY ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IMMGDCFE@IDLE@
CONST	SEGMENT
??_C@_04IMMGDCFE@IDLE@ DB 'IDLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LMJCBFEL@OFF?5@
CONST	SEGMENT
??_C@_04LMJCBFEL@OFF?5@ DB 'OFF ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08PLAGFMEO@THROTTLE@
CONST	SEGMENT
??_C@_08PLAGFMEO@THROTTLE@ DB 'THROTTLE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GEGEOBAJ@?$CF04d?5lbs@
CONST	SEGMENT
??_C@_08GEGEOBAJ@?$CF04d?5lbs@ DB '%04d lbs', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04DICABFLJ@FUEL@
CONST	SEGMENT
??_C@_04DICABFLJ@FUEL@ DB 'FUEL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHGLKFFN@?$CF03d@
CONST	SEGMENT
??_C@_04OHGLKFFN@?$CF03d@ DB '%03d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JNBMPGOL@TORQUE@
CONST	SEGMENT
??_C@_06JNBMPGOL@TORQUE@ DB 'TORQUE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OIGEPKDA@FIRE?5EXTINGUISHER@
CONST	SEGMENT
??_C@_0BC@OIGEPKDA@FIRE?5EXTINGUISHER@ DB 'FIRE EXTINGUISHER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04PCNCCNDP@USED@
CONST	SEGMENT
??_C@_04PCNCCNDP@USED@ DB 'USED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MMJNGGCF@OIL?5PRESSURE@
CONST	SEGMENT
??_C@_0N@MMJNGGCF@OIL?5PRESSURE@ DB 'OIL PRESSURE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@
CONST	SEGMENT
??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@ DB 'HYDRAULIC PRESSURE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08IGCLDBCD@ENGINE?52@
CONST	SEGMENT
??_C@_08IGCLDBCD@ENGINE?52@ DB 'ENGINE 2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KNAGGCOA@ENGINE?51@
CONST	SEGMENT
??_C@_08KNAGGCOA@ENGINE?51@ DB 'ENGINE 1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MCBINMPD@TAIL?5ROTOR@
CONST	SEGMENT
??_C@_0L@MCBINMPD@TAIL?5ROTOR@ DB 'TAIL ROTOR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OHKEFPKJ@DAMAGED@
CONST	SEGMENT
??_C@_07OHKEFPKJ@DAMAGED@ DB 'DAMAGED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FFIGCBMA@MAIN?5ROTOR@
CONST	SEGMENT
??_C@_0L@FFIGCBMA@MAIN?5ROTOR@ DB 'MAIN ROTOR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LMAEBBOE@STABILISER@
CONST	SEGMENT
??_C@_0L@LMAEBBOE@STABILISER@ DB 'STABILISER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04IDKCLELC@PNVS@
CONST	SEGMENT
??_C@_04IDKCLELC@PNVS@ DB 'PNVS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@
CONST	SEGMENT
??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@ DB 'RADAR WARNING SYSTEM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OEDGDHNF@COMMUNICATIONS@
CONST	SEGMENT
??_C@_0P@OEDGDHNF@COMMUNICATIONS@ DB 'COMMUNICATIONS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@
CONST	SEGMENT
??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@ DB 'NAVIGATION COMPUTER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MILGCPFO@IR?5JAMMER@
CONST	SEGMENT
??_C@_09MILGCPFO@IR?5JAMMER@ DB 'IR JAMMER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JDBOFCJG@RADAR?5JAMMER@
CONST	SEGMENT
??_C@_0N@JDBOFCJG@RADAR?5JAMMER@ DB 'RADAR JAMMER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@
CONST	SEGMENT
??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@ DB 'LASER DESIGNATOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05IHELJBBC@RADAR@
CONST	SEGMENT
??_C@_05IHELJBBC@RADAR@ DB 'RADAR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OOEBCMBF@FAIL@
CONST	SEGMENT
??_C@_04OOEBCMBF@FAIL@ DB 'FAIL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GIPFHKNO@OK@
CONST	SEGMENT
??_C@_02GIPFHKNO@OK@ DB 'OK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07FPLKDJGL@warning@
CONST	SEGMENT
??_C@_07FPLKDJGL@warning@ DB 'warning', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09FJJPPKDN@equipment@
CONST	SEGMENT
??_C@_09FJJPPKDN@equipment@ DB 'equipment', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??print_system_message@@YGMPAD0HM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??print_system_message@@YGMPAD0HM@Z@4JA DD 0216eH ; `print_system_message'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z@4JA DD 02043H ; `draw_weapon_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02HJNLAKPP@S8@
CONST	SEGMENT
??_C@_02HJNLAKPP@S8@ DB 'S8', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MMHFHELC@S5@
CONST	SEGMENT
??_C@_02MMHFHELC@S5@ DB 'S5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LENCMAPF@RC@
CONST	SEGMENT
??_C@_02LENCMAPF@RC@ DB 'RC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MCEHGFCK@MP@
CONST	SEGMENT
??_C@_02MCEHGFCK@MP@ DB 'MP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DGKLNCNG@R@
CONST	SEGMENT
??_C@_01DGKLNCNG@R@ DB 'R', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@NDBFDPHK@?$CB?$CCmore?5than?54?5hellfires?5on?5Apac@
CONST	SEGMENT
??_C@_0CJ@NDBFDPHK@?$CB?$CCmore?5than?54?5hellfires?5on?5Apac@ DB '!"more'
	DB	' than 4 hellfires on Apache pylon"', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@DKLMAF@more?5than?54?5hellfires?5on?5Apache@
CONST	SEGMENT
??_C@_0CG@DKLMAF@more?5than?54?5hellfires?5on?5Apache@ DB 'more than 4 he'
	DB	'llfires on Apache pylon', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GPKGLDLB@SALVO@
CONST	SEGMENT
??_C@_05GPKGLDLB@SALVO@ DB 'SALVO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EKDNBCDP@LOAL@
CONST	SEGMENT
??_C@_04EKDNBCDP@LOAL@ DB 'LOAL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MJCDDMFE@TRNGL@
CONST	SEGMENT
??_C@_05MJCDDMFE@TRNGL@ DB 'TRNGL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MGGCNFDL@LRF@
CONST	SEGMENT
??_C@_03MGGCNFDL@LRF@ DB 'LRF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04JMNPMIJD@SAFE@
CONST	SEGMENT
??_C@_04JMNPMIJD@SAFE@ DB 'SAFE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NHPMNECN@ARM@
CONST	SEGMENT
??_C@_03NHPMNECN@ARM@ DB 'ARM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KIGHCFHP@MAN@
CONST	SEGMENT
??_C@_03KIGHCFHP@MAN@ DB 'MAN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MLKBHMKD@FLARE@
CONST	SEGMENT
??_C@_05MLKBHMKD@FLARE@ DB 'FLARE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BAHDIOLJ@XX@
CONST	SEGMENT
??_C@_02BAHDIOLJ@XX@ DB 'XX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GPCJOALC@?$CF2d@
CONST	SEGMENT
??_C@_03GPCJOALC@?$CF2d@ DB '%2d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FOOOBDLP@CHAFF@
CONST	SEGMENT
??_C@_05FOOOBDLP@CHAFF@ DB 'CHAFF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04CPMKADPB@XXXX@
CONST	SEGMENT
??_C@_04CPMKADPB@XXXX@ DB 'XXXX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GLKEJMAA@?$CF4d@
CONST	SEGMENT
??_C@_03GLKEJMAA@?$CF4d@ DB '%4d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MFMEIMLB@draw_large_mfd@
CONST	SEGMENT
??_C@_0P@MFMEIMLB@draw_large_mfd@ DB 'draw_large_mfd', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z@4JA DD 01d0cH ; `draw_large_weapon_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04OGKJMPGK@?$CF02d@
CONST	SEGMENT
??_C@_04OGKJMPGK@?$CF02d@ DB '%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OCCELDNI@?$CF04d@
CONST	SEGMENT
??_C@_04OCCELDNI@?$CF04d@ DB '%04d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OHJEOGMH@y?5?$DO?$DN?50@
CONST	SEGMENT
??_C@_06OHJEOGMH@y?5?$DO?$DN?50@ DB 'y >= 0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBODONHD@x?5?$DO?$DN?50@
CONST	SEGMENT
??_C@_06EBODONHD@x?5?$DO?$DN?50@ DB 'x >= 0', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_sprite@@YGXHHHHHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_sprite@@YGXHHHHHH@Z@4JA DD 01550H	; `draw_sprite'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06DPNNIDIB@F?3?$CF02d@
CONST	SEGMENT
??_C@_06DPNNIDIB@F?3?$CF02d@ DB 'F:%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GBDFBFJK@F?3XX@
CONST	SEGMENT
??_C@_04GBDFBFJK@F?3XX@ DB 'F:XX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@
CONST	SEGMENT
??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@ DB 'FLARE:%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HGDOPGOH@FLARE?3XX@
CONST	SEGMENT
??_C@_08HGDOPGOH@FLARE?3XX@ DB 'FLARE:XX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GNOFKMCG@C?3?$CF02d@
CONST	SEGMENT
??_C@_06GNOFKMCG@C?3?$CF02d@ DB 'C:%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KJNFJKOK@C?3XX@
CONST	SEGMENT
??_C@_04KJNFJKOK@C?3XX@ DB 'C:XX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@
CONST	SEGMENT
??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@ DB 'CHAFF:%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHAEIHAP@CHAFF?3XX@
CONST	SEGMENT
??_C@_08GHAEIHAP@CHAFF?3XX@ DB 'CHAFF:XX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09NCCLNCCC@AUTO?5PAGE@
CONST	SEGMENT
??_C@_09NCCLNCCC@AUTO?5PAGE@ DB 'AUTO PAGE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NKOLJMOI@AUTO?5C?1M@
CONST	SEGMENT
??_C@_08NKOLJMOI@AUTO?5C?1M@ DB 'AUTO C/M', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JCJCOOPL@RD?5OFF@
CONST	SEGMENT
??_C@_06JCJCOOPL@RD?5OFF@ DB 'RD OFF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BHAGAOGB@RD?5ON@
CONST	SEGMENT
??_C@_05BHAGAOGB@RD?5ON@ DB 'RD ON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JNKFDAHI@RD?5XXX@
CONST	SEGMENT
??_C@_06JNKFDAHI@RD?5XXX@ DB 'RD XXX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@
CONST	SEGMENT
??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@ DB 'RD JAM OFF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OKIOJJOP@RD?5JAM?5ON@
CONST	SEGMENT
??_C@_09OKIOJJOP@RD?5JAM?5ON@ DB 'RD JAM ON', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@
CONST	SEGMENT
??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@ DB 'RD JAM XXX', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06CCMEMHEJ@IR?5OFF@
CONST	SEGMENT
??_C@_06CCMEMHEJ@IR?5OFF@ DB 'IR OFF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JBLHJOBL@IR?5ON@
CONST	SEGMENT
??_C@_05JBLHJOBL@IR?5ON@ DB 'IR ON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNPDBJMK@IR?5XXX@
CONST	SEGMENT
??_C@_06CNPDBJMK@IR?5XXX@ DB 'IR XXX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@
CONST	SEGMENT
??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@ DB 'IR JAM OFF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OKBKNIAL@IR?5JAM?5ON@
CONST	SEGMENT
??_C@_09OKBKNIAL@IR?5JAM?5ON@ DB 'IR JAM ON', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DADPKEOI@IR?5JAM?5XXX@
CONST	SEGMENT
??_C@_0L@DADPKEOI@IR?5JAM?5XXX@ DB 'IR JAM XXX', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@
CONST	SEGMENT
??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@ DB 'LS MSL:%.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@
CONST	SEGMENT
??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@ DB 'RF MSL:%.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@
CONST	SEGMENT
??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@ DB 'IR MSL:%.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA DD 012cbH ; `draw_aircraft_survivability_equipment_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@
CONST	SEGMENT
??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@ DB '(threa'
	DB	't_type == THREAT_TYPE_RF_MISSILE) || (threat_type == THREAT_T'
	DB	'YPE_IR_MISSILE) || (threat_type == THREAT_TYPE_LASER_MISSILE)'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEKOLKIL@source@
CONST	SEGMENT
??_C@_06OEKOLKIL@source@ DB 'source', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA DD 01264H ; `get_closest_missile'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06NEGNFKDO@?$CF?41fkm@
CONST	SEGMENT
??_C@_06NEGNFKDO@?$CF?41fkm@ DB '%.1fkm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DIMJBCMI@NAV@
CONST	SEGMENT
??_C@_03DIMJBCMI@NAV@ DB 'NAV', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DBNGLLAD@TGT@
CONST	SEGMENT
??_C@_03DBNGLLAD@TGT@ DB 'TGT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IJFFJMFM@25Km@
CONST	SEGMENT
??_C@_04IJFFJMFM@25Km@ DB '25Km', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PJCLBGLO@10Km@
CONST	SEGMENT
??_C@_04PJCLBGLO@10Km@ DB '10Km', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LFNCFPLL@5Km@
CONST	SEGMENT
??_C@_03LFNCFPLL@5Km@ DB '5Km', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CIAFGHAC@2Km@
CONST	SEGMENT
??_C@_03CIAFGHAC@2Km@ DB '2Km', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KNFJGCC@AIR@
CONST	SEGMENT
??_C@_03KNFJGCC@AIR@ DB 'AIR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DGGJGKKM@GND@
CONST	SEGMENT
??_C@_03DGGJGKKM@GND@ DB 'GND', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06NOICLIMH@IHADSS@
CONST	SEGMENT
??_C@_06NOICLIMH@IHADSS@ DB 'IHADSS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LLLMNJMM@NO?5ACQ@
CONST	SEGMENT
??_C@_06LLLMNJMM@NO?5ACQ@ DB 'NO ACQ', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA DD 0f5aH ; `draw_tactical_situation_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_01CPLAODJH@S@
CONST	SEGMENT
??_C@_01CPLAODJH@S@ DB 'S', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01OCOKONAJ@L@
CONST	SEGMENT
??_C@_01OCOKONAJ@L@ DB 'L', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04KPGPJCNC@WIDE@
CONST	SEGMENT
??_C@_04KPGPJCNC@WIDE@ DB 'WIDE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FMKFNHMM@NAR@
CONST	SEGMENT
??_C@_03FMKFNHMM@NAR@ DB 'NAR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02ONPABID@LO@
CONST	SEGMENT
??_C@_02ONPABID@LO@ DB 'LO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08JFLECGBM@LO?5LIGHT@
CONST	SEGMENT
??_C@_08JFLECGBM@LO?5LIGHT@ DB 'LO LIGHT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NFBNOOEB@DVO@
CONST	SEGMENT
??_C@_03NFBNOOEB@DVO@ DB 'DVO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03ENJJJDDH@DTV@
CONST	SEGMENT
??_C@_03ENJJJDDH@DTV@ DB 'DTV', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MIGKMLBH@FLIR@
CONST	SEGMENT
??_C@_04MIGKMLBH@FLIR@ DB 'FLIR', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z@4JA DD 0dccH ; `draw_2d_eo_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04EIHLKMGG@LOBL@
CONST	SEGMENT
??_C@_04EIHLKMGG@LOBL@ DB 'LOBL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07CMBMBPC@LOAL?9HI@
CONST	SEGMENT
??_C@_07CMBMBPC@LOAL?9HI@ DB 'LOAL-HI', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BKMPBOCK@TOF?3?$CF?40f@
CONST	SEGMENT
??_C@_08BKMPBOCK@TOF?3?$CF?40f@ DB 'TOF:%.0f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03HPMEOHJD@ATA@
CONST	SEGMENT
??_C@_03HPMEOHJD@ATA@ DB 'ATA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03BNKHBNLL@RKT@
CONST	SEGMENT
??_C@_03BNKHBNLL@RKT@ DB 'RKT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IFPDDAOD@MSL@
CONST	SEGMENT
??_C@_03IFPDDAOD@MSL@ DB 'MSL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06FKEAPHPM@CANNON@
CONST	SEGMENT
??_C@_06FKEAPHPM@CANNON@ DB 'CANNON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IMEMIMEA@Invalid?5weapon?5lock?5type?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BO@IMEMIMEA@Invalid?5weapon?5lock?5type?5?$DN?5?$CFd@ DB 'Invalid '
	DB	'weapon lock type = %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PDLCBABH@VALID?5LOCK@
CONST	SEGMENT
??_C@_0L@PDLCBABH@VALID?5LOCK@ DB 'VALID LOCK', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07EPBNJCNI@MAX?5RNG@
CONST	SEGMENT
??_C@_07EPBNJCNI@MAX?5RNG@ DB 'MAX RNG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KJHNDNDJ@MIN?5RNG@
CONST	SEGMENT
??_C@_07KJHNDNDJ@MIN?5RNG@ DB 'MIN RNG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CPLEKEOP@SKR?5LIMIT@
CONST	SEGMENT
??_C@_09CPLEKEOP@SKR?5LIMIT@ DB 'SKR LIMIT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MFPJHMMF@INVALID?5TGT@
CONST	SEGMENT
??_C@_0M@MFPJHMMF@INVALID?5TGT@ DB 'INVALID TGT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JLFDDBCD@NO?5TARGET@
CONST	SEGMENT
??_C@_09JLFDDBCD@NO?5TARGET@ DB 'NO TARGET', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09GGBOJENB@NO?5WEAPON@
CONST	SEGMENT
??_C@_09GGBOJENB@NO?5WEAPON@ DB 'NO WEAPON', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FONJMCCD@NO?5ACQUIRE@
CONST	SEGMENT
??_C@_0L@FONJMCCD@NO?5ACQUIRE@ DB 'NO ACQUIRE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BCEGOCOA@AX?4X@
CONST	SEGMENT
??_C@_04BCEGOCOA@AX?4X@ DB 'AX.X', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NFPLLMGK@A?$CF?41f@
CONST	SEGMENT
??_C@_05NFPLLMGK@A?$CF?41f@ DB 'A%.1f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OKGDLNCL@NONE@
CONST	SEGMENT
??_C@_04OKGDLNCL@NONE@ DB 'NONE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07HOJAAJFI@L?$CF04?40f@
CONST	SEGMENT
??_C@_07HOJAAJFI@L?$CF04?40f@ DB 'L%04.0f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DBODHFDK@TADS@
CONST	SEGMENT
??_C@_04DBODHFDK@TADS@ DB 'TADS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FALJMMFP@R?$CF?41f@
CONST	SEGMENT
??_C@_05FALJMMFP@R?$CF?41f@ DB 'R%.1f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JKJFCLEN@FCR@
CONST	SEGMENT
??_C@_03JKJFCLEN@FCR@ DB 'FCR', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_high_action_display@@YGXPAUENTITY@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_high_action_display@@YGXPAUENTITY@@H@Z@4JA DD 0cf6H ; `draw_high_action_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA DD 0c84H ; `draw_overlaid_3d_eo_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BK@EPIBEIKA@d3d_can_render_to_texture@
CONST	SEGMENT
??_C@_0BK@EPIBEIKA@d3d_can_render_to_texture@ DB 'd3d_can_render_to_textu'
	DB	're', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
CONST	SEGMENT
??_C@_0BF@MDEHLDP@eo_3d_texture_screen@ DB 'eo_3d_texture_screen', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA DD 0bf3H ; `draw_3d_eo_display_on_texture'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
CONST	SEGMENT
??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@ DB 'Invalid target'
	DB	' acquisition system = %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
CONST	SEGMENT
??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@ DB '('
	DB	'day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT'
	DB	'_TYPES)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
CONST	SEGMENT
??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@ DB '(weather_'
	DB	'mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LA'
	DB	'ST)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MNOBOANG@Invalid?5field?5of?5view?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BL@MNOBOANG@Invalid?5field?5of?5view?5?$DN?5?$CFd@ DB 'Invalid fie'
	DB	'ld of view = %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@OPBKHJNA@system?5?$DN?$DN?5TARGET_ACQUISITION_SY@
CONST	SEGMENT
??_C@_0CJ@OPBKHJNA@system?5?$DN?$DN?5TARGET_ACQUISITION_SY@ DB 'system =='
	DB	' TARGET_ACQUISITION_SYSTEM_FLIR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02KMMHFIEO@eo@
CONST	SEGMENT
??_C@_02KMMHFIEO@eo@ DB 'eo', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z@4JA DD 0b59H ; `draw_3d_eo_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05EJJKHDCK@ENEMY@
CONST	SEGMENT
??_C@_05EJJKHDCK@ENEMY@ DB 'ENEMY', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA DD 0964H	; `draw_air_radar_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_03COBKBLOD@SGL@
CONST	SEGMENT
??_C@_03COBKBLOD@SGL@ DB 'SGL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MGKDMHFC@MARK@
CONST	SEGMENT
??_C@_04MGKDMHFC@MARK@ DB 'MARK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PKDHFCJF@HIGH@
CONST	SEGMENT
??_C@_04PKDHFCJF@HIGH@ DB 'HIGH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FFIBGFCJ@MED@
CONST	SEGMENT
??_C@_03FFIBGFCJ@MED@ DB 'MED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06HMBFJLMK@MEDIUM@
CONST	SEGMENT
??_C@_06HMBFJLMK@MEDIUM@ DB 'MEDIUM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IBEFMGAI@LOW@
CONST	SEGMENT
??_C@_03IBEFMGAI@LOW@ DB 'LOW', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NIFPGLBG@ALL@
CONST	SEGMENT
??_C@_03NIFPGLBG@ALL@ DB 'ALL', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA DD 0832H ; `draw_ground_radar_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DD@KDAGALDF@get_local_entity_type?5?$CItarget?$CJ?5@
CONST	SEGMENT
??_C@_0DD@KDAGALDF@get_local_entity_type?5?$CItarget?$CJ?5@ DB 'get_local'
	DB	'_entity_type (target) == ENTITY_TYPE_CITY', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA DD 07ffH ; `draw_ground_radar_clutter'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@
CONST	SEGMENT
??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@ DB '('
	DB	'target_symbol_type >= 0) && (target_symbol_type < NUM_TARGET_'
	DB	'SYMBOL_TYPES)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@
CONST	SEGMENT
??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@ DB '!get_local'
	DB	'_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IIPCKJML@source_position@
CONST	SEGMENT
??_C@_0BA@IIPCKJML@source_position@ DB 'source_position', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JJLAMBGK@target@
CONST	SEGMENT
??_C@_06JJLAMBGK@target@ DB 'target', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA DD 075aH ; `draw_radar_target_symbol'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06GPMJGLEM@MARKED@
CONST	SEGMENT
??_C@_06GPMJGLEM@MARKED@ DB 'MARKED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KODELPLK@LOCKED@
CONST	SEGMENT
??_C@_06KODELPLK@LOCKED@ DB 'LOCKED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LMMJFDCN@AUTO@
CONST	SEGMENT
??_C@_04LMMJFDCN@AUTO@ DB 'AUTO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06HCPKJKPH@NO?5LOS@
CONST	SEGMENT
??_C@_06HCPKJKPH@NO?5LOS@ DB 'NO LOS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OMCABMNO@?$CF?41fKm@
CONST	SEGMENT
??_C@_06OMCABMNO@?$CF?41fKm@ DB '%.1fKm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NGNKAJPJ@?$CFdm@
CONST	SEGMENT
??_C@_03NGNKAJPJ@?$CFdm@ DB '%dm', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05EMNNHGFM@radar@
CONST	SEGMENT
??_C@_05EMNNHGFM@radar@ DB 'radar', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA DD 0689H ; `display_radar_target_details'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_03MAMPKPPK@XXX@
CONST	SEGMENT
??_C@_03MAMPKPPK@XXX@ DB 'XXX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06NBEADFGO@?$CF?40fKm@
CONST	SEGMENT
??_C@_06NBEADFGO@?$CF?40fKm@ DB '%.0fKm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LIPABGF@?$CF?40fm@
CONST	SEGMENT
??_C@_05LIPABGF@?$CF?40fm@ DB '%.0fm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LGBIGMFG@ZOOM@
CONST	SEGMENT
??_C@_04LGBIGMFG@ZOOM@ DB 'ZOOM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@HOBNFLGC@?$CIlocation?5?$DN?$DN?5MFD_LOCATION_LHS?$CJ?5@
CONST	SEGMENT
??_C@_0EB@HOBNFLGC@?$CIlocation?5?$DN?$DN?5MFD_LOCATION_LHS?$CJ?5@ DB '(l'
	DB	'ocation == MFD_LOCATION_LHS) || (location == MFD_LOCATION_RHS'
	DB	')', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JNKLHOPK@mfd_mode?5?$CB?$DN?5MFD_MODE_LLLTV@
CONST	SEGMENT
??_C@_0BL@JNKLHOPK@mfd_mode?5?$CB?$DN?5MFD_MODE_LLLTV@ DB 'mfd_mode != MF'
	DB	'D_MODE_LLLTV', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@HPJGECJI@?$CImfd_mode?5?$DO?$DN?5MFD_MODE_OFF?$CJ?5?$CG?$CG?5?$CI@
CONST	SEGMENT
??_C@_0DJ@HPJGECJI@?$CImfd_mode?5?$DO?$DN?5MFD_MODE_OFF?$CJ?5?$CG?$CG?5?$CI@ DB '('
	DB	'mfd_mode >= MFD_MODE_OFF) && (mfd_mode < NUM_MFD_MODES)', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z@4JA DD 048bH ; `select_default_mfd_mode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\gunships\avionics\default\df'
	DB	'_mfd.c', 00H				; `string'
CONST	ENDS
_DATA	SEGMENT
?large_tsd_ase_aircraft_datum@@3PADA DB 011H		; large_tsd_ase_aircraft_datum
	DB	025H
	DB	0f8H
	DB	0f8H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+7
?large_tsd_ase_aircraft_datum_mask@@3PADA DB 013H	; large_tsd_ase_aircraft_datum_mask
	DB	027H
	DB	0f7H
	DB	0f7H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+7
?small_tsd_ase_aircraft_datum@@3PADA DB 07H		; small_tsd_ase_aircraft_datum
	DB	0fH
	DB	0fdH
	DB	0fdH
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?small_tsd_ase_aircraft_datum_mask@@3PADA DB 09H	; small_tsd_ase_aircraft_datum_mask
	DB	011H
	DB	0fcH
	DB	0fcH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?large_tsd_waypoint_marker@@3PADA DB 0cH		; large_tsd_waypoint_marker
	DB	0dH
	DB	0fbH
	DB	0faH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
?small_tsd_waypoint_marker@@3PADA DB 09H		; small_tsd_waypoint_marker
	DB	09H
	DB	0fcH
	DB	0fcH
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	ORG $+3
?large_ase_missile@@3PADA DB 0bH			; large_ase_missile
	DB	09H
	DB	0fbH
	DB	0fcH
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	ORG $+1
?large_ase_missile_mask@@3PADA DB 0dH			; large_ase_missile_mask
	DB	0bH
	DB	0faH
	DB	0fbH
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	ORG $+1
?small_ase_missile@@3PADA DB 07H			; small_ase_missile
	DB	05H
	DB	0fdH
	DB	0feH
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
?small_ase_missile_mask@@3PADA DB 09H			; small_ase_missile_mask
	DB	07H
	DB	0fcH
	DB	0fdH
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	ORG $+1
?large_display_moving_target_symbol@@3PADA DB 03H	; large_display_moving_target_symbol
	DB	03H
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	ORG $+3
?large_display_moving_target_symbol_mask@@3PADA DB 03H	; large_display_moving_target_symbol_mask
	DB	03H
	DB	0ffH
	DB	0ffH
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	ORG $+3
?large_engine_bar_marker@@3PADA DB 07H			; large_engine_bar_marker
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	ORG $+3
?small_engine_bar_marker@@3PADA DB 04H			; small_engine_bar_marker
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
?hellfire_missile_data@@3PADA DB 0fH			; hellfire_missile_data
	DB	027H
	DB	0f9H
	DB	0edH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	ORG $+3
?inverted_hellfire_missile_data@@3PADA DB 0fH		; inverted_hellfire_missile_data
	DB	027H
	DB	0f9H
	DB	0edH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	ORG $+3
?stinger_missile_data@@3PADA DB 0fH			; stinger_missile_data
	DB	01fH
	DB	0f9H
	DB	0f1H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?inverted_stinger_missile_data@@3PADA DB 0fH		; inverted_stinger_missile_data
	DB	01fH
	DB	0f9H
	DB	0f1H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A DD 02H ; flir_light_levels
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A DD 01H ; flir_noise_levels
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
?dtv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A DD 02H ; dtv_light_levels
	DD	02H
	DD	02H
	DD	02H
	DD	01H
	DD	02H
	DD	01H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
?dtv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A DD 01H ; dtv_noise_levels
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
?dvo_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A DD 02H ; dvo_light_levels
	DD	02H
	DD	02H
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
?dvo_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A DD 01H ; dvo_noise_levels
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
?large_rate_of_climb_scale_pointer@@3PADA DB 05H	; large_rate_of_climb_scale_pointer
	DB	09H
	DB	0fbH
	DB	0fcH
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?small_rate_of_climb_scale_pointer@@3PADA DB 03H	; small_rate_of_climb_scale_pointer
	DB	05H
	DB	0fdH
	DB	0feH
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?get_previous_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z
_TEXT	SEGMENT
tv83 = -80						; size = 4
tv77 = -76						; size = 4
tv70 = -72						; size = 4
tv64 = -72						; size = 4
_previous_mfd_mode$ = -4				; size = 4
_mfd_mode$ = 8						; size = 4
?get_previous_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z PROC	; get_previous_mfd_mode, COMDAT

; 12041: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12042: 	mfd_modes
; 12043: 		previous_mfd_mode;
; 12044: 
; 12045: 	switch (mfd_mode)

  00009	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  0000c	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  0000f	83 7d b8 0c	 cmp	 DWORD PTR tv64[ebp], 12	; 0000000cH
  00013	0f 87 f7 00 00
	00		 ja	 $LN17@get_previo
  00019	8b 4d b8	 mov	 ecx, DWORD PTR tv64[ebp]
  0001c	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN23@get_previo[ecx*4]
$LN6@get_previo:

; 12046: 	{
; 12047: 		case MFD_MODE_OFF:
; 12048: 		{
; 12049: 			previous_mfd_mode = MFD_MODE_SYSTEM;

  00023	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 11 ; 0000000bH

; 12050: 
; 12051: 			break;

  0002a	e9 f2 00 00 00	 jmp	 $LN2@get_previo
$LN7@get_previo:

; 12052: 		}
; 12053: 		case MFD_MODE_ENGINE:
; 12054: 		{
; 12055: 			previous_mfd_mode = MFD_MODE_SYSTEM;

  0002f	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 11 ; 0000000bH

; 12056: 
; 12057: 			break;

  00036	e9 e6 00 00 00	 jmp	 $LN2@get_previo
$LN8@get_previo:

; 12058: 		}
; 12059: 		case MFD_MODE_GROUND_RADAR:
; 12060: 		case MFD_MODE_AIR_RADAR:
; 12061: 		{
; 12062: 			previous_mfd_mode = MFD_MODE_ENGINE;

  0003b	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 12 ; 0000000cH

; 12063: 
; 12064: 			break;

  00042	e9 da 00 00 00	 jmp	 $LN2@get_previo
$LN9@get_previo:

; 12065: 		}
; 12066: 		case MFD_MODE_FLIR:
; 12067: 		case MFD_MODE_DTV:
; 12068: 		case MFD_MODE_DVO:
; 12069: 		{
; 12070: 			switch (get_local_entity_int_value (get_gunship_entity (), INT_TYPE_ENTITY_SUB_TYPE))

  00047	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0004e	74 0c		 je	 SHORT $LN19@get_previo
  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00055	8b 08		 mov	 ecx, DWORD PTR [eax]
  00057	89 4d b8	 mov	 DWORD PTR tv70[ebp], ecx
  0005a	eb 1d		 jmp	 SHORT $LN20@get_previo
$LN19@get_previo:
  0005c	68 26 2f 00 00	 push	 12070			; 00002f26H
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00066	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0006c	52		 push	 edx
  0006d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00072	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN20@get_previo:
  00079	b8 01 00 00 00	 mov	 eax, 1
  0007e	85 c0		 test	 eax, eax
  00080	74 09		 je	 SHORT $LN21@get_previo
  00082	c7 45 b4 34 00
	00 00		 mov	 DWORD PTR tv77[ebp], 52	; 00000034H
  00089	eb 1d		 jmp	 SHORT $LN22@get_previo
$LN21@get_previo:
  0008b	68 26 2f 00 00	 push	 12070			; 00002f26H
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00095	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0009b	51		 push	 ecx
  0009c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a1	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv77[ebp], 0
$LN22@get_previo:
  000a8	6a 34		 push	 52			; 00000034H
  000aa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000b0	52		 push	 edx
  000b1	69 45 b8 5c 04
	00 00		 imul	 eax, DWORD PTR tv70[ebp], 1116
  000b8	8b 4d b4	 mov	 ecx, DWORD PTR tv77[ebp]
  000bb	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  000c2	ff d2		 call	 edx
  000c4	89 45 b0	 mov	 DWORD PTR tv83[ebp], eax
  000c7	83 7d b0 07	 cmp	 DWORD PTR tv83[ebp], 7
  000cb	74 02		 je	 SHORT $LN10@get_previo
  000cd	eb 0a		 jmp	 SHORT $LN11@get_previo
$LN10@get_previo:

; 12071: 			{
; 12072: 			case ENTITY_SUB_TYPE_AIRCRAFT_KA29_HELIX_B:
; 12073: 			previous_mfd_mode = get_mfd_mode_for_radar ();

  000cf	e8 00 00 00 00	 call	 ?get_mfd_mode_for_radar@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_radar
  000d4	89 45 fc	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax

; 12074: 			break;

  000d7	eb 07		 jmp	 SHORT $LN4@get_previo
$LN11@get_previo:

; 12075: 			default:
; 12076: 			previous_mfd_mode = MFD_MODE_ENGINE;

  000d9	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 12 ; 0000000cH
$LN4@get_previo:

; 12077: 			break;
; 12078: 			}
; 12079: 
; 12080: 			break;

  000e0	eb 3f		 jmp	 SHORT $LN2@get_previo
$LN12@get_previo:

; 12081: 		}
; 12082: 		case MFD_MODE_TSD:
; 12083: 		{
; 12084: 			previous_mfd_mode = get_mfd_mode_for_eo_sensor ();

  000e2	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  000e7	89 45 fc	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax

; 12085: 
; 12086: 			break;

  000ea	eb 35		 jmp	 SHORT $LN2@get_previo
$LN13@get_previo:

; 12087: 		}
; 12088: 		case MFD_MODE_ASE:
; 12089: 		{
; 12090: 			previous_mfd_mode = MFD_MODE_TSD;

  000ec	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 8

; 12091: 
; 12092: 			break;

  000f3	eb 2c		 jmp	 SHORT $LN2@get_previo
$LN14@get_previo:

; 12093: 		}
; 12094: 		case MFD_MODE_WEAPON:
; 12095: 		{
; 12096: 			previous_mfd_mode = MFD_MODE_ASE;

  000f5	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 9

; 12097: 
; 12098: 			break;

  000fc	eb 23		 jmp	 SHORT $LN2@get_previo
$LN15@get_previo:

; 12099: 		}
; 12100: 		case MFD_MODE_SYSTEM:
; 12101: 		{
; 12102: 			previous_mfd_mode = MFD_MODE_WEAPON;

  000fe	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 10 ; 0000000aH

; 12103: 
; 12104: 			break;

  00105	eb 1a		 jmp	 SHORT $LN2@get_previo
$LN16@get_previo:

; 12105: 		}
; 12106: 
; 12107: 		case MFD_MODE_DAMAGED:
; 12108: 		{
; 12109: 			previous_mfd_mode = MFD_MODE_DAMAGED;

  00107	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 1

; 12110: 
; 12111: 			break;

  0010e	eb 11		 jmp	 SHORT $LN2@get_previo
$LN17@get_previo:

; 12112: 		}
; 12113: 		default:
; 12114: 		{
; 12115: 			debug_fatal ("Invalid mfd mode = %d", mfd_mode);

  00110	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00113	50		 push	 eax
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@CLGDNIGP@Invalid?5mfd?5mode?5?$DN?5?$CFd@
  00119	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0011e	83 c4 08	 add	 esp, 8
$LN2@get_previo:

; 12116: 
; 12117: 			break;
; 12118: 		}
; 12119: 	}
; 12120: 
; 12121: 	return (previous_mfd_mode);

  00121	8b 45 fc	 mov	 eax, DWORD PTR _previous_mfd_mode$[ebp]

; 12122: }

  00124	5f		 pop	 edi
  00125	5e		 pop	 esi
  00126	5b		 pop	 ebx
  00127	8b e5		 mov	 esp, ebp
  00129	5d		 pop	 ebp
  0012a	c2 04 00	 ret	 4
  0012d	0f 1f 00	 npad	 3
$LN23@get_previo:
  00130	00 00 00 00	 DD	 $LN6@get_previo
  00134	00 00 00 00	 DD	 $LN16@get_previo
  00138	00 00 00 00	 DD	 $LN8@get_previo
  0013c	00 00 00 00	 DD	 $LN8@get_previo
  00140	00 00 00 00	 DD	 $LN9@get_previo
  00144	00 00 00 00	 DD	 $LN9@get_previo
  00148	00 00 00 00	 DD	 $LN9@get_previo
  0014c	00 00 00 00	 DD	 $LN17@get_previo
  00150	00 00 00 00	 DD	 $LN12@get_previo
  00154	00 00 00 00	 DD	 $LN13@get_previo
  00158	00 00 00 00	 DD	 $LN14@get_previo
  0015c	00 00 00 00	 DD	 $LN15@get_previo
  00160	00 00 00 00	 DD	 $LN7@get_previo
?get_previous_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z ENDP	; get_previous_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?get_next_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z
_TEXT	SEGMENT
tv83 = -80						; size = 4
tv77 = -76						; size = 4
tv70 = -72						; size = 4
tv64 = -72						; size = 4
_next_mfd_mode$ = -4					; size = 4
_mfd_mode$ = 8						; size = 4
?get_next_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z PROC	; get_next_mfd_mode, COMDAT

; 11954: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 11955: 	mfd_modes
; 11956: 		next_mfd_mode;
; 11957: 
; 11958: 	switch (mfd_mode)

  00009	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  0000c	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  0000f	83 7d b8 0c	 cmp	 DWORD PTR tv64[ebp], 12	; 0000000cH
  00013	0f 87 f2 00 00
	00		 ja	 $LN17@get_next_m
  00019	8b 4d b8	 mov	 ecx, DWORD PTR tv64[ebp]
  0001c	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN23@get_next_m[ecx*4]
$LN6@get_next_m:

; 11959: 	{
; 11960: 		case MFD_MODE_OFF:
; 11961: 		{
; 11962: 			next_mfd_mode = MFD_MODE_ENGINE;

  00023	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 12 ; 0000000cH

; 11963: 
; 11964: 			break;

  0002a	e9 ed 00 00 00	 jmp	 $LN2@get_next_m
$LN7@get_next_m:

; 11965: 		}
; 11966: 		case MFD_MODE_ENGINE:
; 11967: 		{
; 11968: 			switch (get_local_entity_int_value (get_gunship_entity (), INT_TYPE_ENTITY_SUB_TYPE))

  0002f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00036	74 0c		 je	 SHORT $LN19@get_next_m
  00038	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	89 4d b8	 mov	 DWORD PTR tv70[ebp], ecx
  00042	eb 1d		 jmp	 SHORT $LN20@get_next_m
$LN19@get_next_m:
  00044	68 c0 2e 00 00	 push	 11968			; 00002ec0H
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0004e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00054	52		 push	 edx
  00055	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0005a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN20@get_next_m:
  00061	b8 01 00 00 00	 mov	 eax, 1
  00066	85 c0		 test	 eax, eax
  00068	74 09		 je	 SHORT $LN21@get_next_m
  0006a	c7 45 b4 34 00
	00 00		 mov	 DWORD PTR tv77[ebp], 52	; 00000034H
  00071	eb 1d		 jmp	 SHORT $LN22@get_next_m
$LN21@get_next_m:
  00073	68 c0 2e 00 00	 push	 11968			; 00002ec0H
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0007d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00083	51		 push	 ecx
  00084	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00089	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv77[ebp], 0
$LN22@get_next_m:
  00090	6a 34		 push	 52			; 00000034H
  00092	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00098	52		 push	 edx
  00099	69 45 b8 5c 04
	00 00		 imul	 eax, DWORD PTR tv70[ebp], 1116
  000a0	8b 4d b4	 mov	 ecx, DWORD PTR tv77[ebp]
  000a3	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  000aa	ff d2		 call	 edx
  000ac	89 45 b0	 mov	 DWORD PTR tv83[ebp], eax
  000af	83 7d b0 07	 cmp	 DWORD PTR tv83[ebp], 7
  000b3	74 02		 je	 SHORT $LN8@get_next_m
  000b5	eb 0a		 jmp	 SHORT $LN9@get_next_m
$LN8@get_next_m:

; 11969: 			{
; 11970: 			case ENTITY_SUB_TYPE_AIRCRAFT_KA29_HELIX_B:
; 11971: 			next_mfd_mode = get_mfd_mode_for_radar();

  000b7	e8 00 00 00 00	 call	 ?get_mfd_mode_for_radar@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_radar
  000bc	89 45 fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax

; 11972: 			break;

  000bf	eb 08		 jmp	 SHORT $LN4@get_next_m
$LN9@get_next_m:

; 11973: 			default:
; 11974: 			next_mfd_mode = get_mfd_mode_for_eo_sensor ();

  000c1	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  000c6	89 45 fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax
$LN4@get_next_m:

; 11975: 			break;
; 11976: 			}
; 11977: 
; 11978: 			break;

  000c9	eb 51		 jmp	 SHORT $LN2@get_next_m
$LN10@get_next_m:

; 11979: 		}
; 11980: 		case MFD_MODE_GROUND_RADAR:
; 11981: 		case MFD_MODE_AIR_RADAR:
; 11982: 		{
; 11983: 			next_mfd_mode =  get_mfd_mode_for_eo_sensor ();

  000cb	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  000d0	89 45 fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax

; 11984: 
; 11985: 			break;

  000d3	eb 47		 jmp	 SHORT $LN2@get_next_m
$LN11@get_next_m:

; 11986: 		}
; 11987: 		case MFD_MODE_FLIR:
; 11988: 		case MFD_MODE_DTV:
; 11989: 		case MFD_MODE_DVO:
; 11990: 		{
; 11991: 			next_mfd_mode = MFD_MODE_TSD;

  000d5	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 8

; 11992: 
; 11993: 			break;

  000dc	eb 3e		 jmp	 SHORT $LN2@get_next_m
$LN12@get_next_m:

; 11994: 		}
; 11995: 		case MFD_MODE_TSD:
; 11996: 		{
; 11997: 			next_mfd_mode = MFD_MODE_ASE;

  000de	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 9

; 11998: 
; 11999: 			break;

  000e5	eb 35		 jmp	 SHORT $LN2@get_next_m
$LN13@get_next_m:

; 12000: 		}
; 12001: 		case MFD_MODE_ASE:
; 12002: 		{
; 12003: 			next_mfd_mode = MFD_MODE_WEAPON;

  000e7	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 10 ; 0000000aH

; 12004: 
; 12005: 			break;

  000ee	eb 2c		 jmp	 SHORT $LN2@get_next_m
$LN14@get_next_m:

; 12006: 		}
; 12007: 		case MFD_MODE_WEAPON:
; 12008: 		{
; 12009: 			next_mfd_mode = MFD_MODE_SYSTEM;

  000f0	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 11 ; 0000000bH

; 12010: 
; 12011: 			break;

  000f7	eb 23		 jmp	 SHORT $LN2@get_next_m
$LN15@get_next_m:

; 12012: 		}
; 12013: 		case MFD_MODE_SYSTEM:
; 12014: 		{
; 12015: 			next_mfd_mode = MFD_MODE_ENGINE;

  000f9	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 12 ; 0000000cH

; 12016: 
; 12017: 			break;

  00100	eb 1a		 jmp	 SHORT $LN2@get_next_m
$LN16@get_next_m:

; 12018: 		}
; 12019: 		case MFD_MODE_DAMAGED:
; 12020: 		{
; 12021: 			next_mfd_mode = MFD_MODE_DAMAGED;

  00102	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 1

; 12022: 
; 12023: 			break;

  00109	eb 11		 jmp	 SHORT $LN2@get_next_m
$LN17@get_next_m:

; 12024: 		}
; 12025: 		default:
; 12026: 		{
; 12027: 			debug_fatal ("Invalid mfd mode = %d", mfd_mode);

  0010b	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  0010e	50		 push	 eax
  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@CLGDNIGP@Invalid?5mfd?5mode?5?$DN?5?$CFd@
  00114	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00119	83 c4 08	 add	 esp, 8
$LN2@get_next_m:

; 12028: 
; 12029: 			break;
; 12030: 		}
; 12031: 	}
; 12032: 
; 12033: 	return (next_mfd_mode);

  0011c	8b 45 fc	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]

; 12034: }

  0011f	5f		 pop	 edi
  00120	5e		 pop	 esi
  00121	5b		 pop	 ebx
  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c2 04 00	 ret	 4
$LN23@get_next_m:
  00128	00 00 00 00	 DD	 $LN6@get_next_m
  0012c	00 00 00 00	 DD	 $LN16@get_next_m
  00130	00 00 00 00	 DD	 $LN10@get_next_m
  00134	00 00 00 00	 DD	 $LN10@get_next_m
  00138	00 00 00 00	 DD	 $LN11@get_next_m
  0013c	00 00 00 00	 DD	 $LN11@get_next_m
  00140	00 00 00 00	 DD	 $LN11@get_next_m
  00144	00 00 00 00	 DD	 $LN17@get_next_m
  00148	00 00 00 00	 DD	 $LN12@get_next_m
  0014c	00 00 00 00	 DD	 $LN13@get_next_m
  00150	00 00 00 00	 DD	 $LN14@get_next_m
  00154	00 00 00 00	 DD	 $LN15@get_next_m
  00158	00 00 00 00	 DD	 $LN7@get_next_m
?get_next_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z ENDP	; get_next_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?get_mfd_mode_for_radar@@YG?AW4MFD_MODES@@XZ
_TEXT	SEGMENT
?get_mfd_mode_for_radar@@YG?AW4MFD_MODES@@XZ PROC	; get_mfd_mode_for_radar, COMDAT

; 11841: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 11842: 	if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_AIR_RADAR || air_radar_is_active())

  00009	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 2 ; target_acquisition_system
  00010	74 09		 je	 SHORT $LN3@get_mfd_mo
  00012	e8 00 00 00 00	 call	 ?air_radar_is_active@@YGHXZ ; air_radar_is_active
  00017	85 c0		 test	 eax, eax
  00019	74 07		 je	 SHORT $LN2@get_mfd_mo
$LN3@get_mfd_mo:

; 11843: 		return MFD_MODE_AIR_RADAR;

  0001b	b8 03 00 00 00	 mov	 eax, 3
  00020	eb 05		 jmp	 SHORT $LN1@get_mfd_mo
$LN2@get_mfd_mo:

; 11844: 
; 11845: 	return MFD_MODE_GROUND_RADAR;

  00022	b8 02 00 00 00	 mov	 eax, 2
$LN1@get_mfd_mo:

; 11846: }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?get_mfd_mode_for_radar@@YG?AW4MFD_MODES@@XZ ENDP	; get_mfd_mode_for_radar
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ
_TEXT	SEGMENT
_mfd_mode$ = -4						; size = 4
?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ PROC	; get_mfd_mode_for_eo_sensor, COMDAT

; 11816: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 11817: 	mfd_modes
; 11818: 		mfd_mode;
; 11819: 
; 11820: 	if (eo_sensor == TARGET_ACQUISITION_SYSTEM_FLIR)

  00009	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 3 ; eo_sensor
  00010	75 09		 jne	 SHORT $LN2@get_mfd_mo

; 11821: 	{
; 11822: 		mfd_mode = MFD_MODE_FLIR;

  00012	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 4
  00019	eb 37		 jmp	 SHORT $LN3@get_mfd_mo
$LN2@get_mfd_mo:

; 11823: 	}
; 11824: 	else if (eo_sensor == TARGET_ACQUISITION_SYSTEM_DTV)

  0001b	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 4 ; eo_sensor
  00022	75 09		 jne	 SHORT $LN4@get_mfd_mo

; 11825: 	{
; 11826: 		mfd_mode = MFD_MODE_DTV;

  00024	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 5
  0002b	eb 25		 jmp	 SHORT $LN3@get_mfd_mo
$LN4@get_mfd_mo:

; 11827: 	}
; 11828: 	else if (eo_sensor == TARGET_ACQUISITION_SYSTEM_DVO)

  0002d	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 5 ; eo_sensor
  00034	75 09		 jne	 SHORT $LN6@get_mfd_mo

; 11829: 	{
; 11830: 		mfd_mode = MFD_MODE_DVO;

  00036	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 6

; 11831: 	}
; 11832: 	else

  0003d	eb 13		 jmp	 SHORT $LN3@get_mfd_mo
$LN6@get_mfd_mo:

; 11833: 	{
; 11834: 		debug_fatal ("Invalid EO sensor = %d", eo_sensor);

  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; eo_sensor
  00044	50		 push	 eax
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@
  0004a	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0004f	83 c4 08	 add	 esp, 8
$LN3@get_mfd_mo:

; 11835: 	}
; 11836: 
; 11837: 	return (mfd_mode);

  00052	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]

; 11838: }

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ENDP	; get_mfd_mode_for_eo_sensor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_translucent_mfd_background@@YGXMMMM@Z
_TEXT	SEGMENT
_specular$ = -264					; size = 4
_colour$ = -260						; size = 4
_quad$ = -256						; size = 256
_x_min$ = 8						; size = 4
_y_min$ = 12						; size = 4
_x_max$ = 16						; size = 4
_y_max$ = 20						; size = 4
?draw_translucent_mfd_background@@YGXMMMM@Z PROC	; draw_translucent_mfd_background, COMDAT

; 11169: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 48 01 00
	00		 sub	 esp, 328		; 00000148H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 11170: 	vertex
; 11171: 		quad[4];
; 11172: 
; 11173: 	real_colour
; 11174: 		colour,
; 11175: 		specular;
; 11176: 
; 11177: 	set_3d_active_environment (main_3d_env);

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 11178: 
; 11179: 	if (begin_3d_scene ())

  00017	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  0001c	85 c0		 test	 eax, eax
  0001e	0f 84 5a 02 00
	00		 je	 $LN2@draw_trans

; 11180: 	{
; 11181: 		colour.red = 0;

  00024	c6 85 fe fe ff
	ff 00		 mov	 BYTE PTR _colour$[ebp+2], 0

; 11182: 		colour.green = 0;

  0002b	c6 85 fd fe ff
	ff 00		 mov	 BYTE PTR _colour$[ebp+1], 0

; 11183: 		colour.blue = 0;

  00032	c6 85 fc fe ff
	ff 00		 mov	 BYTE PTR _colour$[ebp], 0

; 11184: 		colour.alpha = 64;

  00039	c6 85 ff fe ff
	ff 40		 mov	 BYTE PTR _colour$[ebp+3], 64 ; 00000040H

; 11185: 
; 11186: 		specular.red = 0;

  00040	c6 85 fa fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+2], 0

; 11187: 		specular.green = 0;

  00047	c6 85 f9 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+1], 0

; 11188: 		specular.blue = 0;

  0004e	c6 85 f8 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp], 0

; 11189: 		specular.alpha = 255;

  00055	c6 85 fb fe ff
	ff ff		 mov	 BYTE PTR _specular$[ebp+3], 255 ; 000000ffH

; 11190: 
; 11191: 		set_d3d_transparency_on ();

  0005c	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 11192: 
; 11193: 		set_d3d_zbuffer_comparison (FALSE);

  00061	6a 00		 push	 0
  00063	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 11194: 
; 11195: 		set_d3d_plain_renderstate ();

  00068	e8 00 00 00 00	 call	 ?set_d3d_plain_renderstate@@YGXXZ ; set_d3d_plain_renderstate

; 11196: 
; 11197: 		set_d3d_culling (FALSE);

  0006d	6a 00		 push	 0
  0006f	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 11198: 
; 11199: 		quad[0].i = x_min;

  00074	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00079	6b c8 00	 imul	 ecx, eax, 0
  0007c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00081	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 11200: 		quad[0].j = y_min;

  0008a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0008f	6b c8 00	 imul	 ecx, eax, 0
  00092	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  00097	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 11201: 		quad[0].z = 0.5;

  000a0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000a5	6b c8 00	 imul	 ecx, eax, 0
  000a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000b0	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 11202: 		quad[0].q = 0.5;

  000b9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000be	6b c8 00	 imul	 ecx, eax, 0
  000c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000c9	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 11203: 		quad[0].next_vertex = &quad[1];

  000d2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000d7	c1 e0 00	 shl	 eax, 0
  000da	8d 8c 05 00 ff
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  000e1	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000e6	6b c2 00	 imul	 eax, edx, 0
  000e9	89 8c 05 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], ecx

; 11204: 
; 11205: 		quad[1].i = x_max;

  000f0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000f5	c1 e0 00	 shl	 eax, 0
  000f8	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  000fd	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 11206: 		quad[1].j = y_min;

  00106	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0010b	c1 e0 00	 shl	 eax, 0
  0010e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  00113	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 11207: 		quad[1].z = 0.5;

  0011c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00121	c1 e0 00	 shl	 eax, 0
  00124	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0012c	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 11208: 		quad[1].q = 0.5;

  00135	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0013a	c1 e0 00	 shl	 eax, 0
  0013d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00145	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 11209: 		quad[1].next_vertex = &quad[2];

  0014e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00153	d1 e0		 shl	 eax, 1
  00155	8d 8c 05 00 ff
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  0015c	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00161	c1 e2 00	 shl	 edx, 0
  00164	89 8c 15 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+edx+40], ecx

; 11210: 
; 11211: 		quad[2].i = x_max;

  0016b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00170	d1 e0		 shl	 eax, 1
  00172	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00177	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 11212: 		quad[2].j = y_max;

  00180	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00185	d1 e0		 shl	 eax, 1
  00187	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  0018c	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 11213: 		quad[2].z = 0.5;

  00195	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0019a	d1 e0		 shl	 eax, 1
  0019c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001a4	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 11214: 		quad[2].q = 0.5;

  001ad	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001b2	d1 e0		 shl	 eax, 1
  001b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001bc	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 11215: 		quad[2].next_vertex = &quad[3];

  001c5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001ca	6b c8 03	 imul	 ecx, eax, 3
  001cd	8d 94 0d 00 ff
	ff ff		 lea	 edx, DWORD PTR _quad$[ebp+ecx]
  001d4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001d9	d1 e0		 shl	 eax, 1
  001db	89 94 05 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], edx

; 11216: 
; 11217: 		quad[3].i = x_min;

  001e2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001e7	6b c8 03	 imul	 ecx, eax, 3
  001ea	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  001ef	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 11218: 		quad[3].j = y_max;

  001f8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001fd	6b c8 03	 imul	 ecx, eax, 3
  00200	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  00205	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 11219: 		quad[3].z = 0.5;

  0020e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00213	6b c8 03	 imul	 ecx, eax, 3
  00216	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0021e	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 11220: 		quad[3].q = 0.5;

  00227	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0022c	6b c8 03	 imul	 ecx, eax, 3
  0022f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00237	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 11221: 		quad[3].next_vertex = NULL;

  00240	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00245	6b c8 03	 imul	 ecx, eax, 3
  00248	c7 84 0d 28 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$[ebp+ecx+40], 0

; 11222: 
; 11223: 		draw_wbuffered_plain_polygon (quad, colour, specular);

  00253	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _specular$[ebp]
  00259	50		 push	 eax
  0025a	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _colour$[ebp]
  00260	51		 push	 ecx
  00261	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR _quad$[ebp]
  00267	52		 push	 edx
  00268	e8 00 00 00 00	 call	 ?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_plain_polygon

; 11224: 
; 11225: 		set_d3d_transparency_off ();

  0026d	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 11226: 
; 11227: 		set_d3d_zbuffer_comparison (TRUE);

  00272	6a 01		 push	 1
  00274	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 11228: 
; 11229: 		end_3d_scene ();

  00279	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN2@draw_trans:

; 11230: 	}
; 11231: }

  0027e	5f		 pop	 edi
  0027f	5e		 pop	 esi
  00280	5b		 pop	 ebx
  00281	8b e5		 mov	 esp, ebp
  00283	5d		 pop	 ebp
  00284	c2 10 00	 ret	 16			; 00000010H
?draw_translucent_mfd_background@@YGXMMMM@Z ENDP	; draw_translucent_mfd_background
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_flight_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv143 = -76						; size = 4
tv81 = -72						; size = 4
tv73 = -68						; size = 4
?draw_flight_display_mfd@@YGXXZ PROC			; draw_flight_display_mfd, COMDAT

; 10714: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10715: 	set_mono_font_colour (MFD_COLOUR1);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00017	52		 push	 edx
  00018	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 10716: 
; 10717: 	draw_pitch_ladder ();

  0001d	e8 00 00 00 00	 call	 ?draw_pitch_ladder@@YGXXZ ; draw_pitch_ladder

; 10718: 
; 10719: 	draw_heading_scale (get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_HEADING));

  00022	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00029	74 0c		 je	 SHORT $LN4@draw_fligh
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	89 4d bc	 mov	 DWORD PTR tv73[ebp], ecx
  00035	eb 21		 jmp	 SHORT $LN5@draw_fligh
$LN4@draw_fligh:
  00037	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA
  0003d	83 c2 05	 add	 edx, 5
  00040	52		 push	 edx
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00051	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN5@draw_fligh:
  00058	b9 01 00 00 00	 mov	 ecx, 1
  0005d	85 c9		 test	 ecx, ecx
  0005f	74 09		 je	 SHORT $LN6@draw_fligh
  00061	c7 45 b8 34 00
	00 00		 mov	 DWORD PTR tv81[ebp], 52	; 00000034H
  00068	eb 21		 jmp	 SHORT $LN7@draw_fligh
$LN6@draw_fligh:
  0006a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA
  00070	83 c2 05	 add	 edx, 5
  00073	52		 push	 edx
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00084	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN7@draw_fligh:
  0008b	6a 34		 push	 52			; 00000034H
  0008d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00093	51		 push	 ecx
  00094	69 55 bc bc 02
	00 00		 imul	 edx, DWORD PTR tv73[ebp], 700
  0009b	8b 45 b8	 mov	 eax, DWORD PTR tv81[ebp]
  0009e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  000a5	ff d1		 call	 ecx
  000a7	d9 5d b4	 fstp	 DWORD PTR tv143[ebp]
  000aa	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR tv143[ebp]
  000af	51		 push	 ecx
  000b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b5	e8 00 00 00 00	 call	 ?draw_heading_scale@@YGXM@Z ; draw_heading_scale

; 10720: 
; 10721: 	display_true_airspeed ();

  000ba	e8 00 00 00 00	 call	 ?display_true_airspeed@@YGXXZ ; display_true_airspeed

; 10722: 
; 10723: 	display_altitude ();

  000bf	e8 00 00 00 00	 call	 ?display_altitude@@YGXXZ ; display_altitude

; 10724: 
; 10725: 	draw_rate_of_climb_scale ();

  000c4	e8 00 00 00 00	 call	 ?draw_rate_of_climb_scale@@YGXXZ ; draw_rate_of_climb_scale

; 10726: 
; 10727: 	display_engine_torque ();

  000c9	e8 00 00 00 00	 call	 ?display_engine_torque@@YGXXZ ; display_engine_torque

; 10728: 
; 10729: 	if (!default_damage.navigation_computer)

  000ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  000d3	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  000d6	83 e0 01	 and	 eax, 1
  000d9	75 14		 jne	 SHORT $LN2@draw_fligh

; 10730: 		display_waypoint_information (MFD_COLOUR4);

  000db	b8 04 00 00 00	 mov	 eax, 4
  000e0	6b c8 03	 imul	 ecx, eax, 3
  000e3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000e9	52		 push	 edx
  000ea	e8 00 00 00 00	 call	 ?display_waypoint_information@@YGXUREAL_COLOUR@@@Z ; display_waypoint_information
$LN2@draw_fligh:

; 10731: }

  000ef	5f		 pop	 edi
  000f0	5e		 pop	 esi
  000f1	5b		 pop	 ebx
  000f2	8b e5		 mov	 esp, ebp
  000f4	5d		 pop	 ebp
  000f5	c3		 ret	 0
?draw_flight_display_mfd@@YGXXZ ENDP			; draw_flight_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?display_engine_torque@@YGXXZ
_TEXT	SEGMENT
_s$ = -20						; size = 20
?display_engine_torque@@YGXXZ PROC			; display_engine_torque, COMDAT

; 10552: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10553: 	char
; 10554: 		s[20];
; 10555: 
; 10556: 	sprintf (s, "%d%%", (int) current_flight_dynamics->combined_engine_torque.value);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0000e	f3 0f 2c 88 8c
	24 00 00	 cvttss2si ecx, DWORD PTR [eax+9356]
  00016	51		 push	 ecx
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_04FCMNJMCO@?$CFd?$CF?$CF@
  0001c	8d 55 ec	 lea	 edx, DWORD PTR _s$[ebp]
  0001f	52		 push	 edx
  00020	e8 00 00 00 00	 call	 _sprintf
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10557: 
; 10558: 	set_2d_mono_font_position (-1.0, 0.85);

  00028	51		 push	 ecx
  00029	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00031	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00036	51		 push	 ecx
  00037	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0003f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00044	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10559: 
; 10560: //	if (draw_main_display)
; 10561: 	{
; 10562: 		if (draw_large_mfd)

  00049	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00050	74 2a		 je	 SHORT $LN2@display_en

; 10563: 		{
; 10564: 			set_mono_font_type (MONO_FONT_TYPE_7X12);

  00052	6a 05		 push	 5
  00054	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 10565: 
; 10566: 			set_mono_font_rel_position (1.0, -4.0);

  00059	51		 push	 ecx
  0005a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  00062	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00067	51		 push	 ecx
  00068	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00070	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00075	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10567: 		}
; 10568: 		else

  0007a	eb 28		 jmp	 SHORT $LN3@display_en
$LN2@display_en:

; 10569: 		{
; 10570: 			set_mono_font_type (MONO_FONT_TYPE_5X9);

  0007c	6a 02		 push	 2
  0007e	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 10571: 
; 10572: 			set_mono_font_rel_position (1.0, -4.0);

  00083	51		 push	 ecx
  00084	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  0008c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00091	51		 push	 ecx
  00092	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0009a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN3@display_en:

; 10573: 		}
; 10574: 	}
; 10575: /*	else
; 10576: 	{
; 10577: 		if (draw_large_mfd)
; 10578: 		{
; 10579: 			set_mono_font_type (MONO_FONT_TYPE_7X12);
; 10580: 
; 10581: 			set_mono_font_rel_position (1.0, -4.0);
; 10582: 		}
; 10583: 		else
; 10584: 		{
; 10585: 			set_mono_font_type (MONO_FONT_TYPE_5X7);
; 10586: 
; 10587: 			set_mono_font_rel_position (1.0, -2.0);
; 10588: 		}
; 10589: 	}*/
; 10590: 
; 10591: 	print_mono_font_string (s);

  000a4	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10592: }

  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c3		 ret	 0
?display_engine_torque@@YGXXZ ENDP			; display_engine_torque
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_rate_of_climb_scale@@YGXXZ
_TEXT	SEGMENT
tv485 = -108						; size = 8
tv486 = -100						; size = 8
_x_adjust$ = -28					; size = 4
_y2$ = -24						; size = 4
_y1$ = -20						; size = 4
_y$ = -16						; size = 4
_x$ = -12						; size = 4
_rate_of_climb$ = -8					; size = 4
_radar_altitude$ = -4					; size = 4
?draw_rate_of_climb_scale@@YGXXZ PROC			; draw_rate_of_climb_scale, COMDAT

; 10428: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10429: 	float
; 10430: 		radar_altitude,
; 10431: 		rate_of_climb,
; 10432: 		x,
; 10433: 		y,
; 10434: 		y1,
; 10435: 		y2,
; 10436: 		x_adjust;
; 10437: 
; 10438: //	if (draw_main_display)
; 10439: 	{
; 10440: 		x_adjust = -0.05;

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  00011	f3 0f 11 45 e4	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10441: 	}
; 10442: /*	else
; 10443: 	{
; 10444: 		x_adjust = -0.85;
; 10445: 	}*/
; 10446: 
; 10447: 	//
; 10448: 	// draw scale
; 10449: 	//
; 10450: 
; 10451: 	draw_2d_line (CLIMB_SCALE_MAJOR_TICK_X1, (CLIMB_SCALE_FSD * +1.0) - 0.1, CLIMB_SCALE_MAJOR_TICK_X2, (CLIMB_SCALE_FSD * +1.0) - 0.1, MFD_COLOUR1);

  00016	b8 04 00 00 00	 mov	 eax, 4
  0001b	6b c8 00	 imul	 ecx, eax, 0
  0001e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00024	52		 push	 edx
  00025	51		 push	 ecx
  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f651eb8
  0003b	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00040	51		 push	 ecx
  00041	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00046	51		 push	 ecx
  00047	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0004f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00054	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  0005c	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00061	51		 push	 ecx
  00062	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00067	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10452: 	draw_2d_line (CLIMB_SCALE_MAJOR_TICK_X3, (CLIMB_SCALE_FSD * +1.0) - 0.1, CLIMB_SCALE_MAJOR_TICK_X4, (CLIMB_SCALE_FSD * +1.0) - 0.1, MFD_COLOUR1);

  0006c	b8 04 00 00 00	 mov	 eax, 4
  00071	6b c8 00	 imul	 ecx, eax, 0
  00074	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0007a	52		 push	 edx
  0007b	51		 push	 ecx
  0007c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00084	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00089	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7eb852
  00091	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00096	51		 push	 ecx
  00097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009c	51		 push	 ecx
  0009d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  000b2	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  000b7	51		 push	 ecx
  000b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10453: 
; 10454: 	draw_2d_line (CLIMB_SCALE_MAJOR_TICK_X1, (CLIMB_SCALE_FSD * +0.5) - 0.1, CLIMB_SCALE_MAJOR_TICK_X2, (CLIMB_SCALE_FSD * +0.5) - 0.1, MFD_COLOUR1);

  000c2	b8 04 00 00 00	 mov	 eax, 4
  000c7	6b c8 00	 imul	 ecx, eax, 0
  000ca	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000d0	52		 push	 edx
  000d1	51		 push	 ecx
  000d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4cccce
  000da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f651eb8
  000e7	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  000ec	51		 push	 ecx
  000ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f2	51		 push	 ecx
  000f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4cccce
  000fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00100	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00108	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0010d	51		 push	 ecx
  0010e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00113	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10455: 	draw_2d_line (CLIMB_SCALE_MAJOR_TICK_X3, (CLIMB_SCALE_FSD * +0.5) - 0.1, CLIMB_SCALE_MAJOR_TICK_X4, (CLIMB_SCALE_FSD * +0.5) - 0.1, MFD_COLOUR1);

  00118	b8 04 00 00 00	 mov	 eax, 4
  0011d	6b c8 00	 imul	 ecx, eax, 0
  00120	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00126	52		 push	 edx
  00127	51		 push	 ecx
  00128	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4cccce
  00130	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00135	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7eb852
  0013d	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00142	51		 push	 ecx
  00143	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00148	51		 push	 ecx
  00149	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4cccce
  00151	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00156	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  0015e	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00163	51		 push	 ecx
  00164	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00169	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10456: 
; 10457: 	draw_2d_line (CLIMB_SCALE_MINOR_TICK_X1, (CLIMB_SCALE_FSD * +0.4) - 0.1, CLIMB_SCALE_MINOR_TICK_X2, (CLIMB_SCALE_FSD * +0.4) - 0.1, MFD_COLOUR1);

  0016e	b8 04 00 00 00	 mov	 eax, 4
  00173	6b c8 00	 imul	 ecx, eax, 0
  00176	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0017c	52		 push	 edx
  0017d	51		 push	 ecx
  0017e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c2a
  00186	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f628f5c
  00193	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00198	51		 push	 ecx
  00199	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019e	51		 push	 ecx
  0019f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0f5c2a
  001a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5b645a
  001b4	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  001b9	51		 push	 ecx
  001ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bf	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10458: 
; 10459: 	draw_2d_line (CLIMB_SCALE_MINOR_TICK_X1, (CLIMB_SCALE_FSD * +0.3) - 0.1, CLIMB_SCALE_MINOR_TICK_X2, (CLIMB_SCALE_FSD * +0.3) - 0.1, MFD_COLOUR1);

  001c4	b8 04 00 00 00	 mov	 eax, 4
  001c9	6b c8 00	 imul	 ecx, eax, 0
  001cc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001d2	52		 push	 edx
  001d3	51		 push	 ecx
  001d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70b
  001dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f628f5c
  001e9	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  001ee	51		 push	 ecx
  001ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f4	51		 push	 ecx
  001f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70b
  001fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00202	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5b645a
  0020a	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0020f	51		 push	 ecx
  00210	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00215	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10460: 
; 10461: 	draw_2d_line (CLIMB_SCALE_MINOR_TICK_X1, (CLIMB_SCALE_FSD * +0.2) - 0.1, CLIMB_SCALE_MINOR_TICK_X2, (CLIMB_SCALE_FSD * +0.2) - 0.1, MFD_COLOUR1);

  0021a	b8 04 00 00 00	 mov	 eax, 4
  0021f	6b c8 00	 imul	 ecx, eax, 0
  00222	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00228	52		 push	 edx
  00229	51		 push	 ecx
  0022a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ca3d70d
  00232	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00237	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f628f5c
  0023f	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00244	51		 push	 ecx
  00245	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024a	51		 push	 ecx
  0024b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ca3d70d
  00253	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00258	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5b645a
  00260	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00265	51		 push	 ecx
  00266	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10462: 
; 10463: 	draw_2d_line (CLIMB_SCALE_MINOR_TICK_X1, (CLIMB_SCALE_FSD * +0.1) - 0.1, CLIMB_SCALE_MINOR_TICK_X2, (CLIMB_SCALE_FSD * +0.1) - 0.1, MFD_COLOUR1);

  00270	b8 04 00 00 00	 mov	 eax, 4
  00275	6b c8 00	 imul	 ecx, eax, 0
  00278	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0027e	52		 push	 edx
  0027f	51		 push	 ecx
  00280	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  00288	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f628f5c
  00295	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0029a	51		 push	 ecx
  0029b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a0	51		 push	 ecx
  002a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  002a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5b645a
  002b6	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  002bb	51		 push	 ecx
  002bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10464: 
; 10465: 	draw_2d_line (CLIMB_SCALE_MAJOR_TICK_X1, (CLIMB_SCALE_FSD * +0.0) - 0.1, CLIMB_SCALE_MAJOR_TICK_X2, (CLIMB_SCALE_FSD * +0.0) - 0.1, MFD_COLOUR1);

  002c6	b8 04 00 00 00	 mov	 eax, 4
  002cb	6b c8 00	 imul	 ecx, eax, 0
  002ce	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002d4	52		 push	 edx
  002d5	51		 push	 ecx
  002d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  002de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f651eb8
  002eb	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  002f0	51		 push	 ecx
  002f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f6	51		 push	 ecx
  002f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  002ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00304	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  0030c	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00311	51		 push	 ecx
  00312	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00317	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10466: 	draw_2d_line (CLIMB_SCALE_MAJOR_TICK_X3, (CLIMB_SCALE_FSD * +0.0) - 0.1, CLIMB_SCALE_MAJOR_TICK_X4, (CLIMB_SCALE_FSD * +0.0) - 0.1, MFD_COLOUR1);

  0031c	b8 04 00 00 00	 mov	 eax, 4
  00321	6b c8 00	 imul	 ecx, eax, 0
  00324	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0032a	52		 push	 edx
  0032b	51		 push	 ecx
  0032c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  00334	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00339	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7eb852
  00341	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00346	51		 push	 ecx
  00347	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034c	51		 push	 ecx
  0034d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  00355	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  00362	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00367	51		 push	 ecx
  00368	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10467: 
; 10468: 	draw_2d_line (CLIMB_SCALE_MINOR_TICK_X1, (CLIMB_SCALE_FSD * -0.1) - 0.1, CLIMB_SCALE_MINOR_TICK_X2, (CLIMB_SCALE_FSD * -0.1) - 0.1, MFD_COLOUR1);

  00372	b8 04 00 00 00	 mov	 eax, 4
  00377	6b c8 00	 imul	 ecx, eax, 0
  0037a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00380	52		 push	 edx
  00381	51		 push	 ecx
  00382	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  0038a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f628f5c
  00397	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0039c	51		 push	 ecx
  0039d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a2	51		 push	 ecx
  003a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  003ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5b645a
  003b8	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  003bd	51		 push	 ecx
  003be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10469: 
; 10470: 	draw_2d_line (CLIMB_SCALE_MINOR_TICK_X1, (CLIMB_SCALE_FSD * -0.2) - 0.1, CLIMB_SCALE_MINOR_TICK_X2, (CLIMB_SCALE_FSD * -0.2) - 0.1, MFD_COLOUR1);

  003c8	b8 04 00 00 00	 mov	 eax, 4
  003cd	6b c8 00	 imul	 ecx, eax, 0
  003d0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003d6	52		 push	 edx
  003d7	51		 push	 ecx
  003d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be6147ae
  003e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f628f5c
  003ed	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  003f2	51		 push	 ecx
  003f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f8	51		 push	 ecx
  003f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be6147ae
  00401	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00406	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5b645a
  0040e	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00413	51		 push	 ecx
  00414	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00419	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10471: 
; 10472: 	draw_2d_line (CLIMB_SCALE_MINOR_TICK_X1, (CLIMB_SCALE_FSD * -0.3) - 0.1, CLIMB_SCALE_MINOR_TICK_X2, (CLIMB_SCALE_FSD * -0.3) - 0.1, MFD_COLOUR1);

  0041e	b8 04 00 00 00	 mov	 eax, 4
  00423	6b c8 00	 imul	 ecx, eax, 0
  00426	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0042c	52		 push	 edx
  0042d	51		 push	 ecx
  0042e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8f5c29
  00436	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0043b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f628f5c
  00443	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00448	51		 push	 ecx
  00449	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044e	51		 push	 ecx
  0044f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8f5c29
  00457	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0045c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5b645a
  00464	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00469	51		 push	 ecx
  0046a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10473: 
; 10474: 	draw_2d_line (CLIMB_SCALE_MINOR_TICK_X1, (CLIMB_SCALE_FSD * -0.4) - 0.1, CLIMB_SCALE_MINOR_TICK_X2, (CLIMB_SCALE_FSD * -0.4) - 0.1, MFD_COLOUR1);

  00474	b8 04 00 00 00	 mov	 eax, 4
  00479	6b c8 00	 imul	 ecx, eax, 0
  0047c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00482	52		 push	 edx
  00483	51		 push	 ecx
  00484	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beae147b
  0048c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00491	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f628f5c
  00499	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0049e	51		 push	 ecx
  0049f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a4	51		 push	 ecx
  004a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beae147b
  004ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5b645a
  004ba	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  004bf	51		 push	 ecx
  004c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10475: 
; 10476: 	draw_2d_line (CLIMB_SCALE_MAJOR_TICK_X1, (CLIMB_SCALE_FSD * -0.5) - 0.1, CLIMB_SCALE_MAJOR_TICK_X2, (CLIMB_SCALE_FSD * -0.5) - 0.1, MFD_COLOUR1);

  004ca	b8 04 00 00 00	 mov	 eax, 4
  004cf	6b c8 00	 imul	 ecx, eax, 0
  004d2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004d8	52		 push	 edx
  004d9	51		 push	 ecx
  004da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  004e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f651eb8
  004ef	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  004f4	51		 push	 ecx
  004f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fa	51		 push	 ecx
  004fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00503	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00508	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00510	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00515	51		 push	 ecx
  00516	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0051b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10477: 	draw_2d_line (CLIMB_SCALE_MAJOR_TICK_X3, (CLIMB_SCALE_FSD * -0.5) - 0.1, CLIMB_SCALE_MAJOR_TICK_X4, (CLIMB_SCALE_FSD * -0.5) - 0.1, MFD_COLOUR1);

  00520	b8 04 00 00 00	 mov	 eax, 4
  00525	6b c8 00	 imul	 ecx, eax, 0
  00528	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0052e	52		 push	 edx
  0052f	51		 push	 ecx
  00530	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00538	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7eb852
  00545	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0054a	51		 push	 ecx
  0054b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00550	51		 push	 ecx
  00551	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00559	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0055e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  00566	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0056b	51		 push	 ecx
  0056c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00571	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10478: 
; 10479: 	draw_2d_line (CLIMB_SCALE_MINOR_TICK_X3, (CLIMB_SCALE_FSD * -0.6) - 0.1, CLIMB_SCALE_MINOR_TICK_X4, (CLIMB_SCALE_FSD * -0.6) - 0.1, MFD_COLOUR1);

  00576	b8 04 00 00 00	 mov	 eax, 4
  0057b	6b c8 00	 imul	 ecx, eax, 0
  0057e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00584	52		 push	 edx
  00585	51		 push	 ecx
  00586	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beeb851f
  0058e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00593	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7c28f6
  0059b	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  005a0	51		 push	 ecx
  005a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a6	51		 push	 ecx
  005a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beeb851f
  005af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f74fdf4
  005bc	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  005c1	51		 push	 ecx
  005c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10480: 
; 10481: 	draw_2d_line (CLIMB_SCALE_MINOR_TICK_X3, (CLIMB_SCALE_FSD * -0.7) - 0.1, CLIMB_SCALE_MINOR_TICK_X4, (CLIMB_SCALE_FSD * -0.7) - 0.1, MFD_COLOUR1);

  005cc	b8 04 00 00 00	 mov	 eax, 4
  005d1	6b c8 00	 imul	 ecx, eax, 0
  005d4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005da	52		 push	 edx
  005db	51		 push	 ecx
  005dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf051eb9
  005e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7c28f6
  005f1	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  005f6	51		 push	 ecx
  005f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005fc	51		 push	 ecx
  005fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf051eb9
  00605	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0060a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f74fdf4
  00612	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00617	51		 push	 ecx
  00618	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0061d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10482: 
; 10483: 	draw_2d_line (CLIMB_SCALE_MINOR_TICK_X3, (CLIMB_SCALE_FSD * -0.8) - 0.1, CLIMB_SCALE_MINOR_TICK_X4, (CLIMB_SCALE_FSD * -0.8) - 0.1, MFD_COLOUR1);

  00622	b8 04 00 00 00	 mov	 eax, 4
  00627	6b c8 00	 imul	 ecx, eax, 0
  0062a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00630	52		 push	 edx
  00631	51		 push	 ecx
  00632	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf147ae2
  0063a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7c28f6
  00647	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0064c	51		 push	 ecx
  0064d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00652	51		 push	 ecx
  00653	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf147ae2
  0065b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00660	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f74fdf4
  00668	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0066d	51		 push	 ecx
  0066e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00673	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10484: 
; 10485: 	draw_2d_line (CLIMB_SCALE_MINOR_TICK_X3, (CLIMB_SCALE_FSD * -0.9) - 0.1, CLIMB_SCALE_MINOR_TICK_X4, (CLIMB_SCALE_FSD * -0.9) - 0.1, MFD_COLOUR1);

  00678	b8 04 00 00 00	 mov	 eax, 4
  0067d	6b c8 00	 imul	 ecx, eax, 0
  00680	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00686	52		 push	 edx
  00687	51		 push	 ecx
  00688	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf23d70b
  00690	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00695	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7c28f6
  0069d	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  006a2	51		 push	 ecx
  006a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a8	51		 push	 ecx
  006a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf23d70b
  006b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f74fdf4
  006be	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  006c3	51		 push	 ecx
  006c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10486: 
; 10487: 	draw_2d_line (CLIMB_SCALE_MAJOR_TICK_X1, (CLIMB_SCALE_FSD * -1.0) - 0.1, CLIMB_SCALE_MAJOR_TICK_X2, (CLIMB_SCALE_FSD * -1.0) - 0.1, MFD_COLOUR1);

  006ce	b8 04 00 00 00	 mov	 eax, 4
  006d3	6b c8 00	 imul	 ecx, eax, 0
  006d6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006dc	52		 push	 edx
  006dd	51		 push	 ecx
  006de	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333334
  006e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f651eb8
  006f3	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  006f8	51		 push	 ecx
  006f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006fe	51		 push	 ecx
  006ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333334
  00707	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0070c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00714	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00719	51		 push	 ecx
  0071a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0071f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10488: 	draw_2d_line (CLIMB_SCALE_MAJOR_TICK_X3, (CLIMB_SCALE_FSD * -1.0) - 0.1, CLIMB_SCALE_MAJOR_TICK_X4, (CLIMB_SCALE_FSD * -1.0) - 0.1, MFD_COLOUR1);

  00724	b8 04 00 00 00	 mov	 eax, 4
  00729	6b c8 00	 imul	 ecx, eax, 0
  0072c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00732	52		 push	 edx
  00733	51		 push	 ecx
  00734	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333334
  0073c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00741	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7eb852
  00749	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0074e	51		 push	 ecx
  0074f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00754	51		 push	 ecx
  00755	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333334
  0075d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00762	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  0076a	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0076f	51		 push	 ecx
  00770	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00775	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10489: 
; 10490: 	//
; 10491: 	// display analogue radar altitude
; 10492: 	//
; 10493: 
; 10494: 	radar_altitude = feet (current_flight_dynamics->radar_altitude.value);

  0077a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0077f	f3 0f 10 80 44
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9284]
  00787	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4051f948
  0078f	f3 0f 11 45 fc	 movss	 DWORD PTR _radar_altitude$[ebp], xmm0

; 10495: 
; 10496: 	if (radar_altitude <= 200.0)

  00794	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _radar_altitude$[ebp]
  00799	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4069000000000000
  007a1	66 0f 2f c8	 comisd	 xmm1, xmm0
  007a5	0f 82 ab 03 00
	00		 jb	 $LN4@draw_rate_

; 10497: 	{
; 10498: 		y1 = -CLIMB_SCALE_FSD - 0.1;

  007ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333334
  007b3	f3 0f 11 45 ec	 movss	 DWORD PTR _y1$[ebp], xmm0

; 10499: 
; 10500: 		y2 = -CLIMB_SCALE_FSD - 0.1 + radar_altitude * ((CLIMB_SCALE_FSD * 2.0) / 200.0);

  007b8	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _radar_altitude$[ebp]
  007bd	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f789374cccccccd
  007c5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfe6666673333333
  007cd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007d1	f3 0f 11 45 e8	 movss	 DWORD PTR _y2$[ebp], xmm0

; 10501: 
; 10502: 		get_2d_float_screen_coordinates (CLIMB_SCALE_MAJOR_TICK_X2, y1, &x, &y1);

  007d6	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  007d9	50		 push	 eax
  007da	8d 4d f4	 lea	 ecx, DWORD PTR _x$[ebp]
  007dd	51		 push	 ecx
  007de	51		 push	 ecx
  007df	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  007e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f651eb8
  007f1	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  007f6	51		 push	 ecx
  007f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007fc	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 10503: 
; 10504: 		get_2d_float_screen_coordinates (CLIMB_SCALE_MAJOR_TICK_X2, y2, &x, &y2);

  00801	8d 45 e8	 lea	 eax, DWORD PTR _y2$[ebp]
  00804	50		 push	 eax
  00805	8d 4d f4	 lea	 ecx, DWORD PTR _x$[ebp]
  00808	51		 push	 ecx
  00809	51		 push	 ecx
  0080a	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0080f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00814	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f651eb8
  0081c	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00821	51		 push	 ecx
  00822	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00827	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 10505: 
; 10506: 		if (draw_large_mfd)

  0082c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00833	0f 84 15 02 00
	00		 je	 $LN3@draw_rate_

; 10507: 		{
; 10508: 			draw_line (x + 1.0, y1, x + 1.0, y2, MFD_COLOUR1);

  00839	b8 04 00 00 00	 mov	 eax, 4
  0083e	6b c8 00	 imul	 ecx, eax, 0
  00841	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00847	52		 push	 edx
  00848	51		 push	 ecx
  00849	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0084e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00853	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00858	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00860	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00864	51		 push	 ecx
  00865	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0086a	51		 push	 ecx
  0086b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00870	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00875	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0087a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00882	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00886	51		 push	 ecx
  00887	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0088c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 10509: 			draw_line (x + 2.0, y1, x + 2.0, y2, MFD_COLOUR1);

  00891	b8 04 00 00 00	 mov	 eax, 4
  00896	6b c8 00	 imul	 ecx, eax, 0
  00899	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0089f	52		 push	 edx
  008a0	51		 push	 ecx
  008a1	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  008a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ab	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  008b0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  008b8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  008bc	51		 push	 ecx
  008bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c2	51		 push	 ecx
  008c3	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  008c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008cd	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  008d2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  008da	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  008de	51		 push	 ecx
  008df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e4	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 10510: 			draw_line (x + 3.0, y1, x + 3.0, y2, MFD_COLOUR1);

  008e9	b8 04 00 00 00	 mov	 eax, 4
  008ee	6b c8 00	 imul	 ecx, eax, 0
  008f1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008f7	52		 push	 edx
  008f8	51		 push	 ecx
  008f9	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  008fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00903	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00908	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00910	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00914	51		 push	 ecx
  00915	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0091a	51		 push	 ecx
  0091b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00920	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00925	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0092a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00932	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00936	51		 push	 ecx
  00937	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0093c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 10511: 			draw_line (x + 4.0, y1, x + 4.0, y2, MFD_COLOUR1);

  00941	b8 04 00 00 00	 mov	 eax, 4
  00946	6b c8 00	 imul	 ecx, eax, 0
  00949	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0094f	52		 push	 edx
  00950	51		 push	 ecx
  00951	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00956	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0095b	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00960	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  00968	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0096c	51		 push	 ecx
  0096d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00972	51		 push	 ecx
  00973	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00978	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0097d	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00982	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  0098a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0098e	51		 push	 ecx
  0098f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00994	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 10512: 			draw_line (x + 5.0, y1, x + 5.0, y2, MFD_COLOUR1);

  00999	b8 04 00 00 00	 mov	 eax, 4
  0099e	6b c8 00	 imul	 ecx, eax, 0
  009a1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009a7	52		 push	 edx
  009a8	51		 push	 ecx
  009a9	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  009ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b3	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  009b8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4014000000000000
  009c0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009c4	51		 push	 ecx
  009c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ca	51		 push	 ecx
  009cb	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  009d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009d5	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  009da	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4014000000000000
  009e2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009e6	51		 push	 ecx
  009e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ec	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 10513: 			draw_line (x + 6.0, y1, x + 6.0, y2, MFD_COLOUR1);

  009f1	b8 04 00 00 00	 mov	 eax, 4
  009f6	6b c8 00	 imul	 ecx, eax, 0
  009f9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009ff	52		 push	 edx
  00a00	51		 push	 ecx
  00a01	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00a06	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a0b	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00a10	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4018000000000000
  00a18	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a1c	51		 push	 ecx
  00a1d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a22	51		 push	 ecx
  00a23	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00a28	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a2d	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00a32	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4018000000000000
  00a3a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a3e	51		 push	 ecx
  00a3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a44	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 10514: 		}
; 10515: 		else

  00a49	e9 08 01 00 00	 jmp	 $LN4@draw_rate_
$LN3@draw_rate_:

; 10516: 		{
; 10517: 			draw_line (x + 1.0, y1, x + 1.0, y2, MFD_COLOUR1);

  00a4e	b8 04 00 00 00	 mov	 eax, 4
  00a53	6b c8 00	 imul	 ecx, eax, 0
  00a56	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a5c	52		 push	 edx
  00a5d	51		 push	 ecx
  00a5e	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00a63	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a68	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00a6d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00a75	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a79	51		 push	 ecx
  00a7a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a7f	51		 push	 ecx
  00a80	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00a85	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a8a	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00a8f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00a97	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a9b	51		 push	 ecx
  00a9c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa1	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 10518: 			draw_line (x + 2.0, y1, x + 2.0, y2, MFD_COLOUR1);

  00aa6	b8 04 00 00 00	 mov	 eax, 4
  00aab	6b c8 00	 imul	 ecx, eax, 0
  00aae	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ab4	52		 push	 edx
  00ab5	51		 push	 ecx
  00ab6	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00abb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac0	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00ac5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00acd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ad1	51		 push	 ecx
  00ad2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ad7	51		 push	 ecx
  00ad8	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00add	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ae2	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00ae7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00aef	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00af3	51		 push	 ecx
  00af4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00af9	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 10519: 			draw_line (x + 3.0, y1, x + 3.0, y2, MFD_COLOUR1);

  00afe	b8 04 00 00 00	 mov	 eax, 4
  00b03	6b c8 00	 imul	 ecx, eax, 0
  00b06	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b0c	52		 push	 edx
  00b0d	51		 push	 ecx
  00b0e	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00b13	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b18	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00b1d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00b25	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b29	51		 push	 ecx
  00b2a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b2f	51		 push	 ecx
  00b30	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00b35	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b3a	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00b3f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00b47	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b4b	51		 push	 ecx
  00b4c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b51	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN4@draw_rate_:

; 10520: 		}
; 10521: 	}
; 10522: 
; 10523: 	//
; 10524: 	// draw rate of climb scale pointer
; 10525: 	//
; 10526: 
; 10527: 	rate_of_climb = current_flight_dynamics->world_velocity_y.value;

  00b56	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00b5b	f3 0f 10 80 14
	21 00 00	 movss	 xmm0, DWORD PTR [eax+8468]
  00b63	f3 0f 11 45 f8	 movss	 DWORD PTR _rate_of_climb$[ebp], xmm0

; 10528: 
; 10529: 	rate_of_climb = feet_per_minute (rate_of_climb);

  00b68	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _rate_of_climb$[ebp]
  00b6d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4344d9b3
  00b75	f3 0f 11 45 f8	 movss	 DWORD PTR _rate_of_climb$[ebp], xmm0

; 10530: 
; 10531: 	rate_of_climb = bound (rate_of_climb, -1000.0, 1000.0);

  00b7a	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _rate_of_climb$[ebp]
  00b7f	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c08f400000000000
  00b87	66 0f 2f c8	 comisd	 xmm1, xmm0
  00b8b	76 0f		 jbe	 SHORT $LN10@draw_rate_
  00b8d	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c08f400000000000
  00b95	f2 0f 11 45 9c	 movsd	 QWORD PTR tv486[ebp], xmm0
  00b9a	eb 32		 jmp	 SHORT $LN11@draw_rate_
$LN10@draw_rate_:
  00b9c	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _rate_of_climb$[ebp]
  00ba1	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@408f400000000000
  00ba9	76 0f		 jbe	 SHORT $LN8@draw_rate_
  00bab	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@408f400000000000
  00bb3	f2 0f 11 45 94	 movsd	 QWORD PTR tv485[ebp], xmm0
  00bb8	eb 0a		 jmp	 SHORT $LN9@draw_rate_
$LN8@draw_rate_:
  00bba	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _rate_of_climb$[ebp]
  00bbf	f2 0f 11 45 94	 movsd	 QWORD PTR tv485[ebp], xmm0
$LN9@draw_rate_:
  00bc4	f2 0f 10 45 94	 movsd	 xmm0, QWORD PTR tv485[ebp]
  00bc9	f2 0f 11 45 9c	 movsd	 QWORD PTR tv486[ebp], xmm0
$LN11@draw_rate_:
  00bce	f2 0f 5a 45 9c	 cvtsd2ss xmm0, QWORD PTR tv486[ebp]
  00bd3	f3 0f 11 45 f8	 movss	 DWORD PTR _rate_of_climb$[ebp], xmm0

; 10532: 
; 10533: 	x = CLIMB_SCALE_MAJOR_TICK_X1;

  00bd8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00be0	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00be5	f3 0f 11 45 f4	 movss	 DWORD PTR _x$[ebp], xmm0

; 10534: 
; 10535: 	y = rate_of_climb * (CLIMB_SCALE_FSD / 1000.0) - 0.1;

  00bea	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _rate_of_climb$[ebp]
  00bef	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f43a92a3d70a3d7
  00bf7	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00bff	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c03	f3 0f 11 45 f0	 movss	 DWORD PTR _y$[ebp], xmm0

; 10536: 
; 10537: 	if (draw_large_mfd)

  00c08	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00c0f	74 31		 je	 SHORT $LN5@draw_rate_

; 10538: 	{
; 10539: 		draw_2d_mono_sprite (large_rate_of_climb_scale_pointer, x, y, MFD_COLOUR1);

  00c11	b8 04 00 00 00	 mov	 eax, 4
  00c16	6b c8 00	 imul	 ecx, eax, 0
  00c19	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c1f	52		 push	 edx
  00c20	51		 push	 ecx
  00c21	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y$[ebp]
  00c26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c2b	51		 push	 ecx
  00c2c	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00c31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c36	68 00 00 00 00	 push	 OFFSET ?large_rate_of_climb_scale_pointer@@3PADA
  00c3b	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 10540: 	}
; 10541: 	else

  00c40	eb 2f		 jmp	 SHORT $LN6@draw_rate_
$LN5@draw_rate_:

; 10542: 	{
; 10543: 		draw_2d_mono_sprite (small_rate_of_climb_scale_pointer, x, y, MFD_COLOUR1);

  00c42	b8 04 00 00 00	 mov	 eax, 4
  00c47	6b c8 00	 imul	 ecx, eax, 0
  00c4a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c50	52		 push	 edx
  00c51	51		 push	 ecx
  00c52	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y$[ebp]
  00c57	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c5c	51		 push	 ecx
  00c5d	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00c62	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c67	68 00 00 00 00	 push	 OFFSET ?small_rate_of_climb_scale_pointer@@3PADA
  00c6c	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN6@draw_rate_:

; 10544: 	}
; 10545: }

  00c71	5f		 pop	 edi
  00c72	5e		 pop	 esi
  00c73	5b		 pop	 ebx
  00c74	8b e5		 mov	 esp, ebp
  00c76	5d		 pop	 ebp
  00c77	c3		 ret	 0
?draw_rate_of_climb_scale@@YGXXZ ENDP			; draw_rate_of_climb_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?display_altitude@@YGXXZ
_TEXT	SEGMENT
_s$ = -32						; size = 20
_width$ = -12						; size = 4
_barometric_altitude$ = -8				; size = 4
_radar_altitude$ = -4					; size = 4
?display_altitude@@YGXXZ PROC				; display_altitude, COMDAT

; 10309: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10310: 	float
; 10311: 		radar_altitude,
; 10312: 		barometric_altitude,
; 10313: 		width;
; 10314: 
; 10315: 	char
; 10316: 		s[20];
; 10317: 
; 10318: 	radar_altitude = feet (current_flight_dynamics->radar_altitude.value);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0000e	f3 0f 10 80 44
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9284]
  00016	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4051f948
  0001e	f3 0f 11 45 fc	 movss	 DWORD PTR _radar_altitude$[ebp], xmm0

; 10319: 
; 10320: 	if (radar_altitude <= 1500.0)

  00023	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _radar_altitude$[ebp]
  00028	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4097700000000000
  00030	66 0f 2f c8	 comisd	 xmm1, xmm0
  00034	72 19		 jb	 SHORT $LN2@display_al

; 10321: 	{
; 10322: 		sprintf (s, "R%d", (int) radar_altitude);

  00036	f3 0f 2c 45 fc	 cvttss2si eax, DWORD PTR _radar_altitude$[ebp]
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_03IAKIMNGC@R?$CFd@
  00041	8d 4d e0	 lea	 ecx, DWORD PTR _s$[ebp]
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 _sprintf
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10323: 	}
; 10324: 	else

  0004d	eb 31		 jmp	 SHORT $LN3@display_al
$LN2@display_al:

; 10325: 	{
; 10326: 		barometric_altitude = feet (current_flight_dynamics->barometric_altitude.value);

  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00054	f3 0f 10 80 2c
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9260]
  0005c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4051f948
  00064	f3 0f 11 45 f8	 movss	 DWORD PTR _barometric_altitude$[ebp], xmm0

; 10327: 
; 10328: 		sprintf (s, "%d", (int) barometric_altitude);

  00069	f3 0f 2c 45 f8	 cvttss2si eax, DWORD PTR _barometric_altitude$[ebp]
  0006e	50		 push	 eax
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00074	8d 4d e0	 lea	 ecx, DWORD PTR _s$[ebp]
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 _sprintf
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@display_al:

; 10329: 	}
; 10330: 
; 10331: 	width = get_mono_font_string_width (s);

  00080	8d 45 e0	 lea	 eax, DWORD PTR _s$[ebp]
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00089	d9 5d f4	 fstp	 DWORD PTR _width$[ebp]

; 10332: 
; 10333: //	if (draw_main_display)
; 10334: 	{
; 10335: 		set_2d_mono_font_position (1.0, 0.85);

  0008c	51		 push	 ecx
  0008d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00095	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009a	51		 push	 ecx
  0009b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a8	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10336: 
; 10337: 		if (draw_large_mfd)

  000ad	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  000b4	74 3e		 je	 SHORT $LN4@display_al

; 10338: 		{
; 10339: 			set_mono_font_type (MONO_FONT_TYPE_7X12);

  000b6	6a 05		 push	 5
  000b8	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 10340: 
; 10341: 			set_mono_font_rel_position (-width - 2.0, -4.0);

  000bd	51		 push	 ecx
  000be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  000c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cb	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _width$[ebp]
  000d0	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000d7	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000db	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4000000000000000
  000e3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000e7	51		 push	 ecx
  000e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ed	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10342: 		}
; 10343: 		else

  000f2	eb 3c		 jmp	 SHORT $LN5@display_al
$LN4@display_al:

; 10344: 		{
; 10345: 			set_mono_font_type (MONO_FONT_TYPE_5X9);

  000f4	6a 02		 push	 2
  000f6	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 10346: 
; 10347: 			set_mono_font_rel_position (-width - 1.0, -4.0);

  000fb	51		 push	 ecx
  000fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  00104	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00109	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _width$[ebp]
  0010e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00115	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00119	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00121	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00125	51		 push	 ecx
  00126	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012b	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN5@display_al:

; 10348: 		}
; 10349: 	}
; 10350: /*	else
; 10351: 	{
; 10352: 		set_2d_mono_font_position (0.2, 0.6);
; 10353: 
; 10354: 		if (draw_large_mfd)
; 10355: 		{
; 10356: 			set_mono_font_type (MONO_FONT_TYPE_7X12);
; 10357: 
; 10358: 			set_mono_font_rel_position (-width - 2.0, -4.0);
; 10359: 		}
; 10360: 		else
; 10361: 		{
; 10362: 			set_mono_font_type (MONO_FONT_TYPE_5X7);
; 10363: 
; 10364: 			set_mono_font_rel_position (-width - 1.0, -2.0);
; 10365: 		}
; 10366: 	} */
; 10367: 
; 10368: 	print_mono_font_string (s);

  00130	8d 45 e0	 lea	 eax, DWORD PTR _s$[ebp]
  00133	50		 push	 eax
  00134	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10369: }

  00139	5f		 pop	 edi
  0013a	5e		 pop	 esi
  0013b	5b		 pop	 ebx
  0013c	8b e5		 mov	 esp, ebp
  0013e	5d		 pop	 ebp
  0013f	c3		 ret	 0
?display_altitude@@YGXXZ ENDP				; display_altitude
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?display_true_airspeed@@YGXXZ
_TEXT	SEGMENT
_s$ = -24						; size = 20
_true_airspeed$ = -4					; size = 4
?display_true_airspeed@@YGXXZ PROC			; display_true_airspeed, COMDAT

; 10255: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10256: 	float
; 10257: 		true_airspeed;
; 10258: 
; 10259: 	char
; 10260: 		s[20];
; 10261: 
; 10262: 	true_airspeed = current_flight_dynamics->velocity_z.value;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0000e	f3 0f 10 80 9c
	20 00 00	 movss	 xmm0, DWORD PTR [eax+8348]
  00016	f3 0f 11 45 fc	 movss	 DWORD PTR _true_airspeed$[ebp], xmm0

; 10263: 
; 10264: 	true_airspeed = knots (true_airspeed);

  0001b	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _true_airspeed$[ebp]
  00020	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ff85d84
  00028	f3 0f 11 45 fc	 movss	 DWORD PTR _true_airspeed$[ebp], xmm0

; 10265: 
; 10266: 	sprintf (s, "%d", (int) true_airspeed);

  0002d	f3 0f 2c 45 fc	 cvttss2si eax, DWORD PTR _true_airspeed$[ebp]
  00032	50		 push	 eax
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00038	8d 4d e8	 lea	 ecx, DWORD PTR _s$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 _sprintf
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10267: 
; 10268: 	set_2d_mono_font_position (-1.0, -0.1);

  00044	51		 push	 ecx
  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  0004d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00052	51		 push	 ecx
  00053	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0005b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00060	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10269: 
; 10270: //	if (draw_main_display)
; 10271: 	{
; 10272: 		if (draw_large_mfd)

  00065	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0006c	74 2a		 je	 SHORT $LN2@display_tr

; 10273: 		{
; 10274: 			set_mono_font_type (MONO_FONT_TYPE_7X12);

  0006e	6a 05		 push	 5
  00070	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 10275: 
; 10276: 			set_mono_font_rel_position (1.0, -4.0);

  00075	51		 push	 ecx
  00076	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  0007e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00083	51		 push	 ecx
  00084	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0008c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00091	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10277: 		}
; 10278: 		else

  00096	eb 28		 jmp	 SHORT $LN3@display_tr
$LN2@display_tr:

; 10279: 		{
; 10280: 			set_mono_font_type (MONO_FONT_TYPE_5X9);

  00098	6a 02		 push	 2
  0009a	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 10281: 
; 10282: 			set_mono_font_rel_position (1.0, -3.0);

  0009f	51		 push	 ecx
  000a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  000a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ad	51		 push	 ecx
  000ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bb	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN3@display_tr:

; 10283: 		}
; 10284: 	}
; 10285: /*	else
; 10286: 	{
; 10287: 		if (draw_large_mfd)
; 10288: 		{
; 10289: 			set_mono_font_type (MONO_FONT_TYPE_7X12);
; 10290: 
; 10291: 			set_mono_font_rel_position (1.0, -4.0);
; 10292: 		}
; 10293: 		else
; 10294: 		{
; 10295: 			set_mono_font_type (MONO_FONT_TYPE_5X7);
; 10296: 
; 10297: 			set_mono_font_rel_position (1.0, -2.0);
; 10298: 		}
; 10299: 	}*/
; 10300: 
; 10301: 	print_mono_font_string (s);

  000c0	8d 45 e8	 lea	 eax, DWORD PTR _s$[ebp]
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10302: }

  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
?display_true_airspeed@@YGXXZ ENDP			; display_true_airspeed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_pitch_ladder@@YGXXZ
_TEXT	SEGMENT
tv290 = -200						; size = 8
tv1740 = -192						; size = 8
tv1531 = -192						; size = 8
tv1413 = -192						; size = 8
tv1407 = -192						; size = 8
tv1399 = -192						; size = 8
tv355 = -192						; size = 4
tv291 = -192						; size = 8
tv85 = -192						; size = 4
tv1392 = -188						; size = 4
tv1386 = -188						; size = 4
tv419 = -188						; size = 4
tv347 = -188						; size = 4
tv77 = -188						; size = 4
_x_adjust$ = -120					; size = 4
_y_10_deg_step$ = -116					; size = 4
_x_10_deg_step$ = -112					; size = 4
_y_horizon$ = -108					; size = 4
_x_horizon$ = -104					; size = 4
_y_scale$ = -100					; size = 4
_x_scale$ = -96						; size = 4
_y$ = -92						; size = 4
_x$ = -88						; size = 4
_v$ = -84						; size = 4
_u$ = -80						; size = 4
_roll$ = -76						; size = 4
_pitch_bar_scale$ = -72					; size = 4
_tan_mod_pitch$ = -68					; size = 4
_mod_pitch$ = -64					; size = 4
_pitch$ = -60						; size = 4
_vp_size$ = -56						; size = 4
_roll_size$ = -52					; size = 4
_size$ = -48						; size = 4
_x_centre$ = -44					; size = 4
_y_adjust_below_line$ = -40				; size = 4
_y_adjust_above_line$ = -36				; size = 4
_loop$ = -32						; size = 4
_step_direction$ = -28					; size = 4
_int_pitch$ = -24					; size = 4
_s$ = -20						; size = 20
?draw_pitch_ladder@@YGXXZ PROC				; draw_pitch_ladder, COMDAT

; 9920 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 9921 : 	char
; 9922 : 		s[20];
; 9923 : 
; 9924 : 	int
; 9925 : 		int_pitch,
; 9926 : 		step_direction,
; 9927 : 		loop;
; 9928 : 
; 9929 : 	float
; 9930 : 		y_adjust_above_line,
; 9931 : 		y_adjust_below_line,
; 9932 : 		x_centre,
; 9933 : 		size,
; 9934 : 		roll_size,
; 9935 : 		vp_size,
; 9936 : 		pitch,
; 9937 : 		mod_pitch,
; 9938 : 		tan_mod_pitch,
; 9939 : 		pitch_bar_scale,
; 9940 : 		roll,
; 9941 : 		u,
; 9942 : 		v,
; 9943 : 		x,
; 9944 : 		y,
; 9945 : 		x_scale,
; 9946 : 		y_scale,
; 9947 : 		x_horizon,
; 9948 : 		y_horizon,
; 9949 : 		x_10_deg_step,
; 9950 : 		y_10_deg_step,
; 9951 : 		x_adjust;
; 9952 : 
; 9953 : 	if (draw_large_mfd)

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00013	74 23		 je	 SHORT $LN7@draw_pitch

; 9954 : 	{
; 9955 : 		set_mono_font_type (MONO_FONT_TYPE_6X10);

  00015	6a 04		 push	 4
  00017	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 9956 : 
; 9957 : 		y_adjust_above_line = -3.0;

  0001c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  00024	f3 0f 11 45 dc	 movss	 DWORD PTR _y_adjust_above_line$[ebp], xmm0

; 9958 : 		y_adjust_below_line = -3.0;

  00029	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  00031	f3 0f 11 45 d8	 movss	 DWORD PTR _y_adjust_below_line$[ebp], xmm0

; 9959 : 	}
; 9960 : 	else

  00036	eb 21		 jmp	 SHORT $LN8@draw_pitch
$LN7@draw_pitch:

; 9961 : 	{
; 9962 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  00038	6a 00		 push	 0
  0003a	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 9963 : 
; 9964 : 		y_adjust_above_line = -3.0;

  0003f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  00047	f3 0f 11 45 dc	 movss	 DWORD PTR _y_adjust_above_line$[ebp], xmm0

; 9965 : 		y_adjust_below_line = -1.0;

  0004c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00054	f3 0f 11 45 d8	 movss	 DWORD PTR _y_adjust_below_line$[ebp], xmm0
$LN8@draw_pitch:

; 9966 : 	}
; 9967 : 
; 9968 : 	x_centre = 0.0;

  00059	0f 57 c0	 xorps	 xmm0, xmm0
  0005c	f3 0f 11 45 d4	 movss	 DWORD PTR _x_centre$[ebp], xmm0

; 9969 : 	size = 0.6;

  00061	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00069	f3 0f 11 45 d0	 movss	 DWORD PTR _size$[ebp], xmm0

; 9970 : 	pitch_bar_scale = 0.6;

  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00076	f3 0f 11 45 b8	 movss	 DWORD PTR _pitch_bar_scale$[ebp], xmm0

; 9971 : 
; 9972 : 	get_2d_float_screen_coordinates (PITCH_DATUM_X, PITCH_DATUM_Y, &u, &v);

  0007b	8d 45 ac	 lea	 eax, DWORD PTR _v$[ebp]
  0007e	50		 push	 eax
  0007f	8d 4d b0	 lea	 ecx, DWORD PTR _u$[ebp]
  00082	51		 push	 ecx
  00083	51		 push	 ecx
  00084	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  0008c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00091	51		 push	 ecx
  00092	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  00097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009c	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 9973 : 
; 9974 : 	//
; 9975 : 	// roll
; 9976 : 	//
; 9977 : 
; 9978 : 	roll = get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_ROLL);

  000a1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  000a8	74 0f		 je	 SHORT $LN19@draw_pitch
  000aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000af	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b1	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv77[ebp], ecx
  000b7	eb 24		 jmp	 SHORT $LN20@draw_pitch
$LN19@draw_pitch:
  000b9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  000bf	83 c2 3a	 add	 edx, 58			; 0000003aH
  000c2	52		 push	 edx
  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000d3	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv77[ebp], 0
$LN20@draw_pitch:
  000dd	b9 01 00 00 00	 mov	 ecx, 1
  000e2	85 c9		 test	 ecx, ecx
  000e4	74 0c		 je	 SHORT $LN21@draw_pitch
  000e6	c7 85 40 ff ff
	ff 71 00 00 00	 mov	 DWORD PTR tv85[ebp], 113 ; 00000071H
  000f0	eb 24		 jmp	 SHORT $LN22@draw_pitch
$LN21@draw_pitch:
  000f2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  000f8	83 c2 3a	 add	 edx, 58			; 0000003aH
  000fb	52		 push	 edx
  000fc	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00101	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0010c	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv85[ebp], 0
$LN22@draw_pitch:
  00116	6a 71		 push	 113			; 00000071H
  00118	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0011e	51		 push	 ecx
  0011f	69 95 44 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv77[ebp], 700
  00129	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv85[ebp]
  0012f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00136	ff d1		 call	 ecx
  00138	d9 5d b4	 fstp	 DWORD PTR _roll$[ebp]

; 9979 : 
; 9980 : 	set_2d_instance_position (mfd_env, PITCH_DATUM_X, PITCH_DATUM_Y);

  0013b	51		 push	 ecx
  0013c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  00144	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00149	51		 push	 ecx
  0014a	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  0014f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00154	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00159	50		 push	 eax
  0015a	e8 00 00 00 00	 call	 ?set_2d_instance_position@@YGXPAUENV_2D@@MM@Z ; set_2d_instance_position

; 9981 : 	roll_size = size + 0.2;

  0015f	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  00164	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0016c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00170	f3 0f 11 45 cc	 movss	 DWORD PTR _roll_size$[ebp], xmm0

; 9982 : 
; 9983 : 	set_2d_instance_rotation (mfd_env, rad (0.0));

  00175	51		 push	 ecx
  00176	0f 57 c0	 xorps	 xmm0, xmm0
  00179	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00183	50		 push	 eax
  00184	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 9984 : 	draw_2d_line (0.0, roll_size, 0.0, roll_size - 0.05, MFD_COLOUR_CYAN);

  00189	b8 04 00 00 00	 mov	 eax, 4
  0018e	c1 e0 04	 shl	 eax, 4
  00191	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00197	51		 push	 ecx
  00198	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  0019d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  001a5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001a9	51		 push	 ecx
  001aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001af	51		 push	 ecx
  001b0	0f 57 c0	 xorps	 xmm0, xmm0
  001b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b8	51		 push	 ecx
  001b9	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  001be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c3	51		 push	 ecx
  001c4	0f 57 c0	 xorps	 xmm0, xmm0
  001c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cc	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9985 : 
; 9986 : 	set_2d_instance_rotation (mfd_env, rad (5.0));

  001d1	51		 push	 ecx
  001d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db2b8c2
  001da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001e4	50		 push	 eax
  001e5	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 9987 : 	draw_2d_line (0.0, roll_size, 0.0, roll_size - 0.025, MFD_COLOUR_CYAN);

  001ea	b8 04 00 00 00	 mov	 eax, 4
  001ef	c1 e0 04	 shl	 eax, 4
  001f2	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  001f8	51		 push	 ecx
  001f9	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  001fe	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9999999999999a
  00206	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0020a	51		 push	 ecx
  0020b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00210	51		 push	 ecx
  00211	0f 57 c0	 xorps	 xmm0, xmm0
  00214	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00219	51		 push	 ecx
  0021a	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  0021f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00224	51		 push	 ecx
  00225	0f 57 c0	 xorps	 xmm0, xmm0
  00228	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9988 : 	set_2d_instance_rotation (mfd_env, rad (-5.0));

  00232	51		 push	 ecx
  00233	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdb2b8c2
  0023b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00240	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00245	50		 push	 eax
  00246	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 9989 : 	draw_2d_line (0.0, roll_size, 0.0, roll_size - 0.025, MFD_COLOUR_CYAN);

  0024b	b8 04 00 00 00	 mov	 eax, 4
  00250	c1 e0 04	 shl	 eax, 4
  00253	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00259	51		 push	 ecx
  0025a	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  0025f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9999999999999a
  00267	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0026b	51		 push	 ecx
  0026c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00271	51		 push	 ecx
  00272	0f 57 c0	 xorps	 xmm0, xmm0
  00275	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027a	51		 push	 ecx
  0027b	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  00280	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00285	51		 push	 ecx
  00286	0f 57 c0	 xorps	 xmm0, xmm0
  00289	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9990 : 
; 9991 : 	set_2d_instance_rotation (mfd_env, rad (10.0));

  00293	51		 push	 ecx
  00294	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e32b8c2
  0029c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  002a6	50		 push	 eax
  002a7	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 9992 : 	draw_2d_line (0.0, roll_size, 0.0, roll_size - 0.05, MFD_COLOUR_CYAN);

  002ac	b8 04 00 00 00	 mov	 eax, 4
  002b1	c1 e0 04	 shl	 eax, 4
  002b4	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  002ba	51		 push	 ecx
  002bb	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  002c0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  002c8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002cc	51		 push	 ecx
  002cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d2	51		 push	 ecx
  002d3	0f 57 c0	 xorps	 xmm0, xmm0
  002d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002db	51		 push	 ecx
  002dc	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  002e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e6	51		 push	 ecx
  002e7	0f 57 c0	 xorps	 xmm0, xmm0
  002ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ef	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9993 : 	set_2d_instance_rotation (mfd_env, rad (-10.0));

  002f4	51		 push	 ecx
  002f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be32b8c2
  002fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00302	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00307	50		 push	 eax
  00308	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 9994 : 	draw_2d_line (0.0, roll_size, 0.0, roll_size - 0.05, MFD_COLOUR_CYAN);

  0030d	b8 04 00 00 00	 mov	 eax, 4
  00312	c1 e0 04	 shl	 eax, 4
  00315	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0031b	51		 push	 ecx
  0031c	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  00321	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  00329	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0032d	51		 push	 ecx
  0032e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00333	51		 push	 ecx
  00334	0f 57 c0	 xorps	 xmm0, xmm0
  00337	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033c	51		 push	 ecx
  0033d	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  00342	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00347	51		 push	 ecx
  00348	0f 57 c0	 xorps	 xmm0, xmm0
  0034b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00350	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9995 : 
; 9996 : 	set_2d_instance_rotation (mfd_env, rad (15.0));

  00355	51		 push	 ecx
  00356	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e860a92
  0035e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00363	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00368	50		 push	 eax
  00369	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 9997 : 	draw_2d_line (0.0, roll_size, 0.0, roll_size - 0.025, MFD_COLOUR_CYAN);

  0036e	b8 04 00 00 00	 mov	 eax, 4
  00373	c1 e0 04	 shl	 eax, 4
  00376	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0037c	51		 push	 ecx
  0037d	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  00382	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9999999999999a
  0038a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0038e	51		 push	 ecx
  0038f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00394	51		 push	 ecx
  00395	0f 57 c0	 xorps	 xmm0, xmm0
  00398	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039d	51		 push	 ecx
  0039e	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  003a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a8	51		 push	 ecx
  003a9	0f 57 c0	 xorps	 xmm0, xmm0
  003ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 9998 : 	set_2d_instance_rotation (mfd_env, rad (-15.0));

  003b6	51		 push	 ecx
  003b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be860a92
  003bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  003c9	50		 push	 eax
  003ca	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 9999 : 	draw_2d_line (0.0, roll_size, 0.0, roll_size - 0.025, MFD_COLOUR_CYAN);

  003cf	b8 04 00 00 00	 mov	 eax, 4
  003d4	c1 e0 04	 shl	 eax, 4
  003d7	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  003dd	51		 push	 ecx
  003de	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  003e3	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9999999999999a
  003eb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003ef	51		 push	 ecx
  003f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f5	51		 push	 ecx
  003f6	0f 57 c0	 xorps	 xmm0, xmm0
  003f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003fe	51		 push	 ecx
  003ff	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  00404	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00409	51		 push	 ecx
  0040a	0f 57 c0	 xorps	 xmm0, xmm0
  0040d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00412	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10000: 
; 10001: 	set_2d_instance_rotation (mfd_env, rad (20.0));

  00417	51		 push	 ecx
  00418	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb2b8c2
  00420	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00425	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0042a	50		 push	 eax
  0042b	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 10002: 	draw_2d_line (0.0, roll_size, 0.0, roll_size - 0.05, MFD_COLOUR_CYAN);

  00430	b8 04 00 00 00	 mov	 eax, 4
  00435	c1 e0 04	 shl	 eax, 4
  00438	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0043e	51		 push	 ecx
  0043f	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  00444	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  0044c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00450	51		 push	 ecx
  00451	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00456	51		 push	 ecx
  00457	0f 57 c0	 xorps	 xmm0, xmm0
  0045a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0045f	51		 push	 ecx
  00460	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  00465	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046a	51		 push	 ecx
  0046b	0f 57 c0	 xorps	 xmm0, xmm0
  0046e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00473	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10003: 	set_2d_instance_rotation (mfd_env, rad (-20.0));

  00478	51		 push	 ecx
  00479	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb2b8c2
  00481	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00486	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0048b	50		 push	 eax
  0048c	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 10004: 	draw_2d_line (0.0, roll_size, 0.0, roll_size - 0.05, MFD_COLOUR_CYAN);

  00491	b8 04 00 00 00	 mov	 eax, 4
  00496	c1 e0 04	 shl	 eax, 4
  00499	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0049f	51		 push	 ecx
  004a0	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  004a5	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  004ad	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004b1	51		 push	 ecx
  004b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b7	51		 push	 ecx
  004b8	0f 57 c0	 xorps	 xmm0, xmm0
  004bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c0	51		 push	 ecx
  004c1	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  004c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004cb	51		 push	 ecx
  004cc	0f 57 c0	 xorps	 xmm0, xmm0
  004cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10005: 
; 10006: 	set_2d_instance_rotation (mfd_env, rad (25.0));

  004d9	51		 push	 ecx
  004da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3edf66f3
  004e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  004ec	50		 push	 eax
  004ed	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 10007: 	draw_2d_line (0.0, roll_size, 0.0, roll_size - 0.025, MFD_COLOUR_CYAN);

  004f2	b8 04 00 00 00	 mov	 eax, 4
  004f7	c1 e0 04	 shl	 eax, 4
  004fa	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00500	51		 push	 ecx
  00501	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  00506	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9999999999999a
  0050e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00512	51		 push	 ecx
  00513	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00518	51		 push	 ecx
  00519	0f 57 c0	 xorps	 xmm0, xmm0
  0051c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00521	51		 push	 ecx
  00522	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  00527	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0052c	51		 push	 ecx
  0052d	0f 57 c0	 xorps	 xmm0, xmm0
  00530	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00535	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10008: 	set_2d_instance_rotation (mfd_env, rad (-25.0));

  0053a	51		 push	 ecx
  0053b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bedf66f3
  00543	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00548	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0054d	50		 push	 eax
  0054e	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 10009: 	draw_2d_line (0.0, roll_size, 0.0, roll_size - 0.025, MFD_COLOUR_CYAN);

  00553	b8 04 00 00 00	 mov	 eax, 4
  00558	c1 e0 04	 shl	 eax, 4
  0055b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00561	51		 push	 ecx
  00562	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  00567	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9999999999999a
  0056f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00573	51		 push	 ecx
  00574	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00579	51		 push	 ecx
  0057a	0f 57 c0	 xorps	 xmm0, xmm0
  0057d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00582	51		 push	 ecx
  00583	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  00588	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0058d	51		 push	 ecx
  0058e	0f 57 c0	 xorps	 xmm0, xmm0
  00591	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00596	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10010: 
; 10011: 	set_2d_instance_rotation (mfd_env, rad (30.0));

  0059b	51		 push	 ecx
  0059c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f060a92
  005a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  005ae	50		 push	 eax
  005af	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 10012: 	draw_2d_line (0.0, roll_size, 0.0, roll_size - 0.05, MFD_COLOUR_CYAN);

  005b4	b8 04 00 00 00	 mov	 eax, 4
  005b9	c1 e0 04	 shl	 eax, 4
  005bc	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  005c2	51		 push	 ecx
  005c3	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  005c8	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  005d0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005d4	51		 push	 ecx
  005d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005da	51		 push	 ecx
  005db	0f 57 c0	 xorps	 xmm0, xmm0
  005de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e3	51		 push	 ecx
  005e4	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  005e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ee	51		 push	 ecx
  005ef	0f 57 c0	 xorps	 xmm0, xmm0
  005f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10013: 	set_2d_instance_rotation (mfd_env, rad (-30.0));

  005fc	51		 push	 ecx
  005fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf060a92
  00605	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0060a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0060f	50		 push	 eax
  00610	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 10014: 	draw_2d_line (0.0, roll_size, 0.0, roll_size - 0.05, MFD_COLOUR_CYAN);

  00615	b8 04 00 00 00	 mov	 eax, 4
  0061a	c1 e0 04	 shl	 eax, 4
  0061d	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00623	51		 push	 ecx
  00624	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  00629	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  00631	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00635	51		 push	 ecx
  00636	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063b	51		 push	 ecx
  0063c	0f 57 c0	 xorps	 xmm0, xmm0
  0063f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00644	51		 push	 ecx
  00645	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  0064a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0064f	51		 push	 ecx
  00650	0f 57 c0	 xorps	 xmm0, xmm0
  00653	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00658	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10015: 
; 10016: 	set_2d_instance_rotation (mfd_env, bound (roll, rad (-30.0), rad (30.0)));

  0065d	f3 0f 5a 45 b4	 cvtss2sd xmm0, DWORD PTR _roll$[ebp]
  00662	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bfe0c15236000000
  0066a	66 0f 2f c8	 comisd	 xmm1, xmm0
  0066e	76 12		 jbe	 SHORT $LN25@draw_pitch
  00670	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bfe0c15236000000
  00678	f2 0f 11 85 40
	ff ff ff	 movsd	 QWORD PTR tv291[ebp], xmm0
  00680	eb 3e		 jmp	 SHORT $LN26@draw_pitch
$LN25@draw_pitch:
  00682	f3 0f 5a 45 b4	 cvtss2sd xmm0, DWORD PTR _roll$[ebp]
  00687	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fe0c15236000000
  0068f	76 12		 jbe	 SHORT $LN23@draw_pitch
  00691	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fe0c15236000000
  00699	f2 0f 11 85 38
	ff ff ff	 movsd	 QWORD PTR tv290[ebp], xmm0
  006a1	eb 0d		 jmp	 SHORT $LN24@draw_pitch
$LN23@draw_pitch:
  006a3	f3 0f 5a 45 b4	 cvtss2sd xmm0, DWORD PTR _roll$[ebp]
  006a8	f2 0f 11 85 38
	ff ff ff	 movsd	 QWORD PTR tv290[ebp], xmm0
$LN24@draw_pitch:
  006b0	f2 0f 10 85 38
	ff ff ff	 movsd	 xmm0, QWORD PTR tv290[ebp]
  006b8	f2 0f 11 85 40
	ff ff ff	 movsd	 QWORD PTR tv291[ebp], xmm0
$LN26@draw_pitch:
  006c0	f2 0f 5a 85 40
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv291[ebp]
  006c8	51		 push	 ecx
  006c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  006d3	50		 push	 eax
  006d4	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 10017: 	draw_2d_line (0.0, roll_size - 0.075, 0.0, roll_size, MFD_COLOUR_CYAN);

  006d9	b8 04 00 00 00	 mov	 eax, 4
  006de	c1 e0 04	 shl	 eax, 4
  006e1	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  006e7	51		 push	 ecx
  006e8	51		 push	 ecx
  006e9	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _roll_size$[ebp]
  006ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f3	51		 push	 ecx
  006f4	0f 57 c0	 xorps	 xmm0, xmm0
  006f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006fc	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _roll_size$[ebp]
  00701	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb3333333333333
  00709	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0070d	51		 push	 ecx
  0070e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00713	51		 push	 ecx
  00714	0f 57 c0	 xorps	 xmm0, xmm0
  00717	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0071c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10018: 
; 10019: 
; 10020: 	//
; 10021: 	// set 2D environment
; 10022: 	//
; 10023: 
; 10024: 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN * size, MFD_WINDOW_Y_MIN * size, MFD_WINDOW_X_MAX * size, MFD_WINDOW_Y_MAX * size);

  00721	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  00726	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff199999999999a
  0072e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00732	51		 push	 ecx
  00733	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00738	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  0073d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff199999999999a
  00745	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00749	51		 push	 ecx
  0074a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0074f	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  00754	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff199999999999a
  0075c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00760	51		 push	 ecx
  00761	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00766	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  0076b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff199999999999a
  00773	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00777	51		 push	 ecx
  00778	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00782	50		 push	 eax
  00783	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 10025: 
; 10026: 	vp_size = mfd_viewport_size * size * 0.5;

  00788	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00790	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _size$[ebp]
  00795	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00799	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  007a1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007a5	f3 0f 11 45 c8	 movss	 DWORD PTR _vp_size$[ebp], xmm0

; 10027: 
; 10028: 	set_2d_viewport (mfd_env, u - vp_size, v - vp_size, u + vp_size - 0.001, v + vp_size - 0.001);

  007aa	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _v$[ebp]
  007af	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _vp_size$[ebp]
  007b4	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  007b8	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  007c0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007c4	51		 push	 ecx
  007c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ca	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _u$[ebp]
  007cf	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _vp_size$[ebp]
  007d4	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  007d8	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  007e0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007e4	51		 push	 ecx
  007e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ea	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _v$[ebp]
  007ef	f3 0f 5c 45 c8	 subss	 xmm0, DWORD PTR _vp_size$[ebp]
  007f4	51		 push	 ecx
  007f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007fa	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _u$[ebp]
  007ff	f3 0f 5c 45 c8	 subss	 xmm0, DWORD PTR _vp_size$[ebp]
  00804	51		 push	 ecx
  00805	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0080a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0080f	50		 push	 eax
  00810	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 10029: 
; 10030: 	//
; 10031: 	// pitch
; 10032: 	//
; 10033: 
; 10034: 	pitch = get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_PITCH);

  00815	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0081c	74 0f		 je	 SHORT $LN27@draw_pitch
  0081e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00823	8b 08		 mov	 ecx, DWORD PTR [eax]
  00825	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv347[ebp], ecx
  0082b	eb 24		 jmp	 SHORT $LN28@draw_pitch
$LN27@draw_pitch:
  0082d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  00833	83 c2 72	 add	 edx, 114		; 00000072H
  00836	52		 push	 edx
  00837	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0083c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00841	50		 push	 eax
  00842	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00847	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv347[ebp], 0
$LN28@draw_pitch:
  00851	b9 01 00 00 00	 mov	 ecx, 1
  00856	85 c9		 test	 ecx, ecx
  00858	74 0c		 je	 SHORT $LN29@draw_pitch
  0085a	c7 85 40 ff ff
	ff 54 00 00 00	 mov	 DWORD PTR tv355[ebp], 84 ; 00000054H
  00864	eb 24		 jmp	 SHORT $LN30@draw_pitch
$LN29@draw_pitch:
  00866	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  0086c	83 c2 72	 add	 edx, 114		; 00000072H
  0086f	52		 push	 edx
  00870	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00875	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0087a	50		 push	 eax
  0087b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00880	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv355[ebp], 0
$LN30@draw_pitch:
  0088a	6a 54		 push	 84			; 00000054H
  0088c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00892	51		 push	 ecx
  00893	69 95 44 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv347[ebp], 700
  0089d	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv355[ebp]
  008a3	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  008aa	ff d1		 call	 ecx
  008ac	d9 5d c4	 fstp	 DWORD PTR _pitch$[ebp]

; 10035: 
; 10036: 	mod_pitch = fmod (pitch, rad (10.0f));

  008af	51		 push	 ecx
  008b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e32b8c2
  008b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008bd	51		 push	 ecx
  008be	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  008c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c8	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  008cd	d9 5d c0	 fstp	 DWORD PTR _mod_pitch$[ebp]

; 10037: 
; 10038: 	tan_mod_pitch = -tan (mod_pitch);

  008d0	51		 push	 ecx
  008d1	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _mod_pitch$[ebp]
  008d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008db	e8 00 00 00 00	 call	 ?tan@@YGMM@Z		; tan
  008e0	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv1386[ebp]
  008e6	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1386[ebp]
  008ee	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  008f5	f3 0f 11 45 bc	 movss	 DWORD PTR _tan_mod_pitch$[ebp], xmm0

; 10039: 
; 10040: 	int_pitch = (int) (pitch * (1.0 / rad (10.0)));

  008fa	f3 0f 5a 45 c4	 cvtss2sd xmm0, DWORD PTR _pitch$[ebp]
  008ff	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4016eb167e7d81e3
  00907	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0090b	89 45 e8	 mov	 DWORD PTR _int_pitch$[ebp], eax

; 10041: 
; 10042: 	//
; 10043: 	// get x and y scale factors
; 10044: 	//
; 10045: 
; 10046: 	x_scale = -sin (roll) * 1.5 * pitch_bar_scale;

  0090e	51		 push	 ecx
  0090f	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00914	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00919	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  0091e	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv1392[ebp]
  00924	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1392[ebp]
  0092c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00933	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00937	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff8000000000000
  0093f	f3 0f 5a 4d b8	 cvtss2sd xmm1, DWORD PTR _pitch_bar_scale$[ebp]
  00944	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00948	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0094c	f3 0f 11 45 a0	 movss	 DWORD PTR _x_scale$[ebp], xmm0

; 10047: 
; 10048: 	y_scale = cos (roll) * 1.5 * pitch_bar_scale;

  00951	51		 push	 ecx
  00952	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00957	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0095c	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  00961	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv1399[ebp]
  00967	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1399[ebp]
  0096f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff8000000000000
  00977	f3 0f 5a 4d b8	 cvtss2sd xmm1, DWORD PTR _pitch_bar_scale$[ebp]
  0097c	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00980	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00984	f3 0f 11 45 9c	 movss	 DWORD PTR _y_scale$[ebp], xmm0

; 10049: 
; 10050: 	x_horizon = tan_mod_pitch * x_scale;

  00989	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _tan_mod_pitch$[ebp]
  0098e	f3 0f 59 45 a0	 mulss	 xmm0, DWORD PTR _x_scale$[ebp]
  00993	f3 0f 11 45 98	 movss	 DWORD PTR _x_horizon$[ebp], xmm0

; 10051: 	y_horizon = tan_mod_pitch * y_scale;

  00998	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _tan_mod_pitch$[ebp]
  0099d	f3 0f 59 45 9c	 mulss	 xmm0, DWORD PTR _y_scale$[ebp]
  009a2	f3 0f 11 45 94	 movss	 DWORD PTR _y_horizon$[ebp], xmm0

; 10052: 
; 10053: 	x_10_deg_step = tan (rad (10.0)) * x_scale;

  009a7	83 ec 08	 sub	 esp, 8
  009aa	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fc6571848000000
  009b2	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  009b7	e8 00 00 00 00	 call	 _tan
  009bc	83 c4 08	 add	 esp, 8
  009bf	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv1407[ebp]
  009c5	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1407[ebp]
  009cd	f3 0f 5a 4d a0	 cvtss2sd xmm1, DWORD PTR _x_scale$[ebp]
  009d2	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  009d6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009da	f3 0f 11 45 90	 movss	 DWORD PTR _x_10_deg_step$[ebp], xmm0

; 10054: 	y_10_deg_step = tan (rad (10.0)) * y_scale;

  009df	83 ec 08	 sub	 esp, 8
  009e2	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fc6571848000000
  009ea	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  009ef	e8 00 00 00 00	 call	 _tan
  009f4	83 c4 08	 add	 esp, 8
  009f7	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv1413[ebp]
  009fd	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1413[ebp]
  00a05	f3 0f 5a 4d 9c	 cvtss2sd xmm1, DWORD PTR _y_scale$[ebp]
  00a0a	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00a0e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a12	f3 0f 11 45 8c	 movss	 DWORD PTR _y_10_deg_step$[ebp], xmm0

; 10055: 
; 10056: 	////////////////////////////////////////
; 10057: 	//
; 10058: 	// draw pitch ladder
; 10059: 	//
; 10060: 	////////////////////////////////////////
; 10061: 
; 10062: 	step_direction = -1;

  00a17	c7 45 e4 ff ff
	ff ff		 mov	 DWORD PTR _step_direction$[ebp], -1

; 10063: 
; 10064: 	int_pitch = limit_pitch (int_pitch + 3, &step_direction);

  00a1e	8d 45 e4	 lea	 eax, DWORD PTR _step_direction$[ebp]
  00a21	50		 push	 eax
  00a22	8b 4d e8	 mov	 ecx, DWORD PTR _int_pitch$[ebp]
  00a25	83 c1 03	 add	 ecx, 3
  00a28	51		 push	 ecx
  00a29	e8 00 00 00 00	 call	 ?limit_pitch@@YGHHPAH@Z	; limit_pitch
  00a2e	89 45 e8	 mov	 DWORD PTR _int_pitch$[ebp], eax

; 10065: 
; 10066: 	x = x_horizon + x_10_deg_step * 3.0;

  00a31	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _x_horizon$[ebp]
  00a36	f3 0f 5a 4d 90	 cvtss2sd xmm1, DWORD PTR _x_10_deg_step$[ebp]
  00a3b	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4008000000000000
  00a43	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00a47	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a4b	f3 0f 11 45 a8	 movss	 DWORD PTR _x$[ebp], xmm0

; 10067: 	y = y_horizon + y_10_deg_step * 3.0;

  00a50	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _y_horizon$[ebp]
  00a55	f3 0f 5a 4d 8c	 cvtss2sd xmm1, DWORD PTR _y_10_deg_step$[ebp]
  00a5a	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4008000000000000
  00a62	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00a66	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a6a	f3 0f 11 45 a4	 movss	 DWORD PTR _y$[ebp], xmm0

; 10068: 
; 10069: 	set_2d_instance_rotation (mfd_env, roll);

  00a6f	51		 push	 ecx
  00a70	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00a75	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a7a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a7f	50		 push	 eax
  00a80	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 10070: 
; 10071: 	for (loop = 0; loop < 7; loop++)

  00a85	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  00a8c	eb 09		 jmp	 SHORT $LN4@draw_pitch
$LN2@draw_pitch:
  00a8e	8b 45 e0	 mov	 eax, DWORD PTR _loop$[ebp]
  00a91	83 c0 01	 add	 eax, 1
  00a94	89 45 e0	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@draw_pitch:
  00a97	83 7d e0 07	 cmp	 DWORD PTR _loop$[ebp], 7
  00a9b	0f 8d 8e 0f 00
	00		 jge	 $LN3@draw_pitch

; 10072: 	{
; 10073: 		set_2d_instance_position (mfd_env, x, y);

  00aa1	51		 push	 ecx
  00aa2	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y$[ebp]
  00aa7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aac	51		 push	 ecx
  00aad	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00ab2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ab7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00abc	50		 push	 eax
  00abd	e8 00 00 00 00	 call	 ?set_2d_instance_position@@YGXPAUENV_2D@@MM@Z ; set_2d_instance_position

; 10074: 
; 10075: 		switch (int_pitch)

  00ac2	8b 45 e8	 mov	 eax, DWORD PTR _int_pitch$[ebp]
  00ac5	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv419[ebp], eax
  00acb	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR tv419[ebp]
  00ad1	83 c1 09	 add	 ecx, 9
  00ad4	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv419[ebp], ecx
  00ada	83 bd 44 ff ff
	ff 12		 cmp	 DWORD PTR tv419[ebp], 18 ; 00000012H
  00ae1	0f 87 12 0f 00
	00		 ja	 $LN5@draw_pitch
  00ae7	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR tv419[ebp]
  00aed	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN31@draw_pitch[edx]
  00af4	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN32@draw_pitch[eax*4]
$LN9@draw_pitch:

; 10076: 		{
; 10077: 			////////////////////////////////////////
; 10078: 			case 0:
; 10079: 			////////////////////////////////////////
; 10080: 			{
; 10081: 				set_mono_font_colour (MFD_COLOUR_RED);

  00afb	b8 04 00 00 00	 mov	 eax, 4
  00b00	6b c8 0f	 imul	 ecx, eax, 15
  00b03	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b09	52		 push	 edx
  00b0a	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 10082: 				draw_2d_line (+PITCH_BAR_X7, +PITCH_BAR_Y7, -PITCH_BAR_X7, +PITCH_BAR_Y7, MFD_COLOUR_RED);

  00b0f	b8 04 00 00 00	 mov	 eax, 4
  00b14	6b c8 0f	 imul	 ecx, eax, 15
  00b17	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b1d	52		 push	 edx
  00b1e	0f 57 c0	 xorps	 xmm0, xmm0
  00b21	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00b26	51		 push	 ecx
  00b27	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b2c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  00b34	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00b39	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00b40	51		 push	 ecx
  00b41	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b46	0f 57 c0	 xorps	 xmm0, xmm0
  00b49	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00b4e	51		 push	 ecx
  00b4f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b54	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  00b5c	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00b61	51		 push	 ecx
  00b62	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b67	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10083: 
; 10084: 				break;

  00b6c	e9 88 0e 00 00	 jmp	 $LN5@draw_pitch
$LN10@draw_pitch:

; 10085: 			}
; 10086: 			////////////////////////////////////////
; 10087: 			case 1:
; 10088: 			case 2:
; 10089: 			case 3:
; 10090: 			case 4:
; 10091: 			case 5:
; 10092: 			case 6:
; 10093: 			case 7:
; 10094: 			case 8:
; 10095: 			////////////////////////////////////////
; 10096: 			{
; 10097: 
; 10098: 				set_mono_font_colour (MFD_COLOUR_BLUE);

  00b71	b8 04 00 00 00	 mov	 eax, 4
  00b76	6b c8 0c	 imul	 ecx, eax, 12
  00b79	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b7f	52		 push	 edx
  00b80	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 10099: 
; 10100: 				if (step_direction == -1)

  00b85	83 7d e4 ff	 cmp	 DWORD PTR _step_direction$[ebp], -1
  00b89	0f 85 83 01 00
	00		 jne	 $LN11@draw_pitch

; 10101: 				{
; 10102: 					draw_2d_line (+PITCH_BAR_X1, +PITCH_BAR_Y1, +PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR_BLUE);

  00b8f	b8 04 00 00 00	 mov	 eax, 4
  00b94	6b c8 0c	 imul	 ecx, eax, 12
  00b97	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b9d	52		 push	 edx
  00b9e	0f 57 c0	 xorps	 xmm0, xmm0
  00ba1	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00ba6	51		 push	 ecx
  00ba7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  00bb4	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00bb9	51		 push	 ecx
  00bba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bbf	0f 57 c0	 xorps	 xmm0, xmm0
  00bc2	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00bc7	51		 push	 ecx
  00bc8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bcd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00bd5	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00bda	51		 push	 ecx
  00bdb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00be0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10103: 					draw_2d_line (-PITCH_BAR_X1, +PITCH_BAR_Y1, -PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR_BLUE);

  00be5	b8 04 00 00 00	 mov	 eax, 4
  00bea	6b c8 0c	 imul	 ecx, eax, 12
  00bed	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00bf3	52		 push	 edx
  00bf4	0f 57 c0	 xorps	 xmm0, xmm0
  00bf7	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00bfc	51		 push	 ecx
  00bfd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c02	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  00c0a	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00c0f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00c16	51		 push	 ecx
  00c17	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c1c	0f 57 c0	 xorps	 xmm0, xmm0
  00c1f	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00c24	51		 push	 ecx
  00c25	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c2a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00c32	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00c37	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00c3e	51		 push	 ecx
  00c3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c44	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10104: 
; 10105: 					draw_2d_line (+PITCH_BAR_X6, +PITCH_BAR_Y6, +PITCH_BAR_X8, +PITCH_BAR_Y8, MFD_COLOUR_BLUE);

  00c49	b8 04 00 00 00	 mov	 eax, 4
  00c4e	6b c8 0c	 imul	 ecx, eax, 12
  00c51	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c57	52		 push	 edx
  00c58	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  00c60	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00c65	51		 push	 ecx
  00c66	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c6b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  00c73	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00c78	51		 push	 ecx
  00c79	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c7e	0f 57 c0	 xorps	 xmm0, xmm0
  00c81	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00c86	51		 push	 ecx
  00c87	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c8c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  00c94	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00c99	51		 push	 ecx
  00c9a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c9f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10106: 					draw_2d_line (-PITCH_BAR_X6, +PITCH_BAR_Y6, -PITCH_BAR_X8, +PITCH_BAR_Y8, MFD_COLOUR_BLUE);

  00ca4	b8 04 00 00 00	 mov	 eax, 4
  00ca9	6b c8 0c	 imul	 ecx, eax, 12
  00cac	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00cb2	52		 push	 edx
  00cb3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  00cbb	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00cc0	51		 push	 ecx
  00cc1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cc6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  00cce	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00cd3	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00cda	51		 push	 ecx
  00cdb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ce0	0f 57 c0	 xorps	 xmm0, xmm0
  00ce3	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00ce8	51		 push	 ecx
  00ce9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  00cf6	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00cfb	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00d02	51		 push	 ecx
  00d03	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d08	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10107: 				}
; 10108: 				else

  00d0d	e9 b6 01 00 00	 jmp	 $LN12@draw_pitch
$LN11@draw_pitch:

; 10109: 				{
; 10110: 					draw_2d_line (-PITCH_BAR_X1, -PITCH_BAR_Y1, -PITCH_BAR_X6, -PITCH_BAR_Y6, MFD_COLOUR_BLUE);

  00d12	b8 04 00 00 00	 mov	 eax, 4
  00d17	6b c8 0c	 imul	 ecx, eax, 12
  00d1a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00d20	52		 push	 edx
  00d21	0f 57 c0	 xorps	 xmm0, xmm0
  00d24	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00d29	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00d30	51		 push	 ecx
  00d31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d36	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  00d3e	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00d43	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00d4a	51		 push	 ecx
  00d4b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d50	0f 57 c0	 xorps	 xmm0, xmm0
  00d53	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00d58	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00d5f	51		 push	 ecx
  00d60	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d65	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00d6d	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00d72	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00d79	51		 push	 ecx
  00d7a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d7f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10111: 					draw_2d_line (+PITCH_BAR_X1, -PITCH_BAR_Y1, +PITCH_BAR_X6, -PITCH_BAR_Y6, MFD_COLOUR_BLUE);

  00d84	b8 04 00 00 00	 mov	 eax, 4
  00d89	6b c8 0c	 imul	 ecx, eax, 12
  00d8c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00d92	52		 push	 edx
  00d93	0f 57 c0	 xorps	 xmm0, xmm0
  00d96	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00d9b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00da2	51		 push	 ecx
  00da3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00da8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  00db0	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00db5	51		 push	 ecx
  00db6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dbb	0f 57 c0	 xorps	 xmm0, xmm0
  00dbe	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00dc3	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00dca	51		 push	 ecx
  00dcb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dd0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00dd8	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00ddd	51		 push	 ecx
  00dde	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00de3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10112: 
; 10113: 					draw_2d_line (-PITCH_BAR_X6, -PITCH_BAR_Y6, -PITCH_BAR_X8, -PITCH_BAR_Y8, MFD_COLOUR_BLUE);

  00de8	b8 04 00 00 00	 mov	 eax, 4
  00ded	6b c8 0c	 imul	 ecx, eax, 12
  00df0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00df6	52		 push	 edx
  00df7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  00dff	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e04	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00e0b	51		 push	 ecx
  00e0c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e11	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  00e19	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e1e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00e25	51		 push	 ecx
  00e26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e2b	0f 57 c0	 xorps	 xmm0, xmm0
  00e2e	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e33	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00e3a	51		 push	 ecx
  00e3b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e40	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  00e48	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e4d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00e54	51		 push	 ecx
  00e55	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e5a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10114: 					draw_2d_line (+PITCH_BAR_X6, -PITCH_BAR_Y6, +PITCH_BAR_X8, -PITCH_BAR_Y8, MFD_COLOUR_BLUE);

  00e5f	b8 04 00 00 00	 mov	 eax, 4
  00e64	6b c8 0c	 imul	 ecx, eax, 12
  00e67	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e6d	52		 push	 edx
  00e6e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  00e76	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e7b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00e82	51		 push	 ecx
  00e83	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e88	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  00e90	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00e95	51		 push	 ecx
  00e96	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e9b	0f 57 c0	 xorps	 xmm0, xmm0
  00e9e	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00ea3	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00eaa	51		 push	 ecx
  00eab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eb0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  00eb8	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00ebd	51		 push	 ecx
  00ebe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ec3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN12@draw_pitch:

; 10115: 				}
; 10116: 
; 10117: 				sprintf (s, "%d0", int_pitch);

  00ec8	8b 45 e8	 mov	 eax, DWORD PTR _int_pitch$[ebp]
  00ecb	50		 push	 eax
  00ecc	68 00 00 00 00	 push	 OFFSET ??_C@_03NJMPCKOA@?$CFd0@
  00ed1	8d 4d ec	 lea	 ecx, DWORD PTR _s$[ebp]
  00ed4	51		 push	 ecx
  00ed5	e8 00 00 00 00	 call	 _sprintf
  00eda	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10118: 
; 10119: 				x_adjust = get_mono_font_string_width (s) * -0.5;

  00edd	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  00ee0	50		 push	 eax
  00ee1	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00ee6	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv1531[ebp]
  00eec	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1531[ebp]
  00ef4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00efc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00f00	f3 0f 11 45 88	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10120: 
; 10121: 				set_2d_mono_font_position (+PITCH_BAR_X9, +PITCH_BAR_Y9);

  00f05	0f 57 c0	 xorps	 xmm0, xmm0
  00f08	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f0d	51		 push	 ecx
  00f0e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f13	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0a3d71
  00f1b	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f20	51		 push	 ecx
  00f21	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f26	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10122: 
; 10123: 				set_mono_font_rel_position (x_adjust, y_adjust_above_line);

  00f2b	51		 push	 ecx
  00f2c	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y_adjust_above_line$[ebp]
  00f31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f36	51		 push	 ecx
  00f37	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00f3c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f41	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10124: 
; 10125: 				print_mono_font_string (s);

  00f46	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  00f49	50		 push	 eax
  00f4a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10126: 
; 10127: 				set_2d_mono_font_position (-PITCH_BAR_X9, +PITCH_BAR_Y9);

  00f4f	0f 57 c0	 xorps	 xmm0, xmm0
  00f52	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f57	51		 push	 ecx
  00f58	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f5d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0a3d71
  00f65	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00f6a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00f71	51		 push	 ecx
  00f72	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f77	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10128: 
; 10129: 				set_mono_font_rel_position (x_adjust, y_adjust_above_line);

  00f7c	51		 push	 ecx
  00f7d	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y_adjust_above_line$[ebp]
  00f82	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f87	51		 push	 ecx
  00f88	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00f8d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f92	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10130: 
; 10131: 				print_mono_font_string (s);

  00f97	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  00f9a	50		 push	 eax
  00f9b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10132: 
; 10133: 				break;

  00fa0	e9 54 0a 00 00	 jmp	 $LN5@draw_pitch
$LN13@draw_pitch:

; 10134: 			}
; 10135: 			////////////////////////////////////////
; 10136: 			case 9:
; 10137: 			////////////////////////////////////////
; 10138: 			{
; 10139: 				draw_2d_line (+PITCH_BAR_X1, +PITCH_BAR_Y1, +PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR_BLUE);

  00fa5	b8 04 00 00 00	 mov	 eax, 4
  00faa	6b c8 0c	 imul	 ecx, eax, 12
  00fad	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00fb3	52		 push	 edx
  00fb4	0f 57 c0	 xorps	 xmm0, xmm0
  00fb7	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00fbc	51		 push	 ecx
  00fbd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fc2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  00fca	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00fcf	51		 push	 ecx
  00fd0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fd5	0f 57 c0	 xorps	 xmm0, xmm0
  00fd8	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00fdd	51		 push	 ecx
  00fde	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fe3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00feb	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  00ff0	51		 push	 ecx
  00ff1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ff6	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10140: 				draw_2d_line (-PITCH_BAR_X1, +PITCH_BAR_Y1, -PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR_BLUE);

  00ffb	b8 04 00 00 00	 mov	 eax, 4
  01000	6b c8 0c	 imul	 ecx, eax, 12
  01003	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01009	52		 push	 edx
  0100a	0f 57 c0	 xorps	 xmm0, xmm0
  0100d	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01012	51		 push	 ecx
  01013	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01018	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  01020	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01025	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0102c	51		 push	 ecx
  0102d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01032	0f 57 c0	 xorps	 xmm0, xmm0
  01035	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0103a	51		 push	 ecx
  0103b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01040	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  01048	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0104d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01054	51		 push	 ecx
  01055	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0105a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10141: 
; 10142: 				break;

  0105f	e9 95 09 00 00	 jmp	 $LN5@draw_pitch
$LN14@draw_pitch:

; 10143: 			}
; 10144: 			////////////////////////////////////////
; 10145: 			case -1:
; 10146: 			case -2:
; 10147: 			case -3:
; 10148: 			case -4:
; 10149: 			case -5:
; 10150: 			case -6:
; 10151: 			case -7:
; 10152: 			case -8:
; 10153: 			////////////////////////////////////////
; 10154: 			{
; 10155: 				set_mono_font_colour (MFD_COLOUR_RED);

  01064	b8 04 00 00 00	 mov	 eax, 4
  01069	6b c8 0f	 imul	 ecx, eax, 15
  0106c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01072	52		 push	 edx
  01073	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 10156: 				if (step_direction == -1)

  01078	83 7d e4 ff	 cmp	 DWORD PTR _step_direction$[ebp], -1
  0107c	0f 85 05 03 00
	00		 jne	 $LN15@draw_pitch

; 10157: 				{
; 10158: 					draw_2d_line (+PITCH_BAR_X1, +PITCH_BAR_Y1, +PITCH_BAR_X2, +PITCH_BAR_Y2, MFD_COLOUR_RED);

  01082	b8 04 00 00 00	 mov	 eax, 4
  01087	6b c8 0f	 imul	 ecx, eax, 15
  0108a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01090	52		 push	 edx
  01091	0f 57 c0	 xorps	 xmm0, xmm0
  01094	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01099	51		 push	 ecx
  0109a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0109f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e3851ec
  010a7	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  010ac	51		 push	 ecx
  010ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010b2	0f 57 c0	 xorps	 xmm0, xmm0
  010b5	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  010ba	51		 push	 ecx
  010bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  010c8	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  010cd	51		 push	 ecx
  010ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010d3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10159: 					draw_2d_line (-PITCH_BAR_X1, +PITCH_BAR_Y1, -PITCH_BAR_X2, +PITCH_BAR_Y2, MFD_COLOUR_RED);

  010d8	b8 04 00 00 00	 mov	 eax, 4
  010dd	6b c8 0f	 imul	 ecx, eax, 15
  010e0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  010e6	52		 push	 edx
  010e7	0f 57 c0	 xorps	 xmm0, xmm0
  010ea	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  010ef	51		 push	 ecx
  010f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e3851ec
  010fd	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01102	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01109	51		 push	 ecx
  0110a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0110f	0f 57 c0	 xorps	 xmm0, xmm0
  01112	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01117	51		 push	 ecx
  01118	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0111d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  01125	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0112a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01131	51		 push	 ecx
  01132	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01137	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10160: 
; 10161: 					draw_2d_line (+PITCH_BAR_X3, +PITCH_BAR_Y3, +PITCH_BAR_X4, +PITCH_BAR_Y4, MFD_COLOUR_RED);

  0113c	b8 04 00 00 00	 mov	 eax, 4
  01141	6b c8 0f	 imul	 ecx, eax, 15
  01144	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0114a	52		 push	 edx
  0114b	0f 57 c0	 xorps	 xmm0, xmm0
  0114e	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01153	51		 push	 ecx
  01154	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01159	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  01161	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01166	51		 push	 ecx
  01167	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0116c	0f 57 c0	 xorps	 xmm0, xmm0
  0116f	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01174	51		 push	 ecx
  01175	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0117a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  01182	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01187	51		 push	 ecx
  01188	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0118d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10162: 					draw_2d_line (-PITCH_BAR_X3, +PITCH_BAR_Y3, -PITCH_BAR_X4, +PITCH_BAR_Y4, MFD_COLOUR_RED);

  01192	b8 04 00 00 00	 mov	 eax, 4
  01197	6b c8 0f	 imul	 ecx, eax, 15
  0119a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  011a0	52		 push	 edx
  011a1	0f 57 c0	 xorps	 xmm0, xmm0
  011a4	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  011a9	51		 push	 ecx
  011aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  011b7	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  011bc	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  011c3	51		 push	 ecx
  011c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011c9	0f 57 c0	 xorps	 xmm0, xmm0
  011cc	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  011d1	51		 push	 ecx
  011d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  011df	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  011e4	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  011eb	51		 push	 ecx
  011ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011f1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10163: 
; 10164: 					draw_2d_line (+PITCH_BAR_X5, +PITCH_BAR_Y5, +PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR_RED);

  011f6	b8 04 00 00 00	 mov	 eax, 4
  011fb	6b c8 0f	 imul	 ecx, eax, 15
  011fe	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01204	52		 push	 edx
  01205	0f 57 c0	 xorps	 xmm0, xmm0
  01208	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0120d	51		 push	 ecx
  0120e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01213	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  0121b	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01220	51		 push	 ecx
  01221	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01226	0f 57 c0	 xorps	 xmm0, xmm0
  01229	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0122e	51		 push	 ecx
  0122f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01234	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eae147b
  0123c	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01241	51		 push	 ecx
  01242	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01247	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10165: 					draw_2d_line (-PITCH_BAR_X5, +PITCH_BAR_Y5, -PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR_RED);

  0124c	b8 04 00 00 00	 mov	 eax, 4
  01251	6b c8 0f	 imul	 ecx, eax, 15
  01254	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0125a	52		 push	 edx
  0125b	0f 57 c0	 xorps	 xmm0, xmm0
  0125e	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01263	51		 push	 ecx
  01264	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01269	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  01271	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01276	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0127d	51		 push	 ecx
  0127e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01283	0f 57 c0	 xorps	 xmm0, xmm0
  01286	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0128b	51		 push	 ecx
  0128c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01291	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eae147b
  01299	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0129e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  012a5	51		 push	 ecx
  012a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012ab	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10166: 
; 10167: 					draw_2d_line (+PITCH_BAR_X6, +PITCH_BAR_Y6, +PITCH_BAR_X8, -PITCH_BAR_Y8, MFD_COLOUR_RED);

  012b0	b8 04 00 00 00	 mov	 eax, 4
  012b5	6b c8 0f	 imul	 ecx, eax, 15
  012b8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  012be	52		 push	 edx
  012bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  012c7	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  012cc	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  012d3	51		 push	 ecx
  012d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  012e1	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  012e6	51		 push	 ecx
  012e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012ec	0f 57 c0	 xorps	 xmm0, xmm0
  012ef	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  012f4	51		 push	 ecx
  012f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  01302	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01307	51		 push	 ecx
  01308	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0130d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10168: 					draw_2d_line (-PITCH_BAR_X6, +PITCH_BAR_Y6, -PITCH_BAR_X8, -PITCH_BAR_Y8, MFD_COLOUR_RED);

  01312	b8 04 00 00 00	 mov	 eax, 4
  01317	6b c8 0f	 imul	 ecx, eax, 15
  0131a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01320	52		 push	 edx
  01321	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  01329	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0132e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01335	51		 push	 ecx
  01336	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0133b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  01343	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01348	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0134f	51		 push	 ecx
  01350	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01355	0f 57 c0	 xorps	 xmm0, xmm0
  01358	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0135d	51		 push	 ecx
  0135e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01363	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  0136b	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01370	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01377	51		 push	 ecx
  01378	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0137d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10169: 				}
; 10170: 				else

  01382	e9 54 03 00 00	 jmp	 $LN16@draw_pitch
$LN15@draw_pitch:

; 10171: 				{
; 10172: 					draw_2d_line (-PITCH_BAR_X1, -PITCH_BAR_Y1, -PITCH_BAR_X2, -PITCH_BAR_Y2, MFD_COLOUR_RED);

  01387	b8 04 00 00 00	 mov	 eax, 4
  0138c	6b c8 0f	 imul	 ecx, eax, 15
  0138f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01395	52		 push	 edx
  01396	0f 57 c0	 xorps	 xmm0, xmm0
  01399	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0139e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  013a5	51		 push	 ecx
  013a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e3851ec
  013b3	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  013b8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  013bf	51		 push	 ecx
  013c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013c5	0f 57 c0	 xorps	 xmm0, xmm0
  013c8	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  013cd	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  013d4	51		 push	 ecx
  013d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  013e2	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  013e7	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  013ee	51		 push	 ecx
  013ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013f4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10173: 					draw_2d_line (+PITCH_BAR_X1, -PITCH_BAR_Y1, +PITCH_BAR_X2, -PITCH_BAR_Y2, MFD_COLOUR_RED);

  013f9	b8 04 00 00 00	 mov	 eax, 4
  013fe	6b c8 0f	 imul	 ecx, eax, 15
  01401	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01407	52		 push	 edx
  01408	0f 57 c0	 xorps	 xmm0, xmm0
  0140b	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01410	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01417	51		 push	 ecx
  01418	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0141d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e3851ec
  01425	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0142a	51		 push	 ecx
  0142b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01430	0f 57 c0	 xorps	 xmm0, xmm0
  01433	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01438	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0143f	51		 push	 ecx
  01440	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01445	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0144d	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01452	51		 push	 ecx
  01453	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01458	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10174: 
; 10175: 					draw_2d_line (-PITCH_BAR_X3, -PITCH_BAR_Y3, -PITCH_BAR_X4, -PITCH_BAR_Y4, MFD_COLOUR_RED);

  0145d	b8 04 00 00 00	 mov	 eax, 4
  01462	6b c8 0f	 imul	 ecx, eax, 15
  01465	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0146b	52		 push	 edx
  0146c	0f 57 c0	 xorps	 xmm0, xmm0
  0146f	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01474	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0147b	51		 push	 ecx
  0147c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01481	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  01489	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0148e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01495	51		 push	 ecx
  01496	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0149b	0f 57 c0	 xorps	 xmm0, xmm0
  0149e	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  014a3	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  014aa	51		 push	 ecx
  014ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  014b8	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  014bd	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  014c4	51		 push	 ecx
  014c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014ca	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10176: 					draw_2d_line (+PITCH_BAR_X3, -PITCH_BAR_Y3, +PITCH_BAR_X4, -PITCH_BAR_Y4, MFD_COLOUR_RED);

  014cf	b8 04 00 00 00	 mov	 eax, 4
  014d4	6b c8 0f	 imul	 ecx, eax, 15
  014d7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  014dd	52		 push	 edx
  014de	0f 57 c0	 xorps	 xmm0, xmm0
  014e1	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  014e6	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  014ed	51		 push	 ecx
  014ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  014fb	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01500	51		 push	 ecx
  01501	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01506	0f 57 c0	 xorps	 xmm0, xmm0
  01509	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0150e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01515	51		 push	 ecx
  01516	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0151b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  01523	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01528	51		 push	 ecx
  01529	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0152e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10177: 
; 10178: 					draw_2d_line (-PITCH_BAR_X5, -PITCH_BAR_Y5, -PITCH_BAR_X6, -PITCH_BAR_Y6, MFD_COLOUR_RED);

  01533	b8 04 00 00 00	 mov	 eax, 4
  01538	6b c8 0f	 imul	 ecx, eax, 15
  0153b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01541	52		 push	 edx
  01542	0f 57 c0	 xorps	 xmm0, xmm0
  01545	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0154a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01551	51		 push	 ecx
  01552	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01557	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  0155f	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01564	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0156b	51		 push	 ecx
  0156c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01571	0f 57 c0	 xorps	 xmm0, xmm0
  01574	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01579	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01580	51		 push	 ecx
  01581	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01586	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eae147b
  0158e	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01593	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0159a	51		 push	 ecx
  0159b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015a0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10179: 					draw_2d_line (+PITCH_BAR_X5, -PITCH_BAR_Y5, +PITCH_BAR_X6, -PITCH_BAR_Y6, MFD_COLOUR_RED);

  015a5	b8 04 00 00 00	 mov	 eax, 4
  015aa	6b c8 0f	 imul	 ecx, eax, 15
  015ad	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  015b3	52		 push	 edx
  015b4	0f 57 c0	 xorps	 xmm0, xmm0
  015b7	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  015bc	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  015c3	51		 push	 ecx
  015c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  015d1	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  015d6	51		 push	 ecx
  015d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015dc	0f 57 c0	 xorps	 xmm0, xmm0
  015df	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  015e4	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  015eb	51		 push	 ecx
  015ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eae147b
  015f9	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  015fe	51		 push	 ecx
  015ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01604	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10180: 
; 10181: 					draw_2d_line (-PITCH_BAR_X6, -PITCH_BAR_Y6, -PITCH_BAR_X8, +PITCH_BAR_Y8, MFD_COLOUR_RED);

  01609	b8 04 00 00 00	 mov	 eax, 4
  0160e	6b c8 0f	 imul	 ecx, eax, 15
  01611	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01617	52		 push	 edx
  01618	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  01620	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01625	51		 push	 ecx
  01626	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0162b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  01633	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01638	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0163f	51		 push	 ecx
  01640	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01645	0f 57 c0	 xorps	 xmm0, xmm0
  01648	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0164d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01654	51		 push	 ecx
  01655	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0165a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  01662	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01667	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0166e	51		 push	 ecx
  0166f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01674	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10182: 					draw_2d_line (+PITCH_BAR_X6, -PITCH_BAR_Y6, +PITCH_BAR_X8, +PITCH_BAR_Y8, MFD_COLOUR_RED);

  01679	b8 04 00 00 00	 mov	 eax, 4
  0167e	6b c8 0f	 imul	 ecx, eax, 15
  01681	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01687	52		 push	 edx
  01688	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  01690	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01695	51		 push	 ecx
  01696	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0169b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  016a3	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  016a8	51		 push	 ecx
  016a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016ae	0f 57 c0	 xorps	 xmm0, xmm0
  016b1	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  016b6	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  016bd	51		 push	 ecx
  016be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  016cb	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  016d0	51		 push	 ecx
  016d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016d6	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN16@draw_pitch:

; 10183: 				}
; 10184: 
; 10185: 				sprintf (s, "%d0", abs(int_pitch));

  016db	8b 45 e8	 mov	 eax, DWORD PTR _int_pitch$[ebp]
  016de	50		 push	 eax
  016df	e8 00 00 00 00	 call	 _abs
  016e4	83 c4 04	 add	 esp, 4
  016e7	50		 push	 eax
  016e8	68 00 00 00 00	 push	 OFFSET ??_C@_03NJMPCKOA@?$CFd0@
  016ed	8d 4d ec	 lea	 ecx, DWORD PTR _s$[ebp]
  016f0	51		 push	 ecx
  016f1	e8 00 00 00 00	 call	 _sprintf
  016f6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10186: 
; 10187: 				x_adjust = get_mono_font_string_width (s) * -0.5;

  016f9	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  016fc	50		 push	 eax
  016fd	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01702	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv1740[ebp]
  01708	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1740[ebp]
  01710	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01718	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0171c	f3 0f 11 45 88	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 10188: 
; 10189: 				set_2d_mono_font_position (+PITCH_BAR_X10, +PITCH_BAR_Y10);

  01721	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@80000000
  01729	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0172e	51		 push	 ecx
  0172f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01734	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0a3d71
  0173c	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01741	51		 push	 ecx
  01742	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01747	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10190: 
; 10191: 				set_mono_font_rel_position (x_adjust, y_adjust_below_line);

  0174c	51		 push	 ecx
  0174d	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _y_adjust_below_line$[ebp]
  01752	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01757	51		 push	 ecx
  01758	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0175d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01762	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10192: 
; 10193: 				print_mono_font_string (s);

  01767	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  0176a	50		 push	 eax
  0176b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10194: 
; 10195: 				set_2d_mono_font_position (-PITCH_BAR_X10, +PITCH_BAR_Y10);

  01770	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@80000000
  01778	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0177d	51		 push	 ecx
  0177e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01783	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0a3d71
  0178b	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01790	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01797	51		 push	 ecx
  01798	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0179d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10196: 
; 10197: 				set_mono_font_rel_position (x_adjust, y_adjust_below_line);

  017a2	51		 push	 ecx
  017a3	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _y_adjust_below_line$[ebp]
  017a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017ad	51		 push	 ecx
  017ae	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  017b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017b8	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10198: 
; 10199: 				print_mono_font_string (s);

  017bd	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  017c0	50		 push	 eax
  017c1	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10200: 
; 10201: 				break;

  017c6	e9 2e 02 00 00	 jmp	 $LN5@draw_pitch
$LN17@draw_pitch:

; 10202: 			}
; 10203: 			////////////////////////////////////////
; 10204: 			case -9:
; 10205: 			////////////////////////////////////////
; 10206: 			{
; 10207: 				draw_2d_line (+PITCH_BAR_X1, +PITCH_BAR_Y1, +PITCH_BAR_X2, +PITCH_BAR_Y2, MFD_COLOUR_RED);

  017cb	b8 04 00 00 00	 mov	 eax, 4
  017d0	6b c8 0f	 imul	 ecx, eax, 15
  017d3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  017d9	52		 push	 edx
  017da	0f 57 c0	 xorps	 xmm0, xmm0
  017dd	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  017e2	51		 push	 ecx
  017e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e3851ec
  017f0	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  017f5	51		 push	 ecx
  017f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017fb	0f 57 c0	 xorps	 xmm0, xmm0
  017fe	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01803	51		 push	 ecx
  01804	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01809	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  01811	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01816	51		 push	 ecx
  01817	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0181c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10208: 				draw_2d_line (-PITCH_BAR_X1, +PITCH_BAR_Y1, -PITCH_BAR_X2, +PITCH_BAR_Y2, MFD_COLOUR_RED);

  01821	b8 04 00 00 00	 mov	 eax, 4
  01826	6b c8 0f	 imul	 ecx, eax, 15
  01829	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0182f	52		 push	 edx
  01830	0f 57 c0	 xorps	 xmm0, xmm0
  01833	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01838	51		 push	 ecx
  01839	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0183e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e3851ec
  01846	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0184b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01852	51		 push	 ecx
  01853	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01858	0f 57 c0	 xorps	 xmm0, xmm0
  0185b	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01860	51		 push	 ecx
  01861	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01866	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0186e	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01873	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0187a	51		 push	 ecx
  0187b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01880	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10209: 
; 10210: 				draw_2d_line (+PITCH_BAR_X3, +PITCH_BAR_Y3, +PITCH_BAR_X4, +PITCH_BAR_Y4, MFD_COLOUR_RED);

  01885	b8 04 00 00 00	 mov	 eax, 4
  0188a	6b c8 0f	 imul	 ecx, eax, 15
  0188d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01893	52		 push	 edx
  01894	0f 57 c0	 xorps	 xmm0, xmm0
  01897	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0189c	51		 push	 ecx
  0189d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  018aa	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  018af	51		 push	 ecx
  018b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018b5	0f 57 c0	 xorps	 xmm0, xmm0
  018b8	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  018bd	51		 push	 ecx
  018be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  018cb	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  018d0	51		 push	 ecx
  018d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018d6	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10211: 				draw_2d_line (-PITCH_BAR_X3, +PITCH_BAR_Y3, -PITCH_BAR_X4, +PITCH_BAR_Y4, MFD_COLOUR_RED);

  018db	b8 04 00 00 00	 mov	 eax, 4
  018e0	6b c8 0f	 imul	 ecx, eax, 15
  018e3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  018e9	52		 push	 edx
  018ea	0f 57 c0	 xorps	 xmm0, xmm0
  018ed	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  018f2	51		 push	 ecx
  018f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  01900	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01905	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0190c	51		 push	 ecx
  0190d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01912	0f 57 c0	 xorps	 xmm0, xmm0
  01915	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0191a	51		 push	 ecx
  0191b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01920	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  01928	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0192d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01934	51		 push	 ecx
  01935	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0193a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10212: 
; 10213: 				draw_2d_line (+PITCH_BAR_X5, +PITCH_BAR_Y5, +PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR_RED);

  0193f	b8 04 00 00 00	 mov	 eax, 4
  01944	6b c8 0f	 imul	 ecx, eax, 15
  01947	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0194d	52		 push	 edx
  0194e	0f 57 c0	 xorps	 xmm0, xmm0
  01951	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01956	51		 push	 ecx
  01957	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0195c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  01964	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01969	51		 push	 ecx
  0196a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0196f	0f 57 c0	 xorps	 xmm0, xmm0
  01972	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  01977	51		 push	 ecx
  01978	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0197d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eae147b
  01985	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  0198a	51		 push	 ecx
  0198b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01990	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10214: 				draw_2d_line (-PITCH_BAR_X5, +PITCH_BAR_Y5, -PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR_RED);

  01995	b8 04 00 00 00	 mov	 eax, 4
  0199a	6b c8 0f	 imul	 ecx, eax, 15
  0199d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  019a3	52		 push	 edx
  019a4	0f 57 c0	 xorps	 xmm0, xmm0
  019a7	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  019ac	51		 push	 ecx
  019ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  019ba	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  019bf	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  019c6	51		 push	 ecx
  019c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019cc	0f 57 c0	 xorps	 xmm0, xmm0
  019cf	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  019d4	51		 push	 ecx
  019d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eae147b
  019e2	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _pitch_bar_scale$[ebp]
  019e7	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  019ee	51		 push	 ecx
  019ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019f4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN5@draw_pitch:

; 10215: 
; 10216: 				break;
; 10217: 			}
; 10218: 		}
; 10219: 
; 10220: 		int_pitch = limit_pitch (int_pitch + step_direction, &step_direction);

  019f9	8d 45 e4	 lea	 eax, DWORD PTR _step_direction$[ebp]
  019fc	50		 push	 eax
  019fd	8b 4d e8	 mov	 ecx, DWORD PTR _int_pitch$[ebp]
  01a00	03 4d e4	 add	 ecx, DWORD PTR _step_direction$[ebp]
  01a03	51		 push	 ecx
  01a04	e8 00 00 00 00	 call	 ?limit_pitch@@YGHHPAH@Z	; limit_pitch
  01a09	89 45 e8	 mov	 DWORD PTR _int_pitch$[ebp], eax

; 10221: 
; 10222: 		x -= x_10_deg_step;

  01a0c	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x$[ebp]
  01a11	f3 0f 5c 45 90	 subss	 xmm0, DWORD PTR _x_10_deg_step$[ebp]
  01a16	f3 0f 11 45 a8	 movss	 DWORD PTR _x$[ebp], xmm0

; 10223: 		y -= y_10_deg_step;

  01a1b	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y$[ebp]
  01a20	f3 0f 5c 45 8c	 subss	 xmm0, DWORD PTR _y_10_deg_step$[ebp]
  01a25	f3 0f 11 45 a4	 movss	 DWORD PTR _y$[ebp], xmm0

; 10224: 	}

  01a2a	e9 5f f0 ff ff	 jmp	 $LN2@draw_pitch
$LN3@draw_pitch:

; 10225: 
; 10226: 	//
; 10227: 	// restore 2D environment
; 10228: 	//
; 10229: 
; 10230: 	set_mono_font_colour (MFD_COLOUR1);

  01a2f	b8 04 00 00 00	 mov	 eax, 4
  01a34	6b c8 00	 imul	 ecx, eax, 0
  01a37	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a3d	52		 push	 edx
  01a3e	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 10231: 
; 10232: 	reset_2d_instance (mfd_env);

  01a43	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01a48	50		 push	 eax
  01a49	e8 00 00 00 00	 call	 ?reset_2d_instance@@YGXPAUENV_2D@@@Z ; reset_2d_instance

; 10233: 
; 10234: 	// centre datum
; 10235: 	
; 10236: 	draw_2d_line (-0.25, 0.0, -0.08, 0.0, MFD_COLOUR_CYAN);

  01a4e	b8 04 00 00 00	 mov	 eax, 4
  01a53	c1 e0 04	 shl	 eax, 4
  01a56	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  01a5c	51		 push	 ecx
  01a5d	51		 push	 ecx
  01a5e	0f 57 c0	 xorps	 xmm0, xmm0
  01a61	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a66	51		 push	 ecx
  01a67	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  01a6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a74	51		 push	 ecx
  01a75	0f 57 c0	 xorps	 xmm0, xmm0
  01a78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a7d	51		 push	 ecx
  01a7e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  01a86	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a8b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10237: 	draw_2d_line ( 0.25, 0.0,  0.08, 0.0, MFD_COLOUR_CYAN);

  01a90	b8 04 00 00 00	 mov	 eax, 4
  01a95	c1 e0 04	 shl	 eax, 4
  01a98	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  01a9e	51		 push	 ecx
  01a9f	51		 push	 ecx
  01aa0	0f 57 c0	 xorps	 xmm0, xmm0
  01aa3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aa8	51		 push	 ecx
  01aa9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  01ab1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ab6	51		 push	 ecx
  01ab7	0f 57 c0	 xorps	 xmm0, xmm0
  01aba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01abf	51		 push	 ecx
  01ac0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  01ac8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01acd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10238: 
; 10239: 	draw_2d_line (-0.08, 0.0, -0.04, -0.08, MFD_COLOUR_CYAN);

  01ad2	b8 04 00 00 00	 mov	 eax, 4
  01ad7	c1 e0 04	 shl	 eax, 4
  01ada	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  01ae0	51		 push	 ecx
  01ae1	51		 push	 ecx
  01ae2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  01aea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aef	51		 push	 ecx
  01af0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  01af8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01afd	51		 push	 ecx
  01afe	0f 57 c0	 xorps	 xmm0, xmm0
  01b01	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b06	51		 push	 ecx
  01b07	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  01b0f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b14	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10240: 	draw_2d_line ( 0.08, 0.0,  0.04, -0.08, MFD_COLOUR_CYAN);

  01b19	b8 04 00 00 00	 mov	 eax, 4
  01b1e	c1 e0 04	 shl	 eax, 4
  01b21	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  01b27	51		 push	 ecx
  01b28	51		 push	 ecx
  01b29	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  01b31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b36	51		 push	 ecx
  01b37	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  01b3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b44	51		 push	 ecx
  01b45	0f 57 c0	 xorps	 xmm0, xmm0
  01b48	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b4d	51		 push	 ecx
  01b4e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  01b56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b5b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10241: 
; 10242: 	draw_2d_line (0.0, 0.0, -0.04, -0.08, MFD_COLOUR_CYAN);

  01b60	b8 04 00 00 00	 mov	 eax, 4
  01b65	c1 e0 04	 shl	 eax, 4
  01b68	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  01b6e	51		 push	 ecx
  01b6f	51		 push	 ecx
  01b70	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  01b78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b7d	51		 push	 ecx
  01b7e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  01b86	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b8b	51		 push	 ecx
  01b8c	0f 57 c0	 xorps	 xmm0, xmm0
  01b8f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b94	51		 push	 ecx
  01b95	0f 57 c0	 xorps	 xmm0, xmm0
  01b98	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b9d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10243: 	draw_2d_line (0.0, 0.0,  0.04, -0.08, MFD_COLOUR_CYAN);

  01ba2	b8 04 00 00 00	 mov	 eax, 4
  01ba7	c1 e0 04	 shl	 eax, 4
  01baa	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  01bb0	51		 push	 ecx
  01bb1	51		 push	 ecx
  01bb2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  01bba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bbf	51		 push	 ecx
  01bc0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  01bc8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bcd	51		 push	 ecx
  01bce	0f 57 c0	 xorps	 xmm0, xmm0
  01bd1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bd6	51		 push	 ecx
  01bd7	0f 57 c0	 xorps	 xmm0, xmm0
  01bda	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bdf	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 10244: 
; 10245: 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  01be4	51		 push	 ecx
  01be5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  01bed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bf2	51		 push	 ecx
  01bf3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  01bfb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c00	51		 push	 ecx
  01c01	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  01c09	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c0e	51		 push	 ecx
  01c0f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  01c17	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c1c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01c21	50		 push	 eax
  01c22	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 10246: 
; 10247: 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  01c27	51		 push	 ecx
  01c28	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  01c30	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c35	51		 push	 ecx
  01c36	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  01c3e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c43	51		 push	 ecx
  01c44	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  01c4c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c51	51		 push	 ecx
  01c52	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  01c5a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c5f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01c64	50		 push	 eax
  01c65	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 10248: }

  01c6a	5f		 pop	 edi
  01c6b	5e		 pop	 esi
  01c6c	5b		 pop	 ebx
  01c6d	8b e5		 mov	 esp, ebp
  01c6f	5d		 pop	 ebp
  01c70	c3		 ret	 0
  01c71	0f 1f 00	 npad	 3
$LN32@draw_pitch:
  01c74	00 00 00 00	 DD	 $LN17@draw_pitch
  01c78	00 00 00 00	 DD	 $LN14@draw_pitch
  01c7c	00 00 00 00	 DD	 $LN9@draw_pitch
  01c80	00 00 00 00	 DD	 $LN10@draw_pitch
  01c84	00 00 00 00	 DD	 $LN13@draw_pitch
$LN31@draw_pitch:
  01c88	00		 DB	 0
  01c89	01		 DB	 1
  01c8a	01		 DB	 1
  01c8b	01		 DB	 1
  01c8c	01		 DB	 1
  01c8d	01		 DB	 1
  01c8e	01		 DB	 1
  01c8f	01		 DB	 1
  01c90	01		 DB	 1
  01c91	02		 DB	 2
  01c92	03		 DB	 3
  01c93	03		 DB	 3
  01c94	03		 DB	 3
  01c95	03		 DB	 3
  01c96	03		 DB	 3
  01c97	03		 DB	 3
  01c98	03		 DB	 3
  01c99	03		 DB	 3
  01c9a	04		 DB	 4
?draw_pitch_ladder@@YGXXZ ENDP				; draw_pitch_ladder
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?limit_pitch@@YGHHPAH@Z
_TEXT	SEGMENT
_pitch$ = 8						; size = 4
_step_direction$ = 12					; size = 4
?limit_pitch@@YGHHPAH@Z PROC				; limit_pitch, COMDAT

; 9894 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 9895 : 	if (pitch > 9)

  00009	83 7d 08 09	 cmp	 DWORD PTR _pitch$[ebp], 9
  0000d	7e 1f		 jle	 SHORT $LN2@limit_pitc

; 9896 : 	{
; 9897 : 		pitch -= 18;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  00012	83 e8 12	 sub	 eax, 18			; 00000012H
  00015	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 9898 : 
; 9899 : 		pitch = -pitch;

  00018	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  0001b	f7 d8		 neg	 eax
  0001d	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 9900 : 
; 9901 : 		*step_direction = -(*step_direction);

  00020	8b 45 0c	 mov	 eax, DWORD PTR _step_direction$[ebp]
  00023	8b 08		 mov	 ecx, DWORD PTR [eax]
  00025	f7 d9		 neg	 ecx
  00027	8b 55 0c	 mov	 edx, DWORD PTR _step_direction$[ebp]
  0002a	89 0a		 mov	 DWORD PTR [edx], ecx
  0002c	eb 23		 jmp	 SHORT $LN3@limit_pitc
$LN2@limit_pitc:

; 9902 : 	}
; 9903 : 	else if (pitch < -9)

  0002e	83 7d 08 f7	 cmp	 DWORD PTR _pitch$[ebp], -9 ; fffffff7H
  00032	7d 1d		 jge	 SHORT $LN3@limit_pitc

; 9904 : 	{
; 9905 : 		pitch += 18;

  00034	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  00037	83 c0 12	 add	 eax, 18			; 00000012H
  0003a	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 9906 : 
; 9907 : 		pitch = -pitch;

  0003d	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  00040	f7 d8		 neg	 eax
  00042	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 9908 : 
; 9909 : 		*step_direction = -(*step_direction);

  00045	8b 45 0c	 mov	 eax, DWORD PTR _step_direction$[ebp]
  00048	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004a	f7 d9		 neg	 ecx
  0004c	8b 55 0c	 mov	 edx, DWORD PTR _step_direction$[ebp]
  0004f	89 0a		 mov	 DWORD PTR [edx], ecx
$LN3@limit_pitc:

; 9910 : 	}
; 9911 : 
; 9912 : 	return (pitch);

  00051	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]

; 9913 : }

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 08 00	 ret	 8
?limit_pitch@@YGHHPAH@Z ENDP				; limit_pitch
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_engine_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv2213 = -204						; size = 8
tv2160 = -204						; size = 8
tv2127 = -204						; size = 8
tv1895 = -204						; size = 8
tv1656 = -204						; size = 8
tv1614 = -204						; size = 8
tv1402 = -204						; size = 8
tv1189 = -204						; size = 8
tv976 = -204						; size = 8
tv776 = -204						; size = 8
tv743 = -204						; size = 8
tv558 = -204						; size = 8
tv525 = -204						; size = 8
tv319 = -204						; size = 8
tv89 = -204						; size = 8
tv3848 = -196						; size = 8
tv2214 = -196						; size = 8
tv2161 = -196						; size = 8
tv2128 = -196						; size = 8
tv1896 = -196						; size = 8
tv1657 = -196						; size = 8
tv1615 = -196						; size = 8
tv1403 = -196						; size = 8
tv1190 = -196						; size = 8
tv977 = -196						; size = 8
tv777 = -196						; size = 8
tv744 = -196						; size = 8
tv559 = -196						; size = 8
tv526 = -196						; size = 8
tv320 = -196						; size = 8
tv90 = -196						; size = 8
_digital_readout$ = -124				; size = 4
_x_adjust$ = -120					; size = 4
_bar_value$ = -116					; size = 4
_y3$ = -112						; size = 4
_y2$ = -108						; size = 4
_y1$ = -104						; size = 4
_x1$ = -100						; size = 4
_i$ = -96						; size = 4
_buffer2$ = -92						; size = 10
_buffer$ = -80						; size = 80
?draw_engine_display_mfd@@YGXXZ PROC			; draw_engine_display_mfd, COMDAT

; 8698 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 8699 : 	char
; 8700 : 		buffer[80], buffer2[10];
; 8701 : 
; 8702 : 	int
; 8703 : 		i;
; 8704 : 
; 8705 : 	float
; 8706 : 		x1,
; 8707 : 		y1,
; 8708 : 		y2,
; 8709 : 		y3,
; 8710 : 		bar_value,
; 8711 : 		x_adjust,
; 8712 : 		digital_readout;
; 8713 : 
; 8714 : 
; 8715 : 	set_mono_font_colour (MFD_COLOUR1);

  0000c	b8 04 00 00 00	 mov	 eax, 4
  00011	6b c8 00	 imul	 ecx, eax, 0
  00014	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8716 : 
; 8717 : 	if (draw_large_mfd)

  00020	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00027	74 09		 je	 SHORT $LN2@draw_engin

; 8718 : 	{
; 8719 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  00029	6a 05		 push	 5
  0002b	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 8720 : 	}
; 8721 : 	else

  00030	eb 07		 jmp	 SHORT $LN3@draw_engin
$LN2@draw_engin:

; 8722 : 	{
; 8723 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  00032	6a 00		 push	 0
  00034	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN3@draw_engin:

; 8724 : 	}
; 8725 : 
; 8726 : 	////////////////////////////////////////
; 8727 : 	//
; 8728 : 	// engine torque
; 8729 : 	//
; 8730 : 	////////////////////////////////////////
; 8731 : 
; 8732 : 	set_2d_mono_font_position (-0.85, 0.85);

  00039	51		 push	 ecx
  0003a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00042	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00047	51		 push	 ecx
  00048	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  00050	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00055	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8733 : 
; 8734 : 	if (draw_large_mfd)

  0005a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00061	74 23		 je	 SHORT $LN4@draw_engin

; 8735 : 	{
; 8736 : 		set_mono_font_rel_position (-6.0, -16.0);

  00063	51		 push	 ecx
  00064	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1800000
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	51		 push	 ecx
  00072	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  0007a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8737 : 	}
; 8738 : 	else

  00084	eb 21		 jmp	 SHORT $LN5@draw_engin
$LN4@draw_engin:

; 8739 : 	{
; 8740 : 		set_mono_font_rel_position (-4.0, -7.0);

  00086	51		 push	 ecx
  00087	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0e00000
  0008f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00094	51		 push	 ecx
  00095	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  0009d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN5@draw_engin:

; 8741 : 	}
; 8742 : 
; 8743 : 	print_mono_font_string ("TORQUE");

  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_06JNBMPGOL@TORQUE@
  000ac	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8744 : 
; 8745 : 	//
; 8746 : 	// engine 1 torque
; 8747 : 	//
; 8748 : 
; 8749 : 	digital_readout = bound (current_flight_dynamics->left_engine_torque.value, 0.0, 120.0);

  000b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000b6	f3 0f 5a 80 ac
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7340]
  000be	0f 57 c9	 xorps	 xmm1, xmm1
  000c1	66 0f 2f c8	 comisd	 xmm1, xmm0
  000c5	76 0d		 jbe	 SHORT $LN77@draw_engin
  000c7	0f 57 c0	 xorps	 xmm0, xmm0
  000ca	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv90[ebp], xmm0
  000d2	eb 50		 jmp	 SHORT $LN78@draw_engin
$LN77@draw_engin:
  000d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000da	f3 0f 5a 81 ac
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7340]
  000e2	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  000ea	76 12		 jbe	 SHORT $LN75@draw_engin
  000ec	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  000f4	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv89[ebp], xmm0
  000fc	eb 16		 jmp	 SHORT $LN76@draw_engin
$LN75@draw_engin:
  000fe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00104	f3 0f 5a 82 ac
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7340]
  0010c	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv89[ebp], xmm0
$LN76@draw_engin:
  00114	f2 0f 10 85 34
	ff ff ff	 movsd	 xmm0, QWORD PTR tv89[ebp]
  0011c	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv90[ebp], xmm0
$LN78@draw_engin:
  00124	f2 0f 5a 85 3c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv90[ebp]
  0012c	f3 0f 11 45 84	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 8750 : 
; 8751 : 	convert_float_to_int (digital_readout, &i);

  00131	8d 45 a0	 lea	 eax, DWORD PTR _i$[ebp]
  00134	50		 push	 eax
  00135	51		 push	 ecx
  00136	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  0013b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00140	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 8752 : 
; 8753 : 	sprintf (buffer, "%03d", i);

  00145	8b 45 a0	 mov	 eax, DWORD PTR _i$[ebp]
  00148	50		 push	 eax
  00149	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  0014e	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00151	51		 push	 ecx
  00152	e8 00 00 00 00	 call	 _sprintf
  00157	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8754 : 
; 8755 : 	set_2d_mono_font_position (-0.85, -0.35);

  0015a	51		 push	 ecx
  0015b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  00163	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00168	51		 push	 ecx
  00169	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  00171	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00176	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8756 : 
; 8757 : 	if (draw_large_mfd)

  0017b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00182	74 23		 je	 SHORT $LN6@draw_engin

; 8758 : 	{
; 8759 : 		set_mono_font_rel_position (-13.0, 8.0);

  00184	51		 push	 ecx
  00185	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  0018d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00192	51		 push	 ecx
  00193	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1500000
  0019b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a0	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8760 : 	}
; 8761 : 	else

  001a5	eb 21		 jmp	 SHORT $LN7@draw_engin
$LN6@draw_engin:

; 8762 : 	{
; 8763 : 		set_mono_font_rel_position (-6.0, 3.0);

  001a7	51		 push	 ecx
  001a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  001b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b5	51		 push	 ecx
  001b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  001be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c3	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN7@draw_engin:

; 8764 : 	}
; 8765 : 
; 8766 : 	print_mono_font_string (buffer);

  001c8	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  001cb	50		 push	 eax
  001cc	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8767 : 
; 8768 : 	bar_value = digital_readout * 0.01;

  001d1	f3 0f 5a 45 84	 cvtss2sd xmm0, DWORD PTR _digital_readout$[ebp]
  001d6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  001de	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001e2	f3 0f 11 45 8c	 movss	 DWORD PTR _bar_value$[ebp], xmm0

; 8769 : 
; 8770 : 	get_2d_float_screen_coordinates (-0.85, 0.85, &x1, &y1);

  001e7	8d 45 98	 lea	 eax, DWORD PTR _y1$[ebp]
  001ea	50		 push	 eax
  001eb	8d 4d 9c	 lea	 ecx, DWORD PTR _x1$[ebp]
  001ee	51		 push	 ecx
  001ef	51		 push	 ecx
  001f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  001f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fd	51		 push	 ecx
  001fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  00206	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020b	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 8771 : 	get_2d_float_screen_y_coordinate (-0.35, &y2);

  00210	8d 45 94	 lea	 eax, DWORD PTR _y2$[ebp]
  00213	50		 push	 eax
  00214	51		 push	 ecx
  00215	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  0021d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00222	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8772 : 	get_2d_float_screen_y_coordinate (-0.35 + bar_value, &y3);

  00227	8d 45 90	 lea	 eax, DWORD PTR _y3$[ebp]
  0022a	50		 push	 eax
  0022b	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _bar_value$[ebp]
  00230	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfd6666666666666
  00238	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0023c	51		 push	 ecx
  0023d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00242	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8773 : 
; 8774 : 	if (draw_large_mfd)

  00247	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0024e	0f 84 84 02 00
	00		 je	 $LN8@draw_engin

; 8775 : 	{
; 8776 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  00254	b8 04 00 00 00	 mov	 eax, 4
  00259	6b c8 00	 imul	 ecx, eax, 0
  0025c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00262	52		 push	 edx
  00263	51		 push	 ecx
  00264	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00269	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026e	51		 push	 ecx
  0026f	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00274	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00279	51		 push	 ecx
  0027a	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0027f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00284	51		 push	 ecx
  00285	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0028a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028f	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8777 : 		draw_line (x1 + 4.0, y1, x1 + 4.0, y2, MFD_COLOUR1);

  00294	b8 04 00 00 00	 mov	 eax, 4
  00299	6b c8 00	 imul	 ecx, eax, 0
  0029c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002a2	52		 push	 edx
  002a3	51		 push	 ecx
  002a4	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  002a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ae	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  002b3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  002bb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002bf	51		 push	 ecx
  002c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c5	51		 push	 ecx
  002c6	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  002cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d0	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  002d5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  002dd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002e1	51		 push	 ecx
  002e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e7	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8778 : 		draw_line (x1, y1, x1 + 4.0, y1, MFD_COLOUR1);

  002ec	b8 04 00 00 00	 mov	 eax, 4
  002f1	6b c8 00	 imul	 ecx, eax, 0
  002f4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002fa	52		 push	 edx
  002fb	51		 push	 ecx
  002fc	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00301	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00306	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0030b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  00313	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00317	51		 push	 ecx
  00318	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0031d	51		 push	 ecx
  0031e	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00323	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00328	51		 push	 ecx
  00329	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0032e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00333	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8779 : 		draw_line (x1, y2, x1 + 4.0, y2, MFD_COLOUR1);

  00338	b8 04 00 00 00	 mov	 eax, 4
  0033d	6b c8 00	 imul	 ecx, eax, 0
  00340	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00346	52		 push	 edx
  00347	51		 push	 ecx
  00348	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0034d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00352	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00357	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  0035f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00363	51		 push	 ecx
  00364	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00369	51		 push	 ecx
  0036a	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0036f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00374	51		 push	 ecx
  00375	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0037a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037f	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8780 : 
; 8781 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  00384	b8 04 00 00 00	 mov	 eax, 4
  00389	6b c8 00	 imul	 ecx, eax, 0
  0038c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00392	52		 push	 edx
  00393	51		 push	 ecx
  00394	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  00399	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039e	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  003a3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  003ab	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003af	51		 push	 ecx
  003b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b5	51		 push	 ecx
  003b6	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  003bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c0	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  003c5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  003cd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003d1	51		 push	 ecx
  003d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d7	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8782 : 		draw_line (x1 + 2.0, y2, x1 + 2.0, y3, MFD_COLOUR1);

  003dc	b8 04 00 00 00	 mov	 eax, 4
  003e1	6b c8 00	 imul	 ecx, eax, 0
  003e4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003ea	52		 push	 edx
  003eb	51		 push	 ecx
  003ec	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  003f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f6	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  003fb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00403	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00407	51		 push	 ecx
  00408	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040d	51		 push	 ecx
  0040e	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00413	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00418	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0041d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00425	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00429	51		 push	 ecx
  0042a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042f	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8783 : 		draw_line (x1 + 3.0, y2, x1 + 3.0, y3, MFD_COLOUR1);

  00434	b8 04 00 00 00	 mov	 eax, 4
  00439	6b c8 00	 imul	 ecx, eax, 0
  0043c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00442	52		 push	 edx
  00443	51		 push	 ecx
  00444	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  00449	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044e	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00453	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  0045b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0045f	51		 push	 ecx
  00460	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00465	51		 push	 ecx
  00466	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0046b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00470	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00475	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  0047d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00481	51		 push	 ecx
  00482	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00487	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8784 : 
; 8785 : 		draw_mono_sprite (large_engine_bar_marker, x1 + 5.0, y1 + 20.0, MFD_COLOUR1);

  0048c	b8 04 00 00 00	 mov	 eax, 4
  00491	6b c8 00	 imul	 ecx, eax, 0
  00494	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0049a	52		 push	 edx
  0049b	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  004a0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4034000000000000
  004a8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004ac	51		 push	 ecx
  004ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b2	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  004b7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4014000000000000
  004bf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004c3	51		 push	 ecx
  004c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c9	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  004ce	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 8786 : 	}
; 8787 : 	else

  004d3	e9 cf 01 00 00	 jmp	 $LN9@draw_engin
$LN8@draw_engin:

; 8788 : 	{
; 8789 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  004d8	b8 04 00 00 00	 mov	 eax, 4
  004dd	6b c8 00	 imul	 ecx, eax, 0
  004e0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004e6	52		 push	 edx
  004e7	51		 push	 ecx
  004e8	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  004ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f2	51		 push	 ecx
  004f3	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  004f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fd	51		 push	 ecx
  004fe	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00503	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00508	51		 push	 ecx
  00509	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0050e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00513	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8790 : 		draw_line (x1 + 2.0, y1, x1 + 2.0, y2, MFD_COLOUR1);

  00518	b8 04 00 00 00	 mov	 eax, 4
  0051d	6b c8 00	 imul	 ecx, eax, 0
  00520	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00526	52		 push	 edx
  00527	51		 push	 ecx
  00528	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0052d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00532	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00537	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0053f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00543	51		 push	 ecx
  00544	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00549	51		 push	 ecx
  0054a	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0054f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00554	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00559	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00561	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00565	51		 push	 ecx
  00566	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0056b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8791 : 		draw_line (x1, y1, x1 + 2.0, y1, MFD_COLOUR1);

  00570	b8 04 00 00 00	 mov	 eax, 4
  00575	6b c8 00	 imul	 ecx, eax, 0
  00578	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0057e	52		 push	 edx
  0057f	51		 push	 ecx
  00580	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00585	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0058a	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0058f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00597	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0059b	51		 push	 ecx
  0059c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a1	51		 push	 ecx
  005a2	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  005a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ac	51		 push	 ecx
  005ad	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  005b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b7	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8792 : 		draw_line (x1, y2, x1 + 2.0, y2, MFD_COLOUR1);

  005bc	b8 04 00 00 00	 mov	 eax, 4
  005c1	6b c8 00	 imul	 ecx, eax, 0
  005c4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005ca	52		 push	 edx
  005cb	51		 push	 ecx
  005cc	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  005d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d6	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  005db	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  005e3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005e7	51		 push	 ecx
  005e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ed	51		 push	 ecx
  005ee	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  005f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f8	51		 push	 ecx
  005f9	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  005fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00603	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8793 : 
; 8794 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  00608	b8 04 00 00 00	 mov	 eax, 4
  0060d	6b c8 00	 imul	 ecx, eax, 0
  00610	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00616	52		 push	 edx
  00617	51		 push	 ecx
  00618	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  0061d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00622	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00627	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0062f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00633	51		 push	 ecx
  00634	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00639	51		 push	 ecx
  0063a	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0063f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00644	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00649	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00651	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00655	51		 push	 ecx
  00656	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0065b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8795 : 
; 8796 : 		draw_mono_sprite (small_engine_bar_marker, x1 + 3.0, y1 + 11.0, MFD_COLOUR1);

  00660	b8 04 00 00 00	 mov	 eax, 4
  00665	6b c8 00	 imul	 ecx, eax, 0
  00668	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0066e	52		 push	 edx
  0066f	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  00674	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4026000000000000
  0067c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00680	51		 push	 ecx
  00681	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00686	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0068b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00693	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00697	51		 push	 ecx
  00698	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0069d	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  006a2	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN9@draw_engin:

; 8797 : 	}
; 8798 : 	
; 8799 : 	//
; 8800 : 	// engine 2 torque
; 8801 : 	//
; 8802 : 
; 8803 : 	digital_readout = bound (current_flight_dynamics->right_engine_torque.value, 0.0, 120.0);

  006a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  006ac	f3 0f 5a 80 0c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7436]
  006b4	0f 57 c9	 xorps	 xmm1, xmm1
  006b7	66 0f 2f c8	 comisd	 xmm1, xmm0
  006bb	76 0d		 jbe	 SHORT $LN81@draw_engin
  006bd	0f 57 c0	 xorps	 xmm0, xmm0
  006c0	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv320[ebp], xmm0
  006c8	eb 50		 jmp	 SHORT $LN82@draw_engin
$LN81@draw_engin:
  006ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  006d0	f3 0f 5a 81 0c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7436]
  006d8	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  006e0	76 12		 jbe	 SHORT $LN79@draw_engin
  006e2	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  006ea	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv319[ebp], xmm0
  006f2	eb 16		 jmp	 SHORT $LN80@draw_engin
$LN79@draw_engin:
  006f4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  006fa	f3 0f 5a 82 0c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7436]
  00702	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv319[ebp], xmm0
$LN80@draw_engin:
  0070a	f2 0f 10 85 34
	ff ff ff	 movsd	 xmm0, QWORD PTR tv319[ebp]
  00712	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv320[ebp], xmm0
$LN82@draw_engin:
  0071a	f2 0f 5a 85 3c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv320[ebp]
  00722	f3 0f 11 45 84	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 8804 : 
; 8805 : 	convert_float_to_int (digital_readout, &i);

  00727	8d 45 a0	 lea	 eax, DWORD PTR _i$[ebp]
  0072a	50		 push	 eax
  0072b	51		 push	 ecx
  0072c	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  00731	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00736	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 8806 : 
; 8807 : 	sprintf (buffer, "%03d", i);

  0073b	8b 45 a0	 mov	 eax, DWORD PTR _i$[ebp]
  0073e	50		 push	 eax
  0073f	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  00744	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00747	51		 push	 ecx
  00748	e8 00 00 00 00	 call	 _sprintf
  0074d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8808 : 
; 8809 : 	set_2d_mono_font_position (-0.65 - 0.025, -0.35);

  00750	51		 push	 ecx
  00751	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  00759	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0075e	51		 push	 ecx
  0075f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2ccccd
  00767	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0076c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8810 : 
; 8811 : 	if (draw_large_mfd)

  00771	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00778	74 23		 je	 SHORT $LN10@draw_engin

; 8812 : 	{
; 8813 : 		set_mono_font_rel_position (-4.0, 8.0);

  0077a	51		 push	 ecx
  0077b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  00783	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00788	51		 push	 ecx
  00789	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  00791	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00796	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8814 : 	}
; 8815 : 	else

  0079b	eb 21		 jmp	 SHORT $LN11@draw_engin
$LN10@draw_engin:

; 8816 : 	{
; 8817 : 		set_mono_font_rel_position (-2.0, 3.0);

  0079d	51		 push	 ecx
  0079e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  007a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ab	51		 push	 ecx
  007ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  007b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b9	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN11@draw_engin:

; 8818 : 	}
; 8819 : 
; 8820 : 	print_mono_font_string (buffer);

  007be	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  007c1	50		 push	 eax
  007c2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8821 : 
; 8822 : 	bar_value = digital_readout * 0.01;

  007c7	f3 0f 5a 45 84	 cvtss2sd xmm0, DWORD PTR _digital_readout$[ebp]
  007cc	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  007d4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007d8	f3 0f 11 45 8c	 movss	 DWORD PTR _bar_value$[ebp], xmm0

; 8823 : 
; 8824 : 	get_2d_float_screen_coordinates (-0.65 - 0.025, 0.85, &x1, &y1);

  007dd	8d 45 98	 lea	 eax, DWORD PTR _y1$[ebp]
  007e0	50		 push	 eax
  007e1	8d 4d 9c	 lea	 ecx, DWORD PTR _x1$[ebp]
  007e4	51		 push	 ecx
  007e5	51		 push	 ecx
  007e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  007ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f3	51		 push	 ecx
  007f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2ccccd
  007fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00801	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 8825 : 	get_2d_float_screen_y_coordinate (-0.35, &y2);

  00806	8d 45 94	 lea	 eax, DWORD PTR _y2$[ebp]
  00809	50		 push	 eax
  0080a	51		 push	 ecx
  0080b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  00813	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00818	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8826 : 	get_2d_float_screen_y_coordinate (-0.35 + bar_value, &y3);

  0081d	8d 45 90	 lea	 eax, DWORD PTR _y3$[ebp]
  00820	50		 push	 eax
  00821	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _bar_value$[ebp]
  00826	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfd6666666666666
  0082e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00832	51		 push	 ecx
  00833	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00838	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8827 : 
; 8828 : 	if (draw_large_mfd)

  0083d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00844	0f 84 84 02 00
	00		 je	 $LN12@draw_engin

; 8829 : 	{
; 8830 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  0084a	b8 04 00 00 00	 mov	 eax, 4
  0084f	6b c8 00	 imul	 ecx, eax, 0
  00852	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00858	52		 push	 edx
  00859	51		 push	 ecx
  0085a	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0085f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00864	51		 push	 ecx
  00865	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0086a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0086f	51		 push	 ecx
  00870	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00875	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0087a	51		 push	 ecx
  0087b	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00880	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00885	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8831 : 		draw_line (x1 + 4.0, y1, x1 + 4.0, y2, MFD_COLOUR1);

  0088a	b8 04 00 00 00	 mov	 eax, 4
  0088f	6b c8 00	 imul	 ecx, eax, 0
  00892	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00898	52		 push	 edx
  00899	51		 push	 ecx
  0089a	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0089f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a4	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  008a9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  008b1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  008b5	51		 push	 ecx
  008b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008bb	51		 push	 ecx
  008bc	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  008c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c6	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  008cb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  008d3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  008d7	51		 push	 ecx
  008d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008dd	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8832 : 		draw_line (x1, y1, x1 + 4.0, y1, MFD_COLOUR1);

  008e2	b8 04 00 00 00	 mov	 eax, 4
  008e7	6b c8 00	 imul	 ecx, eax, 0
  008ea	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008f0	52		 push	 edx
  008f1	51		 push	 ecx
  008f2	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  008f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008fc	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00901	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  00909	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0090d	51		 push	 ecx
  0090e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00913	51		 push	 ecx
  00914	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00919	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0091e	51		 push	 ecx
  0091f	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00924	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00929	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8833 : 		draw_line (x1, y2, x1 + 4.0, y2, MFD_COLOUR1);

  0092e	b8 04 00 00 00	 mov	 eax, 4
  00933	6b c8 00	 imul	 ecx, eax, 0
  00936	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0093c	52		 push	 edx
  0093d	51		 push	 ecx
  0093e	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00943	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00948	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0094d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  00955	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00959	51		 push	 ecx
  0095a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0095f	51		 push	 ecx
  00960	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00965	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0096a	51		 push	 ecx
  0096b	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00970	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00975	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8834 : 
; 8835 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  0097a	b8 04 00 00 00	 mov	 eax, 4
  0097f	6b c8 00	 imul	 ecx, eax, 0
  00982	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00988	52		 push	 edx
  00989	51		 push	 ecx
  0098a	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  0098f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00994	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00999	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  009a1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009a5	51		 push	 ecx
  009a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ab	51		 push	 ecx
  009ac	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  009b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b6	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  009bb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  009c3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009c7	51		 push	 ecx
  009c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009cd	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8836 : 		draw_line (x1 + 2.0, y2, x1 + 2.0, y3, MFD_COLOUR1);

  009d2	b8 04 00 00 00	 mov	 eax, 4
  009d7	6b c8 00	 imul	 ecx, eax, 0
  009da	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009e0	52		 push	 edx
  009e1	51		 push	 ecx
  009e2	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  009e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ec	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  009f1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  009f9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009fd	51		 push	 ecx
  009fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a03	51		 push	 ecx
  00a04	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00a09	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a0e	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00a13	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00a1b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a1f	51		 push	 ecx
  00a20	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a25	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8837 : 		draw_line (x1 + 3.0, y2, x1 + 3.0, y3, MFD_COLOUR1);

  00a2a	b8 04 00 00 00	 mov	 eax, 4
  00a2f	6b c8 00	 imul	 ecx, eax, 0
  00a32	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a38	52		 push	 edx
  00a39	51		 push	 ecx
  00a3a	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  00a3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a44	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00a49	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00a51	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a55	51		 push	 ecx
  00a56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a5b	51		 push	 ecx
  00a5c	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00a61	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a66	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00a6b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00a73	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a77	51		 push	 ecx
  00a78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a7d	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8838 : 
; 8839 : 		draw_mono_sprite (large_engine_bar_marker, x1 - 7.0, y1 + 20.0, MFD_COLOUR1);

  00a82	b8 04 00 00 00	 mov	 eax, 4
  00a87	6b c8 00	 imul	 ecx, eax, 0
  00a8a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a90	52		 push	 edx
  00a91	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  00a96	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4034000000000000
  00a9e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00aa2	51		 push	 ecx
  00aa3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa8	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00aad	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401c000000000000
  00ab5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ab9	51		 push	 ecx
  00aba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00abf	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  00ac4	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 8840 : 	}
; 8841 : 	else

  00ac9	e9 cf 01 00 00	 jmp	 $LN13@draw_engin
$LN12@draw_engin:

; 8842 : 	{
; 8843 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  00ace	b8 04 00 00 00	 mov	 eax, 4
  00ad3	6b c8 00	 imul	 ecx, eax, 0
  00ad6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00adc	52		 push	 edx
  00add	51		 push	 ecx
  00ade	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00ae3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ae8	51		 push	 ecx
  00ae9	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00aee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00af3	51		 push	 ecx
  00af4	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00af9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00afe	51		 push	 ecx
  00aff	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00b04	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b09	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8844 : 		draw_line (x1 + 2.0, y1, x1 + 2.0, y2, MFD_COLOUR1);

  00b0e	b8 04 00 00 00	 mov	 eax, 4
  00b13	6b c8 00	 imul	 ecx, eax, 0
  00b16	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b1c	52		 push	 edx
  00b1d	51		 push	 ecx
  00b1e	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00b23	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b28	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00b2d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00b35	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b39	51		 push	 ecx
  00b3a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b3f	51		 push	 ecx
  00b40	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00b45	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b4a	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00b4f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00b57	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b5b	51		 push	 ecx
  00b5c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b61	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8845 : 		draw_line (x1, y1, x1 + 2.0, y1, MFD_COLOUR1);

  00b66	b8 04 00 00 00	 mov	 eax, 4
  00b6b	6b c8 00	 imul	 ecx, eax, 0
  00b6e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b74	52		 push	 edx
  00b75	51		 push	 ecx
  00b76	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00b7b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b80	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00b85	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00b8d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b91	51		 push	 ecx
  00b92	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b97	51		 push	 ecx
  00b98	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00b9d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ba2	51		 push	 ecx
  00ba3	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00ba8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bad	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8846 : 		draw_line (x1, y2, x1 + 2.0, y2, MFD_COLOUR1);

  00bb2	b8 04 00 00 00	 mov	 eax, 4
  00bb7	6b c8 00	 imul	 ecx, eax, 0
  00bba	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00bc0	52		 push	 edx
  00bc1	51		 push	 ecx
  00bc2	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00bc7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bcc	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00bd1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00bd9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00bdd	51		 push	 ecx
  00bde	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00be3	51		 push	 ecx
  00be4	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00be9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bee	51		 push	 ecx
  00bef	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00bf4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bf9	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8847 : 
; 8848 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  00bfe	b8 04 00 00 00	 mov	 eax, 4
  00c03	6b c8 00	 imul	 ecx, eax, 0
  00c06	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c0c	52		 push	 edx
  00c0d	51		 push	 ecx
  00c0e	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  00c13	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c18	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00c1d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00c25	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c29	51		 push	 ecx
  00c2a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c2f	51		 push	 ecx
  00c30	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00c35	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c3a	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00c3f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00c47	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c4b	51		 push	 ecx
  00c4c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c51	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8849 : 
; 8850 : 		draw_mono_sprite (small_engine_bar_marker, x1 - 4.0, y1 + 11.0, MFD_COLOUR1);

  00c56	b8 04 00 00 00	 mov	 eax, 4
  00c5b	6b c8 00	 imul	 ecx, eax, 0
  00c5e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c64	52		 push	 edx
  00c65	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  00c6a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4026000000000000
  00c72	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c76	51		 push	 ecx
  00c77	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c7c	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00c81	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4010000000000000
  00c89	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c8d	51		 push	 ecx
  00c8e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c93	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  00c98	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN13@draw_engin:

; 8851 : 	}
; 8852 : 
; 8853 : 	////////////////////////////////////////
; 8854 : 	//
; 8855 : 	// engine temperature
; 8856 : 	//
; 8857 : 	////////////////////////////////////////
; 8858 : 
; 8859 : 	set_2d_mono_font_position (-0.35, 0.85);

  00c9d	51		 push	 ecx
  00c9e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00ca6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cab	51		 push	 ecx
  00cac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  00cb4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cb9	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8860 : 
; 8861 : 	if (draw_large_mfd)

  00cbe	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00cc5	74 23		 je	 SHORT $LN14@draw_engin

; 8862 : 	{
; 8863 : 		set_mono_font_rel_position (2.0, -16.0);

  00cc7	51		 push	 ecx
  00cc8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1800000
  00cd0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cd5	51		 push	 ecx
  00cd6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00cde	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ce3	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8864 : 	}
; 8865 : 	else

  00ce8	eb 1c		 jmp	 SHORT $LN15@draw_engin
$LN14@draw_engin:

; 8866 : 	{
; 8867 : 		set_mono_font_rel_position (0.0, -7.0);

  00cea	51		 push	 ecx
  00ceb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0e00000
  00cf3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cf8	51		 push	 ecx
  00cf9	0f 57 c0	 xorps	 xmm0, xmm0
  00cfc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d01	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN15@draw_engin:

; 8868 : 	}
; 8869 : 
; 8870 : 	print_mono_font_string ("TGT");

  00d06	68 00 00 00 00	 push	 OFFSET ??_C@_03DBNGLLAD@TGT@
  00d0b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8871 : 
; 8872 : 	//
; 8873 : 	// engine 1 temperature
; 8874 : 	//
; 8875 : 
; 8876 : 	digital_readout = bound (current_flight_dynamics->left_engine_temp.value, 0.0, 1000.0);

  00d10	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00d15	f3 0f 5a 80 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7364]
  00d1d	0f 57 c9	 xorps	 xmm1, xmm1
  00d20	66 0f 2f c8	 comisd	 xmm1, xmm0
  00d24	76 0d		 jbe	 SHORT $LN85@draw_engin
  00d26	0f 57 c0	 xorps	 xmm0, xmm0
  00d29	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv526[ebp], xmm0
  00d31	eb 50		 jmp	 SHORT $LN86@draw_engin
$LN85@draw_engin:
  00d33	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00d39	f3 0f 5a 81 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7364]
  00d41	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@408f400000000000
  00d49	76 12		 jbe	 SHORT $LN83@draw_engin
  00d4b	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@408f400000000000
  00d53	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv525[ebp], xmm0
  00d5b	eb 16		 jmp	 SHORT $LN84@draw_engin
$LN83@draw_engin:
  00d5d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00d63	f3 0f 5a 82 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7364]
  00d6b	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv525[ebp], xmm0
$LN84@draw_engin:
  00d73	f2 0f 10 85 34
	ff ff ff	 movsd	 xmm0, QWORD PTR tv525[ebp]
  00d7b	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv526[ebp], xmm0
$LN86@draw_engin:
  00d83	f2 0f 5a 85 3c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv526[ebp]
  00d8b	f3 0f 11 45 84	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 8877 : 	convert_float_to_int (digital_readout * 0.1, &i);

  00d90	8d 45 a0	 lea	 eax, DWORD PTR _i$[ebp]
  00d93	50		 push	 eax
  00d94	f3 0f 5a 45 84	 cvtss2sd xmm0, DWORD PTR _digital_readout$[ebp]
  00d99	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00da1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00da5	51		 push	 ecx
  00da6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dab	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 8878 : 	sprintf (buffer, "%03d", i);

  00db0	8b 45 a0	 mov	 eax, DWORD PTR _i$[ebp]
  00db3	50		 push	 eax
  00db4	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  00db9	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00dbc	51		 push	 ecx
  00dbd	e8 00 00 00 00	 call	 _sprintf
  00dc2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8879 : 
; 8880 : 	set_2d_mono_font_position (-0.35, -0.35);

  00dc5	51		 push	 ecx
  00dc6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  00dce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dd3	51		 push	 ecx
  00dd4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  00ddc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00de1	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8881 : 
; 8882 : 	if (draw_large_mfd)

  00de6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00ded	74 23		 je	 SHORT $LN16@draw_engin

; 8883 : 	{
; 8884 : 		set_mono_font_rel_position (-13.0, 8.0);

  00def	51		 push	 ecx
  00df0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  00df8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dfd	51		 push	 ecx
  00dfe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1500000
  00e06	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e0b	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8885 : 	}
; 8886 : 	else

  00e10	eb 21		 jmp	 SHORT $LN17@draw_engin
$LN16@draw_engin:

; 8887 : 	{
; 8888 : 		set_mono_font_rel_position (-6.0, 3.0);

  00e12	51		 push	 ecx
  00e13	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  00e1b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e20	51		 push	 ecx
  00e21	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  00e29	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e2e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN17@draw_engin:

; 8889 : 	}
; 8890 : 
; 8891 : 	print_mono_font_string (buffer);

  00e33	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  00e36	50		 push	 eax
  00e37	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8892 : 
; 8893 : 	digital_readout = bound (current_flight_dynamics->left_engine_temp.value * 0.125, 0.0, 125.0);

  00e3c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00e41	f3 0f 5a 80 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7364]
  00e49	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc0000000000000
  00e51	0f 57 c9	 xorps	 xmm1, xmm1
  00e54	66 0f 2f c8	 comisd	 xmm1, xmm0
  00e58	76 0d		 jbe	 SHORT $LN89@draw_engin
  00e5a	0f 57 c0	 xorps	 xmm0, xmm0
  00e5d	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv559[ebp], xmm0
  00e65	eb 60		 jmp	 SHORT $LN90@draw_engin
$LN89@draw_engin:
  00e67	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00e6d	f3 0f 5a 81 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7364]
  00e75	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc0000000000000
  00e7d	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405f400000000000
  00e85	76 12		 jbe	 SHORT $LN87@draw_engin
  00e87	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405f400000000000
  00e8f	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv558[ebp], xmm0
  00e97	eb 1e		 jmp	 SHORT $LN88@draw_engin
$LN87@draw_engin:
  00e99	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00e9f	f3 0f 5a 82 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7364]
  00ea7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc0000000000000
  00eaf	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv558[ebp], xmm0
$LN88@draw_engin:
  00eb7	f2 0f 10 85 34
	ff ff ff	 movsd	 xmm0, QWORD PTR tv558[ebp]
  00ebf	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv559[ebp], xmm0
$LN90@draw_engin:
  00ec7	f2 0f 5a 85 3c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv559[ebp]
  00ecf	f3 0f 11 45 84	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 8894 : 	bar_value = digital_readout * 0.0096;

  00ed4	f3 0f 5a 45 84	 cvtss2sd xmm0, DWORD PTR _digital_readout$[ebp]
  00ed9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f83a92a30553261
  00ee1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ee5	f3 0f 11 45 8c	 movss	 DWORD PTR _bar_value$[ebp], xmm0

; 8895 : 
; 8896 : 	get_2d_float_screen_coordinates (-0.35, 0.85, &x1, &y1);

  00eea	8d 45 98	 lea	 eax, DWORD PTR _y1$[ebp]
  00eed	50		 push	 eax
  00eee	8d 4d 9c	 lea	 ecx, DWORD PTR _x1$[ebp]
  00ef1	51		 push	 ecx
  00ef2	51		 push	 ecx
  00ef3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00efb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f00	51		 push	 ecx
  00f01	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  00f09	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f0e	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 8897 : 	get_2d_float_screen_y_coordinate (-0.35, &y2);

  00f13	8d 45 94	 lea	 eax, DWORD PTR _y2$[ebp]
  00f16	50		 push	 eax
  00f17	51		 push	 ecx
  00f18	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  00f20	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f25	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8898 : 	get_2d_float_screen_y_coordinate (-0.35 + bar_value, &y3);

  00f2a	8d 45 90	 lea	 eax, DWORD PTR _y3$[ebp]
  00f2d	50		 push	 eax
  00f2e	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _bar_value$[ebp]
  00f33	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfd6666666666666
  00f3b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00f3f	51		 push	 ecx
  00f40	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f45	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8899 : 
; 8900 : 	if (draw_large_mfd)

  00f4a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00f51	0f 84 84 02 00
	00		 je	 $LN18@draw_engin

; 8901 : 	{
; 8902 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  00f57	b8 04 00 00 00	 mov	 eax, 4
  00f5c	6b c8 00	 imul	 ecx, eax, 0
  00f5f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f65	52		 push	 edx
  00f66	51		 push	 ecx
  00f67	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00f6c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f71	51		 push	 ecx
  00f72	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00f77	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f7c	51		 push	 ecx
  00f7d	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00f82	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f87	51		 push	 ecx
  00f88	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00f8d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f92	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8903 : 		draw_line (x1 + 4.0, y1, x1 + 4.0, y2, MFD_COLOUR1);

  00f97	b8 04 00 00 00	 mov	 eax, 4
  00f9c	6b c8 00	 imul	 ecx, eax, 0
  00f9f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00fa5	52		 push	 edx
  00fa6	51		 push	 ecx
  00fa7	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00fac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fb1	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00fb6	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  00fbe	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00fc2	51		 push	 ecx
  00fc3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fc8	51		 push	 ecx
  00fc9	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00fce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fd3	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00fd8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  00fe0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00fe4	51		 push	 ecx
  00fe5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fea	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8904 : 		draw_line (x1, y1, x1 + 4.0, y1, MFD_COLOUR1);

  00fef	b8 04 00 00 00	 mov	 eax, 4
  00ff4	6b c8 00	 imul	 ecx, eax, 0
  00ff7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ffd	52		 push	 edx
  00ffe	51		 push	 ecx
  00fff	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01004	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01009	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0100e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  01016	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0101a	51		 push	 ecx
  0101b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01020	51		 push	 ecx
  01021	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01026	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0102b	51		 push	 ecx
  0102c	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01031	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01036	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8905 : 		draw_line (x1, y2, x1 + 4.0, y2, MFD_COLOUR1);

  0103b	b8 04 00 00 00	 mov	 eax, 4
  01040	6b c8 00	 imul	 ecx, eax, 0
  01043	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01049	52		 push	 edx
  0104a	51		 push	 ecx
  0104b	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01050	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01055	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0105a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  01062	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01066	51		 push	 ecx
  01067	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0106c	51		 push	 ecx
  0106d	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01072	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01077	51		 push	 ecx
  01078	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0107d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01082	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8906 : 
; 8907 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  01087	b8 04 00 00 00	 mov	 eax, 4
  0108c	6b c8 00	 imul	 ecx, eax, 0
  0108f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01095	52		 push	 edx
  01096	51		 push	 ecx
  01097	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  0109c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010a1	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  010a6	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  010ae	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  010b2	51		 push	 ecx
  010b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010b8	51		 push	 ecx
  010b9	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  010be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010c3	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  010c8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  010d0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  010d4	51		 push	 ecx
  010d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010da	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8908 : 		draw_line (x1 + 2.0, y2, x1 + 2.0, y3, MFD_COLOUR1);

  010df	b8 04 00 00 00	 mov	 eax, 4
  010e4	6b c8 00	 imul	 ecx, eax, 0
  010e7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  010ed	52		 push	 edx
  010ee	51		 push	 ecx
  010ef	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  010f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010f9	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  010fe	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01106	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0110a	51		 push	 ecx
  0110b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01110	51		 push	 ecx
  01111	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01116	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0111b	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01120	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01128	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0112c	51		 push	 ecx
  0112d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01132	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8909 : 		draw_line (x1 + 3.0, y2, x1 + 3.0, y3, MFD_COLOUR1);

  01137	b8 04 00 00 00	 mov	 eax, 4
  0113c	6b c8 00	 imul	 ecx, eax, 0
  0113f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01145	52		 push	 edx
  01146	51		 push	 ecx
  01147	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  0114c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01151	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01156	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  0115e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01162	51		 push	 ecx
  01163	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01168	51		 push	 ecx
  01169	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0116e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01173	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01178	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  01180	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01184	51		 push	 ecx
  01185	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0118a	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8910 : 
; 8911 : 		draw_mono_sprite (large_engine_bar_marker, x1 - 7.0, y1 + 23.0, MFD_COLOUR1);

  0118f	b8 04 00 00 00	 mov	 eax, 4
  01194	6b c8 00	 imul	 ecx, eax, 0
  01197	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0119d	52		 push	 edx
  0119e	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  011a3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4037000000000000
  011ab	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  011af	51		 push	 ecx
  011b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011b5	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  011ba	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401c000000000000
  011c2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  011c6	51		 push	 ecx
  011c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011cc	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  011d1	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 8912 : 	}
; 8913 : 	else

  011d6	e9 cf 01 00 00	 jmp	 $LN19@draw_engin
$LN18@draw_engin:

; 8914 : 	{
; 8915 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  011db	b8 04 00 00 00	 mov	 eax, 4
  011e0	6b c8 00	 imul	 ecx, eax, 0
  011e3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  011e9	52		 push	 edx
  011ea	51		 push	 ecx
  011eb	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  011f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011f5	51		 push	 ecx
  011f6	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  011fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01200	51		 push	 ecx
  01201	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01206	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0120b	51		 push	 ecx
  0120c	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01211	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01216	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8916 : 		draw_line (x1 + 2.0, y1, x1 + 2.0, y2, MFD_COLOUR1);

  0121b	b8 04 00 00 00	 mov	 eax, 4
  01220	6b c8 00	 imul	 ecx, eax, 0
  01223	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01229	52		 push	 edx
  0122a	51		 push	 ecx
  0122b	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01230	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01235	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0123a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01242	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01246	51		 push	 ecx
  01247	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0124c	51		 push	 ecx
  0124d	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01252	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01257	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0125c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01264	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01268	51		 push	 ecx
  01269	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0126e	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8917 : 		draw_line (x1, y1, x1 + 2.0, y1, MFD_COLOUR1);

  01273	b8 04 00 00 00	 mov	 eax, 4
  01278	6b c8 00	 imul	 ecx, eax, 0
  0127b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01281	52		 push	 edx
  01282	51		 push	 ecx
  01283	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01288	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0128d	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01292	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0129a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0129e	51		 push	 ecx
  0129f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012a4	51		 push	 ecx
  012a5	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  012aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012af	51		 push	 ecx
  012b0	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  012b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012ba	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8918 : 		draw_line (x1, y2, x1 + 2.0, y2, MFD_COLOUR1);

  012bf	b8 04 00 00 00	 mov	 eax, 4
  012c4	6b c8 00	 imul	 ecx, eax, 0
  012c7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  012cd	52		 push	 edx
  012ce	51		 push	 ecx
  012cf	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  012d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012d9	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  012de	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  012e6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  012ea	51		 push	 ecx
  012eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012f0	51		 push	 ecx
  012f1	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  012f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012fb	51		 push	 ecx
  012fc	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01301	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01306	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8919 : 
; 8920 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  0130b	b8 04 00 00 00	 mov	 eax, 4
  01310	6b c8 00	 imul	 ecx, eax, 0
  01313	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01319	52		 push	 edx
  0131a	51		 push	 ecx
  0131b	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  01320	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01325	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0132a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  01332	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01336	51		 push	 ecx
  01337	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0133c	51		 push	 ecx
  0133d	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01342	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01347	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0134c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  01354	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01358	51		 push	 ecx
  01359	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0135e	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8921 : 
; 8922 : 		draw_mono_sprite (small_engine_bar_marker, x1 + 3.0, y1 + 13.0, MFD_COLOUR1);

  01363	b8 04 00 00 00	 mov	 eax, 4
  01368	6b c8 00	 imul	 ecx, eax, 0
  0136b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01371	52		 push	 edx
  01372	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  01377	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@402a000000000000
  0137f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01383	51		 push	 ecx
  01384	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01389	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0138e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  01396	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0139a	51		 push	 ecx
  0139b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013a0	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  013a5	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN19@draw_engin:

; 8923 : 	}
; 8924 : 
; 8925 : 	//
; 8926 : 	// engine 2 temperature
; 8927 : 	//
; 8928 : 
; 8929 : 	digital_readout = bound (current_flight_dynamics->right_engine_temp.value, 0.0, 1000.0);

  013aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  013af	f3 0f 5a 80 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7460]
  013b7	0f 57 c9	 xorps	 xmm1, xmm1
  013ba	66 0f 2f c8	 comisd	 xmm1, xmm0
  013be	76 0d		 jbe	 SHORT $LN93@draw_engin
  013c0	0f 57 c0	 xorps	 xmm0, xmm0
  013c3	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv744[ebp], xmm0
  013cb	eb 50		 jmp	 SHORT $LN94@draw_engin
$LN93@draw_engin:
  013cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  013d3	f3 0f 5a 81 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7460]
  013db	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@408f400000000000
  013e3	76 12		 jbe	 SHORT $LN91@draw_engin
  013e5	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@408f400000000000
  013ed	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv743[ebp], xmm0
  013f5	eb 16		 jmp	 SHORT $LN92@draw_engin
$LN91@draw_engin:
  013f7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  013fd	f3 0f 5a 82 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7460]
  01405	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv743[ebp], xmm0
$LN92@draw_engin:
  0140d	f2 0f 10 85 34
	ff ff ff	 movsd	 xmm0, QWORD PTR tv743[ebp]
  01415	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv744[ebp], xmm0
$LN94@draw_engin:
  0141d	f2 0f 5a 85 3c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv744[ebp]
  01425	f3 0f 11 45 84	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 8930 : 	convert_float_to_int (digital_readout * 0.1, &i);

  0142a	8d 45 a0	 lea	 eax, DWORD PTR _i$[ebp]
  0142d	50		 push	 eax
  0142e	f3 0f 5a 45 84	 cvtss2sd xmm0, DWORD PTR _digital_readout$[ebp]
  01433	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  0143b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0143f	51		 push	 ecx
  01440	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01445	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 8931 : 	sprintf (buffer, "%03d", i);

  0144a	8b 45 a0	 mov	 eax, DWORD PTR _i$[ebp]
  0144d	50		 push	 eax
  0144e	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  01453	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  01456	51		 push	 ecx
  01457	e8 00 00 00 00	 call	 _sprintf
  0145c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8932 : 
; 8933 : 	set_2d_mono_font_position (-0.15 - 0.025, -0.35);

  0145f	51		 push	 ecx
  01460	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  01468	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0146d	51		 push	 ecx
  0146e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be333333
  01476	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0147b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8934 : 
; 8935 : 	if (draw_large_mfd)

  01480	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01487	74 23		 je	 SHORT $LN20@draw_engin

; 8936 : 	{
; 8937 : 		set_mono_font_rel_position (-4.0, 8.0);

  01489	51		 push	 ecx
  0148a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  01492	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01497	51		 push	 ecx
  01498	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  014a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014a5	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8938 : 	}
; 8939 : 	else

  014aa	eb 21		 jmp	 SHORT $LN21@draw_engin
$LN20@draw_engin:

; 8940 : 	{
; 8941 : 		set_mono_font_rel_position (-2.0, 3.0);

  014ac	51		 push	 ecx
  014ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  014b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014ba	51		 push	 ecx
  014bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  014c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014c8	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN21@draw_engin:

; 8942 : 	}
; 8943 : 
; 8944 : 	print_mono_font_string (buffer);

  014cd	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  014d0	50		 push	 eax
  014d1	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8945 : 
; 8946 : 	digital_readout = bound (current_flight_dynamics->right_engine_temp.value * 0.125, 0.0, 125.0);

  014d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  014db	f3 0f 5a 80 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7460]
  014e3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc0000000000000
  014eb	0f 57 c9	 xorps	 xmm1, xmm1
  014ee	66 0f 2f c8	 comisd	 xmm1, xmm0
  014f2	76 0d		 jbe	 SHORT $LN97@draw_engin
  014f4	0f 57 c0	 xorps	 xmm0, xmm0
  014f7	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv777[ebp], xmm0
  014ff	eb 60		 jmp	 SHORT $LN98@draw_engin
$LN97@draw_engin:
  01501	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01507	f3 0f 5a 81 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7460]
  0150f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc0000000000000
  01517	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405f400000000000
  0151f	76 12		 jbe	 SHORT $LN95@draw_engin
  01521	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405f400000000000
  01529	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv776[ebp], xmm0
  01531	eb 1e		 jmp	 SHORT $LN96@draw_engin
$LN95@draw_engin:
  01533	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01539	f3 0f 5a 82 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7460]
  01541	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc0000000000000
  01549	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv776[ebp], xmm0
$LN96@draw_engin:
  01551	f2 0f 10 85 34
	ff ff ff	 movsd	 xmm0, QWORD PTR tv776[ebp]
  01559	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv777[ebp], xmm0
$LN98@draw_engin:
  01561	f2 0f 5a 85 3c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv777[ebp]
  01569	f3 0f 11 45 84	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 8947 : 	bar_value = digital_readout * 0.0096;

  0156e	f3 0f 5a 45 84	 cvtss2sd xmm0, DWORD PTR _digital_readout$[ebp]
  01573	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f83a92a30553261
  0157b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0157f	f3 0f 11 45 8c	 movss	 DWORD PTR _bar_value$[ebp], xmm0

; 8948 : 
; 8949 : 	get_2d_float_screen_coordinates (-0.15 - 0.025, 0.85, &x1, &y1);

  01584	8d 45 98	 lea	 eax, DWORD PTR _y1$[ebp]
  01587	50		 push	 eax
  01588	8d 4d 9c	 lea	 ecx, DWORD PTR _x1$[ebp]
  0158b	51		 push	 ecx
  0158c	51		 push	 ecx
  0158d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  01595	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0159a	51		 push	 ecx
  0159b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be333333
  015a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015a8	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 8950 : 	get_2d_float_screen_y_coordinate (-0.35, &y2);

  015ad	8d 45 94	 lea	 eax, DWORD PTR _y2$[ebp]
  015b0	50		 push	 eax
  015b1	51		 push	 ecx
  015b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  015ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015bf	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8951 : 	get_2d_float_screen_y_coordinate (-0.35 + bar_value, &y3);

  015c4	8d 45 90	 lea	 eax, DWORD PTR _y3$[ebp]
  015c7	50		 push	 eax
  015c8	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _bar_value$[ebp]
  015cd	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfd6666666666666
  015d5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  015d9	51		 push	 ecx
  015da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015df	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8952 : 
; 8953 : 	if (draw_large_mfd)

  015e4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  015eb	0f 84 84 02 00
	00		 je	 $LN22@draw_engin

; 8954 : 	{
; 8955 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  015f1	b8 04 00 00 00	 mov	 eax, 4
  015f6	6b c8 00	 imul	 ecx, eax, 0
  015f9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  015ff	52		 push	 edx
  01600	51		 push	 ecx
  01601	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01606	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0160b	51		 push	 ecx
  0160c	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01611	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01616	51		 push	 ecx
  01617	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0161c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01621	51		 push	 ecx
  01622	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01627	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0162c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8956 : 		draw_line (x1 + 4.0, y1, x1 + 4.0, y2, MFD_COLOUR1);

  01631	b8 04 00 00 00	 mov	 eax, 4
  01636	6b c8 00	 imul	 ecx, eax, 0
  01639	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0163f	52		 push	 edx
  01640	51		 push	 ecx
  01641	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01646	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0164b	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01650	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  01658	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0165c	51		 push	 ecx
  0165d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01662	51		 push	 ecx
  01663	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01668	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0166d	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01672	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  0167a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0167e	51		 push	 ecx
  0167f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01684	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8957 : 		draw_line (x1, y1, x1 + 4.0, y1, MFD_COLOUR1);

  01689	b8 04 00 00 00	 mov	 eax, 4
  0168e	6b c8 00	 imul	 ecx, eax, 0
  01691	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01697	52		 push	 edx
  01698	51		 push	 ecx
  01699	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0169e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016a3	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  016a8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  016b0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  016b4	51		 push	 ecx
  016b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016ba	51		 push	 ecx
  016bb	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  016c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016c5	51		 push	 ecx
  016c6	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  016cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016d0	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8958 : 		draw_line (x1, y2, x1 + 4.0, y2, MFD_COLOUR1);

  016d5	b8 04 00 00 00	 mov	 eax, 4
  016da	6b c8 00	 imul	 ecx, eax, 0
  016dd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  016e3	52		 push	 edx
  016e4	51		 push	 ecx
  016e5	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  016ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016ef	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  016f4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  016fc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01700	51		 push	 ecx
  01701	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01706	51		 push	 ecx
  01707	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0170c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01711	51		 push	 ecx
  01712	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01717	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0171c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8959 : 
; 8960 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  01721	b8 04 00 00 00	 mov	 eax, 4
  01726	6b c8 00	 imul	 ecx, eax, 0
  01729	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0172f	52		 push	 edx
  01730	51		 push	 ecx
  01731	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  01736	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0173b	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01740	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  01748	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0174c	51		 push	 ecx
  0174d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01752	51		 push	 ecx
  01753	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01758	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0175d	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01762	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0176a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0176e	51		 push	 ecx
  0176f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01774	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8961 : 		draw_line (x1 + 2.0, y2, x1 + 2.0, y3, MFD_COLOUR1);

  01779	b8 04 00 00 00	 mov	 eax, 4
  0177e	6b c8 00	 imul	 ecx, eax, 0
  01781	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01787	52		 push	 edx
  01788	51		 push	 ecx
  01789	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  0178e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01793	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01798	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  017a0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  017a4	51		 push	 ecx
  017a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017aa	51		 push	 ecx
  017ab	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  017b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017b5	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  017ba	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  017c2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  017c6	51		 push	 ecx
  017c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017cc	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8962 : 		draw_line (x1 + 3.0, y2, x1 + 3.0, y3, MFD_COLOUR1);

  017d1	b8 04 00 00 00	 mov	 eax, 4
  017d6	6b c8 00	 imul	 ecx, eax, 0
  017d9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  017df	52		 push	 edx
  017e0	51		 push	 ecx
  017e1	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  017e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017eb	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  017f0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  017f8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  017fc	51		 push	 ecx
  017fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01802	51		 push	 ecx
  01803	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01808	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0180d	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01812	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  0181a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0181e	51		 push	 ecx
  0181f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01824	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8963 : 
; 8964 : 		draw_mono_sprite (large_engine_bar_marker, x1 + 5.0, y1 + 23.0, MFD_COLOUR1);

  01829	b8 04 00 00 00	 mov	 eax, 4
  0182e	6b c8 00	 imul	 ecx, eax, 0
  01831	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01837	52		 push	 edx
  01838	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  0183d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4037000000000000
  01845	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01849	51		 push	 ecx
  0184a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0184f	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01854	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4014000000000000
  0185c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01860	51		 push	 ecx
  01861	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01866	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  0186b	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 8965 : 	}
; 8966 : 	else

  01870	e9 cf 01 00 00	 jmp	 $LN23@draw_engin
$LN22@draw_engin:

; 8967 : 	{
; 8968 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  01875	b8 04 00 00 00	 mov	 eax, 4
  0187a	6b c8 00	 imul	 ecx, eax, 0
  0187d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01883	52		 push	 edx
  01884	51		 push	 ecx
  01885	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0188a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0188f	51		 push	 ecx
  01890	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01895	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0189a	51		 push	 ecx
  0189b	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  018a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018a5	51		 push	 ecx
  018a6	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  018ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018b0	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8969 : 		draw_line (x1 + 2.0, y1, x1 + 2.0, y2, MFD_COLOUR1);

  018b5	b8 04 00 00 00	 mov	 eax, 4
  018ba	6b c8 00	 imul	 ecx, eax, 0
  018bd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  018c3	52		 push	 edx
  018c4	51		 push	 ecx
  018c5	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  018ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018cf	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  018d4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  018dc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  018e0	51		 push	 ecx
  018e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018e6	51		 push	 ecx
  018e7	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  018ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018f1	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  018f6	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  018fe	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01902	51		 push	 ecx
  01903	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01908	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8970 : 		draw_line (x1, y1, x1 + 2.0, y1, MFD_COLOUR1);

  0190d	b8 04 00 00 00	 mov	 eax, 4
  01912	6b c8 00	 imul	 ecx, eax, 0
  01915	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0191b	52		 push	 edx
  0191c	51		 push	 ecx
  0191d	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01922	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01927	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0192c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01934	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01938	51		 push	 ecx
  01939	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0193e	51		 push	 ecx
  0193f	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01944	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01949	51		 push	 ecx
  0194a	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0194f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01954	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8971 : 		draw_line (x1, y2, x1 + 2.0, y2, MFD_COLOUR1);

  01959	b8 04 00 00 00	 mov	 eax, 4
  0195e	6b c8 00	 imul	 ecx, eax, 0
  01961	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01967	52		 push	 edx
  01968	51		 push	 ecx
  01969	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0196e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01973	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01978	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01980	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01984	51		 push	 ecx
  01985	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0198a	51		 push	 ecx
  0198b	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01990	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01995	51		 push	 ecx
  01996	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0199b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019a0	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8972 : 
; 8973 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  019a5	b8 04 00 00 00	 mov	 eax, 4
  019aa	6b c8 00	 imul	 ecx, eax, 0
  019ad	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  019b3	52		 push	 edx
  019b4	51		 push	 ecx
  019b5	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  019ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019bf	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  019c4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  019cc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  019d0	51		 push	 ecx
  019d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019d6	51		 push	 ecx
  019d7	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  019dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019e1	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  019e6	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  019ee	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  019f2	51		 push	 ecx
  019f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019f8	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8974 : 
; 8975 : 		draw_mono_sprite (small_engine_bar_marker, x1 - 4.0, y1 + 13.0, MFD_COLOUR1);

  019fd	b8 04 00 00 00	 mov	 eax, 4
  01a02	6b c8 00	 imul	 ecx, eax, 0
  01a05	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a0b	52		 push	 edx
  01a0c	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  01a11	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@402a000000000000
  01a19	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a1d	51		 push	 ecx
  01a1e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a23	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01a28	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4010000000000000
  01a30	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a34	51		 push	 ecx
  01a35	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a3a	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  01a3f	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN23@draw_engin:

; 8976 : 	}
; 8977 : 
; 8978 : 	////////////////////////////////////////
; 8979 : 	//
; 8980 : 	// engine and rotor rpm
; 8981 : 	//
; 8982 : 	////////////////////////////////////////
; 8983 : 
; 8984 : 	//
; 8985 : 	// engine 1 rpm
; 8986 : 	//
; 8987 : 
; 8988 : 	set_2d_mono_font_position (0.1, 0.85);

  01a44	51		 push	 ecx
  01a45	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  01a4d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a52	51		 push	 ecx
  01a53	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  01a5b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a60	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8989 : 
; 8990 : 	if (draw_large_mfd)

  01a65	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01a6c	74 4d		 je	 SHORT $LN24@draw_engin

; 8991 : 	{
; 8992 : 		set_mono_font_rel_position (-6.0, -16.0);

  01a6e	51		 push	 ecx
  01a6f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1800000
  01a77	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a7c	51		 push	 ecx
  01a7d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  01a85	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a8a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8993 : 
; 8994 : 		print_mono_font_char ('N');

  01a8f	6a 4e		 push	 78			; 0000004eH
  01a91	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 8995 : 
; 8996 : 		set_mono_font_rel_position (0.0, 2.0);

  01a96	51		 push	 ecx
  01a97	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  01a9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aa4	51		 push	 ecx
  01aa5	0f 57 c0	 xorps	 xmm0, xmm0
  01aa8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aad	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8997 : 
; 8998 : 		print_mono_font_char ('P');

  01ab2	6a 50		 push	 80			; 00000050H
  01ab4	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 8999 : 	}
; 9000 : 	else

  01ab9	eb 4b		 jmp	 SHORT $LN25@draw_engin
$LN24@draw_engin:

; 9001 : 	{
; 9002 : 		set_mono_font_rel_position (-2.0, -7.0);

  01abb	51		 push	 ecx
  01abc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0e00000
  01ac4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ac9	51		 push	 ecx
  01aca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  01ad2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ad7	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9003 : 
; 9004 : 		print_mono_font_char ('N');

  01adc	6a 4e		 push	 78			; 0000004eH
  01ade	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 9005 : 
; 9006 : 		set_mono_font_rel_position (0.0, 1.0);

  01ae3	51		 push	 ecx
  01ae4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01aec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01af1	51		 push	 ecx
  01af2	0f 57 c0	 xorps	 xmm0, xmm0
  01af5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01afa	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9007 : 
; 9008 : 		print_mono_font_char ('P');

  01aff	6a 50		 push	 80			; 00000050H
  01b01	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char
$LN25@draw_engin:

; 9009 : 	}
; 9010 : 
; 9011 : 	digital_readout = bound (current_flight_dynamics->left_engine_rpm.value, 0.0, 120.0);

  01b06	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01b0b	f3 0f 5a 80 7c
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7292]
  01b13	0f 57 c9	 xorps	 xmm1, xmm1
  01b16	66 0f 2f c8	 comisd	 xmm1, xmm0
  01b1a	76 0d		 jbe	 SHORT $LN101@draw_engin
  01b1c	0f 57 c0	 xorps	 xmm0, xmm0
  01b1f	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv977[ebp], xmm0
  01b27	eb 50		 jmp	 SHORT $LN102@draw_engin
$LN101@draw_engin:
  01b29	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01b2f	f3 0f 5a 81 7c
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7292]
  01b37	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  01b3f	76 12		 jbe	 SHORT $LN99@draw_engin
  01b41	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  01b49	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv976[ebp], xmm0
  01b51	eb 16		 jmp	 SHORT $LN100@draw_engin
$LN99@draw_engin:
  01b53	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01b59	f3 0f 5a 82 7c
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7292]
  01b61	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv976[ebp], xmm0
$LN100@draw_engin:
  01b69	f2 0f 10 85 34
	ff ff ff	 movsd	 xmm0, QWORD PTR tv976[ebp]
  01b71	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv977[ebp], xmm0
$LN102@draw_engin:
  01b79	f2 0f 5a 85 3c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv977[ebp]
  01b81	f3 0f 11 45 84	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 9012 : 
; 9013 : 	convert_float_to_int (digital_readout, &i);

  01b86	8d 45 a0	 lea	 eax, DWORD PTR _i$[ebp]
  01b89	50		 push	 eax
  01b8a	51		 push	 ecx
  01b8b	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  01b90	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b95	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 9014 : 
; 9015 : 	sprintf (buffer, "%03d", i);

  01b9a	8b 45 a0	 mov	 eax, DWORD PTR _i$[ebp]
  01b9d	50		 push	 eax
  01b9e	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  01ba3	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  01ba6	51		 push	 ecx
  01ba7	e8 00 00 00 00	 call	 _sprintf
  01bac	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9016 : 
; 9017 : 	set_2d_mono_font_position (0.1 + 0.05, -0.35);

  01baf	51		 push	 ecx
  01bb0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  01bb8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bbd	51		 push	 ecx
  01bbe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  01bc6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bcb	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9018 : 
; 9019 : 	if (draw_large_mfd)

  01bd0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01bd7	74 23		 je	 SHORT $LN26@draw_engin

; 9020 : 	{
; 9021 : 		set_mono_font_rel_position (-13.0, 8.0);

  01bd9	51		 push	 ecx
  01bda	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  01be2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01be7	51		 push	 ecx
  01be8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1500000
  01bf0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bf5	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9022 : 	}
; 9023 : 	else

  01bfa	eb 21		 jmp	 SHORT $LN27@draw_engin
$LN26@draw_engin:

; 9024 : 	{
; 9025 : 		set_mono_font_rel_position (-6.0, 3.0);

  01bfc	51		 push	 ecx
  01bfd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  01c05	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c0a	51		 push	 ecx
  01c0b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  01c13	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c18	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN27@draw_engin:

; 9026 : 	}
; 9027 : 
; 9028 : 	print_mono_font_string (buffer);

  01c1d	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  01c20	50		 push	 eax
  01c21	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9029 : 
; 9030 : 	bar_value = digital_readout * 0.01;

  01c26	f3 0f 5a 45 84	 cvtss2sd xmm0, DWORD PTR _digital_readout$[ebp]
  01c2b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  01c33	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c37	f3 0f 11 45 8c	 movss	 DWORD PTR _bar_value$[ebp], xmm0

; 9031 : 
; 9032 : 	get_2d_float_screen_coordinates (0.1, 0.85, &x1, &y1);

  01c3c	8d 45 98	 lea	 eax, DWORD PTR _y1$[ebp]
  01c3f	50		 push	 eax
  01c40	8d 4d 9c	 lea	 ecx, DWORD PTR _x1$[ebp]
  01c43	51		 push	 ecx
  01c44	51		 push	 ecx
  01c45	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  01c4d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c52	51		 push	 ecx
  01c53	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  01c5b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c60	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 9033 : 	get_2d_float_screen_y_coordinate (-0.35, &y2);

  01c65	8d 45 94	 lea	 eax, DWORD PTR _y2$[ebp]
  01c68	50		 push	 eax
  01c69	51		 push	 ecx
  01c6a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  01c72	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c77	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 9034 : 	get_2d_float_screen_y_coordinate (-0.35 + bar_value, &y3);

  01c7c	8d 45 90	 lea	 eax, DWORD PTR _y3$[ebp]
  01c7f	50		 push	 eax
  01c80	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _bar_value$[ebp]
  01c85	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfd6666666666666
  01c8d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c91	51		 push	 ecx
  01c92	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c97	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 9035 : 
; 9036 : 	if (draw_large_mfd)

  01c9c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01ca3	0f 84 84 02 00
	00		 je	 $LN28@draw_engin

; 9037 : 	{
; 9038 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  01ca9	b8 04 00 00 00	 mov	 eax, 4
  01cae	6b c8 00	 imul	 ecx, eax, 0
  01cb1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01cb7	52		 push	 edx
  01cb8	51		 push	 ecx
  01cb9	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01cbe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cc3	51		 push	 ecx
  01cc4	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01cc9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cce	51		 push	 ecx
  01ccf	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01cd4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cd9	51		 push	 ecx
  01cda	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01cdf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ce4	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9039 : 		draw_line (x1 + 4.0, y1, x1 + 4.0, y2, MFD_COLOUR1);

  01ce9	b8 04 00 00 00	 mov	 eax, 4
  01cee	6b c8 00	 imul	 ecx, eax, 0
  01cf1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01cf7	52		 push	 edx
  01cf8	51		 push	 ecx
  01cf9	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01cfe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d03	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01d08	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  01d10	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d14	51		 push	 ecx
  01d15	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d1a	51		 push	 ecx
  01d1b	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01d20	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d25	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01d2a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  01d32	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d36	51		 push	 ecx
  01d37	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d3c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9040 : 		draw_line (x1, y1, x1 + 4.0, y1, MFD_COLOUR1);

  01d41	b8 04 00 00 00	 mov	 eax, 4
  01d46	6b c8 00	 imul	 ecx, eax, 0
  01d49	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01d4f	52		 push	 edx
  01d50	51		 push	 ecx
  01d51	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01d56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d5b	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01d60	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  01d68	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d6c	51		 push	 ecx
  01d6d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d72	51		 push	 ecx
  01d73	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01d78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d7d	51		 push	 ecx
  01d7e	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01d83	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d88	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9041 : 		draw_line (x1, y2, x1 + 4.0, y2, MFD_COLOUR1);

  01d8d	b8 04 00 00 00	 mov	 eax, 4
  01d92	6b c8 00	 imul	 ecx, eax, 0
  01d95	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01d9b	52		 push	 edx
  01d9c	51		 push	 ecx
  01d9d	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01da2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01da7	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01dac	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  01db4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01db8	51		 push	 ecx
  01db9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dbe	51		 push	 ecx
  01dbf	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01dc4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dc9	51		 push	 ecx
  01dca	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01dcf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dd4	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9042 : 
; 9043 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  01dd9	b8 04 00 00 00	 mov	 eax, 4
  01dde	6b c8 00	 imul	 ecx, eax, 0
  01de1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01de7	52		 push	 edx
  01de8	51		 push	 ecx
  01de9	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  01dee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01df3	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01df8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  01e00	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e04	51		 push	 ecx
  01e05	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e0a	51		 push	 ecx
  01e0b	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01e10	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e15	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01e1a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  01e22	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e26	51		 push	 ecx
  01e27	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e2c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9044 : 		draw_line (x1 + 2.0, y2, x1 + 2.0, y3, MFD_COLOUR1);

  01e31	b8 04 00 00 00	 mov	 eax, 4
  01e36	6b c8 00	 imul	 ecx, eax, 0
  01e39	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01e3f	52		 push	 edx
  01e40	51		 push	 ecx
  01e41	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  01e46	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e4b	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01e50	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01e58	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e5c	51		 push	 ecx
  01e5d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e62	51		 push	 ecx
  01e63	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01e68	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e6d	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01e72	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01e7a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e7e	51		 push	 ecx
  01e7f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e84	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9045 : 		draw_line (x1 + 3.0, y2, x1 + 3.0, y3, MFD_COLOUR1);

  01e89	b8 04 00 00 00	 mov	 eax, 4
  01e8e	6b c8 00	 imul	 ecx, eax, 0
  01e91	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01e97	52		 push	 edx
  01e98	51		 push	 ecx
  01e99	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  01e9e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ea3	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01ea8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  01eb0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01eb4	51		 push	 ecx
  01eb5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01eba	51		 push	 ecx
  01ebb	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01ec0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ec5	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01eca	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  01ed2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01ed6	51		 push	 ecx
  01ed7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01edc	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9046 : 
; 9047 : 		draw_mono_sprite (large_engine_bar_marker, x1 - 7.0, y1 + 20.0, MFD_COLOUR1);

  01ee1	b8 04 00 00 00	 mov	 eax, 4
  01ee6	6b c8 00	 imul	 ecx, eax, 0
  01ee9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01eef	52		 push	 edx
  01ef0	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  01ef5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4034000000000000
  01efd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01f01	51		 push	 ecx
  01f02	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f07	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01f0c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401c000000000000
  01f14	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01f18	51		 push	 ecx
  01f19	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f1e	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  01f23	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 9048 : 	}
; 9049 : 	else

  01f28	e9 cf 01 00 00	 jmp	 $LN29@draw_engin
$LN28@draw_engin:

; 9050 : 	{
; 9051 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  01f2d	b8 04 00 00 00	 mov	 eax, 4
  01f32	6b c8 00	 imul	 ecx, eax, 0
  01f35	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01f3b	52		 push	 edx
  01f3c	51		 push	 ecx
  01f3d	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01f42	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f47	51		 push	 ecx
  01f48	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01f4d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f52	51		 push	 ecx
  01f53	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01f58	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f5d	51		 push	 ecx
  01f5e	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01f63	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f68	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9052 : 		draw_line (x1 + 2.0, y1, x1 + 2.0, y2, MFD_COLOUR1);

  01f6d	b8 04 00 00 00	 mov	 eax, 4
  01f72	6b c8 00	 imul	 ecx, eax, 0
  01f75	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01f7b	52		 push	 edx
  01f7c	51		 push	 ecx
  01f7d	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01f82	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f87	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01f8c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01f94	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01f98	51		 push	 ecx
  01f99	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f9e	51		 push	 ecx
  01f9f	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01fa4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fa9	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01fae	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01fb6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01fba	51		 push	 ecx
  01fbb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fc0	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9053 : 		draw_line (x1, y1, x1 + 2.0, y1, MFD_COLOUR1);

  01fc5	b8 04 00 00 00	 mov	 eax, 4
  01fca	6b c8 00	 imul	 ecx, eax, 0
  01fcd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01fd3	52		 push	 edx
  01fd4	51		 push	 ecx
  01fd5	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01fda	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fdf	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01fe4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01fec	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01ff0	51		 push	 ecx
  01ff1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ff6	51		 push	 ecx
  01ff7	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01ffc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02001	51		 push	 ecx
  02002	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02007	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0200c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9054 : 		draw_line (x1, y2, x1 + 2.0, y2, MFD_COLOUR1);

  02011	b8 04 00 00 00	 mov	 eax, 4
  02016	6b c8 00	 imul	 ecx, eax, 0
  02019	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0201f	52		 push	 edx
  02020	51		 push	 ecx
  02021	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02026	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0202b	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02030	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02038	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0203c	51		 push	 ecx
  0203d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02042	51		 push	 ecx
  02043	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02048	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0204d	51		 push	 ecx
  0204e	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02053	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02058	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9055 : 
; 9056 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  0205d	b8 04 00 00 00	 mov	 eax, 4
  02062	6b c8 00	 imul	 ecx, eax, 0
  02065	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0206b	52		 push	 edx
  0206c	51		 push	 ecx
  0206d	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  02072	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02077	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0207c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02084	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02088	51		 push	 ecx
  02089	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0208e	51		 push	 ecx
  0208f	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02094	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02099	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0209e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  020a6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  020aa	51		 push	 ecx
  020ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020b0	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9057 : 
; 9058 : 		draw_mono_sprite (small_engine_bar_marker, x1 - 4.0, y1 + 11.0, MFD_COLOUR1);

  020b5	b8 04 00 00 00	 mov	 eax, 4
  020ba	6b c8 00	 imul	 ecx, eax, 0
  020bd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  020c3	52		 push	 edx
  020c4	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  020c9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4026000000000000
  020d1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  020d5	51		 push	 ecx
  020d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020db	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  020e0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4010000000000000
  020e8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  020ec	51		 push	 ecx
  020ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020f2	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  020f7	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN29@draw_engin:

; 9059 : 	}
; 9060 : 
; 9061 : 	//
; 9062 : 	// rotor rpm
; 9063 : 	//
; 9064 : 
; 9065 : 	set_2d_mono_font_position (0.25 - 0.0125, 0.85);

  020fc	51		 push	 ecx
  020fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  02105	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0210a	51		 push	 ecx
  0210b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e733333
  02113	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02118	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9066 : 
; 9067 : 	if (draw_large_mfd)

  0211d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02124	74 4d		 je	 SHORT $LN30@draw_engin

; 9068 : 	{
; 9069 : 		set_mono_font_rel_position (-6.0, -16.0);

  02126	51		 push	 ecx
  02127	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1800000
  0212f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02134	51		 push	 ecx
  02135	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  0213d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02142	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9070 : 
; 9071 : 		print_mono_font_char ('N');

  02147	6a 4e		 push	 78			; 0000004eH
  02149	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 9072 : 
; 9073 : 		set_mono_font_rel_position (0.0, 2.0);

  0214e	51		 push	 ecx
  0214f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02157	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0215c	51		 push	 ecx
  0215d	0f 57 c0	 xorps	 xmm0, xmm0
  02160	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02165	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9074 : 
; 9075 : 		print_mono_font_char ('R');

  0216a	6a 52		 push	 82			; 00000052H
  0216c	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 9076 : 	}
; 9077 : 	else

  02171	eb 4b		 jmp	 SHORT $LN31@draw_engin
$LN30@draw_engin:

; 9078 : 	{
; 9079 : 		set_mono_font_rel_position (-2.0, -7.0);

  02173	51		 push	 ecx
  02174	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0e00000
  0217c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02181	51		 push	 ecx
  02182	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  0218a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0218f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9080 : 
; 9081 : 		print_mono_font_char ('N');

  02194	6a 4e		 push	 78			; 0000004eH
  02196	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 9082 : 
; 9083 : 		set_mono_font_rel_position (0.0, 1.0);

  0219b	51		 push	 ecx
  0219c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  021a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021a9	51		 push	 ecx
  021aa	0f 57 c0	 xorps	 xmm0, xmm0
  021ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021b2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9084 : 
; 9085 : 		print_mono_font_char ('R');

  021b7	6a 52		 push	 82			; 00000052H
  021b9	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char
$LN31@draw_engin:

; 9086 : 	}
; 9087 : 
; 9088 : 	digital_readout = bound (current_flight_dynamics->main_rotor_rpm.value, 0.0, 125.0);

  021be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  021c3	f3 0f 5a 80 14
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7700]
  021cb	0f 57 c9	 xorps	 xmm1, xmm1
  021ce	66 0f 2f c8	 comisd	 xmm1, xmm0
  021d2	76 0d		 jbe	 SHORT $LN105@draw_engin
  021d4	0f 57 c0	 xorps	 xmm0, xmm0
  021d7	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv1190[ebp], xmm0
  021df	eb 50		 jmp	 SHORT $LN106@draw_engin
$LN105@draw_engin:
  021e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  021e7	f3 0f 5a 81 14
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7700]
  021ef	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405f400000000000
  021f7	76 12		 jbe	 SHORT $LN103@draw_engin
  021f9	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405f400000000000
  02201	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv1189[ebp], xmm0
  02209	eb 16		 jmp	 SHORT $LN104@draw_engin
$LN103@draw_engin:
  0220b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  02211	f3 0f 5a 82 14
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7700]
  02219	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv1189[ebp], xmm0
$LN104@draw_engin:
  02221	f2 0f 10 85 34
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1189[ebp]
  02229	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv1190[ebp], xmm0
$LN106@draw_engin:
  02231	f2 0f 5a 85 3c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv1190[ebp]
  02239	f3 0f 11 45 84	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 9089 : 
; 9090 : 	convert_float_to_int (digital_readout, &i);

  0223e	8d 45 a0	 lea	 eax, DWORD PTR _i$[ebp]
  02241	50		 push	 eax
  02242	51		 push	 ecx
  02243	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  02248	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0224d	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 9091 : 
; 9092 : 	sprintf (buffer, "%03d", i);

  02252	8b 45 a0	 mov	 eax, DWORD PTR _i$[ebp]
  02255	50		 push	 eax
  02256	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  0225b	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0225e	51		 push	 ecx
  0225f	e8 00 00 00 00	 call	 _sprintf
  02264	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9093 : 
; 9094 : 	set_2d_mono_font_position (0.25 - 0.0125, -0.15);

  02267	51		 push	 ecx
  02268	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  02270	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02275	51		 push	 ecx
  02276	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e733333
  0227e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02283	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9095 : 
; 9096 : 	if (draw_large_mfd)

  02288	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0228f	74 23		 je	 SHORT $LN32@draw_engin

; 9097 : 	{
; 9098 : 		set_mono_font_rel_position (-8.0, 8.0);

  02291	51		 push	 ecx
  02292	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  0229a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0229f	51		 push	 ecx
  022a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  022a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022ad	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9099 : 	}
; 9100 : 	else

  022b2	eb 21		 jmp	 SHORT $LN33@draw_engin
$LN32@draw_engin:

; 9101 : 	{
; 9102 : 		set_mono_font_rel_position (-4.0, 3.0);

  022b4	51		 push	 ecx
  022b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  022bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022c2	51		 push	 ecx
  022c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  022cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022d0	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN33@draw_engin:

; 9103 : 	}
; 9104 : 
; 9105 : 	print_mono_font_string (buffer);

  022d5	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  022d8	50		 push	 eax
  022d9	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9106 : 
; 9107 : 	bar_value = digital_readout * 0.008;

  022de	f3 0f 5a 45 84	 cvtss2sd xmm0, DWORD PTR _digital_readout$[ebp]
  022e3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f80624dd2f1a9fc
  022eb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  022ef	f3 0f 11 45 8c	 movss	 DWORD PTR _bar_value$[ebp], xmm0

; 9108 : 
; 9109 : 	get_2d_float_screen_coordinates (0.25 - 0.0125, 0.85, &x1, &y1);

  022f4	8d 45 98	 lea	 eax, DWORD PTR _y1$[ebp]
  022f7	50		 push	 eax
  022f8	8d 4d 9c	 lea	 ecx, DWORD PTR _x1$[ebp]
  022fb	51		 push	 ecx
  022fc	51		 push	 ecx
  022fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  02305	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0230a	51		 push	 ecx
  0230b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e733333
  02313	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02318	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 9110 : 	get_2d_float_screen_y_coordinate (-0.15, &y2);

  0231d	8d 45 94	 lea	 eax, DWORD PTR _y2$[ebp]
  02320	50		 push	 eax
  02321	51		 push	 ecx
  02322	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  0232a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0232f	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 9111 : 	get_2d_float_screen_y_coordinate (-0.15 + bar_value, &y3);

  02334	8d 45 90	 lea	 eax, DWORD PTR _y3$[ebp]
  02337	50		 push	 eax
  02338	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _bar_value$[ebp]
  0233d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfc3333333333333
  02345	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02349	51		 push	 ecx
  0234a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0234f	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 9112 : 
; 9113 : 	if (draw_large_mfd)

  02354	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0235b	0f 84 84 02 00
	00		 je	 $LN34@draw_engin

; 9114 : 	{
; 9115 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  02361	b8 04 00 00 00	 mov	 eax, 4
  02366	6b c8 00	 imul	 ecx, eax, 0
  02369	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0236f	52		 push	 edx
  02370	51		 push	 ecx
  02371	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02376	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0237b	51		 push	 ecx
  0237c	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02381	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02386	51		 push	 ecx
  02387	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0238c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02391	51		 push	 ecx
  02392	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02397	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0239c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9116 : 		draw_line (x1 + 4.0, y1, x1 + 4.0, y2, MFD_COLOUR1);

  023a1	b8 04 00 00 00	 mov	 eax, 4
  023a6	6b c8 00	 imul	 ecx, eax, 0
  023a9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  023af	52		 push	 edx
  023b0	51		 push	 ecx
  023b1	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  023b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023bb	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  023c0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  023c8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  023cc	51		 push	 ecx
  023cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023d2	51		 push	 ecx
  023d3	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  023d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023dd	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  023e2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  023ea	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  023ee	51		 push	 ecx
  023ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023f4	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9117 : 		draw_line (x1, y1, x1 + 4.0, y1, MFD_COLOUR1);

  023f9	b8 04 00 00 00	 mov	 eax, 4
  023fe	6b c8 00	 imul	 ecx, eax, 0
  02401	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02407	52		 push	 edx
  02408	51		 push	 ecx
  02409	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0240e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02413	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02418	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  02420	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02424	51		 push	 ecx
  02425	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0242a	51		 push	 ecx
  0242b	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02430	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02435	51		 push	 ecx
  02436	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0243b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02440	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9118 : 		draw_line (x1, y2, x1 + 4.0, y2, MFD_COLOUR1);

  02445	b8 04 00 00 00	 mov	 eax, 4
  0244a	6b c8 00	 imul	 ecx, eax, 0
  0244d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02453	52		 push	 edx
  02454	51		 push	 ecx
  02455	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0245a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0245f	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02464	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  0246c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02470	51		 push	 ecx
  02471	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02476	51		 push	 ecx
  02477	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0247c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02481	51		 push	 ecx
  02482	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02487	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0248c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9119 : 
; 9120 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  02491	b8 04 00 00 00	 mov	 eax, 4
  02496	6b c8 00	 imul	 ecx, eax, 0
  02499	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0249f	52		 push	 edx
  024a0	51		 push	 ecx
  024a1	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  024a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024ab	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  024b0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  024b8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  024bc	51		 push	 ecx
  024bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024c2	51		 push	 ecx
  024c3	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  024c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024cd	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  024d2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  024da	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  024de	51		 push	 ecx
  024df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024e4	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9121 : 		draw_line (x1 + 2.0, y2, x1 + 2.0, y3, MFD_COLOUR1);

  024e9	b8 04 00 00 00	 mov	 eax, 4
  024ee	6b c8 00	 imul	 ecx, eax, 0
  024f1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  024f7	52		 push	 edx
  024f8	51		 push	 ecx
  024f9	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  024fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02503	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02508	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02510	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02514	51		 push	 ecx
  02515	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0251a	51		 push	 ecx
  0251b	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02520	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02525	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0252a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02532	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02536	51		 push	 ecx
  02537	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0253c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9122 : 		draw_line (x1 + 3.0, y2, x1 + 3.0, y3, MFD_COLOUR1);

  02541	b8 04 00 00 00	 mov	 eax, 4
  02546	6b c8 00	 imul	 ecx, eax, 0
  02549	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0254f	52		 push	 edx
  02550	51		 push	 ecx
  02551	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  02556	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0255b	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02560	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  02568	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0256c	51		 push	 ecx
  0256d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02572	51		 push	 ecx
  02573	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02578	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0257d	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02582	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  0258a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0258e	51		 push	 ecx
  0258f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02594	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9123 : 
; 9124 : 		draw_mono_sprite (large_engine_bar_marker, x1 - 7.0, y1 + 20.0, MFD_COLOUR1);

  02599	b8 04 00 00 00	 mov	 eax, 4
  0259e	6b c8 00	 imul	 ecx, eax, 0
  025a1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  025a7	52		 push	 edx
  025a8	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  025ad	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4034000000000000
  025b5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  025b9	51		 push	 ecx
  025ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025bf	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  025c4	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401c000000000000
  025cc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  025d0	51		 push	 ecx
  025d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025d6	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  025db	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 9125 : 	}
; 9126 : 	else

  025e0	e9 cf 01 00 00	 jmp	 $LN35@draw_engin
$LN34@draw_engin:

; 9127 : 	{
; 9128 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  025e5	b8 04 00 00 00	 mov	 eax, 4
  025ea	6b c8 00	 imul	 ecx, eax, 0
  025ed	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  025f3	52		 push	 edx
  025f4	51		 push	 ecx
  025f5	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  025fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025ff	51		 push	 ecx
  02600	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02605	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0260a	51		 push	 ecx
  0260b	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02610	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02615	51		 push	 ecx
  02616	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0261b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02620	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9129 : 		draw_line (x1 + 2.0, y1, x1 + 2.0, y2, MFD_COLOUR1);

  02625	b8 04 00 00 00	 mov	 eax, 4
  0262a	6b c8 00	 imul	 ecx, eax, 0
  0262d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02633	52		 push	 edx
  02634	51		 push	 ecx
  02635	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0263a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0263f	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02644	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0264c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02650	51		 push	 ecx
  02651	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02656	51		 push	 ecx
  02657	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0265c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02661	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02666	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0266e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02672	51		 push	 ecx
  02673	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02678	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9130 : 		draw_line (x1, y1, x1 + 2.0, y1, MFD_COLOUR1);

  0267d	b8 04 00 00 00	 mov	 eax, 4
  02682	6b c8 00	 imul	 ecx, eax, 0
  02685	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0268b	52		 push	 edx
  0268c	51		 push	 ecx
  0268d	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02692	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02697	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0269c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  026a4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  026a8	51		 push	 ecx
  026a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026ae	51		 push	 ecx
  026af	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  026b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026b9	51		 push	 ecx
  026ba	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  026bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026c4	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9131 : 		draw_line (x1, y2, x1 + 2.0, y2, MFD_COLOUR1);

  026c9	b8 04 00 00 00	 mov	 eax, 4
  026ce	6b c8 00	 imul	 ecx, eax, 0
  026d1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  026d7	52		 push	 edx
  026d8	51		 push	 ecx
  026d9	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  026de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026e3	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  026e8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  026f0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  026f4	51		 push	 ecx
  026f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026fa	51		 push	 ecx
  026fb	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02700	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02705	51		 push	 ecx
  02706	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0270b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02710	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9132 : 
; 9133 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  02715	b8 04 00 00 00	 mov	 eax, 4
  0271a	6b c8 00	 imul	 ecx, eax, 0
  0271d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02723	52		 push	 edx
  02724	51		 push	 ecx
  02725	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  0272a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0272f	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02734	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0273c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02740	51		 push	 ecx
  02741	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02746	51		 push	 ecx
  02747	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0274c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02751	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02756	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0275e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02762	51		 push	 ecx
  02763	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02768	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9134 : 
; 9135 : 		draw_mono_sprite (small_engine_bar_marker, x1 - 4.0, y1 + 11.0, MFD_COLOUR1);

  0276d	b8 04 00 00 00	 mov	 eax, 4
  02772	6b c8 00	 imul	 ecx, eax, 0
  02775	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0277b	52		 push	 edx
  0277c	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  02781	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4026000000000000
  02789	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0278d	51		 push	 ecx
  0278e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02793	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02798	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4010000000000000
  027a0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  027a4	51		 push	 ecx
  027a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027aa	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  027af	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN35@draw_engin:

; 9136 : 	}
; 9137 : 
; 9138 : 	//
; 9139 : 	// engine 2 rpm
; 9140 : 	//
; 9141 : 
; 9142 : 	set_2d_mono_font_position (0.4 - 0.025, 0.85);

  027b4	51		 push	 ecx
  027b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  027bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027c2	51		 push	 ecx
  027c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec00000
  027cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027d0	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9143 : 
; 9144 : 	if (draw_large_mfd)

  027d5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  027dc	74 4d		 je	 SHORT $LN36@draw_engin

; 9145 : 	{
; 9146 : 		set_mono_font_rel_position (-6.0, -16.0);

  027de	51		 push	 ecx
  027df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1800000
  027e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027ec	51		 push	 ecx
  027ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  027f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027fa	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9147 : 
; 9148 : 		print_mono_font_char ('N');

  027ff	6a 4e		 push	 78			; 0000004eH
  02801	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 9149 : 
; 9150 : 		set_mono_font_rel_position (0.0, 2.0);

  02806	51		 push	 ecx
  02807	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0280f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02814	51		 push	 ecx
  02815	0f 57 c0	 xorps	 xmm0, xmm0
  02818	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0281d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9151 : 
; 9152 : 		print_mono_font_char ('P');

  02822	6a 50		 push	 80			; 00000050H
  02824	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 9153 : 	}
; 9154 : 	else

  02829	eb 4b		 jmp	 SHORT $LN37@draw_engin
$LN36@draw_engin:

; 9155 : 	{
; 9156 : 		set_mono_font_rel_position (-2.0, -7.0);

  0282b	51		 push	 ecx
  0282c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0e00000
  02834	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02839	51		 push	 ecx
  0283a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  02842	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02847	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9157 : 
; 9158 : 		print_mono_font_char ('N');

  0284c	6a 4e		 push	 78			; 0000004eH
  0284e	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 9159 : 
; 9160 : 		set_mono_font_rel_position (0.0, 1.0);

  02853	51		 push	 ecx
  02854	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0285c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02861	51		 push	 ecx
  02862	0f 57 c0	 xorps	 xmm0, xmm0
  02865	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0286a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9161 : 
; 9162 : 		print_mono_font_char ('P');

  0286f	6a 50		 push	 80			; 00000050H
  02871	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char
$LN37@draw_engin:

; 9163 : 	}
; 9164 : 
; 9165 : 	digital_readout = bound (current_flight_dynamics->right_engine_rpm.value, 0.0, 120.0);

  02876	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0287b	f3 0f 5a 80 dc
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7388]
  02883	0f 57 c9	 xorps	 xmm1, xmm1
  02886	66 0f 2f c8	 comisd	 xmm1, xmm0
  0288a	76 0d		 jbe	 SHORT $LN109@draw_engin
  0288c	0f 57 c0	 xorps	 xmm0, xmm0
  0288f	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv1403[ebp], xmm0
  02897	eb 50		 jmp	 SHORT $LN110@draw_engin
$LN109@draw_engin:
  02899	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0289f	f3 0f 5a 81 dc
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7388]
  028a7	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  028af	76 12		 jbe	 SHORT $LN107@draw_engin
  028b1	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  028b9	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv1402[ebp], xmm0
  028c1	eb 16		 jmp	 SHORT $LN108@draw_engin
$LN107@draw_engin:
  028c3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  028c9	f3 0f 5a 82 dc
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7388]
  028d1	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv1402[ebp], xmm0
$LN108@draw_engin:
  028d9	f2 0f 10 85 34
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1402[ebp]
  028e1	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv1403[ebp], xmm0
$LN110@draw_engin:
  028e9	f2 0f 5a 85 3c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv1403[ebp]
  028f1	f3 0f 11 45 84	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 9166 : 
; 9167 : 	convert_float_to_int (digital_readout, &i);

  028f6	8d 45 a0	 lea	 eax, DWORD PTR _i$[ebp]
  028f9	50		 push	 eax
  028fa	51		 push	 ecx
  028fb	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  02900	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02905	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 9168 : 
; 9169 : 	sprintf (buffer, "%03d", i);

  0290a	8b 45 a0	 mov	 eax, DWORD PTR _i$[ebp]
  0290d	50		 push	 eax
  0290e	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  02913	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  02916	51		 push	 ecx
  02917	e8 00 00 00 00	 call	 _sprintf
  0291c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9170 : 
; 9171 : 	set_2d_mono_font_position (0.4 - 0.05, -0.35);

  0291f	51		 push	 ecx
  02920	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  02928	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0292d	51		 push	 ecx
  0292e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  02936	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0293b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9172 : 
; 9173 : 	if (draw_large_mfd)

  02940	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02947	74 23		 je	 SHORT $LN38@draw_engin

; 9174 : 	{
; 9175 : 		set_mono_font_rel_position (-4.0, 8.0);

  02949	51		 push	 ecx
  0294a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  02952	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02957	51		 push	 ecx
  02958	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  02960	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02965	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9176 : 	}
; 9177 : 	else

  0296a	eb 21		 jmp	 SHORT $LN39@draw_engin
$LN38@draw_engin:

; 9178 : 	{
; 9179 : 		set_mono_font_rel_position (-2.0, 3.0);

  0296c	51		 push	 ecx
  0296d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  02975	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0297a	51		 push	 ecx
  0297b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  02983	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02988	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN39@draw_engin:

; 9180 : 	}
; 9181 : 
; 9182 : 	print_mono_font_string (buffer);

  0298d	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  02990	50		 push	 eax
  02991	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9183 : 
; 9184 : 	bar_value = digital_readout * 0.01;

  02996	f3 0f 5a 45 84	 cvtss2sd xmm0, DWORD PTR _digital_readout$[ebp]
  0299b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  029a3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  029a7	f3 0f 11 45 8c	 movss	 DWORD PTR _bar_value$[ebp], xmm0

; 9185 : 
; 9186 : 	get_2d_float_screen_coordinates (0.4 - 0.025, 0.85, &x1, &y1);

  029ac	8d 45 98	 lea	 eax, DWORD PTR _y1$[ebp]
  029af	50		 push	 eax
  029b0	8d 4d 9c	 lea	 ecx, DWORD PTR _x1$[ebp]
  029b3	51		 push	 ecx
  029b4	51		 push	 ecx
  029b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  029bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029c2	51		 push	 ecx
  029c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec00000
  029cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029d0	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 9187 : 	get_2d_float_screen_y_coordinate (-0.35, &y2);

  029d5	8d 45 94	 lea	 eax, DWORD PTR _y2$[ebp]
  029d8	50		 push	 eax
  029d9	51		 push	 ecx
  029da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  029e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029e7	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 9188 : 	get_2d_float_screen_y_coordinate (-0.35 + bar_value, &y3);

  029ec	8d 45 90	 lea	 eax, DWORD PTR _y3$[ebp]
  029ef	50		 push	 eax
  029f0	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _bar_value$[ebp]
  029f5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfd6666666666666
  029fd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02a01	51		 push	 ecx
  02a02	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a07	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 9189 : 
; 9190 : 	if (draw_large_mfd)

  02a0c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02a13	0f 84 84 02 00
	00		 je	 $LN40@draw_engin

; 9191 : 	{
; 9192 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  02a19	b8 04 00 00 00	 mov	 eax, 4
  02a1e	6b c8 00	 imul	 ecx, eax, 0
  02a21	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02a27	52		 push	 edx
  02a28	51		 push	 ecx
  02a29	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02a2e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a33	51		 push	 ecx
  02a34	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02a39	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a3e	51		 push	 ecx
  02a3f	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02a44	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a49	51		 push	 ecx
  02a4a	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02a4f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a54	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9193 : 		draw_line (x1 + 4.0, y1, x1 + 4.0, y2, MFD_COLOUR1);

  02a59	b8 04 00 00 00	 mov	 eax, 4
  02a5e	6b c8 00	 imul	 ecx, eax, 0
  02a61	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02a67	52		 push	 edx
  02a68	51		 push	 ecx
  02a69	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02a6e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a73	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02a78	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  02a80	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02a84	51		 push	 ecx
  02a85	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a8a	51		 push	 ecx
  02a8b	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02a90	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a95	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02a9a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  02aa2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02aa6	51		 push	 ecx
  02aa7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02aac	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9194 : 		draw_line (x1, y1, x1 + 4.0, y1, MFD_COLOUR1);

  02ab1	b8 04 00 00 00	 mov	 eax, 4
  02ab6	6b c8 00	 imul	 ecx, eax, 0
  02ab9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02abf	52		 push	 edx
  02ac0	51		 push	 ecx
  02ac1	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02ac6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02acb	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02ad0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  02ad8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02adc	51		 push	 ecx
  02add	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ae2	51		 push	 ecx
  02ae3	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02ae8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02aed	51		 push	 ecx
  02aee	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02af3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02af8	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9195 : 		draw_line (x1, y2, x1 + 4.0, y2, MFD_COLOUR1);

  02afd	b8 04 00 00 00	 mov	 eax, 4
  02b02	6b c8 00	 imul	 ecx, eax, 0
  02b05	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02b0b	52		 push	 edx
  02b0c	51		 push	 ecx
  02b0d	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02b12	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b17	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02b1c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  02b24	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02b28	51		 push	 ecx
  02b29	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b2e	51		 push	 ecx
  02b2f	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02b34	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b39	51		 push	 ecx
  02b3a	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02b3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b44	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9196 : 
; 9197 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  02b49	b8 04 00 00 00	 mov	 eax, 4
  02b4e	6b c8 00	 imul	 ecx, eax, 0
  02b51	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02b57	52		 push	 edx
  02b58	51		 push	 ecx
  02b59	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  02b5e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b63	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02b68	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02b70	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02b74	51		 push	 ecx
  02b75	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b7a	51		 push	 ecx
  02b7b	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02b80	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b85	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02b8a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02b92	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02b96	51		 push	 ecx
  02b97	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b9c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9198 : 		draw_line (x1 + 2.0, y2, x1 + 2.0, y3, MFD_COLOUR1);

  02ba1	b8 04 00 00 00	 mov	 eax, 4
  02ba6	6b c8 00	 imul	 ecx, eax, 0
  02ba9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02baf	52		 push	 edx
  02bb0	51		 push	 ecx
  02bb1	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  02bb6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02bbb	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02bc0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02bc8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02bcc	51		 push	 ecx
  02bcd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02bd2	51		 push	 ecx
  02bd3	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02bd8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02bdd	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02be2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02bea	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02bee	51		 push	 ecx
  02bef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02bf4	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9199 : 		draw_line (x1 + 3.0, y2, x1 + 3.0, y3, MFD_COLOUR1);

  02bf9	b8 04 00 00 00	 mov	 eax, 4
  02bfe	6b c8 00	 imul	 ecx, eax, 0
  02c01	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02c07	52		 push	 edx
  02c08	51		 push	 ecx
  02c09	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  02c0e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c13	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02c18	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  02c20	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02c24	51		 push	 ecx
  02c25	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c2a	51		 push	 ecx
  02c2b	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02c30	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c35	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02c3a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  02c42	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02c46	51		 push	 ecx
  02c47	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c4c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9200 : 
; 9201 : 		draw_mono_sprite (large_engine_bar_marker, x1 - 7.0, y1 + 20.0, MFD_COLOUR1);

  02c51	b8 04 00 00 00	 mov	 eax, 4
  02c56	6b c8 00	 imul	 ecx, eax, 0
  02c59	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02c5f	52		 push	 edx
  02c60	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  02c65	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4034000000000000
  02c6d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02c71	51		 push	 ecx
  02c72	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c77	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02c7c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401c000000000000
  02c84	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02c88	51		 push	 ecx
  02c89	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c8e	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  02c93	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 9202 : 	}
; 9203 : 	else

  02c98	e9 cf 01 00 00	 jmp	 $LN41@draw_engin
$LN40@draw_engin:

; 9204 : 	{
; 9205 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  02c9d	b8 04 00 00 00	 mov	 eax, 4
  02ca2	6b c8 00	 imul	 ecx, eax, 0
  02ca5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02cab	52		 push	 edx
  02cac	51		 push	 ecx
  02cad	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02cb2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02cb7	51		 push	 ecx
  02cb8	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02cbd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02cc2	51		 push	 ecx
  02cc3	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02cc8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ccd	51		 push	 ecx
  02cce	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02cd3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02cd8	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9206 : 		draw_line (x1 + 2.0, y1, x1 + 2.0, y2, MFD_COLOUR1);

  02cdd	b8 04 00 00 00	 mov	 eax, 4
  02ce2	6b c8 00	 imul	 ecx, eax, 0
  02ce5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02ceb	52		 push	 edx
  02cec	51		 push	 ecx
  02ced	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02cf2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02cf7	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02cfc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02d04	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02d08	51		 push	 ecx
  02d09	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d0e	51		 push	 ecx
  02d0f	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02d14	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d19	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02d1e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02d26	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02d2a	51		 push	 ecx
  02d2b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d30	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9207 : 		draw_line (x1, y1, x1 + 2.0, y1, MFD_COLOUR1);

  02d35	b8 04 00 00 00	 mov	 eax, 4
  02d3a	6b c8 00	 imul	 ecx, eax, 0
  02d3d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02d43	52		 push	 edx
  02d44	51		 push	 ecx
  02d45	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02d4a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d4f	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02d54	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02d5c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02d60	51		 push	 ecx
  02d61	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d66	51		 push	 ecx
  02d67	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02d6c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d71	51		 push	 ecx
  02d72	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02d77	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d7c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9208 : 		draw_line (x1, y2, x1 + 2.0, y2, MFD_COLOUR1);

  02d81	b8 04 00 00 00	 mov	 eax, 4
  02d86	6b c8 00	 imul	 ecx, eax, 0
  02d89	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02d8f	52		 push	 edx
  02d90	51		 push	 ecx
  02d91	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02d96	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d9b	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02da0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02da8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02dac	51		 push	 ecx
  02dad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02db2	51		 push	 ecx
  02db3	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02db8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02dbd	51		 push	 ecx
  02dbe	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02dc3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02dc8	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9209 : 
; 9210 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  02dcd	b8 04 00 00 00	 mov	 eax, 4
  02dd2	6b c8 00	 imul	 ecx, eax, 0
  02dd5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02ddb	52		 push	 edx
  02ddc	51		 push	 ecx
  02ddd	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  02de2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02de7	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02dec	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02df4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02df8	51		 push	 ecx
  02df9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02dfe	51		 push	 ecx
  02dff	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02e04	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e09	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02e0e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02e16	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02e1a	51		 push	 ecx
  02e1b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e20	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9211 : 
; 9212 : 		draw_mono_sprite (small_engine_bar_marker, x1 - 4.0, y1 + 11.0, MFD_COLOUR1);

  02e25	b8 04 00 00 00	 mov	 eax, 4
  02e2a	6b c8 00	 imul	 ecx, eax, 0
  02e2d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02e33	52		 push	 edx
  02e34	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  02e39	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4026000000000000
  02e41	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02e45	51		 push	 ecx
  02e46	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e4b	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02e50	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4010000000000000
  02e58	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02e5c	51		 push	 ecx
  02e5d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e62	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  02e67	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN41@draw_engin:

; 9213 : 	}
; 9214 : 
; 9215 : 	////////////////////////////////////////
; 9216 : 	//
; 9217 : 	// fuel
; 9218 : 	//
; 9219 : 	////////////////////////////////////////
; 9220 : 
; 9221 : 	set_2d_mono_font_position (-0.8, -0.75);

  02e6c	51		 push	 ecx
  02e6d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  02e75	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e7a	51		 push	 ecx
  02e7b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  02e83	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e88	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9222 : 
; 9223 : 	if (draw_large_mfd)

  02e8d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02e94	74 23		 je	 SHORT $LN42@draw_engin

; 9224 : 	{
; 9225 : 		set_mono_font_rel_position (2.0, -16.0);

  02e96	51		 push	 ecx
  02e97	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1800000
  02e9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ea4	51		 push	 ecx
  02ea5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02ead	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02eb2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9226 : 	}
; 9227 : 	else

  02eb7	eb 1c		 jmp	 SHORT $LN43@draw_engin
$LN42@draw_engin:

; 9228 : 	{
; 9229 : 		set_mono_font_rel_position (0.0, -7.0);

  02eb9	51		 push	 ecx
  02eba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0e00000
  02ec2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ec7	51		 push	 ecx
  02ec8	0f 57 c0	 xorps	 xmm0, xmm0
  02ecb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ed0	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN43@draw_engin:

; 9230 : 	}
; 9231 : 
; 9232 : 	print_mono_font_string ("FUEL");

  02ed5	68 00 00 00 00	 push	 OFFSET ??_C@_04DICABFLJ@FUEL@
  02eda	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9233 : 
; 9234 : 	digital_readout = bound (kilograms_to_pounds (current_flight_dynamics->fuel_weight.value), 0.0, 2500.0);

  02edf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  02ee4	f3 0f 10 80 a4
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9380]
  02eec	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  02ef4	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  02ef8	0f 57 c9	 xorps	 xmm1, xmm1
  02efb	66 0f 2f c8	 comisd	 xmm1, xmm0
  02eff	76 0d		 jbe	 SHORT $LN113@draw_engin
  02f01	0f 57 c0	 xorps	 xmm0, xmm0
  02f04	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv1615[ebp], xmm0
  02f0c	eb 68		 jmp	 SHORT $LN114@draw_engin
$LN113@draw_engin:
  02f0e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  02f14	f3 0f 10 81 a4
	24 00 00	 movss	 xmm0, DWORD PTR [ecx+9380]
  02f1c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  02f24	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  02f28	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@40a3880000000000
  02f30	76 12		 jbe	 SHORT $LN111@draw_engin
  02f32	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@40a3880000000000
  02f3a	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv1614[ebp], xmm0
  02f42	eb 22		 jmp	 SHORT $LN112@draw_engin
$LN111@draw_engin:
  02f44	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  02f4a	f3 0f 10 82 a4
	24 00 00	 movss	 xmm0, DWORD PTR [edx+9380]
  02f52	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  02f5a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  02f5e	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv1614[ebp], xmm0
$LN112@draw_engin:
  02f66	f2 0f 10 85 34
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1614[ebp]
  02f6e	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv1615[ebp], xmm0
$LN114@draw_engin:
  02f76	f2 0f 5a 85 3c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv1615[ebp]
  02f7e	f3 0f 11 45 84	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 9235 : 	convert_float_to_int (digital_readout, &i);

  02f83	8d 45 a0	 lea	 eax, DWORD PTR _i$[ebp]
  02f86	50		 push	 eax
  02f87	51		 push	 ecx
  02f88	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  02f8d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02f92	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 9236 : 	sprintf (buffer, "%04d lbs", i);

  02f97	8b 45 a0	 mov	 eax, DWORD PTR _i$[ebp]
  02f9a	50		 push	 eax
  02f9b	68 00 00 00 00	 push	 OFFSET ??_C@_08GEGEOBAJ@?$CF04d?5lbs@
  02fa0	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  02fa3	51		 push	 ecx
  02fa4	e8 00 00 00 00	 call	 _sprintf
  02fa9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9237 : 
; 9238 : 	set_2d_mono_font_position (-0.8, -0.7);

  02fac	51		 push	 ecx
  02fad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  02fb5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02fba	51		 push	 ecx
  02fbb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  02fc3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02fc8	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9239 : 
; 9240 : 	if (draw_large_mfd)

  02fcd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02fd4	74 23		 je	 SHORT $LN44@draw_engin

; 9241 : 	{
; 9242 : 		set_mono_font_rel_position (-12.0, 8.0);

  02fd6	51		 push	 ecx
  02fd7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  02fdf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02fe4	51		 push	 ecx
  02fe5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  02fed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ff2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9243 : 	}
; 9244 : 	else

  02ff7	eb 21		 jmp	 SHORT $LN45@draw_engin
$LN44@draw_engin:

; 9245 : 	{
; 9246 : 		set_mono_font_rel_position (-6.0, 3.0);

  02ff9	51		 push	 ecx
  02ffa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  03002	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03007	51		 push	 ecx
  03008	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  03010	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03015	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN45@draw_engin:

; 9247 : 	}
; 9248 : 
; 9249 : 	print_mono_font_string (buffer);

  0301a	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  0301d	50		 push	 eax
  0301e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9250 : 
; 9251 : 	////////////////////////////////////////
; 9252 : 	//
; 9253 : 	// NG RPM left engine
; 9254 : 	//
; 9255 : 	////////////////////////////////////////
; 9256 : 
; 9257 : 	set_2d_mono_font_position (0.65, 0.85);

  03023	51		 push	 ecx
  03024	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  0302c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03031	51		 push	 ecx
  03032	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  0303a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0303f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9258 : 
; 9259 : 	if (draw_large_mfd)

  03044	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0304b	74 4d		 je	 SHORT $LN46@draw_engin

; 9260 : 	{
; 9261 : 		set_mono_font_rel_position (-6.0, -16.0);

  0304d	51		 push	 ecx
  0304e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1800000
  03056	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0305b	51		 push	 ecx
  0305c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  03064	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03069	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9262 : 
; 9263 : 		print_mono_font_char ('N');

  0306e	6a 4e		 push	 78			; 0000004eH
  03070	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 9264 : 
; 9265 : 		set_mono_font_rel_position (0.0, 2.0);

  03075	51		 push	 ecx
  03076	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0307e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03083	51		 push	 ecx
  03084	0f 57 c0	 xorps	 xmm0, xmm0
  03087	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0308c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9266 : 
; 9267 : 		print_mono_font_char ('G');

  03091	6a 47		 push	 71			; 00000047H
  03093	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 9268 : 	}
; 9269 : 	else

  03098	eb 4b		 jmp	 SHORT $LN47@draw_engin
$LN46@draw_engin:

; 9270 : 	{
; 9271 : 		set_mono_font_rel_position (-2.0, -7.0);

  0309a	51		 push	 ecx
  0309b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0e00000
  030a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  030a8	51		 push	 ecx
  030a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  030b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  030b6	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9272 : 
; 9273 : 		print_mono_font_char ('N');

  030bb	6a 4e		 push	 78			; 0000004eH
  030bd	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 9274 : 
; 9275 : 		set_mono_font_rel_position (0.0, 1.0);

  030c2	51		 push	 ecx
  030c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  030cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  030d0	51		 push	 ecx
  030d1	0f 57 c0	 xorps	 xmm0, xmm0
  030d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  030d9	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9276 : 
; 9277 : 		print_mono_font_char ('G');

  030de	6a 47		 push	 71			; 00000047H
  030e0	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char
$LN47@draw_engin:

; 9278 : 	}
; 9279 : 
; 9280 : 	digital_readout = bound (current_flight_dynamics->left_engine_n1_rpm.value, 0.0, 120.0);

  030e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  030ea	f3 0f 5a 80 94
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7316]
  030f2	0f 57 c9	 xorps	 xmm1, xmm1
  030f5	66 0f 2f c8	 comisd	 xmm1, xmm0
  030f9	76 0d		 jbe	 SHORT $LN117@draw_engin
  030fb	0f 57 c0	 xorps	 xmm0, xmm0
  030fe	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv1657[ebp], xmm0
  03106	eb 50		 jmp	 SHORT $LN118@draw_engin
$LN117@draw_engin:
  03108	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0310e	f3 0f 5a 81 94
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7316]
  03116	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  0311e	76 12		 jbe	 SHORT $LN115@draw_engin
  03120	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  03128	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv1656[ebp], xmm0
  03130	eb 16		 jmp	 SHORT $LN116@draw_engin
$LN115@draw_engin:
  03132	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  03138	f3 0f 5a 82 94
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7316]
  03140	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv1656[ebp], xmm0
$LN116@draw_engin:
  03148	f2 0f 10 85 34
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1656[ebp]
  03150	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv1657[ebp], xmm0
$LN118@draw_engin:
  03158	f2 0f 5a 85 3c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv1657[ebp]
  03160	f3 0f 11 45 84	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 9281 : 	convert_float_to_int (digital_readout, &i);

  03165	8d 45 a0	 lea	 eax, DWORD PTR _i$[ebp]
  03168	50		 push	 eax
  03169	51		 push	 ecx
  0316a	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  0316f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03174	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 9282 : 	sprintf (buffer, "%03d", i);

  03179	8b 45 a0	 mov	 eax, DWORD PTR _i$[ebp]
  0317c	50		 push	 eax
  0317d	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  03182	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  03185	51		 push	 ecx
  03186	e8 00 00 00 00	 call	 _sprintf
  0318b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9283 : 
; 9284 : 	set_2d_mono_font_position (0.65 - 0.05, -0.35);

  0318e	51		 push	 ecx
  0318f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  03197	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0319c	51		 push	 ecx
  0319d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  031a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  031aa	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9285 : 
; 9286 : 	if (draw_large_mfd)

  031af	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  031b6	74 23		 je	 SHORT $LN48@draw_engin

; 9287 : 		set_mono_font_rel_position (-4.0, 8.0);

  031b8	51		 push	 ecx
  031b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  031c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  031c6	51		 push	 ecx
  031c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  031cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  031d4	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9288 : 	else

  031d9	eb 21		 jmp	 SHORT $LN49@draw_engin
$LN48@draw_engin:

; 9289 : 		set_mono_font_rel_position (-2.0, 3.0);

  031db	51		 push	 ecx
  031dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  031e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  031e9	51		 push	 ecx
  031ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  031f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  031f7	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN49@draw_engin:

; 9290 : 
; 9291 : 	print_mono_font_string (buffer);

  031fc	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  031ff	50		 push	 eax
  03200	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9292 : 
; 9293 : 	bar_value = current_flight_dynamics->left_engine_n1_rpm.value * 0.01;

  03205	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0320a	f3 0f 5a 80 94
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7316]
  03212	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  0321a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0321e	f3 0f 11 45 8c	 movss	 DWORD PTR _bar_value$[ebp], xmm0

; 9294 : 	
; 9295 : 	get_2d_float_screen_coordinates (0.65 - 0.0125, 0.85, &x1, &y1);

  03223	8d 45 98	 lea	 eax, DWORD PTR _y1$[ebp]
  03226	50		 push	 eax
  03227	8d 4d 9c	 lea	 ecx, DWORD PTR _x1$[ebp]
  0322a	51		 push	 ecx
  0322b	51		 push	 ecx
  0322c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  03234	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03239	51		 push	 ecx
  0323a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f233333
  03242	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03247	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 9296 : 	get_2d_float_screen_y_coordinate (-0.35, &y2);

  0324c	8d 45 94	 lea	 eax, DWORD PTR _y2$[ebp]
  0324f	50		 push	 eax
  03250	51		 push	 ecx
  03251	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  03259	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0325e	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 9297 : 	get_2d_float_screen_y_coordinate (-0.35 + bar_value, &y3);

  03263	8d 45 90	 lea	 eax, DWORD PTR _y3$[ebp]
  03266	50		 push	 eax
  03267	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _bar_value$[ebp]
  0326c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfd6666666666666
  03274	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03278	51		 push	 ecx
  03279	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0327e	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 9298 : 
; 9299 : 	if (draw_large_mfd)

  03283	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0328a	0f 84 cb 02 00
	00		 je	 $LN50@draw_engin

; 9300 : 	{
; 9301 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  03290	b8 04 00 00 00	 mov	 eax, 4
  03295	6b c8 00	 imul	 ecx, eax, 0
  03298	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0329e	52		 push	 edx
  0329f	51		 push	 ecx
  032a0	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  032a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  032aa	51		 push	 ecx
  032ab	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  032b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  032b5	51		 push	 ecx
  032b6	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  032bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  032c0	51		 push	 ecx
  032c1	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  032c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  032cb	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9302 : 		draw_line (x1 + 4.0, y1, x1 + 4.0, y2, MFD_COLOUR1);

  032d0	b8 04 00 00 00	 mov	 eax, 4
  032d5	6b c8 00	 imul	 ecx, eax, 0
  032d8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  032de	52		 push	 edx
  032df	51		 push	 ecx
  032e0	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  032e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  032ea	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  032ef	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  032f7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  032fb	51		 push	 ecx
  032fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03301	51		 push	 ecx
  03302	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  03307	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0330c	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03311	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  03319	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0331d	51		 push	 ecx
  0331e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03323	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9303 : 		draw_line (x1, y1, x1 + 4.0, y1, MFD_COLOUR1);

  03328	b8 04 00 00 00	 mov	 eax, 4
  0332d	6b c8 00	 imul	 ecx, eax, 0
  03330	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03336	52		 push	 edx
  03337	51		 push	 ecx
  03338	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0333d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03342	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03347	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  0334f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03353	51		 push	 ecx
  03354	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03359	51		 push	 ecx
  0335a	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0335f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03364	51		 push	 ecx
  03365	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0336a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0336f	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9304 : 		draw_line (x1, y2, x1 + 4.0, y2, MFD_COLOUR1);

  03374	b8 04 00 00 00	 mov	 eax, 4
  03379	6b c8 00	 imul	 ecx, eax, 0
  0337c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03382	52		 push	 edx
  03383	51		 push	 ecx
  03384	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03389	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0338e	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03393	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  0339b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0339f	51		 push	 ecx
  033a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  033a5	51		 push	 ecx
  033a6	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  033ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  033b0	51		 push	 ecx
  033b1	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  033b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  033bb	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9305 : 
; 9306 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  033c0	b8 04 00 00 00	 mov	 eax, 4
  033c5	6b c8 00	 imul	 ecx, eax, 0
  033c8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  033ce	52		 push	 edx
  033cf	51		 push	 ecx
  033d0	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  033d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  033da	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  033df	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  033e7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  033eb	51		 push	 ecx
  033ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  033f1	51		 push	 ecx
  033f2	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  033f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  033fc	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03401	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  03409	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0340d	51		 push	 ecx
  0340e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03413	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9307 : 		draw_line (x1 + 2.0, y2, x1 + 2.0, y3, MFD_COLOUR1);

  03418	b8 04 00 00 00	 mov	 eax, 4
  0341d	6b c8 00	 imul	 ecx, eax, 0
  03420	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03426	52		 push	 edx
  03427	51		 push	 ecx
  03428	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  0342d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03432	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03437	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0343f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03443	51		 push	 ecx
  03444	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03449	51		 push	 ecx
  0344a	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0344f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03454	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03459	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  03461	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03465	51		 push	 ecx
  03466	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0346b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9308 : 		draw_line (x1 + 3.0, y2, x1 + 3.0, y3, MFD_COLOUR1);

  03470	b8 04 00 00 00	 mov	 eax, 4
  03475	6b c8 00	 imul	 ecx, eax, 0
  03478	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0347e	52		 push	 edx
  0347f	51		 push	 ecx
  03480	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  03485	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0348a	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0348f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  03497	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0349b	51		 push	 ecx
  0349c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  034a1	51		 push	 ecx
  034a2	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  034a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  034ac	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  034b1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  034b9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  034bd	51		 push	 ecx
  034be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  034c3	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9309 : 
; 9310 : 		draw_mono_sprite (large_engine_bar_marker, x1 + 5.0, y1 + 20.0, MFD_COLOUR1);

  034c8	b8 04 00 00 00	 mov	 eax, 4
  034cd	6b c8 00	 imul	 ecx, eax, 0
  034d0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  034d6	52		 push	 edx
  034d7	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  034dc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4034000000000000
  034e4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  034e8	51		 push	 ecx
  034e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  034ee	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  034f3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4014000000000000
  034fb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  034ff	51		 push	 ecx
  03500	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03505	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  0350a	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 9311 : 		draw_mono_sprite (large_engine_bar_marker, x1 + 5.0, y1 + 65.0, MFD_COLOUR1);

  0350f	b8 04 00 00 00	 mov	 eax, 4
  03514	6b c8 00	 imul	 ecx, eax, 0
  03517	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0351d	52		 push	 edx
  0351e	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  03523	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4050400000000000
  0352b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0352f	51		 push	 ecx
  03530	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03535	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0353a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4014000000000000
  03542	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03546	51		 push	 ecx
  03547	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0354c	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  03551	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 9312 : 	}
; 9313 : 	else

  03556	e9 16 02 00 00	 jmp	 $LN51@draw_engin
$LN50@draw_engin:

; 9314 : 	{
; 9315 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  0355b	b8 04 00 00 00	 mov	 eax, 4
  03560	6b c8 00	 imul	 ecx, eax, 0
  03563	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03569	52		 push	 edx
  0356a	51		 push	 ecx
  0356b	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03570	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03575	51		 push	 ecx
  03576	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0357b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03580	51		 push	 ecx
  03581	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  03586	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0358b	51		 push	 ecx
  0358c	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  03591	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03596	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9316 : 		draw_line (x1 + 2.0, y1, x1 + 2.0, y2, MFD_COLOUR1);

  0359b	b8 04 00 00 00	 mov	 eax, 4
  035a0	6b c8 00	 imul	 ecx, eax, 0
  035a3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  035a9	52		 push	 edx
  035aa	51		 push	 ecx
  035ab	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  035b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  035b5	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  035ba	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  035c2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  035c6	51		 push	 ecx
  035c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  035cc	51		 push	 ecx
  035cd	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  035d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  035d7	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  035dc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  035e4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  035e8	51		 push	 ecx
  035e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  035ee	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9317 : 		draw_line (x1, y1, x1 + 2.0, y1, MFD_COLOUR1);

  035f3	b8 04 00 00 00	 mov	 eax, 4
  035f8	6b c8 00	 imul	 ecx, eax, 0
  035fb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03601	52		 push	 edx
  03602	51		 push	 ecx
  03603	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  03608	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0360d	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03612	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0361a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0361e	51		 push	 ecx
  0361f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03624	51		 push	 ecx
  03625	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0362a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0362f	51		 push	 ecx
  03630	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  03635	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0363a	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9318 : 		draw_line (x1, y2, x1 + 2.0, y2, MFD_COLOUR1);

  0363f	b8 04 00 00 00	 mov	 eax, 4
  03644	6b c8 00	 imul	 ecx, eax, 0
  03647	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0364d	52		 push	 edx
  0364e	51		 push	 ecx
  0364f	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03654	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03659	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0365e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  03666	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0366a	51		 push	 ecx
  0366b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03670	51		 push	 ecx
  03671	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03676	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0367b	51		 push	 ecx
  0367c	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  03681	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03686	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9319 : 
; 9320 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  0368b	b8 04 00 00 00	 mov	 eax, 4
  03690	6b c8 00	 imul	 ecx, eax, 0
  03693	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03699	52		 push	 edx
  0369a	51		 push	 ecx
  0369b	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  036a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  036a5	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  036aa	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  036b2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  036b6	51		 push	 ecx
  036b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  036bc	51		 push	 ecx
  036bd	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  036c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  036c7	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  036cc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  036d4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  036d8	51		 push	 ecx
  036d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  036de	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9321 : 
; 9322 : 		draw_mono_sprite (small_engine_bar_marker, x1 + 3.0, y1 + 11.0, MFD_COLOUR1);

  036e3	b8 04 00 00 00	 mov	 eax, 4
  036e8	6b c8 00	 imul	 ecx, eax, 0
  036eb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  036f1	52		 push	 edx
  036f2	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  036f7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4026000000000000
  036ff	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03703	51		 push	 ecx
  03704	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03709	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0370e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  03716	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0371a	51		 push	 ecx
  0371b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03720	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  03725	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 9323 : 		draw_mono_sprite (small_engine_bar_marker, x1 + 3.0, y1 + 33.0, MFD_COLOUR1);

  0372a	b8 04 00 00 00	 mov	 eax, 4
  0372f	6b c8 00	 imul	 ecx, eax, 0
  03732	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03738	52		 push	 edx
  03739	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  0373e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4040800000000000
  03746	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0374a	51		 push	 ecx
  0374b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03750	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03755	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  0375d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03761	51		 push	 ecx
  03762	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03767	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  0376c	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN51@draw_engin:

; 9324 : 	}
; 9325 : 
; 9326 : 	////////////////////////////////////////
; 9327 : 	//
; 9328 : 	// NG RPM right engine
; 9329 : 	//
; 9330 : 	////////////////////////////////////////
; 9331 : 
; 9332 : 	set_2d_mono_font_position (0.85, 0.85);

  03771	51		 push	 ecx
  03772	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  0377a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0377f	51		 push	 ecx
  03780	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  03788	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0378d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9333 : 
; 9334 : 	if (draw_large_mfd)

  03792	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  03799	74 4d		 je	 SHORT $LN52@draw_engin

; 9335 : 	{
; 9336 : 		set_mono_font_rel_position (-6.0, -16.0);

  0379b	51		 push	 ecx
  0379c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1800000
  037a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  037a9	51		 push	 ecx
  037aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  037b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  037b7	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9337 : 
; 9338 : 		print_mono_font_char ('N');

  037bc	6a 4e		 push	 78			; 0000004eH
  037be	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 9339 : 
; 9340 : 		set_mono_font_rel_position (0.0, 2.0);

  037c3	51		 push	 ecx
  037c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  037cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  037d1	51		 push	 ecx
  037d2	0f 57 c0	 xorps	 xmm0, xmm0
  037d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  037da	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9341 : 
; 9342 : 		print_mono_font_char ('G');

  037df	6a 47		 push	 71			; 00000047H
  037e1	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 9343 : 	}
; 9344 : 	else

  037e6	eb 4b		 jmp	 SHORT $LN53@draw_engin
$LN52@draw_engin:

; 9345 : 	{
; 9346 : 		set_mono_font_rel_position (-2.0, -7.0);

  037e8	51		 push	 ecx
  037e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0e00000
  037f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  037f6	51		 push	 ecx
  037f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  037ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03804	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9347 : 
; 9348 : 		print_mono_font_char ('N');

  03809	6a 4e		 push	 78			; 0000004eH
  0380b	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 9349 : 
; 9350 : 		set_mono_font_rel_position (0.0, 1.0);

  03810	51		 push	 ecx
  03811	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  03819	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0381e	51		 push	 ecx
  0381f	0f 57 c0	 xorps	 xmm0, xmm0
  03822	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03827	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9351 : 
; 9352 : 		print_mono_font_char ('G');

  0382c	6a 47		 push	 71			; 00000047H
  0382e	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char
$LN53@draw_engin:

; 9353 : 	}
; 9354 : 
; 9355 : 	digital_readout = bound (current_flight_dynamics->right_engine_n1_rpm.value, 0.0, 120.0);

  03833	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  03838	f3 0f 5a 80 f4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7412]
  03840	0f 57 c9	 xorps	 xmm1, xmm1
  03843	66 0f 2f c8	 comisd	 xmm1, xmm0
  03847	76 0d		 jbe	 SHORT $LN121@draw_engin
  03849	0f 57 c0	 xorps	 xmm0, xmm0
  0384c	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv1896[ebp], xmm0
  03854	eb 50		 jmp	 SHORT $LN122@draw_engin
$LN121@draw_engin:
  03856	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0385c	f3 0f 5a 81 f4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7412]
  03864	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  0386c	76 12		 jbe	 SHORT $LN119@draw_engin
  0386e	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  03876	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv1895[ebp], xmm0
  0387e	eb 16		 jmp	 SHORT $LN120@draw_engin
$LN119@draw_engin:
  03880	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  03886	f3 0f 5a 82 f4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7412]
  0388e	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv1895[ebp], xmm0
$LN120@draw_engin:
  03896	f2 0f 10 85 34
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1895[ebp]
  0389e	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv1896[ebp], xmm0
$LN122@draw_engin:
  038a6	f2 0f 5a 85 3c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv1896[ebp]
  038ae	f3 0f 11 45 84	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 9356 : 	convert_float_to_int (digital_readout, &i);

  038b3	8d 45 a0	 lea	 eax, DWORD PTR _i$[ebp]
  038b6	50		 push	 eax
  038b7	51		 push	 ecx
  038b8	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  038bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  038c2	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 9357 : 	sprintf (buffer, "%03d", i);

  038c7	8b 45 a0	 mov	 eax, DWORD PTR _i$[ebp]
  038ca	50		 push	 eax
  038cb	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  038d0	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  038d3	51		 push	 ecx
  038d4	e8 00 00 00 00	 call	 _sprintf
  038d9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9358 : 
; 9359 : 	set_2d_mono_font_position (0.85, -0.35);

  038dc	51		 push	 ecx
  038dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  038e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  038ea	51		 push	 ecx
  038eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  038f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  038f8	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9360 : 
; 9361 : 	if (draw_large_mfd)

  038fd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  03904	74 23		 je	 SHORT $LN54@draw_engin

; 9362 : 		set_mono_font_rel_position (-4.0, 8.0);

  03906	51		 push	 ecx
  03907	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  0390f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03914	51		 push	 ecx
  03915	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  0391d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03922	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9363 : 	else

  03927	eb 21		 jmp	 SHORT $LN55@draw_engin
$LN54@draw_engin:

; 9364 : 		set_mono_font_rel_position (-2.0, 3.0);

  03929	51		 push	 ecx
  0392a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  03932	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03937	51		 push	 ecx
  03938	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  03940	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03945	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN55@draw_engin:

; 9365 : 
; 9366 : 	print_mono_font_string (buffer);

  0394a	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  0394d	50		 push	 eax
  0394e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9367 : 
; 9368 : 	bar_value = current_flight_dynamics->right_engine_n1_rpm.value * 0.01;

  03953	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  03958	f3 0f 5a 80 f4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7412]
  03960	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  03968	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0396c	f3 0f 11 45 8c	 movss	 DWORD PTR _bar_value$[ebp], xmm0

; 9369 : 	
; 9370 : 	get_2d_float_screen_coordinates (0.85 - 0.0125, 0.85, &x1, &y1);

  03971	8d 45 98	 lea	 eax, DWORD PTR _y1$[ebp]
  03974	50		 push	 eax
  03975	8d 4d 9c	 lea	 ecx, DWORD PTR _x1$[ebp]
  03978	51		 push	 ecx
  03979	51		 push	 ecx
  0397a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  03982	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03987	51		 push	 ecx
  03988	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f566666
  03990	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03995	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 9371 : 	get_2d_float_screen_y_coordinate (-0.35, &y2);

  0399a	8d 45 94	 lea	 eax, DWORD PTR _y2$[ebp]
  0399d	50		 push	 eax
  0399e	51		 push	 ecx
  0399f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  039a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  039ac	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 9372 : 	get_2d_float_screen_y_coordinate (-0.35 + bar_value, &y3);

  039b1	8d 45 90	 lea	 eax, DWORD PTR _y3$[ebp]
  039b4	50		 push	 eax
  039b5	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _bar_value$[ebp]
  039ba	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfd6666666666666
  039c2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  039c6	51		 push	 ecx
  039c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  039cc	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 9373 : 
; 9374 : 	if (draw_large_mfd)

  039d1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  039d8	0f 84 cb 02 00
	00		 je	 $LN56@draw_engin

; 9375 : 	{
; 9376 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  039de	b8 04 00 00 00	 mov	 eax, 4
  039e3	6b c8 00	 imul	 ecx, eax, 0
  039e6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  039ec	52		 push	 edx
  039ed	51		 push	 ecx
  039ee	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  039f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  039f8	51		 push	 ecx
  039f9	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  039fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03a03	51		 push	 ecx
  03a04	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  03a09	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03a0e	51		 push	 ecx
  03a0f	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  03a14	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03a19	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9377 : 		draw_line (x1 + 4.0, y1, x1 + 4.0, y2, MFD_COLOUR1);

  03a1e	b8 04 00 00 00	 mov	 eax, 4
  03a23	6b c8 00	 imul	 ecx, eax, 0
  03a26	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03a2c	52		 push	 edx
  03a2d	51		 push	 ecx
  03a2e	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03a33	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03a38	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03a3d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  03a45	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03a49	51		 push	 ecx
  03a4a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03a4f	51		 push	 ecx
  03a50	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  03a55	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03a5a	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03a5f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  03a67	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03a6b	51		 push	 ecx
  03a6c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03a71	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9378 : 		draw_line (x1, y1, x1 + 4.0, y1, MFD_COLOUR1);

  03a76	b8 04 00 00 00	 mov	 eax, 4
  03a7b	6b c8 00	 imul	 ecx, eax, 0
  03a7e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03a84	52		 push	 edx
  03a85	51		 push	 ecx
  03a86	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  03a8b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03a90	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03a95	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  03a9d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03aa1	51		 push	 ecx
  03aa2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03aa7	51		 push	 ecx
  03aa8	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  03aad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03ab2	51		 push	 ecx
  03ab3	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  03ab8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03abd	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9379 : 		draw_line (x1, y2, x1 + 4.0, y2, MFD_COLOUR1);

  03ac2	b8 04 00 00 00	 mov	 eax, 4
  03ac7	6b c8 00	 imul	 ecx, eax, 0
  03aca	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03ad0	52		 push	 edx
  03ad1	51		 push	 ecx
  03ad2	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03ad7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03adc	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03ae1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  03ae9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03aed	51		 push	 ecx
  03aee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03af3	51		 push	 ecx
  03af4	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03af9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03afe	51		 push	 ecx
  03aff	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  03b04	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03b09	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9380 : 
; 9381 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  03b0e	b8 04 00 00 00	 mov	 eax, 4
  03b13	6b c8 00	 imul	 ecx, eax, 0
  03b16	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03b1c	52		 push	 edx
  03b1d	51		 push	 ecx
  03b1e	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  03b23	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03b28	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03b2d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  03b35	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03b39	51		 push	 ecx
  03b3a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03b3f	51		 push	 ecx
  03b40	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03b45	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03b4a	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03b4f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  03b57	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03b5b	51		 push	 ecx
  03b5c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03b61	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9382 : 		draw_line (x1 + 2.0, y2, x1 + 2.0, y3, MFD_COLOUR1);

  03b66	b8 04 00 00 00	 mov	 eax, 4
  03b6b	6b c8 00	 imul	 ecx, eax, 0
  03b6e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03b74	52		 push	 edx
  03b75	51		 push	 ecx
  03b76	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  03b7b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03b80	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03b85	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  03b8d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03b91	51		 push	 ecx
  03b92	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03b97	51		 push	 ecx
  03b98	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03b9d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03ba2	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03ba7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  03baf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03bb3	51		 push	 ecx
  03bb4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03bb9	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9383 : 		draw_line (x1 + 3.0, y2, x1 + 3.0, y3, MFD_COLOUR1);

  03bbe	b8 04 00 00 00	 mov	 eax, 4
  03bc3	6b c8 00	 imul	 ecx, eax, 0
  03bc6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03bcc	52		 push	 edx
  03bcd	51		 push	 ecx
  03bce	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  03bd3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03bd8	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03bdd	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  03be5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03be9	51		 push	 ecx
  03bea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03bef	51		 push	 ecx
  03bf0	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03bf5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03bfa	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03bff	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  03c07	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03c0b	51		 push	 ecx
  03c0c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03c11	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9384 : 
; 9385 : 		draw_mono_sprite (large_engine_bar_marker, x1 - 7.0, y1 + 20.0, MFD_COLOUR1);

  03c16	b8 04 00 00 00	 mov	 eax, 4
  03c1b	6b c8 00	 imul	 ecx, eax, 0
  03c1e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03c24	52		 push	 edx
  03c25	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  03c2a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4034000000000000
  03c32	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03c36	51		 push	 ecx
  03c37	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03c3c	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03c41	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401c000000000000
  03c49	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03c4d	51		 push	 ecx
  03c4e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03c53	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  03c58	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 9386 : 		draw_mono_sprite (large_engine_bar_marker, x1 - 7.0, y1 + 65.0, MFD_COLOUR1);

  03c5d	b8 04 00 00 00	 mov	 eax, 4
  03c62	6b c8 00	 imul	 ecx, eax, 0
  03c65	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03c6b	52		 push	 edx
  03c6c	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  03c71	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4050400000000000
  03c79	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03c7d	51		 push	 ecx
  03c7e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03c83	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03c88	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401c000000000000
  03c90	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03c94	51		 push	 ecx
  03c95	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03c9a	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  03c9f	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 9387 : 
; 9388 : 	}
; 9389 : 	else

  03ca4	e9 16 02 00 00	 jmp	 $LN57@draw_engin
$LN56@draw_engin:

; 9390 : 	{
; 9391 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  03ca9	b8 04 00 00 00	 mov	 eax, 4
  03cae	6b c8 00	 imul	 ecx, eax, 0
  03cb1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03cb7	52		 push	 edx
  03cb8	51		 push	 ecx
  03cb9	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03cbe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03cc3	51		 push	 ecx
  03cc4	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  03cc9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03cce	51		 push	 ecx
  03ccf	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  03cd4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03cd9	51		 push	 ecx
  03cda	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  03cdf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03ce4	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9392 : 		draw_line (x1 + 2.0, y1, x1 + 2.0, y2, MFD_COLOUR1);

  03ce9	b8 04 00 00 00	 mov	 eax, 4
  03cee	6b c8 00	 imul	 ecx, eax, 0
  03cf1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03cf7	52		 push	 edx
  03cf8	51		 push	 ecx
  03cf9	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03cfe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03d03	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03d08	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  03d10	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03d14	51		 push	 ecx
  03d15	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03d1a	51		 push	 ecx
  03d1b	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  03d20	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03d25	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03d2a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  03d32	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03d36	51		 push	 ecx
  03d37	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03d3c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9393 : 		draw_line (x1, y1, x1 + 2.0, y1, MFD_COLOUR1);

  03d41	b8 04 00 00 00	 mov	 eax, 4
  03d46	6b c8 00	 imul	 ecx, eax, 0
  03d49	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03d4f	52		 push	 edx
  03d50	51		 push	 ecx
  03d51	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  03d56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03d5b	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03d60	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  03d68	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03d6c	51		 push	 ecx
  03d6d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03d72	51		 push	 ecx
  03d73	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y1$[ebp]
  03d78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03d7d	51		 push	 ecx
  03d7e	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  03d83	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03d88	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9394 : 		draw_line (x1, y2, x1 + 2.0, y2, MFD_COLOUR1);

  03d8d	b8 04 00 00 00	 mov	 eax, 4
  03d92	6b c8 00	 imul	 ecx, eax, 0
  03d95	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03d9b	52		 push	 edx
  03d9c	51		 push	 ecx
  03d9d	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03da2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03da7	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03dac	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  03db4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03db8	51		 push	 ecx
  03db9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03dbe	51		 push	 ecx
  03dbf	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03dc4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03dc9	51		 push	 ecx
  03dca	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  03dcf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03dd4	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9395 : 
; 9396 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  03dd9	b8 04 00 00 00	 mov	 eax, 4
  03dde	6b c8 00	 imul	 ecx, eax, 0
  03de1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03de7	52		 push	 edx
  03de8	51		 push	 ecx
  03de9	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _y3$[ebp]
  03dee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03df3	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03df8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  03e00	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03e04	51		 push	 ecx
  03e05	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03e0a	51		 push	 ecx
  03e0b	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03e10	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03e15	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03e1a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  03e22	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03e26	51		 push	 ecx
  03e27	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03e2c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 9397 : 		
; 9398 : 		draw_mono_sprite (small_engine_bar_marker, x1 - 4.0, y1 + 33.0, MFD_COLOUR1);

  03e31	b8 04 00 00 00	 mov	 eax, 4
  03e36	6b c8 00	 imul	 ecx, eax, 0
  03e39	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03e3f	52		 push	 edx
  03e40	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  03e45	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4040800000000000
  03e4d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03e51	51		 push	 ecx
  03e52	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03e57	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03e5c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4010000000000000
  03e64	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03e68	51		 push	 ecx
  03e69	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03e6e	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  03e73	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 9399 : 		draw_mono_sprite (small_engine_bar_marker, x1 - 4.0, y1 + 11.0, MFD_COLOUR1);

  03e78	b8 04 00 00 00	 mov	 eax, 4
  03e7d	6b c8 00	 imul	 ecx, eax, 0
  03e80	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03e86	52		 push	 edx
  03e87	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  03e8c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4026000000000000
  03e94	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03e98	51		 push	 ecx
  03e99	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03e9e	f3 0f 5a 45 9c	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03ea3	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4010000000000000
  03eab	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03eaf	51		 push	 ecx
  03eb0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03eb5	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  03eba	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN57@draw_engin:

; 9400 : 	}
; 9401 : 	
; 9402 : 	////////////////////////////////////////
; 9403 : 	//
; 9404 : 	// Throttles
; 9405 : 	//
; 9406 : 	////////////////////////////////////////
; 9407 : 
; 9408 : 	set_2d_mono_font_position (-0.25, -0.75);

  03ebf	51		 push	 ecx
  03ec0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  03ec8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03ecd	51		 push	 ecx
  03ece	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  03ed6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03edb	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9409 : 
; 9410 : 	if (draw_large_mfd)

  03ee0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  03ee7	74 23		 je	 SHORT $LN58@draw_engin

; 9411 : 	{
; 9412 : 		set_mono_font_rel_position (2.0, -16.0);

  03ee9	51		 push	 ecx
  03eea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1800000
  03ef2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03ef7	51		 push	 ecx
  03ef8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  03f00	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03f05	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9413 : 	}
; 9414 : 	else

  03f0a	eb 1c		 jmp	 SHORT $LN59@draw_engin
$LN58@draw_engin:

; 9415 : 	{
; 9416 : 		set_mono_font_rel_position (0.0, -7.0);

  03f0c	51		 push	 ecx
  03f0d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0e00000
  03f15	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03f1a	51		 push	 ecx
  03f1b	0f 57 c0	 xorps	 xmm0, xmm0
  03f1e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03f23	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN59@draw_engin:

; 9417 : 	}
; 9418 : 
; 9419 : 	print_mono_font_string ("THROTTLE");

  03f28	68 00 00 00 00	 push	 OFFSET ??_C@_08PLAGFMEO@THROTTLE@
  03f2d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9420 : 
; 9421 : 	digital_readout = bound (current_flight_dynamics->left_engine_n1_rpm.max, 0.0, 110.0);

  03f32	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  03f37	f3 0f 5a 80 a0
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7328]
  03f3f	0f 57 c9	 xorps	 xmm1, xmm1
  03f42	66 0f 2f c8	 comisd	 xmm1, xmm0
  03f46	76 0d		 jbe	 SHORT $LN125@draw_engin
  03f48	0f 57 c0	 xorps	 xmm0, xmm0
  03f4b	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv2128[ebp], xmm0
  03f53	eb 50		 jmp	 SHORT $LN126@draw_engin
$LN125@draw_engin:
  03f55	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  03f5b	f3 0f 5a 81 a0
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7328]
  03f63	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405b800000000000
  03f6b	76 12		 jbe	 SHORT $LN123@draw_engin
  03f6d	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405b800000000000
  03f75	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv2127[ebp], xmm0
  03f7d	eb 16		 jmp	 SHORT $LN124@draw_engin
$LN123@draw_engin:
  03f7f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  03f85	f3 0f 5a 82 a0
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7328]
  03f8d	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv2127[ebp], xmm0
$LN124@draw_engin:
  03f95	f2 0f 10 85 34
	ff ff ff	 movsd	 xmm0, QWORD PTR tv2127[ebp]
  03f9d	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv2128[ebp], xmm0
$LN126@draw_engin:
  03fa5	f2 0f 5a 85 3c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv2128[ebp]
  03fad	f3 0f 11 45 84	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 9422 : 	convert_float_to_int (digital_readout, &i);

  03fb2	8d 45 a0	 lea	 eax, DWORD PTR _i$[ebp]
  03fb5	50		 push	 eax
  03fb6	51		 push	 ecx
  03fb7	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  03fbc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03fc1	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 9423 : 
; 9424 : 	if (i < 60)

  03fc6	83 7d a0 3c	 cmp	 DWORD PTR _i$[ebp], 60	; 0000003cH
  03fca	7d 13		 jge	 SHORT $LN60@draw_engin

; 9425 : 		sprintf(buffer2, "OFF ");

  03fcc	68 00 00 00 00	 push	 OFFSET ??_C@_04LMJCBFEL@OFF?5@
  03fd1	8d 45 a4	 lea	 eax, DWORD PTR _buffer2$[ebp]
  03fd4	50		 push	 eax
  03fd5	e8 00 00 00 00	 call	 _sprintf
  03fda	83 c4 08	 add	 esp, 8
  03fdd	eb 58		 jmp	 SHORT $LN65@draw_engin
$LN60@draw_engin:

; 9426 : 	else if (i == 60)

  03fdf	83 7d a0 3c	 cmp	 DWORD PTR _i$[ebp], 60	; 0000003cH
  03fe3	75 13		 jne	 SHORT $LN62@draw_engin

; 9427 : 		sprintf(buffer2, "IDLE");

  03fe5	68 00 00 00 00	 push	 OFFSET ??_C@_04IMMGDCFE@IDLE@
  03fea	8d 45 a4	 lea	 eax, DWORD PTR _buffer2$[ebp]
  03fed	50		 push	 eax
  03fee	e8 00 00 00 00	 call	 _sprintf
  03ff3	83 c4 08	 add	 esp, 8
  03ff6	eb 3f		 jmp	 SHORT $LN65@draw_engin
$LN62@draw_engin:

; 9428 : 	else if (i == 110.0)

  03ff8	f2 0f 2a 45 a0	 cvtsi2sd xmm0, DWORD PTR _i$[ebp]
  03ffd	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@405b800000000000
  04005	9f		 lahf
  04006	f6 c4 44	 test	 ah, 68			; 00000044H
  04009	7a 13		 jp	 SHORT $LN64@draw_engin

; 9429 : 		sprintf(buffer2, "FLY ");

  0400b	68 00 00 00 00	 push	 OFFSET ??_C@_04MJEFHDBD@FLY?5@
  04010	8d 45 a4	 lea	 eax, DWORD PTR _buffer2$[ebp]
  04013	50		 push	 eax
  04014	e8 00 00 00 00	 call	 _sprintf
  04019	83 c4 08	 add	 esp, 8

; 9430 : 	else

  0401c	eb 19		 jmp	 SHORT $LN65@draw_engin
$LN64@draw_engin:

; 9431 : 		sprintf(buffer2, "%03d%%", (i-60) * 2);

  0401e	8b 45 a0	 mov	 eax, DWORD PTR _i$[ebp]
  04021	8d 4c 00 88	 lea	 ecx, DWORD PTR [eax+eax-120]
  04025	51		 push	 ecx
  04026	68 00 00 00 00	 push	 OFFSET ??_C@_06HPNMMHPJ@?$CF03d?$CF?$CF@
  0402b	8d 55 a4	 lea	 edx, DWORD PTR _buffer2$[ebp]
  0402e	52		 push	 edx
  0402f	e8 00 00 00 00	 call	 _sprintf
  04034	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN65@draw_engin:

; 9432 : 
; 9433 : 	set_2d_mono_font_position (0.0, -0.75);

  04037	51		 push	 ecx
  04038	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  04040	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04045	51		 push	 ecx
  04046	0f 57 c0	 xorps	 xmm0, xmm0
  04049	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0404e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9434 : 
; 9435 : 	digital_readout = bound (current_flight_dynamics->right_engine_n1_rpm.max, 0.0, 110.0);

  04053	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  04058	f3 0f 5a 80 00
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7424]
  04060	0f 57 c9	 xorps	 xmm1, xmm1
  04063	66 0f 2f c8	 comisd	 xmm1, xmm0
  04067	76 0d		 jbe	 SHORT $LN129@draw_engin
  04069	0f 57 c0	 xorps	 xmm0, xmm0
  0406c	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv2161[ebp], xmm0
  04074	eb 50		 jmp	 SHORT $LN130@draw_engin
$LN129@draw_engin:
  04076	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0407c	f3 0f 5a 81 00
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7424]
  04084	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405b800000000000
  0408c	76 12		 jbe	 SHORT $LN127@draw_engin
  0408e	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405b800000000000
  04096	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv2160[ebp], xmm0
  0409e	eb 16		 jmp	 SHORT $LN128@draw_engin
$LN127@draw_engin:
  040a0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  040a6	f3 0f 5a 82 00
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7424]
  040ae	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv2160[ebp], xmm0
$LN128@draw_engin:
  040b6	f2 0f 10 85 34
	ff ff ff	 movsd	 xmm0, QWORD PTR tv2160[ebp]
  040be	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv2161[ebp], xmm0
$LN130@draw_engin:
  040c6	f2 0f 5a 85 3c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv2161[ebp]
  040ce	f3 0f 11 45 84	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 9436 : 	convert_float_to_int (digital_readout, &i);

  040d3	8d 45 a0	 lea	 eax, DWORD PTR _i$[ebp]
  040d6	50		 push	 eax
  040d7	51		 push	 ecx
  040d8	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  040dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  040e2	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 9437 : 
; 9438 : 	if (i< 60)

  040e7	83 7d a0 3c	 cmp	 DWORD PTR _i$[ebp], 60	; 0000003cH
  040eb	7d 17		 jge	 SHORT $LN66@draw_engin

; 9439 : 		sprintf(buffer, " %s OFF ", buffer2);

  040ed	8d 45 a4	 lea	 eax, DWORD PTR _buffer2$[ebp]
  040f0	50		 push	 eax
  040f1	68 00 00 00 00	 push	 OFFSET ??_C@_08HFPCNHOJ@?5?$CFs?5OFF?5@
  040f6	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  040f9	51		 push	 ecx
  040fa	e8 00 00 00 00	 call	 _sprintf
  040ff	83 c4 0c	 add	 esp, 12			; 0000000cH
  04102	eb 64		 jmp	 SHORT $LN71@draw_engin
$LN66@draw_engin:

; 9440 : 	else if (i == 60)

  04104	83 7d a0 3c	 cmp	 DWORD PTR _i$[ebp], 60	; 0000003cH
  04108	75 17		 jne	 SHORT $LN68@draw_engin

; 9441 : 		sprintf(buffer, " %s IDLE", buffer2);

  0410a	8d 45 a4	 lea	 eax, DWORD PTR _buffer2$[ebp]
  0410d	50		 push	 eax
  0410e	68 00 00 00 00	 push	 OFFSET ??_C@_08EFKGPAPG@?5?$CFs?5IDLE@
  04113	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  04116	51		 push	 ecx
  04117	e8 00 00 00 00	 call	 _sprintf
  0411c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0411f	eb 47		 jmp	 SHORT $LN71@draw_engin
$LN68@draw_engin:

; 9442 : 	else if (i == 110.0)

  04121	f2 0f 2a 45 a0	 cvtsi2sd xmm0, DWORD PTR _i$[ebp]
  04126	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@405b800000000000
  0412e	9f		 lahf
  0412f	f6 c4 44	 test	 ah, 68			; 00000044H
  04132	7a 17		 jp	 SHORT $LN70@draw_engin

; 9443 : 		sprintf(buffer, " %s FLY ", buffer2);

  04134	8d 45 a4	 lea	 eax, DWORD PTR _buffer2$[ebp]
  04137	50		 push	 eax
  04138	68 00 00 00 00	 push	 OFFSET ??_C@_08CFLBLB@?5?$CFs?5FLY?5@
  0413d	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  04140	51		 push	 ecx
  04141	e8 00 00 00 00	 call	 _sprintf
  04146	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9444 : 	else

  04149	eb 1d		 jmp	 SHORT $LN71@draw_engin
$LN70@draw_engin:

; 9445 : 		sprintf(buffer, " %s %03d%%", buffer2, (i-60) * 2);

  0414b	8b 45 a0	 mov	 eax, DWORD PTR _i$[ebp]
  0414e	8d 4c 00 88	 lea	 ecx, DWORD PTR [eax+eax-120]
  04152	51		 push	 ecx
  04153	8d 55 a4	 lea	 edx, DWORD PTR _buffer2$[ebp]
  04156	52		 push	 edx
  04157	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JGIHHDGO@?5?$CFs?5?$CF03d?$CF?$CF@
  0415c	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  0415f	50		 push	 eax
  04160	e8 00 00 00 00	 call	 _sprintf
  04165	83 c4 10	 add	 esp, 16			; 00000010H
$LN71@draw_engin:

; 9446 : 
; 9447 : 	x_adjust = get_mono_font_string_width (buffer) * -0.5;

  04168	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  0416b	50		 push	 eax
  0416c	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  04171	dd 9d 3c ff ff
	ff		 fstp	 QWORD PTR tv3848[ebp]
  04177	f2 0f 10 85 3c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv3848[ebp]
  0417f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  04187	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0418b	f3 0f 11 45 88	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 9448 : 	set_mono_font_rel_position (x_adjust, 0.0);

  04190	51		 push	 ecx
  04191	0f 57 c0	 xorps	 xmm0, xmm0
  04194	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04199	51		 push	 ecx
  0419a	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0419f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  041a4	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9449 : 	print_mono_font_string (buffer);	

  041a9	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  041ac	50		 push	 eax
  041ad	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9450 : 
; 9451 : 	////////////////////////////////////////
; 9452 : 
; 9453 : 	set_2d_mono_font_position (0.5, -0.75);

  041b2	51		 push	 ecx
  041b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  041bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  041c0	51		 push	 ecx
  041c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  041c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  041ce	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 9454 : 
; 9455 : 	if (draw_large_mfd)

  041d3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  041da	74 23		 je	 SHORT $LN72@draw_engin

; 9456 : 	{
; 9457 : 		set_mono_font_rel_position (2.0, -16.0);

  041dc	51		 push	 ecx
  041dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1800000
  041e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  041ea	51		 push	 ecx
  041eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  041f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  041f8	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 9458 : 	}
; 9459 : 	else

  041fd	eb 1c		 jmp	 SHORT $LN73@draw_engin
$LN72@draw_engin:

; 9460 : 	{
; 9461 : 		set_mono_font_rel_position (0.0, -7.0);

  041ff	51		 push	 ecx
  04200	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0e00000
  04208	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0420d	51		 push	 ecx
  0420e	0f 57 c0	 xorps	 xmm0, xmm0
  04211	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04216	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN73@draw_engin:

; 9462 : 	}
; 9463 : 
; 9464 : 	digital_readout = bound (current_flight_dynamics->apu_rpm.value + 0.5, 0.0, 100.0);

  0421b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  04220	f3 0f 5a 80 3c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7484]
  04228	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  04230	0f 57 c9	 xorps	 xmm1, xmm1
  04233	66 0f 2f c8	 comisd	 xmm1, xmm0
  04237	76 0d		 jbe	 SHORT $LN133@draw_engin
  04239	0f 57 c0	 xorps	 xmm0, xmm0
  0423c	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv2214[ebp], xmm0
  04244	eb 60		 jmp	 SHORT $LN134@draw_engin
$LN133@draw_engin:
  04246	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0424c	f3 0f 5a 81 3c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7484]
  04254	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0425c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4059000000000000
  04264	76 12		 jbe	 SHORT $LN131@draw_engin
  04266	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4059000000000000
  0426e	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv2213[ebp], xmm0
  04276	eb 1e		 jmp	 SHORT $LN132@draw_engin
$LN131@draw_engin:
  04278	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0427e	f3 0f 5a 82 3c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7484]
  04286	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0428e	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv2213[ebp], xmm0
$LN132@draw_engin:
  04296	f2 0f 10 85 34
	ff ff ff	 movsd	 xmm0, QWORD PTR tv2213[ebp]
  0429e	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR tv2214[ebp], xmm0
$LN134@draw_engin:
  042a6	f2 0f 5a 85 3c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv2214[ebp]
  042ae	f3 0f 11 45 84	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 9465 : 	convert_float_to_int (digital_readout, &i);

  042b3	8d 45 a0	 lea	 eax, DWORD PTR _i$[ebp]
  042b6	50		 push	 eax
  042b7	51		 push	 ecx
  042b8	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  042bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  042c2	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 9466 : 
; 9467 : 	sprintf(buffer, "APU %03d%%", i);

  042c7	8b 45 a0	 mov	 eax, DWORD PTR _i$[ebp]
  042ca	50		 push	 eax
  042cb	68 00 00 00 00	 push	 OFFSET ??_C@_0L@OGFGIPGD@APU?5?$CF03d?$CF?$CF@
  042d0	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  042d3	51		 push	 ecx
  042d4	e8 00 00 00 00	 call	 _sprintf
  042d9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9468 : 
; 9469 : 	print_mono_font_string (buffer);

  042dc	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  042df	50		 push	 eax
  042e0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 9470 : }

  042e5	5f		 pop	 edi
  042e6	5e		 pop	 esi
  042e7	5b		 pop	 ebx
  042e8	8b e5		 mov	 esp, ebp
  042ea	5d		 pop	 ebp
  042eb	c3		 ret	 0
?draw_engine_display_mfd@@YGXXZ ENDP			; draw_engine_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_system_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv258 = -72						; size = 4
tv249 = -72						; size = 4
tv242 = -72						; size = 4
tv235 = -72						; size = 4
tv226 = -72						; size = 4
tv217 = -72						; size = 4
tv208 = -72						; size = 4
tv199 = -72						; size = 4
tv190 = -72						; size = 4
_y_adjust$ = -4						; size = 4
?draw_system_display_mfd@@YGXXZ PROC			; draw_system_display_mfd, COMDAT

; 8607 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8608 : 	float
; 8609 : 		y_adjust;
; 8610 : 
; 8611 : 	set_mono_font_colour (MFD_COLOUR1);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00017	52		 push	 edx
  00018	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8612 : 
; 8613 : 	if (draw_large_mfd)

  0001d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00024	74 16		 je	 SHORT $LN2@draw_syste

; 8614 : 	{
; 8615 : 		set_mono_font_type (MONO_FONT_TYPE_6X10);

  00026	6a 04		 push	 4
  00028	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 8616 : 
; 8617 : 		y_adjust = 2.0;

  0002d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00035	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 8618 : 	}
; 8619 : 	else

  0003a	eb 14		 jmp	 SHORT $LN3@draw_syste
$LN2@draw_syste:

; 8620 : 	{
; 8621 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  0003c	6a 00		 push	 0
  0003e	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 8622 : 
; 8623 : 		y_adjust = -2.0;

  00043	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  0004b	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN3@draw_syste:

; 8624 : 	}
; 8625 : 
; 8626 : 	y_adjust = print_system_message ("RADAR", "FAIL", default_damage.radar, y_adjust);

  00050	51		 push	 ecx
  00051	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00056	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  00060	83 e0 01	 and	 eax, 1
  00063	50		 push	 eax
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_05IHELJBBC@RADAR@
  0006e	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  00073	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8627 : 
; 8628 : 	y_adjust = print_system_message ("FLIR", "FAIL", default_damage.flir, y_adjust);

  00076	51		 push	 ecx
  00077	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0007c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00081	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  00086	c1 e8 02	 shr	 eax, 2
  00089	83 e0 01	 and	 eax, 1
  0008c	50		 push	 eax
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_04MIGKMLBH@FLIR@
  00097	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  0009c	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8629 : 
; 8630 : 	y_adjust = print_system_message ("DTV", "FAIL", default_damage.dtv, y_adjust);

  0009f	51		 push	 ecx
  000a0	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  000af	c1 e8 03	 shr	 eax, 3
  000b2	83 e0 01	 and	 eax, 1
  000b5	50		 push	 eax
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_03ENJJJDDH@DTV@
  000c0	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  000c5	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8631 : 
; 8632 : 	y_adjust = print_system_message ("DVO", "FAIL", default_damage.dvo, y_adjust);

  000c8	51		 push	 ecx
  000c9	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  000d8	c1 e8 04	 shr	 eax, 4
  000db	83 e0 01	 and	 eax, 1
  000de	50		 push	 eax
  000df	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_03NFBNOOEB@DVO@
  000e9	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  000ee	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8633 : 
; 8634 : 	y_adjust = print_system_message ("LASER DESIGNATOR", "FAIL", default_damage.laser_designator, y_adjust);

  000f1	51		 push	 ecx
  000f2	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  00101	c1 e8 06	 shr	 eax, 6
  00104	83 e0 01	 and	 eax, 1
  00107	50		 push	 eax
  00108	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  0010d	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@
  00112	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  00117	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8635 : 
; 8636 : 	y_adjust = print_system_message ("RADAR JAMMER", "FAIL", default_damage.radar_jammer, y_adjust);

  0011a	51		 push	 ecx
  0011b	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00120	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00125	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  0012a	c1 e8 07	 shr	 eax, 7
  0012d	83 e0 01	 and	 eax, 1
  00130	50		 push	 eax
  00131	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00136	68 00 00 00 00	 push	 OFFSET ??_C@_0N@JDBOFCJG@RADAR?5JAMMER@
  0013b	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  00140	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8637 : 
; 8638 : 	y_adjust = print_system_message ("IR JAMMER", "FAIL", default_damage.infra_red_jammer, y_adjust);

  00143	51		 push	 ecx
  00144	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00149	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  00153	c1 e8 08	 shr	 eax, 8
  00156	83 e0 01	 and	 eax, 1
  00159	50		 push	 eax
  0015a	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  0015f	68 00 00 00 00	 push	 OFFSET ??_C@_09MILGCPFO@IR?5JAMMER@
  00164	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  00169	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8639 : 
; 8640 : 	y_adjust = print_system_message ("NAVIGATION COMPUTER", "FAIL", default_damage.navigation_computer, y_adjust);

  0016c	51		 push	 ecx
  0016d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00172	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00177	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  0017c	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  0017f	83 e0 01	 and	 eax, 1
  00182	50		 push	 eax
  00183	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00188	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@
  0018d	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  00192	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8641 : 
; 8642 : 	y_adjust = print_system_message ("COMMUNICATIONS", "FAIL", default_damage.communications, y_adjust);

  00195	51		 push	 ecx
  00196	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0019b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  001a5	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  001a8	83 e0 01	 and	 eax, 1
  001ab	50		 push	 eax
  001ac	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  001b1	68 00 00 00 00	 push	 OFFSET ??_C@_0P@OEDGDHNF@COMMUNICATIONS@
  001b6	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  001bb	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8643 : 
; 8644 : 	y_adjust = print_system_message ("RADAR WARNING SYSTEM", "FAIL", default_damage.radar_warning_system, y_adjust);

  001be	51		 push	 ecx
  001bf	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  001c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  001ce	c1 e8 0d	 shr	 eax, 13			; 0000000dH
  001d1	83 e0 01	 and	 eax, 1
  001d4	50		 push	 eax
  001d5	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  001da	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@
  001df	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  001e4	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8645 : 
; 8646 : 	y_adjust = print_system_message ("IHADSS", "FAIL", default_damage.ihadss, y_adjust);

  001e7	51		 push	 ecx
  001e8	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  001ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  001f7	c1 e8 0e	 shr	 eax, 14			; 0000000eH
  001fa	83 e0 01	 and	 eax, 1
  001fd	50		 push	 eax
  001fe	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00203	68 00 00 00 00	 push	 OFFSET ??_C@_06NOICLIMH@IHADSS@
  00208	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  0020d	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8647 : 
; 8648 : 	y_adjust = print_system_message ("PNVS", "FAIL", default_damage.pnvs, y_adjust);

  00210	51		 push	 ecx
  00211	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00216	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  00220	c1 e8 12	 shr	 eax, 18			; 00000012H
  00223	83 e0 01	 and	 eax, 1
  00226	50		 push	 eax
  00227	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  0022c	68 00 00 00 00	 push	 OFFSET ??_C@_04IDKCLELC@PNVS@
  00231	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  00236	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8649 : 
; 8650 : 	y_adjust = print_system_message ("STABILISER", "FAIL", get_dynamics_damage_type (DYNAMICS_DAMAGE_STABILISER), y_adjust);

  00239	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0023e	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00244	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  0024a	74 09		 je	 SHORT $LN9@draw_syste
  0024c	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv190[ebp], 1
  00253	eb 07		 jmp	 SHORT $LN10@draw_syste
$LN9@draw_syste:
  00255	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv190[ebp], 0
$LN10@draw_syste:
  0025c	51		 push	 ecx
  0025d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00262	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00267	8b 55 b8	 mov	 edx, DWORD PTR tv190[ebp]
  0026a	52		 push	 edx
  0026b	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00270	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LMAEBBOE@STABILISER@
  00275	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  0027a	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8651 : 
; 8652 : 	y_adjust = print_system_message ("MAIN ROTOR", "FAIL", get_dynamics_damage_type (DYNAMICS_DAMAGE_MAIN_ROTOR), y_adjust);

  0027d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00282	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00288	83 e1 02	 and	 ecx, 2
  0028b	74 09		 je	 SHORT $LN11@draw_syste
  0028d	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv199[ebp], 1
  00294	eb 07		 jmp	 SHORT $LN12@draw_syste
$LN11@draw_syste:
  00296	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv199[ebp], 0
$LN12@draw_syste:
  0029d	51		 push	 ecx
  0029e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a8	8b 55 b8	 mov	 edx, DWORD PTR tv199[ebp]
  002ab	52		 push	 edx
  002ac	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  002b1	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FFIGCBMA@MAIN?5ROTOR@
  002b6	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  002bb	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8653 : 
; 8654 : 	y_adjust = print_system_message ("TAIL ROTOR", "DAMAGED", get_dynamics_damage_type (DYNAMICS_DAMAGE_TAIL_ROTOR), y_adjust);

  002be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002c3	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  002c9	83 e1 04	 and	 ecx, 4
  002cc	74 09		 je	 SHORT $LN13@draw_syste
  002ce	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv208[ebp], 1
  002d5	eb 07		 jmp	 SHORT $LN14@draw_syste
$LN13@draw_syste:
  002d7	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv208[ebp], 0
$LN14@draw_syste:
  002de	51		 push	 ecx
  002df	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e9	8b 55 b8	 mov	 edx, DWORD PTR tv208[ebp]
  002ec	52		 push	 edx
  002ed	68 00 00 00 00	 push	 OFFSET ??_C@_07OHKEFPKJ@DAMAGED@
  002f2	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MCBINMPD@TAIL?5ROTOR@
  002f7	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  002fc	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8655 : 
; 8656 : 	y_adjust = print_system_message ("ENGINE 1", "DAMAGED", get_dynamics_damage_type (DYNAMICS_DAMAGE_LEFT_ENGINE), y_adjust);

  002ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00304	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  0030a	83 e1 08	 and	 ecx, 8
  0030d	74 09		 je	 SHORT $LN15@draw_syste
  0030f	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv217[ebp], 1
  00316	eb 07		 jmp	 SHORT $LN16@draw_syste
$LN15@draw_syste:
  00318	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv217[ebp], 0
$LN16@draw_syste:
  0031f	51		 push	 ecx
  00320	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00325	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032a	8b 55 b8	 mov	 edx, DWORD PTR tv217[ebp]
  0032d	52		 push	 edx
  0032e	68 00 00 00 00	 push	 OFFSET ??_C@_07OHKEFPKJ@DAMAGED@
  00333	68 00 00 00 00	 push	 OFFSET ??_C@_08KNAGGCOA@ENGINE?51@
  00338	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  0033d	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8657 : 
; 8658 : 	y_adjust = print_system_message ("ENGINE 2", "DAMAGED", get_dynamics_damage_type (DYNAMICS_DAMAGE_RIGHT_ENGINE), y_adjust);

  00340	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00345	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  0034b	83 e1 10	 and	 ecx, 16			; 00000010H
  0034e	74 09		 je	 SHORT $LN17@draw_syste
  00350	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv226[ebp], 1
  00357	eb 07		 jmp	 SHORT $LN18@draw_syste
$LN17@draw_syste:
  00359	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv226[ebp], 0
$LN18@draw_syste:
  00360	51		 push	 ecx
  00361	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00366	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036b	8b 55 b8	 mov	 edx, DWORD PTR tv226[ebp]
  0036e	52		 push	 edx
  0036f	68 00 00 00 00	 push	 OFFSET ??_C@_07OHKEFPKJ@DAMAGED@
  00374	68 00 00 00 00	 push	 OFFSET ??_C@_08IGCLDBCD@ENGINE?52@
  00379	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  0037e	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8659 : 
; 8660 : 	y_adjust = print_system_message ("HYDRAULIC PRESSURE", "LOW", get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_HYDRAULICS), y_adjust);

  00381	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00386	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  0038c	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  00392	74 09		 je	 SHORT $LN19@draw_syste
  00394	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv235[ebp], 1
  0039b	eb 07		 jmp	 SHORT $LN20@draw_syste
$LN19@draw_syste:
  0039d	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv235[ebp], 0
$LN20@draw_syste:
  003a4	51		 push	 ecx
  003a5	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  003aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003af	8b 55 b8	 mov	 edx, DWORD PTR tv235[ebp]
  003b2	52		 push	 edx
  003b3	68 00 00 00 00	 push	 OFFSET ??_C@_03IBEFMGAI@LOW@
  003b8	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@
  003bd	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  003c2	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8661 : 
; 8662 : 	if (get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_OIL_PRESSURE))

  003c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  003ca	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  003d0	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  003d6	74 09		 je	 SHORT $LN21@draw_syste
  003d8	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv242[ebp], 1
  003df	eb 07		 jmp	 SHORT $LN22@draw_syste
$LN21@draw_syste:
  003e1	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv242[ebp], 0
$LN22@draw_syste:
  003e8	83 7d b8 00	 cmp	 DWORD PTR tv242[ebp], 0
  003ec	74 46		 je	 SHORT $LN4@draw_syste

; 8663 : 	{
; 8664 : 		y_adjust = print_system_message ("OIL PRESSURE", "LOW", get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_OIL_PRESSURE), y_adjust);

  003ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  003f3	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  003f9	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  003ff	74 09		 je	 SHORT $LN23@draw_syste
  00401	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv249[ebp], 1
  00408	eb 07		 jmp	 SHORT $LN24@draw_syste
$LN23@draw_syste:
  0040a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv249[ebp], 0
$LN24@draw_syste:
  00411	51		 push	 ecx
  00412	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00417	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0041c	8b 55 b8	 mov	 edx, DWORD PTR tv249[ebp]
  0041f	52		 push	 edx
  00420	68 00 00 00 00	 push	 OFFSET ??_C@_03IBEFMGAI@LOW@
  00425	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MMJNGGCF@OIL?5PRESSURE@
  0042a	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  0042f	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8665 : 	}
; 8666 : 	else

  00432	eb 44		 jmp	 SHORT $LN5@draw_syste
$LN4@draw_syste:

; 8667 : 	{
; 8668 : 		y_adjust = print_system_message ("OIL PRESSURE", "HIGH", get_dynamics_damage_type (DYNAMICS_DAMAGE_HIGH_OIL_PRESSURE), y_adjust);

  00434	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00439	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  0043f	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  00445	74 09		 je	 SHORT $LN25@draw_syste
  00447	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv258[ebp], 1
  0044e	eb 07		 jmp	 SHORT $LN26@draw_syste
$LN25@draw_syste:
  00450	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv258[ebp], 0
$LN26@draw_syste:
  00457	51		 push	 ecx
  00458	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0045d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00462	8b 55 b8	 mov	 edx, DWORD PTR tv258[ebp]
  00465	52		 push	 edx
  00466	68 00 00 00 00	 push	 OFFSET ??_C@_04PKDHFCJF@HIGH@
  0046b	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MMJNGGCF@OIL?5PRESSURE@
  00470	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  00475	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]
$LN5@draw_syste:

; 8669 : 	}
; 8670 : 
; 8671 : 	//
; 8672 : 	// fire extinguisher
; 8673 : 	//
; 8674 : 
; 8675 : 	if (draw_large_mfd)

  00478	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0047f	74 14		 je	 SHORT $LN6@draw_syste

; 8676 : 	{
; 8677 : 		y_adjust += 14;

  00481	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00486	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41600000
  0048e	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 8678 : 	}
; 8679 : 	else

  00493	eb 12		 jmp	 SHORT $LN7@draw_syste
$LN6@draw_syste:

; 8680 : 	{
; 8681 : 		y_adjust += 3;

  00495	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0049a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40400000
  004a2	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN7@draw_syste:

; 8682 : 	}
; 8683 : 
; 8684 : 	y_adjust = print_system_message ("FIRE EXTINGUISHER", "USED", fire_extinguisher_used, y_adjust);

  004a7	51		 push	 ecx
  004a8	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  004ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?fire_extinguisher_used@@3HA ; fire_extinguisher_used
  004b7	50		 push	 eax
  004b8	68 00 00 00 00	 push	 OFFSET ??_C@_04PCNCCNDP@USED@
  004bd	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OIGEPKDA@FIRE?5EXTINGUISHER@
  004c2	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  004c7	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 8685 : }

  004ca	5f		 pop	 edi
  004cb	5e		 pop	 esi
  004cc	5b		 pop	 ebx
  004cd	8b e5		 mov	 esp, ebp
  004cf	5d		 pop	 ebp
  004d0	c3		 ret	 0
?draw_system_display_mfd@@YGXXZ ENDP			; draw_system_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?print_system_message@@YGMPAD0HM@Z
_TEXT	SEGMENT
tv152 = -76						; size = 4
_width$ = -8						; size = 4
_status$ = -4						; size = 4
_equipment$ = 8						; size = 4
_warning$ = 12						; size = 4
_fail$ = 16						; size = 4
_y_adjust$ = 20						; size = 4
?print_system_message@@YGMPAD0HM@Z PROC			; print_system_message, COMDAT

; 8558 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8559 : 	char
; 8560 : 		*status;
; 8561 : 
; 8562 : 	float
; 8563 : 		width;
; 8564 : 
; 8565 : 	ASSERT (equipment);

  00009	83 7d 08 00	 cmp	 DWORD PTR _equipment$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@print_syst
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_system_message@@YGMPAD0HM@Z@4JA
  00014	83 c0 07	 add	 eax, 7
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_09FJJPPKDN@equipment@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@print_syst:

; 8566 : 
; 8567 : 	ASSERT (warning);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _warning$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@print_syst
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_system_message@@YGMPAD0HM@Z@4JA
  00032	83 c0 09	 add	 eax, 9
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_07FPLKDJGL@warning@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@print_syst:

; 8568 : 
; 8569 : 	set_2d_mono_font_position (-0.8, 0.90);

  00045	51		 push	 ecx
  00046	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0004e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00053	51		 push	 ecx
  00054	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0005c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00061	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8570 : 
; 8571 : 	set_mono_font_rel_position (1.0, y_adjust);

  00066	51		 push	 ecx
  00067	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	51		 push	 ecx
  00072	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0007a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8572 : 
; 8573 : 	print_mono_font_string (equipment);

  00084	8b 45 08	 mov	 eax, DWORD PTR _equipment$[ebp]
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8574 : 
; 8575 : 	if (fail)

  0008d	83 7d 10 00	 cmp	 DWORD PTR _fail$[ebp], 0
  00091	74 08		 je	 SHORT $LN4@print_syst

; 8576 : 	{
; 8577 : 		status = warning;

  00093	8b 45 0c	 mov	 eax, DWORD PTR _warning$[ebp]
  00096	89 45 fc	 mov	 DWORD PTR _status$[ebp], eax

; 8578 : 	}
; 8579 : 	else

  00099	eb 07		 jmp	 SHORT $LN5@print_syst
$LN4@print_syst:

; 8580 : 	{
; 8581 : 		status = "OK";

  0009b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _status$[ebp], OFFSET ??_C@_02GIPFHKNO@OK@
$LN5@print_syst:

; 8582 : 	}
; 8583 : 
; 8584 : 	width = get_mono_font_string_width (status);

  000a2	8b 45 fc	 mov	 eax, DWORD PTR _status$[ebp]
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  000ab	d9 5d f8	 fstp	 DWORD PTR _width$[ebp]

; 8585 : 
; 8586 : 	set_2d_mono_font_position (0.8, 0.90);

  000ae	51		 push	 ecx
  000af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  000b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bc	51		 push	 ecx
  000bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  000c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ca	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8587 : 
; 8588 : 	set_mono_font_rel_position (-width, y_adjust);

  000cf	51		 push	 ecx
  000d0	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000da	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width$[ebp]
  000df	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000e6	51		 push	 ecx
  000e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ec	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8589 : 
; 8590 : 	print_mono_font_string (status);

  000f1	8b 45 fc	 mov	 eax, DWORD PTR _status$[ebp]
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8591 : 
; 8592 : 	y_adjust += get_mono_font_char_height ('X');

  000fa	6a 58		 push	 88			; 00000058H
  000fc	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  00101	d9 5d b4	 fstp	 DWORD PTR tv152[ebp]
  00104	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR tv152[ebp]
  00109	f3 0f 58 45 14	 addss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0010e	f3 0f 11 45 14	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 8593 : 
; 8594 : 	if (draw_large_mfd)

  00113	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0011a	74 12		 je	 SHORT $LN6@print_syst

; 8595 : 	{
; 8596 : 		y_adjust += 2;

  0011c	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00121	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40000000
  00129	f3 0f 11 45 14	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN6@print_syst:

; 8597 : 	}
; 8598 : 
; 8599 : 	return (y_adjust);

  0012e	d9 45 14	 fld	 DWORD PTR _y_adjust$[ebp]

; 8600 : }

  00131	5f		 pop	 edi
  00132	5e		 pop	 esi
  00133	5b		 pop	 ebx
  00134	8b e5		 mov	 esp, ebp
  00136	5d		 pop	 ebp
  00137	c2 10 00	 ret	 16			; 00000010H
?print_system_message@@YGMPAD0HM@Z ENDP			; print_system_message
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z
_TEXT	SEGMENT
tv84 = -168						; size = 4
tv140 = -164						; size = 4
tv78 = -164						; size = 4
tv132 = -160						; size = 4
tv71 = -160						; size = 4
_u$ = -92						; size = 4
_selected_weapon$ = -88					; size = 4
_en$ = -84						; size = 4
_buffer$ = -80						; size = 80
_location$ = 8						; size = 4
_draw_on_texture$ = 12					; size = 4
?draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z PROC	; draw_weapon_display_mfd, COMDAT

; 8259 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 8260 : 	char
; 8261 : 		buffer[80];
; 8262 : 
; 8263 : 	entity
; 8264 : 		*en;
; 8265 : 
; 8266 : 	entity_sub_types
; 8267 : 		selected_weapon;
; 8268 : 
; 8269 : 	float
; 8270 : 		u;
; 8271 : 
; 8272 : 	if (draw_large_mfd)

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00013	74 0e		 je	 SHORT $LN4@draw_weapo

; 8273 : 	{
; 8274 : 		draw_large_weapon_display_mfd (location);

  00015	8b 45 08	 mov	 eax, DWORD PTR _location$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z ; draw_large_weapon_display_mfd

; 8275 : 
; 8276 : 		return;

  0001e	e9 85 06 00 00	 jmp	 $LN1@draw_weapo
$LN4@draw_weapo:

; 8277 : 	}
; 8278 : 
; 8279 : 	////////////////////////////////////////
; 8280 : 	//
; 8281 : 	// select cockpit graphics wrt time of day - required here for hi-res virtual cockpits
; 8282 : 	//
; 8283 : 
; 8284 : 	switch (get_local_entity_int_value (get_session_entity (), INT_TYPE_DAY_SEGMENT_TYPE))

  00023	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  0002a	74 0f		 je	 SHORT $LN38@draw_weapo
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  00031	8b 08		 mov	 ecx, DWORD PTR [eax]
  00033	89 8d 60 ff ff
	ff		 mov	 DWORD PTR tv71[ebp], ecx
  00039	eb 20		 jmp	 SHORT $LN39@draw_weapo
$LN38@draw_weapo:
  0003b	68 5c 20 00 00	 push	 8284			; 0000205cH
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00045	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0004b	52		 push	 edx
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00051	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv71[ebp], 0
$LN39@draw_weapo:
  0005b	b8 01 00 00 00	 mov	 eax, 1
  00060	85 c0		 test	 eax, eax
  00062	74 0c		 je	 SHORT $LN40@draw_weapo
  00064	c7 85 5c ff ff
	ff 27 00 00 00	 mov	 DWORD PTR tv78[ebp], 39	; 00000027H
  0006e	eb 20		 jmp	 SHORT $LN41@draw_weapo
$LN40@draw_weapo:
  00070	68 5c 20 00 00	 push	 8284			; 0000205cH
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0007a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00086	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN41@draw_weapo:
  00090	6a 27		 push	 39			; 00000027H
  00092	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  00098	52		 push	 edx
  00099	69 85 60 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv71[ebp], 1116
  000a3	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR tv78[ebp]
  000a9	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  000b0	ff d2		 call	 edx
  000b2	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv84[ebp], eax
  000b8	83 bd 58 ff ff
	ff 03		 cmp	 DWORD PTR tv84[ebp], 3
  000bf	77 3b		 ja	 SHORT $LN2@draw_weapo
  000c1	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR tv84[ebp]
  000c7	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN46@draw_weapo[eax*4]
$LN5@draw_weapo:

; 8285 : 	{
; 8286 : 		case DAY_SEGMENT_TYPE_DAWN:
; 8287 : 		{
; 8288 : 			base_cockpit_graphics_file = GRAPHICS_COCKPITS_APACHE_LEVEL2_BASE;

  000ce	c7 05 00 00 00
	00 5c 00 00 00	 mov	 DWORD PTR ?base_cockpit_graphics_file@@3W4GRAPHICS_FILE_SPECIFIERS@@A, 92 ; base_cockpit_graphics_file, 0000005cH

; 8289 : 
; 8290 : 			break;

  000d8	eb 22		 jmp	 SHORT $LN2@draw_weapo
$LN6@draw_weapo:

; 8291 : 		}
; 8292 : 		case DAY_SEGMENT_TYPE_DAY:
; 8293 : 		{
; 8294 : 			base_cockpit_graphics_file = GRAPHICS_COCKPITS_APACHE_LEVEL1_BASE;

  000da	c7 05 00 00 00
	00 2d 00 00 00	 mov	 DWORD PTR ?base_cockpit_graphics_file@@3W4GRAPHICS_FILE_SPECIFIERS@@A, 45 ; base_cockpit_graphics_file, 0000002dH

; 8295 : 
; 8296 : 			break;

  000e4	eb 16		 jmp	 SHORT $LN2@draw_weapo
$LN7@draw_weapo:

; 8297 : 		}
; 8298 : 		case DAY_SEGMENT_TYPE_DUSK:
; 8299 : 		{
; 8300 : 			base_cockpit_graphics_file = GRAPHICS_COCKPITS_APACHE_LEVEL2_BASE;

  000e6	c7 05 00 00 00
	00 5c 00 00 00	 mov	 DWORD PTR ?base_cockpit_graphics_file@@3W4GRAPHICS_FILE_SPECIFIERS@@A, 92 ; base_cockpit_graphics_file, 0000005cH

; 8301 : 
; 8302 : 			break;

  000f0	eb 0a		 jmp	 SHORT $LN2@draw_weapo
$LN8@draw_weapo:

; 8303 : 		}
; 8304 : 		case DAY_SEGMENT_TYPE_NIGHT:
; 8305 : 		{
; 8306 : 			base_cockpit_graphics_file = GRAPHICS_COCKPITS_APACHE_LEVEL3_BASE;

  000f2	c7 05 00 00 00
	00 8b 00 00 00	 mov	 DWORD PTR ?base_cockpit_graphics_file@@3W4GRAPHICS_FILE_SPECIFIERS@@A, 139 ; base_cockpit_graphics_file, 0000008bH
$LN2@draw_weapo:

; 8307 : 
; 8308 : 			break;
; 8309 : 		}
; 8310 : 	}
; 8311 : 
; 8312 : 	#if DEMO_VERSION
; 8313 : 
; 8314 : 	base_cockpit_graphics_file = GRAPHICS_COCKPITS_APACHE_LEVEL1_BASE;
; 8315 : 
; 8316 : 	#endif
; 8317 : 
; 8318 : 	//
; 8319 : 	////////////////////////////////////////
; 8320 : 
; 8321 : 	weapon_draw_on_texture = draw_on_texture;

  000fc	8b 45 0c	 mov	 eax, DWORD PTR _draw_on_texture$[ebp]
  000ff	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_draw_on_texture@@3HA, eax

; 8322 : 
; 8323 : 	weapon_sprite_data = get_graphics_file_data (base_cockpit_graphics_file + GRAPHICS_COCKPITS_APACHE_WEAPONS_MFD_SPRITES);

  00104	a1 00 00 00 00	 mov	 eax, DWORD PTR ?base_cockpit_graphics_file@@3W4GRAPHICS_FILE_SPECIFIERS@@A ; base_cockpit_graphics_file
  00109	83 c0 2d	 add	 eax, 45			; 0000002dH
  0010c	6b c8 28	 imul	 ecx, eax, 40
  0010f	8b 91 1c 00 00
	00		 mov	 edx, DWORD PTR ?graphics_files@@3PAUFILE_DATA@@A[ecx+28]
  00115	89 15 00 00 00
	00		 mov	 DWORD PTR ?weapon_sprite_data@@3PAEA, edx

; 8324 : 
; 8325 : 	weapon_mask_data = get_graphics_file_data (base_cockpit_graphics_file + GRAPHICS_COCKPITS_APACHE_WEAPONS_MFD_SPRITES_MASK);

  0011b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?base_cockpit_graphics_file@@3W4GRAPHICS_FILE_SPECIFIERS@@A ; base_cockpit_graphics_file
  00120	83 c0 2e	 add	 eax, 46			; 0000002eH
  00123	6b c8 28	 imul	 ecx, eax, 40
  00126	8b 91 1c 00 00
	00		 mov	 edx, DWORD PTR ?graphics_files@@3PAUFILE_DATA@@A[ecx+28]
  0012c	89 15 00 00 00
	00		 mov	 DWORD PTR ?weapon_mask_data@@3PAEA, edx

; 8326 : 
; 8327 : 	weapon_sprite.mask_value = 0;

  00132	c6 05 18 00 00
	00 00		 mov	 BYTE PTR ?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A+24, 0

; 8328 : 
; 8329 : 	en = get_gunship_entity ();

  00139	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0013e	89 45 ac	 mov	 DWORD PTR _en$[ebp], eax

; 8330 : 
; 8331 : 	selected_weapon = get_local_entity_int_value (en, INT_TYPE_SELECTED_WEAPON);

  00141	83 7d ac 00	 cmp	 DWORD PTR _en$[ebp], 0
  00145	74 0d		 je	 SHORT $LN42@draw_weapo
  00147	8b 45 ac	 mov	 eax, DWORD PTR _en$[ebp]
  0014a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014c	89 8d 60 ff ff
	ff		 mov	 DWORD PTR tv132[ebp], ecx
  00152	eb 24		 jmp	 SHORT $LN43@draw_weapo
$LN42@draw_weapo:
  00154	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z@4JA
  0015a	83 c2 48	 add	 edx, 72			; 00000048H
  0015d	52		 push	 edx
  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00163	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00168	50		 push	 eax
  00169	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0016e	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv132[ebp], 0
$LN43@draw_weapo:
  00178	b9 01 00 00 00	 mov	 ecx, 1
  0017d	85 c9		 test	 ecx, ecx
  0017f	74 0c		 je	 SHORT $LN44@draw_weapo
  00181	c7 85 5c ff ff
	ff b8 00 00 00	 mov	 DWORD PTR tv140[ebp], 184 ; 000000b8H
  0018b	eb 24		 jmp	 SHORT $LN45@draw_weapo
$LN44@draw_weapo:
  0018d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z@4JA
  00193	83 c2 48	 add	 edx, 72			; 00000048H
  00196	52		 push	 edx
  00197	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0019c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  001a1	50		 push	 eax
  001a2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001a7	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv140[ebp], 0
$LN45@draw_weapo:
  001b1	68 b8 00 00 00	 push	 184			; 000000b8H
  001b6	8b 4d ac	 mov	 ecx, DWORD PTR _en$[ebp]
  001b9	51		 push	 ecx
  001ba	69 95 60 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv132[ebp], 1116
  001c4	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR tv140[ebp]
  001ca	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  001d1	ff d1		 call	 ecx
  001d3	89 45 a8	 mov	 DWORD PTR _selected_weapon$[ebp], eax

; 8332 : 
; 8333 : 	if (draw_large_mfd)

  001d6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  001dd	0f 84 4f 02 00
	00		 je	 $LN9@draw_weapo

; 8334 : 	{
; 8335 : 		if (location == MFD_LOCATION_LHS)

  001e3	83 7d 08 00	 cmp	 DWORD PTR _location$[ebp], 0
  001e7	75 22		 jne	 SHORT $LN11@draw_weapo

; 8336 : 		{
; 8337 : 			weapon_x_offset = (int) mfd_viewport_x_min + 38 - 4;

  001e9	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?mfd_viewport_x_min@@3MA
  001f1	83 c0 22	 add	 eax, 34			; 00000022H
  001f4	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_x_offset@@3HA, eax

; 8338 : 			weapon_y_offset = (int) mfd_viewport_y_min + 32 - 4;

  001f9	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?mfd_viewport_y_min@@3MA
  00201	83 c0 1c	 add	 eax, 28			; 0000001cH
  00204	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_y_offset@@3HA, eax

; 8339 : 		}
; 8340 : 		else

  00209	eb 20		 jmp	 SHORT $LN12@draw_weapo
$LN11@draw_weapo:

; 8341 : 		{
; 8342 : 			weapon_x_offset = (int) mfd_viewport_x_min + 38 - 4;

  0020b	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?mfd_viewport_x_min@@3MA
  00213	83 c0 22	 add	 eax, 34			; 00000022H
  00216	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_x_offset@@3HA, eax

; 8343 : 			weapon_y_offset = (int) mfd_viewport_y_min + 32 - 4;

  0021b	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?mfd_viewport_y_min@@3MA
  00223	83 c0 1c	 add	 eax, 28			; 0000001cH
  00226	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_y_offset@@3HA, eax
$LN12@draw_weapo:

; 8344 : 		}
; 8345 : 
; 8346 : 		//
; 8347 : 		// helicopter
; 8348 : 		//
; 8349 : 
; 8350 : 		draw_sprite (4, 4, 4, 4, 256, 256);

  0022b	68 00 01 00 00	 push	 256			; 00000100H
  00230	68 00 01 00 00	 push	 256			; 00000100H
  00235	6a 04		 push	 4
  00237	6a 04		 push	 4
  00239	6a 04		 push	 4
  0023b	6a 04		 push	 4
  0023d	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 8351 : 
; 8352 : 		//
; 8353 : 		// arm
; 8354 : 		//
; 8355 : 
; 8356 : 		if (selected_weapon != ENTITY_SUB_TYPE_WEAPON_NO_WEAPON)

  00242	83 7d a8 00	 cmp	 DWORD PTR _selected_weapon$[ebp], 0
  00246	74 14		 je	 SHORT $LN13@draw_weapo

; 8357 : 		{
; 8358 : 			draw_sprite (102, 116, 422, 3, 59, 22);

  00248	6a 16		 push	 22			; 00000016H
  0024a	6a 3b		 push	 59			; 0000003bH
  0024c	6a 03		 push	 3
  0024e	68 a6 01 00 00	 push	 422			; 000001a6H
  00253	6a 74		 push	 116			; 00000074H
  00255	6a 66		 push	 102			; 00000066H
  00257	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN13@draw_weapo:

; 8359 : 		}
; 8360 : 
; 8361 : 		//
; 8362 : 		// hardpoints
; 8363 : 		//
; 8364 : 		draw_weapon_hardpoint_info (APACHE_CHAIN_GUN_TURRET, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  0025c	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  0025f	50		 push	 eax
  00260	6a 00		 push	 0
  00262	6a 06		 push	 6
  00264	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8365 : 
; 8366 : 		draw_weapon_hardpoint_info (APACHE_LHS_WING_TIP_MOUNT, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  00269	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  0026c	50		 push	 eax
  0026d	6a 00		 push	 0
  0026f	6a 04		 push	 4
  00271	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8367 : 
; 8368 : 		draw_weapon_hardpoint_info (APACHE_RHS_WING_TIP_MOUNT, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  00276	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  00279	50		 push	 eax
  0027a	6a 00		 push	 0
  0027c	6a 05		 push	 5
  0027e	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8369 : 
; 8370 : 		draw_weapon_hardpoint_info (APACHE_LHS_INNER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  00283	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  00286	50		 push	 eax
  00287	6a 00		 push	 0
  00289	6a 00		 push	 0
  0028b	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8371 : 
; 8372 : 		draw_weapon_hardpoint_info (APACHE_RHS_INNER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  00290	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  00293	50		 push	 eax
  00294	6a 00		 push	 0
  00296	6a 01		 push	 1
  00298	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8373 : 
; 8374 : 		draw_weapon_hardpoint_info (APACHE_LHS_OUTER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  0029d	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  002a0	50		 push	 eax
  002a1	6a 00		 push	 0
  002a3	6a 02		 push	 2
  002a5	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8375 : 
; 8376 : 		draw_weapon_hardpoint_info (APACHE_RHS_OUTER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  002aa	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  002ad	50		 push	 eax
  002ae	6a 00		 push	 0
  002b0	6a 03		 push	 3
  002b2	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8377 : 
; 8378 : 		draw_weapon_hardpoint_info (APACHE_CHAFF_DISPENSER, ENTITY_SUB_TYPE_WEAPON_CHAFF, selected_weapon);

  002b7	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  002ba	50		 push	 eax
  002bb	6a 43		 push	 67			; 00000043H
  002bd	6a 07		 push	 7
  002bf	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8379 : 
; 8380 : 		draw_weapon_hardpoint_info (APACHE_FLARE_DISPENSER, ENTITY_SUB_TYPE_WEAPON_FLARE, selected_weapon);

  002c4	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  002c7	50		 push	 eax
  002c8	6a 44		 push	 68			; 00000044H
  002ca	6a 07		 push	 7
  002cc	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8381 : 
; 8382 : 		//
; 8383 : 		// auto-countermeasures
; 8384 : 		//
; 8385 : 
; 8386 : 		if (get_global_auto_counter_measures ())

  002d1	83 3d 90 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+144, 0
  002d8	74 17		 je	 SHORT $LN14@draw_weapo

; 8387 : 		{
; 8388 : 			draw_sprite (108, 176, 520, 3, 47, 14);

  002da	6a 0e		 push	 14			; 0000000eH
  002dc	6a 2f		 push	 47			; 0000002fH
  002de	6a 03		 push	 3
  002e0	68 08 02 00 00	 push	 520			; 00000208H
  002e5	68 b0 00 00 00	 push	 176			; 000000b0H
  002ea	6a 6c		 push	 108			; 0000006cH
  002ec	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN14@draw_weapo:

; 8389 : 		}
; 8390 : 
; 8391 : 		//
; 8392 : 		// rocket salvo
; 8393 : 		//
; 8394 : 
; 8395 : 		if
; 8396 : 		(
; 8397 : 			get_local_entity_weapon_available (en, ENTITY_SUB_TYPE_WEAPON_HYDRA70_M255) ||

  002f1	6a 1e		 push	 30			; 0000001eH
  002f3	8b 45 ac	 mov	 eax, DWORD PTR _en$[ebp]
  002f6	50		 push	 eax
  002f7	e8 00 00 00 00	 call	 ?get_local_entity_weapon_available@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_available
  002fc	85 c0		 test	 eax, eax
  002fe	75 13		 jne	 SHORT $LN16@draw_weapo
  00300	6a 1f		 push	 31			; 0000001fH
  00302	8b 45 ac	 mov	 eax, DWORD PTR _en$[ebp]
  00305	50		 push	 eax
  00306	e8 00 00 00 00	 call	 ?get_local_entity_weapon_available@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_available
  0030b	85 c0		 test	 eax, eax
  0030d	0f 84 1a 01 00
	00		 je	 $LN18@draw_weapo
$LN16@draw_weapo:

; 8398 : 			get_local_entity_weapon_available (en, ENTITY_SUB_TYPE_WEAPON_HYDRA70_M261)
; 8399 : 		)
; 8400 : 		{
; 8401 : 			draw_sprite (66, 268, 264, 165, 98, 16);

  00313	6a 10		 push	 16			; 00000010H
  00315	6a 62		 push	 98			; 00000062H
  00317	68 a5 00 00 00	 push	 165			; 000000a5H
  0031c	68 08 01 00 00	 push	 264			; 00000108H
  00321	68 0c 01 00 00	 push	 268			; 0000010cH
  00326	6a 42		 push	 66			; 00000042H
  00328	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 8402 : 
; 8403 : 			if (rocket_salvo_size == ROCKET_SALVO_SIZE_ALL)

  0032d	81 3d 00 00 00
	00 e8 03 00 00	 cmp	 DWORD PTR ?rocket_salvo_size@@3HA, 1000 ; rocket_salvo_size, 000003e8H
  00337	75 22		 jne	 SHORT $LN17@draw_weapo

; 8404 : 			{
; 8405 : 				draw_sprite (167, 268, 365, 165, 34, 16);

  00339	6a 10		 push	 16			; 00000010H
  0033b	6a 22		 push	 34			; 00000022H
  0033d	68 a5 00 00 00	 push	 165			; 000000a5H
  00342	68 6d 01 00 00	 push	 365			; 0000016dH
  00347	68 0c 01 00 00	 push	 268			; 0000010cH
  0034c	68 a7 00 00 00	 push	 167			; 000000a7H
  00351	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 8406 : 			}
; 8407 : 			else

  00356	e9 d2 00 00 00	 jmp	 $LN18@draw_weapo
$LN17@draw_weapo:

; 8408 : 			{
; 8409 : 				sprintf (buffer, "%02d", rocket_salvo_size);

  0035b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rocket_salvo_size@@3HA ; rocket_salvo_size
  00360	50		 push	 eax
  00361	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  00366	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00369	51		 push	 ecx
  0036a	e8 00 00 00 00	 call	 _sprintf
  0036f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8410 : 
; 8411 : 				if (buffer[0] == '0')

  00372	b8 01 00 00 00	 mov	 eax, 1
  00377	6b c8 00	 imul	 ecx, eax, 0
  0037a	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  0037f	83 fa 30	 cmp	 edx, 48			; 00000030H
  00382	75 0f		 jne	 SHORT $LN19@draw_weapo

; 8412 : 				{
; 8413 : 					u = 364 + (9 * 10);

  00384	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43e30000
  0038c	f3 0f 11 45 a4	 movss	 DWORD PTR _u$[ebp], xmm0

; 8414 : 				}
; 8415 : 				else

  00391	eb 21		 jmp	 SHORT $LN20@draw_weapo
$LN19@draw_weapo:

; 8416 : 				{
; 8417 : 					u = 364 + ((buffer[0] - '1') * 10);

  00393	b8 01 00 00 00	 mov	 eax, 1
  00398	6b c8 00	 imul	 ecx, eax, 0
  0039b	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  003a0	83 ea 31	 sub	 edx, 49			; 00000031H
  003a3	6b c2 0a	 imul	 eax, edx, 10
  003a6	05 6c 01 00 00	 add	 eax, 364		; 0000016cH
  003ab	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  003af	f3 0f 11 45 a4	 movss	 DWORD PTR _u$[ebp], xmm0
$LN20@draw_weapo:

; 8418 : 				}
; 8419 : 
; 8420 : 				draw_sprite (167, 270, u, 32, 8, 12);

  003b4	6a 0c		 push	 12			; 0000000cH
  003b6	6a 08		 push	 8
  003b8	6a 20		 push	 32			; 00000020H
  003ba	f3 0f 2c 45 a4	 cvttss2si eax, DWORD PTR _u$[ebp]
  003bf	50		 push	 eax
  003c0	68 0e 01 00 00	 push	 270			; 0000010eH
  003c5	68 a7 00 00 00	 push	 167			; 000000a7H
  003ca	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 8421 : 
; 8422 : 				if (buffer[1] == '0')

  003cf	b8 01 00 00 00	 mov	 eax, 1
  003d4	c1 e0 00	 shl	 eax, 0
  003d7	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  003dc	83 f9 30	 cmp	 ecx, 48			; 00000030H
  003df	75 0f		 jne	 SHORT $LN21@draw_weapo

; 8423 : 				{
; 8424 : 					u = 364 + (9 * 10);

  003e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43e30000
  003e9	f3 0f 11 45 a4	 movss	 DWORD PTR _u$[ebp], xmm0

; 8425 : 				}
; 8426 : 				else

  003ee	eb 22		 jmp	 SHORT $LN22@draw_weapo
$LN21@draw_weapo:

; 8427 : 				{
; 8428 : 					u = 364 + ((buffer[1] - '1') * 10);

  003f0	b8 01 00 00 00	 mov	 eax, 1
  003f5	c1 e0 00	 shl	 eax, 0
  003f8	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  003fd	83 e9 31	 sub	 ecx, 49			; 00000031H
  00400	6b d1 0a	 imul	 edx, ecx, 10
  00403	81 c2 6c 01 00
	00		 add	 edx, 364		; 0000016cH
  00409	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0040d	f3 0f 11 45 a4	 movss	 DWORD PTR _u$[ebp], xmm0
$LN22@draw_weapo:

; 8429 : 				}
; 8430 : 
; 8431 : 				draw_sprite (175, 270, u, 32, 8, 12);

  00412	6a 0c		 push	 12			; 0000000cH
  00414	6a 08		 push	 8
  00416	6a 20		 push	 32			; 00000020H
  00418	f3 0f 2c 45 a4	 cvttss2si eax, DWORD PTR _u$[ebp]
  0041d	50		 push	 eax
  0041e	68 0e 01 00 00	 push	 270			; 0000010eH
  00423	68 af 00 00 00	 push	 175			; 000000afH
  00428	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN18@draw_weapo:

; 8432 : 			}
; 8433 : 		}
; 8434 : 	}
; 8435 : 	else

  0042d	e9 76 02 00 00	 jmp	 $LN32@draw_weapo
$LN9@draw_weapo:

; 8436 : 	{
; 8437 : 		if (draw_on_texture)

  00432	83 7d 0c 00	 cmp	 DWORD PTR _draw_on_texture$[ebp], 0
  00436	74 16		 je	 SHORT $LN23@draw_weapo

; 8438 : 		{
; 8439 : 			weapon_x_offset = 0 - 4;

  00438	c7 05 00 00 00
	00 fc ff ff ff	 mov	 DWORD PTR ?weapon_x_offset@@3HA, -4 ; fffffffcH

; 8440 : 			weapon_y_offset = 0 - 262 - 3;

  00442	c7 05 00 00 00
	00 f7 fe ff ff	 mov	 DWORD PTR ?weapon_y_offset@@3HA, -265 ; fffffef7H

; 8441 : 		}
; 8442 : 		else

  0044c	eb 4c		 jmp	 SHORT $LN26@draw_weapo
$LN23@draw_weapo:

; 8443 : 		{
; 8444 : 			if (location == MFD_LOCATION_LHS)

  0044e	83 7d 08 00	 cmp	 DWORD PTR _location$[ebp], 0
  00452	75 24		 jne	 SHORT $LN25@draw_weapo

; 8445 : 			{
; 8446 : 				weapon_x_offset = (int) mfd_viewport_x_min - 4;

  00454	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?mfd_viewport_x_min@@3MA
  0045c	83 e8 04	 sub	 eax, 4
  0045f	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_x_offset@@3HA, eax

; 8447 : 				weapon_y_offset = (int) mfd_viewport_y_min - 262 - 3;

  00464	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?mfd_viewport_y_min@@3MA
  0046c	2d 09 01 00 00	 sub	 eax, 265		; 00000109H
  00471	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_y_offset@@3HA, eax

; 8448 : 			}
; 8449 : 			else

  00476	eb 22		 jmp	 SHORT $LN26@draw_weapo
$LN25@draw_weapo:

; 8450 : 			{
; 8451 : 				weapon_x_offset = (int) mfd_viewport_x_min - 4;

  00478	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?mfd_viewport_x_min@@3MA
  00480	83 e8 04	 sub	 eax, 4
  00483	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_x_offset@@3HA, eax

; 8452 : 				weapon_y_offset = (int) mfd_viewport_y_min - 262 - 3;

  00488	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?mfd_viewport_y_min@@3MA
  00490	2d 09 01 00 00	 sub	 eax, 265		; 00000109H
  00495	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_y_offset@@3HA, eax
$LN26@draw_weapo:

; 8453 : 			}
; 8454 : 		}
; 8455 : 
; 8456 : 		//
; 8457 : 		// helicopter
; 8458 : 		//
; 8459 : 
; 8460 : 		draw_sprite (4, 262 + 3, 4, 262, 128, 128);

  0049a	68 80 00 00 00	 push	 128			; 00000080H
  0049f	68 80 00 00 00	 push	 128			; 00000080H
  004a4	68 06 01 00 00	 push	 262			; 00000106H
  004a9	6a 04		 push	 4
  004ab	68 09 01 00 00	 push	 265			; 00000109H
  004b0	6a 04		 push	 4
  004b2	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 8461 : 
; 8462 : 		//
; 8463 : 		// arm
; 8464 : 		//
; 8465 : 
; 8466 : 		if (selected_weapon != ENTITY_SUB_TYPE_WEAPON_NO_WEAPON)

  004b7	83 7d a8 00	 cmp	 DWORD PTR _selected_weapon$[ebp], 0
  004bb	74 1a		 je	 SHORT $LN27@draw_weapo

; 8467 : 		{
; 8468 : 			draw_sprite (53, 318, 213, 261, 29, 11);

  004bd	6a 0b		 push	 11			; 0000000bH
  004bf	6a 1d		 push	 29			; 0000001dH
  004c1	68 05 01 00 00	 push	 261			; 00000105H
  004c6	68 d5 00 00 00	 push	 213			; 000000d5H
  004cb	68 3e 01 00 00	 push	 318			; 0000013eH
  004d0	6a 35		 push	 53			; 00000035H
  004d2	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN27@draw_weapo:

; 8469 : 		}
; 8470 : 
; 8471 : 		//
; 8472 : 		// hardpoints
; 8473 : 		//
; 8474 : 		draw_weapon_hardpoint_info (APACHE_CHAIN_GUN_TURRET, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  004d7	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  004da	50		 push	 eax
  004db	6a 00		 push	 0
  004dd	6a 06		 push	 6
  004df	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8475 : 
; 8476 : 		draw_weapon_hardpoint_info (APACHE_LHS_WING_TIP_MOUNT, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  004e4	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  004e7	50		 push	 eax
  004e8	6a 00		 push	 0
  004ea	6a 04		 push	 4
  004ec	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8477 : 
; 8478 : 		draw_weapon_hardpoint_info (APACHE_RHS_WING_TIP_MOUNT, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  004f1	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  004f4	50		 push	 eax
  004f5	6a 00		 push	 0
  004f7	6a 05		 push	 5
  004f9	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8479 : 
; 8480 : 		draw_weapon_hardpoint_info (APACHE_LHS_INNER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  004fe	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  00501	50		 push	 eax
  00502	6a 00		 push	 0
  00504	6a 00		 push	 0
  00506	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8481 : 
; 8482 : 		draw_weapon_hardpoint_info (APACHE_RHS_INNER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  0050b	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  0050e	50		 push	 eax
  0050f	6a 00		 push	 0
  00511	6a 01		 push	 1
  00513	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8483 : 
; 8484 : 		draw_weapon_hardpoint_info (APACHE_LHS_OUTER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  00518	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  0051b	50		 push	 eax
  0051c	6a 00		 push	 0
  0051e	6a 02		 push	 2
  00520	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8485 : 
; 8486 : 		draw_weapon_hardpoint_info (APACHE_RHS_OUTER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  00525	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  00528	50		 push	 eax
  00529	6a 00		 push	 0
  0052b	6a 03		 push	 3
  0052d	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8487 : 
; 8488 : 		draw_weapon_hardpoint_info (APACHE_CHAFF_DISPENSER, ENTITY_SUB_TYPE_WEAPON_CHAFF, selected_weapon);

  00532	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  00535	50		 push	 eax
  00536	6a 43		 push	 67			; 00000043H
  00538	6a 07		 push	 7
  0053a	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8489 : 
; 8490 : 		draw_weapon_hardpoint_info (APACHE_FLARE_DISPENSER, ENTITY_SUB_TYPE_WEAPON_FLARE, selected_weapon);

  0053f	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  00542	50		 push	 eax
  00543	6a 44		 push	 68			; 00000044H
  00545	6a 07		 push	 7
  00547	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 8491 : 
; 8492 : 		//
; 8493 : 		// auto-countermeasures
; 8494 : 		//
; 8495 : 
; 8496 : 		if (get_global_auto_counter_measures ())

  0054c	83 3d 90 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+144, 0
  00553	74 1a		 je	 SHORT $LN28@draw_weapo

; 8497 : 		{
; 8498 : 			draw_sprite (56, 347, 262, 261, 23, 7);

  00555	6a 07		 push	 7
  00557	6a 17		 push	 23			; 00000017H
  00559	68 05 01 00 00	 push	 261			; 00000105H
  0055e	68 06 01 00 00	 push	 262			; 00000106H
  00563	68 5b 01 00 00	 push	 347			; 0000015bH
  00568	6a 38		 push	 56			; 00000038H
  0056a	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN28@draw_weapo:

; 8499 : 		}
; 8500 : 
; 8501 : 		//
; 8502 : 		// rocket salvo
; 8503 : 		//
; 8504 : 
; 8505 : 		if
; 8506 : 		(
; 8507 : 			get_local_entity_weapon_available (en, ENTITY_SUB_TYPE_WEAPON_HYDRA70_M255) ||

  0056f	6a 1e		 push	 30			; 0000001eH
  00571	8b 45 ac	 mov	 eax, DWORD PTR _en$[ebp]
  00574	50		 push	 eax
  00575	e8 00 00 00 00	 call	 ?get_local_entity_weapon_available@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_available
  0057a	85 c0		 test	 eax, eax
  0057c	75 13		 jne	 SHORT $LN30@draw_weapo
  0057e	6a 1f		 push	 31			; 0000001fH
  00580	8b 45 ac	 mov	 eax, DWORD PTR _en$[ebp]
  00583	50		 push	 eax
  00584	e8 00 00 00 00	 call	 ?get_local_entity_weapon_available@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_available
  00589	85 c0		 test	 eax, eax
  0058b	0f 84 17 01 00
	00		 je	 $LN32@draw_weapo
$LN30@draw_weapo:

; 8508 : 			get_local_entity_weapon_available (en, ENTITY_SUB_TYPE_WEAPON_HYDRA70_M261)
; 8509 : 		)
; 8510 : 		{
; 8511 : 			draw_sprite (34, 382 + 3, 133, 342, 49, 8);

  00591	6a 08		 push	 8
  00593	6a 31		 push	 49			; 00000031H
  00595	68 56 01 00 00	 push	 342			; 00000156H
  0059a	68 85 00 00 00	 push	 133			; 00000085H
  0059f	68 81 01 00 00	 push	 385			; 00000181H
  005a4	6a 22		 push	 34			; 00000022H
  005a6	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 8512 : 
; 8513 : 			if (rocket_salvo_size == ROCKET_SALVO_SIZE_ALL)

  005ab	81 3d 00 00 00
	00 e8 03 00 00	 cmp	 DWORD PTR ?rocket_salvo_size@@3HA, 1000 ; rocket_salvo_size, 000003e8H
  005b5	75 1f		 jne	 SHORT $LN31@draw_weapo

; 8514 : 			{
; 8515 : 				draw_sprite (84, 382 + 3, 183, 342, 18, 8);

  005b7	6a 08		 push	 8
  005b9	6a 12		 push	 18			; 00000012H
  005bb	68 56 01 00 00	 push	 342			; 00000156H
  005c0	68 b7 00 00 00	 push	 183			; 000000b7H
  005c5	68 81 01 00 00	 push	 385			; 00000181H
  005ca	6a 54		 push	 84			; 00000054H
  005cc	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 8516 : 			}
; 8517 : 			else

  005d1	e9 d2 00 00 00	 jmp	 $LN32@draw_weapo
$LN31@draw_weapo:

; 8518 : 			{
; 8519 : 				sprintf (buffer, "%02d", rocket_salvo_size);

  005d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rocket_salvo_size@@3HA ; rocket_salvo_size
  005db	50		 push	 eax
  005dc	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  005e1	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  005e4	51		 push	 ecx
  005e5	e8 00 00 00 00	 call	 _sprintf
  005ea	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8520 : 
; 8521 : 				if (buffer[0] == '0')

  005ed	b8 01 00 00 00	 mov	 eax, 1
  005f2	6b c8 00	 imul	 ecx, eax, 0
  005f5	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  005fa	83 fa 30	 cmp	 edx, 48			; 00000030H
  005fd	75 0f		 jne	 SHORT $LN33@draw_weapo

; 8522 : 				{
; 8523 : 					u = 184 + (9 * 5);

  005ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43650000
  00607	f3 0f 11 45 a4	 movss	 DWORD PTR _u$[ebp], xmm0

; 8524 : 				}
; 8525 : 				else

  0060c	eb 21		 jmp	 SHORT $LN34@draw_weapo
$LN33@draw_weapo:

; 8526 : 				{
; 8527 : 					u = 184 + ((buffer[0] - '1') * 5);

  0060e	b8 01 00 00 00	 mov	 eax, 1
  00613	6b c8 00	 imul	 ecx, eax, 0
  00616	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  0061b	83 ea 31	 sub	 edx, 49			; 00000031H
  0061e	6b c2 05	 imul	 eax, edx, 5
  00621	05 b8 00 00 00	 add	 eax, 184		; 000000b8H
  00626	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0062a	f3 0f 11 45 a4	 movss	 DWORD PTR _u$[ebp], xmm0
$LN34@draw_weapo:

; 8528 : 				}
; 8529 : 
; 8530 : 				draw_sprite (86, 383 + 3, u, 276, 4, 6);

  0062f	6a 06		 push	 6
  00631	6a 04		 push	 4
  00633	68 14 01 00 00	 push	 276			; 00000114H
  00638	f3 0f 2c 45 a4	 cvttss2si eax, DWORD PTR _u$[ebp]
  0063d	50		 push	 eax
  0063e	68 82 01 00 00	 push	 386			; 00000182H
  00643	6a 56		 push	 86			; 00000056H
  00645	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 8531 : 
; 8532 : 				if (buffer[1] == '0')

  0064a	b8 01 00 00 00	 mov	 eax, 1
  0064f	c1 e0 00	 shl	 eax, 0
  00652	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  00657	83 f9 30	 cmp	 ecx, 48			; 00000030H
  0065a	75 0f		 jne	 SHORT $LN35@draw_weapo

; 8533 : 				{
; 8534 : 					u = 184 + (9 * 5);

  0065c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43650000
  00664	f3 0f 11 45 a4	 movss	 DWORD PTR _u$[ebp], xmm0

; 8535 : 				}
; 8536 : 				else

  00669	eb 22		 jmp	 SHORT $LN36@draw_weapo
$LN35@draw_weapo:

; 8537 : 				{
; 8538 : 					u = 184 + ((buffer[1] - '1') * 5);

  0066b	b8 01 00 00 00	 mov	 eax, 1
  00670	c1 e0 00	 shl	 eax, 0
  00673	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  00678	83 e9 31	 sub	 ecx, 49			; 00000031H
  0067b	6b d1 05	 imul	 edx, ecx, 5
  0067e	81 c2 b8 00 00
	00		 add	 edx, 184		; 000000b8H
  00684	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00688	f3 0f 11 45 a4	 movss	 DWORD PTR _u$[ebp], xmm0
$LN36@draw_weapo:

; 8539 : 				}
; 8540 : 
; 8541 : 				draw_sprite (90, 383 + 3, u, 276, 4, 6);

  0068d	6a 06		 push	 6
  0068f	6a 04		 push	 4
  00691	68 14 01 00 00	 push	 276			; 00000114H
  00696	f3 0f 2c 45 a4	 cvttss2si eax, DWORD PTR _u$[ebp]
  0069b	50		 push	 eax
  0069c	68 82 01 00 00	 push	 386			; 00000182H
  006a1	6a 5a		 push	 90			; 0000005aH
  006a3	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN32@draw_weapo:
$LN1@draw_weapo:

; 8542 : 			}
; 8543 : 		}
; 8544 : 	}
; 8545 : }

  006a8	5f		 pop	 edi
  006a9	5e		 pop	 esi
  006aa	5b		 pop	 ebx
  006ab	8b e5		 mov	 esp, ebp
  006ad	5d		 pop	 ebp
  006ae	c2 08 00	 ret	 8
  006b1	0f 1f 00	 npad	 3
$LN46@draw_weapo:
  006b4	00 00 00 00	 DD	 $LN5@draw_weapo
  006b8	00 00 00 00	 DD	 $LN6@draw_weapo
  006bc	00 00 00 00	 DD	 $LN7@draw_weapo
  006c0	00 00 00 00	 DD	 $LN8@draw_weapo
?draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z ENDP	; draw_weapon_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv1425 = -324						; size = 4
tv1219 = -324						; size = 4
tv926 = -324						; size = 4
tv903 = -324						; size = 4
tv559 = -324						; size = 4
tv480 = -324						; size = 4
tv280 = -324						; size = 4
tv2586 = -320						; size = 8
tv2570 = -320						; size = 8
tv2470 = -320						; size = 8
tv2352 = -320						; size = 8
tv2334 = -320						; size = 8
tv2309 = -320						; size = 8
tv2275 = -320						; size = 8
tv2249 = -320						; size = 8
tv2219 = -320						; size = 8
tv2072 = -320						; size = 8
tv2057 = -320						; size = 8
tv2002 = -320						; size = 8
tv1987 = -320						; size = 8
tv1936 = -320						; size = 8
tv1921 = -320						; size = 8
tv1419 = -320						; size = 4
tv1213 = -320						; size = 4
tv920 = -320						; size = 4
tv897 = -320						; size = 4
tv804 = -320						; size = 4
tv553 = -320						; size = 4
tv474 = -320						; size = 4
tv274 = -320						; size = 4
tv83 = -320						; size = 4
tv1412 = -316						; size = 4
tv1315 = -316						; size = 4
tv1313 = -316						; size = 4
tv1222 = -316						; size = 4
tv1206 = -316						; size = 4
tv1043 = -316						; size = 4
tv1037 = -316						; size = 4
tv947 = -316						; size = 4
tv942 = -316						; size = 4
tv930 = -316						; size = 4
tv927 = -316						; size = 4
tv913 = -316						; size = 4
tv890 = -316						; size = 4
tv797 = -316						; size = 4
tv771 = -316						; size = 4
tv749 = -316						; size = 4
tv546 = -316						; size = 4
tv534 = -316						; size = 4
tv467 = -316						; size = 4
tv455 = -316						; size = 4
tv299 = -316						; size = 4
tv283 = -316						; size = 4
tv267 = -316						; size = 4
tv75 = -316						; size = 4
$T1 = -312						; size = 4
_y_offset$2 = -244					; size = 4
_y2$3 = -240						; size = 4
_x2$4 = -236						; size = 4
_y1$5 = -232						; size = 4
_x1$6 = -228						; size = 4
_height$7 = -224					; size = 4
_width$8 = -220						; size = 4
_tip$9 = -216						; size = 4
_left_tip$10 = -212					; size = 4
_selected$11 = -208					; size = 4
_selected$12 = -204					; size = 4
_text_colour$13 = -200					; size = 4
_selected$14 = -196					; size = 4
_missile_y$15 = -192					; size = 4
_missile_x$16 = -188					; size = 4
_last_offset$17 = -184					; size = 4
_i$18 = -180						; size = 4
_pylon_y$19 = -176					; size = 4
_pylon_x$20 = -172					; size = 4
_pylon_end$ = -168					; size = 4
_pylon_start$ = -164					; size = 4
_drawcannon$ = -160					; size = 2
_selected$ = -156					; size = 4
_weapon_sub_type$ = -152				; size = 4
_pylon$ = -148						; size = 4
_selected_weapon$ = -144				; size = 4
_damaged$ = -140					; size = 4
_number$ = -136						; size = 4
_x_adjust$ = -132					; size = 4
_s_ptr$ = -128						; size = 4
_s$ = -124						; size = 80
_wing_tip_right$ = -44					; size = 4
_wing_tip_left$ = -40					; size = 4
_rear_wing$ = -36					; size = 4
_forward_wing$ = -32					; size = 4
_y3$ = -28						; size = 4
_y2$ = -24						; size = 4
_y1$ = -20						; size = 4
_x4$ = -16						; size = 4
_x3$ = -12						; size = 4
_x2$ = -8						; size = 4
_x1$ = -4						; size = 4
_location$ = 8						; size = 4
?draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z PROC ; draw_large_weapon_display_mfd, COMDAT

; 7436 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 7437 : 	float x1, x2, x3, x4, y1, y2, y3;
; 7438 : 	float forward_wing, rear_wing, wing_tip_left, wing_tip_right;
; 7439 : 	char s[80], *s_ptr;
; 7440 : 	float x_adjust;
; 7441 : 	int number, damaged, selected_weapon, pylon;
; 7442 : 	entity_sub_types weapon_sub_type;
; 7443 : int selected;
; 7444 : short drawcannon = TRUE;

  0000c	b8 01 00 00 00	 mov	 eax, 1
  00011	66 89 85 60 ff
	ff ff		 mov	 WORD PTR _drawcannon$[ebp], ax

; 7445 : int pylon_start, pylon_end;
; 7446 : 
; 7447 : 	ASSERT(draw_large_mfd);

  00018	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0001f	75 18		 jne	 SHORT $LN40@draw_large
  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z@4JA
  00026	83 c0 0b	 add	 eax, 11			; 0000000bH
  00029	50		 push	 eax
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MFMEIMLB@draw_large_mfd@
  00034	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN40@draw_large:

; 7448 : 
; 7449 : 	selected_weapon = get_local_entity_int_value(get_gunship_entity (), INT_TYPE_SELECTED_WEAPON);

  00039	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00040	74 0f		 je	 SHORT $LN149@draw_large
  00042	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00047	8b 08		 mov	 ecx, DWORD PTR [eax]
  00049	89 8d c4 fe ff
	ff		 mov	 DWORD PTR tv75[ebp], ecx
  0004f	eb 24		 jmp	 SHORT $LN150@draw_large
$LN149@draw_large:
  00051	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z@4JA
  00057	83 c2 0d	 add	 edx, 13			; 0000000dH
  0005a	52		 push	 edx
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006b	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv75[ebp], 0
$LN150@draw_large:
  00075	b9 01 00 00 00	 mov	 ecx, 1
  0007a	85 c9		 test	 ecx, ecx
  0007c	74 0c		 je	 SHORT $LN151@draw_large
  0007e	c7 85 c0 fe ff
	ff b8 00 00 00	 mov	 DWORD PTR tv83[ebp], 184 ; 000000b8H
  00088	eb 24		 jmp	 SHORT $LN152@draw_large
$LN151@draw_large:
  0008a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z@4JA
  00090	83 c2 0d	 add	 edx, 13			; 0000000dH
  00093	52		 push	 edx
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00099	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a4	c7 85 c0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv83[ebp], 0
$LN152@draw_large:
  000ae	68 b8 00 00 00	 push	 184			; 000000b8H
  000b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000b9	51		 push	 ecx
  000ba	69 95 c4 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv75[ebp], 1116
  000c4	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR tv83[ebp]
  000ca	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000d1	ff d1		 call	 ecx
  000d3	89 85 70 ff ff
	ff		 mov	 DWORD PTR _selected_weapon$[ebp], eax

; 7450 : 
; 7451 : 	set_mono_font_type (MONO_FONT_TYPE_7X12);

  000d9	6a 05		 push	 5
  000db	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 7452 : 
; 7453 : 	// draw helicopter outline
; 7454 : 	// nose
; 7455 : 	
; 7456 : 	get_2d_float_screen_coordinates (-0.25, 0.5, &x1, &y1);

  000e0	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  000e3	50		 push	 eax
  000e4	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  000e7	51		 push	 ecx
  000e8	51		 push	 ecx
  000e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f6	51		 push	 ecx
  000f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  000ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00104	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 7457 : 	get_2d_float_screen_coordinates (-0.1, 0.525, &x2, &y2);

  00109	8d 45 e8	 lea	 eax, DWORD PTR _y2$[ebp]
  0010c	50		 push	 eax
  0010d	8d 4d f8	 lea	 ecx, DWORD PTR _x2$[ebp]
  00110	51		 push	 ecx
  00111	51		 push	 ecx
  00112	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f066666
  0011a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011f	51		 push	 ecx
  00120	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  00128	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012d	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 7458 : 	get_2d_float_screen_coordinates (-0.075, 0.6, &x3, &y3);

  00132	8d 45 e4	 lea	 eax, DWORD PTR _y3$[ebp]
  00135	50		 push	 eax
  00136	8d 4d f4	 lea	 ecx, DWORD PTR _x3$[ebp]
  00139	51		 push	 ecx
  0013a	51		 push	 ecx
  0013b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00143	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00148	51		 push	 ecx
  00149	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00151	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00156	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 7459 : 	get_2d_float_screen_x_coordinate (0.075, &x4);

  0015b	8d 45 f0	 lea	 eax, DWORD PTR _x4$[ebp]
  0015e	50		 push	 eax
  0015f	51		 push	 ecx
  00160	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d99999a
  00168	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016d	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7460 : 	
; 7461 : 	draw_line (x1, y1, x2, y2, MFD_COLOUR1);

  00172	b8 04 00 00 00	 mov	 eax, 4
  00177	6b c8 00	 imul	 ecx, eax, 0
  0017a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00180	52		 push	 edx
  00181	51		 push	 ecx
  00182	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00187	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018c	51		 push	 ecx
  0018d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00192	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00197	51		 push	 ecx
  00198	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0019d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a2	51		 push	 ecx
  001a3	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  001a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ad	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7462 : 	draw_line (x2, y2, x3, y3, MFD_COLOUR1);

  001b2	b8 04 00 00 00	 mov	 eax, 4
  001b7	6b c8 00	 imul	 ecx, eax, 0
  001ba	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001c0	52		 push	 edx
  001c1	51		 push	 ecx
  001c2	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y3$[ebp]
  001c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cc	51		 push	 ecx
  001cd	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  001d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d7	51		 push	 ecx
  001d8	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  001dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e2	51		 push	 ecx
  001e3	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  001e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ed	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7463 : 	draw_line (x3, y3, x4, y3, MFD_COLOUR1);

  001f2	b8 04 00 00 00	 mov	 eax, 4
  001f7	6b c8 00	 imul	 ecx, eax, 0
  001fa	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00200	52		 push	 edx
  00201	51		 push	 ecx
  00202	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y3$[ebp]
  00207	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020c	51		 push	 ecx
  0020d	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x4$[ebp]
  00212	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00217	51		 push	 ecx
  00218	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y3$[ebp]
  0021d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00222	51		 push	 ecx
  00223	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  00228	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022d	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7464 : 
; 7465 : 	get_2d_float_screen_x_coordinate (0.1, &x3);

  00232	8d 45 f4	 lea	 eax, DWORD PTR _x3$[ebp]
  00235	50		 push	 eax
  00236	51		 push	 ecx
  00237	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0023f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00244	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7466 : 	get_2d_float_screen_x_coordinate (0.25, &x2);

  00249	8d 45 f8	 lea	 eax, DWORD PTR _x2$[ebp]
  0024c	50		 push	 eax
  0024d	51		 push	 ecx
  0024e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  00256	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025b	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7467 : 
; 7468 : 	draw_line (x4, y3, x3, y2, MFD_COLOUR1);

  00260	b8 04 00 00 00	 mov	 eax, 4
  00265	6b c8 00	 imul	 ecx, eax, 0
  00268	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0026e	52		 push	 edx
  0026f	51		 push	 ecx
  00270	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00275	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027a	51		 push	 ecx
  0027b	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  00280	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00285	51		 push	 ecx
  00286	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y3$[ebp]
  0028b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00290	51		 push	 ecx
  00291	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x4$[ebp]
  00296	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7469 : 	draw_line (x3, y2, x2, y1, MFD_COLOUR1);

  002a0	b8 04 00 00 00	 mov	 eax, 4
  002a5	6b c8 00	 imul	 ecx, eax, 0
  002a8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002ae	52		 push	 edx
  002af	51		 push	 ecx
  002b0	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  002b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ba	51		 push	 ecx
  002bb	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  002c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c5	51		 push	 ecx
  002c6	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  002cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d0	51		 push	 ecx
  002d1	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  002d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002db	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7470 : 
; 7471 : 	// body
; 7472 : 	
; 7473 : 	get_2d_float_screen_y_coordinate (-0.1, &forward_wing);

  002e0	8d 45 e0	 lea	 eax, DWORD PTR _forward_wing$[ebp]
  002e3	50		 push	 eax
  002e4	51		 push	 ecx
  002e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  002ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f2	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 7474 : 	get_2d_float_screen_y_coordinate (-0.5, &rear_wing);

  002f7	8d 45 dc	 lea	 eax, DWORD PTR _rear_wing$[ebp]
  002fa	50		 push	 eax
  002fb	51		 push	 ecx
  002fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00304	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00309	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 7475 : 	get_2d_float_screen_x_coordinate (-0.97, &wing_tip_left);

  0030e	8d 45 d8	 lea	 eax, DWORD PTR _wing_tip_left$[ebp]
  00311	50		 push	 eax
  00312	51		 push	 ecx
  00313	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7851ec
  0031b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00320	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7476 : 	get_2d_float_screen_x_coordinate (0.97, &wing_tip_right);

  00325	8d 45 d4	 lea	 eax, DWORD PTR _wing_tip_right$[ebp]
  00328	50		 push	 eax
  00329	51		 push	 ecx
  0032a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7851ec
  00332	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00337	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7477 : 
; 7478 : 	draw_line (x1, y1, x1, forward_wing, MFD_COLOUR1);

  0033c	b8 04 00 00 00	 mov	 eax, 4
  00341	6b c8 00	 imul	 ecx, eax, 0
  00344	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0034a	52		 push	 edx
  0034b	51		 push	 ecx
  0034c	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  00351	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00356	51		 push	 ecx
  00357	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0035c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00361	51		 push	 ecx
  00362	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00367	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036c	51		 push	 ecx
  0036d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00372	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00377	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7479 : 	draw_line (x2, y1, x2, forward_wing, MFD_COLOUR1);

  0037c	b8 04 00 00 00	 mov	 eax, 4
  00381	6b c8 00	 imul	 ecx, eax, 0
  00384	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0038a	52		 push	 edx
  0038b	51		 push	 ecx
  0038c	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  00391	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00396	51		 push	 ecx
  00397	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0039c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a1	51		 push	 ecx
  003a2	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  003a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ac	51		 push	 ecx
  003ad	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  003b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b7	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7480 : 	draw_line (x1, forward_wing, wing_tip_left, forward_wing, MFD_COLOUR1);

  003bc	b8 04 00 00 00	 mov	 eax, 4
  003c1	6b c8 00	 imul	 ecx, eax, 0
  003c4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003ca	52		 push	 edx
  003cb	51		 push	 ecx
  003cc	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  003d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d6	51		 push	 ecx
  003d7	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _wing_tip_left$[ebp]
  003dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e1	51		 push	 ecx
  003e2	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  003e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ec	51		 push	 ecx
  003ed	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  003f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f7	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7481 : 	draw_line (x2, forward_wing, wing_tip_right, forward_wing, MFD_COLOUR1);

  003fc	b8 04 00 00 00	 mov	 eax, 4
  00401	6b c8 00	 imul	 ecx, eax, 0
  00404	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0040a	52		 push	 edx
  0040b	51		 push	 ecx
  0040c	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  00411	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00416	51		 push	 ecx
  00417	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _wing_tip_right$[ebp]
  0041c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00421	51		 push	 ecx
  00422	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  00427	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042c	51		 push	 ecx
  0042d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00432	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00437	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7482 : 
; 7483 : 	draw_line (wing_tip_left, forward_wing, wing_tip_left, rear_wing, MFD_COLOUR1);

  0043c	b8 04 00 00 00	 mov	 eax, 4
  00441	6b c8 00	 imul	 ecx, eax, 0
  00444	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0044a	52		 push	 edx
  0044b	51		 push	 ecx
  0044c	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  00451	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00456	51		 push	 ecx
  00457	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _wing_tip_left$[ebp]
  0045c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00461	51		 push	 ecx
  00462	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  00467	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046c	51		 push	 ecx
  0046d	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _wing_tip_left$[ebp]
  00472	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00477	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7484 : 	draw_line (wing_tip_right, forward_wing, wing_tip_right, rear_wing, MFD_COLOUR1);

  0047c	b8 04 00 00 00	 mov	 eax, 4
  00481	6b c8 00	 imul	 ecx, eax, 0
  00484	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0048a	52		 push	 edx
  0048b	51		 push	 ecx
  0048c	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  00491	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00496	51		 push	 ecx
  00497	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _wing_tip_right$[ebp]
  0049c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a1	51		 push	 ecx
  004a2	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  004a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ac	51		 push	 ecx
  004ad	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _wing_tip_right$[ebp]
  004b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b7	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7485 : 	draw_line (x1, rear_wing, wing_tip_left, rear_wing, MFD_COLOUR1);

  004bc	b8 04 00 00 00	 mov	 eax, 4
  004c1	6b c8 00	 imul	 ecx, eax, 0
  004c4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004ca	52		 push	 edx
  004cb	51		 push	 ecx
  004cc	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  004d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d6	51		 push	 ecx
  004d7	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _wing_tip_left$[ebp]
  004dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e1	51		 push	 ecx
  004e2	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  004e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ec	51		 push	 ecx
  004ed	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  004f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f7	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7486 : 	draw_line (x2, rear_wing, wing_tip_right, rear_wing, MFD_COLOUR1);

  004fc	b8 04 00 00 00	 mov	 eax, 4
  00501	6b c8 00	 imul	 ecx, eax, 0
  00504	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0050a	52		 push	 edx
  0050b	51		 push	 ecx
  0050c	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  00511	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00516	51		 push	 ecx
  00517	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _wing_tip_right$[ebp]
  0051c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00521	51		 push	 ecx
  00522	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  00527	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0052c	51		 push	 ecx
  0052d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00532	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00537	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7487 : 
; 7488 : 	get_2d_float_screen_y_coordinate (-0.8, &y2);

  0053c	8d 45 e8	 lea	 eax, DWORD PTR _y2$[ebp]
  0053f	50		 push	 eax
  00540	51		 push	 ecx
  00541	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00549	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0054e	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 7489 : 
; 7490 : 	draw_line (x1, rear_wing, x1, y2, MFD_COLOUR1);

  00553	b8 04 00 00 00	 mov	 eax, 4
  00558	6b c8 00	 imul	 ecx, eax, 0
  0055b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00561	52		 push	 edx
  00562	51		 push	 ecx
  00563	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00568	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0056d	51		 push	 ecx
  0056e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00573	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00578	51		 push	 ecx
  00579	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  0057e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00583	51		 push	 ecx
  00584	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00589	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0058e	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7491 : 	draw_line (x2, rear_wing, x2, y2, MFD_COLOUR1);

  00593	b8 04 00 00 00	 mov	 eax, 4
  00598	6b c8 00	 imul	 ecx, eax, 0
  0059b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005a1	52		 push	 edx
  005a2	51		 push	 ecx
  005a3	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  005a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ad	51		 push	 ecx
  005ae	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  005b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b8	51		 push	 ecx
  005b9	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  005be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c3	51		 push	 ecx
  005c4	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  005c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ce	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7492 : 	draw_line (x1, y2, x2, y2, MFD_COLOUR1);

  005d3	b8 04 00 00 00	 mov	 eax, 4
  005d8	6b c8 00	 imul	 ecx, eax, 0
  005db	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005e1	52		 push	 edx
  005e2	51		 push	 ecx
  005e3	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  005e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ed	51		 push	 ecx
  005ee	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  005f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f8	51		 push	 ecx
  005f9	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  005fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00603	51		 push	 ecx
  00604	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00609	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0060e	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7493 : 
; 7494 : 
; 7495 : 	switch (get_local_entity_int_value (get_gunship_entity (), INT_TYPE_ENTITY_SUB_TYPE))

  00613	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0061a	74 0f		 je	 SHORT $LN153@draw_large
  0061c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00621	8b 08		 mov	 ecx, DWORD PTR [eax]
  00623	89 8d c4 fe ff
	ff		 mov	 DWORD PTR tv267[ebp], ecx
  00629	eb 20		 jmp	 SHORT $LN154@draw_large
$LN153@draw_large:
  0062b	68 47 1d 00 00	 push	 7495			; 00001d47H
  00630	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00635	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0063b	52		 push	 edx
  0063c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00641	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv267[ebp], 0
$LN154@draw_large:
  0064b	b8 01 00 00 00	 mov	 eax, 1
  00650	85 c0		 test	 eax, eax
  00652	74 0c		 je	 SHORT $LN155@draw_large
  00654	c7 85 c0 fe ff
	ff 34 00 00 00	 mov	 DWORD PTR tv274[ebp], 52 ; 00000034H
  0065e	eb 20		 jmp	 SHORT $LN156@draw_large
$LN155@draw_large:
  00660	68 47 1d 00 00	 push	 7495			; 00001d47H
  00665	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0066a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00670	51		 push	 ecx
  00671	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00676	c7 85 c0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv274[ebp], 0
$LN156@draw_large:
  00680	6a 34		 push	 52			; 00000034H
  00682	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00688	52		 push	 edx
  00689	69 85 c4 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv267[ebp], 1116
  00693	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR tv274[ebp]
  00699	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  006a0	ff d2		 call	 edx
  006a2	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv280[ebp], eax
  006a8	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR tv280[ebp]
  006ae	83 e8 06	 sub	 eax, 6
  006b1	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv280[ebp], eax
  006b7	83 bd bc fe ff
	ff 14		 cmp	 DWORD PTR tv280[ebp], 20 ; 00000014H
  006be	77 1d		 ja	 SHORT $LN42@draw_large
  006c0	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR tv280[ebp]
  006c6	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN197@draw_large[ecx]
  006cd	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN201@draw_large[edx*4]
$LN41@draw_large:

; 7496 : 	{
; 7497 : 		case ENTITY_SUB_TYPE_AIRCRAFT_KA29_HELIX_B:
; 7498 : 		case ENTITY_SUB_TYPE_AIRCRAFT_CH46E_SEA_KNIGHT:
; 7499 : 		case ENTITY_SUB_TYPE_AIRCRAFT_CH3_JOLLY_GREEN_GIANT:
; 7500 : 		case ENTITY_SUB_TYPE_AIRCRAFT_MI17_HIP:
; 7501 : 		case ENTITY_SUB_TYPE_AIRCRAFT_CH47D_CHINOOK:
; 7502 : 		case ENTITY_SUB_TYPE_AIRCRAFT_MI6_HOOK:
; 7503 : 		case ENTITY_SUB_TYPE_AIRCRAFT_MV22_OSPREY:
; 7504 : 		case ENTITY_SUB_TYPE_AIRCRAFT_CH53E_SUPER_STALLION:
; 7505 : 		{
; 7506 : 			drawcannon = FALSE;

  006d4	33 c0		 xor	 eax, eax
  006d6	66 89 85 60 ff
	ff ff		 mov	 WORD PTR _drawcannon$[ebp], ax
$LN42@draw_large:

; 7507 : 			break;
; 7508 : 		}
; 7509 : 		default:
; 7510 : 		{
; 7511 : 		}
; 7512 : 	}
; 7513 : 
; 7514 : 
; 7515 : 	switch (get_global_gunship_type ())

  006dd	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+12
  006e2	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv283[ebp], eax
  006e8	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR tv283[ebp], 0
  006ef	74 02		 je	 SHORT $LN43@draw_large
  006f1	eb 26		 jmp	 SHORT $LN44@draw_large
$LN43@draw_large:

; 7516 : 	{
; 7517 : 		////////////////////////////////////////
; 7518 : 		case GUNSHIP_TYPE_APACHE:
; 7519 : 		////////////////////////////////////////
; 7520 : 		{
; 7521 : 			get_local_entity_weapon_hardpoint_info (get_gunship_entity (), 

  006f3	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _damaged$[ebp]
  006f9	50		 push	 eax
  006fa	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _number$[ebp]
  00700	51		 push	 ecx
  00701	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00707	52		 push	 edx
  00708	6a 00		 push	 0
  0070a	6a 06		 push	 6
  0070c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00711	50		 push	 eax
  00712	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info

; 7522 : 				APACHE_CHAIN_GUN_TURRET, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, 
; 7523 : 				&weapon_sub_type, &number, &damaged);
; 7524 : //selected = (weapon_sub_type == selected_weapon) && !damaged;
; 7525 : 			break;

  00717	eb 24		 jmp	 SHORT $LN4@draw_large
$LN44@draw_large:

; 7526 : 		}
; 7527 : 		////////////////////////////////////////
; 7528 : 		default:
; 7529 : 		////////////////////////////////////////
; 7530 : 		{
; 7531 : 			get_local_entity_weapon_hardpoint_info (get_gunship_entity (), 

  00719	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _damaged$[ebp]
  0071f	50		 push	 eax
  00720	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _number$[ebp]
  00726	51		 push	 ecx
  00727	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  0072d	52		 push	 edx
  0072e	6a 00		 push	 0
  00730	6a 00		 push	 0
  00732	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00737	50		 push	 eax
  00738	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
$LN4@draw_large:

; 7532 : 				COBRA_CANNON_TURRET, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, 
; 7533 : 				&weapon_sub_type, &number, &damaged);
; 7534 : //selected = (weapon_sub_type == selected_weapon) && !damaged;
; 7535 : 		}
; 7536 : 	}
; 7537 : 
; 7538 : 	selected = (weapon_sub_type == selected_weapon) && !damaged;

  0073d	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00743	3b 85 70 ff ff
	ff		 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00749	75 15		 jne	 SHORT $LN157@draw_large
  0074b	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  00752	75 0c		 jne	 SHORT $LN157@draw_large
  00754	c7 85 c4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv299[ebp], 1
  0075e	eb 0a		 jmp	 SHORT $LN158@draw_large
$LN157@draw_large:
  00760	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv299[ebp], 0
$LN158@draw_large:
  0076a	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR tv299[ebp]
  00770	89 8d 64 ff ff
	ff		 mov	 DWORD PTR _selected$[ebp], ecx

; 7539 : 
; 7540 : 	// cannon
; 7541 : 	if(drawcannon)

  00776	0f bf 85 60 ff
	ff ff		 movsx	 eax, WORD PTR _drawcannon$[ebp]
  0077d	85 c0		 test	 eax, eax
  0077f	0f 84 c8 04 00
	00		 je	 $LN45@draw_large

; 7542 : 	{
; 7543 : 		get_2d_float_screen_coordinates (-0.01, 0.575, &x1, &y1);

  00785	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  00788	50		 push	 eax
  00789	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  0078c	51		 push	 ecx
  0078d	51		 push	 ecx
  0078e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f133333
  00796	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079b	51		 push	 ecx
  0079c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bc23d70a
  007a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a9	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 7544 : 		get_2d_float_screen_x_coordinate (0.01, &x2);

  007ae	8d 45 f8	 lea	 eax, DWORD PTR _x2$[ebp]
  007b1	50		 push	 eax
  007b2	51		 push	 ecx
  007b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70a
  007bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c0	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7545 : 		get_2d_float_screen_y_coordinate (0.35, &y2);

  007c5	8d 45 e8	 lea	 eax, DWORD PTR _y2$[ebp]
  007c8	50		 push	 eax
  007c9	51		 push	 ecx
  007ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  007d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d7	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 7546 : 		get_2d_float_screen_x_coordinate (-0.08, &x3);

  007dc	8d 45 f4	 lea	 eax, DWORD PTR _x3$[ebp]
  007df	50		 push	 eax
  007e0	51		 push	 ecx
  007e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  007e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ee	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7547 : 		get_2d_float_screen_x_coordinate (0.08, &x4);

  007f3	8d 45 f0	 lea	 eax, DWORD PTR _x4$[ebp]
  007f6	50		 push	 eax
  007f7	51		 push	 ecx
  007f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  00800	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00805	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7548 : 		get_2d_float_screen_y_coordinate (0.2, &y3);

  0080a	8d 45 e4	 lea	 eax, DWORD PTR _y3$[ebp]
  0080d	50		 push	 eax
  0080e	51		 push	 ecx
  0080f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00817	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081c	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 7549 : 		
; 7550 : 		if (selected)

  00821	83 bd 64 ff ff
	ff 00		 cmp	 DWORD PTR _selected$[ebp], 0
  00828	74 5d		 je	 SHORT $LN46@draw_large

; 7551 : 		{
; 7552 : 			set_block (x1, y1, x2, y2, MFD_COLOUR1);

  0082a	b8 04 00 00 00	 mov	 eax, 4
  0082f	6b c8 00	 imul	 ecx, eax, 0
  00832	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00838	52		 push	 edx
  00839	f3 0f 2c 45 e8	 cvttss2si eax, DWORD PTR _y2$[ebp]
  0083e	50		 push	 eax
  0083f	f3 0f 2c 4d f8	 cvttss2si ecx, DWORD PTR _x2$[ebp]
  00844	51		 push	 ecx
  00845	f3 0f 2c 55 ec	 cvttss2si edx, DWORD PTR _y1$[ebp]
  0084a	52		 push	 edx
  0084b	f3 0f 2c 45 fc	 cvttss2si eax, DWORD PTR _x1$[ebp]
  00850	50		 push	 eax
  00851	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 7553 : 			set_block (x3, y2, x4, y3, MFD_COLOUR1);	

  00856	b8 04 00 00 00	 mov	 eax, 4
  0085b	6b c8 00	 imul	 ecx, eax, 0
  0085e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00864	52		 push	 edx
  00865	f3 0f 2c 45 e4	 cvttss2si eax, DWORD PTR _y3$[ebp]
  0086a	50		 push	 eax
  0086b	f3 0f 2c 4d f0	 cvttss2si ecx, DWORD PTR _x4$[ebp]
  00870	51		 push	 ecx
  00871	f3 0f 2c 55 e8	 cvttss2si edx, DWORD PTR _y2$[ebp]
  00876	52		 push	 edx
  00877	f3 0f 2c 45 f4	 cvttss2si eax, DWORD PTR _x3$[ebp]
  0087c	50		 push	 eax
  0087d	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 7554 : 		}
; 7555 : 		else

  00882	e9 c0 01 00 00	 jmp	 $LN47@draw_large
$LN46@draw_large:

; 7556 : 		{
; 7557 : 			draw_line (x1, y1, x2, y1, MFD_COLOUR1);

  00887	b8 04 00 00 00	 mov	 eax, 4
  0088c	6b c8 00	 imul	 ecx, eax, 0
  0088f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00895	52		 push	 edx
  00896	51		 push	 ecx
  00897	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0089c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a1	51		 push	 ecx
  008a2	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  008a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ac	51		 push	 ecx
  008ad	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  008b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008b7	51		 push	 ecx
  008b8	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  008bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c2	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7558 : 			draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  008c7	b8 04 00 00 00	 mov	 eax, 4
  008cc	6b c8 00	 imul	 ecx, eax, 0
  008cf	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008d5	52		 push	 edx
  008d6	51		 push	 ecx
  008d7	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  008dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e1	51		 push	 ecx
  008e2	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  008e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ec	51		 push	 ecx
  008ed	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  008f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f7	51		 push	 ecx
  008f8	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  008fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00902	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7559 : 			draw_line (x2, y1, x2, y2, MFD_COLOUR1);

  00907	b8 04 00 00 00	 mov	 eax, 4
  0090c	6b c8 00	 imul	 ecx, eax, 0
  0090f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00915	52		 push	 edx
  00916	51		 push	 ecx
  00917	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0091c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00921	51		 push	 ecx
  00922	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00927	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0092c	51		 push	 ecx
  0092d	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00932	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00937	51		 push	 ecx
  00938	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0093d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00942	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7560 : 			draw_line (x1, y2, x3, y2, MFD_COLOUR1);

  00947	b8 04 00 00 00	 mov	 eax, 4
  0094c	6b c8 00	 imul	 ecx, eax, 0
  0094f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00955	52		 push	 edx
  00956	51		 push	 ecx
  00957	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0095c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00961	51		 push	 ecx
  00962	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  00967	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0096c	51		 push	 ecx
  0096d	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00972	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00977	51		 push	 ecx
  00978	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0097d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00982	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7561 : 			draw_line (x2, y2, x4, y2, MFD_COLOUR1);

  00987	b8 04 00 00 00	 mov	 eax, 4
  0098c	6b c8 00	 imul	 ecx, eax, 0
  0098f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00995	52		 push	 edx
  00996	51		 push	 ecx
  00997	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0099c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009a1	51		 push	 ecx
  009a2	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x4$[ebp]
  009a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ac	51		 push	 ecx
  009ad	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  009b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b7	51		 push	 ecx
  009b8	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  009bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009c2	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7562 : 			draw_line (x3, y2, x3, y3, MFD_COLOUR1);

  009c7	b8 04 00 00 00	 mov	 eax, 4
  009cc	6b c8 00	 imul	 ecx, eax, 0
  009cf	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009d5	52		 push	 edx
  009d6	51		 push	 ecx
  009d7	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y3$[ebp]
  009dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009e1	51		 push	 ecx
  009e2	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  009e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ec	51		 push	 ecx
  009ed	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  009f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009f7	51		 push	 ecx
  009f8	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  009fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a02	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7563 : 			draw_line (x4, y2, x4, y3, MFD_COLOUR1);

  00a07	b8 04 00 00 00	 mov	 eax, 4
  00a0c	6b c8 00	 imul	 ecx, eax, 0
  00a0f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a15	52		 push	 edx
  00a16	51		 push	 ecx
  00a17	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y3$[ebp]
  00a1c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a21	51		 push	 ecx
  00a22	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x4$[ebp]
  00a27	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a2c	51		 push	 ecx
  00a2d	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00a32	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a37	51		 push	 ecx
  00a38	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x4$[ebp]
  00a3d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a42	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN47@draw_large:

; 7564 : 		}
; 7565 : 		
; 7566 : 		get_2d_float_screen_coordinates (-0.2, 0.2, &x1, &y1);

  00a47	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  00a4a	50		 push	 eax
  00a4b	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  00a4e	51		 push	 ecx
  00a4f	51		 push	 ecx
  00a50	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00a58	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a5d	51		 push	 ecx
  00a5e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00a66	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a6b	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 7567 : 		get_2d_float_screen_coordinates (0.2, 0.05, &x2, &y2);

  00a70	8d 45 e8	 lea	 eax, DWORD PTR _y2$[ebp]
  00a73	50		 push	 eax
  00a74	8d 4d f8	 lea	 ecx, DWORD PTR _x2$[ebp]
  00a77	51		 push	 ecx
  00a78	51		 push	 ecx
  00a79	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  00a81	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a86	51		 push	 ecx
  00a87	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00a8f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a94	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 7568 : 		
; 7569 : 		set_mono_font_colour (MFD_COLOUR1);	

  00a99	b8 04 00 00 00	 mov	 eax, 4
  00a9e	6b c8 00	 imul	 ecx, eax, 0
  00aa1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00aa7	52		 push	 edx
  00aa8	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7570 : 		draw_line (x1, y1, x2, y1, MFD_COLOUR1);

  00aad	b8 04 00 00 00	 mov	 eax, 4
  00ab2	6b c8 00	 imul	 ecx, eax, 0
  00ab5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00abb	52		 push	 edx
  00abc	51		 push	 ecx
  00abd	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00ac2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac7	51		 push	 ecx
  00ac8	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00acd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ad2	51		 push	 ecx
  00ad3	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00ad8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00add	51		 push	 ecx
  00ade	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00ae3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ae8	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7571 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  00aed	b8 04 00 00 00	 mov	 eax, 4
  00af2	6b c8 00	 imul	 ecx, eax, 0
  00af5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00afb	52		 push	 edx
  00afc	51		 push	 ecx
  00afd	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00b02	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b07	51		 push	 ecx
  00b08	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00b0d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b12	51		 push	 ecx
  00b13	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00b18	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b1d	51		 push	 ecx
  00b1e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00b23	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b28	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7572 : 		draw_line (x1, y2, x2, y2, MFD_COLOUR1);

  00b2d	b8 04 00 00 00	 mov	 eax, 4
  00b32	6b c8 00	 imul	 ecx, eax, 0
  00b35	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b3b	52		 push	 edx
  00b3c	51		 push	 ecx
  00b3d	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00b42	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b47	51		 push	 ecx
  00b48	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00b4d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b52	51		 push	 ecx
  00b53	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00b58	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b5d	51		 push	 ecx
  00b5e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00b63	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b68	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7573 : 		draw_line (x2, y1, x2, y2, MFD_COLOUR1);

  00b6d	b8 04 00 00 00	 mov	 eax, 4
  00b72	6b c8 00	 imul	 ecx, eax, 0
  00b75	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b7b	52		 push	 edx
  00b7c	51		 push	 ecx
  00b7d	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00b82	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b87	51		 push	 ecx
  00b88	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00b8d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b92	51		 push	 ecx
  00b93	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00b98	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b9d	51		 push	 ecx
  00b9e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00ba3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ba8	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7574 : 
; 7575 : 		set_2d_mono_font_position (0.0, 0.15);

  00bad	51		 push	 ecx
  00bae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00bb6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bbb	51		 push	 ecx
  00bbc	0f 57 c0	 xorps	 xmm0, xmm0
  00bbf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bc4	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7576 : 
; 7577 : 		if (!damaged)

  00bc9	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  00bd0	75 1a		 jne	 SHORT $LN48@draw_large

; 7578 : 			sprintf (s, "%4d", number);

  00bd2	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _number$[ebp]
  00bd8	50		 push	 eax
  00bd9	68 00 00 00 00	 push	 OFFSET ??_C@_03GLKEJMAA@?$CF4d@
  00bde	8d 4d 84	 lea	 ecx, DWORD PTR _s$[ebp]
  00be1	51		 push	 ecx
  00be2	e8 00 00 00 00	 call	 _sprintf
  00be7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7579 : 		else

  00bea	eb 11		 jmp	 SHORT $LN49@draw_large
$LN48@draw_large:

; 7580 : 			sprintf (s, "XXXX");

  00bec	68 00 00 00 00	 push	 OFFSET ??_C@_04CPMKADPB@XXXX@
  00bf1	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00bf4	50		 push	 eax
  00bf5	e8 00 00 00 00	 call	 _sprintf
  00bfa	83 c4 08	 add	 esp, 8
$LN49@draw_large:

; 7581 : 	
; 7582 : 		x_adjust = get_mono_font_string_width (s) * -0.5;

  00bfd	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00c00	50		 push	 eax
  00c01	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00c06	dd 9d c0 fe ff
	ff		 fstp	 QWORD PTR tv1921[ebp]
  00c0c	f2 0f 10 85 c0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1921[ebp]
  00c14	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00c1c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c20	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7583 : 		set_mono_font_rel_position (x_adjust, 0.0);

  00c28	51		 push	 ecx
  00c29	0f 57 c0	 xorps	 xmm0, xmm0
  00c2c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c31	51		 push	 ecx
  00c32	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00c3a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c3f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7584 : 		print_mono_font_string (s);

  00c44	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00c47	50		 push	 eax
  00c48	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN45@draw_large:

; 7585 : 	}
; 7586 : 
; 7587 : 	// Chaff
; 7588 : 	set_2d_mono_font_position (0.0, -0.2);

  00c4d	51		 push	 ecx
  00c4e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00c56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c5b	51		 push	 ecx
  00c5c	0f 57 c0	 xorps	 xmm0, xmm0
  00c5f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c64	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7589 : 
; 7590 : 	s_ptr = "CHAFF";

  00c69	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_05FOOOBDLP@CHAFF@

; 7591 : 		
; 7592 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  00c70	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  00c73	50		 push	 eax
  00c74	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00c79	dd 9d c0 fe ff
	ff		 fstp	 QWORD PTR tv1936[ebp]
  00c7f	f2 0f 10 85 c0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1936[ebp]
  00c87	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00c8f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c93	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7593 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00c9b	51		 push	 ecx
  00c9c	0f 57 c0	 xorps	 xmm0, xmm0
  00c9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ca4	51		 push	 ecx
  00ca5	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00cad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cb2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7594 : 	print_mono_font_string (s_ptr);

  00cb7	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  00cba	50		 push	 eax
  00cbb	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7595 : 
; 7596 : 	set_2d_mono_font_position (0.0, -0.3);

  00cc0	51		 push	 ecx
  00cc1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  00cc9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cce	51		 push	 ecx
  00ccf	0f 57 c0	 xorps	 xmm0, xmm0
  00cd2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cd7	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7597 : 
; 7598 : 	switch (get_global_gunship_type ())

  00cdc	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+12
  00ce1	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv455[ebp], eax
  00ce7	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR tv455[ebp], 0
  00cee	74 02		 je	 SHORT $LN50@draw_large
  00cf0	eb 29		 jmp	 SHORT $LN51@draw_large
$LN50@draw_large:

; 7599 : 	{
; 7600 : 		////////////////////////////////////////
; 7601 : 		case GUNSHIP_TYPE_APACHE:
; 7602 : 		////////////////////////////////////////
; 7603 : 		{
; 7604 : 			get_local_entity_weapon_hardpoint_info (get_gunship_entity (), 

  00cf2	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _damaged$[ebp]
  00cf8	50		 push	 eax
  00cf9	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _number$[ebp]
  00cff	51		 push	 ecx
  00d00	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00d06	52		 push	 edx
  00d07	6a 43		 push	 67			; 00000043H
  00d09	6a 07		 push	 7
  00d0b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00d10	50		 push	 eax
  00d11	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info

; 7605 : 				APACHE_CHAFF_DISPENSER, ENTITY_SUB_TYPE_WEAPON_CHAFF, 
; 7606 : 				&weapon_sub_type, &number, &damaged);
; 7607 : 			//sprintf (s, "AP:%2d", number);
; 7608 : 			break;

  00d16	e9 5b 01 00 00	 jmp	 $LN6@draw_large
$LN51@draw_large:

; 7609 : 		}
; 7610 : 		////////////////////////////////////////
; 7611 : 		default:
; 7612 : 		////////////////////////////////////////
; 7613 : 		{
; 7614 : 			switch (get_local_entity_int_value (get_gunship_entity (), INT_TYPE_ENTITY_SUB_TYPE))

  00d1b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00d22	74 0f		 je	 SHORT $LN159@draw_large
  00d24	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00d29	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d2b	89 8d c4 fe ff
	ff		 mov	 DWORD PTR tv467[ebp], ecx
  00d31	eb 20		 jmp	 SHORT $LN160@draw_large
$LN159@draw_large:
  00d33	68 be 1d 00 00	 push	 7614			; 00001dbeH
  00d38	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d3d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00d43	52		 push	 edx
  00d44	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d49	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv467[ebp], 0
$LN160@draw_large:
  00d53	b8 01 00 00 00	 mov	 eax, 1
  00d58	85 c0		 test	 eax, eax
  00d5a	74 0c		 je	 SHORT $LN161@draw_large
  00d5c	c7 85 c0 fe ff
	ff 34 00 00 00	 mov	 DWORD PTR tv474[ebp], 52 ; 00000034H
  00d66	eb 20		 jmp	 SHORT $LN162@draw_large
$LN161@draw_large:
  00d68	68 be 1d 00 00	 push	 7614			; 00001dbeH
  00d6d	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d72	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00d78	51		 push	 ecx
  00d79	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d7e	c7 85 c0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv474[ebp], 0
$LN162@draw_large:
  00d88	6a 34		 push	 52			; 00000034H
  00d8a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00d90	52		 push	 edx
  00d91	69 85 c4 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv467[ebp], 1116
  00d9b	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR tv474[ebp]
  00da1	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00da8	ff d2		 call	 edx
  00daa	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv480[ebp], eax
  00db0	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR tv480[ebp]
  00db6	83 e8 07	 sub	 eax, 7
  00db9	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv480[ebp], eax
  00dbf	83 bd bc fe ff
	ff 12		 cmp	 DWORD PTR tv480[ebp], 18 ; 00000012H
  00dc6	0f 87 86 00 00
	00		 ja	 $LN55@draw_large
  00dcc	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR tv480[ebp]
  00dd2	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN198@draw_large[ecx]
  00dd9	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN202@draw_large[edx*4]
$LN52@draw_large:

; 7615 : 			{
; 7616 : 				case ENTITY_SUB_TYPE_AIRCRAFT_KA29_HELIX_B:
; 7617 : 				{
; 7618 : 					get_local_entity_weapon_hardpoint_info (get_gunship_entity (), 

  00de0	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _damaged$[ebp]
  00de6	50		 push	 eax
  00de7	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _number$[ebp]
  00ded	51		 push	 ecx
  00dee	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00df4	52		 push	 edx
  00df5	6a 43		 push	 67			; 00000043H
  00df7	6a 04		 push	 4
  00df9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00dfe	50		 push	 eax
  00dff	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info

; 7619 : 						HELIX_CHAFF_DISPENSER, ENTITY_SUB_TYPE_WEAPON_CHAFF, 
; 7620 : 						&weapon_sub_type, &number, &damaged);
; 7621 : 					//sprintf (s, "KI:%2d", number);
; 7622 : 					break;

  00e04	eb 70		 jmp	 SHORT $LN8@draw_large
$LN53@draw_large:

; 7623 : 				}
; 7624 : 				case ENTITY_SUB_TYPE_AIRCRAFT_AH1T_SEACOBRA:
; 7625 : 				case ENTITY_SUB_TYPE_AIRCRAFT_AH1W_SUPERCOBRA:
; 7626 : 				{
; 7627 : 					get_local_entity_weapon_hardpoint_info (get_gunship_entity (), 

  00e06	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _damaged$[ebp]
  00e0c	50		 push	 eax
  00e0d	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _number$[ebp]
  00e13	51		 push	 ecx
  00e14	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00e1a	52		 push	 edx
  00e1b	6a 43		 push	 67			; 00000043H
  00e1d	6a 05		 push	 5
  00e1f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00e24	50		 push	 eax
  00e25	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info

; 7628 : 						COBRA_LHS_CHAFF_DISPENSER, ENTITY_SUB_TYPE_WEAPON_CHAFF, 
; 7629 : 						&weapon_sub_type, &number, &damaged);
; 7630 : 					//sprintf (s, "DF:%2d", number);
; 7631 : 					break;

  00e2a	eb 4a		 jmp	 SHORT $LN8@draw_large
$LN54@draw_large:

; 7632 : 				}
; 7633 : 				case ENTITY_SUB_TYPE_AIRCRAFT_MI17_HIP:
; 7634 : 				{
; 7635 : 					get_local_entity_weapon_hardpoint_info (get_gunship_entity (), 

  00e2c	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _damaged$[ebp]
  00e32	50		 push	 eax
  00e33	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _number$[ebp]
  00e39	51		 push	 ecx
  00e3a	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00e40	52		 push	 edx
  00e41	6a 43		 push	 67			; 00000043H
  00e43	6a 06		 push	 6
  00e45	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00e4a	50		 push	 eax
  00e4b	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info

; 7636 : 						HIP_LHS_CHAFF_DISPENSER, ENTITY_SUB_TYPE_WEAPON_CHAFF, 
; 7637 : 						&weapon_sub_type, &number, &damaged);
; 7638 : 					//sprintf (s, "DF:%2d", number);
; 7639 : 					break;

  00e50	eb 24		 jmp	 SHORT $LN8@draw_large
$LN55@draw_large:

; 7640 : 				}
; 7641 : 				case ENTITY_SUB_TYPE_AIRCRAFT_CH46E_SEA_KNIGHT:
; 7642 : 				case ENTITY_SUB_TYPE_AIRCRAFT_CH47D_CHINOOK:
; 7643 : 				case ENTITY_SUB_TYPE_AIRCRAFT_CH3_JOLLY_GREEN_GIANT:
; 7644 : 				case ENTITY_SUB_TYPE_AIRCRAFT_MI6_HOOK:
; 7645 : 				case ENTITY_SUB_TYPE_AIRCRAFT_MV22_OSPREY:
; 7646 : 				case ENTITY_SUB_TYPE_AIRCRAFT_CH53E_SUPER_STALLION:
; 7647 : 				default:
; 7648 : 				{
; 7649 : 					get_local_entity_weapon_hardpoint_info (get_gunship_entity (), 

  00e52	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _damaged$[ebp]
  00e58	50		 push	 eax
  00e59	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _number$[ebp]
  00e5f	51		 push	 ecx
  00e60	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00e66	52		 push	 edx
  00e67	6a 43		 push	 67			; 00000043H
  00e69	6a 00		 push	 0
  00e6b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00e70	50		 push	 eax
  00e71	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
$LN8@draw_large:
$LN6@draw_large:

; 7650 : 						DEFAULT_CHAFF_DISPENSER, ENTITY_SUB_TYPE_WEAPON_CHAFF, 
; 7651 : 						&weapon_sub_type, &number, &damaged);
; 7652 : 					//sprintf (s, "DF:%2d", number);
; 7653 : 				}
; 7654 : 			}
; 7655 : 		}
; 7656 : 	}
; 7657 : 
; 7658 : 	if (!damaged)

  00e76	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  00e7d	75 1a		 jne	 SHORT $LN56@draw_large

; 7659 : 		sprintf (s, "%2d", number);

  00e7f	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _number$[ebp]
  00e85	50		 push	 eax
  00e86	68 00 00 00 00	 push	 OFFSET ??_C@_03GPCJOALC@?$CF2d@
  00e8b	8d 4d 84	 lea	 ecx, DWORD PTR _s$[ebp]
  00e8e	51		 push	 ecx
  00e8f	e8 00 00 00 00	 call	 _sprintf
  00e94	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7660 : 	else

  00e97	eb 11		 jmp	 SHORT $LN57@draw_large
$LN56@draw_large:

; 7661 : 		sprintf (s, "XX");

  00e99	68 00 00 00 00	 push	 OFFSET ??_C@_02BAHDIOLJ@XX@
  00e9e	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00ea1	50		 push	 eax
  00ea2	e8 00 00 00 00	 call	 _sprintf
  00ea7	83 c4 08	 add	 esp, 8
$LN57@draw_large:

; 7662 : 	
; 7663 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  00eaa	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00ead	50		 push	 eax
  00eae	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00eb3	dd 9d c0 fe ff
	ff		 fstp	 QWORD PTR tv1987[ebp]
  00eb9	f2 0f 10 85 c0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1987[ebp]
  00ec1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00ec9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ecd	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7664 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00ed5	51		 push	 ecx
  00ed6	0f 57 c0	 xorps	 xmm0, xmm0
  00ed9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ede	51		 push	 ecx
  00edf	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00ee7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eec	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7665 : 	print_mono_font_string (s);

  00ef1	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00ef4	50		 push	 eax
  00ef5	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7666 : 
; 7667 : 
; 7668 : 	// Flares
; 7669 : 	set_2d_mono_font_position (0.0, -0.45);

  00efa	51		 push	 ecx
  00efb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bee66666
  00f03	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f08	51		 push	 ecx
  00f09	0f 57 c0	 xorps	 xmm0, xmm0
  00f0c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f11	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7670 : 
; 7671 : 	s_ptr = "FLARE";

  00f16	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_05MLKBHMKD@FLARE@

; 7672 : 		
; 7673 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  00f1d	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  00f20	50		 push	 eax
  00f21	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00f26	dd 9d c0 fe ff
	ff		 fstp	 QWORD PTR tv2002[ebp]
  00f2c	f2 0f 10 85 c0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv2002[ebp]
  00f34	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00f3c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00f40	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7674 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00f48	51		 push	 ecx
  00f49	0f 57 c0	 xorps	 xmm0, xmm0
  00f4c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f51	51		 push	 ecx
  00f52	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00f5a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f5f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7675 : 	print_mono_font_string (s_ptr);

  00f64	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  00f67	50		 push	 eax
  00f68	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7676 : 
; 7677 : 	set_2d_mono_font_position (0.0, -0.55);

  00f6d	51		 push	 ecx
  00f6e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  00f76	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f7b	51		 push	 ecx
  00f7c	0f 57 c0	 xorps	 xmm0, xmm0
  00f7f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f84	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7678 : 
; 7679 : 
; 7680 : 	switch (get_global_gunship_type ())

  00f89	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+12
  00f8e	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv534[ebp], eax
  00f94	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR tv534[ebp], 0
  00f9b	74 02		 je	 SHORT $LN58@draw_large
  00f9d	eb 29		 jmp	 SHORT $LN59@draw_large
$LN58@draw_large:

; 7681 : 	{
; 7682 : 		////////////////////////////////////////
; 7683 : 		case GUNSHIP_TYPE_APACHE:
; 7684 : 		////////////////////////////////////////
; 7685 : 		{
; 7686 : 			get_local_entity_weapon_hardpoint_info(get_gunship_entity (), 

  00f9f	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _damaged$[ebp]
  00fa5	50		 push	 eax
  00fa6	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _number$[ebp]
  00fac	51		 push	 ecx
  00fad	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00fb3	52		 push	 edx
  00fb4	6a 44		 push	 68			; 00000044H
  00fb6	6a 07		 push	 7
  00fb8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00fbd	50		 push	 eax
  00fbe	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info

; 7687 : 				APACHE_FLARE_DISPENSER, ENTITY_SUB_TYPE_WEAPON_FLARE, 
; 7688 : 				&weapon_sub_type, &number, &damaged);
; 7689 : 			//sprintf (s, "AP:%2d", number);
; 7690 : 			break;

  00fc3	e9 84 01 00 00	 jmp	 $LN10@draw_large
$LN59@draw_large:

; 7691 : 		}
; 7692 : 		////////////////////////////////////////
; 7693 : 		default:
; 7694 : 		////////////////////////////////////////
; 7695 : 		{
; 7696 : 
; 7697 : 			switch (get_local_entity_int_value (get_gunship_entity (), INT_TYPE_ENTITY_SUB_TYPE))

  00fc8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00fcf	74 0f		 je	 SHORT $LN163@draw_large
  00fd1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00fd6	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fd8	89 8d c4 fe ff
	ff		 mov	 DWORD PTR tv546[ebp], ecx
  00fde	eb 20		 jmp	 SHORT $LN164@draw_large
$LN163@draw_large:
  00fe0	68 11 1e 00 00	 push	 7697			; 00001e11H
  00fe5	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00fea	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00ff0	52		 push	 edx
  00ff1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ff6	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv546[ebp], 0
$LN164@draw_large:
  01000	b8 01 00 00 00	 mov	 eax, 1
  01005	85 c0		 test	 eax, eax
  01007	74 0c		 je	 SHORT $LN165@draw_large
  01009	c7 85 c0 fe ff
	ff 34 00 00 00	 mov	 DWORD PTR tv553[ebp], 52 ; 00000034H
  01013	eb 20		 jmp	 SHORT $LN166@draw_large
$LN165@draw_large:
  01015	68 11 1e 00 00	 push	 7697			; 00001e11H
  0101a	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0101f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01025	51		 push	 ecx
  01026	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0102b	c7 85 c0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv553[ebp], 0
$LN166@draw_large:
  01035	6a 34		 push	 52			; 00000034H
  01037	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0103d	52		 push	 edx
  0103e	69 85 c4 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv546[ebp], 1116
  01048	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR tv553[ebp]
  0104e	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01055	ff d2		 call	 edx
  01057	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv559[ebp], eax
  0105d	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR tv559[ebp]
  01063	83 e8 06	 sub	 eax, 6
  01066	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv559[ebp], eax
  0106c	83 bd bc fe ff
	ff 13		 cmp	 DWORD PTR tv559[ebp], 19 ; 00000013H
  01073	0f 87 af 00 00
	00		 ja	 $LN64@draw_large
  01079	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR tv559[ebp]
  0107f	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN199@draw_large[ecx]
  01086	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN203@draw_large[edx*4]
$LN60@draw_large:

; 7698 : 			{
; 7699 : 				case ENTITY_SUB_TYPE_AIRCRAFT_KA29_HELIX_B:
; 7700 : 				{
; 7701 : 					get_local_entity_weapon_hardpoint_info (get_gunship_entity (), 

  0108d	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _damaged$[ebp]
  01093	50		 push	 eax
  01094	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _number$[ebp]
  0109a	51		 push	 ecx
  0109b	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  010a1	52		 push	 edx
  010a2	6a 44		 push	 68			; 00000044H
  010a4	6a 04		 push	 4
  010a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  010ab	50		 push	 eax
  010ac	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info

; 7702 : 						HELIX_FLARE_DISPENSER, ENTITY_SUB_TYPE_WEAPON_FLARE, 
; 7703 : 						&weapon_sub_type, &number, &damaged);
; 7704 : 					//sprintf (s, "KI:%2d", number);
; 7705 : 					break;

  010b1	e9 96 00 00 00	 jmp	 $LN12@draw_large
$LN61@draw_large:

; 7706 : 				}
; 7707 : 				case ENTITY_SUB_TYPE_AIRCRAFT_AH1T_SEACOBRA:
; 7708 : 				case ENTITY_SUB_TYPE_AIRCRAFT_AH1W_SUPERCOBRA:
; 7709 : 				{
; 7710 : 					get_local_entity_weapon_hardpoint_info (get_gunship_entity (), 

  010b6	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _damaged$[ebp]
  010bc	50		 push	 eax
  010bd	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _number$[ebp]
  010c3	51		 push	 ecx
  010c4	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  010ca	52		 push	 edx
  010cb	6a 44		 push	 68			; 00000044H
  010cd	6a 05		 push	 5
  010cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  010d4	50		 push	 eax
  010d5	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info

; 7711 : 						COBRA_LHS_FLARE_DISPENSER, ENTITY_SUB_TYPE_WEAPON_FLARE, 
; 7712 : 						&weapon_sub_type, &number, &damaged);
; 7713 : 					//sprintf (s, "DF:%2d", number);
; 7714 : 					break;

  010da	eb 70		 jmp	 SHORT $LN12@draw_large
$LN62@draw_large:

; 7715 : 				}
; 7716 : 				case ENTITY_SUB_TYPE_AIRCRAFT_MI17_HIP:
; 7717 : 				{
; 7718 : 					get_local_entity_weapon_hardpoint_info (get_gunship_entity (), 

  010dc	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _damaged$[ebp]
  010e2	50		 push	 eax
  010e3	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _number$[ebp]
  010e9	51		 push	 ecx
  010ea	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  010f0	52		 push	 edx
  010f1	6a 44		 push	 68			; 00000044H
  010f3	6a 06		 push	 6
  010f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  010fa	50		 push	 eax
  010fb	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info

; 7719 : 						HIP_LHS_FLARE_DISPENSER, ENTITY_SUB_TYPE_WEAPON_FLARE, 
; 7720 : 						&weapon_sub_type, &number, &damaged);
; 7721 : 					//sprintf (s, "DF:%2d", number);
; 7722 : 					break;

  01100	eb 4a		 jmp	 SHORT $LN12@draw_large
$LN63@draw_large:

; 7723 : 				}
; 7724 : 				case ENTITY_SUB_TYPE_AIRCRAFT_CH46E_SEA_KNIGHT:
; 7725 : 				case ENTITY_SUB_TYPE_AIRCRAFT_CH47D_CHINOOK:
; 7726 : 				{
; 7727 : 					get_local_entity_weapon_hardpoint_info (get_gunship_entity (), 

  01102	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _damaged$[ebp]
  01108	50		 push	 eax
  01109	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _number$[ebp]
  0110f	51		 push	 ecx
  01110	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  01116	52		 push	 edx
  01117	6a 44		 push	 68			; 00000044H
  01119	6a 00		 push	 0
  0111b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  01120	50		 push	 eax
  01121	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info

; 7728 : 						DEFAULT_CHAFF_DISPENSER, ENTITY_SUB_TYPE_WEAPON_FLARE, 
; 7729 : 						&weapon_sub_type, &number, &damaged);
; 7730 : 					//sprintf (s, "DF:%2d", number);
; 7731 : 					break;

  01126	eb 24		 jmp	 SHORT $LN12@draw_large
$LN64@draw_large:

; 7732 : 				}
; 7733 : 				case ENTITY_SUB_TYPE_AIRCRAFT_CH3_JOLLY_GREEN_GIANT:
; 7734 : 				case ENTITY_SUB_TYPE_AIRCRAFT_MI6_HOOK:
; 7735 : 				case ENTITY_SUB_TYPE_AIRCRAFT_MV22_OSPREY:
; 7736 : 				case ENTITY_SUB_TYPE_AIRCRAFT_CH53E_SUPER_STALLION:
; 7737 : 				default:
; 7738 : 				{
; 7739 : 					get_local_entity_weapon_hardpoint_info (get_gunship_entity (), 

  01128	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _damaged$[ebp]
  0112e	50		 push	 eax
  0112f	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _number$[ebp]
  01135	51		 push	 ecx
  01136	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  0113c	52		 push	 edx
  0113d	6a 44		 push	 68			; 00000044H
  0113f	6a 01		 push	 1
  01141	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  01146	50		 push	 eax
  01147	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
$LN12@draw_large:
$LN10@draw_large:

; 7740 : 						DEFAULT_FLARE_DISPENSER, ENTITY_SUB_TYPE_WEAPON_FLARE, 
; 7741 : 						&weapon_sub_type, &number, &damaged);
; 7742 : 					//sprintf (s, "DF:%2d", number);
; 7743 : 				}
; 7744 : 			}
; 7745 : 		}
; 7746 : 	}
; 7747 : 
; 7748 : 	if (!damaged)

  0114c	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  01153	75 1a		 jne	 SHORT $LN65@draw_large

; 7749 : 		sprintf (s, "%2d", number);

  01155	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _number$[ebp]
  0115b	50		 push	 eax
  0115c	68 00 00 00 00	 push	 OFFSET ??_C@_03GPCJOALC@?$CF2d@
  01161	8d 4d 84	 lea	 ecx, DWORD PTR _s$[ebp]
  01164	51		 push	 ecx
  01165	e8 00 00 00 00	 call	 _sprintf
  0116a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7750 : 	else

  0116d	eb 11		 jmp	 SHORT $LN66@draw_large
$LN65@draw_large:

; 7751 : 		sprintf (s, "XX");

  0116f	68 00 00 00 00	 push	 OFFSET ??_C@_02BAHDIOLJ@XX@
  01174	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  01177	50		 push	 eax
  01178	e8 00 00 00 00	 call	 _sprintf
  0117d	83 c4 08	 add	 esp, 8
$LN66@draw_large:

; 7752 : 
; 7753 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  01180	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  01183	50		 push	 eax
  01184	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01189	dd 9d c0 fe ff
	ff		 fstp	 QWORD PTR tv2057[ebp]
  0118f	f2 0f 10 85 c0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv2057[ebp]
  01197	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0119f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  011a3	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7754 : 	set_mono_font_rel_position (x_adjust, 0.0);

  011ab	51		 push	 ecx
  011ac	0f 57 c0	 xorps	 xmm0, xmm0
  011af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011b4	51		 push	 ecx
  011b5	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  011bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011c2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7755 : 	print_mono_font_string (s);

  011c7	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  011ca	50		 push	 eax
  011cb	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7756 : 
; 7757 : 	// auto CM
; 7758 : 	set_2d_mono_font_position (0.0, -0.7);

  011d0	51		 push	 ecx
  011d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  011d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011de	51		 push	 ecx
  011df	0f 57 c0	 xorps	 xmm0, xmm0
  011e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011e7	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7759 : 
; 7760 : 	if (get_global_auto_counter_measures ())

  011ec	83 3d 90 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+144, 0
  011f3	74 09		 je	 SHORT $LN67@draw_large

; 7761 : 		s_ptr = "AUTO";

  011f5	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_04LMMJFDCN@AUTO@

; 7762 : 	else

  011fc	eb 07		 jmp	 SHORT $LN68@draw_large
$LN67@draw_large:

; 7763 : 		s_ptr = "MAN";

  011fe	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_03KIGHCFHP@MAN@
$LN68@draw_large:

; 7764 : 		
; 7765 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  01205	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  01208	50		 push	 eax
  01209	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0120e	dd 9d c0 fe ff
	ff		 fstp	 QWORD PTR tv2072[ebp]
  01214	f2 0f 10 85 c0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv2072[ebp]
  0121c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01224	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01228	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7766 : 	set_mono_font_rel_position (x_adjust, 0.0);

  01230	51		 push	 ecx
  01231	0f 57 c0	 xorps	 xmm0, xmm0
  01234	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01239	51		 push	 ecx
  0123a	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01242	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01247	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7767 : 	print_mono_font_string (s_ptr);

  0124c	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  0124f	50		 push	 eax
  01250	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7768 : 	
; 7769 : 	// master arm box
; 7770 : 
; 7771 : 	set_2d_mono_font_position (0.0, 0.89);

  01255	51		 push	 ecx
  01256	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f63d70a
  0125e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01263	51		 push	 ecx
  01264	0f 57 c0	 xorps	 xmm0, xmm0
  01267	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0126c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7772 : 
; 7773 : 	if (selected_weapon != ENTITY_SUB_TYPE_WEAPON_NO_WEAPON)

  01271	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _selected_weapon$[ebp], 0
  01278	0f 84 c5 03 00
	00		 je	 $LN69@draw_large

; 7774 : 	{
; 7775 : 		draw_box(-0.25, 0.7, 0.25, 1.0, TRUE, MFD_COLOUR1);

  0127e	b8 04 00 00 00	 mov	 eax, 4
  01283	6b c8 00	 imul	 ecx, eax, 0
  01286	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0128c	52		 push	 edx
  0128d	6a 01		 push	 1
  0128f	51		 push	 ecx
  01290	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01298	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0129d	51		 push	 ecx
  0129e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  012a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012ab	51		 push	 ecx
  012ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  012b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012b9	51		 push	 ecx
  012ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  012c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012c7	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7776 : 
; 7777 : 		set_mono_font_colour (MFD_CLEAR_COLOUR);

  012cc	b8 04 00 00 00	 mov	 eax, 4
  012d1	6b c8 13	 imul	 ecx, eax, 19
  012d4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  012da	52		 push	 edx
  012db	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7778 : 		s_ptr = "ARM";

  012e0	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_03NHPMNECN@ARM@

; 7779 : 		
; 7780 : 		draw_box(-0.14, 0.93,-0.09, 1.00, TRUE, MFD_CLEAR_COLOUR);	

  012e7	b8 04 00 00 00	 mov	 eax, 4
  012ec	6b c8 13	 imul	 ecx, eax, 19
  012ef	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  012f5	52		 push	 edx
  012f6	6a 01		 push	 1
  012f8	51		 push	 ecx
  012f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01301	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01306	51		 push	 ecx
  01307	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdb851ec
  0130f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01314	51		 push	 ecx
  01315	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  0131d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01322	51		 push	 ecx
  01323	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  0132b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01330	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7781 : 		draw_box(-0.03, 0.93, 0.03, 1.00, TRUE, MFD_CLEAR_COLOUR);	

  01335	b8 04 00 00 00	 mov	 eax, 4
  0133a	6b c8 13	 imul	 ecx, eax, 19
  0133d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01343	52		 push	 edx
  01344	6a 01		 push	 1
  01346	51		 push	 ecx
  01347	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0134f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01354	51		 push	 ecx
  01355	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3cf5c28f
  0135d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01362	51		 push	 ecx
  01363	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  0136b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01370	51		 push	 ecx
  01371	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bcf5c28f
  01379	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0137e	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7782 : 		draw_box( 0.10, 0.93, 0.15, 1.00, TRUE, MFD_CLEAR_COLOUR);	

  01383	b8 04 00 00 00	 mov	 eax, 4
  01388	6b c8 13	 imul	 ecx, eax, 19
  0138b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01391	52		 push	 edx
  01392	6a 01		 push	 1
  01394	51		 push	 ecx
  01395	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0139d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013a2	51		 push	 ecx
  013a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  013ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013b0	51		 push	 ecx
  013b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  013b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013be	51		 push	 ecx
  013bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  013c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013cc	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7783 : 		draw_box(-0.25, 0.93,-0.19, 0.88, TRUE, MFD_CLEAR_COLOUR);	

  013d1	b8 04 00 00 00	 mov	 eax, 4
  013d6	6b c8 13	 imul	 ecx, eax, 19
  013d9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  013df	52		 push	 edx
  013e0	6a 01		 push	 1
  013e2	51		 push	 ecx
  013e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6147ae
  013eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013f0	51		 push	 ecx
  013f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be428f5c
  013f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013fe	51		 push	 ecx
  013ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  01407	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0140c	51		 push	 ecx
  0140d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  01415	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0141a	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7784 : 		draw_box(-0.25, 0.77,-0.19, 0.82, TRUE, MFD_CLEAR_COLOUR);	

  0141f	b8 04 00 00 00	 mov	 eax, 4
  01424	6b c8 13	 imul	 ecx, eax, 19
  01427	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0142d	52		 push	 edx
  0142e	6a 01		 push	 1
  01430	51		 push	 ecx
  01431	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f51eb85
  01439	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0143e	51		 push	 ecx
  0143f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be428f5c
  01447	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0144c	51		 push	 ecx
  0144d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb8
  01455	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0145a	51		 push	 ecx
  0145b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  01463	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01468	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7785 : 		draw_box( 0.25, 0.93, 0.19, 0.88, TRUE, MFD_CLEAR_COLOUR);	

  0146d	b8 04 00 00 00	 mov	 eax, 4
  01472	6b c8 13	 imul	 ecx, eax, 19
  01475	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0147b	52		 push	 edx
  0147c	6a 01		 push	 1
  0147e	51		 push	 ecx
  0147f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6147ae
  01487	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0148c	51		 push	 ecx
  0148d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e428f5c
  01495	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0149a	51		 push	 ecx
  0149b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  014a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014a8	51		 push	 ecx
  014a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  014b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014b6	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7786 : 		draw_box( 0.25, 0.77, 0.19, 0.82, TRUE, MFD_CLEAR_COLOUR);	

  014bb	b8 04 00 00 00	 mov	 eax, 4
  014c0	6b c8 13	 imul	 ecx, eax, 19
  014c3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  014c9	52		 push	 edx
  014ca	6a 01		 push	 1
  014cc	51		 push	 ecx
  014cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f51eb85
  014d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014da	51		 push	 ecx
  014db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e428f5c
  014e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014e8	51		 push	 ecx
  014e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb8
  014f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014f6	51		 push	 ecx
  014f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  014ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01504	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7787 : 		draw_box(-0.14, 0.77,-0.09, 0.70, TRUE, MFD_CLEAR_COLOUR);	

  01509	b8 04 00 00 00	 mov	 eax, 4
  0150e	6b c8 13	 imul	 ecx, eax, 19
  01511	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01517	52		 push	 edx
  01518	6a 01		 push	 1
  0151a	51		 push	 ecx
  0151b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  01523	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01528	51		 push	 ecx
  01529	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdb851ec
  01531	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01536	51		 push	 ecx
  01537	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb8
  0153f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01544	51		 push	 ecx
  01545	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  0154d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01552	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7788 : 		draw_box(-0.03, 0.77, 0.03, 0.70, TRUE, MFD_CLEAR_COLOUR);	

  01557	b8 04 00 00 00	 mov	 eax, 4
  0155c	6b c8 13	 imul	 ecx, eax, 19
  0155f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01565	52		 push	 edx
  01566	6a 01		 push	 1
  01568	51		 push	 ecx
  01569	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  01571	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01576	51		 push	 ecx
  01577	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3cf5c28f
  0157f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01584	51		 push	 ecx
  01585	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb8
  0158d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01592	51		 push	 ecx
  01593	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bcf5c28f
  0159b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015a0	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7789 : 		draw_box( 0.10, 0.77, 0.15, 0.70, TRUE, MFD_CLEAR_COLOUR);

  015a5	b8 04 00 00 00	 mov	 eax, 4
  015aa	6b c8 13	 imul	 ecx, eax, 19
  015ad	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  015b3	52		 push	 edx
  015b4	6a 01		 push	 1
  015b6	51		 push	 ecx
  015b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  015bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015c4	51		 push	 ecx
  015c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  015cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015d2	51		 push	 ecx
  015d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb8
  015db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015e0	51		 push	 ecx
  015e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  015e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015ee	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7790 : 		
; 7791 : 		draw_box(-0.25, 0.7, 0.25, 1.0, FALSE, MFD_COLOUR1);

  015f3	b8 04 00 00 00	 mov	 eax, 4
  015f8	6b c8 00	 imul	 ecx, eax, 0
  015fb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01601	52		 push	 edx
  01602	6a 00		 push	 0
  01604	51		 push	 ecx
  01605	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0160d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01612	51		 push	 ecx
  01613	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  0161b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01620	51		 push	 ecx
  01621	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  01629	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0162e	51		 push	 ecx
  0162f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  01637	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0163c	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7792 : 	}
; 7793 : 	else

  01641	eb 55		 jmp	 SHORT $LN70@draw_large
$LN69@draw_large:

; 7794 : 	{
; 7795 : 		draw_box(-0.25, 0.7, 0.25, 1.0, FALSE, MFD_COLOUR1);

  01643	b8 04 00 00 00	 mov	 eax, 4
  01648	6b c8 00	 imul	 ecx, eax, 0
  0164b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01651	52		 push	 edx
  01652	6a 00		 push	 0
  01654	51		 push	 ecx
  01655	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0165d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01662	51		 push	 ecx
  01663	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  0166b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01670	51		 push	 ecx
  01671	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  01679	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0167e	51		 push	 ecx
  0167f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  01687	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0168c	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7796 : 		s_ptr = "SAFE";

  01691	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_04JMNPMIJD@SAFE@
$LN70@draw_large:

; 7797 : 	}
; 7798 : 		
; 7799 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  01698	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  0169b	50		 push	 eax
  0169c	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  016a1	dd 9d c0 fe ff
	ff		 fstp	 QWORD PTR tv2219[ebp]
  016a7	f2 0f 10 85 c0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv2219[ebp]
  016af	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  016b7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  016bb	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7800 : 	set_mono_font_rel_position (x_adjust, 0.0);

  016c3	51		 push	 ecx
  016c4	0f 57 c0	 xorps	 xmm0, xmm0
  016c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016cc	51		 push	 ecx
  016cd	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  016d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016da	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7801 : 	print_mono_font_string (s_ptr);

  016df	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  016e2	50		 push	 eax
  016e3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7802 : 
; 7803 : 	// targeting system
; 7804 : 	draw_box(-0.85, 0.8, -0.4, 0.55, FALSE, MFD_COLOUR1);

  016e8	b8 04 00 00 00	 mov	 eax, 4
  016ed	6b c8 00	 imul	 ecx, eax, 0
  016f0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  016f6	52		 push	 edx
  016f7	6a 00		 push	 0
  016f9	51		 push	 ecx
  016fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  01702	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01707	51		 push	 ecx
  01708	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  01710	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01715	51		 push	 ecx
  01716	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  0171e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01723	51		 push	 ecx
  01724	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  0172c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01731	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7805 : 
; 7806 : 	set_2d_mono_font_position (-0.63, 0.7);

  01736	51		 push	 ecx
  01737	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  0173f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01744	51		 push	 ecx
  01745	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  0174d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01752	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7807 : 	set_mono_font_colour (MFD_COLOUR1);

  01757	b8 04 00 00 00	 mov	 eax, 4
  0175c	6b c8 00	 imul	 ecx, eax, 0
  0175f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01765	52		 push	 edx
  01766	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7808 : 
; 7809 : 	switch (target_acquisition_system)

  0176b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; target_acquisition_system
  01770	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv749[ebp], eax
  01776	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR tv749[ebp]
  0177c	83 e9 01	 sub	 ecx, 1
  0177f	89 8d c4 fe ff
	ff		 mov	 DWORD PTR tv749[ebp], ecx
  01785	83 bd c4 fe ff
	ff 07		 cmp	 DWORD PTR tv749[ebp], 7
  0178c	77 28		 ja	 SHORT $LN74@draw_large
  0178e	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR tv749[ebp]
  01794	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN204@draw_large[edx*4]
$LN71@draw_large:

; 7810 : 	{
; 7811 : 	case TARGET_ACQUISITION_SYSTEM_GROUND_RADAR:
; 7812 : 	case TARGET_ACQUISITION_SYSTEM_AIR_RADAR:
; 7813 : 		s_ptr = "FCR";

  0179b	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_03JKJFCLEN@FCR@

; 7814 : 		break;

  017a2	eb 19		 jmp	 SHORT $LN14@draw_large
$LN72@draw_large:

; 7815 : 	case TARGET_ACQUISITION_SYSTEM_FLIR:
; 7816 : 	case TARGET_ACQUISITION_SYSTEM_DTV:
; 7817 : 	case TARGET_ACQUISITION_SYSTEM_DVO:
; 7818 : 		s_ptr = "TADS";

  017a4	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_04DBODHFDK@TADS@

; 7819 : 		break;

  017ab	eb 10		 jmp	 SHORT $LN14@draw_large
$LN73@draw_large:

; 7820 : 	case TARGET_ACQUISITION_SYSTEM_IHADSS:
; 7821 : 		s_ptr = "IHADSS";

  017ad	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_06NOICLIMH@IHADSS@

; 7822 : 		break;

  017b4	eb 07		 jmp	 SHORT $LN14@draw_large
$LN74@draw_large:

; 7823 : 	case TARGET_ACQUISITION_SYSTEM_OFF:
; 7824 : 	default:
; 7825 : 		s_ptr = "NONE";

  017b6	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_04OKGDLNCL@NONE@
$LN14@draw_large:

; 7826 : 		break;
; 7827 : 	}
; 7828 : 
; 7829 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  017bd	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  017c0	50		 push	 eax
  017c1	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  017c6	dd 9d c0 fe ff
	ff		 fstp	 QWORD PTR tv2249[ebp]
  017cc	f2 0f 10 85 c0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv2249[ebp]
  017d4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  017dc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  017e0	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7830 : 	set_mono_font_rel_position (x_adjust, 0.0);

  017e8	51		 push	 ecx
  017e9	0f 57 c0	 xorps	 xmm0, xmm0
  017ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017f1	51		 push	 ecx
  017f2	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  017fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017ff	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7831 : 	print_mono_font_string (s_ptr);

  01804	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  01807	50		 push	 eax
  01808	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7832 : 	
; 7833 : 	// range finding system
; 7834 : 	draw_box(0.85, 0.8, 0.4, 0.55, FALSE, MFD_COLOUR1);

  0180d	b8 04 00 00 00	 mov	 eax, 4
  01812	6b c8 00	 imul	 ecx, eax, 0
  01815	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0181b	52		 push	 edx
  0181c	6a 00		 push	 0
  0181e	51		 push	 ecx
  0181f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  01827	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0182c	51		 push	 ecx
  0182d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  01835	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0183a	51		 push	 ecx
  0183b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  01843	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01848	51		 push	 ecx
  01849	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  01851	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01856	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7835 : 
; 7836 : 	set_2d_mono_font_position (0.64, 0.7);

  0185b	51		 push	 ecx
  0185c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  01864	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01869	51		 push	 ecx
  0186a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f23d70a
  01872	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01877	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7837 : 
; 7838 : 	switch (get_range_finder())

  0187c	e8 00 00 00 00	 call	 ?get_range_finder@@YG?AW4rangefinding_system@@XZ ; get_range_finder
  01881	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv771[ebp], eax
  01887	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR tv771[ebp], 0
  0188e	74 0b		 je	 SHORT $LN75@draw_large
  01890	83 bd c4 fe ff
	ff 01		 cmp	 DWORD PTR tv771[ebp], 1
  01897	74 0b		 je	 SHORT $LN76@draw_large
  01899	eb 12		 jmp	 SHORT $LN77@draw_large
$LN75@draw_large:

; 7839 : 	{
; 7840 : 	case RANGEFINDER_FCR:
; 7841 : 		s_ptr = "FCR";

  0189b	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_03JKJFCLEN@FCR@

; 7842 : 		break;

  018a2	eb 10		 jmp	 SHORT $LN16@draw_large
$LN76@draw_large:

; 7843 : 	case RANGEFINDER_LASER:
; 7844 : 		s_ptr = "LRF";

  018a4	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_03MGGCNFDL@LRF@

; 7845 : 		break;

  018ab	eb 07		 jmp	 SHORT $LN16@draw_large
$LN77@draw_large:

; 7846 : 	case RANGEFINDER_TRIANGULATION:
; 7847 : 	default:
; 7848 : 		s_ptr = "TRNGL";

  018ad	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_05MJCDDMFE@TRNGL@
$LN16@draw_large:

; 7849 : 		break;
; 7850 : 	}
; 7851 : 
; 7852 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  018b4	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  018b7	50		 push	 eax
  018b8	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  018bd	dd 9d c0 fe ff
	ff		 fstp	 QWORD PTR tv2275[ebp]
  018c3	f2 0f 10 85 c0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv2275[ebp]
  018cb	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  018d3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  018d7	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7853 : 	set_mono_font_rel_position (x_adjust, 0.0);

  018df	51		 push	 ecx
  018e0	0f 57 c0	 xorps	 xmm0, xmm0
  018e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018e8	51		 push	 ecx
  018e9	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  018f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018f6	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7854 : 	print_mono_font_string (s_ptr);

  018fb	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  018fe	50		 push	 eax
  018ff	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7855 : 
; 7856 : 	// launch mode
; 7857 : 	draw_box(-0.9, 0.45, -0.45, 0.2, FALSE, MFD_COLOUR1);

  01904	b8 04 00 00 00	 mov	 eax, 4
  01909	6b c8 00	 imul	 ecx, eax, 0
  0190c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01912	52		 push	 edx
  01913	6a 00		 push	 0
  01915	51		 push	 ecx
  01916	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0191e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01923	51		 push	 ecx
  01924	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bee66666
  0192c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01931	51		 push	 ecx
  01932	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  0193a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0193f	51		 push	 ecx
  01940	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  01948	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0194d	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7858 : 
; 7859 : 	set_2d_mono_font_position (-0.65, 0.35);

  01952	51		 push	 ecx
  01953	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  0195b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01960	51		 push	 ecx
  01961	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  01969	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0196e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7860 : 
; 7861 : 	if (get_local_entity_int_value (get_gunship_entity (), INT_TYPE_LOCK_ON_AFTER_LAUNCH))

  01973	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0197a	74 0f		 je	 SHORT $LN167@draw_large
  0197c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  01981	8b 08		 mov	 ecx, DWORD PTR [eax]
  01983	89 8d c4 fe ff
	ff		 mov	 DWORD PTR tv797[ebp], ecx
  01989	eb 20		 jmp	 SHORT $LN168@draw_large
$LN167@draw_large:
  0198b	68 b5 1e 00 00	 push	 7861			; 00001eb5H
  01990	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01995	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0199b	52		 push	 edx
  0199c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  019a1	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv797[ebp], 0
$LN168@draw_large:
  019ab	b8 01 00 00 00	 mov	 eax, 1
  019b0	85 c0		 test	 eax, eax
  019b2	74 0c		 je	 SHORT $LN169@draw_large
  019b4	c7 85 c0 fe ff
	ff 7e 00 00 00	 mov	 DWORD PTR tv804[ebp], 126 ; 0000007eH
  019be	eb 20		 jmp	 SHORT $LN170@draw_large
$LN169@draw_large:
  019c0	68 b5 1e 00 00	 push	 7861			; 00001eb5H
  019c5	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  019ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  019d0	51		 push	 ecx
  019d1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  019d6	c7 85 c0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv804[ebp], 0
$LN170@draw_large:
  019e0	6a 7e		 push	 126			; 0000007eH
  019e2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  019e8	52		 push	 edx
  019e9	69 85 c4 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv797[ebp], 1116
  019f3	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR tv804[ebp]
  019f9	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01a00	ff d2		 call	 edx
  01a02	85 c0		 test	 eax, eax
  01a04	74 09		 je	 SHORT $LN78@draw_large

; 7862 : 		s_ptr = "LOAL";

  01a06	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_04EKDNBCDP@LOAL@

; 7863 : 	else

  01a0d	eb 07		 jmp	 SHORT $LN79@draw_large
$LN78@draw_large:

; 7864 : 		s_ptr = "LOBL";

  01a0f	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_04EIHLKMGG@LOBL@
$LN79@draw_large:

; 7865 : 
; 7866 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  01a16	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  01a19	50		 push	 eax
  01a1a	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01a1f	dd 9d c0 fe ff
	ff		 fstp	 QWORD PTR tv2309[ebp]
  01a25	f2 0f 10 85 c0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv2309[ebp]
  01a2d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01a35	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a39	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7867 : 	set_mono_font_rel_position (x_adjust, 0.0);

  01a41	51		 push	 ecx
  01a42	0f 57 c0	 xorps	 xmm0, xmm0
  01a45	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a4a	51		 push	 ecx
  01a4b	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01a53	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a58	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7868 : 	print_mono_font_string (s_ptr);

  01a5d	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  01a60	50		 push	 eax
  01a61	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7869 : 
; 7870 : 	// rocket salve
; 7871 : 	draw_box(0.9, 0.45, 0.45, 0.2, FALSE, MFD_COLOUR1);

  01a66	b8 04 00 00 00	 mov	 eax, 4
  01a6b	6b c8 00	 imul	 ecx, eax, 0
  01a6e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a74	52		 push	 edx
  01a75	6a 00		 push	 0
  01a77	51		 push	 ecx
  01a78	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  01a80	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a85	51		 push	 ecx
  01a86	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  01a8e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a93	51		 push	 ecx
  01a94	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  01a9c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aa1	51		 push	 ecx
  01aa2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01aaa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aaf	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7872 : 
; 7873 : 	set_2d_mono_font_position (0.67, 0.42);

  01ab4	51		 push	 ecx
  01ab5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  01abd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ac2	51		 push	 ecx
  01ac3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f2b851f
  01acb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ad0	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7874 : 	s_ptr = "SALVO";

  01ad5	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_05GPKGLDLB@SALVO@

; 7875 : 
; 7876 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  01adc	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  01adf	50		 push	 eax
  01ae0	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01ae5	dd 9d c0 fe ff
	ff		 fstp	 QWORD PTR tv2334[ebp]
  01aeb	f2 0f 10 85 c0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv2334[ebp]
  01af3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01afb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01aff	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7877 : 	set_mono_font_rel_position (x_adjust, 0.0);

  01b07	51		 push	 ecx
  01b08	0f 57 c0	 xorps	 xmm0, xmm0
  01b0b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b10	51		 push	 ecx
  01b11	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01b19	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b1e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7878 : 	print_mono_font_string (s_ptr);

  01b23	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  01b26	50		 push	 eax
  01b27	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7879 : 
; 7880 : 	set_2d_mono_font_position (0.67, 0.31);

  01b2c	51		 push	 ecx
  01b2d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e9eb852
  01b35	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b3a	51		 push	 ecx
  01b3b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f2b851f
  01b43	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b48	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7881 : 	if (rocket_salvo_size == ROCKET_SALVO_SIZE_ALL)

  01b4d	81 3d 00 00 00
	00 e8 03 00 00	 cmp	 DWORD PTR ?rocket_salvo_size@@3HA, 1000 ; rocket_salvo_size, 000003e8H
  01b57	75 13		 jne	 SHORT $LN80@draw_large

; 7882 : 		sprintf(s, "ALL");

  01b59	68 00 00 00 00	 push	 OFFSET ??_C@_03NIFPGLBG@ALL@
  01b5e	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  01b61	50		 push	 eax
  01b62	e8 00 00 00 00	 call	 _sprintf
  01b67	83 c4 08	 add	 esp, 8

; 7883 : 	else

  01b6a	eb 17		 jmp	 SHORT $LN81@draw_large
$LN80@draw_large:

; 7884 : 		sprintf(s, "%2d", rocket_salvo_size);

  01b6c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rocket_salvo_size@@3HA ; rocket_salvo_size
  01b71	50		 push	 eax
  01b72	68 00 00 00 00	 push	 OFFSET ??_C@_03GPCJOALC@?$CF2d@
  01b77	8d 4d 84	 lea	 ecx, DWORD PTR _s$[ebp]
  01b7a	51		 push	 ecx
  01b7b	e8 00 00 00 00	 call	 _sprintf
  01b80	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN81@draw_large:

; 7885 : 
; 7886 : 	x_adjust = get_mono_font_string_width (s) * -0.6;

  01b83	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  01b86	50		 push	 eax
  01b87	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01b8c	dd 9d c0 fe ff
	ff		 fstp	 QWORD PTR tv2352[ebp]
  01b92	f2 0f 10 85 c0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv2352[ebp]
  01b9a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe3333333333333
  01ba2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01ba6	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7887 : 	set_mono_font_rel_position (x_adjust, 0.0);

  01bae	51		 push	 ecx
  01baf	0f 57 c0	 xorps	 xmm0, xmm0
  01bb2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bb7	51		 push	 ecx
  01bb8	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01bc0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bc5	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7888 : 	print_mono_font_string (s);

  01bca	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  01bcd	50		 push	 eax
  01bce	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7889 : 
; 7890 : 	// weapon pylons
; 7891 : 	switch (get_local_entity_int_value (get_gunship_entity (), INT_TYPE_ENTITY_SUB_TYPE))

  01bd3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  01bda	74 0f		 je	 SHORT $LN171@draw_large
  01bdc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  01be1	8b 08		 mov	 ecx, DWORD PTR [eax]
  01be3	89 8d c4 fe ff
	ff		 mov	 DWORD PTR tv890[ebp], ecx
  01be9	eb 20		 jmp	 SHORT $LN172@draw_large
$LN171@draw_large:
  01beb	68 d3 1e 00 00	 push	 7891			; 00001ed3H
  01bf0	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01bf5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01bfb	52		 push	 edx
  01bfc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01c01	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv890[ebp], 0
$LN172@draw_large:
  01c0b	b8 01 00 00 00	 mov	 eax, 1
  01c10	85 c0		 test	 eax, eax
  01c12	74 0c		 je	 SHORT $LN173@draw_large
  01c14	c7 85 c0 fe ff
	ff 34 00 00 00	 mov	 DWORD PTR tv897[ebp], 52 ; 00000034H
  01c1e	eb 20		 jmp	 SHORT $LN174@draw_large
$LN173@draw_large:
  01c20	68 d3 1e 00 00	 push	 7891			; 00001ed3H
  01c25	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01c2a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01c30	51		 push	 ecx
  01c31	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01c36	c7 85 c0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv897[ebp], 0
$LN174@draw_large:
  01c40	6a 34		 push	 52			; 00000034H
  01c42	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  01c48	52		 push	 edx
  01c49	69 85 c4 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv890[ebp], 1116
  01c53	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR tv897[ebp]
  01c59	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01c60	ff d2		 call	 edx
  01c62	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv903[ebp], eax
  01c68	83 bd bc fe ff
	ff 18		 cmp	 DWORD PTR tv903[ebp], 24 ; 00000018H
  01c6f	7c 21		 jl	 SHORT $LN83@draw_large
  01c71	83 bd bc fe ff
	ff 19		 cmp	 DWORD PTR tv903[ebp], 25 ; 00000019H
  01c78	7e 02		 jle	 SHORT $LN82@draw_large
  01c7a	eb 16		 jmp	 SHORT $LN83@draw_large
$LN82@draw_large:

; 7892 : 	{
; 7893 : 		case ENTITY_SUB_TYPE_AIRCRAFT_AH1T_SEACOBRA:
; 7894 : 		case ENTITY_SUB_TYPE_AIRCRAFT_AH1W_SUPERCOBRA:
; 7895 : 		{
; 7896 : 			pylon_start = COBRA_LHS_INNER_PYLON;

  01c7c	c7 85 5c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _pylon_start$[ebp], 1

; 7897 : 			pylon_end = COBRA_RHS_OUTER_PYLON;

  01c86	c7 85 58 ff ff
	ff 04 00 00 00	 mov	 DWORD PTR _pylon_end$[ebp], 4

; 7898 : 			break;

  01c90	eb 14		 jmp	 SHORT $LN18@draw_large
$LN83@draw_large:

; 7899 : 		}
; 7900 : 		default:
; 7901 : 		{
; 7902 : 			pylon_start = APACHE_LHS_INNER_PYLON;

  01c92	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pylon_start$[ebp], 0

; 7903 : 			pylon_end = APACHE_RHS_WING_TIP_MOUNT;

  01c9c	c7 85 58 ff ff
	ff 05 00 00 00	 mov	 DWORD PTR _pylon_end$[ebp], 5
$LN18@draw_large:

; 7904 : 			break;
; 7905 : 		}
; 7906 : 	}
; 7907 : 
; 7908 : 	for (pylon = pylon_start; pylon <= pylon_end; pylon++)

  01ca6	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _pylon_start$[ebp]
  01cac	89 85 6c ff ff
	ff		 mov	 DWORD PTR _pylon$[ebp], eax
  01cb2	eb 0f		 jmp	 SHORT $LN22@draw_large
$LN20@draw_large:
  01cb4	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _pylon$[ebp]
  01cba	83 c0 01	 add	 eax, 1
  01cbd	89 85 6c ff ff
	ff		 mov	 DWORD PTR _pylon$[ebp], eax
$LN22@draw_large:
  01cc3	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _pylon$[ebp]
  01cc9	3b 85 58 ff ff
	ff		 cmp	 eax, DWORD PTR _pylon_end$[ebp]
  01ccf	0f 8f 84 14 00
	00		 jg	 $LN21@draw_large

; 7909 : 	{
; 7910 : 		float pylon_x, pylon_y;
; 7911 : 
; 7912 : 		
; 7913 : 		pylon_y = -0.35;

  01cd5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  01cdd	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _pylon_y$19[ebp], xmm0

; 7914 : 
; 7915 : 		switch (get_local_entity_int_value (get_gunship_entity (), INT_TYPE_ENTITY_SUB_TYPE))

  01ce5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  01cec	74 0f		 je	 SHORT $LN175@draw_large
  01cee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  01cf3	8b 08		 mov	 ecx, DWORD PTR [eax]
  01cf5	89 8d c4 fe ff
	ff		 mov	 DWORD PTR tv913[ebp], ecx
  01cfb	eb 20		 jmp	 SHORT $LN176@draw_large
$LN175@draw_large:
  01cfd	68 eb 1e 00 00	 push	 7915			; 00001eebH
  01d02	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01d07	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01d0d	52		 push	 edx
  01d0e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01d13	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv913[ebp], 0
$LN176@draw_large:
  01d1d	b8 01 00 00 00	 mov	 eax, 1
  01d22	85 c0		 test	 eax, eax
  01d24	74 0c		 je	 SHORT $LN177@draw_large
  01d26	c7 85 c0 fe ff
	ff 34 00 00 00	 mov	 DWORD PTR tv920[ebp], 52 ; 00000034H
  01d30	eb 20		 jmp	 SHORT $LN178@draw_large
$LN177@draw_large:
  01d32	68 eb 1e 00 00	 push	 7915			; 00001eebH
  01d37	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01d3c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01d42	51		 push	 ecx
  01d43	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01d48	c7 85 c0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv920[ebp], 0
$LN178@draw_large:
  01d52	6a 34		 push	 52			; 00000034H
  01d54	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  01d5a	52		 push	 edx
  01d5b	69 85 c4 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv913[ebp], 1116
  01d65	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR tv920[ebp]
  01d6b	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01d72	ff d2		 call	 edx
  01d74	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv926[ebp], eax
  01d7a	83 bd bc fe ff
	ff 18		 cmp	 DWORD PTR tv926[ebp], 24 ; 00000018H
  01d81	0f 8c 87 00 00
	00		 jl	 $LN89@draw_large
  01d87	83 bd bc fe ff
	ff 19		 cmp	 DWORD PTR tv926[ebp], 25 ; 00000019H
  01d8e	7e 02		 jle	 SHORT $LN84@draw_large
  01d90	eb 7c		 jmp	 SHORT $LN89@draw_large
$LN84@draw_large:

; 7916 : 		{
; 7917 : 			case ENTITY_SUB_TYPE_AIRCRAFT_AH1T_SEACOBRA:
; 7918 : 			case ENTITY_SUB_TYPE_AIRCRAFT_AH1W_SUPERCOBRA:
; 7919 : 			{
; 7920 : 
; 7921 : 		switch (pylon)

  01d92	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _pylon$[ebp]
  01d98	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv927[ebp], eax
  01d9e	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR tv927[ebp]
  01da4	83 e9 01	 sub	 ecx, 1
  01da7	89 8d c4 fe ff
	ff		 mov	 DWORD PTR tv927[ebp], ecx
  01dad	83 bd c4 fe ff
	ff 03		 cmp	 DWORD PTR tv927[ebp], 3
  01db4	77 53		 ja	 SHORT $LN25@draw_large
  01db6	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR tv927[ebp]
  01dbc	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN205@draw_large[edx*4]
$LN85@draw_large:

; 7922 : 		{
; 7923 : 		case COBRA_LHS_INNER_PYLON:
; 7924 : 			pylon_x = -0.74;

  01dc3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3d70a4
  01dcb	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _pylon_x$20[ebp], xmm0

; 7925 : 			break;

  01dd3	eb 34		 jmp	 SHORT $LN25@draw_large
$LN86@draw_large:

; 7926 : 		case COBRA_RHS_INNER_PYLON:
; 7927 : 			pylon_x = 0.74;

  01dd5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3d70a4
  01ddd	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _pylon_x$20[ebp], xmm0

; 7928 : 			break;

  01de5	eb 22		 jmp	 SHORT $LN25@draw_large
$LN87@draw_large:

; 7929 : 		case COBRA_LHS_OUTER_PYLON:
; 7930 : 			pylon_x = -0.42;

  01de7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bed70a3d
  01def	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _pylon_x$20[ebp], xmm0

; 7931 : 			break;

  01df7	eb 10		 jmp	 SHORT $LN25@draw_large
$LN88@draw_large:

; 7932 : 		case COBRA_RHS_OUTER_PYLON:
; 7933 : 			pylon_x = 0.42;

  01df9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  01e01	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _pylon_x$20[ebp], xmm0
$LN25@draw_large:

; 7934 : 			break;
; 7935 : 		}
; 7936 : 
; 7937 : 			break;

  01e09	e9 8c 00 00 00	 jmp	 $LN23@draw_large
$LN89@draw_large:

; 7938 : 			}
; 7939 : 
; 7940 : 			default:
; 7941 : 			{
; 7942 : 
; 7943 : 		switch (pylon)

  01e0e	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _pylon$[ebp]
  01e14	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv930[ebp], eax
  01e1a	83 bd c4 fe ff
	ff 05		 cmp	 DWORD PTR tv930[ebp], 5
  01e21	77 77		 ja	 SHORT $LN27@draw_large
  01e23	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR tv930[ebp]
  01e29	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN206@draw_large[ecx*4]
$LN90@draw_large:

; 7944 : 		{
; 7945 : 		case APACHE_LHS_INNER_PYLON:
; 7946 : 			pylon_x = -0.42;

  01e30	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bed70a3d
  01e38	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _pylon_x$20[ebp], xmm0

; 7947 : 			break;

  01e40	eb 58		 jmp	 SHORT $LN27@draw_large
$LN91@draw_large:

; 7948 : 		case APACHE_RHS_INNER_PYLON:
; 7949 : 			pylon_x = 0.42;

  01e42	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  01e4a	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _pylon_x$20[ebp], xmm0

; 7950 : 			break;

  01e52	eb 46		 jmp	 SHORT $LN27@draw_large
$LN92@draw_large:

; 7951 : 		case APACHE_LHS_OUTER_PYLON:
; 7952 : 			pylon_x = -0.74;

  01e54	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3d70a4
  01e5c	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _pylon_x$20[ebp], xmm0

; 7953 : 			break;

  01e64	eb 34		 jmp	 SHORT $LN27@draw_large
$LN93@draw_large:

; 7954 : 		case APACHE_RHS_OUTER_PYLON:
; 7955 : 			pylon_x = 0.74;

  01e66	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3d70a4
  01e6e	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _pylon_x$20[ebp], xmm0

; 7956 : 			break;

  01e76	eb 22		 jmp	 SHORT $LN27@draw_large
$LN94@draw_large:

; 7957 : 		case APACHE_LHS_WING_TIP_MOUNT:
; 7958 : 			pylon_x = -0.97;

  01e78	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7851ec
  01e80	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _pylon_x$20[ebp], xmm0

; 7959 : 			break;

  01e88	eb 10		 jmp	 SHORT $LN27@draw_large
$LN95@draw_large:

; 7960 : 		case APACHE_RHS_WING_TIP_MOUNT:
; 7961 : 			pylon_x = 0.97;

  01e8a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7851ec
  01e92	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _pylon_x$20[ebp], xmm0
$LN27@draw_large:
$LN23@draw_large:

; 7962 : 			break;
; 7963 : 		}
; 7964 : 
; 7965 : 			}
; 7966 : 		}
; 7967 : 		
; 7968 : 		if (get_local_entity_weapon_hardpoint_info (get_gunship_entity (),

  01e9a	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _damaged$[ebp]
  01ea0	50		 push	 eax
  01ea1	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _number$[ebp]
  01ea7	51		 push	 ecx
  01ea8	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  01eae	52		 push	 edx
  01eaf	6a 00		 push	 0
  01eb1	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _pylon$[ebp]
  01eb7	50		 push	 eax
  01eb8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  01ebe	51		 push	 ecx
  01ebf	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  01ec4	85 c0		 test	 eax, eax
  01ec6	0f 84 88 12 00
	00		 je	 $LN142@draw_large

; 7969 : 			pylon, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON,
; 7970 : 			&weapon_sub_type, &number, &damaged))
; 7971 : 		{
; 7972 : 			switch (weapon_sub_type)

  01ecc	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01ed2	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv942[ebp], eax
  01ed8	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR tv942[ebp]
  01ede	83 e9 1e	 sub	 ecx, 30			; 0000001eH
  01ee1	89 8d c4 fe ff
	ff		 mov	 DWORD PTR tv942[ebp], ecx
  01ee7	83 bd c4 fe ff
	ff 10		 cmp	 DWORD PTR tv942[ebp], 16 ; 00000010H
  01eee	0f 87 d7 0f 00
	00		 ja	 $LN29@draw_large
  01ef4	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR tv942[ebp]
  01efa	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN200@draw_large[edx]
  01f01	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN207@draw_large[eax*4]
$LN97@draw_large:

; 7973 : 			{
; 7974 : 			case ENTITY_SUB_TYPE_WEAPON_AGM114L_LONGBOW_HELLFIRE:
; 7975 : 			case ENTITY_SUB_TYPE_WEAPON_AGM114K_HELLFIRE_II:
; 7976 : 			{
; 7977 : 				int i;
; 7978 : 				float last_offset;  // is last missile on the left or right side of pylon
; 7979 : 				
; 7980 : 				if (pylon == APACHE_LHS_INNER_PYLON || pylon == APACHE_LHS_OUTER_PYLON)

  01f08	83 bd 6c ff ff
	ff 00		 cmp	 DWORD PTR _pylon$[ebp], 0
  01f0f	74 09		 je	 SHORT $LN100@draw_large
  01f11	83 bd 6c ff ff
	ff 02		 cmp	 DWORD PTR _pylon$[ebp], 2
  01f18	75 12		 jne	 SHORT $LN98@draw_large
$LN100@draw_large:

; 7981 : 					last_offset = 0.07;

  01f1a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d8f5c29
  01f22	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _last_offset$17[ebp], xmm0

; 7982 : 				else

  01f2a	eb 10		 jmp	 SHORT $LN99@draw_large
$LN98@draw_large:

; 7983 : 					last_offset = -0.07;

  01f2c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd8f5c29
  01f34	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _last_offset$17[ebp], xmm0
$LN99@draw_large:

; 7984 : 
; 7985 : 				for (i = 1; i <= number; i++)

  01f3c	c7 85 4c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _i$18[ebp], 1
  01f46	eb 0f		 jmp	 SHORT $LN33@draw_large
$LN31@draw_large:
  01f48	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _i$18[ebp]
  01f4e	83 c0 01	 add	 eax, 1
  01f51	89 85 4c ff ff
	ff		 mov	 DWORD PTR _i$18[ebp], eax
$LN33@draw_large:
  01f57	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _i$18[ebp]
  01f5d	3b 85 78 ff ff
	ff		 cmp	 eax, DWORD PTR _number$[ebp]
  01f63	0f 8f 70 03 00
	00		 jg	 $LN32@draw_large

; 7986 : 				{
; 7987 : 					float missile_x, missile_y;
; 7988 : 					
; 7989 : 					switch(i)

  01f69	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _i$18[ebp]
  01f6f	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv947[ebp], eax
  01f75	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR tv947[ebp]
  01f7b	83 e9 01	 sub	 ecx, 1
  01f7e	89 8d c4 fe ff
	ff		 mov	 DWORD PTR tv947[ebp], ecx
  01f84	83 bd c4 fe ff
	ff 03		 cmp	 DWORD PTR tv947[ebp], 3
  01f8b	0f 87 eb 00 00
	00		 ja	 $LN105@draw_large
  01f91	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR tv947[ebp]
  01f97	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN208@draw_large[edx*4]
$LN101@draw_large:

; 7990 : 					{
; 7991 : 						case 1:
; 7992 : 							missile_x = pylon_x + last_offset;

  01f9e	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$20[ebp]
  01fa6	f3 0f 58 85 48
	ff ff ff	 addss	 xmm0, DWORD PTR _last_offset$17[ebp]
  01fae	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR _missile_x$16[ebp], xmm0

; 7993 : 							missile_y = pylon_y - 0.18;

  01fb6	f3 0f 5a 85 50
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$19[ebp]
  01fbe	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc70a3d70a3d70a
  01fc6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01fca	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR _missile_y$15[ebp], xmm0

; 7994 : 							break;

  01fd2	e9 c8 00 00 00	 jmp	 $LN34@draw_large
$LN102@draw_large:

; 7995 : 						case 2:
; 7996 : 							missile_x = pylon_x - last_offset;

  01fd7	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$20[ebp]
  01fdf	f3 0f 5c 85 48
	ff ff ff	 subss	 xmm0, DWORD PTR _last_offset$17[ebp]
  01fe7	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR _missile_x$16[ebp], xmm0

; 7997 : 							missile_y = pylon_y - 0.18;

  01fef	f3 0f 5a 85 50
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$19[ebp]
  01ff7	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc70a3d70a3d70a
  01fff	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02003	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR _missile_y$15[ebp], xmm0

; 7998 : 							break;

  0200b	e9 8f 00 00 00	 jmp	 $LN34@draw_large
$LN103@draw_large:

; 7999 : 						case 3:
; 8000 : 							missile_x = pylon_x + last_offset;

  02010	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$20[ebp]
  02018	f3 0f 58 85 48
	ff ff ff	 addss	 xmm0, DWORD PTR _last_offset$17[ebp]
  02020	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR _missile_x$16[ebp], xmm0

; 8001 : 							missile_y = pylon_y + 0.22;

  02028	f3 0f 5a 85 50
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$19[ebp]
  02030	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fcc28f5c28f5c29
  02038	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0203c	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR _missile_y$15[ebp], xmm0

; 8002 : 							break;

  02044	eb 59		 jmp	 SHORT $LN34@draw_large
$LN104@draw_large:

; 8003 : 						case 4:
; 8004 : 							missile_x = pylon_x - last_offset;

  02046	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$20[ebp]
  0204e	f3 0f 5c 85 48
	ff ff ff	 subss	 xmm0, DWORD PTR _last_offset$17[ebp]
  02056	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR _missile_x$16[ebp], xmm0

; 8005 : 							missile_y = pylon_y + 0.22;

  0205e	f3 0f 5a 85 50
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$19[ebp]
  02066	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fcc28f5c28f5c29
  0206e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02072	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR _missile_y$15[ebp], xmm0

; 8006 : 							break;

  0207a	eb 23		 jmp	 SHORT $LN34@draw_large
$LN105@draw_large:

; 8007 : 						default:
; 8008 : 							ASSERT(!"more than 4 hellfires on Apache pylon");

  0207c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CG@DKLMAF@more?5than?54?5hellfires?5on?5Apache@
  02081	85 c0		 test	 eax, eax
  02083	74 1a		 je	 SHORT $LN106@draw_large
  02085	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z@4JA
  0208a	05 3c 02 00 00	 add	 eax, 572		; 0000023cH
  0208f	50		 push	 eax
  02090	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  02095	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@NDBFDPHK@?$CB?$CCmore?5than?54?5hellfires?5on?5Apac@
  0209a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN106@draw_large:
$LN34@draw_large:

; 8009 : 					}
; 8010 : 
; 8011 : 					// remove wing
; 8012 : 					get_2d_float_screen_x_coordinate(missile_x + 0.06, &x1);

  0209f	8d 45 fc	 lea	 eax, DWORD PTR _x1$[ebp]
  020a2	50		 push	 eax
  020a3	f3 0f 5a 85 44
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _missile_x$16[ebp]
  020ab	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3faeb851eb851eb8
  020b3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  020b7	51		 push	 ecx
  020b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020bd	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 8013 : 					get_2d_float_screen_x_coordinate(missile_x - 0.06, &x2);

  020c2	8d 45 f8	 lea	 eax, DWORD PTR _x2$[ebp]
  020c5	50		 push	 eax
  020c6	f3 0f 5a 85 44
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _missile_x$16[ebp]
  020ce	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3faeb851eb851eb8
  020d6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  020da	51		 push	 ecx
  020db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020e0	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 8014 : 	
; 8015 : 					if (missile_y > pylon_y)

  020e5	f3 0f 10 85 40
	ff ff ff	 movss	 xmm0, DWORD PTR _missile_y$15[ebp]
  020ed	0f 2f 85 50 ff
	ff ff		 comiss	 xmm0, DWORD PTR _pylon_y$19[ebp]
  020f4	76 42		 jbe	 SHORT $LN107@draw_large

; 8016 : 						draw_line(x1, forward_wing, x2, forward_wing, MFD_CLEAR_COLOUR);

  020f6	b8 04 00 00 00	 mov	 eax, 4
  020fb	6b c8 13	 imul	 ecx, eax, 19
  020fe	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02104	52		 push	 edx
  02105	51		 push	 ecx
  02106	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  0210b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02110	51		 push	 ecx
  02111	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  02116	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0211b	51		 push	 ecx
  0211c	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  02121	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02126	51		 push	 ecx
  02127	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0212c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02131	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8017 : 					else

  02136	eb 40		 jmp	 SHORT $LN108@draw_large
$LN107@draw_large:

; 8018 : 						draw_line(x1, rear_wing, x2, rear_wing, MFD_CLEAR_COLOUR);

  02138	b8 04 00 00 00	 mov	 eax, 4
  0213d	6b c8 13	 imul	 ecx, eax, 19
  02140	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02146	52		 push	 edx
  02147	51		 push	 ecx
  02148	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  0214d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02152	51		 push	 ecx
  02153	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  02158	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0215d	51		 push	 ecx
  0215e	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  02163	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02168	51		 push	 ecx
  02169	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0216e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02173	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN108@draw_large:

; 8019 : 		
; 8020 : 					// draw missile
; 8021 : 					if ((weapon_sub_type == selected_weapon) && !damaged)

  02178	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0217e	3b 85 70 ff ff
	ff		 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  02184	75 54		 jne	 SHORT $LN109@draw_large
  02186	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  0218d	75 4b		 jne	 SHORT $LN109@draw_large

; 8022 : 					{
; 8023 : 						draw_2d_mono_sprite(inverted_hellfire_missile_data, missile_x, missile_y, MFD_COLOUR1);

  0218f	b8 04 00 00 00	 mov	 eax, 4
  02194	6b c8 00	 imul	 ecx, eax, 0
  02197	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0219d	52		 push	 edx
  0219e	51		 push	 ecx
  0219f	f3 0f 10 85 40
	ff ff ff	 movss	 xmm0, DWORD PTR _missile_y$15[ebp]
  021a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021ac	51		 push	 ecx
  021ad	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR _missile_x$16[ebp]
  021b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021ba	68 00 00 00 00	 push	 OFFSET ?inverted_hellfire_missile_data@@3PADA
  021bf	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 8024 : 						set_mono_font_colour (MFD_CLEAR_COLOUR);

  021c4	b8 04 00 00 00	 mov	 eax, 4
  021c9	6b c8 13	 imul	 ecx, eax, 19
  021cc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  021d2	52		 push	 edx
  021d3	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8025 : 					}
; 8026 : 					else

  021d8	eb 49		 jmp	 SHORT $LN110@draw_large
$LN109@draw_large:

; 8027 : 					{
; 8028 : 						draw_2d_mono_sprite(hellfire_missile_data, missile_x, missile_y, MFD_COLOUR1);

  021da	b8 04 00 00 00	 mov	 eax, 4
  021df	6b c8 00	 imul	 ecx, eax, 0
  021e2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  021e8	52		 push	 edx
  021e9	51		 push	 ecx
  021ea	f3 0f 10 85 40
	ff ff ff	 movss	 xmm0, DWORD PTR _missile_y$15[ebp]
  021f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021f7	51		 push	 ecx
  021f8	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR _missile_x$16[ebp]
  02200	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02205	68 00 00 00 00	 push	 OFFSET ?hellfire_missile_data@@3PADA
  0220a	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 8029 : 						set_mono_font_colour (MFD_COLOUR1);

  0220f	b8 04 00 00 00	 mov	 eax, 4
  02214	6b c8 00	 imul	 ecx, eax, 0
  02217	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0221d	52		 push	 edx
  0221e	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN110@draw_large:

; 8030 : 					}
; 8031 : 					set_mono_font_type (MONO_FONT_TYPE_7X12);

  02223	6a 05		 push	 5
  02225	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 8032 : 					set_2d_mono_font_position (missile_x, missile_y-0.05);

  0222a	f3 0f 5a 85 40
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _missile_y$15[ebp]
  02232	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  0223a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0223e	51		 push	 ecx
  0223f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02244	51		 push	 ecx
  02245	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR _missile_x$16[ebp]
  0224d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02252	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8033 : 		
; 8034 : 					if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AGM114L_LONGBOW_HELLFIRE)

  02257	83 bd 68 ff ff
	ff 2d		 cmp	 DWORD PTR _weapon_sub_type$[ebp], 45 ; 0000002dH
  0225e	75 13		 jne	 SHORT $LN111@draw_large

; 8035 : 						sprintf(s, "R");

  02260	68 00 00 00 00	 push	 OFFSET ??_C@_01DGKLNCNG@R@
  02265	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  02268	50		 push	 eax
  02269	e8 00 00 00 00	 call	 _sprintf
  0226e	83 c4 08	 add	 esp, 8

; 8036 : 					else

  02271	eb 11		 jmp	 SHORT $LN112@draw_large
$LN111@draw_large:

; 8037 : 						sprintf(s, "L");

  02273	68 00 00 00 00	 push	 OFFSET ??_C@_01OCOKONAJ@L@
  02278	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  0227b	50		 push	 eax
  0227c	e8 00 00 00 00	 call	 _sprintf
  02281	83 c4 08	 add	 esp, 8
$LN112@draw_large:

; 8038 : 						
; 8039 : 					x_adjust = get_mono_font_string_width (s) * -0.4;

  02284	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  02287	50		 push	 eax
  02288	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0228d	dd 9d c0 fe ff
	ff		 fstp	 QWORD PTR tv2470[ebp]
  02293	f2 0f 10 85 c0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv2470[ebp]
  0229b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfd999999999999a
  022a3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  022a7	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 8040 : 					set_mono_font_rel_position (x_adjust, 0.0);

  022af	51		 push	 ecx
  022b0	0f 57 c0	 xorps	 xmm0, xmm0
  022b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022b8	51		 push	 ecx
  022b9	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  022c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022c6	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8041 : 					print_mono_font_string (s);

  022cb	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  022ce	50		 push	 eax
  022cf	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8042 : 				}

  022d4	e9 6f fc ff ff	 jmp	 $LN31@draw_large
$LN32@draw_large:

; 8043 : 				break;

  022d9	e9 ed 0b 00 00	 jmp	 $LN29@draw_large
$LN113@draw_large:

; 8044 : 			}
; 8045 : 			case ENTITY_SUB_TYPE_WEAPON_HYDRA70_M255:
; 8046 : 			case ENTITY_SUB_TYPE_WEAPON_HYDRA70_M261:
; 8047 : 			case ENTITY_SUB_TYPE_WEAPON_S5:
; 8048 : 			case ENTITY_SUB_TYPE_WEAPON_S8:
; 8049 : 			{
; 8050 : 				int selected = (weapon_sub_type == selected_weapon) && !damaged;

  022de	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  022e4	3b 85 70 ff ff
	ff		 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  022ea	75 15		 jne	 SHORT $LN179@draw_large
  022ec	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  022f3	75 0c		 jne	 SHORT $LN179@draw_large
  022f5	c7 85 c4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1037[ebp], 1
  022ff	eb 0a		 jmp	 SHORT $LN180@draw_large
$LN179@draw_large:
  02301	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1037[ebp], 0
$LN180@draw_large:
  0230b	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR tv1037[ebp]
  02311	89 8d 3c ff ff
	ff		 mov	 DWORD PTR _selected$14[ebp], ecx

; 8051 : 				rgb_colour text_colour = selected ? MFD_CLEAR_COLOUR : MFD_COLOUR1;

  02317	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR _selected$14[ebp], 0
  0231e	74 16		 je	 SHORT $LN181@draw_large
  02320	b8 04 00 00 00	 mov	 eax, 4
  02325	6b c8 13	 imul	 ecx, eax, 19
  02328	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?mfd_colours@@3PAUREAL_COLOUR@@A
  0232e	89 8d c4 fe ff
	ff		 mov	 DWORD PTR tv1043[ebp], ecx
  02334	eb 13		 jmp	 SHORT $LN182@draw_large
$LN181@draw_large:
  02336	ba 04 00 00 00	 mov	 edx, 4
  0233b	6b c2 00	 imul	 eax, edx, 0
  0233e	05 00 00 00 00	 add	 eax, OFFSET ?mfd_colours@@3PAUREAL_COLOUR@@A
  02343	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv1043[ebp], eax
$LN182@draw_large:
  02349	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR tv1043[ebp]
  0234f	89 8d c8 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  02355	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0235b	8b 02		 mov	 eax, DWORD PTR [edx]
  0235d	89 85 38 ff ff
	ff		 mov	 DWORD PTR _text_colour$13[ebp], eax

; 8052 : 
; 8053 : 				set_mono_font_colour (text_colour);

  02363	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _text_colour$13[ebp]
  02369	50		 push	 eax
  0236a	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 8054 : 
; 8055 : 				// remove wing under pod
; 8056 : 				get_2d_float_screen_x_coordinate(pylon_x + 0.11, &x1);

  0236f	8d 45 fc	 lea	 eax, DWORD PTR _x1$[ebp]
  02372	50		 push	 eax
  02373	f3 0f 5a 85 54
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$20[ebp]
  0237b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fbc28f5c28f5c29
  02383	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02387	51		 push	 ecx
  02388	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0238d	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 8057 : 				get_2d_float_screen_x_coordinate(pylon_x - 0.11, &x2);

  02392	8d 45 f8	 lea	 eax, DWORD PTR _x2$[ebp]
  02395	50		 push	 eax
  02396	f3 0f 5a 85 54
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$20[ebp]
  0239e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fbc28f5c28f5c29
  023a6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  023aa	51		 push	 ecx
  023ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023b0	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 8058 : 
; 8059 : 				draw_line(x1, forward_wing, x2, forward_wing, MFD_CLEAR_COLOUR);

  023b5	b8 04 00 00 00	 mov	 eax, 4
  023ba	6b c8 13	 imul	 ecx, eax, 19
  023bd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  023c3	52		 push	 edx
  023c4	51		 push	 ecx
  023c5	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  023ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023cf	51		 push	 ecx
  023d0	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  023d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023da	51		 push	 ecx
  023db	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  023e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023e5	51		 push	 ecx
  023e6	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  023eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023f0	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8060 : 				draw_line(x1, rear_wing, x2, rear_wing, MFD_CLEAR_COLOUR);

  023f5	b8 04 00 00 00	 mov	 eax, 4
  023fa	6b c8 13	 imul	 ecx, eax, 19
  023fd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02403	52		 push	 edx
  02404	51		 push	 ecx
  02405	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  0240a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0240f	51		 push	 ecx
  02410	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  02415	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0241a	51		 push	 ecx
  0241b	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  02420	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02425	51		 push	 ecx
  02426	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0242b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02430	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8061 : 
; 8062 : 				// draw rocket pod
; 8063 : 				get_2d_float_screen_coordinates (pylon_x - 0.11, pylon_y + 0.3, &x1, &y1);

  02435	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  02438	50		 push	 eax
  02439	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  0243c	51		 push	 ecx
  0243d	f3 0f 5a 85 50
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$19[ebp]
  02445	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd3333333333333
  0244d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02451	51		 push	 ecx
  02452	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02457	f3 0f 5a 85 54
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$20[ebp]
  0245f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fbc28f5c28f5c29
  02467	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0246b	51		 push	 ecx
  0246c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02471	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 8064 : 				get_2d_float_screen_coordinates (pylon_x + 0.11, pylon_y - 0.3, &x2, &y2);

  02476	8d 45 e8	 lea	 eax, DWORD PTR _y2$[ebp]
  02479	50		 push	 eax
  0247a	8d 4d f8	 lea	 ecx, DWORD PTR _x2$[ebp]
  0247d	51		 push	 ecx
  0247e	f3 0f 5a 85 50
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$19[ebp]
  02486	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd3333333333333
  0248e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02492	51		 push	 ecx
  02493	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02498	f3 0f 5a 85 54
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$20[ebp]
  024a0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fbc28f5c28f5c29
  024a8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  024ac	51		 push	 ecx
  024ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024b2	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 8065 : 
; 8066 : 				if (selected)

  024b7	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR _selected$14[ebp], 0
  024be	74 31		 je	 SHORT $LN114@draw_large

; 8067 : 					set_block (x1, y1, x2, y2, MFD_COLOUR1);

  024c0	b8 04 00 00 00	 mov	 eax, 4
  024c5	6b c8 00	 imul	 ecx, eax, 0
  024c8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  024ce	52		 push	 edx
  024cf	f3 0f 2c 45 e8	 cvttss2si eax, DWORD PTR _y2$[ebp]
  024d4	50		 push	 eax
  024d5	f3 0f 2c 4d f8	 cvttss2si ecx, DWORD PTR _x2$[ebp]
  024da	51		 push	 ecx
  024db	f3 0f 2c 55 ec	 cvttss2si edx, DWORD PTR _y1$[ebp]
  024e0	52		 push	 edx
  024e1	f3 0f 2c 45 fc	 cvttss2si eax, DWORD PTR _x1$[ebp]
  024e6	50		 push	 eax
  024e7	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 8068 : 				else

  024ec	e9 00 01 00 00	 jmp	 $LN115@draw_large
$LN114@draw_large:

; 8069 : 				{
; 8070 : 					draw_line (x1, y1, x2, y1, MFD_COLOUR1);

  024f1	b8 04 00 00 00	 mov	 eax, 4
  024f6	6b c8 00	 imul	 ecx, eax, 0
  024f9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  024ff	52		 push	 edx
  02500	51		 push	 ecx
  02501	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02506	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0250b	51		 push	 ecx
  0250c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  02511	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02516	51		 push	 ecx
  02517	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0251c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02521	51		 push	 ecx
  02522	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02527	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0252c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8071 : 					draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  02531	b8 04 00 00 00	 mov	 eax, 4
  02536	6b c8 00	 imul	 ecx, eax, 0
  02539	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0253f	52		 push	 edx
  02540	51		 push	 ecx
  02541	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02546	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0254b	51		 push	 ecx
  0254c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02551	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02556	51		 push	 ecx
  02557	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0255c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02561	51		 push	 ecx
  02562	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02567	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0256c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8072 : 					draw_line (x1, y2, x2, y2, MFD_COLOUR1);

  02571	b8 04 00 00 00	 mov	 eax, 4
  02576	6b c8 00	 imul	 ecx, eax, 0
  02579	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0257f	52		 push	 edx
  02580	51		 push	 ecx
  02581	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02586	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0258b	51		 push	 ecx
  0258c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  02591	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02596	51		 push	 ecx
  02597	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0259c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025a1	51		 push	 ecx
  025a2	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  025a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025ac	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8073 : 					draw_line (x2, y1, x2, y2, MFD_COLOUR1);

  025b1	b8 04 00 00 00	 mov	 eax, 4
  025b6	6b c8 00	 imul	 ecx, eax, 0
  025b9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  025bf	52		 push	 edx
  025c0	51		 push	 ecx
  025c1	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  025c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025cb	51		 push	 ecx
  025cc	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  025d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025d6	51		 push	 ecx
  025d7	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  025dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025e1	51		 push	 ecx
  025e2	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  025e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025ec	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN115@draw_large:

; 8074 : 				}
; 8075 : 
; 8076 : 				set_mono_font_type (MONO_FONT_TYPE_7X12);

  025f1	6a 05		 push	 5
  025f3	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 8077 : 				set_2d_mono_font_position (pylon_x, pylon_y);

  025f8	51		 push	 ecx
  025f9	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_y$19[ebp]
  02601	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02606	51		 push	 ecx
  02607	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$20[ebp]
  0260f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02614	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8078 : 	
; 8079 : 				if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_HYDRA70_M255)

  02619	83 bd 68 ff ff
	ff 1e		 cmp	 DWORD PTR _weapon_sub_type$[ebp], 30 ; 0000001eH
  02620	75 13		 jne	 SHORT $LN116@draw_large

; 8080 : 					sprintf(s, "MP");

  02622	68 00 00 00 00	 push	 OFFSET ??_C@_02MCEHGFCK@MP@
  02627	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  0262a	50		 push	 eax
  0262b	e8 00 00 00 00	 call	 _sprintf
  02630	83 c4 08	 add	 esp, 8
  02633	eb 52		 jmp	 SHORT $LN122@draw_large
$LN116@draw_large:

; 8081 : 				else if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_HYDRA70_M261)

  02635	83 bd 68 ff ff
	ff 1f		 cmp	 DWORD PTR _weapon_sub_type$[ebp], 31 ; 0000001fH
  0263c	75 13		 jne	 SHORT $LN118@draw_large

; 8082 : 					sprintf(s, "RC");

  0263e	68 00 00 00 00	 push	 OFFSET ??_C@_02LENCMAPF@RC@
  02643	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  02646	50		 push	 eax
  02647	e8 00 00 00 00	 call	 _sprintf
  0264c	83 c4 08	 add	 esp, 8
  0264f	eb 36		 jmp	 SHORT $LN122@draw_large
$LN118@draw_large:

; 8083 : 				else if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_S5)

  02651	83 bd 68 ff ff
	ff 21		 cmp	 DWORD PTR _weapon_sub_type$[ebp], 33 ; 00000021H
  02658	75 13		 jne	 SHORT $LN120@draw_large

; 8084 : 					sprintf(s, "S5");

  0265a	68 00 00 00 00	 push	 OFFSET ??_C@_02MMHFHELC@S5@
  0265f	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  02662	50		 push	 eax
  02663	e8 00 00 00 00	 call	 _sprintf
  02668	83 c4 08	 add	 esp, 8
  0266b	eb 1a		 jmp	 SHORT $LN122@draw_large
$LN120@draw_large:

; 8085 : 				else if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_S8)

  0266d	83 bd 68 ff ff
	ff 22		 cmp	 DWORD PTR _weapon_sub_type$[ebp], 34 ; 00000022H
  02674	75 11		 jne	 SHORT $LN122@draw_large

; 8086 : 					sprintf(s, "S8");

  02676	68 00 00 00 00	 push	 OFFSET ??_C@_02HJNLAKPP@S8@
  0267b	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  0267e	50		 push	 eax
  0267f	e8 00 00 00 00	 call	 _sprintf
  02684	83 c4 08	 add	 esp, 8
$LN122@draw_large:

; 8087 : 					
; 8088 : 				x_adjust = get_mono_font_string_width (s) * -0.4;

  02687	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  0268a	50		 push	 eax
  0268b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02690	dd 9d c0 fe ff
	ff		 fstp	 QWORD PTR tv2570[ebp]
  02696	f2 0f 10 85 c0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv2570[ebp]
  0269e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfd999999999999a
  026a6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  026aa	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 8089 : 				set_mono_font_rel_position (x_adjust, 0.0);

  026b2	51		 push	 ecx
  026b3	0f 57 c0	 xorps	 xmm0, xmm0
  026b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026bb	51		 push	 ecx
  026bc	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  026c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026c9	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8090 : 				print_mono_font_string (s);

  026ce	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  026d1	50		 push	 eax
  026d2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8091 : 				
; 8092 : 				set_2d_mono_font_position (pylon_x, pylon_y - 0.1);

  026d7	f3 0f 5a 85 50
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$19[ebp]
  026df	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb999999999999a
  026e7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  026eb	51		 push	 ecx
  026ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026f1	51		 push	 ecx
  026f2	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$20[ebp]
  026fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026ff	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8093 : 				sprintf(s, "%2d", number);

  02704	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _number$[ebp]
  0270a	50		 push	 eax
  0270b	68 00 00 00 00	 push	 OFFSET ??_C@_03GPCJOALC@?$CF2d@
  02710	8d 4d 84	 lea	 ecx, DWORD PTR _s$[ebp]
  02713	51		 push	 ecx
  02714	e8 00 00 00 00	 call	 _sprintf
  02719	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8094 : 				x_adjust = get_mono_font_string_width (s) * -0.4;

  0271c	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  0271f	50		 push	 eax
  02720	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02725	dd 9d c0 fe ff
	ff		 fstp	 QWORD PTR tv2586[ebp]
  0272b	f2 0f 10 85 c0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv2586[ebp]
  02733	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfd999999999999a
  0273b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0273f	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 8095 : 				set_mono_font_rel_position (x_adjust, 0.0);

  02747	51		 push	 ecx
  02748	0f 57 c0	 xorps	 xmm0, xmm0
  0274b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02750	51		 push	 ecx
  02751	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  02759	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0275e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8096 : 				print_mono_font_string (s);

  02763	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  02766	50		 push	 eax
  02767	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8097 : 
; 8098 : 				break;

  0276c	e9 5a 07 00 00	 jmp	 $LN29@draw_large
$LN123@draw_large:

; 8099 : 			}
; 8100 : 			case ENTITY_SUB_TYPE_WEAPON_AIM92_STINGER:
; 8101 : 			case ENTITY_SUB_TYPE_WEAPON_AIM9M_SIDEWINDER:
; 8102 : 			{
; 8103 : 
; 8104 : 		switch (get_local_entity_int_value (get_gunship_entity (), INT_TYPE_ENTITY_SUB_TYPE))

  02771	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  02778	74 0f		 je	 SHORT $LN183@draw_large
  0277a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0277f	8b 08		 mov	 ecx, DWORD PTR [eax]
  02781	89 8d c4 fe ff
	ff		 mov	 DWORD PTR tv1206[ebp], ecx
  02787	eb 20		 jmp	 SHORT $LN184@draw_large
$LN183@draw_large:
  02789	68 a8 1f 00 00	 push	 8104			; 00001fa8H
  0278e	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  02793	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02799	52		 push	 edx
  0279a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0279f	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1206[ebp], 0
$LN184@draw_large:
  027a9	b8 01 00 00 00	 mov	 eax, 1
  027ae	85 c0		 test	 eax, eax
  027b0	74 0c		 je	 SHORT $LN185@draw_large
  027b2	c7 85 c0 fe ff
	ff 34 00 00 00	 mov	 DWORD PTR tv1213[ebp], 52 ; 00000034H
  027bc	eb 20		 jmp	 SHORT $LN186@draw_large
$LN185@draw_large:
  027be	68 a8 1f 00 00	 push	 8104			; 00001fa8H
  027c3	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  027c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  027ce	51		 push	 ecx
  027cf	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  027d4	c7 85 c0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1213[ebp], 0
$LN186@draw_large:
  027de	6a 34		 push	 52			; 00000034H
  027e0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  027e6	52		 push	 edx
  027e7	69 85 c4 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1206[ebp], 1116
  027f1	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR tv1213[ebp]
  027f7	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  027fe	ff d2		 call	 edx
  02800	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv1219[ebp], eax
  02806	83 bd bc fe ff
	ff 18		 cmp	 DWORD PTR tv1219[ebp], 24 ; 00000018H
  0280d	0f 8c 0c 03 00
	00		 jl	 $LN131@draw_large
  02813	83 bd bc fe ff
	ff 19		 cmp	 DWORD PTR tv1219[ebp], 25 ; 00000019H
  0281a	7e 05		 jle	 SHORT $LN124@draw_large
  0281c	e9 fe 02 00 00	 jmp	 $LN131@draw_large
$LN124@draw_large:

; 8105 : 		{
; 8106 : 			case ENTITY_SUB_TYPE_AIRCRAFT_AH1T_SEACOBRA:
; 8107 : 			case ENTITY_SUB_TYPE_AIRCRAFT_AH1W_SUPERCOBRA:
; 8108 : 			{
; 8109 : 
; 8110 : 				int selected = (weapon_sub_type == selected_weapon) && !damaged;

  02821	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  02827	3b 85 70 ff ff
	ff		 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  0282d	75 15		 jne	 SHORT $LN187@draw_large
  0282f	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  02836	75 0c		 jne	 SHORT $LN187@draw_large
  02838	c7 85 c4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1222[ebp], 1
  02842	eb 0a		 jmp	 SHORT $LN188@draw_large
$LN187@draw_large:
  02844	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1222[ebp], 0
$LN188@draw_large:
  0284e	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR tv1222[ebp]
  02854	89 8d 34 ff ff
	ff		 mov	 DWORD PTR _selected$12[ebp], ecx

; 8111 : 
; 8112 : 				if (number == 2)

  0285a	83 bd 78 ff ff
	ff 02		 cmp	 DWORD PTR _number$[ebp], 2
  02861	0f 85 53 01 00
	00		 jne	 $LN127@draw_large

; 8113 : 				{
; 8114 : 
; 8115 : 					// remove wing
; 8116 : 					get_2d_float_screen_x_coordinate(pylon_x + 0.06, &x1);

  02867	8d 45 fc	 lea	 eax, DWORD PTR _x1$[ebp]
  0286a	50		 push	 eax
  0286b	f3 0f 5a 85 54
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$20[ebp]
  02873	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3faeb851eb851eb8
  0287b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0287f	51		 push	 ecx
  02880	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02885	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 8117 : 					get_2d_float_screen_x_coordinate(pylon_x - 0.06, &x2);

  0288a	8d 45 f8	 lea	 eax, DWORD PTR _x2$[ebp]
  0288d	50		 push	 eax
  0288e	f3 0f 5a 85 54
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$20[ebp]
  02896	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3faeb851eb851eb8
  0289e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  028a2	51		 push	 ecx
  028a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  028a8	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 8118 : 	
; 8119 : 					//if (missile_y > pylon_y)
; 8120 : 						draw_line(x1, forward_wing, x2, forward_wing, MFD_CLEAR_COLOUR);

  028ad	b8 04 00 00 00	 mov	 eax, 4
  028b2	6b c8 13	 imul	 ecx, eax, 19
  028b5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  028bb	52		 push	 edx
  028bc	51		 push	 ecx
  028bd	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  028c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  028c7	51		 push	 ecx
  028c8	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  028cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  028d2	51		 push	 ecx
  028d3	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  028d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  028dd	51		 push	 ecx
  028de	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  028e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  028e8	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8121 : 					//else
; 8122 : 						draw_line(x1, rear_wing, x2, rear_wing, MFD_CLEAR_COLOUR);

  028ed	b8 04 00 00 00	 mov	 eax, 4
  028f2	6b c8 13	 imul	 ecx, eax, 19
  028f5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  028fb	52		 push	 edx
  028fc	51		 push	 ecx
  028fd	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  02902	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02907	51		 push	 ecx
  02908	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0290d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02912	51		 push	 ecx
  02913	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  02918	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0291d	51		 push	 ecx
  0291e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02923	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02928	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8123 : 
; 8124 : 					// draw missile
; 8125 : 					if (selected)

  0292d	83 bd 34 ff ff
	ff 00		 cmp	 DWORD PTR _selected$12[ebp], 0
  02934	74 43		 je	 SHORT $LN126@draw_large

; 8126 : 						draw_2d_mono_sprite(inverted_stinger_missile_data, pylon_x, pylon_y + 0.25, MFD_COLOUR1);

  02936	b8 04 00 00 00	 mov	 eax, 4
  0293b	6b c8 00	 imul	 ecx, eax, 0
  0293e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02944	52		 push	 edx
  02945	f3 0f 5a 85 50
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$19[ebp]
  0294d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  02955	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02959	51		 push	 ecx
  0295a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0295f	51		 push	 ecx
  02960	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$20[ebp]
  02968	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0296d	68 00 00 00 00	 push	 OFFSET ?inverted_stinger_missile_data@@3PADA
  02972	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 8127 : 					else

  02977	eb 41		 jmp	 SHORT $LN127@draw_large
$LN126@draw_large:

; 8128 : 						draw_2d_mono_sprite(stinger_missile_data, pylon_x, pylon_y + 0.25, MFD_COLOUR1);

  02979	b8 04 00 00 00	 mov	 eax, 4
  0297e	6b c8 00	 imul	 ecx, eax, 0
  02981	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02987	52		 push	 edx
  02988	f3 0f 5a 85 50
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$19[ebp]
  02990	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  02998	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0299c	51		 push	 ecx
  0299d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029a2	51		 push	 ecx
  029a3	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$20[ebp]
  029ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029b0	68 00 00 00 00	 push	 OFFSET ?stinger_missile_data@@3PADA
  029b5	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN127@draw_large:

; 8129 : 				}
; 8130 : 
; 8131 : 				if (number >= 1)

  029ba	83 bd 78 ff ff
	ff 01		 cmp	 DWORD PTR _number$[ebp], 1
  029c1	0f 8c 53 01 00
	00		 jl	 $LN130@draw_large

; 8132 : 				{
; 8133 : 					// remove wing
; 8134 : 					get_2d_float_screen_x_coordinate(pylon_x + 0.06, &x1);

  029c7	8d 45 fc	 lea	 eax, DWORD PTR _x1$[ebp]
  029ca	50		 push	 eax
  029cb	f3 0f 5a 85 54
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$20[ebp]
  029d3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3faeb851eb851eb8
  029db	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  029df	51		 push	 ecx
  029e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029e5	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 8135 : 					get_2d_float_screen_x_coordinate(pylon_x - 0.06, &x2);

  029ea	8d 45 f8	 lea	 eax, DWORD PTR _x2$[ebp]
  029ed	50		 push	 eax
  029ee	f3 0f 5a 85 54
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$20[ebp]
  029f6	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3faeb851eb851eb8
  029fe	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02a02	51		 push	 ecx
  02a03	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a08	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 8136 : 	
; 8137 : 					//if (missile_y > pylon_y)
; 8138 : 						draw_line(x1, forward_wing, x2, forward_wing, MFD_CLEAR_COLOUR);

  02a0d	b8 04 00 00 00	 mov	 eax, 4
  02a12	6b c8 13	 imul	 ecx, eax, 19
  02a15	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02a1b	52		 push	 edx
  02a1c	51		 push	 ecx
  02a1d	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  02a22	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a27	51		 push	 ecx
  02a28	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  02a2d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a32	51		 push	 ecx
  02a33	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  02a38	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a3d	51		 push	 ecx
  02a3e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02a43	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a48	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8139 : 					//else
; 8140 : 						draw_line(x1, rear_wing, x2, rear_wing, MFD_CLEAR_COLOUR);

  02a4d	b8 04 00 00 00	 mov	 eax, 4
  02a52	6b c8 13	 imul	 ecx, eax, 19
  02a55	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02a5b	52		 push	 edx
  02a5c	51		 push	 ecx
  02a5d	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  02a62	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a67	51		 push	 ecx
  02a68	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  02a6d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a72	51		 push	 ecx
  02a73	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  02a78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a7d	51		 push	 ecx
  02a7e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02a83	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a88	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8141 : 
; 8142 : 					// draw missile
; 8143 : 					if (selected)

  02a8d	83 bd 34 ff ff
	ff 00		 cmp	 DWORD PTR _selected$12[ebp], 0
  02a94	74 43		 je	 SHORT $LN129@draw_large

; 8144 : 						draw_2d_mono_sprite(inverted_stinger_missile_data, pylon_x, pylon_y - 0.05, MFD_COLOUR1);

  02a96	b8 04 00 00 00	 mov	 eax, 4
  02a9b	6b c8 00	 imul	 ecx, eax, 0
  02a9e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02aa4	52		 push	 edx
  02aa5	f3 0f 5a 85 50
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$19[ebp]
  02aad	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  02ab5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02ab9	51		 push	 ecx
  02aba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02abf	51		 push	 ecx
  02ac0	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$20[ebp]
  02ac8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02acd	68 00 00 00 00	 push	 OFFSET ?inverted_stinger_missile_data@@3PADA
  02ad2	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 8145 : 					else

  02ad7	eb 41		 jmp	 SHORT $LN130@draw_large
$LN129@draw_large:

; 8146 : 						draw_2d_mono_sprite(stinger_missile_data, pylon_x, pylon_y - 0.05, MFD_COLOUR1);

  02ad9	b8 04 00 00 00	 mov	 eax, 4
  02ade	6b c8 00	 imul	 ecx, eax, 0
  02ae1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02ae7	52		 push	 edx
  02ae8	f3 0f 5a 85 50
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$19[ebp]
  02af0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  02af8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02afc	51		 push	 ecx
  02afd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b02	51		 push	 ecx
  02b03	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$20[ebp]
  02b0b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b10	68 00 00 00 00	 push	 OFFSET ?stinger_missile_data@@3PADA
  02b15	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN130@draw_large:

; 8147 : 				}
; 8148 : 
; 8149 : 			break;

  02b1a	e9 ac 03 00 00	 jmp	 $LN36@draw_large
$LN131@draw_large:

; 8150 : 			}
; 8151 : 			default:
; 8152 : 			{
; 8153 : 				int selected = (weapon_sub_type == selected_weapon) && !damaged;

  02b1f	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  02b25	3b 85 70 ff ff
	ff		 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  02b2b	75 15		 jne	 SHORT $LN189@draw_large
  02b2d	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  02b34	75 0c		 jne	 SHORT $LN189@draw_large
  02b36	c7 85 c4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1313[ebp], 1
  02b40	eb 0a		 jmp	 SHORT $LN190@draw_large
$LN189@draw_large:
  02b42	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1313[ebp], 0
$LN190@draw_large:
  02b4c	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR tv1313[ebp]
  02b52	89 8d 30 ff ff
	ff		 mov	 DWORD PTR _selected$11[ebp], ecx

; 8154 : 				// Left or right wingtip
; 8155 : 				int left_tip = pylon == APACHE_LHS_WING_TIP_MOUNT;

  02b58	83 bd 6c ff ff
	ff 04		 cmp	 DWORD PTR _pylon$[ebp], 4
  02b5f	75 0c		 jne	 SHORT $LN191@draw_large
  02b61	c7 85 c4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1315[ebp], 1
  02b6b	eb 0a		 jmp	 SHORT $LN192@draw_large
$LN191@draw_large:
  02b6d	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1315[ebp], 0
$LN192@draw_large:
  02b77	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR tv1315[ebp]
  02b7d	89 85 2c ff ff
	ff		 mov	 DWORD PTR _left_tip$10[ebp], eax

; 8156 : 				float tip;
; 8157 : 
; 8158 : 				if (number == 2)

  02b83	83 bd 78 ff ff
	ff 02		 cmp	 DWORD PTR _number$[ebp], 2
  02b8a	0f 85 97 01 00
	00		 jne	 $LN136@draw_large

; 8159 : 				{
; 8160 : 					// remove wing drawing
; 8161 : 					if (left_tip)

  02b90	83 bd 2c ff ff
	ff 00		 cmp	 DWORD PTR _left_tip$10[ebp], 0
  02b97	74 3d		 je	 SHORT $LN133@draw_large

; 8162 : 					{
; 8163 : 						tip = wing_tip_left;

  02b99	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _wing_tip_left$[ebp]
  02b9e	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _tip$9[ebp], xmm0

; 8164 : 						get_2d_float_screen_x_coordinate(-0.93, &x1);

  02ba6	8d 45 fc	 lea	 eax, DWORD PTR _x1$[ebp]
  02ba9	50		 push	 eax
  02baa	51		 push	 ecx
  02bab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6e147b
  02bb3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02bb8	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 8165 : 						get_2d_float_screen_y_coordinate(-0.22, &y1);

  02bbd	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  02bc0	50		 push	 eax
  02bc1	51		 push	 ecx
  02bc2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be6147ae
  02bca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02bcf	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8166 : 					}
; 8167 : 					else

  02bd4	eb 3b		 jmp	 SHORT $LN134@draw_large
$LN133@draw_large:

; 8168 : 					{
; 8169 : 						tip = wing_tip_right;

  02bd6	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _wing_tip_right$[ebp]
  02bdb	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _tip$9[ebp], xmm0

; 8170 : 						get_2d_float_screen_x_coordinate(0.93, &x1);

  02be3	8d 45 fc	 lea	 eax, DWORD PTR _x1$[ebp]
  02be6	50		 push	 eax
  02be7	51		 push	 ecx
  02be8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  02bf0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02bf5	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 8171 : 						get_2d_float_screen_y_coordinate(-0.22, &y1);

  02bfa	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  02bfd	50		 push	 eax
  02bfe	51		 push	 ecx
  02bff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be6147ae
  02c07	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c0c	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate
$LN134@draw_large:

; 8172 : 					}
; 8173 : 					draw_line(x1, forward_wing, tip, forward_wing, MFD_CLEAR_COLOUR);

  02c11	b8 04 00 00 00	 mov	 eax, 4
  02c16	6b c8 13	 imul	 ecx, eax, 19
  02c19	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02c1f	52		 push	 edx
  02c20	51		 push	 ecx
  02c21	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  02c26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c2b	51		 push	 ecx
  02c2c	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _tip$9[ebp]
  02c34	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c39	51		 push	 ecx
  02c3a	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  02c3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c44	51		 push	 ecx
  02c45	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02c4a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c4f	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8174 : 					draw_line(tip, forward_wing, tip, y1, MFD_CLEAR_COLOUR);

  02c54	b8 04 00 00 00	 mov	 eax, 4
  02c59	6b c8 13	 imul	 ecx, eax, 19
  02c5c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02c62	52		 push	 edx
  02c63	51		 push	 ecx
  02c64	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02c69	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c6e	51		 push	 ecx
  02c6f	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _tip$9[ebp]
  02c77	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c7c	51		 push	 ecx
  02c7d	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  02c82	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c87	51		 push	 ecx
  02c88	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _tip$9[ebp]
  02c90	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c95	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8175 : 
; 8176 : 					// draw missile
; 8177 : 					if (selected)

  02c9a	83 bd 30 ff ff
	ff 00		 cmp	 DWORD PTR _selected$11[ebp], 0
  02ca1	74 43		 je	 SHORT $LN135@draw_large

; 8178 : 						draw_2d_mono_sprite(inverted_stinger_missile_data, pylon_x, pylon_y + 0.25, MFD_COLOUR1);

  02ca3	b8 04 00 00 00	 mov	 eax, 4
  02ca8	6b c8 00	 imul	 ecx, eax, 0
  02cab	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02cb1	52		 push	 edx
  02cb2	f3 0f 5a 85 50
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$19[ebp]
  02cba	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  02cc2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02cc6	51		 push	 ecx
  02cc7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ccc	51		 push	 ecx
  02ccd	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$20[ebp]
  02cd5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02cda	68 00 00 00 00	 push	 OFFSET ?inverted_stinger_missile_data@@3PADA
  02cdf	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 8179 : 					else

  02ce4	eb 41		 jmp	 SHORT $LN136@draw_large
$LN135@draw_large:

; 8180 : 						draw_2d_mono_sprite(stinger_missile_data, pylon_x, pylon_y + 0.25, MFD_COLOUR1);

  02ce6	b8 04 00 00 00	 mov	 eax, 4
  02ceb	6b c8 00	 imul	 ecx, eax, 0
  02cee	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02cf4	52		 push	 edx
  02cf5	f3 0f 5a 85 50
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$19[ebp]
  02cfd	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  02d05	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02d09	51		 push	 ecx
  02d0a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d0f	51		 push	 ecx
  02d10	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$20[ebp]
  02d18	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d1d	68 00 00 00 00	 push	 OFFSET ?stinger_missile_data@@3PADA
  02d22	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN136@draw_large:

; 8181 : 				}
; 8182 : 
; 8183 : 				if (number >= 1)

  02d27	83 bd 78 ff ff
	ff 01		 cmp	 DWORD PTR _number$[ebp], 1
  02d2e	0f 8c 97 01 00
	00		 jl	 $LN141@draw_large

; 8184 : 				{
; 8185 : 					// remove wing drawing
; 8186 : 					if (left_tip)

  02d34	83 bd 2c ff ff
	ff 00		 cmp	 DWORD PTR _left_tip$10[ebp], 0
  02d3b	74 3d		 je	 SHORT $LN138@draw_large

; 8187 : 					{
; 8188 : 						tip = wing_tip_left;

  02d3d	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _wing_tip_left$[ebp]
  02d42	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _tip$9[ebp], xmm0

; 8189 : 						get_2d_float_screen_x_coordinate(-0.91, &x1);

  02d4a	8d 45 fc	 lea	 eax, DWORD PTR _x1$[ebp]
  02d4d	50		 push	 eax
  02d4e	51		 push	 ecx
  02d4f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf68f5c3
  02d57	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d5c	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 8190 : 						get_2d_float_screen_y_coordinate(-0.27, &y1);

  02d61	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  02d64	50		 push	 eax
  02d65	51		 push	 ecx
  02d66	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8a3d71
  02d6e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d73	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8191 : 					}
; 8192 : 					else

  02d78	eb 3b		 jmp	 SHORT $LN139@draw_large
$LN138@draw_large:

; 8193 : 					{
; 8194 : 						tip = wing_tip_right;

  02d7a	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _wing_tip_right$[ebp]
  02d7f	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _tip$9[ebp], xmm0

; 8195 : 						get_2d_float_screen_x_coordinate(0.91, &x1);

  02d87	8d 45 fc	 lea	 eax, DWORD PTR _x1$[ebp]
  02d8a	50		 push	 eax
  02d8b	51		 push	 ecx
  02d8c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  02d94	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d99	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 8196 : 						get_2d_float_screen_y_coordinate(-0.27, &y1);

  02d9e	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  02da1	50		 push	 eax
  02da2	51		 push	 ecx
  02da3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8a3d71
  02dab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02db0	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate
$LN139@draw_large:

; 8197 : 					}
; 8198 : 					draw_line(x1, rear_wing, tip, rear_wing, MFD_CLEAR_COLOUR);

  02db5	b8 04 00 00 00	 mov	 eax, 4
  02dba	6b c8 13	 imul	 ecx, eax, 19
  02dbd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02dc3	52		 push	 edx
  02dc4	51		 push	 ecx
  02dc5	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  02dca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02dcf	51		 push	 ecx
  02dd0	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _tip$9[ebp]
  02dd8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ddd	51		 push	 ecx
  02dde	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  02de3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02de8	51		 push	 ecx
  02de9	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02dee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02df3	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8199 : 					draw_line(tip, rear_wing, tip, y1, MFD_CLEAR_COLOUR);

  02df8	b8 04 00 00 00	 mov	 eax, 4
  02dfd	6b c8 13	 imul	 ecx, eax, 19
  02e00	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02e06	52		 push	 edx
  02e07	51		 push	 ecx
  02e08	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02e0d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e12	51		 push	 ecx
  02e13	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _tip$9[ebp]
  02e1b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e20	51		 push	 ecx
  02e21	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  02e26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e2b	51		 push	 ecx
  02e2c	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _tip$9[ebp]
  02e34	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e39	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8200 : 
; 8201 : 					// draw missile
; 8202 : 					if (selected)

  02e3e	83 bd 30 ff ff
	ff 00		 cmp	 DWORD PTR _selected$11[ebp], 0
  02e45	74 43		 je	 SHORT $LN140@draw_large

; 8203 : 						draw_2d_mono_sprite(inverted_stinger_missile_data, pylon_x, pylon_y - 0.05, MFD_COLOUR1);

  02e47	b8 04 00 00 00	 mov	 eax, 4
  02e4c	6b c8 00	 imul	 ecx, eax, 0
  02e4f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02e55	52		 push	 edx
  02e56	f3 0f 5a 85 50
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$19[ebp]
  02e5e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  02e66	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02e6a	51		 push	 ecx
  02e6b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e70	51		 push	 ecx
  02e71	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$20[ebp]
  02e79	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e7e	68 00 00 00 00	 push	 OFFSET ?inverted_stinger_missile_data@@3PADA
  02e83	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 8204 : 					else

  02e88	eb 41		 jmp	 SHORT $LN141@draw_large
$LN140@draw_large:

; 8205 : 						draw_2d_mono_sprite(stinger_missile_data, pylon_x, pylon_y - 0.05, MFD_COLOUR1);

  02e8a	b8 04 00 00 00	 mov	 eax, 4
  02e8f	6b c8 00	 imul	 ecx, eax, 0
  02e92	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02e98	52		 push	 edx
  02e99	f3 0f 5a 85 50
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$19[ebp]
  02ea1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  02ea9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02ead	51		 push	 ecx
  02eae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02eb3	51		 push	 ecx
  02eb4	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$20[ebp]
  02ebc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ec1	68 00 00 00 00	 push	 OFFSET ?stinger_missile_data@@3PADA
  02ec6	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN141@draw_large:
$LN36@draw_large:
$LN29@draw_large:

; 8206 : 				}
; 8207 : 			}
; 8208 : 
; 8209 : 
; 8210 : 			}
; 8211 : 
; 8212 : 				break;
; 8213 : 			}
; 8214 : 			}
; 8215 : 
; 8216 : 
; 8217 : 			// if damaged, draw X across pylon
; 8218 : 			if (damaged)

  02ecb	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  02ed2	0f 84 7c 02 00
	00		 je	 $LN142@draw_large

; 8219 : 			{
; 8220 : 				float width, height = 0.7, x1, y1, x2, y2, y_offset = 0.0;

  02ed8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  02ee0	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _height$7[ebp], xmm0
  02ee8	0f 57 c0	 xorps	 xmm0, xmm0
  02eeb	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_offset$2[ebp], xmm0

; 8221 : 				
; 8222 : 		switch (get_local_entity_int_value (get_gunship_entity (), INT_TYPE_ENTITY_SUB_TYPE))

  02ef3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  02efa	74 0f		 je	 SHORT $LN193@draw_large
  02efc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  02f01	8b 08		 mov	 ecx, DWORD PTR [eax]
  02f03	89 8d c4 fe ff
	ff		 mov	 DWORD PTR tv1412[ebp], ecx
  02f09	eb 20		 jmp	 SHORT $LN194@draw_large
$LN193@draw_large:
  02f0b	68 1e 20 00 00	 push	 8222			; 0000201eH
  02f10	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  02f15	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02f1b	52		 push	 edx
  02f1c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02f21	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1412[ebp], 0
$LN194@draw_large:
  02f2b	b8 01 00 00 00	 mov	 eax, 1
  02f30	85 c0		 test	 eax, eax
  02f32	74 0c		 je	 SHORT $LN195@draw_large
  02f34	c7 85 c0 fe ff
	ff 34 00 00 00	 mov	 DWORD PTR tv1419[ebp], 52 ; 00000034H
  02f3e	eb 20		 jmp	 SHORT $LN196@draw_large
$LN195@draw_large:
  02f40	68 1e 20 00 00	 push	 8222			; 0000201eH
  02f45	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  02f4a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  02f50	51		 push	 ecx
  02f51	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02f56	c7 85 c0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1419[ebp], 0
$LN196@draw_large:
  02f60	6a 34		 push	 52			; 00000034H
  02f62	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  02f68	52		 push	 edx
  02f69	69 85 c4 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1412[ebp], 1116
  02f73	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR tv1419[ebp]
  02f79	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  02f80	ff d2		 call	 edx
  02f82	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv1425[ebp], eax
  02f88	83 bd bc fe ff
	ff 18		 cmp	 DWORD PTR tv1425[ebp], 24 ; 00000018H
  02f8f	7c 1d		 jl	 SHORT $LN144@draw_large
  02f91	83 bd bc fe ff
	ff 19		 cmp	 DWORD PTR tv1425[ebp], 25 ; 00000019H
  02f98	7e 02		 jle	 SHORT $LN143@draw_large
  02f9a	eb 12		 jmp	 SHORT $LN144@draw_large
$LN143@draw_large:

; 8223 : 		{
; 8224 : 			case ENTITY_SUB_TYPE_AIRCRAFT_AH1T_SEACOBRA:
; 8225 : 			case ENTITY_SUB_TYPE_AIRCRAFT_AH1W_SUPERCOBRA:
; 8226 : 			{
; 8227 : 				width = 0.25;

  02f9c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  02fa4	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$8[ebp], xmm0

; 8228 : 				break;

  02fac	eb 44		 jmp	 SHORT $LN38@draw_large
$LN144@draw_large:

; 8229 : 			}
; 8230 : 			default:
; 8231 : 			{
; 8232 : 
; 8233 : 				if (pylon == APACHE_LHS_WING_TIP_MOUNT || pylon == APACHE_RHS_WING_TIP_MOUNT)

  02fae	83 bd 6c ff ff
	ff 04		 cmp	 DWORD PTR _pylon$[ebp], 4
  02fb5	74 09		 je	 SHORT $LN147@draw_large
  02fb7	83 bd 6c ff ff
	ff 05		 cmp	 DWORD PTR _pylon$[ebp], 5
  02fbe	75 22		 jne	 SHORT $LN145@draw_large
$LN147@draw_large:

; 8234 : 				{
; 8235 : 					// stingers are narrower and drawn more forward than other pylons
; 8236 : 					y_offset = 0.1;

  02fc0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  02fc8	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _y_offset$2[ebp], xmm0

; 8237 : 					width = 0.125;

  02fd0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  02fd8	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$8[ebp], xmm0

; 8238 : 				}
; 8239 : 				else

  02fe0	eb 10		 jmp	 SHORT $LN146@draw_large
$LN145@draw_large:

; 8240 : 					width = 0.25;

  02fe2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  02fea	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _width$8[ebp], xmm0
$LN146@draw_large:
$LN38@draw_large:

; 8241 : 
; 8242 : 			}
; 8243 : 		}
; 8244 : 				get_2d_float_screen_coordinates(pylon_x - 0.5 * width, pylon_y - 0.5 * height, &x1, &y1);

  02ff2	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _y1$5[ebp]
  02ff8	50		 push	 eax
  02ff9	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR _x1$6[ebp]
  02fff	51		 push	 ecx
  03000	f3 0f 5a 85 50
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$19[ebp]
  03008	f3 0f 5a 8d 20
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _height$7[ebp]
  03010	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  03018	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0301c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03020	51		 push	 ecx
  03021	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03026	f3 0f 5a 85 54
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$20[ebp]
  0302e	f3 0f 5a 8d 24
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _width$8[ebp]
  03036	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0303e	f2 0f 5c c1	 subsd	 xmm0, xmm1
  03042	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03046	51		 push	 ecx
  03047	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0304c	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 8245 : 				get_2d_float_screen_coordinates(pylon_x + 0.5 * width, pylon_y + y_offset + 0.5 * height, &x2, &y2);

  03051	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _y2$3[ebp]
  03057	50		 push	 eax
  03058	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _x2$4[ebp]
  0305e	51		 push	 ecx
  0305f	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_y$19[ebp]
  03067	f3 0f 58 85 0c
	ff ff ff	 addss	 xmm0, DWORD PTR _y_offset$2[ebp]
  0306f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  03073	f3 0f 5a 8d 20
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _height$7[ebp]
  0307b	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  03083	f2 0f 58 c1	 addsd	 xmm0, xmm1
  03087	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0308b	51		 push	 ecx
  0308c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03091	f3 0f 5a 85 54
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$20[ebp]
  03099	f3 0f 5a 8d 24
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _width$8[ebp]
  030a1	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  030a9	f2 0f 58 c1	 addsd	 xmm0, xmm1
  030ad	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  030b1	51		 push	 ecx
  030b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  030b7	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 8246 : 				
; 8247 : 				draw_half_thick_line(x1, y1, x2, y2, MFD_COLOUR1);

  030bc	b8 04 00 00 00	 mov	 eax, 4
  030c1	6b c8 00	 imul	 ecx, eax, 0
  030c4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  030ca	52		 push	 edx
  030cb	51		 push	 ecx
  030cc	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _y2$3[ebp]
  030d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  030d9	51		 push	 ecx
  030da	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _x2$4[ebp]
  030e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  030e7	51		 push	 ecx
  030e8	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _y1$5[ebp]
  030f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  030f5	51		 push	 ecx
  030f6	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _x1$6[ebp]
  030fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03103	e8 00 00 00 00	 call	 ?draw_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_half_thick_line

; 8248 : 				draw_half_thick_line(x1, y2, x2, y1, MFD_COLOUR1);

  03108	b8 04 00 00 00	 mov	 eax, 4
  0310d	6b c8 00	 imul	 ecx, eax, 0
  03110	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03116	52		 push	 edx
  03117	51		 push	 ecx
  03118	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _y1$5[ebp]
  03120	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03125	51		 push	 ecx
  03126	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _x2$4[ebp]
  0312e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03133	51		 push	 ecx
  03134	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _y2$3[ebp]
  0313c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03141	51		 push	 ecx
  03142	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _x1$6[ebp]
  0314a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0314f	e8 00 00 00 00	 call	 ?draw_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_half_thick_line
$LN142@draw_large:

; 8249 : 			}
; 8250 : 		}
; 8251 : 	}

  03154	e9 5b eb ff ff	 jmp	 $LN20@draw_large
$LN21@draw_large:

; 8252 : }

  03159	5f		 pop	 edi
  0315a	5e		 pop	 esi
  0315b	5b		 pop	 ebx
  0315c	8b e5		 mov	 esp, ebp
  0315e	5d		 pop	 ebp
  0315f	c2 04 00	 ret	 4
  03162	66 90		 npad	 2
$LN201@draw_large:
  03164	00 00 00 00	 DD	 $LN41@draw_large
  03168	00 00 00 00	 DD	 $LN42@draw_large
$LN197@draw_large:
  0316c	00		 DB	 0
  0316d	00		 DB	 0
  0316e	00		 DB	 0
  0316f	00		 DB	 0
  03170	00		 DB	 0
  03171	00		 DB	 0
  03172	01		 DB	 1
  03173	01		 DB	 1
  03174	01		 DB	 1
  03175	01		 DB	 1
  03176	01		 DB	 1
  03177	01		 DB	 1
  03178	01		 DB	 1
  03179	01		 DB	 1
  0317a	01		 DB	 1
  0317b	01		 DB	 1
  0317c	01		 DB	 1
  0317d	00		 DB	 0
  0317e	01		 DB	 1
  0317f	01		 DB	 1
  03180	00		 DB	 0
  03181	0f 1f 00	 npad	 3
$LN202@draw_large:
  03184	00 00 00 00	 DD	 $LN52@draw_large
  03188	00 00 00 00	 DD	 $LN54@draw_large
  0318c	00 00 00 00	 DD	 $LN53@draw_large
  03190	00 00 00 00	 DD	 $LN55@draw_large
$LN198@draw_large:
  03194	00		 DB	 0
  03195	03		 DB	 3
  03196	01		 DB	 1
  03197	03		 DB	 3
  03198	03		 DB	 3
  03199	03		 DB	 3
  0319a	03		 DB	 3
  0319b	03		 DB	 3
  0319c	03		 DB	 3
  0319d	03		 DB	 3
  0319e	03		 DB	 3
  0319f	03		 DB	 3
  031a0	03		 DB	 3
  031a1	03		 DB	 3
  031a2	03		 DB	 3
  031a3	03		 DB	 3
  031a4	03		 DB	 3
  031a5	02		 DB	 2
  031a6	02		 DB	 2
  031a7	90		 npad	 1
$LN203@draw_large:
  031a8	00 00 00 00	 DD	 $LN63@draw_large
  031ac	00 00 00 00	 DD	 $LN60@draw_large
  031b0	00 00 00 00	 DD	 $LN62@draw_large
  031b4	00 00 00 00	 DD	 $LN61@draw_large
  031b8	00 00 00 00	 DD	 $LN64@draw_large
$LN199@draw_large:
  031bc	00		 DB	 0
  031bd	01		 DB	 1
  031be	04		 DB	 4
  031bf	02		 DB	 2
  031c0	00		 DB	 0
  031c1	04		 DB	 4
  031c2	04		 DB	 4
  031c3	04		 DB	 4
  031c4	04		 DB	 4
  031c5	04		 DB	 4
  031c6	04		 DB	 4
  031c7	04		 DB	 4
  031c8	04		 DB	 4
  031c9	04		 DB	 4
  031ca	04		 DB	 4
  031cb	04		 DB	 4
  031cc	04		 DB	 4
  031cd	04		 DB	 4
  031ce	03		 DB	 3
  031cf	03		 DB	 3
$LN204@draw_large:
  031d0	00 00 00 00	 DD	 $LN71@draw_large
  031d4	00 00 00 00	 DD	 $LN71@draw_large
  031d8	00 00 00 00	 DD	 $LN72@draw_large
  031dc	00 00 00 00	 DD	 $LN72@draw_large
  031e0	00 00 00 00	 DD	 $LN72@draw_large
  031e4	00 00 00 00	 DD	 $LN74@draw_large
  031e8	00 00 00 00	 DD	 $LN74@draw_large
  031ec	00 00 00 00	 DD	 $LN73@draw_large
$LN205@draw_large:
  031f0	00 00 00 00	 DD	 $LN85@draw_large
  031f4	00 00 00 00	 DD	 $LN86@draw_large
  031f8	00 00 00 00	 DD	 $LN87@draw_large
  031fc	00 00 00 00	 DD	 $LN88@draw_large
$LN206@draw_large:
  03200	00 00 00 00	 DD	 $LN90@draw_large
  03204	00 00 00 00	 DD	 $LN91@draw_large
  03208	00 00 00 00	 DD	 $LN92@draw_large
  0320c	00 00 00 00	 DD	 $LN93@draw_large
  03210	00 00 00 00	 DD	 $LN94@draw_large
  03214	00 00 00 00	 DD	 $LN95@draw_large
$LN207@draw_large:
  03218	00 00 00 00	 DD	 $LN113@draw_large
  0321c	00 00 00 00	 DD	 $LN123@draw_large
  03220	00 00 00 00	 DD	 $LN97@draw_large
  03224	00 00 00 00	 DD	 $LN29@draw_large
$LN200@draw_large:
  03228	00		 DB	 0
  03229	00		 DB	 0
  0322a	03		 DB	 3
  0322b	00		 DB	 0
  0322c	00		 DB	 0
  0322d	03		 DB	 3
  0322e	01		 DB	 1
  0322f	01		 DB	 1
  03230	03		 DB	 3
  03231	03		 DB	 3
  03232	03		 DB	 3
  03233	03		 DB	 3
  03234	03		 DB	 3
  03235	03		 DB	 3
  03236	03		 DB	 3
  03237	02		 DB	 2
  03238	02		 DB	 2
  03239	0f 1f 00	 npad	 3
$LN208@draw_large:
  0323c	00 00 00 00	 DD	 $LN101@draw_large
  03240	00 00 00 00	 DD	 $LN102@draw_large
  03244	00 00 00 00	 DD	 $LN103@draw_large
  03248	00 00 00 00	 DD	 $LN104@draw_large
?draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z ENDP ; draw_large_weapon_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_weapon_hardpoint_info@@YGXHHH@Z
_TEXT	SEGMENT
tv1577 = -176						; size = 4
tv1457 = -176						; size = 4
tv1442 = -176						; size = 4
tv1322 = -176						; size = 4
tv1288 = -176						; size = 4
tv1262 = -176						; size = 4
tv963 = -176						; size = 4
tv947 = -176						; size = 4
tv916 = -176						; size = 4
tv890 = -176						; size = 4
tv591 = -176						; size = 4
tv575 = -176						; size = 4
tv541 = -176						; size = 4
tv515 = -176						; size = 4
tv443 = -176						; size = 4
tv412 = -176						; size = 4
tv386 = -176						; size = 4
tv314 = -176						; size = 4
_weapon_sub_type$ = -108				; size = 4
_v$ = -104						; size = 4
_u$ = -100						; size = 4
_hardpoint_y$ = -96					; size = 4
_hardpoint_x$ = -92					; size = 4
_damaged$ = -88						; size = 4
_number$ = -84						; size = 4
_buffer$ = -80						; size = 80
_heading_depth$ = 8					; size = 4
_given_weapon$ = 12					; size = 4
_selected_weapon$ = 16					; size = 4
?draw_weapon_hardpoint_info@@YGXHHH@Z PROC		; draw_weapon_hardpoint_info, COMDAT

; 5491 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 5492 : 	char
; 5493 : 		buffer[80];
; 5494 : 
; 5495 : 	int
; 5496 : 		number,
; 5497 : 		damaged,
; 5498 : 		hardpoint_x,
; 5499 : 		hardpoint_y,
; 5500 : 		u,
; 5501 : 		v;
; 5502 : 
; 5503 : 	entity_sub_types
; 5504 : 		weapon_sub_type;
; 5505 : 
; 5506 : 	if (!get_local_entity_weapon_hardpoint_info (get_gunship_entity (), heading_depth, given_weapon, &weapon_sub_type, &number, &damaged))

  0000c	8d 45 a8	 lea	 eax, DWORD PTR _damaged$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d ac	 lea	 ecx, DWORD PTR _number$[ebp]
  00013	51		 push	 ecx
  00014	8d 55 94	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00017	52		 push	 edx
  00018	8b 45 0c	 mov	 eax, DWORD PTR _given_weapon$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _heading_depth$[ebp]
  0001f	51		 push	 ecx
  00020	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00026	52		 push	 edx
  00027	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  0002c	85 c0		 test	 eax, eax
  0002e	75 05		 jne	 SHORT $LN38@draw_weapo

; 5507 : 	{
; 5508 : 		return;

  00030	e9 18 24 00 00	 jmp	 $LN1@draw_weapo
$LN38@draw_weapo:

; 5509 : 	}
; 5510 : 
; 5511 : 	if (draw_large_mfd)

  00035	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0003c	74 05		 je	 SHORT $LN39@draw_weapo

; 5512 : 		return;

  0003e	e9 0a 24 00 00	 jmp	 $LN1@draw_weapo
$LN39@draw_weapo:

; 5513 : 
; 5514 : 	////////////////////////////////////////////////////////////////////////////////
; 5515 : 	//
; 5516 : 	// Chain Gun
; 5517 : 	//
; 5518 : 	////////////////////////////////////////////////////////////////////////////////
; 5519 : 
; 5520 : 	if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_M230_30MM_ROUND)

  00043	83 7d 94 07	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 7
  00047	0f 85 43 04 00
	00		 jne	 $LN40@draw_weapo

; 5521 : 	{
; 5522 : 		if (draw_large_mfd)

  0004d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00054	0f 84 1c 02 00
	00		 je	 $LN41@draw_weapo

; 5523 : 		{
; 5524 : 			////////////////////////////////////////
; 5525 : 			//
; 5526 : 			// LARGE
; 5527 : 			//
; 5528 : 			////////////////////////////////////////
; 5529 : 
; 5530 : 			//
; 5531 : 			// chain gun
; 5532 : 			//
; 5533 : 
; 5534 : 			if (number == 0)

  0005a	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  0005e	75 2a		 jne	 SHORT $LN43@draw_weapo

; 5535 : 			{
; 5536 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  00060	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00063	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00066	75 20		 jne	 SHORT $LN45@draw_weapo
  00068	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0006c	75 1a		 jne	 SHORT $LN45@draw_weapo

; 5537 : 				{
; 5538 : 					draw_sprite (118, 200, 262, 134, 28, 27);

  0006e	6a 1b		 push	 27			; 0000001bH
  00070	6a 1c		 push	 28			; 0000001cH
  00072	68 86 00 00 00	 push	 134			; 00000086H
  00077	68 06 01 00 00	 push	 262			; 00000106H
  0007c	68 c8 00 00 00	 push	 200			; 000000c8H
  00081	6a 76		 push	 118			; 00000076H
  00083	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN45@draw_weapo:

; 5539 : 				}
; 5540 : 			}
; 5541 : 			else

  00088	eb 44		 jmp	 SHORT $LN44@draw_weapo
$LN43@draw_weapo:

; 5542 : 			{
; 5543 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  0008a	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0008d	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00090	75 22		 jne	 SHORT $LN46@draw_weapo
  00092	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00096	75 1c		 jne	 SHORT $LN46@draw_weapo

; 5544 : 				{
; 5545 : 					draw_sprite (118, 200, 292, 134, 28, 27);

  00098	6a 1b		 push	 27			; 0000001bH
  0009a	6a 1c		 push	 28			; 0000001cH
  0009c	68 86 00 00 00	 push	 134			; 00000086H
  000a1	68 24 01 00 00	 push	 292			; 00000124H
  000a6	68 c8 00 00 00	 push	 200			; 000000c8H
  000ab	6a 76		 push	 118			; 00000076H
  000ad	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5546 : 				}
; 5547 : 				else

  000b2	eb 1a		 jmp	 SHORT $LN44@draw_weapo
$LN46@draw_weapo:

; 5548 : 				{
; 5549 : 					draw_sprite (118, 200, 322, 134, 27, 27);

  000b4	6a 1b		 push	 27			; 0000001bH
  000b6	6a 1b		 push	 27			; 0000001bH
  000b8	68 86 00 00 00	 push	 134			; 00000086H
  000bd	68 42 01 00 00	 push	 322			; 00000142H
  000c2	68 c8 00 00 00	 push	 200			; 000000c8H
  000c7	6a 76		 push	 118			; 00000076H
  000c9	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN44@draw_weapo:

; 5550 : 				}
; 5551 : 			}
; 5552 : 
; 5553 : 			//
; 5554 : 			// digits
; 5555 : 			//
; 5556 : 
; 5557 : 			hardpoint_x = 115;

  000ce	c7 45 a4 73 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 115 ; 00000073H

; 5558 : 			hardpoint_y = 234;

  000d5	c7 45 a0 ea 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 234 ; 000000eaH

; 5559 : 
; 5560 : 			sprintf (buffer, "%04d", number);

  000dc	8b 45 ac	 mov	 eax, DWORD PTR _number$[ebp]
  000df	50		 push	 eax
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_04OCCELDNI@?$CF04d@
  000e5	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 _sprintf
  000ee	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5561 : 
; 5562 : 			if ((weapon_sub_type == selected_weapon) && (!damaged))

  000f1	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  000f4	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  000f7	75 0f		 jne	 SHORT $LN48@draw_weapo
  000f9	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  000fd	75 09		 jne	 SHORT $LN48@draw_weapo

; 5563 : 			{
; 5564 : 				v = 32;

  000ff	c7 45 98 20 00
	00 00		 mov	 DWORD PTR _v$[ebp], 32	; 00000020H

; 5565 : 			}
; 5566 : 			else

  00106	eb 07		 jmp	 SHORT $LN49@draw_weapo
$LN48@draw_weapo:

; 5567 : 			{
; 5568 : 				v = 47;

  00108	c7 45 98 2f 00
	00 00		 mov	 DWORD PTR _v$[ebp], 47	; 0000002fH
$LN49@draw_weapo:

; 5569 : 			}
; 5570 : 
; 5571 : 			if (buffer[0] == '0')

  0010f	b8 01 00 00 00	 mov	 eax, 1
  00114	6b c8 00	 imul	 ecx, eax, 0
  00117	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  0011c	83 fa 30	 cmp	 edx, 48			; 00000030H
  0011f	75 09		 jne	 SHORT $LN50@draw_weapo

; 5572 : 			{
; 5573 : 				u = 364 + (9 * 10);

  00121	c7 45 9c c6 01
	00 00		 mov	 DWORD PTR _u$[ebp], 454	; 000001c6H

; 5574 : 			}
; 5575 : 			else

  00128	eb 1b		 jmp	 SHORT $LN51@draw_weapo
$LN50@draw_weapo:

; 5576 : 			{
; 5577 : 				u = 364 + ((buffer[0] - '1') * 10);

  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	6b c8 00	 imul	 ecx, eax, 0
  00132	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  00137	83 ea 31	 sub	 edx, 49			; 00000031H
  0013a	6b c2 0a	 imul	 eax, edx, 10
  0013d	05 6c 01 00 00	 add	 eax, 364		; 0000016cH
  00142	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN51@draw_weapo:

; 5578 : 			}
; 5579 : 
; 5580 : 			draw_sprite (hardpoint_x, hardpoint_y, u, v, 8, 12);

  00145	6a 0c		 push	 12			; 0000000cH
  00147	6a 08		 push	 8
  00149	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  0014c	50		 push	 eax
  0014d	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  00150	51		 push	 ecx
  00151	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  00154	52		 push	 edx
  00155	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  00158	50		 push	 eax
  00159	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5581 : 
; 5582 : 			if (buffer[1] == '0')

  0015e	b8 01 00 00 00	 mov	 eax, 1
  00163	c1 e0 00	 shl	 eax, 0
  00166	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  0016b	83 f9 30	 cmp	 ecx, 48			; 00000030H
  0016e	75 09		 jne	 SHORT $LN52@draw_weapo

; 5583 : 			{
; 5584 : 				u = 364 + (9 * 10);

  00170	c7 45 9c c6 01
	00 00		 mov	 DWORD PTR _u$[ebp], 454	; 000001c6H

; 5585 : 			}
; 5586 : 			else

  00177	eb 1c		 jmp	 SHORT $LN53@draw_weapo
$LN52@draw_weapo:

; 5587 : 			{
; 5588 : 				u = 364 + ((buffer[1] - '1') * 10);

  00179	b8 01 00 00 00	 mov	 eax, 1
  0017e	c1 e0 00	 shl	 eax, 0
  00181	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  00186	83 e9 31	 sub	 ecx, 49			; 00000031H
  00189	6b d1 0a	 imul	 edx, ecx, 10
  0018c	81 c2 6c 01 00
	00		 add	 edx, 364		; 0000016cH
  00192	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN53@draw_weapo:

; 5589 : 			}
; 5590 : 
; 5591 : 			draw_sprite (hardpoint_x + 9, hardpoint_y, u, v, 8, 12);

  00195	6a 0c		 push	 12			; 0000000cH
  00197	6a 08		 push	 8
  00199	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  0019c	50		 push	 eax
  0019d	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  001a0	51		 push	 ecx
  001a1	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  001a4	52		 push	 edx
  001a5	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  001a8	83 c0 09	 add	 eax, 9
  001ab	50		 push	 eax
  001ac	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5592 : 
; 5593 : 			if (buffer[2] == '0')

  001b1	b8 01 00 00 00	 mov	 eax, 1
  001b6	d1 e0		 shl	 eax, 1
  001b8	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  001bd	83 f9 30	 cmp	 ecx, 48			; 00000030H
  001c0	75 09		 jne	 SHORT $LN54@draw_weapo

; 5594 : 			{
; 5595 : 				u = 364 + (9 * 10);

  001c2	c7 45 9c c6 01
	00 00		 mov	 DWORD PTR _u$[ebp], 454	; 000001c6H

; 5596 : 			}
; 5597 : 			else

  001c9	eb 1b		 jmp	 SHORT $LN55@draw_weapo
$LN54@draw_weapo:

; 5598 : 			{
; 5599 : 				u = 364 + ((buffer[2] - '1') * 10);

  001cb	b8 01 00 00 00	 mov	 eax, 1
  001d0	d1 e0		 shl	 eax, 1
  001d2	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  001d7	83 e9 31	 sub	 ecx, 49			; 00000031H
  001da	6b d1 0a	 imul	 edx, ecx, 10
  001dd	81 c2 6c 01 00
	00		 add	 edx, 364		; 0000016cH
  001e3	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN55@draw_weapo:

; 5600 : 			}
; 5601 : 
; 5602 : 			draw_sprite (hardpoint_x + 18, hardpoint_y, u, v, 8, 12);

  001e6	6a 0c		 push	 12			; 0000000cH
  001e8	6a 08		 push	 8
  001ea	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  001ed	50		 push	 eax
  001ee	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  001f1	51		 push	 ecx
  001f2	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  001f5	52		 push	 edx
  001f6	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  001f9	83 c0 12	 add	 eax, 18			; 00000012H
  001fc	50		 push	 eax
  001fd	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5603 : 
; 5604 : 			if (buffer[3] == '0')

  00202	b8 01 00 00 00	 mov	 eax, 1
  00207	6b c8 03	 imul	 ecx, eax, 3
  0020a	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  0020f	83 fa 30	 cmp	 edx, 48			; 00000030H
  00212	75 09		 jne	 SHORT $LN56@draw_weapo

; 5605 : 			{
; 5606 : 				u = 364 + (9 * 10);

  00214	c7 45 9c c6 01
	00 00		 mov	 DWORD PTR _u$[ebp], 454	; 000001c6H

; 5607 : 			}
; 5608 : 			else

  0021b	eb 1b		 jmp	 SHORT $LN57@draw_weapo
$LN56@draw_weapo:

; 5609 : 			{
; 5610 : 				u = 364 + ((buffer[3] - '1') * 10);

  0021d	b8 01 00 00 00	 mov	 eax, 1
  00222	6b c8 03	 imul	 ecx, eax, 3
  00225	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  0022a	83 ea 31	 sub	 edx, 49			; 00000031H
  0022d	6b c2 0a	 imul	 eax, edx, 10
  00230	05 6c 01 00 00	 add	 eax, 364		; 0000016cH
  00235	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN57@draw_weapo:

; 5611 : 			}
; 5612 : 
; 5613 : 			draw_sprite (hardpoint_x + 27, hardpoint_y, u, v, 8, 12);

  00238	6a 0c		 push	 12			; 0000000cH
  0023a	6a 08		 push	 8
  0023c	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  0023f	50		 push	 eax
  00240	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  00243	51		 push	 ecx
  00244	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  00247	52		 push	 edx
  00248	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  0024b	83 c0 1b	 add	 eax, 27			; 0000001bH
  0024e	50		 push	 eax
  0024f	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5614 : 
; 5615 : 			//
; 5616 : 			// damage cross
; 5617 : 			//
; 5618 : 
; 5619 : 			if (damaged)

  00254	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00258	74 17		 je	 SHORT $LN58@draw_weapo

; 5620 : 			{
; 5621 : 				draw_sprite (116, 203, 334, 61, 32, 32);

  0025a	6a 20		 push	 32			; 00000020H
  0025c	6a 20		 push	 32			; 00000020H
  0025e	6a 3d		 push	 61			; 0000003dH
  00260	68 4e 01 00 00	 push	 334			; 0000014eH
  00265	68 cb 00 00 00	 push	 203			; 000000cbH
  0026a	6a 74		 push	 116			; 00000074H
  0026c	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN58@draw_weapo:

; 5622 : 			}
; 5623 : 		}
; 5624 : 		else

  00271	e9 1a 02 00 00	 jmp	 $LN40@draw_weapo
$LN41@draw_weapo:

; 5625 : 		{
; 5626 : 			////////////////////////////////////////
; 5627 : 			//
; 5628 : 			// SMALL
; 5629 : 			//
; 5630 : 			////////////////////////////////////////
; 5631 : 
; 5632 : 			//
; 5633 : 			// chain gun
; 5634 : 			//
; 5635 : 
; 5636 : 			if (number == 0)

  00276	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  0027a	75 2a		 jne	 SHORT $LN59@draw_weapo

; 5637 : 			{
; 5638 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  0027c	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0027f	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00282	75 20		 jne	 SHORT $LN61@draw_weapo
  00284	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00288	75 1a		 jne	 SHORT $LN61@draw_weapo

; 5639 : 				{
; 5640 : 					draw_sprite (61, 360, 133, 327, 14, 13);

  0028a	6a 0d		 push	 13			; 0000000dH
  0028c	6a 0e		 push	 14			; 0000000eH
  0028e	68 47 01 00 00	 push	 327			; 00000147H
  00293	68 85 00 00 00	 push	 133			; 00000085H
  00298	68 68 01 00 00	 push	 360			; 00000168H
  0029d	6a 3d		 push	 61			; 0000003dH
  0029f	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN61@draw_weapo:

; 5641 : 				}
; 5642 : 			}
; 5643 : 			else

  002a4	eb 44		 jmp	 SHORT $LN60@draw_weapo
$LN59@draw_weapo:

; 5644 : 			{
; 5645 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  002a6	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  002a9	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  002ac	75 22		 jne	 SHORT $LN62@draw_weapo
  002ae	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  002b2	75 1c		 jne	 SHORT $LN62@draw_weapo

; 5646 : 				{
; 5647 : 					draw_sprite (61, 360, 148, 327, 14, 13);

  002b4	6a 0d		 push	 13			; 0000000dH
  002b6	6a 0e		 push	 14			; 0000000eH
  002b8	68 47 01 00 00	 push	 327			; 00000147H
  002bd	68 94 00 00 00	 push	 148			; 00000094H
  002c2	68 68 01 00 00	 push	 360			; 00000168H
  002c7	6a 3d		 push	 61			; 0000003dH
  002c9	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5648 : 				}
; 5649 : 				else

  002ce	eb 1a		 jmp	 SHORT $LN60@draw_weapo
$LN62@draw_weapo:

; 5650 : 				{
; 5651 : 					draw_sprite (61, 360, 163, 327, 13, 13);

  002d0	6a 0d		 push	 13			; 0000000dH
  002d2	6a 0d		 push	 13			; 0000000dH
  002d4	68 47 01 00 00	 push	 327			; 00000147H
  002d9	68 a3 00 00 00	 push	 163			; 000000a3H
  002de	68 68 01 00 00	 push	 360			; 00000168H
  002e3	6a 3d		 push	 61			; 0000003dH
  002e5	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN60@draw_weapo:

; 5652 : 				}
; 5653 : 			}
; 5654 : 
; 5655 : 			//
; 5656 : 			// digits
; 5657 : 			//
; 5658 : 
; 5659 : 			hardpoint_x = 60;

  002ea	c7 45 a4 3c 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 60 ; 0000003cH

; 5660 : 			hardpoint_y = 377;

  002f1	c7 45 a0 79 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 377 ; 00000179H

; 5661 : 
; 5662 : 			sprintf (buffer, "%04d", number);

  002f8	8b 45 ac	 mov	 eax, DWORD PTR _number$[ebp]
  002fb	50		 push	 eax
  002fc	68 00 00 00 00	 push	 OFFSET ??_C@_04OCCELDNI@?$CF04d@
  00301	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00304	51		 push	 ecx
  00305	e8 00 00 00 00	 call	 _sprintf
  0030a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5663 : 
; 5664 : 			if ((weapon_sub_type == selected_weapon) && (!damaged))

  0030d	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00310	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00313	75 0f		 jne	 SHORT $LN64@draw_weapo
  00315	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00319	75 09		 jne	 SHORT $LN64@draw_weapo

; 5665 : 			{
; 5666 : 				v = 276;

  0031b	c7 45 98 14 01
	00 00		 mov	 DWORD PTR _v$[ebp], 276	; 00000114H

; 5667 : 			}
; 5668 : 			else

  00322	eb 07		 jmp	 SHORT $LN65@draw_weapo
$LN64@draw_weapo:

; 5669 : 			{
; 5670 : 				v = 283;

  00324	c7 45 98 1b 01
	00 00		 mov	 DWORD PTR _v$[ebp], 283	; 0000011bH
$LN65@draw_weapo:

; 5671 : 			}
; 5672 : 
; 5673 : 			if (buffer[0] == '0')

  0032b	b8 01 00 00 00	 mov	 eax, 1
  00330	6b c8 00	 imul	 ecx, eax, 0
  00333	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  00338	83 fa 30	 cmp	 edx, 48			; 00000030H
  0033b	75 09		 jne	 SHORT $LN66@draw_weapo

; 5674 : 			{
; 5675 : 				u = 184 + (9 * 5);

  0033d	c7 45 9c e5 00
	00 00		 mov	 DWORD PTR _u$[ebp], 229	; 000000e5H

; 5676 : 			}
; 5677 : 			else

  00344	eb 1b		 jmp	 SHORT $LN67@draw_weapo
$LN66@draw_weapo:

; 5678 : 			{
; 5679 : 				u = 184 + ((buffer[0] - '1') * 5);

  00346	b8 01 00 00 00	 mov	 eax, 1
  0034b	6b c8 00	 imul	 ecx, eax, 0
  0034e	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  00353	83 ea 31	 sub	 edx, 49			; 00000031H
  00356	6b c2 05	 imul	 eax, edx, 5
  00359	05 b8 00 00 00	 add	 eax, 184		; 000000b8H
  0035e	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN67@draw_weapo:

; 5680 : 			}
; 5681 : 
; 5682 : 			draw_sprite (hardpoint_x, hardpoint_y, u, v, 4, 6);

  00361	6a 06		 push	 6
  00363	6a 04		 push	 4
  00365	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  00368	50		 push	 eax
  00369	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  0036c	51		 push	 ecx
  0036d	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  00370	52		 push	 edx
  00371	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  00374	50		 push	 eax
  00375	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5683 : 
; 5684 : 			if (buffer[1] == '0')

  0037a	b8 01 00 00 00	 mov	 eax, 1
  0037f	c1 e0 00	 shl	 eax, 0
  00382	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  00387	83 f9 30	 cmp	 ecx, 48			; 00000030H
  0038a	75 09		 jne	 SHORT $LN68@draw_weapo

; 5685 : 			{
; 5686 : 				u = 184 + (9 * 5);

  0038c	c7 45 9c e5 00
	00 00		 mov	 DWORD PTR _u$[ebp], 229	; 000000e5H

; 5687 : 			}
; 5688 : 			else

  00393	eb 1c		 jmp	 SHORT $LN69@draw_weapo
$LN68@draw_weapo:

; 5689 : 			{
; 5690 : 				u = 184 + ((buffer[1] - '1') * 5);

  00395	b8 01 00 00 00	 mov	 eax, 1
  0039a	c1 e0 00	 shl	 eax, 0
  0039d	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  003a2	83 e9 31	 sub	 ecx, 49			; 00000031H
  003a5	6b d1 05	 imul	 edx, ecx, 5
  003a8	81 c2 b8 00 00
	00		 add	 edx, 184		; 000000b8H
  003ae	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN69@draw_weapo:

; 5691 : 			}
; 5692 : 
; 5693 : 			draw_sprite (hardpoint_x + 4, hardpoint_y, u, v, 4, 6);

  003b1	6a 06		 push	 6
  003b3	6a 04		 push	 4
  003b5	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  003b8	50		 push	 eax
  003b9	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  003bc	51		 push	 ecx
  003bd	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  003c0	52		 push	 edx
  003c1	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  003c4	83 c0 04	 add	 eax, 4
  003c7	50		 push	 eax
  003c8	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5694 : 
; 5695 : 			if (buffer[2] == '0')

  003cd	b8 01 00 00 00	 mov	 eax, 1
  003d2	d1 e0		 shl	 eax, 1
  003d4	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  003d9	83 f9 30	 cmp	 ecx, 48			; 00000030H
  003dc	75 09		 jne	 SHORT $LN70@draw_weapo

; 5696 : 			{
; 5697 : 				u = 184 + (9 * 5);

  003de	c7 45 9c e5 00
	00 00		 mov	 DWORD PTR _u$[ebp], 229	; 000000e5H

; 5698 : 			}
; 5699 : 			else

  003e5	eb 1b		 jmp	 SHORT $LN71@draw_weapo
$LN70@draw_weapo:

; 5700 : 			{
; 5701 : 				u = 184 + ((buffer[2] - '1') * 5);

  003e7	b8 01 00 00 00	 mov	 eax, 1
  003ec	d1 e0		 shl	 eax, 1
  003ee	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  003f3	83 e9 31	 sub	 ecx, 49			; 00000031H
  003f6	6b d1 05	 imul	 edx, ecx, 5
  003f9	81 c2 b8 00 00
	00		 add	 edx, 184		; 000000b8H
  003ff	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN71@draw_weapo:

; 5702 : 			}
; 5703 : 
; 5704 : 			draw_sprite (hardpoint_x + 8, hardpoint_y, u, v, 4, 6);

  00402	6a 06		 push	 6
  00404	6a 04		 push	 4
  00406	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  00409	50		 push	 eax
  0040a	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  0040d	51		 push	 ecx
  0040e	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  00411	52		 push	 edx
  00412	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  00415	83 c0 08	 add	 eax, 8
  00418	50		 push	 eax
  00419	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5705 : 
; 5706 : 			if (buffer[3] == '0')

  0041e	b8 01 00 00 00	 mov	 eax, 1
  00423	6b c8 03	 imul	 ecx, eax, 3
  00426	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  0042b	83 fa 30	 cmp	 edx, 48			; 00000030H
  0042e	75 09		 jne	 SHORT $LN72@draw_weapo

; 5707 : 			{
; 5708 : 				u = 184 + (9 * 5);

  00430	c7 45 9c e5 00
	00 00		 mov	 DWORD PTR _u$[ebp], 229	; 000000e5H

; 5709 : 			}
; 5710 : 			else

  00437	eb 1b		 jmp	 SHORT $LN73@draw_weapo
$LN72@draw_weapo:

; 5711 : 			{
; 5712 : 				u = 184 + ((buffer[3] - '1') * 5);

  00439	b8 01 00 00 00	 mov	 eax, 1
  0043e	6b c8 03	 imul	 ecx, eax, 3
  00441	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  00446	83 ea 31	 sub	 edx, 49			; 00000031H
  00449	6b c2 05	 imul	 eax, edx, 5
  0044c	05 b8 00 00 00	 add	 eax, 184		; 000000b8H
  00451	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN73@draw_weapo:

; 5713 : 			}
; 5714 : 
; 5715 : 			draw_sprite (hardpoint_x + 12, hardpoint_y, u, v, 4, 6);

  00454	6a 06		 push	 6
  00456	6a 04		 push	 4
  00458	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  0045b	50		 push	 eax
  0045c	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  0045f	51		 push	 ecx
  00460	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  00463	52		 push	 edx
  00464	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  00467	83 c0 0c	 add	 eax, 12			; 0000000cH
  0046a	50		 push	 eax
  0046b	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5716 : 
; 5717 : 			//
; 5718 : 			// damage cross
; 5719 : 			//
; 5720 : 
; 5721 : 			if (damaged)

  00470	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00474	74 1a		 je	 SHORT $LN40@draw_weapo

; 5722 : 			{
; 5723 : 				draw_sprite (60, 361, 169, 290, 16, 16);

  00476	6a 10		 push	 16			; 00000010H
  00478	6a 10		 push	 16			; 00000010H
  0047a	68 22 01 00 00	 push	 290			; 00000122H
  0047f	68 a9 00 00 00	 push	 169			; 000000a9H
  00484	68 69 01 00 00	 push	 361			; 00000169H
  00489	6a 3c		 push	 60			; 0000003cH
  0048b	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN40@draw_weapo:

; 5724 : 			}
; 5725 : 		}
; 5726 : 	}
; 5727 : 
; 5728 : 	////////////////////////////////////////////////////////////////////////////////
; 5729 : 	//
; 5730 : 	// Hydras
; 5731 : 	//
; 5732 : 	////////////////////////////////////////////////////////////////////////////////
; 5733 : 
; 5734 : 	if ((weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_HYDRA70_M255) || (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_HYDRA70_M261))

  00490	83 7d 94 1e	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 30 ; 0000001eH
  00494	74 0a		 je	 SHORT $LN76@draw_weapo
  00496	83 7d 94 1f	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 31 ; 0000001fH
  0049a	0f 85 ba 06 00
	00		 jne	 $LN75@draw_weapo
$LN76@draw_weapo:

; 5735 : 	{
; 5736 : 		if (draw_large_mfd)

  004a0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  004a7	0f 84 4a 03 00
	00		 je	 $LN77@draw_weapo

; 5737 : 		{
; 5738 : 			////////////////////////////////////////
; 5739 : 			//
; 5740 : 			// LARGE
; 5741 : 			//
; 5742 : 			////////////////////////////////////////
; 5743 : 
; 5744 : 			//
; 5745 : 			// rocket pod
; 5746 : 			//
; 5747 : 
; 5748 : 			switch (heading_depth)

  004ad	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  004b0	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv314[ebp], eax
  004b6	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv314[ebp], 3
  004bd	77 4b		 ja	 SHORT $LN2@draw_weapo
  004bf	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv314[ebp]
  004c5	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN384@draw_weapo[ecx*4]
$LN79@draw_weapo:

; 5749 : 			{
; 5750 : 				case APACHE_LHS_INNER_PYLON:
; 5751 : 				{
; 5752 : 					hardpoint_x = 50;

  004cc	c7 45 a4 32 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 50 ; 00000032H

; 5753 : 					hardpoint_y = 177;

  004d3	c7 45 a0 b1 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 177 ; 000000b1H

; 5754 : 
; 5755 : 					break;

  004da	eb 2e		 jmp	 SHORT $LN2@draw_weapo
$LN80@draw_weapo:

; 5756 : 				}
; 5757 : 				case APACHE_RHS_INNER_PYLON:
; 5758 : 				{
; 5759 : 					hardpoint_x = 188;

  004dc	c7 45 a4 bc 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 188 ; 000000bcH

; 5760 : 					hardpoint_y = 177;

  004e3	c7 45 a0 b1 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 177 ; 000000b1H

; 5761 : 
; 5762 : 					break;

  004ea	eb 1e		 jmp	 SHORT $LN2@draw_weapo
$LN81@draw_weapo:

; 5763 : 				}
; 5764 : 				case APACHE_LHS_OUTER_PYLON:
; 5765 : 				{
; 5766 : 					hardpoint_x = 18;

  004ec	c7 45 a4 12 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 18 ; 00000012H

; 5767 : 					hardpoint_y = 177;

  004f3	c7 45 a0 b1 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 177 ; 000000b1H

; 5768 : 
; 5769 : 					break;

  004fa	eb 0e		 jmp	 SHORT $LN2@draw_weapo
$LN82@draw_weapo:

; 5770 : 				}
; 5771 : 				case APACHE_RHS_OUTER_PYLON:
; 5772 : 				{
; 5773 : 					hardpoint_x = 220;

  004fc	c7 45 a4 dc 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 220 ; 000000dcH

; 5774 : 					hardpoint_y = 177;

  00503	c7 45 a0 b1 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 177 ; 000000b1H
$LN2@draw_weapo:

; 5775 : 
; 5776 : 					break;
; 5777 : 				}
; 5778 : 			}
; 5779 : 
; 5780 : 			if (number == 0)

  0050a	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  0050e	75 45		 jne	 SHORT $LN83@draw_weapo

; 5781 : 			{
; 5782 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  00510	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00513	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00516	75 20		 jne	 SHORT $LN85@draw_weapo
  00518	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0051c	75 1a		 jne	 SHORT $LN85@draw_weapo

; 5783 : 				{
; 5784 : 					draw_sprite (hardpoint_x, hardpoint_y, 262, 99, 26, 33);

  0051e	6a 21		 push	 33			; 00000021H
  00520	6a 1a		 push	 26			; 0000001aH
  00522	6a 63		 push	 99			; 00000063H
  00524	68 06 01 00 00	 push	 262			; 00000106H
  00529	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0052c	50		 push	 eax
  0052d	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00530	51		 push	 ecx
  00531	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5785 : 				}
; 5786 : 				else

  00536	eb 18		 jmp	 SHORT $LN86@draw_weapo
$LN85@draw_weapo:

; 5787 : 				{
; 5788 : 					draw_sprite (hardpoint_x, hardpoint_y, 319, 99, 26, 33);

  00538	6a 21		 push	 33			; 00000021H
  0053a	6a 1a		 push	 26			; 0000001aH
  0053c	6a 63		 push	 99			; 00000063H
  0053e	68 3f 01 00 00	 push	 319			; 0000013fH
  00543	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00546	50		 push	 eax
  00547	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0054a	51		 push	 ecx
  0054b	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN86@draw_weapo:

; 5789 : 				}
; 5790 : 			}
; 5791 : 			else

  00550	e9 27 01 00 00	 jmp	 $LN84@draw_weapo
$LN83@draw_weapo:

; 5792 : 			{
; 5793 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  00555	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00558	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  0055b	75 20		 jne	 SHORT $LN87@draw_weapo
  0055d	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00561	75 1a		 jne	 SHORT $LN87@draw_weapo

; 5794 : 				{
; 5795 : 					draw_sprite (hardpoint_x, hardpoint_y, 291, 99, 26, 33);

  00563	6a 21		 push	 33			; 00000021H
  00565	6a 1a		 push	 26			; 0000001aH
  00567	6a 63		 push	 99			; 00000063H
  00569	68 23 01 00 00	 push	 291			; 00000123H
  0056e	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00571	50		 push	 eax
  00572	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00575	51		 push	 ecx
  00576	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5796 : 				}
; 5797 : 				else

  0057b	eb 18		 jmp	 SHORT $LN88@draw_weapo
$LN87@draw_weapo:

; 5798 : 				{
; 5799 : 					draw_sprite (hardpoint_x, hardpoint_y, 347, 99, 26, 33);

  0057d	6a 21		 push	 33			; 00000021H
  0057f	6a 1a		 push	 26			; 0000001aH
  00581	6a 63		 push	 99			; 00000063H
  00583	68 5b 01 00 00	 push	 347			; 0000015bH
  00588	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0058b	50		 push	 eax
  0058c	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0058f	51		 push	 ecx
  00590	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN88@draw_weapo:

; 5800 : 				}
; 5801 : 
; 5802 : 				//
; 5803 : 				// digits
; 5804 : 				//
; 5805 : 
; 5806 : 				hardpoint_x += 4;

  00595	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  00598	83 c0 04	 add	 eax, 4
  0059b	89 45 a4	 mov	 DWORD PTR _hardpoint_x$[ebp], eax

; 5807 : 				hardpoint_y += 14;

  0059e	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  005a1	83 c0 0e	 add	 eax, 14			; 0000000eH
  005a4	89 45 a0	 mov	 DWORD PTR _hardpoint_y$[ebp], eax

; 5808 : 
; 5809 : 				sprintf (buffer, "%02d", number);

  005a7	8b 45 ac	 mov	 eax, DWORD PTR _number$[ebp]
  005aa	50		 push	 eax
  005ab	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  005b0	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  005b3	51		 push	 ecx
  005b4	e8 00 00 00 00	 call	 _sprintf
  005b9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5810 : 
; 5811 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  005bc	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  005bf	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  005c2	75 0f		 jne	 SHORT $LN89@draw_weapo
  005c4	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  005c8	75 09		 jne	 SHORT $LN89@draw_weapo

; 5812 : 				{
; 5813 : 					v = 32;

  005ca	c7 45 98 20 00
	00 00		 mov	 DWORD PTR _v$[ebp], 32	; 00000020H

; 5814 : 				}
; 5815 : 				else

  005d1	eb 07		 jmp	 SHORT $LN90@draw_weapo
$LN89@draw_weapo:

; 5816 : 				{
; 5817 : 					v = 47;

  005d3	c7 45 98 2f 00
	00 00		 mov	 DWORD PTR _v$[ebp], 47	; 0000002fH
$LN90@draw_weapo:

; 5818 : 				}
; 5819 : 
; 5820 : 				if (buffer[0] == '0')

  005da	b8 01 00 00 00	 mov	 eax, 1
  005df	6b c8 00	 imul	 ecx, eax, 0
  005e2	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  005e7	83 fa 30	 cmp	 edx, 48			; 00000030H
  005ea	75 09		 jne	 SHORT $LN91@draw_weapo

; 5821 : 				{
; 5822 : 					u = 263 + (9 * 10);

  005ec	c7 45 9c 61 01
	00 00		 mov	 DWORD PTR _u$[ebp], 353	; 00000161H

; 5823 : 				}
; 5824 : 				else

  005f3	eb 1b		 jmp	 SHORT $LN92@draw_weapo
$LN91@draw_weapo:

; 5825 : 				{
; 5826 : 					u = 263 + ((buffer[0] - '1') * 10);

  005f5	b8 01 00 00 00	 mov	 eax, 1
  005fa	6b c8 00	 imul	 ecx, eax, 0
  005fd	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  00602	83 ea 31	 sub	 edx, 49			; 00000031H
  00605	6b c2 0a	 imul	 eax, edx, 10
  00608	05 07 01 00 00	 add	 eax, 263		; 00000107H
  0060d	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN92@draw_weapo:

; 5827 : 				}
; 5828 : 
; 5829 : 				draw_sprite (hardpoint_x, hardpoint_y, u, v, 8, 12);

  00610	6a 0c		 push	 12			; 0000000cH
  00612	6a 08		 push	 8
  00614	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  00617	50		 push	 eax
  00618	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  0061b	51		 push	 ecx
  0061c	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  0061f	52		 push	 edx
  00620	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  00623	50		 push	 eax
  00624	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5830 : 
; 5831 : 				if (buffer[1] == '0')

  00629	b8 01 00 00 00	 mov	 eax, 1
  0062e	c1 e0 00	 shl	 eax, 0
  00631	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  00636	83 f9 30	 cmp	 ecx, 48			; 00000030H
  00639	75 09		 jne	 SHORT $LN93@draw_weapo

; 5832 : 				{
; 5833 : 					u = 263 + (9 * 10);

  0063b	c7 45 9c 61 01
	00 00		 mov	 DWORD PTR _u$[ebp], 353	; 00000161H

; 5834 : 				}
; 5835 : 				else

  00642	eb 1c		 jmp	 SHORT $LN94@draw_weapo
$LN93@draw_weapo:

; 5836 : 				{
; 5837 : 					u = 263 + ((buffer[1] - '1') * 10);

  00644	b8 01 00 00 00	 mov	 eax, 1
  00649	c1 e0 00	 shl	 eax, 0
  0064c	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  00651	83 e9 31	 sub	 ecx, 49			; 00000031H
  00654	6b d1 0a	 imul	 edx, ecx, 10
  00657	81 c2 07 01 00
	00		 add	 edx, 263		; 00000107H
  0065d	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN94@draw_weapo:

; 5838 : 				}
; 5839 : 
; 5840 : 				draw_sprite (hardpoint_x + 8, hardpoint_y, u, v, 8, 12);

  00660	6a 0c		 push	 12			; 0000000cH
  00662	6a 08		 push	 8
  00664	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  00667	50		 push	 eax
  00668	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  0066b	51		 push	 ecx
  0066c	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  0066f	52		 push	 edx
  00670	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  00673	83 c0 08	 add	 eax, 8
  00676	50		 push	 eax
  00677	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN84@draw_weapo:

; 5841 : 			}
; 5842 : 
; 5843 : 			//
; 5844 : 			// damage cross
; 5845 : 			//
; 5846 : 
; 5847 : 			if (damaged)

  0067c	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00680	0f 84 87 00 00
	00		 je	 $LN95@draw_weapo

; 5848 : 			{
; 5849 : 				switch (heading_depth)

  00686	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  00689	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv386[ebp], eax
  0068f	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv386[ebp], 3
  00696	77 75		 ja	 SHORT $LN95@draw_weapo
  00698	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv386[ebp]
  0069e	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN385@draw_weapo[ecx*4]
$LN96@draw_weapo:

; 5850 : 				{
; 5851 : 					case APACHE_LHS_INNER_PYLON:
; 5852 : 					{
; 5853 : 						draw_sprite (47, 181, 334, 61, 32, 32);

  006a5	6a 20		 push	 32			; 00000020H
  006a7	6a 20		 push	 32			; 00000020H
  006a9	6a 3d		 push	 61			; 0000003dH
  006ab	68 4e 01 00 00	 push	 334			; 0000014eH
  006b0	68 b5 00 00 00	 push	 181			; 000000b5H
  006b5	6a 2f		 push	 47			; 0000002fH
  006b7	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5854 : 
; 5855 : 						break;

  006bc	eb 4f		 jmp	 SHORT $LN95@draw_weapo
$LN97@draw_weapo:

; 5856 : 					}
; 5857 : 					case APACHE_RHS_INNER_PYLON:
; 5858 : 					{
; 5859 : 						draw_sprite (185, 181, 334, 61, 32, 32);

  006be	6a 20		 push	 32			; 00000020H
  006c0	6a 20		 push	 32			; 00000020H
  006c2	6a 3d		 push	 61			; 0000003dH
  006c4	68 4e 01 00 00	 push	 334			; 0000014eH
  006c9	68 b5 00 00 00	 push	 181			; 000000b5H
  006ce	68 b9 00 00 00	 push	 185			; 000000b9H
  006d3	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5860 : 
; 5861 : 						break;

  006d8	eb 33		 jmp	 SHORT $LN95@draw_weapo
$LN98@draw_weapo:

; 5862 : 					}
; 5863 : 					case APACHE_LHS_OUTER_PYLON:
; 5864 : 					{
; 5865 : 						draw_sprite (15, 181, 334, 61, 32, 32);

  006da	6a 20		 push	 32			; 00000020H
  006dc	6a 20		 push	 32			; 00000020H
  006de	6a 3d		 push	 61			; 0000003dH
  006e0	68 4e 01 00 00	 push	 334			; 0000014eH
  006e5	68 b5 00 00 00	 push	 181			; 000000b5H
  006ea	6a 0f		 push	 15			; 0000000fH
  006ec	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5866 : 
; 5867 : 						break;

  006f1	eb 1a		 jmp	 SHORT $LN95@draw_weapo
$LN99@draw_weapo:

; 5868 : 					}
; 5869 : 					case APACHE_RHS_OUTER_PYLON:
; 5870 : 					{
; 5871 : 						draw_sprite (217, 181, 334, 61, 32, 32);

  006f3	6a 20		 push	 32			; 00000020H
  006f5	6a 20		 push	 32			; 00000020H
  006f7	6a 3d		 push	 61			; 0000003dH
  006f9	68 4e 01 00 00	 push	 334			; 0000014eH
  006fe	68 b5 00 00 00	 push	 181			; 000000b5H
  00703	68 d9 00 00 00	 push	 217			; 000000d9H
  00708	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN95@draw_weapo:

; 5872 : 
; 5873 : 						break;
; 5874 : 					}
; 5875 : 				}
; 5876 : 			}
; 5877 : 
; 5878 : 			//
; 5879 : 			// type
; 5880 : 			//
; 5881 : 
; 5882 : 			switch (heading_depth)

  0070d	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  00710	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv412[ebp], eax
  00716	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv412[ebp], 3
  0071d	77 4b		 ja	 SHORT $LN6@draw_weapo
  0071f	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv412[ebp]
  00725	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN386@draw_weapo[ecx*4]
$LN100@draw_weapo:

; 5883 : 			{
; 5884 : 				case APACHE_LHS_INNER_PYLON:
; 5885 : 				{
; 5886 : 					hardpoint_x = 47;

  0072c	c7 45 a4 2f 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 47 ; 0000002fH

; 5887 : 					hardpoint_y = 234;

  00733	c7 45 a0 ea 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 234 ; 000000eaH

; 5888 : 
; 5889 : 					break;

  0073a	eb 2e		 jmp	 SHORT $LN6@draw_weapo
$LN101@draw_weapo:

; 5890 : 				}
; 5891 : 				case APACHE_RHS_INNER_PYLON:
; 5892 : 				{
; 5893 : 					hardpoint_x = 185;

  0073c	c7 45 a4 b9 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 185 ; 000000b9H

; 5894 : 					hardpoint_y = 234;

  00743	c7 45 a0 ea 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 234 ; 000000eaH

; 5895 : 
; 5896 : 					break;

  0074a	eb 1e		 jmp	 SHORT $LN6@draw_weapo
$LN102@draw_weapo:

; 5897 : 				}
; 5898 : 				case APACHE_LHS_OUTER_PYLON:
; 5899 : 				{
; 5900 : 					hardpoint_x = 15;

  0074c	c7 45 a4 0f 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 15 ; 0000000fH

; 5901 : 					hardpoint_y = 234;

  00753	c7 45 a0 ea 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 234 ; 000000eaH

; 5902 : 
; 5903 : 					break;

  0075a	eb 0e		 jmp	 SHORT $LN6@draw_weapo
$LN103@draw_weapo:

; 5904 : 				}
; 5905 : 				case APACHE_RHS_OUTER_PYLON:
; 5906 : 				{
; 5907 : 					hardpoint_x = 217;

  0075c	c7 45 a4 d9 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 217 ; 000000d9H

; 5908 : 					hardpoint_y = 234;

  00763	c7 45 a0 ea 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 234 ; 000000eaH
$LN6@draw_weapo:

; 5909 : 
; 5910 : 					break;
; 5911 : 				}
; 5912 : 			}
; 5913 : 
; 5914 : 			if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_HYDRA70_M255)

  0076a	83 7d 94 1e	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 30 ; 0000001eH
  0076e	75 42		 jne	 SHORT $LN104@draw_weapo

; 5915 : 			{
; 5916 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  00770	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00773	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00776	75 20		 jne	 SHORT $LN106@draw_weapo
  00778	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0077c	75 1a		 jne	 SHORT $LN106@draw_weapo

; 5917 : 				{
; 5918 : 					draw_sprite (hardpoint_x, hardpoint_y, 262, 17, 31, 12);

  0077e	6a 0c		 push	 12			; 0000000cH
  00780	6a 1f		 push	 31			; 0000001fH
  00782	6a 11		 push	 17			; 00000011H
  00784	68 06 01 00 00	 push	 262			; 00000106H
  00789	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0078c	50		 push	 eax
  0078d	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00790	51		 push	 ecx
  00791	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5919 : 				}
; 5920 : 				else

  00796	eb 18		 jmp	 SHORT $LN107@draw_weapo
$LN106@draw_weapo:

; 5921 : 				{
; 5922 : 					draw_sprite (hardpoint_x, hardpoint_y, 342, 17, 31, 12);

  00798	6a 0c		 push	 12			; 0000000cH
  0079a	6a 1f		 push	 31			; 0000001fH
  0079c	6a 11		 push	 17			; 00000011H
  0079e	68 56 01 00 00	 push	 342			; 00000156H
  007a3	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  007a6	50		 push	 eax
  007a7	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  007aa	51		 push	 ecx
  007ab	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN107@draw_weapo:

; 5923 : 				}
; 5924 : 			}
; 5925 : 			else

  007b0	eb 40		 jmp	 SHORT $LN105@draw_weapo
$LN104@draw_weapo:

; 5926 : 			{
; 5927 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  007b2	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  007b5	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  007b8	75 20		 jne	 SHORT $LN108@draw_weapo
  007ba	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  007be	75 1a		 jne	 SHORT $LN108@draw_weapo

; 5928 : 				{
; 5929 : 					draw_sprite (hardpoint_x, hardpoint_y, 295, 17, 31, 12);

  007c0	6a 0c		 push	 12			; 0000000cH
  007c2	6a 1f		 push	 31			; 0000001fH
  007c4	6a 11		 push	 17			; 00000011H
  007c6	68 27 01 00 00	 push	 295			; 00000127H
  007cb	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  007ce	50		 push	 eax
  007cf	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  007d2	51		 push	 ecx
  007d3	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5930 : 				}
; 5931 : 				else

  007d8	eb 18		 jmp	 SHORT $LN105@draw_weapo
$LN108@draw_weapo:

; 5932 : 				{
; 5933 : 					draw_sprite (hardpoint_x, hardpoint_y, 375, 17, 31, 12);

  007da	6a 0c		 push	 12			; 0000000cH
  007dc	6a 1f		 push	 31			; 0000001fH
  007de	6a 11		 push	 17			; 00000011H
  007e0	68 77 01 00 00	 push	 375			; 00000177H
  007e5	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  007e8	50		 push	 eax
  007e9	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  007ec	51		 push	 ecx
  007ed	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN105@draw_weapo:

; 5934 : 				}
; 5935 : 			}
; 5936 : 		}
; 5937 : 		else

  007f2	e9 63 03 00 00	 jmp	 $LN75@draw_weapo
$LN77@draw_weapo:

; 5938 : 		{
; 5939 : 			////////////////////////////////////////
; 5940 : 			//
; 5941 : 			// SMALL
; 5942 : 			//
; 5943 : 			////////////////////////////////////////
; 5944 : 
; 5945 : 			//
; 5946 : 			// rocket pod
; 5947 : 			//
; 5948 : 
; 5949 : 			switch (heading_depth)

  007f7	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  007fa	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv443[ebp], eax
  00800	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv443[ebp], 3
  00807	77 4b		 ja	 SHORT $LN8@draw_weapo
  00809	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv443[ebp]
  0080f	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN387@draw_weapo[ecx*4]
$LN110@draw_weapo:

; 5950 : 			{
; 5951 : 				case APACHE_LHS_INNER_PYLON:
; 5952 : 				{
; 5953 : 					hardpoint_x = 27;

  00816	c7 45 a4 1b 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 27 ; 0000001bH

; 5954 : 					hardpoint_y = 348;

  0081d	c7 45 a0 5c 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 348 ; 0000015cH

; 5955 : 
; 5956 : 					break;

  00824	eb 2e		 jmp	 SHORT $LN8@draw_weapo
$LN111@draw_weapo:

; 5957 : 				}
; 5958 : 				case APACHE_RHS_INNER_PYLON:
; 5959 : 				{
; 5960 : 					hardpoint_x = 96;

  00826	c7 45 a4 60 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 96 ; 00000060H

; 5961 : 					hardpoint_y = 348;

  0082d	c7 45 a0 5c 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 348 ; 0000015cH

; 5962 : 
; 5963 : 					break;

  00834	eb 1e		 jmp	 SHORT $LN8@draw_weapo
$LN112@draw_weapo:

; 5964 : 				}
; 5965 : 				case APACHE_LHS_OUTER_PYLON:
; 5966 : 				{
; 5967 : 					hardpoint_x = 11;

  00836	c7 45 a4 0b 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 11 ; 0000000bH

; 5968 : 					hardpoint_y = 348;

  0083d	c7 45 a0 5c 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 348 ; 0000015cH

; 5969 : 
; 5970 : 					break;

  00844	eb 0e		 jmp	 SHORT $LN8@draw_weapo
$LN113@draw_weapo:

; 5971 : 				}
; 5972 : 				case APACHE_RHS_OUTER_PYLON:
; 5973 : 				{
; 5974 : 					hardpoint_x = 112;

  00846	c7 45 a4 70 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 112 ; 00000070H

; 5975 : 					hardpoint_y = 348;

  0084d	c7 45 a0 5c 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 348 ; 0000015cH
$LN8@draw_weapo:

; 5976 : 
; 5977 : 					break;
; 5978 : 				}
; 5979 : 			}
; 5980 : 
; 5981 : 			if (number == 0)

  00854	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  00858	75 4b		 jne	 SHORT $LN114@draw_weapo

; 5982 : 			{
; 5983 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  0085a	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0085d	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00860	75 23		 jne	 SHORT $LN116@draw_weapo
  00862	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00866	75 1d		 jne	 SHORT $LN116@draw_weapo

; 5984 : 				{
; 5985 : 					draw_sprite (hardpoint_x, hardpoint_y, 133, 309, 13, 17);

  00868	6a 11		 push	 17			; 00000011H
  0086a	6a 0d		 push	 13			; 0000000dH
  0086c	68 35 01 00 00	 push	 309			; 00000135H
  00871	68 85 00 00 00	 push	 133			; 00000085H
  00876	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00879	50		 push	 eax
  0087a	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0087d	51		 push	 ecx
  0087e	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5986 : 				}
; 5987 : 				else

  00883	eb 1b		 jmp	 SHORT $LN117@draw_weapo
$LN116@draw_weapo:

; 5988 : 				{
; 5989 : 					draw_sprite (hardpoint_x, hardpoint_y, 161, 309, 13, 17);

  00885	6a 11		 push	 17			; 00000011H
  00887	6a 0d		 push	 13			; 0000000dH
  00889	68 35 01 00 00	 push	 309			; 00000135H
  0088e	68 a1 00 00 00	 push	 161			; 000000a1H
  00893	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00896	50		 push	 eax
  00897	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0089a	51		 push	 ecx
  0089b	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN117@draw_weapo:

; 5990 : 				}
; 5991 : 			}
; 5992 : 			else

  008a0	e9 2d 01 00 00	 jmp	 $LN115@draw_weapo
$LN114@draw_weapo:

; 5993 : 			{
; 5994 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  008a5	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  008a8	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  008ab	75 23		 jne	 SHORT $LN118@draw_weapo
  008ad	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  008b1	75 1d		 jne	 SHORT $LN118@draw_weapo

; 5995 : 				{
; 5996 : 					draw_sprite (hardpoint_x, hardpoint_y, 147, 309, 13, 17);

  008b3	6a 11		 push	 17			; 00000011H
  008b5	6a 0d		 push	 13			; 0000000dH
  008b7	68 35 01 00 00	 push	 309			; 00000135H
  008bc	68 93 00 00 00	 push	 147			; 00000093H
  008c1	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  008c4	50		 push	 eax
  008c5	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  008c8	51		 push	 ecx
  008c9	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5997 : 				}
; 5998 : 				else

  008ce	eb 1b		 jmp	 SHORT $LN119@draw_weapo
$LN118@draw_weapo:

; 5999 : 				{
; 6000 : 					draw_sprite (hardpoint_x, hardpoint_y, 175, 309, 13, 17);

  008d0	6a 11		 push	 17			; 00000011H
  008d2	6a 0d		 push	 13			; 0000000dH
  008d4	68 35 01 00 00	 push	 309			; 00000135H
  008d9	68 af 00 00 00	 push	 175			; 000000afH
  008de	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  008e1	50		 push	 eax
  008e2	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  008e5	51		 push	 ecx
  008e6	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN119@draw_weapo:

; 6001 : 				}
; 6002 : 
; 6003 : 				//
; 6004 : 				// digits
; 6005 : 				//
; 6006 : 
; 6007 : 				hardpoint_x += 2;

  008eb	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  008ee	83 c0 02	 add	 eax, 2
  008f1	89 45 a4	 mov	 DWORD PTR _hardpoint_x$[ebp], eax

; 6008 : 				hardpoint_y += 7;

  008f4	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  008f7	83 c0 07	 add	 eax, 7
  008fa	89 45 a0	 mov	 DWORD PTR _hardpoint_y$[ebp], eax

; 6009 : 
; 6010 : 				sprintf (buffer, "%02d", number);

  008fd	8b 45 ac	 mov	 eax, DWORD PTR _number$[ebp]
  00900	50		 push	 eax
  00901	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  00906	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00909	51		 push	 ecx
  0090a	e8 00 00 00 00	 call	 _sprintf
  0090f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6011 : 
; 6012 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  00912	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00915	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00918	75 0f		 jne	 SHORT $LN120@draw_weapo
  0091a	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0091e	75 09		 jne	 SHORT $LN120@draw_weapo

; 6013 : 				{
; 6014 : 					v = 276;

  00920	c7 45 98 14 01
	00 00		 mov	 DWORD PTR _v$[ebp], 276	; 00000114H

; 6015 : 				}
; 6016 : 				else

  00927	eb 07		 jmp	 SHORT $LN121@draw_weapo
$LN120@draw_weapo:

; 6017 : 				{
; 6018 : 					v = 283;

  00929	c7 45 98 1b 01
	00 00		 mov	 DWORD PTR _v$[ebp], 283	; 0000011bH
$LN121@draw_weapo:

; 6019 : 				}
; 6020 : 
; 6021 : 				if (buffer[0] == '0')

  00930	b8 01 00 00 00	 mov	 eax, 1
  00935	6b c8 00	 imul	 ecx, eax, 0
  00938	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  0093d	83 fa 30	 cmp	 edx, 48			; 00000030H
  00940	75 09		 jne	 SHORT $LN122@draw_weapo

; 6022 : 				{
; 6023 : 					u = 133 + (9 * 5);

  00942	c7 45 9c b2 00
	00 00		 mov	 DWORD PTR _u$[ebp], 178	; 000000b2H

; 6024 : 				}
; 6025 : 				else

  00949	eb 1b		 jmp	 SHORT $LN123@draw_weapo
$LN122@draw_weapo:

; 6026 : 				{
; 6027 : 					u = 133 + ((buffer[0] - '1') * 5);

  0094b	b8 01 00 00 00	 mov	 eax, 1
  00950	6b c8 00	 imul	 ecx, eax, 0
  00953	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  00958	83 ea 31	 sub	 edx, 49			; 00000031H
  0095b	6b c2 05	 imul	 eax, edx, 5
  0095e	05 85 00 00 00	 add	 eax, 133		; 00000085H
  00963	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN123@draw_weapo:

; 6028 : 				}
; 6029 : 
; 6030 : 				draw_sprite (hardpoint_x, hardpoint_y, u, v, 4, 6);

  00966	6a 06		 push	 6
  00968	6a 04		 push	 4
  0096a	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  0096d	50		 push	 eax
  0096e	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  00971	51		 push	 ecx
  00972	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  00975	52		 push	 edx
  00976	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  00979	50		 push	 eax
  0097a	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6031 : 
; 6032 : 				if (buffer[1] == '0')

  0097f	b8 01 00 00 00	 mov	 eax, 1
  00984	c1 e0 00	 shl	 eax, 0
  00987	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  0098c	83 f9 30	 cmp	 ecx, 48			; 00000030H
  0098f	75 09		 jne	 SHORT $LN124@draw_weapo

; 6033 : 				{
; 6034 : 					u = 133 + (9 * 5);

  00991	c7 45 9c b2 00
	00 00		 mov	 DWORD PTR _u$[ebp], 178	; 000000b2H

; 6035 : 				}
; 6036 : 				else

  00998	eb 1c		 jmp	 SHORT $LN125@draw_weapo
$LN124@draw_weapo:

; 6037 : 				{
; 6038 : 					u = 133 + ((buffer[1] - '1') * 5);

  0099a	b8 01 00 00 00	 mov	 eax, 1
  0099f	c1 e0 00	 shl	 eax, 0
  009a2	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  009a7	83 e9 31	 sub	 ecx, 49			; 00000031H
  009aa	6b d1 05	 imul	 edx, ecx, 5
  009ad	81 c2 85 00 00
	00		 add	 edx, 133		; 00000085H
  009b3	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN125@draw_weapo:

; 6039 : 				}
; 6040 : 
; 6041 : 				draw_sprite (hardpoint_x + 4, hardpoint_y, u, v, 4, 6);

  009b6	6a 06		 push	 6
  009b8	6a 04		 push	 4
  009ba	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  009bd	50		 push	 eax
  009be	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  009c1	51		 push	 ecx
  009c2	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  009c5	52		 push	 edx
  009c6	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  009c9	83 c0 04	 add	 eax, 4
  009cc	50		 push	 eax
  009cd	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN115@draw_weapo:

; 6042 : 			}
; 6043 : 
; 6044 : 			//
; 6045 : 			// damage cross
; 6046 : 			//
; 6047 : 
; 6048 : 			if (damaged)

  009d2	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  009d6	0f 84 8d 00 00
	00		 je	 $LN126@draw_weapo

; 6049 : 			{
; 6050 : 				switch (heading_depth)

  009dc	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  009df	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv515[ebp], eax
  009e5	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv515[ebp], 3
  009ec	77 7b		 ja	 SHORT $LN126@draw_weapo
  009ee	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv515[ebp]
  009f4	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN388@draw_weapo[ecx*4]
$LN127@draw_weapo:

; 6051 : 				{
; 6052 : 					case APACHE_LHS_INNER_PYLON:
; 6053 : 					{
; 6054 : 						draw_sprite (26, 350, 169, 290, 16, 16);

  009fb	6a 10		 push	 16			; 00000010H
  009fd	6a 10		 push	 16			; 00000010H
  009ff	68 22 01 00 00	 push	 290			; 00000122H
  00a04	68 a9 00 00 00	 push	 169			; 000000a9H
  00a09	68 5e 01 00 00	 push	 350			; 0000015eH
  00a0e	6a 1a		 push	 26			; 0000001aH
  00a10	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6055 : 
; 6056 : 						break;

  00a15	eb 52		 jmp	 SHORT $LN126@draw_weapo
$LN128@draw_weapo:

; 6057 : 					}
; 6058 : 					case APACHE_RHS_INNER_PYLON:
; 6059 : 					{
; 6060 : 						draw_sprite (95, 350, 169, 290, 16, 16);

  00a17	6a 10		 push	 16			; 00000010H
  00a19	6a 10		 push	 16			; 00000010H
  00a1b	68 22 01 00 00	 push	 290			; 00000122H
  00a20	68 a9 00 00 00	 push	 169			; 000000a9H
  00a25	68 5e 01 00 00	 push	 350			; 0000015eH
  00a2a	6a 5f		 push	 95			; 0000005fH
  00a2c	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6061 : 
; 6062 : 						break;

  00a31	eb 36		 jmp	 SHORT $LN126@draw_weapo
$LN129@draw_weapo:

; 6063 : 					}
; 6064 : 					case APACHE_LHS_OUTER_PYLON:
; 6065 : 					{
; 6066 : 						draw_sprite (10, 350, 169, 290, 16, 16);

  00a33	6a 10		 push	 16			; 00000010H
  00a35	6a 10		 push	 16			; 00000010H
  00a37	68 22 01 00 00	 push	 290			; 00000122H
  00a3c	68 a9 00 00 00	 push	 169			; 000000a9H
  00a41	68 5e 01 00 00	 push	 350			; 0000015eH
  00a46	6a 0a		 push	 10			; 0000000aH
  00a48	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6067 : 
; 6068 : 						break;

  00a4d	eb 1a		 jmp	 SHORT $LN126@draw_weapo
$LN130@draw_weapo:

; 6069 : 					}
; 6070 : 					case APACHE_RHS_OUTER_PYLON:
; 6071 : 					{
; 6072 : 						draw_sprite (111, 350, 169, 290, 16, 16);

  00a4f	6a 10		 push	 16			; 00000010H
  00a51	6a 10		 push	 16			; 00000010H
  00a53	68 22 01 00 00	 push	 290			; 00000122H
  00a58	68 a9 00 00 00	 push	 169			; 000000a9H
  00a5d	68 5e 01 00 00	 push	 350			; 0000015eH
  00a62	6a 6f		 push	 111			; 0000006fH
  00a64	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN126@draw_weapo:

; 6073 : 
; 6074 : 						break;
; 6075 : 					}
; 6076 : 				}
; 6077 : 			}
; 6078 : 
; 6079 : 			//
; 6080 : 			// type
; 6081 : 			//
; 6082 : 
; 6083 : 			switch (heading_depth)

  00a69	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  00a6c	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv541[ebp], eax
  00a72	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv541[ebp], 3
  00a79	77 4b		 ja	 SHORT $LN12@draw_weapo
  00a7b	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv541[ebp]
  00a81	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN389@draw_weapo[ecx*4]
$LN131@draw_weapo:

; 6084 : 			{
; 6085 : 				case APACHE_LHS_INNER_PYLON:
; 6086 : 				{
; 6087 : 					hardpoint_x = 26;

  00a88	c7 45 a4 1a 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 26 ; 0000001aH

; 6088 : 					hardpoint_y = 377;

  00a8f	c7 45 a0 79 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 377 ; 00000179H

; 6089 : 
; 6090 : 					break;

  00a96	eb 2e		 jmp	 SHORT $LN12@draw_weapo
$LN132@draw_weapo:

; 6091 : 				}
; 6092 : 				case APACHE_RHS_INNER_PYLON:
; 6093 : 				{
; 6094 : 					hardpoint_x = 95;

  00a98	c7 45 a4 5f 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 95 ; 0000005fH

; 6095 : 					hardpoint_y = 377;

  00a9f	c7 45 a0 79 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 377 ; 00000179H

; 6096 : 
; 6097 : 					break;

  00aa6	eb 1e		 jmp	 SHORT $LN12@draw_weapo
$LN133@draw_weapo:

; 6098 : 				}
; 6099 : 				case APACHE_LHS_OUTER_PYLON:
; 6100 : 				{
; 6101 : 					hardpoint_x = 10;

  00aa8	c7 45 a4 0a 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 10 ; 0000000aH

; 6102 : 					hardpoint_y = 377;

  00aaf	c7 45 a0 79 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 377 ; 00000179H

; 6103 : 
; 6104 : 					break;

  00ab6	eb 0e		 jmp	 SHORT $LN12@draw_weapo
$LN134@draw_weapo:

; 6105 : 				}
; 6106 : 				case APACHE_RHS_OUTER_PYLON:
; 6107 : 				{
; 6108 : 					hardpoint_x = 111;

  00ab8	c7 45 a4 6f 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 111 ; 0000006fH

; 6109 : 					hardpoint_y = 377;

  00abf	c7 45 a0 79 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 377 ; 00000179H
$LN12@draw_weapo:

; 6110 : 
; 6111 : 					break;
; 6112 : 				}
; 6113 : 			}
; 6114 : 
; 6115 : 			if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_HYDRA70_M255)

  00ac6	83 7d 94 1e	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 30 ; 0000001eH
  00aca	75 48		 jne	 SHORT $LN135@draw_weapo

; 6116 : 			{
; 6117 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  00acc	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00acf	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00ad2	75 23		 jne	 SHORT $LN137@draw_weapo
  00ad4	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00ad8	75 1d		 jne	 SHORT $LN137@draw_weapo

; 6118 : 				{
; 6119 : 					draw_sprite (hardpoint_x, hardpoint_y, 133, 268, 15, 6);

  00ada	6a 06		 push	 6
  00adc	6a 0f		 push	 15			; 0000000fH
  00ade	68 0c 01 00 00	 push	 268			; 0000010cH
  00ae3	68 85 00 00 00	 push	 133			; 00000085H
  00ae8	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00aeb	50		 push	 eax
  00aec	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00aef	51		 push	 ecx
  00af0	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6120 : 				}
; 6121 : 				else

  00af5	eb 1b		 jmp	 SHORT $LN138@draw_weapo
$LN137@draw_weapo:

; 6122 : 				{
; 6123 : 					draw_sprite (hardpoint_x, hardpoint_y, 173, 268, 15, 6);

  00af7	6a 06		 push	 6
  00af9	6a 0f		 push	 15			; 0000000fH
  00afb	68 0c 01 00 00	 push	 268			; 0000010cH
  00b00	68 ad 00 00 00	 push	 173			; 000000adH
  00b05	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00b08	50		 push	 eax
  00b09	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00b0c	51		 push	 ecx
  00b0d	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN138@draw_weapo:

; 6124 : 				}
; 6125 : 			}
; 6126 : 			else

  00b12	eb 46		 jmp	 SHORT $LN75@draw_weapo
$LN135@draw_weapo:

; 6127 : 			{
; 6128 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  00b14	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00b17	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00b1a	75 23		 jne	 SHORT $LN139@draw_weapo
  00b1c	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00b20	75 1d		 jne	 SHORT $LN139@draw_weapo

; 6129 : 				{
; 6130 : 					draw_sprite (hardpoint_x, hardpoint_y, 149, 268, 15, 6);

  00b22	6a 06		 push	 6
  00b24	6a 0f		 push	 15			; 0000000fH
  00b26	68 0c 01 00 00	 push	 268			; 0000010cH
  00b2b	68 95 00 00 00	 push	 149			; 00000095H
  00b30	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00b33	50		 push	 eax
  00b34	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00b37	51		 push	 ecx
  00b38	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6131 : 				}
; 6132 : 				else

  00b3d	eb 1b		 jmp	 SHORT $LN75@draw_weapo
$LN139@draw_weapo:

; 6133 : 				{
; 6134 : 					draw_sprite (hardpoint_x, hardpoint_y, 189, 268, 15, 6);

  00b3f	6a 06		 push	 6
  00b41	6a 0f		 push	 15			; 0000000fH
  00b43	68 0c 01 00 00	 push	 268			; 0000010cH
  00b48	68 bd 00 00 00	 push	 189			; 000000bdH
  00b4d	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00b50	50		 push	 eax
  00b51	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00b54	51		 push	 ecx
  00b55	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN75@draw_weapo:

; 6135 : 				}
; 6136 : 			}
; 6137 : 		}
; 6138 : 	}
; 6139 : 
; 6140 : 	////////////////////////////////////////////////////////////////////////////////
; 6141 : 	//
; 6142 : 	// Hellfires
; 6143 : 	//
; 6144 : 	////////////////////////////////////////////////////////////////////////////////
; 6145 : 
; 6146 : 	if ((weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AGM114L_LONGBOW_HELLFIRE) || (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AGM114K_HELLFIRE_II))

  00b5a	83 7d 94 2d	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 45 ; 0000002dH
  00b5e	74 0a		 je	 SHORT $LN142@draw_weapo
  00b60	83 7d 94 2e	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 46 ; 0000002eH
  00b64	0f 85 00 0f 00
	00		 jne	 $LN141@draw_weapo
$LN142@draw_weapo:

; 6147 : 	{
; 6148 : 		if (draw_large_mfd)

  00b6a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00b71	0f 84 40 07 00
	00		 je	 $LN143@draw_weapo

; 6149 : 		{
; 6150 : 			////////////////////////////////////////
; 6151 : 			//
; 6152 : 			// LARGE
; 6153 : 			//
; 6154 : 			////////////////////////////////////////
; 6155 : 
; 6156 : 			//
; 6157 : 			// pylon
; 6158 : 			//
; 6159 : 
; 6160 : 			switch (heading_depth)

  00b77	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  00b7a	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv575[ebp], eax
  00b80	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv575[ebp], 3
  00b87	77 4b		 ja	 SHORT $LN14@draw_weapo
  00b89	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv575[ebp]
  00b8f	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN390@draw_weapo[ecx*4]
$LN145@draw_weapo:

; 6161 : 			{
; 6162 : 				case APACHE_LHS_INNER_PYLON:
; 6163 : 				{
; 6164 : 					hardpoint_x = 53;

  00b96	c7 45 a4 35 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 53 ; 00000035H

; 6165 : 					hardpoint_y = 177;

  00b9d	c7 45 a0 b1 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 177 ; 000000b1H

; 6166 : 
; 6167 : 					break;

  00ba4	eb 2e		 jmp	 SHORT $LN14@draw_weapo
$LN146@draw_weapo:

; 6168 : 				}
; 6169 : 				case APACHE_RHS_INNER_PYLON:
; 6170 : 				{
; 6171 : 					hardpoint_x = 191;

  00ba6	c7 45 a4 bf 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 191 ; 000000bfH

; 6172 : 					hardpoint_y = 177;

  00bad	c7 45 a0 b1 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 177 ; 000000b1H

; 6173 : 
; 6174 : 					break;

  00bb4	eb 1e		 jmp	 SHORT $LN14@draw_weapo
$LN147@draw_weapo:

; 6175 : 				}
; 6176 : 				case APACHE_LHS_OUTER_PYLON:
; 6177 : 				{
; 6178 : 					hardpoint_x = 21;

  00bb6	c7 45 a4 15 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 21 ; 00000015H

; 6179 : 					hardpoint_y = 177;

  00bbd	c7 45 a0 b1 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 177 ; 000000b1H

; 6180 : 
; 6181 : 					break;

  00bc4	eb 0e		 jmp	 SHORT $LN14@draw_weapo
$LN148@draw_weapo:

; 6182 : 				}
; 6183 : 				case APACHE_RHS_OUTER_PYLON:
; 6184 : 				{
; 6185 : 					hardpoint_x = 223;

  00bc6	c7 45 a4 df 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 223 ; 000000dfH

; 6186 : 					hardpoint_y = 177;

  00bcd	c7 45 a0 b1 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 177 ; 000000b1H
$LN14@draw_weapo:

; 6187 : 
; 6188 : 					break;
; 6189 : 				}
; 6190 : 			}
; 6191 : 
; 6192 : 			if ((weapon_sub_type == selected_weapon) && (!damaged))

  00bd4	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00bd7	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00bda	75 20		 jne	 SHORT $LN149@draw_weapo
  00bdc	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00be0	75 1a		 jne	 SHORT $LN149@draw_weapo

; 6193 : 			{
; 6194 : 				draw_sprite (hardpoint_x, hardpoint_y, 262, 79, 20, 18);

  00be2	6a 12		 push	 18			; 00000012H
  00be4	6a 14		 push	 20			; 00000014H
  00be6	6a 4f		 push	 79			; 0000004fH
  00be8	68 06 01 00 00	 push	 262			; 00000106H
  00bed	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00bf0	50		 push	 eax
  00bf1	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00bf4	51		 push	 ecx
  00bf5	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6195 : 			}
; 6196 : 			else

  00bfa	eb 18		 jmp	 SHORT $LN150@draw_weapo
$LN149@draw_weapo:

; 6197 : 			{
; 6198 : 				draw_sprite (hardpoint_x, hardpoint_y, 284, 79, 20, 18);

  00bfc	6a 12		 push	 18			; 00000012H
  00bfe	6a 14		 push	 20			; 00000014H
  00c00	6a 4f		 push	 79			; 0000004fH
  00c02	68 1c 01 00 00	 push	 284			; 0000011cH
  00c07	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00c0a	50		 push	 eax
  00c0b	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00c0e	51		 push	 ecx
  00c0f	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN150@draw_weapo:

; 6199 : 			}
; 6200 : 
; 6201 : 			//
; 6202 : 			// missiles
; 6203 : 			//
; 6204 : 
; 6205 : 			switch (heading_depth)

  00c14	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  00c17	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv591[ebp], eax
  00c1d	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv591[ebp], 3
  00c24	0f 87 12 05 00
	00		 ja	 $LN16@draw_weapo
  00c2a	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv591[ebp]
  00c30	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN391@draw_weapo[ecx*4]
$LN151@draw_weapo:

; 6206 : 			{
; 6207 : 				case APACHE_LHS_INNER_PYLON:
; 6208 : 				case APACHE_LHS_OUTER_PYLON:
; 6209 : 				{
; 6210 : 					if (number > 3)

  00c37	83 7d ac 03	 cmp	 DWORD PTR _number$[ebp], 3
  00c3b	7e 4e		 jle	 SHORT $LN152@draw_weapo

; 6211 : 					{
; 6212 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00c3d	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00c40	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00c43	75 26		 jne	 SHORT $LN154@draw_weapo
  00c45	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00c49	75 20		 jne	 SHORT $LN154@draw_weapo

; 6213 : 						{
; 6214 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 19, 280, 61, 16, 16);

  00c4b	6a 10		 push	 16			; 00000010H
  00c4d	6a 10		 push	 16			; 00000010H
  00c4f	6a 3d		 push	 61			; 0000003dH
  00c51	68 18 01 00 00	 push	 280			; 00000118H
  00c56	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00c59	83 c0 13	 add	 eax, 19			; 00000013H
  00c5c	50		 push	 eax
  00c5d	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00c60	83 e9 06	 sub	 ecx, 6
  00c63	51		 push	 ecx
  00c64	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6215 : 						}
; 6216 : 						else

  00c69	eb 1e		 jmp	 SHORT $LN155@draw_weapo
$LN154@draw_weapo:

; 6217 : 						{
; 6218 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 19, 316, 61, 16, 16);

  00c6b	6a 10		 push	 16			; 00000010H
  00c6d	6a 10		 push	 16			; 00000010H
  00c6f	6a 3d		 push	 61			; 0000003dH
  00c71	68 3c 01 00 00	 push	 316			; 0000013cH
  00c76	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00c79	83 c0 13	 add	 eax, 19			; 00000013H
  00c7c	50		 push	 eax
  00c7d	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00c80	83 e9 06	 sub	 ecx, 6
  00c83	51		 push	 ecx
  00c84	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN155@draw_weapo:

; 6219 : 						}
; 6220 : 					}
; 6221 : 					else

  00c89	eb 4c		 jmp	 SHORT $LN153@draw_weapo
$LN152@draw_weapo:

; 6222 : 					{
; 6223 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00c8b	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00c8e	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00c91	75 26		 jne	 SHORT $LN156@draw_weapo
  00c93	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00c97	75 20		 jne	 SHORT $LN156@draw_weapo

; 6224 : 						{
; 6225 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 19, 262, 61, 16, 16);

  00c99	6a 10		 push	 16			; 00000010H
  00c9b	6a 10		 push	 16			; 00000010H
  00c9d	6a 3d		 push	 61			; 0000003dH
  00c9f	68 06 01 00 00	 push	 262			; 00000106H
  00ca4	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00ca7	83 c0 13	 add	 eax, 19			; 00000013H
  00caa	50		 push	 eax
  00cab	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00cae	83 e9 06	 sub	 ecx, 6
  00cb1	51		 push	 ecx
  00cb2	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6226 : 						}
; 6227 : 						else

  00cb7	eb 1e		 jmp	 SHORT $LN153@draw_weapo
$LN156@draw_weapo:

; 6228 : 						{
; 6229 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 19, 298, 61, 16, 16);

  00cb9	6a 10		 push	 16			; 00000010H
  00cbb	6a 10		 push	 16			; 00000010H
  00cbd	6a 3d		 push	 61			; 0000003dH
  00cbf	68 2a 01 00 00	 push	 298			; 0000012aH
  00cc4	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00cc7	83 c0 13	 add	 eax, 19			; 00000013H
  00cca	50		 push	 eax
  00ccb	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00cce	83 e9 06	 sub	 ecx, 6
  00cd1	51		 push	 ecx
  00cd2	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN153@draw_weapo:

; 6230 : 						}
; 6231 : 					}
; 6232 : 
; 6233 : 					if (number > 2)

  00cd7	83 7d ac 02	 cmp	 DWORD PTR _number$[ebp], 2
  00cdb	7e 4e		 jle	 SHORT $LN158@draw_weapo

; 6234 : 					{
; 6235 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00cdd	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00ce0	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00ce3	75 26		 jne	 SHORT $LN160@draw_weapo
  00ce5	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00ce9	75 20		 jne	 SHORT $LN160@draw_weapo

; 6236 : 						{
; 6237 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 19, 280, 61, 16, 16);

  00ceb	6a 10		 push	 16			; 00000010H
  00ced	6a 10		 push	 16			; 00000010H
  00cef	6a 3d		 push	 61			; 0000003dH
  00cf1	68 18 01 00 00	 push	 280			; 00000118H
  00cf6	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00cf9	83 c0 13	 add	 eax, 19			; 00000013H
  00cfc	50		 push	 eax
  00cfd	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00d00	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00d03	51		 push	 ecx
  00d04	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6238 : 						}
; 6239 : 						else

  00d09	eb 1e		 jmp	 SHORT $LN161@draw_weapo
$LN160@draw_weapo:

; 6240 : 						{
; 6241 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 19, 316, 61, 16, 16);

  00d0b	6a 10		 push	 16			; 00000010H
  00d0d	6a 10		 push	 16			; 00000010H
  00d0f	6a 3d		 push	 61			; 0000003dH
  00d11	68 3c 01 00 00	 push	 316			; 0000013cH
  00d16	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00d19	83 c0 13	 add	 eax, 19			; 00000013H
  00d1c	50		 push	 eax
  00d1d	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00d20	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00d23	51		 push	 ecx
  00d24	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN161@draw_weapo:

; 6242 : 						}
; 6243 : 					}
; 6244 : 					else

  00d29	eb 4c		 jmp	 SHORT $LN159@draw_weapo
$LN158@draw_weapo:

; 6245 : 					{
; 6246 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00d2b	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00d2e	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00d31	75 26		 jne	 SHORT $LN162@draw_weapo
  00d33	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00d37	75 20		 jne	 SHORT $LN162@draw_weapo

; 6247 : 						{
; 6248 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 19, 262, 61, 16, 16);

  00d39	6a 10		 push	 16			; 00000010H
  00d3b	6a 10		 push	 16			; 00000010H
  00d3d	6a 3d		 push	 61			; 0000003dH
  00d3f	68 06 01 00 00	 push	 262			; 00000106H
  00d44	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00d47	83 c0 13	 add	 eax, 19			; 00000013H
  00d4a	50		 push	 eax
  00d4b	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00d4e	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00d51	51		 push	 ecx
  00d52	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6249 : 						}
; 6250 : 						else

  00d57	eb 1e		 jmp	 SHORT $LN159@draw_weapo
$LN162@draw_weapo:

; 6251 : 						{
; 6252 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 19, 298, 61, 16, 16);

  00d59	6a 10		 push	 16			; 00000010H
  00d5b	6a 10		 push	 16			; 00000010H
  00d5d	6a 3d		 push	 61			; 0000003dH
  00d5f	68 2a 01 00 00	 push	 298			; 0000012aH
  00d64	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00d67	83 c0 13	 add	 eax, 19			; 00000013H
  00d6a	50		 push	 eax
  00d6b	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00d6e	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00d71	51		 push	 ecx
  00d72	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN159@draw_weapo:

; 6253 : 						}
; 6254 : 					}
; 6255 : 
; 6256 : 					if (number > 1)

  00d77	83 7d ac 01	 cmp	 DWORD PTR _number$[ebp], 1
  00d7b	7e 4e		 jle	 SHORT $LN164@draw_weapo

; 6257 : 					{
; 6258 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00d7d	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00d80	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00d83	75 26		 jne	 SHORT $LN166@draw_weapo
  00d85	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00d89	75 20		 jne	 SHORT $LN166@draw_weapo

; 6259 : 						{
; 6260 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 35, 280, 61, 16, 16);

  00d8b	6a 10		 push	 16			; 00000010H
  00d8d	6a 10		 push	 16			; 00000010H
  00d8f	6a 3d		 push	 61			; 0000003dH
  00d91	68 18 01 00 00	 push	 280			; 00000118H
  00d96	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00d99	83 c0 23	 add	 eax, 35			; 00000023H
  00d9c	50		 push	 eax
  00d9d	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00da0	83 e9 06	 sub	 ecx, 6
  00da3	51		 push	 ecx
  00da4	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6261 : 						}
; 6262 : 						else

  00da9	eb 1e		 jmp	 SHORT $LN167@draw_weapo
$LN166@draw_weapo:

; 6263 : 						{
; 6264 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 35, 316, 61, 16, 16);

  00dab	6a 10		 push	 16			; 00000010H
  00dad	6a 10		 push	 16			; 00000010H
  00daf	6a 3d		 push	 61			; 0000003dH
  00db1	68 3c 01 00 00	 push	 316			; 0000013cH
  00db6	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00db9	83 c0 23	 add	 eax, 35			; 00000023H
  00dbc	50		 push	 eax
  00dbd	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00dc0	83 e9 06	 sub	 ecx, 6
  00dc3	51		 push	 ecx
  00dc4	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN167@draw_weapo:

; 6265 : 						}
; 6266 : 					}
; 6267 : 					else

  00dc9	eb 4c		 jmp	 SHORT $LN165@draw_weapo
$LN164@draw_weapo:

; 6268 : 					{
; 6269 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00dcb	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00dce	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00dd1	75 26		 jne	 SHORT $LN168@draw_weapo
  00dd3	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00dd7	75 20		 jne	 SHORT $LN168@draw_weapo

; 6270 : 						{
; 6271 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 35, 262, 61, 16, 16);

  00dd9	6a 10		 push	 16			; 00000010H
  00ddb	6a 10		 push	 16			; 00000010H
  00ddd	6a 3d		 push	 61			; 0000003dH
  00ddf	68 06 01 00 00	 push	 262			; 00000106H
  00de4	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00de7	83 c0 23	 add	 eax, 35			; 00000023H
  00dea	50		 push	 eax
  00deb	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00dee	83 e9 06	 sub	 ecx, 6
  00df1	51		 push	 ecx
  00df2	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6272 : 						}
; 6273 : 						else

  00df7	eb 1e		 jmp	 SHORT $LN165@draw_weapo
$LN168@draw_weapo:

; 6274 : 						{
; 6275 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 35, 298, 61, 16, 16);

  00df9	6a 10		 push	 16			; 00000010H
  00dfb	6a 10		 push	 16			; 00000010H
  00dfd	6a 3d		 push	 61			; 0000003dH
  00dff	68 2a 01 00 00	 push	 298			; 0000012aH
  00e04	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00e07	83 c0 23	 add	 eax, 35			; 00000023H
  00e0a	50		 push	 eax
  00e0b	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00e0e	83 e9 06	 sub	 ecx, 6
  00e11	51		 push	 ecx
  00e12	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN165@draw_weapo:

; 6276 : 						}
; 6277 : 					}
; 6278 : 
; 6279 : 					if (number > 0)

  00e17	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  00e1b	7e 4e		 jle	 SHORT $LN170@draw_weapo

; 6280 : 					{
; 6281 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00e1d	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00e20	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00e23	75 26		 jne	 SHORT $LN172@draw_weapo
  00e25	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00e29	75 20		 jne	 SHORT $LN172@draw_weapo

; 6282 : 						{
; 6283 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 35, 280, 61, 16, 16);

  00e2b	6a 10		 push	 16			; 00000010H
  00e2d	6a 10		 push	 16			; 00000010H
  00e2f	6a 3d		 push	 61			; 0000003dH
  00e31	68 18 01 00 00	 push	 280			; 00000118H
  00e36	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00e39	83 c0 23	 add	 eax, 35			; 00000023H
  00e3c	50		 push	 eax
  00e3d	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00e40	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00e43	51		 push	 ecx
  00e44	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6284 : 						}
; 6285 : 						else

  00e49	eb 1e		 jmp	 SHORT $LN173@draw_weapo
$LN172@draw_weapo:

; 6286 : 						{
; 6287 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 35, 316, 61, 16, 16);

  00e4b	6a 10		 push	 16			; 00000010H
  00e4d	6a 10		 push	 16			; 00000010H
  00e4f	6a 3d		 push	 61			; 0000003dH
  00e51	68 3c 01 00 00	 push	 316			; 0000013cH
  00e56	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00e59	83 c0 23	 add	 eax, 35			; 00000023H
  00e5c	50		 push	 eax
  00e5d	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00e60	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00e63	51		 push	 ecx
  00e64	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN173@draw_weapo:

; 6288 : 						}
; 6289 : 					}
; 6290 : 					else

  00e69	eb 4c		 jmp	 SHORT $LN171@draw_weapo
$LN170@draw_weapo:

; 6291 : 					{
; 6292 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00e6b	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00e6e	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00e71	75 26		 jne	 SHORT $LN174@draw_weapo
  00e73	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00e77	75 20		 jne	 SHORT $LN174@draw_weapo

; 6293 : 						{
; 6294 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 35, 262, 61, 16, 16);

  00e79	6a 10		 push	 16			; 00000010H
  00e7b	6a 10		 push	 16			; 00000010H
  00e7d	6a 3d		 push	 61			; 0000003dH
  00e7f	68 06 01 00 00	 push	 262			; 00000106H
  00e84	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00e87	83 c0 23	 add	 eax, 35			; 00000023H
  00e8a	50		 push	 eax
  00e8b	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00e8e	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00e91	51		 push	 ecx
  00e92	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6295 : 						}
; 6296 : 						else

  00e97	eb 1e		 jmp	 SHORT $LN171@draw_weapo
$LN174@draw_weapo:

; 6297 : 						{
; 6298 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 35, 298, 61, 16, 16);

  00e99	6a 10		 push	 16			; 00000010H
  00e9b	6a 10		 push	 16			; 00000010H
  00e9d	6a 3d		 push	 61			; 0000003dH
  00e9f	68 2a 01 00 00	 push	 298			; 0000012aH
  00ea4	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00ea7	83 c0 23	 add	 eax, 35			; 00000023H
  00eaa	50		 push	 eax
  00eab	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00eae	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00eb1	51		 push	 ecx
  00eb2	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN171@draw_weapo:

; 6299 : 						}
; 6300 : 					}
; 6301 : 
; 6302 : 					break;

  00eb7	e9 80 02 00 00	 jmp	 $LN16@draw_weapo
$LN176@draw_weapo:

; 6303 : 				}
; 6304 : 				case APACHE_RHS_INNER_PYLON:
; 6305 : 				case APACHE_RHS_OUTER_PYLON:
; 6306 : 				{
; 6307 : 					if (number > 3)

  00ebc	83 7d ac 03	 cmp	 DWORD PTR _number$[ebp], 3
  00ec0	7e 4e		 jle	 SHORT $LN177@draw_weapo

; 6308 : 					{
; 6309 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00ec2	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00ec5	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00ec8	75 26		 jne	 SHORT $LN179@draw_weapo
  00eca	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00ece	75 20		 jne	 SHORT $LN179@draw_weapo

; 6310 : 						{
; 6311 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 19, 280, 61, 16, 16);

  00ed0	6a 10		 push	 16			; 00000010H
  00ed2	6a 10		 push	 16			; 00000010H
  00ed4	6a 3d		 push	 61			; 0000003dH
  00ed6	68 18 01 00 00	 push	 280			; 00000118H
  00edb	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00ede	83 c0 13	 add	 eax, 19			; 00000013H
  00ee1	50		 push	 eax
  00ee2	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00ee5	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00ee8	51		 push	 ecx
  00ee9	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6312 : 						}
; 6313 : 						else

  00eee	eb 1e		 jmp	 SHORT $LN180@draw_weapo
$LN179@draw_weapo:

; 6314 : 						{
; 6315 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 19, 316, 61, 16, 16);

  00ef0	6a 10		 push	 16			; 00000010H
  00ef2	6a 10		 push	 16			; 00000010H
  00ef4	6a 3d		 push	 61			; 0000003dH
  00ef6	68 3c 01 00 00	 push	 316			; 0000013cH
  00efb	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00efe	83 c0 13	 add	 eax, 19			; 00000013H
  00f01	50		 push	 eax
  00f02	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00f05	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00f08	51		 push	 ecx
  00f09	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN180@draw_weapo:

; 6316 : 						}
; 6317 : 					}
; 6318 : 					else

  00f0e	eb 4c		 jmp	 SHORT $LN178@draw_weapo
$LN177@draw_weapo:

; 6319 : 					{
; 6320 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00f10	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00f13	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00f16	75 26		 jne	 SHORT $LN181@draw_weapo
  00f18	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00f1c	75 20		 jne	 SHORT $LN181@draw_weapo

; 6321 : 						{
; 6322 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 19, 262, 61, 16, 16);

  00f1e	6a 10		 push	 16			; 00000010H
  00f20	6a 10		 push	 16			; 00000010H
  00f22	6a 3d		 push	 61			; 0000003dH
  00f24	68 06 01 00 00	 push	 262			; 00000106H
  00f29	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00f2c	83 c0 13	 add	 eax, 19			; 00000013H
  00f2f	50		 push	 eax
  00f30	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00f33	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00f36	51		 push	 ecx
  00f37	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6323 : 						}
; 6324 : 						else

  00f3c	eb 1e		 jmp	 SHORT $LN178@draw_weapo
$LN181@draw_weapo:

; 6325 : 						{
; 6326 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 19, 298, 61, 16, 16);

  00f3e	6a 10		 push	 16			; 00000010H
  00f40	6a 10		 push	 16			; 00000010H
  00f42	6a 3d		 push	 61			; 0000003dH
  00f44	68 2a 01 00 00	 push	 298			; 0000012aH
  00f49	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00f4c	83 c0 13	 add	 eax, 19			; 00000013H
  00f4f	50		 push	 eax
  00f50	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00f53	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00f56	51		 push	 ecx
  00f57	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN178@draw_weapo:

; 6327 : 						}
; 6328 : 					}
; 6329 : 
; 6330 : 					if (number > 2)

  00f5c	83 7d ac 02	 cmp	 DWORD PTR _number$[ebp], 2
  00f60	7e 4e		 jle	 SHORT $LN183@draw_weapo

; 6331 : 					{
; 6332 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00f62	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00f65	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00f68	75 26		 jne	 SHORT $LN185@draw_weapo
  00f6a	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00f6e	75 20		 jne	 SHORT $LN185@draw_weapo

; 6333 : 						{
; 6334 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 19, 280, 61, 16, 16);

  00f70	6a 10		 push	 16			; 00000010H
  00f72	6a 10		 push	 16			; 00000010H
  00f74	6a 3d		 push	 61			; 0000003dH
  00f76	68 18 01 00 00	 push	 280			; 00000118H
  00f7b	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00f7e	83 c0 13	 add	 eax, 19			; 00000013H
  00f81	50		 push	 eax
  00f82	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00f85	83 e9 06	 sub	 ecx, 6
  00f88	51		 push	 ecx
  00f89	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6335 : 						}
; 6336 : 						else

  00f8e	eb 1e		 jmp	 SHORT $LN186@draw_weapo
$LN185@draw_weapo:

; 6337 : 						{
; 6338 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 19, 316, 61, 16, 16);

  00f90	6a 10		 push	 16			; 00000010H
  00f92	6a 10		 push	 16			; 00000010H
  00f94	6a 3d		 push	 61			; 0000003dH
  00f96	68 3c 01 00 00	 push	 316			; 0000013cH
  00f9b	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00f9e	83 c0 13	 add	 eax, 19			; 00000013H
  00fa1	50		 push	 eax
  00fa2	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00fa5	83 e9 06	 sub	 ecx, 6
  00fa8	51		 push	 ecx
  00fa9	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN186@draw_weapo:

; 6339 : 						}
; 6340 : 					}
; 6341 : 					else

  00fae	eb 4c		 jmp	 SHORT $LN184@draw_weapo
$LN183@draw_weapo:

; 6342 : 					{
; 6343 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00fb0	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00fb3	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00fb6	75 26		 jne	 SHORT $LN187@draw_weapo
  00fb8	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00fbc	75 20		 jne	 SHORT $LN187@draw_weapo

; 6344 : 						{
; 6345 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 19, 262, 61, 16, 16);

  00fbe	6a 10		 push	 16			; 00000010H
  00fc0	6a 10		 push	 16			; 00000010H
  00fc2	6a 3d		 push	 61			; 0000003dH
  00fc4	68 06 01 00 00	 push	 262			; 00000106H
  00fc9	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00fcc	83 c0 13	 add	 eax, 19			; 00000013H
  00fcf	50		 push	 eax
  00fd0	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00fd3	83 e9 06	 sub	 ecx, 6
  00fd6	51		 push	 ecx
  00fd7	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6346 : 						}
; 6347 : 						else

  00fdc	eb 1e		 jmp	 SHORT $LN184@draw_weapo
$LN187@draw_weapo:

; 6348 : 						{
; 6349 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 19, 298, 61, 16, 16);

  00fde	6a 10		 push	 16			; 00000010H
  00fe0	6a 10		 push	 16			; 00000010H
  00fe2	6a 3d		 push	 61			; 0000003dH
  00fe4	68 2a 01 00 00	 push	 298			; 0000012aH
  00fe9	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00fec	83 c0 13	 add	 eax, 19			; 00000013H
  00fef	50		 push	 eax
  00ff0	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00ff3	83 e9 06	 sub	 ecx, 6
  00ff6	51		 push	 ecx
  00ff7	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN184@draw_weapo:

; 6350 : 						}
; 6351 : 					}
; 6352 : 
; 6353 : 					if (number > 1)

  00ffc	83 7d ac 01	 cmp	 DWORD PTR _number$[ebp], 1
  01000	7e 4e		 jle	 SHORT $LN189@draw_weapo

; 6354 : 					{
; 6355 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01002	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01005	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01008	75 26		 jne	 SHORT $LN191@draw_weapo
  0100a	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0100e	75 20		 jne	 SHORT $LN191@draw_weapo

; 6356 : 						{
; 6357 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 35, 280, 61, 16, 16);

  01010	6a 10		 push	 16			; 00000010H
  01012	6a 10		 push	 16			; 00000010H
  01014	6a 3d		 push	 61			; 0000003dH
  01016	68 18 01 00 00	 push	 280			; 00000118H
  0101b	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0101e	83 c0 23	 add	 eax, 35			; 00000023H
  01021	50		 push	 eax
  01022	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01025	83 c1 0a	 add	 ecx, 10			; 0000000aH
  01028	51		 push	 ecx
  01029	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6358 : 						}
; 6359 : 						else

  0102e	eb 1e		 jmp	 SHORT $LN192@draw_weapo
$LN191@draw_weapo:

; 6360 : 						{
; 6361 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 35, 316, 61, 16, 16);

  01030	6a 10		 push	 16			; 00000010H
  01032	6a 10		 push	 16			; 00000010H
  01034	6a 3d		 push	 61			; 0000003dH
  01036	68 3c 01 00 00	 push	 316			; 0000013cH
  0103b	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0103e	83 c0 23	 add	 eax, 35			; 00000023H
  01041	50		 push	 eax
  01042	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01045	83 c1 0a	 add	 ecx, 10			; 0000000aH
  01048	51		 push	 ecx
  01049	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN192@draw_weapo:

; 6362 : 						}
; 6363 : 					}
; 6364 : 					else

  0104e	eb 4c		 jmp	 SHORT $LN190@draw_weapo
$LN189@draw_weapo:

; 6365 : 					{
; 6366 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01050	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01053	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01056	75 26		 jne	 SHORT $LN193@draw_weapo
  01058	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0105c	75 20		 jne	 SHORT $LN193@draw_weapo

; 6367 : 						{
; 6368 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 35, 262, 61, 16, 16);

  0105e	6a 10		 push	 16			; 00000010H
  01060	6a 10		 push	 16			; 00000010H
  01062	6a 3d		 push	 61			; 0000003dH
  01064	68 06 01 00 00	 push	 262			; 00000106H
  01069	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0106c	83 c0 23	 add	 eax, 35			; 00000023H
  0106f	50		 push	 eax
  01070	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01073	83 c1 0a	 add	 ecx, 10			; 0000000aH
  01076	51		 push	 ecx
  01077	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6369 : 						}
; 6370 : 						else

  0107c	eb 1e		 jmp	 SHORT $LN190@draw_weapo
$LN193@draw_weapo:

; 6371 : 						{
; 6372 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 35, 298, 61, 16, 16);

  0107e	6a 10		 push	 16			; 00000010H
  01080	6a 10		 push	 16			; 00000010H
  01082	6a 3d		 push	 61			; 0000003dH
  01084	68 2a 01 00 00	 push	 298			; 0000012aH
  01089	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0108c	83 c0 23	 add	 eax, 35			; 00000023H
  0108f	50		 push	 eax
  01090	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01093	83 c1 0a	 add	 ecx, 10			; 0000000aH
  01096	51		 push	 ecx
  01097	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN190@draw_weapo:

; 6373 : 						}
; 6374 : 					}
; 6375 : 
; 6376 : 					if (number > 0)

  0109c	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  010a0	7e 4e		 jle	 SHORT $LN195@draw_weapo

; 6377 : 					{
; 6378 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  010a2	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  010a5	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  010a8	75 26		 jne	 SHORT $LN197@draw_weapo
  010aa	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  010ae	75 20		 jne	 SHORT $LN197@draw_weapo

; 6379 : 						{
; 6380 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 35, 280, 61, 16, 16);

  010b0	6a 10		 push	 16			; 00000010H
  010b2	6a 10		 push	 16			; 00000010H
  010b4	6a 3d		 push	 61			; 0000003dH
  010b6	68 18 01 00 00	 push	 280			; 00000118H
  010bb	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  010be	83 c0 23	 add	 eax, 35			; 00000023H
  010c1	50		 push	 eax
  010c2	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  010c5	83 e9 06	 sub	 ecx, 6
  010c8	51		 push	 ecx
  010c9	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6381 : 						}
; 6382 : 						else

  010ce	eb 1e		 jmp	 SHORT $LN198@draw_weapo
$LN197@draw_weapo:

; 6383 : 						{
; 6384 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 35, 316, 61, 16, 16);

  010d0	6a 10		 push	 16			; 00000010H
  010d2	6a 10		 push	 16			; 00000010H
  010d4	6a 3d		 push	 61			; 0000003dH
  010d6	68 3c 01 00 00	 push	 316			; 0000013cH
  010db	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  010de	83 c0 23	 add	 eax, 35			; 00000023H
  010e1	50		 push	 eax
  010e2	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  010e5	83 e9 06	 sub	 ecx, 6
  010e8	51		 push	 ecx
  010e9	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN198@draw_weapo:

; 6385 : 						}
; 6386 : 					}
; 6387 : 					else

  010ee	eb 4c		 jmp	 SHORT $LN16@draw_weapo
$LN195@draw_weapo:

; 6388 : 					{
; 6389 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  010f0	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  010f3	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  010f6	75 26		 jne	 SHORT $LN199@draw_weapo
  010f8	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  010fc	75 20		 jne	 SHORT $LN199@draw_weapo

; 6390 : 						{
; 6391 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 35, 262, 61, 16, 16);

  010fe	6a 10		 push	 16			; 00000010H
  01100	6a 10		 push	 16			; 00000010H
  01102	6a 3d		 push	 61			; 0000003dH
  01104	68 06 01 00 00	 push	 262			; 00000106H
  01109	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0110c	83 c0 23	 add	 eax, 35			; 00000023H
  0110f	50		 push	 eax
  01110	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01113	83 e9 06	 sub	 ecx, 6
  01116	51		 push	 ecx
  01117	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6392 : 						}
; 6393 : 						else

  0111c	eb 1e		 jmp	 SHORT $LN16@draw_weapo
$LN199@draw_weapo:

; 6394 : 						{
; 6395 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 35, 298, 61, 16, 16);

  0111e	6a 10		 push	 16			; 00000010H
  01120	6a 10		 push	 16			; 00000010H
  01122	6a 3d		 push	 61			; 0000003dH
  01124	68 2a 01 00 00	 push	 298			; 0000012aH
  01129	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0112c	83 c0 23	 add	 eax, 35			; 00000023H
  0112f	50		 push	 eax
  01130	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01133	83 e9 06	 sub	 ecx, 6
  01136	51		 push	 ecx
  01137	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN16@draw_weapo:

; 6396 : 						}
; 6397 : 					}
; 6398 : 
; 6399 : 					break;
; 6400 : 				}
; 6401 : 			}
; 6402 : 
; 6403 : 			//
; 6404 : 			// damage cross
; 6405 : 			//
; 6406 : 
; 6407 : 			if (damaged)

  0113c	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01140	0f 84 87 00 00
	00		 je	 $LN201@draw_weapo

; 6408 : 			{
; 6409 : 				switch (heading_depth)

  01146	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  01149	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv890[ebp], eax
  0114f	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv890[ebp], 3
  01156	77 75		 ja	 SHORT $LN201@draw_weapo
  01158	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv890[ebp]
  0115e	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN392@draw_weapo[ecx*4]
$LN202@draw_weapo:

; 6410 : 				{
; 6411 : 					case APACHE_LHS_INNER_PYLON:
; 6412 : 					{
; 6413 : 						draw_sprite (47, 196, 334, 61, 32, 32);

  01165	6a 20		 push	 32			; 00000020H
  01167	6a 20		 push	 32			; 00000020H
  01169	6a 3d		 push	 61			; 0000003dH
  0116b	68 4e 01 00 00	 push	 334			; 0000014eH
  01170	68 c4 00 00 00	 push	 196			; 000000c4H
  01175	6a 2f		 push	 47			; 0000002fH
  01177	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6414 : 
; 6415 : 						break;

  0117c	eb 4f		 jmp	 SHORT $LN201@draw_weapo
$LN203@draw_weapo:

; 6416 : 					}
; 6417 : 					case APACHE_RHS_INNER_PYLON:
; 6418 : 					{
; 6419 : 						draw_sprite (185, 196, 334, 61, 32, 32);

  0117e	6a 20		 push	 32			; 00000020H
  01180	6a 20		 push	 32			; 00000020H
  01182	6a 3d		 push	 61			; 0000003dH
  01184	68 4e 01 00 00	 push	 334			; 0000014eH
  01189	68 c4 00 00 00	 push	 196			; 000000c4H
  0118e	68 b9 00 00 00	 push	 185			; 000000b9H
  01193	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6420 : 
; 6421 : 						break;

  01198	eb 33		 jmp	 SHORT $LN201@draw_weapo
$LN204@draw_weapo:

; 6422 : 					}
; 6423 : 					case APACHE_LHS_OUTER_PYLON:
; 6424 : 					{
; 6425 : 						draw_sprite (15, 196, 334, 61, 32, 32);

  0119a	6a 20		 push	 32			; 00000020H
  0119c	6a 20		 push	 32			; 00000020H
  0119e	6a 3d		 push	 61			; 0000003dH
  011a0	68 4e 01 00 00	 push	 334			; 0000014eH
  011a5	68 c4 00 00 00	 push	 196			; 000000c4H
  011aa	6a 0f		 push	 15			; 0000000fH
  011ac	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6426 : 
; 6427 : 						break;

  011b1	eb 1a		 jmp	 SHORT $LN201@draw_weapo
$LN205@draw_weapo:

; 6428 : 					}
; 6429 : 					case APACHE_RHS_OUTER_PYLON:
; 6430 : 					{
; 6431 : 						draw_sprite (217, 196, 334, 61, 32, 32);

  011b3	6a 20		 push	 32			; 00000020H
  011b5	6a 20		 push	 32			; 00000020H
  011b7	6a 3d		 push	 61			; 0000003dH
  011b9	68 4e 01 00 00	 push	 334			; 0000014eH
  011be	68 c4 00 00 00	 push	 196			; 000000c4H
  011c3	68 d9 00 00 00	 push	 217			; 000000d9H
  011c8	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN201@draw_weapo:

; 6432 : 
; 6433 : 						break;
; 6434 : 					}
; 6435 : 				}
; 6436 : 			}
; 6437 : 
; 6438 : 			//
; 6439 : 			// type
; 6440 : 			//
; 6441 : 
; 6442 : 			switch (heading_depth)

  011cd	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  011d0	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv916[ebp], eax
  011d6	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv916[ebp], 3
  011dd	77 4b		 ja	 SHORT $LN20@draw_weapo
  011df	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv916[ebp]
  011e5	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN393@draw_weapo[ecx*4]
$LN206@draw_weapo:

; 6443 : 			{
; 6444 : 				case APACHE_LHS_INNER_PYLON:
; 6445 : 				{
; 6446 : 					hardpoint_x = 47;

  011ec	c7 45 a4 2f 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 47 ; 0000002fH

; 6447 : 					hardpoint_y = 234;

  011f3	c7 45 a0 ea 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 234 ; 000000eaH

; 6448 : 
; 6449 : 					break;

  011fa	eb 2e		 jmp	 SHORT $LN20@draw_weapo
$LN207@draw_weapo:

; 6450 : 				}
; 6451 : 				case APACHE_RHS_INNER_PYLON:
; 6452 : 				{
; 6453 : 					hardpoint_x = 185;

  011fc	c7 45 a4 b9 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 185 ; 000000b9H

; 6454 : 					hardpoint_y = 234;

  01203	c7 45 a0 ea 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 234 ; 000000eaH

; 6455 : 
; 6456 : 					break;

  0120a	eb 1e		 jmp	 SHORT $LN20@draw_weapo
$LN208@draw_weapo:

; 6457 : 				}
; 6458 : 				case APACHE_LHS_OUTER_PYLON:
; 6459 : 				{
; 6460 : 					hardpoint_x = 15;

  0120c	c7 45 a4 0f 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 15 ; 0000000fH

; 6461 : 					hardpoint_y = 234;

  01213	c7 45 a0 ea 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 234 ; 000000eaH

; 6462 : 
; 6463 : 					break;

  0121a	eb 0e		 jmp	 SHORT $LN20@draw_weapo
$LN209@draw_weapo:

; 6464 : 				}
; 6465 : 				case APACHE_RHS_OUTER_PYLON:
; 6466 : 				{
; 6467 : 					hardpoint_x = 217;

  0121c	c7 45 a4 d9 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 217 ; 000000d9H

; 6468 : 					hardpoint_y = 234;

  01223	c7 45 a0 ea 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 234 ; 000000eaH
$LN20@draw_weapo:

; 6469 : 
; 6470 : 					break;
; 6471 : 				}
; 6472 : 			}
; 6473 : 
; 6474 : 			if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AGM114K_HELLFIRE_II)

  0122a	83 7d 94 2e	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 46 ; 0000002eH
  0122e	75 42		 jne	 SHORT $LN210@draw_weapo

; 6475 : 			{
; 6476 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  01230	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01233	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01236	75 20		 jne	 SHORT $LN212@draw_weapo
  01238	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0123c	75 1a		 jne	 SHORT $LN212@draw_weapo

; 6477 : 				{
; 6478 : 					draw_sprite (hardpoint_x, hardpoint_y, 262, 3, 31, 12);

  0123e	6a 0c		 push	 12			; 0000000cH
  01240	6a 1f		 push	 31			; 0000001fH
  01242	6a 03		 push	 3
  01244	68 06 01 00 00	 push	 262			; 00000106H
  01249	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0124c	50		 push	 eax
  0124d	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01250	51		 push	 ecx
  01251	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6479 : 				}
; 6480 : 				else

  01256	eb 18		 jmp	 SHORT $LN213@draw_weapo
$LN212@draw_weapo:

; 6481 : 				{
; 6482 : 					draw_sprite (hardpoint_x, hardpoint_y, 342, 3, 31, 12);

  01258	6a 0c		 push	 12			; 0000000cH
  0125a	6a 1f		 push	 31			; 0000001fH
  0125c	6a 03		 push	 3
  0125e	68 56 01 00 00	 push	 342			; 00000156H
  01263	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01266	50		 push	 eax
  01267	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0126a	51		 push	 ecx
  0126b	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN213@draw_weapo:

; 6483 : 				}
; 6484 : 			}
; 6485 : 			else

  01270	eb 40		 jmp	 SHORT $LN211@draw_weapo
$LN210@draw_weapo:

; 6486 : 			{
; 6487 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  01272	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01275	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01278	75 20		 jne	 SHORT $LN214@draw_weapo
  0127a	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0127e	75 1a		 jne	 SHORT $LN214@draw_weapo

; 6488 : 				{
; 6489 : 					draw_sprite (hardpoint_x, hardpoint_y, 295, 3, 31, 12);

  01280	6a 0c		 push	 12			; 0000000cH
  01282	6a 1f		 push	 31			; 0000001fH
  01284	6a 03		 push	 3
  01286	68 27 01 00 00	 push	 295			; 00000127H
  0128b	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0128e	50		 push	 eax
  0128f	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01292	51		 push	 ecx
  01293	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6490 : 				}
; 6491 : 				else

  01298	eb 18		 jmp	 SHORT $LN211@draw_weapo
$LN214@draw_weapo:

; 6492 : 				{
; 6493 : 					draw_sprite (hardpoint_x, hardpoint_y, 375, 3, 31, 12);

  0129a	6a 0c		 push	 12			; 0000000cH
  0129c	6a 1f		 push	 31			; 0000001fH
  0129e	6a 03		 push	 3
  012a0	68 77 01 00 00	 push	 375			; 00000177H
  012a5	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  012a8	50		 push	 eax
  012a9	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  012ac	51		 push	 ecx
  012ad	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN211@draw_weapo:

; 6494 : 				}
; 6495 : 			}
; 6496 : 		}
; 6497 : 		else

  012b2	e9 b3 07 00 00	 jmp	 $LN141@draw_weapo
$LN143@draw_weapo:

; 6498 : 		{
; 6499 : 			////////////////////////////////////////
; 6500 : 			//
; 6501 : 			// SMALL
; 6502 : 			//
; 6503 : 			////////////////////////////////////////
; 6504 : 
; 6505 : 			//
; 6506 : 			// pylon
; 6507 : 			//
; 6508 : 
; 6509 : 			switch (heading_depth)

  012b7	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  012ba	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv947[ebp], eax
  012c0	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv947[ebp], 3
  012c7	77 4b		 ja	 SHORT $LN22@draw_weapo
  012c9	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv947[ebp]
  012cf	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN394@draw_weapo[ecx*4]
$LN216@draw_weapo:

; 6510 : 			{
; 6511 : 				case APACHE_LHS_INNER_PYLON:
; 6512 : 				{
; 6513 : 					hardpoint_x = 29;

  012d6	c7 45 a4 1d 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 29 ; 0000001dH

; 6514 : 					hardpoint_y = 348;

  012dd	c7 45 a0 5c 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 348 ; 0000015cH

; 6515 : 
; 6516 : 					break;

  012e4	eb 2e		 jmp	 SHORT $LN22@draw_weapo
$LN217@draw_weapo:

; 6517 : 				}
; 6518 : 				case APACHE_RHS_INNER_PYLON:
; 6519 : 				{
; 6520 : 					hardpoint_x = 98;

  012e6	c7 45 a4 62 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 98 ; 00000062H

; 6521 : 					hardpoint_y = 348;

  012ed	c7 45 a0 5c 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 348 ; 0000015cH

; 6522 : 
; 6523 : 					break;

  012f4	eb 1e		 jmp	 SHORT $LN22@draw_weapo
$LN218@draw_weapo:

; 6524 : 				}
; 6525 : 				case APACHE_LHS_OUTER_PYLON:
; 6526 : 				{
; 6527 : 					hardpoint_x = 13;

  012f6	c7 45 a4 0d 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 13 ; 0000000dH

; 6528 : 					hardpoint_y = 348;

  012fd	c7 45 a0 5c 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 348 ; 0000015cH

; 6529 : 
; 6530 : 					break;

  01304	eb 0e		 jmp	 SHORT $LN22@draw_weapo
$LN219@draw_weapo:

; 6531 : 				}
; 6532 : 				case APACHE_RHS_OUTER_PYLON:
; 6533 : 				{
; 6534 : 					hardpoint_x = 114;

  01306	c7 45 a4 72 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 114 ; 00000072H

; 6535 : 					hardpoint_y = 348;

  0130d	c7 45 a0 5c 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 348 ; 0000015cH
$LN22@draw_weapo:

; 6536 : 
; 6537 : 					break;
; 6538 : 				}
; 6539 : 			}
; 6540 : 
; 6541 : 			if ((weapon_sub_type == selected_weapon) && (!damaged))

  01314	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01317	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  0131a	75 23		 jne	 SHORT $LN220@draw_weapo
  0131c	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01320	75 1d		 jne	 SHORT $LN220@draw_weapo

; 6542 : 			{
; 6543 : 				draw_sprite (hardpoint_x, hardpoint_y, 133, 299, 10, 9);

  01322	6a 09		 push	 9
  01324	6a 0a		 push	 10			; 0000000aH
  01326	68 2b 01 00 00	 push	 299			; 0000012bH
  0132b	68 85 00 00 00	 push	 133			; 00000085H
  01330	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01333	50		 push	 eax
  01334	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01337	51		 push	 ecx
  01338	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6544 : 			}
; 6545 : 			else

  0133d	eb 1b		 jmp	 SHORT $LN221@draw_weapo
$LN220@draw_weapo:

; 6546 : 			{
; 6547 : 				draw_sprite (hardpoint_x, hardpoint_y, 144, 299, 10, 9);

  0133f	6a 09		 push	 9
  01341	6a 0a		 push	 10			; 0000000aH
  01343	68 2b 01 00 00	 push	 299			; 0000012bH
  01348	68 90 00 00 00	 push	 144			; 00000090H
  0134d	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01350	50		 push	 eax
  01351	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01354	51		 push	 ecx
  01355	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN221@draw_weapo:

; 6548 : 			}
; 6549 : 
; 6550 : 			//
; 6551 : 			// missiles
; 6552 : 			//
; 6553 : 
; 6554 : 			switch (heading_depth)

  0135a	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  0135d	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv963[ebp], eax
  01363	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv963[ebp], 3
  0136a	0f 87 72 05 00
	00		 ja	 $LN24@draw_weapo
  01370	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv963[ebp]
  01376	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN395@draw_weapo[ecx*4]
$LN222@draw_weapo:

; 6555 : 			{
; 6556 : 				case APACHE_LHS_INNER_PYLON:
; 6557 : 				case APACHE_LHS_OUTER_PYLON:
; 6558 : 				{
; 6559 : 					if (number > 3)

  0137d	83 7d ac 03	 cmp	 DWORD PTR _number$[ebp], 3
  01381	7e 54		 jle	 SHORT $LN223@draw_weapo

; 6560 : 					{
; 6561 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01383	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01386	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01389	75 29		 jne	 SHORT $LN225@draw_weapo
  0138b	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0138f	75 23		 jne	 SHORT $LN225@draw_weapo

; 6562 : 						{
; 6563 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 10, 142, 290, 8, 8);

  01391	6a 08		 push	 8
  01393	6a 08		 push	 8
  01395	68 22 01 00 00	 push	 290			; 00000122H
  0139a	68 8e 00 00 00	 push	 142			; 0000008eH
  0139f	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  013a2	83 c0 0a	 add	 eax, 10			; 0000000aH
  013a5	50		 push	 eax
  013a6	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  013a9	83 e9 03	 sub	 ecx, 3
  013ac	51		 push	 ecx
  013ad	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6564 : 						}
; 6565 : 						else

  013b2	eb 21		 jmp	 SHORT $LN226@draw_weapo
$LN225@draw_weapo:

; 6566 : 						{
; 6567 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 10, 160, 290, 8, 8);

  013b4	6a 08		 push	 8
  013b6	6a 08		 push	 8
  013b8	68 22 01 00 00	 push	 290			; 00000122H
  013bd	68 a0 00 00 00	 push	 160			; 000000a0H
  013c2	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  013c5	83 c0 0a	 add	 eax, 10			; 0000000aH
  013c8	50		 push	 eax
  013c9	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  013cc	83 e9 03	 sub	 ecx, 3
  013cf	51		 push	 ecx
  013d0	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN226@draw_weapo:

; 6568 : 						}
; 6569 : 					}
; 6570 : 					else

  013d5	eb 52		 jmp	 SHORT $LN224@draw_weapo
$LN223@draw_weapo:

; 6571 : 					{
; 6572 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  013d7	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  013da	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  013dd	75 29		 jne	 SHORT $LN227@draw_weapo
  013df	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  013e3	75 23		 jne	 SHORT $LN227@draw_weapo

; 6573 : 						{
; 6574 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 10, 133, 290, 8, 8);

  013e5	6a 08		 push	 8
  013e7	6a 08		 push	 8
  013e9	68 22 01 00 00	 push	 290			; 00000122H
  013ee	68 85 00 00 00	 push	 133			; 00000085H
  013f3	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  013f6	83 c0 0a	 add	 eax, 10			; 0000000aH
  013f9	50		 push	 eax
  013fa	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  013fd	83 e9 03	 sub	 ecx, 3
  01400	51		 push	 ecx
  01401	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6575 : 						}
; 6576 : 						else

  01406	eb 21		 jmp	 SHORT $LN224@draw_weapo
$LN227@draw_weapo:

; 6577 : 						{
; 6578 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 10, 151, 290, 8, 8);

  01408	6a 08		 push	 8
  0140a	6a 08		 push	 8
  0140c	68 22 01 00 00	 push	 290			; 00000122H
  01411	68 97 00 00 00	 push	 151			; 00000097H
  01416	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01419	83 c0 0a	 add	 eax, 10			; 0000000aH
  0141c	50		 push	 eax
  0141d	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01420	83 e9 03	 sub	 ecx, 3
  01423	51		 push	 ecx
  01424	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN224@draw_weapo:

; 6579 : 						}
; 6580 : 					}
; 6581 : 
; 6582 : 					if (number > 2)

  01429	83 7d ac 02	 cmp	 DWORD PTR _number$[ebp], 2
  0142d	7e 54		 jle	 SHORT $LN229@draw_weapo

; 6583 : 					{
; 6584 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  0142f	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01432	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01435	75 29		 jne	 SHORT $LN231@draw_weapo
  01437	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0143b	75 23		 jne	 SHORT $LN231@draw_weapo

; 6585 : 						{
; 6586 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 10, 142, 290, 8, 8);

  0143d	6a 08		 push	 8
  0143f	6a 08		 push	 8
  01441	68 22 01 00 00	 push	 290			; 00000122H
  01446	68 8e 00 00 00	 push	 142			; 0000008eH
  0144b	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0144e	83 c0 0a	 add	 eax, 10			; 0000000aH
  01451	50		 push	 eax
  01452	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01455	83 c1 05	 add	 ecx, 5
  01458	51		 push	 ecx
  01459	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6587 : 						}
; 6588 : 						else

  0145e	eb 21		 jmp	 SHORT $LN232@draw_weapo
$LN231@draw_weapo:

; 6589 : 						{
; 6590 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 10, 160, 290, 8, 8);

  01460	6a 08		 push	 8
  01462	6a 08		 push	 8
  01464	68 22 01 00 00	 push	 290			; 00000122H
  01469	68 a0 00 00 00	 push	 160			; 000000a0H
  0146e	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01471	83 c0 0a	 add	 eax, 10			; 0000000aH
  01474	50		 push	 eax
  01475	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01478	83 c1 05	 add	 ecx, 5
  0147b	51		 push	 ecx
  0147c	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN232@draw_weapo:

; 6591 : 						}
; 6592 : 					}
; 6593 : 					else

  01481	eb 52		 jmp	 SHORT $LN230@draw_weapo
$LN229@draw_weapo:

; 6594 : 					{
; 6595 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01483	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01486	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01489	75 29		 jne	 SHORT $LN233@draw_weapo
  0148b	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0148f	75 23		 jne	 SHORT $LN233@draw_weapo

; 6596 : 						{
; 6597 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 10, 133, 290, 8, 8);

  01491	6a 08		 push	 8
  01493	6a 08		 push	 8
  01495	68 22 01 00 00	 push	 290			; 00000122H
  0149a	68 85 00 00 00	 push	 133			; 00000085H
  0149f	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  014a2	83 c0 0a	 add	 eax, 10			; 0000000aH
  014a5	50		 push	 eax
  014a6	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  014a9	83 c1 05	 add	 ecx, 5
  014ac	51		 push	 ecx
  014ad	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6598 : 						}
; 6599 : 						else

  014b2	eb 21		 jmp	 SHORT $LN230@draw_weapo
$LN233@draw_weapo:

; 6600 : 						{
; 6601 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 10, 151, 290, 8, 8);

  014b4	6a 08		 push	 8
  014b6	6a 08		 push	 8
  014b8	68 22 01 00 00	 push	 290			; 00000122H
  014bd	68 97 00 00 00	 push	 151			; 00000097H
  014c2	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  014c5	83 c0 0a	 add	 eax, 10			; 0000000aH
  014c8	50		 push	 eax
  014c9	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  014cc	83 c1 05	 add	 ecx, 5
  014cf	51		 push	 ecx
  014d0	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN230@draw_weapo:

; 6602 : 						}
; 6603 : 					}
; 6604 : 
; 6605 : 					if (number > 1)

  014d5	83 7d ac 01	 cmp	 DWORD PTR _number$[ebp], 1
  014d9	7e 54		 jle	 SHORT $LN235@draw_weapo

; 6606 : 					{
; 6607 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  014db	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  014de	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  014e1	75 29		 jne	 SHORT $LN237@draw_weapo
  014e3	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  014e7	75 23		 jne	 SHORT $LN237@draw_weapo

; 6608 : 						{
; 6609 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 18, 142, 290, 8, 8);

  014e9	6a 08		 push	 8
  014eb	6a 08		 push	 8
  014ed	68 22 01 00 00	 push	 290			; 00000122H
  014f2	68 8e 00 00 00	 push	 142			; 0000008eH
  014f7	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  014fa	83 c0 12	 add	 eax, 18			; 00000012H
  014fd	50		 push	 eax
  014fe	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01501	83 e9 03	 sub	 ecx, 3
  01504	51		 push	 ecx
  01505	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6610 : 						}
; 6611 : 						else

  0150a	eb 21		 jmp	 SHORT $LN238@draw_weapo
$LN237@draw_weapo:

; 6612 : 						{
; 6613 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 18, 160, 290, 8, 8);

  0150c	6a 08		 push	 8
  0150e	6a 08		 push	 8
  01510	68 22 01 00 00	 push	 290			; 00000122H
  01515	68 a0 00 00 00	 push	 160			; 000000a0H
  0151a	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0151d	83 c0 12	 add	 eax, 18			; 00000012H
  01520	50		 push	 eax
  01521	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01524	83 e9 03	 sub	 ecx, 3
  01527	51		 push	 ecx
  01528	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN238@draw_weapo:

; 6614 : 						}
; 6615 : 					}
; 6616 : 					else

  0152d	eb 52		 jmp	 SHORT $LN236@draw_weapo
$LN235@draw_weapo:

; 6617 : 					{
; 6618 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  0152f	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01532	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01535	75 29		 jne	 SHORT $LN239@draw_weapo
  01537	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0153b	75 23		 jne	 SHORT $LN239@draw_weapo

; 6619 : 						{
; 6620 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 18, 133, 290, 8, 8);

  0153d	6a 08		 push	 8
  0153f	6a 08		 push	 8
  01541	68 22 01 00 00	 push	 290			; 00000122H
  01546	68 85 00 00 00	 push	 133			; 00000085H
  0154b	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0154e	83 c0 12	 add	 eax, 18			; 00000012H
  01551	50		 push	 eax
  01552	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01555	83 e9 03	 sub	 ecx, 3
  01558	51		 push	 ecx
  01559	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6621 : 						}
; 6622 : 						else

  0155e	eb 21		 jmp	 SHORT $LN236@draw_weapo
$LN239@draw_weapo:

; 6623 : 						{
; 6624 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 18, 151, 290, 8, 8);

  01560	6a 08		 push	 8
  01562	6a 08		 push	 8
  01564	68 22 01 00 00	 push	 290			; 00000122H
  01569	68 97 00 00 00	 push	 151			; 00000097H
  0156e	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01571	83 c0 12	 add	 eax, 18			; 00000012H
  01574	50		 push	 eax
  01575	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01578	83 e9 03	 sub	 ecx, 3
  0157b	51		 push	 ecx
  0157c	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN236@draw_weapo:

; 6625 : 						}
; 6626 : 					}
; 6627 : 
; 6628 : 					if (number > 0)

  01581	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  01585	7e 54		 jle	 SHORT $LN241@draw_weapo

; 6629 : 					{
; 6630 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01587	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0158a	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  0158d	75 29		 jne	 SHORT $LN243@draw_weapo
  0158f	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01593	75 23		 jne	 SHORT $LN243@draw_weapo

; 6631 : 						{
; 6632 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 18, 142, 290, 8, 8);

  01595	6a 08		 push	 8
  01597	6a 08		 push	 8
  01599	68 22 01 00 00	 push	 290			; 00000122H
  0159e	68 8e 00 00 00	 push	 142			; 0000008eH
  015a3	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  015a6	83 c0 12	 add	 eax, 18			; 00000012H
  015a9	50		 push	 eax
  015aa	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  015ad	83 c1 05	 add	 ecx, 5
  015b0	51		 push	 ecx
  015b1	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6633 : 						}
; 6634 : 						else

  015b6	eb 21		 jmp	 SHORT $LN244@draw_weapo
$LN243@draw_weapo:

; 6635 : 						{
; 6636 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 18, 160, 290, 8, 8);

  015b8	6a 08		 push	 8
  015ba	6a 08		 push	 8
  015bc	68 22 01 00 00	 push	 290			; 00000122H
  015c1	68 a0 00 00 00	 push	 160			; 000000a0H
  015c6	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  015c9	83 c0 12	 add	 eax, 18			; 00000012H
  015cc	50		 push	 eax
  015cd	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  015d0	83 c1 05	 add	 ecx, 5
  015d3	51		 push	 ecx
  015d4	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN244@draw_weapo:

; 6637 : 						}
; 6638 : 					}
; 6639 : 					else

  015d9	eb 52		 jmp	 SHORT $LN242@draw_weapo
$LN241@draw_weapo:

; 6640 : 					{
; 6641 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  015db	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  015de	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  015e1	75 29		 jne	 SHORT $LN245@draw_weapo
  015e3	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  015e7	75 23		 jne	 SHORT $LN245@draw_weapo

; 6642 : 						{
; 6643 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 18, 133, 290, 8, 8);

  015e9	6a 08		 push	 8
  015eb	6a 08		 push	 8
  015ed	68 22 01 00 00	 push	 290			; 00000122H
  015f2	68 85 00 00 00	 push	 133			; 00000085H
  015f7	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  015fa	83 c0 12	 add	 eax, 18			; 00000012H
  015fd	50		 push	 eax
  015fe	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01601	83 c1 05	 add	 ecx, 5
  01604	51		 push	 ecx
  01605	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6644 : 						}
; 6645 : 						else

  0160a	eb 21		 jmp	 SHORT $LN242@draw_weapo
$LN245@draw_weapo:

; 6646 : 						{
; 6647 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 18, 151, 290, 8, 8);

  0160c	6a 08		 push	 8
  0160e	6a 08		 push	 8
  01610	68 22 01 00 00	 push	 290			; 00000122H
  01615	68 97 00 00 00	 push	 151			; 00000097H
  0161a	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0161d	83 c0 12	 add	 eax, 18			; 00000012H
  01620	50		 push	 eax
  01621	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01624	83 c1 05	 add	 ecx, 5
  01627	51		 push	 ecx
  01628	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN242@draw_weapo:

; 6648 : 						}
; 6649 : 					}
; 6650 : 
; 6651 : 					break;

  0162d	e9 b0 02 00 00	 jmp	 $LN24@draw_weapo
$LN247@draw_weapo:

; 6652 : 				}
; 6653 : 				case APACHE_RHS_INNER_PYLON:
; 6654 : 				case APACHE_RHS_OUTER_PYLON:
; 6655 : 				{
; 6656 : 					if (number > 3)

  01632	83 7d ac 03	 cmp	 DWORD PTR _number$[ebp], 3
  01636	7e 54		 jle	 SHORT $LN248@draw_weapo

; 6657 : 					{
; 6658 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01638	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0163b	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  0163e	75 29		 jne	 SHORT $LN250@draw_weapo
  01640	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01644	75 23		 jne	 SHORT $LN250@draw_weapo

; 6659 : 						{
; 6660 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 10, 142, 290, 8, 8);

  01646	6a 08		 push	 8
  01648	6a 08		 push	 8
  0164a	68 22 01 00 00	 push	 290			; 00000122H
  0164f	68 8e 00 00 00	 push	 142			; 0000008eH
  01654	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01657	83 c0 0a	 add	 eax, 10			; 0000000aH
  0165a	50		 push	 eax
  0165b	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0165e	83 c1 05	 add	 ecx, 5
  01661	51		 push	 ecx
  01662	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6661 : 						}
; 6662 : 						else

  01667	eb 21		 jmp	 SHORT $LN251@draw_weapo
$LN250@draw_weapo:

; 6663 : 						{
; 6664 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 10, 160, 290, 8, 8);

  01669	6a 08		 push	 8
  0166b	6a 08		 push	 8
  0166d	68 22 01 00 00	 push	 290			; 00000122H
  01672	68 a0 00 00 00	 push	 160			; 000000a0H
  01677	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0167a	83 c0 0a	 add	 eax, 10			; 0000000aH
  0167d	50		 push	 eax
  0167e	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01681	83 c1 05	 add	 ecx, 5
  01684	51		 push	 ecx
  01685	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN251@draw_weapo:

; 6665 : 						}
; 6666 : 					}
; 6667 : 					else

  0168a	eb 52		 jmp	 SHORT $LN249@draw_weapo
$LN248@draw_weapo:

; 6668 : 					{
; 6669 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  0168c	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0168f	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01692	75 29		 jne	 SHORT $LN252@draw_weapo
  01694	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01698	75 23		 jne	 SHORT $LN252@draw_weapo

; 6670 : 						{
; 6671 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 10, 133, 290, 8, 8);

  0169a	6a 08		 push	 8
  0169c	6a 08		 push	 8
  0169e	68 22 01 00 00	 push	 290			; 00000122H
  016a3	68 85 00 00 00	 push	 133			; 00000085H
  016a8	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  016ab	83 c0 0a	 add	 eax, 10			; 0000000aH
  016ae	50		 push	 eax
  016af	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  016b2	83 c1 05	 add	 ecx, 5
  016b5	51		 push	 ecx
  016b6	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6672 : 						}
; 6673 : 						else

  016bb	eb 21		 jmp	 SHORT $LN249@draw_weapo
$LN252@draw_weapo:

; 6674 : 						{
; 6675 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 10, 151, 290, 8, 8);

  016bd	6a 08		 push	 8
  016bf	6a 08		 push	 8
  016c1	68 22 01 00 00	 push	 290			; 00000122H
  016c6	68 97 00 00 00	 push	 151			; 00000097H
  016cb	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  016ce	83 c0 0a	 add	 eax, 10			; 0000000aH
  016d1	50		 push	 eax
  016d2	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  016d5	83 c1 05	 add	 ecx, 5
  016d8	51		 push	 ecx
  016d9	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN249@draw_weapo:

; 6676 : 						}
; 6677 : 					}
; 6678 : 
; 6679 : 					if (number > 2)

  016de	83 7d ac 02	 cmp	 DWORD PTR _number$[ebp], 2
  016e2	7e 54		 jle	 SHORT $LN254@draw_weapo

; 6680 : 					{
; 6681 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  016e4	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  016e7	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  016ea	75 29		 jne	 SHORT $LN256@draw_weapo
  016ec	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  016f0	75 23		 jne	 SHORT $LN256@draw_weapo

; 6682 : 						{
; 6683 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 10, 142, 290, 8, 8);

  016f2	6a 08		 push	 8
  016f4	6a 08		 push	 8
  016f6	68 22 01 00 00	 push	 290			; 00000122H
  016fb	68 8e 00 00 00	 push	 142			; 0000008eH
  01700	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01703	83 c0 0a	 add	 eax, 10			; 0000000aH
  01706	50		 push	 eax
  01707	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0170a	83 e9 03	 sub	 ecx, 3
  0170d	51		 push	 ecx
  0170e	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6684 : 						}
; 6685 : 						else

  01713	eb 21		 jmp	 SHORT $LN257@draw_weapo
$LN256@draw_weapo:

; 6686 : 						{
; 6687 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 10, 160, 290, 8, 8);

  01715	6a 08		 push	 8
  01717	6a 08		 push	 8
  01719	68 22 01 00 00	 push	 290			; 00000122H
  0171e	68 a0 00 00 00	 push	 160			; 000000a0H
  01723	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01726	83 c0 0a	 add	 eax, 10			; 0000000aH
  01729	50		 push	 eax
  0172a	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0172d	83 e9 03	 sub	 ecx, 3
  01730	51		 push	 ecx
  01731	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN257@draw_weapo:

; 6688 : 						}
; 6689 : 					}
; 6690 : 					else

  01736	eb 52		 jmp	 SHORT $LN255@draw_weapo
$LN254@draw_weapo:

; 6691 : 					{
; 6692 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01738	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0173b	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  0173e	75 29		 jne	 SHORT $LN258@draw_weapo
  01740	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01744	75 23		 jne	 SHORT $LN258@draw_weapo

; 6693 : 						{
; 6694 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 10, 133, 290, 8, 8);

  01746	6a 08		 push	 8
  01748	6a 08		 push	 8
  0174a	68 22 01 00 00	 push	 290			; 00000122H
  0174f	68 85 00 00 00	 push	 133			; 00000085H
  01754	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01757	83 c0 0a	 add	 eax, 10			; 0000000aH
  0175a	50		 push	 eax
  0175b	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0175e	83 e9 03	 sub	 ecx, 3
  01761	51		 push	 ecx
  01762	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6695 : 						}
; 6696 : 						else

  01767	eb 21		 jmp	 SHORT $LN255@draw_weapo
$LN258@draw_weapo:

; 6697 : 						{
; 6698 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 10, 151, 290, 8, 8);

  01769	6a 08		 push	 8
  0176b	6a 08		 push	 8
  0176d	68 22 01 00 00	 push	 290			; 00000122H
  01772	68 97 00 00 00	 push	 151			; 00000097H
  01777	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0177a	83 c0 0a	 add	 eax, 10			; 0000000aH
  0177d	50		 push	 eax
  0177e	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01781	83 e9 03	 sub	 ecx, 3
  01784	51		 push	 ecx
  01785	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN255@draw_weapo:

; 6699 : 						}
; 6700 : 					}
; 6701 : 
; 6702 : 					if (number > 1)

  0178a	83 7d ac 01	 cmp	 DWORD PTR _number$[ebp], 1
  0178e	7e 54		 jle	 SHORT $LN260@draw_weapo

; 6703 : 					{
; 6704 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01790	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01793	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01796	75 29		 jne	 SHORT $LN262@draw_weapo
  01798	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0179c	75 23		 jne	 SHORT $LN262@draw_weapo

; 6705 : 						{
; 6706 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 18, 142, 290, 8, 8);

  0179e	6a 08		 push	 8
  017a0	6a 08		 push	 8
  017a2	68 22 01 00 00	 push	 290			; 00000122H
  017a7	68 8e 00 00 00	 push	 142			; 0000008eH
  017ac	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  017af	83 c0 12	 add	 eax, 18			; 00000012H
  017b2	50		 push	 eax
  017b3	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  017b6	83 c1 05	 add	 ecx, 5
  017b9	51		 push	 ecx
  017ba	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6707 : 						}
; 6708 : 						else

  017bf	eb 21		 jmp	 SHORT $LN263@draw_weapo
$LN262@draw_weapo:

; 6709 : 						{
; 6710 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 18, 160, 290, 8, 8);

  017c1	6a 08		 push	 8
  017c3	6a 08		 push	 8
  017c5	68 22 01 00 00	 push	 290			; 00000122H
  017ca	68 a0 00 00 00	 push	 160			; 000000a0H
  017cf	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  017d2	83 c0 12	 add	 eax, 18			; 00000012H
  017d5	50		 push	 eax
  017d6	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  017d9	83 c1 05	 add	 ecx, 5
  017dc	51		 push	 ecx
  017dd	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN263@draw_weapo:

; 6711 : 						}
; 6712 : 					}
; 6713 : 					else

  017e2	eb 52		 jmp	 SHORT $LN261@draw_weapo
$LN260@draw_weapo:

; 6714 : 					{
; 6715 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  017e4	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  017e7	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  017ea	75 29		 jne	 SHORT $LN264@draw_weapo
  017ec	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  017f0	75 23		 jne	 SHORT $LN264@draw_weapo

; 6716 : 						{
; 6717 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 18, 133, 290, 8, 8);

  017f2	6a 08		 push	 8
  017f4	6a 08		 push	 8
  017f6	68 22 01 00 00	 push	 290			; 00000122H
  017fb	68 85 00 00 00	 push	 133			; 00000085H
  01800	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01803	83 c0 12	 add	 eax, 18			; 00000012H
  01806	50		 push	 eax
  01807	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0180a	83 c1 05	 add	 ecx, 5
  0180d	51		 push	 ecx
  0180e	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6718 : 						}
; 6719 : 						else

  01813	eb 21		 jmp	 SHORT $LN261@draw_weapo
$LN264@draw_weapo:

; 6720 : 						{
; 6721 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 18, 151, 290, 8, 8);

  01815	6a 08		 push	 8
  01817	6a 08		 push	 8
  01819	68 22 01 00 00	 push	 290			; 00000122H
  0181e	68 97 00 00 00	 push	 151			; 00000097H
  01823	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01826	83 c0 12	 add	 eax, 18			; 00000012H
  01829	50		 push	 eax
  0182a	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0182d	83 c1 05	 add	 ecx, 5
  01830	51		 push	 ecx
  01831	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN261@draw_weapo:

; 6722 : 						}
; 6723 : 					}
; 6724 : 
; 6725 : 					if (number > 0)

  01836	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  0183a	7e 54		 jle	 SHORT $LN266@draw_weapo

; 6726 : 					{
; 6727 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  0183c	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0183f	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01842	75 29		 jne	 SHORT $LN268@draw_weapo
  01844	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01848	75 23		 jne	 SHORT $LN268@draw_weapo

; 6728 : 						{
; 6729 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 18, 142, 290, 8, 8);

  0184a	6a 08		 push	 8
  0184c	6a 08		 push	 8
  0184e	68 22 01 00 00	 push	 290			; 00000122H
  01853	68 8e 00 00 00	 push	 142			; 0000008eH
  01858	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0185b	83 c0 12	 add	 eax, 18			; 00000012H
  0185e	50		 push	 eax
  0185f	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01862	83 e9 03	 sub	 ecx, 3
  01865	51		 push	 ecx
  01866	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6730 : 						}
; 6731 : 						else

  0186b	eb 21		 jmp	 SHORT $LN269@draw_weapo
$LN268@draw_weapo:

; 6732 : 						{
; 6733 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 18, 160, 290, 8, 8);

  0186d	6a 08		 push	 8
  0186f	6a 08		 push	 8
  01871	68 22 01 00 00	 push	 290			; 00000122H
  01876	68 a0 00 00 00	 push	 160			; 000000a0H
  0187b	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0187e	83 c0 12	 add	 eax, 18			; 00000012H
  01881	50		 push	 eax
  01882	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01885	83 e9 03	 sub	 ecx, 3
  01888	51		 push	 ecx
  01889	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN269@draw_weapo:

; 6734 : 						}
; 6735 : 					}
; 6736 : 					else

  0188e	eb 52		 jmp	 SHORT $LN24@draw_weapo
$LN266@draw_weapo:

; 6737 : 					{
; 6738 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01890	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01893	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01896	75 29		 jne	 SHORT $LN270@draw_weapo
  01898	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0189c	75 23		 jne	 SHORT $LN270@draw_weapo

; 6739 : 						{
; 6740 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 18, 133, 290, 8, 8);

  0189e	6a 08		 push	 8
  018a0	6a 08		 push	 8
  018a2	68 22 01 00 00	 push	 290			; 00000122H
  018a7	68 85 00 00 00	 push	 133			; 00000085H
  018ac	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  018af	83 c0 12	 add	 eax, 18			; 00000012H
  018b2	50		 push	 eax
  018b3	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  018b6	83 e9 03	 sub	 ecx, 3
  018b9	51		 push	 ecx
  018ba	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6741 : 						}
; 6742 : 						else

  018bf	eb 21		 jmp	 SHORT $LN24@draw_weapo
$LN270@draw_weapo:

; 6743 : 						{
; 6744 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 18, 151, 290, 8, 8);

  018c1	6a 08		 push	 8
  018c3	6a 08		 push	 8
  018c5	68 22 01 00 00	 push	 290			; 00000122H
  018ca	68 97 00 00 00	 push	 151			; 00000097H
  018cf	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  018d2	83 c0 12	 add	 eax, 18			; 00000012H
  018d5	50		 push	 eax
  018d6	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  018d9	83 e9 03	 sub	 ecx, 3
  018dc	51		 push	 ecx
  018dd	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN24@draw_weapo:

; 6745 : 						}
; 6746 : 					}
; 6747 : 
; 6748 : 					break;
; 6749 : 				}
; 6750 : 			}
; 6751 : 
; 6752 : 			//
; 6753 : 			// damage cross
; 6754 : 			//
; 6755 : 
; 6756 : 			if (damaged)

  018e2	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  018e6	0f 84 8d 00 00
	00		 je	 $LN272@draw_weapo

; 6757 : 			{
; 6758 : 				switch (heading_depth)

  018ec	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  018ef	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv1262[ebp], eax
  018f5	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv1262[ebp], 3
  018fc	77 7b		 ja	 SHORT $LN272@draw_weapo
  018fe	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv1262[ebp]
  01904	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN396@draw_weapo[ecx*4]
$LN273@draw_weapo:

; 6759 : 				{
; 6760 : 					case APACHE_LHS_INNER_PYLON:
; 6761 : 					{
; 6762 : 						draw_sprite (26, 358, 169, 290, 16, 16);

  0190b	6a 10		 push	 16			; 00000010H
  0190d	6a 10		 push	 16			; 00000010H
  0190f	68 22 01 00 00	 push	 290			; 00000122H
  01914	68 a9 00 00 00	 push	 169			; 000000a9H
  01919	68 66 01 00 00	 push	 358			; 00000166H
  0191e	6a 1a		 push	 26			; 0000001aH
  01920	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6763 : 
; 6764 : 						break;

  01925	eb 52		 jmp	 SHORT $LN272@draw_weapo
$LN274@draw_weapo:

; 6765 : 					}
; 6766 : 					case APACHE_RHS_INNER_PYLON:
; 6767 : 					{
; 6768 : 						draw_sprite (95, 358, 169, 290, 16, 16);

  01927	6a 10		 push	 16			; 00000010H
  01929	6a 10		 push	 16			; 00000010H
  0192b	68 22 01 00 00	 push	 290			; 00000122H
  01930	68 a9 00 00 00	 push	 169			; 000000a9H
  01935	68 66 01 00 00	 push	 358			; 00000166H
  0193a	6a 5f		 push	 95			; 0000005fH
  0193c	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6769 : 
; 6770 : 						break;

  01941	eb 36		 jmp	 SHORT $LN272@draw_weapo
$LN275@draw_weapo:

; 6771 : 					}
; 6772 : 					case APACHE_LHS_OUTER_PYLON:
; 6773 : 					{
; 6774 : 						draw_sprite (10, 358, 169, 290, 16, 16);

  01943	6a 10		 push	 16			; 00000010H
  01945	6a 10		 push	 16			; 00000010H
  01947	68 22 01 00 00	 push	 290			; 00000122H
  0194c	68 a9 00 00 00	 push	 169			; 000000a9H
  01951	68 66 01 00 00	 push	 358			; 00000166H
  01956	6a 0a		 push	 10			; 0000000aH
  01958	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6775 : 
; 6776 : 						break;

  0195d	eb 1a		 jmp	 SHORT $LN272@draw_weapo
$LN276@draw_weapo:

; 6777 : 					}
; 6778 : 					case APACHE_RHS_OUTER_PYLON:
; 6779 : 					{
; 6780 : 						draw_sprite (111, 358, 169, 290, 16, 16);

  0195f	6a 10		 push	 16			; 00000010H
  01961	6a 10		 push	 16			; 00000010H
  01963	68 22 01 00 00	 push	 290			; 00000122H
  01968	68 a9 00 00 00	 push	 169			; 000000a9H
  0196d	68 66 01 00 00	 push	 358			; 00000166H
  01972	6a 6f		 push	 111			; 0000006fH
  01974	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN272@draw_weapo:

; 6781 : 
; 6782 : 						break;
; 6783 : 					}
; 6784 : 				}
; 6785 : 			}
; 6786 : 
; 6787 : 			//
; 6788 : 			// type
; 6789 : 			//
; 6790 : 
; 6791 : 			switch (heading_depth)

  01979	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  0197c	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv1288[ebp], eax
  01982	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv1288[ebp], 3
  01989	77 4b		 ja	 SHORT $LN28@draw_weapo
  0198b	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv1288[ebp]
  01991	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN397@draw_weapo[ecx*4]
$LN277@draw_weapo:

; 6792 : 			{
; 6793 : 				case APACHE_LHS_INNER_PYLON:
; 6794 : 				{
; 6795 : 					hardpoint_x = 26;

  01998	c7 45 a4 1a 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 26 ; 0000001aH

; 6796 : 					hardpoint_y = 377;

  0199f	c7 45 a0 79 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 377 ; 00000179H

; 6797 : 
; 6798 : 					break;

  019a6	eb 2e		 jmp	 SHORT $LN28@draw_weapo
$LN278@draw_weapo:

; 6799 : 				}
; 6800 : 				case APACHE_RHS_INNER_PYLON:
; 6801 : 				{
; 6802 : 					hardpoint_x = 95;

  019a8	c7 45 a4 5f 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 95 ; 0000005fH

; 6803 : 					hardpoint_y = 377;

  019af	c7 45 a0 79 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 377 ; 00000179H

; 6804 : 
; 6805 : 					break;

  019b6	eb 1e		 jmp	 SHORT $LN28@draw_weapo
$LN279@draw_weapo:

; 6806 : 				}
; 6807 : 				case APACHE_LHS_OUTER_PYLON:
; 6808 : 				{
; 6809 : 					hardpoint_x = 10;

  019b8	c7 45 a4 0a 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 10 ; 0000000aH

; 6810 : 					hardpoint_y = 377;

  019bf	c7 45 a0 79 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 377 ; 00000179H

; 6811 : 
; 6812 : 					break;

  019c6	eb 0e		 jmp	 SHORT $LN28@draw_weapo
$LN280@draw_weapo:

; 6813 : 				}
; 6814 : 				case APACHE_RHS_OUTER_PYLON:
; 6815 : 				{
; 6816 : 					hardpoint_x = 111;

  019c8	c7 45 a4 6f 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 111 ; 0000006fH

; 6817 : 					hardpoint_y = 377;

  019cf	c7 45 a0 79 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 377 ; 00000179H
$LN28@draw_weapo:

; 6818 : 
; 6819 : 					break;
; 6820 : 				}
; 6821 : 			}
; 6822 : 
; 6823 : 			if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AGM114K_HELLFIRE_II)

  019d6	83 7d 94 2e	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 46 ; 0000002eH
  019da	75 48		 jne	 SHORT $LN281@draw_weapo

; 6824 : 			{
; 6825 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  019dc	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  019df	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  019e2	75 23		 jne	 SHORT $LN283@draw_weapo
  019e4	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  019e8	75 1d		 jne	 SHORT $LN283@draw_weapo

; 6826 : 				{
; 6827 : 					draw_sprite (hardpoint_x, hardpoint_y, 133, 261, 15, 6);

  019ea	6a 06		 push	 6
  019ec	6a 0f		 push	 15			; 0000000fH
  019ee	68 05 01 00 00	 push	 261			; 00000105H
  019f3	68 85 00 00 00	 push	 133			; 00000085H
  019f8	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  019fb	50		 push	 eax
  019fc	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  019ff	51		 push	 ecx
  01a00	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6828 : 				}
; 6829 : 				else

  01a05	eb 1b		 jmp	 SHORT $LN284@draw_weapo
$LN283@draw_weapo:

; 6830 : 				{
; 6831 : 					draw_sprite (hardpoint_x, hardpoint_y, 173, 261, 15, 6);

  01a07	6a 06		 push	 6
  01a09	6a 0f		 push	 15			; 0000000fH
  01a0b	68 05 01 00 00	 push	 261			; 00000105H
  01a10	68 ad 00 00 00	 push	 173			; 000000adH
  01a15	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01a18	50		 push	 eax
  01a19	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01a1c	51		 push	 ecx
  01a1d	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN284@draw_weapo:

; 6832 : 				}
; 6833 : 			}
; 6834 : 			else

  01a22	eb 46		 jmp	 SHORT $LN141@draw_weapo
$LN281@draw_weapo:

; 6835 : 			{
; 6836 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  01a24	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01a27	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01a2a	75 23		 jne	 SHORT $LN285@draw_weapo
  01a2c	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01a30	75 1d		 jne	 SHORT $LN285@draw_weapo

; 6837 : 				{
; 6838 : 					draw_sprite (hardpoint_x, hardpoint_y, 149, 261, 15, 6);

  01a32	6a 06		 push	 6
  01a34	6a 0f		 push	 15			; 0000000fH
  01a36	68 05 01 00 00	 push	 261			; 00000105H
  01a3b	68 95 00 00 00	 push	 149			; 00000095H
  01a40	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01a43	50		 push	 eax
  01a44	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01a47	51		 push	 ecx
  01a48	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6839 : 				}
; 6840 : 				else

  01a4d	eb 1b		 jmp	 SHORT $LN141@draw_weapo
$LN285@draw_weapo:

; 6841 : 				{
; 6842 : 					draw_sprite (hardpoint_x, hardpoint_y, 189, 261, 15, 6);

  01a4f	6a 06		 push	 6
  01a51	6a 0f		 push	 15			; 0000000fH
  01a53	68 05 01 00 00	 push	 261			; 00000105H
  01a58	68 bd 00 00 00	 push	 189			; 000000bdH
  01a5d	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01a60	50		 push	 eax
  01a61	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01a64	51		 push	 ecx
  01a65	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN141@draw_weapo:

; 6843 : 				}
; 6844 : 			}
; 6845 : 		}
; 6846 : 	}
; 6847 : 
; 6848 : 	////////////////////////////////////////////////////////////////////////////////
; 6849 : 	//
; 6850 : 	// Stingers
; 6851 : 	//
; 6852 : 	////////////////////////////////////////////////////////////////////////////////
; 6853 : 
; 6854 : 	if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AIM92_STINGER || weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AIM9M_SIDEWINDER)

  01a6a	83 7d 94 24	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 36 ; 00000024H
  01a6e	74 0a		 je	 SHORT $LN288@draw_weapo
  01a70	83 7d 94 25	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 37 ; 00000025H
  01a74	0f 85 7b 05 00
	00		 jne	 $LN287@draw_weapo
$LN288@draw_weapo:

; 6855 : 	{
; 6856 : 		if (draw_large_mfd)

  01a7a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01a81	0f 84 ac 02 00
	00		 je	 $LN289@draw_weapo

; 6857 : 		{
; 6858 : 			////////////////////////////////////////
; 6859 : 			//
; 6860 : 			// LARGE
; 6861 : 			//
; 6862 : 			////////////////////////////////////////
; 6863 : 
; 6864 : 			//
; 6865 : 			// missiles
; 6866 : 			//
; 6867 : 
; 6868 : 			switch (heading_depth)

  01a87	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  01a8a	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv1322[ebp], eax
  01a90	83 bd 50 ff ff
	ff 04		 cmp	 DWORD PTR tv1322[ebp], 4
  01a97	74 12		 je	 SHORT $LN291@draw_weapo
  01a99	83 bd 50 ff ff
	ff 05		 cmp	 DWORD PTR tv1322[ebp], 5
  01aa0	0f 84 12 01 00
	00		 je	 $LN304@draw_weapo
  01aa6	e9 2d 02 00 00	 jmp	 $LN30@draw_weapo
$LN291@draw_weapo:

; 6869 : 			{
; 6870 : 				case APACHE_LHS_WING_TIP_MOUNT:
; 6871 : 				{
; 6872 : 					if (number > 1)

  01aab	83 7d ac 01	 cmp	 DWORD PTR _number$[ebp], 1
  01aaf	7e 40		 jle	 SHORT $LN292@draw_weapo

; 6873 : 					{
; 6874 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01ab1	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01ab4	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01ab7	75 1f		 jne	 SHORT $LN294@draw_weapo
  01ab9	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01abd	75 19		 jne	 SHORT $LN294@draw_weapo

; 6875 : 						{
; 6876 : 							draw_sprite (6, 144, 280, 61, 16, 16);

  01abf	6a 10		 push	 16			; 00000010H
  01ac1	6a 10		 push	 16			; 00000010H
  01ac3	6a 3d		 push	 61			; 0000003dH
  01ac5	68 18 01 00 00	 push	 280			; 00000118H
  01aca	68 90 00 00 00	 push	 144			; 00000090H
  01acf	6a 06		 push	 6
  01ad1	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6877 : 						}
; 6878 : 						else

  01ad6	eb 17		 jmp	 SHORT $LN295@draw_weapo
$LN294@draw_weapo:

; 6879 : 						{
; 6880 : 							draw_sprite (6, 144, 316, 61, 16, 16);

  01ad8	6a 10		 push	 16			; 00000010H
  01ada	6a 10		 push	 16			; 00000010H
  01adc	6a 3d		 push	 61			; 0000003dH
  01ade	68 3c 01 00 00	 push	 316			; 0000013cH
  01ae3	68 90 00 00 00	 push	 144			; 00000090H
  01ae8	6a 06		 push	 6
  01aea	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN295@draw_weapo:

; 6881 : 						}
; 6882 : 					}
; 6883 : 					else

  01aef	eb 3e		 jmp	 SHORT $LN293@draw_weapo
$LN292@draw_weapo:

; 6884 : 					{
; 6885 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01af1	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01af4	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01af7	75 1f		 jne	 SHORT $LN296@draw_weapo
  01af9	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01afd	75 19		 jne	 SHORT $LN296@draw_weapo

; 6886 : 						{
; 6887 : 							draw_sprite (6, 144, 262, 61, 16, 16);

  01aff	6a 10		 push	 16			; 00000010H
  01b01	6a 10		 push	 16			; 00000010H
  01b03	6a 3d		 push	 61			; 0000003dH
  01b05	68 06 01 00 00	 push	 262			; 00000106H
  01b0a	68 90 00 00 00	 push	 144			; 00000090H
  01b0f	6a 06		 push	 6
  01b11	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6888 : 						}
; 6889 : 						else

  01b16	eb 17		 jmp	 SHORT $LN293@draw_weapo
$LN296@draw_weapo:

; 6890 : 						{
; 6891 : 							draw_sprite (6, 144, 298, 61, 16, 16);

  01b18	6a 10		 push	 16			; 00000010H
  01b1a	6a 10		 push	 16			; 00000010H
  01b1c	6a 3d		 push	 61			; 0000003dH
  01b1e	68 2a 01 00 00	 push	 298			; 0000012aH
  01b23	68 90 00 00 00	 push	 144			; 00000090H
  01b28	6a 06		 push	 6
  01b2a	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN293@draw_weapo:

; 6892 : 						}
; 6893 : 					}
; 6894 : 
; 6895 : 					if (number > 0)

  01b2f	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  01b33	7e 40		 jle	 SHORT $LN298@draw_weapo

; 6896 : 					{
; 6897 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01b35	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01b38	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01b3b	75 1f		 jne	 SHORT $LN300@draw_weapo
  01b3d	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01b41	75 19		 jne	 SHORT $LN300@draw_weapo

; 6898 : 						{
; 6899 : 							draw_sprite (6, 161, 280, 61, 16, 16);

  01b43	6a 10		 push	 16			; 00000010H
  01b45	6a 10		 push	 16			; 00000010H
  01b47	6a 3d		 push	 61			; 0000003dH
  01b49	68 18 01 00 00	 push	 280			; 00000118H
  01b4e	68 a1 00 00 00	 push	 161			; 000000a1H
  01b53	6a 06		 push	 6
  01b55	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6900 : 						}
; 6901 : 						else

  01b5a	eb 17		 jmp	 SHORT $LN301@draw_weapo
$LN300@draw_weapo:

; 6902 : 						{
; 6903 : 							draw_sprite (6, 161, 316, 61, 16, 16);

  01b5c	6a 10		 push	 16			; 00000010H
  01b5e	6a 10		 push	 16			; 00000010H
  01b60	6a 3d		 push	 61			; 0000003dH
  01b62	68 3c 01 00 00	 push	 316			; 0000013cH
  01b67	68 a1 00 00 00	 push	 161			; 000000a1H
  01b6c	6a 06		 push	 6
  01b6e	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN301@draw_weapo:

; 6904 : 						}
; 6905 : 					}
; 6906 : 					else

  01b73	eb 3e		 jmp	 SHORT $LN299@draw_weapo
$LN298@draw_weapo:

; 6907 : 					{
; 6908 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01b75	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01b78	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01b7b	75 1f		 jne	 SHORT $LN302@draw_weapo
  01b7d	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01b81	75 19		 jne	 SHORT $LN302@draw_weapo

; 6909 : 						{
; 6910 : 							draw_sprite (6, 161, 262, 61, 16, 16);

  01b83	6a 10		 push	 16			; 00000010H
  01b85	6a 10		 push	 16			; 00000010H
  01b87	6a 3d		 push	 61			; 0000003dH
  01b89	68 06 01 00 00	 push	 262			; 00000106H
  01b8e	68 a1 00 00 00	 push	 161			; 000000a1H
  01b93	6a 06		 push	 6
  01b95	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6911 : 						}
; 6912 : 						else

  01b9a	eb 17		 jmp	 SHORT $LN299@draw_weapo
$LN302@draw_weapo:

; 6913 : 						{
; 6914 : 							draw_sprite (6, 161, 298, 61, 16, 16);

  01b9c	6a 10		 push	 16			; 00000010H
  01b9e	6a 10		 push	 16			; 00000010H
  01ba0	6a 3d		 push	 61			; 0000003dH
  01ba2	68 2a 01 00 00	 push	 298			; 0000012aH
  01ba7	68 a1 00 00 00	 push	 161			; 000000a1H
  01bac	6a 06		 push	 6
  01bae	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN299@draw_weapo:

; 6915 : 						}
; 6916 : 					}
; 6917 : 
; 6918 : 					break;

  01bb3	e9 20 01 00 00	 jmp	 $LN30@draw_weapo
$LN304@draw_weapo:

; 6919 : 				}
; 6920 : 				case APACHE_RHS_WING_TIP_MOUNT:
; 6921 : 				{
; 6922 : 					if (number > 1)

  01bb8	83 7d ac 01	 cmp	 DWORD PTR _number$[ebp], 1
  01bbc	7e 46		 jle	 SHORT $LN305@draw_weapo

; 6923 : 					{
; 6924 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01bbe	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01bc1	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01bc4	75 22		 jne	 SHORT $LN307@draw_weapo
  01bc6	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01bca	75 1c		 jne	 SHORT $LN307@draw_weapo

; 6925 : 						{
; 6926 : 							draw_sprite (242, 144, 280, 61, 16, 16);

  01bcc	6a 10		 push	 16			; 00000010H
  01bce	6a 10		 push	 16			; 00000010H
  01bd0	6a 3d		 push	 61			; 0000003dH
  01bd2	68 18 01 00 00	 push	 280			; 00000118H
  01bd7	68 90 00 00 00	 push	 144			; 00000090H
  01bdc	68 f2 00 00 00	 push	 242			; 000000f2H
  01be1	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6927 : 						}
; 6928 : 						else

  01be6	eb 1a		 jmp	 SHORT $LN308@draw_weapo
$LN307@draw_weapo:

; 6929 : 						{
; 6930 : 							draw_sprite (242, 144, 316, 61, 16, 16);

  01be8	6a 10		 push	 16			; 00000010H
  01bea	6a 10		 push	 16			; 00000010H
  01bec	6a 3d		 push	 61			; 0000003dH
  01bee	68 3c 01 00 00	 push	 316			; 0000013cH
  01bf3	68 90 00 00 00	 push	 144			; 00000090H
  01bf8	68 f2 00 00 00	 push	 242			; 000000f2H
  01bfd	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN308@draw_weapo:

; 6931 : 						}
; 6932 : 					}
; 6933 : 					else

  01c02	eb 44		 jmp	 SHORT $LN306@draw_weapo
$LN305@draw_weapo:

; 6934 : 					{
; 6935 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01c04	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01c07	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01c0a	75 22		 jne	 SHORT $LN309@draw_weapo
  01c0c	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01c10	75 1c		 jne	 SHORT $LN309@draw_weapo

; 6936 : 						{
; 6937 : 							draw_sprite (242, 144, 262, 61, 16, 16);

  01c12	6a 10		 push	 16			; 00000010H
  01c14	6a 10		 push	 16			; 00000010H
  01c16	6a 3d		 push	 61			; 0000003dH
  01c18	68 06 01 00 00	 push	 262			; 00000106H
  01c1d	68 90 00 00 00	 push	 144			; 00000090H
  01c22	68 f2 00 00 00	 push	 242			; 000000f2H
  01c27	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6938 : 						}
; 6939 : 						else

  01c2c	eb 1a		 jmp	 SHORT $LN306@draw_weapo
$LN309@draw_weapo:

; 6940 : 						{
; 6941 : 							draw_sprite (242, 144, 298, 61, 16, 16);

  01c2e	6a 10		 push	 16			; 00000010H
  01c30	6a 10		 push	 16			; 00000010H
  01c32	6a 3d		 push	 61			; 0000003dH
  01c34	68 2a 01 00 00	 push	 298			; 0000012aH
  01c39	68 90 00 00 00	 push	 144			; 00000090H
  01c3e	68 f2 00 00 00	 push	 242			; 000000f2H
  01c43	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN306@draw_weapo:

; 6942 : 						}
; 6943 : 					}
; 6944 : 
; 6945 : 					if (number > 0)

  01c48	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  01c4c	7e 46		 jle	 SHORT $LN311@draw_weapo

; 6946 : 					{
; 6947 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01c4e	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01c51	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01c54	75 22		 jne	 SHORT $LN313@draw_weapo
  01c56	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01c5a	75 1c		 jne	 SHORT $LN313@draw_weapo

; 6948 : 						{
; 6949 : 							draw_sprite (242, 161, 280, 61, 16, 16);

  01c5c	6a 10		 push	 16			; 00000010H
  01c5e	6a 10		 push	 16			; 00000010H
  01c60	6a 3d		 push	 61			; 0000003dH
  01c62	68 18 01 00 00	 push	 280			; 00000118H
  01c67	68 a1 00 00 00	 push	 161			; 000000a1H
  01c6c	68 f2 00 00 00	 push	 242			; 000000f2H
  01c71	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6950 : 						}
; 6951 : 						else

  01c76	eb 1a		 jmp	 SHORT $LN314@draw_weapo
$LN313@draw_weapo:

; 6952 : 						{
; 6953 : 							draw_sprite (242, 161, 316, 61, 16, 16);

  01c78	6a 10		 push	 16			; 00000010H
  01c7a	6a 10		 push	 16			; 00000010H
  01c7c	6a 3d		 push	 61			; 0000003dH
  01c7e	68 3c 01 00 00	 push	 316			; 0000013cH
  01c83	68 a1 00 00 00	 push	 161			; 000000a1H
  01c88	68 f2 00 00 00	 push	 242			; 000000f2H
  01c8d	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN314@draw_weapo:

; 6954 : 						}
; 6955 : 					}
; 6956 : 					else

  01c92	eb 44		 jmp	 SHORT $LN30@draw_weapo
$LN311@draw_weapo:

; 6957 : 					{
; 6958 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01c94	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01c97	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01c9a	75 22		 jne	 SHORT $LN315@draw_weapo
  01c9c	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01ca0	75 1c		 jne	 SHORT $LN315@draw_weapo

; 6959 : 						{
; 6960 : 							draw_sprite (242, 161, 262, 61, 16, 16);

  01ca2	6a 10		 push	 16			; 00000010H
  01ca4	6a 10		 push	 16			; 00000010H
  01ca6	6a 3d		 push	 61			; 0000003dH
  01ca8	68 06 01 00 00	 push	 262			; 00000106H
  01cad	68 a1 00 00 00	 push	 161			; 000000a1H
  01cb2	68 f2 00 00 00	 push	 242			; 000000f2H
  01cb7	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6961 : 						}
; 6962 : 						else

  01cbc	eb 1a		 jmp	 SHORT $LN30@draw_weapo
$LN315@draw_weapo:

; 6963 : 						{
; 6964 : 							draw_sprite (242, 161, 298, 61, 16, 16);

  01cbe	6a 10		 push	 16			; 00000010H
  01cc0	6a 10		 push	 16			; 00000010H
  01cc2	6a 3d		 push	 61			; 0000003dH
  01cc4	68 2a 01 00 00	 push	 298			; 0000012aH
  01cc9	68 a1 00 00 00	 push	 161			; 000000a1H
  01cce	68 f2 00 00 00	 push	 242			; 000000f2H
  01cd3	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN30@draw_weapo:

; 6965 : 						}
; 6966 : 					}
; 6967 : 
; 6968 : 					break;
; 6969 : 				}
; 6970 : 			}
; 6971 : 
; 6972 : 			//
; 6973 : 			// damage cross
; 6974 : 			//
; 6975 : 
; 6976 : 			if (damaged)

  01cd8	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01cdc	74 50		 je	 SHORT $LN317@draw_weapo

; 6977 : 			{
; 6978 : 				switch (heading_depth)

  01cde	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  01ce1	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv1442[ebp], eax
  01ce7	83 bd 50 ff ff
	ff 04		 cmp	 DWORD PTR tv1442[ebp], 4
  01cee	74 0b		 je	 SHORT $LN318@draw_weapo
  01cf0	83 bd 50 ff ff
	ff 05		 cmp	 DWORD PTR tv1442[ebp], 5
  01cf7	74 1b		 je	 SHORT $LN319@draw_weapo
  01cf9	eb 33		 jmp	 SHORT $LN317@draw_weapo
$LN318@draw_weapo:

; 6979 : 				{
; 6980 : 					case APACHE_LHS_WING_TIP_MOUNT:
; 6981 : 					{
; 6982 : 						draw_sprite (6, 144, 368, 61, 17, 33);

  01cfb	6a 21		 push	 33			; 00000021H
  01cfd	6a 11		 push	 17			; 00000011H
  01cff	6a 3d		 push	 61			; 0000003dH
  01d01	68 70 01 00 00	 push	 368			; 00000170H
  01d06	68 90 00 00 00	 push	 144			; 00000090H
  01d0b	6a 06		 push	 6
  01d0d	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6983 : 
; 6984 : 						break;

  01d12	eb 1a		 jmp	 SHORT $LN317@draw_weapo
$LN319@draw_weapo:

; 6985 : 					}
; 6986 : 					case APACHE_RHS_WING_TIP_MOUNT:
; 6987 : 					{
; 6988 : 						draw_sprite (241, 144, 368, 61, 17, 33);

  01d14	6a 21		 push	 33			; 00000021H
  01d16	6a 11		 push	 17			; 00000011H
  01d18	6a 3d		 push	 61			; 0000003dH
  01d1a	68 70 01 00 00	 push	 368			; 00000170H
  01d1f	68 90 00 00 00	 push	 144			; 00000090H
  01d24	68 f1 00 00 00	 push	 241			; 000000f1H
  01d29	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN317@draw_weapo:

; 6989 : 
; 6990 : 						break;
; 6991 : 					}
; 6992 : 				}
; 6993 : 			}
; 6994 : 		}
; 6995 : 		else

  01d2e	e9 c2 02 00 00	 jmp	 $LN287@draw_weapo
$LN289@draw_weapo:

; 6996 : 		{
; 6997 : 			////////////////////////////////////////
; 6998 : 			//
; 6999 : 			// SMALL
; 7000 : 			//
; 7001 : 			////////////////////////////////////////
; 7002 : 
; 7003 : 			//
; 7004 : 			// missiles
; 7005 : 			//
; 7006 : 
; 7007 : 			switch (heading_depth)

  01d33	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  01d36	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv1457[ebp], eax
  01d3c	83 bd 50 ff ff
	ff 04		 cmp	 DWORD PTR tv1457[ebp], 4
  01d43	74 12		 je	 SHORT $LN320@draw_weapo
  01d45	83 bd 50 ff ff
	ff 05		 cmp	 DWORD PTR tv1457[ebp], 5
  01d4c	0f 84 2a 01 00
	00		 je	 $LN333@draw_weapo
  01d52	e9 45 02 00 00	 jmp	 $LN34@draw_weapo
$LN320@draw_weapo:

; 7008 : 			{
; 7009 : 				case APACHE_LHS_WING_TIP_MOUNT:
; 7010 : 				{
; 7011 : 					if (number > 1)

  01d57	83 7d ac 01	 cmp	 DWORD PTR _number$[ebp], 1
  01d5b	7e 46		 jle	 SHORT $LN321@draw_weapo

; 7012 : 					{
; 7013 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01d5d	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01d60	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01d63	75 22		 jne	 SHORT $LN323@draw_weapo
  01d65	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01d69	75 1c		 jne	 SHORT $LN323@draw_weapo

; 7014 : 						{
; 7015 : 							draw_sprite (5, 332, 142, 290, 8, 8);

  01d6b	6a 08		 push	 8
  01d6d	6a 08		 push	 8
  01d6f	68 22 01 00 00	 push	 290			; 00000122H
  01d74	68 8e 00 00 00	 push	 142			; 0000008eH
  01d79	68 4c 01 00 00	 push	 332			; 0000014cH
  01d7e	6a 05		 push	 5
  01d80	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7016 : 						}
; 7017 : 						else

  01d85	eb 1a		 jmp	 SHORT $LN324@draw_weapo
$LN323@draw_weapo:

; 7018 : 						{
; 7019 : 							draw_sprite (5, 332, 160, 290, 8, 8);

  01d87	6a 08		 push	 8
  01d89	6a 08		 push	 8
  01d8b	68 22 01 00 00	 push	 290			; 00000122H
  01d90	68 a0 00 00 00	 push	 160			; 000000a0H
  01d95	68 4c 01 00 00	 push	 332			; 0000014cH
  01d9a	6a 05		 push	 5
  01d9c	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN324@draw_weapo:

; 7020 : 						}
; 7021 : 					}
; 7022 : 					else

  01da1	eb 44		 jmp	 SHORT $LN322@draw_weapo
$LN321@draw_weapo:

; 7023 : 					{
; 7024 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01da3	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01da6	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01da9	75 22		 jne	 SHORT $LN325@draw_weapo
  01dab	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01daf	75 1c		 jne	 SHORT $LN325@draw_weapo

; 7025 : 						{
; 7026 : 							draw_sprite (5, 332, 133, 290, 8, 8);

  01db1	6a 08		 push	 8
  01db3	6a 08		 push	 8
  01db5	68 22 01 00 00	 push	 290			; 00000122H
  01dba	68 85 00 00 00	 push	 133			; 00000085H
  01dbf	68 4c 01 00 00	 push	 332			; 0000014cH
  01dc4	6a 05		 push	 5
  01dc6	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7027 : 						}
; 7028 : 						else

  01dcb	eb 1a		 jmp	 SHORT $LN322@draw_weapo
$LN325@draw_weapo:

; 7029 : 						{
; 7030 : 							draw_sprite (5, 332, 151, 290, 8, 8);

  01dcd	6a 08		 push	 8
  01dcf	6a 08		 push	 8
  01dd1	68 22 01 00 00	 push	 290			; 00000122H
  01dd6	68 97 00 00 00	 push	 151			; 00000097H
  01ddb	68 4c 01 00 00	 push	 332			; 0000014cH
  01de0	6a 05		 push	 5
  01de2	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN322@draw_weapo:

; 7031 : 						}
; 7032 : 					}
; 7033 : 
; 7034 : 					if (number > 0)

  01de7	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  01deb	7e 46		 jle	 SHORT $LN327@draw_weapo

; 7035 : 					{
; 7036 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01ded	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01df0	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01df3	75 22		 jne	 SHORT $LN329@draw_weapo
  01df5	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01df9	75 1c		 jne	 SHORT $LN329@draw_weapo

; 7037 : 						{
; 7038 : 							draw_sprite (5, 340, 142, 290, 8, 8);

  01dfb	6a 08		 push	 8
  01dfd	6a 08		 push	 8
  01dff	68 22 01 00 00	 push	 290			; 00000122H
  01e04	68 8e 00 00 00	 push	 142			; 0000008eH
  01e09	68 54 01 00 00	 push	 340			; 00000154H
  01e0e	6a 05		 push	 5
  01e10	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7039 : 						}
; 7040 : 						else

  01e15	eb 1a		 jmp	 SHORT $LN330@draw_weapo
$LN329@draw_weapo:

; 7041 : 						{
; 7042 : 							draw_sprite (5, 340, 160, 290, 8, 8);

  01e17	6a 08		 push	 8
  01e19	6a 08		 push	 8
  01e1b	68 22 01 00 00	 push	 290			; 00000122H
  01e20	68 a0 00 00 00	 push	 160			; 000000a0H
  01e25	68 54 01 00 00	 push	 340			; 00000154H
  01e2a	6a 05		 push	 5
  01e2c	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN330@draw_weapo:

; 7043 : 						}
; 7044 : 					}
; 7045 : 					else

  01e31	eb 44		 jmp	 SHORT $LN328@draw_weapo
$LN327@draw_weapo:

; 7046 : 					{
; 7047 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01e33	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01e36	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01e39	75 22		 jne	 SHORT $LN331@draw_weapo
  01e3b	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01e3f	75 1c		 jne	 SHORT $LN331@draw_weapo

; 7048 : 						{
; 7049 : 							draw_sprite (5, 340, 133, 290, 8, 8);

  01e41	6a 08		 push	 8
  01e43	6a 08		 push	 8
  01e45	68 22 01 00 00	 push	 290			; 00000122H
  01e4a	68 85 00 00 00	 push	 133			; 00000085H
  01e4f	68 54 01 00 00	 push	 340			; 00000154H
  01e54	6a 05		 push	 5
  01e56	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7050 : 						}
; 7051 : 						else

  01e5b	eb 1a		 jmp	 SHORT $LN328@draw_weapo
$LN331@draw_weapo:

; 7052 : 						{
; 7053 : 							draw_sprite (5, 340, 151, 290, 8, 8);

  01e5d	6a 08		 push	 8
  01e5f	6a 08		 push	 8
  01e61	68 22 01 00 00	 push	 290			; 00000122H
  01e66	68 97 00 00 00	 push	 151			; 00000097H
  01e6b	68 54 01 00 00	 push	 340			; 00000154H
  01e70	6a 05		 push	 5
  01e72	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN328@draw_weapo:

; 7054 : 						}
; 7055 : 					}
; 7056 : 
; 7057 : 					break;

  01e77	e9 20 01 00 00	 jmp	 $LN34@draw_weapo
$LN333@draw_weapo:

; 7058 : 				}
; 7059 : 				case APACHE_RHS_WING_TIP_MOUNT:
; 7060 : 				{
; 7061 : 					if (number > 1)

  01e7c	83 7d ac 01	 cmp	 DWORD PTR _number$[ebp], 1
  01e80	7e 46		 jle	 SHORT $LN334@draw_weapo

; 7062 : 					{
; 7063 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01e82	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01e85	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01e88	75 22		 jne	 SHORT $LN336@draw_weapo
  01e8a	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01e8e	75 1c		 jne	 SHORT $LN336@draw_weapo

; 7064 : 						{
; 7065 : 							draw_sprite (123, 332, 142, 290, 8, 8);

  01e90	6a 08		 push	 8
  01e92	6a 08		 push	 8
  01e94	68 22 01 00 00	 push	 290			; 00000122H
  01e99	68 8e 00 00 00	 push	 142			; 0000008eH
  01e9e	68 4c 01 00 00	 push	 332			; 0000014cH
  01ea3	6a 7b		 push	 123			; 0000007bH
  01ea5	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7066 : 						}
; 7067 : 						else

  01eaa	eb 1a		 jmp	 SHORT $LN337@draw_weapo
$LN336@draw_weapo:

; 7068 : 						{
; 7069 : 							draw_sprite (123, 332, 160, 290, 8, 8);

  01eac	6a 08		 push	 8
  01eae	6a 08		 push	 8
  01eb0	68 22 01 00 00	 push	 290			; 00000122H
  01eb5	68 a0 00 00 00	 push	 160			; 000000a0H
  01eba	68 4c 01 00 00	 push	 332			; 0000014cH
  01ebf	6a 7b		 push	 123			; 0000007bH
  01ec1	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN337@draw_weapo:

; 7070 : 						}
; 7071 : 					}
; 7072 : 					else

  01ec6	eb 44		 jmp	 SHORT $LN335@draw_weapo
$LN334@draw_weapo:

; 7073 : 					{
; 7074 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01ec8	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01ecb	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01ece	75 22		 jne	 SHORT $LN338@draw_weapo
  01ed0	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01ed4	75 1c		 jne	 SHORT $LN338@draw_weapo

; 7075 : 						{
; 7076 : 							draw_sprite (123, 332, 133, 290, 8, 8);

  01ed6	6a 08		 push	 8
  01ed8	6a 08		 push	 8
  01eda	68 22 01 00 00	 push	 290			; 00000122H
  01edf	68 85 00 00 00	 push	 133			; 00000085H
  01ee4	68 4c 01 00 00	 push	 332			; 0000014cH
  01ee9	6a 7b		 push	 123			; 0000007bH
  01eeb	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7077 : 						}
; 7078 : 						else

  01ef0	eb 1a		 jmp	 SHORT $LN335@draw_weapo
$LN338@draw_weapo:

; 7079 : 						{
; 7080 : 							draw_sprite (123, 332, 151, 290, 8, 8);

  01ef2	6a 08		 push	 8
  01ef4	6a 08		 push	 8
  01ef6	68 22 01 00 00	 push	 290			; 00000122H
  01efb	68 97 00 00 00	 push	 151			; 00000097H
  01f00	68 4c 01 00 00	 push	 332			; 0000014cH
  01f05	6a 7b		 push	 123			; 0000007bH
  01f07	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN335@draw_weapo:

; 7081 : 						}
; 7082 : 					}
; 7083 : 
; 7084 : 					if (number > 0)

  01f0c	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  01f10	7e 46		 jle	 SHORT $LN340@draw_weapo

; 7085 : 					{
; 7086 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01f12	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01f15	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01f18	75 22		 jne	 SHORT $LN342@draw_weapo
  01f1a	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01f1e	75 1c		 jne	 SHORT $LN342@draw_weapo

; 7087 : 						{
; 7088 : 							draw_sprite (123, 340, 142, 290, 8, 8);

  01f20	6a 08		 push	 8
  01f22	6a 08		 push	 8
  01f24	68 22 01 00 00	 push	 290			; 00000122H
  01f29	68 8e 00 00 00	 push	 142			; 0000008eH
  01f2e	68 54 01 00 00	 push	 340			; 00000154H
  01f33	6a 7b		 push	 123			; 0000007bH
  01f35	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7089 : 						}
; 7090 : 						else

  01f3a	eb 1a		 jmp	 SHORT $LN343@draw_weapo
$LN342@draw_weapo:

; 7091 : 						{
; 7092 : 							draw_sprite (123, 340, 160, 290, 8, 8);

  01f3c	6a 08		 push	 8
  01f3e	6a 08		 push	 8
  01f40	68 22 01 00 00	 push	 290			; 00000122H
  01f45	68 a0 00 00 00	 push	 160			; 000000a0H
  01f4a	68 54 01 00 00	 push	 340			; 00000154H
  01f4f	6a 7b		 push	 123			; 0000007bH
  01f51	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN343@draw_weapo:

; 7093 : 						}
; 7094 : 					}
; 7095 : 					else

  01f56	eb 44		 jmp	 SHORT $LN34@draw_weapo
$LN340@draw_weapo:

; 7096 : 					{
; 7097 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01f58	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01f5b	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01f5e	75 22		 jne	 SHORT $LN344@draw_weapo
  01f60	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01f64	75 1c		 jne	 SHORT $LN344@draw_weapo

; 7098 : 						{
; 7099 : 							draw_sprite (123, 340, 133, 290, 8, 8);

  01f66	6a 08		 push	 8
  01f68	6a 08		 push	 8
  01f6a	68 22 01 00 00	 push	 290			; 00000122H
  01f6f	68 85 00 00 00	 push	 133			; 00000085H
  01f74	68 54 01 00 00	 push	 340			; 00000154H
  01f79	6a 7b		 push	 123			; 0000007bH
  01f7b	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7100 : 						}
; 7101 : 						else

  01f80	eb 1a		 jmp	 SHORT $LN34@draw_weapo
$LN344@draw_weapo:

; 7102 : 						{
; 7103 : 							draw_sprite (123, 340, 151, 290, 8, 8);

  01f82	6a 08		 push	 8
  01f84	6a 08		 push	 8
  01f86	68 22 01 00 00	 push	 290			; 00000122H
  01f8b	68 97 00 00 00	 push	 151			; 00000097H
  01f90	68 54 01 00 00	 push	 340			; 00000154H
  01f95	6a 7b		 push	 123			; 0000007bH
  01f97	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN34@draw_weapo:

; 7104 : 						}
; 7105 : 					}
; 7106 : 
; 7107 : 					break;
; 7108 : 				}
; 7109 : 			}
; 7110 : 
; 7111 : 			//
; 7112 : 			// damage cross
; 7113 : 			//
; 7114 : 
; 7115 : 			if (damaged)

  01f9c	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01fa0	74 53		 je	 SHORT $LN287@draw_weapo

; 7116 : 			{
; 7117 : 				switch (heading_depth)

  01fa2	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  01fa5	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv1577[ebp], eax
  01fab	83 bd 50 ff ff
	ff 04		 cmp	 DWORD PTR tv1577[ebp], 4
  01fb2	74 0b		 je	 SHORT $LN347@draw_weapo
  01fb4	83 bd 50 ff ff
	ff 05		 cmp	 DWORD PTR tv1577[ebp], 5
  01fbb	74 1e		 je	 SHORT $LN348@draw_weapo
  01fbd	eb 36		 jmp	 SHORT $LN287@draw_weapo
$LN347@draw_weapo:

; 7118 : 				{
; 7119 : 					case APACHE_LHS_WING_TIP_MOUNT:
; 7120 : 					{
; 7121 : 						draw_sprite (5, 332, 186, 290, 8, 17);

  01fbf	6a 11		 push	 17			; 00000011H
  01fc1	6a 08		 push	 8
  01fc3	68 22 01 00 00	 push	 290			; 00000122H
  01fc8	68 ba 00 00 00	 push	 186			; 000000baH
  01fcd	68 4c 01 00 00	 push	 332			; 0000014cH
  01fd2	6a 05		 push	 5
  01fd4	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7122 : 
; 7123 : 						break;

  01fd9	eb 1a		 jmp	 SHORT $LN287@draw_weapo
$LN348@draw_weapo:

; 7124 : 					}
; 7125 : 					case APACHE_RHS_WING_TIP_MOUNT:
; 7126 : 					{
; 7127 : 						draw_sprite (122, 332, 186, 290, 8, 17);

  01fdb	6a 11		 push	 17			; 00000011H
  01fdd	6a 08		 push	 8
  01fdf	68 22 01 00 00	 push	 290			; 00000122H
  01fe4	68 ba 00 00 00	 push	 186			; 000000baH
  01fe9	68 4c 01 00 00	 push	 332			; 0000014cH
  01fee	6a 7a		 push	 122			; 0000007aH
  01ff0	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN287@draw_weapo:

; 7128 : 
; 7129 : 						break;
; 7130 : 					}
; 7131 : 				}
; 7132 : 			}
; 7133 : 		}
; 7134 : 	}
; 7135 : 
; 7136 : 	////////////////////////////////////////////////////////////////////////////////
; 7137 : 	//
; 7138 : 	// Chaff
; 7139 : 	//
; 7140 : 	////////////////////////////////////////////////////////////////////////////////
; 7141 : 
; 7142 : 	if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_CHAFF)

  01ff5	83 7d 94 43	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 67 ; 00000043H
  01ff9	0f 85 1c 02 00
	00		 jne	 $LN349@draw_weapo

; 7143 : 	{
; 7144 : 		if (draw_large_mfd)

  01fff	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02006	0f 84 07 01 00
	00		 je	 $LN350@draw_weapo

; 7145 : 		{
; 7146 : 			////////////////////////////////////////
; 7147 : 			//
; 7148 : 			// LARGE
; 7149 : 			//
; 7150 : 			////////////////////////////////////////
; 7151 : 
; 7152 : 			//
; 7153 : 			// digits
; 7154 : 			//
; 7155 : 
; 7156 : 			if ((number > 0) && (!damaged))

  0200c	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  02010	7e 26		 jle	 SHORT $LN352@draw_weapo
  02012	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  02016	75 20		 jne	 SHORT $LN352@draw_weapo

; 7157 : 			{
; 7158 : 				draw_sprite (94, 160, 483, 3, 18, 14);

  02018	6a 0e		 push	 14			; 0000000eH
  0201a	6a 12		 push	 18			; 00000012H
  0201c	6a 03		 push	 3
  0201e	68 e3 01 00 00	 push	 483			; 000001e3H
  02023	68 a0 00 00 00	 push	 160			; 000000a0H
  02028	6a 5e		 push	 94			; 0000005eH
  0202a	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7159 : 
; 7160 : 				v = 32;

  0202f	c7 45 98 20 00
	00 00		 mov	 DWORD PTR _v$[ebp], 32	; 00000020H

; 7161 : 			}
; 7162 : 			else

  02036	eb 07		 jmp	 SHORT $LN353@draw_weapo
$LN352@draw_weapo:

; 7163 : 			{
; 7164 : 				v = 47;

  02038	c7 45 98 2f 00
	00 00		 mov	 DWORD PTR _v$[ebp], 47	; 0000002fH
$LN353@draw_weapo:

; 7165 : 			}
; 7166 : 
; 7167 : 			sprintf (buffer, "%02d", number);

  0203f	8b 45 ac	 mov	 eax, DWORD PTR _number$[ebp]
  02042	50		 push	 eax
  02043	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  02048	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0204b	51		 push	 ecx
  0204c	e8 00 00 00 00	 call	 _sprintf
  02051	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7168 : 
; 7169 : 			if (buffer[0] == '0')

  02054	b8 01 00 00 00	 mov	 eax, 1
  02059	6b c8 00	 imul	 ecx, eax, 0
  0205c	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  02061	83 fa 30	 cmp	 edx, 48			; 00000030H
  02064	75 09		 jne	 SHORT $LN354@draw_weapo

; 7170 : 			{
; 7171 : 				u = 364 + (9 * 10);

  02066	c7 45 9c c6 01
	00 00		 mov	 DWORD PTR _u$[ebp], 454	; 000001c6H

; 7172 : 			}
; 7173 : 			else

  0206d	eb 1b		 jmp	 SHORT $LN355@draw_weapo
$LN354@draw_weapo:

; 7174 : 			{
; 7175 : 				u = 364 + ((buffer[0] - '1') * 10);

  0206f	b8 01 00 00 00	 mov	 eax, 1
  02074	6b c8 00	 imul	 ecx, eax, 0
  02077	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  0207c	83 ea 31	 sub	 edx, 49			; 00000031H
  0207f	6b c2 0a	 imul	 eax, edx, 10
  02082	05 6c 01 00 00	 add	 eax, 364		; 0000016cH
  02087	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN355@draw_weapo:

; 7176 : 			}
; 7177 : 
; 7178 : 			draw_sprite (112, 161, u, v, 8, 12);

  0208a	6a 0c		 push	 12			; 0000000cH
  0208c	6a 08		 push	 8
  0208e	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  02091	50		 push	 eax
  02092	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  02095	51		 push	 ecx
  02096	68 a1 00 00 00	 push	 161			; 000000a1H
  0209b	6a 70		 push	 112			; 00000070H
  0209d	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7179 : 
; 7180 : 			if (buffer[1] == '0')

  020a2	b8 01 00 00 00	 mov	 eax, 1
  020a7	c1 e0 00	 shl	 eax, 0
  020aa	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  020af	83 f9 30	 cmp	 ecx, 48			; 00000030H
  020b2	75 09		 jne	 SHORT $LN356@draw_weapo

; 7181 : 			{
; 7182 : 				u = 364 + (9 * 10);

  020b4	c7 45 9c c6 01
	00 00		 mov	 DWORD PTR _u$[ebp], 454	; 000001c6H

; 7183 : 			}
; 7184 : 			else

  020bb	eb 1c		 jmp	 SHORT $LN357@draw_weapo
$LN356@draw_weapo:

; 7185 : 			{
; 7186 : 				u = 364 + ((buffer[1] - '1') * 10);

  020bd	b8 01 00 00 00	 mov	 eax, 1
  020c2	c1 e0 00	 shl	 eax, 0
  020c5	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  020ca	83 e9 31	 sub	 ecx, 49			; 00000031H
  020cd	6b d1 0a	 imul	 edx, ecx, 10
  020d0	81 c2 6c 01 00
	00		 add	 edx, 364		; 0000016cH
  020d6	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN357@draw_weapo:

; 7187 : 			}
; 7188 : 
; 7189 : 			draw_sprite (121, 161, u, v, 8, 12);

  020d9	6a 0c		 push	 12			; 0000000cH
  020db	6a 08		 push	 8
  020dd	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  020e0	50		 push	 eax
  020e1	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  020e4	51		 push	 ecx
  020e5	68 a1 00 00 00	 push	 161			; 000000a1H
  020ea	6a 79		 push	 121			; 00000079H
  020ec	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7190 : 
; 7191 : 			//
; 7192 : 			// damage cross
; 7193 : 			//
; 7194 : 
; 7195 : 			if (damaged)

  020f1	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  020f5	74 17		 je	 SHORT $LN358@draw_weapo

; 7196 : 			{
; 7197 : 				draw_sprite (96, 159, 387, 61, 33, 17);

  020f7	6a 11		 push	 17			; 00000011H
  020f9	6a 21		 push	 33			; 00000021H
  020fb	6a 3d		 push	 61			; 0000003dH
  020fd	68 83 01 00 00	 push	 387			; 00000183H
  02102	68 9f 00 00 00	 push	 159			; 0000009fH
  02107	6a 60		 push	 96			; 00000060H
  02109	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN358@draw_weapo:

; 7198 : 			}
; 7199 : 		}
; 7200 : 		else

  0210e	e9 08 01 00 00	 jmp	 $LN349@draw_weapo
$LN350@draw_weapo:

; 7201 : 		{
; 7202 : 			////////////////////////////////////////
; 7203 : 			//
; 7204 : 			// SMALL
; 7205 : 			//
; 7206 : 			////////////////////////////////////////
; 7207 : 
; 7208 : 			//
; 7209 : 			// digits
; 7210 : 			//
; 7211 : 
; 7212 : 			if ((number > 0) && (!damaged))

  02113	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  02117	7e 29		 jle	 SHORT $LN359@draw_weapo
  02119	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0211d	75 23		 jne	 SHORT $LN359@draw_weapo

; 7213 : 			{
; 7214 : 				draw_sprite (49, 340, 243, 261, 9, 7);

  0211f	6a 07		 push	 7
  02121	6a 09		 push	 9
  02123	68 05 01 00 00	 push	 261			; 00000105H
  02128	68 f3 00 00 00	 push	 243			; 000000f3H
  0212d	68 54 01 00 00	 push	 340			; 00000154H
  02132	6a 31		 push	 49			; 00000031H
  02134	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7215 : 
; 7216 : 				v = 276;

  02139	c7 45 98 14 01
	00 00		 mov	 DWORD PTR _v$[ebp], 276	; 00000114H

; 7217 : 			}
; 7218 : 			else

  02140	eb 07		 jmp	 SHORT $LN360@draw_weapo
$LN359@draw_weapo:

; 7219 : 			{
; 7220 : 				v = 283;

  02142	c7 45 98 1b 01
	00 00		 mov	 DWORD PTR _v$[ebp], 283	; 0000011bH
$LN360@draw_weapo:

; 7221 : 			}
; 7222 : 
; 7223 : 			sprintf (buffer, "%02d", number);

  02149	8b 45 ac	 mov	 eax, DWORD PTR _number$[ebp]
  0214c	50		 push	 eax
  0214d	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  02152	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  02155	51		 push	 ecx
  02156	e8 00 00 00 00	 call	 _sprintf
  0215b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7224 : 
; 7225 : 			if (buffer[0] == '0')

  0215e	b8 01 00 00 00	 mov	 eax, 1
  02163	6b c8 00	 imul	 ecx, eax, 0
  02166	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  0216b	83 fa 30	 cmp	 edx, 48			; 00000030H
  0216e	75 09		 jne	 SHORT $LN361@draw_weapo

; 7226 : 			{
; 7227 : 				u = 184 + (9 * 5);

  02170	c7 45 9c e5 00
	00 00		 mov	 DWORD PTR _u$[ebp], 229	; 000000e5H

; 7228 : 			}
; 7229 : 			else

  02177	eb 1b		 jmp	 SHORT $LN362@draw_weapo
$LN361@draw_weapo:

; 7230 : 			{
; 7231 : 				u = 184 + ((buffer[0] - '1') * 5);

  02179	b8 01 00 00 00	 mov	 eax, 1
  0217e	6b c8 00	 imul	 ecx, eax, 0
  02181	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  02186	83 ea 31	 sub	 edx, 49			; 00000031H
  02189	6b c2 05	 imul	 eax, edx, 5
  0218c	05 b8 00 00 00	 add	 eax, 184		; 000000b8H
  02191	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN362@draw_weapo:

; 7232 : 			}
; 7233 : 
; 7234 : 			draw_sprite (58, 341, u, v, 4, 6);

  02194	6a 06		 push	 6
  02196	6a 04		 push	 4
  02198	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  0219b	50		 push	 eax
  0219c	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  0219f	51		 push	 ecx
  021a0	68 55 01 00 00	 push	 341			; 00000155H
  021a5	6a 3a		 push	 58			; 0000003aH
  021a7	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7235 : 
; 7236 : 			if (buffer[1] == '0')

  021ac	b8 01 00 00 00	 mov	 eax, 1
  021b1	c1 e0 00	 shl	 eax, 0
  021b4	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  021b9	83 f9 30	 cmp	 ecx, 48			; 00000030H
  021bc	75 09		 jne	 SHORT $LN363@draw_weapo

; 7237 : 			{
; 7238 : 				u = 184 + (9 * 5);

  021be	c7 45 9c e5 00
	00 00		 mov	 DWORD PTR _u$[ebp], 229	; 000000e5H

; 7239 : 			}
; 7240 : 			else

  021c5	eb 1c		 jmp	 SHORT $LN364@draw_weapo
$LN363@draw_weapo:

; 7241 : 			{
; 7242 : 				u = 184 + ((buffer[1] - '1') * 5);

  021c7	b8 01 00 00 00	 mov	 eax, 1
  021cc	c1 e0 00	 shl	 eax, 0
  021cf	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  021d4	83 e9 31	 sub	 ecx, 49			; 00000031H
  021d7	6b d1 05	 imul	 edx, ecx, 5
  021da	81 c2 b8 00 00
	00		 add	 edx, 184		; 000000b8H
  021e0	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN364@draw_weapo:

; 7243 : 			}
; 7244 : 
; 7245 : 			draw_sprite (62, 341, u, v, 4, 6);

  021e3	6a 06		 push	 6
  021e5	6a 04		 push	 4
  021e7	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  021ea	50		 push	 eax
  021eb	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  021ee	51		 push	 ecx
  021ef	68 55 01 00 00	 push	 341			; 00000155H
  021f4	6a 3e		 push	 62			; 0000003eH
  021f6	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7246 : 
; 7247 : 			//
; 7248 : 			// damage cross
; 7249 : 			//
; 7250 : 
; 7251 : 			if (damaged)

  021fb	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  021ff	74 1a		 je	 SHORT $LN349@draw_weapo

; 7252 : 			{
; 7253 : 				draw_sprite (49, 339, 196, 290, 17, 9);

  02201	6a 09		 push	 9
  02203	6a 11		 push	 17			; 00000011H
  02205	68 22 01 00 00	 push	 290			; 00000122H
  0220a	68 c4 00 00 00	 push	 196			; 000000c4H
  0220f	68 53 01 00 00	 push	 339			; 00000153H
  02214	6a 31		 push	 49			; 00000031H
  02216	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN349@draw_weapo:

; 7254 : 			}
; 7255 : 		}
; 7256 : 	}
; 7257 : 
; 7258 : 	////////////////////////////////////////////////////////////////////////////////
; 7259 : 	//
; 7260 : 	// Flare
; 7261 : 	//
; 7262 : 	////////////////////////////////////////////////////////////////////////////////
; 7263 : 
; 7264 : 	if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_FLARE)

  0221b	83 7d 94 44	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 68 ; 00000044H
  0221f	0f 85 28 02 00
	00		 jne	 $LN1@draw_weapo

; 7265 : 	{
; 7266 : 		if (draw_large_mfd)

  02225	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0222c	0f 84 13 01 00
	00		 je	 $LN367@draw_weapo

; 7267 : 		{
; 7268 : 			////////////////////////////////////////
; 7269 : 			//
; 7270 : 			// LARGE
; 7271 : 			//
; 7272 : 			////////////////////////////////////////
; 7273 : 
; 7274 : 			//
; 7275 : 			// digits
; 7276 : 			//
; 7277 : 
; 7278 : 			if ((number > 0) && (!damaged))

  02232	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  02236	7e 29		 jle	 SHORT $LN369@draw_weapo
  02238	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0223c	75 23		 jne	 SHORT $LN369@draw_weapo

; 7279 : 			{
; 7280 : 				draw_sprite (134, 160, 503, 3, 15, 14);

  0223e	6a 0e		 push	 14			; 0000000eH
  02240	6a 0f		 push	 15			; 0000000fH
  02242	6a 03		 push	 3
  02244	68 f7 01 00 00	 push	 503			; 000001f7H
  02249	68 a0 00 00 00	 push	 160			; 000000a0H
  0224e	68 86 00 00 00	 push	 134			; 00000086H
  02253	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7281 : 
; 7282 : 				v = 32;

  02258	c7 45 98 20 00
	00 00		 mov	 DWORD PTR _v$[ebp], 32	; 00000020H

; 7283 : 			}
; 7284 : 			else

  0225f	eb 07		 jmp	 SHORT $LN370@draw_weapo
$LN369@draw_weapo:

; 7285 : 			{
; 7286 : 				v = 47;

  02261	c7 45 98 2f 00
	00 00		 mov	 DWORD PTR _v$[ebp], 47	; 0000002fH
$LN370@draw_weapo:

; 7287 : 			}
; 7288 : 
; 7289 : 			sprintf (buffer, "%02d", number);

  02268	8b 45 ac	 mov	 eax, DWORD PTR _number$[ebp]
  0226b	50		 push	 eax
  0226c	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  02271	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  02274	51		 push	 ecx
  02275	e8 00 00 00 00	 call	 _sprintf
  0227a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7290 : 
; 7291 : 			if (buffer[0] == '0')

  0227d	b8 01 00 00 00	 mov	 eax, 1
  02282	6b c8 00	 imul	 ecx, eax, 0
  02285	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  0228a	83 fa 30	 cmp	 edx, 48			; 00000030H
  0228d	75 09		 jne	 SHORT $LN371@draw_weapo

; 7292 : 			{
; 7293 : 				u = 364 + (9 * 10);

  0228f	c7 45 9c c6 01
	00 00		 mov	 DWORD PTR _u$[ebp], 454	; 000001c6H

; 7294 : 			}
; 7295 : 			else

  02296	eb 1b		 jmp	 SHORT $LN372@draw_weapo
$LN371@draw_weapo:

; 7296 : 			{
; 7297 : 				u = 364 + ((buffer[0] - '1') * 10);

  02298	b8 01 00 00 00	 mov	 eax, 1
  0229d	6b c8 00	 imul	 ecx, eax, 0
  022a0	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  022a5	83 ea 31	 sub	 edx, 49			; 00000031H
  022a8	6b c2 0a	 imul	 eax, edx, 10
  022ab	05 6c 01 00 00	 add	 eax, 364		; 0000016cH
  022b0	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN372@draw_weapo:

; 7298 : 			}
; 7299 : 
; 7300 : 			draw_sprite (149, 161, u, v, 8, 12);

  022b3	6a 0c		 push	 12			; 0000000cH
  022b5	6a 08		 push	 8
  022b7	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  022ba	50		 push	 eax
  022bb	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  022be	51		 push	 ecx
  022bf	68 a1 00 00 00	 push	 161			; 000000a1H
  022c4	68 95 00 00 00	 push	 149			; 00000095H
  022c9	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7301 : 
; 7302 : 			if (buffer[1] == '0')

  022ce	b8 01 00 00 00	 mov	 eax, 1
  022d3	c1 e0 00	 shl	 eax, 0
  022d6	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  022db	83 f9 30	 cmp	 ecx, 48			; 00000030H
  022de	75 09		 jne	 SHORT $LN373@draw_weapo

; 7303 : 			{
; 7304 : 				u = 364 + (9 * 10);

  022e0	c7 45 9c c6 01
	00 00		 mov	 DWORD PTR _u$[ebp], 454	; 000001c6H

; 7305 : 			}
; 7306 : 			else

  022e7	eb 1c		 jmp	 SHORT $LN374@draw_weapo
$LN373@draw_weapo:

; 7307 : 			{
; 7308 : 				u = 364 + ((buffer[1] - '1') * 10);

  022e9	b8 01 00 00 00	 mov	 eax, 1
  022ee	c1 e0 00	 shl	 eax, 0
  022f1	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  022f6	83 e9 31	 sub	 ecx, 49			; 00000031H
  022f9	6b d1 0a	 imul	 edx, ecx, 10
  022fc	81 c2 6c 01 00
	00		 add	 edx, 364		; 0000016cH
  02302	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN374@draw_weapo:

; 7309 : 			}
; 7310 : 
; 7311 : 			draw_sprite (158, 161, u, v, 8, 12);

  02305	6a 0c		 push	 12			; 0000000cH
  02307	6a 08		 push	 8
  02309	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  0230c	50		 push	 eax
  0230d	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  02310	51		 push	 ecx
  02311	68 a1 00 00 00	 push	 161			; 000000a1H
  02316	68 9e 00 00 00	 push	 158			; 0000009eH
  0231b	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7312 : 
; 7313 : 			//
; 7314 : 			// damage cross
; 7315 : 			//
; 7316 : 
; 7317 : 			if (damaged)

  02320	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  02324	74 1a		 je	 SHORT $LN375@draw_weapo

; 7318 : 			{
; 7319 : 				draw_sprite (135, 159, 387, 61, 33, 17);

  02326	6a 11		 push	 17			; 00000011H
  02328	6a 21		 push	 33			; 00000021H
  0232a	6a 3d		 push	 61			; 0000003dH
  0232c	68 83 01 00 00	 push	 387			; 00000183H
  02331	68 9f 00 00 00	 push	 159			; 0000009fH
  02336	68 87 00 00 00	 push	 135			; 00000087H
  0233b	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN375@draw_weapo:

; 7320 : 			}
; 7321 : 		}
; 7322 : 		else

  02340	e9 08 01 00 00	 jmp	 $LN1@draw_weapo
$LN367@draw_weapo:

; 7323 : 		{
; 7324 : 			////////////////////////////////////////
; 7325 : 			//
; 7326 : 			// SMALL
; 7327 : 			//
; 7328 : 			////////////////////////////////////////
; 7329 : 
; 7330 : 			//
; 7331 : 			// digits
; 7332 : 			//
; 7333 : 
; 7334 : 			if ((number > 0) && (!damaged))

  02345	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  02349	7e 29		 jle	 SHORT $LN376@draw_weapo
  0234b	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0234f	75 23		 jne	 SHORT $LN376@draw_weapo

; 7335 : 			{
; 7336 : 				draw_sprite (69, 340, 253, 261, 8, 7);

  02351	6a 07		 push	 7
  02353	6a 08		 push	 8
  02355	68 05 01 00 00	 push	 261			; 00000105H
  0235a	68 fd 00 00 00	 push	 253			; 000000fdH
  0235f	68 54 01 00 00	 push	 340			; 00000154H
  02364	6a 45		 push	 69			; 00000045H
  02366	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7337 : 
; 7338 : 				v = 276;

  0236b	c7 45 98 14 01
	00 00		 mov	 DWORD PTR _v$[ebp], 276	; 00000114H

; 7339 : 			}
; 7340 : 			else

  02372	eb 07		 jmp	 SHORT $LN377@draw_weapo
$LN376@draw_weapo:

; 7341 : 			{
; 7342 : 				v = 283;

  02374	c7 45 98 1b 01
	00 00		 mov	 DWORD PTR _v$[ebp], 283	; 0000011bH
$LN377@draw_weapo:

; 7343 : 			}
; 7344 : 
; 7345 : 			sprintf (buffer, "%02d", number);

  0237b	8b 45 ac	 mov	 eax, DWORD PTR _number$[ebp]
  0237e	50		 push	 eax
  0237f	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  02384	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  02387	51		 push	 ecx
  02388	e8 00 00 00 00	 call	 _sprintf
  0238d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7346 : 
; 7347 : 			if (buffer[0] == '0')

  02390	b8 01 00 00 00	 mov	 eax, 1
  02395	6b c8 00	 imul	 ecx, eax, 0
  02398	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  0239d	83 fa 30	 cmp	 edx, 48			; 00000030H
  023a0	75 09		 jne	 SHORT $LN378@draw_weapo

; 7348 : 			{
; 7349 : 				u = 184 + (9 * 5);

  023a2	c7 45 9c e5 00
	00 00		 mov	 DWORD PTR _u$[ebp], 229	; 000000e5H

; 7350 : 			}
; 7351 : 			else

  023a9	eb 1b		 jmp	 SHORT $LN379@draw_weapo
$LN378@draw_weapo:

; 7352 : 			{
; 7353 : 				u = 184 + ((buffer[0] - '1') * 5);

  023ab	b8 01 00 00 00	 mov	 eax, 1
  023b0	6b c8 00	 imul	 ecx, eax, 0
  023b3	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  023b8	83 ea 31	 sub	 edx, 49			; 00000031H
  023bb	6b c2 05	 imul	 eax, edx, 5
  023be	05 b8 00 00 00	 add	 eax, 184		; 000000b8H
  023c3	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN379@draw_weapo:

; 7354 : 			}
; 7355 : 
; 7356 : 			draw_sprite (77, 341, u, v, 4, 6);

  023c6	6a 06		 push	 6
  023c8	6a 04		 push	 4
  023ca	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  023cd	50		 push	 eax
  023ce	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  023d1	51		 push	 ecx
  023d2	68 55 01 00 00	 push	 341			; 00000155H
  023d7	6a 4d		 push	 77			; 0000004dH
  023d9	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7357 : 
; 7358 : 			if (buffer[1] == '0')

  023de	b8 01 00 00 00	 mov	 eax, 1
  023e3	c1 e0 00	 shl	 eax, 0
  023e6	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  023eb	83 f9 30	 cmp	 ecx, 48			; 00000030H
  023ee	75 09		 jne	 SHORT $LN380@draw_weapo

; 7359 : 			{
; 7360 : 				u = 184 + (9 * 5);

  023f0	c7 45 9c e5 00
	00 00		 mov	 DWORD PTR _u$[ebp], 229	; 000000e5H

; 7361 : 			}
; 7362 : 			else

  023f7	eb 1c		 jmp	 SHORT $LN381@draw_weapo
$LN380@draw_weapo:

; 7363 : 			{
; 7364 : 				u = 184 + ((buffer[1] - '1') * 5);

  023f9	b8 01 00 00 00	 mov	 eax, 1
  023fe	c1 e0 00	 shl	 eax, 0
  02401	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  02406	83 e9 31	 sub	 ecx, 49			; 00000031H
  02409	6b d1 05	 imul	 edx, ecx, 5
  0240c	81 c2 b8 00 00
	00		 add	 edx, 184		; 000000b8H
  02412	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN381@draw_weapo:

; 7365 : 			}
; 7366 : 
; 7367 : 			draw_sprite (81, 341, u, v, 4, 6);

  02415	6a 06		 push	 6
  02417	6a 04		 push	 4
  02419	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  0241c	50		 push	 eax
  0241d	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  02420	51		 push	 ecx
  02421	68 55 01 00 00	 push	 341			; 00000155H
  02426	6a 51		 push	 81			; 00000051H
  02428	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7368 : 
; 7369 : 			//
; 7370 : 			// damage cross
; 7371 : 			//
; 7372 : 
; 7373 : 			if (damaged)

  0242d	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  02431	74 1a		 je	 SHORT $LN1@draw_weapo

; 7374 : 			{
; 7375 : 				draw_sprite (69, 339, 196, 290, 17, 9);

  02433	6a 09		 push	 9
  02435	6a 11		 push	 17			; 00000011H
  02437	68 22 01 00 00	 push	 290			; 00000122H
  0243c	68 c4 00 00 00	 push	 196			; 000000c4H
  02441	68 53 01 00 00	 push	 339			; 00000153H
  02446	6a 45		 push	 69			; 00000045H
  02448	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN1@draw_weapo:

; 7376 : 			}
; 7377 : 		}
; 7378 : 	}
; 7379 : }

  0244d	5f		 pop	 edi
  0244e	5e		 pop	 esi
  0244f	5b		 pop	 ebx
  02450	8b e5		 mov	 esp, ebp
  02452	5d		 pop	 ebp
  02453	c2 0c 00	 ret	 12			; 0000000cH
  02456	66 90		 npad	 2
$LN384@draw_weapo:
  02458	00 00 00 00	 DD	 $LN79@draw_weapo
  0245c	00 00 00 00	 DD	 $LN80@draw_weapo
  02460	00 00 00 00	 DD	 $LN81@draw_weapo
  02464	00 00 00 00	 DD	 $LN82@draw_weapo
$LN385@draw_weapo:
  02468	00 00 00 00	 DD	 $LN96@draw_weapo
  0246c	00 00 00 00	 DD	 $LN97@draw_weapo
  02470	00 00 00 00	 DD	 $LN98@draw_weapo
  02474	00 00 00 00	 DD	 $LN99@draw_weapo
$LN386@draw_weapo:
  02478	00 00 00 00	 DD	 $LN100@draw_weapo
  0247c	00 00 00 00	 DD	 $LN101@draw_weapo
  02480	00 00 00 00	 DD	 $LN102@draw_weapo
  02484	00 00 00 00	 DD	 $LN103@draw_weapo
$LN387@draw_weapo:
  02488	00 00 00 00	 DD	 $LN110@draw_weapo
  0248c	00 00 00 00	 DD	 $LN111@draw_weapo
  02490	00 00 00 00	 DD	 $LN112@draw_weapo
  02494	00 00 00 00	 DD	 $LN113@draw_weapo
$LN388@draw_weapo:
  02498	00 00 00 00	 DD	 $LN127@draw_weapo
  0249c	00 00 00 00	 DD	 $LN128@draw_weapo
  024a0	00 00 00 00	 DD	 $LN129@draw_weapo
  024a4	00 00 00 00	 DD	 $LN130@draw_weapo
$LN389@draw_weapo:
  024a8	00 00 00 00	 DD	 $LN131@draw_weapo
  024ac	00 00 00 00	 DD	 $LN132@draw_weapo
  024b0	00 00 00 00	 DD	 $LN133@draw_weapo
  024b4	00 00 00 00	 DD	 $LN134@draw_weapo
$LN390@draw_weapo:
  024b8	00 00 00 00	 DD	 $LN145@draw_weapo
  024bc	00 00 00 00	 DD	 $LN146@draw_weapo
  024c0	00 00 00 00	 DD	 $LN147@draw_weapo
  024c4	00 00 00 00	 DD	 $LN148@draw_weapo
$LN391@draw_weapo:
  024c8	00 00 00 00	 DD	 $LN151@draw_weapo
  024cc	00 00 00 00	 DD	 $LN176@draw_weapo
  024d0	00 00 00 00	 DD	 $LN151@draw_weapo
  024d4	00 00 00 00	 DD	 $LN176@draw_weapo
$LN392@draw_weapo:
  024d8	00 00 00 00	 DD	 $LN202@draw_weapo
  024dc	00 00 00 00	 DD	 $LN203@draw_weapo
  024e0	00 00 00 00	 DD	 $LN204@draw_weapo
  024e4	00 00 00 00	 DD	 $LN205@draw_weapo
$LN393@draw_weapo:
  024e8	00 00 00 00	 DD	 $LN206@draw_weapo
  024ec	00 00 00 00	 DD	 $LN207@draw_weapo
  024f0	00 00 00 00	 DD	 $LN208@draw_weapo
  024f4	00 00 00 00	 DD	 $LN209@draw_weapo
$LN394@draw_weapo:
  024f8	00 00 00 00	 DD	 $LN216@draw_weapo
  024fc	00 00 00 00	 DD	 $LN217@draw_weapo
  02500	00 00 00 00	 DD	 $LN218@draw_weapo
  02504	00 00 00 00	 DD	 $LN219@draw_weapo
$LN395@draw_weapo:
  02508	00 00 00 00	 DD	 $LN222@draw_weapo
  0250c	00 00 00 00	 DD	 $LN247@draw_weapo
  02510	00 00 00 00	 DD	 $LN222@draw_weapo
  02514	00 00 00 00	 DD	 $LN247@draw_weapo
$LN396@draw_weapo:
  02518	00 00 00 00	 DD	 $LN273@draw_weapo
  0251c	00 00 00 00	 DD	 $LN274@draw_weapo
  02520	00 00 00 00	 DD	 $LN275@draw_weapo
  02524	00 00 00 00	 DD	 $LN276@draw_weapo
$LN397@draw_weapo:
  02528	00 00 00 00	 DD	 $LN277@draw_weapo
  0252c	00 00 00 00	 DD	 $LN278@draw_weapo
  02530	00 00 00 00	 DD	 $LN279@draw_weapo
  02534	00 00 00 00	 DD	 $LN280@draw_weapo
?draw_weapon_hardpoint_info@@YGXHHH@Z ENDP		; draw_weapon_hardpoint_info
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_sprite@@YGXHHHHHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_u$ = 16						; size = 4
_v$ = 20						; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
?draw_sprite@@YGXHHHHHH@Z PROC				; draw_sprite, COMDAT

; 5456 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5457 : 	ASSERT (x >= 0);

  00009	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  0000d	7d 18		 jge	 SHORT $LN2@draw_sprit
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_sprite@@YGXHHHHHH@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06EBODONHD@x?5?$DO?$DN?50@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@draw_sprit:

; 5458 : 	ASSERT (y >= 0);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _y$[ebp], 0
  0002b	7d 18		 jge	 SHORT $LN3@draw_sprit
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_sprite@@YGXHHHHHH@Z@4JA
  00032	83 c0 02	 add	 eax, 2
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_06OHJEOGMH@y?5?$DO?$DN?50@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@draw_sprit:

; 5459 : 
; 5460 : 	weapon_sprite.x = weapon_x_offset + x;

  00045	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_x_offset@@3HA
  0004a	03 45 08	 add	 eax, DWORD PTR _x$[ebp]
  0004d	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A, eax

; 5461 : 
; 5462 : 	weapon_sprite.y = weapon_y_offset + y;

  00052	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_y_offset@@3HA
  00057	03 45 0c	 add	 eax, DWORD PTR _y$[ebp]
  0005a	a3 04 00 00 00	 mov	 DWORD PTR ?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A+4, eax

; 5463 : 
; 5464 : 	weapon_sprite.u = u;

  0005f	8b 45 10	 mov	 eax, DWORD PTR _u$[ebp]
  00062	a3 08 00 00 00	 mov	 DWORD PTR ?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A+8, eax

; 5465 : 
; 5466 : 	weapon_sprite.v = v;

  00067	8b 45 14	 mov	 eax, DWORD PTR _v$[ebp]
  0006a	a3 0c 00 00 00	 mov	 DWORD PTR ?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A+12, eax

; 5467 : 
; 5468 : 	weapon_sprite.width = width;

  0006f	8b 45 18	 mov	 eax, DWORD PTR _width$[ebp]
  00072	a3 10 00 00 00	 mov	 DWORD PTR ?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A+16, eax

; 5469 : 
; 5470 : 	weapon_sprite.height = height;

  00077	8b 45 1c	 mov	 eax, DWORD PTR _height$[ebp]
  0007a	a3 14 00 00 00	 mov	 DWORD PTR ?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A+20, eax

; 5471 : 
; 5472 : 	// JB 030311 Disable EEAH check
; 5473 : 	if (!weapon_sprite_data)

  0007f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?weapon_sprite_data@@3PAEA, 0
  00086	75 02		 jne	 SHORT $LN4@draw_sprit

; 5474 : 		return;

  00088	eb 40		 jmp	 SHORT $LN1@draw_sprit
$LN4@draw_sprit:

; 5475 : 
; 5476 : 	if (weapon_draw_on_texture)

  0008a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?weapon_draw_on_texture@@3HA, 0
  00091	74 20		 je	 SHORT $LN5@draw_sprit

; 5477 : 	{
; 5478 : 		blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture (weapon_sprite_data, weapon_mask_data, &weapon_sprite, video_screen);

  00093	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00098	50		 push	 eax
  00099	68 00 00 00 00	 push	 OFFSET ?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A
  0009e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_mask_data@@3PAEA
  000a4	51		 push	 ecx
  000a5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?weapon_sprite_data@@3PAEA
  000ab	52		 push	 edx
  000ac	e8 00 00 00 00	 call	 ?blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@PAUSCREEN@@@Z ; blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture

; 5479 : 	}
; 5480 : 	else

  000b1	eb 17		 jmp	 SHORT $LN1@draw_sprit
$LN5@draw_sprit:

; 5481 : 	{
; 5482 : 		blit_rgb_alpha_masked_sprite_zero_mask_value (weapon_sprite_data, weapon_mask_data, &weapon_sprite);

  000b3	68 00 00 00 00	 push	 OFFSET ?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A
  000b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_mask_data@@3PAEA
  000bd	50		 push	 eax
  000be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_sprite_data@@3PAEA
  000c4	51		 push	 ecx
  000c5	e8 00 00 00 00	 call	 ?blit_rgb_alpha_masked_sprite_zero_mask_value@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@@Z ; blit_rgb_alpha_masked_sprite_zero_mask_value
$LN1@draw_sprit:

; 5483 : 	}
; 5484 : }

  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c2 18 00	 ret	 24			; 00000018H
?draw_sprite@@YGXHHHHHH@Z ENDP				; draw_sprite
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_aircraft_survivability_equipment_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv1308 = -360						; size = 4
tv1057 = -356						; size = 4
tv1035 = -356						; size = 4
tv1007 = -356						; size = 4
tv985 = -356						; size = 4
tv834 = -356						; size = 4
tv769 = -356						; size = 4
tv746 = -356						; size = 4
tv725 = -356						; size = 4
tv705 = -356						; size = 4
tv670 = -356						; size = 4
tv649 = -356						; size = 4
tv628 = -356						; size = 4
tv609 = -356						; size = 4
tv590 = -356						; size = 4
tv569 = -356						; size = 4
tv548 = -356						; size = 4
tv527 = -356						; size = 4
tv508 = -356						; size = 4
tv489 = -356						; size = 4
tv470 = -356						; size = 4
tv450 = -356						; size = 4
tv421 = -356						; size = 4
tv400 = -356						; size = 4
tv381 = -356						; size = 4
tv362 = -356						; size = 4
tv342 = -356						; size = 4
tv308 = -356						; size = 4
tv280 = -356						; size = 4
tv258 = -356						; size = 4
tv237 = -356						; size = 4
tv218 = -356						; size = 4
tv199 = -356						; size = 4
tv170 = -356						; size = 4
tv150 = -356						; size = 4
tv130 = -356						; size = 4
tv78 = -356						; size = 4
tv1050 = -352						; size = 4
tv1028 = -352						; size = 4
tv1000 = -352						; size = 4
tv978 = -352						; size = 4
tv826 = -352						; size = 4
tv761 = -352						; size = 4
tv738 = -352						; size = 4
tv717 = -352						; size = 4
tv697 = -352						; size = 4
tv662 = -352						; size = 4
tv641 = -352						; size = 4
tv621 = -352						; size = 4
tv602 = -352						; size = 4
tv582 = -352						; size = 4
tv562 = -352						; size = 4
tv540 = -352						; size = 4
tv520 = -352						; size = 4
tv501 = -352						; size = 4
tv482 = -352						; size = 4
tv462 = -352						; size = 4
tv442 = -352						; size = 4
tv413 = -352						; size = 4
tv393 = -352						; size = 4
tv374 = -352						; size = 4
tv354 = -352						; size = 4
tv334 = -352						; size = 4
tv300 = -352						; size = 4
tv272 = -352						; size = 4
tv250 = -352						; size = 4
tv230 = -352						; size = 4
tv211 = -352						; size = 4
tv191 = -352						; size = 4
tv162 = -352						; size = 4
tv142 = -352						; size = 4
tv90 = -352						; size = 4
tv70 = -352						; size = 4
_time_to_impact$1 = -284				; size = 4
_closest_missile$2 = -280				; size = 4
_dy$3 = -276						; size = 4
_dx$4 = -272						; size = 4
_air_scan_range$5 = -268				; size = 4
_draw_threat_line$6 = -264				; size = 4
_threat_type$7 = -260					; size = 4
_threat_position$8 = -256				; size = 4
_launched_weapon$9 = -252				; size = 4
_threat$10 = -248					; size = 4
_bg_colour$ = -244					; size = 4
_fg_colour$ = -240					; size = 4
_source_position$ = -236				; size = 4
_source_target$ = -232					; size = 4
_source$ = -228						; size = 4
_source_heading$ = -224					; size = 4
_y_adjust$ = -220					; size = 4
_width$ = -216						; size = 4
_scale$ = -212						; size = 4
_source_side$ = -208					; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
?draw_aircraft_survivability_equipment_display_mfd@@YGXXZ PROC ; draw_aircraft_survivability_equipment_display_mfd, COMDAT

; 4811 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 68 01 00
	00		 sub	 esp, 360		; 00000168H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 4812 : 	char
; 4813 : 		*s,
; 4814 : 		buffer[200];
; 4815 : 
; 4816 : 	entity_sides
; 4817 : 		source_side;
; 4818 : 
; 4819 : 	float
; 4820 : 		scale,
; 4821 : 		width,
; 4822 : 		y_adjust,
; 4823 : 		source_heading;
; 4824 : 
; 4825 : 	entity
; 4826 : 		*source,
; 4827 : 		*source_target;
; 4828 : 
; 4829 : 	vec3d
; 4830 : 		*source_position;
; 4831 : 
; 4832 : 	rgb_colour
; 4833 : 		fg_colour,
; 4834 : 		bg_colour;
; 4835 : 
; 4836 : 	source = get_gunship_entity ();

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00011	89 85 1c ff ff
	ff		 mov	 DWORD PTR _source$[ebp], eax

; 4837 : 
; 4838 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  00017	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0001e	74 10		 je	 SHORT $LN102@draw_aircr
  00020	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]
  00028	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv70[ebp], ecx
  0002e	eb 24		 jmp	 SHORT $LN103@draw_aircr
$LN102@draw_aircr:
  00030	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00036	83 c2 1b	 add	 edx, 27			; 0000001bH
  00039	52		 push	 edx
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0004a	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN103@draw_aircr:
  00054	b9 01 00 00 00	 mov	 ecx, 1
  00059	85 c9		 test	 ecx, ecx
  0005b	74 0c		 je	 SHORT $LN104@draw_aircr
  0005d	c7 85 9c fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv78[ebp], 187 ; 000000bbH
  00067	eb 24		 jmp	 SHORT $LN105@draw_aircr
$LN104@draw_aircr:
  00069	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  0006f	83 c2 1b	 add	 edx, 27			; 0000001bH
  00072	52		 push	 edx
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00078	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00083	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN105@draw_aircr:
  0008d	68 bb 00 00 00	 push	 187			; 000000bbH
  00092	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00098	51		 push	 ecx
  00099	69 95 a0 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv70[ebp], 1116
  000a3	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv78[ebp]
  000a9	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000b0	ff d1		 call	 ecx
  000b2	89 85 30 ff ff
	ff		 mov	 DWORD PTR _source_side$[ebp], eax

; 4839 : 
; 4840 : 	source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  000b8	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  000bf	74 10		 je	 SHORT $LN106@draw_aircr
  000c1	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  000c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c9	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  000cf	eb 24		 jmp	 SHORT $LN107@draw_aircr
$LN106@draw_aircr:
  000d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  000d7	83 c2 1d	 add	 edx, 29			; 0000001dH
  000da	52		 push	 edx
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000eb	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv90[ebp], 0
$LN107@draw_aircr:
  000f5	b9 01 00 00 00	 mov	 ecx, 1
  000fa	85 c9		 test	 ecx, ecx
  000fc	74 0c		 je	 SHORT $LN108@draw_aircr
  000fe	c7 85 9c fe ff
	ff 34 00 00 00	 mov	 DWORD PTR tv130[ebp], 52 ; 00000034H
  00108	eb 24		 jmp	 SHORT $LN109@draw_aircr
$LN108@draw_aircr:
  0010a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00110	83 c2 1d	 add	 edx, 29			; 0000001dH
  00113	52		 push	 edx
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00119	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00124	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv130[ebp], 0
$LN109@draw_aircr:
  0012e	6a 34		 push	 52			; 00000034H
  00130	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00136	51		 push	 ecx
  00137	69 95 a0 fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv90[ebp], 700
  00141	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv130[ebp]
  00147	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0014e	ff d1		 call	 ecx
  00150	d9 9d 20 ff ff
	ff		 fstp	 DWORD PTR _source_heading$[ebp]

; 4841 : 
; 4842 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  00156	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0015d	74 10		 je	 SHORT $LN110@draw_aircr
  0015f	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00165	8b 08		 mov	 ecx, DWORD PTR [eax]
  00167	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv142[ebp], ecx
  0016d	eb 24		 jmp	 SHORT $LN111@draw_aircr
$LN110@draw_aircr:
  0016f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00175	83 c2 1f	 add	 edx, 31			; 0000001fH
  00178	52		 push	 edx
  00179	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0017e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00183	50		 push	 eax
  00184	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00189	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv142[ebp], 0
$LN111@draw_aircr:
  00193	b9 01 00 00 00	 mov	 ecx, 1
  00198	85 c9		 test	 ecx, ecx
  0019a	74 0c		 je	 SHORT $LN112@draw_aircr
  0019c	c7 85 9c fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv150[ebp], 8
  001a6	eb 24		 jmp	 SHORT $LN113@draw_aircr
$LN112@draw_aircr:
  001a8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  001ae	83 c2 1f	 add	 edx, 31			; 0000001fH
  001b1	52		 push	 edx
  001b2	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  001b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001bc	50		 push	 eax
  001bd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c2	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
$LN113@draw_aircr:
  001cc	6a 08		 push	 8
  001ce	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  001d4	51		 push	 ecx
  001d5	6b 95 a0 fe ff
	ff 60		 imul	 edx, DWORD PTR tv142[ebp], 96
  001dc	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv150[ebp]
  001e2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  001e9	ff d1		 call	 ecx
  001eb	89 85 14 ff ff
	ff		 mov	 DWORD PTR _source_position$[ebp], eax

; 4843 : 
; 4844 : 	source_target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  001f1	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  001f8	74 10		 je	 SHORT $LN114@draw_aircr
  001fa	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00200	8b 08		 mov	 ecx, DWORD PTR [eax]
  00202	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv162[ebp], ecx
  00208	eb 24		 jmp	 SHORT $LN115@draw_aircr
$LN114@draw_aircr:
  0020a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00210	83 c2 21	 add	 edx, 33			; 00000021H
  00213	52		 push	 edx
  00214	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00219	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0021e	50		 push	 eax
  0021f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00224	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv162[ebp], 0
$LN115@draw_aircr:
  0022e	b9 01 00 00 00	 mov	 ecx, 1
  00233	85 c9		 test	 ecx, ecx
  00235	74 0c		 je	 SHORT $LN116@draw_aircr
  00237	c7 85 9c fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv170[ebp], 38 ; 00000026H
  00241	eb 24		 jmp	 SHORT $LN117@draw_aircr
$LN116@draw_aircr:
  00243	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00249	83 c2 21	 add	 edx, 33			; 00000021H
  0024c	52		 push	 edx
  0024d	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00252	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00257	50		 push	 eax
  00258	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0025d	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv170[ebp], 0
$LN117@draw_aircr:
  00267	6a 26		 push	 38			; 00000026H
  00269	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  0026f	51		 push	 ecx
  00270	69 95 a0 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv162[ebp], 180
  0027a	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv170[ebp]
  00280	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00287	ff d1		 call	 ecx
  00289	89 85 18 ff ff
	ff		 mov	 DWORD PTR _source_target$[ebp], eax

; 4845 : 
; 4846 : 	scale = RADIUS / tsd_ase_range;

  0028f	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?tsd_ase_range@@3MA
  00297	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fe999999999999a
  0029f	f2 0f 5e c8	 divsd	 xmm1, xmm0
  002a3	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  002a7	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _scale$[ebp], xmm0

; 4847 : 
; 4848 : 	////////////////////////////////////////
; 4849 : 	//
; 4850 : 	// threats
; 4851 : 	//
; 4852 : 	////////////////////////////////////////
; 4853 : 
; 4854 : 	{
; 4855 : 		entity
; 4856 : 			*threat,
; 4857 : 			*launched_weapon;
; 4858 : 
; 4859 : 		vec3d
; 4860 : 			*threat_position;
; 4861 : 
; 4862 : 		threat_types
; 4863 : 			threat_type;
; 4864 : 
; 4865 : 		int
; 4866 : 			draw_threat_line;
; 4867 : 
; 4868 : 		float
; 4869 : 			air_scan_range,
; 4870 : 			dx,
; 4871 : 			dy;
; 4872 : 
; 4873 : 		ase_threat_line_flash_timer -= get_delta_time ();

  002af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ase_threat_line_flash_timer@@3MA
  002b7	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  002bf	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?ase_threat_line_flash_timer@@3MA, xmm0

; 4874 : 
; 4875 : 		if (ase_threat_line_flash_timer < 0.0)

  002c7	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ase_threat_line_flash_timer@@3MA
  002cf	0f 57 c9	 xorps	 xmm1, xmm1
  002d2	66 0f 2f c8	 comisd	 xmm1, xmm0
  002d6	76 1d		 jbe	 SHORT $LN12@draw_aircr

; 4876 : 		{
; 4877 : 			ase_threat_line_flash_timer = ASE_THREAT_LINE_FLASH_RATE;

  002d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  002e0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?ase_threat_line_flash_timer@@3MA, xmm0

; 4878 : 
; 4879 : 			ase_draw_threat_line_status ^= 1;

  002e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ase_draw_threat_line_status@@3HA
  002ed	83 f0 01	 xor	 eax, 1
  002f0	a3 00 00 00 00	 mov	 DWORD PTR ?ase_draw_threat_line_status@@3HA, eax
$LN12@draw_aircr:

; 4880 : 		}
; 4881 : 
; 4882 : 		set_2d_window_rotation (mfd_env, source_heading);

  002f5	51		 push	 ecx
  002f6	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  002fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00303	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00308	50		 push	 eax
  00309	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 4883 : 
; 4884 : 		//
; 4885 : 		// display enemy SAM and AAA threat range circles
; 4886 : 		//
; 4887 : 		// (use the gunship target list so that threats which are not targetting the player are still visible)
; 4888 : 		//
; 4889 : 
; 4890 : 		threat = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  0030e	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00315	74 10		 je	 SHORT $LN118@draw_aircr
  00317	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0031d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0031f	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv191[ebp], ecx
  00325	eb 24		 jmp	 SHORT $LN119@draw_aircr
$LN118@draw_aircr:
  00327	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  0032d	83 c2 4f	 add	 edx, 79			; 0000004fH
  00330	52		 push	 edx
  00331	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00336	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0033b	50		 push	 eax
  0033c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00341	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv191[ebp], 0
$LN119@draw_aircr:
  0034b	b9 01 00 00 00	 mov	 ecx, 1
  00350	85 c9		 test	 ecx, ecx
  00352	74 0c		 je	 SHORT $LN120@draw_aircr
  00354	c7 85 9c fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv199[ebp], 18 ; 00000012H
  0035e	eb 24		 jmp	 SHORT $LN121@draw_aircr
$LN120@draw_aircr:
  00360	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00366	83 c2 4f	 add	 edx, 79			; 0000004fH
  00369	52		 push	 edx
  0036a	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0036f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00374	50		 push	 eax
  00375	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0037a	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv199[ebp], 0
$LN121@draw_aircr:
  00384	6a 12		 push	 18			; 00000012H
  00386	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  0038c	51		 push	 ecx
  0038d	69 95 a0 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv191[ebp], 180
  00397	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv199[ebp]
  0039d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  003a4	ff d1		 call	 ecx
  003a6	89 85 08 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN2@draw_aircr:

; 4891 : 
; 4892 : 		while (threat)

  003ac	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  003b3	0f 84 b3 04 00
	00		 je	 $LN3@draw_aircr

; 4893 : 		{
; 4894 : 			if (!get_local_entity_int_value (threat, INT_TYPE_GROUND_RADAR_CLUTTER))

  003b9	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  003c0	74 10		 je	 SHORT $LN122@draw_aircr
  003c2	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  003c8	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ca	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv211[ebp], ecx
  003d0	eb 20		 jmp	 SHORT $LN123@draw_aircr
$LN122@draw_aircr:
  003d2	68 1e 13 00 00	 push	 4894			; 0000131eH
  003d7	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  003dc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003e2	52		 push	 edx
  003e3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003e8	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv211[ebp], 0
$LN123@draw_aircr:
  003f2	b8 01 00 00 00	 mov	 eax, 1
  003f7	85 c0		 test	 eax, eax
  003f9	74 0c		 je	 SHORT $LN124@draw_aircr
  003fb	c7 85 9c fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv218[ebp], 66 ; 00000042H
  00405	eb 20		 jmp	 SHORT $LN125@draw_aircr
$LN124@draw_aircr:
  00407	68 1e 13 00 00	 push	 4894			; 0000131eH
  0040c	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00411	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00417	51		 push	 ecx
  00418	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0041d	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv218[ebp], 0
$LN125@draw_aircr:
  00427	6a 42		 push	 66			; 00000042H
  00429	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  0042f	52		 push	 edx
  00430	69 85 a0 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv211[ebp], 1116
  0043a	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv218[ebp]
  00440	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00447	ff d2		 call	 edx
  00449	85 c0		 test	 eax, eax
  0044b	0f 85 78 03 00
	00		 jne	 $LN18@draw_aircr

; 4895 : 			{
; 4896 : 				if (source_side != get_local_entity_int_value (threat, INT_TYPE_SIDE))

  00451	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00458	74 10		 je	 SHORT $LN126@draw_aircr
  0045a	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00460	8b 08		 mov	 ecx, DWORD PTR [eax]
  00462	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv230[ebp], ecx
  00468	eb 20		 jmp	 SHORT $LN127@draw_aircr
$LN126@draw_aircr:
  0046a	68 20 13 00 00	 push	 4896			; 00001320H
  0046f	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00474	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0047a	52		 push	 edx
  0047b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00480	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv230[ebp], 0
$LN127@draw_aircr:
  0048a	b8 01 00 00 00	 mov	 eax, 1
  0048f	85 c0		 test	 eax, eax
  00491	74 0c		 je	 SHORT $LN128@draw_aircr
  00493	c7 85 9c fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv237[ebp], 187 ; 000000bbH
  0049d	eb 20		 jmp	 SHORT $LN129@draw_aircr
$LN128@draw_aircr:
  0049f	68 20 13 00 00	 push	 4896			; 00001320H
  004a4	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  004a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  004af	51		 push	 ecx
  004b0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004b5	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv237[ebp], 0
$LN129@draw_aircr:
  004bf	68 bb 00 00 00	 push	 187			; 000000bbH
  004c4	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  004ca	52		 push	 edx
  004cb	69 85 a0 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv230[ebp], 1116
  004d5	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv237[ebp]
  004db	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  004e2	ff d2		 call	 edx
  004e4	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  004ea	0f 84 d9 02 00
	00		 je	 $LN18@draw_aircr

; 4897 : 				{
; 4898 : 					threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  004f0	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  004f7	74 10		 je	 SHORT $LN130@draw_aircr
  004f9	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  004ff	8b 08		 mov	 ecx, DWORD PTR [eax]
  00501	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv250[ebp], ecx
  00507	eb 24		 jmp	 SHORT $LN131@draw_aircr
$LN130@draw_aircr:
  00509	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  0050f	83 c2 57	 add	 edx, 87			; 00000057H
  00512	52		 push	 edx
  00513	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00518	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0051d	50		 push	 eax
  0051e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00523	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv250[ebp], 0
$LN131@draw_aircr:
  0052d	b9 01 00 00 00	 mov	 ecx, 1
  00532	85 c9		 test	 ecx, ecx
  00534	74 0c		 je	 SHORT $LN132@draw_aircr
  00536	c7 85 9c fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv258[ebp], 233 ; 000000e9H
  00540	eb 24		 jmp	 SHORT $LN133@draw_aircr
$LN132@draw_aircr:
  00542	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00548	83 c2 57	 add	 edx, 87			; 00000057H
  0054b	52		 push	 edx
  0054c	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00551	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00556	50		 push	 eax
  00557	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0055c	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv258[ebp], 0
$LN133@draw_aircr:
  00566	68 e9 00 00 00	 push	 233			; 000000e9H
  0056b	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00571	51		 push	 ecx
  00572	69 95 a0 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv250[ebp], 1116
  0057c	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv258[ebp]
  00582	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00589	ff d1		 call	 ecx
  0058b	89 85 fc fe ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 4899 : 
; 4900 : 					if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA))

  00591	83 bd fc fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  00598	74 0d		 je	 SHORT $LN16@draw_aircr
  0059a	83 bd fc fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$7[ebp], 6
  005a1	0f 85 22 02 00
	00		 jne	 $LN18@draw_aircr
$LN16@draw_aircr:

; 4901 : 					{
; 4902 : 						threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  005a7	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  005ae	74 10		 je	 SHORT $LN134@draw_aircr
  005b0	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  005b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  005b8	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv272[ebp], ecx
  005be	eb 24		 jmp	 SHORT $LN135@draw_aircr
$LN134@draw_aircr:
  005c0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  005c6	83 c2 5b	 add	 edx, 91			; 0000005bH
  005c9	52		 push	 edx
  005ca	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  005cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  005d4	50		 push	 eax
  005d5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005da	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv272[ebp], 0
$LN135@draw_aircr:
  005e4	b9 01 00 00 00	 mov	 ecx, 1
  005e9	85 c9		 test	 ecx, ecx
  005eb	74 0c		 je	 SHORT $LN136@draw_aircr
  005ed	c7 85 9c fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv280[ebp], 8
  005f7	eb 24		 jmp	 SHORT $LN137@draw_aircr
$LN136@draw_aircr:
  005f9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  005ff	83 c2 5b	 add	 edx, 91			; 0000005bH
  00602	52		 push	 edx
  00603	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00608	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0060d	50		 push	 eax
  0060e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00613	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv280[ebp], 0
$LN137@draw_aircr:
  0061d	6a 08		 push	 8
  0061f	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00625	51		 push	 ecx
  00626	6b 95 a0 fe ff
	ff 60		 imul	 edx, DWORD PTR tv272[ebp], 96
  0062d	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv280[ebp]
  00633	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0063a	ff d1		 call	 ecx
  0063c	89 85 00 ff ff
	ff		 mov	 DWORD PTR _threat_position$8[ebp], eax

; 4903 : 
; 4904 : 						dx = (threat_position->x - source_position->x) * scale;

  00642	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  00648	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  0064e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00652	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00656	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0065e	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 4905 : 						dy = (threat_position->z - source_position->z) * scale;

  00666	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  0066c	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  00672	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00677	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0067c	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00684	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _dy$3[ebp], xmm0

; 4906 : 
; 4907 : 						air_scan_range = get_local_entity_float_value (threat, FLOAT_TYPE_AIR_SCAN_RANGE) * scale;

  0068c	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00693	74 10		 je	 SHORT $LN138@draw_aircr
  00695	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  0069b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0069d	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv300[ebp], ecx
  006a3	eb 24		 jmp	 SHORT $LN139@draw_aircr
$LN138@draw_aircr:
  006a5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  006ab	83 c2 60	 add	 edx, 96			; 00000060H
  006ae	52		 push	 edx
  006af	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  006b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  006b9	50		 push	 eax
  006ba	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006bf	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv300[ebp], 0
$LN139@draw_aircr:
  006c9	b9 01 00 00 00	 mov	 ecx, 1
  006ce	85 c9		 test	 ecx, ecx
  006d0	74 0c		 je	 SHORT $LN140@draw_aircr
  006d2	c7 85 9c fe ff
	ff 05 00 00 00	 mov	 DWORD PTR tv308[ebp], 5
  006dc	eb 24		 jmp	 SHORT $LN141@draw_aircr
$LN140@draw_aircr:
  006de	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  006e4	83 c2 60	 add	 edx, 96			; 00000060H
  006e7	52		 push	 edx
  006e8	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  006ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  006f2	50		 push	 eax
  006f3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006f8	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv308[ebp], 0
$LN141@draw_aircr:
  00702	6a 05		 push	 5
  00704	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  0070a	51		 push	 ecx
  0070b	69 95 a0 fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv300[ebp], 700
  00715	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv308[ebp]
  0071b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00722	ff d1		 call	 ecx
  00724	d9 9d 98 fe ff
	ff		 fstp	 DWORD PTR tv1308[ebp]
  0072a	f3 0f 10 85 98
	fe ff ff	 movss	 xmm0, DWORD PTR tv1308[ebp]
  00732	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0073a	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _air_scan_range$5[ebp], xmm0

; 4908 : 
; 4909 : 						if (threat_type == THREAT_TYPE_SAM)

  00742	83 bd fc fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  00749	75 40		 jne	 SHORT $LN17@draw_aircr

; 4910 : 							draw_2d_circle (dx, dy, air_scan_range, MFD_COLOUR_RED);

  0074b	b8 04 00 00 00	 mov	 eax, 4
  00750	6b c8 0f	 imul	 ecx, eax, 15
  00753	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00759	52		 push	 edx
  0075a	51		 push	 ecx
  0075b	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _air_scan_range$5[ebp]
  00763	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00768	51		 push	 ecx
  00769	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  00771	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00776	51		 push	 ecx
  00777	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  0077f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00784	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 4911 : 						else

  00789	eb 3e		 jmp	 SHORT $LN18@draw_aircr
$LN17@draw_aircr:

; 4912 : 							draw_2d_circle (dx, dy, air_scan_range, MFD_COLOUR_YELLOW);

  0078b	b8 04 00 00 00	 mov	 eax, 4
  00790	6b c8 0d	 imul	 ecx, eax, 13
  00793	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00799	52		 push	 edx
  0079a	51		 push	 ecx
  0079b	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _air_scan_range$5[ebp]
  007a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a8	51		 push	 ecx
  007a9	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  007b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b6	51		 push	 ecx
  007b7	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  007bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c4	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle
$LN18@draw_aircr:

; 4913 : 					}
; 4914 : 				}
; 4915 : 			}
; 4916 : 
; 4917 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_GUNSHIP_TARGET);

  007c9	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  007d0	74 10		 je	 SHORT $LN142@draw_aircr
  007d2	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  007d8	8b 08		 mov	 ecx, DWORD PTR [eax]
  007da	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv334[ebp], ecx
  007e0	eb 24		 jmp	 SHORT $LN143@draw_aircr
$LN142@draw_aircr:
  007e2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  007e8	83 c2 6a	 add	 edx, 106		; 0000006aH
  007eb	52		 push	 edx
  007ec	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  007f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  007f6	50		 push	 eax
  007f7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007fc	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv334[ebp], 0
$LN143@draw_aircr:
  00806	b9 01 00 00 00	 mov	 ecx, 1
  0080b	85 c9		 test	 ecx, ecx
  0080d	74 0c		 je	 SHORT $LN144@draw_aircr
  0080f	c7 85 9c fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv342[ebp], 18 ; 00000012H
  00819	eb 24		 jmp	 SHORT $LN145@draw_aircr
$LN144@draw_aircr:
  0081b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00821	83 c2 6a	 add	 edx, 106		; 0000006aH
  00824	52		 push	 edx
  00825	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0082a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0082f	50		 push	 eax
  00830	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00835	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv342[ebp], 0
$LN145@draw_aircr:
  0083f	6a 12		 push	 18			; 00000012H
  00841	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00847	51		 push	 ecx
  00848	69 95 a0 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv334[ebp], 180
  00852	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv342[ebp]
  00858	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0085f	ff d1		 call	 ecx
  00861	89 85 08 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 4918 : 		}

  00867	e9 40 fb ff ff	 jmp	 $LN2@draw_aircr
$LN3@draw_aircr:

; 4919 : 
; 4920 : 		//
; 4921 : 		// display enemy SAM, AAA and AIRBORNE_RADAR threats
; 4922 : 		//
; 4923 : 
; 4924 : 		threat = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  0086c	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00873	74 10		 je	 SHORT $LN146@draw_aircr
  00875	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0087b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0087d	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv354[ebp], ecx
  00883	eb 24		 jmp	 SHORT $LN147@draw_aircr
$LN146@draw_aircr:
  00885	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  0088b	83 c2 71	 add	 edx, 113		; 00000071H
  0088e	52		 push	 edx
  0088f	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00894	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00899	50		 push	 eax
  0089a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0089f	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv354[ebp], 0
$LN147@draw_aircr:
  008a9	b9 01 00 00 00	 mov	 ecx, 1
  008ae	85 c9		 test	 ecx, ecx
  008b0	74 0c		 je	 SHORT $LN148@draw_aircr
  008b2	c7 85 9c fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv362[ebp], 18 ; 00000012H
  008bc	eb 24		 jmp	 SHORT $LN149@draw_aircr
$LN148@draw_aircr:
  008be	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  008c4	83 c2 71	 add	 edx, 113		; 00000071H
  008c7	52		 push	 edx
  008c8	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  008cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  008d2	50		 push	 eax
  008d3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008d8	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv362[ebp], 0
$LN149@draw_aircr:
  008e2	6a 12		 push	 18			; 00000012H
  008e4	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  008ea	51		 push	 ecx
  008eb	69 95 a0 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv354[ebp], 180
  008f5	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv362[ebp]
  008fb	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00902	ff d1		 call	 ecx
  00904	89 85 08 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN4@draw_aircr:

; 4925 : 
; 4926 : 		while (threat)

  0090a	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00911	0f 84 c3 02 00
	00		 je	 $LN5@draw_aircr

; 4927 : 		{
; 4928 : 			if (!get_local_entity_int_value (threat, INT_TYPE_GROUND_RADAR_CLUTTER))

  00917	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0091e	74 10		 je	 SHORT $LN150@draw_aircr
  00920	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00926	8b 08		 mov	 ecx, DWORD PTR [eax]
  00928	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv374[ebp], ecx
  0092e	eb 20		 jmp	 SHORT $LN151@draw_aircr
$LN150@draw_aircr:
  00930	68 40 13 00 00	 push	 4928			; 00001340H
  00935	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0093a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00940	52		 push	 edx
  00941	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00946	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv374[ebp], 0
$LN151@draw_aircr:
  00950	b8 01 00 00 00	 mov	 eax, 1
  00955	85 c0		 test	 eax, eax
  00957	74 0c		 je	 SHORT $LN152@draw_aircr
  00959	c7 85 9c fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv381[ebp], 66 ; 00000042H
  00963	eb 20		 jmp	 SHORT $LN153@draw_aircr
$LN152@draw_aircr:
  00965	68 40 13 00 00	 push	 4928			; 00001340H
  0096a	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0096f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00975	51		 push	 ecx
  00976	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0097b	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv381[ebp], 0
$LN153@draw_aircr:
  00985	6a 42		 push	 66			; 00000042H
  00987	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  0098d	52		 push	 edx
  0098e	69 85 a0 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv374[ebp], 1116
  00998	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv381[ebp]
  0099e	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  009a5	ff d2		 call	 edx
  009a7	85 c0		 test	 eax, eax
  009a9	0f 85 82 01 00
	00		 jne	 $LN21@draw_aircr

; 4929 : 			{
; 4930 : 				if (source_side != get_local_entity_int_value (threat, INT_TYPE_SIDE))

  009af	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  009b6	74 10		 je	 SHORT $LN154@draw_aircr
  009b8	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  009be	8b 08		 mov	 ecx, DWORD PTR [eax]
  009c0	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv393[ebp], ecx
  009c6	eb 20		 jmp	 SHORT $LN155@draw_aircr
$LN154@draw_aircr:
  009c8	68 42 13 00 00	 push	 4930			; 00001342H
  009cd	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  009d2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  009d8	52		 push	 edx
  009d9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009de	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv393[ebp], 0
$LN155@draw_aircr:
  009e8	b8 01 00 00 00	 mov	 eax, 1
  009ed	85 c0		 test	 eax, eax
  009ef	74 0c		 je	 SHORT $LN156@draw_aircr
  009f1	c7 85 9c fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv400[ebp], 187 ; 000000bbH
  009fb	eb 20		 jmp	 SHORT $LN157@draw_aircr
$LN156@draw_aircr:
  009fd	68 42 13 00 00	 push	 4930			; 00001342H
  00a02	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a07	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00a0d	51		 push	 ecx
  00a0e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a13	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv400[ebp], 0
$LN157@draw_aircr:
  00a1d	68 bb 00 00 00	 push	 187			; 000000bbH
  00a22	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00a28	52		 push	 edx
  00a29	69 85 a0 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv393[ebp], 1116
  00a33	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv400[ebp]
  00a39	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00a40	ff d2		 call	 edx
  00a42	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  00a48	0f 84 e3 00 00
	00		 je	 $LN21@draw_aircr

; 4931 : 				{
; 4932 : 					threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  00a4e	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00a55	74 10		 je	 SHORT $LN158@draw_aircr
  00a57	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00a5d	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a5f	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv413[ebp], ecx
  00a65	eb 24		 jmp	 SHORT $LN159@draw_aircr
$LN158@draw_aircr:
  00a67	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00a6d	83 c2 79	 add	 edx, 121		; 00000079H
  00a70	52		 push	 edx
  00a71	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a76	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00a7b	50		 push	 eax
  00a7c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a81	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv413[ebp], 0
$LN159@draw_aircr:
  00a8b	b9 01 00 00 00	 mov	 ecx, 1
  00a90	85 c9		 test	 ecx, ecx
  00a92	74 0c		 je	 SHORT $LN160@draw_aircr
  00a94	c7 85 9c fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv421[ebp], 233 ; 000000e9H
  00a9e	eb 24		 jmp	 SHORT $LN161@draw_aircr
$LN160@draw_aircr:
  00aa0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00aa6	83 c2 79	 add	 edx, 121		; 00000079H
  00aa9	52		 push	 edx
  00aaa	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00aaf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00ab4	50		 push	 eax
  00ab5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00aba	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv421[ebp], 0
$LN161@draw_aircr:
  00ac4	68 e9 00 00 00	 push	 233			; 000000e9H
  00ac9	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00acf	51		 push	 ecx
  00ad0	69 95 a0 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv413[ebp], 1116
  00ada	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv421[ebp]
  00ae0	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00ae7	ff d1		 call	 ecx
  00ae9	89 85 fc fe ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 4933 : 
; 4934 : 					if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA) || (threat_type == THREAT_TYPE_AIRBORNE_RADAR))

  00aef	83 bd fc fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  00af6	74 12		 je	 SHORT $LN22@draw_aircr
  00af8	83 bd fc fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$7[ebp], 6
  00aff	74 09		 je	 SHORT $LN22@draw_aircr
  00b01	83 bd fc fe ff
	ff 04		 cmp	 DWORD PTR _threat_type$7[ebp], 4
  00b08	75 27		 jne	 SHORT $LN21@draw_aircr
$LN22@draw_aircr:

; 4935 : 					{
; 4936 : 						draw_radar_target_symbol (threat, source_position, scale, FALSE, FALSE, TRUE);

  00b0a	6a 01		 push	 1
  00b0c	6a 00		 push	 0
  00b0e	6a 00		 push	 0
  00b10	51		 push	 ecx
  00b11	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00b19	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b1e	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00b24	50		 push	 eax
  00b25	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00b2b	51		 push	 ecx
  00b2c	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z ; draw_radar_target_symbol
$LN21@draw_aircr:

; 4937 : 					}
; 4938 : 				}
; 4939 : 			}
; 4940 : 
; 4941 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_GUNSHIP_TARGET);

  00b31	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00b38	74 10		 je	 SHORT $LN162@draw_aircr
  00b3a	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00b40	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b42	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv442[ebp], ecx
  00b48	eb 27		 jmp	 SHORT $LN163@draw_aircr
$LN162@draw_aircr:
  00b4a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00b50	81 c2 82 00 00
	00		 add	 edx, 130		; 00000082H
  00b56	52		 push	 edx
  00b57	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b5c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00b61	50		 push	 eax
  00b62	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b67	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv442[ebp], 0
$LN163@draw_aircr:
  00b71	b9 01 00 00 00	 mov	 ecx, 1
  00b76	85 c9		 test	 ecx, ecx
  00b78	74 0c		 je	 SHORT $LN164@draw_aircr
  00b7a	c7 85 9c fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv450[ebp], 18 ; 00000012H
  00b84	eb 27		 jmp	 SHORT $LN165@draw_aircr
$LN164@draw_aircr:
  00b86	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00b8c	81 c2 82 00 00
	00		 add	 edx, 130		; 00000082H
  00b92	52		 push	 edx
  00b93	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b98	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00b9d	50		 push	 eax
  00b9e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ba3	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv450[ebp], 0
$LN165@draw_aircr:
  00bad	6a 12		 push	 18			; 00000012H
  00baf	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00bb5	51		 push	 ecx
  00bb6	69 95 a0 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv442[ebp], 180
  00bc0	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv450[ebp]
  00bc6	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00bcd	ff d1		 call	 ecx
  00bcf	89 85 08 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 4942 : 		}

  00bd5	e9 30 fd ff ff	 jmp	 $LN4@draw_aircr
$LN5@draw_aircr:

; 4943 : 
; 4944 : 		//
; 4945 : 		// draw threat line if gunship is targetted (flash if missile fired)
; 4946 : 		//
; 4947 : 
; 4948 : 		threat = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  00bda	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00be1	74 10		 je	 SHORT $LN166@draw_aircr
  00be3	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00be9	8b 08		 mov	 ecx, DWORD PTR [eax]
  00beb	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv462[ebp], ecx
  00bf1	eb 27		 jmp	 SHORT $LN167@draw_aircr
$LN166@draw_aircr:
  00bf3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00bf9	81 c2 89 00 00
	00		 add	 edx, 137		; 00000089H
  00bff	52		 push	 edx
  00c00	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c05	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00c0a	50		 push	 eax
  00c0b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c10	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv462[ebp], 0
$LN167@draw_aircr:
  00c1a	b9 01 00 00 00	 mov	 ecx, 1
  00c1f	85 c9		 test	 ecx, ecx
  00c21	74 0c		 je	 SHORT $LN168@draw_aircr
  00c23	c7 85 9c fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv470[ebp], 18 ; 00000012H
  00c2d	eb 27		 jmp	 SHORT $LN169@draw_aircr
$LN168@draw_aircr:
  00c2f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00c35	81 c2 89 00 00
	00		 add	 edx, 137		; 00000089H
  00c3b	52		 push	 edx
  00c3c	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c41	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00c46	50		 push	 eax
  00c47	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c4c	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv470[ebp], 0
$LN169@draw_aircr:
  00c56	6a 12		 push	 18			; 00000012H
  00c58	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00c5e	51		 push	 ecx
  00c5f	69 95 a0 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv462[ebp], 180
  00c69	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv470[ebp]
  00c6f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00c76	ff d1		 call	 ecx
  00c78	89 85 08 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN6@draw_aircr:

; 4949 : 
; 4950 : 		while (threat)

  00c7e	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00c85	0f 84 be 07 00
	00		 je	 $LN7@draw_aircr

; 4951 : 		{
; 4952 : 			if (!get_local_entity_int_value (threat, INT_TYPE_GROUND_RADAR_CLUTTER))

  00c8b	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00c92	74 10		 je	 SHORT $LN170@draw_aircr
  00c94	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00c9a	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c9c	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv482[ebp], ecx
  00ca2	eb 20		 jmp	 SHORT $LN171@draw_aircr
$LN170@draw_aircr:
  00ca4	68 58 13 00 00	 push	 4952			; 00001358H
  00ca9	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00cae	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00cb4	52		 push	 edx
  00cb5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00cba	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv482[ebp], 0
$LN171@draw_aircr:
  00cc4	b8 01 00 00 00	 mov	 eax, 1
  00cc9	85 c0		 test	 eax, eax
  00ccb	74 0c		 je	 SHORT $LN172@draw_aircr
  00ccd	c7 85 9c fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv489[ebp], 66 ; 00000042H
  00cd7	eb 20		 jmp	 SHORT $LN173@draw_aircr
$LN172@draw_aircr:
  00cd9	68 58 13 00 00	 push	 4952			; 00001358H
  00cde	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ce3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00ce9	51		 push	 ecx
  00cea	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00cef	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv489[ebp], 0
$LN173@draw_aircr:
  00cf9	6a 42		 push	 66			; 00000042H
  00cfb	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00d01	52		 push	 edx
  00d02	69 85 a0 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv482[ebp], 1116
  00d0c	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv489[ebp]
  00d12	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00d19	ff d2		 call	 edx
  00d1b	85 c0		 test	 eax, eax
  00d1d	0f 85 7d 06 00
	00		 jne	 $LN31@draw_aircr

; 4953 : 			{
; 4954 : 				if (source_side != get_local_entity_int_value (threat, INT_TYPE_SIDE))

  00d23	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00d2a	74 10		 je	 SHORT $LN174@draw_aircr
  00d2c	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00d32	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d34	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv501[ebp], ecx
  00d3a	eb 20		 jmp	 SHORT $LN175@draw_aircr
$LN174@draw_aircr:
  00d3c	68 5a 13 00 00	 push	 4954			; 0000135aH
  00d41	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d46	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00d4c	52		 push	 edx
  00d4d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d52	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv501[ebp], 0
$LN175@draw_aircr:
  00d5c	b8 01 00 00 00	 mov	 eax, 1
  00d61	85 c0		 test	 eax, eax
  00d63	74 0c		 je	 SHORT $LN176@draw_aircr
  00d65	c7 85 9c fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv508[ebp], 187 ; 000000bbH
  00d6f	eb 20		 jmp	 SHORT $LN177@draw_aircr
$LN176@draw_aircr:
  00d71	68 5a 13 00 00	 push	 4954			; 0000135aH
  00d76	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d7b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00d81	51		 push	 ecx
  00d82	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d87	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv508[ebp], 0
$LN177@draw_aircr:
  00d91	68 bb 00 00 00	 push	 187			; 000000bbH
  00d96	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00d9c	52		 push	 edx
  00d9d	69 85 a0 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv501[ebp], 1116
  00da7	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv508[ebp]
  00dad	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00db4	ff d2		 call	 edx
  00db6	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  00dbc	0f 84 de 05 00
	00		 je	 $LN31@draw_aircr

; 4955 : 				{
; 4956 : 					if (get_local_entity_int_value (threat, INT_TYPE_RADAR_ON))

  00dc2	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00dc9	74 10		 je	 SHORT $LN178@draw_aircr
  00dcb	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00dd1	8b 08		 mov	 ecx, DWORD PTR [eax]
  00dd3	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv520[ebp], ecx
  00dd9	eb 20		 jmp	 SHORT $LN179@draw_aircr
$LN178@draw_aircr:
  00ddb	68 5c 13 00 00	 push	 4956			; 0000135cH
  00de0	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00de5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00deb	52		 push	 edx
  00dec	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00df1	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv520[ebp], 0
$LN179@draw_aircr:
  00dfb	b8 01 00 00 00	 mov	 eax, 1
  00e00	85 c0		 test	 eax, eax
  00e02	74 0c		 je	 SHORT $LN180@draw_aircr
  00e04	c7 85 9c fe ff
	ff a9 00 00 00	 mov	 DWORD PTR tv527[ebp], 169 ; 000000a9H
  00e0e	eb 20		 jmp	 SHORT $LN181@draw_aircr
$LN180@draw_aircr:
  00e10	68 5c 13 00 00	 push	 4956			; 0000135cH
  00e15	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e1a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00e20	51		 push	 ecx
  00e21	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e26	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv527[ebp], 0
$LN181@draw_aircr:
  00e30	68 a9 00 00 00	 push	 169			; 000000a9H
  00e35	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00e3b	52		 push	 edx
  00e3c	69 85 a0 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv520[ebp], 1116
  00e46	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv527[ebp]
  00e4c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00e53	ff d2		 call	 edx
  00e55	85 c0		 test	 eax, eax
  00e57	0f 84 43 05 00
	00		 je	 $LN31@draw_aircr

; 4957 : 					{
; 4958 : 						threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  00e5d	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00e64	74 10		 je	 SHORT $LN182@draw_aircr
  00e66	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00e6c	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e6e	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv540[ebp], ecx
  00e74	eb 27		 jmp	 SHORT $LN183@draw_aircr
$LN182@draw_aircr:
  00e76	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00e7c	81 c2 93 00 00
	00		 add	 edx, 147		; 00000093H
  00e82	52		 push	 edx
  00e83	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e88	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00e8d	50		 push	 eax
  00e8e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e93	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv540[ebp], 0
$LN183@draw_aircr:
  00e9d	b9 01 00 00 00	 mov	 ecx, 1
  00ea2	85 c9		 test	 ecx, ecx
  00ea4	74 0c		 je	 SHORT $LN184@draw_aircr
  00ea6	c7 85 9c fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv548[ebp], 233 ; 000000e9H
  00eb0	eb 27		 jmp	 SHORT $LN185@draw_aircr
$LN184@draw_aircr:
  00eb2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00eb8	81 c2 93 00 00
	00		 add	 edx, 147		; 00000093H
  00ebe	52		 push	 edx
  00ebf	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ec4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00ec9	50		 push	 eax
  00eca	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ecf	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv548[ebp], 0
$LN185@draw_aircr:
  00ed9	68 e9 00 00 00	 push	 233			; 000000e9H
  00ede	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00ee4	51		 push	 ecx
  00ee5	69 95 a0 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv540[ebp], 1116
  00eef	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv548[ebp]
  00ef5	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00efc	ff d1		 call	 ecx
  00efe	89 85 fc fe ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 4959 : 
; 4960 : 						if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA) || (threat_type == THREAT_TYPE_AIRBORNE_RADAR))

  00f04	83 bd fc fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  00f0b	74 16		 je	 SHORT $LN27@draw_aircr
  00f0d	83 bd fc fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$7[ebp], 6
  00f14	74 0d		 je	 SHORT $LN27@draw_aircr
  00f16	83 bd fc fe ff
	ff 04		 cmp	 DWORD PTR _threat_type$7[ebp], 4
  00f1d	0f 85 7d 04 00
	00		 jne	 $LN31@draw_aircr
$LN27@draw_aircr:

; 4961 : 						{
; 4962 : 							if (get_local_entity_parent (threat, LIST_TYPE_TARGET) == source)

  00f23	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00f2a	74 10		 je	 SHORT $LN186@draw_aircr
  00f2c	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00f32	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f34	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv562[ebp], ecx
  00f3a	eb 20		 jmp	 SHORT $LN187@draw_aircr
$LN186@draw_aircr:
  00f3c	68 62 13 00 00	 push	 4962			; 00001362H
  00f41	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f46	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00f4c	52		 push	 edx
  00f4d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f52	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv562[ebp], 0
$LN187@draw_aircr:
  00f5c	b8 01 00 00 00	 mov	 eax, 1
  00f61	85 c0		 test	 eax, eax
  00f63	74 0c		 je	 SHORT $LN188@draw_aircr
  00f65	c7 85 9c fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv569[ebp], 38 ; 00000026H
  00f6f	eb 20		 jmp	 SHORT $LN189@draw_aircr
$LN188@draw_aircr:
  00f71	68 62 13 00 00	 push	 4962			; 00001362H
  00f76	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f7b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00f81	51		 push	 ecx
  00f82	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f87	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv569[ebp], 0
$LN189@draw_aircr:
  00f91	6a 26		 push	 38			; 00000026H
  00f93	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00f99	52		 push	 edx
  00f9a	69 85 a0 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv562[ebp], 180
  00fa4	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv569[ebp]
  00faa	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  00fb1	ff d2		 call	 edx
  00fb3	3b 85 1c ff ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  00fb9	0f 85 e1 03 00
	00		 jne	 $LN31@draw_aircr

; 4963 : 							{
; 4964 : 								draw_threat_line = TRUE;

  00fbf	c7 85 f8 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _draw_threat_line$6[ebp], 1

; 4965 : 
; 4966 : 								launched_weapon = get_local_entity_first_child (threat, LIST_TYPE_LAUNCHED_WEAPON);

  00fc9	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00fd0	74 10		 je	 SHORT $LN190@draw_aircr
  00fd2	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00fd8	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fda	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv582[ebp], ecx
  00fe0	eb 27		 jmp	 SHORT $LN191@draw_aircr
$LN190@draw_aircr:
  00fe2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00fe8	81 c2 9b 00 00
	00		 add	 edx, 155		; 0000009bH
  00fee	52		 push	 edx
  00fef	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ff4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00ff9	50		 push	 eax
  00ffa	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00fff	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv582[ebp], 0
$LN191@draw_aircr:
  01009	b9 01 00 00 00	 mov	 ecx, 1
  0100e	85 c9		 test	 ecx, ecx
  01010	74 0c		 je	 SHORT $LN192@draw_aircr
  01012	c7 85 9c fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv590[ebp], 24 ; 00000018H
  0101c	eb 27		 jmp	 SHORT $LN193@draw_aircr
$LN192@draw_aircr:
  0101e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  01024	81 c2 9b 00 00
	00		 add	 edx, 155		; 0000009bH
  0102a	52		 push	 edx
  0102b	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01035	50		 push	 eax
  01036	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0103b	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv590[ebp], 0
$LN193@draw_aircr:
  01045	6a 18		 push	 24			; 00000018H
  01047	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  0104d	51		 push	 ecx
  0104e	69 95 a0 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv582[ebp], 180
  01058	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv590[ebp]
  0105e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01065	ff d1		 call	 ecx
  01067	89 85 04 ff ff
	ff		 mov	 DWORD PTR _launched_weapon$9[ebp], eax
$LN8@draw_aircr:

; 4967 : 
; 4968 : 								while (launched_weapon)

  0106d	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  01074	0f 84 ec 01 00
	00		 je	 $LN9@draw_aircr

; 4969 : 								{
; 4970 : 									if (get_local_entity_int_value (launched_weapon, INT_TYPE_WEAPON_GUIDANCE_TYPE) != WEAPON_GUIDANCE_TYPE_NONE)

  0107a	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  01081	74 10		 je	 SHORT $LN194@draw_aircr
  01083	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$9[ebp]
  01089	8b 08		 mov	 ecx, DWORD PTR [eax]
  0108b	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv602[ebp], ecx
  01091	eb 20		 jmp	 SHORT $LN195@draw_aircr
$LN194@draw_aircr:
  01093	68 6a 13 00 00	 push	 4970			; 0000136aH
  01098	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0109d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  010a3	52		 push	 edx
  010a4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  010a9	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv602[ebp], 0
$LN195@draw_aircr:
  010b3	b8 01 00 00 00	 mov	 eax, 1
  010b8	85 c0		 test	 eax, eax
  010ba	74 0c		 je	 SHORT $LN196@draw_aircr
  010bc	c7 85 9c fe ff
	ff 07 01 00 00	 mov	 DWORD PTR tv609[ebp], 263 ; 00000107H
  010c6	eb 20		 jmp	 SHORT $LN197@draw_aircr
$LN196@draw_aircr:
  010c8	68 6a 13 00 00	 push	 4970			; 0000136aH
  010cd	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  010d2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  010d8	51		 push	 ecx
  010d9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  010de	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv609[ebp], 0
$LN197@draw_aircr:
  010e8	68 07 01 00 00	 push	 263			; 00000107H
  010ed	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$9[ebp]
  010f3	52		 push	 edx
  010f4	69 85 a0 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv602[ebp], 1116
  010fe	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv609[ebp]
  01104	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0110b	ff d2		 call	 edx
  0110d	85 c0		 test	 eax, eax
  0110f	0f 84 a8 00 00
	00		 je	 $LN30@draw_aircr

; 4971 : 									{
; 4972 : 										if (get_local_entity_parent (launched_weapon, LIST_TYPE_TARGET) == source)

  01115	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  0111c	74 10		 je	 SHORT $LN198@draw_aircr
  0111e	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$9[ebp]
  01124	8b 08		 mov	 ecx, DWORD PTR [eax]
  01126	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv621[ebp], ecx
  0112c	eb 20		 jmp	 SHORT $LN199@draw_aircr
$LN198@draw_aircr:
  0112e	68 6c 13 00 00	 push	 4972			; 0000136cH
  01133	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01138	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0113e	52		 push	 edx
  0113f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01144	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv621[ebp], 0
$LN199@draw_aircr:
  0114e	b8 01 00 00 00	 mov	 eax, 1
  01153	85 c0		 test	 eax, eax
  01155	74 0c		 je	 SHORT $LN200@draw_aircr
  01157	c7 85 9c fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv628[ebp], 38 ; 00000026H
  01161	eb 20		 jmp	 SHORT $LN201@draw_aircr
$LN200@draw_aircr:
  01163	68 6c 13 00 00	 push	 4972			; 0000136cH
  01168	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0116d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01173	51		 push	 ecx
  01174	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01179	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv628[ebp], 0
$LN201@draw_aircr:
  01183	6a 26		 push	 38			; 00000026H
  01185	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$9[ebp]
  0118b	52		 push	 edx
  0118c	69 85 a0 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv621[ebp], 180
  01196	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv628[ebp]
  0119c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  011a3	ff d2		 call	 edx
  011a5	3b 85 1c ff ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  011ab	75 10		 jne	 SHORT $LN30@draw_aircr

; 4973 : 										{
; 4974 : 											draw_threat_line = ase_draw_threat_line_status;

  011ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ase_draw_threat_line_status@@3HA
  011b2	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _draw_threat_line$6[ebp], eax

; 4975 : 
; 4976 : 											break;

  011b8	e9 a9 00 00 00	 jmp	 $LN9@draw_aircr
$LN30@draw_aircr:

; 4977 : 										}
; 4978 : 									}
; 4979 : 
; 4980 : 									launched_weapon = get_local_entity_child_succ (launched_weapon, LIST_TYPE_LAUNCHED_WEAPON);

  011bd	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  011c4	74 10		 je	 SHORT $LN202@draw_aircr
  011c6	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$9[ebp]
  011cc	8b 08		 mov	 ecx, DWORD PTR [eax]
  011ce	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv641[ebp], ecx
  011d4	eb 27		 jmp	 SHORT $LN203@draw_aircr
$LN202@draw_aircr:
  011d6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  011dc	81 c2 a9 00 00
	00		 add	 edx, 169		; 000000a9H
  011e2	52		 push	 edx
  011e3	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  011e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  011ed	50		 push	 eax
  011ee	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  011f3	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv641[ebp], 0
$LN203@draw_aircr:
  011fd	b9 01 00 00 00	 mov	 ecx, 1
  01202	85 c9		 test	 ecx, ecx
  01204	74 0c		 je	 SHORT $LN204@draw_aircr
  01206	c7 85 9c fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv649[ebp], 24 ; 00000018H
  01210	eb 27		 jmp	 SHORT $LN205@draw_aircr
$LN204@draw_aircr:
  01212	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  01218	81 c2 a9 00 00
	00		 add	 edx, 169		; 000000a9H
  0121e	52		 push	 edx
  0121f	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01224	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01229	50		 push	 eax
  0122a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0122f	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv649[ebp], 0
$LN205@draw_aircr:
  01239	6a 18		 push	 24			; 00000018H
  0123b	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _launched_weapon$9[ebp]
  01241	51		 push	 ecx
  01242	69 95 a0 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv641[ebp], 180
  0124c	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv649[ebp]
  01252	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01259	ff d1		 call	 ecx
  0125b	89 85 04 ff ff
	ff		 mov	 DWORD PTR _launched_weapon$9[ebp], eax

; 4981 : 								}

  01261	e9 07 fe ff ff	 jmp	 $LN8@draw_aircr
$LN9@draw_aircr:

; 4982 : 
; 4983 : 								if (draw_threat_line)

  01266	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _draw_threat_line$6[ebp], 0
  0126d	0f 84 2d 01 00
	00		 je	 $LN31@draw_aircr

; 4984 : 								{
; 4985 : 									threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  01273	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0127a	74 10		 je	 SHORT $LN206@draw_aircr
  0127c	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  01282	8b 08		 mov	 ecx, DWORD PTR [eax]
  01284	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv662[ebp], ecx
  0128a	eb 27		 jmp	 SHORT $LN207@draw_aircr
$LN206@draw_aircr:
  0128c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  01292	81 c2 ae 00 00
	00		 add	 edx, 174		; 000000aeH
  01298	52		 push	 edx
  01299	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0129e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  012a3	50		 push	 eax
  012a4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  012a9	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv662[ebp], 0
$LN207@draw_aircr:
  012b3	b9 01 00 00 00	 mov	 ecx, 1
  012b8	85 c9		 test	 ecx, ecx
  012ba	74 0c		 je	 SHORT $LN208@draw_aircr
  012bc	c7 85 9c fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv670[ebp], 8
  012c6	eb 27		 jmp	 SHORT $LN209@draw_aircr
$LN208@draw_aircr:
  012c8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  012ce	81 c2 ae 00 00
	00		 add	 edx, 174		; 000000aeH
  012d4	52		 push	 edx
  012d5	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  012da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  012df	50		 push	 eax
  012e0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  012e5	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv670[ebp], 0
$LN209@draw_aircr:
  012ef	6a 08		 push	 8
  012f1	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  012f7	51		 push	 ecx
  012f8	6b 95 a0 fe ff
	ff 60		 imul	 edx, DWORD PTR tv662[ebp], 96
  012ff	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv670[ebp]
  01305	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0130c	ff d1		 call	 ecx
  0130e	89 85 00 ff ff
	ff		 mov	 DWORD PTR _threat_position$8[ebp], eax

; 4986 : 
; 4987 : 									dx = (threat_position->x - source_position->x) * scale;

  01314	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  0131a	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01320	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01324	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  01328	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01330	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 4988 : 									dy = (threat_position->z - source_position->z) * scale;

  01338	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  0133e	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01344	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01349	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0134e	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01356	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _dy$3[ebp], xmm0

; 4989 : 
; 4990 : 									draw_2d_line (0.0, 0.0, dx, dy, MFD_COLOUR1);

  0135e	b8 04 00 00 00	 mov	 eax, 4
  01363	6b c8 00	 imul	 ecx, eax, 0
  01366	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0136c	52		 push	 edx
  0136d	51		 push	 ecx
  0136e	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  01376	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0137b	51		 push	 ecx
  0137c	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  01384	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01389	51		 push	 ecx
  0138a	0f 57 c0	 xorps	 xmm0, xmm0
  0138d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01392	51		 push	 ecx
  01393	0f 57 c0	 xorps	 xmm0, xmm0
  01396	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0139b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN31@draw_aircr:

; 4991 : 								}
; 4992 : 							}
; 4993 : 						}
; 4994 : 					}
; 4995 : 				}
; 4996 : 			}
; 4997 : 
; 4998 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_GUNSHIP_TARGET);

  013a0	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  013a7	74 10		 je	 SHORT $LN210@draw_aircr
  013a9	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  013af	8b 08		 mov	 ecx, DWORD PTR [eax]
  013b1	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv697[ebp], ecx
  013b7	eb 27		 jmp	 SHORT $LN211@draw_aircr
$LN210@draw_aircr:
  013b9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  013bf	81 c2 bb 00 00
	00		 add	 edx, 187		; 000000bbH
  013c5	52		 push	 edx
  013c6	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  013cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  013d0	50		 push	 eax
  013d1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  013d6	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv697[ebp], 0
$LN211@draw_aircr:
  013e0	b9 01 00 00 00	 mov	 ecx, 1
  013e5	85 c9		 test	 ecx, ecx
  013e7	74 0c		 je	 SHORT $LN212@draw_aircr
  013e9	c7 85 9c fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv705[ebp], 18 ; 00000012H
  013f3	eb 27		 jmp	 SHORT $LN213@draw_aircr
$LN212@draw_aircr:
  013f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  013fb	81 c2 bb 00 00
	00		 add	 edx, 187		; 000000bbH
  01401	52		 push	 edx
  01402	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01407	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0140c	50		 push	 eax
  0140d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01412	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv705[ebp], 0
$LN213@draw_aircr:
  0141c	6a 12		 push	 18			; 00000012H
  0141e	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  01424	51		 push	 ecx
  01425	69 95 a0 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv697[ebp], 180
  0142f	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv705[ebp]
  01435	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0143c	ff d1		 call	 ecx
  0143e	89 85 08 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 4999 : 		}

  01444	e9 35 f8 ff ff	 jmp	 $LN6@draw_aircr
$LN7@draw_aircr:

; 5000 : 
; 5001 : 		//
; 5002 : 		// draw incoming missiles
; 5003 : 		//
; 5004 : 
; 5005 : 		threat = get_local_entity_first_child (source, LIST_TYPE_TARGET);

  01449	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01450	74 10		 je	 SHORT $LN214@draw_aircr
  01452	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01458	8b 08		 mov	 ecx, DWORD PTR [eax]
  0145a	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv717[ebp], ecx
  01460	eb 27		 jmp	 SHORT $LN215@draw_aircr
$LN214@draw_aircr:
  01462	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  01468	81 c2 c2 00 00
	00		 add	 edx, 194		; 000000c2H
  0146e	52		 push	 edx
  0146f	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01474	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01479	50		 push	 eax
  0147a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0147f	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv717[ebp], 0
$LN215@draw_aircr:
  01489	b9 01 00 00 00	 mov	 ecx, 1
  0148e	85 c9		 test	 ecx, ecx
  01490	74 0c		 je	 SHORT $LN216@draw_aircr
  01492	c7 85 9c fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv725[ebp], 38 ; 00000026H
  0149c	eb 27		 jmp	 SHORT $LN217@draw_aircr
$LN216@draw_aircr:
  0149e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  014a4	81 c2 c2 00 00
	00		 add	 edx, 194		; 000000c2H
  014aa	52		 push	 edx
  014ab	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  014b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  014b5	50		 push	 eax
  014b6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  014bb	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv725[ebp], 0
$LN217@draw_aircr:
  014c5	6a 26		 push	 38			; 00000026H
  014c7	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  014cd	51		 push	 ecx
  014ce	69 95 a0 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv717[ebp], 180
  014d8	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv725[ebp]
  014de	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  014e5	ff d1		 call	 ecx
  014e7	89 85 08 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN10@draw_aircr:

; 5006 : 
; 5007 : 		while (threat)

  014ed	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  014f4	0f 84 a7 03 00
	00		 je	 $LN11@draw_aircr

; 5008 : 		{
; 5009 : 			threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  014fa	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  01501	74 10		 je	 SHORT $LN218@draw_aircr
  01503	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  01509	8b 08		 mov	 ecx, DWORD PTR [eax]
  0150b	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv738[ebp], ecx
  01511	eb 27		 jmp	 SHORT $LN219@draw_aircr
$LN218@draw_aircr:
  01513	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  01519	81 c2 c6 00 00
	00		 add	 edx, 198		; 000000c6H
  0151f	52		 push	 edx
  01520	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01525	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0152a	50		 push	 eax
  0152b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01530	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv738[ebp], 0
$LN219@draw_aircr:
  0153a	b9 01 00 00 00	 mov	 ecx, 1
  0153f	85 c9		 test	 ecx, ecx
  01541	74 0c		 je	 SHORT $LN220@draw_aircr
  01543	c7 85 9c fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv746[ebp], 233 ; 000000e9H
  0154d	eb 27		 jmp	 SHORT $LN221@draw_aircr
$LN220@draw_aircr:
  0154f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  01555	81 c2 c6 00 00
	00		 add	 edx, 198		; 000000c6H
  0155b	52		 push	 edx
  0155c	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01561	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01566	50		 push	 eax
  01567	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0156c	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv746[ebp], 0
$LN221@draw_aircr:
  01576	68 e9 00 00 00	 push	 233			; 000000e9H
  0157b	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  01581	51		 push	 ecx
  01582	69 95 a0 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv738[ebp], 1116
  0158c	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv746[ebp]
  01592	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  01599	ff d1		 call	 ecx
  0159b	89 85 fc fe ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 5010 : 
; 5011 : 			if ((threat_type == THREAT_TYPE_RF_MISSILE) || (threat_type == THREAT_TYPE_IR_MISSILE) || (threat_type == THREAT_TYPE_LASER_MISSILE))

  015a1	83 bd fc fe ff
	ff 01		 cmp	 DWORD PTR _threat_type$7[ebp], 1
  015a8	74 16		 je	 SHORT $LN33@draw_aircr
  015aa	83 bd fc fe ff
	ff 02		 cmp	 DWORD PTR _threat_type$7[ebp], 2
  015b1	74 0d		 je	 SHORT $LN33@draw_aircr
  015b3	83 bd fc fe ff
	ff 03		 cmp	 DWORD PTR _threat_type$7[ebp], 3
  015ba	0f 85 38 02 00
	00		 jne	 $LN39@draw_aircr
$LN33@draw_aircr:

; 5012 : 			{
; 5013 : 				threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  015c0	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  015c7	74 10		 je	 SHORT $LN222@draw_aircr
  015c9	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  015cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  015d1	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv761[ebp], ecx
  015d7	eb 27		 jmp	 SHORT $LN223@draw_aircr
$LN222@draw_aircr:
  015d9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  015df	81 c2 ca 00 00
	00		 add	 edx, 202		; 000000caH
  015e5	52		 push	 edx
  015e6	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  015eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  015f0	50		 push	 eax
  015f1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  015f6	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv761[ebp], 0
$LN223@draw_aircr:
  01600	b9 01 00 00 00	 mov	 ecx, 1
  01605	85 c9		 test	 ecx, ecx
  01607	74 0c		 je	 SHORT $LN224@draw_aircr
  01609	c7 85 9c fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv769[ebp], 8
  01613	eb 27		 jmp	 SHORT $LN225@draw_aircr
$LN224@draw_aircr:
  01615	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  0161b	81 c2 ca 00 00
	00		 add	 edx, 202		; 000000caH
  01621	52		 push	 edx
  01622	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01627	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0162c	50		 push	 eax
  0162d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01632	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv769[ebp], 0
$LN225@draw_aircr:
  0163c	6a 08		 push	 8
  0163e	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  01644	51		 push	 ecx
  01645	6b 95 a0 fe ff
	ff 60		 imul	 edx, DWORD PTR tv761[ebp], 96
  0164c	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv769[ebp]
  01652	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  01659	ff d1		 call	 ecx
  0165b	89 85 00 ff ff
	ff		 mov	 DWORD PTR _threat_position$8[ebp], eax

; 5014 : 
; 5015 : 				dx = (threat_position->x - source_position->x) * scale;

  01661	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  01667	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  0166d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01671	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  01675	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0167d	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 5016 : 				dy = (threat_position->z - source_position->z) * scale;

  01685	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  0168b	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01691	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01696	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0169b	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  016a3	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _dy$3[ebp], xmm0

; 5017 : 
; 5018 : 				if (threat_type == THREAT_TYPE_RF_MISSILE)

  016ab	83 bd fc fe ff
	ff 01		 cmp	 DWORD PTR _threat_type$7[ebp], 1
  016b2	75 2a		 jne	 SHORT $LN34@draw_aircr

; 5019 : 				{
; 5020 : 					fg_colour = MFD_COLOUR_YELLOW;

  016b4	b8 04 00 00 00	 mov	 eax, 4
  016b9	6b c8 0d	 imul	 ecx, eax, 13
  016bc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  016c2	89 95 10 ff ff
	ff		 mov	 DWORD PTR _fg_colour$[ebp], edx

; 5021 : 					bg_colour = MFD_COLOUR_DARK_YELLOW;	

  016c8	b8 04 00 00 00	 mov	 eax, 4
  016cd	6b c8 0e	 imul	 ecx, eax, 14
  016d0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  016d6	89 95 0c ff ff
	ff		 mov	 DWORD PTR _bg_colour$[ebp], edx
  016dc	eb 5b		 jmp	 SHORT $LN37@draw_aircr
$LN34@draw_aircr:

; 5022 : 				}
; 5023 : 				else if (threat_type == THREAT_TYPE_IR_MISSILE)

  016de	83 bd fc fe ff
	ff 02		 cmp	 DWORD PTR _threat_type$7[ebp], 2
  016e5	75 2a		 jne	 SHORT $LN36@draw_aircr

; 5024 : 				{
; 5025 : 					fg_colour = MFD_COLOUR_RED;

  016e7	b8 04 00 00 00	 mov	 eax, 4
  016ec	6b c8 0f	 imul	 ecx, eax, 15
  016ef	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  016f5	89 95 10 ff ff
	ff		 mov	 DWORD PTR _fg_colour$[ebp], edx

; 5026 : 					bg_colour = MFD_COLOUR_DARK_RED;

  016fb	b8 04 00 00 00	 mov	 eax, 4
  01700	6b c8 12	 imul	 ecx, eax, 18
  01703	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01709	89 95 0c ff ff
	ff		 mov	 DWORD PTR _bg_colour$[ebp], edx

; 5027 : 				}
; 5028 : 				else

  0170f	eb 28		 jmp	 SHORT $LN37@draw_aircr
$LN36@draw_aircr:

; 5029 : 				{
; 5030 : 					fg_colour = MFD_COLOUR_BLUE;

  01711	b8 04 00 00 00	 mov	 eax, 4
  01716	6b c8 0c	 imul	 ecx, eax, 12
  01719	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0171f	89 95 10 ff ff
	ff		 mov	 DWORD PTR _fg_colour$[ebp], edx

; 5031 : 					bg_colour = MFD_COLOUR_DARK_BLUE;

  01725	b8 04 00 00 00	 mov	 eax, 4
  0172a	6b c8 11	 imul	 ecx, eax, 17
  0172d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01733	89 95 0c ff ff
	ff		 mov	 DWORD PTR _bg_colour$[ebp], edx
$LN37@draw_aircr:

; 5032 : 				}
; 5033 : 				
; 5034 : 				if (draw_large_mfd)

  01739	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01740	74 5c		 je	 SHORT $LN38@draw_aircr

; 5035 : 				{
; 5036 : 					draw_2d_mono_sprite (large_ase_missile_mask, dx, dy, bg_colour);

  01742	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _bg_colour$[ebp]
  01748	50		 push	 eax
  01749	51		 push	 ecx
  0174a	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  01752	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01757	51		 push	 ecx
  01758	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  01760	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01765	68 00 00 00 00	 push	 OFFSET ?large_ase_missile_mask@@3PADA
  0176a	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 5037 : 
; 5038 : 					draw_2d_mono_sprite (large_ase_missile, dx, dy, fg_colour);

  0176f	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _fg_colour$[ebp]
  01775	50		 push	 eax
  01776	51		 push	 ecx
  01777	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  0177f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01784	51		 push	 ecx
  01785	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  0178d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01792	68 00 00 00 00	 push	 OFFSET ?large_ase_missile@@3PADA
  01797	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 5039 : 				}
; 5040 : 				else

  0179c	eb 5a		 jmp	 SHORT $LN39@draw_aircr
$LN38@draw_aircr:

; 5041 : 				{
; 5042 : 					draw_2d_mono_sprite (small_ase_missile_mask, dx, dy, bg_colour);

  0179e	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _bg_colour$[ebp]
  017a4	50		 push	 eax
  017a5	51		 push	 ecx
  017a6	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  017ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017b3	51		 push	 ecx
  017b4	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  017bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017c1	68 00 00 00 00	 push	 OFFSET ?small_ase_missile_mask@@3PADA
  017c6	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 5043 : 
; 5044 : 					draw_2d_mono_sprite (small_ase_missile, dx, dy, fg_colour);

  017cb	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _fg_colour$[ebp]
  017d1	50		 push	 eax
  017d2	51		 push	 ecx
  017d3	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  017db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017e0	51		 push	 ecx
  017e1	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  017e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017ee	68 00 00 00 00	 push	 OFFSET ?small_ase_missile@@3PADA
  017f3	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN39@draw_aircr:

; 5045 : 				}
; 5046 : 			}
; 5047 : 
; 5048 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_TARGET);

  017f8	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  017ff	74 10		 je	 SHORT $LN226@draw_aircr
  01801	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  01807	8b 08		 mov	 ecx, DWORD PTR [eax]
  01809	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv826[ebp], ecx
  0180f	eb 27		 jmp	 SHORT $LN227@draw_aircr
$LN226@draw_aircr:
  01811	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  01817	81 c2 ed 00 00
	00		 add	 edx, 237		; 000000edH
  0181d	52		 push	 edx
  0181e	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01823	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01828	50		 push	 eax
  01829	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0182e	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv826[ebp], 0
$LN227@draw_aircr:
  01838	b9 01 00 00 00	 mov	 ecx, 1
  0183d	85 c9		 test	 ecx, ecx
  0183f	74 0c		 je	 SHORT $LN228@draw_aircr
  01841	c7 85 9c fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv834[ebp], 38 ; 00000026H
  0184b	eb 27		 jmp	 SHORT $LN229@draw_aircr
$LN228@draw_aircr:
  0184d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  01853	81 c2 ed 00 00
	00		 add	 edx, 237		; 000000edH
  01859	52		 push	 edx
  0185a	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0185f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01864	50		 push	 eax
  01865	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0186a	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv834[ebp], 0
$LN229@draw_aircr:
  01874	6a 26		 push	 38			; 00000026H
  01876	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  0187c	51		 push	 ecx
  0187d	69 95 a0 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv826[ebp], 180
  01887	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv834[ebp]
  0188d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01894	ff d1		 call	 ecx
  01896	89 85 08 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 5049 : 		}

  0189c	e9 4c fc ff ff	 jmp	 $LN10@draw_aircr
$LN11@draw_aircr:

; 5050 : 
; 5051 : 		set_2d_window_rotation (mfd_env, 0.0);

  018a1	51		 push	 ecx
  018a2	0f 57 c0	 xorps	 xmm0, xmm0
  018a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  018af	50		 push	 eax
  018b0	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 5052 : 	}
; 5053 : 
; 5054 : 	////////////////////////////////////////
; 5055 : 	//
; 5056 : 	// aircraft datum symbol
; 5057 : 	//
; 5058 : 	////////////////////////////////////////
; 5059 : 
; 5060 : 	if (draw_large_mfd)

  018b5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  018bc	74 58		 je	 SHORT $LN40@draw_aircr

; 5061 : 	{
; 5062 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum_mask, 0.0, 0.0, MFD_COLOUR6);

  018be	b8 04 00 00 00	 mov	 eax, 4
  018c3	6b c8 05	 imul	 ecx, eax, 5
  018c6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  018cc	52		 push	 edx
  018cd	51		 push	 ecx
  018ce	0f 57 c0	 xorps	 xmm0, xmm0
  018d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018d6	51		 push	 ecx
  018d7	0f 57 c0	 xorps	 xmm0, xmm0
  018da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018df	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum_mask@@3PADA
  018e4	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 5063 : 
; 5064 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum, 0.0, 0.0, MFD_COLOUR1);

  018e9	b8 04 00 00 00	 mov	 eax, 4
  018ee	6b c8 00	 imul	 ecx, eax, 0
  018f1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  018f7	52		 push	 edx
  018f8	51		 push	 ecx
  018f9	0f 57 c0	 xorps	 xmm0, xmm0
  018fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01901	51		 push	 ecx
  01902	0f 57 c0	 xorps	 xmm0, xmm0
  01905	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0190a	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum@@3PADA
  0190f	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 5065 : 	}
; 5066 : 	else

  01914	eb 56		 jmp	 SHORT $LN41@draw_aircr
$LN40@draw_aircr:

; 5067 : 	{
; 5068 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum_mask, 0.0, 0.0, MFD_COLOUR6);

  01916	b8 04 00 00 00	 mov	 eax, 4
  0191b	6b c8 05	 imul	 ecx, eax, 5
  0191e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01924	52		 push	 edx
  01925	51		 push	 ecx
  01926	0f 57 c0	 xorps	 xmm0, xmm0
  01929	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0192e	51		 push	 ecx
  0192f	0f 57 c0	 xorps	 xmm0, xmm0
  01932	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01937	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum_mask@@3PADA
  0193c	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 5069 : 
; 5070 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum, 0.0, 0.0, MFD_COLOUR1);

  01941	b8 04 00 00 00	 mov	 eax, 4
  01946	6b c8 00	 imul	 ecx, eax, 0
  01949	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0194f	52		 push	 edx
  01950	51		 push	 ecx
  01951	0f 57 c0	 xorps	 xmm0, xmm0
  01954	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01959	51		 push	 ecx
  0195a	0f 57 c0	 xorps	 xmm0, xmm0
  0195d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01962	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum@@3PADA
  01967	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN41@draw_aircr:

; 5071 : 	}
; 5072 : 
; 5073 : 	set_mono_font_colour (MFD_COLOUR1);

  0196c	b8 04 00 00 00	 mov	 eax, 4
  01971	6b c8 00	 imul	 ecx, eax, 0
  01974	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0197a	52		 push	 edx
  0197b	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5074 : 
; 5075 : 	if (draw_large_mfd)

  01980	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01987	74 09		 je	 SHORT $LN42@draw_aircr

; 5076 : 	{
; 5077 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  01989	6a 05		 push	 5
  0198b	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 5078 : 	}
; 5079 : 	else

  01990	eb 07		 jmp	 SHORT $LN43@draw_aircr
$LN42@draw_aircr:

; 5080 : 	{
; 5081 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  01992	6a 01		 push	 1
  01994	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN43@draw_aircr:

; 5082 : 	}
; 5083 : 
; 5084 : 	////////////////////////////////////////
; 5085 : 	//
; 5086 : 	// text
; 5087 : 	//
; 5088 : 	////////////////////////////////////////
; 5089 : 
; 5090 : 	//
; 5091 : 	// closest incoming missile
; 5092 : 	//
; 5093 : 
; 5094 : 	{
; 5095 : 		entity
; 5096 : 			*closest_missile;
; 5097 : 
; 5098 : 		float
; 5099 : 			time_to_impact;
; 5100 : 
; 5101 : 		if (draw_large_mfd)

  01999	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  019a0	74 12		 je	 SHORT $LN44@draw_aircr

; 5102 : 		{
; 5103 : 			y_adjust = 5.0;

  019a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  019aa	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5104 : 		}
; 5105 : 		else

  019b2	eb 10		 jmp	 SHORT $LN45@draw_aircr
$LN44@draw_aircr:

; 5106 : 		{
; 5107 : 			y_adjust = 2.0;

  019b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  019bc	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN45@draw_aircr:

; 5108 : 		}
; 5109 : 
; 5110 : 		set_mono_font_colour(MFD_COLOUR1);

  019c4	b8 04 00 00 00	 mov	 eax, 4
  019c9	6b c8 00	 imul	 ecx, eax, 0
  019cc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  019d2	52		 push	 edx
  019d3	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5111 : 		set_2d_mono_font_position (-0.8, 1.0);

  019d8	51		 push	 ecx
  019d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  019e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019e6	51		 push	 ecx
  019e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  019ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019f4	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5112 : 
; 5113 : 		set_mono_font_rel_position (1.0, y_adjust);

  019f9	51		 push	 ecx
  019fa	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01a02	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a07	51		 push	 ecx
  01a08	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01a10	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a15	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5114 : 
; 5115 : 		closest_missile = get_closest_missile (source, source_position, THREAT_TYPE_IR_MISSILE, &time_to_impact);

  01a1a	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _time_to_impact$1[ebp]
  01a20	50		 push	 eax
  01a21	6a 02		 push	 2
  01a23	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01a29	51		 push	 ecx
  01a2a	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01a30	52		 push	 edx
  01a31	e8 00 00 00 00	 call	 ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ; get_closest_missile
  01a36	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _closest_missile$2[ebp], eax

; 5116 : 
; 5117 : 		if (closest_missile)

  01a3c	83 bd e8 fe ff
	ff 00		 cmp	 DWORD PTR _closest_missile$2[ebp], 0
  01a43	0f 84 9d 00 00
	00		 je	 $LN46@draw_aircr

; 5118 : 		{
; 5119 : 			sprintf (buffer, "IR MSL:%.1f", time_to_impact);

  01a49	f3 0f 5a 85 e4
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _time_to_impact$1[ebp]
  01a51	83 ec 08	 sub	 esp, 8
  01a54	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01a59	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@
  01a5e	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01a64	50		 push	 eax
  01a65	e8 00 00 00 00	 call	 _sprintf
  01a6a	83 c4 10	 add	 esp, 16			; 00000010H

; 5120 : 
; 5121 : 			print_mono_font_string (buffer);

  01a6d	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01a73	50		 push	 eax
  01a74	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5122 : 
; 5123 : 			if (draw_large_mfd)

  01a79	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01a80	74 12		 je	 SHORT $LN47@draw_aircr

; 5124 : 			{
; 5125 : 				y_adjust = 2.0;

  01a82	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  01a8a	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5126 : 			}
; 5127 : 			else

  01a92	eb 10		 jmp	 SHORT $LN48@draw_aircr
$LN47@draw_aircr:

; 5128 : 			{
; 5129 : 				y_adjust = 2.0;

  01a94	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  01a9c	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN48@draw_aircr:

; 5130 : 			}
; 5131 : 
; 5132 : 			set_2d_mono_font_position (-0.8, 0.9);

  01aa4	51		 push	 ecx
  01aa5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01aad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ab2	51		 push	 ecx
  01ab3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  01abb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ac0	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5133 : 
; 5134 : 			set_mono_font_rel_position (1.0, y_adjust);

  01ac5	51		 push	 ecx
  01ac6	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01ace	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ad3	51		 push	 ecx
  01ad4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01adc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ae1	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN46@draw_aircr:

; 5135 : 		}
; 5136 : 
; 5137 : 		closest_missile = get_closest_missile (source, source_position, THREAT_TYPE_RF_MISSILE, &time_to_impact);

  01ae6	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _time_to_impact$1[ebp]
  01aec	50		 push	 eax
  01aed	6a 01		 push	 1
  01aef	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01af5	51		 push	 ecx
  01af6	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01afc	52		 push	 edx
  01afd	e8 00 00 00 00	 call	 ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ; get_closest_missile
  01b02	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _closest_missile$2[ebp], eax

; 5138 : 
; 5139 : 		if (closest_missile)

  01b08	83 bd e8 fe ff
	ff 00		 cmp	 DWORD PTR _closest_missile$2[ebp], 0
  01b0f	0f 84 9d 00 00
	00		 je	 $LN49@draw_aircr

; 5140 : 		{
; 5141 : 			sprintf (buffer, "RF MSL:%.1f", time_to_impact);

  01b15	f3 0f 5a 85 e4
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _time_to_impact$1[ebp]
  01b1d	83 ec 08	 sub	 esp, 8
  01b20	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01b25	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@
  01b2a	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01b30	50		 push	 eax
  01b31	e8 00 00 00 00	 call	 _sprintf
  01b36	83 c4 10	 add	 esp, 16			; 00000010H

; 5142 : 
; 5143 : 			print_mono_font_string (buffer);

  01b39	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01b3f	50		 push	 eax
  01b40	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5144 : 
; 5145 : 			if (draw_large_mfd)

  01b45	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01b4c	74 12		 je	 SHORT $LN50@draw_aircr

; 5146 : 			{
; 5147 : 				y_adjust = -2.0;

  01b4e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  01b56	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5148 : 			}
; 5149 : 			else

  01b5e	eb 10		 jmp	 SHORT $LN51@draw_aircr
$LN50@draw_aircr:

; 5150 : 			{
; 5151 : 				y_adjust = 3.0;

  01b60	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  01b68	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN51@draw_aircr:

; 5152 : 			}
; 5153 : 
; 5154 : 			set_2d_mono_font_position (-0.8, 0.8);

  01b70	51		 push	 ecx
  01b71	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  01b79	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b7e	51		 push	 ecx
  01b7f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  01b87	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b8c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5155 : 
; 5156 : 			set_mono_font_rel_position (1.0, y_adjust);

  01b91	51		 push	 ecx
  01b92	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01b9a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b9f	51		 push	 ecx
  01ba0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01ba8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bad	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN49@draw_aircr:

; 5157 : 		}
; 5158 : 
; 5159 : 		closest_missile = get_closest_missile (source, source_position, THREAT_TYPE_LASER_MISSILE, &time_to_impact);

  01bb2	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _time_to_impact$1[ebp]
  01bb8	50		 push	 eax
  01bb9	6a 03		 push	 3
  01bbb	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01bc1	51		 push	 ecx
  01bc2	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01bc8	52		 push	 edx
  01bc9	e8 00 00 00 00	 call	 ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ; get_closest_missile
  01bce	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _closest_missile$2[ebp], eax

; 5160 : 
; 5161 : 		if (closest_missile)

  01bd4	83 bd e8 fe ff
	ff 00		 cmp	 DWORD PTR _closest_missile$2[ebp], 0
  01bdb	74 30		 je	 SHORT $LN52@draw_aircr

; 5162 : 		{
; 5163 : 			sprintf (buffer, "LS MSL:%.1f", time_to_impact);

  01bdd	f3 0f 5a 85 e4
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _time_to_impact$1[ebp]
  01be5	83 ec 08	 sub	 esp, 8
  01be8	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01bed	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@
  01bf2	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01bf8	50		 push	 eax
  01bf9	e8 00 00 00 00	 call	 _sprintf
  01bfe	83 c4 10	 add	 esp, 16			; 00000010H

; 5164 : 
; 5165 : 			print_mono_font_string (buffer);

  01c01	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01c07	50		 push	 eax
  01c08	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN52@draw_aircr:

; 5166 : 		}
; 5167 : 	}
; 5168 : 
; 5169 : 	//
; 5170 : 	// ASE range
; 5171 : 	//
; 5172 : 
; 5173 : 	if (tsd_ase_range == TSD_ASE_RANGE_2000)

  01c0d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  01c15	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  01c1c	9f		 lahf
  01c1d	f6 c4 44	 test	 ah, 68			; 00000044H
  01c20	7a 09		 jp	 SHORT $LN53@draw_aircr

; 5174 : 	{
; 5175 : 		s = "2Km";

  01c22	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03CIAFGHAC@2Km@
  01c29	eb 61		 jmp	 SHORT $LN60@draw_aircr
$LN53@draw_aircr:

; 5176 : 	}
; 5177 : 	else if (tsd_ase_range == TSD_ASE_RANGE_5000)

  01c2b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  01c33	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  01c3a	9f		 lahf
  01c3b	f6 c4 44	 test	 ah, 68			; 00000044H
  01c3e	7a 09		 jp	 SHORT $LN55@draw_aircr

; 5178 : 	{
; 5179 : 		s = "5Km";

  01c40	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03LFNCFPLL@5Km@
  01c47	eb 43		 jmp	 SHORT $LN60@draw_aircr
$LN55@draw_aircr:

; 5180 : 	}
; 5181 : 	else if (tsd_ase_range == TSD_ASE_RANGE_10000)

  01c49	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  01c51	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  01c58	9f		 lahf
  01c59	f6 c4 44	 test	 ah, 68			; 00000044H
  01c5c	7a 09		 jp	 SHORT $LN57@draw_aircr

; 5182 : 	{
; 5183 : 		s = "10Km";

  01c5e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04PJCLBGLO@10Km@
  01c65	eb 25		 jmp	 SHORT $LN60@draw_aircr
$LN57@draw_aircr:

; 5184 : 	}
; 5185 : 	else if (tsd_ase_range == TSD_ASE_RANGE_25000)

  01c67	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  01c6f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  01c76	9f		 lahf
  01c77	f6 c4 44	 test	 ah, 68			; 00000044H
  01c7a	7a 09		 jp	 SHORT $LN59@draw_aircr

; 5186 : 	{
; 5187 : 		s = "25Km";

  01c7c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04IJFFJMFM@25Km@

; 5188 : 	}
; 5189 : 	else

  01c83	eb 07		 jmp	 SHORT $LN60@draw_aircr
$LN59@draw_aircr:

; 5190 : 	{
; 5191 : 		s = "XXX";

  01c85	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN60@draw_aircr:

; 5192 : 	}
; 5193 : 
; 5194 : 	width = get_mono_font_string_width (s);

  01c8c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  01c8f	50		 push	 eax
  01c90	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01c95	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 5195 : 
; 5196 : 	if (draw_large_mfd)

  01c9b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01ca2	74 12		 je	 SHORT $LN61@draw_aircr

; 5197 : 	{
; 5198 : 		y_adjust = 5.0;

  01ca4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  01cac	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5199 : 	}
; 5200 : 	else

  01cb4	eb 10		 jmp	 SHORT $LN62@draw_aircr
$LN61@draw_aircr:

; 5201 : 	{
; 5202 : 		y_adjust = 2.0;

  01cb6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  01cbe	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN62@draw_aircr:

; 5203 : 	}
; 5204 : 
; 5205 : 	set_2d_mono_font_position (0.8, 1.0);

  01cc6	51		 push	 ecx
  01cc7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01ccf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cd4	51		 push	 ecx
  01cd5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  01cdd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ce2	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5206 : 
; 5207 : 	set_mono_font_rel_position (-width, y_adjust);

  01ce7	51		 push	 ecx
  01ce8	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01cf0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cf5	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  01cfd	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01d04	51		 push	 ecx
  01d05	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d0a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5208 : 
; 5209 : 	print_mono_font_string (s);

  01d0f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  01d12	50		 push	 eax
  01d13	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5210 : 
; 5211 : 	//
; 5212 : 	// jammers
; 5213 : 	//
; 5214 : 
; 5215 : 	if (draw_large_mfd)

  01d18	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01d1f	0f 84 d2 00 00
	00		 je	 $LN63@draw_aircr

; 5216 : 	{
; 5217 : 		if (default_damage.infra_red_jammer)

  01d25	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  01d2a	c1 e8 08	 shr	 eax, 8
  01d2d	83 e0 01	 and	 eax, 1
  01d30	74 0c		 je	 SHORT $LN65@draw_aircr

; 5218 : 		{
; 5219 : 			s = "IR JAM XXX";

  01d32	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@DADPKEOI@IR?5JAM?5XXX@

; 5220 : 		}
; 5221 : 		else

  01d39	e9 a4 00 00 00	 jmp	 $LN68@draw_aircr
$LN65@draw_aircr:

; 5222 : 		{
; 5223 : 			if (get_local_entity_int_value (source, INT_TYPE_INFRA_RED_JAMMER_ON))

  01d3e	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01d45	74 10		 je	 SHORT $LN230@draw_aircr
  01d47	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01d4d	8b 08		 mov	 ecx, DWORD PTR [eax]
  01d4f	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv978[ebp], ecx
  01d55	eb 20		 jmp	 SHORT $LN231@draw_aircr
$LN230@draw_aircr:
  01d57	68 67 14 00 00	 push	 5223			; 00001467H
  01d5c	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01d61	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01d67	52		 push	 edx
  01d68	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01d6d	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv978[ebp], 0
$LN231@draw_aircr:
  01d77	b8 01 00 00 00	 mov	 eax, 1
  01d7c	85 c0		 test	 eax, eax
  01d7e	74 0c		 je	 SHORT $LN232@draw_aircr
  01d80	c7 85 9c fe ff
	ff 68 00 00 00	 mov	 DWORD PTR tv985[ebp], 104 ; 00000068H
  01d8a	eb 20		 jmp	 SHORT $LN233@draw_aircr
$LN232@draw_aircr:
  01d8c	68 67 14 00 00	 push	 5223			; 00001467H
  01d91	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01d96	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01d9c	51		 push	 ecx
  01d9d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01da2	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv985[ebp], 0
$LN233@draw_aircr:
  01dac	6a 68		 push	 104			; 00000068H
  01dae	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01db4	52		 push	 edx
  01db5	69 85 a0 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv978[ebp], 1116
  01dbf	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv985[ebp]
  01dc5	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01dcc	ff d2		 call	 edx
  01dce	85 c0		 test	 eax, eax
  01dd0	74 09		 je	 SHORT $LN67@draw_aircr

; 5224 : 			{
; 5225 : 				s = "IR JAM ON";

  01dd2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_09OKBKNIAL@IR?5JAM?5ON@

; 5226 : 			}
; 5227 : 			else

  01dd9	eb 07		 jmp	 SHORT $LN68@draw_aircr
$LN67@draw_aircr:

; 5228 : 			{
; 5229 : 				s = "IR JAM OFF";

  01ddb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@
$LN68@draw_aircr:

; 5230 : 			}
; 5231 : 		}
; 5232 : 
; 5233 : 		y_adjust = -25.0;

  01de2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  01dea	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5234 : 	}
; 5235 : 	else

  01df2	e9 cd 00 00 00	 jmp	 $LN64@draw_aircr
$LN63@draw_aircr:

; 5236 : 	{
; 5237 : 		if (default_damage.infra_red_jammer)

  01df7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  01dfc	c1 e8 08	 shr	 eax, 8
  01dff	83 e0 01	 and	 eax, 1
  01e02	74 0c		 je	 SHORT $LN69@draw_aircr

; 5238 : 		{
; 5239 : 			s = "IR XXX";

  01e04	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06CNPDBJMK@IR?5XXX@

; 5240 : 		}
; 5241 : 		else

  01e0b	e9 a4 00 00 00	 jmp	 $LN72@draw_aircr
$LN69@draw_aircr:

; 5242 : 		{
; 5243 : 			if (get_local_entity_int_value (source, INT_TYPE_INFRA_RED_JAMMER_ON))

  01e10	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01e17	74 10		 je	 SHORT $LN234@draw_aircr
  01e19	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01e1f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01e21	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv1000[ebp], ecx
  01e27	eb 20		 jmp	 SHORT $LN235@draw_aircr
$LN234@draw_aircr:
  01e29	68 7b 14 00 00	 push	 5243			; 0000147bH
  01e2e	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01e33	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01e39	52		 push	 edx
  01e3a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01e3f	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1000[ebp], 0
$LN235@draw_aircr:
  01e49	b8 01 00 00 00	 mov	 eax, 1
  01e4e	85 c0		 test	 eax, eax
  01e50	74 0c		 je	 SHORT $LN236@draw_aircr
  01e52	c7 85 9c fe ff
	ff 68 00 00 00	 mov	 DWORD PTR tv1007[ebp], 104 ; 00000068H
  01e5c	eb 20		 jmp	 SHORT $LN237@draw_aircr
$LN236@draw_aircr:
  01e5e	68 7b 14 00 00	 push	 5243			; 0000147bH
  01e63	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01e68	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01e6e	51		 push	 ecx
  01e6f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01e74	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1007[ebp], 0
$LN237@draw_aircr:
  01e7e	6a 68		 push	 104			; 00000068H
  01e80	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01e86	52		 push	 edx
  01e87	69 85 a0 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1000[ebp], 1116
  01e91	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv1007[ebp]
  01e97	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01e9e	ff d2		 call	 edx
  01ea0	85 c0		 test	 eax, eax
  01ea2	74 09		 je	 SHORT $LN71@draw_aircr

; 5244 : 			{
; 5245 : 				s = "IR ON";

  01ea4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_05JBLHJOBL@IR?5ON@

; 5246 : 			}
; 5247 : 			else

  01eab	eb 07		 jmp	 SHORT $LN72@draw_aircr
$LN71@draw_aircr:

; 5248 : 			{
; 5249 : 				s = "IR OFF";

  01ead	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06CCMEMHEJ@IR?5OFF@
$LN72@draw_aircr:

; 5250 : 			}
; 5251 : 		}
; 5252 : 
; 5253 : 		y_adjust = -12.0;

  01eb4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  01ebc	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN64@draw_aircr:

; 5254 : 	}
; 5255 : 
; 5256 : 	set_2d_mono_font_position (-0.8, -1.0);

  01ec4	51		 push	 ecx
  01ec5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01ecd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ed2	51		 push	 ecx
  01ed3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  01edb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ee0	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5257 : 
; 5258 : 	set_mono_font_rel_position (1.0, y_adjust);

  01ee5	51		 push	 ecx
  01ee6	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01eee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ef3	51		 push	 ecx
  01ef4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01efc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f01	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5259 : 
; 5260 : 	print_mono_font_string (s);

  01f06	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  01f09	50		 push	 eax
  01f0a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5261 : 
; 5262 : 	if (draw_large_mfd)

  01f0f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01f16	0f 84 d5 00 00
	00		 je	 $LN73@draw_aircr

; 5263 : 	{
; 5264 : 		if (default_damage.radar_jammer)

  01f1c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  01f21	c1 e8 07	 shr	 eax, 7
  01f24	83 e0 01	 and	 eax, 1
  01f27	74 0c		 je	 SHORT $LN75@draw_aircr

; 5265 : 		{
; 5266 : 			s = "RD JAM XXX";

  01f29	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@

; 5267 : 		}
; 5268 : 		else

  01f30	e9 a7 00 00 00	 jmp	 $LN78@draw_aircr
$LN75@draw_aircr:

; 5269 : 		{
; 5270 : 			if (get_local_entity_int_value (source, INT_TYPE_RADAR_JAMMER_ON))

  01f35	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01f3c	74 10		 je	 SHORT $LN238@draw_aircr
  01f3e	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01f44	8b 08		 mov	 ecx, DWORD PTR [eax]
  01f46	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv1028[ebp], ecx
  01f4c	eb 20		 jmp	 SHORT $LN239@draw_aircr
$LN238@draw_aircr:
  01f4e	68 96 14 00 00	 push	 5270			; 00001496H
  01f53	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01f58	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01f5e	52		 push	 edx
  01f5f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01f64	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1028[ebp], 0
$LN239@draw_aircr:
  01f6e	b8 01 00 00 00	 mov	 eax, 1
  01f73	85 c0		 test	 eax, eax
  01f75	74 0c		 je	 SHORT $LN240@draw_aircr
  01f77	c7 85 9c fe ff
	ff a8 00 00 00	 mov	 DWORD PTR tv1035[ebp], 168 ; 000000a8H
  01f81	eb 20		 jmp	 SHORT $LN241@draw_aircr
$LN240@draw_aircr:
  01f83	68 96 14 00 00	 push	 5270			; 00001496H
  01f88	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01f8d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01f93	51		 push	 ecx
  01f94	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01f99	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1035[ebp], 0
$LN241@draw_aircr:
  01fa3	68 a8 00 00 00	 push	 168			; 000000a8H
  01fa8	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01fae	52		 push	 edx
  01faf	69 85 a0 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1028[ebp], 1116
  01fb9	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv1035[ebp]
  01fbf	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01fc6	ff d2		 call	 edx
  01fc8	85 c0		 test	 eax, eax
  01fca	74 09		 je	 SHORT $LN77@draw_aircr

; 5271 : 			{
; 5272 : 				s = "RD JAM ON";

  01fcc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_09OKIOJJOP@RD?5JAM?5ON@

; 5273 : 			}
; 5274 : 			else

  01fd3	eb 07		 jmp	 SHORT $LN78@draw_aircr
$LN77@draw_aircr:

; 5275 : 			{
; 5276 : 				s = "RD JAM OFF";

  01fd5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@
$LN78@draw_aircr:

; 5277 : 			}
; 5278 : 		}
; 5279 : 
; 5280 : 		y_adjust = -12.0;

  01fdc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  01fe4	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5281 : 	}
; 5282 : 	else

  01fec	e9 d0 00 00 00	 jmp	 $LN74@draw_aircr
$LN73@draw_aircr:

; 5283 : 	{
; 5284 : 		if (default_damage.radar_jammer)

  01ff1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  01ff6	c1 e8 07	 shr	 eax, 7
  01ff9	83 e0 01	 and	 eax, 1
  01ffc	74 0c		 je	 SHORT $LN79@draw_aircr

; 5285 : 		{
; 5286 : 			s = "RD XXX";

  01ffe	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06JNKFDAHI@RD?5XXX@

; 5287 : 		}
; 5288 : 		else

  02005	e9 a7 00 00 00	 jmp	 $LN82@draw_aircr
$LN79@draw_aircr:

; 5289 : 		{
; 5290 : 			if (get_local_entity_int_value (source, INT_TYPE_RADAR_JAMMER_ON))

  0200a	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  02011	74 10		 je	 SHORT $LN242@draw_aircr
  02013	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  02019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0201b	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv1050[ebp], ecx
  02021	eb 20		 jmp	 SHORT $LN243@draw_aircr
$LN242@draw_aircr:
  02023	68 aa 14 00 00	 push	 5290			; 000014aaH
  02028	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0202d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02033	52		 push	 edx
  02034	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02039	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1050[ebp], 0
$LN243@draw_aircr:
  02043	b8 01 00 00 00	 mov	 eax, 1
  02048	85 c0		 test	 eax, eax
  0204a	74 0c		 je	 SHORT $LN244@draw_aircr
  0204c	c7 85 9c fe ff
	ff a8 00 00 00	 mov	 DWORD PTR tv1057[ebp], 168 ; 000000a8H
  02056	eb 20		 jmp	 SHORT $LN245@draw_aircr
$LN244@draw_aircr:
  02058	68 aa 14 00 00	 push	 5290			; 000014aaH
  0205d	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  02062	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  02068	51		 push	 ecx
  02069	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0206e	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1057[ebp], 0
$LN245@draw_aircr:
  02078	68 a8 00 00 00	 push	 168			; 000000a8H
  0207d	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  02083	52		 push	 edx
  02084	69 85 a0 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1050[ebp], 1116
  0208e	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv1057[ebp]
  02094	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0209b	ff d2		 call	 edx
  0209d	85 c0		 test	 eax, eax
  0209f	74 09		 je	 SHORT $LN81@draw_aircr

; 5291 : 			{
; 5292 : 				s = "RD ON";

  020a1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_05BHAGAOGB@RD?5ON@

; 5293 : 			}
; 5294 : 			else

  020a8	eb 07		 jmp	 SHORT $LN82@draw_aircr
$LN81@draw_aircr:

; 5295 : 			{
; 5296 : 				s = "RD OFF";

  020aa	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06JCJCOOPL@RD?5OFF@
$LN82@draw_aircr:

; 5297 : 			}
; 5298 : 		}
; 5299 : 
; 5300 : 		y_adjust = -5.0;

  020b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  020b9	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN74@draw_aircr:

; 5301 : 	}
; 5302 : 
; 5303 : 	set_2d_mono_font_position (-0.8, -1.0);

  020c1	51		 push	 ecx
  020c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  020ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020cf	51		 push	 ecx
  020d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  020d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020dd	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5304 : 
; 5305 : 	set_mono_font_rel_position (1.0, y_adjust);

  020e2	51		 push	 ecx
  020e3	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  020eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020f0	51		 push	 ecx
  020f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  020f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020fe	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5306 : 
; 5307 : 	print_mono_font_string (s);

  02103	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02106	50		 push	 eax
  02107	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5308 : 
; 5309 : 	//
; 5310 : 	// auto-countermeasures
; 5311 : 	//
; 5312 : 
; 5313 : 	if (get_global_auto_counter_measures() || get_global_ase_auto_page())

  0210c	83 3d 90 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+144, 0
  02113	75 0d		 jne	 SHORT $LN84@draw_aircr
  02115	83 3d 64 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868, 0
  0211c	0f 84 0d 01 00
	00		 je	 $LN88@draw_aircr
$LN84@draw_aircr:

; 5314 : 	{
; 5315 : 
; 5316 : 		if (draw_large_mfd)

  02122	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02129	74 12		 je	 SHORT $LN85@draw_aircr

; 5317 : 		{
; 5318 : 			y_adjust = -38.0;

  0212b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2180000
  02133	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5319 : 		}
; 5320 : 		else

  0213b	eb 10		 jmp	 SHORT $LN86@draw_aircr
$LN85@draw_aircr:

; 5321 : 		{
; 5322 : 			y_adjust = -19.0;

  0213d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1980000
  02145	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN86@draw_aircr:

; 5323 : 		}
; 5324 : 
; 5325 : 		if (get_global_auto_counter_measures())

  0214d	83 3d 90 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+144, 0
  02154	74 68		 je	 SHORT $LN87@draw_aircr

; 5326 : 		{
; 5327 : 			s = "AUTO C/M";

  02156	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_08NKOLJMOI@AUTO?5C?1M@

; 5328 : 			width = get_mono_font_string_width (s);

  0215d	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02160	50		 push	 eax
  02161	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02166	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 5329 : 			
; 5330 : 			set_2d_mono_font_position (0.8, -1.0);

  0216c	51		 push	 ecx
  0216d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02175	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0217a	51		 push	 ecx
  0217b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  02183	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02188	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5331 : 			set_mono_font_rel_position (-width, y_adjust);

  0218d	51		 push	 ecx
  0218e	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02196	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0219b	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  021a3	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  021aa	51		 push	 ecx
  021ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021b0	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5332 : 	
; 5333 : 			print_mono_font_string(s);

  021b5	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  021b8	50		 push	 eax
  021b9	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN87@draw_aircr:

; 5334 : 		}
; 5335 : 
; 5336 : 		if (get_global_ase_auto_page())

  021be	83 3d 64 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868, 0
  021c5	74 68		 je	 SHORT $LN88@draw_aircr

; 5337 : 		{
; 5338 : 			s = "AUTO PAGE";

  021c7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_09NCCLNCCC@AUTO?5PAGE@

; 5339 : 			width = get_mono_font_string_width (s);

  021ce	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  021d1	50		 push	 eax
  021d2	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  021d7	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 5340 : 	
; 5341 : 			set_2d_mono_font_position (0.9, 0.9);

  021dd	51		 push	 ecx
  021de	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  021e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021eb	51		 push	 ecx
  021ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  021f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021f9	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5342 : 			set_mono_font_rel_position (-width, 5.0);

  021fe	51		 push	 ecx
  021ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  02207	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0220c	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  02214	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0221b	51		 push	 ecx
  0221c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02221	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5343 : 	
; 5344 : 			print_mono_font_string (s);

  02226	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02229	50		 push	 eax
  0222a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN88@draw_aircr:

; 5345 : 		}
; 5346 : 	}
; 5347 : 	
; 5348 : 	//
; 5349 : 	// chaff
; 5350 : 	//
; 5351 : 
; 5352 : 	if (draw_large_mfd)

  0222f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02236	74 58		 je	 SHORT $LN89@draw_aircr

; 5353 : 	{
; 5354 : 		if (default_damage.chaff_dispenser)

  02238	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  0223d	c1 e8 1d	 shr	 eax, 29			; 0000001dH
  02240	83 e0 01	 and	 eax, 1
  02243	74 16		 je	 SHORT $LN91@draw_aircr

; 5355 : 		{
; 5356 : 			sprintf (buffer, "CHAFF:XX");

  02245	68 00 00 00 00	 push	 OFFSET ??_C@_08GHAEIHAP@CHAFF?3XX@
  0224a	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02250	50		 push	 eax
  02251	e8 00 00 00 00	 call	 _sprintf
  02256	83 c4 08	 add	 esp, 8

; 5357 : 		}
; 5358 : 		else

  02259	eb 23		 jmp	 SHORT $LN92@draw_aircr
$LN91@draw_aircr:

; 5359 : 		{
; 5360 : 			sprintf (buffer, "CHAFF:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_CHAFF));

  0225b	6a 43		 push	 67			; 00000043H
  0225d	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  02263	50		 push	 eax
  02264	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  02269	50		 push	 eax
  0226a	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@
  0226f	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  02275	51		 push	 ecx
  02276	e8 00 00 00 00	 call	 _sprintf
  0227b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN92@draw_aircr:

; 5361 : 		}
; 5362 : 
; 5363 : 		y_adjust = -25.0;

  0227e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  02286	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5364 : 	}
; 5365 : 	else

  0228e	eb 56		 jmp	 SHORT $LN90@draw_aircr
$LN89@draw_aircr:

; 5366 : 	{
; 5367 : 		if (default_damage.chaff_dispenser)

  02290	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  02295	c1 e8 1d	 shr	 eax, 29			; 0000001dH
  02298	83 e0 01	 and	 eax, 1
  0229b	74 16		 je	 SHORT $LN93@draw_aircr

; 5368 : 		{
; 5369 : 			sprintf (buffer, "C:XX");

  0229d	68 00 00 00 00	 push	 OFFSET ??_C@_04KJNFJKOK@C?3XX@
  022a2	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  022a8	50		 push	 eax
  022a9	e8 00 00 00 00	 call	 _sprintf
  022ae	83 c4 08	 add	 esp, 8

; 5370 : 		}
; 5371 : 		else

  022b1	eb 23		 jmp	 SHORT $LN94@draw_aircr
$LN93@draw_aircr:

; 5372 : 		{
; 5373 : 			sprintf (buffer, "C:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_CHAFF));

  022b3	6a 43		 push	 67			; 00000043H
  022b5	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  022bb	50		 push	 eax
  022bc	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  022c1	50		 push	 eax
  022c2	68 00 00 00 00	 push	 OFFSET ??_C@_06GNOFKMCG@C?3?$CF02d@
  022c7	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  022cd	51		 push	 ecx
  022ce	e8 00 00 00 00	 call	 _sprintf
  022d3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN94@draw_aircr:

; 5374 : 		}
; 5375 : 
; 5376 : 		y_adjust = -12.0;

  022d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  022de	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN90@draw_aircr:

; 5377 : 	}
; 5378 : 
; 5379 : 	width = get_mono_font_string_width (buffer);

  022e6	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  022ec	50		 push	 eax
  022ed	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  022f2	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 5380 : 
; 5381 : 	set_2d_mono_font_position (0.8, -1.0);

  022f8	51		 push	 ecx
  022f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02301	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02306	51		 push	 ecx
  02307	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  0230f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02314	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5382 : 
; 5383 : 	set_mono_font_rel_position (-width, y_adjust);

  02319	51		 push	 ecx
  0231a	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02322	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02327	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  0232f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  02336	51		 push	 ecx
  02337	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0233c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5384 : 
; 5385 : 	print_mono_font_string (buffer);

  02341	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02347	50		 push	 eax
  02348	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5386 : 
; 5387 : 	//
; 5388 : 	// flares
; 5389 : 	//
; 5390 : 
; 5391 : 	if (draw_large_mfd)

  0234d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02354	74 58		 je	 SHORT $LN95@draw_aircr

; 5392 : 	{
; 5393 : 		if (default_damage.flare_dispenser)

  02356	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  0235b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0235e	83 e0 01	 and	 eax, 1
  02361	74 16		 je	 SHORT $LN97@draw_aircr

; 5394 : 		{
; 5395 : 			sprintf (buffer, "FLARE:XX");

  02363	68 00 00 00 00	 push	 OFFSET ??_C@_08HGDOPGOH@FLARE?3XX@
  02368	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0236e	50		 push	 eax
  0236f	e8 00 00 00 00	 call	 _sprintf
  02374	83 c4 08	 add	 esp, 8

; 5396 : 		}
; 5397 : 		else

  02377	eb 23		 jmp	 SHORT $LN98@draw_aircr
$LN97@draw_aircr:

; 5398 : 		{
; 5399 : 			sprintf (buffer, "FLARE:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_FLARE));

  02379	6a 44		 push	 68			; 00000044H
  0237b	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  02381	50		 push	 eax
  02382	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  02387	50		 push	 eax
  02388	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@
  0238d	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  02393	51		 push	 ecx
  02394	e8 00 00 00 00	 call	 _sprintf
  02399	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN98@draw_aircr:

; 5400 : 		}
; 5401 : 
; 5402 : 		y_adjust = -12.0;

  0239c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  023a4	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5403 : 	}
; 5404 : 	else

  023ac	eb 56		 jmp	 SHORT $LN96@draw_aircr
$LN95@draw_aircr:

; 5405 : 	{
; 5406 : 		if (default_damage.flare_dispenser)

  023ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  023b3	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  023b6	83 e0 01	 and	 eax, 1
  023b9	74 16		 je	 SHORT $LN99@draw_aircr

; 5407 : 		{
; 5408 : 			sprintf (buffer, "F:XX");

  023bb	68 00 00 00 00	 push	 OFFSET ??_C@_04GBDFBFJK@F?3XX@
  023c0	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  023c6	50		 push	 eax
  023c7	e8 00 00 00 00	 call	 _sprintf
  023cc	83 c4 08	 add	 esp, 8

; 5409 : 		}
; 5410 : 		else

  023cf	eb 23		 jmp	 SHORT $LN100@draw_aircr
$LN99@draw_aircr:

; 5411 : 		{
; 5412 : 			sprintf (buffer, "F:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_FLARE));

  023d1	6a 44		 push	 68			; 00000044H
  023d3	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  023d9	50		 push	 eax
  023da	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  023df	50		 push	 eax
  023e0	68 00 00 00 00	 push	 OFFSET ??_C@_06DPNNIDIB@F?3?$CF02d@
  023e5	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  023eb	51		 push	 ecx
  023ec	e8 00 00 00 00	 call	 _sprintf
  023f1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN100@draw_aircr:

; 5413 : 		}
; 5414 : 
; 5415 : 		y_adjust = -5.0;

  023f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  023fc	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN96@draw_aircr:

; 5416 : 	}
; 5417 : 
; 5418 : 	width = get_mono_font_string_width (buffer);

  02404	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0240a	50		 push	 eax
  0240b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02410	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 5419 : 
; 5420 : 	set_2d_mono_font_position (0.8, -1.0);

  02416	51		 push	 ecx
  02417	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0241f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02424	51		 push	 ecx
  02425	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  0242d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02432	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5421 : 
; 5422 : 	set_mono_font_rel_position (-width, y_adjust);

  02437	51		 push	 ecx
  02438	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02440	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02445	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  0244d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  02454	51		 push	 ecx
  02455	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0245a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5423 : 
; 5424 : 	print_mono_font_string (buffer);

  0245f	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02465	50		 push	 eax
  02466	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5425 : }

  0246b	5f		 pop	 edi
  0246c	5e		 pop	 esi
  0246d	5b		 pop	 ebx
  0246e	8b e5		 mov	 esp, ebp
  02470	5d		 pop	 ebp
  02471	c3		 ret	 0
?draw_aircraft_survivability_equipment_display_mfd@@YGXXZ ENDP ; draw_aircraft_survivability_equipment_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z
_TEXT	SEGMENT
tv253 = -128						; size = 4
tv190 = -128						; size = 4
tv167 = -128						; size = 4
tv146 = -128						; size = 4
tv95 = -128						; size = 4
tv245 = -124						; size = 4
tv223 = -124						; size = 4
tv182 = -124						; size = 4
tv159 = -124						; size = 4
tv139 = -124						; size = 4
tv87 = -124						; size = 4
$T1 = -120						; size = 4
_attitude$ = -52					; size = 4
_uvec_threat_to_target$ = -48				; size = 12
_threat_position$ = -36					; size = 4
_cos_error$ = -32					; size = 4
_length$ = -28						; size = 4
_time_to_impact$ = -24					; size = 4
_threat_velocity$ = -20					; size = 4
_threat_range$ = -16					; size = 4
_overshot$ = -12					; size = 4
_closest_missile$ = -8					; size = 4
_threat$ = -4						; size = 4
_source$ = 8						; size = 4
_source_position$ = 12					; size = 4
_threat_type$ = 16					; size = 4
_closest_missile_time_to_impact$ = 20			; size = 4
?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z PROC ; get_closest_missile, COMDAT

; 4708 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 4709 : 	entity
; 4710 : 		*threat,
; 4711 : 		*closest_missile;
; 4712 : 
; 4713 : 	int
; 4714 : 		overshot;
; 4715 : 
; 4716 : 	float
; 4717 : 		threat_range,
; 4718 : 		threat_velocity,
; 4719 : 		time_to_impact,
; 4720 : 		length,
; 4721 : 		cos_error;
; 4722 : 
; 4723 : 	vec3d
; 4724 : 		*threat_position,
; 4725 : 		uvec_threat_to_target;
; 4726 : 
; 4727 : 	matrix3x3
; 4728 : 		*attitude;
; 4729 : 
; 4730 : 	ASSERT (source);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _source$[ebp], 0
  00010	75 18		 jne	 SHORT $LN4@get_closes
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00017	83 c0 16	 add	 eax, 22			; 00000016H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06OEKOLKIL@source@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_closes:

; 4731 : 
; 4732 : 	ASSERT (source_position);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _source_position$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN5@get_closes
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00035	83 c0 18	 add	 eax, 24			; 00000018H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IIPCKJML@source_position@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@get_closes:

; 4733 : 
; 4734 : 	ASSERT ((threat_type == THREAT_TYPE_RF_MISSILE) || (threat_type == THREAT_TYPE_IR_MISSILE) || (threat_type == THREAT_TYPE_LASER_MISSILE));

  00048	83 7d 10 01	 cmp	 DWORD PTR _threat_type$[ebp], 1
  0004c	74 24		 je	 SHORT $LN6@get_closes
  0004e	83 7d 10 02	 cmp	 DWORD PTR _threat_type$[ebp], 2
  00052	74 1e		 je	 SHORT $LN6@get_closes
  00054	83 7d 10 03	 cmp	 DWORD PTR _threat_type$[ebp], 3
  00058	74 18		 je	 SHORT $LN6@get_closes
  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  0005f	83 c0 1a	 add	 eax, 26			; 0000001aH
  00062	50		 push	 eax
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@
  0006d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_closes:

; 4735 : 
; 4736 : 	closest_missile = NULL;

  00072	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _closest_missile$[ebp], 0

; 4737 : 
; 4738 : 	*closest_missile_time_to_impact = 1000000.0;

  00079	8b 45 14	 mov	 eax, DWORD PTR _closest_missile_time_to_impact$[ebp]
  0007c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@49742400
  00084	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 4739 : 
; 4740 : 	threat = get_local_entity_first_child (get_gunship_entity (), LIST_TYPE_TARGET);

  00088	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0008f	74 0c		 je	 SHORT $LN15@get_closes
  00091	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00096	8b 08		 mov	 ecx, DWORD PTR [eax]
  00098	89 4d 84	 mov	 DWORD PTR tv87[ebp], ecx
  0009b	eb 21		 jmp	 SHORT $LN16@get_closes
$LN15@get_closes:
  0009d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  000a3	83 c2 20	 add	 edx, 32			; 00000020H
  000a6	52		 push	 edx
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b7	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$LN16@get_closes:
  000be	b9 01 00 00 00	 mov	 ecx, 1
  000c3	85 c9		 test	 ecx, ecx
  000c5	74 09		 je	 SHORT $LN17@get_closes
  000c7	c7 45 80 26 00
	00 00		 mov	 DWORD PTR tv95[ebp], 38	; 00000026H
  000ce	eb 21		 jmp	 SHORT $LN18@get_closes
$LN17@get_closes:
  000d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  000d6	83 c2 20	 add	 edx, 32			; 00000020H
  000d9	52		 push	 edx
  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ea	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv95[ebp], 0
$LN18@get_closes:
  000f1	6a 26		 push	 38			; 00000026H
  000f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000f9	51		 push	 ecx
  000fa	69 55 84 b4 00
	00 00		 imul	 edx, DWORD PTR tv87[ebp], 180
  00101	8b 45 80	 mov	 eax, DWORD PTR tv95[ebp]
  00104	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0010b	ff d1		 call	 ecx
  0010d	89 45 fc	 mov	 DWORD PTR _threat$[ebp], eax
$LN2@get_closes:

; 4741 : 
; 4742 : 	while (threat)

  00110	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  00114	0f 84 74 03 00
	00		 je	 $LN3@get_closes

; 4743 : 	{
; 4744 : 		if (get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE) == threat_type)

  0011a	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0011e	74 0a		 je	 SHORT $LN19@get_closes
  00120	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  00123	8b 08		 mov	 ecx, DWORD PTR [eax]
  00125	89 4d 84	 mov	 DWORD PTR tv139[ebp], ecx
  00128	eb 1d		 jmp	 SHORT $LN20@get_closes
$LN19@get_closes:
  0012a	68 88 12 00 00	 push	 4744			; 00001288H
  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00134	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0013a	52		 push	 edx
  0013b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00140	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv139[ebp], 0
$LN20@get_closes:
  00147	b8 01 00 00 00	 mov	 eax, 1
  0014c	85 c0		 test	 eax, eax
  0014e	74 09		 je	 SHORT $LN21@get_closes
  00150	c7 45 80 e9 00
	00 00		 mov	 DWORD PTR tv146[ebp], 233 ; 000000e9H
  00157	eb 1d		 jmp	 SHORT $LN22@get_closes
$LN21@get_closes:
  00159	68 88 12 00 00	 push	 4744			; 00001288H
  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00163	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00169	51		 push	 ecx
  0016a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0016f	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv146[ebp], 0
$LN22@get_closes:
  00176	68 e9 00 00 00	 push	 233			; 000000e9H
  0017b	8b 55 fc	 mov	 edx, DWORD PTR _threat$[ebp]
  0017e	52		 push	 edx
  0017f	69 45 84 5c 04
	00 00		 imul	 eax, DWORD PTR tv139[ebp], 1116
  00186	8b 4d 80	 mov	 ecx, DWORD PTR tv146[ebp]
  00189	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00190	ff d2		 call	 edx
  00192	3b 45 10	 cmp	 eax, DWORD PTR _threat_type$[ebp]
  00195	0f 85 6e 02 00
	00		 jne	 $LN13@get_closes

; 4745 : 		{
; 4746 : 			threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  0019b	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0019f	74 0a		 je	 SHORT $LN23@get_closes
  001a1	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  001a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a6	89 4d 84	 mov	 DWORD PTR tv159[ebp], ecx
  001a9	eb 21		 jmp	 SHORT $LN24@get_closes
$LN23@get_closes:
  001ab	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  001b1	83 c2 26	 add	 edx, 38			; 00000026H
  001b4	52		 push	 edx
  001b5	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001bf	50		 push	 eax
  001c0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c5	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv159[ebp], 0
$LN24@get_closes:
  001cc	b9 01 00 00 00	 mov	 ecx, 1
  001d1	85 c9		 test	 ecx, ecx
  001d3	74 09		 je	 SHORT $LN25@get_closes
  001d5	c7 45 80 08 00
	00 00		 mov	 DWORD PTR tv167[ebp], 8
  001dc	eb 21		 jmp	 SHORT $LN26@get_closes
$LN25@get_closes:
  001de	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  001e4	83 c2 26	 add	 edx, 38			; 00000026H
  001e7	52		 push	 edx
  001e8	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001f2	50		 push	 eax
  001f3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001f8	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv167[ebp], 0
$LN26@get_closes:
  001ff	6a 08		 push	 8
  00201	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00204	51		 push	 ecx
  00205	6b 55 84 60	 imul	 edx, DWORD PTR tv159[ebp], 96
  00209	8b 45 80	 mov	 eax, DWORD PTR tv167[ebp]
  0020c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00213	ff d1		 call	 ecx
  00215	89 45 dc	 mov	 DWORD PTR _threat_position$[ebp], eax

; 4747 : 
; 4748 : 			threat_range = get_3d_range (source_position, threat_position);

  00218	8b 45 dc	 mov	 eax, DWORD PTR _threat_position$[ebp]
  0021b	50		 push	 eax
  0021c	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  0021f	51		 push	 ecx
  00220	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  00225	d9 5d f0	 fstp	 DWORD PTR _threat_range$[ebp]

; 4749 : 
; 4750 : 			threat_velocity = get_local_entity_float_value (threat, FLOAT_TYPE_VELOCITY);

  00228	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0022c	74 0a		 je	 SHORT $LN27@get_closes
  0022e	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  00231	8b 08		 mov	 ecx, DWORD PTR [eax]
  00233	89 4d 84	 mov	 DWORD PTR tv182[ebp], ecx
  00236	eb 21		 jmp	 SHORT $LN28@get_closes
$LN27@get_closes:
  00238	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  0023e	83 c2 2a	 add	 edx, 42			; 0000002aH
  00241	52		 push	 edx
  00242	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00247	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0024c	50		 push	 eax
  0024d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00252	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv182[ebp], 0
$LN28@get_closes:
  00259	b9 01 00 00 00	 mov	 ecx, 1
  0025e	85 c9		 test	 ecx, ecx
  00260	74 09		 je	 SHORT $LN29@get_closes
  00262	c7 45 80 93 00
	00 00		 mov	 DWORD PTR tv190[ebp], 147 ; 00000093H
  00269	eb 21		 jmp	 SHORT $LN30@get_closes
$LN29@get_closes:
  0026b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00271	83 c2 2a	 add	 edx, 42			; 0000002aH
  00274	52		 push	 edx
  00275	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0027a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0027f	50		 push	 eax
  00280	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00285	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv190[ebp], 0
$LN30@get_closes:
  0028c	68 93 00 00 00	 push	 147			; 00000093H
  00291	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00294	51		 push	 ecx
  00295	69 55 84 bc 02
	00 00		 imul	 edx, DWORD PTR tv182[ebp], 700
  0029c	8b 45 80	 mov	 eax, DWORD PTR tv190[ebp]
  0029f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  002a6	ff d1		 call	 ecx
  002a8	d9 5d ec	 fstp	 DWORD PTR _threat_velocity$[ebp]

; 4751 : 
; 4752 : 			time_to_impact = threat_range / max (threat_velocity, 1.0f);

  002ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002b3	f3 0f 11 45 88	 movss	 DWORD PTR $T1[ebp], xmm0
  002b8	8d 45 88	 lea	 eax, DWORD PTR $T1[ebp]
  002bb	50		 push	 eax
  002bc	8d 4d ec	 lea	 ecx, DWORD PTR _threat_velocity$[ebp]
  002bf	51		 push	 ecx
  002c0	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  002c5	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _threat_range$[ebp]
  002ca	f3 0f 5e 00	 divss	 xmm0, DWORD PTR [eax]
  002ce	f3 0f 11 45 e8	 movss	 DWORD PTR _time_to_impact$[ebp], xmm0

; 4753 : 
; 4754 : 			//
; 4755 : 			// guard against 'overshot target' to prevent spurious indications
; 4756 : 			//
; 4757 : 
; 4758 : 			overshot = FALSE;

  002d3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _overshot$[ebp], 0

; 4759 : 
; 4760 : 			if (time_to_impact < 1.0)

  002da	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _time_to_impact$[ebp]
  002df	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  002e7	66 0f 2f c8	 comisd	 xmm1, xmm0
  002eb	0f 86 f3 00 00
	00		 jbe	 $LN10@get_closes

; 4761 : 			{
; 4762 : 				uvec_threat_to_target.x = source_position->x - threat_position->x;

  002f1	8b 45 0c	 mov	 eax, DWORD PTR _source_position$[ebp]
  002f4	8b 4d dc	 mov	 ecx, DWORD PTR _threat_position$[ebp]
  002f7	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002fb	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  002ff	f3 0f 11 45 d0	 movss	 DWORD PTR _uvec_threat_to_target$[ebp], xmm0

; 4763 : 				uvec_threat_to_target.y = source_position->y - threat_position->y;

  00304	8b 45 0c	 mov	 eax, DWORD PTR _source_position$[ebp]
  00307	8b 4d dc	 mov	 ecx, DWORD PTR _threat_position$[ebp]
  0030a	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0030f	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00314	f3 0f 11 45 d4	 movss	 DWORD PTR _uvec_threat_to_target$[ebp+4], xmm0

; 4764 : 				uvec_threat_to_target.z = source_position->z - threat_position->z;

  00319	8b 45 0c	 mov	 eax, DWORD PTR _source_position$[ebp]
  0031c	8b 4d dc	 mov	 ecx, DWORD PTR _threat_position$[ebp]
  0031f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00324	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00329	f3 0f 11 45 d8	 movss	 DWORD PTR _uvec_threat_to_target$[ebp+8], xmm0

; 4765 : 
; 4766 : 				length = get_3d_vector_magnitude (&uvec_threat_to_target);

  0032e	8d 45 d0	 lea	 eax, DWORD PTR _uvec_threat_to_target$[ebp]
  00331	50		 push	 eax
  00332	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  00337	d9 5d e4	 fstp	 DWORD PTR _length$[ebp]

; 4767 : 
; 4768 : 				if (length > 1.0)

  0033a	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  0033f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  00347	0f 86 90 00 00
	00		 jbe	 $LN9@get_closes

; 4769 : 				{
; 4770 : 					normalise_3d_vector_given_magnitude (&uvec_threat_to_target, length);

  0034d	51		 push	 ecx
  0034e	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _length$[ebp]
  00353	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00358	8d 45 d0	 lea	 eax, DWORD PTR _uvec_threat_to_target$[ebp]
  0035b	50		 push	 eax
  0035c	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 4771 : 
; 4772 : 					attitude = get_local_entity_attitude_matrix_ptr (threat);

  00361	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  00365	74 0a		 je	 SHORT $LN31@get_closes
  00367	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  0036a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0036c	89 4d 84	 mov	 DWORD PTR tv223[ebp], ecx
  0036f	eb 21		 jmp	 SHORT $LN32@get_closes
$LN31@get_closes:
  00371	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00377	83 c2 40	 add	 edx, 64			; 00000040H
  0037a	52		 push	 edx
  0037b	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00380	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00385	50		 push	 eax
  00386	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0038b	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv223[ebp], 0
$LN32@get_closes:
  00392	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00395	51		 push	 ecx
  00396	8b 55 84	 mov	 edx, DWORD PTR tv223[ebp]
  00399	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_attitude_matrix_ptr@@3PAP6GPAY122MPAUENTITY@@@ZA[edx*4]
  003a0	ff d0		 call	 eax
  003a2	89 45 cc	 mov	 DWORD PTR _attitude$[ebp], eax

; 4773 : 
; 4774 : 					cos_error = get_3d_unit_vector_dot_product ((vec3d *) &((*attitude) [2][0]), &uvec_threat_to_target);

  003a5	8d 45 d0	 lea	 eax, DWORD PTR _uvec_threat_to_target$[ebp]
  003a8	50		 push	 eax
  003a9	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  003ae	d1 e1		 shl	 ecx, 1
  003b0	03 4d cc	 add	 ecx, DWORD PTR _attitude$[ebp]
  003b3	ba 04 00 00 00	 mov	 edx, 4
  003b8	6b c2 00	 imul	 eax, edx, 0
  003bb	03 c8		 add	 ecx, eax
  003bd	51		 push	 ecx
  003be	e8 00 00 00 00	 call	 ?get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z ; get_3d_unit_vector_dot_product
  003c3	d9 5d e0	 fstp	 DWORD PTR _cos_error$[ebp]

; 4775 : 
; 4776 : 					if (cos_error < 0.0)

  003c6	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _cos_error$[ebp]
  003cb	0f 57 c9	 xorps	 xmm1, xmm1
  003ce	66 0f 2f c8	 comisd	 xmm1, xmm0
  003d2	76 07		 jbe	 SHORT $LN11@get_closes

; 4777 : 					{
; 4778 : 						overshot = TRUE;

  003d4	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _overshot$[ebp], 1
$LN11@get_closes:

; 4779 : 					}
; 4780 : 				}
; 4781 : 				else

  003db	eb 07		 jmp	 SHORT $LN10@get_closes
$LN9@get_closes:

; 4782 : 				{
; 4783 : 					overshot = TRUE;

  003dd	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _overshot$[ebp], 1
$LN10@get_closes:

; 4784 : 				}
; 4785 : 			}
; 4786 : 
; 4787 : 			if (!overshot)

  003e4	83 7d f4 00	 cmp	 DWORD PTR _overshot$[ebp], 0
  003e8	75 1f		 jne	 SHORT $LN13@get_closes

; 4788 : 			{
; 4789 : 				if (time_to_impact < *closest_missile_time_to_impact)

  003ea	8b 45 14	 mov	 eax, DWORD PTR _closest_missile_time_to_impact$[ebp]
  003ed	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  003f1	0f 2f 45 e8	 comiss	 xmm0, DWORD PTR _time_to_impact$[ebp]
  003f5	76 12		 jbe	 SHORT $LN13@get_closes

; 4790 : 				{
; 4791 : 					closest_missile = threat;

  003f7	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  003fa	89 45 f8	 mov	 DWORD PTR _closest_missile$[ebp], eax

; 4792 : 
; 4793 : 					*closest_missile_time_to_impact = time_to_impact;

  003fd	8b 45 14	 mov	 eax, DWORD PTR _closest_missile_time_to_impact$[ebp]
  00400	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _time_to_impact$[ebp]
  00405	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
$LN13@get_closes:

; 4794 : 				}
; 4795 : 			}
; 4796 : 		}
; 4797 : 
; 4798 : 		threat = get_local_entity_child_succ (threat, LIST_TYPE_TARGET);

  00409	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0040d	74 0a		 je	 SHORT $LN33@get_closes
  0040f	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  00412	8b 08		 mov	 ecx, DWORD PTR [eax]
  00414	89 4d 84	 mov	 DWORD PTR tv245[ebp], ecx
  00417	eb 21		 jmp	 SHORT $LN34@get_closes
$LN33@get_closes:
  00419	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  0041f	83 c2 5a	 add	 edx, 90			; 0000005aH
  00422	52		 push	 edx
  00423	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00428	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0042d	50		 push	 eax
  0042e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00433	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv245[ebp], 0
$LN34@get_closes:
  0043a	b9 01 00 00 00	 mov	 ecx, 1
  0043f	85 c9		 test	 ecx, ecx
  00441	74 09		 je	 SHORT $LN35@get_closes
  00443	c7 45 80 26 00
	00 00		 mov	 DWORD PTR tv253[ebp], 38 ; 00000026H
  0044a	eb 21		 jmp	 SHORT $LN36@get_closes
$LN35@get_closes:
  0044c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00452	83 c2 5a	 add	 edx, 90			; 0000005aH
  00455	52		 push	 edx
  00456	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0045b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00460	50		 push	 eax
  00461	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00466	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv253[ebp], 0
$LN36@get_closes:
  0046d	6a 26		 push	 38			; 00000026H
  0046f	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00472	51		 push	 ecx
  00473	69 55 84 b4 00
	00 00		 imul	 edx, DWORD PTR tv245[ebp], 180
  0047a	8b 45 80	 mov	 eax, DWORD PTR tv253[ebp]
  0047d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00484	ff d1		 call	 ecx
  00486	89 45 fc	 mov	 DWORD PTR _threat$[ebp], eax

; 4799 : 	}

  00489	e9 82 fc ff ff	 jmp	 $LN2@get_closes
$LN3@get_closes:

; 4800 : 
; 4801 : 	return (closest_missile);

  0048e	8b 45 f8	 mov	 eax, DWORD PTR _closest_missile$[ebp]

; 4802 : }

  00491	5f		 pop	 edi
  00492	5e		 pop	 esi
  00493	5b		 pop	 ebx
  00494	8b e5		 mov	 esp, ebp
  00496	5d		 pop	 ebp
  00497	c2 10 00	 ret	 16			; 00000010H
?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ENDP ; get_closest_missile
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_tactical_situation_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv1708 = -416						; size = 4
tv1212 = -412						; size = 4
tv1046 = -412						; size = 4
tv1011 = -412						; size = 4
tv990 = -412						; size = 4
tv969 = -412						; size = 4
tv950 = -412						; size = 4
tv931 = -412						; size = 4
tv910 = -412						; size = 4
tv889 = -412						; size = 4
tv868 = -412						; size = 4
tv849 = -412						; size = 4
tv830 = -412						; size = 4
tv811 = -412						; size = 4
tv777 = -412						; size = 4
tv743 = -412						; size = 4
tv724 = -412						; size = 4
tv704 = -412						; size = 4
tv677 = -412						; size = 4
tv649 = -412						; size = 4
tv627 = -412						; size = 4
tv606 = -412						; size = 4
tv587 = -412						; size = 4
tv568 = -412						; size = 4
tv531 = -412						; size = 4
tv510 = -412						; size = 4
tv441 = -412						; size = 4
tv388 = -412						; size = 4
tv173 = -412						; size = 4
tv153 = -412						; size = 4
tv133 = -412						; size = 4
tv81 = -412						; size = 4
tv1204 = -408						; size = 4
tv1097 = -408						; size = 4
tv1089 = -408						; size = 4
tv1038 = -408						; size = 4
tv1003 = -408						; size = 4
tv982 = -408						; size = 4
tv962 = -408						; size = 4
tv943 = -408						; size = 4
tv923 = -408						; size = 4
tv903 = -408						; size = 4
tv881 = -408						; size = 4
tv861 = -408						; size = 4
tv842 = -408						; size = 4
tv823 = -408						; size = 4
tv803 = -408						; size = 4
tv769 = -408						; size = 4
tv736 = -408						; size = 4
tv716 = -408						; size = 4
tv696 = -408						; size = 4
tv669 = -408						; size = 4
tv641 = -408						; size = 4
tv619 = -408						; size = 4
tv599 = -408						; size = 4
tv580 = -408						; size = 4
tv560 = -408						; size = 4
tv523 = -408						; size = 4
tv502 = -408						; size = 4
tv433 = -408						; size = 4
tv380 = -408						; size = 4
tv165 = -408						; size = 4
tv145 = -408						; size = 4
tv93 = -408						; size = 4
tv73 = -408						; size = 4
_target_position$1 = -340				; size = 4
_target_range$2 = -336					; size = 4
_rangefinder$3 = -332					; size = 4
_dy$4 = -328						; size = 4
_dx$5 = -324						; size = 4
_air_scan_range$6 = -320				; size = 4
_draw_threat_line$7 = -316				; size = 4
_threat_type$8 = -312					; size = 4
_target_position$9 = -308				; size = 4
_launched_weapon$10 = -304				; size = 4
_target$11 = -300					; size = 4
_waypoint_colour$12 = -296				; size = 4
_wp2_rel_position$13 = -292				; size = 12
_wp1_rel_position$14 = -280				; size = 12
_wp2$15 = -268						; size = 4
_wp1$16 = -264						; size = 4
_radius$17 = -260					; size = 4
_tsd_basic_colour$ = -256				; size = 4
_source_position$ = -252				; size = 4
_source_target$ = -248					; size = 4
_source$ = -244						; size = 4
_source_heading$ = -240					; size = 4
_y_adjust$ = -236					; size = 4
_width$ = -232						; size = 4
_y_origin$ = -228					; size = 4
_x_origin$ = -224					; size = 4
_scale$ = -220						; size = 4
_v$ = -216						; size = 4
_u$ = -212						; size = 4
_source_side$ = -208					; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
?draw_tactical_situation_display_mfd@@YGXXZ PROC	; draw_tactical_situation_display_mfd, COMDAT

; 3930 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a0 01 00
	00		 sub	 esp, 416		; 000001a0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3931 : 	char
; 3932 : 		*s,
; 3933 : 		buffer[200];
; 3934 : 
; 3935 : 	entity_sides
; 3936 : 		source_side;
; 3937 : 
; 3938 : 	float
; 3939 : 		u,
; 3940 : 		v,
; 3941 : 		scale,
; 3942 : 		x_origin,
; 3943 : 		y_origin,
; 3944 : 		width,
; 3945 : 		y_adjust,
; 3946 : 		source_heading;
; 3947 : 
; 3948 : 	entity
; 3949 : 		*source,
; 3950 : 		*source_target;
; 3951 : 
; 3952 : 	vec3d
; 3953 : 		*source_position;
; 3954 : 
; 3955 : 
; 3956 : 	rgb_colour tsd_basic_colour = MFD_COLOUR2;

  0000c	b8 04 00 00 00	 mov	 eax, 4
  00011	c1 e0 00	 shl	 eax, 0
  00014	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0001a	89 8d 00 ff ff
	ff		 mov	 DWORD PTR _tsd_basic_colour$[ebp], ecx

; 3957 : 
; 3958 : 	source = get_gunship_entity ();

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00025	89 85 0c ff ff
	ff		 mov	 DWORD PTR _source$[ebp], eax

; 3959 : 
; 3960 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  0002b	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00032	74 10		 je	 SHORT $LN120@draw_tacti
  00034	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0003a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003c	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  00042	eb 24		 jmp	 SHORT $LN121@draw_tacti
$LN120@draw_tacti:
  00044	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  0004a	83 c2 1e	 add	 edx, 30			; 0000001eH
  0004d	52		 push	 edx
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00053	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0005e	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv73[ebp], 0
$LN121@draw_tacti:
  00068	b9 01 00 00 00	 mov	 ecx, 1
  0006d	85 c9		 test	 ecx, ecx
  0006f	74 0c		 je	 SHORT $LN122@draw_tacti
  00071	c7 85 64 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv81[ebp], 187 ; 000000bbH
  0007b	eb 24		 jmp	 SHORT $LN123@draw_tacti
$LN122@draw_tacti:
  0007d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00083	83 c2 1e	 add	 edx, 30			; 0000001eH
  00086	52		 push	 edx
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00097	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv81[ebp], 0
$LN123@draw_tacti:
  000a1	68 bb 00 00 00	 push	 187			; 000000bbH
  000a6	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  000ac	51		 push	 ecx
  000ad	69 95 68 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv73[ebp], 1116
  000b7	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR tv81[ebp]
  000bd	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000c4	ff d1		 call	 ecx
  000c6	89 85 30 ff ff
	ff		 mov	 DWORD PTR _source_side$[ebp], eax

; 3961 : 
; 3962 : 	source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  000cc	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  000d3	74 10		 je	 SHORT $LN124@draw_tacti
  000d5	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  000db	8b 08		 mov	 ecx, DWORD PTR [eax]
  000dd	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv93[ebp], ecx
  000e3	eb 24		 jmp	 SHORT $LN125@draw_tacti
$LN124@draw_tacti:
  000e5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  000eb	83 c2 20	 add	 edx, 32			; 00000020H
  000ee	52		 push	 edx
  000ef	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ff	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv93[ebp], 0
$LN125@draw_tacti:
  00109	b9 01 00 00 00	 mov	 ecx, 1
  0010e	85 c9		 test	 ecx, ecx
  00110	74 0c		 je	 SHORT $LN126@draw_tacti
  00112	c7 85 64 fe ff
	ff 34 00 00 00	 mov	 DWORD PTR tv133[ebp], 52 ; 00000034H
  0011c	eb 24		 jmp	 SHORT $LN127@draw_tacti
$LN126@draw_tacti:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00124	83 c2 20	 add	 edx, 32			; 00000020H
  00127	52		 push	 edx
  00128	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0012d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00132	50		 push	 eax
  00133	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00138	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv133[ebp], 0
$LN127@draw_tacti:
  00142	6a 34		 push	 52			; 00000034H
  00144	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  0014a	51		 push	 ecx
  0014b	69 95 68 fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv93[ebp], 700
  00155	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR tv133[ebp]
  0015b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00162	ff d1		 call	 ecx
  00164	d9 9d 10 ff ff
	ff		 fstp	 DWORD PTR _source_heading$[ebp]

; 3963 : 
; 3964 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  0016a	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00171	74 10		 je	 SHORT $LN128@draw_tacti
  00173	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00179	8b 08		 mov	 ecx, DWORD PTR [eax]
  0017b	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv145[ebp], ecx
  00181	eb 24		 jmp	 SHORT $LN129@draw_tacti
$LN128@draw_tacti:
  00183	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00189	83 c2 22	 add	 edx, 34			; 00000022H
  0018c	52		 push	 edx
  0018d	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00192	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00197	50		 push	 eax
  00198	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0019d	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv145[ebp], 0
$LN129@draw_tacti:
  001a7	b9 01 00 00 00	 mov	 ecx, 1
  001ac	85 c9		 test	 ecx, ecx
  001ae	74 0c		 je	 SHORT $LN130@draw_tacti
  001b0	c7 85 64 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv153[ebp], 8
  001ba	eb 24		 jmp	 SHORT $LN131@draw_tacti
$LN130@draw_tacti:
  001bc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  001c2	83 c2 22	 add	 edx, 34			; 00000022H
  001c5	52		 push	 edx
  001c6	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  001cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001d0	50		 push	 eax
  001d1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001d6	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv153[ebp], 0
$LN131@draw_tacti:
  001e0	6a 08		 push	 8
  001e2	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  001e8	51		 push	 ecx
  001e9	6b 95 68 fe ff
	ff 60		 imul	 edx, DWORD PTR tv145[ebp], 96
  001f0	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR tv153[ebp]
  001f6	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  001fd	ff d1		 call	 ecx
  001ff	89 85 04 ff ff
	ff		 mov	 DWORD PTR _source_position$[ebp], eax

; 3965 : 
; 3966 : 	source_target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  00205	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0020c	74 10		 je	 SHORT $LN132@draw_tacti
  0020e	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00214	8b 08		 mov	 ecx, DWORD PTR [eax]
  00216	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv165[ebp], ecx
  0021c	eb 24		 jmp	 SHORT $LN133@draw_tacti
$LN132@draw_tacti:
  0021e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00224	83 c2 24	 add	 edx, 36			; 00000024H
  00227	52		 push	 edx
  00228	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0022d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00232	50		 push	 eax
  00233	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00238	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv165[ebp], 0
$LN133@draw_tacti:
  00242	b9 01 00 00 00	 mov	 ecx, 1
  00247	85 c9		 test	 ecx, ecx
  00249	74 0c		 je	 SHORT $LN134@draw_tacti
  0024b	c7 85 64 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv173[ebp], 38 ; 00000026H
  00255	eb 24		 jmp	 SHORT $LN135@draw_tacti
$LN134@draw_tacti:
  00257	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  0025d	83 c2 24	 add	 edx, 36			; 00000024H
  00260	52		 push	 edx
  00261	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00266	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0026b	50		 push	 eax
  0026c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00271	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv173[ebp], 0
$LN135@draw_tacti:
  0027b	6a 26		 push	 38			; 00000026H
  0027d	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00283	51		 push	 ecx
  00284	69 95 68 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv165[ebp], 180
  0028e	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR tv173[ebp]
  00294	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0029b	ff d1		 call	 ecx
  0029d	89 85 08 ff ff
	ff		 mov	 DWORD PTR _source_target$[ebp], eax

; 3967 : 
; 3968 : 	scale = RADIUS / tsd_ase_range;

  002a3	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?tsd_ase_range@@3MA
  002ab	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff5d3d193333333
  002b3	f2 0f 5e c8	 divsd	 xmm1, xmm0
  002b7	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  002bb	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _scale$[ebp], xmm0

; 3969 : 
; 3970 : 	//
; 3971 : 	// match ground radar origin
; 3972 : 	//
; 3973 : 
; 3974 : 	if (draw_large_mfd)

  002c3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  002ca	74 1d		 je	 SHORT $LN18@draw_tacti

; 3975 : 	{
; 3976 : 		x_origin = 0.0;

  002cc	0f 57 c0	 xorps	 xmm0, xmm0
  002cf	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _x_origin$[ebp], xmm0

; 3977 : 		y_origin = -0.65;

  002d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  002df	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _y_origin$[ebp], xmm0

; 3978 : 	}
; 3979 : 	else

  002e7	eb 1b		 jmp	 SHORT $LN19@draw_tacti
$LN18@draw_tacti:

; 3980 : 	{
; 3981 : 		x_origin = 0.0;

  002e9	0f 57 c0	 xorps	 xmm0, xmm0
  002ec	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _x_origin$[ebp], xmm0

; 3982 : 		y_origin = -0.70;

  002f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  002fc	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _y_origin$[ebp], xmm0
$LN19@draw_tacti:

; 3983 : 	}
; 3984 : 
; 3985 : 	get_2d_float_screen_coordinates (x_origin, y_origin, &u, &v);

  00304	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _v$[ebp]
  0030a	50		 push	 eax
  0030b	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _u$[ebp]
  00311	51		 push	 ecx
  00312	51		 push	 ecx
  00313	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  0031b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00320	51		 push	 ecx
  00321	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  00329	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032e	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 3986 : 
; 3987 : 	u -= mfd_viewport_x_min;

  00333	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  0033b	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00343	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _u$[ebp], xmm0

; 3988 : 	v -= mfd_viewport_y_min;

  0034b	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  00353	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0035b	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _v$[ebp], xmm0

; 3989 : 
; 3990 : 	////////////////////////////////////////
; 3991 : 	//
; 3992 : 	//VJ 030423 TSD RENDER MOD
; 3993 : 	//
; 3994 : 	////////////////////////////////////////
; 3995 : 
; 3996 : 	if (tsd_underlay == TSD_UNDERLAY_MAP && !default_damage.navigation_computer)

  00363	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 1
  0036a	0f 85 dc 00 00
	00		 jne	 $LN20@draw_tacti
  00370	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  00375	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  00378	83 e0 01	 and	 eax, 1
  0037b	0f 85 cb 00 00
	00		 jne	 $LN20@draw_tacti

; 3997 : 	{
; 3998 : 		if (tsd_render_mode != TSD_RENDER_CONTOUR_MODE)

  00381	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  00388	74 68		 je	 SHORT $LN21@draw_tacti

; 3999 : 		{
; 4000 : 			tsd_basic_colour = MFD_COLOUR_DARK_BLUE;

  0038a	b8 04 00 00 00	 mov	 eax, 4
  0038f	6b c8 11	 imul	 ecx, eax, 17
  00392	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00398	89 95 00 ff ff
	ff		 mov	 DWORD PTR _tsd_basic_colour$[ebp], edx

; 4001 : 			draw_tsd_terrain_map (mfd_env, -y_origin, tsd_ase_range, scale, source_position, source_heading, FALSE);

  0039e	6a 00		 push	 0
  003a0	51		 push	 ecx
  003a1	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  003a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ae	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  003b4	50		 push	 eax
  003b5	51		 push	 ecx
  003b6	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  003be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c3	51		 push	 ecx
  003c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  003cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d1	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  003d9	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  003e0	51		 push	 ecx
  003e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  003ec	51		 push	 ecx
  003ed	e8 00 00 00 00	 call	 ?draw_tsd_terrain_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MH@Z ; draw_tsd_terrain_map
$LN21@draw_tacti:

; 4002 : 		}
; 4003 : 
; 4004 : //VJ 030423 TSD render mod, added mfd_env
; 4005 : 		draw_tsd_contour_map (mfd_env, -y_origin, tsd_ase_range, scale, source_position, source_heading, draw_large_mfd, FALSE);

  003f2	6a 00		 push	 0
  003f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?draw_large_mfd@@3HA
  003f9	50		 push	 eax
  003fa	51		 push	 ecx
  003fb	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  00403	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00408	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  0040e	51		 push	 ecx
  0040f	51		 push	 ecx
  00410	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00418	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0041d	51		 push	 ecx
  0041e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  00426	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042b	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  00433	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0043a	51		 push	 ecx
  0043b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00440	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00446	52		 push	 edx
  00447	e8 00 00 00 00	 call	 ?draw_tsd_contour_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MHH@Z ; draw_tsd_contour_map
$LN20@draw_tacti:

; 4006 : 	}
; 4007 : 
; 4008 : 	////////////////////////////////////////
; 4009 : 	//
; 4010 : 	// radar scan
; 4011 : 	//
; 4012 : 	////////////////////////////////////////
; 4013 : 
; 4014 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)

  0044c	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
  00453	0f 84 0a 04 00
	00		 je	 $LN27@draw_tacti

; 4015 : 	{
; 4016 : 		float
; 4017 : 			radius;
; 4018 : 
; 4019 : 		if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_GROUND_RADAR)

  00459	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 1 ; target_acquisition_system
  00460	0f 85 bd 01 00
	00		 jne	 $LN23@draw_tacti

; 4020 : 		{
; 4021 : 			set_2d_viewport_origin (mfd_env, u, v);

  00466	51		 push	 ecx
  00467	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  0046f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00474	51		 push	 ecx
  00475	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  0047d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00482	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00487	50		 push	 eax
  00488	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 4022 : 
; 4023 : 			radius = ground_radar.scan_range * scale;

  0048d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A
  00495	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0049d	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR _radius$17[ebp], xmm0

; 4024 : 
; 4025 : 			set_2d_window_rotation (mfd_env, -ground_radar.scan_datum);

  004a5	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  004ad	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  004b4	51		 push	 ecx
  004b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  004bf	50		 push	 eax
  004c0	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 4026 : 
; 4027 : 			draw_radar_arc (ground_radar.scan_arc_size, radius, tsd_basic_colour);

  004c5	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_basic_colour$[ebp]
  004cb	50		 push	 eax
  004cc	51		 push	 ecx
  004cd	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR _radius$17[ebp]
  004d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004da	51		 push	 ecx
  004db	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  004e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e8	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 4028 : 
; 4029 : 			set_2d_window_rotation (mfd_env, -(ground_radar.scan_datum - (ground_radar.scan_arc_size * 0.5)));

  004ed	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  004f5	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  004fd	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00505	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00509	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00510	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00514	51		 push	 ecx
  00515	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0051a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0051f	50		 push	 eax
  00520	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 4030 : 
; 4031 : 			draw_2d_line (0.0, 0.0, 0.0, radius, tsd_basic_colour);

  00525	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_basic_colour$[ebp]
  0052b	50		 push	 eax
  0052c	51		 push	 ecx
  0052d	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR _radius$17[ebp]
  00535	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053a	51		 push	 ecx
  0053b	0f 57 c0	 xorps	 xmm0, xmm0
  0053e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00543	51		 push	 ecx
  00544	0f 57 c0	 xorps	 xmm0, xmm0
  00547	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0054c	51		 push	 ecx
  0054d	0f 57 c0	 xorps	 xmm0, xmm0
  00550	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00555	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4032 : 
; 4033 : 			set_2d_window_rotation (mfd_env, -(ground_radar.scan_datum + (ground_radar.scan_arc_size * 0.5)));

  0055a	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  00562	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  0056a	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00572	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00576	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  0057d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00581	51		 push	 ecx
  00582	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00587	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0058c	50		 push	 eax
  0058d	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 4034 : 
; 4035 : 			draw_2d_line (0.0, 0.0, 0.0, radius, tsd_basic_colour);

  00592	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_basic_colour$[ebp]
  00598	50		 push	 eax
  00599	51		 push	 ecx
  0059a	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR _radius$17[ebp]
  005a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a7	51		 push	 ecx
  005a8	0f 57 c0	 xorps	 xmm0, xmm0
  005ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b0	51		 push	 ecx
  005b1	0f 57 c0	 xorps	 xmm0, xmm0
  005b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b9	51		 push	 ecx
  005ba	0f 57 c0	 xorps	 xmm0, xmm0
  005bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4036 : 
; 4037 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  005c7	51		 push	 ecx
  005c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  005d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d5	51		 push	 ecx
  005d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  005de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e3	51		 push	 ecx
  005e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  005ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f1	51		 push	 ecx
  005f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  005fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00604	50		 push	 eax
  00605	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 4038 : 
; 4039 : 			set_2d_window_rotation (mfd_env, 0.0);

  0060a	51		 push	 ecx
  0060b	0f 57 c0	 xorps	 xmm0, xmm0
  0060e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00613	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00618	50		 push	 eax
  00619	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
  0061e	e9 40 02 00 00	 jmp	 $LN27@draw_tacti
$LN23@draw_tacti:

; 4040 : 		}
; 4041 : 		else if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_AIR_RADAR)

  00623	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 2 ; target_acquisition_system
  0062a	0f 85 33 02 00
	00		 jne	 $LN27@draw_tacti

; 4042 : 		{
; 4043 : 			set_2d_viewport_origin (mfd_env, u, v);

  00630	51		 push	 ecx
  00631	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  00639	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063e	51		 push	 ecx
  0063f	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  00647	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0064c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00651	50		 push	 eax
  00652	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 4044 : 
; 4045 : 			radius = air_radar.scan_range * scale;

  00657	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A
  0065f	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00667	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR _radius$17[ebp], xmm0

; 4046 : 
; 4047 : 			if (air_radar.scan_arc_size == APACHE_RADAR_SCAN_ARC_SIZE_360)

  0066f	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  00677	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@40c90fdb
  0067e	9f		 lahf
  0067f	f6 c4 44	 test	 ah, 68			; 00000044H
  00682	7a 31		 jp	 SHORT $LN26@draw_tacti

; 4048 : 			{
; 4049 : 				draw_2d_circle (0.0, 0.0, radius, tsd_basic_colour);

  00684	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_basic_colour$[ebp]
  0068a	50		 push	 eax
  0068b	51		 push	 ecx
  0068c	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR _radius$17[ebp]
  00694	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00699	51		 push	 ecx
  0069a	0f 57 c0	 xorps	 xmm0, xmm0
  0069d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a2	51		 push	 ecx
  006a3	0f 57 c0	 xorps	 xmm0, xmm0
  006a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ab	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 4050 : 			}
; 4051 : 			else

  006b0	e9 ae 01 00 00	 jmp	 $LN27@draw_tacti
$LN26@draw_tacti:

; 4052 : 			{
; 4053 : 				set_2d_window_rotation (mfd_env, -air_radar.scan_datum);

  006b5	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  006bd	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  006c4	51		 push	 ecx
  006c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  006cf	50		 push	 eax
  006d0	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 4054 : 
; 4055 : 				draw_radar_arc (air_radar.scan_arc_size, radius, tsd_basic_colour);

  006d5	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_basic_colour$[ebp]
  006db	50		 push	 eax
  006dc	51		 push	 ecx
  006dd	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR _radius$17[ebp]
  006e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ea	51		 push	 ecx
  006eb	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  006f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f8	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 4056 : 
; 4057 : 				draw_2d_line (0.0, 0.0, 0.0, radius, tsd_basic_colour);

  006fd	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_basic_colour$[ebp]
  00703	50		 push	 eax
  00704	51		 push	 ecx
  00705	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR _radius$17[ebp]
  0070d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00712	51		 push	 ecx
  00713	0f 57 c0	 xorps	 xmm0, xmm0
  00716	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0071b	51		 push	 ecx
  0071c	0f 57 c0	 xorps	 xmm0, xmm0
  0071f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00724	51		 push	 ecx
  00725	0f 57 c0	 xorps	 xmm0, xmm0
  00728	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0072d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4058 : 
; 4059 : 				set_2d_window_rotation (mfd_env, -(air_radar.scan_datum - (air_radar.scan_arc_size * 0.5)));

  00732	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  0073a	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  00742	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0074a	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0074e	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00755	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00759	51		 push	 ecx
  0075a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0075f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00764	50		 push	 eax
  00765	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 4060 : 
; 4061 : 				draw_2d_line (0.0, 0.0, 0.0, radius, tsd_basic_colour);

  0076a	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_basic_colour$[ebp]
  00770	50		 push	 eax
  00771	51		 push	 ecx
  00772	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR _radius$17[ebp]
  0077a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077f	51		 push	 ecx
  00780	0f 57 c0	 xorps	 xmm0, xmm0
  00783	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00788	51		 push	 ecx
  00789	0f 57 c0	 xorps	 xmm0, xmm0
  0078c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00791	51		 push	 ecx
  00792	0f 57 c0	 xorps	 xmm0, xmm0
  00795	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4062 : 
; 4063 : 				set_2d_window_rotation (mfd_env, -(air_radar.scan_datum + (air_radar.scan_arc_size * 0.5)));

  0079f	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  007a7	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  007af	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  007b7	f2 0f 58 c1	 addsd	 xmm0, xmm1
  007bb	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  007c2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007c6	51		 push	 ecx
  007c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  007d1	50		 push	 eax
  007d2	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 4064 : 
; 4065 : 				draw_2d_line (0.0, 0.0, 0.0, radius, tsd_basic_colour);

  007d7	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_basic_colour$[ebp]
  007dd	50		 push	 eax
  007de	51		 push	 ecx
  007df	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR _radius$17[ebp]
  007e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ec	51		 push	 ecx
  007ed	0f 57 c0	 xorps	 xmm0, xmm0
  007f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f5	51		 push	 ecx
  007f6	0f 57 c0	 xorps	 xmm0, xmm0
  007f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007fe	51		 push	 ecx
  007ff	0f 57 c0	 xorps	 xmm0, xmm0
  00802	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00807	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4066 : 
; 4067 : 				set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  0080c	51		 push	 ecx
  0080d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00815	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081a	51		 push	 ecx
  0081b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00823	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00828	51		 push	 ecx
  00829	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00831	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00836	51		 push	 ecx
  00837	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0083f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00844	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00849	50		 push	 eax
  0084a	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 4068 : 
; 4069 : 				set_2d_window_rotation (mfd_env, 0.0);

  0084f	51		 push	 ecx
  00850	0f 57 c0	 xorps	 xmm0, xmm0
  00853	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00858	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0085d	50		 push	 eax
  0085e	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN27@draw_tacti:

; 4070 : 			}
; 4071 : 		}
; 4072 : 	}
; 4073 : 
; 4074 : 	////////////////////////////////////////
; 4075 : 	//
; 4076 : 	// waypoint route
; 4077 : 	//
; 4078 : 	////////////////////////////////////////
; 4079 : 
; 4080 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_TARGET && !default_damage.navigation_computer)

  00863	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  0086a	0f 84 e9 07 00
	00		 je	 $LN30@draw_tacti
  00870	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  00875	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  00878	83 e0 01	 and	 eax, 1
  0087b	0f 85 d8 07 00
	00		 jne	 $LN30@draw_tacti

; 4081 : 	{
; 4082 : 		entity
; 4083 : 			*wp1,
; 4084 : 			*wp2;
; 4085 : 
; 4086 : 		vec3d
; 4087 : 			wp1_rel_position,
; 4088 : 			wp2_rel_position;
; 4089 : 
; 4090 : 		rgb_colour waypoint_colour = MFD_COLOUR_YELLOW;

  00881	b8 04 00 00 00	 mov	 eax, 4
  00886	6b c8 0d	 imul	 ecx, eax, 13
  00889	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0088f	89 95 d8 fe ff
	ff		 mov	 DWORD PTR _waypoint_colour$12[ebp], edx

; 4091 : 		
; 4092 : 		if (tsd_underlay == TSD_UNDERLAY_MAP)

  00895	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 1
  0089c	75 0c		 jne	 SHORT $LN29@draw_tacti

; 4093 : 			waypoint_colour = tsd_basic_colour;		

  0089e	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_basic_colour$[ebp]
  008a4	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _waypoint_colour$12[ebp], eax
$LN29@draw_tacti:

; 4094 : 
; 4095 : 		wp1 = get_local_entity_first_waypoint (source);

  008aa	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  008b0	50		 push	 eax
  008b1	e8 00 00 00 00	 call	 ?get_local_entity_first_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_first_waypoint
  008b6	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _wp1$16[ebp], eax

; 4096 : 
; 4097 : 		if (wp1)

  008bc	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _wp1$16[ebp], 0
  008c3	0f 84 90 07 00
	00		 je	 $LN30@draw_tacti

; 4098 : 		{
; 4099 : 			set_2d_viewport_origin (mfd_env, u, v);

  008c9	51		 push	 ecx
  008ca	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  008d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d7	51		 push	 ecx
  008d8	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  008e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  008ea	50		 push	 eax
  008eb	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 4100 : 
; 4101 : 			set_2d_window_rotation (mfd_env, source_heading);

  008f0	51		 push	 ecx
  008f1	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  008f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00903	50		 push	 eax
  00904	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 4102 : 
; 4103 : 			//
; 4104 : 			// waypoint route
; 4105 : 			//
; 4106 : 
; 4107 : 			get_waypoint_display_position (source, wp1, &wp1_rel_position);

  00909	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _wp1_rel_position$14[ebp]
  0090f	50		 push	 eax
  00910	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$16[ebp]
  00916	51		 push	 ecx
  00917	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  0091d	52		 push	 edx
  0091e	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 4108 : 
; 4109 : 			wp1_rel_position.x = (wp1_rel_position.x - source_position->x) * scale;

  00923	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00929	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$14[ebp]
  00931	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00935	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0093d	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$14[ebp], xmm0

; 4110 : 			wp1_rel_position.z = (wp1_rel_position.z - source_position->z) * scale;

  00945	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  0094b	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$14[ebp+8]
  00953	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00958	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00960	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$14[ebp+8], xmm0

; 4111 : 
; 4112 : 			wp2 = get_local_entity_child_succ (wp1, LIST_TYPE_WAYPOINT);

  00968	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _wp1$16[ebp], 0
  0096f	74 10		 je	 SHORT $LN136@draw_tacti
  00971	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _wp1$16[ebp]
  00977	8b 08		 mov	 ecx, DWORD PTR [eax]
  00979	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv380[ebp], ecx
  0097f	eb 27		 jmp	 SHORT $LN137@draw_tacti
$LN136@draw_tacti:
  00981	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00987	81 c2 b6 00 00
	00		 add	 edx, 182		; 000000b6H
  0098d	52		 push	 edx
  0098e	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00993	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00998	50		 push	 eax
  00999	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0099e	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv380[ebp], 0
$LN137@draw_tacti:
  009a8	b9 01 00 00 00	 mov	 ecx, 1
  009ad	85 c9		 test	 ecx, ecx
  009af	74 0c		 je	 SHORT $LN138@draw_tacti
  009b1	c7 85 64 fe ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv388[ebp], 44 ; 0000002cH
  009bb	eb 27		 jmp	 SHORT $LN139@draw_tacti
$LN138@draw_tacti:
  009bd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  009c3	81 c2 b6 00 00
	00		 add	 edx, 182		; 000000b6H
  009c9	52		 push	 edx
  009ca	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  009cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  009d4	50		 push	 eax
  009d5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009da	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv388[ebp], 0
$LN139@draw_tacti:
  009e4	6a 2c		 push	 44			; 0000002cH
  009e6	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$16[ebp]
  009ec	51		 push	 ecx
  009ed	69 95 68 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv380[ebp], 180
  009f7	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR tv388[ebp]
  009fd	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00a04	ff d1		 call	 ecx
  00a06	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _wp2$15[ebp], eax
$LN2@draw_tacti:

; 4113 : 
; 4114 : 			while (wp2)

  00a0c	83 bd f4 fe ff
	ff 00		 cmp	 DWORD PTR _wp2$15[ebp], 0
  00a13	0f 84 70 02 00
	00		 je	 $LN3@draw_tacti

; 4115 : 			{
; 4116 : 				get_waypoint_display_position (source, wp2, &wp2_rel_position);

  00a19	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _wp2_rel_position$13[ebp]
  00a1f	50		 push	 eax
  00a20	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _wp2$15[ebp]
  00a26	51		 push	 ecx
  00a27	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  00a2d	52		 push	 edx
  00a2e	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 4117 : 
; 4118 : 				wp2_rel_position.x = (wp2_rel_position.x - source_position->x) * scale;

  00a33	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00a39	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$13[ebp]
  00a41	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00a45	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00a4d	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR _wp2_rel_position$13[ebp], xmm0

; 4119 : 				wp2_rel_position.z = (wp2_rel_position.z - source_position->z) * scale;

  00a55	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00a5b	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$13[ebp+8]
  00a63	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00a68	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00a70	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR _wp2_rel_position$13[ebp+8], xmm0

; 4120 : //VJ 030423 TSD render mod
; 4121 : 				if (draw_large_mfd)

  00a78	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00a7f	0f 84 98 00 00
	00		 je	 $LN31@draw_tacti

; 4122 : 				{
; 4123 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  00a85	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  00a8c	75 46		 jne	 SHORT $LN33@draw_tacti

; 4124 : 						draw_2d_half_thick_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, waypoint_colour);  // 2

  00a8e	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _waypoint_colour$12[ebp]
  00a94	50		 push	 eax
  00a95	51		 push	 ecx
  00a96	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$13[ebp+8]
  00a9e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa3	51		 push	 ecx
  00aa4	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$13[ebp]
  00aac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ab1	51		 push	 ecx
  00ab2	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$14[ebp+8]
  00aba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00abf	51		 push	 ecx
  00ac0	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$14[ebp]
  00ac8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00acd	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 4125 : 					else

  00ad2	eb 44		 jmp	 SHORT $LN34@draw_tacti
$LN33@draw_tacti:

; 4126 : 						draw_2d_half_thick_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, waypoint_colour);  // 5

  00ad4	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _waypoint_colour$12[ebp]
  00ada	50		 push	 eax
  00adb	51		 push	 ecx
  00adc	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$13[ebp+8]
  00ae4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ae9	51		 push	 ecx
  00aea	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$13[ebp]
  00af2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00af7	51		 push	 ecx
  00af8	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$14[ebp+8]
  00b00	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b05	51		 push	 ecx
  00b06	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$14[ebp]
  00b0e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b13	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN34@draw_tacti:

; 4127 : 				}
; 4128 : 				else

  00b18	e9 93 00 00 00	 jmp	 $LN36@draw_tacti
$LN31@draw_tacti:

; 4129 : 				{
; 4130 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  00b1d	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  00b24	75 46		 jne	 SHORT $LN35@draw_tacti

; 4131 : 						draw_2d_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, waypoint_colour);

  00b26	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _waypoint_colour$12[ebp]
  00b2c	50		 push	 eax
  00b2d	51		 push	 ecx
  00b2e	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$13[ebp+8]
  00b36	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b3b	51		 push	 ecx
  00b3c	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$13[ebp]
  00b44	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b49	51		 push	 ecx
  00b4a	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$14[ebp+8]
  00b52	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b57	51		 push	 ecx
  00b58	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$14[ebp]
  00b60	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b65	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4132 : 					else

  00b6a	eb 44		 jmp	 SHORT $LN36@draw_tacti
$LN35@draw_tacti:

; 4133 : 						draw_2d_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, waypoint_colour);

  00b6c	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _waypoint_colour$12[ebp]
  00b72	50		 push	 eax
  00b73	51		 push	 ecx
  00b74	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$13[ebp+8]
  00b7c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b81	51		 push	 ecx
  00b82	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$13[ebp]
  00b8a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b8f	51		 push	 ecx
  00b90	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$14[ebp+8]
  00b98	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b9d	51		 push	 ecx
  00b9e	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$14[ebp]
  00ba6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bab	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN36@draw_tacti:

; 4134 : 				}
; 4135 : 				wp1 = wp2;

  00bb0	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _wp2$15[ebp]
  00bb6	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _wp1$16[ebp], eax

; 4136 : 
; 4137 : 				wp1_rel_position = wp2_rel_position;

  00bbc	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _wp2_rel_position$13[ebp]
  00bc2	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _wp1_rel_position$14[ebp], eax
  00bc8	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _wp2_rel_position$13[ebp+4]
  00bce	89 8d ec fe ff
	ff		 mov	 DWORD PTR _wp1_rel_position$14[ebp+4], ecx
  00bd4	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR _wp2_rel_position$13[ebp+8]
  00bda	89 95 f0 fe ff
	ff		 mov	 DWORD PTR _wp1_rel_position$14[ebp+8], edx

; 4138 : 
; 4139 : 				wp2 = get_local_entity_child_succ (wp1, LIST_TYPE_WAYPOINT);

  00be0	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _wp1$16[ebp], 0
  00be7	74 10		 je	 SHORT $LN140@draw_tacti
  00be9	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _wp1$16[ebp]
  00bef	8b 08		 mov	 ecx, DWORD PTR [eax]
  00bf1	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv433[ebp], ecx
  00bf7	eb 27		 jmp	 SHORT $LN141@draw_tacti
$LN140@draw_tacti:
  00bf9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00bff	81 c2 d1 00 00
	00		 add	 edx, 209		; 000000d1H
  00c05	52		 push	 edx
  00c06	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c0b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00c10	50		 push	 eax
  00c11	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c16	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv433[ebp], 0
$LN141@draw_tacti:
  00c20	b9 01 00 00 00	 mov	 ecx, 1
  00c25	85 c9		 test	 ecx, ecx
  00c27	74 0c		 je	 SHORT $LN142@draw_tacti
  00c29	c7 85 64 fe ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv441[ebp], 44 ; 0000002cH
  00c33	eb 27		 jmp	 SHORT $LN143@draw_tacti
$LN142@draw_tacti:
  00c35	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00c3b	81 c2 d1 00 00
	00		 add	 edx, 209		; 000000d1H
  00c41	52		 push	 edx
  00c42	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c47	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00c4c	50		 push	 eax
  00c4d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c52	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv441[ebp], 0
$LN143@draw_tacti:
  00c5c	6a 2c		 push	 44			; 0000002cH
  00c5e	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$16[ebp]
  00c64	51		 push	 ecx
  00c65	69 95 68 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv433[ebp], 180
  00c6f	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR tv441[ebp]
  00c75	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00c7c	ff d1		 call	 ecx
  00c7e	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _wp2$15[ebp], eax

; 4140 : 			}

  00c84	e9 83 fd ff ff	 jmp	 $LN2@draw_tacti
$LN3@draw_tacti:

; 4141 : 
; 4142 : 			//
; 4143 : 			// waypoint markers
; 4144 : 			//
; 4145 : 
; 4146 : 			if (tsd_underlay == TSD_UNDERLAY_MAP)

  00c89	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 1
  00c90	75 16		 jne	 SHORT $LN37@draw_tacti

; 4147 : 				set_mono_font_colour (MFD_COLOUR_BLUE);

  00c92	b8 04 00 00 00	 mov	 eax, 4
  00c97	6b c8 0c	 imul	 ecx, eax, 12
  00c9a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ca0	52		 push	 edx
  00ca1	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4148 : 			else

  00ca6	eb 14		 jmp	 SHORT $LN38@draw_tacti
$LN37@draw_tacti:

; 4149 : 				set_mono_font_colour (MFD_COLOUR6);

  00ca8	b8 04 00 00 00	 mov	 eax, 4
  00cad	6b c8 05	 imul	 ecx, eax, 5
  00cb0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00cb6	52		 push	 edx
  00cb7	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN38@draw_tacti:

; 4150 : 
; 4151 : 			if (draw_large_mfd)

  00cbc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00cc3	74 09		 je	 SHORT $LN39@draw_tacti

; 4152 : 			{
; 4153 : 				set_mono_font_type (MONO_FONT_TYPE_7X12);

  00cc5	6a 05		 push	 5
  00cc7	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 4154 : 			}
; 4155 : 			else

  00ccc	eb 07		 jmp	 SHORT $LN40@draw_tacti
$LN39@draw_tacti:

; 4156 : 			{
; 4157 : 				set_mono_font_type (MONO_FONT_TYPE_5X7);

  00cce	6a 01		 push	 1
  00cd0	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN40@draw_tacti:

; 4158 : 			}
; 4159 : 
; 4160 : 			wp1 = get_local_entity_first_waypoint (source);

  00cd5	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00cdb	50		 push	 eax
  00cdc	e8 00 00 00 00	 call	 ?get_local_entity_first_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_first_waypoint
  00ce1	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _wp1$16[ebp], eax
$LN4@draw_tacti:

; 4161 : 
; 4162 : 			while (wp1)

  00ce7	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _wp1$16[ebp], 0
  00cee	0f 84 0e 03 00
	00		 je	 $LN5@draw_tacti

; 4163 : 			{
; 4164 : 				get_waypoint_display_position (source, wp1, &wp1_rel_position);

  00cf4	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _wp1_rel_position$14[ebp]
  00cfa	50		 push	 eax
  00cfb	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$16[ebp]
  00d01	51		 push	 ecx
  00d02	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  00d08	52		 push	 edx
  00d09	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 4165 : 
; 4166 : 				wp1_rel_position.x = (wp1_rel_position.x - source_position->x) * scale;

  00d0e	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00d14	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$14[ebp]
  00d1c	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00d20	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00d28	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$14[ebp], xmm0

; 4167 : 				wp1_rel_position.z = (wp1_rel_position.z - source_position->z) * scale;

  00d30	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00d36	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$14[ebp+8]
  00d3e	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00d43	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00d4b	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$14[ebp+8], xmm0

; 4168 : 
; 4169 : 				if (draw_large_mfd)

  00d53	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00d5a	0f 84 ac 00 00
	00		 je	 $LN41@draw_tacti

; 4170 : 				{
; 4171 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  00d60	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  00d67	75 2f		 jne	 SHORT $LN43@draw_tacti

; 4172 : 						draw_2d_mono_sprite (large_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, waypoint_colour); // 2

  00d69	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _waypoint_colour$12[ebp]
  00d6f	50		 push	 eax
  00d70	51		 push	 ecx
  00d71	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$14[ebp+8]
  00d79	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d7e	51		 push	 ecx
  00d7f	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$14[ebp]
  00d87	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d8c	68 00 00 00 00	 push	 OFFSET ?large_tsd_waypoint_marker@@3PADA
  00d91	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4173 : 					else

  00d96	eb 2d		 jmp	 SHORT $LN44@draw_tacti
$LN43@draw_tacti:

; 4174 : 						draw_2d_mono_sprite (large_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, waypoint_colour);  // 5

  00d98	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _waypoint_colour$12[ebp]
  00d9e	50		 push	 eax
  00d9f	51		 push	 ecx
  00da0	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$14[ebp+8]
  00da8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dad	51		 push	 ecx
  00dae	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$14[ebp]
  00db6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dbb	68 00 00 00 00	 push	 OFFSET ?large_tsd_waypoint_marker@@3PADA
  00dc0	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN44@draw_tacti:

; 4175 : 	
; 4176 : 					set_2d_mono_font_position (wp1_rel_position.x, wp1_rel_position.z);

  00dc5	51		 push	 ecx
  00dc6	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$14[ebp+8]
  00dce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dd3	51		 push	 ecx
  00dd4	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$14[ebp]
  00ddc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00de1	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4177 : 
; 4178 : 					set_mono_font_rel_position (-2.0, -4.0);

  00de6	51		 push	 ecx
  00de7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  00def	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00df4	51		 push	 ecx
  00df5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00dfd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e02	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4179 : 				}
; 4180 : 				else

  00e07	e9 a7 00 00 00	 jmp	 $LN42@draw_tacti
$LN41@draw_tacti:

; 4181 : 				{
; 4182 : //VJ 030423 TSD render mod
; 4183 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  00e0c	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  00e13	75 2f		 jne	 SHORT $LN45@draw_tacti

; 4184 : 						draw_2d_mono_sprite (small_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, waypoint_colour);

  00e15	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _waypoint_colour$12[ebp]
  00e1b	50		 push	 eax
  00e1c	51		 push	 ecx
  00e1d	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$14[ebp+8]
  00e25	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e2a	51		 push	 ecx
  00e2b	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$14[ebp]
  00e33	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e38	68 00 00 00 00	 push	 OFFSET ?small_tsd_waypoint_marker@@3PADA
  00e3d	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4185 : 					else

  00e42	eb 2d		 jmp	 SHORT $LN46@draw_tacti
$LN45@draw_tacti:

; 4186 : 						draw_2d_mono_sprite (small_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, waypoint_colour);

  00e44	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _waypoint_colour$12[ebp]
  00e4a	50		 push	 eax
  00e4b	51		 push	 ecx
  00e4c	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$14[ebp+8]
  00e54	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e59	51		 push	 ecx
  00e5a	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$14[ebp]
  00e62	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e67	68 00 00 00 00	 push	 OFFSET ?small_tsd_waypoint_marker@@3PADA
  00e6c	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN46@draw_tacti:

; 4187 : 
; 4188 : 					set_2d_mono_font_position (wp1_rel_position.x, wp1_rel_position.z);

  00e71	51		 push	 ecx
  00e72	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$14[ebp+8]
  00e7a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e7f	51		 push	 ecx
  00e80	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$14[ebp]
  00e88	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e8d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4189 : 
; 4190 : 					set_mono_font_rel_position (-2.0, -2.0);

  00e92	51		 push	 ecx
  00e93	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00e9b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ea0	51		 push	 ecx
  00ea1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00ea9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eae	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN42@draw_tacti:

; 4191 : 				}
; 4192 : 
; 4193 : 				print_mono_font_char (get_local_entity_char_value (wp1, CHAR_TYPE_TAG));

  00eb3	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _wp1$16[ebp], 0
  00eba	74 10		 je	 SHORT $LN144@draw_tacti
  00ebc	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _wp1$16[ebp]
  00ec2	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ec4	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv502[ebp], ecx
  00eca	eb 27		 jmp	 SHORT $LN145@draw_tacti
$LN144@draw_tacti:
  00ecc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00ed2	81 c2 07 01 00
	00		 add	 edx, 263		; 00000107H
  00ed8	52		 push	 edx
  00ed9	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ede	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00ee3	50		 push	 eax
  00ee4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ee9	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv502[ebp], 0
$LN145@draw_tacti:
  00ef3	b9 01 00 00 00	 mov	 ecx, 1
  00ef8	85 c9		 test	 ecx, ecx
  00efa	74 0c		 je	 SHORT $LN146@draw_tacti
  00efc	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv510[ebp], 0
  00f06	eb 27		 jmp	 SHORT $LN147@draw_tacti
$LN146@draw_tacti:
  00f08	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00f0e	81 c2 07 01 00
	00		 add	 edx, 263		; 00000107H
  00f14	52		 push	 edx
  00f15	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f1a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  00f1f	50		 push	 eax
  00f20	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f25	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv510[ebp], 0
$LN147@draw_tacti:
  00f2f	6a 00		 push	 0
  00f31	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$16[ebp]
  00f37	51		 push	 ecx
  00f38	8b 95 64 fe ff
	ff		 mov	 edx, DWORD PTR tv510[ebp]
  00f3e	c1 e2 02	 shl	 edx, 2
  00f41	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR tv502[ebp]
  00f47	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[edx+eax*8]
  00f4e	ff d1		 call	 ecx
  00f50	0f b6 d0	 movzx	 edx, al
  00f53	52		 push	 edx
  00f54	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 4194 : 
; 4195 : 				wp1 = get_local_entity_child_succ (wp1, LIST_TYPE_WAYPOINT);

  00f59	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _wp1$16[ebp], 0
  00f60	74 10		 je	 SHORT $LN148@draw_tacti
  00f62	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _wp1$16[ebp]
  00f68	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f6a	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv523[ebp], ecx
  00f70	eb 27		 jmp	 SHORT $LN149@draw_tacti
$LN148@draw_tacti:
  00f72	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00f78	81 c2 09 01 00
	00		 add	 edx, 265		; 00000109H
  00f7e	52		 push	 edx
  00f7f	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f84	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00f89	50		 push	 eax
  00f8a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f8f	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv523[ebp], 0
$LN149@draw_tacti:
  00f99	b9 01 00 00 00	 mov	 ecx, 1
  00f9e	85 c9		 test	 ecx, ecx
  00fa0	74 0c		 je	 SHORT $LN150@draw_tacti
  00fa2	c7 85 64 fe ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv531[ebp], 44 ; 0000002cH
  00fac	eb 27		 jmp	 SHORT $LN151@draw_tacti
$LN150@draw_tacti:
  00fae	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00fb4	81 c2 09 01 00
	00		 add	 edx, 265		; 00000109H
  00fba	52		 push	 edx
  00fbb	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00fc0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00fc5	50		 push	 eax
  00fc6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00fcb	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv531[ebp], 0
$LN151@draw_tacti:
  00fd5	6a 2c		 push	 44			; 0000002cH
  00fd7	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$16[ebp]
  00fdd	51		 push	 ecx
  00fde	69 95 68 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv523[ebp], 180
  00fe8	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR tv531[ebp]
  00fee	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00ff5	ff d1		 call	 ecx
  00ff7	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _wp1$16[ebp], eax

; 4196 : 			}

  00ffd	e9 e5 fc ff ff	 jmp	 $LN4@draw_tacti
$LN5@draw_tacti:

; 4197 : 
; 4198 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  01002	51		 push	 ecx
  01003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0100b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01010	51		 push	 ecx
  01011	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  01019	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0101e	51		 push	 ecx
  0101f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  01027	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0102c	51		 push	 ecx
  0102d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  01035	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0103a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0103f	50		 push	 eax
  01040	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 4199 : 
; 4200 : 			set_2d_window_rotation (mfd_env, 0.0);

  01045	51		 push	 ecx
  01046	0f 57 c0	 xorps	 xmm0, xmm0
  01049	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0104e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01053	50		 push	 eax
  01054	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN30@draw_tacti:

; 4201 : 		}
; 4202 : 	}
; 4203 : 
; 4204 : 	////////////////////////////////////////
; 4205 : 	//
; 4206 : 	// targets
; 4207 : 	//
; 4208 : 	////////////////////////////////////////
; 4209 : 
; 4210 : 	{
; 4211 : 		entity
; 4212 : 			*target,
; 4213 : 			*launched_weapon;
; 4214 : 
; 4215 : 		vec3d
; 4216 : 			*target_position;
; 4217 : 
; 4218 : 		threat_types
; 4219 : 			threat_type;
; 4220 : 
; 4221 : 		int
; 4222 : 			draw_threat_line;
; 4223 : 
; 4224 : 		float
; 4225 : 			air_scan_range,
; 4226 : 			dx,
; 4227 : 			dy;
; 4228 : 
; 4229 : 		if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)

  01059	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
  01060	0f 84 28 11 00
	00		 je	 $LN47@draw_tacti

; 4230 : 		{
; 4231 : //			draw_pfzs();
; 4232 : 			
; 4233 : 			tsd_threat_line_flash_timer -= get_delta_time ();

  01066	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_threat_line_flash_timer@@3MA
  0106e	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  01076	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_threat_line_flash_timer@@3MA, xmm0

; 4234 : 
; 4235 : 			if (tsd_threat_line_flash_timer < 0.0)

  0107e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?tsd_threat_line_flash_timer@@3MA
  01086	0f 57 c9	 xorps	 xmm1, xmm1
  01089	66 0f 2f c8	 comisd	 xmm1, xmm0
  0108d	76 1d		 jbe	 SHORT $LN48@draw_tacti

; 4236 : 			{
; 4237 : 				tsd_threat_line_flash_timer = TSD_THREAT_LINE_FLASH_RATE;

  0108f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  01097	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_threat_line_flash_timer@@3MA, xmm0

; 4238 : 
; 4239 : 				tsd_draw_threat_line_status ^= 1;

  0109f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tsd_draw_threat_line_status@@3HA
  010a4	83 f0 01	 xor	 eax, 1
  010a7	a3 00 00 00 00	 mov	 DWORD PTR ?tsd_draw_threat_line_status@@3HA, eax
$LN48@draw_tacti:

; 4240 : 			}
; 4241 : 
; 4242 : 			set_2d_viewport_origin (mfd_env, u, v);

  010ac	51		 push	 ecx
  010ad	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  010b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010ba	51		 push	 ecx
  010bb	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  010c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  010cd	50		 push	 eax
  010ce	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 4243 : 
; 4244 : 			set_2d_window_rotation (mfd_env, source_heading);

  010d3	51		 push	 ecx
  010d4	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  010dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010e1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  010e6	50		 push	 eax
  010e7	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 4245 : 
; 4246 : 			//
; 4247 : 			// display enemy SAM and AAA threat range circles
; 4248 : 			//
; 4249 : 
; 4250 : 			target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  010ec	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  010f3	74 10		 je	 SHORT $LN152@draw_tacti
  010f5	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  010fb	8b 08		 mov	 ecx, DWORD PTR [eax]
  010fd	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv560[ebp], ecx
  01103	eb 27		 jmp	 SHORT $LN153@draw_tacti
$LN152@draw_tacti:
  01105	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  0110b	81 c2 40 01 00
	00		 add	 edx, 320		; 00000140H
  01111	52		 push	 edx
  01112	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01117	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0111c	50		 push	 eax
  0111d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01122	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv560[ebp], 0
$LN153@draw_tacti:
  0112c	b9 01 00 00 00	 mov	 ecx, 1
  01131	85 c9		 test	 ecx, ecx
  01133	74 0c		 je	 SHORT $LN154@draw_tacti
  01135	c7 85 64 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv568[ebp], 18 ; 00000012H
  0113f	eb 27		 jmp	 SHORT $LN155@draw_tacti
$LN154@draw_tacti:
  01141	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01147	81 c2 40 01 00
	00		 add	 edx, 320		; 00000140H
  0114d	52		 push	 edx
  0114e	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01153	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01158	50		 push	 eax
  01159	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0115e	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv568[ebp], 0
$LN155@draw_tacti:
  01168	6a 12		 push	 18			; 00000012H
  0116a	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  01170	51		 push	 ecx
  01171	69 95 68 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv560[ebp], 180
  0117b	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR tv568[ebp]
  01181	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01188	ff d1		 call	 ecx
  0118a	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _target$11[ebp], eax
$LN6@draw_tacti:

; 4251 : 
; 4252 : 			while (target)

  01190	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR _target$11[ebp], 0
  01197	0f 84 82 04 00
	00		 je	 $LN7@draw_tacti

; 4253 : 			{
; 4254 : 				if (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  0119d	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR _target$11[ebp], 0
  011a4	74 10		 je	 SHORT $LN156@draw_tacti
  011a6	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _target$11[ebp]
  011ac	8b 08		 mov	 ecx, DWORD PTR [eax]
  011ae	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv580[ebp], ecx
  011b4	eb 20		 jmp	 SHORT $LN157@draw_tacti
$LN156@draw_tacti:
  011b6	68 9e 10 00 00	 push	 4254			; 0000109eH
  011bb	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  011c0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  011c6	52		 push	 edx
  011c7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  011cc	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv580[ebp], 0
$LN157@draw_tacti:
  011d6	b8 01 00 00 00	 mov	 eax, 1
  011db	85 c0		 test	 eax, eax
  011dd	74 0c		 je	 SHORT $LN158@draw_tacti
  011df	c7 85 64 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv587[ebp], 66 ; 00000042H
  011e9	eb 20		 jmp	 SHORT $LN159@draw_tacti
$LN158@draw_tacti:
  011eb	68 9e 10 00 00	 push	 4254			; 0000109eH
  011f0	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  011f5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  011fb	51		 push	 ecx
  011fc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01201	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv587[ebp], 0
$LN159@draw_tacti:
  0120b	6a 42		 push	 66			; 00000042H
  0120d	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _target$11[ebp]
  01213	52		 push	 edx
  01214	69 85 68 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv580[ebp], 1116
  0121e	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR tv587[ebp]
  01224	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0122b	ff d2		 call	 edx
  0122d	85 c0		 test	 eax, eax
  0122f	0f 85 41 03 00
	00		 jne	 $LN51@draw_tacti

; 4255 : 				{
; 4256 : 					if (source_side != get_local_entity_int_value (target, INT_TYPE_SIDE))

  01235	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR _target$11[ebp], 0
  0123c	74 10		 je	 SHORT $LN160@draw_tacti
  0123e	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _target$11[ebp]
  01244	8b 08		 mov	 ecx, DWORD PTR [eax]
  01246	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv599[ebp], ecx
  0124c	eb 20		 jmp	 SHORT $LN161@draw_tacti
$LN160@draw_tacti:
  0124e	68 a0 10 00 00	 push	 4256			; 000010a0H
  01253	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01258	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0125e	52		 push	 edx
  0125f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01264	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv599[ebp], 0
$LN161@draw_tacti:
  0126e	b8 01 00 00 00	 mov	 eax, 1
  01273	85 c0		 test	 eax, eax
  01275	74 0c		 je	 SHORT $LN162@draw_tacti
  01277	c7 85 64 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv606[ebp], 187 ; 000000bbH
  01281	eb 20		 jmp	 SHORT $LN163@draw_tacti
$LN162@draw_tacti:
  01283	68 a0 10 00 00	 push	 4256			; 000010a0H
  01288	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0128d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01293	51		 push	 ecx
  01294	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01299	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv606[ebp], 0
$LN163@draw_tacti:
  012a3	68 bb 00 00 00	 push	 187			; 000000bbH
  012a8	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _target$11[ebp]
  012ae	52		 push	 edx
  012af	69 85 68 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv599[ebp], 1116
  012b9	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR tv606[ebp]
  012bf	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  012c6	ff d2		 call	 edx
  012c8	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  012ce	0f 84 a2 02 00
	00		 je	 $LN51@draw_tacti

; 4257 : 					{
; 4258 : 						threat_type = (threat_types) get_local_entity_int_value (target, INT_TYPE_THREAT_TYPE);

  012d4	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR _target$11[ebp], 0
  012db	74 10		 je	 SHORT $LN164@draw_tacti
  012dd	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _target$11[ebp]
  012e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  012e5	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv619[ebp], ecx
  012eb	eb 27		 jmp	 SHORT $LN165@draw_tacti
$LN164@draw_tacti:
  012ed	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  012f3	81 c2 48 01 00
	00		 add	 edx, 328		; 00000148H
  012f9	52		 push	 edx
  012fa	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  012ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01304	50		 push	 eax
  01305	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0130a	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv619[ebp], 0
$LN165@draw_tacti:
  01314	b9 01 00 00 00	 mov	 ecx, 1
  01319	85 c9		 test	 ecx, ecx
  0131b	74 0c		 je	 SHORT $LN166@draw_tacti
  0131d	c7 85 64 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv627[ebp], 233 ; 000000e9H
  01327	eb 27		 jmp	 SHORT $LN167@draw_tacti
$LN166@draw_tacti:
  01329	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  0132f	81 c2 48 01 00
	00		 add	 edx, 328		; 00000148H
  01335	52		 push	 edx
  01336	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0133b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01340	50		 push	 eax
  01341	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01346	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv627[ebp], 0
$LN167@draw_tacti:
  01350	68 e9 00 00 00	 push	 233			; 000000e9H
  01355	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _target$11[ebp]
  0135b	51		 push	 ecx
  0135c	69 95 68 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv619[ebp], 1116
  01366	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR tv627[ebp]
  0136c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  01373	ff d1		 call	 ecx
  01375	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _threat_type$8[ebp], eax

; 4259 : 
; 4260 : 						if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA))

  0137b	83 bd c8 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$8[ebp], 5
  01382	74 0d		 je	 SHORT $LN52@draw_tacti
  01384	83 bd c8 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$8[ebp], 6
  0138b	0f 85 e5 01 00
	00		 jne	 $LN51@draw_tacti
$LN52@draw_tacti:

; 4261 : 						{
; 4262 : 							target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  01391	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR _target$11[ebp], 0
  01398	74 10		 je	 SHORT $LN168@draw_tacti
  0139a	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _target$11[ebp]
  013a0	8b 08		 mov	 ecx, DWORD PTR [eax]
  013a2	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv641[ebp], ecx
  013a8	eb 27		 jmp	 SHORT $LN169@draw_tacti
$LN168@draw_tacti:
  013aa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  013b0	81 c2 4c 01 00
	00		 add	 edx, 332		; 0000014cH
  013b6	52		 push	 edx
  013b7	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  013bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  013c1	50		 push	 eax
  013c2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  013c7	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv641[ebp], 0
$LN169@draw_tacti:
  013d1	b9 01 00 00 00	 mov	 ecx, 1
  013d6	85 c9		 test	 ecx, ecx
  013d8	74 0c		 je	 SHORT $LN170@draw_tacti
  013da	c7 85 64 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv649[ebp], 8
  013e4	eb 27		 jmp	 SHORT $LN171@draw_tacti
$LN170@draw_tacti:
  013e6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  013ec	81 c2 4c 01 00
	00		 add	 edx, 332		; 0000014cH
  013f2	52		 push	 edx
  013f3	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  013f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  013fd	50		 push	 eax
  013fe	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01403	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv649[ebp], 0
$LN171@draw_tacti:
  0140d	6a 08		 push	 8
  0140f	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _target$11[ebp]
  01415	51		 push	 ecx
  01416	6b 95 68 fe ff
	ff 60		 imul	 edx, DWORD PTR tv641[ebp], 96
  0141d	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR tv649[ebp]
  01423	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0142a	ff d1		 call	 ecx
  0142c	89 85 cc fe ff
	ff		 mov	 DWORD PTR _target_position$9[ebp], eax

; 4263 : 
; 4264 : 							dx = (target_position->x - source_position->x) * scale;

  01432	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target_position$9[ebp]
  01438	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  0143e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01442	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  01446	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0144e	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR _dx$5[ebp], xmm0

; 4265 : 							dy = (target_position->z - source_position->z) * scale;

  01456	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target_position$9[ebp]
  0145c	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01462	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01467	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0146c	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01474	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR _dy$4[ebp], xmm0

; 4266 : 
; 4267 : 							air_scan_range = get_local_entity_float_value (target, FLOAT_TYPE_AIR_SCAN_RANGE) * scale;

  0147c	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR _target$11[ebp], 0
  01483	74 10		 je	 SHORT $LN172@draw_tacti
  01485	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _target$11[ebp]
  0148b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0148d	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv669[ebp], ecx
  01493	eb 27		 jmp	 SHORT $LN173@draw_tacti
$LN172@draw_tacti:
  01495	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  0149b	81 c2 51 01 00
	00		 add	 edx, 337		; 00000151H
  014a1	52		 push	 edx
  014a2	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  014a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  014ac	50		 push	 eax
  014ad	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  014b2	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv669[ebp], 0
$LN173@draw_tacti:
  014bc	b9 01 00 00 00	 mov	 ecx, 1
  014c1	85 c9		 test	 ecx, ecx
  014c3	74 0c		 je	 SHORT $LN174@draw_tacti
  014c5	c7 85 64 fe ff
	ff 05 00 00 00	 mov	 DWORD PTR tv677[ebp], 5
  014cf	eb 27		 jmp	 SHORT $LN175@draw_tacti
$LN174@draw_tacti:
  014d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  014d7	81 c2 51 01 00
	00		 add	 edx, 337		; 00000151H
  014dd	52		 push	 edx
  014de	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  014e3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  014e8	50		 push	 eax
  014e9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  014ee	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv677[ebp], 0
$LN175@draw_tacti:
  014f8	6a 05		 push	 5
  014fa	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _target$11[ebp]
  01500	51		 push	 ecx
  01501	69 95 68 fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv669[ebp], 700
  0150b	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR tv677[ebp]
  01511	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  01518	ff d1		 call	 ecx
  0151a	d9 9d 60 fe ff
	ff		 fstp	 DWORD PTR tv1708[ebp]
  01520	f3 0f 10 85 60
	fe ff ff	 movss	 xmm0, DWORD PTR tv1708[ebp]
  01528	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01530	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _air_scan_range$6[ebp], xmm0

; 4268 : 
; 4269 : 							draw_2d_circle (dx, dy, air_scan_range, MFD_COLOUR_DARK_RED);

  01538	b8 04 00 00 00	 mov	 eax, 4
  0153d	6b c8 12	 imul	 ecx, eax, 18
  01540	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01546	52		 push	 edx
  01547	51		 push	 ecx
  01548	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR _air_scan_range$6[ebp]
  01550	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01555	51		 push	 ecx
  01556	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$4[ebp]
  0155e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01563	51		 push	 ecx
  01564	f3 0f 10 85 bc
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$5[ebp]
  0156c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01571	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle
$LN51@draw_tacti:

; 4270 : 						}
; 4271 : 					}
; 4272 : 				}
; 4273 : 
; 4274 : 				target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  01576	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR _target$11[ebp], 0
  0157d	74 10		 je	 SHORT $LN176@draw_tacti
  0157f	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _target$11[ebp]
  01585	8b 08		 mov	 ecx, DWORD PTR [eax]
  01587	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv696[ebp], ecx
  0158d	eb 27		 jmp	 SHORT $LN177@draw_tacti
$LN176@draw_tacti:
  0158f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01595	81 c2 58 01 00
	00		 add	 edx, 344		; 00000158H
  0159b	52		 push	 edx
  0159c	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  015a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  015a6	50		 push	 eax
  015a7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  015ac	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv696[ebp], 0
$LN177@draw_tacti:
  015b6	b9 01 00 00 00	 mov	 ecx, 1
  015bb	85 c9		 test	 ecx, ecx
  015bd	74 0c		 je	 SHORT $LN178@draw_tacti
  015bf	c7 85 64 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv704[ebp], 18 ; 00000012H
  015c9	eb 27		 jmp	 SHORT $LN179@draw_tacti
$LN178@draw_tacti:
  015cb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  015d1	81 c2 58 01 00
	00		 add	 edx, 344		; 00000158H
  015d7	52		 push	 edx
  015d8	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  015dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  015e2	50		 push	 eax
  015e3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  015e8	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv704[ebp], 0
$LN179@draw_tacti:
  015f2	6a 12		 push	 18			; 00000012H
  015f4	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _target$11[ebp]
  015fa	51		 push	 ecx
  015fb	69 95 68 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv696[ebp], 180
  01605	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR tv704[ebp]
  0160b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01612	ff d1		 call	 ecx
  01614	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _target$11[ebp], eax

; 4275 : 			}

  0161a	e9 71 fb ff ff	 jmp	 $LN6@draw_tacti
$LN7@draw_tacti:

; 4276 : 
; 4277 : 			//
; 4278 : 			// display all gunship targets (do not show ground radar clutter)
; 4279 : 			//
; 4280 : 
; 4281 : 			target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  0161f	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01626	74 10		 je	 SHORT $LN180@draw_tacti
  01628	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0162e	8b 08		 mov	 ecx, DWORD PTR [eax]
  01630	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv716[ebp], ecx
  01636	eb 27		 jmp	 SHORT $LN181@draw_tacti
$LN180@draw_tacti:
  01638	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  0163e	81 c2 5f 01 00
	00		 add	 edx, 351		; 0000015fH
  01644	52		 push	 edx
  01645	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0164a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0164f	50		 push	 eax
  01650	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01655	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv716[ebp], 0
$LN181@draw_tacti:
  0165f	b9 01 00 00 00	 mov	 ecx, 1
  01664	85 c9		 test	 ecx, ecx
  01666	74 0c		 je	 SHORT $LN182@draw_tacti
  01668	c7 85 64 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv724[ebp], 18 ; 00000012H
  01672	eb 27		 jmp	 SHORT $LN183@draw_tacti
$LN182@draw_tacti:
  01674	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  0167a	81 c2 5f 01 00
	00		 add	 edx, 351		; 0000015fH
  01680	52		 push	 edx
  01681	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01686	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0168b	50		 push	 eax
  0168c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01691	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv724[ebp], 0
$LN183@draw_tacti:
  0169b	6a 12		 push	 18			; 00000012H
  0169d	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  016a3	51		 push	 ecx
  016a4	69 95 68 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv716[ebp], 180
  016ae	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR tv724[ebp]
  016b4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  016bb	ff d1		 call	 ecx
  016bd	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _target$11[ebp], eax
$LN8@draw_tacti:

; 4282 : 
; 4283 : 			while (target)

  016c3	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR _target$11[ebp], 0
  016ca	0f 84 96 01 00
	00		 je	 $LN9@draw_tacti

; 4284 : 			{
; 4285 : 				if (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  016d0	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR _target$11[ebp], 0
  016d7	74 10		 je	 SHORT $LN184@draw_tacti
  016d9	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _target$11[ebp]
  016df	8b 08		 mov	 ecx, DWORD PTR [eax]
  016e1	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv736[ebp], ecx
  016e7	eb 20		 jmp	 SHORT $LN185@draw_tacti
$LN184@draw_tacti:
  016e9	68 bd 10 00 00	 push	 4285			; 000010bdH
  016ee	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  016f3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  016f9	52		 push	 edx
  016fa	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  016ff	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv736[ebp], 0
$LN185@draw_tacti:
  01709	b8 01 00 00 00	 mov	 eax, 1
  0170e	85 c0		 test	 eax, eax
  01710	74 0c		 je	 SHORT $LN186@draw_tacti
  01712	c7 85 64 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv743[ebp], 66 ; 00000042H
  0171c	eb 20		 jmp	 SHORT $LN187@draw_tacti
$LN186@draw_tacti:
  0171e	68 bd 10 00 00	 push	 4285			; 000010bdH
  01723	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01728	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0172e	51		 push	 ecx
  0172f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01734	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv743[ebp], 0
$LN187@draw_tacti:
  0173e	6a 42		 push	 66			; 00000042H
  01740	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _target$11[ebp]
  01746	52		 push	 edx
  01747	69 85 68 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv736[ebp], 1116
  01751	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR tv743[ebp]
  01757	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0175e	ff d2		 call	 edx
  01760	85 c0		 test	 eax, eax
  01762	75 59		 jne	 SHORT $LN55@draw_tacti

; 4286 : 				{
; 4287 : 					//VJ 030423 TSD render mod
; 4288 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  01764	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  0176b	75 29		 jne	 SHORT $LN54@draw_tacti

; 4289 : 						draw_radar_target_symbol (target, source_position, scale, FALSE, FALSE, FALSE);

  0176d	6a 00		 push	 0
  0176f	6a 00		 push	 0
  01771	6a 00		 push	 0
  01773	51		 push	 ecx
  01774	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  0177c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01781	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  01787	50		 push	 eax
  01788	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _target$11[ebp]
  0178e	51		 push	 ecx
  0178f	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z ; draw_radar_target_symbol

; 4290 : 					else

  01794	eb 27		 jmp	 SHORT $LN55@draw_tacti
$LN54@draw_tacti:

; 4291 : 						draw_radar_target_symbol (target, source_position, scale, FALSE, TRUE, FALSE);

  01796	6a 00		 push	 0
  01798	6a 01		 push	 1
  0179a	6a 00		 push	 0
  0179c	51		 push	 ecx
  0179d	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  017a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017aa	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  017b0	50		 push	 eax
  017b1	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _target$11[ebp]
  017b7	51		 push	 ecx
  017b8	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z ; draw_radar_target_symbol
$LN55@draw_tacti:

; 4292 : 				}
; 4293 : 
; 4294 : 				target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  017bd	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR _target$11[ebp], 0
  017c4	74 10		 je	 SHORT $LN188@draw_tacti
  017c6	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _target$11[ebp]
  017cc	8b 08		 mov	 ecx, DWORD PTR [eax]
  017ce	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv769[ebp], ecx
  017d4	eb 27		 jmp	 SHORT $LN189@draw_tacti
$LN188@draw_tacti:
  017d6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  017dc	81 c2 6c 01 00
	00		 add	 edx, 364		; 0000016cH
  017e2	52		 push	 edx
  017e3	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  017e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  017ed	50		 push	 eax
  017ee	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  017f3	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv769[ebp], 0
$LN189@draw_tacti:
  017fd	b9 01 00 00 00	 mov	 ecx, 1
  01802	85 c9		 test	 ecx, ecx
  01804	74 0c		 je	 SHORT $LN190@draw_tacti
  01806	c7 85 64 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv777[ebp], 18 ; 00000012H
  01810	eb 27		 jmp	 SHORT $LN191@draw_tacti
$LN190@draw_tacti:
  01812	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01818	81 c2 6c 01 00
	00		 add	 edx, 364		; 0000016cH
  0181e	52		 push	 edx
  0181f	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01824	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01829	50		 push	 eax
  0182a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0182f	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv777[ebp], 0
$LN191@draw_tacti:
  01839	6a 12		 push	 18			; 00000012H
  0183b	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _target$11[ebp]
  01841	51		 push	 ecx
  01842	69 95 68 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv769[ebp], 180
  0184c	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR tv777[ebp]
  01852	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01859	ff d1		 call	 ecx
  0185b	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _target$11[ebp], eax

; 4295 : 			}

  01861	e9 5d fe ff ff	 jmp	 $LN8@draw_tacti
$LN9@draw_tacti:

; 4296 : 
; 4297 : 			//
; 4298 : 			// draw selected target last
; 4299 : 			//
; 4300 : 
; 4301 : 			if (source_target)

  01866	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _source_target$[ebp], 0
  0186d	74 59		 je	 SHORT $LN58@draw_tacti

; 4302 : 			{
; 4303 : 				//VJ 030423 TSD render mod
; 4304 : 				if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  0186f	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  01876	75 29		 jne	 SHORT $LN57@draw_tacti

; 4305 : 					draw_radar_target_symbol (source_target, source_position, scale, TRUE, FALSE, FALSE);

  01878	6a 00		 push	 0
  0187a	6a 00		 push	 0
  0187c	6a 01		 push	 1
  0187e	51		 push	 ecx
  0187f	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  01887	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0188c	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  01892	50		 push	 eax
  01893	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_target$[ebp]
  01899	51		 push	 ecx
  0189a	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z ; draw_radar_target_symbol

; 4306 : 				else

  0189f	eb 27		 jmp	 SHORT $LN58@draw_tacti
$LN57@draw_tacti:

; 4307 : 					draw_radar_target_symbol (source_target, source_position, scale, TRUE, TRUE, FALSE);

  018a1	6a 00		 push	 0
  018a3	6a 01		 push	 1
  018a5	6a 01		 push	 1
  018a7	51		 push	 ecx
  018a8	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  018b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018b5	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  018bb	50		 push	 eax
  018bc	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_target$[ebp]
  018c2	51		 push	 ecx
  018c3	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z ; draw_radar_target_symbol
$LN58@draw_tacti:

; 4308 : 			}
; 4309 : 
; 4310 : 			//
; 4311 : 			// draw threat line if gunship is targetted (flash if missile fired)
; 4312 : 			//
; 4313 : 
; 4314 : 			target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  018c8	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  018cf	74 10		 je	 SHORT $LN192@draw_tacti
  018d1	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  018d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  018d9	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv803[ebp], ecx
  018df	eb 27		 jmp	 SHORT $LN193@draw_tacti
$LN192@draw_tacti:
  018e1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  018e7	81 c2 80 01 00
	00		 add	 edx, 384		; 00000180H
  018ed	52		 push	 edx
  018ee	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  018f3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  018f8	50		 push	 eax
  018f9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  018fe	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv803[ebp], 0
$LN193@draw_tacti:
  01908	b9 01 00 00 00	 mov	 ecx, 1
  0190d	85 c9		 test	 ecx, ecx
  0190f	74 0c		 je	 SHORT $LN194@draw_tacti
  01911	c7 85 64 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv811[ebp], 18 ; 00000012H
  0191b	eb 27		 jmp	 SHORT $LN195@draw_tacti
$LN194@draw_tacti:
  0191d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01923	81 c2 80 01 00
	00		 add	 edx, 384		; 00000180H
  01929	52		 push	 edx
  0192a	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0192f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01934	50		 push	 eax
  01935	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0193a	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv811[ebp], 0
$LN195@draw_tacti:
  01944	6a 12		 push	 18			; 00000012H
  01946	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  0194c	51		 push	 ecx
  0194d	69 95 68 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv803[ebp], 180
  01957	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR tv811[ebp]
  0195d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01964	ff d1		 call	 ecx
  01966	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _target$11[ebp], eax
$LN10@draw_tacti:

; 4315 : 
; 4316 : 			while (target)

  0196c	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR _target$11[ebp], 0
  01973	0f 84 be 07 00
	00		 je	 $LN11@draw_tacti

; 4317 : 			{
; 4318 : 				if (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  01979	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR _target$11[ebp], 0
  01980	74 10		 je	 SHORT $LN196@draw_tacti
  01982	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _target$11[ebp]
  01988	8b 08		 mov	 ecx, DWORD PTR [eax]
  0198a	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv823[ebp], ecx
  01990	eb 20		 jmp	 SHORT $LN197@draw_tacti
$LN196@draw_tacti:
  01992	68 de 10 00 00	 push	 4318			; 000010deH
  01997	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0199c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  019a2	52		 push	 edx
  019a3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  019a8	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv823[ebp], 0
$LN197@draw_tacti:
  019b2	b8 01 00 00 00	 mov	 eax, 1
  019b7	85 c0		 test	 eax, eax
  019b9	74 0c		 je	 SHORT $LN198@draw_tacti
  019bb	c7 85 64 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv830[ebp], 66 ; 00000042H
  019c5	eb 20		 jmp	 SHORT $LN199@draw_tacti
$LN198@draw_tacti:
  019c7	68 de 10 00 00	 push	 4318			; 000010deH
  019cc	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  019d1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  019d7	51		 push	 ecx
  019d8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  019dd	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv830[ebp], 0
$LN199@draw_tacti:
  019e7	6a 42		 push	 66			; 00000042H
  019e9	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _target$11[ebp]
  019ef	52		 push	 edx
  019f0	69 85 68 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv823[ebp], 1116
  019fa	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR tv830[ebp]
  01a00	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01a07	ff d2		 call	 edx
  01a09	85 c0		 test	 eax, eax
  01a0b	0f 85 7d 06 00
	00		 jne	 $LN67@draw_tacti

; 4319 : 				{
; 4320 : 					if (source_side != get_local_entity_int_value (target, INT_TYPE_SIDE))

  01a11	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR _target$11[ebp], 0
  01a18	74 10		 je	 SHORT $LN200@draw_tacti
  01a1a	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _target$11[ebp]
  01a20	8b 08		 mov	 ecx, DWORD PTR [eax]
  01a22	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv842[ebp], ecx
  01a28	eb 20		 jmp	 SHORT $LN201@draw_tacti
$LN200@draw_tacti:
  01a2a	68 e0 10 00 00	 push	 4320			; 000010e0H
  01a2f	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01a34	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01a3a	52		 push	 edx
  01a3b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01a40	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv842[ebp], 0
$LN201@draw_tacti:
  01a4a	b8 01 00 00 00	 mov	 eax, 1
  01a4f	85 c0		 test	 eax, eax
  01a51	74 0c		 je	 SHORT $LN202@draw_tacti
  01a53	c7 85 64 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv849[ebp], 187 ; 000000bbH
  01a5d	eb 20		 jmp	 SHORT $LN203@draw_tacti
$LN202@draw_tacti:
  01a5f	68 e0 10 00 00	 push	 4320			; 000010e0H
  01a64	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01a69	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01a6f	51		 push	 ecx
  01a70	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01a75	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv849[ebp], 0
$LN203@draw_tacti:
  01a7f	68 bb 00 00 00	 push	 187			; 000000bbH
  01a84	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _target$11[ebp]
  01a8a	52		 push	 edx
  01a8b	69 85 68 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv842[ebp], 1116
  01a95	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR tv849[ebp]
  01a9b	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01aa2	ff d2		 call	 edx
  01aa4	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  01aaa	0f 84 de 05 00
	00		 je	 $LN67@draw_tacti

; 4321 : 					{
; 4322 : 						if (get_local_entity_int_value (target, INT_TYPE_RADAR_ON))

  01ab0	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR _target$11[ebp], 0
  01ab7	74 10		 je	 SHORT $LN204@draw_tacti
  01ab9	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _target$11[ebp]
  01abf	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ac1	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv861[ebp], ecx
  01ac7	eb 20		 jmp	 SHORT $LN205@draw_tacti
$LN204@draw_tacti:
  01ac9	68 e2 10 00 00	 push	 4322			; 000010e2H
  01ace	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01ad3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01ad9	52		 push	 edx
  01ada	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01adf	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv861[ebp], 0
$LN205@draw_tacti:
  01ae9	b8 01 00 00 00	 mov	 eax, 1
  01aee	85 c0		 test	 eax, eax
  01af0	74 0c		 je	 SHORT $LN206@draw_tacti
  01af2	c7 85 64 fe ff
	ff a9 00 00 00	 mov	 DWORD PTR tv868[ebp], 169 ; 000000a9H
  01afc	eb 20		 jmp	 SHORT $LN207@draw_tacti
$LN206@draw_tacti:
  01afe	68 e2 10 00 00	 push	 4322			; 000010e2H
  01b03	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01b08	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01b0e	51		 push	 ecx
  01b0f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01b14	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv868[ebp], 0
$LN207@draw_tacti:
  01b1e	68 a9 00 00 00	 push	 169			; 000000a9H
  01b23	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _target$11[ebp]
  01b29	52		 push	 edx
  01b2a	69 85 68 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv861[ebp], 1116
  01b34	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR tv868[ebp]
  01b3a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01b41	ff d2		 call	 edx
  01b43	85 c0		 test	 eax, eax
  01b45	0f 84 43 05 00
	00		 je	 $LN67@draw_tacti

; 4323 : 						{
; 4324 : 							threat_type = (threat_types) get_local_entity_int_value (target, INT_TYPE_THREAT_TYPE);

  01b4b	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR _target$11[ebp], 0
  01b52	74 10		 je	 SHORT $LN208@draw_tacti
  01b54	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _target$11[ebp]
  01b5a	8b 08		 mov	 ecx, DWORD PTR [eax]
  01b5c	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv881[ebp], ecx
  01b62	eb 27		 jmp	 SHORT $LN209@draw_tacti
$LN208@draw_tacti:
  01b64	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01b6a	81 c2 8a 01 00
	00		 add	 edx, 394		; 0000018aH
  01b70	52		 push	 edx
  01b71	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01b76	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01b7b	50		 push	 eax
  01b7c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01b81	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv881[ebp], 0
$LN209@draw_tacti:
  01b8b	b9 01 00 00 00	 mov	 ecx, 1
  01b90	85 c9		 test	 ecx, ecx
  01b92	74 0c		 je	 SHORT $LN210@draw_tacti
  01b94	c7 85 64 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv889[ebp], 233 ; 000000e9H
  01b9e	eb 27		 jmp	 SHORT $LN211@draw_tacti
$LN210@draw_tacti:
  01ba0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01ba6	81 c2 8a 01 00
	00		 add	 edx, 394		; 0000018aH
  01bac	52		 push	 edx
  01bad	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01bb2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01bb7	50		 push	 eax
  01bb8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01bbd	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv889[ebp], 0
$LN211@draw_tacti:
  01bc7	68 e9 00 00 00	 push	 233			; 000000e9H
  01bcc	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _target$11[ebp]
  01bd2	51		 push	 ecx
  01bd3	69 95 68 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv881[ebp], 1116
  01bdd	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR tv889[ebp]
  01be3	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  01bea	ff d1		 call	 ecx
  01bec	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _threat_type$8[ebp], eax

; 4325 : 
; 4326 : 							if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA) || (threat_type == THREAT_TYPE_AIRBORNE_RADAR))

  01bf2	83 bd c8 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$8[ebp], 5
  01bf9	74 16		 je	 SHORT $LN63@draw_tacti
  01bfb	83 bd c8 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$8[ebp], 6
  01c02	74 0d		 je	 SHORT $LN63@draw_tacti
  01c04	83 bd c8 fe ff
	ff 04		 cmp	 DWORD PTR _threat_type$8[ebp], 4
  01c0b	0f 85 7d 04 00
	00		 jne	 $LN67@draw_tacti
$LN63@draw_tacti:

; 4327 : 							{
; 4328 : 								if (get_local_entity_parent (target, LIST_TYPE_TARGET) == source)

  01c11	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR _target$11[ebp], 0
  01c18	74 10		 je	 SHORT $LN212@draw_tacti
  01c1a	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _target$11[ebp]
  01c20	8b 08		 mov	 ecx, DWORD PTR [eax]
  01c22	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv903[ebp], ecx
  01c28	eb 20		 jmp	 SHORT $LN213@draw_tacti
$LN212@draw_tacti:
  01c2a	68 e8 10 00 00	 push	 4328			; 000010e8H
  01c2f	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01c34	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01c3a	52		 push	 edx
  01c3b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01c40	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv903[ebp], 0
$LN213@draw_tacti:
  01c4a	b8 01 00 00 00	 mov	 eax, 1
  01c4f	85 c0		 test	 eax, eax
  01c51	74 0c		 je	 SHORT $LN214@draw_tacti
  01c53	c7 85 64 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv910[ebp], 38 ; 00000026H
  01c5d	eb 20		 jmp	 SHORT $LN215@draw_tacti
$LN214@draw_tacti:
  01c5f	68 e8 10 00 00	 push	 4328			; 000010e8H
  01c64	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01c69	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01c6f	51		 push	 ecx
  01c70	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01c75	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv910[ebp], 0
$LN215@draw_tacti:
  01c7f	6a 26		 push	 38			; 00000026H
  01c81	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _target$11[ebp]
  01c87	52		 push	 edx
  01c88	69 85 68 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv903[ebp], 180
  01c92	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR tv910[ebp]
  01c98	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  01c9f	ff d2		 call	 edx
  01ca1	3b 85 0c ff ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  01ca7	0f 85 e1 03 00
	00		 jne	 $LN67@draw_tacti

; 4329 : 								{
; 4330 : 									draw_threat_line = TRUE;

  01cad	c7 85 c4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _draw_threat_line$7[ebp], 1

; 4331 : 
; 4332 : 									launched_weapon = get_local_entity_first_child (target, LIST_TYPE_LAUNCHED_WEAPON);

  01cb7	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR _target$11[ebp], 0
  01cbe	74 10		 je	 SHORT $LN216@draw_tacti
  01cc0	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _target$11[ebp]
  01cc6	8b 08		 mov	 ecx, DWORD PTR [eax]
  01cc8	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv923[ebp], ecx
  01cce	eb 27		 jmp	 SHORT $LN217@draw_tacti
$LN216@draw_tacti:
  01cd0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01cd6	81 c2 92 01 00
	00		 add	 edx, 402		; 00000192H
  01cdc	52		 push	 edx
  01cdd	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01ce2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01ce7	50		 push	 eax
  01ce8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01ced	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv923[ebp], 0
$LN217@draw_tacti:
  01cf7	b9 01 00 00 00	 mov	 ecx, 1
  01cfc	85 c9		 test	 ecx, ecx
  01cfe	74 0c		 je	 SHORT $LN218@draw_tacti
  01d00	c7 85 64 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv931[ebp], 24 ; 00000018H
  01d0a	eb 27		 jmp	 SHORT $LN219@draw_tacti
$LN218@draw_tacti:
  01d0c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01d12	81 c2 92 01 00
	00		 add	 edx, 402		; 00000192H
  01d18	52		 push	 edx
  01d19	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01d1e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01d23	50		 push	 eax
  01d24	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01d29	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv931[ebp], 0
$LN219@draw_tacti:
  01d33	6a 18		 push	 24			; 00000018H
  01d35	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _target$11[ebp]
  01d3b	51		 push	 ecx
  01d3c	69 95 68 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv923[ebp], 180
  01d46	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR tv931[ebp]
  01d4c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01d53	ff d1		 call	 ecx
  01d55	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _launched_weapon$10[ebp], eax
$LN12@draw_tacti:

; 4333 : 
; 4334 : 									while (launched_weapon)

  01d5b	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$10[ebp], 0
  01d62	0f 84 ec 01 00
	00		 je	 $LN13@draw_tacti

; 4335 : 									{
; 4336 : 										if (get_local_entity_int_value (launched_weapon, INT_TYPE_WEAPON_GUIDANCE_TYPE) != WEAPON_GUIDANCE_TYPE_NONE)

  01d68	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$10[ebp], 0
  01d6f	74 10		 je	 SHORT $LN220@draw_tacti
  01d71	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$10[ebp]
  01d77	8b 08		 mov	 ecx, DWORD PTR [eax]
  01d79	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv943[ebp], ecx
  01d7f	eb 20		 jmp	 SHORT $LN221@draw_tacti
$LN220@draw_tacti:
  01d81	68 f0 10 00 00	 push	 4336			; 000010f0H
  01d86	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01d8b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01d91	52		 push	 edx
  01d92	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01d97	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv943[ebp], 0
$LN221@draw_tacti:
  01da1	b8 01 00 00 00	 mov	 eax, 1
  01da6	85 c0		 test	 eax, eax
  01da8	74 0c		 je	 SHORT $LN222@draw_tacti
  01daa	c7 85 64 fe ff
	ff 07 01 00 00	 mov	 DWORD PTR tv950[ebp], 263 ; 00000107H
  01db4	eb 20		 jmp	 SHORT $LN223@draw_tacti
$LN222@draw_tacti:
  01db6	68 f0 10 00 00	 push	 4336			; 000010f0H
  01dbb	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01dc0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01dc6	51		 push	 ecx
  01dc7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01dcc	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv950[ebp], 0
$LN223@draw_tacti:
  01dd6	68 07 01 00 00	 push	 263			; 00000107H
  01ddb	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$10[ebp]
  01de1	52		 push	 edx
  01de2	69 85 68 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv943[ebp], 1116
  01dec	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR tv950[ebp]
  01df2	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01df9	ff d2		 call	 edx
  01dfb	85 c0		 test	 eax, eax
  01dfd	0f 84 a8 00 00
	00		 je	 $LN66@draw_tacti

; 4337 : 										{
; 4338 : 											if (get_local_entity_parent (launched_weapon, LIST_TYPE_TARGET) == source)

  01e03	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$10[ebp], 0
  01e0a	74 10		 je	 SHORT $LN224@draw_tacti
  01e0c	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$10[ebp]
  01e12	8b 08		 mov	 ecx, DWORD PTR [eax]
  01e14	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv962[ebp], ecx
  01e1a	eb 20		 jmp	 SHORT $LN225@draw_tacti
$LN224@draw_tacti:
  01e1c	68 f2 10 00 00	 push	 4338			; 000010f2H
  01e21	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01e26	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01e2c	52		 push	 edx
  01e2d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01e32	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv962[ebp], 0
$LN225@draw_tacti:
  01e3c	b8 01 00 00 00	 mov	 eax, 1
  01e41	85 c0		 test	 eax, eax
  01e43	74 0c		 je	 SHORT $LN226@draw_tacti
  01e45	c7 85 64 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv969[ebp], 38 ; 00000026H
  01e4f	eb 20		 jmp	 SHORT $LN227@draw_tacti
$LN226@draw_tacti:
  01e51	68 f2 10 00 00	 push	 4338			; 000010f2H
  01e56	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01e5b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01e61	51		 push	 ecx
  01e62	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01e67	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv969[ebp], 0
$LN227@draw_tacti:
  01e71	6a 26		 push	 38			; 00000026H
  01e73	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$10[ebp]
  01e79	52		 push	 edx
  01e7a	69 85 68 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv962[ebp], 180
  01e84	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR tv969[ebp]
  01e8a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  01e91	ff d2		 call	 edx
  01e93	3b 85 0c ff ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  01e99	75 10		 jne	 SHORT $LN66@draw_tacti

; 4339 : 											{
; 4340 : 												draw_threat_line = tsd_draw_threat_line_status;

  01e9b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tsd_draw_threat_line_status@@3HA
  01ea0	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _draw_threat_line$7[ebp], eax

; 4341 : 
; 4342 : 												break;

  01ea6	e9 a9 00 00 00	 jmp	 $LN13@draw_tacti
$LN66@draw_tacti:

; 4343 : 											}
; 4344 : 										}
; 4345 : 
; 4346 : 										launched_weapon = get_local_entity_child_succ (launched_weapon, LIST_TYPE_LAUNCHED_WEAPON);

  01eab	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$10[ebp], 0
  01eb2	74 10		 je	 SHORT $LN228@draw_tacti
  01eb4	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$10[ebp]
  01eba	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ebc	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv982[ebp], ecx
  01ec2	eb 27		 jmp	 SHORT $LN229@draw_tacti
$LN228@draw_tacti:
  01ec4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01eca	81 c2 a0 01 00
	00		 add	 edx, 416		; 000001a0H
  01ed0	52		 push	 edx
  01ed1	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01ed6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01edb	50		 push	 eax
  01edc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01ee1	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv982[ebp], 0
$LN229@draw_tacti:
  01eeb	b9 01 00 00 00	 mov	 ecx, 1
  01ef0	85 c9		 test	 ecx, ecx
  01ef2	74 0c		 je	 SHORT $LN230@draw_tacti
  01ef4	c7 85 64 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv990[ebp], 24 ; 00000018H
  01efe	eb 27		 jmp	 SHORT $LN231@draw_tacti
$LN230@draw_tacti:
  01f00	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01f06	81 c2 a0 01 00
	00		 add	 edx, 416		; 000001a0H
  01f0c	52		 push	 edx
  01f0d	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01f12	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01f17	50		 push	 eax
  01f18	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01f1d	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv990[ebp], 0
$LN231@draw_tacti:
  01f27	6a 18		 push	 24			; 00000018H
  01f29	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _launched_weapon$10[ebp]
  01f2f	51		 push	 ecx
  01f30	69 95 68 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv982[ebp], 180
  01f3a	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR tv990[ebp]
  01f40	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01f47	ff d1		 call	 ecx
  01f49	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _launched_weapon$10[ebp], eax

; 4347 : 									}

  01f4f	e9 07 fe ff ff	 jmp	 $LN12@draw_tacti
$LN13@draw_tacti:

; 4348 : 
; 4349 : 									if (draw_threat_line)

  01f54	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _draw_threat_line$7[ebp], 0
  01f5b	0f 84 2d 01 00
	00		 je	 $LN67@draw_tacti

; 4350 : 									{
; 4351 : 										target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  01f61	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR _target$11[ebp], 0
  01f68	74 10		 je	 SHORT $LN232@draw_tacti
  01f6a	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _target$11[ebp]
  01f70	8b 08		 mov	 ecx, DWORD PTR [eax]
  01f72	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv1003[ebp], ecx
  01f78	eb 27		 jmp	 SHORT $LN233@draw_tacti
$LN232@draw_tacti:
  01f7a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01f80	81 c2 a5 01 00
	00		 add	 edx, 421		; 000001a5H
  01f86	52		 push	 edx
  01f87	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01f8c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01f91	50		 push	 eax
  01f92	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01f97	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1003[ebp], 0
$LN233@draw_tacti:
  01fa1	b9 01 00 00 00	 mov	 ecx, 1
  01fa6	85 c9		 test	 ecx, ecx
  01fa8	74 0c		 je	 SHORT $LN234@draw_tacti
  01faa	c7 85 64 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv1011[ebp], 8
  01fb4	eb 27		 jmp	 SHORT $LN235@draw_tacti
$LN234@draw_tacti:
  01fb6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01fbc	81 c2 a5 01 00
	00		 add	 edx, 421		; 000001a5H
  01fc2	52		 push	 edx
  01fc3	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  01fc8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  01fcd	50		 push	 eax
  01fce	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01fd3	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1011[ebp], 0
$LN235@draw_tacti:
  01fdd	6a 08		 push	 8
  01fdf	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _target$11[ebp]
  01fe5	51		 push	 ecx
  01fe6	6b 95 68 fe ff
	ff 60		 imul	 edx, DWORD PTR tv1003[ebp], 96
  01fed	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR tv1011[ebp]
  01ff3	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  01ffa	ff d1		 call	 ecx
  01ffc	89 85 cc fe ff
	ff		 mov	 DWORD PTR _target_position$9[ebp], eax

; 4352 : 
; 4353 : 										dx = (target_position->x - source_position->x) * scale;

  02002	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target_position$9[ebp]
  02008	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  0200e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  02012	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  02016	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0201e	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR _dx$5[ebp], xmm0

; 4354 : 										dy = (target_position->z - source_position->z) * scale;

  02026	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _target_position$9[ebp]
  0202c	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  02032	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  02037	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0203c	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  02044	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR _dy$4[ebp], xmm0

; 4355 : 
; 4356 : 										draw_2d_line (0.0, 0.0, dx, dy, MFD_COLOUR1);

  0204c	b8 04 00 00 00	 mov	 eax, 4
  02051	6b c8 00	 imul	 ecx, eax, 0
  02054	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0205a	52		 push	 edx
  0205b	51		 push	 ecx
  0205c	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$4[ebp]
  02064	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02069	51		 push	 ecx
  0206a	f3 0f 10 85 bc
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$5[ebp]
  02072	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02077	51		 push	 ecx
  02078	0f 57 c0	 xorps	 xmm0, xmm0
  0207b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02080	51		 push	 ecx
  02081	0f 57 c0	 xorps	 xmm0, xmm0
  02084	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02089	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN67@draw_tacti:

; 4357 : 									}
; 4358 : 								}
; 4359 : 							}
; 4360 : 						}
; 4361 : 					}
; 4362 : 				}
; 4363 : 
; 4364 : 				target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  0208e	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR _target$11[ebp], 0
  02095	74 10		 je	 SHORT $LN236@draw_tacti
  02097	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _target$11[ebp]
  0209d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0209f	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv1038[ebp], ecx
  020a5	eb 27		 jmp	 SHORT $LN237@draw_tacti
$LN236@draw_tacti:
  020a7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  020ad	81 c2 b2 01 00
	00		 add	 edx, 434		; 000001b2H
  020b3	52		 push	 edx
  020b4	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  020b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  020be	50		 push	 eax
  020bf	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  020c4	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1038[ebp], 0
$LN237@draw_tacti:
  020ce	b9 01 00 00 00	 mov	 ecx, 1
  020d3	85 c9		 test	 ecx, ecx
  020d5	74 0c		 je	 SHORT $LN238@draw_tacti
  020d7	c7 85 64 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv1046[ebp], 18 ; 00000012H
  020e1	eb 27		 jmp	 SHORT $LN239@draw_tacti
$LN238@draw_tacti:
  020e3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  020e9	81 c2 b2 01 00
	00		 add	 edx, 434		; 000001b2H
  020ef	52		 push	 edx
  020f0	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  020f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  020fa	50		 push	 eax
  020fb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02100	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1046[ebp], 0
$LN239@draw_tacti:
  0210a	6a 12		 push	 18			; 00000012H
  0210c	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _target$11[ebp]
  02112	51		 push	 ecx
  02113	69 95 68 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv1038[ebp], 180
  0211d	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR tv1046[ebp]
  02123	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0212a	ff d1		 call	 ecx
  0212c	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _target$11[ebp], eax

; 4365 : 			}

  02132	e9 35 f8 ff ff	 jmp	 $LN10@draw_tacti
$LN11@draw_tacti:

; 4366 : 
; 4367 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  02137	51		 push	 ecx
  02138	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  02140	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02145	51		 push	 ecx
  02146	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0214e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02153	51		 push	 ecx
  02154	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0215c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02161	51		 push	 ecx
  02162	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0216a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0216f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  02174	50		 push	 eax
  02175	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 4368 : 
; 4369 : 			set_2d_window_rotation (mfd_env, 0.0);

  0217a	51		 push	 ecx
  0217b	0f 57 c0	 xorps	 xmm0, xmm0
  0217e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02183	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  02188	50		 push	 eax
  02189	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN47@draw_tacti:

; 4370 : 		}
; 4371 : 	}
; 4372 : 
; 4373 : 	////////////////////////////////////////
; 4374 : 	//
; 4375 : 	// aircraft datum symbol
; 4376 : 	//
; 4377 : 	////////////////////////////////////////
; 4378 : 
; 4379 : 	if (draw_large_mfd)

  0218e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02195	74 6c		 je	 SHORT $LN68@draw_tacti

; 4380 : 	{
; 4381 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum_mask, x_origin, y_origin, MFD_COLOUR_DARK_BLUE);  // 6

  02197	b8 04 00 00 00	 mov	 eax, 4
  0219c	6b c8 11	 imul	 ecx, eax, 17
  0219f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  021a5	52		 push	 edx
  021a6	51		 push	 ecx
  021a7	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  021af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021b4	51		 push	 ecx
  021b5	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  021bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021c2	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum_mask@@3PADA
  021c7	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4382 : 
; 4383 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum, x_origin, y_origin, MFD_COLOUR_BLUE);  // 1

  021cc	b8 04 00 00 00	 mov	 eax, 4
  021d1	6b c8 0c	 imul	 ecx, eax, 12
  021d4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  021da	52		 push	 edx
  021db	51		 push	 ecx
  021dc	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  021e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021e9	51		 push	 ecx
  021ea	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  021f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021f7	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum@@3PADA
  021fc	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4384 : 	}
; 4385 : 	else

  02201	eb 6a		 jmp	 SHORT $LN69@draw_tacti
$LN68@draw_tacti:

; 4386 : 	{
; 4387 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum_mask, x_origin, y_origin, MFD_COLOUR_DARK_BLUE);

  02203	b8 04 00 00 00	 mov	 eax, 4
  02208	6b c8 11	 imul	 ecx, eax, 17
  0220b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02211	52		 push	 edx
  02212	51		 push	 ecx
  02213	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  0221b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02220	51		 push	 ecx
  02221	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  02229	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0222e	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum_mask@@3PADA
  02233	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4388 : 
; 4389 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum, x_origin, y_origin, MFD_COLOUR_BLUE);

  02238	b8 04 00 00 00	 mov	 eax, 4
  0223d	6b c8 0c	 imul	 ecx, eax, 12
  02240	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02246	52		 push	 edx
  02247	51		 push	 ecx
  02248	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  02250	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02255	51		 push	 ecx
  02256	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  0225e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02263	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum@@3PADA
  02268	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN69@draw_tacti:

; 4390 : 	}
; 4391 : 
; 4392 : 	////////////////////////////////////////
; 4393 : 	//
; 4394 : 	// text
; 4395 : 	//
; 4396 : 	////////////////////////////////////////
; 4397 : 
; 4398 : 	set_mono_font_colour (tsd_basic_colour);

  0226d	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_basic_colour$[ebp]
  02273	50		 push	 eax
  02274	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4399 : 
; 4400 : 	if (draw_large_mfd)

  02279	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02280	74 09		 je	 SHORT $LN70@draw_tacti

; 4401 : 	{
; 4402 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  02282	6a 05		 push	 5
  02284	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 4403 : 	}
; 4404 : 	else

  02289	eb 07		 jmp	 SHORT $LN71@draw_tacti
$LN70@draw_tacti:

; 4405 : 	{
; 4406 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  0228b	6a 01		 push	 1
  0228d	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN71@draw_tacti:

; 4407 : 	}
; 4408 : 
; 4409 : 	//
; 4410 : 	// sensor type
; 4411 : 	//
; 4412 : 
; 4413 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)

  02292	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
  02299	0f 84 9f 01 00
	00		 je	 $LN72@draw_tacti

; 4414 : 	{
; 4415 : 		switch (target_acquisition_system)

  0229f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; target_acquisition_system
  022a4	89 85 68 fe ff
	ff		 mov	 DWORD PTR tv1089[ebp], eax
  022aa	83 bd 68 fe ff
	ff 08		 cmp	 DWORD PTR tv1089[ebp], 8
  022b1	77 31		 ja	 SHORT $LN77@draw_tacti
  022b3	8b 8d 68 fe ff
	ff		 mov	 ecx, DWORD PTR tv1089[ebp]
  022b9	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN244@draw_tacti[ecx*4]
$LN73@draw_tacti:

; 4416 : 		{
; 4417 : 			case TARGET_ACQUISITION_SYSTEM_OFF:
; 4418 : 			{
; 4419 : 				s = "NO ACQ";

  022c0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06LLLMNJMM@NO?5ACQ@

; 4420 : 
; 4421 : 				break;

  022c7	eb 22		 jmp	 SHORT $LN14@draw_tacti
$LN74@draw_tacti:

; 4422 : 			}
; 4423 : 			case TARGET_ACQUISITION_SYSTEM_GROUND_RADAR:
; 4424 : 			case TARGET_ACQUISITION_SYSTEM_AIR_RADAR:
; 4425 : 			{
; 4426 : /*				if (current_pfz != NO_PFZ)
; 4427 : 				{
; 4428 : 					sprintf(buffer, "FCR/PF%d", current_pfz+1);
; 4429 : 					s = buffer;	
; 4430 : 				}
; 4431 : 				else
; 4432 : */					s = "FCR";

  022c9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03JKJFCLEN@FCR@

; 4433 : 
; 4434 : 				break;

  022d0	eb 19		 jmp	 SHORT $LN14@draw_tacti
$LN75@draw_tacti:

; 4435 : 			}
; 4436 : 			case TARGET_ACQUISITION_SYSTEM_FLIR:
; 4437 : 			case TARGET_ACQUISITION_SYSTEM_DTV:
; 4438 : 			case TARGET_ACQUISITION_SYSTEM_DVO:
; 4439 : 			{
; 4440 : 				s = "TADS";

  022d2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04DBODHFDK@TADS@

; 4441 : 
; 4442 : 				break;

  022d9	eb 10		 jmp	 SHORT $LN14@draw_tacti
$LN76@draw_tacti:

; 4443 : 			}
; 4444 : 			case TARGET_ACQUISITION_SYSTEM_IHADSS:
; 4445 : 			{
; 4446 : 				s = "IHADSS";

  022db	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06NOICLIMH@IHADSS@

; 4447 : 
; 4448 : 				break;

  022e2	eb 07		 jmp	 SHORT $LN14@draw_tacti
$LN77@draw_tacti:

; 4449 : 			}
; 4450 : 			default:
; 4451 : 			{
; 4452 : 				s = "XXX";

  022e4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN14@draw_tacti:

; 4453 : 
; 4454 : 				break;
; 4455 : 			}
; 4456 : 		}
; 4457 : 
; 4458 : 		if (draw_large_mfd)

  022eb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  022f2	74 12		 je	 SHORT $LN78@draw_tacti

; 4459 : 		{
; 4460 : 			y_adjust = 5.0;

  022f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  022fc	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4461 : 		}
; 4462 : 		else

  02304	eb 10		 jmp	 SHORT $LN79@draw_tacti
$LN78@draw_tacti:

; 4463 : 		{
; 4464 : 			y_adjust = 2.0;

  02306	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0230e	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN79@draw_tacti:

; 4465 : 		}
; 4466 : 
; 4467 : 		set_2d_mono_font_position (-0.8, 1.0);

  02316	51		 push	 ecx
  02317	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0231f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02324	51		 push	 ecx
  02325	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0232d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02332	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4468 : 
; 4469 : 		set_mono_font_rel_position (1.0, y_adjust);

  02337	51		 push	 ecx
  02338	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02340	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02345	51		 push	 ecx
  02346	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0234e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02353	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4470 : 
; 4471 : 		print_mono_font_string (s);

  02358	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0235b	50		 push	 eax
  0235c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4472 : 
; 4473 : 		switch (target_acquisition_system)

  02361	a1 00 00 00 00	 mov	 eax, DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; target_acquisition_system
  02366	89 85 68 fe ff
	ff		 mov	 DWORD PTR tv1097[ebp], eax
  0236c	83 bd 68 fe ff
	ff 08		 cmp	 DWORD PTR tv1097[ebp], 8
  02373	77 4c		 ja	 SHORT $LN87@draw_tacti
  02375	8b 8d 68 fe ff
	ff		 mov	 ecx, DWORD PTR tv1097[ebp]
  0237b	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN245@draw_tacti[ecx*4]
$LN80@draw_tacti:

; 4474 : 		{
; 4475 : 			case TARGET_ACQUISITION_SYSTEM_OFF:
; 4476 : 			{
; 4477 : 				s = "";

  02382	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_00CNPNBAHC@@

; 4478 : 
; 4479 : 				break;

  02389	eb 3d		 jmp	 SHORT $LN16@draw_tacti
$LN81@draw_tacti:

; 4480 : 			}
; 4481 : 			case TARGET_ACQUISITION_SYSTEM_GROUND_RADAR:
; 4482 : 			{
; 4483 : 				s = "GND";

  0238b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03DGGJGKKM@GND@

; 4484 : 
; 4485 : 				break;

  02392	eb 34		 jmp	 SHORT $LN16@draw_tacti
$LN82@draw_tacti:

; 4486 : 			}
; 4487 : 			case TARGET_ACQUISITION_SYSTEM_AIR_RADAR:
; 4488 : 			{
; 4489 : 				s = "AIR";

  02394	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03KNFJGCC@AIR@

; 4490 : 
; 4491 : 				break;

  0239b	eb 2b		 jmp	 SHORT $LN16@draw_tacti
$LN83@draw_tacti:

; 4492 : 			}
; 4493 : 			case TARGET_ACQUISITION_SYSTEM_FLIR:
; 4494 : 			{
; 4495 : 				s = "FLIR";

  0239d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04MIGKMLBH@FLIR@

; 4496 : 
; 4497 : 				break;

  023a4	eb 22		 jmp	 SHORT $LN16@draw_tacti
$LN84@draw_tacti:

; 4498 : 			}
; 4499 : 			case TARGET_ACQUISITION_SYSTEM_DTV:
; 4500 : 			{
; 4501 : 				s = "DTV";

  023a6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03ENJJJDDH@DTV@

; 4502 : 
; 4503 : 				break;

  023ad	eb 19		 jmp	 SHORT $LN16@draw_tacti
$LN85@draw_tacti:

; 4504 : 			}
; 4505 : 			case TARGET_ACQUISITION_SYSTEM_DVO:
; 4506 : 			{
; 4507 : 				s = "DVO";

  023af	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03NFBNOOEB@DVO@

; 4508 : 
; 4509 : 				break;

  023b6	eb 10		 jmp	 SHORT $LN16@draw_tacti
$LN86@draw_tacti:

; 4510 : 			}
; 4511 : 			case TARGET_ACQUISITION_SYSTEM_IHADSS:
; 4512 : 			{
; 4513 : 				s = "";

  023b8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_00CNPNBAHC@@

; 4514 : 
; 4515 : 				break;

  023bf	eb 07		 jmp	 SHORT $LN16@draw_tacti
$LN87@draw_tacti:

; 4516 : 			}
; 4517 : 			default:
; 4518 : 			{
; 4519 : 				s = "XXX";

  023c1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN16@draw_tacti:

; 4520 : 
; 4521 : 				break;
; 4522 : 			}
; 4523 : 		}
; 4524 : 
; 4525 : 		if (draw_large_mfd)

  023c8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  023cf	74 12		 je	 SHORT $LN88@draw_tacti

; 4526 : 		{
; 4527 : 			y_adjust = 2.0;

  023d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  023d9	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4528 : 		}
; 4529 : 		else

  023e1	eb 10		 jmp	 SHORT $LN89@draw_tacti
$LN88@draw_tacti:

; 4530 : 		{
; 4531 : 			y_adjust = 2.0;

  023e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  023eb	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN89@draw_tacti:

; 4532 : 		}
; 4533 : 
; 4534 : 		set_2d_mono_font_position (-0.8, 0.9);

  023f3	51		 push	 ecx
  023f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  023fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02401	51		 push	 ecx
  02402	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0240a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0240f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4535 : 
; 4536 : 		set_mono_font_rel_position (1.0, y_adjust);

  02414	51		 push	 ecx
  02415	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0241d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02422	51		 push	 ecx
  02423	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0242b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02430	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4537 : 
; 4538 : 		print_mono_font_string (s);

  02435	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02438	50		 push	 eax
  02439	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN72@draw_tacti:

; 4539 : 	}
; 4540 : 
; 4541 : 	//
; 4542 : 	// TSD range
; 4543 : 	//
; 4544 : 
; 4545 : 	if (tsd_ase_range == TSD_ASE_RANGE_2000)

  0243e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  02446	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  0244d	9f		 lahf
  0244e	f6 c4 44	 test	 ah, 68			; 00000044H
  02451	7a 09		 jp	 SHORT $LN90@draw_tacti

; 4546 : 	{
; 4547 : 		s = "2Km";

  02453	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03CIAFGHAC@2Km@
  0245a	eb 61		 jmp	 SHORT $LN97@draw_tacti
$LN90@draw_tacti:

; 4548 : 	}
; 4549 : 	else if (tsd_ase_range == TSD_ASE_RANGE_5000)

  0245c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  02464	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  0246b	9f		 lahf
  0246c	f6 c4 44	 test	 ah, 68			; 00000044H
  0246f	7a 09		 jp	 SHORT $LN92@draw_tacti

; 4550 : 	{
; 4551 : 		s = "5Km";

  02471	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03LFNCFPLL@5Km@
  02478	eb 43		 jmp	 SHORT $LN97@draw_tacti
$LN92@draw_tacti:

; 4552 : 	}
; 4553 : 	else if (tsd_ase_range == TSD_ASE_RANGE_10000)

  0247a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  02482	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  02489	9f		 lahf
  0248a	f6 c4 44	 test	 ah, 68			; 00000044H
  0248d	7a 09		 jp	 SHORT $LN94@draw_tacti

; 4554 : 	{
; 4555 : 		s = "10Km";

  0248f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04PJCLBGLO@10Km@
  02496	eb 25		 jmp	 SHORT $LN97@draw_tacti
$LN94@draw_tacti:

; 4556 : 	}
; 4557 : 	else if (tsd_ase_range == TSD_ASE_RANGE_25000)

  02498	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  024a0	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  024a7	9f		 lahf
  024a8	f6 c4 44	 test	 ah, 68			; 00000044H
  024ab	7a 09		 jp	 SHORT $LN96@draw_tacti

; 4558 : 	{
; 4559 : 		s = "25Km";

  024ad	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04IJFFJMFM@25Km@

; 4560 : 	}
; 4561 : 	else

  024b4	eb 07		 jmp	 SHORT $LN97@draw_tacti
$LN96@draw_tacti:

; 4562 : 	{
; 4563 : 		s = "XXX";

  024b6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN97@draw_tacti:

; 4564 : 	}
; 4565 : 
; 4566 : 	width = get_mono_font_string_width (s);

  024bd	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  024c0	50		 push	 eax
  024c1	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  024c6	d9 9d 18 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 4567 : 
; 4568 : 	if (draw_large_mfd)

  024cc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  024d3	74 12		 je	 SHORT $LN98@draw_tacti

; 4569 : 	{
; 4570 : 		y_adjust = 5.0;

  024d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  024dd	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4571 : 	}
; 4572 : 	else

  024e5	eb 10		 jmp	 SHORT $LN99@draw_tacti
$LN98@draw_tacti:

; 4573 : 	{
; 4574 : 		y_adjust = 2.0;

  024e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  024ef	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN99@draw_tacti:

; 4575 : 	}
; 4576 : 
; 4577 : 	set_2d_mono_font_position (0.8, 1.0);

  024f7	51		 push	 ecx
  024f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02500	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02505	51		 push	 ecx
  02506	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  0250e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02513	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4578 : 
; 4579 : 	set_mono_font_rel_position (-width, y_adjust);

  02518	51		 push	 ecx
  02519	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02521	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02526	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  0252e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  02535	51		 push	 ecx
  02536	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0253b	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4580 : 
; 4581 : 	print_mono_font_string (s);

  02540	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02543	50		 push	 eax
  02544	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4582 : 
; 4583 : 	//
; 4584 : 	// TSD declutter level
; 4585 : 	//
; 4586 : 
; 4587 : 	if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_ALL)

  02549	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0
  02550	75 09		 jne	 SHORT $LN100@draw_tacti

; 4588 : 	{
; 4589 : 		s = "ALL";

  02552	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03NIFPGLBG@ALL@
  02559	eb 2b		 jmp	 SHORT $LN105@draw_tacti
$LN100@draw_tacti:

; 4590 : 	}
; 4591 : 	else if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  0255b	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  02562	75 09		 jne	 SHORT $LN102@draw_tacti

; 4592 : 	{
; 4593 : 		s = "TGT";

  02564	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03DBNGLLAD@TGT@
  0256b	eb 19		 jmp	 SHORT $LN105@draw_tacti
$LN102@draw_tacti:

; 4594 : 	}
; 4595 : 	else if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_NAVIGATION)

  0256d	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
  02574	75 09		 jne	 SHORT $LN104@draw_tacti

; 4596 : 	{
; 4597 : 		s = "NAV";

  02576	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03DIMJBCMI@NAV@

; 4598 : 	}
; 4599 : 	else

  0257d	eb 07		 jmp	 SHORT $LN105@draw_tacti
$LN104@draw_tacti:

; 4600 : 	{
; 4601 : 		s = "XXX";

  0257f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN105@draw_tacti:

; 4602 : 	}
; 4603 : 
; 4604 : 	width = get_mono_font_string_width (s);

  02586	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02589	50		 push	 eax
  0258a	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0258f	d9 9d 18 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 4605 : 
; 4606 : 	if (draw_large_mfd)

  02595	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0259c	74 12		 je	 SHORT $LN106@draw_tacti

; 4607 : 	{
; 4608 : 		y_adjust = 2.0;

  0259e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  025a6	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4609 : 	}
; 4610 : 	else

  025ae	eb 10		 jmp	 SHORT $LN107@draw_tacti
$LN106@draw_tacti:

; 4611 : 	{
; 4612 : 		y_adjust = 2.0;

  025b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  025b8	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN107@draw_tacti:

; 4613 : 	}
; 4614 : 
; 4615 : 	set_2d_mono_font_position (0.8, 0.9);

  025c0	51		 push	 ecx
  025c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  025c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025ce	51		 push	 ecx
  025cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  025d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025dc	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4616 : 
; 4617 : 	set_mono_font_rel_position (-width, y_adjust);

  025e1	51		 push	 ecx
  025e2	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  025ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025ef	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  025f7	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  025fe	51		 push	 ecx
  025ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02604	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4618 : 
; 4619 : 	print_mono_font_string (s);

  02609	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0260c	50		 push	 eax
  0260d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4620 : 
; 4621 : 	//
; 4622 : 	// target range
; 4623 : 	//
; 4624 : 
; 4625 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)

  02612	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
  02619	0f 84 d9 01 00
	00		 je	 $LN109@draw_tacti

; 4626 : 	{
; 4627 : 		if (source_target)

  0261f	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _source_target$[ebp], 0
  02626	0f 84 cc 01 00
	00		 je	 $LN109@draw_tacti

; 4628 : 		{
; 4629 : 			rangefinding_system rangefinder = get_range_finder();

  0262c	e8 00 00 00 00	 call	 ?get_range_finder@@YG?AW4rangefinding_system@@XZ ; get_range_finder
  02631	89 85 b4 fe ff
	ff		 mov	 DWORD PTR _rangefinder$3[ebp], eax

; 4630 : 			
; 4631 : 			float
; 4632 : 				target_range;
; 4633 : 
; 4634 : 			if (rangefinder != RANGEFINDER_TRIANGULATION)

  02637	83 bd b4 fe ff
	ff 02		 cmp	 DWORD PTR _rangefinder$3[ebp], 2
  0263e	0f 84 bc 00 00
	00		 je	 $LN110@draw_tacti

; 4635 : 			{
; 4636 : 				vec3d *target_position;
; 4637 : 
; 4638 : 				target_position = get_local_entity_vec3d_ptr (source_target, VEC3D_TYPE_POSITION);

  02644	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _source_target$[ebp], 0
  0264b	74 10		 je	 SHORT $LN240@draw_tacti
  0264d	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _source_target$[ebp]
  02653	8b 08		 mov	 ecx, DWORD PTR [eax]
  02655	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv1204[ebp], ecx
  0265b	eb 27		 jmp	 SHORT $LN241@draw_tacti
$LN240@draw_tacti:
  0265d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  02663	81 c2 c4 02 00
	00		 add	 edx, 708		; 000002c4H
  02669	52		 push	 edx
  0266a	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0266f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02674	50		 push	 eax
  02675	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0267a	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1204[ebp], 0
$LN241@draw_tacti:
  02684	b9 01 00 00 00	 mov	 ecx, 1
  02689	85 c9		 test	 ecx, ecx
  0268b	74 0c		 je	 SHORT $LN242@draw_tacti
  0268d	c7 85 64 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv1212[ebp], 8
  02697	eb 27		 jmp	 SHORT $LN243@draw_tacti
$LN242@draw_tacti:
  02699	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  0269f	81 c2 c4 02 00
	00		 add	 edx, 708		; 000002c4H
  026a5	52		 push	 edx
  026a6	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  026ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  026b0	50		 push	 eax
  026b1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  026b6	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1212[ebp], 0
$LN243@draw_tacti:
  026c0	6a 08		 push	 8
  026c2	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_target$[ebp]
  026c8	51		 push	 ecx
  026c9	6b 95 68 fe ff
	ff 60		 imul	 edx, DWORD PTR tv1204[ebp], 96
  026d0	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR tv1212[ebp]
  026d6	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  026dd	ff d1		 call	 ecx
  026df	89 85 ac fe ff
	ff		 mov	 DWORD PTR _target_position$1[ebp], eax

; 4639 : 				target_range = get_3d_range (source_position, target_position);

  026e5	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _target_position$1[ebp]
  026eb	50		 push	 eax
  026ec	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  026f2	51		 push	 ecx
  026f3	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  026f8	d9 9d b0 fe ff
	ff		 fstp	 DWORD PTR _target_range$2[ebp]

; 4640 : 			}
; 4641 : 			else

  026fe	eb 12		 jmp	 SHORT $LN111@draw_tacti
$LN110@draw_tacti:

; 4642 : 				target_range = get_triangulated_range(source_target);

  02700	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _source_target$[ebp]
  02706	50		 push	 eax
  02707	e8 00 00 00 00	 call	 ?get_triangulated_range@@YGMPAUENTITY@@@Z ; get_triangulated_range
  0270c	d9 9d b0 fe ff
	ff		 fstp	 DWORD PTR _target_range$2[ebp]
$LN111@draw_tacti:

; 4643 : 
; 4644 : 			if (rangefinder == RANGEFINDER_LASER)

  02712	83 bd b4 fe ff
	ff 01		 cmp	 DWORD PTR _rangefinder$3[ebp], 1
  02719	75 1f		 jne	 SHORT $LN112@draw_tacti

; 4645 : 				sprintf (buffer, "%dm", (int) target_range);

  0271b	f3 0f 2c 85 b0
	fe ff ff	 cvttss2si eax, DWORD PTR _target_range$2[ebp]
  02723	50		 push	 eax
  02724	68 00 00 00 00	 push	 OFFSET ??_C@_03NGNKAJPJ@?$CFdm@
  02729	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0272f	51		 push	 ecx
  02730	e8 00 00 00 00	 call	 _sprintf
  02735	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4646 : 			else

  02738	eb 2c		 jmp	 SHORT $LN113@draw_tacti
$LN112@draw_tacti:

; 4647 : 				sprintf (buffer, "%.1fkm", target_range * (1.0 / 1000.0));

  0273a	f3 0f 5a 85 b0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$2[ebp]
  02742	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0274a	83 ec 08	 sub	 esp, 8
  0274d	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  02752	68 00 00 00 00	 push	 OFFSET ??_C@_06NEGNFKDO@?$CF?41fkm@
  02757	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0275d	50		 push	 eax
  0275e	e8 00 00 00 00	 call	 _sprintf
  02763	83 c4 10	 add	 esp, 16			; 00000010H
$LN113@draw_tacti:

; 4648 : 
; 4649 : 			width = get_mono_font_string_width (buffer);

  02766	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0276c	50		 push	 eax
  0276d	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02772	d9 9d 18 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 4650 : 
; 4651 : 			if (draw_large_mfd)

  02778	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0277f	74 12		 je	 SHORT $LN114@draw_tacti

; 4652 : 			{
; 4653 : 				y_adjust = -12.0;

  02781	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  02789	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4654 : 			}
; 4655 : 			else

  02791	eb 10		 jmp	 SHORT $LN115@draw_tacti
$LN114@draw_tacti:

; 4656 : 			{
; 4657 : 				y_adjust = -5.0;

  02793	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  0279b	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN115@draw_tacti:

; 4658 : 			}
; 4659 : 
; 4660 : 			set_2d_mono_font_position (0.8, -1.0);

  027a3	51		 push	 ecx
  027a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  027ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027b1	51		 push	 ecx
  027b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  027ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027bf	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4661 : 
; 4662 : 			set_mono_font_rel_position (-width, y_adjust);

  027c4	51		 push	 ecx
  027c5	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  027cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027d2	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  027da	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  027e1	51		 push	 ecx
  027e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027e7	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4663 : 
; 4664 : 			print_mono_font_string (buffer);

  027ec	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  027f2	50		 push	 eax
  027f3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN109@draw_tacti:

; 4665 : 		}
; 4666 : 	}
; 4667 : 
; 4668 : 	//
; 4669 : 	// waypoint information
; 4670 : 	//
; 4671 : 
; 4672 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_TARGET && !default_damage.navigation_computer)

  027f8	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  027ff	74 38		 je	 SHORT $LN118@draw_tacti
  02801	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  02806	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  02809	83 e0 01	 and	 eax, 1
  0280c	75 2b		 jne	 SHORT $LN118@draw_tacti

; 4673 : 	{
; 4674 : 		if (tsd_underlay == TSD_UNDERLAY_MAP)

  0280e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 1
  02815	75 0e		 jne	 SHORT $LN117@draw_tacti

; 4675 : 			display_waypoint_information (tsd_basic_colour);

  02817	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _tsd_basic_colour$[ebp]
  0281d	50		 push	 eax
  0281e	e8 00 00 00 00	 call	 ?display_waypoint_information@@YGXUREAL_COLOUR@@@Z ; display_waypoint_information

; 4676 : 		else

  02823	eb 14		 jmp	 SHORT $LN118@draw_tacti
$LN117@draw_tacti:

; 4677 : 			display_waypoint_information (MFD_COLOUR4);

  02825	b8 04 00 00 00	 mov	 eax, 4
  0282a	6b c8 03	 imul	 ecx, eax, 3
  0282d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02833	52		 push	 edx
  02834	e8 00 00 00 00	 call	 ?display_waypoint_information@@YGXUREAL_COLOUR@@@Z ; display_waypoint_information
$LN118@draw_tacti:

; 4678 : 	}
; 4679 : /*	
; 4680 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)
; 4681 : 	{
; 4682 : 		// pointer
; 4683 : 		draw_2d_mono_sprite (large_tsd_pointer_cross_mask, pointer_position_x, pointer_position_y, MFD_COLOUR4);
; 4684 : 		draw_2d_mono_sprite (large_tsd_pointer_cross, pointer_position_x, pointer_position_y, MFD_COLOUR1);
; 4685 : 		
; 4686 : 
; 4687 : 		if (is_holding_left_button())   // is creating a pfz
; 4688 : 			draw_box(clicked_position_x, clicked_position_y, pointer_position_x, pointer_position_y, FALSE, MFD_COLOUR_RED);
; 4689 : 		if (is_holding_right_button())  // is creating a nfz
; 4690 : 			draw_box(clicked_position_x, clicked_position_y, pointer_position_x, pointer_position_y, FALSE, MFD_COLOUR_BLUE);
; 4691 : 	}
; 4692 : */
; 4693 : }

  02839	5f		 pop	 edi
  0283a	5e		 pop	 esi
  0283b	5b		 pop	 ebx
  0283c	8b e5		 mov	 esp, ebp
  0283e	5d		 pop	 ebp
  0283f	c3		 ret	 0
$LN244@draw_tacti:
  02840	00 00 00 00	 DD	 $LN73@draw_tacti
  02844	00 00 00 00	 DD	 $LN74@draw_tacti
  02848	00 00 00 00	 DD	 $LN74@draw_tacti
  0284c	00 00 00 00	 DD	 $LN75@draw_tacti
  02850	00 00 00 00	 DD	 $LN75@draw_tacti
  02854	00 00 00 00	 DD	 $LN75@draw_tacti
  02858	00 00 00 00	 DD	 $LN77@draw_tacti
  0285c	00 00 00 00	 DD	 $LN77@draw_tacti
  02860	00 00 00 00	 DD	 $LN76@draw_tacti
$LN245@draw_tacti:
  02864	00 00 00 00	 DD	 $LN80@draw_tacti
  02868	00 00 00 00	 DD	 $LN81@draw_tacti
  0286c	00 00 00 00	 DD	 $LN82@draw_tacti
  02870	00 00 00 00	 DD	 $LN83@draw_tacti
  02874	00 00 00 00	 DD	 $LN84@draw_tacti
  02878	00 00 00 00	 DD	 $LN85@draw_tacti
  0287c	00 00 00 00	 DD	 $LN87@draw_tacti
  02880	00 00 00 00	 DD	 $LN87@draw_tacti
  02884	00 00 00 00	 DD	 $LN86@draw_tacti
?draw_tactical_situation_display_mfd@@YGXXZ ENDP	; draw_tactical_situation_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_2d_dvo_mfd@@YGXHH@Z
_TEXT	SEGMENT
_valid_3d$ = 8						; size = 4
_scaled_3d$ = 12					; size = 4
?draw_2d_dvo_mfd@@YGXHH@Z PROC				; draw_2d_dvo_mfd, COMDAT

; 3908 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3909 : 	draw_2d_eo_display (&default_dvo, TARGET_ACQUISITION_SYSTEM_DVO, default_damage.dvo, valid_3d, scaled_3d);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _scaled_3d$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _valid_3d$[ebp]
  00010	51		 push	 ecx
  00011	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  00017	c1 ea 04	 shr	 edx, 4
  0001a	83 e2 01	 and	 edx, 1
  0001d	52		 push	 edx
  0001e	6a 05		 push	 5
  00020	68 00 00 00 00	 push	 OFFSET ?default_dvo@@3UEO_PARAMS@@A ; default_dvo
  00025	e8 00 00 00 00	 call	 ?draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z ; draw_2d_eo_display

; 3910 : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?draw_2d_dvo_mfd@@YGXHH@Z ENDP				; draw_2d_dvo_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_3d_dvo_mfd@@YGXW4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_location$ = 8						; size = 4
?draw_3d_dvo_mfd@@YGXW4MFD_LOCATIONS@@@Z PROC		; draw_3d_dvo_mfd, COMDAT

; 3896 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3897 : 	if (!default_damage.dvo)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  0000e	c1 e8 04	 shr	 eax, 4
  00011	83 e0 01	 and	 eax, 1
  00014	75 10		 jne	 SHORT $LN1@draw_3d_dv

; 3898 : 	{
; 3899 : 		draw_3d_eo_display (&default_dvo, TARGET_ACQUISITION_SYSTEM_DVO, location);

  00016	8b 45 08	 mov	 eax, DWORD PTR _location$[ebp]
  00019	50		 push	 eax
  0001a	6a 05		 push	 5
  0001c	68 00 00 00 00	 push	 OFFSET ?default_dvo@@3UEO_PARAMS@@A ; default_dvo
  00021	e8 00 00 00 00	 call	 ?draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z ; draw_3d_eo_display
$LN1@draw_3d_dv:

; 3900 : 	}
; 3901 : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?draw_3d_dvo_mfd@@YGXW4MFD_LOCATIONS@@@Z ENDP		; draw_3d_dvo_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_2d_dtv_mfd@@YGXHH@Z
_TEXT	SEGMENT
_valid_3d$ = 8						; size = 4
_scaled_3d$ = 12					; size = 4
?draw_2d_dtv_mfd@@YGXHH@Z PROC				; draw_2d_dtv_mfd, COMDAT

; 3881 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3882 : 	draw_2d_eo_display (&default_dtv, TARGET_ACQUISITION_SYSTEM_DTV, default_damage.dtv, valid_3d, scaled_3d);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _scaled_3d$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _valid_3d$[ebp]
  00010	51		 push	 ecx
  00011	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  00017	c1 ea 03	 shr	 edx, 3
  0001a	83 e2 01	 and	 edx, 1
  0001d	52		 push	 edx
  0001e	6a 04		 push	 4
  00020	68 00 00 00 00	 push	 OFFSET ?default_dtv@@3UEO_PARAMS@@A ; default_dtv
  00025	e8 00 00 00 00	 call	 ?draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z ; draw_2d_eo_display

; 3883 : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?draw_2d_dtv_mfd@@YGXHH@Z ENDP				; draw_2d_dtv_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_3d_dtv_mfd@@YGXW4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_location$ = 8						; size = 4
?draw_3d_dtv_mfd@@YGXW4MFD_LOCATIONS@@@Z PROC		; draw_3d_dtv_mfd, COMDAT

; 3869 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3870 : 	if (!default_damage.dtv)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  0000e	c1 e8 03	 shr	 eax, 3
  00011	83 e0 01	 and	 eax, 1
  00014	75 10		 jne	 SHORT $LN1@draw_3d_dt

; 3871 : 	{
; 3872 : 		draw_3d_eo_display (&default_dtv, TARGET_ACQUISITION_SYSTEM_DTV, location);

  00016	8b 45 08	 mov	 eax, DWORD PTR _location$[ebp]
  00019	50		 push	 eax
  0001a	6a 04		 push	 4
  0001c	68 00 00 00 00	 push	 OFFSET ?default_dtv@@3UEO_PARAMS@@A ; default_dtv
  00021	e8 00 00 00 00	 call	 ?draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z ; draw_3d_eo_display
$LN1@draw_3d_dt:

; 3873 : 	}
; 3874 : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?draw_3d_dtv_mfd@@YGXW4MFD_LOCATIONS@@@Z ENDP		; draw_3d_dtv_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_2d_flir_mfd@@YGXHH@Z
_TEXT	SEGMENT
_valid_3d$ = 8						; size = 4
_scaled_3d$ = 12					; size = 4
?draw_2d_flir_mfd@@YGXHH@Z PROC				; draw_2d_flir_mfd, COMDAT

; 3854 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3855 : 	draw_2d_eo_display (&default_flir, TARGET_ACQUISITION_SYSTEM_FLIR, default_damage.flir, valid_3d, scaled_3d);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _scaled_3d$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _valid_3d$[ebp]
  00010	51		 push	 ecx
  00011	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  00017	c1 ea 02	 shr	 edx, 2
  0001a	83 e2 01	 and	 edx, 1
  0001d	52		 push	 edx
  0001e	6a 03		 push	 3
  00020	68 00 00 00 00	 push	 OFFSET ?default_flir@@3UEO_PARAMS@@A ; default_flir
  00025	e8 00 00 00 00	 call	 ?draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z ; draw_2d_eo_display

; 3856 : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?draw_2d_flir_mfd@@YGXHH@Z ENDP				; draw_2d_flir_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_3d_flir_mfd@@YGXW4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_location$ = 8						; size = 4
?draw_3d_flir_mfd@@YGXW4MFD_LOCATIONS@@@Z PROC		; draw_3d_flir_mfd, COMDAT

; 3842 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3843 : 	if (!default_damage.flir)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  0000e	c1 e8 02	 shr	 eax, 2
  00011	83 e0 01	 and	 eax, 1
  00014	75 10		 jne	 SHORT $LN1@draw_3d_fl

; 3844 : 	{
; 3845 : 		draw_3d_eo_display (&default_flir, TARGET_ACQUISITION_SYSTEM_FLIR, location);

  00016	8b 45 08	 mov	 eax, DWORD PTR _location$[ebp]
  00019	50		 push	 eax
  0001a	6a 03		 push	 3
  0001c	68 00 00 00 00	 push	 OFFSET ?default_flir@@3UEO_PARAMS@@A ; default_flir
  00021	e8 00 00 00 00	 call	 ?draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z ; draw_3d_eo_display
$LN1@draw_3d_fl:

; 3846 : 	}
; 3847 : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?draw_3d_flir_mfd@@YGXW4MFD_LOCATIONS@@@Z ENDP		; draw_3d_flir_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z
_TEXT	SEGMENT
tv83 = -172						; size = 4
tv582 = -168						; size = 4
tv166 = -168						; size = 4
tv132 = -168						; size = 4
tv75 = -168						; size = 4
_visibility$ = -100					; size = 4
_tmp$ = -96						; size = 48
_target_point$ = -48					; size = 12
_target$ = -36						; size = 4
_source$ = -32						; size = 4
_y$ = -28						; size = 4
_x$ = -24						; size = 4
_j$ = -20						; size = 4
_i$ = -16						; size = 4
_y_adjust$ = -12					; size = 4
_width$ = -8						; size = 4
_s$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
_damaged$ = 16						; size = 4
_valid_3d$ = 20						; size = 4
_scaled_3d$ = 24					; size = 4
?draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z PROC ; draw_2d_eo_display, COMDAT

; 3532 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3533 : 	const char
; 3534 : 		*s;
; 3535 : 
; 3536 : 	float
; 3537 : 		width,
; 3538 : 		y_adjust,
; 3539 : 		i,
; 3540 : 		j,
; 3541 : 		x,
; 3542 : 		y;
; 3543 : 
; 3544 : 	entity
; 3545 : 		*source,
; 3546 : 		*target;
; 3547 : 
; 3548 : 	vec3d
; 3549 : 		target_point;
; 3550 : 
; 3551 : 	viewpoint
; 3552 : 		tmp;
; 3553 : 
; 3554 : 	object_3d_visibility
; 3555 : 		visibility;
; 3556 : 
; 3557 : 	ASSERT (eo);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  00010	75 18		 jne	 SHORT $LN6@draw_2d_eo
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z@4JA
  00017	83 c0 19	 add	 eax, 25			; 00000019H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@draw_2d_eo:

; 3558 : 
; 3559 : 
; 3560 : 	source = get_gunship_entity ();

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0002f	89 45 e0	 mov	 DWORD PTR _source$[ebp], eax

; 3561 : 	target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  00032	83 7d e0 00	 cmp	 DWORD PTR _source$[ebp], 0
  00036	74 0d		 je	 SHORT $LN39@draw_2d_eo
  00038	8b 45 e0	 mov	 eax, DWORD PTR _source$[ebp]
  0003b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003d	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv75[ebp], ecx
  00043	eb 24		 jmp	 SHORT $LN40@draw_2d_eo
$LN39@draw_2d_eo:
  00045	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z@4JA
  0004b	83 c2 1d	 add	 edx, 29			; 0000001dH
  0004e	52		 push	 edx
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0005f	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv75[ebp], 0
$LN40@draw_2d_eo:
  00069	b9 01 00 00 00	 mov	 ecx, 1
  0006e	85 c9		 test	 ecx, ecx
  00070	74 0c		 je	 SHORT $LN41@draw_2d_eo
  00072	c7 85 54 ff ff
	ff 26 00 00 00	 mov	 DWORD PTR tv83[ebp], 38	; 00000026H
  0007c	eb 24		 jmp	 SHORT $LN42@draw_2d_eo
$LN41@draw_2d_eo:
  0007e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z@4JA
  00084	83 c2 1d	 add	 edx, 29			; 0000001dH
  00087	52		 push	 edx
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00098	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv83[ebp], 0
$LN42@draw_2d_eo:
  000a2	6a 26		 push	 38			; 00000026H
  000a4	8b 4d e0	 mov	 ecx, DWORD PTR _source$[ebp]
  000a7	51		 push	 ecx
  000a8	69 95 58 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv75[ebp], 180
  000b2	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR tv83[ebp]
  000b8	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  000bf	ff d1		 call	 ecx
  000c1	89 45 dc	 mov	 DWORD PTR _target$[ebp], eax

; 3562 : 
; 3563 : 	////////////////////////////////////////
; 3564 : 	//
; 3565 : 	// text
; 3566 : 	//
; 3567 : 	////////////////////////////////////////
; 3568 : 
; 3569 : 	set_mono_font_colour (MFD_COLOUR1);

  000c4	b8 04 00 00 00	 mov	 eax, 4
  000c9	6b c8 00	 imul	 ecx, eax, 0
  000cc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000d2	52		 push	 edx
  000d3	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 3570 : 
; 3571 : 	if (draw_large_mfd)

  000d8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  000df	74 09		 je	 SHORT $LN7@draw_2d_eo

; 3572 : 	{
; 3573 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  000e1	6a 05		 push	 5
  000e3	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 3574 : 	}
; 3575 : 	else

  000e8	eb 07		 jmp	 SHORT $LN8@draw_2d_eo
$LN7@draw_2d_eo:

; 3576 : 	{
; 3577 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  000ea	6a 01		 push	 1
  000ec	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN8@draw_2d_eo:

; 3578 : 	}
; 3579 : 
; 3580 : 	//
; 3581 : 	// sensor type
; 3582 : 	//
; 3583 : 
; 3584 : 	if (draw_large_mfd)

  000f1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  000f8	74 0f		 je	 SHORT $LN9@draw_2d_eo

; 3585 : 	{
; 3586 : 		y_adjust = 5.0;

  000fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  00102	f3 0f 11 45 f4	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3587 : 	}
; 3588 : 	else

  00107	eb 0d		 jmp	 SHORT $LN10@draw_2d_eo
$LN9@draw_2d_eo:

; 3589 : 	{
; 3590 : 		y_adjust = 2.0;

  00109	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00111	f3 0f 11 45 f4	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN10@draw_2d_eo:

; 3591 : 	}
; 3592 : 
; 3593 : 	set_2d_mono_font_position (-0.85, 1.0);

  00116	51		 push	 ecx
  00117	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0011f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00124	51		 push	 ecx
  00125	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  0012d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00132	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3594 : 
; 3595 : 	set_mono_font_rel_position (1.0, y_adjust);

  00137	51		 push	 ecx
  00138	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0013d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00142	51		 push	 ecx
  00143	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0014b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00150	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3596 : 
; 3597 : 	switch (system)

  00155	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  00158	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv132[ebp], eax
  0015e	83 bd 58 ff ff
	ff 03		 cmp	 DWORD PTR tv132[ebp], 3
  00165	74 14		 je	 SHORT $LN11@draw_2d_eo
  00167	83 bd 58 ff ff
	ff 04		 cmp	 DWORD PTR tv132[ebp], 4
  0016e	74 17		 je	 SHORT $LN12@draw_2d_eo
  00170	83 bd 58 ff ff
	ff 05		 cmp	 DWORD PTR tv132[ebp], 5
  00177	74 1a		 je	 SHORT $LN13@draw_2d_eo
  00179	eb 24		 jmp	 SHORT $LN14@draw_2d_eo
$LN11@draw_2d_eo:

; 3598 : 	{
; 3599 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 3600 : 		{
; 3601 : 			print_mono_font_string ("FLIR");

  0017b	68 00 00 00 00	 push	 OFFSET ??_C@_04MIGKMLBH@FLIR@
  00180	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3602 : 
; 3603 : 			break;

  00185	eb 22		 jmp	 SHORT $LN2@draw_2d_eo
$LN12@draw_2d_eo:

; 3604 : 		}
; 3605 : 		case TARGET_ACQUISITION_SYSTEM_DTV:
; 3606 : 		{
; 3607 : 			print_mono_font_string ("DTV");

  00187	68 00 00 00 00	 push	 OFFSET ??_C@_03ENJJJDDH@DTV@
  0018c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3608 : 
; 3609 : 			break;

  00191	eb 16		 jmp	 SHORT $LN2@draw_2d_eo
$LN13@draw_2d_eo:

; 3610 : 		}
; 3611 : 		case TARGET_ACQUISITION_SYSTEM_DVO:
; 3612 : 		{
; 3613 : 			print_mono_font_string ("DVO");

  00193	68 00 00 00 00	 push	 OFFSET ??_C@_03NFBNOOEB@DVO@
  00198	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3614 : 
; 3615 : 			break;

  0019d	eb 0a		 jmp	 SHORT $LN2@draw_2d_eo
$LN14@draw_2d_eo:

; 3616 : 		}
; 3617 : 		default:
; 3618 : 		{
; 3619 : 			print_mono_font_string ("XXX");

  0019f	68 00 00 00 00	 push	 OFFSET ??_C@_03MAMPKPPK@XXX@
  001a4	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN2@draw_2d_eo:

; 3620 : 
; 3621 : 			break;
; 3622 : 		}
; 3623 : 	}
; 3624 : 
; 3625 : 	//
; 3626 : 	// damaged
; 3627 : 	//
; 3628 : 
; 3629 : 	if (damaged)

  001a9	83 7d 10 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  001ad	0f 84 9d 00 00
	00		 je	 $LN15@draw_2d_eo

; 3630 : 	{
; 3631 : 		draw_2d_line (-0.5, -0.5,  0.5, 0.5, MFD_COLOUR1);

  001b3	b8 04 00 00 00	 mov	 eax, 4
  001b8	6b c8 00	 imul	 ecx, eax, 0
  001bb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001c1	52		 push	 edx
  001c2	51		 push	 ecx
  001c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d0	51		 push	 ecx
  001d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001de	51		 push	 ecx
  001df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  001e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ec	51		 push	 ecx
  001ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  001f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fa	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3632 : 		draw_2d_line ( 0.5, -0.5, -0.5, 0.5, MFD_COLOUR1);

  001ff	b8 04 00 00 00	 mov	 eax, 4
  00204	6b c8 00	 imul	 ecx, eax, 0
  00207	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0020d	52		 push	 edx
  0020e	51		 push	 ecx
  0020f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00217	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021c	51		 push	 ecx
  0021d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00225	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022a	51		 push	 ecx
  0022b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00233	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00238	51		 push	 ecx
  00239	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00241	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00246	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3633 : 
; 3634 : 		return;

  0024b	e9 bb 08 00 00	 jmp	 $LN1@draw_2d_eo
$LN15@draw_2d_eo:

; 3635 : 	}
; 3636 : 
; 3637 : 	if (eo_low_light)

  00250	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_low_light@@3HA, 0 ; eo_low_light
  00257	0f 84 82 00 00
	00		 je	 $LN18@draw_2d_eo

; 3638 : 	{
; 3639 : 		set_2d_mono_font_position (-0.8, 0.9);

  0025d	51		 push	 ecx
  0025e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  00266	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026b	51		 push	 ecx
  0026c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00274	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00279	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3640 : 
; 3641 : 		if (draw_large_mfd)

  0027e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00285	74 2d		 je	 SHORT $LN17@draw_2d_eo

; 3642 : 		{
; 3643 : 			set_mono_font_rel_position (1.0, 2.0);

  00287	51		 push	 ecx
  00288	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00290	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00295	51		 push	 ecx
  00296	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0029e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a3	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3644 : 
; 3645 : 			print_mono_font_string ("LO LIGHT");

  002a8	68 00 00 00 00	 push	 OFFSET ??_C@_08JFLECGBM@LO?5LIGHT@
  002ad	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3646 : 		}
; 3647 : 		else

  002b2	eb 2b		 jmp	 SHORT $LN18@draw_2d_eo
$LN17@draw_2d_eo:

; 3648 : 		{
; 3649 : 			set_mono_font_rel_position (1.0, 2.0);

  002b4	51		 push	 ecx
  002b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  002bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c2	51		 push	 ecx
  002c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d0	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3650 : 
; 3651 : 			print_mono_font_string ("LO");

  002d5	68 00 00 00 00	 push	 OFFSET ??_C@_02ONPABID@LO@
  002da	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN18@draw_2d_eo:

; 3652 : 		}
; 3653 : 	}
; 3654 : 
; 3655 : 	//
; 3656 : 	// field of view
; 3657 : 	//
; 3658 : 
; 3659 : 	switch (eo->field_of_view)

  002df	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  002e2	8b 08		 mov	 ecx, DWORD PTR [eax]
  002e4	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv166[ebp], ecx
  002ea	83 bd 58 ff ff
	ff 03		 cmp	 DWORD PTR tv166[ebp], 3
  002f1	77 31		 ja	 SHORT $LN23@draw_2d_eo
  002f3	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR tv166[ebp]
  002f9	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN43@draw_2d_eo[edx*4]
$LN19@draw_2d_eo:

; 3660 : 	{
; 3661 : 		case EO_FOV_ZOOM:
; 3662 : 			s = "ZOOM";

  00300	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04LGBIGMFG@ZOOM@

; 3663 : 			break;

  00307	eb 22		 jmp	 SHORT $LN4@draw_2d_eo
$LN20@draw_2d_eo:

; 3664 : 		case EO_FOV_NARROW:
; 3665 : 			s = "NAR";

  00309	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03FMKFNHMM@NAR@

; 3666 : 			break;

  00310	eb 19		 jmp	 SHORT $LN4@draw_2d_eo
$LN21@draw_2d_eo:

; 3667 : 		case EO_FOV_MEDIUM:
; 3668 : 			s = "MED";

  00312	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03FFIBGFCJ@MED@

; 3669 : 			break;

  00319	eb 10		 jmp	 SHORT $LN4@draw_2d_eo
$LN22@draw_2d_eo:

; 3670 : 		case EO_FOV_WIDE:
; 3671 : 			s = "WIDE";

  0031b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04KPGPJCNC@WIDE@

; 3672 : 			break;

  00322	eb 07		 jmp	 SHORT $LN4@draw_2d_eo
$LN23@draw_2d_eo:

; 3673 : 		default:
; 3674 : 			s = "XXX";

  00324	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN4@draw_2d_eo:

; 3675 : 			break;
; 3676 : 	}
; 3677 : 
; 3678 : 	width = get_mono_font_string_width (s);

  0032b	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0032e	50		 push	 eax
  0032f	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00334	d9 5d f8	 fstp	 DWORD PTR _width$[ebp]

; 3679 : 
; 3680 : 	if (draw_large_mfd)

  00337	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0033e	74 0f		 je	 SHORT $LN24@draw_2d_eo

; 3681 : 	{
; 3682 : 		y_adjust = 5.0;

  00340	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  00348	f3 0f 11 45 f4	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3683 : 	}
; 3684 : 	else

  0034d	eb 0d		 jmp	 SHORT $LN25@draw_2d_eo
$LN24@draw_2d_eo:

; 3685 : 	{
; 3686 : 		y_adjust = 2.0;

  0034f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00357	f3 0f 11 45 f4	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN25@draw_2d_eo:

; 3687 : 	}
; 3688 : 
; 3689 : 	set_2d_mono_font_position (0.85, 1.0);

  0035c	51		 push	 ecx
  0035d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00365	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036a	51		 push	 ecx
  0036b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  00373	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00378	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3690 : 
; 3691 : 	set_mono_font_rel_position (-width, y_adjust);

  0037d	51		 push	 ecx
  0037e	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00383	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00388	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width$[ebp]
  0038d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00394	51		 push	 ecx
  00395	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3692 : 
; 3693 : 	print_mono_font_string (s);

  0039f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  003a2	50		 push	 eax
  003a3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3694 : 
; 3695 : 	//
; 3696 : 	// locked
; 3697 : 	//
; 3698 : 
; 3699 : 	if (eo_is_locked())

  003a8	e8 00 00 00 00	 call	 ?eo_is_locked@@YGHXZ	; eo_is_locked
  003ad	85 c0		 test	 eax, eax
  003af	74 63		 je	 SHORT $LN26@draw_2d_eo

; 3700 : 	{
; 3701 : 		width = get_mono_font_string_width ("LOCKED");

  003b1	68 00 00 00 00	 push	 OFFSET ??_C@_06KODELPLK@LOCKED@
  003b6	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  003bb	d9 5d f8	 fstp	 DWORD PTR _width$[ebp]

; 3702 : 		set_2d_mono_font_position (0.0, -0.6);

  003be	51		 push	 ecx
  003bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  003c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003cc	51		 push	 ecx
  003cd	0f 57 c0	 xorps	 xmm0, xmm0
  003d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d5	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3703 : 		set_mono_font_rel_position (-width * 0.5, 0);

  003da	51		 push	 ecx
  003db	0f 57 c0	 xorps	 xmm0, xmm0
  003de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e3	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width$[ebp]
  003e8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  003ef	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  003f3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  003fb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003ff	51		 push	 ecx
  00400	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00405	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3704 : 		print_mono_font_string ("LOCKED");

  0040a	68 00 00 00 00	 push	 OFFSET ??_C@_06KODELPLK@LOCKED@
  0040f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN26@draw_2d_eo:

; 3705 : 	}
; 3706 : 
; 3707 : 	if (laser_is_active())

  00414	e8 00 00 00 00	 call	 ?laser_is_active@@YGHXZ	; laser_is_active
  00419	85 c0		 test	 eax, eax
  0041b	0f 84 91 00 00
	00		 je	 $LN29@draw_2d_eo

; 3708 : 	{
; 3709 : 		tads_lase_flash_timer -= get_delta_time();

  00421	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tads_lase_flash_timer@@3MA
  00429	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00431	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tads_lase_flash_timer@@3MA, xmm0

; 3710 : 		
; 3711 : 		if (tads_lase_flash_timer < 0.0)

  00439	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?tads_lase_flash_timer@@3MA
  00441	0f 57 c9	 xorps	 xmm1, xmm1
  00444	66 0f 2f c8	 comisd	 xmm1, xmm0
  00448	76 1d		 jbe	 SHORT $LN28@draw_2d_eo

; 3712 : 		{
; 3713 : 			tads_lase_flash_timer = TADS_LASE_FLASH_RATE;

  0044a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00452	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tads_lase_flash_timer@@3MA, xmm0

; 3714 : 
; 3715 : 			tads_display_lase_status ^= 1;

  0045a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tads_display_lase_status@@3HA
  0045f	83 f0 01	 xor	 eax, 1
  00462	a3 00 00 00 00	 mov	 DWORD PTR ?tads_display_lase_status@@3HA, eax
$LN28@draw_2d_eo:

; 3716 : 		}
; 3717 : 		
; 3718 : 		if (tads_display_lase_status)

  00467	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?tads_display_lase_status@@3HA, 0
  0046e	74 42		 je	 SHORT $LN29@draw_2d_eo

; 3719 : 		{
; 3720 : 			set_2d_mono_font_position (0.2, -0.25);

  00470	51		 push	 ecx
  00471	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  00479	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047e	51		 push	 ecx
  0047f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00487	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0048c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3721 : 			set_mono_font_rel_position (0, 0);

  00491	51		 push	 ecx
  00492	0f 57 c0	 xorps	 xmm0, xmm0
  00495	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0049a	51		 push	 ecx
  0049b	0f 57 c0	 xorps	 xmm0, xmm0
  0049e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a3	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3722 : 			print_mono_font_string ("L");

  004a8	68 00 00 00 00	 push	 OFFSET ??_C@_01OCOKONAJ@L@
  004ad	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN29@draw_2d_eo:

; 3723 : 		}
; 3724 : 	}
; 3725 : 
; 3726 : // added ground stabi by GCsDriver
; 3727 : 	//
; 3728 : 	// 030418 loke
; 3729 : 	// draw an indication if ground stablisation is enabled
; 3730 : 	//
; 3731 : 
; 3732 : 	if (eo_ground_stabilised)

  004b2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_ground_stabilised@@3HA, 0 ; eo_ground_stabilised
  004b9	74 7f		 je	 SHORT $LN30@draw_2d_eo

; 3733 : 	{
; 3734 : 		if (draw_large_mfd) // Jabberwock 031107 Designated targets - moved the stab indicator one line up, sorry!

  004bb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  004c2	74 0f		 je	 SHORT $LN31@draw_2d_eo

; 3735 : 		{
; 3736 : 			y_adjust = -38.0;

  004c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2180000
  004cc	f3 0f 11 45 f4	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3737 : 		}
; 3738 : 		else

  004d1	eb 0d		 jmp	 SHORT $LN32@draw_2d_eo
$LN31@draw_2d_eo:

; 3739 : 		{
; 3740 : 			y_adjust = -19.0;

  004d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1980000
  004db	f3 0f 11 45 f4	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN32@draw_2d_eo:

; 3741 : 		}
; 3742 : 
; 3743 : 		width = get_mono_font_string_width ("S");

  004e0	68 00 00 00 00	 push	 OFFSET ??_C@_01CPLAODJH@S@
  004e5	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  004ea	d9 5d f8	 fstp	 DWORD PTR _width$[ebp]

; 3744 : 
; 3745 : 		set_2d_mono_font_position (1.0, -1.0);

  004ed	51		 push	 ecx
  004ee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  004f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fb	51		 push	 ecx
  004fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00504	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00509	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3746 : 
; 3747 : 		set_mono_font_rel_position (-width, y_adjust);

  0050e	51		 push	 ecx
  0050f	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00514	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00519	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width$[ebp]
  0051e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00525	51		 push	 ecx
  00526	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0052b	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3748 : 
; 3749 : 		print_mono_font_string ("S");

  00530	68 00 00 00 00	 push	 OFFSET ??_C@_01CPLAODJH@S@
  00535	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN30@draw_2d_eo:

; 3750 : 	}
; 3751 : 
; 3752 : 	draw_high_action_display (target, TRUE);

  0053a	6a 01		 push	 1
  0053c	8b 45 dc	 mov	 eax, DWORD PTR _target$[ebp]
  0053f	50		 push	 eax
  00540	e8 00 00 00 00	 call	 ?draw_high_action_display@@YGXPAUENTITY@@H@Z ; draw_high_action_display

; 3753 : 
; 3754 : 	////////////////////////////////////////
; 3755 : 	//
; 3756 : 	// draw heading scale
; 3757 : 	//
; 3758 : 	////////////////////////////////////////
; 3759 : 
; 3760 : 	draw_heading_scale (get_heading_from_attitude_matrix (eo_vp.attitude));

  00545	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0054a	d1 e0		 shl	 eax, 1
  0054c	b9 04 00 00 00	 mov	 ecx, 4
  00551	d1 e1		 shl	 ecx, 1
  00553	51		 push	 ecx
  00554	f3 0f 10 84 08
	0c 00 00 00	 movss	 xmm0, DWORD PTR ?eo_vp@@3UVIEWPOINT@@A[eax+ecx+12]
  0055d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00562	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00567	d1 e2		 shl	 edx, 1
  00569	b8 04 00 00 00	 mov	 eax, 4
  0056e	6b c8 00	 imul	 ecx, eax, 0
  00571	51		 push	 ecx
  00572	f3 0f 10 84 0a
	0c 00 00 00	 movss	 xmm0, DWORD PTR ?eo_vp@@3UVIEWPOINT@@A[edx+ecx+12]
  0057b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00580	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  00585	d9 9d 58 ff ff
	ff		 fstp	 DWORD PTR tv582[ebp]
  0058b	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR tv582[ebp]
  00593	51		 push	 ecx
  00594	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00599	e8 00 00 00 00	 call	 ?draw_heading_scale@@YGXM@Z ; draw_heading_scale

; 3761 : 
; 3762 : 	////////////////////////////////////////
; 3763 : 	//
; 3764 : 	// line graphics
; 3765 : 	//
; 3766 : 	////////////////////////////////////////
; 3767 : 
; 3768 : 	//
; 3769 : 	// datum
; 3770 : 	//
; 3771 : 
; 3772 : //	if (draw_large_mfd)
; 3773 : 	{
; 3774 : 		draw_2d_line (-0.200, 0.0, -0.050, 0.0, MFD_COLOUR1);

  0059e	b8 04 00 00 00	 mov	 eax, 4
  005a3	6b c8 00	 imul	 ecx, eax, 0
  005a6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005ac	52		 push	 edx
  005ad	51		 push	 ecx
  005ae	0f 57 c0	 xorps	 xmm0, xmm0
  005b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b6	51		 push	 ecx
  005b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  005bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c4	51		 push	 ecx
  005c5	0f 57 c0	 xorps	 xmm0, xmm0
  005c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005cd	51		 push	 ecx
  005ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  005d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005db	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3775 : 		draw_2d_line (0.050, 0.0, 0.20, 0.0, MFD_COLOUR1);

  005e0	b8 04 00 00 00	 mov	 eax, 4
  005e5	6b c8 00	 imul	 ecx, eax, 0
  005e8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005ee	52		 push	 edx
  005ef	51		 push	 ecx
  005f0	0f 57 c0	 xorps	 xmm0, xmm0
  005f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f8	51		 push	 ecx
  005f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00601	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00606	51		 push	 ecx
  00607	0f 57 c0	 xorps	 xmm0, xmm0
  0060a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0060f	51		 push	 ecx
  00610	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  00618	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0061d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3776 : 		draw_2d_line (0.0, -0.200, 0.0, -0.050, MFD_COLOUR1);

  00622	b8 04 00 00 00	 mov	 eax, 4
  00627	6b c8 00	 imul	 ecx, eax, 0
  0062a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00630	52		 push	 edx
  00631	51		 push	 ecx
  00632	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  0063a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063f	51		 push	 ecx
  00640	0f 57 c0	 xorps	 xmm0, xmm0
  00643	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00648	51		 push	 ecx
  00649	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00651	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00656	51		 push	 ecx
  00657	0f 57 c0	 xorps	 xmm0, xmm0
  0065a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0065f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3777 : 		draw_2d_line (0.0, 0.050, 0.0, 0.20, MFD_COLOUR1);

  00664	b8 04 00 00 00	 mov	 eax, 4
  00669	6b c8 00	 imul	 ecx, eax, 0
  0066c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00672	52		 push	 edx
  00673	51		 push	 ecx
  00674	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0067c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00681	51		 push	 ecx
  00682	0f 57 c0	 xorps	 xmm0, xmm0
  00685	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0068a	51		 push	 ecx
  0068b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  00693	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00698	51		 push	 ecx
  00699	0f 57 c0	 xorps	 xmm0, xmm0
  0069c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3778 : 	}
; 3779 : /*	else
; 3780 : 	{
; 3781 : 		draw_2d_line (-0.075, 0.0, -0.025, 0.0, MFD_COLOUR1);
; 3782 : 		draw_2d_line (0.035, 0.0, 0.09, 0.0, MFD_COLOUR1);
; 3783 : 		draw_2d_line (0.0, -0.075, 0.0, -0.025, MFD_COLOUR1);
; 3784 : 		draw_2d_line (0.0, 0.035, 0.0, 0.09, MFD_COLOUR1);
; 3785 : 	}*/
; 3786 : 
; 3787 : 	//
; 3788 : 	// target gates
; 3789 : 	//
; 3790 : 
; 3791 : 	if (target)

  006a6	83 7d dc 00	 cmp	 DWORD PTR _target$[ebp], 0
  006aa	0f 84 5b 04 00
	00		 je	 $LN34@draw_2d_eo

; 3792 : 	{
; 3793 : 		if (valid_3d)

  006b0	83 7d 14 00	 cmp	 DWORD PTR _valid_3d$[ebp], 0
  006b4	0f 84 51 04 00
	00		 je	 $LN34@draw_2d_eo

; 3794 : 		{
; 3795 : 			tmp = main_vp;

  006ba	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  006bf	be 00 00 00 00	 mov	 esi, OFFSET ?main_vp@@3UVIEWPOINT@@A ; main_vp
  006c4	8d 7d a0	 lea	 edi, DWORD PTR _tmp$[ebp]
  006c7	f3 a5		 rep movsd

; 3796 : 
; 3797 : 			main_vp = eo_vp;

  006c9	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  006ce	be 00 00 00 00	 mov	 esi, OFFSET ?eo_vp@@3UVIEWPOINT@@A ; eo_vp
  006d3	bf 00 00 00 00	 mov	 edi, OFFSET ?main_vp@@3UVIEWPOINT@@A ; main_vp
  006d8	f3 a5		 rep movsd

; 3798 : 
; 3799 : 			get_local_entity_target_point (target, &target_point);

  006da	8d 45 d0	 lea	 eax, DWORD PTR _target_point$[ebp]
  006dd	50		 push	 eax
  006de	8b 4d dc	 mov	 ecx, DWORD PTR _target$[ebp]
  006e1	51		 push	 ecx
  006e2	e8 00 00 00 00	 call	 ?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_local_entity_target_point

; 3800 : 
; 3801 : 			visibility = get_position_3d_screen_coordinates (&target_point, &i, &j);

  006e7	8d 45 ec	 lea	 eax, DWORD PTR _j$[ebp]
  006ea	50		 push	 eax
  006eb	8d 4d f0	 lea	 ecx, DWORD PTR _i$[ebp]
  006ee	51		 push	 ecx
  006ef	8d 55 d0	 lea	 edx, DWORD PTR _target_point$[ebp]
  006f2	52		 push	 edx
  006f3	e8 00 00 00 00	 call	 ?get_position_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUVEC3D@@PAM1@Z ; get_position_3d_screen_coordinates
  006f8	89 45 9c	 mov	 DWORD PTR _visibility$[ebp], eax

; 3802 : 
; 3803 : 			if ((visibility == OBJECT_3D_COMPLETELY_VISIBLE) || (visibility == OBJECT_3D_PARTIALLY_VISIBLE))

  006fb	83 7d 9c 01	 cmp	 DWORD PTR _visibility$[ebp], 1
  006ff	74 0a		 je	 SHORT $LN36@draw_2d_eo
  00701	83 7d 9c 02	 cmp	 DWORD PTR _visibility$[ebp], 2
  00705	0f 85 f1 03 00
	00		 jne	 $LN35@draw_2d_eo
$LN36@draw_2d_eo:

; 3804 : 			{
; 3805 : 				if (scaled_3d)

  0070b	83 7d 18 00	 cmp	 DWORD PTR _scaled_3d$[ebp], 0
  0070f	74 48		 je	 SHORT $LN37@draw_2d_eo

; 3806 : 				{
; 3807 : 					i -= i_translate_3d;

  00711	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _i$[ebp]
  00716	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?i_translate_3d@@3MA
  0071e	f3 0f 11 45 f0	 movss	 DWORD PTR _i$[ebp], xmm0

; 3808 : 					j -= j_translate_3d;

  00723	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _j$[ebp]
  00728	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?j_translate_3d@@3MA
  00730	f3 0f 11 45 ec	 movss	 DWORD PTR _j$[ebp], xmm0

; 3809 : 
; 3810 : 					i *= i_scale_3d;

  00735	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _i$[ebp]
  0073a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?i_scale_3d@@3MA
  00742	f3 0f 11 45 f0	 movss	 DWORD PTR _i$[ebp], xmm0

; 3811 : 					j *= j_scale_3d;

  00747	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _j$[ebp]
  0074c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?j_scale_3d@@3MA
  00754	f3 0f 11 45 ec	 movss	 DWORD PTR _j$[ebp], xmm0
$LN37@draw_2d_eo:

; 3812 : 				}
; 3813 : 
; 3814 : 				get_2d_world_position (i, j, &x, &y);

  00759	8d 45 e4	 lea	 eax, DWORD PTR _y$[ebp]
  0075c	50		 push	 eax
  0075d	8d 4d e8	 lea	 ecx, DWORD PTR _x$[ebp]
  00760	51		 push	 ecx
  00761	51		 push	 ecx
  00762	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _j$[ebp]
  00767	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0076c	51		 push	 ecx
  0076d	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _i$[ebp]
  00772	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00777	e8 00 00 00 00	 call	 ?get_2d_world_position@@YGXMMPAM0@Z ; get_2d_world_position

; 3815 : 
; 3816 : 				draw_2d_line (x - 0.20, y + 0.20, x - 0.15, y + 0.20, MFD_COLOUR1);

  0077c	b8 04 00 00 00	 mov	 eax, 4
  00781	6b c8 00	 imul	 ecx, eax, 0
  00784	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0078a	52		 push	 edx
  0078b	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00790	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00798	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0079c	51		 push	 ecx
  0079d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a2	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  007a7	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  007af	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007b3	51		 push	 ecx
  007b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b9	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  007be	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  007c6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007ca	51		 push	 ecx
  007cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d0	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  007d5	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  007dd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007e1	51		 push	 ecx
  007e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3817 : 				draw_2d_line (x + 0.20, y + 0.20, x + 0.15, y + 0.20, MFD_COLOUR1);

  007ec	b8 04 00 00 00	 mov	 eax, 4
  007f1	6b c8 00	 imul	 ecx, eax, 0
  007f4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007fa	52		 push	 edx
  007fb	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00800	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00808	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0080c	51		 push	 ecx
  0080d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00812	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00817	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  0081f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00823	51		 push	 ecx
  00824	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00829	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  0082e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00836	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0083a	51		 push	 ecx
  0083b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00840	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00845	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0084d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00851	51		 push	 ecx
  00852	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00857	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3818 : 				draw_2d_line (x - 0.20, y - 0.20, x - 0.15, y - 0.20, MFD_COLOUR1);

  0085c	b8 04 00 00 00	 mov	 eax, 4
  00861	6b c8 00	 imul	 ecx, eax, 0
  00864	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0086a	52		 push	 edx
  0086b	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00870	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00878	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0087c	51		 push	 ecx
  0087d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00882	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00887	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  0088f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00893	51		 push	 ecx
  00894	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00899	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  0089e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  008a6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  008aa	51		 push	 ecx
  008ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008b0	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  008b5	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  008bd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  008c1	51		 push	 ecx
  008c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3819 : 				draw_2d_line (x + 0.20, y - 0.20, x + 0.15, y - 0.20, MFD_COLOUR1);

  008cc	b8 04 00 00 00	 mov	 eax, 4
  008d1	6b c8 00	 imul	 ecx, eax, 0
  008d4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008da	52		 push	 edx
  008db	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  008e0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  008e8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  008ec	51		 push	 ecx
  008ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f2	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  008f7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  008ff	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00903	51		 push	 ecx
  00904	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00909	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  0090e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00916	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0091a	51		 push	 ecx
  0091b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00920	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00925	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0092d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00931	51		 push	 ecx
  00932	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00937	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3820 : 				draw_2d_line (x - 0.20, y + 0.20, x - 0.20, y + 0.15, MFD_COLOUR1);

  0093c	b8 04 00 00 00	 mov	 eax, 4
  00941	6b c8 00	 imul	 ecx, eax, 0
  00944	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0094a	52		 push	 edx
  0094b	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00950	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  00958	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0095c	51		 push	 ecx
  0095d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00962	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00967	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0096f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00973	51		 push	 ecx
  00974	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00979	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  0097e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00986	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0098a	51		 push	 ecx
  0098b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00990	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00995	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0099d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009a1	51		 push	 ecx
  009a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009a7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3821 : 				draw_2d_line (x - 0.20, y - 0.20, x - 0.20, y - 0.15, MFD_COLOUR1);

  009ac	b8 04 00 00 00	 mov	 eax, 4
  009b1	6b c8 00	 imul	 ecx, eax, 0
  009b4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009ba	52		 push	 edx
  009bb	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  009c0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  009c8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009cc	51		 push	 ecx
  009cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009d2	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  009d7	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  009df	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009e3	51		 push	 ecx
  009e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009e9	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  009ee	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  009f6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009fa	51		 push	 ecx
  009fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a00	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00a05	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00a0d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a11	51		 push	 ecx
  00a12	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a17	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3822 : 				draw_2d_line (x + 0.20, y + 0.20, x + 0.20, y + 0.15, MFD_COLOUR1);

  00a1c	b8 04 00 00 00	 mov	 eax, 4
  00a21	6b c8 00	 imul	 ecx, eax, 0
  00a24	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a2a	52		 push	 edx
  00a2b	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00a30	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  00a38	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a3c	51		 push	 ecx
  00a3d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a42	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00a47	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00a4f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a53	51		 push	 ecx
  00a54	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a59	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00a5e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00a66	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a6a	51		 push	 ecx
  00a6b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a70	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00a75	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00a7d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a81	51		 push	 ecx
  00a82	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a87	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3823 : 				draw_2d_line (x + 0.20, y - 0.20, x + 0.20, y - 0.15, MFD_COLOUR1);

  00a8c	b8 04 00 00 00	 mov	 eax, 4
  00a91	6b c8 00	 imul	 ecx, eax, 0
  00a94	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a9a	52		 push	 edx
  00a9b	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00aa0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  00aa8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00aac	51		 push	 ecx
  00aad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ab2	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00ab7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00abf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ac3	51		 push	 ecx
  00ac4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac9	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00ace	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00ad6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ada	51		 push	 ecx
  00adb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ae0	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00ae5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00aed	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00af1	51		 push	 ecx
  00af2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00af7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN35@draw_2d_eo:

; 3824 : 			}
; 3825 : 
; 3826 : 			main_vp = tmp;

  00afc	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00b01	8d 75 a0	 lea	 esi, DWORD PTR _tmp$[ebp]
  00b04	bf 00 00 00 00	 mov	 edi, OFFSET ?main_vp@@3UVIEWPOINT@@A ; main_vp
  00b09	f3 a5		 rep movsd
$LN34@draw_2d_eo:
$LN1@draw_2d_eo:

; 3827 : 		}
; 3828 : 	}
; 3829 : }

  00b0b	5f		 pop	 edi
  00b0c	5e		 pop	 esi
  00b0d	5b		 pop	 ebx
  00b0e	8b e5		 mov	 esp, ebp
  00b10	5d		 pop	 ebp
  00b11	c2 14 00	 ret	 20			; 00000014H
$LN43@draw_2d_eo:
  00b14	00 00 00 00	 DD	 $LN19@draw_2d_eo
  00b18	00 00 00 00	 DD	 $LN20@draw_2d_eo
  00b1c	00 00 00 00	 DD	 $LN21@draw_2d_eo
  00b20	00 00 00 00	 DD	 $LN22@draw_2d_eo
?draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z ENDP ; draw_2d_eo_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z
_TEXT	SEGMENT
tv149 = -96						; size = 4
tv89 = -96						; size = 4
tv161 = -92						; size = 4
tv141 = -92						; size = 4
tv81 = -92						; size = 4
tv70 = -92						; size = 4
_day_segment_type$ = -24				; size = 4
_weather_mode$ = -20					; size = 4
_position$ = -16					; size = 4
_noise_level$ = -12					; size = 4
_light_level$ = -8					; size = 4
_zoom$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_size$ = 24						; size = 4
?draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z PROC ; draw_overlaid_3d_eo_display, COMDAT

; 3204 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3205 : 	float
; 3206 : 		zoom;
; 3207 : 
; 3208 : 	display_3d_light_levels
; 3209 : 		light_level;
; 3210 : 
; 3211 : 	display_3d_noise_levels
; 3212 : 		noise_level;
; 3213 : 
; 3214 : 	vec3d
; 3215 : 		*position;
; 3216 : 
; 3217 : 	weathermodes
; 3218 : 		weather_mode;
; 3219 : 
; 3220 : 	day_segment_types
; 3221 : 		day_segment_type;
; 3222 : 
; 3223 : 	ASSERT (eo);

  00009	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN6@draw_overl
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  00014	83 c0 13	 add	 eax, 19			; 00000013H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@draw_overl:

; 3224 : 
; 3225 : 	switch (eo->field_of_view)

  00027	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	89 4d a4	 mov	 DWORD PTR tv70[ebp], ecx
  0002f	83 7d a4 03	 cmp	 DWORD PTR tv70[ebp], 3
  00033	77 46		 ja	 SHORT $LN11@draw_overl
  00035	8b 55 a4	 mov	 edx, DWORD PTR tv70[ebp]
  00038	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN29@draw_overl[edx*4]
$LN7@draw_overl:

; 3226 : 	{
; 3227 : 		case EO_FOV_ZOOM:
; 3228 : 		{
; 3229 : 			zoom = 1.0 / 128.0;

  0003f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c000000
  00047	f3 0f 11 45 fc	 movss	 DWORD PTR _zoom$[ebp], xmm0

; 3230 : 
; 3231 : 			break;

  0004c	eb 40		 jmp	 SHORT $LN2@draw_overl
$LN8@draw_overl:

; 3232 : 		}
; 3233 : 		case EO_FOV_NARROW:
; 3234 : 		{
; 3235 : 			zoom = 1.0 / 32.0;

  0004e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d000000
  00056	f3 0f 11 45 fc	 movss	 DWORD PTR _zoom$[ebp], xmm0

; 3236 : 
; 3237 : 			break;

  0005b	eb 31		 jmp	 SHORT $LN2@draw_overl
$LN9@draw_overl:

; 3238 : 		}
; 3239 : 		case EO_FOV_MEDIUM:
; 3240 : 		{
; 3241 : 			zoom = 1.0 / 8.0;

  0005d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  00065	f3 0f 11 45 fc	 movss	 DWORD PTR _zoom$[ebp], xmm0

; 3242 : 
; 3243 : 			break;

  0006a	eb 22		 jmp	 SHORT $LN2@draw_overl
$LN10@draw_overl:

; 3244 : 		}
; 3245 : 		case EO_FOV_WIDE:
; 3246 : 		{
; 3247 : 			zoom = 1.0;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00074	f3 0f 11 45 fc	 movss	 DWORD PTR _zoom$[ebp], xmm0

; 3248 : 
; 3249 : 			break;

  00079	eb 13		 jmp	 SHORT $LN2@draw_overl
$LN11@draw_overl:

; 3250 : 		}
; 3251 : 		default:
; 3252 : 		{
; 3253 : 			debug_fatal ("Invalid field of view = %d", eo->field_of_view);

  0007b	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  0007e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00080	51		 push	 ecx
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@MNOBOANG@Invalid?5field?5of?5view?5?$DN?5?$CFd@
  00086	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0008b	83 c4 08	 add	 esp, 8
$LN2@draw_overl:

; 3254 : 
; 3255 : 			break;
; 3256 : 		}
; 3257 : 	}
; 3258 : 
; 3259 : 	position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  0008e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00095	74 0c		 je	 SHORT $LN21@draw_overl
  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	89 4d a4	 mov	 DWORD PTR tv81[ebp], ecx
  000a1	eb 21		 jmp	 SHORT $LN22@draw_overl
$LN21@draw_overl:
  000a3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  000a9	83 c2 37	 add	 edx, 55			; 00000037H
  000ac	52		 push	 edx
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000bd	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN22@draw_overl:
  000c4	b9 01 00 00 00	 mov	 ecx, 1
  000c9	85 c9		 test	 ecx, ecx
  000cb	74 09		 je	 SHORT $LN23@draw_overl
  000cd	c7 45 a0 08 00
	00 00		 mov	 DWORD PTR tv89[ebp], 8
  000d4	eb 21		 jmp	 SHORT $LN24@draw_overl
$LN23@draw_overl:
  000d6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  000dc	83 c2 37	 add	 edx, 55			; 00000037H
  000df	52		 push	 edx
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000ea	50		 push	 eax
  000eb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000f0	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv89[ebp], 0
$LN24@draw_overl:
  000f7	6a 08		 push	 8
  000f9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000ff	51		 push	 ecx
  00100	6b 55 a4 60	 imul	 edx, DWORD PTR tv81[ebp], 96
  00104	8b 45 a0	 mov	 eax, DWORD PTR tv89[ebp]
  00107	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0010e	ff d1		 call	 ecx
  00110	89 45 f0	 mov	 DWORD PTR _position$[ebp], eax

; 3260 : 
; 3261 : 	weather_mode = get_simple_session_weather_at_point (position);

  00113	8b 45 f0	 mov	 eax, DWORD PTR _position$[ebp]
  00116	50		 push	 eax
  00117	e8 00 00 00 00	 call	 ?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z ; get_simple_session_weather_at_point
  0011c	89 45 ec	 mov	 DWORD PTR _weather_mode$[ebp], eax

; 3262 : 
; 3263 : 	ASSERT ((weather_mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LAST));

  0011f	83 7d ec 00	 cmp	 DWORD PTR _weather_mode$[ebp], 0
  00123	7e 06		 jle	 SHORT $LN13@draw_overl
  00125	83 7d ec 05	 cmp	 DWORD PTR _weather_mode$[ebp], 5
  00129	7c 18		 jl	 SHORT $LN12@draw_overl
$LN13@draw_overl:
  0012b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  00130	83 c0 3b	 add	 eax, 59			; 0000003bH
  00133	50		 push	 eax
  00134	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00139	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
  0013e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN12@draw_overl:

; 3264 : 
; 3265 : 	day_segment_type = (day_segment_types) get_local_entity_int_value (get_session_entity (), INT_TYPE_DAY_SEGMENT_TYPE);

  00143	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  0014a	74 0c		 je	 SHORT $LN25@draw_overl
  0014c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  00151	8b 08		 mov	 ecx, DWORD PTR [eax]
  00153	89 4d a4	 mov	 DWORD PTR tv141[ebp], ecx
  00156	eb 21		 jmp	 SHORT $LN26@draw_overl
$LN25@draw_overl:
  00158	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  0015e	83 c2 3d	 add	 edx, 61			; 0000003dH
  00161	52		 push	 edx
  00162	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00167	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0016c	50		 push	 eax
  0016d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00172	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv141[ebp], 0
$LN26@draw_overl:
  00179	b9 01 00 00 00	 mov	 ecx, 1
  0017e	85 c9		 test	 ecx, ecx
  00180	74 09		 je	 SHORT $LN27@draw_overl
  00182	c7 45 a0 27 00
	00 00		 mov	 DWORD PTR tv149[ebp], 39 ; 00000027H
  00189	eb 21		 jmp	 SHORT $LN28@draw_overl
$LN27@draw_overl:
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  00191	83 c2 3d	 add	 edx, 61			; 0000003dH
  00194	52		 push	 edx
  00195	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0019a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0019f	50		 push	 eax
  001a0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001a5	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv149[ebp], 0
$LN28@draw_overl:
  001ac	6a 27		 push	 39			; 00000027H
  001ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  001b4	51		 push	 ecx
  001b5	69 55 a4 5c 04
	00 00		 imul	 edx, DWORD PTR tv141[ebp], 1116
  001bc	8b 45 a0	 mov	 eax, DWORD PTR tv149[ebp]
  001bf	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  001c6	ff d1		 call	 ecx
  001c8	89 45 e8	 mov	 DWORD PTR _day_segment_type$[ebp], eax

; 3266 : 
; 3267 : 	ASSERT ((day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT_TYPES));

  001cb	83 7d e8 00	 cmp	 DWORD PTR _day_segment_type$[ebp], 0
  001cf	7c 06		 jl	 SHORT $LN15@draw_overl
  001d1	83 7d e8 04	 cmp	 DWORD PTR _day_segment_type$[ebp], 4
  001d5	7c 18		 jl	 SHORT $LN14@draw_overl
$LN15@draw_overl:
  001d7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  001dc	83 c0 3f	 add	 eax, 63			; 0000003fH
  001df	50		 push	 eax
  001e0	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  001e5	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
  001ea	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN14@draw_overl:

; 3268 : 
; 3269 : 	switch (system)

  001ef	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  001f2	89 45 a4	 mov	 DWORD PTR tv161[ebp], eax
  001f5	83 7d a4 03	 cmp	 DWORD PTR tv161[ebp], 3
  001f9	74 0e		 je	 SHORT $LN16@draw_overl
  001fb	83 7d a4 04	 cmp	 DWORD PTR tv161[ebp], 4
  001ff	74 30		 je	 SHORT $LN17@draw_overl
  00201	83 7d a4 05	 cmp	 DWORD PTR tv161[ebp], 5
  00205	74 52		 je	 SHORT $LN18@draw_overl
  00207	eb 78		 jmp	 SHORT $LN19@draw_overl
$LN16@draw_overl:

; 3270 : 	{
; 3271 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 3272 : 		{
; 3273 : 			light_level = flir_light_levels[weather_mode][day_segment_type];

  00209	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0020c	c1 e0 04	 shl	 eax, 4
  0020f	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00212	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  00219	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 3274 : 
; 3275 : 			noise_level = flir_noise_levels[weather_mode][day_segment_type];

  0021c	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0021f	c1 e0 04	 shl	 eax, 4
  00222	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00225	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  0022c	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 3276 : 
; 3277 : 			break;

  0022f	eb 61		 jmp	 SHORT $LN4@draw_overl
$LN17@draw_overl:

; 3278 : 		}
; 3279 : 		case TARGET_ACQUISITION_SYSTEM_DTV:
; 3280 : 		{
; 3281 : 			light_level = dtv_light_levels[weather_mode][day_segment_type];

  00231	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00234	c1 e0 04	 shl	 eax, 4
  00237	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  0023a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  00241	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 3282 : 
; 3283 : 			noise_level = dtv_noise_levels[weather_mode][day_segment_type];

  00244	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00247	c1 e0 04	 shl	 eax, 4
  0024a	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  0024d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  00254	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 3284 : 
; 3285 : 			break;

  00257	eb 39		 jmp	 SHORT $LN4@draw_overl
$LN18@draw_overl:

; 3286 : 		}
; 3287 : 		case TARGET_ACQUISITION_SYSTEM_DVO:
; 3288 : 		{
; 3289 : 			light_level = dvo_light_levels[weather_mode][day_segment_type];

  00259	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0025c	c1 e0 04	 shl	 eax, 4
  0025f	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00262	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dvo_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  00269	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 3290 : 
; 3291 : 			noise_level = dvo_noise_levels[weather_mode][day_segment_type];

  0026c	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0026f	c1 e0 04	 shl	 eax, 4
  00272	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00275	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dvo_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  0027c	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 3292 : 
; 3293 : 			break;

  0027f	eb 11		 jmp	 SHORT $LN4@draw_overl
$LN19@draw_overl:

; 3294 : 		}
; 3295 : 		default:
; 3296 : 		{
; 3297 : 			debug_fatal ("Invalid target acquisition system = %d", system);

  00281	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  00284	50		 push	 eax
  00285	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
  0028a	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0028f	83 c4 08	 add	 esp, 8
$LN4@draw_overl:

; 3298 : 
; 3299 : 			break;
; 3300 : 		}
; 3301 : 	}
; 3302 : 
; 3303 : 	set_main_3d_params (DISPLAY_3D_TINT_GREEN, light_level, noise_level, x, y, size, size, rad (59.99) * zoom, rad (59.99) * zoom);

  00292	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  00297	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  0029f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002a3	51		 push	 ecx
  002a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a9	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  002ae	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  002b6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ba	51		 push	 ecx
  002bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c0	51		 push	 ecx
  002c1	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _size$[ebp]
  002c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002cb	51		 push	 ecx
  002cc	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _size$[ebp]
  002d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d6	51		 push	 ecx
  002d7	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y$[ebp]
  002dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e1	51		 push	 ecx
  002e2	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x$[ebp]
  002e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ec	8b 45 f4	 mov	 eax, DWORD PTR _noise_level$[ebp]
  002ef	50		 push	 eax
  002f0	8b 4d f8	 mov	 ecx, DWORD PTR _light_level$[ebp]
  002f3	51		 push	 ecx
  002f4	6a 03		 push	 3
  002f6	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params

; 3304 : 
; 3305 : 	draw_eo_3d_scene = TRUE;

  002fb	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 1 ; draw_eo_3d_scene

; 3306 : 
; 3307 : 	draw_main_3d_scene (&eo_vp);

  00305	68 00 00 00 00	 push	 OFFSET ?eo_vp@@3UVIEWPOINT@@A ; eo_vp
  0030a	e8 00 00 00 00	 call	 ?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z ; draw_main_3d_scene

; 3308 : 
; 3309 : 	draw_eo_3d_scene = FALSE;

  0030f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 0 ; draw_eo_3d_scene

; 3310 : }

  00319	5f		 pop	 edi
  0031a	5e		 pop	 esi
  0031b	5b		 pop	 ebx
  0031c	8b e5		 mov	 esp, ebp
  0031e	5d		 pop	 ebp
  0031f	c2 14 00	 ret	 20			; 00000014H
  00322	66 90		 npad	 2
$LN29@draw_overl:
  00324	00 00 00 00	 DD	 $LN7@draw_overl
  00328	00 00 00 00	 DD	 $LN8@draw_overl
  0032c	00 00 00 00	 DD	 $LN9@draw_overl
  00330	00 00 00 00	 DD	 $LN10@draw_overl
?draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z ENDP ; draw_overlaid_3d_eo_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z
_TEXT	SEGMENT
tv167 = -100						; size = 4
tv139 = -100						; size = 4
tv179 = -96						; size = 4
tv159 = -96						; size = 4
tv131 = -96						; size = 4
tv80 = -96						; size = 4
_tint$ = -28						; size = 4
_day_segment_type$ = -24				; size = 4
_weather_mode$ = -20					; size = 4
_position$ = -16					; size = 4
_noise_level$ = -12					; size = 4
_light_level$ = -8					; size = 4
_fov$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
?draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z PROC ; draw_3d_eo_display_on_texture, COMDAT

; 3059 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3060 : 	float
; 3061 : 		fov;
; 3062 : 
; 3063 : 	display_3d_light_levels
; 3064 : 		light_level;
; 3065 : 
; 3066 : 	display_3d_noise_levels
; 3067 : 		noise_level;
; 3068 : 
; 3069 : 	vec3d
; 3070 : 		*position;
; 3071 : 
; 3072 : 	weathermodes
; 3073 : 		weather_mode;
; 3074 : 
; 3075 : 	day_segment_types
; 3076 : 		day_segment_type;
; 3077 : 
; 3078 : 	display_3d_tints
; 3079 : 		tint;
; 3080 : 
; 3081 : 	ASSERT (eo);

  00009	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN6@draw_3d_eo
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00014	83 c0 16	 add	 eax, 22			; 00000016H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@draw_3d_eo:

; 3082 : 
; 3083 : 	ASSERT (eo_3d_texture_screen);

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, 0
  0002e	75 18		 jne	 SHORT $LN7@draw_3d_eo
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00035	83 c0 18	 add	 eax, 24			; 00000018H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@draw_3d_eo:

; 3084 : 
; 3085 : 	ASSERT (d3d_can_render_to_texture);

  00048	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  0004f	75 18		 jne	 SHORT $LN8@draw_3d_eo
  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00056	83 c0 1a	 add	 eax, 26			; 0000001aH
  00059	50		 push	 eax
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@EPIBEIKA@d3d_can_render_to_texture@
  00064	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@draw_3d_eo:

; 3086 : 
; 3087 : 	switch (eo->field_of_view)

  00069	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	89 4d a0	 mov	 DWORD PTR tv80[ebp], ecx
  00071	83 7d a0 03	 cmp	 DWORD PTR tv80[ebp], 3
  00075	0f 87 a3 00 00
	00		 ja	 $LN20@draw_3d_eo
  0007b	8b 55 a0	 mov	 edx, DWORD PTR tv80[ebp]
  0007e	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN38@draw_3d_eo[edx*4]
$LN9@draw_3d_eo:

; 3088 : 	{
; 3089 : 		case EO_FOV_ZOOM:
; 3090 : 		{
; 3091 : 			ASSERT(system == TARGET_ACQUISITION_SYSTEM_FLIR);

  00085	83 7d 0c 03	 cmp	 DWORD PTR _system$[ebp], 3
  00089	74 18		 je	 SHORT $LN10@draw_3d_eo
  0008b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00090	83 c0 20	 add	 eax, 32			; 00000020H
  00093	50		 push	 eax
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@OPBKHJNA@system?5?$DN?$DN?5TARGET_ACQUISITION_SY@
  0009e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@draw_3d_eo:

; 3092 : 			fov = 1.6;

  000a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fcccccd
  000ab	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0

; 3093 : 
; 3094 : 			break;

  000b0	eb 7f		 jmp	 SHORT $LN2@draw_3d_eo
$LN11@draw_3d_eo:

; 3095 : 		}
; 3096 : 		case EO_FOV_NARROW:
; 3097 : 		{
; 3098 : 			if (system == TARGET_ACQUISITION_SYSTEM_FLIR)

  000b2	83 7d 0c 03	 cmp	 DWORD PTR _system$[ebp], 3
  000b6	75 0f		 jne	 SHORT $LN12@draw_3d_eo

; 3099 : 				fov = 3.6;

  000b8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40666666
  000c0	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0

; 3100 : 			else  // DTV

  000c5	eb 0d		 jmp	 SHORT $LN13@draw_3d_eo
$LN12@draw_3d_eo:

; 3101 : 				fov = 0.9;

  000c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  000cf	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0
$LN13@draw_3d_eo:

; 3102 : 
; 3103 : 			break;

  000d4	eb 5b		 jmp	 SHORT $LN2@draw_3d_eo
$LN14@draw_3d_eo:

; 3104 : 		}
; 3105 : 		case EO_FOV_MEDIUM:
; 3106 : 		{
; 3107 : 			if (system == TARGET_ACQUISITION_SYSTEM_FLIR)

  000d6	83 7d 0c 03	 cmp	 DWORD PTR _system$[ebp], 3
  000da	75 0f		 jne	 SHORT $LN15@draw_3d_eo

; 3108 : 				fov = 10.1;

  000dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@4121999a
  000e4	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0

; 3109 : 			else  // DTV or DVO

  000e9	eb 0d		 jmp	 SHORT $LN16@draw_3d_eo
$LN15@draw_3d_eo:

; 3110 : 				fov = 4.0;

  000eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  000f3	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0
$LN16@draw_3d_eo:

; 3111 : 
; 3112 : 			break;

  000f8	eb 37		 jmp	 SHORT $LN2@draw_3d_eo
$LN17@draw_3d_eo:

; 3113 : 		}
; 3114 : 		case EO_FOV_WIDE:
; 3115 : 		{
; 3116 : 			if (system == TARGET_ACQUISITION_SYSTEM_FLIR)

  000fa	83 7d 0c 03	 cmp	 DWORD PTR _system$[ebp], 3
  000fe	75 0f		 jne	 SHORT $LN18@draw_3d_eo

; 3117 : 				fov = 50.0;

  00100	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  00108	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0

; 3118 : 			else  // DVO

  0010d	eb 0d		 jmp	 SHORT $LN19@draw_3d_eo
$LN18@draw_3d_eo:

; 3119 : 				fov = 18.0;

  0010f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41900000
  00117	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0
$LN19@draw_3d_eo:

; 3120 : 
; 3121 : 			break;

  0011c	eb 13		 jmp	 SHORT $LN2@draw_3d_eo
$LN20@draw_3d_eo:

; 3122 : 		}
; 3123 : 		default:
; 3124 : 		{
; 3125 : 			debug_fatal ("Invalid field of view = %d", eo->field_of_view);

  0011e	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  00121	8b 08		 mov	 ecx, DWORD PTR [eax]
  00123	51		 push	 ecx
  00124	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@MNOBOANG@Invalid?5field?5of?5view?5?$DN?5?$CFd@
  00129	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0012e	83 c4 08	 add	 esp, 8
$LN2@draw_3d_eo:

; 3126 : 
; 3127 : 			break;
; 3128 : 		}
; 3129 : 	}
; 3130 : 	position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00131	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00138	74 0c		 je	 SHORT $LN30@draw_3d_eo
  0013a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0013f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00141	89 4d a0	 mov	 DWORD PTR tv131[ebp], ecx
  00144	eb 21		 jmp	 SHORT $LN31@draw_3d_eo
$LN30@draw_3d_eo:
  00146	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  0014c	83 c2 47	 add	 edx, 71			; 00000047H
  0014f	52		 push	 edx
  00150	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00155	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0015a	50		 push	 eax
  0015b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00160	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv131[ebp], 0
$LN31@draw_3d_eo:
  00167	b9 01 00 00 00	 mov	 ecx, 1
  0016c	85 c9		 test	 ecx, ecx
  0016e	74 09		 je	 SHORT $LN32@draw_3d_eo
  00170	c7 45 9c 08 00
	00 00		 mov	 DWORD PTR tv139[ebp], 8
  00177	eb 21		 jmp	 SHORT $LN33@draw_3d_eo
$LN32@draw_3d_eo:
  00179	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  0017f	83 c2 47	 add	 edx, 71			; 00000047H
  00182	52		 push	 edx
  00183	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00188	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0018d	50		 push	 eax
  0018e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00193	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv139[ebp], 0
$LN33@draw_3d_eo:
  0019a	6a 08		 push	 8
  0019c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  001a2	51		 push	 ecx
  001a3	6b 55 a0 60	 imul	 edx, DWORD PTR tv131[ebp], 96
  001a7	8b 45 9c	 mov	 eax, DWORD PTR tv139[ebp]
  001aa	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  001b1	ff d1		 call	 ecx
  001b3	89 45 f0	 mov	 DWORD PTR _position$[ebp], eax

; 3131 : 
; 3132 : 	weather_mode = get_simple_session_weather_at_point (position);

  001b6	8b 45 f0	 mov	 eax, DWORD PTR _position$[ebp]
  001b9	50		 push	 eax
  001ba	e8 00 00 00 00	 call	 ?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z ; get_simple_session_weather_at_point
  001bf	89 45 ec	 mov	 DWORD PTR _weather_mode$[ebp], eax

; 3133 : 
; 3134 : 	ASSERT ((weather_mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LAST));

  001c2	83 7d ec 00	 cmp	 DWORD PTR _weather_mode$[ebp], 0
  001c6	7e 06		 jle	 SHORT $LN22@draw_3d_eo
  001c8	83 7d ec 05	 cmp	 DWORD PTR _weather_mode$[ebp], 5
  001cc	7c 18		 jl	 SHORT $LN21@draw_3d_eo
$LN22@draw_3d_eo:
  001ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  001d3	83 c0 4b	 add	 eax, 75			; 0000004bH
  001d6	50		 push	 eax
  001d7	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  001dc	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
  001e1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN21@draw_3d_eo:

; 3135 : 
; 3136 : 	day_segment_type = (day_segment_types) get_local_entity_int_value (get_session_entity (), INT_TYPE_DAY_SEGMENT_TYPE);

  001e6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  001ed	74 0c		 je	 SHORT $LN34@draw_3d_eo
  001ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  001f4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f6	89 4d a0	 mov	 DWORD PTR tv159[ebp], ecx
  001f9	eb 21		 jmp	 SHORT $LN35@draw_3d_eo
$LN34@draw_3d_eo:
  001fb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00201	83 c2 4d	 add	 edx, 77			; 0000004dH
  00204	52		 push	 edx
  00205	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0020a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0020f	50		 push	 eax
  00210	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00215	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv159[ebp], 0
$LN35@draw_3d_eo:
  0021c	b9 01 00 00 00	 mov	 ecx, 1
  00221	85 c9		 test	 ecx, ecx
  00223	74 09		 je	 SHORT $LN36@draw_3d_eo
  00225	c7 45 9c 27 00
	00 00		 mov	 DWORD PTR tv167[ebp], 39 ; 00000027H
  0022c	eb 21		 jmp	 SHORT $LN37@draw_3d_eo
$LN36@draw_3d_eo:
  0022e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00234	83 c2 4d	 add	 edx, 77			; 0000004dH
  00237	52		 push	 edx
  00238	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0023d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00242	50		 push	 eax
  00243	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00248	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv167[ebp], 0
$LN37@draw_3d_eo:
  0024f	6a 27		 push	 39			; 00000027H
  00251	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  00257	51		 push	 ecx
  00258	69 55 a0 5c 04
	00 00		 imul	 edx, DWORD PTR tv159[ebp], 1116
  0025f	8b 45 9c	 mov	 eax, DWORD PTR tv167[ebp]
  00262	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00269	ff d1		 call	 ecx
  0026b	89 45 e8	 mov	 DWORD PTR _day_segment_type$[ebp], eax

; 3137 : 
; 3138 : 	ASSERT ((day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT_TYPES));

  0026e	83 7d e8 00	 cmp	 DWORD PTR _day_segment_type$[ebp], 0
  00272	7c 06		 jl	 SHORT $LN24@draw_3d_eo
  00274	83 7d e8 04	 cmp	 DWORD PTR _day_segment_type$[ebp], 4
  00278	7c 18		 jl	 SHORT $LN23@draw_3d_eo
$LN24@draw_3d_eo:
  0027a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  0027f	83 c0 4f	 add	 eax, 79			; 0000004fH
  00282	50		 push	 eax
  00283	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00288	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
  0028d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN23@draw_3d_eo:

; 3139 : 
; 3140 : 	switch (system)

  00292	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  00295	89 45 a0	 mov	 DWORD PTR tv179[ebp], eax
  00298	83 7d a0 03	 cmp	 DWORD PTR tv179[ebp], 3
  0029c	74 11		 je	 SHORT $LN25@draw_3d_eo
  0029e	83 7d a0 04	 cmp	 DWORD PTR tv179[ebp], 4
  002a2	74 3a		 je	 SHORT $LN26@draw_3d_eo
  002a4	83 7d a0 05	 cmp	 DWORD PTR tv179[ebp], 5
  002a8	74 63		 je	 SHORT $LN27@draw_3d_eo
  002aa	e9 8d 00 00 00	 jmp	 $LN28@draw_3d_eo
$LN25@draw_3d_eo:

; 3141 : 	{
; 3142 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 3143 : 		{
; 3144 : 			light_level = flir_light_levels[weather_mode][day_segment_type];

  002af	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  002b2	c1 e0 04	 shl	 eax, 4
  002b5	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  002b8	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  002bf	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 3145 : 
; 3146 : 			noise_level = flir_noise_levels[weather_mode][day_segment_type];

  002c2	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  002c5	c1 e0 04	 shl	 eax, 4
  002c8	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  002cb	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  002d2	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 3147 : 
; 3148 : 			tint = DISPLAY_3D_TINT_GREEN;

  002d5	c7 45 e4 03 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 3

; 3149 : 
; 3150 : 			break;

  002dc	eb 6f		 jmp	 SHORT $LN4@draw_3d_eo
$LN26@draw_3d_eo:

; 3151 : 		}
; 3152 : 		case TARGET_ACQUISITION_SYSTEM_DTV:
; 3153 : 		{
; 3154 : 			light_level = dtv_light_levels[weather_mode][day_segment_type];

  002de	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  002e1	c1 e0 04	 shl	 eax, 4
  002e4	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  002e7	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  002ee	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 3155 : 
; 3156 : 			noise_level = dtv_noise_levels[weather_mode][day_segment_type];

  002f1	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  002f4	c1 e0 04	 shl	 eax, 4
  002f7	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  002fa	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  00301	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 3157 : 			
; 3158 : 			tint = DISPLAY_3D_TINT_GREEN_VISUAL;

  00304	c7 45 e4 04 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 4

; 3159 : 
; 3160 : 			break;

  0030b	eb 40		 jmp	 SHORT $LN4@draw_3d_eo
$LN27@draw_3d_eo:

; 3161 : 		}
; 3162 : 		case TARGET_ACQUISITION_SYSTEM_DVO:
; 3163 : 		{
; 3164 : 			light_level = dvo_light_levels[weather_mode][day_segment_type];

  0030d	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00310	c1 e0 04	 shl	 eax, 4
  00313	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00316	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dvo_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  0031d	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 3165 : 
; 3166 : 			noise_level = dvo_noise_levels[weather_mode][day_segment_type];

  00320	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00323	c1 e0 04	 shl	 eax, 4
  00326	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00329	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dvo_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  00330	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 3167 : 
; 3168 : 			tint = DISPLAY_3D_TINT_GREEN_VISUAL;

  00333	c7 45 e4 04 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 4

; 3169 : 
; 3170 : 			break;

  0033a	eb 11		 jmp	 SHORT $LN4@draw_3d_eo
$LN28@draw_3d_eo:

; 3171 : 		}
; 3172 : 		default:
; 3173 : 		{
; 3174 : 			debug_fatal ("Invalid target acquisition system = %d", system);

  0033c	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  0033f	50		 push	 eax
  00340	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
  00345	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0034a	83 c4 08	 add	 esp, 8
$LN4@draw_3d_eo:

; 3175 : 
; 3176 : 			break;
; 3177 : 		}
; 3178 : 	}
; 3179 : 
; 3180 : 	set_3d_render_target (eo_3d_texture_screen);

  0034d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00352	50		 push	 eax
  00353	e8 00 00 00 00	 call	 ?set_3d_render_target@@YGHPAUSCREEN@@@Z ; set_3d_render_target

; 3181 : 
; 3182 : 	set_active_screen (eo_3d_texture_screen);

  00358	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0035d	50		 push	 eax
  0035e	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 3183 : 
; 3184 : 	set_main_3d_params (tint, light_level, noise_level, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_size, mfd_viewport_size, rad (fov), rad(fov));

  00363	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fov$[ebp]
  00368	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00370	51		 push	 ecx
  00371	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00376	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fov$[ebp]
  0037b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00383	51		 push	 ecx
  00384	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00389	51		 push	 ecx
  0038a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00392	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00397	51		 push	 ecx
  00398	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  003a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a5	51		 push	 ecx
  003a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  003ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b3	51		 push	 ecx
  003b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  003bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c1	8b 45 f4	 mov	 eax, DWORD PTR _noise_level$[ebp]
  003c4	50		 push	 eax
  003c5	8b 4d f8	 mov	 ecx, DWORD PTR _light_level$[ebp]
  003c8	51		 push	 ecx
  003c9	8b 55 e4	 mov	 edx, DWORD PTR _tint$[ebp]
  003cc	52		 push	 edx
  003cd	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params

; 3185 : 
; 3186 : 	draw_eo_3d_scene = TRUE;

  003d2	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 1 ; draw_eo_3d_scene

; 3187 : 
; 3188 : 	draw_main_3d_scene (&eo_vp);

  003dc	68 00 00 00 00	 push	 OFFSET ?eo_vp@@3UVIEWPOINT@@A ; eo_vp
  003e1	e8 00 00 00 00	 call	 ?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z ; draw_main_3d_scene

; 3189 : 
; 3190 : 	draw_eo_3d_scene = FALSE;

  003e6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 0 ; draw_eo_3d_scene

; 3191 : 
; 3192 : 	finalise_3d_render_target_texture (eo_3d_texture_screen);

  003f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  003f5	50		 push	 eax
  003f6	e8 00 00 00 00	 call	 ?finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z ; finalise_3d_render_target_texture

; 3193 : 
; 3194 : 	set_3d_render_target (video_screen);

  003fb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00400	50		 push	 eax
  00401	e8 00 00 00 00	 call	 ?set_3d_render_target@@YGHPAUSCREEN@@@Z ; set_3d_render_target

; 3195 : 
; 3196 : 	set_active_screen (video_screen);

  00406	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  0040b	50		 push	 eax
  0040c	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 3197 : }

  00411	5f		 pop	 edi
  00412	5e		 pop	 esi
  00413	5b		 pop	 ebx
  00414	8b e5		 mov	 esp, ebp
  00416	5d		 pop	 ebp
  00417	c2 08 00	 ret	 8
  0041a	66 90		 npad	 2
$LN38@draw_3d_eo:
  0041c	00 00 00 00	 DD	 $LN9@draw_3d_eo
  00420	00 00 00 00	 DD	 $LN11@draw_3d_eo
  00424	00 00 00 00	 DD	 $LN14@draw_3d_eo
  00428	00 00 00 00	 DD	 $LN17@draw_3d_eo
?draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ENDP ; draw_3d_eo_display_on_texture
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv157 = -100						; size = 4
tv129 = -100						; size = 4
tv169 = -96						; size = 4
tv149 = -96						; size = 4
tv89 = -96						; size = 4
tv70 = -96						; size = 4
_tint$ = -28						; size = 4
_day_segment_type$ = -24				; size = 4
_weather_mode$ = -20					; size = 4
_position$ = -16					; size = 4
_noise_level$ = -12					; size = 4
_light_level$ = -8					; size = 4
_fov$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
_location$ = 16						; size = 4
?draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z PROC ; draw_3d_eo_display, COMDAT

; 2905 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2906 : 	float
; 2907 : 		fov = 18.0;

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41900000
  00011	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0

; 2908 : 
; 2909 : 	display_3d_light_levels
; 2910 : 		light_level;
; 2911 : 
; 2912 : 	display_3d_noise_levels
; 2913 : 		noise_level;
; 2914 : 
; 2915 : 	vec3d
; 2916 : 		*position;
; 2917 : 
; 2918 : 	weathermodes
; 2919 : 		weather_mode;
; 2920 : 
; 2921 : 	day_segment_types
; 2922 : 		day_segment_type;
; 2923 : 
; 2924 : 	display_3d_tints
; 2925 : 		tint;
; 2926 : 
; 2927 : 	ASSERT (eo);

  00016	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  0001a	75 18		 jne	 SHORT $LN6@draw_3d_eo
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z@4JA
  00021	83 c0 16	 add	 eax, 22			; 00000016H
  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  0002f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@draw_3d_eo:

; 2928 : 
; 2929 : 	
; 2930 : 	switch (eo->field_of_view)

  00034	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]
  00039	89 4d a0	 mov	 DWORD PTR tv70[ebp], ecx
  0003c	83 7d a0 03	 cmp	 DWORD PTR tv70[ebp], 3
  00040	0f 87 a3 00 00
	00		 ja	 $LN18@draw_3d_eo
  00046	8b 55 a0	 mov	 edx, DWORD PTR tv70[ebp]
  00049	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN42@draw_3d_eo[edx*4]
$LN7@draw_3d_eo:

; 2931 : 	{
; 2932 : 		case EO_FOV_ZOOM:
; 2933 : 		{
; 2934 : 			ASSERT(system == TARGET_ACQUISITION_SYSTEM_FLIR);

  00050	83 7d 0c 03	 cmp	 DWORD PTR _system$[ebp], 3
  00054	74 18		 je	 SHORT $LN8@draw_3d_eo
  00056	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z@4JA
  0005b	83 c0 1d	 add	 eax, 29			; 0000001dH
  0005e	50		 push	 eax
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@OPBKHJNA@system?5?$DN?$DN?5TARGET_ACQUISITION_SY@
  00069	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@draw_3d_eo:

; 2935 : 			fov = 1.6;

  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fcccccd
  00076	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0

; 2936 : 
; 2937 : 			break;

  0007b	eb 7f		 jmp	 SHORT $LN2@draw_3d_eo
$LN9@draw_3d_eo:

; 2938 : 		}
; 2939 : 		case EO_FOV_NARROW:
; 2940 : 		{
; 2941 : 			if (system == TARGET_ACQUISITION_SYSTEM_FLIR)

  0007d	83 7d 0c 03	 cmp	 DWORD PTR _system$[ebp], 3
  00081	75 0f		 jne	 SHORT $LN10@draw_3d_eo

; 2942 : 				fov = 3.1;

  00083	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40466666
  0008b	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0

; 2943 : 			else  // DTV

  00090	eb 0d		 jmp	 SHORT $LN11@draw_3d_eo
$LN10@draw_3d_eo:

; 2944 : 				fov = 0.9;

  00092	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0009a	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0
$LN11@draw_3d_eo:

; 2945 : 
; 2946 : 			break;

  0009f	eb 5b		 jmp	 SHORT $LN2@draw_3d_eo
$LN12@draw_3d_eo:

; 2947 : 		}
; 2948 : 		case EO_FOV_MEDIUM:
; 2949 : 		{
; 2950 : 			if (system == TARGET_ACQUISITION_SYSTEM_FLIR)

  000a1	83 7d 0c 03	 cmp	 DWORD PTR _system$[ebp], 3
  000a5	75 0f		 jne	 SHORT $LN13@draw_3d_eo

; 2951 : 				fov = 10.1;

  000a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@4121999a
  000af	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0

; 2952 : 			else  // DTV or DVO

  000b4	eb 0d		 jmp	 SHORT $LN14@draw_3d_eo
$LN13@draw_3d_eo:

; 2953 : 				fov = 4.0;

  000b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  000be	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0
$LN14@draw_3d_eo:

; 2954 : 
; 2955 : 			break;

  000c3	eb 37		 jmp	 SHORT $LN2@draw_3d_eo
$LN15@draw_3d_eo:

; 2956 : 		}
; 2957 : 		case EO_FOV_WIDE:
; 2958 : 		{
; 2959 : 			if (system == TARGET_ACQUISITION_SYSTEM_FLIR)

  000c5	83 7d 0c 03	 cmp	 DWORD PTR _system$[ebp], 3
  000c9	75 0f		 jne	 SHORT $LN16@draw_3d_eo

; 2960 : 				fov = 50.0;

  000cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  000d3	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0

; 2961 : 			else  // DVO

  000d8	eb 0d		 jmp	 SHORT $LN17@draw_3d_eo
$LN16@draw_3d_eo:

; 2962 : 				fov = 18.0;

  000da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41900000
  000e2	f3 0f 11 45 fc	 movss	 DWORD PTR _fov$[ebp], xmm0
$LN17@draw_3d_eo:

; 2963 : 
; 2964 : 			break;

  000e7	eb 13		 jmp	 SHORT $LN2@draw_3d_eo
$LN18@draw_3d_eo:

; 2965 : 		}
; 2966 : 		default:
; 2967 : 		{
; 2968 : 			debug_fatal ("Invalid field of view = %d", eo->field_of_view);

  000e9	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  000ec	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ee	51		 push	 ecx
  000ef	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@MNOBOANG@Invalid?5field?5of?5view?5?$DN?5?$CFd@
  000f4	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000f9	83 c4 08	 add	 esp, 8
$LN2@draw_3d_eo:

; 2969 : 
; 2970 : 			break;
; 2971 : 		}
; 2972 : 	}
; 2973 : 
; 2974 : 	position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  000fc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00103	74 0c		 je	 SHORT $LN34@draw_3d_eo
  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0010a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010c	89 4d a0	 mov	 DWORD PTR tv89[ebp], ecx
  0010f	eb 21		 jmp	 SHORT $LN35@draw_3d_eo
$LN34@draw_3d_eo:
  00111	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z@4JA
  00117	83 c2 45	 add	 edx, 69			; 00000045H
  0011a	52		 push	 edx
  0011b	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00120	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00125	50		 push	 eax
  00126	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0012b	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv89[ebp], 0
$LN35@draw_3d_eo:
  00132	b9 01 00 00 00	 mov	 ecx, 1
  00137	85 c9		 test	 ecx, ecx
  00139	74 09		 je	 SHORT $LN36@draw_3d_eo
  0013b	c7 45 9c 08 00
	00 00		 mov	 DWORD PTR tv129[ebp], 8
  00142	eb 21		 jmp	 SHORT $LN37@draw_3d_eo
$LN36@draw_3d_eo:
  00144	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z@4JA
  0014a	83 c2 45	 add	 edx, 69			; 00000045H
  0014d	52		 push	 edx
  0014e	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00153	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00158	50		 push	 eax
  00159	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0015e	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv129[ebp], 0
$LN37@draw_3d_eo:
  00165	6a 08		 push	 8
  00167	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0016d	51		 push	 ecx
  0016e	6b 55 a0 60	 imul	 edx, DWORD PTR tv89[ebp], 96
  00172	8b 45 9c	 mov	 eax, DWORD PTR tv129[ebp]
  00175	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0017c	ff d1		 call	 ecx
  0017e	89 45 f0	 mov	 DWORD PTR _position$[ebp], eax

; 2975 : 
; 2976 : 	weather_mode = get_simple_session_weather_at_point (position);

  00181	8b 45 f0	 mov	 eax, DWORD PTR _position$[ebp]
  00184	50		 push	 eax
  00185	e8 00 00 00 00	 call	 ?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z ; get_simple_session_weather_at_point
  0018a	89 45 ec	 mov	 DWORD PTR _weather_mode$[ebp], eax

; 2977 : 
; 2978 : 	ASSERT ((weather_mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LAST));

  0018d	83 7d ec 00	 cmp	 DWORD PTR _weather_mode$[ebp], 0
  00191	7e 06		 jle	 SHORT $LN20@draw_3d_eo
  00193	83 7d ec 05	 cmp	 DWORD PTR _weather_mode$[ebp], 5
  00197	7c 18		 jl	 SHORT $LN19@draw_3d_eo
$LN20@draw_3d_eo:
  00199	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z@4JA
  0019e	83 c0 49	 add	 eax, 73			; 00000049H
  001a1	50		 push	 eax
  001a2	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  001a7	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
  001ac	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN19@draw_3d_eo:

; 2979 : 
; 2980 : 	day_segment_type = (day_segment_types) get_local_entity_int_value (get_session_entity (), INT_TYPE_DAY_SEGMENT_TYPE);

  001b1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  001b8	74 0c		 je	 SHORT $LN38@draw_3d_eo
  001ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  001bf	8b 08		 mov	 ecx, DWORD PTR [eax]
  001c1	89 4d a0	 mov	 DWORD PTR tv149[ebp], ecx
  001c4	eb 21		 jmp	 SHORT $LN39@draw_3d_eo
$LN38@draw_3d_eo:
  001c6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z@4JA
  001cc	83 c2 4b	 add	 edx, 75			; 0000004bH
  001cf	52		 push	 edx
  001d0	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  001d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001da	50		 push	 eax
  001db	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001e0	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv149[ebp], 0
$LN39@draw_3d_eo:
  001e7	b9 01 00 00 00	 mov	 ecx, 1
  001ec	85 c9		 test	 ecx, ecx
  001ee	74 09		 je	 SHORT $LN40@draw_3d_eo
  001f0	c7 45 9c 27 00
	00 00		 mov	 DWORD PTR tv157[ebp], 39 ; 00000027H
  001f7	eb 21		 jmp	 SHORT $LN41@draw_3d_eo
$LN40@draw_3d_eo:
  001f9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z@4JA
  001ff	83 c2 4b	 add	 edx, 75			; 0000004bH
  00202	52		 push	 edx
  00203	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00208	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0020d	50		 push	 eax
  0020e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00213	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv157[ebp], 0
$LN41@draw_3d_eo:
  0021a	6a 27		 push	 39			; 00000027H
  0021c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  00222	51		 push	 ecx
  00223	69 55 a0 5c 04
	00 00		 imul	 edx, DWORD PTR tv149[ebp], 1116
  0022a	8b 45 9c	 mov	 eax, DWORD PTR tv157[ebp]
  0022d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00234	ff d1		 call	 ecx
  00236	89 45 e8	 mov	 DWORD PTR _day_segment_type$[ebp], eax

; 2981 : 
; 2982 : 	ASSERT ((day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT_TYPES));

  00239	83 7d e8 00	 cmp	 DWORD PTR _day_segment_type$[ebp], 0
  0023d	7c 06		 jl	 SHORT $LN22@draw_3d_eo
  0023f	83 7d e8 04	 cmp	 DWORD PTR _day_segment_type$[ebp], 4
  00243	7c 18		 jl	 SHORT $LN21@draw_3d_eo
$LN22@draw_3d_eo:
  00245	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z@4JA
  0024a	83 c0 4d	 add	 eax, 77			; 0000004dH
  0024d	50		 push	 eax
  0024e	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00253	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
  00258	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN21@draw_3d_eo:

; 2983 : 
; 2984 : 	switch (system)

  0025d	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  00260	89 45 a0	 mov	 DWORD PTR tv169[ebp], eax
  00263	83 7d a0 03	 cmp	 DWORD PTR tv169[ebp], 3
  00267	74 11		 je	 SHORT $LN23@draw_3d_eo
  00269	83 7d a0 04	 cmp	 DWORD PTR tv169[ebp], 4
  0026d	74 3a		 je	 SHORT $LN24@draw_3d_eo
  0026f	83 7d a0 05	 cmp	 DWORD PTR tv169[ebp], 5
  00273	74 63		 je	 SHORT $LN25@draw_3d_eo
  00275	e9 8d 00 00 00	 jmp	 $LN26@draw_3d_eo
$LN23@draw_3d_eo:

; 2985 : 	{
; 2986 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 2987 : 		{
; 2988 : 			light_level = flir_light_levels[weather_mode][day_segment_type];

  0027a	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0027d	c1 e0 04	 shl	 eax, 4
  00280	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00283	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  0028a	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 2989 : 
; 2990 : 			noise_level = flir_noise_levels[weather_mode][day_segment_type];

  0028d	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00290	c1 e0 04	 shl	 eax, 4
  00293	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00296	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  0029d	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 2991 : 
; 2992 : 			tint = DISPLAY_3D_TINT_GREEN;

  002a0	c7 45 e4 03 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 3

; 2993 : 
; 2994 : 			break;

  002a7	eb 6f		 jmp	 SHORT $LN4@draw_3d_eo
$LN24@draw_3d_eo:

; 2995 : 		}
; 2996 : 		case TARGET_ACQUISITION_SYSTEM_DTV:
; 2997 : 		{
; 2998 : 			light_level = dtv_light_levels[weather_mode][day_segment_type];

  002a9	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  002ac	c1 e0 04	 shl	 eax, 4
  002af	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  002b2	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  002b9	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 2999 : 
; 3000 : 			noise_level = dtv_noise_levels[weather_mode][day_segment_type];

  002bc	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  002bf	c1 e0 04	 shl	 eax, 4
  002c2	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  002c5	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  002cc	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 3001 : 
; 3002 : 			tint = DISPLAY_3D_TINT_GREEN_VISUAL;

  002cf	c7 45 e4 04 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 4

; 3003 : 
; 3004 : 			break;

  002d6	eb 40		 jmp	 SHORT $LN4@draw_3d_eo
$LN25@draw_3d_eo:

; 3005 : 		}
; 3006 : 		case TARGET_ACQUISITION_SYSTEM_DVO:
; 3007 : 		{
; 3008 : 			light_level = dvo_light_levels[weather_mode][day_segment_type];

  002d8	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  002db	c1 e0 04	 shl	 eax, 4
  002de	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  002e1	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dvo_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  002e8	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 3009 : 
; 3010 : 			noise_level = dvo_noise_levels[weather_mode][day_segment_type];

  002eb	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  002ee	c1 e0 04	 shl	 eax, 4
  002f1	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  002f4	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dvo_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  002fb	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 3011 : 
; 3012 : 			tint = DISPLAY_3D_TINT_GREEN_VISUAL;

  002fe	c7 45 e4 04 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 4

; 3013 : 
; 3014 : 			break;

  00305	eb 11		 jmp	 SHORT $LN4@draw_3d_eo
$LN26@draw_3d_eo:

; 3015 : 		}
; 3016 : 		default:
; 3017 : 		{
; 3018 : 			debug_fatal ("Invalid target acquisition system = %d", system);

  00307	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  0030a	50		 push	 eax
  0030b	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
  00310	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00315	83 c4 08	 add	 esp, 8
$LN4@draw_3d_eo:

; 3019 : 
; 3020 : 			break;
; 3021 : 		}
; 3022 : 	}
; 3023 : 
; 3024 : 	if (draw_large_mfd)

  00318	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0031f	0f 84 22 01 00
	00		 je	 $LN27@draw_3d_eo

; 3025 : 	{
; 3026 : 		if (location == MFD_LOCATION_LHS)

  00325	83 7d 10 00	 cmp	 DWORD PTR _location$[ebp], 0
  00329	0f 85 8c 00 00
	00		 jne	 $LN29@draw_3d_eo

; 3027 : 		{
; 3028 : 			set_main_3d_params (tint, light_level, noise_level, mfd_viewport_x_min - 1.5, mfd_viewport_y_min - 1.5, MFD_VIEWPORT_LARGE_SIZE, MFD_VIEWPORT_LARGE_SIZE, rad(fov), rad(fov));

  0032f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fov$[ebp]
  00334	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  0033c	51		 push	 ecx
  0033d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00342	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fov$[ebp]
  00347	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  0034f	51		 push	 ecx
  00350	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00355	51		 push	 ecx
  00356	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  0035e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00363	51		 push	 ecx
  00364	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  0036c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00371	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00379	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff8000000000000
  00381	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00385	51		 push	 ecx
  00386	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038b	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00393	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff8000000000000
  0039b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0039f	51		 push	 ecx
  003a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a5	8b 45 f4	 mov	 eax, DWORD PTR _noise_level$[ebp]
  003a8	50		 push	 eax
  003a9	8b 4d f8	 mov	 ecx, DWORD PTR _light_level$[ebp]
  003ac	51		 push	 ecx
  003ad	8b 55 e4	 mov	 edx, DWORD PTR _tint$[ebp]
  003b0	52		 push	 edx
  003b1	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params

; 3029 : 		}
; 3030 : 		else

  003b6	e9 87 00 00 00	 jmp	 $LN30@draw_3d_eo
$LN29@draw_3d_eo:

; 3031 : 		{
; 3032 : 			set_main_3d_params (tint, light_level, noise_level, mfd_viewport_x_min - 1.5, mfd_viewport_y_min - 1.5, MFD_VIEWPORT_LARGE_SIZE, MFD_VIEWPORT_LARGE_SIZE, rad(fov), rad(fov));

  003bb	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fov$[ebp]
  003c0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  003c8	51		 push	 ecx
  003c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ce	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fov$[ebp]
  003d3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  003db	51		 push	 ecx
  003dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e1	51		 push	 ecx
  003e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  003ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ef	51		 push	 ecx
  003f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  003f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003fd	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00405	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff8000000000000
  0040d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00411	51		 push	 ecx
  00412	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00417	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0041f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff8000000000000
  00427	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0042b	51		 push	 ecx
  0042c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00431	8b 45 f4	 mov	 eax, DWORD PTR _noise_level$[ebp]
  00434	50		 push	 eax
  00435	8b 4d f8	 mov	 ecx, DWORD PTR _light_level$[ebp]
  00438	51		 push	 ecx
  00439	8b 55 e4	 mov	 edx, DWORD PTR _tint$[ebp]
  0043c	52		 push	 edx
  0043d	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params
$LN30@draw_3d_eo:

; 3033 : 		}
; 3034 : 	}
; 3035 : 	else

  00442	e9 e6 00 00 00	 jmp	 $LN32@draw_3d_eo
$LN27@draw_3d_eo:

; 3036 : 	{
; 3037 : 		if (location == MFD_LOCATION_LHS)

  00447	83 7d 10 00	 cmp	 DWORD PTR _location$[ebp], 0
  0044b	75 71		 jne	 SHORT $LN31@draw_3d_eo

; 3038 : 		{
; 3039 : 			set_main_3d_params (tint, light_level, noise_level, mfd_viewport_x_min, mfd_viewport_y_min, 128.0, 128.0, rad(fov), rad(fov));

  0044d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fov$[ebp]
  00452	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  0045a	51		 push	 ecx
  0045b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00460	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fov$[ebp]
  00465	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  0046d	51		 push	 ecx
  0046e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00473	51		 push	 ecx
  00474	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  0047c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00481	51		 push	 ecx
  00482	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  0048a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0048f	51		 push	 ecx
  00490	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00498	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0049d	51		 push	 ecx
  0049e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  004a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ab	8b 45 f4	 mov	 eax, DWORD PTR _noise_level$[ebp]
  004ae	50		 push	 eax
  004af	8b 4d f8	 mov	 ecx, DWORD PTR _light_level$[ebp]
  004b2	51		 push	 ecx
  004b3	8b 55 e4	 mov	 edx, DWORD PTR _tint$[ebp]
  004b6	52		 push	 edx
  004b7	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params

; 3040 : 		}
; 3041 : 		else

  004bc	eb 6f		 jmp	 SHORT $LN32@draw_3d_eo
$LN31@draw_3d_eo:

; 3042 : 		{
; 3043 : 			set_main_3d_params (tint, light_level, noise_level, mfd_viewport_x_min, mfd_viewport_y_min, 128.0, 128.0, rad(fov), rad(fov));

  004be	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fov$[ebp]
  004c3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  004cb	51		 push	 ecx
  004cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d1	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fov$[ebp]
  004d6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  004de	51		 push	 ecx
  004df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e4	51		 push	 ecx
  004e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  004ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f2	51		 push	 ecx
  004f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  004fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00500	51		 push	 ecx
  00501	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00509	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0050e	51		 push	 ecx
  0050f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00517	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0051c	8b 45 f4	 mov	 eax, DWORD PTR _noise_level$[ebp]
  0051f	50		 push	 eax
  00520	8b 4d f8	 mov	 ecx, DWORD PTR _light_level$[ebp]
  00523	51		 push	 ecx
  00524	8b 55 e4	 mov	 edx, DWORD PTR _tint$[ebp]
  00527	52		 push	 edx
  00528	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params
$LN32@draw_3d_eo:

; 3044 : 		}
; 3045 : 	}
; 3046 : 
; 3047 : 	draw_eo_3d_scene = TRUE;

  0052d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 1 ; draw_eo_3d_scene

; 3048 : 
; 3049 : 	draw_main_3d_scene (&eo_vp);

  00537	68 00 00 00 00	 push	 OFFSET ?eo_vp@@3UVIEWPOINT@@A ; eo_vp
  0053c	e8 00 00 00 00	 call	 ?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z ; draw_main_3d_scene

; 3050 : 
; 3051 : 	draw_eo_3d_scene = FALSE;

  00541	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 0 ; draw_eo_3d_scene

; 3052 : }

  0054b	5f		 pop	 edi
  0054c	5e		 pop	 esi
  0054d	5b		 pop	 ebx
  0054e	8b e5		 mov	 esp, ebp
  00550	5d		 pop	 ebp
  00551	c2 0c 00	 ret	 12			; 0000000cH
$LN42@draw_3d_eo:
  00554	00 00 00 00	 DD	 $LN7@draw_3d_eo
  00558	00 00 00 00	 DD	 $LN9@draw_3d_eo
  0055c	00 00 00 00	 DD	 $LN12@draw_3d_eo
  00560	00 00 00 00	 DD	 $LN15@draw_3d_eo
?draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z ENDP ; draw_3d_eo_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_air_radar_mfd@@YGXXZ
_TEXT	SEGMENT
tv459 = -108						; size = 4
tv438 = -108						; size = 4
tv372 = -108						; size = 4
tv347 = -108						; size = 4
tv195 = -108						; size = 4
tv174 = -108						; size = 4
tv130 = -108						; size = 4
tv78 = -108						; size = 4
tv451 = -104						; size = 4
tv430 = -104						; size = 4
tv364 = -104						; size = 4
tv339 = -104						; size = 4
tv187 = -104						; size = 4
tv166 = -104						; size = 4
tv90 = -104						; size = 4
tv70 = -104						; size = 4
_target_position$ = -36					; size = 4
_source_position$ = -32					; size = 4
_target$ = -28						; size = 4
_source$ = -24						; size = 4
_y_adjust$ = -20					; size = 4
_target_range$ = -16					; size = 4
_scale$ = -12						; size = 4
_source_heading$ = -8					; size = 4
_source_side$ = -4					; size = 4
?draw_air_radar_mfd@@YGXXZ PROC				; draw_air_radar_mfd, COMDAT

; 2404 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2405 : 	entity_sides
; 2406 : 		source_side;
; 2407 : 
; 2408 : 	float
; 2409 : 		source_heading,
; 2410 : 		scale,
; 2411 : 		target_range,
; 2412 : 		y_adjust;
; 2413 : 
; 2414 : 	entity
; 2415 : 		*source,
; 2416 : 		*target;
; 2417 : 
; 2418 : 	vec3d
; 2419 : 		*source_position,
; 2420 : 		*target_position;
; 2421 : 
; 2422 : 	source = get_gunship_entity ();

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0000e	89 45 e8	 mov	 DWORD PTR _source$[ebp], eax

; 2423 : 
; 2424 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  00011	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  00015	74 0a		 je	 SHORT $LN25@draw_air_r
  00017	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 4d 98	 mov	 DWORD PTR tv70[ebp], ecx
  0001f	eb 21		 jmp	 SHORT $LN26@draw_air_r
$LN25@draw_air_r:
  00021	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00027	83 c2 14	 add	 edx, 20			; 00000014H
  0002a	52		 push	 edx
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003b	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN26@draw_air_r:
  00042	b9 01 00 00 00	 mov	 ecx, 1
  00047	85 c9		 test	 ecx, ecx
  00049	74 09		 je	 SHORT $LN27@draw_air_r
  0004b	c7 45 94 08 00
	00 00		 mov	 DWORD PTR tv78[ebp], 8
  00052	eb 21		 jmp	 SHORT $LN28@draw_air_r
$LN27@draw_air_r:
  00054	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  0005a	83 c2 14	 add	 edx, 20			; 00000014H
  0005d	52		 push	 edx
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006e	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN28@draw_air_r:
  00075	6a 08		 push	 8
  00077	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  0007a	51		 push	 ecx
  0007b	6b 55 98 60	 imul	 edx, DWORD PTR tv70[ebp], 96
  0007f	8b 45 94	 mov	 eax, DWORD PTR tv78[ebp]
  00082	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00089	ff d1		 call	 ecx
  0008b	89 45 e0	 mov	 DWORD PTR _source_position$[ebp], eax

; 2425 : 
; 2426 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  0008e	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  00092	74 0a		 je	 SHORT $LN29@draw_air_r
  00094	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  00097	8b 08		 mov	 ecx, DWORD PTR [eax]
  00099	89 4d 98	 mov	 DWORD PTR tv90[ebp], ecx
  0009c	eb 21		 jmp	 SHORT $LN30@draw_air_r
$LN29@draw_air_r:
  0009e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  000a4	83 c2 16	 add	 edx, 22			; 00000016H
  000a7	52		 push	 edx
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b8	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN30@draw_air_r:
  000bf	b9 01 00 00 00	 mov	 ecx, 1
  000c4	85 c9		 test	 ecx, ecx
  000c6	74 09		 je	 SHORT $LN31@draw_air_r
  000c8	c7 45 94 bb 00
	00 00		 mov	 DWORD PTR tv130[ebp], 187 ; 000000bbH
  000cf	eb 21		 jmp	 SHORT $LN32@draw_air_r
$LN31@draw_air_r:
  000d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  000d7	83 c2 16	 add	 edx, 22			; 00000016H
  000da	52		 push	 edx
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000eb	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN32@draw_air_r:
  000f2	68 bb 00 00 00	 push	 187			; 000000bbH
  000f7	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  000fa	51		 push	 ecx
  000fb	69 55 98 5c 04
	00 00		 imul	 edx, DWORD PTR tv90[ebp], 1116
  00102	8b 45 94	 mov	 eax, DWORD PTR tv130[ebp]
  00105	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  0010c	ff d1		 call	 ecx
  0010e	89 45 fc	 mov	 DWORD PTR _source_side$[ebp], eax

; 2427 : 
; 2428 : 	////////////////////////////////////////
; 2429 : 	//
; 2430 : 	// text
; 2431 : 	//
; 2432 : 	////////////////////////////////////////
; 2433 : 
; 2434 : 	set_mono_font_colour (MFD_COLOUR1);

  00111	b8 04 00 00 00	 mov	 eax, 4
  00116	6b c8 00	 imul	 ecx, eax, 0
  00119	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0011f	52		 push	 edx
  00120	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 2435 : 
; 2436 : 	if (draw_large_mfd)

  00125	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0012c	74 09		 je	 SHORT $LN4@draw_air_r

; 2437 : 	{
; 2438 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  0012e	6a 05		 push	 5
  00130	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 2439 : 	}
; 2440 : 	else

  00135	eb 07		 jmp	 SHORT $LN5@draw_air_r
$LN4@draw_air_r:

; 2441 : 	{
; 2442 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  00137	6a 01		 push	 1
  00139	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN5@draw_air_r:

; 2443 : 	}
; 2444 : 
; 2445 : 	//
; 2446 : 	// declutter status
; 2447 : 	//
; 2448 : 
; 2449 : 	if (draw_large_mfd)

  0013e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00145	74 0f		 je	 SHORT $LN6@draw_air_r

; 2450 : 	{
; 2451 : 		y_adjust = 5.0;

  00147	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  0014f	f3 0f 11 45 ec	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2452 : 	}
; 2453 : 	else

  00154	eb 0d		 jmp	 SHORT $LN7@draw_air_r
$LN6@draw_air_r:

; 2454 : 	{
; 2455 : 		y_adjust = 2.0;

  00156	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0015e	f3 0f 11 45 ec	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN7@draw_air_r:

; 2456 : 	}
; 2457 : 
; 2458 : 	set_2d_mono_font_position (-0.8, 1.0);

  00163	51		 push	 ecx
  00164	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0016c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00171	51		 push	 ecx
  00172	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0017a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2459 : 
; 2460 : 	set_mono_font_rel_position (1.0, y_adjust);

  00184	51		 push	 ecx
  00185	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0018a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018f	51		 push	 ecx
  00190	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00198	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2461 : 
; 2462 : 	if (air_radar.show_allied_targets)

  001a2	83 3d 1c 00 00
	00 00		 cmp	 DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+28, 0
  001a9	74 0c		 je	 SHORT $LN8@draw_air_r

; 2463 : 	{
; 2464 : 		print_mono_font_string ("ALL");

  001ab	68 00 00 00 00	 push	 OFFSET ??_C@_03NIFPGLBG@ALL@
  001b0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2465 : 	}
; 2466 : 	else

  001b5	eb 0a		 jmp	 SHORT $LN9@draw_air_r
$LN8@draw_air_r:

; 2467 : 	{
; 2468 : 		print_mono_font_string ("ENEMY");

  001b7	68 00 00 00 00	 push	 OFFSET ??_C@_05EJJKHDCK@ENEMY@
  001bc	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN9@draw_air_r:

; 2469 : 	}
; 2470 : 
; 2471 : 	if (air_radar.sweep_mode == RADAR_SWEEP_MODE_SINGLE_ACTIVE || air_radar.sweep_mode == RADAR_SWEEP_MODE_SINGLE_INACTIVE)

  001c1	83 3d 28 00 00
	00 02		 cmp	 DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+40, 2
  001c8	74 09		 je	 SHORT $LN11@draw_air_r
  001ca	83 3d 28 00 00
	00 01		 cmp	 DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+40, 1
  001d1	75 49		 jne	 SHORT $LN10@draw_air_r
$LN11@draw_air_r:

; 2472 : 	{
; 2473 : 		set_2d_mono_font_position (-0.8, 0.8);

  001d3	51		 push	 ecx
  001d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  001dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e1	51		 push	 ecx
  001e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  001ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ef	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2474 : 		set_mono_font_rel_position (1.0, y_adjust);

  001f4	51		 push	 ecx
  001f5	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  001fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ff	51		 push	 ecx
  00200	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00208	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2475 : 		print_mono_font_string ("SGL");

  00212	68 00 00 00 00	 push	 OFFSET ??_C@_03COBKBLOD@SGL@
  00217	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN10@draw_air_r:

; 2476 : 	}
; 2477 : 
; 2478 : 	//
; 2479 : 	// scan range
; 2480 : 	//
; 2481 : 
; 2482 : 	display_radar_scan_range (air_radar.scan_range, FALSE);

  0021c	6a 00		 push	 0
  0021e	51		 push	 ecx
  0021f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A
  00227	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022c	e8 00 00 00 00	 call	 ?display_radar_scan_range@@YGXMH@Z ; display_radar_scan_range

; 2483 : 
; 2484 : 	//
; 2485 : 	// target details
; 2486 : 	//
; 2487 : 
; 2488 : 	if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_AIR_RADAR)

  00231	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 2 ; target_acquisition_system
  00238	0f 85 3a 01 00
	00		 jne	 $LN12@draw_air_r

; 2489 : 	{
; 2490 : 		target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  0023e	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  00242	74 0a		 je	 SHORT $LN33@draw_air_r
  00244	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  00247	8b 08		 mov	 ecx, DWORD PTR [eax]
  00249	89 4d 98	 mov	 DWORD PTR tv166[ebp], ecx
  0024c	eb 21		 jmp	 SHORT $LN34@draw_air_r
$LN33@draw_air_r:
  0024e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00254	83 c2 56	 add	 edx, 86			; 00000056H
  00257	52		 push	 edx
  00258	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0025d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00262	50		 push	 eax
  00263	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00268	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv166[ebp], 0
$LN34@draw_air_r:
  0026f	b9 01 00 00 00	 mov	 ecx, 1
  00274	85 c9		 test	 ecx, ecx
  00276	74 09		 je	 SHORT $LN35@draw_air_r
  00278	c7 45 94 26 00
	00 00		 mov	 DWORD PTR tv174[ebp], 38 ; 00000026H
  0027f	eb 21		 jmp	 SHORT $LN36@draw_air_r
$LN35@draw_air_r:
  00281	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00287	83 c2 56	 add	 edx, 86			; 00000056H
  0028a	52		 push	 edx
  0028b	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00290	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00295	50		 push	 eax
  00296	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0029b	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv174[ebp], 0
$LN36@draw_air_r:
  002a2	6a 26		 push	 38			; 00000026H
  002a4	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  002a7	51		 push	 ecx
  002a8	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv166[ebp], 180
  002af	8b 45 94	 mov	 eax, DWORD PTR tv174[ebp]
  002b2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  002b9	ff d1		 call	 ecx
  002bb	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax

; 2491 : 
; 2492 : 		if (target)

  002be	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  002c2	0f 84 8f 00 00
	00		 je	 $LN13@draw_air_r

; 2493 : 		{
; 2494 : 			target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  002c8	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  002cc	74 0a		 je	 SHORT $LN37@draw_air_r
  002ce	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  002d1	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d3	89 4d 98	 mov	 DWORD PTR tv187[ebp], ecx
  002d6	eb 21		 jmp	 SHORT $LN38@draw_air_r
$LN37@draw_air_r:
  002d8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  002de	83 c2 5a	 add	 edx, 90			; 0000005aH
  002e1	52		 push	 edx
  002e2	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  002e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002ec	50		 push	 eax
  002ed	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002f2	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv187[ebp], 0
$LN38@draw_air_r:
  002f9	b9 01 00 00 00	 mov	 ecx, 1
  002fe	85 c9		 test	 ecx, ecx
  00300	74 09		 je	 SHORT $LN39@draw_air_r
  00302	c7 45 94 08 00
	00 00		 mov	 DWORD PTR tv195[ebp], 8
  00309	eb 21		 jmp	 SHORT $LN40@draw_air_r
$LN39@draw_air_r:
  0030b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00311	83 c2 5a	 add	 edx, 90			; 0000005aH
  00314	52		 push	 edx
  00315	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0031a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0031f	50		 push	 eax
  00320	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00325	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv195[ebp], 0
$LN40@draw_air_r:
  0032c	6a 08		 push	 8
  0032e	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  00331	51		 push	 ecx
  00332	6b 55 98 60	 imul	 edx, DWORD PTR tv187[ebp], 96
  00336	8b 45 94	 mov	 eax, DWORD PTR tv195[ebp]
  00339	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00340	ff d1		 call	 ecx
  00342	89 45 dc	 mov	 DWORD PTR _target_position$[ebp], eax

; 2495 : 
; 2496 : 			target_range = get_3d_range (source_position, target_position);

  00345	8b 45 dc	 mov	 eax, DWORD PTR _target_position$[ebp]
  00348	50		 push	 eax
  00349	8b 4d e0	 mov	 ecx, DWORD PTR _source_position$[ebp]
  0034c	51		 push	 ecx
  0034d	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  00352	d9 5d f0	 fstp	 DWORD PTR _target_range$[ebp]

; 2497 : 		}
; 2498 : 		else

  00355	eb 08		 jmp	 SHORT $LN14@draw_air_r
$LN13@draw_air_r:

; 2499 : 		{
; 2500 : 			target_range = 0.0;

  00357	0f 57 c0	 xorps	 xmm0, xmm0
  0035a	f3 0f 11 45 f0	 movss	 DWORD PTR _target_range$[ebp], xmm0
$LN14@draw_air_r:

; 2501 : 		}
; 2502 : 
; 2503 : 		display_radar_target_details (target, target_range, &air_radar);

  0035f	68 00 00 00 00	 push	 OFFSET ?air_radar@@3URADAR_PARAMS@@A ; air_radar
  00364	51		 push	 ecx
  00365	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _target_range$[ebp]
  0036a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036f	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  00372	50		 push	 eax
  00373	e8 00 00 00 00	 call	 ?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z ; display_radar_target_details
$LN12@draw_air_r:

; 2504 : 	}
; 2505 : 
; 2506 : 	////////////////////////////////////////
; 2507 : 	//
; 2508 : 	// line graphics
; 2509 : 	//
; 2510 : 	////////////////////////////////////////
; 2511 : 
; 2512 : 	//
; 2513 : 	// datum markers
; 2514 : 	//
; 2515 : 
; 2516 : 	draw_2d_line ( 0.00,  TICK1,  0.00,  TICK2, MFD_COLOUR4);

  00378	b8 04 00 00 00	 mov	 eax, 4
  0037d	6b c8 03	 imul	 ecx, eax, 3
  00380	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00386	52		 push	 edx
  00387	51		 push	 ecx
  00388	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ac083
  00390	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00395	51		 push	 ecx
  00396	0f 57 c0	 xorps	 xmm0, xmm0
  00399	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039e	51		 push	 ecx
  0039f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3851ec
  003a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ac	51		 push	 ecx
  003ad	0f 57 c0	 xorps	 xmm0, xmm0
  003b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2517 : 	draw_2d_line ( TICK1,  0.00,  TICK2,  0.00, MFD_COLOUR4);

  003ba	b8 04 00 00 00	 mov	 eax, 4
  003bf	6b c8 03	 imul	 ecx, eax, 3
  003c2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003c8	52		 push	 edx
  003c9	51		 push	 ecx
  003ca	0f 57 c0	 xorps	 xmm0, xmm0
  003cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d2	51		 push	 ecx
  003d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ac083
  003db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e0	51		 push	 ecx
  003e1	0f 57 c0	 xorps	 xmm0, xmm0
  003e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e9	51		 push	 ecx
  003ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3851ec
  003f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2518 : 	draw_2d_line ( 0.00, -TICK1,  0.00, -TICK2, MFD_COLOUR4);

  003fc	b8 04 00 00 00	 mov	 eax, 4
  00401	6b c8 03	 imul	 ecx, eax, 3
  00404	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0040a	52		 push	 edx
  0040b	51		 push	 ecx
  0040c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ac083
  00414	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00419	51		 push	 ecx
  0041a	0f 57 c0	 xorps	 xmm0, xmm0
  0041d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00422	51		 push	 ecx
  00423	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3851ec
  0042b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00430	51		 push	 ecx
  00431	0f 57 c0	 xorps	 xmm0, xmm0
  00434	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00439	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2519 : 	draw_2d_line (-TICK1,  0.00, -TICK2,  0.00, MFD_COLOUR4);

  0043e	b8 04 00 00 00	 mov	 eax, 4
  00443	6b c8 03	 imul	 ecx, eax, 3
  00446	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0044c	52		 push	 edx
  0044d	51		 push	 ecx
  0044e	0f 57 c0	 xorps	 xmm0, xmm0
  00451	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00456	51		 push	 ecx
  00457	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ac083
  0045f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00464	51		 push	 ecx
  00465	0f 57 c0	 xorps	 xmm0, xmm0
  00468	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046d	51		 push	 ecx
  0046e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3851ec
  00476	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2520 : 
; 2521 : 	//
; 2522 : 	// range markers
; 2523 : 	//
; 2524 : 
; 2525 : 	draw_2d_circle (0.0, 0.0, RADIUS * 0.25, MFD_COLOUR4);

  00480	b8 04 00 00 00	 mov	 eax, 4
  00485	6b c8 03	 imul	 ecx, eax, 3
  00488	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0048e	52		 push	 edx
  0048f	51		 push	 ecx
  00490	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00498	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0049d	51		 push	 ecx
  0049e	0f 57 c0	 xorps	 xmm0, xmm0
  004a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a6	51		 push	 ecx
  004a7	0f 57 c0	 xorps	 xmm0, xmm0
  004aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004af	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2526 : 	draw_2d_circle (0.0, 0.0, RADIUS * 0.50, MFD_COLOUR4);

  004b4	b8 04 00 00 00	 mov	 eax, 4
  004b9	6b c8 03	 imul	 ecx, eax, 3
  004bc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004c2	52		 push	 edx
  004c3	51		 push	 ecx
  004c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  004cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d1	51		 push	 ecx
  004d2	0f 57 c0	 xorps	 xmm0, xmm0
  004d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004da	51		 push	 ecx
  004db	0f 57 c0	 xorps	 xmm0, xmm0
  004de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e3	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2527 : 	draw_2d_circle (0.0, 0.0, RADIUS * 0.75, MFD_COLOUR4);

  004e8	b8 04 00 00 00	 mov	 eax, 4
  004ed	6b c8 03	 imul	 ecx, eax, 3
  004f0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004f6	52		 push	 edx
  004f7	51		 push	 ecx
  004f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00500	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00505	51		 push	 ecx
  00506	0f 57 c0	 xorps	 xmm0, xmm0
  00509	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0050e	51		 push	 ecx
  0050f	0f 57 c0	 xorps	 xmm0, xmm0
  00512	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00517	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2528 : 
; 2529 : 	//
; 2530 : 	// scan limits
; 2531 : 	//
; 2532 : 
; 2533 : 	if (air_radar.scan_arc_size == APACHE_RADAR_SCAN_ARC_SIZE_360)

  0051c	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  00524	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@40c90fdb
  0052b	9f		 lahf
  0052c	f6 c4 44	 test	 ah, 68			; 00000044H
  0052f	7a 39		 jp	 SHORT $LN15@draw_air_r

; 2534 : 	{
; 2535 : 		draw_2d_circle (0.0, 0.0, RADIUS, MFD_COLOUR1);

  00531	b8 04 00 00 00	 mov	 eax, 4
  00536	6b c8 00	 imul	 ecx, eax, 0
  00539	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0053f	52		 push	 edx
  00540	51		 push	 ecx
  00541	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00549	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0054e	51		 push	 ecx
  0054f	0f 57 c0	 xorps	 xmm0, xmm0
  00552	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00557	51		 push	 ecx
  00558	0f 57 c0	 xorps	 xmm0, xmm0
  0055b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00560	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2536 : 	}
; 2537 : 	else

  00565	e9 ab 01 00 00	 jmp	 $LN16@draw_air_r
$LN15@draw_air_r:

; 2538 : 	{
; 2539 : 		draw_2d_circle (0.0, 0.0, RADIUS, MFD_COLOUR4);

  0056a	b8 04 00 00 00	 mov	 eax, 4
  0056f	6b c8 03	 imul	 ecx, eax, 3
  00572	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00578	52		 push	 edx
  00579	51		 push	 ecx
  0057a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00582	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00587	51		 push	 ecx
  00588	0f 57 c0	 xorps	 xmm0, xmm0
  0058b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00590	51		 push	 ecx
  00591	0f 57 c0	 xorps	 xmm0, xmm0
  00594	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00599	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2540 : 
; 2541 : 		set_2d_window_rotation (mfd_env, -air_radar.scan_datum);

  0059e	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  005a6	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  005ad	51		 push	 ecx
  005ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  005b8	50		 push	 eax
  005b9	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2542 : 
; 2543 : 		draw_radar_arc (air_radar.scan_arc_size, RADIUS, MFD_COLOUR1);

  005be	b8 04 00 00 00	 mov	 eax, 4
  005c3	6b c8 00	 imul	 ecx, eax, 0
  005c6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005cc	52		 push	 edx
  005cd	51		 push	 ecx
  005ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  005d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005db	51		 push	 ecx
  005dc	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  005e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e9	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 2544 : 
; 2545 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  005ee	b8 04 00 00 00	 mov	 eax, 4
  005f3	6b c8 00	 imul	 ecx, eax, 0
  005f6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005fc	52		 push	 edx
  005fd	51		 push	 ecx
  005fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00606	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0060b	51		 push	 ecx
  0060c	0f 57 c0	 xorps	 xmm0, xmm0
  0060f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00614	51		 push	 ecx
  00615	0f 57 c0	 xorps	 xmm0, xmm0
  00618	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0061d	51		 push	 ecx
  0061e	0f 57 c0	 xorps	 xmm0, xmm0
  00621	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00626	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2546 : 
; 2547 : 		set_2d_window_rotation (mfd_env, -(air_radar.scan_datum - (air_radar.scan_arc_size * 0.5)));

  0062b	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  00633	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  0063b	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00643	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00647	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  0064e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00652	51		 push	 ecx
  00653	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00658	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0065d	50		 push	 eax
  0065e	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2548 : 
; 2549 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  00663	b8 04 00 00 00	 mov	 eax, 4
  00668	6b c8 00	 imul	 ecx, eax, 0
  0066b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00671	52		 push	 edx
  00672	51		 push	 ecx
  00673	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  0067b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00680	51		 push	 ecx
  00681	0f 57 c0	 xorps	 xmm0, xmm0
  00684	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00689	51		 push	 ecx
  0068a	0f 57 c0	 xorps	 xmm0, xmm0
  0068d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00692	51		 push	 ecx
  00693	0f 57 c0	 xorps	 xmm0, xmm0
  00696	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0069b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2550 : 
; 2551 : 		set_2d_window_rotation (mfd_env, -(air_radar.scan_datum + (air_radar.scan_arc_size * 0.5)));

  006a0	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  006a8	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  006b0	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  006b8	f2 0f 58 c1	 addsd	 xmm0, xmm1
  006bc	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  006c3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006c7	51		 push	 ecx
  006c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  006d2	50		 push	 eax
  006d3	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2552 : 
; 2553 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  006d8	b8 04 00 00 00	 mov	 eax, 4
  006dd	6b c8 00	 imul	 ecx, eax, 0
  006e0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006e6	52		 push	 edx
  006e7	51		 push	 ecx
  006e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  006f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f5	51		 push	 ecx
  006f6	0f 57 c0	 xorps	 xmm0, xmm0
  006f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006fe	51		 push	 ecx
  006ff	0f 57 c0	 xorps	 xmm0, xmm0
  00702	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00707	51		 push	 ecx
  00708	0f 57 c0	 xorps	 xmm0, xmm0
  0070b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00710	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN16@draw_air_r:

; 2554 : 	}
; 2555 : 
; 2556 : 	//
; 2557 : 	// sweep
; 2558 : 	//
; 2559 : 
; 2560 : 	if (air_radar_is_active())

  00715	e8 00 00 00 00	 call	 ?air_radar_is_active@@YGHXZ ; air_radar_is_active
  0071a	85 c0		 test	 eax, eax
  0071c	74 65		 je	 SHORT $LN17@draw_air_r

; 2561 : 	{
; 2562 : 		set_2d_window_rotation (mfd_env, -(air_radar.scan_datum + air_radar.sweep_offset));

  0071e	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  00726	f3 0f 58 05 0c
	00 00 00	 addss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+12
  0072e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00735	51		 push	 ecx
  00736	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0073b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00740	50		 push	 eax
  00741	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2563 : 
; 2564 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  00746	b8 04 00 00 00	 mov	 eax, 4
  0074b	6b c8 00	 imul	 ecx, eax, 0
  0074e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00754	52		 push	 edx
  00755	51		 push	 ecx
  00756	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  0075e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00763	51		 push	 ecx
  00764	0f 57 c0	 xorps	 xmm0, xmm0
  00767	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0076c	51		 push	 ecx
  0076d	0f 57 c0	 xorps	 xmm0, xmm0
  00770	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00775	51		 push	 ecx
  00776	0f 57 c0	 xorps	 xmm0, xmm0
  00779	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN17@draw_air_r:

; 2565 : 	}
; 2566 : 
; 2567 : 	set_2d_window_rotation (mfd_env, 0.0);

  00783	51		 push	 ecx
  00784	0f 57 c0	 xorps	 xmm0, xmm0
  00787	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00791	50		 push	 eax
  00792	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2568 : 
; 2569 : 	////////////////////////////////////////
; 2570 : 	//
; 2571 : 	// draw targets
; 2572 : 	//
; 2573 : 	////////////////////////////////////////
; 2574 : 
; 2575 : 	if (!default_damage.radar && air_radar_is_active())

  00797	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  0079c	83 e0 01	 and	 eax, 1
  0079f	0f 85 e8 02 00
	00		 jne	 $LN18@draw_air_r
  007a5	e8 00 00 00 00	 call	 ?air_radar_is_active@@YGHXZ ; air_radar_is_active
  007aa	85 c0		 test	 eax, eax
  007ac	0f 84 db 02 00
	00		 je	 $LN18@draw_air_r

; 2576 : 	{
; 2577 : 		source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  007b2	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  007b6	74 0a		 je	 SHORT $LN41@draw_air_r
  007b8	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  007bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  007bd	89 4d 98	 mov	 DWORD PTR tv339[ebp], ecx
  007c0	eb 24		 jmp	 SHORT $LN42@draw_air_r
$LN41@draw_air_r:
  007c2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  007c8	81 c2 ad 00 00
	00		 add	 edx, 173		; 000000adH
  007ce	52		 push	 edx
  007cf	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  007d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  007d9	50		 push	 eax
  007da	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007df	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv339[ebp], 0
$LN42@draw_air_r:
  007e6	b9 01 00 00 00	 mov	 ecx, 1
  007eb	85 c9		 test	 ecx, ecx
  007ed	74 09		 je	 SHORT $LN43@draw_air_r
  007ef	c7 45 94 34 00
	00 00		 mov	 DWORD PTR tv347[ebp], 52 ; 00000034H
  007f6	eb 24		 jmp	 SHORT $LN44@draw_air_r
$LN43@draw_air_r:
  007f8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  007fe	81 c2 ad 00 00
	00		 add	 edx, 173		; 000000adH
  00804	52		 push	 edx
  00805	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0080a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0080f	50		 push	 eax
  00810	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00815	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv347[ebp], 0
$LN44@draw_air_r:
  0081c	6a 34		 push	 52			; 00000034H
  0081e	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  00821	51		 push	 ecx
  00822	69 55 98 bc 02
	00 00		 imul	 edx, DWORD PTR tv339[ebp], 700
  00829	8b 45 94	 mov	 eax, DWORD PTR tv347[ebp]
  0082c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00833	ff d1		 call	 ecx
  00835	d9 5d f8	 fstp	 DWORD PTR _source_heading$[ebp]

; 2578 : 
; 2579 : 		set_2d_window_rotation (mfd_env, source_heading);

  00838	51		 push	 ecx
  00839	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  0083e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00843	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00848	50		 push	 eax
  00849	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2580 : 
; 2581 : 		scale = RADIUS / air_radar.scan_range;

  0084e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A
  00856	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fe999999999999a
  0085e	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00862	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00866	f3 0f 11 45 f4	 movss	 DWORD PTR _scale$[ebp], xmm0

; 2582 : 
; 2583 : 		target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  0086b	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  0086f	74 0a		 je	 SHORT $LN45@draw_air_r
  00871	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  00874	8b 08		 mov	 ecx, DWORD PTR [eax]
  00876	89 4d 98	 mov	 DWORD PTR tv364[ebp], ecx
  00879	eb 24		 jmp	 SHORT $LN46@draw_air_r
$LN45@draw_air_r:
  0087b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00881	81 c2 b3 00 00
	00		 add	 edx, 179		; 000000b3H
  00887	52		 push	 edx
  00888	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0088d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00892	50		 push	 eax
  00893	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00898	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv364[ebp], 0
$LN46@draw_air_r:
  0089f	b9 01 00 00 00	 mov	 ecx, 1
  008a4	85 c9		 test	 ecx, ecx
  008a6	74 09		 je	 SHORT $LN47@draw_air_r
  008a8	c7 45 94 12 00
	00 00		 mov	 DWORD PTR tv372[ebp], 18 ; 00000012H
  008af	eb 24		 jmp	 SHORT $LN48@draw_air_r
$LN47@draw_air_r:
  008b1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  008b7	81 c2 b3 00 00
	00		 add	 edx, 179		; 000000b3H
  008bd	52		 push	 edx
  008be	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  008c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  008c8	50		 push	 eax
  008c9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008ce	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv372[ebp], 0
$LN48@draw_air_r:
  008d5	6a 12		 push	 18			; 00000012H
  008d7	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  008da	51		 push	 ecx
  008db	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv364[ebp], 180
  008e2	8b 45 94	 mov	 eax, DWORD PTR tv372[ebp]
  008e5	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  008ec	ff d1		 call	 ecx
  008ee	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax
$LN2@draw_air_r:

; 2584 : 
; 2585 : 		while (target)

  008f1	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  008f5	0f 84 c7 00 00
	00		 je	 $LN3@draw_air_r

; 2586 : 		{
; 2587 : 			if (get_gunship_target_valid_for_air_radar (target))

  008fb	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  008fe	50		 push	 eax
  008ff	e8 00 00 00 00	 call	 ?get_gunship_target_valid_for_air_radar@@YGHPAUENTITY@@@Z ; get_gunship_target_valid_for_air_radar
  00904	85 c0		 test	 eax, eax
  00906	74 2f		 je	 SHORT $LN20@draw_air_r

; 2588 : 			{
; 2589 : 				if (get_target_matches_air_radar_declutter_criteria (target, source_side))

  00908	8b 45 fc	 mov	 eax, DWORD PTR _source_side$[ebp]
  0090b	50		 push	 eax
  0090c	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  0090f	51		 push	 ecx
  00910	e8 00 00 00 00	 call	 ?get_target_matches_air_radar_declutter_criteria@@YGHPAUENTITY@@W4ENTITY_SIDES@@@Z ; get_target_matches_air_radar_declutter_criteria
  00915	85 c0		 test	 eax, eax
  00917	74 1e		 je	 SHORT $LN20@draw_air_r

; 2590 : 				{
; 2591 : 					draw_radar_target_symbol (target, source_position, scale, FALSE, FALSE, FALSE);

  00919	6a 00		 push	 0
  0091b	6a 00		 push	 0
  0091d	6a 00		 push	 0
  0091f	51		 push	 ecx
  00920	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00925	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0092a	8b 45 e0	 mov	 eax, DWORD PTR _source_position$[ebp]
  0092d	50		 push	 eax
  0092e	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  00931	51		 push	 ecx
  00932	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z ; draw_radar_target_symbol
$LN20@draw_air_r:

; 2592 : 				}
; 2593 : 			}
; 2594 : 
; 2595 : 			target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  00937	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  0093b	74 0a		 je	 SHORT $LN49@draw_air_r
  0093d	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  00940	8b 08		 mov	 ecx, DWORD PTR [eax]
  00942	89 4d 98	 mov	 DWORD PTR tv430[ebp], ecx
  00945	eb 24		 jmp	 SHORT $LN50@draw_air_r
$LN49@draw_air_r:
  00947	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  0094d	81 c2 bf 00 00
	00		 add	 edx, 191		; 000000bfH
  00953	52		 push	 edx
  00954	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00959	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0095e	50		 push	 eax
  0095f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00964	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv430[ebp], 0
$LN50@draw_air_r:
  0096b	b9 01 00 00 00	 mov	 ecx, 1
  00970	85 c9		 test	 ecx, ecx
  00972	74 09		 je	 SHORT $LN51@draw_air_r
  00974	c7 45 94 12 00
	00 00		 mov	 DWORD PTR tv438[ebp], 18 ; 00000012H
  0097b	eb 24		 jmp	 SHORT $LN52@draw_air_r
$LN51@draw_air_r:
  0097d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00983	81 c2 bf 00 00
	00		 add	 edx, 191		; 000000bfH
  00989	52		 push	 edx
  0098a	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0098f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00994	50		 push	 eax
  00995	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0099a	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv438[ebp], 0
$LN52@draw_air_r:
  009a1	6a 12		 push	 18			; 00000012H
  009a3	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  009a6	51		 push	 ecx
  009a7	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv430[ebp], 180
  009ae	8b 45 94	 mov	 eax, DWORD PTR tv438[ebp]
  009b1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  009b8	ff d1		 call	 ecx
  009ba	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax

; 2596 : 		}

  009bd	e9 2f ff ff ff	 jmp	 $LN2@draw_air_r
$LN3@draw_air_r:

; 2597 : 
; 2598 : 		//
; 2599 : 		// draw selected target last
; 2600 : 		//
; 2601 : 
; 2602 : 		if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_AIR_RADAR)

  009c2	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 2 ; target_acquisition_system
  009c9	0f 85 aa 00 00
	00		 jne	 $LN22@draw_air_r

; 2603 : 		{
; 2604 : 			target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  009cf	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  009d3	74 0a		 je	 SHORT $LN53@draw_air_r
  009d5	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  009d8	8b 08		 mov	 ecx, DWORD PTR [eax]
  009da	89 4d 98	 mov	 DWORD PTR tv451[ebp], ecx
  009dd	eb 24		 jmp	 SHORT $LN54@draw_air_r
$LN53@draw_air_r:
  009df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  009e5	81 c2 c8 00 00
	00		 add	 edx, 200		; 000000c8H
  009eb	52		 push	 edx
  009ec	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  009f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  009f6	50		 push	 eax
  009f7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009fc	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv451[ebp], 0
$LN54@draw_air_r:
  00a03	b9 01 00 00 00	 mov	 ecx, 1
  00a08	85 c9		 test	 ecx, ecx
  00a0a	74 09		 je	 SHORT $LN55@draw_air_r
  00a0c	c7 45 94 26 00
	00 00		 mov	 DWORD PTR tv459[ebp], 38 ; 00000026H
  00a13	eb 24		 jmp	 SHORT $LN56@draw_air_r
$LN55@draw_air_r:
  00a15	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00a1b	81 c2 c8 00 00
	00		 add	 edx, 200		; 000000c8H
  00a21	52		 push	 edx
  00a22	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a27	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00a2c	50		 push	 eax
  00a2d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a32	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv459[ebp], 0
$LN56@draw_air_r:
  00a39	6a 26		 push	 38			; 00000026H
  00a3b	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  00a3e	51		 push	 ecx
  00a3f	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv451[ebp], 180
  00a46	8b 45 94	 mov	 eax, DWORD PTR tv459[ebp]
  00a49	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00a50	ff d1		 call	 ecx
  00a52	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax

; 2605 : 
; 2606 : 			if (target)

  00a55	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  00a59	74 1e		 je	 SHORT $LN22@draw_air_r

; 2607 : 			{
; 2608 : 				draw_radar_target_symbol (target, source_position, scale, TRUE, FALSE, FALSE);

  00a5b	6a 00		 push	 0
  00a5d	6a 00		 push	 0
  00a5f	6a 01		 push	 1
  00a61	51		 push	 ecx
  00a62	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00a67	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a6c	8b 45 e0	 mov	 eax, DWORD PTR _source_position$[ebp]
  00a6f	50		 push	 eax
  00a70	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  00a73	51		 push	 ecx
  00a74	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z ; draw_radar_target_symbol
$LN22@draw_air_r:

; 2609 : 			}
; 2610 : 		}
; 2611 : 
; 2612 : 		set_2d_window_rotation (mfd_env, 0.0);

  00a79	51		 push	 ecx
  00a7a	0f 57 c0	 xorps	 xmm0, xmm0
  00a7d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a82	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a87	50		 push	 eax
  00a88	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN18@draw_air_r:

; 2613 : 	}
; 2614 : 
; 2615 : 	////////////////////////////////////////
; 2616 : 	//
; 2617 : 	// damaged
; 2618 : 	//
; 2619 : 	////////////////////////////////////////
; 2620 : 
; 2621 : 	if (default_damage.radar)

  00a8d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  00a92	83 e0 01	 and	 eax, 1
  00a95	0f 84 98 00 00
	00		 je	 $LN23@draw_air_r

; 2622 : 	{
; 2623 : 		draw_2d_line (-0.5, -0.5,  0.5, 0.5, MFD_COLOUR1);

  00a9b	b8 04 00 00 00	 mov	 eax, 4
  00aa0	6b c8 00	 imul	 ecx, eax, 0
  00aa3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00aa9	52		 push	 edx
  00aaa	51		 push	 ecx
  00aab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00ab3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ab8	51		 push	 ecx
  00ab9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00ac1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac6	51		 push	 ecx
  00ac7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00acf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ad4	51		 push	 ecx
  00ad5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00add	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ae2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2624 : 		draw_2d_line ( 0.5, -0.5, -0.5, 0.5, MFD_COLOUR1);

  00ae7	b8 04 00 00 00	 mov	 eax, 4
  00aec	6b c8 00	 imul	 ecx, eax, 0
  00aef	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00af5	52		 push	 edx
  00af6	51		 push	 ecx
  00af7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00aff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b04	51		 push	 ecx
  00b05	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00b0d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b12	51		 push	 ecx
  00b13	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00b1b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b20	51		 push	 ecx
  00b21	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00b29	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b2e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN23@draw_air_r:

; 2625 : 	}
; 2626 : }

  00b33	5f		 pop	 edi
  00b34	5e		 pop	 esi
  00b35	5b		 pop	 ebx
  00b36	8b e5		 mov	 esp, ebp
  00b38	5d		 pop	 ebp
  00b39	c3		 ret	 0
?draw_air_radar_mfd@@YGXXZ ENDP				; draw_air_radar_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_ground_radar_mfd@@YGXXZ
_TEXT	SEGMENT
tv707 = -112						; size = 4
tv524 = -108						; size = 4
tv490 = -108						; size = 4
tv469 = -108						; size = 4
tv349 = -108						; size = 4
tv327 = -108						; size = 4
tv241 = -108						; size = 4
tv217 = -108						; size = 4
tv198 = -108						; size = 4
tv153 = -108						; size = 4
tv130 = -108						; size = 4
tv78 = -108						; size = 4
tv516 = -104						; size = 4
tv482 = -104						; size = 4
tv461 = -104						; size = 4
tv341 = -104						; size = 4
tv287 = -104						; size = 4
tv265 = -104						; size = 4
tv233 = -104						; size = 4
tv210 = -104						; size = 4
tv190 = -104						; size = 4
tv145 = -104						; size = 4
tv90 = -104						; size = 4
tv70 = -104						; size = 4
_source_position$ = -36					; size = 4
_selected_target$ = -32					; size = 4
_target$ = -28						; size = 4
_source$ = -24						; size = 4
_scale$ = -20						; size = 4
_source_heading$ = -16					; size = 4
_v$ = -12						; size = 4
_u$ = -8						; size = 4
_y_adjust$ = -4						; size = 4
?draw_ground_radar_mfd@@YGXXZ PROC			; draw_ground_radar_mfd, COMDAT

; 2098 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2099 : 	float
; 2100 : 		y_adjust,
; 2101 : 		u,
; 2102 : 		v,
; 2103 : 		source_heading,
; 2104 : 		scale;
; 2105 : 
; 2106 : 	entity
; 2107 : 		*source,
; 2108 : 		*target,
; 2109 : 		*selected_target;
; 2110 : 
; 2111 : 	vec3d
; 2112 : 		*source_position;
; 2113 : 
; 2114 : 	source = get_gunship_entity ();

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0000e	89 45 e8	 mov	 DWORD PTR _source$[ebp], eax

; 2115 : 
; 2116 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  00011	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  00015	74 0a		 je	 SHORT $LN38@draw_groun
  00017	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 4d 98	 mov	 DWORD PTR tv70[ebp], ecx
  0001f	eb 21		 jmp	 SHORT $LN39@draw_groun
$LN38@draw_groun:
  00021	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00027	83 c2 12	 add	 edx, 18			; 00000012H
  0002a	52		 push	 edx
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003b	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN39@draw_groun:
  00042	b9 01 00 00 00	 mov	 ecx, 1
  00047	85 c9		 test	 ecx, ecx
  00049	74 09		 je	 SHORT $LN40@draw_groun
  0004b	c7 45 94 08 00
	00 00		 mov	 DWORD PTR tv78[ebp], 8
  00052	eb 21		 jmp	 SHORT $LN41@draw_groun
$LN40@draw_groun:
  00054	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  0005a	83 c2 12	 add	 edx, 18			; 00000012H
  0005d	52		 push	 edx
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006e	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN41@draw_groun:
  00075	6a 08		 push	 8
  00077	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  0007a	51		 push	 ecx
  0007b	6b 55 98 60	 imul	 edx, DWORD PTR tv70[ebp], 96
  0007f	8b 45 94	 mov	 eax, DWORD PTR tv78[ebp]
  00082	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00089	ff d1		 call	 ecx
  0008b	89 45 dc	 mov	 DWORD PTR _source_position$[ebp], eax

; 2117 : 
; 2118 : 	source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  0008e	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  00092	74 0a		 je	 SHORT $LN42@draw_groun
  00094	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  00097	8b 08		 mov	 ecx, DWORD PTR [eax]
  00099	89 4d 98	 mov	 DWORD PTR tv90[ebp], ecx
  0009c	eb 21		 jmp	 SHORT $LN43@draw_groun
$LN42@draw_groun:
  0009e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  000a4	83 c2 14	 add	 edx, 20			; 00000014H
  000a7	52		 push	 edx
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b8	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN43@draw_groun:
  000bf	b9 01 00 00 00	 mov	 ecx, 1
  000c4	85 c9		 test	 ecx, ecx
  000c6	74 09		 je	 SHORT $LN44@draw_groun
  000c8	c7 45 94 34 00
	00 00		 mov	 DWORD PTR tv130[ebp], 52 ; 00000034H
  000cf	eb 21		 jmp	 SHORT $LN45@draw_groun
$LN44@draw_groun:
  000d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  000d7	83 c2 14	 add	 edx, 20			; 00000014H
  000da	52		 push	 edx
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000eb	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN45@draw_groun:
  000f2	6a 34		 push	 52			; 00000034H
  000f4	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  000f7	51		 push	 ecx
  000f8	69 55 98 bc 02
	00 00		 imul	 edx, DWORD PTR tv90[ebp], 700
  000ff	8b 45 94	 mov	 eax, DWORD PTR tv130[ebp]
  00102	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00109	ff d1		 call	 ecx
  0010b	d9 5d f0	 fstp	 DWORD PTR _source_heading$[ebp]

; 2119 : 
; 2120 : 	scale = RADIUS / ground_radar.scan_range;

  0010e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A
  00116	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff5d3d193333333
  0011e	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00122	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00126	f3 0f 11 45 ec	 movss	 DWORD PTR _scale$[ebp], xmm0

; 2121 : 
; 2122 : 	selected_target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  0012b	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  0012f	74 0a		 je	 SHORT $LN46@draw_groun
  00131	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  00134	8b 08		 mov	 ecx, DWORD PTR [eax]
  00136	89 4d 98	 mov	 DWORD PTR tv145[ebp], ecx
  00139	eb 21		 jmp	 SHORT $LN47@draw_groun
$LN46@draw_groun:
  0013b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00141	83 c2 18	 add	 edx, 24			; 00000018H
  00144	52		 push	 edx
  00145	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0014a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0014f	50		 push	 eax
  00150	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00155	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv145[ebp], 0
$LN47@draw_groun:
  0015c	b9 01 00 00 00	 mov	 ecx, 1
  00161	85 c9		 test	 ecx, ecx
  00163	74 09		 je	 SHORT $LN48@draw_groun
  00165	c7 45 94 26 00
	00 00		 mov	 DWORD PTR tv153[ebp], 38 ; 00000026H
  0016c	eb 21		 jmp	 SHORT $LN49@draw_groun
$LN48@draw_groun:
  0016e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00174	83 c2 18	 add	 edx, 24			; 00000018H
  00177	52		 push	 edx
  00178	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0017d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00182	50		 push	 eax
  00183	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00188	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv153[ebp], 0
$LN49@draw_groun:
  0018f	6a 26		 push	 38			; 00000026H
  00191	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  00194	51		 push	 ecx
  00195	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv145[ebp], 180
  0019c	8b 45 94	 mov	 eax, DWORD PTR tv153[ebp]
  0019f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  001a6	ff d1		 call	 ecx
  001a8	89 45 e0	 mov	 DWORD PTR _selected_target$[ebp], eax

; 2123 : 
; 2124 : 	if (!selected_target)

  001ab	83 7d e0 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  001af	75 0a		 jne	 SHORT $LN8@draw_groun

; 2125 : 		radar_zoomed = FALSE;

  001b1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?radar_zoomed@@3HA, 0
$LN8@draw_groun:

; 2126 : 
; 2127 : 	if (radar_zoomed)

  001bb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?radar_zoomed@@3HA, 0
  001c2	74 21		 je	 SHORT $LN9@draw_groun

; 2128 : 		get_2d_float_screen_coordinates (0.0, 0.0, &u, &v);

  001c4	8d 45 f4	 lea	 eax, DWORD PTR _v$[ebp]
  001c7	50		 push	 eax
  001c8	8d 4d f8	 lea	 ecx, DWORD PTR _u$[ebp]
  001cb	51		 push	 ecx
  001cc	51		 push	 ecx
  001cd	0f 57 c0	 xorps	 xmm0, xmm0
  001d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d5	51		 push	 ecx
  001d6	0f 57 c0	 xorps	 xmm0, xmm0
  001d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001de	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 2129 : 	else

  001e3	eb 53		 jmp	 SHORT $LN12@draw_groun
$LN9@draw_groun:

; 2130 : 		if (draw_large_mfd)

  001e5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  001ec	74 26		 je	 SHORT $LN11@draw_groun

; 2131 : 			get_2d_float_screen_coordinates (0.0, -0.65, &u, &v);

  001ee	8d 45 f4	 lea	 eax, DWORD PTR _v$[ebp]
  001f1	50		 push	 eax
  001f2	8d 4d f8	 lea	 ecx, DWORD PTR _u$[ebp]
  001f5	51		 push	 ecx
  001f6	51		 push	 ecx
  001f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  001ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00204	51		 push	 ecx
  00205	0f 57 c0	 xorps	 xmm0, xmm0
  00208	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020d	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 2132 : 		else

  00212	eb 24		 jmp	 SHORT $LN12@draw_groun
$LN11@draw_groun:

; 2133 : 			get_2d_float_screen_coordinates (0.0, -0.7, &u, &v);

  00214	8d 45 f4	 lea	 eax, DWORD PTR _v$[ebp]
  00217	50		 push	 eax
  00218	8d 4d f8	 lea	 ecx, DWORD PTR _u$[ebp]
  0021b	51		 push	 ecx
  0021c	51		 push	 ecx
  0021d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00225	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022a	51		 push	 ecx
  0022b	0f 57 c0	 xorps	 xmm0, xmm0
  0022e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00233	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates
$LN12@draw_groun:

; 2134 : 
; 2135 : 	u -= mfd_viewport_x_min;

  00238	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _u$[ebp]
  0023d	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00245	f3 0f 11 45 f8	 movss	 DWORD PTR _u$[ebp], xmm0

; 2136 : 	v -= mfd_viewport_y_min;

  0024a	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v$[ebp]
  0024f	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00257	f3 0f 11 45 f4	 movss	 DWORD PTR _v$[ebp], xmm0

; 2137 : 	
; 2138 : 	////////////////////////////////////////
; 2139 : 	//
; 2140 : 	// draw radar clutter
; 2141 : 	//
; 2142 : 	////////////////////////////////////////
; 2143 : 
; 2144 : 	if (!default_damage.radar)

  0025c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  00261	83 e0 01	 and	 eax, 1
  00264	0f 85 38 02 00
	00		 jne	 $LN13@draw_groun

; 2145 : 	{
; 2146 : 		set_hatched_pattern (radar_clutter_hatch_pattern);

  0026a	68 00 00 00 00	 push	 OFFSET ?radar_clutter_hatch_pattern@@3PAIA ; radar_clutter_hatch_pattern
  0026f	e8 00 00 00 00	 call	 ?set_hatched_pattern@@YGXPAI@Z ; set_hatched_pattern

; 2147 : 
; 2148 : 		set_2d_viewport_origin (mfd_env, u, v);

  00274	51		 push	 ecx
  00275	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v$[ebp]
  0027a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027f	51		 push	 ecx
  00280	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _u$[ebp]
  00285	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0028f	50		 push	 eax
  00290	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 2149 : 
; 2150 : 		set_2d_window_rotation (mfd_env, source_heading);

  00295	51		 push	 ecx
  00296	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  0029b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  002a5	50		 push	 eax
  002a6	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2151 : 
; 2152 : 		target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  002ab	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  002af	74 0a		 je	 SHORT $LN50@draw_groun
  002b1	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  002b4	8b 08		 mov	 ecx, DWORD PTR [eax]
  002b6	89 4d 98	 mov	 DWORD PTR tv190[ebp], ecx
  002b9	eb 21		 jmp	 SHORT $LN51@draw_groun
$LN50@draw_groun:
  002bb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  002c1	83 c2 36	 add	 edx, 54			; 00000036H
  002c4	52		 push	 edx
  002c5	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  002ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002cf	50		 push	 eax
  002d0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002d5	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv190[ebp], 0
$LN51@draw_groun:
  002dc	b9 01 00 00 00	 mov	 ecx, 1
  002e1	85 c9		 test	 ecx, ecx
  002e3	74 09		 je	 SHORT $LN52@draw_groun
  002e5	c7 45 94 12 00
	00 00		 mov	 DWORD PTR tv198[ebp], 18 ; 00000012H
  002ec	eb 21		 jmp	 SHORT $LN53@draw_groun
$LN52@draw_groun:
  002ee	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  002f4	83 c2 36	 add	 edx, 54			; 00000036H
  002f7	52		 push	 edx
  002f8	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  002fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00302	50		 push	 eax
  00303	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00308	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv198[ebp], 0
$LN53@draw_groun:
  0030f	6a 12		 push	 18			; 00000012H
  00311	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  00314	51		 push	 ecx
  00315	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv190[ebp], 180
  0031c	8b 45 94	 mov	 eax, DWORD PTR tv198[ebp]
  0031f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00326	ff d1		 call	 ecx
  00328	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax
$LN2@draw_groun:

; 2153 : 
; 2154 : 		while (target)

  0032b	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  0032f	0f 84 16 01 00
	00		 je	 $LN3@draw_groun

; 2155 : 		{
; 2156 : 			if (get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  00335	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  00339	74 0a		 je	 SHORT $LN54@draw_groun
  0033b	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  0033e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00340	89 4d 98	 mov	 DWORD PTR tv210[ebp], ecx
  00343	eb 1d		 jmp	 SHORT $LN55@draw_groun
$LN54@draw_groun:
  00345	68 6c 08 00 00	 push	 2156			; 0000086cH
  0034a	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0034f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00355	52		 push	 edx
  00356	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0035b	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv210[ebp], 0
$LN55@draw_groun:
  00362	b8 01 00 00 00	 mov	 eax, 1
  00367	85 c0		 test	 eax, eax
  00369	74 09		 je	 SHORT $LN56@draw_groun
  0036b	c7 45 94 42 00
	00 00		 mov	 DWORD PTR tv217[ebp], 66 ; 00000042H
  00372	eb 1d		 jmp	 SHORT $LN57@draw_groun
$LN56@draw_groun:
  00374	68 6c 08 00 00	 push	 2156			; 0000086cH
  00379	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0037e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00384	51		 push	 ecx
  00385	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0038a	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv217[ebp], 0
$LN57@draw_groun:
  00391	6a 42		 push	 66			; 00000042H
  00393	8b 55 e4	 mov	 edx, DWORD PTR _target$[ebp]
  00396	52		 push	 edx
  00397	69 45 98 5c 04
	00 00		 imul	 eax, DWORD PTR tv210[ebp], 1116
  0039e	8b 4d 94	 mov	 ecx, DWORD PTR tv217[ebp]
  003a1	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  003a8	ff d2		 call	 edx
  003aa	85 c0		 test	 eax, eax
  003ac	74 18		 je	 SHORT $LN14@draw_groun

; 2157 : 			{
; 2158 : 				draw_ground_radar_clutter (target, source_position, scale);

  003ae	51		 push	 ecx
  003af	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _scale$[ebp]
  003b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b9	8b 45 dc	 mov	 eax, DWORD PTR _source_position$[ebp]
  003bc	50		 push	 eax
  003bd	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  003c0	51		 push	 ecx
  003c1	e8 00 00 00 00	 call	 ?draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z ; draw_ground_radar_clutter
$LN14@draw_groun:

; 2159 : 			}
; 2160 : 
; 2161 : 			target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  003c6	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  003ca	74 0a		 je	 SHORT $LN58@draw_groun
  003cc	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  003cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  003d1	89 4d 98	 mov	 DWORD PTR tv233[ebp], ecx
  003d4	eb 21		 jmp	 SHORT $LN59@draw_groun
$LN58@draw_groun:
  003d6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  003dc	83 c2 3f	 add	 edx, 63			; 0000003fH
  003df	52		 push	 edx
  003e0	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  003e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003ea	50		 push	 eax
  003eb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003f0	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv233[ebp], 0
$LN59@draw_groun:
  003f7	b9 01 00 00 00	 mov	 ecx, 1
  003fc	85 c9		 test	 ecx, ecx
  003fe	74 09		 je	 SHORT $LN60@draw_groun
  00400	c7 45 94 12 00
	00 00		 mov	 DWORD PTR tv241[ebp], 18 ; 00000012H
  00407	eb 21		 jmp	 SHORT $LN61@draw_groun
$LN60@draw_groun:
  00409	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  0040f	83 c2 3f	 add	 edx, 63			; 0000003fH
  00412	52		 push	 edx
  00413	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00418	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0041d	50		 push	 eax
  0041e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00423	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv241[ebp], 0
$LN61@draw_groun:
  0042a	6a 12		 push	 18			; 00000012H
  0042c	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  0042f	51		 push	 ecx
  00430	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv233[ebp], 180
  00437	8b 45 94	 mov	 eax, DWORD PTR tv241[ebp]
  0043a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00441	ff d1		 call	 ecx
  00443	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax

; 2162 : 		}

  00446	e9 e0 fe ff ff	 jmp	 $LN2@draw_groun
$LN3@draw_groun:

; 2163 : 
; 2164 : 		set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  0044b	51		 push	 ecx
  0044c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00454	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00459	51		 push	 ecx
  0045a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00462	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00467	51		 push	 ecx
  00468	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00470	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00475	51		 push	 ecx
  00476	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0047e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00483	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00488	50		 push	 eax
  00489	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 2165 : 
; 2166 : 		set_2d_window_rotation (mfd_env, 0.0);

  0048e	51		 push	 ecx
  0048f	0f 57 c0	 xorps	 xmm0, xmm0
  00492	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00497	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0049c	50		 push	 eax
  0049d	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN13@draw_groun:

; 2167 : 	}
; 2168 : 
; 2169 : 	////////////////////////////////////////
; 2170 : 	//
; 2171 : 	// text
; 2172 : 	//
; 2173 : 	////////////////////////////////////////
; 2174 : 
; 2175 : 	set_mono_font_colour (MFD_COLOUR1);

  004a2	b8 04 00 00 00	 mov	 eax, 4
  004a7	6b c8 00	 imul	 ecx, eax, 0
  004aa	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004b0	52		 push	 edx
  004b1	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 2176 : 
; 2177 : 	if (draw_large_mfd)

  004b6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  004bd	74 09		 je	 SHORT $LN15@draw_groun

; 2178 : 	{
; 2179 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  004bf	6a 05		 push	 5
  004c1	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 2180 : 	}
; 2181 : 	else

  004c6	eb 07		 jmp	 SHORT $LN16@draw_groun
$LN15@draw_groun:

; 2182 : 	{
; 2183 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  004c8	6a 01		 push	 1
  004ca	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN16@draw_groun:

; 2184 : 	}
; 2185 : 
; 2186 : 	//
; 2187 : 	// declutter status
; 2188 : 	//
; 2189 : 
; 2190 : 	if (draw_large_mfd)

  004cf	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  004d6	74 0f		 je	 SHORT $LN17@draw_groun

; 2191 : 	{
; 2192 : 		y_adjust = 5.0;

  004d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  004e0	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2193 : 	}
; 2194 : 	else

  004e5	eb 0d		 jmp	 SHORT $LN18@draw_groun
$LN17@draw_groun:

; 2195 : 	{
; 2196 : 		y_adjust = 2.0;

  004e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  004ef	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN18@draw_groun:

; 2197 : 	}
; 2198 : 
; 2199 : 	set_2d_mono_font_position (-0.9, 1.0);

  004f4	51		 push	 ecx
  004f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00502	51		 push	 ecx
  00503	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  0050b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00510	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2200 : 
; 2201 : 	set_mono_font_rel_position (1.0, y_adjust);

  00515	51		 push	 ecx
  00516	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0051b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00520	51		 push	 ecx
  00521	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00529	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0052e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2202 : 
; 2203 : 	switch (ground_radar.target_priority_type)

  00533	a1 2c 00 00 00	 mov	 eax, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+44
  00538	89 45 98	 mov	 DWORD PTR tv265[ebp], eax
  0053b	83 7d 98 04	 cmp	 DWORD PTR tv265[ebp], 4
  0053f	77 59		 ja	 SHORT $LN4@draw_groun
  00541	8b 4d 98	 mov	 ecx, DWORD PTR tv265[ebp]
  00544	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN82@draw_groun[ecx*4]
$LN19@draw_groun:

; 2204 : 	{
; 2205 : 		case TARGET_PRIORITY_UNKNOWN:
; 2206 : 		{
; 2207 : 			print_mono_font_string ("ALL");

  0054b	68 00 00 00 00	 push	 OFFSET ??_C@_03NIFPGLBG@ALL@
  00550	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2208 : 
; 2209 : 			break;

  00555	eb 43		 jmp	 SHORT $LN4@draw_groun
$LN20@draw_groun:

; 2210 : 		}
; 2211 : 		case TARGET_PRIORITY_LOW:
; 2212 : 		{
; 2213 : 			print_mono_font_string ("LOW");

  00557	68 00 00 00 00	 push	 OFFSET ??_C@_03IBEFMGAI@LOW@
  0055c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2214 : 
; 2215 : 			break;

  00561	eb 37		 jmp	 SHORT $LN4@draw_groun
$LN21@draw_groun:

; 2216 : 		}
; 2217 : 		case TARGET_PRIORITY_MEDIUM:
; 2218 : 		{
; 2219 : 			if (draw_large_mfd)

  00563	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0056a	74 0c		 je	 SHORT $LN22@draw_groun

; 2220 : 			{
; 2221 : 				print_mono_font_string ("MEDIUM");

  0056c	68 00 00 00 00	 push	 OFFSET ??_C@_06HMBFJLMK@MEDIUM@
  00571	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2222 : 			}
; 2223 : 			else

  00576	eb 0a		 jmp	 SHORT $LN23@draw_groun
$LN22@draw_groun:

; 2224 : 			{
; 2225 : 				print_mono_font_string ("MED");

  00578	68 00 00 00 00	 push	 OFFSET ??_C@_03FFIBGFCJ@MED@
  0057d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN23@draw_groun:

; 2226 : 			}
; 2227 : 
; 2228 : 			break;

  00582	eb 16		 jmp	 SHORT $LN4@draw_groun
$LN24@draw_groun:

; 2229 : 		}
; 2230 : 		case TARGET_PRIORITY_HIGH:
; 2231 : 		{
; 2232 : 			print_mono_font_string ("HIGH");

  00584	68 00 00 00 00	 push	 OFFSET ??_C@_04PKDHFCJF@HIGH@
  00589	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2233 : 
; 2234 : 			break;

  0058e	eb 0a		 jmp	 SHORT $LN4@draw_groun
$LN25@draw_groun:

; 2235 : 		}
; 2236 : 		// Jabberwock 031107 Designated targets
; 2237 : 		case TARGET_PRIORITY_DESIGNATED:
; 2238 : 		{
; 2239 : 			print_mono_font_string ("MARK");

  00590	68 00 00 00 00	 push	 OFFSET ??_C@_04MGKDMHFC@MARK@
  00595	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN4@draw_groun:

; 2240 : 
; 2241 : 			break;
; 2242 : 		}
; 2243 : 		// Jabberwock 031107 ends	
; 2244 : 	}
; 2245 : 
; 2246 : 	if (ground_radar.sweep_mode == RADAR_SWEEP_MODE_SINGLE_ACTIVE || ground_radar.sweep_mode == RADAR_SWEEP_MODE_SINGLE_INACTIVE)

  0059a	83 3d 28 00 00
	00 02		 cmp	 DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+40, 2
  005a1	74 09		 je	 SHORT $LN27@draw_groun
  005a3	83 3d 28 00 00
	00 01		 cmp	 DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+40, 1
  005aa	75 2b		 jne	 SHORT $LN26@draw_groun
$LN27@draw_groun:

; 2247 : 	{
; 2248 : 		set_2d_mono_font_position (-0.9, 0.8);

  005ac	51		 push	 ecx
  005ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  005b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ba	51		 push	 ecx
  005bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  005c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c8	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2249 : 		print_mono_font_string ("SGL");

  005cd	68 00 00 00 00	 push	 OFFSET ??_C@_03COBKBLOD@SGL@
  005d2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN26@draw_groun:

; 2250 : 	}
; 2251 : 
; 2252 : 	//
; 2253 : 	// scan range
; 2254 : 	//
; 2255 : 
; 2256 : 	display_radar_scan_range (ground_radar.scan_range, TRUE);

  005d7	6a 01		 push	 1
  005d9	51		 push	 ecx
  005da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A
  005e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e7	e8 00 00 00 00	 call	 ?display_radar_scan_range@@YGXMH@Z ; display_radar_scan_range

; 2257 : 
; 2258 : 	////////////////////////////////////////
; 2259 : 	//
; 2260 : 	// draw heading scale
; 2261 : 	//
; 2262 : 	////////////////////////////////////////
; 2263 : 
; 2264 : 	draw_heading_scale (get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_HEADING));

  005ec	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  005f3	74 0c		 je	 SHORT $LN62@draw_groun
  005f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  005fa	8b 08		 mov	 ecx, DWORD PTR [eax]
  005fc	89 4d 98	 mov	 DWORD PTR tv287[ebp], ecx
  005ff	eb 24		 jmp	 SHORT $LN63@draw_groun
$LN62@draw_groun:
  00601	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00607	81 c2 a6 00 00
	00		 add	 edx, 166		; 000000a6H
  0060d	52		 push	 edx
  0060e	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00613	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00618	50		 push	 eax
  00619	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0061e	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv287[ebp], 0
$LN63@draw_groun:
  00625	b9 01 00 00 00	 mov	 ecx, 1
  0062a	85 c9		 test	 ecx, ecx
  0062c	74 09		 je	 SHORT $LN64@draw_groun
  0062e	c7 45 94 34 00
	00 00		 mov	 DWORD PTR tv327[ebp], 52 ; 00000034H
  00635	eb 24		 jmp	 SHORT $LN65@draw_groun
$LN64@draw_groun:
  00637	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  0063d	81 c2 a6 00 00
	00		 add	 edx, 166		; 000000a6H
  00643	52		 push	 edx
  00644	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00649	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0064e	50		 push	 eax
  0064f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00654	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv327[ebp], 0
$LN65@draw_groun:
  0065b	6a 34		 push	 52			; 00000034H
  0065d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00663	51		 push	 ecx
  00664	69 55 98 bc 02
	00 00		 imul	 edx, DWORD PTR tv287[ebp], 700
  0066b	8b 45 94	 mov	 eax, DWORD PTR tv327[ebp]
  0066e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00675	ff d1		 call	 ecx
  00677	d9 5d 90	 fstp	 DWORD PTR tv707[ebp]
  0067a	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR tv707[ebp]
  0067f	51		 push	 ecx
  00680	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00685	e8 00 00 00 00	 call	 ?draw_heading_scale@@YGXM@Z ; draw_heading_scale

; 2265 : 
; 2266 : 	////////////////////////////////////////
; 2267 : 	//
; 2268 : 	// draw field of regard and view boxes
; 2269 : 	//
; 2270 : 	////////////////////////////////////////
; 2271 : 
; 2272 : 	target = get_local_entity_parent (get_gunship_entity (), LIST_TYPE_TARGET);

  0068a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00691	74 0c		 je	 SHORT $LN66@draw_groun
  00693	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00698	8b 08		 mov	 ecx, DWORD PTR [eax]
  0069a	89 4d 98	 mov	 DWORD PTR tv341[ebp], ecx
  0069d	eb 24		 jmp	 SHORT $LN67@draw_groun
$LN66@draw_groun:
  0069f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  006a5	81 c2 ae 00 00
	00		 add	 edx, 174		; 000000aeH
  006ab	52		 push	 edx
  006ac	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  006b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  006b6	50		 push	 eax
  006b7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006bc	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv341[ebp], 0
$LN67@draw_groun:
  006c3	b9 01 00 00 00	 mov	 ecx, 1
  006c8	85 c9		 test	 ecx, ecx
  006ca	74 09		 je	 SHORT $LN68@draw_groun
  006cc	c7 45 94 26 00
	00 00		 mov	 DWORD PTR tv349[ebp], 38 ; 00000026H
  006d3	eb 24		 jmp	 SHORT $LN69@draw_groun
$LN68@draw_groun:
  006d5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  006db	81 c2 ae 00 00
	00		 add	 edx, 174		; 000000aeH
  006e1	52		 push	 edx
  006e2	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  006e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  006ec	50		 push	 eax
  006ed	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006f2	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv349[ebp], 0
$LN69@draw_groun:
  006f9	6a 26		 push	 38			; 00000026H
  006fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00701	51		 push	 ecx
  00702	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv341[ebp], 180
  00709	8b 45 94	 mov	 eax, DWORD PTR tv349[ebp]
  0070c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00713	ff d1		 call	 ecx
  00715	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax

; 2273 : 	draw_high_action_display(target, FALSE);

  00718	6a 00		 push	 0
  0071a	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  0071d	50		 push	 eax
  0071e	e8 00 00 00 00	 call	 ?draw_high_action_display@@YGXPAUENTITY@@H@Z ; draw_high_action_display

; 2274 : 
; 2275 : 	////////////////////////////////////////
; 2276 : 	//
; 2277 : 	// line graphics
; 2278 : 	//
; 2279 : 	////////////////////////////////////////
; 2280 : 
; 2281 : 	set_2d_viewport_origin (mfd_env, u, v);

  00723	51		 push	 ecx
  00724	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v$[ebp]
  00729	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0072e	51		 push	 ecx
  0072f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _u$[ebp]
  00734	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00739	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0073e	50		 push	 eax
  0073f	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 2282 : 
; 2283 : 	//
; 2284 : 	// max scan limits
; 2285 : 	//
; 2286 : 
; 2287 : 	if (!radar_zoomed)

  00744	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?radar_zoomed@@3HA, 0
  0074b	0f 85 00 03 00
	00		 jne	 $LN28@draw_groun

; 2288 : 	{
; 2289 : 		draw_2d_line (0.0, 0.0, -0.965, 0.965, MFD_COLOUR4);

  00751	b8 04 00 00 00	 mov	 eax, 4
  00756	6b c8 03	 imul	 ecx, eax, 3
  00759	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0075f	52		 push	 edx
  00760	51		 push	 ecx
  00761	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f770a3d
  00769	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0076e	51		 push	 ecx
  0076f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf770a3d
  00777	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077c	51		 push	 ecx
  0077d	0f 57 c0	 xorps	 xmm0, xmm0
  00780	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00785	51		 push	 ecx
  00786	0f 57 c0	 xorps	 xmm0, xmm0
  00789	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2290 : 	
; 2291 : 		draw_2d_line (0.0, 0.0, 0.965, 0.965, MFD_COLOUR4);

  00793	b8 04 00 00 00	 mov	 eax, 4
  00798	6b c8 03	 imul	 ecx, eax, 3
  0079b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007a1	52		 push	 edx
  007a2	51		 push	 ecx
  007a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f770a3d
  007ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b0	51		 push	 ecx
  007b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f770a3d
  007b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007be	51		 push	 ecx
  007bf	0f 57 c0	 xorps	 xmm0, xmm0
  007c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c7	51		 push	 ecx
  007c8	0f 57 c0	 xorps	 xmm0, xmm0
  007cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2292 : 	
; 2293 : 		draw_radar_arc (APACHE_RADAR_SCAN_ARC_SIZE_90, RADIUS, MFD_COLOUR4);

  007d5	b8 04 00 00 00	 mov	 eax, 4
  007da	6b c8 03	 imul	 ecx, eax, 3
  007dd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007e3	52		 push	 edx
  007e4	51		 push	 ecx
  007e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fae9e8d
  007ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f2	51		 push	 ecx
  007f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  007fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00800	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 2294 : 	
; 2295 : 		//
; 2296 : 		// scan limits and range markers
; 2297 : 		//
; 2298 : 	
; 2299 : 		set_2d_window_rotation (mfd_env, -ground_radar.scan_datum);

  00805	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  0080d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00814	51		 push	 ecx
  00815	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0081f	50		 push	 eax
  00820	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2300 : 	
; 2301 : 		draw_radar_arc (ground_radar.scan_arc_size, RADIUS, MFD_COLOUR1);

  00825	b8 04 00 00 00	 mov	 eax, 4
  0082a	6b c8 00	 imul	 ecx, eax, 0
  0082d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00833	52		 push	 edx
  00834	51		 push	 ecx
  00835	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fae9e8d
  0083d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00842	51		 push	 ecx
  00843	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  0084b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00850	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 2302 : 	
; 2303 : 		draw_radar_arc (ground_radar.scan_arc_size, RADIUS * 0.25, MFD_COLOUR4);

  00855	b8 04 00 00 00	 mov	 eax, 4
  0085a	6b c8 03	 imul	 ecx, eax, 3
  0085d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00863	52		 push	 edx
  00864	51		 push	 ecx
  00865	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eae9e8d
  0086d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00872	51		 push	 ecx
  00873	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  0087b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00880	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 2304 : 		draw_radar_arc (ground_radar.scan_arc_size, RADIUS * 0.50, MFD_COLOUR4);

  00885	b8 04 00 00 00	 mov	 eax, 4
  0088a	6b c8 03	 imul	 ecx, eax, 3
  0088d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00893	52		 push	 edx
  00894	51		 push	 ecx
  00895	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f2e9e8d
  0089d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a2	51		 push	 ecx
  008a3	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  008ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008b0	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 2305 : 		draw_radar_arc (ground_radar.scan_arc_size, RADIUS * 0.75, MFD_COLOUR4);

  008b5	b8 04 00 00 00	 mov	 eax, 4
  008ba	6b c8 03	 imul	 ecx, eax, 3
  008bd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008c3	52		 push	 edx
  008c4	51		 push	 ecx
  008c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f82f6e9
  008cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d2	51		 push	 ecx
  008d3	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  008db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e0	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 2306 : 	
; 2307 : 		set_2d_window_rotation (mfd_env, -(ground_radar.scan_datum - (ground_radar.scan_arc_size * 0.5)));

  008e5	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  008ed	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  008f5	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  008fd	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00901	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00908	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0090c	51		 push	 ecx
  0090d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00912	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00917	50		 push	 eax
  00918	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2308 : 	
; 2309 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  0091d	b8 04 00 00 00	 mov	 eax, 4
  00922	6b c8 00	 imul	 ecx, eax, 0
  00925	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0092b	52		 push	 edx
  0092c	51		 push	 ecx
  0092d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fae9e8d
  00935	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0093a	51		 push	 ecx
  0093b	0f 57 c0	 xorps	 xmm0, xmm0
  0093e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00943	51		 push	 ecx
  00944	0f 57 c0	 xorps	 xmm0, xmm0
  00947	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0094c	51		 push	 ecx
  0094d	0f 57 c0	 xorps	 xmm0, xmm0
  00950	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00955	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2310 : 	
; 2311 : 		set_2d_window_rotation (mfd_env, -(ground_radar.scan_datum + (ground_radar.scan_arc_size * 0.5)));

  0095a	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  00962	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  0096a	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00972	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00976	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  0097d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00981	51		 push	 ecx
  00982	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00987	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0098c	50		 push	 eax
  0098d	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2312 : 	
; 2313 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  00992	b8 04 00 00 00	 mov	 eax, 4
  00997	6b c8 00	 imul	 ecx, eax, 0
  0099a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009a0	52		 push	 edx
  009a1	51		 push	 ecx
  009a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fae9e8d
  009aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009af	51		 push	 ecx
  009b0	0f 57 c0	 xorps	 xmm0, xmm0
  009b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b8	51		 push	 ecx
  009b9	0f 57 c0	 xorps	 xmm0, xmm0
  009bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009c1	51		 push	 ecx
  009c2	0f 57 c0	 xorps	 xmm0, xmm0
  009c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ca	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2314 : 	
; 2315 : 		//
; 2316 : 		// sweep
; 2317 : 		//
; 2318 : 	
; 2319 : 		if (ground_radar_is_active())

  009cf	e8 00 00 00 00	 call	 ?ground_radar_is_active@@YGHXZ ; ground_radar_is_active
  009d4	85 c0		 test	 eax, eax
  009d6	74 65		 je	 SHORT $LN29@draw_groun

; 2320 : 		{
; 2321 : 			set_2d_window_rotation (mfd_env, -(ground_radar.scan_datum + ground_radar.sweep_offset));

  009d8	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  009e0	f3 0f 58 05 0c
	00 00 00	 addss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+12
  009e8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  009ef	51		 push	 ecx
  009f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  009fa	50		 push	 eax
  009fb	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2322 : 	
; 2323 : 			draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  00a00	b8 04 00 00 00	 mov	 eax, 4
  00a05	6b c8 00	 imul	 ecx, eax, 0
  00a08	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a0e	52		 push	 edx
  00a0f	51		 push	 ecx
  00a10	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fae9e8d
  00a18	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a1d	51		 push	 ecx
  00a1e	0f 57 c0	 xorps	 xmm0, xmm0
  00a21	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a26	51		 push	 ecx
  00a27	0f 57 c0	 xorps	 xmm0, xmm0
  00a2a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a2f	51		 push	 ecx
  00a30	0f 57 c0	 xorps	 xmm0, xmm0
  00a33	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a38	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN29@draw_groun:

; 2324 : 		}
; 2325 : 	
; 2326 : 		set_2d_window_rotation (mfd_env, 0.0);

  00a3d	51		 push	 ecx
  00a3e	0f 57 c0	 xorps	 xmm0, xmm0
  00a41	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a46	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a4b	50		 push	 eax
  00a4c	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN28@draw_groun:

; 2327 : 	}
; 2328 : 
; 2329 : 	////////////////////////////////////////
; 2330 : 	//
; 2331 : 	// targets
; 2332 : 	//
; 2333 : 	////////////////////////////////////////
; 2334 : 
; 2335 : 	if (!default_damage.radar)

  00a51	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  00a56	83 e0 01	 and	 eax, 1
  00a59	0f 85 4f 02 00
	00		 jne	 $LN30@draw_groun

; 2336 : 	{
; 2337 : 		set_2d_window_rotation (mfd_env, source_heading);

  00a5f	51		 push	 ecx
  00a60	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  00a65	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a6a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a6f	50		 push	 eax
  00a70	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2338 : 
; 2339 : 		target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  00a75	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  00a79	74 0a		 je	 SHORT $LN70@draw_groun
  00a7b	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  00a7e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a80	89 4d 98	 mov	 DWORD PTR tv461[ebp], ecx
  00a83	eb 24		 jmp	 SHORT $LN71@draw_groun
$LN70@draw_groun:
  00a85	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00a8b	81 c2 f1 00 00
	00		 add	 edx, 241		; 000000f1H
  00a91	52		 push	 edx
  00a92	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a97	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00a9c	50		 push	 eax
  00a9d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00aa2	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv461[ebp], 0
$LN71@draw_groun:
  00aa9	b9 01 00 00 00	 mov	 ecx, 1
  00aae	85 c9		 test	 ecx, ecx
  00ab0	74 09		 je	 SHORT $LN72@draw_groun
  00ab2	c7 45 94 12 00
	00 00		 mov	 DWORD PTR tv469[ebp], 18 ; 00000012H
  00ab9	eb 24		 jmp	 SHORT $LN73@draw_groun
$LN72@draw_groun:
  00abb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00ac1	81 c2 f1 00 00
	00		 add	 edx, 241		; 000000f1H
  00ac7	52		 push	 edx
  00ac8	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00acd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00ad2	50		 push	 eax
  00ad3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ad8	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv469[ebp], 0
$LN73@draw_groun:
  00adf	6a 12		 push	 18			; 00000012H
  00ae1	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  00ae4	51		 push	 ecx
  00ae5	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv461[ebp], 180
  00aec	8b 45 94	 mov	 eax, DWORD PTR tv469[ebp]
  00aef	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00af6	ff d1		 call	 ecx
  00af8	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax

; 2340 : 
; 2341 : 		if (radar_zoomed)

  00afb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?radar_zoomed@@3HA, 0
  00b02	0f 84 90 00 00
	00		 je	 $LN31@draw_groun

; 2342 : 		{
; 2343 : 			// in zoomed mode centre radar on selected target
; 2344 : 			source_position = get_local_entity_vec3d_ptr(selected_target, VEC3D_TYPE_POSITION);

  00b08	83 7d e0 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00b0c	74 0a		 je	 SHORT $LN74@draw_groun
  00b0e	8b 45 e0	 mov	 eax, DWORD PTR _selected_target$[ebp]
  00b11	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b13	89 4d 98	 mov	 DWORD PTR tv482[ebp], ecx
  00b16	eb 24		 jmp	 SHORT $LN75@draw_groun
$LN74@draw_groun:
  00b18	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00b1e	81 c2 f6 00 00
	00		 add	 edx, 246		; 000000f6H
  00b24	52		 push	 edx
  00b25	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b2a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00b2f	50		 push	 eax
  00b30	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b35	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv482[ebp], 0
$LN75@draw_groun:
  00b3c	b9 01 00 00 00	 mov	 ecx, 1
  00b41	85 c9		 test	 ecx, ecx
  00b43	74 09		 je	 SHORT $LN76@draw_groun
  00b45	c7 45 94 08 00
	00 00		 mov	 DWORD PTR tv490[ebp], 8
  00b4c	eb 24		 jmp	 SHORT $LN77@draw_groun
$LN76@draw_groun:
  00b4e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00b54	81 c2 f6 00 00
	00		 add	 edx, 246		; 000000f6H
  00b5a	52		 push	 edx
  00b5b	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b60	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00b65	50		 push	 eax
  00b66	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b6b	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv490[ebp], 0
$LN77@draw_groun:
  00b72	6a 08		 push	 8
  00b74	8b 4d e0	 mov	 ecx, DWORD PTR _selected_target$[ebp]
  00b77	51		 push	 ecx
  00b78	6b 55 98 60	 imul	 edx, DWORD PTR tv482[ebp], 96
  00b7c	8b 45 94	 mov	 eax, DWORD PTR tv490[ebp]
  00b7f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00b86	ff d1		 call	 ecx
  00b88	89 45 dc	 mov	 DWORD PTR _source_position$[ebp], eax

; 2345 : 			scale = 0.004;  // 1/250 ==  250m in each axis direction from selected target

  00b8b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3b83126f
  00b93	f3 0f 11 45 ec	 movss	 DWORD PTR _scale$[ebp], xmm0
$LN31@draw_groun:

; 2346 : 		}
; 2347 : 
; 2348 : 		while (target)

  00b98	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  00b9c	0f 84 cb 00 00
	00		 je	 $LN7@draw_groun

; 2349 : 		{
; 2350 : 			if (target != selected_target && get_gunship_target_valid_for_ground_radar (target))

  00ba2	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  00ba5	3b 45 e0	 cmp	 eax, DWORD PTR _selected_target$[ebp]
  00ba8	74 38		 je	 SHORT $LN33@draw_groun
  00baa	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  00bad	50		 push	 eax
  00bae	e8 00 00 00 00	 call	 ?get_gunship_target_valid_for_ground_radar@@YGHPAUENTITY@@@Z ; get_gunship_target_valid_for_ground_radar
  00bb3	85 c0		 test	 eax, eax
  00bb5	74 2b		 je	 SHORT $LN33@draw_groun

; 2351 : 			{
; 2352 : 				if (get_target_matches_ground_radar_declutter_criteria (target))

  00bb7	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  00bba	50		 push	 eax
  00bbb	e8 00 00 00 00	 call	 ?get_target_matches_ground_radar_declutter_criteria@@YGHPAUENTITY@@@Z ; get_target_matches_ground_radar_declutter_criteria
  00bc0	85 c0		 test	 eax, eax
  00bc2	74 1e		 je	 SHORT $LN33@draw_groun

; 2353 : 					draw_radar_target_symbol (target, source_position, scale, FALSE, FALSE, FALSE);

  00bc4	6a 00		 push	 0
  00bc6	6a 00		 push	 0
  00bc8	6a 00		 push	 0
  00bca	51		 push	 ecx
  00bcb	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00bd0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bd5	8b 45 dc	 mov	 eax, DWORD PTR _source_position$[ebp]
  00bd8	50		 push	 eax
  00bd9	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  00bdc	51		 push	 ecx
  00bdd	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z ; draw_radar_target_symbol
$LN33@draw_groun:

; 2354 : 			}
; 2355 : 
; 2356 : 			target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  00be2	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  00be6	74 0a		 je	 SHORT $LN78@draw_groun
  00be8	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  00beb	8b 08		 mov	 ecx, DWORD PTR [eax]
  00bed	89 4d 98	 mov	 DWORD PTR tv516[ebp], ecx
  00bf0	eb 24		 jmp	 SHORT $LN79@draw_groun
$LN78@draw_groun:
  00bf2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00bf8	81 c2 02 01 00
	00		 add	 edx, 258		; 00000102H
  00bfe	52		 push	 edx
  00bff	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c04	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00c09	50		 push	 eax
  00c0a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c0f	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv516[ebp], 0
$LN79@draw_groun:
  00c16	b9 01 00 00 00	 mov	 ecx, 1
  00c1b	85 c9		 test	 ecx, ecx
  00c1d	74 09		 je	 SHORT $LN80@draw_groun
  00c1f	c7 45 94 12 00
	00 00		 mov	 DWORD PTR tv524[ebp], 18 ; 00000012H
  00c26	eb 24		 jmp	 SHORT $LN81@draw_groun
$LN80@draw_groun:
  00c28	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00c2e	81 c2 02 01 00
	00		 add	 edx, 258		; 00000102H
  00c34	52		 push	 edx
  00c35	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c3a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00c3f	50		 push	 eax
  00c40	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c45	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv524[ebp], 0
$LN81@draw_groun:
  00c4c	6a 12		 push	 18			; 00000012H
  00c4e	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  00c51	51		 push	 ecx
  00c52	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv516[ebp], 180
  00c59	8b 45 94	 mov	 eax, DWORD PTR tv524[ebp]
  00c5c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00c63	ff d1		 call	 ecx
  00c65	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax

; 2357 : 		}

  00c68	e9 2b ff ff ff	 jmp	 $LN31@draw_groun
$LN7@draw_groun:

; 2358 : 
; 2359 : 		//
; 2360 : 		// draw selected target last
; 2361 : 		//
; 2362 : 
; 2363 : 		if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_GROUND_RADAR)

  00c6d	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 1 ; target_acquisition_system
  00c74	75 24		 jne	 SHORT $LN35@draw_groun

; 2364 : 		{
; 2365 : 			if (selected_target)

  00c76	83 7d e0 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00c7a	74 1e		 je	 SHORT $LN35@draw_groun

; 2366 : 				draw_radar_target_symbol (selected_target, source_position, scale, TRUE, FALSE, FALSE);

  00c7c	6a 00		 push	 0
  00c7e	6a 00		 push	 0
  00c80	6a 01		 push	 1
  00c82	51		 push	 ecx
  00c83	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00c88	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c8d	8b 45 dc	 mov	 eax, DWORD PTR _source_position$[ebp]
  00c90	50		 push	 eax
  00c91	8b 4d e0	 mov	 ecx, DWORD PTR _selected_target$[ebp]
  00c94	51		 push	 ecx
  00c95	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z ; draw_radar_target_symbol
$LN35@draw_groun:

; 2367 : 		}
; 2368 : 
; 2369 : 		set_2d_window_rotation (mfd_env, 0.0);

  00c9a	51		 push	 ecx
  00c9b	0f 57 c0	 xorps	 xmm0, xmm0
  00c9e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ca3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00ca8	50		 push	 eax
  00ca9	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN30@draw_groun:

; 2370 : 	}
; 2371 : 
; 2372 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00cae	51		 push	 ecx
  00caf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00cb7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cbc	51		 push	 ecx
  00cbd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00cc5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cca	51		 push	 ecx
  00ccb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00cd3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cd8	51		 push	 ecx
  00cd9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00ce1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ce6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00ceb	50		 push	 eax
  00cec	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 2373 : 
; 2374 : 	////////////////////////////////////////
; 2375 : 	//
; 2376 : 	// damaged
; 2377 : 	//
; 2378 : 	////////////////////////////////////////
; 2379 : 
; 2380 : 	if (default_damage.radar)

  00cf1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  00cf6	83 e0 01	 and	 eax, 1
  00cf9	0f 84 98 00 00
	00		 je	 $LN36@draw_groun

; 2381 : 	{
; 2382 : 		draw_2d_line (-0.5, -0.5,  0.5, 0.5, MFD_COLOUR1);

  00cff	b8 04 00 00 00	 mov	 eax, 4
  00d04	6b c8 00	 imul	 ecx, eax, 0
  00d07	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00d0d	52		 push	 edx
  00d0e	51		 push	 ecx
  00d0f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00d17	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d1c	51		 push	 ecx
  00d1d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00d25	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d2a	51		 push	 ecx
  00d2b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00d33	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d38	51		 push	 ecx
  00d39	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00d41	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d46	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2383 : 		draw_2d_line ( 0.5, -0.5, -0.5, 0.5, MFD_COLOUR1);

  00d4b	b8 04 00 00 00	 mov	 eax, 4
  00d50	6b c8 00	 imul	 ecx, eax, 0
  00d53	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00d59	52		 push	 edx
  00d5a	51		 push	 ecx
  00d5b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00d63	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d68	51		 push	 ecx
  00d69	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00d71	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d76	51		 push	 ecx
  00d77	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00d7f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d84	51		 push	 ecx
  00d85	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00d8d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d92	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN36@draw_groun:

; 2384 : 	}
; 2385 : }

  00d97	5f		 pop	 edi
  00d98	5e		 pop	 esi
  00d99	5b		 pop	 ebx
  00d9a	8b e5		 mov	 esp, ebp
  00d9c	5d		 pop	 ebp
  00d9d	c3		 ret	 0
  00d9e	66 90		 npad	 2
$LN82@draw_groun:
  00da0	00 00 00 00	 DD	 $LN19@draw_groun
  00da4	00 00 00 00	 DD	 $LN20@draw_groun
  00da8	00 00 00 00	 DD	 $LN21@draw_groun
  00dac	00 00 00 00	 DD	 $LN24@draw_groun
  00db0	00 00 00 00	 DD	 $LN25@draw_groun
?draw_ground_radar_mfd@@YGXXZ ENDP			; draw_ground_radar_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z
_TEXT	SEGMENT
tv180 = -100						; size = 4
tv160 = -100						; size = 4
tv132 = -100						; size = 4
tv172 = -96						; size = 4
tv152 = -96						; size = 4
tv92 = -96						; size = 4
tv80 = -96						; size = 4
$T1 = -92						; size = 4
_bounding_box_max$ = -24				; size = 4
_bounding_box_min$ = -20				; size = 4
_target_position$ = -16					; size = 4
_radius$ = -12						; size = 4
_dy$ = -8						; size = 4
_dx$ = -4						; size = 4
_target$ = 8						; size = 4
_source_position$ = 12					; size = 4
_scale$ = 16						; size = 4
?draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z PROC ; draw_ground_radar_clutter, COMDAT

; 2047 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2048 : 	float
; 2049 : 		dx,
; 2050 : 		dy,
; 2051 : 		radius;
; 2052 : 
; 2053 : 	vec3d
; 2054 : 		*target_position,
; 2055 : 		*bounding_box_min,
; 2056 : 		*bounding_box_max;
; 2057 : 
; 2058 : 	ASSERT (target);

  00009	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@draw_groun
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00014	83 c0 0b	 add	 eax, 11			; 0000000bH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@draw_groun:

; 2059 : 
; 2060 : 	ASSERT (source_position);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _source_position$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@draw_groun
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00032	83 c0 0d	 add	 eax, 13			; 0000000dH
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IIPCKJML@source_position@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@draw_groun:

; 2061 : 
; 2062 : 	ASSERT (get_local_entity_type (target) == ENTITY_TYPE_CITY);

  00045	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00049	74 0a		 je	 SHORT $LN7@draw_groun
  0004b	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	89 4d a0	 mov	 DWORD PTR tv80[ebp], ecx
  00053	eb 21		 jmp	 SHORT $LN8@draw_groun
$LN7@draw_groun:
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  0005b	83 c2 0f	 add	 edx, 15			; 0000000fH
  0005e	52		 push	 edx
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006f	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN8@draw_groun:
  00076	83 7d a0 05	 cmp	 DWORD PTR tv80[ebp], 5
  0007a	74 18		 je	 SHORT $LN4@draw_groun
  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00081	83 c0 0f	 add	 eax, 15			; 0000000fH
  00084	50		 push	 eax
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@KDAGALDF@get_local_entity_type?5?$CItarget?$CJ?5@
  0008f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_groun:

; 2063 : 
; 2064 : 	target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00094	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00098	74 0a		 je	 SHORT $LN9@draw_groun
  0009a	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0009d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009f	89 4d a0	 mov	 DWORD PTR tv92[ebp], ecx
  000a2	eb 21		 jmp	 SHORT $LN10@draw_groun
$LN9@draw_groun:
  000a4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  000aa	83 c2 11	 add	 edx, 17			; 00000011H
  000ad	52		 push	 edx
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000be	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv92[ebp], 0
$LN10@draw_groun:
  000c5	b9 01 00 00 00	 mov	 ecx, 1
  000ca	85 c9		 test	 ecx, ecx
  000cc	74 09		 je	 SHORT $LN11@draw_groun
  000ce	c7 45 9c 08 00
	00 00		 mov	 DWORD PTR tv132[ebp], 8
  000d5	eb 21		 jmp	 SHORT $LN12@draw_groun
$LN11@draw_groun:
  000d7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  000dd	83 c2 11	 add	 edx, 17			; 00000011H
  000e0	52		 push	 edx
  000e1	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000eb	50		 push	 eax
  000ec	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000f1	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
$LN12@draw_groun:
  000f8	6a 08		 push	 8
  000fa	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  000fd	51		 push	 ecx
  000fe	6b 55 a0 60	 imul	 edx, DWORD PTR tv92[ebp], 96
  00102	8b 45 9c	 mov	 eax, DWORD PTR tv132[ebp]
  00105	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0010c	ff d1		 call	 ecx
  0010e	89 45 f0	 mov	 DWORD PTR _target_position$[ebp], eax

; 2065 : 
; 2066 : 	dx = (target_position->x - source_position->x) * scale;

  00111	8b 45 f0	 mov	 eax, DWORD PTR _target_position$[ebp]
  00114	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  00117	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0011b	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0011f	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00124	f3 0f 11 45 fc	 movss	 DWORD PTR _dx$[ebp], xmm0

; 2067 : 	dy = (target_position->z - source_position->z) * scale;

  00129	8b 45 f0	 mov	 eax, DWORD PTR _target_position$[ebp]
  0012c	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  0012f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00134	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00139	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0013e	f3 0f 11 45 f8	 movss	 DWORD PTR _dy$[ebp], xmm0

; 2068 : 
; 2069 : 	bounding_box_min = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_BOUNDING_BOX_MIN);

  00143	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00147	74 0a		 je	 SHORT $LN13@draw_groun
  00149	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0014c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014e	89 4d a0	 mov	 DWORD PTR tv152[ebp], ecx
  00151	eb 21		 jmp	 SHORT $LN14@draw_groun
$LN13@draw_groun:
  00153	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00159	83 c2 16	 add	 edx, 22			; 00000016H
  0015c	52		 push	 edx
  0015d	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00162	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00167	50		 push	 eax
  00168	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0016d	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv152[ebp], 0
$LN14@draw_groun:
  00174	b9 01 00 00 00	 mov	 ecx, 1
  00179	85 c9		 test	 ecx, ecx
  0017b	74 09		 je	 SHORT $LN15@draw_groun
  0017d	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv160[ebp], 1
  00184	eb 21		 jmp	 SHORT $LN16@draw_groun
$LN15@draw_groun:
  00186	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  0018c	83 c2 16	 add	 edx, 22			; 00000016H
  0018f	52		 push	 edx
  00190	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00195	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001a0	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv160[ebp], 0
$LN16@draw_groun:
  001a7	6a 01		 push	 1
  001a9	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  001ac	51		 push	 ecx
  001ad	6b 55 a0 60	 imul	 edx, DWORD PTR tv152[ebp], 96
  001b1	8b 45 9c	 mov	 eax, DWORD PTR tv160[ebp]
  001b4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  001bb	ff d1		 call	 ecx
  001bd	89 45 ec	 mov	 DWORD PTR _bounding_box_min$[ebp], eax

; 2070 : 	bounding_box_max = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_BOUNDING_BOX_MAX);

  001c0	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  001c4	74 0a		 je	 SHORT $LN17@draw_groun
  001c6	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  001c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001cb	89 4d a0	 mov	 DWORD PTR tv172[ebp], ecx
  001ce	eb 21		 jmp	 SHORT $LN18@draw_groun
$LN17@draw_groun:
  001d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  001d6	83 c2 17	 add	 edx, 23			; 00000017H
  001d9	52		 push	 edx
  001da	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  001df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001e4	50		 push	 eax
  001e5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001ea	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv172[ebp], 0
$LN18@draw_groun:
  001f1	b9 01 00 00 00	 mov	 ecx, 1
  001f6	85 c9		 test	 ecx, ecx
  001f8	74 09		 je	 SHORT $LN19@draw_groun
  001fa	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv180[ebp], 0
  00201	eb 21		 jmp	 SHORT $LN20@draw_groun
$LN19@draw_groun:
  00203	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00209	83 c2 17	 add	 edx, 23			; 00000017H
  0020c	52		 push	 edx
  0020d	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00212	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00217	50		 push	 eax
  00218	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0021d	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv180[ebp], 0
$LN20@draw_groun:
  00224	6a 00		 push	 0
  00226	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00229	51		 push	 ecx
  0022a	6b 55 a0 60	 imul	 edx, DWORD PTR tv172[ebp], 96
  0022e	8b 45 9c	 mov	 eax, DWORD PTR tv180[ebp]
  00231	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00238	ff d1		 call	 ecx
  0023a	89 45 e8	 mov	 DWORD PTR _bounding_box_max$[ebp], eax

; 2071 : 
; 2072 : 	radius = get_approx_2d_range (bounding_box_min, bounding_box_max);

  0023d	8b 45 e8	 mov	 eax, DWORD PTR _bounding_box_max$[ebp]
  00240	50		 push	 eax
  00241	8b 4d ec	 mov	 ecx, DWORD PTR _bounding_box_min$[ebp]
  00244	51		 push	 ecx
  00245	e8 00 00 00 00	 call	 ?get_approx_2d_range@@YGMPBUVEC3D@@0@Z ; get_approx_2d_range
  0024a	d9 5d f4	 fstp	 DWORD PTR _radius$[ebp]

; 2073 : 
; 2074 : 	//
; 2075 : 	// radius check to ignore oil pipelines and overly large city blocks
; 2076 : 	//
; 2077 : 
; 2078 : 	if (radius < 2000.0)

  0024d	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _radius$[ebp]
  00252	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@409f400000000000
  0025a	66 0f 2f c8	 comisd	 xmm1, xmm0
  0025e	76 5d		 jbe	 SHORT $LN5@draw_groun

; 2079 : 	{
; 2080 : 		radius = max (50.0f, radius);

  00260	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  00268	f3 0f 11 45 a4	 movss	 DWORD PTR $T1[ebp], xmm0
  0026d	8d 45 f4	 lea	 eax, DWORD PTR _radius$[ebp]
  00270	50		 push	 eax
  00271	8d 4d a4	 lea	 ecx, DWORD PTR $T1[ebp]
  00274	51		 push	 ecx
  00275	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0027a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0027e	f3 0f 11 45 f4	 movss	 DWORD PTR _radius$[ebp], xmm0

; 2081 : 
; 2082 : 		draw_2d_hatched_circle (dx, dy, radius * scale, MFD_COLOUR5);

  00283	b8 04 00 00 00	 mov	 eax, 4
  00288	c1 e0 02	 shl	 eax, 2
  0028b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00291	51		 push	 ecx
  00292	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _radius$[ebp]
  00297	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0029c	51		 push	 ecx
  0029d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a2	51		 push	 ecx
  002a3	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  002a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ad	51		 push	 ecx
  002ae	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _dx$[ebp]
  002b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b8	e8 00 00 00 00	 call	 ?draw_2d_hatched_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_hatched_circle
$LN5@draw_groun:

; 2083 : 	}
; 2084 : }

  002bd	5f		 pop	 edi
  002be	5e		 pop	 esi
  002bf	5b		 pop	 ebx
  002c0	8b e5		 mov	 esp, ebp
  002c2	5d		 pop	 ebp
  002c3	c2 0c 00	 ret	 12			; 0000000cH
?draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z ENDP ; draw_ground_radar_clutter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z
_TEXT	SEGMENT
tv560 = -116						; size = 8
tv377 = -116						; size = 4
tv295 = -116						; size = 4
tv257 = -116						; size = 4
tv219 = -116						; size = 4
tv193 = -116						; size = 4
tv165 = -116						; size = 4
tv145 = -116						; size = 4
tv88 = -116						; size = 4
tv370 = -112						; size = 4
tv288 = -112						; size = 4
tv250 = -112						; size = 4
tv212 = -112						; size = 4
tv185 = -112						; size = 4
tv157 = -112						; size = 4
tv137 = -112						; size = 4
tv80 = -112						; size = 4
_x_offset$1 = -44					; size = 4
_id$2 = -40						; size = 4
_target_true_velocity$3 = -36				; size = 4
_target_position$ = -32					; size = 4
_dy$ = -28						; size = 4
_dx$ = -24						; size = 4
_source$ = -20						; size = 4
_source_side$ = -16					; size = 4
_target_symbol_background_colour$ = -12			; size = 4
_target_symbol_colour$ = -8				; size = 4
_target_symbol_type$ = -4				; size = 4
_target$ = 8						; size = 4
_source_position$ = 12					; size = 4
_scale$ = 16						; size = 4
_selected_target$ = 20					; size = 4
_display_on_tsd$ = 24					; size = 4
_display_on_ase$ = 28					; size = 4
?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z PROC ; draw_radar_target_symbol, COMDAT

; 1882 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1883 : 	target_symbol_types
; 1884 : 		target_symbol_type;
; 1885 : 
; 1886 : 	rgb_colour
; 1887 : 		target_symbol_colour,
; 1888 : 		target_symbol_background_colour;
; 1889 : 		
; 1890 : //VJ 030423 TSD render mod
; 1891 : 	entity_sides
; 1892 : 		source_side;
; 1893 : 	entity	
; 1894 : 		*source;		
; 1895 : 
; 1896 : 	float
; 1897 : 		dx,
; 1898 : 		dy;
; 1899 : 
; 1900 : 	vec3d
; 1901 : 		*target_position;
; 1902 : 
; 1903 : 	ASSERT (target);

  00009	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@draw_radar
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA
  00014	83 c0 15	 add	 eax, 21			; 00000015H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@draw_radar:

; 1904 : 
; 1905 : 	ASSERT (source_position);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _source_position$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@draw_radar
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA
  00032	83 c0 17	 add	 eax, 23			; 00000017H
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IIPCKJML@source_position@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@draw_radar:

; 1906 : 
; 1907 : 	ASSERT (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER));

  00045	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00049	74 0a		 je	 SHORT $LN29@draw_radar
  0004b	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	89 4d 90	 mov	 DWORD PTR tv80[ebp], ecx
  00053	eb 21		 jmp	 SHORT $LN30@draw_radar
$LN29@draw_radar:
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA
  0005b	83 c2 19	 add	 edx, 25			; 00000019H
  0005e	52		 push	 edx
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006f	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN30@draw_radar:
  00076	b9 01 00 00 00	 mov	 ecx, 1
  0007b	85 c9		 test	 ecx, ecx
  0007d	74 09		 je	 SHORT $LN31@draw_radar
  0007f	c7 45 8c 42 00
	00 00		 mov	 DWORD PTR tv88[ebp], 66	; 00000042H
  00086	eb 21		 jmp	 SHORT $LN32@draw_radar
$LN31@draw_radar:
  00088	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA
  0008e	83 c2 19	 add	 edx, 25			; 00000019H
  00091	52		 push	 edx
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a2	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$LN32@draw_radar:
  000a9	6a 42		 push	 66			; 00000042H
  000ab	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  000ae	51		 push	 ecx
  000af	69 55 90 5c 04
	00 00		 imul	 edx, DWORD PTR tv80[ebp], 1116
  000b6	8b 45 8c	 mov	 eax, DWORD PTR tv88[ebp]
  000b9	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000c0	ff d1		 call	 ecx
  000c2	85 c0		 test	 eax, eax
  000c4	74 18		 je	 SHORT $LN4@draw_radar
  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA
  000cb	83 c0 19	 add	 eax, 25			; 00000019H
  000ce	50		 push	 eax
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@
  000d9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_radar:

; 1908 : 
; 1909 : //VJ 030423 TSD render mod
; 1910 : 	source = get_gunship_entity ();

  000de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000e3	89 45 ec	 mov	 DWORD PTR _source$[ebp], eax

; 1911 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);	

  000e6	83 7d ec 00	 cmp	 DWORD PTR _source$[ebp], 0
  000ea	74 0a		 je	 SHORT $LN33@draw_radar
  000ec	8b 45 ec	 mov	 eax, DWORD PTR _source$[ebp]
  000ef	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f1	89 4d 90	 mov	 DWORD PTR tv137[ebp], ecx
  000f4	eb 21		 jmp	 SHORT $LN34@draw_radar
$LN33@draw_radar:
  000f6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA
  000fc	83 c2 1d	 add	 edx, 29			; 0000001dH
  000ff	52		 push	 edx
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00110	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$LN34@draw_radar:
  00117	b9 01 00 00 00	 mov	 ecx, 1
  0011c	85 c9		 test	 ecx, ecx
  0011e	74 09		 je	 SHORT $LN35@draw_radar
  00120	c7 45 8c bb 00
	00 00		 mov	 DWORD PTR tv145[ebp], 187 ; 000000bbH
  00127	eb 21		 jmp	 SHORT $LN36@draw_radar
$LN35@draw_radar:
  00129	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA
  0012f	83 c2 1d	 add	 edx, 29			; 0000001dH
  00132	52		 push	 edx
  00133	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00138	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0013d	50		 push	 eax
  0013e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00143	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv145[ebp], 0
$LN36@draw_radar:
  0014a	68 bb 00 00 00	 push	 187			; 000000bbH
  0014f	8b 4d ec	 mov	 ecx, DWORD PTR _source$[ebp]
  00152	51		 push	 ecx
  00153	69 55 90 5c 04
	00 00		 imul	 edx, DWORD PTR tv137[ebp], 1116
  0015a	8b 45 8c	 mov	 eax, DWORD PTR tv145[ebp]
  0015d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00164	ff d1		 call	 ecx
  00166	89 45 f0	 mov	 DWORD PTR _source_side$[ebp], eax

; 1912 : 
; 1913 : 	target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00169	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0016d	74 0a		 je	 SHORT $LN37@draw_radar
  0016f	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00172	8b 08		 mov	 ecx, DWORD PTR [eax]
  00174	89 4d 90	 mov	 DWORD PTR tv157[ebp], ecx
  00177	eb 21		 jmp	 SHORT $LN38@draw_radar
$LN37@draw_radar:
  00179	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA
  0017f	83 c2 1f	 add	 edx, 31			; 0000001fH
  00182	52		 push	 edx
  00183	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00188	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0018d	50		 push	 eax
  0018e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00193	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv157[ebp], 0
$LN38@draw_radar:
  0019a	b9 01 00 00 00	 mov	 ecx, 1
  0019f	85 c9		 test	 ecx, ecx
  001a1	74 09		 je	 SHORT $LN39@draw_radar
  001a3	c7 45 8c 08 00
	00 00		 mov	 DWORD PTR tv165[ebp], 8
  001aa	eb 21		 jmp	 SHORT $LN40@draw_radar
$LN39@draw_radar:
  001ac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA
  001b2	83 c2 1f	 add	 edx, 31			; 0000001fH
  001b5	52		 push	 edx
  001b6	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  001bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001c0	50		 push	 eax
  001c1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c6	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv165[ebp], 0
$LN40@draw_radar:
  001cd	6a 08		 push	 8
  001cf	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  001d2	51		 push	 ecx
  001d3	6b 55 90 60	 imul	 edx, DWORD PTR tv157[ebp], 96
  001d7	8b 45 8c	 mov	 eax, DWORD PTR tv165[ebp]
  001da	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  001e1	ff d1		 call	 ecx
  001e3	89 45 e0	 mov	 DWORD PTR _target_position$[ebp], eax

; 1914 : 
; 1915 : 	dx = (target_position->x - source_position->x) * scale;

  001e6	8b 45 e0	 mov	 eax, DWORD PTR _target_position$[ebp]
  001e9	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  001ec	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001f0	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  001f4	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  001f9	f3 0f 11 45 e8	 movss	 DWORD PTR _dx$[ebp], xmm0

; 1916 : 	dy = (target_position->z - source_position->z) * scale;

  001fe	8b 45 e0	 mov	 eax, DWORD PTR _target_position$[ebp]
  00201	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  00204	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00209	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0020e	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00213	f3 0f 11 45 e4	 movss	 DWORD PTR _dy$[ebp], xmm0

; 1917 : 
; 1918 : 	target_symbol_type = (target_symbol_types) get_local_entity_int_value (target, INT_TYPE_TARGET_SYMBOL_TYPE);

  00218	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0021c	74 0a		 je	 SHORT $LN41@draw_radar
  0021e	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00221	8b 08		 mov	 ecx, DWORD PTR [eax]
  00223	89 4d 90	 mov	 DWORD PTR tv185[ebp], ecx
  00226	eb 21		 jmp	 SHORT $LN42@draw_radar
$LN41@draw_radar:
  00228	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA
  0022e	83 c2 24	 add	 edx, 36			; 00000024H
  00231	52		 push	 edx
  00232	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00237	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0023c	50		 push	 eax
  0023d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00242	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv185[ebp], 0
$LN42@draw_radar:
  00249	b9 01 00 00 00	 mov	 ecx, 1
  0024e	85 c9		 test	 ecx, ecx
  00250	74 09		 je	 SHORT $LN43@draw_radar
  00252	c7 45 8c d5 00
	00 00		 mov	 DWORD PTR tv193[ebp], 213 ; 000000d5H
  00259	eb 21		 jmp	 SHORT $LN44@draw_radar
$LN43@draw_radar:
  0025b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA
  00261	83 c2 24	 add	 edx, 36			; 00000024H
  00264	52		 push	 edx
  00265	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0026a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0026f	50		 push	 eax
  00270	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00275	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv193[ebp], 0
$LN44@draw_radar:
  0027c	68 d5 00 00 00	 push	 213			; 000000d5H
  00281	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00284	51		 push	 ecx
  00285	69 55 90 5c 04
	00 00		 imul	 edx, DWORD PTR tv185[ebp], 1116
  0028c	8b 45 8c	 mov	 eax, DWORD PTR tv193[ebp]
  0028f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00296	ff d1		 call	 ecx
  00298	89 45 fc	 mov	 DWORD PTR _target_symbol_type$[ebp], eax

; 1919 : 
; 1920 : 	ASSERT ((target_symbol_type >= 0) && (target_symbol_type < NUM_TARGET_SYMBOL_TYPES));

  0029b	83 7d fc 00	 cmp	 DWORD PTR _target_symbol_type$[ebp], 0
  0029f	7c 06		 jl	 SHORT $LN6@draw_radar
  002a1	83 7d fc 08	 cmp	 DWORD PTR _target_symbol_type$[ebp], 8
  002a5	7c 18		 jl	 SHORT $LN5@draw_radar
$LN6@draw_radar:
  002a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z@4JA
  002ac	83 c0 26	 add	 eax, 38			; 00000026H
  002af	50		 push	 eax
  002b0	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  002b5	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@
  002ba	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@draw_radar:

; 1921 : 
; 1922 : 	// figure out correct colours to use
; 1923 : //VJ 030423 TSD render mod
; 1924 : 	if (display_on_tsd)

  002bf	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  002c3	0f 84 f9 00 00
	00		 je	 $LN7@draw_radar

; 1925 : 	{
; 1926 : 		//VJ 030511 TSD render mod, treat enemy colours as cheat
; 1927 : 		if (command_line_tsd_enemy_colours)

  002c9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_tsd_enemy_colours@@3HA, 0 ; command_line_tsd_enemy_colours
  002d0	0f 84 c5 00 00
	00		 je	 $LN9@draw_radar

; 1928 : 		{
; 1929 : 			if (source_side == get_local_entity_int_value (target, INT_TYPE_SIDE))

  002d6	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  002da	74 0a		 je	 SHORT $LN45@draw_radar
  002dc	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  002df	8b 08		 mov	 ecx, DWORD PTR [eax]
  002e1	89 4d 90	 mov	 DWORD PTR tv212[ebp], ecx
  002e4	eb 1d		 jmp	 SHORT $LN46@draw_radar
$LN45@draw_radar:
  002e6	68 89 07 00 00	 push	 1929			; 00000789H
  002eb	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  002f0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002f6	52		 push	 edx
  002f7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002fc	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv212[ebp], 0
$LN46@draw_radar:
  00303	b8 01 00 00 00	 mov	 eax, 1
  00308	85 c0		 test	 eax, eax
  0030a	74 09		 je	 SHORT $LN47@draw_radar
  0030c	c7 45 8c bb 00
	00 00		 mov	 DWORD PTR tv219[ebp], 187 ; 000000bbH
  00313	eb 1d		 jmp	 SHORT $LN48@draw_radar
$LN47@draw_radar:
  00315	68 89 07 00 00	 push	 1929			; 00000789H
  0031a	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0031f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00325	51		 push	 ecx
  00326	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0032b	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv219[ebp], 0
$LN48@draw_radar:
  00332	68 bb 00 00 00	 push	 187			; 000000bbH
  00337	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  0033a	52		 push	 edx
  0033b	69 45 90 5c 04
	00 00		 imul	 eax, DWORD PTR tv212[ebp], 1116
  00342	8b 4d 8c	 mov	 ecx, DWORD PTR tv219[ebp]
  00345	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0034c	ff d2		 call	 edx
  0034e	39 45 f0	 cmp	 DWORD PTR _source_side$[ebp], eax
  00351	75 24		 jne	 SHORT $LN11@draw_radar

; 1930 : 			{
; 1931 : 				target_symbol_colour = MFD_COLOUR_BLUE;

  00353	b8 04 00 00 00	 mov	 eax, 4
  00358	6b c8 0c	 imul	 ecx, eax, 12
  0035b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00361	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx

; 1932 : 				target_symbol_background_colour = MFD_COLOUR_DARK_BLUE;

  00364	b8 04 00 00 00	 mov	 eax, 4
  00369	6b c8 11	 imul	 ecx, eax, 17
  0036c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00372	89 55 f4	 mov	 DWORD PTR _target_symbol_background_colour$[ebp], edx

; 1933 : 			}
; 1934 : 			else

  00375	eb 22		 jmp	 SHORT $LN12@draw_radar
$LN11@draw_radar:

; 1935 : 			{
; 1936 : 				target_symbol_colour = MFD_COLOUR_RED;

  00377	b8 04 00 00 00	 mov	 eax, 4
  0037c	6b c8 0f	 imul	 ecx, eax, 15
  0037f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00385	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx

; 1937 : 				target_symbol_background_colour = MFD_COLOUR_DARK_RED;

  00388	b8 04 00 00 00	 mov	 eax, 4
  0038d	6b c8 12	 imul	 ecx, eax, 18
  00390	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00396	89 55 f4	 mov	 DWORD PTR _target_symbol_background_colour$[ebp], edx
$LN12@draw_radar:

; 1938 : 			}
; 1939 : 		}
; 1940 : 		else

  00399	eb 22		 jmp	 SHORT $LN10@draw_radar
$LN9@draw_radar:

; 1941 : 		{
; 1942 : 				target_symbol_colour = MFD_COLOUR_RED;

  0039b	b8 04 00 00 00	 mov	 eax, 4
  003a0	6b c8 0f	 imul	 ecx, eax, 15
  003a3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003a9	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx

; 1943 : 				target_symbol_background_colour = MFD_COLOUR_DARK_RED;

  003ac	b8 04 00 00 00	 mov	 eax, 4
  003b1	6b c8 12	 imul	 ecx, eax, 18
  003b4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003ba	89 55 f4	 mov	 DWORD PTR _target_symbol_background_colour$[ebp], edx
$LN10@draw_radar:

; 1944 : 		}

  003bd	e9 f1 00 00 00	 jmp	 $LN14@draw_radar
$LN7@draw_radar:

; 1945 : 		
; 1946 : 	}
; 1947 : 	else if (display_on_ase)

  003c2	83 7d 1c 00	 cmp	 DWORD PTR _display_on_ase$[ebp], 0
  003c6	0f 84 c5 00 00
	00		 je	 $LN13@draw_radar

; 1948 : 	{
; 1949 : 		if (get_local_entity_int_value (target, INT_TYPE_THREAT_TYPE) == THREAT_TYPE_AAA)

  003cc	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  003d0	74 0a		 je	 SHORT $LN49@draw_radar
  003d2	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  003d5	8b 08		 mov	 ecx, DWORD PTR [eax]
  003d7	89 4d 90	 mov	 DWORD PTR tv250[ebp], ecx
  003da	eb 1d		 jmp	 SHORT $LN50@draw_radar
$LN49@draw_radar:
  003dc	68 9d 07 00 00	 push	 1949			; 0000079dH
  003e1	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  003e6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003ec	52		 push	 edx
  003ed	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003f2	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv250[ebp], 0
$LN50@draw_radar:
  003f9	b8 01 00 00 00	 mov	 eax, 1
  003fe	85 c0		 test	 eax, eax
  00400	74 09		 je	 SHORT $LN51@draw_radar
  00402	c7 45 8c e9 00
	00 00		 mov	 DWORD PTR tv257[ebp], 233 ; 000000e9H
  00409	eb 1d		 jmp	 SHORT $LN52@draw_radar
$LN51@draw_radar:
  0040b	68 9d 07 00 00	 push	 1949			; 0000079dH
  00410	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00415	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0041b	51		 push	 ecx
  0041c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00421	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv257[ebp], 0
$LN52@draw_radar:
  00428	68 e9 00 00 00	 push	 233			; 000000e9H
  0042d	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00430	52		 push	 edx
  00431	69 45 90 5c 04
	00 00		 imul	 eax, DWORD PTR tv250[ebp], 1116
  00438	8b 4d 8c	 mov	 ecx, DWORD PTR tv257[ebp]
  0043b	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00442	ff d2		 call	 edx
  00444	83 f8 06	 cmp	 eax, 6
  00447	75 24		 jne	 SHORT $LN15@draw_radar

; 1950 : 		{
; 1951 : 			target_symbol_colour = MFD_COLOUR_YELLOW;

  00449	b8 04 00 00 00	 mov	 eax, 4
  0044e	6b c8 0d	 imul	 ecx, eax, 13
  00451	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00457	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx

; 1952 : 			target_symbol_background_colour = MFD_COLOUR_DARK_YELLOW;

  0045a	b8 04 00 00 00	 mov	 eax, 4
  0045f	6b c8 0e	 imul	 ecx, eax, 14
  00462	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00468	89 55 f4	 mov	 DWORD PTR _target_symbol_background_colour$[ebp], edx

; 1953 : 		}
; 1954 : 		else

  0046b	eb 22		 jmp	 SHORT $LN16@draw_radar
$LN15@draw_radar:

; 1955 : 		{
; 1956 : 			target_symbol_colour = MFD_COLOUR_RED;

  0046d	b8 04 00 00 00	 mov	 eax, 4
  00472	6b c8 0f	 imul	 ecx, eax, 15
  00475	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0047b	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx

; 1957 : 			target_symbol_background_colour = MFD_COLOUR_DARK_RED;

  0047e	b8 04 00 00 00	 mov	 eax, 4
  00483	6b c8 12	 imul	 ecx, eax, 18
  00486	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0048c	89 55 f4	 mov	 DWORD PTR _target_symbol_background_colour$[ebp], edx
$LN16@draw_radar:

; 1958 : 		}
; 1959 : 		
; 1960 : 		// display type number
; 1961 : 	}
; 1962 : 	else

  0048f	eb 22		 jmp	 SHORT $LN14@draw_radar
$LN13@draw_radar:

; 1963 : 	{
; 1964 : 		target_symbol_colour = MFD_COLOUR1;

  00491	b8 04 00 00 00	 mov	 eax, 4
  00496	6b c8 00	 imul	 ecx, eax, 0
  00499	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0049f	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx

; 1965 : 		target_symbol_background_colour = MFD_COLOUR4;

  004a2	b8 04 00 00 00	 mov	 eax, 4
  004a7	6b c8 03	 imul	 ecx, eax, 3
  004aa	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004b0	89 55 f4	 mov	 DWORD PTR _target_symbol_background_colour$[ebp], edx
$LN14@draw_radar:

; 1966 : 	}
; 1967 : 
; 1968 : 	// draw marker
; 1969 : 	if (draw_large_mfd)

  004b3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  004ba	0f 84 6f 02 00
	00		 je	 $LN17@draw_radar

; 1970 : 	{
; 1971 : 		if (get_local_entity_int_value (target, INT_TYPE_GUNSHIP_RADAR_LOS_CLEAR))

  004c0	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  004c4	74 0a		 je	 SHORT $LN53@draw_radar
  004c6	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  004c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  004cb	89 4d 90	 mov	 DWORD PTR tv288[ebp], ecx
  004ce	eb 1d		 jmp	 SHORT $LN54@draw_radar
$LN53@draw_radar:
  004d0	68 b3 07 00 00	 push	 1971			; 000007b3H
  004d5	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  004da	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  004e0	52		 push	 edx
  004e1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004e6	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv288[ebp], 0
$LN54@draw_radar:
  004ed	b8 01 00 00 00	 mov	 eax, 1
  004f2	85 c0		 test	 eax, eax
  004f4	74 09		 je	 SHORT $LN55@draw_radar
  004f6	c7 45 8c 50 00
	00 00		 mov	 DWORD PTR tv295[ebp], 80 ; 00000050H
  004fd	eb 1d		 jmp	 SHORT $LN56@draw_radar
$LN55@draw_radar:
  004ff	68 b3 07 00 00	 push	 1971			; 000007b3H
  00504	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00509	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0050f	51		 push	 ecx
  00510	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00515	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv295[ebp], 0
$LN56@draw_radar:
  0051c	6a 50		 push	 80			; 00000050H
  0051e	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00521	52		 push	 edx
  00522	69 45 90 5c 04
	00 00		 imul	 eax, DWORD PTR tv288[ebp], 1116
  00529	8b 4d 8c	 mov	 ecx, DWORD PTR tv295[ebp]
  0052c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00533	ff d2		 call	 edx
  00535	85 c0		 test	 eax, eax
  00537	0f 84 c6 00 00
	00		 je	 $LN19@draw_radar

; 1972 : 		{
; 1973 : 			float target_true_velocity;
; 1974 : 			
; 1975 : 			draw_2d_mono_sprite (large_display_target_symbols_los_mask[target_symbol_type], dx, dy, target_symbol_background_colour);

  0053d	8b 45 f4	 mov	 eax, DWORD PTR _target_symbol_background_colour$[ebp]
  00540	50		 push	 eax
  00541	51		 push	 ecx
  00542	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00547	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0054c	51		 push	 ecx
  0054d	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00552	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00557	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  0055a	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_los_mask@@3PAPBDA[ecx*4]
  00561	52		 push	 edx
  00562	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1976 : 			draw_2d_mono_sprite (large_display_target_symbols_los[target_symbol_type], dx, dy, target_symbol_colour);

  00567	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  0056a	50		 push	 eax
  0056b	51		 push	 ecx
  0056c	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00571	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00576	51		 push	 ecx
  00577	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0057c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00581	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  00584	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_los@@3PAPBDA[ecx*4]
  0058b	52		 push	 edx
  0058c	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1977 : 			
; 1978 : 			// draw moving target mark if target is moving
; 1979 : 			target_true_velocity = get_local_entity_vec3d_magnitude (target, VEC3D_TYPE_MOTION_VECTOR);

  00591	6a 06		 push	 6
  00593	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00596	50		 push	 eax
  00597	e8 00 00 00 00	 call	 ?get_local_entity_vec3d_magnitude@@YGMPAUENTITY@@W4VEC3D_TYPES@@@Z ; get_local_entity_vec3d_magnitude
  0059c	d9 5d dc	 fstp	 DWORD PTR _target_true_velocity$3[ebp]

; 1980 : 			if (target_true_velocity > 2.0)

  0059f	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _target_true_velocity$3[ebp]
  005a4	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4000000000000000
  005ac	76 53		 jbe	 SHORT $LN21@draw_radar

; 1981 : 			{
; 1982 : 				draw_2d_mono_sprite (large_display_moving_target_symbol, dx, dy, MFD_BACKGROUND_COLOUR);

  005ae	b8 04 00 00 00	 mov	 eax, 4
  005b3	6b c8 09	 imul	 ecx, eax, 9
  005b6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005bc	52		 push	 edx
  005bd	51		 push	 ecx
  005be	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  005c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c8	51		 push	 ecx
  005c9	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  005ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d3	68 00 00 00 00	 push	 OFFSET ?large_display_moving_target_symbol@@3PADA
  005d8	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1983 : 				draw_2d_mono_sprite (large_display_moving_target_symbol_mask, dx, dy, target_symbol_background_colour);

  005dd	8b 45 f4	 mov	 eax, DWORD PTR _target_symbol_background_colour$[ebp]
  005e0	50		 push	 eax
  005e1	51		 push	 ecx
  005e2	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  005e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ec	51		 push	 ecx
  005ed	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  005f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f7	68 00 00 00 00	 push	 OFFSET ?large_display_moving_target_symbol_mask@@3PADA
  005fc	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN21@draw_radar:

; 1984 : 			}
; 1985 : 		}
; 1986 : 		else

  00601	eb 54		 jmp	 SHORT $LN20@draw_radar
$LN19@draw_radar:

; 1987 : 		{
; 1988 : 			draw_2d_mono_sprite (large_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, target_symbol_background_colour);

  00603	8b 45 f4	 mov	 eax, DWORD PTR _target_symbol_background_colour$[ebp]
  00606	50		 push	 eax
  00607	51		 push	 ecx
  00608	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0060d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00612	51		 push	 ecx
  00613	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00618	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0061d	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  00620	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_no_los_mask@@3PAPBDA[ecx*4]
  00627	52		 push	 edx
  00628	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1989 : 			draw_2d_mono_sprite (large_display_target_symbols_no_los[target_symbol_type], dx, dy, target_symbol_colour);

  0062d	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  00630	50		 push	 eax
  00631	51		 push	 ecx
  00632	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00637	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063c	51		 push	 ecx
  0063d	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00642	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00647	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  0064a	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_no_los@@3PAPBDA[ecx*4]
  00651	52		 push	 edx
  00652	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN20@draw_radar:

; 1990 : 		}
; 1991 : 
; 1992 : 		if (display_on_ase)

  00657	83 7d 1c 00	 cmp	 DWORD PTR _display_on_ase$[ebp], 0
  0065b	74 7f		 je	 SHORT $LN23@draw_radar

; 1993 : 		{
; 1994 : 			// display threat radar ID below symbol
; 1995 : 			char* id = get_threat_id_number(target);

  0065d	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00660	50		 push	 eax
  00661	e8 00 00 00 00	 call	 ?get_threat_id_number@@YGPADPAUENTITY@@@Z ; get_threat_id_number
  00666	89 45 d8	 mov	 DWORD PTR _id$2[ebp], eax

; 1996 : 			
; 1997 : 			if (id)

  00669	83 7d d8 00	 cmp	 DWORD PTR _id$2[ebp], 0
  0066d	74 6d		 je	 SHORT $LN23@draw_radar

; 1998 : 			{
; 1999 : 				float x_offset = get_mono_font_string_width(id) * -0.5;

  0066f	8b 45 d8	 mov	 eax, DWORD PTR _id$2[ebp]
  00672	50		 push	 eax
  00673	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00678	dd 5d 8c	 fstp	 QWORD PTR tv560[ebp]
  0067b	f2 0f 10 45 8c	 movsd	 xmm0, QWORD PTR tv560[ebp]
  00680	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00688	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0068c	f3 0f 11 45 d4	 movss	 DWORD PTR _x_offset$1[ebp], xmm0

; 2000 : 				
; 2001 : 				set_mono_font_colour(target_symbol_colour);

  00691	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  00694	50		 push	 eax
  00695	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 2002 : 				set_2d_mono_font_position (dx, dy);

  0069a	51		 push	 ecx
  0069b	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  006a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a5	51		 push	 ecx
  006a6	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  006ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b0	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2003 : 				set_mono_font_rel_position (x_offset, 10.0);

  006b5	51		 push	 ecx
  006b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  006be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c3	51		 push	 ecx
  006c4	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x_offset$1[ebp]
  006c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ce	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2004 : 				
; 2005 : 				print_mono_font_string(id);

  006d3	8b 45 d8	 mov	 eax, DWORD PTR _id$2[ebp]
  006d6	50		 push	 eax
  006d7	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN23@draw_radar:

; 2006 : 			}
; 2007 : 		}
; 2008 : 
; 2009 : 		if (selected_target)

  006dc	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  006e0	74 48		 je	 SHORT $LN24@draw_radar

; 2010 : 		{
; 2011 : 			draw_2d_mono_sprite (large_display_target_symbol_selected_target_mask, dx, dy, target_symbol_background_colour);

  006e2	8b 45 f4	 mov	 eax, DWORD PTR _target_symbol_background_colour$[ebp]
  006e5	50		 push	 eax
  006e6	51		 push	 ecx
  006e7	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  006ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f1	51		 push	 ecx
  006f2	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  006f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006fc	68 00 00 00 00	 push	 OFFSET ?large_display_target_symbol_selected_target_mask@@3QBDB ; large_display_target_symbol_selected_target_mask
  00701	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2012 : 			draw_2d_mono_sprite (large_display_target_symbol_selected_target, dx, dy, target_symbol_colour);

  00706	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  00709	50		 push	 eax
  0070a	51		 push	 ecx
  0070b	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00710	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00715	51		 push	 ecx
  00716	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0071b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00720	68 00 00 00 00	 push	 OFFSET ?large_display_target_symbol_selected_target@@3QBDB ; large_display_target_symbol_selected_target
  00725	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN24@draw_radar:

; 2013 : 		}
; 2014 : 	}
; 2015 : 	else

  0072a	e9 71 01 00 00	 jmp	 $LN27@draw_radar
$LN17@draw_radar:

; 2016 : 	{
; 2017 : 		if (get_local_entity_int_value (target, INT_TYPE_GUNSHIP_RADAR_LOS_CLEAR))

  0072f	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00733	74 0a		 je	 SHORT $LN57@draw_radar
  00735	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00738	8b 08		 mov	 ecx, DWORD PTR [eax]
  0073a	89 4d 90	 mov	 DWORD PTR tv370[ebp], ecx
  0073d	eb 1d		 jmp	 SHORT $LN58@draw_radar
$LN57@draw_radar:
  0073f	68 e1 07 00 00	 push	 2017			; 000007e1H
  00744	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00749	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0074f	52		 push	 edx
  00750	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00755	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv370[ebp], 0
$LN58@draw_radar:
  0075c	b8 01 00 00 00	 mov	 eax, 1
  00761	85 c0		 test	 eax, eax
  00763	74 09		 je	 SHORT $LN59@draw_radar
  00765	c7 45 8c 50 00
	00 00		 mov	 DWORD PTR tv377[ebp], 80 ; 00000050H
  0076c	eb 1d		 jmp	 SHORT $LN60@draw_radar
$LN59@draw_radar:
  0076e	68 e1 07 00 00	 push	 2017			; 000007e1H
  00773	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00778	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0077e	51		 push	 ecx
  0077f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00784	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv377[ebp], 0
$LN60@draw_radar:
  0078b	6a 50		 push	 80			; 00000050H
  0078d	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00790	52		 push	 edx
  00791	69 45 90 5c 04
	00 00		 imul	 eax, DWORD PTR tv370[ebp], 1116
  00798	8b 4d 8c	 mov	 ecx, DWORD PTR tv377[ebp]
  0079b	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  007a2	ff d2		 call	 edx
  007a4	85 c0		 test	 eax, eax
  007a6	74 56		 je	 SHORT $LN25@draw_radar

; 2018 : 		{
; 2019 : 			draw_2d_mono_sprite (small_display_target_symbols_los_mask[target_symbol_type], dx, dy, target_symbol_background_colour);

  007a8	8b 45 f4	 mov	 eax, DWORD PTR _target_symbol_background_colour$[ebp]
  007ab	50		 push	 eax
  007ac	51		 push	 ecx
  007ad	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  007b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b7	51		 push	 ecx
  007b8	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  007bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c2	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  007c5	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_los_mask@@3PAPBDA[ecx*4]
  007cc	52		 push	 edx
  007cd	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2020 : 			draw_2d_mono_sprite (small_display_target_symbols_los[target_symbol_type], dx, dy, target_symbol_colour);

  007d2	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  007d5	50		 push	 eax
  007d6	51		 push	 ecx
  007d7	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  007dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e1	51		 push	 ecx
  007e2	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  007e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ec	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  007ef	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_los@@3PAPBDA[ecx*4]
  007f6	52		 push	 edx
  007f7	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2021 : 		}
; 2022 : 		else

  007fc	eb 54		 jmp	 SHORT $LN26@draw_radar
$LN25@draw_radar:

; 2023 : 		{
; 2024 : 			draw_2d_mono_sprite (small_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, target_symbol_background_colour);

  007fe	8b 45 f4	 mov	 eax, DWORD PTR _target_symbol_background_colour$[ebp]
  00801	50		 push	 eax
  00802	51		 push	 ecx
  00803	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00808	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0080d	51		 push	 ecx
  0080e	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00813	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00818	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  0081b	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_no_los_mask@@3PAPBDA[ecx*4]
  00822	52		 push	 edx
  00823	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2025 : 			draw_2d_mono_sprite (small_display_target_symbols_no_los[target_symbol_type], dx, dy, target_symbol_colour);

  00828	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  0082b	50		 push	 eax
  0082c	51		 push	 ecx
  0082d	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00832	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00837	51		 push	 ecx
  00838	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0083d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00842	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  00845	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_no_los@@3PAPBDA[ecx*4]
  0084c	52		 push	 edx
  0084d	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN26@draw_radar:

; 2026 : 		}
; 2027 : 
; 2028 : 		if (selected_target)

  00852	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00856	74 48		 je	 SHORT $LN27@draw_radar

; 2029 : 		{
; 2030 : 			draw_2d_mono_sprite (small_display_target_symbol_selected_target_mask, dx, dy, target_symbol_background_colour);

  00858	8b 45 f4	 mov	 eax, DWORD PTR _target_symbol_background_colour$[ebp]
  0085b	50		 push	 eax
  0085c	51		 push	 ecx
  0085d	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00862	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00867	51		 push	 ecx
  00868	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0086d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00872	68 00 00 00 00	 push	 OFFSET ?small_display_target_symbol_selected_target_mask@@3QBDB ; small_display_target_symbol_selected_target_mask
  00877	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2031 : 			draw_2d_mono_sprite (small_display_target_symbol_selected_target, dx, dy, target_symbol_colour);

  0087c	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  0087f	50		 push	 eax
  00880	51		 push	 ecx
  00881	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00886	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0088b	51		 push	 ecx
  0088c	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00891	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00896	68 00 00 00 00	 push	 OFFSET ?small_display_target_symbol_selected_target@@3QBDB ; small_display_target_symbol_selected_target
  0089b	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN27@draw_radar:

; 2032 : 		}
; 2033 : 	}
; 2034 : }

  008a0	5f		 pop	 edi
  008a1	5e		 pop	 esi
  008a2	5b		 pop	 ebx
  008a3	8b e5		 mov	 esp, ebp
  008a5	5d		 pop	 ebp
  008a6	c2 18 00	 ret	 24			; 00000018H
?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHHH@Z ENDP ; draw_radar_target_symbol
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z
_TEXT	SEGMENT
tv90 = -108						; size = 4
_index$1 = -40						; size = 4
_index$2 = -36						; size = 4
_y2$ = -32						; size = 4
_x2$ = -28						; size = 4
_y1$ = -24						; size = 4
_x1$ = -20						; size = 4
_cos_theta$ = -16					; size = 4
_sin_theta$ = -12					; size = 4
_theta$ = -8						; size = 4
_num_segments$ = -4					; size = 4
_arc_size$ = 8						; size = 4
_radius$ = 12						; size = 4
_colour$ = 16						; size = 4
?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z PROC		; draw_radar_arc, COMDAT

; 1836 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1837 : 	int
; 1838 : 		num_segments;
; 1839 : 
; 1840 : 	float
; 1841 : 		theta,
; 1842 : 		sin_theta,
; 1843 : 		cos_theta,
; 1844 : 		x1,
; 1845 : 		y1,
; 1846 : 		x2,
; 1847 : 		y2;
; 1848 : 
; 1849 : 	num_segments = (int) (arc_size * (1.0 / APACHE_RADAR_SCAN_ARC_SEGMENT_SIZE));

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _arc_size$[ebp]
  0000e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4026eb1686b280e6
  00016	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0001a	89 45 fc	 mov	 DWORD PTR _num_segments$[ebp], eax

; 1850 : 
; 1851 : 	if (num_segments > 0)

  0001d	83 7d fc 00	 cmp	 DWORD PTR _num_segments$[ebp], 0
  00021	0f 8e 9f 01 00
	00		 jle	 $LN3@draw_radar

; 1852 : 	{
; 1853 : 		theta = arc_size * 0.5;

  00027	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _arc_size$[ebp]
  0002c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00034	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00038	f3 0f 11 45 f8	 movss	 DWORD PTR _theta$[ebp], xmm0

; 1854 : 
; 1855 : 		sine_cosine (theta, &sin_theta, &cos_theta);

  0003d	8d 45 dc	 lea	 eax, DWORD PTR _index$2[ebp]
  00040	50		 push	 eax
  00041	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _theta$[ebp]
  00046	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@40845f306446f9b4
  0004e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00052	51		 push	 ecx
  00053	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00058	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  0005d	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  00060	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00065	89 45 dc	 mov	 DWORD PTR _index$2[ebp], eax
  00068	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  0006b	f3 0f 10 04 85
	00 00 00 00	 movss	 xmm0, DWORD PTR ?sine_table@@3PAMA[eax*4]
  00074	f3 0f 11 45 f4	 movss	 DWORD PTR _sin_theta$[ebp], xmm0
  00079	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  0007c	05 00 04 00 00	 add	 eax, 1024		; 00000400H
  00081	89 45 dc	 mov	 DWORD PTR _index$2[ebp], eax
  00084	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  00087	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0008c	89 45 dc	 mov	 DWORD PTR _index$2[ebp], eax
  0008f	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  00092	f3 0f 10 04 85
	00 00 00 00	 movss	 xmm0, DWORD PTR ?sine_table@@3PAMA[eax*4]
  0009b	f3 0f 11 45 f0	 movss	 DWORD PTR _cos_theta$[ebp], xmm0

; 1856 : 
; 1857 : 		x1 = -radius * sin_theta;

  000a0	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
  000a5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000ac	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _sin_theta$[ebp]
  000b1	f3 0f 11 45 ec	 movss	 DWORD PTR _x1$[ebp], xmm0

; 1858 : 		y1 = radius * cos_theta;

  000b6	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
  000bb	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _cos_theta$[ebp]
  000c0	f3 0f 11 45 e8	 movss	 DWORD PTR _y1$[ebp], xmm0
$LN2@draw_radar:

; 1859 : 
; 1860 : 		while (num_segments--)

  000c5	8b 45 fc	 mov	 eax, DWORD PTR _num_segments$[ebp]
  000c8	89 45 94	 mov	 DWORD PTR tv90[ebp], eax
  000cb	8b 4d fc	 mov	 ecx, DWORD PTR _num_segments$[ebp]
  000ce	83 e9 01	 sub	 ecx, 1
  000d1	89 4d fc	 mov	 DWORD PTR _num_segments$[ebp], ecx
  000d4	83 7d 94 00	 cmp	 DWORD PTR tv90[ebp], 0
  000d8	0f 84 e8 00 00
	00		 je	 $LN3@draw_radar

; 1861 : 		{
; 1862 : 			theta -= APACHE_RADAR_SCAN_ARC_SEGMENT_SIZE;

  000de	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _theta$[ebp]
  000e3	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3db2b8c2
  000eb	f3 0f 11 45 f8	 movss	 DWORD PTR _theta$[ebp], xmm0

; 1863 : 
; 1864 : 			sine_cosine (theta, &sin_theta, &cos_theta);

  000f0	8d 45 d8	 lea	 eax, DWORD PTR _index$1[ebp]
  000f3	50		 push	 eax
  000f4	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _theta$[ebp]
  000f9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@40845f306446f9b4
  00101	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00105	51		 push	 ecx
  00106	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010b	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00110	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  00113	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00118	89 45 d8	 mov	 DWORD PTR _index$1[ebp], eax
  0011b	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  0011e	f3 0f 10 04 85
	00 00 00 00	 movss	 xmm0, DWORD PTR ?sine_table@@3PAMA[eax*4]
  00127	f3 0f 11 45 f4	 movss	 DWORD PTR _sin_theta$[ebp], xmm0
  0012c	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  0012f	05 00 04 00 00	 add	 eax, 1024		; 00000400H
  00134	89 45 d8	 mov	 DWORD PTR _index$1[ebp], eax
  00137	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  0013a	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0013f	89 45 d8	 mov	 DWORD PTR _index$1[ebp], eax
  00142	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  00145	f3 0f 10 04 85
	00 00 00 00	 movss	 xmm0, DWORD PTR ?sine_table@@3PAMA[eax*4]
  0014e	f3 0f 11 45 f0	 movss	 DWORD PTR _cos_theta$[ebp], xmm0

; 1865 : 
; 1866 : 			x2 = -radius * sin_theta;

  00153	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
  00158	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0015f	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _sin_theta$[ebp]
  00164	f3 0f 11 45 e4	 movss	 DWORD PTR _x2$[ebp], xmm0

; 1867 : 			y2 = radius * cos_theta;

  00169	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
  0016e	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _cos_theta$[ebp]
  00173	f3 0f 11 45 e0	 movss	 DWORD PTR _y2$[ebp], xmm0

; 1868 : 
; 1869 : 			draw_2d_line (x1, y1, x2, y2, colour);

  00178	8b 45 10	 mov	 eax, DWORD PTR _colour$[ebp]
  0017b	50		 push	 eax
  0017c	51		 push	 ecx
  0017d	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00182	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00187	51		 push	 ecx
  00188	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0018d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00192	51		 push	 ecx
  00193	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00198	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019d	51		 push	 ecx
  0019e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x1$[ebp]
  001a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1870 : 
; 1871 : 			x1 = x2;

  001ad	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x2$[ebp]
  001b2	f3 0f 11 45 ec	 movss	 DWORD PTR _x1$[ebp], xmm0

; 1872 : 			y1 = y2;

  001b7	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  001bc	f3 0f 11 45 e8	 movss	 DWORD PTR _y1$[ebp], xmm0

; 1873 : 		}

  001c1	e9 ff fe ff ff	 jmp	 $LN2@draw_radar
$LN3@draw_radar:

; 1874 : 	}
; 1875 : }

  001c6	5f		 pop	 edi
  001c7	5e		 pop	 esi
  001c8	5b		 pop	 ebx
  001c9	8b e5		 mov	 esp, ebp
  001cb	5d		 pop	 ebp
  001cc	c2 0c 00	 ret	 12			; 0000000cH
?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ENDP		; draw_radar_arc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z
_TEXT	SEGMENT
tv214 = -284						; size = 4
tv195 = -284						; size = 4
tv149 = -284						; size = 4
tv207 = -280						; size = 4
tv187 = -280						; size = 4
tv142 = -280						; size = 4
_width$ = -212						; size = 4
_y_adjust$ = -208					; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
_target$ = 8						; size = 4
_target_range$ = 12					; size = 4
_radar$ = 16						; size = 4
?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z PROC ; display_radar_target_details, COMDAT

; 1673 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1674 : 	const char
; 1675 : 		*s;
; 1676 : 	char
; 1677 : 		buffer[200];
; 1678 : 
; 1679 : 	float
; 1680 : 		y_adjust,
; 1681 : 		width;
; 1682 : 
; 1683 : 	ASSERT (radar);

  0000c	83 7d 10 00	 cmp	 DWORD PTR _radar$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@display_ra
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA
  00017	83 c0 0a	 add	 eax, 10			; 0000000aH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_05EMNNHGFM@radar@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@display_ra:

; 1684 : 
; 1685 : 	if (default_damage.radar)

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  0002f	83 e0 01	 and	 eax, 1
  00032	74 05		 je	 SHORT $LN3@display_ra

; 1686 : 	{
; 1687 : 		return;

  00034	e9 5f 05 00 00	 jmp	 $LN1@display_ra
$LN3@display_ra:

; 1688 : 	}
; 1689 : 
; 1690 : 	if (draw_large_mfd)

  00039	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00040	74 12		 je	 SHORT $LN4@display_ra

; 1691 : 	{
; 1692 : 		y_adjust = -12.0;

  00042	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  0004a	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1693 : 	}
; 1694 : 	else

  00052	eb 10		 jmp	 SHORT $LN5@display_ra
$LN4@display_ra:

; 1695 : 	{
; 1696 : 		y_adjust = -5.0;

  00054	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  0005c	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN5@display_ra:

; 1697 : 	}
; 1698 : 
; 1699 : 	//
; 1700 : 	// name
; 1701 : 	//
; 1702 : 
; 1703 : 	s = get_target_display_name (target, buffer, draw_large_mfd);

  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?draw_large_mfd@@3HA
  00069	50		 push	 eax
  0006a	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00070	51		 push	 ecx
  00071	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00074	52		 push	 edx
  00075	e8 00 00 00 00	 call	 ?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z ; get_target_display_name
  0007a	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1704 : 
; 1705 : 	if (s)

  0007d	83 7d fc 00	 cmp	 DWORD PTR _s$[ebp], 0
  00081	74 4b		 je	 SHORT $LN6@display_ra

; 1706 : 	{
; 1707 : 		set_2d_mono_font_position (-0.8, -1.0);

  00083	51		 push	 ecx
  00084	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0008c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00091	51		 push	 ecx
  00092	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0009a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1708 : 
; 1709 : 		set_mono_font_rel_position (1.0, y_adjust);

  000a4	51		 push	 ecx
  000a5	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b2	51		 push	 ecx
  000b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c0	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1710 : 
; 1711 : 		print_mono_font_string (s);

  000c5	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN6@display_ra:

; 1712 : 	}
; 1713 : 
; 1714 : 	if (target)

  000ce	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  000d2	0f 84 e9 01 00
	00		 je	 $LN10@display_ra

; 1715 : 	{
; 1716 : 		//
; 1717 : 		// range
; 1718 : 		//
; 1719 : 
; 1720 : 		if ((target_range < 1000.0) && (!default_damage.laser_designator))

  000d8	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  000dd	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  000e5	66 0f 2f c8	 comisd	 xmm1, xmm0
  000e9	76 29		 jbe	 SHORT $LN8@display_ra
  000eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  000f0	c1 e8 06	 shr	 eax, 6
  000f3	83 e0 01	 and	 eax, 1
  000f6	75 1c		 jne	 SHORT $LN8@display_ra

; 1721 : 		{
; 1722 : 			sprintf (buffer, "%dm", (int) target_range);

  000f8	f3 0f 2c 45 0c	 cvttss2si eax, DWORD PTR _target_range$[ebp]
  000fd	50		 push	 eax
  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_03NGNKAJPJ@?$CFdm@
  00103	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00109	51		 push	 ecx
  0010a	e8 00 00 00 00	 call	 _sprintf
  0010f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1723 : 		}
; 1724 : 		else

  00112	eb 29		 jmp	 SHORT $LN9@display_ra
$LN8@display_ra:

; 1725 : 		{
; 1726 : 			sprintf (buffer, "%.1fKm", target_range * (1.0 / 1000.0));

  00114	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  00119	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00121	83 ec 08	 sub	 esp, 8
  00124	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00129	68 00 00 00 00	 push	 OFFSET ??_C@_06OMCABMNO@?$CF?41fKm@
  0012e	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 _sprintf
  0013a	83 c4 10	 add	 esp, 16			; 00000010H
$LN9@display_ra:

; 1727 : 		}
; 1728 : 
; 1729 : 		width = get_mono_font_string_width (buffer);

  0013d	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00149	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 1730 : 
; 1731 : 		set_2d_mono_font_position (0.8, -1.0);

  0014f	51		 push	 ecx
  00150	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00158	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015d	51		 push	 ecx
  0015e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00166	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1732 : 
; 1733 : 		set_mono_font_rel_position (-width, y_adjust);

  00170	51		 push	 ecx
  00171	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00179	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017e	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00186	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0018d	51		 push	 ecx
  0018e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00193	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1734 : 
; 1735 : 		print_mono_font_string (buffer);

  00198	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0019e	50		 push	 eax
  0019f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1736 : 
; 1737 : 		//
; 1738 : 		// no line of sight
; 1739 : 		//
; 1740 : 
; 1741 : 		if (!get_local_entity_int_value (target, INT_TYPE_GUNSHIP_RADAR_LOS_CLEAR))

  001a4	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  001a8	74 0d		 je	 SHORT $LN23@display_ra
  001aa	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  001ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  001af	89 8d e8 fe ff
	ff		 mov	 DWORD PTR tv142[ebp], ecx
  001b5	eb 20		 jmp	 SHORT $LN24@display_ra
$LN23@display_ra:
  001b7	68 cd 06 00 00	 push	 1741			; 000006cdH
  001bc	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  001c1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001c7	52		 push	 edx
  001c8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001cd	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv142[ebp], 0
$LN24@display_ra:
  001d7	b8 01 00 00 00	 mov	 eax, 1
  001dc	85 c0		 test	 eax, eax
  001de	74 0c		 je	 SHORT $LN25@display_ra
  001e0	c7 85 e4 fe ff
	ff 50 00 00 00	 mov	 DWORD PTR tv149[ebp], 80 ; 00000050H
  001ea	eb 20		 jmp	 SHORT $LN26@display_ra
$LN25@display_ra:
  001ec	68 cd 06 00 00	 push	 1741			; 000006cdH
  001f1	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  001f6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  001fc	51		 push	 ecx
  001fd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00202	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv149[ebp], 0
$LN26@display_ra:
  0020c	6a 50		 push	 80			; 00000050H
  0020e	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00211	52		 push	 edx
  00212	69 85 e8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv142[ebp], 1116
  0021c	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR tv149[ebp]
  00222	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00229	ff d2		 call	 edx
  0022b	85 c0		 test	 eax, eax
  0022d	0f 85 8e 00 00
	00		 jne	 $LN10@display_ra

; 1742 : 		{
; 1743 : 			if (draw_large_mfd)

  00233	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0023a	74 12		 je	 SHORT $LN11@display_ra

; 1744 : 			{
; 1745 : 				y_adjust = -25.0;

  0023c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  00244	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1746 : 			}
; 1747 : 			else

  0024c	eb 10		 jmp	 SHORT $LN12@display_ra
$LN11@display_ra:

; 1748 : 			{
; 1749 : 				y_adjust = -12.0;

  0024e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  00256	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN12@display_ra:

; 1750 : 			}
; 1751 : 
; 1752 : 			width = get_mono_font_string_width ("NO LOS");

  0025e	68 00 00 00 00	 push	 OFFSET ??_C@_06HCPKJKPH@NO?5LOS@
  00263	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00268	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 1753 : 
; 1754 : 			set_2d_mono_font_position (0.8, -1.0);

  0026e	51		 push	 ecx
  0026f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00277	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027c	51		 push	 ecx
  0027d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00285	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028a	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1755 : 
; 1756 : 			set_mono_font_rel_position (-width, y_adjust);

  0028f	51		 push	 ecx
  00290	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00298	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029d	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  002a5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  002ac	51		 push	 ecx
  002ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1757 : 
; 1758 : 			print_mono_font_string ("NO LOS");

  002b7	68 00 00 00 00	 push	 OFFSET ??_C@_06HCPKJKPH@NO?5LOS@
  002bc	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN10@display_ra:

; 1759 : 		}
; 1760 : 	}
; 1761 : 
; 1762 : 	//
; 1763 : 	// auto
; 1764 : 	//
; 1765 : 
; 1766 : 	if (radar->auto_target)

  002c1	8b 45 10	 mov	 eax, DWORD PTR _radar$[ebp]
  002c4	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  002c8	74 77		 je	 SHORT $LN13@display_ra

; 1767 : 	{
; 1768 : 		if (draw_large_mfd)

  002ca	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  002d1	74 12		 je	 SHORT $LN14@display_ra

; 1769 : 		{
; 1770 : 			y_adjust = 18.0;

  002d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41900000
  002db	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1771 : 		}
; 1772 : 		else

  002e3	eb 10		 jmp	 SHORT $LN15@display_ra
$LN14@display_ra:

; 1773 : 		{
; 1774 : 			y_adjust = 9.0;

  002e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41100000
  002ed	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN15@display_ra:

; 1775 : 		}
; 1776 : 
; 1777 : 		set_2d_mono_font_position (-0.9, 1.0);

  002f5	51		 push	 ecx
  002f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00303	51		 push	 ecx
  00304	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  0030c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00311	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1778 : 
; 1779 : 		set_mono_font_rel_position (1.0, y_adjust);

  00316	51		 push	 ecx
  00317	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0031f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00324	51		 push	 ecx
  00325	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0032d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00332	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1780 : 
; 1781 : 		print_mono_font_string ("AUTO");

  00337	68 00 00 00 00	 push	 OFFSET ??_C@_04LMMJFDCN@AUTO@
  0033c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN13@display_ra:

; 1782 : 	}
; 1783 : 
; 1784 : 	//
; 1785 : 	// locked
; 1786 : 	//
; 1787 : 
; 1788 : 	if (radar->target_locked)

  00341	8b 45 10	 mov	 eax, DWORD PTR _radar$[ebp]
  00344	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00348	74 77		 je	 SHORT $LN16@display_ra

; 1789 : 	{
; 1790 : 		if (draw_large_mfd)

  0034a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00351	74 12		 je	 SHORT $LN17@display_ra

; 1791 : 		{
; 1792 : 			y_adjust = -25.0;

  00353	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  0035b	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1793 : 		}
; 1794 : 		else

  00363	eb 10		 jmp	 SHORT $LN18@display_ra
$LN17@display_ra:

; 1795 : 		{
; 1796 : 			y_adjust = -12.0;

  00365	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  0036d	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN18@display_ra:

; 1797 : 		}
; 1798 : 
; 1799 : 		set_2d_mono_font_position (-0.8, -1.0);

  00375	51		 push	 ecx
  00376	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0037e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00383	51		 push	 ecx
  00384	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0038c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00391	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1800 : 
; 1801 : 		set_mono_font_rel_position (1.0, y_adjust);

  00396	51		 push	 ecx
  00397	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0039f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a4	51		 push	 ecx
  003a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1802 : 
; 1803 : 		print_mono_font_string ("LOCKED");

  003b7	68 00 00 00 00	 push	 OFFSET ??_C@_06KODELPLK@LOCKED@
  003bc	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN16@display_ra:

; 1804 : 	}
; 1805 : // Jabberwock 031107 Designated targets
; 1806 : 
; 1807 : 	target = get_local_entity_parent (get_gunship_entity (), LIST_TYPE_TARGET);

  003c1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  003c8	74 0f		 je	 SHORT $LN27@display_ra
  003ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  003cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  003d1	89 8d e8 fe ff
	ff		 mov	 DWORD PTR tv187[ebp], ecx
  003d7	eb 27		 jmp	 SHORT $LN28@display_ra
$LN27@display_ra:
  003d9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA
  003df	81 c2 86 00 00
	00		 add	 edx, 134		; 00000086H
  003e5	52		 push	 edx
  003e6	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  003eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003f0	50		 push	 eax
  003f1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003f6	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv187[ebp], 0
$LN28@display_ra:
  00400	b9 01 00 00 00	 mov	 ecx, 1
  00405	85 c9		 test	 ecx, ecx
  00407	74 0c		 je	 SHORT $LN29@display_ra
  00409	c7 85 e4 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv195[ebp], 38 ; 00000026H
  00413	eb 27		 jmp	 SHORT $LN30@display_ra
$LN29@display_ra:
  00415	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA
  0041b	81 c2 86 00 00
	00		 add	 edx, 134		; 00000086H
  00421	52		 push	 edx
  00422	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00427	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0042c	50		 push	 eax
  0042d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00432	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv195[ebp], 0
$LN30@display_ra:
  0043c	6a 26		 push	 38			; 00000026H
  0043e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00444	51		 push	 ecx
  00445	69 95 e8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv187[ebp], 180
  0044f	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR tv195[ebp]
  00455	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0045c	ff d1		 call	 ecx
  0045e	89 45 08	 mov	 DWORD PTR _target$[ebp], eax

; 1808 : 
; 1809 : 	if (target && get_local_entity_parent (target, LIST_TYPE_DESIGNATED_TARGET))

  00461	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00465	0f 84 2d 01 00
	00		 je	 $LN19@display_ra
  0046b	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0046f	74 0d		 je	 SHORT $LN31@display_ra
  00471	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00474	8b 08		 mov	 ecx, DWORD PTR [eax]
  00476	89 8d e8 fe ff
	ff		 mov	 DWORD PTR tv207[ebp], ecx
  0047c	eb 20		 jmp	 SHORT $LN32@display_ra
$LN31@display_ra:
  0047e	68 11 07 00 00	 push	 1809			; 00000711H
  00483	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00488	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0048e	52		 push	 edx
  0048f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00494	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv207[ebp], 0
$LN32@display_ra:
  0049e	b8 01 00 00 00	 mov	 eax, 1
  004a3	85 c0		 test	 eax, eax
  004a5	74 0c		 je	 SHORT $LN33@display_ra
  004a7	c7 85 e4 fe ff
	ff 0a 00 00 00	 mov	 DWORD PTR tv214[ebp], 10 ; 0000000aH
  004b1	eb 20		 jmp	 SHORT $LN34@display_ra
$LN33@display_ra:
  004b3	68 11 07 00 00	 push	 1809			; 00000711H
  004b8	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  004bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  004c3	51		 push	 ecx
  004c4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004c9	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv214[ebp], 0
$LN34@display_ra:
  004d3	6a 0a		 push	 10			; 0000000aH
  004d5	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  004d8	52		 push	 edx
  004d9	69 85 e8 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv207[ebp], 180
  004e3	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR tv214[ebp]
  004e9	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  004f0	ff d2		 call	 edx
  004f2	85 c0		 test	 eax, eax
  004f4	0f 84 9e 00 00
	00		 je	 $LN19@display_ra

; 1810 : 	{
; 1811 : 		if (draw_large_mfd)

  004fa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00501	74 12		 je	 SHORT $LN20@display_ra

; 1812 : 		{
; 1813 : 			y_adjust = -25.0;

  00503	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  0050b	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1814 : 		}
; 1815 : 		else

  00513	eb 10		 jmp	 SHORT $LN21@display_ra
$LN20@display_ra:

; 1816 : 		{
; 1817 : 			y_adjust = -12.0;

  00515	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  0051d	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN21@display_ra:

; 1818 : 		}
; 1819 : 
; 1820 : 		width = get_mono_font_string_width ("MARKED");

  00525	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  0052a	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0052f	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 1821 : 
; 1822 : 		set_2d_mono_font_position (1.0, -1.0);

  00535	51		 push	 ecx
  00536	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0053e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00543	51		 push	 ecx
  00544	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0054c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00551	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1823 : 
; 1824 : 		set_mono_font_rel_position (-width -1.0, y_adjust);

  00556	51		 push	 ecx
  00557	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0055f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00564	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  0056c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00573	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00577	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0057f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00583	51		 push	 ecx
  00584	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00589	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1825 : 
; 1826 : 		print_mono_font_string ("MARKED");		

  0058e	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  00593	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN19@display_ra:
$LN1@display_ra:

; 1827 : 	}
; 1828 : // Jabberwock 031107 ends
; 1829 : }

  00598	5f		 pop	 edi
  00599	5e		 pop	 esi
  0059a	5b		 pop	 ebx
  0059b	8b e5		 mov	 esp, ebp
  0059d	5d		 pop	 ebp
  0059e	c2 0c 00	 ret	 12			; 0000000cH
?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z ENDP ; display_radar_target_details
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?display_radar_scan_range@@YGXMH@Z
_TEXT	SEGMENT
_y_adjust$ = -16					; size = 4
_width$ = -12						; size = 4
_s$ = -8						; size = 8
_scan_range$ = 8					; size = 4
_ground_radar$ = 12					; size = 4
?display_radar_scan_range@@YGXMH@Z PROC			; display_radar_scan_range, COMDAT

; 1614 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1615 : //VJ 030807 radar range adjustable
; 1616 : 	char
; 1617 : 		s[8];
; 1618 : 
; 1619 : 	float
; 1620 : 		width,
; 1621 : 		y_adjust;
; 1622 : 
; 1623 : 	if (ground_radar && radar_zoomed)

  00009	83 7d 0c 00	 cmp	 DWORD PTR _ground_radar$[ebp], 0
  0000d	74 1f		 je	 SHORT $LN2@display_ra
  0000f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?radar_zoomed@@3HA, 0
  00016	74 16		 je	 SHORT $LN2@display_ra

; 1624 : 		sprintf(s, "ZOOM");

  00018	68 00 00 00 00	 push	 OFFSET ??_C@_04LGBIGMFG@ZOOM@
  0001d	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _sprintf
  00026	83 c4 08	 add	 esp, 8
  00029	e9 53 01 00 00	 jmp	 $LN13@display_ra
$LN2@display_ra:

; 1625 : 	else if (scan_range == DEFAULT_RADAR_SCAN_RANGE_500)

  0002e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  00033	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?DEFAULT_RADAR_SCAN_RANGE_500@@3MA
  0003a	9f		 lahf
  0003b	f6 c4 44	 test	 ah, 68			; 00000044H
  0003e	7a 26		 jp	 SHORT $LN4@display_ra

; 1626 : 	{
; 1627 : 		sprintf(s,"%.0fm",DEFAULT_RADAR_SCAN_RANGE_500);

  00040	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?DEFAULT_RADAR_SCAN_RANGE_500@@3MA
  00048	83 ec 08	 sub	 esp, 8
  0004b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_05LIPABGF@?$CF?40fm@
  00055	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 _sprintf
  0005e	83 c4 10	 add	 esp, 16			; 00000010H
  00061	e9 1b 01 00 00	 jmp	 $LN13@display_ra
$LN4@display_ra:

; 1628 : 	}
; 1629 : 	else if (scan_range == DEFAULT_RADAR_SCAN_RANGE_1000)

  00066	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  0006b	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?DEFAULT_RADAR_SCAN_RANGE_1000@@3MA
  00072	9f		 lahf
  00073	f6 c4 44	 test	 ah, 68			; 00000044H
  00076	7a 32		 jp	 SHORT $LN6@display_ra

; 1630 : 	{
; 1631 : 		sprintf(s,"%.0fKm",DEFAULT_RADAR_SCAN_RANGE_1000/1000);

  00078	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?DEFAULT_RADAR_SCAN_RANGE_1000@@3MA
  00080	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  00088	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0008c	83 ec 08	 sub	 esp, 8
  0008f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_06NBEADFGO@?$CF?40fKm@
  00099	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 _sprintf
  000a2	83 c4 10	 add	 esp, 16			; 00000010H
  000a5	e9 d7 00 00 00	 jmp	 $LN13@display_ra
$LN6@display_ra:

; 1632 : 	}
; 1633 : 	else if (scan_range == DEFAULT_RADAR_SCAN_RANGE_2000)

  000aa	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  000af	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?DEFAULT_RADAR_SCAN_RANGE_2000@@3MA
  000b6	9f		 lahf
  000b7	f6 c4 44	 test	 ah, 68			; 00000044H
  000ba	7a 32		 jp	 SHORT $LN8@display_ra

; 1634 : 	{
; 1635 : 		sprintf(s,"%.0fKm",DEFAULT_RADAR_SCAN_RANGE_2000/1000);

  000bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?DEFAULT_RADAR_SCAN_RANGE_2000@@3MA
  000c4	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  000cc	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000d0	83 ec 08	 sub	 esp, 8
  000d3	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000d8	68 00 00 00 00	 push	 OFFSET ??_C@_06NBEADFGO@?$CF?40fKm@
  000dd	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 _sprintf
  000e6	83 c4 10	 add	 esp, 16			; 00000010H
  000e9	e9 93 00 00 00	 jmp	 $LN13@display_ra
$LN8@display_ra:

; 1636 : 	}
; 1637 : 	else if (scan_range == DEFAULT_RADAR_SCAN_RANGE_4000)

  000ee	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  000f3	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?DEFAULT_RADAR_SCAN_RANGE_4000@@3MA
  000fa	9f		 lahf
  000fb	f6 c4 44	 test	 ah, 68			; 00000044H
  000fe	7a 2f		 jp	 SHORT $LN10@display_ra

; 1638 : 	{
; 1639 : 		sprintf(s,"%.0fKm",DEFAULT_RADAR_SCAN_RANGE_4000/1000);

  00100	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?DEFAULT_RADAR_SCAN_RANGE_4000@@3MA
  00108	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  00110	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00114	83 ec 08	 sub	 esp, 8
  00117	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0011c	68 00 00 00 00	 push	 OFFSET ??_C@_06NBEADFGO@?$CF?40fKm@
  00121	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 _sprintf
  0012a	83 c4 10	 add	 esp, 16			; 00000010H
  0012d	eb 52		 jmp	 SHORT $LN13@display_ra
$LN10@display_ra:

; 1640 : 	}
; 1641 : 	else if (scan_range == DEFAULT_RADAR_SCAN_RANGE_8000)

  0012f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  00134	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?DEFAULT_RADAR_SCAN_RANGE_8000@@3MA
  0013b	9f		 lahf
  0013c	f6 c4 44	 test	 ah, 68			; 00000044H
  0013f	7a 2f		 jp	 SHORT $LN12@display_ra

; 1642 : 	{
; 1643 : 		sprintf(s,"%.0fKm",DEFAULT_RADAR_SCAN_RANGE_8000/1000);

  00141	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?DEFAULT_RADAR_SCAN_RANGE_8000@@3MA
  00149	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  00151	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00155	83 ec 08	 sub	 esp, 8
  00158	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0015d	68 00 00 00 00	 push	 OFFSET ??_C@_06NBEADFGO@?$CF?40fKm@
  00162	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  00165	50		 push	 eax
  00166	e8 00 00 00 00	 call	 _sprintf
  0016b	83 c4 10	 add	 esp, 16			; 00000010H

; 1644 : 	}
; 1645 : 	else

  0016e	eb 11		 jmp	 SHORT $LN13@display_ra
$LN12@display_ra:

; 1646 : 	{
; 1647 : 		sprintf(s,"XXX");

  00170	68 00 00 00 00	 push	 OFFSET ??_C@_03MAMPKPPK@XXX@
  00175	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  00178	50		 push	 eax
  00179	e8 00 00 00 00	 call	 _sprintf
  0017e	83 c4 08	 add	 esp, 8
$LN13@display_ra:

; 1648 : 	}
; 1649 : 
; 1650 : 	width = get_mono_font_string_width (s);

  00181	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  00184	50		 push	 eax
  00185	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0018a	d9 5d f4	 fstp	 DWORD PTR _width$[ebp]

; 1651 : 
; 1652 : 	if (draw_large_mfd)

  0018d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00194	74 0f		 je	 SHORT $LN14@display_ra

; 1653 : 	{
; 1654 : 		y_adjust = 5.0;

  00196	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  0019e	f3 0f 11 45 f0	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1655 : 	}
; 1656 : 	else

  001a3	eb 0d		 jmp	 SHORT $LN15@display_ra
$LN14@display_ra:

; 1657 : 	{
; 1658 : 		y_adjust = 2.0;

  001a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  001ad	f3 0f 11 45 f0	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN15@display_ra:

; 1659 : 	}
; 1660 : 
; 1661 : 	set_2d_mono_font_position (0.9, 1.0);

  001b2	51		 push	 ecx
  001b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c0	51		 push	 ecx
  001c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  001c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ce	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1662 : 
; 1663 : 	set_mono_font_rel_position (-width, y_adjust);

  001d3	51		 push	 ecx
  001d4	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  001d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001de	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _width$[ebp]
  001e3	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001ea	51		 push	 ecx
  001eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f0	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1664 : 
; 1665 : 	print_mono_font_string (s);

  001f5	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  001f8	50		 push	 eax
  001f9	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1666 : }

  001fe	5f		 pop	 edi
  001ff	5e		 pop	 esi
  00200	5b		 pop	 ebx
  00201	8b e5		 mov	 esp, ebp
  00203	5d		 pop	 ebp
  00204	c2 08 00	 ret	 8
?display_radar_scan_range@@YGXMH@Z ENDP			; display_radar_scan_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_field_of_regard_and_view_boxes@@YGXXZ
_TEXT	SEGMENT
_y$ = -8						; size = 4
_x$ = -4						; size = 4
?draw_field_of_regard_and_view_boxes@@YGXXZ PROC	; draw_field_of_regard_and_view_boxes, COMDAT

; 1544 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1545 : 	float
; 1546 : 		x,
; 1547 : 		y;
; 1548 : 
; 1549 : 	if (draw_large_mfd)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00010	0f 84 93 05 00
	00		 je	 $LN2@draw_field

; 1550 : 	{
; 1551 : 		draw_2d_line (-0.3000, -0.7750,  0.3000, -0.7750, MFD_COLOUR1);

  00016	b8 04 00 00 00	 mov	 eax, 4
  0001b	6b c8 00	 imul	 ecx, eax, 0
  0001e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00024	52		 push	 edx
  00025	51		 push	 ecx
  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf466666
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	51		 push	 ecx
  00034	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  0003c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00041	51		 push	 ecx
  00042	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf466666
  0004a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004f	51		 push	 ecx
  00050	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  00058	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1552 : 		draw_2d_line (-0.3000, -1.0000,  0.3000, -1.0000, MFD_COLOUR1);

  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	6b c8 00	 imul	 ecx, eax, 0
  0006a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00070	52		 push	 edx
  00071	51		 push	 ecx
  00072	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0007a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007f	51		 push	 ecx
  00080	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00088	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008d	51		 push	 ecx
  0008e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00096	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009b	51		 push	 ecx
  0009c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  000a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1553 : 		draw_2d_line (-0.3000, -0.7750, -0.3000, -1.0000, MFD_COLOUR1);

  000ae	b8 04 00 00 00	 mov	 eax, 4
  000b3	6b c8 00	 imul	 ecx, eax, 0
  000b6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000bc	52		 push	 edx
  000bd	51		 push	 ecx
  000be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cb	51		 push	 ecx
  000cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  000d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d9	51		 push	 ecx
  000da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf466666
  000e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e7	51		 push	 ecx
  000e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  000f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1554 : 		draw_2d_line ( 0.3000, -0.7750,  0.3000, -1.0000, MFD_COLOUR1);

  000fa	b8 04 00 00 00	 mov	 eax, 4
  000ff	6b c8 00	 imul	 ecx, eax, 0
  00102	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00108	52		 push	 edx
  00109	51		 push	 ecx
  0010a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00112	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00117	51		 push	 ecx
  00118	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00120	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00125	51		 push	 ecx
  00126	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf466666
  0012e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00133	51		 push	 ecx
  00134	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  0013c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00141	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1555 : 
; 1556 : 		draw_2d_line ( 0.0000, -0.7750,  0.0000, -0.7950, MFD_COLOUR1);

  00146	b8 04 00 00 00	 mov	 eax, 4
  0014b	6b c8 00	 imul	 ecx, eax, 0
  0014e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00154	52		 push	 edx
  00155	51		 push	 ecx
  00156	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4b851f
  0015e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00163	51		 push	 ecx
  00164	0f 57 c0	 xorps	 xmm0, xmm0
  00167	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016c	51		 push	 ecx
  0016d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf466666
  00175	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017a	51		 push	 ecx
  0017b	0f 57 c0	 xorps	 xmm0, xmm0
  0017e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00183	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1557 : 		draw_2d_line (-0.2250, -0.7750, -0.2250, -0.7950, MFD_COLOUR1);

  00188	b8 04 00 00 00	 mov	 eax, 4
  0018d	6b c8 00	 imul	 ecx, eax, 0
  00190	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00196	52		 push	 edx
  00197	51		 push	 ecx
  00198	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4b851f
  001a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a5	51		 push	 ecx
  001a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be666666
  001ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b3	51		 push	 ecx
  001b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf466666
  001bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c1	51		 push	 ecx
  001c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be666666
  001ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cf	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1558 : 		draw_2d_line ( 0.2250, -0.7750,  0.2250, -0.7950, MFD_COLOUR1);

  001d4	b8 04 00 00 00	 mov	 eax, 4
  001d9	6b c8 00	 imul	 ecx, eax, 0
  001dc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001e2	52		 push	 edx
  001e3	51		 push	 ecx
  001e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4b851f
  001ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f1	51		 push	 ecx
  001f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e666666
  001fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ff	51		 push	 ecx
  00200	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf466666
  00208	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020d	51		 push	 ecx
  0020e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e666666
  00216	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1559 : 
; 1560 : 		draw_2d_line ( 0.0000, -0.9800,  0.0000, -1.0000, MFD_COLOUR1);

  00220	b8 04 00 00 00	 mov	 eax, 4
  00225	6b c8 00	 imul	 ecx, eax, 0
  00228	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0022e	52		 push	 edx
  0022f	51		 push	 ecx
  00230	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00238	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023d	51		 push	 ecx
  0023e	0f 57 c0	 xorps	 xmm0, xmm0
  00241	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00246	51		 push	 ecx
  00247	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  0024f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00254	51		 push	 ecx
  00255	0f 57 c0	 xorps	 xmm0, xmm0
  00258	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1561 : 		draw_2d_line (-0.2250, -0.9800, -0.2250, -1.0000, MFD_COLOUR1);

  00262	b8 04 00 00 00	 mov	 eax, 4
  00267	6b c8 00	 imul	 ecx, eax, 0
  0026a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00270	52		 push	 edx
  00271	51		 push	 ecx
  00272	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0027a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027f	51		 push	 ecx
  00280	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be666666
  00288	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028d	51		 push	 ecx
  0028e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00296	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029b	51		 push	 ecx
  0029c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be666666
  002a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1562 : 		draw_2d_line ( 0.2250, -0.9800,  0.2250, -1.0000, MFD_COLOUR1);

  002ae	b8 04 00 00 00	 mov	 eax, 4
  002b3	6b c8 00	 imul	 ecx, eax, 0
  002b6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002bc	52		 push	 edx
  002bd	51		 push	 ecx
  002be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  002c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002cb	51		 push	 ecx
  002cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e666666
  002d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d9	51		 push	 ecx
  002da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  002e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e7	51		 push	 ecx
  002e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e666666
  002f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1563 : 
; 1564 : 		draw_2d_line (-0.3000, -0.8500, -0.2800, -0.8500, MFD_COLOUR1);

  002fa	b8 04 00 00 00	 mov	 eax, 4
  002ff	6b c8 00	 imul	 ecx, eax, 0
  00302	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00308	52		 push	 edx
  00309	51		 push	 ecx
  0030a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  00312	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00317	51		 push	 ecx
  00318	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8f5c29
  00320	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00325	51		 push	 ecx
  00326	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  0032e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00333	51		 push	 ecx
  00334	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  0033c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00341	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1565 : 		draw_2d_line ( 0.3000, -0.8500,  0.2800, -0.8500, MFD_COLOUR1);

  00346	b8 04 00 00 00	 mov	 eax, 4
  0034b	6b c8 00	 imul	 ecx, eax, 0
  0034e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00354	52		 push	 edx
  00355	51		 push	 ecx
  00356	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  0035e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00363	51		 push	 ecx
  00364	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8f5c29
  0036c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00371	51		 push	 ecx
  00372	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  0037a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037f	51		 push	 ecx
  00380	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00388	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1566 : 
; 1567 : 		x = eo_azimuth / eo_max_azimuth * 0.3;

  00392	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  0039a	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_max_azimuth@@3MA
  003a2	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  003a6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd3333333333333
  003ae	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003b2	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0

; 1568 : 		y = (eo_elevation / eo_min_elevation * -0.15) - 0.85;

  003b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  003bf	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_min_elevation@@3MA
  003c7	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  003cb	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfc3333333333333
  003d3	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3feb333333333333
  003db	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003df	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0

; 1569 : 
; 1570 : 		draw_2d_line (x - 0.0400, y - 0.0300, x + 0.0400, y - 0.0300, MFD_COLOUR1);

  003e4	b8 04 00 00 00	 mov	 eax, 4
  003e9	6b c8 00	 imul	 ecx, eax, 0
  003ec	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003f2	52		 push	 edx
  003f3	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  003f8	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  00400	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00404	51		 push	 ecx
  00405	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040a	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0040f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00417	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0041b	51		 push	 ecx
  0041c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00421	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00426	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  0042e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00432	51		 push	 ecx
  00433	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00438	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0043d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00445	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00449	51		 push	 ecx
  0044a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1571 : 		draw_2d_line (x - 0.0400, y + 0.0300, x + 0.0400, y + 0.0300, MFD_COLOUR1);

  00454	b8 04 00 00 00	 mov	 eax, 4
  00459	6b c8 00	 imul	 ecx, eax, 0
  0045c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00462	52		 push	 edx
  00463	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00468	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  00470	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00474	51		 push	 ecx
  00475	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047a	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0047f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00487	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0048b	51		 push	 ecx
  0048c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00491	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00496	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  0049e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004a2	51		 push	 ecx
  004a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a8	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  004ad	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  004b5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004b9	51		 push	 ecx
  004ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004bf	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1572 : 		draw_2d_line (x - 0.0400, y - 0.0300, x - 0.0400, y + 0.0300, MFD_COLOUR1);

  004c4	b8 04 00 00 00	 mov	 eax, 4
  004c9	6b c8 00	 imul	 ecx, eax, 0
  004cc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004d2	52		 push	 edx
  004d3	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  004d8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  004e0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004e4	51		 push	 ecx
  004e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ea	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  004ef	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  004f7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004fb	51		 push	 ecx
  004fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00501	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00506	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  0050e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00512	51		 push	 ecx
  00513	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00518	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0051d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00525	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00529	51		 push	 ecx
  0052a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0052f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1573 : 		draw_2d_line (x + 0.0400, y - 0.0300, x + 0.0400, y + 0.0300, MFD_COLOUR1);

  00534	b8 04 00 00 00	 mov	 eax, 4
  00539	6b c8 00	 imul	 ecx, eax, 0
  0053c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00542	52		 push	 edx
  00543	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00548	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  00550	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00554	51		 push	 ecx
  00555	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0055a	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0055f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00567	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0056b	51		 push	 ecx
  0056c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00571	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00576	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  0057e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00582	51		 push	 ecx
  00583	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00588	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0058d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00595	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00599	51		 push	 ecx
  0059a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1574 : 	}
; 1575 : 	else

  005a4	e9 8e 05 00 00	 jmp	 $LN3@draw_field
$LN2@draw_field:

; 1576 : 	{
; 1577 : 		draw_2d_line (-0.2000, -0.8250,  0.2000, -0.8250, MFD_COLOUR1);

  005a9	b8 04 00 00 00	 mov	 eax, 4
  005ae	6b c8 00	 imul	 ecx, eax, 0
  005b1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005b7	52		 push	 edx
  005b8	51		 push	 ecx
  005b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf533333
  005c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c6	51		 push	 ecx
  005c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  005cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d4	51		 push	 ecx
  005d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf533333
  005dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e2	51		 push	 ecx
  005e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  005eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1578 : 		draw_2d_line (-0.2000, -0.9750,  0.2000, -0.9750, MFD_COLOUR1);

  005f5	b8 04 00 00 00	 mov	 eax, 4
  005fa	6b c8 00	 imul	 ecx, eax, 0
  005fd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00603	52		 push	 edx
  00604	51		 push	 ecx
  00605	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf79999a
  0060d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00612	51		 push	 ecx
  00613	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0061b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00620	51		 push	 ecx
  00621	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf79999a
  00629	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0062e	51		 push	 ecx
  0062f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00637	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1579 : 		draw_2d_line (-0.2000, -0.8250, -0.2000, -0.9750, MFD_COLOUR1);

  00641	b8 04 00 00 00	 mov	 eax, 4
  00646	6b c8 00	 imul	 ecx, eax, 0
  00649	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0064f	52		 push	 edx
  00650	51		 push	 ecx
  00651	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf79999a
  00659	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0065e	51		 push	 ecx
  0065f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00667	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0066c	51		 push	 ecx
  0066d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf533333
  00675	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0067a	51		 push	 ecx
  0067b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00683	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00688	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1580 : 		draw_2d_line ( 0.2000, -0.8250,  0.2000, -0.9750, MFD_COLOUR1);

  0068d	b8 04 00 00 00	 mov	 eax, 4
  00692	6b c8 00	 imul	 ecx, eax, 0
  00695	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0069b	52		 push	 edx
  0069c	51		 push	 ecx
  0069d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf79999a
  006a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006aa	51		 push	 ecx
  006ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  006b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b8	51		 push	 ecx
  006b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf533333
  006c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c6	51		 push	 ecx
  006c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  006cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1581 : 
; 1582 : 		draw_2d_line ( 0.0000, -0.8250,  0.0000, -0.8475, MFD_COLOUR1);

  006d9	b8 04 00 00 00	 mov	 eax, 4
  006de	6b c8 00	 imul	 ecx, eax, 0
  006e1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006e7	52		 push	 edx
  006e8	51		 push	 ecx
  006e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf58f5c3
  006f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f6	51		 push	 ecx
  006f7	0f 57 c0	 xorps	 xmm0, xmm0
  006fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ff	51		 push	 ecx
  00700	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf533333
  00708	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0070d	51		 push	 ecx
  0070e	0f 57 c0	 xorps	 xmm0, xmm0
  00711	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00716	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1583 : 		draw_2d_line (-0.1500, -0.8250, -0.1500, -0.8475, MFD_COLOUR1);

  0071b	b8 04 00 00 00	 mov	 eax, 4
  00720	6b c8 00	 imul	 ecx, eax, 0
  00723	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00729	52		 push	 edx
  0072a	51		 push	 ecx
  0072b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf58f5c3
  00733	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00738	51		 push	 ecx
  00739	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  00741	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00746	51		 push	 ecx
  00747	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf533333
  0074f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00754	51		 push	 ecx
  00755	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  0075d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00762	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1584 : 		draw_2d_line ( 0.1500, -0.8250,  0.1500, -0.8475, MFD_COLOUR1);

  00767	b8 04 00 00 00	 mov	 eax, 4
  0076c	6b c8 00	 imul	 ecx, eax, 0
  0076f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00775	52		 push	 edx
  00776	51		 push	 ecx
  00777	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf58f5c3
  0077f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00784	51		 push	 ecx
  00785	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  0078d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00792	51		 push	 ecx
  00793	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf533333
  0079b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a0	51		 push	 ecx
  007a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  007a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ae	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1585 : 
; 1586 : 		draw_2d_line ( 0.0000, -0.9525,  0.0000, -0.9750, MFD_COLOUR1);

  007b3	b8 04 00 00 00	 mov	 eax, 4
  007b8	6b c8 00	 imul	 ecx, eax, 0
  007bb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007c1	52		 push	 edx
  007c2	51		 push	 ecx
  007c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf79999a
  007cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d0	51		 push	 ecx
  007d1	0f 57 c0	 xorps	 xmm0, xmm0
  007d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d9	51		 push	 ecx
  007da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf73d70a
  007e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e7	51		 push	 ecx
  007e8	0f 57 c0	 xorps	 xmm0, xmm0
  007eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1587 : 		draw_2d_line (-0.1500, -0.9525, -0.1500, -0.9750, MFD_COLOUR1);

  007f5	b8 04 00 00 00	 mov	 eax, 4
  007fa	6b c8 00	 imul	 ecx, eax, 0
  007fd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00803	52		 push	 edx
  00804	51		 push	 ecx
  00805	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf79999a
  0080d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00812	51		 push	 ecx
  00813	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  0081b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00820	51		 push	 ecx
  00821	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf73d70a
  00829	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0082e	51		 push	 ecx
  0082f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  00837	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0083c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1588 : 		draw_2d_line ( 0.1500, -0.9525,  0.1500, -0.9750, MFD_COLOUR1);

  00841	b8 04 00 00 00	 mov	 eax, 4
  00846	6b c8 00	 imul	 ecx, eax, 0
  00849	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0084f	52		 push	 edx
  00850	51		 push	 ecx
  00851	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf79999a
  00859	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0085e	51		 push	 ecx
  0085f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00867	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0086c	51		 push	 ecx
  0086d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf73d70a
  00875	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0087a	51		 push	 ecx
  0087b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00883	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00888	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1589 : 
; 1590 : 		draw_2d_line (-0.2000, -0.8750, -0.1775, -0.8750, MFD_COLOUR1);

  0088d	b8 04 00 00 00	 mov	 eax, 4
  00892	6b c8 00	 imul	 ecx, eax, 0
  00895	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0089b	52		 push	 edx
  0089c	51		 push	 ecx
  0089d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf600000
  008a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008aa	51		 push	 ecx
  008ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be35c28f
  008b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008b8	51		 push	 ecx
  008b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf600000
  008c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c6	51		 push	 ecx
  008c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  008cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1591 : 		draw_2d_line ( 0.2000, -0.8750,  0.1775, -0.8750, MFD_COLOUR1);

  008d9	b8 04 00 00 00	 mov	 eax, 4
  008de	6b c8 00	 imul	 ecx, eax, 0
  008e1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008e7	52		 push	 edx
  008e8	51		 push	 ecx
  008e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf600000
  008f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f6	51		 push	 ecx
  008f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e35c28f
  008ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00904	51		 push	 ecx
  00905	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf600000
  0090d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00912	51		 push	 ecx
  00913	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0091b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00920	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1592 : 
; 1593 : 		x = eo_azimuth / eo_max_azimuth * 0.2;

  00925	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  0092d	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_max_azimuth@@3MA
  00935	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00939	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00941	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00945	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0

; 1594 : 		y = (eo_elevation / eo_min_elevation * -0.1) - 0.875;

  0094a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  00952	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_min_elevation@@3MA
  0095a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0095e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfb999999999999a
  00966	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fec000000000000
  0096e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00972	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0

; 1595 : 
; 1596 : 		draw_2d_line (x - 0.0267, y - 0.0200, x + 0.0267, y - 0.0200, MFD_COLOUR1);

  00977	b8 04 00 00 00	 mov	 eax, 4
  0097c	6b c8 00	 imul	 ecx, eax, 0
  0097f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00985	52		 push	 edx
  00986	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  0098b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00993	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00997	51		 push	 ecx
  00998	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0099d	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  009a2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9b573eab367a10
  009aa	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009ae	51		 push	 ecx
  009af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b4	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  009b9	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  009c1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009c5	51		 push	 ecx
  009c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009cb	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  009d0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9b573eab367a10
  009d8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009dc	51		 push	 ecx
  009dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009e2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1597 : 		draw_2d_line (x - 0.0267, y + 0.0200, x + 0.0267, y + 0.0200, MFD_COLOUR1);

  009e7	b8 04 00 00 00	 mov	 eax, 4
  009ec	6b c8 00	 imul	 ecx, eax, 0
  009ef	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009f5	52		 push	 edx
  009f6	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  009fb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00a03	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a07	51		 push	 ecx
  00a08	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a0d	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00a12	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9b573eab367a10
  00a1a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a1e	51		 push	 ecx
  00a1f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a24	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00a29	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00a31	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a35	51		 push	 ecx
  00a36	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a3b	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00a40	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9b573eab367a10
  00a48	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a4c	51		 push	 ecx
  00a4d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a52	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1598 : 		draw_2d_line (x - 0.0267, y - 0.0200, x - 0.0267, y + 0.0200, MFD_COLOUR1);

  00a57	b8 04 00 00 00	 mov	 eax, 4
  00a5c	6b c8 00	 imul	 ecx, eax, 0
  00a5f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a65	52		 push	 edx
  00a66	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00a6b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00a73	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a77	51		 push	 ecx
  00a78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a7d	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00a82	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9b573eab367a10
  00a8a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a8e	51		 push	 ecx
  00a8f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a94	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00a99	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00aa1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00aa5	51		 push	 ecx
  00aa6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aab	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00ab0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9b573eab367a10
  00ab8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00abc	51		 push	 ecx
  00abd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1599 : 		draw_2d_line (x + 0.0267, y - 0.0200, x + 0.0267, y + 0.0200, MFD_COLOUR1);

  00ac7	b8 04 00 00 00	 mov	 eax, 4
  00acc	6b c8 00	 imul	 ecx, eax, 0
  00acf	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ad5	52		 push	 edx
  00ad6	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00adb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00ae3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ae7	51		 push	 ecx
  00ae8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aed	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00af2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9b573eab367a10
  00afa	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00afe	51		 push	 ecx
  00aff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b04	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00b09	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00b11	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b15	51		 push	 ecx
  00b16	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b1b	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00b20	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9b573eab367a10
  00b28	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b2c	51		 push	 ecx
  00b2d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b32	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN3@draw_field:

; 1600 : 	}
; 1601 : }

  00b37	5f		 pop	 edi
  00b38	5e		 pop	 esi
  00b39	5b		 pop	 ebx
  00b3a	8b e5		 mov	 esp, ebp
  00b3c	5d		 pop	 ebp
  00b3d	c3		 ret	 0
?draw_field_of_regard_and_view_boxes@@YGXXZ ENDP	; draw_field_of_regard_and_view_boxes
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_heading_scale@@YGXM@Z
_TEXT	SEGMENT
tv209 = -144						; size = 4
tv206 = -144						; size = 4
tv167 = -144						; size = 4
_tick_type$ = -76					; size = 4
_int_heading_step_10$ = -72				; size = 4
_loop$ = -68						; size = 4
_mod_heading_step_10$ = -64				; size = 4
_heading_step_10$ = -60					; size = 4
_x$ = -56						; size = 4
_mfd_vp_x_max$ = -52					; size = 4
_mfd_vp_x_min$ = -48					; size = 4
_tick_datum_bottom$ = -44				; size = 4
_tick_datum_top$ = -40					; size = 4
_tick_30_deg_bottom$ = -36				; size = 4
_tick_30_deg_top$ = -32					; size = 4
_tick_10_deg_bottom$ = -28				; size = 4
_tick_10_deg_top$ = -24					; size = 4
_y_adjust$ = -20					; size = 4
_x_adjust_double$ = -16					; size = 4
_x_adjust_single$ = -12					; size = 4
_heading_tick_x_spacing$ = -8				; size = 4
_heading_width_ratio$ = -4				; size = 4
_heading$ = 8						; size = 4
?draw_heading_scale@@YGXM@Z PROC			; draw_heading_scale, COMDAT

; 1327 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1328 : 	float
; 1329 : 		heading_width_ratio,
; 1330 : 		heading_tick_x_spacing,
; 1331 : 		x_adjust_single,
; 1332 : 		x_adjust_double,
; 1333 : 		y_adjust,
; 1334 : 		tick_10_deg_top,
; 1335 : 		tick_10_deg_bottom,
; 1336 : 		tick_30_deg_top,
; 1337 : 		tick_30_deg_bottom,
; 1338 : 		tick_datum_top,
; 1339 : 		tick_datum_bottom,
; 1340 : 		mfd_vp_x_min,
; 1341 : 		mfd_vp_x_max,
; 1342 : 		x,
; 1343 : 		heading_step_10,
; 1344 : 		mod_heading_step_10;
; 1345 : 
; 1346 : 	int
; 1347 : 		loop,
; 1348 : 		int_heading_step_10,
; 1349 : 		tick_type;
; 1350 : 
; 1351 : 	//
; 1352 : 	// sort large and small mfd differences
; 1353 : 	//
; 1354 : 
; 1355 : 	if (draw_large_mfd)

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00013	0f 84 9b 00 00
	00		 je	 $LN7@draw_headi

; 1356 : 	{
; 1357 : 		set_mono_font_type (MONO_FONT_TYPE_5X9);

  00019	6a 02		 push	 2
  0001b	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1358 : 
; 1359 : 		heading_width_ratio		= 0.4;

  00020	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  00028	f3 0f 11 45 fc	 movss	 DWORD PTR _heading_width_ratio$[ebp], xmm0

; 1360 : 
; 1361 : 		heading_tick_x_spacing	= 0.4 / 6.5;

  0002d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d7c0fc1
  00035	f3 0f 11 45 f8	 movss	 DWORD PTR _heading_tick_x_spacing$[ebp], xmm0

; 1362 : 
; 1363 : 		x_adjust_single  			= -2.0;

  0003a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00042	f3 0f 11 45 f4	 movss	 DWORD PTR _x_adjust_single$[ebp], xmm0

; 1364 : 		x_adjust_double  			= -5.0;

  00047	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  0004f	f3 0f 11 45 f0	 movss	 DWORD PTR _x_adjust_double$[ebp], xmm0

; 1365 : 		y_adjust			  			= -8.0;

  00054	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  0005c	f3 0f 11 45 ec	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1366 : 
; 1367 : 		tick_10_deg_top			= 0.9375 - 0.015;

  00061	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6c28f6
  00069	f3 0f 11 45 e8	 movss	 DWORD PTR _tick_10_deg_top$[ebp], xmm0

; 1368 : 		tick_10_deg_bottom  		= 0.9375 - 0.015 - 0.045;

  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f60a3d7
  00076	f3 0f 11 45 e4	 movss	 DWORD PTR _tick_10_deg_bottom$[ebp], xmm0

; 1369 : 		tick_30_deg_top	  		= 0.9375;

  0007b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f700000
  00083	f3 0f 11 45 e0	 movss	 DWORD PTR _tick_30_deg_top$[ebp], xmm0

; 1370 : 		tick_30_deg_bottom  		= 0.9375 - 0.075;

  00088	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5ccccd
  00090	f3 0f 11 45 dc	 movss	 DWORD PTR _tick_30_deg_bottom$[ebp], xmm0

; 1371 : 		tick_datum_top		  		= 0.9375 - 0.075 - 0.010;

  00095	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5a3d71
  0009d	f3 0f 11 45 d8	 movss	 DWORD PTR _tick_datum_top$[ebp], xmm0

; 1372 : 		tick_datum_bottom	  		= 0.9375 - 0.075 - 0.010 - 0.045;

  000a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4eb852
  000aa	f3 0f 11 45 d4	 movss	 DWORD PTR _tick_datum_bottom$[ebp], xmm0

; 1373 : 	}
; 1374 : 	else

  000af	e9 96 00 00 00	 jmp	 $LN8@draw_headi
$LN7@draw_headi:

; 1375 : 	{
; 1376 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  000b4	6a 00		 push	 0
  000b6	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1377 : 
; 1378 : 		heading_width_ratio		= 0.3;

  000bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  000c3	f3 0f 11 45 fc	 movss	 DWORD PTR _heading_width_ratio$[ebp], xmm0

; 1379 : 
; 1380 : 		heading_tick_x_spacing	= 0.4 / 5.0;

  000c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  000d0	f3 0f 11 45 f8	 movss	 DWORD PTR _heading_tick_x_spacing$[ebp], xmm0

; 1381 : 
; 1382 : 		x_adjust_single			= -1.0;

  000d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000dd	f3 0f 11 45 f4	 movss	 DWORD PTR _x_adjust_single$[ebp], xmm0

; 1383 : 		x_adjust_double  			= -3.0;

  000e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  000ea	f3 0f 11 45 f0	 movss	 DWORD PTR _x_adjust_double$[ebp], xmm0

; 1384 : 		y_adjust			  			= -6.0;

  000ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  000f7	f3 0f 11 45 ec	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1385 : 
; 1386 : 		tick_10_deg_top  			= 0.875 - 0.015;

  000fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5c28f6
  00104	f3 0f 11 45 e8	 movss	 DWORD PTR _tick_10_deg_top$[ebp], xmm0

; 1387 : 		tick_10_deg_bottom 		= 0.875 - 0.015 - 0.045;

  00109	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f50a3d7
  00111	f3 0f 11 45 e4	 movss	 DWORD PTR _tick_10_deg_bottom$[ebp], xmm0

; 1388 : 		tick_30_deg_top	  		= 0.875;

  00116	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f600000
  0011e	f3 0f 11 45 e0	 movss	 DWORD PTR _tick_30_deg_top$[ebp], xmm0

; 1389 : 		tick_30_deg_bottom  		= 0.875 - 0.075;

  00123	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  0012b	f3 0f 11 45 dc	 movss	 DWORD PTR _tick_30_deg_bottom$[ebp], xmm0

; 1390 : 		tick_datum_top		  		= 0.875 - 0.075 - 0.010;

  00130	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4a3d71
  00138	f3 0f 11 45 d8	 movss	 DWORD PTR _tick_datum_top$[ebp], xmm0

; 1391 : 		tick_datum_bottom	  		= 0.875 - 0.075 - 0.010 - 0.045;

  0013d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3eb852
  00145	f3 0f 11 45 d4	 movss	 DWORD PTR _tick_datum_bottom$[ebp], xmm0
$LN8@draw_headi:

; 1392 : 	}
; 1393 : 
; 1394 : 	//
; 1395 : 	// adjust 2D environment for heading scale clipping
; 1396 : 	//
; 1397 : 	heading_width_ratio = 0.5;

  0014a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00152	f3 0f 11 45 fc	 movss	 DWORD PTR _heading_width_ratio$[ebp], xmm0

; 1398 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN * heading_width_ratio, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX * heading_width_ratio, MFD_WINDOW_Y_MAX);

  00157	51		 push	 ecx
  00158	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  00160	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00165	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _heading_width_ratio$[ebp]
  0016a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff199999999999a
  00172	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00176	51		 push	 ecx
  00177	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017c	51		 push	 ecx
  0017d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  00185	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018a	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _heading_width_ratio$[ebp]
  0018f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff199999999999a
  00197	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0019b	51		 push	 ecx
  0019c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001a6	50		 push	 eax
  001a7	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 1399 : 
; 1400 : 	mfd_vp_x_min = mfd_viewport_x_org - (mfd_viewport_size * (heading_width_ratio * 0.5));

  001ac	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  001b4	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  001bc	f3 0f 5a 55 fc	 cvtss2sd xmm2, DWORD PTR _heading_width_ratio$[ebp]
  001c1	f2 0f 59 15 00
	00 00 00	 mulsd	 xmm2, QWORD PTR __real@3fe0000000000000
  001c9	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  001cd	f2 0f 5c c1	 subsd	 xmm0, xmm1
  001d1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001d5	f3 0f 11 45 d0	 movss	 DWORD PTR _mfd_vp_x_min$[ebp], xmm0

; 1401 : 
; 1402 : 	mfd_vp_x_max = mfd_viewport_x_org + (mfd_viewport_size * (heading_width_ratio * 0.5)) - 0.001;

  001da	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  001e2	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  001ea	f3 0f 5a 55 fc	 cvtss2sd xmm2, DWORD PTR _heading_width_ratio$[ebp]
  001ef	f2 0f 59 15 00
	00 00 00	 mulsd	 xmm2, QWORD PTR __real@3fe0000000000000
  001f7	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  001fb	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001ff	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00207	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0020b	f3 0f 11 45 cc	 movss	 DWORD PTR _mfd_vp_x_max$[ebp], xmm0

; 1403 : 
; 1404 : 	set_2d_viewport (mfd_env, mfd_vp_x_min, mfd_viewport_y_min, mfd_vp_x_max, mfd_viewport_y_max);

  00210	51		 push	 ecx
  00211	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00219	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021e	51		 push	 ecx
  0021f	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _mfd_vp_x_max$[ebp]
  00224	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00229	51		 push	 ecx
  0022a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00232	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00237	51		 push	 ecx
  00238	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _mfd_vp_x_min$[ebp]
  0023d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00242	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00247	50		 push	 eax
  00248	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1405 : 
; 1406 : 	//
; 1407 : 	// draw heading datum tick
; 1408 : 	//
; 1409 : 
; 1410 : 	draw_2d_line (0.0, tick_datum_top, 0.0, tick_datum_bottom, MFD_COLOUR1);

  0024d	b8 04 00 00 00	 mov	 eax, 4
  00252	6b c8 00	 imul	 ecx, eax, 0
  00255	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0025b	52		 push	 edx
  0025c	51		 push	 ecx
  0025d	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _tick_datum_bottom$[ebp]
  00262	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00267	51		 push	 ecx
  00268	0f 57 c0	 xorps	 xmm0, xmm0
  0026b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00270	51		 push	 ecx
  00271	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _tick_datum_top$[ebp]
  00276	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027b	51		 push	 ecx
  0027c	0f 57 c0	 xorps	 xmm0, xmm0
  0027f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00284	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1411 : 
; 1412 : 	//
; 1413 : 	// draw heading scale
; 1414 : 	//
; 1415 : 
; 1416 : 	heading_step_10 = deg (heading * 0.1);

  00289	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _heading$[ebp]
  0028e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00296	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@404ca5dc00000000
  0029e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002a2	f3 0f 11 45 c4	 movss	 DWORD PTR _heading_step_10$[ebp], xmm0

; 1417 : 
; 1418 : 	int_heading_step_10 = (int) heading_step_10;

  002a7	f3 0f 2c 45 c4	 cvttss2si eax, DWORD PTR _heading_step_10$[ebp]
  002ac	89 45 b8	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax

; 1419 : 
; 1420 : 	mod_heading_step_10 = heading_step_10 - (float) int_heading_step_10;

  002af	f3 0f 2a 45 b8	 cvtsi2ss xmm0, DWORD PTR _int_heading_step_10$[ebp]
  002b4	f3 0f 10 4d c4	 movss	 xmm1, DWORD PTR _heading_step_10$[ebp]
  002b9	f3 0f 5c c8	 subss	 xmm1, xmm0
  002bd	f3 0f 11 4d c0	 movss	 DWORD PTR _mod_heading_step_10$[ebp], xmm1

; 1421 : 
; 1422 : 	int_heading_step_10 -= 10;

  002c2	8b 45 b8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  002c5	83 e8 0a	 sub	 eax, 10			; 0000000aH
  002c8	89 45 b8	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax

; 1423 : 
; 1424 : 	if (int_heading_step_10 < 0)

  002cb	79 09		 jns	 SHORT $LN9@draw_headi

; 1425 : 	{
; 1426 : 		int_heading_step_10 += 36;

  002cd	8b 45 b8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  002d0	83 c0 24	 add	 eax, 36			; 00000024H
  002d3	89 45 b8	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax
$LN9@draw_headi:

; 1427 : 	}
; 1428 : 
; 1429 : 	// tick type:-
; 1430 : 	//
; 1431 : 	//		0 = long tick (30 degs)
; 1432 : 	//		1 = short tick (10 degs)
; 1433 : 	//		2 = short tick (20 degs)
; 1434 : 
; 1435 : 	tick_type = int_heading_step_10 % 3;

  002d6	8b 45 b8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  002d9	99		 cdq
  002da	b9 03 00 00 00	 mov	 ecx, 3
  002df	f7 f9		 idiv	 ecx
  002e1	89 55 b4	 mov	 DWORD PTR _tick_type$[ebp], edx

; 1436 : 
; 1437 : 	x = - (10.0 + mod_heading_step_10) * heading_tick_x_spacing;

  002e4	f3 0f 5a 45 c0	 cvtss2sd xmm0, DWORD PTR _mod_heading_step_10$[ebp]
  002e9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4024000000000000
  002f1	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  002f8	f3 0f 5a 4d f8	 cvtss2sd xmm1, DWORD PTR _heading_tick_x_spacing$[ebp]
  002fd	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00301	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00305	f3 0f 11 45 c8	 movss	 DWORD PTR _x$[ebp], xmm0

; 1438 : 
; 1439 : 	for (loop = 0; loop <= 20; loop++)

  0030a	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  00311	eb 09		 jmp	 SHORT $LN4@draw_headi
$LN2@draw_headi:
  00313	8b 45 bc	 mov	 eax, DWORD PTR _loop$[ebp]
  00316	83 c0 01	 add	 eax, 1
  00319	89 45 bc	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@draw_headi:
  0031c	83 7d bc 14	 cmp	 DWORD PTR _loop$[ebp], 20 ; 00000014H
  00320	0f 8f 4a 02 00
	00		 jg	 $LN3@draw_headi

; 1440 : 	{
; 1441 : 		if (tick_type == 0)

  00326	83 7d b4 00	 cmp	 DWORD PTR _tick_type$[ebp], 0
  0032a	0f 85 92 01 00
	00		 jne	 $LN10@draw_headi

; 1442 : 		{
; 1443 : 			draw_2d_line (x, tick_30_deg_top, x, tick_30_deg_bottom, MFD_COLOUR1);

  00330	b8 04 00 00 00	 mov	 eax, 4
  00335	6b c8 00	 imul	 ecx, eax, 0
  00338	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0033e	52		 push	 edx
  0033f	51		 push	 ecx
  00340	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _tick_30_deg_bottom$[ebp]
  00345	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034a	51		 push	 ecx
  0034b	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00350	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00355	51		 push	 ecx
  00356	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _tick_30_deg_top$[ebp]
  0035b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00360	51		 push	 ecx
  00361	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00366	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1444 : 
; 1445 : 			set_2d_mono_font_position (x, tick_30_deg_top);

  00370	51		 push	 ecx
  00371	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _tick_30_deg_top$[ebp]
  00376	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037b	51		 push	 ecx
  0037c	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00381	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00386	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1446 : 
; 1447 : 			switch (int_heading_step_10)

  0038b	8b 45 b8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  0038e	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv167[ebp], eax
  00394	83 bd 70 ff ff
	ff 1b		 cmp	 DWORD PTR tv167[ebp], 27 ; 0000001bH
  0039b	0f 87 ad 00 00
	00		 ja	 $LN16@draw_headi
  003a1	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR tv167[ebp]
  003a7	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN24@draw_headi[ecx]
  003ae	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN25@draw_headi[edx*4]
$LN12@draw_headi:

; 1448 : 			{
; 1449 : 				////////////////////////////////////////
; 1450 : 				case 0:
; 1451 : 				////////////////////////////////////////
; 1452 : 				{
; 1453 : 					set_mono_font_rel_position (x_adjust_single, y_adjust);

  003b5	51		 push	 ecx
  003b6	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  003bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c0	51		 push	 ecx
  003c1	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  003c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003cb	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1454 : 
; 1455 : 					print_mono_font_char ('N');

  003d0	6a 4e		 push	 78			; 0000004eH
  003d2	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 1456 : 
; 1457 : 					break;

  003d7	e9 e4 00 00 00	 jmp	 $LN5@draw_headi
$LN13@draw_headi:

; 1458 : 				}
; 1459 : 				////////////////////////////////////////
; 1460 : 				case 9:
; 1461 : 				////////////////////////////////////////
; 1462 : 				{
; 1463 : 					set_mono_font_rel_position (x_adjust_single, y_adjust);

  003dc	51		 push	 ecx
  003dd	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  003e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e7	51		 push	 ecx
  003e8	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  003ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1464 : 
; 1465 : 					print_mono_font_char ('E');

  003f7	6a 45		 push	 69			; 00000045H
  003f9	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 1466 : 
; 1467 : 					break;

  003fe	e9 bd 00 00 00	 jmp	 $LN5@draw_headi
$LN14@draw_headi:

; 1468 : 				}
; 1469 : 				////////////////////////////////////////
; 1470 : 				case 18:
; 1471 : 				////////////////////////////////////////
; 1472 : 				{
; 1473 : 					set_mono_font_rel_position (x_adjust_single, y_adjust);

  00403	51		 push	 ecx
  00404	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00409	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040e	51		 push	 ecx
  0040f	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  00414	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00419	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1474 : 
; 1475 : 					print_mono_font_char ('S');

  0041e	6a 53		 push	 83			; 00000053H
  00420	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 1476 : 
; 1477 : 					break;

  00425	e9 96 00 00 00	 jmp	 $LN5@draw_headi
$LN15@draw_headi:

; 1478 : 				}
; 1479 : 				////////////////////////////////////////
; 1480 : 				case 27:
; 1481 : 				////////////////////////////////////////
; 1482 : 				{
; 1483 : 					set_mono_font_rel_position (x_adjust_single, y_adjust);

  0042a	51		 push	 ecx
  0042b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00430	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00435	51		 push	 ecx
  00436	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  0043b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00440	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1484 : 
; 1485 : 					print_mono_font_char ('W');

  00445	6a 57		 push	 87			; 00000057H
  00447	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 1486 : 
; 1487 : 					break;

  0044c	eb 72		 jmp	 SHORT $LN5@draw_headi
$LN16@draw_headi:

; 1488 : 				}
; 1489 : 				////////////////////////////////////////
; 1490 : 				default:
; 1491 : 				////////////////////////////////////////
; 1492 : 				{
; 1493 : 					if (int_heading_step_10 < 10)

  0044e	83 7d b8 0a	 cmp	 DWORD PTR _int_heading_step_10$[ebp], 10 ; 0000000aH
  00452	7d 29		 jge	 SHORT $LN17@draw_headi

; 1494 : 					{
; 1495 : 						set_mono_font_rel_position (x_adjust_single, y_adjust);

  00454	51		 push	 ecx
  00455	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0045a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0045f	51		 push	 ecx
  00460	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  00465	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1496 : 
; 1497 : 						print_mono_font_char ('0' + int_heading_step_10);

  0046f	8b 45 b8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  00472	83 c0 30	 add	 eax, 48			; 00000030H
  00475	50		 push	 eax
  00476	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 1498 : 					}
; 1499 : 					else

  0047b	eb 43		 jmp	 SHORT $LN18@draw_headi
$LN17@draw_headi:

; 1500 : 					{
; 1501 : 						set_mono_font_rel_position (x_adjust_double, y_adjust);

  0047d	51		 push	 ecx
  0047e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00483	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00488	51		 push	 ecx
  00489	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x_adjust_double$[ebp]
  0048e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00493	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1502 : 
; 1503 : 						print_mono_font_char ('0' + int_heading_step_10 / 10);

  00498	8b 45 b8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  0049b	99		 cdq
  0049c	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  004a1	f7 f9		 idiv	 ecx
  004a3	83 c0 30	 add	 eax, 48			; 00000030H
  004a6	50		 push	 eax
  004a7	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 1504 : 
; 1505 : 						print_mono_font_char ('0' + int_heading_step_10 % 10);

  004ac	8b 45 b8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  004af	99		 cdq
  004b0	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  004b5	f7 f9		 idiv	 ecx
  004b7	83 c2 30	 add	 edx, 48			; 00000030H
  004ba	52		 push	 edx
  004bb	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char
$LN18@draw_headi:
$LN5@draw_headi:

; 1506 : 					}
; 1507 : 
; 1508 : 					break;
; 1509 : 				}
; 1510 : 			}
; 1511 : 		}
; 1512 : 		else

  004c0	eb 40		 jmp	 SHORT $LN11@draw_headi
$LN10@draw_headi:

; 1513 : 		{
; 1514 : 			draw_2d_line (x, tick_10_deg_top, x, tick_10_deg_bottom, MFD_COLOUR1);

  004c2	b8 04 00 00 00	 mov	 eax, 4
  004c7	6b c8 00	 imul	 ecx, eax, 0
  004ca	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004d0	52		 push	 edx
  004d1	51		 push	 ecx
  004d2	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _tick_10_deg_bottom$[ebp]
  004d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004dc	51		 push	 ecx
  004dd	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  004e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e7	51		 push	 ecx
  004e8	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _tick_10_deg_top$[ebp]
  004ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f2	51		 push	 ecx
  004f3	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  004f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN11@draw_headi:

; 1515 : 		}
; 1516 : 
; 1517 : 		int_heading_step_10 = (++int_heading_step_10 == 36) ? 0 : int_heading_step_10;

  00502	8b 45 b8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  00505	83 c0 01	 add	 eax, 1
  00508	89 45 b8	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax
  0050b	83 7d b8 24	 cmp	 DWORD PTR _int_heading_step_10$[ebp], 36 ; 00000024H
  0050f	75 0c		 jne	 SHORT $LN20@draw_headi
  00511	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv206[ebp], 0
  0051b	eb 09		 jmp	 SHORT $LN21@draw_headi
$LN20@draw_headi:
  0051d	8b 4d b8	 mov	 ecx, DWORD PTR _int_heading_step_10$[ebp]
  00520	89 8d 70 ff ff
	ff		 mov	 DWORD PTR tv206[ebp], ecx
$LN21@draw_headi:
  00526	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR tv206[ebp]
  0052c	89 55 b8	 mov	 DWORD PTR _int_heading_step_10$[ebp], edx

; 1518 : 
; 1519 : 		tick_type = (++tick_type == 3) ? 0 : tick_type;

  0052f	8b 45 b4	 mov	 eax, DWORD PTR _tick_type$[ebp]
  00532	83 c0 01	 add	 eax, 1
  00535	89 45 b4	 mov	 DWORD PTR _tick_type$[ebp], eax
  00538	83 7d b4 03	 cmp	 DWORD PTR _tick_type$[ebp], 3
  0053c	75 0c		 jne	 SHORT $LN22@draw_headi
  0053e	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv209[ebp], 0
  00548	eb 09		 jmp	 SHORT $LN23@draw_headi
$LN22@draw_headi:
  0054a	8b 4d b4	 mov	 ecx, DWORD PTR _tick_type$[ebp]
  0054d	89 8d 70 ff ff
	ff		 mov	 DWORD PTR tv209[ebp], ecx
$LN23@draw_headi:
  00553	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR tv209[ebp]
  00559	89 55 b4	 mov	 DWORD PTR _tick_type$[ebp], edx

; 1520 : 
; 1521 : 		x += heading_tick_x_spacing;

  0055c	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00561	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _heading_tick_x_spacing$[ebp]
  00566	f3 0f 11 45 c8	 movss	 DWORD PTR _x$[ebp], xmm0

; 1522 : 	}

  0056b	e9 a3 fd ff ff	 jmp	 $LN2@draw_headi
$LN3@draw_headi:

; 1523 : 
; 1524 : 	//
; 1525 : 	// restore 2D environment
; 1526 : 	//
; 1527 : 
; 1528 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  00570	51		 push	 ecx
  00571	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  00579	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057e	51		 push	 ecx
  0057f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  00587	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0058c	51		 push	 ecx
  0058d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  00595	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059a	51		 push	 ecx
  0059b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  005a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  005ad	50		 push	 eax
  005ae	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 1529 : 
; 1530 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  005b3	51		 push	 ecx
  005b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  005bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c1	51		 push	 ecx
  005c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  005ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005cf	51		 push	 ecx
  005d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  005d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005dd	51		 push	 ecx
  005de	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  005e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  005f0	50		 push	 eax
  005f1	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1531 : }

  005f6	5f		 pop	 edi
  005f7	5e		 pop	 esi
  005f8	5b		 pop	 ebx
  005f9	8b e5		 mov	 esp, ebp
  005fb	5d		 pop	 ebp
  005fc	c2 04 00	 ret	 4
  005ff	90		 npad	 1
$LN25@draw_headi:
  00600	00 00 00 00	 DD	 $LN12@draw_headi
  00604	00 00 00 00	 DD	 $LN13@draw_headi
  00608	00 00 00 00	 DD	 $LN14@draw_headi
  0060c	00 00 00 00	 DD	 $LN15@draw_headi
  00610	00 00 00 00	 DD	 $LN16@draw_headi
$LN24@draw_headi:
  00614	00		 DB	 0
  00615	04		 DB	 4
  00616	04		 DB	 4
  00617	04		 DB	 4
  00618	04		 DB	 4
  00619	04		 DB	 4
  0061a	04		 DB	 4
  0061b	04		 DB	 4
  0061c	04		 DB	 4
  0061d	01		 DB	 1
  0061e	04		 DB	 4
  0061f	04		 DB	 4
  00620	04		 DB	 4
  00621	04		 DB	 4
  00622	04		 DB	 4
  00623	04		 DB	 4
  00624	04		 DB	 4
  00625	04		 DB	 4
  00626	02		 DB	 2
  00627	04		 DB	 4
  00628	04		 DB	 4
  00629	04		 DB	 4
  0062a	04		 DB	 4
  0062b	04		 DB	 4
  0062c	04		 DB	 4
  0062d	04		 DB	 4
  0062e	04		 DB	 4
  0062f	03		 DB	 3
?draw_heading_scale@@YGXM@Z ENDP			; draw_heading_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_damaged_mfd@@YGXXZ
_TEXT	SEGMENT
_y$ = -36						; size = 4
_x_right$ = -32						; size = 4
_x_left$ = -28						; size = 4
_x_delta$ = -24						; size = 4
_x_centre$ = -20					; size = 4
_col$ = -16						; size = 4
_i$ = -12						; size = 4
_max_lines$ = -8					; size = 4
_count$ = -4						; size = 4
?draw_damaged_mfd@@YGXXZ PROC				; draw_damaged_mfd, COMDAT

; 1266 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1267 : 	int
; 1268 : 		count,
; 1269 : 		max_lines,
; 1270 : 		i;
; 1271 : 
; 1272 : 	rgb_colour
; 1273 : 		col;
; 1274 : 
; 1275 : 	float
; 1276 : 		x_centre,
; 1277 : 		x_delta,
; 1278 : 		x_left,
; 1279 : 		x_right,
; 1280 : 		y;
; 1281 : 
; 1282 : 	col.r = 0;

  00009	c6 45 f2 00	 mov	 BYTE PTR _col$[ebp+2], 0

; 1283 : 	col.g = 0;

  0000d	c6 45 f1 00	 mov	 BYTE PTR _col$[ebp+1], 0

; 1284 : 	col.b = 0;

  00011	c6 45 f0 00	 mov	 BYTE PTR _col$[ebp], 0

; 1285 : 	col.a = 255;

  00015	c6 45 f3 ff	 mov	 BYTE PTR _col$[ebp+3], 255 ; 000000ffH

; 1286 : 
; 1287 : 	if (draw_large_mfd)

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00020	74 09		 je	 SHORT $LN5@draw_damag

; 1288 : 	{
; 1289 : 		max_lines = 150;

  00022	c7 45 f8 96 00
	00 00		 mov	 DWORD PTR _max_lines$[ebp], 150 ; 00000096H

; 1290 : 	}
; 1291 : 	else

  00029	eb 07		 jmp	 SHORT $LN6@draw_damag
$LN5@draw_damag:

; 1292 : 	{
; 1293 : 		max_lines = 75;

  0002b	c7 45 f8 4b 00
	00 00		 mov	 DWORD PTR _max_lines$[ebp], 75 ; 0000004bH
$LN6@draw_damag:

; 1294 : 	}
; 1295 : 
; 1296 : 	for (count = 0; count < max_lines; count++)

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00039	eb 09		 jmp	 SHORT $LN4@draw_damag
$LN2@draw_damag:
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0003e	83 c0 01	 add	 eax, 1
  00041	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@draw_damag:
  00044	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00047	3b 45 f8	 cmp	 eax, DWORD PTR _max_lines$[ebp]
  0004a	0f 8d 71 01 00
	00		 jge	 $LN3@draw_damag

; 1297 : 	{
; 1298 : 		convert_float_to_int (frand1 () * 127.0, &i);

  00050	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  0005a	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0005f	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00064	8d 4d f4	 lea	 ecx, DWORD PTR _i$[ebp]
  00067	51		 push	 ecx
  00068	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  0006e	c1 fa 10	 sar	 edx, 16			; 00000010H
  00071	81 e2 ff 7f 00
	00		 and	 edx, 32767		; 00007fffH
  00077	f2 0f 2a c2	 cvtsi2sd xmm0, edx
  0007b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00083	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@405fc00000000000
  0008b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0008f	51		 push	 ecx
  00090	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00095	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 1299 : 
; 1300 : 		col.g = i + 128;

  0009a	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0009d	05 80 00 00 00	 add	 eax, 128		; 00000080H
  000a2	88 45 f1	 mov	 BYTE PTR _col$[ebp+1], al

; 1301 : 
; 1302 : 		x_centre = sfrand1 ();

  000a5	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  000af	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000b4	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  000b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  000bf	c1 f9 10	 sar	 ecx, 16			; 00000010H
  000c2	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  000c8	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  000ce	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  000d2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  000da	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000de	f3 0f 11 45 ec	 movss	 DWORD PTR _x_centre$[ebp], xmm0

; 1303 : 
; 1304 : 		x_delta = (frand1 () * 0.5) + 0.25;

  000e3	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  000ed	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000f2	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  000f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  000fd	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00100	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00106	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  0010a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00112	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0011a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  00122	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00126	f3 0f 11 45 e8	 movss	 DWORD PTR _x_delta$[ebp], xmm0

; 1305 : 
; 1306 : 		x_left = x_centre - x_delta;

  0012b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  00130	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _x_delta$[ebp]
  00135	f3 0f 11 45 e4	 movss	 DWORD PTR _x_left$[ebp], xmm0

; 1307 : 
; 1308 : 		x_right = x_centre + x_delta;

  0013a	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  0013f	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _x_delta$[ebp]
  00144	f3 0f 11 45 e0	 movss	 DWORD PTR _x_right$[ebp], xmm0

; 1309 : 
; 1310 : 		y = sfrand1 ();

  00149	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00153	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00158	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  0015d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00163	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00166	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  0016c	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  00172	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00176	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  0017e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00182	f3 0f 11 45 dc	 movss	 DWORD PTR _y$[ebp], xmm0

; 1311 : 
; 1312 : 		draw_2d_line (x_left, y, x_right, y, col);

  00187	8b 45 f0	 mov	 eax, DWORD PTR _col$[ebp]
  0018a	50		 push	 eax
  0018b	51		 push	 ecx
  0018c	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y$[ebp]
  00191	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00196	51		 push	 ecx
  00197	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x_right$[ebp]
  0019c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a1	51		 push	 ecx
  001a2	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y$[ebp]
  001a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ac	51		 push	 ecx
  001ad	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x_left$[ebp]
  001b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1313 : 	}

  001bc	e9 7a fe ff ff	 jmp	 $LN2@draw_damag
$LN3@draw_damag:

; 1314 : }

  001c1	5f		 pop	 edi
  001c2	5e		 pop	 esi
  001c3	5b		 pop	 ebx
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
?draw_damaged_mfd@@YGXXZ ENDP				; draw_damaged_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_layout_grid@@YGXXZ
_TEXT	SEGMENT
_y$ = -8						; size = 4
_x$ = -4						; size = 4
?draw_layout_grid@@YGXXZ PROC				; draw_layout_grid, COMDAT

; 1236 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1237 : 	float
; 1238 : 		x,
; 1239 : 		y;
; 1240 : 
; 1241 : 	if (display_mfd_layout_grid)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?display_mfd_layout_grid@@3HA, 0 ; display_mfd_layout_grid
  00010	0f 84 ee 00 00
	00		 je	 $LN6@draw_layou

; 1242 : 	{
; 1243 : 		for (x = -1.0; x <= 1.0; x += 0.1)

  00016	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0001e	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0
  00023	eb 16		 jmp	 SHORT $LN4@draw_layou
$LN2@draw_layou:
  00025	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0002a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00032	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00036	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0
$LN4@draw_layou:
  0003b	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00040	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00048	66 0f 2f c8	 comisd	 xmm1, xmm0
  0004c	72 3f		 jb	 SHORT $LN3@draw_layou

; 1244 : 		{
; 1245 : 			draw_2d_line (x, -1.0, x, 1.0, sys_col_red);

  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  00053	50		 push	 eax
  00054	51		 push	 ecx
  00055	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0005d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00062	51		 push	 ecx
  00063	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00068	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006d	51		 push	 ecx
  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00076	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007b	51		 push	 ecx
  0007c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00081	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00086	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1246 : 		}

  0008b	eb 98		 jmp	 SHORT $LN2@draw_layou
$LN3@draw_layou:

; 1247 : 
; 1248 : 		for (y = -1.0; y <= 1.0; y += 0.1)

  0008d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00095	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0
  0009a	eb 16		 jmp	 SHORT $LN7@draw_layou
$LN5@draw_layou:
  0009c	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  000a1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  000a9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ad	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0
$LN7@draw_layou:
  000b2	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  000b7	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000bf	66 0f 2f c8	 comisd	 xmm1, xmm0
  000c3	72 3f		 jb	 SHORT $LN6@draw_layou

; 1249 : 		{
; 1250 : 			draw_2d_line (-1.0, y, 1.0, y, sys_col_red);

  000c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  000ca	50		 push	 eax
  000cb	51		 push	 ecx
  000cc	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d6	51		 push	 ecx
  000d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e4	51		 push	 ecx
  000e5	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ef	51		 push	 ecx
  000f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1251 : 		}

  00102	eb 98		 jmp	 SHORT $LN5@draw_layou
$LN6@draw_layou:

; 1252 : 	}
; 1253 : }

  00104	5f		 pop	 edi
  00105	5e		 pop	 esi
  00106	5b		 pop	 ebx
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c3		 ret	 0
?draw_layout_grid@@YGXXZ ENDP				; draw_layout_grid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_bordered_box@@YGXMMMMUREAL_COLOUR@@0@Z
_TEXT	SEGMENT
_inner_y2$ = -32					; size = 4
_inner_y1$ = -28					; size = 4
_inner_x2$ = -24					; size = 4
_inner_x1$ = -20					; size = 4
_y2$ = -16						; size = 4
_y1$ = -12						; size = 4
_x2$ = -8						; size = 4
_x1$ = -4						; size = 4
_x1_c$ = 8						; size = 4
_y1_c$ = 12						; size = 4
_x2_c$ = 16						; size = 4
_y2_c$ = 20						; size = 4
_fill_colour$ = 24					; size = 4
_border_colour$ = 28					; size = 4
?draw_bordered_box@@YGXMMMMUREAL_COLOUR@@0@Z PROC	; draw_bordered_box, COMDAT

; 7386 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7387 : 	int x1, x2, y1, y2;
; 7388 : 	int inner_x1, inner_x2, inner_y1, inner_y2;
; 7389 : 	
; 7390 : 	get_2d_int_screen_coordinates (min(x1_c, x2_c), max(y1_c, y2_c), &x1, &y1);

  00009	8d 45 f4	 lea	 eax, DWORD PTR _y1$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  00010	51		 push	 ecx
  00011	8d 55 14	 lea	 edx, DWORD PTR _y2_c$[ebp]
  00014	52		 push	 edx
  00015	8d 45 0c	 lea	 eax, DWORD PTR _y1_c$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0001e	51		 push	 ecx
  0001f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00023	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00028	8d 4d 10	 lea	 ecx, DWORD PTR _x2_c$[ebp]
  0002b	51		 push	 ecx
  0002c	8d 55 08	 lea	 edx, DWORD PTR _x1_c$[ebp]
  0002f	52		 push	 edx
  00030	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00035	51		 push	 ecx
  00036	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0003a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003f	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 7391 : 	get_2d_int_screen_coordinates (max(x1_c, x2_c), min(y1_c, y2_c), &x2, &y2);

  00044	8d 45 f0	 lea	 eax, DWORD PTR _y2$[ebp]
  00047	50		 push	 eax
  00048	8d 4d f8	 lea	 ecx, DWORD PTR _x2$[ebp]
  0004b	51		 push	 ecx
  0004c	8d 55 14	 lea	 edx, DWORD PTR _y2_c$[ebp]
  0004f	52		 push	 edx
  00050	8d 45 0c	 lea	 eax, DWORD PTR _y1_c$[ebp]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00059	51		 push	 ecx
  0005a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0005e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00063	8d 4d 10	 lea	 ecx, DWORD PTR _x2_c$[ebp]
  00066	51		 push	 ecx
  00067	8d 55 08	 lea	 edx, DWORD PTR _x1_c$[ebp]
  0006a	52		 push	 edx
  0006b	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00070	51		 push	 ecx
  00071	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00075	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007a	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 7392 : 	
; 7393 : 	inner_x1 = x1+1;

  0007f	8b 45 fc	 mov	 eax, DWORD PTR _x1$[ebp]
  00082	83 c0 01	 add	 eax, 1
  00085	89 45 ec	 mov	 DWORD PTR _inner_x1$[ebp], eax

; 7394 : 	inner_x2 = x2-1;

  00088	8b 45 f8	 mov	 eax, DWORD PTR _x2$[ebp]
  0008b	83 e8 01	 sub	 eax, 1
  0008e	89 45 e8	 mov	 DWORD PTR _inner_x2$[ebp], eax

; 7395 : 	inner_y1 = y1+1;

  00091	8b 45 f4	 mov	 eax, DWORD PTR _y1$[ebp]
  00094	83 c0 01	 add	 eax, 1
  00097	89 45 e4	 mov	 DWORD PTR _inner_y1$[ebp], eax

; 7396 : 	inner_y2 = y2-1;

  0009a	8b 45 f0	 mov	 eax, DWORD PTR _y2$[ebp]
  0009d	83 e8 01	 sub	 eax, 1
  000a0	89 45 e0	 mov	 DWORD PTR _inner_y2$[ebp], eax

; 7397 : 
; 7398 : 	if (inner_x1 < inner_x2 && inner_y1 < inner_y2)

  000a3	8b 45 ec	 mov	 eax, DWORD PTR _inner_x1$[ebp]
  000a6	3b 45 e8	 cmp	 eax, DWORD PTR _inner_x2$[ebp]
  000a9	7d 25		 jge	 SHORT $LN2@draw_borde
  000ab	8b 45 e4	 mov	 eax, DWORD PTR _inner_y1$[ebp]
  000ae	3b 45 e0	 cmp	 eax, DWORD PTR _inner_y2$[ebp]
  000b1	7d 1d		 jge	 SHORT $LN2@draw_borde

; 7399 : 		set_block(inner_x1 * 2, inner_y1, inner_x2 * 2, inner_y2, fill_colour);

  000b3	8b 45 18	 mov	 eax, DWORD PTR _fill_colour$[ebp]
  000b6	50		 push	 eax
  000b7	8b 4d e0	 mov	 ecx, DWORD PTR _inner_y2$[ebp]
  000ba	51		 push	 ecx
  000bb	8b 55 e8	 mov	 edx, DWORD PTR _inner_x2$[ebp]
  000be	d1 e2		 shl	 edx, 1
  000c0	52		 push	 edx
  000c1	8b 45 e4	 mov	 eax, DWORD PTR _inner_y1$[ebp]
  000c4	50		 push	 eax
  000c5	8b 4d ec	 mov	 ecx, DWORD PTR _inner_x1$[ebp]
  000c8	d1 e1		 shl	 ecx, 1
  000ca	51		 push	 ecx
  000cb	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block
$LN2@draw_borde:

; 7400 : 
; 7401 : 	draw_line(x1, y1, x2, y1, border_colour);

  000d0	8b 45 1c	 mov	 eax, DWORD PTR _border_colour$[ebp]
  000d3	50		 push	 eax
  000d4	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _y1$[ebp]
  000d9	51		 push	 ecx
  000da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000df	f3 0f 2a 45 f8	 cvtsi2ss xmm0, DWORD PTR _x2$[ebp]
  000e4	51		 push	 ecx
  000e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ea	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _y1$[ebp]
  000ef	51		 push	 ecx
  000f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f5	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _x1$[ebp]
  000fa	51		 push	 ecx
  000fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00100	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7402 : 	draw_line(x1, y1, x1, y2, border_colour);

  00105	8b 45 1c	 mov	 eax, DWORD PTR _border_colour$[ebp]
  00108	50		 push	 eax
  00109	f3 0f 2a 45 f0	 cvtsi2ss xmm0, DWORD PTR _y2$[ebp]
  0010e	51		 push	 ecx
  0010f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00114	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _x1$[ebp]
  00119	51		 push	 ecx
  0011a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011f	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _y1$[ebp]
  00124	51		 push	 ecx
  00125	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012a	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _x1$[ebp]
  0012f	51		 push	 ecx
  00130	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00135	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7403 : 	draw_line(x1, y2, x2, y2, border_colour);

  0013a	8b 45 1c	 mov	 eax, DWORD PTR _border_colour$[ebp]
  0013d	50		 push	 eax
  0013e	f3 0f 2a 45 f0	 cvtsi2ss xmm0, DWORD PTR _y2$[ebp]
  00143	51		 push	 ecx
  00144	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00149	f3 0f 2a 45 f8	 cvtsi2ss xmm0, DWORD PTR _x2$[ebp]
  0014e	51		 push	 ecx
  0014f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00154	f3 0f 2a 45 f0	 cvtsi2ss xmm0, DWORD PTR _y2$[ebp]
  00159	51		 push	 ecx
  0015a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015f	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _x1$[ebp]
  00164	51		 push	 ecx
  00165	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016a	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7404 : 	draw_line(x2, y1, x2, y2, border_colour);

  0016f	8b 45 1c	 mov	 eax, DWORD PTR _border_colour$[ebp]
  00172	50		 push	 eax
  00173	f3 0f 2a 45 f0	 cvtsi2ss xmm0, DWORD PTR _y2$[ebp]
  00178	51		 push	 ecx
  00179	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017e	f3 0f 2a 45 f8	 cvtsi2ss xmm0, DWORD PTR _x2$[ebp]
  00183	51		 push	 ecx
  00184	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00189	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _y1$[ebp]
  0018e	51		 push	 ecx
  0018f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00194	f3 0f 2a 45 f8	 cvtsi2ss xmm0, DWORD PTR _x2$[ebp]
  00199	51		 push	 ecx
  0019a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019f	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7405 : }

  001a4	5f		 pop	 edi
  001a5	5e		 pop	 esi
  001a6	5b		 pop	 ebx
  001a7	8b e5		 mov	 esp, ebp
  001a9	5d		 pop	 ebp
  001aa	c2 18 00	 ret	 24			; 00000018H
?draw_bordered_box@@YGXMMMMUREAL_COLOUR@@0@Z ENDP	; draw_bordered_box
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_y_max$1 = -32						; size = 4
_y_min$2 = -28						; size = 4
_x_max$3 = -24						; size = 4
_x_min$4 = -20						; size = 4
_y2$ = -16						; size = 4
_y1$ = -12						; size = 4
_x2$ = -8						; size = 4
_x1$ = -4						; size = 4
_x1_c$ = 8						; size = 4
_y1_c$ = 12						; size = 4
_x2_c$ = 16						; size = 4
_y2_c$ = 20						; size = 4
_filled$ = 24						; size = 4
_colour$ = 28						; size = 4
?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z PROC		; draw_box, COMDAT

; 7408 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7409 : 	float x1, x2, y1, y2;
; 7410 : 	
; 7411 : 	get_2d_float_screen_coordinates (x1_c, y1_c, &x1, &y1);

  00009	8d 45 f4	 lea	 eax, DWORD PTR _y1$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  00010	51		 push	 ecx
  00011	51		 push	 ecx
  00012	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y1_c$[ebp]
  00017	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001c	51		 push	 ecx
  0001d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x1_c$[ebp]
  00022	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00027	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 7412 : 	get_2d_float_screen_coordinates (x2_c, y2_c, &x2, &y2);

  0002c	8d 45 f0	 lea	 eax, DWORD PTR _y2$[ebp]
  0002f	50		 push	 eax
  00030	8d 4d f8	 lea	 ecx, DWORD PTR _x2$[ebp]
  00033	51		 push	 ecx
  00034	51		 push	 ecx
  00035	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y2_c$[ebp]
  0003a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003f	51		 push	 ecx
  00040	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x2_c$[ebp]
  00045	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004a	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 7413 : 
; 7414 : 	if (filled)

  0004f	83 7d 18 00	 cmp	 DWORD PTR _filled$[ebp], 0
  00053	74 7e		 je	 SHORT $LN2@draw_box

; 7415 : 	{
; 7416 : 		float x_min = min(x1, x2), x_max = max(x1, x2);

  00055	8d 45 f8	 lea	 eax, DWORD PTR _x2$[ebp]
  00058	50		 push	 eax
  00059	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  0005c	51		 push	 ecx
  0005d	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00062	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00066	f3 0f 11 45 ec	 movss	 DWORD PTR _x_min$4[ebp], xmm0
  0006b	8d 45 f8	 lea	 eax, DWORD PTR _x2$[ebp]
  0006e	50		 push	 eax
  0006f	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  00072	51		 push	 ecx
  00073	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00078	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0007c	f3 0f 11 45 e8	 movss	 DWORD PTR _x_max$3[ebp], xmm0

; 7417 : 		float y_min = min(y1, y2), y_max = max(y1, y2);

  00081	8d 45 f0	 lea	 eax, DWORD PTR _y2$[ebp]
  00084	50		 push	 eax
  00085	8d 4d f4	 lea	 ecx, DWORD PTR _y1$[ebp]
  00088	51		 push	 ecx
  00089	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  0008e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00092	f3 0f 11 45 e4	 movss	 DWORD PTR _y_min$2[ebp], xmm0
  00097	8d 45 f0	 lea	 eax, DWORD PTR _y2$[ebp]
  0009a	50		 push	 eax
  0009b	8d 4d f4	 lea	 ecx, DWORD PTR _y1$[ebp]
  0009e	51		 push	 ecx
  0009f	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  000a4	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000a8	f3 0f 11 45 e0	 movss	 DWORD PTR _y_max$1[ebp], xmm0

; 7418 : 
; 7419 : 		// set block likes to have its smallest arguments first		
; 7420 : 		set_block(x_min, y_min, x_max, y_max, colour);

  000ad	8b 45 1c	 mov	 eax, DWORD PTR _colour$[ebp]
  000b0	50		 push	 eax
  000b1	f3 0f 2c 4d e0	 cvttss2si ecx, DWORD PTR _y_max$1[ebp]
  000b6	51		 push	 ecx
  000b7	f3 0f 2c 55 e8	 cvttss2si edx, DWORD PTR _x_max$3[ebp]
  000bc	52		 push	 edx
  000bd	f3 0f 2c 45 e4	 cvttss2si eax, DWORD PTR _y_min$2[ebp]
  000c2	50		 push	 eax
  000c3	f3 0f 2c 4d ec	 cvttss2si ecx, DWORD PTR _x_min$4[ebp]
  000c8	51		 push	 ecx
  000c9	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 7421 : 	}
; 7422 : 	else

  000ce	e9 d4 00 00 00	 jmp	 $LN3@draw_box
$LN2@draw_box:

; 7423 : 	{
; 7424 : 		draw_line(x1, y1, x2, y1, colour);

  000d3	8b 45 1c	 mov	 eax, DWORD PTR _colour$[ebp]
  000d6	50		 push	 eax
  000d7	51		 push	 ecx
  000d8	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  000dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e2	51		 push	 ecx
  000e3	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  000e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ed	51		 push	 ecx
  000ee	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  000f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f8	51		 push	 ecx
  000f9	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  000fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00103	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7425 : 		draw_line(x1, y1, x1, y2, colour);

  00108	8b 45 1c	 mov	 eax, DWORD PTR _colour$[ebp]
  0010b	50		 push	 eax
  0010c	51		 push	 ecx
  0010d	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00112	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00117	51		 push	 ecx
  00118	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0011d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00122	51		 push	 ecx
  00123	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00128	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012d	51		 push	 ecx
  0012e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00133	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00138	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7426 : 		draw_line(x1, y2, x2, y2, colour);

  0013d	8b 45 1c	 mov	 eax, DWORD PTR _colour$[ebp]
  00140	50		 push	 eax
  00141	51		 push	 ecx
  00142	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00147	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014c	51		 push	 ecx
  0014d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00152	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00157	51		 push	 ecx
  00158	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0015d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00162	51		 push	 ecx
  00163	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00168	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016d	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7427 : 		draw_line(x2, y1, x2, y2, colour);

  00172	8b 45 1c	 mov	 eax, DWORD PTR _colour$[ebp]
  00175	50		 push	 eax
  00176	51		 push	 ecx
  00177	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0017c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00181	51		 push	 ecx
  00182	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00187	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018c	51		 push	 ecx
  0018d	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00192	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00197	51		 push	 ecx
  00198	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0019d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a2	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN3@draw_box:

; 7428 : 	}
; 7429 : }

  001a7	5f		 pop	 edi
  001a8	5e		 pop	 esi
  001a9	5b		 pop	 ebx
  001aa	8b e5		 mov	 esp, ebp
  001ac	5d		 pop	 ebp
  001ad	c2 18 00	 ret	 24			; 00000018H
?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ENDP		; draw_box
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?display_waypoint_information@@YGXUREAL_COLOUR@@@Z
_TEXT	SEGMENT
tv221 = -200						; size = 4
tv192 = -200						; size = 4
tv156 = -200						; size = 4
tv90 = -200						; size = 4
tv213 = -196						; size = 4
tv184 = -196						; size = 4
tv148 = -196						; size = 4
tv82 = -196						; size = 4
_seconds$1 = -128					; size = 4
_minutes$2 = -124					; size = 4
_hours$3 = -120						; size = 4
_time_to_go$4 = -116					; size = 4
_f$5 = -112						; size = 4
_i$6 = -108						; size = 4
_waypoint_range$ = -104					; size = 4
_waypoint_position$ = -100				; size = 12
_gunship_position$ = -88				; size = 4
_wp$ = -84						; size = 4
_buffer$ = -80						; size = 80
_box_colour$ = 8					; size = 4
?display_waypoint_information@@YGXUREAL_COLOUR@@@Z PROC	; display_waypoint_information, COMDAT

; 10599: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 10600: 	char
; 10601: 		buffer[80];
; 10602: 
; 10603: 	entity
; 10604: 		*wp;
; 10605: 
; 10606: 	vec3d
; 10607: 		*gunship_position,
; 10608: 		waypoint_position;
; 10609: 
; 10610: 	float
; 10611: 		waypoint_range;
; 10612: 
; 10613: 	wp = get_local_entity_current_waypoint (get_gunship_entity ());

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  00017	89 45 ac	 mov	 DWORD PTR _wp$[ebp], eax

; 10614: 
; 10615: 	draw_box(-0.98, -0.75, -0.35, -1.0, FALSE, box_colour);

  0001a	8b 45 08	 mov	 eax, DWORD PTR _box_colour$[ebp]
  0001d	50		 push	 eax
  0001e	6a 00		 push	 0
  00020	51		 push	 ecx
  00021	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00029	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002e	51		 push	 ecx
  0002f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  00037	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003c	51		 push	 ecx
  0003d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  00045	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004a	51		 push	 ecx
  0004b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00053	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00058	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 10616: 
; 10617: 	if (wp)

  0005d	83 7d ac 00	 cmp	 DWORD PTR _wp$[ebp], 0
  00061	0f 84 89 04 00
	00		 je	 $LN2@display_wa

; 10618: 	{
; 10619: 		if (draw_large_mfd)

  00067	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0006e	74 09		 je	 SHORT $LN3@display_wa

; 10620: 		{
; 10621: 			set_mono_font_type (MONO_FONT_TYPE_7X12);

  00070	6a 05		 push	 5
  00072	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 10622: 		}
; 10623: 		else

  00077	eb 07		 jmp	 SHORT $LN4@display_wa
$LN3@display_wa:

; 10624: 		{
; 10625: 			set_mono_font_type (MONO_FONT_TYPE_5X7);

  00079	6a 01		 push	 1
  0007b	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN4@display_wa:

; 10626: 		}
; 10627: 
; 10628: 		gunship_position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00080	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00087	74 0f		 je	 SHORT $LN14@display_wa
  00089	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0008e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00090	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv82[ebp], ecx
  00096	eb 24		 jmp	 SHORT $LN15@display_wa
$LN14@display_wa:
  00098	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXUREAL_COLOUR@@@Z@4JA
  0009e	83 c2 1d	 add	 edx, 29			; 0000001dH
  000a1	52		 push	 edx
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b2	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv82[ebp], 0
$LN15@display_wa:
  000bc	b9 01 00 00 00	 mov	 ecx, 1
  000c1	85 c9		 test	 ecx, ecx
  000c3	74 0c		 je	 SHORT $LN16@display_wa
  000c5	c7 85 38 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv90[ebp], 8
  000cf	eb 24		 jmp	 SHORT $LN17@display_wa
$LN16@display_wa:
  000d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXUREAL_COLOUR@@@Z@4JA
  000d7	83 c2 1d	 add	 edx, 29			; 0000001dH
  000da	52		 push	 edx
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000eb	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv90[ebp], 0
$LN17@display_wa:
  000f5	6a 08		 push	 8
  000f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000fd	51		 push	 ecx
  000fe	6b 95 3c ff ff
	ff 60		 imul	 edx, DWORD PTR tv82[ebp], 96
  00105	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR tv90[ebp]
  0010b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00112	ff d1		 call	 ecx
  00114	89 45 a8	 mov	 DWORD PTR _gunship_position$[ebp], eax

; 10629: 
; 10630: 		get_waypoint_display_position (get_gunship_entity (), wp, &waypoint_position);

  00117	8d 45 9c	 lea	 eax, DWORD PTR _waypoint_position$[ebp]
  0011a	50		 push	 eax
  0011b	8b 4d ac	 mov	 ecx, DWORD PTR _wp$[ebp]
  0011e	51		 push	 ecx
  0011f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00125	52		 push	 edx
  00126	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 10631: 
; 10632: 		//
; 10633: 		// waypoint id & range
; 10634: 		//
; 10635: 
; 10636: 		waypoint_range = get_2d_range (gunship_position, &waypoint_position);

  0012b	8d 45 9c	 lea	 eax, DWORD PTR _waypoint_position$[ebp]
  0012e	50		 push	 eax
  0012f	8b 4d a8	 mov	 ecx, DWORD PTR _gunship_position$[ebp]
  00132	51		 push	 ecx
  00133	e8 00 00 00 00	 call	 ?get_2d_range@@YGMPBUVEC3D@@0@Z ; get_2d_range
  00138	d9 5d 98	 fstp	 DWORD PTR _waypoint_range$[ebp]

; 10637: 
; 10638: 		if (!comanche_damage.navigation_computer)

  0013b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00140	c1 e8 07	 shr	 eax, 7
  00143	83 e0 01	 and	 eax, 1
  00146	0f 85 7a 02 00
	00		 jne	 $LN5@display_wa

; 10639: 		{
; 10640: 			if (waypoint_range < 1000.0)

  0014c	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _waypoint_range$[ebp]
  00151	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  00159	66 0f 2f c8	 comisd	 xmm1, xmm0
  0015d	0f 86 ae 00 00
	00		 jbe	 $LN7@display_wa

; 10641: 			{
; 10642: 				sprintf (buffer, "%c:%dm", get_local_entity_char_value (wp, CHAR_TYPE_TAG), (int) waypoint_range);

  00163	83 7d ac 00	 cmp	 DWORD PTR _wp$[ebp], 0
  00167	74 0d		 je	 SHORT $LN18@display_wa
  00169	8b 45 ac	 mov	 eax, DWORD PTR _wp$[ebp]
  0016c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016e	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv148[ebp], ecx
  00174	eb 24		 jmp	 SHORT $LN19@display_wa
$LN18@display_wa:
  00176	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXUREAL_COLOUR@@@Z@4JA
  0017c	83 c2 2b	 add	 edx, 43			; 0000002bH
  0017f	52		 push	 edx
  00180	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00185	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0018a	50		 push	 eax
  0018b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00190	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv148[ebp], 0
$LN19@display_wa:
  0019a	b9 01 00 00 00	 mov	 ecx, 1
  0019f	85 c9		 test	 ecx, ecx
  001a1	74 0c		 je	 SHORT $LN20@display_wa
  001a3	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv156[ebp], 0
  001ad	eb 24		 jmp	 SHORT $LN21@display_wa
$LN20@display_wa:
  001af	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXUREAL_COLOUR@@@Z@4JA
  001b5	83 c2 2b	 add	 edx, 43			; 0000002bH
  001b8	52		 push	 edx
  001b9	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  001be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  001c3	50		 push	 eax
  001c4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c9	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv156[ebp], 0
$LN21@display_wa:
  001d3	f3 0f 2c 4d 98	 cvttss2si ecx, DWORD PTR _waypoint_range$[ebp]
  001d8	51		 push	 ecx
  001d9	6a 00		 push	 0
  001db	8b 55 ac	 mov	 edx, DWORD PTR _wp$[ebp]
  001de	52		 push	 edx
  001df	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR tv156[ebp]
  001e5	c1 e0 02	 shl	 eax, 2
  001e8	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR tv148[ebp]
  001ee	8b 94 c8 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[eax+ecx*8]
  001f5	ff d2		 call	 edx
  001f7	0f b6 c0	 movzx	 eax, al
  001fa	50		 push	 eax
  001fb	68 00 00 00 00	 push	 OFFSET ??_C@_06JCIGMCHD@?$CFc?3?$CFdm@
  00200	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00203	51		 push	 ecx
  00204	e8 00 00 00 00	 call	 _sprintf
  00209	83 c4 10	 add	 esp, 16			; 00000010H
  0020c	e9 b3 01 00 00	 jmp	 $LN10@display_wa
$LN7@display_wa:

; 10643: 			}
; 10644: 			else if (waypoint_range < 100000.0)

  00211	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _waypoint_range$[ebp]
  00216	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40f86a0000000000
  0021e	66 0f 2f c8	 comisd	 xmm1, xmm0
  00222	0f 86 e7 00 00
	00		 jbe	 $LN9@display_wa

; 10645: 			{
; 10646: 				int
; 10647: 					i;
; 10648: 
; 10649: 				float
; 10650: 					f;
; 10651: 
; 10652: 				//
; 10653: 				// this is required to prevent rounding errors around the 100Km mark
; 10654: 				//
; 10655: 
; 10656: 				i = (int) waypoint_range * (1.0 / 100.0);

  00228	f3 0f 2c 45 98	 cvttss2si eax, DWORD PTR _waypoint_range$[ebp]
  0022d	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00231	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  00239	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  0023d	89 4d 94	 mov	 DWORD PTR _i$6[ebp], ecx

; 10657: 
; 10658: 				f = (float) i * (1.0 / 10.0);

  00240	f3 0f 2a 45 94	 cvtsi2ss xmm0, DWORD PTR _i$6[ebp]
  00245	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00249	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00251	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00255	f3 0f 11 45 90	 movss	 DWORD PTR _f$5[ebp], xmm0

; 10659: 
; 10660: 				sprintf (buffer, "%c:%.1fKm", get_local_entity_char_value (wp, CHAR_TYPE_TAG), f);

  0025a	83 7d ac 00	 cmp	 DWORD PTR _wp$[ebp], 0
  0025e	74 0d		 je	 SHORT $LN22@display_wa
  00260	8b 45 ac	 mov	 eax, DWORD PTR _wp$[ebp]
  00263	8b 08		 mov	 ecx, DWORD PTR [eax]
  00265	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv184[ebp], ecx
  0026b	eb 24		 jmp	 SHORT $LN23@display_wa
$LN22@display_wa:
  0026d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXUREAL_COLOUR@@@Z@4JA
  00273	83 c2 3d	 add	 edx, 61			; 0000003dH
  00276	52		 push	 edx
  00277	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0027c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00281	50		 push	 eax
  00282	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00287	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv184[ebp], 0
$LN23@display_wa:
  00291	b9 01 00 00 00	 mov	 ecx, 1
  00296	85 c9		 test	 ecx, ecx
  00298	74 0c		 je	 SHORT $LN24@display_wa
  0029a	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv192[ebp], 0
  002a4	eb 24		 jmp	 SHORT $LN25@display_wa
$LN24@display_wa:
  002a6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXUREAL_COLOUR@@@Z@4JA
  002ac	83 c2 3d	 add	 edx, 61			; 0000003dH
  002af	52		 push	 edx
  002b0	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  002b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  002ba	50		 push	 eax
  002bb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002c0	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv192[ebp], 0
$LN25@display_wa:
  002ca	f3 0f 5a 45 90	 cvtss2sd xmm0, DWORD PTR _f$5[ebp]
  002cf	83 ec 08	 sub	 esp, 8
  002d2	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  002d7	6a 00		 push	 0
  002d9	8b 4d ac	 mov	 ecx, DWORD PTR _wp$[ebp]
  002dc	51		 push	 ecx
  002dd	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR tv192[ebp]
  002e3	c1 e2 02	 shl	 edx, 2
  002e6	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR tv184[ebp]
  002ec	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[edx+eax*8]
  002f3	ff d1		 call	 ecx
  002f5	0f b6 d0	 movzx	 edx, al
  002f8	52		 push	 edx
  002f9	68 00 00 00 00	 push	 OFFSET ??_C@_09EKFBJBJG@?$CFc?3?$CF?41fKm@
  002fe	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  00301	50		 push	 eax
  00302	e8 00 00 00 00	 call	 _sprintf
  00307	83 c4 14	 add	 esp, 20			; 00000014H

; 10661: 			}
; 10662: 			else

  0030a	e9 b5 00 00 00	 jmp	 $LN10@display_wa
$LN9@display_wa:

; 10663: 			{
; 10664: 				sprintf (buffer, "%c:%dKm", get_local_entity_char_value (wp, CHAR_TYPE_TAG), (int) (waypoint_range * (1.0 / 1000.0)));

  0030f	83 7d ac 00	 cmp	 DWORD PTR _wp$[ebp], 0
  00313	74 0d		 je	 SHORT $LN26@display_wa
  00315	8b 45 ac	 mov	 eax, DWORD PTR _wp$[ebp]
  00318	8b 08		 mov	 ecx, DWORD PTR [eax]
  0031a	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv213[ebp], ecx
  00320	eb 24		 jmp	 SHORT $LN27@display_wa
$LN26@display_wa:
  00322	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXUREAL_COLOUR@@@Z@4JA
  00328	83 c2 41	 add	 edx, 65			; 00000041H
  0032b	52		 push	 edx
  0032c	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00331	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00336	50		 push	 eax
  00337	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0033c	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv213[ebp], 0
$LN27@display_wa:
  00346	b9 01 00 00 00	 mov	 ecx, 1
  0034b	85 c9		 test	 ecx, ecx
  0034d	74 0c		 je	 SHORT $LN28@display_wa
  0034f	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv221[ebp], 0
  00359	eb 24		 jmp	 SHORT $LN29@display_wa
$LN28@display_wa:
  0035b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXUREAL_COLOUR@@@Z@4JA
  00361	83 c2 41	 add	 edx, 65			; 00000041H
  00364	52		 push	 edx
  00365	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0036a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  0036f	50		 push	 eax
  00370	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00375	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv221[ebp], 0
$LN29@display_wa:
  0037f	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _waypoint_range$[ebp]
  00384	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0038c	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  00390	51		 push	 ecx
  00391	6a 00		 push	 0
  00393	8b 55 ac	 mov	 edx, DWORD PTR _wp$[ebp]
  00396	52		 push	 edx
  00397	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR tv221[ebp]
  0039d	c1 e0 02	 shl	 eax, 2
  003a0	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR tv213[ebp]
  003a6	8b 94 c8 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[eax+ecx*8]
  003ad	ff d2		 call	 edx
  003af	0f b6 c0	 movzx	 eax, al
  003b2	50		 push	 eax
  003b3	68 00 00 00 00	 push	 OFFSET ??_C@_07CFANIJPM@?$CFc?3?$CFdKm@
  003b8	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  003bb	51		 push	 ecx
  003bc	e8 00 00 00 00	 call	 _sprintf
  003c1	83 c4 10	 add	 esp, 16			; 00000010H
$LN10@display_wa:

; 10665: 			}
; 10666: 		}
; 10667: 		else

  003c4	eb 11		 jmp	 SHORT $LN6@display_wa
$LN5@display_wa:

; 10668: 		{
; 10669: 			sprintf (buffer, "-:--.-");

  003c6	68 00 00 00 00	 push	 OFFSET ??_C@_06BAOIPBEF@?9?3?9?9?4?9@
  003cb	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  003ce	50		 push	 eax
  003cf	e8 00 00 00 00	 call	 _sprintf
  003d4	83 c4 08	 add	 esp, 8
$LN6@display_wa:

; 10670: 		}
; 10671: 
; 10672: 		set_2d_mono_font_position (-0.95, -0.8);

  003d7	51		 push	 ecx
  003d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  003e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e5	51		 push	 ecx
  003e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  003ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f3	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10673: 
; 10674: 		set_mono_font_rel_position (1.0, 0.0);

  003f8	51		 push	 ecx
  003f9	0f 57 c0	 xorps	 xmm0, xmm0
  003fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00401	51		 push	 ecx
  00402	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0040a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10675: 
; 10676: 		print_mono_font_string (buffer);

  00414	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  00417	50		 push	 eax
  00418	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 10677: 
; 10678: 		//
; 10679: 		// time to go
; 10680: 		//
; 10681: 
; 10682: 		if ((current_flight_dynamics->velocity_z.value > 0.1) && (!comanche_damage.navigation_computer))

  0041d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00422	f3 0f 5a 80 9c
	20 00 00	 cvtss2sd xmm0, DWORD PTR [eax+8348]
  0042a	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fb999999999999a
  00432	76 65		 jbe	 SHORT $LN11@display_wa
  00434	a1 00 00 00 00	 mov	 eax, DWORD PTR ?comanche_damage@@3TCOMANCHE_DAMAGE_FLAGS@@A ; comanche_damage
  00439	c1 e8 07	 shr	 eax, 7
  0043c	83 e0 01	 and	 eax, 1
  0043f	75 58		 jne	 SHORT $LN11@display_wa

; 10683: 		{
; 10684: 			float
; 10685: 				time_to_go,
; 10686: 				hours,
; 10687: 				minutes,
; 10688: 				seconds;
; 10689: 
; 10690: 			time_to_go = waypoint_range / current_flight_dynamics->velocity_z.value;

  00441	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00446	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _waypoint_range$[ebp]
  0044b	f3 0f 5e 80 9c
	20 00 00	 divss	 xmm0, DWORD PTR [eax+8348]
  00453	f3 0f 11 45 8c	 movss	 DWORD PTR _time_to_go$4[ebp], xmm0

; 10691: 
; 10692: 			get_digital_clock_values (time_to_go, &hours, &minutes, &seconds);

  00458	8d 45 80	 lea	 eax, DWORD PTR _seconds$1[ebp]
  0045b	50		 push	 eax
  0045c	8d 4d 84	 lea	 ecx, DWORD PTR _minutes$2[ebp]
  0045f	51		 push	 ecx
  00460	8d 55 88	 lea	 edx, DWORD PTR _hours$3[ebp]
  00463	52		 push	 edx
  00464	51		 push	 ecx
  00465	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _time_to_go$4[ebp]
  0046a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046f	e8 00 00 00 00	 call	 ?get_digital_clock_values@@YGXMPAM00@Z ; get_digital_clock_values

; 10693: 
; 10694: 			sprintf (buffer, "%02d:%02d:%02d", (int) hours, (int) minutes, (int) seconds);

  00474	f3 0f 2c 45 80	 cvttss2si eax, DWORD PTR _seconds$1[ebp]
  00479	50		 push	 eax
  0047a	f3 0f 2c 4d 84	 cvttss2si ecx, DWORD PTR _minutes$2[ebp]
  0047f	51		 push	 ecx
  00480	f3 0f 2c 55 88	 cvttss2si edx, DWORD PTR _hours$3[ebp]
  00485	52		 push	 edx
  00486	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
  0048b	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  0048e	50		 push	 eax
  0048f	e8 00 00 00 00	 call	 _sprintf
  00494	83 c4 14	 add	 esp, 20			; 00000014H

; 10695: 		}
; 10696: 		else

  00497	eb 11		 jmp	 SHORT $LN12@display_wa
$LN11@display_wa:

; 10697: 		{
; 10698: 			strcpy (buffer, "--:--:--");

  00499	68 00 00 00 00	 push	 OFFSET ??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@
  0049e	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  004a1	50		 push	 eax
  004a2	e8 00 00 00 00	 call	 _strcpy
  004a7	83 c4 08	 add	 esp, 8
$LN12@display_wa:

; 10699: 		}
; 10700: 
; 10701: 		set_2d_mono_font_position (-0.95, -0.9);

  004aa	51		 push	 ecx
  004ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  004b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b8	51		 push	 ecx
  004b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  004c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c6	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 10702: 
; 10703: 		set_mono_font_rel_position (1.0, 0.0);

  004cb	51		 push	 ecx
  004cc	0f 57 c0	 xorps	 xmm0, xmm0
  004cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d4	51		 push	 ecx
  004d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 10704: 
; 10705: 		print_mono_font_string (buffer);

  004e7	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  004ea	50		 push	 eax
  004eb	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN2@display_wa:

; 10706: 	}
; 10707: }

  004f0	5f		 pop	 edi
  004f1	5e		 pop	 esi
  004f2	5b		 pop	 ebx
  004f3	8b e5		 mov	 esp, ebp
  004f5	5d		 pop	 ebp
  004f6	c2 04 00	 ret	 4
?display_waypoint_information@@YGXUREAL_COLOUR@@@Z ENDP	; display_waypoint_information
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_high_action_display@@YGXPAUENTITY@@H@Z
_TEXT	SEGMENT
tv286 = -312						; size = 8
tv338 = -304						; size = 4
tv287 = -304						; size = 8
tv261 = -304						; size = 4
tv167 = -304						; size = 4
tv148 = -304						; size = 4
tv470 = -300						; size = 4
tv331 = -300						; size = 4
tv267 = -300						; size = 4
tv253 = -300						; size = 4
tv235 = -300						; size = 4
tv196 = -300						; size = 4
tv160 = -300						; size = 4
tv140 = -300						; size = 4
_flight_time$1 = -232					; size = 4
_bg_colour$2 = -228					; size = 4
_weapon_sub_type$ = -224				; size = 4
_rangefinder$ = -220					; size = 4
_width$ = -216						; size = 4
_x_adjust$ = -212					; size = 4
_target_range$ = -208					; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
_target$ = 8						; size = 4
_fill_boxes$ = 12					; size = 4
?draw_high_action_display@@YGXPAUENTITY@@H@Z PROC	; draw_high_action_display, COMDAT

; 3318 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 38 01 00
	00		 sub	 esp, 312		; 00000138H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3319 : 	const char* s;
; 3320 : 	char buffer[200];
; 3321 : 
; 3322 : 	float target_range = get_range_to_target();

  0000c	e8 00 00 00 00	 call	 ?get_range_to_target@@YGMXZ ; get_range_to_target
  00011	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR _target_range$[ebp]

; 3323 : 	int x_adjust, width;
; 3324 : 	
; 3325 : 	rangefinding_system rangefinder = get_range_finder();

  00017	e8 00 00 00 00	 call	 ?get_range_finder@@YG?AW4rangefinding_system@@XZ ; get_range_finder
  0001c	89 85 24 ff ff
	ff		 mov	 DWORD PTR _rangefinder$[ebp], eax

; 3326 : 
; 3327 : 	entity_sub_types weapon_sub_type;
; 3328 : 
; 3329 : 	if (draw_large_mfd)

  00022	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00029	74 09		 je	 SHORT $LN8@draw_high_

; 3330 : 		set_mono_font_type (MONO_FONT_TYPE_5X9);

  0002b	6a 02		 push	 2
  0002d	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 3331 : 	else

  00032	eb 07		 jmp	 SHORT $LN9@draw_high_
$LN8@draw_high_:

; 3332 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  00034	6a 00		 push	 0
  00036	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN9@draw_high_:

; 3333 : 
; 3334 : 	if (fill_boxes)

  0003b	83 7d 0c 00	 cmp	 DWORD PTR _fill_boxes$[ebp], 0
  0003f	0f 84 c7 00 00
	00		 je	 $LN10@draw_high_

; 3335 : 	{
; 3336 : 		rgb_colour bg_colour;
; 3337 : 
; 3338 : 		set_rgb_colour (bg_colour, 0, 40, 0, 255);

  00045	c6 85 1e ff ff
	ff 00		 mov	 BYTE PTR _bg_colour$2[ebp+2], 0
  0004c	c6 85 1d ff ff
	ff 28		 mov	 BYTE PTR _bg_colour$2[ebp+1], 40 ; 00000028H
  00053	c6 85 1c ff ff
	ff 00		 mov	 BYTE PTR _bg_colour$2[ebp], 0
  0005a	c6 85 1f ff ff
	ff ff		 mov	 BYTE PTR _bg_colour$2[ebp+3], 255 ; 000000ffH

; 3339 : 
; 3340 : 		draw_bordered_box(-0.98, -1.0, -0.35, -0.8, bg_colour, MFD_COLOUR1);

  00061	b8 04 00 00 00	 mov	 eax, 4
  00066	6b c8 00	 imul	 ecx, eax, 0
  00069	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0006f	52		 push	 edx
  00070	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _bg_colour$2[ebp]
  00076	50		 push	 eax
  00077	51		 push	 ecx
  00078	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00080	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00085	51		 push	 ecx
  00086	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  0008e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00093	51		 push	 ecx
  00094	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0009c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a1	51		 push	 ecx
  000a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  000aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000af	e8 00 00 00 00	 call	 ?draw_bordered_box@@YGXMMMMUREAL_COLOUR@@0@Z ; draw_bordered_box

; 3341 : 		draw_bordered_box(0.98, -1.0, 0.35, -0.8, bg_colour, MFD_COLOUR1);

  000b4	b8 04 00 00 00	 mov	 eax, 4
  000b9	6b c8 00	 imul	 ecx, eax, 0
  000bc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000c2	52		 push	 edx
  000c3	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _bg_colour$2[ebp]
  000c9	50		 push	 eax
  000ca	51		 push	 ecx
  000cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  000d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d8	51		 push	 ecx
  000d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  000e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e6	51		 push	 ecx
  000e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f4	51		 push	 ecx
  000f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7ae148
  000fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00102	e8 00 00 00 00	 call	 ?draw_bordered_box@@YGXMMMMUREAL_COLOUR@@0@Z ; draw_bordered_box

; 3342 : 	}
; 3343 : 	else

  00107	e9 9c 00 00 00	 jmp	 $LN11@draw_high_
$LN10@draw_high_:

; 3344 : 	{
; 3345 : 		draw_box(-0.98, -1.0, -0.35, -0.8, FALSE, MFD_COLOUR1);

  0010c	b8 04 00 00 00	 mov	 eax, 4
  00111	6b c8 00	 imul	 ecx, eax, 0
  00114	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0011a	52		 push	 edx
  0011b	6a 00		 push	 0
  0011d	51		 push	 ecx
  0011e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00126	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012b	51		 push	 ecx
  0012c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  00134	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00139	51		 push	 ecx
  0013a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00142	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00147	51		 push	 ecx
  00148	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ae148
  00150	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00155	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 3346 : 		draw_box(0.98, -1.0, 0.35, -0.8, FALSE, MFD_COLOUR1);

  0015a	b8 04 00 00 00	 mov	 eax, 4
  0015f	6b c8 00	 imul	 ecx, eax, 0
  00162	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00168	52		 push	 edx
  00169	6a 00		 push	 0
  0016b	51		 push	 ecx
  0016c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00174	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00179	51		 push	 ecx
  0017a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  00182	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00187	51		 push	 ecx
  00188	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00190	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00195	51		 push	 ecx
  00196	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7ae148
  0019e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a3	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box
$LN11@draw_high_:

; 3347 : 	}
; 3348 : 
; 3349 : // Jabberwock 031107 Designated targets
; 3350 : 	target = get_local_entity_parent (get_gunship_entity (), LIST_TYPE_TARGET);

  001a8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  001af	74 0f		 je	 SHORT $LN45@draw_high_
  001b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  001b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b8	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv140[ebp], ecx
  001be	eb 24		 jmp	 SHORT $LN46@draw_high_
$LN45@draw_high_:
  001c0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_high_action_display@@YGXPAUENTITY@@H@Z@4JA
  001c6	83 c2 20	 add	 edx, 32			; 00000020H
  001c9	52		 push	 edx
  001ca	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  001cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001d4	50		 push	 eax
  001d5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001da	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv140[ebp], 0
$LN46@draw_high_:
  001e4	b9 01 00 00 00	 mov	 ecx, 1
  001e9	85 c9		 test	 ecx, ecx
  001eb	74 0c		 je	 SHORT $LN47@draw_high_
  001ed	c7 85 d0 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv148[ebp], 38 ; 00000026H
  001f7	eb 24		 jmp	 SHORT $LN48@draw_high_
$LN47@draw_high_:
  001f9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_high_action_display@@YGXPAUENTITY@@H@Z@4JA
  001ff	83 c2 20	 add	 edx, 32			; 00000020H
  00202	52		 push	 edx
  00203	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00208	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0020d	50		 push	 eax
  0020e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00213	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv148[ebp], 0
$LN48@draw_high_:
  0021d	6a 26		 push	 38			; 00000026H
  0021f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00225	51		 push	 ecx
  00226	69 95 d4 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv140[ebp], 180
  00230	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR tv148[ebp]
  00236	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0023d	ff d1		 call	 ecx
  0023f	89 45 08	 mov	 DWORD PTR _target$[ebp], eax

; 3351 : 	
; 3352 : 	if (target && get_local_entity_parent (target, LIST_TYPE_DESIGNATED_TARGET) == get_gunship_entity())

  00242	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00246	0f 84 d1 00 00
	00		 je	 $LN12@draw_high_
  0024c	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00250	74 0d		 je	 SHORT $LN49@draw_high_
  00252	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00255	8b 08		 mov	 ecx, DWORD PTR [eax]
  00257	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv160[ebp], ecx
  0025d	eb 20		 jmp	 SHORT $LN50@draw_high_
$LN49@draw_high_:
  0025f	68 18 0d 00 00	 push	 3352			; 00000d18H
  00264	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00269	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0026f	52		 push	 edx
  00270	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00275	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv160[ebp], 0
$LN50@draw_high_:
  0027f	b8 01 00 00 00	 mov	 eax, 1
  00284	85 c0		 test	 eax, eax
  00286	74 0c		 je	 SHORT $LN51@draw_high_
  00288	c7 85 d0 fe ff
	ff 0a 00 00 00	 mov	 DWORD PTR tv167[ebp], 10 ; 0000000aH
  00292	eb 20		 jmp	 SHORT $LN52@draw_high_
$LN51@draw_high_:
  00294	68 18 0d 00 00	 push	 3352			; 00000d18H
  00299	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0029e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  002a4	51		 push	 ecx
  002a5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002aa	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv167[ebp], 0
$LN52@draw_high_:
  002b4	6a 0a		 push	 10			; 0000000aH
  002b6	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  002b9	52		 push	 edx
  002ba	69 85 d4 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv160[ebp], 180
  002c4	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR tv167[ebp]
  002ca	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  002d1	ff d2		 call	 edx
  002d3	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  002d9	75 42		 jne	 SHORT $LN12@draw_high_

; 3353 : 	{
; 3354 : 		set_2d_mono_font_position (0.7, -0.7);

  002db	51		 push	 ecx
  002dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  002e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e9	51		 push	 ecx
  002ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  002f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f7	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3355 : 		set_mono_font_rel_position (0, 0);

  002fc	51		 push	 ecx
  002fd	0f 57 c0	 xorps	 xmm0, xmm0
  00300	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00305	51		 push	 ecx
  00306	0f 57 c0	 xorps	 xmm0, xmm0
  00309	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3356 : 		print_mono_font_string ("MARKED");		

  00313	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  00318	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN12@draw_high_:

; 3357 : 	}
; 3358 : // Jabberwock 031107 ends
; 3359 : 
; 3360 : 	//
; 3361 : 	// target name
; 3362 : 	//
; 3363 : 
; 3364 : 	s = get_target_display_name (target, buffer, draw_large_mfd);

  0031d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?draw_large_mfd@@3HA
  00322	50		 push	 eax
  00323	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00329	51		 push	 ecx
  0032a	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  0032d	52		 push	 edx
  0032e	e8 00 00 00 00	 call	 ?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z ; get_target_display_name
  00333	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 3365 : 
; 3366 : 	if (s)

  00336	83 7d fc 00	 cmp	 DWORD PTR _s$[ebp], 0
  0033a	74 65		 je	 SHORT $LN13@draw_high_

; 3367 : 	{
; 3368 : 		width = get_mono_font_string_width (s);

  0033c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0033f	50		 push	 eax
  00340	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00345	e8 00 00 00 00	 call	 __ftol2_sse
  0034a	89 85 28 ff ff
	ff		 mov	 DWORD PTR _width$[ebp], eax

; 3369 : 		set_2d_mono_font_position (0.0, -0.7);

  00350	51		 push	 ecx
  00351	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00359	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035e	51		 push	 ecx
  0035f	0f 57 c0	 xorps	 xmm0, xmm0
  00362	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00367	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3370 : 		set_mono_font_rel_position (-width * 0.5, 0);

  0036c	51		 push	 ecx
  0036d	0f 57 c0	 xorps	 xmm0, xmm0
  00370	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00375	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _width$[ebp]
  0037b	f7 d8		 neg	 eax
  0037d	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00381	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00389	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0038d	51		 push	 ecx
  0038e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00393	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3371 : 		print_mono_font_string (s);

  00398	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0039b	50		 push	 eax
  0039c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN13@draw_high_:

; 3372 : 	}
; 3373 : 
; 3374 : 	// lower left box:
; 3375 : 	// rang finder    range
; 3376 : 	// targeting status
; 3377 : 
; 3378 : 	switch (rangefinder)

  003a1	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _rangefinder$[ebp]
  003a7	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv196[ebp], eax
  003ad	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR tv196[ebp], 0
  003b4	74 17		 je	 SHORT $LN14@draw_high_
  003b6	83 bd d4 fe ff
	ff 01		 cmp	 DWORD PTR tv196[ebp], 1
  003bd	74 46		 je	 SHORT $LN15@draw_high_
  003bf	83 bd d4 fe ff
	ff 02		 cmp	 DWORD PTR tv196[ebp], 2
  003c6	74 6a		 je	 SHORT $LN16@draw_high_
  003c8	e9 d2 00 00 00	 jmp	 $LN2@draw_high_
$LN14@draw_high_:

; 3379 : 	{
; 3380 : 	case RANGEFINDER_FCR:	
; 3381 : 		s = "FCR";

  003cd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03JKJFCLEN@FCR@

; 3382 : 		sprintf(buffer, "R%.1f", target_range * 0.001);

  003d4	f3 0f 5a 85 30
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  003dc	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  003e4	83 ec 08	 sub	 esp, 8
  003e7	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  003ec	68 00 00 00 00	 push	 OFFSET ??_C@_05FALJMMFP@R?$CF?41f@
  003f1	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  003f7	50		 push	 eax
  003f8	e8 00 00 00 00	 call	 _sprintf
  003fd	83 c4 10	 add	 esp, 16			; 00000010H

; 3383 : 		break;

  00400	e9 9a 00 00 00	 jmp	 $LN2@draw_high_
$LN15@draw_high_:

; 3384 : 	case RANGEFINDER_LASER:
; 3385 : 		s = "TADS";

  00405	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04DBODHFDK@TADS@

; 3386 : 		sprintf(buffer, "L%04.0f", target_range);

  0040c	f3 0f 5a 85 30
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  00414	83 ec 08	 sub	 esp, 8
  00417	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0041c	68 00 00 00 00	 push	 OFFSET ??_C@_07HOJAAJFI@L?$CF04?40f@
  00421	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00427	50		 push	 eax
  00428	e8 00 00 00 00	 call	 _sprintf
  0042d	83 c4 10	 add	 esp, 16			; 00000010H

; 3387 : 		break;

  00430	eb 6d		 jmp	 SHORT $LN2@draw_high_
$LN16@draw_high_:

; 3388 : 	case RANGEFINDER_TRIANGULATION:
; 3389 : 		if (target_acquisition_system != TARGET_ACQUISITION_SYSTEM_OFF)

  00432	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 0 ; target_acquisition_system
  00439	74 09		 je	 SHORT $LN17@draw_high_

; 3390 : 			s = "TADS";

  0043b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04DBODHFDK@TADS@

; 3391 : 		else

  00442	eb 07		 jmp	 SHORT $LN18@draw_high_
$LN17@draw_high_:

; 3392 : 			s = "NONE";

  00444	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04OKGDLNCL@NONE@
$LN18@draw_high_:

; 3393 : 
; 3394 : 		if (target_range > 0.0)

  0044b	f3 0f 5a 85 30
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  00453	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0045b	76 2e		 jbe	 SHORT $LN19@draw_high_

; 3395 : 			sprintf(buffer, "A%.1f", target_range * 0.001);

  0045d	f3 0f 5a 85 30
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  00465	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0046d	83 ec 08	 sub	 esp, 8
  00470	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00475	68 00 00 00 00	 push	 OFFSET ??_C@_05NFPLLMGK@A?$CF?41f@
  0047a	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00480	50		 push	 eax
  00481	e8 00 00 00 00	 call	 _sprintf
  00486	83 c4 10	 add	 esp, 16			; 00000010H

; 3396 : 		else

  00489	eb 14		 jmp	 SHORT $LN20@draw_high_
$LN19@draw_high_:

; 3397 : 			sprintf(buffer, "AX.X");

  0048b	68 00 00 00 00	 push	 OFFSET ??_C@_04BCEGOCOA@AX?4X@
  00490	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00496	50		 push	 eax
  00497	e8 00 00 00 00	 call	 _sprintf
  0049c	83 c4 08	 add	 esp, 8
$LN20@draw_high_:
$LN2@draw_high_:

; 3398 : 
; 3399 : 		break;
; 3400 : 	}
; 3401 : 
; 3402 : 	set_2d_mono_font_position (-0.95, -0.83);

  0049f	51		 push	 ecx
  004a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf547ae1
  004a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ad	51		 push	 ecx
  004ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  004b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004bb	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3403 : 	x_adjust = 0; //get_mono_font_string_width (s) * -0.5;

  004c0	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _x_adjust$[ebp], 0

; 3404 : 	set_mono_font_rel_position (x_adjust, 0);

  004ca	51		 push	 ecx
  004cb	0f 57 c0	 xorps	 xmm0, xmm0
  004ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d3	f3 0f 2a 85 2c
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _x_adjust$[ebp]
  004db	51		 push	 ecx
  004dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e1	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3405 : 	print_mono_font_string (s);

  004e6	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  004e9	50		 push	 eax
  004ea	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3406 : 
; 3407 : 	set_2d_mono_font_position (-0.40, -0.83);

  004ef	51		 push	 ecx
  004f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf547ae1
  004f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fd	51		 push	 ecx
  004fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00506	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0050b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3408 : 	x_adjust = -get_mono_font_string_width (buffer); // * 0.5;

  00510	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00516	50		 push	 eax
  00517	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0051c	d9 9d d4 fe ff
	ff		 fstp	 DWORD PTR tv470[ebp]
  00522	f3 0f 10 85 d4
	fe ff ff	 movss	 xmm0, DWORD PTR tv470[ebp]
  0052a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00531	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00535	89 8d 2c ff ff
	ff		 mov	 DWORD PTR _x_adjust$[ebp], ecx

; 3409 : 	set_mono_font_rel_position (x_adjust, 0);

  0053b	51		 push	 ecx
  0053c	0f 57 c0	 xorps	 xmm0, xmm0
  0053f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00544	f3 0f 2a 85 2c
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _x_adjust$[ebp]
  0054c	51		 push	 ecx
  0054d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00552	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3410 : 	print_mono_font_string (buffer);

  00557	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0055d	50		 push	 eax
  0055e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3411 : 
; 3412 : 	// targeting status
; 3413 : 	
; 3414 : 	switch (weapon_lock_type)

  00563	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_lock_type@@3W4WEAPON_LOCK_TYPES@@A ; weapon_lock_type
  00568	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv235[ebp], eax
  0056e	83 bd d4 fe ff
	ff 09		 cmp	 DWORD PTR tv235[ebp], 9
  00575	77 70		 ja	 SHORT $LN32@draw_high_
  00577	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv235[ebp]
  0057d	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN66@draw_high_[ecx*4]
$LN21@draw_high_:

; 3415 : 	{
; 3416 : 		case WEAPON_LOCK_NO_ACQUIRE:
; 3417 : 			s = "NO ACQUIRE";

  00584	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@FONJMCCD@NO?5ACQUIRE@

; 3418 : 			break;

  0058b	eb 6d		 jmp	 SHORT $LN4@draw_high_
$LN22@draw_high_:

; 3419 : 		case WEAPON_LOCK_NO_WEAPON:
; 3420 : 			s = "NO WEAPON";

  0058d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_09GGBOJENB@NO?5WEAPON@

; 3421 : 			break;

  00594	eb 64		 jmp	 SHORT $LN4@draw_high_
$LN23@draw_high_:

; 3422 : 		case WEAPON_LOCK_NO_TARGET:
; 3423 : 			s = "NO TARGET";

  00596	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_09JLFDDBCD@NO?5TARGET@

; 3424 : 			break;

  0059d	eb 5b		 jmp	 SHORT $LN4@draw_high_
$LN24@draw_high_:

; 3425 : 		case WEAPON_LOCK_INVALID_TARGET:
; 3426 : 			s = "INVALID TGT";

  0059f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0M@MFPJHMMF@INVALID?5TGT@

; 3427 : 			break;

  005a6	eb 52		 jmp	 SHORT $LN4@draw_high_
$LN25@draw_high_:

; 3428 : 		case WEAPON_LOCK_SEEKER_LIMIT:
; 3429 : 			s = "SKR LIMIT";

  005a8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_09CPLEKEOP@SKR?5LIMIT@

; 3430 : 			break;

  005af	eb 49		 jmp	 SHORT $LN4@draw_high_
$LN26@draw_high_:

; 3431 : 		case WEAPON_LOCK_NO_LOS:
; 3432 : 			s = "NO LOS";

  005b1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06HCPKJKPH@NO?5LOS@

; 3433 : 			break;

  005b8	eb 40		 jmp	 SHORT $LN4@draw_high_
$LN27@draw_high_:

; 3434 : 		case WEAPON_LOCK_MIN_RANGE:
; 3435 : 			if (rangefinder != RANGEFINDER_TRIANGULATION)

  005ba	83 bd 24 ff ff
	ff 02		 cmp	 DWORD PTR _rangefinder$[ebp], 2
  005c1	74 09		 je	 SHORT $LN28@draw_high_

; 3436 : 			{
; 3437 : 				s = "MIN RNG";

  005c3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_07KJHNDNDJ@MIN?5RNG@

; 3438 : 				break;

  005ca	eb 2e		 jmp	 SHORT $LN4@draw_high_
$LN28@draw_high_:

; 3439 : 			}
; 3440 : 		case WEAPON_LOCK_MAX_RANGE:
; 3441 : 			if (rangefinder != RANGEFINDER_TRIANGULATION)

  005cc	83 bd 24 ff ff
	ff 02		 cmp	 DWORD PTR _rangefinder$[ebp], 2
  005d3	74 09		 je	 SHORT $LN30@draw_high_

; 3442 : 			{
; 3443 : 				s = "MAX RNG";

  005d5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_07EPBNJCNI@MAX?5RNG@

; 3444 : 				break;

  005dc	eb 1c		 jmp	 SHORT $LN4@draw_high_
$LN30@draw_high_:

; 3445 : 			}
; 3446 : 		case WEAPON_LOCK_NO_BORESIGHT:
; 3447 : 		case WEAPON_LOCK_VALID:
; 3448 : 			s = "VALID LOCK";

  005de	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@PDLCBABH@VALID?5LOCK@

; 3449 : 			break;

  005e5	eb 13		 jmp	 SHORT $LN4@draw_high_
$LN32@draw_high_:

; 3450 : 		default:
; 3451 : 			debug_fatal ("Invalid weapon lock type = %d", weapon_lock_type);

  005e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_lock_type@@3W4WEAPON_LOCK_TYPES@@A ; weapon_lock_type
  005ec	50		 push	 eax
  005ed	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@IMEMIMEA@Invalid?5weapon?5lock?5type?5?$DN?5?$CFd@
  005f2	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  005f7	83 c4 08	 add	 esp, 8
$LN4@draw_high_:

; 3452 : 			break;
; 3453 : 	}
; 3454 : 
; 3455 : 	set_2d_mono_font_position (-0.95, -0.83);

  005fa	51		 push	 ecx
  005fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf547ae1
  00603	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00608	51		 push	 ecx
  00609	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  00611	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00616	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3456 : 	x_adjust = 0; //get_mono_font_string_width (s) * -0.5;

  0061b	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _x_adjust$[ebp], 0

; 3457 : 	set_mono_font_rel_position (x_adjust, 10);

  00625	51		 push	 ecx
  00626	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  0062e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00633	f3 0f 2a 85 2c
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _x_adjust$[ebp]
  0063b	51		 push	 ecx
  0063c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00641	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3458 : 	print_mono_font_string (s);

  00646	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00649	50		 push	 eax
  0064a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3459 : 
; 3460 : 	// lower right box:
; 3461 : 	// weapon type
; 3462 : 	// launch mode
; 3463 : 	weapon_sub_type = get_local_entity_int_value (get_gunship_entity (), INT_TYPE_SELECTED_WEAPON);

  0064f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00656	74 0f		 je	 SHORT $LN53@draw_high_
  00658	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0065d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0065f	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv253[ebp], ecx
  00665	eb 27		 jmp	 SHORT $LN54@draw_high_
$LN53@draw_high_:
  00667	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_high_action_display@@YGXPAUENTITY@@H@Z@4JA
  0066d	81 c2 91 00 00
	00		 add	 edx, 145		; 00000091H
  00673	52		 push	 edx
  00674	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00679	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0067e	50		 push	 eax
  0067f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00684	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv253[ebp], 0
$LN54@draw_high_:
  0068e	b9 01 00 00 00	 mov	 ecx, 1
  00693	85 c9		 test	 ecx, ecx
  00695	74 0c		 je	 SHORT $LN55@draw_high_
  00697	c7 85 d0 fe ff
	ff b8 00 00 00	 mov	 DWORD PTR tv261[ebp], 184 ; 000000b8H
  006a1	eb 27		 jmp	 SHORT $LN56@draw_high_
$LN55@draw_high_:
  006a3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_high_action_display@@YGXPAUENTITY@@H@Z@4JA
  006a9	81 c2 91 00 00
	00		 add	 edx, 145		; 00000091H
  006af	52		 push	 edx
  006b0	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  006b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  006ba	50		 push	 eax
  006bb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006c0	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv261[ebp], 0
$LN56@draw_high_:
  006ca	68 b8 00 00 00	 push	 184			; 000000b8H
  006cf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  006d5	51		 push	 ecx
  006d6	69 95 d4 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv253[ebp], 1116
  006e0	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR tv261[ebp]
  006e6	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  006ed	ff d1		 call	 ecx
  006ef	89 85 20 ff ff
	ff		 mov	 DWORD PTR _weapon_sub_type$[ebp], eax

; 3464 : 	switch (weapon_sub_type)

  006f5	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  006fb	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv267[ebp], eax
  00701	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv267[ebp]
  00707	83 e9 07	 sub	 ecx, 7
  0070a	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv267[ebp], ecx
  00710	83 bd d4 fe ff
	ff 27		 cmp	 DWORD PTR tv267[ebp], 39 ; 00000027H
  00717	77 38		 ja	 SHORT $LN37@draw_high_
  00719	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR tv267[ebp]
  0071f	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN65@draw_high_[edx]
  00726	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN67@draw_high_[eax*4]
$LN33@draw_high_:

; 3465 : 	{
; 3466 : 		case ENTITY_SUB_TYPE_WEAPON_M230_30MM_ROUND:
; 3467 : 			s = "CANNON";

  0072d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06FKEAPHPM@CANNON@

; 3468 : 			break;

  00734	eb 22		 jmp	 SHORT $LN6@draw_high_
$LN34@draw_high_:

; 3469 : 		case ENTITY_SUB_TYPE_WEAPON_AGM114L_LONGBOW_HELLFIRE:
; 3470 : 		case ENTITY_SUB_TYPE_WEAPON_AGM114K_HELLFIRE_II:
; 3471 : 			s = "MSL";

  00736	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03IFPDDAOD@MSL@

; 3472 : 			break;

  0073d	eb 19		 jmp	 SHORT $LN6@draw_high_
$LN35@draw_high_:

; 3473 : 		case ENTITY_SUB_TYPE_WEAPON_HYDRA70_M255:
; 3474 : 		case ENTITY_SUB_TYPE_WEAPON_HYDRA70_M261:
; 3475 : 			s = "RKT";

  0073f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03BNKHBNLL@RKT@

; 3476 : 			break;

  00746	eb 10		 jmp	 SHORT $LN6@draw_high_
$LN36@draw_high_:

; 3477 : 		case ENTITY_SUB_TYPE_WEAPON_AIM92_STINGER:
; 3478 : 		case ENTITY_SUB_TYPE_WEAPON_AIM9M_SIDEWINDER:
; 3479 : 			s = "ATA";

  00748	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03HPMEOHJD@ATA@

; 3480 : 			break;

  0074f	eb 07		 jmp	 SHORT $LN6@draw_high_
$LN37@draw_high_:

; 3481 : 		case ENTITY_SUB_TYPE_WEAPON_NO_WEAPON:
; 3482 : 		default:
; 3483 : 			s = "NONE";

  00751	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04OKGDLNCL@NONE@
$LN6@draw_high_:

; 3484 : 			break;
; 3485 : 	}
; 3486 : 
; 3487 : 	set_2d_mono_font_position (0.37, -0.83);

  00758	51		 push	 ecx
  00759	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf547ae1
  00761	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00766	51		 push	 ecx
  00767	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ebd70a4
  0076f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00774	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3488 : 	x_adjust = 0; //get_mono_font_string_width (s) * -0.5;

  00779	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _x_adjust$[ebp], 0

; 3489 : 	set_mono_font_rel_position (x_adjust, 0);

  00783	51		 push	 ecx
  00784	0f 57 c0	 xorps	 xmm0, xmm0
  00787	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078c	f3 0f 2a 85 2c
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _x_adjust$[ebp]
  00794	51		 push	 ecx
  00795	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3490 : 	print_mono_font_string (s);

  0079f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  007a2	50		 push	 eax
  007a3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3491 : 
; 3492 : 	// launch mode
; 3493 : 	s = NULL;

  007a8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], 0

; 3494 : 	if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AGM114L_LONGBOW_HELLFIRE || ENTITY_SUB_TYPE_WEAPON_AGM114K_HELLFIRE_II)

  007af	83 bd 20 ff ff
	ff 2d		 cmp	 DWORD PTR _weapon_sub_type$[ebp], 45 ; 0000002dH
  007b6	74 0d		 je	 SHORT $LN39@draw_high_
  007b8	b8 2e 00 00 00	 mov	 eax, 46			; 0000002eH
  007bd	85 c0		 test	 eax, eax
  007bf	0f 84 c0 00 00
	00		 je	 $LN40@draw_high_
$LN39@draw_high_:

; 3495 : 	{
; 3496 : 		float flight_time = get_default_missile_flight_time ();

  007c5	e8 00 00 00 00	 call	 ?get_default_missile_flight_time@@YGMXZ ; get_default_missile_flight_time
  007ca	d9 9d 18 ff ff
	ff		 fstp	 DWORD PTR _flight_time$1[ebp]

; 3497 : 
; 3498 : 		if (flight_time > 0.01)

  007d0	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _flight_time$1[ebp]
  007d8	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  007e0	0f 86 9f 00 00
	00		 jbe	 $LN40@draw_high_

; 3499 : 		{
; 3500 : 			flight_time = bound (flight_time, 0.0, 99.9);

  007e6	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _flight_time$1[ebp]
  007ee	0f 57 c9	 xorps	 xmm1, xmm1
  007f1	66 0f 2f c8	 comisd	 xmm1, xmm0
  007f5	76 0d		 jbe	 SHORT $LN59@draw_high_
  007f7	0f 57 c0	 xorps	 xmm0, xmm0
  007fa	f2 0f 11 85 d0
	fe ff ff	 movsd	 QWORD PTR tv287[ebp], xmm0
  00802	eb 44		 jmp	 SHORT $LN60@draw_high_
$LN59@draw_high_:
  00804	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _flight_time$1[ebp]
  0080c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4058f9999999999a
  00814	76 12		 jbe	 SHORT $LN57@draw_high_
  00816	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4058f9999999999a
  0081e	f2 0f 11 85 c8
	fe ff ff	 movsd	 QWORD PTR tv286[ebp], xmm0
  00826	eb 10		 jmp	 SHORT $LN58@draw_high_
$LN57@draw_high_:
  00828	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _flight_time$1[ebp]
  00830	f2 0f 11 85 c8
	fe ff ff	 movsd	 QWORD PTR tv286[ebp], xmm0
$LN58@draw_high_:
  00838	f2 0f 10 85 c8
	fe ff ff	 movsd	 xmm0, QWORD PTR tv286[ebp]
  00840	f2 0f 11 85 d0
	fe ff ff	 movsd	 QWORD PTR tv287[ebp], xmm0
$LN60@draw_high_:
  00848	f2 0f 5a 85 d0
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv287[ebp]
  00850	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _flight_time$1[ebp], xmm0

; 3501 : 			sprintf (buffer, "TOF:%.0f", flight_time);

  00858	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _flight_time$1[ebp]
  00860	83 ec 08	 sub	 esp, 8
  00863	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00868	68 00 00 00 00	 push	 OFFSET ??_C@_08BKMPBOCK@TOF?3?$CF?40f@
  0086d	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00873	50		 push	 eax
  00874	e8 00 00 00 00	 call	 _sprintf
  00879	83 c4 10	 add	 esp, 16			; 00000010H

; 3502 : 			s = buffer;

  0087c	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00882	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax
$LN40@draw_high_:

; 3503 : 		}
; 3504 : 	}
; 3505 : 
; 3506 : 	if (!s)

  00885	83 7d fc 00	 cmp	 DWORD PTR _s$[ebp], 0
  00889	0f 85 a3 00 00
	00		 jne	 $LN43@draw_high_

; 3507 : 		if (get_local_entity_int_value (get_gunship_entity (), INT_TYPE_LOCK_ON_AFTER_LAUNCH))

  0088f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00896	74 0f		 je	 SHORT $LN61@draw_high_
  00898	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0089d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0089f	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv331[ebp], ecx
  008a5	eb 20		 jmp	 SHORT $LN62@draw_high_
$LN61@draw_high_:
  008a7	68 b3 0d 00 00	 push	 3507			; 00000db3H
  008ac	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  008b1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  008b7	52		 push	 edx
  008b8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008bd	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv331[ebp], 0
$LN62@draw_high_:
  008c7	b8 01 00 00 00	 mov	 eax, 1
  008cc	85 c0		 test	 eax, eax
  008ce	74 0c		 je	 SHORT $LN63@draw_high_
  008d0	c7 85 d0 fe ff
	ff 7e 00 00 00	 mov	 DWORD PTR tv338[ebp], 126 ; 0000007eH
  008da	eb 20		 jmp	 SHORT $LN64@draw_high_
$LN63@draw_high_:
  008dc	68 b3 0d 00 00	 push	 3507			; 00000db3H
  008e1	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  008e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  008ec	51		 push	 ecx
  008ed	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008f2	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv338[ebp], 0
$LN64@draw_high_:
  008fc	6a 7e		 push	 126			; 0000007eH
  008fe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00904	52		 push	 edx
  00905	69 85 d4 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv331[ebp], 1116
  0090f	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR tv338[ebp]
  00915	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0091c	ff d2		 call	 edx
  0091e	85 c0		 test	 eax, eax
  00920	74 09		 je	 SHORT $LN42@draw_high_

; 3508 : 			s = "LOAL-HI";

  00922	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_07CMBMBPC@LOAL?9HI@

; 3509 : 		else

  00929	eb 07		 jmp	 SHORT $LN43@draw_high_
$LN42@draw_high_:

; 3510 : 			s = "LOBL";

  0092b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04EIHLKMGG@LOBL@
$LN43@draw_high_:

; 3511 : 
; 3512 : 	set_2d_mono_font_position (0.37, -0.83);

  00932	51		 push	 ecx
  00933	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf547ae1
  0093b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00940	51		 push	 ecx
  00941	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ebd70a4
  00949	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0094e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3513 : 	x_adjust = 0; //get_mono_font_string_width (s) * -0.5;

  00953	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _x_adjust$[ebp], 0

; 3514 : 	set_mono_font_rel_position (x_adjust, 9);

  0095d	51		 push	 ecx
  0095e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41100000
  00966	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0096b	f3 0f 2a 85 2c
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _x_adjust$[ebp]
  00973	51		 push	 ecx
  00974	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00979	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3515 : 	print_mono_font_string (s);

  0097e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00981	50		 push	 eax
  00982	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3516 : 
; 3517 : 
; 3518 : 	////////////////////////////////////////
; 3519 : 	//
; 3520 : 	// draw field of regard and view boxes
; 3521 : 	//
; 3522 : 	////////////////////////////////////////
; 3523 : 
; 3524 : 	draw_field_of_regard_and_view_boxes ();

  00987	e8 00 00 00 00	 call	 ?draw_field_of_regard_and_view_boxes@@YGXXZ ; draw_field_of_regard_and_view_boxes

; 3525 : }

  0098c	5f		 pop	 edi
  0098d	5e		 pop	 esi
  0098e	5b		 pop	 ebx
  0098f	8b e5		 mov	 esp, ebp
  00991	5d		 pop	 ebp
  00992	c2 08 00	 ret	 8
  00995	0f 1f 00	 npad	 3
$LN66@draw_high_:
  00998	00 00 00 00	 DD	 $LN21@draw_high_
  0099c	00 00 00 00	 DD	 $LN22@draw_high_
  009a0	00 00 00 00	 DD	 $LN23@draw_high_
  009a4	00 00 00 00	 DD	 $LN24@draw_high_
  009a8	00 00 00 00	 DD	 $LN25@draw_high_
  009ac	00 00 00 00	 DD	 $LN26@draw_high_
  009b0	00 00 00 00	 DD	 $LN30@draw_high_
  009b4	00 00 00 00	 DD	 $LN27@draw_high_
  009b8	00 00 00 00	 DD	 $LN28@draw_high_
  009bc	00 00 00 00	 DD	 $LN30@draw_high_
$LN67@draw_high_:
  009c0	00 00 00 00	 DD	 $LN33@draw_high_
  009c4	00 00 00 00	 DD	 $LN35@draw_high_
  009c8	00 00 00 00	 DD	 $LN36@draw_high_
  009cc	00 00 00 00	 DD	 $LN34@draw_high_
  009d0	00 00 00 00	 DD	 $LN37@draw_high_
$LN65@draw_high_:
  009d4	00		 DB	 0
  009d5	04		 DB	 4
  009d6	04		 DB	 4
  009d7	04		 DB	 4
  009d8	04		 DB	 4
  009d9	04		 DB	 4
  009da	04		 DB	 4
  009db	04		 DB	 4
  009dc	04		 DB	 4
  009dd	04		 DB	 4
  009de	04		 DB	 4
  009df	04		 DB	 4
  009e0	04		 DB	 4
  009e1	04		 DB	 4
  009e2	04		 DB	 4
  009e3	04		 DB	 4
  009e4	04		 DB	 4
  009e5	04		 DB	 4
  009e6	04		 DB	 4
  009e7	04		 DB	 4
  009e8	04		 DB	 4
  009e9	04		 DB	 4
  009ea	04		 DB	 4
  009eb	01		 DB	 1
  009ec	01		 DB	 1
  009ed	04		 DB	 4
  009ee	04		 DB	 4
  009ef	04		 DB	 4
  009f0	04		 DB	 4
  009f1	02		 DB	 2
  009f2	02		 DB	 2
  009f3	04		 DB	 4
  009f4	04		 DB	 4
  009f5	04		 DB	 4
  009f6	04		 DB	 4
  009f7	04		 DB	 4
  009f8	04		 DB	 4
  009f9	04		 DB	 4
  009fa	03		 DB	 3
  009fb	03		 DB	 3
?draw_high_action_display@@YGXPAUENTITY@@H@Z ENDP	; draw_high_action_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?set_default_radar_zoomed@@YGXH@Z
_TEXT	SEGMENT
_zoomed$ = 8						; size = 4
?set_default_radar_zoomed@@YGXH@Z PROC			; set_default_radar_zoomed, COMDAT

; 2091 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2092 : 	radar_zoomed = zoomed;	

  00009	8b 45 08	 mov	 eax, DWORD PTR _zoomed$[ebp]
  0000c	a3 00 00 00 00	 mov	 DWORD PTR ?radar_zoomed@@3HA, eax

; 2093 : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?set_default_radar_zoomed@@YGXH@Z ENDP			; set_default_radar_zoomed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?get_default_tads_display_visible@@YGHXZ
_TEXT	SEGMENT
tv70 = -68						; size = 4
?get_default_tads_display_visible@@YGHXZ PROC		; get_default_tads_display_visible, COMDAT

; 12682: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12683: 	return

  00009	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 4
  00010	74 36		 je	 SHORT $LN3@get_defaul
  00012	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 5
  00019	74 2d		 je	 SHORT $LN3@get_defaul
  0001b	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 6
  00022	74 24		 je	 SHORT $LN3@get_defaul
  00024	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 4
  0002b	74 1b		 je	 SHORT $LN3@get_defaul
  0002d	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 5
  00034	74 12		 je	 SHORT $LN3@get_defaul
  00036	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 6
  0003d	74 09		 je	 SHORT $LN3@get_defaul
  0003f	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
  00046	eb 07		 jmp	 SHORT $LN4@get_defaul
$LN3@get_defaul:
  00048	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv70[ebp], 1
$LN4@get_defaul:
  0004f	8b 45 bc	 mov	 eax, DWORD PTR tv70[ebp]

; 12684: 	(
; 12685: 		(lhs_mfd_mode == MFD_MODE_FLIR) ||
; 12686: 		(lhs_mfd_mode == MFD_MODE_DTV) ||
; 12687: 		(lhs_mfd_mode == MFD_MODE_DVO) ||
; 12688: 		(rhs_mfd_mode == MFD_MODE_FLIR) ||
; 12689: 		(rhs_mfd_mode == MFD_MODE_DTV) ||
; 12690: 		(rhs_mfd_mode == MFD_MODE_DVO)
; 12691: 	);
; 12692: }

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
?get_default_tads_display_visible@@YGHXZ ENDP		; get_default_tads_display_visible
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?get_default_mfd_has_focus@@YGHW4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv75 = -76						; size = 4
tv73 = -76						; size = 4
tv71 = -76						; size = 4
tv69 = -76						; size = 4
tv67 = -76						; size = 4
tv65 = -76						; size = 4
_mfd_mode$ = -8						; size = 4
_result$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?get_default_mfd_has_focus@@YGHW4MFD_LOCATIONS@@@Z PROC	; get_default_mfd_has_focus, COMDAT

; 12605: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12606: 	int
; 12607: 		result;
; 12608: 
; 12609: 	mfd_modes
; 12610: 		mfd_mode;
; 12611: 
; 12612: 	if (mfd_location == MFD_LOCATION_LHS)

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	75 0a		 jne	 SHORT $LN4@get_defaul

; 12613: 	{
; 12614: 		mfd_mode = lhs_mfd_mode;

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A
  00014	89 45 f8	 mov	 DWORD PTR _mfd_mode$[ebp], eax

; 12615: 	}
; 12616: 	else

  00017	eb 08		 jmp	 SHORT $LN5@get_defaul
$LN4@get_defaul:

; 12617: 	{
; 12618: 		mfd_mode = rhs_mfd_mode;

  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A
  0001e	89 45 f8	 mov	 DWORD PTR _mfd_mode$[ebp], eax
$LN5@get_defaul:

; 12619: 	}
; 12620: 
; 12621: 	switch (target_acquisition_system)

  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; target_acquisition_system
  00026	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  00029	8b 4d b4	 mov	 ecx, DWORD PTR tv65[ebp]
  0002c	83 e9 01	 sub	 ecx, 1
  0002f	89 4d b4	 mov	 DWORD PTR tv65[ebp], ecx
  00032	83 7d b4 04	 cmp	 DWORD PTR tv65[ebp], 4
  00036	0f 87 a0 00 00
	00		 ja	 $LN11@get_defaul
  0003c	8b 55 b4	 mov	 edx, DWORD PTR tv65[ebp]
  0003f	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN23@get_defaul[edx*4]
$LN6@get_defaul:

; 12622: 	{
; 12623: 		////////////////////////////////////////
; 12624: 		case TARGET_ACQUISITION_SYSTEM_GROUND_RADAR:
; 12625: 		////////////////////////////////////////
; 12626: 		{
; 12627: 			result = (mfd_mode == MFD_MODE_GROUND_RADAR);

  00046	83 7d f8 02	 cmp	 DWORD PTR _mfd_mode$[ebp], 2
  0004a	75 09		 jne	 SHORT $LN13@get_defaul
  0004c	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  00053	eb 07		 jmp	 SHORT $LN14@get_defaul
$LN13@get_defaul:
  00055	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$LN14@get_defaul:
  0005c	8b 45 b4	 mov	 eax, DWORD PTR tv67[ebp]
  0005f	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 12628: 
; 12629: 			break;

  00062	eb 7f		 jmp	 SHORT $LN2@get_defaul
$LN7@get_defaul:

; 12630: 		}
; 12631: 		////////////////////////////////////////
; 12632: 		case TARGET_ACQUISITION_SYSTEM_AIR_RADAR:
; 12633: 		////////////////////////////////////////
; 12634: 		{
; 12635: 
; 12636: 			result = (mfd_mode == MFD_MODE_AIR_RADAR);

  00064	83 7d f8 03	 cmp	 DWORD PTR _mfd_mode$[ebp], 3
  00068	75 09		 jne	 SHORT $LN15@get_defaul
  0006a	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  00071	eb 07		 jmp	 SHORT $LN16@get_defaul
$LN15@get_defaul:
  00073	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN16@get_defaul:
  0007a	8b 45 b4	 mov	 eax, DWORD PTR tv69[ebp]
  0007d	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 12637: 
; 12638: 			break;

  00080	eb 61		 jmp	 SHORT $LN2@get_defaul
$LN8@get_defaul:

; 12639: 		}
; 12640: 		////////////////////////////////////////
; 12641: 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 12642: 		////////////////////////////////////////
; 12643: 		{
; 12644: 			result = (mfd_mode == MFD_MODE_FLIR);

  00082	83 7d f8 04	 cmp	 DWORD PTR _mfd_mode$[ebp], 4
  00086	75 09		 jne	 SHORT $LN17@get_defaul
  00088	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv71[ebp], 1
  0008f	eb 07		 jmp	 SHORT $LN18@get_defaul
$LN17@get_defaul:
  00091	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$LN18@get_defaul:
  00098	8b 45 b4	 mov	 eax, DWORD PTR tv71[ebp]
  0009b	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 12645: 
; 12646: 			break;

  0009e	eb 43		 jmp	 SHORT $LN2@get_defaul
$LN9@get_defaul:

; 12647: 		}
; 12648: 		////////////////////////////////////////
; 12649: 		case TARGET_ACQUISITION_SYSTEM_DTV:
; 12650: 		////////////////////////////////////////
; 12651: 		{
; 12652: 			result = (mfd_mode == MFD_MODE_DTV);

  000a0	83 7d f8 05	 cmp	 DWORD PTR _mfd_mode$[ebp], 5
  000a4	75 09		 jne	 SHORT $LN19@get_defaul
  000a6	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv73[ebp], 1
  000ad	eb 07		 jmp	 SHORT $LN20@get_defaul
$LN19@get_defaul:
  000af	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN20@get_defaul:
  000b6	8b 45 b4	 mov	 eax, DWORD PTR tv73[ebp]
  000b9	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 12653: 
; 12654: 			break;

  000bc	eb 25		 jmp	 SHORT $LN2@get_defaul
$LN10@get_defaul:

; 12655: 		}
; 12656: 		////////////////////////////////////////
; 12657: 		case TARGET_ACQUISITION_SYSTEM_DVO:
; 12658: 		////////////////////////////////////////
; 12659: 		{
; 12660: 			result = (mfd_mode == MFD_MODE_DVO);

  000be	83 7d f8 06	 cmp	 DWORD PTR _mfd_mode$[ebp], 6
  000c2	75 09		 jne	 SHORT $LN21@get_defaul
  000c4	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv75[ebp], 1
  000cb	eb 07		 jmp	 SHORT $LN22@get_defaul
$LN21@get_defaul:
  000cd	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$LN22@get_defaul:
  000d4	8b 45 b4	 mov	 eax, DWORD PTR tv75[ebp]
  000d7	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 12661: 
; 12662: 			break;

  000da	eb 07		 jmp	 SHORT $LN2@get_defaul
$LN11@get_defaul:

; 12663: 		}
; 12664: 		////////////////////////////////////////
; 12665: 		default:
; 12666: 		////////////////////////////////////////
; 12667: 		{
; 12668: 			result = FALSE;

  000dc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0
$LN2@get_defaul:

; 12669: 
; 12670: 			break;
; 12671: 		}
; 12672: 	}
; 12673: 
; 12674: 	return (result);

  000e3	8b 45 fc	 mov	 eax, DWORD PTR _result$[ebp]

; 12675: }

  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi
  000e8	5b		 pop	 ebx
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 04 00	 ret	 4
  000ef	90		 npad	 1
$LN23@get_defaul:
  000f0	00 00 00 00	 DD	 $LN6@get_defaul
  000f4	00 00 00 00	 DD	 $LN7@get_defaul
  000f8	00 00 00 00	 DD	 $LN8@get_defaul
  000fc	00 00 00 00	 DD	 $LN9@get_defaul
  00100	00 00 00 00	 DD	 $LN10@get_defaul
?get_default_mfd_has_focus@@YGHW4MFD_LOCATIONS@@@Z ENDP	; get_default_mfd_has_focus
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?toggle_default_rhs_mfd_on_off@@YGXXZ
_TEXT	SEGMENT
?toggle_default_rhs_mfd_on_off@@YGXXZ PROC		; toggle_default_rhs_mfd_on_off, COMDAT

; 12588: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12589: 	if (rhs_mfd_mode != MFD_MODE_OFF)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 0
  00010	74 0b		 je	 SHORT $LN2@toggle_def

; 12590: 	{
; 12591: 		select_default_mfd_mode (MFD_MODE_OFF, MFD_LOCATION_RHS);

  00012	6a 01		 push	 1
  00014	6a 00		 push	 0
  00016	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12592: 	}
; 12593: 	else

  0001b	eb 09		 jmp	 SHORT $LN1@toggle_def
$LN2@toggle_def:

; 12594: 	{
; 12595: 		select_default_mfd_mode (MFD_MODE_FLIGHT, MFD_LOCATION_RHS);

  0001d	6a 01		 push	 1
  0001f	6a 0d		 push	 13			; 0000000dH
  00021	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode
$LN1@toggle_def:

; 12596: //		select_next_default_rhs_mfd ();
; 12597: 	}
; 12598: }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?toggle_default_rhs_mfd_on_off@@YGXXZ ENDP		; toggle_default_rhs_mfd_on_off
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?toggle_default_lhs_mfd_on_off@@YGXXZ
_TEXT	SEGMENT
?toggle_default_lhs_mfd_on_off@@YGXXZ PROC		; toggle_default_lhs_mfd_on_off, COMDAT

; 12571: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12572: 	if (lhs_mfd_mode != MFD_MODE_OFF)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 0
  00010	74 0b		 je	 SHORT $LN2@toggle_def

; 12573: 	{
; 12574: 		select_default_mfd_mode (MFD_MODE_OFF, MFD_LOCATION_LHS);

  00012	6a 00		 push	 0
  00014	6a 00		 push	 0
  00016	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12575: 	}
; 12576: 	else

  0001b	eb 09		 jmp	 SHORT $LN1@toggle_def
$LN2@toggle_def:

; 12577: 	{
; 12578: 		select_default_mfd_mode (MFD_MODE_ENGINE, MFD_LOCATION_LHS);

  0001d	6a 00		 push	 0
  0001f	6a 0c		 push	 12			; 0000000cH
  00021	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode
$LN1@toggle_def:

; 12579: //		select_next_default_lhs_mfd ();
; 12580: 	}
; 12581: }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?toggle_default_lhs_mfd_on_off@@YGXXZ ENDP		; toggle_default_lhs_mfd_on_off
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?auto_page_default_ase_mfd@@YGXXZ
_TEXT	SEGMENT
?auto_page_default_ase_mfd@@YGXXZ PROC			; auto_page_default_ase_mfd, COMDAT

; 12457: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12458: 	if (!get_global_ase_auto_page ())

  00009	83 3d 64 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868, 0
  00010	75 05		 jne	 SHORT $LN2@auto_page_

; 12459: 	{
; 12460: 		return;

  00012	e9 1d 01 00 00	 jmp	 $LN1@auto_page_
$LN2@auto_page_:

; 12461: 	}
; 12462: 
; 12463: 	////////////////////////////////////////
; 12464: 	//
; 12465: 	// select viewed large MFD
; 12466: 	//
; 12467: 	////////////////////////////////////////
; 12468: 
; 12469: 	if (get_view_mode () == VIEW_MODE_COCKPIT_PANEL_SPECIAL_APACHE_LHS_MFD)

  00017	83 3d 00 00 00
	00 1c		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 28 ; view_mode, 0000001cH
  0001e	75 1b		 jne	 SHORT $LN3@auto_page_

; 12470: 	{
; 12471: 		if (!default_damage.lh_mfd)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  00025	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  00028	83 e0 01	 and	 eax, 1
  0002b	75 0e		 jne	 SHORT $LN3@auto_page_

; 12472: 		{
; 12473: 			select_default_mfd_mode (MFD_MODE_ASE, MFD_LOCATION_LHS);

  0002d	6a 00		 push	 0
  0002f	6a 09		 push	 9
  00031	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12474: 
; 12475: 			return;

  00036	e9 f9 00 00 00	 jmp	 $LN1@auto_page_
$LN3@auto_page_:

; 12476: 		}
; 12477: 	}
; 12478: 
; 12479: 	if (get_view_mode () == VIEW_MODE_COCKPIT_PANEL_SPECIAL_APACHE_RHS_MFD)

  0003b	83 3d 00 00 00
	00 1d		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 29 ; view_mode, 0000001dH
  00042	75 1b		 jne	 SHORT $LN5@auto_page_

; 12480: 	{
; 12481: 		if (!default_damage.rh_mfd)

  00044	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  00049	c1 e8 11	 shr	 eax, 17			; 00000011H
  0004c	83 e0 01	 and	 eax, 1
  0004f	75 0e		 jne	 SHORT $LN5@auto_page_

; 12482: 		{
; 12483: 			select_default_mfd_mode (MFD_MODE_ASE, MFD_LOCATION_RHS);

  00051	6a 01		 push	 1
  00053	6a 09		 push	 9
  00055	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12484: 
; 12485: 			return;

  0005a	e9 d5 00 00 00	 jmp	 $LN1@auto_page_
$LN5@auto_page_:

; 12486: 		}
; 12487: 	}
; 12488: 
; 12489: 	////////////////////////////////////////
; 12490: 	//
; 12491: 	// check if already displayed
; 12492: 	//
; 12493: 	////////////////////////////////////////
; 12494: 
; 12495: 	if (lhs_mfd_mode == MFD_MODE_ASE)

  0005f	83 3d 00 00 00
	00 09		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 9
  00066	75 05		 jne	 SHORT $LN7@auto_page_

; 12496: 	{
; 12497: 		return;

  00068	e9 c7 00 00 00	 jmp	 $LN1@auto_page_
$LN7@auto_page_:

; 12498: 	}
; 12499: 
; 12500: 	if (rhs_mfd_mode == MFD_MODE_ASE)

  0006d	83 3d 00 00 00
	00 09		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 9
  00074	75 05		 jne	 SHORT $LN8@auto_page_

; 12501: 	{
; 12502: 		return;

  00076	e9 b9 00 00 00	 jmp	 $LN1@auto_page_
$LN8@auto_page_:

; 12503: 	}
; 12504: 
; 12505: 	////////////////////////////////////////
; 12506: 	//
; 12507: 	// select undamaged off MFD
; 12508: 	//
; 12509: 	////////////////////////////////////////
; 12510: 
; 12511: 	if ((lhs_mfd_mode == MFD_MODE_OFF) && (!default_damage.lh_mfd))

  0007b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 0
  00082	75 1b		 jne	 SHORT $LN9@auto_page_
  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  00089	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  0008c	83 e0 01	 and	 eax, 1
  0008f	75 0e		 jne	 SHORT $LN9@auto_page_

; 12512: 	{
; 12513: 		select_default_mfd_mode (MFD_MODE_ASE, MFD_LOCATION_LHS);

  00091	6a 00		 push	 0
  00093	6a 09		 push	 9
  00095	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12514: 
; 12515: 		return;

  0009a	e9 95 00 00 00	 jmp	 $LN1@auto_page_
$LN9@auto_page_:

; 12516: 	}
; 12517: 
; 12518: 	if ((rhs_mfd_mode == MFD_MODE_OFF) && (!default_damage.rh_mfd))

  0009f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 0
  000a6	75 18		 jne	 SHORT $LN10@auto_page_
  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  000ad	c1 e8 11	 shr	 eax, 17			; 00000011H
  000b0	83 e0 01	 and	 eax, 1
  000b3	75 0b		 jne	 SHORT $LN10@auto_page_

; 12519: 	{
; 12520: 		select_default_mfd_mode (MFD_MODE_ASE, MFD_LOCATION_RHS);

  000b5	6a 01		 push	 1
  000b7	6a 09		 push	 9
  000b9	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12521: 
; 12522: 		return;

  000be	eb 74		 jmp	 SHORT $LN1@auto_page_
$LN10@auto_page_:

; 12523: 	}
; 12524: 
; 12525: 	////////////////////////////////////////
; 12526: 	//
; 12527: 	// select unfocused MFD
; 12528: 	//
; 12529: 	////////////////////////////////////////
; 12530: 
; 12531: 	if ((!get_default_mfd_has_focus (MFD_LOCATION_LHS)) && (!default_damage.lh_mfd))

  000c0	6a 00		 push	 0
  000c2	e8 00 00 00 00	 call	 ?get_default_mfd_has_focus@@YGHW4MFD_LOCATIONS@@@Z ; get_default_mfd_has_focus
  000c7	85 c0		 test	 eax, eax
  000c9	75 18		 jne	 SHORT $LN11@auto_page_
  000cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  000d0	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  000d3	83 e0 01	 and	 eax, 1
  000d6	75 0b		 jne	 SHORT $LN11@auto_page_

; 12532: 	{
; 12533: 		select_default_mfd_mode (MFD_MODE_ASE, MFD_LOCATION_LHS);

  000d8	6a 00		 push	 0
  000da	6a 09		 push	 9
  000dc	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12534: 
; 12535: 		return;

  000e1	eb 51		 jmp	 SHORT $LN1@auto_page_
$LN11@auto_page_:

; 12536: 	}
; 12537: 
; 12538: 	if ((!get_default_mfd_has_focus (MFD_LOCATION_RHS)) && (!default_damage.rh_mfd))

  000e3	6a 01		 push	 1
  000e5	e8 00 00 00 00	 call	 ?get_default_mfd_has_focus@@YGHW4MFD_LOCATIONS@@@Z ; get_default_mfd_has_focus
  000ea	85 c0		 test	 eax, eax
  000ec	75 18		 jne	 SHORT $LN12@auto_page_
  000ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  000f3	c1 e8 11	 shr	 eax, 17			; 00000011H
  000f6	83 e0 01	 and	 eax, 1
  000f9	75 0b		 jne	 SHORT $LN12@auto_page_

; 12539: 	{
; 12540: 		select_default_mfd_mode (MFD_MODE_ASE, MFD_LOCATION_RHS);

  000fb	6a 01		 push	 1
  000fd	6a 09		 push	 9
  000ff	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12541: 
; 12542: 		return;

  00104	eb 2e		 jmp	 SHORT $LN1@auto_page_
$LN12@auto_page_:

; 12543: 	}
; 12544: 
; 12545: 	////////////////////////////////////////
; 12546: 	//
; 12547: 	// select undamaged MFD
; 12548: 	//
; 12549: 	////////////////////////////////////////
; 12550: 
; 12551: 	if (!default_damage.lh_mfd)

  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  0010b	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  0010e	83 e0 01	 and	 eax, 1
  00111	75 0b		 jne	 SHORT $LN13@auto_page_

; 12552: 	{
; 12553: 		select_default_mfd_mode (MFD_MODE_ASE, MFD_LOCATION_LHS);

  00113	6a 00		 push	 0
  00115	6a 09		 push	 9
  00117	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12554: 
; 12555: 		return;

  0011c	eb 16		 jmp	 SHORT $LN1@auto_page_
$LN13@auto_page_:

; 12556: 	}
; 12557: 
; 12558: 	if (!default_damage.rh_mfd)

  0011e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  00123	c1 e8 11	 shr	 eax, 17			; 00000011H
  00126	83 e0 01	 and	 eax, 1
  00129	75 09		 jne	 SHORT $LN1@auto_page_

; 12559: 	{
; 12560: 		select_default_mfd_mode (MFD_MODE_ASE, MFD_LOCATION_RHS);

  0012b	6a 01		 push	 1
  0012d	6a 09		 push	 9
  0012f	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode
$LN1@auto_page_:

; 12561: 
; 12562: 		return;
; 12563: 	}
; 12564: }

  00134	5f		 pop	 edi
  00135	5e		 pop	 esi
  00136	5b		 pop	 ebx
  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c3		 ret	 0
?auto_page_default_ase_mfd@@YGXXZ ENDP			; auto_page_default_ase_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?toggle_default_ase_auto_page@@YGXXZ
_TEXT	SEGMENT
?toggle_default_ase_auto_page@@YGXXZ PROC		; toggle_default_ase_auto_page, COMDAT

; 12448: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12449: 	set_global_ase_auto_page (get_global_ase_auto_page () ^ 1);

  00009	a1 64 03 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868
  0000e	83 f0 01	 xor	 eax, 1
  00011	a3 64 03 00 00	 mov	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868, eax

; 12450: }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?toggle_default_ase_auto_page@@YGXXZ ENDP		; toggle_default_ase_auto_page
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?select_default_tads_mfd@@YGXXZ
_TEXT	SEGMENT
?select_default_tads_mfd@@YGXXZ PROC			; select_default_tads_mfd, COMDAT

; 12376: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12377: 	if (get_view_mode () == VIEW_MODE_COCKPIT_PANEL_SPECIAL_APACHE_LHS_MFD)

  00009	83 3d 00 00 00
	00 1c		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 28 ; view_mode, 0000001cH
  00010	75 1f		 jne	 SHORT $LN2@select_def

; 12378: 	{
; 12379: 		if (!default_damage.lh_mfd)

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  00017	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  0001a	83 e0 01	 and	 eax, 1
  0001d	75 12		 jne	 SHORT $LN2@select_def

; 12380: 		{
; 12381: 			select_default_mfd_mode (get_mfd_mode_for_eo_sensor (), MFD_LOCATION_LHS);

  0001f	6a 00		 push	 0
  00021	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12382: 
; 12383: 			return;

  0002c	e9 17 01 00 00	 jmp	 $LN1@select_def
$LN2@select_def:

; 12384: 		}
; 12385: 	}
; 12386: 
; 12387: 	if (get_view_mode () == VIEW_MODE_COCKPIT_PANEL_SPECIAL_APACHE_RHS_MFD)

  00031	83 3d 00 00 00
	00 1d		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 29 ; view_mode, 0000001dH
  00038	75 1f		 jne	 SHORT $LN4@select_def

; 12388: 	{
; 12389: 		if (!default_damage.rh_mfd)

  0003a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  0003f	c1 e8 11	 shr	 eax, 17			; 00000011H
  00042	83 e0 01	 and	 eax, 1
  00045	75 12		 jne	 SHORT $LN4@select_def

; 12390: 		{
; 12391: 			select_default_mfd_mode (get_mfd_mode_for_eo_sensor (), MFD_LOCATION_RHS);

  00047	6a 01		 push	 1
  00049	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12392: 
; 12393: 			return;

  00054	e9 ef 00 00 00	 jmp	 $LN1@select_def
$LN4@select_def:

; 12394: 		}
; 12395: 	}
; 12396: 
; 12397: 	if (tsd_tads_underlay_active)

  00059	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?tsd_tads_underlay_active@@3FA
  00060	85 c0		 test	 eax, eax
  00062	74 0a		 je	 SHORT $LN6@select_def

; 12398: 		tsd_underlay = TSD_UNDERLAY_NONE;

  00064	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 0
$LN6@select_def:

; 12399: 
; 12400: 	if ((lhs_mfd_mode == MFD_MODE_FLIR) || (lhs_mfd_mode == MFD_MODE_DTV) || (lhs_mfd_mode == MFD_MODE_DVO))

  0006e	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 4
  00075	74 12		 je	 SHORT $LN8@select_def
  00077	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 5
  0007e	74 09		 je	 SHORT $LN8@select_def
  00080	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 6
  00087	75 12		 jne	 SHORT $LN7@select_def
$LN8@select_def:

; 12401: 	{
; 12402: 		select_default_mfd_mode (get_mfd_mode_for_eo_sensor (), MFD_LOCATION_LHS);

  00089	6a 00		 push	 0
  0008b	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12403: 
; 12404: 		return;

  00096	e9 ad 00 00 00	 jmp	 $LN1@select_def
$LN7@select_def:

; 12405: 	}
; 12406: 
; 12407: 	if ((rhs_mfd_mode == MFD_MODE_FLIR) || (rhs_mfd_mode == MFD_MODE_DTV) || (rhs_mfd_mode == MFD_MODE_DVO))

  0009b	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 4
  000a2	74 12		 je	 SHORT $LN10@select_def
  000a4	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 5
  000ab	74 09		 je	 SHORT $LN10@select_def
  000ad	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 6
  000b4	75 12		 jne	 SHORT $LN9@select_def
$LN10@select_def:

; 12408: 	{
; 12409: 		select_default_mfd_mode (get_mfd_mode_for_eo_sensor (), MFD_LOCATION_RHS);

  000b6	6a 01		 push	 1
  000b8	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12410: 
; 12411: 		return;

  000c3	e9 80 00 00 00	 jmp	 $LN1@select_def
$LN9@select_def:

; 12412: 	}
; 12413: 
; 12414: 	if ((lhs_mfd_mode == MFD_MODE_OFF) && (!default_damage.lh_mfd))

  000c8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 0
  000cf	75 1c		 jne	 SHORT $LN11@select_def
  000d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  000d6	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  000d9	83 e0 01	 and	 eax, 1
  000dc	75 0f		 jne	 SHORT $LN11@select_def

; 12415: 	{
; 12416: 		select_default_mfd_mode (get_mfd_mode_for_eo_sensor (), MFD_LOCATION_LHS);

  000de	6a 00		 push	 0
  000e0	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12417: 
; 12418: 		return;

  000eb	eb 5b		 jmp	 SHORT $LN1@select_def
$LN11@select_def:

; 12419: 	}
; 12420: 
; 12421: 	if ((rhs_mfd_mode == MFD_MODE_OFF) && (!default_damage.rh_mfd))

  000ed	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 0
  000f4	75 1c		 jne	 SHORT $LN12@select_def
  000f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  000fb	c1 e8 11	 shr	 eax, 17			; 00000011H
  000fe	83 e0 01	 and	 eax, 1
  00101	75 0f		 jne	 SHORT $LN12@select_def

; 12422: 	{
; 12423: 		select_default_mfd_mode (get_mfd_mode_for_eo_sensor (), MFD_LOCATION_RHS);

  00103	6a 01		 push	 1
  00105	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12424: 
; 12425: 		return;

  00110	eb 36		 jmp	 SHORT $LN1@select_def
$LN12@select_def:

; 12426: 	}
; 12427: 
; 12428: 	if (!default_damage.lh_mfd)

  00112	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  00117	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  0011a	83 e0 01	 and	 eax, 1
  0011d	75 0f		 jne	 SHORT $LN13@select_def

; 12429: 	{
; 12430: 		select_default_mfd_mode (get_mfd_mode_for_eo_sensor (), MFD_LOCATION_LHS);

  0011f	6a 00		 push	 0
  00121	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00126	50		 push	 eax
  00127	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12431: 
; 12432: 		return;

  0012c	eb 1a		 jmp	 SHORT $LN1@select_def
$LN13@select_def:

; 12433: 	}
; 12434: 
; 12435: 	if (!default_damage.rh_mfd)

  0012e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  00133	c1 e8 11	 shr	 eax, 17			; 00000011H
  00136	83 e0 01	 and	 eax, 1
  00139	75 0d		 jne	 SHORT $LN1@select_def

; 12436: 	{
; 12437: 		select_default_mfd_mode (get_mfd_mode_for_eo_sensor (), MFD_LOCATION_RHS);

  0013b	6a 01		 push	 1
  0013d	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00142	50		 push	 eax
  00143	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode
$LN1@select_def:

; 12438: 
; 12439: 		return;
; 12440: 	}
; 12441: }

  00148	5f		 pop	 edi
  00149	5e		 pop	 esi
  0014a	5b		 pop	 ebx
  0014b	8b e5		 mov	 esp, ebp
  0014d	5d		 pop	 ebp
  0014e	c3		 ret	 0
?select_default_tads_mfd@@YGXXZ ENDP			; select_default_tads_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?select_default_air_radar_mfd@@YGXXZ
_TEXT	SEGMENT
?select_default_air_radar_mfd@@YGXXZ PROC		; select_default_air_radar_mfd, COMDAT

; 12297: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12298: 	if (get_view_mode () == VIEW_MODE_COCKPIT_PANEL_SPECIAL_APACHE_LHS_MFD)

  00009	83 3d 00 00 00
	00 1c		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 28 ; view_mode, 0000001cH
  00010	75 1b		 jne	 SHORT $LN2@select_def

; 12299: 	{
; 12300: 		if (!default_damage.lh_mfd)

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  00017	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  0001a	83 e0 01	 and	 eax, 1
  0001d	75 0e		 jne	 SHORT $LN2@select_def

; 12301: 		{
; 12302: 			select_default_mfd_mode (MFD_MODE_AIR_RADAR, MFD_LOCATION_LHS);

  0001f	6a 00		 push	 0
  00021	6a 03		 push	 3
  00023	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12303: 
; 12304: 			return;

  00028	e9 db 00 00 00	 jmp	 $LN1@select_def
$LN2@select_def:

; 12305: 		}
; 12306: 	}
; 12307: 
; 12308: 	if (get_view_mode () == VIEW_MODE_COCKPIT_PANEL_SPECIAL_APACHE_RHS_MFD)

  0002d	83 3d 00 00 00
	00 1d		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 29 ; view_mode, 0000001dH
  00034	75 1b		 jne	 SHORT $LN4@select_def

; 12309: 	{
; 12310: 		if (!default_damage.rh_mfd)

  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  0003b	c1 e8 11	 shr	 eax, 17			; 00000011H
  0003e	83 e0 01	 and	 eax, 1
  00041	75 0e		 jne	 SHORT $LN4@select_def

; 12311: 		{
; 12312: 			select_default_mfd_mode (MFD_MODE_AIR_RADAR, MFD_LOCATION_RHS);

  00043	6a 01		 push	 1
  00045	6a 03		 push	 3
  00047	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12313: 
; 12314: 			return;

  0004c	e9 b7 00 00 00	 jmp	 $LN1@select_def
$LN4@select_def:

; 12315: 		}
; 12316: 	}
; 12317: 
; 12318: 	if (lhs_mfd_mode == MFD_MODE_AIR_RADAR)

  00051	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 3
  00058	75 05		 jne	 SHORT $LN6@select_def

; 12319: 	{
; 12320: 		return;

  0005a	e9 a9 00 00 00	 jmp	 $LN1@select_def
$LN6@select_def:

; 12321: 	}
; 12322: 
; 12323: 	if (rhs_mfd_mode == MFD_MODE_AIR_RADAR)

  0005f	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 3
  00066	75 05		 jne	 SHORT $LN7@select_def

; 12324: 	{
; 12325: 		return;

  00068	e9 9b 00 00 00	 jmp	 $LN1@select_def
$LN7@select_def:

; 12326: 	}
; 12327: 
; 12328: 	if (lhs_mfd_mode == MFD_MODE_GROUND_RADAR)

  0006d	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 2
  00074	75 0e		 jne	 SHORT $LN8@select_def

; 12329: 	{
; 12330: 		select_default_mfd_mode (MFD_MODE_AIR_RADAR, MFD_LOCATION_LHS);

  00076	6a 00		 push	 0
  00078	6a 03		 push	 3
  0007a	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12331: 
; 12332: 		return;

  0007f	e9 84 00 00 00	 jmp	 $LN1@select_def
$LN8@select_def:

; 12333: 	}
; 12334: 
; 12335: 	if (rhs_mfd_mode == MFD_MODE_GROUND_RADAR)

  00084	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 2
  0008b	75 0b		 jne	 SHORT $LN9@select_def

; 12336: 	{
; 12337: 		select_default_mfd_mode (MFD_MODE_AIR_RADAR, MFD_LOCATION_RHS);

  0008d	6a 01		 push	 1
  0008f	6a 03		 push	 3
  00091	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12338: 
; 12339: 		return;

  00096	eb 70		 jmp	 SHORT $LN1@select_def
$LN9@select_def:

; 12340: 	}
; 12341: 
; 12342: 	if ((lhs_mfd_mode == MFD_MODE_OFF) && (!default_damage.lh_mfd))

  00098	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 0
  0009f	75 18		 jne	 SHORT $LN10@select_def
  000a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  000a6	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  000a9	83 e0 01	 and	 eax, 1
  000ac	75 0b		 jne	 SHORT $LN10@select_def

; 12343: 	{
; 12344: 		select_default_mfd_mode (MFD_MODE_AIR_RADAR, MFD_LOCATION_LHS);

  000ae	6a 00		 push	 0
  000b0	6a 03		 push	 3
  000b2	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12345: 
; 12346: 		return;

  000b7	eb 4f		 jmp	 SHORT $LN1@select_def
$LN10@select_def:

; 12347: 	}
; 12348: 
; 12349: 	if ((rhs_mfd_mode == MFD_MODE_OFF) && (!default_damage.rh_mfd))

  000b9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 0
  000c0	75 18		 jne	 SHORT $LN11@select_def
  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  000c7	c1 e8 11	 shr	 eax, 17			; 00000011H
  000ca	83 e0 01	 and	 eax, 1
  000cd	75 0b		 jne	 SHORT $LN11@select_def

; 12350: 	{
; 12351: 		select_default_mfd_mode (MFD_MODE_AIR_RADAR, MFD_LOCATION_RHS);

  000cf	6a 01		 push	 1
  000d1	6a 03		 push	 3
  000d3	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12352: 
; 12353: 		return;

  000d8	eb 2e		 jmp	 SHORT $LN1@select_def
$LN11@select_def:

; 12354: 	}
; 12355: 
; 12356: 	if (!default_damage.lh_mfd)

  000da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  000df	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  000e2	83 e0 01	 and	 eax, 1
  000e5	75 0b		 jne	 SHORT $LN12@select_def

; 12357: 	{
; 12358: 		select_default_mfd_mode (MFD_MODE_AIR_RADAR, MFD_LOCATION_LHS);

  000e7	6a 00		 push	 0
  000e9	6a 03		 push	 3
  000eb	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12359: 
; 12360: 		return;

  000f0	eb 16		 jmp	 SHORT $LN1@select_def
$LN12@select_def:

; 12361: 	}
; 12362: 
; 12363: 	if (!default_damage.rh_mfd)

  000f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  000f7	c1 e8 11	 shr	 eax, 17			; 00000011H
  000fa	83 e0 01	 and	 eax, 1
  000fd	75 09		 jne	 SHORT $LN1@select_def

; 12364: 	{
; 12365: 		select_default_mfd_mode (MFD_MODE_AIR_RADAR, MFD_LOCATION_RHS);

  000ff	6a 01		 push	 1
  00101	6a 03		 push	 3
  00103	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode
$LN1@select_def:

; 12366: 
; 12367: 		return;
; 12368: 	}
; 12369: }

  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	5b		 pop	 ebx
  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c3		 ret	 0
?select_default_air_radar_mfd@@YGXXZ ENDP		; select_default_air_radar_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?select_default_ground_radar_mfd@@YGXXZ
_TEXT	SEGMENT
?select_default_ground_radar_mfd@@YGXXZ PROC		; select_default_ground_radar_mfd, COMDAT

; 12225: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12226: 	if (get_view_mode () == VIEW_MODE_COCKPIT_PANEL_SPECIAL_APACHE_LHS_MFD)

  00009	83 3d 00 00 00
	00 1c		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 28 ; view_mode, 0000001cH
  00010	75 1b		 jne	 SHORT $LN2@select_def

; 12227: 	{
; 12228: 		if (!default_damage.lh_mfd)

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  00017	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  0001a	83 e0 01	 and	 eax, 1
  0001d	75 0e		 jne	 SHORT $LN2@select_def

; 12229: 		{
; 12230: 			select_default_mfd_mode (MFD_MODE_GROUND_RADAR, MFD_LOCATION_LHS);

  0001f	6a 00		 push	 0
  00021	6a 02		 push	 2
  00023	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12231: 
; 12232: 			return;

  00028	e9 d6 00 00 00	 jmp	 $LN1@select_def
$LN2@select_def:

; 12233: 		}
; 12234: 	}
; 12235: 
; 12236: 	if (get_view_mode () == VIEW_MODE_COCKPIT_PANEL_SPECIAL_APACHE_RHS_MFD)

  0002d	83 3d 00 00 00
	00 1d		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 29 ; view_mode, 0000001dH
  00034	75 1b		 jne	 SHORT $LN4@select_def

; 12237: 	{
; 12238: 		if (!default_damage.rh_mfd)

  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  0003b	c1 e8 11	 shr	 eax, 17			; 00000011H
  0003e	83 e0 01	 and	 eax, 1
  00041	75 0e		 jne	 SHORT $LN4@select_def

; 12239: 		{
; 12240: 			select_default_mfd_mode (MFD_MODE_GROUND_RADAR, MFD_LOCATION_RHS);

  00043	6a 01		 push	 1
  00045	6a 02		 push	 2
  00047	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12241: 
; 12242: 			return;

  0004c	e9 b2 00 00 00	 jmp	 $LN1@select_def
$LN4@select_def:

; 12243: 		}
; 12244: 	}
; 12245: 
; 12246: 	if (lhs_mfd_mode == MFD_MODE_GROUND_RADAR || rhs_mfd_mode == MFD_MODE_GROUND_RADAR)

  00051	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 2
  00058	74 09		 je	 SHORT $LN7@select_def
  0005a	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 2
  00061	75 05		 jne	 SHORT $LN6@select_def
$LN7@select_def:

; 12247: 		return;

  00063	e9 9b 00 00 00	 jmp	 $LN1@select_def
$LN6@select_def:

; 12248: 
; 12249: 	if (lhs_mfd_mode == MFD_MODE_AIR_RADAR)

  00068	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 3
  0006f	75 0e		 jne	 SHORT $LN8@select_def

; 12250: 	{
; 12251: 		select_default_mfd_mode (MFD_MODE_GROUND_RADAR, MFD_LOCATION_LHS);

  00071	6a 00		 push	 0
  00073	6a 02		 push	 2
  00075	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12252: 
; 12253: 		return;

  0007a	e9 84 00 00 00	 jmp	 $LN1@select_def
$LN8@select_def:

; 12254: 	}
; 12255: 
; 12256: 	if (rhs_mfd_mode == MFD_MODE_AIR_RADAR)

  0007f	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 3
  00086	75 0b		 jne	 SHORT $LN9@select_def

; 12257: 	{
; 12258: 		select_default_mfd_mode (MFD_MODE_GROUND_RADAR, MFD_LOCATION_RHS);

  00088	6a 01		 push	 1
  0008a	6a 02		 push	 2
  0008c	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12259: 
; 12260: 		return;

  00091	eb 70		 jmp	 SHORT $LN1@select_def
$LN9@select_def:

; 12261: 	}
; 12262: 
; 12263: 	if ((lhs_mfd_mode == MFD_MODE_OFF) && (!default_damage.lh_mfd))

  00093	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 0
  0009a	75 18		 jne	 SHORT $LN10@select_def
  0009c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  000a1	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  000a4	83 e0 01	 and	 eax, 1
  000a7	75 0b		 jne	 SHORT $LN10@select_def

; 12264: 	{
; 12265: 		select_default_mfd_mode (MFD_MODE_GROUND_RADAR, MFD_LOCATION_LHS);

  000a9	6a 00		 push	 0
  000ab	6a 02		 push	 2
  000ad	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12266: 
; 12267: 		return;

  000b2	eb 4f		 jmp	 SHORT $LN1@select_def
$LN10@select_def:

; 12268: 	}
; 12269: 
; 12270: 	if ((rhs_mfd_mode == MFD_MODE_OFF) && (!default_damage.rh_mfd))

  000b4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 0
  000bb	75 18		 jne	 SHORT $LN11@select_def
  000bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  000c2	c1 e8 11	 shr	 eax, 17			; 00000011H
  000c5	83 e0 01	 and	 eax, 1
  000c8	75 0b		 jne	 SHORT $LN11@select_def

; 12271: 	{
; 12272: 		select_default_mfd_mode (MFD_MODE_GROUND_RADAR, MFD_LOCATION_RHS);

  000ca	6a 01		 push	 1
  000cc	6a 02		 push	 2
  000ce	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12273: 
; 12274: 		return;

  000d3	eb 2e		 jmp	 SHORT $LN1@select_def
$LN11@select_def:

; 12275: 	}
; 12276: 
; 12277: 	if (!default_damage.lh_mfd)

  000d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  000da	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  000dd	83 e0 01	 and	 eax, 1
  000e0	75 0b		 jne	 SHORT $LN12@select_def

; 12278: 	{
; 12279: 		select_default_mfd_mode (MFD_MODE_GROUND_RADAR, MFD_LOCATION_LHS);

  000e2	6a 00		 push	 0
  000e4	6a 02		 push	 2
  000e6	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12280: 
; 12281: 		return;

  000eb	eb 16		 jmp	 SHORT $LN1@select_def
$LN12@select_def:

; 12282: 	}
; 12283: 
; 12284: 	if (!default_damage.rh_mfd)

  000ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  000f2	c1 e8 11	 shr	 eax, 17			; 00000011H
  000f5	83 e0 01	 and	 eax, 1
  000f8	75 09		 jne	 SHORT $LN1@select_def

; 12285: 	{
; 12286: 		select_default_mfd_mode (MFD_MODE_GROUND_RADAR, MFD_LOCATION_RHS);

  000fa	6a 01		 push	 1
  000fc	6a 02		 push	 2
  000fe	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode
$LN1@select_def:

; 12287: 
; 12288: 		return;
; 12289: 	}
; 12290: }

  00103	5f		 pop	 edi
  00104	5e		 pop	 esi
  00105	5b		 pop	 ebx
  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c3		 ret	 0
?select_default_ground_radar_mfd@@YGXXZ ENDP		; select_default_ground_radar_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?select_previous_default_rhs_mfd@@YGXXZ
_TEXT	SEGMENT
_previous_mfd_mode$ = -4				; size = 4
?select_previous_default_rhs_mfd@@YGXXZ PROC		; select_previous_default_rhs_mfd, COMDAT

; 12201: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12202: 	mfd_modes
; 12203: 		previous_mfd_mode;
; 12204: 
; 12205: 	previous_mfd_mode = get_previous_mfd_mode (rhs_mfd_mode);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?get_previous_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z ; get_previous_mfd_mode
  00014	89 45 fc	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax

; 12206: 
; 12207: 	if (previous_mfd_mode != MFD_MODE_DAMAGED)

  00017	83 7d fc 01	 cmp	 DWORD PTR _previous_mfd_mode$[ebp], 1
  0001b	74 3a		 je	 SHORT $LN2@select_pre

; 12208: 	{
; 12209: 		if (previous_mfd_mode == lhs_mfd_mode)

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _previous_mfd_mode$[ebp]
  00020	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A
  00026	75 0c		 jne	 SHORT $LN3@select_pre

; 12210: 		{
; 12211: 			previous_mfd_mode = get_previous_mfd_mode (previous_mfd_mode);

  00028	8b 45 fc	 mov	 eax, DWORD PTR _previous_mfd_mode$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?get_previous_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z ; get_previous_mfd_mode
  00031	89 45 fc	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax
$LN3@select_pre:

; 12212: 		}
; 12213: 
; 12214: 		ASSERT (previous_mfd_mode != lhs_mfd_mode);

  00034	8b 45 fc	 mov	 eax, DWORD PTR _previous_mfd_mode$[ebp]
  00037	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A
  0003d	75 18		 jne	 SHORT $LN2@select_pre
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_previous_default_rhs_mfd@@YGXXZ@4JA
  00044	83 c0 0d	 add	 eax, 13			; 0000000dH
  00047	50		 push	 eax
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@DBEDONKD@previous_mfd_mode?5?$CB?$DN?5lhs_mfd_mo@
  00052	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_pre:

; 12215: 	}
; 12216: 
; 12217: 	select_default_mfd_mode (previous_mfd_mode, MFD_LOCATION_RHS);

  00057	6a 01		 push	 1
  00059	8b 45 fc	 mov	 eax, DWORD PTR _previous_mfd_mode$[ebp]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12218: }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
?select_previous_default_rhs_mfd@@YGXXZ ENDP		; select_previous_default_rhs_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?select_next_default_rhs_mfd@@YGXXZ
_TEXT	SEGMENT
_next_mfd_mode$ = -4					; size = 4
?select_next_default_rhs_mfd@@YGXXZ PROC		; select_next_default_rhs_mfd, COMDAT

; 12177: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12178: 	mfd_modes
; 12179: 		next_mfd_mode;
; 12180: 
; 12181: 	next_mfd_mode = get_next_mfd_mode (rhs_mfd_mode);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?get_next_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z ; get_next_mfd_mode
  00014	89 45 fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax

; 12182: 
; 12183: 	if (next_mfd_mode != MFD_MODE_DAMAGED)

  00017	83 7d fc 01	 cmp	 DWORD PTR _next_mfd_mode$[ebp], 1
  0001b	74 3a		 je	 SHORT $LN2@select_nex

; 12184: 	{
; 12185: 		if (next_mfd_mode == lhs_mfd_mode)

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]
  00020	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A
  00026	75 0c		 jne	 SHORT $LN3@select_nex

; 12186: 		{
; 12187: 			next_mfd_mode = get_next_mfd_mode (next_mfd_mode);

  00028	8b 45 fc	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?get_next_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z ; get_next_mfd_mode
  00031	89 45 fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax
$LN3@select_nex:

; 12188: 		}
; 12189: 
; 12190: 		ASSERT (next_mfd_mode != lhs_mfd_mode);

  00034	8b 45 fc	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]
  00037	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A
  0003d	75 18		 jne	 SHORT $LN2@select_nex
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_next_default_rhs_mfd@@YGXXZ@4JA
  00044	83 c0 0d	 add	 eax, 13			; 0000000dH
  00047	50		 push	 eax
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@IPOHAJBI@next_mfd_mode?5?$CB?$DN?5lhs_mfd_mode@
  00052	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_nex:

; 12191: 	}
; 12192: 
; 12193: 	select_default_mfd_mode (next_mfd_mode, MFD_LOCATION_RHS);

  00057	6a 01		 push	 1
  00059	8b 45 fc	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12194: }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
?select_next_default_rhs_mfd@@YGXXZ ENDP		; select_next_default_rhs_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?select_previous_default_lhs_mfd@@YGXXZ
_TEXT	SEGMENT
_previous_mfd_mode$ = -4				; size = 4
?select_previous_default_lhs_mfd@@YGXXZ PROC		; select_previous_default_lhs_mfd, COMDAT

; 12153: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12154: 	mfd_modes
; 12155: 		previous_mfd_mode;
; 12156: 
; 12157: 	previous_mfd_mode = get_previous_mfd_mode (lhs_mfd_mode);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?get_previous_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z ; get_previous_mfd_mode
  00014	89 45 fc	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax

; 12158: 
; 12159: 	if (previous_mfd_mode != MFD_MODE_DAMAGED)

  00017	83 7d fc 01	 cmp	 DWORD PTR _previous_mfd_mode$[ebp], 1
  0001b	74 3a		 je	 SHORT $LN2@select_pre

; 12160: 	{
; 12161: 		if (previous_mfd_mode == rhs_mfd_mode)

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _previous_mfd_mode$[ebp]
  00020	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A
  00026	75 0c		 jne	 SHORT $LN3@select_pre

; 12162: 		{
; 12163: 			previous_mfd_mode = get_previous_mfd_mode (previous_mfd_mode);

  00028	8b 45 fc	 mov	 eax, DWORD PTR _previous_mfd_mode$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?get_previous_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z ; get_previous_mfd_mode
  00031	89 45 fc	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax
$LN3@select_pre:

; 12164: 		}
; 12165: 
; 12166: 		ASSERT (previous_mfd_mode != rhs_mfd_mode);

  00034	8b 45 fc	 mov	 eax, DWORD PTR _previous_mfd_mode$[ebp]
  00037	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A
  0003d	75 18		 jne	 SHORT $LN2@select_pre
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_previous_default_lhs_mfd@@YGXXZ@4JA
  00044	83 c0 0d	 add	 eax, 13			; 0000000dH
  00047	50		 push	 eax
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@HPKCEHMJ@previous_mfd_mode?5?$CB?$DN?5rhs_mfd_mo@
  00052	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_pre:

; 12167: 	}
; 12168: 
; 12169: 	select_default_mfd_mode (previous_mfd_mode, MFD_LOCATION_LHS);

  00057	6a 00		 push	 0
  00059	8b 45 fc	 mov	 eax, DWORD PTR _previous_mfd_mode$[ebp]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12170: }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
?select_previous_default_lhs_mfd@@YGXXZ ENDP		; select_previous_default_lhs_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?select_next_default_lhs_mfd@@YGXXZ
_TEXT	SEGMENT
_next_mfd_mode$ = -4					; size = 4
?select_next_default_lhs_mfd@@YGXXZ PROC		; select_next_default_lhs_mfd, COMDAT

; 12129: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 12130: 	mfd_modes
; 12131: 		next_mfd_mode;
; 12132: 
; 12133: 	next_mfd_mode = get_next_mfd_mode (lhs_mfd_mode);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?get_next_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z ; get_next_mfd_mode
  00014	89 45 fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax

; 12134: 
; 12135: 	if (next_mfd_mode != MFD_MODE_DAMAGED)

  00017	83 7d fc 01	 cmp	 DWORD PTR _next_mfd_mode$[ebp], 1
  0001b	74 3a		 je	 SHORT $LN2@select_nex

; 12136: 	{
; 12137: 		if (next_mfd_mode == rhs_mfd_mode)

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]
  00020	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A
  00026	75 0c		 jne	 SHORT $LN3@select_nex

; 12138: 		{
; 12139: 			next_mfd_mode = get_next_mfd_mode (next_mfd_mode);

  00028	8b 45 fc	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?get_next_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z ; get_next_mfd_mode
  00031	89 45 fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax
$LN3@select_nex:

; 12140: 		}
; 12141: 
; 12142: 		ASSERT (next_mfd_mode != rhs_mfd_mode);

  00034	8b 45 fc	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]
  00037	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A
  0003d	75 18		 jne	 SHORT $LN2@select_nex
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_next_default_lhs_mfd@@YGXXZ@4JA
  00044	83 c0 0d	 add	 eax, 13			; 0000000dH
  00047	50		 push	 eax
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@MBAGKDHC@next_mfd_mode?5?$CB?$DN?5rhs_mfd_mode@
  00052	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_nex:

; 12143: 	}
; 12144: 
; 12145: 	select_default_mfd_mode (next_mfd_mode, MFD_LOCATION_LHS);

  00057	6a 00		 push	 0
  00059	8b 45 fc	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 12146: }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
?select_next_default_lhs_mfd@@YGXXZ ENDP		; select_next_default_lhs_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?select_next_default_tsd_underlay_level@@YGXXZ
_TEXT	SEGMENT
tv70 = -72						; size = 4
_tads_active$ = -4					; size = 4
?select_next_default_tsd_underlay_level@@YGXXZ PROC	; select_next_default_tsd_underlay_level, COMDAT

; 11913: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 11914: 	int tads_active = (lhs_mfd_mode == MFD_MODE_DVO
; 11915: 		 || lhs_mfd_mode == MFD_MODE_DTV
; 11916: 		 || lhs_mfd_mode == MFD_MODE_FLIR
; 11917: 		 || rhs_mfd_mode == MFD_MODE_DVO
; 11918: 		 || rhs_mfd_mode == MFD_MODE_DTV
; 11919: 		 || rhs_mfd_mode == MFD_MODE_FLIR);

  00009	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 6
  00010	74 36		 je	 SHORT $LN7@select_nex
  00012	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 5
  00019	74 2d		 je	 SHORT $LN7@select_nex
  0001b	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 4
  00022	74 24		 je	 SHORT $LN7@select_nex
  00024	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 6
  0002b	74 1b		 je	 SHORT $LN7@select_nex
  0002d	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 5
  00034	74 12		 je	 SHORT $LN7@select_nex
  00036	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 4
  0003d	74 09		 je	 SHORT $LN7@select_nex
  0003f	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
  00046	eb 07		 jmp	 SHORT $LN8@select_nex
$LN7@select_nex:
  00048	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv70[ebp], 1
$LN8@select_nex:
  0004f	8b 45 b8	 mov	 eax, DWORD PTR tv70[ebp]
  00052	89 45 fc	 mov	 DWORD PTR _tads_active$[ebp], eax

; 11920: 	
; 11921: 	if (tsd_underlay == TSD_UNDERLAY_NONE)

  00055	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 0
  0005c	75 0c		 jne	 SHORT $LN2@select_nex

; 11922: 		tsd_underlay = TSD_UNDERLAY_MAP;

  0005e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 1
  00068	eb 25		 jmp	 SHORT $LN1@select_nex
$LN2@select_nex:

; 11923: 	else if (tsd_underlay == TSD_UNDERLAY_MAP && !tads_active)

  0006a	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 1
  00071	75 12		 jne	 SHORT $LN4@select_nex
  00073	83 7d fc 00	 cmp	 DWORD PTR _tads_active$[ebp], 0
  00077	75 0c		 jne	 SHORT $LN4@select_nex

; 11924: 		tsd_underlay = TSD_UNDERLAY_TADS;

  00079	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 2

; 11925: 	else

  00083	eb 0a		 jmp	 SHORT $LN1@select_nex
$LN4@select_nex:

; 11926: 		tsd_underlay = TSD_UNDERLAY_NONE;

  00085	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 0
$LN1@select_nex:

; 11927: }

  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
?select_next_default_tsd_underlay_level@@YGXXZ ENDP	; select_next_default_tsd_underlay_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?select_previous_default_tsd_declutter_level@@YGXXZ
_TEXT	SEGMENT
?select_previous_default_tsd_declutter_level@@YGXXZ PROC ; select_previous_default_tsd_declutter_level, COMDAT

; 11934: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 11935: 	if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_NAVIGATION)

  00009	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
  00010	75 0c		 jne	 SHORT $LN2@select_pre

; 11936: 	{
; 11937: 		tsd_declutter_level = TSD_DECLUTTER_LEVEL_TARGET;

  00012	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  0001c	eb 1f		 jmp	 SHORT $LN1@select_pre
$LN2@select_pre:

; 11938: 	}
; 11939: 	else if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  0001e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  00025	75 0c		 jne	 SHORT $LN4@select_pre

; 11940: 	{
; 11941: 		tsd_declutter_level = TSD_DECLUTTER_LEVEL_ALL;

  00027	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0

; 11942: 	}
; 11943: 	else

  00031	eb 0a		 jmp	 SHORT $LN1@select_pre
$LN4@select_pre:

; 11944: 	{
; 11945: 		tsd_declutter_level = TSD_DECLUTTER_LEVEL_NAVIGATION;

  00033	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
$LN1@select_pre:

; 11946: 	}
; 11947: }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?select_previous_default_tsd_declutter_level@@YGXXZ ENDP ; select_previous_default_tsd_declutter_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?select_next_default_tsd_declutter_level@@YGXXZ
_TEXT	SEGMENT
?select_next_default_tsd_declutter_level@@YGXXZ PROC	; select_next_default_tsd_declutter_level, COMDAT

; 11893: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 11894: 	if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_ALL)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0
  00010	75 0c		 jne	 SHORT $LN2@select_nex

; 11895: 	{
; 11896: 		tsd_declutter_level = TSD_DECLUTTER_LEVEL_TARGET;

  00012	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  0001c	eb 1f		 jmp	 SHORT $LN1@select_nex
$LN2@select_nex:

; 11897: 	}
; 11898: 	else if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  0001e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  00025	75 0c		 jne	 SHORT $LN4@select_nex

; 11899: 	{
; 11900: 		tsd_declutter_level = TSD_DECLUTTER_LEVEL_NAVIGATION;

  00027	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2

; 11901: 	}
; 11902: 	else

  00031	eb 0a		 jmp	 SHORT $LN1@select_nex
$LN4@select_nex:

; 11903: 	{
; 11904: 		tsd_declutter_level = TSD_DECLUTTER_LEVEL_ALL;

  00033	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0
$LN1@select_nex:

; 11905: 	}
; 11906: }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?select_next_default_tsd_declutter_level@@YGXXZ ENDP	; select_next_default_tsd_declutter_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?select_previous_default_tsd_ase_range@@YGXXZ
_TEXT	SEGMENT
?select_previous_default_tsd_ase_range@@YGXXZ PROC	; select_previous_default_tsd_ase_range, COMDAT

; 11873: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 11874: 	if (tsd_ase_range == TSD_ASE_RANGE_25000)

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  00011	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  00018	9f		 lahf
  00019	f6 c4 44	 test	 ah, 68			; 00000044H
  0001c	7a 12		 jp	 SHORT $LN2@select_pre

; 11875: 	{
; 11876: 		tsd_ase_range = TSD_ASE_RANGE_10000;

  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
  00026	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_ase_range@@3MA, xmm0
  0002e	eb 4c		 jmp	 SHORT $LN6@select_pre
$LN2@select_pre:

; 11877: 	}
; 11878: 	else if (tsd_ase_range == TSD_ASE_RANGE_10000)

  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  00038	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  0003f	9f		 lahf
  00040	f6 c4 44	 test	 ah, 68			; 00000044H
  00043	7a 12		 jp	 SHORT $LN4@select_pre

; 11879: 	{
; 11880: 		tsd_ase_range = TSD_ASE_RANGE_5000;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  0004d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_ase_range@@3MA, xmm0
  00055	eb 25		 jmp	 SHORT $LN6@select_pre
$LN4@select_pre:

; 11881: 	}
; 11882: 	else if (tsd_ase_range == TSD_ASE_RANGE_5000)

  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  0005f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  00066	9f		 lahf
  00067	f6 c4 44	 test	 ah, 68			; 00000044H
  0006a	7a 10		 jp	 SHORT $LN6@select_pre

; 11883: 	{
; 11884: 		tsd_ase_range = TSD_ASE_RANGE_2000;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44fa0000
  00074	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_ase_range@@3MA, xmm0
$LN6@select_pre:

; 11885: 	}
; 11886: }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?select_previous_default_tsd_ase_range@@YGXXZ ENDP	; select_previous_default_tsd_ase_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?select_next_default_tsd_ase_range@@YGXXZ
_TEXT	SEGMENT
?select_next_default_tsd_ase_range@@YGXXZ PROC		; select_next_default_tsd_ase_range, COMDAT

; 11853: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 11854: 	if (tsd_ase_range == TSD_ASE_RANGE_2000)

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  00011	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  00018	9f		 lahf
  00019	f6 c4 44	 test	 ah, 68			; 00000044H
  0001c	7a 12		 jp	 SHORT $LN2@select_nex

; 11855: 	{
; 11856: 		tsd_ase_range = TSD_ASE_RANGE_5000;

  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  00026	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_ase_range@@3MA, xmm0
  0002e	eb 4c		 jmp	 SHORT $LN6@select_nex
$LN2@select_nex:

; 11857: 	}
; 11858: 	else if (tsd_ase_range == TSD_ASE_RANGE_5000)

  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  00038	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  0003f	9f		 lahf
  00040	f6 c4 44	 test	 ah, 68			; 00000044H
  00043	7a 12		 jp	 SHORT $LN4@select_nex

; 11859: 	{
; 11860: 		tsd_ase_range = TSD_ASE_RANGE_10000;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
  0004d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_ase_range@@3MA, xmm0
  00055	eb 25		 jmp	 SHORT $LN6@select_nex
$LN4@select_nex:

; 11861: 	}
; 11862: 	else if (tsd_ase_range == TSD_ASE_RANGE_10000)

  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  0005f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  00066	9f		 lahf
  00067	f6 c4 44	 test	 ah, 68			; 00000044H
  0006a	7a 10		 jp	 SHORT $LN6@select_nex

; 11863: 	{
; 11864: 		tsd_ase_range = TSD_ASE_RANGE_25000;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@46c35000
  00074	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_ase_range@@3MA, xmm0
$LN6@select_nex:

; 11865: 	}
; 11866: }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?select_next_default_tsd_ase_range@@YGXXZ ENDP		; select_next_default_tsd_ase_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_overlaid_default_mfd@@YGXMMMW4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv186 = -388						; size = 4
tv93 = -388						; size = 4
_specular$1 = -320					; size = 4
_colour$2 = -316					; size = 4
_quad$3 = -312						; size = 256
_org_offset$4 = -56					; size = 4
_scaley$5 = -52						; size = 4
_scalex$6 = -48						; size = 4
_mfd_screen_y_max$ = -44				; size = 4
_mfd_screen_x_max$ = -40				; size = 4
_mfd_screen_y_min$ = -36				; size = 4
_mfd_screen_x_min$ = -32				; size = 4
_mfd_screen_y_org$ = -28				; size = 4
_mfd_screen_x_org$ = -24				; size = 4
_mfd_screen_half_size$ = -20				; size = 4
_mfd_screen_size$ = -16					; size = 4
_texture_index$ = -12					; size = 4
_mfd_texture_screen$ = -8				; size = 4
_mfd_mode$ = -4						; size = 4
_x_org$ = 8						; size = 4
_y_org$ = 12						; size = 4
_size$ = 16						; size = 4
_location$ = 20						; size = 4
?draw_overlaid_default_mfd@@YGXMMMW4MFD_LOCATIONS@@@Z PROC ; draw_overlaid_default_mfd, COMDAT

; 11238: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 01 00
	00		 sub	 esp, 388		; 00000184H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 11239: 	mfd_modes
; 11240: 		*mfd_mode;
; 11241: 
; 11242: 	screen
; 11243: 		*mfd_texture_screen;
; 11244: 
; 11245: 	texture_index_numbers
; 11246: 		texture_index;
; 11247: 
; 11248: 	float
; 11249: 		mfd_screen_size,
; 11250: 		mfd_screen_half_size,
; 11251: 		mfd_screen_x_org,
; 11252: 		mfd_screen_y_org,
; 11253: 		mfd_screen_x_min,
; 11254: 		mfd_screen_y_min,
; 11255: 		mfd_screen_x_max,
; 11256: 		mfd_screen_y_max;
; 11257: 
; 11258: 	ASSERT ((location == MFD_LOCATION_LHS) || (location == MFD_LOCATION_RHS));

  0000c	83 7d 14 00	 cmp	 DWORD PTR _location$[ebp], 0
  00010	74 1e		 je	 SHORT $LN4@draw_overl
  00012	83 7d 14 01	 cmp	 DWORD PTR _location$[ebp], 1
  00016	74 18		 je	 SHORT $LN4@draw_overl
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_default_mfd@@YGXMMMW4MFD_LOCATIONS@@@Z@4JA
  0001d	83 c0 14	 add	 eax, 20			; 00000014H
  00020	50		 push	 eax
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@HOBNFLGC@?$CIlocation?5?$DN?$DN?5MFD_LOCATION_LHS?$CJ?5@
  0002b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_overl:

; 11259: 
; 11260: //	update_pointer_position();
; 11261: 
; 11262: 	if (location == MFD_LOCATION_LHS)

  00030	83 7d 14 00	 cmp	 DWORD PTR _location$[ebp], 0
  00034	75 18		 jne	 SHORT $LN5@draw_overl

; 11263: 	{
; 11264: 		mfd_mode = &lhs_mfd_mode;

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], OFFSET ?lhs_mfd_mode@@3W4MFD_MODES@@A

; 11265: 
; 11266: 		mfd_texture_screen = lhs_overlaid_mfd_texture_screen;

  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lhs_overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  00042	89 45 f8	 mov	 DWORD PTR _mfd_texture_screen$[ebp], eax

; 11267: 
; 11268: 		texture_index = LHS_OVERLAID_MFD_TEXTURE_INDEX;

  00045	c7 45 f4 54 06
	00 00		 mov	 DWORD PTR _texture_index$[ebp], 1620 ; 00000654H

; 11269: 	}
; 11270: 	else

  0004c	eb 16		 jmp	 SHORT $LN6@draw_overl
$LN5@draw_overl:

; 11271: 	{
; 11272: 		mfd_mode = &rhs_mfd_mode;

  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], OFFSET ?rhs_mfd_mode@@3W4MFD_MODES@@A

; 11273: 
; 11274: 		mfd_texture_screen = rhs_overlaid_mfd_texture_screen;

  00055	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rhs_overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  0005a	89 45 f8	 mov	 DWORD PTR _mfd_texture_screen$[ebp], eax

; 11275: 
; 11276: 		texture_index = RHS_OVERLAID_MFD_TEXTURE_INDEX;

  0005d	c7 45 f4 57 06
	00 00		 mov	 DWORD PTR _texture_index$[ebp], 1623 ; 00000657H
$LN6@draw_overl:

; 11277: 	}
; 11278: 
; 11279: 	if (*mfd_mode == MFD_MODE_OFF)

  00064	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00067	83 38 00	 cmp	 DWORD PTR [eax], 0
  0006a	75 05		 jne	 SHORT $LN7@draw_overl

; 11280: 	{
; 11281: 		return;

  0006c	e9 37 10 00 00	 jmp	 $LN1@draw_overl
$LN7@draw_overl:

; 11282: 	}
; 11283: 
; 11284: 	////////////////////////////////////////
; 11285: 	//
; 11286: 	// scale position and size wrt screen resolution
; 11287: 	//
; 11288: 	////////////////////////////////////////
; 11289: 
; 11290: 
; 11291: /*	if (get_global_unscaled_displays ())
; 11292: 	{
; 11293: 		float
; 11294: 			org_offset;
; 11295: 
; 11296: 		mfd_screen_size = size;
; 11297: 
; 11298: 		mfd_screen_half_size = mfd_screen_size * 0.5;
; 11299: 
; 11300: 		mfd_screen_x_org = x_org * full_screen_width * (1.0 / 640.0);
; 11301: 		mfd_screen_y_org = y_org * full_screen_height * (1.0 / 480.0);
; 11302: 
; 11303: 		org_offset = ((size * full_screen_width * (1.0 / 640.0)) - size) * 0.5;
; 11304: 
; 11305: 		if (location == MFD_LOCATION_LHS)
; 11306: 		{
; 11307: 			mfd_screen_x_org -= org_offset;
; 11308: 		}
; 11309: 		else
; 11310: 		{
; 11311: 			mfd_screen_x_org += org_offset;
; 11312: 		}
; 11313: 
; 11314: 		mfd_screen_y_org += org_offset;
; 11315: 
; 11316: 		mfd_screen_x_min = mfd_screen_x_org - mfd_screen_half_size;
; 11317: 		mfd_screen_y_min = mfd_screen_y_org - mfd_screen_half_size;
; 11318: 		mfd_screen_x_max = mfd_screen_x_org + mfd_screen_half_size - 0.001;
; 11319: 		mfd_screen_y_max = mfd_screen_y_org + mfd_screen_half_size - 0.001;
; 11320: 	}
; 11321: 	else*/
; 11322: 	{
; 11323: 		float
; 11324: 			scalex,
; 11325: 			scaley,
; 11326: 			org_offset;
; 11327: 
; 11328: 		scalex = full_screen_width * (1.0 / 640.0);

  00071	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  00079	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f5999999999999a
  00081	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00085	f3 0f 11 45 d0	 movss	 DWORD PTR _scalex$6[ebp], xmm0

; 11329: 		scaley = full_screen_height * (1.0 / 480.0);

  0008a	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  00092	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f61111111111111
  0009a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0009e	f3 0f 11 45 cc	 movss	 DWORD PTR _scaley$5[ebp], xmm0

; 11330: 
; 11331: 		mfd_screen_size = size * global_mfd_size * scalex;

  000a3	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _size$[ebp]
  000a8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?global_mfd_size@@3MA
  000b0	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _scalex$6[ebp]
  000b5	f3 0f 11 45 f0	 movss	 DWORD PTR _mfd_screen_size$[ebp], xmm0

; 11332: 		mfd_screen_half_size = mfd_screen_size * 0.5;

  000ba	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _mfd_screen_size$[ebp]
  000bf	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  000c7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000cb	f3 0f 11 45 ec	 movss	 DWORD PTR _mfd_screen_half_size$[ebp], xmm0

; 11333: 
; 11334: 		mfd_screen_x_org = x_org * scalex;

  000d0	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_org$[ebp]
  000d5	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _scalex$6[ebp]
  000da	f3 0f 11 45 e8	 movss	 DWORD PTR _mfd_screen_x_org$[ebp], xmm0

; 11335: 		mfd_screen_y_org = y_org * scaley;

  000df	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_org$[ebp]
  000e4	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _scaley$5[ebp]
  000e9	f3 0f 11 45 e4	 movss	 DWORD PTR _mfd_screen_y_org$[ebp], xmm0

; 11336: 
; 11337: 		org_offset = size * scalex * 0.5 - mfd_screen_half_size;

  000ee	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _size$[ebp]
  000f3	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _scalex$6[ebp]
  000f8	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000fc	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00104	f3 0f 5a 4d ec	 cvtss2sd xmm1, DWORD PTR _mfd_screen_half_size$[ebp]
  00109	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0010d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00111	f3 0f 11 45 c8	 movss	 DWORD PTR _org_offset$4[ebp], xmm0

; 11338: 		mfd_screen_x_org += location == MFD_LOCATION_LHS ? -org_offset : org_offset;

  00116	83 7d 14 00	 cmp	 DWORD PTR _location$[ebp], 0
  0011a	75 16		 jne	 SHORT $LN46@draw_overl
  0011c	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _org_offset$4[ebp]
  00121	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00128	f3 0f 11 85 7c
	fe ff ff	 movss	 DWORD PTR tv93[ebp], xmm0
  00130	eb 0d		 jmp	 SHORT $LN47@draw_overl
$LN46@draw_overl:
  00132	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _org_offset$4[ebp]
  00137	f3 0f 11 85 7c
	fe ff ff	 movss	 DWORD PTR tv93[ebp], xmm0
$LN47@draw_overl:
  0013f	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _mfd_screen_x_org$[ebp]
  00144	f3 0f 58 85 7c
	fe ff ff	 addss	 xmm0, DWORD PTR tv93[ebp]
  0014c	f3 0f 11 45 e8	 movss	 DWORD PTR _mfd_screen_x_org$[ebp], xmm0

; 11339: 		mfd_screen_y_org += size * scaley * 0.5 - mfd_screen_half_size;

  00151	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _size$[ebp]
  00156	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _scaley$5[ebp]
  0015b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0015f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00167	f3 0f 5a 4d ec	 cvtss2sd xmm1, DWORD PTR _mfd_screen_half_size$[ebp]
  0016c	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00170	f3 0f 5a 4d e4	 cvtss2sd xmm1, DWORD PTR _mfd_screen_y_org$[ebp]
  00175	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00179	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0017d	f3 0f 11 45 e4	 movss	 DWORD PTR _mfd_screen_y_org$[ebp], xmm0

; 11340: 
; 11341: 		mfd_screen_x_min = mfd_screen_x_org - mfd_screen_half_size;

  00182	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _mfd_screen_x_org$[ebp]
  00187	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _mfd_screen_half_size$[ebp]
  0018c	f3 0f 11 45 e0	 movss	 DWORD PTR _mfd_screen_x_min$[ebp], xmm0

; 11342: 		mfd_screen_y_min = mfd_screen_y_org - mfd_screen_half_size;

  00191	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _mfd_screen_y_org$[ebp]
  00196	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _mfd_screen_half_size$[ebp]
  0019b	f3 0f 11 45 dc	 movss	 DWORD PTR _mfd_screen_y_min$[ebp], xmm0

; 11343: 		mfd_screen_x_max = mfd_screen_x_org + mfd_screen_half_size - 0.001;

  001a0	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _mfd_screen_x_org$[ebp]
  001a5	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _mfd_screen_half_size$[ebp]
  001aa	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001ae	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001b6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001ba	f3 0f 11 45 d8	 movss	 DWORD PTR _mfd_screen_x_max$[ebp], xmm0

; 11344: 		mfd_screen_y_max = mfd_screen_y_org + mfd_screen_half_size - 0.001;

  001bf	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _mfd_screen_y_org$[ebp]
  001c4	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _mfd_screen_half_size$[ebp]
  001c9	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001cd	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001d5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001d9	f3 0f 11 45 d4	 movss	 DWORD PTR _mfd_screen_y_max$[ebp], xmm0

; 11345: 	}
; 11346: 
; 11347: 	//
; 11348: 	// translate & scale values (EO 3D display does not match texture)
; 11349: 	//
; 11350: 
; 11351: 	i_translate_3d = mfd_screen_x_min;

  001de	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  001e3	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?i_translate_3d@@3MA, xmm0

; 11352: 	j_translate_3d = mfd_screen_y_min;

  001eb	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  001f0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?j_translate_3d@@3MA, xmm0

; 11353: 
; 11354: 	i_scale_3d = mfd_texture_size / mfd_screen_size;

  001f8	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_texture_size@@3HA
  00200	f3 0f 5e 45 f0	 divss	 xmm0, DWORD PTR _mfd_screen_size$[ebp]
  00205	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?i_scale_3d@@3MA, xmm0

; 11355: 	j_scale_3d = mfd_texture_size / mfd_screen_size;

  0020d	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_texture_size@@3HA
  00215	f3 0f 5e 45 f0	 divss	 xmm0, DWORD PTR _mfd_screen_size$[ebp]
  0021a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?j_scale_3d@@3MA, xmm0

; 11356: 
; 11357: 	////////////////////////////////////////
; 11358: 	//
; 11359: 	// set up MFD 2D environment
; 11360: 	//
; 11361: 	////////////////////////////////////////
; 11362: 
; 11363: 	set_2d_active_environment (mfd_env);

  00222	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00227	50		 push	 eax
  00228	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 11364: 
; 11365: 	//
; 11366: 	// window
; 11367: 	//
; 11368: 
; 11369: 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  0022d	51		 push	 ecx
  0022e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  00236	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023b	51		 push	 ecx
  0023c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  00244	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00249	51		 push	 ecx
  0024a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  00252	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00257	51		 push	 ecx
  00258	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  00260	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00265	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0026a	50		 push	 eax
  0026b	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 11370: 
; 11371: 	//
; 11372: 	// viewport
; 11373: 	//
; 11374: 
; 11375: 	if (draw_large_mfd)

  00270	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00277	74 12		 je	 SHORT $LN8@draw_overl

; 11376: 		mfd_viewport_size = MFD_VIEWPORT_LARGE_SIZE;

  00279	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  00281	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 11377: 	else

  00289	eb 10		 jmp	 SHORT $LN9@draw_overl
$LN8@draw_overl:

; 11378: 		mfd_viewport_size = MFD_VIEWPORT_SMALL_SIZE;

  0028b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  00293	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0
$LN9@draw_overl:

; 11379: 
; 11380: 	ASSERT (mfd_viewport_size <= mfd_texture_size);

  0029b	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_texture_size@@3HA
  002a3	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  002aa	73 1a		 jae	 SHORT $LN10@draw_overl
  002ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_default_mfd@@YGXMMMW4MFD_LOCATIONS@@@Z@4JA
  002b1	05 8e 00 00 00	 add	 eax, 142		; 0000008eH
  002b6	50		 push	 eax
  002b7	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  002bc	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@IPIPCLFE@mfd_viewport_size?5?$DM?$DN?5mfd_textur@
  002c1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@draw_overl:

; 11381: 
; 11382: 	mfd_viewport_x_org = mfd_viewport_texture_x_org;

  002c6	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_viewport_texture_x_org@@3HA
  002ce	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 11383: 
; 11384: 	mfd_viewport_y_org = mfd_viewport_texture_y_org;

  002d6	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_viewport_texture_y_org@@3HA
  002de	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 11385: 
; 11386: 	mfd_viewport_x_min = mfd_viewport_x_org - (mfd_viewport_size * 0.5);

  002e6	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  002ee	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  002f6	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  002fe	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00302	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00306	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 11387: 
; 11388: 	mfd_viewport_y_min = mfd_viewport_y_org - (mfd_viewport_size * 0.5);

  0030e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_org@@3MA
  00316	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  0031e	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00326	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0032a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0032e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 11389: 
; 11390: 	mfd_viewport_x_max = mfd_viewport_x_org + (mfd_viewport_size * 0.5) - 0.001;

  00336	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  0033e	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00346	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0034e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00352	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0035a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0035e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 11391: 
; 11392: 	mfd_viewport_y_max = mfd_viewport_y_org + (mfd_viewport_size * 0.5) - 0.001;

  00366	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_org@@3MA
  0036e	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00376	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0037e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00382	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0038a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0038e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 11393: 
; 11394: 	////////////////////////////////////////
; 11395: 	//
; 11396: 	// draw MFD display
; 11397: 	//
; 11398: 	////////////////////////////////////////
; 11399: 
; 11400: 	switch (*mfd_mode)

  00396	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00399	8b 08		 mov	 ecx, DWORD PTR [eax]
  0039b	89 8d 7c fe ff
	ff		 mov	 DWORD PTR tv186[ebp], ecx
  003a1	83 bd 7c fe ff
	ff 0d		 cmp	 DWORD PTR tv186[ebp], 13 ; 0000000dH
  003a8	0f 87 9c 09 00
	00		 ja	 $LN2@draw_overl
  003ae	8b 95 7c fe ff
	ff		 mov	 edx, DWORD PTR tv186[ebp]
  003b4	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN48@draw_overl[edx*4]
$LN11@draw_overl:

; 11401: 	{
; 11402: 		////////////////////////////////////////
; 11403: 		case MFD_MODE_OFF:
; 11404: 		////////////////////////////////////////
; 11405: 		{
; 11406: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  003bb	51		 push	 ecx
  003bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  003c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c9	51		 push	 ecx
  003ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  003d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d7	51		 push	 ecx
  003d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  003e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e5	51		 push	 ecx
  003e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  003ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  003f8	50		 push	 eax
  003f9	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 11407: 
; 11408: 			set_active_screen (mfd_texture_screen);

  003fe	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00401	50		 push	 eax
  00402	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11409: 
; 11410: 			if (lock_screen (mfd_texture_screen))

  00407	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0040a	50		 push	 eax
  0040b	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00410	85 c0		 test	 eax, eax
  00412	74 3a		 je	 SHORT $LN12@draw_overl

; 11411: 			{
; 11412: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00414	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00419	50		 push	 eax
  0041a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00420	83 e9 01	 sub	 ecx, 1
  00423	51		 push	 ecx
  00424	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  0042a	83 ea 01	 sub	 edx, 1
  0042d	52		 push	 edx
  0042e	6a 00		 push	 0
  00430	6a 00		 push	 0
  00432	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11413: 
; 11414: 				draw_layout_grid ();

  00437	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11415: 
; 11416: 				flush_screen_texture_graphics (mfd_texture_screen);

  0043c	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0043f	50		 push	 eax
  00440	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11417: 
; 11418: 				unlock_screen (mfd_texture_screen);

  00445	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00448	50		 push	 eax
  00449	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN12@draw_overl:

; 11419: 			}
; 11420: 
; 11421: 			break;

  0044e	e9 f7 08 00 00	 jmp	 $LN2@draw_overl
$LN13@draw_overl:

; 11422: 		}
; 11423: 		////////////////////////////////////////
; 11424: 		case MFD_MODE_DAMAGED:
; 11425: 		////////////////////////////////////////
; 11426: 		{
; 11427: 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00453	51		 push	 ecx
  00454	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00459	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0045e	51		 push	 ecx
  0045f	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00464	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00469	51		 push	 ecx
  0046a	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  0046f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00474	51		 push	 ecx
  00475	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  0047a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047f	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 11428: 
; 11429: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00484	51		 push	 ecx
  00485	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0048d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00492	51		 push	 ecx
  00493	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0049b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a0	51		 push	 ecx
  004a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  004a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ae	51		 push	 ecx
  004af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  004b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  004c1	50		 push	 eax
  004c2	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 11430: 
; 11431: 			set_active_screen (mfd_texture_screen);

  004c7	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  004ca	50		 push	 eax
  004cb	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11432: 
; 11433: 			if (lock_screen (mfd_texture_screen))

  004d0	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  004d3	50		 push	 eax
  004d4	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  004d9	85 c0		 test	 eax, eax
  004db	74 3f		 je	 SHORT $LN14@draw_overl

; 11434: 			{
; 11435: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  004dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  004e2	50		 push	 eax
  004e3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  004e9	83 e9 01	 sub	 ecx, 1
  004ec	51		 push	 ecx
  004ed	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  004f3	83 ea 01	 sub	 edx, 1
  004f6	52		 push	 edx
  004f7	6a 00		 push	 0
  004f9	6a 00		 push	 0
  004fb	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11436: 
; 11437: 				draw_layout_grid ();

  00500	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11438: 
; 11439: 				draw_damaged_mfd ();

  00505	e8 00 00 00 00	 call	 ?draw_damaged_mfd@@YGXXZ ; draw_damaged_mfd

; 11440: 
; 11441: 				flush_screen_texture_graphics (mfd_texture_screen);

  0050a	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0050d	50		 push	 eax
  0050e	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11442: 
; 11443: 				unlock_screen (mfd_texture_screen);

  00513	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00516	50		 push	 eax
  00517	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN14@draw_overl:

; 11444: 			}
; 11445: 
; 11446: 			break;

  0051c	e9 29 08 00 00	 jmp	 $LN2@draw_overl
$LN15@draw_overl:

; 11447: 		}
; 11448: 		////////////////////////////////////////
; 11449: 		case MFD_MODE_GROUND_RADAR:
; 11450: 		////////////////////////////////////////
; 11451: 		{
; 11452: 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00521	51		 push	 ecx
  00522	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00527	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0052c	51		 push	 ecx
  0052d	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00532	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00537	51		 push	 ecx
  00538	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  0053d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00542	51		 push	 ecx
  00543	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00548	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0054d	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 11453: 
; 11454: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00552	51		 push	 ecx
  00553	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0055b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00560	51		 push	 ecx
  00561	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00569	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0056e	51		 push	 ecx
  0056f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00577	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057c	51		 push	 ecx
  0057d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00585	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0058a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0058f	50		 push	 eax
  00590	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 11455: 
; 11456: 			set_active_screen (mfd_texture_screen);

  00595	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00598	50		 push	 eax
  00599	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11457: 
; 11458: 			if (lock_screen (mfd_texture_screen))

  0059e	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  005a1	50		 push	 eax
  005a2	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  005a7	85 c0		 test	 eax, eax
  005a9	74 3f		 je	 SHORT $LN16@draw_overl

; 11459: 			{
; 11460: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  005ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  005b0	50		 push	 eax
  005b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  005b7	83 e9 01	 sub	 ecx, 1
  005ba	51		 push	 ecx
  005bb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  005c1	83 ea 01	 sub	 edx, 1
  005c4	52		 push	 edx
  005c5	6a 00		 push	 0
  005c7	6a 00		 push	 0
  005c9	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11461: 
; 11462: 				draw_layout_grid ();

  005ce	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11463: 
; 11464: 				draw_ground_radar_mfd ();

  005d3	e8 00 00 00 00	 call	 ?draw_ground_radar_mfd@@YGXXZ ; draw_ground_radar_mfd

; 11465: 
; 11466: 				flush_screen_texture_graphics (mfd_texture_screen);

  005d8	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  005db	50		 push	 eax
  005dc	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11467: 
; 11468: 				unlock_screen (mfd_texture_screen);

  005e1	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  005e4	50		 push	 eax
  005e5	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN16@draw_overl:

; 11469: 			}
; 11470: 
; 11471: 			break;

  005ea	e9 5b 07 00 00	 jmp	 $LN2@draw_overl
$LN17@draw_overl:

; 11472: 		}
; 11473: 		////////////////////////////////////////
; 11474: 		case MFD_MODE_AIR_RADAR:
; 11475: 		////////////////////////////////////////
; 11476: 		{
; 11477: 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  005ef	51		 push	 ecx
  005f0	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  005f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005fa	51		 push	 ecx
  005fb	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00600	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00605	51		 push	 ecx
  00606	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  0060b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00610	51		 push	 ecx
  00611	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00616	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0061b	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 11478: 
; 11479: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00620	51		 push	 ecx
  00621	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00629	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0062e	51		 push	 ecx
  0062f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00637	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063c	51		 push	 ecx
  0063d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00645	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0064a	51		 push	 ecx
  0064b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00653	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00658	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0065d	50		 push	 eax
  0065e	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 11480: 
; 11481: 			set_active_screen (mfd_texture_screen);

  00663	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00666	50		 push	 eax
  00667	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11482: 
; 11483: 			if (lock_screen (mfd_texture_screen))

  0066c	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0066f	50		 push	 eax
  00670	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00675	85 c0		 test	 eax, eax
  00677	74 3f		 je	 SHORT $LN18@draw_overl

; 11484: 			{
; 11485: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00679	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0067e	50		 push	 eax
  0067f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00685	83 e9 01	 sub	 ecx, 1
  00688	51		 push	 ecx
  00689	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  0068f	83 ea 01	 sub	 edx, 1
  00692	52		 push	 edx
  00693	6a 00		 push	 0
  00695	6a 00		 push	 0
  00697	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11486: 
; 11487: 				draw_layout_grid ();

  0069c	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11488: 
; 11489: 				draw_air_radar_mfd ();

  006a1	e8 00 00 00 00	 call	 ?draw_air_radar_mfd@@YGXXZ ; draw_air_radar_mfd

; 11490: 
; 11491: 				flush_screen_texture_graphics (mfd_texture_screen);

  006a6	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  006a9	50		 push	 eax
  006aa	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11492: 
; 11493: 				unlock_screen (mfd_texture_screen);

  006af	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  006b2	50		 push	 eax
  006b3	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN18@draw_overl:

; 11494: 			}
; 11495: 
; 11496: 			break;

  006b8	e9 8d 06 00 00	 jmp	 $LN2@draw_overl
$LN19@draw_overl:

; 11497: 		}
; 11498: 		////////////////////////////////////////
; 11499: 		case MFD_MODE_FLIR:
; 11500: 		case MFD_MODE_DTV:
; 11501: 		case MFD_MODE_DVO:
; 11502: 		////////////////////////////////////////
; 11503: 		{
; 11504: 			if (!default_damage.flir)

  006bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  006c2	c1 e8 02	 shr	 eax, 2
  006c5	83 e0 01	 and	 eax, 1
  006c8	0f 85 9d 00 00
	00		 jne	 $LN20@draw_overl

; 11505: 			{
; 11506: 				if (*mfd_mode == MFD_MODE_FLIR)

  006ce	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  006d1	83 38 04	 cmp	 DWORD PTR [eax], 4
  006d4	75 2f		 jne	 SHORT $LN22@draw_overl

; 11507: 					draw_overlaid_3d_eo_display (&default_flir, TARGET_ACQUISITION_SYSTEM_FLIR, mfd_screen_x_min, mfd_screen_y_min, mfd_screen_size);

  006d6	51		 push	 ecx
  006d7	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _mfd_screen_size$[ebp]
  006dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006e1	51		 push	 ecx
  006e2	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  006e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ec	51		 push	 ecx
  006ed	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  006f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f7	6a 03		 push	 3
  006f9	68 00 00 00 00	 push	 OFFSET ?default_flir@@3UEO_PARAMS@@A ; default_flir
  006fe	e8 00 00 00 00	 call	 ?draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z ; draw_overlaid_3d_eo_display
  00703	eb 64		 jmp	 SHORT $LN25@draw_overl
$LN22@draw_overl:

; 11508: 				else if (*mfd_mode == MFD_MODE_DTV)

  00705	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00708	83 38 05	 cmp	 DWORD PTR [eax], 5
  0070b	75 2f		 jne	 SHORT $LN24@draw_overl

; 11509: 					draw_overlaid_3d_eo_display (&default_dtv, TARGET_ACQUISITION_SYSTEM_DTV, mfd_screen_x_min, mfd_screen_y_min, mfd_screen_size);

  0070d	51		 push	 ecx
  0070e	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _mfd_screen_size$[ebp]
  00713	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00718	51		 push	 ecx
  00719	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  0071e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00723	51		 push	 ecx
  00724	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00729	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0072e	6a 04		 push	 4
  00730	68 00 00 00 00	 push	 OFFSET ?default_dtv@@3UEO_PARAMS@@A ; default_dtv
  00735	e8 00 00 00 00	 call	 ?draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z ; draw_overlaid_3d_eo_display

; 11510: 				else

  0073a	eb 2d		 jmp	 SHORT $LN25@draw_overl
$LN24@draw_overl:

; 11511: 					draw_overlaid_3d_eo_display (&default_dvo, TARGET_ACQUISITION_SYSTEM_DVO, mfd_screen_x_min, mfd_screen_y_min, mfd_screen_size);

  0073c	51		 push	 ecx
  0073d	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _mfd_screen_size$[ebp]
  00742	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00747	51		 push	 ecx
  00748	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  0074d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00752	51		 push	 ecx
  00753	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00758	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0075d	6a 05		 push	 5
  0075f	68 00 00 00 00	 push	 OFFSET ?default_dvo@@3UEO_PARAMS@@A ; default_dvo
  00764	e8 00 00 00 00	 call	 ?draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z ; draw_overlaid_3d_eo_display
$LN25@draw_overl:

; 11512: 			}
; 11513: 			else

  00769	eb 31		 jmp	 SHORT $LN21@draw_overl
$LN20@draw_overl:

; 11514: 				draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  0076b	51		 push	 ecx
  0076c	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00771	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00776	51		 push	 ecx
  00777	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  0077c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00781	51		 push	 ecx
  00782	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00787	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078c	51		 push	 ecx
  0078d	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00792	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00797	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background
$LN21@draw_overl:

; 11515: 			
; 11516: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  0079c	51		 push	 ecx
  0079d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  007a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007aa	51		 push	 ecx
  007ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  007b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b8	51		 push	 ecx
  007b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  007c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c6	51		 push	 ecx
  007c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  007cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  007d9	50		 push	 eax
  007da	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 11517: 			set_active_screen (mfd_texture_screen);

  007df	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  007e2	50		 push	 eax
  007e3	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11518: 
; 11519: 			if (lock_screen (mfd_texture_screen))

  007e8	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  007eb	50		 push	 eax
  007ec	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  007f1	85 c0		 test	 eax, eax
  007f3	74 69		 je	 SHORT $LN26@draw_overl

; 11520: 			{
; 11521: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  007f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  007fa	50		 push	 eax
  007fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00801	83 e9 01	 sub	 ecx, 1
  00804	51		 push	 ecx
  00805	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  0080b	83 ea 01	 sub	 edx, 1
  0080e	52		 push	 edx
  0080f	6a 00		 push	 0
  00811	6a 00		 push	 0
  00813	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11522: 				
; 11523: 				draw_layout_grid ();

  00818	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11524: 
; 11525: 				if (*mfd_mode == MFD_MODE_FLIR)

  0081d	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00820	83 38 04	 cmp	 DWORD PTR [eax], 4
  00823	75 0b		 jne	 SHORT $LN27@draw_overl

; 11526: 					draw_2d_flir_mfd (TRUE, TRUE);

  00825	6a 01		 push	 1
  00827	6a 01		 push	 1
  00829	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXHH@Z ; draw_2d_flir_mfd
  0082e	eb 1c		 jmp	 SHORT $LN30@draw_overl
$LN27@draw_overl:

; 11527: 				else if (*mfd_mode == MFD_MODE_DTV)

  00830	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00833	83 38 05	 cmp	 DWORD PTR [eax], 5
  00836	75 0b		 jne	 SHORT $LN29@draw_overl

; 11528: 					draw_2d_dtv_mfd (TRUE, TRUE);

  00838	6a 01		 push	 1
  0083a	6a 01		 push	 1
  0083c	e8 00 00 00 00	 call	 ?draw_2d_dtv_mfd@@YGXHH@Z ; draw_2d_dtv_mfd

; 11529: 				else

  00841	eb 09		 jmp	 SHORT $LN30@draw_overl
$LN29@draw_overl:

; 11530: 					draw_2d_dvo_mfd (TRUE, TRUE);

  00843	6a 01		 push	 1
  00845	6a 01		 push	 1
  00847	e8 00 00 00 00	 call	 ?draw_2d_dvo_mfd@@YGXHH@Z ; draw_2d_dvo_mfd
$LN30@draw_overl:

; 11531: 
; 11532: 				flush_screen_texture_graphics (mfd_texture_screen);

  0084c	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0084f	50		 push	 eax
  00850	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11533: 				unlock_screen (mfd_texture_screen);

  00855	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00858	50		 push	 eax
  00859	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN26@draw_overl:

; 11534: 			}
; 11535: 
; 11536: 			set_pilots_full_screen_params (FALSE);

  0085e	6a 00		 push	 0
  00860	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params

; 11537: 
; 11538: 			break;

  00865	e9 e0 04 00 00	 jmp	 $LN2@draw_overl
$LN31@draw_overl:

; 11539: 		}
; 11540: 		////////////////////////////////////////
; 11541: 		case MFD_MODE_TSD:
; 11542: 		////////////////////////////////////////
; 11543: 		{
; 11544: 
; 11545: /*			if (tsd_tads_underlay_active)
; 11546: 			{
; 11547: 				if (eo_sensor == TARGET_ACQUISITION_SYSTEM_FLIR)
; 11548: 					draw_overlaid_3d_eo_display (&default_flir, TARGET_ACQUISITION_SYSTEM_FLIR, mfd_screen_x_min, mfd_screen_y_min, mfd_screen_size);
; 11549: 				else
; 11550: 					draw_overlaid_3d_eo_display (&default_dtv, TARGET_ACQUISITION_SYSTEM_DTV, mfd_screen_x_min, mfd_screen_y_min, mfd_screen_size);
; 11551: 			}
; 11552: 			else */
; 11553: 				draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  0086a	51		 push	 ecx
  0086b	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00870	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00875	51		 push	 ecx
  00876	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  0087b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00880	51		 push	 ecx
  00881	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00886	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0088b	51		 push	 ecx
  0088c	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00891	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00896	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 11554: 
; 11555: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  0089b	51		 push	 ecx
  0089c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  008a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a9	51		 push	 ecx
  008aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  008b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008b7	51		 push	 ecx
  008b8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  008c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c5	51		 push	 ecx
  008c6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  008ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  008d8	50		 push	 eax
  008d9	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 11556: 			set_active_screen (mfd_texture_screen);

  008de	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  008e1	50		 push	 eax
  008e2	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11557: 
; 11558: 			if (lock_screen (mfd_texture_screen))

  008e7	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  008ea	50		 push	 eax
  008eb	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  008f0	85 c0		 test	 eax, eax
  008f2	74 3a		 je	 SHORT $LN32@draw_overl

; 11559: 			{
; 11560: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_green_mfd_colour);

  008f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_green_mfd_colour@@3UREAL_COLOUR@@A
  008f9	50		 push	 eax
  008fa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00900	83 e9 01	 sub	 ecx, 1
  00903	51		 push	 ecx
  00904	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  0090a	83 ea 01	 sub	 edx, 1
  0090d	52		 push	 edx
  0090e	6a 00		 push	 0
  00910	6a 00		 push	 0
  00912	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11561: 
; 11562: 				draw_tactical_situation_display_mfd ();

  00917	e8 00 00 00 00	 call	 ?draw_tactical_situation_display_mfd@@YGXXZ ; draw_tactical_situation_display_mfd

; 11563: 
; 11564: 				flush_screen_texture_graphics (mfd_texture_screen);

  0091c	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0091f	50		 push	 eax
  00920	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11565: 
; 11566: 				unlock_screen (mfd_texture_screen);

  00925	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00928	50		 push	 eax
  00929	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN32@draw_overl:

; 11567: 			}
; 11568: 
; 11569: 			if (tsd_tads_underlay_active)

  0092e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?tsd_tads_underlay_active@@3FA
  00935	85 c0		 test	 eax, eax
  00937	74 07		 je	 SHORT $LN33@draw_overl

; 11570: 				set_pilots_full_screen_params (FALSE);

  00939	6a 00		 push	 0
  0093b	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params
$LN33@draw_overl:

; 11571: 
; 11572: 			break;

  00940	e9 05 04 00 00	 jmp	 $LN2@draw_overl
$LN34@draw_overl:

; 11573: 		}
; 11574: 		////////////////////////////////////////
; 11575: 		case MFD_MODE_ASE:
; 11576: 		////////////////////////////////////////
; 11577: 		{
; 11578: 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00945	51		 push	 ecx
  00946	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  0094b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00950	51		 push	 ecx
  00951	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00956	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0095b	51		 push	 ecx
  0095c	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00961	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00966	51		 push	 ecx
  00967	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  0096c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00971	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 11579: 
; 11580: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00976	51		 push	 ecx
  00977	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0097f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00984	51		 push	 ecx
  00985	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0098d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00992	51		 push	 ecx
  00993	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0099b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009a0	51		 push	 ecx
  009a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  009a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  009b3	50		 push	 eax
  009b4	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 11581: 
; 11582: 			set_active_screen (mfd_texture_screen);

  009b9	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  009bc	50		 push	 eax
  009bd	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11583: 
; 11584: 			if (lock_screen (mfd_texture_screen))

  009c2	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  009c5	50		 push	 eax
  009c6	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  009cb	85 c0		 test	 eax, eax
  009cd	74 3f		 je	 SHORT $LN35@draw_overl

; 11585: 			{
; 11586: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_green_mfd_colour);

  009cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_green_mfd_colour@@3UREAL_COLOUR@@A
  009d4	50		 push	 eax
  009d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  009db	83 e9 01	 sub	 ecx, 1
  009de	51		 push	 ecx
  009df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  009e5	83 ea 01	 sub	 edx, 1
  009e8	52		 push	 edx
  009e9	6a 00		 push	 0
  009eb	6a 00		 push	 0
  009ed	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11587: 
; 11588: 				draw_layout_grid ();

  009f2	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11589: 
; 11590: 				draw_aircraft_survivability_equipment_display_mfd ();

  009f7	e8 00 00 00 00	 call	 ?draw_aircraft_survivability_equipment_display_mfd@@YGXXZ ; draw_aircraft_survivability_equipment_display_mfd

; 11591: 
; 11592: 				flush_screen_texture_graphics (mfd_texture_screen);

  009fc	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  009ff	50		 push	 eax
  00a00	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11593: 
; 11594: 				unlock_screen (mfd_texture_screen);

  00a05	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00a08	50		 push	 eax
  00a09	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN35@draw_overl:

; 11595: 			}
; 11596: 
; 11597: 			break;

  00a0e	e9 37 03 00 00	 jmp	 $LN2@draw_overl
$LN36@draw_overl:

; 11598: 		}
; 11599: 		////////////////////////////////////////
; 11600: 		case MFD_MODE_WEAPON:
; 11601: 		////////////////////////////////////////
; 11602: 		{
; 11603: 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00a13	51		 push	 ecx
  00a14	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00a19	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a1e	51		 push	 ecx
  00a1f	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00a24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a29	51		 push	 ecx
  00a2a	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00a2f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a34	51		 push	 ecx
  00a35	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00a3a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a3f	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 11604: 
; 11605: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00a44	51		 push	 ecx
  00a45	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00a4d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a52	51		 push	 ecx
  00a53	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00a5b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a60	51		 push	 ecx
  00a61	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00a69	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a6e	51		 push	 ecx
  00a6f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00a77	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a7c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a81	50		 push	 eax
  00a82	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 11606: 
; 11607: 			set_active_screen (mfd_texture_screen);

  00a87	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00a8a	50		 push	 eax
  00a8b	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11608: 
; 11609: 			if (lock_screen (mfd_texture_screen))

  00a90	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00a93	50		 push	 eax
  00a94	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00a99	85 c0		 test	 eax, eax
  00a9b	74 43		 je	 SHORT $LN37@draw_overl

; 11610: 			{
; 11611: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00a9d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00aa2	50		 push	 eax
  00aa3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00aa9	83 e9 01	 sub	 ecx, 1
  00aac	51		 push	 ecx
  00aad	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00ab3	83 ea 01	 sub	 edx, 1
  00ab6	52		 push	 edx
  00ab7	6a 00		 push	 0
  00ab9	6a 00		 push	 0
  00abb	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11612: 
; 11613: 				draw_layout_grid ();

  00ac0	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11614: 
; 11615: 				draw_weapon_display_mfd (MFD_LOCATION_DONT_CARE, TRUE);

  00ac5	6a 01		 push	 1
  00ac7	6a ff		 push	 -1
  00ac9	e8 00 00 00 00	 call	 ?draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z ; draw_weapon_display_mfd

; 11616: 
; 11617: 				flush_screen_texture_graphics (mfd_texture_screen);

  00ace	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00ad1	50		 push	 eax
  00ad2	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11618: 
; 11619: 				unlock_screen (mfd_texture_screen);

  00ad7	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00ada	50		 push	 eax
  00adb	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN37@draw_overl:

; 11620: 			}
; 11621: 
; 11622: 			break;

  00ae0	e9 65 02 00 00	 jmp	 $LN2@draw_overl
$LN38@draw_overl:

; 11623: 		}
; 11624: 		////////////////////////////////////////
; 11625: 		case MFD_MODE_SYSTEM:
; 11626: 		////////////////////////////////////////
; 11627: 		{
; 11628: 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00ae5	51		 push	 ecx
  00ae6	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00aeb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00af0	51		 push	 ecx
  00af1	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00af6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00afb	51		 push	 ecx
  00afc	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00b01	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b06	51		 push	 ecx
  00b07	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00b0c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b11	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 11629: 
; 11630: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00b16	51		 push	 ecx
  00b17	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00b1f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b24	51		 push	 ecx
  00b25	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00b2d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b32	51		 push	 ecx
  00b33	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00b3b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b40	51		 push	 ecx
  00b41	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00b49	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b4e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00b53	50		 push	 eax
  00b54	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 11631: 
; 11632: 			set_active_screen (mfd_texture_screen);

  00b59	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00b5c	50		 push	 eax
  00b5d	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11633: 
; 11634: 			if (lock_screen (mfd_texture_screen))

  00b62	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00b65	50		 push	 eax
  00b66	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00b6b	85 c0		 test	 eax, eax
  00b6d	74 3f		 je	 SHORT $LN39@draw_overl

; 11635: 			{
; 11636: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00b6f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00b74	50		 push	 eax
  00b75	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00b7b	83 e9 01	 sub	 ecx, 1
  00b7e	51		 push	 ecx
  00b7f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00b85	83 ea 01	 sub	 edx, 1
  00b88	52		 push	 edx
  00b89	6a 00		 push	 0
  00b8b	6a 00		 push	 0
  00b8d	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11637: 
; 11638: 				draw_layout_grid ();

  00b92	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11639: 
; 11640: 				draw_system_display_mfd ();

  00b97	e8 00 00 00 00	 call	 ?draw_system_display_mfd@@YGXXZ ; draw_system_display_mfd

; 11641: 
; 11642: 				flush_screen_texture_graphics (mfd_texture_screen);

  00b9c	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00b9f	50		 push	 eax
  00ba0	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11643: 
; 11644: 				unlock_screen (mfd_texture_screen);

  00ba5	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00ba8	50		 push	 eax
  00ba9	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN39@draw_overl:

; 11645: 			}
; 11646: 
; 11647: 			break;

  00bae	e9 97 01 00 00	 jmp	 $LN2@draw_overl
$LN40@draw_overl:

; 11648: 		}
; 11649: 		////////////////////////////////////////
; 11650: 		case MFD_MODE_ENGINE:
; 11651: 		////////////////////////////////////////
; 11652: 		{
; 11653: 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00bb3	51		 push	 ecx
  00bb4	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00bb9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bbe	51		 push	 ecx
  00bbf	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00bc4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bc9	51		 push	 ecx
  00bca	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00bcf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bd4	51		 push	 ecx
  00bd5	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00bda	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bdf	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 11654: 
; 11655: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00be4	51		 push	 ecx
  00be5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00bed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bf2	51		 push	 ecx
  00bf3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00bfb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c00	51		 push	 ecx
  00c01	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00c09	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c0e	51		 push	 ecx
  00c0f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00c17	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c1c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00c21	50		 push	 eax
  00c22	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 11656: 
; 11657: 			set_active_screen (mfd_texture_screen);

  00c27	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00c2a	50		 push	 eax
  00c2b	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11658: 
; 11659: 			if (lock_screen (mfd_texture_screen))

  00c30	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00c33	50		 push	 eax
  00c34	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00c39	85 c0		 test	 eax, eax
  00c3b	74 3f		 je	 SHORT $LN41@draw_overl

; 11660: 			{
; 11661: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00c3d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00c42	50		 push	 eax
  00c43	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00c49	83 e9 01	 sub	 ecx, 1
  00c4c	51		 push	 ecx
  00c4d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00c53	83 ea 01	 sub	 edx, 1
  00c56	52		 push	 edx
  00c57	6a 00		 push	 0
  00c59	6a 00		 push	 0
  00c5b	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11662: 
; 11663: 				draw_layout_grid ();

  00c60	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11664: 
; 11665: 				draw_engine_display_mfd ();

  00c65	e8 00 00 00 00	 call	 ?draw_engine_display_mfd@@YGXXZ ; draw_engine_display_mfd

; 11666: 
; 11667: 				flush_screen_texture_graphics (mfd_texture_screen);

  00c6a	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00c6d	50		 push	 eax
  00c6e	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11668: 
; 11669: 				unlock_screen (mfd_texture_screen);

  00c73	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00c76	50		 push	 eax
  00c77	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN41@draw_overl:

; 11670: 			}
; 11671: 
; 11672: 			break;

  00c7c	e9 c9 00 00 00	 jmp	 $LN2@draw_overl
$LN42@draw_overl:

; 11673: 		}
; 11674: 		////////////////////////////////////////
; 11675: 		case MFD_MODE_FLIGHT:
; 11676: 		////////////////////////////////////////
; 11677: 		{
; 11678: 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00c81	51		 push	 ecx
  00c82	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00c87	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c8c	51		 push	 ecx
  00c8d	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00c92	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c97	51		 push	 ecx
  00c98	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00c9d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ca2	51		 push	 ecx
  00ca3	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00ca8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cad	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 11679: 
; 11680: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00cb2	51		 push	 ecx
  00cb3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00cbb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cc0	51		 push	 ecx
  00cc1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00cc9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cce	51		 push	 ecx
  00ccf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00cd7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cdc	51		 push	 ecx
  00cdd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00ce5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00cef	50		 push	 eax
  00cf0	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 11681: 
; 11682: 			set_active_screen (mfd_texture_screen);

  00cf5	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00cf8	50		 push	 eax
  00cf9	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11683: 
; 11684: 			if (lock_screen (mfd_texture_screen))

  00cfe	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00d01	50		 push	 eax
  00d02	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00d07	85 c0		 test	 eax, eax
  00d09	74 3f		 je	 SHORT $LN43@draw_overl

; 11685: 			{
; 11686: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_green_mfd_colour);

  00d0b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_green_mfd_colour@@3UREAL_COLOUR@@A
  00d10	50		 push	 eax
  00d11	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00d17	83 e9 01	 sub	 ecx, 1
  00d1a	51		 push	 ecx
  00d1b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00d21	83 ea 01	 sub	 edx, 1
  00d24	52		 push	 edx
  00d25	6a 00		 push	 0
  00d27	6a 00		 push	 0
  00d29	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11687: 
; 11688: 				draw_layout_grid ();

  00d2e	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11689: 
; 11690: 				draw_flight_display_mfd();

  00d33	e8 00 00 00 00	 call	 ?draw_flight_display_mfd@@YGXXZ ; draw_flight_display_mfd

; 11691: 
; 11692: 				flush_screen_texture_graphics (mfd_texture_screen);

  00d38	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00d3b	50		 push	 eax
  00d3c	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11693: 
; 11694: 				unlock_screen (mfd_texture_screen);

  00d41	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00d44	50		 push	 eax
  00d45	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN43@draw_overl:
$LN2@draw_overl:

; 11695: 			}
; 11696: 
; 11697: 			break;
; 11698: 		}
; 11699: 	}
; 11700: 
; 11701: 	set_active_screen (video_screen);

  00d4a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00d4f	50		 push	 eax
  00d50	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11702: 
; 11703: 	////////////////////////////////////////
; 11704: 	//
; 11705: 	// render MFD to screen
; 11706: 	//
; 11707: 	////////////////////////////////////////
; 11708: 	{
; 11709: 		vertex
; 11710: 			quad[4];
; 11711: 
; 11712: 		real_colour
; 11713: 			colour,
; 11714: 			specular;
; 11715: 
; 11716: 		set_3d_active_environment (main_3d_env);

  00d55	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  00d5a	50		 push	 eax
  00d5b	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 11717: 
; 11718: 		if (begin_3d_scene ())

  00d60	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  00d65	85 c0		 test	 eax, eax
  00d67	0f 84 3b 03 00
	00		 je	 $LN44@draw_overl

; 11719: 		{
; 11720: 			set_d3d_transparency_on ();

  00d6d	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 11721: 
; 11722: 			set_d3d_zbuffer_comparison (FALSE);

  00d72	6a 00		 push	 0
  00d74	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 11723: 
; 11724: 			set_d3d_culling (FALSE);

  00d79	6a 00		 push	 0
  00d7b	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 11725: 
; 11726: 			set_d3d_texture_wrapping (0, FALSE);

  00d80	6a 00		 push	 0
  00d82	6a 00		 push	 0
  00d84	e8 00 00 00 00	 call	 ?set_d3d_texture_wrapping@@YGXHH@Z ; set_d3d_texture_wrapping

; 11727: 
; 11728: /*			if ((application_video_width == 640) || (get_global_unscaled_displays ()))
; 11729: 			{
; 11730: 				set_d3d_texture_mag_filtering (FALSE);
; 11731: 				set_d3d_texture_min_filtering (FALSE);
; 11732: 				set_d3d_texture_mip_filtering (FALSE);
; 11733: 			}
; 11734: 			else */
; 11735: 			{
; 11736: 				set_d3d_texture_mag_filtering (TRUE);

  00d89	6a 01		 push	 1
  00d8b	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 11737: 				set_d3d_texture_min_filtering (TRUE);

  00d90	6a 01		 push	 1
  00d92	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 11738: 				set_d3d_texture_mip_filtering (FALSE);

  00d97	6a 00		 push	 0
  00d99	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering

; 11739: 			}
; 11740: 
; 11741: 			set_d3d_flat_shaded_textured_renderstate (get_system_texture_ptr (texture_index));

  00d9e	8b 45 f4	 mov	 eax, DWORD PTR _texture_index$[ebp]
  00da1	50		 push	 eax
  00da2	e8 00 00 00 00	 call	 ?get_system_texture_ptr@@YGPAUSCREEN@@H@Z ; get_system_texture_ptr
  00da7	50		 push	 eax
  00da8	e8 00 00 00 00	 call	 ?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z ; set_d3d_flat_shaded_textured_renderstate

; 11742: 
; 11743: 			////////////////////////////////////////
; 11744: 			//
; 11745: 
; 11746: 			colour.red	 			= 255;

  00dad	c6 85 c6 fe ff
	ff ff		 mov	 BYTE PTR _colour$2[ebp+2], 255 ; 000000ffH

; 11747: 			colour.green			= 255;

  00db4	c6 85 c5 fe ff
	ff ff		 mov	 BYTE PTR _colour$2[ebp+1], 255 ; 000000ffH

; 11748: 			colour.blue	 			= 255;

  00dbb	c6 85 c4 fe ff
	ff ff		 mov	 BYTE PTR _colour$2[ebp], 255 ; 000000ffH

; 11749: 			colour.alpha  			= 255;

  00dc2	c6 85 c7 fe ff
	ff ff		 mov	 BYTE PTR _colour$2[ebp+3], 255 ; 000000ffH

; 11750: 
; 11751: 			specular.red 			= 0;

  00dc9	c6 85 c2 fe ff
	ff 00		 mov	 BYTE PTR _specular$1[ebp+2], 0

; 11752: 			specular.green	 		= 0;

  00dd0	c6 85 c1 fe ff
	ff 00		 mov	 BYTE PTR _specular$1[ebp+1], 0

; 11753: 			specular.blue 			= 0;

  00dd7	c6 85 c0 fe ff
	ff 00		 mov	 BYTE PTR _specular$1[ebp], 0

; 11754: 			specular.alpha	  		= 255;

  00dde	c6 85 c3 fe ff
	ff ff		 mov	 BYTE PTR _specular$1[ebp+3], 255 ; 000000ffH

; 11755: 
; 11756: 			quad[0].i 				= mfd_screen_x_min;

  00de5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00dea	6b c8 00	 imul	 ecx, eax, 0
  00ded	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00df2	f3 0f 11 84 0d
	d8 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+16], xmm0

; 11757: 			quad[0].j  				= mfd_screen_y_min;

  00dfb	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e00	6b c8 00	 imul	 ecx, eax, 0
  00e03	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00e08	f3 0f 11 84 0d
	dc fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+20], xmm0

; 11758: 			quad[0].z  				= 0.5;

  00e11	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e16	6b c8 00	 imul	 ecx, eax, 0
  00e19	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00e21	f3 0f 11 84 0d
	d0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+8], xmm0

; 11759: 			quad[0].q  				= 0.5;

  00e2a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e2f	6b c8 00	 imul	 ecx, eax, 0
  00e32	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00e3a	f3 0f 11 84 0d
	d4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+12], xmm0

; 11760: 			quad[0].u  				= 0.0;

  00e43	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e48	6b c8 00	 imul	 ecx, eax, 0
  00e4b	0f 57 c0	 xorps	 xmm0, xmm0
  00e4e	f3 0f 11 84 0d
	e0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+24], xmm0

; 11761: 			quad[0].v				= 0.0;

  00e57	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e5c	6b c8 00	 imul	 ecx, eax, 0
  00e5f	0f 57 c0	 xorps	 xmm0, xmm0
  00e62	f3 0f 11 84 0d
	e4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+28], xmm0

; 11762: 
; 11763: 			quad[1].i  				= mfd_screen_x_max;

  00e6b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e70	c1 e0 00	 shl	 eax, 0
  00e73	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00e78	f3 0f 11 84 05
	d8 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+16], xmm0

; 11764: 			quad[1].j  				= mfd_screen_y_min;

  00e81	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e86	c1 e0 00	 shl	 eax, 0
  00e89	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00e8e	f3 0f 11 84 05
	dc fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+20], xmm0

; 11765: 			quad[1].z  				= 0.5;

  00e97	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e9c	c1 e0 00	 shl	 eax, 0
  00e9f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00ea7	f3 0f 11 84 05
	d0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+8], xmm0

; 11766: 			quad[1].q  				= 0.5;

  00eb0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00eb5	c1 e0 00	 shl	 eax, 0
  00eb8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00ec0	f3 0f 11 84 05
	d4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+12], xmm0

; 11767: 			quad[1].u  				= 1.0;

  00ec9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00ece	c1 e0 00	 shl	 eax, 0
  00ed1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00ed9	f3 0f 11 84 05
	e0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+24], xmm0

; 11768: 			quad[1].v  				= 0.0;

  00ee2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00ee7	c1 e0 00	 shl	 eax, 0
  00eea	0f 57 c0	 xorps	 xmm0, xmm0
  00eed	f3 0f 11 84 05
	e4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+28], xmm0

; 11769: 
; 11770: 			quad[2].i				= mfd_screen_x_max;

  00ef6	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00efb	d1 e0		 shl	 eax, 1
  00efd	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00f02	f3 0f 11 84 05
	d8 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+16], xmm0

; 11771: 			quad[2].j  				= mfd_screen_y_max;

  00f0b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f10	d1 e0		 shl	 eax, 1
  00f12	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00f17	f3 0f 11 84 05
	dc fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+20], xmm0

; 11772: 			quad[2].z  				= 0.5;

  00f20	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f25	d1 e0		 shl	 eax, 1
  00f27	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00f2f	f3 0f 11 84 05
	d0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+8], xmm0

; 11773: 			quad[2].q  				= 0.5;

  00f38	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f3d	d1 e0		 shl	 eax, 1
  00f3f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00f47	f3 0f 11 84 05
	d4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+12], xmm0

; 11774: 			quad[2].u  				= 1.0;

  00f50	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f55	d1 e0		 shl	 eax, 1
  00f57	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00f5f	f3 0f 11 84 05
	e0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+24], xmm0

; 11775: 			quad[2].v  				= 1.0;

  00f68	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f6d	d1 e0		 shl	 eax, 1
  00f6f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00f77	f3 0f 11 84 05
	e4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+28], xmm0

; 11776: 
; 11777: 			quad[3].i  				= mfd_screen_x_min;

  00f80	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f85	6b c8 03	 imul	 ecx, eax, 3
  00f88	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00f8d	f3 0f 11 84 0d
	d8 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+16], xmm0

; 11778: 			quad[3].j  				= mfd_screen_y_max;

  00f96	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f9b	6b c8 03	 imul	 ecx, eax, 3
  00f9e	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00fa3	f3 0f 11 84 0d
	dc fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+20], xmm0

; 11779: 			quad[3].z  				= 0.5;

  00fac	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00fb1	6b c8 03	 imul	 ecx, eax, 3
  00fb4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00fbc	f3 0f 11 84 0d
	d0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+8], xmm0

; 11780: 			quad[3].q  				= 0.5;

  00fc5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00fca	6b c8 03	 imul	 ecx, eax, 3
  00fcd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00fd5	f3 0f 11 84 0d
	d4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+12], xmm0

; 11781: 			quad[3].u				= 0.0;

  00fde	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00fe3	6b c8 03	 imul	 ecx, eax, 3
  00fe6	0f 57 c0	 xorps	 xmm0, xmm0
  00fe9	f3 0f 11 84 0d
	e0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+24], xmm0

; 11782: 			quad[3].v				= 1.0;

  00ff2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00ff7	6b c8 03	 imul	 ecx, eax, 3
  00ffa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01002	f3 0f 11 84 0d
	e4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+28], xmm0

; 11783: 
; 11784: 			quad[0].next_vertex	= &quad[1];

  0100b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01010	c1 e0 00	 shl	 eax, 0
  01013	8d 8c 05 c8 fe
	ff ff		 lea	 ecx, DWORD PTR _quad$3[ebp+eax]
  0101a	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0101f	6b c2 00	 imul	 eax, edx, 0
  01022	89 8c 05 f0 fe
	ff ff		 mov	 DWORD PTR _quad$3[ebp+eax+40], ecx

; 11785: 			quad[1].next_vertex	= &quad[2];

  01029	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0102e	d1 e0		 shl	 eax, 1
  01030	8d 8c 05 c8 fe
	ff ff		 lea	 ecx, DWORD PTR _quad$3[ebp+eax]
  01037	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0103c	c1 e2 00	 shl	 edx, 0
  0103f	89 8c 15 f0 fe
	ff ff		 mov	 DWORD PTR _quad$3[ebp+edx+40], ecx

; 11786: 			quad[2].next_vertex	= &quad[3];

  01046	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0104b	6b c8 03	 imul	 ecx, eax, 3
  0104e	8d 94 0d c8 fe
	ff ff		 lea	 edx, DWORD PTR _quad$3[ebp+ecx]
  01055	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0105a	d1 e0		 shl	 eax, 1
  0105c	89 94 05 f0 fe
	ff ff		 mov	 DWORD PTR _quad$3[ebp+eax+40], edx

; 11787: 			quad[3].next_vertex	= NULL;

  01063	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01068	6b c8 03	 imul	 ecx, eax, 3
  0106b	c7 84 0d f0 fe
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$3[ebp+ecx+40], 0

; 11788: 
; 11789: 			//
; 11790: 			////////////////////////////////////////
; 11791: 
; 11792: 			draw_wbuffered_flat_shaded_textured_polygon (quad, colour, specular);

  01076	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _specular$1[ebp]
  0107c	50		 push	 eax
  0107d	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _colour$2[ebp]
  01083	51		 push	 ecx
  01084	8d 95 c8 fe ff
	ff		 lea	 edx, DWORD PTR _quad$3[ebp]
  0108a	52		 push	 edx
  0108b	e8 00 00 00 00	 call	 ?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_flat_shaded_textured_polygon

; 11793: 
; 11794: 			set_d3d_transparency_off ();

  01090	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 11795: 
; 11796: 			set_d3d_zbuffer_comparison (TRUE);

  01095	6a 01		 push	 1
  01097	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 11797: 
; 11798: 			set_d3d_culling (TRUE);

  0109c	6a 01		 push	 1
  0109e	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 11799: 
; 11800: 			end_3d_scene ();

  010a3	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN44@draw_overl:
$LN1@draw_overl:

; 11801: 		}
; 11802: 	}
; 11803: }

  010a8	5f		 pop	 edi
  010a9	5e		 pop	 esi
  010aa	5b		 pop	 ebx
  010ab	8b e5		 mov	 esp, ebp
  010ad	5d		 pop	 ebp
  010ae	c2 10 00	 ret	 16			; 00000010H
  010b1	0f 1f 00	 npad	 3
$LN48@draw_overl:
  010b4	00 00 00 00	 DD	 $LN11@draw_overl
  010b8	00 00 00 00	 DD	 $LN13@draw_overl
  010bc	00 00 00 00	 DD	 $LN15@draw_overl
  010c0	00 00 00 00	 DD	 $LN17@draw_overl
  010c4	00 00 00 00	 DD	 $LN19@draw_overl
  010c8	00 00 00 00	 DD	 $LN19@draw_overl
  010cc	00 00 00 00	 DD	 $LN19@draw_overl
  010d0	00 00 00 00	 DD	 $LN2@draw_overl
  010d4	00 00 00 00	 DD	 $LN31@draw_overl
  010d8	00 00 00 00	 DD	 $LN34@draw_overl
  010dc	00 00 00 00	 DD	 $LN36@draw_overl
  010e0	00 00 00 00	 DD	 $LN38@draw_overl
  010e4	00 00 00 00	 DD	 $LN40@draw_overl
  010e8	00 00 00 00	 DD	 $LN42@draw_overl
?draw_overlaid_default_mfd@@YGXMMMW4MFD_LOCATIONS@@@Z ENDP ; draw_overlaid_default_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_default_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv211 = -84						; size = 4
tv159 = -84						; size = 4
_right_export$ = -16					; size = 4
_left_export$ = -12					; size = 4
_mfd_texture_screen$ = -8				; size = 4
_mfd_mode$ = -4						; size = 4
_location$ = 8						; size = 4
?draw_default_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z PROC ; draw_default_mfd_on_texture, COMDAT

; 10744: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10745: 	mfd_modes
; 10746: 		*mfd_mode;
; 10747: 
; 10748: 	screen
; 10749: 		*mfd_texture_screen,
; 10750: 		*left_export,
; 10751: 		*right_export;
; 10752: 
; 10753: 	ASSERT ((location == MFD_LOCATION_LHS) || (location == MFD_LOCATION_RHS));

  00009	83 7d 08 00	 cmp	 DWORD PTR _location$[ebp], 0
  0000d	74 1e		 je	 SHORT $LN6@draw_defau
  0000f	83 7d 08 01	 cmp	 DWORD PTR _location$[ebp], 1
  00013	74 18		 je	 SHORT $LN6@draw_defau
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_default_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 09	 add	 eax, 9
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@HOBNFLGC@?$CIlocation?5?$DN?$DN?5MFD_LOCATION_LHS?$CJ?5@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@draw_defau:

; 10754: 
; 10755: /*	if (!electrical_system_active())
; 10756: 	{
; 10757: 		select_default_mfd_mode (MFD_MODE_OFF, MFD_LOCATION_LHS);
; 10758: 		select_default_mfd_mode (MFD_MODE_OFF, MFD_LOCATION_RHS);
; 10759: 	}
; 10760: */
; 10761: //	update_pointer_position();
; 10762: 
; 10763: 	if (location == MFD_LOCATION_LHS)

  0002d	83 7d 08 00	 cmp	 DWORD PTR _location$[ebp], 0
  00031	75 21		 jne	 SHORT $LN7@draw_defau

; 10764: 	{
; 10765: 		mfd_mode = &lhs_mfd_mode;

  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], OFFSET ?lhs_mfd_mode@@3W4MFD_MODES@@A

; 10766: 
; 10767: 		mfd_texture_screen = lhs_mfd_texture_screen;

  0003a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lhs_mfd_texture_screen@@3PAUSCREEN@@A
  0003f	89 45 f8	 mov	 DWORD PTR _mfd_texture_screen$[ebp], eax

; 10768: 
; 10769: 		set_system_texture_screen (lhs_mfd_texture_screen, TEXTURE_INDEX_AVCKPT_DISPLAY_LHS_MFD);

  00042	68 f8 00 00 00	 push	 248			; 000000f8H
  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lhs_mfd_texture_screen@@3PAUSCREEN@@A
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 10770: 	}
; 10771: 	else

  00052	eb 1f		 jmp	 SHORT $LN8@draw_defau
$LN7@draw_defau:

; 10772: 	{
; 10773: 		mfd_mode = &rhs_mfd_mode;

  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], OFFSET ?rhs_mfd_mode@@3W4MFD_MODES@@A

; 10774: 
; 10775: 		mfd_texture_screen = rhs_mfd_texture_screen;

  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rhs_mfd_texture_screen@@3PAUSCREEN@@A
  00060	89 45 f8	 mov	 DWORD PTR _mfd_texture_screen$[ebp], eax

; 10776: 
; 10777: 		set_system_texture_screen (rhs_mfd_texture_screen, TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD);

  00063	68 f9 00 00 00	 push	 249			; 000000f9H
  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rhs_mfd_texture_screen@@3PAUSCREEN@@A
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen
$LN8@draw_defau:

; 10778: 	}
; 10779: 
; 10780: 	if (tsd_underlay == TSD_UNDERLAY_TADS
; 10781: 		&& (d3d_can_render_to_texture)
; 10782: 		&& !default_damage.flir
; 10783: 		&& (lhs_mfd_mode == MFD_MODE_TSD

  00073	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 2
  0007a	75 35		 jne	 SHORT $LN9@draw_defau
  0007c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  00083	74 2c		 je	 SHORT $LN9@draw_defau
  00085	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  0008a	c1 e8 02	 shr	 eax, 2
  0008d	83 e0 01	 and	 eax, 1
  00090	75 1f		 jne	 SHORT $LN9@draw_defau
  00092	83 3d 00 00 00
	00 08		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 8
  00099	74 09		 je	 SHORT $LN11@draw_defau
  0009b	83 3d 00 00 00
	00 08		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 8
  000a2	75 0d		 jne	 SHORT $LN9@draw_defau
$LN11@draw_defau:

; 10784: 			|| rhs_mfd_mode == MFD_MODE_TSD))
; 10785: 		tsd_tads_underlay_active = TRUE;

  000a4	b8 01 00 00 00	 mov	 eax, 1
  000a9	66 a3 00 00 00
	00		 mov	 WORD PTR ?tsd_tads_underlay_active@@3FA, ax

; 10786: 	else

  000af	eb 08		 jmp	 SHORT $LN10@draw_defau
$LN9@draw_defau:

; 10787: 		tsd_tads_underlay_active = FALSE;

  000b1	33 c0		 xor	 eax, eax
  000b3	66 a3 00 00 00
	00		 mov	 WORD PTR ?tsd_tads_underlay_active@@3FA, ax
$LN10@draw_defau:

; 10788: 
; 10789: 	////////////////////////////////////////
; 10790: 	//
; 10791: 	// set up MFD 2D environment
; 10792: 	//
; 10793: 	////////////////////////////////////////
; 10794: 
; 10795: 	set_2d_active_environment (mfd_env);

  000b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 10796: 
; 10797: 	//
; 10798: 	// window
; 10799: 	//
; 10800: 
; 10801: 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  000c4	51		 push	 ecx
  000c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  000cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d2	51		 push	 ecx
  000d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  000db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e0	51		 push	 ecx
  000e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  000e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ee	51		 push	 ecx
  000ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  000f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 10802: 
; 10803: 	//
; 10804: 	// viewport
; 10805: 	//
; 10806: 
; 10807: 	ASSERT (mfd_viewport_size <= mfd_texture_size);

  00107	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_texture_size@@3HA
  0010f	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00116	73 18		 jae	 SHORT $LN12@draw_defau
  00118	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_default_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z@4JA
  0011d	83 c0 3f	 add	 eax, 63			; 0000003fH
  00120	50		 push	 eax
  00121	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00126	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@IPIPCLFE@mfd_viewport_size?5?$DM?$DN?5mfd_textur@
  0012b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN12@draw_defau:

; 10808: 
; 10809: 	mfd_viewport_x_org = mfd_viewport_texture_x_org;

  00130	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_viewport_texture_x_org@@3HA
  00138	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 10810: 
; 10811: 	mfd_viewport_y_org = mfd_viewport_texture_y_org;

  00140	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_viewport_texture_y_org@@3HA
  00148	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 10812: 
; 10813: 	mfd_viewport_x_min = mfd_viewport_x_org - (mfd_viewport_size * 0.5);

  00150	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  00158	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00160	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00168	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0016c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00170	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 10814: 
; 10815: 	mfd_viewport_y_min = mfd_viewport_y_org - (mfd_viewport_size * 0.5);

  00178	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_org@@3MA
  00180	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00188	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00190	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00194	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00198	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 10816: 
; 10817: 	mfd_viewport_x_max = mfd_viewport_x_org + (mfd_viewport_size * 0.5) - 0.001;

  001a0	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  001a8	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  001b0	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  001b8	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001bc	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001c4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001c8	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 10818: 
; 10819: 	mfd_viewport_y_max = mfd_viewport_y_org + (mfd_viewport_size * 0.5) - 0.001;

  001d0	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_org@@3MA
  001d8	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  001e0	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  001e8	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001ec	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001f4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001f8	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 10820: 
; 10821: 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00200	51		 push	 ecx
  00201	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00209	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020e	51		 push	 ecx
  0020f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00217	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021c	51		 push	 ecx
  0021d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00225	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022a	51		 push	 ecx
  0022b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00233	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00238	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0023d	50		 push	 eax
  0023e	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 10822: 
; 10823: 	if (*mfd_mode == MFD_MODE_AIR_RADAR && target_acquisition_system == TARGET_ACQUISITION_SYSTEM_GROUND_RADAR)

  00243	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00246	83 38 03	 cmp	 DWORD PTR [eax], 3
  00249	75 14		 jne	 SHORT $LN13@draw_defau
  0024b	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 1 ; target_acquisition_system
  00252	75 0b		 jne	 SHORT $LN13@draw_defau

; 10824: 		*mfd_mode = MFD_MODE_GROUND_RADAR;

  00254	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00257	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
  0025d	eb 1a		 jmp	 SHORT $LN15@draw_defau
$LN13@draw_defau:

; 10825: 	else if (*mfd_mode == MFD_MODE_GROUND_RADAR && target_acquisition_system == TARGET_ACQUISITION_SYSTEM_AIR_RADAR)

  0025f	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00262	83 38 02	 cmp	 DWORD PTR [eax], 2
  00265	75 12		 jne	 SHORT $LN15@draw_defau
  00267	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 2 ; target_acquisition_system
  0026e	75 09		 jne	 SHORT $LN15@draw_defau

; 10826: 		*mfd_mode = MFD_MODE_AIR_RADAR;

  00270	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00273	c7 00 03 00 00
	00		 mov	 DWORD PTR [eax], 3
$LN15@draw_defau:

; 10827: 
; 10828: 	////////////////////////////////////////
; 10829: 	//
; 10830: 	// draw MFD display
; 10831: 	//
; 10832: 	////////////////////////////////////////
; 10833: 
; 10834: 	switch (*mfd_mode)

  00279	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  0027c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0027e	89 4d ac	 mov	 DWORD PTR tv159[ebp], ecx
  00281	83 7d ac 0d	 cmp	 DWORD PTR tv159[ebp], 13 ; 0000000dH
  00285	0f 87 c8 05 00
	00		 ja	 $LN2@draw_defau
  0028b	8b 55 ac	 mov	 edx, DWORD PTR tv159[ebp]
  0028e	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN70@draw_defau[edx*4]
$LN16@draw_defau:

; 10835: 	{
; 10836: 		////////////////////////////////////////
; 10837: 		case MFD_MODE_OFF:
; 10838: 		////////////////////////////////////////
; 10839: 		{
; 10840: 			set_active_screen (mfd_texture_screen);

  00295	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00298	50		 push	 eax
  00299	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 10841: 
; 10842: 			if (lock_screen (mfd_texture_screen))

  0029e	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  002a1	50		 push	 eax
  002a2	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  002a7	85 c0		 test	 eax, eax
  002a9	74 3a		 je	 SHORT $LN17@draw_defau

; 10843: 			{
; 10844: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  002ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  002b0	50		 push	 eax
  002b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  002b7	83 e9 01	 sub	 ecx, 1
  002ba	51		 push	 ecx
  002bb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  002c1	83 ea 01	 sub	 edx, 1
  002c4	52		 push	 edx
  002c5	6a 00		 push	 0
  002c7	6a 00		 push	 0
  002c9	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 10845: 
; 10846: 				draw_layout_grid ();

  002ce	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 10847: 
; 10848: 				flush_screen_texture_graphics (mfd_texture_screen);

  002d3	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  002d6	50		 push	 eax
  002d7	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 10849: 
; 10850: 				unlock_screen (mfd_texture_screen);

  002dc	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  002df	50		 push	 eax
  002e0	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN17@draw_defau:

; 10851: 			}
; 10852: 
; 10853: 			break;

  002e5	e9 69 05 00 00	 jmp	 $LN2@draw_defau
$LN18@draw_defau:

; 10854: 		}
; 10855: 		////////////////////////////////////////
; 10856: 		case MFD_MODE_DAMAGED:
; 10857: 		////////////////////////////////////////
; 10858: 		{
; 10859: 			set_active_screen (mfd_texture_screen);

  002ea	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  002ed	50		 push	 eax
  002ee	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 10860: 
; 10861: 			if (lock_screen (mfd_texture_screen))

  002f3	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  002f6	50		 push	 eax
  002f7	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  002fc	85 c0		 test	 eax, eax
  002fe	74 3f		 je	 SHORT $LN19@draw_defau

; 10862: 			{
; 10863: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00300	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00305	50		 push	 eax
  00306	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  0030c	83 e9 01	 sub	 ecx, 1
  0030f	51		 push	 ecx
  00310	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00316	83 ea 01	 sub	 edx, 1
  00319	52		 push	 edx
  0031a	6a 00		 push	 0
  0031c	6a 00		 push	 0
  0031e	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 10864: 
; 10865: 				draw_layout_grid ();

  00323	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 10866: 
; 10867: 				draw_damaged_mfd ();

  00328	e8 00 00 00 00	 call	 ?draw_damaged_mfd@@YGXXZ ; draw_damaged_mfd

; 10868: 
; 10869: 				flush_screen_texture_graphics (mfd_texture_screen);

  0032d	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00330	50		 push	 eax
  00331	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 10870: 
; 10871: 				unlock_screen (mfd_texture_screen);

  00336	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00339	50		 push	 eax
  0033a	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN19@draw_defau:

; 10872: 			}
; 10873: 
; 10874: 			break;

  0033f	e9 0f 05 00 00	 jmp	 $LN2@draw_defau
$LN20@draw_defau:

; 10875: 		}
; 10876: 		////////////////////////////////////////
; 10877: 		case MFD_MODE_GROUND_RADAR:
; 10878: 		////////////////////////////////////////
; 10879: 		{
; 10880: 			set_active_screen (mfd_texture_screen);

  00344	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00347	50		 push	 eax
  00348	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 10881: 
; 10882: 			if (lock_screen (mfd_texture_screen))

  0034d	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00350	50		 push	 eax
  00351	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00356	85 c0		 test	 eax, eax
  00358	74 3f		 je	 SHORT $LN21@draw_defau

; 10883: 			{
; 10884: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  0035a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0035f	50		 push	 eax
  00360	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00366	83 e9 01	 sub	 ecx, 1
  00369	51		 push	 ecx
  0036a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00370	83 ea 01	 sub	 edx, 1
  00373	52		 push	 edx
  00374	6a 00		 push	 0
  00376	6a 00		 push	 0
  00378	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 10885: 
; 10886: 				draw_layout_grid ();

  0037d	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 10887: 
; 10888: 				draw_ground_radar_mfd ();

  00382	e8 00 00 00 00	 call	 ?draw_ground_radar_mfd@@YGXXZ ; draw_ground_radar_mfd

; 10889: 
; 10890: 				flush_screen_texture_graphics (mfd_texture_screen);

  00387	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0038a	50		 push	 eax
  0038b	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 10891: 
; 10892: 				unlock_screen (mfd_texture_screen);

  00390	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00393	50		 push	 eax
  00394	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN21@draw_defau:

; 10893: 			}
; 10894: 
; 10895: 			break;

  00399	e9 b5 04 00 00	 jmp	 $LN2@draw_defau
$LN22@draw_defau:

; 10896: 		}
; 10897: 		////////////////////////////////////////
; 10898: 		case MFD_MODE_AIR_RADAR:
; 10899: 		////////////////////////////////////////
; 10900: 		{
; 10901: 			set_active_screen (mfd_texture_screen);

  0039e	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  003a1	50		 push	 eax
  003a2	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 10902: 
; 10903: 			if (lock_screen (mfd_texture_screen))

  003a7	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  003aa	50		 push	 eax
  003ab	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  003b0	85 c0		 test	 eax, eax
  003b2	74 3f		 je	 SHORT $LN23@draw_defau

; 10904: 			{
; 10905: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  003b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  003b9	50		 push	 eax
  003ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  003c0	83 e9 01	 sub	 ecx, 1
  003c3	51		 push	 ecx
  003c4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  003ca	83 ea 01	 sub	 edx, 1
  003cd	52		 push	 edx
  003ce	6a 00		 push	 0
  003d0	6a 00		 push	 0
  003d2	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 10906: 
; 10907: 				draw_layout_grid ();

  003d7	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 10908: 
; 10909: 				draw_air_radar_mfd ();

  003dc	e8 00 00 00 00	 call	 ?draw_air_radar_mfd@@YGXXZ ; draw_air_radar_mfd

; 10910: 
; 10911: 				flush_screen_texture_graphics (mfd_texture_screen);

  003e1	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  003e4	50		 push	 eax
  003e5	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 10912: 
; 10913: 				unlock_screen (mfd_texture_screen);

  003ea	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  003ed	50		 push	 eax
  003ee	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN23@draw_defau:

; 10914: 			}
; 10915: 
; 10916: 			break;

  003f3	e9 5b 04 00 00	 jmp	 $LN2@draw_defau
$LN24@draw_defau:

; 10917: 		}
; 10918: 		////////////////////////////////////////
; 10919: 		case MFD_MODE_FLIR:
; 10920: 		case MFD_MODE_DTV:
; 10921: 		case MFD_MODE_DVO:
; 10922: 		////////////////////////////////////////
; 10923: 		{
; 10924: 			switch (eo_sensor)

  003f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; eo_sensor
  003fd	89 45 ac	 mov	 DWORD PTR tv211[ebp], eax
  00400	83 7d ac 03	 cmp	 DWORD PTR tv211[ebp], 3
  00404	74 0e		 je	 SHORT $LN25@draw_defau
  00406	83 7d ac 04	 cmp	 DWORD PTR tv211[ebp], 4
  0040a	74 13		 je	 SHORT $LN26@draw_defau
  0040c	83 7d ac 05	 cmp	 DWORD PTR tv211[ebp], 5
  00410	74 18		 je	 SHORT $LN27@draw_defau
  00412	eb 1f		 jmp	 SHORT $LN4@draw_defau
$LN25@draw_defau:

; 10925: 			{
; 10926: 			case TARGET_ACQUISITION_SYSTEM_FLIR:
; 10927: 				*mfd_mode = MFD_MODE_FLIR;

  00414	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00417	c7 00 04 00 00
	00		 mov	 DWORD PTR [eax], 4

; 10928: 				break;

  0041d	eb 14		 jmp	 SHORT $LN4@draw_defau
$LN26@draw_defau:

; 10929: 			case TARGET_ACQUISITION_SYSTEM_DTV:
; 10930: 				*mfd_mode = MFD_MODE_DTV;

  0041f	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00422	c7 00 05 00 00
	00		 mov	 DWORD PTR [eax], 5

; 10931: 				break;

  00428	eb 09		 jmp	 SHORT $LN4@draw_defau
$LN27@draw_defau:

; 10932: 			case TARGET_ACQUISITION_SYSTEM_DVO:
; 10933: 				*mfd_mode = MFD_MODE_DVO;

  0042a	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  0042d	c7 00 06 00 00
	00		 mov	 DWORD PTR [eax], 6
$LN4@draw_defau:

; 10934: 				break;
; 10935: 			}
; 10936: 			
; 10937: 			if ((d3d_can_render_to_texture) && (!default_damage.flir))

  00433	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  0043a	0f 84 01 01 00
	00		 je	 $LN28@draw_defau
  00440	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  00445	c1 e8 02	 shr	 eax, 2
  00448	83 e0 01	 and	 eax, 1
  0044b	0f 85 f0 00 00
	00		 jne	 $LN28@draw_defau

; 10938: 			{
; 10939: 				ASSERT (eo_3d_texture_screen);

  00451	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, 0
  00458	75 1a		 jne	 SHORT $LN30@draw_defau
  0045a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_default_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z@4JA
  0045f	05 c3 00 00 00	 add	 eax, 195		; 000000c3H
  00464	50		 push	 eax
  00465	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0046a	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
  0046f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN30@draw_defau:

; 10940: 
; 10941: 				if (location == MFD_LOCATION_LHS)

  00474	83 7d 08 00	 cmp	 DWORD PTR _location$[ebp], 0
  00478	75 12		 jne	 SHORT $LN31@draw_defau

; 10942: 					set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_AVCKPT_DISPLAY_LHS_MFD);

  0047a	68 f8 00 00 00	 push	 248			; 000000f8H
  0047f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00484	50		 push	 eax
  00485	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 10943: 				else

  0048a	eb 10		 jmp	 SHORT $LN32@draw_defau
$LN31@draw_defau:

; 10944: 					set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD);

  0048c	68 f9 00 00 00	 push	 249			; 000000f9H
  00491	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00496	50		 push	 eax
  00497	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen
$LN32@draw_defau:

; 10945: 
; 10946: 				if (*mfd_mode == MFD_MODE_FLIR)

  0049c	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  0049f	83 38 04	 cmp	 DWORD PTR [eax], 4
  004a2	75 0e		 jne	 SHORT $LN33@draw_defau

; 10947: 					draw_3d_eo_display_on_texture (&default_flir, TARGET_ACQUISITION_SYSTEM_FLIR);

  004a4	6a 03		 push	 3
  004a6	68 00 00 00 00	 push	 OFFSET ?default_flir@@3UEO_PARAMS@@A ; default_flir
  004ab	e8 00 00 00 00	 call	 ?draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display_on_texture
  004b0	eb 22		 jmp	 SHORT $LN36@draw_defau
$LN33@draw_defau:

; 10948: 				else if (*mfd_mode == MFD_MODE_DTV)

  004b2	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  004b5	83 38 05	 cmp	 DWORD PTR [eax], 5
  004b8	75 0e		 jne	 SHORT $LN35@draw_defau

; 10949: 					draw_3d_eo_display_on_texture (&default_dtv, TARGET_ACQUISITION_SYSTEM_DTV);

  004ba	6a 04		 push	 4
  004bc	68 00 00 00 00	 push	 OFFSET ?default_dtv@@3UEO_PARAMS@@A ; default_dtv
  004c1	e8 00 00 00 00	 call	 ?draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display_on_texture

; 10950: 				else

  004c6	eb 0c		 jmp	 SHORT $LN36@draw_defau
$LN35@draw_defau:

; 10951: 					draw_3d_eo_display_on_texture (&default_dvo, TARGET_ACQUISITION_SYSTEM_DVO);

  004c8	6a 05		 push	 5
  004ca	68 00 00 00 00	 push	 OFFSET ?default_dvo@@3UEO_PARAMS@@A ; default_dvo
  004cf	e8 00 00 00 00	 call	 ?draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display_on_texture
$LN36@draw_defau:

; 10952: 
; 10953: 				set_active_screen (eo_3d_texture_screen);

  004d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  004d9	50		 push	 eax
  004da	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 10954: 
; 10955: 				if (lock_screen (eo_3d_texture_screen))

  004df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  004e4	50		 push	 eax
  004e5	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  004ea	85 c0		 test	 eax, eax
  004ec	74 4a		 je	 SHORT $LN37@draw_defau

; 10956: 				{
; 10957: 					draw_layout_grid ();

  004ee	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 10958: 
; 10959: 					if (*mfd_mode == MFD_MODE_FLIR)

  004f3	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  004f6	83 38 04	 cmp	 DWORD PTR [eax], 4
  004f9	75 0b		 jne	 SHORT $LN38@draw_defau

; 10960: 						draw_2d_flir_mfd (TRUE, FALSE);

  004fb	6a 00		 push	 0
  004fd	6a 01		 push	 1
  004ff	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXHH@Z ; draw_2d_flir_mfd
  00504	eb 1c		 jmp	 SHORT $LN41@draw_defau
$LN38@draw_defau:

; 10961: 					else if (*mfd_mode == MFD_MODE_DTV)

  00506	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00509	83 38 05	 cmp	 DWORD PTR [eax], 5
  0050c	75 0b		 jne	 SHORT $LN40@draw_defau

; 10962: 						draw_2d_dtv_mfd (TRUE, FALSE);

  0050e	6a 00		 push	 0
  00510	6a 01		 push	 1
  00512	e8 00 00 00 00	 call	 ?draw_2d_dtv_mfd@@YGXHH@Z ; draw_2d_dtv_mfd

; 10963: 					else

  00517	eb 09		 jmp	 SHORT $LN41@draw_defau
$LN40@draw_defau:

; 10964: 						draw_2d_dvo_mfd (TRUE, FALSE);

  00519	6a 00		 push	 0
  0051b	6a 01		 push	 1
  0051d	e8 00 00 00 00	 call	 ?draw_2d_dvo_mfd@@YGXHH@Z ; draw_2d_dvo_mfd
$LN41@draw_defau:

; 10965: 
; 10966: 					flush_screen_texture_graphics (eo_3d_texture_screen);

  00522	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00527	50		 push	 eax
  00528	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 10967: 					unlock_screen (eo_3d_texture_screen);

  0052d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00532	50		 push	 eax
  00533	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN37@draw_defau:

; 10968: 				}
; 10969: 
; 10970: 				set_pilots_full_screen_params (FALSE);

  00538	6a 00		 push	 0
  0053a	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params

; 10971: 			}
; 10972: 			else

  0053f	eb 7f		 jmp	 SHORT $LN42@draw_defau
$LN28@draw_defau:

; 10973: 			{
; 10974: 				set_active_screen (mfd_texture_screen);

  00541	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00544	50		 push	 eax
  00545	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 10975: 
; 10976: 				if (lock_screen (mfd_texture_screen))

  0054a	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0054d	50		 push	 eax
  0054e	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00553	85 c0		 test	 eax, eax
  00555	74 69		 je	 SHORT $LN42@draw_defau

; 10977: 				{
; 10978: 					set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00557	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0055c	50		 push	 eax
  0055d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00563	83 e9 01	 sub	 ecx, 1
  00566	51		 push	 ecx
  00567	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  0056d	83 ea 01	 sub	 edx, 1
  00570	52		 push	 edx
  00571	6a 00		 push	 0
  00573	6a 00		 push	 0
  00575	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 10979: 
; 10980: 					draw_layout_grid ();

  0057a	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 10981: 
; 10982: 					if (*mfd_mode == MFD_MODE_FLIR)

  0057f	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00582	83 38 04	 cmp	 DWORD PTR [eax], 4
  00585	75 0b		 jne	 SHORT $LN43@draw_defau

; 10983: 						draw_2d_flir_mfd (FALSE, FALSE);

  00587	6a 00		 push	 0
  00589	6a 00		 push	 0
  0058b	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXHH@Z ; draw_2d_flir_mfd
  00590	eb 1c		 jmp	 SHORT $LN46@draw_defau
$LN43@draw_defau:

; 10984: 					else if (*mfd_mode == MFD_MODE_DTV)

  00592	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00595	83 38 05	 cmp	 DWORD PTR [eax], 5
  00598	75 0b		 jne	 SHORT $LN45@draw_defau

; 10985: 						draw_2d_dtv_mfd (FALSE, FALSE);

  0059a	6a 00		 push	 0
  0059c	6a 00		 push	 0
  0059e	e8 00 00 00 00	 call	 ?draw_2d_dtv_mfd@@YGXHH@Z ; draw_2d_dtv_mfd

; 10986: 					else

  005a3	eb 09		 jmp	 SHORT $LN46@draw_defau
$LN45@draw_defau:

; 10987: 						draw_2d_dvo_mfd (FALSE, FALSE);

  005a5	6a 00		 push	 0
  005a7	6a 00		 push	 0
  005a9	e8 00 00 00 00	 call	 ?draw_2d_dvo_mfd@@YGXHH@Z ; draw_2d_dvo_mfd
$LN46@draw_defau:

; 10988: 
; 10989: 					flush_screen_texture_graphics (mfd_texture_screen);

  005ae	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  005b1	50		 push	 eax
  005b2	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 10990: 
; 10991: 					unlock_screen (mfd_texture_screen);

  005b7	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  005ba	50		 push	 eax
  005bb	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN42@draw_defau:

; 10992: 				}
; 10993: 			}
; 10994: 
; 10995: 			break;

  005c0	e9 8e 02 00 00	 jmp	 $LN2@draw_defau
$LN47@draw_defau:

; 10996: 		}
; 10997: 		////////////////////////////////////////
; 10998: 		case MFD_MODE_TSD:
; 10999: 		////////////////////////////////////////
; 11000: 		{
; 11001: 			if (tsd_tads_underlay_active)

  005c5	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?tsd_tads_underlay_active@@3FA
  005cc	85 c0		 test	 eax, eax
  005ce	74 53		 je	 SHORT $LN48@draw_defau

; 11002: 			{
; 11003: 				if (location == MFD_LOCATION_LHS)

  005d0	83 7d 08 00	 cmp	 DWORD PTR _location$[ebp], 0
  005d4	75 12		 jne	 SHORT $LN49@draw_defau

; 11004: 					set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_AVCKPT_DISPLAY_LHS_MFD);

  005d6	68 f8 00 00 00	 push	 248			; 000000f8H
  005db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  005e0	50		 push	 eax
  005e1	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 11005: 				else

  005e6	eb 10		 jmp	 SHORT $LN50@draw_defau
$LN49@draw_defau:

; 11006: 					set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD);

  005e8	68 f9 00 00 00	 push	 249			; 000000f9H
  005ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  005f2	50		 push	 eax
  005f3	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen
$LN50@draw_defau:

; 11007: 
; 11008: 				if (eo_sensor == TARGET_ACQUISITION_SYSTEM_FLIR)

  005f8	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 3 ; eo_sensor
  005ff	75 0e		 jne	 SHORT $LN51@draw_defau

; 11009: 					draw_3d_eo_display_on_texture (&default_flir, TARGET_ACQUISITION_SYSTEM_FLIR);

  00601	6a 03		 push	 3
  00603	68 00 00 00 00	 push	 OFFSET ?default_flir@@3UEO_PARAMS@@A ; default_flir
  00608	e8 00 00 00 00	 call	 ?draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display_on_texture

; 11010: 				else

  0060d	eb 0c		 jmp	 SHORT $LN52@draw_defau
$LN51@draw_defau:

; 11011: 					draw_3d_eo_display_on_texture (&default_dtv, TARGET_ACQUISITION_SYSTEM_DTV);

  0060f	6a 04		 push	 4
  00611	68 00 00 00 00	 push	 OFFSET ?default_dtv@@3UEO_PARAMS@@A ; default_dtv
  00616	e8 00 00 00 00	 call	 ?draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display_on_texture
$LN52@draw_defau:

; 11012: 			
; 11013: 				mfd_texture_screen = eo_3d_texture_screen;

  0061b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00620	89 45 f8	 mov	 DWORD PTR _mfd_texture_screen$[ebp], eax
$LN48@draw_defau:

; 11014: 			}
; 11015: 			
; 11016: 			set_active_screen (mfd_texture_screen);

  00623	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00626	50		 push	 eax
  00627	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11017: 
; 11018: 			if (lock_screen (mfd_texture_screen))

  0062c	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0062f	50		 push	 eax
  00630	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00635	85 c0		 test	 eax, eax
  00637	74 45		 je	 SHORT $LN53@draw_defau

; 11019: 			{
; 11020: 				if (!tsd_tads_underlay_active)

  00639	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?tsd_tads_underlay_active@@3FA
  00640	85 c0		 test	 eax, eax
  00642	75 23		 jne	 SHORT $LN54@draw_defau

; 11021: 					set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_green_mfd_colour);

  00644	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_green_mfd_colour@@3UREAL_COLOUR@@A
  00649	50		 push	 eax
  0064a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00650	83 e9 01	 sub	 ecx, 1
  00653	51		 push	 ecx
  00654	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  0065a	83 ea 01	 sub	 edx, 1
  0065d	52		 push	 edx
  0065e	6a 00		 push	 0
  00660	6a 00		 push	 0
  00662	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block
$LN54@draw_defau:

; 11022: 
; 11023: 				draw_tactical_situation_display_mfd ();

  00667	e8 00 00 00 00	 call	 ?draw_tactical_situation_display_mfd@@YGXXZ ; draw_tactical_situation_display_mfd

; 11024: 
; 11025: 				flush_screen_texture_graphics (mfd_texture_screen);

  0066c	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0066f	50		 push	 eax
  00670	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11026: 
; 11027: 				unlock_screen (mfd_texture_screen);

  00675	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00678	50		 push	 eax
  00679	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN53@draw_defau:

; 11028: 			}
; 11029: 
; 11030: 			if (tsd_tads_underlay_active)

  0067e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?tsd_tads_underlay_active@@3FA
  00685	85 c0		 test	 eax, eax
  00687	74 07		 je	 SHORT $LN55@draw_defau

; 11031: 				set_pilots_full_screen_params (FALSE);

  00689	6a 00		 push	 0
  0068b	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params
$LN55@draw_defau:

; 11032: 
; 11033: 			break;

  00690	e9 be 01 00 00	 jmp	 $LN2@draw_defau
$LN56@draw_defau:

; 11034: 		}
; 11035: 		////////////////////////////////////////
; 11036: 		case MFD_MODE_ASE:
; 11037: 		////////////////////////////////////////
; 11038: 		{
; 11039: 			set_active_screen (mfd_texture_screen);

  00695	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00698	50		 push	 eax
  00699	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11040: 
; 11041: 			if (lock_screen (mfd_texture_screen))

  0069e	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  006a1	50		 push	 eax
  006a2	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  006a7	85 c0		 test	 eax, eax
  006a9	74 3f		 je	 SHORT $LN57@draw_defau

; 11042: 			{
; 11043: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_green_mfd_colour);

  006ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_green_mfd_colour@@3UREAL_COLOUR@@A
  006b0	50		 push	 eax
  006b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  006b7	83 e9 01	 sub	 ecx, 1
  006ba	51		 push	 ecx
  006bb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  006c1	83 ea 01	 sub	 edx, 1
  006c4	52		 push	 edx
  006c5	6a 00		 push	 0
  006c7	6a 00		 push	 0
  006c9	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11044: 
; 11045: 				draw_layout_grid ();

  006ce	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11046: 
; 11047: 				draw_aircraft_survivability_equipment_display_mfd ();

  006d3	e8 00 00 00 00	 call	 ?draw_aircraft_survivability_equipment_display_mfd@@YGXXZ ; draw_aircraft_survivability_equipment_display_mfd

; 11048: 
; 11049: 				flush_screen_texture_graphics (mfd_texture_screen);

  006d8	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  006db	50		 push	 eax
  006dc	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11050: 
; 11051: 				unlock_screen (mfd_texture_screen);

  006e1	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  006e4	50		 push	 eax
  006e5	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN57@draw_defau:

; 11052: 			}
; 11053: 
; 11054: 			break;

  006ea	e9 64 01 00 00	 jmp	 $LN2@draw_defau
$LN58@draw_defau:

; 11055: 		}
; 11056: 		////////////////////////////////////////
; 11057: 		case MFD_MODE_WEAPON:
; 11058: 		////////////////////////////////////////
; 11059: 		{
; 11060: 			set_active_screen (mfd_texture_screen);

  006ef	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  006f2	50		 push	 eax
  006f3	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11061: 
; 11062: 			if (lock_screen (mfd_texture_screen))

  006f8	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  006fb	50		 push	 eax
  006fc	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00701	85 c0		 test	 eax, eax
  00703	74 43		 je	 SHORT $LN59@draw_defau

; 11063: 			{
; 11064: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00705	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0070a	50		 push	 eax
  0070b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00711	83 e9 01	 sub	 ecx, 1
  00714	51		 push	 ecx
  00715	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  0071b	83 ea 01	 sub	 edx, 1
  0071e	52		 push	 edx
  0071f	6a 00		 push	 0
  00721	6a 00		 push	 0
  00723	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11065: 
; 11066: 				draw_layout_grid ();

  00728	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11067: 
; 11068: 				draw_weapon_display_mfd (MFD_LOCATION_DONT_CARE, TRUE);

  0072d	6a 01		 push	 1
  0072f	6a ff		 push	 -1
  00731	e8 00 00 00 00	 call	 ?draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z ; draw_weapon_display_mfd

; 11069: 
; 11070: 				flush_screen_texture_graphics (mfd_texture_screen);

  00736	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00739	50		 push	 eax
  0073a	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11071: 
; 11072: 				unlock_screen (mfd_texture_screen);

  0073f	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00742	50		 push	 eax
  00743	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN59@draw_defau:

; 11073: 			}
; 11074: 
; 11075: 			break;

  00748	e9 06 01 00 00	 jmp	 $LN2@draw_defau
$LN60@draw_defau:

; 11076: 		}
; 11077: 		////////////////////////////////////////
; 11078: 		case MFD_MODE_SYSTEM:
; 11079: 		////////////////////////////////////////
; 11080: 		{
; 11081: 			set_active_screen (mfd_texture_screen);

  0074d	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00750	50		 push	 eax
  00751	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11082: 
; 11083: 			if (lock_screen (mfd_texture_screen))

  00756	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00759	50		 push	 eax
  0075a	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0075f	85 c0		 test	 eax, eax
  00761	74 3f		 je	 SHORT $LN61@draw_defau

; 11084: 			{
; 11085: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00763	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00768	50		 push	 eax
  00769	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  0076f	83 e9 01	 sub	 ecx, 1
  00772	51		 push	 ecx
  00773	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00779	83 ea 01	 sub	 edx, 1
  0077c	52		 push	 edx
  0077d	6a 00		 push	 0
  0077f	6a 00		 push	 0
  00781	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11086: 
; 11087: 				draw_layout_grid ();

  00786	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11088: 
; 11089: 				draw_system_display_mfd ();

  0078b	e8 00 00 00 00	 call	 ?draw_system_display_mfd@@YGXXZ ; draw_system_display_mfd

; 11090: 
; 11091: 				flush_screen_texture_graphics (mfd_texture_screen);

  00790	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00793	50		 push	 eax
  00794	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11092: 
; 11093: 				unlock_screen (mfd_texture_screen);

  00799	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0079c	50		 push	 eax
  0079d	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN61@draw_defau:

; 11094: 			}
; 11095: 
; 11096: 			break;

  007a2	e9 ac 00 00 00	 jmp	 $LN2@draw_defau
$LN62@draw_defau:

; 11097: 		}
; 11098: 		////////////////////////////////////////
; 11099: 		case MFD_MODE_ENGINE:
; 11100: 		////////////////////////////////////////
; 11101: 		{
; 11102: 			set_active_screen (mfd_texture_screen);

  007a7	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  007aa	50		 push	 eax
  007ab	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11103: 
; 11104: 			if (lock_screen (mfd_texture_screen))

  007b0	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  007b3	50		 push	 eax
  007b4	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  007b9	85 c0		 test	 eax, eax
  007bb	74 3f		 je	 SHORT $LN63@draw_defau

; 11105: 			{
; 11106: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  007bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  007c2	50		 push	 eax
  007c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  007c9	83 e9 01	 sub	 ecx, 1
  007cc	51		 push	 ecx
  007cd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  007d3	83 ea 01	 sub	 edx, 1
  007d6	52		 push	 edx
  007d7	6a 00		 push	 0
  007d9	6a 00		 push	 0
  007db	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11107: 
; 11108: 				draw_layout_grid ();

  007e0	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11109: 
; 11110: 				draw_engine_display_mfd ();

  007e5	e8 00 00 00 00	 call	 ?draw_engine_display_mfd@@YGXXZ ; draw_engine_display_mfd

; 11111: 
; 11112: 				flush_screen_texture_graphics (mfd_texture_screen);

  007ea	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  007ed	50		 push	 eax
  007ee	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11113: 
; 11114: 				unlock_screen (mfd_texture_screen);

  007f3	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  007f6	50		 push	 eax
  007f7	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN63@draw_defau:

; 11115: 			}
; 11116: 
; 11117: 			break;

  007fc	eb 55		 jmp	 SHORT $LN2@draw_defau
$LN64@draw_defau:

; 11118: 		}
; 11119: 		////////////////////////////////////////
; 11120: 		case MFD_MODE_FLIGHT:
; 11121: 		////////////////////////////////////////
; 11122: 		{
; 11123: 			set_active_screen (mfd_texture_screen);

  007fe	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00801	50		 push	 eax
  00802	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11124: 
; 11125: 			if (lock_screen (mfd_texture_screen))

  00807	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0080a	50		 push	 eax
  0080b	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00810	85 c0		 test	 eax, eax
  00812	74 3f		 je	 SHORT $LN65@draw_defau

; 11126: 			{
; 11127: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_green_mfd_colour);

  00814	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_green_mfd_colour@@3UREAL_COLOUR@@A
  00819	50		 push	 eax
  0081a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00820	83 e9 01	 sub	 ecx, 1
  00823	51		 push	 ecx
  00824	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  0082a	83 ea 01	 sub	 edx, 1
  0082d	52		 push	 edx
  0082e	6a 00		 push	 0
  00830	6a 00		 push	 0
  00832	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 11128: 
; 11129: 				draw_layout_grid ();

  00837	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 11130: 
; 11131: 				draw_flight_display_mfd();

  0083c	e8 00 00 00 00	 call	 ?draw_flight_display_mfd@@YGXXZ ; draw_flight_display_mfd

; 11132: 
; 11133: 				flush_screen_texture_graphics (mfd_texture_screen);

  00841	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00844	50		 push	 eax
  00845	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 11134: 
; 11135: 				unlock_screen (mfd_texture_screen);

  0084a	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0084d	50		 push	 eax
  0084e	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN65@draw_defau:
$LN2@draw_defau:

; 11136: 			}
; 11137: 
; 11138: 			break;
; 11139: 		}
; 11140: 	}
; 11141: 
; 11142: 	set_active_screen (video_screen);

  00853	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00858	50		 push	 eax
  00859	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 11143: 	if(command_line_export_mfd)

  0085e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_export_mfd@@3HA, 0 ; command_line_export_mfd
  00865	74 38		 je	 SHORT $LN68@draw_defau

; 11144: 	{
; 11145: 		if(location == MFD_LOCATION_LHS)

  00867	83 7d 08 00	 cmp	 DWORD PTR _location$[ebp], 0
  0086b	75 1a		 jne	 SHORT $LN67@draw_defau

; 11146: 		{
; 11147: 			left_export=create_screen_for_system_texture (TEXTURE_INDEX_AVCKPT_DISPLAY_LHS_MFD);

  0086d	68 f8 00 00 00	 push	 248			; 000000f8H
  00872	e8 00 00 00 00	 call	 ?create_screen_for_system_texture@@YGPAUSCREEN@@H@Z ; create_screen_for_system_texture
  00877	89 45 f4	 mov	 DWORD PTR _left_export$[ebp], eax

; 11148: 			copy_export_mfd(left_export,NULL);

  0087a	6a 00		 push	 0
  0087c	8b 45 f4	 mov	 eax, DWORD PTR _left_export$[ebp]
  0087f	50		 push	 eax
  00880	e8 00 00 00 00	 call	 ?copy_export_mfd@@YGXPAUSCREEN@@0@Z ; copy_export_mfd

; 11149: 		}
; 11150: 		else

  00885	eb 18		 jmp	 SHORT $LN68@draw_defau
$LN67@draw_defau:

; 11151: 		{
; 11152: 			right_export=create_screen_for_system_texture (TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD);

  00887	68 f9 00 00 00	 push	 249			; 000000f9H
  0088c	e8 00 00 00 00	 call	 ?create_screen_for_system_texture@@YGPAUSCREEN@@H@Z ; create_screen_for_system_texture
  00891	89 45 f0	 mov	 DWORD PTR _right_export$[ebp], eax

; 11153: 			copy_export_mfd(NULL,right_export);

  00894	8b 45 f0	 mov	 eax, DWORD PTR _right_export$[ebp]
  00897	50		 push	 eax
  00898	6a 00		 push	 0
  0089a	e8 00 00 00 00	 call	 ?copy_export_mfd@@YGXPAUSCREEN@@0@Z ; copy_export_mfd
$LN68@draw_defau:

; 11154: 		}
; 11155: 	}
; 11156: }

  0089f	5f		 pop	 edi
  008a0	5e		 pop	 esi
  008a1	5b		 pop	 ebx
  008a2	8b e5		 mov	 esp, ebp
  008a4	5d		 pop	 ebp
  008a5	c2 04 00	 ret	 4
$LN70@draw_defau:
  008a8	00 00 00 00	 DD	 $LN16@draw_defau
  008ac	00 00 00 00	 DD	 $LN18@draw_defau
  008b0	00 00 00 00	 DD	 $LN20@draw_defau
  008b4	00 00 00 00	 DD	 $LN22@draw_defau
  008b8	00 00 00 00	 DD	 $LN24@draw_defau
  008bc	00 00 00 00	 DD	 $LN24@draw_defau
  008c0	00 00 00 00	 DD	 $LN24@draw_defau
  008c4	00 00 00 00	 DD	 $LN2@draw_defau
  008c8	00 00 00 00	 DD	 $LN47@draw_defau
  008cc	00 00 00 00	 DD	 $LN56@draw_defau
  008d0	00 00 00 00	 DD	 $LN58@draw_defau
  008d4	00 00 00 00	 DD	 $LN60@draw_defau
  008d8	00 00 00 00	 DD	 $LN62@draw_defau
  008dc	00 00 00 00	 DD	 $LN64@draw_defau
?draw_default_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z ENDP ; draw_default_mfd_on_texture
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?draw_default_mfd_on_cockpit@@YGXMMHHW4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv227 = -352						; size = 4
_y_max$1 = -284						; size = 4
_x_max$2 = -280						; size = 4
_y_min$3 = -276						; size = 4
_x_min$4 = -272						; size = 4
_specular$5 = -268					; size = 4
_colour$6 = -264					; size = 4
_quad$7 = -260						; size = 256
_mfd_mode$ = -4						; size = 4
_x_org$ = 8						; size = 4
_y_org$ = 12						; size = 4
_large_mfd$ = 16					; size = 4
_draw_translucent_background$ = 20			; size = 4
_location$ = 24						; size = 4
?draw_default_mfd_on_cockpit@@YGXMMHHW4MFD_LOCATIONS@@@Z PROC ; draw_default_mfd_on_cockpit, COMDAT

; 9483 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 60 01 00
	00		 sub	 esp, 352		; 00000160H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 9484 : 	mfd_modes
; 9485 : 		*mfd_mode;
; 9486 : 
; 9487 : 	ASSERT ((location == MFD_LOCATION_LHS) || (location == MFD_LOCATION_RHS));

  0000c	83 7d 18 00	 cmp	 DWORD PTR _location$[ebp], 0
  00010	74 1e		 je	 SHORT $LN4@draw_defau
  00012	83 7d 18 01	 cmp	 DWORD PTR _location$[ebp], 1
  00016	74 18		 je	 SHORT $LN4@draw_defau
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_default_mfd_on_cockpit@@YGXMMHHW4MFD_LOCATIONS@@@Z@4JA
  0001d	83 c0 04	 add	 eax, 4
  00020	50		 push	 eax
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@HOBNFLGC@?$CIlocation?5?$DN?$DN?5MFD_LOCATION_LHS?$CJ?5@
  0002b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_defau:

; 9488 : 
; 9489 : //	update_pointer_position();
; 9490 : 
; 9491 : 	if (location == MFD_LOCATION_LHS)

  00030	83 7d 18 00	 cmp	 DWORD PTR _location$[ebp], 0
  00034	75 09		 jne	 SHORT $LN5@draw_defau

; 9492 : 	{
; 9493 : 		mfd_mode = &lhs_mfd_mode;

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], OFFSET ?lhs_mfd_mode@@3W4MFD_MODES@@A

; 9494 : 	}
; 9495 : 	else

  0003d	eb 07		 jmp	 SHORT $LN6@draw_defau
$LN5@draw_defau:

; 9496 : 	{
; 9497 : 		mfd_mode = &rhs_mfd_mode;

  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], OFFSET ?rhs_mfd_mode@@3W4MFD_MODES@@A
$LN6@draw_defau:

; 9498 : 	}
; 9499 : 
; 9500 : 	////////////////////////////////////////
; 9501 : 	//
; 9502 : 	// set up MFD 2D environment
; 9503 : 	//
; 9504 : 	////////////////////////////////////////
; 9505 : 
; 9506 : 	set_2d_active_environment (mfd_env);

  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 9507 : 
; 9508 : 	//
; 9509 : 	// window
; 9510 : 	//
; 9511 : 
; 9512 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  00051	51		 push	 ecx
  00052	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	51		 push	 ecx
  00060	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  00068	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006d	51		 push	 ecx
  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  00076	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007b	51		 push	 ecx
  0007c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  00084	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00089	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 9513 : 
; 9514 : 	//
; 9515 : 	// viewport
; 9516 : 	//
; 9517 : 
; 9518 : 	draw_large_mfd = large_mfd;

  00094	8b 45 10	 mov	 eax, DWORD PTR _large_mfd$[ebp]
  00097	a3 00 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, eax

; 9519 : 
; 9520 : 	if (draw_large_mfd)

  0009c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  000a3	74 12		 je	 SHORT $LN7@draw_defau

; 9521 : 	{
; 9522 : 		mfd_viewport_size = MFD_VIEWPORT_LARGE_SIZE;  

  000a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  000ad	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 9523 : 	}
; 9524 : 	else

  000b5	eb 10		 jmp	 SHORT $LN8@draw_defau
$LN7@draw_defau:

; 9525 : 	{
; 9526 : 		mfd_viewport_size = MFD_VIEWPORT_SMALL_SIZE;

  000b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  000bf	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0
$LN8@draw_defau:

; 9527 : 	}
; 9528 : 
; 9529 : 	mfd_viewport_x_org = x_org;

  000c7	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_org$[ebp]
  000cc	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 9530 : 
; 9531 : 	mfd_viewport_y_org = y_org;

  000d4	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_org$[ebp]
  000d9	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 9532 : 
; 9533 : 	mfd_viewport_x_min = mfd_viewport_x_org - (mfd_viewport_size * 0.5);

  000e1	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  000e9	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  000f1	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  000f9	f2 0f 5c c1	 subsd	 xmm0, xmm1
  000fd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00101	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 9534 : 
; 9535 : 	mfd_viewport_y_min = mfd_viewport_y_org - (mfd_viewport_size * 0.5);

  00109	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_org@@3MA
  00111	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00119	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00121	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00125	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00129	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 9536 : 
; 9537 : 	mfd_viewport_x_max = mfd_viewport_x_org + (mfd_viewport_size * 0.5) - 0.001;

  00131	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  00139	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00141	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00149	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0014d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00155	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00159	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 9538 : 
; 9539 : 	mfd_viewport_y_max = mfd_viewport_y_org + (mfd_viewport_size * 0.5) - 0.001;

  00161	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_org@@3MA
  00169	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00171	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00179	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0017d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00185	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00189	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 9540 : 
; 9541 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00191	51		 push	 ecx
  00192	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0019a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019f	51		 push	 ecx
  001a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  001a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ad	51		 push	 ecx
  001ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  001b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bb	51		 push	 ecx
  001bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  001c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9542 : 
; 9543 : 	////////////////////////////////////////
; 9544 : 	//
; 9545 : 	// draw translucent background
; 9546 : 	//
; 9547 : 	////////////////////////////////////////
; 9548 : 
; 9549 : 	if (draw_translucent_background)

  001d4	83 7d 14 00	 cmp	 DWORD PTR _draw_translucent_background$[ebp], 0
  001d8	0f 84 28 03 00
	00		 je	 $LN13@draw_defau

; 9550 : 	{
; 9551 : 		if (!draw_large_mfd)

  001de	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  001e5	0f 85 1b 03 00
	00		 jne	 $LN13@draw_defau

; 9552 : 		{
; 9553 : 			if
; 9554 : 			(
; 9555 : 				(*mfd_mode == MFD_MODE_DAMAGED) ||
; 9556 : 				(*mfd_mode == MFD_MODE_GROUND_RADAR) ||
; 9557 : 				(*mfd_mode == MFD_MODE_AIR_RADAR) ||
; 9558 : 				(*mfd_mode == MFD_MODE_TSD) ||
; 9559 : 				(*mfd_mode == MFD_MODE_ASE) ||
; 9560 : 				(*mfd_mode == MFD_MODE_WEAPON) ||
; 9561 : 				(*mfd_mode == MFD_MODE_SYSTEM) ||

  001eb	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  001ee	83 38 01	 cmp	 DWORD PTR [eax], 1
  001f1	74 3c		 je	 SHORT $LN12@draw_defau
  001f3	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  001f6	83 38 02	 cmp	 DWORD PTR [eax], 2
  001f9	74 34		 je	 SHORT $LN12@draw_defau
  001fb	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  001fe	83 38 03	 cmp	 DWORD PTR [eax], 3
  00201	74 2c		 je	 SHORT $LN12@draw_defau
  00203	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00206	83 38 08	 cmp	 DWORD PTR [eax], 8
  00209	74 24		 je	 SHORT $LN12@draw_defau
  0020b	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  0020e	83 38 09	 cmp	 DWORD PTR [eax], 9
  00211	74 1c		 je	 SHORT $LN12@draw_defau
  00213	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00216	83 38 0a	 cmp	 DWORD PTR [eax], 10	; 0000000aH
  00219	74 14		 je	 SHORT $LN12@draw_defau
  0021b	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  0021e	83 38 0b	 cmp	 DWORD PTR [eax], 11	; 0000000bH
  00221	74 0c		 je	 SHORT $LN12@draw_defau
  00223	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00226	83 38 0c	 cmp	 DWORD PTR [eax], 12	; 0000000cH
  00229	0f 85 d7 02 00
	00		 jne	 $LN13@draw_defau
$LN12@draw_defau:

; 9562 : 				(*mfd_mode == MFD_MODE_ENGINE)
; 9563 : 			)
; 9564 : 			{
; 9565 : 				vertex
; 9566 : 					quad[4];
; 9567 : 
; 9568 : 				real_colour
; 9569 : 					colour,
; 9570 : 					specular;
; 9571 : 
; 9572 : 				float
; 9573 : 					x_min,
; 9574 : 					y_min,
; 9575 : 					x_max,
; 9576 : 					y_max;
; 9577 : 
; 9578 : 				if (begin_3d_scene ())

  0022f	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  00234	85 c0		 test	 eax, eax
  00236	0f 84 ca 02 00
	00		 je	 $LN13@draw_defau

; 9579 : 				{
; 9580 : 					colour.red = 0;

  0023c	c6 85 fa fe ff
	ff 00		 mov	 BYTE PTR _colour$6[ebp+2], 0

; 9581 : 					colour.green = 0;

  00243	c6 85 f9 fe ff
	ff 00		 mov	 BYTE PTR _colour$6[ebp+1], 0

; 9582 : 					colour.blue = 0;

  0024a	c6 85 f8 fe ff
	ff 00		 mov	 BYTE PTR _colour$6[ebp], 0

; 9583 : 					colour.alpha = 64;

  00251	c6 85 fb fe ff
	ff 40		 mov	 BYTE PTR _colour$6[ebp+3], 64 ; 00000040H

; 9584 : 
; 9585 : 					specular.red = 0;

  00258	c6 85 f6 fe ff
	ff 00		 mov	 BYTE PTR _specular$5[ebp+2], 0

; 9586 : 					specular.green = 0;

  0025f	c6 85 f5 fe ff
	ff 00		 mov	 BYTE PTR _specular$5[ebp+1], 0

; 9587 : 					specular.blue = 0;

  00266	c6 85 f4 fe ff
	ff 00		 mov	 BYTE PTR _specular$5[ebp], 0

; 9588 : 					specular.alpha = 255;

  0026d	c6 85 f7 fe ff
	ff ff		 mov	 BYTE PTR _specular$5[ebp+3], 255 ; 000000ffH

; 9589 : 
; 9590 : 					set_d3d_transparency_on ();

  00274	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 9591 : 
; 9592 : 					set_d3d_zbuffer_comparison (FALSE);

  00279	6a 00		 push	 0
  0027b	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 9593 : 
; 9594 : 					set_d3d_plain_renderstate ();

  00280	e8 00 00 00 00	 call	 ?set_d3d_plain_renderstate@@YGXXZ ; set_d3d_plain_renderstate

; 9595 : 
; 9596 : 					set_d3d_culling (FALSE);

  00285	6a 00		 push	 0
  00287	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 9597 : 
; 9598 : 					//
; 9599 : 					// match co-ordinates with small EO 3D display
; 9600 : 					//
; 9601 : 
; 9602 : 					x_min = mfd_viewport_x_min;

  0028c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00294	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _x_min$4[ebp], xmm0

; 9603 : 					y_min = mfd_viewport_y_min;

  0029c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  002a4	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _y_min$3[ebp], xmm0

; 9604 : 					x_max = x_min + 128.0;

  002ac	f3 0f 5a 85 f0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _x_min$4[ebp]
  002b4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4060000000000000
  002bc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002c0	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _x_max$2[ebp], xmm0

; 9605 : 					y_max = y_min + 128.0;

  002c8	f3 0f 5a 85 ec
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_min$3[ebp]
  002d0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4060000000000000
  002d8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002dc	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR _y_max$1[ebp], xmm0

; 9606 : 
; 9607 : 					quad[0].i = x_min;

  002e4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002e9	6b c8 00	 imul	 ecx, eax, 0
  002ec	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$4[ebp]
  002f4	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+16], xmm0

; 9608 : 					quad[0].j = y_min;

  002fd	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00302	6b c8 00	 imul	 ecx, eax, 0
  00305	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _y_min$3[ebp]
  0030d	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+20], xmm0

; 9609 : 					quad[0].z = 0.5;

  00316	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0031b	6b c8 00	 imul	 ecx, eax, 0
  0031e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00326	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+8], xmm0

; 9610 : 					quad[0].q = 0.5;

  0032f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00334	6b c8 00	 imul	 ecx, eax, 0
  00337	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0033f	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+12], xmm0

; 9611 : 					quad[0].next_vertex = &quad[1];

  00348	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0034d	c1 e0 00	 shl	 eax, 0
  00350	8d 8c 05 fc fe
	ff ff		 lea	 ecx, DWORD PTR _quad$7[ebp+eax]
  00357	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0035c	6b c2 00	 imul	 eax, edx, 0
  0035f	89 8c 05 24 ff
	ff ff		 mov	 DWORD PTR _quad$7[ebp+eax+40], ecx

; 9612 : 
; 9613 : 					quad[1].i = x_max;

  00366	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0036b	c1 e0 00	 shl	 eax, 0
  0036e	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$2[ebp]
  00376	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+16], xmm0

; 9614 : 					quad[1].j = y_min;

  0037f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00384	c1 e0 00	 shl	 eax, 0
  00387	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _y_min$3[ebp]
  0038f	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+20], xmm0

; 9615 : 					quad[1].z = 0.5;

  00398	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0039d	c1 e0 00	 shl	 eax, 0
  003a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  003a8	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+8], xmm0

; 9616 : 					quad[1].q = 0.5;

  003b1	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003b6	c1 e0 00	 shl	 eax, 0
  003b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  003c1	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+12], xmm0

; 9617 : 					quad[1].next_vertex = &quad[2];

  003ca	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003cf	d1 e0		 shl	 eax, 1
  003d1	8d 8c 05 fc fe
	ff ff		 lea	 ecx, DWORD PTR _quad$7[ebp+eax]
  003d8	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  003dd	c1 e2 00	 shl	 edx, 0
  003e0	89 8c 15 24 ff
	ff ff		 mov	 DWORD PTR _quad$7[ebp+edx+40], ecx

; 9618 : 
; 9619 : 					quad[2].i = x_max;

  003e7	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003ec	d1 e0		 shl	 eax, 1
  003ee	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$2[ebp]
  003f6	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+16], xmm0

; 9620 : 					quad[2].j = y_max;

  003ff	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00404	d1 e0		 shl	 eax, 1
  00406	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _y_max$1[ebp]
  0040e	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+20], xmm0

; 9621 : 					quad[2].z = 0.5;

  00417	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0041c	d1 e0		 shl	 eax, 1
  0041e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00426	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+8], xmm0

; 9622 : 					quad[2].q = 0.5;

  0042f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00434	d1 e0		 shl	 eax, 1
  00436	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0043e	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+12], xmm0

; 9623 : 					quad[2].next_vertex = &quad[3];

  00447	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0044c	6b c8 03	 imul	 ecx, eax, 3
  0044f	8d 94 0d fc fe
	ff ff		 lea	 edx, DWORD PTR _quad$7[ebp+ecx]
  00456	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0045b	d1 e0		 shl	 eax, 1
  0045d	89 94 05 24 ff
	ff ff		 mov	 DWORD PTR _quad$7[ebp+eax+40], edx

; 9624 : 
; 9625 : 					quad[3].i = x_min;

  00464	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00469	6b c8 03	 imul	 ecx, eax, 3
  0046c	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$4[ebp]
  00474	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+16], xmm0

; 9626 : 					quad[3].j = y_max;

  0047d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00482	6b c8 03	 imul	 ecx, eax, 3
  00485	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _y_max$1[ebp]
  0048d	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+20], xmm0

; 9627 : 					quad[3].z = 0.5;

  00496	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0049b	6b c8 03	 imul	 ecx, eax, 3
  0049e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  004a6	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+8], xmm0

; 9628 : 					quad[3].q = 0.5;

  004af	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004b4	6b c8 03	 imul	 ecx, eax, 3
  004b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  004bf	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+12], xmm0

; 9629 : 					quad[3].next_vertex = NULL;

  004c8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004cd	6b c8 03	 imul	 ecx, eax, 3
  004d0	c7 84 0d 24 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$7[ebp+ecx+40], 0

; 9630 : 
; 9631 : 					draw_wbuffered_plain_polygon (quad, colour, specular);

  004db	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _specular$5[ebp]
  004e1	50		 push	 eax
  004e2	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _colour$6[ebp]
  004e8	51		 push	 ecx
  004e9	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _quad$7[ebp]
  004ef	52		 push	 edx
  004f0	e8 00 00 00 00	 call	 ?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_plain_polygon

; 9632 : 
; 9633 : 					set_d3d_transparency_off ();

  004f5	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 9634 : 
; 9635 : 					set_d3d_zbuffer_comparison (TRUE);

  004fa	6a 01		 push	 1
  004fc	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 9636 : 
; 9637 : 					end_3d_scene ();

  00501	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN13@draw_defau:

; 9638 : 				}
; 9639 : 			}
; 9640 : 		}
; 9641 : 	}
; 9642 : 
; 9643 : 	////////////////////////////////////////
; 9644 : 	//
; 9645 : 	// draw MFD
; 9646 : 	//
; 9647 : 	////////////////////////////////////////
; 9648 : 
; 9649 : 	switch (*mfd_mode)

  00506	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00509	8b 08		 mov	 ecx, DWORD PTR [eax]
  0050b	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv227[ebp], ecx
  00511	83 bd a0 fe ff
	ff 0c		 cmp	 DWORD PTR tv227[ebp], 12 ; 0000000cH
  00518	0f 87 13 02 00
	00		 ja	 $LN2@draw_defau
  0051e	8b 95 a0 fe ff
	ff		 mov	 edx, DWORD PTR tv227[ebp]
  00524	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN39@draw_defau[edx*4]
$LN14@draw_defau:

; 9650 : 	{
; 9651 : 		////////////////////////////////////////
; 9652 : 		case MFD_MODE_OFF:
; 9653 : 		////////////////////////////////////////
; 9654 : 		{
; 9655 : 			if (lock_screen (active_screen))

  0052b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00530	50		 push	 eax
  00531	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00536	85 c0		 test	 eax, eax
  00538	74 10		 je	 SHORT $LN15@draw_defau

; 9656 : 			{
; 9657 : 				draw_layout_grid ();

  0053a	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9658 : 
; 9659 : 				unlock_screen (active_screen);

  0053f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00544	50		 push	 eax
  00545	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN15@draw_defau:

; 9660 : 			}
; 9661 : 
; 9662 : 			break;

  0054a	e9 e2 01 00 00	 jmp	 $LN2@draw_defau
$LN16@draw_defau:

; 9663 : 		}
; 9664 : 		////////////////////////////////////////
; 9665 : 		case MFD_MODE_DAMAGED:
; 9666 : 		////////////////////////////////////////
; 9667 : 		{
; 9668 : 			if (lock_screen (active_screen))

  0054f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00554	50		 push	 eax
  00555	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0055a	85 c0		 test	 eax, eax
  0055c	74 15		 je	 SHORT $LN17@draw_defau

; 9669 : 			{
; 9670 : 				draw_layout_grid ();

  0055e	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9671 : 
; 9672 : 				draw_damaged_mfd ();

  00563	e8 00 00 00 00	 call	 ?draw_damaged_mfd@@YGXXZ ; draw_damaged_mfd

; 9673 : 
; 9674 : 				unlock_screen (active_screen);

  00568	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0056d	50		 push	 eax
  0056e	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN17@draw_defau:

; 9675 : 			}
; 9676 : 
; 9677 : 			break;

  00573	e9 b9 01 00 00	 jmp	 $LN2@draw_defau
$LN18@draw_defau:

; 9678 : 		}
; 9679 : 		////////////////////////////////////////
; 9680 : 		case MFD_MODE_GROUND_RADAR:
; 9681 : 		////////////////////////////////////////
; 9682 : 		{
; 9683 : 			if (lock_screen (active_screen))

  00578	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0057d	50		 push	 eax
  0057e	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00583	85 c0		 test	 eax, eax
  00585	74 15		 je	 SHORT $LN19@draw_defau

; 9684 : 			{
; 9685 : 				draw_layout_grid ();

  00587	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9686 : 
; 9687 : 				draw_ground_radar_mfd ();

  0058c	e8 00 00 00 00	 call	 ?draw_ground_radar_mfd@@YGXXZ ; draw_ground_radar_mfd

; 9688 : 
; 9689 : 				unlock_screen (active_screen);

  00591	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00596	50		 push	 eax
  00597	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN19@draw_defau:

; 9690 : 			}
; 9691 : 
; 9692 : 			break;

  0059c	e9 90 01 00 00	 jmp	 $LN2@draw_defau
$LN20@draw_defau:

; 9693 : 		}
; 9694 : 		////////////////////////////////////////
; 9695 : 		case MFD_MODE_AIR_RADAR:
; 9696 : 		////////////////////////////////////////
; 9697 : 		{
; 9698 : 			if (lock_screen (active_screen))

  005a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  005a6	50		 push	 eax
  005a7	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  005ac	85 c0		 test	 eax, eax
  005ae	74 15		 je	 SHORT $LN21@draw_defau

; 9699 : 			{
; 9700 : 				draw_layout_grid ();

  005b0	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9701 : 
; 9702 : 				draw_air_radar_mfd ();

  005b5	e8 00 00 00 00	 call	 ?draw_air_radar_mfd@@YGXXZ ; draw_air_radar_mfd

; 9703 : 
; 9704 : 				unlock_screen (active_screen);

  005ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  005bf	50		 push	 eax
  005c0	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN21@draw_defau:

; 9705 : 			}
; 9706 : 
; 9707 : 			break;

  005c5	e9 67 01 00 00	 jmp	 $LN2@draw_defau
$LN22@draw_defau:

; 9708 : 		}
; 9709 : 		////////////////////////////////////////
; 9710 : 		case MFD_MODE_FLIR:
; 9711 : 		////////////////////////////////////////
; 9712 : 		{
; 9713 : 			draw_3d_flir_mfd (location);

  005ca	8b 45 18	 mov	 eax, DWORD PTR _location$[ebp]
  005cd	50		 push	 eax
  005ce	e8 00 00 00 00	 call	 ?draw_3d_flir_mfd@@YGXW4MFD_LOCATIONS@@@Z ; draw_3d_flir_mfd

; 9714 : 
; 9715 : 			if (lock_screen (active_screen))

  005d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  005d8	50		 push	 eax
  005d9	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  005de	85 c0		 test	 eax, eax
  005e0	74 19		 je	 SHORT $LN23@draw_defau

; 9716 : 			{
; 9717 : 				draw_layout_grid ();

  005e2	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9718 : 
; 9719 : 				draw_2d_flir_mfd (TRUE, FALSE);

  005e7	6a 00		 push	 0
  005e9	6a 01		 push	 1
  005eb	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXHH@Z ; draw_2d_flir_mfd

; 9720 : 
; 9721 : 				unlock_screen (active_screen);

  005f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  005f5	50		 push	 eax
  005f6	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN23@draw_defau:

; 9722 : 			}
; 9723 : 
; 9724 : 			break;

  005fb	e9 31 01 00 00	 jmp	 $LN2@draw_defau
$LN24@draw_defau:

; 9725 : 		}
; 9726 : 		////////////////////////////////////////
; 9727 : 		case MFD_MODE_DTV:
; 9728 : 		////////////////////////////////////////
; 9729 : 		{
; 9730 : 			draw_3d_dtv_mfd (location);

  00600	8b 45 18	 mov	 eax, DWORD PTR _location$[ebp]
  00603	50		 push	 eax
  00604	e8 00 00 00 00	 call	 ?draw_3d_dtv_mfd@@YGXW4MFD_LOCATIONS@@@Z ; draw_3d_dtv_mfd

; 9731 : 
; 9732 : 			if (lock_screen (active_screen))

  00609	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0060e	50		 push	 eax
  0060f	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00614	85 c0		 test	 eax, eax
  00616	74 19		 je	 SHORT $LN25@draw_defau

; 9733 : 			{
; 9734 : 				draw_layout_grid ();

  00618	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9735 : 
; 9736 : 				draw_2d_dtv_mfd (TRUE, FALSE);

  0061d	6a 00		 push	 0
  0061f	6a 01		 push	 1
  00621	e8 00 00 00 00	 call	 ?draw_2d_dtv_mfd@@YGXHH@Z ; draw_2d_dtv_mfd

; 9737 : 
; 9738 : 				unlock_screen (active_screen);

  00626	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0062b	50		 push	 eax
  0062c	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN25@draw_defau:

; 9739 : 			}
; 9740 : 
; 9741 : 			break;

  00631	e9 fb 00 00 00	 jmp	 $LN2@draw_defau
$LN26@draw_defau:

; 9742 : 		}
; 9743 : 		////////////////////////////////////////
; 9744 : 		case MFD_MODE_DVO:
; 9745 : 		////////////////////////////////////////
; 9746 : 		{
; 9747 : 			draw_3d_dvo_mfd (location);

  00636	8b 45 18	 mov	 eax, DWORD PTR _location$[ebp]
  00639	50		 push	 eax
  0063a	e8 00 00 00 00	 call	 ?draw_3d_dvo_mfd@@YGXW4MFD_LOCATIONS@@@Z ; draw_3d_dvo_mfd

; 9748 : 
; 9749 : 			if (lock_screen (active_screen))

  0063f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00644	50		 push	 eax
  00645	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0064a	85 c0		 test	 eax, eax
  0064c	74 19		 je	 SHORT $LN27@draw_defau

; 9750 : 			{
; 9751 : 				draw_layout_grid ();

  0064e	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9752 : 
; 9753 : 				draw_2d_dvo_mfd (TRUE, FALSE);

  00653	6a 00		 push	 0
  00655	6a 01		 push	 1
  00657	e8 00 00 00 00	 call	 ?draw_2d_dvo_mfd@@YGXHH@Z ; draw_2d_dvo_mfd

; 9754 : 
; 9755 : 				unlock_screen (active_screen);

  0065c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00661	50		 push	 eax
  00662	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN27@draw_defau:

; 9756 : 			}
; 9757 : 
; 9758 : 			break;

  00667	e9 c5 00 00 00	 jmp	 $LN2@draw_defau
$LN28@draw_defau:

; 9759 : 		}
; 9760 : 		////////////////////////////////////////
; 9761 : 		case MFD_MODE_TSD:
; 9762 : 		////////////////////////////////////////
; 9763 : 		{
; 9764 : 			if (lock_screen (active_screen))

  0066c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00671	50		 push	 eax
  00672	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00677	85 c0		 test	 eax, eax
  00679	74 15		 je	 SHORT $LN29@draw_defau

; 9765 : 			{
; 9766 : 				draw_layout_grid ();

  0067b	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9767 : 
; 9768 : 				draw_tactical_situation_display_mfd ();

  00680	e8 00 00 00 00	 call	 ?draw_tactical_situation_display_mfd@@YGXXZ ; draw_tactical_situation_display_mfd

; 9769 : 
; 9770 : 				unlock_screen (active_screen);

  00685	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0068a	50		 push	 eax
  0068b	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN29@draw_defau:

; 9771 : 			}
; 9772 : 
; 9773 : 			break;

  00690	e9 9c 00 00 00	 jmp	 $LN2@draw_defau
$LN30@draw_defau:

; 9774 : 		}
; 9775 : 		////////////////////////////////////////
; 9776 : 		case MFD_MODE_ASE:
; 9777 : 		////////////////////////////////////////
; 9778 : 		{
; 9779 : 			if (lock_screen (active_screen))

  00695	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0069a	50		 push	 eax
  0069b	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  006a0	85 c0		 test	 eax, eax
  006a2	74 15		 je	 SHORT $LN31@draw_defau

; 9780 : 			{
; 9781 : 				draw_layout_grid ();

  006a4	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9782 : 
; 9783 : 				draw_aircraft_survivability_equipment_display_mfd ();

  006a9	e8 00 00 00 00	 call	 ?draw_aircraft_survivability_equipment_display_mfd@@YGXXZ ; draw_aircraft_survivability_equipment_display_mfd

; 9784 : 
; 9785 : 				unlock_screen (active_screen);

  006ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  006b3	50		 push	 eax
  006b4	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN31@draw_defau:

; 9786 : 			}
; 9787 : 
; 9788 : 			break;

  006b9	eb 76		 jmp	 SHORT $LN2@draw_defau
$LN32@draw_defau:

; 9789 : 		}
; 9790 : 		////////////////////////////////////////
; 9791 : 		case MFD_MODE_WEAPON:
; 9792 : 		////////////////////////////////////////
; 9793 : 		{
; 9794 : 			if (lock_screen (active_screen))

  006bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  006c0	50		 push	 eax
  006c1	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  006c6	85 c0		 test	 eax, eax
  006c8	74 1b		 je	 SHORT $LN33@draw_defau

; 9795 : 			{
; 9796 : 				draw_layout_grid ();

  006ca	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9797 : 
; 9798 : 				draw_weapon_display_mfd (location, FALSE);

  006cf	6a 00		 push	 0
  006d1	8b 45 18	 mov	 eax, DWORD PTR _location$[ebp]
  006d4	50		 push	 eax
  006d5	e8 00 00 00 00	 call	 ?draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z ; draw_weapon_display_mfd

; 9799 : 
; 9800 : 				unlock_screen (active_screen);

  006da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  006df	50		 push	 eax
  006e0	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN33@draw_defau:

; 9801 : 			}
; 9802 : 
; 9803 : 			break;

  006e5	eb 4a		 jmp	 SHORT $LN2@draw_defau
$LN34@draw_defau:

; 9804 : 		}
; 9805 : 		////////////////////////////////////////
; 9806 : 		case MFD_MODE_SYSTEM:
; 9807 : 		////////////////////////////////////////
; 9808 : 		{
; 9809 : 			if (lock_screen (active_screen))

  006e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  006ec	50		 push	 eax
  006ed	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  006f2	85 c0		 test	 eax, eax
  006f4	74 15		 je	 SHORT $LN35@draw_defau

; 9810 : 			{
; 9811 : 				draw_layout_grid ();

  006f6	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9812 : 
; 9813 : 				draw_system_display_mfd ();

  006fb	e8 00 00 00 00	 call	 ?draw_system_display_mfd@@YGXXZ ; draw_system_display_mfd

; 9814 : 
; 9815 : 				unlock_screen (active_screen);

  00700	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00705	50		 push	 eax
  00706	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN35@draw_defau:

; 9816 : 			}
; 9817 : 
; 9818 : 			break;

  0070b	eb 24		 jmp	 SHORT $LN2@draw_defau
$LN36@draw_defau:

; 9819 : 		}
; 9820 : 		////////////////////////////////////////
; 9821 : 		case MFD_MODE_ENGINE:
; 9822 : 		////////////////////////////////////////
; 9823 : 		{
; 9824 : 			if (lock_screen (active_screen))

  0070d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00712	50		 push	 eax
  00713	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00718	85 c0		 test	 eax, eax
  0071a	74 15		 je	 SHORT $LN37@draw_defau

; 9825 : 			{
; 9826 : 				draw_layout_grid ();

  0071c	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9827 : 
; 9828 : 				draw_engine_display_mfd ();

  00721	e8 00 00 00 00	 call	 ?draw_engine_display_mfd@@YGXXZ ; draw_engine_display_mfd

; 9829 : 
; 9830 : 				unlock_screen (active_screen);

  00726	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0072b	50		 push	 eax
  0072c	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN37@draw_defau:
$LN2@draw_defau:

; 9831 : 			}
; 9832 : 
; 9833 : 			break;
; 9834 : 		}
; 9835 : 	}
; 9836 : }

  00731	5f		 pop	 edi
  00732	5e		 pop	 esi
  00733	5b		 pop	 ebx
  00734	8b e5		 mov	 esp, ebp
  00736	5d		 pop	 ebp
  00737	c2 14 00	 ret	 20			; 00000014H
  0073a	66 90		 npad	 2
$LN39@draw_defau:
  0073c	00 00 00 00	 DD	 $LN14@draw_defau
  00740	00 00 00 00	 DD	 $LN16@draw_defau
  00744	00 00 00 00	 DD	 $LN18@draw_defau
  00748	00 00 00 00	 DD	 $LN20@draw_defau
  0074c	00 00 00 00	 DD	 $LN22@draw_defau
  00750	00 00 00 00	 DD	 $LN24@draw_defau
  00754	00 00 00 00	 DD	 $LN26@draw_defau
  00758	00 00 00 00	 DD	 $LN2@draw_defau
  0075c	00 00 00 00	 DD	 $LN28@draw_defau
  00760	00 00 00 00	 DD	 $LN30@draw_defau
  00764	00 00 00 00	 DD	 $LN32@draw_defau
  00768	00 00 00 00	 DD	 $LN34@draw_defau
  0076c	00 00 00 00	 DD	 $LN36@draw_defau
?draw_default_mfd_on_cockpit@@YGXMMHHW4MFD_LOCATIONS@@@Z ENDP ; draw_default_mfd_on_cockpit
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_mfd_mode$ = 8						; size = 4
_location$ = 12						; size = 4
?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z PROC ; select_default_mfd_mode, COMDAT

; 1163 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1164 : 	ASSERT ((mfd_mode >= MFD_MODE_OFF) && (mfd_mode < NUM_MFD_MODES));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@select_def
  0000f	83 7d 08 0e	 cmp	 DWORD PTR _mfd_mode$[ebp], 14 ; 0000000eH
  00013	7c 18		 jl	 SHORT $LN2@select_def
$LN3@select_def:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 01	 add	 eax, 1
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@HPJGECJI@?$CImfd_mode?5?$DO?$DN?5MFD_MODE_OFF?$CJ?5?$CG?$CG?5?$CI@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_def:

; 1165 : 
; 1166 : 	ASSERT (mfd_mode != MFD_MODE_LLLTV);

  0002d	83 7d 08 07	 cmp	 DWORD PTR _mfd_mode$[ebp], 7
  00031	75 18		 jne	 SHORT $LN4@select_def
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z@4JA
  00038	83 c0 03	 add	 eax, 3
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@JNKLHOPK@mfd_mode?5?$CB?$DN?5MFD_MODE_LLLTV@
  00046	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@select_def:

; 1167 : 
; 1168 : 	ASSERT ((location == MFD_LOCATION_LHS) || (location == MFD_LOCATION_RHS));

  0004b	83 7d 0c 00	 cmp	 DWORD PTR _location$[ebp], 0
  0004f	74 1e		 je	 SHORT $LN5@select_def
  00051	83 7d 0c 01	 cmp	 DWORD PTR _location$[ebp], 1
  00055	74 18		 je	 SHORT $LN5@select_def
  00057	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z@4JA
  0005c	83 c0 05	 add	 eax, 5
  0005f	50		 push	 eax
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@HOBNFLGC@?$CIlocation?5?$DN?$DN?5MFD_LOCATION_LHS?$CJ?5@
  0006a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@select_def:

; 1169 : 
; 1170 : 	// don't let both a MFD show TADS, and have TADS as TSD underlay
; 1171 : 	if ((mfd_mode == MFD_MODE_DVO
; 1172 : 		 || mfd_mode == MFD_MODE_DTV
; 1173 : 		 || mfd_mode == MFD_MODE_FLIR)
; 1174 : 		&& tsd_underlay == TSD_UNDERLAY_TADS)

  0006f	83 7d 08 06	 cmp	 DWORD PTR _mfd_mode$[ebp], 6
  00073	74 0c		 je	 SHORT $LN7@select_def
  00075	83 7d 08 05	 cmp	 DWORD PTR _mfd_mode$[ebp], 5
  00079	74 06		 je	 SHORT $LN7@select_def
  0007b	83 7d 08 04	 cmp	 DWORD PTR _mfd_mode$[ebp], 4
  0007f	75 13		 jne	 SHORT $LN6@select_def
$LN7@select_def:
  00081	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 2
  00088	75 0a		 jne	 SHORT $LN6@select_def

; 1175 : 	{
; 1176 : 		tsd_underlay = TSD_UNDERLAY_NONE;

  0008a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 0
$LN6@select_def:

; 1177 : 	}
; 1178 : 
; 1179 : 	if (location == MFD_LOCATION_LHS)

  00094	83 7d 0c 00	 cmp	 DWORD PTR _location$[ebp], 0
  00098	75 5b		 jne	 SHORT $LN8@select_def

; 1180 : 	{
; 1181 : 		if ((mfd_mode == MFD_MODE_DAMAGED) && (lhs_mfd_mode == MFD_MODE_OFF))

  0009a	83 7d 08 01	 cmp	 DWORD PTR _mfd_mode$[ebp], 1
  0009e	75 10		 jne	 SHORT $LN10@select_def
  000a0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 0
  000a7	75 07		 jne	 SHORT $LN10@select_def

; 1182 : 		{
; 1183 : 			mfd_mode = MFD_MODE_OFF;

  000a9	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 0
$LN10@select_def:

; 1184 : 		}
; 1185 : 
; 1186 : 		if (default_damage.lh_mfd)

  000b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  000b5	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  000b8	83 e0 01	 and	 eax, 1
  000bb	74 0d		 je	 SHORT $LN11@select_def

; 1187 : 		{
; 1188 : 			if (mfd_mode != MFD_MODE_OFF)

  000bd	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  000c1	74 07		 je	 SHORT $LN11@select_def

; 1189 : 			{
; 1190 : 				mfd_mode = MFD_MODE_DAMAGED;

  000c3	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 1
$LN11@select_def:

; 1191 : 			}
; 1192 : 		}
; 1193 : 
; 1194 : 		if ((mfd_mode != MFD_MODE_OFF) && (mfd_mode != MFD_MODE_DAMAGED) && (mfd_mode == rhs_mfd_mode))

  000ca	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  000ce	74 1b		 je	 SHORT $LN13@select_def
  000d0	83 7d 08 01	 cmp	 DWORD PTR _mfd_mode$[ebp], 1
  000d4	74 15		 je	 SHORT $LN13@select_def
  000d6	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  000d9	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A
  000df	75 0a		 jne	 SHORT $LN13@select_def

; 1195 : 		{
; 1196 : 			rhs_mfd_mode = MFD_MODE_OFF;

  000e1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 0
$LN13@select_def:

; 1197 : 		}
; 1198 : 
; 1199 : 		lhs_mfd_mode = mfd_mode;

  000eb	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  000ee	a3 00 00 00 00	 mov	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, eax

; 1200 : 	}
; 1201 : 	else

  000f3	eb 59		 jmp	 SHORT $LN1@select_def
$LN8@select_def:

; 1202 : 	{
; 1203 : 		if ((mfd_mode == MFD_MODE_DAMAGED) && (rhs_mfd_mode == MFD_MODE_OFF))

  000f5	83 7d 08 01	 cmp	 DWORD PTR _mfd_mode$[ebp], 1
  000f9	75 10		 jne	 SHORT $LN14@select_def
  000fb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 0
  00102	75 07		 jne	 SHORT $LN14@select_def

; 1204 : 		{
; 1205 : 			mfd_mode = MFD_MODE_OFF;

  00104	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 0
$LN14@select_def:

; 1206 : 		}
; 1207 : 
; 1208 : 		if (default_damage.rh_mfd)

  0010b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?default_damage@@3TDEFAULT_DAMAGE_FLAGS@@A ; default_damage
  00110	c1 e8 11	 shr	 eax, 17			; 00000011H
  00113	83 e0 01	 and	 eax, 1
  00116	74 0d		 je	 SHORT $LN15@select_def

; 1209 : 		{
; 1210 : 			if (mfd_mode != MFD_MODE_OFF)

  00118	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  0011c	74 07		 je	 SHORT $LN15@select_def

; 1211 : 			{
; 1212 : 				mfd_mode = MFD_MODE_DAMAGED;

  0011e	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 1
$LN15@select_def:

; 1213 : 			}
; 1214 : 		}
; 1215 : 
; 1216 : 		if ((mfd_mode != MFD_MODE_OFF) && (mfd_mode != MFD_MODE_DAMAGED) && (mfd_mode == lhs_mfd_mode))

  00125	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  00129	74 1b		 je	 SHORT $LN17@select_def
  0012b	83 7d 08 01	 cmp	 DWORD PTR _mfd_mode$[ebp], 1
  0012f	74 15		 je	 SHORT $LN17@select_def
  00131	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00134	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A
  0013a	75 0a		 jne	 SHORT $LN17@select_def

; 1217 : 		{
; 1218 : 			lhs_mfd_mode = MFD_MODE_OFF;

  0013c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 0
$LN17@select_def:

; 1219 : 		}
; 1220 : 
; 1221 : 		rhs_mfd_mode = mfd_mode;

  00146	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00149	a3 00 00 00 00	 mov	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, eax
$LN1@select_def:

; 1222 : 	}
; 1223 : }

  0014e	5f		 pop	 edi
  0014f	5e		 pop	 esi
  00150	5b		 pop	 ebx
  00151	8b e5		 mov	 esp, ebp
  00153	5d		 pop	 ebp
  00154	c2 08 00	 ret	 8
?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ENDP ; select_default_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?deinitialise_default_mfd@@YGXXZ
_TEXT	SEGMENT
?deinitialise_default_mfd@@YGXXZ PROC			; deinitialise_default_mfd, COMDAT

; 1148 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1149 : 	destroy_2d_environment (mfd_env);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?destroy_2d_environment@@YGXPAUENV_2D@@@Z ; destroy_2d_environment

; 1150 : 
; 1151 : 	destroy_screen (lhs_mfd_texture_screen);

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lhs_mfd_texture_screen@@3PAUSCREEN@@A
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 1152 : 	destroy_screen (rhs_mfd_texture_screen);

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rhs_mfd_texture_screen@@3PAUSCREEN@@A
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 1153 : 
; 1154 : 	destroy_screen (lhs_overlaid_mfd_texture_screen);

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lhs_overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 1155 : 	destroy_screen (rhs_overlaid_mfd_texture_screen);

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rhs_overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 1156 : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?deinitialise_default_mfd@@YGXXZ ENDP			; deinitialise_default_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\default\df_mfd.c
;	COMDAT ?initialise_default_mfd@@YGXXZ
_TEXT	SEGMENT
tv217 = -72						; size = 4
tv210 = -68						; size = 4
tv75 = -68						; size = 4
?initialise_default_mfd@@YGXXZ PROC			; initialise_default_mfd, COMDAT

; 1003 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1004 : 	if (command_line_dynamics_engine_startup)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_dynamics_engine_startup@@3HA, 0 ; command_line_dynamics_engine_startup
  00010	74 14		 je	 SHORT $LN4@initialise

; 1005 : 	{
; 1006 : 		select_default_mfd_mode (MFD_MODE_OFF, MFD_LOCATION_LHS);

  00012	6a 00		 push	 0
  00014	6a 00		 push	 0
  00016	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 1007 : 		select_default_mfd_mode (MFD_MODE_OFF, MFD_LOCATION_RHS);

  0001b	6a 01		 push	 1
  0001d	6a 00		 push	 0
  0001f	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 1008 : 	}
; 1009 : 	else

  00024	eb 12		 jmp	 SHORT $LN5@initialise
$LN4@initialise:

; 1010 : 	{
; 1011 : 		select_default_mfd_mode (MFD_MODE_ENGINE, MFD_LOCATION_LHS);

  00026	6a 00		 push	 0
  00028	6a 0c		 push	 12			; 0000000cH
  0002a	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode

; 1012 : 		select_default_mfd_mode (MFD_MODE_TSD, MFD_LOCATION_RHS);

  0002f	6a 01		 push	 1
  00031	6a 08		 push	 8
  00033	e8 00 00 00 00	 call	 ?select_default_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_default_mfd_mode
$LN5@initialise:

; 1013 : 	}
; 1014 : 
; 1015 : 	tsd_ase_range = TSD_ASE_RANGE_5000;

  00038	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  00040	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_ase_range@@3MA, xmm0

; 1016 : 
; 1017 : 	tsd_declutter_level = TSD_DECLUTTER_LEVEL_ALL;

  00048	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0

; 1018 : 	tsd_underlay = TSD_UNDERLAY_NONE;

  00052	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tsd_underlay@@3W4TSD_UNDERLAY_LEVELS@@A, 0

; 1019 : 	
; 1020 : 	current_pfz = NO_PFZ;

  0005c	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?current_pfz@@3IA, -1 ; current_pfz

; 1021 : 	next_free_pfz = 0;

  00066	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?next_free_pfz@@3IA, 0 ; next_free_pfz

; 1022 : 	next_free_nfz = 0;

  00070	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?next_free_nfz@@3IA, 0 ; next_free_nfz

; 1023 : 	
; 1024 : 	radar_zoomed = FALSE;

  0007a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?radar_zoomed@@3HA, 0

; 1025 : 
; 1026 : 	tads_lase_flash_timer = TADS_LASE_FLASH_RATE;

  00084	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0008c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tads_lase_flash_timer@@3MA, xmm0

; 1027 : 	tads_display_lase_status = FALSE;

  00094	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tads_display_lase_status@@3HA, 0

; 1028 : 
; 1029 : 	tsd_threat_line_flash_timer = TSD_THREAT_LINE_FLASH_RATE;

  0009e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  000a6	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_threat_line_flash_timer@@3MA, xmm0

; 1030 : 	tsd_draw_threat_line_status = 0;

  000ae	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tsd_draw_threat_line_status@@3HA, 0

; 1031 : 
; 1032 : 	ase_threat_line_flash_timer = ASE_THREAT_LINE_FLASH_RATE;

  000b8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  000c0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?ase_threat_line_flash_timer@@3MA, xmm0

; 1033 : 	ase_draw_threat_line_status = 0;

  000c8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ase_draw_threat_line_status@@3HA, 0

; 1034 : 
; 1035 : 	mfd_env = create_2d_environment ();

  000d2	e8 00 00 00 00	 call	 ?create_2d_environment@@YGPAUENV_2D@@XZ ; create_2d_environment
  000d7	a3 00 00 00 00	 mov	 DWORD PTR ?mfd_env@@3PAUENV_2D@@A, eax

; 1036 : 
; 1037 : 
; 1038 : 	if (!command_line_high_res_mfd)

  000dc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_high_res_mfd@@3HA, 0 ; command_line_high_res_mfd
  000e3	75 2e		 jne	 SHORT $LN6@initialise

; 1039 : 	{
; 1040 : 		switch (get_view_mode ())

  000e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?view_mode@@3W4VIEW_MODES@@A ; view_mode
  000ea	89 45 bc	 mov	 DWORD PTR tv75[ebp], eax
  000ed	83 7d bc 26	 cmp	 DWORD PTR tv75[ebp], 38	; 00000026H
  000f1	7c 14		 jl	 SHORT $LN9@initialise
  000f3	83 7d bc 29	 cmp	 DWORD PTR tv75[ebp], 41	; 00000029H
  000f7	7e 02		 jle	 SHORT $LN8@initialise
  000f9	eb 0c		 jmp	 SHORT $LN9@initialise
$LN8@initialise:

; 1041 : 		{
; 1042 : 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY:
; 1043 : 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY:
; 1044 : 		case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY:
; 1045 : 		case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY:
; 1046 : 			draw_large_mfd = TRUE;

  000fb	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 1

; 1047 : 			break;

  00105	eb 0a		 jmp	 SHORT $LN2@initialise
$LN9@initialise:

; 1048 : 		default:
; 1049 : 			draw_large_mfd = FALSE;

  00107	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 0
$LN2@initialise:

; 1050 : 			break;
; 1051 : 		}
; 1052 : 	}
; 1053 : 	else

  00111	eb 0a		 jmp	 SHORT $LN7@initialise
$LN6@initialise:

; 1054 : 		draw_large_mfd = TRUE;

  00113	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 1
$LN7@initialise:

; 1055 : 		
; 1056 : 	if (draw_large_mfd)

  0011d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00124	74 30		 je	 SHORT $LN10@initialise

; 1057 : 	{
; 1058 : 		mfd_viewport_size = MFD_VIEWPORT_LARGE_SIZE;

  00126	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  0012e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 1059 : 		mfd_texture_size = MFD_TEXTURE_LARGE_SIZE;

  00136	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?mfd_texture_size@@3HA, 256 ; 00000100H

; 1060 : 		eo_3d_texture_screen = large_eo_3d_texture_screen;

  00140	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_eo_3d_texture_screen@@3PAUSCREEN@@A ; large_eo_3d_texture_screen
  00145	a3 00 00 00 00	 mov	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, eax

; 1061 : 		draw_line_func = draw_2d_half_thick_line;

  0014a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_line_func@@3P6GXMMMMUREAL_COLOUR@@@ZA, OFFSET ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 1062 : 	}
; 1063 : 	else

  00154	eb 2e		 jmp	 SHORT $LN11@initialise
$LN10@initialise:

; 1064 : 	{
; 1065 : 		mfd_viewport_size = MFD_VIEWPORT_SMALL_SIZE;

  00156	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  0015e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 1066 : 		mfd_texture_size = MFD_TEXTURE_SMALL_SIZE;

  00166	c7 05 00 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?mfd_texture_size@@3HA, 128 ; 00000080H

; 1067 : 		eo_3d_texture_screen = small_eo_3d_texture_screen;

  00170	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_eo_3d_texture_screen@@3PAUSCREEN@@A ; small_eo_3d_texture_screen
  00175	a3 00 00 00 00	 mov	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, eax

; 1068 : 		draw_line_func = draw_2d_line;

  0017a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_line_func@@3P6GXMMMMUREAL_COLOUR@@@ZA, OFFSET ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN11@initialise:

; 1069 : 	}
; 1070 : 	mfd_viewport_texture_x_org = mfd_texture_size / 2;

  00184	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  00189	99		 cdq
  0018a	2b c2		 sub	 eax, edx
  0018c	d1 f8		 sar	 eax, 1
  0018e	a3 00 00 00 00	 mov	 DWORD PTR ?mfd_viewport_texture_x_org@@3HA, eax

; 1071 : 	mfd_viewport_texture_y_org = mfd_texture_size / 2;

  00193	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  00198	99		 cdq
  00199	2b c2		 sub	 eax, edx
  0019b	d1 f8		 sar	 eax, 1
  0019d	a3 00 00 00 00	 mov	 DWORD PTR ?mfd_viewport_texture_y_org@@3HA, eax

; 1072 : 
; 1073 : 	lhs_mfd_texture_screen = create_system_texture_screen (mfd_texture_size, mfd_texture_size, TEXTURE_INDEX_AVCKPT_DISPLAY_LHS_MFD, TEXTURE_TYPE_SINGLEALPHA);

  001a2	6a 02		 push	 2
  001a4	68 f8 00 00 00	 push	 248			; 000000f8H
  001a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  001ae	50		 push	 eax
  001af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  001b5	51		 push	 ecx
  001b6	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  001bb	a3 00 00 00 00	 mov	 DWORD PTR ?lhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 1074 : 	rhs_mfd_texture_screen = create_system_texture_screen (mfd_texture_size, mfd_texture_size, TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD, TEXTURE_TYPE_SINGLEALPHA);

  001c0	6a 02		 push	 2
  001c2	68 f9 00 00 00	 push	 249			; 000000f9H
  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  001cc	50		 push	 eax
  001cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  001d3	51		 push	 ecx
  001d4	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  001d9	a3 00 00 00 00	 mov	 DWORD PTR ?rhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 1075 : 	lhs_overlaid_mfd_texture_screen = create_system_texture_screen (mfd_texture_size, mfd_texture_size, LHS_OVERLAID_MFD_TEXTURE_INDEX, TEXTURE_TYPE_SINGLEALPHA);

  001de	6a 02		 push	 2
  001e0	68 54 06 00 00	 push	 1620			; 00000654H
  001e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  001ea	50		 push	 eax
  001eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  001f1	51		 push	 ecx
  001f2	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  001f7	a3 00 00 00 00	 mov	 DWORD PTR ?lhs_overlaid_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 1076 : 	rhs_overlaid_mfd_texture_screen = create_system_texture_screen (mfd_texture_size, mfd_texture_size, RHS_OVERLAID_MFD_TEXTURE_INDEX, TEXTURE_TYPE_SINGLEALPHA);

  001fc	6a 02		 push	 2
  001fe	68 57 06 00 00	 push	 1623			; 00000657H
  00203	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  00208	50		 push	 eax
  00209	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  0020f	51		 push	 ecx
  00210	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  00215	a3 00 00 00 00	 mov	 DWORD PTR ?rhs_overlaid_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 1077 : 
; 1078 : 	set_rgb_colour (MFD_COLOUR1,   0, 255,   0, 255);

  0021a	b8 04 00 00 00	 mov	 eax, 4
  0021f	6b c8 00	 imul	 ecx, eax, 0
  00222	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  00229	b8 04 00 00 00	 mov	 eax, 4
  0022e	6b c8 00	 imul	 ecx, eax, 0
  00231	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  00238	b8 04 00 00 00	 mov	 eax, 4
  0023d	6b c8 00	 imul	 ecx, eax, 0
  00240	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00247	b8 04 00 00 00	 mov	 eax, 4
  0024c	6b c8 00	 imul	 ecx, eax, 0
  0024f	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1079 : 	set_rgb_colour (MFD_COLOUR2,   0, 200,   0, 255);

  00256	b8 04 00 00 00	 mov	 eax, 4
  0025b	c1 e0 00	 shl	 eax, 0
  0025e	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  00265	b8 04 00 00 00	 mov	 eax, 4
  0026a	c1 e0 00	 shl	 eax, 0
  0026d	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  00274	b8 04 00 00 00	 mov	 eax, 4
  00279	c1 e0 00	 shl	 eax, 0
  0027c	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00283	b8 04 00 00 00	 mov	 eax, 4
  00288	c1 e0 00	 shl	 eax, 0
  0028b	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 1080 : 	set_rgb_colour (MFD_COLOUR3,   0, 176,   0, 255);

  00292	b8 04 00 00 00	 mov	 eax, 4
  00297	d1 e0		 shl	 eax, 1
  00299	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  002a0	b8 04 00 00 00	 mov	 eax, 4
  002a5	d1 e0		 shl	 eax, 1
  002a7	c6 80 01 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 176 ; 000000b0H
  002ae	b8 04 00 00 00	 mov	 eax, 4
  002b3	d1 e0		 shl	 eax, 1
  002b5	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  002bc	b8 04 00 00 00	 mov	 eax, 4
  002c1	d1 e0		 shl	 eax, 1
  002c3	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 1081 : 	set_rgb_colour (MFD_COLOUR4,   0, 151,   0, 255);

  002ca	b8 04 00 00 00	 mov	 eax, 4
  002cf	6b c8 03	 imul	 ecx, eax, 3
  002d2	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  002d9	b8 04 00 00 00	 mov	 eax, 4
  002de	6b c8 03	 imul	 ecx, eax, 3
  002e1	c6 81 01 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 151 ; 00000097H
  002e8	b8 04 00 00 00	 mov	 eax, 4
  002ed	6b c8 03	 imul	 ecx, eax, 3
  002f0	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  002f7	b8 04 00 00 00	 mov	 eax, 4
  002fc	6b c8 03	 imul	 ecx, eax, 3
  002ff	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1082 : 	set_rgb_colour (MFD_COLOUR5,   0, 149,   0, 255);

  00306	b8 04 00 00 00	 mov	 eax, 4
  0030b	c1 e0 02	 shl	 eax, 2
  0030e	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  00315	b8 04 00 00 00	 mov	 eax, 4
  0031a	c1 e0 02	 shl	 eax, 2
  0031d	c6 80 01 00 00
	00 95		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 149 ; 00000095H
  00324	b8 04 00 00 00	 mov	 eax, 4
  00329	c1 e0 02	 shl	 eax, 2
  0032c	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00333	b8 04 00 00 00	 mov	 eax, 4
  00338	c1 e0 02	 shl	 eax, 2
  0033b	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 1083 : 	set_rgb_colour (MFD_COLOUR6,  40,  68,  56, 255);

  00342	b8 04 00 00 00	 mov	 eax, 4
  00347	6b c8 05	 imul	 ecx, eax, 5
  0034a	c6 81 02 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 40 ; 00000028H
  00351	b8 04 00 00 00	 mov	 eax, 4
  00356	6b c8 05	 imul	 ecx, eax, 5
  00359	c6 81 01 00 00
	00 44		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 68 ; 00000044H
  00360	b8 04 00 00 00	 mov	 eax, 4
  00365	6b c8 05	 imul	 ecx, eax, 5
  00368	c6 81 00 00 00
	00 38		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 56 ; 00000038H
  0036f	b8 04 00 00 00	 mov	 eax, 4
  00374	6b c8 05	 imul	 ecx, eax, 5
  00377	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1084 : 
; 1085 : 	if (get_local_entity_int_value (get_session_entity (), INT_TYPE_DAY_SEGMENT_TYPE) == DAY_SEGMENT_TYPE_DAY)

  0037e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  00385	74 0c		 je	 SHORT $LN19@initialise
  00387	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  0038c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0038e	89 4d bc	 mov	 DWORD PTR tv210[ebp], ecx
  00391	eb 1d		 jmp	 SHORT $LN20@initialise
$LN19@initialise:
  00393	68 3d 04 00 00	 push	 1085			; 0000043dH
  00398	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0039d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003a3	52		 push	 edx
  003a4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003a9	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv210[ebp], 0
$LN20@initialise:
  003b0	b8 01 00 00 00	 mov	 eax, 1
  003b5	85 c0		 test	 eax, eax
  003b7	74 09		 je	 SHORT $LN21@initialise
  003b9	c7 45 b8 27 00
	00 00		 mov	 DWORD PTR tv217[ebp], 39 ; 00000027H
  003c0	eb 1d		 jmp	 SHORT $LN22@initialise
$LN21@initialise:
  003c2	68 3d 04 00 00	 push	 1085			; 0000043dH
  003c7	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LLLFJHDL@c?3?2users?2nhv90?2projects?2eech?2ap@
  003cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  003d2	51		 push	 ecx
  003d3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003d8	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv217[ebp], 0
$LN22@initialise:
  003df	6a 27		 push	 39			; 00000027H
  003e1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  003e7	52		 push	 edx
  003e8	69 45 bc 5c 04
	00 00		 imul	 eax, DWORD PTR tv210[ebp], 1116
  003ef	8b 4d b8	 mov	 ecx, DWORD PTR tv217[ebp]
  003f2	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  003f9	ff d2		 call	 edx
  003fb	83 f8 01	 cmp	 eax, 1
  003fe	75 1e		 jne	 SHORT $LN12@initialise

; 1086 : 	{
; 1087 : 		set_rgb_colour (clear_green_mfd_colour, 30, 58, 44, 255);

  00400	c6 05 02 00 00
	00 1e		 mov	 BYTE PTR ?clear_green_mfd_colour@@3UREAL_COLOUR@@A+2, 30 ; 0000001eH
  00407	c6 05 01 00 00
	00 3a		 mov	 BYTE PTR ?clear_green_mfd_colour@@3UREAL_COLOUR@@A+1, 58 ; 0000003aH
  0040e	c6 05 00 00 00
	00 2c		 mov	 BYTE PTR ?clear_green_mfd_colour@@3UREAL_COLOUR@@A, 44 ; 0000002cH
  00415	c6 05 03 00 00
	00 ff		 mov	 BYTE PTR ?clear_green_mfd_colour@@3UREAL_COLOUR@@A+3, 255 ; 000000ffH

; 1088 : 	}
; 1089 : 	else

  0041c	eb 1c		 jmp	 SHORT $LN13@initialise
$LN12@initialise:

; 1090 : 	{
; 1091 : 		set_rgb_colour (clear_green_mfd_colour, 6, 6, 1, 255);

  0041e	c6 05 02 00 00
	00 06		 mov	 BYTE PTR ?clear_green_mfd_colour@@3UREAL_COLOUR@@A+2, 6
  00425	c6 05 01 00 00
	00 06		 mov	 BYTE PTR ?clear_green_mfd_colour@@3UREAL_COLOUR@@A+1, 6
  0042c	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?clear_green_mfd_colour@@3UREAL_COLOUR@@A, 1
  00433	c6 05 03 00 00
	00 ff		 mov	 BYTE PTR ?clear_green_mfd_colour@@3UREAL_COLOUR@@A+3, 255 ; 000000ffH
$LN13@initialise:

; 1092 : 	}
; 1093 : 
; 1094 : 	if(command_line_export_mfd)

  0043a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_export_mfd@@3HA, 0 ; command_line_export_mfd
  00441	74 0c		 je	 SHORT $LN14@initialise

; 1095 : 	{
; 1096 : 		clear_mfd_colour=clear_green_mfd_colour;

  00443	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_green_mfd_colour@@3UREAL_COLOUR@@A
  00448	a3 00 00 00 00	 mov	 DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A, eax

; 1097 : 	}
; 1098 : 	else

  0044d	eb 1c		 jmp	 SHORT $LN15@initialise
$LN14@initialise:

; 1099 : 	{
; 1100 : 		set_rgb_colour (clear_mfd_colour, 0, 255, 0, 0); 

  0044f	c6 05 02 00 00
	00 00		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A+2, 0
  00456	c6 05 01 00 00
	00 ff		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A+1, 255 ; 000000ffH
  0045d	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A, 0
  00464	c6 05 03 00 00
	00 00		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A+3, 0
$LN15@initialise:

; 1101 : 	}
; 1102 : 	
; 1103 : 	//VJ 030423 TSd render mod
; 1104 : 	set_rgb_colour (MFD_COLOUR1,              0, 255,   0, 255);

  0046b	b8 04 00 00 00	 mov	 eax, 4
  00470	6b c8 00	 imul	 ecx, eax, 0
  00473	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  0047a	b8 04 00 00 00	 mov	 eax, 4
  0047f	6b c8 00	 imul	 ecx, eax, 0
  00482	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  00489	b8 04 00 00 00	 mov	 eax, 4
  0048e	6b c8 00	 imul	 ecx, eax, 0
  00491	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00498	b8 04 00 00 00	 mov	 eax, 4
  0049d	6b c8 00	 imul	 ecx, eax, 0
  004a0	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1105 : 	set_rgb_colour (MFD_COLOUR2,              0, 200,   0, 255);

  004a7	b8 04 00 00 00	 mov	 eax, 4
  004ac	c1 e0 00	 shl	 eax, 0
  004af	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  004b6	b8 04 00 00 00	 mov	 eax, 4
  004bb	c1 e0 00	 shl	 eax, 0
  004be	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  004c5	b8 04 00 00 00	 mov	 eax, 4
  004ca	c1 e0 00	 shl	 eax, 0
  004cd	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  004d4	b8 04 00 00 00	 mov	 eax, 4
  004d9	c1 e0 00	 shl	 eax, 0
  004dc	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 1106 : 	set_rgb_colour (MFD_COLOUR3,              0, 176,   0, 255);

  004e3	b8 04 00 00 00	 mov	 eax, 4
  004e8	d1 e0		 shl	 eax, 1
  004ea	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  004f1	b8 04 00 00 00	 mov	 eax, 4
  004f6	d1 e0		 shl	 eax, 1
  004f8	c6 80 01 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 176 ; 000000b0H
  004ff	b8 04 00 00 00	 mov	 eax, 4
  00504	d1 e0		 shl	 eax, 1
  00506	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  0050d	b8 04 00 00 00	 mov	 eax, 4
  00512	d1 e0		 shl	 eax, 1
  00514	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 1107 : 	set_rgb_colour (MFD_COLOUR4,              0, 151,   0, 255);

  0051b	b8 04 00 00 00	 mov	 eax, 4
  00520	6b c8 03	 imul	 ecx, eax, 3
  00523	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  0052a	b8 04 00 00 00	 mov	 eax, 4
  0052f	6b c8 03	 imul	 ecx, eax, 3
  00532	c6 81 01 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 151 ; 00000097H
  00539	b8 04 00 00 00	 mov	 eax, 4
  0053e	6b c8 03	 imul	 ecx, eax, 3
  00541	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00548	b8 04 00 00 00	 mov	 eax, 4
  0054d	6b c8 03	 imul	 ecx, eax, 3
  00550	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1108 : 	set_rgb_colour (MFD_COLOUR5,              0, 128,   0, 255);

  00557	b8 04 00 00 00	 mov	 eax, 4
  0055c	c1 e0 02	 shl	 eax, 2
  0055f	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  00566	b8 04 00 00 00	 mov	 eax, 4
  0056b	c1 e0 02	 shl	 eax, 2
  0056e	c6 80 01 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 128 ; 00000080H
  00575	b8 04 00 00 00	 mov	 eax, 4
  0057a	c1 e0 02	 shl	 eax, 2
  0057d	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00584	b8 04 00 00 00	 mov	 eax, 4
  00589	c1 e0 02	 shl	 eax, 2
  0058c	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 1109 : 	set_rgb_colour (MFD_COLOUR6,             40,  68,  56, 255);

  00593	b8 04 00 00 00	 mov	 eax, 4
  00598	6b c8 05	 imul	 ecx, eax, 5
  0059b	c6 81 02 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 40 ; 00000028H
  005a2	b8 04 00 00 00	 mov	 eax, 4
  005a7	6b c8 05	 imul	 ecx, eax, 5
  005aa	c6 81 01 00 00
	00 44		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 68 ; 00000044H
  005b1	b8 04 00 00 00	 mov	 eax, 4
  005b6	6b c8 05	 imul	 ecx, eax, 5
  005b9	c6 81 00 00 00
	00 38		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 56 ; 00000038H
  005c0	b8 04 00 00 00	 mov	 eax, 4
  005c5	6b c8 05	 imul	 ecx, eax, 5
  005c8	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1110 : 	set_rgb_colour (MFD_CONTOUR_COLOUR,     255, 100,   0, 255);

  005cf	b8 04 00 00 00	 mov	 eax, 4
  005d4	6b c8 06	 imul	 ecx, eax, 6
  005d7	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  005de	b8 04 00 00 00	 mov	 eax, 4
  005e3	6b c8 06	 imul	 ecx, eax, 6
  005e6	c6 81 01 00 00
	00 64		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 100 ; 00000064H
  005ed	b8 04 00 00 00	 mov	 eax, 4
  005f2	6b c8 06	 imul	 ecx, eax, 6
  005f5	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  005fc	b8 04 00 00 00	 mov	 eax, 4
  00601	6b c8 06	 imul	 ecx, eax, 6
  00604	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1111 : 	set_rgb_colour (MFD_RIVER_COLOUR,        50,  75, 225, 255);

  0060b	b8 04 00 00 00	 mov	 eax, 4
  00610	6b c8 07	 imul	 ecx, eax, 7
  00613	c6 81 02 00 00
	00 32		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 50 ; 00000032H
  0061a	b8 04 00 00 00	 mov	 eax, 4
  0061f	6b c8 07	 imul	 ecx, eax, 7
  00622	c6 81 01 00 00
	00 4b		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 75 ; 0000004bH
  00629	b8 04 00 00 00	 mov	 eax, 4
  0062e	6b c8 07	 imul	 ecx, eax, 7
  00631	c6 81 00 00 00
	00 e1		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 225 ; 000000e1H
  00638	b8 04 00 00 00	 mov	 eax, 4
  0063d	6b c8 07	 imul	 ecx, eax, 7
  00640	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1112 : 	set_rgb_colour (MFD_ROAD_COLOUR,        255, 200,   0, 255);

  00647	b8 04 00 00 00	 mov	 eax, 4
  0064c	c1 e0 03	 shl	 eax, 3
  0064f	c6 80 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 255 ; 000000ffH
  00656	b8 04 00 00 00	 mov	 eax, 4
  0065b	c1 e0 03	 shl	 eax, 3
  0065e	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  00665	b8 04 00 00 00	 mov	 eax, 4
  0066a	c1 e0 03	 shl	 eax, 3
  0066d	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00674	b8 04 00 00 00	 mov	 eax, 4
  00679	c1 e0 03	 shl	 eax, 3
  0067c	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 1113 : 	set_rgb_colour (MFD_BACKGROUND_COLOUR,   15,  24,  16, 255);

  00683	b8 04 00 00 00	 mov	 eax, 4
  00688	6b c8 09	 imul	 ecx, eax, 9
  0068b	c6 81 02 00 00
	00 0f		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 15 ; 0000000fH
  00692	b8 04 00 00 00	 mov	 eax, 4
  00697	6b c8 09	 imul	 ecx, eax, 9
  0069a	c6 81 01 00 00
	00 18		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 24 ; 00000018H
  006a1	b8 04 00 00 00	 mov	 eax, 4
  006a6	6b c8 09	 imul	 ecx, eax, 9
  006a9	c6 81 00 00 00
	00 10		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 16 ; 00000010H
  006b0	b8 04 00 00 00	 mov	 eax, 4
  006b5	6b c8 09	 imul	 ecx, eax, 9
  006b8	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1114 : 	set_rgb_colour (MFD_CLEAR_COLOUR,         0,   0,   0,   0);

  006bf	b8 04 00 00 00	 mov	 eax, 4
  006c4	6b c8 13	 imul	 ecx, eax, 19
  006c7	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  006ce	b8 04 00 00 00	 mov	 eax, 4
  006d3	6b c8 13	 imul	 ecx, eax, 19
  006d6	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 0
  006dd	b8 04 00 00 00	 mov	 eax, 4
  006e2	6b c8 13	 imul	 ecx, eax, 19
  006e5	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  006ec	b8 04 00 00 00	 mov	 eax, 4
  006f1	6b c8 13	 imul	 ecx, eax, 19
  006f4	c6 81 03 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 0

; 1115 : 
; 1116 : 	if (command_line_colour_mfd)

  006fb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_colour_mfd@@3HA, 0 ; command_line_colour_mfd
  00702	0f 84 a9 01 00
	00		 je	 $LN16@initialise

; 1117 : 	{
; 1118 : 		set_rgb_colour (MFD_COLOUR_BLUE,          60, 160, 255,  255);

  00708	b8 04 00 00 00	 mov	 eax, 4
  0070d	6b c8 0c	 imul	 ecx, eax, 12
  00710	c6 81 02 00 00
	00 3c		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 60 ; 0000003cH
  00717	b8 04 00 00 00	 mov	 eax, 4
  0071c	6b c8 0c	 imul	 ecx, eax, 12
  0071f	c6 81 01 00 00
	00 a0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 160 ; 000000a0H
  00726	b8 04 00 00 00	 mov	 eax, 4
  0072b	6b c8 0c	 imul	 ecx, eax, 12
  0072e	c6 81 00 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 255 ; 000000ffH
  00735	b8 04 00 00 00	 mov	 eax, 4
  0073a	6b c8 0c	 imul	 ecx, eax, 12
  0073d	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1119 : 		set_rgb_colour (MFD_COLOUR_DARK_BLUE,	   0,   0,  96,  255);

  00744	b8 04 00 00 00	 mov	 eax, 4
  00749	6b c8 11	 imul	 ecx, eax, 17
  0074c	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  00753	b8 04 00 00 00	 mov	 eax, 4
  00758	6b c8 11	 imul	 ecx, eax, 17
  0075b	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 0
  00762	b8 04 00 00 00	 mov	 eax, 4
  00767	6b c8 11	 imul	 ecx, eax, 17
  0076a	c6 81 00 00 00
	00 60		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 96 ; 00000060H
  00771	b8 04 00 00 00	 mov	 eax, 4
  00776	6b c8 11	 imul	 ecx, eax, 17
  00779	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1120 : 		set_rgb_colour (MFD_COLOUR_YELLOW,       230, 230,  40,  255);

  00780	b8 04 00 00 00	 mov	 eax, 4
  00785	6b c8 0d	 imul	 ecx, eax, 13
  00788	c6 81 02 00 00
	00 e6		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 230 ; 000000e6H
  0078f	b8 04 00 00 00	 mov	 eax, 4
  00794	6b c8 0d	 imul	 ecx, eax, 13
  00797	c6 81 01 00 00
	00 e6		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 230 ; 000000e6H
  0079e	b8 04 00 00 00	 mov	 eax, 4
  007a3	6b c8 0d	 imul	 ecx, eax, 13
  007a6	c6 81 00 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 40 ; 00000028H
  007ad	b8 04 00 00 00	 mov	 eax, 4
  007b2	6b c8 0d	 imul	 ecx, eax, 13
  007b5	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1121 : 		set_rgb_colour (MFD_COLOUR_DARK_YELLOW,  165, 165,  30,  255);

  007bc	b8 04 00 00 00	 mov	 eax, 4
  007c1	6b c8 0e	 imul	 ecx, eax, 14
  007c4	c6 81 02 00 00
	00 a5		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 165 ; 000000a5H
  007cb	b8 04 00 00 00	 mov	 eax, 4
  007d0	6b c8 0e	 imul	 ecx, eax, 14
  007d3	c6 81 01 00 00
	00 a5		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 165 ; 000000a5H
  007da	b8 04 00 00 00	 mov	 eax, 4
  007df	6b c8 0e	 imul	 ecx, eax, 14
  007e2	c6 81 00 00 00
	00 1e		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 30 ; 0000001eH
  007e9	b8 04 00 00 00	 mov	 eax, 4
  007ee	6b c8 0e	 imul	 ecx, eax, 14
  007f1	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1122 : 		set_rgb_colour (MFD_COLOUR_RED,          210,  90,  60,  255);	

  007f8	b8 04 00 00 00	 mov	 eax, 4
  007fd	6b c8 0f	 imul	 ecx, eax, 15
  00800	c6 81 02 00 00
	00 d2		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 210 ; 000000d2H
  00807	b8 04 00 00 00	 mov	 eax, 4
  0080c	6b c8 0f	 imul	 ecx, eax, 15
  0080f	c6 81 01 00 00
	00 5a		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 90 ; 0000005aH
  00816	b8 04 00 00 00	 mov	 eax, 4
  0081b	6b c8 0f	 imul	 ecx, eax, 15
  0081e	c6 81 00 00 00
	00 3c		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 60 ; 0000003cH
  00825	b8 04 00 00 00	 mov	 eax, 4
  0082a	6b c8 0f	 imul	 ecx, eax, 15
  0082d	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1123 : 		set_rgb_colour (MFD_COLOUR_DARK_RED,	 148,  32,   0,  255);

  00834	b8 04 00 00 00	 mov	 eax, 4
  00839	6b c8 12	 imul	 ecx, eax, 18
  0083c	c6 81 02 00 00
	00 94		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 148 ; 00000094H
  00843	b8 04 00 00 00	 mov	 eax, 4
  00848	6b c8 12	 imul	 ecx, eax, 18
  0084b	c6 81 01 00 00
	00 20		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 32 ; 00000020H
  00852	b8 04 00 00 00	 mov	 eax, 4
  00857	6b c8 12	 imul	 ecx, eax, 18
  0085a	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00861	b8 04 00 00 00	 mov	 eax, 4
  00866	6b c8 12	 imul	 ecx, eax, 18
  00869	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1124 : 		set_rgb_colour (MFD_COLOUR_CYAN,          60, 255, 230,  255);	

  00870	b8 04 00 00 00	 mov	 eax, 4
  00875	c1 e0 04	 shl	 eax, 4
  00878	c6 80 02 00 00
	00 3c		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 60 ; 0000003cH
  0087f	b8 04 00 00 00	 mov	 eax, 4
  00884	c1 e0 04	 shl	 eax, 4
  00887	c6 80 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 255 ; 000000ffH
  0088e	b8 04 00 00 00	 mov	 eax, 4
  00893	c1 e0 04	 shl	 eax, 4
  00896	c6 80 00 00 00
	00 e6		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 230 ; 000000e6H
  0089d	b8 04 00 00 00	 mov	 eax, 4
  008a2	c1 e0 04	 shl	 eax, 4
  008a5	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 1125 : 	}
; 1126 : 	else

  008ac	e9 a8 00 00 00	 jmp	 $LN17@initialise
$LN16@initialise:

; 1127 : 	{
; 1128 : 		MFD_COLOUR_BLUE = MFD_COLOUR1;

  008b1	b8 04 00 00 00	 mov	 eax, 4
  008b6	6b c8 00	 imul	 ecx, eax, 0
  008b9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008bf	b8 04 00 00 00	 mov	 eax, 4
  008c4	6b c8 0c	 imul	 ecx, eax, 12
  008c7	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 1129 : 		MFD_COLOUR_DARK_BLUE = MFD_COLOUR5;

  008cd	b8 04 00 00 00	 mov	 eax, 4
  008d2	c1 e0 02	 shl	 eax, 2
  008d5	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  008db	ba 04 00 00 00	 mov	 edx, 4
  008e0	6b c2 11	 imul	 eax, edx, 17
  008e3	89 88 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], ecx

; 1130 : 		MFD_COLOUR_YELLOW = MFD_COLOUR1;

  008e9	b8 04 00 00 00	 mov	 eax, 4
  008ee	6b c8 00	 imul	 ecx, eax, 0
  008f1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008f7	b8 04 00 00 00	 mov	 eax, 4
  008fc	6b c8 0d	 imul	 ecx, eax, 13
  008ff	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 1131 : 		MFD_COLOUR_RED = MFD_COLOUR1;

  00905	b8 04 00 00 00	 mov	 eax, 4
  0090a	6b c8 00	 imul	 ecx, eax, 0
  0090d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00913	b8 04 00 00 00	 mov	 eax, 4
  00918	6b c8 0f	 imul	 ecx, eax, 15
  0091b	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 1132 : 		MFD_COLOUR_DARK_RED = MFD_COLOUR5;

  00921	b8 04 00 00 00	 mov	 eax, 4
  00926	c1 e0 02	 shl	 eax, 2
  00929	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0092f	ba 04 00 00 00	 mov	 edx, 4
  00934	6b c2 12	 imul	 eax, edx, 18
  00937	89 88 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], ecx

; 1133 : 		MFD_COLOUR_CYAN = MFD_COLOUR1;

  0093d	b8 04 00 00 00	 mov	 eax, 4
  00942	6b c8 00	 imul	 ecx, eax, 0
  00945	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0094b	b8 04 00 00 00	 mov	 eax, 4
  00950	c1 e0 04	 shl	 eax, 4
  00953	89 90 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], edx
$LN17@initialise:

; 1134 : 	}
; 1135 : 
; 1136 : 	set_rgb_colour (TEXT_COLOUR1,           254, 204,   1, 255);

  00959	b8 04 00 00 00	 mov	 eax, 4
  0095e	6b c8 00	 imul	 ecx, eax, 0
  00961	c6 81 02 00 00
	00 fe		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx+2], 254 ; 000000feH
  00968	b8 04 00 00 00	 mov	 eax, 4
  0096d	6b c8 00	 imul	 ecx, eax, 0
  00970	c6 81 01 00 00
	00 cc		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx+1], 204 ; 000000ccH
  00977	b8 04 00 00 00	 mov	 eax, 4
  0097c	6b c8 00	 imul	 ecx, eax, 0
  0097f	c6 81 00 00 00
	00 01		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx], 1
  00986	b8 04 00 00 00	 mov	 eax, 4
  0098b	6b c8 00	 imul	 ecx, eax, 0
  0098e	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 1137 : 	set_rgb_colour (TEXT_BACKGROUND_COLOUR,  66,  35,  11, 255);

  00995	b8 04 00 00 00	 mov	 eax, 4
  0099a	c1 e0 00	 shl	 eax, 0
  0099d	c6 80 02 00 00
	00 42		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax+2], 66 ; 00000042H
  009a4	b8 04 00 00 00	 mov	 eax, 4
  009a9	c1 e0 00	 shl	 eax, 0
  009ac	c6 80 01 00 00
	00 23		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax+1], 35 ; 00000023H
  009b3	b8 04 00 00 00	 mov	 eax, 4
  009b8	c1 e0 00	 shl	 eax, 0
  009bb	c6 80 00 00 00
	00 0b		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax], 11 ; 0000000bH
  009c2	b8 04 00 00 00	 mov	 eax, 4
  009c7	c1 e0 00	 shl	 eax, 0
  009ca	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 1138 : 
; 1139 :    Initialise_TSD_render_terrain();

  009d1	e8 00 00 00 00	 call	 ?Initialise_TSD_render_terrain@@YGXXZ ; Initialise_TSD_render_terrain

; 1140 : 
; 1141 : }

  009d6	5f		 pop	 edi
  009d7	5e		 pop	 esi
  009d8	5b		 pop	 ebx
  009d9	8b e5		 mov	 esp, ebp
  009db	5d		 pop	 ebp
  009dc	c3		 ret	 0
?initialise_default_mfd@@YGXXZ ENDP			; initialise_default_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?tan@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?tan@@YGMM@Z PROC					; tan, COMDAT

; 299  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 300  : 	return (_CSTD tanf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _tanf
  00019	83 c4 04	 add	 esp, 4

; 301  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?tan@@YGMM@Z ENDP					; tan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sin@@YGMM@Z PROC					; sin, COMDAT

; 284  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 285  : 	return (_CSTD sinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sinf
  00019	83 c4 04	 add	 esp, 4

; 286  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sin@@YGMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fmod@@YGMMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
__Yx$ = 12						; size = 4
?fmod@@YGMMM@Z PROC					; fmod, COMDAT

; 143  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 144  : 	return (_CSTD fmodf(_Xx, _Yx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _fmodf
  00024	83 c4 08	 add	 esp, 8

; 145  : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?fmod@@YGMMM@Z ENDP					; fmod
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?cos@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?cos@@YGMM@Z PROC					; cos, COMDAT

; 77   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 78   : 	return (_CSTD cosf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _cosf
  00019	83 c4 04	 add	 esp, 4

; 79   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?cos@@YGMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan2@@YGMMM@Z
_TEXT	SEGMENT
__Yx$ = 8						; size = 4
__Xx$ = 12						; size = 4
?atan2@@YGMMM@Z PROC					; atan2, COMDAT

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return (_CSTD atan2f(_Yx, _Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _atan2f
  00024	83 c4 08	 add	 esp, 8

; 58   : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?atan2@@YGMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _tanf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_tanf	PROC						; COMDAT

; 764  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 765  :             return (float)tan(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _tan
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 766  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_tanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 750  :             return (float)sin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 751  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fmodf
_TEXT	SEGMENT
tv74 = -68						; size = 4
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
_fmodf	PROC						; COMDAT

; 690  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 691  :             return (float)fmod(_X, _Y);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _fmod
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 692  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_fmodf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 648  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 649  :             return (float)cos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _cos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 650  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv74 = -68						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 633  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 634  :             return (float)atan2(_Y, _X);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _atan2
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 635  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
