; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\maths\fixedpt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?fixed28_point4_mul@@YGHHH@Z			; fixed28_point4_mul
PUBLIC	?ceil_fixed28_point4@@YGHH@Z			; ceil_fixed28_point4
PUBLIC	?get_div_mod@@YGHHHPAH@Z			; get_div_mod
PUBLIC	?__LINE__Var@?0??get_div_mod@@YGHHHPAH@Z@4JA	; `get_div_mod'::`1'::__LINE__Var
PUBLIC	??_C@_0DF@MNCLCGDH@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0BB@BHGMELD@denominator?5?$CB?$DN?50@	; `string'
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
;	COMDAT ??_C@_0BB@BHGMELD@denominator?5?$CB?$DN?50@
CONST	SEGMENT
??_C@_0BB@BHGMELD@denominator?5?$CB?$DN?50@ DB 'denominator != 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@MNCLCGDH@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DF@MNCLCGDH@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\maths\fixedpt.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_div_mod@@YGHHHPAH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_div_mod@@YGHHHPAH@Z@4JA DD 0a9H	; `get_div_mod'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\fixedpt.c
;	COMDAT ?get_div_mod@@YGHHHPAH@Z
_TEXT	SEGMENT
_numerator$ = 8						; size = 4
_denominator$ = 12					; size = 4
_modulus$ = 16						; size = 4
?get_div_mod@@YGHHHPAH@Z PROC				; get_div_mod, COMDAT

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 170  : 
; 171  : 	ASSERT ( denominator != 0 );

  00009	83 7d 0c 00	 cmp	 DWORD PTR _denominator$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_div_mo
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_div_mod@@YGHHHPAH@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@MNCLCGDH@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@BHGMELD@denominator?5?$CB?$DN?50@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_div_mo:

; 172  : 
; 173  : 	*modulus = numerator % denominator;

  00027	8b 45 08	 mov	 eax, DWORD PTR _numerator$[ebp]
  0002a	99		 cdq
  0002b	f7 7d 0c	 idiv	 DWORD PTR _denominator$[ebp]
  0002e	8b 45 10	 mov	 eax, DWORD PTR _modulus$[ebp]
  00031	89 10		 mov	 DWORD PTR [eax], edx

; 174  : 
; 175  : 	return ( numerator / denominator );

  00033	8b 45 08	 mov	 eax, DWORD PTR _numerator$[ebp]
  00036	99		 cdq
  00037	f7 7d 0c	 idiv	 DWORD PTR _denominator$[ebp]

; 176  : }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 0c 00	 ret	 12			; 0000000cH
?get_div_mod@@YGHHHPAH@Z ENDP				; get_div_mod
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\fixedpt.c
;	COMDAT ?ceil_fixed28_point4@@YGHH@Z
_TEXT	SEGMENT
tv74 = -76						; size = 4
_numerator$ = -8					; size = 4
_return_value$ = -4					; size = 4
_value$ = 8						; size = 4
?ceil_fixed28_point4@@YGHH@Z PROC			; ceil_fixed28_point4, COMDAT

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 132  : 
; 133  : 	int
; 134  : 		return_value,
; 135  : 		numerator;
; 136  : 
; 137  : 	numerator = value - 1 + 16;

  00009	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  0000c	83 c0 0f	 add	 eax, 15			; 0000000fH
  0000f	89 45 f8	 mov	 DWORD PTR _numerator$[ebp], eax

; 138  : 
; 139  : 	if ( numerator >= 0 )

  00012	78 0b		 js	 SHORT $LN2@ceil_fixed

; 140  : 	{
; 141  : 
; 142  : 		return_value = numerator >> 4;

  00014	8b 45 f8	 mov	 eax, DWORD PTR _numerator$[ebp]
  00017	c1 f8 04	 sar	 eax, 4
  0001a	89 45 fc	 mov	 DWORD PTR _return_value$[ebp], eax

; 143  : //		return_value = numerator / 16;
; 144  : 	}
; 145  : 	else

  0001d	eb 30		 jmp	 SHORT $LN3@ceil_fixed
$LN2@ceil_fixed:

; 146  : 	{
; 147  : 
; 148  : 		//
; 149  : 		// deal with negative numerators correctly
; 150  : 		//
; 151  : 
; 152  : 		return_value = -( ( -numerator ) >> 4 );

  0001f	8b 45 f8	 mov	 eax, DWORD PTR _numerator$[ebp]
  00022	f7 d8		 neg	 eax
  00024	c1 f8 04	 sar	 eax, 4
  00027	f7 d8		 neg	 eax
  00029	89 45 fc	 mov	 DWORD PTR _return_value$[ebp], eax

; 153  : //		return_value = -( ( -numerator ) / 16 );
; 154  : 
; 155  : 		return_value -= ( ( -numerator ) & 0xf ) ? 1 : 0;

  0002c	8b 45 f8	 mov	 eax, DWORD PTR _numerator$[ebp]
  0002f	f7 d8		 neg	 eax
  00031	83 e0 0f	 and	 eax, 15			; 0000000fH
  00034	74 09		 je	 SHORT $LN5@ceil_fixed
  00036	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv74[ebp], 1
  0003d	eb 07		 jmp	 SHORT $LN6@ceil_fixed
$LN5@ceil_fixed:
  0003f	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN6@ceil_fixed:
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _return_value$[ebp]
  00049	2b 4d b4	 sub	 ecx, DWORD PTR tv74[ebp]
  0004c	89 4d fc	 mov	 DWORD PTR _return_value$[ebp], ecx
$LN3@ceil_fixed:

; 156  : //		return_value -= ( ( -numerator ) % 16 ) ? 1 : 0;
; 157  : 	}
; 158  : 
; 159  : 	return ( return_value );

  0004f	8b 45 fc	 mov	 eax, DWORD PTR _return_value$[ebp]

; 160  : }

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?ceil_fixed28_point4@@YGHH@Z ENDP			; ceil_fixed28_point4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\fixedpt.c
;	COMDAT ?fixed28_point4_mul@@YGHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?fixed28_point4_mul@@YGHHH@Z PROC			; fixed28_point4_mul, COMDAT

; 114  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 115  : 
; 116  : 	//
; 117  : 	// could make this asm to prevent overflow
; 118  : 	//
; 119  : 
; 120  : 	//
; 121  : 	// 28.4 * 28.4 = 24.8 / 16 = 28.4
; 122  : 	//
; 123  : 
; 124  : 	return ( ( a * b ) / 16 );

  00009	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0000c	0f af 45 0c	 imul	 eax, DWORD PTR _b$[ebp]
  00010	99		 cdq
  00011	83 e2 0f	 and	 edx, 15			; 0000000fH
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 04	 sar	 eax, 4

; 125  : }

  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?fixed28_point4_mul@@YGHHH@Z ENDP			; fixed28_point4_mul
_TEXT	ENDS
END
