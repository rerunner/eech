; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\3d\3DFUNC.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?f3d_set_light@@YGXIPAU_D3DLIGHT7@@@Z		; f3d_set_light
PUBLIC	?f3d_light_enable@@YGXII@Z			; f3d_light_enable
PUBLIC	?f3d_set_transform@@YGXIPAU_D3DMATRIX@@@Z	; f3d_set_transform
PUBLIC	?f3d_set_viewport@@YGHPAU_D3DVIEWPORT7@@@Z	; f3d_set_viewport
PUBLIC	?f3d_vertex_create@@YGXPAU_D3DVERTEXBUFFERDESC@@PAPAUIDirect3DVertexBuffer7@@@Z ; f3d_vertex_create
PUBLIC	?f3d_vertex_release@@YGXPAPAUIDirect3DVertexBuffer7@@@Z ; f3d_vertex_release
PUBLIC	?f3d_vertex_lock@@YGHPAUIDirect3DVertexBuffer7@@IPAPAX@Z ; f3d_vertex_lock
PUBLIC	?f3d_vertex_lock_strict@@YGXPAUIDirect3DVertexBuffer7@@IPAPAX@Z ; f3d_vertex_lock_strict
PUBLIC	?f3d_vertex_unlock@@YGXPAUIDirect3DVertexBuffer7@@@Z ; f3d_vertex_unlock
PUBLIC	?f3d_vertex_optimize@@YGXPAUIDirect3DVertexBuffer7@@@Z ; f3d_vertex_optimize
PUBLIC	?f3d_draw_vb@@YGXIPAUIDirect3DVertexBuffer7@@IIPAGI@Z ; f3d_draw_vb
PUBLIC	?f3d_draw@@YGXIPAUIDirect3DVertexBuffer7@@II@Z	; f3d_draw
PUBLIC	?f3d_zbuffer_clear@@YGXM@Z			; f3d_zbuffer_clear
PUBLIC	?f3d_render_state@@YGXII@Z			; f3d_render_state
PUBLIC	?f3d_set_texture_state@@YGXIII@Z		; f3d_set_texture_state
PUBLIC	?f3d_set_texture@@YGXIPAUSCREEN@@@Z		; f3d_set_texture
PUBLIC	?f3d_set_material@@YGXPAU_D3DMATERIAL7@@@Z	; f3d_set_material
PUBLIC	?f3d_scene_begin@@YGHXZ				; f3d_scene_begin
PUBLIC	?f3d_scene_end@@YGHXZ				; f3d_scene_end
PUBLIC	?f3d_palette_create@@YGXPAUtagPALETTEENTRY@@PAPAUIDirectDrawPalette@@@Z ; f3d_palette_create
PUBLIC	?f3d_palette_release@@YGXPAPAUIDirectDrawPalette@@@Z ; f3d_palette_release
PUBLIC	?f3d_surface_create@@YGHPAU_DDSURFACEDESC2@@PAPAUIDirectDrawSurface7@@@Z ; f3d_surface_create
PUBLIC	?f3d_surface_release@@YGXPAPAUIDirectDrawSurface7@@@Z ; f3d_surface_release
PUBLIC	?f3d_surface_description@@YGXPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z ; f3d_surface_description
PUBLIC	?f3d_surface_front@@YGPAUIDirectDrawSurface7@@XZ ; f3d_surface_front
PUBLIC	?f3d_surface_render@@YGPAUIDirectDrawSurface7@@XZ ; f3d_surface_render
PUBLIC	?f3d_surface_palette@@YGXPAUIDirectDrawSurface7@@PAUIDirectDrawPalette@@@Z ; f3d_surface_palette
PUBLIC	?f3d_surface_blt@@YGXPAUIDirectDrawSurface7@@PAUtagRECT@@01IPAU_DDBLTFX@@@Z ; f3d_surface_blt
PUBLIC	?f3d_clear_zbuffer@@YGXXZ			; f3d_clear_zbuffer
PUBLIC	?f3d_clear_screen@@YGXXZ			; f3d_clear_screen
PUBLIC	?f3d_set_3d_render_target@@YGHPAUSCREEN@@@Z	; f3d_set_3d_render_target
PUBLIC	?f3d_enumerate_formats@@YGHP6GJPAU_DDPIXELFORMAT@@PAX@Z1@Z ; f3d_enumerate_formats
PUBLIC	?f3d_evict_textures@@YGXXZ			; f3d_evict_textures
PUBLIC	?f3d_texture_lock@@YGHPAUSCREEN@@H@Z		; f3d_texture_lock
PUBLIC	?f3d_texture_unlock@@YGHPAUSCREEN@@@Z		; f3d_texture_unlock
PUBLIC	?f3d_texture_create@@YGXPAUSCREEN@@HHIHH@Z	; f3d_texture_create
PUBLIC	?f3d_texture_release@@YGHPAUSCREEN@@@Z		; f3d_texture_release
PUBLIC	?f3d_texture_restore@@YGXPAUSCREEN@@@Z		; f3d_texture_restore
PUBLIC	?f3d_memory@@YGXPAK0@Z				; f3d_memory
PUBLIC	?f3d_pixel_size@@YGIXZ				; f3d_pixel_size
PUBLIC	?f3d_test_video_resolution@@YGHHHH@Z		; f3d_test_video_resolution
PUBLIC	?f3d_enum_devices@@YGHPAUIDirectDraw7@@P6GJPAD1PAU_D3DDeviceDesc7@@PAX@Z3@Z ; f3d_enum_devices
PUBLIC	?f3d_context_set@@YGXXZ				; f3d_context_set
PUBLIC	?f3d_context_leave@@YGXXZ			; f3d_context_leave
PUBLIC	??_C@_0BI@JFKINAMK@Unable?5to?5set?5light?3?5?$CFs@ ; `string'
PUBLIC	??_C@_02LFNMGJAP@en@				; `string'
PUBLIC	??_C@_03CJOLJKCN@dis@				; `string'
PUBLIC	??_C@_0BL@FFOHIKHH@Unable?5to?5?$CFsable?5light?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0BO@LLLMLGK@Unable?5to?5set?5?$CFu?5transfom?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0BM@FBADHJLL@Unable?5to?5set?5viewport7?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0CD@EANIFNAM@Unable?5to?5create?5vertex?5buffer?3@ ; `string'
PUBLIC	??_C@_0CM@NEDFFLFB@Unable?5to?5release?5primary?5verte@ ; `string'
PUBLIC	??_C@_0CF@BPGGPPID@Unable?5to?5optimize?5vertex?5buffe@ ; `string'
PUBLIC	??_C@_0CB@HGEFGOOK@Unable?5to?5lock?5vertex?5buffer?3?5?$CF@ ; `string'
PUBLIC	??_C@_0BN@GONAICMB@Unable?5to?5lock?5vertex?5buffer@ ; `string'
PUBLIC	??_C@_0CH@PNAKMJIC@Unable?5to?5unlock?5hardware?5verti@ ; `string'
PUBLIC	??_C@_0CF@NBIHNKFA@Unable?5to?5draw?5indexed?5primitiv@ ; `string'
PUBLIC	??_C@_0BN@MGEHMABO@Unable?5to?5draw?5primitive?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0BM@ILIHOOND@Unable?5to?5clear?5zbuffer?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0BO@DOLGOCPH@Unable?5to?5set?5renderstate?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0BK@MONOLEAD@Unable?5to?5set?5texture?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0BL@HBKAOIDJ@Unable?5to?5set?5material?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0BN@NACLLPFH@Unable?5to?5start?53d?5scene?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0BH@CIENOBJL@Unable?5to?5EndScene?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0CH@BGEOMMPH@Unable?5to?5create?5a?5texture?5pale@ ; `string'
PUBLIC	??_C@_0BO@KKFKCIOC@Unable?5to?5release?5palette?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0CF@CNFGHKEF@Unable?5to?5create?5texture?5surfac@ ; `string'
PUBLIC	??_C@_0CO@IJHOPHMD@Unable?5to?5get?5texture?5surface?5d@ ; `string'
PUBLIC	??_C@_0CF@DKLIBHBL@Unable?5to?5set?5palette?5on?5textur@ ; `string'
PUBLIC	??_C@_0BC@NJBPAFOI@Unable?5to?5blt?3?5?$CFs@	; `string'
PUBLIC	??_C@_0CN@EGEKECGH@Unable?5to?5release?5texture?5surfa@ ; `string'
PUBLIC	??_C@_0DC@JPDOJMOJ@Unable?5to?5release?5texture?5surfa@ ; `string'
PUBLIC	?__LINE__Var@?0??f3d_clear_screen@@YGXXZ@4JA	; `f3d_clear_screen'::`1'::__LINE__Var
PUBLIC	??_C@_0DB@BGFMAPFG@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0O@IILHNAKB@active_screen@		; `string'
PUBLIC	??_C@_0BH@KDDFKJCN@active_screen?9?$DOsurface@	; `string'
PUBLIC	??_C@_0CG@BIILOKFM@Unable?5to?5blt?5during?5clear?5scre@ ; `string'
PUBLIC	??_C@_0DA@IBGJJLPE@Unable?5to?5set?5render?5target?5to?5@ ; `string'
PUBLIC	??_C@_0DC@LLFJFPKA@Unable?5to?5set?5render?5target?5to?5@ ; `string'
PUBLIC	??_C@_0CM@GKJPIJNA@Error?5during?5texture?5format?5enu@ ; `string'
PUBLIC	??_C@_0CF@ODCOINGE@Unable?5to?5evict?5managed?5texture@ ; `string'
PUBLIC	??_C@_0DA@BMGEHPGF@Unable?5to?5create?5texture?5surfac@ ; `string'
PUBLIC	??_C@_0DH@OOMGDHGM@Unable?5to?5create?5texture?5render@ ; `string'
PUBLIC	??_C@_0CF@EHFJKAKG@Unable?5to?5create?5Zbuffer?5surfac@ ; `string'
PUBLIC	??_C@_0CF@NNACDDNH@Unable?5to?5attach?5Zbuffer?5surfac@ ; `string'
PUBLIC	?__LINE__Var@?0??f3d_texture_release@@YGHPAUSCREEN@@@Z@4JA ; `f3d_texture_release'::`1'::__LINE__Var
PUBLIC	??_C@_07JDHEGGGP@texture@			; `string'
PUBLIC	??_C@_0BJ@LJJGNNLB@texture?9?$DOzbuffer_surface@ ; `string'
PUBLIC	??_C@_0CA@CHJIGFPI@texture?9?$DOrender_texture_surface@ ; `string'
PUBLIC	??_C@_0BN@HOCHGDAK@Unable?5to?5detach?5zbuffer?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0CF@BJKJEMPN@Unable?5to?5release?5render?5surfac@ ; `string'
PUBLIC	??_C@_0CG@LGJEMGPG@Unable?5to?5release?5zbuffer?5surfa@ ; `string'
PUBLIC	?__LINE__Var@?0??f3d_texture_lock@@YGHPAUSCREEN@@H@Z@4JA ; `f3d_texture_lock'::`1'::__LINE__Var
PUBLIC	??_C@_0M@NIEKCLKH@ddraw?4ddraw@			; `string'
PUBLIC	??_C@_0BB@FHENNJJJ@texture?9?$DOsurface@	; `string'
PUBLIC	??_C@_0BB@EAJMPPNM@?$CBtexture?9?$DOlocked@	; `string'
PUBLIC	??_C@_0CD@BBPGGOEM@Failed?5to?5get?5attached?5surface?3@ ; `string'
PUBLIC	??_C@_0CG@LCCJOBAE@Failed?5to?5get?5surface?5descripti@ ; `string'
PUBLIC	??_C@_0CN@EFDLDEMB@Failed?5to?5find?5mipmap?5?$CFd?0?5from?5@ ; `string'
PUBLIC	??_C@_0DB@CPFAPDFE@Failed?5to?5get?5surface?5descripti@ ; `string'
PUBLIC	??_C@_0BL@GBBNOCCG@failed?5to?5lock?5texture?3?5?$CFs@ ; `string'
PUBLIC	?__LINE__Var@?0??f3d_texture_unlock@@YGHPAUSCREEN@@@Z@4JA ; `f3d_texture_unlock'::`1'::__LINE__Var
PUBLIC	??_C@_0BI@PNFCHFGI@texture?9?$DOsurface_locked@	; `string'
PUBLIC	??_C@_0BA@MMMNLMIN@texture?9?$DOlocked@		; `string'
PUBLIC	??_C@_0O@KEPEOLAA@texture?9?$DOdata@		; `string'
PUBLIC	??_C@_0BN@BDKOCPNE@Unable?5to?5unlock?5texture?3?5?$CFs@ ; `string'
PUBLIC	?__LINE__Var@?0??f3d_pixel_size@@YGIXZ@4JA	; `f3d_pixel_size'::`1'::__LINE__Var
PUBLIC	??_C@_0BF@BMEHOGMH@ddraw?4lpRenderBuffer@	; `string'
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?get_ddraw_error_message@@YGPBDJ@Z:PROC		; get_ddraw_error_message
EXTRN	?get_ddraw_zbuffer_pixel_format@@YGXPAU_DDPIXELFORMAT@@@Z:PROC ; get_ddraw_zbuffer_pixel_format
EXTRN	?recreate_d3d@@YGXXZ:PROC			; recreate_d3d
EXTRN	?get_d3d_error_message@@YGPBDJ@Z:PROC		; get_d3d_error_message
EXTRN	_IID_IDirect3D7:BYTE
EXTRN	?application_video_colourdepth@@3HA:DWORD	; application_video_colourdepth
EXTRN	?ddraw@@3Udirect_draw_data@@A:BYTE		; ddraw
EXTRN	?zbuffer_target_surface@@3PAUIDirectDrawSurface7@@A:DWORD ; zbuffer_target_surface
EXTRN	?d3d_data@@3UDIRECT_3D_DATA@@A:BYTE		; d3d_data
EXTRN	?d3d_use_rgb_device@@3HA:DWORD			; d3d_use_rgb_device
EXTRN	?d3d_mipmap_textures@@3HA:DWORD			; d3d_mipmap_textures
EXTRN	?video_screen@@3PAUSCREEN@@A:DWORD		; video_screen
EXTRN	?active_screen@@3PAUSCREEN@@A:DWORD		; active_screen
EXTRN	?texture_formats@@3PAUTEXTURE_FORMAT@@A:BYTE	; texture_formats
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_0BF@BMEHOGMH@ddraw?4lpRenderBuffer@
CONST	SEGMENT
??_C@_0BF@BMEHOGMH@ddraw?4lpRenderBuffer@ DB 'ddraw.lpRenderBuffer', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??f3d_pixel_size@@YGIXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??f3d_pixel_size@@YGIXZ@4JA DD 038eH	; `f3d_pixel_size'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BN@BDKOCPNE@Unable?5to?5unlock?5texture?3?5?$CFs@
CONST	SEGMENT
??_C@_0BN@BDKOCPNE@Unable?5to?5unlock?5texture?3?5?$CFs@ DB 'Unable to un'
	DB	'lock texture: %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KEPEOLAA@texture?9?$DOdata@
CONST	SEGMENT
??_C@_0O@KEPEOLAA@texture?9?$DOdata@ DB 'texture->data', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MMMNLMIN@texture?9?$DOlocked@
CONST	SEGMENT
??_C@_0BA@MMMNLMIN@texture?9?$DOlocked@ DB 'texture->locked', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PNFCHFGI@texture?9?$DOsurface_locked@
CONST	SEGMENT
??_C@_0BI@PNFCHFGI@texture?9?$DOsurface_locked@ DB 'texture->surface_lock'
	DB	'ed', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??f3d_texture_unlock@@YGHPAUSCREEN@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??f3d_texture_unlock@@YGHPAUSCREEN@@@Z@4JA DD 035bH ; `f3d_texture_unlock'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BL@GBBNOCCG@failed?5to?5lock?5texture?3?5?$CFs@
CONST	SEGMENT
??_C@_0BL@GBBNOCCG@failed?5to?5lock?5texture?3?5?$CFs@ DB 'failed to lock'
	DB	' texture: %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@CPFAPDFE@Failed?5to?5get?5surface?5descripti@
CONST	SEGMENT
??_C@_0DB@CPFAPDFE@Failed?5to?5get?5surface?5descripti@ DB 'Failed to get'
	DB	' surface description of texture: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@EFDLDEMB@Failed?5to?5find?5mipmap?5?$CFd?0?5from?5@
CONST	SEGMENT
??_C@_0CN@EFDLDEMB@Failed?5to?5find?5mipmap?5?$CFd?0?5from?5@ DB 'Failed '
	DB	'to find mipmap %d, from %d levels: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@LCCJOBAE@Failed?5to?5get?5surface?5descripti@
CONST	SEGMENT
??_C@_0CG@LCCJOBAE@Failed?5to?5get?5surface?5descripti@ DB 'Failed to get'
	DB	' surface description: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@BBPGGOEM@Failed?5to?5get?5attached?5surface?3@
CONST	SEGMENT
??_C@_0CD@BBPGGOEM@Failed?5to?5get?5attached?5surface?3@ DB 'Failed to ge'
	DB	't attached surface: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EAJMPPNM@?$CBtexture?9?$DOlocked@
CONST	SEGMENT
??_C@_0BB@EAJMPPNM@?$CBtexture?9?$DOlocked@ DB '!texture->locked', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FHENNJJJ@texture?9?$DOsurface@
CONST	SEGMENT
??_C@_0BB@FHENNJJJ@texture?9?$DOsurface@ DB 'texture->surface', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NIEKCLKH@ddraw?4ddraw@
CONST	SEGMENT
??_C@_0M@NIEKCLKH@ddraw?4ddraw@ DB 'ddraw.ddraw', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??f3d_texture_lock@@YGHPAUSCREEN@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??f3d_texture_lock@@YGHPAUSCREEN@@H@Z@4JA DD 02f7H ; `f3d_texture_lock'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CG@LGJEMGPG@Unable?5to?5release?5zbuffer?5surfa@
CONST	SEGMENT
??_C@_0CG@LGJEMGPG@Unable?5to?5release?5zbuffer?5surfa@ DB 'Unable to rel'
	DB	'ease zbuffer surface: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BJKJEMPN@Unable?5to?5release?5render?5surfac@
CONST	SEGMENT
??_C@_0CF@BJKJEMPN@Unable?5to?5release?5render?5surfac@ DB 'Unable to rel'
	DB	'ease render surface: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HOCHGDAK@Unable?5to?5detach?5zbuffer?3?5?$CFs@
CONST	SEGMENT
??_C@_0BN@HOCHGDAK@Unable?5to?5detach?5zbuffer?3?5?$CFs@ DB 'Unable to de'
	DB	'tach zbuffer: %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CHJIGFPI@texture?9?$DOrender_texture_surface@
CONST	SEGMENT
??_C@_0CA@CHJIGFPI@texture?9?$DOrender_texture_surface@ DB 'texture->rend'
	DB	'er_texture_surface', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LJJGNNLB@texture?9?$DOzbuffer_surface@
CONST	SEGMENT
??_C@_0BJ@LJJGNNLB@texture?9?$DOzbuffer_surface@ DB 'texture->zbuffer_sur'
	DB	'face', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_07JDHEGGGP@texture@
CONST	SEGMENT
??_C@_07JDHEGGGP@texture@ DB 'texture', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??f3d_texture_release@@YGHPAUSCREEN@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??f3d_texture_release@@YGHPAUSCREEN@@@Z@4JA DD 0284H ; `f3d_texture_release'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CF@NNACDDNH@Unable?5to?5attach?5Zbuffer?5surfac@
CONST	SEGMENT
??_C@_0CF@NNACDDNH@Unable?5to?5attach?5Zbuffer?5surfac@ DB 'Unable to att'
	DB	'ach Zbuffer surface: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@EHFJKAKG@Unable?5to?5create?5Zbuffer?5surfac@
CONST	SEGMENT
??_C@_0CF@EHFJKAKG@Unable?5to?5create?5Zbuffer?5surfac@ DB 'Unable to cre'
	DB	'ate Zbuffer surface: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@OOMGDHGM@Unable?5to?5create?5texture?5render@
CONST	SEGMENT
??_C@_0DH@OOMGDHGM@Unable?5to?5create?5texture?5render@ DB 'Unable to cre'
	DB	'ate texture render surface: %s ( %d, %d )', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@BMGEHPGF@Unable?5to?5create?5texture?5surfac@
CONST	SEGMENT
??_C@_0DA@BMGEHPGF@Unable?5to?5create?5texture?5surfac@ DB 'Unable to cre'
	DB	'ate texture surface: %s ( %d, %d )', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@ODCOINGE@Unable?5to?5evict?5managed?5texture@
CONST	SEGMENT
??_C@_0CF@ODCOINGE@Unable?5to?5evict?5managed?5texture@ DB 'Unable to evi'
	DB	'ct managed textures: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@GKJPIJNA@Error?5during?5texture?5format?5enu@
CONST	SEGMENT
??_C@_0CM@GKJPIJNA@Error?5during?5texture?5format?5enu@ DB 'Error during '
	DB	'texture format enumeration: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@LLFJFPKA@Unable?5to?5set?5render?5target?5to?5@
CONST	SEGMENT
??_C@_0DC@LLFJFPKA@Unable?5to?5set?5render?5target?5to?5@ DB 'Unable to s'
	DB	'et render target to texture screen: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@IBGJJLPE@Unable?5to?5set?5render?5target?5to?5@
CONST	SEGMENT
??_C@_0DA@IBGJJLPE@Unable?5to?5set?5render?5target?5to?5@ DB 'Unable to s'
	DB	'et render target to video screen: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@BIILOKFM@Unable?5to?5blt?5during?5clear?5scre@
CONST	SEGMENT
??_C@_0CG@BIILOKFM@Unable?5to?5blt?5during?5clear?5scre@ DB 'Unable to bl'
	DB	't during clear screen: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KDDFKJCN@active_screen?9?$DOsurface@
CONST	SEGMENT
??_C@_0BH@KDDFKJCN@active_screen?9?$DOsurface@ DB 'active_screen->surface'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IILHNAKB@active_screen@
CONST	SEGMENT
??_C@_0O@IILHNAKB@active_screen@ DB 'active_screen', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@BGFMAPFG@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DB@BGFMAPFG@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\3d\3dfunc.c', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??f3d_clear_screen@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??f3d_clear_screen@@YGXXZ@4JA DD 01aeH	; `f3d_clear_screen'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DC@JPDOJMOJ@Unable?5to?5release?5texture?5surfa@
CONST	SEGMENT
??_C@_0DC@JPDOJMOJ@Unable?5to?5release?5texture?5surfa@ DB 'Unable to rel'
	DB	'ease texture surface, references: %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@EGEKECGH@Unable?5to?5release?5texture?5surfa@
CONST	SEGMENT
??_C@_0CN@EGEKECGH@Unable?5to?5release?5texture?5surfa@ DB 'Unable to rel'
	DB	'ease texture surface ( %d ): %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NJBPAFOI@Unable?5to?5blt?3?5?$CFs@
CONST	SEGMENT
??_C@_0BC@NJBPAFOI@Unable?5to?5blt?3?5?$CFs@ DB 'Unable to blt: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DKLIBHBL@Unable?5to?5set?5palette?5on?5textur@
CONST	SEGMENT
??_C@_0CF@DKLIBHBL@Unable?5to?5set?5palette?5on?5textur@ DB 'Unable to se'
	DB	't palette on texture: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@IJHOPHMD@Unable?5to?5get?5texture?5surface?5d@
CONST	SEGMENT
??_C@_0CO@IJHOPHMD@Unable?5to?5get?5texture?5surface?5d@ DB 'Unable to ge'
	DB	't texture surface description: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@CNFGHKEF@Unable?5to?5create?5texture?5surfac@
CONST	SEGMENT
??_C@_0CF@CNFGHKEF@Unable?5to?5create?5texture?5surfac@ DB 'Unable to cre'
	DB	'ate texture surface: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KKFKCIOC@Unable?5to?5release?5palette?3?5?$CFs@
CONST	SEGMENT
??_C@_0BO@KKFKCIOC@Unable?5to?5release?5palette?3?5?$CFs@ DB 'Unable to r'
	DB	'elease palette: %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@BGEOMMPH@Unable?5to?5create?5a?5texture?5pale@
CONST	SEGMENT
??_C@_0CH@BGEOMMPH@Unable?5to?5create?5a?5texture?5pale@ DB 'Unable to cr'
	DB	'eate a texture palette: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CIENOBJL@Unable?5to?5EndScene?3?5?$CFs@
CONST	SEGMENT
??_C@_0BH@CIENOBJL@Unable?5to?5EndScene?3?5?$CFs@ DB 'Unable to EndScene:'
	DB	' %s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NACLLPFH@Unable?5to?5start?53d?5scene?3?5?$CFs@
CONST	SEGMENT
??_C@_0BN@NACLLPFH@Unable?5to?5start?53d?5scene?3?5?$CFs@ DB 'Unable to s'
	DB	'tart 3d scene: %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HBKAOIDJ@Unable?5to?5set?5material?3?5?$CFs@
CONST	SEGMENT
??_C@_0BL@HBKAOIDJ@Unable?5to?5set?5material?3?5?$CFs@ DB 'Unable to set '
	DB	'material: %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MONOLEAD@Unable?5to?5set?5texture?3?5?$CFs@
CONST	SEGMENT
??_C@_0BK@MONOLEAD@Unable?5to?5set?5texture?3?5?$CFs@ DB 'Unable to set t'
	DB	'exture: %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DOLGOCPH@Unable?5to?5set?5renderstate?3?5?$CFs@
CONST	SEGMENT
??_C@_0BO@DOLGOCPH@Unable?5to?5set?5renderstate?3?5?$CFs@ DB 'Unable to s'
	DB	'et renderstate: %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@ILIHOOND@Unable?5to?5clear?5zbuffer?3?5?$CFs@
CONST	SEGMENT
??_C@_0BM@ILIHOOND@Unable?5to?5clear?5zbuffer?3?5?$CFs@ DB 'Unable to cle'
	DB	'ar zbuffer: %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MGEHMABO@Unable?5to?5draw?5primitive?3?5?$CFs@
CONST	SEGMENT
??_C@_0BN@MGEHMABO@Unable?5to?5draw?5primitive?3?5?$CFs@ DB 'Unable to dr'
	DB	'aw primitive: %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@NBIHNKFA@Unable?5to?5draw?5indexed?5primitiv@
CONST	SEGMENT
??_C@_0CF@NBIHNKFA@Unable?5to?5draw?5indexed?5primitiv@ DB 'Unable to dra'
	DB	'w indexed primitive: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@PNAKMJIC@Unable?5to?5unlock?5hardware?5verti@
CONST	SEGMENT
??_C@_0CH@PNAKMJIC@Unable?5to?5unlock?5hardware?5verti@ DB 'Unable to unl'
	DB	'ock hardware vertices: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GONAICMB@Unable?5to?5lock?5vertex?5buffer@
CONST	SEGMENT
??_C@_0BN@GONAICMB@Unable?5to?5lock?5vertex?5buffer@ DB 'Unable to lock v'
	DB	'ertex buffer', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@HGEFGOOK@Unable?5to?5lock?5vertex?5buffer?3?5?$CF@
CONST	SEGMENT
??_C@_0CB@HGEFGOOK@Unable?5to?5lock?5vertex?5buffer?3?5?$CF@ DB 'Unable t'
	DB	'o lock vertex buffer: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BPGGPPID@Unable?5to?5optimize?5vertex?5buffe@
CONST	SEGMENT
??_C@_0CF@BPGGPPID@Unable?5to?5optimize?5vertex?5buffe@ DB 'Unable to opt'
	DB	'imize vertex buffer: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@NEDFFLFB@Unable?5to?5release?5primary?5verte@
CONST	SEGMENT
??_C@_0CM@NEDFFLFB@Unable?5to?5release?5primary?5verte@ DB 'Unable to rel'
	DB	'ease primary vertex buffer: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@EANIFNAM@Unable?5to?5create?5vertex?5buffer?3@
CONST	SEGMENT
??_C@_0CD@EANIFNAM@Unable?5to?5create?5vertex?5buffer?3@ DB 'Unable to cr'
	DB	'eate vertex buffer: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FBADHJLL@Unable?5to?5set?5viewport7?3?5?$CFs@
CONST	SEGMENT
??_C@_0BM@FBADHJLL@Unable?5to?5set?5viewport7?3?5?$CFs@ DB 'Unable to set'
	DB	' viewport7: %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LLLMLGK@Unable?5to?5set?5?$CFu?5transfom?3?5?$CFs@
CONST	SEGMENT
??_C@_0BO@LLLMLGK@Unable?5to?5set?5?$CFu?5transfom?3?5?$CFs@ DB 'Unable t'
	DB	'o set %u transfom: %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FFOHIKHH@Unable?5to?5?$CFsable?5light?3?5?$CFs@
CONST	SEGMENT
??_C@_0BL@FFOHIKHH@Unable?5to?5?$CFsable?5light?3?5?$CFs@ DB 'Unable to %'
	DB	'sable light: %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CJOLJKCN@dis@
CONST	SEGMENT
??_C@_03CJOLJKCN@dis@ DB 'dis', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LFNMGJAP@en@
CONST	SEGMENT
??_C@_02LFNMGJAP@en@ DB 'en', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JFKINAMK@Unable?5to?5set?5light?3?5?$CFs@
CONST	SEGMENT
??_C@_0BI@JFKINAMK@Unable?5to?5set?5light?3?5?$CFs@ DB 'Unable to set lig'
	DB	'ht: %s', 00H				; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_context_leave@@YGXXZ
_TEXT	SEGMENT
?f3d_context_leave@@YGXXZ PROC				; f3d_context_leave, COMDAT

; 1158 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1159 : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?f3d_context_leave@@YGXXZ ENDP				; f3d_context_leave
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_context_set@@YGXXZ
_TEXT	SEGMENT
?f3d_context_set@@YGXXZ PROC				; f3d_context_set, COMDAT

; 1154 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1155 : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?f3d_context_set@@YGXXZ ENDP				; f3d_context_set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_enum_devices@@YGHPAUIDirectDraw7@@P6GJPAD1PAU_D3DDeviceDesc7@@PAX@Z3@Z
_TEXT	SEGMENT
_lpD3D$ = -8						; size = 4
_d3drval$ = -4						; size = 4
_ddraw$ = 8						; size = 4
_enumerate_devices$ = 12				; size = 4
_arg$ = 16						; size = 4
?f3d_enum_devices@@YGHPAUIDirectDraw7@@P6GJPAD1PAU_D3DDeviceDesc7@@PAX@Z3@Z PROC ; f3d_enum_devices, COMDAT

; 1137 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1138 : 	HRESULT
; 1139 : 		d3drval;
; 1140 : 	LPDIRECT3DX
; 1141 : 		lpD3D;
; 1142 : 
; 1143 : 	d3drval = IDirectDraw7_QueryInterface ( ddraw, GUID_PREFIX IID_IDirect3D7, ( LPVOID FAR * ) &lpD3D );

  00009	8d 45 f8	 lea	 eax, DWORD PTR _lpD3D$[ebp]
  0000c	50		 push	 eax
  0000d	68 00 00 00 00	 push	 OFFSET _IID_IDirect3D7
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _ddraw$[ebp]
  00015	8b 11		 mov	 edx, DWORD PTR [ecx]
  00017	8b 45 08	 mov	 eax, DWORD PTR _ddraw$[ebp]
  0001a	50		 push	 eax
  0001b	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0001d	ff d1		 call	 ecx
  0001f	89 45 fc	 mov	 DWORD PTR _d3drval$[ebp], eax

; 1144 : 	if ( d3drval != DD_OK )

  00022	83 7d fc 00	 cmp	 DWORD PTR _d3drval$[ebp], 0
  00026	74 04		 je	 SHORT $LN2@f3d_enum_d

; 1145 : 	{
; 1146 : 		return FALSE;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 29		 jmp	 SHORT $LN1@f3d_enum_d
$LN2@f3d_enum_d:

; 1147 : 	}
; 1148 : 	IDirect3D7_EnumDevices ( lpD3D, enumerate_devices, arg );

  0002c	8b 45 10	 mov	 eax, DWORD PTR _arg$[ebp]
  0002f	50		 push	 eax
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _enumerate_devices$[ebp]
  00033	51		 push	 ecx
  00034	8b 55 f8	 mov	 edx, DWORD PTR _lpD3D$[ebp]
  00037	8b 02		 mov	 eax, DWORD PTR [edx]
  00039	8b 4d f8	 mov	 ecx, DWORD PTR _lpD3D$[ebp]
  0003c	51		 push	 ecx
  0003d	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00040	ff d2		 call	 edx

; 1149 : 	IDirect3D7_Release ( lpD3D );

  00042	8b 45 f8	 mov	 eax, DWORD PTR _lpD3D$[ebp]
  00045	8b 08		 mov	 ecx, DWORD PTR [eax]
  00047	8b 55 f8	 mov	 edx, DWORD PTR _lpD3D$[ebp]
  0004a	52		 push	 edx
  0004b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0004e	ff d0		 call	 eax

; 1150 : 	return TRUE;

  00050	b8 01 00 00 00	 mov	 eax, 1
$LN1@f3d_enum_d:

; 1151 : }

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 0c 00	 ret	 12			; 0000000cH
?f3d_enum_devices@@YGHPAUIDirectDraw7@@P6GJPAD1PAU_D3DDeviceDesc7@@PAX@Z3@Z ENDP ; f3d_enum_devices
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_test_video_resolution@@YGHHHH@Z
_TEXT	SEGMENT
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_depth$ = 16						; size = 4
?f3d_test_video_resolution@@YGHHHH@Z PROC		; f3d_test_video_resolution, COMDAT

; 1131 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1132 : 	return TRUE;

  00009	b8 01 00 00 00	 mov	 eax, 1

; 1133 : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 0c 00	 ret	 12			; 0000000cH
?f3d_test_video_resolution@@YGHHHH@Z ENDP		; f3d_test_video_resolution
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_pixel_size@@YGIXZ
_TEXT	SEGMENT
_ddsd$ = -124						; size = 124
?f3d_pixel_size@@YGIXZ PROC				; f3d_pixel_size, COMDAT

; 910  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 911  : 	DDSURFACEDESC2
; 912  : 		ddsd;
; 913  : 
; 914  : 	ASSERT ( ddraw.lpRenderBuffer );

  0000c	83 3d 10 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16, 0
  00013	75 18		 jne	 SHORT $LN2@f3d_pixel_
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??f3d_pixel_size@@YGIXZ@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@BGFMAPFG@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@BMEHOGMH@ddraw?4lpRenderBuffer@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@f3d_pixel_:

; 915  : 
; 916  : 	ddsd.dwSize = sizeof ( ddsd );

  0002d	c7 45 84 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 917  : 
; 918  : 	IDirectDrawSurface7_GetSurfaceDesc ( ddraw.lpRenderBuffer, &ddsd );

  00034	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  00037	50		 push	 eax
  00038	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  00045	50		 push	 eax
  00046	8b 4a 58	 mov	 ecx, DWORD PTR [edx+88]
  00049	ff d1		 call	 ecx

; 919  : 
; 920  : 	return ddsd.ddpfPixelFormat.dwRGBBitCount;

  0004b	8b 45 d8	 mov	 eax, DWORD PTR _ddsd$[ebp+84]

; 921  : }

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
?f3d_pixel_size@@YGIXZ ENDP				; f3d_pixel_size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_memory@@YGXPAK0@Z
_TEXT	SEGMENT
_caps$ = -16						; size = 16
_total$ = 8						; size = 4
_free$ = 12						; size = 4
?f3d_memory@@YGXPAK0@Z PROC				; f3d_memory, COMDAT

; 898  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 899  : 	DDSCAPS2
; 900  : 		caps;
; 901  : 
; 902  : 	memset ( &caps, 0, sizeof ( caps ) );

  00009	6a 10		 push	 16			; 00000010H
  0000b	6a 00		 push	 0
  0000d	8d 45 f0	 lea	 eax, DWORD PTR _caps$[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 _memset
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH

; 903  : 
; 904  : 	caps.dwCaps = DDSCAPS_TEXTURE | DDSCAPS_VIDEOMEMORY | DDSCAPS_LOCALVIDMEM;

  00019	c7 45 f0 00 50
	00 10		 mov	 DWORD PTR _caps$[ebp], 268455936 ; 10005000H

; 905  : 
; 906  : 	IDirectDraw7_GetAvailableVidMem ( ddraw.ddraw, &caps, total, free );

  00020	8b 45 0c	 mov	 eax, DWORD PTR _free$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _total$[ebp]
  00027	51		 push	 ecx
  00028	8d 55 f0	 lea	 edx, DWORD PTR _caps$[ebp]
  0002b	52		 push	 edx
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00031	8b 08		 mov	 ecx, DWORD PTR [eax]
  00033	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00039	52		 push	 edx
  0003a	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  0003d	ff d0		 call	 eax

; 907  : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
?f3d_memory@@YGXPAK0@Z ENDP				; f3d_memory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_texture_restore@@YGXPAUSCREEN@@@Z
_TEXT	SEGMENT
tv175 = -196						; size = 4
tv148 = -196						; size = 4
_ddsd$ = -128						; size = 124
_ret$ = -4						; size = 4
_texture$ = 8						; size = 4
?f3d_texture_restore@@YGXPAUSCREEN@@@Z PROC		; f3d_texture_restore, COMDAT

; 696  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 697  : 	HRESULT
; 698  : 		ret;
; 699  : 	DDSURFACEDESC2
; 700  : 		ddsd;
; 701  : 
; 702  : 	if ( ( texture->render_texture_surface ) && ( texture->zbuffer_surface ) )

  0000c	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  0000f	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  00013	0f 84 4f 02 00
	00		 je	 $LN1@f3d_textur
  00019	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  0001c	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00020	0f 84 42 02 00
	00		 je	 $LN1@f3d_textur

; 703  : 	{
; 704  : 		//
; 705  : 		// Free up the surfaces
; 706  : 		//
; 707  : 		IDirectDrawSurface7_DeleteAttachedSurface ( texture->render_texture_surface, 0, NULL );

  00026	6a 00		 push	 0
  00028	6a 00		 push	 0
  0002a	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  0002d	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00030	8b 55 08	 mov	 edx, DWORD PTR _texture$[ebp]
  00033	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00036	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00038	50		 push	 eax
  00039	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0003c	ff d2		 call	 edx

; 708  : 		IDirectDrawSurface7_Release ( texture->render_texture_surface );

  0003e	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00041	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00044	8b 55 08	 mov	 edx, DWORD PTR _texture$[ebp]
  00047	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0004a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0004c	50		 push	 eax
  0004d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00050	ff d2		 call	 edx

; 709  : 		texture->render_texture_surface = NULL;

  00052	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00055	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 710  : 		IDirectDrawSurface7_Release ( texture->zbuffer_surface );

  0005c	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  0005f	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00062	8b 55 08	 mov	 edx, DWORD PTR _texture$[ebp]
  00065	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00068	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0006a	50		 push	 eax
  0006b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0006e	ff d2		 call	 edx

; 711  : 		texture->zbuffer_surface = NULL;

  00070	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00073	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 712  : 		//
; 713  : 		// Reallocate the surfaces
; 714  : 		//
; 715  : 		memset ( &ddsd, 0, sizeof ( ddsd ) );

  0007a	6a 7c		 push	 124			; 0000007cH
  0007c	6a 00		 push	 0
  0007e	8d 45 80	 lea	 eax, DWORD PTR _ddsd$[ebp]
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 _memset
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH

; 716  : 		ddsd.dwSize = sizeof ( ddsd );

  0008a	c7 45 80 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 717  : 		memcpy ( &ddsd.ddpfPixelFormat, &texture_formats[ texture->type ].format, sizeof ( DDPIXELFORMAT ) );

  00091	6a 20		 push	 32			; 00000020H
  00093	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00096	8b 08		 mov	 ecx, DWORD PTR [eax]
  00098	c1 e1 06	 shl	 ecx, 6
  0009b	81 c1 20 00 00
	00		 add	 ecx, OFFSET ?texture_formats@@3PAUTEXTURE_FORMAT@@A+32
  000a1	51		 push	 ecx
  000a2	8d 55 c8	 lea	 edx, DWORD PTR _ddsd$[ebp+72]
  000a5	52		 push	 edx
  000a6	e8 00 00 00 00	 call	 _memcpy
  000ab	83 c4 0c	 add	 esp, 12			; 0000000cH

; 718  : 		ddsd.dwSize = sizeof ( ddsd );

  000ae	c7 45 80 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 719  : 		ddsd.dwMipMapCount = 0;

  000b5	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp+24], 0

; 720  : 		ddsd.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH | DDSD_PIXELFORMAT;

  000bc	c7 45 84 07 10
	00 00		 mov	 DWORD PTR _ddsd$[ebp+4], 4103 ; 00001007H

; 721  : 		ddsd.ddsCaps.dwCaps = DDSCAPS_3DDEVICE;

  000c3	c7 45 e8 00 20
	00 00		 mov	 DWORD PTR _ddsd$[ebp+104], 8192 ; 00002000H

; 722  : 		ddsd.dwHeight = texture->height;

  000ca	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  000cd	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  000d1	89 4d 88	 mov	 DWORD PTR _ddsd$[ebp+8], ecx

; 723  : 		ddsd.dwWidth = texture->width;

  000d4	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  000d7	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  000db	89 4d 8c	 mov	 DWORD PTR _ddsd$[ebp+12], ecx

; 724  : 		ddsd.ddsCaps.dwCaps3 = 0;

  000de	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp+112], 0

; 725  : 		ddsd.ddsCaps.dwCaps4 = 0;

  000e5	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp+116], 0

; 726  : 		ddsd.ddsCaps.dwCaps2 = 0;

  000ec	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp+108], 0

; 727  : 		ddsd.ddsCaps.dwCaps |= ( d3d_use_rgb_device ) ? ( DDSCAPS_SYSTEMMEMORY ) : ( DDSCAPS_VIDEOMEMORY | DDSCAPS_LOCALVIDMEM );

  000f3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_use_rgb_device@@3HA, 0 ; d3d_use_rgb_device
  000fa	74 0c		 je	 SHORT $LN7@f3d_textur
  000fc	c7 85 3c ff ff
	ff 00 08 00 00	 mov	 DWORD PTR tv148[ebp], 2048 ; 00000800H
  00106	eb 0a		 jmp	 SHORT $LN8@f3d_textur
$LN7@f3d_textur:
  00108	c7 85 3c ff ff
	ff 00 40 00 10	 mov	 DWORD PTR tv148[ebp], 268451840 ; 10004000H
$LN8@f3d_textur:
  00112	8b 45 e8	 mov	 eax, DWORD PTR _ddsd$[ebp+104]
  00115	0b 85 3c ff ff
	ff		 or	 eax, DWORD PTR tv148[ebp]
  0011b	89 45 e8	 mov	 DWORD PTR _ddsd$[ebp+104], eax

; 728  : 		ret = IDirectDraw7_CreateSurface ( ddraw.ddraw, &ddsd, &texture->render_texture_surface, NULL );

  0011e	6a 00		 push	 0
  00120	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00123	83 c0 24	 add	 eax, 36			; 00000024H
  00126	50		 push	 eax
  00127	8d 4d 80	 lea	 ecx, DWORD PTR _ddsd$[ebp]
  0012a	51		 push	 ecx
  0012b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00131	8b 02		 mov	 eax, DWORD PTR [edx]
  00133	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00139	51		 push	 ecx
  0013a	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  0013d	ff d2		 call	 edx
  0013f	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 729  : 		if ( ret != DD_OK )

  00142	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00146	74 27		 je	 SHORT $LN3@f3d_textur

; 730  : 		{
; 731  : 			debug_fatal ( "Unable to create texture render surface: %s ( %d, %d )", get_ddraw_error_message ( ret ), texture->width, texture->height );

  00148	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  0014b	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0014f	51		 push	 ecx
  00150	8b 55 08	 mov	 edx, DWORD PTR _texture$[ebp]
  00153	0f b7 42 04	 movzx	 eax, WORD PTR [edx+4]
  00157	50		 push	 eax
  00158	8b 4d fc	 mov	 ecx, DWORD PTR _ret$[ebp]
  0015b	51		 push	 ecx
  0015c	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00161	50		 push	 eax
  00162	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@OOMGDHGM@Unable?5to?5create?5texture?5render@
  00167	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0016c	83 c4 10	 add	 esp, 16			; 00000010H
$LN3@f3d_textur:

; 732  : 		}
; 733  : 		memset ( &ddsd, 0, sizeof ( ddsd ) );

  0016f	6a 7c		 push	 124			; 0000007cH
  00171	6a 00		 push	 0
  00173	8d 45 80	 lea	 eax, DWORD PTR _ddsd$[ebp]
  00176	50		 push	 eax
  00177	e8 00 00 00 00	 call	 _memset
  0017c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 734  : 		ddsd.dwSize = sizeof ( ddsd );

  0017f	c7 45 80 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 735  : 		f3d_surface_description ( ddraw.lpFrontBuffer, &ddsd );

  00186	8d 45 80	 lea	 eax, DWORD PTR _ddsd$[ebp]
  00189	50		 push	 eax
  0018a	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  00190	51		 push	 ecx
  00191	e8 00 00 00 00	 call	 ?f3d_surface_description@@YGXPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z ; f3d_surface_description

; 736  : 		ddsd.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH | DDSD_PIXELFORMAT;

  00196	c7 45 84 07 10
	00 00		 mov	 DWORD PTR _ddsd$[ebp+4], 4103 ; 00001007H

; 737  : 		ddsd.ddsCaps.dwCaps = DDSCAPS_ZBUFFER;

  0019d	c7 45 e8 00 00
	02 00		 mov	 DWORD PTR _ddsd$[ebp+104], 131072 ; 00020000H

; 738  : 		ddsd.ddsCaps.dwCaps |= ( d3d_use_rgb_device ) ? ( DDSCAPS_SYSTEMMEMORY ) : ( DDSCAPS_VIDEOMEMORY );

  001a4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_use_rgb_device@@3HA, 0 ; d3d_use_rgb_device
  001ab	74 0c		 je	 SHORT $LN9@f3d_textur
  001ad	c7 85 3c ff ff
	ff 00 08 00 00	 mov	 DWORD PTR tv175[ebp], 2048 ; 00000800H
  001b7	eb 0a		 jmp	 SHORT $LN10@f3d_textur
$LN9@f3d_textur:
  001b9	c7 85 3c ff ff
	ff 00 40 00 00	 mov	 DWORD PTR tv175[ebp], 16384 ; 00004000H
$LN10@f3d_textur:
  001c3	8b 45 e8	 mov	 eax, DWORD PTR _ddsd$[ebp+104]
  001c6	0b 85 3c ff ff
	ff		 or	 eax, DWORD PTR tv175[ebp]
  001cc	89 45 e8	 mov	 DWORD PTR _ddsd$[ebp+104], eax

; 739  : 		ddsd.dwWidth = texture->width;

  001cf	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  001d2	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  001d6	89 4d 8c	 mov	 DWORD PTR _ddsd$[ebp+12], ecx

; 740  : 		ddsd.dwHeight = texture->height;

  001d9	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  001dc	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  001e0	89 4d 88	 mov	 DWORD PTR _ddsd$[ebp+8], ecx

; 741  : 		get_ddraw_zbuffer_pixel_format ( &ddsd.ddpfPixelFormat );

  001e3	8d 45 c8	 lea	 eax, DWORD PTR _ddsd$[ebp+72]
  001e6	50		 push	 eax
  001e7	e8 00 00 00 00	 call	 ?get_ddraw_zbuffer_pixel_format@@YGXPAU_DDPIXELFORMAT@@@Z ; get_ddraw_zbuffer_pixel_format

; 742  : //		ddsd.ddpfPixelFormat.dwSize = sizeof ( ddsd.ddpfPixelFormat );
; 743  : //		ddsd.ddpfPixelFormat.dwFlags = DDPF_ZBUFFER;
; 744  : //		ddsd.ddpfPixelFormat.dwZBufferBitDepth = 16;
; 745  : 		ret = IDirectDraw7_CreateSurface ( ddraw.ddraw, &ddsd, &texture->zbuffer_surface, NULL );

  001ec	6a 00		 push	 0
  001ee	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  001f1	83 c0 20	 add	 eax, 32			; 00000020H
  001f4	50		 push	 eax
  001f5	8d 4d 80	 lea	 ecx, DWORD PTR _ddsd$[ebp]
  001f8	51		 push	 ecx
  001f9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  001ff	8b 02		 mov	 eax, DWORD PTR [edx]
  00201	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00207	51		 push	 ecx
  00208	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  0020b	ff d2		 call	 edx
  0020d	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 746  : 		if ( ret != DD_OK )

  00210	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00214	74 17		 je	 SHORT $LN4@f3d_textur

; 747  : 		{
; 748  : 			debug_fatal ( "Unable to create Zbuffer surface: %s", get_ddraw_error_message ( ret ) );

  00216	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00219	50		 push	 eax
  0021a	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0021f	50		 push	 eax
  00220	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@EHFJKAKG@Unable?5to?5create?5Zbuffer?5surfac@
  00225	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0022a	83 c4 08	 add	 esp, 8
$LN4@f3d_textur:

; 749  : 		}
; 750  : 		ret = IDirectDrawSurface7_AddAttachedSurface ( texture->render_texture_surface, texture->zbuffer_surface );

  0022d	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00230	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00233	51		 push	 ecx
  00234	8b 55 08	 mov	 edx, DWORD PTR _texture$[ebp]
  00237	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0023a	8b 4d 08	 mov	 ecx, DWORD PTR _texture$[ebp]
  0023d	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00240	8b 00		 mov	 eax, DWORD PTR [eax]
  00242	52		 push	 edx
  00243	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00246	ff d1		 call	 ecx
  00248	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 751  : 		if ( ret != DD_OK )

  0024b	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  0024f	74 17		 je	 SHORT $LN1@f3d_textur

; 752  : 		{
; 753  : 			debug_fatal ( "Unable to attach Zbuffer surface: %s", get_ddraw_error_message ( ret ) );

  00251	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00254	50		 push	 eax
  00255	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0025a	50		 push	 eax
  0025b	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@NNACDDNH@Unable?5to?5attach?5Zbuffer?5surfac@
  00260	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00265	83 c4 08	 add	 esp, 8
$LN1@f3d_textur:

; 754  : 		}
; 755  : 	}
; 756  : }

  00268	5f		 pop	 edi
  00269	5e		 pop	 esi
  0026a	5b		 pop	 ebx
  0026b	8b e5		 mov	 esp, ebp
  0026d	5d		 pop	 ebp
  0026e	c2 04 00	 ret	 4
?f3d_texture_restore@@YGXPAUSCREEN@@@Z ENDP		; f3d_texture_restore
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_texture_release@@YGHPAUSCREEN@@@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_texture$ = 8						; size = 4
?f3d_texture_release@@YGHPAUSCREEN@@@Z PROC		; f3d_texture_release, COMDAT

; 644  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 645  : 	HRESULT
; 646  : 		ret;
; 647  : 
; 648  : 	ASSERT ( texture );

  00009	83 7d 08 00	 cmp	 DWORD PTR _texture$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@f3d_textur
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??f3d_texture_release@@YGHPAUSCREEN@@@Z@4JA
  00014	83 c0 04	 add	 eax, 4
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@BGFMAPFG@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_07JDHEGGGP@texture@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@f3d_textur:

; 649  : 	//ASSERT ( texture->surface );
; 650  : 
; 651  : 	if ( texture->do_not_destroy )

  00027	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  0002a	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  0002e	66 c1 e9 06	 shr	 cx, 6
  00032	66 83 e1 01	 and	 cx, 1
  00036	0f b7 d1	 movzx	 edx, cx
  00039	85 d2		 test	 edx, edx
  0003b	74 0a		 je	 SHORT $LN3@f3d_textur

; 652  : 	{
; 653  : 		return TRUE;

  0003d	b8 01 00 00 00	 mov	 eax, 1
  00042	e9 59 01 00 00	 jmp	 $LN1@f3d_textur
$LN3@f3d_textur:

; 654  : 	}
; 655  : 
; 656  : 	if ( !texture->clone_screen )

  00047	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  0004a	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  0004e	66 c1 e9 03	 shr	 cx, 3
  00052	66 83 e1 01	 and	 cx, 1
  00056	0f b7 d1	 movzx	 edx, cx
  00059	85 d2		 test	 edx, edx
  0005b	75 16		 jne	 SHORT $LN4@f3d_textur

; 657  : 	{
; 658  : 		f3d_surface_release ( &texture->surface );

  0005d	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00060	83 c0 18	 add	 eax, 24			; 00000018H
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ?f3d_surface_release@@YGXPAPAUIDirectDrawSurface7@@@Z ; f3d_surface_release

; 659  : 		texture->palette = NULL;

  00069	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  0006c	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
$LN4@f3d_textur:

; 660  : 	}
; 661  : 
; 662  : 	if ( texture->usable_as_rendertarget )

  00073	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00076	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  0007a	66 c1 e9 05	 shr	 cx, 5
  0007e	66 83 e1 01	 and	 cx, 1
  00082	0f b7 d1	 movzx	 edx, cx
  00085	85 d2		 test	 edx, edx
  00087	0f 84 fb 00 00
	00		 je	 $LN5@f3d_textur

; 663  : 	{
; 664  : 		ASSERT ( texture->zbuffer_surface );

  0008d	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00090	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00094	75 18		 jne	 SHORT $LN6@f3d_textur
  00096	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??f3d_texture_release@@YGHPAUSCREEN@@@Z@4JA
  0009b	83 c0 14	 add	 eax, 20			; 00000014H
  0009e	50		 push	 eax
  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@BGFMAPFG@c?3?2users?2nhv90?2projects?2eech?2mo@
  000a4	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@LJJGNNLB@texture?9?$DOzbuffer_surface@
  000a9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@f3d_textur:

; 665  : 		ASSERT ( texture->render_texture_surface );

  000ae	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  000b1	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  000b5	75 18		 jne	 SHORT $LN7@f3d_textur
  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??f3d_texture_release@@YGHPAUSCREEN@@@Z@4JA
  000bc	83 c0 15	 add	 eax, 21			; 00000015H
  000bf	50		 push	 eax
  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@BGFMAPFG@c?3?2users?2nhv90?2projects?2eech?2mo@
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@CHJIGFPI@texture?9?$DOrender_texture_surface@
  000ca	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@f3d_textur:

; 666  : 
; 667  : 		ret = IDirectDrawSurface7_DeleteAttachedSurface ( texture->render_texture_surface, 0, texture->zbuffer_surface );

  000cf	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  000d2	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  000d5	51		 push	 ecx
  000d6	6a 00		 push	 0
  000d8	8b 55 08	 mov	 edx, DWORD PTR _texture$[ebp]
  000db	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000de	8b 4d 08	 mov	 ecx, DWORD PTR _texture$[ebp]
  000e1	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000e4	8b 00		 mov	 eax, DWORD PTR [eax]
  000e6	52		 push	 edx
  000e7	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  000ea	ff d1		 call	 ecx
  000ec	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 668  : 		if ( FAILED ( ret ) )

  000ef	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  000f3	7d 17		 jge	 SHORT $LN8@f3d_textur

; 669  : 		{
; 670  : 			debug_log ( "Unable to detach zbuffer: %s", get_ddraw_error_message ( ret ) );

  000f5	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  000fe	50		 push	 eax
  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@HOCHGDAK@Unable?5to?5detach?5zbuffer?3?5?$CFs@
  00104	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00109	83 c4 08	 add	 esp, 8
$LN8@f3d_textur:

; 671  : 		}
; 672  : 
; 673  : 		ret = IDirectDrawSurface7_Release ( texture->render_texture_surface );

  0010c	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  0010f	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00112	8b 55 08	 mov	 edx, DWORD PTR _texture$[ebp]
  00115	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00118	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0011a	50		 push	 eax
  0011b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0011e	ff d2		 call	 edx
  00120	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 674  : 		if ( FAILED ( ret ) )

  00123	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00127	7d 17		 jge	 SHORT $LN9@f3d_textur

; 675  : 		{
; 676  : 			debug_log ( "Unable to release render surface: %s", get_ddraw_error_message ( ret ) );

  00129	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  0012c	50		 push	 eax
  0012d	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00132	50		 push	 eax
  00133	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BJKJEMPN@Unable?5to?5release?5render?5surfac@
  00138	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0013d	83 c4 08	 add	 esp, 8
$LN9@f3d_textur:

; 677  : 		}
; 678  : 
; 679  : 		ret = IDirectDrawSurface7_Release ( texture->zbuffer_surface );

  00140	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00143	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00146	8b 55 08	 mov	 edx, DWORD PTR _texture$[ebp]
  00149	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0014c	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0014e	50		 push	 eax
  0014f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00152	ff d2		 call	 edx
  00154	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 680  : 		if ( FAILED ( ret ) )

  00157	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  0015b	7d 17		 jge	 SHORT $LN10@f3d_textur

; 681  : 		{
; 682  : 			debug_log ( "Unable to release zbuffer surface: %s", get_ddraw_error_message ( ret ) );

  0015d	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00160	50		 push	 eax
  00161	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00166	50		 push	 eax
  00167	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@LGJEMGPG@Unable?5to?5release?5zbuffer?5surfa@
  0016c	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00171	83 c4 08	 add	 esp, 8
$LN10@f3d_textur:

; 683  : 		}
; 684  : 
; 685  : 		texture->zbuffer_surface = NULL;

  00174	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00177	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 686  : 
; 687  : 		texture->render_texture_surface = NULL;

  0017e	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00181	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0
$LN5@f3d_textur:

; 688  : 	}
; 689  : 
; 690  : 	texture->used = FALSE;

  00188	b8 fd ff 00 00	 mov	 eax, 65533		; 0000fffdH
  0018d	8b 4d 08	 mov	 ecx, DWORD PTR _texture$[ebp]
  00190	66 23 41 0a	 and	 ax, WORD PTR [ecx+10]
  00194	8b 55 08	 mov	 edx, DWORD PTR _texture$[ebp]
  00197	66 89 42 0a	 mov	 WORD PTR [edx+10], ax

; 691  : 
; 692  : 	return ( TRUE );

  0019b	b8 01 00 00 00	 mov	 eax, 1
$LN1@f3d_textur:

; 693  : }

  001a0	5f		 pop	 edi
  001a1	5e		 pop	 esi
  001a2	5b		 pop	 ebx
  001a3	8b e5		 mov	 esp, ebp
  001a5	5d		 pop	 ebp
  001a6	c2 04 00	 ret	 4
?f3d_texture_release@@YGHPAUSCREEN@@@Z ENDP		; f3d_texture_release
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_texture_create@@YGXPAUSCREEN@@HHIHH@Z
_TEXT	SEGMENT
tv187 = -196						; size = 4
tv161 = -196						; size = 4
_ret$ = -128						; size = 4
_ddsd$ = -124						; size = 124
_texture$ = 8						; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_type$ = 20						; size = 4
_number_of_mipmaps$ = 24				; size = 4
_renderto$ = 28						; size = 4
?f3d_texture_create@@YGXPAUSCREEN@@HHIHH@Z PROC		; f3d_texture_create, COMDAT

; 522  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 523  : 	DDSURFACEDESC2
; 524  : 		ddsd;
; 525  : 	
; 526  : 	HRESULT
; 527  : 		ret;
; 528  : 
; 529  : 	memset ( &ddsd, 0, sizeof ( ddsd ) );

  0000c	6a 7c		 push	 124			; 0000007cH
  0000e	6a 00		 push	 0
  00010	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _memset
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 530  : 
; 531  : 	ddsd.dwSize = sizeof ( ddsd );

  0001c	c7 45 84 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 532  : 
; 533  : 	//
; 534  : 	// Allocate a d3d managed texture
; 535  : 	//
; 536  : 
; 537  : 	memcpy ( &ddsd.ddpfPixelFormat, &texture_formats[type].format, sizeof ( DDPIXELFORMAT ) );

  00023	6a 20		 push	 32			; 00000020H
  00025	8b 45 14	 mov	 eax, DWORD PTR _type$[ebp]
  00028	c1 e0 06	 shl	 eax, 6
  0002b	05 20 00 00 00	 add	 eax, OFFSET ?texture_formats@@3PAUTEXTURE_FORMAT@@A+32
  00030	50		 push	 eax
  00031	8d 4d cc	 lea	 ecx, DWORD PTR _ddsd$[ebp+72]
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 _memcpy
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 538  : 
; 539  : 	ddsd.dwMipMapCount = 0;

  0003d	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp+24], 0

; 540  : 	ddsd.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH | DDSD_PIXELFORMAT;

  00044	c7 45 88 07 10
	00 00		 mov	 DWORD PTR _ddsd$[ebp+4], 4103 ; 00001007H

; 541  : 	ddsd.ddsCaps.dwCaps = DDSCAPS_TEXTURE;

  0004b	c7 45 ec 00 10
	00 00		 mov	 DWORD PTR _ddsd$[ebp+104], 4096 ; 00001000H

; 542  : 	ddsd.dwHeight = height;

  00052	8b 45 10	 mov	 eax, DWORD PTR _height$[ebp]
  00055	89 45 8c	 mov	 DWORD PTR _ddsd$[ebp+8], eax

; 543  : 	ddsd.dwWidth = width;

  00058	8b 45 0c	 mov	 eax, DWORD PTR _width$[ebp]
  0005b	89 45 90	 mov	 DWORD PTR _ddsd$[ebp+12], eax

; 544  : 	ddsd.ddsCaps.dwCaps3 = 0;

  0005e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp+112], 0

; 545  : 	ddsd.ddsCaps.dwCaps4 = 0;

  00065	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp+116], 0

; 546  : 	ddsd.ddsCaps.dwCaps2 = DDSCAPS2_HINTDYNAMIC | DDSCAPS2_TEXTUREMANAGE;

  0006c	c7 45 f0 14 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp+108], 20 ; 00000014H

; 547  : 
; 548  : 	if ( ( d3d_mipmap_textures ) && ( number_of_mipmaps > 1 ) )

  00073	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_mipmap_textures@@3HA, 0 ; d3d_mipmap_textures
  0007a	74 22		 je	 SHORT $LN2@f3d_textur
  0007c	83 7d 18 01	 cmp	 DWORD PTR _number_of_mipmaps$[ebp], 1
  00080	7e 1c		 jle	 SHORT $LN2@f3d_textur

; 549  : 	{
; 550  : 		
; 551  : 		ddsd.dwFlags |= DDSD_MIPMAPCOUNT;

  00082	8b 45 88	 mov	 eax, DWORD PTR _ddsd$[ebp+4]
  00085	0d 00 00 02 00	 or	 eax, 131072		; 00020000H
  0008a	89 45 88	 mov	 DWORD PTR _ddsd$[ebp+4], eax

; 552  : 		ddsd.ddsCaps.dwCaps |= DDSCAPS_COMPLEX | DDSCAPS_MIPMAP;

  0008d	8b 45 ec	 mov	 eax, DWORD PTR _ddsd$[ebp+104]
  00090	0d 08 00 40 00	 or	 eax, 4194312		; 00400008H
  00095	89 45 ec	 mov	 DWORD PTR _ddsd$[ebp+104], eax

; 553  : 		ddsd.dwMipMapCount = number_of_mipmaps;

  00098	8b 45 18	 mov	 eax, DWORD PTR _number_of_mipmaps$[ebp]
  0009b	89 45 9c	 mov	 DWORD PTR _ddsd$[ebp+24], eax
$LN2@f3d_textur:

; 554  : 	}
; 555  : 
; 556  : 	ret = IDirectDraw7_CreateSurface ( ddraw.ddraw, &ddsd, &texture->surface, NULL );

  0009e	6a 00		 push	 0
  000a0	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  000a3	83 c0 18	 add	 eax, 24			; 00000018H
  000a6	50		 push	 eax
  000a7	8d 4d 84	 lea	 ecx, DWORD PTR _ddsd$[ebp]
  000aa	51		 push	 ecx
  000ab	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  000b1	8b 02		 mov	 eax, DWORD PTR [edx]
  000b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  000b9	51		 push	 ecx
  000ba	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  000bd	ff d2		 call	 edx
  000bf	89 45 80	 mov	 DWORD PTR _ret$[ebp], eax

; 557  : 
; 558  : 	if ( ret != DD_OK )

  000c2	83 7d 80 00	 cmp	 DWORD PTR _ret$[ebp], 0
  000c6	74 1f		 je	 SHORT $LN3@f3d_textur

; 559  : 	{
; 560  : 
; 561  : 		debug_fatal ( "Unable to create texture surface: %s ( %d, %d )", get_ddraw_error_message ( ret ), width, height );

  000c8	8b 45 10	 mov	 eax, DWORD PTR _height$[ebp]
  000cb	50		 push	 eax
  000cc	8b 4d 0c	 mov	 ecx, DWORD PTR _width$[ebp]
  000cf	51		 push	 ecx
  000d0	8b 55 80	 mov	 edx, DWORD PTR _ret$[ebp]
  000d3	52		 push	 edx
  000d4	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  000d9	50		 push	 eax
  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@BMGEHPGF@Unable?5to?5create?5texture?5surfac@
  000df	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000e4	83 c4 10	 add	 esp, 16			; 00000010H
$LN3@f3d_textur:

; 562  : 	}
; 563  : 
; 564  : 	//
; 565  : 	// Texture doesn't have a colour table
; 566  : 	//
; 567  : 
; 568  : 	texture->type = (screen_format_types) type;

  000e7	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  000ea	8b 4d 14	 mov	 ecx, DWORD PTR _type$[ebp]
  000ed	89 08		 mov	 DWORD PTR [eax], ecx

; 569  : 	texture->palette = NULL;

  000ef	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  000f2	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 570  : 	texture->colour_table = NULL;

  000f9	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  000fc	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 571  : 	texture->pixel_length = texture_formats[type].bpp_red + texture_formats[type].bpp_green + texture_formats[type].bpp_blue + texture_formats[type].bpp_alpha;

  00103	8b 45 14	 mov	 eax, DWORD PTR _type$[ebp]
  00106	c1 e0 06	 shl	 eax, 6
  00109	8b 4d 14	 mov	 ecx, DWORD PTR _type$[ebp]
  0010c	c1 e1 06	 shl	 ecx, 6
  0010f	8b 90 10 00 00
	00		 mov	 edx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+16]
  00115	03 91 14 00 00
	00		 add	 edx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[ecx+20]
  0011b	8b 45 14	 mov	 eax, DWORD PTR _type$[ebp]
  0011e	c1 e0 06	 shl	 eax, 6
  00121	03 90 18 00 00
	00		 add	 edx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+24]
  00127	8b 4d 14	 mov	 ecx, DWORD PTR _type$[ebp]
  0012a	c1 e1 06	 shl	 ecx, 6
  0012d	03 91 1c 00 00
	00		 add	 edx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[ecx+28]
  00133	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00136	66 89 50 08	 mov	 WORD PTR [eax+8], dx

; 572  : 	texture->clone_screen = FALSE;

  0013a	b8 f7 ff 00 00	 mov	 eax, 65527		; 0000fff7H
  0013f	8b 4d 08	 mov	 ecx, DWORD PTR _texture$[ebp]
  00142	66 23 41 0a	 and	 ax, WORD PTR [ecx+10]
  00146	8b 55 08	 mov	 edx, DWORD PTR _texture$[ebp]
  00149	66 89 42 0a	 mov	 WORD PTR [edx+10], ax

; 573  : 	texture->do_not_destroy = FALSE;

  0014d	b8 bf ff 00 00	 mov	 eax, 65471		; 0000ffbfH
  00152	8b 4d 08	 mov	 ecx, DWORD PTR _texture$[ebp]
  00155	66 23 41 0a	 and	 ax, WORD PTR [ecx+10]
  00159	8b 55 08	 mov	 edx, DWORD PTR _texture$[ebp]
  0015c	66 89 42 0a	 mov	 WORD PTR [edx+10], ax

; 574  : 
; 575  : 	//
; 576  : 	// Setup render surface
; 577  : 	//
; 578  : 
; 579  : 	if ( renderto )

  00160	83 7d 1c 00	 cmp	 DWORD PTR _renderto$[ebp], 0
  00164	0f 84 dd 01 00
	00		 je	 $LN1@f3d_textur

; 580  : 	{
; 581  : 
; 582  : 		memset ( &ddsd, 0, sizeof ( ddsd ) );

  0016a	6a 7c		 push	 124			; 0000007cH
  0016c	6a 00		 push	 0
  0016e	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  00171	50		 push	 eax
  00172	e8 00 00 00 00	 call	 _memset
  00177	83 c4 0c	 add	 esp, 12			; 0000000cH

; 583  : 	
; 584  : 		ddsd.dwSize = sizeof ( ddsd );

  0017a	c7 45 84 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 585  : 	
; 586  : 		memcpy ( &ddsd.ddpfPixelFormat, &texture_formats[type].format, sizeof ( DDPIXELFORMAT ) );

  00181	6a 20		 push	 32			; 00000020H
  00183	8b 45 14	 mov	 eax, DWORD PTR _type$[ebp]
  00186	c1 e0 06	 shl	 eax, 6
  00189	05 20 00 00 00	 add	 eax, OFFSET ?texture_formats@@3PAUTEXTURE_FORMAT@@A+32
  0018e	50		 push	 eax
  0018f	8d 4d cc	 lea	 ecx, DWORD PTR _ddsd$[ebp+72]
  00192	51		 push	 ecx
  00193	e8 00 00 00 00	 call	 _memcpy
  00198	83 c4 0c	 add	 esp, 12			; 0000000cH

; 587  : 	
; 588  : 		ddsd.dwSize = sizeof ( ddsd );

  0019b	c7 45 84 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 589  : 		ddsd.dwMipMapCount = 0;

  001a2	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp+24], 0

; 590  : 		ddsd.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH | DDSD_PIXELFORMAT;

  001a9	c7 45 88 07 10
	00 00		 mov	 DWORD PTR _ddsd$[ebp+4], 4103 ; 00001007H

; 591  : 		ddsd.ddsCaps.dwCaps = DDSCAPS_3DDEVICE;

  001b0	c7 45 ec 00 20
	00 00		 mov	 DWORD PTR _ddsd$[ebp+104], 8192 ; 00002000H

; 592  : 		ddsd.dwHeight = height;

  001b7	8b 45 10	 mov	 eax, DWORD PTR _height$[ebp]
  001ba	89 45 8c	 mov	 DWORD PTR _ddsd$[ebp+8], eax

; 593  : 		ddsd.dwWidth = width;

  001bd	8b 45 0c	 mov	 eax, DWORD PTR _width$[ebp]
  001c0	89 45 90	 mov	 DWORD PTR _ddsd$[ebp+12], eax

; 594  : 		ddsd.ddsCaps.dwCaps3 = 0;

  001c3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp+112], 0

; 595  : 		ddsd.ddsCaps.dwCaps4 = 0;

  001ca	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp+116], 0

; 596  : 		ddsd.ddsCaps.dwCaps2 = 0;

  001d1	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp+108], 0

; 597  : 		ddsd.ddsCaps.dwCaps |= ( d3d_use_rgb_device ) ? ( DDSCAPS_SYSTEMMEMORY ) : ( DDSCAPS_VIDEOMEMORY | DDSCAPS_LOCALVIDMEM );

  001d8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_use_rgb_device@@3HA, 0 ; d3d_use_rgb_device
  001df	74 0c		 je	 SHORT $LN9@f3d_textur
  001e1	c7 85 3c ff ff
	ff 00 08 00 00	 mov	 DWORD PTR tv161[ebp], 2048 ; 00000800H
  001eb	eb 0a		 jmp	 SHORT $LN10@f3d_textur
$LN9@f3d_textur:
  001ed	c7 85 3c ff ff
	ff 00 40 00 10	 mov	 DWORD PTR tv161[ebp], 268451840 ; 10004000H
$LN10@f3d_textur:
  001f7	8b 45 ec	 mov	 eax, DWORD PTR _ddsd$[ebp+104]
  001fa	0b 85 3c ff ff
	ff		 or	 eax, DWORD PTR tv161[ebp]
  00200	89 45 ec	 mov	 DWORD PTR _ddsd$[ebp+104], eax

; 598  : 		
; 599  : 		ret = IDirectDraw7_CreateSurface ( ddraw.ddraw, &ddsd, &texture->render_texture_surface, NULL );

  00203	6a 00		 push	 0
  00205	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00208	83 c0 24	 add	 eax, 36			; 00000024H
  0020b	50		 push	 eax
  0020c	8d 4d 84	 lea	 ecx, DWORD PTR _ddsd$[ebp]
  0020f	51		 push	 ecx
  00210	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00216	8b 02		 mov	 eax, DWORD PTR [edx]
  00218	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  0021e	51		 push	 ecx
  0021f	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00222	ff d2		 call	 edx
  00224	89 45 80	 mov	 DWORD PTR _ret$[ebp], eax

; 600  : 	
; 601  : 		if ( ret != DD_OK )

  00227	83 7d 80 00	 cmp	 DWORD PTR _ret$[ebp], 0
  0022b	74 1f		 je	 SHORT $LN5@f3d_textur

; 602  : 		{
; 603  : 	
; 604  : 			debug_fatal ( "Unable to create texture render surface: %s ( %d, %d )", get_ddraw_error_message ( ret ), width, height );

  0022d	8b 45 10	 mov	 eax, DWORD PTR _height$[ebp]
  00230	50		 push	 eax
  00231	8b 4d 0c	 mov	 ecx, DWORD PTR _width$[ebp]
  00234	51		 push	 ecx
  00235	8b 55 80	 mov	 edx, DWORD PTR _ret$[ebp]
  00238	52		 push	 edx
  00239	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0023e	50		 push	 eax
  0023f	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@OOMGDHGM@Unable?5to?5create?5texture?5render@
  00244	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00249	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@f3d_textur:

; 605  : 		}
; 606  : 
; 607  : 		memset ( &ddsd, 0, sizeof ( ddsd ) );

  0024c	6a 7c		 push	 124			; 0000007cH
  0024e	6a 00		 push	 0
  00250	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  00253	50		 push	 eax
  00254	e8 00 00 00 00	 call	 _memset
  00259	83 c4 0c	 add	 esp, 12			; 0000000cH

; 608  : 
; 609  : 		ddsd.dwSize = sizeof ( ddsd );

  0025c	c7 45 84 7c 00
	00 00		 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 610  : 
; 611  : 		ret = IDirectDrawSurface7_GetSurfaceDesc ( ddraw.lpFrontBuffer, &ddsd );

  00263	8d 45 84	 lea	 eax, DWORD PTR _ddsd$[ebp]
  00266	50		 push	 eax
  00267	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  0026d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0026f	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8
  00274	50		 push	 eax
  00275	8b 4a 58	 mov	 ecx, DWORD PTR [edx+88]
  00278	ff d1		 call	 ecx
  0027a	89 45 80	 mov	 DWORD PTR _ret$[ebp], eax

; 612  : 		
; 613  : 		ddsd.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH | DDSD_PIXELFORMAT;

  0027d	c7 45 88 07 10
	00 00		 mov	 DWORD PTR _ddsd$[ebp+4], 4103 ; 00001007H

; 614  : 		ddsd.ddsCaps.dwCaps = DDSCAPS_ZBUFFER;

  00284	c7 45 ec 00 00
	02 00		 mov	 DWORD PTR _ddsd$[ebp+104], 131072 ; 00020000H

; 615  : 		ddsd.ddsCaps.dwCaps |= ( d3d_use_rgb_device ) ? ( DDSCAPS_SYSTEMMEMORY ) : ( DDSCAPS_VIDEOMEMORY | DDSCAPS_LOCALVIDMEM );

  0028b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_use_rgb_device@@3HA, 0 ; d3d_use_rgb_device
  00292	74 0c		 je	 SHORT $LN11@f3d_textur
  00294	c7 85 3c ff ff
	ff 00 08 00 00	 mov	 DWORD PTR tv187[ebp], 2048 ; 00000800H
  0029e	eb 0a		 jmp	 SHORT $LN12@f3d_textur
$LN11@f3d_textur:
  002a0	c7 85 3c ff ff
	ff 00 40 00 10	 mov	 DWORD PTR tv187[ebp], 268451840 ; 10004000H
$LN12@f3d_textur:
  002aa	8b 45 ec	 mov	 eax, DWORD PTR _ddsd$[ebp+104]
  002ad	0b 85 3c ff ff
	ff		 or	 eax, DWORD PTR tv187[ebp]
  002b3	89 45 ec	 mov	 DWORD PTR _ddsd$[ebp+104], eax

; 616  : 		ddsd.dwWidth = width;

  002b6	8b 45 0c	 mov	 eax, DWORD PTR _width$[ebp]
  002b9	89 45 90	 mov	 DWORD PTR _ddsd$[ebp+12], eax

; 617  : 		ddsd.dwHeight = height;

  002bc	8b 45 10	 mov	 eax, DWORD PTR _height$[ebp]
  002bf	89 45 8c	 mov	 DWORD PTR _ddsd$[ebp+8], eax

; 618  : 
; 619  : 		get_ddraw_zbuffer_pixel_format ( &ddsd.ddpfPixelFormat );

  002c2	8d 45 cc	 lea	 eax, DWORD PTR _ddsd$[ebp+72]
  002c5	50		 push	 eax
  002c6	e8 00 00 00 00	 call	 ?get_ddraw_zbuffer_pixel_format@@YGXPAU_DDPIXELFORMAT@@@Z ; get_ddraw_zbuffer_pixel_format

; 620  : //		ddsd.ddpfPixelFormat.dwSize = sizeof ( ddsd.ddpfPixelFormat );
; 621  : //		ddsd.ddpfPixelFormat.dwFlags = DDPF_ZBUFFER;
; 622  : //		ddsd.ddpfPixelFormat.dwZBufferBitDepth = 16;
; 623  : 
; 624  : 		ret = IDirectDraw7_CreateSurface ( ddraw.ddraw, &ddsd, &texture->zbuffer_surface, NULL );

  002cb	6a 00		 push	 0
  002cd	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  002d0	83 c0 20	 add	 eax, 32			; 00000020H
  002d3	50		 push	 eax
  002d4	8d 4d 84	 lea	 ecx, DWORD PTR _ddsd$[ebp]
  002d7	51		 push	 ecx
  002d8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  002de	8b 02		 mov	 eax, DWORD PTR [edx]
  002e0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  002e6	51		 push	 ecx
  002e7	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  002ea	ff d2		 call	 edx
  002ec	89 45 80	 mov	 DWORD PTR _ret$[ebp], eax

; 625  : 		
; 626  : 		if ( ret != DD_OK )

  002ef	83 7d 80 00	 cmp	 DWORD PTR _ret$[ebp], 0
  002f3	74 17		 je	 SHORT $LN6@f3d_textur

; 627  : 		{
; 628  : 			
; 629  : 			debug_fatal ( "Unable to create Zbuffer surface: %s", get_ddraw_error_message ( ret ) );

  002f5	8b 45 80	 mov	 eax, DWORD PTR _ret$[ebp]
  002f8	50		 push	 eax
  002f9	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  002fe	50		 push	 eax
  002ff	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@EHFJKAKG@Unable?5to?5create?5Zbuffer?5surfac@
  00304	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00309	83 c4 08	 add	 esp, 8
$LN6@f3d_textur:

; 630  : 		}
; 631  : 
; 632  : 		ret = IDirectDrawSurface7_AddAttachedSurface ( texture->render_texture_surface, texture->zbuffer_surface );

  0030c	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  0030f	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00312	51		 push	 ecx
  00313	8b 55 08	 mov	 edx, DWORD PTR _texture$[ebp]
  00316	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00319	8b 4d 08	 mov	 ecx, DWORD PTR _texture$[ebp]
  0031c	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0031f	8b 00		 mov	 eax, DWORD PTR [eax]
  00321	52		 push	 edx
  00322	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00325	ff d1		 call	 ecx
  00327	89 45 80	 mov	 DWORD PTR _ret$[ebp], eax

; 633  : 
; 634  : 		if ( ret != DD_OK )

  0032a	83 7d 80 00	 cmp	 DWORD PTR _ret$[ebp], 0
  0032e	74 17		 je	 SHORT $LN1@f3d_textur

; 635  : 		{
; 636  : 
; 637  : 			debug_fatal ( "Unable to attach Zbuffer surface: %s", get_ddraw_error_message ( ret ) );

  00330	8b 45 80	 mov	 eax, DWORD PTR _ret$[ebp]
  00333	50		 push	 eax
  00334	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00339	50		 push	 eax
  0033a	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@NNACDDNH@Unable?5to?5attach?5Zbuffer?5surfac@
  0033f	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00344	83 c4 08	 add	 esp, 8
$LN1@f3d_textur:

; 638  : 		}
; 639  : 	}
; 640  : 
; 641  : }

  00347	5f		 pop	 edi
  00348	5e		 pop	 esi
  00349	5b		 pop	 ebx
  0034a	8b e5		 mov	 esp, ebp
  0034c	5d		 pop	 ebp
  0034d	c2 18 00	 ret	 24			; 00000018H
?f3d_texture_create@@YGXPAUSCREEN@@HHIHH@Z ENDP		; f3d_texture_create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_texture_unlock@@YGHPAUSCREEN@@@Z
_TEXT	SEGMENT
_ddrval$ = -4						; size = 4
_texture$ = 8						; size = 4
?f3d_texture_unlock@@YGHPAUSCREEN@@@Z PROC		; f3d_texture_unlock, COMDAT

; 859  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 860  : 
; 861  : 	HRESULT
; 862  : 		ddrval;
; 863  : 
; 864  : 	ASSERT ( ddraw.ddraw );

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A, 0
  00010	75 18		 jne	 SHORT $LN2@f3d_textur
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??f3d_texture_unlock@@YGHPAUSCREEN@@@Z@4JA
  00017	83 c0 05	 add	 eax, 5
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@BGFMAPFG@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0M@NIEKCLKH@ddraw?4ddraw@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@f3d_textur:

; 865  : 	ASSERT ( texture );

  0002a	83 7d 08 00	 cmp	 DWORD PTR _texture$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN3@f3d_textur
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??f3d_texture_unlock@@YGHPAUSCREEN@@@Z@4JA
  00035	83 c0 06	 add	 eax, 6
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@BGFMAPFG@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_07JDHEGGGP@texture@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@f3d_textur:

; 866  : 	ASSERT ( texture->surface );

  00048	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  0004b	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  0004f	75 18		 jne	 SHORT $LN4@f3d_textur
  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??f3d_texture_unlock@@YGHPAUSCREEN@@@Z@4JA
  00056	83 c0 07	 add	 eax, 7
  00059	50		 push	 eax
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@BGFMAPFG@c?3?2users?2nhv90?2projects?2eech?2mo@
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FHENNJJJ@texture?9?$DOsurface@
  00064	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@f3d_textur:

; 867  : 	ASSERT ( texture->surface_locked );

  00069	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  0006c	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  00070	75 18		 jne	 SHORT $LN5@f3d_textur
  00072	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??f3d_texture_unlock@@YGHPAUSCREEN@@@Z@4JA
  00077	83 c0 08	 add	 eax, 8
  0007a	50		 push	 eax
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@BGFMAPFG@c?3?2users?2nhv90?2projects?2eech?2mo@
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@PNFCHFGI@texture?9?$DOsurface_locked@
  00085	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@f3d_textur:

; 868  : 	ASSERT ( texture->locked );

  0008a	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  0008d	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  00091	66 83 e1 01	 and	 cx, 1
  00095	0f b7 d1	 movzx	 edx, cx
  00098	85 d2		 test	 edx, edx
  0009a	75 18		 jne	 SHORT $LN6@f3d_textur
  0009c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??f3d_texture_unlock@@YGHPAUSCREEN@@@Z@4JA
  000a1	83 c0 09	 add	 eax, 9
  000a4	50		 push	 eax
  000a5	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@BGFMAPFG@c?3?2users?2nhv90?2projects?2eech?2mo@
  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@MMMNLMIN@texture?9?$DOlocked@
  000af	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@f3d_textur:

; 869  : 	ASSERT ( texture->data );

  000b4	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  000b7	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  000bb	75 18		 jne	 SHORT $LN7@f3d_textur
  000bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??f3d_texture_unlock@@YGHPAUSCREEN@@@Z@4JA
  000c2	83 c0 0a	 add	 eax, 10			; 0000000aH
  000c5	50		 push	 eax
  000c6	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@BGFMAPFG@c?3?2users?2nhv90?2projects?2eech?2mo@
  000cb	68 00 00 00 00	 push	 OFFSET ??_C@_0O@KEPEOLAA@texture?9?$DOdata@
  000d0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@f3d_textur:

; 870  : 
; 871  : 	// Casm 16AUG05 Set the second argument to NULL - Thanks to Tamlin!
; 872  : 	ddrval = IDirectDrawSurface7_Unlock ( texture->surface_locked, NULL );

  000d5	6a 00		 push	 0
  000d7	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  000da	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000dd	8b 55 08	 mov	 edx, DWORD PTR _texture$[ebp]
  000e0	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  000e3	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000e5	50		 push	 eax
  000e6	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  000ec	ff d2		 call	 edx
  000ee	89 45 fc	 mov	 DWORD PTR _ddrval$[ebp], eax

; 873  : 
; 874  : 	if ( ddrval != DD_OK )

  000f1	83 7d fc 00	 cmp	 DWORD PTR _ddrval$[ebp], 0
  000f5	74 1b		 je	 SHORT $LN8@f3d_textur

; 875  : 	{
; 876  : 
; 877  : 		debug_log ( "Unable to unlock texture: %s", get_ddraw_error_message ( ddrval ) );

  000f7	8b 45 fc	 mov	 eax, DWORD PTR _ddrval$[ebp]
  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00100	50		 push	 eax
  00101	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@BDKOCPNE@Unable?5to?5unlock?5texture?3?5?$CFs@
  00106	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0010b	83 c4 08	 add	 esp, 8

; 878  : 
; 879  : 		return ( FALSE );

  0010e	33 c0		 xor	 eax, eax
  00110	eb 4e		 jmp	 SHORT $LN1@f3d_textur
$LN8@f3d_textur:

; 880  : 	}
; 881  : 
; 882  : 	if ( texture->surface_locked != texture->surface )

  00112	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00115	8b 4d 08	 mov	 ecx, DWORD PTR _texture$[ebp]
  00118	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  0011b	3b 51 18	 cmp	 edx, DWORD PTR [ecx+24]
  0011e	74 14		 je	 SHORT $LN9@f3d_textur

; 883  : 	{
; 884  : 
; 885  : 		IDirectDrawSurface7_Release ( texture->surface_locked );

  00120	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00123	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00126	8b 55 08	 mov	 edx, DWORD PTR _texture$[ebp]
  00129	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0012c	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0012e	50		 push	 eax
  0012f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00132	ff d2		 call	 edx
$LN9@f3d_textur:

; 886  : 	}
; 887  : 
; 888  : 	texture->locked = FALSE;

  00134	b8 fe ff 00 00	 mov	 eax, 65534		; 0000fffeH
  00139	8b 4d 08	 mov	 ecx, DWORD PTR _texture$[ebp]
  0013c	66 23 41 0a	 and	 ax, WORD PTR [ecx+10]
  00140	8b 55 08	 mov	 edx, DWORD PTR _texture$[ebp]
  00143	66 89 42 0a	 mov	 WORD PTR [edx+10], ax

; 889  : 
; 890  : 	texture->surface_locked = NULL;

  00147	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  0014a	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 891  : 
; 892  : 	texture->data = NULL;

  00151	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00154	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0

; 893  : 
; 894  : 	return ( TRUE );

  0015b	b8 01 00 00 00	 mov	 eax, 1
$LN1@f3d_textur:

; 895  : }

  00160	5f		 pop	 edi
  00161	5e		 pop	 esi
  00162	5b		 pop	 ebx
  00163	8b e5		 mov	 esp, ebp
  00165	5d		 pop	 ebp
  00166	c2 04 00	 ret	 4
?f3d_texture_unlock@@YGHPAUSCREEN@@@Z ENDP		; f3d_texture_unlock
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_texture_lock@@YGHPAUSCREEN@@H@Z
_TEXT	SEGMENT
_ddscaps$1 = -156					; size = 16
_ddsd$ = -140						; size = 124
_ddrval$ = -16						; size = 4
_next_level$ = -12					; size = 4
_texture_surface$ = -8					; size = 4
_count$ = -4						; size = 4
_texture$ = 8						; size = 4
_mipmap_level$ = 12					; size = 4
?f3d_texture_lock@@YGHPAUSCREEN@@H@Z PROC		; f3d_texture_lock, COMDAT

; 759  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 760  : 
; 761  : 	int
; 762  : 		count;
; 763  : 
; 764  : 	LPDIRECTDRAWSURFACEX
; 765  : 		texture_surface,
; 766  : 		next_level;
; 767  : 
; 768  : 	HRESULT
; 769  : 		ddrval;
; 770  : 
; 771  : 	DDSURFACEDESC2
; 772  : 		ddsd;
; 773  : 
; 774  : 	ASSERT ( ddraw.ddraw );

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ddraw@@3Udirect_draw_data@@A, 0
  00013	75 18		 jne	 SHORT $LN5@f3d_textur
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??f3d_texture_lock@@YGHPAUSCREEN@@H@Z@4JA
  0001a	83 c0 0f	 add	 eax, 15			; 0000000fH
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@BGFMAPFG@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0M@NIEKCLKH@ddraw?4ddraw@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@f3d_textur:

; 775  : 	ASSERT ( texture );

  0002d	83 7d 08 00	 cmp	 DWORD PTR _texture$[ebp], 0
  00031	75 18		 jne	 SHORT $LN6@f3d_textur
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??f3d_texture_lock@@YGHPAUSCREEN@@H@Z@4JA
  00038	83 c0 10	 add	 eax, 16			; 00000010H
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@BGFMAPFG@c?3?2users?2nhv90?2projects?2eech?2mo@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_07JDHEGGGP@texture@
  00046	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@f3d_textur:

; 776  : 	ASSERT ( texture->surface );

  0004b	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  0004e	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00052	75 18		 jne	 SHORT $LN7@f3d_textur
  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??f3d_texture_lock@@YGHPAUSCREEN@@H@Z@4JA
  00059	83 c0 11	 add	 eax, 17			; 00000011H
  0005c	50		 push	 eax
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@BGFMAPFG@c?3?2users?2nhv90?2projects?2eech?2mo@
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FHENNJJJ@texture?9?$DOsurface@
  00067	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@f3d_textur:

; 777  : 	ASSERT ( !texture->locked );

  0006c	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  0006f	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  00073	66 83 e1 01	 and	 cx, 1
  00077	0f b7 d1	 movzx	 edx, cx
  0007a	85 d2		 test	 edx, edx
  0007c	74 18		 je	 SHORT $LN8@f3d_textur
  0007e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??f3d_texture_lock@@YGHPAUSCREEN@@H@Z@4JA
  00083	83 c0 12	 add	 eax, 18			; 00000012H
  00086	50		 push	 eax
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@BGFMAPFG@c?3?2users?2nhv90?2projects?2eech?2mo@
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@EAJMPPNM@?$CBtexture?9?$DOlocked@
  00091	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@f3d_textur:

; 778  : 
; 779  : 	texture_surface = texture->surface;

  00096	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00099	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0009c	89 4d f8	 mov	 DWORD PTR _texture_surface$[ebp], ecx

; 780  : 
; 781  : 	for ( count = 0; count < mipmap_level; count++ )

  0009f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  000a6	eb 09		 jmp	 SHORT $LN4@f3d_textur
$LN2@f3d_textur:
  000a8	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000ab	83 c0 01	 add	 eax, 1
  000ae	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@f3d_textur:
  000b1	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000b4	3b 45 0c	 cmp	 eax, DWORD PTR _mipmap_level$[ebp]
  000b7	0f 8d f6 00 00
	00		 jge	 $LN3@f3d_textur

; 782  : 	{
; 783  : 
; 784  : 		DDSCAPS2
; 785  : 			ddscaps;
; 786  : 
; 787  : 		memset ( &ddscaps, 0, sizeof ( ddscaps ) );

  000bd	6a 10		 push	 16			; 00000010H
  000bf	6a 00		 push	 0
  000c1	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _ddscaps$1[ebp]
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 _memset
  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 788  : 
; 789  : 		ddscaps.dwCaps = DDSCAPS_TEXTURE | DDSCAPS_MIPMAP;

  000d0	c7 85 64 ff ff
	ff 00 10 40 00	 mov	 DWORD PTR _ddscaps$1[ebp], 4198400 ; 00401000H

; 790  : 
; 791  : 		ddrval = IDirectDrawSurface7_GetAttachedSurface ( texture_surface, &ddscaps, &next_level );

  000da	8d 45 f4	 lea	 eax, DWORD PTR _next_level$[ebp]
  000dd	50		 push	 eax
  000de	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _ddscaps$1[ebp]
  000e4	51		 push	 ecx
  000e5	8b 55 f8	 mov	 edx, DWORD PTR _texture_surface$[ebp]
  000e8	8b 02		 mov	 eax, DWORD PTR [edx]
  000ea	8b 4d f8	 mov	 ecx, DWORD PTR _texture_surface$[ebp]
  000ed	51		 push	 ecx
  000ee	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  000f1	ff d2		 call	 edx
  000f3	89 45 f0	 mov	 DWORD PTR _ddrval$[ebp], eax

; 792  : 
; 793  : 		if ( ddrval != DD_OK )

  000f6	83 7d f0 00	 cmp	 DWORD PTR _ddrval$[ebp], 0
  000fa	0f 84 8f 00 00
	00		 je	 $LN9@f3d_textur

; 794  : 		{
; 795  : 
; 796  : 			debug_log ( "Failed to get attached surface: %s", get_ddraw_error_message ( ddrval ) );

  00100	8b 45 f0	 mov	 eax, DWORD PTR _ddrval$[ebp]
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00109	50		 push	 eax
  0010a	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@BBPGGOEM@Failed?5to?5get?5attached?5surface?3@
  0010f	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00114	83 c4 08	 add	 esp, 8

; 797  : 
; 798  : 			memset ( &ddsd, 0, sizeof ( ddsd ) );

  00117	6a 7c		 push	 124			; 0000007cH
  00119	6a 00		 push	 0
  0011b	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _ddsd$[ebp]
  00121	50		 push	 eax
  00122	e8 00 00 00 00	 call	 _memset
  00127	83 c4 0c	 add	 esp, 12			; 0000000cH

; 799  : 
; 800  : 			ddsd.dwSize = sizeof ( ddsd );

  0012a	c7 85 74 ff ff
	ff 7c 00 00 00	 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 801  : 
; 802  : 			ddrval = IDirectDrawSurface7_GetSurfaceDesc ( texture_surface, &ddsd );

  00134	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _ddsd$[ebp]
  0013a	50		 push	 eax
  0013b	8b 4d f8	 mov	 ecx, DWORD PTR _texture_surface$[ebp]
  0013e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00140	8b 45 f8	 mov	 eax, DWORD PTR _texture_surface$[ebp]
  00143	50		 push	 eax
  00144	8b 4a 58	 mov	 ecx, DWORD PTR [edx+88]
  00147	ff d1		 call	 ecx
  00149	89 45 f0	 mov	 DWORD PTR _ddrval$[ebp], eax

; 803  : 
; 804  : 			if ( ddrval != DD_OK )

  0014c	83 7d f0 00	 cmp	 DWORD PTR _ddrval$[ebp], 0
  00150	74 17		 je	 SHORT $LN10@f3d_textur

; 805  : 			{
; 806  : 
; 807  : 				debug_log ( "Failed to get surface description: %s", get_ddraw_error_message ( ddrval ) );

  00152	8b 45 f0	 mov	 eax, DWORD PTR _ddrval$[ebp]
  00155	50		 push	 eax
  00156	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0015b	50		 push	 eax
  0015c	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@LCCJOBAE@Failed?5to?5get?5surface?5descripti@
  00161	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00166	83 c4 08	 add	 esp, 8
$LN10@f3d_textur:

; 808  : 			}
; 809  : 		
; 810  : 			debug_log ( "Failed to find mipmap %d, from %d levels: %s", count, ddsd.dwMipMapCount, get_ddraw_error_message ( ddrval ) );

  00169	8b 45 f0	 mov	 eax, DWORD PTR _ddrval$[ebp]
  0016c	50		 push	 eax
  0016d	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00172	50		 push	 eax
  00173	8b 4d 8c	 mov	 ecx, DWORD PTR _ddsd$[ebp+24]
  00176	51		 push	 ecx
  00177	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  0017a	52		 push	 edx
  0017b	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@EFDLDEMB@Failed?5to?5find?5mipmap?5?$CFd?0?5from?5@
  00180	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00185	83 c4 10	 add	 esp, 16			; 00000010H

; 811  : 
; 812  : 			return ( FALSE );

  00188	33 c0		 xor	 eax, eax
  0018a	e9 d8 00 00 00	 jmp	 $LN1@f3d_textur
$LN9@f3d_textur:

; 813  : 		}
; 814  : 
; 815  : 		if ( texture_surface != texture->surface )

  0018f	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00192	8b 4d f8	 mov	 ecx, DWORD PTR _texture_surface$[ebp]
  00195	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00198	74 0e		 je	 SHORT $LN11@f3d_textur

; 816  : 		{
; 817  : 
; 818  : 			IDirectDrawSurface7_Release ( texture_surface );

  0019a	8b 45 f8	 mov	 eax, DWORD PTR _texture_surface$[ebp]
  0019d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0019f	8b 55 f8	 mov	 edx, DWORD PTR _texture_surface$[ebp]
  001a2	52		 push	 edx
  001a3	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001a6	ff d0		 call	 eax
$LN11@f3d_textur:

; 819  : 		}
; 820  : 
; 821  : 		texture_surface = next_level;

  001a8	8b 45 f4	 mov	 eax, DWORD PTR _next_level$[ebp]
  001ab	89 45 f8	 mov	 DWORD PTR _texture_surface$[ebp], eax

; 822  : 	}

  001ae	e9 f5 fe ff ff	 jmp	 $LN2@f3d_textur
$LN3@f3d_textur:

; 823  : 
; 824  : 
; 825  : 	ddsd.dwSize = sizeof ( ddsd );

  001b3	c7 85 74 ff ff
	ff 7c 00 00 00	 mov	 DWORD PTR _ddsd$[ebp], 124 ; 0000007cH

; 826  : 
; 827  : 	ddrval = IDirectDrawSurface7_GetSurfaceDesc ( texture_surface, &ddsd );

  001bd	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _ddsd$[ebp]
  001c3	50		 push	 eax
  001c4	8b 4d f8	 mov	 ecx, DWORD PTR _texture_surface$[ebp]
  001c7	8b 11		 mov	 edx, DWORD PTR [ecx]
  001c9	8b 45 f8	 mov	 eax, DWORD PTR _texture_surface$[ebp]
  001cc	50		 push	 eax
  001cd	8b 4a 58	 mov	 ecx, DWORD PTR [edx+88]
  001d0	ff d1		 call	 ecx
  001d2	89 45 f0	 mov	 DWORD PTR _ddrval$[ebp], eax

; 828  : 
; 829  : 	if ( ddrval != DD_OK )

  001d5	83 7d f0 00	 cmp	 DWORD PTR _ddrval$[ebp], 0
  001d9	74 1b		 je	 SHORT $LN12@f3d_textur

; 830  : 	{
; 831  : 
; 832  : 		debug_log ( "Failed to get surface description of texture: %s", get_ddraw_error_message ( ddrval ) );

  001db	8b 45 f0	 mov	 eax, DWORD PTR _ddrval$[ebp]
  001de	50		 push	 eax
  001df	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  001e4	50		 push	 eax
  001e5	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@CPFAPDFE@Failed?5to?5get?5surface?5descripti@
  001ea	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  001ef	83 c4 08	 add	 esp, 8

; 833  : 
; 834  : 		return ( FALSE );

  001f2	33 c0		 xor	 eax, eax
  001f4	eb 71		 jmp	 SHORT $LN1@f3d_textur
$LN12@f3d_textur:

; 835  : 	}
; 836  : 
; 837  : 	ddrval = IDirectDrawSurface7_Lock ( texture_surface, NULL, &ddsd, DDLOCK_WAIT | DDLOCK_SURFACEMEMORYPTR, NULL );

  001f6	6a 00		 push	 0
  001f8	6a 01		 push	 1
  001fa	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _ddsd$[ebp]
  00200	50		 push	 eax
  00201	6a 00		 push	 0
  00203	8b 4d f8	 mov	 ecx, DWORD PTR _texture_surface$[ebp]
  00206	8b 11		 mov	 edx, DWORD PTR [ecx]
  00208	8b 45 f8	 mov	 eax, DWORD PTR _texture_surface$[ebp]
  0020b	50		 push	 eax
  0020c	8b 4a 64	 mov	 ecx, DWORD PTR [edx+100]
  0020f	ff d1		 call	 ecx
  00211	89 45 f0	 mov	 DWORD PTR _ddrval$[ebp], eax

; 838  : 		
; 839  : 	if ( ddrval != DD_OK )

  00214	83 7d f0 00	 cmp	 DWORD PTR _ddrval$[ebp], 0
  00218	74 1b		 je	 SHORT $LN13@f3d_textur

; 840  : 	{
; 841  : 
; 842  : 		debug_log ( "failed to lock texture: %s", get_ddraw_error_message ( ddrval ) );

  0021a	8b 45 f0	 mov	 eax, DWORD PTR _ddrval$[ebp]
  0021d	50		 push	 eax
  0021e	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00223	50		 push	 eax
  00224	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@GBBNOCCG@failed?5to?5lock?5texture?3?5?$CFs@
  00229	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0022e	83 c4 08	 add	 esp, 8

; 843  : 
; 844  : 		return ( FALSE );

  00231	33 c0		 xor	 eax, eax
  00233	eb 32		 jmp	 SHORT $LN1@f3d_textur
$LN13@f3d_textur:

; 845  : 	}
; 846  : 
; 847  : 	texture->surface_locked = texture_surface;

  00235	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00238	8b 4d f8	 mov	 ecx, DWORD PTR _texture_surface$[ebp]
  0023b	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 848  : 
; 849  : 	texture->locked = TRUE;

  0023e	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00241	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  00245	66 83 c9 01	 or	 cx, 1
  00249	8b 55 08	 mov	 edx, DWORD PTR _texture$[ebp]
  0024c	66 89 4a 0a	 mov	 WORD PTR [edx+10], cx

; 850  : 
; 851  : 	texture->data = ddsd.lpSurface;

  00250	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00253	8b 4d 98	 mov	 ecx, DWORD PTR _ddsd$[ebp+36]
  00256	89 48 2c	 mov	 DWORD PTR [eax+44], ecx

; 852  : 
; 853  : 	texture->pitch = ddsd.lPitch;

  00259	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  0025c	8b 4d 84	 mov	 ecx, DWORD PTR _ddsd$[ebp+16]
  0025f	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 854  : 
; 855  : 	return ( TRUE );

  00262	b8 01 00 00 00	 mov	 eax, 1
$LN1@f3d_textur:

; 856  : }

  00267	5f		 pop	 edi
  00268	5e		 pop	 esi
  00269	5b		 pop	 ebx
  0026a	8b e5		 mov	 esp, ebp
  0026c	5d		 pop	 ebp
  0026d	c2 08 00	 ret	 8
?f3d_texture_lock@@YGHPAUSCREEN@@H@Z ENDP		; f3d_texture_lock
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_evict_textures@@YGXXZ
_TEXT	SEGMENT
_ret$ = -4						; size = 4
?f3d_evict_textures@@YGXXZ PROC				; f3d_evict_textures, COMDAT

; 509  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 510  : 	HRESULT
; 511  : 		ret;
; 512  : 
; 513  : 	ret = IDirect3D7_EvictManagedTextures ( d3d_data.d3d );

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A
  00016	52		 push	 edx
  00017	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0001a	ff d0		 call	 eax
  0001c	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 514  : 
; 515  : 	if ( FAILED ( ret ) )

  0001f	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00023	7d 17		 jge	 SHORT $LN1@f3d_evict_

; 516  : 	{
; 517  : 		debug_log ( "Unable to evict managed textures: %s", get_ddraw_error_message ( ret ) );

  00025	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0002e	50		 push	 eax
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@ODCOINGE@Unable?5to?5evict?5managed?5texture@
  00034	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00039	83 c4 08	 add	 esp, 8
$LN1@f3d_evict_:

; 518  : 	}
; 519  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?f3d_evict_textures@@YGXXZ ENDP				; f3d_evict_textures
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_enumerate_formats@@YGHP6GJPAU_DDPIXELFORMAT@@PAX@Z1@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_enumerate_texture_formats$ = 8				; size = 4
_context$ = 12						; size = 4
?f3d_enumerate_formats@@YGHP6GJPAU_DDPIXELFORMAT@@PAX@Z1@Z PROC ; f3d_enumerate_formats, COMDAT

; 493  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 494  : 	HRESULT
; 495  : 		ret;
; 496  : 
; 497  : 	ret = IDirect3DDevice7_EnumTextureFormats ( d3d_data.device, enumerate_texture_formats, context );

  00009	8b 45 0c	 mov	 eax, DWORD PTR _context$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _enumerate_texture_formats$[ebp]
  00010	51		 push	 ecx
  00011	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  00017	8b 02		 mov	 eax, DWORD PTR [edx]
  00019	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  0001f	51		 push	 ecx
  00020	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00023	ff d2		 call	 edx
  00025	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 498  : 
; 499  : 	if ( ret != DD_OK )

  00028	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  0002c	74 1b		 je	 SHORT $LN2@f3d_enumer

; 500  : 	{
; 501  : 		debug_log ( "Error during texture format enumeration: %s", get_d3d_error_message ( ret ) );

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ?get_d3d_error_message@@YGPBDJ@Z ; get_d3d_error_message
  00037	50		 push	 eax
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@GKJPIJNA@Error?5during?5texture?5format?5enu@
  0003d	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00042	83 c4 08	 add	 esp, 8

; 502  : 		return ( FALSE );

  00045	33 c0		 xor	 eax, eax
  00047	eb 05		 jmp	 SHORT $LN1@f3d_enumer
$LN2@f3d_enumer:

; 503  : 	}
; 504  : 
; 505  : 	return TRUE;

  00049	b8 01 00 00 00	 mov	 eax, 1
$LN1@f3d_enumer:

; 506  : }

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 08 00	 ret	 8
?f3d_enumerate_formats@@YGHP6GJPAU_DDPIXELFORMAT@@PAX@Z1@Z ENDP ; f3d_enumerate_formats
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_set_3d_render_target@@YGHPAUSCREEN@@@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_this_screen$ = 8					; size = 4
?f3d_set_3d_render_target@@YGHPAUSCREEN@@@Z PROC	; f3d_set_3d_render_target, COMDAT

; 459  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 460  : 	HRESULT
; 461  : 		ret;
; 462  : 
; 463  : 	if ( d3d_data.recreate_d3d )

  00009	83 3d 10 00 00
	00 00		 cmp	 DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+16, 0
  00010	74 05		 je	 SHORT $LN2@f3d_set_3d

; 464  : 	{
; 465  : 		recreate_d3d ();

  00012	e8 00 00 00 00	 call	 ?recreate_d3d@@YGXXZ	; recreate_d3d
$LN2@f3d_set_3d:

; 466  : 	}
; 467  : 	if ( this_screen == video_screen )

  00017	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  0001a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00020	75 54		 jne	 SHORT $LN3@f3d_set_3d

; 468  : 	{
; 469  : 		zbuffer_target_surface = f3d_surface_render ();

  00022	e8 00 00 00 00	 call	 ?f3d_surface_render@@YGPAUIDirectDrawSurface7@@XZ ; f3d_surface_render
  00027	a3 00 00 00 00	 mov	 DWORD PTR ?zbuffer_target_surface@@3PAUIDirectDrawSurface7@@A, eax ; zbuffer_target_surface

; 470  : 		ret = IDirect3DDevice7_SetRenderTarget ( d3d_data.device, this_screen->surface, 0 );

  0002c	6a 00		 push	 0
  0002e	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  00031	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00034	51		 push	 ecx
  00035	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  0003b	8b 02		 mov	 eax, DWORD PTR [edx]
  0003d	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  00043	51		 push	 ecx
  00044	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  00047	ff d2		 call	 edx
  00049	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 471  : 		if ( FAILED ( ret ) )

  0004c	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00050	7d 1b		 jge	 SHORT $LN5@f3d_set_3d

; 472  : 		{
; 473  : 			debug_log ( "Unable to set render target to video screen: %s", get_ddraw_error_message ( ret ) );

  00052	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0005b	50		 push	 eax
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@IBGJJLPE@Unable?5to?5set?5render?5target?5to?5@
  00061	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00066	83 c4 08	 add	 esp, 8

; 474  : 			return ( FALSE );

  00069	33 c0		 xor	 eax, eax
  0006b	eb 5f		 jmp	 SHORT $LN1@f3d_set_3d
$LN5@f3d_set_3d:

; 475  : 		}
; 476  : 		return ( TRUE );

  0006d	b8 01 00 00 00	 mov	 eax, 1
  00072	eb 58		 jmp	 SHORT $LN1@f3d_set_3d

; 477  : 	}
; 478  : 	else

  00074	eb 54		 jmp	 SHORT $LN4@f3d_set_3d
$LN3@f3d_set_3d:

; 479  : 	{
; 480  : 		zbuffer_target_surface = this_screen->render_texture_surface;

  00076	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  00079	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0007c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?zbuffer_target_surface@@3PAUIDirectDrawSurface7@@A, ecx ; zbuffer_target_surface

; 481  : 		ret = IDirect3DDevice7_SetRenderTarget ( d3d_data.device, this_screen->render_texture_surface, 0 );

  00082	6a 00		 push	 0
  00084	8b 45 08	 mov	 eax, DWORD PTR _this_screen$[ebp]
  00087	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0008a	51		 push	 ecx
  0008b	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  00091	8b 02		 mov	 eax, DWORD PTR [edx]
  00093	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  00099	51		 push	 ecx
  0009a	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  0009d	ff d2		 call	 edx
  0009f	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 482  : 		if ( FAILED ( ret ) )

  000a2	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  000a6	7d 1b		 jge	 SHORT $LN6@f3d_set_3d

; 483  : 		{
; 484  : 			debug_log ( "Unable to set render target to texture screen: %s", get_ddraw_error_message ( ret ) );

  000a8	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  000b1	50		 push	 eax
  000b2	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@LLFJFPKA@Unable?5to?5set?5render?5target?5to?5@
  000b7	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000bc	83 c4 08	 add	 esp, 8

; 485  : 			return ( FALSE );

  000bf	33 c0		 xor	 eax, eax
  000c1	eb 09		 jmp	 SHORT $LN1@f3d_set_3d
$LN6@f3d_set_3d:

; 486  : 		}
; 487  : 		return ( TRUE );

  000c3	b8 01 00 00 00	 mov	 eax, 1
  000c8	eb 02		 jmp	 SHORT $LN1@f3d_set_3d
$LN4@f3d_set_3d:

; 488  : 	}
; 489  : 	return ( FALSE );

  000ca	33 c0		 xor	 eax, eax
$LN1@f3d_set_3d:

; 490  : }

  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c2 04 00	 ret	 4
?f3d_set_3d_render_target@@YGHPAUSCREEN@@@Z ENDP	; f3d_set_3d_render_target
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_clear_screen@@YGXXZ
_TEXT	SEGMENT
_fx$ = -108						; size = 100
_surface$ = -8						; size = 4
_ddrval$ = -4						; size = 4
?f3d_clear_screen@@YGXXZ PROC				; f3d_clear_screen, COMDAT

; 430  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 431  : 	HRESULT
; 432  : 		ddrval;
; 433  : 	LPDIRECTDRAWSURFACEX
; 434  : 		surface;
; 435  : 	DDBLTFX
; 436  : 		fx;
; 437  : 
; 438  : 	ASSERT ( active_screen );

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?active_screen@@3PAUSCREEN@@A, 0 ; active_screen
  00013	75 18		 jne	 SHORT $LN2@f3d_clear_
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??f3d_clear_screen@@YGXXZ@4JA
  0001a	83 c0 08	 add	 eax, 8
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@BGFMAPFG@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IILHNAKB@active_screen@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@f3d_clear_:

; 439  : 	ASSERT ( active_screen->surface );

  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00032	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00036	75 18		 jne	 SHORT $LN3@f3d_clear_
  00038	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??f3d_clear_screen@@YGXXZ@4JA
  0003d	83 c0 09	 add	 eax, 9
  00040	50		 push	 eax
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@BGFMAPFG@c?3?2users?2nhv90?2projects?2eech?2mo@
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KDDFKJCN@active_screen?9?$DOsurface@
  0004b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@f3d_clear_:

; 440  : 
; 441  : 	if ( active_screen->render_texture_surface )

  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00055	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  00059	74 0d		 je	 SHORT $LN4@f3d_clear_

; 442  : 	{
; 443  : 		surface = active_screen->render_texture_surface;

  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00060	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00063	89 4d f8	 mov	 DWORD PTR _surface$[ebp], ecx

; 444  : 	}
; 445  : 	else

  00066	eb 0b		 jmp	 SHORT $LN5@f3d_clear_
$LN4@f3d_clear_:

; 446  : 	{
; 447  : 		surface = active_screen->surface;

  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0006d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00070	89 4d f8	 mov	 DWORD PTR _surface$[ebp], ecx
$LN5@f3d_clear_:

; 448  : 	}
; 449  : 	fx.dwSize = sizeof ( fx );

  00073	c7 45 94 64 00
	00 00		 mov	 DWORD PTR _fx$[ebp], 100 ; 00000064H

; 450  : 	fx.dwFillColor = 0;

  0007a	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _fx$[ebp+80], 0

; 451  : 	ddrval = IDirectDrawSurface7_Blt ( surface, NULL, NULL, NULL, DDBLT_COLORFILL | DDBLT_WAIT, &fx );

  00081	8d 45 94	 lea	 eax, DWORD PTR _fx$[ebp]
  00084	50		 push	 eax
  00085	68 00 04 00 01	 push	 16778240		; 01000400H
  0008a	6a 00		 push	 0
  0008c	6a 00		 push	 0
  0008e	6a 00		 push	 0
  00090	8b 4d f8	 mov	 ecx, DWORD PTR _surface$[ebp]
  00093	8b 11		 mov	 edx, DWORD PTR [ecx]
  00095	8b 45 f8	 mov	 eax, DWORD PTR _surface$[ebp]
  00098	50		 push	 eax
  00099	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  0009c	ff d1		 call	 ecx
  0009e	89 45 fc	 mov	 DWORD PTR _ddrval$[ebp], eax

; 452  : 	if ( ddrval != DD_OK )

  000a1	83 7d fc 00	 cmp	 DWORD PTR _ddrval$[ebp], 0
  000a5	74 17		 je	 SHORT $LN1@f3d_clear_

; 453  : 	{
; 454  : 		debug_log ( "Unable to blt during clear screen: %s", get_ddraw_error_message ( ddrval ) );

  000a7	8b 45 fc	 mov	 eax, DWORD PTR _ddrval$[ebp]
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  000b0	50		 push	 eax
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@BIILOKFM@Unable?5to?5blt?5during?5clear?5scre@
  000b6	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000bb	83 c4 08	 add	 esp, 8
$LN1@f3d_clear_:

; 455  : 	}
; 456  : }

  000be	5f		 pop	 edi
  000bf	5e		 pop	 esi
  000c0	5b		 pop	 ebx
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
?f3d_clear_screen@@YGXXZ ENDP				; f3d_clear_screen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_clear_zbuffer@@YGXXZ
_TEXT	SEGMENT
_fx$1 = -104						; size = 100
_zbuffer$ = -4						; size = 4
?f3d_clear_zbuffer@@YGXXZ PROC				; f3d_clear_zbuffer, COMDAT

; 393  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 394  : 	LPDIRECTDRAWSURFACEX
; 395  : 		zbuffer;
; 396  : 
; 397  : 	if ( !active_screen )

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?active_screen@@3PAUSCREEN@@A, 0 ; active_screen
  00013	75 02		 jne	 SHORT $LN2@f3d_clear_

; 398  : 	{
; 399  : 		return;

  00015	eb 65		 jmp	 SHORT $LN1@f3d_clear_
$LN2@f3d_clear_:

; 400  : 	}
; 401  : 	if ( active_screen == video_screen )

  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0001c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00022	75 0a		 jne	 SHORT $LN3@f3d_clear_

; 402  : 	{
; 403  : 		zbuffer = ddraw.lpZBuffer;

  00024	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+20
  00029	89 45 fc	 mov	 DWORD PTR _zbuffer$[ebp], eax

; 404  : 	}
; 405  : 	else

  0002c	eb 0b		 jmp	 SHORT $LN4@f3d_clear_
$LN3@f3d_clear_:

; 406  : 	{
; 407  : 		zbuffer = active_screen->zbuffer_surface;

  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00033	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00036	89 4d fc	 mov	 DWORD PTR _zbuffer$[ebp], ecx
$LN4@f3d_clear_:

; 408  : 	}
; 409  : 	if ( !zbuffer )

  00039	83 7d fc 00	 cmp	 DWORD PTR _zbuffer$[ebp], 0
  0003d	75 02		 jne	 SHORT $LN5@f3d_clear_

; 410  : 	{
; 411  : 		return;

  0003f	eb 3b		 jmp	 SHORT $LN1@f3d_clear_
$LN5@f3d_clear_:

; 412  : 	}
; 413  : 	{
; 414  : 		DDBLTFX
; 415  : 			fx;
; 416  : 		fx.dwSize = sizeof ( DDBLTFX );

  00041	c7 45 98 64 00
	00 00		 mov	 DWORD PTR _fx$1[ebp], 100 ; 00000064H

; 417  : 		if ( application_video_colourdepth == 32 )

  00048	83 3d 00 00 00
	00 20		 cmp	 DWORD PTR ?application_video_colourdepth@@3HA, 32 ; application_video_colourdepth, 00000020H
  0004f	75 09		 jne	 SHORT $LN6@f3d_clear_

; 418  : 		{
; 419  : 			fx.dwFillDepth = 0xffffffff;

  00051	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR _fx$1[ebp+80], -1

; 420  : 		}
; 421  : 		else

  00058	eb 07		 jmp	 SHORT $LN7@f3d_clear_
$LN6@f3d_clear_:

; 422  : 		{
; 423  : 			fx.dwFillDepth = 0xffff;

  0005a	c7 45 e8 ff ff
	00 00		 mov	 DWORD PTR _fx$1[ebp+80], 65535 ; 0000ffffH
$LN7@f3d_clear_:

; 424  : 		}
; 425  : 		f3d_surface_blt ( ddraw.lpZBuffer, NULL, NULL, NULL, DDBLT_DEPTHFILL, &fx );

  00061	8d 45 98	 lea	 eax, DWORD PTR _fx$1[ebp]
  00064	50		 push	 eax
  00065	68 00 00 00 02	 push	 33554432		; 02000000H
  0006a	6a 00		 push	 0
  0006c	6a 00		 push	 0
  0006e	6a 00		 push	 0
  00070	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+20
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ?f3d_surface_blt@@YGXPAUIDirectDrawSurface7@@PAUtagRECT@@01IPAU_DDBLTFX@@@Z ; f3d_surface_blt
$LN1@f3d_clear_:

; 426  : 	}
; 427  : }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?f3d_clear_zbuffer@@YGXXZ ENDP				; f3d_clear_zbuffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_surface_blt@@YGXPAUIDirectDrawSurface7@@PAUtagRECT@@01IPAU_DDBLTFX@@@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_primary$ = 8						; size = 4
_rect1$ = 12						; size = 4
_secondary$ = 16					; size = 4
_rect2$ = 20						; size = 4
_flags$ = 24						; size = 4
_fx$ = 28						; size = 4
?f3d_surface_blt@@YGXPAUIDirectDrawSurface7@@PAUtagRECT@@01IPAU_DDBLTFX@@@Z PROC ; f3d_surface_blt, COMDAT

; 361  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 362  : 	HRESULT
; 363  : 		ret;
; 364  : 
; 365  : 	ret = IDirectDrawSurface7_Blt ( primary, rect1, secondary, rect2, flags, fx );

  00009	8b 45 1c	 mov	 eax, DWORD PTR _fx$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 18	 mov	 ecx, DWORD PTR _flags$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 14	 mov	 edx, DWORD PTR _rect2$[ebp]
  00014	52		 push	 edx
  00015	8b 45 10	 mov	 eax, DWORD PTR _secondary$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _rect1$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 55 08	 mov	 edx, DWORD PTR _primary$[ebp]
  00020	8b 02		 mov	 eax, DWORD PTR [edx]
  00022	8b 4d 08	 mov	 ecx, DWORD PTR _primary$[ebp]
  00025	51		 push	 ecx
  00026	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00029	ff d2		 call	 edx
  0002b	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 366  : 	if ( ret != DD_OK )

  0002e	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00032	74 17		 je	 SHORT $LN1@f3d_surfac

; 367  : 	{
; 368  : 		debug_log ( "Unable to blt: %s", get_ddraw_error_message ( ret ) );

  00034	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0003d	50		 push	 eax
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NJBPAFOI@Unable?5to?5blt?3?5?$CFs@
  00043	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00048	83 c4 08	 add	 esp, 8
$LN1@f3d_surfac:

; 369  : 	}
; 370  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 18 00	 ret	 24			; 00000018H
?f3d_surface_blt@@YGXPAUIDirectDrawSurface7@@PAUtagRECT@@01IPAU_DDBLTFX@@@Z ENDP ; f3d_surface_blt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_surface_palette@@YGXPAUIDirectDrawSurface7@@PAUIDirectDrawPalette@@@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_surface$ = 8						; size = 4
_texture_palette$ = 12					; size = 4
?f3d_surface_palette@@YGXPAUIDirectDrawSurface7@@PAUIDirectDrawPalette@@@Z PROC ; f3d_surface_palette, COMDAT

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 349  : 	HRESULT
; 350  : 		ret;
; 351  : 
; 352  : 	ret = IDirectDrawSurface7_SetPalette ( surface, texture_palette );

  00009	8b 45 0c	 mov	 eax, DWORD PTR _texture_palette$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _surface$[ebp]
  00010	8b 11		 mov	 edx, DWORD PTR [ecx]
  00012	8b 45 08	 mov	 eax, DWORD PTR _surface$[ebp]
  00015	50		 push	 eax
  00016	8b 4a 7c	 mov	 ecx, DWORD PTR [edx+124]
  00019	ff d1		 call	 ecx
  0001b	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 353  : 	if ( ret != DD_OK )

  0001e	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00022	74 17		 je	 SHORT $LN1@f3d_surfac

; 354  : 	{
; 355  : 		debug_fatal ( "Unable to set palette on texture: %s", get_ddraw_error_message ( ret ) );

  00024	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DKLIBHBL@Unable?5to?5set?5palette?5on?5textur@
  00033	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00038	83 c4 08	 add	 esp, 8
$LN1@f3d_surfac:

; 356  : 	}
; 357  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
?f3d_surface_palette@@YGXPAUIDirectDrawSurface7@@PAUIDirectDrawPalette@@@Z ENDP ; f3d_surface_palette
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_surface_render@@YGPAUIDirectDrawSurface7@@XZ
_TEXT	SEGMENT
?f3d_surface_render@@YGPAUIDirectDrawSurface7@@XZ PROC	; f3d_surface_render, COMDAT

; 343  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 344  : 	return ddraw.lpRenderBuffer;

  00009	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16

; 345  : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?f3d_surface_render@@YGPAUIDirectDrawSurface7@@XZ ENDP	; f3d_surface_render
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_surface_front@@YGPAUIDirectDrawSurface7@@XZ
_TEXT	SEGMENT
?f3d_surface_front@@YGPAUIDirectDrawSurface7@@XZ PROC	; f3d_surface_front, COMDAT

; 338  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 339  : 	return ddraw.lpFrontBuffer;

  00009	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+8

; 340  : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?f3d_surface_front@@YGPAUIDirectDrawSurface7@@XZ ENDP	; f3d_surface_front
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_surface_description@@YGXPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_surface$ = 8						; size = 4
_ddsd$ = 12						; size = 4
?f3d_surface_description@@YGXPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z PROC ; f3d_surface_description, COMDAT

; 323  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 324  : 	HRESULT
; 325  : 		ret;
; 326  : 
; 327  : 	ddsd->dwSize = sizeof ( *ddsd );

  00009	8b 45 0c	 mov	 eax, DWORD PTR _ddsd$[ebp]
  0000c	c7 00 7c 00 00
	00		 mov	 DWORD PTR [eax], 124	; 0000007cH

; 328  : 
; 329  : 	ret = IDirectDrawSurface7_GetSurfaceDesc ( surface, ddsd );

  00012	8b 45 0c	 mov	 eax, DWORD PTR _ddsd$[ebp]
  00015	50		 push	 eax
  00016	8b 4d 08	 mov	 ecx, DWORD PTR _surface$[ebp]
  00019	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001b	8b 45 08	 mov	 eax, DWORD PTR _surface$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4a 58	 mov	 ecx, DWORD PTR [edx+88]
  00022	ff d1		 call	 ecx
  00024	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 330  : 
; 331  : 	if ( ret != DD_OK )

  00027	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  0002b	74 17		 je	 SHORT $LN1@f3d_surfac

; 332  : 	{
; 333  : 		debug_fatal ( "Unable to get texture surface description: %s", get_ddraw_error_message ( ret ) );

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00036	50		 push	 eax
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@IJHOPHMD@Unable?5to?5get?5texture?5surface?5d@
  0003c	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00041	83 c4 08	 add	 esp, 8
$LN1@f3d_surfac:

; 334  : 	}
; 335  : }

  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
?f3d_surface_description@@YGXPAUIDirectDrawSurface7@@PAU_DDSURFACEDESC2@@@Z ENDP ; f3d_surface_description
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_surface_release@@YGXPAPAUIDirectDrawSurface7@@@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_texture_surface$ = 8					; size = 4
?f3d_surface_release@@YGXPAPAUIDirectDrawSurface7@@@Z PROC ; f3d_surface_release, COMDAT

; 373  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 374  : 	HRESULT
; 375  : 		ret;
; 376  : 
; 377  : 	if ( *texture_surface )

  00009	8b 45 08	 mov	 eax, DWORD PTR _texture_surface$[ebp]
  0000c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000f	74 58		 je	 SHORT $LN1@f3d_surfac

; 378  : 	{
; 379  : 		ret = IDirectDrawSurface7_Release ( *texture_surface );

  00011	8b 45 08	 mov	 eax, DWORD PTR _texture_surface$[ebp]
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	8b 55 08	 mov	 edx, DWORD PTR _texture_surface$[ebp]
  00019	8b 02		 mov	 eax, DWORD PTR [edx]
  0001b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0001d	50		 push	 eax
  0001e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00021	ff d2		 call	 edx
  00023	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 380  : 		if ( ret < DD_OK )

  00026	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  0002a	7d 1d		 jge	 SHORT $LN3@f3d_surfac

; 381  : 		{
; 382  : 			debug_log ( "Unable to release texture surface ( %d ): %s", ret, get_d3d_error_message ( ret ) );

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?get_d3d_error_message@@YGPBDJ@Z ; get_d3d_error_message
  00035	50		 push	 eax
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _ret$[ebp]
  00039	51		 push	 ecx
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@EGEKECGH@Unable?5to?5release?5texture?5surfa@
  0003f	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH
  00047	eb 17		 jmp	 SHORT $LN4@f3d_surfac
$LN3@f3d_surfac:

; 383  : 		}
; 384  : 		else if ( ret > DD_OK )

  00049	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  0004d	7e 11		 jle	 SHORT $LN4@f3d_surfac

; 385  : 		{
; 386  : 			debug_log ( "Unable to release texture surface, references: %d", ret );

  0004f	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00052	50		 push	 eax
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@JPDOJMOJ@Unable?5to?5release?5texture?5surfa@
  00058	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0005d	83 c4 08	 add	 esp, 8
$LN4@f3d_surfac:

; 387  : 		}
; 388  : 		*texture_surface = NULL;

  00060	8b 45 08	 mov	 eax, DWORD PTR _texture_surface$[ebp]
  00063	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN1@f3d_surfac:

; 389  : 	}
; 390  : }

  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
?f3d_surface_release@@YGXPAPAUIDirectDrawSurface7@@@Z ENDP ; f3d_surface_release
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_surface_create@@YGHPAU_DDSURFACEDESC2@@PAPAUIDirectDrawSurface7@@@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_ddsd$ = 8						; size = 4
_surface$ = 12						; size = 4
?f3d_surface_create@@YGHPAU_DDSURFACEDESC2@@PAPAUIDirectDrawSurface7@@@Z PROC ; f3d_surface_create, COMDAT

; 308  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 309  : 	HRESULT
; 310  : 		ret;
; 311  : 
; 312  : 	ret = IDirectDraw7_CreateSurface ( ddraw.ddraw, ddsd, surface, NULL );

  00009	6a 00		 push	 0
  0000b	8b 45 0c	 mov	 eax, DWORD PTR _surface$[ebp]
  0000e	50		 push	 eax
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _ddsd$[ebp]
  00012	51		 push	 ecx
  00013	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00019	8b 02		 mov	 eax, DWORD PTR [edx]
  0001b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00021	51		 push	 ecx
  00022	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00025	ff d2		 call	 edx
  00027	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 313  : 
; 314  : 	if ( ret != DD_OK )

  0002a	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  0002e	74 1b		 je	 SHORT $LN2@f3d_surfac

; 315  : 	{
; 316  : 		debug_fatal ( "Unable to create texture surface: %s", get_ddraw_error_message ( ret ) );

  00030	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00039	50		 push	 eax
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@CNFGHKEF@Unable?5to?5create?5texture?5surfac@
  0003f	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00044	83 c4 08	 add	 esp, 8

; 317  : 		return FALSE;

  00047	33 c0		 xor	 eax, eax
  00049	eb 05		 jmp	 SHORT $LN1@f3d_surfac
$LN2@f3d_surfac:

; 318  : 	}
; 319  : 	return TRUE;

  0004b	b8 01 00 00 00	 mov	 eax, 1
$LN1@f3d_surfac:

; 320  : }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
?f3d_surface_create@@YGHPAU_DDSURFACEDESC2@@PAPAUIDirectDrawSurface7@@@Z ENDP ; f3d_surface_create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_palette_release@@YGXPAPAUIDirectDrawPalette@@@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_texture_palette$ = 8					; size = 4
?f3d_palette_release@@YGXPAPAUIDirectDrawPalette@@@Z PROC ; f3d_palette_release, COMDAT

; 295  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 296  : 	HRESULT
; 297  : 		ret;
; 298  : 
; 299  : 	ret = IDirectDrawPalette_Release ( *texture_palette );

  00009	8b 45 08	 mov	 eax, DWORD PTR _texture_palette$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _texture_palette$[ebp]
  00011	8b 02		 mov	 eax, DWORD PTR [edx]
  00013	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00015	50		 push	 eax
  00016	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00019	ff d2		 call	 edx
  0001b	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 300  : 	if ( ret != DD_OK )

  0001e	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00022	74 17		 je	 SHORT $LN2@f3d_palett

; 301  : 	{
; 302  : 		debug_log ( "Unable to release palette: %s", get_ddraw_error_message ( ret ) );

  00024	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@KKFKCIOC@Unable?5to?5release?5palette?3?5?$CFs@
  00033	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00038	83 c4 08	 add	 esp, 8
$LN2@f3d_palett:

; 303  : 	}
; 304  : 	*texture_palette = NULL;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _texture_palette$[ebp]
  0003e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 305  : }

  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
?f3d_palette_release@@YGXPAPAUIDirectDrawPalette@@@Z ENDP ; f3d_palette_release
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_palette_create@@YGXPAUtagPALETTEENTRY@@PAPAUIDirectDrawPalette@@@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_palette$ = 8						; size = 4
_texture_palette$ = 12					; size = 4
?f3d_palette_create@@YGXPAUtagPALETTEENTRY@@PAPAUIDirectDrawPalette@@@Z PROC ; f3d_palette_create, COMDAT

; 282  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 283  : 	HRESULT
; 284  : 		ret;
; 285  : 
; 286  : 	ret = IDirectDraw7_CreatePalette ( ddraw.ddraw, DDPCAPS_8BIT | DDPCAPS_ALLOW256,

  00009	6a 00		 push	 0
  0000b	8b 45 0c	 mov	 eax, DWORD PTR _texture_palette$[ebp]
  0000e	50		 push	 eax
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _palette$[ebp]
  00012	51		 push	 ecx
  00013	6a 44		 push	 68			; 00000044H
  00015	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  0001b	8b 02		 mov	 eax, DWORD PTR [edx]
  0001d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  00023	51		 push	 ecx
  00024	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00027	ff d2		 call	 edx
  00029	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 287  : 		palette, texture_palette, NULL );
; 288  : 	if ( ret != DD_OK )

  0002c	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00030	74 17		 je	 SHORT $LN1@f3d_palett

; 289  : 	{
; 290  : 		debug_log ( "Unable to create a texture palette: %s", get_ddraw_error_message ( ret ) );

  00032	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@BGEOMMPH@Unable?5to?5create?5a?5texture?5pale@
  00041	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00046	83 c4 08	 add	 esp, 8
$LN1@f3d_palett:

; 291  : 	}
; 292  : }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
?f3d_palette_create@@YGXPAUtagPALETTEENTRY@@PAPAUIDirectDrawPalette@@@Z ENDP ; f3d_palette_create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_scene_end@@YGHXZ
_TEXT	SEGMENT
_ret$ = -4						; size = 4
?f3d_scene_end@@YGHXZ PROC				; f3d_scene_end, COMDAT

; 266  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 267  : 	HRESULT
; 268  : 		ret;
; 269  : 
; 270  : 	ret = IDirect3DDevice7_EndScene ( d3d_data.device );

  00009	a1 04 00 00 00	 mov	 eax, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  00016	52		 push	 edx
  00017	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0001a	ff d0		 call	 eax
  0001c	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 271  : 
; 272  : 	if ( FAILED ( ret ) )

  0001f	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00023	7d 1b		 jge	 SHORT $LN2@f3d_scene_

; 273  : 	{
; 274  : 		debug_log ( "Unable to EndScene: %s", get_d3d_error_message ( ret ) );

  00025	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?get_d3d_error_message@@YGPBDJ@Z ; get_d3d_error_message
  0002e	50		 push	 eax
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@CIENOBJL@Unable?5to?5EndScene?3?5?$CFs@
  00034	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00039	83 c4 08	 add	 esp, 8

; 275  : 		return FALSE;

  0003c	33 c0		 xor	 eax, eax
  0003e	eb 05		 jmp	 SHORT $LN1@f3d_scene_
$LN2@f3d_scene_:

; 276  : 	}
; 277  : 
; 278  : 	return TRUE;

  00040	b8 01 00 00 00	 mov	 eax, 1
$LN1@f3d_scene_:

; 279  : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
?f3d_scene_end@@YGHXZ ENDP				; f3d_scene_end
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_scene_begin@@YGHXZ
_TEXT	SEGMENT
_ret$ = -4						; size = 4
?f3d_scene_begin@@YGHXZ PROC				; f3d_scene_begin, COMDAT

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 251  : 	HRESULT
; 252  : 		ret;
; 253  : 
; 254  : 	ret = IDirect3DDevice7_BeginScene ( d3d_data.device );

  00009	a1 04 00 00 00	 mov	 eax, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  00016	52		 push	 edx
  00017	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0001a	ff d0		 call	 eax
  0001c	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 255  : 
; 256  : 	if ( FAILED ( ret ) )

  0001f	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00023	7d 1b		 jge	 SHORT $LN2@f3d_scene_

; 257  : 	{
; 258  : 		debug_log ( "Unable to start 3d scene: %s", get_d3d_error_message ( ret ) );

  00025	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?get_d3d_error_message@@YGPBDJ@Z ; get_d3d_error_message
  0002e	50		 push	 eax
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@NACLLPFH@Unable?5to?5start?53d?5scene?3?5?$CFs@
  00034	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00039	83 c4 08	 add	 esp, 8

; 259  : 		return FALSE;

  0003c	33 c0		 xor	 eax, eax
  0003e	eb 05		 jmp	 SHORT $LN1@f3d_scene_
$LN2@f3d_scene_:

; 260  : 	}
; 261  : 
; 262  : 	return TRUE;

  00040	b8 01 00 00 00	 mov	 eax, 1
$LN1@f3d_scene_:

; 263  : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
?f3d_scene_begin@@YGHXZ ENDP				; f3d_scene_begin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_set_material@@YGXPAU_D3DMATERIAL7@@@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_material$ = 8						; size = 4
?f3d_set_material@@YGXPAU_D3DMATERIAL7@@@Z PROC		; f3d_set_material, COMDAT

; 237  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 238  : 	HRESULT
; 239  : 		ret;
; 240  : 
; 241  : 	ret = IDirect3DDevice7_SetMaterial ( d3d_data.device, material );

  00009	8b 45 08	 mov	 eax, DWORD PTR _material$[ebp]
  0000c	50		 push	 eax
  0000d	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	a1 04 00 00 00	 mov	 eax, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  0001a	50		 push	 eax
  0001b	8b 4a 40	 mov	 ecx, DWORD PTR [edx+64]
  0001e	ff d1		 call	 ecx
  00020	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 242  : 
; 243  : 	if ( FAILED ( ret ) )

  00023	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00027	7d 17		 jge	 SHORT $LN1@f3d_set_ma

; 244  : 	{
; 245  : 		debug_log ( "Unable to set material: %s", get_ddraw_error_message ( ret ) );

  00029	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00032	50		 push	 eax
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@HBKAOIDJ@Unable?5to?5set?5material?3?5?$CFs@
  00038	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0003d	83 c4 08	 add	 esp, 8
$LN1@f3d_set_ma:

; 246  : 	}
; 247  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?f3d_set_material@@YGXPAU_D3DMATERIAL7@@@Z ENDP		; f3d_set_material
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_set_texture@@YGXIPAUSCREEN@@@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_ret$ = -4						; size = 4
_stage$ = 8						; size = 4
_texture$ = 12						; size = 4
?f3d_set_texture@@YGXIPAUSCREEN@@@Z PROC		; f3d_set_texture, COMDAT

; 211  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 212  : 	HRESULT
; 213  : 		ret;
; 214  : 
; 215  : 	ret = IDirect3DDevice7_SetTexture ( d3d_data.device, stage,

  00009	83 7d 0c 00	 cmp	 DWORD PTR _texture$[ebp], 0
  0000d	74 0b		 je	 SHORT $LN4@f3d_set_te
  0000f	8b 45 0c	 mov	 eax, DWORD PTR _texture$[ebp]
  00012	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00015	89 4d b8	 mov	 DWORD PTR tv70[ebp], ecx
  00018	eb 07		 jmp	 SHORT $LN5@f3d_set_te
$LN4@f3d_set_te:
  0001a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN5@f3d_set_te:
  00021	8b 55 b8	 mov	 edx, DWORD PTR tv70[ebp]
  00024	52		 push	 edx
  00025	8b 45 08	 mov	 eax, DWORD PTR _stage$[ebp]
  00028	50		 push	 eax
  00029	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  0002f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00031	a1 04 00 00 00	 mov	 eax, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  00036	50		 push	 eax
  00037	8b 8a 8c 00 00
	00		 mov	 ecx, DWORD PTR [edx+140]
  0003d	ff d1		 call	 ecx
  0003f	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 216  : 		texture ? texture->surface : NULL );
; 217  : 	if ( ret != DD_OK )

  00042	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00046	74 17		 je	 SHORT $LN1@f3d_set_te

; 218  : 	{
; 219  : 		debug_log ( "Unable to set texture: %s", get_ddraw_error_message ( ret ) );

  00048	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00051	50		 push	 eax
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@MONOLEAD@Unable?5to?5set?5texture?3?5?$CFs@
  00057	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0005c	83 c4 08	 add	 esp, 8
$LN1@f3d_set_te:

; 220  : 	}
; 221  : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 08 00	 ret	 8
?f3d_set_texture@@YGXIPAUSCREEN@@@Z ENDP		; f3d_set_texture
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_set_texture_state@@YGXIII@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_stage$ = 8						; size = 4
_state$ = 12						; size = 4
_data$ = 16						; size = 4
?f3d_set_texture_state@@YGXIII@Z PROC			; f3d_set_texture_state, COMDAT

; 224  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 225  : 	HRESULT
; 226  : 		ret;
; 227  : 
; 228  : 	ret = IDirect3DDevice7_SetTextureStageState ( d3d_data.device, (D3DTEXTURESTAGESTATETYPE)stage, (D3DTEXTURESTAGESTATETYPE)state, data );

  00009	8b 45 10	 mov	 eax, DWORD PTR _data$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR _state$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 08	 mov	 edx, DWORD PTR _stage$[ebp]
  00014	52		 push	 edx
  00015	a1 04 00 00 00	 mov	 eax, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  00022	52		 push	 edx
  00023	8b 81 94 00 00
	00		 mov	 eax, DWORD PTR [ecx+148]
  00029	ff d0		 call	 eax
  0002b	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 229  : 
; 230  : 	if ( ret != DD_OK )

  0002e	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00032	74 17		 je	 SHORT $LN1@f3d_set_te

; 231  : 	{
; 232  : 		debug_log ( "Unable to set texture: %s", get_ddraw_error_message ( ret ) );

  00034	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0003d	50		 push	 eax
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@MONOLEAD@Unable?5to?5set?5texture?3?5?$CFs@
  00043	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00048	83 c4 08	 add	 esp, 8
$LN1@f3d_set_te:

; 233  : 	}
; 234  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
?f3d_set_texture_state@@YGXIII@Z ENDP			; f3d_set_texture_state
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_render_state@@YGXII@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_state$ = 8						; size = 4
_data$ = 12						; size = 4
?f3d_render_state@@YGXII@Z PROC				; f3d_render_state, COMDAT

; 197  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 198  : 	HRESULT
; 199  : 		ret;
; 200  : 
; 201  : 	ret = IDirect3DDevice7_SetRenderState ( d3d_data.device, (D3DRENDERSTATETYPE)state, data );

  00009	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _state$[ebp]
  00010	51		 push	 ecx
  00011	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  00017	8b 02		 mov	 eax, DWORD PTR [edx]
  00019	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  0001f	51		 push	 ecx
  00020	8b 50 50	 mov	 edx, DWORD PTR [eax+80]
  00023	ff d2		 call	 edx
  00025	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 202  : 
; 203  : 	if ( ret != DD_OK )

  00028	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  0002c	74 17		 je	 SHORT $LN1@f3d_render

; 204  : 	{
; 205  : 		debug_log ( "Unable to set renderstate: %s", get_ddraw_error_message ( ret ) );

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00037	50		 push	 eax
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@DOLGOCPH@Unable?5to?5set?5renderstate?3?5?$CFs@
  0003d	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00042	83 c4 08	 add	 esp, 8
$LN1@f3d_render:

; 206  : 	}
; 207  : 
; 208  : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
?f3d_render_state@@YGXII@Z ENDP				; f3d_render_state
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_zbuffer_clear@@YGXM@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_value$ = 8						; size = 4
?f3d_zbuffer_clear@@YGXM@Z PROC				; f3d_zbuffer_clear, COMDAT

; 181  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 182  : 	HRESULT
; 183  : 		ret;
; 184  : 
; 185  : 	if ( d3d_data.device )

  00009	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4, 0
  00010	74 48		 je	 SHORT $LN3@f3d_zbuffe

; 186  : 	{
; 187  : 		ret = IDirect3DDevice7_Clear ( d3d_data.device, 0, NULL, D3DCLEAR_ZBUFFER, 0, value, 0 );

  00012	6a 00		 push	 0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _value$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	6a 00		 push	 0
  00021	6a 02		 push	 2
  00023	6a 00		 push	 0
  00025	6a 00		 push	 0
  00027	a1 04 00 00 00	 mov	 eax, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  00034	52		 push	 edx
  00035	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  00038	ff d0		 call	 eax
  0003a	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 188  : 
; 189  : 		if ( ret != DD_OK )

  0003d	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00041	74 17		 je	 SHORT $LN3@f3d_zbuffe

; 190  : 		{
; 191  : 			debug_log ( "Unable to clear zbuffer: %s", get_d3d_error_message ( ret ) );

  00043	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ?get_d3d_error_message@@YGPBDJ@Z ; get_d3d_error_message
  0004c	50		 push	 eax
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@ILIHOOND@Unable?5to?5clear?5zbuffer?3?5?$CFs@
  00052	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00057	83 c4 08	 add	 esp, 8
$LN3@f3d_zbuffe:

; 192  : 		}
; 193  : 	}
; 194  : }

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
?f3d_zbuffer_clear@@YGXM@Z ENDP				; f3d_zbuffer_clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_draw@@YGXIPAUIDirect3DVertexBuffer7@@II@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_type$ = 8						; size = 4
_buffer$ = 12						; size = 4
_start$ = 16						; size = 4
_total$ = 20						; size = 4
?f3d_draw@@YGXIPAUIDirect3DVertexBuffer7@@II@Z PROC	; f3d_draw, COMDAT

; 167  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 168  : 	HRESULT
; 169  : 		ret;
; 170  : 
; 171  : 	ret = IDirect3DDevice7_DrawPrimitiveVB ( d3d_data.device, (D3DPRIMITIVETYPE)type, buffer,

  00009	6a 00		 push	 0
  0000b	8b 45 14	 mov	 eax, DWORD PTR _total$[ebp]
  0000e	50		 push	 eax
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR _start$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 0c	 mov	 edx, DWORD PTR _buffer$[ebp]
  00016	52		 push	 edx
  00017	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  0001a	50		 push	 eax
  0001b	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  00021	8b 11		 mov	 edx, DWORD PTR [ecx]
  00023	a1 04 00 00 00	 mov	 eax, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  00028	50		 push	 eax
  00029	8b 4a 7c	 mov	 ecx, DWORD PTR [edx+124]
  0002c	ff d1		 call	 ecx
  0002e	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 172  : 		start, total, 0);
; 173  : 
; 174  : 	if ( FAILED ( ret ) )

  00031	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00035	7d 17		 jge	 SHORT $LN1@f3d_draw

; 175  : 	{
; 176  : 		debug_log ( "Unable to draw primitive: %s", get_d3d_error_message ( ret ) );

  00037	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?get_d3d_error_message@@YGPBDJ@Z ; get_d3d_error_message
  00040	50		 push	 eax
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@MGEHMABO@Unable?5to?5draw?5primitive?3?5?$CFs@
  00046	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0004b	83 c4 08	 add	 esp, 8
$LN1@f3d_draw:

; 177  : 	}
; 178  : }

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 10 00	 ret	 16			; 00000010H
?f3d_draw@@YGXIPAUIDirect3DVertexBuffer7@@II@Z ENDP	; f3d_draw
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_draw_vb@@YGXIPAUIDirect3DVertexBuffer7@@IIPAGI@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_type$ = 8						; size = 4
_buffer$ = 12						; size = 4
_start$ = 16						; size = 4
_total$ = 20						; size = 4
_indices$ = 24						; size = 4
_count$ = 28						; size = 4
?f3d_draw_vb@@YGXIPAUIDirect3DVertexBuffer7@@IIPAGI@Z PROC ; f3d_draw_vb, COMDAT

; 152  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 153  : 	HRESULT
; 154  : 		ret;
; 155  : 
; 156  : 	ret = IDirect3DDevice7_DrawIndexedPrimitiveVB ( d3d_data.device, (D3DPRIMITIVETYPE)type, buffer,

  00009	6a 00		 push	 0
  0000b	8b 45 1c	 mov	 eax, DWORD PTR _count$[ebp]
  0000e	50		 push	 eax
  0000f	8b 4d 18	 mov	 ecx, DWORD PTR _indices$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 14	 mov	 edx, DWORD PTR _total$[ebp]
  00016	52		 push	 edx
  00017	8b 45 10	 mov	 eax, DWORD PTR _start$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR _buffer$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR _type$[ebp]
  00022	52		 push	 edx
  00023	a1 04 00 00 00	 mov	 eax, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  00030	52		 push	 edx
  00031	8b 81 80 00 00
	00		 mov	 eax, DWORD PTR [ecx+128]
  00037	ff d0		 call	 eax
  00039	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 157  : 		start, total, indices, count, 0);
; 158  : 
; 159  : 	if ( FAILED ( ret ) )

  0003c	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00040	7d 17		 jge	 SHORT $LN1@f3d_draw_v

; 160  : 	{
; 161  : 		debug_log ( "Unable to draw indexed primitive: %s", get_d3d_error_message ( ret ) );

  00042	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?get_d3d_error_message@@YGPBDJ@Z ; get_d3d_error_message
  0004b	50		 push	 eax
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@NBIHNKFA@Unable?5to?5draw?5indexed?5primitiv@
  00051	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00056	83 c4 08	 add	 esp, 8
$LN1@f3d_draw_v:

; 162  : 	}
; 163  : }

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 18 00	 ret	 24			; 00000018H
?f3d_draw_vb@@YGXIPAUIDirect3DVertexBuffer7@@IIPAGI@Z ENDP ; f3d_draw_vb
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_vertex_optimize@@YGXPAUIDirect3DVertexBuffer7@@@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_buffer$ = 8						; size = 4
?f3d_vertex_optimize@@YGXPAUIDirect3DVertexBuffer7@@@Z PROC ; f3d_vertex_optimize, COMDAT

; 99   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 100  : 	HRESULT
; 101  : 		ret;
; 102  : 
; 103  : 	ret = IDirect3DVertexBuffer7_Optimize ( buffer, d3d_data.device, 0 );

  00009	6a 00		 push	 0
  0000b	a1 04 00 00 00	 mov	 eax, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  00010	50		 push	 eax
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00019	50		 push	 eax
  0001a	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
  0001d	ff d1		 call	 ecx
  0001f	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 104  : 
; 105  : 	if ( FAILED ( ret ) )

  00022	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00026	7d 17		 jge	 SHORT $LN1@f3d_vertex

; 106  : 	{
; 107  : 		debug_fatal ( "Unable to optimize vertex buffer: %s", get_d3d_error_message ( ret ) );

  00028	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?get_d3d_error_message@@YGPBDJ@Z ; get_d3d_error_message
  00031	50		 push	 eax
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BPGGPPID@Unable?5to?5optimize?5vertex?5buffe@
  00037	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0003c	83 c4 08	 add	 esp, 8
$LN1@f3d_vertex:

; 108  : 	}
; 109  : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
?f3d_vertex_optimize@@YGXPAUIDirect3DVertexBuffer7@@@Z ENDP ; f3d_vertex_optimize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_vertex_unlock@@YGXPAUIDirect3DVertexBuffer7@@@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_buffer$ = 8						; size = 4
?f3d_vertex_unlock@@YGXPAUIDirect3DVertexBuffer7@@@Z PROC ; f3d_vertex_unlock, COMDAT

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 138  : 	HRESULT
; 139  : 		ret;
; 140  : 
; 141  : 	LPD3DVERTEXBUFFERDESC dummy;
; 142  : 	ret = IDirect3DVertexBuffer7_Unlock(buffer);

  00009	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _buffer$[ebp]
  00011	52		 push	 edx
  00012	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00015	ff d0		 call	 eax
  00017	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 143  : 
; 144  : 	if (FAILED(ret))

  0001a	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  0001e	7d 17		 jge	 SHORT $LN1@f3d_vertex

; 145  : 	{
; 146  : 		debug_log("Unable to unlock hardware vertices: %s", get_d3d_error_message(ret));

  00020	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 ?get_d3d_error_message@@YGPBDJ@Z ; get_d3d_error_message
  00029	50		 push	 eax
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@PNAKMJIC@Unable?5to?5unlock?5hardware?5verti@
  0002f	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00034	83 c4 08	 add	 esp, 8
$LN1@f3d_vertex:

; 147  : 	}
; 148  : }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?f3d_vertex_unlock@@YGXPAUIDirect3DVertexBuffer7@@@Z ENDP ; f3d_vertex_unlock
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_vertex_lock_strict@@YGXPAUIDirect3DVertexBuffer7@@IPAPAX@Z
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_flags$ = 12						; size = 4
_ptr$ = 16						; size = 4
?f3d_vertex_lock_strict@@YGXPAUIDirect3DVertexBuffer7@@IPAPAX@Z PROC ; f3d_vertex_lock_strict, COMDAT

; 129  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 130  : 	if ( !f3d_vertex_lock ( buffer, flags, ptr ) )

  00009	8b 45 10	 mov	 eax, DWORD PTR _ptr$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR _flags$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 08	 mov	 edx, DWORD PTR _buffer$[ebp]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ?f3d_vertex_lock@@YGHPAUIDirect3DVertexBuffer7@@IPAPAX@Z ; f3d_vertex_lock
  0001a	85 c0		 test	 eax, eax
  0001c	75 0d		 jne	 SHORT $LN1@f3d_vertex

; 131  : 	{
; 132  : 		debug_fatal ( "Unable to lock vertex buffer" );

  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@GONAICMB@Unable?5to?5lock?5vertex?5buffer@
  00023	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00028	83 c4 04	 add	 esp, 4
$LN1@f3d_vertex:

; 133  : 	}
; 134  : }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 0c 00	 ret	 12			; 0000000cH
?f3d_vertex_lock_strict@@YGXPAUIDirect3DVertexBuffer7@@IPAPAX@Z ENDP ; f3d_vertex_lock_strict
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_vertex_lock@@YGHPAUIDirect3DVertexBuffer7@@IPAPAX@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_buffer$ = 8						; size = 4
_flags$ = 12						; size = 4
_ptr$ = 16						; size = 4
?f3d_vertex_lock@@YGHPAUIDirect3DVertexBuffer7@@IPAPAX@Z PROC ; f3d_vertex_lock, COMDAT

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 114  : 	HRESULT
; 115  : 		ret;
; 116  : 
; 117  : 	ret = IDirect3DVertexBuffer7_Lock ( buffer, flags, ptr, NULL );

  00009	6a 00		 push	 0
  0000b	8b 45 10	 mov	 eax, DWORD PTR _ptr$[ebp]
  0000e	50		 push	 eax
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR _flags$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 08	 mov	 edx, DWORD PTR _buffer$[ebp]
  00016	8b 02		 mov	 eax, DWORD PTR [edx]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  0001b	51		 push	 ecx
  0001c	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0001f	ff d2		 call	 edx
  00021	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 118  : 
; 119  : 	if ( FAILED ( ret ) )

  00024	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00028	7d 1b		 jge	 SHORT $LN2@f3d_vertex

; 120  : 	{
; 121  : 		debug_log ( "Unable to lock vertex buffer: %s", get_d3d_error_message ( ret ) );

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?get_d3d_error_message@@YGPBDJ@Z ; get_d3d_error_message
  00033	50		 push	 eax
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@HGEFGOOK@Unable?5to?5lock?5vertex?5buffer?3?5?$CF@
  00039	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0003e	83 c4 08	 add	 esp, 8

; 122  : 		return FALSE;

  00041	33 c0		 xor	 eax, eax
  00043	eb 05		 jmp	 SHORT $LN1@f3d_vertex
$LN2@f3d_vertex:

; 123  : 	}
; 124  : 
; 125  : 	return TRUE;

  00045	b8 01 00 00 00	 mov	 eax, 1
$LN1@f3d_vertex:

; 126  : }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c2 0c 00	 ret	 12			; 0000000cH
?f3d_vertex_lock@@YGHPAUIDirect3DVertexBuffer7@@IPAPAX@Z ENDP ; f3d_vertex_lock
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_vertex_release@@YGXPAPAUIDirect3DVertexBuffer7@@@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_buffer$ = 8						; size = 4
?f3d_vertex_release@@YGXPAPAUIDirect3DVertexBuffer7@@@Z PROC ; f3d_vertex_release, COMDAT

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 85   : 	HRESULT
; 86   : 		ret;
; 87   : 
; 88   : 	ret = IDirect3DVertexBuffer_Release ( *buffer );

  00009	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _buffer$[ebp]
  00011	8b 02		 mov	 eax, DWORD PTR [edx]
  00013	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00015	50		 push	 eax
  00016	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00019	ff d2		 call	 edx
  0001b	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 89   : 
; 90   : 	if ( FAILED ( ret ) )

  0001e	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00022	7d 17		 jge	 SHORT $LN2@f3d_vertex

; 91   : 	{
; 92   : 		debug_log ( "Unable to release primary vertex buffer: %s", get_d3d_error_message ( ret ) );

  00024	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?get_d3d_error_message@@YGPBDJ@Z ; get_d3d_error_message
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@NEDFFLFB@Unable?5to?5release?5primary?5verte@
  00033	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00038	83 c4 08	 add	 esp, 8
$LN2@f3d_vertex:

; 93   : 	}
; 94   : 
; 95   : 	*buffer = NULL;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  0003e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 96   : }

  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
?f3d_vertex_release@@YGXPAPAUIDirect3DVertexBuffer7@@@Z ENDP ; f3d_vertex_release
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_vertex_create@@YGXPAU_D3DVERTEXBUFFERDESC@@PAPAUIDirect3DVertexBuffer7@@@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_desc$ = 8						; size = 4
_buffer$ = 12						; size = 4
?f3d_vertex_create@@YGXPAU_D3DVERTEXBUFFERDESC@@PAPAUIDirect3DVertexBuffer7@@@Z PROC ; f3d_vertex_create, COMDAT

; 71   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 72   : 	HRESULT
; 73   : 		ret;
; 74   : 
; 75   : 	ret = IDirect3D7_CreateVertexBuffer ( d3d_data.d3d, desc, buffer, 0 );

  00009	6a 00		 push	 0
  0000b	8b 45 0c	 mov	 eax, DWORD PTR _buffer$[ebp]
  0000e	50		 push	 eax
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _desc$[ebp]
  00012	51		 push	 ecx
  00013	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A
  00019	8b 02		 mov	 eax, DWORD PTR [edx]
  0001b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A
  00021	51		 push	 ecx
  00022	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00025	ff d2		 call	 edx
  00027	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 76   : 
; 77   : 	if ( FAILED ( ret ) )

  0002a	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  0002e	7d 17		 jge	 SHORT $LN1@f3d_vertex

; 78   : 	{
; 79   : 		debug_fatal ( "Unable to create vertex buffer: %s", get_d3d_error_message ( ret ) );

  00030	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?get_d3d_error_message@@YGPBDJ@Z ; get_d3d_error_message
  00039	50		 push	 eax
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@EANIFNAM@Unable?5to?5create?5vertex?5buffer?3@
  0003f	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00044	83 c4 08	 add	 esp, 8
$LN1@f3d_vertex:

; 80   : 	}
; 81   : }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
?f3d_vertex_create@@YGXPAU_D3DVERTEXBUFFERDESC@@PAPAUIDirect3DVertexBuffer7@@@Z ENDP ; f3d_vertex_create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_set_viewport@@YGHPAU_D3DVIEWPORT7@@@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_viewport$ = 8						; size = 4
?f3d_set_viewport@@YGHPAU_D3DVIEWPORT7@@@Z PROC		; f3d_set_viewport, COMDAT

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 56   : 	HRESULT
; 57   : 		ret;
; 58   : 
; 59   : 	ret = IDirect3DDevice7_SetViewport ( d3d_data.device, viewport );

  00009	8b 45 08	 mov	 eax, DWORD PTR _viewport$[ebp]
  0000c	50		 push	 eax
  0000d	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	a1 04 00 00 00	 mov	 eax, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  0001a	50		 push	 eax
  0001b	8b 4a 34	 mov	 ecx, DWORD PTR [edx+52]
  0001e	ff d1		 call	 ecx
  00020	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 60   : 
; 61   : 	if ( ret != D3D_OK )

  00023	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00027	74 1b		 je	 SHORT $LN2@f3d_set_vi

; 62   : 	{
; 63   : 		debug_log ( "Unable to set viewport7: %s", get_d3d_error_message ( ret ) );

  00029	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?get_d3d_error_message@@YGPBDJ@Z ; get_d3d_error_message
  00032	50		 push	 eax
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@FBADHJLL@Unable?5to?5set?5viewport7?3?5?$CFs@
  00038	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0003d	83 c4 08	 add	 esp, 8

; 64   : 		return FALSE;

  00040	33 c0		 xor	 eax, eax
  00042	eb 05		 jmp	 SHORT $LN1@f3d_set_vi
$LN2@f3d_set_vi:

; 65   : 	}
; 66   : 
; 67   : 	return TRUE;

  00044	b8 01 00 00 00	 mov	 eax, 1
$LN1@f3d_set_vi:

; 68   : }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
?f3d_set_viewport@@YGHPAU_D3DVIEWPORT7@@@Z ENDP		; f3d_set_viewport
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_set_transform@@YGXIPAU_D3DMATRIX@@@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_type$ = 8						; size = 4
_matrix$ = 12						; size = 4
?f3d_set_transform@@YGXIPAU_D3DMATRIX@@@Z PROC		; f3d_set_transform, COMDAT

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 43   : 	HRESULT
; 44   : 		ret;
; 45   : 
; 46   : 	ret = IDirect3DDevice7_SetTransform ( d3d_data.device, (D3DTRANSFORMSTATETYPE)type, matrix );

  00009	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _type$[ebp]
  00010	51		 push	 ecx
  00011	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  00017	8b 02		 mov	 eax, DWORD PTR [edx]
  00019	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  0001f	51		 push	 ecx
  00020	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  00023	ff d2		 call	 edx
  00025	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 47   : 
; 48   : 	if ( FAILED ( ret ) )

  00028	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  0002c	7d 1b		 jge	 SHORT $LN1@f3d_set_tr

; 49   : 	{
; 50   : 		debug_log ( "Unable to set %u transfom: %s", type, get_d3d_error_message ( ret ) );

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ?get_d3d_error_message@@YGPBDJ@Z ; get_d3d_error_message
  00037	50		 push	 eax
  00038	8b 4d 08	 mov	 ecx, DWORD PTR _type$[ebp]
  0003b	51		 push	 ecx
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@LLLMLGK@Unable?5to?5set?5?$CFu?5transfom?3?5?$CFs@
  00041	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@f3d_set_tr:

; 51   : 	}
; 52   : }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
?f3d_set_transform@@YGXIPAU_D3DMATRIX@@@Z ENDP		; f3d_set_transform
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_light_enable@@YGXII@Z
_TEXT	SEGMENT
tv75 = -72						; size = 4
_ret$ = -4						; size = 4
_index$ = 8						; size = 4
_state$ = 12						; size = 4
?f3d_light_enable@@YGXII@Z PROC				; f3d_light_enable, COMDAT

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 29   : 	HRESULT
; 30   : 		ret;
; 31   : 
; 32   : 	ret = IDirect3DDevice7_LightEnable ( d3d_data.device, index, state );

  00009	8b 45 0c	 mov	 eax, DWORD PTR _state$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _index$[ebp]
  00010	51		 push	 ecx
  00011	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  00017	8b 02		 mov	 eax, DWORD PTR [edx]
  00019	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  0001f	51		 push	 ecx
  00020	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  00026	ff d2		 call	 edx
  00028	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 33   : 
; 34   : 	if ( FAILED ( ret ) )

  0002b	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  0002f	7d 31		 jge	 SHORT $LN1@f3d_light_

; 35   : 	{
; 36   : 		debug_log ( "Unable to %sable light: %s", state ? "en" : "dis",

  00031	83 7d 0c 00	 cmp	 DWORD PTR _state$[ebp], 0
  00035	74 09		 je	 SHORT $LN4@f3d_light_
  00037	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], OFFSET ??_C@_02LFNMGJAP@en@
  0003e	eb 07		 jmp	 SHORT $LN5@f3d_light_
$LN4@f3d_light_:
  00040	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], OFFSET ??_C@_03CJOLJKCN@dis@
$LN5@f3d_light_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?get_d3d_error_message@@YGPBDJ@Z ; get_d3d_error_message
  00050	50		 push	 eax
  00051	8b 4d b8	 mov	 ecx, DWORD PTR tv75[ebp]
  00054	51		 push	 ecx
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@FFOHIKHH@Unable?5to?5?$CFsable?5light?3?5?$CFs@
  0005a	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@f3d_light_:

; 37   : 			get_d3d_error_message ( ret ) );
; 38   : 	}
; 39   : }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 08 00	 ret	 8
?f3d_light_enable@@YGXII@Z ENDP				; f3d_light_enable
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dfunc.c
;	COMDAT ?f3d_set_light@@YGXIPAU_D3DLIGHT7@@@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_index$ = 8						; size = 4
_light$ = 12						; size = 4
?f3d_set_light@@YGXIPAU_D3DLIGHT7@@@Z PROC		; f3d_set_light, COMDAT

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 16   : 	HRESULT
; 17   : 		ret;
; 18   : 
; 19   : 	ret = IDirect3DDevice7_SetLight ( d3d_data.device, index, light );

  00009	8b 45 0c	 mov	 eax, DWORD PTR _light$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _index$[ebp]
  00010	51		 push	 ecx
  00011	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  00017	8b 02		 mov	 eax, DWORD PTR [edx]
  00019	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  0001f	51		 push	 ecx
  00020	8b 50 48	 mov	 edx, DWORD PTR [eax+72]
  00023	ff d2		 call	 edx
  00025	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 20   : 
; 21   : 	if ( FAILED ( ret ) )

  00028	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  0002c	7d 17		 jge	 SHORT $LN1@f3d_set_li

; 22   : 	{
; 23   : 		debug_log ( "Unable to set light: %s", get_d3d_error_message ( ret ) );

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ?get_d3d_error_message@@YGPBDJ@Z ; get_d3d_error_message
  00037	50		 push	 eax
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@JFKINAMK@Unable?5to?5set?5light?3?5?$CFs@
  0003d	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00042	83 c4 08	 add	 esp, 8
$LN1@f3d_set_li:

; 24   : 	}
; 25   : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
?f3d_set_light@@YGXIPAU_D3DLIGHT7@@@Z ENDP		; f3d_set_light
_TEXT	ENDS
END
