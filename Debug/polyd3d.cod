; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\graphics\polyd3d.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?polygon_shadow_colour@@3KA			; polygon_shadow_colour
PUBLIC	?polygon_shadow_zbias@@3MA			; polygon_shadow_zbias
_BSS	SEGMENT
?polygon_shadow_colour@@3KA DD 01H DUP (?)		; polygon_shadow_colour
?polygon_shadow_zbias@@3MA DD 01H DUP (?)		; polygon_shadow_zbias
_BSS	ENDS
PUBLIC	?draw_wbuffered_plain_line@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z ; draw_wbuffered_plain_line
PUBLIC	?draw_wbuffered_flat_shaded_textured_line@@YGXPAUVERTEX@@PAUSCREEN@@UREAL_COLOUR@@@Z ; draw_wbuffered_flat_shaded_textured_line
PUBLIC	?draw_wbuffered_gouraud_shaded_line@@YGXPAUVERTEX@@MMM@Z ; draw_wbuffered_gouraud_shaded_line
PUBLIC	?draw_wbuffered_gouraud_shaded_textured_line@@YGXPAUVERTEX@@PAUSCREEN@@@Z ; draw_wbuffered_gouraud_shaded_textured_line
PUBLIC	?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_plain_polygon
PUBLIC	?draw_wbuffered_gouraud_shaded_polygon@@YGXPAUVERTEX@@MMMH@Z ; draw_wbuffered_gouraud_shaded_polygon
PUBLIC	?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_flat_shaded_textured_polygon
PUBLIC	?draw_wbuffered_gouraud_shaded_textured_polygon@@YGXPAUVERTEX@@@Z ; draw_wbuffered_gouraud_shaded_textured_polygon
PUBLIC	?draw_wbuffered_gouraud_coloured_distance_fogged_textured_polygon@@YGXPAUVERTEX@@PAUSCREEN@@@Z ; draw_wbuffered_gouraud_coloured_distance_fogged_textured_polygon
PUBLIC	?draw_wbuffered_shadow_polygon@@YGXPAUVERTEX@@MMM@Z ; draw_wbuffered_shadow_polygon
PUBLIC	?draw_wbuffered_shadow_textured_polygon@@YGXPAUVERTEX@@PAUSCREEN@@@Z ; draw_wbuffered_shadow_textured_polygon
PUBLIC	?set_d3d_shadow_colour@@YGXMMMM@Z		; set_d3d_shadow_colour
PUBLIC	?set_d3d_shadow_zbias@@YGXM@Z			; set_d3d_shadow_zbias
PUBLIC	__real@4b40005a
EXTRN	?draw_fan_primitive@@YGXHPAU_D3DTLVERTEX@@@Z:PROC ; draw_fan_primitive
EXTRN	?draw_line_primitive@@YGXPAU_D3DTLVERTEX@@@Z:PROC ; draw_line_primitive
EXTRN	?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; set_d3d_int_state
EXTRN	?set_d3d_texture@@YGXHPAUSCREEN@@@Z:PROC	; set_d3d_texture
EXTRN	?set_d3d_texture_stage_state@@YGXHHH@Z:PROC	; set_d3d_texture_stage_state
EXTRN	?get_d3d_vertices_address@@YGPAU_D3DTLVERTEX@@PAUVERTEX@@PAH@Z:PROC ; get_d3d_vertices_address
EXTRN	?get_d3d_line_vertices_points_address@@YGPAU_D3DTLVERTEX@@XZ:PROC ; get_d3d_line_vertices_points_address
EXTRN	?d3d_fog_intensity@@3KA:DWORD			; d3d_fog_intensity
EXTRN	?zbuffer_factor@@3NA:QWORD			; zbuffer_factor
EXTRN	?zbuffer_constant@@3NA:QWORD			; zbuffer_constant
EXTRN	__fltused:DWORD
;	COMDAT __real@4b40005a
CONST	SEGMENT
__real@4b40005a DD 04b40005ar			; 1.2583e+07
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\polyd3d.c
;	COMDAT ?set_d3d_shadow_zbias@@YGXM@Z
_TEXT	SEGMENT
_bias$ = 8						; size = 4
?set_d3d_shadow_zbias@@YGXM@Z PROC			; set_d3d_shadow_zbias, COMDAT

; 675  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 676  : 
; 677  : 	polygon_shadow_zbias = bias;

  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _bias$[ebp]
  0000e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?polygon_shadow_zbias@@3MA, xmm0

; 678  : }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?set_d3d_shadow_zbias@@YGXM@Z ENDP			; set_d3d_shadow_zbias
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\polyd3d.c
;	COMDAT ?set_d3d_shadow_colour@@YGXMMMM@Z
_TEXT	SEGMENT
_fa$ = -32						; size = 4
_fb$ = -28						; size = 4
_fg$ = -24						; size = 4
_fr$ = -20						; size = 4
_a$ = -16						; size = 4
_b$ = -12						; size = 4
_g$ = -8						; size = 4
_r$ = -4						; size = 4
_red$ = 8						; size = 4
_green$ = 12						; size = 4
_blue$ = 16						; size = 4
_alpha$ = 20						; size = 4
?set_d3d_shadow_colour@@YGXMMMM@Z PROC			; set_d3d_shadow_colour, COMDAT

; 643  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 644  : 
; 645  : 	int
; 646  : 		r,
; 647  : 		g,
; 648  : 		b,
; 649  : 		a;
; 650  : 
; 651  : 	float
; 652  : 		fr,
; 653  : 		fg,
; 654  : 		fb,
; 655  : 		fa;
; 656  : 
; 657  : 	fr = red + FLOAT_FLOAT_FACTOR;

  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _red$[ebp]
  0000e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00016	f3 0f 11 45 ec	 movss	 DWORD PTR _fr$[ebp], xmm0

; 658  : 	fg = green + FLOAT_FLOAT_FACTOR;

  0001b	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _green$[ebp]
  00020	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00028	f3 0f 11 45 e8	 movss	 DWORD PTR _fg$[ebp], xmm0

; 659  : 	fb = blue + FLOAT_FLOAT_FACTOR;

  0002d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _blue$[ebp]
  00032	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0003a	f3 0f 11 45 e4	 movss	 DWORD PTR _fb$[ebp], xmm0

; 660  : 	fa = alpha + FLOAT_FLOAT_FACTOR;

  0003f	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _alpha$[ebp]
  00044	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0004c	f3 0f 11 45 e0	 movss	 DWORD PTR _fa$[ebp], xmm0

; 661  : 
; 662  : 	r = ( *( int * ) &fr ) - INTEGER_FLOAT_FACTOR;

  00051	8b 45 ec	 mov	 eax, DWORD PTR _fr$[ebp]
  00054	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00059	89 45 fc	 mov	 DWORD PTR _r$[ebp], eax

; 663  : 	g = ( *( int * ) &fg ) - INTEGER_FLOAT_FACTOR;

  0005c	8b 45 e8	 mov	 eax, DWORD PTR _fg$[ebp]
  0005f	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00064	89 45 f8	 mov	 DWORD PTR _g$[ebp], eax

; 664  : 	b = ( *( int * ) &fb ) - INTEGER_FLOAT_FACTOR;

  00067	8b 45 e4	 mov	 eax, DWORD PTR _fb$[ebp]
  0006a	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0006f	89 45 f4	 mov	 DWORD PTR _b$[ebp], eax

; 665  : 	a = ( *( int * ) &fa ) - INTEGER_FLOAT_FACTOR;

  00072	8b 45 e0	 mov	 eax, DWORD PTR _fa$[ebp]
  00075	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0007a	89 45 f0	 mov	 DWORD PTR _a$[ebp], eax

; 666  : 
; 667  : 	polygon_shadow_colour = RGBA_MAKE ( r, g, b, a );

  0007d	8b 45 f0	 mov	 eax, DWORD PTR _a$[ebp]
  00080	c1 e0 18	 shl	 eax, 24			; 00000018H
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _r$[ebp]
  00086	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00089	0b c1		 or	 eax, ecx
  0008b	8b 55 f8	 mov	 edx, DWORD PTR _g$[ebp]
  0008e	c1 e2 08	 shl	 edx, 8
  00091	0b c2		 or	 eax, edx
  00093	0b 45 f4	 or	 eax, DWORD PTR _b$[ebp]
  00096	a3 00 00 00 00	 mov	 DWORD PTR ?polygon_shadow_colour@@3KA, eax ; polygon_shadow_colour

; 668  : }

  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 10 00	 ret	 16			; 00000010H
?set_d3d_shadow_colour@@YGXMMMM@Z ENDP			; set_d3d_shadow_colour
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\polyd3d.c
;	COMDAT ?draw_wbuffered_shadow_textured_polygon@@YGXPAUVERTEX@@PAUSCREEN@@@Z
_TEXT	SEGMENT
_vptr$ = -16						; size = 4
_vertices$ = -12					; size = 4
_vert$ = -8						; size = 4
_number_of_vertices$ = -4				; size = 4
_polygon$ = 8						; size = 4
_texture$ = 12						; size = 4
?draw_wbuffered_shadow_textured_polygon@@YGXPAUVERTEX@@PAUSCREEN@@@Z PROC ; draw_wbuffered_shadow_textured_polygon, COMDAT

; 592  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 593  : 
; 594  : 	int
; 595  : 		number_of_vertices;
; 596  : 
; 597  : 	vertex
; 598  : 		*vert;
; 599  : 
; 600  : 	LPD3DTLVERTEX
; 601  : 		vertices,
; 602  : 		vptr;
; 603  : 
; 604  : 	//
; 605  : 	// First, make sure the texture has a hardware component
; 606  : 	//
; 607  : 
; 608  : 	set_d3d_texture ( 0, texture );

  00009	8b 45 0c	 mov	 eax, DWORD PTR _texture$[ebp]
  0000c	50		 push	 eax
  0000d	6a 00		 push	 0
  0000f	e8 00 00 00 00	 call	 ?set_d3d_texture@@YGXHPAUSCREEN@@@Z ; set_d3d_texture

; 609  : 
; 610  : 	set_d3d_int_state ( D3DRENDERSTATE_SHADEMODE, D3DSHADE_FLAT );

  00014	6a 01		 push	 1
  00016	6a 09		 push	 9
  00018	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 611  : 
; 612  : 	vert = polygon;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00020	89 45 f8	 mov	 DWORD PTR _vert$[ebp], eax

; 613  : 
; 614  : 	vertices = get_d3d_vertices_address ( polygon, &number_of_vertices );

  00023	8d 45 fc	 lea	 eax, DWORD PTR _number_of_vertices$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR _polygon$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ?get_d3d_vertices_address@@YGPAU_D3DTLVERTEX@@PAUVERTEX@@PAH@Z ; get_d3d_vertices_address
  00030	89 45 f4	 mov	 DWORD PTR _vertices$[ebp], eax

; 615  : 
; 616  : 	vptr = vertices;

  00033	8b 45 f4	 mov	 eax, DWORD PTR _vertices$[ebp]
  00036	89 45 f0	 mov	 DWORD PTR _vptr$[ebp], eax
$LN2@draw_wbuff:

; 617  : 
; 618  : 	while ( vert )

  00039	83 7d f8 00	 cmp	 DWORD PTR _vert$[ebp], 0
  0003d	0f 84 8e 00 00
	00		 je	 $LN3@draw_wbuff

; 619  : 	{
; 620  : 
; 621  : 		*( ( int * ) &vptr->sx ) = *( ( int * ) &vert->i );

  00043	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00046	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  00049	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0004c	89 10		 mov	 DWORD PTR [eax], edx

; 622  : 		*( ( int * ) &vptr->sy ) = *( ( int * ) &vert->j );

  0004e	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00051	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  00054	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00057	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 623  : 		*( ( int * ) &vptr->tu ) = *( ( int * ) &vert->u );

  0005a	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  0005d	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  00060	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00063	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 624  : 		*( ( int * ) &vptr->tv ) = *( ( int * ) &vert->v );

  00066	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00069	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  0006c	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0006f	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 625  : 		*( ( int * ) &vptr->rhw ) = *( ( int * ) &vert->q );

  00072	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00075	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  00078	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0007b	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 626  : 		vptr->sz = ( vert->q * zbuffer_factor ) + zbuffer_constant;

  0007e	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  00081	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  00086	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR ?zbuffer_factor@@3NA
  0008e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR ?zbuffer_constant@@3NA
  00096	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0009a	8b 4d f0	 mov	 ecx, DWORD PTR _vptr$[ebp]
  0009d	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 627  : 		vptr->color = polygon_shadow_colour;

  000a2	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  000a5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?polygon_shadow_colour@@3KA ; polygon_shadow_colour
  000ab	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 628  : 		vptr->specular = d3d_fog_intensity;

  000ae	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  000b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_fog_intensity@@3KA ; d3d_fog_intensity
  000b7	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 629  : 
; 630  : 		vptr++;

  000ba	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  000bd	83 c0 20	 add	 eax, 32			; 00000020H
  000c0	89 45 f0	 mov	 DWORD PTR _vptr$[ebp], eax

; 631  : 
; 632  : 		vert = vert->next_vertex;

  000c3	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  000c6	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  000c9	89 4d f8	 mov	 DWORD PTR _vert$[ebp], ecx

; 633  : 	}

  000cc	e9 68 ff ff ff	 jmp	 $LN2@draw_wbuff
$LN3@draw_wbuff:

; 634  : 
; 635  : 	draw_fan_primitive ( number_of_vertices, vertices );

  000d1	8b 45 f4	 mov	 eax, DWORD PTR _vertices$[ebp]
  000d4	50		 push	 eax
  000d5	8b 4d fc	 mov	 ecx, DWORD PTR _number_of_vertices$[ebp]
  000d8	51		 push	 ecx
  000d9	e8 00 00 00 00	 call	 ?draw_fan_primitive@@YGXHPAU_D3DTLVERTEX@@@Z ; draw_fan_primitive

; 636  : }

  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	8b e5		 mov	 esp, ebp
  000e3	5d		 pop	 ebp
  000e4	c2 08 00	 ret	 8
?draw_wbuffered_shadow_textured_polygon@@YGXPAUVERTEX@@PAUSCREEN@@@Z ENDP ; draw_wbuffered_shadow_textured_polygon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\polyd3d.c
;	COMDAT ?draw_wbuffered_shadow_polygon@@YGXPAUVERTEX@@MMM@Z
_TEXT	SEGMENT
_vptr$ = -16						; size = 4
_vertices$ = -12					; size = 4
_vert$ = -8						; size = 4
_number_of_vertices$ = -4				; size = 4
_polygon$ = 8						; size = 4
_r$ = 12						; size = 4
_g$ = 16						; size = 4
_b$ = 20						; size = 4
?draw_wbuffered_shadow_polygon@@YGXPAUVERTEX@@MMM@Z PROC ; draw_wbuffered_shadow_polygon, COMDAT

; 542  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 543  : 
; 544  : 	int
; 545  : 		number_of_vertices;
; 546  : 
; 547  : 	vertex
; 548  : 		*vert;
; 549  : 
; 550  : 	LPD3DTLVERTEX
; 551  : 		vertices,
; 552  : 		vptr;
; 553  : 
; 554  : 	//
; 555  : 	// First, set the rendering method
; 556  : 	//
; 557  : 
; 558  : 	set_d3d_int_state ( D3DRENDERSTATE_SHADEMODE, D3DSHADE_FLAT );

  00009	6a 01		 push	 1
  0000b	6a 09		 push	 9
  0000d	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 559  : 
; 560  : 	set_d3d_texture_stage_state ( 0, D3DTSS_COLOROP, D3DTOP_DISABLE );

  00012	6a 01		 push	 1
  00014	6a 01		 push	 1
  00016	6a 00		 push	 0
  00018	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 561  : 	set_d3d_texture ( 0, NULL );

  0001d	6a 00		 push	 0
  0001f	6a 00		 push	 0
  00021	e8 00 00 00 00	 call	 ?set_d3d_texture@@YGXHPAUSCREEN@@@Z ; set_d3d_texture

; 562  : 
; 563  : 	vert = polygon;

  00026	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  00029	89 45 f8	 mov	 DWORD PTR _vert$[ebp], eax

; 564  : 
; 565  : 	vertices = get_d3d_vertices_address ( polygon, &number_of_vertices );

  0002c	8d 45 fc	 lea	 eax, DWORD PTR _number_of_vertices$[ebp]
  0002f	50		 push	 eax
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _polygon$[ebp]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 ?get_d3d_vertices_address@@YGPAU_D3DTLVERTEX@@PAUVERTEX@@PAH@Z ; get_d3d_vertices_address
  00039	89 45 f4	 mov	 DWORD PTR _vertices$[ebp], eax

; 566  : 
; 567  : 	vptr = vertices;

  0003c	8b 45 f4	 mov	 eax, DWORD PTR _vertices$[ebp]
  0003f	89 45 f0	 mov	 DWORD PTR _vptr$[ebp], eax
$LN2@draw_wbuff:

; 568  : 
; 569  : 	while ( vert )

  00042	83 7d f8 00	 cmp	 DWORD PTR _vert$[ebp], 0
  00046	74 73		 je	 SHORT $LN3@draw_wbuff

; 570  : 	{
; 571  : 
; 572  : 		*( ( int * ) &vptr->sx ) = *( ( int * ) &vert->i );

  00048	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  0004b	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  0004e	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00051	89 10		 mov	 DWORD PTR [eax], edx

; 573  : 		*( ( int * ) &vptr->sy ) = *( ( int * ) &vert->j );

  00053	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00056	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  00059	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0005c	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 574  : 		*( ( int * ) &vptr->rhw ) = *( ( int * ) &vert->q );

  0005f	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00062	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  00065	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00068	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 575  : 		vptr->sz = ( vert->q * zbuffer_factor ) + zbuffer_constant;

  0006b	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  0006e	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  00073	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR ?zbuffer_factor@@3NA
  0007b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR ?zbuffer_constant@@3NA
  00083	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00087	8b 4d f0	 mov	 ecx, DWORD PTR _vptr$[ebp]
  0008a	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 576  : 		vptr->color = polygon_shadow_colour;

  0008f	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00092	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?polygon_shadow_colour@@3KA ; polygon_shadow_colour
  00098	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 577  : 		vptr->specular = d3d_fog_intensity;

  0009b	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  0009e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_fog_intensity@@3KA ; d3d_fog_intensity
  000a4	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 578  : 
; 579  : 		vptr++;

  000a7	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  000aa	83 c0 20	 add	 eax, 32			; 00000020H
  000ad	89 45 f0	 mov	 DWORD PTR _vptr$[ebp], eax

; 580  : 
; 581  : 		vert = vert->next_vertex;

  000b0	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  000b3	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  000b6	89 4d f8	 mov	 DWORD PTR _vert$[ebp], ecx

; 582  : 	}

  000b9	eb 87		 jmp	 SHORT $LN2@draw_wbuff
$LN3@draw_wbuff:

; 583  : 
; 584  : 	draw_fan_primitive ( number_of_vertices, vertices );

  000bb	8b 45 f4	 mov	 eax, DWORD PTR _vertices$[ebp]
  000be	50		 push	 eax
  000bf	8b 4d fc	 mov	 ecx, DWORD PTR _number_of_vertices$[ebp]
  000c2	51		 push	 ecx
  000c3	e8 00 00 00 00	 call	 ?draw_fan_primitive@@YGXHPAU_D3DTLVERTEX@@@Z ; draw_fan_primitive

; 585  : }

  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	5b		 pop	 ebx
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c2 10 00	 ret	 16			; 00000010H
?draw_wbuffered_shadow_polygon@@YGXPAUVERTEX@@MMM@Z ENDP ; draw_wbuffered_shadow_polygon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\polyd3d.c
;	COMDAT ?draw_wbuffered_gouraud_coloured_distance_fogged_textured_polygon@@YGXPAUVERTEX@@PAUSCREEN@@@Z
_TEXT	SEGMENT
_vptr$ = -16						; size = 4
_vertices$ = -12					; size = 4
_vert$ = -8						; size = 4
_number_of_vertices$ = -4				; size = 4
_polygon$ = 8						; size = 4
_texture$ = 12						; size = 4
?draw_wbuffered_gouraud_coloured_distance_fogged_textured_polygon@@YGXPAUVERTEX@@PAUSCREEN@@@Z PROC ; draw_wbuffered_gouraud_coloured_distance_fogged_textured_polygon, COMDAT

; 499  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 500  : 
; 501  : 	int
; 502  : 		number_of_vertices;
; 503  : 
; 504  : 	vertex
; 505  : 		*vert;
; 506  : 
; 507  : 	LPD3DTLVERTEX
; 508  : 		vertices,
; 509  : 		vptr;
; 510  : 
; 511  : 	vert = polygon;

  00009	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR _vert$[ebp], eax

; 512  : 
; 513  : 	vertices = get_d3d_vertices_address ( polygon, &number_of_vertices );

  0000f	8d 45 fc	 lea	 eax, DWORD PTR _number_of_vertices$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _polygon$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ?get_d3d_vertices_address@@YGPAU_D3DTLVERTEX@@PAUVERTEX@@PAH@Z ; get_d3d_vertices_address
  0001c	89 45 f4	 mov	 DWORD PTR _vertices$[ebp], eax

; 514  : 
; 515  : 	vptr = vertices;

  0001f	8b 45 f4	 mov	 eax, DWORD PTR _vertices$[ebp]
  00022	89 45 f0	 mov	 DWORD PTR _vptr$[ebp], eax
$LN2@draw_wbuff:

; 516  : 
; 517  : 	while ( vert )

  00025	83 7d f8 00	 cmp	 DWORD PTR _vert$[ebp], 0
  00029	0f 84 b3 00 00
	00		 je	 $LN3@draw_wbuff

; 518  : 	{
; 519  : 
; 520  : 		*( ( int * ) &vptr->sx ) = *( ( int * ) &vert->i );

  0002f	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00032	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  00035	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00038	89 10		 mov	 DWORD PTR [eax], edx

; 521  : 		*( ( int * ) &vptr->sy ) = *( ( int * ) &vert->j );

  0003a	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  00040	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00043	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 522  : 		*( ( int * ) &vptr->tu ) = *( ( int * ) &vert->u );

  00046	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00049	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  0004c	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0004f	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 523  : 		*( ( int * ) &vptr->tv ) = *( ( int * ) &vert->v );

  00052	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00055	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  00058	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0005b	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 524  : 		*( ( int * ) &vptr->rhw ) = *( ( int * ) &vert->q );

  0005e	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00061	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  00064	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00067	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 525  : 		vptr->sz = ( vert->q * zbuffer_factor ) + zbuffer_constant;

  0006a	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  0006d	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  00072	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR ?zbuffer_factor@@3NA
  0007a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR ?zbuffer_constant@@3NA
  00082	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00086	8b 4d f0	 mov	 ecx, DWORD PTR _vptr$[ebp]
  00089	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 526  : 		vptr->color = vert->colour;

  0008e	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00091	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  00094	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00097	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 527  : 		vptr->specular = RGBA_MAKE ( vert->specular, vert->specular, vert->specular, vert->fog );

  0009a	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  0009d	0f b6 48 2e	 movzx	 ecx, BYTE PTR [eax+46]
  000a1	c1 e1 18	 shl	 ecx, 24			; 00000018H
  000a4	8b 55 f8	 mov	 edx, DWORD PTR _vert$[ebp]
  000a7	0f b6 42 2d	 movzx	 eax, BYTE PTR [edx+45]
  000ab	c1 e0 10	 shl	 eax, 16			; 00000010H
  000ae	0b c8		 or	 ecx, eax
  000b0	8b 55 f8	 mov	 edx, DWORD PTR _vert$[ebp]
  000b3	0f b6 42 2d	 movzx	 eax, BYTE PTR [edx+45]
  000b7	c1 e0 08	 shl	 eax, 8
  000ba	0b c8		 or	 ecx, eax
  000bc	8b 55 f8	 mov	 edx, DWORD PTR _vert$[ebp]
  000bf	0f b6 42 2d	 movzx	 eax, BYTE PTR [edx+45]
  000c3	0b c8		 or	 ecx, eax
  000c5	8b 55 f0	 mov	 edx, DWORD PTR _vptr$[ebp]
  000c8	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 528  : 
; 529  : 		vptr++;

  000cb	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  000ce	83 c0 20	 add	 eax, 32			; 00000020H
  000d1	89 45 f0	 mov	 DWORD PTR _vptr$[ebp], eax

; 530  : 
; 531  : 		vert = vert->next_vertex;

  000d4	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  000d7	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  000da	89 4d f8	 mov	 DWORD PTR _vert$[ebp], ecx

; 532  : 	}

  000dd	e9 43 ff ff ff	 jmp	 $LN2@draw_wbuff
$LN3@draw_wbuff:

; 533  : 
; 534  : 	draw_fan_primitive ( number_of_vertices, vertices );

  000e2	8b 45 f4	 mov	 eax, DWORD PTR _vertices$[ebp]
  000e5	50		 push	 eax
  000e6	8b 4d fc	 mov	 ecx, DWORD PTR _number_of_vertices$[ebp]
  000e9	51		 push	 ecx
  000ea	e8 00 00 00 00	 call	 ?draw_fan_primitive@@YGXHPAU_D3DTLVERTEX@@@Z ; draw_fan_primitive

; 535  : }

  000ef	5f		 pop	 edi
  000f0	5e		 pop	 esi
  000f1	5b		 pop	 ebx
  000f2	8b e5		 mov	 esp, ebp
  000f4	5d		 pop	 ebp
  000f5	c2 08 00	 ret	 8
?draw_wbuffered_gouraud_coloured_distance_fogged_textured_polygon@@YGXPAUVERTEX@@PAUSCREEN@@@Z ENDP ; draw_wbuffered_gouraud_coloured_distance_fogged_textured_polygon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\polyd3d.c
;	COMDAT ?draw_wbuffered_gouraud_shaded_textured_polygon@@YGXPAUVERTEX@@@Z
_TEXT	SEGMENT
_specular$1 = -20					; size = 4
_vptr$ = -16						; size = 4
_vertices$ = -12					; size = 4
_vert$ = -8						; size = 4
_number_of_vertices$ = -4				; size = 4
_polygon$ = 8						; size = 4
?draw_wbuffered_gouraud_shaded_textured_polygon@@YGXPAUVERTEX@@@Z PROC ; draw_wbuffered_gouraud_shaded_textured_polygon, COMDAT

; 447  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 448  : 
; 449  : 	int
; 450  : 		number_of_vertices;
; 451  : 
; 452  : 	vertex
; 453  : 		*vert;
; 454  : 
; 455  : 	LPD3DTLVERTEX
; 456  : 		vertices,
; 457  : 		vptr;
; 458  : 
; 459  : 	vert = polygon;

  00009	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR _vert$[ebp], eax

; 460  : 
; 461  : 	vertices = get_d3d_vertices_address ( polygon, &number_of_vertices );

  0000f	8d 45 fc	 lea	 eax, DWORD PTR _number_of_vertices$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _polygon$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ?get_d3d_vertices_address@@YGPAU_D3DTLVERTEX@@PAUVERTEX@@PAH@Z ; get_d3d_vertices_address
  0001c	89 45 f4	 mov	 DWORD PTR _vertices$[ebp], eax

; 462  : 
; 463  : 	vptr = vertices;

  0001f	8b 45 f4	 mov	 eax, DWORD PTR _vertices$[ebp]
  00022	89 45 f0	 mov	 DWORD PTR _vptr$[ebp], eax
$LN2@draw_wbuff:

; 464  : 
; 465  : 	while ( vert )

  00025	83 7d f8 00	 cmp	 DWORD PTR _vert$[ebp], 0
  00029	0f 84 ae 00 00
	00		 je	 $LN3@draw_wbuff

; 466  : 	{
; 467  : 
; 468  : 		real_colour
; 469  : 			specular;
; 470  : 
; 471  : 		specular.colour = d3d_fog_intensity;

  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?d3d_fog_intensity@@3KA ; d3d_fog_intensity
  00034	89 45 ec	 mov	 DWORD PTR _specular$1[ebp], eax

; 472  : 		specular.red = vert->specular;

  00037	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  0003a	8a 48 2d	 mov	 cl, BYTE PTR [eax+45]
  0003d	88 4d ee	 mov	 BYTE PTR _specular$1[ebp+2], cl

; 473  : 		specular.green = vert->specular;

  00040	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  00043	8a 48 2d	 mov	 cl, BYTE PTR [eax+45]
  00046	88 4d ed	 mov	 BYTE PTR _specular$1[ebp+1], cl

; 474  : 		specular.blue = vert->specular;

  00049	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  0004c	8a 48 2d	 mov	 cl, BYTE PTR [eax+45]
  0004f	88 4d ec	 mov	 BYTE PTR _specular$1[ebp], cl

; 475  : 
; 476  : 		*( ( int * ) &vptr->sx ) = *( ( int * ) &vert->i );

  00052	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00055	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  00058	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0005b	89 10		 mov	 DWORD PTR [eax], edx

; 477  : 		*( ( int * ) &vptr->sy ) = *( ( int * ) &vert->j );

  0005d	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00060	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  00063	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00066	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 478  : 		*( ( int * ) &vptr->tu ) = *( ( int * ) &vert->u );

  00069	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  0006c	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  0006f	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00072	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 479  : 		*( ( int * ) &vptr->tv ) = *( ( int * ) &vert->v );

  00075	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00078	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  0007b	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0007e	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 480  : 		*( ( int * ) &vptr->rhw ) = *( ( int * ) &vert->q );

  00081	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00084	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  00087	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0008a	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 481  : 		vptr->sz = ( vert->q * zbuffer_factor ) + zbuffer_constant;

  0008d	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  00090	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  00095	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR ?zbuffer_factor@@3NA
  0009d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR ?zbuffer_constant@@3NA
  000a5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000a9	8b 4d f0	 mov	 ecx, DWORD PTR _vptr$[ebp]
  000ac	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 482  : 
; 483  : 		vptr->color = vert->colour;

  000b1	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  000b4	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  000b7	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  000ba	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 484  : 		vptr->specular = specular.colour;

  000bd	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  000c0	8b 4d ec	 mov	 ecx, DWORD PTR _specular$1[ebp]
  000c3	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 485  : 
; 486  : 		vptr++;

  000c6	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  000c9	83 c0 20	 add	 eax, 32			; 00000020H
  000cc	89 45 f0	 mov	 DWORD PTR _vptr$[ebp], eax

; 487  : 
; 488  : 		vert = vert->next_vertex;

  000cf	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  000d2	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  000d5	89 4d f8	 mov	 DWORD PTR _vert$[ebp], ecx

; 489  : 	}

  000d8	e9 48 ff ff ff	 jmp	 $LN2@draw_wbuff
$LN3@draw_wbuff:

; 490  : 
; 491  : 	draw_fan_primitive ( number_of_vertices, vertices );

  000dd	8b 45 f4	 mov	 eax, DWORD PTR _vertices$[ebp]
  000e0	50		 push	 eax
  000e1	8b 4d fc	 mov	 ecx, DWORD PTR _number_of_vertices$[ebp]
  000e4	51		 push	 ecx
  000e5	e8 00 00 00 00	 call	 ?draw_fan_primitive@@YGXHPAU_D3DTLVERTEX@@@Z ; draw_fan_primitive

; 492  : }

  000ea	5f		 pop	 edi
  000eb	5e		 pop	 esi
  000ec	5b		 pop	 ebx
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 04 00	 ret	 4
?draw_wbuffered_gouraud_shaded_textured_polygon@@YGXPAUVERTEX@@@Z ENDP ; draw_wbuffered_gouraud_shaded_textured_polygon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\polyd3d.c
;	COMDAT ?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z
_TEXT	SEGMENT
_vptr$ = -16						; size = 4
_vertices$ = -12					; size = 4
_vert$ = -8						; size = 4
_number_of_vertices$ = -4				; size = 4
_polygon$ = 8						; size = 4
_colour$ = 12						; size = 4
_specular$ = 16						; size = 4
?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z PROC ; draw_wbuffered_flat_shaded_textured_polygon, COMDAT

; 405  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 406  : 
; 407  : 	int
; 408  : 		number_of_vertices;
; 409  : 
; 410  : 	vertex
; 411  : 		*vert;
; 412  : 
; 413  : 	LPD3DTLVERTEX
; 414  : 		vertices,
; 415  : 		vptr;
; 416  : 
; 417  : 	vert = polygon;

  00009	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR _vert$[ebp], eax

; 418  : 
; 419  : 	vertices = get_d3d_vertices_address ( polygon, &number_of_vertices );

  0000f	8d 45 fc	 lea	 eax, DWORD PTR _number_of_vertices$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _polygon$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ?get_d3d_vertices_address@@YGPAU_D3DTLVERTEX@@PAUVERTEX@@PAH@Z ; get_d3d_vertices_address
  0001c	89 45 f4	 mov	 DWORD PTR _vertices$[ebp], eax

; 420  : 
; 421  : 	vptr = vertices;

  0001f	8b 45 f4	 mov	 eax, DWORD PTR _vertices$[ebp]
  00022	89 45 f0	 mov	 DWORD PTR _vptr$[ebp], eax
$LN2@draw_wbuff:

; 422  : 
; 423  : 	while ( vert )

  00025	83 7d f8 00	 cmp	 DWORD PTR _vert$[ebp], 0
  00029	0f 84 88 00 00
	00		 je	 $LN3@draw_wbuff

; 424  : 	{
; 425  : 
; 426  : 		*( ( int * ) &vptr->sx ) = *( ( int * ) &vert->i );

  0002f	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00032	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  00035	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00038	89 10		 mov	 DWORD PTR [eax], edx

; 427  : 		*( ( int * ) &vptr->sy ) = *( ( int * ) &vert->j );

  0003a	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  00040	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00043	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 428  : 		*( ( int * ) &vptr->tu ) = *( ( int * ) &vert->u );

  00046	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00049	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  0004c	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0004f	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 429  : 		*( ( int * ) &vptr->tv ) = *( ( int * ) &vert->v );

  00052	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00055	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  00058	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0005b	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 430  : 		*( ( int * ) &vptr->rhw ) = *( ( int * ) &vert->q );

  0005e	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00061	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  00064	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00067	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 431  : 		vptr->sz = ( vert->q * zbuffer_factor ) + zbuffer_constant;

  0006a	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  0006d	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  00072	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR ?zbuffer_factor@@3NA
  0007a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR ?zbuffer_constant@@3NA
  00082	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00086	8b 4d f0	 mov	 ecx, DWORD PTR _vptr$[ebp]
  00089	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 432  : 		vptr->color = colour.colour;

  0008e	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00091	8b 4d 0c	 mov	 ecx, DWORD PTR _colour$[ebp]
  00094	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 433  : 		vptr->specular = specular.colour;

  00097	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  0009a	8b 4d 10	 mov	 ecx, DWORD PTR _specular$[ebp]
  0009d	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 434  : 		vptr++;

  000a0	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  000a3	83 c0 20	 add	 eax, 32			; 00000020H
  000a6	89 45 f0	 mov	 DWORD PTR _vptr$[ebp], eax

; 435  : 
; 436  : 		vert = vert->next_vertex;

  000a9	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  000ac	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  000af	89 4d f8	 mov	 DWORD PTR _vert$[ebp], ecx

; 437  : 	}

  000b2	e9 6e ff ff ff	 jmp	 $LN2@draw_wbuff
$LN3@draw_wbuff:

; 438  : 
; 439  : 	draw_fan_primitive ( number_of_vertices, vertices );

  000b7	8b 45 f4	 mov	 eax, DWORD PTR _vertices$[ebp]
  000ba	50		 push	 eax
  000bb	8b 4d fc	 mov	 ecx, DWORD PTR _number_of_vertices$[ebp]
  000be	51		 push	 ecx
  000bf	e8 00 00 00 00	 call	 ?draw_fan_primitive@@YGXHPAU_D3DTLVERTEX@@@Z ; draw_fan_primitive

; 440  : }

  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi
  000c6	5b		 pop	 ebx
  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c2 0c 00	 ret	 12			; 0000000cH
?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ENDP ; draw_wbuffered_flat_shaded_textured_polygon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\polyd3d.c
;	COMDAT ?draw_wbuffered_gouraud_shaded_polygon@@YGXPAUVERTEX@@MMMH@Z
_TEXT	SEGMENT
_fb$1 = -48						; size = 4
_fg$2 = -44						; size = 4
_fr$3 = -40						; size = 4
_specular_colour$ = -36					; size = 4
_colour$ = -32						; size = 4
_vptr$ = -28						; size = 4
_vertices$ = -24					; size = 4
_vert$ = -20						; size = 4
_b$ = -16						; size = 4
_g$ = -12						; size = 4
_r$ = -8						; size = 4
_number_of_vertices$ = -4				; size = 4
_polygon$ = 8						; size = 4
_red$ = 12						; size = 4
_green$ = 16						; size = 4
_blue$ = 20						; size = 4
_alpha$ = 24						; size = 4
?draw_wbuffered_gouraud_shaded_polygon@@YGXPAUVERTEX@@MMMH@Z PROC ; draw_wbuffered_gouraud_shaded_polygon, COMDAT

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 334  : 
; 335  : 	int
; 336  : 		number_of_vertices,
; 337  : 		r,
; 338  : 		g,
; 339  : 		b;
; 340  : 
; 341  : 	vertex
; 342  : 		*vert;
; 343  : 
; 344  : 	LPD3DTLVERTEX
; 345  : 		vertices,
; 346  : 		vptr;
; 347  : 
; 348  : 	real_colour
; 349  : 		colour,
; 350  : 		specular_colour;
; 351  : 
; 352  : 	vert = polygon;

  00009	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0000c	89 45 ec	 mov	 DWORD PTR _vert$[ebp], eax

; 353  : 
; 354  : 	vertices = get_d3d_vertices_address ( polygon, &number_of_vertices );

  0000f	8d 45 fc	 lea	 eax, DWORD PTR _number_of_vertices$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _polygon$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ?get_d3d_vertices_address@@YGPAU_D3DTLVERTEX@@PAUVERTEX@@PAH@Z ; get_d3d_vertices_address
  0001c	89 45 e8	 mov	 DWORD PTR _vertices$[ebp], eax

; 355  : 
; 356  : 	vptr = vertices;

  0001f	8b 45 e8	 mov	 eax, DWORD PTR _vertices$[ebp]
  00022	89 45 e4	 mov	 DWORD PTR _vptr$[ebp], eax

; 357  : 
; 358  : 	colour.alpha = alpha;

  00025	8a 45 18	 mov	 al, BYTE PTR _alpha$[ebp]
  00028	88 45 e3	 mov	 BYTE PTR _colour$[ebp+3], al
$LN2@draw_wbuff:

; 359  : 
; 360  : 	while ( vert )

  0002b	83 7d ec 00	 cmp	 DWORD PTR _vert$[ebp], 0
  0002f	0f 84 1d 01 00
	00		 je	 $LN3@draw_wbuff

; 361  : 	{
; 362  : 
; 363  : 		float
; 364  : 			fr,
; 365  : 			fg,
; 366  : 			fb;
; 367  : 
; 368  : 		fr = ( vert->red * red ) + FLOAT_FLOAT_FACTOR;

  00035	8b 45 ec	 mov	 eax, DWORD PTR _vert$[ebp]
  00038	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  0003c	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00040	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _red$[ebp]
  00045	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0004d	f3 0f 11 45 d8	 movss	 DWORD PTR _fr$3[ebp], xmm0

; 369  : 		fg = ( vert->green * green ) + FLOAT_FLOAT_FACTOR;

  00052	8b 45 ec	 mov	 eax, DWORD PTR _vert$[ebp]
  00055	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  00059	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0005d	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _green$[ebp]
  00062	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0006a	f3 0f 11 45 d4	 movss	 DWORD PTR _fg$2[ebp], xmm0

; 370  : 		fb = ( vert->blue * blue ) + FLOAT_FLOAT_FACTOR;

  0006f	8b 45 ec	 mov	 eax, DWORD PTR _vert$[ebp]
  00072	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  00076	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0007a	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _blue$[ebp]
  0007f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00087	f3 0f 11 45 d0	 movss	 DWORD PTR _fb$1[ebp], xmm0

; 371  : 
; 372  : 		r = ( *( int * ) &fr ) - INTEGER_FLOAT_FACTOR;

  0008c	8b 45 d8	 mov	 eax, DWORD PTR _fr$3[ebp]
  0008f	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00094	89 45 f8	 mov	 DWORD PTR _r$[ebp], eax

; 373  : 		g = ( *( int * ) &fg ) - INTEGER_FLOAT_FACTOR;

  00097	8b 45 d4	 mov	 eax, DWORD PTR _fg$2[ebp]
  0009a	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0009f	89 45 f4	 mov	 DWORD PTR _g$[ebp], eax

; 374  : 		b = ( *( int * ) &fb ) - INTEGER_FLOAT_FACTOR;

  000a2	8b 45 d0	 mov	 eax, DWORD PTR _fb$1[ebp]
  000a5	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  000aa	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax

; 375  : 
; 376  : 		*( ( int * ) &vptr->sx ) = *( ( int * ) &vert->i );

  000ad	8b 45 e4	 mov	 eax, DWORD PTR _vptr$[ebp]
  000b0	8b 4d ec	 mov	 ecx, DWORD PTR _vert$[ebp]
  000b3	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000b6	89 10		 mov	 DWORD PTR [eax], edx

; 377  : 		*( ( int * ) &vptr->sy ) = *( ( int * ) &vert->j );

  000b8	8b 45 e4	 mov	 eax, DWORD PTR _vptr$[ebp]
  000bb	8b 4d ec	 mov	 ecx, DWORD PTR _vert$[ebp]
  000be	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000c1	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 378  : 		*( ( int * ) &vptr->rhw ) = *( ( int * ) &vert->q );

  000c4	8b 45 e4	 mov	 eax, DWORD PTR _vptr$[ebp]
  000c7	8b 4d ec	 mov	 ecx, DWORD PTR _vert$[ebp]
  000ca	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000cd	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 379  : 		vptr->sz = ( vert->q * zbuffer_factor ) + zbuffer_constant;

  000d0	8b 45 ec	 mov	 eax, DWORD PTR _vert$[ebp]
  000d3	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  000d8	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR ?zbuffer_factor@@3NA
  000e0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR ?zbuffer_constant@@3NA
  000e8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ec	8b 4d e4	 mov	 ecx, DWORD PTR _vptr$[ebp]
  000ef	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 380  : 
; 381  : 		colour.red = r;

  000f4	8a 45 f8	 mov	 al, BYTE PTR _r$[ebp]
  000f7	88 45 e2	 mov	 BYTE PTR _colour$[ebp+2], al

; 382  : 		colour.green = g;

  000fa	8a 45 f4	 mov	 al, BYTE PTR _g$[ebp]
  000fd	88 45 e1	 mov	 BYTE PTR _colour$[ebp+1], al

; 383  : 		colour.blue = b;

  00100	8a 45 f0	 mov	 al, BYTE PTR _b$[ebp]
  00103	88 45 e0	 mov	 BYTE PTR _colour$[ebp], al

; 384  : 
; 385  : 		vptr->color = colour.colour;

  00106	8b 45 e4	 mov	 eax, DWORD PTR _vptr$[ebp]
  00109	8b 4d e0	 mov	 ecx, DWORD PTR _colour$[ebp]
  0010c	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 386  : 
; 387  : 		specular_colour.colour = d3d_fog_intensity;

  0010f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?d3d_fog_intensity@@3KA ; d3d_fog_intensity
  00114	89 45 dc	 mov	 DWORD PTR _specular_colour$[ebp], eax

; 388  : 		specular_colour.red = vert->specular;

  00117	8b 45 ec	 mov	 eax, DWORD PTR _vert$[ebp]
  0011a	8a 48 2d	 mov	 cl, BYTE PTR [eax+45]
  0011d	88 4d de	 mov	 BYTE PTR _specular_colour$[ebp+2], cl

; 389  : 		specular_colour.green = vert->specular;

  00120	8b 45 ec	 mov	 eax, DWORD PTR _vert$[ebp]
  00123	8a 48 2d	 mov	 cl, BYTE PTR [eax+45]
  00126	88 4d dd	 mov	 BYTE PTR _specular_colour$[ebp+1], cl

; 390  : 		specular_colour.blue = vert->specular;

  00129	8b 45 ec	 mov	 eax, DWORD PTR _vert$[ebp]
  0012c	8a 48 2d	 mov	 cl, BYTE PTR [eax+45]
  0012f	88 4d dc	 mov	 BYTE PTR _specular_colour$[ebp], cl

; 391  : 		vptr->specular = specular_colour.colour;	//d3d_fog_intensity;

  00132	8b 45 e4	 mov	 eax, DWORD PTR _vptr$[ebp]
  00135	8b 4d dc	 mov	 ecx, DWORD PTR _specular_colour$[ebp]
  00138	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 392  : 		vptr++;

  0013b	8b 45 e4	 mov	 eax, DWORD PTR _vptr$[ebp]
  0013e	83 c0 20	 add	 eax, 32			; 00000020H
  00141	89 45 e4	 mov	 DWORD PTR _vptr$[ebp], eax

; 393  : 
; 394  : 		vert = vert->next_vertex;

  00144	8b 45 ec	 mov	 eax, DWORD PTR _vert$[ebp]
  00147	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0014a	89 4d ec	 mov	 DWORD PTR _vert$[ebp], ecx

; 395  : 	}

  0014d	e9 d9 fe ff ff	 jmp	 $LN2@draw_wbuff
$LN3@draw_wbuff:

; 396  : 
; 397  : 	draw_fan_primitive ( number_of_vertices, vertices );

  00152	8b 45 e8	 mov	 eax, DWORD PTR _vertices$[ebp]
  00155	50		 push	 eax
  00156	8b 4d fc	 mov	 ecx, DWORD PTR _number_of_vertices$[ebp]
  00159	51		 push	 ecx
  0015a	e8 00 00 00 00	 call	 ?draw_fan_primitive@@YGXHPAU_D3DTLVERTEX@@@Z ; draw_fan_primitive

; 398  : }

  0015f	5f		 pop	 edi
  00160	5e		 pop	 esi
  00161	5b		 pop	 ebx
  00162	8b e5		 mov	 esp, ebp
  00164	5d		 pop	 ebp
  00165	c2 14 00	 ret	 20			; 00000014H
?draw_wbuffered_gouraud_shaded_polygon@@YGXPAUVERTEX@@MMMH@Z ENDP ; draw_wbuffered_gouraud_shaded_polygon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\polyd3d.c
;	COMDAT ?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z
_TEXT	SEGMENT
_vptr$ = -16						; size = 4
_vertices$ = -12					; size = 4
_vert$ = -8						; size = 4
_number_of_vertices$ = -4				; size = 4
_polygon$ = 8						; size = 4
_colour$ = 12						; size = 4
_specular$ = 16						; size = 4
?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z PROC ; draw_wbuffered_plain_polygon, COMDAT

; 292  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 293  : 
; 294  : 	int
; 295  : 		number_of_vertices;
; 296  : 
; 297  : 	vertex
; 298  : 		*vert;
; 299  : 
; 300  : 	LPD3DTLVERTEX
; 301  : 		vertices,
; 302  : 		vptr;
; 303  : 
; 304  : 	vert = polygon;

  00009	8b 45 08	 mov	 eax, DWORD PTR _polygon$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR _vert$[ebp], eax

; 305  : 
; 306  : 	vertices = get_d3d_vertices_address ( polygon, &number_of_vertices );

  0000f	8d 45 fc	 lea	 eax, DWORD PTR _number_of_vertices$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _polygon$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ?get_d3d_vertices_address@@YGPAU_D3DTLVERTEX@@PAUVERTEX@@PAH@Z ; get_d3d_vertices_address
  0001c	89 45 f4	 mov	 DWORD PTR _vertices$[ebp], eax

; 307  : 
; 308  : 	vptr = vertices;

  0001f	8b 45 f4	 mov	 eax, DWORD PTR _vertices$[ebp]
  00022	89 45 f0	 mov	 DWORD PTR _vptr$[ebp], eax
$LN2@draw_wbuff:

; 309  : 
; 310  : 	while ( vert )

  00025	83 7d f8 00	 cmp	 DWORD PTR _vert$[ebp], 0
  00029	74 6d		 je	 SHORT $LN3@draw_wbuff

; 311  : 	{
; 312  : 
; 313  : 		*( ( int * ) &vptr->sx ) = *( ( int * ) &vert->i );

  0002b	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  00031	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00034	89 10		 mov	 DWORD PTR [eax], edx

; 314  : 		*( ( int * ) &vptr->sy ) = *( ( int * ) &vert->j );

  00036	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00039	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  0003c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0003f	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 315  : 		*( ( int * ) &vptr->rhw ) = *( ( int * ) &vert->q );

  00042	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00045	8b 4d f8	 mov	 ecx, DWORD PTR _vert$[ebp]
  00048	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0004b	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 316  : 		vptr->sz = ( vert->q * zbuffer_factor ) + zbuffer_constant;

  0004e	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  00051	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  00056	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR ?zbuffer_factor@@3NA
  0005e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR ?zbuffer_constant@@3NA
  00066	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0006a	8b 4d f0	 mov	 ecx, DWORD PTR _vptr$[ebp]
  0006d	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 317  : 		vptr->color = colour.colour;

  00072	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00075	8b 4d 0c	 mov	 ecx, DWORD PTR _colour$[ebp]
  00078	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 318  : 		vptr->specular = specular.colour;

  0007b	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  0007e	8b 4d 10	 mov	 ecx, DWORD PTR _specular$[ebp]
  00081	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 319  : 
; 320  : 		vptr++;

  00084	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00087	83 c0 20	 add	 eax, 32			; 00000020H
  0008a	89 45 f0	 mov	 DWORD PTR _vptr$[ebp], eax

; 321  : 
; 322  : 		vert = vert->next_vertex;

  0008d	8b 45 f8	 mov	 eax, DWORD PTR _vert$[ebp]
  00090	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00093	89 4d f8	 mov	 DWORD PTR _vert$[ebp], ecx

; 323  : 	}

  00096	eb 8d		 jmp	 SHORT $LN2@draw_wbuff
$LN3@draw_wbuff:

; 324  : 
; 325  : 	draw_fan_primitive ( number_of_vertices, vertices );

  00098	8b 45 f4	 mov	 eax, DWORD PTR _vertices$[ebp]
  0009b	50		 push	 eax
  0009c	8b 4d fc	 mov	 ecx, DWORD PTR _number_of_vertices$[ebp]
  0009f	51		 push	 ecx
  000a0	e8 00 00 00 00	 call	 ?draw_fan_primitive@@YGXHPAU_D3DTLVERTEX@@@Z ; draw_fan_primitive

; 326  : }

  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c2 0c 00	 ret	 12			; 0000000cH
?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ENDP ; draw_wbuffered_plain_polygon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\polyd3d.c
;	COMDAT ?draw_wbuffered_gouraud_shaded_textured_line@@YGXPAUVERTEX@@PAUSCREEN@@@Z
_TEXT	SEGMENT
_vptr$ = -16						; size = 4
_vertices$ = -12					; size = 4
_point2$ = -8						; size = 4
_point1$ = -4						; size = 4
_line$ = 8						; size = 4
_texture$ = 12						; size = 4
?draw_wbuffered_gouraud_shaded_textured_line@@YGXPAUVERTEX@@PAUSCREEN@@@Z PROC ; draw_wbuffered_gouraud_shaded_textured_line, COMDAT

; 240  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 241  : 
; 242  : 	vertex
; 243  : 		*point1,
; 244  : 		*point2;
; 245  : 
; 246  : 	LPD3DTLVERTEX
; 247  : 		vertices,
; 248  : 		vptr;
; 249  : 
; 250  : 	vertices = get_d3d_line_vertices_points_address ();

  00009	e8 00 00 00 00	 call	 ?get_d3d_line_vertices_points_address@@YGPAU_D3DTLVERTEX@@XZ ; get_d3d_line_vertices_points_address
  0000e	89 45 f4	 mov	 DWORD PTR _vertices$[ebp], eax

; 251  : 
; 252  : 	vptr = vertices;

  00011	8b 45 f4	 mov	 eax, DWORD PTR _vertices$[ebp]
  00014	89 45 f0	 mov	 DWORD PTR _vptr$[ebp], eax

; 253  : 
; 254  : 	point2 = line;

  00017	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  0001a	89 45 f8	 mov	 DWORD PTR _point2$[ebp], eax

; 255  : 
; 256  : 	point1 = line->next_vertex;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  00020	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00023	89 4d fc	 mov	 DWORD PTR _point1$[ebp], ecx

; 257  : 
; 258  : 	//
; 259  : 	// Put the first vertex on twice
; 260  : 	//
; 261  : 
; 262  : 	*( ( int * ) &vptr->sx ) = *( ( int * ) &point1->i );

  00026	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _point1$[ebp]
  0002c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0002f	89 10		 mov	 DWORD PTR [eax], edx

; 263  : 	*( ( int * ) &vptr->sy ) = *( ( int * ) &point1->j );

  00031	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _point1$[ebp]
  00037	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0003a	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 264  : 	*( ( int * ) &vptr->tu ) = *( ( int * ) &point1->u );

  0003d	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _point1$[ebp]
  00043	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00046	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 265  : 	*( ( int * ) &vptr->tv ) = *( ( int * ) &point1->v );

  00049	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _point1$[ebp]
  0004f	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00052	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 266  : 	*( ( int * ) &vptr->rhw ) = *( ( int * ) &point1->q );

  00055	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00058	8b 4d fc	 mov	 ecx, DWORD PTR _point1$[ebp]
  0005b	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0005e	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 267  : 	vptr->sz = ( point1->q * zbuffer_factor ) + zbuffer_constant;

  00061	8b 45 fc	 mov	 eax, DWORD PTR _point1$[ebp]
  00064	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  00069	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR ?zbuffer_factor@@3NA
  00071	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR ?zbuffer_constant@@3NA
  00079	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0007d	8b 4d f0	 mov	 ecx, DWORD PTR _vptr$[ebp]
  00080	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 268  : 
; 269  : 	vptr->color = point1->colour;

  00085	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00088	8b 4d fc	 mov	 ecx, DWORD PTR _point1$[ebp]
  0008b	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0008e	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 270  : 	vptr->specular = d3d_fog_intensity;

  00091	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00094	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_fog_intensity@@3KA ; d3d_fog_intensity
  0009a	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 271  : 
; 272  : 	vptr++;

  0009d	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  000a0	83 c0 20	 add	 eax, 32			; 00000020H
  000a3	89 45 f0	 mov	 DWORD PTR _vptr$[ebp], eax

; 273  : 
; 274  : 	*( ( int * ) &vptr->sx ) = *( ( int * ) &point2->i );

  000a6	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  000a9	8b 4d f8	 mov	 ecx, DWORD PTR _point2$[ebp]
  000ac	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000af	89 10		 mov	 DWORD PTR [eax], edx

; 275  : 	*( ( int * ) &vptr->sy ) = *( ( int * ) &point2->j );

  000b1	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  000b4	8b 4d f8	 mov	 ecx, DWORD PTR _point2$[ebp]
  000b7	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000ba	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 276  : 	*( ( int * ) &vptr->tu ) = *( ( int * ) &point2->u );

  000bd	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  000c0	8b 4d f8	 mov	 ecx, DWORD PTR _point2$[ebp]
  000c3	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  000c6	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 277  : 	*( ( int * ) &vptr->tv ) = *( ( int * ) &point2->v );

  000c9	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  000cc	8b 4d f8	 mov	 ecx, DWORD PTR _point2$[ebp]
  000cf	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000d2	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 278  : 	*( ( int * ) &vptr->rhw ) = *( ( int * ) &point2->q );

  000d5	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  000d8	8b 4d f8	 mov	 ecx, DWORD PTR _point2$[ebp]
  000db	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000de	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 279  : 	vptr->sz = ( point2->q * zbuffer_factor ) + zbuffer_constant;

  000e1	8b 45 f8	 mov	 eax, DWORD PTR _point2$[ebp]
  000e4	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  000e9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR ?zbuffer_factor@@3NA
  000f1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR ?zbuffer_constant@@3NA
  000f9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000fd	8b 4d f0	 mov	 ecx, DWORD PTR _vptr$[ebp]
  00100	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 280  : 
; 281  : 	vptr->color = point2->colour;

  00105	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00108	8b 4d f8	 mov	 ecx, DWORD PTR _point2$[ebp]
  0010b	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0010e	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 282  : 	vptr->specular = d3d_fog_intensity;

  00111	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00114	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_fog_intensity@@3KA ; d3d_fog_intensity
  0011a	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 283  : 
; 284  : 	draw_line_primitive ( vertices );

  0011d	8b 45 f4	 mov	 eax, DWORD PTR _vertices$[ebp]
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 ?draw_line_primitive@@YGXPAU_D3DTLVERTEX@@@Z ; draw_line_primitive

; 285  : }

  00126	5f		 pop	 edi
  00127	5e		 pop	 esi
  00128	5b		 pop	 ebx
  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c2 08 00	 ret	 8
?draw_wbuffered_gouraud_shaded_textured_line@@YGXPAUVERTEX@@PAUSCREEN@@@Z ENDP ; draw_wbuffered_gouraud_shaded_textured_line
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\polyd3d.c
;	COMDAT ?draw_wbuffered_gouraud_shaded_line@@YGXPAUVERTEX@@MMM@Z
_TEXT	SEGMENT
_vptr$ = -40						; size = 4
_vertices$ = -36					; size = 4
_point2$ = -32						; size = 4
_point1$ = -28						; size = 4
_fb$ = -24						; size = 4
_fg$ = -20						; size = 4
_fr$ = -16						; size = 4
_b$ = -12						; size = 4
_g$ = -8						; size = 4
_r$ = -4						; size = 4
_line$ = 8						; size = 4
_red$ = 12						; size = 4
_green$ = 16						; size = 4
_blue$ = 20						; size = 4
?draw_wbuffered_gouraud_shaded_line@@YGXPAUVERTEX@@MMM@Z PROC ; draw_wbuffered_gouraud_shaded_line, COMDAT

; 170  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 171  : 
; 172  : 	int
; 173  : 		r,
; 174  : 		g,
; 175  : 		b;
; 176  : 
; 177  : 	float
; 178  : 		fr,
; 179  : 		fg,
; 180  : 		fb;
; 181  : 
; 182  : 	vertex
; 183  : 		*point1,
; 184  : 		*point2;
; 185  : 
; 186  : 	LPD3DTLVERTEX
; 187  : 		vertices,
; 188  : 		vptr;
; 189  : 
; 190  : 	vertices = get_d3d_line_vertices_points_address ();

  00009	e8 00 00 00 00	 call	 ?get_d3d_line_vertices_points_address@@YGPAU_D3DTLVERTEX@@XZ ; get_d3d_line_vertices_points_address
  0000e	89 45 dc	 mov	 DWORD PTR _vertices$[ebp], eax

; 191  : 
; 192  : 	vptr = vertices;

  00011	8b 45 dc	 mov	 eax, DWORD PTR _vertices$[ebp]
  00014	89 45 d8	 mov	 DWORD PTR _vptr$[ebp], eax

; 193  : 
; 194  : 	point2 = line;

  00017	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  0001a	89 45 e0	 mov	 DWORD PTR _point2$[ebp], eax

; 195  : 
; 196  : 	point1 = line->next_vertex;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  00020	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00023	89 4d e4	 mov	 DWORD PTR _point1$[ebp], ecx

; 197  : 
; 198  : 	fr = ( point1->red * red ) + FLOAT_FLOAT_FACTOR;

  00026	8b 45 e4	 mov	 eax, DWORD PTR _point1$[ebp]
  00029	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  0002d	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00031	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _red$[ebp]
  00036	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0003e	f3 0f 11 45 f0	 movss	 DWORD PTR _fr$[ebp], xmm0

; 199  : 	fg = ( point1->green * green ) + FLOAT_FLOAT_FACTOR;

  00043	8b 45 e4	 mov	 eax, DWORD PTR _point1$[ebp]
  00046	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  0004a	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0004e	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _green$[ebp]
  00053	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  0005b	f3 0f 11 45 ec	 movss	 DWORD PTR _fg$[ebp], xmm0

; 200  : 	fb = ( point1->blue * blue ) + FLOAT_FLOAT_FACTOR;

  00060	8b 45 e4	 mov	 eax, DWORD PTR _point1$[ebp]
  00063	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  00067	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0006b	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _blue$[ebp]
  00070	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00078	f3 0f 11 45 e8	 movss	 DWORD PTR _fb$[ebp], xmm0

; 201  : 
; 202  : 	r = ( *( int * ) &fr ) - INTEGER_FLOAT_FACTOR;

  0007d	8b 45 f0	 mov	 eax, DWORD PTR _fr$[ebp]
  00080	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00085	89 45 fc	 mov	 DWORD PTR _r$[ebp], eax

; 203  : 	g = ( *( int * ) &fg ) - INTEGER_FLOAT_FACTOR;

  00088	8b 45 ec	 mov	 eax, DWORD PTR _fg$[ebp]
  0008b	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00090	89 45 f8	 mov	 DWORD PTR _g$[ebp], eax

; 204  : 	b = ( *( int * ) &fb ) - INTEGER_FLOAT_FACTOR;

  00093	8b 45 e8	 mov	 eax, DWORD PTR _fb$[ebp]
  00096	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0009b	89 45 f4	 mov	 DWORD PTR _b$[ebp], eax

; 205  : 
; 206  : 	*( ( int * ) &vptr->sx ) = *( ( int * ) &point1->i );

  0009e	8b 45 d8	 mov	 eax, DWORD PTR _vptr$[ebp]
  000a1	8b 4d e4	 mov	 ecx, DWORD PTR _point1$[ebp]
  000a4	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000a7	89 10		 mov	 DWORD PTR [eax], edx

; 207  : 	*( ( int * ) &vptr->sy ) = *( ( int * ) &point1->j );

  000a9	8b 45 d8	 mov	 eax, DWORD PTR _vptr$[ebp]
  000ac	8b 4d e4	 mov	 ecx, DWORD PTR _point1$[ebp]
  000af	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000b2	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 208  : 	*( ( int * ) &vptr->rhw ) = *( ( int * ) &point1->q );

  000b5	8b 45 d8	 mov	 eax, DWORD PTR _vptr$[ebp]
  000b8	8b 4d e4	 mov	 ecx, DWORD PTR _point1$[ebp]
  000bb	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000be	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 209  : 	vptr->sz = ( point1->q * zbuffer_factor ) + zbuffer_constant;

  000c1	8b 45 e4	 mov	 eax, DWORD PTR _point1$[ebp]
  000c4	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  000c9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR ?zbuffer_factor@@3NA
  000d1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR ?zbuffer_constant@@3NA
  000d9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000dd	8b 4d d8	 mov	 ecx, DWORD PTR _vptr$[ebp]
  000e0	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 210  : 
; 211  : 	vptr->color = RGB_MAKE ( r, g, b );

  000e5	8b 45 fc	 mov	 eax, DWORD PTR _r$[ebp]
  000e8	c1 e0 10	 shl	 eax, 16			; 00000010H
  000eb	8b 4d f8	 mov	 ecx, DWORD PTR _g$[ebp]
  000ee	c1 e1 08	 shl	 ecx, 8
  000f1	0b c1		 or	 eax, ecx
  000f3	0b 45 f4	 or	 eax, DWORD PTR _b$[ebp]
  000f6	8b 55 d8	 mov	 edx, DWORD PTR _vptr$[ebp]
  000f9	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 212  : 	vptr->specular = d3d_fog_intensity;

  000fc	8b 45 d8	 mov	 eax, DWORD PTR _vptr$[ebp]
  000ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_fog_intensity@@3KA ; d3d_fog_intensity
  00105	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 213  : 
; 214  : 	vptr++;

  00108	8b 45 d8	 mov	 eax, DWORD PTR _vptr$[ebp]
  0010b	83 c0 20	 add	 eax, 32			; 00000020H
  0010e	89 45 d8	 mov	 DWORD PTR _vptr$[ebp], eax

; 215  : 
; 216  : 	fr = ( point2->red * red ) + FLOAT_FLOAT_FACTOR;

  00111	8b 45 e0	 mov	 eax, DWORD PTR _point2$[ebp]
  00114	0f b6 48 32	 movzx	 ecx, BYTE PTR [eax+50]
  00118	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0011c	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _red$[ebp]
  00121	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00129	f3 0f 11 45 f0	 movss	 DWORD PTR _fr$[ebp], xmm0

; 217  : 	fg = ( point2->green * green ) + FLOAT_FLOAT_FACTOR;

  0012e	8b 45 e0	 mov	 eax, DWORD PTR _point2$[ebp]
  00131	0f b6 48 31	 movzx	 ecx, BYTE PTR [eax+49]
  00135	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00139	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _green$[ebp]
  0013e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00146	f3 0f 11 45 ec	 movss	 DWORD PTR _fg$[ebp], xmm0

; 218  : 	fb = ( point2->blue * blue ) + FLOAT_FLOAT_FACTOR;

  0014b	8b 45 e0	 mov	 eax, DWORD PTR _point2$[ebp]
  0014e	0f b6 48 30	 movzx	 ecx, BYTE PTR [eax+48]
  00152	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00156	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _blue$[ebp]
  0015b	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00163	f3 0f 11 45 e8	 movss	 DWORD PTR _fb$[ebp], xmm0

; 219  : 
; 220  : 	r = ( *( int * ) &fr ) - INTEGER_FLOAT_FACTOR;

  00168	8b 45 f0	 mov	 eax, DWORD PTR _fr$[ebp]
  0016b	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00170	89 45 fc	 mov	 DWORD PTR _r$[ebp], eax

; 221  : 	g = ( *( int * ) &fg ) - INTEGER_FLOAT_FACTOR;

  00173	8b 45 ec	 mov	 eax, DWORD PTR _fg$[ebp]
  00176	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0017b	89 45 f8	 mov	 DWORD PTR _g$[ebp], eax

; 222  : 	b = ( *( int * ) &fb ) - INTEGER_FLOAT_FACTOR;

  0017e	8b 45 e8	 mov	 eax, DWORD PTR _fb$[ebp]
  00181	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00186	89 45 f4	 mov	 DWORD PTR _b$[ebp], eax

; 223  : 
; 224  : 	*( ( int * ) &vptr->sx ) = *( ( int * ) &point2->i );

  00189	8b 45 d8	 mov	 eax, DWORD PTR _vptr$[ebp]
  0018c	8b 4d e0	 mov	 ecx, DWORD PTR _point2$[ebp]
  0018f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00192	89 10		 mov	 DWORD PTR [eax], edx

; 225  : 	*( ( int * ) &vptr->sy ) = *( ( int * ) &point2->j );

  00194	8b 45 d8	 mov	 eax, DWORD PTR _vptr$[ebp]
  00197	8b 4d e0	 mov	 ecx, DWORD PTR _point2$[ebp]
  0019a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0019d	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 226  : 	*( ( int * ) &vptr->rhw ) = *( ( int * ) &point2->q );

  001a0	8b 45 d8	 mov	 eax, DWORD PTR _vptr$[ebp]
  001a3	8b 4d e0	 mov	 ecx, DWORD PTR _point2$[ebp]
  001a6	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  001a9	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 227  : 	vptr->sz = ( point2->q * zbuffer_factor ) + zbuffer_constant;

  001ac	8b 45 e0	 mov	 eax, DWORD PTR _point2$[ebp]
  001af	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  001b4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR ?zbuffer_factor@@3NA
  001bc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR ?zbuffer_constant@@3NA
  001c4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001c8	8b 4d d8	 mov	 ecx, DWORD PTR _vptr$[ebp]
  001cb	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 228  : 
; 229  : 	vptr->color = RGB_MAKE ( r, g, b );

  001d0	8b 45 fc	 mov	 eax, DWORD PTR _r$[ebp]
  001d3	c1 e0 10	 shl	 eax, 16			; 00000010H
  001d6	8b 4d f8	 mov	 ecx, DWORD PTR _g$[ebp]
  001d9	c1 e1 08	 shl	 ecx, 8
  001dc	0b c1		 or	 eax, ecx
  001de	0b 45 f4	 or	 eax, DWORD PTR _b$[ebp]
  001e1	8b 55 d8	 mov	 edx, DWORD PTR _vptr$[ebp]
  001e4	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 230  : 	vptr->specular = d3d_fog_intensity;

  001e7	8b 45 d8	 mov	 eax, DWORD PTR _vptr$[ebp]
  001ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_fog_intensity@@3KA ; d3d_fog_intensity
  001f0	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 231  : 
; 232  : 	draw_line_primitive ( vertices );

  001f3	8b 45 dc	 mov	 eax, DWORD PTR _vertices$[ebp]
  001f6	50		 push	 eax
  001f7	e8 00 00 00 00	 call	 ?draw_line_primitive@@YGXPAU_D3DTLVERTEX@@@Z ; draw_line_primitive

; 233  : }

  001fc	5f		 pop	 edi
  001fd	5e		 pop	 esi
  001fe	5b		 pop	 ebx
  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c2 10 00	 ret	 16			; 00000010H
?draw_wbuffered_gouraud_shaded_line@@YGXPAUVERTEX@@MMM@Z ENDP ; draw_wbuffered_gouraud_shaded_line
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\polyd3d.c
;	COMDAT ?draw_wbuffered_flat_shaded_textured_line@@YGXPAUVERTEX@@PAUSCREEN@@UREAL_COLOUR@@@Z
_TEXT	SEGMENT
_vptr$ = -16						; size = 4
_vertices$ = -12					; size = 4
_point2$ = -8						; size = 4
_point1$ = -4						; size = 4
_line$ = 8						; size = 4
_texture$ = 12						; size = 4
_colour$ = 16						; size = 4
?draw_wbuffered_flat_shaded_textured_line@@YGXPAUVERTEX@@PAUSCREEN@@UREAL_COLOUR@@@Z PROC ; draw_wbuffered_flat_shaded_textured_line, COMDAT

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 126  : 
; 127  : 	vertex
; 128  : 		*point1,
; 129  : 		*point2;
; 130  : 
; 131  : 	LPD3DTLVERTEX
; 132  : 		vertices,
; 133  : 		vptr;
; 134  : 
; 135  : 	vertices = get_d3d_line_vertices_points_address ();

  00009	e8 00 00 00 00	 call	 ?get_d3d_line_vertices_points_address@@YGPAU_D3DTLVERTEX@@XZ ; get_d3d_line_vertices_points_address
  0000e	89 45 f4	 mov	 DWORD PTR _vertices$[ebp], eax

; 136  : 
; 137  : 	vptr = vertices;

  00011	8b 45 f4	 mov	 eax, DWORD PTR _vertices$[ebp]
  00014	89 45 f0	 mov	 DWORD PTR _vptr$[ebp], eax

; 138  : 
; 139  : 	point2 = line;

  00017	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  0001a	89 45 f8	 mov	 DWORD PTR _point2$[ebp], eax

; 140  : 
; 141  : 	point1 = line->next_vertex;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  00020	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00023	89 4d fc	 mov	 DWORD PTR _point1$[ebp], ecx

; 142  : 
; 143  : 	*( ( int * ) &vptr->sx ) = *( ( int * ) &point1->i );

  00026	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _point1$[ebp]
  0002c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0002f	89 10		 mov	 DWORD PTR [eax], edx

; 144  : 	*( ( int * ) &vptr->sy ) = *( ( int * ) &point1->j );

  00031	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _point1$[ebp]
  00037	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0003a	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 145  : 	*( ( int * ) &vptr->tu ) = *( ( int * ) &point1->u );

  0003d	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _point1$[ebp]
  00043	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00046	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 146  : 	*( ( int * ) &vptr->tv ) = *( ( int * ) &point1->v );

  00049	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _point1$[ebp]
  0004f	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00052	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 147  : 	*( ( int * ) &vptr->rhw ) = *( ( int * ) &point1->q );

  00055	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00058	8b 4d fc	 mov	 ecx, DWORD PTR _point1$[ebp]
  0005b	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0005e	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 148  : 	vptr->sz = ( point1->q * zbuffer_factor ) + zbuffer_constant;

  00061	8b 45 fc	 mov	 eax, DWORD PTR _point1$[ebp]
  00064	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  00069	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR ?zbuffer_factor@@3NA
  00071	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR ?zbuffer_constant@@3NA
  00079	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0007d	8b 4d f0	 mov	 ecx, DWORD PTR _vptr$[ebp]
  00080	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 149  : 	vptr->color = colour.colour;

  00085	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00088	8b 4d 10	 mov	 ecx, DWORD PTR _colour$[ebp]
  0008b	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 150  : 	vptr->specular = d3d_fog_intensity;

  0008e	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00091	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_fog_intensity@@3KA ; d3d_fog_intensity
  00097	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 151  : 	vptr++;

  0009a	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  0009d	83 c0 20	 add	 eax, 32			; 00000020H
  000a0	89 45 f0	 mov	 DWORD PTR _vptr$[ebp], eax

; 152  : 
; 153  : 	*( ( int * ) &vptr->sx ) = *( ( int * ) &point2->i );

  000a3	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  000a6	8b 4d f8	 mov	 ecx, DWORD PTR _point2$[ebp]
  000a9	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000ac	89 10		 mov	 DWORD PTR [eax], edx

; 154  : 	*( ( int * ) &vptr->sy ) = *( ( int * ) &point2->j );

  000ae	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  000b1	8b 4d f8	 mov	 ecx, DWORD PTR _point2$[ebp]
  000b4	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000b7	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 155  : 	*( ( int * ) &vptr->tu ) = *( ( int * ) &point2->u );

  000ba	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  000bd	8b 4d f8	 mov	 ecx, DWORD PTR _point2$[ebp]
  000c0	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  000c3	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 156  : 	*( ( int * ) &vptr->tv ) = *( ( int * ) &point2->v );

  000c6	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  000c9	8b 4d f8	 mov	 ecx, DWORD PTR _point2$[ebp]
  000cc	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000cf	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 157  : 	*( ( int * ) &vptr->rhw ) = *( ( int * ) &point2->q );

  000d2	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  000d5	8b 4d f8	 mov	 ecx, DWORD PTR _point2$[ebp]
  000d8	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000db	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 158  : 	vptr->sz = ( point2->q * zbuffer_factor ) + zbuffer_constant;

  000de	8b 45 f8	 mov	 eax, DWORD PTR _point2$[ebp]
  000e1	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  000e6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR ?zbuffer_factor@@3NA
  000ee	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR ?zbuffer_constant@@3NA
  000f6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000fa	8b 4d f0	 mov	 ecx, DWORD PTR _vptr$[ebp]
  000fd	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 159  : 	vptr->color = colour.colour;

  00102	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00105	8b 4d 10	 mov	 ecx, DWORD PTR _colour$[ebp]
  00108	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 160  : 	vptr->specular = d3d_fog_intensity;

  0010b	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  0010e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_fog_intensity@@3KA ; d3d_fog_intensity
  00114	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 161  : 
; 162  : 	draw_line_primitive ( vertices );

  00117	8b 45 f4	 mov	 eax, DWORD PTR _vertices$[ebp]
  0011a	50		 push	 eax
  0011b	e8 00 00 00 00	 call	 ?draw_line_primitive@@YGXPAU_D3DTLVERTEX@@@Z ; draw_line_primitive

; 163  : }

  00120	5f		 pop	 edi
  00121	5e		 pop	 esi
  00122	5b		 pop	 ebx
  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	c2 0c 00	 ret	 12			; 0000000cH
?draw_wbuffered_flat_shaded_textured_line@@YGXPAUVERTEX@@PAUSCREEN@@UREAL_COLOUR@@@Z ENDP ; draw_wbuffered_flat_shaded_textured_line
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\polyd3d.c
;	COMDAT ?draw_wbuffered_plain_line@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z
_TEXT	SEGMENT
_vptr$ = -16						; size = 4
_vertices$ = -12					; size = 4
_point2$ = -8						; size = 4
_point1$ = -4						; size = 4
_line$ = 8						; size = 4
_colour$ = 12						; size = 4
?draw_wbuffered_plain_line@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z PROC ; draw_wbuffered_plain_line, COMDAT

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 85   : 
; 86   : 	vertex
; 87   : 		*point1,
; 88   : 		*point2;
; 89   : 
; 90   : 	LPD3DTLVERTEX
; 91   : 		vertices,
; 92   : 		vptr;
; 93   : 
; 94   : 	vertices = get_d3d_line_vertices_points_address ();

  00009	e8 00 00 00 00	 call	 ?get_d3d_line_vertices_points_address@@YGPAU_D3DTLVERTEX@@XZ ; get_d3d_line_vertices_points_address
  0000e	89 45 f4	 mov	 DWORD PTR _vertices$[ebp], eax

; 95   : 
; 96   : 	vptr = vertices;

  00011	8b 45 f4	 mov	 eax, DWORD PTR _vertices$[ebp]
  00014	89 45 f0	 mov	 DWORD PTR _vptr$[ebp], eax

; 97   : 
; 98   : 	point1 = line->next_vertex;

  00017	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  0001a	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0001d	89 4d fc	 mov	 DWORD PTR _point1$[ebp], ecx

; 99   : 
; 100  : 	point2 = line;

  00020	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  00023	89 45 f8	 mov	 DWORD PTR _point2$[ebp], eax

; 101  : 
; 102  : 	*( ( int * ) &vptr->sx ) = *( ( int * ) &point1->i );

  00026	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _point1$[ebp]
  0002c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0002f	89 10		 mov	 DWORD PTR [eax], edx

; 103  : 	*( ( int * ) &vptr->sy ) = *( ( int * ) &point1->j );

  00031	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _point1$[ebp]
  00037	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0003a	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 104  : 	*( ( int * ) &vptr->rhw ) = *( ( int * ) &point1->q );

  0003d	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _point1$[ebp]
  00043	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00046	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 105  : 	vptr->sz = ( point1->q * zbuffer_factor ) + zbuffer_constant;

  00049	8b 45 fc	 mov	 eax, DWORD PTR _point1$[ebp]
  0004c	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  00051	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR ?zbuffer_factor@@3NA
  00059	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR ?zbuffer_constant@@3NA
  00061	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00065	8b 4d f0	 mov	 ecx, DWORD PTR _vptr$[ebp]
  00068	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 106  : 	vptr->color = *( ( D3DCOLOR * ) &colour );

  0006d	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _colour$[ebp]
  00073	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 107  : 	vptr->specular = d3d_fog_intensity;

  00076	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00079	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_fog_intensity@@3KA ; d3d_fog_intensity
  0007f	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 108  : 	vptr++;

  00082	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00085	83 c0 20	 add	 eax, 32			; 00000020H
  00088	89 45 f0	 mov	 DWORD PTR _vptr$[ebp], eax

; 109  : 
; 110  : 	*( ( int * ) &vptr->sx ) = *( ( int * ) &point2->i );

  0008b	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  0008e	8b 4d f8	 mov	 ecx, DWORD PTR _point2$[ebp]
  00091	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00094	89 10		 mov	 DWORD PTR [eax], edx

; 111  : 	*( ( int * ) &vptr->sy ) = *( ( int * ) &point2->j );

  00096	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  00099	8b 4d f8	 mov	 ecx, DWORD PTR _point2$[ebp]
  0009c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0009f	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 112  : 	*( ( int * ) &vptr->rhw ) = *( ( int * ) &point2->q );

  000a2	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  000a5	8b 4d f8	 mov	 ecx, DWORD PTR _point2$[ebp]
  000a8	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000ab	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 113  : 	vptr->sz = ( point2->q * zbuffer_factor ) + zbuffer_constant;

  000ae	8b 45 f8	 mov	 eax, DWORD PTR _point2$[ebp]
  000b1	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  000b6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR ?zbuffer_factor@@3NA
  000be	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR ?zbuffer_constant@@3NA
  000c6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ca	8b 4d f0	 mov	 ecx, DWORD PTR _vptr$[ebp]
  000cd	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 114  : 	vptr->color = *( ( D3DCOLOR * ) &colour );

  000d2	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  000d5	8b 4d 0c	 mov	 ecx, DWORD PTR _colour$[ebp]
  000d8	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 115  : 	vptr->specular = d3d_fog_intensity;

  000db	8b 45 f0	 mov	 eax, DWORD PTR _vptr$[ebp]
  000de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_fog_intensity@@3KA ; d3d_fog_intensity
  000e4	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 116  : 
; 117  : 	draw_line_primitive ( vertices );

  000e7	8b 45 f4	 mov	 eax, DWORD PTR _vertices$[ebp]
  000ea	50		 push	 eax
  000eb	e8 00 00 00 00	 call	 ?draw_line_primitive@@YGXPAU_D3DTLVERTEX@@@Z ; draw_line_primitive

; 118  : }

  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c2 08 00	 ret	 8
?draw_wbuffered_plain_line@@YGXPAUVERTEX@@UREAL_COLOUR@@@Z ENDP ; draw_wbuffered_plain_line
_TEXT	ENDS
END
