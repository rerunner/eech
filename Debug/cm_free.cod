; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\special\camera\cm_free.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_asinf
PUBLIC	_atan2f
PUBLIC	?asin@@YGMM@Z					; asin
PUBLIC	?atan2@@YGMMM@Z					; atan2
PUBLIC	?reset_free_camera@@YGXPAUCAMERA@@@Z		; reset_free_camera
PUBLIC	?update_free_camera@@YGXPAUCAMERA@@@Z		; update_free_camera
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3c8efa35
PUBLIC	__real@3f8ccccd
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff921fb51000000
PUBLIC	__real@40000000
PUBLIC	__real@4029000000000000
PUBLIC	__real@40bf400000000000
PUBLIC	__real@42480000
PUBLIC	__real@42c80000
PUBLIC	__real@bfb999999999999a
PUBLIC	__real@bff0000000000000
PUBLIC	__real@bff921fb51000000
PUBLIC	__real@c0000000
PUBLIC	__real@c000000000000000
PUBLIC	__real@c010000000000000
PUBLIC	__real@c029000000000000
PUBLIC	__real@c2480000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_asin:PROC
EXTRN	_atan2:PROC
EXTRN	?get_mouse_update_flag@@YGHXZ:PROC		; get_mouse_update_flag
EXTRN	?get_mouse_move_delta_x@@YGHXZ:PROC		; get_mouse_move_delta_x
EXTRN	?get_mouse_move_delta_y@@YGHXZ:PROC		; get_mouse_move_delta_y
EXTRN	?get_3d_transformation_matrix@@YGXQAY02MMMM@Z:PROC ; get_3d_transformation_matrix
EXTRN	?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z:PROC ; multiply_matrix3x3_vec3d
EXTRN	?multiply_transpose_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z:PROC ; multiply_transpose_matrix3x3_vec3d
EXTRN	?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z:PROC ; get_3d_terrain_point_data
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?world_map@@3UWORLD_MAP_DATA@@A:BYTE		; world_map
EXTRN	?camera_previous_mouse_update_flag@@3HA:DWORD	; camera_previous_mouse_update_flag
EXTRN	?move_view_left_key@@3HA:DWORD			; move_view_left_key
EXTRN	?move_view_right_key@@3HA:DWORD			; move_view_right_key
EXTRN	?move_view_forward_key@@3HA:DWORD		; move_view_forward_key
EXTRN	?move_view_backward_key@@3HA:DWORD		; move_view_backward_key
EXTRN	?mouse_wheel_up@@3HA:DWORD			; mouse_wheel_up
EXTRN	?mouse_wheel_down@@3HA:DWORD			; mouse_wheel_down
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c2480000
CONST	SEGMENT
__real@c2480000 DD 0c2480000r			; -50
CONST	ENDS
;	COMDAT __real@c029000000000000
CONST	SEGMENT
__real@c029000000000000 DQ 0c029000000000000r	; -12.5
CONST	ENDS
;	COMDAT __real@c010000000000000
CONST	SEGMENT
__real@c010000000000000 DQ 0c010000000000000r	; -4
CONST	ENDS
;	COMDAT __real@c000000000000000
CONST	SEGMENT
__real@c000000000000000 DQ 0c000000000000000r	; -2
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bff921fb51000000
CONST	SEGMENT
__real@bff921fb51000000 DQ 0bff921fb51000000r	; -1.5708
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bfb999999999999a
CONST	SEGMENT
__real@bfb999999999999a DQ 0bfb999999999999ar	; -0.1
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@40bf400000000000
CONST	SEGMENT
__real@40bf400000000000 DQ 040bf400000000000r	; 8000
CONST	ENDS
;	COMDAT __real@4029000000000000
CONST	SEGMENT
__real@4029000000000000 DQ 04029000000000000r	; 12.5
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff921fb51000000
CONST	SEGMENT
__real@3ff921fb51000000 DQ 03ff921fb51000000r	; 1.5708
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3f8ccccd
CONST	SEGMENT
__real@3f8ccccd DD 03f8ccccdr			; 1.1
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\camera\cm_free.c
;	COMDAT ?update_free_camera@@YGXPAUCAMERA@@@Z
_TEXT	SEGMENT
tv94 = -112						; size = 8
tv293 = -104						; size = 4
tv213 = -104						; size = 4
tv95 = -104						; size = 8
tv547 = -100						; size = 4
tv294 = -100						; size = 4
tv214 = -100						; size = 4
tv160 = -100						; size = 4
tv141 = -100						; size = 4
$T1 = -96						; size = 4
_movement$2 = -28					; size = 4
_movement$3 = -24					; size = 4
_dp$ = -20						; size = 4
_dh$ = -16						; size = 4
_max_velocity$ = -12					; size = 4
_combined_heading$ = -8					; size = 4
_acceleration$ = -4					; size = 4
_raw$ = 8						; size = 4
?update_free_camera@@YGXPAUCAMERA@@@Z PROC		; update_free_camera, COMDAT

; 95   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 96   : 	float
; 97   : 		acceleration,
; 98   : 		combined_heading;
; 99   : 
; 100  : 	float
; 101  : 		max_velocity = 100.0;

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00011	f3 0f 11 45 f4	 movss	 DWORD PTR _max_velocity$[ebp], xmm0

; 102  : 
; 103  : 	float dh, dp;
; 104  : 
; 105  : 	// adjust direction (pan)
; 106  : 
; 107  : 	if (camera_previous_mouse_update_flag != get_mouse_update_flag())

  00016	e8 00 00 00 00	 call	 ?get_mouse_update_flag@@YGHXZ ; get_mouse_update_flag
  0001b	39 05 00 00 00
	00		 cmp	 DWORD PTR ?camera_previous_mouse_update_flag@@3HA, eax ; camera_previous_mouse_update_flag
  00021	0f 84 91 00 00
	00		 je	 $LN2@update_fre

; 108  : 	{
; 109  : 		dh = get_mouse_move_delta_x() * -180 / 8000.0;

  00027	e8 00 00 00 00	 call	 ?get_mouse_move_delta_x@@YGHXZ ; get_mouse_move_delta_x
  0002c	69 c0 4c ff ff
	ff		 imul	 eax, eax, -180
  00032	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00036	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40bf400000000000
  0003e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00042	f3 0f 11 45 f0	 movss	 DWORD PTR _dh$[ebp], xmm0

; 110  : 		dp = get_mouse_move_delta_y() * -90 / 8000.0;

  00047	e8 00 00 00 00	 call	 ?get_mouse_move_delta_y@@YGHXZ ; get_mouse_move_delta_y
  0004c	6b c0 a6	 imul	 eax, eax, -90
  0004f	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00053	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40bf400000000000
  0005b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0005f	f3 0f 11 45 ec	 movss	 DWORD PTR _dp$[ebp], xmm0

; 111  : 
; 112  : 		camera_previous_mouse_update_flag = get_mouse_update_flag();

  00064	e8 00 00 00 00	 call	 ?get_mouse_update_flag@@YGHXZ ; get_mouse_update_flag
  00069	a3 00 00 00 00	 mov	 DWORD PTR ?camera_previous_mouse_update_flag@@3HA, eax ; camera_previous_mouse_update_flag

; 113  : 	
; 114  : 		raw->chase_camera_pitch += rad(dp);

  0006e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dp$[ebp]
  00073	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  0007b	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0007e	f3 0f 58 80 84
	00 00 00	 addss	 xmm0, DWORD PTR [eax+132]
  00086	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00089	f3 0f 11 81 84
	00 00 00	 movss	 DWORD PTR [ecx+132], xmm0

; 115  : 		raw->chase_camera_heading -= rad(dh);

  00091	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _dh$[ebp]
  00096	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  0009e	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  000a1	f3 0f 10 88 80
	00 00 00	 movss	 xmm1, DWORD PTR [eax+128]
  000a9	f3 0f 5c c8	 subss	 xmm1, xmm0
  000ad	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  000b0	f3 0f 11 89 80
	00 00 00	 movss	 DWORD PTR [ecx+128], xmm1
$LN2@update_fre:

; 116  : 	}
; 117  : 
; 118  : 	raw->chase_camera_pitch = bound(raw->chase_camera_pitch, FREE_CAMERA_ROTATE_DOWN_LIMIT, FREE_CAMERA_ROTATE_UP_LIMIT);

  000b8	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  000bb	f3 0f 5a 80 84
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+132]
  000c3	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bff921fb51000000
  000cb	66 0f 2f c8	 comisd	 xmm1, xmm0
  000cf	76 0f		 jbe	 SHORT $LN35@update_fre
  000d1	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff921fb51000000
  000d9	f2 0f 11 45 98	 movsd	 QWORD PTR tv95[ebp], xmm0
  000de	eb 3e		 jmp	 SHORT $LN36@update_fre
$LN35@update_fre:
  000e0	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  000e3	f3 0f 5a 81 84
	00 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+132]
  000eb	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff921fb51000000
  000f3	76 0f		 jbe	 SHORT $LN33@update_fre
  000f5	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff921fb51000000
  000fd	f2 0f 11 45 90	 movsd	 QWORD PTR tv94[ebp], xmm0
  00102	eb 10		 jmp	 SHORT $LN34@update_fre
$LN33@update_fre:
  00104	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  00107	f3 0f 5a 82 84
	00 00 00	 cvtss2sd xmm0, DWORD PTR [edx+132]
  0010f	f2 0f 11 45 90	 movsd	 QWORD PTR tv94[ebp], xmm0
$LN34@update_fre:
  00114	f2 0f 10 45 90	 movsd	 xmm0, QWORD PTR tv94[ebp]
  00119	f2 0f 11 45 98	 movsd	 QWORD PTR tv95[ebp], xmm0
$LN36@update_fre:
  0011e	f2 0f 5a 45 98	 cvtsd2ss xmm0, QWORD PTR tv95[ebp]
  00123	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00126	f3 0f 11 80 84
	00 00 00	 movss	 DWORD PTR [eax+132], xmm0

; 119  : 
; 120  : 	combined_heading = raw->chase_camera_heading;

  0012e	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00131	f3 0f 10 80 80
	00 00 00	 movss	 xmm0, DWORD PTR [eax+128]
  00139	f3 0f 11 45 f8	 movss	 DWORD PTR _combined_heading$[ebp], xmm0

; 121  : 
; 122  : 	get_3d_transformation_matrix (raw->attitude, combined_heading, raw->chase_camera_pitch, 0.0);

  0013e	51		 push	 ecx
  0013f	0f 57 c0	 xorps	 xmm0, xmm0
  00142	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00147	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0014a	51		 push	 ecx
  0014b	f3 0f 10 80 84
	00 00 00	 movss	 xmm0, DWORD PTR [eax+132]
  00153	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00158	51		 push	 ecx
  00159	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _combined_heading$[ebp]
  0015e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00163	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00166	83 c1 18	 add	 ecx, 24			; 00000018H
  00169	51		 push	 ecx
  0016a	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 123  : 
; 124  : 
; 125  : 	// adjustposition (move camera)
; 126  : 
; 127  : 	// forward/backwards
; 128  : 	if (move_view_forward_key || mouse_wheel_up)

  0016f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?move_view_forward_key@@3HA, 0 ; move_view_forward_key
  00176	75 0d		 jne	 SHORT $LN5@update_fre
  00178	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mouse_wheel_up@@3HA, 0 ; mouse_wheel_up
  0017f	0f 84 9a 00 00
	00		 je	 $LN3@update_fre
$LN5@update_fre:

; 129  : 	{
; 130  : 		int movement = mouse_wheel_up ? 5 * mouse_wheel_up-- : move_view_forward_key;

  00185	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mouse_wheel_up@@3HA, 0 ; mouse_wheel_up
  0018c	74 1b		 je	 SHORT $LN37@update_fre
  0018e	6b 05 00 00 00
	00 05		 imul	 eax, DWORD PTR ?mouse_wheel_up@@3HA, 5 ; mouse_wheel_up
  00195	89 45 9c	 mov	 DWORD PTR tv141[ebp], eax
  00198	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mouse_wheel_up@@3HA ; mouse_wheel_up
  0019e	83 e9 01	 sub	 ecx, 1
  001a1	89 0d 00 00 00
	00		 mov	 DWORD PTR ?mouse_wheel_up@@3HA, ecx ; mouse_wheel_up
  001a7	eb 09		 jmp	 SHORT $LN38@update_fre
$LN37@update_fre:
  001a9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?move_view_forward_key@@3HA ; move_view_forward_key
  001af	89 55 9c	 mov	 DWORD PTR tv141[ebp], edx
$LN38@update_fre:
  001b2	8b 45 9c	 mov	 eax, DWORD PTR tv141[ebp]
  001b5	89 45 e8	 mov	 DWORD PTR _movement$3[ebp], eax

; 131  : 	
; 132  : 		if (raw->velocity.z < -12.5)

  001b8	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  001bb	f3 0f 5a 80 30
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+304]
  001c3	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c029000000000000
  001cb	66 0f 2f c8	 comisd	 xmm1, xmm0
  001cf	76 1e		 jbe	 SHORT $LN6@update_fre

; 133  : 			acceleration = -4.0 * raw->velocity.z;

  001d1	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  001d4	f3 0f 5a 80 30
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+304]
  001dc	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@c010000000000000
  001e4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001e8	f3 0f 11 45 fc	 movss	 DWORD PTR _acceleration$[ebp], xmm0

; 134  : 		else

  001ed	eb 0d		 jmp	 SHORT $LN7@update_fre
$LN6@update_fre:

; 135  : 			acceleration = 50.0;

  001ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  001f7	f3 0f 11 45 fc	 movss	 DWORD PTR _acceleration$[ebp], xmm0
$LN7@update_fre:

; 136  : 
; 137  : 		acceleration *= movement;

  001fc	f3 0f 2a 45 e8	 cvtsi2ss xmm0, DWORD PTR _movement$3[ebp]
  00201	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _acceleration$[ebp]
  00206	f3 0f 11 45 fc	 movss	 DWORD PTR _acceleration$[ebp], xmm0

; 138  : 		max_velocity *= movement;

  0020b	f3 0f 2a 45 e8	 cvtsi2ss xmm0, DWORD PTR _movement$3[ebp]
  00210	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _max_velocity$[ebp]
  00215	f3 0f 11 45 f4	 movss	 DWORD PTR _max_velocity$[ebp], xmm0
  0021a	e9 3d 01 00 00	 jmp	 $LN16@update_fre
$LN3@update_fre:

; 139  : 	}
; 140  : 	else if (move_view_backward_key || mouse_wheel_down)

  0021f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?move_view_backward_key@@3HA, 0 ; move_view_backward_key
  00226	75 0d		 jne	 SHORT $LN10@update_fre
  00228	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mouse_wheel_down@@3HA, 0 ; mouse_wheel_down
  0022f	0f 84 96 00 00
	00		 je	 $LN8@update_fre
$LN10@update_fre:

; 141  : 	{
; 142  : 		int movement = mouse_wheel_down ? 5 * mouse_wheel_down-- : move_view_backward_key;

  00235	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mouse_wheel_down@@3HA, 0 ; mouse_wheel_down
  0023c	74 1b		 je	 SHORT $LN39@update_fre
  0023e	6b 05 00 00 00
	00 05		 imul	 eax, DWORD PTR ?mouse_wheel_down@@3HA, 5 ; mouse_wheel_down
  00245	89 45 9c	 mov	 DWORD PTR tv160[ebp], eax
  00248	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mouse_wheel_down@@3HA ; mouse_wheel_down
  0024e	83 e9 01	 sub	 ecx, 1
  00251	89 0d 00 00 00
	00		 mov	 DWORD PTR ?mouse_wheel_down@@3HA, ecx ; mouse_wheel_down
  00257	eb 09		 jmp	 SHORT $LN40@update_fre
$LN39@update_fre:
  00259	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?move_view_backward_key@@3HA ; move_view_backward_key
  0025f	89 55 9c	 mov	 DWORD PTR tv160[ebp], edx
$LN40@update_fre:
  00262	8b 45 9c	 mov	 eax, DWORD PTR tv160[ebp]
  00265	89 45 e4	 mov	 DWORD PTR _movement$2[ebp], eax

; 143  : 	
; 144  : 		if (raw->velocity.z > 12.5)

  00268	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0026b	f3 0f 5a 80 30
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+304]
  00273	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4029000000000000
  0027b	76 1e		 jbe	 SHORT $LN11@update_fre

; 145  : 			acceleration = -4.0 * raw->velocity.z;

  0027d	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00280	f3 0f 5a 80 30
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+304]
  00288	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@c010000000000000
  00290	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00294	f3 0f 11 45 fc	 movss	 DWORD PTR _acceleration$[ebp], xmm0

; 146  : 		else

  00299	eb 0d		 jmp	 SHORT $LN12@update_fre
$LN11@update_fre:

; 147  : 			acceleration = -50.0;

  0029b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2480000
  002a3	f3 0f 11 45 fc	 movss	 DWORD PTR _acceleration$[ebp], xmm0
$LN12@update_fre:

; 148  : 
; 149  : 		acceleration *= movement;

  002a8	f3 0f 2a 45 e4	 cvtsi2ss xmm0, DWORD PTR _movement$2[ebp]
  002ad	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _acceleration$[ebp]
  002b2	f3 0f 11 45 fc	 movss	 DWORD PTR _acceleration$[ebp], xmm0

; 150  : 		max_velocity *= movement;

  002b7	f3 0f 2a 45 e4	 cvtsi2ss xmm0, DWORD PTR _movement$2[ebp]
  002bc	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _max_velocity$[ebp]
  002c1	f3 0f 11 45 f4	 movss	 DWORD PTR _max_velocity$[ebp], xmm0
  002c6	e9 91 00 00 00	 jmp	 $LN16@update_fre
$LN8@update_fre:

; 151  : 	}
; 152  : 	else if (raw->velocity.z > 0.0 && raw->velocity.z < 1.0)

  002cb	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  002ce	f3 0f 5a 80 30
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+304]
  002d6	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  002de	76 28		 jbe	 SHORT $LN13@update_fre
  002e0	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  002e3	f3 0f 5a 80 30
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+304]
  002eb	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  002f3	66 0f 2f c8	 comisd	 xmm1, xmm0
  002f7	76 0f		 jbe	 SHORT $LN13@update_fre

; 153  : 		acceleration = -2.0;

  002f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00301	f3 0f 11 45 fc	 movss	 DWORD PTR _acceleration$[ebp], xmm0
  00306	eb 54		 jmp	 SHORT $LN16@update_fre
$LN13@update_fre:

; 154  : 	else if (raw->velocity.z < 0.0 && raw->velocity.z > -1.0)

  00308	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0030b	f3 0f 5a 80 30
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+304]
  00313	0f 57 c9	 xorps	 xmm1, xmm1
  00316	66 0f 2f c8	 comisd	 xmm1, xmm0
  0031a	76 24		 jbe	 SHORT $LN15@update_fre
  0031c	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0031f	f3 0f 5a 80 30
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+304]
  00327	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@bff0000000000000
  0032f	76 0f		 jbe	 SHORT $LN15@update_fre

; 155  : 		acceleration = 2.0;

  00331	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00339	f3 0f 11 45 fc	 movss	 DWORD PTR _acceleration$[ebp], xmm0

; 156  : 	else

  0033e	eb 1c		 jmp	 SHORT $LN16@update_fre
$LN15@update_fre:

; 157  : 		acceleration = -2.0 * raw->velocity.z;

  00340	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00343	f3 0f 5a 80 30
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+304]
  0034b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@c000000000000000
  00353	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00357	f3 0f 11 45 fc	 movss	 DWORD PTR _acceleration$[ebp], xmm0
$LN16@update_fre:

; 158  : 
; 159  : 	raw->velocity.z = bound(raw->velocity.z + acceleration * get_delta_time(), -max_velocity, max_velocity);

  0035c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _acceleration$[ebp]
  00361	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00369	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0036c	f3 0f 58 80 30
	01 00 00	 addss	 xmm0, DWORD PTR [eax+304]
  00374	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _max_velocity$[ebp]
  00379	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00380	0f 2f c8	 comiss	 xmm1, xmm0
  00383	76 13		 jbe	 SHORT $LN43@update_fre
  00385	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _max_velocity$[ebp]
  0038a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00391	f3 0f 11 45 9c	 movss	 DWORD PTR tv214[ebp], xmm0
  00396	eb 51		 jmp	 SHORT $LN44@update_fre
$LN43@update_fre:
  00398	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _acceleration$[ebp]
  0039d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  003a5	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  003a8	f3 0f 58 81 30
	01 00 00	 addss	 xmm0, DWORD PTR [ecx+304]
  003b0	0f 2f 45 f4	 comiss	 xmm0, DWORD PTR _max_velocity$[ebp]
  003b4	76 0c		 jbe	 SHORT $LN41@update_fre
  003b6	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _max_velocity$[ebp]
  003bb	f3 0f 11 45 98	 movss	 DWORD PTR tv213[ebp], xmm0
  003c0	eb 1d		 jmp	 SHORT $LN42@update_fre
$LN41@update_fre:
  003c2	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _acceleration$[ebp]
  003c7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  003cf	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  003d2	f3 0f 58 82 30
	01 00 00	 addss	 xmm0, DWORD PTR [edx+304]
  003da	f3 0f 11 45 98	 movss	 DWORD PTR tv213[ebp], xmm0
$LN42@update_fre:
  003df	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR tv213[ebp]
  003e4	f3 0f 11 45 9c	 movss	 DWORD PTR tv214[ebp], xmm0
$LN44@update_fre:
  003e9	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  003ec	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR tv214[ebp]
  003f1	f3 0f 11 80 30
	01 00 00	 movss	 DWORD PTR [eax+304], xmm0

; 160  : 	if (raw->velocity.z > -0.1 && raw->velocity.z < 0.1)

  003f9	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  003fc	f3 0f 5a 80 30
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+304]
  00404	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@bfb999999999999a
  0040c	76 27		 jbe	 SHORT $LN17@update_fre
  0040e	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00411	f3 0f 5a 80 30
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+304]
  00419	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fb999999999999a
  00421	66 0f 2f c8	 comisd	 xmm1, xmm0
  00425	76 0e		 jbe	 SHORT $LN17@update_fre

; 161  : 		raw->velocity.z = 0.0;

  00427	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0042a	0f 57 c0	 xorps	 xmm0, xmm0
  0042d	f3 0f 11 80 30
	01 00 00	 movss	 DWORD PTR [eax+304], xmm0
$LN17@update_fre:

; 162  : 
; 163  : 	// sideways
; 164  : 	max_velocity = 100.0;

  00435	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  0043d	f3 0f 11 45 f4	 movss	 DWORD PTR _max_velocity$[ebp], xmm0

; 165  : 	if (move_view_right_key)

  00442	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?move_view_right_key@@3HA, 0 ; move_view_right_key
  00449	74 6d		 je	 SHORT $LN18@update_fre

; 166  : 	{
; 167  : 		if (raw->velocity.x < -12.5)

  0044b	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0044e	f3 0f 5a 80 28
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+296]
  00456	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c029000000000000
  0045e	66 0f 2f c8	 comisd	 xmm1, xmm0
  00462	76 1e		 jbe	 SHORT $LN20@update_fre

; 168  : 			acceleration = -4.0 * raw->velocity.x;

  00464	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00467	f3 0f 5a 80 28
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+296]
  0046f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@c010000000000000
  00477	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0047b	f3 0f 11 45 fc	 movss	 DWORD PTR _acceleration$[ebp], xmm0

; 169  : 		else

  00480	eb 0d		 jmp	 SHORT $LN21@update_fre
$LN20@update_fre:

; 170  : 			acceleration = 50.0;

  00482	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  0048a	f3 0f 11 45 fc	 movss	 DWORD PTR _acceleration$[ebp], xmm0
$LN21@update_fre:

; 171  : 
; 172  : 		acceleration *= move_view_right_key;

  0048f	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?move_view_right_key@@3HA ; move_view_right_key
  00497	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _acceleration$[ebp]
  0049c	f3 0f 11 45 fc	 movss	 DWORD PTR _acceleration$[ebp], xmm0

; 173  : 		max_velocity *= move_view_right_key;

  004a1	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?move_view_right_key@@3HA ; move_view_right_key
  004a9	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _max_velocity$[ebp]
  004ae	f3 0f 11 45 f4	 movss	 DWORD PTR _max_velocity$[ebp], xmm0
  004b3	e9 0b 01 00 00	 jmp	 $LN29@update_fre
$LN18@update_fre:

; 174  : 	}
; 175  : 	else if (move_view_left_key)

  004b8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?move_view_left_key@@3HA, 0 ; move_view_left_key
  004bf	74 69		 je	 SHORT $LN22@update_fre

; 176  : 	{
; 177  : 		if (raw->velocity.x > 12.5)

  004c1	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  004c4	f3 0f 5a 80 28
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+296]
  004cc	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4029000000000000
  004d4	76 1e		 jbe	 SHORT $LN24@update_fre

; 178  : 			acceleration = -4.0 * raw->velocity.x;

  004d6	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  004d9	f3 0f 5a 80 28
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+296]
  004e1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@c010000000000000
  004e9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004ed	f3 0f 11 45 fc	 movss	 DWORD PTR _acceleration$[ebp], xmm0

; 179  : 		else

  004f2	eb 0d		 jmp	 SHORT $LN25@update_fre
$LN24@update_fre:

; 180  : 			acceleration = -50.0;

  004f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2480000
  004fc	f3 0f 11 45 fc	 movss	 DWORD PTR _acceleration$[ebp], xmm0
$LN25@update_fre:

; 181  : 
; 182  : 		acceleration *= move_view_left_key;

  00501	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?move_view_left_key@@3HA ; move_view_left_key
  00509	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _acceleration$[ebp]
  0050e	f3 0f 11 45 fc	 movss	 DWORD PTR _acceleration$[ebp], xmm0

; 183  : 		max_velocity *= move_view_left_key;

  00513	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?move_view_left_key@@3HA ; move_view_left_key
  0051b	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _max_velocity$[ebp]
  00520	f3 0f 11 45 f4	 movss	 DWORD PTR _max_velocity$[ebp], xmm0
  00525	e9 99 00 00 00	 jmp	 $LN29@update_fre
$LN22@update_fre:

; 184  : 	}
; 185  : 	else if (raw->velocity.x > 0.0 && raw->velocity.x < 1.0)

  0052a	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0052d	f3 0f 5a 80 28
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+296]
  00535	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0053d	76 28		 jbe	 SHORT $LN26@update_fre
  0053f	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00542	f3 0f 5a 80 28
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+296]
  0054a	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00552	66 0f 2f c8	 comisd	 xmm1, xmm0
  00556	76 0f		 jbe	 SHORT $LN26@update_fre

; 186  : 		acceleration = -2.0;

  00558	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00560	f3 0f 11 45 fc	 movss	 DWORD PTR _acceleration$[ebp], xmm0
  00565	eb 5c		 jmp	 SHORT $LN29@update_fre
$LN26@update_fre:

; 187  : 	else if (raw->velocity.x < 0.0 && raw->velocity.x > -1.0)

  00567	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0056a	f3 0f 5a 80 28
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+296]
  00572	0f 57 c9	 xorps	 xmm1, xmm1
  00575	66 0f 2f c8	 comisd	 xmm1, xmm0
  00579	76 24		 jbe	 SHORT $LN28@update_fre
  0057b	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0057e	f3 0f 5a 80 28
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+296]
  00586	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@bff0000000000000
  0058e	76 0f		 jbe	 SHORT $LN28@update_fre

; 188  : 		acceleration = 2.0;

  00590	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00598	f3 0f 11 45 fc	 movss	 DWORD PTR _acceleration$[ebp], xmm0

; 189  : 	else

  0059d	eb 24		 jmp	 SHORT $LN29@update_fre
$LN28@update_fre:

; 190  : 		acceleration = -2.0 * (raw->velocity.x - 0.1);

  0059f	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  005a2	f3 0f 5a 80 28
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+296]
  005aa	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb999999999999a
  005b2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@c000000000000000
  005ba	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005be	f3 0f 11 45 fc	 movss	 DWORD PTR _acceleration$[ebp], xmm0
$LN29@update_fre:

; 191  : 
; 192  : 	raw->velocity.x = bound(raw->velocity.x + acceleration * get_delta_time(), -max_velocity, max_velocity);

  005c3	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _acceleration$[ebp]
  005c8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  005d0	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  005d3	f3 0f 58 80 28
	01 00 00	 addss	 xmm0, DWORD PTR [eax+296]
  005db	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _max_velocity$[ebp]
  005e0	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  005e7	0f 2f c8	 comiss	 xmm1, xmm0
  005ea	76 13		 jbe	 SHORT $LN47@update_fre
  005ec	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _max_velocity$[ebp]
  005f1	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  005f8	f3 0f 11 45 9c	 movss	 DWORD PTR tv294[ebp], xmm0
  005fd	eb 51		 jmp	 SHORT $LN48@update_fre
$LN47@update_fre:
  005ff	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _acceleration$[ebp]
  00604	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0060c	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  0060f	f3 0f 58 81 28
	01 00 00	 addss	 xmm0, DWORD PTR [ecx+296]
  00617	0f 2f 45 f4	 comiss	 xmm0, DWORD PTR _max_velocity$[ebp]
  0061b	76 0c		 jbe	 SHORT $LN45@update_fre
  0061d	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _max_velocity$[ebp]
  00622	f3 0f 11 45 98	 movss	 DWORD PTR tv293[ebp], xmm0
  00627	eb 1d		 jmp	 SHORT $LN46@update_fre
$LN45@update_fre:
  00629	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _acceleration$[ebp]
  0062e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00636	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  00639	f3 0f 58 82 28
	01 00 00	 addss	 xmm0, DWORD PTR [edx+296]
  00641	f3 0f 11 45 98	 movss	 DWORD PTR tv293[ebp], xmm0
$LN46@update_fre:
  00646	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR tv293[ebp]
  0064b	f3 0f 11 45 9c	 movss	 DWORD PTR tv294[ebp], xmm0
$LN48@update_fre:
  00650	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00653	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR tv294[ebp]
  00658	f3 0f 11 80 28
	01 00 00	 movss	 DWORD PTR [eax+296], xmm0

; 193  : 	if (raw->velocity.x > -0.1 && raw->velocity.x < 0.1)

  00660	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00663	f3 0f 5a 80 28
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+296]
  0066b	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@bfb999999999999a
  00673	76 27		 jbe	 SHORT $LN30@update_fre
  00675	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00678	f3 0f 5a 80 28
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+296]
  00680	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fb999999999999a
  00688	66 0f 2f c8	 comisd	 xmm1, xmm0
  0068c	76 0e		 jbe	 SHORT $LN30@update_fre

; 194  : 		raw->velocity.x = 0.0;

  0068e	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00691	0f 57 c0	 xorps	 xmm0, xmm0
  00694	f3 0f 11 80 28
	01 00 00	 movss	 DWORD PTR [eax+296], xmm0
$LN30@update_fre:

; 195  : 
; 196  : 	// up/down
; 197  : 	acceleration = -2.0 * raw->velocity.y;

  0069c	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0069f	f3 0f 5a 80 2c
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+300]
  006a7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@c000000000000000
  006af	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006b3	f3 0f 11 45 fc	 movss	 DWORD PTR _acceleration$[ebp], xmm0

; 198  : 	raw->velocity.y += acceleration * get_delta_time();

  006b8	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _acceleration$[ebp]
  006bd	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  006c5	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  006c8	f3 0f 58 80 2c
	01 00 00	 addss	 xmm0, DWORD PTR [eax+300]
  006d0	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  006d3	f3 0f 11 81 2c
	01 00 00	 movss	 DWORD PTR [ecx+300], xmm0

; 199  : 
; 200  : 	// rotate velocity in view diretion:
; 201  : 	multiply_matrix3x3_vec3d(&raw->motion_vector, raw->attitude, &raw->velocity);

  006db	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  006de	05 28 01 00 00	 add	 eax, 296		; 00000128H
  006e3	50		 push	 eax
  006e4	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  006e7	83 c1 18	 add	 ecx, 24			; 00000018H
  006ea	51		 push	 ecx
  006eb	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  006ee	83 c2 0c	 add	 edx, 12			; 0000000cH
  006f1	52		 push	 edx
  006f2	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 202  : 
; 203  : 	// move in direction of velocity
; 204  : 	raw->position.x += raw->motion_vector.x * get_delta_time();

  006f7	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  006fa	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  006ff	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00707	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  0070a	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  0070e	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  00711	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 205  : 	raw->position.y += raw->motion_vector.y * get_delta_time();

  00715	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00718	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  0071d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00725	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00728	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  0072d	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  00730	f3 0f 11 42 04	 movss	 DWORD PTR [edx+4], xmm0

; 206  : 	raw->position.z += raw->motion_vector.z * get_delta_time();

  00735	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00738	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  0073d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00745	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00748	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  0074d	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  00750	f3 0f 11 42 08	 movss	 DWORD PTR [edx+8], xmm0

; 207  : 
; 208  : 	// keep point above ground (unless point off map)
; 209  : 	if (point_inside_map_area (&raw->position))

  00755	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00758	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0075c	0f 2f 05 24 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+36
  00763	0f 82 86 00 00
	00		 jb	 $LN31@update_fre
  00769	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0076c	f3 0f 10 05 3c
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+60
  00774	0f 2f 00	 comiss	 xmm0, DWORD PTR [eax]
  00777	72 76		 jb	 SHORT $LN31@update_fre
  00779	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0077c	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00781	0f 2f 05 2c 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+44
  00788	72 65		 jb	 SHORT $LN31@update_fre
  0078a	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0078d	f3 0f 10 05 44
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+68
  00795	0f 2f 40 08	 comiss	 xmm0, DWORD PTR [eax+8]
  00799	72 54		 jb	 SHORT $LN31@update_fre

; 210  : 	{
; 211  : 		raw->position.y = max (raw->position.y, get_3d_terrain_point_data (raw->position.x, raw->position.z, &raw->terrain_info) + CAMERA_MIN_HEIGHT_ABOVE_GROUND);

  0079b	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0079e	83 c0 50	 add	 eax, 80			; 00000050H
  007a1	50		 push	 eax
  007a2	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  007a5	51		 push	 ecx
  007a6	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  007ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b0	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  007b3	51		 push	 ecx
  007b4	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  007b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007bd	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  007c2	d9 5d 9c	 fstp	 DWORD PTR tv547[ebp]
  007c5	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR tv547[ebp]
  007ca	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f8ccccd
  007d2	f3 0f 11 45 a0	 movss	 DWORD PTR $T1[ebp], xmm0
  007d7	8d 45 a0	 lea	 eax, DWORD PTR $T1[ebp]
  007da	50		 push	 eax
  007db	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  007de	83 c1 04	 add	 ecx, 4
  007e1	51		 push	 ecx
  007e2	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  007e7	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  007ea	8b 00		 mov	 eax, DWORD PTR [eax]
  007ec	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN31@update_fre:

; 212  : 	}
; 213  : }

  007ef	5f		 pop	 edi
  007f0	5e		 pop	 esi
  007f1	5b		 pop	 ebx
  007f2	8b e5		 mov	 esp, ebp
  007f4	5d		 pop	 ebp
  007f5	c2 04 00	 ret	 4
?update_free_camera@@YGXPAUCAMERA@@@Z ENDP		; update_free_camera
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\camera\cm_free.c
;	COMDAT ?reset_free_camera@@YGXPAUCAMERA@@@Z
_TEXT	SEGMENT
_raw$ = 8						; size = 4
?reset_free_camera@@YGXPAUCAMERA@@@Z PROC		; reset_free_camera, COMDAT

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 84   : 	// get heading and velocity from previous camera
; 85   : 	raw->chase_camera_heading = get_heading_from_attitude_matrix(raw->attitude);

  00009	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0000e	d1 e0		 shl	 eax, 1
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00013	8d 54 01 18	 lea	 edx, DWORD PTR [ecx+eax+24]
  00017	b8 04 00 00 00	 mov	 eax, 4
  0001c	d1 e0		 shl	 eax, 1
  0001e	51		 push	 ecx
  0001f	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00024	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00029	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0002e	d1 e1		 shl	 ecx, 1
  00030	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  00033	8d 44 0a 18	 lea	 eax, DWORD PTR [edx+ecx+24]
  00037	b9 04 00 00 00	 mov	 ecx, 4
  0003c	6b d1 00	 imul	 edx, ecx, 0
  0003f	51		 push	 ecx
  00040	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00045	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004a	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  0004f	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00052	d9 98 80 00 00
	00		 fstp	 DWORD PTR [eax+128]

; 86   : 	raw->chase_camera_pitch = get_pitch_from_attitude_matrix(raw->attitude);

  00058	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0005d	d1 e0		 shl	 eax, 1
  0005f	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00062	8d 54 01 18	 lea	 edx, DWORD PTR [ecx+eax+24]
  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	c1 e0 00	 shl	 eax, 0
  0006e	51		 push	 ecx
  0006f	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00074	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00079	e8 00 00 00 00	 call	 ?asin@@YGMM@Z		; asin
  0007e	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00081	d9 99 84 00 00
	00		 fstp	 DWORD PTR [ecx+132]

; 87   : 	multiply_transpose_matrix3x3_vec3d(&raw->velocity, raw->attitude, &raw->motion_vector);

  00087	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0008a	83 c0 0c	 add	 eax, 12			; 0000000cH
  0008d	50		 push	 eax
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00091	83 c1 18	 add	 ecx, 24			; 00000018H
  00094	51		 push	 ecx
  00095	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  00098	81 c2 28 01 00
	00		 add	 edx, 296		; 00000128H
  0009e	52		 push	 edx
  0009f	e8 00 00 00 00	 call	 ?multiply_transpose_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_transpose_matrix3x3_vec3d

; 88   : }

  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c2 04 00	 ret	 4
?reset_free_camera@@YGXPAUCAMERA@@@Z ENDP		; reset_free_camera
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan2@@YGMMM@Z
_TEXT	SEGMENT
__Yx$ = 8						; size = 4
__Xx$ = 12						; size = 4
?atan2@@YGMMM@Z PROC					; atan2, COMDAT

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return (_CSTD atan2f(_Yx, _Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _atan2f
  00024	83 c4 08	 add	 esp, 8

; 58   : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?atan2@@YGMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?asin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?asin@@YGMM@Z PROC					; asin, COMDAT

; 36   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 37   : 	return (_CSTD asinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _asinf
  00019	83 c4 04	 add	 esp, 4

; 38   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?asin@@YGMM@Z ENDP					; asin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv74 = -68						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 633  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 634  :             return (float)atan2(_Y, _X);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _atan2
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 635  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _asinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_asinf	PROC						; COMDAT

; 628  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 629  :             return (float)asin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _asin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 630  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_asinf	ENDP
_TEXT	ENDS
END
