; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\gunships\dynamics\common\co_undercarriage.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BH@OHOMAMLD@name?5?$DN?5left?5main?5wheel@ ; `string'
PUBLIC	??_C@_0BI@FKNLPCIO@name?5?$DN?5right?5main?5wheel@ ; `string'
PUBLIC	??_C@_0BC@MOOMMNNF@name?5?$DN?5nose?5wheel@	; `string'
PUBLIC	??_C@_0BC@LKNNLCON@name?5?$DN?5tail?5wheel@	; `string'
_BSS	SEGMENT
?left_wheel@?1??animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A DD 01H DUP (?) ; `animate_hind_suspension'::`2'::left_wheel
?right_wheel@?1??animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A DD 01H DUP (?) ; `animate_hind_suspension'::`2'::right_wheel
?nose_wheel@?1??animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A DD 01H DUP (?) ; `animate_hind_suspension'::`2'::nose_wheel
?nose_strut@?1??animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A DD 01H DUP (?) ; `animate_hind_suspension'::`2'::nose_strut
?right_cylinder@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A DD 01H DUP (?) ; `animate_apache_suspension'::`2'::right_cylinder
?right_arm@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A DD 01H DUP (?) ; `animate_apache_suspension'::`2'::right_arm
?right_piston@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A DD 01H DUP (?) ; `animate_apache_suspension'::`2'::right_piston
?left_cylinder@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A DD 01H DUP (?) ; `animate_apache_suspension'::`2'::left_cylinder
?left_arm@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A DD 01H DUP (?) ; `animate_apache_suspension'::`2'::left_arm
?left_piston@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A DD 01H DUP (?) ; `animate_apache_suspension'::`2'::left_piston
?tail_cylinder@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A DD 01H DUP (?) ; `animate_apache_suspension'::`2'::tail_cylinder
?tail_arm@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A DD 01H DUP (?) ; `animate_apache_suspension'::`2'::tail_arm
?tail_piston@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A DD 01H DUP (?) ; `animate_apache_suspension'::`2'::tail_piston
?tail_fork@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A DD 01H DUP (?) ; `animate_apache_suspension'::`2'::tail_fork
_BSS	ENDS
;	COMDAT ??_C@_0BC@LKNNLCON@name?5?$DN?5tail?5wheel@
CONST	SEGMENT
??_C@_0BC@LKNNLCON@name?5?$DN?5tail?5wheel@ DB 'name = tail wheel', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MOOMMNNF@name?5?$DN?5nose?5wheel@
CONST	SEGMENT
??_C@_0BC@MOOMMNNF@name?5?$DN?5nose?5wheel@ DB 'name = nose wheel', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FKNLPCIO@name?5?$DN?5right?5main?5wheel@
CONST	SEGMENT
??_C@_0BI@FKNLPCIO@name?5?$DN?5right?5main?5wheel@ DB 'name = right main '
	DB	'wheel', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OHOMAMLD@name?5?$DN?5left?5main?5wheel@
CONST	SEGMENT
??_C@_0BH@OHOMAMLD@name?5?$DN?5left?5main?5wheel@ DB 'name = left main wh'
	DB	'eel', 00H					; `string'
CONST	ENDS
CONST	SEGMENT
?landing_gear_info@@3QBULANDING_GEAR_INFO@@B DD FLAT:??_C@_0BH@OHOMAMLD@name?5?$DN?5left?5main?5wheel@ ; landing_gear_info
	DD	01H
	DD	01c7H
	DD	FLAT:??_C@_0BI@FKNLPCIO@name?5?$DN?5right?5main?5wheel@
	DD	00H
	DD	01c8H
	DD	FLAT:??_C@_0BC@MOOMMNNF@name?5?$DN?5nose?5wheel@
	DD	02H
	DD	01c9H
	DD	FLAT:??_C@_0BC@LKNNLCON@name?5?$DN?5tail?5wheel@
	DD	03H
	DD	01caH
?search@?1??animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4QBUOBJECT_3D_SUB_OBJECT_SEARCH_BATCH@@B DD 01bbH ; `animate_hind_suspension'::`2'::search
	DD	FLAT:?left_wheel@?1??animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
	DD	01beH
	DD	FLAT:?right_wheel@?1??animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
	DD	01c1H
	DD	FLAT:?nose_wheel@?1??animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
	DD	01c2H
	DD	FLAT:?nose_strut@?1??animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
?search@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4QBUOBJECT_3D_SUB_OBJECT_SEARCH_BATCH@@B DD 01beH ; `animate_apache_suspension'::`2'::search
	DD	FLAT:?right_arm@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
	DD	01c0H
	DD	FLAT:?right_piston@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
	DD	01bfH
	DD	FLAT:?right_cylinder@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
	DD	01bbH
	DD	FLAT:?left_arm@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
	DD	01bdH
	DD	FLAT:?left_piston@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
	DD	01bcH
	DD	FLAT:?left_cylinder@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
	DD	01c3H
	DD	FLAT:?tail_arm@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
	DD	01c5H
	DD	FLAT:?tail_piston@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
	DD	01c4H
	DD	FLAT:?tail_cylinder@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
	DD	01c6H
	DD	FLAT:?tail_fork@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	___local_stdio_scanf_options
PUBLIC	__vfscanf_l
PUBLIC	_fscanf
PUBLIC	__vsprintf_s_l
PUBLIC	_sprintf_s
PUBLIC	_acosf
PUBLIC	_atan2f
PUBLIC	_atanf
PUBLIC	_cosf
PUBLIC	_fabsf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	?acos@@YGMM@Z					; acos
PUBLIC	?atan@@YGMM@Z					; atan
PUBLIC	?atan2@@YGMMM@Z					; atan2
PUBLIC	?cos@@YGMM@Z					; cos
PUBLIC	?fabs@@YGMM@Z					; fabs
PUBLIC	?sin@@YGMM@Z					; sin
PUBLIC	?sqrt@@YGMM@Z					; sqrt
PUBLIC	?initialise_undercarriage_database@@YGXXZ	; initialise_undercarriage_database
PUBLIC	?deinitialise_undercarriage_database@@YGXXZ	; deinitialise_undercarriage_database
PUBLIC	?initialise_undercarriage_dynamics@@YGXXZ	; initialise_undercarriage_dynamics
PUBLIC	?deinitialise_undercarriage_dynamics@@YGXXZ	; deinitialise_undercarriage_dynamics
PUBLIC	?update_undercarriage_dynamics@@YGXXZ		; update_undercarriage_dynamics
PUBLIC	?reset_undercarriage_world_position@@YGXXZ	; reset_undercarriage_world_position
PUBLIC	?helicopter_has_undercarriage_modelling@@YGHXZ	; helicopter_has_undercarriage_modelling
PUBLIC	?repair_wheels@@YGXXZ				; repair_wheels
PUBLIC	?nose_wheel_locked_down@@YGHXZ			; nose_wheel_locked_down
PUBLIC	?left_main_wheel_locked_down@@YGHXZ		; left_main_wheel_locked_down
PUBLIC	?right_main_wheel_locked_down@@YGHXZ		; right_main_wheel_locked_down
PUBLIC	?weight_on_wheels@@YGHXZ			; weight_on_wheels
PUBLIC	?animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z ; animate_hind_suspension
PUBLIC	?animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z ; animate_apache_suspension
PUBLIC	?rotate_helicopter_wheels@@YGXPAUOBJECT_3D_INSTANCE@@@Z ; rotate_helicopter_wheels
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	??$min@N@std@@YGABNABN0@Z			; std::min<double>
PUBLIC	??$max@N@std@@YGABNABN0@Z			; std::max<double>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??get_undercarriage_state@@YGMXZ@4JA ; `get_undercarriage_state'::`1'::__LINE__Var
PUBLIC	??_C@_0FI@OKKAHBNG@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	?__LINE__Var@?0??initialise_landing_gear@@YGXPAUlanding_gear_system@@PBD@Z@4JA ; `initialise_landing_gear'::`1'::__LINE__Var
PUBLIC	??_C@_0BG@NOKOINCK@?4?4?2common?2data?2dyn?2?$CFs@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r@				; `string'
PUBLIC	??_C@_0BI@HIELCMMP@suspension_points?5?$DN?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0CF@JMAPAHG@len?5?$DM?5SUSPENSION_NAME_MAX_LENGT@ ; `string'
PUBLIC	??_C@_0BC@BGIBFFH@retractable?5?$DN?5?$CFd?6@	; `string'
PUBLIC	??_C@_0BB@OMJPIHHC@has_brakes?5?$DN?5?$CFd?6@	; `string'
PUBLIC	??_C@_0P@BKNEOKI@can_turn?5?$DN?5?$CFd?6@	; `string'
PUBLIC	??_C@_0BH@LCBKEIBA@position?5?$DN?5?$CFf?0?5?$CFf?0?5?$CFf?6@ ; `string'
PUBLIC	??_C@_0BN@OECKGOH@max_spring_compression?5?$DN?5?$CFf?6@ ; `string'
PUBLIC	??_C@_0BH@NBHAAE@spring_stiffness?5?$DN?5?$CFf?6@ ; `string'
PUBLIC	??_C@_0BH@LGOADNKH@damper_stiffness?5?$DN?5?$CFf?6@ ; `string'
PUBLIC	??_C@_0BF@LMCEJEKA@bump_stiffness?5?$DN?5?$CFf?6@ ; `string'
PUBLIC	??_C@_0N@FLABIIMD@radius?5?$DN?5?$CFf?6@	; `string'
PUBLIC	??_C@_0DK@MMADIJBO@error?5in?5file?5?$CFs?5suspension?5poi@ ; `string'
PUBLIC	??_C@_0EH@JKNKOAGF@suspension?5file?5?$CFs?5claims?5there@ ; `string'
PUBLIC	?__LINE__Var@?0??update_suspension@@YGXXZ@4JA	; `update_suspension'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??apply_suspension_forces@@YGXXZ@4JA ; `apply_suspension_forces'::`1'::__LINE__Var
PUBLIC	??_C@_0BK@CDHIOGNN@sideways?5wheel?5resistance@	; `string'
PUBLIC	??_C@_06DKCLNMIG@brakes@			; `string'
PUBLIC	??_C@_0BF@LOMNDLGO@ah?964?9suspension?4txt@	; `string'
PUBLIC	??_C@_0BG@EGKKONAH@rah?966?9suspension?4txt@	; `string'
PUBLIC	??_C@_0BF@JENIAKPG@uh?960?9suspension?4txt@	; `string'
PUBLIC	??_C@_0BF@HCBBLCLC@mi?928?9suspension?4txt@	; `string'
PUBLIC	??_C@_0BF@MKPFLEPL@ka?952?9suspension?4txt@	; `string'
PUBLIC	??_C@_0BF@OHAJNKOD@mi?924?9suspension?4txt@	; `string'
PUBLIC	??_C@_0BE@KAALMBED@ah?91?9suspension?4txt@	; `string'
PUBLIC	??_C@_0BF@BCJMICON@oh?958?9suspension?4txt@	; `string'
PUBLIC	?__LINE__Var@?0??initialise_undercarriage_dynamics@@YGXXZ@4JA ; `initialise_undercarriage_dynamics'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??reset_undercarriage_world_position@@YGXXZ@4JA ; `reset_undercarriage_world_position'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??update_undercarriage_dynamics@@YGXXZ@4JA ; `update_undercarriage_dynamics'::`1'::__LINE__Var
PUBLIC	??_C@_0BF@FHEFHDHP@get_gunship_entity?$CI?$CJ@	; `string'
PUBLIC	?__LINE__Var@?0??rotate_helicopter_wheels@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4JA ; `rotate_helicopter_wheels'::`1'::__LINE__Var
PUBLIC	??_C@_0BF@OJPLACFJ@current_landing_gear@	; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3ccccccd
PUBLIC	__real@3db851ec
PUBLIC	__real@3e800000
PUBLIC	__real@3e8a3d71
PUBLIC	__real@3e99999a
PUBLIC	__real@3e9eb852
PUBLIC	__real@3ec7ae14
PUBLIC	__real@3ecccccd
PUBLIC	__real@3eeb851f
PUBLIC	__real@3f060a92
PUBLIC	__real@3f0ccccd
PUBLIC	__real@3f147ae1
PUBLIC	__real@3f1eb852
PUBLIC	__real@3f32b8c2
PUBLIC	__real@3f4a3d71
PUBLIC	__real@3f800000
PUBLIC	__real@3f860a92
PUBLIC	__real@3f90a3d7
PUBLIC	__real@3f9c61aa
PUBLIC	__real@3fa999999999999a
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe199999999999a
PUBLIC	__real@3fe999999999999a
PUBLIC	__real@3feb333333333333
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@400921fb51000000
PUBLIC	__real@4010000000000000
PUBLIC	__real@40200000
PUBLIC	__real@40239eb860000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@4034000000000000
PUBLIC	__real@40490fdb
PUBLIC	__real@40c90fdb
PUBLIC	__real@411cf5c3
PUBLIC	__real@41c80000
PUBLIC	__real@42b40000
PUBLIC	__real@46fffe00
PUBLIC	__real@be860a92
PUBLIC	__real@bf060a92
PUBLIC	__real@bfc3333333333333
PUBLIC	__real@bfcd0ad2c4000000
PUBLIC	__real@bff0000000000000
PUBLIC	__real@c00921fb51000000
PUBLIC	__real@c1c80000
PUBLIC	__real@c2b40000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp__fgets:PROC
EXTRN	__imp____stdio_common_vfscanf:PROC
EXTRN	__imp____stdio_common_vsprintf_s:PROC
EXTRN	__imp__rand:PROC
EXTRN	_memset:PROC
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_acos:PROC
EXTRN	_atan:PROC
EXTRN	_atan2:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_sin:PROC
EXTRN	_sqrt:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
EXTRN	?safe_fopen@@YGPAU_iobuf@@PBD0@Z:PROC		; safe_fopen
EXTRN	?safe_fclose@@YGHPAU_iobuf@@@Z:PROC		; safe_fclose
EXTRN	?multiply_transpose_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z:PROC ; multiply_transpose_matrix3x3_vec3d
EXTRN	?get_inverse_matrix@@YGXQAY02MQAY02$$CBM@Z:PROC	; get_inverse_matrix
EXTRN	?modify_angle@@YGXPAMMM@Z:PROC			; modify_angle
EXTRN	?find_object_3d_sub_object@@YG?AW4SUB_OBJECT_SEARCH_RESULT_TYPES@@PAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z:PROC ; find_object_3d_sub_object
EXTRN	?find_object_3d_sub_objects@@YGHPAUOBJECT_3D_INSTANCE@@PBUOBJECT_3D_SUB_OBJECT_SEARCH_BATCH@@H@Z:PROC ; find_object_3d_sub_objects
EXTRN	?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z:PROC ; get_3d_terrain_point_data
EXTRN	?get_local_entity_undercarriage_state@@YGHPAUENTITY@@@Z:PROC ; get_local_entity_undercarriage_state
EXTRN	?add_dynamic_force@@YGXPBDMMPAUVEC3D@@1H@Z:PROC	; add_dynamic_force
EXTRN	?command_line_dynamics_flight_model@@3HA:DWORD	; command_line_dynamics_flight_model
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?global_options@@3UGLOBAL_OPTIONS_DATA@@A:BYTE	; global_options
EXTRN	?fn_get_local_entity_attitude_matrix@@3PAP6GXPAUENTITY@@QAY02M@ZA:BYTE ; fn_get_local_entity_attitude_matrix
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?gunship_entity@@3PAUENTITY@@A:DWORD		; gunship_entity
EXTRN	?fixed_collision_count@@3HA:DWORD		; fixed_collision_count
EXTRN	?moving_collision_count@@3HA:DWORD		; moving_collision_count
EXTRN	?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A:DWORD ; current_flight_dynamics
EXTRN	?game_type@@3W4GAME_TYPES@@A:DWORD		; game_type
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?landing_gears@@3PAUlanding_gear_system@@A DB 0108H DUP (?) ; landing_gears
?current_landing_gear@@3PAUlanding_gear_system@@A DD 01H DUP (?) ; current_landing_gear
?apache_main_gear@@3Uapache_landing_gear@@A DB 020H DUP (?) ; apache_main_gear
?apache_tail_gear@@3Uapache_landing_gear@@A DB 020H DUP (?) ; apache_tail_gear
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c2b40000
CONST	SEGMENT
__real@c2b40000 DD 0c2b40000r			; -90
CONST	ENDS
;	COMDAT __real@c1c80000
CONST	SEGMENT
__real@c1c80000 DD 0c1c80000r			; -25
CONST	ENDS
;	COMDAT __real@c00921fb51000000
CONST	SEGMENT
__real@c00921fb51000000 DQ 0c00921fb51000000r	; -3.14159
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bfcd0ad2c4000000
CONST	SEGMENT
__real@bfcd0ad2c4000000 DQ 0bfcd0ad2c4000000r	; -0.226893
CONST	ENDS
;	COMDAT __real@bfc3333333333333
CONST	SEGMENT
__real@bfc3333333333333 DQ 0bfc3333333333333r	; -0.15
CONST	ENDS
;	COMDAT __real@bf060a92
CONST	SEGMENT
__real@bf060a92 DD 0bf060a92r			; -0.523599
CONST	ENDS
;	COMDAT __real@be860a92
CONST	SEGMENT
__real@be860a92 DD 0be860a92r			; -0.261799
CONST	ENDS
;	COMDAT __real@46fffe00
CONST	SEGMENT
__real@46fffe00 DD 046fffe00r			; 32767
CONST	ENDS
;	COMDAT __real@42b40000
CONST	SEGMENT
__real@42b40000 DD 042b40000r			; 90
CONST	ENDS
;	COMDAT __real@41c80000
CONST	SEGMENT
__real@41c80000 DD 041c80000r			; 25
CONST	ENDS
;	COMDAT __real@411cf5c3
CONST	SEGMENT
__real@411cf5c3 DD 0411cf5c3r			; 9.81
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@4034000000000000
CONST	SEGMENT
__real@4034000000000000 DQ 04034000000000000r	; 20
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@40239eb860000000
CONST	SEGMENT
__real@40239eb860000000 DQ 040239eb860000000r	; 9.81
CONST	ENDS
;	COMDAT __real@40200000
CONST	SEGMENT
__real@40200000 DD 040200000r			; 2.5
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@400921fb51000000
CONST	SEGMENT
__real@400921fb51000000 DQ 0400921fb51000000r	; 3.14159
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3feb333333333333
CONST	SEGMENT
__real@3feb333333333333 DQ 03feb333333333333r	; 0.85
CONST	ENDS
;	COMDAT __real@3fe999999999999a
CONST	SEGMENT
__real@3fe999999999999a DQ 03fe999999999999ar	; 0.8
CONST	ENDS
;	COMDAT __real@3fe199999999999a
CONST	SEGMENT
__real@3fe199999999999a DQ 03fe199999999999ar	; 0.55
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3fa999999999999a
CONST	SEGMENT
__real@3fa999999999999a DQ 03fa999999999999ar	; 0.05
CONST	ENDS
;	COMDAT __real@3f9c61aa
CONST	SEGMENT
__real@3f9c61aa DD 03f9c61aar			; 1.22173
CONST	ENDS
;	COMDAT __real@3f90a3d7
CONST	SEGMENT
__real@3f90a3d7 DD 03f90a3d7r			; 1.13
CONST	ENDS
;	COMDAT __real@3f860a92
CONST	SEGMENT
__real@3f860a92 DD 03f860a92r			; 1.0472
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f4a3d71
CONST	SEGMENT
__real@3f4a3d71 DD 03f4a3d71r			; 0.79
CONST	ENDS
;	COMDAT __real@3f32b8c2
CONST	SEGMENT
__real@3f32b8c2 DD 03f32b8c2r			; 0.698132
CONST	ENDS
;	COMDAT __real@3f1eb852
CONST	SEGMENT
__real@3f1eb852 DD 03f1eb852r			; 0.62
CONST	ENDS
;	COMDAT __real@3f147ae1
CONST	SEGMENT
__real@3f147ae1 DD 03f147ae1r			; 0.58
CONST	ENDS
;	COMDAT __real@3f0ccccd
CONST	SEGMENT
__real@3f0ccccd DD 03f0ccccdr			; 0.55
CONST	ENDS
;	COMDAT __real@3f060a92
CONST	SEGMENT
__real@3f060a92 DD 03f060a92r			; 0.523599
CONST	ENDS
;	COMDAT __real@3eeb851f
CONST	SEGMENT
__real@3eeb851f DD 03eeb851fr			; 0.46
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3ec7ae14
CONST	SEGMENT
__real@3ec7ae14 DD 03ec7ae14r			; 0.39
CONST	ENDS
;	COMDAT __real@3e9eb852
CONST	SEGMENT
__real@3e9eb852 DD 03e9eb852r			; 0.31
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e8a3d71
CONST	SEGMENT
__real@3e8a3d71 DD 03e8a3d71r			; 0.27
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3db851ec
CONST	SEGMENT
__real@3db851ec DD 03db851ecr			; 0.09
CONST	ENDS
;	COMDAT __real@3ccccccd
CONST	SEGMENT
__real@3ccccccd DD 03ccccccdr			; 0.025
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OJPLACFJ@current_landing_gear@
CONST	SEGMENT
??_C@_0BF@OJPLACFJ@current_landing_gear@ DB 'current_landing_gear', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??rotate_helicopter_wheels@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??rotate_helicopter_wheels@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4JA DD 0338H ; `rotate_helicopter_wheels'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BF@FHEFHDHP@get_gunship_entity?$CI?$CJ@
CONST	SEGMENT
??_C@_0BF@FHEFHDHP@get_gunship_entity?$CI?$CJ@ DB 'get_gunship_entity()', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??update_undercarriage_dynamics@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_undercarriage_dynamics@@YGXXZ@4JA DD 028dH ; `update_undercarriage_dynamics'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??reset_undercarriage_world_position@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??reset_undercarriage_world_position@@YGXXZ@4JA DD 0254H ; `reset_undercarriage_world_position'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??initialise_undercarriage_dynamics@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??initialise_undercarriage_dynamics@@YGXXZ@4JA DD 0230H ; `initialise_undercarriage_dynamics'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BF@BCJMICON@oh?958?9suspension?4txt@
CONST	SEGMENT
??_C@_0BF@BCJMICON@oh?958?9suspension?4txt@ DB 'oh-58-suspension.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KAALMBED@ah?91?9suspension?4txt@
CONST	SEGMENT
??_C@_0BE@KAALMBED@ah?91?9suspension?4txt@ DB 'ah-1-suspension.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OHAJNKOD@mi?924?9suspension?4txt@
CONST	SEGMENT
??_C@_0BF@OHAJNKOD@mi?924?9suspension?4txt@ DB 'mi-24-suspension.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MKPFLEPL@ka?952?9suspension?4txt@
CONST	SEGMENT
??_C@_0BF@MKPFLEPL@ka?952?9suspension?4txt@ DB 'ka-52-suspension.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HCBBLCLC@mi?928?9suspension?4txt@
CONST	SEGMENT
??_C@_0BF@HCBBLCLC@mi?928?9suspension?4txt@ DB 'mi-28-suspension.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JENIAKPG@uh?960?9suspension?4txt@
CONST	SEGMENT
??_C@_0BF@JENIAKPG@uh?960?9suspension?4txt@ DB 'uh-60-suspension.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EGKKONAH@rah?966?9suspension?4txt@
CONST	SEGMENT
??_C@_0BG@EGKKONAH@rah?966?9suspension?4txt@ DB 'rah-66-suspension.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LOMNDLGO@ah?964?9suspension?4txt@
CONST	SEGMENT
??_C@_0BF@LOMNDLGO@ah?964?9suspension?4txt@ DB 'ah-64-suspension.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06DKCLNMIG@brakes@
CONST	SEGMENT
??_C@_06DKCLNMIG@brakes@ DB 'brakes', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CDHIOGNN@sideways?5wheel?5resistance@
CONST	SEGMENT
??_C@_0BK@CDHIOGNN@sideways?5wheel?5resistance@ DB 'sideways wheel resist'
	DB	'ance', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??apply_suspension_forces@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??apply_suspension_forces@@YGXXZ@4JA DD 0190H ; `apply_suspension_forces'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??update_suspension@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_suspension@@YGXXZ@4JA DD 0100H	; `update_suspension'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EH@JKNKOAGF@suspension?5file?5?$CFs?5claims?5there@
CONST	SEGMENT
??_C@_0EH@JKNKOAGF@suspension?5file?5?$CFs?5claims?5there@ DB 'suspension'
	DB	' file %s claims there should be %d points, but only %d found', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@MMADIJBO@error?5in?5file?5?$CFs?5suspension?5poi@
CONST	SEGMENT
??_C@_0DK@MMADIJBO@error?5in?5file?5?$CFs?5suspension?5poi@ DB 'error in '
	DB	'file %s suspension point %d, values read only %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FLABIIMD@radius?5?$DN?5?$CFf?6@
CONST	SEGMENT
??_C@_0N@FLABIIMD@radius?5?$DN?5?$CFf?6@ DB 'radius = %f', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LMCEJEKA@bump_stiffness?5?$DN?5?$CFf?6@
CONST	SEGMENT
??_C@_0BF@LMCEJEKA@bump_stiffness?5?$DN?5?$CFf?6@ DB 'bump_stiffness = %f'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LGOADNKH@damper_stiffness?5?$DN?5?$CFf?6@
CONST	SEGMENT
??_C@_0BH@LGOADNKH@damper_stiffness?5?$DN?5?$CFf?6@ DB 'damper_stiffness '
	DB	'= %f', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NBHAAE@spring_stiffness?5?$DN?5?$CFf?6@
CONST	SEGMENT
??_C@_0BH@NBHAAE@spring_stiffness?5?$DN?5?$CFf?6@ DB 'spring_stiffness = '
	DB	'%f', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@OECKGOH@max_spring_compression?5?$DN?5?$CFf?6@
CONST	SEGMENT
??_C@_0BN@OECKGOH@max_spring_compression?5?$DN?5?$CFf?6@ DB 'max_spring_c'
	DB	'ompression = %f', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LCBKEIBA@position?5?$DN?5?$CFf?0?5?$CFf?0?5?$CFf?6@
CONST	SEGMENT
??_C@_0BH@LCBKEIBA@position?5?$DN?5?$CFf?0?5?$CFf?0?5?$CFf?6@ DB 'positio'
	DB	'n = %f, %f, %f', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BKNEOKI@can_turn?5?$DN?5?$CFd?6@
CONST	SEGMENT
??_C@_0P@BKNEOKI@can_turn?5?$DN?5?$CFd?6@ DB 'can_turn = %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OMJPIHHC@has_brakes?5?$DN?5?$CFd?6@
CONST	SEGMENT
??_C@_0BB@OMJPIHHC@has_brakes?5?$DN?5?$CFd?6@ DB 'has_brakes = %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BGIBFFH@retractable?5?$DN?5?$CFd?6@
CONST	SEGMENT
??_C@_0BC@BGIBFFH@retractable?5?$DN?5?$CFd?6@ DB 'retractable = %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JMAPAHG@len?5?$DM?5SUSPENSION_NAME_MAX_LENGT@
CONST	SEGMENT
??_C@_0CF@JMAPAHG@len?5?$DM?5SUSPENSION_NAME_MAX_LENGT@ DB 'len < SUSPENS'
	DB	'ION_NAME_MAX_LENGTH - 1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HIELCMMP@suspension_points?5?$DN?5?$CFd?6@
CONST	SEGMENT
??_C@_0BI@HIELCMMP@suspension_points?5?$DN?5?$CFd?6@ DB 'suspension_point'
	DB	's = %d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r@
CONST	SEGMENT
??_C@_01KDCPPGHE@r@ DB 'r', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NOKOINCK@?4?4?2common?2data?2dyn?2?$CFs@
CONST	SEGMENT
??_C@_0BG@NOKOINCK@?4?4?2common?2data?2dyn?2?$CFs@ DB '..\common\data\dyn'
	DB	'\%s', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??initialise_landing_gear@@YGXPAUlanding_gear_system@@PBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??initialise_landing_gear@@YGXPAUlanding_gear_system@@PBD@Z@4JA DD 09aH ; `initialise_landing_gear'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0FI@OKKAHBNG@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0FI@OKKAHBNG@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\gunships\dynamics\common\co_'
	DB	'undercarriage.c', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_undercarriage_state@@YGMXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_undercarriage_state@@YGMXZ@4JA DD 08fH ; `get_undercarriage_state'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@N@std@@YGABNABN0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@N@std@@YGABNABN0@Z PROC				; std::max<double>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00013	66 0f 2f 01	 comisd	 xmm0, QWORD PTR [ecx]
  00017	76 65		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00019	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001f	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00023	66 0f 2f 01	 comisd	 xmm0, QWORD PTR [ecx]
  00027	77 02		 ja	 SHORT $LN9@max
  00029	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00035	6a 00		 push	 0
  00037	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00041	6a 02		 push	 2
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00049	83 c4 18	 add	 esp, 24			; 00000018H
  0004c	83 f8 01	 cmp	 eax, 1
  0004f	75 01		 jne	 SHORT $LN12@max
  00051	cc		 int	 3
$LN12@max:
  00052	6a 00		 push	 0
  00054	68 0e 15 00 00	 push	 5390			; 0000150eH
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006e	83 c4 14	 add	 esp, 20			; 00000014H
  00071	33 c0		 xor	 eax, eax
  00073	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00075	33 c0		 xor	 eax, eax
  00077	75 a0		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00079	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007c	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 08 00	 ret	 8
??$max@N@std@@YGABNABN0@Z ENDP				; std::max<double>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\co_undercarriage.c
;	COMDAT ?wheel_locked_down@@YGHPBUlanding_gear_point@@@Z
_TEXT	SEGMENT
tv78 = -68						; size = 4
tv68 = -68						; size = 4
_point$ = 8						; size = 4
?wheel_locked_down@@YGHPBUlanding_gear_point@@@Z PROC	; wheel_locked_down, COMDAT

; 801  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 802  : 	if (command_line_dynamics_flight_model < 2)

  00009	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?command_line_dynamics_flight_model@@3HA, 2 ; command_line_dynamics_flight_model
  00010	7d 25		 jge	 SHORT $LN2@wheel_lock

; 803  : 		return get_local_entity_undercarriage_state(get_gunship_entity()) == AIRCRAFT_UNDERCARRIAGE_DOWN;

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ?get_local_entity_undercarriage_state@@YGHPAUENTITY@@@Z ; get_local_entity_undercarriage_state
  0001d	83 f8 02	 cmp	 eax, 2
  00020	75 09		 jne	 SHORT $LN4@wheel_lock
  00022	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
  00029	eb 07		 jmp	 SHORT $LN5@wheel_lock
$LN4@wheel_lock:
  0002b	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN5@wheel_lock:
  00032	8b 45 bc	 mov	 eax, DWORD PTR tv68[ebp]
  00035	eb 46		 jmp	 SHORT $LN1@wheel_lock
$LN2@wheel_lock:

; 804  : 
; 805  : 	return !point || (!point->damaged && (!point->retractable || current_flight_dynamics->undercarriage_state.value == 1.0));

  00037	83 7d 08 00	 cmp	 DWORD PTR _point$[ebp], 0
  0003b	74 36		 je	 SHORT $LN8@wheel_lock
  0003d	8b 45 08	 mov	 eax, DWORD PTR _point$[ebp]
  00040	83 38 00	 cmp	 DWORD PTR [eax], 0
  00043	75 25		 jne	 SHORT $LN7@wheel_lock
  00045	8b 4d 08	 mov	 ecx, DWORD PTR _point$[ebp]
  00048	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  0004c	74 25		 je	 SHORT $LN8@wheel_lock
  0004e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00054	f3 0f 5a 82 64
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7268]
  0005c	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@3ff0000000000000
  00064	9f		 lahf
  00065	f6 c4 44	 test	 ah, 68			; 00000044H
  00068	7b 09		 jnp	 SHORT $LN8@wheel_lock
$LN7@wheel_lock:
  0006a	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
  00071	eb 07		 jmp	 SHORT $LN9@wheel_lock
$LN8@wheel_lock:
  00073	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv78[ebp], 1
$LN9@wheel_lock:
  0007a	8b 45 bc	 mov	 eax, DWORD PTR tv78[ebp]
$LN1@wheel_lock:

; 806  : }

  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
?wheel_locked_down@@YGHPBUlanding_gear_point@@@Z ENDP	; wheel_locked_down
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\co_undercarriage.c
;	COMDAT ?apache_set@@YGXPBUapache_landing_gear@@MPAUOBJECT_3D_SUB_INSTANCE@@11@Z
_TEXT	SEGMENT
tv144 = -84						; size = 4
tv135 = -84						; size = 4
_be$ = -16						; size = 4
_al$ = -12						; size = 4
_l2$ = -8						; size = 4
_l$ = -4						; size = 4
_gear$ = 8						; size = 4
_h$ = 12						; size = 4
_arm$ = 16						; size = 4
_cylinder$ = 20						; size = 4
_piston$ = 24						; size = 4
?apache_set@@YGXPBUapache_landing_gear@@MPAUOBJECT_3D_SUB_INSTANCE@@11@Z PROC ; apache_set, COMDAT

; 729  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 730  : 	float
; 731  : 		l,
; 732  : 		l2,
; 733  : 		al,
; 734  : 		be;
; 735  : 
; 736  :   be = gear->ep - acos(gear->ct - h / gear->ta);

  00009	8b 45 08	 mov	 eax, DWORD PTR _gear$[ebp]
  0000c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _h$[ebp]
  00011	f3 0f 5e 00	 divss	 xmm0, DWORD PTR [eax]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _gear$[ebp]
  00018	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  0001d	f3 0f 5c c8	 subss	 xmm1, xmm0
  00021	51		 push	 ecx
  00022	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00027	e8 00 00 00 00	 call	 ?acos@@YGMM@Z		; acos
  0002c	d9 5d ac	 fstp	 DWORD PTR tv135[ebp]
  0002f	8b 55 08	 mov	 edx, DWORD PTR _gear$[ebp]
  00032	f3 0f 10 42 1c	 movss	 xmm0, DWORD PTR [edx+28]
  00037	f3 0f 5c 45 ac	 subss	 xmm0, DWORD PTR tv135[ebp]
  0003c	f3 0f 11 45 f0	 movss	 DWORD PTR _be$[ebp], xmm0

; 737  :   l2 = gear->stfb - gear->ttfb * cos(be - gear->de);

  00041	8b 45 08	 mov	 eax, DWORD PTR _gear$[ebp]
  00044	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _be$[ebp]
  00049	f3 0f 5c 40 18	 subss	 xmm0, DWORD PTR [eax+24]
  0004e	51		 push	 ecx
  0004f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00054	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  00059	d9 5d ac	 fstp	 DWORD PTR tv144[ebp]
  0005c	8b 4d 08	 mov	 ecx, DWORD PTR _gear$[ebp]
  0005f	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR tv144[ebp]
  00064	f3 0f 59 41 14	 mulss	 xmm0, DWORD PTR [ecx+20]
  00069	8b 55 08	 mov	 edx, DWORD PTR _gear$[ebp]
  0006c	f3 0f 10 4a 0c	 movss	 xmm1, DWORD PTR [edx+12]
  00071	f3 0f 5c c8	 subss	 xmm1, xmm0
  00075	f3 0f 11 4d f8	 movss	 DWORD PTR _l2$[ebp], xmm1

; 738  :   l = sqrt(l2);

  0007a	51		 push	 ecx
  0007b	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _l2$[ebp]
  00080	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00085	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  0008a	d9 5d fc	 fstp	 DWORD PTR _l$[ebp]

; 739  :   al = acos((l2 + gear->sbtf) / (l * gear->tb));

  0008d	8b 45 08	 mov	 eax, DWORD PTR _gear$[ebp]
  00090	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _l2$[ebp]
  00095	f3 0f 58 40 10	 addss	 xmm0, DWORD PTR [eax+16]
  0009a	8b 4d 08	 mov	 ecx, DWORD PTR _gear$[ebp]
  0009d	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _l$[ebp]
  000a2	f3 0f 59 49 08	 mulss	 xmm1, DWORD PTR [ecx+8]
  000a7	f3 0f 5e c1	 divss	 xmm0, xmm1
  000ab	51		 push	 ecx
  000ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b1	e8 00 00 00 00	 call	 ?acos@@YGMM@Z		; acos
  000b6	d9 5d f4	 fstp	 DWORD PTR _al$[ebp]

; 740  : 
; 741  : 	arm->relative_pitch = - be;

  000b9	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _be$[ebp]
  000be	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000c5	8b 45 10	 mov	 eax, DWORD PTR _arm$[ebp]
  000c8	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0

; 742  : 	cylinder->relative_pitch = al;

  000cd	8b 45 14	 mov	 eax, DWORD PTR _cylinder$[ebp]
  000d0	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _al$[ebp]
  000d5	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0

; 743  : 	piston->relative_pitch = al + be;

  000da	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _al$[ebp]
  000df	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _be$[ebp]
  000e4	8b 45 18	 mov	 eax, DWORD PTR _piston$[ebp]
  000e7	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0

; 744  : }

  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi
  000ee	5b		 pop	 ebx
  000ef	8b e5		 mov	 esp, ebp
  000f1	5d		 pop	 ebp
  000f2	c2 14 00	 ret	 20			; 00000014H
?apache_set@@YGXPBUapache_landing_gear@@MPAUOBJECT_3D_SUB_INSTANCE@@11@Z ENDP ; apache_set
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\co_undercarriage.c
;	COMDAT ?apache_initialise_landing_gear@@YGXPAUapache_landing_gear@@MMMMMM@Z
_TEXT	SEGMENT
tv179 = -84						; size = 4
tv182 = -80						; size = 4
tv169 = -76						; size = 4
tv153 = -76						; size = 4
_stf$ = -8						; size = 4
_sb$ = -4						; size = 4
_gear$ = 8						; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_t$ = 20						; size = 4
_a$ = 24						; size = 4
_u$ = 28						; size = 4
_f$ = 32						; size = 4
?apache_initialise_landing_gear@@YGXPAUapache_landing_gear@@MMMMMM@Z PROC ; apache_initialise_landing_gear, COMDAT

; 495  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 496  : 	float
; 497  : 		sb,
; 498  : 		stf;
; 499  : 
; 500  : 	sb = b * b;

  00009	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _b$[ebp]
  0000e	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _b$[ebp]
  00013	f3 0f 11 45 fc	 movss	 DWORD PTR _sb$[ebp], xmm0

; 501  : 	stf = t * t + f * f;

  00018	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _t$[ebp]
  0001d	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00022	f3 0f 10 4d 20	 movss	 xmm1, DWORD PTR _f$[ebp]
  00027	f3 0f 59 4d 20	 mulss	 xmm1, DWORD PTR _f$[ebp]
  0002c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00030	f3 0f 11 45 f8	 movss	 DWORD PTR _stf$[ebp], xmm0

; 502  : 
; 503  : 	gear->ta = t + a;

  00035	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _t$[ebp]
  0003a	f3 0f 58 45 18	 addss	 xmm0, DWORD PTR _a$[ebp]
  0003f	8b 45 08	 mov	 eax, DWORD PTR _gear$[ebp]
  00042	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 504  : 	gear->ct = c / t;

  00046	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _c$[ebp]
  0004b	f3 0f 5e 45 14	 divss	 xmm0, DWORD PTR _t$[ebp]
  00050	8b 45 08	 mov	 eax, DWORD PTR _gear$[ebp]
  00053	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 505  : 	gear->tb = 2 * b;

  00058	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00060	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _b$[ebp]
  00065	8b 45 08	 mov	 eax, DWORD PTR _gear$[ebp]
  00068	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 506  :   gear->stfb = sb + stf;

  0006d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _sb$[ebp]
  00072	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _stf$[ebp]
  00077	8b 45 08	 mov	 eax, DWORD PTR _gear$[ebp]
  0007a	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 507  :   gear->sbtf = sb - stf;

  0007f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _sb$[ebp]
  00084	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _stf$[ebp]
  00089	8b 45 08	 mov	 eax, DWORD PTR _gear$[ebp]
  0008c	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 508  :   gear->ttfb = sqrt(stf) * gear->tb;

  00091	51		 push	 ecx
  00092	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _stf$[ebp]
  00097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009c	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  000a1	d9 5d b4	 fstp	 DWORD PTR tv153[ebp]
  000a4	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR tv153[ebp]
  000a9	8b 45 08	 mov	 eax, DWORD PTR _gear$[ebp]
  000ac	f3 0f 59 40 08	 mulss	 xmm0, DWORD PTR [eax+8]
  000b1	8b 4d 08	 mov	 ecx, DWORD PTR _gear$[ebp]
  000b4	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 509  :   gear->de = atan2(f, t);

  000b9	51		 push	 ecx
  000ba	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _t$[ebp]
  000bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c4	51		 push	 ecx
  000c5	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _f$[ebp]
  000ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cf	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  000d4	8b 45 08	 mov	 eax, DWORD PTR _gear$[ebp]
  000d7	d9 58 18	 fstp	 DWORD PTR [eax+24]

; 510  :   gear->ep = acos(gear->ct) + gear->de + acos((gear->stfb - u * u) / gear->ttfb);

  000da	8b 45 08	 mov	 eax, DWORD PTR _gear$[ebp]
  000dd	51		 push	 ecx
  000de	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e8	e8 00 00 00 00	 call	 ?acos@@YGMM@Z		; acos
  000ed	d9 5d b4	 fstp	 DWORD PTR tv169[ebp]
  000f0	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR tv169[ebp]
  000f5	8b 4d 08	 mov	 ecx, DWORD PTR _gear$[ebp]
  000f8	f3 0f 58 41 18	 addss	 xmm0, DWORD PTR [ecx+24]
  000fd	f3 0f 10 4d 1c	 movss	 xmm1, DWORD PTR _u$[ebp]
  00102	f3 0f 59 4d 1c	 mulss	 xmm1, DWORD PTR _u$[ebp]
  00107	8b 55 08	 mov	 edx, DWORD PTR _gear$[ebp]
  0010a	f3 0f 10 52 0c	 movss	 xmm2, DWORD PTR [edx+12]
  0010f	f3 0f 5c d1	 subss	 xmm2, xmm1
  00113	8b 45 08	 mov	 eax, DWORD PTR _gear$[ebp]
  00116	f3 0f 5e 50 14	 divss	 xmm2, DWORD PTR [eax+20]
  0011b	51		 push	 ecx
  0011c	f3 0f 11 14 24	 movss	 DWORD PTR [esp], xmm2
  00121	f3 0f 11 45 b0	 movss	 DWORD PTR tv182[ebp], xmm0
  00126	e8 00 00 00 00	 call	 ?acos@@YGMM@Z		; acos
  0012b	d9 5d ac	 fstp	 DWORD PTR tv179[ebp]
  0012e	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR tv182[ebp]
  00133	f3 0f 58 45 ac	 addss	 xmm0, DWORD PTR tv179[ebp]
  00138	8b 4d 08	 mov	 ecx, DWORD PTR _gear$[ebp]
  0013b	f3 0f 11 41 1c	 movss	 DWORD PTR [ecx+28], xmm0

; 511  : }

  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c2 1c 00	 ret	 28			; 0000001cH
?apache_initialise_landing_gear@@YGXPAUapache_landing_gear@@MMMMMM@Z ENDP ; apache_initialise_landing_gear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@N@std@@YGABNABN0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@N@std@@YGABNABN0@Z PROC				; std::min<double>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00013	66 0f 2f 01	 comisd	 xmm0, QWORD PTR [ecx]
  00017	76 65		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00019	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001f	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00023	66 0f 2f 01	 comisd	 xmm0, QWORD PTR [ecx]
  00027	77 02		 ja	 SHORT $LN9@min
  00029	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00035	6a 00		 push	 0
  00037	68 36 15 00 00	 push	 5430			; 00001536H
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00041	6a 02		 push	 2
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00049	83 c4 18	 add	 esp, 24			; 00000018H
  0004c	83 f8 01	 cmp	 eax, 1
  0004f	75 01		 jne	 SHORT $LN12@min
  00051	cc		 int	 3
$LN12@min:
  00052	6a 00		 push	 0
  00054	68 36 15 00 00	 push	 5430			; 00001536H
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006e	83 c4 14	 add	 esp, 20			; 00000014H
  00071	33 c0		 xor	 eax, eax
  00073	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00075	33 c0		 xor	 eax, eax
  00077	75 a0		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00079	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007c	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 08 00	 ret	 8
??$min@N@std@@YGABNABN0@Z ENDP				; std::min<double>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\co_undercarriage.c
;	COMDAT ?apply_suspension_forces@@YGXXZ
_TEXT	SEGMENT
tv251 = -228						; size = 8
tv188 = -228						; size = 8
tv301 = -220						; size = 8
tv294 = -220						; size = 4
tv252 = -220						; size = 8
tv206 = -220						; size = 8
tv199 = -220						; size = 4
tv189 = -220						; size = 8
tv295 = -216						; size = 4
tv200 = -216						; size = 4
tv70 = -216						; size = 4
$T1 = -212						; size = 4
$T2 = -208						; size = 4
$T3 = -204						; size = 8
$T4 = -196						; size = 8
$T5 = -188						; size = 4
$T6 = -184						; size = 4
_max_force_change$7 = -116				; size = 4
_force_diff$8 = -112					; size = 4
_force$9 = -108						; size = 4
_max_force$10 = -104					; size = 4
_max_force_change$11 = -100				; size = 4
_force_diff$12 = -96					; size = 4
_force$13 = -92						; size = 4
_max_force$14 = -88					; size = 4
_wheel_load$15 = -84					; size = 4
_position$16 = -80					; size = 12
_point$17 = -68						; size = 4
_i$ = -64						; size = 4
_direction$ = -60					; size = 12
_up_direction$ = -48					; size = 12
_attitude$ = -36					; size = 36
?apply_suspension_forces@@YGXXZ PROC			; apply_suspension_forces, COMDAT

; 400  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 401  : 	matrix3x3
; 402  : 		attitude;
; 403  : 	vec3d
; 404  : 		up_direction,
; 405  : 		direction;
; 406  : 	unsigned
; 407  : 		i;
; 408  : 
; 409  : 	get_local_entity_attitude_matrix (get_gunship_entity (), attitude);

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00013	74 0f		 je	 SHORT $LN14@apply_susp
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 8d 28 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], ecx
  00022	eb 24		 jmp	 SHORT $LN15@apply_susp
$LN14@apply_susp:
  00024	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??apply_suspension_forces@@YGXXZ@4JA
  0002a	83 c2 09	 add	 edx, 9
  0002d	52		 push	 edx
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@OKKAHBNG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003e	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN15@apply_susp:
  00048	8d 4d dc	 lea	 ecx, DWORD PTR _attitude$[ebp]
  0004b	51		 push	 ecx
  0004c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00052	52		 push	 edx
  00053	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR tv70[ebp]
  00059	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_attitude_matrix@@3PAP6GXPAUENTITY@@QAY02M@ZA[eax*4]
  00060	ff d1		 call	 ecx

; 410  : 
; 411  : 	up_direction.x = 0.0;

  00062	0f 57 c0	 xorps	 xmm0, xmm0
  00065	f3 0f 11 45 d0	 movss	 DWORD PTR _up_direction$[ebp], xmm0

; 412  : 	up_direction.y = 1.0;

  0006a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00072	f3 0f 11 45 d4	 movss	 DWORD PTR _up_direction$[ebp+4], xmm0

; 413  : 	up_direction.z = 0.0;

  00077	0f 57 c0	 xorps	 xmm0, xmm0
  0007a	f3 0f 11 45 d8	 movss	 DWORD PTR _up_direction$[ebp+8], xmm0

; 414  : 
; 415  : 	multiply_transpose_matrix3x3_vec3d (&up_direction, attitude, &up_direction);

  0007f	8d 45 d0	 lea	 eax, DWORD PTR _up_direction$[ebp]
  00082	50		 push	 eax
  00083	8d 4d dc	 lea	 ecx, DWORD PTR _attitude$[ebp]
  00086	51		 push	 ecx
  00087	8d 55 d0	 lea	 edx, DWORD PTR _up_direction$[ebp]
  0008a	52		 push	 edx
  0008b	e8 00 00 00 00	 call	 ?multiply_transpose_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_transpose_matrix3x3_vec3d

; 416  : 
; 417  : 	for (i = 0; i < current_landing_gear->num_gear_points; i++)

  00090	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00097	eb 09		 jmp	 SHORT $LN4@apply_susp
$LN2@apply_susp:
  00099	8b 45 c0	 mov	 eax, DWORD PTR _i$[ebp]
  0009c	83 c0 01	 add	 eax, 1
  0009f	89 45 c0	 mov	 DWORD PTR _i$[ebp], eax
$LN4@apply_susp:
  000a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  000a7	8b 4d c0	 mov	 ecx, DWORD PTR _i$[ebp]
  000aa	3b 08		 cmp	 ecx, DWORD PTR [eax]
  000ac	0f 83 b8 05 00
	00		 jae	 $LN3@apply_susp

; 418  : 	{
; 419  : 		landing_gear_point* point = &current_landing_gear->gear_points[i];

  000b2	69 45 c0 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  000b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  000bf	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  000c2	89 45 bc	 mov	 DWORD PTR _point$17[ebp], eax

; 420  : 		vec3d position;
; 421  : 		float wheel_load;
; 422  : 
; 423  : 		if (!point->retractable || current_flight_dynamics->undercarriage_state.value == 1.0)

  000c5	8b 45 bc	 mov	 eax, DWORD PTR _point$17[ebp]
  000c8	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000cc	74 1f		 je	 SHORT $LN6@apply_susp
  000ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000d3	f3 0f 5a 80 64
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7268]
  000db	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@3ff0000000000000
  000e3	9f		 lahf
  000e4	f6 c4 44	 test	 ah, 68			; 00000044H
  000e7	0f 8a 78 05 00
	00		 jp	 $LN7@apply_susp
$LN6@apply_susp:

; 424  : 			if (!point->damaged && point->suspension_compression > 0.0)

  000ed	8b 45 bc	 mov	 eax, DWORD PTR _point$17[ebp]
  000f0	83 38 00	 cmp	 DWORD PTR [eax], 0
  000f3	0f 85 6c 05 00
	00		 jne	 $LN7@apply_susp
  000f9	8b 45 bc	 mov	 eax, DWORD PTR _point$17[ebp]
  000fc	f3 0f 5a 40 4c	 cvtss2sd xmm0, DWORD PTR [eax+76]
  00101	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00109	0f 86 56 05 00
	00		 jbe	 $LN7@apply_susp

; 425  : 			{
; 426  : 				position.x = point->position.x;

  0010f	8b 45 bc	 mov	 eax, DWORD PTR _point$17[ebp]
  00112	f3 0f 10 40 34	 movss	 xmm0, DWORD PTR [eax+52]
  00117	f3 0f 11 45 b0	 movss	 DWORD PTR _position$16[ebp], xmm0

; 427  : 				position.y = point->position.y - point->suspension_compression + 3.0;

  0011c	8b 45 bc	 mov	 eax, DWORD PTR _point$17[ebp]
  0011f	8b 4d bc	 mov	 ecx, DWORD PTR _point$17[ebp]
  00122	f3 0f 10 40 38	 movss	 xmm0, DWORD PTR [eax+56]
  00127	f3 0f 5c 41 4c	 subss	 xmm0, DWORD PTR [ecx+76]
  0012c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00130	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00138	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0013c	f3 0f 11 45 b4	 movss	 DWORD PTR _position$16[ebp+4], xmm0

; 428  : 				position.z = point->position.z;

  00141	8b 45 bc	 mov	 eax, DWORD PTR _point$17[ebp]
  00144	f3 0f 10 40 3c	 movss	 xmm0, DWORD PTR [eax+60]
  00149	f3 0f 11 45 b8	 movss	 DWORD PTR _position$16[ebp+8], xmm0

; 429  : 
; 430  : 				if (point->suspension_compression >= point->max_suspension_compression)

  0014e	8b 45 bc	 mov	 eax, DWORD PTR _point$17[ebp]
  00151	8b 4d bc	 mov	 ecx, DWORD PTR _point$17[ebp]
  00154	f3 0f 10 40 4c	 movss	 xmm0, DWORD PTR [eax+76]
  00159	0f 2f 41 58	 comiss	 xmm0, DWORD PTR [ecx+88]
  0015d	72 3b		 jb	 SHORT $LN8@apply_susp

; 431  : 					wheel_load = G * (point->max_suspension_compression * point->suspension_stiffness + (point->suspension_compression - point->max_suspension_compression) * point->bump_stiffness);

  0015f	8b 45 bc	 mov	 eax, DWORD PTR _point$17[ebp]
  00162	8b 4d bc	 mov	 ecx, DWORD PTR _point$17[ebp]
  00165	f3 0f 10 40 58	 movss	 xmm0, DWORD PTR [eax+88]
  0016a	f3 0f 59 41 5c	 mulss	 xmm0, DWORD PTR [ecx+92]
  0016f	8b 55 bc	 mov	 edx, DWORD PTR _point$17[ebp]
  00172	8b 45 bc	 mov	 eax, DWORD PTR _point$17[ebp]
  00175	f3 0f 10 4a 4c	 movss	 xmm1, DWORD PTR [edx+76]
  0017a	f3 0f 5c 48 58	 subss	 xmm1, DWORD PTR [eax+88]
  0017f	8b 4d bc	 mov	 ecx, DWORD PTR _point$17[ebp]
  00182	f3 0f 59 49 68	 mulss	 xmm1, DWORD PTR [ecx+104]
  00187	f3 0f 58 c1	 addss	 xmm0, xmm1
  0018b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@411cf5c3
  00193	f3 0f 11 45 ac	 movss	 DWORD PTR _wheel_load$15[ebp], xmm0

; 432  : 				else

  00198	eb 1d		 jmp	 SHORT $LN9@apply_susp
$LN8@apply_susp:

; 433  : 					wheel_load = G * point->suspension_compression * point->suspension_stiffness;

  0019a	8b 45 bc	 mov	 eax, DWORD PTR _point$17[ebp]
  0019d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@411cf5c3
  001a5	f3 0f 59 40 4c	 mulss	 xmm0, DWORD PTR [eax+76]
  001aa	8b 4d bc	 mov	 ecx, DWORD PTR _point$17[ebp]
  001ad	f3 0f 59 41 5c	 mulss	 xmm0, DWORD PTR [ecx+92]
  001b2	f3 0f 11 45 ac	 movss	 DWORD PTR _wheel_load$15[ebp], xmm0
$LN9@apply_susp:

; 434  : 
; 435  : 				wheel_load += point->damping;

  001b7	8b 45 bc	 mov	 eax, DWORD PTR _point$17[ebp]
  001ba	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _wheel_load$15[ebp]
  001bf	f3 0f 58 40 64	 addss	 xmm0, DWORD PTR [eax+100]
  001c4	f3 0f 11 45 ac	 movss	 DWORD PTR _wheel_load$15[ebp], xmm0

; 436  : 
; 437  : 				add_dynamic_force (point->name, wheel_load, 0.0, &position, &up_direction, TRUE);

  001c9	6a 01		 push	 1
  001cb	8d 45 d0	 lea	 eax, DWORD PTR _up_direction$[ebp]
  001ce	50		 push	 eax
  001cf	8d 4d b0	 lea	 ecx, DWORD PTR _position$16[ebp]
  001d2	51		 push	 ecx
  001d3	51		 push	 ecx
  001d4	0f 57 c0	 xorps	 xmm0, xmm0
  001d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001dc	51		 push	 ecx
  001dd	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _wheel_load$15[ebp]
  001e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e7	8b 55 bc	 mov	 edx, DWORD PTR _point$17[ebp]
  001ea	83 c2 70	 add	 edx, 112		; 00000070H
  001ed	52		 push	 edx
  001ee	e8 00 00 00 00	 call	 ?add_dynamic_force@@YGXPBDMMPAUVEC3D@@1H@Z ; add_dynamic_force

; 438  : 
; 439  : 				// wheel sideways resistance
; 440  : 				if (!point->can_turn)

  001f3	8b 45 bc	 mov	 eax, DWORD PTR _point$17[ebp]
  001f6	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  001fa	0f 85 03 02 00
	00		 jne	 $LN10@apply_susp

; 441  : 				{
; 442  : 					float
; 443  : 						max_force,
; 444  : 						force,
; 445  : 						force_diff,
; 446  : 						max_force_change = get_model_delta_time() * 10.0;

  00200	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00205	f3 0f 5a 80 90
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+144]
  0020d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4024000000000000
  00215	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00219	f3 0f 11 45 9c	 movss	 DWORD PTR _max_force_change$11[ebp], xmm0

; 447  : 
; 448  : 					max_force = min(wheel_load * 2.5f, 1.0f * G);  // depends on load on wheel

  0021e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@411cf5c3
  00226	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR $T6[ebp], xmm0
  0022e	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _wheel_load$15[ebp]
  00233	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40200000
  0023b	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR $T5[ebp], xmm0
  00243	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  00249	50		 push	 eax
  0024a	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00250	51		 push	 ecx
  00251	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00256	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0025a	f3 0f 11 45 a8	 movss	 DWORD PTR _max_force$14[ebp], xmm0

; 449  : 
; 450  : 					force = bound(point->velocity.x * 1.0, -1.0, 1.0);

  0025f	8b 45 bc	 mov	 eax, DWORD PTR _point$17[ebp]
  00262	f3 0f 5a 40 28	 cvtss2sd xmm0, DWORD PTR [eax+40]
  00267	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0026f	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bff0000000000000
  00277	66 0f 2f c8	 comisd	 xmm1, xmm0
  0027b	76 12		 jbe	 SHORT $LN18@apply_susp
  0027d	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff0000000000000
  00285	f2 0f 11 85 24
	ff ff ff	 movsd	 QWORD PTR tv189[ebp], xmm0
  0028d	eb 54		 jmp	 SHORT $LN19@apply_susp
$LN18@apply_susp:
  0028f	8b 4d bc	 mov	 ecx, DWORD PTR _point$17[ebp]
  00292	f3 0f 5a 41 28	 cvtss2sd xmm0, DWORD PTR [ecx+40]
  00297	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0029f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  002a7	76 12		 jbe	 SHORT $LN16@apply_susp
  002a9	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  002b1	f2 0f 11 85 1c
	ff ff ff	 movsd	 QWORD PTR tv188[ebp], xmm0
  002b9	eb 18		 jmp	 SHORT $LN17@apply_susp
$LN16@apply_susp:
  002bb	8b 55 bc	 mov	 edx, DWORD PTR _point$17[ebp]
  002be	f3 0f 5a 42 28	 cvtss2sd xmm0, DWORD PTR [edx+40]
  002c3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0000000000000
  002cb	f2 0f 11 85 1c
	ff ff ff	 movsd	 QWORD PTR tv188[ebp], xmm0
$LN17@apply_susp:
  002d3	f2 0f 10 85 1c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv188[ebp]
  002db	f2 0f 11 85 24
	ff ff ff	 movsd	 QWORD PTR tv189[ebp], xmm0
$LN19@apply_susp:
  002e3	f2 0f 5a 85 24
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv189[ebp]
  002eb	f3 0f 11 45 a4	 movss	 DWORD PTR _force$13[ebp], xmm0

; 451  : 					force_diff = (max_force * force) - point->resistance_force;

  002f0	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _max_force$14[ebp]
  002f5	f3 0f 59 45 a4	 mulss	 xmm0, DWORD PTR _force$13[ebp]
  002fa	8b 45 bc	 mov	 eax, DWORD PTR _point$17[ebp]
  002fd	f3 0f 5c 40 50	 subss	 xmm0, DWORD PTR [eax+80]
  00302	f3 0f 11 45 a0	 movss	 DWORD PTR _force_diff$12[ebp], xmm0

; 452  : 
; 453  : 					point->resistance_force += bound(force_diff, -max_force_change, max_force_change);

  00307	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _max_force_change$11[ebp]
  0030c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00313	0f 2f 45 a0	 comiss	 xmm0, DWORD PTR _force_diff$12[ebp]
  00317	76 16		 jbe	 SHORT $LN22@apply_susp
  00319	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _max_force_change$11[ebp]
  0031e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00325	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR tv200[ebp], xmm0
  0032d	eb 37		 jmp	 SHORT $LN23@apply_susp
$LN22@apply_susp:
  0032f	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _force_diff$12[ebp]
  00334	0f 2f 45 9c	 comiss	 xmm0, DWORD PTR _max_force_change$11[ebp]
  00338	76 0f		 jbe	 SHORT $LN20@apply_susp
  0033a	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _max_force_change$11[ebp]
  0033f	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR tv199[ebp], xmm0
  00347	eb 0d		 jmp	 SHORT $LN21@apply_susp
$LN20@apply_susp:
  00349	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _force_diff$12[ebp]
  0034e	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR tv199[ebp], xmm0
$LN21@apply_susp:
  00356	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR tv199[ebp]
  0035e	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR tv200[ebp], xmm0
$LN23@apply_susp:
  00366	8b 45 bc	 mov	 eax, DWORD PTR _point$17[ebp]
  00369	f3 0f 10 40 50	 movss	 xmm0, DWORD PTR [eax+80]
  0036e	f3 0f 58 85 28
	ff ff ff	 addss	 xmm0, DWORD PTR tv200[ebp]
  00376	8b 4d bc	 mov	 ecx, DWORD PTR _point$17[ebp]
  00379	f3 0f 11 41 50	 movss	 DWORD PTR [ecx+80], xmm0

; 454  : 
; 455  : 					direction.x = (point->resistance_force > 0.0) ? -1.0 : 1.0;

  0037e	8b 45 bc	 mov	 eax, DWORD PTR _point$17[ebp]
  00381	f3 0f 5a 40 50	 cvtss2sd xmm0, DWORD PTR [eax+80]
  00386	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0038e	76 12		 jbe	 SHORT $LN24@apply_susp
  00390	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff0000000000000
  00398	f2 0f 11 85 24
	ff ff ff	 movsd	 QWORD PTR tv206[ebp], xmm0
  003a0	eb 10		 jmp	 SHORT $LN25@apply_susp
$LN24@apply_susp:
  003a2	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  003aa	f2 0f 11 85 24
	ff ff ff	 movsd	 QWORD PTR tv206[ebp], xmm0
$LN25@apply_susp:
  003b2	f2 0f 5a 85 24
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv206[ebp]
  003ba	f3 0f 11 45 c4	 movss	 DWORD PTR _direction$[ebp], xmm0

; 456  : 					direction.y = 0.0;

  003bf	0f 57 c0	 xorps	 xmm0, xmm0
  003c2	f3 0f 11 45 c8	 movss	 DWORD PTR _direction$[ebp+4], xmm0

; 457  : 					direction.z = 0.0;

  003c7	0f 57 c0	 xorps	 xmm0, xmm0
  003ca	f3 0f 11 45 cc	 movss	 DWORD PTR _direction$[ebp+8], xmm0

; 458  : 
; 459  : 					add_dynamic_force ("sideways wheel resistance", fabs(point->resistance_force), 0.0, &position, &direction, TRUE);

  003cf	6a 01		 push	 1
  003d1	8d 45 c4	 lea	 eax, DWORD PTR _direction$[ebp]
  003d4	50		 push	 eax
  003d5	8d 4d b0	 lea	 ecx, DWORD PTR _position$16[ebp]
  003d8	51		 push	 ecx
  003d9	51		 push	 ecx
  003da	0f 57 c0	 xorps	 xmm0, xmm0
  003dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e2	8b 55 bc	 mov	 edx, DWORD PTR _point$17[ebp]
  003e5	51		 push	 ecx
  003e6	f3 0f 10 42 50	 movss	 xmm0, DWORD PTR [edx+80]
  003eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f0	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  003f5	51		 push	 ecx
  003f6	d9 1c 24	 fstp	 DWORD PTR [esp]
  003f9	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@CDHIOGNN@sideways?5wheel?5resistance@
  003fe	e8 00 00 00 00	 call	 ?add_dynamic_force@@YGXPBDMMPAUVEC3D@@1H@Z ; add_dynamic_force
$LN10@apply_susp:

; 460  : 				}
; 461  : 
; 462  : 				// wheel longitudinal resistance/brakes
; 463  : 				{
; 464  : 					float
; 465  : 						max_force,
; 466  : 						force,
; 467  : 						force_diff,
; 468  : 						max_force_change = get_model_delta_time() * 20.0;

  00403	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00408	f3 0f 5a 80 90
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+144]
  00410	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4034000000000000
  00418	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0041c	f3 0f 11 45 8c	 movss	 DWORD PTR _max_force_change$7[ebp], xmm0

; 469  : 
; 470  : 					if (point->has_brakes && current_flight_dynamics->wheel_brake)

  00421	8b 45 bc	 mov	 eax, DWORD PTR _point$17[ebp]
  00424	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00428	74 56		 je	 SHORT $LN11@apply_susp
  0042a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0042f	8b 88 28 25 00
	00		 mov	 ecx, DWORD PTR [eax+9512]
  00435	c1 e9 06	 shr	 ecx, 6
  00438	83 e1 01	 and	 ecx, 1
  0043b	74 43		 je	 SHORT $LN11@apply_susp

; 471  : 						max_force = min(wheel_load * 1.0, 1.0 * G);  // depends on load on wheel

  0043d	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@40239eb860000000
  00445	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR $T4[ebp], xmm0
  0044d	f3 0f 5a 45 ac	 cvtss2sd xmm0, DWORD PTR _wheel_load$15[ebp]
  00452	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0045a	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR $T3[ebp], xmm0
  00462	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  00468	50		 push	 eax
  00469	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0046f	51		 push	 ecx
  00470	e8 00 00 00 00	 call	 ??$min@N@std@@YGABNABN0@Z ; std::min<double>
  00475	f2 0f 5a 00	 cvtsd2ss xmm0, QWORD PTR [eax]
  00479	f3 0f 11 45 98	 movss	 DWORD PTR _max_force$10[ebp], xmm0

; 472  : 					else

  0047e	eb 41		 jmp	 SHORT $LN12@apply_susp
$LN11@apply_susp:

; 473  : 						max_force = min(wheel_load * 0.025f, G);  // general rolling resistance

  00480	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@411cf5c3
  00488	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR $T2[ebp], xmm0
  00490	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _wheel_load$15[ebp]
  00495	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ccccccd
  0049d	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR $T1[ebp], xmm0
  004a5	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  004ab	50		 push	 eax
  004ac	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  004b2	51		 push	 ecx
  004b3	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  004b8	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  004bc	f3 0f 11 45 98	 movss	 DWORD PTR _max_force$10[ebp], xmm0
$LN12@apply_susp:

; 474  : 
; 475  : 					force = bound(point->velocity.z * 2.0, -1.0, 1.0);

  004c1	8b 45 bc	 mov	 eax, DWORD PTR _point$17[ebp]
  004c4	f3 0f 5a 40 30	 cvtss2sd xmm0, DWORD PTR [eax+48]
  004c9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  004d1	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bff0000000000000
  004d9	66 0f 2f c8	 comisd	 xmm1, xmm0
  004dd	76 12		 jbe	 SHORT $LN28@apply_susp
  004df	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff0000000000000
  004e7	f2 0f 11 85 24
	ff ff ff	 movsd	 QWORD PTR tv252[ebp], xmm0
  004ef	eb 54		 jmp	 SHORT $LN29@apply_susp
$LN28@apply_susp:
  004f1	8b 4d bc	 mov	 ecx, DWORD PTR _point$17[ebp]
  004f4	f3 0f 5a 41 30	 cvtss2sd xmm0, DWORD PTR [ecx+48]
  004f9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  00501	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  00509	76 12		 jbe	 SHORT $LN26@apply_susp
  0050b	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00513	f2 0f 11 85 1c
	ff ff ff	 movsd	 QWORD PTR tv251[ebp], xmm0
  0051b	eb 18		 jmp	 SHORT $LN27@apply_susp
$LN26@apply_susp:
  0051d	8b 55 bc	 mov	 edx, DWORD PTR _point$17[ebp]
  00520	f3 0f 5a 42 30	 cvtss2sd xmm0, DWORD PTR [edx+48]
  00525	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  0052d	f2 0f 11 85 1c
	ff ff ff	 movsd	 QWORD PTR tv251[ebp], xmm0
$LN27@apply_susp:
  00535	f2 0f 10 85 1c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv251[ebp]
  0053d	f2 0f 11 85 24
	ff ff ff	 movsd	 QWORD PTR tv252[ebp], xmm0
$LN29@apply_susp:
  00545	f2 0f 5a 85 24
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv252[ebp]
  0054d	f3 0f 11 45 94	 movss	 DWORD PTR _force$9[ebp], xmm0

; 476  : 					force_diff = (max_force * force) - point->brake_force;

  00552	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _max_force$10[ebp]
  00557	f3 0f 59 45 94	 mulss	 xmm0, DWORD PTR _force$9[ebp]
  0055c	8b 45 bc	 mov	 eax, DWORD PTR _point$17[ebp]
  0055f	f3 0f 5c 40 54	 subss	 xmm0, DWORD PTR [eax+84]
  00564	f3 0f 11 45 90	 movss	 DWORD PTR _force_diff$8[ebp], xmm0

; 477  : 
; 478  : 					point->brake_force += bound(force_diff, -max_force_change, max_force_change);

  00569	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _max_force_change$7[ebp]
  0056e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00575	0f 2f 45 90	 comiss	 xmm0, DWORD PTR _force_diff$8[ebp]
  00579	76 16		 jbe	 SHORT $LN32@apply_susp
  0057b	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _max_force_change$7[ebp]
  00580	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00587	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR tv295[ebp], xmm0
  0058f	eb 37		 jmp	 SHORT $LN33@apply_susp
$LN32@apply_susp:
  00591	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _force_diff$8[ebp]
  00596	0f 2f 45 8c	 comiss	 xmm0, DWORD PTR _max_force_change$7[ebp]
  0059a	76 0f		 jbe	 SHORT $LN30@apply_susp
  0059c	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _max_force_change$7[ebp]
  005a1	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR tv294[ebp], xmm0
  005a9	eb 0d		 jmp	 SHORT $LN31@apply_susp
$LN30@apply_susp:
  005ab	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _force_diff$8[ebp]
  005b0	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR tv294[ebp], xmm0
$LN31@apply_susp:
  005b8	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR tv294[ebp]
  005c0	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR tv295[ebp], xmm0
$LN33@apply_susp:
  005c8	8b 45 bc	 mov	 eax, DWORD PTR _point$17[ebp]
  005cb	f3 0f 10 40 54	 movss	 xmm0, DWORD PTR [eax+84]
  005d0	f3 0f 58 85 28
	ff ff ff	 addss	 xmm0, DWORD PTR tv295[ebp]
  005d8	8b 4d bc	 mov	 ecx, DWORD PTR _point$17[ebp]
  005db	f3 0f 11 41 54	 movss	 DWORD PTR [ecx+84], xmm0

; 479  : 
; 480  : 					direction.x = 0.0;

  005e0	0f 57 c0	 xorps	 xmm0, xmm0
  005e3	f3 0f 11 45 c4	 movss	 DWORD PTR _direction$[ebp], xmm0

; 481  : 					direction.y = 0.0;

  005e8	0f 57 c0	 xorps	 xmm0, xmm0
  005eb	f3 0f 11 45 c8	 movss	 DWORD PTR _direction$[ebp+4], xmm0

; 482  : 					direction.z = (point->brake_force > 0.0) ? -1.0 : 1.0;

  005f0	8b 45 bc	 mov	 eax, DWORD PTR _point$17[ebp]
  005f3	f3 0f 5a 40 54	 cvtss2sd xmm0, DWORD PTR [eax+84]
  005f8	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00600	76 12		 jbe	 SHORT $LN34@apply_susp
  00602	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff0000000000000
  0060a	f2 0f 11 85 24
	ff ff ff	 movsd	 QWORD PTR tv301[ebp], xmm0
  00612	eb 10		 jmp	 SHORT $LN35@apply_susp
$LN34@apply_susp:
  00614	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0061c	f2 0f 11 85 24
	ff ff ff	 movsd	 QWORD PTR tv301[ebp], xmm0
$LN35@apply_susp:
  00624	f2 0f 5a 85 24
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv301[ebp]
  0062c	f3 0f 11 45 cc	 movss	 DWORD PTR _direction$[ebp+8], xmm0

; 483  : 
; 484  : 					add_dynamic_force ("brakes", fabs(point->brake_force), 0.0, &position, &direction, TRUE);

  00631	6a 01		 push	 1
  00633	8d 45 c4	 lea	 eax, DWORD PTR _direction$[ebp]
  00636	50		 push	 eax
  00637	8d 4d b0	 lea	 ecx, DWORD PTR _position$16[ebp]
  0063a	51		 push	 ecx
  0063b	51		 push	 ecx
  0063c	0f 57 c0	 xorps	 xmm0, xmm0
  0063f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00644	8b 55 bc	 mov	 edx, DWORD PTR _point$17[ebp]
  00647	51		 push	 ecx
  00648	f3 0f 10 42 54	 movss	 xmm0, DWORD PTR [edx+84]
  0064d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00652	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00657	51		 push	 ecx
  00658	d9 1c 24	 fstp	 DWORD PTR [esp]
  0065b	68 00 00 00 00	 push	 OFFSET ??_C@_06DKCLNMIG@brakes@
  00660	e8 00 00 00 00	 call	 ?add_dynamic_force@@YGXPBDMMPAUVEC3D@@1H@Z ; add_dynamic_force
$LN7@apply_susp:

; 485  : 				}
; 486  : 			}
; 487  : 	}

  00665	e9 2f fa ff ff	 jmp	 $LN2@apply_susp
$LN3@apply_susp:

; 488  : }

  0066a	5f		 pop	 edi
  0066b	5e		 pop	 esi
  0066c	5b		 pop	 ebx
  0066d	8b e5		 mov	 esp, ebp
  0066f	5d		 pop	 ebp
  00670	c3		 ret	 0
?apply_suspension_forces@@YGXXZ ENDP			; apply_suspension_forces
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\co_undercarriage.c
;	COMDAT ?update_suspension@@YGXXZ
_TEXT	SEGMENT
tv517 = -224						; size = 4
tv467 = -220						; size = 4
tv515 = -216						; size = 4
tv480 = -216						; size = 8
tv452 = -216						; size = 8
tv444 = -216						; size = 8
tv212 = -216						; size = 4
tv487 = -212						; size = 4
tv460 = -212						; size = 4
tv213 = -212						; size = 4
tv181 = -212						; size = 4
tv74 = -212						; size = 4
$T1 = -208						; size = 4
$T2 = -204						; size = 4
_turn_rate$3 = -136					; size = 4
_new_angle$4 = -132					; size = 4
_max_turn_rate$5 = -128					; size = 4
_collisions$6 = -124					; size = 4
_compression_change$7 = -120				; size = 4
_terrain_elevation$8 = -116				; size = 4
_spring_compression$9 = -112				; size = 4
_old_world_position$10 = -108				; size = 24
_point$11 = -84						; size = 4
_inv_delta_time$ = -80					; size = 4
_i$ = -76						; size = 4
_inv_attitude$ = -72					; size = 36
_attitude$ = -36					; size = 36
?update_suspension@@YGXXZ PROC				; update_suspension, COMDAT

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 257  : 	matrix3x3
; 258  : 		attitude,
; 259  : 		inv_attitude;
; 260  : 
; 261  : 	unsigned
; 262  : 		i;
; 263  : 
; 264  : 	float
; 265  : 		inv_delta_time = 1.0 / get_model_delta_time();

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00011	f3 0f 5a 80 90
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+144]
  00019	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00021	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00025	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00029	f3 0f 11 45 b0	 movss	 DWORD PTR _inv_delta_time$[ebp], xmm0

; 266  : 
; 267  : 	get_local_entity_attitude_matrix (get_gunship_entity (), attitude);

  0002e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00035	74 0f		 je	 SHORT $LN33@update_sus
  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	89 8d 2c ff ff
	ff		 mov	 DWORD PTR tv74[ebp], ecx
  00044	eb 24		 jmp	 SHORT $LN34@update_sus
$LN33@update_sus:
  00046	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??update_suspension@@YGXXZ@4JA
  0004c	83 c2 0b	 add	 edx, 11			; 0000000bH
  0004f	52		 push	 edx
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@OKKAHBNG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00055	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00060	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv74[ebp], 0
$LN34@update_sus:
  0006a	8d 4d dc	 lea	 ecx, DWORD PTR _attitude$[ebp]
  0006d	51		 push	 ecx
  0006e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00074	52		 push	 edx
  00075	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv74[ebp]
  0007b	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_attitude_matrix@@3PAP6GXPAUENTITY@@QAY02M@ZA[eax*4]
  00082	ff d1		 call	 ecx

; 268  : 	get_inverse_matrix(inv_attitude, attitude);

  00084	8d 45 dc	 lea	 eax, DWORD PTR _attitude$[ebp]
  00087	50		 push	 eax
  00088	8d 4d b8	 lea	 ecx, DWORD PTR _inv_attitude$[ebp]
  0008b	51		 push	 ecx
  0008c	e8 00 00 00 00	 call	 ?get_inverse_matrix@@YGXQAY02MQAY02$$CBM@Z ; get_inverse_matrix

; 269  : 
; 270  : 	for (i = 0; i < current_landing_gear->num_gear_points; i++)

  00091	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00098	eb 09		 jmp	 SHORT $LN4@update_sus
$LN2@update_sus:
  0009a	8b 45 b4	 mov	 eax, DWORD PTR _i$[ebp]
  0009d	83 c0 01	 add	 eax, 1
  000a0	89 45 b4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@update_sus:
  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  000a8	8b 4d b4	 mov	 ecx, DWORD PTR _i$[ebp]
  000ab	3b 08		 cmp	 ecx, DWORD PTR [eax]
  000ad	0f 83 d6 05 00
	00		 jae	 $LN3@update_sus

; 271  : 	{
; 272  : 		landing_gear_point* point = &current_landing_gear->gear_points[i];

  000b3	69 45 b4 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  000ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  000c0	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  000c3	89 45 ac	 mov	 DWORD PTR _point$11[ebp], eax

; 273  : 
; 274  : 		if (!point->damaged
; 275  : 			&& (!point->retractable || current_flight_dynamics->undercarriage_state.value == 1.0))

  000c6	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  000c9	83 38 00	 cmp	 DWORD PTR [eax], 0
  000cc	0f 85 b2 05 00
	00		 jne	 $LN31@update_sus
  000d2	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  000d5	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000d9	74 1f		 je	 SHORT $LN8@update_sus
  000db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000e0	f3 0f 5a 80 64
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7268]
  000e8	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@3ff0000000000000
  000f0	9f		 lahf
  000f1	f6 c4 44	 test	 ah, 68			; 00000044H
  000f4	0f 8a 8a 05 00
	00		 jp	 $LN31@update_sus
$LN8@update_sus:

; 276  : 		{
; 277  : 			double_vec3d
; 278  : 				old_world_position;
; 279  : 
; 280  : 			float
; 281  : 				spring_compression,
; 282  : 				terrain_elevation,
; 283  : 				compression_change;
; 284  : 
; 285  : 			old_world_position = point->world_position;

  000fa	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  000fd	83 c0 10	 add	 eax, 16			; 00000010H
  00100	8b 08		 mov	 ecx, DWORD PTR [eax]
  00102	89 4d 94	 mov	 DWORD PTR _old_world_position$10[ebp], ecx
  00105	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00108	89 55 98	 mov	 DWORD PTR _old_world_position$10[ebp+4], edx
  0010b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0010e	89 4d 9c	 mov	 DWORD PTR _old_world_position$10[ebp+8], ecx
  00111	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00114	89 55 a0	 mov	 DWORD PTR _old_world_position$10[ebp+12], edx
  00117	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0011a	89 4d a4	 mov	 DWORD PTR _old_world_position$10[ebp+16], ecx
  0011d	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00120	89 55 a8	 mov	 DWORD PTR _old_world_position$10[ebp+20], edx

; 286  : 
; 287  : 			if (!fixed_collision_count && !moving_collision_count)

  00123	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?fixed_collision_count@@3HA, 0 ; fixed_collision_count
  0012a	75 16		 jne	 SHORT $LN9@update_sus
  0012c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?moving_collision_count@@3HA, 0 ; moving_collision_count
  00133	75 0d		 jne	 SHORT $LN9@update_sus

; 288  : 				update_gear_world_position(point, inv_attitude);

  00135	8d 45 b8	 lea	 eax, DWORD PTR _inv_attitude$[ebp]
  00138	50		 push	 eax
  00139	8b 4d ac	 mov	 ecx, DWORD PTR _point$11[ebp]
  0013c	51		 push	 ecx
  0013d	e8 00 00 00 00	 call	 ?update_gear_world_position@@YGXPAUlanding_gear_point@@QAY02M@Z ; update_gear_world_position
$LN9@update_sus:

; 289  : 
; 290  : 			point->velocity.x = (point->world_position.x - old_world_position.x) * inv_delta_time;

  00142	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  00145	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
  0014a	f2 0f 5c 45 94	 subsd	 xmm0, QWORD PTR _old_world_position$10[ebp]
  0014f	f3 0f 5a 4d b0	 cvtss2sd xmm1, DWORD PTR _inv_delta_time$[ebp]
  00154	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00158	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0015c	8b 4d ac	 mov	 ecx, DWORD PTR _point$11[ebp]
  0015f	f3 0f 11 41 28	 movss	 DWORD PTR [ecx+40], xmm0

; 291  : 			point->velocity.y = (point->world_position.y - old_world_position.y) * inv_delta_time;

  00164	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  00167	f2 0f 10 40 18	 movsd	 xmm0, QWORD PTR [eax+24]
  0016c	f2 0f 5c 45 9c	 subsd	 xmm0, QWORD PTR _old_world_position$10[ebp+8]
  00171	f3 0f 5a 4d b0	 cvtss2sd xmm1, DWORD PTR _inv_delta_time$[ebp]
  00176	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0017a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0017e	8b 4d ac	 mov	 ecx, DWORD PTR _point$11[ebp]
  00181	f3 0f 11 41 2c	 movss	 DWORD PTR [ecx+44], xmm0

; 292  : 			point->velocity.z = (point->world_position.z - old_world_position.z) * inv_delta_time;

  00186	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  00189	f2 0f 10 40 20	 movsd	 xmm0, QWORD PTR [eax+32]
  0018e	f2 0f 5c 45 a4	 subsd	 xmm0, QWORD PTR _old_world_position$10[ebp+16]
  00193	f3 0f 5a 4d b0	 cvtss2sd xmm1, DWORD PTR _inv_delta_time$[ebp]
  00198	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0019c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001a0	8b 4d ac	 mov	 ecx, DWORD PTR _point$11[ebp]
  001a3	f3 0f 11 41 30	 movss	 DWORD PTR [ecx+48], xmm0

; 293  : 
; 294  : 			multiply_transpose_matrix3x3_vec3d(&point->velocity, attitude, &point->velocity);

  001a8	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  001ab	83 c0 28	 add	 eax, 40			; 00000028H
  001ae	50		 push	 eax
  001af	8d 4d dc	 lea	 ecx, DWORD PTR _attitude$[ebp]
  001b2	51		 push	 ecx
  001b3	8b 55 ac	 mov	 edx, DWORD PTR _point$11[ebp]
  001b6	83 c2 28	 add	 edx, 40			; 00000028H
  001b9	52		 push	 edx
  001ba	e8 00 00 00 00	 call	 ?multiply_transpose_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_transpose_matrix3x3_vec3d

; 295  : 
; 296  : 			terrain_elevation = get_3d_terrain_elevation(point->world_position.x, point->world_position.z);

  001bf	6a 00		 push	 0
  001c1	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  001c4	f2 0f 10 40 20	 movsd	 xmm0, QWORD PTR [eax+32]
  001c9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001cd	51		 push	 ecx
  001ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d3	8b 4d ac	 mov	 ecx, DWORD PTR _point$11[ebp]
  001d6	f2 0f 10 41 10	 movsd	 xmm0, QWORD PTR [ecx+16]
  001db	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001df	51		 push	 ecx
  001e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e5	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  001ea	d9 5d 8c	 fstp	 DWORD PTR _terrain_elevation$8[ebp]

; 297  : 			spring_compression = (terrain_elevation - point->world_position.y);

  001ed	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _terrain_elevation$8[ebp]
  001f2	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  001f5	f2 0f 5c 40 18	 subsd	 xmm0, QWORD PTR [eax+24]
  001fa	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001fe	f3 0f 11 45 90	 movss	 DWORD PTR _spring_compression$9[ebp], xmm0

; 298  : 
; 299  : 			if (spring_compression > 0.55)

  00203	f3 0f 5a 45 90	 cvtss2sd xmm0, DWORD PTR _spring_compression$9[ebp]
  00208	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fe199999999999a
  00210	76 6e		 jbe	 SHORT $LN10@update_sus

; 300  : 			{
; 301  : 				int
; 302  : 					collisions;
; 303  : 
; 304  : 				collisions = FALSE;

  00212	c7 45 84 00 00
	00 00		 mov	 DWORD PTR _collisions$6[ebp], 0

; 305  : 				switch ( get_game_type () )

  00219	a1 00 00 00 00	 mov	 eax, DWORD PTR ?game_type@@3W4GAME_TYPES@@A ; game_type
  0021e	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv181[ebp], eax
  00224	83 bd 2c ff ff
	ff 01		 cmp	 DWORD PTR tv181[ebp], 1
  0022b	74 14		 je	 SHORT $LN11@update_sus
  0022d	83 bd 2c ff ff
	ff 01		 cmp	 DWORD PTR tv181[ebp], 1
  00234	7e 29		 jle	 SHORT $LN5@update_sus
  00236	83 bd 2c ff ff
	ff 03		 cmp	 DWORD PTR tv181[ebp], 3
  0023d	7e 12		 jle	 SHORT $LN12@update_sus
  0023f	eb 1e		 jmp	 SHORT $LN5@update_sus
$LN11@update_sus:

; 306  : 				{
; 307  : 					case GAME_TYPE_FREE_FLIGHT:
; 308  : 					{
; 309  : 						collisions = get_global_session_free_flight_realism_invulnerable_from_collisions ();

  00241	a1 b0 01 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+432
  00246	c1 e8 03	 shr	 eax, 3
  00249	83 e0 01	 and	 eax, 1
  0024c	89 45 84	 mov	 DWORD PTR _collisions$6[ebp], eax

; 310  : 						break;

  0024f	eb 0e		 jmp	 SHORT $LN5@update_sus
$LN12@update_sus:

; 311  : 					}
; 312  : 					case GAME_TYPE_CAMPAIGN:
; 313  : 					case GAME_TYPE_SKIRMISH:
; 314  : 					{
; 315  : 						collisions = get_global_session_campaign_realism_invulnerable_from_collisions ();

  00251	a1 b0 01 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+432
  00256	c1 e8 08	 shr	 eax, 8
  00259	83 e0 01	 and	 eax, 1
  0025c	89 45 84	 mov	 DWORD PTR _collisions$6[ebp], eax
$LN5@update_sus:

; 316  : 						break;
; 317  : 					}
; 318  : 				}
; 319  : 
; 320  : 				if (!collisions)

  0025f	83 7d 84 00	 cmp	 DWORD PTR _collisions$6[ebp], 0
  00263	75 0e		 jne	 SHORT $LN13@update_sus

; 321  : 				{
; 322  : 					point->damaged = TRUE;

  00265	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  00268	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 323  : 					//point->suspension_compression = 0.0;
; 324  : 					continue;

  0026e	e9 27 fe ff ff	 jmp	 $LN2@update_sus
$LN13@update_sus:

; 325  : 				}
; 326  : 
; 327  : 				spring_compression = 0.55;

  00273	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  0027b	f3 0f 11 45 90	 movss	 DWORD PTR _spring_compression$9[ebp], xmm0
$LN10@update_sus:

; 328  : 			}
; 329  : 
; 330  : 			if (spring_compression > 0.0)

  00280	f3 0f 5a 45 90	 cvtss2sd xmm0, DWORD PTR _spring_compression$9[ebp]
  00285	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0028d	0f 86 99 03 00
	00		 jbe	 $LN14@update_sus

; 331  : 			{
; 332  : 				compression_change = spring_compression - point->suspension_compression;

  00293	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  00296	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _spring_compression$9[ebp]
  0029b	f3 0f 5c 40 4c	 subss	 xmm0, DWORD PTR [eax+76]
  002a0	f3 0f 11 45 88	 movss	 DWORD PTR _compression_change$7[ebp], xmm0

; 333  : 
; 334  : 				if ((fixed_collision_count || moving_collision_count) && compression_change > 0.0)

  002a5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?fixed_collision_count@@3HA, 0 ; fixed_collision_count
  002ac	75 09		 jne	 SHORT $LN18@update_sus
  002ae	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?moving_collision_count@@3HA, 0 ; moving_collision_count
  002b5	74 1f		 je	 SHORT $LN16@update_sus
$LN18@update_sus:
  002b7	f3 0f 5a 45 88	 cvtss2sd xmm0, DWORD PTR _compression_change$7[ebp]
  002bc	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  002c4	76 10		 jbe	 SHORT $LN16@update_sus

; 335  : 				{
; 336  : 					point->damping = 0.0;

  002c6	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  002c9	0f 57 c0	 xorps	 xmm0, xmm0
  002cc	f3 0f 11 40 64	 movss	 DWORD PTR [eax+100], xmm0

; 337  : 				}
; 338  : 				else

  002d1	e9 fb 00 00 00	 jmp	 $LN21@update_sus
$LN16@update_sus:

; 339  : 				{
; 340  : 					point->damping = bound(compression_change * inv_delta_time * point->damper_stiffness, -25.0f, 25.0f);

  002d6	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _compression_change$7[ebp]
  002db	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _inv_delta_time$[ebp]
  002e0	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  002e3	f3 0f 59 40 60	 mulss	 xmm0, DWORD PTR [eax+96]
  002e8	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@c1c80000
  002f0	0f 2f c8	 comiss	 xmm1, xmm0
  002f3	76 12		 jbe	 SHORT $LN37@update_sus
  002f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  002fd	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR tv213[ebp], xmm0
  00305	eb 57		 jmp	 SHORT $LN38@update_sus
$LN37@update_sus:
  00307	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _compression_change$7[ebp]
  0030c	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _inv_delta_time$[ebp]
  00311	8b 4d ac	 mov	 ecx, DWORD PTR _point$11[ebp]
  00314	f3 0f 59 41 60	 mulss	 xmm0, DWORD PTR [ecx+96]
  00319	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@41c80000
  00320	76 12		 jbe	 SHORT $LN35@update_sus
  00322	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41c80000
  0032a	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR tv212[ebp], xmm0
  00332	eb 1a		 jmp	 SHORT $LN36@update_sus
$LN35@update_sus:
  00334	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _compression_change$7[ebp]
  00339	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _inv_delta_time$[ebp]
  0033e	8b 55 ac	 mov	 edx, DWORD PTR _point$11[ebp]
  00341	f3 0f 59 42 60	 mulss	 xmm0, DWORD PTR [edx+96]
  00346	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR tv212[ebp], xmm0
$LN36@update_sus:
  0034e	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR tv212[ebp]
  00356	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR tv213[ebp], xmm0
$LN38@update_sus:
  0035e	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  00361	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR tv213[ebp]
  00369	f3 0f 11 40 64	 movss	 DWORD PTR [eax+100], xmm0

; 341  : 
; 342  : 					if (compression_change < 0.0)

  0036e	f3 0f 5a 45 88	 cvtss2sd xmm0, DWORD PTR _compression_change$7[ebp]
  00373	0f 57 c9	 xorps	 xmm1, xmm1
  00376	66 0f 2f c8	 comisd	 xmm1, xmm0
  0037a	76 1c		 jbe	 SHORT $LN19@update_sus

; 343  : 					{
; 344  : 						// rebound produces more damping than bump
; 345  : 						point->damping *= 2.0;

  0037c	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  0037f	f3 0f 5a 40 64	 cvtss2sd xmm0, DWORD PTR [eax+100]
  00384	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  0038c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00390	8b 4d ac	 mov	 ecx, DWORD PTR _point$11[ebp]
  00393	f3 0f 11 41 64	 movss	 DWORD PTR [ecx+100], xmm0
$LN19@update_sus:

; 346  : 					}
; 347  : 
; 348  : 					if (spring_compression >= point->max_suspension_compression)

  00398	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  0039b	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _spring_compression$9[ebp]
  003a0	0f 2f 40 58	 comiss	 xmm0, DWORD PTR [eax+88]
  003a4	72 2b		 jb	 SHORT $LN21@update_sus

; 349  : 					{
; 350  : 						// increase damper stiffness on the bump to get this descent stopped quickly
; 351  : 						if (compression_change > 0.0)  // bump

  003a6	f3 0f 5a 45 88	 cvtss2sd xmm0, DWORD PTR _compression_change$7[ebp]
  003ab	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  003b3	76 1c		 jbe	 SHORT $LN21@update_sus

; 352  : 							point->damping *= 2.0;

  003b5	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  003b8	f3 0f 5a 40 64	 cvtss2sd xmm0, DWORD PTR [eax+100]
  003bd	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  003c5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003c9	8b 4d ac	 mov	 ecx, DWORD PTR _point$11[ebp]
  003cc	f3 0f 11 41 64	 movss	 DWORD PTR [ecx+100], xmm0
$LN21@update_sus:

; 353  : 					}
; 354  : 				}
; 355  : 
; 356  : 				point->suspension_compression = spring_compression;

  003d1	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  003d4	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _spring_compression$9[ebp]
  003d9	f3 0f 11 40 4c	 movss	 DWORD PTR [eax+76], xmm0

; 357  : 
; 358  : 				if (point->can_turn && (fabs(point->velocity.x) > 0.1 || fabs(point->velocity.z) > 0.1))

  003de	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  003e1	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  003e5	0f 84 3f 02 00
	00		 je	 $LN22@update_sus
  003eb	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  003ee	51		 push	 ecx
  003ef	f3 0f 10 40 28	 movss	 xmm0, DWORD PTR [eax+40]
  003f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f9	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  003fe	dd 9d 28 ff ff
	ff		 fstp	 QWORD PTR tv444[ebp]
  00404	f2 0f 10 85 28
	ff ff ff	 movsd	 xmm0, QWORD PTR tv444[ebp]
  0040c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fb999999999999a
  00414	77 2f		 ja	 SHORT $LN23@update_sus
  00416	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  00419	51		 push	 ecx
  0041a	f3 0f 10 40 30	 movss	 xmm0, DWORD PTR [eax+48]
  0041f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00424	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00429	dd 9d 28 ff ff
	ff		 fstp	 QWORD PTR tv452[ebp]
  0042f	f2 0f 10 85 28
	ff ff ff	 movsd	 xmm0, QWORD PTR tv452[ebp]
  00437	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fb999999999999a
  0043f	0f 86 e5 01 00
	00		 jbe	 $LN22@update_sus
$LN23@update_sus:

; 359  : 				{
; 360  : 					float
; 361  : 						max_turn_rate = rad(180) * get_model_delta_time() * (min(fabs(point->velocity.z) + fabs(point->velocity.x), 2.0f)) * 0.5,

  00445	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0044d	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR $T2[ebp], xmm0
  00455	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  00458	51		 push	 ecx
  00459	f3 0f 10 40 30	 movss	 xmm0, DWORD PTR [eax+48]
  0045e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00463	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00468	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR tv460[ebp]
  0046e	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR tv460[ebp]
  00476	8b 4d ac	 mov	 ecx, DWORD PTR _point$11[ebp]
  00479	51		 push	 ecx
  0047a	f3 0f 10 49 28	 movss	 xmm1, DWORD PTR [ecx+40]
  0047f	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00484	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR tv515[ebp], xmm0
  0048c	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00491	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR tv467[ebp]
  00497	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR tv515[ebp]
  0049f	f3 0f 58 85 24
	ff ff ff	 addss	 xmm0, DWORD PTR tv467[ebp]
  004a7	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR $T1[ebp], xmm0
  004af	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  004b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40490fdb
  004bd	f3 0f 59 82 90
	00 00 00	 mulss	 xmm0, DWORD PTR [edx+144]
  004c5	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  004cb	50		 push	 eax
  004cc	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  004d2	51		 push	 ecx
  004d3	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR tv517[ebp], xmm0
  004db	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  004e0	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR tv517[ebp]
  004e8	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  004ec	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  004f0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  004f8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004fc	f3 0f 11 45 80	 movss	 DWORD PTR _max_turn_rate$5[ebp], xmm0

; 362  : 						new_angle;
; 363  : 
; 364  : 
; 365  : 					if (fabs(point->velocity.z) > 0.05)

  00501	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  00504	51		 push	 ecx
  00505	f3 0f 10 40 30	 movss	 xmm0, DWORD PTR [eax+48]
  0050a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0050f	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00514	dd 9d 28 ff ff
	ff		 fstp	 QWORD PTR tv480[ebp]
  0051a	f2 0f 10 85 28
	ff ff ff	 movsd	 xmm0, QWORD PTR tv480[ebp]
  00522	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fa999999999999a
  0052a	0f 86 a1 00 00
	00		 jbe	 $LN24@update_sus

; 366  : 					{
; 367  : 						new_angle = atan(point->velocity.x / fabs(point->velocity.z));

  00530	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  00533	51		 push	 ecx
  00534	f3 0f 10 40 30	 movss	 xmm0, DWORD PTR [eax+48]
  00539	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053e	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00543	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR tv487[ebp]
  00549	8b 4d ac	 mov	 ecx, DWORD PTR _point$11[ebp]
  0054c	f3 0f 10 41 28	 movss	 xmm0, DWORD PTR [ecx+40]
  00551	f3 0f 5e 85 2c
	ff ff ff	 divss	 xmm0, DWORD PTR tv487[ebp]
  00559	51		 push	 ecx
  0055a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0055f	e8 00 00 00 00	 call	 ?atan@@YGMM@Z		; atan
  00564	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR _new_angle$4[ebp]

; 368  : 						if (point->velocity.z < 0.0)

  0056a	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  0056d	f3 0f 5a 40 30	 cvtss2sd xmm0, DWORD PTR [eax+48]
  00572	0f 57 c9	 xorps	 xmm1, xmm1
  00575	66 0f 2f c8	 comisd	 xmm1, xmm0
  00579	76 54		 jbe	 SHORT $LN28@update_sus

; 369  : 							if (new_angle > 0.0)

  0057b	f3 0f 5a 85 7c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _new_angle$4[ebp]
  00583	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0058b	76 22		 jbe	 SHORT $LN27@update_sus

; 370  : 								new_angle = rad(180.0) - new_angle;

  0058d	f3 0f 5a 85 7c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _new_angle$4[ebp]
  00595	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@400921fb51000000
  0059d	f2 0f 5c c8	 subsd	 xmm1, xmm0
  005a1	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  005a5	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _new_angle$4[ebp], xmm0

; 371  : 							else

  005ad	eb 20		 jmp	 SHORT $LN28@update_sus
$LN27@update_sus:

; 372  : 								new_angle = rad(-180.0) - new_angle;

  005af	f3 0f 5a 85 7c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _new_angle$4[ebp]
  005b7	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c00921fb51000000
  005bf	f2 0f 5c c8	 subsd	 xmm1, xmm0
  005c3	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  005c7	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _new_angle$4[ebp], xmm0
$LN28@update_sus:

; 373  : 					}

  005cf	eb 34		 jmp	 SHORT $LN30@update_sus
$LN24@update_sus:

; 374  : 					else if (point->velocity.x > 0.0)

  005d1	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  005d4	f3 0f 5a 40 28	 cvtss2sd xmm0, DWORD PTR [eax+40]
  005d9	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  005e1	76 12		 jbe	 SHORT $LN29@update_sus

; 375  : 						new_angle = 90.0;

  005e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42b40000
  005eb	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _new_angle$4[ebp], xmm0

; 376  : 					else

  005f3	eb 10		 jmp	 SHORT $LN30@update_sus
$LN29@update_sus:

; 377  : 						new_angle = -90.0;

  005f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2b40000
  005fd	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _new_angle$4[ebp], xmm0
$LN30@update_sus:

; 378  : 
; 379  : 					modify_angle(&point->turn_angle, new_angle, max_turn_rate);

  00605	51		 push	 ecx
  00606	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _max_turn_rate$5[ebp]
  0060b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00610	51		 push	 ecx
  00611	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _new_angle$4[ebp]
  00619	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0061e	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  00621	83 c0 40	 add	 eax, 64			; 00000040H
  00624	50		 push	 eax
  00625	e8 00 00 00 00	 call	 ?modify_angle@@YGXPAMMM@Z ; modify_angle
$LN22@update_sus:

; 380  :  				}
; 381  : 			}
; 382  : 			else

  0062a	eb 58		 jmp	 SHORT $LN31@update_sus
$LN14@update_sus:

; 383  : 			{
; 384  : 				point->suspension_compression = 0.0;

  0062c	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  0062f	0f 57 c0	 xorps	 xmm0, xmm0
  00632	f3 0f 11 40 4c	 movss	 DWORD PTR [eax+76], xmm0

; 385  : 
; 386  : 				if (point->can_turn)

  00637	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  0063a	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0063e	74 44		 je	 SHORT $LN31@update_sus

; 387  : 				{
; 388  : 					float
; 389  : 						turn_rate = get_model_delta_time() * rad(180.0);

  00640	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00645	f3 0f 5a 80 90
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+144]
  0064d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@400921fb51000000
  00655	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00659	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _turn_rate$3[ebp], xmm0

; 390  : 
; 391  : 					// straighten wheel
; 392  : 					modify_angle(&point->turn_angle, 0.0f, turn_rate);

  00661	51		 push	 ecx
  00662	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _turn_rate$3[ebp]
  0066a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0066f	51		 push	 ecx
  00670	0f 57 c0	 xorps	 xmm0, xmm0
  00673	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00678	8b 45 ac	 mov	 eax, DWORD PTR _point$11[ebp]
  0067b	83 c0 40	 add	 eax, 64			; 00000040H
  0067e	50		 push	 eax
  0067f	e8 00 00 00 00	 call	 ?modify_angle@@YGXPAMMM@Z ; modify_angle
$LN31@update_sus:

; 393  : 				}
; 394  : 			}
; 395  : 		}
; 396  : 	}

  00684	e9 11 fa ff ff	 jmp	 $LN2@update_sus
$LN3@update_sus:

; 397  : }

  00689	5f		 pop	 edi
  0068a	5e		 pop	 esi
  0068b	5b		 pop	 ebx
  0068c	8b e5		 mov	 esp, ebp
  0068e	5d		 pop	 ebp
  0068f	c3		 ret	 0
?update_suspension@@YGXXZ ENDP				; update_suspension
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\co_undercarriage.c
;	COMDAT ?update_gear_world_position@@YGXPAUlanding_gear_point@@QAY02M@Z
_TEXT	SEGMENT
_gear_position$ = -12					; size = 12
_point$ = 8						; size = 4
_attitude$ = 12						; size = 4
?update_gear_world_position@@YGXPAUlanding_gear_point@@QAY02M@Z PROC ; update_gear_world_position, COMDAT

; 234  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 235  : 	vec3d
; 236  : 		gear_position;
; 237  : 
; 238  : 	point->world_position.x = current_flight_dynamics->position.x;

  00009	8b 45 08	 mov	 eax, DWORD PTR _point$[ebp]
  0000c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00012	f2 0f 10 81 ac
	00 00 00	 movsd	 xmm0, QWORD PTR [ecx+172]
  0001a	f2 0f 11 40 10	 movsd	 QWORD PTR [eax+16], xmm0

; 239  : 	point->world_position.y = current_flight_dynamics->position.y;

  0001f	8b 45 08	 mov	 eax, DWORD PTR _point$[ebp]
  00022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00028	f2 0f 10 81 b4
	00 00 00	 movsd	 xmm0, QWORD PTR [ecx+180]
  00030	f2 0f 11 40 18	 movsd	 QWORD PTR [eax+24], xmm0

; 240  : 	point->world_position.z = current_flight_dynamics->position.z;

  00035	8b 45 08	 mov	 eax, DWORD PTR _point$[ebp]
  00038	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0003e	f2 0f 10 81 bc
	00 00 00	 movsd	 xmm0, QWORD PTR [ecx+188]
  00046	f2 0f 11 40 20	 movsd	 QWORD PTR [eax+32], xmm0

; 241  : 
; 242  : 	gear_position = point->position;

  0004b	8b 45 08	 mov	 eax, DWORD PTR _point$[ebp]
  0004e	83 c0 34	 add	 eax, 52			; 00000034H
  00051	8b 08		 mov	 ecx, DWORD PTR [eax]
  00053	89 4d f4	 mov	 DWORD PTR _gear_position$[ebp], ecx
  00056	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00059	89 55 f8	 mov	 DWORD PTR _gear_position$[ebp+4], edx
  0005c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0005f	89 45 fc	 mov	 DWORD PTR _gear_position$[ebp+8], eax

; 243  : 
; 244  : 	multiply_transpose_matrix3x3_vec3d(&gear_position, attitude, &gear_position);

  00062	8d 45 f4	 lea	 eax, DWORD PTR _gear_position$[ebp]
  00065	50		 push	 eax
  00066	8b 4d 0c	 mov	 ecx, DWORD PTR _attitude$[ebp]
  00069	51		 push	 ecx
  0006a	8d 55 f4	 lea	 edx, DWORD PTR _gear_position$[ebp]
  0006d	52		 push	 edx
  0006e	e8 00 00 00 00	 call	 ?multiply_transpose_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_transpose_matrix3x3_vec3d

; 245  : 
; 246  : 	point->world_position.x += gear_position.x;

  00073	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _gear_position$[ebp]
  00078	8b 45 08	 mov	 eax, DWORD PTR _point$[ebp]
  0007b	f2 0f 58 40 10	 addsd	 xmm0, QWORD PTR [eax+16]
  00080	8b 4d 08	 mov	 ecx, DWORD PTR _point$[ebp]
  00083	f2 0f 11 41 10	 movsd	 QWORD PTR [ecx+16], xmm0

; 247  : 	point->world_position.y += gear_position.y;

  00088	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _gear_position$[ebp+4]
  0008d	8b 45 08	 mov	 eax, DWORD PTR _point$[ebp]
  00090	f2 0f 58 40 18	 addsd	 xmm0, QWORD PTR [eax+24]
  00095	8b 4d 08	 mov	 ecx, DWORD PTR _point$[ebp]
  00098	f2 0f 11 41 18	 movsd	 QWORD PTR [ecx+24], xmm0

; 248  : 	point->world_position.z += gear_position.z;

  0009d	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _gear_position$[ebp+8]
  000a2	8b 45 08	 mov	 eax, DWORD PTR _point$[ebp]
  000a5	f2 0f 58 40 20	 addsd	 xmm0, QWORD PTR [eax+32]
  000aa	8b 4d 08	 mov	 ecx, DWORD PTR _point$[ebp]
  000ad	f2 0f 11 41 20	 movsd	 QWORD PTR [ecx+32], xmm0

; 249  : }

  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	5b		 pop	 ebx
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c2 08 00	 ret	 8
?update_gear_world_position@@YGXPAUlanding_gear_point@@QAY02M@Z ENDP ; update_gear_world_position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\co_undercarriage.c
;	COMDAT ?initialise_landing_gear@@YGXPAUlanding_gear_system@@PBD@Z
_TEXT	SEGMENT
_i$1 = -280						; size = 4
_nread$2 = -276						; size = 4
_len$3 = -272						; size = 4
_point$4 = -268						; size = 4
_i$5 = -264						; size = 4
_file$6 = -260						; size = 4
_filepath$7 = -256					; size = 256
_gear$ = 8						; size = 4
_filename$ = 12						; size = 4
?initialise_landing_gear@@YGXPAUlanding_gear_system@@PBD@Z PROC ; initialise_landing_gear, COMDAT

; 154  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 58 01 00
	00		 sub	 esp, 344		; 00000158H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 155  : 	gear->num_gear_points = 0;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _gear$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 156  : 	gear->gear_points = NULL;

  00015	8b 45 08	 mov	 eax, DWORD PTR _gear$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 157  : 	memset(gear->gear_points_types, 0, sizeof(gear->gear_points_types));

  0001f	6a 10		 push	 16			; 00000010H
  00021	6a 00		 push	 0
  00023	8b 45 08	 mov	 eax, DWORD PTR _gear$[ebp]
  00026	83 c0 08	 add	 eax, 8
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 _memset
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 158  : 
; 159  : 	if (filename)

  00032	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  00036	0f 84 fa 03 00
	00		 je	 $LN1@initialise

; 160  : 	{
; 161  : 		char filepath[256];
; 162  : 		FILE* file;
; 163  : 
; 164  : 		snprintf(filepath, ARRAY_LENGTH(filepath), "..\\common\\data\\dyn\\%s", filename);

  0003c	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  0003f	50		 push	 eax
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@NOKOINCK@?4?4?2common?2data?2dyn?2?$CFs@
  00045	68 00 01 00 00	 push	 256			; 00000100H
  0004a	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _filepath$7[ebp]
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 _sprintf_s
  00056	83 c4 10	 add	 esp, 16			; 00000010H

; 165  : 
; 166  : 		file = safe_fopen(filepath, "r");

  00059	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r@
  0005e	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _filepath$7[ebp]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ?safe_fopen@@YGPAU_iobuf@@PBD0@Z ; safe_fopen
  0006a	89 85 fc fe ff
	ff		 mov	 DWORD PTR _file$6[ebp], eax

; 167  : 		if (file)

  00070	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _file$6[ebp], 0
  00077	0f 84 b9 03 00
	00		 je	 $LN1@initialise

; 168  : 		{
; 169  : 			fscanf(file, "suspension_points = %d\n", &gear->num_gear_points);

  0007d	8b 45 08	 mov	 eax, DWORD PTR _gear$[ebp]
  00080	50		 push	 eax
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@HIELCMMP@suspension_points?5?$DN?5?$CFd?6@
  00086	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _file$6[ebp]
  0008c	51		 push	 ecx
  0008d	e8 00 00 00 00	 call	 _fscanf
  00092	83 c4 0c	 add	 esp, 12			; 0000000cH

; 170  : 
; 171  : 			if (gear->num_gear_points > 0 && gear->num_gear_points <= 16)

  00095	8b 45 08	 mov	 eax, DWORD PTR _gear$[ebp]
  00098	83 38 00	 cmp	 DWORD PTR [eax], 0
  0009b	0f 86 89 03 00
	00		 jbe	 $LN10@initialise
  000a1	8b 45 08	 mov	 eax, DWORD PTR _gear$[ebp]
  000a4	83 38 10	 cmp	 DWORD PTR [eax], 16	; 00000010H
  000a7	0f 87 7d 03 00
	00		 ja	 $LN10@initialise

; 172  : 			{
; 173  : 				unsigned i;
; 174  : 
; 175  : 				gear->gear_points = (landing_gear_point *) safe_malloc(sizeof(landing_gear_point) * gear->num_gear_points);

  000ad	8b 45 08	 mov	 eax, DWORD PTR _gear$[ebp]
  000b0	69 08 94 00 00
	00		 imul	 ecx, DWORD PTR [eax], 148
  000b6	51		 push	 ecx
  000b7	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  000bc	8b 55 08	 mov	 edx, DWORD PTR _gear$[ebp]
  000bf	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 176  : 				memset(gear->gear_points, 0, gear->num_gear_points * sizeof(landing_gear_point));

  000c2	8b 45 08	 mov	 eax, DWORD PTR _gear$[ebp]
  000c5	69 08 94 00 00
	00		 imul	 ecx, DWORD PTR [eax], 148
  000cb	51		 push	 ecx
  000cc	6a 00		 push	 0
  000ce	8b 55 08	 mov	 edx, DWORD PTR _gear$[ebp]
  000d1	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 _memset
  000da	83 c4 0c	 add	 esp, 12			; 0000000cH

; 177  : 
; 178  : 				for (i = 0; i < gear->num_gear_points; i++)

  000dd	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$5[ebp], 0
  000e7	eb 0f		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  000e9	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  000ef	83 c0 01	 add	 eax, 1
  000f2	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _i$5[ebp], eax
$LN4@initialise:
  000f8	8b 45 08	 mov	 eax, DWORD PTR _gear$[ebp]
  000fb	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _i$5[ebp]
  00101	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00103	0f 83 f0 02 00
	00		 jae	 $LN3@initialise

; 179  : 				{
; 180  : 					landing_gear_point* point = &gear->gear_points[i];

  00109	69 85 f8 fe ff
	ff 94 00 00 00	 imul	 eax, DWORD PTR _i$5[ebp], 148
  00113	8b 4d 08	 mov	 ecx, DWORD PTR _gear$[ebp]
  00116	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  00119	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _point$4[ebp], eax

; 181  : 					unsigned len;
; 182  : 					unsigned nread = 0;

  0011f	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _nread$2[ebp], 0

; 183  : 
; 184  : 					if (!fgets(point->name, SUSPENSION_NAME_MAX_LENGTH, file))

  00129	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _file$6[ebp]
  0012f	50		 push	 eax
  00130	6a 20		 push	 32			; 00000020H
  00132	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _point$4[ebp]
  00138	83 c1 70	 add	 ecx, 112		; 00000070H
  0013b	51		 push	 ecx
  0013c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgets
  00142	83 c4 0c	 add	 esp, 12			; 0000000cH
  00145	85 c0		 test	 eax, eax
  00147	75 05		 jne	 SHORT $LN11@initialise

; 185  : 						break;

  00149	e9 ab 02 00 00	 jmp	 $LN3@initialise
$LN11@initialise:

; 186  : 
; 187  : 					len = strlen(point->name);

  0014e	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _point$4[ebp]
  00154	83 c0 70	 add	 eax, 112		; 00000070H
  00157	50		 push	 eax
  00158	e8 00 00 00 00	 call	 _strlen
  0015d	83 c4 04	 add	 esp, 4
  00160	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _len$3[ebp], eax

; 188  : 					ASSERT(len < SUSPENSION_NAME_MAX_LENGTH - 1);

  00166	83 bd f0 fe ff
	ff 1f		 cmp	 DWORD PTR _len$3[ebp], 31 ; 0000001fH
  0016d	72 18		 jb	 SHORT $LN12@initialise
  0016f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_landing_gear@@YGXPAUlanding_gear_system@@PBD@Z@4JA
  00174	83 c0 22	 add	 eax, 34			; 00000022H
  00177	50		 push	 eax
  00178	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@OKKAHBNG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0017d	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@JMAPAHG@len?5?$DM?5SUSPENSION_NAME_MAX_LENGT@
  00182	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN12@initialise:

; 189  : 					if (point->name[len-1] == '\n')

  00187	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _point$4[ebp]
  0018d	03 85 f0 fe ff
	ff		 add	 eax, DWORD PTR _len$3[ebp]
  00193	0f b6 48 6f	 movzx	 ecx, BYTE PTR [eax+111]
  00197	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  0019a	75 10		 jne	 SHORT $LN13@initialise

; 190  : 						point->name[len-1] = '\0';

  0019c	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _point$4[ebp]
  001a2	03 85 f0 fe ff
	ff		 add	 eax, DWORD PTR _len$3[ebp]
  001a8	c6 40 6f 00	 mov	 BYTE PTR [eax+111], 0
$LN13@initialise:

; 191  : 
; 192  : 					nread += fscanf(file, "retractable = %d\n", &point->retractable);

  001ac	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _point$4[ebp]
  001b2	83 c0 04	 add	 eax, 4
  001b5	50		 push	 eax
  001b6	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@BGIBFFH@retractable?5?$DN?5?$CFd?6@
  001bb	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _file$6[ebp]
  001c1	51		 push	 ecx
  001c2	e8 00 00 00 00	 call	 _fscanf
  001c7	83 c4 0c	 add	 esp, 12			; 0000000cH
  001ca	03 85 ec fe ff
	ff		 add	 eax, DWORD PTR _nread$2[ebp]
  001d0	89 85 ec fe ff
	ff		 mov	 DWORD PTR _nread$2[ebp], eax

; 193  : 					nread += fscanf(file, "has_brakes = %d\n", &point->has_brakes);

  001d6	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _point$4[ebp]
  001dc	83 c0 0c	 add	 eax, 12			; 0000000cH
  001df	50		 push	 eax
  001e0	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@OMJPIHHC@has_brakes?5?$DN?5?$CFd?6@
  001e5	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _file$6[ebp]
  001eb	51		 push	 ecx
  001ec	e8 00 00 00 00	 call	 _fscanf
  001f1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f4	03 85 ec fe ff
	ff		 add	 eax, DWORD PTR _nread$2[ebp]
  001fa	89 85 ec fe ff
	ff		 mov	 DWORD PTR _nread$2[ebp], eax

; 194  : 					nread += fscanf(file, "can_turn = %d\n", &point->can_turn);

  00200	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _point$4[ebp]
  00206	83 c0 08	 add	 eax, 8
  00209	50		 push	 eax
  0020a	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BKNEOKI@can_turn?5?$DN?5?$CFd?6@
  0020f	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _file$6[ebp]
  00215	51		 push	 ecx
  00216	e8 00 00 00 00	 call	 _fscanf
  0021b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0021e	03 85 ec fe ff
	ff		 add	 eax, DWORD PTR _nread$2[ebp]
  00224	89 85 ec fe ff
	ff		 mov	 DWORD PTR _nread$2[ebp], eax

; 195  : 
; 196  : 					nread += fscanf(file, "position = %f, %f, %f\n", &point->position.x, &point->position.y, &point->position.z);

  0022a	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _point$4[ebp]
  00230	83 c0 3c	 add	 eax, 60			; 0000003cH
  00233	50		 push	 eax
  00234	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _point$4[ebp]
  0023a	83 c1 38	 add	 ecx, 56			; 00000038H
  0023d	51		 push	 ecx
  0023e	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _point$4[ebp]
  00244	83 c2 34	 add	 edx, 52			; 00000034H
  00247	52		 push	 edx
  00248	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@LCBKEIBA@position?5?$DN?5?$CFf?0?5?$CFf?0?5?$CFf?6@
  0024d	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _file$6[ebp]
  00253	50		 push	 eax
  00254	e8 00 00 00 00	 call	 _fscanf
  00259	83 c4 14	 add	 esp, 20			; 00000014H
  0025c	03 85 ec fe ff
	ff		 add	 eax, DWORD PTR _nread$2[ebp]
  00262	89 85 ec fe ff
	ff		 mov	 DWORD PTR _nread$2[ebp], eax

; 197  : 
; 198  : 					nread += fscanf(file, "max_spring_compression = %f\n", &point->max_suspension_compression);

  00268	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _point$4[ebp]
  0026e	83 c0 58	 add	 eax, 88			; 00000058H
  00271	50		 push	 eax
  00272	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@OECKGOH@max_spring_compression?5?$DN?5?$CFf?6@
  00277	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _file$6[ebp]
  0027d	51		 push	 ecx
  0027e	e8 00 00 00 00	 call	 _fscanf
  00283	83 c4 0c	 add	 esp, 12			; 0000000cH
  00286	03 85 ec fe ff
	ff		 add	 eax, DWORD PTR _nread$2[ebp]
  0028c	89 85 ec fe ff
	ff		 mov	 DWORD PTR _nread$2[ebp], eax

; 199  : 					nread += fscanf(file, "spring_stiffness = %f\n", &point->suspension_stiffness);

  00292	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _point$4[ebp]
  00298	83 c0 5c	 add	 eax, 92			; 0000005cH
  0029b	50		 push	 eax
  0029c	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@NBHAAE@spring_stiffness?5?$DN?5?$CFf?6@
  002a1	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _file$6[ebp]
  002a7	51		 push	 ecx
  002a8	e8 00 00 00 00	 call	 _fscanf
  002ad	83 c4 0c	 add	 esp, 12			; 0000000cH
  002b0	03 85 ec fe ff
	ff		 add	 eax, DWORD PTR _nread$2[ebp]
  002b6	89 85 ec fe ff
	ff		 mov	 DWORD PTR _nread$2[ebp], eax

; 200  : 					nread += fscanf(file, "damper_stiffness = %f\n", &point->damper_stiffness);

  002bc	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _point$4[ebp]
  002c2	83 c0 60	 add	 eax, 96			; 00000060H
  002c5	50		 push	 eax
  002c6	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@LGOADNKH@damper_stiffness?5?$DN?5?$CFf?6@
  002cb	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _file$6[ebp]
  002d1	51		 push	 ecx
  002d2	e8 00 00 00 00	 call	 _fscanf
  002d7	83 c4 0c	 add	 esp, 12			; 0000000cH
  002da	03 85 ec fe ff
	ff		 add	 eax, DWORD PTR _nread$2[ebp]
  002e0	89 85 ec fe ff
	ff		 mov	 DWORD PTR _nread$2[ebp], eax

; 201  : 					nread += fscanf(file, "bump_stiffness = %f\n", &point->bump_stiffness);

  002e6	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _point$4[ebp]
  002ec	83 c0 68	 add	 eax, 104		; 00000068H
  002ef	50		 push	 eax
  002f0	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LMCEJEKA@bump_stiffness?5?$DN?5?$CFf?6@
  002f5	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _file$6[ebp]
  002fb	51		 push	 ecx
  002fc	e8 00 00 00 00	 call	 _fscanf
  00301	83 c4 0c	 add	 esp, 12			; 0000000cH
  00304	03 85 ec fe ff
	ff		 add	 eax, DWORD PTR _nread$2[ebp]
  0030a	89 85 ec fe ff
	ff		 mov	 DWORD PTR _nread$2[ebp], eax

; 202  : 					nread += fscanf(file, "radius = %f\n", &point->radius);

  00310	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _point$4[ebp]
  00316	83 c0 6c	 add	 eax, 108		; 0000006cH
  00319	50		 push	 eax
  0031a	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FLABIIMD@radius?5?$DN?5?$CFf?6@
  0031f	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _file$6[ebp]
  00325	51		 push	 ecx
  00326	e8 00 00 00 00	 call	 _fscanf
  0032b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0032e	03 85 ec fe ff
	ff		 add	 eax, DWORD PTR _nread$2[ebp]
  00334	89 85 ec fe ff
	ff		 mov	 DWORD PTR _nread$2[ebp], eax

; 203  : 
; 204  : 					if (nread != 11)

  0033a	83 bd ec fe ff
	ff 0b		 cmp	 DWORD PTR _nread$2[ebp], 11 ; 0000000bH
  00341	74 22		 je	 SHORT $LN14@initialise

; 205  : 						debug_fatal("error in file %s suspension point %d, values read only %d", filepath, i, nread);

  00343	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _nread$2[ebp]
  00349	50		 push	 eax
  0034a	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _i$5[ebp]
  00350	51		 push	 ecx
  00351	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR _filepath$7[ebp]
  00357	52		 push	 edx
  00358	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@MMADIJBO@error?5in?5file?5?$CFs?5suspension?5poi@
  0035d	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00362	83 c4 10	 add	 esp, 16			; 00000010H
$LN14@initialise:

; 206  : 
; 207  : 					{
; 208  : 						unsigned
; 209  : 							i;
; 210  : 
; 211  : 						point->sub_index = OBJECT_3D_INVALID_SUB_OBJECT_INDEX;

  00365	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _point$4[ebp]
  0036b	c7 80 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+144], 0

; 212  : 						for ( i = 0; i < ARRAY_LENGTH ( landing_gear_info ); i++ )

  00375	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$1[ebp], 0
  0037f	eb 0f		 jmp	 SHORT $LN7@initialise
$LN5@initialise:
  00381	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _i$1[ebp]
  00387	83 c0 01	 add	 eax, 1
  0038a	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _i$1[ebp], eax
$LN7@initialise:
  00390	83 bd e8 fe ff
	ff 04		 cmp	 DWORD PTR _i$1[ebp], 4
  00397	73 5b		 jae	 SHORT $LN6@initialise

; 213  : 						{
; 214  : 							if ( !strcmp ( point->name, landing_gear_info[i].name ) )

  00399	6b 85 e8 fe ff
	ff 0c		 imul	 eax, DWORD PTR _i$1[ebp], 12
  003a0	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?landing_gear_info@@3QBULANDING_GEAR_INFO@@B[eax]
  003a6	51		 push	 ecx
  003a7	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _point$4[ebp]
  003ad	83 c2 70	 add	 edx, 112		; 00000070H
  003b0	52		 push	 edx
  003b1	e8 00 00 00 00	 call	 _strcmp
  003b6	83 c4 08	 add	 esp, 8
  003b9	85 c0		 test	 eax, eax
  003bb	75 35		 jne	 SHORT $LN15@initialise

; 215  : 							{
; 216  : 								point->sub_index = landing_gear_info[i].sub_index;

  003bd	6b 85 e8 fe ff
	ff 0c		 imul	 eax, DWORD PTR _i$1[ebp], 12
  003c4	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _point$4[ebp]
  003ca	8b 90 08 00 00
	00		 mov	 edx, DWORD PTR ?landing_gear_info@@3QBULANDING_GEAR_INFO@@B[eax+8]
  003d0	89 91 90 00 00
	00		 mov	 DWORD PTR [ecx+144], edx

; 217  : 								gear->gear_points_types[landing_gear_info[i].type] = point;

  003d6	6b 85 e8 fe ff
	ff 0c		 imul	 eax, DWORD PTR _i$1[ebp], 12
  003dd	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR ?landing_gear_info@@3QBULANDING_GEAR_INFO@@B[eax+4]
  003e3	8b 55 08	 mov	 edx, DWORD PTR _gear$[ebp]
  003e6	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _point$4[ebp]
  003ec	89 44 8a 08	 mov	 DWORD PTR [edx+ecx*4+8], eax

; 218  : 								break;

  003f0	eb 02		 jmp	 SHORT $LN6@initialise
$LN15@initialise:

; 219  : 							}
; 220  : 						}

  003f2	eb 8d		 jmp	 SHORT $LN5@initialise
$LN6@initialise:

; 221  : 					}
; 222  : 				}

  003f4	e9 f0 fc ff ff	 jmp	 $LN2@initialise
$LN3@initialise:

; 223  : 
; 224  : 				if (i != gear->num_gear_points)

  003f9	8b 45 08	 mov	 eax, DWORD PTR _gear$[ebp]
  003fc	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _i$5[ebp]
  00402	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00404	74 24		 je	 SHORT $LN10@initialise

; 225  : 					debug_fatal("suspension file %s claims there should be %d points, but only %d found", filepath, gear->num_gear_points, i - 1);

  00406	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  0040c	83 e8 01	 sub	 eax, 1
  0040f	50		 push	 eax
  00410	8b 4d 08	 mov	 ecx, DWORD PTR _gear$[ebp]
  00413	8b 11		 mov	 edx, DWORD PTR [ecx]
  00415	52		 push	 edx
  00416	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _filepath$7[ebp]
  0041c	50		 push	 eax
  0041d	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@JKNKOAGF@suspension?5file?5?$CFs?5claims?5there@
  00422	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00427	83 c4 10	 add	 esp, 16			; 00000010H
$LN10@initialise:

; 226  : 			}
; 227  : 
; 228  : 			safe_fclose(file);

  0042a	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _file$6[ebp]
  00430	50		 push	 eax
  00431	e8 00 00 00 00	 call	 ?safe_fclose@@YGHPAU_iobuf@@@Z ; safe_fclose
$LN1@initialise:

; 229  : 		}
; 230  : 	}
; 231  : }

  00436	5f		 pop	 edi
  00437	5e		 pop	 esi
  00438	5b		 pop	 ebx
  00439	8b e5		 mov	 esp, ebp
  0043b	5d		 pop	 ebp
  0043c	c2 08 00	 ret	 8
?initialise_landing_gear@@YGXPAUlanding_gear_system@@PBD@Z ENDP ; initialise_landing_gear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\co_undercarriage.c
;	COMDAT ?get_undercarriage_state@@YGMXZ
_TEXT	SEGMENT
tv78 = -76						; size = 4
tv70 = -72						; size = 4
_uc_state$ = -4						; size = 4
?get_undercarriage_state@@YGMXZ PROC			; get_undercarriage_state, COMDAT

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 144  : 	float uc_state = get_local_entity_float_value (get_gunship_entity(), FLOAT_TYPE_UNDERCARRIAGE_STATE);

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00010	74 0c		 je	 SHORT $LN6@get_underc
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d b8	 mov	 DWORD PTR tv70[ebp], ecx
  0001c	eb 21		 jmp	 SHORT $LN7@get_underc
$LN6@get_underc:
  0001e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_undercarriage_state@@YGMXZ@4JA
  00024	83 c2 01	 add	 edx, 1
  00027	52		 push	 edx
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@OKKAHBNG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00038	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN7@get_underc:
  0003f	b9 01 00 00 00	 mov	 ecx, 1
  00044	85 c9		 test	 ecx, ecx
  00046	74 09		 je	 SHORT $LN8@get_underc
  00048	c7 45 b4 90 00
	00 00		 mov	 DWORD PTR tv78[ebp], 144 ; 00000090H
  0004f	eb 21		 jmp	 SHORT $LN9@get_underc
$LN8@get_underc:
  00051	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_undercarriage_state@@YGMXZ@4JA
  00057	83 c2 01	 add	 edx, 1
  0005a	52		 push	 edx
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@OKKAHBNG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006b	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN9@get_underc:
  00072	68 90 00 00 00	 push	 144			; 00000090H
  00077	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0007d	51		 push	 ecx
  0007e	69 55 b8 bc 02
	00 00		 imul	 edx, DWORD PTR tv70[ebp], 700
  00085	8b 45 b4	 mov	 eax, DWORD PTR tv78[ebp]
  00088	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0008f	ff d1		 call	 ecx
  00091	d9 5d fc	 fstp	 DWORD PTR _uc_state$[ebp]

; 145  : 	if (uc_state >= 3.0)  // 3.0 -> 4.0 = retracting

  00094	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _uc_state$[ebp]
  00099	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4008000000000000
  000a1	72 1c		 jb	 SHORT $LN2@get_underc

; 146  : 		uc_state = 4.0 - uc_state;

  000a3	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _uc_state$[ebp]
  000a8	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4010000000000000
  000b0	f2 0f 5c c8	 subsd	 xmm1, xmm0
  000b4	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  000b8	f3 0f 11 45 fc	 movss	 DWORD PTR _uc_state$[ebp], xmm0
  000bd	eb 25		 jmp	 SHORT $LN4@get_underc
$LN2@get_underc:

; 147  : 	else if (uc_state > 1.0)  // extending

  000bf	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _uc_state$[ebp]
  000c4	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  000cc	76 16		 jbe	 SHORT $LN4@get_underc

; 148  : 		uc_state -= 1.0;

  000ce	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _uc_state$[ebp]
  000d3	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  000db	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000df	f3 0f 11 45 fc	 movss	 DWORD PTR _uc_state$[ebp], xmm0
$LN4@get_underc:

; 149  : 
; 150  : 	return uc_state;

  000e4	d9 45 fc	 fld	 DWORD PTR _uc_state$[ebp]

; 151  : }

  000e7	5f		 pop	 edi
  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx
  000ea	8b e5		 mov	 esp, ebp
  000ec	5d		 pop	 ebp
  000ed	c3		 ret	 0
?get_undercarriage_state@@YGMXZ ENDP			; get_undercarriage_state
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\co_undercarriage.c
;	COMDAT ?rotate_helicopter_wheels@@YGXPAUOBJECT_3D_INSTANCE@@@Z
_TEXT	SEGMENT
tv133 = -172						; size = 8
tv153 = -168						; size = 4
$T1 = -164						; size = 8
$T2 = -156						; size = 8
$T3 = -148						; size = 8
$T4 = -140						; size = 8
_gear_point$5 = -68					; size = 4
_search$ = -64						; size = 56
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_inst3d$ = 8						; size = 4
?rotate_helicopter_wheels@@YGXPAUOBJECT_3D_INSTANCE@@@Z PROC ; rotate_helicopter_wheels, COMDAT

; 824  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 825  : 	unsigned
; 826  : 		i,
; 827  : 		j;
; 828  : 	object_3d_sub_object_search_data
; 829  : 		search;
; 830  : 
; 831  : 	ASSERT ( current_landing_gear );

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A, 0
  00013	75 18		 jne	 SHORT $LN13@rotate_hel
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??rotate_helicopter_wheels@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4JA
  0001a	83 c0 07	 add	 eax, 7
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@OKKAHBNG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OJPLACFJ@current_landing_gear@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN13@rotate_hel:

; 832  : 
; 833  : 	for ( i = 0; i < current_landing_gear->num_gear_points; i++ )

  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00034	eb 09		 jmp	 SHORT $LN4@rotate_hel
$LN2@rotate_hel:
  00036	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00039	83 c0 01	 add	 eax, 1
  0003c	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@rotate_hel:
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  00044	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00047	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00049	0f 83 46 02 00
	00		 jae	 $LN3@rotate_hel

; 834  : 	{
; 835  : 		landing_gear_point
; 836  : 			*gear_point = current_landing_gear->gear_points + i;

  0004f	69 45 fc 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  00056	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  0005c	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  0005f	89 45 bc	 mov	 DWORD PTR _gear_point$5[ebp], eax

; 837  : 
; 838  : 		if ( gear_point->damaged || gear_point->sub_index == OBJECT_3D_INVALID_SUB_OBJECT_INDEX )

  00062	8b 45 bc	 mov	 eax, DWORD PTR _gear_point$5[ebp]
  00065	83 38 00	 cmp	 DWORD PTR [eax], 0
  00068	75 0c		 jne	 SHORT $LN15@rotate_hel
  0006a	8b 45 bc	 mov	 eax, DWORD PTR _gear_point$5[ebp]
  0006d	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  00074	75 02		 jne	 SHORT $LN14@rotate_hel
$LN15@rotate_hel:

; 839  : 		{
; 840  : 			continue;

  00076	eb be		 jmp	 SHORT $LN2@rotate_hel
$LN14@rotate_hel:

; 841  : 		}
; 842  : 
; 843  : 		if ( gear_point->suspension_compression == 0.0 )

  00078	8b 45 bc	 mov	 eax, DWORD PTR _gear_point$5[ebp]
  0007b	f3 0f 5a 40 4c	 cvtss2sd xmm0, DWORD PTR [eax+76]
  00080	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00088	9f		 lahf
  00089	f6 c4 44	 test	 ah, 68			; 00000044H
  0008c	0f 8a c1 00 00
	00		 jp	 $LN16@rotate_hel

; 844  : 		{
; 845  : 			if ( gear_point->rotation_speed == 0.0 )

  00092	8b 45 bc	 mov	 eax, DWORD PTR _gear_point$5[ebp]
  00095	f3 0f 5a 40 44	 cvtss2sd xmm0, DWORD PTR [eax+68]
  0009a	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  000a2	9f		 lahf
  000a3	f6 c4 44	 test	 ah, 68			; 00000044H
  000a6	7a 02		 jp	 SHORT $LN18@rotate_hel

; 846  : 			{
; 847  : 				continue;

  000a8	eb 8c		 jmp	 SHORT $LN2@rotate_hel
$LN18@rotate_hel:

; 848  : 			}
; 849  : 			gear_point->rotation_speed = gear_point->rotation_speed < 0.0 ? min(gear_point->rotation_speed + 0.1, 0.0) : max(gear_point->rotation_speed - 0.1, 0.0);

  000aa	8b 45 bc	 mov	 eax, DWORD PTR _gear_point$5[ebp]
  000ad	f3 0f 5a 40 44	 cvtss2sd xmm0, DWORD PTR [eax+68]
  000b2	0f 57 c9	 xorps	 xmm1, xmm1
  000b5	66 0f 2f c8	 comisd	 xmm1, xmm0
  000b9	76 44		 jbe	 SHORT $LN23@rotate_hel
  000bb	0f 57 c0	 xorps	 xmm0, xmm0
  000be	f2 0f 11 85 74
	ff ff ff	 movsd	 QWORD PTR $T4[ebp], xmm0
  000c6	8b 4d bc	 mov	 ecx, DWORD PTR _gear_point$5[ebp]
  000c9	f3 0f 5a 41 44	 cvtss2sd xmm0, DWORD PTR [ecx+68]
  000ce	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  000d6	f2 0f 11 85 6c
	ff ff ff	 movsd	 QWORD PTR $T3[ebp], xmm0
  000de	8d 95 74 ff ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  000e4	52		 push	 edx
  000e5	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  000eb	50		 push	 eax
  000ec	e8 00 00 00 00	 call	 ??$min@N@std@@YGABNABN0@Z ; std::min<double>
  000f1	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  000f5	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv133[ebp], xmm0
  000fd	eb 42		 jmp	 SHORT $LN24@rotate_hel
$LN23@rotate_hel:
  000ff	0f 57 c0	 xorps	 xmm0, xmm0
  00102	f2 0f 11 85 64
	ff ff ff	 movsd	 QWORD PTR $T2[ebp], xmm0
  0010a	8b 4d bc	 mov	 ecx, DWORD PTR _gear_point$5[ebp]
  0010d	f3 0f 5a 41 44	 cvtss2sd xmm0, DWORD PTR [ecx+68]
  00112	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb999999999999a
  0011a	f2 0f 11 85 5c
	ff ff ff	 movsd	 QWORD PTR $T1[ebp], xmm0
  00122	8d 95 64 ff ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  00128	52		 push	 edx
  00129	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0012f	50		 push	 eax
  00130	e8 00 00 00 00	 call	 ??$max@N@std@@YGABNABN0@Z ; std::max<double>
  00135	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00139	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv133[ebp], xmm0
$LN24@rotate_hel:
  00141	f2 0f 5a 85 54
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv133[ebp]
  00149	8b 4d bc	 mov	 ecx, DWORD PTR _gear_point$5[ebp]
  0014c	f3 0f 11 41 44	 movss	 DWORD PTR [ecx+68], xmm0

; 850  : 		}
; 851  : 		else

  00151	eb 68		 jmp	 SHORT $LN17@rotate_hel
$LN16@rotate_hel:

; 852  : 		{
; 853  : 			gear_point->rotation_speed = (gear_point->can_turn ? sqrt(gear_point->velocity.x * gear_point->velocity.x + gear_point->velocity.z * gear_point->velocity.z) : gear_point->velocity.z) / gear_point->radius;

  00153	8b 45 bc	 mov	 eax, DWORD PTR _gear_point$5[ebp]
  00156	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0015a	74 37		 je	 SHORT $LN25@rotate_hel
  0015c	8b 4d bc	 mov	 ecx, DWORD PTR _gear_point$5[ebp]
  0015f	8b 55 bc	 mov	 edx, DWORD PTR _gear_point$5[ebp]
  00162	f3 0f 10 41 28	 movss	 xmm0, DWORD PTR [ecx+40]
  00167	f3 0f 59 42 28	 mulss	 xmm0, DWORD PTR [edx+40]
  0016c	8b 45 bc	 mov	 eax, DWORD PTR _gear_point$5[ebp]
  0016f	8b 4d bc	 mov	 ecx, DWORD PTR _gear_point$5[ebp]
  00172	f3 0f 10 48 30	 movss	 xmm1, DWORD PTR [eax+48]
  00177	f3 0f 59 49 30	 mulss	 xmm1, DWORD PTR [ecx+48]
  0017c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00180	51		 push	 ecx
  00181	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00186	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  0018b	d9 9d 58 ff ff
	ff		 fstp	 DWORD PTR tv153[ebp]
  00191	eb 10		 jmp	 SHORT $LN26@rotate_hel
$LN25@rotate_hel:
  00193	8b 55 bc	 mov	 edx, DWORD PTR _gear_point$5[ebp]
  00196	f3 0f 10 42 30	 movss	 xmm0, DWORD PTR [edx+48]
  0019b	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR tv153[ebp], xmm0
$LN26@rotate_hel:
  001a3	8b 45 bc	 mov	 eax, DWORD PTR _gear_point$5[ebp]
  001a6	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR tv153[ebp]
  001ae	f3 0f 5e 40 6c	 divss	 xmm0, DWORD PTR [eax+108]
  001b3	8b 4d bc	 mov	 ecx, DWORD PTR _gear_point$5[ebp]
  001b6	f3 0f 11 41 44	 movss	 DWORD PTR [ecx+68], xmm0
$LN17@rotate_hel:

; 854  : 		}
; 855  : 
; 856  : 		gear_point->rotation_angle += gear_point->rotation_speed * get_model_delta_time();

  001bb	8b 45 bc	 mov	 eax, DWORD PTR _gear_point$5[ebp]
  001be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  001c4	f3 0f 10 40 44	 movss	 xmm0, DWORD PTR [eax+68]
  001c9	f3 0f 59 81 90
	00 00 00	 mulss	 xmm0, DWORD PTR [ecx+144]
  001d1	8b 55 bc	 mov	 edx, DWORD PTR _gear_point$5[ebp]
  001d4	f3 0f 58 42 48	 addss	 xmm0, DWORD PTR [edx+72]
  001d9	8b 45 bc	 mov	 eax, DWORD PTR _gear_point$5[ebp]
  001dc	f3 0f 11 40 48	 movss	 DWORD PTR [eax+72], xmm0

; 857  : 		if ( gear_point->rotation_angle < 0.0 )

  001e1	8b 45 bc	 mov	 eax, DWORD PTR _gear_point$5[ebp]
  001e4	f3 0f 5a 40 48	 cvtss2sd xmm0, DWORD PTR [eax+72]
  001e9	0f 57 c9	 xorps	 xmm1, xmm1
  001ec	66 0f 2f c8	 comisd	 xmm1, xmm0
  001f0	76 2b		 jbe	 SHORT $LN19@rotate_hel
$LN7@rotate_hel:

; 858  : 		{
; 859  : 			do
; 860  : 			{
; 861  : 				gear_point->rotation_angle += PI2;

  001f2	8b 45 bc	 mov	 eax, DWORD PTR _gear_point$5[ebp]
  001f5	f3 0f 10 40 48	 movss	 xmm0, DWORD PTR [eax+72]
  001fa	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40c90fdb
  00202	8b 4d bc	 mov	 ecx, DWORD PTR _gear_point$5[ebp]
  00205	f3 0f 11 41 48	 movss	 DWORD PTR [ecx+72], xmm0

; 862  : 			}
; 863  : 			while ( gear_point->rotation_angle < 0.0 );

  0020a	8b 45 bc	 mov	 eax, DWORD PTR _gear_point$5[ebp]
  0020d	f3 0f 5a 40 48	 cvtss2sd xmm0, DWORD PTR [eax+72]
  00212	0f 57 c9	 xorps	 xmm1, xmm1
  00215	66 0f 2f c8	 comisd	 xmm1, xmm0
  00219	77 d7		 ja	 SHORT $LN7@rotate_hel

; 864  : 		}
; 865  : 		else

  0021b	eb 2b		 jmp	 SHORT $LN9@rotate_hel
$LN19@rotate_hel:

; 866  : 		{
; 867  : 			while ( gear_point->rotation_angle >= PI2 )

  0021d	8b 45 bc	 mov	 eax, DWORD PTR _gear_point$5[ebp]
  00220	f3 0f 10 40 48	 movss	 xmm0, DWORD PTR [eax+72]
  00225	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@40c90fdb
  0022c	72 1a		 jb	 SHORT $LN9@rotate_hel

; 868  : 			{
; 869  : 				gear_point->rotation_angle -= PI2;

  0022e	8b 45 bc	 mov	 eax, DWORD PTR _gear_point$5[ebp]
  00231	f3 0f 10 40 48	 movss	 xmm0, DWORD PTR [eax+72]
  00236	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40c90fdb
  0023e	8b 4d bc	 mov	 ecx, DWORD PTR _gear_point$5[ebp]
  00241	f3 0f 11 41 48	 movss	 DWORD PTR [ecx+72], xmm0

; 870  : 			}

  00246	eb d5		 jmp	 SHORT $LN19@rotate_hel
$LN9@rotate_hel:

; 871  : 		}
; 872  : 
; 873  : 		search.search_object = inst3d;

  00248	8b 45 08	 mov	 eax, DWORD PTR _inst3d$[ebp]
  0024b	89 45 c0	 mov	 DWORD PTR _search$[ebp], eax

; 874  : 		search.sub_object_index = gear_point->sub_index;

  0024e	8b 45 bc	 mov	 eax, DWORD PTR _gear_point$5[ebp]
  00251	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00257	89 4d cc	 mov	 DWORD PTR _search$[ebp+12], ecx

; 875  : 		for ( j = 0; ; j++ )

  0025a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00261	eb 09		 jmp	 SHORT $LN12@rotate_hel
$LN10@rotate_hel:
  00263	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  00266	83 c0 01	 add	 eax, 1
  00269	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax
$LN12@rotate_hel:

; 876  : 		{
; 877  : 			search.search_depth = j;

  0026c	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  0026f	89 45 c8	 mov	 DWORD PTR _search$[ebp+8], eax

; 878  : 			if ( find_object_3d_sub_object ( &search ) != SUB_OBJECT_SEARCH_RESULT_OBJECT_FOUND )

  00272	8d 45 c0	 lea	 eax, DWORD PTR _search$[ebp]
  00275	50		 push	 eax
  00276	e8 00 00 00 00	 call	 ?find_object_3d_sub_object@@YG?AW4SUB_OBJECT_SEARCH_RESULT_TYPES@@PAUOBJECT_3D_SUB_OBJECT_SEARCH_DATA@@@Z ; find_object_3d_sub_object
  0027b	83 f8 01	 cmp	 eax, 1
  0027e	74 02		 je	 SHORT $LN21@rotate_hel

; 879  : 			{
; 880  : 				break;

  00280	eb 0e		 jmp	 SHORT $LN11@rotate_hel
$LN21@rotate_hel:

; 881  : 			}
; 882  : 
; 883  : 			search.result_sub_object->relative_pitch = gear_point->rotation_angle;

  00282	8b 45 c4	 mov	 eax, DWORD PTR _search$[ebp+4]
  00285	8b 4d bc	 mov	 ecx, DWORD PTR _gear_point$5[ebp]
  00288	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  0028b	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 884  : 		}

  0028e	eb d3		 jmp	 SHORT $LN10@rotate_hel
$LN11@rotate_hel:

; 885  : 	}

  00290	e9 a1 fd ff ff	 jmp	 $LN2@rotate_hel
$LN3@rotate_hel:

; 886  : }

  00295	5f		 pop	 edi
  00296	5e		 pop	 esi
  00297	5b		 pop	 ebx
  00298	8b e5		 mov	 esp, ebp
  0029a	5d		 pop	 ebp
  0029b	c2 04 00	 ret	 4
?rotate_helicopter_wheels@@YGXPAUOBJECT_3D_INSTANCE@@@Z ENDP ; rotate_helicopter_wheels
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\co_undercarriage.c
;	COMDAT ?animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z
_TEXT	SEGMENT
$T1 = -88						; size = 4
$T2 = -84						; size = 4
$T3 = -80						; size = 4
_right$ = -12						; size = 4
_left$ = -8						; size = 4
_tail$ = -4						; size = 4
_inst3d$ = 8						; size = 4
?animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z PROC ; animate_apache_suspension, COMDAT

; 747  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 748  : 	landing_gear_point
; 749  : 		*tail,
; 750  : 		*left,
; 751  : 		*right;
; 752  : 
; 753  : 	static object_3d_sub_instance
; 754  : 		*right_cylinder,
; 755  : 		*right_arm,
; 756  : 		*right_piston,
; 757  : 		*left_cylinder,
; 758  : 		*left_arm,
; 759  : 		*left_piston,
; 760  : 		*tail_cylinder,
; 761  : 		*tail_arm,
; 762  : 		*tail_piston,
; 763  : 		*tail_fork;
; 764  : 
; 765  : 	static const object_3d_sub_object_search_batch
; 766  : 		search[] =
; 767  : 			{
; 768  : 				{ OBJECT_3D_SUB_OBJECT_SUSPENSION_RIGHT_WHEEL, &right_arm },
; 769  : 				{ OBJECT_3D_SUB_OBJECT_SUSPENSION_RIGHT_PISTON, &right_piston },
; 770  : 				{ OBJECT_3D_SUB_OBJECT_SUSPENSION_RIGHT_CYLINDER, &right_cylinder },
; 771  : 				{ OBJECT_3D_SUB_OBJECT_SUSPENSION_LEFT_WHEEL, &left_arm },
; 772  : 				{ OBJECT_3D_SUB_OBJECT_SUSPENSION_LEFT_PISTON, &left_piston },
; 773  : 				{ OBJECT_3D_SUB_OBJECT_SUSPENSION_LEFT_CYLINDER, &left_cylinder },
; 774  : 				{ OBJECT_3D_SUB_OBJECT_SUSPENSION_TAIL_WHEEL, &tail_arm },
; 775  : 				{ OBJECT_3D_SUB_OBJECT_SUSPENSION_TAIL_PISTON, &tail_piston },
; 776  : 				{ OBJECT_3D_SUB_OBJECT_SUSPENSION_TAIL_CYLINDER, &tail_cylinder },
; 777  : 				{ OBJECT_3D_SUB_OBJECT_SUSPENSION_TAIL_STRUT, &tail_fork },
; 778  : 			};
; 779  : 
; 780  : 	left = landing_gears[GUNSHIP_TYPE_APACHE].gear_points_types[LGPT_LEFT_MAIN_WHEEL];

  00009	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	ba 04 00 00 00	 mov	 edx, 4
  00016	c1 e2 00	 shl	 edx, 0
  00019	8b 84 11 08 00
	00 00		 mov	 eax, DWORD PTR ?landing_gears@@3PAUlanding_gear_system@@A[ecx+edx+8]
  00020	89 45 f8	 mov	 DWORD PTR _left$[ebp], eax

; 781  : 	right = landing_gears[GUNSHIP_TYPE_APACHE].gear_points_types[LGPT_RIGHT_MAIN_WHEEL];

  00023	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00028	6b c8 00	 imul	 ecx, eax, 0
  0002b	ba 04 00 00 00	 mov	 edx, 4
  00030	6b c2 00	 imul	 eax, edx, 0
  00033	8b 8c 01 08 00
	00 00		 mov	 ecx, DWORD PTR ?landing_gears@@3PAUlanding_gear_system@@A[ecx+eax+8]
  0003a	89 4d f4	 mov	 DWORD PTR _right$[ebp], ecx

; 782  : 	tail = landing_gears[GUNSHIP_TYPE_APACHE].gear_points_types[LGPT_TAIL_WHEEL];

  0003d	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00042	6b c8 00	 imul	 ecx, eax, 0
  00045	ba 04 00 00 00	 mov	 edx, 4
  0004a	6b c2 03	 imul	 eax, edx, 3
  0004d	8b 8c 01 08 00
	00 00		 mov	 ecx, DWORD PTR ?landing_gears@@3PAUlanding_gear_system@@A[ecx+eax+8]
  00054	89 4d fc	 mov	 DWORD PTR _tail$[ebp], ecx

; 783  : 
; 784  : 	if (!tail || !left || !right)

  00057	83 7d fc 00	 cmp	 DWORD PTR _tail$[ebp], 0
  0005b	74 0c		 je	 SHORT $LN3@animate_ap
  0005d	83 7d f8 00	 cmp	 DWORD PTR _left$[ebp], 0
  00061	74 06		 je	 SHORT $LN3@animate_ap
  00063	83 7d f4 00	 cmp	 DWORD PTR _right$[ebp], 0
  00067	75 05		 jne	 SHORT $LN2@animate_ap
$LN3@animate_ap:

; 785  : 		return;

  00069	e9 0e 01 00 00	 jmp	 $LN1@animate_ap
$LN2@animate_ap:

; 786  : 
; 787  : 	if (!find_object_3d_sub_objects(inst3d, search, ARRAY_LENGTH(search)))

  0006e	6a 0a		 push	 10			; 0000000aH
  00070	68 00 00 00 00	 push	 OFFSET ?search@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4QBUOBJECT_3D_SUB_OBJECT_SEARCH_BATCH@@B
  00075	8b 45 08	 mov	 eax, DWORD PTR _inst3d$[ebp]
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ?find_object_3d_sub_objects@@YGHPAUOBJECT_3D_INSTANCE@@PBUOBJECT_3D_SUB_OBJECT_SEARCH_BATCH@@H@Z ; find_object_3d_sub_objects
  0007e	85 c0		 test	 eax, eax
  00080	75 05		 jne	 SHORT $LN4@animate_ap

; 788  : 		return;

  00082	e9 f5 00 00 00	 jmp	 $LN1@animate_ap
$LN4@animate_ap:

; 789  : 
; 790  : 	apache_set(&apache_main_gear, min(right->suspension_compression - 0.25f, right->max_suspension_compression), right_arm, right_cylinder, right_piston);

  00087	8b 45 f4	 mov	 eax, DWORD PTR _right$[ebp]
  0008a	f3 0f 10 40 4c	 movss	 xmm0, DWORD PTR [eax+76]
  0008f	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3e800000
  00097	f3 0f 11 45 b0	 movss	 DWORD PTR $T3[ebp], xmm0
  0009c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?right_piston@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
  000a2	51		 push	 ecx
  000a3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?right_cylinder@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
  000a9	52		 push	 edx
  000aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?right_arm@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
  000af	50		 push	 eax
  000b0	8b 4d f4	 mov	 ecx, DWORD PTR _right$[ebp]
  000b3	83 c1 58	 add	 ecx, 88			; 00000058H
  000b6	51		 push	 ecx
  000b7	8d 55 b0	 lea	 edx, DWORD PTR $T3[ebp]
  000ba	52		 push	 edx
  000bb	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  000c0	51		 push	 ecx
  000c1	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ca	68 00 00 00 00	 push	 OFFSET ?apache_main_gear@@3Uapache_landing_gear@@A
  000cf	e8 00 00 00 00	 call	 ?apache_set@@YGXPBUapache_landing_gear@@MPAUOBJECT_3D_SUB_INSTANCE@@11@Z ; apache_set

; 791  : 	apache_set(&apache_main_gear, min(left->suspension_compression - 0.25f, left->max_suspension_compression), left_arm, left_cylinder, left_piston);

  000d4	8b 45 f8	 mov	 eax, DWORD PTR _left$[ebp]
  000d7	f3 0f 10 40 4c	 movss	 xmm0, DWORD PTR [eax+76]
  000dc	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3e800000
  000e4	f3 0f 11 45 ac	 movss	 DWORD PTR $T2[ebp], xmm0
  000e9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?left_piston@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
  000ef	51		 push	 ecx
  000f0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?left_cylinder@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
  000f6	52		 push	 edx
  000f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?left_arm@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
  000fc	50		 push	 eax
  000fd	8b 4d f8	 mov	 ecx, DWORD PTR _left$[ebp]
  00100	83 c1 58	 add	 ecx, 88			; 00000058H
  00103	51		 push	 ecx
  00104	8d 55 ac	 lea	 edx, DWORD PTR $T2[ebp]
  00107	52		 push	 edx
  00108	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  0010d	51		 push	 ecx
  0010e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00112	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00117	68 00 00 00 00	 push	 OFFSET ?apache_main_gear@@3Uapache_landing_gear@@A
  0011c	e8 00 00 00 00	 call	 ?apache_set@@YGXPBUapache_landing_gear@@MPAUOBJECT_3D_SUB_INSTANCE@@11@Z ; apache_set

; 792  : 	apache_set(&apache_tail_gear, min(tail->suspension_compression - 0.3f, tail->max_suspension_compression), tail_arm, tail_cylinder, tail_piston);

  00121	8b 45 fc	 mov	 eax, DWORD PTR _tail$[ebp]
  00124	f3 0f 10 40 4c	 movss	 xmm0, DWORD PTR [eax+76]
  00129	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3e99999a
  00131	f3 0f 11 45 a8	 movss	 DWORD PTR $T1[ebp], xmm0
  00136	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?tail_piston@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
  0013c	51		 push	 ecx
  0013d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?tail_cylinder@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
  00143	52		 push	 edx
  00144	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tail_arm@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
  00149	50		 push	 eax
  0014a	8b 4d fc	 mov	 ecx, DWORD PTR _tail$[ebp]
  0014d	83 c1 58	 add	 ecx, 88			; 00000058H
  00150	51		 push	 ecx
  00151	8d 55 a8	 lea	 edx, DWORD PTR $T1[ebp]
  00154	52		 push	 edx
  00155	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  0015a	51		 push	 ecx
  0015b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0015f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00164	68 00 00 00 00	 push	 OFFSET ?apache_tail_gear@@3Uapache_landing_gear@@A
  00169	e8 00 00 00 00	 call	 ?apache_set@@YGXPBUapache_landing_gear@@MPAUOBJECT_3D_SUB_INSTANCE@@11@Z ; apache_set

; 793  : 	tail_fork->relative_heading = tail->turn_angle;

  0016e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tail_fork@?1??animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
  00173	8b 4d fc	 mov	 ecx, DWORD PTR _tail$[ebp]
  00176	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00179	89 50 18	 mov	 DWORD PTR [eax+24], edx
$LN1@animate_ap:

; 794  : }

  0017c	5f		 pop	 edi
  0017d	5e		 pop	 esi
  0017e	5b		 pop	 ebx
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c2 04 00	 ret	 4
?animate_apache_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z ENDP ; animate_apache_suspension
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\co_undercarriage.c
;	COMDAT ?animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z
_TEXT	SEGMENT
tv299 = -96						; size = 8
tv265 = -96						; size = 8
tv256 = -96						; size = 8
tv287 = -92						; size = 4
tv279 = -92						; size = 4
_front_compression$1 = -24				; size = 4
_turn_angle$2 = -20					; size = 4
_uc_state$3 = -16					; size = 4
_right$ = -12						; size = 4
_left$ = -8						; size = 4
_nose$ = -4						; size = 4
_inst3d$ = 8						; size = 4
?animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z PROC ; animate_hind_suspension, COMDAT

; 667  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 668  : 	landing_gear_point
; 669  : 		*nose,
; 670  : 		*left,
; 671  : 		*right;
; 672  : 
; 673  : 	static object_3d_sub_instance
; 674  : 		*left_wheel,
; 675  : 		*right_wheel,
; 676  : 		*nose_wheel,
; 677  : 		*nose_strut;
; 678  : 
; 679  : 	static const object_3d_sub_object_search_batch
; 680  : 		search[] =
; 681  : 			{
; 682  : 				{ OBJECT_3D_SUB_OBJECT_SUSPENSION_LEFT_WHEEL, &left_wheel },
; 683  : 				{ OBJECT_3D_SUB_OBJECT_SUSPENSION_RIGHT_WHEEL, &right_wheel },
; 684  : 				{ OBJECT_3D_SUB_OBJECT_SUSPENSION_NOSE_WHEEL, &nose_wheel },
; 685  : 				{ OBJECT_3D_SUB_OBJECT_SUSPENSION_NOSE_STRUT, &nose_strut },
; 686  : 			};
; 687  : 
; 688  : 	nose = landing_gears[GUNSHIP_TYPE_HIND].gear_points_types[LGPT_NOSE_WHEEL];

  00009	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0000e	6b c8 05	 imul	 ecx, eax, 5
  00011	ba 04 00 00 00	 mov	 edx, 4
  00016	d1 e2		 shl	 edx, 1
  00018	8b 84 11 08 00
	00 00		 mov	 eax, DWORD PTR ?landing_gears@@3PAUlanding_gear_system@@A[ecx+edx+8]
  0001f	89 45 fc	 mov	 DWORD PTR _nose$[ebp], eax

; 689  : 	left = landing_gears[GUNSHIP_TYPE_HIND].gear_points_types[LGPT_LEFT_MAIN_WHEEL];

  00022	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00027	6b c8 05	 imul	 ecx, eax, 5
  0002a	ba 04 00 00 00	 mov	 edx, 4
  0002f	c1 e2 00	 shl	 edx, 0
  00032	8b 84 11 08 00
	00 00		 mov	 eax, DWORD PTR ?landing_gears@@3PAUlanding_gear_system@@A[ecx+edx+8]
  00039	89 45 f8	 mov	 DWORD PTR _left$[ebp], eax

; 690  : 	right = landing_gears[GUNSHIP_TYPE_HIND].gear_points_types[LGPT_RIGHT_MAIN_WHEEL];

  0003c	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00041	6b c8 05	 imul	 ecx, eax, 5
  00044	ba 04 00 00 00	 mov	 edx, 4
  00049	6b c2 00	 imul	 eax, edx, 0
  0004c	8b 8c 01 08 00
	00 00		 mov	 ecx, DWORD PTR ?landing_gears@@3PAUlanding_gear_system@@A[ecx+eax+8]
  00053	89 4d f4	 mov	 DWORD PTR _right$[ebp], ecx

; 691  : 
; 692  : 	if (!nose || !left || !right)

  00056	83 7d fc 00	 cmp	 DWORD PTR _nose$[ebp], 0
  0005a	74 0c		 je	 SHORT $LN3@animate_hi
  0005c	83 7d f8 00	 cmp	 DWORD PTR _left$[ebp], 0
  00060	74 06		 je	 SHORT $LN3@animate_hi
  00062	83 7d f4 00	 cmp	 DWORD PTR _right$[ebp], 0
  00066	75 05		 jne	 SHORT $LN2@animate_hi
$LN3@animate_hi:

; 693  : 	{
; 694  : 		return;

  00068	e9 83 02 00 00	 jmp	 $LN1@animate_hi
$LN2@animate_hi:

; 695  : 	}
; 696  : 
; 697  : 	if (!find_object_3d_sub_objects(inst3d, search, ARRAY_LENGTH(search)))

  0006d	6a 04		 push	 4
  0006f	68 00 00 00 00	 push	 OFFSET ?search@?1??animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4QBUOBJECT_3D_SUB_OBJECT_SEARCH_BATCH@@B
  00074	8b 45 08	 mov	 eax, DWORD PTR _inst3d$[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ?find_object_3d_sub_objects@@YGHPAUOBJECT_3D_INSTANCE@@PBUOBJECT_3D_SUB_OBJECT_SEARCH_BATCH@@H@Z ; find_object_3d_sub_objects
  0007d	85 c0		 test	 eax, eax
  0007f	75 05		 jne	 SHORT $LN4@animate_hi

; 698  : 		return;

  00081	e9 6a 02 00 00	 jmp	 $LN1@animate_hi
$LN4@animate_hi:

; 699  : 
; 700  : 	{
; 701  : 		float
; 702  : 			uc_state = get_undercarriage_state(),

  00086	e8 00 00 00 00	 call	 ?get_undercarriage_state@@YGMXZ ; get_undercarriage_state
  0008b	d9 5d f0	 fstp	 DWORD PTR _uc_state$3[ebp]

; 703  : 			turn_angle = nose->turn_angle,

  0008e	8b 45 fc	 mov	 eax, DWORD PTR _nose$[ebp]
  00091	f3 0f 10 40 40	 movss	 xmm0, DWORD PTR [eax+64]
  00096	f3 0f 11 45 ec	 movss	 DWORD PTR _turn_angle$2[ebp], xmm0

; 704  : 			front_compression = min(nose->suspension_compression, nose->max_suspension_compression);

  0009b	8b 45 fc	 mov	 eax, DWORD PTR _nose$[ebp]
  0009e	83 c0 58	 add	 eax, 88			; 00000058H
  000a1	50		 push	 eax
  000a2	8b 4d fc	 mov	 ecx, DWORD PTR _nose$[ebp]
  000a5	83 c1 4c	 add	 ecx, 76			; 0000004cH
  000a8	51		 push	 ecx
  000a9	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  000ae	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000b2	f3 0f 11 45 e8	 movss	 DWORD PTR _front_compression$1[ebp], xmm0

; 705  : 
; 706  : 		left_wheel->relative_pitch = (rad(-13.0) + min(left->suspension_compression, left->max_suspension_compression) * rad(70)) * uc_state;

  000b7	8b 45 f8	 mov	 eax, DWORD PTR _left$[ebp]
  000ba	83 c0 58	 add	 eax, 88			; 00000058H
  000bd	50		 push	 eax
  000be	8b 4d f8	 mov	 ecx, DWORD PTR _left$[ebp]
  000c1	83 c1 4c	 add	 ecx, 76			; 0000004cH
  000c4	51		 push	 ecx
  000c5	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  000ca	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000ce	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f9c61aa
  000d6	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000da	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfcd0ad2c4000000
  000e2	f3 0f 5a 4d f0	 cvtss2sd xmm1, DWORD PTR _uc_state$3[ebp]
  000e7	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  000eb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ef	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?left_wheel@?1??animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
  000f5	f3 0f 11 42 1c	 movss	 DWORD PTR [edx+28], xmm0

; 707  : 		right_wheel->relative_pitch = (rad(-13.0) + min(right->suspension_compression, right->max_suspension_compression) * rad(70)) * uc_state;

  000fa	8b 45 f4	 mov	 eax, DWORD PTR _right$[ebp]
  000fd	83 c0 58	 add	 eax, 88			; 00000058H
  00100	50		 push	 eax
  00101	8b 4d f4	 mov	 ecx, DWORD PTR _right$[ebp]
  00104	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00107	51		 push	 ecx
  00108	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  0010d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00111	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f9c61aa
  00119	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0011d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfcd0ad2c4000000
  00125	f3 0f 5a 4d f0	 cvtss2sd xmm1, DWORD PTR _uc_state$3[ebp]
  0012a	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0012e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00132	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?right_wheel@?1??animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
  00138	f3 0f 11 42 1c	 movss	 DWORD PTR [edx+28], xmm0

; 708  : 
; 709  : 		nose_strut->relative_position.z = (-0.15 + front_compression * 0.85) * uc_state;

  0013d	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _front_compression$1[ebp]
  00142	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3feb333333333333
  0014a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfc3333333333333
  00152	f3 0f 5a 4d f0	 cvtss2sd xmm1, DWORD PTR _uc_state$3[ebp]
  00157	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0015b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0015f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nose_strut@?1??animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
  00164	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 710  : 
; 711  : 		nose_wheel->relative_position.y = sin(rad(60)) * (-0.15 + front_compression * 0.8) * uc_state;

  00169	51		 push	 ecx
  0016a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f860a92
  00172	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00177	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  0017c	dd 5d a0	 fstp	 QWORD PTR tv256[ebp]
  0017f	f2 0f 10 45 a0	 movsd	 xmm0, QWORD PTR tv256[ebp]
  00184	f3 0f 5a 4d e8	 cvtss2sd xmm1, DWORD PTR _front_compression$1[ebp]
  00189	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe999999999999a
  00191	f2 0f 58 0d 00
	00 00 00	 addsd	 xmm1, QWORD PTR __real@bfc3333333333333
  00199	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0019d	f3 0f 5a 4d f0	 cvtss2sd xmm1, DWORD PTR _uc_state$3[ebp]
  001a2	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  001a6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nose_wheel@?1??animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
  001af	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 712  : 		nose_wheel->relative_position.z = cos(rad(60)) * (-0.15 + front_compression * 0.8) * uc_state;

  001b4	51		 push	 ecx
  001b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f860a92
  001bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c2	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  001c7	dd 5d a0	 fstp	 QWORD PTR tv265[ebp]
  001ca	f2 0f 10 45 a0	 movsd	 xmm0, QWORD PTR tv265[ebp]
  001cf	f3 0f 5a 4d e8	 cvtss2sd xmm1, DWORD PTR _front_compression$1[ebp]
  001d4	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe999999999999a
  001dc	f2 0f 58 0d 00
	00 00 00	 addsd	 xmm1, QWORD PTR __real@bfc3333333333333
  001e4	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  001e8	f3 0f 5a 4d f0	 cvtss2sd xmm1, DWORD PTR _uc_state$3[ebp]
  001ed	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  001f1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nose_wheel@?1??animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
  001fa	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 713  : 
; 714  : 		nose_wheel->relative_pitch = (rad(-15) + front_compression * rad(70)) * uc_state;

  001ff	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _front_compression$1[ebp]
  00204	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f9c61aa
  0020c	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@be860a92
  00214	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _uc_state$3[ebp]
  00219	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nose_wheel@?1??animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
  0021e	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0

; 715  : 
; 716  : 		nose_wheel->relative_heading = turn_angle;

  00223	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nose_wheel@?1??animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
  00228	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _turn_angle$2[ebp]
  0022d	f3 0f 11 40 18	 movss	 DWORD PTR [eax+24], xmm0

; 717  : 		nose_wheel->relative_roll = sin(nose_wheel->relative_heading) * rad(40);

  00232	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nose_wheel@?1??animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
  00237	51		 push	 ecx
  00238	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  0023d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00242	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  00247	d9 5d a4	 fstp	 DWORD PTR tv279[ebp]
  0024a	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR tv279[ebp]
  0024f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f32b8c2
  00257	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nose_wheel@?1??animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
  0025d	f3 0f 11 41 20	 movss	 DWORD PTR [ecx+32], xmm0

; 718  : 		nose_wheel->relative_pitch += rad(-30) + cos(nose_wheel->relative_heading) * rad(30);

  00262	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nose_wheel@?1??animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
  00267	51		 push	 ecx
  00268	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  0026d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00272	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  00277	d9 5d a4	 fstp	 DWORD PTR tv287[ebp]
  0027a	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR tv287[ebp]
  0027f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f060a92
  00287	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@bf060a92
  0028f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nose_wheel@?1??animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
  00295	f3 0f 58 41 1c	 addss	 xmm0, DWORD PTR [ecx+28]
  0029a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nose_wheel@?1??animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
  002a0	f3 0f 11 42 1c	 movss	 DWORD PTR [edx+28], xmm0

; 719  : 
; 720  : 		nose_wheel->relative_position.z += cos(nose_wheel->relative_heading) * 0.05 - 0.05;

  002a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nose_wheel@?1??animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
  002aa	51		 push	 ecx
  002ab	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  002b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b5	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  002ba	dd 5d a0	 fstp	 QWORD PTR tv299[ebp]
  002bd	f2 0f 10 45 a0	 movsd	 xmm0, QWORD PTR tv299[ebp]
  002c2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fa999999999999a
  002ca	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  002d2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nose_wheel@?1??animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
  002d8	f3 0f 5a 49 14	 cvtss2sd xmm1, DWORD PTR [ecx+20]
  002dd	f2 0f 58 c8	 addsd	 xmm1, xmm0
  002e1	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  002e5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nose_wheel@?1??animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z@4PAUOBJECT_3D_SUB_INSTANCE@@A
  002eb	f3 0f 11 42 14	 movss	 DWORD PTR [edx+20], xmm0
$LN1@animate_hi:

; 721  : 	}
; 722  : }

  002f0	5f		 pop	 edi
  002f1	5e		 pop	 esi
  002f2	5b		 pop	 ebx
  002f3	8b e5		 mov	 esp, ebp
  002f5	5d		 pop	 ebp
  002f6	c2 04 00	 ret	 4
?animate_hind_suspension@@YGXPAUOBJECT_3D_INSTANCE@@@Z ENDP ; animate_hind_suspension
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\co_undercarriage.c
;	COMDAT ?weight_on_wheels@@YGHXZ
_TEXT	SEGMENT
_i$ = -4						; size = 4
?weight_on_wheels@@YGHXZ PROC				; weight_on_wheels, COMDAT

; 634  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 635  : 	unsigned int i;
; 636  : 
; 637  : 	if (command_line_dynamics_flight_model < 2)

  00009	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?command_line_dynamics_flight_model@@3HA, 2 ; command_line_dynamics_flight_model
  00010	7d 04		 jge	 SHORT $LN5@weight_on_

; 638  : 		return FALSE;

  00012	33 c0		 xor	 eax, eax
  00014	eb 61		 jmp	 SHORT $LN1@weight_on_
$LN5@weight_on_:

; 639  : 
; 640  : 	for (i = 0; i < current_landing_gear->num_gear_points; i++)

  00016	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0001d	eb 09		 jmp	 SHORT $LN4@weight_on_
$LN2@weight_on_:
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@weight_on_:
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00030	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00032	73 41		 jae	 SHORT $LN3@weight_on_

; 641  : 	{
; 642  : 		if (!current_landing_gear->gear_points[i].damaged && current_landing_gear->gear_points[i].suspension_compression > 0.0)

  00034	69 45 fc 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  0003b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  00041	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00044	83 3c 02 00	 cmp	 DWORD PTR [edx+eax], 0
  00048	75 29		 jne	 SHORT $LN6@weight_on_
  0004a	69 45 fc 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  00051	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  00057	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0005a	f3 0f 5a 44 02
	4c		 cvtss2sd xmm0, DWORD PTR [edx+eax+76]
  00060	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00068	76 09		 jbe	 SHORT $LN6@weight_on_

; 643  : 		{
; 644  : 			return TRUE;

  0006a	b8 01 00 00 00	 mov	 eax, 1
  0006f	eb 06		 jmp	 SHORT $LN1@weight_on_

; 645  : 			break;

  00071	eb 02		 jmp	 SHORT $LN3@weight_on_
$LN6@weight_on_:

; 646  : 		}
; 647  : 	}

  00073	eb aa		 jmp	 SHORT $LN2@weight_on_
$LN3@weight_on_:

; 648  : 
; 649  : 	return FALSE;

  00075	33 c0		 xor	 eax, eax
$LN1@weight_on_:

; 650  : }

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
?weight_on_wheels@@YGHXZ ENDP				; weight_on_wheels
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\co_undercarriage.c
;	COMDAT ?right_main_wheel_locked_down@@YGHXZ
_TEXT	SEGMENT
?right_main_wheel_locked_down@@YGHXZ PROC		; right_main_wheel_locked_down, COMDAT

; 819  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 820  : 	return wheel_locked_down(current_landing_gear->gear_points_types[LGPT_RIGHT_MAIN_WHEEL]);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  00017	8b 44 0a 08	 mov	 eax, DWORD PTR [edx+ecx+8]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?wheel_locked_down@@YGHPBUlanding_gear_point@@@Z ; wheel_locked_down

; 821  : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?right_main_wheel_locked_down@@YGHXZ ENDP		; right_main_wheel_locked_down
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\co_undercarriage.c
;	COMDAT ?left_main_wheel_locked_down@@YGHXZ
_TEXT	SEGMENT
?left_main_wheel_locked_down@@YGHXZ PROC		; left_main_wheel_locked_down, COMDAT

; 814  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 815  : 	return wheel_locked_down(current_landing_gear->gear_points_types[LGPT_LEFT_MAIN_WHEEL]);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	c1 e0 00	 shl	 eax, 0
  00011	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  00017	8b 54 01 08	 mov	 edx, DWORD PTR [ecx+eax+8]
  0001b	52		 push	 edx
  0001c	e8 00 00 00 00	 call	 ?wheel_locked_down@@YGHPBUlanding_gear_point@@@Z ; wheel_locked_down

; 816  : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?left_main_wheel_locked_down@@YGHXZ ENDP		; left_main_wheel_locked_down
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\co_undercarriage.c
;	COMDAT ?nose_wheel_locked_down@@YGHXZ
_TEXT	SEGMENT
?nose_wheel_locked_down@@YGHXZ PROC			; nose_wheel_locked_down, COMDAT

; 809  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 810  : 	return wheel_locked_down(current_landing_gear->gear_points_types[LGPT_NOSE_WHEEL]);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	d1 e0		 shl	 eax, 1
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  00016	8b 54 01 08	 mov	 edx, DWORD PTR [ecx+eax+8]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ?wheel_locked_down@@YGHPBUlanding_gear_point@@@Z ; wheel_locked_down

; 811  : }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?nose_wheel_locked_down@@YGHXZ ENDP			; nose_wheel_locked_down
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\co_undercarriage.c
;	COMDAT ?repair_wheels@@YGXXZ
_TEXT	SEGMENT
_i$ = -4						; size = 4
?repair_wheels@@YGXXZ PROC				; repair_wheels, COMDAT

; 614  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 615  : 	unsigned
; 616  : 		i;
; 617  : 
; 618  : 	for (i = 0; i < current_landing_gear->num_gear_points; i++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@repair_whe
$LN2@repair_whe:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@repair_whe:
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00023	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00025	73 19		 jae	 SHORT $LN1@repair_whe

; 619  : 	{
; 620  : 		current_landing_gear->gear_points[i].damaged = FALSE;

  00027	69 45 fc 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  0002e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  00034	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00037	c7 04 02 00 00
	00 00		 mov	 DWORD PTR [edx+eax], 0

; 621  : 	}

  0003e	eb d2		 jmp	 SHORT $LN2@repair_whe
$LN1@repair_whe:

; 622  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?repair_wheels@@YGXXZ ENDP				; repair_wheels
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\co_undercarriage.c
;	COMDAT ?helicopter_has_undercarriage_modelling@@YGHXZ
_TEXT	SEGMENT
tv67 = -68						; size = 4
?helicopter_has_undercarriage_modelling@@YGHXZ PROC	; helicopter_has_undercarriage_modelling, COMDAT

; 625  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 626  : 	return command_line_dynamics_flight_model >= 2 && current_landing_gear->num_gear_points > 0;

  00009	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?command_line_dynamics_flight_model@@3HA, 2 ; command_line_dynamics_flight_model
  00010	7c 13		 jl	 SHORT $LN3@helicopter
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  00017	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001a	76 09		 jbe	 SHORT $LN3@helicopter
  0001c	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  00023	eb 07		 jmp	 SHORT $LN4@helicopter
$LN3@helicopter:
  00025	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$LN4@helicopter:
  0002c	8b 45 bc	 mov	 eax, DWORD PTR tv67[ebp]

; 627  : }

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?helicopter_has_undercarriage_modelling@@YGHXZ ENDP	; helicopter_has_undercarriage_modelling
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\co_undercarriage.c
;	COMDAT ?reset_undercarriage_world_position@@YGXXZ
_TEXT	SEGMENT
tv72 = -108						; size = 4
_i$ = -40						; size = 4
_attitude$ = -36					; size = 36
?reset_undercarriage_world_position@@YGXXZ PROC		; reset_undercarriage_world_position, COMDAT

; 596  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 597  : 	matrix3x3
; 598  : 		attitude;
; 599  : 	unsigned
; 600  : 		i;
; 601  : 
; 602  : //	debug_log("resetting gear position");
; 603  : 
; 604  : 	current_landing_gear = &landing_gears[get_global_gunship_type()];

  00009	6b 05 0c 00 00
	00 18		 imul	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+12, 24
  00010	05 00 00 00 00	 add	 eax, OFFSET ?landing_gears@@3PAUlanding_gear_system@@A
  00015	a3 00 00 00 00	 mov	 DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A, eax

; 605  : 
; 606  : 	get_local_entity_attitude_matrix (get_gunship_entity (), attitude);

  0001a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00021	74 0c		 je	 SHORT $LN6@reset_unde
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	89 4d 94	 mov	 DWORD PTR tv72[ebp], ecx
  0002d	eb 21		 jmp	 SHORT $LN7@reset_unde
$LN6@reset_unde:
  0002f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??reset_undercarriage_world_position@@YGXXZ@4JA
  00035	83 c2 0a	 add	 edx, 10			; 0000000aH
  00038	52		 push	 edx
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@OKKAHBNG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00049	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$LN7@reset_unde:
  00050	8d 4d dc	 lea	 ecx, DWORD PTR _attitude$[ebp]
  00053	51		 push	 ecx
  00054	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0005a	52		 push	 edx
  0005b	8b 45 94	 mov	 eax, DWORD PTR tv72[ebp]
  0005e	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_attitude_matrix@@3PAP6GXPAUENTITY@@QAY02M@ZA[eax*4]
  00065	ff d1		 call	 ecx

; 607  : 	get_inverse_matrix(attitude, attitude);

  00067	8d 45 dc	 lea	 eax, DWORD PTR _attitude$[ebp]
  0006a	50		 push	 eax
  0006b	8d 4d dc	 lea	 ecx, DWORD PTR _attitude$[ebp]
  0006e	51		 push	 ecx
  0006f	e8 00 00 00 00	 call	 ?get_inverse_matrix@@YGXQAY02MQAY02$$CBM@Z ; get_inverse_matrix

; 608  : 
; 609  : 	for (i = 0; i < current_landing_gear->num_gear_points; i++)

  00074	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0007b	eb 09		 jmp	 SHORT $LN4@reset_unde
$LN2@reset_unde:
  0007d	8b 45 d8	 mov	 eax, DWORD PTR _i$[ebp]
  00080	83 c0 01	 add	 eax, 1
  00083	89 45 d8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@reset_unde:
  00086	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  0008b	8b 4d d8	 mov	 ecx, DWORD PTR _i$[ebp]
  0008e	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00090	73 1c		 jae	 SHORT $LN1@reset_unde

; 610  : 		update_gear_world_position(&current_landing_gear->gear_points[i], attitude);

  00092	8d 45 dc	 lea	 eax, DWORD PTR _attitude$[ebp]
  00095	50		 push	 eax
  00096	69 4d d8 94 00
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 148
  0009d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  000a3	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  000a6	51		 push	 ecx
  000a7	e8 00 00 00 00	 call	 ?update_gear_world_position@@YGXPAUlanding_gear_point@@QAY02M@Z ; update_gear_world_position
  000ac	eb cf		 jmp	 SHORT $LN2@reset_unde
$LN1@reset_unde:

; 611  : }

  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c3		 ret	 0
?reset_undercarriage_world_position@@YGXXZ ENDP		; reset_undercarriage_world_position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\co_undercarriage.c
;	COMDAT ?update_undercarriage_dynamics@@YGXXZ
_TEXT	SEGMENT
?update_undercarriage_dynamics@@YGXXZ PROC		; update_undercarriage_dynamics, COMDAT

; 653  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 654  : 	ASSERT(get_gunship_entity());

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00010	75 18		 jne	 SHORT $LN2@update_und
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_undercarriage_dynamics@@YGXXZ@4JA
  00017	83 c0 01	 add	 eax, 1
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@OKKAHBNG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FHEFHDHP@get_gunship_entity?$CI?$CJ@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@update_und:

; 655  : 
; 656  : 	current_flight_dynamics->undercarriage_state.value = get_undercarriage_state();

  0002a	e8 00 00 00 00	 call	 ?get_undercarriage_state@@YGMXZ ; get_undercarriage_state
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00034	d9 98 64 1c 00
	00		 fstp	 DWORD PTR [eax+7268]

; 657  : 
; 658  : 	update_suspension();

  0003a	e8 00 00 00 00	 call	 ?update_suspension@@YGXXZ ; update_suspension

; 659  : 	apply_suspension_forces();

  0003f	e8 00 00 00 00	 call	 ?apply_suspension_forces@@YGXXZ ; apply_suspension_forces

; 660  : }

  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
?update_undercarriage_dynamics@@YGXXZ ENDP		; update_undercarriage_dynamics
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\co_undercarriage.c
;	COMDAT ?deinitialise_undercarriage_dynamics@@YGXXZ
_TEXT	SEGMENT
?deinitialise_undercarriage_dynamics@@YGXXZ PROC	; deinitialise_undercarriage_dynamics, COMDAT

; 591  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 592  : 
; 593  : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?deinitialise_undercarriage_dynamics@@YGXXZ ENDP	; deinitialise_undercarriage_dynamics
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\co_undercarriage.c
;	COMDAT ?initialise_undercarriage_dynamics@@YGXXZ
_TEXT	SEGMENT
tv72 = -108						; size = 4
_i$ = -40						; size = 4
_attitude$ = -36					; size = 36
?initialise_undercarriage_dynamics@@YGXXZ PROC		; initialise_undercarriage_dynamics, COMDAT

; 560  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 561  : 	matrix3x3
; 562  : 		attitude;
; 563  : 	unsigned
; 564  : 		i;
; 565  : 
; 566  : 	current_landing_gear = &landing_gears[get_global_gunship_type()];

  00009	6b 05 0c 00 00
	00 18		 imul	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+12, 24
  00010	05 00 00 00 00	 add	 eax, OFFSET ?landing_gears@@3PAUlanding_gear_system@@A
  00015	a3 00 00 00 00	 mov	 DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A, eax

; 567  : 
; 568  : 	get_local_entity_attitude_matrix (get_gunship_entity (), attitude);

  0001a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00021	74 0c		 je	 SHORT $LN6@initialise
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	89 4d 94	 mov	 DWORD PTR tv72[ebp], ecx
  0002d	eb 21		 jmp	 SHORT $LN7@initialise
$LN6@initialise:
  0002f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??initialise_undercarriage_dynamics@@YGXXZ@4JA
  00035	83 c2 08	 add	 edx, 8
  00038	52		 push	 edx
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@OKKAHBNG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00049	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$LN7@initialise:
  00050	8d 4d dc	 lea	 ecx, DWORD PTR _attitude$[ebp]
  00053	51		 push	 ecx
  00054	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0005a	52		 push	 edx
  0005b	8b 45 94	 mov	 eax, DWORD PTR tv72[ebp]
  0005e	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_attitude_matrix@@3PAP6GXPAUENTITY@@QAY02M@ZA[eax*4]
  00065	ff d1		 call	 ecx

; 569  : 	get_inverse_matrix(attitude, attitude);

  00067	8d 45 dc	 lea	 eax, DWORD PTR _attitude$[ebp]
  0006a	50		 push	 eax
  0006b	8d 4d dc	 lea	 ecx, DWORD PTR _attitude$[ebp]
  0006e	51		 push	 ecx
  0006f	e8 00 00 00 00	 call	 ?get_inverse_matrix@@YGXQAY02MQAY02$$CBM@Z ; get_inverse_matrix

; 570  : 
; 571  : 	for (i = 0; i < current_landing_gear->num_gear_points; i++)

  00074	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0007b	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  0007d	8b 45 d8	 mov	 eax, DWORD PTR _i$[ebp]
  00080	83 c0 01	 add	 eax, 1
  00083	89 45 d8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@initialise:
  00086	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  0008b	8b 4d d8	 mov	 ecx, DWORD PTR _i$[ebp]
  0008e	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00090	0f 83 47 01 00
	00		 jae	 $LN3@initialise

; 572  : 	{
; 573  : 		current_landing_gear->gear_points[i].damaged = FALSE;

  00096	69 45 d8 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  0009d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  000a3	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000a6	c7 04 02 00 00
	00 00		 mov	 DWORD PTR [edx+eax], 0

; 574  : 		current_landing_gear->gear_points[i].resistance_force = 0.0;

  000ad	69 45 d8 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  000b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  000ba	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000bd	0f 57 c0	 xorps	 xmm0, xmm0
  000c0	f3 0f 11 44 02
	50		 movss	 DWORD PTR [edx+eax+80], xmm0

; 575  : 		current_landing_gear->gear_points[i].brake_force = 0.0;

  000c6	69 45 d8 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  000cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  000d3	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d6	0f 57 c0	 xorps	 xmm0, xmm0
  000d9	f3 0f 11 44 02
	54		 movss	 DWORD PTR [edx+eax+84], xmm0

; 576  : 		current_landing_gear->gear_points[i].damping = 0.0;

  000df	69 45 d8 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  000e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  000ec	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ef	0f 57 c0	 xorps	 xmm0, xmm0
  000f2	f3 0f 11 44 02
	64		 movss	 DWORD PTR [edx+eax+100], xmm0

; 577  : 		current_landing_gear->gear_points[i].suspension_compression = 0.0;

  000f8	69 45 d8 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  000ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  00105	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00108	0f 57 c0	 xorps	 xmm0, xmm0
  0010b	f3 0f 11 44 02
	4c		 movss	 DWORD PTR [edx+eax+76], xmm0

; 578  : 		current_landing_gear->gear_points[i].turn_angle = 0.0;

  00111	69 45 d8 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  00118	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  0011e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00121	0f 57 c0	 xorps	 xmm0, xmm0
  00124	f3 0f 11 44 02
	40		 movss	 DWORD PTR [edx+eax+64], xmm0

; 579  : 		current_landing_gear->gear_points[i].rotation_speed = 0.0;

  0012a	69 45 d8 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  00131	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  00137	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0013a	0f 57 c0	 xorps	 xmm0, xmm0
  0013d	f3 0f 11 44 02
	44		 movss	 DWORD PTR [edx+eax+68], xmm0

; 580  : 		current_landing_gear->gear_points[i].rotation_angle = rand() * PI / RAND_MAX;

  00143	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  00149	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0014d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40490fdb
  00155	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@46fffe00
  0015d	69 45 d8 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  00164	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  0016a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0016d	f3 0f 11 44 02
	48		 movss	 DWORD PTR [edx+eax+72], xmm0

; 581  : 
; 582  : 		current_landing_gear->gear_points[i].velocity.x = 0.0;

  00173	69 45 d8 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  0017a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  00180	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00183	0f 57 c0	 xorps	 xmm0, xmm0
  00186	f3 0f 11 44 02
	28		 movss	 DWORD PTR [edx+eax+40], xmm0

; 583  : 		current_landing_gear->gear_points[i].velocity.y = 0.0;

  0018c	69 45 d8 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  00193	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  00199	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0019c	0f 57 c0	 xorps	 xmm0, xmm0
  0019f	f3 0f 11 44 02
	2c		 movss	 DWORD PTR [edx+eax+44], xmm0

; 584  : 		current_landing_gear->gear_points[i].velocity.z = 0.0;

  001a5	69 45 d8 94 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 148
  001ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  001b2	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001b5	0f 57 c0	 xorps	 xmm0, xmm0
  001b8	f3 0f 11 44 02
	30		 movss	 DWORD PTR [edx+eax+48], xmm0

; 585  : 
; 586  : 		update_gear_world_position(&current_landing_gear->gear_points[i], attitude);

  001be	8d 45 dc	 lea	 eax, DWORD PTR _attitude$[ebp]
  001c1	50		 push	 eax
  001c2	69 4d d8 94 00
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 148
  001c9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_landing_gear@@3PAUlanding_gear_system@@A
  001cf	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  001d2	51		 push	 ecx
  001d3	e8 00 00 00 00	 call	 ?update_gear_world_position@@YGXPAUlanding_gear_point@@QAY02M@Z ; update_gear_world_position

; 587  : 	}

  001d8	e9 a0 fe ff ff	 jmp	 $LN2@initialise
$LN3@initialise:

; 588  : }

  001dd	5f		 pop	 edi
  001de	5e		 pop	 esi
  001df	5b		 pop	 ebx
  001e0	8b e5		 mov	 esp, ebp
  001e2	5d		 pop	 ebp
  001e3	c3		 ret	 0
?initialise_undercarriage_dynamics@@YGXXZ ENDP		; initialise_undercarriage_dynamics
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\co_undercarriage.c
;	COMDAT ?deinitialise_undercarriage_database@@YGXXZ
_TEXT	SEGMENT
_i$ = -4						; size = 4
?deinitialise_undercarriage_database@@YGXXZ PROC	; deinitialise_undercarriage_database, COMDAT

; 541  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 542  : 	unsigned
; 543  : 		i;
; 544  : 
; 545  : 	for (i = 0; i < ARRAY_LENGTH(landing_gears); i++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@deinitiali
$LN2@deinitiali:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@deinitiali:
  0001b	83 7d fc 0b	 cmp	 DWORD PTR _i$[ebp], 11	; 0000000bH
  0001f	73 3b		 jae	 SHORT $LN1@deinitiali

; 546  : 	{
; 547  : 		if (landing_gears[i].gear_points)

  00021	6b 45 fc 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  00025	83 b8 04 00 00
	00 00		 cmp	 DWORD PTR ?landing_gears@@3PAUlanding_gear_system@@A[eax+4], 0
  0002c	74 10		 je	 SHORT $LN5@deinitiali

; 548  : 			safe_free(landing_gears[i].gear_points);

  0002e	6b 45 fc 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  00032	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR ?landing_gears@@3PAUlanding_gear_system@@A[eax+4]
  00038	51		 push	 ecx
  00039	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free
$LN5@deinitiali:

; 549  : 
; 550  : 		landing_gears[i].num_gear_points = 0;

  0003e	6b 45 fc 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  00042	c7 80 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?landing_gears@@3PAUlanding_gear_system@@A[eax], 0

; 551  : 		landing_gears[i].gear_points = NULL;

  0004c	6b 45 fc 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  00050	c7 80 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?landing_gears@@3PAUlanding_gear_system@@A[eax+4], 0

; 552  : 	}

  0005a	eb b6		 jmp	 SHORT $LN2@deinitiali
$LN1@deinitiali:

; 553  : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
?deinitialise_undercarriage_database@@YGXXZ ENDP	; deinitialise_undercarriage_database
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\co_undercarriage.c
;	COMDAT ?initialise_undercarriage_database@@YGXXZ
_TEXT	SEGMENT
_gunship$ = -48						; size = 4
_filenames$ = -44					; size = 44
?initialise_undercarriage_database@@YGXXZ PROC		; initialise_undercarriage_database, COMDAT

; 514  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 515  : 	const char
; 516  : 		*filenames[NUM_GUNSHIP_TYPES + 1];
; 517  : 	unsigned
; 518  : 		gunship;
; 519  : 
; 520  : 	memset(filenames, 0, sizeof(filenames));

  00009	6a 2c		 push	 44			; 0000002cH
  0000b	6a 00		 push	 0
  0000d	8d 45 d4	 lea	 eax, DWORD PTR _filenames$[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 _memset
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH

; 521  : 
; 522  : 	filenames[GUNSHIP_TYPE_APACHE] = "ah-64-suspension.txt";

  00019	b8 04 00 00 00	 mov	 eax, 4
  0001e	6b c8 00	 imul	 ecx, eax, 0
  00021	c7 44 0d d4 00
	00 00 00	 mov	 DWORD PTR _filenames$[ebp+ecx], OFFSET ??_C@_0BF@LOMNDLGO@ah?964?9suspension?4txt@

; 523  : 	filenames[GUNSHIP_TYPE_AH64A] = "ah-64-suspension.txt";

  00029	b8 04 00 00 00	 mov	 eax, 4
  0002e	6b c8 06	 imul	 ecx, eax, 6
  00031	c7 44 0d d4 00
	00 00 00	 mov	 DWORD PTR _filenames$[ebp+ecx], OFFSET ??_C@_0BF@LOMNDLGO@ah?964?9suspension?4txt@

; 524  : 	filenames[GUNSHIP_TYPE_COMANCHE] = "rah-66-suspension.txt";

  00039	b8 04 00 00 00	 mov	 eax, 4
  0003e	d1 e0		 shl	 eax, 1
  00040	c7 44 05 d4 00
	00 00 00	 mov	 DWORD PTR _filenames$[ebp+eax], OFFSET ??_C@_0BG@EGKKONAH@rah?966?9suspension?4txt@

; 525  : 	filenames[GUNSHIP_TYPE_BLACKHAWK] = "uh-60-suspension.txt";

  00048	b8 04 00 00 00	 mov	 eax, 4
  0004d	c1 e0 02	 shl	 eax, 2
  00050	c7 44 05 d4 00
	00 00 00	 mov	 DWORD PTR _filenames$[ebp+eax], OFFSET ??_C@_0BF@JENIAKPG@uh?960?9suspension?4txt@

; 526  : 	filenames[GUNSHIP_TYPE_HAVOC] = "mi-28-suspension.txt";

  00058	b8 04 00 00 00	 mov	 eax, 4
  0005d	c1 e0 00	 shl	 eax, 0
  00060	c7 44 05 d4 00
	00 00 00	 mov	 DWORD PTR _filenames$[ebp+eax], OFFSET ??_C@_0BF@HCBBLCLC@mi?928?9suspension?4txt@

; 527  : 	filenames[GUNSHIP_TYPE_HOKUM] = "ka-52-suspension.txt";

  00068	b8 04 00 00 00	 mov	 eax, 4
  0006d	6b c8 03	 imul	 ecx, eax, 3
  00070	c7 44 0d d4 00
	00 00 00	 mov	 DWORD PTR _filenames$[ebp+ecx], OFFSET ??_C@_0BF@MKPFLEPL@ka?952?9suspension?4txt@

; 528  : 	filenames[GUNSHIP_TYPE_KA50] = "ka-52-suspension.txt";

  00078	b8 04 00 00 00	 mov	 eax, 4
  0007d	6b c8 07	 imul	 ecx, eax, 7
  00080	c7 44 0d d4 00
	00 00 00	 mov	 DWORD PTR _filenames$[ebp+ecx], OFFSET ??_C@_0BF@MKPFLEPL@ka?952?9suspension?4txt@

; 529  : 	filenames[GUNSHIP_TYPE_HIND] = "mi-24-suspension.txt";

  00088	b8 04 00 00 00	 mov	 eax, 4
  0008d	6b c8 05	 imul	 ecx, eax, 5
  00090	c7 44 0d d4 00
	00 00 00	 mov	 DWORD PTR _filenames$[ebp+ecx], OFFSET ??_C@_0BF@OHAJNKOD@mi?924?9suspension?4txt@

; 530  : 	filenames[GUNSHIP_TYPE_VIPER] = "ah-1-suspension.txt";

  00098	b8 04 00 00 00	 mov	 eax, 4
  0009d	c1 e0 03	 shl	 eax, 3
  000a0	c7 44 05 d4 00
	00 00 00	 mov	 DWORD PTR _filenames$[ebp+eax], OFFSET ??_C@_0BE@KAALMBED@ah?91?9suspension?4txt@

; 531  : 	filenames[GUNSHIP_TYPE_KIOWA] = "oh-58-suspension.txt";

  000a8	b8 04 00 00 00	 mov	 eax, 4
  000ad	6b c8 09	 imul	 ecx, eax, 9
  000b0	c7 44 0d d4 00
	00 00 00	 mov	 DWORD PTR _filenames$[ebp+ecx], OFFSET ??_C@_0BF@BCJMICON@oh?958?9suspension?4txt@

; 532  : 
; 533  : 	for (gunship = 0; gunship < ARRAY_LENGTH(filenames); gunship++)

  000b8	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _gunship$[ebp], 0
  000bf	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  000c1	8b 45 d0	 mov	 eax, DWORD PTR _gunship$[ebp]
  000c4	83 c0 01	 add	 eax, 1
  000c7	89 45 d0	 mov	 DWORD PTR _gunship$[ebp], eax
$LN4@initialise:
  000ca	83 7d d0 0b	 cmp	 DWORD PTR _gunship$[ebp], 11 ; 0000000bH
  000ce	73 1a		 jae	 SHORT $LN3@initialise

; 534  : 		initialise_landing_gear(&landing_gears[gunship], filenames[gunship]);

  000d0	8b 45 d0	 mov	 eax, DWORD PTR _gunship$[ebp]
  000d3	8b 4c 85 d4	 mov	 ecx, DWORD PTR _filenames$[ebp+eax*4]
  000d7	51		 push	 ecx
  000d8	6b 55 d0 18	 imul	 edx, DWORD PTR _gunship$[ebp], 24
  000dc	81 c2 00 00 00
	00		 add	 edx, OFFSET ?landing_gears@@3PAUlanding_gear_system@@A
  000e2	52		 push	 edx
  000e3	e8 00 00 00 00	 call	 ?initialise_landing_gear@@YGXPAUlanding_gear_system@@PBD@Z ; initialise_landing_gear
  000e8	eb d7		 jmp	 SHORT $LN2@initialise
$LN3@initialise:

; 535  : 
; 536  : 	apache_initialise_landing_gear(&apache_main_gear, 0.58, 0.46, 0.79, 0.62, 1.13, 0.09);

  000ea	51		 push	 ecx
  000eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db851ec
  000f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f8	51		 push	 ecx
  000f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f90a3d7
  00101	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00106	51		 push	 ecx
  00107	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f1eb852
  0010f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00114	51		 push	 ecx
  00115	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4a3d71
  0011d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00122	51		 push	 ecx
  00123	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eeb851f
  0012b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00130	51		 push	 ecx
  00131	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f147ae1
  00139	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013e	68 00 00 00 00	 push	 OFFSET ?apache_main_gear@@3Uapache_landing_gear@@A
  00143	e8 00 00 00 00	 call	 ?apache_initialise_landing_gear@@YGXPAUapache_landing_gear@@MMMMMM@Z ; apache_initialise_landing_gear

; 537  : 	apache_initialise_landing_gear(&apache_tail_gear, 0.40, 0.27, 0.62, 0.39, 0.79, 0.31);

  00148	51		 push	 ecx
  00149	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e9eb852
  00151	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00156	51		 push	 ecx
  00157	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4a3d71
  0015f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00164	51		 push	 ecx
  00165	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec7ae14
  0016d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00172	51		 push	 ecx
  00173	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f1eb852
  0017b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00180	51		 push	 ecx
  00181	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8a3d71
  00189	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018e	51		 push	 ecx
  0018f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  00197	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019c	68 00 00 00 00	 push	 OFFSET ?apache_tail_gear@@3Uapache_landing_gear@@A
  001a1	e8 00 00 00 00	 call	 ?apache_initialise_landing_gear@@YGXPAUapache_landing_gear@@MMMMMM@Z ; apache_initialise_landing_gear

; 538  : }

  001a6	5f		 pop	 edi
  001a7	5e		 pop	 esi
  001a8	5b		 pop	 ebx
  001a9	8b e5		 mov	 esp, ebp
  001ab	5d		 pop	 ebp
  001ac	c3		 ret	 0
?initialise_undercarriage_database@@YGXXZ ENDP		; initialise_undercarriage_database
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sqrt@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sqrt@@YGMM@Z PROC					; sqrt, COMDAT

; 294  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 295  : 	return (_CSTD sqrtf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sqrtf
  00019	83 c4 04	 add	 esp, 4

; 296  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sqrt@@YGMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sin@@YGMM@Z PROC					; sin, COMDAT

; 284  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 285  : 	return (_CSTD sinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sinf
  00019	83 c4 04	 add	 esp, 4

; 286  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sin@@YGMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fabs@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?fabs@@YGMM@Z PROC					; fabs, COMDAT

; 112  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 113  : 	return (_CSTD fabsf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _fabsf
  00019	83 c4 04	 add	 esp, 4

; 114  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?fabs@@YGMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?cos@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?cos@@YGMM@Z PROC					; cos, COMDAT

; 77   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 78   : 	return (_CSTD cosf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _cosf
  00019	83 c4 04	 add	 esp, 4

; 79   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?cos@@YGMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan2@@YGMMM@Z
_TEXT	SEGMENT
__Yx$ = 8						; size = 4
__Xx$ = 12						; size = 4
?atan2@@YGMMM@Z PROC					; atan2, COMDAT

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return (_CSTD atan2f(_Yx, _Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _atan2f
  00024	83 c4 08	 add	 esp, 8

; 58   : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?atan2@@YGMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?atan@@YGMM@Z PROC					; atan, COMDAT

; 46   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 47   : 	return (_CSTD atanf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _atanf
  00019	83 c4 04	 add	 esp, 4

; 48   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?atan@@YGMM@Z ENDP					; atan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?acos@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?acos@@YGMM@Z PROC					; acos, COMDAT

; 26   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 27   : 	return (_CSTD acosf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _acosf
  00019	83 c4 04	 add	 esp, 4

; 28   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?acos@@YGMM@Z ENDP					; acos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 760  :             return (float)sqrt(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sqrt
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 761  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 750  :             return (float)sin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 751  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 671  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 672  :             return (float)fabs(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _fabs
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 673  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 648  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 649  :             return (float)cos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _cos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 650  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atanf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_atanf	PROC						; COMDAT

; 638  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 639  :             return (float)atan(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _atan
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 640  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_atanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv74 = -68						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 633  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 634  :             return (float)atan2(_Y, _X);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _atan2
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 635  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _acosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 623  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 624  :             return (float)acos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _acos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 625  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_acosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf_s
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_sprintf_s PROC						; COMDAT

; 1841 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1842 :             int _Result;
; 1843 :             va_list _ArgList;
; 1844 :             __crt_va_start(_ArgList, _Format);

  00009	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1845 :             _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  0001c	52		 push	 edx
  0001d	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __vsprintf_s_l
  00026	83 c4 14	 add	 esp, 20			; 00000014H
  00029	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1846 :             __crt_va_end(_ArgList);

  0002c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1847 :             return _Result;

  00033	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1848 :         }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_sprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_s_l
_TEXT	SEGMENT
tv73 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsprintf_s_l PROC					; COMDAT

; 1497 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1498 :         int const _Result = __stdio_common_vsprintf_s(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00025	52		 push	 edx
  00026	8b 00		 mov	 eax, DWORD PTR [eax]
  00028	50		 push	 eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf_s
  0002f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00032	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1499 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1500 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1501 : 
; 1502 :         return _Result < 0 ? -1 : _Result;

  00035	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00039	7d 09		 jge	 SHORT $LN3@vsprintf_s
  0003b	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv73[ebp], -1
  00042	eb 06		 jmp	 SHORT $LN4@vsprintf_s
$LN3@vsprintf_s:
  00044	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00047	89 45 b8	 mov	 DWORD PTR tv73[ebp], eax
$LN4@vsprintf_s:
  0004a	8b 45 b8	 mov	 eax, DWORD PTR tv73[ebp]

; 1503 :     }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
__vsprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fscanf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fscanf	PROC						; COMDAT

; 1204 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1205 :         int _Result;
; 1206 :         va_list _ArgList;
; 1207 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1208 :         _Result = _vfscanf_l(_Stream, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Stream$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vfscanf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1209 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1210 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1211 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_fscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfscanf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfscanf_l PROC					; COMDAT

; 1062 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1063 :         return __stdio_common_vfscanf(

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ___local_stdio_scanf_options
  0001e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00021	51		 push	 ecx
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	52		 push	 edx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfscanf
  0002b	83 c4 18	 add	 esp, 24			; 00000018H

; 1064 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 1065 :             _Stream, _Format, _Locale, _ArgList);
; 1066 :     }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
__vfscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT

; 96   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 97   :         static unsigned __int64 _OptionsStorage;
; 98   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 99   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
