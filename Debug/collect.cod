; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\gunships\dynamics\common\collect.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?collective_forward@@YGXPAUEVENT@@@Z		; collective_forward
PUBLIC	?collective_backward@@YGXPAUEVENT@@@Z		; collective_backward
PUBLIC	?collective_mouse_input@@YGXPAUEVENT@@@Z	; collective_mouse_input
PUBLIC	?update_collective_pressure_inputs@@YGXXZ	; update_collective_pressure_inputs
PUBLIC	?initialise_collective@@YGXXZ			; initialise_collective
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3f10000000000000
PUBLIC	__real@3f800000
PUBLIC	__real@3f847ae147ae147b
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fefae147ae147ae
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4014000000000000
PUBLIC	__real@401e000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@4034000000000000
PUBLIC	__real@4058c00000000000
PUBLIC	__real@4059000000000000
PUBLIC	__real@405e000000000000
PUBLIC	__real@42700000
PUBLIC	__real@469c4000
PUBLIC	__real@bff0000000000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	?get_joystick_axis@@YGHHH@Z:PROC		; get_joystick_axis
EXTRN	?get_current_dynamics_options@@YGHW4DYNAMICS_OPTIONS_TYPES@@@Z:PROC ; get_current_dynamics_options
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?random_number_seed@@3HA:DWORD			; random_number_seed
EXTRN	?command_line_collective_joystick_index@@3HA:DWORD ; command_line_collective_joystick_index
EXTRN	?command_line_collective_joystick_axis@@3HA:DWORD ; command_line_collective_joystick_axis
EXTRN	?command_line_collective_zone_1_limit@@3MA:DWORD ; command_line_collective_zone_1_limit
EXTRN	?command_line_collective_zone_2_limit@@3MA:DWORD ; command_line_collective_zone_2_limit
EXTRN	?command_line_collective_percentage_at_zone1@@3MA:DWORD ; command_line_collective_percentage_at_zone1
EXTRN	?global_options@@3UGLOBAL_OPTIONS_DATA@@A:BYTE	; global_options
EXTRN	?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A:DWORD ; current_flight_dynamics
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?non_linear_collective@@3HA DD 01H DUP (?)		; non_linear_collective
?zone_1_scale@@3MA DD 01H DUP (?)			; zone_1_scale
?zone_2_scale@@3MA DD 01H DUP (?)			; zone_2_scale
?zone_3_scale@@3MA DD 01H DUP (?)			; zone_3_scale
_BSS	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@469c4000
CONST	SEGMENT
__real@469c4000 DD 0469c4000r			; 20000
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@405e000000000000
CONST	SEGMENT
__real@405e000000000000 DQ 0405e000000000000r	; 120
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@4058c00000000000
CONST	SEGMENT
__real@4058c00000000000 DQ 04058c00000000000r	; 99
CONST	ENDS
;	COMDAT __real@4034000000000000
CONST	SEGMENT
__real@4034000000000000 DQ 04034000000000000r	; 20
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@401e000000000000
CONST	SEGMENT
__real@401e000000000000 DQ 0401e000000000000r	; 7.5
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fefae147ae147ae
CONST	SEGMENT
__real@3fefae147ae147ae DQ 03fefae147ae147aer	; 0.99
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f10000000000000
CONST	SEGMENT
__real@3f10000000000000 DQ 03f10000000000000r	; 6.10352e-05
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\collect.c
;	COMDAT ?initialise_collective@@YGXXZ
_TEXT	SEGMENT
tv93 = -80						; size = 8
tv85 = -80						; size = 8
tv73 = -80						; size = 8
tv94 = -72						; size = 8
tv86 = -72						; size = 8
tv74 = -72						; size = 8
?initialise_collective@@YGXXZ PROC			; initialise_collective, COMDAT

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 83   : 	if (command_line_collective_zone_1_limit > 0.0 && command_line_collective_zone_2_limit > 0.0)

  00009	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?command_line_collective_zone_1_limit@@3MA
  00011	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00019	0f 86 de 01 00
	00		 jbe	 $LN2@initialise
  0001f	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?command_line_collective_zone_2_limit@@3MA
  00027	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0002f	0f 86 c8 01 00
	00		 jbe	 $LN2@initialise

; 84   : 	{
; 85   : 		non_linear_collective = TRUE;

  00035	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?non_linear_collective@@3HA, 1

; 86   : 		
; 87   : 		// some sanity checking of the values. have to be in range <0.0, 1.0], and zone2 must be above zone1
; 88   : 		command_line_collective_zone_1_limit = bound(command_line_collective_zone_1_limit, 0.0, 0.99);

  0003f	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?command_line_collective_zone_1_limit@@3MA
  00047	0f 57 c9	 xorps	 xmm1, xmm1
  0004a	66 0f 2f c8	 comisd	 xmm1, xmm0
  0004e	76 0a		 jbe	 SHORT $LN7@initialise
  00050	0f 57 c0	 xorps	 xmm0, xmm0
  00053	f2 0f 11 45 b8	 movsd	 QWORD PTR tv74[ebp], xmm0
  00058	eb 38		 jmp	 SHORT $LN8@initialise
$LN7@initialise:
  0005a	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?command_line_collective_zone_1_limit@@3MA
  00062	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fefae147ae147ae
  0006a	76 0f		 jbe	 SHORT $LN5@initialise
  0006c	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fefae147ae147ae
  00074	f2 0f 11 45 b0	 movsd	 QWORD PTR tv73[ebp], xmm0
  00079	eb 0d		 jmp	 SHORT $LN6@initialise
$LN5@initialise:
  0007b	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?command_line_collective_zone_1_limit@@3MA
  00083	f2 0f 11 45 b0	 movsd	 QWORD PTR tv73[ebp], xmm0
$LN6@initialise:
  00088	f2 0f 10 45 b0	 movsd	 xmm0, QWORD PTR tv73[ebp]
  0008d	f2 0f 11 45 b8	 movsd	 QWORD PTR tv74[ebp], xmm0
$LN8@initialise:
  00092	f2 0f 5a 45 b8	 cvtsd2ss xmm0, QWORD PTR tv74[ebp]
  00097	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?command_line_collective_zone_1_limit@@3MA, xmm0

; 89   : 		command_line_collective_zone_2_limit = bound(command_line_collective_zone_2_limit, command_line_collective_zone_1_limit + 0.01, 1.0);

  0009f	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?command_line_collective_zone_2_limit@@3MA
  000a7	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?command_line_collective_zone_1_limit@@3MA
  000af	f2 0f 58 0d 00
	00 00 00	 addsd	 xmm1, QWORD PTR __real@3f847ae147ae147b
  000b7	66 0f 2f c8	 comisd	 xmm1, xmm0
  000bb	76 17		 jbe	 SHORT $LN11@initialise
  000bd	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?command_line_collective_zone_1_limit@@3MA
  000c5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  000cd	f2 0f 11 45 b8	 movsd	 QWORD PTR tv86[ebp], xmm0
  000d2	eb 38		 jmp	 SHORT $LN12@initialise
$LN11@initialise:
  000d4	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?command_line_collective_zone_2_limit@@3MA
  000dc	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  000e4	76 0f		 jbe	 SHORT $LN9@initialise
  000e6	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  000ee	f2 0f 11 45 b0	 movsd	 QWORD PTR tv85[ebp], xmm0
  000f3	eb 0d		 jmp	 SHORT $LN10@initialise
$LN9@initialise:
  000f5	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?command_line_collective_zone_2_limit@@3MA
  000fd	f2 0f 11 45 b0	 movsd	 QWORD PTR tv85[ebp], xmm0
$LN10@initialise:
  00102	f2 0f 10 45 b0	 movsd	 xmm0, QWORD PTR tv85[ebp]
  00107	f2 0f 11 45 b8	 movsd	 QWORD PTR tv86[ebp], xmm0
$LN12@initialise:
  0010c	f2 0f 5a 45 b8	 cvtsd2ss xmm0, QWORD PTR tv86[ebp]
  00111	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?command_line_collective_zone_2_limit@@3MA, xmm0

; 90   : 		// GCsDriver 08-12-2007
; 91   : 		command_line_collective_percentage_at_zone1 = bound(command_line_collective_percentage_at_zone1, 1.0, 99.0);

  00119	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?command_line_collective_percentage_at_zone1@@3MA
  00121	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00129	66 0f 2f c8	 comisd	 xmm1, xmm0
  0012d	76 0f		 jbe	 SHORT $LN15@initialise
  0012f	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00137	f2 0f 11 45 b8	 movsd	 QWORD PTR tv94[ebp], xmm0
  0013c	eb 38		 jmp	 SHORT $LN16@initialise
$LN15@initialise:
  0013e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?command_line_collective_percentage_at_zone1@@3MA
  00146	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4058c00000000000
  0014e	76 0f		 jbe	 SHORT $LN13@initialise
  00150	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4058c00000000000
  00158	f2 0f 11 45 b0	 movsd	 QWORD PTR tv93[ebp], xmm0
  0015d	eb 0d		 jmp	 SHORT $LN14@initialise
$LN13@initialise:
  0015f	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?command_line_collective_percentage_at_zone1@@3MA
  00167	f2 0f 11 45 b0	 movsd	 QWORD PTR tv93[ebp], xmm0
$LN14@initialise:
  0016c	f2 0f 10 45 b0	 movsd	 xmm0, QWORD PTR tv93[ebp]
  00171	f2 0f 11 45 b8	 movsd	 QWORD PTR tv94[ebp], xmm0
$LN16@initialise:
  00176	f2 0f 5a 45 b8	 cvtsd2ss xmm0, QWORD PTR tv94[ebp]
  0017b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?command_line_collective_percentage_at_zone1@@3MA, xmm0

; 92   : 		
; 93   : 		zone_1_scale = 1.0 / command_line_collective_zone_1_limit;

  00183	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?command_line_collective_zone_1_limit@@3MA
  0018b	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00193	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00197	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0019b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?zone_1_scale@@3MA, xmm0

; 94   : 		zone_2_scale = 1.0 / (command_line_collective_zone_2_limit - command_line_collective_zone_1_limit);

  001a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?command_line_collective_zone_2_limit@@3MA
  001ab	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?command_line_collective_zone_1_limit@@3MA
  001b3	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001b7	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  001bf	f2 0f 5e c8	 divsd	 xmm1, xmm0
  001c3	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  001c7	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?zone_2_scale@@3MA, xmm0

; 95   : 		zone_3_scale = 1.0 / (1.0 - command_line_collective_zone_2_limit);

  001cf	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?command_line_collective_zone_2_limit@@3MA
  001d7	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  001df	f2 0f 5c c8	 subsd	 xmm1, xmm0
  001e3	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  001eb	f2 0f 5e c1	 divsd	 xmm0, xmm1
  001ef	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001f3	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?zone_3_scale@@3MA, xmm0

; 96   : 	}
; 97   : 	else

  001fb	eb 3a		 jmp	 SHORT $LN3@initialise
$LN2@initialise:

; 98   : 	{
; 99   : 		non_linear_collective = FALSE;

  001fd	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?non_linear_collective@@3HA, 0

; 100  : 		zone_1_scale = zone_2_scale = zone_3_scale = 1.0;

  00207	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0020f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?zone_3_scale@@3MA, xmm0
  00217	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?zone_3_scale@@3MA
  0021f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?zone_2_scale@@3MA, xmm0
  00227	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?zone_2_scale@@3MA
  0022f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?zone_1_scale@@3MA, xmm0
$LN3@initialise:

; 101  : 	}
; 102  : }

  00237	5f		 pop	 edi
  00238	5e		 pop	 esi
  00239	5b		 pop	 ebx
  0023a	8b e5		 mov	 esp, ebp
  0023c	5d		 pop	 ebp
  0023d	c3		 ret	 0
?initialise_collective@@YGXXZ ENDP			; initialise_collective
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\collect.c
;	COMDAT ?update_collective_pressure_inputs@@YGXXZ
_TEXT	SEGMENT
tv326 = -88						; size = 4
tv180 = -88						; size = 4
tv327 = -84						; size = 4
tv181 = -84						; size = 4
tv70 = -84						; size = 4
$T1 = -80						; size = 4
$T2 = -76						; size = 4
_input$3 = -8						; size = 4
_joyval$4 = -4						; size = 4
?update_collective_pressure_inputs@@YGXXZ PROC		; update_collective_pressure_inputs, COMDAT

; 165  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 166  : 
; 167  : 	current_flight_dynamics->input_data.collective.delta = current_flight_dynamics->input_data.collective.value;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00014	8b 91 a8 1b 00
	00		 mov	 edx, DWORD PTR [ecx+7080]
  0001a	89 90 ac 1b 00
	00		 mov	 DWORD PTR [eax+7084], edx

; 168  : 
; 169  : 	switch (get_global_collective_input ())

  00020	a1 2c 00 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+44
  00025	89 45 ac	 mov	 DWORD PTR tv70[ebp], eax
  00028	83 7d ac 01	 cmp	 DWORD PTR tv70[ebp], 1
  0002c	74 15		 je	 SHORT $LN4@update_col
  0002e	83 7d ac 03	 cmp	 DWORD PTR tv70[ebp], 3
  00032	74 0f		 je	 SHORT $LN4@update_col
  00034	83 7d ac 05	 cmp	 DWORD PTR tv70[ebp], 5
  00038	0f 84 89 01 00
	00		 je	 $LN9@update_col
  0003e	e9 67 03 00 00	 jmp	 $LN2@update_col
$LN4@update_col:

; 170  : 	{
; 171  : 
; 172  : 		case KEYBOARD_INPUT:
; 173  : 		case MOUSE_INPUT:
; 174  : 		{
; 175  : 		
; 176  : 			if (current_flight_dynamics->input_data.collective_input_pressure & COLLECTIVE_PRESSURE_BACKWARD)

  00043	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00048	8b 88 d4 1b 00
	00		 mov	 ecx, DWORD PTR [eax+7124]
  0004e	83 e1 02	 and	 ecx, 2
  00051	74 5f		 je	 SHORT $LN5@update_col

; 177  : 			{
; 178  : 		
; 179  : 				current_flight_dynamics->input_data.collective_pressure.value = min (0.0f, current_flight_dynamics->input_data.collective_pressure.value);

  00053	0f 57 c0	 xorps	 xmm0, xmm0
  00056	f3 0f 11 45 b4	 movss	 DWORD PTR $T2[ebp], xmm0
  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00060	05 c0 1b 00 00	 add	 eax, 7104		; 00001bc0H
  00065	50		 push	 eax
  00066	8d 4d b4	 lea	 ecx, DWORD PTR $T2[ebp]
  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  0006f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00075	8b 00		 mov	 eax, DWORD PTR [eax]
  00077	89 82 c0 1b 00
	00		 mov	 DWORD PTR [edx+7104], eax

; 180  : 		
; 181  : 				current_flight_dynamics->input_data.collective_pressure.value -= 5.0 * get_delta_time ();

  0007d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?system_delta_time@@3MA
  00085	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4014000000000000
  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00092	f3 0f 5a 88 c0
	1b 00 00	 cvtss2sd xmm1, DWORD PTR [eax+7104]
  0009a	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0009e	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  000a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000a8	f3 0f 11 81 c0
	1b 00 00	 movss	 DWORD PTR [ecx+7104], xmm0
  000b0	eb 7f		 jmp	 SHORT $LN8@update_col
$LN5@update_col:

; 182  : 			}
; 183  : 			else if (current_flight_dynamics->input_data.collective_input_pressure & COLLECTIVE_PRESSURE_FORWARD)

  000b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000b7	8b 88 d4 1b 00
	00		 mov	 ecx, DWORD PTR [eax+7124]
  000bd	83 e1 01	 and	 ecx, 1
  000c0	74 5f		 je	 SHORT $LN7@update_col

; 184  : 			{
; 185  : 		
; 186  : 				current_flight_dynamics->input_data.collective_pressure.value = max (0.0f, current_flight_dynamics->input_data.collective_pressure.value);

  000c2	0f 57 c0	 xorps	 xmm0, xmm0
  000c5	f3 0f 11 45 b0	 movss	 DWORD PTR $T1[ebp], xmm0
  000ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000cf	05 c0 1b 00 00	 add	 eax, 7104		; 00001bc0H
  000d4	50		 push	 eax
  000d5	8d 4d b0	 lea	 ecx, DWORD PTR $T1[ebp]
  000d8	51		 push	 ecx
  000d9	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  000de	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000e4	8b 00		 mov	 eax, DWORD PTR [eax]
  000e6	89 82 c0 1b 00
	00		 mov	 DWORD PTR [edx+7104], eax

; 187  : 		
; 188  : 				current_flight_dynamics->input_data.collective_pressure.value += 5.0 * get_delta_time ();

  000ec	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?system_delta_time@@3MA
  000f4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4014000000000000
  000fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00101	f3 0f 5a 88 c0
	1b 00 00	 cvtss2sd xmm1, DWORD PTR [eax+7104]
  00109	f2 0f 58 c8	 addsd	 xmm1, xmm0
  0010d	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00111	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00117	f3 0f 11 81 c0
	1b 00 00	 movss	 DWORD PTR [ecx+7104], xmm0

; 189  : 			}
; 190  : 			else

  0011f	eb 10		 jmp	 SHORT $LN8@update_col
$LN7@update_col:

; 191  : 			{
; 192  : 		
; 193  : 				current_flight_dynamics->input_data.collective_pressure.value = 0.0;

  00121	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00126	0f 57 c0	 xorps	 xmm0, xmm0
  00129	f3 0f 11 80 c0
	1b 00 00	 movss	 DWORD PTR [eax+7104], xmm0
$LN8@update_col:

; 194  : 			}
; 195  : 		
; 196  : 			current_flight_dynamics->input_data.collective_pressure.value = bound (current_flight_dynamics->input_data.collective_pressure.value,

  00131	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00136	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0013c	f3 0f 10 80 c8
	1b 00 00	 movss	 xmm0, DWORD PTR [eax+7112]
  00144	0f 2f 81 c0 1b
	00 00		 comiss	 xmm0, DWORD PTR [ecx+7104]
  0014b	76 15		 jbe	 SHORT $LN27@update_col
  0014d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00153	f3 0f 10 82 c8
	1b 00 00	 movss	 xmm0, DWORD PTR [edx+7112]
  0015b	f3 0f 11 45 ac	 movss	 DWORD PTR tv181[ebp], xmm0
  00160	eb 4d		 jmp	 SHORT $LN28@update_col
$LN27@update_col:
  00162	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00167	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0016d	f3 0f 10 80 c0
	1b 00 00	 movss	 xmm0, DWORD PTR [eax+7104]
  00175	0f 2f 81 cc 1b
	00 00		 comiss	 xmm0, DWORD PTR [ecx+7116]
  0017c	76 15		 jbe	 SHORT $LN25@update_col
  0017e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00184	f3 0f 10 82 cc
	1b 00 00	 movss	 xmm0, DWORD PTR [edx+7116]
  0018c	f3 0f 11 45 a8	 movss	 DWORD PTR tv180[ebp], xmm0
  00191	eb 12		 jmp	 SHORT $LN26@update_col
$LN25@update_col:
  00193	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00198	f3 0f 10 80 c0
	1b 00 00	 movss	 xmm0, DWORD PTR [eax+7104]
  001a0	f3 0f 11 45 a8	 movss	 DWORD PTR tv180[ebp], xmm0
$LN26@update_col:
  001a5	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR tv180[ebp]
  001aa	f3 0f 11 45 ac	 movss	 DWORD PTR tv181[ebp], xmm0
$LN28@update_col:
  001af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  001b5	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR tv181[ebp]
  001ba	f3 0f 11 81 c0
	1b 00 00	 movss	 DWORD PTR [ecx+7104], xmm0

; 197  : 																											current_flight_dynamics->input_data.collective_pressure.min,
; 198  : 																											current_flight_dynamics->input_data.collective_pressure.max);
; 199  : 	
; 200  : 			break;

  001c2	e9 e3 01 00 00	 jmp	 $LN2@update_col
$LN9@update_col:

; 201  : 		}
; 202  : 		case THROTTLE_INPUT:
; 203  : 		{
; 204  : 
; 205  : 			int
; 206  : 				joyval;
; 207  : 
; 208  : 			float
; 209  : 				input;
; 210  : 
; 211  : 			// 030418 loke
; 212  : 			// implemented multiple joystick device selection
; 213  : 			if (command_line_collective_joystick_index == -1)

  001c7	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?command_line_collective_joystick_index@@3HA, -1 ; command_line_collective_joystick_index
  001ce	75 18		 jne	 SHORT $LN10@update_col

; 214  : 			{
; 215  : 				joyval = get_joystick_axis (current_flight_dynamics->input_data.cyclic_joystick_device_index, JOYSTICK_DEFAULT_AXIS_THROTTLE);

  001d0	6a 02		 push	 2
  001d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  001d7	8b 88 84 01 00
	00		 mov	 ecx, DWORD PTR [eax+388]
  001dd	51		 push	 ecx
  001de	e8 00 00 00 00	 call	 ?get_joystick_axis@@YGHHH@Z ; get_joystick_axis
  001e3	89 45 fc	 mov	 DWORD PTR _joyval$4[ebp], eax

; 216  : 			}
; 217  : 			else

  001e6	eb 15		 jmp	 SHORT $LN11@update_col
$LN10@update_col:

; 218  : 			{
; 219  : 				joyval = get_joystick_axis (command_line_collective_joystick_index, command_line_collective_joystick_axis);

  001e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_line_collective_joystick_axis@@3HA ; command_line_collective_joystick_axis
  001ed	50		 push	 eax
  001ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?command_line_collective_joystick_index@@3HA ; command_line_collective_joystick_index
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 ?get_joystick_axis@@YGHHH@Z ; get_joystick_axis
  001fa	89 45 fc	 mov	 DWORD PTR _joyval$4[ebp], eax
$LN11@update_col:

; 220  : 			}
; 221  : 
; 222  : 
; 223  : 			if (non_linear_collective)

  001fd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?non_linear_collective@@3HA, 0
  00204	0f 84 11 01 00
	00		 je	 $LN12@update_col

; 224  : 			{
; 225  : 				input = 0.5 + ((float) joyval ) / ((float) JOYSTICK_AXIS_MAXIMUM - (float) JOYSTICK_AXIS_MINIMUM);

  0020a	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _joyval$4[ebp]
  0020f	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@469c4000
  00217	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0021b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00223	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00227	f3 0f 11 45 f8	 movss	 DWORD PTR _input$3[ebp], xmm0

; 226  : 
; 227  : 				if (input < command_line_collective_zone_1_limit)

  0022c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?command_line_collective_zone_1_limit@@3MA
  00234	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _input$3[ebp]
  00238	76 31		 jbe	 SHORT $LN14@update_col

; 228  : 				{
; 229  : 					// start variable percentage at zone1 by GCsDriver 08-12-2007
; 230  : 					input *= command_line_collective_percentage_at_zone1 * zone_1_scale;

  0023a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?command_line_collective_percentage_at_zone1@@3MA
  00242	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?zone_1_scale@@3MA
  0024a	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _input$3[ebp]
  0024f	f3 0f 11 45 f8	 movss	 DWORD PTR _input$3[ebp], xmm0

; 231  : 					input -= command_line_collective_percentage_at_zone1;  // 0% -> -60

  00254	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _input$3[ebp]
  00259	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?command_line_collective_percentage_at_zone1@@3MA
  00261	f3 0f 11 45 f8	 movss	 DWORD PTR _input$3[ebp], xmm0
  00266	e9 ae 00 00 00	 jmp	 $LN17@update_col
$LN14@update_col:

; 232  : 					// original
; 233  : 					//input *= 60.0 * zone_1_scale;
; 234  : 					//input -= 60.0;  // 0% -> -60
; 235  : 				}
; 236  : 				else if (input < command_line_collective_zone_2_limit)

  0026b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?command_line_collective_zone_2_limit@@3MA
  00273	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _input$3[ebp]
  00277	76 46		 jbe	 SHORT $LN16@update_col

; 237  : 				{
; 238  : 					// find amount over limit
; 239  : 					input -= command_line_collective_zone_1_limit;

  00279	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _input$3[ebp]
  0027e	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?command_line_collective_zone_1_limit@@3MA
  00286	f3 0f 11 45 f8	 movss	 DWORD PTR _input$3[ebp], xmm0

; 240  : 					input *= (100.0-command_line_collective_percentage_at_zone1) * zone_2_scale;

  0028b	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?command_line_collective_percentage_at_zone1@@3MA
  00293	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4059000000000000
  0029b	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0029f	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?zone_2_scale@@3MA
  002a7	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  002ab	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _input$3[ebp]
  002b0	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  002b4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002b8	f3 0f 11 45 f8	 movss	 DWORD PTR _input$3[ebp], xmm0

; 241  : 					// original
; 242  : 					//input -= command_line_collective_zone_1_limit;
; 243  : 					//input *= 40.0 * zone_2_scale;
; 244  : 				}
; 245  : 				else

  002bd	eb 5a		 jmp	 SHORT $LN17@update_col
$LN16@update_col:

; 246  : 				{
; 247  : 					// find amount over limit
; 248  : 					input -= command_line_collective_zone_2_limit;

  002bf	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _input$3[ebp]
  002c4	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?command_line_collective_zone_2_limit@@3MA
  002cc	f3 0f 11 45 f8	 movss	 DWORD PTR _input$3[ebp], xmm0

; 249  : 					input *= 20.0 * zone_3_scale;

  002d1	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?zone_3_scale@@3MA
  002d9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4034000000000000
  002e1	f3 0f 5a 4d f8	 cvtss2sd xmm1, DWORD PTR _input$3[ebp]
  002e6	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  002ea	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  002ee	f3 0f 11 45 f8	 movss	 DWORD PTR _input$3[ebp], xmm0

; 250  : 					input += (100.0-command_line_collective_percentage_at_zone1);   // 100% -> +40

  002f3	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?command_line_collective_percentage_at_zone1@@3MA
  002fb	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4059000000000000
  00303	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00307	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _input$3[ebp]
  0030c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00310	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00314	f3 0f 11 45 f8	 movss	 DWORD PTR _input$3[ebp], xmm0
$LN17@update_col:

; 251  : 					// original
; 252  : 					//input -= command_line_collective_zone_2_limit;
; 253  : 					//input *= 20.0 * zone_3_scale;
; 254  : 					//input += 40.0;   // 100% -> +40
; 255  : 					// end variable percentage at zone1 by GCsDriver 08-12-2007
; 256  : 				}
; 257  : 			}
; 258  : 			else

  00319	eb 22		 jmp	 SHORT $LN13@update_col
$LN12@update_col:

; 259  : 				input = (float) (120.0 * (float) joyval ) / ((float) JOYSTICK_AXIS_MAXIMUM - (float) JOYSTICK_AXIS_MINIMUM);

  0031b	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _joyval$4[ebp]
  00320	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00324	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@405e000000000000
  0032c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00330	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@469c4000
  00338	f3 0f 11 45 f8	 movss	 DWORD PTR _input$3[ebp], xmm0
$LN13@update_col:

; 260  : 
; 261  : 			if ((current_flight_dynamics->auto_hover != HOVER_HOLD_STABLE) && (current_flight_dynamics->auto_hover != HOVER_HOLD_ALTITUDE_LOCK))

  0033d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00342	8b 88 28 25 00
	00		 mov	 ecx, DWORD PTR [eax+9512]
  00348	c1 e9 07	 shr	 ecx, 7
  0034b	83 e1 07	 and	 ecx, 7
  0034e	83 f9 02	 cmp	 ecx, 2
  00351	74 57		 je	 SHORT $LN20@update_col
  00353	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00358	8b 88 28 25 00
	00		 mov	 ecx, DWORD PTR [eax+9512]
  0035e	c1 e9 07	 shr	 ecx, 7
  00361	83 e1 07	 and	 ecx, 7
  00364	83 f9 03	 cmp	 ecx, 3
  00367	74 41		 je	 SHORT $LN20@update_col

; 262  : 			{
; 263  : 		
; 264  : 				if (get_current_dynamics_options (DYNAMICS_OPTIONS_REVERSE_THROTTLE_INPUT))

  00369	6a 09		 push	 9
  0036b	e8 00 00 00 00	 call	 ?get_current_dynamics_options@@YGHW4DYNAMICS_OPTIONS_TYPES@@@Z ; get_current_dynamics_options
  00370	85 c0		 test	 eax, eax
  00372	74 1c		 je	 SHORT $LN19@update_col

; 265  : 				{
; 266  : 	
; 267  : 					current_flight_dynamics->input_data.collective.value = (float) 60.0 - input;

  00374	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42700000
  0037c	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _input$3[ebp]
  00381	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00386	f3 0f 11 80 a8
	1b 00 00	 movss	 DWORD PTR [eax+7080], xmm0

; 268  : 				}
; 269  : 				else

  0038e	eb 1a		 jmp	 SHORT $LN20@update_col
$LN19@update_col:

; 270  : 				{
; 271  : 	
; 272  : 					current_flight_dynamics->input_data.collective.value = (float) 60.0 + input;

  00390	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42700000
  00398	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _input$3[ebp]
  0039d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  003a2	f3 0f 11 80 a8
	1b 00 00	 movss	 DWORD PTR [eax+7080], xmm0
$LN20@update_col:
$LN2@update_col:

; 273  : 				}
; 274  : 			}
; 275  : 			break;
; 276  : 		}
; 277  : 	}
; 278  : 
; 279  : 	// recalculate collective position
; 280  : 
; 281  : 	if (current_flight_dynamics->input_data.collective_pressure.value)

  003aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  003af	f3 0f 10 80 c0
	1b 00 00	 movss	 xmm0, DWORD PTR [eax+7104]
  003b7	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  003be	9f		 lahf
  003bf	f6 c4 44	 test	 ah, 68			; 00000044H
  003c2	7b 45		 jnp	 SHORT $LN21@update_col

; 282  : 	{
; 283  : 	
; 284  : 		current_flight_dynamics->input_data.collective.value += 10.0 * current_flight_dynamics->input_data.collective_pressure.value * get_delta_time ();

  003c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  003c9	f3 0f 5a 80 c0
	1b 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7104]
  003d1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4024000000000000
  003d9	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?system_delta_time@@3MA
  003e1	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  003e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  003eb	f3 0f 5a 89 a8
	1b 00 00	 cvtss2sd xmm1, DWORD PTR [ecx+7080]
  003f3	f2 0f 58 c8	 addsd	 xmm1, xmm0
  003f7	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  003fb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00401	f3 0f 11 82 a8
	1b 00 00	 movss	 DWORD PTR [edx+7080], xmm0
$LN21@update_col:

; 285  : 	}
; 286  : 	else
; 287  : 	{
; 288  : 
; 289  : 		// restore
; 290  : 	}
; 291  : 
; 292  : 	if (current_flight_dynamics->input_data.collective.damaged)

  00409	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0040e	0f b7 88 b8 1b
	00 00		 movzx	 ecx, WORD PTR [eax+7096]
  00415	85 c9		 test	 ecx, ecx
  00417	0f 84 88 00 00
	00		 je	 $LN23@update_col

; 293  : 	{
; 294  : 
; 295  : 		current_flight_dynamics->input_data.collective.value += (get_model_delta_time ()) * (7.5 * sfrand1 () * current_flight_dynamics->input_data.collective.delta);

  0041d	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00427	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0042c	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00431	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00437	f3 0f 5a 81 ac
	1b 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7084]
  0043f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00445	c1 fa 10	 sar	 edx, 16			; 00000010H
  00448	81 e2 ff 7f 00
	00		 and	 edx, 32767		; 00007fffH
  0044e	81 ea 00 40 00
	00		 sub	 edx, 16384		; 00004000H
  00454	f2 0f 2a ca	 cvtsi2sd xmm1, edx
  00458	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3f10000000000000
  00460	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@401e000000000000
  00468	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  0046c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00471	f3 0f 10 80 90
	00 00 00	 movss	 xmm0, DWORD PTR [eax+144]
  00479	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0047d	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00481	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00487	f3 0f 5a 89 a8
	1b 00 00	 cvtss2sd xmm1, DWORD PTR [ecx+7080]
  0048f	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00493	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00497	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0049d	f3 0f 11 82 a8
	1b 00 00	 movss	 DWORD PTR [edx+7080], xmm0
$LN23@update_col:

; 296  : 	}
; 297  : 
; 298  : 	current_flight_dynamics->input_data.collective.value = bound (current_flight_dynamics->input_data.collective.value,

  004a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  004aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  004b0	f3 0f 10 80 b0
	1b 00 00	 movss	 xmm0, DWORD PTR [eax+7088]
  004b8	0f 2f 81 a8 1b
	00 00		 comiss	 xmm0, DWORD PTR [ecx+7080]
  004bf	76 15		 jbe	 SHORT $LN31@update_col
  004c1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  004c7	f3 0f 10 82 b0
	1b 00 00	 movss	 xmm0, DWORD PTR [edx+7088]
  004cf	f3 0f 11 45 ac	 movss	 DWORD PTR tv327[ebp], xmm0
  004d4	eb 4d		 jmp	 SHORT $LN32@update_col
$LN31@update_col:
  004d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  004db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  004e1	f3 0f 10 80 a8
	1b 00 00	 movss	 xmm0, DWORD PTR [eax+7080]
  004e9	0f 2f 81 b4 1b
	00 00		 comiss	 xmm0, DWORD PTR [ecx+7092]
  004f0	76 15		 jbe	 SHORT $LN29@update_col
  004f2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  004f8	f3 0f 10 82 b4
	1b 00 00	 movss	 xmm0, DWORD PTR [edx+7092]
  00500	f3 0f 11 45 a8	 movss	 DWORD PTR tv326[ebp], xmm0
  00505	eb 12		 jmp	 SHORT $LN30@update_col
$LN29@update_col:
  00507	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0050c	f3 0f 10 80 a8
	1b 00 00	 movss	 xmm0, DWORD PTR [eax+7080]
  00514	f3 0f 11 45 a8	 movss	 DWORD PTR tv326[ebp], xmm0
$LN30@update_col:
  00519	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR tv326[ebp]
  0051e	f3 0f 11 45 ac	 movss	 DWORD PTR tv327[ebp], xmm0
$LN32@update_col:
  00523	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00529	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR tv327[ebp]
  0052e	f3 0f 11 81 a8
	1b 00 00	 movss	 DWORD PTR [ecx+7080], xmm0

; 299  : 																						current_flight_dynamics->input_data.collective.min,
; 300  : 																						current_flight_dynamics->input_data.collective.max);
; 301  : 		
; 302  : 	current_flight_dynamics->input_data.collective.delta -= current_flight_dynamics->input_data.collective.value;

  00536	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0053b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00541	f3 0f 10 80 ac
	1b 00 00	 movss	 xmm0, DWORD PTR [eax+7084]
  00549	f3 0f 5c 81 a8
	1b 00 00	 subss	 xmm0, DWORD PTR [ecx+7080]
  00551	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00557	f3 0f 11 82 ac
	1b 00 00	 movss	 DWORD PTR [edx+7084], xmm0

; 303  : 	current_flight_dynamics->input_data.collective.delta *= -1.0;

  0055f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00564	f3 0f 5a 80 ac
	1b 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7084]
  0056c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff0000000000000
  00574	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00578	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0057e	f3 0f 11 81 ac
	1b 00 00	 movss	 DWORD PTR [ecx+7084], xmm0

; 304  : }

  00586	5f		 pop	 edi
  00587	5e		 pop	 esi
  00588	5b		 pop	 ebx
  00589	8b e5		 mov	 esp, ebp
  0058b	5d		 pop	 ebp
  0058c	c3		 ret	 0
?update_collective_pressure_inputs@@YGXXZ ENDP		; update_collective_pressure_inputs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\collect.c
;	COMDAT ?collective_mouse_input@@YGXPAUEVENT@@@Z
_TEXT	SEGMENT
_ev$ = 8						; size = 4
?collective_mouse_input@@YGXPAUEVENT@@@Z PROC		; collective_mouse_input, COMDAT

; 147  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 148  : 
; 149  : #if 0
; 150  : 
; 151  : 	current_flight_dynamics->input_data.collective_pressure.value -= (ev->dy);
; 152  : 
; 153  : #else
; 154  : 
; 155  : 	current_flight_dynamics->input_data.collective.value -= (ev->dy);

  00009	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0000c	0f bf 48 0e	 movsx	 ecx, WORD PTR [eax+14]
  00010	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00014	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0001a	f3 0f 10 8a a8
	1b 00 00	 movss	 xmm1, DWORD PTR [edx+7080]
  00022	f3 0f 5c c8	 subss	 xmm1, xmm0
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0002b	f3 0f 11 88 a8
	1b 00 00	 movss	 DWORD PTR [eax+7080], xmm1

; 156  : 
; 157  : #endif
; 158  : }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?collective_mouse_input@@YGXPAUEVENT@@@Z ENDP		; collective_mouse_input
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\collect.c
;	COMDAT ?collective_backward@@YGXPAUEVENT@@@Z
_TEXT	SEGMENT
_ev$ = 8						; size = 4
?collective_backward@@YGXPAUEVENT@@@Z PROC		; collective_backward, COMDAT

; 128  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 129  : 
; 130  : 	if (ev->state == KEY_STATE_DOWN)

  00009	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0000c	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00010	83 f9 02	 cmp	 ecx, 2
  00013	75 1c		 jne	 SHORT $LN2@collective

; 131  : 	{
; 132  : 
; 133  : 		current_flight_dynamics->input_data.collective_input_pressure |= COLLECTIVE_PRESSURE_BACKWARD;

  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0001a	8b 88 d4 1b 00
	00		 mov	 ecx, DWORD PTR [eax+7124]
  00020	83 c9 02	 or	 ecx, 2
  00023	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00029	89 8a d4 1b 00
	00		 mov	 DWORD PTR [edx+7124], ecx

; 134  : 	}
; 135  : 	else

  0002f	eb 1a		 jmp	 SHORT $LN1@collective
$LN2@collective:

; 136  : 	{
; 137  : 
; 138  : 		current_flight_dynamics->input_data.collective_input_pressure ^= COLLECTIVE_PRESSURE_BACKWARD;

  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00036	8b 88 d4 1b 00
	00		 mov	 ecx, DWORD PTR [eax+7124]
  0003c	83 f1 02	 xor	 ecx, 2
  0003f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00045	89 8a d4 1b 00
	00		 mov	 DWORD PTR [edx+7124], ecx
$LN1@collective:

; 139  : 	}
; 140  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?collective_backward@@YGXPAUEVENT@@@Z ENDP		; collective_backward
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\collect.c
;	COMDAT ?collective_forward@@YGXPAUEVENT@@@Z
_TEXT	SEGMENT
_ev$ = 8						; size = 4
?collective_forward@@YGXPAUEVENT@@@Z PROC		; collective_forward, COMDAT

; 109  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 110  : 
; 111  : 	if (ev->state == KEY_STATE_DOWN)

  00009	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0000c	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00010	83 f9 02	 cmp	 ecx, 2
  00013	75 1c		 jne	 SHORT $LN2@collective

; 112  : 	{
; 113  : 
; 114  : 		current_flight_dynamics->input_data.collective_input_pressure |= COLLECTIVE_PRESSURE_FORWARD;

  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0001a	8b 88 d4 1b 00
	00		 mov	 ecx, DWORD PTR [eax+7124]
  00020	83 c9 01	 or	 ecx, 1
  00023	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00029	89 8a d4 1b 00
	00		 mov	 DWORD PTR [edx+7124], ecx

; 115  : 	}
; 116  : 	else

  0002f	eb 1a		 jmp	 SHORT $LN1@collective
$LN2@collective:

; 117  : 	{
; 118  : 
; 119  : 		current_flight_dynamics->input_data.collective_input_pressure ^= COLLECTIVE_PRESSURE_FORWARD;

  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00036	8b 88 d4 1b 00
	00		 mov	 ecx, DWORD PTR [eax+7124]
  0003c	83 f1 01	 xor	 ecx, 1
  0003f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00045	89 8a d4 1b 00
	00		 mov	 DWORD PTR [edx+7124], ecx
$LN1@collective:

; 120  : 	}
; 121  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?collective_forward@@YGXPAUEVENT@@@Z ENDP		; collective_forward
_TEXT	ENDS
END
