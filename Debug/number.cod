; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\userint2\ui_obj\number\number.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	?ui_object_number_function@@YGXPAUUI_OBJECT@@PAX@Z ; ui_object_number_function
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp__atoi:PROC
EXTRN	?set_mouse_graphic_on@@YGXXZ:PROC		; set_mouse_graphic_on
EXTRN	?set_mouse_graphic_off@@YGXXZ:PROC		; set_mouse_graphic_off
EXTRN	?set_mouse_x@@YGXH@Z:PROC			; set_mouse_x
EXTRN	?set_mouse_y@@YGXH@Z:PROC			; set_mouse_y
EXTRN	?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z:PROC	; set_event
EXTRN	__ftol2_sse:PROC
EXTRN	?captured_object@@3PAPAUUI_OBJECT@@A:DWORD	; captured_object
EXTRN	?fn_get_ui_object_x@@3PAP6GMPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_x
EXTRN	?fn_get_ui_object_y@@3PAP6GMPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_y
EXTRN	?fn_set_ui_object_text@@3PAP6GXPAUUI_OBJECT@@PBD@ZA:BYTE ; fn_set_ui_object_text
EXTRN	?fn_get_ui_object_text@@3PAP6GPBDPAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_text
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_obj\number\number.c
;	COMDAT ?adjust_number_function@@YGXPAUEVENT@@@Z
_TEXT	SEGMENT
_number$ = -40						; size = 4
_str_number$ = -36					; size = 4
_new_number$ = -32					; size = 32
_ev$ = 8						; size = 4
?adjust_number_function@@YGXPAUEVENT@@@Z PROC		; adjust_number_function, COMDAT

; 109  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 110  : 
; 111  : 	char
; 112  : 		new_number [32];
; 113  : 	const char
; 114  : 		*str_number;
; 115  : 
; 116  : 	int
; 117  : 		number;
; 118  : 
; 119  : 	if (*captured_object)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?captured_object@@3PAPAUUI_OBJECT@@A ; captured_object
  0000e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00011	0f 84 91 00 00
	00		 je	 $LN1@adjust_num

; 120  : 	{
; 121  : 
; 122  : 		str_number = get_ui_object_text (*captured_object);

  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ?captured_object@@3PAPAUUI_OBJECT@@A ; captured_object
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	51		 push	 ecx
  0001f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?captured_object@@3PAPAUUI_OBJECT@@A ; captured_object
  00025	8b 02		 mov	 eax, DWORD PTR [edx]
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_ui_object_text@@3PAP6GPBDPAUUI_OBJECT@@@ZA[ecx*4]
  00030	ff d2		 call	 edx
  00032	89 45 dc	 mov	 DWORD PTR _str_number$[ebp], eax

; 123  : 
; 124  : 		if (str_number)

  00035	83 7d dc 00	 cmp	 DWORD PTR _str_number$[ebp], 0
  00039	74 6d		 je	 SHORT $LN1@adjust_num

; 125  : 		{
; 126  : 
; 127  : 			number = atoi (str_number);

  0003b	8b 45 dc	 mov	 eax, DWORD PTR _str_number$[ebp]
  0003e	50		 push	 eax
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00045	83 c4 04	 add	 esp, 4
  00048	89 45 d8	 mov	 DWORD PTR _number$[ebp], eax

; 128  : 
; 129  : 			number += (ev->dx / 2) * 10;

  0004b	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0004e	0f bf 40 0c	 movsx	 eax, WORD PTR [eax+12]
  00052	99		 cdq
  00053	2b c2		 sub	 eax, edx
  00055	d1 f8		 sar	 eax, 1
  00057	6b c8 0a	 imul	 ecx, eax, 10
  0005a	03 4d d8	 add	 ecx, DWORD PTR _number$[ebp]
  0005d	89 4d d8	 mov	 DWORD PTR _number$[ebp], ecx

; 130  : 
; 131  : 			number -= (ev->dy / 2);

  00060	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00063	0f bf 40 0e	 movsx	 eax, WORD PTR [eax+14]
  00067	99		 cdq
  00068	2b c2		 sub	 eax, edx
  0006a	d1 f8		 sar	 eax, 1
  0006c	8b 4d d8	 mov	 ecx, DWORD PTR _number$[ebp]
  0006f	2b c8		 sub	 ecx, eax
  00071	89 4d d8	 mov	 DWORD PTR _number$[ebp], ecx

; 132  : 
; 133  : 			sprintf (new_number, "%d", number);

  00074	8b 45 d8	 mov	 eax, DWORD PTR _number$[ebp]
  00077	50		 push	 eax
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0007d	8d 4d e0	 lea	 ecx, DWORD PTR _new_number$[ebp]
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 _sprintf
  00086	83 c4 0c	 add	 esp, 12			; 0000000cH

; 134  : 
; 135  : 			set_ui_object_text (*captured_object, new_number);

  00089	8d 45 e0	 lea	 eax, DWORD PTR _new_number$[ebp]
  0008c	50		 push	 eax
  0008d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?captured_object@@3PAPAUUI_OBJECT@@A ; captured_object
  00093	8b 11		 mov	 edx, DWORD PTR [ecx]
  00095	52		 push	 edx
  00096	a1 00 00 00 00	 mov	 eax, DWORD PTR ?captured_object@@3PAPAUUI_OBJECT@@A ; captured_object
  0009b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009f	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_set_ui_object_text@@3PAP6GXPAUUI_OBJECT@@PBD@ZA[edx*4]
  000a6	ff d0		 call	 eax
$LN1@adjust_num:

; 136  : 		}
; 137  : 	}
; 138  : }

  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
?adjust_number_function@@YGXPAUEVENT@@@Z ENDP		; adjust_number_function
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_obj\number\number.c
;	COMDAT ?ui_object_number_function@@YGXPAUUI_OBJECT@@PAX@Z
_TEXT	SEGMENT
_obj$ = 8						; size = 4
_arg$ = 12						; size = 4
?ui_object_number_function@@YGXPAUUI_OBJECT@@PAX@Z PROC	; ui_object_number_function, COMDAT

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 81   : 
; 82   : 	obj;
; 83   : 
; 84   : 	if ((int) arg == BUTTON_STATE_DOWN)

  00009	83 7d 0c 02	 cmp	 DWORD PTR _arg$[ebp], 2
  0000d	75 1a		 jne	 SHORT $LN2@ui_object_

; 85   : 	{
; 86   : 
; 87   : 		set_mouse_graphic_off ();

  0000f	e8 00 00 00 00	 call	 ?set_mouse_graphic_off@@YGXXZ ; set_mouse_graphic_off

; 88   : 		
; 89   : 		set_event (MOUSE_MOVE, MODIFIER_NONE, BUTTON_STATE_EITHER, adjust_number_function);

  00014	68 00 00 00 00	 push	 OFFSET ?adjust_number_function@@YGXPAUEVENT@@@Z ; adjust_number_function
  00019	6a 03		 push	 3
  0001b	6a 00		 push	 0
  0001d	68 02 01 00 00	 push	 258			; 00000102H
  00022	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event

; 90   : 	}
; 91   : 	else

  00027	eb 61		 jmp	 SHORT $LN3@ui_object_
$LN2@ui_object_:

; 92   : 	{
; 93   : 
; 94   : 		set_mouse_x (get_ui_object_x (*captured_object));

  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ?captured_object@@3PAPAUUI_OBJECT@@A ; captured_object
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	51		 push	 ecx
  00031	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?captured_object@@3PAPAUUI_OBJECT@@A ; captured_object
  00037	8b 02		 mov	 eax, DWORD PTR [edx]
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_ui_object_x@@3PAP6GMPAUUI_OBJECT@@@ZA[ecx*4]
  00042	ff d2		 call	 edx
  00044	e8 00 00 00 00	 call	 __ftol2_sse
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?set_mouse_x@@YGXH@Z	; set_mouse_x

; 95   : 
; 96   : 		set_mouse_y (get_ui_object_y (*captured_object));

  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?captured_object@@3PAPAUUI_OBJECT@@A ; captured_object
  00054	8b 08		 mov	 ecx, DWORD PTR [eax]
  00056	51		 push	 ecx
  00057	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?captured_object@@3PAPAUUI_OBJECT@@A ; captured_object
  0005d	8b 02		 mov	 eax, DWORD PTR [edx]
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_ui_object_y@@3PAP6GMPAUUI_OBJECT@@@ZA[ecx*4]
  00068	ff d2		 call	 edx
  0006a	e8 00 00 00 00	 call	 __ftol2_sse
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?set_mouse_y@@YGXH@Z	; set_mouse_y

; 97   : 
; 98   : 		set_mouse_graphic_on ();

  00075	e8 00 00 00 00	 call	 ?set_mouse_graphic_on@@YGXXZ ; set_mouse_graphic_on

; 99   : 
; 100  : 		set_event (MOUSE_MOVE, MODIFIER_NONE, BUTTON_STATE_EITHER, NULL);

  0007a	6a 00		 push	 0
  0007c	6a 03		 push	 3
  0007e	6a 00		 push	 0
  00080	68 02 01 00 00	 push	 258			; 00000102H
  00085	e8 00 00 00 00	 call	 ?set_event@@YGXHHHP6GXPAUEVENT@@@Z@Z ; set_event
$LN3@ui_object_:

; 101  : 	}
; 102  : }

  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 08 00	 ret	 8
?ui_object_number_function@@YGXPAUUI_OBJECT@@PAX@Z ENDP	; ui_object_number_function
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
