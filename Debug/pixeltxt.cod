; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\graphics\pixeltxt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?set_texture_pixel_lookup_table@@3PAGA		; set_texture_pixel_lookup_table
PUBLIC	?set_texture_pixel_32bit_lookup_table@@3PAIA	; set_texture_pixel_32bit_lookup_table
PUBLIC	?texture_colour_red_mask@@3HA			; texture_colour_red_mask
PUBLIC	?texture_colour_green_mask@@3HA			; texture_colour_green_mask
PUBLIC	?texture_colour_blue_mask@@3HA			; texture_colour_blue_mask
PUBLIC	?texture_colour_red_shift@@3HA			; texture_colour_red_shift
PUBLIC	?texture_colour_green_shift@@3HA		; texture_colour_green_shift
PUBLIC	?texture_colour_blue_shift@@3HA			; texture_colour_blue_shift
PUBLIC	?texture_colour_nopalette_red_mask@@3HA		; texture_colour_nopalette_red_mask
PUBLIC	?texture_colour_nopalette_green_mask@@3HA	; texture_colour_nopalette_green_mask
PUBLIC	?texture_colour_nopalette_blue_mask@@3HA	; texture_colour_nopalette_blue_mask
PUBLIC	?texture_colour_nopalette_red_shift@@3HA	; texture_colour_nopalette_red_shift
PUBLIC	?texture_colour_nopalette_green_shift@@3HA	; texture_colour_nopalette_green_shift
PUBLIC	?texture_colour_nopalette_blue_shift@@3HA	; texture_colour_nopalette_blue_shift
PUBLIC	?texture_single_alpha_red_mask@@3HA		; texture_single_alpha_red_mask
PUBLIC	?texture_single_alpha_green_mask@@3HA		; texture_single_alpha_green_mask
PUBLIC	?texture_single_alpha_blue_mask@@3HA		; texture_single_alpha_blue_mask
PUBLIC	?texture_single_alpha_alpha_mask@@3HA		; texture_single_alpha_alpha_mask
PUBLIC	?texture_single_alpha_red_shift@@3HA		; texture_single_alpha_red_shift
PUBLIC	?texture_single_alpha_green_shift@@3HA		; texture_single_alpha_green_shift
PUBLIC	?texture_single_alpha_blue_shift@@3HA		; texture_single_alpha_blue_shift
PUBLIC	?texture_single_alpha_alpha_shift@@3HA		; texture_single_alpha_alpha_shift
PUBLIC	?texture_multiple_alpha_red_mask@@3HA		; texture_multiple_alpha_red_mask
PUBLIC	?texture_multiple_alpha_green_mask@@3HA		; texture_multiple_alpha_green_mask
PUBLIC	?texture_multiple_alpha_blue_mask@@3HA		; texture_multiple_alpha_blue_mask
PUBLIC	?texture_multiple_alpha_alpha_mask@@3HA		; texture_multiple_alpha_alpha_mask
PUBLIC	?texture_multiple_alpha_red_shift@@3HA		; texture_multiple_alpha_red_shift
PUBLIC	?texture_multiple_alpha_green_shift@@3HA	; texture_multiple_alpha_green_shift
PUBLIC	?texture_multiple_alpha_blue_shift@@3HA		; texture_multiple_alpha_blue_shift
PUBLIC	?texture_multiple_alpha_alpha_shift@@3HA	; texture_multiple_alpha_alpha_shift
PUBLIC	?colour_texture_pixel_width@@3HA		; colour_texture_pixel_width
PUBLIC	?colour_nopalette_texture_pixel_width@@3HA	; colour_nopalette_texture_pixel_width
PUBLIC	?single_alpha_texture_pixel_width@@3HA		; single_alpha_texture_pixel_width
PUBLIC	?multiple_alpha_texture_pixel_width@@3HA	; multiple_alpha_texture_pixel_width
_BSS	SEGMENT
?set_texture_pixel_lookup_table@@3PAGA DW 0100H DUP (?)	; set_texture_pixel_lookup_table
?set_texture_pixel_32bit_lookup_table@@3PAIA DD 0100H DUP (?) ; set_texture_pixel_32bit_lookup_table
?texture_colour_red_mask@@3HA DD 01H DUP (?)		; texture_colour_red_mask
?texture_colour_green_mask@@3HA DD 01H DUP (?)		; texture_colour_green_mask
?texture_colour_blue_mask@@3HA DD 01H DUP (?)		; texture_colour_blue_mask
?texture_colour_red_shift@@3HA DD 01H DUP (?)		; texture_colour_red_shift
?texture_colour_green_shift@@3HA DD 01H DUP (?)		; texture_colour_green_shift
?texture_colour_blue_shift@@3HA DD 01H DUP (?)		; texture_colour_blue_shift
?texture_colour_nopalette_red_mask@@3HA DD 01H DUP (?)	; texture_colour_nopalette_red_mask
?texture_colour_nopalette_green_mask@@3HA DD 01H DUP (?) ; texture_colour_nopalette_green_mask
?texture_colour_nopalette_blue_mask@@3HA DD 01H DUP (?)	; texture_colour_nopalette_blue_mask
?texture_colour_nopalette_red_shift@@3HA DD 01H DUP (?)	; texture_colour_nopalette_red_shift
?texture_colour_nopalette_green_shift@@3HA DD 01H DUP (?) ; texture_colour_nopalette_green_shift
?texture_colour_nopalette_blue_shift@@3HA DD 01H DUP (?) ; texture_colour_nopalette_blue_shift
?texture_single_alpha_red_mask@@3HA DD 01H DUP (?)	; texture_single_alpha_red_mask
?texture_single_alpha_green_mask@@3HA DD 01H DUP (?)	; texture_single_alpha_green_mask
?texture_single_alpha_blue_mask@@3HA DD 01H DUP (?)	; texture_single_alpha_blue_mask
?texture_single_alpha_alpha_mask@@3HA DD 01H DUP (?)	; texture_single_alpha_alpha_mask
?texture_single_alpha_red_shift@@3HA DD 01H DUP (?)	; texture_single_alpha_red_shift
?texture_single_alpha_green_shift@@3HA DD 01H DUP (?)	; texture_single_alpha_green_shift
?texture_single_alpha_blue_shift@@3HA DD 01H DUP (?)	; texture_single_alpha_blue_shift
?texture_single_alpha_alpha_shift@@3HA DD 01H DUP (?)	; texture_single_alpha_alpha_shift
?texture_multiple_alpha_red_mask@@3HA DD 01H DUP (?)	; texture_multiple_alpha_red_mask
?texture_multiple_alpha_green_mask@@3HA DD 01H DUP (?)	; texture_multiple_alpha_green_mask
?texture_multiple_alpha_blue_mask@@3HA DD 01H DUP (?)	; texture_multiple_alpha_blue_mask
?texture_multiple_alpha_alpha_mask@@3HA DD 01H DUP (?)	; texture_multiple_alpha_alpha_mask
?texture_multiple_alpha_red_shift@@3HA DD 01H DUP (?)	; texture_multiple_alpha_red_shift
?texture_multiple_alpha_green_shift@@3HA DD 01H DUP (?)	; texture_multiple_alpha_green_shift
?texture_multiple_alpha_blue_shift@@3HA DD 01H DUP (?)	; texture_multiple_alpha_blue_shift
?texture_multiple_alpha_alpha_shift@@3HA DD 01H DUP (?)	; texture_multiple_alpha_alpha_shift
?colour_texture_pixel_width@@3HA DD 01H DUP (?)		; colour_texture_pixel_width
?colour_nopalette_texture_pixel_width@@3HA DD 01H DUP (?) ; colour_nopalette_texture_pixel_width
?single_alpha_texture_pixel_width@@3HA DD 01H DUP (?)	; single_alpha_texture_pixel_width
?multiple_alpha_texture_pixel_width@@3HA DD 01H DUP (?)	; multiple_alpha_texture_pixel_width
_BSS	ENDS
PUBLIC	?initialise_set_texture_pixel_lookup_table@@YGXPAUSCREEN@@@Z ; initialise_set_texture_pixel_lookup_table
PUBLIC	?set_texture_pixel@@YGXPAUSCREEN@@HHII@Z	; set_texture_pixel
PUBLIC	?set_texture_pixel_formats@@YGXXZ		; set_texture_pixel_formats
PUBLIC	?__LINE__Var@?0??set_texture_pixel@@YGXPAUSCREEN@@HHII@Z@4JA ; `set_texture_pixel'::`1'::__LINE__Var
PUBLIC	??_C@_0DJ@PBLNOCGM@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_07JDHEGGGP@texture@			; `string'
PUBLIC	?__LINE__Var@?0??get_colour_texture_packed_value@@YGGUREAL_COLOUR@@@Z@4JA ; `get_colour_texture_packed_value'::`1'::__LINE__Var
PUBLIC	??_C@_0CB@MHDGDDEI@colour_texture_pixel_width?5?$DN?$DN?51@ ; `string'
PUBLIC	?__LINE__Var@?0??get_colour_texture_32bit_value@@YGIUREAL_COLOUR@@@Z@4JA ; `get_colour_texture_32bit_value'::`1'::__LINE__Var
PUBLIC	??_C@_0CB@KANOCCCC@colour_texture_pixel_width?5?$DN?$DN?53@ ; `string'
PUBLIC	?__LINE__Var@?0??get_single_alpha_texture_packed_value@@YGGUREAL_COLOUR@@@Z@4JA ; `get_single_alpha_texture_packed_value'::`1'::__LINE__Var
PUBLIC	??_C@_0CH@MKCPJGPI@single_alpha_texture_pixel_widt@ ; `string'
PUBLIC	?__LINE__Var@?0??get_single_alpha_texture_32bit_value@@YGIUREAL_COLOUR@@@Z@4JA ; `get_single_alpha_texture_32bit_value'::`1'::__LINE__Var
PUBLIC	??_C@_0CH@KNMHIHJC@single_alpha_texture_pixel_widt@ ; `string'
PUBLIC	?__LINE__Var@?0??get_multiple_alpha_texture_packed_value@@YGGUREAL_COLOUR@@@Z@4JA ; `get_multiple_alpha_texture_packed_value'::`1'::__LINE__Var
PUBLIC	??_C@_0CJ@GLLMALFC@multiple_alpha_texture_pixel_wi@ ; `string'
PUBLIC	?__LINE__Var@?0??get_multiple_alpha_texture_32bit_value@@YGIUREAL_COLOUR@@@Z@4JA ; `get_multiple_alpha_texture_32bit_value'::`1'::__LINE__Var
PUBLIC	??_C@_0CJ@MFEBKDI@multiple_alpha_texture_pixel_wi@ ; `string'
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?get_screen_data@@YGPAEPAUSCREEN@@@Z:PROC	; get_screen_data
EXTRN	?get_screen_pitch@@YGHPAUSCREEN@@@Z:PROC	; get_screen_pitch
EXTRN	?texture_formats@@3PAUTEXTURE_FORMAT@@A:BYTE	; texture_formats
_BSS	SEGMENT
?set_texture_pixel_lookup_texture@@3PAUSCREEN@@A DD 01H DUP (?) ; set_texture_pixel_lookup_texture
_BSS	ENDS
;	COMDAT ??_C@_0CJ@MFEBKDI@multiple_alpha_texture_pixel_wi@
CONST	SEGMENT
??_C@_0CJ@MFEBKDI@multiple_alpha_texture_pixel_wi@ DB 'multiple_alpha_tex'
	DB	'ture_pixel_width == 32', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_multiple_alpha_texture_32bit_value@@YGIUREAL_COLOUR@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_multiple_alpha_texture_32bit_value@@YGIUREAL_COLOUR@@@Z@4JA DD 026aH ; `get_multiple_alpha_texture_32bit_value'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CJ@GLLMALFC@multiple_alpha_texture_pixel_wi@
CONST	SEGMENT
??_C@_0CJ@GLLMALFC@multiple_alpha_texture_pixel_wi@ DB 'multiple_alpha_te'
	DB	'xture_pixel_width == 16', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_multiple_alpha_texture_packed_value@@YGGUREAL_COLOUR@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_multiple_alpha_texture_packed_value@@YGGUREAL_COLOUR@@@Z@4JA DD 024dH ; `get_multiple_alpha_texture_packed_value'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CH@KNMHIHJC@single_alpha_texture_pixel_widt@
CONST	SEGMENT
??_C@_0CH@KNMHIHJC@single_alpha_texture_pixel_widt@ DB 'single_alpha_text'
	DB	'ure_pixel_width == 32', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_single_alpha_texture_32bit_value@@YGIUREAL_COLOUR@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_single_alpha_texture_32bit_value@@YGIUREAL_COLOUR@@@Z@4JA DD 0230H ; `get_single_alpha_texture_32bit_value'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CH@MKCPJGPI@single_alpha_texture_pixel_widt@
CONST	SEGMENT
??_C@_0CH@MKCPJGPI@single_alpha_texture_pixel_widt@ DB 'single_alpha_text'
	DB	'ure_pixel_width == 16', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_single_alpha_texture_packed_value@@YGGUREAL_COLOUR@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_single_alpha_texture_packed_value@@YGGUREAL_COLOUR@@@Z@4JA DD 0213H ; `get_single_alpha_texture_packed_value'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CB@KANOCCCC@colour_texture_pixel_width?5?$DN?$DN?53@
CONST	SEGMENT
??_C@_0CB@KANOCCCC@colour_texture_pixel_width?5?$DN?$DN?53@ DB 'colour_te'
	DB	'xture_pixel_width == 32', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_colour_texture_32bit_value@@YGIUREAL_COLOUR@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_colour_texture_32bit_value@@YGIUREAL_COLOUR@@@Z@4JA DD 01f6H ; `get_colour_texture_32bit_value'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CB@MHDGDDEI@colour_texture_pixel_width?5?$DN?$DN?51@
CONST	SEGMENT
??_C@_0CB@MHDGDDEI@colour_texture_pixel_width?5?$DN?$DN?51@ DB 'colour_te'
	DB	'xture_pixel_width == 16', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_colour_texture_packed_value@@YGGUREAL_COLOUR@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_colour_texture_packed_value@@YGGUREAL_COLOUR@@@Z@4JA DD 01d9H ; `get_colour_texture_packed_value'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_07JDHEGGGP@texture@
CONST	SEGMENT
??_C@_07JDHEGGGP@texture@ DB 'texture', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@PBLNOCGM@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DJ@PBLNOCGM@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\graphics\pixeltxt.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??set_texture_pixel@@YGXPAUSCREEN@@HHII@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_texture_pixel@@YGXPAUSCREEN@@HHII@Z@4JA DD 093H ; `set_texture_pixel'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\pixeltxt.c
;	COMDAT ?get_multiple_alpha_texture_32bit_value@@YGIUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_blue$ = -12						; size = 4
_green$ = -8						; size = 4
_red$ = -4						; size = 4
_colour$ = 8						; size = 4
?get_multiple_alpha_texture_32bit_value@@YGIUREAL_COLOUR@@@Z PROC ; get_multiple_alpha_texture_32bit_value, COMDAT

; 618  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 619  : 
; 620  : 	unsigned int
; 621  : 		red,
; 622  : 		green,
; 623  : 		blue;
; 624  : 
; 625  : 	ASSERT ( multiple_alpha_texture_pixel_width == 32 );

  00009	83 3d 00 00 00
	00 20		 cmp	 DWORD PTR ?multiple_alpha_texture_pixel_width@@3HA, 32 ; multiple_alpha_texture_pixel_width, 00000020H
  00010	74 18		 je	 SHORT $LN2@get_multip
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_multiple_alpha_texture_32bit_value@@YGIUREAL_COLOUR@@@Z@4JA
  00017	83 c0 07	 add	 eax, 7
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@PBLNOCGM@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@MFEBKDI@multiple_alpha_texture_pixel_wi@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_multip:

; 626  : 
; 627  : 	red = ( ( unsigned int ) colour.r ) << 24;

  0002a	0f b6 45 0a	 movzx	 eax, BYTE PTR _colour$[ebp+2]
  0002e	c1 e0 18	 shl	 eax, 24			; 00000018H
  00031	89 45 fc	 mov	 DWORD PTR _red$[ebp], eax

; 628  : 	green = ( ( unsigned int ) colour.g ) << 24;

  00034	0f b6 45 09	 movzx	 eax, BYTE PTR _colour$[ebp+1]
  00038	c1 e0 18	 shl	 eax, 24			; 00000018H
  0003b	89 45 f8	 mov	 DWORD PTR _green$[ebp], eax

; 629  : 	blue = ( ( unsigned int ) colour.b ) << 24;

  0003e	0f b6 45 08	 movzx	 eax, BYTE PTR _colour$[ebp]
  00042	c1 e0 18	 shl	 eax, 24			; 00000018H
  00045	89 45 f4	 mov	 DWORD PTR _blue$[ebp], eax

; 630  : 
; 631  : 	red &= texture_multiple_alpha_red_mask;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _red$[ebp]
  0004b	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_multiple_alpha_red_mask@@3HA ; texture_multiple_alpha_red_mask
  00051	89 45 fc	 mov	 DWORD PTR _red$[ebp], eax

; 632  : 	green &= texture_multiple_alpha_green_mask;

  00054	8b 45 f8	 mov	 eax, DWORD PTR _green$[ebp]
  00057	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_multiple_alpha_green_mask@@3HA ; texture_multiple_alpha_green_mask
  0005d	89 45 f8	 mov	 DWORD PTR _green$[ebp], eax

; 633  : 	blue &= texture_multiple_alpha_blue_mask;

  00060	8b 45 f4	 mov	 eax, DWORD PTR _blue$[ebp]
  00063	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_multiple_alpha_blue_mask@@3HA ; texture_multiple_alpha_blue_mask
  00069	89 45 f4	 mov	 DWORD PTR _blue$[ebp], eax

; 634  : 
; 635  : 	red >>= texture_multiple_alpha_red_shift;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _red$[ebp]
  0006f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_multiple_alpha_red_shift@@3HA ; texture_multiple_alpha_red_shift
  00075	d3 e8		 shr	 eax, cl
  00077	89 45 fc	 mov	 DWORD PTR _red$[ebp], eax

; 636  : 	green >>= texture_multiple_alpha_green_shift;

  0007a	8b 45 f8	 mov	 eax, DWORD PTR _green$[ebp]
  0007d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_multiple_alpha_green_shift@@3HA ; texture_multiple_alpha_green_shift
  00083	d3 e8		 shr	 eax, cl
  00085	89 45 f8	 mov	 DWORD PTR _green$[ebp], eax

; 637  : 	blue >>= texture_multiple_alpha_blue_shift;

  00088	8b 45 f4	 mov	 eax, DWORD PTR _blue$[ebp]
  0008b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_multiple_alpha_blue_shift@@3HA ; texture_multiple_alpha_blue_shift
  00091	d3 e8		 shr	 eax, cl
  00093	89 45 f4	 mov	 DWORD PTR _blue$[ebp], eax

; 638  : 
; 639  : 	return ( red | green | blue );

  00096	8b 45 fc	 mov	 eax, DWORD PTR _red$[ebp]
  00099	0b 45 f8	 or	 eax, DWORD PTR _green$[ebp]
  0009c	0b 45 f4	 or	 eax, DWORD PTR _blue$[ebp]

; 640  : }

  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
?get_multiple_alpha_texture_32bit_value@@YGIUREAL_COLOUR@@@Z ENDP ; get_multiple_alpha_texture_32bit_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\pixeltxt.c
;	COMDAT ?get_multiple_alpha_texture_packed_value@@YGGUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_blue$ = -12						; size = 4
_green$ = -8						; size = 4
_red$ = -4						; size = 4
_colour$ = 8						; size = 4
?get_multiple_alpha_texture_packed_value@@YGGUREAL_COLOUR@@@Z PROC ; get_multiple_alpha_texture_packed_value, COMDAT

; 589  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 590  : 
; 591  : 	unsigned int
; 592  : 		red,
; 593  : 		green,
; 594  : 		blue;
; 595  : 
; 596  : 	ASSERT ( multiple_alpha_texture_pixel_width == 16 );

  00009	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?multiple_alpha_texture_pixel_width@@3HA, 16 ; multiple_alpha_texture_pixel_width, 00000010H
  00010	74 18		 je	 SHORT $LN2@get_multip
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_multiple_alpha_texture_packed_value@@YGGUREAL_COLOUR@@@Z@4JA
  00017	83 c0 07	 add	 eax, 7
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@PBLNOCGM@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@GLLMALFC@multiple_alpha_texture_pixel_wi@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_multip:

; 597  : 
; 598  : 	red = ( ( unsigned int ) colour.r ) << 24;

  0002a	0f b6 45 0a	 movzx	 eax, BYTE PTR _colour$[ebp+2]
  0002e	c1 e0 18	 shl	 eax, 24			; 00000018H
  00031	89 45 fc	 mov	 DWORD PTR _red$[ebp], eax

; 599  : 	green = ( ( unsigned int ) colour.g ) << 24;

  00034	0f b6 45 09	 movzx	 eax, BYTE PTR _colour$[ebp+1]
  00038	c1 e0 18	 shl	 eax, 24			; 00000018H
  0003b	89 45 f8	 mov	 DWORD PTR _green$[ebp], eax

; 600  : 	blue = ( ( unsigned int ) colour.b ) << 24;

  0003e	0f b6 45 08	 movzx	 eax, BYTE PTR _colour$[ebp]
  00042	c1 e0 18	 shl	 eax, 24			; 00000018H
  00045	89 45 f4	 mov	 DWORD PTR _blue$[ebp], eax

; 601  : 
; 602  : 	red &= texture_multiple_alpha_red_mask;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _red$[ebp]
  0004b	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_multiple_alpha_red_mask@@3HA ; texture_multiple_alpha_red_mask
  00051	89 45 fc	 mov	 DWORD PTR _red$[ebp], eax

; 603  : 	green &= texture_multiple_alpha_green_mask;

  00054	8b 45 f8	 mov	 eax, DWORD PTR _green$[ebp]
  00057	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_multiple_alpha_green_mask@@3HA ; texture_multiple_alpha_green_mask
  0005d	89 45 f8	 mov	 DWORD PTR _green$[ebp], eax

; 604  : 	blue &= texture_multiple_alpha_blue_mask;

  00060	8b 45 f4	 mov	 eax, DWORD PTR _blue$[ebp]
  00063	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_multiple_alpha_blue_mask@@3HA ; texture_multiple_alpha_blue_mask
  00069	89 45 f4	 mov	 DWORD PTR _blue$[ebp], eax

; 605  : 
; 606  : 	red >>= texture_multiple_alpha_red_shift;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _red$[ebp]
  0006f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_multiple_alpha_red_shift@@3HA ; texture_multiple_alpha_red_shift
  00075	d3 e8		 shr	 eax, cl
  00077	89 45 fc	 mov	 DWORD PTR _red$[ebp], eax

; 607  : 	green >>= texture_multiple_alpha_green_shift;

  0007a	8b 45 f8	 mov	 eax, DWORD PTR _green$[ebp]
  0007d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_multiple_alpha_green_shift@@3HA ; texture_multiple_alpha_green_shift
  00083	d3 e8		 shr	 eax, cl
  00085	89 45 f8	 mov	 DWORD PTR _green$[ebp], eax

; 608  : 	blue >>= texture_multiple_alpha_blue_shift;

  00088	8b 45 f4	 mov	 eax, DWORD PTR _blue$[ebp]
  0008b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_multiple_alpha_blue_shift@@3HA ; texture_multiple_alpha_blue_shift
  00091	d3 e8		 shr	 eax, cl
  00093	89 45 f4	 mov	 DWORD PTR _blue$[ebp], eax

; 609  : 
; 610  : 	return ( red | green | blue );

  00096	8b 45 fc	 mov	 eax, DWORD PTR _red$[ebp]
  00099	0b 45 f8	 or	 eax, DWORD PTR _green$[ebp]
  0009c	0b 45 f4	 or	 eax, DWORD PTR _blue$[ebp]

; 611  : }

  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
?get_multiple_alpha_texture_packed_value@@YGGUREAL_COLOUR@@@Z ENDP ; get_multiple_alpha_texture_packed_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\pixeltxt.c
;	COMDAT ?get_single_alpha_texture_32bit_value@@YGIUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_blue$ = -12						; size = 4
_green$ = -8						; size = 4
_red$ = -4						; size = 4
_colour$ = 8						; size = 4
?get_single_alpha_texture_32bit_value@@YGIUREAL_COLOUR@@@Z PROC ; get_single_alpha_texture_32bit_value, COMDAT

; 560  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 561  : 
; 562  : 	unsigned int
; 563  : 		red,
; 564  : 		green,
; 565  : 		blue;
; 566  : 
; 567  : 	ASSERT ( single_alpha_texture_pixel_width == 32 );

  00009	83 3d 00 00 00
	00 20		 cmp	 DWORD PTR ?single_alpha_texture_pixel_width@@3HA, 32 ; single_alpha_texture_pixel_width, 00000020H
  00010	74 18		 je	 SHORT $LN2@get_single
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_single_alpha_texture_32bit_value@@YGIUREAL_COLOUR@@@Z@4JA
  00017	83 c0 07	 add	 eax, 7
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@PBLNOCGM@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@KNMHIHJC@single_alpha_texture_pixel_widt@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_single:

; 568  : 
; 569  : 	red = ( ( unsigned int ) colour.r ) << 24;

  0002a	0f b6 45 0a	 movzx	 eax, BYTE PTR _colour$[ebp+2]
  0002e	c1 e0 18	 shl	 eax, 24			; 00000018H
  00031	89 45 fc	 mov	 DWORD PTR _red$[ebp], eax

; 570  : 	green = ( ( unsigned int ) colour.g ) << 24;

  00034	0f b6 45 09	 movzx	 eax, BYTE PTR _colour$[ebp+1]
  00038	c1 e0 18	 shl	 eax, 24			; 00000018H
  0003b	89 45 f8	 mov	 DWORD PTR _green$[ebp], eax

; 571  : 	blue = ( ( unsigned int ) colour.b ) << 24;

  0003e	0f b6 45 08	 movzx	 eax, BYTE PTR _colour$[ebp]
  00042	c1 e0 18	 shl	 eax, 24			; 00000018H
  00045	89 45 f4	 mov	 DWORD PTR _blue$[ebp], eax

; 572  : 
; 573  : 	red &= texture_single_alpha_red_mask;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _red$[ebp]
  0004b	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_single_alpha_red_mask@@3HA ; texture_single_alpha_red_mask
  00051	89 45 fc	 mov	 DWORD PTR _red$[ebp], eax

; 574  : 	green &= texture_single_alpha_green_mask;

  00054	8b 45 f8	 mov	 eax, DWORD PTR _green$[ebp]
  00057	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_single_alpha_green_mask@@3HA ; texture_single_alpha_green_mask
  0005d	89 45 f8	 mov	 DWORD PTR _green$[ebp], eax

; 575  : 	blue &= texture_single_alpha_blue_mask;

  00060	8b 45 f4	 mov	 eax, DWORD PTR _blue$[ebp]
  00063	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_single_alpha_blue_mask@@3HA ; texture_single_alpha_blue_mask
  00069	89 45 f4	 mov	 DWORD PTR _blue$[ebp], eax

; 576  : 
; 577  : 	red >>= texture_single_alpha_red_shift;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _red$[ebp]
  0006f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_single_alpha_red_shift@@3HA ; texture_single_alpha_red_shift
  00075	d3 e8		 shr	 eax, cl
  00077	89 45 fc	 mov	 DWORD PTR _red$[ebp], eax

; 578  : 	green >>= texture_single_alpha_green_shift;

  0007a	8b 45 f8	 mov	 eax, DWORD PTR _green$[ebp]
  0007d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_single_alpha_green_shift@@3HA ; texture_single_alpha_green_shift
  00083	d3 e8		 shr	 eax, cl
  00085	89 45 f8	 mov	 DWORD PTR _green$[ebp], eax

; 579  : 	blue >>= texture_single_alpha_blue_shift;

  00088	8b 45 f4	 mov	 eax, DWORD PTR _blue$[ebp]
  0008b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_single_alpha_blue_shift@@3HA ; texture_single_alpha_blue_shift
  00091	d3 e8		 shr	 eax, cl
  00093	89 45 f4	 mov	 DWORD PTR _blue$[ebp], eax

; 580  : 
; 581  : 	return ( red | green | blue );

  00096	8b 45 fc	 mov	 eax, DWORD PTR _red$[ebp]
  00099	0b 45 f8	 or	 eax, DWORD PTR _green$[ebp]
  0009c	0b 45 f4	 or	 eax, DWORD PTR _blue$[ebp]

; 582  : }

  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
?get_single_alpha_texture_32bit_value@@YGIUREAL_COLOUR@@@Z ENDP ; get_single_alpha_texture_32bit_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\pixeltxt.c
;	COMDAT ?get_single_alpha_texture_packed_value@@YGGUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_blue$ = -12						; size = 4
_green$ = -8						; size = 4
_red$ = -4						; size = 4
_colour$ = 8						; size = 4
?get_single_alpha_texture_packed_value@@YGGUREAL_COLOUR@@@Z PROC ; get_single_alpha_texture_packed_value, COMDAT

; 531  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 532  : 
; 533  : 	unsigned int
; 534  : 		red,
; 535  : 		green,
; 536  : 		blue;
; 537  : 
; 538  : 	ASSERT ( single_alpha_texture_pixel_width == 16 );

  00009	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?single_alpha_texture_pixel_width@@3HA, 16 ; single_alpha_texture_pixel_width, 00000010H
  00010	74 18		 je	 SHORT $LN2@get_single
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_single_alpha_texture_packed_value@@YGGUREAL_COLOUR@@@Z@4JA
  00017	83 c0 07	 add	 eax, 7
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@PBLNOCGM@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MKCPJGPI@single_alpha_texture_pixel_widt@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_single:

; 539  : 
; 540  : 	red = ( ( unsigned int ) colour.r ) << 24;

  0002a	0f b6 45 0a	 movzx	 eax, BYTE PTR _colour$[ebp+2]
  0002e	c1 e0 18	 shl	 eax, 24			; 00000018H
  00031	89 45 fc	 mov	 DWORD PTR _red$[ebp], eax

; 541  : 	green = ( ( unsigned int ) colour.g ) << 24;

  00034	0f b6 45 09	 movzx	 eax, BYTE PTR _colour$[ebp+1]
  00038	c1 e0 18	 shl	 eax, 24			; 00000018H
  0003b	89 45 f8	 mov	 DWORD PTR _green$[ebp], eax

; 542  : 	blue = ( ( unsigned int ) colour.b ) << 24;

  0003e	0f b6 45 08	 movzx	 eax, BYTE PTR _colour$[ebp]
  00042	c1 e0 18	 shl	 eax, 24			; 00000018H
  00045	89 45 f4	 mov	 DWORD PTR _blue$[ebp], eax

; 543  : 
; 544  : 	red &= texture_single_alpha_red_mask;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _red$[ebp]
  0004b	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_single_alpha_red_mask@@3HA ; texture_single_alpha_red_mask
  00051	89 45 fc	 mov	 DWORD PTR _red$[ebp], eax

; 545  : 	green &= texture_single_alpha_green_mask;

  00054	8b 45 f8	 mov	 eax, DWORD PTR _green$[ebp]
  00057	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_single_alpha_green_mask@@3HA ; texture_single_alpha_green_mask
  0005d	89 45 f8	 mov	 DWORD PTR _green$[ebp], eax

; 546  : 	blue &= texture_single_alpha_blue_mask;

  00060	8b 45 f4	 mov	 eax, DWORD PTR _blue$[ebp]
  00063	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_single_alpha_blue_mask@@3HA ; texture_single_alpha_blue_mask
  00069	89 45 f4	 mov	 DWORD PTR _blue$[ebp], eax

; 547  : 
; 548  : 	red >>= texture_single_alpha_red_shift;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _red$[ebp]
  0006f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_single_alpha_red_shift@@3HA ; texture_single_alpha_red_shift
  00075	d3 e8		 shr	 eax, cl
  00077	89 45 fc	 mov	 DWORD PTR _red$[ebp], eax

; 549  : 	green >>= texture_single_alpha_green_shift;

  0007a	8b 45 f8	 mov	 eax, DWORD PTR _green$[ebp]
  0007d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_single_alpha_green_shift@@3HA ; texture_single_alpha_green_shift
  00083	d3 e8		 shr	 eax, cl
  00085	89 45 f8	 mov	 DWORD PTR _green$[ebp], eax

; 550  : 	blue >>= texture_single_alpha_blue_shift;

  00088	8b 45 f4	 mov	 eax, DWORD PTR _blue$[ebp]
  0008b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_single_alpha_blue_shift@@3HA ; texture_single_alpha_blue_shift
  00091	d3 e8		 shr	 eax, cl
  00093	89 45 f4	 mov	 DWORD PTR _blue$[ebp], eax

; 551  : 
; 552  : 	return ( red | green | blue );

  00096	8b 45 fc	 mov	 eax, DWORD PTR _red$[ebp]
  00099	0b 45 f8	 or	 eax, DWORD PTR _green$[ebp]
  0009c	0b 45 f4	 or	 eax, DWORD PTR _blue$[ebp]

; 553  : }

  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
?get_single_alpha_texture_packed_value@@YGGUREAL_COLOUR@@@Z ENDP ; get_single_alpha_texture_packed_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\pixeltxt.c
;	COMDAT ?get_colour_texture_32bit_value@@YGIUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_blue$ = -12						; size = 4
_green$ = -8						; size = 4
_red$ = -4						; size = 4
_colour$ = 8						; size = 4
?get_colour_texture_32bit_value@@YGIUREAL_COLOUR@@@Z PROC ; get_colour_texture_32bit_value, COMDAT

; 502  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 503  : 
; 504  : 	unsigned int
; 505  : 		red,
; 506  : 		green,
; 507  : 		blue;
; 508  : 
; 509  : 	ASSERT ( colour_texture_pixel_width == 32 );

  00009	83 3d 00 00 00
	00 20		 cmp	 DWORD PTR ?colour_texture_pixel_width@@3HA, 32 ; colour_texture_pixel_width, 00000020H
  00010	74 18		 je	 SHORT $LN2@get_colour
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_colour_texture_32bit_value@@YGIUREAL_COLOUR@@@Z@4JA
  00017	83 c0 07	 add	 eax, 7
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@PBLNOCGM@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@KANOCCCC@colour_texture_pixel_width?5?$DN?$DN?53@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_colour:

; 510  : 
; 511  : 	red = ( ( unsigned int ) colour.r ) << 24;

  0002a	0f b6 45 0a	 movzx	 eax, BYTE PTR _colour$[ebp+2]
  0002e	c1 e0 18	 shl	 eax, 24			; 00000018H
  00031	89 45 fc	 mov	 DWORD PTR _red$[ebp], eax

; 512  : 	green = ( ( unsigned int ) colour.g ) << 24;

  00034	0f b6 45 09	 movzx	 eax, BYTE PTR _colour$[ebp+1]
  00038	c1 e0 18	 shl	 eax, 24			; 00000018H
  0003b	89 45 f8	 mov	 DWORD PTR _green$[ebp], eax

; 513  : 	blue = ( ( unsigned int ) colour.b ) << 24;

  0003e	0f b6 45 08	 movzx	 eax, BYTE PTR _colour$[ebp]
  00042	c1 e0 18	 shl	 eax, 24			; 00000018H
  00045	89 45 f4	 mov	 DWORD PTR _blue$[ebp], eax

; 514  : 
; 515  : 	red &= texture_colour_red_mask;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _red$[ebp]
  0004b	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_colour_red_mask@@3HA ; texture_colour_red_mask
  00051	89 45 fc	 mov	 DWORD PTR _red$[ebp], eax

; 516  : 	green &= texture_colour_green_mask;

  00054	8b 45 f8	 mov	 eax, DWORD PTR _green$[ebp]
  00057	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_colour_green_mask@@3HA ; texture_colour_green_mask
  0005d	89 45 f8	 mov	 DWORD PTR _green$[ebp], eax

; 517  : 	blue &= texture_colour_blue_mask;

  00060	8b 45 f4	 mov	 eax, DWORD PTR _blue$[ebp]
  00063	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_colour_blue_mask@@3HA ; texture_colour_blue_mask
  00069	89 45 f4	 mov	 DWORD PTR _blue$[ebp], eax

; 518  : 
; 519  : 	red >>= texture_colour_red_shift;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _red$[ebp]
  0006f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_colour_red_shift@@3HA ; texture_colour_red_shift
  00075	d3 e8		 shr	 eax, cl
  00077	89 45 fc	 mov	 DWORD PTR _red$[ebp], eax

; 520  : 	green >>= texture_colour_green_shift;

  0007a	8b 45 f8	 mov	 eax, DWORD PTR _green$[ebp]
  0007d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_colour_green_shift@@3HA ; texture_colour_green_shift
  00083	d3 e8		 shr	 eax, cl
  00085	89 45 f8	 mov	 DWORD PTR _green$[ebp], eax

; 521  : 	blue >>= texture_colour_blue_shift;

  00088	8b 45 f4	 mov	 eax, DWORD PTR _blue$[ebp]
  0008b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_colour_blue_shift@@3HA ; texture_colour_blue_shift
  00091	d3 e8		 shr	 eax, cl
  00093	89 45 f4	 mov	 DWORD PTR _blue$[ebp], eax

; 522  : 
; 523  : 	return ( red | green | blue );

  00096	8b 45 fc	 mov	 eax, DWORD PTR _red$[ebp]
  00099	0b 45 f8	 or	 eax, DWORD PTR _green$[ebp]
  0009c	0b 45 f4	 or	 eax, DWORD PTR _blue$[ebp]

; 524  : }

  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
?get_colour_texture_32bit_value@@YGIUREAL_COLOUR@@@Z ENDP ; get_colour_texture_32bit_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\pixeltxt.c
;	COMDAT ?get_colour_texture_packed_value@@YGGUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_blue$ = -12						; size = 4
_green$ = -8						; size = 4
_red$ = -4						; size = 4
_colour$ = 8						; size = 4
?get_colour_texture_packed_value@@YGGUREAL_COLOUR@@@Z PROC ; get_colour_texture_packed_value, COMDAT

; 473  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 474  : 
; 475  : 	unsigned int
; 476  : 		red,
; 477  : 		green,
; 478  : 		blue;
; 479  : 
; 480  : 	ASSERT ( colour_texture_pixel_width == 16 );

  00009	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?colour_texture_pixel_width@@3HA, 16 ; colour_texture_pixel_width, 00000010H
  00010	74 18		 je	 SHORT $LN2@get_colour
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_colour_texture_packed_value@@YGGUREAL_COLOUR@@@Z@4JA
  00017	83 c0 07	 add	 eax, 7
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@PBLNOCGM@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@MHDGDDEI@colour_texture_pixel_width?5?$DN?$DN?51@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_colour:

; 481  : 
; 482  : 	red = ( ( unsigned int ) colour.r ) << 24;

  0002a	0f b6 45 0a	 movzx	 eax, BYTE PTR _colour$[ebp+2]
  0002e	c1 e0 18	 shl	 eax, 24			; 00000018H
  00031	89 45 fc	 mov	 DWORD PTR _red$[ebp], eax

; 483  : 	green = ( ( unsigned int ) colour.g ) << 24;

  00034	0f b6 45 09	 movzx	 eax, BYTE PTR _colour$[ebp+1]
  00038	c1 e0 18	 shl	 eax, 24			; 00000018H
  0003b	89 45 f8	 mov	 DWORD PTR _green$[ebp], eax

; 484  : 	blue = ( ( unsigned int ) colour.b ) << 24;

  0003e	0f b6 45 08	 movzx	 eax, BYTE PTR _colour$[ebp]
  00042	c1 e0 18	 shl	 eax, 24			; 00000018H
  00045	89 45 f4	 mov	 DWORD PTR _blue$[ebp], eax

; 485  : 
; 486  : 	red &= texture_colour_red_mask;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _red$[ebp]
  0004b	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_colour_red_mask@@3HA ; texture_colour_red_mask
  00051	89 45 fc	 mov	 DWORD PTR _red$[ebp], eax

; 487  : 	green &= texture_colour_green_mask;

  00054	8b 45 f8	 mov	 eax, DWORD PTR _green$[ebp]
  00057	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_colour_green_mask@@3HA ; texture_colour_green_mask
  0005d	89 45 f8	 mov	 DWORD PTR _green$[ebp], eax

; 488  : 	blue &= texture_colour_blue_mask;

  00060	8b 45 f4	 mov	 eax, DWORD PTR _blue$[ebp]
  00063	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_colour_blue_mask@@3HA ; texture_colour_blue_mask
  00069	89 45 f4	 mov	 DWORD PTR _blue$[ebp], eax

; 489  : 
; 490  : 	red >>= texture_colour_red_shift;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _red$[ebp]
  0006f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_colour_red_shift@@3HA ; texture_colour_red_shift
  00075	d3 e8		 shr	 eax, cl
  00077	89 45 fc	 mov	 DWORD PTR _red$[ebp], eax

; 491  : 	green >>= texture_colour_green_shift;

  0007a	8b 45 f8	 mov	 eax, DWORD PTR _green$[ebp]
  0007d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_colour_green_shift@@3HA ; texture_colour_green_shift
  00083	d3 e8		 shr	 eax, cl
  00085	89 45 f8	 mov	 DWORD PTR _green$[ebp], eax

; 492  : 	blue >>= texture_colour_blue_shift;

  00088	8b 45 f4	 mov	 eax, DWORD PTR _blue$[ebp]
  0008b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_colour_blue_shift@@3HA ; texture_colour_blue_shift
  00091	d3 e8		 shr	 eax, cl
  00093	89 45 f4	 mov	 DWORD PTR _blue$[ebp], eax

; 493  : 
; 494  : 	return ( red | green | blue );

  00096	8b 45 fc	 mov	 eax, DWORD PTR _red$[ebp]
  00099	0b 45 f8	 or	 eax, DWORD PTR _green$[ebp]
  0009c	0b 45 f4	 or	 eax, DWORD PTR _blue$[ebp]

; 495  : }

  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
?get_colour_texture_packed_value@@YGGUREAL_COLOUR@@@Z ENDP ; get_colour_texture_packed_value
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\pixeltxt.c
;	COMDAT ?set_shift_and_mask@@YGXHPAH0@Z
_TEXT	SEGMENT
_shiftcount$ = -4					; size = 4
_source_mask$ = 8					; size = 4
_mask$ = 12						; size = 4
_shift$ = 16						; size = 4
?set_shift_and_mask@@YGXHPAH0@Z PROC			; set_shift_and_mask, COMDAT

; 697  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 698  : 
; 699  : 	int
; 700  : 		shiftcount;
; 701  : 
; 702  : 	shiftcount = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _shiftcount$[ebp], 0

; 703  : 
; 704  : 	if ( source_mask )

  00010	83 7d 08 00	 cmp	 DWORD PTR _source_mask$[ebp], 0
  00014	74 26		 je	 SHORT $LN5@set_shift_

; 705  : 	{
; 706  : 
; 707  : 		for ( shiftcount = 0; !( source_mask & 0x80000000 ); shiftcount++ )

  00016	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _shiftcount$[ebp], 0
  0001d	eb 09		 jmp	 SHORT $LN4@set_shift_
$LN2@set_shift_:
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _shiftcount$[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 fc	 mov	 DWORD PTR _shiftcount$[ebp], eax
$LN4@set_shift_:
  00028	8b 45 08	 mov	 eax, DWORD PTR _source_mask$[ebp]
  0002b	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00030	75 0a		 jne	 SHORT $LN5@set_shift_

; 708  : 		{
; 709  : 	
; 710  : 			source_mask <<= 1;

  00032	8b 45 08	 mov	 eax, DWORD PTR _source_mask$[ebp]
  00035	d1 e0		 shl	 eax, 1
  00037	89 45 08	 mov	 DWORD PTR _source_mask$[ebp], eax

; 711  : 		}

  0003a	eb e3		 jmp	 SHORT $LN2@set_shift_
$LN5@set_shift_:

; 712  : 	}
; 713  : 
; 714  : 	*shift = shiftcount;

  0003c	8b 45 10	 mov	 eax, DWORD PTR _shift$[ebp]
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _shiftcount$[ebp]
  00042	89 08		 mov	 DWORD PTR [eax], ecx

; 715  : 
; 716  : 	*mask = source_mask;

  00044	8b 45 0c	 mov	 eax, DWORD PTR _mask$[ebp]
  00047	8b 4d 08	 mov	 ecx, DWORD PTR _source_mask$[ebp]
  0004a	89 08		 mov	 DWORD PTR [eax], ecx

; 717  : }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 0c 00	 ret	 12			; 0000000cH
?set_shift_and_mask@@YGXHPAH0@Z ENDP			; set_shift_and_mask
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\pixeltxt.c
;	COMDAT ?set_texture_pixel_formats@@YGXXZ
_TEXT	SEGMENT
?set_texture_pixel_formats@@YGXXZ PROC			; set_texture_pixel_formats, COMDAT

; 647  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 648  : 
; 649  : 	if ( !texture_formats[TEXTURE_TYPE_NOALPHA].palette )

  00009	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0000e	c1 e0 00	 shl	 eax, 0
  00011	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax], 0
  00018	75 6e		 jne	 SHORT $LN2@set_textur

; 650  : 	{
; 651  : 
; 652  : 		set_shift_and_mask ( texture_formats[TEXTURE_TYPE_NOALPHA].format.dwRBitMask, &texture_colour_red_mask, &texture_colour_red_shift );

  0001a	68 00 00 00 00	 push	 OFFSET ?texture_colour_red_shift@@3HA ; texture_colour_red_shift
  0001f	68 00 00 00 00	 push	 OFFSET ?texture_colour_red_mask@@3HA ; texture_colour_red_mask
  00024	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00029	c1 e0 00	 shl	 eax, 0
  0002c	8b 88 30 00 00
	00		 mov	 ecx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+48]
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 ?set_shift_and_mask@@YGXHPAH0@Z ; set_shift_and_mask

; 653  : 		set_shift_and_mask ( texture_formats[TEXTURE_TYPE_NOALPHA].format.dwGBitMask, &texture_colour_green_mask, &texture_colour_green_shift );

  00038	68 00 00 00 00	 push	 OFFSET ?texture_colour_green_shift@@3HA ; texture_colour_green_shift
  0003d	68 00 00 00 00	 push	 OFFSET ?texture_colour_green_mask@@3HA ; texture_colour_green_mask
  00042	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00047	c1 e0 00	 shl	 eax, 0
  0004a	8b 88 34 00 00
	00		 mov	 ecx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+52]
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ?set_shift_and_mask@@YGXHPAH0@Z ; set_shift_and_mask

; 654  : 		set_shift_and_mask ( texture_formats[TEXTURE_TYPE_NOALPHA].format.dwBBitMask, &texture_colour_blue_mask, &texture_colour_blue_shift );

  00056	68 00 00 00 00	 push	 OFFSET ?texture_colour_blue_shift@@3HA ; texture_colour_blue_shift
  0005b	68 00 00 00 00	 push	 OFFSET ?texture_colour_blue_mask@@3HA ; texture_colour_blue_mask
  00060	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00065	c1 e0 00	 shl	 eax, 0
  00068	8b 88 38 00 00
	00		 mov	 ecx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+56]
  0006e	51		 push	 ecx
  0006f	e8 00 00 00 00	 call	 ?set_shift_and_mask@@YGXHPAH0@Z ; set_shift_and_mask

; 655  : 	
; 656  : 		colour_texture_pixel_width = texture_formats[TEXTURE_TYPE_NOALPHA].format.dwRGBBitCount;

  00074	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00079	c1 e0 00	 shl	 eax, 0
  0007c	8b 88 2c 00 00
	00		 mov	 ecx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+44]
  00082	89 0d 00 00 00
	00		 mov	 DWORD PTR ?colour_texture_pixel_width@@3HA, ecx ; colour_texture_pixel_width
$LN2@set_textur:

; 657  : 	}
; 658  : 
; 659  : 	if ( !texture_formats[TEXTURE_TYPE_NOALPHA_NOPALETTE].palette )

  00088	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0008d	6b c8 05	 imul	 ecx, eax, 5
  00090	83 b9 00 00 00
	00 00		 cmp	 DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[ecx], 0
  00097	75 6e		 jne	 SHORT $LN3@set_textur

; 660  : 	{
; 661  : 
; 662  : 		set_shift_and_mask ( texture_formats[TEXTURE_TYPE_NOALPHA_NOPALETTE].format.dwRBitMask, &texture_colour_nopalette_red_mask, &texture_colour_nopalette_red_shift );

  00099	68 00 00 00 00	 push	 OFFSET ?texture_colour_nopalette_red_shift@@3HA ; texture_colour_nopalette_red_shift
  0009e	68 00 00 00 00	 push	 OFFSET ?texture_colour_nopalette_red_mask@@3HA ; texture_colour_nopalette_red_mask
  000a3	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000a8	6b c8 05	 imul	 ecx, eax, 5
  000ab	8b 91 30 00 00
	00		 mov	 edx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[ecx+48]
  000b1	52		 push	 edx
  000b2	e8 00 00 00 00	 call	 ?set_shift_and_mask@@YGXHPAH0@Z ; set_shift_and_mask

; 663  : 		set_shift_and_mask ( texture_formats[TEXTURE_TYPE_NOALPHA_NOPALETTE].format.dwGBitMask, &texture_colour_nopalette_green_mask, &texture_colour_nopalette_green_shift );

  000b7	68 00 00 00 00	 push	 OFFSET ?texture_colour_nopalette_green_shift@@3HA ; texture_colour_nopalette_green_shift
  000bc	68 00 00 00 00	 push	 OFFSET ?texture_colour_nopalette_green_mask@@3HA ; texture_colour_nopalette_green_mask
  000c1	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000c6	6b c8 05	 imul	 ecx, eax, 5
  000c9	8b 91 34 00 00
	00		 mov	 edx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[ecx+52]
  000cf	52		 push	 edx
  000d0	e8 00 00 00 00	 call	 ?set_shift_and_mask@@YGXHPAH0@Z ; set_shift_and_mask

; 664  : 		set_shift_and_mask ( texture_formats[TEXTURE_TYPE_NOALPHA_NOPALETTE].format.dwBBitMask, &texture_colour_nopalette_blue_mask, &texture_colour_nopalette_blue_shift );

  000d5	68 00 00 00 00	 push	 OFFSET ?texture_colour_nopalette_blue_shift@@3HA ; texture_colour_nopalette_blue_shift
  000da	68 00 00 00 00	 push	 OFFSET ?texture_colour_nopalette_blue_mask@@3HA ; texture_colour_nopalette_blue_mask
  000df	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000e4	6b c8 05	 imul	 ecx, eax, 5
  000e7	8b 91 38 00 00
	00		 mov	 edx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[ecx+56]
  000ed	52		 push	 edx
  000ee	e8 00 00 00 00	 call	 ?set_shift_and_mask@@YGXHPAH0@Z ; set_shift_and_mask

; 665  : 
; 666  : 		colour_nopalette_texture_pixel_width = texture_formats[TEXTURE_TYPE_NOALPHA_NOPALETTE].format.dwRGBBitCount;

  000f3	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000f8	6b c8 05	 imul	 ecx, eax, 5
  000fb	8b 91 2c 00 00
	00		 mov	 edx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[ecx+44]
  00101	89 15 00 00 00
	00		 mov	 DWORD PTR ?colour_nopalette_texture_pixel_width@@3HA, edx ; colour_nopalette_texture_pixel_width
$LN3@set_textur:

; 667  : 	}
; 668  : 
; 669  : 	if ( !texture_formats[TEXTURE_TYPE_SINGLEALPHA].palette )

  00107	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0010c	d1 e0		 shl	 eax, 1
  0010e	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax], 0
  00115	0f 85 87 00 00
	00		 jne	 $LN4@set_textur

; 670  : 	{
; 671  : 
; 672  : 		set_shift_and_mask ( texture_formats[TEXTURE_TYPE_SINGLEALPHA].format.dwRBitMask, &texture_single_alpha_red_mask, &texture_single_alpha_red_shift );

  0011b	68 00 00 00 00	 push	 OFFSET ?texture_single_alpha_red_shift@@3HA ; texture_single_alpha_red_shift
  00120	68 00 00 00 00	 push	 OFFSET ?texture_single_alpha_red_mask@@3HA ; texture_single_alpha_red_mask
  00125	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0012a	d1 e0		 shl	 eax, 1
  0012c	8b 88 30 00 00
	00		 mov	 ecx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+48]
  00132	51		 push	 ecx
  00133	e8 00 00 00 00	 call	 ?set_shift_and_mask@@YGXHPAH0@Z ; set_shift_and_mask

; 673  : 		set_shift_and_mask ( texture_formats[TEXTURE_TYPE_SINGLEALPHA].format.dwGBitMask, &texture_single_alpha_green_mask, &texture_single_alpha_green_shift );

  00138	68 00 00 00 00	 push	 OFFSET ?texture_single_alpha_green_shift@@3HA ; texture_single_alpha_green_shift
  0013d	68 00 00 00 00	 push	 OFFSET ?texture_single_alpha_green_mask@@3HA ; texture_single_alpha_green_mask
  00142	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00147	d1 e0		 shl	 eax, 1
  00149	8b 88 34 00 00
	00		 mov	 ecx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+52]
  0014f	51		 push	 ecx
  00150	e8 00 00 00 00	 call	 ?set_shift_and_mask@@YGXHPAH0@Z ; set_shift_and_mask

; 674  : 		set_shift_and_mask ( texture_formats[TEXTURE_TYPE_SINGLEALPHA].format.dwBBitMask, &texture_single_alpha_blue_mask, &texture_single_alpha_blue_shift );

  00155	68 00 00 00 00	 push	 OFFSET ?texture_single_alpha_blue_shift@@3HA ; texture_single_alpha_blue_shift
  0015a	68 00 00 00 00	 push	 OFFSET ?texture_single_alpha_blue_mask@@3HA ; texture_single_alpha_blue_mask
  0015f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00164	d1 e0		 shl	 eax, 1
  00166	8b 88 38 00 00
	00		 mov	 ecx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+56]
  0016c	51		 push	 ecx
  0016d	e8 00 00 00 00	 call	 ?set_shift_and_mask@@YGXHPAH0@Z ; set_shift_and_mask

; 675  : 		set_shift_and_mask ( texture_formats[TEXTURE_TYPE_SINGLEALPHA].format.dwRGBAlphaBitMask, &texture_single_alpha_alpha_mask, &texture_single_alpha_alpha_shift );

  00172	68 00 00 00 00	 push	 OFFSET ?texture_single_alpha_alpha_shift@@3HA ; texture_single_alpha_alpha_shift
  00177	68 00 00 00 00	 push	 OFFSET ?texture_single_alpha_alpha_mask@@3HA ; texture_single_alpha_alpha_mask
  0017c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00181	d1 e0		 shl	 eax, 1
  00183	8b 88 3c 00 00
	00		 mov	 ecx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+60]
  00189	51		 push	 ecx
  0018a	e8 00 00 00 00	 call	 ?set_shift_and_mask@@YGXHPAH0@Z ; set_shift_and_mask

; 676  : 	
; 677  : 		single_alpha_texture_pixel_width = texture_formats[TEXTURE_TYPE_SINGLEALPHA].format.dwRGBBitCount;

  0018f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00194	d1 e0		 shl	 eax, 1
  00196	8b 88 2c 00 00
	00		 mov	 ecx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[eax+44]
  0019c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?single_alpha_texture_pixel_width@@3HA, ecx ; single_alpha_texture_pixel_width
$LN4@set_textur:

; 678  : 	}
; 679  : 
; 680  : 	if ( !texture_formats[TEXTURE_TYPE_MULTIPLEALPHA].palette )

  001a2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001a7	6b c8 03	 imul	 ecx, eax, 3
  001aa	83 b9 00 00 00
	00 00		 cmp	 DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[ecx], 0
  001b1	0f 85 8c 00 00
	00		 jne	 $LN1@set_textur

; 681  : 	{
; 682  : 
; 683  : 		set_shift_and_mask ( texture_formats[TEXTURE_TYPE_MULTIPLEALPHA].format.dwRBitMask, &texture_multiple_alpha_red_mask, &texture_multiple_alpha_red_shift );

  001b7	68 00 00 00 00	 push	 OFFSET ?texture_multiple_alpha_red_shift@@3HA ; texture_multiple_alpha_red_shift
  001bc	68 00 00 00 00	 push	 OFFSET ?texture_multiple_alpha_red_mask@@3HA ; texture_multiple_alpha_red_mask
  001c1	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001c6	6b c8 03	 imul	 ecx, eax, 3
  001c9	8b 91 30 00 00
	00		 mov	 edx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[ecx+48]
  001cf	52		 push	 edx
  001d0	e8 00 00 00 00	 call	 ?set_shift_and_mask@@YGXHPAH0@Z ; set_shift_and_mask

; 684  : 		set_shift_and_mask ( texture_formats[TEXTURE_TYPE_MULTIPLEALPHA].format.dwGBitMask, &texture_multiple_alpha_green_mask, &texture_multiple_alpha_green_shift );

  001d5	68 00 00 00 00	 push	 OFFSET ?texture_multiple_alpha_green_shift@@3HA ; texture_multiple_alpha_green_shift
  001da	68 00 00 00 00	 push	 OFFSET ?texture_multiple_alpha_green_mask@@3HA ; texture_multiple_alpha_green_mask
  001df	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001e4	6b c8 03	 imul	 ecx, eax, 3
  001e7	8b 91 34 00 00
	00		 mov	 edx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[ecx+52]
  001ed	52		 push	 edx
  001ee	e8 00 00 00 00	 call	 ?set_shift_and_mask@@YGXHPAH0@Z ; set_shift_and_mask

; 685  : 		set_shift_and_mask ( texture_formats[TEXTURE_TYPE_MULTIPLEALPHA].format.dwBBitMask, &texture_multiple_alpha_blue_mask, &texture_multiple_alpha_blue_shift );

  001f3	68 00 00 00 00	 push	 OFFSET ?texture_multiple_alpha_blue_shift@@3HA ; texture_multiple_alpha_blue_shift
  001f8	68 00 00 00 00	 push	 OFFSET ?texture_multiple_alpha_blue_mask@@3HA ; texture_multiple_alpha_blue_mask
  001fd	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00202	6b c8 03	 imul	 ecx, eax, 3
  00205	8b 91 38 00 00
	00		 mov	 edx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[ecx+56]
  0020b	52		 push	 edx
  0020c	e8 00 00 00 00	 call	 ?set_shift_and_mask@@YGXHPAH0@Z ; set_shift_and_mask

; 686  : 		set_shift_and_mask ( texture_formats[TEXTURE_TYPE_MULTIPLEALPHA].format.dwRGBAlphaBitMask, &texture_multiple_alpha_alpha_mask, &texture_multiple_alpha_alpha_shift );

  00211	68 00 00 00 00	 push	 OFFSET ?texture_multiple_alpha_alpha_shift@@3HA ; texture_multiple_alpha_alpha_shift
  00216	68 00 00 00 00	 push	 OFFSET ?texture_multiple_alpha_alpha_mask@@3HA ; texture_multiple_alpha_alpha_mask
  0021b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00220	6b c8 03	 imul	 ecx, eax, 3
  00223	8b 91 3c 00 00
	00		 mov	 edx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[ecx+60]
  00229	52		 push	 edx
  0022a	e8 00 00 00 00	 call	 ?set_shift_and_mask@@YGXHPAH0@Z ; set_shift_and_mask

; 687  : 	
; 688  : 		multiple_alpha_texture_pixel_width = texture_formats[TEXTURE_TYPE_MULTIPLEALPHA].format.dwRGBBitCount;

  0022f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00234	6b c8 03	 imul	 ecx, eax, 3
  00237	8b 91 2c 00 00
	00		 mov	 edx, DWORD PTR ?texture_formats@@3PAUTEXTURE_FORMAT@@A[ecx+44]
  0023d	89 15 00 00 00
	00		 mov	 DWORD PTR ?multiple_alpha_texture_pixel_width@@3HA, edx ; multiple_alpha_texture_pixel_width
$LN1@set_textur:

; 689  : 	}
; 690  : }

  00243	5f		 pop	 edi
  00244	5e		 pop	 esi
  00245	5b		 pop	 ebx
  00246	8b e5		 mov	 esp, ebp
  00248	5d		 pop	 ebp
  00249	c3		 ret	 0
?set_texture_pixel_formats@@YGXXZ ENDP			; set_texture_pixel_formats
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\pixeltxt.c
;	COMDAT ?set_texture_pixel@@YGXPAUSCREEN@@HHII@Z
_TEXT	SEGMENT
tv79 = -92						; size = 4
_value$1 = -24						; size = 4
_value$2 = -20						; size = 2
_value$3 = -16						; size = 4
_value$4 = -12						; size = 2
_ptr$5 = -8						; size = 4
_ptr$6 = -4						; size = 4
_texture$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_texture_colour$ = 20					; size = 4
_texture_alpha$ = 24					; size = 4
?set_texture_pixel@@YGXPAUSCREEN@@HHII@Z PROC		; set_texture_pixel, COMDAT

; 147  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 148  : 
; 149  : 	ASSERT ( texture );

  00009	83 7d 08 00	 cmp	 DWORD PTR _texture$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN4@set_textur
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_texture_pixel@@YGXPAUSCREEN@@HHII@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@PBLNOCGM@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_07JDHEGGGP@texture@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@set_textur:

; 150  : 
; 151  : 	if ( texture->palette )

  00027	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  0002a	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0002e	74 35		 je	 SHORT $LN5@set_textur

; 152  : 	{
; 153  : 
; 154  : 		unsigned char
; 155  : 			*ptr;
; 156  : 
; 157  : 		ptr = get_screen_data ( texture );

  00030	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  00039	89 45 fc	 mov	 DWORD PTR _ptr$6[ebp], eax

; 158  : 
; 159  : 		ptr += get_screen_pitch ( texture ) * y;

  0003c	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  00045	0f af 45 10	 imul	 eax, DWORD PTR _y$[ebp]
  00049	03 45 fc	 add	 eax, DWORD PTR _ptr$6[ebp]
  0004c	89 45 fc	 mov	 DWORD PTR _ptr$6[ebp], eax

; 160  : 
; 161  : 		ptr += x;

  0004f	8b 45 fc	 mov	 eax, DWORD PTR _ptr$6[ebp]
  00052	03 45 0c	 add	 eax, DWORD PTR _x$[ebp]
  00055	89 45 fc	 mov	 DWORD PTR _ptr$6[ebp], eax

; 162  : 
; 163  : 		*ptr = texture_colour;

  00058	8b 45 fc	 mov	 eax, DWORD PTR _ptr$6[ebp]
  0005b	8a 4d 14	 mov	 cl, BYTE PTR _texture_colour$[ebp]
  0005e	88 08		 mov	 BYTE PTR [eax], cl

; 164  : 	}
; 165  : 	else

  00060	e9 bb 02 00 00	 jmp	 $LN1@set_textur
$LN5@set_textur:

; 166  : 	{
; 167  : 
; 168  : 		unsigned char
; 169  : 			*ptr;
; 170  : 
; 171  : 		switch ( texture->type )

  00065	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00068	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006a	89 4d a4	 mov	 DWORD PTR tv79[ebp], ecx
  0006d	83 7d a4 01	 cmp	 DWORD PTR tv79[ebp], 1
  00071	74 19		 je	 SHORT $LN7@set_textur
  00073	83 7d a4 02	 cmp	 DWORD PTR tv79[ebp], 2
  00077	0f 84 a7 00 00
	00		 je	 $LN10@set_textur
  0007d	83 7d a4 03	 cmp	 DWORD PTR tv79[ebp], 3
  00081	0f 84 9d 01 00
	00		 je	 $LN13@set_textur
  00087	e9 94 02 00 00	 jmp	 $LN1@set_textur
$LN7@set_textur:

; 172  : 		{
; 173  : 
; 174  : 			case TEXTURE_TYPE_NOALPHA:
; 175  : 			{
; 176  : 
; 177  : 				if ( colour_texture_pixel_width <= 16 )

  0008c	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?colour_texture_pixel_width@@3HA, 16 ; colour_texture_pixel_width, 00000010H
  00093	7f 47		 jg	 SHORT $LN8@set_textur

; 178  : 				{
; 179  : 
; 180  : 					initialise_set_texture_pixel_lookup_table ( texture );

  00095	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?initialise_set_texture_pixel_lookup_table@@YGXPAUSCREEN@@@Z ; initialise_set_texture_pixel_lookup_table

; 181  : 			
; 182  : 					ptr = get_screen_data ( texture );

  0009e	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  000a7	89 45 f8	 mov	 DWORD PTR _ptr$5[ebp], eax

; 183  : 			
; 184  : 					ptr += get_screen_pitch ( texture ) * y;

  000aa	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  000b3	0f af 45 10	 imul	 eax, DWORD PTR _y$[ebp]
  000b7	03 45 f8	 add	 eax, DWORD PTR _ptr$5[ebp]
  000ba	89 45 f8	 mov	 DWORD PTR _ptr$5[ebp], eax

; 185  : 			
; 186  : 					ptr += x * 2;

  000bd	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  000c0	8b 4d f8	 mov	 ecx, DWORD PTR _ptr$5[ebp]
  000c3	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  000c6	89 55 f8	 mov	 DWORD PTR _ptr$5[ebp], edx

; 187  : 
; 188  : 					*( ( unsigned short int * ) ptr ) = set_texture_pixel_lookup_table[texture_colour];

  000c9	8b 45 f8	 mov	 eax, DWORD PTR _ptr$5[ebp]
  000cc	8b 4d 14	 mov	 ecx, DWORD PTR _texture_colour$[ebp]
  000cf	66 8b 14 4d 00
	00 00 00	 mov	 dx, WORD PTR ?set_texture_pixel_lookup_table@@3PAGA[ecx*2]
  000d7	66 89 10	 mov	 WORD PTR [eax], dx

; 189  : 				}
; 190  : 				else

  000da	eb 43		 jmp	 SHORT $LN9@set_textur
$LN8@set_textur:

; 191  : 				{
; 192  : 
; 193  : 					initialise_set_texture_pixel_lookup_table ( texture );

  000dc	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 ?initialise_set_texture_pixel_lookup_table@@YGXPAUSCREEN@@@Z ; initialise_set_texture_pixel_lookup_table

; 194  : 			
; 195  : 					ptr = get_screen_data ( texture );

  000e5	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  000ee	89 45 f8	 mov	 DWORD PTR _ptr$5[ebp], eax

; 196  : 			
; 197  : 					ptr += get_screen_pitch ( texture ) * y;

  000f1	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  000fa	0f af 45 10	 imul	 eax, DWORD PTR _y$[ebp]
  000fe	03 45 f8	 add	 eax, DWORD PTR _ptr$5[ebp]
  00101	89 45 f8	 mov	 DWORD PTR _ptr$5[ebp], eax

; 198  : 			
; 199  : 					ptr += x * 4;

  00104	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00107	8b 4d f8	 mov	 ecx, DWORD PTR _ptr$5[ebp]
  0010a	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0010d	89 55 f8	 mov	 DWORD PTR _ptr$5[ebp], edx

; 200  : 
; 201  : 					*( ( unsigned int * ) ptr ) = set_texture_pixel_32bit_lookup_table[texture_colour];

  00110	8b 45 f8	 mov	 eax, DWORD PTR _ptr$5[ebp]
  00113	8b 4d 14	 mov	 ecx, DWORD PTR _texture_colour$[ebp]
  00116	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?set_texture_pixel_32bit_lookup_table@@3PAIA[ecx*4]
  0011d	89 10		 mov	 DWORD PTR [eax], edx
$LN9@set_textur:

; 202  : 				}
; 203  : 
; 204  : 				break;

  0011f	e9 fc 01 00 00	 jmp	 $LN1@set_textur
$LN10@set_textur:

; 205  : 			}
; 206  : 
; 207  : 			case TEXTURE_TYPE_SINGLEALPHA:
; 208  : 			{
; 209  : 
; 210  : 				if ( single_alpha_texture_pixel_width <= 16 )

  00124	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?single_alpha_texture_pixel_width@@3HA, 16 ; single_alpha_texture_pixel_width, 00000010H
  0012b	7f 7d		 jg	 SHORT $LN11@set_textur

; 211  : 				{
; 212  : 
; 213  : 					unsigned short int
; 214  : 						value;
; 215  : 			
; 216  : 					initialise_set_texture_pixel_lookup_table ( texture );

  0012d	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00130	50		 push	 eax
  00131	e8 00 00 00 00	 call	 ?initialise_set_texture_pixel_lookup_table@@YGXPAUSCREEN@@@Z ; initialise_set_texture_pixel_lookup_table

; 217  : 			
; 218  : 					ptr = get_screen_data ( texture );

  00136	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00139	50		 push	 eax
  0013a	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  0013f	89 45 f8	 mov	 DWORD PTR _ptr$5[ebp], eax

; 219  : 			
; 220  : 					ptr += get_screen_pitch ( texture ) * y;

  00142	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00145	50		 push	 eax
  00146	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  0014b	0f af 45 10	 imul	 eax, DWORD PTR _y$[ebp]
  0014f	03 45 f8	 add	 eax, DWORD PTR _ptr$5[ebp]
  00152	89 45 f8	 mov	 DWORD PTR _ptr$5[ebp], eax

; 221  : 			
; 222  : 					ptr += x * 2;

  00155	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00158	8b 4d f8	 mov	 ecx, DWORD PTR _ptr$5[ebp]
  0015b	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0015e	89 55 f8	 mov	 DWORD PTR _ptr$5[ebp], edx

; 223  : 
; 224  : 					value = set_texture_pixel_lookup_table[texture_colour];

  00161	8b 45 14	 mov	 eax, DWORD PTR _texture_colour$[ebp]
  00164	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR ?set_texture_pixel_lookup_table@@3PAGA[eax*2]
  0016c	66 89 4d f4	 mov	 WORD PTR _value$4[ebp], cx

; 225  : 
; 226  : 					texture_alpha <<= 24;

  00170	8b 45 18	 mov	 eax, DWORD PTR _texture_alpha$[ebp]
  00173	c1 e0 18	 shl	 eax, 24			; 00000018H
  00176	89 45 18	 mov	 DWORD PTR _texture_alpha$[ebp], eax

; 227  : 	
; 228  : 					texture_alpha &= texture_single_alpha_alpha_mask;

  00179	8b 45 18	 mov	 eax, DWORD PTR _texture_alpha$[ebp]
  0017c	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_single_alpha_alpha_mask@@3HA ; texture_single_alpha_alpha_mask
  00182	89 45 18	 mov	 DWORD PTR _texture_alpha$[ebp], eax

; 229  : 	
; 230  : 					texture_alpha >>= texture_single_alpha_alpha_shift;

  00185	8b 45 18	 mov	 eax, DWORD PTR _texture_alpha$[ebp]
  00188	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_single_alpha_alpha_shift@@3HA ; texture_single_alpha_alpha_shift
  0018e	d3 e8		 shr	 eax, cl
  00190	89 45 18	 mov	 DWORD PTR _texture_alpha$[ebp], eax

; 231  : 	
; 232  : 					value |= texture_alpha;

  00193	0f b7 45 f4	 movzx	 eax, WORD PTR _value$4[ebp]
  00197	0b 45 18	 or	 eax, DWORD PTR _texture_alpha$[ebp]
  0019a	66 89 45 f4	 mov	 WORD PTR _value$4[ebp], ax

; 233  : 
; 234  : 					*( ( unsigned short int * ) ptr ) = value;

  0019e	8b 45 f8	 mov	 eax, DWORD PTR _ptr$5[ebp]
  001a1	66 8b 4d f4	 mov	 cx, WORD PTR _value$4[ebp]
  001a5	66 89 08	 mov	 WORD PTR [eax], cx

; 235  : 				}
; 236  : 				else

  001a8	eb 75		 jmp	 SHORT $LN12@set_textur
$LN11@set_textur:

; 237  : 				{
; 238  : 
; 239  : 					unsigned int
; 240  : 						value;
; 241  : 			
; 242  : 					initialise_set_texture_pixel_lookup_table ( texture );

  001aa	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  001ad	50		 push	 eax
  001ae	e8 00 00 00 00	 call	 ?initialise_set_texture_pixel_lookup_table@@YGXPAUSCREEN@@@Z ; initialise_set_texture_pixel_lookup_table

; 243  : 			
; 244  : 					ptr = get_screen_data ( texture );

  001b3	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  001bc	89 45 f8	 mov	 DWORD PTR _ptr$5[ebp], eax

; 245  : 			
; 246  : 					ptr += get_screen_pitch ( texture ) * y;

  001bf	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  001c2	50		 push	 eax
  001c3	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  001c8	0f af 45 10	 imul	 eax, DWORD PTR _y$[ebp]
  001cc	03 45 f8	 add	 eax, DWORD PTR _ptr$5[ebp]
  001cf	89 45 f8	 mov	 DWORD PTR _ptr$5[ebp], eax

; 247  : 			
; 248  : 					ptr += x * 4;

  001d2	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  001d5	8b 4d f8	 mov	 ecx, DWORD PTR _ptr$5[ebp]
  001d8	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  001db	89 55 f8	 mov	 DWORD PTR _ptr$5[ebp], edx

; 249  : 
; 250  : 					value = set_texture_pixel_32bit_lookup_table[texture_colour];

  001de	8b 45 14	 mov	 eax, DWORD PTR _texture_colour$[ebp]
  001e1	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?set_texture_pixel_32bit_lookup_table@@3PAIA[eax*4]
  001e8	89 4d f0	 mov	 DWORD PTR _value$3[ebp], ecx

; 251  : 
; 252  : 					texture_alpha <<= 24;

  001eb	8b 45 18	 mov	 eax, DWORD PTR _texture_alpha$[ebp]
  001ee	c1 e0 18	 shl	 eax, 24			; 00000018H
  001f1	89 45 18	 mov	 DWORD PTR _texture_alpha$[ebp], eax

; 253  : 	
; 254  : 					texture_alpha &= texture_single_alpha_alpha_mask;

  001f4	8b 45 18	 mov	 eax, DWORD PTR _texture_alpha$[ebp]
  001f7	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_single_alpha_alpha_mask@@3HA ; texture_single_alpha_alpha_mask
  001fd	89 45 18	 mov	 DWORD PTR _texture_alpha$[ebp], eax

; 255  : 	
; 256  : 					texture_alpha >>= texture_single_alpha_alpha_shift;

  00200	8b 45 18	 mov	 eax, DWORD PTR _texture_alpha$[ebp]
  00203	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_single_alpha_alpha_shift@@3HA ; texture_single_alpha_alpha_shift
  00209	d3 e8		 shr	 eax, cl
  0020b	89 45 18	 mov	 DWORD PTR _texture_alpha$[ebp], eax

; 257  : 	
; 258  : 					value |= texture_alpha;

  0020e	8b 45 f0	 mov	 eax, DWORD PTR _value$3[ebp]
  00211	0b 45 18	 or	 eax, DWORD PTR _texture_alpha$[ebp]
  00214	89 45 f0	 mov	 DWORD PTR _value$3[ebp], eax

; 259  : 
; 260  : 					*( ( unsigned int * ) ptr ) = value;

  00217	8b 45 f8	 mov	 eax, DWORD PTR _ptr$5[ebp]
  0021a	8b 4d f0	 mov	 ecx, DWORD PTR _value$3[ebp]
  0021d	89 08		 mov	 DWORD PTR [eax], ecx
$LN12@set_textur:

; 261  : 				}
; 262  : 
; 263  : 				break;

  0021f	e9 fc 00 00 00	 jmp	 $LN1@set_textur
$LN13@set_textur:

; 264  : 			}
; 265  : 
; 266  : 			case TEXTURE_TYPE_MULTIPLEALPHA:
; 267  : 			{
; 268  : 
; 269  : 				if ( multiple_alpha_texture_pixel_width <= 16 )

  00224	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?multiple_alpha_texture_pixel_width@@3HA, 16 ; multiple_alpha_texture_pixel_width, 00000010H
  0022b	7f 7d		 jg	 SHORT $LN14@set_textur

; 270  : 				{
; 271  : 
; 272  : 					unsigned short int
; 273  : 						value;
; 274  : 			
; 275  : 					initialise_set_texture_pixel_lookup_table ( texture );

  0022d	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00230	50		 push	 eax
  00231	e8 00 00 00 00	 call	 ?initialise_set_texture_pixel_lookup_table@@YGXPAUSCREEN@@@Z ; initialise_set_texture_pixel_lookup_table

; 276  : 			
; 277  : 					ptr = get_screen_data ( texture );

  00236	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00239	50		 push	 eax
  0023a	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  0023f	89 45 f8	 mov	 DWORD PTR _ptr$5[ebp], eax

; 278  : 			
; 279  : 					ptr += get_screen_pitch ( texture ) * y;

  00242	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00245	50		 push	 eax
  00246	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  0024b	0f af 45 10	 imul	 eax, DWORD PTR _y$[ebp]
  0024f	03 45 f8	 add	 eax, DWORD PTR _ptr$5[ebp]
  00252	89 45 f8	 mov	 DWORD PTR _ptr$5[ebp], eax

; 280  : 			
; 281  : 					ptr += x * 2;

  00255	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00258	8b 4d f8	 mov	 ecx, DWORD PTR _ptr$5[ebp]
  0025b	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0025e	89 55 f8	 mov	 DWORD PTR _ptr$5[ebp], edx

; 282  : 
; 283  : 					value = set_texture_pixel_lookup_table[texture_colour];

  00261	8b 45 14	 mov	 eax, DWORD PTR _texture_colour$[ebp]
  00264	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR ?set_texture_pixel_lookup_table@@3PAGA[eax*2]
  0026c	66 89 4d ec	 mov	 WORD PTR _value$2[ebp], cx

; 284  : 
; 285  : 					texture_alpha <<= 24;

  00270	8b 45 18	 mov	 eax, DWORD PTR _texture_alpha$[ebp]
  00273	c1 e0 18	 shl	 eax, 24			; 00000018H
  00276	89 45 18	 mov	 DWORD PTR _texture_alpha$[ebp], eax

; 286  : 	
; 287  : 					texture_alpha &= texture_multiple_alpha_alpha_mask;

  00279	8b 45 18	 mov	 eax, DWORD PTR _texture_alpha$[ebp]
  0027c	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_multiple_alpha_alpha_mask@@3HA ; texture_multiple_alpha_alpha_mask
  00282	89 45 18	 mov	 DWORD PTR _texture_alpha$[ebp], eax

; 288  : 	
; 289  : 					texture_alpha >>= texture_multiple_alpha_alpha_shift;

  00285	8b 45 18	 mov	 eax, DWORD PTR _texture_alpha$[ebp]
  00288	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_multiple_alpha_alpha_shift@@3HA ; texture_multiple_alpha_alpha_shift
  0028e	d3 e8		 shr	 eax, cl
  00290	89 45 18	 mov	 DWORD PTR _texture_alpha$[ebp], eax

; 290  : 	
; 291  : 					value |= texture_alpha;

  00293	0f b7 45 ec	 movzx	 eax, WORD PTR _value$2[ebp]
  00297	0b 45 18	 or	 eax, DWORD PTR _texture_alpha$[ebp]
  0029a	66 89 45 ec	 mov	 WORD PTR _value$2[ebp], ax

; 292  : 
; 293  : 					*( ( unsigned short int * ) ptr ) = value;

  0029e	8b 45 f8	 mov	 eax, DWORD PTR _ptr$5[ebp]
  002a1	66 8b 4d ec	 mov	 cx, WORD PTR _value$2[ebp]
  002a5	66 89 08	 mov	 WORD PTR [eax], cx

; 294  : 				}
; 295  : 				else

  002a8	eb 76		 jmp	 SHORT $LN1@set_textur
$LN14@set_textur:

; 296  : 				{
; 297  : 
; 298  : 					unsigned int
; 299  : 						value;
; 300  : 			
; 301  : 					initialise_set_texture_pixel_lookup_table ( texture );

  002aa	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  002ad	50		 push	 eax
  002ae	e8 00 00 00 00	 call	 ?initialise_set_texture_pixel_lookup_table@@YGXPAUSCREEN@@@Z ; initialise_set_texture_pixel_lookup_table

; 302  : 			
; 303  : 					ptr = get_screen_data ( texture );

  002b3	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  002b6	50		 push	 eax
  002b7	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  002bc	89 45 f8	 mov	 DWORD PTR _ptr$5[ebp], eax

; 304  : 			
; 305  : 					ptr += get_screen_pitch ( texture ) * y;

  002bf	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  002c2	50		 push	 eax
  002c3	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  002c8	0f af 45 10	 imul	 eax, DWORD PTR _y$[ebp]
  002cc	03 45 f8	 add	 eax, DWORD PTR _ptr$5[ebp]
  002cf	89 45 f8	 mov	 DWORD PTR _ptr$5[ebp], eax

; 306  : 			
; 307  : 					ptr += x * 4;

  002d2	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  002d5	8b 4d f8	 mov	 ecx, DWORD PTR _ptr$5[ebp]
  002d8	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  002db	89 55 f8	 mov	 DWORD PTR _ptr$5[ebp], edx

; 308  : 
; 309  : 					value = set_texture_pixel_lookup_table[texture_colour];

  002de	8b 45 14	 mov	 eax, DWORD PTR _texture_colour$[ebp]
  002e1	0f b7 0c 45 00
	00 00 00	 movzx	 ecx, WORD PTR ?set_texture_pixel_lookup_table@@3PAGA[eax*2]
  002e9	89 4d e8	 mov	 DWORD PTR _value$1[ebp], ecx

; 310  : 
; 311  : 					texture_alpha <<= 24;

  002ec	8b 45 18	 mov	 eax, DWORD PTR _texture_alpha$[ebp]
  002ef	c1 e0 18	 shl	 eax, 24			; 00000018H
  002f2	89 45 18	 mov	 DWORD PTR _texture_alpha$[ebp], eax

; 312  : 	
; 313  : 					texture_alpha &= texture_multiple_alpha_alpha_mask;

  002f5	8b 45 18	 mov	 eax, DWORD PTR _texture_alpha$[ebp]
  002f8	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?texture_multiple_alpha_alpha_mask@@3HA ; texture_multiple_alpha_alpha_mask
  002fe	89 45 18	 mov	 DWORD PTR _texture_alpha$[ebp], eax

; 314  : 	
; 315  : 					texture_alpha >>= texture_multiple_alpha_alpha_shift;

  00301	8b 45 18	 mov	 eax, DWORD PTR _texture_alpha$[ebp]
  00304	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_multiple_alpha_alpha_shift@@3HA ; texture_multiple_alpha_alpha_shift
  0030a	d3 e8		 shr	 eax, cl
  0030c	89 45 18	 mov	 DWORD PTR _texture_alpha$[ebp], eax

; 316  : 	
; 317  : 					value |= texture_alpha;

  0030f	8b 45 e8	 mov	 eax, DWORD PTR _value$1[ebp]
  00312	0b 45 18	 or	 eax, DWORD PTR _texture_alpha$[ebp]
  00315	89 45 e8	 mov	 DWORD PTR _value$1[ebp], eax

; 318  : 
; 319  : 					*( ( unsigned int * ) ptr ) = value;

  00318	8b 45 f8	 mov	 eax, DWORD PTR _ptr$5[ebp]
  0031b	8b 4d e8	 mov	 ecx, DWORD PTR _value$1[ebp]
  0031e	89 08		 mov	 DWORD PTR [eax], ecx
$LN1@set_textur:

; 320  : 				}
; 321  : 
; 322  : 				break;
; 323  : 			}
; 324  : 		}
; 325  : 	}
; 326  : }

  00320	5f		 pop	 edi
  00321	5e		 pop	 esi
  00322	5b		 pop	 ebx
  00323	8b e5		 mov	 esp, ebp
  00325	5d		 pop	 ebp
  00326	c2 14 00	 ret	 20			; 00000014H
?set_texture_pixel@@YGXPAUSCREEN@@HHII@Z ENDP		; set_texture_pixel
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\pixeltxt.c
;	COMDAT ?initialise_set_texture_pixel_lookup_table@@YGXPAUSCREEN@@@Z
_TEXT	SEGMENT
tv66 = -96						; size = 4
_colour$1 = -28						; size = 4
_colour$2 = -24						; size = 4
_colour$3 = -20						; size = 4
_colour$4 = -16						; size = 4
_colour$5 = -12						; size = 4
_colour$6 = -8						; size = 4
_count$ = -4						; size = 4
_texture$ = 8						; size = 4
?initialise_set_texture_pixel_lookup_table@@YGXPAUSCREEN@@@Z PROC ; initialise_set_texture_pixel_lookup_table, COMDAT

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 334  : 
; 335  : 	int
; 336  : 		count;
; 337  : 
; 338  : 	if ( texture == set_texture_pixel_lookup_texture )

  00009	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  0000c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?set_texture_pixel_lookup_texture@@3PAUSCREEN@@A
  00012	75 05		 jne	 SHORT $LN22@initialise

; 339  : 	{
; 340  : 
; 341  : 		return;

  00014	e9 97 02 00 00	 jmp	 $LN1@initialise
$LN22@initialise:

; 342  : 	}
; 343  : 
; 344  : 	switch ( texture->type )

  00019	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	89 4d a0	 mov	 DWORD PTR tv66[ebp], ecx
  00021	83 7d a0 01	 cmp	 DWORD PTR tv66[ebp], 1
  00025	74 19		 je	 SHORT $LN23@initialise
  00027	83 7d a0 02	 cmp	 DWORD PTR tv66[ebp], 2
  0002b	0f 84 de 00 00
	00		 je	 $LN26@initialise
  00031	83 7d a0 03	 cmp	 DWORD PTR tv66[ebp], 3
  00035	0f 84 a3 01 00
	00		 je	 $LN29@initialise
  0003b	e9 68 02 00 00	 jmp	 $LN2@initialise
$LN23@initialise:

; 345  : 	{
; 346  : 
; 347  : 		case TEXTURE_TYPE_NOALPHA:
; 348  : 		{
; 349  : 
; 350  : 			if ( colour_texture_pixel_width <= 16 )

  00040	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?colour_texture_pixel_width@@3HA, 16 ; colour_texture_pixel_width, 00000010H
  00047	7f 62		 jg	 SHORT $LN24@initialise

; 351  : 			{
; 352  : 	
; 353  : 				for ( count = 0; count < 256; count++ )

  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00050	eb 09		 jmp	 SHORT $LN6@initialise
$LN4@initialise:
  00052	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00055	83 c0 01	 add	 eax, 1
  00058	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN6@initialise:
  0005b	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _count$[ebp], 256 ; 00000100H
  00062	7d 45		 jge	 SHORT $LN5@initialise

; 354  : 				{
; 355  : 			
; 356  : 					rgb_colour
; 357  : 						colour;
; 358  : 				
; 359  : 					colour.r = texture->colour_table[count].peRed;

  00064	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00067	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0006a	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  0006d	8a 04 91	 mov	 al, BYTE PTR [ecx+edx*4]
  00070	88 45 fa	 mov	 BYTE PTR _colour$6[ebp+2], al

; 360  : 					colour.g = texture->colour_table[count].peGreen;

  00073	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00076	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00079	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  0007c	8a 44 91 01	 mov	 al, BYTE PTR [ecx+edx*4+1]
  00080	88 45 f9	 mov	 BYTE PTR _colour$6[ebp+1], al

; 361  : 					colour.b = texture->colour_table[count].peBlue;

  00083	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00086	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00089	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  0008c	8a 44 91 02	 mov	 al, BYTE PTR [ecx+edx*4+2]
  00090	88 45 f8	 mov	 BYTE PTR _colour$6[ebp], al

; 362  : 				
; 363  : 					set_texture_pixel_lookup_table[count] = get_colour_texture_packed_value ( colour );

  00093	8b 45 f8	 mov	 eax, DWORD PTR _colour$6[ebp]
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 ?get_colour_texture_packed_value@@YGGUREAL_COLOUR@@@Z ; get_colour_texture_packed_value
  0009c	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  0009f	66 89 04 4d 00
	00 00 00	 mov	 WORD PTR ?set_texture_pixel_lookup_table@@3PAGA[ecx*2], ax

; 364  : 				}

  000a7	eb a9		 jmp	 SHORT $LN4@initialise
$LN5@initialise:

; 365  : 			}
; 366  : 			else

  000a9	eb 5f		 jmp	 SHORT $LN25@initialise
$LN24@initialise:

; 367  : 			{
; 368  : 	
; 369  : 				for ( count = 0; count < 256; count++ )

  000ab	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  000b2	eb 09		 jmp	 SHORT $LN9@initialise
$LN7@initialise:
  000b4	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  000b7	83 c0 01	 add	 eax, 1
  000ba	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN9@initialise:
  000bd	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _count$[ebp], 256 ; 00000100H
  000c4	7d 44		 jge	 SHORT $LN25@initialise

; 370  : 				{
; 371  : 			
; 372  : 					rgb_colour
; 373  : 						colour;
; 374  : 				
; 375  : 					colour.r = texture->colour_table[count].peRed;

  000c6	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  000c9	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000cc	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  000cf	8a 04 91	 mov	 al, BYTE PTR [ecx+edx*4]
  000d2	88 45 f6	 mov	 BYTE PTR _colour$5[ebp+2], al

; 376  : 					colour.g = texture->colour_table[count].peGreen;

  000d5	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  000d8	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000db	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  000de	8a 44 91 01	 mov	 al, BYTE PTR [ecx+edx*4+1]
  000e2	88 45 f5	 mov	 BYTE PTR _colour$5[ebp+1], al

; 377  : 					colour.b = texture->colour_table[count].peBlue;

  000e5	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  000e8	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000eb	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  000ee	8a 44 91 02	 mov	 al, BYTE PTR [ecx+edx*4+2]
  000f2	88 45 f4	 mov	 BYTE PTR _colour$5[ebp], al

; 378  : 				
; 379  : 					set_texture_pixel_32bit_lookup_table[count] = get_colour_texture_32bit_value ( colour );

  000f5	8b 45 f4	 mov	 eax, DWORD PTR _colour$5[ebp]
  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 ?get_colour_texture_32bit_value@@YGIUREAL_COLOUR@@@Z ; get_colour_texture_32bit_value
  000fe	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  00101	89 04 8d 00 00
	00 00		 mov	 DWORD PTR ?set_texture_pixel_32bit_lookup_table@@3PAIA[ecx*4], eax

; 380  : 				}

  00108	eb aa		 jmp	 SHORT $LN7@initialise
$LN25@initialise:

; 381  : 			}
; 382  : 
; 383  : 			break;

  0010a	e9 99 01 00 00	 jmp	 $LN2@initialise
$LN26@initialise:

; 384  : 		}
; 385  : 
; 386  : 		case TEXTURE_TYPE_SINGLEALPHA:
; 387  : 		{
; 388  : 
; 389  : 			if ( single_alpha_texture_pixel_width <= 16 )

  0010f	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?single_alpha_texture_pixel_width@@3HA, 16 ; single_alpha_texture_pixel_width, 00000010H
  00116	7f 62		 jg	 SHORT $LN27@initialise

; 390  : 			{
; 391  : 	
; 392  : 				for ( count = 0; count < 256; count++ )

  00118	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0011f	eb 09		 jmp	 SHORT $LN12@initialise
$LN10@initialise:
  00121	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00124	83 c0 01	 add	 eax, 1
  00127	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN12@initialise:
  0012a	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _count$[ebp], 256 ; 00000100H
  00131	7d 45		 jge	 SHORT $LN11@initialise

; 393  : 				{
; 394  : 			
; 395  : 					rgb_colour
; 396  : 						colour;
; 397  : 				
; 398  : 					colour.r = texture->colour_table[count].peRed;

  00133	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00136	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00139	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  0013c	8a 04 91	 mov	 al, BYTE PTR [ecx+edx*4]
  0013f	88 45 f2	 mov	 BYTE PTR _colour$4[ebp+2], al

; 399  : 					colour.g = texture->colour_table[count].peGreen;

  00142	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00145	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00148	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  0014b	8a 44 91 01	 mov	 al, BYTE PTR [ecx+edx*4+1]
  0014f	88 45 f1	 mov	 BYTE PTR _colour$4[ebp+1], al

; 400  : 					colour.b = texture->colour_table[count].peBlue;

  00152	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00155	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00158	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  0015b	8a 44 91 02	 mov	 al, BYTE PTR [ecx+edx*4+2]
  0015f	88 45 f0	 mov	 BYTE PTR _colour$4[ebp], al

; 401  : 				
; 402  : 					set_texture_pixel_lookup_table[count] = get_single_alpha_texture_packed_value ( colour );

  00162	8b 45 f0	 mov	 eax, DWORD PTR _colour$4[ebp]
  00165	50		 push	 eax
  00166	e8 00 00 00 00	 call	 ?get_single_alpha_texture_packed_value@@YGGUREAL_COLOUR@@@Z ; get_single_alpha_texture_packed_value
  0016b	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  0016e	66 89 04 4d 00
	00 00 00	 mov	 WORD PTR ?set_texture_pixel_lookup_table@@3PAGA[ecx*2], ax

; 403  : 				}

  00176	eb a9		 jmp	 SHORT $LN10@initialise
$LN11@initialise:

; 404  : 			}
; 405  : 			else

  00178	eb 5f		 jmp	 SHORT $LN28@initialise
$LN27@initialise:

; 406  : 			{
; 407  : 	
; 408  : 				for ( count = 0; count < 256; count++ )

  0017a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00181	eb 09		 jmp	 SHORT $LN15@initialise
$LN13@initialise:
  00183	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00186	83 c0 01	 add	 eax, 1
  00189	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN15@initialise:
  0018c	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _count$[ebp], 256 ; 00000100H
  00193	7d 44		 jge	 SHORT $LN28@initialise

; 409  : 				{
; 410  : 			
; 411  : 					rgb_colour
; 412  : 						colour;
; 413  : 				
; 414  : 					colour.r = texture->colour_table[count].peRed;

  00195	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00198	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0019b	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  0019e	8a 04 91	 mov	 al, BYTE PTR [ecx+edx*4]
  001a1	88 45 ee	 mov	 BYTE PTR _colour$3[ebp+2], al

; 415  : 					colour.g = texture->colour_table[count].peGreen;

  001a4	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  001a7	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001aa	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  001ad	8a 44 91 01	 mov	 al, BYTE PTR [ecx+edx*4+1]
  001b1	88 45 ed	 mov	 BYTE PTR _colour$3[ebp+1], al

; 416  : 					colour.b = texture->colour_table[count].peBlue;

  001b4	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  001b7	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001ba	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  001bd	8a 44 91 02	 mov	 al, BYTE PTR [ecx+edx*4+2]
  001c1	88 45 ec	 mov	 BYTE PTR _colour$3[ebp], al

; 417  : 				
; 418  : 					set_texture_pixel_32bit_lookup_table[count] = get_single_alpha_texture_32bit_value ( colour );

  001c4	8b 45 ec	 mov	 eax, DWORD PTR _colour$3[ebp]
  001c7	50		 push	 eax
  001c8	e8 00 00 00 00	 call	 ?get_single_alpha_texture_32bit_value@@YGIUREAL_COLOUR@@@Z ; get_single_alpha_texture_32bit_value
  001cd	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  001d0	89 04 8d 00 00
	00 00		 mov	 DWORD PTR ?set_texture_pixel_32bit_lookup_table@@3PAIA[ecx*4], eax

; 419  : 				}

  001d7	eb aa		 jmp	 SHORT $LN13@initialise
$LN28@initialise:

; 420  : 			}
; 421  : 
; 422  : 			break;

  001d9	e9 ca 00 00 00	 jmp	 $LN2@initialise
$LN29@initialise:

; 423  : 		}
; 424  : 
; 425  : 		case TEXTURE_TYPE_MULTIPLEALPHA:
; 426  : 		{
; 427  : 
; 428  : 			if ( multiple_alpha_texture_pixel_width <= 16 )

  001de	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?multiple_alpha_texture_pixel_width@@3HA, 16 ; multiple_alpha_texture_pixel_width, 00000010H
  001e5	7f 62		 jg	 SHORT $LN30@initialise

; 429  : 			{
; 430  : 	
; 431  : 				for ( count = 0; count < 256; count++ )

  001e7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  001ee	eb 09		 jmp	 SHORT $LN18@initialise
$LN16@initialise:
  001f0	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  001f3	83 c0 01	 add	 eax, 1
  001f6	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN18@initialise:
  001f9	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _count$[ebp], 256 ; 00000100H
  00200	7d 45		 jge	 SHORT $LN17@initialise

; 432  : 				{
; 433  : 			
; 434  : 					rgb_colour
; 435  : 						colour;
; 436  : 				
; 437  : 					colour.r = texture->colour_table[count].peRed;

  00202	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00205	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00208	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  0020b	8a 04 91	 mov	 al, BYTE PTR [ecx+edx*4]
  0020e	88 45 ea	 mov	 BYTE PTR _colour$2[ebp+2], al

; 438  : 					colour.g = texture->colour_table[count].peGreen;

  00211	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00214	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00217	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  0021a	8a 44 91 01	 mov	 al, BYTE PTR [ecx+edx*4+1]
  0021e	88 45 e9	 mov	 BYTE PTR _colour$2[ebp+1], al

; 439  : 					colour.b = texture->colour_table[count].peBlue;

  00221	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00224	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00227	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  0022a	8a 44 91 02	 mov	 al, BYTE PTR [ecx+edx*4+2]
  0022e	88 45 e8	 mov	 BYTE PTR _colour$2[ebp], al

; 440  : 				
; 441  : 					set_texture_pixel_lookup_table[count] = get_multiple_alpha_texture_packed_value ( colour );

  00231	8b 45 e8	 mov	 eax, DWORD PTR _colour$2[ebp]
  00234	50		 push	 eax
  00235	e8 00 00 00 00	 call	 ?get_multiple_alpha_texture_packed_value@@YGGUREAL_COLOUR@@@Z ; get_multiple_alpha_texture_packed_value
  0023a	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  0023d	66 89 04 4d 00
	00 00 00	 mov	 WORD PTR ?set_texture_pixel_lookup_table@@3PAGA[ecx*2], ax

; 442  : 				}

  00245	eb a9		 jmp	 SHORT $LN16@initialise
$LN17@initialise:

; 443  : 			}
; 444  : 			else

  00247	eb 5f		 jmp	 SHORT $LN2@initialise
$LN30@initialise:

; 445  : 			{
; 446  : 	
; 447  : 				for ( count = 0; count < 256; count++ )

  00249	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00250	eb 09		 jmp	 SHORT $LN21@initialise
$LN19@initialise:
  00252	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00255	83 c0 01	 add	 eax, 1
  00258	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN21@initialise:
  0025b	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _count$[ebp], 256 ; 00000100H
  00262	7d 44		 jge	 SHORT $LN2@initialise

; 448  : 				{
; 449  : 			
; 450  : 					rgb_colour
; 451  : 						colour;
; 452  : 				
; 453  : 					colour.r = texture->colour_table[count].peRed;

  00264	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00267	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0026a	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  0026d	8a 04 91	 mov	 al, BYTE PTR [ecx+edx*4]
  00270	88 45 e6	 mov	 BYTE PTR _colour$1[ebp+2], al

; 454  : 					colour.g = texture->colour_table[count].peGreen;

  00273	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00276	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00279	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  0027c	8a 44 91 01	 mov	 al, BYTE PTR [ecx+edx*4+1]
  00280	88 45 e5	 mov	 BYTE PTR _colour$1[ebp+1], al

; 455  : 					colour.b = texture->colour_table[count].peBlue;

  00283	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  00286	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00289	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  0028c	8a 44 91 02	 mov	 al, BYTE PTR [ecx+edx*4+2]
  00290	88 45 e4	 mov	 BYTE PTR _colour$1[ebp], al

; 456  : 				
; 457  : 					set_texture_pixel_32bit_lookup_table[count] = get_multiple_alpha_texture_32bit_value ( colour );

  00293	8b 45 e4	 mov	 eax, DWORD PTR _colour$1[ebp]
  00296	50		 push	 eax
  00297	e8 00 00 00 00	 call	 ?get_multiple_alpha_texture_32bit_value@@YGIUREAL_COLOUR@@@Z ; get_multiple_alpha_texture_32bit_value
  0029c	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  0029f	89 04 8d 00 00
	00 00		 mov	 DWORD PTR ?set_texture_pixel_32bit_lookup_table@@3PAIA[ecx*4], eax

; 458  : 				}

  002a6	eb aa		 jmp	 SHORT $LN19@initialise
$LN2@initialise:

; 459  : 			}
; 460  : 
; 461  : 			break;
; 462  : 		}
; 463  : 	}
; 464  : 
; 465  : 	set_texture_pixel_lookup_texture = texture;

  002a8	8b 45 08	 mov	 eax, DWORD PTR _texture$[ebp]
  002ab	a3 00 00 00 00	 mov	 DWORD PTR ?set_texture_pixel_lookup_texture@@3PAUSCREEN@@A, eax
$LN1@initialise:

; 466  : }

  002b0	5f		 pop	 edi
  002b1	5e		 pop	 esi
  002b2	5b		 pop	 ebx
  002b3	8b e5		 mov	 esp, ebp
  002b5	5d		 pop	 ebp
  002b6	c2 04 00	 ret	 4
?initialise_set_texture_pixel_lookup_table@@YGXPAUSCREEN@@@Z ENDP ; initialise_set_texture_pixel_lookup_table
_TEXT	ENDS
END
