; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\graphics\circle.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	?cos@@YGMM@Z					; cos
PUBLIC	?sin@@YGMM@Z					; sin
PUBLIC	?draw_circle@@YGXMMMUREAL_COLOUR@@@Z		; draw_circle
PUBLIC	?draw_arc@@YGXMMMIUREAL_COLOUR@@@Z		; draw_arc
PUBLIC	?draw_hatched_filled_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_hatched_filled_circle
PUBLIC	?draw_filled_circle@@YGXMMMHUREAL_COLOUR@@@Z	; draw_filled_circle
PUBLIC	?draw_outline_circle@@YGXMMMHUREAL_COLOUR@@@Z	; draw_outline_circle
PUBLIC	?__LINE__Var@?0??draw_arc@@YGXMMMIUREAL_COLOUR@@@Z@4JA ; `draw_arc'::`1'::__LINE__Var
PUBLIC	??_C@_0DH@LIEJAGLG@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0O@IILHNAKB@active_screen@		; `string'
PUBLIC	??_C@_0CC@BNNOEDBO@get_screen_locked?5?$CIactive_scree@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_circle@@YGXMMMUREAL_COLOUR@@@Z@4JA ; `draw_circle'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??draw_hatched_filled_circle@@YGXMMMUREAL_COLOUR@@@Z@4JA ; `draw_hatched_filled_circle'::`1'::__LINE__Var
PUBLIC	??_C@_0CE@KMBKIAKC@get_screen_locked?5?$CI?5active_scre@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_filled_circle@@YGXMMMHUREAL_COLOUR@@@Z@4JA ; `draw_filled_circle'::`1'::__LINE__Var
PUBLIC	??_C@_0BA@PELMKNBF@d3d_in_3d_scene@		; `string'
PUBLIC	?__LINE__Var@?0??draw_outline_circle@@YGXMMMHUREAL_COLOUR@@@Z@4JA ; `draw_outline_circle'::`1'::__LINE__Var
PUBLIC	__real@00000000
PUBLIC	__real@3dcccccd
PUBLIC	__real@40c90fdb
PUBLIC	__real@41200000
EXTRN	_cos:PROC
EXTRN	_sin:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z:PROC	; clip_3d_polygon
EXTRN	?get_screen_data@@YGPAEPAUSCREEN@@@Z:PROC	; get_screen_data
EXTRN	?get_screen_pitch@@YGHPAUSCREEN@@@Z:PROC	; get_screen_pitch
EXTRN	?get_screen_locked@@YGHPAUSCREEN@@@Z:PROC	; get_screen_locked
EXTRN	?generate_outcode@@YGHMM@Z:PROC			; generate_outcode
EXTRN	?draw_line_primitive@@YGXPAU_D3DTLVERTEX@@@Z:PROC ; draw_line_primitive
EXTRN	?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z:PROC	; set_d3d_alpha_fog_zbuffer
EXTRN	?set_d3d_zbuffer_comparison@@YGXH@Z:PROC	; set_d3d_zbuffer_comparison
EXTRN	?set_d3d_plain_renderstate@@YGXXZ:PROC		; set_d3d_plain_renderstate
EXTRN	?get_d3d_line_vertices_points_address@@YGPAU_D3DTLVERTEX@@XZ:PROC ; get_d3d_line_vertices_points_address
EXTRN	?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z:PROC ; draw_wbuffered_plain_polygon
EXTRN	?d3d_in_3d_scene@@3HA:DWORD			; d3d_in_3d_scene
EXTRN	?active_int_viewport@@3UINT_VIEWPORT@@A:BYTE	; active_int_viewport
EXTRN	?clip_3d_coord@@3HA:DWORD			; clip_3d_coord
EXTRN	?active_screen@@3PAUSCREEN@@A:DWORD		; active_screen
EXTRN	?active_screen_red_mask@@3HA:DWORD		; active_screen_red_mask
EXTRN	?active_screen_red_shift@@3HA:DWORD		; active_screen_red_shift
EXTRN	?active_screen_green_mask@@3HA:DWORD		; active_screen_green_mask
EXTRN	?active_screen_green_shift@@3HA:DWORD		; active_screen_green_shift
EXTRN	?active_screen_blue_mask@@3HA:DWORD		; active_screen_blue_mask
EXTRN	?active_screen_blue_shift@@3HA:DWORD		; active_screen_blue_shift
EXTRN	?active_screen_alpha_mask@@3HA:DWORD		; active_screen_alpha_mask
EXTRN	?active_screen_alpha_shift@@3HA:DWORD		; active_screen_alpha_shift
EXTRN	?graphics_hatch_pattern@@3PAIA:BYTE		; graphics_hatch_pattern
EXTRN	__fltused:DWORD
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_outline_circle@@YGXMMMHUREAL_COLOUR@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_outline_circle@@YGXMMMHUREAL_COLOUR@@@Z@4JA DD 052dH ; `draw_outline_circle'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BA@PELMKNBF@d3d_in_3d_scene@
CONST	SEGMENT
??_C@_0BA@PELMKNBF@d3d_in_3d_scene@ DB 'd3d_in_3d_scene', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_filled_circle@@YGXMMMHUREAL_COLOUR@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_filled_circle@@YGXMMMHUREAL_COLOUR@@@Z@4JA DD 04afH ; `draw_filled_circle'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CE@KMBKIAKC@get_screen_locked?5?$CI?5active_scre@
CONST	SEGMENT
??_C@_0CE@KMBKIAKC@get_screen_locked?5?$CI?5active_scre@ DB 'get_screen_l'
	DB	'ocked ( active_screen )', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_hatched_filled_circle@@YGXMMMUREAL_COLOUR@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_hatched_filled_circle@@YGXMMMUREAL_COLOUR@@@Z@4JA DD 0263H ; `draw_hatched_filled_circle'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_circle@@YGXMMMUREAL_COLOUR@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_circle@@YGXMMMUREAL_COLOUR@@@Z@4JA DD 0171H ; `draw_circle'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CC@BNNOEDBO@get_screen_locked?5?$CIactive_scree@
CONST	SEGMENT
??_C@_0CC@BNNOEDBO@get_screen_locked?5?$CIactive_scree@ DB 'get_screen_lo'
	DB	'cked (active_screen)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IILHNAKB@active_screen@
CONST	SEGMENT
??_C@_0O@IILHNAKB@active_screen@ DB 'active_screen', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@LIEJAGLG@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DH@LIEJAGLG@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\graphics\circle.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_arc@@YGXMMMIUREAL_COLOUR@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_arc@@YGXMMMIUREAL_COLOUR@@@Z@4JA DD 07fH ; `draw_arc'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\circle.c
;	COMDAT ?draw_outline_circle@@YGXMMMHUREAL_COLOUR@@@Z
_TEXT	SEGMENT
tv306 = -256						; size = 4
tv300 = -256						; size = 4
_point2$1 = -188					; size = 4
_point1$2 = -184					; size = 4
_vertices$3 = -180					; size = 4
_outcode2$4 = -176					; size = 4
_outcode$5 = -172					; size = 4
_specular$ = -168					; size = 4
_points$ = -164						; size = 128
_poly$ = -36						; size = 4
_y2$ = -32						; size = 4
_x2$ = -28						; size = 4
_y1$ = -24						; size = 4
_x1$ = -20						; size = 4
_sin_radius$ = -16					; size = 4
_cos_radius$ = -12					; size = 4
_angle$ = -8						; size = 4
_angle_step$ = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_radius$ = 16						; size = 4
_steps$ = 20						; size = 4
_col$ = 24						; size = 4
?draw_outline_circle@@YGXMMMHUREAL_COLOUR@@@Z PROC	; draw_outline_circle, COMDAT

; 1325 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1326 : 
; 1327 : 	float
; 1328 : 		angle_step,
; 1329 : 		angle,
; 1330 : 		cos_radius,
; 1331 : 		sin_radius,
; 1332 : 		x1, y1,
; 1333 : 		x2, y2;
; 1334 : 
; 1335 : 	vertex
; 1336 : 		*poly,
; 1337 : 		points[2];
; 1338 : 
; 1339 : 	rgb_colour
; 1340 : 		specular;
; 1341 : 
; 1342 : 	ASSERT ( d3d_in_3d_scene );

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_in_3d_scene@@3HA, 0 ; d3d_in_3d_scene
  00013	75 18		 jne	 SHORT $LN5@draw_outli
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_outline_circle@@YGXMMMHUREAL_COLOUR@@@Z@4JA
  0001a	83 c0 11	 add	 eax, 17			; 00000011H
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@LIEJAGLG@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PELMKNBF@d3d_in_3d_scene@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@draw_outli:

; 1343 : 
; 1344 : 	angle_step = PI2 / steps;

  0002d	f3 0f 2a 45 14	 cvtsi2ss xmm0, DWORD PTR _steps$[ebp]
  00032	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40c90fdb
  0003a	f3 0f 5e c8	 divss	 xmm1, xmm0
  0003e	f3 0f 11 4d fc	 movss	 DWORD PTR _angle_step$[ebp], xmm1

; 1345 : 
; 1346 : 	//
; 1347 : 	// Set alpha-blending
; 1348 : 	//
; 1349 : 
; 1350 : 	if ( col.alpha != 255 )

  00043	0f b6 45 1b	 movzx	 eax, BYTE PTR _col$[ebp+3]
  00047	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0004c	74 0f		 je	 SHORT $LN6@draw_outli

; 1351 : 	{
; 1352 : 
; 1353 : 		set_d3d_alpha_fog_zbuffer ( TRUE, FALSE, FALSE, FALSE );

  0004e	6a 00		 push	 0
  00050	6a 00		 push	 0
  00052	6a 00		 push	 0
  00054	6a 01		 push	 1
  00056	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer

; 1354 : 	}
; 1355 : 	else

  0005b	eb 0d		 jmp	 SHORT $LN7@draw_outli
$LN6@draw_outli:

; 1356 : 	{
; 1357 : 
; 1358 : 		set_d3d_alpha_fog_zbuffer ( FALSE, FALSE, FALSE, FALSE );

  0005d	6a 00		 push	 0
  0005f	6a 00		 push	 0
  00061	6a 00		 push	 0
  00063	6a 00		 push	 0
  00065	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer
$LN7@draw_outli:

; 1359 : 	}
; 1360 : 
; 1361 : 	//
; 1362 : 	// Turn off texturing
; 1363 : 	//
; 1364 : 
; 1365 : 	set_d3d_plain_renderstate ();

  0006a	e8 00 00 00 00	 call	 ?set_d3d_plain_renderstate@@YGXXZ ; set_d3d_plain_renderstate

; 1366 : 
; 1367 : 	set_d3d_zbuffer_comparison ( FALSE );

  0006f	6a 00		 push	 0
  00071	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 1368 : 
; 1369 : 	specular.r = 0;

  00076	c6 85 5a ff ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+2], 0

; 1370 : 	specular.g = 0;

  0007d	c6 85 59 ff ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+1], 0

; 1371 : 	specular.b = 0;

  00084	c6 85 58 ff ff
	ff 00		 mov	 BYTE PTR _specular$[ebp], 0

; 1372 : 	specular.a = 255;

  0008b	c6 85 5b ff ff
	ff ff		 mov	 BYTE PTR _specular$[ebp+3], 255 ; 000000ffH

; 1373 : 
; 1374 : 	x2 = x + 0;

  00092	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00097	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@00000000
  0009f	f3 0f 11 45 e4	 movss	 DWORD PTR _x2$[ebp], xmm0

; 1375 : 	y2 = y + radius;

  000a4	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  000a9	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _radius$[ebp]
  000ae	f3 0f 11 45 e0	 movss	 DWORD PTR _y2$[ebp], xmm0

; 1376 : 
; 1377 : 	for ( angle = angle_step; angle < PI2; angle += angle_step )

  000b3	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _angle_step$[ebp]
  000b8	f3 0f 11 45 f8	 movss	 DWORD PTR _angle$[ebp], xmm0
  000bd	eb 0f		 jmp	 SHORT $LN4@draw_outli
$LN2@draw_outli:
  000bf	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _angle$[ebp]
  000c4	f3 0f 58 45 fc	 addss	 xmm0, DWORD PTR _angle_step$[ebp]
  000c9	f3 0f 11 45 f8	 movss	 DWORD PTR _angle$[ebp], xmm0
$LN4@draw_outli:
  000ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  000d6	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _angle$[ebp]
  000da	0f 86 ec 03 00
	00		 jbe	 $LN3@draw_outli

; 1378 : 	{
; 1379 : 
; 1380 : 		int
; 1381 : 			outcode,
; 1382 : 			outcode2;
; 1383 : 
; 1384 : 		x1 = x2;

  000e0	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x2$[ebp]
  000e5	f3 0f 11 45 ec	 movss	 DWORD PTR _x1$[ebp], xmm0

; 1385 : 		y1 = y2;

  000ea	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  000ef	f3 0f 11 45 e8	 movss	 DWORD PTR _y1$[ebp], xmm0

; 1386 : 
; 1387 : 		cos_radius = cos ( angle ) * radius;

  000f4	51		 push	 ecx
  000f5	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _angle$[ebp]
  000fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ff	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  00104	d9 9d 00 ff ff
	ff		 fstp	 DWORD PTR tv300[ebp]
  0010a	f3 0f 10 85 00
	ff ff ff	 movss	 xmm0, DWORD PTR tv300[ebp]
  00112	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _radius$[ebp]
  00117	f3 0f 11 45 f4	 movss	 DWORD PTR _cos_radius$[ebp], xmm0

; 1388 : 		sin_radius = sin ( angle ) * radius;

  0011c	51		 push	 ecx
  0011d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _angle$[ebp]
  00122	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00127	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  0012c	d9 9d 00 ff ff
	ff		 fstp	 DWORD PTR tv306[ebp]
  00132	f3 0f 10 85 00
	ff ff ff	 movss	 xmm0, DWORD PTR tv306[ebp]
  0013a	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _radius$[ebp]
  0013f	f3 0f 11 45 f0	 movss	 DWORD PTR _sin_radius$[ebp], xmm0

; 1389 : 
; 1390 : 		x2 = x + sin_radius;

  00144	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00149	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _sin_radius$[ebp]
  0014e	f3 0f 11 45 e4	 movss	 DWORD PTR _x2$[ebp], xmm0

; 1391 : 		y2 = y + cos_radius;

  00153	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  00158	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _cos_radius$[ebp]
  0015d	f3 0f 11 45 e0	 movss	 DWORD PTR _y2$[ebp], xmm0

; 1392 : 
; 1393 : 		points[0].i = x2;

  00162	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00167	6b c8 00	 imul	 ecx, eax, 0
  0016a	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0016f	f3 0f 11 84 0d
	6c ff ff ff	 movss	 DWORD PTR _points$[ebp+ecx+16], xmm0

; 1394 : 		points[0].j = y2;

  00178	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0017d	6b c8 00	 imul	 ecx, eax, 0
  00180	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00185	f3 0f 11 84 0d
	70 ff ff ff	 movss	 DWORD PTR _points$[ebp+ecx+20], xmm0

; 1395 : 
; 1396 : 		points[1].i = x1;

  0018e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00193	c1 e0 00	 shl	 eax, 0
  00196	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0019b	f3 0f 11 84 05
	6c ff ff ff	 movss	 DWORD PTR _points$[ebp+eax+16], xmm0

; 1397 : 		points[1].j = y1;

  001a4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001a9	c1 e0 00	 shl	 eax, 0
  001ac	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y1$[ebp]
  001b1	f3 0f 11 84 05
	70 ff ff ff	 movss	 DWORD PTR _points$[ebp+eax+20], xmm0

; 1398 : 
; 1399 : 		points[0].q = 0.1;

  001ba	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001bf	6b c8 00	 imul	 ecx, eax, 0
  001c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  001ca	f3 0f 11 84 0d
	68 ff ff ff	 movss	 DWORD PTR _points$[ebp+ecx+12], xmm0

; 1400 : 		points[0].z = 10;

  001d3	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001d8	6b c8 00	 imul	 ecx, eax, 0
  001db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  001e3	f3 0f 11 84 0d
	64 ff ff ff	 movss	 DWORD PTR _points$[ebp+ecx+8], xmm0

; 1401 : 		points[1].q = 0.1;

  001ec	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001f1	c1 e0 00	 shl	 eax, 0
  001f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  001fc	f3 0f 11 84 05
	68 ff ff ff	 movss	 DWORD PTR _points$[ebp+eax+12], xmm0

; 1402 : 		points[1].z = 10;

  00205	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0020a	c1 e0 00	 shl	 eax, 0
  0020d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00215	f3 0f 11 84 05
	64 ff ff ff	 movss	 DWORD PTR _points$[ebp+eax+8], xmm0

; 1403 : 
; 1404 : 		points[0].next_vertex = &points[1];

  0021e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00223	c1 e0 00	 shl	 eax, 0
  00226	8d 8c 05 5c ff
	ff ff		 lea	 ecx, DWORD PTR _points$[ebp+eax]
  0022d	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00232	6b c2 00	 imul	 eax, edx, 0
  00235	89 4c 05 84	 mov	 DWORD PTR _points$[ebp+eax+40], ecx

; 1405 : 		points[1].next_vertex = NULL;

  00239	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0023e	c1 e0 00	 shl	 eax, 0
  00241	c7 44 05 84 00
	00 00 00	 mov	 DWORD PTR _points$[ebp+eax+40], 0

; 1406 : 
; 1407 : 		points[0].outcode = generate_outcode ( points[0].i, points[0].j );

  00249	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0024e	6b c8 00	 imul	 ecx, eax, 0
  00251	51		 push	 ecx
  00252	f3 0f 10 84 0d
	70 ff ff ff	 movss	 xmm0, DWORD PTR _points$[ebp+ecx+20]
  0025b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00260	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00265	6b c2 00	 imul	 eax, edx, 0
  00268	51		 push	 ecx
  00269	f3 0f 10 84 05
	6c ff ff ff	 movss	 xmm0, DWORD PTR _points$[ebp+eax+16]
  00272	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00277	e8 00 00 00 00	 call	 ?generate_outcode@@YGHMM@Z ; generate_outcode
  0027c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00281	6b d1 00	 imul	 edx, ecx, 0
  00284	88 44 15 88	 mov	 BYTE PTR _points$[ebp+edx+44], al

; 1408 : 		points[1].outcode = generate_outcode ( points[1].i, points[1].j );

  00288	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0028d	c1 e0 00	 shl	 eax, 0
  00290	51		 push	 ecx
  00291	f3 0f 10 84 05
	70 ff ff ff	 movss	 xmm0, DWORD PTR _points$[ebp+eax+20]
  0029a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029f	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  002a4	c1 e1 00	 shl	 ecx, 0
  002a7	51		 push	 ecx
  002a8	f3 0f 10 84 0d
	6c ff ff ff	 movss	 xmm0, DWORD PTR _points$[ebp+ecx+16]
  002b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b6	e8 00 00 00 00	 call	 ?generate_outcode@@YGHMM@Z ; generate_outcode
  002bb	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  002c0	c1 e2 00	 shl	 edx, 0
  002c3	88 44 15 88	 mov	 BYTE PTR _points$[ebp+edx+44], al

; 1409 : 
; 1410 : 		outcode = points[0].outcode;

  002c7	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002cc	6b c8 00	 imul	 ecx, eax, 0
  002cf	0f b6 54 0d 88	 movzx	 edx, BYTE PTR _points$[ebp+ecx+44]
  002d4	89 95 54 ff ff
	ff		 mov	 DWORD PTR _outcode$5[ebp], edx

; 1411 : 		outcode2 = points[0].outcode;

  002da	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002df	6b c8 00	 imul	 ecx, eax, 0
  002e2	0f b6 54 0d 88	 movzx	 edx, BYTE PTR _points$[ebp+ecx+44]
  002e7	89 95 50 ff ff
	ff		 mov	 DWORD PTR _outcode2$4[ebp], edx

; 1412 : 		outcode |= points[1].outcode;

  002ed	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002f2	c1 e0 00	 shl	 eax, 0
  002f5	0f b6 4c 05 88	 movzx	 ecx, BYTE PTR _points$[ebp+eax+44]
  002fa	0b 8d 54 ff ff
	ff		 or	 ecx, DWORD PTR _outcode$5[ebp]
  00300	89 8d 54 ff ff
	ff		 mov	 DWORD PTR _outcode$5[ebp], ecx

; 1413 : 		outcode2 &= points[1].outcode;

  00306	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0030b	c1 e0 00	 shl	 eax, 0
  0030e	0f b6 4c 05 88	 movzx	 ecx, BYTE PTR _points$[ebp+eax+44]
  00313	23 8d 50 ff ff
	ff		 and	 ecx, DWORD PTR _outcode2$4[ebp]
  00319	89 8d 50 ff ff
	ff		 mov	 DWORD PTR _outcode2$4[ebp], ecx

; 1414 : 
; 1415 : 		if ( outcode2 == 0 )

  0031f	0f 85 a2 01 00
	00		 jne	 $LN10@draw_outli

; 1416 : 		{
; 1417 : 
; 1418 : 			poly = &points[0];

  00325	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0032a	6b c8 00	 imul	 ecx, eax, 0
  0032d	8d 94 0d 5c ff
	ff ff		 lea	 edx, DWORD PTR _points$[ebp+ecx]
  00334	89 55 dc	 mov	 DWORD PTR _poly$[ebp], edx

; 1419 : 
; 1420 : 			if ( outcode )

  00337	83 bd 54 ff ff
	ff 00		 cmp	 DWORD PTR _outcode$5[ebp], 0
  0033e	74 1d		 je	 SHORT $LN9@draw_outli

; 1421 : 			{
; 1422 : 
; 1423 : 				clip_3d_coord = 0;

  00340	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, 0 ; clip_3d_coord

; 1424 : 
; 1425 : 				poly = clip_3d_polygon ( poly, outcode );

  0034a	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _outcode$5[ebp]
  00350	50		 push	 eax
  00351	8b 4d dc	 mov	 ecx, DWORD PTR _poly$[ebp]
  00354	51		 push	 ecx
  00355	e8 00 00 00 00	 call	 ?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z ; clip_3d_polygon
  0035a	89 45 dc	 mov	 DWORD PTR _poly$[ebp], eax
$LN9@draw_outli:

; 1426 : 			}
; 1427 : 
; 1428 : 			if ( poly )

  0035d	83 7d dc 00	 cmp	 DWORD PTR _poly$[ebp], 0
  00361	0f 84 60 01 00
	00		 je	 $LN10@draw_outli

; 1429 : 			{
; 1430 : 
; 1431 : 				LPD3DTLVERTEX
; 1432 : 					vertices;
; 1433 : 
; 1434 : 				vertex
; 1435 : 					*point1,
; 1436 : 					*point2;
; 1437 : 
; 1438 : 				vertices = get_d3d_line_vertices_points_address ();

  00367	e8 00 00 00 00	 call	 ?get_d3d_line_vertices_points_address@@YGPAU_D3DTLVERTEX@@XZ ; get_d3d_line_vertices_points_address
  0036c	89 85 4c ff ff
	ff		 mov	 DWORD PTR _vertices$3[ebp], eax

; 1439 : 
; 1440 : 				point1 = poly->next_vertex;

  00372	8b 45 dc	 mov	 eax, DWORD PTR _poly$[ebp]
  00375	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00378	89 8d 48 ff ff
	ff		 mov	 DWORD PTR _point1$2[ebp], ecx

; 1441 : 				point2 = poly;

  0037e	8b 45 dc	 mov	 eax, DWORD PTR _poly$[ebp]
  00381	89 85 44 ff ff
	ff		 mov	 DWORD PTR _point2$1[ebp], eax

; 1442 : 
; 1443 : 				vertices[0].sx = point1->i;

  00387	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0038c	6b c8 00	 imul	 ecx, eax, 0
  0038f	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _vertices$3[ebp]
  00395	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _point1$2[ebp]
  0039b	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0039e	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 1444 : 				vertices[0].sy = point1->j;

  003a1	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  003a6	6b c8 00	 imul	 ecx, eax, 0
  003a9	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _vertices$3[ebp]
  003af	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _point1$2[ebp]
  003b5	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  003b8	89 44 0a 04	 mov	 DWORD PTR [edx+ecx+4], eax

; 1445 : 				vertices[0].rhw = 0.1;

  003bc	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  003c1	6b c8 00	 imul	 ecx, eax, 0
  003c4	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _vertices$3[ebp]
  003ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  003d2	f3 0f 11 44 0a
	0c		 movss	 DWORD PTR [edx+ecx+12], xmm0

; 1446 : 				vertices[0].sz = 0.1;

  003d8	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  003dd	6b c8 00	 imul	 ecx, eax, 0
  003e0	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _vertices$3[ebp]
  003e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  003ee	f3 0f 11 44 0a
	08		 movss	 DWORD PTR [edx+ecx+8], xmm0

; 1447 : 				vertices[0].color = col.colour;

  003f4	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  003f9	6b c8 00	 imul	 ecx, eax, 0
  003fc	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _vertices$3[ebp]
  00402	8b 45 18	 mov	 eax, DWORD PTR _col$[ebp]
  00405	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax

; 1448 : 				vertices[0].specular = specular.colour;

  00409	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0040e	6b c8 00	 imul	 ecx, eax, 0
  00411	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _vertices$3[ebp]
  00417	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _specular$[ebp]
  0041d	89 44 0a 14	 mov	 DWORD PTR [edx+ecx+20], eax

; 1449 : 
; 1450 : 				vertices[1].sx = point2->i;

  00421	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00426	c1 e0 00	 shl	 eax, 0
  00429	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _vertices$3[ebp]
  0042f	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR _point2$1[ebp]
  00435	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  00438	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 1451 : 				vertices[1].sy = point2->j;

  0043b	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00440	c1 e0 00	 shl	 eax, 0
  00443	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _vertices$3[ebp]
  00449	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR _point2$1[ebp]
  0044f	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00452	89 54 01 04	 mov	 DWORD PTR [ecx+eax+4], edx

; 1452 : 				vertices[1].rhw = 0.1;

  00456	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0045b	c1 e0 00	 shl	 eax, 0
  0045e	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _vertices$3[ebp]
  00464	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0046c	f3 0f 11 44 01
	0c		 movss	 DWORD PTR [ecx+eax+12], xmm0

; 1453 : 				vertices[1].sz = 0.1;

  00472	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00477	c1 e0 00	 shl	 eax, 0
  0047a	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _vertices$3[ebp]
  00480	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00488	f3 0f 11 44 01
	08		 movss	 DWORD PTR [ecx+eax+8], xmm0

; 1454 : 				vertices[1].color = col.colour;

  0048e	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00493	c1 e0 00	 shl	 eax, 0
  00496	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _vertices$3[ebp]
  0049c	8b 55 18	 mov	 edx, DWORD PTR _col$[ebp]
  0049f	89 54 01 10	 mov	 DWORD PTR [ecx+eax+16], edx

; 1455 : 				vertices[1].specular = specular.colour;

  004a3	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  004a8	c1 e0 00	 shl	 eax, 0
  004ab	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _vertices$3[ebp]
  004b1	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _specular$[ebp]
  004b7	89 54 01 14	 mov	 DWORD PTR [ecx+eax+20], edx

; 1456 : 
; 1457 : 				draw_line_primitive ( vertices );

  004bb	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _vertices$3[ebp]
  004c1	50		 push	 eax
  004c2	e8 00 00 00 00	 call	 ?draw_line_primitive@@YGXPAU_D3DTLVERTEX@@@Z ; draw_line_primitive
$LN10@draw_outli:

; 1458 : 			}
; 1459 : 		}
; 1460 : 	}

  004c7	e9 f3 fb ff ff	 jmp	 $LN2@draw_outli
$LN3@draw_outli:

; 1461 : }

  004cc	5f		 pop	 edi
  004cd	5e		 pop	 esi
  004ce	5b		 pop	 ebx
  004cf	8b e5		 mov	 esp, ebp
  004d1	5d		 pop	 ebp
  004d2	c2 14 00	 ret	 20			; 00000014H
?draw_outline_circle@@YGXMMMHUREAL_COLOUR@@@Z ENDP	; draw_outline_circle
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\circle.c
;	COMDAT ?draw_filled_circle@@YGXMMMHUREAL_COLOUR@@@Z
_TEXT	SEGMENT
tv306 = -308						; size = 4
tv300 = -308						; size = 4
_outcode2$1 = -240					; size = 4
_outcode$2 = -236					; size = 4
_specular$ = -232					; size = 4
_points$ = -228						; size = 192
_poly$ = -36						; size = 4
_y2$ = -32						; size = 4
_x2$ = -28						; size = 4
_y1$ = -24						; size = 4
_x1$ = -20						; size = 4
_sin_radius$ = -16					; size = 4
_cos_radius$ = -12					; size = 4
_angle$ = -8						; size = 4
_angle_step$ = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_radius$ = 16						; size = 4
_steps$ = 20						; size = 4
_col$ = 24						; size = 4
?draw_filled_circle@@YGXMMMHUREAL_COLOUR@@@Z PROC	; draw_filled_circle, COMDAT

; 1199 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 34 01 00
	00		 sub	 esp, 308		; 00000134H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1200 : 
; 1201 : 	float
; 1202 : 		angle_step,
; 1203 : 		angle,
; 1204 : 		cos_radius,
; 1205 : 		sin_radius,
; 1206 : 		x1, y1,
; 1207 : 		x2, y2;
; 1208 : 
; 1209 : 	vertex
; 1210 : 		*poly,
; 1211 : 		points[3];
; 1212 : 
; 1213 : 	rgb_colour
; 1214 : 		specular;
; 1215 : 
; 1216 : 	ASSERT ( d3d_in_3d_scene );

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_in_3d_scene@@3HA, 0 ; d3d_in_3d_scene
  00013	75 18		 jne	 SHORT $LN5@draw_fille
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_filled_circle@@YGXMMMHUREAL_COLOUR@@@Z@4JA
  0001a	83 c0 11	 add	 eax, 17			; 00000011H
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@LIEJAGLG@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PELMKNBF@d3d_in_3d_scene@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@draw_fille:

; 1217 : 
; 1218 : 	angle_step = PI2 / steps;

  0002d	f3 0f 2a 45 14	 cvtsi2ss xmm0, DWORD PTR _steps$[ebp]
  00032	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40c90fdb
  0003a	f3 0f 5e c8	 divss	 xmm1, xmm0
  0003e	f3 0f 11 4d fc	 movss	 DWORD PTR _angle_step$[ebp], xmm1

; 1219 : 
; 1220 : 	//
; 1221 : 	// Set alpha-blending
; 1222 : 	//
; 1223 : 
; 1224 : 	if ( col.alpha != 255 )

  00043	0f b6 45 1b	 movzx	 eax, BYTE PTR _col$[ebp+3]
  00047	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0004c	74 0f		 je	 SHORT $LN6@draw_fille

; 1225 : 	{
; 1226 : 
; 1227 : 		set_d3d_alpha_fog_zbuffer ( TRUE, FALSE, FALSE, FALSE );

  0004e	6a 00		 push	 0
  00050	6a 00		 push	 0
  00052	6a 00		 push	 0
  00054	6a 01		 push	 1
  00056	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer

; 1228 : 	}
; 1229 : 	else

  0005b	eb 0d		 jmp	 SHORT $LN7@draw_fille
$LN6@draw_fille:

; 1230 : 	{
; 1231 : 
; 1232 : 		set_d3d_alpha_fog_zbuffer ( FALSE, FALSE, FALSE, FALSE );

  0005d	6a 00		 push	 0
  0005f	6a 00		 push	 0
  00061	6a 00		 push	 0
  00063	6a 00		 push	 0
  00065	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer
$LN7@draw_fille:

; 1233 : 	}
; 1234 : 
; 1235 : 	//
; 1236 : 	// Turn off texturing
; 1237 : 	//
; 1238 : 
; 1239 : 	set_d3d_plain_renderstate ();

  0006a	e8 00 00 00 00	 call	 ?set_d3d_plain_renderstate@@YGXXZ ; set_d3d_plain_renderstate

; 1240 : 
; 1241 : 	set_d3d_zbuffer_comparison ( FALSE );

  0006f	6a 00		 push	 0
  00071	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 1242 : 
; 1243 : 	specular.r = 0;

  00076	c6 85 1a ff ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+2], 0

; 1244 : 	specular.g = 0;

  0007d	c6 85 19 ff ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+1], 0

; 1245 : 	specular.b = 0;

  00084	c6 85 18 ff ff
	ff 00		 mov	 BYTE PTR _specular$[ebp], 0

; 1246 : 	specular.a = 255;

  0008b	c6 85 1b ff ff
	ff ff		 mov	 BYTE PTR _specular$[ebp+3], 255 ; 000000ffH

; 1247 : 
; 1248 : 	x2 = x + 0;

  00092	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00097	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@00000000
  0009f	f3 0f 11 45 e4	 movss	 DWORD PTR _x2$[ebp], xmm0

; 1249 : 	y2 = y + radius;

  000a4	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  000a9	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _radius$[ebp]
  000ae	f3 0f 11 45 e0	 movss	 DWORD PTR _y2$[ebp], xmm0

; 1250 : 
; 1251 : 	for ( angle = angle_step; angle < PI2; angle += angle_step )

  000b3	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _angle_step$[ebp]
  000b8	f3 0f 11 45 f8	 movss	 DWORD PTR _angle$[ebp], xmm0
  000bd	eb 0f		 jmp	 SHORT $LN4@draw_fille
$LN2@draw_fille:
  000bf	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _angle$[ebp]
  000c4	f3 0f 58 45 fc	 addss	 xmm0, DWORD PTR _angle_step$[ebp]
  000c9	f3 0f 11 45 f8	 movss	 DWORD PTR _angle$[ebp], xmm0
$LN4@draw_fille:
  000ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  000d6	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _angle$[ebp]
  000da	0f 86 9b 03 00
	00		 jbe	 $LN3@draw_fille

; 1252 : 	{
; 1253 : 
; 1254 : 		int
; 1255 : 			outcode,
; 1256 : 			outcode2;
; 1257 : 
; 1258 : 		x1 = x2;

  000e0	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x2$[ebp]
  000e5	f3 0f 11 45 ec	 movss	 DWORD PTR _x1$[ebp], xmm0

; 1259 : 		y1 = y2;

  000ea	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  000ef	f3 0f 11 45 e8	 movss	 DWORD PTR _y1$[ebp], xmm0

; 1260 : 
; 1261 : 		cos_radius = cos ( angle ) * radius;

  000f4	51		 push	 ecx
  000f5	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _angle$[ebp]
  000fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ff	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  00104	d9 9d cc fe ff
	ff		 fstp	 DWORD PTR tv300[ebp]
  0010a	f3 0f 10 85 cc
	fe ff ff	 movss	 xmm0, DWORD PTR tv300[ebp]
  00112	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _radius$[ebp]
  00117	f3 0f 11 45 f4	 movss	 DWORD PTR _cos_radius$[ebp], xmm0

; 1262 : 		sin_radius = sin ( angle ) * radius;

  0011c	51		 push	 ecx
  0011d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _angle$[ebp]
  00122	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00127	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  0012c	d9 9d cc fe ff
	ff		 fstp	 DWORD PTR tv306[ebp]
  00132	f3 0f 10 85 cc
	fe ff ff	 movss	 xmm0, DWORD PTR tv306[ebp]
  0013a	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _radius$[ebp]
  0013f	f3 0f 11 45 f0	 movss	 DWORD PTR _sin_radius$[ebp], xmm0

; 1263 : 
; 1264 : 		x2 = x + sin_radius;

  00144	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00149	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _sin_radius$[ebp]
  0014e	f3 0f 11 45 e4	 movss	 DWORD PTR _x2$[ebp], xmm0

; 1265 : 		y2 = y + cos_radius;

  00153	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  00158	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _cos_radius$[ebp]
  0015d	f3 0f 11 45 e0	 movss	 DWORD PTR _y2$[ebp], xmm0

; 1266 : 
; 1267 : 		points[0].i = x;

  00162	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00167	6b c8 00	 imul	 ecx, eax, 0
  0016a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  0016f	f3 0f 11 84 0d
	2c ff ff ff	 movss	 DWORD PTR _points$[ebp+ecx+16], xmm0

; 1268 : 		points[0].j = y;

  00178	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0017d	6b c8 00	 imul	 ecx, eax, 0
  00180	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  00185	f3 0f 11 84 0d
	30 ff ff ff	 movss	 DWORD PTR _points$[ebp+ecx+20], xmm0

; 1269 : 
; 1270 : 		points[1].i = x2;

  0018e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00193	c1 e0 00	 shl	 eax, 0
  00196	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0019b	f3 0f 11 84 05
	2c ff ff ff	 movss	 DWORD PTR _points$[ebp+eax+16], xmm0

; 1271 : 		points[1].j = y2;

  001a4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001a9	c1 e0 00	 shl	 eax, 0
  001ac	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  001b1	f3 0f 11 84 05
	30 ff ff ff	 movss	 DWORD PTR _points$[ebp+eax+20], xmm0

; 1272 : 
; 1273 : 		points[2].i = x1;

  001ba	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001bf	d1 e0		 shl	 eax, 1
  001c1	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x1$[ebp]
  001c6	f3 0f 11 84 05
	2c ff ff ff	 movss	 DWORD PTR _points$[ebp+eax+16], xmm0

; 1274 : 		points[2].j = y1;

  001cf	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001d4	d1 e0		 shl	 eax, 1
  001d6	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y1$[ebp]
  001db	f3 0f 11 84 05
	30 ff ff ff	 movss	 DWORD PTR _points$[ebp+eax+20], xmm0

; 1275 : 
; 1276 : 		points[0].q = 0.1;

  001e4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001e9	6b c8 00	 imul	 ecx, eax, 0
  001ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  001f4	f3 0f 11 84 0d
	28 ff ff ff	 movss	 DWORD PTR _points$[ebp+ecx+12], xmm0

; 1277 : 		points[0].z = 10;

  001fd	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00202	6b c8 00	 imul	 ecx, eax, 0
  00205	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  0020d	f3 0f 11 84 0d
	24 ff ff ff	 movss	 DWORD PTR _points$[ebp+ecx+8], xmm0

; 1278 : 		points[1].q = 0.1;

  00216	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0021b	c1 e0 00	 shl	 eax, 0
  0021e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00226	f3 0f 11 84 05
	28 ff ff ff	 movss	 DWORD PTR _points$[ebp+eax+12], xmm0

; 1279 : 		points[1].z = 10;

  0022f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00234	c1 e0 00	 shl	 eax, 0
  00237	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  0023f	f3 0f 11 84 05
	24 ff ff ff	 movss	 DWORD PTR _points$[ebp+eax+8], xmm0

; 1280 : 		points[2].q = 0.1;

  00248	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0024d	d1 e0		 shl	 eax, 1
  0024f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00257	f3 0f 11 84 05
	28 ff ff ff	 movss	 DWORD PTR _points$[ebp+eax+12], xmm0

; 1281 : 		points[2].z = 10;

  00260	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00265	d1 e0		 shl	 eax, 1
  00267	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  0026f	f3 0f 11 84 05
	24 ff ff ff	 movss	 DWORD PTR _points$[ebp+eax+8], xmm0

; 1282 : 
; 1283 : 		points[0].next_vertex = &points[1];

  00278	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0027d	c1 e0 00	 shl	 eax, 0
  00280	8d 8c 05 1c ff
	ff ff		 lea	 ecx, DWORD PTR _points$[ebp+eax]
  00287	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0028c	6b c2 00	 imul	 eax, edx, 0
  0028f	89 8c 05 44 ff
	ff ff		 mov	 DWORD PTR _points$[ebp+eax+40], ecx

; 1284 : 		points[1].next_vertex = &points[2];

  00296	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0029b	d1 e0		 shl	 eax, 1
  0029d	8d 8c 05 1c ff
	ff ff		 lea	 ecx, DWORD PTR _points$[ebp+eax]
  002a4	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  002a9	c1 e2 00	 shl	 edx, 0
  002ac	89 8c 15 44 ff
	ff ff		 mov	 DWORD PTR _points$[ebp+edx+40], ecx

; 1285 : 		points[2].next_vertex = NULL;

  002b3	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002b8	d1 e0		 shl	 eax, 1
  002ba	c7 84 05 44 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _points$[ebp+eax+40], 0

; 1286 : 
; 1287 : 		points[0].outcode = generate_outcode ( points[0].i, points[0].j );

  002c5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002ca	6b c8 00	 imul	 ecx, eax, 0
  002cd	51		 push	 ecx
  002ce	f3 0f 10 84 0d
	30 ff ff ff	 movss	 xmm0, DWORD PTR _points$[ebp+ecx+20]
  002d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002dc	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  002e1	6b c2 00	 imul	 eax, edx, 0
  002e4	51		 push	 ecx
  002e5	f3 0f 10 84 05
	2c ff ff ff	 movss	 xmm0, DWORD PTR _points$[ebp+eax+16]
  002ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f3	e8 00 00 00 00	 call	 ?generate_outcode@@YGHMM@Z ; generate_outcode
  002f8	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  002fd	6b d1 00	 imul	 edx, ecx, 0
  00300	88 84 15 48 ff
	ff ff		 mov	 BYTE PTR _points$[ebp+edx+44], al

; 1288 : 		points[1].outcode = generate_outcode ( points[1].i, points[1].j );

  00307	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0030c	c1 e0 00	 shl	 eax, 0
  0030f	51		 push	 ecx
  00310	f3 0f 10 84 05
	30 ff ff ff	 movss	 xmm0, DWORD PTR _points$[ebp+eax+20]
  00319	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0031e	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00323	c1 e1 00	 shl	 ecx, 0
  00326	51		 push	 ecx
  00327	f3 0f 10 84 0d
	2c ff ff ff	 movss	 xmm0, DWORD PTR _points$[ebp+ecx+16]
  00330	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00335	e8 00 00 00 00	 call	 ?generate_outcode@@YGHMM@Z ; generate_outcode
  0033a	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0033f	c1 e2 00	 shl	 edx, 0
  00342	88 84 15 48 ff
	ff ff		 mov	 BYTE PTR _points$[ebp+edx+44], al

; 1289 : 		points[2].outcode = generate_outcode ( points[2].i, points[2].j );

  00349	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0034e	d1 e0		 shl	 eax, 1
  00350	51		 push	 ecx
  00351	f3 0f 10 84 05
	30 ff ff ff	 movss	 xmm0, DWORD PTR _points$[ebp+eax+20]
  0035a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035f	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00364	d1 e1		 shl	 ecx, 1
  00366	51		 push	 ecx
  00367	f3 0f 10 84 0d
	2c ff ff ff	 movss	 xmm0, DWORD PTR _points$[ebp+ecx+16]
  00370	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00375	e8 00 00 00 00	 call	 ?generate_outcode@@YGHMM@Z ; generate_outcode
  0037a	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0037f	d1 e2		 shl	 edx, 1
  00381	88 84 15 48 ff
	ff ff		 mov	 BYTE PTR _points$[ebp+edx+44], al

; 1290 : 
; 1291 : 		outcode = points[0].outcode;

  00388	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0038d	6b c8 00	 imul	 ecx, eax, 0
  00390	0f b6 94 0d 48
	ff ff ff	 movzx	 edx, BYTE PTR _points$[ebp+ecx+44]
  00398	89 95 14 ff ff
	ff		 mov	 DWORD PTR _outcode$2[ebp], edx

; 1292 : 		outcode2 = points[0].outcode;

  0039e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003a3	6b c8 00	 imul	 ecx, eax, 0
  003a6	0f b6 94 0d 48
	ff ff ff	 movzx	 edx, BYTE PTR _points$[ebp+ecx+44]
  003ae	89 95 10 ff ff
	ff		 mov	 DWORD PTR _outcode2$1[ebp], edx

; 1293 : 		outcode |= points[1].outcode;

  003b4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003b9	c1 e0 00	 shl	 eax, 0
  003bc	0f b6 8c 05 48
	ff ff ff	 movzx	 ecx, BYTE PTR _points$[ebp+eax+44]
  003c4	0b 8d 14 ff ff
	ff		 or	 ecx, DWORD PTR _outcode$2[ebp]
  003ca	89 8d 14 ff ff
	ff		 mov	 DWORD PTR _outcode$2[ebp], ecx

; 1294 : 		outcode2 &= points[1].outcode;

  003d0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003d5	c1 e0 00	 shl	 eax, 0
  003d8	0f b6 8c 05 48
	ff ff ff	 movzx	 ecx, BYTE PTR _points$[ebp+eax+44]
  003e0	23 8d 10 ff ff
	ff		 and	 ecx, DWORD PTR _outcode2$1[ebp]
  003e6	89 8d 10 ff ff
	ff		 mov	 DWORD PTR _outcode2$1[ebp], ecx

; 1295 : 		outcode |= points[2].outcode;

  003ec	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003f1	d1 e0		 shl	 eax, 1
  003f3	0f b6 8c 05 48
	ff ff ff	 movzx	 ecx, BYTE PTR _points$[ebp+eax+44]
  003fb	0b 8d 14 ff ff
	ff		 or	 ecx, DWORD PTR _outcode$2[ebp]
  00401	89 8d 14 ff ff
	ff		 mov	 DWORD PTR _outcode$2[ebp], ecx

; 1296 : 		outcode2 &= points[2].outcode;

  00407	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0040c	d1 e0		 shl	 eax, 1
  0040e	0f b6 8c 05 48
	ff ff ff	 movzx	 ecx, BYTE PTR _points$[ebp+eax+44]
  00416	23 8d 10 ff ff
	ff		 and	 ecx, DWORD PTR _outcode2$1[ebp]
  0041c	89 8d 10 ff ff
	ff		 mov	 DWORD PTR _outcode2$1[ebp], ecx

; 1297 : 
; 1298 : 		if ( outcode2 == 0 )

  00422	75 52		 jne	 SHORT $LN10@draw_fille

; 1299 : 		{
; 1300 : 
; 1301 : 			poly = &points[0];

  00424	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00429	6b c8 00	 imul	 ecx, eax, 0
  0042c	8d 94 0d 1c ff
	ff ff		 lea	 edx, DWORD PTR _points$[ebp+ecx]
  00433	89 55 dc	 mov	 DWORD PTR _poly$[ebp], edx

; 1302 : 
; 1303 : 			if ( outcode )

  00436	83 bd 14 ff ff
	ff 00		 cmp	 DWORD PTR _outcode$2[ebp], 0
  0043d	74 1d		 je	 SHORT $LN9@draw_fille

; 1304 : 			{
; 1305 : 
; 1306 : 				clip_3d_coord = 0;

  0043f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, 0 ; clip_3d_coord

; 1307 : 
; 1308 : 				poly = clip_3d_polygon ( poly, outcode );

  00449	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _outcode$2[ebp]
  0044f	50		 push	 eax
  00450	8b 4d dc	 mov	 ecx, DWORD PTR _poly$[ebp]
  00453	51		 push	 ecx
  00454	e8 00 00 00 00	 call	 ?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z ; clip_3d_polygon
  00459	89 45 dc	 mov	 DWORD PTR _poly$[ebp], eax
$LN9@draw_fille:

; 1309 : 			}
; 1310 : 
; 1311 : 			if ( poly )

  0045c	83 7d dc 00	 cmp	 DWORD PTR _poly$[ebp], 0
  00460	74 14		 je	 SHORT $LN10@draw_fille

; 1312 : 			{
; 1313 : 
; 1314 : 				draw_wbuffered_plain_polygon ( poly, col, specular );

  00462	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _specular$[ebp]
  00468	50		 push	 eax
  00469	8b 4d 18	 mov	 ecx, DWORD PTR _col$[ebp]
  0046c	51		 push	 ecx
  0046d	8b 55 dc	 mov	 edx, DWORD PTR _poly$[ebp]
  00470	52		 push	 edx
  00471	e8 00 00 00 00	 call	 ?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_plain_polygon
$LN10@draw_fille:

; 1315 : 			}
; 1316 : 		}
; 1317 : 	}

  00476	e9 44 fc ff ff	 jmp	 $LN2@draw_fille
$LN3@draw_fille:

; 1318 : }

  0047b	5f		 pop	 edi
  0047c	5e		 pop	 esi
  0047d	5b		 pop	 ebx
  0047e	8b e5		 mov	 esp, ebp
  00480	5d		 pop	 ebp
  00481	c2 14 00	 ret	 20			; 00000014H
?draw_filled_circle@@YGXMMMHUREAL_COLOUR@@@Z ENDP	; draw_filled_circle
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\circle.c
;	COMDAT ?draw_hatched_filled_circle@@YGXMMMUREAL_COLOUR@@@Z
_TEXT	SEGMENT
tv521 = -208						; size = 4
tv517 = -208						; size = 4
tv475 = -208						; size = 4
tv471 = -208						; size = 4
tv319 = -208						; size = 4
tv315 = -208						; size = 4
tv241 = -208						; size = 4
tv237 = -208						; size = 4
tv522 = -204						; size = 4
tv518 = -204						; size = 4
tv476 = -204						; size = 4
tv472 = -204						; size = 4
tv320 = -204						; size = 4
tv316 = -204						; size = 4
tv242 = -204						; size = 4
tv238 = -204						; size = 4
_line_ptr$1 = -136					; size = 4
_y$2 = -132						; size = 4
_xmax$3 = -128						; size = 4
_xmin$4 = -124						; size = 4
_x$5 = -120						; size = 4
_line_ptr$6 = -116					; size = 4
_y$7 = -112						; size = 4
_xmax$8 = -108						; size = 4
_xmin$9 = -104						; size = 4
_x$10 = -100						; size = 4
_col$11 = -96						; size = 4
_line_ptr$12 = -92					; size = 4
_y$13 = -88						; size = 4
_xmax$14 = -84						; size = 4
_xmin$15 = -80						; size = 4
_x$16 = -76						; size = 4
_line_ptr$17 = -72					; size = 4
_y$18 = -68						; size = 4
_xmax$19 = -64						; size = 4
_xmin$20 = -60						; size = 4
_x$21 = -56						; size = 4
_col$22 = -52						; size = 2
_screen_data$ = -48					; size = 4
_decision$ = -44					; size = 4
_y_offset$ = -40					; size = 4
_x_offset$ = -36					; size = 4
_screen_pitch$ = -32					; size = 4
_y_max$ = -28						; size = 4
_x_max$ = -24						; size = 4
_y_min$ = -20						; size = 4
_x_min$ = -16						; size = 4
_radius$ = -12						; size = 4
_y_centre$ = -8						; size = 4
_x_centre$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_r$ = 16						; size = 4
_colour$ = 20						; size = 4
?draw_hatched_filled_circle@@YGXMMMUREAL_COLOUR@@@Z PROC ; draw_hatched_filled_circle, COMDAT

; 611  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 612  : 
; 613  : 	int
; 614  : 		x_centre,
; 615  : 		y_centre,
; 616  : 		radius,
; 617  : 		x_min,
; 618  : 		y_min,
; 619  : 		x_max,
; 620  : 		y_max,
; 621  : 		screen_pitch,
; 622  : 		x_offset,
; 623  : 		y_offset,
; 624  : 		decision;
; 625  : 
; 626  : 	unsigned char
; 627  : 		*screen_data;
; 628  : 
; 629  : 	ASSERT ( active_screen );

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?active_screen@@3PAUSCREEN@@A, 0 ; active_screen
  00013	75 18		 jne	 SHORT $LN58@draw_hatch
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_hatched_filled_circle@@YGXMMMUREAL_COLOUR@@@Z@4JA
  0001a	83 c0 12	 add	 eax, 18			; 00000012H
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@LIEJAGLG@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IILHNAKB@active_screen@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN58@draw_hatch:

; 630  : 	ASSERT ( get_screen_locked ( active_screen ) );

  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?get_screen_locked@@YGHPAUSCREEN@@@Z ; get_screen_locked
  00038	85 c0		 test	 eax, eax
  0003a	75 18		 jne	 SHORT $LN59@draw_hatch
  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_hatched_filled_circle@@YGXMMMUREAL_COLOUR@@@Z@4JA
  00041	83 c0 13	 add	 eax, 19			; 00000013H
  00044	50		 push	 eax
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@LIEJAGLG@c?3?2users?2nhv90?2projects?2eech?2mo@
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@KMBKIAKC@get_screen_locked?5?$CI?5active_scre@
  0004f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN59@draw_hatch:

; 631  : 
; 632  : 	if ( active_screen->pixel_length <= 16 )

  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00059	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  0005d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00060	0f 8f 34 07 00
	00		 jg	 $LN60@draw_hatch

; 633  : 	{
; 634  : 
; 635  : 		USHORT
; 636  : 			col;
; 637  : 
; 638  : 		convert_float_to_int ( x, &x_centre );

  00066	8d 45 fc	 lea	 eax, DWORD PTR _x_centre$[ebp]
  00069	50		 push	 eax
  0006a	51		 push	 ecx
  0006b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00070	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00075	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 639  : 		convert_float_to_int ( y, &y_centre );

  0007a	8d 45 f8	 lea	 eax, DWORD PTR _y_centre$[ebp]
  0007d	50		 push	 eax
  0007e	51		 push	 ecx
  0007f	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  00084	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00089	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 640  : 		convert_float_to_int ( r, &radius );

  0008e	8d 45 f4	 lea	 eax, DWORD PTR _radius$[ebp]
  00091	50		 push	 eax
  00092	51		 push	 ecx
  00093	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _r$[ebp]
  00098	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009d	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 641  : 
; 642  : 		//
; 643  : 		// trivially reject
; 644  : 		//
; 645  : 
; 646  : 		if ( ( x_min = x_centre - radius ) > active_int_viewport.x_max ) return;

  000a2	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  000a5	2b 45 f4	 sub	 eax, DWORD PTR _radius$[ebp]
  000a8	89 45 f0	 mov	 DWORD PTR _x_min$[ebp], eax
  000ab	8b 4d f0	 mov	 ecx, DWORD PTR _x_min$[ebp]
  000ae	3b 0d 08 00 00
	00		 cmp	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  000b4	7e 05		 jle	 SHORT $LN62@draw_hatch
  000b6	e9 fa 0d 00 00	 jmp	 $LN1@draw_hatch
$LN62@draw_hatch:

; 647  : 		if ( ( y_min = y_centre - radius ) > active_int_viewport.y_max ) return;

  000bb	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  000be	2b 45 f4	 sub	 eax, DWORD PTR _radius$[ebp]
  000c1	89 45 ec	 mov	 DWORD PTR _y_min$[ebp], eax
  000c4	8b 4d ec	 mov	 ecx, DWORD PTR _y_min$[ebp]
  000c7	3b 0d 0c 00 00
	00		 cmp	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  000cd	7e 05		 jle	 SHORT $LN63@draw_hatch
  000cf	e9 e1 0d 00 00	 jmp	 $LN1@draw_hatch
$LN63@draw_hatch:

; 648  : 		if ( ( x_max = x_centre + radius ) < active_int_viewport.x_min ) return;

  000d4	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  000d7	03 45 f4	 add	 eax, DWORD PTR _radius$[ebp]
  000da	89 45 e8	 mov	 DWORD PTR _x_max$[ebp], eax
  000dd	8b 4d e8	 mov	 ecx, DWORD PTR _x_max$[ebp]
  000e0	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  000e6	7d 05		 jge	 SHORT $LN64@draw_hatch
  000e8	e9 c8 0d 00 00	 jmp	 $LN1@draw_hatch
$LN64@draw_hatch:

; 649  : 		if ( ( y_max = y_centre + radius ) < active_int_viewport.y_min ) return;

  000ed	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  000f0	03 45 f4	 add	 eax, DWORD PTR _radius$[ebp]
  000f3	89 45 e4	 mov	 DWORD PTR _y_max$[ebp], eax
  000f6	8b 4d e4	 mov	 ecx, DWORD PTR _y_max$[ebp]
  000f9	3b 0d 04 00 00
	00		 cmp	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  000ff	7d 05		 jge	 SHORT $LN65@draw_hatch
  00101	e9 af 0d 00 00	 jmp	 $LN1@draw_hatch
$LN65@draw_hatch:

; 650  : 
; 651  : 		//
; 652  : 		// get screen values
; 653  : 		//
; 654  : 
; 655  : 		col = get_packed_colour ( colour );

  00106	0f b6 45 16	 movzx	 eax, BYTE PTR _colour$[ebp+2]
  0010a	c1 e0 18	 shl	 eax, 24			; 00000018H
  0010d	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_red_mask@@3HA ; active_screen_red_mask
  00113	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_red_shift@@3HA ; active_screen_red_shift
  00119	d3 e8		 shr	 eax, cl
  0011b	0f b6 55 15	 movzx	 edx, BYTE PTR _colour$[ebp+1]
  0011f	c1 e2 18	 shl	 edx, 24			; 00000018H
  00122	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_green_mask@@3HA ; active_screen_green_mask
  00128	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_green_shift@@3HA ; active_screen_green_shift
  0012e	d3 ea		 shr	 edx, cl
  00130	0b c2		 or	 eax, edx
  00132	0f b6 55 14	 movzx	 edx, BYTE PTR _colour$[ebp]
  00136	c1 e2 18	 shl	 edx, 24			; 00000018H
  00139	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_blue_mask@@3HA ; active_screen_blue_mask
  0013f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_blue_shift@@3HA ; active_screen_blue_shift
  00145	d3 ea		 shr	 edx, cl
  00147	0b c2		 or	 eax, edx
  00149	0f b6 55 17	 movzx	 edx, BYTE PTR _colour$[ebp+3]
  0014d	c1 e2 18	 shl	 edx, 24			; 00000018H
  00150	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_alpha_mask@@3HA ; active_screen_alpha_mask
  00156	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_alpha_shift@@3HA ; active_screen_alpha_shift
  0015c	d3 ea		 shr	 edx, cl
  0015e	0b c2		 or	 eax, edx
  00160	66 89 45 cc	 mov	 WORD PTR _col$22[ebp], ax

; 656  : 
; 657  : 		screen_data = get_screen_data ( active_screen );

  00164	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00169	50		 push	 eax
  0016a	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  0016f	89 45 d0	 mov	 DWORD PTR _screen_data$[ebp], eax

; 658  : 		screen_pitch = get_screen_pitch ( active_screen );

  00172	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00177	50		 push	 eax
  00178	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  0017d	89 45 e0	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 659  : 
; 660  : 		//
; 661  : 		// draw circle
; 662  : 		//
; 663  : 
; 664  : 		x_offset = 0;

  00180	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _x_offset$[ebp], 0

; 665  : 
; 666  : 		y_offset = radius;

  00187	8b 45 f4	 mov	 eax, DWORD PTR _radius$[ebp]
  0018a	89 45 d8	 mov	 DWORD PTR _y_offset$[ebp], eax

; 667  : 
; 668  : 		decision = 3 - (radius << 1);

  0018d	8b 45 f4	 mov	 eax, DWORD PTR _radius$[ebp]
  00190	d1 e0		 shl	 eax, 1
  00192	b9 03 00 00 00	 mov	 ecx, 3
  00197	2b c8		 sub	 ecx, eax
  00199	89 4d d4	 mov	 DWORD PTR _decision$[ebp], ecx

; 669  : 
; 670  : 		if (	( x_min >= active_int_viewport.x_min ) && ( x_max <= active_int_viewport.x_max ) &&
; 671  : 				( y_min >= active_int_viewport.y_min ) && ( y_max <= active_int_viewport.y_max ) )

  0019c	8b 45 f0	 mov	 eax, DWORD PTR _x_min$[ebp]
  0019f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  001a5	0f 8c 26 02 00
	00		 jl	 $LN66@draw_hatch
  001ab	8b 45 e8	 mov	 eax, DWORD PTR _x_max$[ebp]
  001ae	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  001b4	0f 8f 17 02 00
	00		 jg	 $LN66@draw_hatch
  001ba	8b 45 ec	 mov	 eax, DWORD PTR _y_min$[ebp]
  001bd	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  001c3	0f 8c 08 02 00
	00		 jl	 $LN66@draw_hatch
  001c9	8b 45 e4	 mov	 eax, DWORD PTR _y_max$[ebp]
  001cc	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  001d2	0f 8f f9 01 00
	00		 jg	 $LN66@draw_hatch
$LN2@draw_hatch:

; 672  : 		{
; 673  : 
; 674  : 			//
; 675  : 			// draw unclipped circle
; 676  : 			//
; 677  : 
; 678  : 			while ( x_offset <= y_offset )

  001d8	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  001db	3b 45 d8	 cmp	 eax, DWORD PTR _y_offset$[ebp]
  001de	0f 8f e8 01 00
	00		 jg	 $LN3@draw_hatch

; 679  : 			{
; 680  : 
; 681  : 				int
; 682  : 					x,
; 683  : 					xmin,
; 684  : 					xmax,
; 685  : 					y;
; 686  : 
; 687  : 				unsigned short int
; 688  : 					*line_ptr;
; 689  : 
; 690  : 				xmin = x_centre - x_offset;

  001e4	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  001e7	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  001ea	89 45 c4	 mov	 DWORD PTR _xmin$20[ebp], eax

; 691  : 
; 692  : 				xmax = x_centre + x_offset;

  001ed	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  001f0	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  001f3	89 45 c0	 mov	 DWORD PTR _xmax$19[ebp], eax

; 693  : 
; 694  : 				y = y_centre + y_offset;

  001f6	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  001f9	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  001fc	89 45 bc	 mov	 DWORD PTR _y$18[ebp], eax

; 695  : 
; 696  : 				{
; 697  : 
; 698  : 					line_ptr = ( unsigned short int * ) ( screen_data + ( screen_pitch * y ) );

  001ff	8b 45 e0	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  00202	0f af 45 bc	 imul	 eax, DWORD PTR _y$18[ebp]
  00206	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00209	89 45 b8	 mov	 DWORD PTR _line_ptr$17[ebp], eax

; 699  : 
; 700  : 					for ( x = xmin; x <= xmax; x++ )

  0020c	8b 45 c4	 mov	 eax, DWORD PTR _xmin$20[ebp]
  0020f	89 45 c8	 mov	 DWORD PTR _x$21[ebp], eax
  00212	eb 09		 jmp	 SHORT $LN6@draw_hatch
$LN4@draw_hatch:
  00214	8b 45 c8	 mov	 eax, DWORD PTR _x$21[ebp]
  00217	83 c0 01	 add	 eax, 1
  0021a	89 45 c8	 mov	 DWORD PTR _x$21[ebp], eax
$LN6@draw_hatch:
  0021d	8b 45 c8	 mov	 eax, DWORD PTR _x$21[ebp]
  00220	3b 45 c0	 cmp	 eax, DWORD PTR _xmax$19[ebp]
  00223	7f 33		 jg	 SHORT $LN5@draw_hatch

; 701  : 					{
; 702  : 
; 703  : 						if ( ( 1 << ( 31 - ( x & 0x1f ) ) ) & graphics_hatch_pattern[ ( y & 0x1f ) ] )

  00225	8b 45 c8	 mov	 eax, DWORD PTR _x$21[ebp]
  00228	83 e0 1f	 and	 eax, 31			; 0000001fH
  0022b	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  00230	2b c8		 sub	 ecx, eax
  00232	ba 01 00 00 00	 mov	 edx, 1
  00237	d3 e2		 shl	 edx, cl
  00239	8b 45 bc	 mov	 eax, DWORD PTR _y$18[ebp]
  0023c	83 e0 1f	 and	 eax, 31			; 0000001fH
  0023f	23 14 85 00 00
	00 00		 and	 edx, DWORD PTR ?graphics_hatch_pattern@@3PAIA[eax*4]
  00246	74 0e		 je	 SHORT $LN68@draw_hatch

; 704  : 						{
; 705  : 
; 706  : 							line_ptr[x] = col;

  00248	8b 45 c8	 mov	 eax, DWORD PTR _x$21[ebp]
  0024b	8b 4d b8	 mov	 ecx, DWORD PTR _line_ptr$17[ebp]
  0024e	66 8b 55 cc	 mov	 dx, WORD PTR _col$22[ebp]
  00252	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
$LN68@draw_hatch:

; 707  : 						}
; 708  : 					}

  00256	eb bc		 jmp	 SHORT $LN4@draw_hatch
$LN5@draw_hatch:

; 709  : 				}
; 710  : 
; 711  : 				y = y_centre - y_offset;

  00258	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  0025b	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  0025e	89 45 bc	 mov	 DWORD PTR _y$18[ebp], eax

; 712  : 
; 713  : 				{
; 714  : 
; 715  : 					line_ptr = ( unsigned short int * ) ( screen_data + ( screen_pitch * y ) );

  00261	8b 45 e0	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  00264	0f af 45 bc	 imul	 eax, DWORD PTR _y$18[ebp]
  00268	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  0026b	89 45 b8	 mov	 DWORD PTR _line_ptr$17[ebp], eax

; 716  : 
; 717  : 					for ( x = xmin; x <= xmax; x++ )

  0026e	8b 45 c4	 mov	 eax, DWORD PTR _xmin$20[ebp]
  00271	89 45 c8	 mov	 DWORD PTR _x$21[ebp], eax
  00274	eb 09		 jmp	 SHORT $LN9@draw_hatch
$LN7@draw_hatch:
  00276	8b 45 c8	 mov	 eax, DWORD PTR _x$21[ebp]
  00279	83 c0 01	 add	 eax, 1
  0027c	89 45 c8	 mov	 DWORD PTR _x$21[ebp], eax
$LN9@draw_hatch:
  0027f	8b 45 c8	 mov	 eax, DWORD PTR _x$21[ebp]
  00282	3b 45 c0	 cmp	 eax, DWORD PTR _xmax$19[ebp]
  00285	7f 33		 jg	 SHORT $LN8@draw_hatch

; 718  : 					{
; 719  : 
; 720  : 						if ( ( 1 << ( 31 - ( x & 0x1f ) ) ) & graphics_hatch_pattern[ ( y & 0x1f ) ] )

  00287	8b 45 c8	 mov	 eax, DWORD PTR _x$21[ebp]
  0028a	83 e0 1f	 and	 eax, 31			; 0000001fH
  0028d	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  00292	2b c8		 sub	 ecx, eax
  00294	ba 01 00 00 00	 mov	 edx, 1
  00299	d3 e2		 shl	 edx, cl
  0029b	8b 45 bc	 mov	 eax, DWORD PTR _y$18[ebp]
  0029e	83 e0 1f	 and	 eax, 31			; 0000001fH
  002a1	23 14 85 00 00
	00 00		 and	 edx, DWORD PTR ?graphics_hatch_pattern@@3PAIA[eax*4]
  002a8	74 0e		 je	 SHORT $LN69@draw_hatch

; 721  : 						{
; 722  : 
; 723  : 							line_ptr[x] = col;

  002aa	8b 45 c8	 mov	 eax, DWORD PTR _x$21[ebp]
  002ad	8b 4d b8	 mov	 ecx, DWORD PTR _line_ptr$17[ebp]
  002b0	66 8b 55 cc	 mov	 dx, WORD PTR _col$22[ebp]
  002b4	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
$LN69@draw_hatch:

; 724  : 						}
; 725  : 					}

  002b8	eb bc		 jmp	 SHORT $LN7@draw_hatch
$LN8@draw_hatch:

; 726  : 				}
; 727  : 
; 728  : 				xmin = x_centre - y_offset;

  002ba	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  002bd	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  002c0	89 45 c4	 mov	 DWORD PTR _xmin$20[ebp], eax

; 729  : 
; 730  : 				xmax = x_centre + y_offset;

  002c3	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  002c6	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  002c9	89 45 c0	 mov	 DWORD PTR _xmax$19[ebp], eax

; 731  : 
; 732  : 				y = y_centre + x_offset;

  002cc	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  002cf	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  002d2	89 45 bc	 mov	 DWORD PTR _y$18[ebp], eax

; 733  : 
; 734  : 				{
; 735  : 
; 736  : 					line_ptr = ( unsigned short int * ) ( screen_data + ( screen_pitch * y ) );

  002d5	8b 45 e0	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  002d8	0f af 45 bc	 imul	 eax, DWORD PTR _y$18[ebp]
  002dc	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  002df	89 45 b8	 mov	 DWORD PTR _line_ptr$17[ebp], eax

; 737  : 
; 738  : 					for ( x = xmin; x <= xmax; x++ )

  002e2	8b 45 c4	 mov	 eax, DWORD PTR _xmin$20[ebp]
  002e5	89 45 c8	 mov	 DWORD PTR _x$21[ebp], eax
  002e8	eb 09		 jmp	 SHORT $LN12@draw_hatch
$LN10@draw_hatch:
  002ea	8b 45 c8	 mov	 eax, DWORD PTR _x$21[ebp]
  002ed	83 c0 01	 add	 eax, 1
  002f0	89 45 c8	 mov	 DWORD PTR _x$21[ebp], eax
$LN12@draw_hatch:
  002f3	8b 45 c8	 mov	 eax, DWORD PTR _x$21[ebp]
  002f6	3b 45 c0	 cmp	 eax, DWORD PTR _xmax$19[ebp]
  002f9	7f 33		 jg	 SHORT $LN11@draw_hatch

; 739  : 					{
; 740  : 
; 741  : 						if ( ( 1 << ( 31 - ( x & 0x1f ) ) ) & graphics_hatch_pattern[ ( y & 0x1f ) ] )

  002fb	8b 45 c8	 mov	 eax, DWORD PTR _x$21[ebp]
  002fe	83 e0 1f	 and	 eax, 31			; 0000001fH
  00301	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  00306	2b c8		 sub	 ecx, eax
  00308	ba 01 00 00 00	 mov	 edx, 1
  0030d	d3 e2		 shl	 edx, cl
  0030f	8b 45 bc	 mov	 eax, DWORD PTR _y$18[ebp]
  00312	83 e0 1f	 and	 eax, 31			; 0000001fH
  00315	23 14 85 00 00
	00 00		 and	 edx, DWORD PTR ?graphics_hatch_pattern@@3PAIA[eax*4]
  0031c	74 0e		 je	 SHORT $LN70@draw_hatch

; 742  : 						{
; 743  : 
; 744  : 							line_ptr[x] = col;

  0031e	8b 45 c8	 mov	 eax, DWORD PTR _x$21[ebp]
  00321	8b 4d b8	 mov	 ecx, DWORD PTR _line_ptr$17[ebp]
  00324	66 8b 55 cc	 mov	 dx, WORD PTR _col$22[ebp]
  00328	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
$LN70@draw_hatch:

; 745  : 						}
; 746  : 					}

  0032c	eb bc		 jmp	 SHORT $LN10@draw_hatch
$LN11@draw_hatch:

; 747  : 				}
; 748  : 
; 749  : 				y = y_centre - x_offset;

  0032e	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00331	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  00334	89 45 bc	 mov	 DWORD PTR _y$18[ebp], eax

; 750  : 
; 751  : 				{
; 752  : 
; 753  : 					line_ptr = ( unsigned short int * ) ( screen_data + ( screen_pitch * y ) );

  00337	8b 45 e0	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  0033a	0f af 45 bc	 imul	 eax, DWORD PTR _y$18[ebp]
  0033e	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00341	89 45 b8	 mov	 DWORD PTR _line_ptr$17[ebp], eax

; 754  : 
; 755  : 					for ( x = xmin; x <= xmax; x++ )

  00344	8b 45 c4	 mov	 eax, DWORD PTR _xmin$20[ebp]
  00347	89 45 c8	 mov	 DWORD PTR _x$21[ebp], eax
  0034a	eb 09		 jmp	 SHORT $LN15@draw_hatch
$LN13@draw_hatch:
  0034c	8b 45 c8	 mov	 eax, DWORD PTR _x$21[ebp]
  0034f	83 c0 01	 add	 eax, 1
  00352	89 45 c8	 mov	 DWORD PTR _x$21[ebp], eax
$LN15@draw_hatch:
  00355	8b 45 c8	 mov	 eax, DWORD PTR _x$21[ebp]
  00358	3b 45 c0	 cmp	 eax, DWORD PTR _xmax$19[ebp]
  0035b	7f 33		 jg	 SHORT $LN14@draw_hatch

; 756  : 					{
; 757  : 
; 758  : 						if ( ( 1 << ( 31 - ( x & 0x1f ) ) ) & graphics_hatch_pattern[ ( y & 0x1f ) ] )

  0035d	8b 45 c8	 mov	 eax, DWORD PTR _x$21[ebp]
  00360	83 e0 1f	 and	 eax, 31			; 0000001fH
  00363	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  00368	2b c8		 sub	 ecx, eax
  0036a	ba 01 00 00 00	 mov	 edx, 1
  0036f	d3 e2		 shl	 edx, cl
  00371	8b 45 bc	 mov	 eax, DWORD PTR _y$18[ebp]
  00374	83 e0 1f	 and	 eax, 31			; 0000001fH
  00377	23 14 85 00 00
	00 00		 and	 edx, DWORD PTR ?graphics_hatch_pattern@@3PAIA[eax*4]
  0037e	74 0e		 je	 SHORT $LN71@draw_hatch

; 759  : 						{
; 760  : 
; 761  : 							line_ptr[x] = col;

  00380	8b 45 c8	 mov	 eax, DWORD PTR _x$21[ebp]
  00383	8b 4d b8	 mov	 ecx, DWORD PTR _line_ptr$17[ebp]
  00386	66 8b 55 cc	 mov	 dx, WORD PTR _col$22[ebp]
  0038a	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
$LN71@draw_hatch:

; 762  : 						}
; 763  : 					}

  0038e	eb bc		 jmp	 SHORT $LN13@draw_hatch
$LN14@draw_hatch:

; 764  : 				}
; 765  : 
; 766  : 				if ( decision < 0 )

  00390	83 7d d4 00	 cmp	 DWORD PTR _decision$[ebp], 0
  00394	7d 0f		 jge	 SHORT $LN72@draw_hatch

; 767  : 				{
; 768  : 
; 769  : 					decision += ( x_offset << 2 ) + 6;

  00396	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  00399	8b 4d d4	 mov	 ecx, DWORD PTR _decision$[ebp]
  0039c	8d 54 81 06	 lea	 edx, DWORD PTR [ecx+eax*4+6]
  003a0	89 55 d4	 mov	 DWORD PTR _decision$[ebp], edx

; 770  : 				}
; 771  : 				else

  003a3	eb 19		 jmp	 SHORT $LN73@draw_hatch
$LN72@draw_hatch:

; 772  : 				{
; 773  : 
; 774  : 					decision += ( ( x_offset - y_offset ) << 2 ) + 10;

  003a5	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  003a8	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  003ab	8b 4d d4	 mov	 ecx, DWORD PTR _decision$[ebp]
  003ae	8d 54 81 0a	 lea	 edx, DWORD PTR [ecx+eax*4+10]
  003b2	89 55 d4	 mov	 DWORD PTR _decision$[ebp], edx

; 775  : 
; 776  : 					y_offset--;

  003b5	8b 45 d8	 mov	 eax, DWORD PTR _y_offset$[ebp]
  003b8	83 e8 01	 sub	 eax, 1
  003bb	89 45 d8	 mov	 DWORD PTR _y_offset$[ebp], eax
$LN73@draw_hatch:

; 777  : 				}
; 778  : 
; 779  : 				x_offset++;

  003be	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  003c1	83 c0 01	 add	 eax, 1
  003c4	89 45 dc	 mov	 DWORD PTR _x_offset$[ebp], eax

; 780  : 			}

  003c7	e9 0c fe ff ff	 jmp	 $LN2@draw_hatch
$LN3@draw_hatch:

; 781  : 		}
; 782  : 		else

  003cc	e9 c4 03 00 00	 jmp	 $LN17@draw_hatch
$LN66@draw_hatch:

; 783  : 		{
; 784  : 			//
; 785  : 			// draw clipped circle
; 786  : 			//
; 787  : 
; 788  : 			while ( x_offset <= y_offset )

  003d1	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  003d4	3b 45 d8	 cmp	 eax, DWORD PTR _y_offset$[ebp]
  003d7	0f 8f b8 03 00
	00		 jg	 $LN17@draw_hatch

; 789  : 			{
; 790  : 
; 791  : 				int
; 792  : 					x,
; 793  : 					xmin,
; 794  : 					xmax,
; 795  : 					y;
; 796  : 
; 797  : 				USHORT
; 798  : 					*line_ptr;
; 799  : 
; 800  : 				xmin = x_centre - x_offset;

  003dd	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  003e0	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  003e3	89 45 b0	 mov	 DWORD PTR _xmin$15[ebp], eax

; 801  : 
; 802  : 				xmax = x_centre + x_offset;

  003e6	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  003e9	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  003ec	89 45 ac	 mov	 DWORD PTR _xmax$14[ebp], eax

; 803  : 
; 804  : 				if ( !( ( xmax < active_int_viewport.x_min ) || ( xmin > active_int_viewport.x_max ) ) )

  003ef	8b 45 ac	 mov	 eax, DWORD PTR _xmax$14[ebp]
  003f2	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  003f8	0f 8c 9d 01 00
	00		 jl	 $LN22@draw_hatch
  003fe	8b 45 b0	 mov	 eax, DWORD PTR _xmin$15[ebp]
  00401	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00407	0f 8f 8e 01 00
	00		 jg	 $LN22@draw_hatch

; 805  : 				{
; 806  : 
; 807  : 					xmin = bound ( xmin, active_int_viewport.x_min, active_int_viewport.x_max );

  0040d	8b 45 b0	 mov	 eax, DWORD PTR _xmin$15[ebp]
  00410	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00416	7d 0e		 jge	 SHORT $LN113@draw_hatch
  00418	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  0041e	89 8d 34 ff ff
	ff		 mov	 DWORD PTR tv238[ebp], ecx
  00424	eb 2d		 jmp	 SHORT $LN114@draw_hatch
$LN113@draw_hatch:
  00426	8b 55 b0	 mov	 edx, DWORD PTR _xmin$15[ebp]
  00429	3b 15 08 00 00
	00		 cmp	 edx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  0042f	7e 0d		 jle	 SHORT $LN111@draw_hatch
  00431	a1 08 00 00 00	 mov	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00436	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv237[ebp], eax
  0043c	eb 09		 jmp	 SHORT $LN112@draw_hatch
$LN111@draw_hatch:
  0043e	8b 4d b0	 mov	 ecx, DWORD PTR _xmin$15[ebp]
  00441	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv237[ebp], ecx
$LN112@draw_hatch:
  00447	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv237[ebp]
  0044d	89 95 34 ff ff
	ff		 mov	 DWORD PTR tv238[ebp], edx
$LN114@draw_hatch:
  00453	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv238[ebp]
  00459	89 45 b0	 mov	 DWORD PTR _xmin$15[ebp], eax

; 808  : 
; 809  : 					xmax = bound ( xmax, active_int_viewport.x_min, active_int_viewport.x_max );

  0045c	8b 45 ac	 mov	 eax, DWORD PTR _xmax$14[ebp]
  0045f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00465	7d 0e		 jge	 SHORT $LN117@draw_hatch
  00467	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  0046d	89 8d 34 ff ff
	ff		 mov	 DWORD PTR tv242[ebp], ecx
  00473	eb 2d		 jmp	 SHORT $LN118@draw_hatch
$LN117@draw_hatch:
  00475	8b 55 ac	 mov	 edx, DWORD PTR _xmax$14[ebp]
  00478	3b 15 08 00 00
	00		 cmp	 edx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  0047e	7e 0d		 jle	 SHORT $LN115@draw_hatch
  00480	a1 08 00 00 00	 mov	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00485	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv241[ebp], eax
  0048b	eb 09		 jmp	 SHORT $LN116@draw_hatch
$LN115@draw_hatch:
  0048d	8b 4d ac	 mov	 ecx, DWORD PTR _xmax$14[ebp]
  00490	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv241[ebp], ecx
$LN116@draw_hatch:
  00496	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv241[ebp]
  0049c	89 95 34 ff ff
	ff		 mov	 DWORD PTR tv242[ebp], edx
$LN118@draw_hatch:
  004a2	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv242[ebp]
  004a8	89 45 ac	 mov	 DWORD PTR _xmax$14[ebp], eax

; 810  : 
; 811  : 					y = y_centre + y_offset;

  004ab	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  004ae	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  004b1	89 45 a8	 mov	 DWORD PTR _y$13[ebp], eax

; 812  : 
; 813  : 					if ( ( y >= active_int_viewport.y_min ) && ( y <= active_int_viewport.y_max ) )

  004b4	8b 45 a8	 mov	 eax, DWORD PTR _y$13[ebp]
  004b7	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  004bd	7c 64		 jl	 SHORT $LN19@draw_hatch
  004bf	8b 45 a8	 mov	 eax, DWORD PTR _y$13[ebp]
  004c2	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  004c8	7f 59		 jg	 SHORT $LN19@draw_hatch

; 814  : 					{
; 815  : 
; 816  : 						line_ptr = ( USHORT * ) ( screen_data + ( screen_pitch * y ) );

  004ca	8b 45 e0	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  004cd	0f af 45 a8	 imul	 eax, DWORD PTR _y$13[ebp]
  004d1	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  004d4	89 45 a4	 mov	 DWORD PTR _line_ptr$12[ebp], eax

; 817  : 
; 818  : 						for ( x = xmin; x <= xmax; x++ )

  004d7	8b 45 b0	 mov	 eax, DWORD PTR _xmin$15[ebp]
  004da	89 45 b4	 mov	 DWORD PTR _x$16[ebp], eax
  004dd	eb 09		 jmp	 SHORT $LN20@draw_hatch
$LN18@draw_hatch:
  004df	8b 45 b4	 mov	 eax, DWORD PTR _x$16[ebp]
  004e2	83 c0 01	 add	 eax, 1
  004e5	89 45 b4	 mov	 DWORD PTR _x$16[ebp], eax
$LN20@draw_hatch:
  004e8	8b 45 b4	 mov	 eax, DWORD PTR _x$16[ebp]
  004eb	3b 45 ac	 cmp	 eax, DWORD PTR _xmax$14[ebp]
  004ee	7f 33		 jg	 SHORT $LN19@draw_hatch

; 819  : 						{
; 820  : 
; 821  : 							if ( ( 1 << ( 31 - ( x & 0x1f ) ) ) & graphics_hatch_pattern[ ( y & 0x1f ) ] )

  004f0	8b 45 b4	 mov	 eax, DWORD PTR _x$16[ebp]
  004f3	83 e0 1f	 and	 eax, 31			; 0000001fH
  004f6	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  004fb	2b c8		 sub	 ecx, eax
  004fd	ba 01 00 00 00	 mov	 edx, 1
  00502	d3 e2		 shl	 edx, cl
  00504	8b 45 a8	 mov	 eax, DWORD PTR _y$13[ebp]
  00507	83 e0 1f	 and	 eax, 31			; 0000001fH
  0050a	23 14 85 00 00
	00 00		 and	 edx, DWORD PTR ?graphics_hatch_pattern@@3PAIA[eax*4]
  00511	74 0e		 je	 SHORT $LN76@draw_hatch

; 822  : 							{
; 823  : 
; 824  : 								line_ptr[x] = col;

  00513	8b 45 b4	 mov	 eax, DWORD PTR _x$16[ebp]
  00516	8b 4d a4	 mov	 ecx, DWORD PTR _line_ptr$12[ebp]
  00519	66 8b 55 cc	 mov	 dx, WORD PTR _col$22[ebp]
  0051d	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
$LN76@draw_hatch:

; 825  : 							}
; 826  : 						}

  00521	eb bc		 jmp	 SHORT $LN18@draw_hatch
$LN19@draw_hatch:

; 827  : 					}
; 828  : 
; 829  : 					y = y_centre - y_offset;

  00523	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00526	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00529	89 45 a8	 mov	 DWORD PTR _y$13[ebp], eax

; 830  : 
; 831  : 					if ( ( y >= active_int_viewport.y_min ) && ( y <= active_int_viewport.y_max ) )

  0052c	8b 45 a8	 mov	 eax, DWORD PTR _y$13[ebp]
  0052f	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00535	7c 64		 jl	 SHORT $LN22@draw_hatch
  00537	8b 45 a8	 mov	 eax, DWORD PTR _y$13[ebp]
  0053a	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00540	7f 59		 jg	 SHORT $LN22@draw_hatch

; 832  : 					{
; 833  : 
; 834  : 						line_ptr = ( USHORT * ) ( screen_data + ( screen_pitch * y ) );

  00542	8b 45 e0	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  00545	0f af 45 a8	 imul	 eax, DWORD PTR _y$13[ebp]
  00549	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  0054c	89 45 a4	 mov	 DWORD PTR _line_ptr$12[ebp], eax

; 835  : 
; 836  : 						for ( x = xmin; x <= xmax; x++ )

  0054f	8b 45 b0	 mov	 eax, DWORD PTR _xmin$15[ebp]
  00552	89 45 b4	 mov	 DWORD PTR _x$16[ebp], eax
  00555	eb 09		 jmp	 SHORT $LN23@draw_hatch
$LN21@draw_hatch:
  00557	8b 45 b4	 mov	 eax, DWORD PTR _x$16[ebp]
  0055a	83 c0 01	 add	 eax, 1
  0055d	89 45 b4	 mov	 DWORD PTR _x$16[ebp], eax
$LN23@draw_hatch:
  00560	8b 45 b4	 mov	 eax, DWORD PTR _x$16[ebp]
  00563	3b 45 ac	 cmp	 eax, DWORD PTR _xmax$14[ebp]
  00566	7f 33		 jg	 SHORT $LN22@draw_hatch

; 837  : 						{
; 838  : 
; 839  : 							if ( ( 1 << ( 31 - ( x & 0x1f ) ) ) & graphics_hatch_pattern[ ( y & 0x1f ) ] )

  00568	8b 45 b4	 mov	 eax, DWORD PTR _x$16[ebp]
  0056b	83 e0 1f	 and	 eax, 31			; 0000001fH
  0056e	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  00573	2b c8		 sub	 ecx, eax
  00575	ba 01 00 00 00	 mov	 edx, 1
  0057a	d3 e2		 shl	 edx, cl
  0057c	8b 45 a8	 mov	 eax, DWORD PTR _y$13[ebp]
  0057f	83 e0 1f	 and	 eax, 31			; 0000001fH
  00582	23 14 85 00 00
	00 00		 and	 edx, DWORD PTR ?graphics_hatch_pattern@@3PAIA[eax*4]
  00589	74 0e		 je	 SHORT $LN78@draw_hatch

; 840  : 							{
; 841  : 
; 842  : 								line_ptr[x] = col;

  0058b	8b 45 b4	 mov	 eax, DWORD PTR _x$16[ebp]
  0058e	8b 4d a4	 mov	 ecx, DWORD PTR _line_ptr$12[ebp]
  00591	66 8b 55 cc	 mov	 dx, WORD PTR _col$22[ebp]
  00595	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
$LN78@draw_hatch:

; 843  : 							}
; 844  : 						}

  00599	eb bc		 jmp	 SHORT $LN21@draw_hatch
$LN22@draw_hatch:

; 845  : 					}
; 846  : 				}
; 847  : 
; 848  : 				xmin = x_centre - y_offset;

  0059b	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  0059e	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  005a1	89 45 b0	 mov	 DWORD PTR _xmin$15[ebp], eax

; 849  : 
; 850  : 				xmax = x_centre + y_offset;

  005a4	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  005a7	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  005aa	89 45 ac	 mov	 DWORD PTR _xmax$14[ebp], eax

; 851  : 
; 852  : 				if ( !( ( xmax < active_int_viewport.x_min ) || ( xmin > active_int_viewport.x_max ) ) )

  005ad	8b 45 ac	 mov	 eax, DWORD PTR _xmax$14[ebp]
  005b0	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  005b6	0f 8c 9d 01 00
	00		 jl	 $LN28@draw_hatch
  005bc	8b 45 b0	 mov	 eax, DWORD PTR _xmin$15[ebp]
  005bf	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  005c5	0f 8f 8e 01 00
	00		 jg	 $LN28@draw_hatch

; 853  : 				{
; 854  : 
; 855  : 					xmin = bound ( xmin, active_int_viewport.x_min, active_int_viewport.x_max );

  005cb	8b 45 b0	 mov	 eax, DWORD PTR _xmin$15[ebp]
  005ce	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  005d4	7d 0e		 jge	 SHORT $LN121@draw_hatch
  005d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  005dc	89 8d 34 ff ff
	ff		 mov	 DWORD PTR tv316[ebp], ecx
  005e2	eb 2d		 jmp	 SHORT $LN122@draw_hatch
$LN121@draw_hatch:
  005e4	8b 55 b0	 mov	 edx, DWORD PTR _xmin$15[ebp]
  005e7	3b 15 08 00 00
	00		 cmp	 edx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  005ed	7e 0d		 jle	 SHORT $LN119@draw_hatch
  005ef	a1 08 00 00 00	 mov	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  005f4	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv315[ebp], eax
  005fa	eb 09		 jmp	 SHORT $LN120@draw_hatch
$LN119@draw_hatch:
  005fc	8b 4d b0	 mov	 ecx, DWORD PTR _xmin$15[ebp]
  005ff	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv315[ebp], ecx
$LN120@draw_hatch:
  00605	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv315[ebp]
  0060b	89 95 34 ff ff
	ff		 mov	 DWORD PTR tv316[ebp], edx
$LN122@draw_hatch:
  00611	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv316[ebp]
  00617	89 45 b0	 mov	 DWORD PTR _xmin$15[ebp], eax

; 856  : 
; 857  : 					xmax = bound ( xmax, active_int_viewport.x_min, active_int_viewport.x_max );

  0061a	8b 45 ac	 mov	 eax, DWORD PTR _xmax$14[ebp]
  0061d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00623	7d 0e		 jge	 SHORT $LN125@draw_hatch
  00625	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  0062b	89 8d 34 ff ff
	ff		 mov	 DWORD PTR tv320[ebp], ecx
  00631	eb 2d		 jmp	 SHORT $LN126@draw_hatch
$LN125@draw_hatch:
  00633	8b 55 ac	 mov	 edx, DWORD PTR _xmax$14[ebp]
  00636	3b 15 08 00 00
	00		 cmp	 edx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  0063c	7e 0d		 jle	 SHORT $LN123@draw_hatch
  0063e	a1 08 00 00 00	 mov	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00643	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv319[ebp], eax
  00649	eb 09		 jmp	 SHORT $LN124@draw_hatch
$LN123@draw_hatch:
  0064b	8b 4d ac	 mov	 ecx, DWORD PTR _xmax$14[ebp]
  0064e	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv319[ebp], ecx
$LN124@draw_hatch:
  00654	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv319[ebp]
  0065a	89 95 34 ff ff
	ff		 mov	 DWORD PTR tv320[ebp], edx
$LN126@draw_hatch:
  00660	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv320[ebp]
  00666	89 45 ac	 mov	 DWORD PTR _xmax$14[ebp], eax

; 858  : 
; 859  : 					y = y_centre + x_offset;

  00669	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  0066c	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  0066f	89 45 a8	 mov	 DWORD PTR _y$13[ebp], eax

; 860  : 
; 861  : 					if ( ( y >= active_int_viewport.y_min ) && ( y <= active_int_viewport.y_max ) )

  00672	8b 45 a8	 mov	 eax, DWORD PTR _y$13[ebp]
  00675	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  0067b	7c 64		 jl	 SHORT $LN25@draw_hatch
  0067d	8b 45 a8	 mov	 eax, DWORD PTR _y$13[ebp]
  00680	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00686	7f 59		 jg	 SHORT $LN25@draw_hatch

; 862  : 					{
; 863  : 
; 864  : 						line_ptr = ( USHORT * ) ( screen_data + ( screen_pitch * y ) );

  00688	8b 45 e0	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  0068b	0f af 45 a8	 imul	 eax, DWORD PTR _y$13[ebp]
  0068f	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00692	89 45 a4	 mov	 DWORD PTR _line_ptr$12[ebp], eax

; 865  : 
; 866  : 						for ( x = xmin; x <= xmax; x++ )

  00695	8b 45 b0	 mov	 eax, DWORD PTR _xmin$15[ebp]
  00698	89 45 b4	 mov	 DWORD PTR _x$16[ebp], eax
  0069b	eb 09		 jmp	 SHORT $LN26@draw_hatch
$LN24@draw_hatch:
  0069d	8b 45 b4	 mov	 eax, DWORD PTR _x$16[ebp]
  006a0	83 c0 01	 add	 eax, 1
  006a3	89 45 b4	 mov	 DWORD PTR _x$16[ebp], eax
$LN26@draw_hatch:
  006a6	8b 45 b4	 mov	 eax, DWORD PTR _x$16[ebp]
  006a9	3b 45 ac	 cmp	 eax, DWORD PTR _xmax$14[ebp]
  006ac	7f 33		 jg	 SHORT $LN25@draw_hatch

; 867  : 						{
; 868  : 
; 869  : 							if ( ( 1 << ( 31 - ( x & 0x1f ) ) ) & graphics_hatch_pattern[ ( y & 0x1f ) ] )

  006ae	8b 45 b4	 mov	 eax, DWORD PTR _x$16[ebp]
  006b1	83 e0 1f	 and	 eax, 31			; 0000001fH
  006b4	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  006b9	2b c8		 sub	 ecx, eax
  006bb	ba 01 00 00 00	 mov	 edx, 1
  006c0	d3 e2		 shl	 edx, cl
  006c2	8b 45 a8	 mov	 eax, DWORD PTR _y$13[ebp]
  006c5	83 e0 1f	 and	 eax, 31			; 0000001fH
  006c8	23 14 85 00 00
	00 00		 and	 edx, DWORD PTR ?graphics_hatch_pattern@@3PAIA[eax*4]
  006cf	74 0e		 je	 SHORT $LN81@draw_hatch

; 870  : 							{
; 871  : 
; 872  : 								line_ptr[x] = col;

  006d1	8b 45 b4	 mov	 eax, DWORD PTR _x$16[ebp]
  006d4	8b 4d a4	 mov	 ecx, DWORD PTR _line_ptr$12[ebp]
  006d7	66 8b 55 cc	 mov	 dx, WORD PTR _col$22[ebp]
  006db	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
$LN81@draw_hatch:

; 873  : 							}
; 874  : 						}

  006df	eb bc		 jmp	 SHORT $LN24@draw_hatch
$LN25@draw_hatch:

; 875  : 					}
; 876  : 
; 877  : 					y = y_centre - x_offset;

  006e1	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  006e4	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  006e7	89 45 a8	 mov	 DWORD PTR _y$13[ebp], eax

; 878  : 
; 879  : 					if ( ( y >= active_int_viewport.y_min ) && ( y <= active_int_viewport.y_max ) )

  006ea	8b 45 a8	 mov	 eax, DWORD PTR _y$13[ebp]
  006ed	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  006f3	7c 64		 jl	 SHORT $LN28@draw_hatch
  006f5	8b 45 a8	 mov	 eax, DWORD PTR _y$13[ebp]
  006f8	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  006fe	7f 59		 jg	 SHORT $LN28@draw_hatch

; 880  : 					{
; 881  : 
; 882  : 						line_ptr = ( USHORT * ) ( screen_data + ( screen_pitch * y ) );

  00700	8b 45 e0	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  00703	0f af 45 a8	 imul	 eax, DWORD PTR _y$13[ebp]
  00707	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  0070a	89 45 a4	 mov	 DWORD PTR _line_ptr$12[ebp], eax

; 883  : 
; 884  : 						for ( x = xmin; x <= xmax; x++ )

  0070d	8b 45 b0	 mov	 eax, DWORD PTR _xmin$15[ebp]
  00710	89 45 b4	 mov	 DWORD PTR _x$16[ebp], eax
  00713	eb 09		 jmp	 SHORT $LN29@draw_hatch
$LN27@draw_hatch:
  00715	8b 45 b4	 mov	 eax, DWORD PTR _x$16[ebp]
  00718	83 c0 01	 add	 eax, 1
  0071b	89 45 b4	 mov	 DWORD PTR _x$16[ebp], eax
$LN29@draw_hatch:
  0071e	8b 45 b4	 mov	 eax, DWORD PTR _x$16[ebp]
  00721	3b 45 ac	 cmp	 eax, DWORD PTR _xmax$14[ebp]
  00724	7f 33		 jg	 SHORT $LN28@draw_hatch

; 885  : 						{
; 886  : 
; 887  : 							if ( ( 1 << ( 31 - ( x & 0x1f ) ) ) & graphics_hatch_pattern[ ( y & 0x1f ) ] )

  00726	8b 45 b4	 mov	 eax, DWORD PTR _x$16[ebp]
  00729	83 e0 1f	 and	 eax, 31			; 0000001fH
  0072c	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  00731	2b c8		 sub	 ecx, eax
  00733	ba 01 00 00 00	 mov	 edx, 1
  00738	d3 e2		 shl	 edx, cl
  0073a	8b 45 a8	 mov	 eax, DWORD PTR _y$13[ebp]
  0073d	83 e0 1f	 and	 eax, 31			; 0000001fH
  00740	23 14 85 00 00
	00 00		 and	 edx, DWORD PTR ?graphics_hatch_pattern@@3PAIA[eax*4]
  00747	74 0e		 je	 SHORT $LN83@draw_hatch

; 888  : 							{
; 889  : 
; 890  : 								line_ptr[x] = col;

  00749	8b 45 b4	 mov	 eax, DWORD PTR _x$16[ebp]
  0074c	8b 4d a4	 mov	 ecx, DWORD PTR _line_ptr$12[ebp]
  0074f	66 8b 55 cc	 mov	 dx, WORD PTR _col$22[ebp]
  00753	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
$LN83@draw_hatch:

; 891  : 							}
; 892  : 						}

  00757	eb bc		 jmp	 SHORT $LN27@draw_hatch
$LN28@draw_hatch:

; 893  : 					}
; 894  : 				}
; 895  : 
; 896  : 				if ( decision < 0 )

  00759	83 7d d4 00	 cmp	 DWORD PTR _decision$[ebp], 0
  0075d	7d 0f		 jge	 SHORT $LN84@draw_hatch

; 897  : 				{
; 898  : 
; 899  : 					decision += ( x_offset << 2 ) + 6;

  0075f	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  00762	8b 4d d4	 mov	 ecx, DWORD PTR _decision$[ebp]
  00765	8d 54 81 06	 lea	 edx, DWORD PTR [ecx+eax*4+6]
  00769	89 55 d4	 mov	 DWORD PTR _decision$[ebp], edx

; 900  : 				}
; 901  : 				else

  0076c	eb 19		 jmp	 SHORT $LN85@draw_hatch
$LN84@draw_hatch:

; 902  : 				{
; 903  : 
; 904  : 					decision += ( ( x_offset - y_offset ) << 2 ) + 10;

  0076e	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  00771	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00774	8b 4d d4	 mov	 ecx, DWORD PTR _decision$[ebp]
  00777	8d 54 81 0a	 lea	 edx, DWORD PTR [ecx+eax*4+10]
  0077b	89 55 d4	 mov	 DWORD PTR _decision$[ebp], edx

; 905  : 
; 906  : 					y_offset--;

  0077e	8b 45 d8	 mov	 eax, DWORD PTR _y_offset$[ebp]
  00781	83 e8 01	 sub	 eax, 1
  00784	89 45 d8	 mov	 DWORD PTR _y_offset$[ebp], eax
$LN85@draw_hatch:

; 907  : 				}
; 908  : 
; 909  : 				x_offset++;

  00787	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  0078a	83 c0 01	 add	 eax, 1
  0078d	89 45 dc	 mov	 DWORD PTR _x_offset$[ebp], eax

; 910  : 			}

  00790	e9 3c fc ff ff	 jmp	 $LN66@draw_hatch
$LN17@draw_hatch:

; 911  : 		}
; 912  : 	}
; 913  : 	else

  00795	e9 1b 07 00 00	 jmp	 $LN45@draw_hatch
$LN60@draw_hatch:

; 914  : 	{
; 915  : 
; 916  : 		ULONG
; 917  : 			col;
; 918  : 
; 919  : 		convert_float_to_int ( x, &x_centre );

  0079a	8d 45 fc	 lea	 eax, DWORD PTR _x_centre$[ebp]
  0079d	50		 push	 eax
  0079e	51		 push	 ecx
  0079f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  007a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a9	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 920  : 		convert_float_to_int ( y, &y_centre );

  007ae	8d 45 f8	 lea	 eax, DWORD PTR _y_centre$[ebp]
  007b1	50		 push	 eax
  007b2	51		 push	 ecx
  007b3	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  007b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007bd	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 921  : 		convert_float_to_int ( r, &radius );

  007c2	8d 45 f4	 lea	 eax, DWORD PTR _radius$[ebp]
  007c5	50		 push	 eax
  007c6	51		 push	 ecx
  007c7	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _r$[ebp]
  007cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d1	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 922  : 
; 923  : 		//
; 924  : 		// trivially reject
; 925  : 		//
; 926  : 
; 927  : 		if ( ( x_min = x_centre - radius ) > active_int_viewport.x_max ) return;

  007d6	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  007d9	2b 45 f4	 sub	 eax, DWORD PTR _radius$[ebp]
  007dc	89 45 f0	 mov	 DWORD PTR _x_min$[ebp], eax
  007df	8b 4d f0	 mov	 ecx, DWORD PTR _x_min$[ebp]
  007e2	3b 0d 08 00 00
	00		 cmp	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  007e8	7e 05		 jle	 SHORT $LN86@draw_hatch
  007ea	e9 c6 06 00 00	 jmp	 $LN1@draw_hatch
$LN86@draw_hatch:

; 928  : 		if ( ( y_min = y_centre - radius ) > active_int_viewport.y_max ) return;

  007ef	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  007f2	2b 45 f4	 sub	 eax, DWORD PTR _radius$[ebp]
  007f5	89 45 ec	 mov	 DWORD PTR _y_min$[ebp], eax
  007f8	8b 4d ec	 mov	 ecx, DWORD PTR _y_min$[ebp]
  007fb	3b 0d 0c 00 00
	00		 cmp	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00801	7e 05		 jle	 SHORT $LN87@draw_hatch
  00803	e9 ad 06 00 00	 jmp	 $LN1@draw_hatch
$LN87@draw_hatch:

; 929  : 		if ( ( x_max = x_centre + radius ) < active_int_viewport.x_min ) return;

  00808	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  0080b	03 45 f4	 add	 eax, DWORD PTR _radius$[ebp]
  0080e	89 45 e8	 mov	 DWORD PTR _x_max$[ebp], eax
  00811	8b 4d e8	 mov	 ecx, DWORD PTR _x_max$[ebp]
  00814	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  0081a	7d 05		 jge	 SHORT $LN88@draw_hatch
  0081c	e9 94 06 00 00	 jmp	 $LN1@draw_hatch
$LN88@draw_hatch:

; 930  : 		if ( ( y_max = y_centre + radius ) < active_int_viewport.y_min ) return;

  00821	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00824	03 45 f4	 add	 eax, DWORD PTR _radius$[ebp]
  00827	89 45 e4	 mov	 DWORD PTR _y_max$[ebp], eax
  0082a	8b 4d e4	 mov	 ecx, DWORD PTR _y_max$[ebp]
  0082d	3b 0d 04 00 00
	00		 cmp	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00833	7d 05		 jge	 SHORT $LN89@draw_hatch
  00835	e9 7b 06 00 00	 jmp	 $LN1@draw_hatch
$LN89@draw_hatch:

; 931  : 
; 932  : 		//
; 933  : 		// get screen values
; 934  : 		//
; 935  : 
; 936  : 		col = colour.colour;

  0083a	8b 45 14	 mov	 eax, DWORD PTR _colour$[ebp]
  0083d	89 45 a0	 mov	 DWORD PTR _col$11[ebp], eax

; 937  : 
; 938  : 		screen_data = get_screen_data ( active_screen );

  00840	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00845	50		 push	 eax
  00846	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  0084b	89 45 d0	 mov	 DWORD PTR _screen_data$[ebp], eax

; 939  : 		screen_pitch = get_screen_pitch ( active_screen );

  0084e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00853	50		 push	 eax
  00854	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  00859	89 45 e0	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 940  : 
; 941  : 		//
; 942  : 		// draw circle
; 943  : 		//
; 944  : 
; 945  : 		x_offset = 0;

  0085c	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _x_offset$[ebp], 0

; 946  : 
; 947  : 		y_offset = radius;

  00863	8b 45 f4	 mov	 eax, DWORD PTR _radius$[ebp]
  00866	89 45 d8	 mov	 DWORD PTR _y_offset$[ebp], eax

; 948  : 
; 949  : 		decision = 3 - (radius << 1);

  00869	8b 45 f4	 mov	 eax, DWORD PTR _radius$[ebp]
  0086c	d1 e0		 shl	 eax, 1
  0086e	b9 03 00 00 00	 mov	 ecx, 3
  00873	2b c8		 sub	 ecx, eax
  00875	89 4d d4	 mov	 DWORD PTR _decision$[ebp], ecx

; 950  : 
; 951  : 		if (	( x_min >= active_int_viewport.x_min ) && ( x_max <= active_int_viewport.x_max ) &&
; 952  : 				( y_min >= active_int_viewport.y_min ) && ( y_max <= active_int_viewport.y_max ) )

  00878	8b 45 f0	 mov	 eax, DWORD PTR _x_min$[ebp]
  0087b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00881	0f 8c 1e 02 00
	00		 jl	 $LN90@draw_hatch
  00887	8b 45 e8	 mov	 eax, DWORD PTR _x_max$[ebp]
  0088a	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00890	0f 8f 0f 02 00
	00		 jg	 $LN90@draw_hatch
  00896	8b 45 ec	 mov	 eax, DWORD PTR _y_min$[ebp]
  00899	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  0089f	0f 8c 00 02 00
	00		 jl	 $LN90@draw_hatch
  008a5	8b 45 e4	 mov	 eax, DWORD PTR _y_max$[ebp]
  008a8	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  008ae	0f 8f f1 01 00
	00		 jg	 $LN90@draw_hatch
$LN30@draw_hatch:

; 953  : 		{
; 954  : 
; 955  : 			//
; 956  : 			// draw unclipped circle
; 957  : 			//
; 958  : 
; 959  : 			while ( x_offset <= y_offset )

  008b4	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  008b7	3b 45 d8	 cmp	 eax, DWORD PTR _y_offset$[ebp]
  008ba	0f 8f e0 01 00
	00		 jg	 $LN31@draw_hatch

; 960  : 			{
; 961  : 
; 962  : 				int
; 963  : 					x,
; 964  : 					xmin,
; 965  : 					xmax,
; 966  : 					y;
; 967  : 
; 968  : 				ULONG
; 969  : 					*line_ptr;
; 970  : 
; 971  : 				xmin = x_centre - x_offset;

  008c0	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  008c3	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  008c6	89 45 98	 mov	 DWORD PTR _xmin$9[ebp], eax

; 972  : 				xmax = x_centre + x_offset;

  008c9	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  008cc	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  008cf	89 45 94	 mov	 DWORD PTR _xmax$8[ebp], eax

; 973  : 
; 974  : 				y = y_centre + y_offset;

  008d2	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  008d5	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  008d8	89 45 90	 mov	 DWORD PTR _y$7[ebp], eax

; 975  : 
; 976  : 				{
; 977  : 
; 978  : 					line_ptr = ( ULONG * ) ( screen_data + ( screen_pitch * y ) );

  008db	8b 45 e0	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  008de	0f af 45 90	 imul	 eax, DWORD PTR _y$7[ebp]
  008e2	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  008e5	89 45 8c	 mov	 DWORD PTR _line_ptr$6[ebp], eax

; 979  : 
; 980  : 					for ( x = xmin; x <= xmax; x++ )

  008e8	8b 45 98	 mov	 eax, DWORD PTR _xmin$9[ebp]
  008eb	89 45 9c	 mov	 DWORD PTR _x$10[ebp], eax
  008ee	eb 09		 jmp	 SHORT $LN34@draw_hatch
$LN32@draw_hatch:
  008f0	8b 45 9c	 mov	 eax, DWORD PTR _x$10[ebp]
  008f3	83 c0 01	 add	 eax, 1
  008f6	89 45 9c	 mov	 DWORD PTR _x$10[ebp], eax
$LN34@draw_hatch:
  008f9	8b 45 9c	 mov	 eax, DWORD PTR _x$10[ebp]
  008fc	3b 45 94	 cmp	 eax, DWORD PTR _xmax$8[ebp]
  008ff	7f 31		 jg	 SHORT $LN33@draw_hatch

; 981  : 					{
; 982  : 
; 983  : 						if ( ( 1 << ( 31 - ( x & 0x1f ) ) ) & graphics_hatch_pattern[ ( y & 0x1f ) ] )

  00901	8b 45 9c	 mov	 eax, DWORD PTR _x$10[ebp]
  00904	83 e0 1f	 and	 eax, 31			; 0000001fH
  00907	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  0090c	2b c8		 sub	 ecx, eax
  0090e	ba 01 00 00 00	 mov	 edx, 1
  00913	d3 e2		 shl	 edx, cl
  00915	8b 45 90	 mov	 eax, DWORD PTR _y$7[ebp]
  00918	83 e0 1f	 and	 eax, 31			; 0000001fH
  0091b	23 14 85 00 00
	00 00		 and	 edx, DWORD PTR ?graphics_hatch_pattern@@3PAIA[eax*4]
  00922	74 0c		 je	 SHORT $LN92@draw_hatch

; 984  : 						{
; 985  : 
; 986  : 							line_ptr[x] = col;

  00924	8b 45 9c	 mov	 eax, DWORD PTR _x$10[ebp]
  00927	8b 4d 8c	 mov	 ecx, DWORD PTR _line_ptr$6[ebp]
  0092a	8b 55 a0	 mov	 edx, DWORD PTR _col$11[ebp]
  0092d	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx
$LN92@draw_hatch:

; 987  : 						}
; 988  : 					}

  00930	eb be		 jmp	 SHORT $LN32@draw_hatch
$LN33@draw_hatch:

; 989  : 				}
; 990  : 
; 991  : 				y = y_centre - y_offset;

  00932	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00935	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00938	89 45 90	 mov	 DWORD PTR _y$7[ebp], eax

; 992  : 
; 993  : 				{
; 994  : 
; 995  : 					line_ptr = ( ULONG * ) ( screen_data + ( screen_pitch * y ) );

  0093b	8b 45 e0	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  0093e	0f af 45 90	 imul	 eax, DWORD PTR _y$7[ebp]
  00942	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00945	89 45 8c	 mov	 DWORD PTR _line_ptr$6[ebp], eax

; 996  : 
; 997  : 					for ( x = xmin; x <= xmax; x++ )

  00948	8b 45 98	 mov	 eax, DWORD PTR _xmin$9[ebp]
  0094b	89 45 9c	 mov	 DWORD PTR _x$10[ebp], eax
  0094e	eb 09		 jmp	 SHORT $LN37@draw_hatch
$LN35@draw_hatch:
  00950	8b 45 9c	 mov	 eax, DWORD PTR _x$10[ebp]
  00953	83 c0 01	 add	 eax, 1
  00956	89 45 9c	 mov	 DWORD PTR _x$10[ebp], eax
$LN37@draw_hatch:
  00959	8b 45 9c	 mov	 eax, DWORD PTR _x$10[ebp]
  0095c	3b 45 94	 cmp	 eax, DWORD PTR _xmax$8[ebp]
  0095f	7f 31		 jg	 SHORT $LN36@draw_hatch

; 998  : 					{
; 999  : 
; 1000 : 						if ( ( 1 << ( 31 - ( x & 0x1f ) ) ) & graphics_hatch_pattern[ ( y & 0x1f ) ] )

  00961	8b 45 9c	 mov	 eax, DWORD PTR _x$10[ebp]
  00964	83 e0 1f	 and	 eax, 31			; 0000001fH
  00967	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  0096c	2b c8		 sub	 ecx, eax
  0096e	ba 01 00 00 00	 mov	 edx, 1
  00973	d3 e2		 shl	 edx, cl
  00975	8b 45 90	 mov	 eax, DWORD PTR _y$7[ebp]
  00978	83 e0 1f	 and	 eax, 31			; 0000001fH
  0097b	23 14 85 00 00
	00 00		 and	 edx, DWORD PTR ?graphics_hatch_pattern@@3PAIA[eax*4]
  00982	74 0c		 je	 SHORT $LN93@draw_hatch

; 1001 : 						{
; 1002 : 
; 1003 : 							line_ptr[x] = col;

  00984	8b 45 9c	 mov	 eax, DWORD PTR _x$10[ebp]
  00987	8b 4d 8c	 mov	 ecx, DWORD PTR _line_ptr$6[ebp]
  0098a	8b 55 a0	 mov	 edx, DWORD PTR _col$11[ebp]
  0098d	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx
$LN93@draw_hatch:

; 1004 : 						}
; 1005 : 					}

  00990	eb be		 jmp	 SHORT $LN35@draw_hatch
$LN36@draw_hatch:

; 1006 : 				}
; 1007 : 
; 1008 : 				xmin = x_centre - y_offset;

  00992	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  00995	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00998	89 45 98	 mov	 DWORD PTR _xmin$9[ebp], eax

; 1009 : 
; 1010 : 				xmax = x_centre + y_offset;

  0099b	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  0099e	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  009a1	89 45 94	 mov	 DWORD PTR _xmax$8[ebp], eax

; 1011 : 
; 1012 : 				y = y_centre + x_offset;

  009a4	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  009a7	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  009aa	89 45 90	 mov	 DWORD PTR _y$7[ebp], eax

; 1013 : 
; 1014 : 				{
; 1015 : 
; 1016 : 					line_ptr = ( ULONG * ) ( screen_data + ( screen_pitch * y ) );

  009ad	8b 45 e0	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  009b0	0f af 45 90	 imul	 eax, DWORD PTR _y$7[ebp]
  009b4	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  009b7	89 45 8c	 mov	 DWORD PTR _line_ptr$6[ebp], eax

; 1017 : 
; 1018 : 					for ( x = xmin; x <= xmax; x++ )

  009ba	8b 45 98	 mov	 eax, DWORD PTR _xmin$9[ebp]
  009bd	89 45 9c	 mov	 DWORD PTR _x$10[ebp], eax
  009c0	eb 09		 jmp	 SHORT $LN40@draw_hatch
$LN38@draw_hatch:
  009c2	8b 45 9c	 mov	 eax, DWORD PTR _x$10[ebp]
  009c5	83 c0 01	 add	 eax, 1
  009c8	89 45 9c	 mov	 DWORD PTR _x$10[ebp], eax
$LN40@draw_hatch:
  009cb	8b 45 9c	 mov	 eax, DWORD PTR _x$10[ebp]
  009ce	3b 45 94	 cmp	 eax, DWORD PTR _xmax$8[ebp]
  009d1	7f 31		 jg	 SHORT $LN39@draw_hatch

; 1019 : 					{
; 1020 : 
; 1021 : 						if ( ( 1 << ( 31 - ( x & 0x1f ) ) ) & graphics_hatch_pattern[ ( y & 0x1f ) ] )

  009d3	8b 45 9c	 mov	 eax, DWORD PTR _x$10[ebp]
  009d6	83 e0 1f	 and	 eax, 31			; 0000001fH
  009d9	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  009de	2b c8		 sub	 ecx, eax
  009e0	ba 01 00 00 00	 mov	 edx, 1
  009e5	d3 e2		 shl	 edx, cl
  009e7	8b 45 90	 mov	 eax, DWORD PTR _y$7[ebp]
  009ea	83 e0 1f	 and	 eax, 31			; 0000001fH
  009ed	23 14 85 00 00
	00 00		 and	 edx, DWORD PTR ?graphics_hatch_pattern@@3PAIA[eax*4]
  009f4	74 0c		 je	 SHORT $LN94@draw_hatch

; 1022 : 						{
; 1023 : 
; 1024 : 							line_ptr[x] = col;

  009f6	8b 45 9c	 mov	 eax, DWORD PTR _x$10[ebp]
  009f9	8b 4d 8c	 mov	 ecx, DWORD PTR _line_ptr$6[ebp]
  009fc	8b 55 a0	 mov	 edx, DWORD PTR _col$11[ebp]
  009ff	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx
$LN94@draw_hatch:

; 1025 : 						}
; 1026 : 					}

  00a02	eb be		 jmp	 SHORT $LN38@draw_hatch
$LN39@draw_hatch:

; 1027 : 				}
; 1028 : 
; 1029 : 				y = y_centre - x_offset;

  00a04	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00a07	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  00a0a	89 45 90	 mov	 DWORD PTR _y$7[ebp], eax

; 1030 : 
; 1031 : 				{
; 1032 : 
; 1033 : 					line_ptr = ( ULONG * ) ( screen_data + ( screen_pitch * y ) );

  00a0d	8b 45 e0	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  00a10	0f af 45 90	 imul	 eax, DWORD PTR _y$7[ebp]
  00a14	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00a17	89 45 8c	 mov	 DWORD PTR _line_ptr$6[ebp], eax

; 1034 : 
; 1035 : 					for ( x = xmin; x <= xmax; x++ )

  00a1a	8b 45 98	 mov	 eax, DWORD PTR _xmin$9[ebp]
  00a1d	89 45 9c	 mov	 DWORD PTR _x$10[ebp], eax
  00a20	eb 09		 jmp	 SHORT $LN43@draw_hatch
$LN41@draw_hatch:
  00a22	8b 45 9c	 mov	 eax, DWORD PTR _x$10[ebp]
  00a25	83 c0 01	 add	 eax, 1
  00a28	89 45 9c	 mov	 DWORD PTR _x$10[ebp], eax
$LN43@draw_hatch:
  00a2b	8b 45 9c	 mov	 eax, DWORD PTR _x$10[ebp]
  00a2e	3b 45 94	 cmp	 eax, DWORD PTR _xmax$8[ebp]
  00a31	7f 31		 jg	 SHORT $LN42@draw_hatch

; 1036 : 					{
; 1037 : 
; 1038 : 						if ( ( 1 << ( 31 - ( x & 0x1f ) ) ) & graphics_hatch_pattern[ ( y & 0x1f ) ] )

  00a33	8b 45 9c	 mov	 eax, DWORD PTR _x$10[ebp]
  00a36	83 e0 1f	 and	 eax, 31			; 0000001fH
  00a39	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  00a3e	2b c8		 sub	 ecx, eax
  00a40	ba 01 00 00 00	 mov	 edx, 1
  00a45	d3 e2		 shl	 edx, cl
  00a47	8b 45 90	 mov	 eax, DWORD PTR _y$7[ebp]
  00a4a	83 e0 1f	 and	 eax, 31			; 0000001fH
  00a4d	23 14 85 00 00
	00 00		 and	 edx, DWORD PTR ?graphics_hatch_pattern@@3PAIA[eax*4]
  00a54	74 0c		 je	 SHORT $LN95@draw_hatch

; 1039 : 						{
; 1040 : 
; 1041 : 							line_ptr[x] = col;

  00a56	8b 45 9c	 mov	 eax, DWORD PTR _x$10[ebp]
  00a59	8b 4d 8c	 mov	 ecx, DWORD PTR _line_ptr$6[ebp]
  00a5c	8b 55 a0	 mov	 edx, DWORD PTR _col$11[ebp]
  00a5f	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx
$LN95@draw_hatch:

; 1042 : 						}
; 1043 : 					}

  00a62	eb be		 jmp	 SHORT $LN41@draw_hatch
$LN42@draw_hatch:

; 1044 : 				}
; 1045 : 
; 1046 : 				if ( decision < 0 )

  00a64	83 7d d4 00	 cmp	 DWORD PTR _decision$[ebp], 0
  00a68	7d 0f		 jge	 SHORT $LN96@draw_hatch

; 1047 : 				{
; 1048 : 
; 1049 : 					decision += ( x_offset << 2 ) + 6;

  00a6a	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  00a6d	8b 4d d4	 mov	 ecx, DWORD PTR _decision$[ebp]
  00a70	8d 54 81 06	 lea	 edx, DWORD PTR [ecx+eax*4+6]
  00a74	89 55 d4	 mov	 DWORD PTR _decision$[ebp], edx

; 1050 : 				}
; 1051 : 				else

  00a77	eb 19		 jmp	 SHORT $LN97@draw_hatch
$LN96@draw_hatch:

; 1052 : 				{
; 1053 : 
; 1054 : 					decision += ( ( x_offset - y_offset ) << 2 ) + 10;

  00a79	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  00a7c	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00a7f	8b 4d d4	 mov	 ecx, DWORD PTR _decision$[ebp]
  00a82	8d 54 81 0a	 lea	 edx, DWORD PTR [ecx+eax*4+10]
  00a86	89 55 d4	 mov	 DWORD PTR _decision$[ebp], edx

; 1055 : 
; 1056 : 					y_offset--;

  00a89	8b 45 d8	 mov	 eax, DWORD PTR _y_offset$[ebp]
  00a8c	83 e8 01	 sub	 eax, 1
  00a8f	89 45 d8	 mov	 DWORD PTR _y_offset$[ebp], eax
$LN97@draw_hatch:

; 1057 : 				}
; 1058 : 
; 1059 : 				x_offset++;

  00a92	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  00a95	83 c0 01	 add	 eax, 1
  00a98	89 45 dc	 mov	 DWORD PTR _x_offset$[ebp], eax

; 1060 : 			}

  00a9b	e9 14 fe ff ff	 jmp	 $LN30@draw_hatch
$LN31@draw_hatch:

; 1061 : 		}
; 1062 : 		else

  00aa0	e9 10 04 00 00	 jmp	 $LN45@draw_hatch
$LN90@draw_hatch:

; 1063 : 		{
; 1064 : 			//
; 1065 : 			// draw clipped circle
; 1066 : 			//
; 1067 : 
; 1068 : 			while ( x_offset <= y_offset )

  00aa5	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  00aa8	3b 45 d8	 cmp	 eax, DWORD PTR _y_offset$[ebp]
  00aab	0f 8f 04 04 00
	00		 jg	 $LN45@draw_hatch

; 1069 : 			{
; 1070 : 
; 1071 : 				int
; 1072 : 					x,
; 1073 : 					xmin,
; 1074 : 					xmax,
; 1075 : 					y;
; 1076 : 
; 1077 : 				ULONG
; 1078 : 					*line_ptr;
; 1079 : 
; 1080 : 				xmin = x_centre - x_offset;

  00ab1	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  00ab4	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  00ab7	89 45 84	 mov	 DWORD PTR _xmin$4[ebp], eax

; 1081 : 				xmax = x_centre + x_offset;

  00aba	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  00abd	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  00ac0	89 45 80	 mov	 DWORD PTR _xmax$3[ebp], eax

; 1082 : 
; 1083 : 				if ( !( ( xmax < active_int_viewport.x_min ) || ( xmin > active_int_viewport.x_max ) ) )

  00ac3	8b 45 80	 mov	 eax, DWORD PTR _xmax$3[ebp]
  00ac6	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00acc	0f 8c c3 01 00
	00		 jl	 $LN50@draw_hatch
  00ad2	8b 45 84	 mov	 eax, DWORD PTR _xmin$4[ebp]
  00ad5	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00adb	0f 8f b4 01 00
	00		 jg	 $LN50@draw_hatch

; 1084 : 				{
; 1085 : 
; 1086 : 					xmin = bound ( xmin, active_int_viewport.x_min, active_int_viewport.x_max );

  00ae1	8b 45 84	 mov	 eax, DWORD PTR _xmin$4[ebp]
  00ae4	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00aea	7d 0e		 jge	 SHORT $LN129@draw_hatch
  00aec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00af2	89 8d 34 ff ff
	ff		 mov	 DWORD PTR tv472[ebp], ecx
  00af8	eb 2d		 jmp	 SHORT $LN130@draw_hatch
$LN129@draw_hatch:
  00afa	8b 55 84	 mov	 edx, DWORD PTR _xmin$4[ebp]
  00afd	3b 15 08 00 00
	00		 cmp	 edx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00b03	7e 0d		 jle	 SHORT $LN127@draw_hatch
  00b05	a1 08 00 00 00	 mov	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00b0a	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv471[ebp], eax
  00b10	eb 09		 jmp	 SHORT $LN128@draw_hatch
$LN127@draw_hatch:
  00b12	8b 4d 84	 mov	 ecx, DWORD PTR _xmin$4[ebp]
  00b15	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv471[ebp], ecx
$LN128@draw_hatch:
  00b1b	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv471[ebp]
  00b21	89 95 34 ff ff
	ff		 mov	 DWORD PTR tv472[ebp], edx
$LN130@draw_hatch:
  00b27	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv472[ebp]
  00b2d	89 45 84	 mov	 DWORD PTR _xmin$4[ebp], eax

; 1087 : 
; 1088 : 					xmax = bound ( xmax, active_int_viewport.x_min, active_int_viewport.x_max );

  00b30	8b 45 80	 mov	 eax, DWORD PTR _xmax$3[ebp]
  00b33	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00b39	7d 0e		 jge	 SHORT $LN133@draw_hatch
  00b3b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00b41	89 8d 34 ff ff
	ff		 mov	 DWORD PTR tv476[ebp], ecx
  00b47	eb 2d		 jmp	 SHORT $LN134@draw_hatch
$LN133@draw_hatch:
  00b49	8b 55 80	 mov	 edx, DWORD PTR _xmax$3[ebp]
  00b4c	3b 15 08 00 00
	00		 cmp	 edx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00b52	7e 0d		 jle	 SHORT $LN131@draw_hatch
  00b54	a1 08 00 00 00	 mov	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00b59	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv475[ebp], eax
  00b5f	eb 09		 jmp	 SHORT $LN132@draw_hatch
$LN131@draw_hatch:
  00b61	8b 4d 80	 mov	 ecx, DWORD PTR _xmax$3[ebp]
  00b64	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv475[ebp], ecx
$LN132@draw_hatch:
  00b6a	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv475[ebp]
  00b70	89 95 34 ff ff
	ff		 mov	 DWORD PTR tv476[ebp], edx
$LN134@draw_hatch:
  00b76	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv476[ebp]
  00b7c	89 45 80	 mov	 DWORD PTR _xmax$3[ebp], eax

; 1089 : 
; 1090 : 					y = y_centre + y_offset;

  00b7f	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00b82	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  00b85	89 85 7c ff ff
	ff		 mov	 DWORD PTR _y$2[ebp], eax

; 1091 : 
; 1092 : 					if ( ( y >= active_int_viewport.y_min ) && ( y <= active_int_viewport.y_max ) )

  00b8b	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _y$2[ebp]
  00b91	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00b97	7c 71		 jl	 SHORT $LN47@draw_hatch
  00b99	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _y$2[ebp]
  00b9f	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00ba5	7f 63		 jg	 SHORT $LN47@draw_hatch

; 1093 : 					{
; 1094 : 
; 1095 : 						line_ptr = ( ULONG * ) ( screen_data + ( screen_pitch * y ) );

  00ba7	8b 45 e0	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  00baa	0f af 85 7c ff
	ff ff		 imul	 eax, DWORD PTR _y$2[ebp]
  00bb1	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00bb4	89 85 78 ff ff
	ff		 mov	 DWORD PTR _line_ptr$1[ebp], eax

; 1096 : 
; 1097 : 						for ( x = xmin; x <= xmax; x++ )

  00bba	8b 45 84	 mov	 eax, DWORD PTR _xmin$4[ebp]
  00bbd	89 45 88	 mov	 DWORD PTR _x$5[ebp], eax
  00bc0	eb 09		 jmp	 SHORT $LN48@draw_hatch
$LN46@draw_hatch:
  00bc2	8b 45 88	 mov	 eax, DWORD PTR _x$5[ebp]
  00bc5	83 c0 01	 add	 eax, 1
  00bc8	89 45 88	 mov	 DWORD PTR _x$5[ebp], eax
$LN48@draw_hatch:
  00bcb	8b 45 88	 mov	 eax, DWORD PTR _x$5[ebp]
  00bce	3b 45 80	 cmp	 eax, DWORD PTR _xmax$3[ebp]
  00bd1	7f 37		 jg	 SHORT $LN47@draw_hatch

; 1098 : 						{
; 1099 : 
; 1100 : 							if ( ( 1 << ( 31 - ( x & 0x1f ) ) ) & graphics_hatch_pattern[ ( y & 0x1f ) ] )

  00bd3	8b 45 88	 mov	 eax, DWORD PTR _x$5[ebp]
  00bd6	83 e0 1f	 and	 eax, 31			; 0000001fH
  00bd9	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  00bde	2b c8		 sub	 ecx, eax
  00be0	ba 01 00 00 00	 mov	 edx, 1
  00be5	d3 e2		 shl	 edx, cl
  00be7	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _y$2[ebp]
  00bed	83 e0 1f	 and	 eax, 31			; 0000001fH
  00bf0	23 14 85 00 00
	00 00		 and	 edx, DWORD PTR ?graphics_hatch_pattern@@3PAIA[eax*4]
  00bf7	74 0f		 je	 SHORT $LN100@draw_hatch

; 1101 : 							{
; 1102 : 
; 1103 : 								line_ptr[x] = col;

  00bf9	8b 45 88	 mov	 eax, DWORD PTR _x$5[ebp]
  00bfc	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _line_ptr$1[ebp]
  00c02	8b 55 a0	 mov	 edx, DWORD PTR _col$11[ebp]
  00c05	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx
$LN100@draw_hatch:

; 1104 : 							}
; 1105 : 						}

  00c08	eb b8		 jmp	 SHORT $LN46@draw_hatch
$LN47@draw_hatch:

; 1106 : 					}
; 1107 : 
; 1108 : 					y = y_centre - y_offset;

  00c0a	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00c0d	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00c10	89 85 7c ff ff
	ff		 mov	 DWORD PTR _y$2[ebp], eax

; 1109 : 
; 1110 : 					if ( ( y >= active_int_viewport.y_min ) && ( y <= active_int_viewport.y_max ) )

  00c16	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _y$2[ebp]
  00c1c	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00c22	7c 71		 jl	 SHORT $LN50@draw_hatch
  00c24	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _y$2[ebp]
  00c2a	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00c30	7f 63		 jg	 SHORT $LN50@draw_hatch

; 1111 : 					{
; 1112 : 
; 1113 : 						line_ptr = ( ULONG * ) ( screen_data + ( screen_pitch * y ) );

  00c32	8b 45 e0	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  00c35	0f af 85 7c ff
	ff ff		 imul	 eax, DWORD PTR _y$2[ebp]
  00c3c	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00c3f	89 85 78 ff ff
	ff		 mov	 DWORD PTR _line_ptr$1[ebp], eax

; 1114 : 
; 1115 : 						for ( x = xmin; x <= xmax; x++ )

  00c45	8b 45 84	 mov	 eax, DWORD PTR _xmin$4[ebp]
  00c48	89 45 88	 mov	 DWORD PTR _x$5[ebp], eax
  00c4b	eb 09		 jmp	 SHORT $LN51@draw_hatch
$LN49@draw_hatch:
  00c4d	8b 45 88	 mov	 eax, DWORD PTR _x$5[ebp]
  00c50	83 c0 01	 add	 eax, 1
  00c53	89 45 88	 mov	 DWORD PTR _x$5[ebp], eax
$LN51@draw_hatch:
  00c56	8b 45 88	 mov	 eax, DWORD PTR _x$5[ebp]
  00c59	3b 45 80	 cmp	 eax, DWORD PTR _xmax$3[ebp]
  00c5c	7f 37		 jg	 SHORT $LN50@draw_hatch

; 1116 : 						{
; 1117 : 
; 1118 : 							if ( ( 1 << ( 31 - ( x & 0x1f ) ) ) & graphics_hatch_pattern[ ( y & 0x1f ) ] )

  00c5e	8b 45 88	 mov	 eax, DWORD PTR _x$5[ebp]
  00c61	83 e0 1f	 and	 eax, 31			; 0000001fH
  00c64	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  00c69	2b c8		 sub	 ecx, eax
  00c6b	ba 01 00 00 00	 mov	 edx, 1
  00c70	d3 e2		 shl	 edx, cl
  00c72	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _y$2[ebp]
  00c78	83 e0 1f	 and	 eax, 31			; 0000001fH
  00c7b	23 14 85 00 00
	00 00		 and	 edx, DWORD PTR ?graphics_hatch_pattern@@3PAIA[eax*4]
  00c82	74 0f		 je	 SHORT $LN102@draw_hatch

; 1119 : 							{
; 1120 : 
; 1121 : 								line_ptr[x] = col;

  00c84	8b 45 88	 mov	 eax, DWORD PTR _x$5[ebp]
  00c87	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _line_ptr$1[ebp]
  00c8d	8b 55 a0	 mov	 edx, DWORD PTR _col$11[ebp]
  00c90	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx
$LN102@draw_hatch:

; 1122 : 							}
; 1123 : 						}

  00c93	eb b8		 jmp	 SHORT $LN49@draw_hatch
$LN50@draw_hatch:

; 1124 : 					}
; 1125 : 				}
; 1126 : 
; 1127 : 				xmin = x_centre - y_offset;

  00c95	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  00c98	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00c9b	89 45 84	 mov	 DWORD PTR _xmin$4[ebp], eax

; 1128 : 
; 1129 : 				xmax = x_centre + y_offset;

  00c9e	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  00ca1	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  00ca4	89 45 80	 mov	 DWORD PTR _xmax$3[ebp], eax

; 1130 : 
; 1131 : 				if ( !( ( xmax < active_int_viewport.x_min ) || ( xmin > active_int_viewport.x_max ) ) )

  00ca7	8b 45 80	 mov	 eax, DWORD PTR _xmax$3[ebp]
  00caa	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00cb0	0f 8c c3 01 00
	00		 jl	 $LN56@draw_hatch
  00cb6	8b 45 84	 mov	 eax, DWORD PTR _xmin$4[ebp]
  00cb9	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00cbf	0f 8f b4 01 00
	00		 jg	 $LN56@draw_hatch

; 1132 : 				{
; 1133 : 
; 1134 : 					xmin = bound ( xmin, active_int_viewport.x_min, active_int_viewport.x_max );

  00cc5	8b 45 84	 mov	 eax, DWORD PTR _xmin$4[ebp]
  00cc8	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00cce	7d 0e		 jge	 SHORT $LN137@draw_hatch
  00cd0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00cd6	89 8d 34 ff ff
	ff		 mov	 DWORD PTR tv518[ebp], ecx
  00cdc	eb 2d		 jmp	 SHORT $LN138@draw_hatch
$LN137@draw_hatch:
  00cde	8b 55 84	 mov	 edx, DWORD PTR _xmin$4[ebp]
  00ce1	3b 15 08 00 00
	00		 cmp	 edx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00ce7	7e 0d		 jle	 SHORT $LN135@draw_hatch
  00ce9	a1 08 00 00 00	 mov	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00cee	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv517[ebp], eax
  00cf4	eb 09		 jmp	 SHORT $LN136@draw_hatch
$LN135@draw_hatch:
  00cf6	8b 4d 84	 mov	 ecx, DWORD PTR _xmin$4[ebp]
  00cf9	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv517[ebp], ecx
$LN136@draw_hatch:
  00cff	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv517[ebp]
  00d05	89 95 34 ff ff
	ff		 mov	 DWORD PTR tv518[ebp], edx
$LN138@draw_hatch:
  00d0b	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv518[ebp]
  00d11	89 45 84	 mov	 DWORD PTR _xmin$4[ebp], eax

; 1135 : 
; 1136 : 					xmax = bound ( xmax, active_int_viewport.x_min, active_int_viewport.x_max );

  00d14	8b 45 80	 mov	 eax, DWORD PTR _xmax$3[ebp]
  00d17	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00d1d	7d 0e		 jge	 SHORT $LN141@draw_hatch
  00d1f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00d25	89 8d 34 ff ff
	ff		 mov	 DWORD PTR tv522[ebp], ecx
  00d2b	eb 2d		 jmp	 SHORT $LN142@draw_hatch
$LN141@draw_hatch:
  00d2d	8b 55 80	 mov	 edx, DWORD PTR _xmax$3[ebp]
  00d30	3b 15 08 00 00
	00		 cmp	 edx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00d36	7e 0d		 jle	 SHORT $LN139@draw_hatch
  00d38	a1 08 00 00 00	 mov	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00d3d	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv521[ebp], eax
  00d43	eb 09		 jmp	 SHORT $LN140@draw_hatch
$LN139@draw_hatch:
  00d45	8b 4d 80	 mov	 ecx, DWORD PTR _xmax$3[ebp]
  00d48	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv521[ebp], ecx
$LN140@draw_hatch:
  00d4e	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv521[ebp]
  00d54	89 95 34 ff ff
	ff		 mov	 DWORD PTR tv522[ebp], edx
$LN142@draw_hatch:
  00d5a	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv522[ebp]
  00d60	89 45 80	 mov	 DWORD PTR _xmax$3[ebp], eax

; 1137 : 
; 1138 : 					y = y_centre + x_offset;

  00d63	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00d66	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  00d69	89 85 7c ff ff
	ff		 mov	 DWORD PTR _y$2[ebp], eax

; 1139 : 
; 1140 : 					if ( ( y >= active_int_viewport.y_min ) && ( y <= active_int_viewport.y_max ) )

  00d6f	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _y$2[ebp]
  00d75	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00d7b	7c 71		 jl	 SHORT $LN53@draw_hatch
  00d7d	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _y$2[ebp]
  00d83	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00d89	7f 63		 jg	 SHORT $LN53@draw_hatch

; 1141 : 					{
; 1142 : 
; 1143 : 						line_ptr = ( ULONG * ) ( screen_data + ( screen_pitch * y ) );

  00d8b	8b 45 e0	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  00d8e	0f af 85 7c ff
	ff ff		 imul	 eax, DWORD PTR _y$2[ebp]
  00d95	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00d98	89 85 78 ff ff
	ff		 mov	 DWORD PTR _line_ptr$1[ebp], eax

; 1144 : 
; 1145 : 						for ( x = xmin; x <= xmax; x++ )

  00d9e	8b 45 84	 mov	 eax, DWORD PTR _xmin$4[ebp]
  00da1	89 45 88	 mov	 DWORD PTR _x$5[ebp], eax
  00da4	eb 09		 jmp	 SHORT $LN54@draw_hatch
$LN52@draw_hatch:
  00da6	8b 45 88	 mov	 eax, DWORD PTR _x$5[ebp]
  00da9	83 c0 01	 add	 eax, 1
  00dac	89 45 88	 mov	 DWORD PTR _x$5[ebp], eax
$LN54@draw_hatch:
  00daf	8b 45 88	 mov	 eax, DWORD PTR _x$5[ebp]
  00db2	3b 45 80	 cmp	 eax, DWORD PTR _xmax$3[ebp]
  00db5	7f 37		 jg	 SHORT $LN53@draw_hatch

; 1146 : 						{
; 1147 : 
; 1148 : 							if ( ( 1 << ( 31 - ( x & 0x1f ) ) ) & graphics_hatch_pattern[ ( y & 0x1f ) ] )

  00db7	8b 45 88	 mov	 eax, DWORD PTR _x$5[ebp]
  00dba	83 e0 1f	 and	 eax, 31			; 0000001fH
  00dbd	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  00dc2	2b c8		 sub	 ecx, eax
  00dc4	ba 01 00 00 00	 mov	 edx, 1
  00dc9	d3 e2		 shl	 edx, cl
  00dcb	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _y$2[ebp]
  00dd1	83 e0 1f	 and	 eax, 31			; 0000001fH
  00dd4	23 14 85 00 00
	00 00		 and	 edx, DWORD PTR ?graphics_hatch_pattern@@3PAIA[eax*4]
  00ddb	74 0f		 je	 SHORT $LN105@draw_hatch

; 1149 : 							{
; 1150 : 
; 1151 : 								line_ptr[x] = col;

  00ddd	8b 45 88	 mov	 eax, DWORD PTR _x$5[ebp]
  00de0	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _line_ptr$1[ebp]
  00de6	8b 55 a0	 mov	 edx, DWORD PTR _col$11[ebp]
  00de9	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx
$LN105@draw_hatch:

; 1152 : 							}
; 1153 : 						}

  00dec	eb b8		 jmp	 SHORT $LN52@draw_hatch
$LN53@draw_hatch:

; 1154 : 					}
; 1155 : 
; 1156 : 					y = y_centre - x_offset;

  00dee	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00df1	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  00df4	89 85 7c ff ff
	ff		 mov	 DWORD PTR _y$2[ebp], eax

; 1157 : 
; 1158 : 					if ( ( y >= active_int_viewport.y_min ) && ( y <= active_int_viewport.y_max ) )

  00dfa	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _y$2[ebp]
  00e00	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00e06	7c 71		 jl	 SHORT $LN56@draw_hatch
  00e08	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _y$2[ebp]
  00e0e	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00e14	7f 63		 jg	 SHORT $LN56@draw_hatch

; 1159 : 					{
; 1160 : 
; 1161 : 						line_ptr = ( ULONG * ) ( screen_data + ( screen_pitch * y ) );

  00e16	8b 45 e0	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  00e19	0f af 85 7c ff
	ff ff		 imul	 eax, DWORD PTR _y$2[ebp]
  00e20	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00e23	89 85 78 ff ff
	ff		 mov	 DWORD PTR _line_ptr$1[ebp], eax

; 1162 : 
; 1163 : 						for ( x = xmin; x <= xmax; x++ )

  00e29	8b 45 84	 mov	 eax, DWORD PTR _xmin$4[ebp]
  00e2c	89 45 88	 mov	 DWORD PTR _x$5[ebp], eax
  00e2f	eb 09		 jmp	 SHORT $LN57@draw_hatch
$LN55@draw_hatch:
  00e31	8b 45 88	 mov	 eax, DWORD PTR _x$5[ebp]
  00e34	83 c0 01	 add	 eax, 1
  00e37	89 45 88	 mov	 DWORD PTR _x$5[ebp], eax
$LN57@draw_hatch:
  00e3a	8b 45 88	 mov	 eax, DWORD PTR _x$5[ebp]
  00e3d	3b 45 80	 cmp	 eax, DWORD PTR _xmax$3[ebp]
  00e40	7f 37		 jg	 SHORT $LN56@draw_hatch

; 1164 : 						{
; 1165 : 
; 1166 : 							if ( ( 1 << ( 31 - ( x & 0x1f ) ) ) & graphics_hatch_pattern[ ( y & 0x1f ) ] )

  00e42	8b 45 88	 mov	 eax, DWORD PTR _x$5[ebp]
  00e45	83 e0 1f	 and	 eax, 31			; 0000001fH
  00e48	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  00e4d	2b c8		 sub	 ecx, eax
  00e4f	ba 01 00 00 00	 mov	 edx, 1
  00e54	d3 e2		 shl	 edx, cl
  00e56	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _y$2[ebp]
  00e5c	83 e0 1f	 and	 eax, 31			; 0000001fH
  00e5f	23 14 85 00 00
	00 00		 and	 edx, DWORD PTR ?graphics_hatch_pattern@@3PAIA[eax*4]
  00e66	74 0f		 je	 SHORT $LN107@draw_hatch

; 1167 : 							{
; 1168 : 
; 1169 : 								line_ptr[x] = col;

  00e68	8b 45 88	 mov	 eax, DWORD PTR _x$5[ebp]
  00e6b	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _line_ptr$1[ebp]
  00e71	8b 55 a0	 mov	 edx, DWORD PTR _col$11[ebp]
  00e74	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx
$LN107@draw_hatch:

; 1170 : 							}
; 1171 : 						}

  00e77	eb b8		 jmp	 SHORT $LN55@draw_hatch
$LN56@draw_hatch:

; 1172 : 					}
; 1173 : 				}
; 1174 : 
; 1175 : 				if ( decision < 0 )

  00e79	83 7d d4 00	 cmp	 DWORD PTR _decision$[ebp], 0
  00e7d	7d 0f		 jge	 SHORT $LN108@draw_hatch

; 1176 : 				{
; 1177 : 
; 1178 : 					decision += ( x_offset << 2 ) + 6;

  00e7f	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  00e82	8b 4d d4	 mov	 ecx, DWORD PTR _decision$[ebp]
  00e85	8d 54 81 06	 lea	 edx, DWORD PTR [ecx+eax*4+6]
  00e89	89 55 d4	 mov	 DWORD PTR _decision$[ebp], edx

; 1179 : 				}
; 1180 : 				else

  00e8c	eb 19		 jmp	 SHORT $LN109@draw_hatch
$LN108@draw_hatch:

; 1181 : 				{
; 1182 : 
; 1183 : 					decision += ( ( x_offset - y_offset ) << 2 ) + 10;

  00e8e	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  00e91	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00e94	8b 4d d4	 mov	 ecx, DWORD PTR _decision$[ebp]
  00e97	8d 54 81 0a	 lea	 edx, DWORD PTR [ecx+eax*4+10]
  00e9b	89 55 d4	 mov	 DWORD PTR _decision$[ebp], edx

; 1184 : 
; 1185 : 					y_offset--;

  00e9e	8b 45 d8	 mov	 eax, DWORD PTR _y_offset$[ebp]
  00ea1	83 e8 01	 sub	 eax, 1
  00ea4	89 45 d8	 mov	 DWORD PTR _y_offset$[ebp], eax
$LN109@draw_hatch:

; 1186 : 				}
; 1187 : 
; 1188 : 				x_offset++;

  00ea7	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  00eaa	83 c0 01	 add	 eax, 1
  00ead	89 45 dc	 mov	 DWORD PTR _x_offset$[ebp], eax

; 1189 : 			}

  00eb0	e9 f0 fb ff ff	 jmp	 $LN90@draw_hatch
$LN45@draw_hatch:
$LN1@draw_hatch:

; 1190 : 		}
; 1191 : 	}
; 1192 : }

  00eb5	5f		 pop	 edi
  00eb6	5e		 pop	 esi
  00eb7	5b		 pop	 ebx
  00eb8	8b e5		 mov	 esp, ebp
  00eba	5d		 pop	 ebp
  00ebb	c2 10 00	 ret	 16			; 00000010H
?draw_hatched_filled_circle@@YGXMMMUREAL_COLOUR@@@Z ENDP ; draw_hatched_filled_circle
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\circle.c
;	COMDAT ?draw_arc@@YGXMMMIUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_y$1 = -184						; size = 4
_x$2 = -180						; size = 4
_y$3 = -176						; size = 4
_x$4 = -172						; size = 4
_y$5 = -168						; size = 4
_x$6 = -164						; size = 4
_y$7 = -160						; size = 4
_x$8 = -156						; size = 4
_y$9 = -152						; size = 4
_x$10 = -148						; size = 4
_y$11 = -144						; size = 4
_x$12 = -140						; size = 4
_y$13 = -136						; size = 4
_x$14 = -132						; size = 4
_y$15 = -128						; size = 4
_x$16 = -124						; size = 4
_col$17 = -120						; size = 4
_y$18 = -116						; size = 4
_x$19 = -112						; size = 4
_y$20 = -108						; size = 4
_x$21 = -104						; size = 4
_y$22 = -100						; size = 4
_x$23 = -96						; size = 4
_y$24 = -92						; size = 4
_x$25 = -88						; size = 4
_y$26 = -84						; size = 4
_x$27 = -80						; size = 4
_y$28 = -76						; size = 4
_x$29 = -72						; size = 4
_y$30 = -68						; size = 4
_x$31 = -64						; size = 4
_y$32 = -60						; size = 4
_x$33 = -56						; size = 4
_col$34 = -52						; size = 2
_screen_data$ = -48					; size = 4
_decision$ = -44					; size = 4
_y_offset$ = -40					; size = 4
_x_offset$ = -36					; size = 4
_screen_pitch$ = -32					; size = 4
_y_max$ = -28						; size = 4
_x_max$ = -24						; size = 4
_y_min$ = -20						; size = 4
_x_min$ = -16						; size = 4
_radius$ = -12						; size = 4
_y_centre$ = -8						; size = 4
_x_centre$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_r$ = 16						; size = 4
_part$ = 20						; size = 4
_colour$ = 24						; size = 4
?draw_arc@@YGXMMMIUREAL_COLOUR@@@Z PROC			; draw_arc, COMDAT

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f8 00 00
	00		 sub	 esp, 248		; 000000f8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 128  :    int
; 129  : 		x_centre,
; 130  : 		y_centre,
; 131  : 		radius,
; 132  : 		x_min,
; 133  : 		y_min,
; 134  : 		x_max,
; 135  : 		y_max,
; 136  : 		screen_pitch,
; 137  :       x_offset,
; 138  :       y_offset,
; 139  :       decision;
; 140  : 
; 141  : 	unsigned char
; 142  : 		*screen_data;
; 143  : 
; 144  : 	ASSERT (active_screen);

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?active_screen@@3PAUSCREEN@@A, 0 ; active_screen
  00013	75 18		 jne	 SHORT $LN10@draw_arc
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_arc@@YGXMMMIUREAL_COLOUR@@@Z@4JA
  0001a	83 c0 11	 add	 eax, 17			; 00000011H
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@LIEJAGLG@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IILHNAKB@active_screen@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@draw_arc:

; 145  : 	ASSERT (get_screen_locked (active_screen));

  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?get_screen_locked@@YGHPAUSCREEN@@@Z ; get_screen_locked
  00038	85 c0		 test	 eax, eax
  0003a	75 18		 jne	 SHORT $LN11@draw_arc
  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_arc@@YGXMMMIUREAL_COLOUR@@@Z@4JA
  00041	83 c0 12	 add	 eax, 18			; 00000012H
  00044	50		 push	 eax
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@LIEJAGLG@c?3?2users?2nhv90?2projects?2eech?2mo@
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@BNNOEDBO@get_screen_locked?5?$CIactive_scree@
  0004f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN11@draw_arc:

; 146  : 
; 147  : 	if ( active_screen->pixel_length <= 16 )

  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00059	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  0005d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00060	0f 8f 00 06 00
	00		 jg	 $LN12@draw_arc

; 148  : 	{
; 149  : 
; 150  : 		USHORT
; 151  : 			col;
; 152  : 
; 153  : 		convert_float_to_int (x, &x_centre);

  00066	8d 45 fc	 lea	 eax, DWORD PTR _x_centre$[ebp]
  00069	50		 push	 eax
  0006a	51		 push	 ecx
  0006b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00070	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00075	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 154  : 		convert_float_to_int (y, &y_centre);

  0007a	8d 45 f8	 lea	 eax, DWORD PTR _y_centre$[ebp]
  0007d	50		 push	 eax
  0007e	51		 push	 ecx
  0007f	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  00084	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00089	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 155  : 		convert_float_to_int (r, &radius);

  0008e	8d 45 f4	 lea	 eax, DWORD PTR _radius$[ebp]
  00091	50		 push	 eax
  00092	51		 push	 ecx
  00093	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _r$[ebp]
  00098	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009d	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 156  : 
; 157  : 		//
; 158  : 		// trivially reject
; 159  : 		//
; 160  : 
; 161  : 		if ((x_min = x_centre - radius) > active_int_viewport.x_max) return;

  000a2	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  000a5	2b 45 f4	 sub	 eax, DWORD PTR _radius$[ebp]
  000a8	89 45 f0	 mov	 DWORD PTR _x_min$[ebp], eax
  000ab	8b 4d f0	 mov	 ecx, DWORD PTR _x_min$[ebp]
  000ae	3b 0d 08 00 00
	00		 cmp	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  000b4	7e 05		 jle	 SHORT $LN14@draw_arc
  000b6	e9 d6 0b 00 00	 jmp	 $LN1@draw_arc
$LN14@draw_arc:

; 162  : 		if ((y_min = y_centre - radius) > active_int_viewport.y_max) return;

  000bb	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  000be	2b 45 f4	 sub	 eax, DWORD PTR _radius$[ebp]
  000c1	89 45 ec	 mov	 DWORD PTR _y_min$[ebp], eax
  000c4	8b 4d ec	 mov	 ecx, DWORD PTR _y_min$[ebp]
  000c7	3b 0d 0c 00 00
	00		 cmp	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  000cd	7e 05		 jle	 SHORT $LN15@draw_arc
  000cf	e9 bd 0b 00 00	 jmp	 $LN1@draw_arc
$LN15@draw_arc:

; 163  : 		if ((x_max = x_centre + radius) < active_int_viewport.x_min) return;

  000d4	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  000d7	03 45 f4	 add	 eax, DWORD PTR _radius$[ebp]
  000da	89 45 e8	 mov	 DWORD PTR _x_max$[ebp], eax
  000dd	8b 4d e8	 mov	 ecx, DWORD PTR _x_max$[ebp]
  000e0	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  000e6	7d 05		 jge	 SHORT $LN16@draw_arc
  000e8	e9 a4 0b 00 00	 jmp	 $LN1@draw_arc
$LN16@draw_arc:

; 164  : 		if ((y_max = y_centre + radius) < active_int_viewport.y_min) return;

  000ed	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  000f0	03 45 f4	 add	 eax, DWORD PTR _radius$[ebp]
  000f3	89 45 e4	 mov	 DWORD PTR _y_max$[ebp], eax
  000f6	8b 4d e4	 mov	 ecx, DWORD PTR _y_max$[ebp]
  000f9	3b 0d 04 00 00
	00		 cmp	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  000ff	7d 05		 jge	 SHORT $LN17@draw_arc
  00101	e9 8b 0b 00 00	 jmp	 $LN1@draw_arc
$LN17@draw_arc:

; 165  : 
; 166  : 		//
; 167  : 		// get screen values
; 168  : 		//
; 169  : 
; 170  : 		col = get_packed_colour (colour);

  00106	0f b6 45 1a	 movzx	 eax, BYTE PTR _colour$[ebp+2]
  0010a	c1 e0 18	 shl	 eax, 24			; 00000018H
  0010d	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_red_mask@@3HA ; active_screen_red_mask
  00113	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_red_shift@@3HA ; active_screen_red_shift
  00119	d3 e8		 shr	 eax, cl
  0011b	0f b6 55 19	 movzx	 edx, BYTE PTR _colour$[ebp+1]
  0011f	c1 e2 18	 shl	 edx, 24			; 00000018H
  00122	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_green_mask@@3HA ; active_screen_green_mask
  00128	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_green_shift@@3HA ; active_screen_green_shift
  0012e	d3 ea		 shr	 edx, cl
  00130	0b c2		 or	 eax, edx
  00132	0f b6 55 18	 movzx	 edx, BYTE PTR _colour$[ebp]
  00136	c1 e2 18	 shl	 edx, 24			; 00000018H
  00139	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_blue_mask@@3HA ; active_screen_blue_mask
  0013f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_blue_shift@@3HA ; active_screen_blue_shift
  00145	d3 ea		 shr	 edx, cl
  00147	0b c2		 or	 eax, edx
  00149	0f b6 55 1b	 movzx	 edx, BYTE PTR _colour$[ebp+3]
  0014d	c1 e2 18	 shl	 edx, 24			; 00000018H
  00150	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_alpha_mask@@3HA ; active_screen_alpha_mask
  00156	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_alpha_shift@@3HA ; active_screen_alpha_shift
  0015c	d3 ea		 shr	 edx, cl
  0015e	0b c2		 or	 eax, edx
  00160	66 89 45 cc	 mov	 WORD PTR _col$34[ebp], ax

; 171  : 
; 172  : 		screen_data = get_screen_data (active_screen);

  00164	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00169	50		 push	 eax
  0016a	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  0016f	89 45 d0	 mov	 DWORD PTR _screen_data$[ebp], eax

; 173  : 
; 174  : 		screen_pitch = get_screen_pitch (active_screen);

  00172	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00177	50		 push	 eax
  00178	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  0017d	89 45 e0	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 175  : 
; 176  : 		//
; 177  : 		// draw circle
; 178  : 		//
; 179  : 
; 180  : 		x_offset = 0;

  00180	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _x_offset$[ebp], 0

; 181  : 
; 182  : 		y_offset = radius;

  00187	8b 45 f4	 mov	 eax, DWORD PTR _radius$[ebp]
  0018a	89 45 d8	 mov	 DWORD PTR _y_offset$[ebp], eax

; 183  : 
; 184  : 		decision = 3 - (radius << 1);

  0018d	8b 45 f4	 mov	 eax, DWORD PTR _radius$[ebp]
  00190	d1 e0		 shl	 eax, 1
  00192	b9 03 00 00 00	 mov	 ecx, 3
  00197	2b c8		 sub	 ecx, eax
  00199	89 4d d4	 mov	 DWORD PTR _decision$[ebp], ecx

; 185  : 
; 186  : 		if
; 187  : 		(
; 188  : 			(x_min >= active_int_viewport.x_min) &&
; 189  : 			(y_min >= active_int_viewport.y_min) &&
; 190  : 			(x_max <= active_int_viewport.x_max) &&

  0019c	8b 45 f0	 mov	 eax, DWORD PTR _x_min$[ebp]
  0019f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  001a5	0f 8c 94 01 00
	00		 jl	 $LN18@draw_arc
  001ab	8b 45 ec	 mov	 eax, DWORD PTR _y_min$[ebp]
  001ae	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  001b4	0f 8c 85 01 00
	00		 jl	 $LN18@draw_arc
  001ba	8b 45 e8	 mov	 eax, DWORD PTR _x_max$[ebp]
  001bd	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  001c3	0f 8f 76 01 00
	00		 jg	 $LN18@draw_arc
  001c9	8b 45 e4	 mov	 eax, DWORD PTR _y_max$[ebp]
  001cc	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  001d2	0f 8f 67 01 00
	00		 jg	 $LN18@draw_arc
$LN2@draw_arc:

; 191  : 			(y_max <= active_int_viewport.y_max)
; 192  : 		)
; 193  : 		{
; 194  : 			//
; 195  : 			// draw unclipped circle
; 196  : 			//
; 197  : 
; 198  : 			while (x_offset <= y_offset)

  001d8	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  001db	3b 45 d8	 cmp	 eax, DWORD PTR _y_offset$[ebp]
  001de	0f 8f 56 01 00
	00		 jg	 $LN3@draw_arc

; 199  : 			{
; 200  : 				if (part & ARC_BOTTOM_RIGHT)   fast_set_pixel (x_centre + x_offset, y_centre + y_offset, col);

  001e4	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  001e7	83 e0 02	 and	 eax, 2
  001ea	74 1b		 je	 SHORT $LN20@draw_arc
  001ec	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  001ef	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  001f2	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  001f6	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  001f9	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  001fc	03 4d dc	 add	 ecx, DWORD PTR _x_offset$[ebp]
  001ff	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  00203	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN20@draw_arc:

; 201  : 				if (part & ARC_TOP_RIGHT)      fast_set_pixel (x_centre + x_offset, y_centre - y_offset, col);

  00207	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  0020a	83 e0 01	 and	 eax, 1
  0020d	74 1b		 je	 SHORT $LN21@draw_arc
  0020f	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00212	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00215	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00219	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  0021c	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  0021f	03 4d dc	 add	 ecx, DWORD PTR _x_offset$[ebp]
  00222	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  00226	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN21@draw_arc:

; 202  : 				if (part & ARC_BOTTOM_LEFT)    fast_set_pixel (x_centre - x_offset, y_centre + y_offset, col);

  0022a	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  0022d	83 e0 08	 and	 eax, 8
  00230	74 1b		 je	 SHORT $LN22@draw_arc
  00232	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00235	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  00238	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  0023c	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  0023f	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  00242	2b 4d dc	 sub	 ecx, DWORD PTR _x_offset$[ebp]
  00245	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  00249	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN22@draw_arc:

; 203  : 				if (part & ARC_TOP_LEFT)       fast_set_pixel (x_centre - x_offset, y_centre - y_offset, col);

  0024d	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  00250	83 e0 04	 and	 eax, 4
  00253	74 1b		 je	 SHORT $LN23@draw_arc
  00255	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00258	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  0025b	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  0025f	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00262	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  00265	2b 4d dc	 sub	 ecx, DWORD PTR _x_offset$[ebp]
  00268	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  0026c	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN23@draw_arc:

; 204  : 				if (part & ARC_RIGHT_DOWN)     fast_set_pixel (x_centre + y_offset, y_centre + x_offset, col);

  00270	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  00273	83 e0 20	 and	 eax, 32			; 00000020H
  00276	74 1b		 je	 SHORT $LN24@draw_arc
  00278	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  0027b	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  0027e	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00282	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00285	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  00288	03 4d d8	 add	 ecx, DWORD PTR _y_offset$[ebp]
  0028b	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  0028f	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN24@draw_arc:

; 205  : 				if (part & ARC_RIGHT_UP)       fast_set_pixel (x_centre + y_offset, y_centre - x_offset, col);

  00293	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  00296	83 e0 10	 and	 eax, 16			; 00000010H
  00299	74 1b		 je	 SHORT $LN25@draw_arc
  0029b	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  0029e	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  002a1	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  002a5	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  002a8	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  002ab	03 4d d8	 add	 ecx, DWORD PTR _y_offset$[ebp]
  002ae	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  002b2	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN25@draw_arc:

; 206  : 				if (part & ARC_LEFT_DOWN)      fast_set_pixel (x_centre - y_offset, y_centre + x_offset, col);

  002b6	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  002b9	25 80 00 00 00	 and	 eax, 128		; 00000080H
  002be	74 1b		 je	 SHORT $LN26@draw_arc
  002c0	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  002c3	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  002c6	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  002ca	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  002cd	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  002d0	2b 4d d8	 sub	 ecx, DWORD PTR _y_offset$[ebp]
  002d3	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  002d7	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN26@draw_arc:

; 207  : 				if (part & ARC_LEFT_UP)        fast_set_pixel (x_centre - y_offset, y_centre - x_offset, col);

  002db	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  002de	83 e0 40	 and	 eax, 64			; 00000040H
  002e1	74 1b		 je	 SHORT $LN27@draw_arc
  002e3	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  002e6	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  002e9	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  002ed	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  002f0	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  002f3	2b 4d d8	 sub	 ecx, DWORD PTR _y_offset$[ebp]
  002f6	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  002fa	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN27@draw_arc:

; 208  : 
; 209  : 				if (decision < 0)

  002fe	83 7d d4 00	 cmp	 DWORD PTR _decision$[ebp], 0
  00302	7d 0f		 jge	 SHORT $LN28@draw_arc

; 210  : 				{
; 211  : 					decision += (x_offset << 2) + 6;

  00304	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  00307	8b 4d d4	 mov	 ecx, DWORD PTR _decision$[ebp]
  0030a	8d 54 81 06	 lea	 edx, DWORD PTR [ecx+eax*4+6]
  0030e	89 55 d4	 mov	 DWORD PTR _decision$[ebp], edx

; 212  : 				}
; 213  : 				else

  00311	eb 19		 jmp	 SHORT $LN29@draw_arc
$LN28@draw_arc:

; 214  : 				{
; 215  : 					decision += ((x_offset - y_offset) << 2) + 10;

  00313	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  00316	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00319	8b 4d d4	 mov	 ecx, DWORD PTR _decision$[ebp]
  0031c	8d 54 81 0a	 lea	 edx, DWORD PTR [ecx+eax*4+10]
  00320	89 55 d4	 mov	 DWORD PTR _decision$[ebp], edx

; 216  : 
; 217  : 					y_offset--;

  00323	8b 45 d8	 mov	 eax, DWORD PTR _y_offset$[ebp]
  00326	83 e8 01	 sub	 eax, 1
  00329	89 45 d8	 mov	 DWORD PTR _y_offset$[ebp], eax
$LN29@draw_arc:

; 218  : 				}
; 219  : 
; 220  : 				x_offset++;

  0032c	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  0032f	83 c0 01	 add	 eax, 1
  00332	89 45 dc	 mov	 DWORD PTR _x_offset$[ebp], eax

; 221  : 			}

  00335	e9 9e fe ff ff	 jmp	 $LN2@draw_arc
$LN3@draw_arc:

; 222  : 		}
; 223  : 		else

  0033a	e9 22 03 00 00	 jmp	 $LN5@draw_arc
$LN18@draw_arc:

; 224  : 		{
; 225  : 			//
; 226  : 			// draw clipped circle
; 227  : 			//
; 228  : 
; 229  : 			while (x_offset <= y_offset)

  0033f	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  00342	3b 45 d8	 cmp	 eax, DWORD PTR _y_offset$[ebp]
  00345	0f 8f 16 03 00
	00		 jg	 $LN5@draw_arc

; 230  : 			{
; 231  : 				if (part & ARC_BOTTOM_RIGHT)   fast_set_clipped_pixel (x_centre + x_offset, y_centre + y_offset, col);

  0034b	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  0034e	83 e0 02	 and	 eax, 2
  00351	74 53		 je	 SHORT $LN31@draw_arc
  00353	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  00356	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  00359	89 45 c8	 mov	 DWORD PTR _x$33[ebp], eax
  0035c	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  0035f	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  00362	89 45 c4	 mov	 DWORD PTR _y$32[ebp], eax
  00365	8b 45 c8	 mov	 eax, DWORD PTR _x$33[ebp]
  00368	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  0036e	7c 36		 jl	 SHORT $LN31@draw_arc
  00370	8b 45 c4	 mov	 eax, DWORD PTR _y$32[ebp]
  00373	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00379	7c 2b		 jl	 SHORT $LN31@draw_arc
  0037b	8b 45 c8	 mov	 eax, DWORD PTR _x$33[ebp]
  0037e	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00384	7f 20		 jg	 SHORT $LN31@draw_arc
  00386	8b 45 c4	 mov	 eax, DWORD PTR _y$32[ebp]
  00389	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  0038f	7f 15		 jg	 SHORT $LN31@draw_arc
  00391	8b 45 c4	 mov	 eax, DWORD PTR _y$32[ebp]
  00394	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00398	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  0039b	8b 4d c8	 mov	 ecx, DWORD PTR _x$33[ebp]
  0039e	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  003a2	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN31@draw_arc:

; 232  : 				if (part & ARC_TOP_RIGHT)      fast_set_clipped_pixel (x_centre + x_offset, y_centre - y_offset, col);

  003a6	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  003a9	83 e0 01	 and	 eax, 1
  003ac	74 53		 je	 SHORT $LN33@draw_arc
  003ae	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  003b1	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  003b4	89 45 c0	 mov	 DWORD PTR _x$31[ebp], eax
  003b7	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  003ba	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  003bd	89 45 bc	 mov	 DWORD PTR _y$30[ebp], eax
  003c0	8b 45 c0	 mov	 eax, DWORD PTR _x$31[ebp]
  003c3	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  003c9	7c 36		 jl	 SHORT $LN33@draw_arc
  003cb	8b 45 bc	 mov	 eax, DWORD PTR _y$30[ebp]
  003ce	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  003d4	7c 2b		 jl	 SHORT $LN33@draw_arc
  003d6	8b 45 c0	 mov	 eax, DWORD PTR _x$31[ebp]
  003d9	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  003df	7f 20		 jg	 SHORT $LN33@draw_arc
  003e1	8b 45 bc	 mov	 eax, DWORD PTR _y$30[ebp]
  003e4	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  003ea	7f 15		 jg	 SHORT $LN33@draw_arc
  003ec	8b 45 bc	 mov	 eax, DWORD PTR _y$30[ebp]
  003ef	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  003f3	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  003f6	8b 4d c0	 mov	 ecx, DWORD PTR _x$31[ebp]
  003f9	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  003fd	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN33@draw_arc:

; 233  : 				if (part & ARC_BOTTOM_LEFT)    fast_set_clipped_pixel (x_centre - x_offset, y_centre + y_offset, col);

  00401	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  00404	83 e0 08	 and	 eax, 8
  00407	74 53		 je	 SHORT $LN35@draw_arc
  00409	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  0040c	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  0040f	89 45 b8	 mov	 DWORD PTR _x$29[ebp], eax
  00412	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00415	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  00418	89 45 b4	 mov	 DWORD PTR _y$28[ebp], eax
  0041b	8b 45 b8	 mov	 eax, DWORD PTR _x$29[ebp]
  0041e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00424	7c 36		 jl	 SHORT $LN35@draw_arc
  00426	8b 45 b4	 mov	 eax, DWORD PTR _y$28[ebp]
  00429	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  0042f	7c 2b		 jl	 SHORT $LN35@draw_arc
  00431	8b 45 b8	 mov	 eax, DWORD PTR _x$29[ebp]
  00434	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  0043a	7f 20		 jg	 SHORT $LN35@draw_arc
  0043c	8b 45 b4	 mov	 eax, DWORD PTR _y$28[ebp]
  0043f	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00445	7f 15		 jg	 SHORT $LN35@draw_arc
  00447	8b 45 b4	 mov	 eax, DWORD PTR _y$28[ebp]
  0044a	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  0044e	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00451	8b 4d b8	 mov	 ecx, DWORD PTR _x$29[ebp]
  00454	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  00458	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN35@draw_arc:

; 234  : 				if (part & ARC_TOP_LEFT)       fast_set_clipped_pixel (x_centre - x_offset, y_centre - y_offset, col);

  0045c	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  0045f	83 e0 04	 and	 eax, 4
  00462	74 53		 je	 SHORT $LN37@draw_arc
  00464	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  00467	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  0046a	89 45 b0	 mov	 DWORD PTR _x$27[ebp], eax
  0046d	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00470	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00473	89 45 ac	 mov	 DWORD PTR _y$26[ebp], eax
  00476	8b 45 b0	 mov	 eax, DWORD PTR _x$27[ebp]
  00479	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  0047f	7c 36		 jl	 SHORT $LN37@draw_arc
  00481	8b 45 ac	 mov	 eax, DWORD PTR _y$26[ebp]
  00484	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  0048a	7c 2b		 jl	 SHORT $LN37@draw_arc
  0048c	8b 45 b0	 mov	 eax, DWORD PTR _x$27[ebp]
  0048f	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00495	7f 20		 jg	 SHORT $LN37@draw_arc
  00497	8b 45 ac	 mov	 eax, DWORD PTR _y$26[ebp]
  0049a	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  004a0	7f 15		 jg	 SHORT $LN37@draw_arc
  004a2	8b 45 ac	 mov	 eax, DWORD PTR _y$26[ebp]
  004a5	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  004a9	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  004ac	8b 4d b0	 mov	 ecx, DWORD PTR _x$27[ebp]
  004af	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  004b3	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN37@draw_arc:

; 235  : 				if (part & ARC_RIGHT_DOWN)     fast_set_clipped_pixel (x_centre + y_offset, y_centre + x_offset, col);

  004b7	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  004ba	83 e0 20	 and	 eax, 32			; 00000020H
  004bd	74 53		 je	 SHORT $LN39@draw_arc
  004bf	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  004c2	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  004c5	89 45 a8	 mov	 DWORD PTR _x$25[ebp], eax
  004c8	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  004cb	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  004ce	89 45 a4	 mov	 DWORD PTR _y$24[ebp], eax
  004d1	8b 45 a8	 mov	 eax, DWORD PTR _x$25[ebp]
  004d4	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  004da	7c 36		 jl	 SHORT $LN39@draw_arc
  004dc	8b 45 a4	 mov	 eax, DWORD PTR _y$24[ebp]
  004df	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  004e5	7c 2b		 jl	 SHORT $LN39@draw_arc
  004e7	8b 45 a8	 mov	 eax, DWORD PTR _x$25[ebp]
  004ea	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  004f0	7f 20		 jg	 SHORT $LN39@draw_arc
  004f2	8b 45 a4	 mov	 eax, DWORD PTR _y$24[ebp]
  004f5	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  004fb	7f 15		 jg	 SHORT $LN39@draw_arc
  004fd	8b 45 a4	 mov	 eax, DWORD PTR _y$24[ebp]
  00500	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00504	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00507	8b 4d a8	 mov	 ecx, DWORD PTR _x$25[ebp]
  0050a	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  0050e	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN39@draw_arc:

; 236  : 				if (part & ARC_RIGHT_UP)       fast_set_clipped_pixel (x_centre + y_offset, y_centre - x_offset, col);

  00512	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  00515	83 e0 10	 and	 eax, 16			; 00000010H
  00518	74 53		 je	 SHORT $LN41@draw_arc
  0051a	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  0051d	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  00520	89 45 a0	 mov	 DWORD PTR _x$23[ebp], eax
  00523	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00526	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  00529	89 45 9c	 mov	 DWORD PTR _y$22[ebp], eax
  0052c	8b 45 a0	 mov	 eax, DWORD PTR _x$23[ebp]
  0052f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00535	7c 36		 jl	 SHORT $LN41@draw_arc
  00537	8b 45 9c	 mov	 eax, DWORD PTR _y$22[ebp]
  0053a	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00540	7c 2b		 jl	 SHORT $LN41@draw_arc
  00542	8b 45 a0	 mov	 eax, DWORD PTR _x$23[ebp]
  00545	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  0054b	7f 20		 jg	 SHORT $LN41@draw_arc
  0054d	8b 45 9c	 mov	 eax, DWORD PTR _y$22[ebp]
  00550	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00556	7f 15		 jg	 SHORT $LN41@draw_arc
  00558	8b 45 9c	 mov	 eax, DWORD PTR _y$22[ebp]
  0055b	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  0055f	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00562	8b 4d a0	 mov	 ecx, DWORD PTR _x$23[ebp]
  00565	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  00569	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN41@draw_arc:

; 237  : 				if (part & ARC_LEFT_DOWN)      fast_set_clipped_pixel (x_centre - y_offset, y_centre + x_offset, col);

  0056d	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  00570	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00575	74 53		 je	 SHORT $LN43@draw_arc
  00577	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  0057a	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  0057d	89 45 98	 mov	 DWORD PTR _x$21[ebp], eax
  00580	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00583	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  00586	89 45 94	 mov	 DWORD PTR _y$20[ebp], eax
  00589	8b 45 98	 mov	 eax, DWORD PTR _x$21[ebp]
  0058c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00592	7c 36		 jl	 SHORT $LN43@draw_arc
  00594	8b 45 94	 mov	 eax, DWORD PTR _y$20[ebp]
  00597	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  0059d	7c 2b		 jl	 SHORT $LN43@draw_arc
  0059f	8b 45 98	 mov	 eax, DWORD PTR _x$21[ebp]
  005a2	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  005a8	7f 20		 jg	 SHORT $LN43@draw_arc
  005aa	8b 45 94	 mov	 eax, DWORD PTR _y$20[ebp]
  005ad	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  005b3	7f 15		 jg	 SHORT $LN43@draw_arc
  005b5	8b 45 94	 mov	 eax, DWORD PTR _y$20[ebp]
  005b8	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  005bc	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  005bf	8b 4d 98	 mov	 ecx, DWORD PTR _x$21[ebp]
  005c2	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  005c6	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN43@draw_arc:

; 238  : 				if (part & ARC_LEFT_UP)        fast_set_clipped_pixel (x_centre - y_offset, y_centre - x_offset, col);

  005ca	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  005cd	83 e0 40	 and	 eax, 64			; 00000040H
  005d0	74 53		 je	 SHORT $LN45@draw_arc
  005d2	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  005d5	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  005d8	89 45 90	 mov	 DWORD PTR _x$19[ebp], eax
  005db	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  005de	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  005e1	89 45 8c	 mov	 DWORD PTR _y$18[ebp], eax
  005e4	8b 45 90	 mov	 eax, DWORD PTR _x$19[ebp]
  005e7	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  005ed	7c 36		 jl	 SHORT $LN45@draw_arc
  005ef	8b 45 8c	 mov	 eax, DWORD PTR _y$18[ebp]
  005f2	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  005f8	7c 2b		 jl	 SHORT $LN45@draw_arc
  005fa	8b 45 90	 mov	 eax, DWORD PTR _x$19[ebp]
  005fd	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00603	7f 20		 jg	 SHORT $LN45@draw_arc
  00605	8b 45 8c	 mov	 eax, DWORD PTR _y$18[ebp]
  00608	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  0060e	7f 15		 jg	 SHORT $LN45@draw_arc
  00610	8b 45 8c	 mov	 eax, DWORD PTR _y$18[ebp]
  00613	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00617	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  0061a	8b 4d 90	 mov	 ecx, DWORD PTR _x$19[ebp]
  0061d	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  00621	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN45@draw_arc:

; 239  : 
; 240  : 				if (decision < 0)

  00625	83 7d d4 00	 cmp	 DWORD PTR _decision$[ebp], 0
  00629	7d 0f		 jge	 SHORT $LN46@draw_arc

; 241  : 				{
; 242  : 					decision += (x_offset << 2) + 6;

  0062b	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  0062e	8b 4d d4	 mov	 ecx, DWORD PTR _decision$[ebp]
  00631	8d 54 81 06	 lea	 edx, DWORD PTR [ecx+eax*4+6]
  00635	89 55 d4	 mov	 DWORD PTR _decision$[ebp], edx

; 243  : 				}
; 244  : 				else

  00638	eb 19		 jmp	 SHORT $LN47@draw_arc
$LN46@draw_arc:

; 245  : 				{
; 246  : 					decision += ((x_offset - y_offset) << 2) + 10;

  0063a	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  0063d	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00640	8b 4d d4	 mov	 ecx, DWORD PTR _decision$[ebp]
  00643	8d 54 81 0a	 lea	 edx, DWORD PTR [ecx+eax*4+10]
  00647	89 55 d4	 mov	 DWORD PTR _decision$[ebp], edx

; 247  : 
; 248  : 					y_offset--;

  0064a	8b 45 d8	 mov	 eax, DWORD PTR _y_offset$[ebp]
  0064d	83 e8 01	 sub	 eax, 1
  00650	89 45 d8	 mov	 DWORD PTR _y_offset$[ebp], eax
$LN47@draw_arc:

; 249  : 				}
; 250  : 
; 251  : 				x_offset++;

  00653	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  00656	83 c0 01	 add	 eax, 1
  00659	89 45 dc	 mov	 DWORD PTR _x_offset$[ebp], eax

; 252  : 			}

  0065c	e9 de fc ff ff	 jmp	 $LN18@draw_arc
$LN5@draw_arc:

; 253  : 		}
; 254  : 	}
; 255  : 	else

  00661	e9 2b 06 00 00	 jmp	 $LN9@draw_arc
$LN12@draw_arc:

; 256  : 	{
; 257  : 
; 258  : 		ULONG
; 259  : 			col;
; 260  : 
; 261  : 		convert_float_to_int (x, &x_centre);

  00666	8d 45 fc	 lea	 eax, DWORD PTR _x_centre$[ebp]
  00669	50		 push	 eax
  0066a	51		 push	 ecx
  0066b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00670	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00675	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 262  : 		convert_float_to_int (y, &y_centre);

  0067a	8d 45 f8	 lea	 eax, DWORD PTR _y_centre$[ebp]
  0067d	50		 push	 eax
  0067e	51		 push	 ecx
  0067f	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  00684	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00689	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 263  : 		convert_float_to_int (r, &radius);

  0068e	8d 45 f4	 lea	 eax, DWORD PTR _radius$[ebp]
  00691	50		 push	 eax
  00692	51		 push	 ecx
  00693	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _r$[ebp]
  00698	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0069d	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 264  : 
; 265  : 		//
; 266  : 		// trivially reject
; 267  : 		//
; 268  : 
; 269  : 		if ((x_min = x_centre - radius) > active_int_viewport.x_max) return;

  006a2	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  006a5	2b 45 f4	 sub	 eax, DWORD PTR _radius$[ebp]
  006a8	89 45 f0	 mov	 DWORD PTR _x_min$[ebp], eax
  006ab	8b 4d f0	 mov	 ecx, DWORD PTR _x_min$[ebp]
  006ae	3b 0d 08 00 00
	00		 cmp	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  006b4	7e 05		 jle	 SHORT $LN48@draw_arc
  006b6	e9 d6 05 00 00	 jmp	 $LN1@draw_arc
$LN48@draw_arc:

; 270  : 		if ((y_min = y_centre - radius) > active_int_viewport.y_max) return;

  006bb	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  006be	2b 45 f4	 sub	 eax, DWORD PTR _radius$[ebp]
  006c1	89 45 ec	 mov	 DWORD PTR _y_min$[ebp], eax
  006c4	8b 4d ec	 mov	 ecx, DWORD PTR _y_min$[ebp]
  006c7	3b 0d 0c 00 00
	00		 cmp	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  006cd	7e 05		 jle	 SHORT $LN49@draw_arc
  006cf	e9 bd 05 00 00	 jmp	 $LN1@draw_arc
$LN49@draw_arc:

; 271  : 		if ((x_max = x_centre + radius) < active_int_viewport.x_min) return;

  006d4	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  006d7	03 45 f4	 add	 eax, DWORD PTR _radius$[ebp]
  006da	89 45 e8	 mov	 DWORD PTR _x_max$[ebp], eax
  006dd	8b 4d e8	 mov	 ecx, DWORD PTR _x_max$[ebp]
  006e0	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  006e6	7d 05		 jge	 SHORT $LN50@draw_arc
  006e8	e9 a4 05 00 00	 jmp	 $LN1@draw_arc
$LN50@draw_arc:

; 272  : 		if ((y_max = y_centre + radius) < active_int_viewport.y_min) return;

  006ed	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  006f0	03 45 f4	 add	 eax, DWORD PTR _radius$[ebp]
  006f3	89 45 e4	 mov	 DWORD PTR _y_max$[ebp], eax
  006f6	8b 4d e4	 mov	 ecx, DWORD PTR _y_max$[ebp]
  006f9	3b 0d 04 00 00
	00		 cmp	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  006ff	7d 05		 jge	 SHORT $LN51@draw_arc
  00701	e9 8b 05 00 00	 jmp	 $LN1@draw_arc
$LN51@draw_arc:

; 273  : 
; 274  : 		//
; 275  : 		// get screen values
; 276  : 		//
; 277  : 
; 278  : 		col = colour.colour;

  00706	8b 45 18	 mov	 eax, DWORD PTR _colour$[ebp]
  00709	89 45 88	 mov	 DWORD PTR _col$17[ebp], eax

; 279  : 
; 280  : 		screen_data = get_screen_data (active_screen);

  0070c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00711	50		 push	 eax
  00712	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  00717	89 45 d0	 mov	 DWORD PTR _screen_data$[ebp], eax

; 281  : 		screen_pitch = get_screen_pitch (active_screen);

  0071a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0071f	50		 push	 eax
  00720	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  00725	89 45 e0	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 282  : 
; 283  : 		//
; 284  : 		// draw circle
; 285  : 		//
; 286  : 
; 287  : 		x_offset = 0;

  00728	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _x_offset$[ebp], 0

; 288  : 
; 289  : 		y_offset = radius;

  0072f	8b 45 f4	 mov	 eax, DWORD PTR _radius$[ebp]
  00732	89 45 d8	 mov	 DWORD PTR _y_offset$[ebp], eax

; 290  : 
; 291  : 		decision = 3 - (radius << 1);

  00735	8b 45 f4	 mov	 eax, DWORD PTR _radius$[ebp]
  00738	d1 e0		 shl	 eax, 1
  0073a	b9 03 00 00 00	 mov	 ecx, 3
  0073f	2b c8		 sub	 ecx, eax
  00741	89 4d d4	 mov	 DWORD PTR _decision$[ebp], ecx

; 292  : 
; 293  : 		if
; 294  : 		(
; 295  : 			(x_min >= active_int_viewport.x_min) &&
; 296  : 			(y_min >= active_int_viewport.y_min) &&
; 297  : 			(x_max <= active_int_viewport.x_max) &&

  00744	8b 45 f0	 mov	 eax, DWORD PTR _x_min$[ebp]
  00747	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  0074d	0f 8c 84 01 00
	00		 jl	 $LN52@draw_arc
  00753	8b 45 ec	 mov	 eax, DWORD PTR _y_min$[ebp]
  00756	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  0075c	0f 8c 75 01 00
	00		 jl	 $LN52@draw_arc
  00762	8b 45 e8	 mov	 eax, DWORD PTR _x_max$[ebp]
  00765	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  0076b	0f 8f 66 01 00
	00		 jg	 $LN52@draw_arc
  00771	8b 45 e4	 mov	 eax, DWORD PTR _y_max$[ebp]
  00774	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  0077a	0f 8f 57 01 00
	00		 jg	 $LN52@draw_arc
$LN6@draw_arc:

; 298  : 			(y_max <= active_int_viewport.y_max)
; 299  : 		)
; 300  : 		{
; 301  : 			//
; 302  : 			// draw unclipped circle
; 303  : 			//
; 304  : 
; 305  : 			while (x_offset <= y_offset)

  00780	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  00783	3b 45 d8	 cmp	 eax, DWORD PTR _y_offset$[ebp]
  00786	0f 8f 46 01 00
	00		 jg	 $LN7@draw_arc

; 306  : 			{
; 307  : 				if (part & ARC_BOTTOM_RIGHT)   fast_set_32bit_pixel (x_centre + x_offset, y_centre + y_offset, col);

  0078c	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  0078f	83 e0 02	 and	 eax, 2
  00792	74 19		 je	 SHORT $LN54@draw_arc
  00794	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00797	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  0079a	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  0079e	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  007a1	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  007a4	03 4d dc	 add	 ecx, DWORD PTR _x_offset$[ebp]
  007a7	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  007aa	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN54@draw_arc:

; 308  : 				if (part & ARC_TOP_RIGHT)      fast_set_32bit_pixel (x_centre + x_offset, y_centre - y_offset, col);

  007ad	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  007b0	83 e0 01	 and	 eax, 1
  007b3	74 19		 je	 SHORT $LN55@draw_arc
  007b5	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  007b8	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  007bb	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  007bf	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  007c2	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  007c5	03 4d dc	 add	 ecx, DWORD PTR _x_offset$[ebp]
  007c8	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  007cb	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN55@draw_arc:

; 309  : 				if (part & ARC_BOTTOM_LEFT)    fast_set_32bit_pixel (x_centre - x_offset, y_centre + y_offset, col);

  007ce	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  007d1	83 e0 08	 and	 eax, 8
  007d4	74 19		 je	 SHORT $LN56@draw_arc
  007d6	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  007d9	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  007dc	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  007e0	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  007e3	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  007e6	2b 4d dc	 sub	 ecx, DWORD PTR _x_offset$[ebp]
  007e9	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  007ec	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN56@draw_arc:

; 310  : 				if (part & ARC_TOP_LEFT)       fast_set_32bit_pixel (x_centre - x_offset, y_centre - y_offset, col);

  007ef	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  007f2	83 e0 04	 and	 eax, 4
  007f5	74 19		 je	 SHORT $LN57@draw_arc
  007f7	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  007fa	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  007fd	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00801	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00804	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  00807	2b 4d dc	 sub	 ecx, DWORD PTR _x_offset$[ebp]
  0080a	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  0080d	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN57@draw_arc:

; 311  : 				if (part & ARC_RIGHT_DOWN)     fast_set_32bit_pixel (x_centre + y_offset, y_centre + x_offset, col);

  00810	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  00813	83 e0 20	 and	 eax, 32			; 00000020H
  00816	74 19		 je	 SHORT $LN58@draw_arc
  00818	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  0081b	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  0081e	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00822	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00825	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  00828	03 4d d8	 add	 ecx, DWORD PTR _y_offset$[ebp]
  0082b	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  0082e	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN58@draw_arc:

; 312  : 				if (part & ARC_RIGHT_UP)       fast_set_32bit_pixel (x_centre + y_offset, y_centre - x_offset, col);

  00831	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  00834	83 e0 10	 and	 eax, 16			; 00000010H
  00837	74 19		 je	 SHORT $LN59@draw_arc
  00839	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  0083c	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  0083f	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00843	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00846	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  00849	03 4d d8	 add	 ecx, DWORD PTR _y_offset$[ebp]
  0084c	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  0084f	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN59@draw_arc:

; 313  : 				if (part & ARC_LEFT_DOWN)      fast_set_32bit_pixel (x_centre - y_offset, y_centre + x_offset, col);

  00852	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  00855	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0085a	74 19		 je	 SHORT $LN60@draw_arc
  0085c	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  0085f	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  00862	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00866	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00869	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  0086c	2b 4d d8	 sub	 ecx, DWORD PTR _y_offset$[ebp]
  0086f	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  00872	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN60@draw_arc:

; 314  : 				if (part & ARC_LEFT_UP)        fast_set_32bit_pixel (x_centre - y_offset, y_centre - x_offset, col);

  00875	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  00878	83 e0 40	 and	 eax, 64			; 00000040H
  0087b	74 19		 je	 SHORT $LN61@draw_arc
  0087d	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00880	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  00883	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00887	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  0088a	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  0088d	2b 4d d8	 sub	 ecx, DWORD PTR _y_offset$[ebp]
  00890	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  00893	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN61@draw_arc:

; 315  : 
; 316  : 				if (decision < 0)

  00896	83 7d d4 00	 cmp	 DWORD PTR _decision$[ebp], 0
  0089a	7d 0f		 jge	 SHORT $LN62@draw_arc

; 317  : 				{
; 318  : 					decision += (x_offset << 2) + 6;

  0089c	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  0089f	8b 4d d4	 mov	 ecx, DWORD PTR _decision$[ebp]
  008a2	8d 54 81 06	 lea	 edx, DWORD PTR [ecx+eax*4+6]
  008a6	89 55 d4	 mov	 DWORD PTR _decision$[ebp], edx

; 319  : 				}
; 320  : 				else

  008a9	eb 19		 jmp	 SHORT $LN63@draw_arc
$LN62@draw_arc:

; 321  : 				{
; 322  : 					decision += ((x_offset - y_offset) << 2) + 10;

  008ab	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  008ae	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  008b1	8b 4d d4	 mov	 ecx, DWORD PTR _decision$[ebp]
  008b4	8d 54 81 0a	 lea	 edx, DWORD PTR [ecx+eax*4+10]
  008b8	89 55 d4	 mov	 DWORD PTR _decision$[ebp], edx

; 323  : 
; 324  : 					y_offset--;

  008bb	8b 45 d8	 mov	 eax, DWORD PTR _y_offset$[ebp]
  008be	83 e8 01	 sub	 eax, 1
  008c1	89 45 d8	 mov	 DWORD PTR _y_offset$[ebp], eax
$LN63@draw_arc:

; 325  : 				}
; 326  : 
; 327  : 				x_offset++;

  008c4	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  008c7	83 c0 01	 add	 eax, 1
  008ca	89 45 dc	 mov	 DWORD PTR _x_offset$[ebp], eax

; 328  : 			}

  008cd	e9 ae fe ff ff	 jmp	 $LN6@draw_arc
$LN7@draw_arc:

; 329  : 		}
; 330  : 		else

  008d2	e9 ba 03 00 00	 jmp	 $LN9@draw_arc
$LN52@draw_arc:

; 331  : 		{
; 332  : 			//
; 333  : 			// draw clipped circle
; 334  : 			//
; 335  : 
; 336  : 			while (x_offset <= y_offset)

  008d7	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  008da	3b 45 d8	 cmp	 eax, DWORD PTR _y_offset$[ebp]
  008dd	0f 8f ae 03 00
	00		 jg	 $LN9@draw_arc

; 337  : 			{
; 338  : 				if (part & ARC_BOTTOM_RIGHT)   fast_set_32bit_clipped_pixel (x_centre + x_offset, y_centre + y_offset, col);

  008e3	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  008e6	83 e0 02	 and	 eax, 2
  008e9	74 51		 je	 SHORT $LN65@draw_arc
  008eb	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  008ee	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  008f1	89 45 84	 mov	 DWORD PTR _x$16[ebp], eax
  008f4	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  008f7	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  008fa	89 45 80	 mov	 DWORD PTR _y$15[ebp], eax
  008fd	8b 45 84	 mov	 eax, DWORD PTR _x$16[ebp]
  00900	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00906	7c 34		 jl	 SHORT $LN65@draw_arc
  00908	8b 45 80	 mov	 eax, DWORD PTR _y$15[ebp]
  0090b	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00911	7c 29		 jl	 SHORT $LN65@draw_arc
  00913	8b 45 84	 mov	 eax, DWORD PTR _x$16[ebp]
  00916	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  0091c	7f 1e		 jg	 SHORT $LN65@draw_arc
  0091e	8b 45 80	 mov	 eax, DWORD PTR _y$15[ebp]
  00921	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00927	7f 13		 jg	 SHORT $LN65@draw_arc
  00929	8b 45 80	 mov	 eax, DWORD PTR _y$15[ebp]
  0092c	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00930	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00933	8b 4d 84	 mov	 ecx, DWORD PTR _x$16[ebp]
  00936	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  00939	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN65@draw_arc:

; 339  : 				if (part & ARC_TOP_RIGHT)      fast_set_32bit_clipped_pixel (x_centre + x_offset, y_centre - y_offset, col);

  0093c	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  0093f	83 e0 01	 and	 eax, 1
  00942	74 69		 je	 SHORT $LN67@draw_arc
  00944	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  00947	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  0094a	89 85 7c ff ff
	ff		 mov	 DWORD PTR _x$14[ebp], eax
  00950	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00953	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00956	89 85 78 ff ff
	ff		 mov	 DWORD PTR _y$13[ebp], eax
  0095c	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _x$14[ebp]
  00962	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00968	7c 43		 jl	 SHORT $LN67@draw_arc
  0096a	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _y$13[ebp]
  00970	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00976	7c 35		 jl	 SHORT $LN67@draw_arc
  00978	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _x$14[ebp]
  0097e	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00984	7f 27		 jg	 SHORT $LN67@draw_arc
  00986	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _y$13[ebp]
  0098c	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00992	7f 19		 jg	 SHORT $LN67@draw_arc
  00994	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _y$13[ebp]
  0099a	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  0099e	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  009a1	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _x$14[ebp]
  009a7	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  009aa	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN67@draw_arc:

; 340  : 				if (part & ARC_BOTTOM_LEFT)    fast_set_32bit_clipped_pixel (x_centre - x_offset, y_centre + y_offset, col);

  009ad	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  009b0	83 e0 08	 and	 eax, 8
  009b3	74 69		 je	 SHORT $LN69@draw_arc
  009b5	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  009b8	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  009bb	89 85 74 ff ff
	ff		 mov	 DWORD PTR _x$12[ebp], eax
  009c1	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  009c4	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  009c7	89 85 70 ff ff
	ff		 mov	 DWORD PTR _y$11[ebp], eax
  009cd	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _x$12[ebp]
  009d3	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  009d9	7c 43		 jl	 SHORT $LN69@draw_arc
  009db	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _y$11[ebp]
  009e1	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  009e7	7c 35		 jl	 SHORT $LN69@draw_arc
  009e9	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _x$12[ebp]
  009ef	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  009f5	7f 27		 jg	 SHORT $LN69@draw_arc
  009f7	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _y$11[ebp]
  009fd	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00a03	7f 19		 jg	 SHORT $LN69@draw_arc
  00a05	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _y$11[ebp]
  00a0b	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00a0f	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00a12	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _x$12[ebp]
  00a18	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  00a1b	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN69@draw_arc:

; 341  : 				if (part & ARC_TOP_LEFT)       fast_set_32bit_clipped_pixel (x_centre - x_offset, y_centre - y_offset, col);

  00a1e	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  00a21	83 e0 04	 and	 eax, 4
  00a24	74 69		 je	 SHORT $LN71@draw_arc
  00a26	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  00a29	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  00a2c	89 85 6c ff ff
	ff		 mov	 DWORD PTR _x$10[ebp], eax
  00a32	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00a35	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00a38	89 85 68 ff ff
	ff		 mov	 DWORD PTR _y$9[ebp], eax
  00a3e	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _x$10[ebp]
  00a44	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00a4a	7c 43		 jl	 SHORT $LN71@draw_arc
  00a4c	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _y$9[ebp]
  00a52	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00a58	7c 35		 jl	 SHORT $LN71@draw_arc
  00a5a	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _x$10[ebp]
  00a60	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00a66	7f 27		 jg	 SHORT $LN71@draw_arc
  00a68	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _y$9[ebp]
  00a6e	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00a74	7f 19		 jg	 SHORT $LN71@draw_arc
  00a76	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _y$9[ebp]
  00a7c	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00a80	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00a83	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _x$10[ebp]
  00a89	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  00a8c	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN71@draw_arc:

; 342  : 				if (part & ARC_RIGHT_DOWN)     fast_set_32bit_clipped_pixel (x_centre + y_offset, y_centre + x_offset, col);

  00a8f	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  00a92	83 e0 20	 and	 eax, 32			; 00000020H
  00a95	74 69		 je	 SHORT $LN73@draw_arc
  00a97	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  00a9a	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  00a9d	89 85 64 ff ff
	ff		 mov	 DWORD PTR _x$8[ebp], eax
  00aa3	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00aa6	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  00aa9	89 85 60 ff ff
	ff		 mov	 DWORD PTR _y$7[ebp], eax
  00aaf	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _x$8[ebp]
  00ab5	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00abb	7c 43		 jl	 SHORT $LN73@draw_arc
  00abd	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _y$7[ebp]
  00ac3	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00ac9	7c 35		 jl	 SHORT $LN73@draw_arc
  00acb	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _x$8[ebp]
  00ad1	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00ad7	7f 27		 jg	 SHORT $LN73@draw_arc
  00ad9	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _y$7[ebp]
  00adf	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00ae5	7f 19		 jg	 SHORT $LN73@draw_arc
  00ae7	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _y$7[ebp]
  00aed	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00af1	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00af4	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _x$8[ebp]
  00afa	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  00afd	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN73@draw_arc:

; 343  : 				if (part & ARC_RIGHT_UP)       fast_set_32bit_clipped_pixel (x_centre + y_offset, y_centre - x_offset, col);

  00b00	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  00b03	83 e0 10	 and	 eax, 16			; 00000010H
  00b06	74 69		 je	 SHORT $LN75@draw_arc
  00b08	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  00b0b	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  00b0e	89 85 5c ff ff
	ff		 mov	 DWORD PTR _x$6[ebp], eax
  00b14	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00b17	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  00b1a	89 85 58 ff ff
	ff		 mov	 DWORD PTR _y$5[ebp], eax
  00b20	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _x$6[ebp]
  00b26	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00b2c	7c 43		 jl	 SHORT $LN75@draw_arc
  00b2e	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _y$5[ebp]
  00b34	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00b3a	7c 35		 jl	 SHORT $LN75@draw_arc
  00b3c	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _x$6[ebp]
  00b42	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00b48	7f 27		 jg	 SHORT $LN75@draw_arc
  00b4a	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _y$5[ebp]
  00b50	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00b56	7f 19		 jg	 SHORT $LN75@draw_arc
  00b58	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _y$5[ebp]
  00b5e	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00b62	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00b65	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _x$6[ebp]
  00b6b	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  00b6e	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN75@draw_arc:

; 344  : 				if (part & ARC_LEFT_DOWN)      fast_set_32bit_clipped_pixel (x_centre - y_offset, y_centre + x_offset, col);

  00b71	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  00b74	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00b79	74 69		 je	 SHORT $LN77@draw_arc
  00b7b	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  00b7e	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00b81	89 85 54 ff ff
	ff		 mov	 DWORD PTR _x$4[ebp], eax
  00b87	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00b8a	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  00b8d	89 85 50 ff ff
	ff		 mov	 DWORD PTR _y$3[ebp], eax
  00b93	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _x$4[ebp]
  00b99	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00b9f	7c 43		 jl	 SHORT $LN77@draw_arc
  00ba1	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _y$3[ebp]
  00ba7	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00bad	7c 35		 jl	 SHORT $LN77@draw_arc
  00baf	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _x$4[ebp]
  00bb5	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00bbb	7f 27		 jg	 SHORT $LN77@draw_arc
  00bbd	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _y$3[ebp]
  00bc3	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00bc9	7f 19		 jg	 SHORT $LN77@draw_arc
  00bcb	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _y$3[ebp]
  00bd1	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00bd5	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00bd8	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _x$4[ebp]
  00bde	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  00be1	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN77@draw_arc:

; 345  : 				if (part & ARC_LEFT_UP)        fast_set_32bit_clipped_pixel (x_centre - y_offset, y_centre - x_offset, col);

  00be4	8b 45 14	 mov	 eax, DWORD PTR _part$[ebp]
  00be7	83 e0 40	 and	 eax, 64			; 00000040H
  00bea	74 69		 je	 SHORT $LN79@draw_arc
  00bec	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  00bef	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00bf2	89 85 4c ff ff
	ff		 mov	 DWORD PTR _x$2[ebp], eax
  00bf8	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00bfb	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  00bfe	89 85 48 ff ff
	ff		 mov	 DWORD PTR _y$1[ebp], eax
  00c04	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _x$2[ebp]
  00c0a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00c10	7c 43		 jl	 SHORT $LN79@draw_arc
  00c12	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _y$1[ebp]
  00c18	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00c1e	7c 35		 jl	 SHORT $LN79@draw_arc
  00c20	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _x$2[ebp]
  00c26	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00c2c	7f 27		 jg	 SHORT $LN79@draw_arc
  00c2e	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _y$1[ebp]
  00c34	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00c3a	7f 19		 jg	 SHORT $LN79@draw_arc
  00c3c	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _y$1[ebp]
  00c42	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00c46	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00c49	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _x$2[ebp]
  00c4f	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  00c52	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN79@draw_arc:

; 346  : 
; 347  : 				if (decision < 0)

  00c55	83 7d d4 00	 cmp	 DWORD PTR _decision$[ebp], 0
  00c59	7d 0f		 jge	 SHORT $LN80@draw_arc

; 348  : 				{
; 349  : 					decision += (x_offset << 2) + 6;

  00c5b	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  00c5e	8b 4d d4	 mov	 ecx, DWORD PTR _decision$[ebp]
  00c61	8d 54 81 06	 lea	 edx, DWORD PTR [ecx+eax*4+6]
  00c65	89 55 d4	 mov	 DWORD PTR _decision$[ebp], edx

; 350  : 				}
; 351  : 				else

  00c68	eb 19		 jmp	 SHORT $LN81@draw_arc
$LN80@draw_arc:

; 352  : 				{
; 353  : 					decision += ((x_offset - y_offset) << 2) + 10;

  00c6a	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  00c6d	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00c70	8b 4d d4	 mov	 ecx, DWORD PTR _decision$[ebp]
  00c73	8d 54 81 0a	 lea	 edx, DWORD PTR [ecx+eax*4+10]
  00c77	89 55 d4	 mov	 DWORD PTR _decision$[ebp], edx

; 354  : 
; 355  : 					y_offset--;

  00c7a	8b 45 d8	 mov	 eax, DWORD PTR _y_offset$[ebp]
  00c7d	83 e8 01	 sub	 eax, 1
  00c80	89 45 d8	 mov	 DWORD PTR _y_offset$[ebp], eax
$LN81@draw_arc:

; 356  : 				}
; 357  : 
; 358  : 				x_offset++;

  00c83	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  00c86	83 c0 01	 add	 eax, 1
  00c89	89 45 dc	 mov	 DWORD PTR _x_offset$[ebp], eax

; 359  : 			}

  00c8c	e9 46 fc ff ff	 jmp	 $LN52@draw_arc
$LN9@draw_arc:
$LN1@draw_arc:

; 360  : 		}
; 361  : 	}
; 362  : }

  00c91	5f		 pop	 edi
  00c92	5e		 pop	 esi
  00c93	5b		 pop	 ebx
  00c94	8b e5		 mov	 esp, ebp
  00c96	5d		 pop	 ebp
  00c97	c2 14 00	 ret	 20			; 00000014H
?draw_arc@@YGXMMMIUREAL_COLOUR@@@Z ENDP			; draw_arc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\circle.c
;	COMDAT ?draw_circle@@YGXMMMUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_y$1 = -184						; size = 4
_x$2 = -180						; size = 4
_y$3 = -176						; size = 4
_x$4 = -172						; size = 4
_y$5 = -168						; size = 4
_x$6 = -164						; size = 4
_y$7 = -160						; size = 4
_x$8 = -156						; size = 4
_y$9 = -152						; size = 4
_x$10 = -148						; size = 4
_y$11 = -144						; size = 4
_x$12 = -140						; size = 4
_y$13 = -136						; size = 4
_x$14 = -132						; size = 4
_y$15 = -128						; size = 4
_x$16 = -124						; size = 4
_col$17 = -120						; size = 4
_y$18 = -116						; size = 4
_x$19 = -112						; size = 4
_y$20 = -108						; size = 4
_x$21 = -104						; size = 4
_y$22 = -100						; size = 4
_x$23 = -96						; size = 4
_y$24 = -92						; size = 4
_x$25 = -88						; size = 4
_y$26 = -84						; size = 4
_x$27 = -80						; size = 4
_y$28 = -76						; size = 4
_x$29 = -72						; size = 4
_y$30 = -68						; size = 4
_x$31 = -64						; size = 4
_y$32 = -60						; size = 4
_x$33 = -56						; size = 4
_col$34 = -52						; size = 2
_screen_data$ = -48					; size = 4
_decision$ = -44					; size = 4
_y_offset$ = -40					; size = 4
_x_offset$ = -36					; size = 4
_screen_pitch$ = -32					; size = 4
_y_max$ = -28						; size = 4
_x_max$ = -24						; size = 4
_y_min$ = -20						; size = 4
_x_min$ = -16						; size = 4
_radius$ = -12						; size = 4
_y_centre$ = -8						; size = 4
_x_centre$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_r$ = 16						; size = 4
_colour$ = 20						; size = 4
?draw_circle@@YGXMMMUREAL_COLOUR@@@Z PROC		; draw_circle, COMDAT

; 369  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f8 00 00
	00		 sub	 esp, 248		; 000000f8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 370  :    int
; 371  : 		x_centre,
; 372  : 		y_centre,
; 373  : 		radius,
; 374  : 		x_min,
; 375  : 		y_min,
; 376  : 		x_max,
; 377  : 		y_max,
; 378  : 		screen_pitch,
; 379  :       x_offset,
; 380  :       y_offset,
; 381  :       decision;
; 382  : 
; 383  : 	unsigned char
; 384  : 		*screen_data;
; 385  : 
; 386  : 	ASSERT (active_screen);

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?active_screen@@3PAUSCREEN@@A, 0 ; active_screen
  00013	75 18		 jne	 SHORT $LN10@draw_circl
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_circle@@YGXMMMUREAL_COLOUR@@@Z@4JA
  0001a	83 c0 11	 add	 eax, 17			; 00000011H
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@LIEJAGLG@c?3?2users?2nhv90?2projects?2eech?2mo@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IILHNAKB@active_screen@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@draw_circl:

; 387  : 	ASSERT (get_screen_locked (active_screen));

  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?get_screen_locked@@YGHPAUSCREEN@@@Z ; get_screen_locked
  00038	85 c0		 test	 eax, eax
  0003a	75 18		 jne	 SHORT $LN11@draw_circl
  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_circle@@YGXMMMUREAL_COLOUR@@@Z@4JA
  00041	83 c0 12	 add	 eax, 18			; 00000012H
  00044	50		 push	 eax
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@LIEJAGLG@c?3?2users?2nhv90?2projects?2eech?2mo@
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@BNNOEDBO@get_screen_locked?5?$CIactive_scree@
  0004f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN11@draw_circl:

; 388  : 
; 389  : 	if ( active_screen->pixel_length <= 16 )

  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00059	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  0005d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00060	0f 8f 7c 05 00
	00		 jg	 $LN12@draw_circl

; 390  : 	{
; 391  : 
; 392  : 		USHORT
; 393  : 			col;
; 394  : 
; 395  : 		convert_float_to_int (x, &x_centre);

  00066	8d 45 fc	 lea	 eax, DWORD PTR _x_centre$[ebp]
  00069	50		 push	 eax
  0006a	51		 push	 ecx
  0006b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00070	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00075	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 396  : 		convert_float_to_int (y, &y_centre);

  0007a	8d 45 f8	 lea	 eax, DWORD PTR _y_centre$[ebp]
  0007d	50		 push	 eax
  0007e	51		 push	 ecx
  0007f	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  00084	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00089	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 397  : 		convert_float_to_int (r, &radius);

  0008e	8d 45 f4	 lea	 eax, DWORD PTR _radius$[ebp]
  00091	50		 push	 eax
  00092	51		 push	 ecx
  00093	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _r$[ebp]
  00098	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009d	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 398  : 
; 399  : 		//
; 400  : 		// trivially reject
; 401  : 		//
; 402  : 
; 403  : 		if ((x_min = x_centre - radius) > active_int_viewport.x_max) return;

  000a2	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  000a5	2b 45 f4	 sub	 eax, DWORD PTR _radius$[ebp]
  000a8	89 45 f0	 mov	 DWORD PTR _x_min$[ebp], eax
  000ab	8b 4d f0	 mov	 ecx, DWORD PTR _x_min$[ebp]
  000ae	3b 0d 08 00 00
	00		 cmp	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  000b4	7e 05		 jle	 SHORT $LN14@draw_circl
  000b6	e9 ce 0a 00 00	 jmp	 $LN1@draw_circl
$LN14@draw_circl:

; 404  : 		if ((y_min = y_centre - radius) > active_int_viewport.y_max) return;

  000bb	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  000be	2b 45 f4	 sub	 eax, DWORD PTR _radius$[ebp]
  000c1	89 45 ec	 mov	 DWORD PTR _y_min$[ebp], eax
  000c4	8b 4d ec	 mov	 ecx, DWORD PTR _y_min$[ebp]
  000c7	3b 0d 0c 00 00
	00		 cmp	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  000cd	7e 05		 jle	 SHORT $LN15@draw_circl
  000cf	e9 b5 0a 00 00	 jmp	 $LN1@draw_circl
$LN15@draw_circl:

; 405  : 		if ((x_max = x_centre + radius) < active_int_viewport.x_min) return;

  000d4	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  000d7	03 45 f4	 add	 eax, DWORD PTR _radius$[ebp]
  000da	89 45 e8	 mov	 DWORD PTR _x_max$[ebp], eax
  000dd	8b 4d e8	 mov	 ecx, DWORD PTR _x_max$[ebp]
  000e0	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  000e6	7d 05		 jge	 SHORT $LN16@draw_circl
  000e8	e9 9c 0a 00 00	 jmp	 $LN1@draw_circl
$LN16@draw_circl:

; 406  : 		if ((y_max = y_centre + radius) < active_int_viewport.y_min) return;

  000ed	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  000f0	03 45 f4	 add	 eax, DWORD PTR _radius$[ebp]
  000f3	89 45 e4	 mov	 DWORD PTR _y_max$[ebp], eax
  000f6	8b 4d e4	 mov	 ecx, DWORD PTR _y_max$[ebp]
  000f9	3b 0d 04 00 00
	00		 cmp	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  000ff	7d 05		 jge	 SHORT $LN17@draw_circl
  00101	e9 83 0a 00 00	 jmp	 $LN1@draw_circl
$LN17@draw_circl:

; 407  : 
; 408  : 		//
; 409  : 		// get screen values
; 410  : 		//
; 411  : 
; 412  : 		col = get_packed_colour (colour);

  00106	0f b6 45 16	 movzx	 eax, BYTE PTR _colour$[ebp+2]
  0010a	c1 e0 18	 shl	 eax, 24			; 00000018H
  0010d	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_red_mask@@3HA ; active_screen_red_mask
  00113	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_red_shift@@3HA ; active_screen_red_shift
  00119	d3 e8		 shr	 eax, cl
  0011b	0f b6 55 15	 movzx	 edx, BYTE PTR _colour$[ebp+1]
  0011f	c1 e2 18	 shl	 edx, 24			; 00000018H
  00122	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_green_mask@@3HA ; active_screen_green_mask
  00128	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_green_shift@@3HA ; active_screen_green_shift
  0012e	d3 ea		 shr	 edx, cl
  00130	0b c2		 or	 eax, edx
  00132	0f b6 55 14	 movzx	 edx, BYTE PTR _colour$[ebp]
  00136	c1 e2 18	 shl	 edx, 24			; 00000018H
  00139	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_blue_mask@@3HA ; active_screen_blue_mask
  0013f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_blue_shift@@3HA ; active_screen_blue_shift
  00145	d3 ea		 shr	 edx, cl
  00147	0b c2		 or	 eax, edx
  00149	0f b6 55 17	 movzx	 edx, BYTE PTR _colour$[ebp+3]
  0014d	c1 e2 18	 shl	 edx, 24			; 00000018H
  00150	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_alpha_mask@@3HA ; active_screen_alpha_mask
  00156	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_alpha_shift@@3HA ; active_screen_alpha_shift
  0015c	d3 ea		 shr	 edx, cl
  0015e	0b c2		 or	 eax, edx
  00160	66 89 45 cc	 mov	 WORD PTR _col$34[ebp], ax

; 413  : 
; 414  : 		screen_data = get_screen_data (active_screen);

  00164	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00169	50		 push	 eax
  0016a	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  0016f	89 45 d0	 mov	 DWORD PTR _screen_data$[ebp], eax

; 415  : 
; 416  : 		screen_pitch = get_screen_pitch (active_screen);

  00172	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00177	50		 push	 eax
  00178	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  0017d	89 45 e0	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 417  : 
; 418  : 		//
; 419  : 		// draw circle
; 420  : 		//
; 421  : 
; 422  : 		x_offset = 0;

  00180	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _x_offset$[ebp], 0

; 423  : 
; 424  : 		y_offset = radius;

  00187	8b 45 f4	 mov	 eax, DWORD PTR _radius$[ebp]
  0018a	89 45 d8	 mov	 DWORD PTR _y_offset$[ebp], eax

; 425  : 
; 426  : 		decision = 3 - (radius << 1);

  0018d	8b 45 f4	 mov	 eax, DWORD PTR _radius$[ebp]
  00190	d1 e0		 shl	 eax, 1
  00192	b9 03 00 00 00	 mov	 ecx, 3
  00197	2b c8		 sub	 ecx, eax
  00199	89 4d d4	 mov	 DWORD PTR _decision$[ebp], ecx

; 427  : 
; 428  : 		if
; 429  : 		(
; 430  : 			(x_min >= active_int_viewport.x_min) &&
; 431  : 			(y_min >= active_int_viewport.y_min) &&
; 432  : 			(x_max <= active_int_viewport.x_max) &&

  0019c	8b 45 f0	 mov	 eax, DWORD PTR _x_min$[ebp]
  0019f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  001a5	0f 8c 52 01 00
	00		 jl	 $LN18@draw_circl
  001ab	8b 45 ec	 mov	 eax, DWORD PTR _y_min$[ebp]
  001ae	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  001b4	0f 8c 43 01 00
	00		 jl	 $LN18@draw_circl
  001ba	8b 45 e8	 mov	 eax, DWORD PTR _x_max$[ebp]
  001bd	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  001c3	0f 8f 34 01 00
	00		 jg	 $LN18@draw_circl
  001c9	8b 45 e4	 mov	 eax, DWORD PTR _y_max$[ebp]
  001cc	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  001d2	0f 8f 25 01 00
	00		 jg	 $LN18@draw_circl
$LN2@draw_circl:

; 433  : 			(y_max <= active_int_viewport.y_max)
; 434  : 		)
; 435  : 		{
; 436  : 			//
; 437  : 			// draw unclipped circle
; 438  : 			//
; 439  : 
; 440  : 			while (x_offset <= y_offset)

  001d8	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  001db	3b 45 d8	 cmp	 eax, DWORD PTR _y_offset$[ebp]
  001de	0f 8f 14 01 00
	00		 jg	 $LN3@draw_circl

; 441  : 			{
; 442  : 				fast_set_pixel (x_centre + x_offset, y_centre + y_offset, col);

  001e4	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  001e7	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  001ea	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  001ee	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  001f1	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  001f4	03 4d dc	 add	 ecx, DWORD PTR _x_offset$[ebp]
  001f7	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  001fb	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 443  : 				fast_set_pixel (x_centre + x_offset, y_centre - y_offset, col);

  001ff	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00202	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00205	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00209	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  0020c	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  0020f	03 4d dc	 add	 ecx, DWORD PTR _x_offset$[ebp]
  00212	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  00216	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 444  : 				fast_set_pixel (x_centre - x_offset, y_centre + y_offset, col);

  0021a	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  0021d	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  00220	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00224	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00227	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  0022a	2b 4d dc	 sub	 ecx, DWORD PTR _x_offset$[ebp]
  0022d	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  00231	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 445  : 				fast_set_pixel (x_centre - x_offset, y_centre - y_offset, col);

  00235	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00238	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  0023b	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  0023f	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00242	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  00245	2b 4d dc	 sub	 ecx, DWORD PTR _x_offset$[ebp]
  00248	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  0024c	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 446  : 				fast_set_pixel (x_centre + y_offset, y_centre + x_offset, col);

  00250	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00253	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  00256	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  0025a	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  0025d	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  00260	03 4d d8	 add	 ecx, DWORD PTR _y_offset$[ebp]
  00263	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  00267	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 447  : 				fast_set_pixel (x_centre + y_offset, y_centre - x_offset, col);

  0026b	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  0026e	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  00271	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00275	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00278	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  0027b	03 4d d8	 add	 ecx, DWORD PTR _y_offset$[ebp]
  0027e	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  00282	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 448  : 				fast_set_pixel (x_centre - y_offset, y_centre + x_offset, col);

  00286	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00289	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  0028c	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00290	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00293	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  00296	2b 4d d8	 sub	 ecx, DWORD PTR _y_offset$[ebp]
  00299	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  0029d	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 449  : 				fast_set_pixel (x_centre - y_offset, y_centre - x_offset, col);

  002a1	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  002a4	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  002a7	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  002ab	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  002ae	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  002b1	2b 4d d8	 sub	 ecx, DWORD PTR _y_offset$[ebp]
  002b4	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  002b8	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 450  : 
; 451  : 				if (decision < 0)

  002bc	83 7d d4 00	 cmp	 DWORD PTR _decision$[ebp], 0
  002c0	7d 0f		 jge	 SHORT $LN20@draw_circl

; 452  : 				{
; 453  : 					decision += (x_offset << 2) + 6;

  002c2	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  002c5	8b 4d d4	 mov	 ecx, DWORD PTR _decision$[ebp]
  002c8	8d 54 81 06	 lea	 edx, DWORD PTR [ecx+eax*4+6]
  002cc	89 55 d4	 mov	 DWORD PTR _decision$[ebp], edx

; 454  : 				}
; 455  : 				else

  002cf	eb 19		 jmp	 SHORT $LN21@draw_circl
$LN20@draw_circl:

; 456  : 				{
; 457  : 					decision += ((x_offset - y_offset) << 2) + 10;

  002d1	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  002d4	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  002d7	8b 4d d4	 mov	 ecx, DWORD PTR _decision$[ebp]
  002da	8d 54 81 0a	 lea	 edx, DWORD PTR [ecx+eax*4+10]
  002de	89 55 d4	 mov	 DWORD PTR _decision$[ebp], edx

; 458  : 
; 459  : 					y_offset--;

  002e1	8b 45 d8	 mov	 eax, DWORD PTR _y_offset$[ebp]
  002e4	83 e8 01	 sub	 eax, 1
  002e7	89 45 d8	 mov	 DWORD PTR _y_offset$[ebp], eax
$LN21@draw_circl:

; 460  : 				}
; 461  : 
; 462  : 				x_offset++;

  002ea	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  002ed	83 c0 01	 add	 eax, 1
  002f0	89 45 dc	 mov	 DWORD PTR _x_offset$[ebp], eax

; 463  : 			}

  002f3	e9 e0 fe ff ff	 jmp	 $LN2@draw_circl
$LN3@draw_circl:

; 464  : 		}
; 465  : 		else

  002f8	e9 e0 02 00 00	 jmp	 $LN5@draw_circl
$LN18@draw_circl:

; 466  : 		{
; 467  : 			//
; 468  : 			// draw clipped circle
; 469  : 			//
; 470  : 
; 471  : 			while (x_offset <= y_offset)

  002fd	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  00300	3b 45 d8	 cmp	 eax, DWORD PTR _y_offset$[ebp]
  00303	0f 8f d4 02 00
	00		 jg	 $LN5@draw_circl

; 472  : 			{
; 473  : 				fast_set_clipped_pixel (x_centre + x_offset, y_centre + y_offset, col);

  00309	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  0030c	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  0030f	89 45 c8	 mov	 DWORD PTR _x$33[ebp], eax
  00312	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00315	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  00318	89 45 c4	 mov	 DWORD PTR _y$32[ebp], eax
  0031b	8b 45 c8	 mov	 eax, DWORD PTR _x$33[ebp]
  0031e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00324	7c 36		 jl	 SHORT $LN22@draw_circl
  00326	8b 45 c4	 mov	 eax, DWORD PTR _y$32[ebp]
  00329	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  0032f	7c 2b		 jl	 SHORT $LN22@draw_circl
  00331	8b 45 c8	 mov	 eax, DWORD PTR _x$33[ebp]
  00334	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  0033a	7f 20		 jg	 SHORT $LN22@draw_circl
  0033c	8b 45 c4	 mov	 eax, DWORD PTR _y$32[ebp]
  0033f	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00345	7f 15		 jg	 SHORT $LN22@draw_circl
  00347	8b 45 c4	 mov	 eax, DWORD PTR _y$32[ebp]
  0034a	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  0034e	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00351	8b 4d c8	 mov	 ecx, DWORD PTR _x$33[ebp]
  00354	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  00358	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN22@draw_circl:

; 474  : 				fast_set_clipped_pixel (x_centre + x_offset, y_centre - y_offset, col);

  0035c	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  0035f	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  00362	89 45 c0	 mov	 DWORD PTR _x$31[ebp], eax
  00365	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00368	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  0036b	89 45 bc	 mov	 DWORD PTR _y$30[ebp], eax
  0036e	8b 45 c0	 mov	 eax, DWORD PTR _x$31[ebp]
  00371	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00377	7c 36		 jl	 SHORT $LN23@draw_circl
  00379	8b 45 bc	 mov	 eax, DWORD PTR _y$30[ebp]
  0037c	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00382	7c 2b		 jl	 SHORT $LN23@draw_circl
  00384	8b 45 c0	 mov	 eax, DWORD PTR _x$31[ebp]
  00387	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  0038d	7f 20		 jg	 SHORT $LN23@draw_circl
  0038f	8b 45 bc	 mov	 eax, DWORD PTR _y$30[ebp]
  00392	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00398	7f 15		 jg	 SHORT $LN23@draw_circl
  0039a	8b 45 bc	 mov	 eax, DWORD PTR _y$30[ebp]
  0039d	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  003a1	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  003a4	8b 4d c0	 mov	 ecx, DWORD PTR _x$31[ebp]
  003a7	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  003ab	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN23@draw_circl:

; 475  : 				fast_set_clipped_pixel (x_centre - x_offset, y_centre + y_offset, col);

  003af	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  003b2	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  003b5	89 45 b8	 mov	 DWORD PTR _x$29[ebp], eax
  003b8	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  003bb	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  003be	89 45 b4	 mov	 DWORD PTR _y$28[ebp], eax
  003c1	8b 45 b8	 mov	 eax, DWORD PTR _x$29[ebp]
  003c4	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  003ca	7c 36		 jl	 SHORT $LN24@draw_circl
  003cc	8b 45 b4	 mov	 eax, DWORD PTR _y$28[ebp]
  003cf	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  003d5	7c 2b		 jl	 SHORT $LN24@draw_circl
  003d7	8b 45 b8	 mov	 eax, DWORD PTR _x$29[ebp]
  003da	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  003e0	7f 20		 jg	 SHORT $LN24@draw_circl
  003e2	8b 45 b4	 mov	 eax, DWORD PTR _y$28[ebp]
  003e5	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  003eb	7f 15		 jg	 SHORT $LN24@draw_circl
  003ed	8b 45 b4	 mov	 eax, DWORD PTR _y$28[ebp]
  003f0	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  003f4	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  003f7	8b 4d b8	 mov	 ecx, DWORD PTR _x$29[ebp]
  003fa	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  003fe	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN24@draw_circl:

; 476  : 				fast_set_clipped_pixel (x_centre - x_offset, y_centre - y_offset, col);

  00402	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  00405	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  00408	89 45 b0	 mov	 DWORD PTR _x$27[ebp], eax
  0040b	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  0040e	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00411	89 45 ac	 mov	 DWORD PTR _y$26[ebp], eax
  00414	8b 45 b0	 mov	 eax, DWORD PTR _x$27[ebp]
  00417	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  0041d	7c 36		 jl	 SHORT $LN25@draw_circl
  0041f	8b 45 ac	 mov	 eax, DWORD PTR _y$26[ebp]
  00422	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00428	7c 2b		 jl	 SHORT $LN25@draw_circl
  0042a	8b 45 b0	 mov	 eax, DWORD PTR _x$27[ebp]
  0042d	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00433	7f 20		 jg	 SHORT $LN25@draw_circl
  00435	8b 45 ac	 mov	 eax, DWORD PTR _y$26[ebp]
  00438	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  0043e	7f 15		 jg	 SHORT $LN25@draw_circl
  00440	8b 45 ac	 mov	 eax, DWORD PTR _y$26[ebp]
  00443	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00447	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  0044a	8b 4d b0	 mov	 ecx, DWORD PTR _x$27[ebp]
  0044d	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  00451	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN25@draw_circl:

; 477  : 				fast_set_clipped_pixel (x_centre + y_offset, y_centre + x_offset, col);

  00455	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  00458	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  0045b	89 45 a8	 mov	 DWORD PTR _x$25[ebp], eax
  0045e	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00461	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  00464	89 45 a4	 mov	 DWORD PTR _y$24[ebp], eax
  00467	8b 45 a8	 mov	 eax, DWORD PTR _x$25[ebp]
  0046a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00470	7c 36		 jl	 SHORT $LN26@draw_circl
  00472	8b 45 a4	 mov	 eax, DWORD PTR _y$24[ebp]
  00475	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  0047b	7c 2b		 jl	 SHORT $LN26@draw_circl
  0047d	8b 45 a8	 mov	 eax, DWORD PTR _x$25[ebp]
  00480	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00486	7f 20		 jg	 SHORT $LN26@draw_circl
  00488	8b 45 a4	 mov	 eax, DWORD PTR _y$24[ebp]
  0048b	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00491	7f 15		 jg	 SHORT $LN26@draw_circl
  00493	8b 45 a4	 mov	 eax, DWORD PTR _y$24[ebp]
  00496	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  0049a	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  0049d	8b 4d a8	 mov	 ecx, DWORD PTR _x$25[ebp]
  004a0	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  004a4	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN26@draw_circl:

; 478  : 				fast_set_clipped_pixel (x_centre + y_offset, y_centre - x_offset, col);

  004a8	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  004ab	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  004ae	89 45 a0	 mov	 DWORD PTR _x$23[ebp], eax
  004b1	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  004b4	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  004b7	89 45 9c	 mov	 DWORD PTR _y$22[ebp], eax
  004ba	8b 45 a0	 mov	 eax, DWORD PTR _x$23[ebp]
  004bd	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  004c3	7c 36		 jl	 SHORT $LN27@draw_circl
  004c5	8b 45 9c	 mov	 eax, DWORD PTR _y$22[ebp]
  004c8	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  004ce	7c 2b		 jl	 SHORT $LN27@draw_circl
  004d0	8b 45 a0	 mov	 eax, DWORD PTR _x$23[ebp]
  004d3	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  004d9	7f 20		 jg	 SHORT $LN27@draw_circl
  004db	8b 45 9c	 mov	 eax, DWORD PTR _y$22[ebp]
  004de	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  004e4	7f 15		 jg	 SHORT $LN27@draw_circl
  004e6	8b 45 9c	 mov	 eax, DWORD PTR _y$22[ebp]
  004e9	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  004ed	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  004f0	8b 4d a0	 mov	 ecx, DWORD PTR _x$23[ebp]
  004f3	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  004f7	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN27@draw_circl:

; 479  : 				fast_set_clipped_pixel (x_centre - y_offset, y_centre + x_offset, col);

  004fb	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  004fe	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00501	89 45 98	 mov	 DWORD PTR _x$21[ebp], eax
  00504	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00507	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  0050a	89 45 94	 mov	 DWORD PTR _y$20[ebp], eax
  0050d	8b 45 98	 mov	 eax, DWORD PTR _x$21[ebp]
  00510	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00516	7c 36		 jl	 SHORT $LN28@draw_circl
  00518	8b 45 94	 mov	 eax, DWORD PTR _y$20[ebp]
  0051b	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00521	7c 2b		 jl	 SHORT $LN28@draw_circl
  00523	8b 45 98	 mov	 eax, DWORD PTR _x$21[ebp]
  00526	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  0052c	7f 20		 jg	 SHORT $LN28@draw_circl
  0052e	8b 45 94	 mov	 eax, DWORD PTR _y$20[ebp]
  00531	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00537	7f 15		 jg	 SHORT $LN28@draw_circl
  00539	8b 45 94	 mov	 eax, DWORD PTR _y$20[ebp]
  0053c	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00540	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00543	8b 4d 98	 mov	 ecx, DWORD PTR _x$21[ebp]
  00546	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  0054a	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN28@draw_circl:

; 480  : 				fast_set_clipped_pixel (x_centre - y_offset, y_centre - x_offset, col);

  0054e	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  00551	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00554	89 45 90	 mov	 DWORD PTR _x$19[ebp], eax
  00557	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  0055a	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  0055d	89 45 8c	 mov	 DWORD PTR _y$18[ebp], eax
  00560	8b 45 90	 mov	 eax, DWORD PTR _x$19[ebp]
  00563	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00569	7c 36		 jl	 SHORT $LN29@draw_circl
  0056b	8b 45 8c	 mov	 eax, DWORD PTR _y$18[ebp]
  0056e	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00574	7c 2b		 jl	 SHORT $LN29@draw_circl
  00576	8b 45 90	 mov	 eax, DWORD PTR _x$19[ebp]
  00579	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  0057f	7f 20		 jg	 SHORT $LN29@draw_circl
  00581	8b 45 8c	 mov	 eax, DWORD PTR _y$18[ebp]
  00584	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  0058a	7f 15		 jg	 SHORT $LN29@draw_circl
  0058c	8b 45 8c	 mov	 eax, DWORD PTR _y$18[ebp]
  0058f	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00593	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00596	8b 4d 90	 mov	 ecx, DWORD PTR _x$19[ebp]
  00599	66 8b 55 cc	 mov	 dx, WORD PTR _col$34[ebp]
  0059d	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN29@draw_circl:

; 481  : 
; 482  : 				if (decision < 0)

  005a1	83 7d d4 00	 cmp	 DWORD PTR _decision$[ebp], 0
  005a5	7d 0f		 jge	 SHORT $LN30@draw_circl

; 483  : 				{
; 484  : 					decision += (x_offset << 2) + 6;

  005a7	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  005aa	8b 4d d4	 mov	 ecx, DWORD PTR _decision$[ebp]
  005ad	8d 54 81 06	 lea	 edx, DWORD PTR [ecx+eax*4+6]
  005b1	89 55 d4	 mov	 DWORD PTR _decision$[ebp], edx

; 485  : 				}
; 486  : 				else

  005b4	eb 19		 jmp	 SHORT $LN31@draw_circl
$LN30@draw_circl:

; 487  : 				{
; 488  : 					decision += ((x_offset - y_offset) << 2) + 10;

  005b6	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  005b9	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  005bc	8b 4d d4	 mov	 ecx, DWORD PTR _decision$[ebp]
  005bf	8d 54 81 0a	 lea	 edx, DWORD PTR [ecx+eax*4+10]
  005c3	89 55 d4	 mov	 DWORD PTR _decision$[ebp], edx

; 489  : 
; 490  : 					y_offset--;

  005c6	8b 45 d8	 mov	 eax, DWORD PTR _y_offset$[ebp]
  005c9	83 e8 01	 sub	 eax, 1
  005cc	89 45 d8	 mov	 DWORD PTR _y_offset$[ebp], eax
$LN31@draw_circl:

; 491  : 				}
; 492  : 
; 493  : 				x_offset++;

  005cf	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  005d2	83 c0 01	 add	 eax, 1
  005d5	89 45 dc	 mov	 DWORD PTR _x_offset$[ebp], eax

; 494  : 			}

  005d8	e9 20 fd ff ff	 jmp	 $LN18@draw_circl
$LN5@draw_circl:

; 495  : 		}
; 496  : 	}
; 497  : 	else

  005dd	e9 a7 05 00 00	 jmp	 $LN9@draw_circl
$LN12@draw_circl:

; 498  : 	{
; 499  : 
; 500  : 		ULONG
; 501  : 			col;
; 502  : 
; 503  : 		convert_float_to_int (x, &x_centre);

  005e2	8d 45 fc	 lea	 eax, DWORD PTR _x_centre$[ebp]
  005e5	50		 push	 eax
  005e6	51		 push	 ecx
  005e7	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  005ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f1	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 504  : 		convert_float_to_int (y, &y_centre);

  005f6	8d 45 f8	 lea	 eax, DWORD PTR _y_centre$[ebp]
  005f9	50		 push	 eax
  005fa	51		 push	 ecx
  005fb	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  00600	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00605	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 505  : 		convert_float_to_int (r, &radius);

  0060a	8d 45 f4	 lea	 eax, DWORD PTR _radius$[ebp]
  0060d	50		 push	 eax
  0060e	51		 push	 ecx
  0060f	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _r$[ebp]
  00614	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00619	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 506  : 
; 507  : 		//
; 508  : 		// trivially reject
; 509  : 		//
; 510  : 
; 511  : 		if ((x_min = x_centre - radius) > active_int_viewport.x_max) return;

  0061e	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  00621	2b 45 f4	 sub	 eax, DWORD PTR _radius$[ebp]
  00624	89 45 f0	 mov	 DWORD PTR _x_min$[ebp], eax
  00627	8b 4d f0	 mov	 ecx, DWORD PTR _x_min$[ebp]
  0062a	3b 0d 08 00 00
	00		 cmp	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00630	7e 05		 jle	 SHORT $LN32@draw_circl
  00632	e9 52 05 00 00	 jmp	 $LN1@draw_circl
$LN32@draw_circl:

; 512  : 		if ((y_min = y_centre - radius) > active_int_viewport.y_max) return;

  00637	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  0063a	2b 45 f4	 sub	 eax, DWORD PTR _radius$[ebp]
  0063d	89 45 ec	 mov	 DWORD PTR _y_min$[ebp], eax
  00640	8b 4d ec	 mov	 ecx, DWORD PTR _y_min$[ebp]
  00643	3b 0d 0c 00 00
	00		 cmp	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00649	7e 05		 jle	 SHORT $LN33@draw_circl
  0064b	e9 39 05 00 00	 jmp	 $LN1@draw_circl
$LN33@draw_circl:

; 513  : 		if ((x_max = x_centre + radius) < active_int_viewport.x_min) return;

  00650	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  00653	03 45 f4	 add	 eax, DWORD PTR _radius$[ebp]
  00656	89 45 e8	 mov	 DWORD PTR _x_max$[ebp], eax
  00659	8b 4d e8	 mov	 ecx, DWORD PTR _x_max$[ebp]
  0065c	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00662	7d 05		 jge	 SHORT $LN34@draw_circl
  00664	e9 20 05 00 00	 jmp	 $LN1@draw_circl
$LN34@draw_circl:

; 514  : 		if ((y_max = y_centre + radius) < active_int_viewport.y_min) return;

  00669	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  0066c	03 45 f4	 add	 eax, DWORD PTR _radius$[ebp]
  0066f	89 45 e4	 mov	 DWORD PTR _y_max$[ebp], eax
  00672	8b 4d e4	 mov	 ecx, DWORD PTR _y_max$[ebp]
  00675	3b 0d 04 00 00
	00		 cmp	 ecx, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  0067b	7d 05		 jge	 SHORT $LN35@draw_circl
  0067d	e9 07 05 00 00	 jmp	 $LN1@draw_circl
$LN35@draw_circl:

; 515  : 
; 516  : 		//
; 517  : 		// get screen values
; 518  : 		//
; 519  : 
; 520  : 		col = colour.colour;

  00682	8b 45 14	 mov	 eax, DWORD PTR _colour$[ebp]
  00685	89 45 88	 mov	 DWORD PTR _col$17[ebp], eax

; 521  : 
; 522  : 		screen_data = get_screen_data (active_screen);

  00688	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0068d	50		 push	 eax
  0068e	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  00693	89 45 d0	 mov	 DWORD PTR _screen_data$[ebp], eax

; 523  : 		screen_pitch = get_screen_pitch (active_screen);

  00696	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0069b	50		 push	 eax
  0069c	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  006a1	89 45 e0	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 524  : 
; 525  : 		//
; 526  : 		// draw circle
; 527  : 		//
; 528  : 
; 529  : 		x_offset = 0;

  006a4	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _x_offset$[ebp], 0

; 530  : 
; 531  : 		y_offset = radius;

  006ab	8b 45 f4	 mov	 eax, DWORD PTR _radius$[ebp]
  006ae	89 45 d8	 mov	 DWORD PTR _y_offset$[ebp], eax

; 532  : 
; 533  : 		decision = 3 - (radius << 1);

  006b1	8b 45 f4	 mov	 eax, DWORD PTR _radius$[ebp]
  006b4	d1 e0		 shl	 eax, 1
  006b6	b9 03 00 00 00	 mov	 ecx, 3
  006bb	2b c8		 sub	 ecx, eax
  006bd	89 4d d4	 mov	 DWORD PTR _decision$[ebp], ecx

; 534  : 
; 535  : 		if
; 536  : 		(
; 537  : 			(x_min >= active_int_viewport.x_min) &&
; 538  : 			(y_min >= active_int_viewport.y_min) &&
; 539  : 			(x_max <= active_int_viewport.x_max) &&

  006c0	8b 45 f0	 mov	 eax, DWORD PTR _x_min$[ebp]
  006c3	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  006c9	0f 8c 42 01 00
	00		 jl	 $LN36@draw_circl
  006cf	8b 45 ec	 mov	 eax, DWORD PTR _y_min$[ebp]
  006d2	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  006d8	0f 8c 33 01 00
	00		 jl	 $LN36@draw_circl
  006de	8b 45 e8	 mov	 eax, DWORD PTR _x_max$[ebp]
  006e1	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  006e7	0f 8f 24 01 00
	00		 jg	 $LN36@draw_circl
  006ed	8b 45 e4	 mov	 eax, DWORD PTR _y_max$[ebp]
  006f0	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  006f6	0f 8f 15 01 00
	00		 jg	 $LN36@draw_circl
$LN6@draw_circl:

; 540  : 			(y_max <= active_int_viewport.y_max)
; 541  : 		)
; 542  : 		{
; 543  : 			//
; 544  : 			// draw unclipped circle
; 545  : 			//
; 546  : 
; 547  : 			while (x_offset <= y_offset)

  006fc	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  006ff	3b 45 d8	 cmp	 eax, DWORD PTR _y_offset$[ebp]
  00702	0f 8f 04 01 00
	00		 jg	 $LN7@draw_circl

; 548  : 			{
; 549  : 				fast_set_32bit_pixel (x_centre + x_offset, y_centre + y_offset, col);

  00708	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  0070b	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  0070e	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00712	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00715	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  00718	03 4d dc	 add	 ecx, DWORD PTR _x_offset$[ebp]
  0071b	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  0071e	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 550  : 				fast_set_32bit_pixel (x_centre + x_offset, y_centre - y_offset, col);

  00721	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00724	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00727	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  0072b	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  0072e	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  00731	03 4d dc	 add	 ecx, DWORD PTR _x_offset$[ebp]
  00734	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  00737	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 551  : 				fast_set_32bit_pixel (x_centre - x_offset, y_centre + y_offset, col);

  0073a	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  0073d	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  00740	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00744	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00747	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  0074a	2b 4d dc	 sub	 ecx, DWORD PTR _x_offset$[ebp]
  0074d	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  00750	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 552  : 				fast_set_32bit_pixel (x_centre - x_offset, y_centre - y_offset, col);

  00753	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00756	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00759	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  0075d	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00760	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  00763	2b 4d dc	 sub	 ecx, DWORD PTR _x_offset$[ebp]
  00766	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  00769	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 553  : 				fast_set_32bit_pixel (x_centre + y_offset, y_centre + x_offset, col);

  0076c	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  0076f	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  00772	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00776	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00779	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  0077c	03 4d d8	 add	 ecx, DWORD PTR _y_offset$[ebp]
  0077f	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  00782	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 554  : 				fast_set_32bit_pixel (x_centre + y_offset, y_centre - x_offset, col);

  00785	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00788	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  0078b	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  0078f	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00792	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  00795	03 4d d8	 add	 ecx, DWORD PTR _y_offset$[ebp]
  00798	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  0079b	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 555  : 				fast_set_32bit_pixel (x_centre - y_offset, y_centre + x_offset, col);

  0079e	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  007a1	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  007a4	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  007a8	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  007ab	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  007ae	2b 4d d8	 sub	 ecx, DWORD PTR _y_offset$[ebp]
  007b1	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  007b4	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 556  : 				fast_set_32bit_pixel (x_centre - y_offset, y_centre - x_offset, col);

  007b7	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  007ba	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  007bd	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  007c1	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  007c4	8b 4d fc	 mov	 ecx, DWORD PTR _x_centre$[ebp]
  007c7	2b 4d d8	 sub	 ecx, DWORD PTR _y_offset$[ebp]
  007ca	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  007cd	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 557  : 
; 558  : 				if (decision < 0)

  007d0	83 7d d4 00	 cmp	 DWORD PTR _decision$[ebp], 0
  007d4	7d 0f		 jge	 SHORT $LN38@draw_circl

; 559  : 				{
; 560  : 					decision += (x_offset << 2) + 6;

  007d6	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  007d9	8b 4d d4	 mov	 ecx, DWORD PTR _decision$[ebp]
  007dc	8d 54 81 06	 lea	 edx, DWORD PTR [ecx+eax*4+6]
  007e0	89 55 d4	 mov	 DWORD PTR _decision$[ebp], edx

; 561  : 				}
; 562  : 				else

  007e3	eb 19		 jmp	 SHORT $LN39@draw_circl
$LN38@draw_circl:

; 563  : 				{
; 564  : 					decision += ((x_offset - y_offset) << 2) + 10;

  007e5	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  007e8	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  007eb	8b 4d d4	 mov	 ecx, DWORD PTR _decision$[ebp]
  007ee	8d 54 81 0a	 lea	 edx, DWORD PTR [ecx+eax*4+10]
  007f2	89 55 d4	 mov	 DWORD PTR _decision$[ebp], edx

; 565  : 
; 566  : 					y_offset--;

  007f5	8b 45 d8	 mov	 eax, DWORD PTR _y_offset$[ebp]
  007f8	83 e8 01	 sub	 eax, 1
  007fb	89 45 d8	 mov	 DWORD PTR _y_offset$[ebp], eax
$LN39@draw_circl:

; 567  : 				}
; 568  : 
; 569  : 				x_offset++;

  007fe	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  00801	83 c0 01	 add	 eax, 1
  00804	89 45 dc	 mov	 DWORD PTR _x_offset$[ebp], eax

; 570  : 			}

  00807	e9 f0 fe ff ff	 jmp	 $LN6@draw_circl
$LN7@draw_circl:

; 571  : 		}
; 572  : 		else

  0080c	e9 78 03 00 00	 jmp	 $LN9@draw_circl
$LN36@draw_circl:

; 573  : 		{
; 574  : 			//
; 575  : 			// draw clipped circle
; 576  : 			//
; 577  : 
; 578  : 			while (x_offset <= y_offset)

  00811	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  00814	3b 45 d8	 cmp	 eax, DWORD PTR _y_offset$[ebp]
  00817	0f 8f 6c 03 00
	00		 jg	 $LN9@draw_circl

; 579  : 			{
; 580  : 				fast_set_32bit_clipped_pixel (x_centre + x_offset, y_centre + y_offset, col);

  0081d	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  00820	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  00823	89 45 84	 mov	 DWORD PTR _x$16[ebp], eax
  00826	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00829	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  0082c	89 45 80	 mov	 DWORD PTR _y$15[ebp], eax
  0082f	8b 45 84	 mov	 eax, DWORD PTR _x$16[ebp]
  00832	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00838	7c 34		 jl	 SHORT $LN40@draw_circl
  0083a	8b 45 80	 mov	 eax, DWORD PTR _y$15[ebp]
  0083d	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00843	7c 29		 jl	 SHORT $LN40@draw_circl
  00845	8b 45 84	 mov	 eax, DWORD PTR _x$16[ebp]
  00848	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  0084e	7f 1e		 jg	 SHORT $LN40@draw_circl
  00850	8b 45 80	 mov	 eax, DWORD PTR _y$15[ebp]
  00853	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00859	7f 13		 jg	 SHORT $LN40@draw_circl
  0085b	8b 45 80	 mov	 eax, DWORD PTR _y$15[ebp]
  0085e	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00862	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00865	8b 4d 84	 mov	 ecx, DWORD PTR _x$16[ebp]
  00868	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  0086b	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN40@draw_circl:

; 581  : 				fast_set_32bit_clipped_pixel (x_centre + x_offset, y_centre - y_offset, col);

  0086e	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  00871	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  00874	89 85 7c ff ff
	ff		 mov	 DWORD PTR _x$14[ebp], eax
  0087a	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  0087d	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00880	89 85 78 ff ff
	ff		 mov	 DWORD PTR _y$13[ebp], eax
  00886	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _x$14[ebp]
  0088c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00892	7c 43		 jl	 SHORT $LN41@draw_circl
  00894	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _y$13[ebp]
  0089a	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  008a0	7c 35		 jl	 SHORT $LN41@draw_circl
  008a2	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _x$14[ebp]
  008a8	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  008ae	7f 27		 jg	 SHORT $LN41@draw_circl
  008b0	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _y$13[ebp]
  008b6	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  008bc	7f 19		 jg	 SHORT $LN41@draw_circl
  008be	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _y$13[ebp]
  008c4	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  008c8	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  008cb	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _x$14[ebp]
  008d1	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  008d4	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN41@draw_circl:

; 582  : 				fast_set_32bit_clipped_pixel (x_centre - x_offset, y_centre + y_offset, col);

  008d7	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  008da	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  008dd	89 85 74 ff ff
	ff		 mov	 DWORD PTR _x$12[ebp], eax
  008e3	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  008e6	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  008e9	89 85 70 ff ff
	ff		 mov	 DWORD PTR _y$11[ebp], eax
  008ef	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _x$12[ebp]
  008f5	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  008fb	7c 43		 jl	 SHORT $LN42@draw_circl
  008fd	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _y$11[ebp]
  00903	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00909	7c 35		 jl	 SHORT $LN42@draw_circl
  0090b	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _x$12[ebp]
  00911	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00917	7f 27		 jg	 SHORT $LN42@draw_circl
  00919	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _y$11[ebp]
  0091f	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00925	7f 19		 jg	 SHORT $LN42@draw_circl
  00927	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _y$11[ebp]
  0092d	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00931	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00934	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _x$12[ebp]
  0093a	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  0093d	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN42@draw_circl:

; 583  : 				fast_set_32bit_clipped_pixel (x_centre - x_offset, y_centre - y_offset, col);

  00940	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  00943	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  00946	89 85 6c ff ff
	ff		 mov	 DWORD PTR _x$10[ebp], eax
  0094c	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  0094f	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00952	89 85 68 ff ff
	ff		 mov	 DWORD PTR _y$9[ebp], eax
  00958	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _x$10[ebp]
  0095e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00964	7c 43		 jl	 SHORT $LN43@draw_circl
  00966	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _y$9[ebp]
  0096c	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00972	7c 35		 jl	 SHORT $LN43@draw_circl
  00974	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _x$10[ebp]
  0097a	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00980	7f 27		 jg	 SHORT $LN43@draw_circl
  00982	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _y$9[ebp]
  00988	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  0098e	7f 19		 jg	 SHORT $LN43@draw_circl
  00990	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _y$9[ebp]
  00996	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  0099a	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  0099d	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _x$10[ebp]
  009a3	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  009a6	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN43@draw_circl:

; 584  : 				fast_set_32bit_clipped_pixel (x_centre + y_offset, y_centre + x_offset, col);

  009a9	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  009ac	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  009af	89 85 64 ff ff
	ff		 mov	 DWORD PTR _x$8[ebp], eax
  009b5	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  009b8	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  009bb	89 85 60 ff ff
	ff		 mov	 DWORD PTR _y$7[ebp], eax
  009c1	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _x$8[ebp]
  009c7	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  009cd	7c 43		 jl	 SHORT $LN44@draw_circl
  009cf	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _y$7[ebp]
  009d5	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  009db	7c 35		 jl	 SHORT $LN44@draw_circl
  009dd	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _x$8[ebp]
  009e3	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  009e9	7f 27		 jg	 SHORT $LN44@draw_circl
  009eb	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _y$7[ebp]
  009f1	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  009f7	7f 19		 jg	 SHORT $LN44@draw_circl
  009f9	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _y$7[ebp]
  009ff	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00a03	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00a06	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _x$8[ebp]
  00a0c	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  00a0f	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN44@draw_circl:

; 585  : 				fast_set_32bit_clipped_pixel (x_centre + y_offset, y_centre - x_offset, col);

  00a12	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  00a15	03 45 d8	 add	 eax, DWORD PTR _y_offset$[ebp]
  00a18	89 85 5c ff ff
	ff		 mov	 DWORD PTR _x$6[ebp], eax
  00a1e	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00a21	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  00a24	89 85 58 ff ff
	ff		 mov	 DWORD PTR _y$5[ebp], eax
  00a2a	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _x$6[ebp]
  00a30	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00a36	7c 43		 jl	 SHORT $LN45@draw_circl
  00a38	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _y$5[ebp]
  00a3e	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00a44	7c 35		 jl	 SHORT $LN45@draw_circl
  00a46	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _x$6[ebp]
  00a4c	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00a52	7f 27		 jg	 SHORT $LN45@draw_circl
  00a54	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _y$5[ebp]
  00a5a	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00a60	7f 19		 jg	 SHORT $LN45@draw_circl
  00a62	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _y$5[ebp]
  00a68	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00a6c	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00a6f	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _x$6[ebp]
  00a75	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  00a78	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN45@draw_circl:

; 586  : 				fast_set_32bit_clipped_pixel (x_centre - y_offset, y_centre + x_offset, col);

  00a7b	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  00a7e	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00a81	89 85 54 ff ff
	ff		 mov	 DWORD PTR _x$4[ebp], eax
  00a87	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00a8a	03 45 dc	 add	 eax, DWORD PTR _x_offset$[ebp]
  00a8d	89 85 50 ff ff
	ff		 mov	 DWORD PTR _y$3[ebp], eax
  00a93	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _x$4[ebp]
  00a99	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00a9f	7c 43		 jl	 SHORT $LN46@draw_circl
  00aa1	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _y$3[ebp]
  00aa7	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00aad	7c 35		 jl	 SHORT $LN46@draw_circl
  00aaf	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _x$4[ebp]
  00ab5	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00abb	7f 27		 jg	 SHORT $LN46@draw_circl
  00abd	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _y$3[ebp]
  00ac3	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00ac9	7f 19		 jg	 SHORT $LN46@draw_circl
  00acb	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _y$3[ebp]
  00ad1	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00ad5	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00ad8	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _x$4[ebp]
  00ade	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  00ae1	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN46@draw_circl:

; 587  : 				fast_set_32bit_clipped_pixel (x_centre - y_offset, y_centre - x_offset, col);

  00ae4	8b 45 fc	 mov	 eax, DWORD PTR _x_centre$[ebp]
  00ae7	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00aea	89 85 4c ff ff
	ff		 mov	 DWORD PTR _x$2[ebp], eax
  00af0	8b 45 f8	 mov	 eax, DWORD PTR _y_centre$[ebp]
  00af3	2b 45 dc	 sub	 eax, DWORD PTR _x_offset$[ebp]
  00af6	89 85 48 ff ff
	ff		 mov	 DWORD PTR _y$1[ebp], eax
  00afc	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _x$2[ebp]
  00b02	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A
  00b08	7c 43		 jl	 SHORT $LN47@draw_circl
  00b0a	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _y$1[ebp]
  00b10	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+4
  00b16	7c 35		 jl	 SHORT $LN47@draw_circl
  00b18	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _x$2[ebp]
  00b1e	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+8
  00b24	7f 27		 jg	 SHORT $LN47@draw_circl
  00b26	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _y$1[ebp]
  00b2c	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?active_int_viewport@@3UINT_VIEWPORT@@A+12
  00b32	7f 19		 jg	 SHORT $LN47@draw_circl
  00b34	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _y$1[ebp]
  00b3a	0f af 45 e0	 imul	 eax, DWORD PTR _screen_pitch$[ebp]
  00b3e	03 45 d0	 add	 eax, DWORD PTR _screen_data$[ebp]
  00b41	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _x$2[ebp]
  00b47	8b 55 88	 mov	 edx, DWORD PTR _col$17[ebp]
  00b4a	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN47@draw_circl:

; 588  : 
; 589  : 				if (decision < 0)

  00b4d	83 7d d4 00	 cmp	 DWORD PTR _decision$[ebp], 0
  00b51	7d 0f		 jge	 SHORT $LN48@draw_circl

; 590  : 				{
; 591  : 					decision += (x_offset << 2) + 6;

  00b53	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  00b56	8b 4d d4	 mov	 ecx, DWORD PTR _decision$[ebp]
  00b59	8d 54 81 06	 lea	 edx, DWORD PTR [ecx+eax*4+6]
  00b5d	89 55 d4	 mov	 DWORD PTR _decision$[ebp], edx

; 592  : 				}
; 593  : 				else

  00b60	eb 19		 jmp	 SHORT $LN49@draw_circl
$LN48@draw_circl:

; 594  : 				{
; 595  : 					decision += ((x_offset - y_offset) << 2) + 10;

  00b62	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  00b65	2b 45 d8	 sub	 eax, DWORD PTR _y_offset$[ebp]
  00b68	8b 4d d4	 mov	 ecx, DWORD PTR _decision$[ebp]
  00b6b	8d 54 81 0a	 lea	 edx, DWORD PTR [ecx+eax*4+10]
  00b6f	89 55 d4	 mov	 DWORD PTR _decision$[ebp], edx

; 596  : 
; 597  : 					y_offset--;

  00b72	8b 45 d8	 mov	 eax, DWORD PTR _y_offset$[ebp]
  00b75	83 e8 01	 sub	 eax, 1
  00b78	89 45 d8	 mov	 DWORD PTR _y_offset$[ebp], eax
$LN49@draw_circl:

; 598  : 				}
; 599  : 
; 600  : 				x_offset++;

  00b7b	8b 45 dc	 mov	 eax, DWORD PTR _x_offset$[ebp]
  00b7e	83 c0 01	 add	 eax, 1
  00b81	89 45 dc	 mov	 DWORD PTR _x_offset$[ebp], eax

; 601  : 			}

  00b84	e9 88 fc ff ff	 jmp	 $LN36@draw_circl
$LN9@draw_circl:
$LN1@draw_circl:

; 602  : 		}
; 603  : 	}
; 604  : }

  00b89	5f		 pop	 edi
  00b8a	5e		 pop	 esi
  00b8b	5b		 pop	 ebx
  00b8c	8b e5		 mov	 esp, ebp
  00b8e	5d		 pop	 ebp
  00b8f	c2 10 00	 ret	 16			; 00000010H
?draw_circle@@YGXMMMUREAL_COLOUR@@@Z ENDP		; draw_circle
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sin@@YGMM@Z PROC					; sin, COMDAT

; 284  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 285  : 	return (_CSTD sinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sinf
  00019	83 c4 04	 add	 esp, 4

; 286  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sin@@YGMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?cos@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?cos@@YGMM@Z PROC					; cos, COMDAT

; 77   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 78   : 	return (_CSTD cosf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _cosf
  00019	83 c4 04	 add	 esp, 4

; 79   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?cos@@YGMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 750  :             return (float)sin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 751  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 648  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 649  :             return (float)cos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _cos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 650  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
END
