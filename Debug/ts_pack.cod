; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\special\task\ts_pack.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?overload_task_pack_functions@@YGXXZ		; overload_task_pack_functions
PUBLIC	?__LINE__Var@?0??pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA ; `pack_local_data'::`1'::__LINE__Var
PUBLIC	??_C@_0EK@IBICCAFN@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0CH@MMFDPOBJ@?$CImode?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CImode?5?$DM?5NUM_PACK@ ; `string'
PUBLIC	?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA ; `unpack_local_data'::`1'::__LINE__Var
PUBLIC	??_C@_0BB@JJCMAGGN@?$CBraw?9?$DOtask_kills@	; `string'
PUBLIC	??_C@_0BC@NGBHFOBN@?$CBraw?9?$DOtask_losses@	; `string'
EXTRN	_memset:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?malloc_fast_memory@@YGPAXI@Z:PROC		; malloc_fast_memory
EXTRN	?malloc_heap_memory@@YGPAXI@Z:PROC		; malloc_heap_memory
EXTRN	?pack_entity_type@@YGXW4ENTITY_TYPES@@@Z:PROC	; pack_entity_type
EXTRN	?unpack_entity_type@@YG?AW4ENTITY_TYPES@@XZ:PROC ; unpack_entity_type
EXTRN	?insert_local_entity_into_parents_child_list@@YGXPAUENTITY@@W4LIST_TYPES@@00@Z:PROC ; insert_local_entity_into_parents_child_list
EXTRN	?pack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z:PROC ; pack_list_root
EXTRN	?unpack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z:PROC ; unpack_list_root
EXTRN	?pack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z:PROC ; pack_list_link
EXTRN	?unpack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z:PROC ; unpack_list_link
EXTRN	?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z:PROC ; pack_float_value
EXTRN	?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z:PROC ; unpack_float_value
EXTRN	?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z:PROC ; pack_int_value
EXTRN	?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z:PROC ; unpack_int_value
EXTRN	?pack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z:PROC ; pack_vec3d
EXTRN	?unpack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z:PROC ; unpack_vec3d
EXTRN	?get_free_entity@@YGPAUENTITY@@H@Z:PROC		; get_free_entity
EXTRN	?unpack_entity_safe_index@@YGHXZ:PROC		; unpack_entity_safe_index
EXTRN	?pack_entity_safe_ptr@@YGXPAUENTITY@@@Z:PROC	; pack_entity_safe_ptr
EXTRN	?unpack_entity_safe_ptr@@YGPAUENTITY@@XZ:PROC	; unpack_entity_safe_ptr
EXTRN	?get_local_task_list_type@@YG?AW4LIST_TYPES@@PAUENTITY@@@Z:PROC ; get_local_task_list_type
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?fn_pack_local_entity_data@@3PAP6GXPAUENTITY@@W4PACK_MODES@@@ZA:BYTE ; fn_pack_local_entity_data
EXTRN	?fn_unpack_local_entity_data@@3PAP6GXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@ZA:BYTE ; fn_unpack_local_entity_data
EXTRN	?update_entity@@3PAUENTITY@@A:DWORD		; update_entity
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_0BC@NGBHFOBN@?$CBraw?9?$DOtask_losses@
CONST	SEGMENT
??_C@_0BC@NGBHFOBN@?$CBraw?9?$DOtask_losses@ DB '!raw->task_losses', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JJCMAGGN@?$CBraw?9?$DOtask_kills@
CONST	SEGMENT
??_C@_0BB@JJCMAGGN@?$CBraw?9?$DOtask_kills@ DB '!raw->task_kills', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA DD 0277H ; `unpack_local_data'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CH@MMFDPOBJ@?$CImode?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CImode?5?$DM?5NUM_PACK@
CONST	SEGMENT
??_C@_0CH@MMFDPOBJ@?$CImode?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CImode?5?$DM?5NUM_PACK@ DB '('
	DB	'mode >= 0) && (mode < NUM_PACK_MODES)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@IBICCAFN@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EK@IBICCAFN@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\special\task\ts_pack.'
	DB	'c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA DD 050H ; `pack_local_data'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\task\ts_pack.c
;	COMDAT ?unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z
_TEXT	SEGMENT
tv855 = -108						; size = 4
tv846 = -108						; size = 4
tv836 = -108						; size = 4
tv826 = -108						; size = 4
tv816 = -108						; size = 4
tv807 = -108						; size = 4
tv797 = -108						; size = 4
tv788 = -108						; size = 4
tv535 = -108						; size = 4
tv496 = -108						; size = 4
tv487 = -108						; size = 4
tv477 = -108						; size = 4
tv467 = -108						; size = 4
tv457 = -108						; size = 4
tv447 = -108						; size = 4
tv437 = -108						; size = 4
tv428 = -108						; size = 4
tv418 = -108						; size = 4
tv409 = -108						; size = 4
tv399 = -108						; size = 4
tv390 = -108						; size = 4
tv129 = -108						; size = 4
tv70 = -108						; size = 4
_kill$1 = -40						; size = 4
_last_kill$2 = -36					; size = 4
_raw$3 = -32						; size = 4
_index$4 = -28						; size = 4
_loop$5 = -24						; size = 4
_kill$6 = -20						; size = 4
_last_kill$7 = -16					; size = 4
_raw$8 = -12						; size = 4
_index$9 = -8						; size = 4
_loop$10 = -4						; size = 4
_en$ = 8						; size = 4
_type$ = 12						; size = 4
_mode$ = 16						; size = 4
?unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z PROC ; unpack_local_data, COMDAT

; 631  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 632  : 	ASSERT ((mode >= 0) && (mode < NUM_PACK_MODES));

  00009	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN37@unpack_loc
  0000f	83 7d 10 04	 cmp	 DWORD PTR _mode$[ebp], 4
  00013	7c 18		 jl	 SHORT $LN36@unpack_loc
$LN37@unpack_loc:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA
  0001a	83 c0 01	 add	 eax, 1
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@IBICCAFN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MMFDPOBJ@?$CImode?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CImode?5?$DM?5NUM_PACK@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN36@unpack_loc:

; 633  : 
; 634  : 	switch (mode)

  0002d	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  00030	89 45 94	 mov	 DWORD PTR tv70[ebp], eax
  00033	83 7d 94 00	 cmp	 DWORD PTR tv70[ebp], 0
  00037	74 0f		 je	 SHORT $LN38@unpack_loc
  00039	83 7d 94 01	 cmp	 DWORD PTR tv70[ebp], 1
  0003d	0f 84 6e 08 00
	00		 je	 $LN51@unpack_loc
  00043	e9 de 0f 00 00	 jmp	 $LN2@unpack_loc
$LN38@unpack_loc:

; 635  : 	{
; 636  : 		////////////////////////////////////////
; 637  : 		case PACK_MODE_SERVER_SESSION:
; 638  : 		////////////////////////////////////////
; 639  : 		{
; 640  : 			unsigned int
; 641  : 				loop;
; 642  : 
; 643  : 			int
; 644  : 				index;
; 645  : 
; 646  : 			task
; 647  : 				*raw;
; 648  : 
; 649  : 			//
; 650  : 			// create entity
; 651  : 			//
; 652  : 
; 653  : 			index = unpack_entity_safe_index ();

  00048	e8 00 00 00 00	 call	 ?unpack_entity_safe_index@@YGHXZ ; unpack_entity_safe_index
  0004d	89 45 f8	 mov	 DWORD PTR _index$9[ebp], eax

; 654  : 
; 655  : 			en = get_free_entity (index);

  00050	8b 45 f8	 mov	 eax, DWORD PTR _index$9[ebp]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ?get_free_entity@@YGPAUENTITY@@H@Z ; get_free_entity
  00059	89 45 08	 mov	 DWORD PTR _en$[ebp], eax

; 656  : 
; 657  : 			set_local_entity_type (en, type);

  0005c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0005f	8b 4d 0c	 mov	 ecx, DWORD PTR _type$[ebp]
  00062	89 08		 mov	 DWORD PTR [eax], ecx

; 658  : 
; 659  : 			raw = (task *) malloc_fast_mem (sizeof (task));

  00064	68 ac 00 00 00	 push	 172			; 000000acH
  00069	e8 00 00 00 00	 call	 ?malloc_fast_memory@@YGPAXI@Z ; malloc_fast_memory
  0006e	89 45 f4	 mov	 DWORD PTR _raw$8[ebp], eax

; 660  : 
; 661  : 			set_local_entity_data (en, raw);

  00071	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00074	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  00077	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 662  : 
; 663  : 			memset (raw, 0, sizeof (task));

  0007a	68 ac 00 00 00	 push	 172			; 000000acH
  0007f	6a 00		 push	 0
  00081	8b 45 f4	 mov	 eax, DWORD PTR _raw$8[ebp]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 _memset
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 664  : 
; 665  : 			//
; 666  : 			// unpack data (in exactly the same order as the data was packed)
; 667  : 			//
; 668  : 
; 669  : 			raw->sub_type = unpack_int_value (en, INT_TYPE_ENTITY_SUB_TYPE);

  0008d	6a 34		 push	 52			; 00000034H
  0008f	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00098	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  0009b	89 01		 mov	 DWORD PTR [ecx], eax

; 670  : 
; 671  : 			raw->task_state = (task_state_types) unpack_int_value (en, INT_TYPE_TASK_STATE);

  0009d	68 e3 00 00 00	 push	 227			; 000000e3H
  000a2	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  000ab	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  000ae	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 672  : 
; 673  : 			unpack_vec3d (en, VEC3D_TYPE_POSITION, &raw->position);

  000b1	8b 45 f4	 mov	 eax, DWORD PTR _raw$8[ebp]
  000b4	83 c0 08	 add	 eax, 8
  000b7	50		 push	 eax
  000b8	6a 08		 push	 8
  000ba	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 ?unpack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; unpack_vec3d

; 674  : 
; 675  : 			raw->route_length = unpack_int_value (en, INT_TYPE_ROUTE_LENGTH);

  000c3	68 b3 00 00 00	 push	 179			; 000000b3H
  000c8	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  000d1	89 45 94	 mov	 DWORD PTR tv129[ebp], eax
  000d4	8b 4d 94	 mov	 ecx, DWORD PTR tv129[ebp]
  000d7	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  000dd	c1 e1 10	 shl	 ecx, 16			; 00000010H
  000e0	8b 55 f4	 mov	 edx, DWORD PTR _raw$8[ebp]
  000e3	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  000e9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000ee	0b c1		 or	 eax, ecx
  000f0	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  000f3	89 81 a4 00 00
	00		 mov	 DWORD PTR [ecx+164], eax

; 676  : 
; 677  : 			if (raw->route_length)

  000f9	8b 45 f4	 mov	 eax, DWORD PTR _raw$8[ebp]
  000fc	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00102	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00105	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0010b	74 62		 je	 SHORT $LN5@unpack_loc

; 678  : 			{
; 679  : 	
; 680  : 				raw->route_nodes = (vec3d *) malloc_heap_mem (sizeof (vec3d) * (raw->route_length));

  0010d	8b 45 f4	 mov	 eax, DWORD PTR _raw$8[ebp]
  00110	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00116	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00119	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0011f	6b d1 0c	 imul	 edx, ecx, 12
  00122	52		 push	 edx
  00123	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  00128	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  0012b	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 681  : 	
; 682  : 				for (loop = 0; loop < raw->route_length; loop ++)

  0012e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _loop$10[ebp], 0
  00135	eb 09		 jmp	 SHORT $LN6@unpack_loc
$LN4@unpack_loc:
  00137	8b 45 fc	 mov	 eax, DWORD PTR _loop$10[ebp]
  0013a	83 c0 01	 add	 eax, 1
  0013d	89 45 fc	 mov	 DWORD PTR _loop$10[ebp], eax
$LN6@unpack_loc:
  00140	8b 45 f4	 mov	 eax, DWORD PTR _raw$8[ebp]
  00143	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00149	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0014c	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00152	39 4d fc	 cmp	 DWORD PTR _loop$10[ebp], ecx
  00155	73 18		 jae	 SHORT $LN5@unpack_loc

; 683  : 				{
; 684  : 
; 685  : 					unpack_vec3d (en, VEC3D_TYPE_POSITION, &raw->route_nodes [loop]);

  00157	6b 45 fc 0c	 imul	 eax, DWORD PTR _loop$10[ebp], 12
  0015b	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  0015e	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  00161	50		 push	 eax
  00162	6a 08		 push	 8
  00164	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00167	52		 push	 edx
  00168	e8 00 00 00 00	 call	 ?unpack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; unpack_vec3d

; 686  : 				}

  0016d	eb c8		 jmp	 SHORT $LN4@unpack_loc
$LN5@unpack_loc:

; 687  : 			}
; 688  : 
; 689  : 			raw->task_user_data = unpack_float_value (en, FLOAT_TYPE_TASK_USER_DATA);

  0016f	68 8c 00 00 00	 push	 140			; 0000008cH
  00174	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00177	50		 push	 eax
  00178	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  0017d	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  00180	d9 59 18	 fstp	 DWORD PTR [ecx+24]

; 690  : 
; 691  : 			raw->task_priority = unpack_float_value (en, FLOAT_TYPE_TASK_PRIORITY);

  00183	68 8a 00 00 00	 push	 138			; 0000008aH
  00188	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0018b	50		 push	 eax
  0018c	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  00191	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  00194	d9 59 1c	 fstp	 DWORD PTR [ecx+28]

; 692  : 
; 693  : 			raw->rating = unpack_float_value (en, FLOAT_TYPE_RATING);

  00197	6a 6c		 push	 108			; 0000006cH
  00199	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0019c	50		 push	 eax
  0019d	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  001a2	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  001a5	d9 59 20	 fstp	 DWORD PTR [ecx+32]

; 694  : 
; 695  : 			raw->start_time = unpack_float_value (en, FLOAT_TYPE_START_TIME);

  001a8	6a 7d		 push	 125			; 0000007dH
  001aa	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  001ad	50		 push	 eax
  001ae	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  001b3	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  001b6	d9 59 24	 fstp	 DWORD PTR [ecx+36]

; 696  : 
; 697  : 			raw->stop_timer = unpack_float_value (en, FLOAT_TYPE_STOP_TIMER);

  001b9	6a 7e		 push	 126			; 0000007eH
  001bb	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  001be	50		 push	 eax
  001bf	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  001c4	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  001c7	d9 59 28	 fstp	 DWORD PTR [ecx+40]

; 698  : 
; 699  : 			raw->expire_timer = unpack_float_value (en, FLOAT_TYPE_EXPIRE_TIMER);

  001ca	6a 25		 push	 37			; 00000025H
  001cc	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  001cf	50		 push	 eax
  001d0	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  001d5	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  001d8	d9 59 2c	 fstp	 DWORD PTR [ecx+44]

; 700  : 
; 701  : 			raw->return_keysite = unpack_entity_safe_ptr ();

  001db	e8 00 00 00 00	 call	 ?unpack_entity_safe_ptr@@YGPAUENTITY@@XZ ; unpack_entity_safe_ptr
  001e0	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  001e3	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 702  : 
; 703  : 			if (raw->route_length)

  001e6	8b 45 f4	 mov	 eax, DWORD PTR _raw$8[ebp]
  001e9	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  001ef	c1 e9 10	 shr	 ecx, 16			; 00000010H
  001f2	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  001f8	0f 84 4a 01 00
	00		 je	 $LN14@unpack_loc

; 704  : 			{
; 705  : 
; 706  : 				raw->route_dependents = (entity **) malloc_heap_mem (sizeof (entity *) * raw->route_length);

  001fe	8b 45 f4	 mov	 eax, DWORD PTR _raw$8[ebp]
  00201	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00207	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0020a	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00210	c1 e1 02	 shl	 ecx, 2
  00213	51		 push	 ecx
  00214	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  00219	8b 55 f4	 mov	 edx, DWORD PTR _raw$8[ebp]
  0021c	89 42 34	 mov	 DWORD PTR [edx+52], eax

; 707  : 	
; 708  : 				for (loop = 0; loop < raw->route_length; loop ++)

  0021f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _loop$10[ebp], 0
  00226	eb 09		 jmp	 SHORT $LN9@unpack_loc
$LN7@unpack_loc:
  00228	8b 45 fc	 mov	 eax, DWORD PTR _loop$10[ebp]
  0022b	83 c0 01	 add	 eax, 1
  0022e	89 45 fc	 mov	 DWORD PTR _loop$10[ebp], eax
$LN9@unpack_loc:
  00231	8b 45 f4	 mov	 eax, DWORD PTR _raw$8[ebp]
  00234	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0023a	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0023d	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00243	39 4d fc	 cmp	 DWORD PTR _loop$10[ebp], ecx
  00246	73 37		 jae	 SHORT $LN8@unpack_loc

; 709  : 				{
; 710  : 
; 711  : 					if (unpack_int_value (en, INT_TYPE_VALID))

  00248	68 ef 00 00 00	 push	 239			; 000000efH
  0024d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00250	50		 push	 eax
  00251	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00256	85 c0		 test	 eax, eax
  00258	74 13		 je	 SHORT $LN41@unpack_loc

; 712  : 					{
; 713  : 	
; 714  : 						raw->route_dependents [loop] = unpack_entity_safe_ptr ();

  0025a	e8 00 00 00 00	 call	 ?unpack_entity_safe_ptr@@YGPAUENTITY@@XZ ; unpack_entity_safe_ptr
  0025f	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  00262	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00265	8b 4d fc	 mov	 ecx, DWORD PTR _loop$10[ebp]
  00268	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 715  : 					}
; 716  : 					else

  0026b	eb 10		 jmp	 SHORT $LN42@unpack_loc
$LN41@unpack_loc:

; 717  : 					{
; 718  : 
; 719  : 						raw->route_dependents [loop] = NULL;

  0026d	8b 45 f4	 mov	 eax, DWORD PTR _raw$8[ebp]
  00270	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00273	8b 55 fc	 mov	 edx, DWORD PTR _loop$10[ebp]
  00276	c7 04 91 00 00
	00 00		 mov	 DWORD PTR [ecx+edx*4], 0
$LN42@unpack_loc:

; 720  : 					}
; 721  : 				}

  0027d	eb a9		 jmp	 SHORT $LN7@unpack_loc
$LN8@unpack_loc:

; 722  : 
; 723  : 				raw->route_formation_types = (formation_types *) malloc_heap_mem (sizeof (formation_types) * raw->route_length);

  0027f	8b 45 f4	 mov	 eax, DWORD PTR _raw$8[ebp]
  00282	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00288	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0028b	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00291	c1 e1 02	 shl	 ecx, 2
  00294	51		 push	 ecx
  00295	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  0029a	8b 55 f4	 mov	 edx, DWORD PTR _raw$8[ebp]
  0029d	89 42 38	 mov	 DWORD PTR [edx+56], eax

; 724  : 	
; 725  : 				for (loop = 0; loop < raw->route_length; loop ++)

  002a0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _loop$10[ebp], 0
  002a7	eb 09		 jmp	 SHORT $LN12@unpack_loc
$LN10@unpack_loc:
  002a9	8b 45 fc	 mov	 eax, DWORD PTR _loop$10[ebp]
  002ac	83 c0 01	 add	 eax, 1
  002af	89 45 fc	 mov	 DWORD PTR _loop$10[ebp], eax
$LN12@unpack_loc:
  002b2	8b 45 f4	 mov	 eax, DWORD PTR _raw$8[ebp]
  002b5	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  002bb	c1 e9 10	 shr	 ecx, 16			; 00000010H
  002be	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  002c4	39 4d fc	 cmp	 DWORD PTR _loop$10[ebp], ecx
  002c7	73 1c		 jae	 SHORT $LN11@unpack_loc

; 726  : 				{
; 727  : 	
; 728  : 					raw->route_formation_types [loop] = (formation_types) unpack_int_value (en, INT_TYPE_WAYPOINT_FORMATION);

  002c9	68 fe 00 00 00	 push	 254			; 000000feH
  002ce	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  002d1	50		 push	 eax
  002d2	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  002d7	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  002da	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  002dd	8b 4d fc	 mov	 ecx, DWORD PTR _loop$10[ebp]
  002e0	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 729  : 				}

  002e3	eb c4		 jmp	 SHORT $LN10@unpack_loc
$LN11@unpack_loc:

; 730  : 	
; 731  : 				raw->route_waypoint_types = (entity_sub_types *) malloc_heap_mem (sizeof (entity_sub_types) * raw->route_length);

  002e5	8b 45 f4	 mov	 eax, DWORD PTR _raw$8[ebp]
  002e8	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  002ee	c1 e9 10	 shr	 ecx, 16			; 00000010H
  002f1	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  002f7	c1 e1 02	 shl	 ecx, 2
  002fa	51		 push	 ecx
  002fb	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  00300	8b 55 f4	 mov	 edx, DWORD PTR _raw$8[ebp]
  00303	89 42 3c	 mov	 DWORD PTR [edx+60], eax

; 732  : 	
; 733  : 				for (loop = 0; loop < raw->route_length; loop ++)

  00306	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _loop$10[ebp], 0
  0030d	eb 09		 jmp	 SHORT $LN15@unpack_loc
$LN13@unpack_loc:
  0030f	8b 45 fc	 mov	 eax, DWORD PTR _loop$10[ebp]
  00312	83 c0 01	 add	 eax, 1
  00315	89 45 fc	 mov	 DWORD PTR _loop$10[ebp], eax
$LN15@unpack_loc:
  00318	8b 45 f4	 mov	 eax, DWORD PTR _raw$8[ebp]
  0031b	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00321	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00324	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0032a	39 4d fc	 cmp	 DWORD PTR _loop$10[ebp], ecx
  0032d	73 19		 jae	 SHORT $LN14@unpack_loc

; 734  : 				{
; 735  : 	
; 736  : 					raw->route_waypoint_types [loop] = unpack_int_value (en, INT_TYPE_ENTITY_SUB_TYPE);

  0032f	6a 34		 push	 52			; 00000034H
  00331	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00334	50		 push	 eax
  00335	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  0033a	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  0033d	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00340	8b 4d fc	 mov	 ecx, DWORD PTR _loop$10[ebp]
  00343	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 737  : 				}

  00346	eb c7		 jmp	 SHORT $LN13@unpack_loc
$LN14@unpack_loc:

; 738  : 			}
; 739  : 
; 740  : 			/////////////////////////////////////////////////////////////////
; 741  : 			if (unpack_int_value (en, INT_TYPE_VALID))

  00348	68 ef 00 00 00	 push	 239			; 000000efH
  0034d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00350	50		 push	 eax
  00351	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00356	85 c0		 test	 eax, eax
  00358	74 12		 je	 SHORT $LN43@unpack_loc

; 742  : 			{
; 743  : 
; 744  : 				unpack_list_root (en, LIST_TYPE_GUIDE, &raw->guide_root);

  0035a	8b 45 f4	 mov	 eax, DWORD PTR _raw$8[ebp]
  0035d	83 c0 40	 add	 eax, 64			; 00000040H
  00360	50		 push	 eax
  00361	6a 10		 push	 16			; 00000010H
  00363	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00366	51		 push	 ecx
  00367	e8 00 00 00 00	 call	 ?unpack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z ; unpack_list_root
$LN43@unpack_loc:

; 745  : 			}
; 746  : 			/////////////////////////////////////////////////////////////////
; 747  : 
; 748  : 			/////////////////////////////////////////////////////////////////
; 749  : 			if (unpack_int_value (en, INT_TYPE_VALID))

  0036c	68 ef 00 00 00	 push	 239			; 000000efH
  00371	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00374	50		 push	 eax
  00375	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  0037a	85 c0		 test	 eax, eax
  0037c	74 12		 je	 SHORT $LN44@unpack_loc

; 750  : 			{
; 751  : 
; 752  : 				unpack_list_root (en, LIST_TYPE_TASK_DEPENDENT, &raw->task_dependent_root);

  0037e	8b 45 f4	 mov	 eax, DWORD PTR _raw$8[ebp]
  00381	83 c0 48	 add	 eax, 72			; 00000048H
  00384	50		 push	 eax
  00385	6a 27		 push	 39			; 00000027H
  00387	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0038a	51		 push	 ecx
  0038b	e8 00 00 00 00	 call	 ?unpack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z ; unpack_list_root
$LN44@unpack_loc:

; 753  : 			}
; 754  : 			/////////////////////////////////////////////////////////////////
; 755  : 
; 756  : 			/////////////////////////////////////////////////////////////////
; 757  : 			if (unpack_int_value (en, INT_TYPE_VALID))

  00390	68 ef 00 00 00	 push	 239			; 000000efH
  00395	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00398	50		 push	 eax
  00399	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  0039e	85 c0		 test	 eax, eax
  003a0	74 12		 je	 SHORT $LN45@unpack_loc

; 758  : 			{
; 759  : 
; 760  : 				unpack_list_root (en, LIST_TYPE_WAYPOINT, &raw->waypoint_root);

  003a2	8b 45 f4	 mov	 eax, DWORD PTR _raw$8[ebp]
  003a5	83 c0 4c	 add	 eax, 76			; 0000004cH
  003a8	50		 push	 eax
  003a9	6a 2c		 push	 44			; 0000002cH
  003ab	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  003ae	51		 push	 ecx
  003af	e8 00 00 00 00	 call	 ?unpack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z ; unpack_list_root
$LN45@unpack_loc:

; 761  : 			}
; 762  : 			/////////////////////////////////////////////////////////////////
; 763  : 
; 764  : 			// pilot_lock_link
; 765  : 
; 766  : 			/////////////////////////////////////////////////////////////////
; 767  : 			if (unpack_int_value (en, INT_TYPE_VALID))

  003b4	68 ef 00 00 00	 push	 239			; 000000efH
  003b9	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  003bc	50		 push	 eax
  003bd	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  003c2	85 c0		 test	 eax, eax
  003c4	74 12		 je	 SHORT $LN46@unpack_loc

; 768  : 			{
; 769  : 
; 770  : 				unpack_list_link (en, LIST_TYPE_SECTOR_TASK, &raw->sector_task_link);

  003c6	8b 45 f4	 mov	 eax, DWORD PTR _raw$8[ebp]
  003c9	83 c0 5c	 add	 eax, 92			; 0000005cH
  003cc	50		 push	 eax
  003cd	6a 22		 push	 34			; 00000022H
  003cf	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  003d2	51		 push	 ecx
  003d3	e8 00 00 00 00	 call	 ?unpack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; unpack_list_link
$LN46@unpack_loc:

; 771  : 			}
; 772  : 			/////////////////////////////////////////////////////////////////
; 773  : 
; 774  : 			/////////////////////////////////////////////////////////////////
; 775  : 			if (unpack_int_value (en, INT_TYPE_VALID))

  003d8	68 ef 00 00 00	 push	 239			; 000000efH
  003dd	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  003e0	50		 push	 eax
  003e1	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  003e6	85 c0		 test	 eax, eax
  003e8	74 12		 je	 SHORT $LN47@unpack_loc

; 776  : 			{
; 777  : 
; 778  : 				unpack_list_link (en, LIST_TYPE_TASK_DEPENDENT, &raw->task_dependent_link);

  003ea	8b 45 f4	 mov	 eax, DWORD PTR _raw$8[ebp]
  003ed	83 c0 68	 add	 eax, 104		; 00000068H
  003f0	50		 push	 eax
  003f1	6a 27		 push	 39			; 00000027H
  003f3	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  003f6	51		 push	 ecx
  003f7	e8 00 00 00 00	 call	 ?unpack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; unpack_list_link
$LN47@unpack_loc:

; 779  : 			}
; 780  : 			/////////////////////////////////////////////////////////////////
; 781  : 
; 782  : 			unpack_list_link (en, get_local_task_list_type (en), &raw->task_link);

  003fc	8b 45 f4	 mov	 eax, DWORD PTR _raw$8[ebp]
  003ff	83 c0 74	 add	 eax, 116		; 00000074H
  00402	50		 push	 eax
  00403	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00406	51		 push	 ecx
  00407	e8 00 00 00 00	 call	 ?get_local_task_list_type@@YG?AW4LIST_TYPES@@PAUENTITY@@@Z ; get_local_task_list_type
  0040c	50		 push	 eax
  0040d	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00410	52		 push	 edx
  00411	e8 00 00 00 00	 call	 ?unpack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; unpack_list_link

; 783  : 
; 784  : 			// update_link 
; 785  : 
; 786  : 			raw->task_terminated = (task_terminated_types) unpack_int_value (en, INT_TYPE_TASK_TERMINATED);

  00416	68 e7 00 00 00	 push	 231			; 000000e7H
  0041b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0041e	50		 push	 eax
  0041f	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00424	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  00427	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 787  : 
; 788  : 			/////////////////////////////////////////////////////////////////
; 789  : 			// kill/loss data
; 790  : 			{
; 791  : 
; 792  : 				task_kill_loss_data
; 793  : 					*last_kill,
; 794  : 					*kill;
; 795  : 
; 796  : 				// kills
; 797  : 
; 798  : 				ASSERT (!raw->task_kills);

  0042d	8b 45 f4	 mov	 eax, DWORD PTR _raw$8[ebp]
  00430	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  00437	74 1a		 je	 SHORT $LN48@unpack_loc
  00439	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA
  0043e	05 a7 00 00 00	 add	 eax, 167		; 000000a7H
  00443	50		 push	 eax
  00444	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@IBICCAFN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00449	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JJCMAGGN@?$CBraw?9?$DOtask_kills@
  0044e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN48@unpack_loc:

; 799  : 
; 800  : 				kill = NULL;

  00453	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _kill$6[ebp], 0

; 801  : 
; 802  : 				last_kill = NULL;

  0045a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _last_kill$7[ebp], 0
$LN16@unpack_loc:

; 803  : 
; 804  : 				while (unpack_int_value (en, INT_TYPE_VALID))

  00461	68 ef 00 00 00	 push	 239			; 000000efH
  00466	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00469	50		 push	 eax
  0046a	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  0046f	85 c0		 test	 eax, eax
  00471	0f 84 ac 00 00
	00		 je	 $LN17@unpack_loc

; 805  : 				{
; 806  : 
; 807  : 					kill = (task_kill_loss_data *) malloc_heap_mem (sizeof (task_kill_loss_data));

  00477	6a 2c		 push	 44			; 0000002cH
  00479	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  0047e	89 45 ec	 mov	 DWORD PTR _kill$6[ebp], eax

; 808  : 
; 809  : 					memset (kill, 0, sizeof (task_kill_loss_data));

  00481	6a 2c		 push	 44			; 0000002cH
  00483	6a 00		 push	 0
  00485	8b 45 ec	 mov	 eax, DWORD PTR _kill$6[ebp]
  00488	50		 push	 eax
  00489	e8 00 00 00 00	 call	 _memset
  0048e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 810  : 	
; 811  : 					kill->victim_type = unpack_entity_type ();

  00491	e8 00 00 00 00	 call	 ?unpack_entity_type@@YG?AW4ENTITY_TYPES@@XZ ; unpack_entity_type
  00496	8b 4d ec	 mov	 ecx, DWORD PTR _kill$6[ebp]
  00499	89 01		 mov	 DWORD PTR [ecx], eax

; 812  : 					kill->aggressor_type = unpack_entity_type ();

  0049b	e8 00 00 00 00	 call	 ?unpack_entity_type@@YG?AW4ENTITY_TYPES@@XZ ; unpack_entity_type
  004a0	8b 4d ec	 mov	 ecx, DWORD PTR _kill$6[ebp]
  004a3	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 813  : 	
; 814  : 					kill->victim_sub_type = unpack_int_value (en, INT_TYPE_ENTITY_SUB_TYPE);

  004a6	6a 34		 push	 52			; 00000034H
  004a8	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  004ab	50		 push	 eax
  004ac	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  004b1	8b 4d ec	 mov	 ecx, DWORD PTR _kill$6[ebp]
  004b4	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 815  : 					kill->aggressor_sub_type = unpack_int_value (en, INT_TYPE_ENTITY_SUB_TYPE);

  004b7	6a 34		 push	 52			; 00000034H
  004b9	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  004bc	50		 push	 eax
  004bd	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  004c2	8b 4d ec	 mov	 ecx, DWORD PTR _kill$6[ebp]
  004c5	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 816  : 	
; 817  : 					kill->victim_id = unpack_int_value (en, INT_TYPE_GROUP_MEMBER_NUMBER);

  004c8	6a 4b		 push	 75			; 0000004bH
  004ca	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  004cd	50		 push	 eax
  004ce	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  004d3	8b 4d ec	 mov	 ecx, DWORD PTR _kill$6[ebp]
  004d6	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 818  : 					kill->aggressor_id = unpack_int_value (en, INT_TYPE_GROUP_MEMBER_NUMBER);

  004d9	6a 4b		 push	 75			; 0000004bH
  004db	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  004de	50		 push	 eax
  004df	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  004e4	8b 4d ec	 mov	 ecx, DWORD PTR _kill$6[ebp]
  004e7	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 819  : 	
; 820  : 					kill->time = unpack_float_value (en, FLOAT_TYPE_TIME_OF_DAY);

  004ea	68 8e 00 00 00	 push	 142			; 0000008eH
  004ef	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  004f2	50		 push	 eax
  004f3	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  004f8	8b 4d ec	 mov	 ecx, DWORD PTR _kill$6[ebp]
  004fb	d9 59 20	 fstp	 DWORD PTR [ecx+32]

; 821  : 	
; 822  : 					kill->day = unpack_int_value (en, INT_TYPE_DAY);

  004fe	6a 26		 push	 38			; 00000026H
  00500	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00503	50		 push	 eax
  00504	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00509	8b 4d ec	 mov	 ecx, DWORD PTR _kill$6[ebp]
  0050c	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 823  : 	
; 824  : 					kill->next = last_kill;

  0050f	8b 45 ec	 mov	 eax, DWORD PTR _kill$6[ebp]
  00512	8b 4d f0	 mov	 ecx, DWORD PTR _last_kill$7[ebp]
  00515	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 825  : 					last_kill = kill;

  00518	8b 45 ec	 mov	 eax, DWORD PTR _kill$6[ebp]
  0051b	89 45 f0	 mov	 DWORD PTR _last_kill$7[ebp], eax

; 826  : 				}

  0051e	e9 3e ff ff ff	 jmp	 $LN16@unpack_loc
$LN17@unpack_loc:

; 827  : 
; 828  : 				raw->task_kills = kill;

  00523	8b 45 f4	 mov	 eax, DWORD PTR _raw$8[ebp]
  00526	8b 4d ec	 mov	 ecx, DWORD PTR _kill$6[ebp]
  00529	89 88 90 00 00
	00		 mov	 DWORD PTR [eax+144], ecx

; 829  : 
; 830  : 				// losses
; 831  : 
; 832  : 				ASSERT (!raw->task_losses);

  0052f	8b 45 f4	 mov	 eax, DWORD PTR _raw$8[ebp]
  00532	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [eax+148], 0
  00539	74 1a		 je	 SHORT $LN49@unpack_loc
  0053b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA
  00540	05 c9 00 00 00	 add	 eax, 201		; 000000c9H
  00545	50		 push	 eax
  00546	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@IBICCAFN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0054b	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NGBHFOBN@?$CBraw?9?$DOtask_losses@
  00550	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN49@unpack_loc:

; 833  : 
; 834  : 				kill = NULL;

  00555	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _kill$6[ebp], 0

; 835  : 
; 836  : 				last_kill = NULL;

  0055c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _last_kill$7[ebp], 0
$LN18@unpack_loc:

; 837  : 					
; 838  : 				while (unpack_int_value (en, INT_TYPE_VALID))

  00563	68 ef 00 00 00	 push	 239			; 000000efH
  00568	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0056b	50		 push	 eax
  0056c	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00571	85 c0		 test	 eax, eax
  00573	0f 84 ac 00 00
	00		 je	 $LN19@unpack_loc

; 839  : 				{
; 840  : 
; 841  : 					kill = (task_kill_loss_data *) malloc_heap_mem (sizeof (task_kill_loss_data));

  00579	6a 2c		 push	 44			; 0000002cH
  0057b	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  00580	89 45 ec	 mov	 DWORD PTR _kill$6[ebp], eax

; 842  : 
; 843  : 					memset (kill, 0, sizeof (task_kill_loss_data));

  00583	6a 2c		 push	 44			; 0000002cH
  00585	6a 00		 push	 0
  00587	8b 45 ec	 mov	 eax, DWORD PTR _kill$6[ebp]
  0058a	50		 push	 eax
  0058b	e8 00 00 00 00	 call	 _memset
  00590	83 c4 0c	 add	 esp, 12			; 0000000cH

; 844  : 	
; 845  : 					kill->victim_type = unpack_entity_type ();

  00593	e8 00 00 00 00	 call	 ?unpack_entity_type@@YG?AW4ENTITY_TYPES@@XZ ; unpack_entity_type
  00598	8b 4d ec	 mov	 ecx, DWORD PTR _kill$6[ebp]
  0059b	89 01		 mov	 DWORD PTR [ecx], eax

; 846  : 					kill->aggressor_type = unpack_entity_type ();

  0059d	e8 00 00 00 00	 call	 ?unpack_entity_type@@YG?AW4ENTITY_TYPES@@XZ ; unpack_entity_type
  005a2	8b 4d ec	 mov	 ecx, DWORD PTR _kill$6[ebp]
  005a5	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 847  : 	
; 848  : 					kill->victim_sub_type = unpack_int_value (en, INT_TYPE_ENTITY_SUB_TYPE);

  005a8	6a 34		 push	 52			; 00000034H
  005aa	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  005ad	50		 push	 eax
  005ae	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  005b3	8b 4d ec	 mov	 ecx, DWORD PTR _kill$6[ebp]
  005b6	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 849  : 					kill->aggressor_sub_type = unpack_int_value (en, INT_TYPE_ENTITY_SUB_TYPE);

  005b9	6a 34		 push	 52			; 00000034H
  005bb	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  005be	50		 push	 eax
  005bf	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  005c4	8b 4d ec	 mov	 ecx, DWORD PTR _kill$6[ebp]
  005c7	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 850  : 	
; 851  : 					kill->victim_id = unpack_int_value (en, INT_TYPE_GROUP_MEMBER_NUMBER);

  005ca	6a 4b		 push	 75			; 0000004bH
  005cc	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  005cf	50		 push	 eax
  005d0	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  005d5	8b 4d ec	 mov	 ecx, DWORD PTR _kill$6[ebp]
  005d8	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 852  : 					kill->aggressor_id = unpack_int_value (en, INT_TYPE_GROUP_MEMBER_NUMBER);

  005db	6a 4b		 push	 75			; 0000004bH
  005dd	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  005e0	50		 push	 eax
  005e1	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  005e6	8b 4d ec	 mov	 ecx, DWORD PTR _kill$6[ebp]
  005e9	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 853  : 	
; 854  : 					kill->time = unpack_float_value (en, FLOAT_TYPE_TIME_OF_DAY);

  005ec	68 8e 00 00 00	 push	 142			; 0000008eH
  005f1	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  005f4	50		 push	 eax
  005f5	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  005fa	8b 4d ec	 mov	 ecx, DWORD PTR _kill$6[ebp]
  005fd	d9 59 20	 fstp	 DWORD PTR [ecx+32]

; 855  : 	
; 856  : 					kill->day = unpack_int_value (en, INT_TYPE_DAY);

  00600	6a 26		 push	 38			; 00000026H
  00602	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00605	50		 push	 eax
  00606	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  0060b	8b 4d ec	 mov	 ecx, DWORD PTR _kill$6[ebp]
  0060e	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 857  : 	
; 858  : 					kill->next = last_kill;

  00611	8b 45 ec	 mov	 eax, DWORD PTR _kill$6[ebp]
  00614	8b 4d f0	 mov	 ecx, DWORD PTR _last_kill$7[ebp]
  00617	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 859  : 					last_kill = kill;

  0061a	8b 45 ec	 mov	 eax, DWORD PTR _kill$6[ebp]
  0061d	89 45 f0	 mov	 DWORD PTR _last_kill$7[ebp], eax

; 860  : 				}

  00620	e9 3e ff ff ff	 jmp	 $LN18@unpack_loc
$LN19@unpack_loc:

; 861  : 
; 862  : 				raw->task_losses = kill;

  00625	8b 45 f4	 mov	 eax, DWORD PTR _raw$8[ebp]
  00628	8b 4d ec	 mov	 ecx, DWORD PTR _kill$6[ebp]
  0062b	89 88 94 00 00
	00		 mov	 DWORD PTR [eax+148], ecx

; 863  : 			}
; 864  : 			/////////////////////////////////////////////////////////////////
; 865  : 
; 866  : 			raw->awarded_medals = unpack_int_value (en, INT_TYPE_AWARDED_MEDALS);

  00631	6a 0d		 push	 13			; 0000000dH
  00633	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00636	50		 push	 eax
  00637	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  0063c	89 45 94	 mov	 DWORD PTR tv390[ebp], eax
  0063f	8b 4d 94	 mov	 ecx, DWORD PTR tv390[ebp]
  00642	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00648	8b 55 f4	 mov	 edx, DWORD PTR _raw$8[ebp]
  0064b	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00651	25 00 00 ff ff	 and	 eax, -65536		; ffff0000H
  00656	0b c1		 or	 eax, ecx
  00658	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  0065b	89 81 98 00 00
	00		 mov	 DWORD PTR [ecx+152], eax

; 867  : 
; 868  : 			raw->awarded_promotion = unpack_int_value (en, INT_TYPE_AWARDED_PROMOTION);

  00661	6a 0e		 push	 14			; 0000000eH
  00663	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00666	50		 push	 eax
  00667	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  0066c	89 45 94	 mov	 DWORD PTR tv399[ebp], eax
  0066f	8b 4d 94	 mov	 ecx, DWORD PTR tv399[ebp]
  00672	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00678	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0067b	8b 55 f4	 mov	 edx, DWORD PTR _raw$8[ebp]
  0067e	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00684	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00689	0b c1		 or	 eax, ecx
  0068b	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  0068e	89 81 98 00 00
	00		 mov	 DWORD PTR [ecx+152], eax

; 869  : 
; 870  : 			raw->task_id = unpack_int_value (en, INT_TYPE_TASK_ID);

  00694	68 dc 00 00 00	 push	 220			; 000000dcH
  00699	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0069c	50		 push	 eax
  0069d	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  006a2	89 45 94	 mov	 DWORD PTR tv409[ebp], eax
  006a5	8b 4d 94	 mov	 ecx, DWORD PTR tv409[ebp]
  006a8	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  006ae	8b 55 f4	 mov	 edx, DWORD PTR _raw$8[ebp]
  006b1	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  006b7	25 00 f0 ff ff	 and	 eax, -4096		; fffff000H
  006bc	0b c1		 or	 eax, ecx
  006be	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  006c1	89 81 9c 00 00
	00		 mov	 DWORD PTR [ecx+156], eax

; 871  : 
; 872  : 			raw->task_completed = unpack_int_value (en, INT_TYPE_TASK_COMPLETED);

  006c7	68 d9 00 00 00	 push	 217			; 000000d9H
  006cc	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  006cf	50		 push	 eax
  006d0	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  006d5	89 45 94	 mov	 DWORD PTR tv418[ebp], eax
  006d8	8b 4d 94	 mov	 ecx, DWORD PTR tv418[ebp]
  006db	83 e1 07	 and	 ecx, 7
  006de	c1 e1 0c	 shl	 ecx, 12			; 0000000cH
  006e1	8b 55 f4	 mov	 edx, DWORD PTR _raw$8[ebp]
  006e4	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  006ea	25 ff 8f ff ff	 and	 eax, -28673		; ffff8fffH
  006ef	0b c1		 or	 eax, ecx
  006f1	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  006f4	89 81 9c 00 00
	00		 mov	 DWORD PTR [ecx+156], eax

; 873  : 
; 874  : 			// route_check_sum
; 875  : 
; 876  : 			raw->kills = unpack_int_value (en, INT_TYPE_KILLS);

  006fa	6a 72		 push	 114			; 00000072H
  006fc	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  006ff	50		 push	 eax
  00700	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00705	89 45 94	 mov	 DWORD PTR tv428[ebp], eax
  00708	8b 4d 94	 mov	 ecx, DWORD PTR tv428[ebp]
  0070b	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  00711	8b 55 f4	 mov	 edx, DWORD PTR _raw$8[ebp]
  00714	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  0071a	25 00 f0 ff ff	 and	 eax, -4096		; fffff000H
  0071f	0b c1		 or	 eax, ecx
  00721	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  00724	89 81 a0 00 00
	00		 mov	 DWORD PTR [ecx+160], eax

; 877  : 
; 878  : 			raw->losses = unpack_int_value (en, INT_TYPE_LOSSES);

  0072a	6a 7f		 push	 127			; 0000007fH
  0072c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0072f	50		 push	 eax
  00730	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00735	89 45 94	 mov	 DWORD PTR tv437[ebp], eax
  00738	8b 4d 94	 mov	 ecx, DWORD PTR tv437[ebp]
  0073b	81 e1 ff 03 00
	00		 and	 ecx, 1023		; 000003ffH
  00741	c1 e1 0c	 shl	 ecx, 12			; 0000000cH
  00744	8b 55 f4	 mov	 edx, DWORD PTR _raw$8[ebp]
  00747	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  0074d	25 ff 0f c0 ff	 and	 eax, -4190209		; ffc00fffH
  00752	0b c1		 or	 eax, ecx
  00754	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  00757	89 81 a0 00 00
	00		 mov	 DWORD PTR [ecx+160], eax

; 879  : 
; 880  : 			raw->player_task = unpack_int_value (en, INT_TYPE_PLAYER_TASK);

  0075d	68 9e 00 00 00	 push	 158			; 0000009eH
  00762	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00765	50		 push	 eax
  00766	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  0076b	89 45 94	 mov	 DWORD PTR tv447[ebp], eax
  0076e	8b 4d 94	 mov	 ecx, DWORD PTR tv447[ebp]
  00771	83 e1 01	 and	 ecx, 1
  00774	c1 e1 16	 shl	 ecx, 22			; 00000016H
  00777	8b 55 f4	 mov	 edx, DWORD PTR _raw$8[ebp]
  0077a	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  00780	25 ff ff bf ff	 and	 eax, -4194305		; ffbfffffH
  00785	0b c1		 or	 eax, ecx
  00787	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  0078a	89 81 a0 00 00
	00		 mov	 DWORD PTR [ecx+160], eax

; 881  : 
; 882  : 			raw->movement_type = unpack_int_value (en, INT_TYPE_MOVEMENT_TYPE);

  00790	68 90 00 00 00	 push	 144			; 00000090H
  00795	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00798	50		 push	 eax
  00799	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  0079e	89 45 94	 mov	 DWORD PTR tv457[ebp], eax
  007a1	8b 4d 94	 mov	 ecx, DWORD PTR tv457[ebp]
  007a4	83 e1 07	 and	 ecx, 7
  007a7	c1 e1 17	 shl	 ecx, 23			; 00000017H
  007aa	8b 55 f4	 mov	 edx, DWORD PTR _raw$8[ebp]
  007ad	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  007b3	25 ff ff 7f fc	 and	 eax, -58720257		; fc7fffffH
  007b8	0b c1		 or	 eax, ecx
  007ba	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  007bd	89 81 a0 00 00
	00		 mov	 DWORD PTR [ecx+160], eax

; 883  : 
; 884  : 			raw->difficulty = unpack_int_value (en, INT_TYPE_TASK_DIFFICULTY);

  007c3	68 da 00 00 00	 push	 218			; 000000daH
  007c8	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  007cb	50		 push	 eax
  007cc	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  007d1	89 45 94	 mov	 DWORD PTR tv467[ebp], eax
  007d4	8b 4d 94	 mov	 ecx, DWORD PTR tv467[ebp]
  007d7	83 e1 0f	 and	 ecx, 15			; 0000000fH
  007da	c1 e1 1a	 shl	 ecx, 26			; 0000001aH
  007dd	8b 55 f4	 mov	 edx, DWORD PTR _raw$8[ebp]
  007e0	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  007e6	25 ff ff ff c3	 and	 eax, -1006632961	; c3ffffffH
  007eb	0b c1		 or	 eax, ecx
  007ed	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  007f0	89 81 a0 00 00
	00		 mov	 DWORD PTR [ecx+160], eax

; 885  : 
; 886  : 			raw->critical_task = unpack_int_value (en, INT_TYPE_CRITICAL_TASK);

  007f6	6a 24		 push	 36			; 00000024H
  007f8	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  007fb	50		 push	 eax
  007fc	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00801	89 45 94	 mov	 DWORD PTR tv477[ebp], eax
  00804	8b 4d 94	 mov	 ecx, DWORD PTR tv477[ebp]
  00807	83 e1 01	 and	 ecx, 1
  0080a	c1 e1 1e	 shl	 ecx, 30			; 0000001eH
  0080d	8b 55 f4	 mov	 edx, DWORD PTR _raw$8[ebp]
  00810	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  00816	25 ff ff ff bf	 and	 eax, -1073741825	; bfffffffH
  0081b	0b c1		 or	 eax, ecx
  0081d	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  00820	89 81 a0 00 00
	00		 mov	 DWORD PTR [ecx+160], eax

; 887  : 
; 888  : 			raw->task_score = unpack_int_value (en, INT_TYPE_TASK_SCORE);

  00826	68 e2 00 00 00	 push	 226			; 000000e2H
  0082b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0082e	50		 push	 eax
  0082f	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00834	89 45 94	 mov	 DWORD PTR tv487[ebp], eax
  00837	8b 4d 94	 mov	 ecx, DWORD PTR tv487[ebp]
  0083a	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00840	8b 55 f4	 mov	 edx, DWORD PTR _raw$8[ebp]
  00843	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00849	25 00 00 ff ff	 and	 eax, -65536		; ffff0000H
  0084e	0b c1		 or	 eax, ecx
  00850	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  00853	89 81 a4 00 00
	00		 mov	 DWORD PTR [ecx+164], eax

; 889  : 
; 890  : 			// route_length done above
; 891  : 
; 892  : 			raw->side = unpack_int_value (en, INT_TYPE_SIDE);

  00859	68 bb 00 00 00	 push	 187			; 000000bbH
  0085e	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00861	50		 push	 eax
  00862	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00867	89 45 94	 mov	 DWORD PTR tv496[ebp], eax
  0086a	8b 4d 94	 mov	 ecx, DWORD PTR tv496[ebp]
  0086d	83 e1 03	 and	 ecx, 3
  00870	8b 55 f4	 mov	 edx, DWORD PTR _raw$8[ebp]
  00873	8b 82 a8 00 00
	00		 mov	 eax, DWORD PTR [edx+168]
  00879	83 e0 fc	 and	 eax, -4			; fffffffcH
  0087c	0b c1		 or	 eax, ecx
  0087e	8b 4d f4	 mov	 ecx, DWORD PTR _raw$8[ebp]
  00881	89 81 a8 00 00
	00		 mov	 DWORD PTR [ecx+168], eax

; 893  : 
; 894  : 			//
; 895  : 			// link into system
; 896  : 			//
; 897  : 
; 898  : 			if (unpack_int_value (en, INT_TYPE_VALID))

  00887	68 ef 00 00 00	 push	 239			; 000000efH
  0088c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0088f	50		 push	 eax
  00890	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00895	85 c0		 test	 eax, eax
  00897	74 13		 je	 SHORT $LN50@unpack_loc

; 899  : 			{
; 900  : 				insert_local_entity_into_parents_child_list (en, LIST_TYPE_UPDATE, get_update_entity (), NULL);

  00899	6a 00		 push	 0
  0089b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?update_entity@@3PAUENTITY@@A ; update_entity
  008a0	50		 push	 eax
  008a1	6a 29		 push	 41			; 00000029H
  008a3	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  008a6	51		 push	 ecx
  008a7	e8 00 00 00 00	 call	 ?insert_local_entity_into_parents_child_list@@YGXPAUENTITY@@W4LIST_TYPES@@00@Z ; insert_local_entity_into_parents_child_list
$LN50@unpack_loc:

; 901  : 			}
; 902  : 	
; 903  : 			break;

  008ac	e9 75 07 00 00	 jmp	 $LN2@unpack_loc
$LN51@unpack_loc:

; 904  : 		}
; 905  : 		////////////////////////////////////////
; 906  : 		case PACK_MODE_CLIENT_SESSION:
; 907  : 		////////////////////////////////////////
; 908  : 		{
; 909  : 			unsigned int
; 910  : 				loop;
; 911  : 
; 912  : 			int
; 913  : 				index;
; 914  : 
; 915  : 			task
; 916  : 				*raw;
; 917  : 
; 918  : 			//
; 919  : 			// create entity
; 920  : 			//
; 921  : 
; 922  : 			index = unpack_entity_safe_index ();

  008b1	e8 00 00 00 00	 call	 ?unpack_entity_safe_index@@YGHXZ ; unpack_entity_safe_index
  008b6	89 45 e4	 mov	 DWORD PTR _index$4[ebp], eax

; 923  : 
; 924  : 			en = get_free_entity (index);

  008b9	8b 45 e4	 mov	 eax, DWORD PTR _index$4[ebp]
  008bc	50		 push	 eax
  008bd	e8 00 00 00 00	 call	 ?get_free_entity@@YGPAUENTITY@@H@Z ; get_free_entity
  008c2	89 45 08	 mov	 DWORD PTR _en$[ebp], eax

; 925  : 
; 926  : 			set_local_entity_type (en, type);

  008c5	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  008c8	8b 4d 0c	 mov	 ecx, DWORD PTR _type$[ebp]
  008cb	89 08		 mov	 DWORD PTR [eax], ecx

; 927  : 
; 928  : 			raw = (task *) malloc_fast_mem (sizeof (task));

  008cd	68 ac 00 00 00	 push	 172			; 000000acH
  008d2	e8 00 00 00 00	 call	 ?malloc_fast_memory@@YGPAXI@Z ; malloc_fast_memory
  008d7	89 45 e0	 mov	 DWORD PTR _raw$3[ebp], eax

; 929  : 
; 930  : 			set_local_entity_data (en, raw);

  008da	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  008dd	8b 4d e0	 mov	 ecx, DWORD PTR _raw$3[ebp]
  008e0	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 931  : 
; 932  : 			memset (raw, 0, sizeof (task));

  008e3	68 ac 00 00 00	 push	 172			; 000000acH
  008e8	6a 00		 push	 0
  008ea	8b 45 e0	 mov	 eax, DWORD PTR _raw$3[ebp]
  008ed	50		 push	 eax
  008ee	e8 00 00 00 00	 call	 _memset
  008f3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 933  : 
; 934  : 			//
; 935  : 			// unpack data (in exactly the same order as the data was packed)
; 936  : 			//
; 937  : 
; 938  : 			raw->sub_type = unpack_int_value (en, INT_TYPE_ENTITY_SUB_TYPE);

  008f6	6a 34		 push	 52			; 00000034H
  008f8	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  008fb	50		 push	 eax
  008fc	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00901	8b 4d e0	 mov	 ecx, DWORD PTR _raw$3[ebp]
  00904	89 01		 mov	 DWORD PTR [ecx], eax

; 939  : 
; 940  : 			raw->task_state = (task_state_types) unpack_int_value (en, INT_TYPE_TASK_STATE);

  00906	68 e3 00 00 00	 push	 227			; 000000e3H
  0090b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0090e	50		 push	 eax
  0090f	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00914	8b 4d e0	 mov	 ecx, DWORD PTR _raw$3[ebp]
  00917	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 941  : 
; 942  : 			unpack_vec3d (en, VEC3D_TYPE_POSITION, &raw->position);

  0091a	8b 45 e0	 mov	 eax, DWORD PTR _raw$3[ebp]
  0091d	83 c0 08	 add	 eax, 8
  00920	50		 push	 eax
  00921	6a 08		 push	 8
  00923	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00926	51		 push	 ecx
  00927	e8 00 00 00 00	 call	 ?unpack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; unpack_vec3d

; 943  : 
; 944  : 			raw->route_length = unpack_int_value (en, INT_TYPE_ROUTE_LENGTH);

  0092c	68 b3 00 00 00	 push	 179			; 000000b3H
  00931	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00934	50		 push	 eax
  00935	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  0093a	89 45 94	 mov	 DWORD PTR tv535[ebp], eax
  0093d	8b 4d 94	 mov	 ecx, DWORD PTR tv535[ebp]
  00940	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00946	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00949	8b 55 e0	 mov	 edx, DWORD PTR _raw$3[ebp]
  0094c	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00952	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00957	0b c1		 or	 eax, ecx
  00959	8b 4d e0	 mov	 ecx, DWORD PTR _raw$3[ebp]
  0095c	89 81 a4 00 00
	00		 mov	 DWORD PTR [ecx+164], eax

; 945  : 
; 946  : 			if (raw->route_length > 0)

  00962	8b 45 e0	 mov	 eax, DWORD PTR _raw$3[ebp]
  00965	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0096b	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0096e	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00974	76 62		 jbe	 SHORT $LN21@unpack_loc

; 947  : 			{
; 948  : 	
; 949  : 				raw->route_nodes = (vec3d *) malloc_heap_mem (sizeof (vec3d) * (raw->route_length));

  00976	8b 45 e0	 mov	 eax, DWORD PTR _raw$3[ebp]
  00979	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0097f	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00982	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00988	6b d1 0c	 imul	 edx, ecx, 12
  0098b	52		 push	 edx
  0098c	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  00991	8b 4d e0	 mov	 ecx, DWORD PTR _raw$3[ebp]
  00994	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 950  : 	
; 951  : 				for (loop = 0; loop < raw->route_length; loop ++)

  00997	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _loop$5[ebp], 0
  0099e	eb 09		 jmp	 SHORT $LN22@unpack_loc
$LN20@unpack_loc:
  009a0	8b 45 e8	 mov	 eax, DWORD PTR _loop$5[ebp]
  009a3	83 c0 01	 add	 eax, 1
  009a6	89 45 e8	 mov	 DWORD PTR _loop$5[ebp], eax
$LN22@unpack_loc:
  009a9	8b 45 e0	 mov	 eax, DWORD PTR _raw$3[ebp]
  009ac	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  009b2	c1 e9 10	 shr	 ecx, 16			; 00000010H
  009b5	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  009bb	39 4d e8	 cmp	 DWORD PTR _loop$5[ebp], ecx
  009be	73 18		 jae	 SHORT $LN21@unpack_loc

; 952  : 				{
; 953  : 	
; 954  : 					unpack_vec3d (en, VEC3D_TYPE_POSITION, &raw->route_nodes [loop]);

  009c0	6b 45 e8 0c	 imul	 eax, DWORD PTR _loop$5[ebp], 12
  009c4	8b 4d e0	 mov	 ecx, DWORD PTR _raw$3[ebp]
  009c7	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  009ca	50		 push	 eax
  009cb	6a 08		 push	 8
  009cd	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  009d0	52		 push	 edx
  009d1	e8 00 00 00 00	 call	 ?unpack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; unpack_vec3d

; 955  : 				}

  009d6	eb c8		 jmp	 SHORT $LN20@unpack_loc
$LN21@unpack_loc:

; 956  : 			}
; 957  : 
; 958  : 			raw->task_user_data = unpack_float_value (en, FLOAT_TYPE_TASK_USER_DATA);

  009d8	68 8c 00 00 00	 push	 140			; 0000008cH
  009dd	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  009e0	50		 push	 eax
  009e1	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  009e6	8b 4d e0	 mov	 ecx, DWORD PTR _raw$3[ebp]
  009e9	d9 59 18	 fstp	 DWORD PTR [ecx+24]

; 959  : 
; 960  : 			raw->task_priority = unpack_float_value (en, FLOAT_TYPE_TASK_PRIORITY);

  009ec	68 8a 00 00 00	 push	 138			; 0000008aH
  009f1	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  009f4	50		 push	 eax
  009f5	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  009fa	8b 4d e0	 mov	 ecx, DWORD PTR _raw$3[ebp]
  009fd	d9 59 1c	 fstp	 DWORD PTR [ecx+28]

; 961  : 
; 962  : 			raw->rating = unpack_float_value (en, FLOAT_TYPE_RATING);

  00a00	6a 6c		 push	 108			; 0000006cH
  00a02	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00a05	50		 push	 eax
  00a06	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  00a0b	8b 4d e0	 mov	 ecx, DWORD PTR _raw$3[ebp]
  00a0e	d9 59 20	 fstp	 DWORD PTR [ecx+32]

; 963  : 
; 964  : 			raw->start_time = unpack_float_value (en, FLOAT_TYPE_START_TIME);

  00a11	6a 7d		 push	 125			; 0000007dH
  00a13	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00a16	50		 push	 eax
  00a17	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  00a1c	8b 4d e0	 mov	 ecx, DWORD PTR _raw$3[ebp]
  00a1f	d9 59 24	 fstp	 DWORD PTR [ecx+36]

; 965  : 
; 966  : 			raw->stop_timer = unpack_float_value (en, FLOAT_TYPE_STOP_TIMER);

  00a22	6a 7e		 push	 126			; 0000007eH
  00a24	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00a27	50		 push	 eax
  00a28	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  00a2d	8b 4d e0	 mov	 ecx, DWORD PTR _raw$3[ebp]
  00a30	d9 59 28	 fstp	 DWORD PTR [ecx+40]

; 967  : 
; 968  : 			raw->expire_timer = unpack_float_value (en, FLOAT_TYPE_EXPIRE_TIMER);

  00a33	6a 25		 push	 37			; 00000025H
  00a35	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00a38	50		 push	 eax
  00a39	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  00a3e	8b 4d e0	 mov	 ecx, DWORD PTR _raw$3[ebp]
  00a41	d9 59 2c	 fstp	 DWORD PTR [ecx+44]

; 969  : 
; 970  : 			raw->return_keysite = unpack_entity_safe_ptr ();

  00a44	e8 00 00 00 00	 call	 ?unpack_entity_safe_ptr@@YGPAUENTITY@@XZ ; unpack_entity_safe_ptr
  00a49	8b 4d e0	 mov	 ecx, DWORD PTR _raw$3[ebp]
  00a4c	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 971  : 
; 972  : 			if (raw->route_length)

  00a4f	8b 45 e0	 mov	 eax, DWORD PTR _raw$3[ebp]
  00a52	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00a58	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00a5b	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00a61	0f 84 4a 01 00
	00		 je	 $LN30@unpack_loc

; 973  : 			{
; 974  : 
; 975  : 				raw->route_dependents = (entity **) malloc_heap_mem (sizeof (entity *) * raw->route_length);

  00a67	8b 45 e0	 mov	 eax, DWORD PTR _raw$3[ebp]
  00a6a	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00a70	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00a73	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00a79	c1 e1 02	 shl	 ecx, 2
  00a7c	51		 push	 ecx
  00a7d	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  00a82	8b 55 e0	 mov	 edx, DWORD PTR _raw$3[ebp]
  00a85	89 42 34	 mov	 DWORD PTR [edx+52], eax

; 976  : 	
; 977  : 				for (loop = 0; loop < raw->route_length; loop ++)

  00a88	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _loop$5[ebp], 0
  00a8f	eb 09		 jmp	 SHORT $LN25@unpack_loc
$LN23@unpack_loc:
  00a91	8b 45 e8	 mov	 eax, DWORD PTR _loop$5[ebp]
  00a94	83 c0 01	 add	 eax, 1
  00a97	89 45 e8	 mov	 DWORD PTR _loop$5[ebp], eax
$LN25@unpack_loc:
  00a9a	8b 45 e0	 mov	 eax, DWORD PTR _raw$3[ebp]
  00a9d	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00aa3	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00aa6	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00aac	39 4d e8	 cmp	 DWORD PTR _loop$5[ebp], ecx
  00aaf	73 37		 jae	 SHORT $LN24@unpack_loc

; 978  : 				{
; 979  : 
; 980  : 					if (unpack_int_value (en, INT_TYPE_VALID))

  00ab1	68 ef 00 00 00	 push	 239			; 000000efH
  00ab6	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00ab9	50		 push	 eax
  00aba	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00abf	85 c0		 test	 eax, eax
  00ac1	74 13		 je	 SHORT $LN54@unpack_loc

; 981  : 					{
; 982  : 	
; 983  : 						raw->route_dependents [loop] = unpack_entity_safe_ptr ();

  00ac3	e8 00 00 00 00	 call	 ?unpack_entity_safe_ptr@@YGPAUENTITY@@XZ ; unpack_entity_safe_ptr
  00ac8	8b 4d e0	 mov	 ecx, DWORD PTR _raw$3[ebp]
  00acb	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00ace	8b 4d e8	 mov	 ecx, DWORD PTR _loop$5[ebp]
  00ad1	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 984  : 					}
; 985  : 					else

  00ad4	eb 10		 jmp	 SHORT $LN55@unpack_loc
$LN54@unpack_loc:

; 986  : 					{
; 987  : 
; 988  : 						raw->route_dependents [loop] = NULL;

  00ad6	8b 45 e0	 mov	 eax, DWORD PTR _raw$3[ebp]
  00ad9	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00adc	8b 55 e8	 mov	 edx, DWORD PTR _loop$5[ebp]
  00adf	c7 04 91 00 00
	00 00		 mov	 DWORD PTR [ecx+edx*4], 0
$LN55@unpack_loc:

; 989  : 					}
; 990  : 				}

  00ae6	eb a9		 jmp	 SHORT $LN23@unpack_loc
$LN24@unpack_loc:

; 991  : 
; 992  : 				raw->route_formation_types = (formation_types *) malloc_heap_mem (sizeof (formation_types) * raw->route_length);

  00ae8	8b 45 e0	 mov	 eax, DWORD PTR _raw$3[ebp]
  00aeb	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00af1	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00af4	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00afa	c1 e1 02	 shl	 ecx, 2
  00afd	51		 push	 ecx
  00afe	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  00b03	8b 55 e0	 mov	 edx, DWORD PTR _raw$3[ebp]
  00b06	89 42 38	 mov	 DWORD PTR [edx+56], eax

; 993  : 	
; 994  : 				for (loop = 0; loop < raw->route_length; loop ++)

  00b09	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _loop$5[ebp], 0
  00b10	eb 09		 jmp	 SHORT $LN28@unpack_loc
$LN26@unpack_loc:
  00b12	8b 45 e8	 mov	 eax, DWORD PTR _loop$5[ebp]
  00b15	83 c0 01	 add	 eax, 1
  00b18	89 45 e8	 mov	 DWORD PTR _loop$5[ebp], eax
$LN28@unpack_loc:
  00b1b	8b 45 e0	 mov	 eax, DWORD PTR _raw$3[ebp]
  00b1e	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00b24	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00b27	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00b2d	39 4d e8	 cmp	 DWORD PTR _loop$5[ebp], ecx
  00b30	73 1c		 jae	 SHORT $LN27@unpack_loc

; 995  : 				{
; 996  : 	
; 997  : 					raw->route_formation_types [loop] = (formation_types) unpack_int_value (en, INT_TYPE_WAYPOINT_FORMATION);

  00b32	68 fe 00 00 00	 push	 254			; 000000feH
  00b37	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00b3a	50		 push	 eax
  00b3b	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00b40	8b 4d e0	 mov	 ecx, DWORD PTR _raw$3[ebp]
  00b43	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00b46	8b 4d e8	 mov	 ecx, DWORD PTR _loop$5[ebp]
  00b49	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 998  : 				}

  00b4c	eb c4		 jmp	 SHORT $LN26@unpack_loc
$LN27@unpack_loc:

; 999  : 	
; 1000 : 				raw->route_waypoint_types = (entity_sub_types *) malloc_heap_mem (sizeof (entity_sub_types) * raw->route_length);

  00b4e	8b 45 e0	 mov	 eax, DWORD PTR _raw$3[ebp]
  00b51	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00b57	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00b5a	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00b60	c1 e1 02	 shl	 ecx, 2
  00b63	51		 push	 ecx
  00b64	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  00b69	8b 55 e0	 mov	 edx, DWORD PTR _raw$3[ebp]
  00b6c	89 42 3c	 mov	 DWORD PTR [edx+60], eax

; 1001 : 	
; 1002 : 				for (loop = 0; loop < raw->route_length; loop ++)

  00b6f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _loop$5[ebp], 0
  00b76	eb 09		 jmp	 SHORT $LN31@unpack_loc
$LN29@unpack_loc:
  00b78	8b 45 e8	 mov	 eax, DWORD PTR _loop$5[ebp]
  00b7b	83 c0 01	 add	 eax, 1
  00b7e	89 45 e8	 mov	 DWORD PTR _loop$5[ebp], eax
$LN31@unpack_loc:
  00b81	8b 45 e0	 mov	 eax, DWORD PTR _raw$3[ebp]
  00b84	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00b8a	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00b8d	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00b93	39 4d e8	 cmp	 DWORD PTR _loop$5[ebp], ecx
  00b96	73 19		 jae	 SHORT $LN30@unpack_loc

; 1003 : 				{
; 1004 : 	
; 1005 : 					raw->route_waypoint_types [loop] = unpack_int_value (en, INT_TYPE_ENTITY_SUB_TYPE);

  00b98	6a 34		 push	 52			; 00000034H
  00b9a	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00b9d	50		 push	 eax
  00b9e	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00ba3	8b 4d e0	 mov	 ecx, DWORD PTR _raw$3[ebp]
  00ba6	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00ba9	8b 4d e8	 mov	 ecx, DWORD PTR _loop$5[ebp]
  00bac	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 1006 : 				}

  00baf	eb c7		 jmp	 SHORT $LN29@unpack_loc
$LN30@unpack_loc:

; 1007 : 			}
; 1008 : 
; 1009 : 			/////////////////////////////////////////////////////////////////
; 1010 : 			if (unpack_int_value (en, INT_TYPE_VALID))

  00bb1	68 ef 00 00 00	 push	 239			; 000000efH
  00bb6	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00bb9	50		 push	 eax
  00bba	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00bbf	85 c0		 test	 eax, eax
  00bc1	74 12		 je	 SHORT $LN56@unpack_loc

; 1011 : 			{
; 1012 : 
; 1013 : 				unpack_list_root (en, LIST_TYPE_GUIDE, &raw->guide_root);

  00bc3	8b 45 e0	 mov	 eax, DWORD PTR _raw$3[ebp]
  00bc6	83 c0 40	 add	 eax, 64			; 00000040H
  00bc9	50		 push	 eax
  00bca	6a 10		 push	 16			; 00000010H
  00bcc	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00bcf	51		 push	 ecx
  00bd0	e8 00 00 00 00	 call	 ?unpack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z ; unpack_list_root
$LN56@unpack_loc:

; 1014 : 			}
; 1015 : 			/////////////////////////////////////////////////////////////////
; 1016 : 
; 1017 : 			/////////////////////////////////////////////////////////////////
; 1018 : 			if (unpack_int_value (en, INT_TYPE_VALID))

  00bd5	68 ef 00 00 00	 push	 239			; 000000efH
  00bda	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00bdd	50		 push	 eax
  00bde	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00be3	85 c0		 test	 eax, eax
  00be5	74 12		 je	 SHORT $LN57@unpack_loc

; 1019 : 			{
; 1020 : 
; 1021 : 				unpack_list_root (en, LIST_TYPE_PLAYER_TASK, &raw->player_task_root);

  00be7	8b 45 e0	 mov	 eax, DWORD PTR _raw$3[ebp]
  00bea	83 c0 44	 add	 eax, 68			; 00000044H
  00bed	50		 push	 eax
  00bee	6a 1e		 push	 30			; 0000001eH
  00bf0	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00bf3	51		 push	 ecx
  00bf4	e8 00 00 00 00	 call	 ?unpack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z ; unpack_list_root
$LN57@unpack_loc:

; 1022 : 			}
; 1023 : 			/////////////////////////////////////////////////////////////////
; 1024 : 
; 1025 : 			// task_dependent_root
; 1026 : 
; 1027 : 			/////////////////////////////////////////////////////////////////
; 1028 : 			if (unpack_int_value (en, INT_TYPE_VALID))

  00bf9	68 ef 00 00 00	 push	 239			; 000000efH
  00bfe	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00c01	50		 push	 eax
  00c02	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00c07	85 c0		 test	 eax, eax
  00c09	74 12		 je	 SHORT $LN58@unpack_loc

; 1029 : 			{
; 1030 : 
; 1031 : 				unpack_list_root (en, LIST_TYPE_WAYPOINT, &raw->waypoint_root);

  00c0b	8b 45 e0	 mov	 eax, DWORD PTR _raw$3[ebp]
  00c0e	83 c0 4c	 add	 eax, 76			; 0000004cH
  00c11	50		 push	 eax
  00c12	6a 2c		 push	 44			; 0000002cH
  00c14	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00c17	51		 push	 ecx
  00c18	e8 00 00 00 00	 call	 ?unpack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z ; unpack_list_root
$LN58@unpack_loc:

; 1032 : 			}
; 1033 : 			/////////////////////////////////////////////////////////////////
; 1034 : 
; 1035 : 			unpack_list_link (en, LIST_TYPE_PILOT_LOCK, &raw->pilot_lock_link);

  00c1d	8b 45 e0	 mov	 eax, DWORD PTR _raw$3[ebp]
  00c20	83 c0 50	 add	 eax, 80			; 00000050H
  00c23	50		 push	 eax
  00c24	6a 1d		 push	 29			; 0000001dH
  00c26	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00c29	51		 push	 ecx
  00c2a	e8 00 00 00 00	 call	 ?unpack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; unpack_list_link

; 1036 : 
; 1037 : 			// sector_task_link
; 1038 : 
; 1039 : 			/////////////////////////////////////////////////////////////////
; 1040 : 			if (unpack_int_value (en, INT_TYPE_VALID))

  00c2f	68 ef 00 00 00	 push	 239			; 000000efH
  00c34	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00c37	50		 push	 eax
  00c38	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00c3d	85 c0		 test	 eax, eax
  00c3f	74 12		 je	 SHORT $LN59@unpack_loc

; 1041 : 			{
; 1042 : 
; 1043 : 				unpack_list_link (en, LIST_TYPE_TASK_DEPENDENT, &raw->task_dependent_link);

  00c41	8b 45 e0	 mov	 eax, DWORD PTR _raw$3[ebp]
  00c44	83 c0 68	 add	 eax, 104		; 00000068H
  00c47	50		 push	 eax
  00c48	6a 27		 push	 39			; 00000027H
  00c4a	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00c4d	51		 push	 ecx
  00c4e	e8 00 00 00 00	 call	 ?unpack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; unpack_list_link
$LN59@unpack_loc:

; 1044 : 			}
; 1045 : 			/////////////////////////////////////////////////////////////////
; 1046 : 
; 1047 : 			unpack_list_link (en, get_local_task_list_type (en), &raw->task_link);

  00c53	8b 45 e0	 mov	 eax, DWORD PTR _raw$3[ebp]
  00c56	83 c0 74	 add	 eax, 116		; 00000074H
  00c59	50		 push	 eax
  00c5a	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00c5d	51		 push	 ecx
  00c5e	e8 00 00 00 00	 call	 ?get_local_task_list_type@@YG?AW4LIST_TYPES@@PAUENTITY@@@Z ; get_local_task_list_type
  00c63	50		 push	 eax
  00c64	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00c67	52		 push	 edx
  00c68	e8 00 00 00 00	 call	 ?unpack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; unpack_list_link

; 1048 : 
; 1049 : 			// update_link
; 1050 : 
; 1051 : 			// task_terminated
; 1052 : 
; 1053 : 			/////////////////////////////////////////////////////////////////
; 1054 : 			// kill/loss data
; 1055 : 			{
; 1056 : 
; 1057 : 				task_kill_loss_data
; 1058 : 					*last_kill,
; 1059 : 					*kill;
; 1060 : 
; 1061 : 				// kills
; 1062 : 
; 1063 : 				ASSERT (!raw->task_kills);

  00c6d	8b 45 e0	 mov	 eax, DWORD PTR _raw$3[ebp]
  00c70	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  00c77	74 1a		 je	 SHORT $LN60@unpack_loc
  00c79	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA
  00c7e	05 b0 01 00 00	 add	 eax, 432		; 000001b0H
  00c83	50		 push	 eax
  00c84	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@IBICCAFN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c89	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JJCMAGGN@?$CBraw?9?$DOtask_kills@
  00c8e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN60@unpack_loc:

; 1064 : 
; 1065 : 				kill = NULL;

  00c93	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _kill$1[ebp], 0

; 1066 : 
; 1067 : 				last_kill = NULL;

  00c9a	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _last_kill$2[ebp], 0
$LN32@unpack_loc:

; 1068 : 
; 1069 : 				while (unpack_int_value (en, INT_TYPE_VALID))

  00ca1	68 ef 00 00 00	 push	 239			; 000000efH
  00ca6	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00ca9	50		 push	 eax
  00caa	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00caf	85 c0		 test	 eax, eax
  00cb1	0f 84 ac 00 00
	00		 je	 $LN33@unpack_loc

; 1070 : 				{
; 1071 : 
; 1072 : 					kill = (task_kill_loss_data *) malloc_heap_mem (sizeof (task_kill_loss_data));

  00cb7	6a 2c		 push	 44			; 0000002cH
  00cb9	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  00cbe	89 45 d8	 mov	 DWORD PTR _kill$1[ebp], eax

; 1073 : 
; 1074 : 					memset (kill, 0, sizeof (task_kill_loss_data));

  00cc1	6a 2c		 push	 44			; 0000002cH
  00cc3	6a 00		 push	 0
  00cc5	8b 45 d8	 mov	 eax, DWORD PTR _kill$1[ebp]
  00cc8	50		 push	 eax
  00cc9	e8 00 00 00 00	 call	 _memset
  00cce	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1075 : 	
; 1076 : 					kill->victim_type = unpack_entity_type ();

  00cd1	e8 00 00 00 00	 call	 ?unpack_entity_type@@YG?AW4ENTITY_TYPES@@XZ ; unpack_entity_type
  00cd6	8b 4d d8	 mov	 ecx, DWORD PTR _kill$1[ebp]
  00cd9	89 01		 mov	 DWORD PTR [ecx], eax

; 1077 : 					kill->aggressor_type = unpack_entity_type ();

  00cdb	e8 00 00 00 00	 call	 ?unpack_entity_type@@YG?AW4ENTITY_TYPES@@XZ ; unpack_entity_type
  00ce0	8b 4d d8	 mov	 ecx, DWORD PTR _kill$1[ebp]
  00ce3	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1078 : 	
; 1079 : 					kill->victim_sub_type = unpack_int_value (en, INT_TYPE_ENTITY_SUB_TYPE);

  00ce6	6a 34		 push	 52			; 00000034H
  00ce8	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00ceb	50		 push	 eax
  00cec	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00cf1	8b 4d d8	 mov	 ecx, DWORD PTR _kill$1[ebp]
  00cf4	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1080 : 					kill->aggressor_sub_type = unpack_int_value (en, INT_TYPE_ENTITY_SUB_TYPE);

  00cf7	6a 34		 push	 52			; 00000034H
  00cf9	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00cfc	50		 push	 eax
  00cfd	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00d02	8b 4d d8	 mov	 ecx, DWORD PTR _kill$1[ebp]
  00d05	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 1081 : 	
; 1082 : 					kill->victim_id = unpack_int_value (en, INT_TYPE_GROUP_MEMBER_NUMBER);

  00d08	6a 4b		 push	 75			; 0000004bH
  00d0a	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00d0d	50		 push	 eax
  00d0e	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00d13	8b 4d d8	 mov	 ecx, DWORD PTR _kill$1[ebp]
  00d16	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 1083 : 					kill->aggressor_id = unpack_int_value (en, INT_TYPE_GROUP_MEMBER_NUMBER);

  00d19	6a 4b		 push	 75			; 0000004bH
  00d1b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00d1e	50		 push	 eax
  00d1f	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00d24	8b 4d d8	 mov	 ecx, DWORD PTR _kill$1[ebp]
  00d27	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 1084 : 	
; 1085 : 					kill->time = unpack_float_value (en, FLOAT_TYPE_TIME_OF_DAY);

  00d2a	68 8e 00 00 00	 push	 142			; 0000008eH
  00d2f	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00d32	50		 push	 eax
  00d33	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  00d38	8b 4d d8	 mov	 ecx, DWORD PTR _kill$1[ebp]
  00d3b	d9 59 20	 fstp	 DWORD PTR [ecx+32]

; 1086 : 	
; 1087 : 					kill->day = unpack_int_value (en, INT_TYPE_DAY);

  00d3e	6a 26		 push	 38			; 00000026H
  00d40	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00d43	50		 push	 eax
  00d44	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00d49	8b 4d d8	 mov	 ecx, DWORD PTR _kill$1[ebp]
  00d4c	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 1088 : 	
; 1089 : 					kill->next = last_kill;

  00d4f	8b 45 d8	 mov	 eax, DWORD PTR _kill$1[ebp]
  00d52	8b 4d dc	 mov	 ecx, DWORD PTR _last_kill$2[ebp]
  00d55	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 1090 : 					last_kill = kill;

  00d58	8b 45 d8	 mov	 eax, DWORD PTR _kill$1[ebp]
  00d5b	89 45 dc	 mov	 DWORD PTR _last_kill$2[ebp], eax

; 1091 : 				}

  00d5e	e9 3e ff ff ff	 jmp	 $LN32@unpack_loc
$LN33@unpack_loc:

; 1092 : 
; 1093 : 				raw->task_kills = kill;

  00d63	8b 45 e0	 mov	 eax, DWORD PTR _raw$3[ebp]
  00d66	8b 4d d8	 mov	 ecx, DWORD PTR _kill$1[ebp]
  00d69	89 88 90 00 00
	00		 mov	 DWORD PTR [eax+144], ecx

; 1094 : 
; 1095 : 				// losses
; 1096 : 
; 1097 : 				ASSERT (!raw->task_losses);

  00d6f	8b 45 e0	 mov	 eax, DWORD PTR _raw$3[ebp]
  00d72	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [eax+148], 0
  00d79	74 1a		 je	 SHORT $LN61@unpack_loc
  00d7b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA
  00d80	05 d2 01 00 00	 add	 eax, 466		; 000001d2H
  00d85	50		 push	 eax
  00d86	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@IBICCAFN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d8b	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NGBHFOBN@?$CBraw?9?$DOtask_losses@
  00d90	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN61@unpack_loc:

; 1098 : 
; 1099 : 				kill = NULL;

  00d95	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _kill$1[ebp], 0

; 1100 : 
; 1101 : 				last_kill = NULL;

  00d9c	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _last_kill$2[ebp], 0
$LN34@unpack_loc:

; 1102 : 					
; 1103 : 				while (unpack_int_value (en, INT_TYPE_VALID))

  00da3	68 ef 00 00 00	 push	 239			; 000000efH
  00da8	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00dab	50		 push	 eax
  00dac	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00db1	85 c0		 test	 eax, eax
  00db3	0f 84 ac 00 00
	00		 je	 $LN35@unpack_loc

; 1104 : 				{
; 1105 : 
; 1106 : 					kill = (task_kill_loss_data *) malloc_heap_mem (sizeof (task_kill_loss_data));

  00db9	6a 2c		 push	 44			; 0000002cH
  00dbb	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  00dc0	89 45 d8	 mov	 DWORD PTR _kill$1[ebp], eax

; 1107 : 
; 1108 : 					memset (kill, 0, sizeof (task_kill_loss_data));

  00dc3	6a 2c		 push	 44			; 0000002cH
  00dc5	6a 00		 push	 0
  00dc7	8b 45 d8	 mov	 eax, DWORD PTR _kill$1[ebp]
  00dca	50		 push	 eax
  00dcb	e8 00 00 00 00	 call	 _memset
  00dd0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1109 : 	
; 1110 : 					kill->victim_type = unpack_entity_type ();

  00dd3	e8 00 00 00 00	 call	 ?unpack_entity_type@@YG?AW4ENTITY_TYPES@@XZ ; unpack_entity_type
  00dd8	8b 4d d8	 mov	 ecx, DWORD PTR _kill$1[ebp]
  00ddb	89 01		 mov	 DWORD PTR [ecx], eax

; 1111 : 					kill->aggressor_type = unpack_entity_type ();

  00ddd	e8 00 00 00 00	 call	 ?unpack_entity_type@@YG?AW4ENTITY_TYPES@@XZ ; unpack_entity_type
  00de2	8b 4d d8	 mov	 ecx, DWORD PTR _kill$1[ebp]
  00de5	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1112 : 	
; 1113 : 					kill->victim_sub_type = unpack_int_value (en, INT_TYPE_ENTITY_SUB_TYPE);

  00de8	6a 34		 push	 52			; 00000034H
  00dea	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00ded	50		 push	 eax
  00dee	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00df3	8b 4d d8	 mov	 ecx, DWORD PTR _kill$1[ebp]
  00df6	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1114 : 					kill->aggressor_sub_type = unpack_int_value (en, INT_TYPE_ENTITY_SUB_TYPE);

  00df9	6a 34		 push	 52			; 00000034H
  00dfb	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00dfe	50		 push	 eax
  00dff	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00e04	8b 4d d8	 mov	 ecx, DWORD PTR _kill$1[ebp]
  00e07	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 1115 : 	
; 1116 : 					kill->victim_id = unpack_int_value (en, INT_TYPE_GROUP_MEMBER_NUMBER);

  00e0a	6a 4b		 push	 75			; 0000004bH
  00e0c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00e0f	50		 push	 eax
  00e10	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00e15	8b 4d d8	 mov	 ecx, DWORD PTR _kill$1[ebp]
  00e18	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 1117 : 					kill->aggressor_id = unpack_int_value (en, INT_TYPE_GROUP_MEMBER_NUMBER);

  00e1b	6a 4b		 push	 75			; 0000004bH
  00e1d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00e20	50		 push	 eax
  00e21	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00e26	8b 4d d8	 mov	 ecx, DWORD PTR _kill$1[ebp]
  00e29	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 1118 : 	
; 1119 : 					kill->time = unpack_float_value (en, FLOAT_TYPE_TIME_OF_DAY);

  00e2c	68 8e 00 00 00	 push	 142			; 0000008eH
  00e31	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00e34	50		 push	 eax
  00e35	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  00e3a	8b 4d d8	 mov	 ecx, DWORD PTR _kill$1[ebp]
  00e3d	d9 59 20	 fstp	 DWORD PTR [ecx+32]

; 1120 : 	
; 1121 : 					kill->day = unpack_int_value (en, INT_TYPE_DAY);

  00e40	6a 26		 push	 38			; 00000026H
  00e42	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00e45	50		 push	 eax
  00e46	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00e4b	8b 4d d8	 mov	 ecx, DWORD PTR _kill$1[ebp]
  00e4e	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 1122 : 	
; 1123 : 					kill->next = last_kill;

  00e51	8b 45 d8	 mov	 eax, DWORD PTR _kill$1[ebp]
  00e54	8b 4d dc	 mov	 ecx, DWORD PTR _last_kill$2[ebp]
  00e57	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 1124 : 					last_kill = kill;

  00e5a	8b 45 d8	 mov	 eax, DWORD PTR _kill$1[ebp]
  00e5d	89 45 dc	 mov	 DWORD PTR _last_kill$2[ebp], eax

; 1125 : 				}

  00e60	e9 3e ff ff ff	 jmp	 $LN34@unpack_loc
$LN35@unpack_loc:

; 1126 : 
; 1127 : 				raw->task_losses = kill;

  00e65	8b 45 e0	 mov	 eax, DWORD PTR _raw$3[ebp]
  00e68	8b 4d d8	 mov	 ecx, DWORD PTR _kill$1[ebp]
  00e6b	89 88 94 00 00
	00		 mov	 DWORD PTR [eax+148], ecx

; 1128 : 			}
; 1129 : 			/////////////////////////////////////////////////////////////////
; 1130 : 
; 1131 : 			// awarded medals
; 1132 : 
; 1133 : 			// awarded promotion
; 1134 : 
; 1135 : 			raw->task_id = unpack_int_value (en, INT_TYPE_TASK_ID);

  00e71	68 dc 00 00 00	 push	 220			; 000000dcH
  00e76	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00e79	50		 push	 eax
  00e7a	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00e7f	89 45 94	 mov	 DWORD PTR tv788[ebp], eax
  00e82	8b 4d 94	 mov	 ecx, DWORD PTR tv788[ebp]
  00e85	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  00e8b	8b 55 e0	 mov	 edx, DWORD PTR _raw$3[ebp]
  00e8e	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  00e94	25 00 f0 ff ff	 and	 eax, -4096		; fffff000H
  00e99	0b c1		 or	 eax, ecx
  00e9b	8b 4d e0	 mov	 ecx, DWORD PTR _raw$3[ebp]
  00e9e	89 81 9c 00 00
	00		 mov	 DWORD PTR [ecx+156], eax

; 1136 : 
; 1137 : 			raw->task_completed = unpack_int_value (en, INT_TYPE_TASK_COMPLETED);

  00ea4	68 d9 00 00 00	 push	 217			; 000000d9H
  00ea9	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00eac	50		 push	 eax
  00ead	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00eb2	89 45 94	 mov	 DWORD PTR tv797[ebp], eax
  00eb5	8b 4d 94	 mov	 ecx, DWORD PTR tv797[ebp]
  00eb8	83 e1 07	 and	 ecx, 7
  00ebb	c1 e1 0c	 shl	 ecx, 12			; 0000000cH
  00ebe	8b 55 e0	 mov	 edx, DWORD PTR _raw$3[ebp]
  00ec1	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  00ec7	25 ff 8f ff ff	 and	 eax, -28673		; ffff8fffH
  00ecc	0b c1		 or	 eax, ecx
  00ece	8b 4d e0	 mov	 ecx, DWORD PTR _raw$3[ebp]
  00ed1	89 81 9c 00 00
	00		 mov	 DWORD PTR [ecx+156], eax

; 1138 : 
; 1139 : 			// route_check_sum
; 1140 : 
; 1141 : 			raw->kills = unpack_int_value (en, INT_TYPE_KILLS);

  00ed7	6a 72		 push	 114			; 00000072H
  00ed9	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00edc	50		 push	 eax
  00edd	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00ee2	89 45 94	 mov	 DWORD PTR tv807[ebp], eax
  00ee5	8b 4d 94	 mov	 ecx, DWORD PTR tv807[ebp]
  00ee8	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  00eee	8b 55 e0	 mov	 edx, DWORD PTR _raw$3[ebp]
  00ef1	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  00ef7	25 00 f0 ff ff	 and	 eax, -4096		; fffff000H
  00efc	0b c1		 or	 eax, ecx
  00efe	8b 4d e0	 mov	 ecx, DWORD PTR _raw$3[ebp]
  00f01	89 81 a0 00 00
	00		 mov	 DWORD PTR [ecx+160], eax

; 1142 : 
; 1143 : 			raw->losses = unpack_int_value (en, INT_TYPE_LOSSES);

  00f07	6a 7f		 push	 127			; 0000007fH
  00f09	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00f0c	50		 push	 eax
  00f0d	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00f12	89 45 94	 mov	 DWORD PTR tv816[ebp], eax
  00f15	8b 4d 94	 mov	 ecx, DWORD PTR tv816[ebp]
  00f18	81 e1 ff 03 00
	00		 and	 ecx, 1023		; 000003ffH
  00f1e	c1 e1 0c	 shl	 ecx, 12			; 0000000cH
  00f21	8b 55 e0	 mov	 edx, DWORD PTR _raw$3[ebp]
  00f24	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  00f2a	25 ff 0f c0 ff	 and	 eax, -4190209		; ffc00fffH
  00f2f	0b c1		 or	 eax, ecx
  00f31	8b 4d e0	 mov	 ecx, DWORD PTR _raw$3[ebp]
  00f34	89 81 a0 00 00
	00		 mov	 DWORD PTR [ecx+160], eax

; 1144 : 
; 1145 : 			// player_task
; 1146 : 
; 1147 : 			raw->movement_type = unpack_int_value (en, INT_TYPE_MOVEMENT_TYPE);

  00f3a	68 90 00 00 00	 push	 144			; 00000090H
  00f3f	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00f42	50		 push	 eax
  00f43	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00f48	89 45 94	 mov	 DWORD PTR tv826[ebp], eax
  00f4b	8b 4d 94	 mov	 ecx, DWORD PTR tv826[ebp]
  00f4e	83 e1 07	 and	 ecx, 7
  00f51	c1 e1 17	 shl	 ecx, 23			; 00000017H
  00f54	8b 55 e0	 mov	 edx, DWORD PTR _raw$3[ebp]
  00f57	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  00f5d	25 ff ff 7f fc	 and	 eax, -58720257		; fc7fffffH
  00f62	0b c1		 or	 eax, ecx
  00f64	8b 4d e0	 mov	 ecx, DWORD PTR _raw$3[ebp]
  00f67	89 81 a0 00 00
	00		 mov	 DWORD PTR [ecx+160], eax

; 1148 : 
; 1149 : 			raw->difficulty = unpack_int_value (en, INT_TYPE_TASK_DIFFICULTY);

  00f6d	68 da 00 00 00	 push	 218			; 000000daH
  00f72	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00f75	50		 push	 eax
  00f76	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00f7b	89 45 94	 mov	 DWORD PTR tv836[ebp], eax
  00f7e	8b 4d 94	 mov	 ecx, DWORD PTR tv836[ebp]
  00f81	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00f84	c1 e1 1a	 shl	 ecx, 26			; 0000001aH
  00f87	8b 55 e0	 mov	 edx, DWORD PTR _raw$3[ebp]
  00f8a	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  00f90	25 ff ff ff c3	 and	 eax, -1006632961	; c3ffffffH
  00f95	0b c1		 or	 eax, ecx
  00f97	8b 4d e0	 mov	 ecx, DWORD PTR _raw$3[ebp]
  00f9a	89 81 a0 00 00
	00		 mov	 DWORD PTR [ecx+160], eax

; 1150 : 
; 1151 : 			// critical_task
; 1152 : 
; 1153 : 			raw->task_score = unpack_int_value (en, INT_TYPE_TASK_SCORE);

  00fa0	68 e2 00 00 00	 push	 226			; 000000e2H
  00fa5	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00fa8	50		 push	 eax
  00fa9	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00fae	89 45 94	 mov	 DWORD PTR tv846[ebp], eax
  00fb1	8b 4d 94	 mov	 ecx, DWORD PTR tv846[ebp]
  00fb4	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00fba	8b 55 e0	 mov	 edx, DWORD PTR _raw$3[ebp]
  00fbd	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00fc3	25 00 00 ff ff	 and	 eax, -65536		; ffff0000H
  00fc8	0b c1		 or	 eax, ecx
  00fca	8b 4d e0	 mov	 ecx, DWORD PTR _raw$3[ebp]
  00fcd	89 81 a4 00 00
	00		 mov	 DWORD PTR [ecx+164], eax

; 1154 : 
; 1155 : 			// route_length
; 1156 : 
; 1157 : 			raw->side = unpack_int_value (en, INT_TYPE_SIDE);

  00fd3	68 bb 00 00 00	 push	 187			; 000000bbH
  00fd8	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00fdb	50		 push	 eax
  00fdc	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00fe1	89 45 94	 mov	 DWORD PTR tv855[ebp], eax
  00fe4	8b 4d 94	 mov	 ecx, DWORD PTR tv855[ebp]
  00fe7	83 e1 03	 and	 ecx, 3
  00fea	8b 55 e0	 mov	 edx, DWORD PTR _raw$3[ebp]
  00fed	8b 82 a8 00 00
	00		 mov	 eax, DWORD PTR [edx+168]
  00ff3	83 e0 fc	 and	 eax, -4			; fffffffcH
  00ff6	0b c1		 or	 eax, ecx
  00ff8	8b 4d e0	 mov	 ecx, DWORD PTR _raw$3[ebp]
  00ffb	89 81 a8 00 00
	00		 mov	 DWORD PTR [ecx+168], eax

; 1158 : 
; 1159 : 			//
; 1160 : 			// link into system
; 1161 : 			//
; 1162 : 
; 1163 : 			if (unpack_int_value (en, INT_TYPE_VALID))

  01001	68 ef 00 00 00	 push	 239			; 000000efH
  01006	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  01009	50		 push	 eax
  0100a	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  0100f	85 c0		 test	 eax, eax
  01011	74 13		 je	 SHORT $LN62@unpack_loc

; 1164 : 			{
; 1165 : 				insert_local_entity_into_parents_child_list (en, LIST_TYPE_UPDATE, get_update_entity (), NULL);

  01013	6a 00		 push	 0
  01015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?update_entity@@3PAUENTITY@@A ; update_entity
  0101a	50		 push	 eax
  0101b	6a 29		 push	 41			; 00000029H
  0101d	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  01020	51		 push	 ecx
  01021	e8 00 00 00 00	 call	 ?insert_local_entity_into_parents_child_list@@YGXPAUENTITY@@W4LIST_TYPES@@00@Z ; insert_local_entity_into_parents_child_list
$LN62@unpack_loc:
$LN2@unpack_loc:

; 1166 : 			}
; 1167 : 	
; 1168 : 			break;
; 1169 : 		}
; 1170 : 		////////////////////////////////////////
; 1171 : 		case PACK_MODE_BROWSE_SESSION:
; 1172 : 		////////////////////////////////////////
; 1173 : 		{
; 1174 : 			break;
; 1175 : 		}
; 1176 : 		////////////////////////////////////////
; 1177 : 		case PACK_MODE_UPDATE_ENTITY:
; 1178 : 		////////////////////////////////////////
; 1179 : 		{
; 1180 : 			//
; 1181 : 			// always use access functions to set the data
; 1182 : 			//
; 1183 : 
; 1184 : 			break;
; 1185 : 		}
; 1186 : 	}
; 1187 : }

  01026	5f		 pop	 edi
  01027	5e		 pop	 esi
  01028	5b		 pop	 ebx
  01029	8b e5		 mov	 esp, ebp
  0102b	5d		 pop	 ebp
  0102c	c2 0c 00	 ret	 12			; 0000000cH
?unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z ENDP ; unpack_local_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\task\ts_pack.c
;	COMDAT ?pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z
_TEXT	SEGMENT
tv449 = -92						; size = 4
tv440 = -92						; size = 4
tv82 = -92						; size = 4
tv73 = -92						; size = 4
tv70 = -92						; size = 4
_kill$1 = -24						; size = 4
_raw$2 = -20						; size = 4
_loop$3 = -16						; size = 4
_kill$4 = -12						; size = 4
_raw$5 = -8						; size = 4
_loop$6 = -4						; size = 4
_en$ = 8						; size = 4
_mode$ = 12						; size = 4
?pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z PROC	; pack_local_data, COMDAT

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 81   : 	ASSERT ((mode >= 0) && (mode < NUM_PACK_MODES));

  00009	83 7d 0c 00	 cmp	 DWORD PTR _mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN41@pack_local
  0000f	83 7d 0c 04	 cmp	 DWORD PTR _mode$[ebp], 4
  00013	7c 18		 jl	 SHORT $LN40@pack_local
$LN41@pack_local:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA
  0001a	83 c0 01	 add	 eax, 1
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@IBICCAFN@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MMFDPOBJ@?$CImode?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CImode?5?$DM?5NUM_PACK@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN40@pack_local:

; 82   : 
; 83   : 	switch (mode)

  0002d	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  00030	89 45 a4	 mov	 DWORD PTR tv70[ebp], eax
  00033	83 7d a4 00	 cmp	 DWORD PTR tv70[ebp], 0
  00037	74 0f		 je	 SHORT $LN42@pack_local
  00039	83 7d a4 01	 cmp	 DWORD PTR tv70[ebp], 1
  0003d	0f 84 4b 07 00
	00		 je	 $LN59@pack_local
  00043	e9 d5 0d 00 00	 jmp	 $LN2@pack_local
$LN42@pack_local:

; 84   : 	{
; 85   : 		////////////////////////////////////////
; 86   : 		case PACK_MODE_SERVER_SESSION:
; 87   : 		////////////////////////////////////////
; 88   : 		{
; 89   : 
; 90   : 			unsigned int
; 91   : 				loop;
; 92   : 
; 93   : 			task
; 94   : 				*raw;
; 95   : 
; 96   : 			raw = (task *) get_local_entity_data (en);

  00048	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0004b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004e	89 4d f8	 mov	 DWORD PTR _raw$5[ebp], ecx

; 97   : 
; 98   : 			switch (raw->sub_type)

  00051	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  00054	8b 08		 mov	 ecx, DWORD PTR [eax]
  00056	89 4d a4	 mov	 DWORD PTR tv73[ebp], ecx
  00059	8b 55 a4	 mov	 edx, DWORD PTR tv73[ebp]
  0005c	83 ea 0d	 sub	 edx, 13			; 0000000dH
  0005f	89 55 a4	 mov	 DWORD PTR tv73[ebp], edx
  00062	83 7d a4 0a	 cmp	 DWORD PTR tv73[ebp], 10	; 0000000aH
  00066	77 16		 ja	 SHORT $LN44@pack_local
  00068	8b 45 a4	 mov	 eax, DWORD PTR tv73[ebp]
  0006b	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN81@pack_local[eax]
  00072	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN83@pack_local[ecx*4]
$LN43@pack_local:

; 99   : 			{
; 100  : 
; 101  : 				case ENTITY_SUB_TYPE_TASK_LANDING:
; 102  : 				case ENTITY_SUB_TYPE_TASK_LANDING_HOLDING:
; 103  : 				case ENTITY_SUB_TYPE_TASK_TAKEOFF:
; 104  : 				case ENTITY_SUB_TYPE_TASK_TAKEOFF_HOLDING:
; 105  : 				{
; 106  : 
; 107  : 					return;

  00079	e9 9f 0d 00 00	 jmp	 $LN1@pack_local
$LN44@pack_local:

; 108  : 				}
; 109  : 
; 110  : 				default:
; 111  : 				{
; 112  : 
; 113  : 					break;
; 114  : 				}
; 115  : 			}
; 116  : 
; 117  : 			pack_entity_type (get_local_entity_type (en));

  0007e	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00082	74 0a		 je	 SHORT $LN77@pack_local
  00084	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00087	8b 08		 mov	 ecx, DWORD PTR [eax]
  00089	89 4d a4	 mov	 DWORD PTR tv82[ebp], ecx
  0008c	eb 21		 jmp	 SHORT $LN78@pack_local
$LN77@pack_local:
  0008e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA
  00094	83 c2 25	 add	 edx, 37			; 00000025H
  00097	52		 push	 edx
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@IBICCAFN@c?3?2users?2nhv90?2projects?2eech?2ap@
  0009d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a8	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$LN78@pack_local:
  000af	8b 4d a4	 mov	 ecx, DWORD PTR tv82[ebp]
  000b2	51		 push	 ecx
  000b3	e8 00 00 00 00	 call	 ?pack_entity_type@@YGXW4ENTITY_TYPES@@@Z ; pack_entity_type

; 118  : 
; 119  : 			pack_entity_safe_ptr (en);

  000b8	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ?pack_entity_safe_ptr@@YGXPAUENTITY@@@Z ; pack_entity_safe_ptr

; 120  : 
; 121  : 			//
; 122  : 			// pack data (in exactly the same order as the data is unpacked)
; 123  : 			//
; 124  : 
; 125  : 			pack_int_value (en, INT_TYPE_ENTITY_SUB_TYPE, raw->sub_type);

  000c1	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  000c4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c6	51		 push	 ecx
  000c7	6a 34		 push	 52			; 00000034H
  000c9	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  000cc	52		 push	 edx
  000cd	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 126  : 
; 127  : 			// must be packed BEFORE task_link
; 128  : 			pack_int_value (en, INT_TYPE_TASK_STATE, raw->task_state);

  000d2	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  000d5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d8	51		 push	 ecx
  000d9	68 e3 00 00 00	 push	 227			; 000000e3H
  000de	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  000e1	52		 push	 edx
  000e2	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 129  : 
; 130  : 			pack_vec3d (en, VEC3D_TYPE_POSITION, &raw->position);

  000e7	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  000ea	83 c0 08	 add	 eax, 8
  000ed	50		 push	 eax
  000ee	6a 08		 push	 8
  000f0	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000f3	51		 push	 ecx
  000f4	e8 00 00 00 00	 call	 ?pack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; pack_vec3d

; 131  : 
; 132  : 			pack_int_value (en, INT_TYPE_ROUTE_LENGTH, raw->route_length);

  000f9	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  000fc	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00102	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00105	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0010b	51		 push	 ecx
  0010c	68 b3 00 00 00	 push	 179			; 000000b3H
  00111	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00114	52		 push	 edx
  00115	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 133  : 
; 134  : 			for (loop = 0; loop < raw->route_length; loop ++)

  0011a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _loop$6[ebp], 0
  00121	eb 09		 jmp	 SHORT $LN8@pack_local
$LN6@pack_local:
  00123	8b 45 fc	 mov	 eax, DWORD PTR _loop$6[ebp]
  00126	83 c0 01	 add	 eax, 1
  00129	89 45 fc	 mov	 DWORD PTR _loop$6[ebp], eax
$LN8@pack_local:
  0012c	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  0012f	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00135	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00138	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0013e	39 4d fc	 cmp	 DWORD PTR _loop$6[ebp], ecx
  00141	73 18		 jae	 SHORT $LN7@pack_local

; 135  : 			{
; 136  : 
; 137  : 				pack_vec3d (en, VEC3D_TYPE_POSITION, &raw->route_nodes [loop]);

  00143	6b 45 fc 0c	 imul	 eax, DWORD PTR _loop$6[ebp], 12
  00147	8b 4d f8	 mov	 ecx, DWORD PTR _raw$5[ebp]
  0014a	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  0014d	50		 push	 eax
  0014e	6a 08		 push	 8
  00150	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00153	52		 push	 edx
  00154	e8 00 00 00 00	 call	 ?pack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; pack_vec3d

; 138  : 			}

  00159	eb c8		 jmp	 SHORT $LN6@pack_local
$LN7@pack_local:

; 139  : 
; 140  : 			pack_float_value (en, FLOAT_TYPE_TASK_USER_DATA, raw->task_user_data);

  0015b	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  0015e	51		 push	 ecx
  0015f	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  00164	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00169	68 8c 00 00 00	 push	 140			; 0000008cH
  0016e	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00171	51		 push	 ecx
  00172	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 141  : 
; 142  : 			pack_float_value (en, FLOAT_TYPE_TASK_PRIORITY, raw->task_priority);

  00177	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  0017a	51		 push	 ecx
  0017b	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00180	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00185	68 8a 00 00 00	 push	 138			; 0000008aH
  0018a	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0018d	51		 push	 ecx
  0018e	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 143  : 
; 144  : 			pack_float_value (en, FLOAT_TYPE_RATING, raw->rating);

  00193	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  00196	51		 push	 ecx
  00197	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  0019c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a1	6a 6c		 push	 108			; 0000006cH
  001a3	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  001a6	51		 push	 ecx
  001a7	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 145  : 
; 146  : 			pack_float_value (en, FLOAT_TYPE_START_TIME, raw->start_time);

  001ac	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  001af	51		 push	 ecx
  001b0	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  001b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ba	6a 7d		 push	 125			; 0000007dH
  001bc	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  001bf	51		 push	 ecx
  001c0	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 147  : 
; 148  : 			pack_float_value (en, FLOAT_TYPE_STOP_TIMER, raw->stop_timer);

  001c5	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  001c8	51		 push	 ecx
  001c9	f3 0f 10 40 28	 movss	 xmm0, DWORD PTR [eax+40]
  001ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d3	6a 7e		 push	 126			; 0000007eH
  001d5	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  001d8	51		 push	 ecx
  001d9	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 149  : 
; 150  : 			pack_float_value (en, FLOAT_TYPE_EXPIRE_TIMER, raw->expire_timer);

  001de	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  001e1	51		 push	 ecx
  001e2	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  001e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ec	6a 25		 push	 37			; 00000025H
  001ee	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  001f1	51		 push	 ecx
  001f2	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 151  : 
; 152  : 			pack_entity_safe_ptr (raw->return_keysite);

  001f7	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  001fa	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  001fd	51		 push	 ecx
  001fe	e8 00 00 00 00	 call	 ?pack_entity_safe_ptr@@YGXPAUENTITY@@@Z ; pack_entity_safe_ptr

; 153  : 
; 154  : 			for (loop = 0; loop < raw->route_length; loop ++)

  00203	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _loop$6[ebp], 0
  0020a	eb 09		 jmp	 SHORT $LN11@pack_local
$LN9@pack_local:
  0020c	8b 45 fc	 mov	 eax, DWORD PTR _loop$6[ebp]
  0020f	83 c0 01	 add	 eax, 1
  00212	89 45 fc	 mov	 DWORD PTR _loop$6[ebp], eax
$LN11@pack_local:
  00215	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  00218	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0021e	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00221	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00227	39 4d fc	 cmp	 DWORD PTR _loop$6[ebp], ecx
  0022a	73 45		 jae	 SHORT $LN10@pack_local

; 155  : 			{
; 156  : 				if (raw->route_dependents [loop])

  0022c	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  0022f	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00232	8b 55 fc	 mov	 edx, DWORD PTR _loop$6[ebp]
  00235	83 3c 91 00	 cmp	 DWORD PTR [ecx+edx*4], 0
  00239	74 24		 je	 SHORT $LN45@pack_local

; 157  : 				{
; 158  : 					pack_int_value (en, INT_TYPE_VALID, TRUE);

  0023b	6a 01		 push	 1
  0023d	68 ef 00 00 00	 push	 239			; 000000efH
  00242	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00245	50		 push	 eax
  00246	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 159  : 
; 160  : 					pack_entity_safe_ptr (raw->route_dependents [loop]);

  0024b	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  0024e	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00251	8b 55 fc	 mov	 edx, DWORD PTR _loop$6[ebp]
  00254	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00257	50		 push	 eax
  00258	e8 00 00 00 00	 call	 ?pack_entity_safe_ptr@@YGXPAUENTITY@@@Z ; pack_entity_safe_ptr

; 161  : 				}
; 162  : 				else

  0025d	eb 10		 jmp	 SHORT $LN46@pack_local
$LN45@pack_local:

; 163  : 				{
; 164  : 					pack_int_value (en, INT_TYPE_VALID, FALSE);

  0025f	6a 00		 push	 0
  00261	68 ef 00 00 00	 push	 239			; 000000efH
  00266	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00269	50		 push	 eax
  0026a	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN46@pack_local:

; 165  : 				}
; 166  : 			}

  0026f	eb 9b		 jmp	 SHORT $LN9@pack_local
$LN10@pack_local:

; 167  : 
; 168  : 			for (loop = 0; loop < raw->route_length; loop ++)

  00271	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _loop$6[ebp], 0
  00278	eb 09		 jmp	 SHORT $LN14@pack_local
$LN12@pack_local:
  0027a	8b 45 fc	 mov	 eax, DWORD PTR _loop$6[ebp]
  0027d	83 c0 01	 add	 eax, 1
  00280	89 45 fc	 mov	 DWORD PTR _loop$6[ebp], eax
$LN14@pack_local:
  00283	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  00286	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0028c	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0028f	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00295	39 4d fc	 cmp	 DWORD PTR _loop$6[ebp], ecx
  00298	73 1d		 jae	 SHORT $LN13@pack_local

; 169  : 			{
; 170  : 				pack_int_value (en, INT_TYPE_WAYPOINT_FORMATION, raw->route_formation_types [loop]);

  0029a	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  0029d	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  002a0	8b 55 fc	 mov	 edx, DWORD PTR _loop$6[ebp]
  002a3	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  002a6	50		 push	 eax
  002a7	68 fe 00 00 00	 push	 254			; 000000feH
  002ac	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  002af	51		 push	 ecx
  002b0	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 171  : 			}

  002b5	eb c3		 jmp	 SHORT $LN12@pack_local
$LN13@pack_local:

; 172  : 
; 173  : 			for (loop = 0; loop < raw->route_length; loop ++)

  002b7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _loop$6[ebp], 0
  002be	eb 09		 jmp	 SHORT $LN17@pack_local
$LN15@pack_local:
  002c0	8b 45 fc	 mov	 eax, DWORD PTR _loop$6[ebp]
  002c3	83 c0 01	 add	 eax, 1
  002c6	89 45 fc	 mov	 DWORD PTR _loop$6[ebp], eax
$LN17@pack_local:
  002c9	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  002cc	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  002d2	c1 e9 10	 shr	 ecx, 16			; 00000010H
  002d5	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  002db	39 4d fc	 cmp	 DWORD PTR _loop$6[ebp], ecx
  002de	73 1a		 jae	 SHORT $LN16@pack_local

; 174  : 			{
; 175  : 				pack_int_value (en, INT_TYPE_ENTITY_SUB_TYPE, raw->route_waypoint_types [loop]);

  002e0	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  002e3	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  002e6	8b 55 fc	 mov	 edx, DWORD PTR _loop$6[ebp]
  002e9	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  002ec	50		 push	 eax
  002ed	6a 34		 push	 52			; 00000034H
  002ef	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  002f2	51		 push	 ecx
  002f3	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 176  : 			}

  002f8	eb c6		 jmp	 SHORT $LN15@pack_local
$LN16@pack_local:

; 177  : 
; 178  : 			/////////////////////////////////////////////////////////////////
; 179  : 			if (raw->guide_root.first_child)

  002fa	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  002fd	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  00301	74 24		 je	 SHORT $LN47@pack_local

; 180  : 			{
; 181  : 				pack_int_value (en, INT_TYPE_VALID, TRUE);

  00303	6a 01		 push	 1
  00305	68 ef 00 00 00	 push	 239			; 000000efH
  0030a	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0030d	50		 push	 eax
  0030e	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 182  : 
; 183  : 				pack_list_root (en, LIST_TYPE_GUIDE, &raw->guide_root);

  00313	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  00316	83 c0 40	 add	 eax, 64			; 00000040H
  00319	50		 push	 eax
  0031a	6a 10		 push	 16			; 00000010H
  0031c	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0031f	51		 push	 ecx
  00320	e8 00 00 00 00	 call	 ?pack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z ; pack_list_root

; 184  : 			}
; 185  : 			else

  00325	eb 10		 jmp	 SHORT $LN48@pack_local
$LN47@pack_local:

; 186  : 			{
; 187  : 				pack_int_value (en, INT_TYPE_VALID, FALSE);

  00327	6a 00		 push	 0
  00329	68 ef 00 00 00	 push	 239			; 000000efH
  0032e	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00331	50		 push	 eax
  00332	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN48@pack_local:

; 188  : 			}
; 189  : 			/////////////////////////////////////////////////////////////////
; 190  : 
; 191  : 			/////////////////////////////////////////////////////////////////
; 192  : 			if (raw->task_dependent_root.first_child)

  00337	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  0033a	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  0033e	74 24		 je	 SHORT $LN49@pack_local

; 193  : 			{
; 194  : 				pack_int_value (en, INT_TYPE_VALID, TRUE);

  00340	6a 01		 push	 1
  00342	68 ef 00 00 00	 push	 239			; 000000efH
  00347	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0034a	50		 push	 eax
  0034b	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 195  : 
; 196  : 				pack_list_root (en, LIST_TYPE_TASK_DEPENDENT, &raw->task_dependent_root);

  00350	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  00353	83 c0 48	 add	 eax, 72			; 00000048H
  00356	50		 push	 eax
  00357	6a 27		 push	 39			; 00000027H
  00359	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0035c	51		 push	 ecx
  0035d	e8 00 00 00 00	 call	 ?pack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z ; pack_list_root

; 197  : 			}
; 198  : 			else

  00362	eb 10		 jmp	 SHORT $LN50@pack_local
$LN49@pack_local:

; 199  : 			{
; 200  : 				pack_int_value (en, INT_TYPE_VALID, FALSE);

  00364	6a 00		 push	 0
  00366	68 ef 00 00 00	 push	 239			; 000000efH
  0036b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0036e	50		 push	 eax
  0036f	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN50@pack_local:

; 201  : 			}
; 202  : 			/////////////////////////////////////////////////////////////////
; 203  : 
; 204  : 			/////////////////////////////////////////////////////////////////
; 205  : 			if (raw->waypoint_root.first_child)

  00374	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  00377	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  0037b	74 24		 je	 SHORT $LN51@pack_local

; 206  : 			{
; 207  : 				pack_int_value (en, INT_TYPE_VALID, TRUE);

  0037d	6a 01		 push	 1
  0037f	68 ef 00 00 00	 push	 239			; 000000efH
  00384	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00387	50		 push	 eax
  00388	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 208  : 
; 209  : 				pack_list_root (en, LIST_TYPE_WAYPOINT, &raw->waypoint_root);

  0038d	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  00390	83 c0 4c	 add	 eax, 76			; 0000004cH
  00393	50		 push	 eax
  00394	6a 2c		 push	 44			; 0000002cH
  00396	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00399	51		 push	 ecx
  0039a	e8 00 00 00 00	 call	 ?pack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z ; pack_list_root

; 210  : 			}
; 211  : 			else

  0039f	eb 10		 jmp	 SHORT $LN52@pack_local
$LN51@pack_local:

; 212  : 			{
; 213  : 				pack_int_value (en, INT_TYPE_VALID, FALSE);

  003a1	6a 00		 push	 0
  003a3	68 ef 00 00 00	 push	 239			; 000000efH
  003a8	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  003ab	50		 push	 eax
  003ac	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN52@pack_local:

; 214  : 			}
; 215  : 			/////////////////////////////////////////////////////////////////
; 216  : 
; 217  : 			// pilot_lock_link
; 218  : 
; 219  : 			/////////////////////////////////////////////////////////////////
; 220  : 			if (raw->sector_task_link.parent)

  003b1	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  003b4	83 78 5c 00	 cmp	 DWORD PTR [eax+92], 0
  003b8	74 24		 je	 SHORT $LN53@pack_local

; 221  : 			{
; 222  : 				pack_int_value (en, INT_TYPE_VALID, TRUE);

  003ba	6a 01		 push	 1
  003bc	68 ef 00 00 00	 push	 239			; 000000efH
  003c1	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  003c4	50		 push	 eax
  003c5	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 223  : 
; 224  : 				pack_list_link (en, LIST_TYPE_SECTOR_TASK, &raw->sector_task_link);

  003ca	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  003cd	83 c0 5c	 add	 eax, 92			; 0000005cH
  003d0	50		 push	 eax
  003d1	6a 22		 push	 34			; 00000022H
  003d3	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  003d6	51		 push	 ecx
  003d7	e8 00 00 00 00	 call	 ?pack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; pack_list_link

; 225  : 			}
; 226  : 			else

  003dc	eb 10		 jmp	 SHORT $LN54@pack_local
$LN53@pack_local:

; 227  : 			{
; 228  : 				pack_int_value (en, INT_TYPE_VALID, FALSE);

  003de	6a 00		 push	 0
  003e0	68 ef 00 00 00	 push	 239			; 000000efH
  003e5	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  003e8	50		 push	 eax
  003e9	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN54@pack_local:

; 229  : 			}
; 230  : 			/////////////////////////////////////////////////////////////////
; 231  : 
; 232  : 			/////////////////////////////////////////////////////////////////
; 233  : 			if (raw->task_dependent_link.parent)

  003ee	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  003f1	83 78 68 00	 cmp	 DWORD PTR [eax+104], 0
  003f5	74 24		 je	 SHORT $LN55@pack_local

; 234  : 			{
; 235  : 				pack_int_value (en, INT_TYPE_VALID, TRUE);

  003f7	6a 01		 push	 1
  003f9	68 ef 00 00 00	 push	 239			; 000000efH
  003fe	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00401	50		 push	 eax
  00402	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 236  : 
; 237  : 				pack_list_link (en, LIST_TYPE_TASK_DEPENDENT, &raw->task_dependent_link);

  00407	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  0040a	83 c0 68	 add	 eax, 104		; 00000068H
  0040d	50		 push	 eax
  0040e	6a 27		 push	 39			; 00000027H
  00410	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00413	51		 push	 ecx
  00414	e8 00 00 00 00	 call	 ?pack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; pack_list_link

; 238  : 			}
; 239  : 			else

  00419	eb 10		 jmp	 SHORT $LN56@pack_local
$LN55@pack_local:

; 240  : 			{
; 241  : 				pack_int_value (en, INT_TYPE_VALID, FALSE);

  0041b	6a 00		 push	 0
  0041d	68 ef 00 00 00	 push	 239			; 000000efH
  00422	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00425	50		 push	 eax
  00426	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN56@pack_local:

; 242  : 			}
; 243  : 			/////////////////////////////////////////////////////////////////
; 244  : 
; 245  : 			pack_list_link (en, get_local_task_list_type (en), &raw->task_link);

  0042b	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  0042e	83 c0 74	 add	 eax, 116		; 00000074H
  00431	50		 push	 eax
  00432	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00435	51		 push	 ecx
  00436	e8 00 00 00 00	 call	 ?get_local_task_list_type@@YG?AW4LIST_TYPES@@PAUENTITY@@@Z ; get_local_task_list_type
  0043b	50		 push	 eax
  0043c	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0043f	52		 push	 edx
  00440	e8 00 00 00 00	 call	 ?pack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; pack_list_link

; 246  : 
; 247  : 			// update link
; 248  : 
; 249  : 			pack_int_value (en, INT_TYPE_TASK_TERMINATED, raw->task_terminated);

  00445	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  00448	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0044e	51		 push	 ecx
  0044f	68 e7 00 00 00	 push	 231			; 000000e7H
  00454	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00457	52		 push	 edx
  00458	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 250  : 
; 251  : 			/////////////////////////////////////////////////////////////////
; 252  : 			// kill data
; 253  : 			{
; 254  : 
; 255  : 				task_kill_loss_data
; 256  : 					*kill;
; 257  : 
; 258  : 				// kills
; 259  : 					
; 260  : 				kill = raw->task_kills;

  0045d	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  00460	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00466	89 4d f4	 mov	 DWORD PTR _kill$4[ebp], ecx
$LN18@pack_local:

; 261  : 
; 262  : 				while (kill)

  00469	83 7d f4 00	 cmp	 DWORD PTR _kill$4[ebp], 0
  0046d	0f 84 ab 00 00
	00		 je	 $LN19@pack_local

; 263  : 				{
; 264  : 
; 265  : 					pack_int_value (en, INT_TYPE_VALID, TRUE);

  00473	6a 01		 push	 1
  00475	68 ef 00 00 00	 push	 239			; 000000efH
  0047a	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0047d	50		 push	 eax
  0047e	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 266  : 	
; 267  : 					pack_entity_type (kill->victim_type);

  00483	8b 45 f4	 mov	 eax, DWORD PTR _kill$4[ebp]
  00486	8b 08		 mov	 ecx, DWORD PTR [eax]
  00488	51		 push	 ecx
  00489	e8 00 00 00 00	 call	 ?pack_entity_type@@YGXW4ENTITY_TYPES@@@Z ; pack_entity_type

; 268  : 					pack_entity_type (kill->aggressor_type);

  0048e	8b 45 f4	 mov	 eax, DWORD PTR _kill$4[ebp]
  00491	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00494	51		 push	 ecx
  00495	e8 00 00 00 00	 call	 ?pack_entity_type@@YGXW4ENTITY_TYPES@@@Z ; pack_entity_type

; 269  : 	
; 270  : 					pack_int_value (en, INT_TYPE_ENTITY_SUB_TYPE, kill->victim_sub_type);

  0049a	8b 45 f4	 mov	 eax, DWORD PTR _kill$4[ebp]
  0049d	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  004a0	51		 push	 ecx
  004a1	6a 34		 push	 52			; 00000034H
  004a3	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  004a6	52		 push	 edx
  004a7	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 271  : 					pack_int_value (en, INT_TYPE_ENTITY_SUB_TYPE, kill->aggressor_sub_type);

  004ac	8b 45 f4	 mov	 eax, DWORD PTR _kill$4[ebp]
  004af	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  004b2	51		 push	 ecx
  004b3	6a 34		 push	 52			; 00000034H
  004b5	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  004b8	52		 push	 edx
  004b9	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 272  : 	
; 273  : 					pack_int_value (en, INT_TYPE_GROUP_MEMBER_NUMBER, kill->victim_id);

  004be	8b 45 f4	 mov	 eax, DWORD PTR _kill$4[ebp]
  004c1	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  004c4	51		 push	 ecx
  004c5	6a 4b		 push	 75			; 0000004bH
  004c7	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  004ca	52		 push	 edx
  004cb	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 274  : 					pack_int_value (en, INT_TYPE_GROUP_MEMBER_NUMBER, kill->aggressor_id);

  004d0	8b 45 f4	 mov	 eax, DWORD PTR _kill$4[ebp]
  004d3	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  004d6	51		 push	 ecx
  004d7	6a 4b		 push	 75			; 0000004bH
  004d9	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  004dc	52		 push	 edx
  004dd	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 275  : 	
; 276  : 					pack_float_value (en, FLOAT_TYPE_TIME_OF_DAY, kill->time);

  004e2	8b 45 f4	 mov	 eax, DWORD PTR _kill$4[ebp]
  004e5	51		 push	 ecx
  004e6	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  004eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f0	68 8e 00 00 00	 push	 142			; 0000008eH
  004f5	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  004f8	51		 push	 ecx
  004f9	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 277  : 	
; 278  : 					pack_int_value (en, INT_TYPE_DAY, kill->day);

  004fe	8b 45 f4	 mov	 eax, DWORD PTR _kill$4[ebp]
  00501	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00504	51		 push	 ecx
  00505	6a 26		 push	 38			; 00000026H
  00507	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0050a	52		 push	 edx
  0050b	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 279  : 	
; 280  : 					kill = kill->next;

  00510	8b 45 f4	 mov	 eax, DWORD PTR _kill$4[ebp]
  00513	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00516	89 4d f4	 mov	 DWORD PTR _kill$4[ebp], ecx

; 281  : 				}

  00519	e9 4b ff ff ff	 jmp	 $LN18@pack_local
$LN19@pack_local:

; 282  : 
; 283  : 				pack_int_value (en, INT_TYPE_VALID, FALSE);

  0051e	6a 00		 push	 0
  00520	68 ef 00 00 00	 push	 239			; 000000efH
  00525	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00528	50		 push	 eax
  00529	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 284  : 
; 285  : 				// losses
; 286  : 					
; 287  : 				kill = raw->task_losses;

  0052e	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  00531	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00537	89 4d f4	 mov	 DWORD PTR _kill$4[ebp], ecx
$LN20@pack_local:

; 288  : 
; 289  : 				while (kill)

  0053a	83 7d f4 00	 cmp	 DWORD PTR _kill$4[ebp], 0
  0053e	0f 84 ab 00 00
	00		 je	 $LN21@pack_local

; 290  : 				{
; 291  : 
; 292  : 					pack_int_value (en, INT_TYPE_VALID, TRUE);

  00544	6a 01		 push	 1
  00546	68 ef 00 00 00	 push	 239			; 000000efH
  0054b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0054e	50		 push	 eax
  0054f	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 293  : 	
; 294  : 					pack_entity_type (kill->victim_type);

  00554	8b 45 f4	 mov	 eax, DWORD PTR _kill$4[ebp]
  00557	8b 08		 mov	 ecx, DWORD PTR [eax]
  00559	51		 push	 ecx
  0055a	e8 00 00 00 00	 call	 ?pack_entity_type@@YGXW4ENTITY_TYPES@@@Z ; pack_entity_type

; 295  : 					pack_entity_type (kill->aggressor_type);

  0055f	8b 45 f4	 mov	 eax, DWORD PTR _kill$4[ebp]
  00562	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00565	51		 push	 ecx
  00566	e8 00 00 00 00	 call	 ?pack_entity_type@@YGXW4ENTITY_TYPES@@@Z ; pack_entity_type

; 296  : 	
; 297  : 					pack_int_value (en, INT_TYPE_ENTITY_SUB_TYPE, kill->victim_sub_type);

  0056b	8b 45 f4	 mov	 eax, DWORD PTR _kill$4[ebp]
  0056e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00571	51		 push	 ecx
  00572	6a 34		 push	 52			; 00000034H
  00574	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00577	52		 push	 edx
  00578	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 298  : 					pack_int_value (en, INT_TYPE_ENTITY_SUB_TYPE, kill->aggressor_sub_type);

  0057d	8b 45 f4	 mov	 eax, DWORD PTR _kill$4[ebp]
  00580	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00583	51		 push	 ecx
  00584	6a 34		 push	 52			; 00000034H
  00586	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00589	52		 push	 edx
  0058a	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 299  : 	
; 300  : 					pack_int_value (en, INT_TYPE_GROUP_MEMBER_NUMBER, kill->victim_id);

  0058f	8b 45 f4	 mov	 eax, DWORD PTR _kill$4[ebp]
  00592	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00595	51		 push	 ecx
  00596	6a 4b		 push	 75			; 0000004bH
  00598	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0059b	52		 push	 edx
  0059c	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 301  : 					pack_int_value (en, INT_TYPE_GROUP_MEMBER_NUMBER, kill->aggressor_id);

  005a1	8b 45 f4	 mov	 eax, DWORD PTR _kill$4[ebp]
  005a4	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  005a7	51		 push	 ecx
  005a8	6a 4b		 push	 75			; 0000004bH
  005aa	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  005ad	52		 push	 edx
  005ae	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 302  : 	
; 303  : 					pack_float_value (en, FLOAT_TYPE_TIME_OF_DAY, kill->time);

  005b3	8b 45 f4	 mov	 eax, DWORD PTR _kill$4[ebp]
  005b6	51		 push	 ecx
  005b7	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  005bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c1	68 8e 00 00 00	 push	 142			; 0000008eH
  005c6	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  005c9	51		 push	 ecx
  005ca	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 304  : 	
; 305  : 					pack_int_value (en, INT_TYPE_DAY, kill->day);

  005cf	8b 45 f4	 mov	 eax, DWORD PTR _kill$4[ebp]
  005d2	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  005d5	51		 push	 ecx
  005d6	6a 26		 push	 38			; 00000026H
  005d8	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  005db	52		 push	 edx
  005dc	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 306  : 	
; 307  : 					kill = kill->next;

  005e1	8b 45 f4	 mov	 eax, DWORD PTR _kill$4[ebp]
  005e4	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  005e7	89 4d f4	 mov	 DWORD PTR _kill$4[ebp], ecx

; 308  : 				}

  005ea	e9 4b ff ff ff	 jmp	 $LN20@pack_local
$LN21@pack_local:

; 309  : 
; 310  : 				pack_int_value (en, INT_TYPE_VALID, FALSE);

  005ef	6a 00		 push	 0
  005f1	68 ef 00 00 00	 push	 239			; 000000efH
  005f6	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  005f9	50		 push	 eax
  005fa	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 311  : 			}
; 312  : 			/////////////////////////////////////////////////////////////////
; 313  : 
; 314  : 			pack_int_value (en, INT_TYPE_AWARDED_MEDALS, raw->awarded_medals);

  005ff	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  00602	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00608	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0060e	51		 push	 ecx
  0060f	6a 0d		 push	 13			; 0000000dH
  00611	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00614	52		 push	 edx
  00615	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 315  : 
; 316  : 			pack_int_value (en, INT_TYPE_AWARDED_PROMOTION, raw->awarded_promotion);

  0061a	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  0061d	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00623	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00626	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0062c	51		 push	 ecx
  0062d	6a 0e		 push	 14			; 0000000eH
  0062f	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00632	52		 push	 edx
  00633	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 317  : 
; 318  : 			pack_int_value (en, INT_TYPE_TASK_ID, raw->task_id);

  00638	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  0063b	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  00641	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  00647	51		 push	 ecx
  00648	68 dc 00 00 00	 push	 220			; 000000dcH
  0064d	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00650	52		 push	 edx
  00651	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 319  : 
; 320  : 			pack_int_value (en, INT_TYPE_TASK_COMPLETED, raw->task_completed);

  00656	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  00659	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  0065f	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  00662	83 e1 07	 and	 ecx, 7
  00665	51		 push	 ecx
  00666	68 d9 00 00 00	 push	 217			; 000000d9H
  0066b	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0066e	52		 push	 edx
  0066f	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 321  : 
; 322  : 			// route_check_sum
; 323  : 
; 324  : 			pack_int_value (en, INT_TYPE_KILLS, raw->kills);

  00674	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  00677	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  0067d	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  00683	51		 push	 ecx
  00684	6a 72		 push	 114			; 00000072H
  00686	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00689	52		 push	 edx
  0068a	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 325  : 
; 326  : 			pack_int_value (en, INT_TYPE_LOSSES, raw->losses);

  0068f	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  00692	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  00698	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  0069b	81 e1 ff 03 00
	00		 and	 ecx, 1023		; 000003ffH
  006a1	51		 push	 ecx
  006a2	6a 7f		 push	 127			; 0000007fH
  006a4	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  006a7	52		 push	 edx
  006a8	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 327  : 
; 328  : 			pack_int_value (en, INT_TYPE_PLAYER_TASK, raw->player_task);

  006ad	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  006b0	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  006b6	c1 e9 16	 shr	 ecx, 22			; 00000016H
  006b9	83 e1 01	 and	 ecx, 1
  006bc	51		 push	 ecx
  006bd	68 9e 00 00 00	 push	 158			; 0000009eH
  006c2	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  006c5	52		 push	 edx
  006c6	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 329  : 
; 330  : 			pack_int_value (en, INT_TYPE_MOVEMENT_TYPE, raw->movement_type);

  006cb	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  006ce	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  006d4	c1 e9 17	 shr	 ecx, 23			; 00000017H
  006d7	83 e1 07	 and	 ecx, 7
  006da	51		 push	 ecx
  006db	68 90 00 00 00	 push	 144			; 00000090H
  006e0	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  006e3	52		 push	 edx
  006e4	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 331  : 
; 332  : 			pack_int_value (en, INT_TYPE_TASK_DIFFICULTY, raw->difficulty);

  006e9	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  006ec	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  006f2	c1 e9 1a	 shr	 ecx, 26			; 0000001aH
  006f5	83 e1 0f	 and	 ecx, 15			; 0000000fH
  006f8	51		 push	 ecx
  006f9	68 da 00 00 00	 push	 218			; 000000daH
  006fe	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00701	52		 push	 edx
  00702	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 333  : 
; 334  : 			pack_int_value (en, INT_TYPE_CRITICAL_TASK, raw->critical_task);

  00707	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  0070a	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  00710	c1 e9 1e	 shr	 ecx, 30			; 0000001eH
  00713	83 e1 01	 and	 ecx, 1
  00716	51		 push	 ecx
  00717	6a 24		 push	 36			; 00000024H
  00719	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0071c	52		 push	 edx
  0071d	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 335  : 
; 336  : 			pack_int_value (en, INT_TYPE_TASK_SCORE, raw->task_score);

  00722	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  00725	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0072b	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00731	51		 push	 ecx
  00732	68 e2 00 00 00	 push	 226			; 000000e2H
  00737	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0073a	52		 push	 edx
  0073b	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 337  : 
; 338  : 			// route length done above
; 339  : 
; 340  : 			pack_int_value (en, INT_TYPE_SIDE, raw->side);

  00740	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  00743	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00749	83 e1 03	 and	 ecx, 3
  0074c	51		 push	 ecx
  0074d	68 bb 00 00 00	 push	 187			; 000000bbH
  00752	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00755	52		 push	 edx
  00756	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 341  : 
; 342  : 			/////////////////////////////////////////////////////////////////
; 343  : 			if (raw->update_link.parent)

  0075b	8b 45 f8	 mov	 eax, DWORD PTR _raw$5[ebp]
  0075e	83 b8 80 00 00
	00 00		 cmp	 DWORD PTR [eax+128], 0
  00765	74 12		 je	 SHORT $LN57@pack_local

; 344  : 			{
; 345  : 				pack_int_value (en, INT_TYPE_VALID, TRUE);

  00767	6a 01		 push	 1
  00769	68 ef 00 00 00	 push	 239			; 000000efH
  0076e	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00771	50		 push	 eax
  00772	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 346  : 			}
; 347  : 			else

  00777	eb 10		 jmp	 SHORT $LN58@pack_local
$LN57@pack_local:

; 348  : 			{
; 349  : 				pack_int_value (en, INT_TYPE_VALID, FALSE);

  00779	6a 00		 push	 0
  0077b	68 ef 00 00 00	 push	 239			; 000000efH
  00780	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00783	50		 push	 eax
  00784	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN58@pack_local:

; 350  : 			}
; 351  : 			/////////////////////////////////////////////////////////////////
; 352  : 
; 353  : 			break;

  00789	e9 8f 06 00 00	 jmp	 $LN2@pack_local
$LN59@pack_local:

; 354  : 		}
; 355  : 		////////////////////////////////////////
; 356  : 		case PACK_MODE_CLIENT_SESSION:
; 357  : 		////////////////////////////////////////
; 358  : 		{
; 359  : 
; 360  : 			unsigned int
; 361  : 				loop;
; 362  : 
; 363  : 			task
; 364  : 				*raw;
; 365  : 
; 366  : 			raw = (task *) get_local_entity_data (en);

  0078e	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00791	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00794	89 4d ec	 mov	 DWORD PTR _raw$2[ebp], ecx

; 367  : 
; 368  : 			switch (raw->sub_type)

  00797	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  0079a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0079c	89 4d a4	 mov	 DWORD PTR tv440[ebp], ecx
  0079f	8b 55 a4	 mov	 edx, DWORD PTR tv440[ebp]
  007a2	83 ea 0d	 sub	 edx, 13			; 0000000dH
  007a5	89 55 a4	 mov	 DWORD PTR tv440[ebp], edx
  007a8	83 7d a4 0a	 cmp	 DWORD PTR tv440[ebp], 10 ; 0000000aH
  007ac	77 16		 ja	 SHORT $LN61@pack_local
  007ae	8b 45 a4	 mov	 eax, DWORD PTR tv440[ebp]
  007b1	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN82@pack_local[eax]
  007b8	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN84@pack_local[ecx*4]
$LN60@pack_local:

; 369  : 			{
; 370  : 
; 371  : 				case ENTITY_SUB_TYPE_TASK_LANDING:
; 372  : 				case ENTITY_SUB_TYPE_TASK_LANDING_HOLDING:
; 373  : 				case ENTITY_SUB_TYPE_TASK_TAKEOFF:
; 374  : 				case ENTITY_SUB_TYPE_TASK_TAKEOFF_HOLDING:
; 375  : 				{
; 376  : 
; 377  : 					return;

  007bf	e9 59 06 00 00	 jmp	 $LN1@pack_local
$LN61@pack_local:

; 378  : 				}
; 379  : 
; 380  : 				default:
; 381  : 				{
; 382  : 
; 383  : 					break;
; 384  : 				}
; 385  : 			}
; 386  : 
; 387  : 			pack_entity_type (get_local_entity_type (en));

  007c4	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  007c8	74 0a		 je	 SHORT $LN79@pack_local
  007ca	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  007cd	8b 08		 mov	 ecx, DWORD PTR [eax]
  007cf	89 4d a4	 mov	 DWORD PTR tv449[ebp], ecx
  007d2	eb 24		 jmp	 SHORT $LN80@pack_local
$LN79@pack_local:
  007d4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA
  007da	81 c2 33 01 00
	00		 add	 edx, 307		; 00000133H
  007e0	52		 push	 edx
  007e1	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@IBICCAFN@c?3?2users?2nhv90?2projects?2eech?2ap@
  007e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  007eb	50		 push	 eax
  007ec	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007f1	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv449[ebp], 0
$LN80@pack_local:
  007f8	8b 4d a4	 mov	 ecx, DWORD PTR tv449[ebp]
  007fb	51		 push	 ecx
  007fc	e8 00 00 00 00	 call	 ?pack_entity_type@@YGXW4ENTITY_TYPES@@@Z ; pack_entity_type

; 388  : 
; 389  : 			pack_entity_safe_ptr (en);

  00801	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00804	50		 push	 eax
  00805	e8 00 00 00 00	 call	 ?pack_entity_safe_ptr@@YGXPAUENTITY@@@Z ; pack_entity_safe_ptr

; 390  : 
; 391  : 			//
; 392  : 			// pack data (in exactly the same order as the data is unpacked)
; 393  : 			//
; 394  : 
; 395  : 			pack_int_value (en, INT_TYPE_ENTITY_SUB_TYPE, raw->sub_type);

  0080a	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  0080d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0080f	51		 push	 ecx
  00810	6a 34		 push	 52			; 00000034H
  00812	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00815	52		 push	 edx
  00816	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 396  : 
; 397  : 			// must be packed BEFORE task_link
; 398  : 			pack_int_value (en, INT_TYPE_TASK_STATE, raw->task_state);

  0081b	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  0081e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00821	51		 push	 ecx
  00822	68 e3 00 00 00	 push	 227			; 000000e3H
  00827	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0082a	52		 push	 edx
  0082b	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 399  : 
; 400  : 			pack_vec3d (en, VEC3D_TYPE_POSITION, &raw->position);

  00830	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00833	83 c0 08	 add	 eax, 8
  00836	50		 push	 eax
  00837	6a 08		 push	 8
  00839	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0083c	51		 push	 ecx
  0083d	e8 00 00 00 00	 call	 ?pack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; pack_vec3d

; 401  : 
; 402  : 			pack_int_value (en, INT_TYPE_ROUTE_LENGTH, raw->route_length);

  00842	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00845	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0084b	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0084e	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00854	51		 push	 ecx
  00855	68 b3 00 00 00	 push	 179			; 000000b3H
  0085a	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0085d	52		 push	 edx
  0085e	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 403  : 
; 404  : 			for (loop = 0; loop < raw->route_length; loop ++)

  00863	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _loop$3[ebp], 0
  0086a	eb 09		 jmp	 SHORT $LN26@pack_local
$LN24@pack_local:
  0086c	8b 45 f0	 mov	 eax, DWORD PTR _loop$3[ebp]
  0086f	83 c0 01	 add	 eax, 1
  00872	89 45 f0	 mov	 DWORD PTR _loop$3[ebp], eax
$LN26@pack_local:
  00875	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00878	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0087e	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00881	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00887	39 4d f0	 cmp	 DWORD PTR _loop$3[ebp], ecx
  0088a	73 18		 jae	 SHORT $LN25@pack_local

; 405  : 			{
; 406  : 				pack_vec3d (en, VEC3D_TYPE_POSITION, &raw->route_nodes [loop]);

  0088c	6b 45 f0 0c	 imul	 eax, DWORD PTR _loop$3[ebp], 12
  00890	8b 4d ec	 mov	 ecx, DWORD PTR _raw$2[ebp]
  00893	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  00896	50		 push	 eax
  00897	6a 08		 push	 8
  00899	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0089c	52		 push	 edx
  0089d	e8 00 00 00 00	 call	 ?pack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; pack_vec3d

; 407  : 			}

  008a2	eb c8		 jmp	 SHORT $LN24@pack_local
$LN25@pack_local:

; 408  : 
; 409  : 			pack_float_value (en, FLOAT_TYPE_TASK_USER_DATA, raw->task_user_data);

  008a4	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  008a7	51		 push	 ecx
  008a8	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  008ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008b2	68 8c 00 00 00	 push	 140			; 0000008cH
  008b7	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  008ba	51		 push	 ecx
  008bb	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 410  : 
; 411  : 			pack_float_value (en, FLOAT_TYPE_TASK_PRIORITY, raw->task_priority);

  008c0	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  008c3	51		 push	 ecx
  008c4	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  008c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ce	68 8a 00 00 00	 push	 138			; 0000008aH
  008d3	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  008d6	51		 push	 ecx
  008d7	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 412  : 
; 413  : 			pack_float_value (en, FLOAT_TYPE_RATING, raw->rating);

  008dc	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  008df	51		 push	 ecx
  008e0	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  008e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ea	6a 6c		 push	 108			; 0000006cH
  008ec	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  008ef	51		 push	 ecx
  008f0	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 414  : 
; 415  : 			pack_float_value (en, FLOAT_TYPE_START_TIME, raw->start_time);

  008f5	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  008f8	51		 push	 ecx
  008f9	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  008fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00903	6a 7d		 push	 125			; 0000007dH
  00905	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00908	51		 push	 ecx
  00909	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 416  : 
; 417  : 			pack_float_value (en, FLOAT_TYPE_STOP_TIMER, raw->stop_timer);

  0090e	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00911	51		 push	 ecx
  00912	f3 0f 10 40 28	 movss	 xmm0, DWORD PTR [eax+40]
  00917	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0091c	6a 7e		 push	 126			; 0000007eH
  0091e	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00921	51		 push	 ecx
  00922	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 418  : 
; 419  : 			pack_float_value (en, FLOAT_TYPE_EXPIRE_TIMER, raw->expire_timer);

  00927	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  0092a	51		 push	 ecx
  0092b	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  00930	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00935	6a 25		 push	 37			; 00000025H
  00937	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0093a	51		 push	 ecx
  0093b	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 420  : 
; 421  : 			pack_entity_safe_ptr (raw->return_keysite);

  00940	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00943	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00946	51		 push	 ecx
  00947	e8 00 00 00 00	 call	 ?pack_entity_safe_ptr@@YGXPAUENTITY@@@Z ; pack_entity_safe_ptr

; 422  : 
; 423  : 			for (loop = 0; loop < raw->route_length; loop ++)

  0094c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _loop$3[ebp], 0
  00953	eb 09		 jmp	 SHORT $LN29@pack_local
$LN27@pack_local:
  00955	8b 45 f0	 mov	 eax, DWORD PTR _loop$3[ebp]
  00958	83 c0 01	 add	 eax, 1
  0095b	89 45 f0	 mov	 DWORD PTR _loop$3[ebp], eax
$LN29@pack_local:
  0095e	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00961	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00967	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0096a	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00970	39 4d f0	 cmp	 DWORD PTR _loop$3[ebp], ecx
  00973	73 45		 jae	 SHORT $LN28@pack_local

; 424  : 			{
; 425  : 				if (raw->route_dependents [loop])

  00975	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00978	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0097b	8b 55 f0	 mov	 edx, DWORD PTR _loop$3[ebp]
  0097e	83 3c 91 00	 cmp	 DWORD PTR [ecx+edx*4], 0
  00982	74 24		 je	 SHORT $LN62@pack_local

; 426  : 				{
; 427  : 					pack_int_value (en, INT_TYPE_VALID, TRUE);

  00984	6a 01		 push	 1
  00986	68 ef 00 00 00	 push	 239			; 000000efH
  0098b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0098e	50		 push	 eax
  0098f	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 428  : 
; 429  : 					pack_entity_safe_ptr (raw->route_dependents [loop]);

  00994	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00997	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0099a	8b 55 f0	 mov	 edx, DWORD PTR _loop$3[ebp]
  0099d	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  009a0	50		 push	 eax
  009a1	e8 00 00 00 00	 call	 ?pack_entity_safe_ptr@@YGXPAUENTITY@@@Z ; pack_entity_safe_ptr

; 430  : 				}
; 431  : 				else

  009a6	eb 10		 jmp	 SHORT $LN63@pack_local
$LN62@pack_local:

; 432  : 				{
; 433  : 					pack_int_value (en, INT_TYPE_VALID, FALSE);

  009a8	6a 00		 push	 0
  009aa	68 ef 00 00 00	 push	 239			; 000000efH
  009af	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  009b2	50		 push	 eax
  009b3	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN63@pack_local:

; 434  : 				}
; 435  : 			}

  009b8	eb 9b		 jmp	 SHORT $LN27@pack_local
$LN28@pack_local:

; 436  : 
; 437  : 			for (loop = 0; loop < raw->route_length; loop ++)

  009ba	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _loop$3[ebp], 0
  009c1	eb 09		 jmp	 SHORT $LN32@pack_local
$LN30@pack_local:
  009c3	8b 45 f0	 mov	 eax, DWORD PTR _loop$3[ebp]
  009c6	83 c0 01	 add	 eax, 1
  009c9	89 45 f0	 mov	 DWORD PTR _loop$3[ebp], eax
$LN32@pack_local:
  009cc	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  009cf	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  009d5	c1 e9 10	 shr	 ecx, 16			; 00000010H
  009d8	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  009de	39 4d f0	 cmp	 DWORD PTR _loop$3[ebp], ecx
  009e1	73 1d		 jae	 SHORT $LN31@pack_local

; 438  : 			{
; 439  : 				pack_int_value (en, INT_TYPE_WAYPOINT_FORMATION, raw->route_formation_types [loop]);

  009e3	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  009e6	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  009e9	8b 55 f0	 mov	 edx, DWORD PTR _loop$3[ebp]
  009ec	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  009ef	50		 push	 eax
  009f0	68 fe 00 00 00	 push	 254			; 000000feH
  009f5	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  009f8	51		 push	 ecx
  009f9	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 440  : 			}

  009fe	eb c3		 jmp	 SHORT $LN30@pack_local
$LN31@pack_local:

; 441  : 
; 442  : 			for (loop = 0; loop < raw->route_length; loop ++)

  00a00	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _loop$3[ebp], 0
  00a07	eb 09		 jmp	 SHORT $LN35@pack_local
$LN33@pack_local:
  00a09	8b 45 f0	 mov	 eax, DWORD PTR _loop$3[ebp]
  00a0c	83 c0 01	 add	 eax, 1
  00a0f	89 45 f0	 mov	 DWORD PTR _loop$3[ebp], eax
$LN35@pack_local:
  00a12	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00a15	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00a1b	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00a1e	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00a24	39 4d f0	 cmp	 DWORD PTR _loop$3[ebp], ecx
  00a27	73 1a		 jae	 SHORT $LN34@pack_local

; 443  : 			{
; 444  : 				pack_int_value (en, INT_TYPE_ENTITY_SUB_TYPE, raw->route_waypoint_types [loop]);

  00a29	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00a2c	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00a2f	8b 55 f0	 mov	 edx, DWORD PTR _loop$3[ebp]
  00a32	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00a35	50		 push	 eax
  00a36	6a 34		 push	 52			; 00000034H
  00a38	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00a3b	51		 push	 ecx
  00a3c	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 445  : 			}

  00a41	eb c6		 jmp	 SHORT $LN33@pack_local
$LN34@pack_local:

; 446  : 
; 447  : 			/////////////////////////////////////////////////////////////////
; 448  : 			if (raw->guide_root.first_child)

  00a43	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00a46	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  00a4a	74 24		 je	 SHORT $LN64@pack_local

; 449  : 			{
; 450  : 				pack_int_value (en, INT_TYPE_VALID, TRUE);

  00a4c	6a 01		 push	 1
  00a4e	68 ef 00 00 00	 push	 239			; 000000efH
  00a53	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00a56	50		 push	 eax
  00a57	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 451  : 
; 452  : 				pack_list_root (en, LIST_TYPE_GUIDE, &raw->guide_root);

  00a5c	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00a5f	83 c0 40	 add	 eax, 64			; 00000040H
  00a62	50		 push	 eax
  00a63	6a 10		 push	 16			; 00000010H
  00a65	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00a68	51		 push	 ecx
  00a69	e8 00 00 00 00	 call	 ?pack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z ; pack_list_root

; 453  : 			}
; 454  : 			else

  00a6e	eb 10		 jmp	 SHORT $LN65@pack_local
$LN64@pack_local:

; 455  : 			{
; 456  : 				pack_int_value (en, INT_TYPE_VALID, FALSE);

  00a70	6a 00		 push	 0
  00a72	68 ef 00 00 00	 push	 239			; 000000efH
  00a77	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00a7a	50		 push	 eax
  00a7b	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN65@pack_local:

; 457  : 			}
; 458  : 			/////////////////////////////////////////////////////////////////
; 459  : 
; 460  : 			/////////////////////////////////////////////////////////////////
; 461  : 			if (raw->player_task_root.first_child)

  00a80	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00a83	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  00a87	74 24		 je	 SHORT $LN66@pack_local

; 462  : 			{
; 463  : 				pack_int_value (en, INT_TYPE_VALID, TRUE);

  00a89	6a 01		 push	 1
  00a8b	68 ef 00 00 00	 push	 239			; 000000efH
  00a90	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00a93	50		 push	 eax
  00a94	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 464  : 
; 465  : 				pack_list_root (en, LIST_TYPE_PLAYER_TASK, &raw->player_task_root);

  00a99	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00a9c	83 c0 44	 add	 eax, 68			; 00000044H
  00a9f	50		 push	 eax
  00aa0	6a 1e		 push	 30			; 0000001eH
  00aa2	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00aa5	51		 push	 ecx
  00aa6	e8 00 00 00 00	 call	 ?pack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z ; pack_list_root

; 466  : 			}
; 467  : 			else

  00aab	eb 10		 jmp	 SHORT $LN67@pack_local
$LN66@pack_local:

; 468  : 			{
; 469  : 				pack_int_value (en, INT_TYPE_VALID, FALSE);

  00aad	6a 00		 push	 0
  00aaf	68 ef 00 00 00	 push	 239			; 000000efH
  00ab4	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00ab7	50		 push	 eax
  00ab8	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN67@pack_local:

; 470  : 			}
; 471  : 			/////////////////////////////////////////////////////////////////
; 472  : 
; 473  : 			// task_dependent_root
; 474  : 
; 475  : 			/////////////////////////////////////////////////////////////////
; 476  : 			if (raw->waypoint_root.first_child)

  00abd	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00ac0	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00ac4	74 24		 je	 SHORT $LN68@pack_local

; 477  : 			{
; 478  : 				pack_int_value (en, INT_TYPE_VALID, TRUE);

  00ac6	6a 01		 push	 1
  00ac8	68 ef 00 00 00	 push	 239			; 000000efH
  00acd	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00ad0	50		 push	 eax
  00ad1	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 479  : 
; 480  : 				pack_list_root (en, LIST_TYPE_WAYPOINT, &raw->waypoint_root);

  00ad6	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00ad9	83 c0 4c	 add	 eax, 76			; 0000004cH
  00adc	50		 push	 eax
  00add	6a 2c		 push	 44			; 0000002cH
  00adf	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00ae2	51		 push	 ecx
  00ae3	e8 00 00 00 00	 call	 ?pack_list_root@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_ROOT@@@Z ; pack_list_root

; 481  : 			}
; 482  : 			else

  00ae8	eb 10		 jmp	 SHORT $LN69@pack_local
$LN68@pack_local:

; 483  : 			{
; 484  : 				pack_int_value (en, INT_TYPE_VALID, FALSE);

  00aea	6a 00		 push	 0
  00aec	68 ef 00 00 00	 push	 239			; 000000efH
  00af1	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00af4	50		 push	 eax
  00af5	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN69@pack_local:

; 485  : 			}
; 486  : 			/////////////////////////////////////////////////////////////////
; 487  : 
; 488  : 			pack_list_link (en, LIST_TYPE_PILOT_LOCK, &raw->pilot_lock_link);

  00afa	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00afd	83 c0 50	 add	 eax, 80			; 00000050H
  00b00	50		 push	 eax
  00b01	6a 1d		 push	 29			; 0000001dH
  00b03	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00b06	51		 push	 ecx
  00b07	e8 00 00 00 00	 call	 ?pack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; pack_list_link

; 489  : 
; 490  : 			// sector_task_link
; 491  : 
; 492  : 			/////////////////////////////////////////////////////////////////
; 493  : 			if (raw->task_dependent_link.parent)

  00b0c	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00b0f	83 78 68 00	 cmp	 DWORD PTR [eax+104], 0
  00b13	74 24		 je	 SHORT $LN70@pack_local

; 494  : 			{
; 495  : 				pack_int_value (en, INT_TYPE_VALID, TRUE);

  00b15	6a 01		 push	 1
  00b17	68 ef 00 00 00	 push	 239			; 000000efH
  00b1c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00b1f	50		 push	 eax
  00b20	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 496  : 
; 497  : 				pack_list_link (en, LIST_TYPE_TASK_DEPENDENT, &raw->task_dependent_link);

  00b25	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00b28	83 c0 68	 add	 eax, 104		; 00000068H
  00b2b	50		 push	 eax
  00b2c	6a 27		 push	 39			; 00000027H
  00b2e	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00b31	51		 push	 ecx
  00b32	e8 00 00 00 00	 call	 ?pack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; pack_list_link

; 498  : 			}
; 499  : 			else

  00b37	eb 10		 jmp	 SHORT $LN71@pack_local
$LN70@pack_local:

; 500  : 			{
; 501  : 				pack_int_value (en, INT_TYPE_VALID, FALSE);

  00b39	6a 00		 push	 0
  00b3b	68 ef 00 00 00	 push	 239			; 000000efH
  00b40	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00b43	50		 push	 eax
  00b44	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN71@pack_local:

; 502  : 			}
; 503  : 			/////////////////////////////////////////////////////////////////
; 504  : 
; 505  : 			pack_list_link (en, get_local_task_list_type (en), &raw->task_link);

  00b49	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00b4c	83 c0 74	 add	 eax, 116		; 00000074H
  00b4f	50		 push	 eax
  00b50	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00b53	51		 push	 ecx
  00b54	e8 00 00 00 00	 call	 ?get_local_task_list_type@@YG?AW4LIST_TYPES@@PAUENTITY@@@Z ; get_local_task_list_type
  00b59	50		 push	 eax
  00b5a	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00b5d	52		 push	 edx
  00b5e	e8 00 00 00 00	 call	 ?pack_list_link@@YGXPAUENTITY@@W4LIST_TYPES@@PAULIST_LINK@@@Z ; pack_list_link

; 506  : 
; 507  : 			// update link
; 508  : 
; 509  : 			// task_terminated
; 510  : 
; 511  : 			/////////////////////////////////////////////////////////////////
; 512  : 			// kill data
; 513  : 			{
; 514  : 
; 515  : 				task_kill_loss_data
; 516  : 					*kill;
; 517  : 					
; 518  : 				kill = raw->task_kills;

  00b63	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00b66	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00b6c	89 4d e8	 mov	 DWORD PTR _kill$1[ebp], ecx
$LN36@pack_local:

; 519  : 
; 520  : 				while (kill)

  00b6f	83 7d e8 00	 cmp	 DWORD PTR _kill$1[ebp], 0
  00b73	0f 84 ab 00 00
	00		 je	 $LN37@pack_local

; 521  : 				{
; 522  : 
; 523  : 					pack_int_value (en, INT_TYPE_VALID, TRUE);

  00b79	6a 01		 push	 1
  00b7b	68 ef 00 00 00	 push	 239			; 000000efH
  00b80	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00b83	50		 push	 eax
  00b84	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 524  : 	
; 525  : 					pack_entity_type (kill->victim_type);

  00b89	8b 45 e8	 mov	 eax, DWORD PTR _kill$1[ebp]
  00b8c	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b8e	51		 push	 ecx
  00b8f	e8 00 00 00 00	 call	 ?pack_entity_type@@YGXW4ENTITY_TYPES@@@Z ; pack_entity_type

; 526  : 					pack_entity_type (kill->aggressor_type);

  00b94	8b 45 e8	 mov	 eax, DWORD PTR _kill$1[ebp]
  00b97	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00b9a	51		 push	 ecx
  00b9b	e8 00 00 00 00	 call	 ?pack_entity_type@@YGXW4ENTITY_TYPES@@@Z ; pack_entity_type

; 527  : 	
; 528  : 					pack_int_value (en, INT_TYPE_ENTITY_SUB_TYPE, kill->victim_sub_type);

  00ba0	8b 45 e8	 mov	 eax, DWORD PTR _kill$1[ebp]
  00ba3	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00ba6	51		 push	 ecx
  00ba7	6a 34		 push	 52			; 00000034H
  00ba9	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00bac	52		 push	 edx
  00bad	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 529  : 					pack_int_value (en, INT_TYPE_ENTITY_SUB_TYPE, kill->aggressor_sub_type);

  00bb2	8b 45 e8	 mov	 eax, DWORD PTR _kill$1[ebp]
  00bb5	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00bb8	51		 push	 ecx
  00bb9	6a 34		 push	 52			; 00000034H
  00bbb	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00bbe	52		 push	 edx
  00bbf	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 530  : 	
; 531  : 					pack_int_value (en, INT_TYPE_GROUP_MEMBER_NUMBER, kill->victim_id);

  00bc4	8b 45 e8	 mov	 eax, DWORD PTR _kill$1[ebp]
  00bc7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00bca	51		 push	 ecx
  00bcb	6a 4b		 push	 75			; 0000004bH
  00bcd	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00bd0	52		 push	 edx
  00bd1	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 532  : 					pack_int_value (en, INT_TYPE_GROUP_MEMBER_NUMBER, kill->aggressor_id);

  00bd6	8b 45 e8	 mov	 eax, DWORD PTR _kill$1[ebp]
  00bd9	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00bdc	51		 push	 ecx
  00bdd	6a 4b		 push	 75			; 0000004bH
  00bdf	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00be2	52		 push	 edx
  00be3	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 533  : 	
; 534  : 					pack_float_value (en, FLOAT_TYPE_TIME_OF_DAY, kill->time);

  00be8	8b 45 e8	 mov	 eax, DWORD PTR _kill$1[ebp]
  00beb	51		 push	 ecx
  00bec	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  00bf1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bf6	68 8e 00 00 00	 push	 142			; 0000008eH
  00bfb	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00bfe	51		 push	 ecx
  00bff	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 535  : 	
; 536  : 					pack_int_value (en, INT_TYPE_DAY, kill->day);

  00c04	8b 45 e8	 mov	 eax, DWORD PTR _kill$1[ebp]
  00c07	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00c0a	51		 push	 ecx
  00c0b	6a 26		 push	 38			; 00000026H
  00c0d	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00c10	52		 push	 edx
  00c11	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 537  : 	
; 538  : 					kill = kill->next;

  00c16	8b 45 e8	 mov	 eax, DWORD PTR _kill$1[ebp]
  00c19	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00c1c	89 4d e8	 mov	 DWORD PTR _kill$1[ebp], ecx

; 539  : 				}

  00c1f	e9 4b ff ff ff	 jmp	 $LN36@pack_local
$LN37@pack_local:

; 540  : 
; 541  : 				pack_int_value (en, INT_TYPE_VALID, FALSE);

  00c24	6a 00		 push	 0
  00c26	68 ef 00 00 00	 push	 239			; 000000efH
  00c2b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00c2e	50		 push	 eax
  00c2f	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 542  : 					
; 543  : 				kill = raw->task_losses;

  00c34	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00c37	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00c3d	89 4d e8	 mov	 DWORD PTR _kill$1[ebp], ecx
$LN38@pack_local:

; 544  : 
; 545  : 				while (kill)

  00c40	83 7d e8 00	 cmp	 DWORD PTR _kill$1[ebp], 0
  00c44	0f 84 ab 00 00
	00		 je	 $LN39@pack_local

; 546  : 				{
; 547  : 
; 548  : 					pack_int_value (en, INT_TYPE_VALID, TRUE);

  00c4a	6a 01		 push	 1
  00c4c	68 ef 00 00 00	 push	 239			; 000000efH
  00c51	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00c54	50		 push	 eax
  00c55	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 549  : 	
; 550  : 					pack_entity_type (kill->victim_type);

  00c5a	8b 45 e8	 mov	 eax, DWORD PTR _kill$1[ebp]
  00c5d	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c5f	51		 push	 ecx
  00c60	e8 00 00 00 00	 call	 ?pack_entity_type@@YGXW4ENTITY_TYPES@@@Z ; pack_entity_type

; 551  : 					pack_entity_type (kill->aggressor_type);

  00c65	8b 45 e8	 mov	 eax, DWORD PTR _kill$1[ebp]
  00c68	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00c6b	51		 push	 ecx
  00c6c	e8 00 00 00 00	 call	 ?pack_entity_type@@YGXW4ENTITY_TYPES@@@Z ; pack_entity_type

; 552  : 	
; 553  : 					pack_int_value (en, INT_TYPE_ENTITY_SUB_TYPE, kill->victim_sub_type);

  00c71	8b 45 e8	 mov	 eax, DWORD PTR _kill$1[ebp]
  00c74	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00c77	51		 push	 ecx
  00c78	6a 34		 push	 52			; 00000034H
  00c7a	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00c7d	52		 push	 edx
  00c7e	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 554  : 					pack_int_value (en, INT_TYPE_ENTITY_SUB_TYPE, kill->aggressor_sub_type);

  00c83	8b 45 e8	 mov	 eax, DWORD PTR _kill$1[ebp]
  00c86	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00c89	51		 push	 ecx
  00c8a	6a 34		 push	 52			; 00000034H
  00c8c	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00c8f	52		 push	 edx
  00c90	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 555  : 	
; 556  : 					pack_int_value (en, INT_TYPE_GROUP_MEMBER_NUMBER, kill->victim_id);

  00c95	8b 45 e8	 mov	 eax, DWORD PTR _kill$1[ebp]
  00c98	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00c9b	51		 push	 ecx
  00c9c	6a 4b		 push	 75			; 0000004bH
  00c9e	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00ca1	52		 push	 edx
  00ca2	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 557  : 					pack_int_value (en, INT_TYPE_GROUP_MEMBER_NUMBER, kill->aggressor_id);

  00ca7	8b 45 e8	 mov	 eax, DWORD PTR _kill$1[ebp]
  00caa	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00cad	51		 push	 ecx
  00cae	6a 4b		 push	 75			; 0000004bH
  00cb0	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00cb3	52		 push	 edx
  00cb4	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 558  : 	
; 559  : 					pack_float_value (en, FLOAT_TYPE_TIME_OF_DAY, kill->time);

  00cb9	8b 45 e8	 mov	 eax, DWORD PTR _kill$1[ebp]
  00cbc	51		 push	 ecx
  00cbd	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  00cc2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cc7	68 8e 00 00 00	 push	 142			; 0000008eH
  00ccc	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00ccf	51		 push	 ecx
  00cd0	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 560  : 	
; 561  : 					pack_int_value (en, INT_TYPE_DAY, kill->day);

  00cd5	8b 45 e8	 mov	 eax, DWORD PTR _kill$1[ebp]
  00cd8	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00cdb	51		 push	 ecx
  00cdc	6a 26		 push	 38			; 00000026H
  00cde	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00ce1	52		 push	 edx
  00ce2	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 562  : 	
; 563  : 					kill = kill->next;

  00ce7	8b 45 e8	 mov	 eax, DWORD PTR _kill$1[ebp]
  00cea	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00ced	89 4d e8	 mov	 DWORD PTR _kill$1[ebp], ecx

; 564  : 				}

  00cf0	e9 4b ff ff ff	 jmp	 $LN38@pack_local
$LN39@pack_local:

; 565  : 
; 566  : 				pack_int_value (en, INT_TYPE_VALID, FALSE);

  00cf5	6a 00		 push	 0
  00cf7	68 ef 00 00 00	 push	 239			; 000000efH
  00cfc	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00cff	50		 push	 eax
  00d00	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 567  : 			}
; 568  : 			/////////////////////////////////////////////////////////////////
; 569  : 
; 570  : 			// awarded medals
; 571  : 
; 572  : 			// awarded promotion
; 573  : 
; 574  : 			pack_int_value (en, INT_TYPE_TASK_ID, raw->task_id);

  00d05	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00d08	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  00d0e	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  00d14	51		 push	 ecx
  00d15	68 dc 00 00 00	 push	 220			; 000000dcH
  00d1a	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00d1d	52		 push	 edx
  00d1e	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 575  : 
; 576  : 			pack_int_value (en, INT_TYPE_TASK_COMPLETED, raw->task_completed);

  00d23	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00d26	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  00d2c	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  00d2f	83 e1 07	 and	 ecx, 7
  00d32	51		 push	 ecx
  00d33	68 d9 00 00 00	 push	 217			; 000000d9H
  00d38	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00d3b	52		 push	 edx
  00d3c	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 577  : 
; 578  : 			// route_check_sum
; 579  : 
; 580  : 			pack_int_value (en, INT_TYPE_KILLS, raw->kills);

  00d41	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00d44	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  00d4a	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  00d50	51		 push	 ecx
  00d51	6a 72		 push	 114			; 00000072H
  00d53	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00d56	52		 push	 edx
  00d57	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 581  : 
; 582  : 			pack_int_value (en, INT_TYPE_LOSSES, raw->losses);

  00d5c	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00d5f	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  00d65	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  00d68	81 e1 ff 03 00
	00		 and	 ecx, 1023		; 000003ffH
  00d6e	51		 push	 ecx
  00d6f	6a 7f		 push	 127			; 0000007fH
  00d71	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00d74	52		 push	 edx
  00d75	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 583  : 
; 584  : 			// player_task
; 585  : 
; 586  : 			pack_int_value (en, INT_TYPE_MOVEMENT_TYPE, raw->movement_type);

  00d7a	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00d7d	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  00d83	c1 e9 17	 shr	 ecx, 23			; 00000017H
  00d86	83 e1 07	 and	 ecx, 7
  00d89	51		 push	 ecx
  00d8a	68 90 00 00 00	 push	 144			; 00000090H
  00d8f	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00d92	52		 push	 edx
  00d93	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 587  : 
; 588  : 			pack_int_value (en, INT_TYPE_TASK_DIFFICULTY, raw->difficulty);

  00d98	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00d9b	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  00da1	c1 e9 1a	 shr	 ecx, 26			; 0000001aH
  00da4	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00da7	51		 push	 ecx
  00da8	68 da 00 00 00	 push	 218			; 000000daH
  00dad	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00db0	52		 push	 edx
  00db1	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 589  : 
; 590  : 			// critical_task
; 591  : 
; 592  : 			pack_int_value (en, INT_TYPE_TASK_SCORE, raw->task_score);

  00db6	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00db9	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00dbf	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00dc5	51		 push	 ecx
  00dc6	68 e2 00 00 00	 push	 226			; 000000e2H
  00dcb	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00dce	52		 push	 edx
  00dcf	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 593  : 
; 594  : 			// route_length
; 595  : 
; 596  : 			pack_int_value (en, INT_TYPE_SIDE, raw->side);

  00dd4	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00dd7	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00ddd	83 e1 03	 and	 ecx, 3
  00de0	51		 push	 ecx
  00de1	68 bb 00 00 00	 push	 187			; 000000bbH
  00de6	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00de9	52		 push	 edx
  00dea	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 597  : 	
; 598  : 			/////////////////////////////////////////////////////////////////
; 599  : 			if (raw->update_link.parent)

  00def	8b 45 ec	 mov	 eax, DWORD PTR _raw$2[ebp]
  00df2	83 b8 80 00 00
	00 00		 cmp	 DWORD PTR [eax+128], 0
  00df9	74 12		 je	 SHORT $LN72@pack_local

; 600  : 			{
; 601  : 				pack_int_value (en, INT_TYPE_VALID, TRUE);

  00dfb	6a 01		 push	 1
  00dfd	68 ef 00 00 00	 push	 239			; 000000efH
  00e02	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00e05	50		 push	 eax
  00e06	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 602  : 			}
; 603  : 			else

  00e0b	eb 10		 jmp	 SHORT $LN73@pack_local
$LN72@pack_local:

; 604  : 			{
; 605  : 				pack_int_value (en, INT_TYPE_VALID, FALSE);

  00e0d	6a 00		 push	 0
  00e0f	68 ef 00 00 00	 push	 239			; 000000efH
  00e14	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00e17	50		 push	 eax
  00e18	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN73@pack_local:
$LN2@pack_local:
$LN1@pack_local:

; 606  : 			}
; 607  : 			/////////////////////////////////////////////////////////////////
; 608  : 
; 609  : 			break;
; 610  : 		}
; 611  : 		////////////////////////////////////////
; 612  : 		case PACK_MODE_BROWSE_SESSION:
; 613  : 		////////////////////////////////////////
; 614  : 		{
; 615  : 			break;
; 616  : 		}
; 617  : 		////////////////////////////////////////
; 618  : 		case PACK_MODE_UPDATE_ENTITY:
; 619  : 		////////////////////////////////////////
; 620  : 		{
; 621  : 			break;
; 622  : 		}
; 623  : 	}
; 624  : }

  00e1d	5f		 pop	 edi
  00e1e	5e		 pop	 esi
  00e1f	5b		 pop	 ebx
  00e20	8b e5		 mov	 esp, ebp
  00e22	5d		 pop	 ebp
  00e23	c2 08 00	 ret	 8
  00e26	66 90		 npad	 2
$LN83@pack_local:
  00e28	00 00 00 00	 DD	 $LN43@pack_local
  00e2c	00 00 00 00	 DD	 $LN44@pack_local
$LN81@pack_local:
  00e30	00		 DB	 0
  00e31	00		 DB	 0
  00e32	01		 DB	 1
  00e33	01		 DB	 1
  00e34	01		 DB	 1
  00e35	01		 DB	 1
  00e36	01		 DB	 1
  00e37	01		 DB	 1
  00e38	01		 DB	 1
  00e39	00		 DB	 0
  00e3a	00		 DB	 0
  00e3b	90		 npad	 1
$LN84@pack_local:
  00e3c	00 00 00 00	 DD	 $LN60@pack_local
  00e40	00 00 00 00	 DD	 $LN61@pack_local
$LN82@pack_local:
  00e44	00		 DB	 0
  00e45	00		 DB	 0
  00e46	01		 DB	 1
  00e47	01		 DB	 1
  00e48	01		 DB	 1
  00e49	01		 DB	 1
  00e4a	01		 DB	 1
  00e4b	01		 DB	 1
  00e4c	01		 DB	 1
  00e4d	00		 DB	 0
  00e4e	00		 DB	 0
?pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z ENDP	; pack_local_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\task\ts_pack.c
;	COMDAT ?overload_task_pack_functions@@YGXXZ
_TEXT	SEGMENT
?overload_task_pack_functions@@YGXXZ PROC		; overload_task_pack_functions, COMDAT

; 1194 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1195 : 	fn_pack_local_entity_data[ENTITY_TYPE_TASK]		= pack_local_data;

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 22	 imul	 ecx, eax, 34
  00011	c7 81 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fn_pack_local_entity_data@@3PAP6GXPAUENTITY@@W4PACK_MODES@@@ZA[ecx], OFFSET ?pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z ; pack_local_data

; 1196 : 
; 1197 : 	fn_unpack_local_entity_data[ENTITY_TYPE_TASK]	= unpack_local_data;

  0001b	b8 04 00 00 00	 mov	 eax, 4
  00020	6b c8 22	 imul	 ecx, eax, 34
  00023	c7 81 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fn_unpack_local_entity_data@@3PAP6GXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@ZA[ecx], OFFSET ?unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z ; unpack_local_data

; 1198 : }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?overload_task_pack_functions@@YGXXZ ENDP		; overload_task_pack_functions
_TEXT	ENDS
END
